var expect=require("expect.js"),cheerio=require(".."),fruits=require("./fixtures").fruits,toArray=Function.call.bind(Array.prototype.slice);describe("$(...)",function(){var n,i;beforeEach(function(){n=cheerio.load(fruits),i=n("#fruits")}),describe(".append",function(){it("() : should do nothing",function(){expect(n("#fruits").append()[0].tagName).to.equal("ul")}),it("(html) : should add element as last child",function(){i.append('<li class="plum">Plum</li>'),expect(i.children(3).hasClass("plum")).to.be.ok()}),it("($(...)) : should add element as last child",function(){var e=n('<li class="plum">Plum</li>');i.append(e),expect(i.children(3).hasClass("plum")).to.be.ok()}),it("(Node) : should add element as last child",function(){var e=n('<li class="plum">Plum</li>')[0];i.append(e),expect(i.children(3).hasClass("plum")).to.be.ok()}),it("(existing Node) : should remove node from previous location",function(){var e,t=i.children()[0];expect(i.children()).to.have.length(3),i.append(t),e=i.children(),expect(e).to.have.length(3),expect(e[0]).to.not.equal(t),expect(e[2]).to.equal(t)}),it("(existing Node) : should remove existing node from previous location",function(){var e,t=i.children()[0],l=n("<div></div>");expect(i.children()).to.have.length(3),l.append(t),e=i.children(),expect(e).to.have.length(2),expect(e[0]).to.not.equal(t),expect(l.children()).to.have.length(1),expect(l.children()[0]).to.equal(t)}),it("(existing Node) : should update original direct siblings",function(){n(".pear").append(n(".orange")),expect(n(".apple").next()[0]).to.be(n(".pear")[0]),expect(n(".pear").prev()[0]).to.be(n(".apple")[0])}),it("(elem) : should NOP if removed",function(){var e=n(".apple");e.remove(),i.append(e),expect(i.children(2).hasClass("apple")).to.be.ok()}),it("($(...), html) : should add multiple elements as last children",function(){var e=n('<li class="plum">Plum</li>');i.append(e,'<li class="grape">Grape</li>'),expect(i.children(3).hasClass("plum")).to.be.ok(),expect(i.children(4).hasClass("grape")).to.be.ok()}),it("(Array) : should append all elements in the array",function(){var e=n('<li class="plum">Plum</li><li class="grape">Grape</li>').get();i.append(e),expect(i.children(3).hasClass("plum")).to.be.ok(),expect(i.children(4).hasClass("grape")).to.be.ok()}),it("(fn) : should invoke the callback with the correct arguments and context",function(){i=i.children();var e=[],t=[];i.append(function(){e.push(toArray(arguments)),t.push(this)}),expect(e).to.eql([[0,"Apple"],[1,"Orange"],[2,"Pear"]]),expect(t).to.eql([i[0],i[1],i[2]])}),it("(fn) : should add returned string as last child",function(){var e,t,l;(i=i.children()).append(function(){return'<div class="first">'}),e=i.eq(0),t=i.eq(1),l=i.eq(2),expect(e.find(".first")[0]).to.equal(e.contents()[1]),expect(t.find(".first")[0]).to.equal(t.contents()[1]),expect(l.find(".first")[0]).to.equal(l.contents()[1])}),it("(fn) : should add returned Cheerio object as last child",function(){var e,t,l;(i=i.children()).append(function(){return n('<div class="second">')}),e=i.eq(0),t=i.eq(1),l=i.eq(2),expect(e.find(".second")[0]).to.equal(e.contents()[1]),expect(t.find(".second")[0]).to.equal(t.contents()[1]),expect(l.find(".second")[0]).to.equal(l.contents()[1])}),it("(fn) : should add returned Node as last child",function(){var e,t,l;(i=i.children()).append(function(){return n('<div class="third">')[0]}),e=i.eq(0),t=i.eq(1),l=i.eq(2),expect(e.find(".third")[0]).to.equal(e.contents()[1]),expect(t.find(".third")[0]).to.equal(t.contents()[1]),expect(l.find(".third")[0]).to.equal(l.contents()[1])}),it("should maintain correct object state (Issue: #10)",function(){var e=n("<div></div>").append("<div><div></div></div>").children().children().parent();expect(e).to.be.ok()}),it("($(...)) : should remove from root element",function(){var e=n('<li class="plum">Plum</li>'),t=e[0].root;expect(t).to.be.ok(),i.append(e),expect(e[0].root).to.not.be.ok(),expect(t.childNodes).to.not.contain(e[0])})}),describe(".prepend",function(){it("() : should do nothing",function(){expect(n("#fruits").prepend()[0].tagName).to.equal("ul")}),it("(html) : should add element as first child",function(){i.prepend('<li class="plum">Plum</li>'),expect(i.children(0).hasClass("plum")).to.be.ok()}),it("($(...)) : should add element as first child",function(){var e=n('<li class="plum">Plum</li>');i.prepend(e),expect(i.children(0).hasClass("plum")).to.be.ok()}),it("(Node) : should add node as first child",function(){var e=n('<li class="plum">Plum</li>')[0];i.prepend(e),expect(i.children(0).hasClass("plum")).to.be.ok()}),it("(existing Node) : should remove existing nodes from previous locations",function(){var e,t=i.children()[2];expect(i.children()).to.have.length(3),i.prepend(t),e=i.children(),expect(e).to.have.length(3),expect(e[2]).to.not.equal(t),expect(e[0]).to.equal(t)}),it("(existing Node) : should update original direct siblings",function(){n(".pear").prepend(n(".orange")),expect(n(".apple").next()[0]).to.be(n(".pear")[0]),expect(n(".pear").prev()[0]).to.be(n(".apple")[0])}),it("(elem) : should handle if removed",function(){var e=n(".apple");e.remove(),i.prepend(e),expect(i.children(0).hasClass("apple")).to.be.ok()}),it("(Array) : should add all elements in the array as inital children",function(){var e=n('<li class="plum">Plum</li><li class="grape">Grape</li>').get();i.prepend(e),expect(i.children(0).hasClass("plum")).to.be.ok(),expect(i.children(1).hasClass("grape")).to.be.ok()}),it("(html, $(...), html) : should add multiple elements as first children",function(){var e=n('<li class="plum">Plum</li>');i.prepend(e,'<li class="grape">Grape</li>'),expect(i.children(0).hasClass("plum")).to.be.ok(),expect(i.children(1).hasClass("grape")).to.be.ok()}),it("(fn) : should invoke the callback with the correct arguments and context",function(){var e=[],t=[];(i=i.children()).prepend(function(){e.push(toArray(arguments)),t.push(this)}),expect(e).to.eql([[0,"Apple"],[1,"Orange"],[2,"Pear"]]),expect(t).to.eql([i[0],i[1],i[2]])}),it("(fn) : should add returned string as first child",function(){var e,t,l;(i=i.children()).prepend(function(){return'<div class="first">'}),e=i.eq(0),t=i.eq(1),l=i.eq(2),expect(e.find(".first")[0]).to.equal(e.contents()[0]),expect(t.find(".first")[0]).to.equal(t.contents()[0]),expect(l.find(".first")[0]).to.equal(l.contents()[0])}),it("(fn) : should add returned Cheerio object as first child",function(){var e,t,l;(i=i.children()).prepend(function(){return n('<div class="second">')}),e=i.eq(0),t=i.eq(1),l=i.eq(2),expect(e.find(".second")[0]).to.equal(e.contents()[0]),expect(t.find(".second")[0]).to.equal(t.contents()[0]),expect(l.find(".second")[0]).to.equal(l.contents()[0])}),it("(fn) : should add returned Node as first child",function(){var e,t,l;(i=i.children()).prepend(function(){return n('<div class="third">')[0]}),e=i.eq(0),t=i.eq(1),l=i.eq(2),expect(e.find(".third")[0]).to.equal(e.contents()[0]),expect(t.find(".third")[0]).to.equal(t.contents()[0]),expect(l.find(".third")[0]).to.equal(l.contents()[0])}),it("($(...)) : should remove from root element",function(){var e=n('<li class="plum">Plum</li>'),t=e[0].root;expect(t).to.be.ok(),i.prepend(e),expect(e[0].root).to.not.be.ok(),expect(t.childNodes).to.not.contain(e[0])})}),describe(".after",function(){it("() : should do nothing",function(){expect(n("#fruits").after()[0].tagName).to.equal("ul")}),it("(html) : should add element as next sibling",function(){n(".apple").after('<li class="grape">Grape</li>'),expect(n(".apple").next().hasClass("grape")).to.be.ok()}),it("(Array) : should add all elements in the array as next sibling",function(){var e=n('<li class="plum">Plum</li><li class="grape">Grape</li>').get();n(".apple").after(e),expect(i.children(1).hasClass("plum")).to.be.ok(),expect(i.children(2).hasClass("grape")).to.be.ok()}),it("($(...)) : should add element as next sibling",function(){var e=n('<li class="plum">Plum</li>');n(".apple").after(e),expect(n(".apple").next().hasClass("plum")).to.be.ok()}),it("(Node) : should add element as next sibling",function(){var e=n('<li class="plum">Plum</li>')[0];n(".apple").after(e),expect(n(".apple").next().hasClass("plum")).to.be.ok()}),it("(existing Node) : should remove existing nodes from previous locations",function(){var e,t=i.children()[2];n(".apple").after(t),e=i.children(),expect(e).to.have.length(3),expect(e[1]).to.be(t)}),it("(existing Node) : should update original direct siblings",function(){n(".pear").after(n(".orange")),expect(n(".apple").next()[0]).to.be(n(".pear")[0]),expect(n(".pear").prev()[0]).to.be(n(".apple")[0])}),it("(elem) : should handle if removed",function(){var e=n(".apple"),t=n('<li class="plum">Plum</li>');e.remove(),e.after(t),expect(t.prev()).to.be.empty()}),it("($(...), html) : should add multiple elements as next siblings",function(){var e=n('<li class="plum">Plum</li>');n(".apple").after(e,'<li class="grape">Grape</li>'),expect(n(".apple").next().hasClass("plum")).to.be.ok(),expect(n(".plum").next().hasClass("grape")).to.be.ok()}),it("(fn) : should invoke the callback with the correct arguments and context",function(){var e=[],t=[];(i=i.children()).after(function(){e.push(toArray(arguments)),t.push(this)}),expect(e).to.eql([[0,"Apple"],[1,"Orange"],[2,"Pear"]]),expect(t).to.eql([i[0],i[1],i[2]])}),it("(fn) : should add returned string as next sibling",function(){(i=i.children()).after(function(){return'<li class="first">'}),expect(n(".first")[0]).to.equal(n("#fruits").contents()[1]),expect(n(".first")[1]).to.equal(n("#fruits").contents()[3]),expect(n(".first")[2]).to.equal(n("#fruits").contents()[5])}),it("(fn) : should add returned Cheerio object as next sibling",function(){(i=i.children()).after(function(){return n('<li class="second">')}),expect(n(".second")[0]).to.equal(n("#fruits").contents()[1]),expect(n(".second")[1]).to.equal(n("#fruits").contents()[3]),expect(n(".second")[2]).to.equal(n("#fruits").contents()[5])}),it("(fn) : should add returned element as next sibling",function(){(i=i.children()).after(function(){return n('<li class="third">')[0]}),expect(n(".third")[0]).to.equal(n("#fruits").contents()[1]),expect(n(".third")[1]).to.equal(n("#fruits").contents()[3]),expect(n(".third")[2]).to.equal(n("#fruits").contents()[5])}),it("($(...)) : should remove from root element",function(){var e=n('<li class="plum">Plum</li>'),t=e[0].root;expect(t).to.be.ok(),i.after(e),expect(e[0].root).to.not.be.ok(),expect(t.childNodes).to.not.contain(e[0])})}),describe(".before",function(){it("() : should do nothing",function(){expect(n("#fruits").before()[0].tagName).to.equal("ul")}),it("(html) : should add element as previous sibling",function(){n(".apple").before('<li class="grape">Grape</li>'),expect(n(".apple").prev().hasClass("grape")).to.be.ok()}),it("($(...)) : should add element as previous sibling",function(){var e=n('<li class="plum">Plum</li>');n(".apple").before(e),expect(n(".apple").prev().hasClass("plum")).to.be.ok()}),it("(Node) : should add element as previous sibling",function(){var e=n('<li class="plum">Plum</li>');n(".apple").before(e),expect(n(".apple").prev().hasClass("plum")).to.be.ok()}),it("(existing Node) : should remove existing nodes from previous locations",function(){var e,t=i.children()[2];n(".apple").before(t),e=i.children(),expect(e).to.have.length(3),expect(e[0]).to.be(t)}),it("(existing Node) : should update original direct siblings",function(){n(".apple").before(n(".orange")),expect(n(".apple").next()[0]).to.be(n(".pear")[0]),expect(n(".pear").prev()[0]).to.be(n(".apple")[0])}),it("(elem) : should handle if removed",function(){var e=n(".apple"),t=n('<li class="plum">Plum</li>');e.remove(),e.before(t),expect(t.next()).to.be.empty()}),it("(Array) : should add all elements in the array as previous sibling",function(){var e=n('<li class="plum">Plum</li><li class="grape">Grape</li>').get();n(".apple").before(e),expect(i.children(0).hasClass("plum")).to.be.ok(),expect(i.children(1).hasClass("grape")).to.be.ok()}),it("($(...), html) : should add multiple elements as previous siblings",function(){var e=n('<li class="plum">Plum</li>');n(".apple").before(e,'<li class="grape">Grape</li>'),expect(n(".apple").prev().hasClass("grape")).to.be.ok(),expect(n(".grape").prev().hasClass("plum")).to.be.ok()}),it("(fn) : should invoke the callback with the correct arguments and context",function(){var e=[],t=[];(i=i.children()).before(function(){e.push(toArray(arguments)),t.push(this)}),expect(e).to.eql([[0,"Apple"],[1,"Orange"],[2,"Pear"]]),expect(t).to.eql([i[0],i[1],i[2]])}),it("(fn) : should add returned string as previous sibling",function(){(i=i.children()).before(function(){return'<li class="first">'}),expect(n(".first")[0]).to.equal(n("#fruits").contents()[0]),expect(n(".first")[1]).to.equal(n("#fruits").contents()[2]),expect(n(".first")[2]).to.equal(n("#fruits").contents()[4])}),it("(fn) : should add returned Cheerio object as previous sibling",function(){(i=i.children()).before(function(){return n('<li class="second">')}),expect(n(".second")[0]).to.equal(n("#fruits").contents()[0]),expect(n(".second")[1]).to.equal(n("#fruits").contents()[2]),expect(n(".second")[2]).to.equal(n("#fruits").contents()[4])}),it("(fn) : should add returned Node as previous sibling",function(){(i=i.children()).before(function(){return n('<li class="third">')[0]}),expect(n(".third")[0]).to.equal(n("#fruits").contents()[0]),expect(n(".third")[1]).to.equal(n("#fruits").contents()[2]),expect(n(".third")[2]).to.equal(n("#fruits").contents()[4])}),it("($(...)) : should remove from root element",function(){var e=n('<li class="plum">Plum</li>'),t=e[0].root;expect(t).to.be.ok(),i.before(e),expect(e[0].root).to.not.be.ok(),expect(t.childNodes).to.not.contain(e[0])})}),describe(".remove",function(){it("() : should remove selected elements",function(){n(".apple").remove(),expect(i.find(".apple")).to.have.length(0)}),it("() : should be reentrant",function(){var e=n(".apple");e.remove(),e.remove(),expect(i.find(".apple")).to.have.length(0)}),it("(selector) : should remove matching selected elements",function(){n("li").remove(".apple"),expect(i.find(".apple")).to.have.length(0)}),it("($(...)) : should remove from root element",function(){var e=n('<li class="plum">Plum</li>'),t=e[0].root;expect(t).to.be.ok(),e.remove(),expect(e[0].root).to.not.be.ok(),expect(t.childNodes).to.not.contain(e[0])})}),describe(".replaceWith",function(){it("(elem) : should replace one <li> tag with another",function(){var e=n('<li class="plum">Plum</li>');n(".pear").replaceWith(e),expect(n(".orange").next().hasClass("plum")).to.be.ok(),expect(n(".orange").next().html()).to.equal("Plum")}),it("(Array) : should replace one <li> tag with the elements in the array",function(){var e=n('<li class="plum">Plum</li><li class="grape">Grape</li>').get();n(".pear").replaceWith(e),expect(i.children(2).hasClass("plum")).to.be.ok(),expect(i.children(3).hasClass("grape")).to.be.ok(),expect(i.children()).to.have.length(4)}),it("(Node) : should replace the selected element with given node",function(){var e=n("<h2>hi <span>there</span></h2>"),t=n("<ul></ul>"),l=e.find("span").replaceWith(t[0]);expect(t[0].parentNode).to.equal(e[0]),expect(l[0].parentNode).to.equal(null),expect(n.html(e)).to.equal("<h2>hi <ul></ul></h2>")}),it("(existing element) : should remove element from its previous location",function(){n(".pear").replaceWith(n(".apple")),expect(i.children()).to.have.length(2),expect(i.children()[0]).to.equal(n(".orange")[0]),expect(i.children()[1]).to.equal(n(".apple")[0])}),it("(elem) : should NOP if removed",function(){var e=n(".pear"),t=n('<li class="plum">Plum</li>');e.remove(),e.replaceWith(t),expect(n(".orange").next().hasClass("plum")).to.not.be.ok()}),it("(elem) : should replace the single selected element with given element",function(){var e=n("<h2>hi <span>there</span></h2>"),t=n("<div>here</div>"),l=e.find("span").replaceWith(t);expect(t[0].parentNode).to.equal(e[0]),expect(l[0].parentNode).to.equal(null),expect(n.html(e)).to.equal("<h2>hi <div>here</div></h2>")}),it("(str) : should accept strings",function(){var e=n("<h2>hi <span>there</span></h2>"),t=e.find("span").replaceWith("<div>here</div>");expect(t[0].parentNode).to.equal(null),expect(n.html(e)).to.equal("<h2>hi <div>here</div></h2>")}),it("(str) : should replace all selected elements",function(){var e=n("<b>a<br>b<br>c<br>d</b>"),t=e.find("br").replaceWith(" ");expect(t[0].parentNode).to.equal(null),expect(n.html(e)).to.equal("<b>a b c d</b>")}),it("(fn) : should invoke the callback with the correct argument and context",function(){var e=i.children().get(),t=[],l=[];i.children().replaceWith(function(){return t.push(toArray(arguments)),l.push(this),'<li class="first">'}),expect(t).to.eql([[0,e[0]],[1,e[1]],[2,e[2]]]),expect(l).to.eql([e[0],e[1],e[2]])}),it("(fn) : should replace the selected element with the returned string",function(){i.children().replaceWith(function(){return'<li class="first">'}),expect(i.find(".first")).to.have.length(3)}),it("(fn) : should replace the selected element with the returned Cheerio object",function(){i.children().replaceWith(function(){return n('<li class="second">')}),expect(i.find(".second")).to.have.length(3)}),it("(fn) : should replace the selected element with the returned node",function(){i.children().replaceWith(function(){return n('<li class="third">')[0]}),expect(i.find(".third")).to.have.length(3)}),it("($(...)) : should remove from root element",function(){var e=n('<li class="plum">Plum</li>'),t=e[0].root;expect(t).to.be.ok(),i.children().replaceWith(e),expect(e[0].root).to.not.be.ok(),expect(t.childNodes).to.not.contain(e[0])})}),describe(".empty",function(){it("() : should remove all children from selected elements",function(){expect(i.children()).to.have.length(3),i.empty(),expect(i.children()).to.have.length(0)}),it("() : should allow element reinsertion",function(){var e=i.children();i.empty(),expect(i.children()).to.have.length(0),expect(e).to.have.length(3),i.append(n("<div></div><div></div>")),i.children().eq(0).replaceWith(e),expect(i.children()).to.have.length(4)}),it("() : should destroy children's references to the parent",function(){var e=i.children();i.empty(),expect(e.eq(0).parent()).to.have.length(0),expect(e.eq(0).next()).to.have.length(0),expect(e.eq(0).prev()).to.have.length(0),expect(e.eq(1).parent()).to.have.length(0),expect(e.eq(1).next()).to.have.length(0),expect(e.eq(1).prev()).to.have.length(0),expect(e.eq(2).parent()).to.have.length(0),expect(e.eq(2).next()).to.have.length(0),expect(e.eq(2).prev()).to.have.length(0)})}),describe(".html",function(){it("() : should get the innerHTML for an element",function(){expect(i.html()).to.equal(['<li class="apple">Apple</li>','<li class="orange">Orange</li>','<li class="pear">Pear</li>'].join(""))}),it("() : should get innerHTML even if its just text",function(){expect(n(".pear",'<li class="pear">Pear</li>').html()).to.equal("Pear")}),it("() : should return empty string if nothing inside",function(){expect(n("li","<li></li>").html()).to.equal("")}),it("(html) : should set the html for its children",function(){i.html('<li class="durian">Durian</li>');var e=i.html();expect(e).to.equal('<li class="durian">Durian</li>')}),it("(html) : should add new elements for each element in selection",function(){var e=n("li");e.html('<li class="durian">Durian</li>');var t=0;e.each(function(){expect(n(this).children().parent().get(0)).to.equal(this),t++}),expect(t).to.equal(3)}),it("(elem) : should set the html for its children with element",function(){i.html(n('<li class="durian">Durian</li>'));var e=i.html();expect(e).to.equal('<li class="durian">Durian</li>')}),it("() : should allow element reinsertion",function(){var e=i.children();i.html("<div></div><div></div>"),expect(i.children()).to.have.length(2),i.children().eq(0).replaceWith(e),expect(i.children()).to.have.length(4)})}),describe(".toString",function(){it("() : should get the outerHTML for an element",function(){expect(i.toString()).to.equal(fruits)}),it("() : should return an html string for a set of elements",function(){expect(i.find("li").toString()).to.equal('<li class="apple">Apple</li><li class="orange">Orange</li><li class="pear">Pear</li>')}),it("() : should be called implicitly",function(){var e=[n("<foo>"),n("<bar>"),n("<baz>")].join("");expect(e).to.equal("<foo></foo><bar></bar><baz></baz>")})}),describe(".text",function(){it("() : gets the text for a single element",function(){expect(n(".apple").text()).to.equal("Apple")}),it("() : combines all text from children text nodes",function(){expect(n("#fruits").text()).to.equal("AppleOrangePear")}),it("(text) : sets the text for the child node",function(){n(".apple").text("Granny Smith Apple"),expect(n(".apple")[0].childNodes[0].data).to.equal("Granny Smith Apple")}),it("(text) : inserts separate nodes for all children",function(){n("li").text("Fruits");var e=0;n("li").each(function(){expect(this.childNodes[0].parent).to.equal(this),e++}),expect(e).to.equal(3)}),it("should allow functions as arguments",function(){n(".apple").text(function(e,t){return expect(e).to.equal(0),expect(t).to.equal("Apple"),"whatever mate"}),expect(n(".apple")[0].childNodes[0].data).to.equal("whatever mate")}),it("should decode special chars",function(){var e=n("<p>M&amp;M</p>").text();expect(e).to.equal("M&M")}),it("should work with special chars added as strings",function(){var e=n("<p>M&M</p>").text();expect(e).to.equal("M&M")}),it("( undefined ) : should act as an accessor",function(){var e=n("<div>test</div>");expect(e.text(void 0)).to.be.a("string"),expect(e.text()).to.be("test")}),it('( "" ) : should convert to string',function(){var e=n("<div>test</div>");expect(e.text("").text()).to.equal("")}),it("( null ) : should convert to string",function(){expect(n("<div>").text(null).text()).to.equal("null")}),it("( 0 ) : should convert to string",function(){expect(n("<div>").text(0).text()).to.equal("0")}),it("(str) should encode then decode unsafe characters",function(){var e=n(".apple");e.text('blah <script>alert("XSS!")<\/script> blah'),expect(e[0].childNodes[0].data).to.equal('blah <script>alert("XSS!")<\/script> blah'),expect(e.text()).to.equal('blah <script>alert("XSS!")<\/script> blah'),e.text('blah <script>alert("XSS!")<\/script> blah'),expect(e.html()).to.not.contain('<script>alert("XSS!")<\/script>')})})});