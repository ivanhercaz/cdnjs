var expect=require("expect.js"),cheerio=require("../.."),food=require("../fixtures").food,fruits=require("../fixtures").fruits,drinks=require("../fixtures").drinks,text=require("../fixtures").text;describe("$(...)",function(){var i;beforeEach(function(){i=cheerio.load(fruits)}),describe(".find",function(){it("() : should find nothing",function(){expect(i("ul").find()).to.have.length(0)}),it("(single) : should find one descendant",function(){expect(i("#fruits").find(".apple")[0].attribs.class).to.equal("apple")}),it("(many) : should find all matching descendant",function(){expect(i("#fruits").find("li")).to.have.length(3)}),it("(many) : should merge all selected elems with matching descendants",function(){expect(i("#fruits, #food",food).find(".apple")).to.have.length(1)}),it("(invalid single) : should return empty if cant find",function(){expect(i("ul").find("blah")).to.have.length(0)}),it("(invalid single) : should query descendants only",function(){expect(i("#fruits").find("ul")).to.have.length(0)}),it("should return empty if search already empty result",function(){expect(i("#not-fruits").find("li")).to.have.length(0)}),it("should lowercase selectors",function(){expect(i("#fruits").find("LI")).to.have.length(3)}),it("should query case-sensitively when in xmlMode",function(){var e=cheerio.load("<caseSenSitive allTheWay>",{xmlMode:!0});expect(e("caseSenSitive")).to.have.length(1),expect(e("[allTheWay]")).to.have.length(1),expect(e("casesensitive")).to.have.length(0),expect(e("[alltheway]")).to.have.length(0)}),it("should throw a SyntaxError if given an invalid selector",function(){expect(function(){i("#fruits").find(":bah")}).to.throwException(function(e){expect(e).to.be.a(SyntaxError)})}),describe("(cheerio object) :",function(){it("returns only those nodes contained within the current selection",function(){var e=cheerio.load(food),t=e("#fruits").find(e("li"));expect(t).to.have.length(3),expect(t[0]).to.be(e(".apple")[0]),expect(t[1]).to.be(e(".orange")[0]),expect(t[2]).to.be(e(".pear")[0])}),it("returns only those nodes contained within any element in the current selection",function(){var e=cheerio.load(food),t=e(".apple, #vegetables").find(e("li"));expect(t).to.have.length(2),expect(t[0]).to.be(e(".carrot")[0]),expect(t[1]).to.be(e(".sweetcorn")[0])})}),describe("(node) :",function(){it("returns node when contained within the current selection",function(){var e=cheerio.load(food),t=e("#fruits").find(e(".apple")[0]);expect(t).to.have.length(1),expect(t[0]).to.be(e(".apple")[0])}),it("returns node when contained within any element the current selection",function(){var e=cheerio.load(food),t=e("#fruits, #vegetables").find(e(".carrot")[0]);expect(t).to.have.length(1),expect(t[0]).to.be(e(".carrot")[0])}),it("does not return node that is not contained within the current selection",function(){var e=cheerio.load(food),t=e("#fruits").find(e(".carrot")[0]);expect(t).to.have.length(0)})})}),describe(".children",function(){it("() : should get all children",function(){expect(i("ul").children()).to.have.length(3)}),it("() : should return children of all matched elements",function(){expect(i("ul ul",food).children()).to.have.length(5)}),it("(selector) : should return children matching selector",function(){var e=i("ul").children(".orange")[0].attribs.class;expect(e).to.equal("orange")}),it("(invalid selector) : should return empty",function(){expect(i("ul").children(".lulz")).to.have.length(0)}),it("should only match immediate children, not ancestors",function(){expect(i(food).children("li")).to.have.length(0)})}),describe(".contents",function(){beforeEach(function(){i=cheerio.load(text)}),it("() : should get all contents",function(){expect(i("p").contents()).to.have.length(5)}),it("() : should include text nodes",function(){expect(i("p").contents().first()[0].type).to.equal("text")}),it("() : should include comment nodes",function(){expect(i("p").contents().last()[0].type).to.equal("comment")})}),describe(".next",function(){it("() : should return next element",function(){var e=i(".orange").next()[0].attribs.class;expect(e).to.equal("pear")}),it("(no next) : should return empty for last child",function(){expect(i(".pear").next()).to.have.length(0)}),it("(next on empty object) : should return empty",function(){expect(i(".banana").next()).to.have.length(0)}),it("() : should operate over all elements in the selection",function(){expect(i(".apple, .orange",food).next()).to.have.length(2)}),describe("(selector) :",function(){it("should reject elements that violate the filter",function(){expect(i(".apple").next(".non-existent")).to.have.length(0)}),it("should accept elements that satisify the filter",function(){expect(i(".apple").next(".orange")).to.have.length(1)})})}),describe(".nextAll",function(){it("() : should return all following siblings",function(){var e=i(".apple").nextAll();expect(e).to.have.length(2),expect(e[0].attribs.class).to.equal("orange"),expect(e[1].attribs.class).to.equal("pear")}),it("(no next) : should return empty for last child",function(){expect(i(".pear").nextAll()).to.have.length(0)}),it("(nextAll on empty object) : should return empty",function(){expect(i(".banana").nextAll()).to.have.length(0)}),it("() : should operate over all elements in the selection",function(){expect(i(".apple, .carrot",food).nextAll()).to.have.length(3)}),it("() : should not contain duplicate elements",function(){var e=i(".apple, .orange",food);expect(e.nextAll()).to.have.length(2)}),describe("(selector) :",function(){it("should filter according to the provided selector",function(){expect(i(".apple").nextAll(".pear")).to.have.length(1)}),it("should not consider siblings' contents when filtering",function(){expect(i("#fruits",food).nextAll("li")).to.have.length(0)})})}),describe(".nextUntil",function(){it("() : should return all following siblings if no selector specified",function(){var e=i(".apple",food).nextUntil();expect(e).to.have.length(2),expect(e[0].attribs.class).to.equal("orange"),expect(e[1].attribs.class).to.equal("pear")}),it("() : should filter out non-element nodes",function(){var e=i("<div><div></div>\x3c!-- comment --\x3etext<div></div></div>").children().eq(0);expect(e.nextUntil()).to.have.length(1)}),it("() : should operate over all elements in the selection",function(){var e=i(".apple, .carrot",food);expect(e.nextUntil()).to.have.length(3)}),it("() : should not contain duplicate elements",function(){var e=i(".apple, .orange",food);expect(e.nextUntil()).to.have.length(2)}),it("(selector) : should return all following siblings until selector",function(){var e=i(".apple",food).nextUntil(".pear");expect(e).to.have.length(1),expect(e[0].attribs.class).to.equal("orange")}),it("(selector not sibling) : should return all following siblings",function(){var e=i(".apple").nextUntil("#vegetables");expect(e).to.have.length(2)}),it("(selector, filterString) : should return all following siblings until selector, filtered by filter",function(){var e=i(".beer",drinks).nextUntil(".water",".milk");expect(e).to.have.length(1),expect(e[0].attribs.class).to.equal("milk")}),it("(null, filterString) : should return all following siblings until selector, filtered by filter",function(){var e=i("<ul><li></li><li><p></p></li></ul>").find("li").eq(0).nextUntil(null,"p");expect(e).to.have.length(0)}),it("() : should return an empty object for last child",function(){expect(i(".pear").nextUntil()).to.have.length(0)}),it("() : should return an empty object when called on an empty object",function(){expect(i(".banana").nextUntil()).to.have.length(0)}),it("(node) : should return all following siblings until the node",function(){var e=i("#fruits").children(),t=e.eq(0).nextUntil(e[2]);expect(t).to.have.length(1)}),it("(cheerio object) : should return all following siblings until any member of the cheerio object",function(){var e=i(drinks).children(),t=i([e[4],e[3]]),n=e.eq(0).nextUntil(t);expect(n).to.have.length(2)})}),describe(".prev",function(){it("() : should return previous element",function(){var e=i(".orange").prev()[0].attribs.class;expect(e).to.equal("apple")}),it("(no prev) : should return empty for first child",function(){expect(i(".apple").prev()).to.have.length(0)}),it("(prev on empty object) : should return empty",function(){expect(i(".banana").prev()).to.have.length(0)}),it("() : should operate over all elements in the selection",function(){expect(i(".orange, .pear",food).prev()).to.have.length(2)}),describe("(selector) :",function(){it("should reject elements that violate the filter",function(){expect(i(".orange").prev(".non-existent")).to.have.length(0)}),it("should accept elements that satisify the filter",function(){expect(i(".orange").prev(".apple")).to.have.length(1)})})}),describe(".prevAll",function(){it("() : should return all preceding siblings",function(){var e=i(".pear").prevAll();expect(e).to.have.length(2),expect(e[0].attribs.class).to.equal("orange"),expect(e[1].attribs.class).to.equal("apple")}),it("(no prev) : should return empty for first child",function(){expect(i(".apple").prevAll()).to.have.length(0)}),it("(prevAll on empty object) : should return empty",function(){expect(i(".banana").prevAll()).to.have.length(0)}),it("() : should operate over all elements in the selection",function(){expect(i(".orange, .sweetcorn",food).prevAll()).to.have.length(2)}),it("() : should not contain duplicate elements",function(){var e=i(".orange, .pear",food);expect(e.prevAll()).to.have.length(2)}),describe("(selector) :",function(){it("should filter returned elements",function(){var e=i(".pear").prevAll(".apple");expect(e).to.have.length(1)}),it("should not consider siblings's descendents",function(){var e=i("#vegetables",food).prevAll("li");expect(e).to.have.length(0)})})}),describe(".prevUntil",function(){it("() : should return all preceding siblings if no selector specified",function(){var e=i(".pear").prevUntil();expect(e).to.have.length(2),expect(e[0].attribs.class).to.equal("orange"),expect(e[1].attribs.class).to.equal("apple")}),it("() : should filter out non-element nodes",function(){var e=i('<div class="1"><div class="2"></div>\x3c!-- comment --\x3etext<div class="3"></div></div>').children().last();expect(e.prevUntil()).to.have.length(1)}),it("() : should operate over all elements in the selection",function(){var e=i(".pear, .sweetcorn",food);expect(e.prevUntil()).to.have.length(3)}),it("() : should not contain duplicate elements",function(){var e=i(".orange, .pear",food);expect(e.prevUntil()).to.have.length(2)}),it("(selector) : should return all preceding siblings until selector",function(){var e=i(".pear").prevUntil(".apple");expect(e).to.have.length(1),expect(e[0].attribs.class).to.equal("orange")}),it("(selector not sibling) : should return all preceding siblings",function(){var e=i(".sweetcorn",food).prevUntil("#fruits");expect(e).to.have.length(1),expect(e[0].attribs.class).to.equal("carrot")}),it("(selector, filterString) : should return all preceding siblings until selector, filtered by filter",function(){var e=i(".cider",drinks).prevUntil(".juice",".water");expect(e).to.have.length(1),expect(e[0].attribs.class).to.equal("water")}),it("(selector, filterString) : should return all preceding siblings until selector",function(){var e=i("<ul><li><p></p></li><li></li></ul>").find("li").eq(1).prevUntil(null,"p");expect(e).to.have.length(0)}),it("() : should return an empty object for first child",function(){expect(i(".apple").prevUntil()).to.have.length(0)}),it("() : should return an empty object when called on an empty object",function(){expect(i(".banana").prevUntil()).to.have.length(0)}),it("(node) : should return all previous siblings until the node",function(){var e=i("#fruits").children(),t=e.eq(2).prevUntil(e[0]);expect(t).to.have.length(1)}),it("(cheerio object) : should return all previous siblings until any member of the cheerio object",function(){var e=i(drinks).children(),t=i([e[0],e[1]]),n=e.eq(4).prevUntil(t);expect(n).to.have.length(2)})}),describe(".siblings",function(){it("() : should get all the siblings",function(){expect(i(".orange").siblings()).to.have.length(2),expect(i("#fruits").siblings()).to.have.length(0),expect(i(".apple, .carrot",food).siblings()).to.have.length(3)}),it("(selector) : should get all siblings that match the selector",function(){expect(i(".orange").siblings(".apple")).to.have.length(1),expect(i(".orange").siblings(".peach")).to.have.length(0)}),it("(selector) : should throw a SyntaxError if given an invalid selector",function(){expect(function(){i(".orange").siblings(":bah")}).to.throwException(function(e){expect(e).to.be.a(SyntaxError)})}),it("(selector) : does not consider the contents of siblings when filtering (GH-374)",function(){expect(i("#fruits",food).siblings("li")).to.have.length(0)})}),describe(".parents",function(){beforeEach(function(){i=cheerio.load(food)}),it("() : should get all of the parents in logical order",function(){var e=i(".orange").parents();expect(e).to.have.length(2),expect(e[0].attribs.id).to.be("fruits"),expect(e[1].attribs.id).to.be("food"),e=i("#fruits").parents(),expect(e).to.have.length(1),expect(e[0].attribs.id).to.be("food")}),it("(selector) : should get all of the parents that match the selector in logical order",function(){var e=i(".orange").parents("#fruits");expect(e).to.have.length(1),expect(e[0].attribs.id).to.be("fruits"),e=i(".orange").parents("ul"),expect(e).to.have.length(2),expect(e[0].attribs.id).to.be("fruits"),expect(e[1].attribs.id).to.be("food")}),it("() : should not break if the selector does not have any results",function(){var e=i(".saladbar").parents();expect(e).to.have.length(0)}),it("() : should return an empty set for top-level elements",function(){var e=i("#food").parents();expect(e).to.have.length(0)}),it("() : should return the parents of every element in the *reveresed* collection, omitting duplicates",function(){var e=i("li").parents();expect(e).to.have.length(3),expect(e[0]).to.be(i("#vegetables")[0]),expect(e[1]).to.be(i("#food")[0]),expect(e[2]).to.be(i("#fruits")[0])})}),describe(".parentsUntil",function(){beforeEach(function(){i=cheerio.load(food)}),it("() : should get all of the parents in logical order",function(){var e=i(".orange").parentsUntil();expect(e).to.have.length(2),expect(e[0].attribs.id).to.be("fruits"),expect(e[1].attribs.id).to.be("food")}),it("() : should get all of the parents in reversed order, omitting duplicates",function(){var e=i(".apple, .sweetcorn").parentsUntil();expect(e).to.have.length(3),expect(e[0].attribs.id).to.be("vegetables"),expect(e[1].attribs.id).to.be("food"),expect(e[2].attribs.id).to.be("fruits")}),it("(selector) : should get all of the parents until selector",function(){var e=i(".orange").parentsUntil("#food");expect(e).to.have.length(1),expect(e[0].attribs.id).to.be("fruits"),e=i(".orange").parentsUntil("#fruits"),expect(e).to.have.length(0)}),it("(selector not parent) : should return all parents",function(){var e=i(".orange").parentsUntil(".apple");expect(e).to.have.length(2),expect(e[0].attribs.id).to.be("fruits"),expect(e[1].attribs.id).to.be("food")}),it("(selector, filter) : should get all of the parents that match the filter",function(){var e=i(".apple, .sweetcorn").parentsUntil(".saladbar","#vegetables");expect(e).to.have.length(1),expect(e[0].attribs.id).to.be("vegetables")}),it("() : should return empty object when called on an empty object",function(){var e=i(".saladbar").parentsUntil();expect(e).to.have.length(0)}),it("() : should return an empty set for top-level elements",function(){var e=i("#food").parentsUntil();expect(e).to.have.length(0)}),it("(cheerio object) : should return all parents until any member of the cheerio object",function(){var e=i("#fruits"),t=i("#food"),n=e.children().eq(1).parentsUntil(t);expect(n).to.have.length(1),expect(n[0].attribs.id).to.be("fruits")})}),describe(".parent",function(){it("() : should return the parent of each matched element",function(){var e=i(".orange").parent();expect(e).to.have.length(1),expect(e[0].attribs.id).to.be("fruits"),e=i("li",food).parent(),expect(e).to.have.length(2),expect(e[0].attribs.id).to.be("fruits"),expect(e[1].attribs.id).to.be("vegetables")}),it("() : should return an empty object for top-level elements",function(){var e=i("ul").parent();expect(e).to.have.length(0)}),it("() : should not contain duplicate elements",function(){var e=i("li").parent();expect(e).to.have.length(1)}),it("(selector) : should filter the matched parent elements by the selector",function(){var e=i(".orange").parent();expect(e).to.have.length(1),expect(e[0].attribs.id).to.be("fruits"),e=i("li",food).parent("#fruits"),expect(e).to.have.length(1),expect(e[0].attribs.id).to.be("fruits")})}),describe(".closest",function(){it("() : should return an empty array",function(){var e=i(".orange").closest();expect(e).to.have.length(0),expect(e).to.be.a(cheerio)}),it("(selector) : should find the closest element that matches the selector, searching through its ancestors and itself",function(){expect(i(".orange").closest(".apple")).to.have.length(0);var e=i(".orange",food).closest("#food");expect(e[0].attribs.id).to.be("food"),e=i(".orange",food).closest("ul"),expect(e[0].attribs.id).to.be("fruits"),e=i(".orange",food).closest("li"),expect(e[0].attribs.class).to.be("orange")}),it("(selector) : should find the closest element of each item, removing duplicates",function(){var e=i("li",food).closest("ul");expect(e).to.have.length(2)}),it("() : should not break if the selector does not have any results",function(){var e=i(".saladbar",food).closest("ul");expect(e).to.have.length(0)})}),describe(".each",function(){it("( (i, elem) -> ) : should loop selected returning fn with (i, elem)",function(){var n=[],o=["apple","orange","pear"];i("li").each(function(e,t){n[e]=t,expect(this.attribs.class).to.equal(o[e])}),expect(n[0].attribs.class).to.equal("apple"),expect(n[1].attribs.class).to.equal("orange"),expect(n[2].attribs.class).to.equal("pear")}),it("( (i, elem) -> ) : should break iteration when the iterator function returns false",function(){var t=0;i("li").each(function(e){return t++,e<1}),expect(t).to.equal(2)})}),describe(".map",function(){it("(fn) : should be invoked with the correct arguments and context",function(){var e=i("li"),t=[],n=[];e.map(function(){t.push(Array.prototype.slice.call(arguments)),n.push(this)}),expect(t).to.eql([[0,e[0]],[1,e[1]],[2,e[2]]]),expect(n).to.eql([e[0],e[1],e[2]])}),it("(fn) : should return an Cheerio object wrapping the returned items",function(){var t=i("li"),e=t.map(function(e){return t[2-e]});expect(e).to.have.length(3),expect(e[0]).to.be(t[2]),expect(e[1]).to.be(t[1]),expect(e[2]).to.be(t[0])}),it("(fn) : should ignore `null` and `undefined` returned by iterator",function(){var e=i("li"),t=[null,void 0,e[1]],n=e.map(function(e){return t[e]});expect(n).to.have.length(1),expect(n[0]).to.be(e[1])}),it("(fn) : should preform a shallow merge on arrays returned by iterator",function(){var e=i("li").map(function(){return[1,[3,4]]});expect(e.get()).to.eql([1,[3,4],1,[3,4],1,[3,4]])}),it("(fn) : should tolerate `null` and `undefined` when flattening arrays returned by iterator",function(){var e=i("li").map(function(){return[null,void 0]});expect(e.get()).to.eql([null,void 0,null,void 0,null,void 0])})}),describe(".filter",function(){it("(selector) : should reduce the set of matched elements to those that match the selector",function(){var e=i("li").filter(".pear").text();expect(e).to.be("Pear")}),it("(selector) : should not consider nested elements",function(){var e=i("#fruits").filter("li");expect(e).to.have.length(0)}),it("(selection) : should reduce the set of matched elements to those that are contained in the provided selection",function(){var e=i("li"),t=e.filter(".pear, .apple");expect(e.filter(t)).to.have.length(2)}),it("(element) : should reduce the set of matched elements to those that specified directly",function(){var e=i("li"),t=e.filter(".pear")[0];expect(e.filter(t)).to.have.length(1)}),it("(fn) : should reduce the set of matched elements to those that pass the function's test",function(){var e=i("li").filter(function(e,t){return expect(this).to.be(t),expect(t.tagName).to.be("li"),expect(e).to.be.a("number"),"orange"===i(this).attr("class")}).text();expect(e).to.be("Orange")})}),describe(".not",function(){it("(selector) : should reduce the set of matched elements to those that do not match the selector",function(){var e=i("li"),t=e.not(".pear");expect(t).to.have.length(2),expect(t[0]).to.be(e[0]),expect(t[1]).to.be(e[1])}),it("(selector) : should not consider nested elements",function(){var e=i("#fruits").not("li");expect(e).to.have.length(1)}),it("(selection) : should reduce the set of matched elements to those that are mot contained in the provided selection",function(){var e=i("li"),t=i(".orange"),n=e.not(t);expect(n).to.have.length(2),expect(n[0]).to.be(e[0]),expect(n[1]).to.be(e[2])}),it("(element) : should reduce the set of matched elements to those that specified directly",function(){var e=i("li"),t=i(".apple")[0],n=e.not(t);expect(n).to.have.length(2),expect(n[0]).to.be(e[1]),expect(n[1]).to.be(e[2])}),it("(fn) : should reduce the set of matched elements to those that do not pass the function's test",function(){var e=i("li"),t=e.not(function(e,t){return expect(this).to.be(t),expect(t.name).to.be("li"),expect(e).to.be.a("number"),"orange"===i(this).attr("class")});expect(t).to.have.length(2),expect(t[0]).to.be(e[0]),expect(t[1]).to.be(e[2])})}),describe(".has",function(){beforeEach(function(){i=cheerio.load(food)}),it("(selector) : should reduce the set of matched elements to those with descendants that match the selector",function(){var e=i("#fruits,#vegetables").has(".pear");expect(e).to.have.length(1),expect(e[0]).to.be(i("#fruits")[0])}),it("(selector) : should only consider nested elements",function(){var e=i("#fruits").has("#fruits");expect(e).to.have.length(0)}),it("(element) : should reduce the set of matched elements to those that are ancestors of the provided element",function(){var e=i("#fruits,#vegetables").has(i(".pear")[0]);expect(e).to.have.length(1),expect(e[0]).to.be(i("#fruits")[0])}),it("(element) : should only consider nested elements",function(){var e=i("#fruits"),t=e[0],n=e.has(t);expect(n).to.have.length(0)})}),describe(".first",function(){it("() : should return the first item",function(){var e=i("<span>foo</span><span>bar</span><span>baz</span>").first();expect(e.length).to.equal(1),expect(e[0].childNodes[0].data).to.equal("foo")}),it("() : should return an empty object for an empty object",function(){var e=i().first();expect(e.length).to.equal(0),expect(e[0]).to.be(void 0)})}),describe(".last",function(){it("() : should return the last element",function(){var e=i("<span>foo</span><span>bar</span><span>baz</span>").last();expect(e.length).to.equal(1),expect(e[0].childNodes[0].data).to.equal("baz")}),it("() : should return an empty object for an empty object",function(){var e=i().last();expect(e.length).to.equal(0),expect(e[0]).to.be(void 0)})}),describe(".first & .last",function(){it("() : should return equivalent collections if only one element",function(){var e=i("<span>bar</span>"),t=e.first(),n=e.last();expect(t.length).to.equal(1),expect(t[0].childNodes[0].data).to.equal("bar"),expect(n.length).to.equal(1),expect(n[0].childNodes[0].data).to.equal("bar"),expect(t[0]).to.equal(n[0])})}),describe(".eq",function(){function e(e){return e.length?e[0].childNodes[0].data:""}it("(i) : should return the element at the specified index",function(){expect(e(i("li").eq(0))).to.equal("Apple"),expect(e(i("li").eq(1))).to.equal("Orange"),expect(e(i("li").eq(2))).to.equal("Pear"),expect(e(i("li").eq(3))).to.equal(""),expect(e(i("li").eq(-1))).to.equal("Pear")})}),describe(".get",function(){it("(i) : should return the element at the specified index",function(){var e=i("#fruits").children();expect(e.get(0)).to.be(e[0]),expect(e.get(1)).to.be(e[1]),expect(e.get(2)).to.be(e[2])}),it("(-1) : should return the element indexed from the end of the collection",function(){var e=i("#fruits").children();expect(e.get(-1)).to.be(e[2]),expect(e.get(-2)).to.be(e[1]),expect(e.get(-3)).to.be(e[0])}),it("() : should return an array containing all of the collection",function(){var e=i("#fruits").children(),t=e.get();expect(Array.isArray(t)).to.be.ok(),expect(t).to.eql([e[0],e[1],e[2]])})}),describe(".index",function(){describe("() : ",function(){it("returns the index of a child amongst its siblings",function(){expect(i(".orange").index()).to.be(1)}),it("returns -1 when the selection has no parent",function(){expect(i("<div/>").index()).to.be(-1)})}),describe("(selector) : ",function(){it("returns the index of the first element in the set matched by `selector`",function(){expect(i(".apple").index("#fruits, li")).to.be(1)}),it("returns -1 when the item is not present in the set matched by `selector`",function(){expect(i(".apple").index("#fuits")).to.be(-1)}),it("returns -1 when the first element in the set has no parent",function(){expect(i("<div/>").index("*")).to.be(-1)})}),describe("(node) : ",function(){it("returns the index of the given node within the current selection",function(){var e=i("li");expect(e.index(e.get(1))).to.be(1)}),it("returns the index of the given node within the current selection when the current selection has no parent",function(){var e=i(".apple").remove();expect(e.index(e.get(0))).to.be(0)}),it("returns -1 when the given node is not present in the current selection",function(){expect(i("li").index(i("#fruits").get(0))).to.be(-1)}),it("returns -1 when the current selection is empty",function(){expect(i(".not-fruit").index(i("#fruits").get(0))).to.be(-1)})}),describe("(selection) : ",function(){it("returns the index of the first node in the provided selection within the current selection",function(){var e=i("li");expect(e.index(i(".orange, .pear"))).to.be(1)}),it("returns -1 when the given node is not present in the current selection",function(){expect(i("li").index(i("#fruits"))).to.be(-1)}),it("returns -1 when the current selection is empty",function(){expect(i(".not-fruit").index(i("#fruits"))).to.be(-1)})})}),describe(".slice",function(){function t(e){return e.length?e[0].childNodes[0].data:""}it("(start) : should return all elements after the given index",function(){var e=i("li").slice(1);expect(e).to.have.length(2),expect(t(e.eq(0))).to.equal("Orange"),expect(t(e.eq(1))).to.equal("Pear")}),it("(start, end) : should return all elements matching the given range",function(){var e=i("li").slice(1,2);expect(e).to.have.length(1),expect(t(e.eq(0))).to.equal("Orange")}),it("(-start) : should return element matching the offset from the end",function(){var e=i("li").slice(-1);expect(e).to.have.length(1),expect(t(e.eq(0))).to.equal("Pear")})}),describe(".end() :",function(){var e;beforeEach(function(){e=i("#fruits").children()}),it("returns an empty object at the end of the chain",function(){expect(e.end().end().end()).to.be.ok(),expect(e.end().end().end()).to.have.length(0)}),it("find",function(){expect(e.find(".apple").end()).to.be(e)}),it("filter",function(){expect(e.filter(".apple").end()).to.be(e)}),it("map",function(){expect(e.map(function(){return this}).end()).to.be(e)}),it("contents",function(){expect(e.contents().end()).to.be(e)}),it("eq",function(){expect(e.eq(1).end()).to.be(e)}),it("first",function(){expect(e.first().end()).to.be(e)}),it("last",function(){expect(e.last().end()).to.be(e)}),it("slice",function(){expect(e.slice(1).end()).to.be(e)}),it("children",function(){expect(e.children().end()).to.be(e)}),it("parent",function(){expect(e.parent().end()).to.be(e)}),it("parents",function(){expect(e.parents().end()).to.be(e)}),it("closest",function(){expect(e.closest("ul").end()).to.be(e)}),it("siblings",function(){expect(e.siblings().end()).to.be(e)}),it("next",function(){expect(e.next().end()).to.be(e)}),it("nextAll",function(){expect(e.nextAll().end()).to.be(e)}),it("prev",function(){expect(e.prev().end()).to.be(e)}),it("prevAll",function(){expect(e.prevAll().end()).to.be(e)}),it("clone",function(){expect(e.clone().end()).to.be(e)})}),describe(".add",function(){var t=cheerio.load(food),n=t("#fruits"),o=t(".apple"),i=t(".orange"),c=t(".pear"),l=t(".carrot"),r=t(".sweetcorn");describe("(selector",function(){describe(") :",function(){describe("matched element",function(){it("occurs before current selection",function(){var e=i.add(".apple");expect(e).to.have.length(2),expect(e[0]).to.be(o[0]),expect(e[1]).to.be(i[0])}),it("is identical to the current selection",function(){var e=i.add(".orange");expect(e).to.have.length(1),expect(e[0]).to.be(i[0])}),it("occurs after current selection",function(){var e=i.add(".pear");expect(e).to.have.length(2),expect(e[0]).to.be(i[0]),expect(e[1]).to.be(c[0])}),it("contains the current selection",function(){var e=i.add("#fruits");expect(e).to.have.length(2),expect(e[0]).to.be(n[0]),expect(e[1]).to.be(i[0])}),it("is a child of the current selection",function(){var e=n.add(".orange");expect(e).to.have.length(2),expect(e[0]).to.be(n[0]),expect(e[1]).to.be(i[0])})}),describe("matched elements",function(){it("occur before the current selection",function(){var e=c.add(".apple, .orange");expect(e).to.have.length(3),expect(e[0]).to.be(o[0]),expect(e[1]).to.be(i[0]),expect(e[2]).to.be(c[0])}),it("include the current selection",function(){var e=c.add("#fruits li");expect(e).to.have.length(3),expect(e[0]).to.be(o[0]),expect(e[1]).to.be(i[0]),expect(e[2]).to.be(c[0])}),it("occur after the current selection",function(){var e=o.add(".orange, .pear");expect(e).to.have.length(3),expect(e[0]).to.be(o[0]),expect(e[1]).to.be(i[0]),expect(e[2]).to.be(c[0])}),it("occur within the current selection",function(){var e=n.add("#fruits li");expect(e).to.have.length(4),expect(e[0]).to.be(n[0]),expect(e[1]).to.be(o[0]),expect(e[2]).to.be(i[0]),expect(e[3]).to.be(c[0])})})}),it(", context)",function(){var e=n.add("li","#vegetables");expect(e).to.have.length(3),expect(e[0]).to.be(n[0]),expect(e[1]).to.be(l[0]),expect(e[2]).to.be(r[0])})}),describe("(element) :",function(){describe("honors document order when element occurs",function(){it("before the current selection",function(){var e=i.add(o[0]);expect(e).to.have.length(2),expect(e[0]).to.be(o[0]),expect(e[1]).to.be(i[0])}),it("after the current selection",function(){var e=i.add(c[0]);expect(e).to.have.length(2),expect(e[0]).to.be(i[0]),expect(e[1]).to.be(c[0])}),it("within the current selection",function(){var e=n.add(i[0]);expect(e).to.have.length(2),expect(e[0]).to.be(n[0]),expect(e[1]).to.be(i[0])}),it("as an ancestor of the current selection",function(){var e=i.add(n[0]);expect(e).to.have.length(2),expect(e[0]).to.be(n[0]),expect(e[1]).to.be(i[0])})}),it("does not insert an element already contained within the current selection",function(){var e=o.add(o[0]);expect(e).to.have.length(1),expect(e[0]).to.be(o[0])})}),describe("([elements]) : elements",function(){it("occur before the current selection",function(){var e=c.add(t(".apple, .orange").get());expect(e).to.have.length(3),expect(e[0]).to.be(o[0]),expect(e[1]).to.be(i[0]),expect(e[2]).to.be(c[0])}),it("include the current selection",function(){var e=c.add(t("#fruits li").get());expect(e).to.have.length(3),expect(e[0]).to.be(o[0]),expect(e[1]).to.be(i[0]),expect(e[2]).to.be(c[0])}),it("occur after the current selection",function(){var e=o.add(t(".orange, .pear").get());expect(e).to.have.length(3),expect(e[0]).to.be(o[0]),expect(e[1]).to.be(i[0]),expect(e[2]).to.be(c[0])}),it("occur within the current selection",function(){var e=n.add(t("#fruits li").get());expect(e).to.have.length(4),expect(e[0]).to.be(n[0]),expect(e[1]).to.be(o[0]),expect(e[2]).to.be(i[0]),expect(e[3]).to.be(c[0])})}),it("(html) : correctly parses and adds the new elements",function(){var e=o.add('<li class="banana">banana</li>');expect(e).to.have.length(2),expect(e.is(".apple")).to.be(!0),expect(e.is(".banana")).to.be(!0)}),describe("(selection) :",function(){describe("element in selection",function(){it("occurs before current selection",function(){var e=i.add(t(".apple"));expect(e).to.have.length(2),expect(e[0]).to.be(o[0]),expect(e[1]).to.be(i[0])}),it("is identical to the current selection",function(){var e=i.add(t(".orange"));expect(e).to.have.length(1),expect(e[0]).to.be(i[0])}),it("occurs after current selection",function(){var e=i.add(t(".pear"));expect(e).to.have.length(2),expect(e[0]).to.be(i[0]),expect(e[1]).to.be(c[0])}),it("contains the current selection",function(){var e=i.add(t("#fruits"));expect(e).to.have.length(2),expect(e[0]).to.be(n[0]),expect(e[1]).to.be(i[0])}),it("is a child of the current selection",function(){var e=n.add(t(".orange"));expect(e).to.have.length(2),expect(e[0]).to.be(n[0]),expect(e[1]).to.be(i[0])})}),describe("elements in the selection",function(){it("occur before the current selection",function(){var e=c.add(t(".apple, .orange"));expect(e).to.have.length(3),expect(e[0]).to.be(o[0]),expect(e[1]).to.be(i[0]),expect(e[2]).to.be(c[0])}),it("include the current selection",function(){var e=c.add(t("#fruits li"));expect(e).to.have.length(3),expect(e[0]).to.be(o[0]),expect(e[1]).to.be(i[0]),expect(e[2]).to.be(c[0])}),it("occur after the current selection",function(){var e=o.add(t(".orange, .pear"));expect(e).to.have.length(3),expect(e[0]).to.be(o[0]),expect(e[1]).to.be(i[0]),expect(e[2]).to.be(c[0])}),it("occur within the current selection",function(){var e=n.add(t("#fruits li"));expect(e).to.have.length(4),expect(e[0]).to.be(n[0]),expect(e[1]).to.be(o[0]),expect(e[2]).to.be(i[0]),expect(e[3]).to.be(c[0])})})})}),describe(".addBack",function(){describe("() : ",function(){it("includes siblings and self",function(){var e=i(".orange").siblings().addBack();expect(e).to.have.length(3),expect(e[0]).to.be(i(".apple")[0]),expect(e[1]).to.be(i(".orange")[0]),expect(e[2]).to.be(i(".pear")[0])}),it("includes children and self",function(){var e=i("#fruits").children().addBack();expect(e).to.have.length(4),expect(e[0]).to.be(i("#fruits")[0]),expect(e[1]).to.be(i(".apple")[0]),expect(e[2]).to.be(i(".orange")[0]),expect(e[3]).to.be(i(".pear")[0])}),it("includes parent and self",function(){var e=i(".apple").parent().addBack();expect(e).to.have.length(2),expect(e[0]).to.be(i("#fruits")[0]),expect(e[1]).to.be(i(".apple")[0])}),it("includes parents and self",function(){var e=cheerio.load(food),t=e(".apple").parents().addBack();expect(t).to.have.length(3),expect(t[0]).to.be(e("#food")[0]),expect(t[1]).to.be(e("#fruits")[0]),expect(t[2]).to.be(e(".apple")[0])})}),it("(filter) : filters the previous selection",function(){var e=i("li").eq(1).addBack(".apple");expect(e).to.have.length(2),expect(e[0]).to.be(i(".apple")[0]),expect(e[1]).to.be(i(".orange")[0])})})});