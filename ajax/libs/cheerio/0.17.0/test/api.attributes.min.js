var expect=require("expect.js"),cheerio=require(".."),fruits=require("./fixtures").fruits,vegetables=require("./fixtures").vegetables,food=require("./fixtures").food,chocolates=require("./fixtures").chocolates,inputs=require("./fixtures").inputs,toArray=Function.call.bind(Array.prototype.slice);describe("$(...)",function(){var l;beforeEach(function(){l=cheerio.load(fruits)}),describe(".attr",function(){it("() : should get all the attributes",function(){var e=l("ul").attr();expect(e.id).to.equal("fruits")}),it("(invalid key) : invalid attr should get undefined",function(){var e=l(".apple").attr("lol");expect(e).to.be(void 0)}),it("(valid key) : valid attr should get value",function(){var e=l(".apple").attr("class");expect(e).to.equal("apple")}),it("(key, value) : should set attr",function(){var e=l(".pear").attr("id","pear");expect(l("#pear")).to.have.length(1),expect(e.cheerio).to.not.be(void 0)}),it("(key, value) : should set attr",function(){var e=cheerio("<div></div> <div></div>").attr("class","pear");expect(e[0].attribs.class).to.equal("pear"),expect(e[1].attribs).to.equal(void 0),expect(e[2].attribs.class).to.equal("pear")}),it("(key, value) : should return an empty object for an empty object",function(){var e=l().attr("key","value");expect(e.length).to.equal(0),expect(e[0]).to.be(void 0)}),it("(map) : object map should set multiple attributes",function(){l(".apple").attr({id:"apple",style:"color:red;","data-url":"http://apple.com"});var e=l(".apple").attr();expect(e.id).to.equal("apple"),expect(e.style).to.equal("color:red;"),expect(e["data-url"]).to.equal("http://apple.com")}),it("(key, function) : should call the function and update the attribute with the return value",function(){var e=l("#fruits");e.attr("id",function(e,t){return expect(e).to.equal(0),expect(t).to.equal("fruits"),"ninja"});var t=e.attr();expect(t.id).to.equal("ninja")}),it("(key, value) : should correctly encode then decode unsafe values",function(){var e=l(".apple");e.attr("href",'http://github.com/"><script>alert("XSS!")<\/script><br'),expect(e.attr("href")).to.equal('http://github.com/"><script>alert("XSS!")<\/script><br'),e.attr("href",'http://github.com/"><script>alert("XSS!")<\/script><br'),expect(e.html()).to.not.contain('<script>alert("XSS!")<\/script>')}),it("(key, value) : should coerce values to a string",function(){var e=l(".apple");e.attr("data-test",1),expect(e[0].attribs["data-test"]).to.equal("1"),expect(e.attr("data-test")).to.equal("1")}),it("(key, value) : handle removed boolean attributes",function(){var e=l(".apple");e.attr("autofocus","autofocus"),expect(e.attr("autofocus")).to.equal("autofocus"),e.removeAttr("autofocus"),expect(e.attr("autofocus")).to.equal(!1)}),it("(key, value) : should remove non-boolean attributes with names or values similar to boolean ones",function(){var e=l(".apple");e.attr("data-autofocus","autofocus"),expect(e.attr("data-autofocus")).to.equal("autofocus"),e.removeAttr("data-autofocus"),expect(e.attr("data-autofocus")).to.be(void 0)})}),describe(".data",function(){beforeEach(function(){l=cheerio.load(chocolates)}),it("() : should get all data attributes initially declared in the markup",function(){var e=l(".linth").data();expect(e).to.eql({highlight:"Lindor",origin:"swiss"})}),it("() : should get all data set via `data`",function(){var e=cheerio("<div>");e.data("a",1),e.data("b",2),expect(e.data()).to.eql({a:1,b:2})}),it("() : should get all data attributes initially declared in the markup merged with all data additionally set via `data`",function(){var e=cheerio('<div data-a="a">');e.data("b","b"),expect(e.data()).to.eql({a:"a",b:"b"})}),it("() : no data attribute should return an empty object",function(){var e=l(".cailler").data();expect(e).to.be.empty()}),it("(invalid key) : invalid data attribute should return `undefined` ",function(){var e=l(".frey").data("lol");expect(e).to.be(void 0)}),it("(valid key) : valid data attribute should get value",function(){var e=l(".linth").data("highlight"),t=l(".linth").data("origin");expect(e).to.equal("Lindor"),expect(t).to.equal("swiss")}),it("(key) : should translate camel-cased key values to hyphen-separated versions",function(){var e=cheerio('<div data--three-word-attribute="a" data-foo-Bar_BAZ-="b">');expect(e.data("ThreeWordAttribute")).to.be("a"),expect(e.data("fooBar_baz-")).to.be("b")}),it("(key) : should retrieve object values",function(){var e={},t=cheerio("<div>");t.data("test",e),expect(t.data("test")).to.be(e)}),it("(key) : should parse JSON data derived from the markup",function(){var e=cheerio('<div data-json="[1, 2, 3]">');expect(e.data("json")).to.eql([1,2,3])}),it("(key) : should not parse JSON data set via the `data` API",function(){var e=cheerio("<div>");e.data("json","[1, 2, 3]"),expect(e.data("json")).to.be("[1, 2, 3]")}),it("(key) : should ignore the markup value after the first access",function(){var e=cheerio('<div data-test="a">');expect(e.data("test")).to.be("a"),e.attr("data-test","b"),expect(e.data("test")).to.be("a")}),it("(hyphen key) : data addribute with hyphen should be camelized ;-)",function(){var e=l(".frey").data();expect(e).to.eql({taste:"sweet",bestCollection:"Mahony"})}),it("(key, value) : should set data attribute",function(){var e=l(".frey").data({balls:"giandor"}),t=l(".linth").data("snack","chocoletti");expect(e.data("balls")).to.eql("giandor"),expect(t.data("snack")).to.eql("chocoletti")}),it("(map) : object map should set multiple data attributes",function(){var e=l(".linth").data({id:"Cailler",flop:"Pippilotti Rist",top:"Frigor",url:"http://www.cailler.ch/"})[0].data;expect(e.id).to.equal("Cailler"),expect(e.flop).to.equal("Pippilotti Rist"),expect(e.top).to.equal("Frigor"),expect(e.url).to.equal("http://www.cailler.ch/")}),describe("(attr) : data-* attribute type coercion :",function(){it("boolean",function(){var e=cheerio('<div data-bool="true">');expect(e.data("bool")).to.be(!0)}),it("number",function(){var e=cheerio('<div data-number="23">');expect(e.data("number")).to.be(23)}),it("number (scientific notation is not coerced)",function(){var e=cheerio('<div data-sci="1E10">');expect(e.data("sci")).to.be("1E10")}),it("null",function(){var e=cheerio('<div data-null="null">');expect(e.data("null")).to.be(null)}),it("object",function(){var e=cheerio("<div data-obj='{ \"a\": 45 }'>");expect(e.data("obj")).to.eql({a:45})}),it("array",function(){var e=cheerio('<div data-array="[1, 2, 3]">');expect(e.data("array")).to.eql([1,2,3])})})}),describe(".val",function(){beforeEach(function(){l=cheerio.load(inputs)}),it(".val(): on select should get value",function(){var e=l("select#one").val();expect(e).to.equal("option_selected")}),it(".val(): on option should get value",function(){var e=l("select#one option").eq(0).val();expect(e).to.equal("option_not_selected")}),it(".val(): on text input should get value",function(){var e=l('input[type="text"]').val();expect(e).to.equal("input_text")}),it(".val(): on checked checkbox should get value",function(){var e=l('input[name="checkbox_on"]').val();expect(e).to.equal("on")}),it(".val(): on unchecked checkbox should get value",function(){var e=l('input[name="checkbox_off"]').val();expect(e).to.equal("off")}),it(".val(): on radio should get value",function(){var e=l('input[type="radio"]').val();expect(e).to.equal("on")}),it(".val(): on multiple select should get an array of values",function(){var e=l("select#multi").val();expect(e).to.have.length(2)}),it(".val(value): on input text should set value",function(){var e=l('input[type="text"]').val("test");expect(e.val()).to.equal("test")}),it(".val(value): on select should set value",function(){var e=l("select#one").val("option_not_selected");expect(e.val()).to.equal("option_not_selected")}),it(".val(value): on option should set value",function(){var e=l("select#one option").eq(0).val("option_changed");expect(e.val()).to.equal("option_changed")}),it(".val(value): on radio should set value",function(){var e=l('input[name="radio"]').val("off");expect(e.val()).to.equal("off")}),it(".val(values): on multiple select should set multiple values",function(){var e=l("select#multi").val(["1","3","4"]);expect(e.val()).to.have.length(3)})}),describe(".removeAttr",function(){it("(key) : should remove a single attr",function(){var e=l("#fruits");expect(e.attr("id")).to.not.be(void 0),e.removeAttr("id"),expect(e.attr("id")).to.be(void 0)}),it("should return cheerio object",function(){var e=l("ul").removeAttr("id").cheerio;expect(e).to.be.ok()})}),describe(".hasClass",function(){function t(e){return cheerio('<div class="'+e+'"></div>')}it("(valid class) : should return true",function(){var e=l(".apple").hasClass("apple");expect(e).to.be.ok(),expect(t("foo").hasClass("foo")).to.be.ok(),expect(t("foo bar").hasClass("foo")).to.be.ok(),expect(t("bar foo").hasClass("foo")).to.be.ok(),expect(t("bar foo bar").hasClass("foo")).to.be.ok()}),it("(invalid class) : should return false",function(){var e=l("#fruits").hasClass("fruits");expect(e).to.not.be.ok(),expect(t("foo-bar").hasClass("foo")).to.not.be.ok(),expect(t("foo-bar").hasClass("foo")).to.not.be.ok(),expect(t("foo-bar").hasClass("foo-ba")).to.not.be.ok()}),it("should check multiple classes",function(){l(".apple").addClass("red"),expect(l(".apple").hasClass("apple")).to.be.ok(),expect(l(".apple").hasClass("red")).to.be.ok(),l(".apple").removeClass("apple"),expect(l("li").eq(0).hasClass("apple")).to.not.be.ok()})}),describe(".addClass",function(){it("(first class) : should add the class to the element",function(){var e=l("#fruits");e.addClass("fruits");var t=e.hasClass("fruits");expect(t).to.be.ok()}),it("(single class) : should add the class to the element",function(){l(".apple").addClass("fruit");var e=l(".apple").hasClass("fruit");expect(e).to.be.ok()}),it("(class): adds classes to many selected items",function(){l("li").addClass("fruit"),expect(l(".apple").hasClass("fruit")).to.be.ok(),expect(l(".orange").hasClass("fruit")).to.be.ok(),expect(l(".pear").hasClass("fruit")).to.be.ok()}),it("(class class class) : should add multiple classes to the element",function(){l(".apple").addClass("fruit red tasty"),expect(l(".apple").hasClass("apple")).to.be.ok(),expect(l(".apple").hasClass("fruit")).to.be.ok(),expect(l(".apple").hasClass("red")).to.be.ok(),expect(l(".apple").hasClass("tasty")).to.be.ok()}),it("(fn) : should add classes returned from the function",function(){var e=l("#fruits").children(),a=[],o=[],s=["apple red","",void 0];e.addClass(function(e,t){return a.push(toArray(arguments)),o.push(this),s[e]}),expect(a).to.eql([[0,"apple"],[1,"orange"],[2,"pear"]]),expect(o).to.eql([e[0],e[1],e[2]]),expect(e.eq(0).hasClass("apple")).to.be.ok(),expect(e.eq(0).hasClass("red")).to.be.ok(),expect(e.eq(1).hasClass("orange")).to.be.ok(),expect(e.eq(2).hasClass("pear")).to.be.ok()})}),describe(".removeClass",function(){it("() : should remove all the classes",function(){l(".pear").addClass("fruit"),l(".pear").removeClass(),expect(l(".pear").attr("class")).to.be(void 0)}),it('("") : should not modify class list',function(){l("#fruits").children().removeClass(""),expect(l(".apple")).to.have.length(1)}),it("(invalid class) : should not remove anything",function(){l(".pear").removeClass("fruit"),expect(l(".pear").hasClass("pear")).to.be.ok()}),it("(no class attribute) : should not throw an exception",function(){var e=cheerio(vegetables);expect(function(){l("li",e).removeClass("vegetable")}).to.not.throwException()}),it("(single class) : should remove a single class from the element",function(){l(".pear").addClass("fruit"),expect(l(".pear").hasClass("fruit")).to.be.ok(),l(".pear").removeClass("fruit"),expect(l(".pear").hasClass("fruit")).to.not.be.ok(),expect(l(".pear").hasClass("pear")).to.be.ok()}),it("(single class) : should remove a single class from multiple classes on the element",function(){l(".pear").addClass("fruit green tasty"),expect(l(".pear").hasClass("fruit")).to.be.ok(),expect(l(".pear").hasClass("green")).to.be.ok(),expect(l(".pear").hasClass("tasty")).to.be.ok(),l(".pear").removeClass("green"),expect(l(".pear").hasClass("fruit")).to.be.ok(),expect(l(".pear").hasClass("green")).to.not.be.ok(),expect(l(".pear").hasClass("tasty")).to.be.ok()}),it("(class class class) : should remove multiple classes from the element",function(){l(".apple").addClass("fruit red tasty"),expect(l(".apple").hasClass("apple")).to.be.ok(),expect(l(".apple").hasClass("fruit")).to.be.ok(),expect(l(".apple").hasClass("red")).to.be.ok(),expect(l(".apple").hasClass("tasty")).to.be.ok(),l(".apple").removeClass("apple red tasty"),expect(l(".fruit").hasClass("apple")).to.not.be.ok(),expect(l(".fruit").hasClass("red")).to.not.be.ok(),expect(l(".fruit").hasClass("tasty")).to.not.be.ok(),expect(l(".fruit").hasClass("fruit")).to.be.ok()}),it("(class) : should remove all occurrences of a class name",function(){var e=cheerio('<div class="x x y x z"></div>');expect(e.removeClass("x").hasClass("x")).to.be(!1)}),it("(fn) : should remove classes returned from the function",function(){var e=l("#fruits").children(),a=[],o=[],s=["apple red","",void 0];e.removeClass(function(e,t){return a.push(toArray(arguments)),o.push(this),s[e]}),expect(a).to.eql([[0,"apple"],[1,"orange"],[2,"pear"]]),expect(o).to.eql([e[0],e[1],e[2]]),expect(e.eq(0).hasClass("apple")).to.not.be.ok(),expect(e.eq(0).hasClass("red")).to.not.be.ok(),expect(e.eq(1).hasClass("orange")).to.be.ok(),expect(e.eq(2).hasClass("pear")).to.be.ok()})}),describe(".toggleClass",function(){it("(class class) : should toggle multiple classes from the element",function(){l(".apple").addClass("fruit"),expect(l(".apple").hasClass("apple")).to.be.ok(),expect(l(".apple").hasClass("fruit")).to.be.ok(),expect(l(".apple").hasClass("red")).to.not.be.ok(),l(".apple").toggleClass("apple red"),expect(l(".fruit").hasClass("apple")).to.not.be.ok(),expect(l(".fruit").hasClass("red")).to.be.ok(),expect(l(".fruit").hasClass("fruit")).to.be.ok()}),it("(class class, true) : should add multiple classes to the element",function(){l(".apple").addClass("fruit"),expect(l(".apple").hasClass("apple")).to.be.ok(),expect(l(".apple").hasClass("fruit")).to.be.ok(),expect(l(".apple").hasClass("red")).to.not.be.ok(),l(".apple").toggleClass("apple red",!0),expect(l(".fruit").hasClass("apple")).to.be.ok(),expect(l(".fruit").hasClass("red")).to.be.ok(),expect(l(".fruit").hasClass("fruit")).to.be.ok()}),it("(class true) : should add only one instance of class",function(){l(".apple").toggleClass("tasty",!0),l(".apple").toggleClass("tasty",!0),expect(l(".apple").attr("class").match(/tasty/g).length).to.equal(1)}),it("(class class, false) : should remove multiple classes from the element",function(){l(".apple").addClass("fruit"),expect(l(".apple").hasClass("apple")).to.be.ok(),expect(l(".apple").hasClass("fruit")).to.be.ok(),expect(l(".apple").hasClass("red")).to.not.be.ok(),l(".apple").toggleClass("apple red",!1),expect(l(".fruit").hasClass("apple")).to.not.be.ok(),expect(l(".fruit").hasClass("red")).to.not.be.ok(),expect(l(".fruit").hasClass("fruit")).to.be.ok()}),it("(fn) : should toggle classes returned from the function",function(){(l=cheerio.load(food))(".apple").addClass("fruit"),l(".carrot").addClass("vegetable"),expect(l(".apple").hasClass("fruit")).to.be.ok(),expect(l(".apple").hasClass("vegetable")).to.not.be.ok(),expect(l(".orange").hasClass("fruit")).to.not.be.ok(),expect(l(".orange").hasClass("vegetable")).to.not.be.ok(),expect(l(".carrot").hasClass("fruit")).to.not.be.ok(),expect(l(".carrot").hasClass("vegetable")).to.be.ok(),expect(l(".sweetcorn").hasClass("fruit")).to.not.be.ok(),expect(l(".sweetcorn").hasClass("vegetable")).to.not.be.ok(),l("li").toggleClass(function(e,t,a){return l(this).parent().is("#fruits")?"fruit":"vegetable"}),expect(l(".apple").hasClass("fruit")).to.not.be.ok(),expect(l(".apple").hasClass("vegetable")).to.not.be.ok(),expect(l(".orange").hasClass("fruit")).to.be.ok(),expect(l(".orange").hasClass("vegetable")).to.not.be.ok(),expect(l(".carrot").hasClass("fruit")).to.not.be.ok(),expect(l(".carrot").hasClass("vegetable")).to.not.be.ok(),expect(l(".sweetcorn").hasClass("fruit")).to.not.be.ok(),expect(l(".sweetcorn").hasClass("vegetable")).to.be.ok()})}),describe(".is",function(){it("() : should return false",function(){expect(l("li.apple").is()).to.be(!1)}),it("(true selector) : should return true",function(){expect(cheerio("#vegetables",vegetables).is("ul")).to.be(!0)}),it("(false selector) : should return false",function(){expect(cheerio("#vegetables",vegetables).is("div")).to.be(!1)}),it("(true selection) : should return true",function(){var e=cheerio("li",vegetables);expect(e.is(e.eq(1))).to.be(!0)}),it("(false selection) : should return false",function(){var e=cheerio(vegetables),t=e.find("li");expect(t.is(e)).to.be(!1)}),it("(true element) : should return true",function(){var e=cheerio("li",vegetables);expect(e.is(e[0])).to.be(!0)}),it("(false element) : should return false",function(){var e=cheerio(vegetables),t=e.find("li");expect(t.is(e[0])).to.be(!1)}),it("(true predicate) : should return true",function(){var e=l("li").is(function(){return"li"===this.name&&l(this).hasClass("pear")});expect(e).to.be(!0)}),it("(false predicate) : should return false",function(){var e=l("li").last().is(function(){return"ul"===this.name});expect(e).to.be(!1)})})});