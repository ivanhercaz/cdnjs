!function(e,n){"object"==typeof exports&&"undefined"!=typeof module?n(exports,require("react"),require("prop-types")):"function"==typeof define&&define.amd?define(["exports","react","prop-types"],n):n((e=e||self).reactDropzone={},e.React,e.PropTypes)}(this,function(e,oe,n){"use strict";var a="default"in oe?oe.default:oe;function ie(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function t(n,e){var r=Object.keys(n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);e&&(t=t.filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})),r.push.apply(r,t)}return r}function ae(n){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?t(r,!0).forEach(function(e){ie(n,e,r[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(r)):t(r).forEach(function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(r,e))})}return n}function ue(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],0<=n.indexOf(r)||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],0<=n.indexOf(r)||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}function ce(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var r=[],t=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(t=(a=u.next()).done)&&(r.push(a.value),!n||r.length!==n);t=!0);}catch(e){o=!0,i=e}finally{try{t||null==u.return||u.return()}finally{if(o)throw i}}return r}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function le(e){return function(e){if(Array.isArray(e)){for(var n=0,r=new Array(e.length);n<e.length;n++)r[n]=e[n];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function l(i,a,u,c){return new(u=u||Promise)(function(e,n){function r(e){try{o(c.next(e))}catch(e){n(e)}}function t(e){try{o(c.throw(e))}catch(e){n(e)}}function o(n){n.done?e(n.value):new u(function(e){e(n.value)}).then(r,t)}o((c=c.apply(i,a||[])).next())})}function f(r,t){var o,i,a,e,u={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return e={next:n(0),throw:n(1),return:n(2)},"function"==typeof Symbol&&(e[Symbol.iterator]=function(){return this}),e;function n(n){return function(e){return function(n){if(o)throw new TypeError("Generator is already executing.");for(;u;)try{if(o=1,i&&(a=2&n[0]?i.return:n[0]?i.throw||((a=i.return)&&a.call(i),0):i.next)&&!(a=a.call(i,n[1])).done)return a;switch(i=0,a&&(n=[2&n[0],a.value]),n[0]){case 0:case 1:a=n;break;case 4:return u.label++,{value:n[1],done:!1};case 5:u.label++,i=n[1],n=[0];continue;case 7:n=u.ops.pop(),u.trys.pop();continue;default:if(!(a=0<(a=u.trys).length&&a[a.length-1])&&(6===n[0]||2===n[0])){u=0;continue}if(3===n[0]&&(!a||n[1]>a[0]&&n[1]<a[3])){u.label=n[1];break}if(6===n[0]&&u.label<a[1]){u.label=a[1],a=n;break}if(a&&u.label<a[2]){u.label=a[2],u.ops.push(n);break}a[2]&&u.ops.pop(),u.trys.pop();continue}n=t.call(r,u)}catch(e){n=[6,e],i=0}finally{o=a=0}if(5&n[0])throw n[1];return{value:n[0]?n[1]:void 0,done:!0}}([n,e])}}}function r(e,n){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var t,o,i=r.call(e),a=[];try{for(;(void 0===n||0<n--)&&!(t=i.next()).done;)a.push(t.value)}catch(e){o={error:e}}finally{try{t&&!t.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return a}function o(){for(var e=[],n=0;n<arguments.length;n++)e=e.concat(r(arguments[n]));return e}n=n&&n.hasOwnProperty("default")?n.default:n;var i=new Map([["avi","video/avi"],["gif","image/gif"],["ico","image/x-icon"],["jpeg","image/jpeg"],["jpg","image/jpeg"],["mkv","video/x-matroska"],["mov","video/quicktime"],["mp4","video/mp4"],["pdf","application/pdf"],["png","image/png"],["zip","application/zip"],["doc","application/msword"],["docx","application/vnd.openxmlformats-officedocument.wordprocessingml.document"]]);function u(e,n){var r=function(e){var n=e.name;if(n&&-1!==n.lastIndexOf(".")&&!e.type){var r=n.split(".").pop().toLowerCase(),t=i.get(r);t&&Object.defineProperty(e,"type",{value:t,writable:!1,configurable:!1,enumerable:!0})}return e}(e);if("string"!=typeof r.path){var t=e.webkitRelativePath;Object.defineProperty(r,"path",{value:"string"==typeof n?n:"string"==typeof t&&0<t.length?t:e.name,writable:!1,configurable:!1,enumerable:!0})}return r}var c=[".DS_Store","Thumbs.db"];function fe(n){return l(this,void 0,void 0,function(){return f(this,function(e){return[2,function(e){return!!e.dataTransfer}(n)&&n.dataTransfer?function(r,t){return l(this,void 0,void 0,function(){var n;return f(this,function(e){switch(e.label){case 0:return r.items?(n=p(r.items).filter(function(e){return"file"===e.kind}),"drop"!==t?[2,n]:[4,Promise.all(n.map(d))]):[3,2];case 1:return[2,s(function r(e){return e.reduce(function(e,n){return o(e,Array.isArray(n)?r(n):[n])},[])}(e.sent()))];case 2:return[2,s(p(r.files).map(function(e){return u(e)}))]}})})}(n.dataTransfer,n.type):function(e){return(function(e){return null!==e}(e.target)&&e.target.files?p(e.target.files):[]).map(function(e){return u(e)})}(n)]})})}function s(e){return e.filter(function(e){return-1===c.indexOf(e.name)})}function p(e){for(var n=[],r=0;r<e.length;r++){var t=e[r];n.push(t)}return n}function d(e){if("function"!=typeof e.webkitGetAsEntry)return v(e);var n=e.webkitGetAsEntry();return n&&n.isDirectory?y(n):v(e)}function v(e){var n=e.getAsFile();if(!n)return Promise.reject(e+" is not a File");var r=u(n);return Promise.resolve(r)}function g(n){return l(this,void 0,void 0,function(){return f(this,function(e){return[2,n.isDirectory?y(n):function(t){return l(this,void 0,void 0,function(){return f(this,function(e){return[2,new Promise(function(r,n){t.file(function(e){var n=u(e,t.fullPath);r(n)},function(e){n(e)})})]})})}(n)]})})}function y(e){var n=e.createReader();return new Promise(function(a,u){var c=[];!function i(){var e=this;n.readEntries(function(o){return l(e,void 0,void 0,function(){var n,r,t;return f(this,function(e){switch(e.label){case 0:if(o.length)return[3,5];e.label=1;case 1:return e.trys.push([1,3,,4]),[4,Promise.all(c)];case 2:return n=e.sent(),a(n),[3,4];case 3:return r=e.sent(),u(r),[3,4];case 4:return[3,6];case 5:t=Promise.all(o.map(g)),c.push(t),i(),e.label=6;case 6:return[2]}})})},function(e){u(e)})}()})}var m,b,h=(function(e){function t(e){if(o[e])return o[e].exports;var n=o[e]={i:e,l:!1,exports:{}};return r[e].call(n.exports,n,n.exports,t),n.l=!0,n.exports}var r,o;e.exports=(o={},t.m=r=[function(e,n,r){n.__esModule=!0,n.default=function(e,n){if(e&&n){var r=Array.isArray(n)?n:n.split(","),t=e.name||"",o=e.type||"",i=o.replace(/\/.*$/,"");return r.some(function(e){var n=e.trim();return"."===n.charAt(0)?t.toLowerCase().endsWith(n.toLowerCase()):n.endsWith("/*")?i===n.replace(/\/.*$/,""):o===n})}return!0}}],t.c=o,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:r})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=0))}(m={exports:{}},m.exports),m.exports),D=(b=h)&&b.__esModule&&Object.prototype.hasOwnProperty.call(b,"default")?b.default:b,w=function(e){e=Array.isArray(e)&&1===e.length?e[0]:e;var n=Array.isArray(e)?"one of ".concat(e.join(", ")):e;return{code:"file-invalid-type",message:"File type must be ".concat(n)}},O=function(e){return{code:"file-too-large",message:"File is larger than ".concat(e," bytes")}},F=function(e){return{code:"file-too-small",message:"File is smaller than ".concat(e," bytes")}},se={code:"too-many-files",message:"Too many files"};function pe(e,n){var r="application/x-moz-file"===e.type||D(e,n);return[r,r?null:w(n)]}function de(e,n,r){if(j(e.size))if(j(n)&&j(r)){if(e.size>r)return[!1,O(r)];if(e.size<n)return[!1,F(n)]}else{if(j(n)&&e.size<n)return[!1,F(n)];if(j(r)&&e.size>r)return[!1,O(r)]}return[!0,null]}function j(e){return null!=e}function ve(e){return"function"==typeof e.isPropagationStopped?e.isPropagationStopped():void 0!==e.cancelBubble&&e.cancelBubble}function ge(e){return e.dataTransfer?Array.prototype.some.call(e.dataTransfer.types,function(e){return"Files"===e||"application/x-moz-file"===e}):!!e.target&&!!e.target.files}function ye(e){e.preventDefault()}function me(e){var n=0<arguments.length&&void 0!==e?e:window.navigator.userAgent;return function(e){return-1!==e.indexOf("MSIE")||-1!==e.indexOf("Trident/")}(n)||function(e){return-1!==e.indexOf("Edge/")}(n)}function be(){for(var e=arguments.length,o=new Array(e),n=0;n<e;n++)o[n]=arguments[n];return function(n){for(var e=arguments.length,r=new Array(1<e?e-1:0),t=1;t<e;t++)r[t-1]=arguments[t];return o.some(function(e){return!ve(n)&&e&&e.apply(void 0,[n].concat(r)),ve(n)})}}var x=oe.forwardRef(function(e,n){var r=e.children,t=A(ue(e,["children"])),o=t.open,i=ue(t,["open"]);return oe.useImperativeHandle(n,function(){return{open:o}},[o]),a.createElement(oe.Fragment,null,r(ae({},i,{open:o})))});x.displayName="Dropzone";var he={isFocused:!(x.propTypes={children:n.func,accept:n.oneOfType([n.string,n.arrayOf(n.string)]),multiple:n.bool,preventDropOnDocument:n.bool,noClick:n.bool,noKeyboard:n.bool,noDrag:n.bool,noDragEventsBubbling:n.bool,minSize:n.number,maxSize:n.number,disabled:n.bool,getFilesFromEvent:n.func,onFileDialogCancel:n.func,onDragEnter:n.func,onDragLeave:n.func,onDragOver:n.func,onDrop:n.func,onDropAccepted:n.func,onDropRejected:n.func}),isFileDialogActive:!1,isDragActive:!1,isDragAccept:!1,isDragReject:!1,draggedFiles:[],acceptedFiles:[],fileRejections:[]};function A(){function e(){I&&setTimeout(function(){S.current&&(S.current.files.length||(T({type:"closeDialog"}),"function"==typeof h&&h()))},300)}var n=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},f=n.accept,r=n.disabled,p=void 0!==r&&r,t=n.getFilesFromEvent,o=void 0===t?fe:t,i=n.maxSize,s=void 0===i?1/0:i,a=n.minSize,d=void 0===a?0:a,u=n.multiple,v=void 0===u||u,c=n.onDragEnter,l=n.onDragLeave,g=n.onDragOver,y=n.onDrop,m=n.onDropAccepted,b=n.onDropRejected,h=n.onFileDialogCancel,D=n.preventDropOnDocument,w=void 0===D||D,O=n.noClick,F=void 0!==O&&O,j=n.noKeyboard,x=void 0!==j&&j,A=n.noDrag,P=void 0!==A&&A,k=n.noDragEventsBubbling,E=void 0!==k&&k,C=oe.useRef(null),S=oe.useRef(null),z=ce(oe.useReducer(De,he),2),R=z[0],T=z[1],L=R.isFocused,I=R.isFileDialogActive,K=R.draggedFiles,_=oe.useCallback(function(){S.current&&(T({type:"openDialog"}),S.current.value=null,S.current.click())},[T]);oe.useEffect(function(){return window.addEventListener("focus",e,!1),function(){window.removeEventListener("focus",e,!1)}},[S,I,h]);function M(e){C.current&&C.current.contains(e.target)||(e.preventDefault(),W.current=[])}var B=oe.useCallback(function(e){C.current&&C.current.isEqualNode(e.target)&&(32!==e.keyCode&&13!==e.keyCode||(e.preventDefault(),_()))},[C,S]),q=oe.useCallback(function(){T({type:"focus"})},[]),G=oe.useCallback(function(){T({type:"blur"})},[]),N=oe.useCallback(function(){F||(me()?setTimeout(_,0):_())},[S,F]),W=oe.useRef([]);oe.useEffect(function(){return w&&(document.addEventListener("dragover",ye,!1),document.addEventListener("drop",M,!1)),function(){w&&(document.removeEventListener("dragover",ye),document.removeEventListener("drop",M))}},[C,w]);function $(e){return p?null:e}function H(e){return x?null:$(e)}function J(e){return P?null:$(e)}var Q=oe.useCallback(function(n){n.preventDefault(),n.persist(),Y(n),-1===W.current.indexOf(n.target)&&(W.current=[].concat(le(W.current),[n.target])),ge(n)&&Promise.resolve(o(n)).then(function(e){ve(n)&&!E||(T({draggedFiles:e,isDragActive:!0,type:"setDraggedFiles"}),c&&c(n))})},[o,c,E]),U=oe.useCallback(function(e){if(e.preventDefault(),e.persist(),Y(e),e.dataTransfer)try{e.dataTransfer.dropEffect="copy"}catch(e){}return ge(e)&&g&&g(e),!1},[g,E]),V=oe.useCallback(function(n){n.preventDefault(),n.persist(),Y(n);var e=W.current.filter(function(e){return e!==n.target&&C.current&&C.current.contains(e)});0<(W.current=e).length||(T({isDragActive:!1,type:"setDraggedFiles",draggedFiles:[]}),ge(n)&&l&&l(n))},[C,l,E]),X=oe.useCallback(function(n){n.preventDefault(),n.persist(),Y(n),W.current=[],ge(n)&&Promise.resolve(o(n)).then(function(e){if(!ve(n)||E){var c=[],l=[];e.forEach(function(e){var n=ce(pe(e,f),2),r=n[0],t=n[1],o=ce(de(e,d,s),2),i=o[0],a=o[1];if(r&&i)c.push(e);else{var u=[t,a].filter(function(e){return e});l.push({file:e,errors:u})}}),!v&&1<c.length&&(c.forEach(function(e){l.push({file:e,errors:[se]})}),c.splice(0)),T({acceptedFiles:c,fileRejections:l,type:"setFiles"}),y&&y(c,l,n),0<l.length&&b&&b(l,n),0<c.length&&m&&m(c,n)}}),T({type:"reset"})},[v,f,d,s,o,y,m,b,E]),Y=function(e){E&&e.stopPropagation()},Z=oe.useMemo(function(){return function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},n=e.refKey,r=void 0===n?"ref":n,t=e.onKeyDown,o=e.onFocus,i=e.onBlur,a=e.onClick,u=e.onDragEnter,c=e.onDragOver,l=e.onDragLeave,f=e.onDrop,s=ue(e,["refKey","onKeyDown","onFocus","onBlur","onClick","onDragEnter","onDragOver","onDragLeave","onDrop"]);return ae(ie({onKeyDown:H(be(t,B)),onFocus:H(be(o,q)),onBlur:H(be(i,G)),onClick:$(be(a,N)),onDragEnter:J(be(u,Q)),onDragOver:J(be(c,U)),onDragLeave:J(be(l,V)),onDrop:J(be(f,X))},r,C),p||x?{}:{tabIndex:0},{},s)}},[C,B,q,G,N,Q,U,V,X,x,P,p]),ee=oe.useCallback(function(e){e.stopPropagation()},[]),ne=oe.useMemo(function(){return function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},n=e.refKey,r=void 0===n?"ref":n,t=e.onChange,o=e.onClick,i=ue(e,["refKey","onChange","onClick"]);return ae({},ie({accept:f,multiple:v,type:"file",style:{display:"none"},onChange:$(be(t,X)),onClick:$(be(o,ee)),autoComplete:"off",tabIndex:-1},r,S),{},i)}},[S,f,v,X,p]),re=K.length,te=0<re&&function(e){var n=e.files,t=e.accept,o=e.minSize,i=e.maxSize;return!(!e.multiple&&1<n.length)&&n.every(function(e){var n=ce(pe(e,t),1)[0],r=ce(de(e,o,i),1)[0];return n&&r})}({files:K,accept:f,minSize:d,maxSize:s,multiple:v});return ae({},R,{isDragAccept:te,isDragReject:0<re&&!te,isFocused:L&&!p,getRootProps:Z,getInputProps:ne,rootRef:C,inputRef:S,open:$(_)})}function De(e,n){switch(n.type){case"focus":return ae({},e,{isFocused:!0});case"blur":return ae({},e,{isFocused:!1});case"openDialog":return ae({},e,{isFileDialogActive:!0});case"closeDialog":return ae({},e,{isFileDialogActive:!1});case"setDraggedFiles":var r=n.isDragActive;return ae({},e,{draggedFiles:n.draggedFiles,isDragActive:r});case"setFiles":return ae({},e,{acceptedFiles:n.acceptedFiles,fileRejections:n.fileRejections});case"reset":return ae({},e,{isFileDialogActive:!1,isDragActive:!1,draggedFiles:[],acceptedFiles:[],fileRejections:[]});default:return e}}e.default=x,e.useDropzone=A,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
