{"version":3,"sources":["webpack://Tone/webpack/universalModuleDefinition","webpack://Tone/webpack/bootstrap","webpack://Tone/./node_modules/automation-events/build/es5/bundle.js","webpack://Tone/./node_modules/@babel/runtime/helpers/slicedToArray.js","webpack://Tone/./node_modules/@babel/runtime/helpers/arrayWithHoles.js","webpack://Tone/./node_modules/@babel/runtime/helpers/iterableToArrayLimit.js","webpack://Tone/./node_modules/@babel/runtime/helpers/nonIterableRest.js","webpack://Tone/./node_modules/@babel/runtime/helpers/classCallCheck.js","webpack://Tone/./node_modules/@babel/runtime/helpers/createClass.js","webpack://Tone/./Tone/version.ts","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/abort-error.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/globals.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/is-constructible.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/split-import-statements.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/add-audio-worklet-module.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/analyser-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/is-owned-by-context.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/index-size-error.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/wrap-audio-buffer-get-channel-data-method.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/audio-buffer-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/get-value-for-key.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/get-event-listeners-of-audio-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/set-internal-state-to-active.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/set-internal-state-to-passive.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/wrap-event-listener.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/audio-buffer-source-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/is-valid-latency-hint.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/event-target.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/guards/audio-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/guards/audio-node-output-connection.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/guards/audio-worklet-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/guards/native-audio-node-faker.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/connect-native-audio-node-to-native-audio-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/delete-event-listeners-of-audio-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/disconnect-native-audio-node-from-native-audio-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/get-audio-node-connections.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/get-audio-param-connections.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/get-native-audio-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/get-native-audio-param.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/insert-element-in-set.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/is-active-audio-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/is-part-of-a-cycle.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/is-passive-audio-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/pick-element-from-set.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/set-internal-state-to-passive-when-necessary.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/test-audio-node-disconnect-method-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/visit-each-audio-node-once.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/guards/native-audio-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/audio-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/read-only-map.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/audio-worklet-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/copy-from-channel.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/copy-to-channel.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/create-nested-arrays.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/audio-worklet-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/get-audio-worklet-processor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/biquad-filter-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/channel-merger-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/channel-splitter-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/constant-source-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/convolver-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/delay-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/disconnect-multiple-outputs.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/dynamics-compressor-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/gain-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/invalid-state-error.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/invalid-access-error.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/iir-filter-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/filter-buffer.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/test-promise-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/minimal-offline-audio-context-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/assign-native-audio-node-option.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/assign-native-audio-node-options.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/test-analyser-node-get-float-time-domain-data-method-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/assign-native-audio-node-audio-param-value.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/compute-buffer-size.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/create-audio-worklet-processor-promise.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/clone-audio-worklet-node-options.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/intercept-connections.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-iir-filter-node-faker-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/not-supported-error.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/offline-audio-context-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/oscillator-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/panner-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/periodic-wave-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/stereo-panner-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/unknown-error.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/wave-shaper-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/is-dc-curve.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/overwrite-accessors.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/module.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/cache-test-result.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/window.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-offline-audio-context-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/is-native-offline-audio-context.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-audio-context-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/get-backup-native-context.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-audio-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-analyser-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/wrap-analyser-node-get-float-time-domain-data-method.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/get-audio-node-renderer.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/render-inputs-of-audio-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/analyser-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/get-native-context.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/is-native-audio-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/is-native-audio-param.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/wrap-audio-node-disconnect-method.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/add-audio-node-connections.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/increment-cycle-counter-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/decrement-cycle-counter.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/detect-cycles.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/guards/delay-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-audio-buffer-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/convert-number-to-unsigned-long.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/wrap-audio-buffer-copy-channel-methods.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/wrap-audio-buffer-copy-channel-methods-out-of-bounds.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/test-audio-buffer-constructor-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/test-audio-scheduled-source-node-start-method-negative-parameters-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/test-audio-scheduled-source-node-stop-method-consecutive-calls-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/test-audio-scheduled-source-node-stop-method-negative-parameters-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/wrap-audio-scheduled-source-node-stop-method-consecutive-calls.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/render-inputs-of-audio-param.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/connect-audio-param.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-audio-buffer-source-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/wrap-audio-buffer-source-node-start-method-consecutive-calls.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/wrap-audio-buffer-source-node-start-method-duration-parameter.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/test-audio-buffer-source-node-start-method-consecutive-calls-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/test-audio-buffer-source-node-start-method-duration-parameter-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/test-audio-buffer-source-node-start-method-offset-clamping-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/test-audio-buffer-source-node-stop-method-nullified-buffer-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/wrap-audio-buffer-source-node-start-method-offset-clamping.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/wrap-audio-buffer-source-node-stop-method-nullified-buffer.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/render-automation.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/get-audio-param-renderer.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/audio-buffer-source-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/audio-param-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/add-audio-param-connections.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/audio-param-renderer.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/constants.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-gain-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/audio-destination-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/audio-destination-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-audio-destination-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-biquad-filter-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/biquad-filter-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/monitor-connections.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/wrap-channel-merger-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-channel-merger-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/channel-merger-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-channel-splitter-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/wrap-channel-splitter-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/channel-splitter-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-constant-source-node-faker-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-constant-source-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/constant-source-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-convolver-node-faker-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-convolver-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/convolver-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-delay-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/delay-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-dynamics-compressor-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/dynamics-compressor-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/gain-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-script-processor-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/render-native-offline-audio-context.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/test-offline-audio-context-current-time-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/iir-filter-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/wrap-iir-filter-node-get-frequency-response-method.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-iir-filter-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/minimal-base-audio-context-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/audio-listener-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-oscillator-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/oscillator-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/connected-native-audio-buffer-source-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-wave-shaper-node-faker-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-wave-shaper-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-panner-node-faker-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-panner-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/panner-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-periodic-wave-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-stereo-panner-node-faker-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-stereo-panner-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/stereo-panner-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/wave-shaper-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/is-secure-context.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/expose-current-frame-and-current-time.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/evaluate-source.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/fetch-source.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/is-native-audio-context.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/is-native-context.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/base-audio-context-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/decode-audio-data.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/detach-array-buffer.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/data-clone-error.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/encoding-error.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/media-element-audio-source-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-media-element-audio-source-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/media-stream-audio-source-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-media-stream-audio-source-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/media-stream-track-audio-source-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-media-stream-track-audio-source-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/audio-context-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/connect-multiple-outputs.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-audio-worklet-node-faker-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/create-audio-worklet-processor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-audio-worklet-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/test-clonability-of-audio-worklet-node-options.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-audio-worklet-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/minimal-audio-context-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/create-native-offline-audio-context.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/start-rendering.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/is-any-audio-context.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/is-any-audio-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/is-any-audio-param.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/is-any-offline-audio-context.js","webpack://Tone/./node_modules/tslib/tslib.es6.js","webpack://Tone/./Tone/core/util/Debug.ts","webpack://Tone/./Tone/core/util/TypeCheck.ts","webpack://Tone/./Tone/core/context/AudioContext.ts","webpack://Tone/./Tone/core/clock/Ticker.ts","webpack://Tone/./Tone/core/util/AdvancedTypeCheck.ts","webpack://Tone/./Tone/core/util/Defaults.ts","webpack://Tone/./Tone/core/Tone.ts","webpack://Tone/./Tone/core/util/Math.ts","webpack://Tone/./Tone/core/util/Timeline.ts","webpack://Tone/./Tone/core/context/ContextInitialization.ts","webpack://Tone/./Tone/core/util/Emitter.ts","webpack://Tone/./Tone/core/context/BaseContext.ts","webpack://Tone/./Tone/core/context/Context.ts","webpack://Tone/./Tone/core/context/DummyContext.ts","webpack://Tone/./Tone/core/util/Interface.ts","webpack://Tone/./Tone/core/context/ToneAudioBuffer.ts","webpack://Tone/./Tone/core/context/OfflineContext.ts","webpack://Tone/./Tone/core/Global.ts","webpack://Tone/./Tone/core/type/Conversions.ts","webpack://Tone/./Tone/core/type/TimeBase.ts","webpack://Tone/./Tone/core/type/Time.ts","webpack://Tone/./Tone/core/type/Frequency.ts","webpack://Tone/./Tone/core/type/TransportTime.ts","webpack://Tone/./Tone/core/context/ToneWithContext.ts","webpack://Tone/./Tone/core/util/StateTimeline.ts","webpack://Tone/./Tone/core/context/Param.ts","webpack://Tone/./Tone/core/context/ToneAudioNode.ts","webpack://Tone/./Tone/core/context/Gain.ts","webpack://Tone/./Tone/source/OneShotSource.ts","webpack://Tone/./Tone/signal/ToneConstantSource.ts","webpack://Tone/./Tone/signal/Signal.ts","webpack://Tone/./Tone/core/clock/TickParam.ts","webpack://Tone/./Tone/core/clock/TickSignal.ts","webpack://Tone/./Tone/core/clock/TickSource.ts","webpack://Tone/./Tone/core/clock/Clock.ts","webpack://Tone/./Tone/core/util/TimelineValue.ts","webpack://Tone/./Tone/core/type/Ticks.ts","webpack://Tone/./Tone/core/util/IntervalTimeline.ts","webpack://Tone/./Tone/core/clock/TransportEvent.ts","webpack://Tone/./Tone/core/clock/TransportRepeatEvent.ts","webpack://Tone/./Tone/core/clock/Transport.ts","webpack://Tone/./Tone/core/context/Delay.ts","webpack://Tone/./Tone/component/channel/Volume.ts","webpack://Tone/./Tone/core/context/Destination.ts","webpack://Tone/./Tone/core/context/Offline.ts","webpack://Tone/./Tone/core/context/ToneAudioBuffers.ts","webpack://Tone/./Tone/core/type/Midi.ts","webpack://Tone/./Tone/core/util/Draw.ts","webpack://Tone/./Tone/source/Source.ts","webpack://Tone/./Tone/source/buffer/ToneBufferSource.ts","webpack://Tone/./Tone/source/Noise.ts","webpack://Tone/./Tone/component/analysis/Analyser.ts","webpack://Tone/./Tone/component/analysis/MeterBase.ts","webpack://Tone/./Tone/component/analysis/Meter.ts","webpack://Tone/./Tone/component/analysis/FFT.ts","webpack://Tone/./Tone/component/analysis/DCMeter.ts","webpack://Tone/./Tone/component/analysis/Waveform.ts","webpack://Tone/./Tone/component/filter/OnePoleFilter.ts","webpack://Tone/./Tone/signal/SignalOperator.ts","webpack://Tone/./Tone/signal/WaveShaper.ts","webpack://Tone/./Tone/signal/Abs.ts","webpack://Tone/./Tone/component/analysis/Follower.ts","webpack://Tone/./Tone/component/channel/Solo.ts","webpack://Tone/./Tone/component/channel/Panner.ts","webpack://Tone/./Tone/component/channel/PanVol.ts","webpack://Tone/./Tone/component/channel/Channel.ts","webpack://Tone/./Tone/signal/GainToAudio.ts","webpack://Tone/./Tone/component/channel/CrossFade.ts","webpack://Tone/./Tone/component/channel/Merge.ts","webpack://Tone/./Tone/signal/Add.ts","webpack://Tone/./Tone/signal/Multiply.ts","webpack://Tone/./Tone/signal/Negate.ts","webpack://Tone/./Tone/signal/Subtract.ts","webpack://Tone/./Tone/component/channel/MidSideMerge.ts","webpack://Tone/./Tone/component/channel/Split.ts","webpack://Tone/./Tone/component/channel/MidSideSplit.ts","webpack://Tone/./Tone/component/filter/Filter.ts","webpack://Tone/./Tone/component/channel/MultibandSplit.ts","webpack://Tone/./Tone/component/dynamics/Compressor.ts","webpack://Tone/./Tone/signal/GreaterThanZero.ts","webpack://Tone/./Tone/signal/GreaterThan.ts","webpack://Tone/./Tone/component/dynamics/Gate.ts","webpack://Tone/./Tone/component/dynamics/Limiter.ts","webpack://Tone/./Tone/component/dynamics/MidSideCompressor.ts","webpack://Tone/./Tone/component/dynamics/MultibandCompressor.ts","webpack://Tone/./Tone/component/envelope/Envelope.ts","webpack://Tone/./Tone/component/envelope/AmplitudeEnvelope.ts","webpack://Tone/./Tone/signal/Scale.ts","webpack://Tone/./Tone/signal/Pow.ts","webpack://Tone/./Tone/component/envelope/FrequencyEnvelope.ts","webpack://Tone/./Tone/component/filter/EQ3.ts","webpack://Tone/./Tone/core/context/ToneAudioWorklet.ts","webpack://Tone/./Tone/component/filter/FeedbackCombFilter.ts","webpack://Tone/./Tone/component/filter/LowpassCombFilter.ts","webpack://Tone/./Tone/component/filter/Convolver.ts","webpack://Tone/./Tone/source/UserMedia.ts","webpack://Tone/./Tone/source/oscillator/OscillatorInterface.ts","webpack://Tone/./Tone/source/oscillator/ToneOscillatorNode.ts","webpack://Tone/./Tone/source/oscillator/Oscillator.ts","webpack://Tone/./Tone/signal/AudioToGain.ts","webpack://Tone/./Tone/source/oscillator/AMOscillator.ts","webpack://Tone/./Tone/source/oscillator/FMOscillator.ts","webpack://Tone/./Tone/source/oscillator/PulseOscillator.ts","webpack://Tone/./Tone/source/oscillator/FatOscillator.ts","webpack://Tone/./Tone/source/oscillator/PWMOscillator.ts","webpack://Tone/./Tone/source/oscillator/OmniOscillator.ts","webpack://Tone/./Tone/signal/Zero.ts","webpack://Tone/./Tone/source/oscillator/LFO.ts","webpack://Tone/./Tone/source/buffer/Player.ts","webpack://Tone/./Tone/source/buffer/Players.ts","webpack://Tone/./Tone/source/buffer/GrainPlayer.ts","webpack://Tone/./Tone/signal/ScaleExp.ts","webpack://Tone/./Tone/signal/SyncedSignal.ts","webpack://Tone/./Tone/instrument/Instrument.ts","webpack://Tone/./Tone/instrument/Monophonic.ts","webpack://Tone/./Tone/instrument/Synth.ts","webpack://Tone/./Tone/instrument/ModulationSynth.ts","webpack://Tone/./Tone/instrument/AMSynth.ts","webpack://Tone/./Tone/instrument/MonoSynth.ts","webpack://Tone/./Tone/instrument/DuoSynth.ts","webpack://Tone/./Tone/instrument/FMSynth.ts","webpack://Tone/./Tone/instrument/MetalSynth.ts","webpack://Tone/./Tone/instrument/MembraneSynth.ts","webpack://Tone/./Tone/instrument/NoiseSynth.ts","webpack://Tone/./Tone/instrument/PluckSynth.ts","webpack://Tone/./Tone/instrument/PolySynth.ts","webpack://Tone/./Tone/instrument/Sampler.ts","webpack://Tone/./Tone/event/ToneEvent.ts","webpack://Tone/./Tone/event/Loop.ts","webpack://Tone/./Tone/event/Part.ts","webpack://Tone/./Tone/event/PatternGenerator.ts","webpack://Tone/./Tone/event/Pattern.ts","webpack://Tone/./Tone/event/Sequence.ts","webpack://Tone/./Tone/effect/Effect.ts","webpack://Tone/./Tone/effect/LFOEffect.ts","webpack://Tone/./Tone/effect/AutoFilter.ts","webpack://Tone/./Tone/effect/AutoPanner.ts","webpack://Tone/./Tone/effect/AutoWah.ts","webpack://Tone/./Tone/effect/BitCrusher.ts","webpack://Tone/./Tone/effect/Chebyshev.ts","webpack://Tone/./Tone/effect/StereoEffect.ts","webpack://Tone/./Tone/effect/StereoFeedbackEffect.ts","webpack://Tone/./Tone/effect/Chorus.ts","webpack://Tone/./Tone/effect/Distortion.ts","webpack://Tone/./Tone/effect/FeedbackEffect.ts","webpack://Tone/./Tone/effect/FeedbackDelay.ts","webpack://Tone/./Tone/component/filter/PhaseShiftAllpass.ts","webpack://Tone/./Tone/effect/FrequencyShifter.ts","webpack://Tone/./Tone/effect/Freeverb.ts","webpack://Tone/./Tone/effect/JCReverb.ts","webpack://Tone/./Tone/effect/StereoXFeedbackEffect.ts","webpack://Tone/./Tone/effect/PingPongDelay.ts","webpack://Tone/./Tone/effect/PitchShift.ts","webpack://Tone/./Tone/effect/Phaser.ts","webpack://Tone/./Tone/effect/Reverb.ts","webpack://Tone/./Tone/effect/MidSideEffect.ts","webpack://Tone/./Tone/effect/StereoWidener.ts","webpack://Tone/./Tone/effect/Tremolo.ts","webpack://Tone/./Tone/effect/Vibrato.ts","webpack://Tone/./Tone/index.ts"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","_slicedToArray","_classCallCheck","_createClass","createExtendedExponentialRampToValueAutomationEvent","endTime","insertTime","type","createExtendedLinearRampToValueAutomationEvent","createSetValueAutomationEvent","startTime","createSetValueCurveAutomationEvent","values","duration","getTargetValueAtTime","time","valueAtStartTime","_ref","target","timeConstant","Math","exp","isExponentialRampToValueAutomationEvent","automationEvent","isLinearRampToValueAutomationEvent","isAnyRampToValueAutomationEvent","isSetValueAutomationEvent","isSetValueCurveAutomationEvent","getValueOfAutomationEventAtIndexAtTime","automationEvents","index","defaultValue","undefined","length","getEndTimeAndValueOfPreviousAutomationEvent","currentAutomationEvent","nextAutomationEvent","isCancelAndHoldAutomationEvent","isCancelScheduledValuesAutomationEvent","getEventTime","cancelTime","getExponentialRampValueAtTime","pow","getLinearRampValueAtTime","getValueCurveValueAtTime","theoreticIndex","lowerIndex","floor","upperIndex","ceil","interpolateValue","isSetTargetAutomationEvent","AutomationEventList","_automationEvents","_currenTime","_defaultValue","iterator","eventTime","findIndex","removedAutomationEvent","slice","lastAutomationEvent","Error","startValue","truncatedAutomationEvent","push","getValue","Float32Array","_index","previousAutomationEvent","persistentAutomationEvent","splice","remainingAutomationEvents","firstRemainingAutomationEvent","unshift","_getEndTimeAndValueOf","_getEndTimeAndValueOf2","_getEndTimeAndValueOf3","_getEndTimeAndValueOf4","_startTime","_value","createCancelAndHoldAutomationEvent","createCancelScheduledValuesAutomationEvent","createExponentialRampToValueAutomationEvent","createLinearRampToValueAutomationEvent","createSetTargetAutomationEvent","arrayWithHoles","iterableToArrayLimit","nonIterableRest","arr","Array","isArray","toString","_arr","_n","_d","_e","_s","_i","next","done","err","TypeError","instance","Constructor","_defineProperties","props","descriptor","configurable","writable","protoProps","staticProps","DOMException","code","ACTIVE_AUDIO_NODE_STORE","WeakSet","AUDIO_NODE_CONNECTIONS_STORE","WeakMap","AUDIO_NODE_STORE","AUDIO_PARAM_CONNECTIONS_STORE","AUDIO_PARAM_STORE","BACKUP_NATIVE_CONTEXT_STORE","CONTEXT_STORE","EVENT_LISTENERS","CYCLE_COUNTERS","NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS","NODE_TO_PROCESSOR_MAPS","TEST_RESULTS","handler","construct","IMPORT_STATEMENT_REGEX","splitImportStatements","source","url","importStatements","sourceWithoutImportStatements","replace","result","match","unresolvedUrl","importStatementWithResolvedUrl","URL","join","verifyParameterDescriptors","parameterDescriptors","verifyProcessorCtor","processorCtor","constructible","Proxy","_a","isConstructible","process","DEFAULT_OPTIONS","channelCount","channelCountMode","channelInterpretation","fftSize","maxDecibels","minDecibels","smoothingTimeConstant","isOwnedByContext","nativeAudioNode","nativeContext","context","nativeAudioBuffer","copyToChannel","wrapAudioBufferGetChannelDataMethod","audioBuffer","getChannelData","channel","numberOfChannels","map","getEventListenersOfAudioNode","audioNode","setInternalStateToActive","has","add","forEach","eventListener","setInternalStateToPassive","delete","wrapEventListener","event","defineProperties","currentTarget","buffer","loop","loopEnd","loopStart","playbackRate","isValidLatencyHint","latencyHint","_nativeEventTarget","_listeners","listener","options","wrappedEventListener","set","addEventListener","dispatchEvent","removeEventListener","isAudioNode","audioNodeOrAudioParam","isAudioNodeOutputConnection","outputConnection","isAudioWorkletNode","isNativeAudioNodeFaker","nativeAudioNodeOrNativeAudioNodeFaker","nativeSourceAudioNode","nativeDestinationAudioNode","output","input","fakeNativeDestinationAudioNode","inputs","connect","deleteEventListenerOfAudioNode","disconnect","getAudioParamConnections","audioParam","insertElementInSet","element","predicate","ignoreDuplicates","lmnt","isPartOfACycle","isPassiveAudioNode","pickElementFromSet","matchingElements","from","filter","matchingElement","setInternalStateToPassiveWhenNecessary","activeInputs","every","connections","size","testAudioNodeDisconnectMethodSupport","nativeAudioContext","Promise","resolve","analyzer","createScriptProcessor","dummy","createGain","ones","createBuffer","channelData","createBufferSource","destination","onaudioprocess","chnnlDt","inputBuffer","some","sample","stop","start","visitEachAudioNodeOnce","cycles","visitor","counts","Map","cycle","count","nativeAudioNodeOrAudioParam","addActiveInputConnectionToAudioNode","activeInputConnection","addActiveInputConnectionToAudioParam","addPassiveInputConnectionToAudioNode","passiveInputs","passiveInputConnections","Set","passiveInputConnection","addPassiveInputConnectionToAudioParam","deletePassiveInputConnectionToAudioNode","matchingConnection","deletePassiveInputConnectionToAudioParam","addConnectionToAudioNodeOfAudioContext","outputs","eventListeners","isActive","partialConnection","deleteActiveInputConnectionToAudioNode","addConnectionToAudioParamOfAudioContext","nativeAudioParam","deleteActiveInputConnectionToAudioParam","deleteActiveInputConnection","activeInputConnections","deleteInputsOfAudioNode","deleteInputConnectionOfAudioNode","deleteInputsOfAudioParam","deleteInputConnectionOfAudioParam","ReadOnlyMap","parameters","_map","entries","callback","thisArg","keys","numberOfInputs","numberOfOutputs","outputChannelCount","parameterData","processorOptions","createChannelCount","copyFromChannel","parent","channelNumber","bufferOffset","byteLength","slicedInput","BYTES_PER_ELEMENT","createNestedArrays","x","y","arrays","array","j","processBuffer","async","proxy","renderedBuffer","nativeOfflineAudioContext","processorConstructor","exposeCurrentFrameAndCurrentTime","numberOfInputChannels","numberOfOutputChannels","reduce","sum","processedBuffer","sampleRate","audioNodeConnections","audioWorkletProcessor","nodeToProcessorMap","nativeAudioWorkletNode","getAudioWorkletProcessor","prmtrs","k","potentiallyEmptyInputs","activeSourceFlag","outputChannelSplitterNodeOutput","error","ErrorEvent","Q","detune","frequency","gain","offset","disableNormalization","delayTime","maxDelayTime","getOutputAudioNodeAtIndex","createIndexSizeError","outputAudioNodes","outputAudioNode","attack","knee","ratio","release","threshold","filterBuffer","feedback","feedbackLength","feedforward","feedforwardLength","minLength","xBuffer","yBuffer","bufferIndex","bufferLength","inputLength","uint32Array","Uint32Array","promise","decodeAudioData","catch","assignNativeAudioNodeOption","option","assignNativeAudioNodeOptions","testAnalyserNodeGetFloatTimeDomainDataMethodSupport","nativeAnalyserNode","getFloatTimeDomainData","assignNativeAudioNodeAudioParamValue","wrapAudioScheduledSourceNodeStartMethodNegativeParameters","nativeAudioScheduledSourceNode","when","RangeError","wrapAudioScheduledSourceNodeStopMethodNegativeParameters","computeBufferSize","baseLatency","max","min","round","log2","createAudioWorkletProcessorPromise","audioWorkletNodeOptions","reject","port1","port2","MessageChannel","onmessage","data","close","onmessageerror","postMessage","cloneAudioWorkletNodeOptions","interceptConnections","original","interceptor","divide","a","b","denominator","evaluatePolynomial","coefficient","z","coneInnerAngle","coneOuterAngle","coneOuterGain","distanceModel","maxDistance","orientationX","orientationY","orientationZ","panningModel","positionX","positionY","positionZ","refDistance","rolloffFactor","pan","curve","oversample","createGetter","createSetter","getPrototypeOf","getOwnPropertyDescriptor","ongoingTests","tester","test","cachedTestResult","ongoingTest","synchronousTestResult","then","finalTestResult","createCacheTestResult","window","createWindow","OfflineAudioContext","webkitOfflineAudioContext","createNativeOfflineAudioContextConstructor","nativeOfflineAudioContextConstructor","anything","createIsNativeOfflineAudioContext","AudioContext","webkitAudioContext","createNativeAudioContextConstructor","isNativeOfflineAudioContext","nativeAudioContextConstructor","state","backupNativeContext","bckpNtveCntxt","createGetBackupNativeContext","getBackupNativeContext","factoryFunction","createNativeAudioNodeFactory","cacheTestResult","createNativeAudioNode","ntvCntxt","createAnalyser","byteTimeDomainData","Uint8Array","getByteTimeDomainData","wrapAnalyserNodeGetFloatTimeDomainDataMethod","createNativeAnalyserNodeFactory","getAudioNodeConnections","renderer","createGetAudioNodeRenderer","getAudioNodeRenderer","trace","nextTrace","all","includes","audioNodeRenderer","renderedNativeAudioNode","render","allRenderingPromises","renderingPromises","createRenderInputsOfAudioNode","createAnalyserNodeRenderer","createNativeAnalyserNode","getNativeAudioNode","renderInputsOfAudioNode","renderedNativeAnalyserNodes","renderedNativeAnalyserNode","createAnalyserNode","createAnalyserNodeRendererFactory","contextStore","createGetNativeContext","AudioNode","createIsNativeAudioNode","AudioParam","createIsNativeAudioParam","addAudioNodeConnections","auxiliaryGainNodeStore","createIncrementCycleCounter","createInvalidAccessError","createNotSupportedError","decrementCycleCounter","detectCycles","getNativeContext","isNativeAudioNode","isNativeAudioParam","super","_context","_nativeAudioNode","returnValue","connectionsToDestination","connection","destinationOrOutput","apply","clear","filteredConnections","wrapAudioNodeDisconnectMethod","isOffline","auxiliaryGainNodes","nativeGainNode","addConnectionToAudioNodeOfOfflineAudioContext","addConnectionToAudioParamOfOfflineAudioContext","destinations","audioNodeConnectionsOfSource","deleteAnyConnection","deleteConnectionAtOutput","deleteConnectionToDestination","createAudioNodeConstructor","audioNodeConnectionsStore","audioNoderRender","createAddAudioNodeConnections","cycleCounters","disconnectNativeAudioNodeFromNativeAudioNode","getNativeAudioParam","isActiveAudioNode","cycleCounter","nativeDestinationAudioParam","createIncrementCycleCounterFactory","connectNativeAudioNodeToNativeAudioNode","createDecrementCycleCounter","audioParamAudioNodeStore","getValueForKey","chain","nextLink","isDelayNode","mergedCycles","nestedCycles","concat","createDetectCycles","analyserNodeConstructor","audionNodeConstructor","mergedOptions","_nativeAnalyserNode","frequencyBinCount","getByteFrequencyData","getFloatFrequencyData","createAnalyserNodeConstructor","AudioBuffer","createNativeAudioBufferConstructor","convertNumberToUnsignedLong","unit32Array","createConvertNumberToUnsignedLong","channelNumberAsNumber","bufferOffsetAsNumber","audioBufferLength","destinationLength","sourceLength","createWrapAudioBufferCopyChannelMethods","createWrapAudioBufferCopyChannelMethodsOutOfBounds","audioBufferConstructor","audioBufferStore","nativeAudioBufferConstructor","testNativeAudioBufferConstructorSupport","wrapAudioBufferCopyChannelMethods","wrapAudioBufferCopyChannelMethodsOutOfBounds","hasInstance","createAudioBufferConstructor","createTestAudioBufferConstructorSupport","nativeAudioBufferSourceNode","createOscillator","createTestAudioScheduledSourceNodeStartMethodNegativeParametersSupport","createTestAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport","createTestAudioScheduledSourceNodeStopMethodNegativeParametersSupport","disconnectGainNode","isStopped","setValueAtTime","createWrapAudioScheduledSourceNodeStopMethodConsecutiveCalls","renderInputsOfAudioParam","audioParamConnections","createRenderInputsOfAudioParam","createConnectAudioParam","testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport","testAudioBufferSourceNodeStartMethodDurationParameterSupport","testAudioBufferSourceNodeStartMethodOffsetClampingSupport","testAudioBufferSourceNodeStopMethodNullifiedBufferSupport","testAudioScheduledSourceNodeStartMethodNegativeParametersSupport","testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport","testAudioScheduledSourceNodeStopMethodNegativeParametersSupport","wrapAudioBufferSourceNodeStartMethodOffsetClampling","wrapAudioBufferSourceNodeStopMethodNullifiedBuffer","wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls","isScheduled","wrapAudioBufferSourceNodeStartMethodConsecutiveCalls","Number","POSITIVE_INFINITY","stopTime","actualStartTime","currentTime","durationInBufferTime","wrapAudioBufferSourceNodeStartMethodDurationParameter","createNativeAudioBufferSourceNodeFactory","createTestAudioBufferSourceNodeStartMethodConsecutiveCallsSupport","offlineAudioContext","audioBufferSourceNode","oncomplete","startRendering","createTestAudioBufferSourceNodeStartMethodDurationParameterSupport","createTestAudioBufferSourceNodeStartMethodOffsetClampingSupport","createTestAudioBufferSourceNodeStopMethodNullifiedBufferSupport","clampedOffset","overwriteAccessors","nullifiedBuffer","createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer","getAudioParamRenderer","replay","createRenderAutomation","createGetAudioParamRenderer","connectAudioParam","createNativeAudioBufferSourceNode","renderAutomation","renderedNativeAudioBufferSourceNodes","renderedNativeAudioBufferSourceNode","nativeAudioBufferSourceNodeIsOwnedByContext","createAudioBufferSourceNode","createAudioBufferSourceNodeRendererFactory","addAudioParamConnections","audioParamStore","createAudioParamRenderer","isAudioParamOfOfflineAudioContext","maxValue","minValue","automationEventList","audioParamRenderer","cancelAndHoldAtTime","flush","previousLastEvent","pop","currentLastEvent","cancelScheduledValues","exponentialRampToValueAtTime","linearRampToValueAtTime","setValueCurveAtTime","setTargetAtTime","firstSample","lastSample","numberOfInterpolatedValues","interpolatedValues","timeOfLastSample","createAudioParamFactory","audioParamConnectionsStore","createAddAudioParamConnections","audioBufferSourceNodeConstructor","audioNodeConstructor","createAudioBufferSourceNodeRenderer","createAudioParam","createInvalidStateError","audioBufferSourceNodeRenderer","_audioBufferSourceNodeRenderer","_isBufferNullified","_isBufferSet","_nativeAudioBufferSourceNode","_onended","_playbackRate","fill","wrappedListener","onended","nativeOnEnded","resetInternalStateToPassive","setTimeout","createAudioBufferSourceNodeConstructor","createNativeGainNodeFactory","createAudioDestinationNodeRenderer","createNativeAudioDestinationNode","nativeAudioDestinationNode","_isNodeOfNativeOfflineAudioContext","_nativeAudioDestinationNode","maxChannelCount","createAudioDestinationNodeConstructor","nativeAudioDestinationNodePromise","createAudioDestinationNode","createNativeGainNode","isNodeOfNativeOfflineAudioContext","gainNode","createNativeAudioDestinationNodeFactory","nativeBiquadFilterNode","createBiquadFilter","createNativeBiquadFilterNodeFactory","biquadFilterNodeConstructor","createBiquadFilterNodeRenderer","createNativeBiquadFilterNode","_Q","_detune","_frequency","_gain","log10","_nativeBiquadFilterNode","frequencyHz","magResponse","phaseResponse","getFrequencyResponse","createBiquadFilterNodeConstructor","renderedNativeBiquadFilterNodes","renderedNativeBiquadFilterNode","nativeBiquadFilterNodeIsOwnedByContext","createBiquadFilterNode","createBiquadFilterNodeRendererFactory","whenConnected","whenDisconnected","wasDisconnected","wasConnected","isDisconnected","createMonitorConnections","monitorConnectionsFunction","channelMergerNode","createWrapChannelMergerNode","wrapChannelMergerNode","nativeChannelMergerNode","createChannelMerger","createNativeChannelMergerNodeFactory","channelMergerNodeConstructor","createChannelMergerNodeRenderer","createNativeChannelMergerNode","createChannelMergerNodeConstructor","renderedNativeAudioNodes","createAudioNode","createChannelMergerNodeRendererFactory","nativeChannelSplitterNode","createChannelSplitter","channelSplitterNode","wrapChannelSplitterNode","createNativeChannelSplitterNodeFactory","channelSplitterNodeConstructor","createChannelSplitterNodeRenderer","createNativeChannelSplitterNode","createChannelSplitterNodeConstructor","createChannelSplitterNodeRendererFactory","monitorConnections","audioNodeOptions","args","createNativeConstantSourceNodeFakerFactory","createNativeConstantSourceNodeFaker","createConstantSource","nativeConstantSourceNode","createNativeConstantSourceNodeFactory","constantSourceNodeConstructor","createConstantSourceNodeRendererFactory","createNativeConstantSourceNode","constantSourceNodeRenderer","_constantSourceNodeRenderer","_nativeConstantSourceNode","_offset","createConstantSourceNodeConstructor","renderedNativeConstantSourceNodes","renderedNativeConstantSourceNode","nativeConstantSourceNodeIsOwnedByContext","createConstantSourceNode","convolverNode","createConvolver","nativeConvolverNodeFaker","normalize","createNativeConvolverNodeFakerFactory","createNativeConvolverNodeFaker","nativeConvolverNode","createNativeConvolverNodeFactory","convolverNodeConstructor","createConvolverNodeRenderer","createNativeConvolverNode","_nativeConvolverNode","createConvolverNodeConstructor","renderedNativeConvolverNodes","renderedNativeConvolverNode","createConvolverNode","createConvolverNodeRendererFactory","nativeDelayNode","createDelay","createNativeDelayNodeFactory","delayNodeConstructor","createDelayNodeRenderer","createNativeDelayNode","_delayTime","createDelayNodeConstructor","renderedNativeDelayNodes","renderedNativeDelayNode","nativeDelayNodeIsOwnedByContext","createDelayNode","createDelayNodeRendererFactory","nativeDynamicsCompressorNode","createDynamicsCompressor","createNativeDynamicsCompressorNodeFactory","dynamicsCompressorNodeConstructor","createDynamicsCompressorNodeRenderer","createNativeDynamicsCompressorNode","_attack","_knee","_nativeDynamicsCompressorNode","_ratio","_release","_threshold","previousChannelCount","reduction","createDynamicsCompressorNodeConstructor","renderedNativeDynamicsCompressorNodes","renderedNativeDynamicsCompressorNode","nativeDynamicsCompressorNodeIsOwnedByContext","createDynamicsCompressorNode","createDynamicsCompressorNodeRendererFactory","createGainNodeRenderer","createGainNodeConstructor","renderedNativeGainNodes","renderedNativeGainNode","nativeGainNodeIsOwnedByContext","createGainNode","createGainNodeRendererFactory","bufferSize","createNativeScriptProcessorNodeFactory","createNativeScriptProcessorNode","scriptProcessorNode","bufferIndexes","xBuffers","yBuffers","outputBuffer","nyquist","omega","PI","cos","sin","response","sqrt","atan2","createNativeIIRFilterNodeFakerFactory","testOfflineAudioContextCurrentTimeSupport","isOfflineAudioContextCurrentTimeSupported","createRenderNativeOfflineAudioContext","createTestOfflineAudioContextCurrentTimeSupport","renderNativeOfflineAudioContext","filteredBufferPromise","nativeIIRFilterNode","nativeIIRFilterNodeIsOwnedByContext","createIIRFilter","partialOfflineAudioContext","filteredBuffer","filterFullBuffer","createIIRFilterNodeRendererFactory","iIRFilterNodeConstructor","createNativeIIRFilterNode","createIIRFilterNodeRenderer","wrapIIRFilterNodeGetFrequencyResponseMethod","_nativeIIRFilterNode","createIIRFilterNodeConstructor","createNativeIIRFilterNodeFaker","createNativeIIRFilterNodeFactory","audioDestinationNodeConstructor","createAudioListener","_nativeContext","_destination","_listener","_onstatechange","onstatechange","nativeOnStateChange","createMinimalBaseAudioContextConstructor","nativeListener","forwardX","forwardY","forwardZ","upX","upY","upZ","createFakeAudioParam","constantSourceNode","lastOrientation","lastPosition","orientation","setOrientation","positon","setPosition","createFakeAudioParams","createAudioListenerFactory","nativeOscillatorNode","periodicWave","setPeriodicWave","createNativeOscillatorNodeFactory","createNativeOscillatorNode","renderedNativeOscillatorNodes","renderedNativeOscillatorNode","nativeOscillatorNodeIsOwnedByContext","createOscillatorNode","createOscillatorNodeRendererFactory","oscillatorNodeConstructor","createOscillatorNodeRenderer","oscillatorNodeRenderer","_nativeOscillatorNode","_oscillatorNodeRenderer","createOscillatorNodeConstructor","createConnectedNativeAudioBufferSourceNodeFactory","createConnectedNativeAudioBufferSourceNode","isDCCurve","negativeWaveShaperNode","createWaveShaper","positiveWaveShaperNode","inputGainNode","invertGainNode","outputGainNode","revertGainNode","disconnectNativeAudioBufferSourceNode","isConnected","unmodifiedCurve","nativeWaveShaperNodeFaker","curveLength","negativeCurve","positiveCurve","centerIndex","createNativeWaveShaperNodeFakerFactory","createNativeWaveShaperNodeFaker","nativeWaveShaperNode","createNativeWaveShaperNodeFactory","createNativeWaveShaperNode","pannerNode","createPanner","SINGLE_CHANNEL_OPTIONS","orientationXGainNode","orientationYGainNode","orientationZGainNode","positionXGainNode","positionYGainNode","positionZGainNode","waveShaperNode","nativePannerNodeFaker","createNativePannerNodeFakerFactory","createNativePannerNodeFaker","nativePannerNode","createNativePannerNodeFactory","pannerNodeConstructor","createNativePannerNode","createPannerNodeRenderer","_nativePannerNode","_orientationX","_orientationY","_orientationZ","_positionX","_positionY","_positionZ","createPannerNodeConstructor","renderedNativePannerNodes","renderedNativePannerNode","nativePannerNodeIsOwnedByContext","createPannerNode","createPannerNodeRendererFactory","periodicWaveConstructor","createNativePeriodicWave","periodicWaveStore","PeriodicWave","createPeriodicWaveConstructor","imag","real","wrappedImag","wrappedReal","createPeriodicWave","createNativePeriodicWaveFactory","DC_CURVE","HALF_PI","SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS","buildInternalGraph","panGainNode","leftWaveShaperCurve","rightWaveShaperCurve","leftGainNode","leftWaveShaperNode","panWaveShaperNode","rightGainNode","rightWaveShaperNode","buildInternalGraphForMono","leftInputForLeftOutputWaveShaperCurve","leftInputForRightOutputWaveShaperCurve","rightInputForLeftOutputWaveShaperCurve","rightInputForRightOutputWaveShaperCurve","CURVE_SIZE","leftInputForLeftOutputGainNode","leftInputForLeftOutputWaveShaperNode","leftInputForRightOutputGainNode","leftInputForRightOutputWaveShaperNode","rightInputForLeftOutputGainNode","rightInputForLeftOutputWaveShaperNode","rightInputForRightOutputGainNode","rightInputForRightOutputWaveShaperNode","buildInternalGraphForStereo","connectGraph","disconnectGraph","nativeStereoPannerNodeFakerFactory","createNativeStereoPannerNodeFakerFactory","createNativeStereoPannerNodeFaker","createStereoPanner","nativeStereoPannerNode","createNativeStereoPannerNodeFactory","stereoPannerNodeConstructor","createNativeStereoPannerNode","createStereoPannerNodeRenderer","_pan","createStereoPannerNodeConstructor","renderedNativeStereoPannerNodes","renderedNativeStereoPannerNode","nativeStereoPannerNodeIsOwnedByContext","createStereoPannerNode","createStereoPannerNodeRendererFactory","createWaveShaperNodeRenderer","renderedNativeWaveShaperNodes","renderedNativeWaveShaperNode","createWaveShaperNode","createWaveShaperNodeRendererFactory","waveShaperNodeConstructor","_isCurveNullified","_nativeWaveShaperNode","createWaveShaperNodeConstructor","isSecureContext","createIsSecureContext","fn","currentFrame","createExposeCurrentFrameAndCurrentTime","addAudioWorkletModule","createAbortError","evaluateSource","fetchSource","ongoingRequests","resolvedRequests","moduleURL","credentials","absoluteUrl","location","href","audioWorklet","blob","Blob","createObjectURL","addModule","revokeObjectURL","resolvedRequestsOfContext","ongoingRequestsOfContext","promiseOfOngoingRequest","evaluateAudioWorkletGlobalScope","_AWGS","SyntaxError","trim","nodeNameToProcessorConstructorMap","rslvdRqstsFCntxt","ngngRqstsFCntxt","createAddAudioWorkletModule","head","document","script","createElement","originalOnErrorHandler","onerror","removeErrorEventListenerAndRevokeUrl","message","src","lineno","colno","onload","appendChild","createEvaluateSource","fetch","ok","text","createFetchSource","isNativeAudioContext","createIsNativeAudioContext","createIsNativeContext","gainNodeConstructor","minimalBaseAudioContextConstructor","_audioWorklet","constraints","audioData","successCallback","errorCallback","createBaseAudioContextConstructor","createDataCloneError","createEncodingError","detachedArrayBuffers","isNativeContext","testAudioBufferCopyChannelMethodsOutOfBoundsSupport","testPromiseSupport","anyContext","complete","arrayBuffer","detachArrayBuffer","fail","createDecodeAudioData","createNativeMediaElementAudioSourceNode","nativeMediaElementAudioSourceNode","_mediaElement","mediaElement","_nativeMediaElementAudioSourceNode","createMediaElementAudioSourceNodeConstructor","ntvDCntxt","createMediaElementSource","createNativeMediaElementAudioSourceNodeFactory","createNativeMediaStreamAudioSourceNode","nativeMediaStreamAudioSourceNode","_nativeMediaStreamAudioSourceNode","mediaStream","createMediaStreamAudioSourceNodeConstructor","audioStreamTracks","getAudioTracks","filteredAudioStreamTracks","sort","id","createMediaStreamSource","MediaStream","createNativeMediaStreamAudioSourceNodeFactory","createNativeMediaStreamTrackAudioSourceNode","createMediaStreamTrackAudioSourceNodeConstructor","mediaStreamTrack","createMediaStreamTrackSource","kind","createNativeMediaStreamTrackAudioSourceNodeFactory","audioContextConstructor","baseAudioContextConstructor","createUnknownError","mediaElementAudioSourceNodeConstructor","mediaStreamAudioSourceNodeConstructor","mediaStreamTrackAudioSourceNodeConstructor","_baseLatency","_nativeAudioContext","_state","revokeState","resolvePromise","resume","suspend","createAudioContextConstructor","createConnectMultipleOutputs","createDisconnectMultipleOutputs","connectMultipleOutputs","disconnectMultipleOutputs","numberOfParameters","messageChannel","gainNodes","inputChannelSplitterNodes","constantSourceNodes","inputChannelMergerNode","outputChannelSplitterNode","outputChannelMergerNodes","parameterMap","onprocessorerror","nativeAudioWorkletNodeFaker","_","patchedEventListeners","unpatchedEventListener","handleEvent","patchedEventListener","port","audioWorkletProcessorPromise","createAudioWorkletProcessor","dWrkltPrcssr","disconnectOutputsGraph","outputChannelMergerNode","createNativeAudioWorkletNodeFakerFactory","createNativeAudioWorkletNodeFaker","nativeAudioWorkletNodeConstructor","hasNoOutput","testClonabilityOfAudioWorkletNodeOptions","createNativeAudioWorkletNodeFactory","AudioWorkletNode","createNativeAudioWorkletNodeConstructor","processedBufferPromise","renderedNativeAudioWorkletNodeOrGainNode","nativeOutputNodes","nativeAudioWorkletNodeIsOwnedByContext","renderBuffer","nm","createAudioWorkletNodeRendererFactory","audioWorkletNodeConstructor","createAudioWorkletNodeRenderer","createNativeAudioWorkletNode","_nativeAudioWorkletNode","_numberOfOutputs","_onprocessorerror","_parameters","nativeOnProcessorError","createAudioWorkletNodeConstructor","createMinimalAudioContextConstructor","createCreateNativeOfflineAudioContext","createStartRendering","offlineAudioContextConstructor","createNativeOfflineAudioContext","delayStateChangeEvent","stopImmediatePropagation","_waitForThePromiseToSettle","_length","_nativeOfflineAudioContext","createMinimalOfflineAudioContextConstructor","createOfflineAudioContextConstructor","isAnyAudioContext","createIsAnyAudioContext","isAnyAudioNode","audioNodeStore","createIsAnyAudioNode","isAnyAudioParam","createIsAnyAudioParam","isAnyOfflineAudioContext","createIsAnyOfflineAudioContext","extendStatics","setPrototypeOf","__proto__","__extends","__","constructor","__awaiter","_arguments","P","generator","fulfilled","step","e","rejected","__generator","body","f","g","label","sent","trys","ops","verb","v","op","__values","__read","ar","__spread","arguments","assert","statement","assertRange","gte","lte","assertContextRunning","warn","defaultLogger","console","setLogger","logger","log","isUndef","arg","isDefined","isFunction","isNumber","isObject","isBoolean","isString","isNote","theWindow","hasAudioContext","updateInterval","_callback","_type","_updateInterval","_createClock","_createWorker","toFixed","blobUrl","worker","Worker","_worker","_createTimeout","_timeout","_disposeClock","clearTimeout","terminate","interval","dispose","isAudioParam","isOfflineAudioContext","isAudioContext","isAudioBuffer","noCopy","deepMerge","sources","shift","assign","optionsFromArguments","defaults","argsArray","objKey","opts","Reflect","indexOf","defaultArg","given","fallback","omitFromObject","obj","omit","prop","debug","_wasDisposed","getDefaults","TONE_DEBUG_CLASS","version","EPSILON","GT","GTE","EQ","LT","abs","_timeline","Timeline","memory","increasing","Infinity","valueOf","lastValue","_search","diff","remove","param","peek","getAfter","getBefore","len","cancel","after","cancelBefore","previousEvent","beginning","end","midPoint","nextEvent","_iterate","lowerBound","upperBound","forEachBefore","forEachAfter","forEachBetween","forEachFrom","forEachAtTime","notifyNewContext","onContextInit","cb","notifyCloseContext","onContextClose","on","split","eventName","_events","once","boundCallback","off","eventList","emit","mixin","constr","Emitter","_constants","_timeouts","_timeoutIds","_initialized","_workletModules","Context","_latencyHint","lookAhead","_ticker","Ticker","clockSource","_timeoutLoop","initialize","ctx","feedForward","stream","_transport","_draw","createAudioWorkletNode","rawContext","workletsAreReady","promises","hint","lookAheadValue","now","immediate","getConstant","val","constant","firstEvent","timeout","clearInterval","setInterval","intervalFn","_numberOfChannels","_sampleRate","_numberOfInputs","_maxDelayTime","_feedForward","_feedback","_real","_imag","_constraints","_stream","_audioData","_name","_options","_url","_fn","_id","_interval","_val","readOnly","str","noOp","ToneAudioBuffer","reverse","load","_buffer","getContext","loaded","_reversed","_reverse","downloads","fromArray","isMultidimensional","channels","multiChannelArray","toMono","chanNum","toArray","outputArray","channelArray","ret","startSamples","endSamples","retBuffer","subarray","rev","fromUrl","matches","extensions","extension","ext","supportsType","baseUrl","endsWith","canPlayType","_currentTime","_duration","_renderClock","asynchronous","yieldEvery","dummyContext","globalContext","setContext","TONE_SILENCE_LOGGING","prefix","printString","dbToGain","db","gainToDb","LN10","intervalToFrequencyRatio","A4","ftom","ftomf","mtof","midi","_getExpressions","method","capture","_now","regexp","quantize","quantTo","TimeClass","_secondsToUnits","transport","nextSubdivision","subdiv","percent","subdivision","toNotation","toSeconds","testNotations","power","closest","closestSeconds","notation","notationSeconds","toBarsBeatsSixteenths","quarterTime","_beatsToUnits","quarters","parseFloat","measures","_getTimeSignature","sixteenths","sixteenthString","toTicks","_getPPQ","toMidi","toFrequency","units","defaultUnits","_units","_expressions","hz","_frequencyToUnits","_ticksToUnits","parseInt","dot","numericValue","scalar","number","samples","tr","q","total","TimeBaseClass","fromType","_noArg","typeName","quantity","expr","matching","freq","beats","_getBpm","seconds","ticks","bpm","timeSignature","PPQ","toSamples","toMilliseconds","Time","setA4","FrequencyClass","note","pitch","octave","noteNumber","noteToScaleIndex","toLowerCase","transpose","harmonize","intervals","toNote","scaleIndexToNote","cbb","cx","dbb","dx","ebb","eb","ex","fbb","fb","fx","gbb","gb","gx","abb","ab","ax","bbb","bb","bx","Frequency","TransportTime","ToneWithContext","defaultContext","_getPartialProperties","attribute","member","initial","_initial","getValueAtTime","setStateAtTime","getLastState","getNextState","Param","overridden","_minOutput","_param","_swappable","swappable","_initialValue","convert","_minValue","_maxValue","_toType","_fromType","_is","computedTime","isFinite","JSON","stringify","before","beforeValue","previous","_linearInterpolate","_exponentialInterpolate","previousVal","_exponentialApproach","setRampPoint","currentVal","exponentialRampTo","rampTime","linearRampTo","targetRampTo","exponentialApproachValueAtTime","scaling","startingValue","segTime","valueAtTime","sampleTime","rampTo","subdivisions","setParam","t0","v0","v1","t1","_internalChannels","_isAudioNode","node","ToneAudioNode","_getInternalNodes","nodeList","_setChannelProperties","_getChannelProperties","outputNum","inputNum","toDestination","toMaster","connectSeries","nodes","fan","first","prev","current","srcNode","dstNode","outputNumber","inputNumber","Gain","_gainNode","_stopTime","getStateAtTime","_fadeIn","fadeIn","_fadeOut","fadeOut","_curve","_startGain","fadeInTime","_stopGain","cancelStop","fadeOutTime","additionalTail","_stopSource","ToneConstantSource","_source","Signal","override","_constantSource","connectSignal","signal","TickParam","_multiplier","multiplier","computedValue","prevEvent","segments","rampVal","ticksUntilTime","_getTicksUntilEvent","computedVal","segmentDur","val0","val1","onTheLineEvent","getTicksAtTime","getDurationOfTicks","currentTick","getTimeOfTick","tick","delta","sol1","ticksToTime","timeToTicks","computedDuration","startTicks","TickSignal","TickSource","_tickOffset","setTicksAtTime","pause","stopEvent","tmpEvent","lastState","elapsedTicks","periodStartTime","offsetEvent","getSecondsAtTime","elapsedSeconds","absoluteTicks","forEachTickBetween","lastStateEvent","maxStartTime","nextTickTime","Clock","_lastUpdate","_boundLoop","_loop","_tickSource","initialValue","Ticks","_root","IntervalNode","insert","updateHeight","updateMax","_rebalance","results","search","_removeNode","_setRoot","_replaceNodeInParent","replacement","isLeftChild","left","right","temp","getBalance","_rotateLeft","pivotNode","_rotateRight","balance","low","traverse","searchAfter","high","_left","_right","height","point","TransportEvent","_eventId","_once","invoke","_currentId","_nextId","_nextTick","_boundRestart","_restart","TransportRepeatEvent","_createEvents","scheduleOnce","Transport","_loopStart","_loopEnd","_scheduledEvents","_repeatedEvents","_syncedSignals","_swingAmount","_ppq","ppq","_clock","_processTick","_bindClockEvents","_timeSignature","_swingTicks","swing","swingSubdivision","tickTime","progress","amount","schedule","_addEvent","scheduleRepeat","eventId","item","timeline","computedAfter","offsetTicks","toggle","timeSig","startPosition","endPosition","setLoopPoints","remainingTicks","syncSignal","computedFreq","ratioSignal","unsyncSignal","syncedSignal","Delay","maxDelayInSeconds","maxDelay","_delayNode","Volume","volume","_unmutedVolume","mute","Destination","Offline","originalContext","bufferPromise","_buffers","_loadingCount","ToneAudioBuffers","urls","_bufferLoaded","MidiClass","Midi","expiration","anticipation","_boundDrawLoop","_drawLoop","_animationFrame","requestAnimationFrame","cancelAnimationFrame","draw","_synced","_scheduled","_syncedStart","_syncedStop","_volume","onstop","_clampToCurrentTime","restart","sched","_start","_stop","sync","stateEvent","startOffset","unsync","ToneBufferSource","_sourceStarted","_sourceStopped","computedOffset","loopDuration","computedDur","Noise","_noiseBuffers","rate","random","_noiseCache","brown","pink","white","channelNum","lastOut","b0","b1","b2","b3","b4","b5","b6","Analyser","_analyser","smoothing","MeterBase","Meter","_rms","getLevel","totalSquared","rms","FFT","normalRange","DCMeter","Waveform","OnePoleFilter","_createFilter","oldFilter","_filter","a0","disposed","blockTime","fq","freqValues","magValues","phaseValues","SignalOperator","WaveShaper","_shaper","mapping","setMap","normalized","oversampling","isOverSampleType","_abs","Follower","_lowpass","_smoothing","Solo","_allSolos","solo","_isSoloed","_addSolo","_removeSolo","_updateSolo","_soloed","_noSolos","Panner","_panner","PanVol","Channel","_solo","_panVol","muted","_getBus","buses","send","bus","sendKnob","receive","_norm","CrossFade","_split","_g2a","fade","Merge","_merger","Add","_sum","addend","Multiply","_mult","factor","_multiply","Subtract","_neg","subtrahend","MidSideMerge","mid","side","_leftMult","SQRT1_2","_rightMult","_merge","Split","_splitter","MidSideSplit","_midAdd","_sideSubtract","Filter","_filters","rolloff","_rolloff","rolloffNum","possibilities","cascadingCount","totalResponse","filterClone","MultibandSplit","_lowMidFilter","lowFrequency","highFrequency","Compressor","_compressor","GreaterThanZero","_thresh","_scale","GreaterThan","_subtract","_gtz","comparator","Gate","_follower","_gt","_gate","thresh","smoothingTime","Limiter","MidSideCompressor","_midSideSplit","_midSideMerge","MultibandCompressor","Envelope","_sig","decay","sustain","attackCurve","releaseCurve","decayCurve","_decay","_sustain","_getCurve","direction","curveName","EnvelopeCurves","_setCurve","curveDef","_attackCurve","_releaseCurve","_decayCurve","triggerAttack","velocity","currentValue","decayValue","decayStart","triggerRelease","triggerAttackRelease","asArray","attackPortion","envelopeDuration","totalDuration","sustainTime","clone","cosineCurve","rippleCurve","curveLen","sineWave","stairsCurve","sineCurve","bounceCurve","invertCurve","out","bounce","In","Out","cosine","exponential","linear","ripple","sine","AmplitudeEnvelope","Scale","_add","_min","_max","_setRange","Pow","_exponentScaler","_expFunc","_exponent","exponent","FrequencyEnvelope","_octaves","octaves","_baseFrequency","baseFrequency","EQ3","_multibandSplit","_lowGain","_midGain","_highGain","workletOptions","_audioWorkletName","_worklet","onReady","FeedbackCombFilter","dummyGain","resonance","LowpassCombFilter","_combFilter","dampening","Convolver","_convolver","buff","norm","UserMedia","open","labelOrId","supported","enumerateDevices","devices","_device","find","device","deviceId","audio","echoCancellation","noiseSuppression","mozNoiseSuppression","navigator","mediaDevices","getUserMedia","mediaStreamNode","_mediaStream","track","active","groupId","generateWaveform","ToneOscillatorNode","_oscillator","Oscillator","_partials","partials","_partialCount","partialCount","baseType","phase","oscillator","_wave","syncFrequency","unsyncFrequency","_getCachedPeriodicWave","oscProps","_periodicWaveCache","description","_phase","arrayA","arrayB","isBasicType","cache","wave","partial","exec","_getRealImaginary","periodicWaveSize","piFactor","_inverseFFT","getInitialValue","twoPi","AMOscillator","_modulationScale","_modulationNode","_carrier","_modulator","modulationType","harmonicity","FMOscillator","modulationIndex","PulseOscillator","_widthGate","width","_sawtooth","FatOscillator","_oscillators","_spread","spread","_forEach","osc","PWMOscillator","sourceType","_pulse","modulationFrequency","OmniOscillatorSourceMap","am","fat","fm","pulse","pwm","OmniOscillator","_sourceType","substr","_createNewOscillator","_getOscType","oscType","OscConstructor","sType","mType","Zero","LFO","_stoppedValue","_amplitudeGain","amplitude","_stoppedSignal","_zeros","_a2g","_scaler","currentMin","currentMax","Player","_activeSources","_onload","autostart","_onSourceEnd","origDuration","implicitEnd","seek","Players","_players","player","stopAll","GrainPlayer","_tick","grainSize","_grainSize","_overlap","overlap","_onstop","ScaleExp","_exp","_lastVal","_onTick","_syncedCallback","_anchorValue","Instrument","_original_triggerAttack","_original_triggerRelease","_syncMethod","timePosition","originalMethod","Monophonic","portamento","onsilence","_triggerEnvelopeAttack","setNote","_triggerEnvelopeRelease","computedFrequency","getLevelAtTime","portTime","Synth","envelope","computedAttack","computedDecay","ModulationSynth","modulation","modulationEnvelope","AMSynth","MonoSynth","filterEnvelope","DuoSynth","voice0","voice1","_vibrato","vibratoRate","_vibratoGain","vibratoAmount","FMSynth","inharmRatios","MetalSynth","_freqMultipliers","_amplitude","_highpass","mult","_filterFreqScaler","freqMult","MembraneSynth","pitchDecay","hertz","maxNote","NoiseSynth","noise","PluckSynth","_noise","attackNoise","_lfcf","delayAmount","PolySynth","_availableVoices","_activeVoices","_voices","_gcTimeout","_averageActiveVoices","voice","maxPolyphony","_dummyVoice","_getNextAvailableVoice","_collectGarbage","_makeVoiceAvailable","activeVoiceIndex","activeVoices","firstAvail","_triggerAttack","notes","midiNote","released","_triggerRelease","_scheduleEvent","durationSeconds","sanitizedOptions","releaseAll","Sampler","urlMap","_findClosest","difference","closestNote","ToneEvent","_startOffset","_probability","probability","_humanize","humanize","_rescheduleEvents","startTick","_getLoopDuration","prob","variation","reschedulTime","lastEvent","Loop","_event","iterations","iters","Part","events","_startNote","at","timeInTicks","_restartEvent","_setAll","attr","_testLoopBoundries","upPatternGen","clamp","downPatternGen","infiniteGen","gen","alternatingGenerator","directionUp","jumpUp","stepIndex","jumpDown","randomGen","randomIndex","randomOnce","copy","randVal","PatternGenerator","pattern","Pattern","_values","_pattern","Sequence","_part","_seqCallback","_eventsArray","_subdivision","_createSequence","_eventsUpdated","_indexTime","_rescheduleSequence","sequence","eventOffset","_dryWet","wet","effectSend","effectReturn","connectEffect","effect","_lfo","depth","AutoFilter","oct","AutoPanner","AutoWah","follower","_sweepRange","_inputBoost","_bandpass","_peaking","_setSweepRange","sensitivity","baseFreq","BitCrusher","_bitCrusherWorklet","bits","frequencyReduction","BitCrusherWorklet","Chebyshev","_order","order","_getCoefficient","degree","memo","connectEffectLeft","connectEffectRight","_feedbackL","_feedbackR","_feedbackSplit","_feedbackMerge","Chorus","_depth","_lfoL","_lfoR","_delayNodeL","_delayNodeR","deviation","Distortion","_distortion","distortion","deg","_feedbackGain","FeedbackDelay","offset90","_bank0","_createAllPassFilterBank","_bank1","_oneSampleDelay","bankValues","coefficients","FrequencyShifter","_sine","_cosine","_sineMultiply","_cosineMultiply","_negate","_phaseShifter","combFilterTunings","allpassFilterFrequencies","Freeverb","_combFilters","_allpassFiltersL","_allpassFiltersR","roomSize","allpassL","allpassR","lfpf","al","cf","combFilterDelayTimes","combFilterResonances","allpassFilterFreqs","JCReverb","_allpassFilters","_feedbackCombFilters","_scaleRoomSize","allpass","fbcf","apf","PingPongDelay","_leftDelay","_rightDelay","_rightPreDelay","PitchShift","_delayA","_lfoA","_delayB","_lfoB","_crossFade","_crossFadeLFO","_feedbackDelay","_pitch","_windowSize","windowSize","Phaser","_filtersL","_makeFilters","stages","_filtersR","connectToFreq","filters","Reverb","preDelay","generate","noiseL","noiseR","merge","_midSend","_sideSend","_midReturn","_sideReturn","connectEffectMid","connectEffectSide","StereoWidener","_twoTimesWidthMid","_twoTimesWidthSide","_midMult","_oneMinusWidth","_sideMult","Tremolo","_amplitudeL","_amplitudeR","Vibrato"],"mappings":"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","file":"Tone.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Tone\"] = factory();\n\telse\n\t\troot[\"Tone\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 8);\n","(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@babel/runtime/helpers/slicedToArray'), require('@babel/runtime/helpers/classCallCheck'), require('@babel/runtime/helpers/createClass')) :\n    typeof define === 'function' && define.amd ? define(['exports', '@babel/runtime/helpers/slicedToArray', '@babel/runtime/helpers/classCallCheck', '@babel/runtime/helpers/createClass'], factory) :\n    (global = global || self, factory(global.automationEvents = {}, global._slicedToArray, global._classCallCheck, global._createClass));\n}(this, (function (exports, _slicedToArray, _classCallCheck, _createClass) { 'use strict';\n\n    _slicedToArray = _slicedToArray && _slicedToArray.hasOwnProperty('default') ? _slicedToArray['default'] : _slicedToArray;\n    _classCallCheck = _classCallCheck && _classCallCheck.hasOwnProperty('default') ? _classCallCheck['default'] : _classCallCheck;\n    _createClass = _createClass && _createClass.hasOwnProperty('default') ? _createClass['default'] : _createClass;\n\n    var createExtendedExponentialRampToValueAutomationEvent = function createExtendedExponentialRampToValueAutomationEvent(value, endTime, insertTime) {\n      return {\n        endTime: endTime,\n        insertTime: insertTime,\n        type: 'exponentialRampToValue',\n        value: value\n      };\n    };\n\n    var createExtendedLinearRampToValueAutomationEvent = function createExtendedLinearRampToValueAutomationEvent(value, endTime, insertTime) {\n      return {\n        endTime: endTime,\n        insertTime: insertTime,\n        type: 'linearRampToValue',\n        value: value\n      };\n    };\n\n    var createSetValueAutomationEvent = function createSetValueAutomationEvent(value, startTime) {\n      return {\n        startTime: startTime,\n        type: 'setValue',\n        value: value\n      };\n    };\n\n    var createSetValueCurveAutomationEvent = function createSetValueCurveAutomationEvent(values, startTime, duration) {\n      return {\n        duration: duration,\n        startTime: startTime,\n        type: 'setValueCurve',\n        values: values\n      };\n    };\n\n    var getTargetValueAtTime = function getTargetValueAtTime(time, valueAtStartTime, _ref) {\n      var startTime = _ref.startTime,\n          target = _ref.target,\n          timeConstant = _ref.timeConstant;\n      return target + (valueAtStartTime - target) * Math.exp((startTime - time) / timeConstant);\n    };\n\n    var isExponentialRampToValueAutomationEvent = function isExponentialRampToValueAutomationEvent(automationEvent) {\n      return automationEvent.type === 'exponentialRampToValue';\n    };\n\n    var isLinearRampToValueAutomationEvent = function isLinearRampToValueAutomationEvent(automationEvent) {\n      return automationEvent.type === 'linearRampToValue';\n    };\n\n    var isAnyRampToValueAutomationEvent = function isAnyRampToValueAutomationEvent(automationEvent) {\n      return isExponentialRampToValueAutomationEvent(automationEvent) || isLinearRampToValueAutomationEvent(automationEvent);\n    };\n\n    var isSetValueAutomationEvent = function isSetValueAutomationEvent(automationEvent) {\n      return automationEvent.type === 'setValue';\n    };\n\n    var isSetValueCurveAutomationEvent = function isSetValueCurveAutomationEvent(automationEvent) {\n      return automationEvent.type === 'setValueCurve';\n    };\n\n    var getValueOfAutomationEventAtIndexAtTime = function getValueOfAutomationEventAtIndexAtTime(automationEvents, index, time, defaultValue) {\n      var automationEvent = automationEvents[index];\n      return automationEvent === undefined ? defaultValue : isAnyRampToValueAutomationEvent(automationEvent) || isSetValueAutomationEvent(automationEvent) ? automationEvent.value : isSetValueCurveAutomationEvent(automationEvent) ? automationEvent.values[automationEvent.values.length - 1] : getTargetValueAtTime(time, getValueOfAutomationEventAtIndexAtTime(automationEvents, index - 1, automationEvent.startTime, defaultValue), automationEvent);\n    };\n\n    var getEndTimeAndValueOfPreviousAutomationEvent = function getEndTimeAndValueOfPreviousAutomationEvent(automationEvents, index, currentAutomationEvent, nextAutomationEvent, defaultValue) {\n      return currentAutomationEvent === undefined ? [nextAutomationEvent.insertTime, defaultValue] : isAnyRampToValueAutomationEvent(currentAutomationEvent) ? [currentAutomationEvent.endTime, currentAutomationEvent.value] : isSetValueAutomationEvent(currentAutomationEvent) ? [currentAutomationEvent.startTime, currentAutomationEvent.value] : isSetValueCurveAutomationEvent(currentAutomationEvent) ? [currentAutomationEvent.startTime + currentAutomationEvent.duration, currentAutomationEvent.values[currentAutomationEvent.values.length - 1]] : [currentAutomationEvent.startTime, getValueOfAutomationEventAtIndexAtTime(automationEvents, index - 1, currentAutomationEvent.startTime, defaultValue)];\n    };\n\n    var isCancelAndHoldAutomationEvent = function isCancelAndHoldAutomationEvent(automationEvent) {\n      return automationEvent.type === 'cancelAndHold';\n    };\n\n    var isCancelScheduledValuesAutomationEvent = function isCancelScheduledValuesAutomationEvent(automationEvent) {\n      return automationEvent.type === 'cancelScheduledValues';\n    };\n\n    var getEventTime = function getEventTime(automationEvent) {\n      if (isCancelAndHoldAutomationEvent(automationEvent) || isCancelScheduledValuesAutomationEvent(automationEvent)) {\n        return automationEvent.cancelTime;\n      }\n\n      if (isExponentialRampToValueAutomationEvent(automationEvent) || isLinearRampToValueAutomationEvent(automationEvent)) {\n        return automationEvent.endTime;\n      }\n\n      return automationEvent.startTime;\n    };\n\n    var getExponentialRampValueAtTime = function getExponentialRampValueAtTime(time, startTime, valueAtStartTime, _ref) {\n      var endTime = _ref.endTime,\n          value = _ref.value;\n\n      if (valueAtStartTime === value) {\n        return value;\n      }\n\n      if (0 < valueAtStartTime && 0 < value || valueAtStartTime < 0 && value < 0) {\n        return valueAtStartTime * Math.pow(value / valueAtStartTime, (time - startTime) / (endTime - startTime));\n      }\n\n      return 0;\n    };\n\n    var getLinearRampValueAtTime = function getLinearRampValueAtTime(time, startTime, valueAtStartTime, _ref) {\n      var endTime = _ref.endTime,\n          value = _ref.value;\n      return valueAtStartTime + (time - startTime) / (endTime - startTime) * (value - valueAtStartTime);\n    };\n\n    var interpolateValue = function interpolateValue(values, theoreticIndex) {\n      var lowerIndex = Math.floor(theoreticIndex);\n      var upperIndex = Math.ceil(theoreticIndex);\n\n      if (lowerIndex === upperIndex) {\n        return values[lowerIndex];\n      }\n\n      return (1 - (theoreticIndex - lowerIndex)) * values[lowerIndex] + (1 - (upperIndex - theoreticIndex)) * values[upperIndex];\n    };\n\n    var getValueCurveValueAtTime = function getValueCurveValueAtTime(time, _ref) {\n      var duration = _ref.duration,\n          startTime = _ref.startTime,\n          values = _ref.values;\n      var theoreticIndex = (time - startTime) / duration * (values.length - 1);\n      return interpolateValue(values, theoreticIndex);\n    };\n\n    var isSetTargetAutomationEvent = function isSetTargetAutomationEvent(automationEvent) {\n      return automationEvent.type === 'setTarget';\n    };\n\n    var AutomationEventList =\n    /*#__PURE__*/\n    function () {\n      function AutomationEventList(defaultValue) {\n        _classCallCheck(this, AutomationEventList);\n\n        this._automationEvents = [];\n        this._currenTime = 0;\n        this._defaultValue = defaultValue;\n      }\n\n      _createClass(AutomationEventList, [{\n        key: Symbol.iterator,\n        value: function value() {\n          return this._automationEvents[Symbol.iterator]();\n        }\n      }, {\n        key: \"add\",\n        value: function add(automationEvent) {\n          var eventTime = getEventTime(automationEvent);\n\n          if (isCancelAndHoldAutomationEvent(automationEvent) || isCancelScheduledValuesAutomationEvent(automationEvent)) {\n            var index = this._automationEvents.findIndex(function (currentAutomationEvent) {\n              return getEventTime(currentAutomationEvent) >= eventTime;\n            });\n\n            var removedAutomationEvent = this._automationEvents[index];\n\n            if (index !== -1) {\n              this._automationEvents = this._automationEvents.slice(0, index);\n            }\n\n            if (isCancelAndHoldAutomationEvent(automationEvent)) {\n              var lastAutomationEvent = this._automationEvents[this._automationEvents.length - 1];\n\n              if (removedAutomationEvent !== undefined && isAnyRampToValueAutomationEvent(removedAutomationEvent)) {\n                if (isSetTargetAutomationEvent(lastAutomationEvent)) {\n                  throw new Error('The internal list is malformed.');\n                }\n\n                var startTime = isSetValueCurveAutomationEvent(lastAutomationEvent) ? lastAutomationEvent.startTime + lastAutomationEvent.duration : getEventTime(lastAutomationEvent);\n                var startValue = isSetValueCurveAutomationEvent(lastAutomationEvent) ? lastAutomationEvent.values[lastAutomationEvent.values.length - 1] : lastAutomationEvent.value;\n                var value = isExponentialRampToValueAutomationEvent(removedAutomationEvent) ? getExponentialRampValueAtTime(eventTime, startTime, startValue, removedAutomationEvent) : getLinearRampValueAtTime(eventTime, startTime, startValue, removedAutomationEvent);\n                var truncatedAutomationEvent = isExponentialRampToValueAutomationEvent(removedAutomationEvent) ? createExtendedExponentialRampToValueAutomationEvent(value, eventTime, this._currenTime) : createExtendedLinearRampToValueAutomationEvent(value, eventTime, this._currenTime);\n\n                this._automationEvents.push(truncatedAutomationEvent);\n              }\n\n              if (lastAutomationEvent !== undefined && isSetTargetAutomationEvent(lastAutomationEvent)) {\n                this._automationEvents.push(createSetValueAutomationEvent(this.getValue(eventTime), eventTime));\n              }\n\n              if (lastAutomationEvent !== undefined && isSetValueCurveAutomationEvent(lastAutomationEvent) && lastAutomationEvent.startTime + lastAutomationEvent.duration > eventTime) {\n                this._automationEvents[this._automationEvents.length - 1] = createSetValueCurveAutomationEvent(new Float32Array([6, 7]), lastAutomationEvent.startTime, eventTime - lastAutomationEvent.startTime);\n              }\n            }\n          } else {\n            var _index = this._automationEvents.findIndex(function (currentAutomationEvent) {\n              return getEventTime(currentAutomationEvent) > eventTime;\n            });\n\n            var previousAutomationEvent = _index === -1 ? this._automationEvents[this._automationEvents.length - 1] : this._automationEvents[_index - 1];\n\n            if (previousAutomationEvent !== undefined && isSetValueCurveAutomationEvent(previousAutomationEvent) && getEventTime(previousAutomationEvent) + previousAutomationEvent.duration > eventTime) {\n              return false;\n            }\n\n            var persistentAutomationEvent = isExponentialRampToValueAutomationEvent(automationEvent) ? createExtendedExponentialRampToValueAutomationEvent(automationEvent.value, automationEvent.endTime, this._currenTime) : isLinearRampToValueAutomationEvent(automationEvent) ? createExtendedLinearRampToValueAutomationEvent(automationEvent.value, eventTime, this._currenTime) : automationEvent;\n\n            if (_index === -1) {\n              this._automationEvents.push(persistentAutomationEvent);\n            } else {\n              if (isSetValueCurveAutomationEvent(automationEvent) && eventTime + automationEvent.duration > getEventTime(this._automationEvents[_index])) {\n                return false;\n              }\n\n              this._automationEvents.splice(_index, 0, persistentAutomationEvent);\n            }\n          }\n\n          return true;\n        }\n      }, {\n        key: \"flush\",\n        value: function flush(time) {\n          var index = this._automationEvents.findIndex(function (currentAutomationEvent) {\n            return getEventTime(currentAutomationEvent) > time;\n          });\n\n          if (index > 1) {\n            var remainingAutomationEvents = this._automationEvents.slice(index - 1);\n\n            var firstRemainingAutomationEvent = remainingAutomationEvents[0];\n\n            if (isSetTargetAutomationEvent(firstRemainingAutomationEvent)) {\n              remainingAutomationEvents.unshift(createSetValueAutomationEvent(getValueOfAutomationEventAtIndexAtTime(this._automationEvents, index - 2, firstRemainingAutomationEvent.startTime, this._defaultValue), firstRemainingAutomationEvent.startTime));\n            }\n\n            this._automationEvents = remainingAutomationEvents;\n          }\n        }\n      }, {\n        key: \"getValue\",\n        value: function getValue(time) {\n          if (this._automationEvents.length === 0) {\n            return this._defaultValue;\n          }\n\n          var lastAutomationEvent = this._automationEvents[this._automationEvents.length - 1];\n\n          var index = this._automationEvents.findIndex(function (automationEvent) {\n            return getEventTime(automationEvent) > time;\n          });\n\n          var nextAutomationEvent = this._automationEvents[index];\n          var currentAutomationEvent = getEventTime(lastAutomationEvent) <= time ? lastAutomationEvent : this._automationEvents[index - 1];\n\n          if (currentAutomationEvent !== undefined && isSetTargetAutomationEvent(currentAutomationEvent) && (nextAutomationEvent === undefined || !isAnyRampToValueAutomationEvent(nextAutomationEvent) || nextAutomationEvent.insertTime > time)) {\n            return getTargetValueAtTime(time, getValueOfAutomationEventAtIndexAtTime(this._automationEvents, index - 2, currentAutomationEvent.startTime, this._defaultValue), currentAutomationEvent);\n          }\n\n          if (currentAutomationEvent !== undefined && isSetValueAutomationEvent(currentAutomationEvent) && (nextAutomationEvent === undefined || !isAnyRampToValueAutomationEvent(nextAutomationEvent))) {\n            return currentAutomationEvent.value;\n          }\n\n          if (currentAutomationEvent !== undefined && isSetValueCurveAutomationEvent(currentAutomationEvent) && (nextAutomationEvent === undefined || !isAnyRampToValueAutomationEvent(nextAutomationEvent) || currentAutomationEvent.startTime + currentAutomationEvent.duration > time)) {\n            if (time < currentAutomationEvent.startTime + currentAutomationEvent.duration) {\n              return getValueCurveValueAtTime(time, currentAutomationEvent);\n            }\n\n            return currentAutomationEvent.values[currentAutomationEvent.values.length - 1];\n          }\n\n          if (currentAutomationEvent !== undefined && isAnyRampToValueAutomationEvent(currentAutomationEvent) && (nextAutomationEvent === undefined || !isAnyRampToValueAutomationEvent(nextAutomationEvent))) {\n            return currentAutomationEvent.value;\n          }\n\n          if (nextAutomationEvent !== undefined && isExponentialRampToValueAutomationEvent(nextAutomationEvent)) {\n            var _getEndTimeAndValueOf = getEndTimeAndValueOfPreviousAutomationEvent(this._automationEvents, index - 1, currentAutomationEvent, nextAutomationEvent, this._defaultValue),\n                _getEndTimeAndValueOf2 = _slicedToArray(_getEndTimeAndValueOf, 2),\n                startTime = _getEndTimeAndValueOf2[0],\n                value = _getEndTimeAndValueOf2[1];\n\n            return getExponentialRampValueAtTime(time, startTime, value, nextAutomationEvent);\n          }\n\n          if (nextAutomationEvent !== undefined && isLinearRampToValueAutomationEvent(nextAutomationEvent)) {\n            var _getEndTimeAndValueOf3 = getEndTimeAndValueOfPreviousAutomationEvent(this._automationEvents, index - 1, currentAutomationEvent, nextAutomationEvent, this._defaultValue),\n                _getEndTimeAndValueOf4 = _slicedToArray(_getEndTimeAndValueOf3, 2),\n                _startTime = _getEndTimeAndValueOf4[0],\n                _value = _getEndTimeAndValueOf4[1];\n\n            return getLinearRampValueAtTime(time, _startTime, _value, nextAutomationEvent);\n          }\n\n          return this._defaultValue;\n        }\n      }]);\n\n      return AutomationEventList;\n    }();\n\n    var createCancelAndHoldAutomationEvent = function createCancelAndHoldAutomationEvent(cancelTime) {\n      return {\n        cancelTime: cancelTime,\n        type: 'cancelAndHold'\n      };\n    };\n\n    var createCancelScheduledValuesAutomationEvent = function createCancelScheduledValuesAutomationEvent(cancelTime) {\n      return {\n        cancelTime: cancelTime,\n        type: 'cancelScheduledValues'\n      };\n    };\n\n    var createExponentialRampToValueAutomationEvent = function createExponentialRampToValueAutomationEvent(value, endTime) {\n      return {\n        endTime: endTime,\n        type: 'exponentialRampToValue',\n        value: value\n      };\n    };\n\n    var createLinearRampToValueAutomationEvent = function createLinearRampToValueAutomationEvent(value, endTime) {\n      return {\n        endTime: endTime,\n        type: 'linearRampToValue',\n        value: value\n      };\n    };\n\n    var createSetTargetAutomationEvent = function createSetTargetAutomationEvent(target, startTime, timeConstant) {\n      return {\n        startTime: startTime,\n        target: target,\n        timeConstant: timeConstant,\n        type: 'setTarget'\n      };\n    };\n\n    exports.AutomationEventList = AutomationEventList;\n    exports.createCancelAndHoldAutomationEvent = createCancelAndHoldAutomationEvent;\n    exports.createCancelScheduledValuesAutomationEvent = createCancelScheduledValuesAutomationEvent;\n    exports.createExponentialRampToValueAutomationEvent = createExponentialRampToValueAutomationEvent;\n    exports.createLinearRampToValueAutomationEvent = createLinearRampToValueAutomationEvent;\n    exports.createSetTargetAutomationEvent = createSetTargetAutomationEvent;\n    exports.createSetValueAutomationEvent = createSetValueAutomationEvent;\n    exports.createSetValueCurveAutomationEvent = createSetValueCurveAutomationEvent;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n","var arrayWithHoles = require(\"./arrayWithHoles\");\n\nvar iterableToArrayLimit = require(\"./iterableToArrayLimit\");\n\nvar nonIterableRest = require(\"./nonIterableRest\");\n\nfunction _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n}\n\nmodule.exports = _slicedToArray;","function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nmodule.exports = _arrayWithHoles;","function _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nmodule.exports = _iterableToArrayLimit;","function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nmodule.exports = _nonIterableRest;","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck;","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;","export const version: string = \"14.4.84\";\n","export const createAbortError = () => {\n    try {\n        return new DOMException('', 'AbortError');\n    }\n    catch (err) {\n        // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.\n        err.code = 20;\n        err.name = 'AbortError';\n        return err;\n    }\n};\n//# sourceMappingURL=/build/es2018/factories/abort-error.js.map","export const ACTIVE_AUDIO_NODE_STORE = new WeakSet();\nexport const AUDIO_NODE_CONNECTIONS_STORE = new WeakMap();\nexport const AUDIO_NODE_STORE = new WeakMap();\nexport const AUDIO_PARAM_CONNECTIONS_STORE = new WeakMap();\nexport const AUDIO_PARAM_STORE = new WeakMap();\nexport const BACKUP_NATIVE_CONTEXT_STORE = new WeakMap();\nexport const CONTEXT_STORE = new WeakMap();\nexport const EVENT_LISTENERS = new WeakMap();\nexport const CYCLE_COUNTERS = new WeakMap();\n// This clunky name is borrowed from the spec. :-)\nexport const NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS = new WeakMap();\nexport const NODE_TO_PROCESSOR_MAPS = new WeakMap();\nexport const TEST_RESULTS = new WeakMap();\n//# sourceMappingURL=/build/es2018/globals.js.map","const handler = {\n    construct() {\n        return handler;\n    }\n};\nexport const isConstructible = (constructible) => {\n    try {\n        const proxy = new Proxy(constructible, handler);\n        new proxy(); // tslint:disable-line:no-unused-expression\n    }\n    catch (_a) {\n        return false;\n    }\n    return true;\n};\n//# sourceMappingURL=/build/es2018/helpers/is-constructible.js.map","/*\n * This massive regex tries to cover all the following cases.\n *\n * import './path';\n * import defaultImport from './path';\n * import { namedImport } from './path';\n * import { namedImport as renamendImport } from './path';\n * import * as namespaceImport from './path';\n * import defaultImport, { namedImport } from './path';\n * import defaultImport, { namedImport as renamendImport } from './path';\n * import defaultImport, * as namespaceImport from './path';\n */\nconst IMPORT_STATEMENT_REGEX = /^import(?:(?:[\\s]+[\\w]+|(?:[\\s]+[\\w]+[\\s]*,)?[\\s]*\\{[\\s]*[\\w]+(?:[\\s]+as[\\s]+[\\w]+)?(?:[\\s]*,[\\s]*[\\w]+(?:[\\s]+as[\\s]+[\\w]+)?)*[\\s]*}|(?:[\\s]+[\\w]+[\\s]*,)?[\\s]*\\*[\\s]+as[\\s]+[\\w]+)[\\s]+from)?(?:[\\s]*)(\"([^\"\\\\]|\\\\.)+\"|'([^'\\\\]|\\\\.)+')(?:[\\s]*);?/; // tslint:disable-line:max-line-length\nexport const splitImportStatements = (source, url) => {\n    const importStatements = [];\n    let sourceWithoutImportStatements = source.replace(/^[\\s]+/, '');\n    let result = sourceWithoutImportStatements.match(IMPORT_STATEMENT_REGEX);\n    while (result !== null) {\n        const unresolvedUrl = result[1].slice(1, -1);\n        const importStatementWithResolvedUrl = result[0]\n            .replace(/([\\s]+)?;?$/, '')\n            .replace(unresolvedUrl, (new URL(unresolvedUrl, url)).toString());\n        importStatements.push(importStatementWithResolvedUrl);\n        sourceWithoutImportStatements = sourceWithoutImportStatements\n            .slice(result[0].length)\n            .replace(/^[\\s]+/, '');\n        result = sourceWithoutImportStatements.match(IMPORT_STATEMENT_REGEX);\n    }\n    return [importStatements.join(';'), sourceWithoutImportStatements];\n};\n//# sourceMappingURL=/build/es2018/helpers/split-import-statements.js.map","import { NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS } from '../globals';\nimport { isConstructible } from '../helpers/is-constructible';\nimport { splitImportStatements } from '../helpers/split-import-statements';\nconst verifyParameterDescriptors = (parameterDescriptors) => {\n    if (parameterDescriptors !== undefined && !Array.isArray(parameterDescriptors)) {\n        throw new TypeError('The parameterDescriptors property of given value for processorCtor is not an array.');\n    }\n};\nconst verifyProcessorCtor = (processorCtor) => {\n    if (!isConstructible(processorCtor)) {\n        throw new TypeError('The given value for processorCtor should be a constructor.');\n    }\n    if (processorCtor.prototype === null || typeof processorCtor.prototype !== 'object') {\n        throw new TypeError('The given value for processorCtor should have a prototype.');\n    }\n    if (typeof processorCtor.prototype.process !== 'function') {\n        throw new TypeError('The given value for processorCtor should have a callable process() function.');\n    }\n};\nexport const createAddAudioWorkletModule = (createAbortError, createNotSupportedError, evaluateSource, exposeCurrentFrameAndCurrentTime, fetchSource, getBackupNativeContext, getNativeContext, ongoingRequests, resolvedRequests) => {\n    return (context, moduleURL, options = { credentials: 'omit' }) => {\n        const nativeContext = getNativeContext(context);\n        const absoluteUrl = (new URL(moduleURL, location.href)).toString();\n        // Bug #59: Only Chrome & Opera do implement the audioWorklet property.\n        if (nativeContext.audioWorklet !== undefined) {\n            return fetchSource(moduleURL)\n                .then((source) => {\n                const [importStatements, sourceWithoutImportStatements] = splitImportStatements(source, absoluteUrl);\n                /*\n                 * Bug #86: Chrome Canary does not invoke the process() function if the corresponding AudioWorkletNode has no output.\n                 *\n                 * This is the unminified version of the code used below:\n                 *\n                 * ```js\n                 * `${ importStatements };\n                 * ((registerProcessor) => {${ sourceWithoutImportStatements }\n                 * })((name, processorCtor) => registerProcessor(name, class extends processorCtor {\n                 *\n                 *     constructor (options) {\n                 *         const { hasNoOutput, ...otherParameterData } = options.parameterData;\n                 *\n                 *         if (hasNoOutput === 1) {\n                 *             super({ ...options, numberOfOutputs: 0, outputChannelCount: [ ], parameterData: otherParameterData });\n                 *\n                 *             this._hasNoOutput = true;\n                 *         } else {\n                 *             super(options);\n                 *\n                 *             this._hasNoOutput = false;\n                 *         }\n                 *     }\n                 *\n                 *     process (inputs, outputs, parameters) {\n                 *         return super.process(inputs, (this._hasNoOutput) ? [ ] : outputs, parameters);\n                 *     }\n                 *\n                 * }))`\n                 * ```\n                 */\n                const wrappedSource = `${importStatements};(registerProcessor=>{${sourceWithoutImportStatements}\n})((n,p)=>registerProcessor(n,class extends p{constructor(o){const{hasNoOutput,...q}=o.parameterData;if(hasNoOutput===1){super({...o,numberOfOutputs:0,outputChannelCount:[],parameterData:q});this._h=true}else{super(o);this._h=false}}process(i,o,p){return super.process(i,(this._h)?[]:o,p)}}))`; // tslint:disable-line:max-line-length\n                const blob = new Blob([wrappedSource], { type: 'application/javascript; charset=utf-8' });\n                const url = URL.createObjectURL(blob);\n                const backupNativeContext = getBackupNativeContext(nativeContext);\n                const nativeContextOrBackupNativeContext = (backupNativeContext !== null) ? backupNativeContext : nativeContext;\n                return nativeContextOrBackupNativeContext.audioWorklet\n                    .addModule(url, options)\n                    .then(() => URL.revokeObjectURL(url))\n                    // @todo This could be written more elegantly when Promise.finally() becomes avalaible.\n                    .catch((err) => {\n                    URL.revokeObjectURL(url);\n                    throw err; // tslint:disable-line:rxjs-throw-error\n                });\n            });\n        }\n        const resolvedRequestsOfContext = resolvedRequests.get(context);\n        if (resolvedRequestsOfContext !== undefined && resolvedRequestsOfContext.has(moduleURL)) {\n            return Promise.resolve();\n        }\n        const ongoingRequestsOfContext = ongoingRequests.get(context);\n        if (ongoingRequestsOfContext !== undefined) {\n            const promiseOfOngoingRequest = ongoingRequestsOfContext.get(moduleURL);\n            if (promiseOfOngoingRequest !== undefined) {\n                return promiseOfOngoingRequest;\n            }\n        }\n        const promise = fetchSource(moduleURL)\n            .then((source) => {\n            const [importStatements, sourceWithoutImportStatements] = splitImportStatements(source, absoluteUrl);\n            /*\n             * This is the unminified version of the code used below:\n             *\n             * ```js\n             * ${ importStatements };\n             * ((a, b) => {\n             *     (a[b] = a[b] || [ ]).push(\n             *         (AudioWorkletProcessor, global, registerProcessor, sampleRate, self, window) => {\n             *             ${ sourceWithoutImportStatements }\n             *         }\n             *     );\n             * })(window, '_AWGS');\n             * ```\n             */\n            // tslint:disable-next-line:max-line-length\n            const wrappedSource = `${importStatements};((a,b)=>{(a[b]=a[b]||[]).push((AudioWorkletProcessor,global,registerProcessor,sampleRate,self,window)=>{${sourceWithoutImportStatements}\n})})(window,'_AWGS')`;\n            // @todo Evaluating the given source code is a possible security problem.\n            return evaluateSource(wrappedSource);\n        })\n            .then(() => {\n            const evaluateAudioWorkletGlobalScope = window._AWGS.pop();\n            if (evaluateAudioWorkletGlobalScope === undefined) {\n                throw new SyntaxError();\n            }\n            exposeCurrentFrameAndCurrentTime(nativeContext.currentTime, nativeContext.sampleRate, () => evaluateAudioWorkletGlobalScope(class AudioWorkletProcessor {\n            }, undefined, (name, processorCtor) => {\n                if (name.trim() === '') {\n                    throw createNotSupportedError();\n                }\n                const nodeNameToProcessorConstructorMap = NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.get(nativeContext);\n                if (nodeNameToProcessorConstructorMap !== undefined) {\n                    if (nodeNameToProcessorConstructorMap.has(name)) {\n                        throw createNotSupportedError();\n                    }\n                    verifyProcessorCtor(processorCtor);\n                    verifyParameterDescriptors(processorCtor.parameterDescriptors);\n                    nodeNameToProcessorConstructorMap.set(name, processorCtor);\n                }\n                else {\n                    verifyProcessorCtor(processorCtor);\n                    verifyParameterDescriptors(processorCtor.parameterDescriptors);\n                    NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.set(nativeContext, new Map([[name, processorCtor]]));\n                }\n            }, nativeContext.sampleRate, undefined, undefined));\n        })\n            .catch((err) => {\n            if (err.name === 'SyntaxError') {\n                throw createAbortError();\n            }\n            throw err; // tslint:disable-line:rxjs-throw-error\n        });\n        if (ongoingRequestsOfContext === undefined) {\n            ongoingRequests.set(context, new Map([[moduleURL, promise]]));\n        }\n        else {\n            ongoingRequestsOfContext.set(moduleURL, promise);\n        }\n        promise\n            .then(() => {\n            const rslvdRqstsFCntxt = resolvedRequests.get(context);\n            if (rslvdRqstsFCntxt === undefined) {\n                resolvedRequests.set(context, new Set([moduleURL]));\n            }\n            else {\n                rslvdRqstsFCntxt.add(moduleURL);\n            }\n        })\n            .catch(() => { }) // tslint:disable-line:no-empty\n            // @todo Use finally when it becomes available in all supported browsers.\n            .then(() => {\n            const ngngRqstsFCntxt = ongoingRequests.get(context);\n            if (ngngRqstsFCntxt !== undefined) {\n                ngngRqstsFCntxt.delete(moduleURL);\n            }\n        });\n        return promise;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/add-audio-worklet-module.js.map","const DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    fftSize: 2048,\n    maxDecibels: -30,\n    minDecibels: -100,\n    smoothingTimeConstant: 0.8\n};\nexport const createAnalyserNodeConstructor = (audionNodeConstructor, createAnalyserNodeRenderer, createIndexSizeError, createNativeAnalyserNode, getNativeContext, isNativeOfflineAudioContext) => {\n    return class AnalyserNode extends audionNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeAnalyserNode = createNativeAnalyserNode(nativeContext, mergedOptions);\n            const analyserNodeRenderer = ((isNativeOfflineAudioContext(nativeContext))\n                ? createAnalyserNodeRenderer()\n                : null);\n            super(context, false, nativeAnalyserNode, analyserNodeRenderer);\n            this._nativeAnalyserNode = nativeAnalyserNode;\n        }\n        get fftSize() {\n            return this._nativeAnalyserNode.fftSize;\n        }\n        set fftSize(value) {\n            this._nativeAnalyserNode.fftSize = value;\n        }\n        get frequencyBinCount() {\n            return this._nativeAnalyserNode.frequencyBinCount;\n        }\n        get maxDecibels() {\n            return this._nativeAnalyserNode.maxDecibels;\n        }\n        set maxDecibels(value) {\n            // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.\n            const maxDecibels = this._nativeAnalyserNode.maxDecibels;\n            this._nativeAnalyserNode.maxDecibels = value;\n            if (!(value > this._nativeAnalyserNode.minDecibels)) {\n                this._nativeAnalyserNode.maxDecibels = maxDecibels;\n                throw createIndexSizeError();\n            }\n        }\n        get minDecibels() {\n            return this._nativeAnalyserNode.minDecibels;\n        }\n        set minDecibels(value) {\n            // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.\n            const minDecibels = this._nativeAnalyserNode.minDecibels;\n            this._nativeAnalyserNode.minDecibels = value;\n            if (!(this._nativeAnalyserNode.maxDecibels > value)) {\n                this._nativeAnalyserNode.minDecibels = minDecibels;\n                throw createIndexSizeError();\n            }\n        }\n        get smoothingTimeConstant() {\n            return this._nativeAnalyserNode.smoothingTimeConstant;\n        }\n        set smoothingTimeConstant(value) {\n            this._nativeAnalyserNode.smoothingTimeConstant = value;\n        }\n        getByteFrequencyData(array) {\n            this._nativeAnalyserNode.getByteFrequencyData(array);\n        }\n        getByteTimeDomainData(array) {\n            this._nativeAnalyserNode.getByteTimeDomainData(array);\n        }\n        getFloatFrequencyData(array) {\n            this._nativeAnalyserNode.getFloatFrequencyData(array);\n        }\n        getFloatTimeDomainData(array) {\n            this._nativeAnalyserNode.getFloatTimeDomainData(array);\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/analyser-node-constructor.js.map","export const isOwnedByContext = (nativeAudioNode, nativeContext) => {\n    return nativeAudioNode.context === nativeContext;\n};\n//# sourceMappingURL=/build/es2018/helpers/is-owned-by-context.js.map","export const testAudioBufferCopyChannelMethodsOutOfBoundsSupport = (nativeAudioBuffer) => {\n    try {\n        nativeAudioBuffer.copyToChannel(new Float32Array(1), 0, -1);\n    }\n    catch (_a) {\n        return false;\n    }\n    return true;\n};\n//# sourceMappingURL=/build/es2018/helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support.js.map","export const createIndexSizeError = () => {\n    try {\n        return new DOMException('', 'IndexSizeError');\n    }\n    catch (err) {\n        // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.\n        err.code = 1;\n        err.name = 'IndexSizeError';\n        return err;\n    }\n};\n//# sourceMappingURL=/build/es2018/factories/index-size-error.js.map","import { createIndexSizeError } from '../factories/index-size-error';\nexport const wrapAudioBufferGetChannelDataMethod = (audioBuffer) => {\n    audioBuffer.getChannelData = ((getChannelData) => {\n        return (channel) => {\n            try {\n                return getChannelData.call(audioBuffer, channel);\n            }\n            catch (err) {\n                if (err.code === 12) {\n                    throw createIndexSizeError();\n                }\n                throw err; // tslint:disable-line:rxjs-throw-error\n            }\n        };\n    })(audioBuffer.getChannelData);\n};\n//# sourceMappingURL=/build/es2018/helpers/wrap-audio-buffer-get-channel-data-method.js.map","import { testAudioBufferCopyChannelMethodsOutOfBoundsSupport } from '../helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support';\nimport { wrapAudioBufferGetChannelDataMethod } from '../helpers/wrap-audio-buffer-get-channel-data-method';\nconst DEFAULT_OPTIONS = {\n    numberOfChannels: 1\n};\nexport const createAudioBufferConstructor = (audioBufferStore, cacheTestResult, createNotSupportedError, nativeAudioBufferConstructor, nativeOfflineAudioContextConstructor, testNativeAudioBufferConstructorSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds) => {\n    let nativeOfflineAudioContext = null;\n    return class AudioBuffer {\n        constructor(options) {\n            if (nativeOfflineAudioContextConstructor === null) {\n                throw new Error('Missing the native OfflineAudioContext constructor.');\n            }\n            const { length, numberOfChannels, sampleRate } = { ...DEFAULT_OPTIONS, ...options };\n            if (nativeOfflineAudioContext === null) {\n                nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n            }\n            /*\n             * Bug #99: Firefox does not throw a NotSupportedError when the numberOfChannels is zero. But it only does it when using the\n             * factory function. But since Firefox also supports the constructor everything should be fine.\n             */\n            const audioBuffer = (nativeAudioBufferConstructor !== null &&\n                cacheTestResult(testNativeAudioBufferConstructorSupport, testNativeAudioBufferConstructorSupport)) ?\n                new nativeAudioBufferConstructor({ length, numberOfChannels, sampleRate }) :\n                nativeOfflineAudioContext.createBuffer(numberOfChannels, length, sampleRate);\n            // Bug #99: Safari does not throw an error when the numberOfChannels is zero.\n            if (audioBuffer.numberOfChannels === 0) {\n                throw createNotSupportedError();\n            }\n            // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n            // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.\n            if (typeof audioBuffer.copyFromChannel !== 'function') {\n                wrapAudioBufferCopyChannelMethods(audioBuffer);\n                wrapAudioBufferGetChannelDataMethod(audioBuffer);\n                // Bug #157: Only Chrome does allow the bufferOffset to be out-of-bounds.\n            }\n            else if (!cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, () => testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer))) {\n                wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n            }\n            audioBufferStore.add(audioBuffer);\n            /*\n             * This does violate all good pratices but it is necessary to allow this AudioBuffer to be used with native\n             * (Offline)AudioContexts.\n             */\n            return audioBuffer;\n        }\n        static [Symbol.hasInstance](instance) {\n            return (instance !== null && typeof instance === 'object' && Object.getPrototypeOf(instance) === AudioBuffer.prototype)\n                || (audioBufferStore.has(instance));\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-buffer-constructor.js.map","export const getValueForKey = (map, key) => {\n    const value = map.get(key);\n    if (value === undefined) {\n        throw new Error('A value with the given key could not be found.');\n    }\n    return value;\n};\n//# sourceMappingURL=/build/es2018/helpers/get-value-for-key.js.map","import { EVENT_LISTENERS } from '../globals';\nimport { getValueForKey } from './get-value-for-key';\nexport const getEventListenersOfAudioNode = (audioNode) => {\n    return getValueForKey(EVENT_LISTENERS, audioNode);\n};\n//# sourceMappingURL=/build/es2018/helpers/get-event-listeners-of-audio-node.js.map","import { ACTIVE_AUDIO_NODE_STORE } from '../globals';\nimport { getEventListenersOfAudioNode } from './get-event-listeners-of-audio-node';\nexport const setInternalStateToActive = (audioNode) => {\n    if (ACTIVE_AUDIO_NODE_STORE.has(audioNode)) {\n        throw new Error('The AudioNode is already stored.');\n    }\n    ACTIVE_AUDIO_NODE_STORE.add(audioNode);\n    getEventListenersOfAudioNode(audioNode)\n        .forEach((eventListener) => eventListener(true));\n};\n//# sourceMappingURL=/build/es2018/helpers/set-internal-state-to-active.js.map","import { ACTIVE_AUDIO_NODE_STORE } from '../globals';\nimport { getEventListenersOfAudioNode } from './get-event-listeners-of-audio-node';\nexport const setInternalStateToPassive = (audioNode) => {\n    if (!ACTIVE_AUDIO_NODE_STORE.has(audioNode)) {\n        throw new Error('The AudioNode is not stored.');\n    }\n    ACTIVE_AUDIO_NODE_STORE.delete(audioNode);\n    getEventListenersOfAudioNode(audioNode)\n        .forEach((eventListener) => eventListener(false));\n};\n//# sourceMappingURL=/build/es2018/helpers/set-internal-state-to-passive.js.map","export const wrapEventListener = (target, eventListener) => {\n    if (typeof eventListener === 'function') {\n        return (event) => {\n            const descriptor = { value: target };\n            Object.defineProperties(event, {\n                currentTarget: descriptor,\n                target: descriptor\n            });\n            return eventListener.call(target, event);\n        };\n    }\n    return eventListener;\n};\n//# sourceMappingURL=/build/es2018/helpers/wrap-event-listener.js.map","import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassive } from '../helpers/set-internal-state-to-passive';\nimport { wrapEventListener } from '../helpers/wrap-event-listener';\nconst DEFAULT_OPTIONS = {\n    buffer: null,\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    // Bug #149: Safari does not yet support the detune AudioParam.\n    loop: false,\n    loopEnd: 0,\n    loopStart: 0,\n    playbackRate: 1\n};\nexport const createAudioBufferSourceNodeConstructor = (audioNodeConstructor, createAudioBufferSourceNodeRenderer, createAudioParam, createInvalidStateError, createNativeAudioBufferSourceNode, getNativeContext, isNativeOfflineAudioContext) => {\n    return class AudioBufferSourceNode extends audioNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const audioBufferSourceNodeRenderer = ((isOffline)\n                ? createAudioBufferSourceNodeRenderer()\n                : null);\n            super(context, false, nativeAudioBufferSourceNode, audioBufferSourceNodeRenderer);\n            this._audioBufferSourceNodeRenderer = audioBufferSourceNodeRenderer;\n            this._isBufferNullified = false;\n            this._isBufferSet = (options.buffer !== null && options.buffer !== undefined);\n            this._nativeAudioBufferSourceNode = nativeAudioBufferSourceNode;\n            this._onended = null;\n            // Bug #73: Edge & Safari do not export the correct values for maxValue and minValue.\n            this._playbackRate = createAudioParam(this, isOffline, nativeAudioBufferSourceNode.playbackRate, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n        }\n        get buffer() {\n            if (this._isBufferNullified) {\n                return null;\n            }\n            return this._nativeAudioBufferSourceNode.buffer;\n        }\n        set buffer(value) {\n            // Bug #71: Edge does not allow to set the buffer to null.\n            try {\n                this._nativeAudioBufferSourceNode.buffer = value;\n            }\n            catch (err) {\n                if (value !== null || err.code !== 17) {\n                    throw err; // tslint:disable-line:rxjs-throw-error\n                }\n                // This will modify the buffer in place. Luckily that works in Edge and has the same effect as setting the buffer to null.\n                if (this._nativeAudioBufferSourceNode.buffer !== null) {\n                    const buffer = this._nativeAudioBufferSourceNode.buffer;\n                    const numberOfChannels = buffer.numberOfChannels;\n                    for (let i = 0; i < numberOfChannels; i += 1) {\n                        buffer\n                            .getChannelData(i)\n                            .fill(0);\n                    }\n                    this._isBufferNullified = true;\n                }\n            }\n            // Bug #72: Only Chrome, Edge & Opera do not allow to reassign the buffer yet.\n            if (value !== null) {\n                if (this._isBufferSet) {\n                    throw createInvalidStateError();\n                }\n                this._isBufferSet = true;\n            }\n        }\n        get onended() {\n            return this._onended;\n        }\n        set onended(value) {\n            const wrappedListener = wrapEventListener(this, value);\n            this._nativeAudioBufferSourceNode.onended = wrappedListener;\n            const nativeOnEnded = this._nativeAudioBufferSourceNode.onended;\n            this._onended = (nativeOnEnded === wrappedListener) ? value : nativeOnEnded;\n        }\n        get loop() {\n            return this._nativeAudioBufferSourceNode.loop;\n        }\n        set loop(value) {\n            this._nativeAudioBufferSourceNode.loop = value;\n        }\n        get loopEnd() {\n            return this._nativeAudioBufferSourceNode.loopEnd;\n        }\n        set loopEnd(value) {\n            this._nativeAudioBufferSourceNode.loopEnd = value;\n        }\n        get loopStart() {\n            return this._nativeAudioBufferSourceNode.loopStart;\n        }\n        set loopStart(value) {\n            this._nativeAudioBufferSourceNode.loopStart = value;\n        }\n        get playbackRate() {\n            return this._playbackRate;\n        }\n        start(when = 0, offset = 0, duration) {\n            this._nativeAudioBufferSourceNode.start(when, offset, duration);\n            if (this._audioBufferSourceNodeRenderer !== null) {\n                this._audioBufferSourceNodeRenderer.start = (duration === undefined) ? [when, offset] : [when, offset, duration];\n            }\n            else {\n                setInternalStateToActive(this);\n                const resetInternalStateToPassive = () => {\n                    this._nativeAudioBufferSourceNode.removeEventListener('ended', resetInternalStateToPassive);\n                    // @todo Determine a meaningful delay instead of just using one second.\n                    setTimeout(() => setInternalStateToPassive(this), 1000);\n                };\n                this._nativeAudioBufferSourceNode.addEventListener('ended', resetInternalStateToPassive);\n            }\n        }\n        stop(when = 0) {\n            this._nativeAudioBufferSourceNode.stop(when);\n            if (this._audioBufferSourceNodeRenderer !== null) {\n                this._audioBufferSourceNodeRenderer.stop = when;\n            }\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-buffer-source-node-constructor.js.map","export const isValidLatencyHint = (latencyHint) => {\n    return latencyHint === undefined ||\n        typeof latencyHint === 'number' ||\n        (typeof latencyHint === 'string' && (latencyHint === 'balanced' || latencyHint === 'interactive' || latencyHint === 'playback'));\n};\n//# sourceMappingURL=/build/es2018/helpers/is-valid-latency-hint.js.map","import { wrapEventListener } from './helpers/wrap-event-listener';\nexport class EventTarget {\n    constructor(_nativeEventTarget) {\n        this._nativeEventTarget = _nativeEventTarget;\n        this._listeners = new WeakMap();\n    }\n    addEventListener(type, listener, // @todo EventListenerOrEventListenerObject | null = null,\n    options) {\n        let wrappedEventListener = this._listeners.get(listener);\n        if (wrappedEventListener === undefined) {\n            wrappedEventListener = wrapEventListener(this, listener);\n            if (typeof listener === 'function') {\n                this._listeners.set(listener, wrappedEventListener);\n            }\n        }\n        return this._nativeEventTarget.addEventListener(type, wrappedEventListener, options);\n    }\n    dispatchEvent(event) {\n        return this._nativeEventTarget.dispatchEvent(event);\n    }\n    removeEventListener(type, listener, // @todo EventListenerOrEventListenerObject | null = null,\n    options) {\n        const wrappedEventListener = this._listeners.get(listener);\n        return this._nativeEventTarget.removeEventListener(type, (wrappedEventListener === undefined) ? null : wrappedEventListener, options);\n    }\n}\n//# sourceMappingURL=/build/es2018/event-target.js.map","export const isAudioNode = (audioNodeOrAudioParam) => {\n    return 'context' in audioNodeOrAudioParam;\n};\n//# sourceMappingURL=/build/es2018/guards/audio-node.js.map","import { isAudioNode } from './audio-node';\nexport const isAudioNodeOutputConnection = (outputConnection) => {\n    return isAudioNode(outputConnection[0]);\n};\n//# sourceMappingURL=/build/es2018/guards/audio-node-output-connection.js.map","export const isAudioWorkletNode = (audioNode) => {\n    return 'port' in audioNode;\n};\n//# sourceMappingURL=/build/es2018/guards/audio-worklet-node.js.map","export const isNativeAudioNodeFaker = (nativeAudioNodeOrNativeAudioNodeFaker) => {\n    return 'inputs' in nativeAudioNodeOrNativeAudioNodeFaker;\n};\n//# sourceMappingURL=/build/es2018/guards/native-audio-node-faker.js.map","import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nexport const connectNativeAudioNodeToNativeAudioNode = (nativeSourceAudioNode, nativeDestinationAudioNode, output, input) => {\n    if (isNativeAudioNodeFaker(nativeDestinationAudioNode)) {\n        const fakeNativeDestinationAudioNode = nativeDestinationAudioNode.inputs[input];\n        nativeSourceAudioNode.connect(fakeNativeDestinationAudioNode, output, 0);\n        return [fakeNativeDestinationAudioNode, output, 0];\n    }\n    nativeSourceAudioNode.connect(nativeDestinationAudioNode, output, input);\n    return [nativeDestinationAudioNode, output, input];\n};\n//# sourceMappingURL=/build/es2018/helpers/connect-native-audio-node-to-native-audio-node.js.map","import { getEventListenersOfAudioNode } from './get-event-listeners-of-audio-node';\nexport const deleteEventListenerOfAudioNode = (audioNode, eventListener) => {\n    const eventListeners = getEventListenersOfAudioNode(audioNode);\n    if (!eventListeners.delete(eventListener)) {\n        throw new Error('Missing the expected event listener.');\n    }\n};\n//# sourceMappingURL=/build/es2018/helpers/delete-event-listeners-of-audio-node.js.map","import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nexport const disconnectNativeAudioNodeFromNativeAudioNode = (nativeSourceAudioNode, nativeDestinationAudioNode, output, input) => {\n    if (isNativeAudioNodeFaker(nativeDestinationAudioNode)) {\n        nativeSourceAudioNode.disconnect(nativeDestinationAudioNode.inputs[input], output, 0);\n    }\n    else {\n        nativeSourceAudioNode.disconnect(nativeDestinationAudioNode, output, input);\n    }\n};\n//# sourceMappingURL=/build/es2018/helpers/disconnect-native-audio-node-from-native-audio-node.js.map","import { AUDIO_NODE_CONNECTIONS_STORE } from '../globals';\nimport { getValueForKey } from './get-value-for-key';\nexport const getAudioNodeConnections = (audioNode) => {\n    return getValueForKey(AUDIO_NODE_CONNECTIONS_STORE, audioNode);\n};\n//# sourceMappingURL=/build/es2018/helpers/get-audio-node-connections.js.map","import { AUDIO_PARAM_CONNECTIONS_STORE } from '../globals';\nimport { getValueForKey } from './get-value-for-key';\nexport const getAudioParamConnections = (audioParam) => {\n    return getValueForKey(AUDIO_PARAM_CONNECTIONS_STORE, audioParam);\n};\n//# sourceMappingURL=/build/es2018/helpers/get-audio-param-connections.js.map","import { AUDIO_NODE_STORE } from '../globals';\nimport { getValueForKey } from './get-value-for-key';\nexport const getNativeAudioNode = (audioNode) => {\n    return getValueForKey(AUDIO_NODE_STORE, audioNode);\n};\n//# sourceMappingURL=/build/es2018/helpers/get-native-audio-node.js.map","import { AUDIO_PARAM_STORE } from '../globals';\nimport { getValueForKey } from './get-value-for-key';\nexport const getNativeAudioParam = (audioParam) => {\n    return getValueForKey(AUDIO_PARAM_STORE, audioParam);\n};\n//# sourceMappingURL=/build/es2018/helpers/get-native-audio-param.js.map","export const insertElementInSet = (set, element, predicate, ignoreDuplicates) => {\n    for (const lmnt of set) {\n        if (predicate(lmnt)) {\n            if (ignoreDuplicates) {\n                return false;\n            }\n            throw Error('The set contains at least one similar element.');\n        }\n    }\n    set.add(element);\n    return true;\n};\n//# sourceMappingURL=/build/es2018/helpers/insert-element-in-set.js.map","import { ACTIVE_AUDIO_NODE_STORE } from '../globals';\nexport const isActiveAudioNode = (audioNode) => ACTIVE_AUDIO_NODE_STORE.has(audioNode);\n//# sourceMappingURL=/build/es2018/helpers/is-active-audio-node.js.map","import { CYCLE_COUNTERS } from '../globals';\nexport const isPartOfACycle = (audioNode) => {\n    return CYCLE_COUNTERS.has(audioNode);\n};\n//# sourceMappingURL=/build/es2018/helpers/is-part-of-a-cycle.js.map","import { ACTIVE_AUDIO_NODE_STORE } from '../globals';\nexport const isPassiveAudioNode = (audioNode) => {\n    return !ACTIVE_AUDIO_NODE_STORE.has(audioNode);\n};\n//# sourceMappingURL=/build/es2018/helpers/is-passive-audio-node.js.map","export const pickElementFromSet = (set, predicate) => {\n    const matchingElements = Array\n        .from(set)\n        .filter(predicate);\n    if (matchingElements.length > 1) {\n        throw Error('More than one element was found.');\n    }\n    if (matchingElements.length === 0) {\n        throw Error('No element was found.');\n    }\n    const [matchingElement] = matchingElements;\n    set.delete(matchingElement);\n    return matchingElement;\n};\n//# sourceMappingURL=/build/es2018/helpers/pick-element-from-set.js.map","import { isAudioWorkletNode } from '../guards/audio-worklet-node';\nimport { setInternalStateToPassive } from './set-internal-state-to-passive';\n// Set the internalState of the audioNode to 'passive' if it is not an AudioWorkletNode and if it has no 'active' input connections.\nexport const setInternalStateToPassiveWhenNecessary = (audioNode, activeInputs) => {\n    if (!isAudioWorkletNode(audioNode) && activeInputs.every((connections) => (connections.size === 0))) {\n        setInternalStateToPassive(audioNode);\n    }\n};\n//# sourceMappingURL=/build/es2018/helpers/set-internal-state-to-passive-when-necessary.js.map","export const testAudioNodeDisconnectMethodSupport = (nativeAudioContext) => {\n    return new Promise((resolve) => {\n        const analyzer = nativeAudioContext.createScriptProcessor(256, 1, 1);\n        const dummy = nativeAudioContext.createGain();\n        // Bug #95: Safari does not play one sample buffers.\n        const ones = nativeAudioContext.createBuffer(1, 2, 44100);\n        const channelData = ones.getChannelData(0);\n        channelData[0] = 1;\n        channelData[1] = 1;\n        const source = nativeAudioContext.createBufferSource();\n        source.buffer = ones;\n        source.loop = true;\n        source\n            .connect(analyzer)\n            .connect(nativeAudioContext.destination);\n        source.connect(dummy);\n        source.disconnect(dummy);\n        analyzer.onaudioprocess = (event) => {\n            const chnnlDt = event.inputBuffer.getChannelData(0);\n            if (Array.prototype.some.call(chnnlDt, (sample) => sample === 1)) {\n                resolve(true);\n            }\n            else {\n                resolve(false);\n            }\n            source.stop();\n            analyzer.onaudioprocess = null; // tslint:disable-line:deprecation\n            source.disconnect(analyzer);\n            analyzer.disconnect(nativeAudioContext.destination);\n        };\n        source.start();\n    });\n};\n//# sourceMappingURL=/build/es2018/helpers/test-audio-node-disconnect-method-support.js.map","export const visitEachAudioNodeOnce = (cycles, visitor) => {\n    const counts = new Map();\n    for (const cycle of cycles) {\n        for (const audioNode of cycle) {\n            const count = counts.get(audioNode);\n            counts.set(audioNode, (count === undefined) ? 1 : count + 1);\n        }\n    }\n    counts.forEach((count, audioNode) => visitor(audioNode, count));\n};\n//# sourceMappingURL=/build/es2018/helpers/visit-each-audio-node-once.js.map","export const isNativeAudioNode = (nativeAudioNodeOrAudioParam) => {\n    return 'context' in nativeAudioNodeOrAudioParam;\n};\n//# sourceMappingURL=/build/es2018/guards/native-audio-node.js.map","import { EventTarget } from '../event-target';\nimport { AUDIO_NODE_STORE, EVENT_LISTENERS } from '../globals';\nimport { isAudioNode } from '../guards/audio-node';\nimport { isAudioNodeOutputConnection } from '../guards/audio-node-output-connection';\nimport { isAudioWorkletNode } from '../guards/audio-worklet-node';\nimport { connectNativeAudioNodeToNativeAudioNode } from '../helpers/connect-native-audio-node-to-native-audio-node';\nimport { deleteEventListenerOfAudioNode } from '../helpers/delete-event-listeners-of-audio-node';\nimport { disconnectNativeAudioNodeFromNativeAudioNode } from '../helpers/disconnect-native-audio-node-from-native-audio-node';\nimport { getAudioNodeConnections } from '../helpers/get-audio-node-connections';\nimport { getAudioParamConnections } from '../helpers/get-audio-param-connections';\nimport { getEventListenersOfAudioNode } from '../helpers/get-event-listeners-of-audio-node';\nimport { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { getNativeAudioParam } from '../helpers/get-native-audio-param';\nimport { getValueForKey } from '../helpers/get-value-for-key';\nimport { insertElementInSet } from '../helpers/insert-element-in-set';\nimport { isActiveAudioNode } from '../helpers/is-active-audio-node';\nimport { isPartOfACycle } from '../helpers/is-part-of-a-cycle';\nimport { isPassiveAudioNode } from '../helpers/is-passive-audio-node';\nimport { pickElementFromSet } from '../helpers/pick-element-from-set';\nimport { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassiveWhenNecessary } from '../helpers/set-internal-state-to-passive-when-necessary';\nimport { testAudioNodeDisconnectMethodSupport } from '../helpers/test-audio-node-disconnect-method-support';\nimport { visitEachAudioNodeOnce } from '../helpers/visit-each-audio-node-once';\nimport { wrapAudioNodeDisconnectMethod } from '../helpers/wrap-audio-node-disconnect-method';\nconst addActiveInputConnectionToAudioNode = (activeInputs, source, [output, input, eventListener], ignoreDuplicates) => {\n    insertElementInSet(activeInputs[input], [source, output, eventListener], (activeInputConnection) => (activeInputConnection[0] === source && activeInputConnection[1] === output), ignoreDuplicates);\n};\nconst addActiveInputConnectionToAudioParam = (activeInputs, source, [output, eventListener], ignoreDuplicates) => {\n    insertElementInSet(activeInputs, [source, output, eventListener], (activeInputConnection) => (activeInputConnection[0] === source && activeInputConnection[1] === output), ignoreDuplicates);\n};\nconst deleteActiveInputConnectionToAudioNode = (activeInputs, source, output, input) => {\n    return pickElementFromSet(activeInputs[input], (activeInputConnection) => (activeInputConnection[0] === source && activeInputConnection[1] === output));\n};\nconst deleteActiveInputConnectionToAudioParam = (activeInputs, source, output) => {\n    return pickElementFromSet(activeInputs, (activeInputConnection) => (activeInputConnection[0] === source && activeInputConnection[1] === output));\n};\nconst addPassiveInputConnectionToAudioNode = (passiveInputs, input, [source, output, eventListener], ignoreDuplicates) => {\n    const passiveInputConnections = passiveInputs.get(source);\n    if (passiveInputConnections === undefined) {\n        passiveInputs.set(source, new Set([[output, input, eventListener]]));\n    }\n    else {\n        insertElementInSet(passiveInputConnections, [output, input, eventListener], (passiveInputConnection) => (passiveInputConnection[0] === output && passiveInputConnection[1] === input), ignoreDuplicates);\n    }\n};\nconst addPassiveInputConnectionToAudioParam = (passiveInputs, [source, output, eventListener], ignoreDuplicates) => {\n    const passiveInputConnections = passiveInputs.get(source);\n    if (passiveInputConnections === undefined) {\n        passiveInputs.set(source, new Set([[output, eventListener]]));\n    }\n    else {\n        insertElementInSet(passiveInputConnections, [output, eventListener], (passiveInputConnection) => (passiveInputConnection[0] === output), ignoreDuplicates);\n    }\n};\nconst deletePassiveInputConnectionToAudioNode = (passiveInputs, source, output, input) => {\n    const passiveInputConnections = getValueForKey(passiveInputs, source);\n    const matchingConnection = pickElementFromSet(passiveInputConnections, (passiveInputConnection) => (passiveInputConnection[0] === output && passiveInputConnection[1] === input));\n    if (passiveInputConnections.size === 0) {\n        passiveInputs.delete(source);\n    }\n    return matchingConnection;\n};\nconst deletePassiveInputConnectionToAudioParam = (passiveInputs, source, output) => {\n    const passiveInputConnections = getValueForKey(passiveInputs, source);\n    const matchingConnection = pickElementFromSet(passiveInputConnections, (passiveInputConnection) => (passiveInputConnection[0] === output));\n    if (passiveInputConnections.size === 0) {\n        passiveInputs.delete(source);\n    }\n    return matchingConnection;\n};\nconst addConnectionToAudioNodeOfAudioContext = (source, destination, output, input) => {\n    const { activeInputs, passiveInputs } = getAudioNodeConnections(destination);\n    const { outputs } = getAudioNodeConnections(source);\n    const eventListeners = getEventListenersOfAudioNode(source);\n    const eventListener = ((isActive) => {\n        const nativeDestinationAudioNode = getNativeAudioNode(destination);\n        const nativeSourceAudioNode = getNativeAudioNode(source);\n        if (isActive) {\n            const partialConnection = deletePassiveInputConnectionToAudioNode(passiveInputs, source, output, input);\n            addActiveInputConnectionToAudioNode(activeInputs, source, partialConnection, false);\n            if (!isPartOfACycle(source)) {\n                connectNativeAudioNodeToNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output, input);\n            }\n            if (isPassiveAudioNode(destination)) {\n                setInternalStateToActive(destination);\n            }\n        }\n        else {\n            const partialConnection = deleteActiveInputConnectionToAudioNode(activeInputs, source, output, input);\n            addPassiveInputConnectionToAudioNode(passiveInputs, input, partialConnection, false);\n            if (!isPartOfACycle(source)) {\n                disconnectNativeAudioNodeFromNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output, input);\n            }\n            if (isActiveAudioNode(destination)) {\n                setInternalStateToPassiveWhenNecessary(destination, activeInputs);\n            }\n        }\n    });\n    if (insertElementInSet(outputs, [destination, output, input], (outputConnection) => (outputConnection[0] === destination && outputConnection[1] === output && outputConnection[2] === input), true)) {\n        eventListeners.add(eventListener);\n        if (isActiveAudioNode(source)) {\n            addActiveInputConnectionToAudioNode(activeInputs, source, [output, input, eventListener], true);\n        }\n        else {\n            addPassiveInputConnectionToAudioNode(passiveInputs, input, [source, output, eventListener], true);\n        }\n        return true;\n    }\n    return false;\n};\nconst addConnectionToAudioNodeOfOfflineAudioContext = (source, destination, output, input) => {\n    const { outputs } = getAudioNodeConnections(source);\n    if (insertElementInSet(outputs, [destination, output, input], (outputConnection) => (outputConnection[0] === destination && outputConnection[1] === output && outputConnection[2] === input), true)) {\n        const { activeInputs } = getAudioNodeConnections(destination);\n        addActiveInputConnectionToAudioNode(activeInputs, source, [output, input, null], true);\n        return true;\n    }\n    return false;\n};\nconst addConnectionToAudioParamOfAudioContext = (source, destination, output) => {\n    const { activeInputs, passiveInputs } = getAudioParamConnections(destination);\n    const { outputs } = getAudioNodeConnections(source);\n    const eventListeners = getEventListenersOfAudioNode(source);\n    const eventListener = ((isActive) => {\n        const nativeAudioNode = getNativeAudioNode(source);\n        const nativeAudioParam = getNativeAudioParam(destination);\n        if (isActive) {\n            const partialConnection = deletePassiveInputConnectionToAudioParam(passiveInputs, source, output);\n            addActiveInputConnectionToAudioParam(activeInputs, source, partialConnection, false);\n            if (!isPartOfACycle(source)) {\n                nativeAudioNode.connect(nativeAudioParam, output);\n            }\n        }\n        else {\n            const partialConnection = deleteActiveInputConnectionToAudioParam(activeInputs, source, output);\n            addPassiveInputConnectionToAudioParam(passiveInputs, partialConnection, false);\n            if (!isPartOfACycle(source)) {\n                nativeAudioNode.disconnect(nativeAudioParam, output);\n            }\n        }\n    });\n    if (insertElementInSet(outputs, [destination, output], (outputConnection) => (outputConnection[0] === destination && outputConnection[1] === output), true)) {\n        eventListeners.add(eventListener);\n        if (isActiveAudioNode(source)) {\n            addActiveInputConnectionToAudioParam(activeInputs, source, [output, eventListener], true);\n        }\n        else {\n            addPassiveInputConnectionToAudioParam(passiveInputs, [source, output, eventListener], true);\n        }\n        return true;\n    }\n    return false;\n};\nconst addConnectionToAudioParamOfOfflineAudioContext = (source, destination, output) => {\n    const { outputs } = getAudioNodeConnections(source);\n    if (insertElementInSet(outputs, [destination, output], (outputConnection) => (outputConnection[0] === destination && outputConnection[1] === output), true)) {\n        const { activeInputs } = getAudioParamConnections(destination);\n        addActiveInputConnectionToAudioParam(activeInputs, source, [output, null], true);\n        return true;\n    }\n    return false;\n};\nconst deleteActiveInputConnection = (activeInputConnections, source, output) => {\n    for (const activeInputConnection of activeInputConnections) {\n        if (activeInputConnection[0] === source && activeInputConnection[1] === output) {\n            activeInputConnections.delete(activeInputConnection);\n            return activeInputConnection;\n        }\n    }\n    return null;\n};\nconst deleteInputConnectionOfAudioNode = (source, destination, output, input) => {\n    const { activeInputs, passiveInputs } = getAudioNodeConnections(destination);\n    const activeInputConnection = deleteActiveInputConnection(activeInputs[input], source, output);\n    if (activeInputConnection === null) {\n        const passiveInputConnection = deletePassiveInputConnectionToAudioNode(passiveInputs, source, output, input);\n        return [passiveInputConnection[2], false];\n    }\n    return [activeInputConnection[2], true];\n};\nconst deleteInputConnectionOfAudioParam = (source, destination, output) => {\n    const { activeInputs, passiveInputs } = getAudioParamConnections(destination);\n    const activeInputConnection = deleteActiveInputConnection(activeInputs, source, output);\n    if (activeInputConnection === null) {\n        const passiveInputConnection = deletePassiveInputConnectionToAudioParam(passiveInputs, source, output);\n        return [passiveInputConnection[1], false];\n    }\n    return [activeInputConnection[2], true];\n};\nconst deleteInputsOfAudioNode = (source, destination, output, input) => {\n    const [listener, isActive] = deleteInputConnectionOfAudioNode(source, destination, output, input);\n    if (listener !== null) {\n        deleteEventListenerOfAudioNode(source, listener);\n        if (isActive && !isPartOfACycle(source)) {\n            disconnectNativeAudioNodeFromNativeAudioNode(getNativeAudioNode(source), getNativeAudioNode(destination), output, input);\n        }\n    }\n    if (isActiveAudioNode(destination)) {\n        const { activeInputs } = getAudioNodeConnections(destination);\n        setInternalStateToPassiveWhenNecessary(destination, activeInputs);\n    }\n};\nconst deleteInputsOfAudioParam = (source, destination, output) => {\n    const [listener, isActive] = deleteInputConnectionOfAudioParam(source, destination, output);\n    if (listener !== null) {\n        deleteEventListenerOfAudioNode(source, listener);\n        if (isActive && !isPartOfACycle(source)) {\n            getNativeAudioNode(source)\n                .disconnect(getNativeAudioParam(destination), output);\n        }\n    }\n};\nconst deleteAnyConnection = (source) => {\n    const audioNodeConnectionsOfSource = getAudioNodeConnections(source);\n    const destinations = [];\n    for (const outputConnection of audioNodeConnectionsOfSource.outputs) {\n        if (isAudioNodeOutputConnection(outputConnection)) {\n            deleteInputsOfAudioNode(source, ...outputConnection);\n        }\n        else {\n            deleteInputsOfAudioParam(source, ...outputConnection);\n        }\n        destinations.push(outputConnection[0]);\n    }\n    audioNodeConnectionsOfSource.outputs.clear();\n    return destinations;\n};\nconst deleteConnectionAtOutput = (source, output) => {\n    const audioNodeConnectionsOfSource = getAudioNodeConnections(source);\n    const destinations = [];\n    for (const outputConnection of audioNodeConnectionsOfSource.outputs) {\n        if (outputConnection[1] === output) {\n            if (isAudioNodeOutputConnection(outputConnection)) {\n                deleteInputsOfAudioNode(source, ...outputConnection);\n            }\n            else {\n                deleteInputsOfAudioParam(source, ...outputConnection);\n            }\n            destinations.push(outputConnection[0]);\n            audioNodeConnectionsOfSource.outputs.delete(outputConnection);\n        }\n    }\n    return destinations;\n};\nconst deleteConnectionToDestination = (source, destination, output, input) => {\n    const audioNodeConnectionsOfSource = getAudioNodeConnections(source);\n    return Array\n        .from(audioNodeConnectionsOfSource.outputs)\n        .filter((outputConnection) => (outputConnection[0] === destination\n        && (output === undefined || outputConnection[1] === output)\n        && (input === undefined || outputConnection[2] === input)))\n        .map((outputConnection) => {\n        if (isAudioNodeOutputConnection(outputConnection)) {\n            deleteInputsOfAudioNode(source, ...outputConnection);\n        }\n        else {\n            deleteInputsOfAudioParam(source, ...outputConnection);\n        }\n        audioNodeConnectionsOfSource.outputs.delete(outputConnection);\n        return outputConnection[0];\n    });\n};\nexport const createAudioNodeConstructor = (addAudioNodeConnections, auxiliaryGainNodeStore, cacheTestResult, createIncrementCycleCounter, createIndexSizeError, createInvalidAccessError, createNotSupportedError, decrementCycleCounter, detectCycles, getNativeContext, isNativeAudioNode, isNativeAudioParam, isNativeOfflineAudioContext) => {\n    return class AudioNode extends EventTarget {\n        constructor(context, isActive, nativeAudioNode, audioNodeRenderer) {\n            super(nativeAudioNode);\n            this._context = context;\n            this._nativeAudioNode = nativeAudioNode;\n            const nativeContext = getNativeContext(context);\n            // Bug #12: Safari does not support to disconnect a specific destination.\n            // @todo Make sure this is not used with an OfflineAudioContext.\n            if (!isNativeOfflineAudioContext(nativeContext) && true !== cacheTestResult(testAudioNodeDisconnectMethodSupport, () => {\n                return testAudioNodeDisconnectMethodSupport(nativeContext);\n            })) {\n                wrapAudioNodeDisconnectMethod(nativeAudioNode);\n            }\n            AUDIO_NODE_STORE.set(this, nativeAudioNode);\n            EVENT_LISTENERS.set(this, new Set());\n            if (isActive) {\n                setInternalStateToActive(this);\n            }\n            addAudioNodeConnections(this, audioNodeRenderer, nativeAudioNode);\n        }\n        get channelCount() {\n            return this._nativeAudioNode.channelCount;\n        }\n        set channelCount(value) {\n            this._nativeAudioNode.channelCount = value;\n        }\n        get channelCountMode() {\n            return this._nativeAudioNode.channelCountMode;\n        }\n        set channelCountMode(value) {\n            this._nativeAudioNode.channelCountMode = value;\n        }\n        get channelInterpretation() {\n            return this._nativeAudioNode.channelInterpretation;\n        }\n        set channelInterpretation(value) {\n            this._nativeAudioNode.channelInterpretation = value;\n        }\n        get context() {\n            return this._context;\n        }\n        get numberOfInputs() {\n            return this._nativeAudioNode.numberOfInputs;\n        }\n        get numberOfOutputs() {\n            return this._nativeAudioNode.numberOfOutputs;\n        }\n        connect(destination, output = 0, input = 0) {\n            const nativeContext = getNativeContext(this._context);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            if (isNativeAudioNode(destination) || isNativeAudioParam(destination)) {\n                throw createInvalidAccessError();\n            }\n            if (isAudioNode(destination)) {\n                const nativeDestinationAudioNode = getNativeAudioNode(destination);\n                try {\n                    const connection = connectNativeAudioNodeToNativeAudioNode(this._nativeAudioNode, nativeDestinationAudioNode, output, input);\n                    if (isOffline || isPassiveAudioNode(this)) {\n                        this._nativeAudioNode.disconnect(...connection);\n                    }\n                    else if (isPassiveAudioNode(destination)) {\n                        setInternalStateToActive(destination);\n                    }\n                    // An AudioWorklet needs a connection because it otherwise may truncate the input array.\n                    // @todo Count the number of connections which depend on this auxiliary GainNode to know when it can be removed again.\n                    if (isAudioWorkletNode(destination)) {\n                        const auxiliaryGainNodes = auxiliaryGainNodeStore.get(nativeDestinationAudioNode);\n                        if (auxiliaryGainNodes === undefined) {\n                            const nativeGainNode = nativeContext.createGain();\n                            nativeGainNode.connect(connection[0], 0, connection[2]);\n                            auxiliaryGainNodeStore.set(nativeDestinationAudioNode, new Map([[input, nativeGainNode]]));\n                        }\n                        else if (auxiliaryGainNodes.get(input) === undefined) {\n                            const nativeGainNode = nativeContext.createGain();\n                            nativeGainNode.connect(connection[0], 0, connection[2]);\n                            auxiliaryGainNodes.set(input, nativeGainNode);\n                        }\n                    }\n                }\n                catch (err) {\n                    // Bug #41: Only Chrome, Firefox and Opera throw the correct exception by now.\n                    if (err.code === 12) {\n                        throw createInvalidAccessError();\n                    }\n                    throw err; // tslint:disable-line:rxjs-throw-error\n                }\n                const isNewConnectionToAudioNode = (isOffline)\n                    ? addConnectionToAudioNodeOfOfflineAudioContext(this, destination, output, input)\n                    : addConnectionToAudioNodeOfAudioContext(this, destination, output, input);\n                // Bug #164: Only Firefox detects cycles so far.\n                if (isNewConnectionToAudioNode) {\n                    const cycles = detectCycles([this], destination);\n                    visitEachAudioNodeOnce(cycles, createIncrementCycleCounter(isOffline));\n                }\n                return destination;\n            }\n            const nativeAudioParam = getNativeAudioParam(destination);\n            /*\n             * Bug #147 & #153: Safari does not support to connect an input signal to the playbackRate AudioParam of an\n             * AudioBufferSourceNode. This can't be easily detected and that's why the outdated name property is used here to identify\n             * Safari.\n             */\n            if (nativeAudioParam.name === 'playbackRate') {\n                throw createNotSupportedError();\n            }\n            try {\n                this._nativeAudioNode.connect(nativeAudioParam, output);\n                if (isOffline || isPassiveAudioNode(this)) {\n                    this._nativeAudioNode.disconnect(nativeAudioParam, output);\n                }\n            }\n            catch (err) {\n                // Bug #58: Only Firefox does throw an InvalidStateError yet.\n                if (err.code === 12) {\n                    throw createInvalidAccessError();\n                }\n                throw err; // tslint:disable-line:rxjs-throw-error\n            }\n            const isNewConnectionToAudioParam = (isOffline)\n                ? addConnectionToAudioParamOfOfflineAudioContext(this, destination, output)\n                : addConnectionToAudioParamOfAudioContext(this, destination, output);\n            // Bug #164: Only Firefox detects cycles so far.\n            if (isNewConnectionToAudioParam) {\n                const cycles = detectCycles([this], destination);\n                visitEachAudioNodeOnce(cycles, createIncrementCycleCounter(isOffline));\n            }\n        }\n        disconnect(destinationOrOutput, output, input) {\n            let destinations;\n            if (destinationOrOutput === undefined) {\n                destinations = deleteAnyConnection(this);\n            }\n            else if (typeof destinationOrOutput === 'number') {\n                if (destinationOrOutput < 0 || destinationOrOutput >= this.numberOfOutputs) {\n                    throw createIndexSizeError();\n                }\n                destinations = deleteConnectionAtOutput(this, destinationOrOutput);\n            }\n            else {\n                if (output !== undefined && (output < 0 || output >= this.numberOfOutputs)) {\n                    throw createIndexSizeError();\n                }\n                if (isAudioNode(destinationOrOutput)\n                    && input !== undefined\n                    && (input < 0 || input >= destinationOrOutput.numberOfInputs)) {\n                    throw createIndexSizeError();\n                }\n                destinations = deleteConnectionToDestination(this, destinationOrOutput, output, input);\n                if (destinations.length === 0) {\n                    throw createInvalidAccessError();\n                }\n            }\n            // Bug #164: Only Firefox detects cycles so far.\n            for (const destination of destinations) {\n                const cycles = detectCycles([this], destination);\n                visitEachAudioNodeOnce(cycles, decrementCycleCounter);\n            }\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-node-constructor.js.map","export class ReadOnlyMap {\n    constructor(parameters) {\n        this._map = new Map(parameters);\n    }\n    get size() {\n        return this._map.size;\n    }\n    entries() {\n        return this._map.entries();\n    }\n    forEach(callback, thisArg = null) {\n        return this._map.forEach((value, key) => callback.call(thisArg, value, key, this));\n    }\n    get(name) {\n        return this._map.get(name);\n    }\n    has(name) {\n        return this._map.has(name);\n    }\n    keys() {\n        return this._map.keys();\n    }\n    values() {\n        return this._map.values();\n    }\n}\n//# sourceMappingURL=/build/es2018/read-only-map.js.map","import { NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS } from '../globals';\nimport { wrapEventListener } from '../helpers/wrap-event-listener';\nimport { ReadOnlyMap } from '../read-only-map';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    // Bug #61: The channelCountMode should be 'max' according to the spec but is set to 'explicit' to achieve consistent behavior.\n    channelCountMode: 'explicit',\n    channelInterpretation: 'speakers',\n    numberOfInputs: 1,\n    numberOfOutputs: 1,\n    outputChannelCount: undefined,\n    parameterData: {},\n    processorOptions: {}\n};\nconst createChannelCount = (length) => {\n    const channelCount = [];\n    for (let i = 0; i < length; i += 1) {\n        channelCount.push(1);\n    }\n    return channelCount;\n};\nconst sanitizedOptions = (options) => {\n    return {\n        ...options,\n        outputChannelCount: (options.outputChannelCount !== undefined) ?\n            options.outputChannelCount :\n            (options.numberOfInputs === 1 && options.numberOfOutputs === 1) ?\n                /*\n                 * Bug #61: This should be the computedNumberOfChannels, but unfortunately that is almost impossible to fake. That's why\n                 * the channelCountMode is required to be 'explicit' as long as there is not a native implementation in every browser. That\n                 * makes sure the computedNumberOfChannels is equivilant to the channelCount which makes it much easier to compute.\n                 */\n                [options.channelCount] :\n                createChannelCount(options.numberOfOutputs)\n    };\n};\nexport const createAudioWorkletNodeConstructor = (audioNodeConstructor, createAudioParam, createAudioWorkletNodeRenderer, createNativeAudioWorkletNode, gainNodeConstructor, getNativeContext, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor) => {\n    return class AudioWorkletNode extends audioNodeConstructor {\n        constructor(context, name, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const mergedOptions = sanitizedOptions({ ...DEFAULT_OPTIONS, ...options });\n            const nodeNameToProcessorConstructorMap = NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.get(nativeContext);\n            const processorConstructor = (nodeNameToProcessorConstructorMap === undefined) ?\n                undefined :\n                nodeNameToProcessorConstructorMap.get(name);\n            const nativeAudioWorkletNode = createNativeAudioWorkletNode(nativeContext, isOffline ? null : context.baseLatency, nativeAudioWorkletNodeConstructor, name, processorConstructor, mergedOptions);\n            const audioWorkletNodeRenderer = ((isOffline)\n                ? createAudioWorkletNodeRenderer(name, mergedOptions, processorConstructor)\n                : null);\n            /*\n             * @todo Add a mechanism to switch an AudioWorkletNode to passive once the process() function of the AudioWorkletProcessor\n             * returns false.\n             */\n            super(context, true, nativeAudioWorkletNode, audioWorkletNodeRenderer);\n            const parameters = [];\n            nativeAudioWorkletNode.parameters.forEach((nativeAudioParam, nm) => {\n                const audioParam = createAudioParam(this, isOffline, nativeAudioParam);\n                parameters.push([nm, audioParam]);\n            });\n            this._nativeAudioWorkletNode = nativeAudioWorkletNode;\n            // Bug #86 & #87: Every browser but Firefox needs to get an unused output which should not be exposed.\n            this._numberOfOutputs = (options.numberOfOutputs === 0) ? 0 : this._nativeAudioWorkletNode.numberOfOutputs;\n            this._onprocessorerror = null;\n            this._parameters = new ReadOnlyMap(parameters);\n            /*\n             * Bug #86 & #87: Every browser but Firefox needs an output to be connected.\n             *\n             * Bug #50: Only Edge does not yet allow to create AudioNodes on a closed AudioContext. Therefore this is currently faked by\n             * using another AudioContext. And that is the reason why this will fail in case of a closed AudioContext.\n             */\n            if (context.state !== 'closed') {\n                const gainNode = new gainNodeConstructor(context, { gain: 0 });\n                try {\n                    this\n                        .connect(gainNode)\n                        .connect(context.destination);\n                }\n                catch (err) {\n                    if (err.name !== 'IndexSizeError') {\n                        throw err; // tslint:disable-line:rxjs-throw-error\n                    }\n                }\n            }\n        }\n        get numberOfOutputs() {\n            return this._numberOfOutputs;\n        }\n        get onprocessorerror() {\n            return this._onprocessorerror;\n        }\n        set onprocessorerror(value) {\n            const wrappedListener = wrapEventListener(this, value);\n            this._nativeAudioWorkletNode.onprocessorerror = wrappedListener;\n            const nativeOnProcessorError = this._nativeAudioWorkletNode.onprocessorerror;\n            this._onprocessorerror = (nativeOnProcessorError === wrappedListener) ? value : nativeOnProcessorError;\n        }\n        get parameters() {\n            if (this._parameters === null) {\n                // @todo The definition that TypeScript uses of the AudioParamMap is lacking many methods.\n                return this._nativeAudioWorkletNode.parameters;\n            }\n            return this._parameters;\n        }\n        get port() {\n            return this._nativeAudioWorkletNode.port;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-worklet-node-constructor.js.map","export function copyFromChannel(audioBuffer, \n// @todo There is currently no way to define something like { [ key: number | string ]: Float32Array }\nparent, key, channelNumber, bufferOffset) {\n    if (typeof audioBuffer.copyFromChannel === 'function') {\n        // The byteLength will be 0 when the ArrayBuffer was transferred.\n        if (parent[key].byteLength === 0) {\n            parent[key] = new Float32Array(128);\n        }\n        audioBuffer.copyFromChannel(parent[key], channelNumber, bufferOffset);\n        // Bug #5: Safari does not support copyFromChannel().\n    }\n    else {\n        const channelData = audioBuffer.getChannelData(channelNumber);\n        // The byteLength will be 0 when the ArrayBuffer was transferred.\n        if (parent[key].byteLength === 0) {\n            parent[key] = channelData.slice(bufferOffset, bufferOffset + 128);\n        }\n        else {\n            const slicedInput = new Float32Array(channelData.buffer, bufferOffset * Float32Array.BYTES_PER_ELEMENT, 128);\n            parent[key].set(slicedInput);\n        }\n    }\n}\n//# sourceMappingURL=/build/es2018/helpers/copy-from-channel.js.map","export const copyToChannel = (audioBuffer, parent, key, channelNumber, bufferOffset) => {\n    if (typeof audioBuffer.copyToChannel === 'function') {\n        // The byteLength will be 0 when the ArrayBuffer was transferred.\n        if (parent[key].byteLength !== 0) {\n            audioBuffer.copyToChannel(parent[key], channelNumber, bufferOffset);\n        }\n        // Bug #5: Safari does not support copyToChannel().\n    }\n    else {\n        // The byteLength will be 0 when the ArrayBuffer was transferred.\n        if (parent[key].byteLength !== 0) {\n            audioBuffer\n                .getChannelData(channelNumber)\n                .set(parent[key], bufferOffset);\n        }\n    }\n};\n//# sourceMappingURL=/build/es2018/helpers/copy-to-channel.js.map","export const createNestedArrays = (x, y) => {\n    const arrays = [];\n    for (let i = 0; i < x; i += 1) {\n        const array = [];\n        const length = (typeof y === 'number') ? y : y[i];\n        for (let j = 0; j < length; j += 1) {\n            array.push(new Float32Array(128));\n        }\n        arrays.push(array);\n    }\n    return arrays;\n};\n//# sourceMappingURL=/build/es2018/helpers/create-nested-arrays.js.map","import { copyFromChannel } from '../helpers/copy-from-channel';\nimport { copyToChannel } from '../helpers/copy-to-channel';\nimport { createNestedArrays } from '../helpers/create-nested-arrays';\nimport { getAudioNodeConnections } from '../helpers/get-audio-node-connections';\nimport { getAudioWorkletProcessor } from '../helpers/get-audio-worklet-processor';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nconst processBuffer = async (proxy, renderedBuffer, nativeOfflineAudioContext, options, processorConstructor, exposeCurrentFrameAndCurrentTime) => {\n    // Ceil the length to the next full render quantum.\n    // Bug #17: Safari does not yet expose the length.\n    const length = (renderedBuffer === null) ? (Math.ceil(proxy.context.length / 128) * 128) : renderedBuffer.length;\n    const numberOfInputChannels = options.channelCount * options.numberOfInputs;\n    const numberOfOutputChannels = options.outputChannelCount.reduce((sum, value) => sum + value, 0);\n    const processedBuffer = (numberOfOutputChannels === 0) ? null : nativeOfflineAudioContext.createBuffer(numberOfOutputChannels, length, nativeOfflineAudioContext.sampleRate);\n    if (processorConstructor === undefined) {\n        throw new Error('Missing the processor constructor.');\n    }\n    const audioNodeConnections = getAudioNodeConnections(proxy);\n    const audioWorkletProcessor = await getAudioWorkletProcessor(nativeOfflineAudioContext, proxy);\n    const inputs = createNestedArrays(options.numberOfInputs, options.channelCount);\n    const outputs = createNestedArrays(options.numberOfOutputs, options.outputChannelCount);\n    const parameters = Array\n        .from(proxy.parameters.keys())\n        .reduce((prmtrs, name) => ({ ...prmtrs, [name]: new Float32Array(128) }), {});\n    for (let i = 0; i < length; i += 128) {\n        if (options.numberOfInputs > 0 && renderedBuffer !== null) {\n            for (let j = 0; j < options.numberOfInputs; j += 1) {\n                for (let k = 0; k < options.channelCount; k += 1) {\n                    copyFromChannel(renderedBuffer, inputs[j], k, k, i);\n                }\n            }\n        }\n        if (processorConstructor.parameterDescriptors !== undefined && renderedBuffer !== null) {\n            processorConstructor.parameterDescriptors.forEach(({ name }, index) => {\n                copyFromChannel(renderedBuffer, parameters, name, numberOfInputChannels + index, i);\n            });\n        }\n        for (let j = 0; j < options.numberOfInputs; j += 1) {\n            for (let k = 0; k < options.outputChannelCount[j]; k += 1) {\n                // The byteLength will be 0 when the ArrayBuffer was transferred.\n                if (outputs[j][k].byteLength === 0) {\n                    outputs[j][k] = new Float32Array(128);\n                }\n            }\n        }\n        try {\n            const potentiallyEmptyInputs = inputs\n                .map((input, index) => {\n                if (audioNodeConnections.activeInputs[index].size === 0) {\n                    return [new Float32Array(0)];\n                }\n                return input;\n            });\n            const activeSourceFlag = exposeCurrentFrameAndCurrentTime(i / nativeOfflineAudioContext.sampleRate, nativeOfflineAudioContext.sampleRate, () => audioWorkletProcessor.process(potentiallyEmptyInputs, outputs, parameters));\n            if (processedBuffer !== null) {\n                for (let j = 0, outputChannelSplitterNodeOutput = 0; j < options.numberOfOutputs; j += 1) {\n                    for (let k = 0; k < options.outputChannelCount[j]; k += 1) {\n                        copyToChannel(processedBuffer, outputs[j], k, outputChannelSplitterNodeOutput + k, i);\n                    }\n                    outputChannelSplitterNodeOutput += options.outputChannelCount[j];\n                }\n            }\n            if (!activeSourceFlag) {\n                break;\n            }\n        }\n        catch (error) {\n            proxy.dispatchEvent(new ErrorEvent('processorerror', { error }));\n            break;\n        }\n    }\n    return processedBuffer;\n};\nexport const createAudioWorkletNodeRendererFactory = (connectAudioParam, connectMultipleOutputs, createNativeAudioBufferSourceNode, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, getNativeAudioNode, nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext) => {\n    return (name, options, processorConstructor) => {\n        const renderedNativeAudioNodes = new WeakMap();\n        let processedBufferPromise = null;\n        const createAudioNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeAudioWorkletNode = getNativeAudioNode(proxy);\n            let nativeOutputNodes = null;\n            const nativeAudioWorkletNodeIsOwnedByContext = isOwnedByContext(nativeAudioWorkletNode, nativeOfflineAudioContext);\n            // Bug #61: Only Chrome & Opera have an implementation of the AudioWorkletNode yet.\n            if (nativeAudioWorkletNodeConstructor === null) {\n                const numberOfOutputChannels = options.outputChannelCount.reduce((sum, value) => sum + value, 0);\n                const outputChannelSplitterNode = createNativeChannelSplitterNode(nativeOfflineAudioContext, {\n                    channelCount: Math.max(1, numberOfOutputChannels),\n                    channelCountMode: 'explicit',\n                    channelInterpretation: 'discrete',\n                    numberOfOutputs: Math.max(1, numberOfOutputChannels)\n                });\n                const outputChannelMergerNodes = [];\n                for (let i = 0; i < proxy.numberOfOutputs; i += 1) {\n                    outputChannelMergerNodes.push(createNativeChannelMergerNode(nativeOfflineAudioContext, {\n                        channelCount: 1,\n                        channelCountMode: 'explicit',\n                        channelInterpretation: 'speakers',\n                        numberOfInputs: options.outputChannelCount[i]\n                    }));\n                }\n                // Bug #87: Expose at least one output to make this node connectable.\n                const outputAudioNodes = (options.numberOfOutputs === 0) ?\n                    [outputChannelSplitterNode] :\n                    outputChannelMergerNodes;\n                const outputGainNode = createNativeGainNode(nativeOfflineAudioContext, {\n                    channelCount: options.channelCount,\n                    channelCountMode: options.channelCountMode,\n                    channelInterpretation: options.channelInterpretation,\n                    gain: 1\n                });\n                outputGainNode.connect = connectMultipleOutputs.bind(null, outputAudioNodes);\n                outputGainNode.disconnect = disconnectMultipleOutputs.bind(null, outputAudioNodes);\n                nativeOutputNodes = [outputChannelSplitterNode, outputChannelMergerNodes, outputGainNode];\n            }\n            else if (!nativeAudioWorkletNodeIsOwnedByContext) {\n                nativeAudioWorkletNode = new nativeAudioWorkletNodeConstructor(nativeOfflineAudioContext, name);\n            }\n            renderedNativeAudioNodes.set(nativeOfflineAudioContext, (nativeOutputNodes === null) ? nativeAudioWorkletNode : nativeOutputNodes[2]);\n            if (nativeOutputNodes !== null) {\n                if (processedBufferPromise === null) {\n                    if (processorConstructor === undefined) {\n                        throw new Error('Missing the processor constructor.');\n                    }\n                    if (nativeOfflineAudioContextConstructor === null) {\n                        throw new Error('Missing the native OfflineAudioContext constructor.');\n                    }\n                    // Bug #47: The AudioDestinationNode in Edge and Safari gets not initialized correctly.\n                    const numberOfInputChannels = proxy.channelCount * proxy.numberOfInputs;\n                    const numberOfParameters = (processorConstructor.parameterDescriptors === undefined)\n                        ? 0\n                        : processorConstructor.parameterDescriptors.length;\n                    const numberOfChannels = numberOfInputChannels + numberOfParameters;\n                    const renderBuffer = async () => {\n                        const partialOfflineAudioContext = new nativeOfflineAudioContextConstructor(numberOfChannels, \n                        // Ceil the length to the next full render quantum.\n                        // Bug #17: Safari does not yet expose the length.\n                        Math.ceil(proxy.context.length / 128) * 128, nativeOfflineAudioContext.sampleRate);\n                        const gainNodes = [];\n                        const inputChannelSplitterNodes = [];\n                        for (let i = 0; i < options.numberOfInputs; i += 1) {\n                            gainNodes.push(createNativeGainNode(partialOfflineAudioContext, {\n                                channelCount: options.channelCount,\n                                channelCountMode: options.channelCountMode,\n                                channelInterpretation: options.channelInterpretation,\n                                gain: 1\n                            }));\n                            inputChannelSplitterNodes.push(createNativeChannelSplitterNode(partialOfflineAudioContext, {\n                                channelCount: options.channelCount,\n                                channelCountMode: 'explicit',\n                                channelInterpretation: 'discrete',\n                                numberOfOutputs: options.channelCount\n                            }));\n                        }\n                        const constantSourceNodes = await Promise\n                            .all(Array\n                            .from(proxy.parameters.values())\n                            .map(async (audioParam) => {\n                            const constantSourceNode = createNativeConstantSourceNode(partialOfflineAudioContext, {\n                                channelCount: 1,\n                                channelCountMode: 'explicit',\n                                channelInterpretation: 'discrete',\n                                offset: audioParam.value\n                            });\n                            await renderAutomation(partialOfflineAudioContext, audioParam, constantSourceNode.offset, trace);\n                            return constantSourceNode;\n                        }));\n                        const inputChannelMergerNode = createNativeChannelMergerNode(partialOfflineAudioContext, {\n                            channelCount: 1,\n                            channelCountMode: 'explicit',\n                            channelInterpretation: 'speakers',\n                            numberOfInputs: Math.max(1, numberOfInputChannels + numberOfParameters)\n                        });\n                        for (let i = 0; i < options.numberOfInputs; i += 1) {\n                            gainNodes[i].connect(inputChannelSplitterNodes[i]);\n                            for (let j = 0; j < options.channelCount; j += 1) {\n                                inputChannelSplitterNodes[i].connect(inputChannelMergerNode, j, (i * options.channelCount) + j);\n                            }\n                        }\n                        for (const [index, constantSourceNode] of constantSourceNodes.entries()) {\n                            constantSourceNode.connect(inputChannelMergerNode, 0, numberOfInputChannels + index);\n                            constantSourceNode.start(0);\n                        }\n                        inputChannelMergerNode.connect(partialOfflineAudioContext.destination);\n                        await Promise\n                            .all(gainNodes\n                            .map((gainNode) => renderInputsOfAudioNode(proxy, partialOfflineAudioContext, gainNode, trace)));\n                        return renderNativeOfflineAudioContext(partialOfflineAudioContext);\n                    };\n                    processedBufferPromise = processBuffer(proxy, (numberOfChannels === 0) ? null : await renderBuffer(), nativeOfflineAudioContext, options, processorConstructor, exposeCurrentFrameAndCurrentTime);\n                }\n                const processedBuffer = await processedBufferPromise;\n                const audioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext);\n                const [outputChannelSplitterNode, outputChannelMergerNodes, outputGainNode] = nativeOutputNodes;\n                if (processedBuffer !== null) {\n                    audioBufferSourceNode.buffer = processedBuffer;\n                    audioBufferSourceNode.start(0);\n                }\n                audioBufferSourceNode.connect(outputChannelSplitterNode);\n                for (let i = 0, outputChannelSplitterNodeOutput = 0; i < proxy.numberOfOutputs; i += 1) {\n                    const outputChannelMergerNode = outputChannelMergerNodes[i];\n                    for (let j = 0; j < options.outputChannelCount[i]; j += 1) {\n                        outputChannelSplitterNode.connect(outputChannelMergerNode, outputChannelSplitterNodeOutput + j, j);\n                    }\n                    outputChannelSplitterNodeOutput += options.outputChannelCount[i];\n                }\n                return outputGainNode;\n            }\n            if (!nativeAudioWorkletNodeIsOwnedByContext) {\n                for (const [nm, audioParam] of proxy.parameters.entries()) {\n                    await renderAutomation(nativeOfflineAudioContext, audioParam, \n                    // @todo The definition that TypeScript uses of the AudioParamMap is lacking many methods.\n                    nativeAudioWorkletNode.parameters.get(nm), trace);\n                }\n            }\n            else {\n                for (const [nm, audioParam] of proxy.parameters.entries()) {\n                    await connectAudioParam(nativeOfflineAudioContext, audioParam, \n                    // @todo The definition that TypeScript uses of the AudioParamMap is lacking many methods.\n                    nativeAudioWorkletNode.parameters.get(nm), trace);\n                }\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioWorkletNode, trace);\n            return nativeAudioWorkletNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeAudioWorkletNodeOrGainNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeAudioWorkletNodeOrGainNode !== undefined) {\n                    return Promise.resolve(renderedNativeAudioWorkletNodeOrGainNode);\n                }\n                return createAudioNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-worklet-node-renderer-factory.js.map","import { NODE_TO_PROCESSOR_MAPS } from '../globals';\nimport { getNativeAudioNode } from './get-native-audio-node';\nimport { getValueForKey } from './get-value-for-key';\nexport const getAudioWorkletProcessor = (nativeOfflineAudioContext, proxy) => {\n    const nodeToProcessorMap = getValueForKey(NODE_TO_PROCESSOR_MAPS, nativeOfflineAudioContext);\n    const nativeAudioWorkletNode = getNativeAudioNode(proxy);\n    return getValueForKey(nodeToProcessorMap, nativeAudioWorkletNode);\n};\n//# sourceMappingURL=/build/es2018/helpers/get-audio-worklet-processor.js.map","import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nconst DEFAULT_OPTIONS = {\n    Q: 1,\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    detune: 0,\n    frequency: 350,\n    gain: 0,\n    type: 'lowpass'\n};\nexport const createBiquadFilterNodeConstructor = (audioNodeConstructor, createAudioParam, createBiquadFilterNodeRenderer, createInvalidAccessError, createNativeBiquadFilterNode, getNativeContext, isNativeOfflineAudioContext) => {\n    return class BiquadFilterNode extends audioNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const biquadFilterNodeRenderer = ((isOffline) ? createBiquadFilterNodeRenderer() : null);\n            super(context, false, nativeBiquadFilterNode, biquadFilterNodeRenderer);\n            // Bug #80: Edge & Safari do not export the correct values for maxValue and minValue.\n            this._Q = createAudioParam(this, isOffline, nativeBiquadFilterNode.Q, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            // Bug #78: Chrome, Edge, Firefox, Opera & Safari do not export the correct values for maxValue and minValue.\n            this._detune = createAudioParam(this, isOffline, nativeBiquadFilterNode.detune, 1200 * Math.log2(MOST_POSITIVE_SINGLE_FLOAT), -1200 * Math.log2(MOST_POSITIVE_SINGLE_FLOAT));\n            /*\n             * Bug #77: Edge does not export the correct values for maxValue and minValue. Firefox & Safari do not export the correct value\n             * for minValue.\n             */\n            this._frequency = createAudioParam(this, isOffline, nativeBiquadFilterNode.frequency, context.sampleRate / 2, 0);\n            // Bug #79: Chrome, Edge, Firefox, Opera & Safari do not export the correct values for maxValue and minValue.\n            this._gain = createAudioParam(this, isOffline, nativeBiquadFilterNode.gain, 40 * Math.log10(MOST_POSITIVE_SINGLE_FLOAT), -40 * Math.log10(MOST_POSITIVE_SINGLE_FLOAT));\n            this._nativeBiquadFilterNode = nativeBiquadFilterNode;\n        }\n        get Q() {\n            return this._Q;\n        }\n        get detune() {\n            return this._detune;\n        }\n        get frequency() {\n            return this._frequency;\n        }\n        get gain() {\n            return this._gain;\n        }\n        get type() {\n            return this._nativeBiquadFilterNode.type;\n        }\n        set type(value) {\n            this._nativeBiquadFilterNode.type = value;\n        }\n        getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {\n            this._nativeBiquadFilterNode.getFrequencyResponse(frequencyHz, magResponse, phaseResponse);\n            // Bug #68: Only Chrome, Firefox & Opera do throw an error if the parameters differ in their length.\n            if ((frequencyHz.length !== magResponse.length) || (magResponse.length !== phaseResponse.length)) {\n                throw createInvalidAccessError();\n            }\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/biquad-filter-node-constructor.js.map","const DEFAULT_OPTIONS = {\n    channelCount: 1,\n    channelCountMode: 'explicit',\n    channelInterpretation: 'speakers',\n    numberOfInputs: 6\n};\nexport const createChannelMergerNodeConstructor = (audioNodeConstructor, createChannelMergerNodeRenderer, createNativeChannelMergerNode, getNativeContext, isNativeOfflineAudioContext) => {\n    return class ChannelMergerNode extends audioNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeChannelMergerNode = createNativeChannelMergerNode(nativeContext, mergedOptions);\n            const channelMergerNodeRenderer = ((isNativeOfflineAudioContext(nativeContext))\n                ? createChannelMergerNodeRenderer()\n                : null);\n            super(context, false, nativeChannelMergerNode, channelMergerNodeRenderer);\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/channel-merger-node-constructor.js.map","const DEFAULT_OPTIONS = {\n    channelCount: 6,\n    channelCountMode: 'explicit',\n    channelInterpretation: 'discrete',\n    numberOfOutputs: 6\n};\nconst sanitizedOptions = (options) => {\n    return { ...options, channelCount: options.numberOfOutputs };\n};\nexport const createChannelSplitterNodeConstructor = (audioNodeConstructor, createChannelSplitterNodeRenderer, createNativeChannelSplitterNode, getNativeContext, isNativeOfflineAudioContext) => {\n    return class ChannelSplitterNode extends audioNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = sanitizedOptions({ ...DEFAULT_OPTIONS, ...options });\n            const nativeChannelSplitterNode = createNativeChannelSplitterNode(nativeContext, mergedOptions);\n            const channelSplitterNodeRenderer = ((isNativeOfflineAudioContext(nativeContext))\n                ? createChannelSplitterNodeRenderer()\n                : null);\n            super(context, false, nativeChannelSplitterNode, channelSplitterNodeRenderer);\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/channel-splitter-node-constructor.js.map","import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassive } from '../helpers/set-internal-state-to-passive';\nimport { wrapEventListener } from '../helpers/wrap-event-listener';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    offset: 1\n};\nexport const createConstantSourceNodeConstructor = (audioNodeConstructor, createAudioParam, createConstantSourceNodeRendererFactory, createNativeConstantSourceNode, getNativeContext, isNativeOfflineAudioContext) => {\n    return class ConstantSourceNode extends audioNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeConstantSourceNode = createNativeConstantSourceNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const constantSourceNodeRenderer = ((isOffline)\n                ? createConstantSourceNodeRendererFactory()\n                : null);\n            super(context, false, nativeConstantSourceNode, constantSourceNodeRenderer);\n            this._constantSourceNodeRenderer = constantSourceNodeRenderer;\n            this._nativeConstantSourceNode = nativeConstantSourceNode;\n            /*\n             * Bug #62 & #74: Edge & Safari do not support ConstantSourceNodes and do not export the correct values for maxValue and\n             * minValue for GainNodes.\n             */\n            this._offset = createAudioParam(this, isOffline, nativeConstantSourceNode.offset, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            this._onended = null;\n        }\n        get offset() {\n            return this._offset;\n        }\n        get onended() {\n            return this._onended;\n        }\n        set onended(value) {\n            const wrappedListener = wrapEventListener(this, value);\n            this._nativeConstantSourceNode.onended = wrappedListener;\n            const nativeOnEnded = this._nativeConstantSourceNode.onended;\n            this._onended = (nativeOnEnded === wrappedListener) ? value : nativeOnEnded;\n        }\n        start(when = 0) {\n            this._nativeConstantSourceNode.start(when);\n            if (this._constantSourceNodeRenderer !== null) {\n                this._constantSourceNodeRenderer.start = when;\n            }\n            else {\n                setInternalStateToActive(this);\n                const resetInternalStateToPassive = () => {\n                    this._nativeConstantSourceNode.removeEventListener('ended', resetInternalStateToPassive);\n                    // @todo Determine a meaningful delay instead of just using one second.\n                    setTimeout(() => setInternalStateToPassive(this), 1000);\n                };\n                this._nativeConstantSourceNode.addEventListener('ended', resetInternalStateToPassive);\n            }\n        }\n        stop(when = 0) {\n            this._nativeConstantSourceNode.stop(when);\n            if (this._constantSourceNodeRenderer !== null) {\n                this._constantSourceNodeRenderer.stop = when;\n            }\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/constant-source-node-constructor.js.map","const DEFAULT_OPTIONS = {\n    buffer: null,\n    channelCount: 2,\n    channelCountMode: 'clamped-max',\n    channelInterpretation: 'speakers',\n    disableNormalization: false\n};\nexport const createConvolverNodeConstructor = (audioNodeConstructor, createConvolverNodeRenderer, createNativeConvolverNode, getNativeContext, isNativeOfflineAudioContext) => {\n    return class ConvolverNode extends audioNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeConvolverNode = createNativeConvolverNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const convolverNodeRenderer = ((isOffline) ? createConvolverNodeRenderer() : null);\n            super(context, false, nativeConvolverNode, convolverNodeRenderer);\n            this._isBufferNullified = false;\n            this._nativeConvolverNode = nativeConvolverNode;\n        }\n        get buffer() {\n            if (this._isBufferNullified) {\n                return null;\n            }\n            return this._nativeConvolverNode.buffer;\n        }\n        set buffer(value) {\n            this._nativeConvolverNode.buffer = value;\n            // Bug #115: Safari does not allow to set the buffer to null.\n            if (value === null && this._nativeConvolverNode.buffer !== null) {\n                const nativeContext = this._nativeConvolverNode.context;\n                this._nativeConvolverNode.buffer = nativeContext.createBuffer(1, 1, nativeContext.sampleRate);\n                this._isBufferNullified = true;\n            }\n            else {\n                this._isBufferNullified = false;\n            }\n        }\n        get normalize() {\n            return this._nativeConvolverNode.normalize;\n        }\n        set normalize(value) {\n            this._nativeConvolverNode.normalize = value;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/convolver-node-constructor.js.map","const DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    delayTime: 0,\n    maxDelayTime: 1\n};\nexport const createDelayNodeConstructor = (audioNodeConstructor, createAudioParam, createDelayNodeRenderer, createNativeDelayNode, getNativeContext, isNativeOfflineAudioContext) => {\n    return class DelayNode extends audioNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeDelayNode = createNativeDelayNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const delayNodeRenderer = ((isOffline)\n                ? createDelayNodeRenderer(mergedOptions.maxDelayTime)\n                : null);\n            super(context, false, nativeDelayNode, delayNodeRenderer);\n            // Bug #161: Edge does not export the correct values for maxValue and minValue.\n            this._delayTime = createAudioParam(this, isOffline, nativeDelayNode.delayTime, mergedOptions.maxDelayTime, 0);\n        }\n        get delayTime() {\n            return this._delayTime;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/delay-node-constructor.js.map","import { isNativeAudioNode } from '../guards/native-audio-node';\nconst getOutputAudioNodeAtIndex = (createIndexSizeError, outputAudioNodes, output) => {\n    const outputAudioNode = outputAudioNodes[output];\n    if (outputAudioNode === undefined) {\n        throw createIndexSizeError();\n    }\n    return outputAudioNode;\n};\nexport const createDisconnectMultipleOutputs = (createIndexSizeError) => {\n    return (outputAudioNodes, destinationOrOutput = undefined, output = undefined, input = 0) => {\n        if (destinationOrOutput === undefined) {\n            return outputAudioNodes\n                .forEach((outputAudioNode) => outputAudioNode.disconnect());\n        }\n        if (typeof destinationOrOutput === 'number') {\n            return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, destinationOrOutput)\n                .disconnect();\n        }\n        if (isNativeAudioNode(destinationOrOutput)) {\n            if (output === undefined) {\n                return outputAudioNodes\n                    .forEach((outputAudioNode) => outputAudioNode.disconnect(destinationOrOutput));\n            }\n            if (input === undefined) {\n                return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output)\n                    .disconnect(destinationOrOutput, 0);\n            }\n            return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output)\n                .disconnect(destinationOrOutput, 0, input);\n        }\n        if (output === undefined) {\n            return outputAudioNodes\n                .forEach((outputAudioNode) => outputAudioNode.disconnect(destinationOrOutput));\n        }\n        return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output)\n            .disconnect(destinationOrOutput, 0);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/disconnect-multiple-outputs.js.map","const DEFAULT_OPTIONS = {\n    attack: 0.003,\n    channelCount: 2,\n    channelCountMode: 'clamped-max',\n    channelInterpretation: 'speakers',\n    knee: 30,\n    ratio: 12,\n    release: 0.25,\n    threshold: -24\n};\nexport const createDynamicsCompressorNodeConstructor = (audioNodeConstructor, createAudioParam, createDynamicsCompressorNodeRenderer, createNativeDynamicsCompressorNode, createNotSupportedError, getNativeContext, isNativeOfflineAudioContext) => {\n    return class DynamicsCompressorNode extends audioNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const dynamicsCompressorNodeRenderer = ((isOffline)\n                ? createDynamicsCompressorNodeRenderer()\n                : null);\n            super(context, false, nativeDynamicsCompressorNode, dynamicsCompressorNodeRenderer);\n            // Bug #110: Edge does not export the correct values for maxValue and minValue.\n            this._attack = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.attack, 1, 0);\n            this._knee = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.knee, 40, 0);\n            this._nativeDynamicsCompressorNode = nativeDynamicsCompressorNode;\n            this._ratio = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.ratio, 20, 1);\n            this._release = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.release, 1, 0);\n            this._threshold = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.threshold, 0, -100);\n        }\n        get attack() {\n            return this._attack;\n        }\n        /*\n         * Bug #108: Only Chrome, Firefox and Opera disallow a channelCount of three and above yet which is why the getter and setter needs\n         * to be overwritten here.\n         */\n        get channelCount() {\n            return this._nativeDynamicsCompressorNode.channelCount;\n        }\n        set channelCount(value) {\n            const previousChannelCount = this._nativeDynamicsCompressorNode.channelCount;\n            this._nativeDynamicsCompressorNode.channelCount = value;\n            if (value > 2) {\n                this._nativeDynamicsCompressorNode.channelCount = previousChannelCount;\n                throw createNotSupportedError();\n            }\n        }\n        /*\n         * Bug #109: Only Chrome, Firefox and Opera disallow a channelCountMode of 'max' yet which is why the getter and setter needs to be\n         * overwritten here.\n         */\n        get channelCountMode() {\n            return this._nativeDynamicsCompressorNode.channelCountMode;\n        }\n        set channelCountMode(value) {\n            const previousChannelCount = this._nativeDynamicsCompressorNode.channelCountMode;\n            this._nativeDynamicsCompressorNode.channelCountMode = value;\n            if (value === 'max') {\n                this._nativeDynamicsCompressorNode.channelCountMode = previousChannelCount;\n                throw createNotSupportedError();\n            }\n        }\n        get knee() {\n            return this._knee;\n        }\n        get ratio() {\n            return this._ratio;\n        }\n        get reduction() {\n            // Bug #111: Safari returns an AudioParam instead of a number.\n            if (typeof this._nativeDynamicsCompressorNode.reduction.value === 'number') {\n                return this._nativeDynamicsCompressorNode.reduction.value;\n            }\n            return this._nativeDynamicsCompressorNode.reduction;\n        }\n        get release() {\n            return this._release;\n        }\n        get threshold() {\n            return this._threshold;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/dynamics-compressor-node-constructor.js.map","import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    gain: 1\n};\nexport const createGainNodeConstructor = (audioNodeConstructor, createAudioParam, createGainNodeRenderer, createNativeGainNode, getNativeContext, isNativeOfflineAudioContext) => {\n    return class GainNode extends audioNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeGainNode = createNativeGainNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const gainNodeRenderer = ((isOffline) ? createGainNodeRenderer() : null);\n            super(context, false, nativeGainNode, gainNodeRenderer);\n            // Bug #74: Edge & Safari do not export the correct values for maxValue and minValue.\n            this._gain = createAudioParam(this, isOffline, nativeGainNode.gain, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n        }\n        get gain() {\n            return this._gain;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/gain-node-constructor.js.map","export const createInvalidStateError = () => {\n    try {\n        return new DOMException('', 'InvalidStateError');\n    }\n    catch (err) {\n        // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.\n        err.code = 11;\n        err.name = 'InvalidStateError';\n        return err;\n    }\n};\n//# sourceMappingURL=/build/es2018/factories/invalid-state-error.js.map","export const createInvalidAccessError = () => {\n    try {\n        return new DOMException('', 'InvalidAccessError');\n    }\n    catch (err) {\n        // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.\n        err.code = 15;\n        err.name = 'InvalidAccessError';\n        return err;\n    }\n};\n//# sourceMappingURL=/build/es2018/factories/invalid-access-error.js.map","import { wrapIIRFilterNodeGetFrequencyResponseMethod } from '../helpers/wrap-iir-filter-node-get-frequency-response-method';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers'\n};\nexport const createIIRFilterNodeConstructor = (audioNodeConstructor, createNativeIIRFilterNode, createIIRFilterNodeRenderer, getNativeContext, isNativeOfflineAudioContext) => {\n    return class IIRFilterNode extends audioNodeConstructor {\n        constructor(context, options) {\n            const nativeContext = getNativeContext(context);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeIIRFilterNode = createNativeIIRFilterNode(nativeContext, isOffline ? null : context.baseLatency, mergedOptions);\n            const iirFilterNodeRenderer = ((isOffline)\n                ? createIIRFilterNodeRenderer(mergedOptions.feedback, mergedOptions.feedforward)\n                : null);\n            super(context, false, nativeIIRFilterNode, iirFilterNodeRenderer);\n            // Bug #23 & #24: FirefoxDeveloper does not throw an InvalidAccessError.\n            // @todo Write a test which allows other browsers to remain unpatched.\n            wrapIIRFilterNodeGetFrequencyResponseMethod(nativeIIRFilterNode);\n            this._nativeIIRFilterNode = nativeIIRFilterNode;\n        }\n        getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {\n            return this._nativeIIRFilterNode.getFrequencyResponse(frequencyHz, magResponse, phaseResponse);\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/iir-filter-node-constructor.js.map","// This implementation as shamelessly inspired by source code of\n// tslint:disable-next-line:max-line-length\n// {@link https://chromium.googlesource.com/chromium/src.git/+/master/third_party/WebKit/Source/platform/audio/IIRFilter.cpp|Chromium's IIRFilter}.\nexport const filterBuffer = (feedback, feedbackLength, feedforward, feedforwardLength, minLength, xBuffer, yBuffer, bufferIndex, bufferLength, input, output) => {\n    const inputLength = input.length;\n    let i = bufferIndex;\n    for (let j = 0; j < inputLength; j += 1) {\n        let y = feedforward[0] * input[j];\n        for (let k = 1; k < minLength; k += 1) {\n            const x = (i - k) & (bufferLength - 1); // tslint:disable-line:no-bitwise\n            y += feedforward[k] * xBuffer[x];\n            y -= feedback[k] * yBuffer[x];\n        }\n        for (let k = minLength; k < feedforwardLength; k += 1) {\n            y += feedforward[k] * xBuffer[(i - k) & (bufferLength - 1)]; // tslint:disable-line:no-bitwise\n        }\n        for (let k = minLength; k < feedbackLength; k += 1) {\n            y -= feedback[k] * yBuffer[(i - k) & (bufferLength - 1)]; // tslint:disable-line:no-bitwise\n        }\n        xBuffer[i] = input[j];\n        yBuffer[i] = y;\n        i = (i + 1) & (bufferLength - 1); // tslint:disable-line:no-bitwise\n        output[j] = y;\n    }\n    return i;\n};\n//# sourceMappingURL=/build/es2018/helpers/filter-buffer.js.map","export const testPromiseSupport = (nativeContext) => {\n    // This 12 numbers represent the 48 bytes of an empty WAVE file with a single sample.\n    const uint32Array = new Uint32Array([\n        1179011410,\n        40,\n        1163280727,\n        544501094,\n        16,\n        131073,\n        44100,\n        176400,\n        1048580,\n        1635017060,\n        4,\n        0\n    ]);\n    try {\n        // Bug #1: Safari requires a successCallback.\n        const promise = nativeContext.decodeAudioData(uint32Array.buffer, () => {\n            // Ignore the success callback.\n        });\n        if (promise === undefined) {\n            return false;\n        }\n        promise.catch(() => {\n            // Ignore rejected errors.\n        });\n        return true;\n    }\n    catch (_a) {\n        // Ignore errors.\n    }\n    return false;\n};\n//# sourceMappingURL=/build/es2018/helpers/test-promise-support.js.map","import { testPromiseSupport } from '../helpers/test-promise-support';\nconst DEFAULT_OPTIONS = {\n    numberOfChannels: 1\n};\nexport const createMinimalOfflineAudioContextConstructor = (cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, minimalBaseAudioContextConstructor, startRendering) => {\n    return class MinimalOfflineAudioContext extends minimalBaseAudioContextConstructor {\n        constructor(options) {\n            const { length, numberOfChannels, sampleRate } = { ...DEFAULT_OPTIONS, ...options };\n            const nativeOfflineAudioContext = createNativeOfflineAudioContext(numberOfChannels, length, sampleRate);\n            // #21 Safari does not support promises and therefore would fire the statechange event before the promise can be resolved.\n            if (!cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeOfflineAudioContext))) {\n                nativeOfflineAudioContext.addEventListener('statechange', (() => {\n                    let i = 0;\n                    const delayStateChangeEvent = (event) => {\n                        if (this._state === 'running') {\n                            if (i > 0) {\n                                nativeOfflineAudioContext.removeEventListener('statechange', delayStateChangeEvent);\n                                event.stopImmediatePropagation();\n                                this._waitForThePromiseToSettle(event);\n                            }\n                            else {\n                                i += 1;\n                            }\n                        }\n                    };\n                    return delayStateChangeEvent;\n                })());\n            }\n            super(nativeOfflineAudioContext, numberOfChannels);\n            this._length = length;\n            this._nativeOfflineAudioContext = nativeOfflineAudioContext;\n            this._state = null;\n        }\n        get length() {\n            // Bug #17: Safari does not yet expose the length.\n            if (this._nativeOfflineAudioContext.length === undefined) {\n                return this._length;\n            }\n            return this._nativeOfflineAudioContext.length;\n        }\n        get state() {\n            return (this._state === null) ? this._nativeOfflineAudioContext.state : this._state;\n        }\n        startRendering() {\n            /*\n             * Bug #9 & #59: It is theoretically possible that startRendering() will first render a partialOfflineAudioContext. Therefore\n             * the state of the nativeOfflineAudioContext might no transition to running immediately.\n             */\n            if (this._state === 'running') {\n                return Promise.reject(createInvalidStateError());\n            }\n            this._state = 'running';\n            return startRendering(this.destination, this._nativeOfflineAudioContext)\n                .then((audioBuffer) => {\n                this._state = null;\n                /*\n                 * Bug #50: Deleting the AudioGraph is currently not possible anymore.\n                 * deleteAudioGraph(this, this._nativeOfflineAudioContext);\n                 */\n                return audioBuffer;\n            })\n                // @todo This could be written more elegantly when Promise.finally() becomes avalaible.\n                .catch((err) => {\n                this._state = null;\n                /*\n                 * Bug #50: Deleting the AudioGraph is currently not possible anymore.\n                 * deleteAudioGraph(this, this._nativeOfflineAudioContext);\n                 */\n                throw err; // tslint:disable-line:rxjs-throw-error\n            });\n        }\n        _waitForThePromiseToSettle(event) {\n            if (this._state === null) {\n                this._nativeOfflineAudioContext.dispatchEvent(event);\n            }\n            else {\n                setTimeout(() => this._waitForThePromiseToSettle(event));\n            }\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/minimal-offline-audio-context-constructor.js.map","export const assignNativeAudioNodeOption = (nativeAudioNode, options, option) => {\n    const value = options[option];\n    if (value !== undefined && value !== nativeAudioNode[option]) {\n        nativeAudioNode[option] = value;\n    }\n};\n//# sourceMappingURL=/build/es2018/helpers/assign-native-audio-node-option.js.map","import { assignNativeAudioNodeOption } from './assign-native-audio-node-option';\nexport const assignNativeAudioNodeOptions = (nativeAudioNode, options) => {\n    assignNativeAudioNodeOption(nativeAudioNode, options, 'channelCount');\n    assignNativeAudioNodeOption(nativeAudioNode, options, 'channelCountMode');\n    assignNativeAudioNodeOption(nativeAudioNode, options, 'channelInterpretation');\n};\n//# sourceMappingURL=/build/es2018/helpers/assign-native-audio-node-options.js.map","export const testAnalyserNodeGetFloatTimeDomainDataMethodSupport = (nativeAnalyserNode) => {\n    return typeof nativeAnalyserNode.getFloatTimeDomainData === 'function';\n};\n//# sourceMappingURL=/build/es2018/helpers/test-analyser-node-get-float-time-domain-data-method-support.js.map","export const assignNativeAudioNodeAudioParamValue = (nativeAudioNode, options, audioParam) => {\n    const value = options[audioParam];\n    if (value !== undefined && value !== nativeAudioNode[audioParam].value) {\n        nativeAudioNode[audioParam].value = value;\n    }\n};\n//# sourceMappingURL=/build/es2018/helpers/assign-native-audio-node-audio-param-value.js.map","export const wrapAudioScheduledSourceNodeStartMethodNegativeParameters = (nativeAudioScheduledSourceNode) => {\n    nativeAudioScheduledSourceNode.start = ((start) => {\n        return (when = 0, offset = 0, duration) => {\n            if ((typeof duration === 'number' && duration < 0) || offset < 0 || when < 0) {\n                throw new RangeError(\"The parameters can't be negative.\");\n            }\n            // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.\n            start.call(nativeAudioScheduledSourceNode, when, offset, duration);\n        };\n    })(nativeAudioScheduledSourceNode.start);\n};\n//# sourceMappingURL=/build/es2018/helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters.js.map","export const wrapAudioScheduledSourceNodeStopMethodNegativeParameters = (nativeAudioScheduledSourceNode) => {\n    nativeAudioScheduledSourceNode.stop = ((stop) => {\n        return (when = 0) => {\n            if (when < 0) {\n                throw new RangeError(\"The parameter can't be negative.\");\n            }\n            stop.call(nativeAudioScheduledSourceNode, when);\n        };\n    })(nativeAudioScheduledSourceNode.stop);\n};\n//# sourceMappingURL=/build/es2018/helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters.js.map","export const computeBufferSize = (baseLatency, sampleRate) => {\n    if (baseLatency === null) {\n        return 512;\n    }\n    return Math.max(512, Math.min(16384, Math.pow(2, Math.round(Math.log2(baseLatency * sampleRate)))));\n};\n//# sourceMappingURL=/build/es2018/helpers/compute-buffer-size.js.map","import { cloneAudioWorkletNodeOptions } from './clone-audio-worklet-node-options';\nexport const createAudioWorkletProcessorPromise = async (processorConstructor, audioWorkletNodeOptions) => {\n    const clonedAudioWorkletNodeOptions = await cloneAudioWorkletNodeOptions(audioWorkletNodeOptions);\n    return new processorConstructor(clonedAudioWorkletNodeOptions);\n};\n//# sourceMappingURL=/build/es2018/helpers/create-audio-worklet-processor-promise.js.map","export const cloneAudioWorkletNodeOptions = (audioWorkletNodeOptions) => {\n    return new Promise((resolve, reject) => {\n        const { port1, port2 } = new MessageChannel();\n        port1.onmessage = ({ data }) => {\n            port1.close();\n            port2.close();\n            resolve(data);\n        };\n        port1.onmessageerror = ({ data }) => {\n            port1.close();\n            port2.close();\n            reject(data);\n        };\n        // This will throw an error if the audioWorkletNodeOptions are not clonable.\n        port2.postMessage(audioWorkletNodeOptions);\n    });\n};\n//# sourceMappingURL=/build/es2018/helpers/clone-audio-worklet-node-options.js.map","export const interceptConnections = (original, interceptor) => {\n    original.connect = interceptor.connect.bind(interceptor);\n    original.disconnect = interceptor.disconnect.bind(interceptor);\n    return original;\n};\n//# sourceMappingURL=/build/es2018/helpers/intercept-connections.js.map","import { computeBufferSize } from '../helpers/compute-buffer-size';\nimport { filterBuffer } from '../helpers/filter-buffer';\nimport { interceptConnections } from '../helpers/intercept-connections';\nfunction divide(a, b) {\n    const denominator = (b[0] * b[0]) + (b[1] * b[1]);\n    return [(((a[0] * b[0]) + (a[1] * b[1])) / denominator), (((a[1] * b[0]) - (a[0] * b[1])) / denominator)];\n}\nfunction multiply(a, b) {\n    return [((a[0] * b[0]) - (a[1] * b[1])), ((a[0] * b[1]) + (a[1] * b[0]))];\n}\nfunction evaluatePolynomial(coefficient, z) {\n    let result = [0, 0];\n    for (let i = coefficient.length - 1; i >= 0; i -= 1) {\n        result = multiply(result, z);\n        result[0] += coefficient[i];\n    }\n    return result;\n}\nexport const createNativeIIRFilterNodeFakerFactory = (createInvalidAccessError, createInvalidStateError, createNativeScriptProcessorNode, createNotSupportedError) => {\n    return (nativeContext, baseLatency, { channelCount, channelCountMode, channelInterpretation, feedback, feedforward }) => {\n        const bufferSize = computeBufferSize(baseLatency, nativeContext.sampleRate);\n        const feedbackLength = feedback.length;\n        const feedforwardLength = feedforward.length;\n        const minLength = Math.min(feedbackLength, feedforwardLength);\n        if (feedback.length === 0 || feedback.length > 20) {\n            throw createNotSupportedError();\n        }\n        if (feedback[0] === 0) {\n            throw createInvalidStateError();\n        }\n        if (feedforward.length === 0 || feedforward.length > 20) {\n            throw createNotSupportedError();\n        }\n        if (feedforward[0] === 0) {\n            throw createInvalidStateError();\n        }\n        if (feedback[0] !== 1) {\n            for (let i = 0; i < feedforwardLength; i += 1) {\n                feedforward[i] /= feedback[0];\n            }\n            for (let i = 1; i < feedbackLength; i += 1) {\n                feedback[i] /= feedback[0];\n            }\n        }\n        const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, bufferSize, channelCount, channelCount);\n        scriptProcessorNode.channelCount = channelCount;\n        scriptProcessorNode.channelCountMode = channelCountMode;\n        scriptProcessorNode.channelInterpretation = channelInterpretation;\n        const bufferLength = 32;\n        const bufferIndexes = [];\n        const xBuffers = [];\n        const yBuffers = [];\n        for (let i = 0; i < channelCount; i += 1) {\n            bufferIndexes.push(0);\n            const xBuffer = new Float32Array(bufferLength);\n            const yBuffer = new Float32Array(bufferLength);\n            xBuffer.fill(0);\n            yBuffer.fill(0);\n            xBuffers.push(xBuffer);\n            yBuffers.push(yBuffer);\n        }\n        scriptProcessorNode.onaudioprocess = (event) => {\n            const inputBuffer = event.inputBuffer;\n            const outputBuffer = event.outputBuffer;\n            const numberOfChannels = inputBuffer.numberOfChannels;\n            for (let i = 0; i < numberOfChannels; i += 1) {\n                const input = inputBuffer.getChannelData(i);\n                const output = outputBuffer.getChannelData(i);\n                bufferIndexes[i] = filterBuffer(feedback, feedbackLength, feedforward, feedforwardLength, minLength, xBuffers[i], yBuffers[i], bufferIndexes[i], bufferLength, input, output);\n            }\n        };\n        const nyquist = nativeContext.sampleRate / 2;\n        const nativeIIRFilterNodeFaker = {\n            get bufferSize() {\n                return bufferSize;\n            },\n            get channelCount() {\n                return scriptProcessorNode.channelCount;\n            },\n            set channelCount(value) {\n                scriptProcessorNode.channelCount = value;\n            },\n            get channelCountMode() {\n                return scriptProcessorNode.channelCountMode;\n            },\n            set channelCountMode(value) {\n                scriptProcessorNode.channelCountMode = value;\n            },\n            get channelInterpretation() {\n                return scriptProcessorNode.channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                scriptProcessorNode.channelInterpretation = value;\n            },\n            get context() {\n                return scriptProcessorNode.context;\n            },\n            get inputs() {\n                return [scriptProcessorNode];\n            },\n            get numberOfInputs() {\n                return scriptProcessorNode.numberOfInputs;\n            },\n            get numberOfOutputs() {\n                return scriptProcessorNode.numberOfOutputs;\n            },\n            addEventListener(...args) {\n                // @todo Dissallow adding an audioprocess listener.\n                return scriptProcessorNode.addEventListener(args[0], args[1], args[2]);\n            },\n            dispatchEvent(...args) {\n                return scriptProcessorNode.dispatchEvent(args[0]);\n            },\n            getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {\n                if ((frequencyHz.length !== magResponse.length) || (magResponse.length !== phaseResponse.length)) {\n                    throw createInvalidAccessError();\n                }\n                const length = frequencyHz.length;\n                for (let i = 0; i < length; i += 1) {\n                    const omega = -Math.PI * (frequencyHz[i] / nyquist);\n                    const z = [Math.cos(omega), Math.sin(omega)];\n                    const numerator = evaluatePolynomial(feedforward, z);\n                    const denominator = evaluatePolynomial(feedback, z);\n                    const response = divide(numerator, denominator);\n                    magResponse[i] = Math.sqrt((response[0] * response[0]) + (response[1] * response[1]));\n                    phaseResponse[i] = Math.atan2(response[1], response[0]);\n                }\n            },\n            removeEventListener(...args) {\n                return scriptProcessorNode.removeEventListener(args[0], args[1], args[2]);\n            }\n        };\n        return interceptConnections(nativeIIRFilterNodeFaker, scriptProcessorNode);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-iir-filter-node-faker-factory.js.map","export const createNotSupportedError = () => {\n    try {\n        return new DOMException('', 'NotSupportedError');\n    }\n    catch (err) {\n        // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.\n        err.code = 9;\n        err.name = 'NotSupportedError';\n        return err;\n    }\n};\n//# sourceMappingURL=/build/es2018/factories/not-supported-error.js.map","import { testPromiseSupport } from '../helpers/test-promise-support';\nconst DEFAULT_OPTIONS = {\n    numberOfChannels: 1\n};\nexport const createOfflineAudioContextConstructor = (baseAudioContextConstructor, cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, startRendering) => {\n    return class OfflineAudioContext extends baseAudioContextConstructor {\n        constructor(a, b, c) {\n            let options;\n            if (typeof a === 'number' && b !== undefined && c !== undefined) {\n                options = { length: b, numberOfChannels: a, sampleRate: c };\n            }\n            else if (typeof a === 'object') {\n                options = a;\n            }\n            else {\n                throw new Error('The given parameters are not valid.');\n            }\n            const { length, numberOfChannels, sampleRate } = { ...DEFAULT_OPTIONS, ...options };\n            const nativeOfflineAudioContext = createNativeOfflineAudioContext(numberOfChannels, length, sampleRate);\n            // #21 Safari does not support promises and therefore would fire the statechange event before the promise can be resolved.\n            if (!cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeOfflineAudioContext))) {\n                nativeOfflineAudioContext.addEventListener('statechange', (() => {\n                    let i = 0;\n                    const delayStateChangeEvent = (event) => {\n                        if (this._state === 'running') {\n                            if (i > 0) {\n                                nativeOfflineAudioContext.removeEventListener('statechange', delayStateChangeEvent);\n                                event.stopImmediatePropagation();\n                                this._waitForThePromiseToSettle(event);\n                            }\n                            else {\n                                i += 1;\n                            }\n                        }\n                    };\n                    return delayStateChangeEvent;\n                })());\n            }\n            super(nativeOfflineAudioContext, numberOfChannels);\n            this._length = length;\n            this._nativeOfflineAudioContext = nativeOfflineAudioContext;\n            this._state = null;\n        }\n        get length() {\n            // Bug #17: Safari does not yet expose the length.\n            if (this._nativeOfflineAudioContext.length === undefined) {\n                return this._length;\n            }\n            return this._nativeOfflineAudioContext.length;\n        }\n        get state() {\n            return (this._state === null) ? this._nativeOfflineAudioContext.state : this._state;\n        }\n        startRendering() {\n            /*\n             * Bug #9 & #59: It is theoretically possible that startRendering() will first render a partialOfflineAudioContext. Therefore\n             * the state of the nativeOfflineAudioContext might no transition to running immediately.\n             */\n            if (this._state === 'running') {\n                return Promise.reject(createInvalidStateError());\n            }\n            this._state = 'running';\n            return startRendering(this.destination, this._nativeOfflineAudioContext)\n                .then((audioBuffer) => {\n                this._state = null;\n                /*\n                 * Bug #50: Deleting the AudioGraph is currently not possible anymore.\n                 * deleteAudioGraph(this, this._nativeOfflineAudioContext);\n                 */\n                return audioBuffer;\n            })\n                // @todo This could be written more elegantly when Promise.finally() becomes avalaible.\n                .catch((err) => {\n                this._state = null;\n                /*\n                 * Bug #50: Deleting the AudioGraph is currently not possible anymore.\n                 * deleteAudioGraph(this, this._nativeOfflineAudioContext);\n                 */\n                throw err; // tslint:disable-line:rxjs-throw-error\n            });\n        }\n        _waitForThePromiseToSettle(event) {\n            if (this._state === null) {\n                this._nativeOfflineAudioContext.dispatchEvent(event);\n            }\n            else {\n                setTimeout(() => this._waitForThePromiseToSettle(event));\n            }\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/offline-audio-context-constructor.js.map","import { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassive } from '../helpers/set-internal-state-to-passive';\nimport { wrapEventListener } from '../helpers/wrap-event-listener';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    detune: 0,\n    frequency: 440,\n    type: 'sine'\n};\nexport const createOscillatorNodeConstructor = (audioNodeConstructor, createAudioParam, createInvalidStateError, createNativeOscillatorNode, createOscillatorNodeRenderer, getNativeContext, isNativeOfflineAudioContext) => {\n    return class OscillatorNode extends audioNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeOscillatorNode = createNativeOscillatorNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const oscillatorNodeRenderer = ((isOffline) ? createOscillatorNodeRenderer() : null);\n            const nyquist = context.sampleRate / 2;\n            super(context, false, nativeOscillatorNode, oscillatorNodeRenderer);\n            // Bug #81: Edge, Firefox & Safari do not export the correct values for maxValue and minValue.\n            this._detune = createAudioParam(this, isOffline, nativeOscillatorNode.detune, 153600, -153600);\n            // Bug #76: Edge & Safari do not export the correct values for maxValue and minValue.\n            this._frequency = createAudioParam(this, isOffline, nativeOscillatorNode.frequency, nyquist, -nyquist);\n            this._nativeOscillatorNode = nativeOscillatorNode;\n            this._onended = null;\n            this._oscillatorNodeRenderer = oscillatorNodeRenderer;\n            if (this._oscillatorNodeRenderer !== null && mergedOptions.periodicWave !== undefined) {\n                this._oscillatorNodeRenderer.periodicWave =\n                    mergedOptions.periodicWave;\n            }\n        }\n        get detune() {\n            return this._detune;\n        }\n        get frequency() {\n            return this._frequency;\n        }\n        get onended() {\n            return this._onended;\n        }\n        set onended(value) {\n            const wrappedListener = wrapEventListener(this, value);\n            this._nativeOscillatorNode.onended = wrappedListener;\n            const nativeOnEnded = this._nativeOscillatorNode.onended;\n            this._onended = (nativeOnEnded === wrappedListener) ? value : nativeOnEnded;\n        }\n        get type() {\n            return this._nativeOscillatorNode.type;\n        }\n        set type(value) {\n            this._nativeOscillatorNode.type = value;\n            // Bug #57: Edge will not throw an error when assigning the type to 'custom'. But it still will change the value.\n            if (value === 'custom') {\n                throw createInvalidStateError();\n            }\n            if (this._oscillatorNodeRenderer !== null) {\n                this._oscillatorNodeRenderer.periodicWave = null;\n            }\n        }\n        setPeriodicWave(periodicWave) {\n            this._nativeOscillatorNode.setPeriodicWave(periodicWave);\n            if (this._oscillatorNodeRenderer !== null) {\n                this._oscillatorNodeRenderer.periodicWave = periodicWave;\n            }\n        }\n        start(when = 0) {\n            this._nativeOscillatorNode.start(when);\n            if (this._oscillatorNodeRenderer !== null) {\n                this._oscillatorNodeRenderer.start = when;\n            }\n            else {\n                setInternalStateToActive(this);\n                const resetInternalStateToPassive = () => {\n                    this._nativeOscillatorNode.removeEventListener('ended', resetInternalStateToPassive);\n                    // @todo Determine a meaningful delay instead of just using one second.\n                    setTimeout(() => setInternalStateToPassive(this), 1000);\n                };\n                this._nativeOscillatorNode.addEventListener('ended', resetInternalStateToPassive);\n            }\n        }\n        stop(when = 0) {\n            this._nativeOscillatorNode.stop(when);\n            if (this._oscillatorNodeRenderer !== null) {\n                this._oscillatorNodeRenderer.stop = when;\n            }\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/oscillator-node-constructor.js.map","import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'clamped-max',\n    channelInterpretation: 'speakers',\n    coneInnerAngle: 360,\n    coneOuterAngle: 360,\n    coneOuterGain: 0,\n    distanceModel: 'inverse',\n    maxDistance: 10000,\n    orientationX: 1,\n    orientationY: 0,\n    orientationZ: 0,\n    panningModel: 'equalpower',\n    positionX: 0,\n    positionY: 0,\n    positionZ: 0,\n    refDistance: 1,\n    rolloffFactor: 1\n};\nexport const createPannerNodeConstructor = (audioNodeConstructor, createAudioParam, createNativePannerNode, createPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext) => {\n    return class PannerNode extends audioNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativePannerNode = createNativePannerNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const pannerNodeRenderer = ((isOffline) ? createPannerNodeRenderer() : null);\n            super(context, false, nativePannerNode, pannerNodeRenderer);\n            this._nativePannerNode = nativePannerNode;\n            // Bug #74: Edge & Safari do not export the correct values for maxValue and minValue for GainNodes.\n            this._orientationX = createAudioParam(this, isOffline, nativePannerNode.orientationX, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            this._orientationY = createAudioParam(this, isOffline, nativePannerNode.orientationY, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            this._orientationZ = createAudioParam(this, isOffline, nativePannerNode.orientationZ, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            this._positionX = createAudioParam(this, isOffline, nativePannerNode.positionX, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            this._positionY = createAudioParam(this, isOffline, nativePannerNode.positionY, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            this._positionZ = createAudioParam(this, isOffline, nativePannerNode.positionZ, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n        }\n        get coneInnerAngle() {\n            return this._nativePannerNode.coneInnerAngle;\n        }\n        set coneInnerAngle(value) {\n            this._nativePannerNode.coneInnerAngle = value;\n        }\n        get coneOuterAngle() {\n            return this._nativePannerNode.coneOuterAngle;\n        }\n        set coneOuterAngle(value) {\n            this._nativePannerNode.coneOuterAngle = value;\n        }\n        get coneOuterGain() {\n            return this._nativePannerNode.coneOuterGain;\n        }\n        set coneOuterGain(value) {\n            this._nativePannerNode.coneOuterGain = value;\n        }\n        get distanceModel() {\n            return this._nativePannerNode.distanceModel;\n        }\n        set distanceModel(value) {\n            this._nativePannerNode.distanceModel = value;\n        }\n        get maxDistance() {\n            return this._nativePannerNode.maxDistance;\n        }\n        set maxDistance(value) {\n            this._nativePannerNode.maxDistance = value;\n        }\n        get orientationX() {\n            return this._orientationX;\n        }\n        get orientationY() {\n            return this._orientationY;\n        }\n        get orientationZ() {\n            return this._orientationZ;\n        }\n        get panningModel() {\n            return this._nativePannerNode.panningModel;\n        }\n        set panningModel(value) {\n            this._nativePannerNode.panningModel = value;\n        }\n        get positionX() {\n            return this._positionX;\n        }\n        get positionY() {\n            return this._positionY;\n        }\n        get positionZ() {\n            return this._positionZ;\n        }\n        get refDistance() {\n            return this._nativePannerNode.refDistance;\n        }\n        set refDistance(value) {\n            this._nativePannerNode.refDistance = value;\n        }\n        get rolloffFactor() {\n            return this._nativePannerNode.rolloffFactor;\n        }\n        set rolloffFactor(value) {\n            this._nativePannerNode.rolloffFactor = value;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/panner-node-constructor.js.map","const DEFAULT_OPTIONS = {\n    disableNormalization: false\n};\nexport const createPeriodicWaveConstructor = (createNativePeriodicWave, getNativeContext, periodicWaveStore) => {\n    return class PeriodicWave {\n        constructor(context, options) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const periodicWave = createNativePeriodicWave(nativeContext, mergedOptions);\n            periodicWaveStore.add(periodicWave);\n            // This does violate all good pratices but it is used here to simplify the handling of periodic waves.\n            return periodicWave;\n        }\n        static [Symbol.hasInstance](instance) {\n            return (instance !== null && typeof instance === 'object' && Object.getPrototypeOf(instance) === PeriodicWave.prototype)\n                || (periodicWaveStore.has(instance));\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/periodic-wave-constructor.js.map","const DEFAULT_OPTIONS = {\n    channelCount: 2,\n    /*\n     * Bug #105: The channelCountMode should be 'clamped-max' according to the spec but is set to 'explicit' to achieve consistent\n     * behavior.\n     */\n    channelCountMode: 'explicit',\n    channelInterpretation: 'speakers',\n    pan: 0\n};\nexport const createStereoPannerNodeConstructor = (audioNodeConstructor, createAudioParam, createNativeStereoPannerNode, createStereoPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext) => {\n    return class StereoPannerNode extends audioNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeStereoPannerNode = createNativeStereoPannerNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const stereoPannerNodeRenderer = ((isOffline) ? createStereoPannerNodeRenderer() : null);\n            super(context, false, nativeStereoPannerNode, stereoPannerNodeRenderer);\n            // Bug #106: Edge does not export a maxValue and minValue property.\n            this._pan = createAudioParam(this, isOffline, nativeStereoPannerNode.pan, 1, -1);\n        }\n        get pan() {\n            return this._pan;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/stereo-panner-node-constructor.js.map","export const createUnknownError = () => {\n    try {\n        return new DOMException('', 'UnknownError');\n    }\n    catch (err) {\n        // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.\n        err.name = 'UnknownError';\n        return err;\n    }\n};\n//# sourceMappingURL=/build/es2018/factories/unknown-error.js.map","const DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    curve: null,\n    oversample: 'none'\n};\nexport const createWaveShaperNodeConstructor = (audioNodeConstructor, createInvalidStateError, createNativeWaveShaperNode, createWaveShaperNodeRenderer, getNativeContext, isNativeOfflineAudioContext) => {\n    return class WaveShaperNode extends audioNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeWaveShaperNode = createNativeWaveShaperNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const waveShaperNodeRenderer = ((isOffline) ? createWaveShaperNodeRenderer() : null);\n            // @todo Add a mechanism to only switch a WaveShaperNode to active while it is connected.\n            super(context, true, nativeWaveShaperNode, waveShaperNodeRenderer);\n            this._isCurveNullified = false;\n            this._nativeWaveShaperNode = nativeWaveShaperNode;\n        }\n        get curve() {\n            if (this._isCurveNullified) {\n                return null;\n            }\n            return this._nativeWaveShaperNode.curve;\n        }\n        set curve(value) {\n            // Bug #103: Safari does not allow to set the curve to null.\n            if (value === null) {\n                this._isCurveNullified = true;\n                this._nativeWaveShaperNode.curve = new Float32Array([0, 0]);\n            }\n            else {\n                // Bug #102: Safari does not throw an InvalidStateError when the curve has less than two samples.\n                // Bug #104: Chrome will throw an InvalidAccessError when the curve has less than two samples.\n                if (value.length < 2) {\n                    throw createInvalidStateError();\n                }\n                this._isCurveNullified = false;\n                this._nativeWaveShaperNode.curve = value;\n            }\n        }\n        get oversample() {\n            return this._nativeWaveShaperNode.oversample;\n        }\n        set oversample(value) {\n            this._nativeWaveShaperNode.oversample = value;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/wave-shaper-node-constructor.js.map","export const isDCCurve = (curve) => {\n    if (curve === null) {\n        return false;\n    }\n    const length = curve.length;\n    if (length % 2 !== 0) {\n        return (curve[Math.floor(length / 2)] !== 0);\n    }\n    return (curve[(length / 2) - 1] + curve[length / 2] !== 0);\n};\n//# sourceMappingURL=/build/es2018/helpers/is-dc-curve.js.map","export const overwriteAccessors = (object, property, createGetter, createSetter) => {\n    let prototype = Object.getPrototypeOf(object);\n    while (!prototype.hasOwnProperty(property)) {\n        prototype = Object.getPrototypeOf(prototype);\n    }\n    const { get, set } = Object.getOwnPropertyDescriptor(prototype, property);\n    Object.defineProperty(object, property, { get: createGetter(get), set: createSetter(set) });\n};\n//# sourceMappingURL=/build/es2018/helpers/overwrite-accessors.js.map","import { createCancelAndHoldAutomationEvent, createCancelScheduledValuesAutomationEvent, createExponentialRampToValueAutomationEvent, createLinearRampToValueAutomationEvent, createSetTargetAutomationEvent, createSetValueAutomationEvent, createSetValueCurveAutomationEvent } from 'automation-events';\nimport { createAbortError } from './factories/abort-error';\nimport { createAddAudioNodeConnections } from './factories/add-audio-node-connections';\nimport { createAddAudioParamConnections } from './factories/add-audio-param-connections';\nimport { createAddAudioWorkletModule } from './factories/add-audio-worklet-module';\nimport { createAnalyserNodeConstructor } from './factories/analyser-node-constructor';\nimport { createAnalyserNodeRendererFactory } from './factories/analyser-node-renderer-factory';\nimport { createAudioBufferConstructor } from './factories/audio-buffer-constructor';\nimport { createAudioBufferSourceNodeConstructor } from './factories/audio-buffer-source-node-constructor';\nimport { createAudioBufferSourceNodeRendererFactory } from './factories/audio-buffer-source-node-renderer-factory';\nimport { createAudioContextConstructor } from './factories/audio-context-constructor';\nimport { createAudioDestinationNodeConstructor } from './factories/audio-destination-node-constructor';\nimport { createAudioDestinationNodeRenderer } from './factories/audio-destination-node-renderer-factory';\nimport { createAudioListenerFactory } from './factories/audio-listener-factory';\nimport { createAudioNodeConstructor } from './factories/audio-node-constructor';\nimport { createAudioParamFactory } from './factories/audio-param-factory';\nimport { createAudioParamRenderer } from './factories/audio-param-renderer';\nimport { createAudioWorkletNodeConstructor } from './factories/audio-worklet-node-constructor';\nimport { createAudioWorkletNodeRendererFactory } from './factories/audio-worklet-node-renderer-factory';\nimport { createBaseAudioContextConstructor } from './factories/base-audio-context-constructor';\nimport { createBiquadFilterNodeConstructor } from './factories/biquad-filter-node-constructor';\nimport { createBiquadFilterNodeRendererFactory } from './factories/biquad-filter-node-renderer-factory';\nimport { createCacheTestResult } from './factories/cache-test-result';\nimport { createChannelMergerNodeConstructor } from './factories/channel-merger-node-constructor';\nimport { createChannelMergerNodeRendererFactory } from './factories/channel-merger-node-renderer-factory';\nimport { createChannelSplitterNodeConstructor } from './factories/channel-splitter-node-constructor';\nimport { createChannelSplitterNodeRendererFactory } from './factories/channel-splitter-node-renderer-factory';\nimport { createConnectAudioParam } from './factories/connect-audio-param';\nimport { createConnectMultipleOutputs } from './factories/connect-multiple-outputs';\nimport { createConnectedNativeAudioBufferSourceNodeFactory } from './factories/connected-native-audio-buffer-source-node-factory';\nimport { createConstantSourceNodeConstructor } from './factories/constant-source-node-constructor';\nimport { createConstantSourceNodeRendererFactory } from './factories/constant-source-node-renderer-factory';\nimport { createConvertNumberToUnsignedLong } from './factories/convert-number-to-unsigned-long';\nimport { createConvolverNodeConstructor } from './factories/convolver-node-constructor';\nimport { createConvolverNodeRendererFactory } from './factories/convolver-node-renderer-factory';\nimport { createCreateNativeOfflineAudioContext } from './factories/create-native-offline-audio-context';\nimport { createDataCloneError } from './factories/data-clone-error';\nimport { createDecodeAudioData } from './factories/decode-audio-data';\nimport { createDecrementCycleCounter } from './factories/decrement-cycle-counter';\nimport { createDelayNodeConstructor } from './factories/delay-node-constructor';\nimport { createDelayNodeRendererFactory } from './factories/delay-node-renderer-factory';\nimport { createDetectCycles } from './factories/detect-cycles';\nimport { createDisconnectMultipleOutputs } from './factories/disconnect-multiple-outputs';\nimport { createDynamicsCompressorNodeConstructor } from './factories/dynamics-compressor-node-constructor';\nimport { createDynamicsCompressorNodeRendererFactory } from './factories/dynamics-compressor-node-renderer-factory';\nimport { createEncodingError } from './factories/encoding-error';\nimport { createEvaluateSource } from './factories/evaluate-source';\nimport { createExposeCurrentFrameAndCurrentTime } from './factories/expose-current-frame-and-current-time';\nimport { createFetchSource } from './factories/fetch-source';\nimport { createGainNodeConstructor } from './factories/gain-node-constructor';\nimport { createGainNodeRendererFactory } from './factories/gain-node-renderer-factory';\nimport { createGetAudioNodeRenderer } from './factories/get-audio-node-renderer';\nimport { createGetAudioParamRenderer } from './factories/get-audio-param-renderer';\nimport { createGetBackupNativeContext } from './factories/get-backup-native-context';\nimport { createGetNativeContext } from './factories/get-native-context';\nimport { createIIRFilterNodeConstructor } from './factories/iir-filter-node-constructor';\nimport { createIIRFilterNodeRendererFactory } from './factories/iir-filter-node-renderer-factory';\nimport { createIncrementCycleCounterFactory } from './factories/increment-cycle-counter-factory';\nimport { createIndexSizeError } from './factories/index-size-error';\nimport { createInvalidAccessError } from './factories/invalid-access-error';\nimport { createInvalidStateError } from './factories/invalid-state-error';\nimport { createIsAnyAudioContext } from './factories/is-any-audio-context';\nimport { createIsAnyAudioNode } from './factories/is-any-audio-node';\nimport { createIsAnyAudioParam } from './factories/is-any-audio-param';\nimport { createIsAnyOfflineAudioContext } from './factories/is-any-offline-audio-context';\nimport { createIsNativeAudioContext } from './factories/is-native-audio-context';\nimport { createIsNativeAudioNode } from './factories/is-native-audio-node';\nimport { createIsNativeAudioParam } from './factories/is-native-audio-param';\nimport { createIsNativeContext } from './factories/is-native-context';\nimport { createIsNativeOfflineAudioContext } from './factories/is-native-offline-audio-context';\nimport { createIsSecureContext } from './factories/is-secure-context';\nimport { createIsSupportedPromise } from './factories/is-supported-promise';\nimport { createMediaElementAudioSourceNodeConstructor } from './factories/media-element-audio-source-node-constructor';\nimport { createMediaStreamAudioSourceNodeConstructor } from './factories/media-stream-audio-source-node-constructor';\nimport { createMediaStreamTrackAudioSourceNodeConstructor } from './factories/media-stream-track-audio-source-node-constructor';\nimport { createMinimalAudioContextConstructor } from './factories/minimal-audio-context-constructor';\nimport { createMinimalBaseAudioContextConstructor } from './factories/minimal-base-audio-context-constructor';\nimport { createMinimalOfflineAudioContextConstructor } from './factories/minimal-offline-audio-context-constructor';\nimport { createMonitorConnections } from './factories/monitor-connections';\nimport { createNativeAnalyserNodeFactory } from './factories/native-analyser-node-factory';\nimport { createNativeAudioBufferConstructor } from './factories/native-audio-buffer-constructor';\nimport { createNativeAudioBufferSourceNodeFactory } from './factories/native-audio-buffer-source-node-factory';\nimport { createNativeAudioContextConstructor } from './factories/native-audio-context-constructor';\nimport { createNativeAudioDestinationNodeFactory } from './factories/native-audio-destination-node';\nimport { createNativeAudioNodeFactory } from './factories/native-audio-node-factory';\nimport { createNativeAudioWorkletNodeConstructor } from './factories/native-audio-worklet-node-constructor';\nimport { createNativeAudioWorkletNodeFactory } from './factories/native-audio-worklet-node-factory';\nimport { createNativeAudioWorkletNodeFakerFactory } from './factories/native-audio-worklet-node-faker-factory';\nimport { createNativeBiquadFilterNodeFactory } from './factories/native-biquad-filter-node-factory';\nimport { createNativeChannelMergerNodeFactory } from './factories/native-channel-merger-node-factory';\nimport { createNativeChannelSplitterNodeFactory } from './factories/native-channel-splitter-node-factory';\nimport { createNativeConstantSourceNodeFactory } from './factories/native-constant-source-node-factory';\nimport { createNativeConstantSourceNodeFakerFactory } from './factories/native-constant-source-node-faker-factory';\nimport { createNativeConvolverNodeFactory } from './factories/native-convolver-node-factory';\nimport { createNativeConvolverNodeFakerFactory } from './factories/native-convolver-node-faker-factory';\nimport { createNativeDelayNodeFactory } from './factories/native-delay-node-factory';\nimport { createNativeDynamicsCompressorNodeFactory } from './factories/native-dynamics-compressor-node-factory';\nimport { createNativeGainNodeFactory } from './factories/native-gain-node-factory';\nimport { createNativeIIRFilterNodeFactory } from './factories/native-iir-filter-node-factory';\nimport { createNativeIIRFilterNodeFakerFactory } from './factories/native-iir-filter-node-faker-factory';\nimport { createNativeMediaElementAudioSourceNodeFactory } from './factories/native-media-element-audio-source-node-factory';\nimport { createNativeMediaStreamAudioSourceNodeFactory } from './factories/native-media-stream-audio-source-node-factory';\nimport { createNativeMediaStreamTrackAudioSourceNodeFactory } from './factories/native-media-stream-track-audio-source-node-factory';\nimport { createNativeOfflineAudioContextConstructor } from './factories/native-offline-audio-context-constructor';\nimport { createNativeOscillatorNodeFactory } from './factories/native-oscillator-node-factory';\nimport { createNativePannerNodeFactory } from './factories/native-panner-node-factory';\nimport { createNativePannerNodeFakerFactory } from './factories/native-panner-node-faker-factory';\nimport { createNativePeriodicWaveFactory } from './factories/native-periodic-wave-factory';\nimport { createNativeScriptProcessorNodeFactory } from './factories/native-script-processor-node-factory';\nimport { createNativeStereoPannerNodeFactory } from './factories/native-stereo-panner-node-factory';\nimport { createNativeStereoPannerNodeFakerFactory } from './factories/native-stereo-panner-node-faker-factory';\nimport { createNativeWaveShaperNodeFactory } from './factories/native-wave-shaper-node-factory';\nimport { createNativeWaveShaperNodeFakerFactory } from './factories/native-wave-shaper-node-faker-factory';\nimport { createNotSupportedError } from './factories/not-supported-error';\nimport { createOfflineAudioContextConstructor } from './factories/offline-audio-context-constructor';\nimport { createOscillatorNodeConstructor } from './factories/oscillator-node-constructor';\nimport { createOscillatorNodeRendererFactory } from './factories/oscillator-node-renderer-factory';\nimport { createPannerNodeConstructor } from './factories/panner-node-constructor';\nimport { createPannerNodeRendererFactory } from './factories/panner-node-renderer-factory';\nimport { createPeriodicWaveConstructor } from './factories/periodic-wave-constructor';\nimport { createRenderAutomation } from './factories/render-automation';\nimport { createRenderInputsOfAudioNode } from './factories/render-inputs-of-audio-node';\nimport { createRenderInputsOfAudioParam } from './factories/render-inputs-of-audio-param';\nimport { createRenderNativeOfflineAudioContext } from './factories/render-native-offline-audio-context';\nimport { createStartRendering } from './factories/start-rendering';\nimport { createStereoPannerNodeConstructor } from './factories/stereo-panner-node-constructor';\nimport { createStereoPannerNodeRendererFactory } from './factories/stereo-panner-node-renderer-factory';\nimport { createTestAudioBufferConstructorSupport } from './factories/test-audio-buffer-constructor-support';\nimport { createTestAudioBufferCopyChannelMethodsSubarraySupport } from './factories/test-audio-buffer-copy-channel-methods-subarray-support';\nimport { createTestAudioBufferSourceNodeStartMethodConsecutiveCallsSupport } from './factories/test-audio-buffer-source-node-start-method-consecutive-calls-support';\nimport { createTestAudioBufferSourceNodeStartMethodDurationParameterSupport } from './factories/test-audio-buffer-source-node-start-method-duration-parameter-support';\nimport { createTestAudioBufferSourceNodeStartMethodOffsetClampingSupport } from './factories/test-audio-buffer-source-node-start-method-offset-clamping-support';\nimport { createTestAudioBufferSourceNodeStopMethodNullifiedBufferSupport } from './factories/test-audio-buffer-source-node-stop-method-nullified-buffer-support';\nimport { createTestAudioContextCloseMethodSupport } from './factories/test-audio-context-close-method-support';\nimport { createTestAudioContextDecodeAudioDataMethodTypeErrorSupport } from './factories/test-audio-context-decode-audio-data-method-type-error-support';\nimport { createTestAudioContextOptionsSupport } from './factories/test-audio-context-options-support';\nimport { createTestAudioNodeConnectMethodSupport } from './factories/test-audio-node-connect-method-support';\nimport { createTestAudioScheduledSourceNodeStartMethodNegativeParametersSupport } from './factories/test-audio-scheduled-source-node-start-method-negative-parameters-support';\nimport { createTestAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport } from './factories/test-audio-scheduled-source-node-stop-method-consecutive-calls-support';\nimport { createTestAudioScheduledSourceNodeStopMethodNegativeParametersSupport } from './factories/test-audio-scheduled-source-node-stop-method-negative-parameters-support';\nimport { createTestAudioWorkletProcessorNoOutputsSupport } from './factories/test-audio-worklet-processor-no-outputs-support';\nimport { createTestConstantSourceNodeAccurateSchedulingSupport } from './factories/test-constant-source-node-accurate-scheduling-support';\nimport { createTestConvolverNodeBufferReassignabilitySupport } from './factories/test-convolver-node-buffer-reassignability-support';\nimport { createTestIsSecureContextSupport } from './factories/test-is-secure-context-support';\nimport { createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport } from './factories/test-media-stream-audio-source-node-media-stream-without-audio-track-support';\nimport { createTestOfflineAudioContextCurrentTimeSupport } from './factories/test-offline-audio-context-current-time-support';\nimport { createTestStereoPannerNodeDefaultValueSupport } from './factories/test-stereo-panner-node-default-value-support';\nimport { createUnknownError } from './factories/unknown-error';\nimport { createWaveShaperNodeConstructor } from './factories/wave-shaper-node-constructor';\nimport { createWaveShaperNodeRendererFactory } from './factories/wave-shaper-node-renderer-factory';\nimport { createWindow } from './factories/window';\nimport { createWrapAudioBufferCopyChannelMethods } from './factories/wrap-audio-buffer-copy-channel-methods';\nimport { createWrapAudioBufferCopyChannelMethodsOutOfBounds } from './factories/wrap-audio-buffer-copy-channel-methods-out-of-bounds';\nimport { createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer } from './factories/wrap-audio-buffer-source-node-stop-method-nullified-buffer';\nimport { createWrapAudioScheduledSourceNodeStopMethodConsecutiveCalls } from './factories/wrap-audio-scheduled-source-node-stop-method-consecutive-calls';\nimport { createWrapChannelMergerNode } from './factories/wrap-channel-merger-node';\nimport { AUDIO_NODE_CONNECTIONS_STORE, AUDIO_NODE_STORE, AUDIO_PARAM_CONNECTIONS_STORE, AUDIO_PARAM_STORE, CONTEXT_STORE, CYCLE_COUNTERS } from './globals';\nimport { connectNativeAudioNodeToNativeAudioNode } from './helpers/connect-native-audio-node-to-native-audio-node';\nimport { disconnectNativeAudioNodeFromNativeAudioNode } from './helpers/disconnect-native-audio-node-from-native-audio-node';\nimport { getAudioNodeConnections } from './helpers/get-audio-node-connections';\nimport { getAudioParamConnections } from './helpers/get-audio-param-connections';\nimport { getNativeAudioNode } from './helpers/get-native-audio-node';\nimport { getNativeAudioParam } from './helpers/get-native-audio-param';\nimport { getValueForKey } from './helpers/get-value-for-key';\nimport { insertElementInSet } from './helpers/insert-element-in-set';\nimport { isActiveAudioNode } from './helpers/is-active-audio-node';\nimport { isDCCurve } from './helpers/is-dc-curve';\nimport { isPartOfACycle } from './helpers/is-part-of-a-cycle';\nimport { overwriteAccessors } from './helpers/overwrite-accessors';\nimport { testAudioBufferCopyChannelMethodsOutOfBoundsSupport } from './helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support';\nimport { testPromiseSupport } from './helpers/test-promise-support';\nimport { testTransferablesSupport } from './helpers/test-transferables-support';\nimport { wrapAudioBufferSourceNodeStartMethodOffsetClamping } from './helpers/wrap-audio-buffer-source-node-start-method-offset-clamping';\nconst cacheTestResult = createCacheTestResult(new Map());\nconst window = createWindow();\nconst nativeOfflineAudioContextConstructor = createNativeOfflineAudioContextConstructor(window);\nconst isNativeOfflineAudioContext = createIsNativeOfflineAudioContext(nativeOfflineAudioContextConstructor);\nconst nativeAudioContextConstructor = createNativeAudioContextConstructor(window);\nconst getBackupNativeContext = createGetBackupNativeContext(isNativeOfflineAudioContext, nativeAudioContextConstructor, nativeOfflineAudioContextConstructor);\nconst createNativeAudioNode = createNativeAudioNodeFactory(getBackupNativeContext);\nconst createNativeAnalyserNode = createNativeAnalyserNodeFactory(cacheTestResult, createIndexSizeError, createNativeAudioNode);\nconst getAudioNodeRenderer = createGetAudioNodeRenderer(getAudioNodeConnections);\nconst renderInputsOfAudioNode = createRenderInputsOfAudioNode(getAudioNodeConnections, getAudioNodeRenderer, isPartOfACycle);\nconst createAnalyserNodeRenderer = createAnalyserNodeRendererFactory(createNativeAnalyserNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst auxiliaryGainNodeStore = new WeakMap();\nconst getNativeContext = createGetNativeContext(CONTEXT_STORE);\nconst audioParamAudioNodeStore = new WeakMap();\nconst isNativeAudioNode = createIsNativeAudioNode(window);\nconst isNativeAudioParam = createIsNativeAudioParam(window);\nconst audioNodeConstructor = createAudioNodeConstructor(createAddAudioNodeConnections(AUDIO_NODE_CONNECTIONS_STORE), auxiliaryGainNodeStore, cacheTestResult, createIncrementCycleCounterFactory(CYCLE_COUNTERS, disconnectNativeAudioNodeFromNativeAudioNode, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, isActiveAudioNode), createIndexSizeError, createInvalidAccessError, createNotSupportedError, createDecrementCycleCounter(connectNativeAudioNodeToNativeAudioNode, CYCLE_COUNTERS, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, getNativeContext, isActiveAudioNode, isNativeOfflineAudioContext), createDetectCycles(audioParamAudioNodeStore, getAudioNodeConnections, getValueForKey), getNativeContext, isNativeAudioNode, isNativeAudioParam, isNativeOfflineAudioContext);\nconst analyserNodeConstructor = createAnalyserNodeConstructor(audioNodeConstructor, createAnalyserNodeRenderer, createIndexSizeError, createNativeAnalyserNode, getNativeContext, isNativeOfflineAudioContext);\nexport { analyserNodeConstructor as AnalyserNode };\nconst audioBufferStore = new WeakSet();\nconst nativeAudioBufferConstructor = createNativeAudioBufferConstructor(window);\nconst convertNumberToUnsignedLong = createConvertNumberToUnsignedLong(new Uint32Array(1));\nconst wrapAudioBufferCopyChannelMethods = createWrapAudioBufferCopyChannelMethods(convertNumberToUnsignedLong, createIndexSizeError);\nconst wrapAudioBufferCopyChannelMethodsOutOfBounds = createWrapAudioBufferCopyChannelMethodsOutOfBounds(convertNumberToUnsignedLong);\nconst audioBufferConstructor = createAudioBufferConstructor(audioBufferStore, cacheTestResult, createNotSupportedError, nativeAudioBufferConstructor, nativeOfflineAudioContextConstructor, createTestAudioBufferConstructorSupport(nativeAudioBufferConstructor), wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);\nexport { audioBufferConstructor as AudioBuffer };\nconst testAudioScheduledSourceNodeStartMethodNegativeParametersSupport = createTestAudioScheduledSourceNodeStartMethodNegativeParametersSupport(createNativeAudioNode);\nconst testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport = createTestAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport(createNativeAudioNode);\nconst testAudioScheduledSourceNodeStopMethodNegativeParametersSupport = createTestAudioScheduledSourceNodeStopMethodNegativeParametersSupport(createNativeAudioNode);\nconst wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls = createWrapAudioScheduledSourceNodeStopMethodConsecutiveCalls(createNativeAudioNode);\nconst renderInputsOfAudioParam = createRenderInputsOfAudioParam(getAudioNodeRenderer, getAudioParamConnections, isPartOfACycle);\nconst connectAudioParam = createConnectAudioParam(renderInputsOfAudioParam);\nconst createNativeAudioBufferSourceNode = createNativeAudioBufferSourceNodeFactory(cacheTestResult, createNativeAudioNode, createTestAudioBufferSourceNodeStartMethodConsecutiveCallsSupport(createNativeAudioNode), createTestAudioBufferSourceNodeStartMethodDurationParameterSupport(nativeOfflineAudioContextConstructor), createTestAudioBufferSourceNodeStartMethodOffsetClampingSupport(createNativeAudioNode), createTestAudioBufferSourceNodeStopMethodNullifiedBufferSupport(createNativeAudioNode), testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioBufferSourceNodeStartMethodOffsetClamping, createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer(overwriteAccessors), wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls);\nconst renderAutomation = createRenderAutomation(createGetAudioParamRenderer(getAudioParamConnections), renderInputsOfAudioParam);\nconst createAudioBufferSourceNodeRenderer = createAudioBufferSourceNodeRendererFactory(connectAudioParam, createNativeAudioBufferSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst createAudioParam = createAudioParamFactory(createAddAudioParamConnections(AUDIO_PARAM_CONNECTIONS_STORE), audioParamAudioNodeStore, AUDIO_PARAM_STORE, createAudioParamRenderer, createCancelAndHoldAutomationEvent, createCancelScheduledValuesAutomationEvent, createExponentialRampToValueAutomationEvent, createLinearRampToValueAutomationEvent, createSetTargetAutomationEvent, createSetValueAutomationEvent, createSetValueCurveAutomationEvent, nativeAudioContextConstructor);\nconst audioBufferSourceNodeConstructor = createAudioBufferSourceNodeConstructor(audioNodeConstructor, createAudioBufferSourceNodeRenderer, createAudioParam, createInvalidStateError, createNativeAudioBufferSourceNode, getNativeContext, isNativeOfflineAudioContext);\nexport { audioBufferSourceNodeConstructor as AudioBufferSourceNode };\nconst createNativeGainNode = createNativeGainNodeFactory(createNativeAudioNode);\nconst audioDestinationNodeConstructor = createAudioDestinationNodeConstructor(audioNodeConstructor, createAudioDestinationNodeRenderer, createIndexSizeError, createInvalidStateError, createNativeAudioDestinationNodeFactory(createNativeGainNode, overwriteAccessors), getNativeContext, isNativeOfflineAudioContext, renderInputsOfAudioNode);\nconst createNativeBiquadFilterNode = createNativeBiquadFilterNodeFactory(createNativeAudioNode);\nconst createBiquadFilterNodeRenderer = createBiquadFilterNodeRendererFactory(connectAudioParam, createNativeBiquadFilterNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst biquadFilterNodeConstructor = createBiquadFilterNodeConstructor(audioNodeConstructor, createAudioParam, createBiquadFilterNodeRenderer, createInvalidAccessError, createNativeBiquadFilterNode, getNativeContext, isNativeOfflineAudioContext);\nconst monitorConnections = createMonitorConnections(insertElementInSet, isNativeAudioNode);\nconst wrapChannelMergerNode = createWrapChannelMergerNode(createInvalidStateError, createNativeAudioNode, monitorConnections);\nconst createNativeChannelMergerNode = createNativeChannelMergerNodeFactory(createNativeAudioNode, wrapChannelMergerNode);\nconst createChannelMergerNodeRenderer = createChannelMergerNodeRendererFactory(createNativeChannelMergerNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst channelMergerNodeConstructor = createChannelMergerNodeConstructor(audioNodeConstructor, createChannelMergerNodeRenderer, createNativeChannelMergerNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeChannelSplitterNode = createNativeChannelSplitterNodeFactory(createNativeAudioNode);\nconst createChannelSplitterNodeRenderer = createChannelSplitterNodeRendererFactory(createNativeChannelSplitterNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst channelSplitterNodeConstructor = createChannelSplitterNodeConstructor(audioNodeConstructor, createChannelSplitterNodeRenderer, createNativeChannelSplitterNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeConstantSourceNodeFaker = createNativeConstantSourceNodeFakerFactory(createNativeAudioBufferSourceNode, createNativeGainNode, monitorConnections);\nconst createNativeConstantSourceNode = createNativeConstantSourceNodeFactory(cacheTestResult, createNativeAudioNode, createNativeConstantSourceNodeFaker, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport);\nconst createConstantSourceNodeRenderer = createConstantSourceNodeRendererFactory(connectAudioParam, createNativeConstantSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst constantSourceNodeConstructor = createConstantSourceNodeConstructor(audioNodeConstructor, createAudioParam, createConstantSourceNodeRenderer, createNativeConstantSourceNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeConvolverNodeFaker = createNativeConvolverNodeFakerFactory(createNativeAudioNode, createNativeGainNode, monitorConnections);\nconst createNativeConvolverNode = createNativeConvolverNodeFactory(createNativeAudioNode, createNativeConvolverNodeFaker, createNotSupportedError, overwriteAccessors);\nconst createConvolverNodeRenderer = createConvolverNodeRendererFactory(createNativeConvolverNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst convolverNodeConstructor = createConvolverNodeConstructor(audioNodeConstructor, createConvolverNodeRenderer, createNativeConvolverNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeDelayNode = createNativeDelayNodeFactory(createNativeAudioNode);\nconst createDelayNodeRenderer = createDelayNodeRendererFactory(connectAudioParam, createNativeDelayNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst delayNodeConstructor = createDelayNodeConstructor(audioNodeConstructor, createAudioParam, createDelayNodeRenderer, createNativeDelayNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeDynamicsCompressorNode = createNativeDynamicsCompressorNodeFactory(createNativeAudioNode, createNotSupportedError);\nconst createDynamicsCompressorNodeRenderer = createDynamicsCompressorNodeRendererFactory(connectAudioParam, createNativeDynamicsCompressorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst dynamicsCompressorNodeConstructor = createDynamicsCompressorNodeConstructor(audioNodeConstructor, createAudioParam, createDynamicsCompressorNodeRenderer, createNativeDynamicsCompressorNode, createNotSupportedError, getNativeContext, isNativeOfflineAudioContext);\nconst createGainNodeRenderer = createGainNodeRendererFactory(connectAudioParam, createNativeGainNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst gainNodeConstructor = createGainNodeConstructor(audioNodeConstructor, createAudioParam, createGainNodeRenderer, createNativeGainNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeScriptProcessorNode = createNativeScriptProcessorNodeFactory(createNativeAudioNode);\nconst createNativeIIRFilterNodeFaker = createNativeIIRFilterNodeFakerFactory(createInvalidAccessError, createInvalidStateError, createNativeScriptProcessorNode, createNotSupportedError);\nconst renderNativeOfflineAudioContext = createRenderNativeOfflineAudioContext(cacheTestResult, createNativeGainNode, createNativeScriptProcessorNode, createTestOfflineAudioContextCurrentTimeSupport(createNativeGainNode, nativeOfflineAudioContextConstructor));\nconst createIIRFilterNodeRenderer = createIIRFilterNodeRendererFactory(createNativeAudioBufferSourceNode, createNativeAudioNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderInputsOfAudioNode, renderNativeOfflineAudioContext);\nconst createNativeIIRFilterNode = createNativeIIRFilterNodeFactory(createNativeAudioNode, createNativeIIRFilterNodeFaker);\nconst iIRFilterNodeConstructor = createIIRFilterNodeConstructor(audioNodeConstructor, createNativeIIRFilterNode, createIIRFilterNodeRenderer, getNativeContext, isNativeOfflineAudioContext);\nconst createAudioListener = createAudioListenerFactory(createAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeScriptProcessorNode, isNativeOfflineAudioContext);\nconst minimalBaseAudioContextConstructor = createMinimalBaseAudioContextConstructor(audioDestinationNodeConstructor, createAudioListener);\nconst createNativeOscillatorNode = createNativeOscillatorNodeFactory(cacheTestResult, createNativeAudioNode, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls);\nconst createOscillatorNodeRenderer = createOscillatorNodeRendererFactory(connectAudioParam, createNativeOscillatorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst oscillatorNodeConstructor = createOscillatorNodeConstructor(audioNodeConstructor, createAudioParam, createInvalidStateError, createNativeOscillatorNode, createOscillatorNodeRenderer, getNativeContext, isNativeOfflineAudioContext);\nconst createConnectedNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNodeFactory(createNativeAudioBufferSourceNode);\nconst createNativeWaveShaperNodeFaker = createNativeWaveShaperNodeFakerFactory(createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeAudioNode, createNativeGainNode, isDCCurve, monitorConnections);\nconst createNativeWaveShaperNode = createNativeWaveShaperNodeFactory(createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeAudioNode, createNativeWaveShaperNodeFaker, isDCCurve, monitorConnections, overwriteAccessors);\nconst createNativePannerNodeFaker = createNativePannerNodeFakerFactory(connectNativeAudioNodeToNativeAudioNode, createInvalidStateError, createNativeAudioNode, createNativeChannelMergerNode, createNativeGainNode, createNativeScriptProcessorNode, createNativeWaveShaperNode, createNotSupportedError, disconnectNativeAudioNodeFromNativeAudioNode, monitorConnections);\nconst createNativePannerNode = createNativePannerNodeFactory(createNativeAudioNode, createNativePannerNodeFaker);\nconst createPannerNodeRenderer = createPannerNodeRendererFactory(connectAudioParam, createNativePannerNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst pannerNodeConstructor = createPannerNodeConstructor(audioNodeConstructor, createAudioParam, createNativePannerNode, createPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext);\nconst createNativePeriodicWave = createNativePeriodicWaveFactory(getBackupNativeContext);\nconst periodicWaveConstructor = createPeriodicWaveConstructor(createNativePeriodicWave, getNativeContext, new WeakSet());\nconst nativeStereoPannerNodeFakerFactory = createNativeStereoPannerNodeFakerFactory(createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeGainNode, createNativeWaveShaperNode, createNotSupportedError, monitorConnections);\nconst createNativeStereoPannerNode = createNativeStereoPannerNodeFactory(createNativeAudioNode, nativeStereoPannerNodeFakerFactory, createNotSupportedError);\nconst createStereoPannerNodeRenderer = createStereoPannerNodeRendererFactory(connectAudioParam, createNativeStereoPannerNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst stereoPannerNodeConstructor = createStereoPannerNodeConstructor(audioNodeConstructor, createAudioParam, createNativeStereoPannerNode, createStereoPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext);\nconst createWaveShaperNodeRenderer = createWaveShaperNodeRendererFactory(createNativeWaveShaperNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst waveShaperNodeConstructor = createWaveShaperNodeConstructor(audioNodeConstructor, createInvalidStateError, createNativeWaveShaperNode, createWaveShaperNodeRenderer, getNativeContext, isNativeOfflineAudioContext);\nconst isSecureContext = createIsSecureContext(window);\nconst exposeCurrentFrameAndCurrentTime = createExposeCurrentFrameAndCurrentTime(window);\n// The addAudioWorkletModule() function is only available in a SecureContext.\nexport const addAudioWorkletModule = (isSecureContext) ?\n    createAddAudioWorkletModule(createAbortError, createNotSupportedError, createEvaluateSource(window), exposeCurrentFrameAndCurrentTime, createFetchSource(createAbortError), getBackupNativeContext, getNativeContext, new WeakMap(), new WeakMap()) :\n    undefined;\nconst isNativeAudioContext = createIsNativeAudioContext(nativeAudioContextConstructor);\nconst isNativeContext = createIsNativeContext(isNativeAudioContext, isNativeOfflineAudioContext);\nexport const decodeAudioData = createDecodeAudioData(audioBufferStore, cacheTestResult, createDataCloneError, createEncodingError, new WeakSet(), getNativeContext, isNativeContext, isNativeOfflineAudioContext, nativeOfflineAudioContextConstructor, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, testPromiseSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);\nconst baseAudioContextConstructor = createBaseAudioContextConstructor(addAudioWorkletModule, analyserNodeConstructor, audioBufferConstructor, audioBufferSourceNodeConstructor, biquadFilterNodeConstructor, channelMergerNodeConstructor, channelSplitterNodeConstructor, constantSourceNodeConstructor, convolverNodeConstructor, decodeAudioData, delayNodeConstructor, dynamicsCompressorNodeConstructor, gainNodeConstructor, iIRFilterNodeConstructor, minimalBaseAudioContextConstructor, oscillatorNodeConstructor, pannerNodeConstructor, periodicWaveConstructor, stereoPannerNodeConstructor, waveShaperNodeConstructor);\nconst createNativeMediaElementAudioSourceNode = createNativeMediaElementAudioSourceNodeFactory(createNativeAudioNode);\nconst mediaElementAudioSourceNodeConstructor = createMediaElementAudioSourceNodeConstructor(audioNodeConstructor, createNativeMediaElementAudioSourceNode, createNotSupportedError, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeMediaStreamAudioSourceNode = createNativeMediaStreamAudioSourceNodeFactory(createNativeAudioNode);\nconst mediaStreamAudioSourceNodeConstructor = createMediaStreamAudioSourceNodeConstructor(audioNodeConstructor, createNativeMediaStreamAudioSourceNode, createNotSupportedError, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeMediaStreamTrackAudioSourceNode = createNativeMediaStreamTrackAudioSourceNodeFactory(createInvalidStateError, createNativeAudioNode);\nconst mediaStreamTrackAudioSourceNodeConstructor = createMediaStreamTrackAudioSourceNodeConstructor(audioNodeConstructor, createNativeMediaStreamTrackAudioSourceNode, createNotSupportedError, getNativeContext, isNativeOfflineAudioContext);\nconst audioContextConstructor = createAudioContextConstructor(baseAudioContextConstructor, createInvalidStateError, createNotSupportedError, createUnknownError, mediaElementAudioSourceNodeConstructor, mediaStreamAudioSourceNodeConstructor, mediaStreamTrackAudioSourceNodeConstructor, nativeAudioContextConstructor);\nexport { audioContextConstructor as AudioContext };\nconst connectMultipleOutputs = createConnectMultipleOutputs(createIndexSizeError);\nconst disconnectMultipleOutputs = createDisconnectMultipleOutputs(createIndexSizeError);\nconst createNativeAudioWorkletNodeFaker = createNativeAudioWorkletNodeFakerFactory(auxiliaryGainNodeStore, connectMultipleOutputs, createIndexSizeError, createInvalidStateError, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, createNativeScriptProcessorNode, createNotSupportedError, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, monitorConnections);\nconst createNativeAudioWorkletNode = createNativeAudioWorkletNodeFactory(createInvalidStateError, createNativeAudioNode, createNativeAudioWorkletNodeFaker, createNotSupportedError, isNativeOfflineAudioContext);\nconst nativeAudioWorkletNodeConstructor = createNativeAudioWorkletNodeConstructor(window);\nconst createAudioWorkletNodeRenderer = createAudioWorkletNodeRendererFactory(connectAudioParam, connectMultipleOutputs, createNativeAudioBufferSourceNode, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, getNativeAudioNode, nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext);\n// The AudioWorkletNode constructor is only available in a SecureContext.\nconst audioWorkletNodeConstructor = (isSecureContext) ?\n    createAudioWorkletNodeConstructor(audioNodeConstructor, createAudioParam, createAudioWorkletNodeRenderer, createNativeAudioWorkletNode, gainNodeConstructor, getNativeContext, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor) :\n    undefined;\nexport { audioWorkletNodeConstructor as AudioWorkletNode };\nexport { biquadFilterNodeConstructor as BiquadFilterNode };\nexport { channelMergerNodeConstructor as ChannelMergerNode };\nexport { channelSplitterNodeConstructor as ChannelSplitterNode };\nexport { convolverNodeConstructor as ConvolverNode };\nexport { constantSourceNodeConstructor as ConstantSourceNode };\nexport { delayNodeConstructor as DelayNode };\nexport { dynamicsCompressorNodeConstructor as DynamicsCompressorNode };\nexport { gainNodeConstructor as GainNode };\nexport { iIRFilterNodeConstructor as IIRFilterNode };\nexport { mediaElementAudioSourceNodeConstructor as MediaElementAudioSourceNode };\nexport { mediaStreamAudioSourceNodeConstructor as MediaStreamAudioSourceNode };\nexport { mediaStreamTrackAudioSourceNodeConstructor as MediaStreamTrackAudioSourceNode };\nconst minimalAudioContextConstructor = createMinimalAudioContextConstructor(createInvalidStateError, createNotSupportedError, createUnknownError, minimalBaseAudioContextConstructor, nativeAudioContextConstructor);\nexport { minimalAudioContextConstructor as MinimalAudioContext };\nconst createNativeOfflineAudioContext = createCreateNativeOfflineAudioContext(createNotSupportedError, nativeOfflineAudioContextConstructor);\nconst startRendering = createStartRendering(audioBufferStore, cacheTestResult, getAudioNodeRenderer, renderNativeOfflineAudioContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);\nconst minimalOfflineAudioContextConstructor = createMinimalOfflineAudioContextConstructor(cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, minimalBaseAudioContextConstructor, startRendering);\nexport { minimalOfflineAudioContextConstructor as MinimalOfflineAudioContext };\nconst offlineAudioContextConstructor = createOfflineAudioContextConstructor(baseAudioContextConstructor, cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, startRendering);\nexport { offlineAudioContextConstructor as OfflineAudioContext };\nexport { oscillatorNodeConstructor as OscillatorNode };\nexport { pannerNodeConstructor as PannerNode };\nexport { periodicWaveConstructor as PeriodicWave };\nexport { stereoPannerNodeConstructor as StereoPannerNode };\nexport { waveShaperNodeConstructor as WaveShaperNode };\nexport const isAnyAudioContext = createIsAnyAudioContext(CONTEXT_STORE, isNativeAudioContext);\nexport const isAnyAudioNode = createIsAnyAudioNode(AUDIO_NODE_STORE, isNativeAudioNode);\nexport const isAnyAudioParam = createIsAnyAudioParam(AUDIO_PARAM_STORE, isNativeAudioParam);\nexport const isAnyOfflineAudioContext = createIsAnyOfflineAudioContext(CONTEXT_STORE, isNativeOfflineAudioContext);\nexport const isSupported = () => createIsSupportedPromise(cacheTestResult, createTestAudioBufferCopyChannelMethodsSubarraySupport(nativeOfflineAudioContextConstructor), createTestAudioContextCloseMethodSupport(nativeAudioContextConstructor), createTestAudioContextDecodeAudioDataMethodTypeErrorSupport(nativeOfflineAudioContextConstructor), createTestAudioContextOptionsSupport(nativeAudioContextConstructor), createTestAudioNodeConnectMethodSupport(nativeOfflineAudioContextConstructor), createTestAudioWorkletProcessorNoOutputsSupport(nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor), createTestConstantSourceNodeAccurateSchedulingSupport(createNativeAudioNode, nativeOfflineAudioContextConstructor), createTestConvolverNodeBufferReassignabilitySupport(nativeOfflineAudioContextConstructor), createTestIsSecureContextSupport(window), createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport(nativeAudioContextConstructor), createTestStereoPannerNodeDefaultValueSupport(nativeOfflineAudioContextConstructor), testTransferablesSupport);\n//# sourceMappingURL=/build/es2018/module.js.map","import { TEST_RESULTS } from '../globals';\nexport const createCacheTestResult = (ongoingTests) => {\n    return (tester, test) => {\n        const cachedTestResult = TEST_RESULTS.get(tester);\n        if (cachedTestResult !== undefined) {\n            return cachedTestResult;\n        }\n        const ongoingTest = ongoingTests.get(tester);\n        if (ongoingTest !== undefined) {\n            return ongoingTest;\n        }\n        const synchronousTestResult = test();\n        if (synchronousTestResult instanceof Promise) {\n            ongoingTests.set(tester, synchronousTestResult);\n            return synchronousTestResult\n                .then((finalTestResult) => {\n                ongoingTests.delete(tester);\n                TEST_RESULTS.set(tester, finalTestResult);\n                return finalTestResult;\n            });\n        }\n        TEST_RESULTS.set(tester, synchronousTestResult);\n        return synchronousTestResult;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/cache-test-result.js.map","export const createWindow = () => (typeof window === 'undefined') ? null : window;\n//# sourceMappingURL=/build/es2018/factories/window.js.map","export const createNativeOfflineAudioContextConstructor = (window) => {\n    if (window === null) {\n        return null;\n    }\n    if (window.hasOwnProperty('OfflineAudioContext')) {\n        return window.OfflineAudioContext;\n    }\n    return (window.hasOwnProperty('webkitOfflineAudioContext')) ? window.webkitOfflineAudioContext : null;\n};\n//# sourceMappingURL=/build/es2018/factories/native-offline-audio-context-constructor.js.map","export const createIsNativeOfflineAudioContext = (nativeOfflineAudioContextConstructor) => {\n    return (anything) => {\n        return (nativeOfflineAudioContextConstructor !== null && anything instanceof nativeOfflineAudioContextConstructor);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/is-native-offline-audio-context.js.map","export const createNativeAudioContextConstructor = (window) => {\n    if (window === null) {\n        return null;\n    }\n    if (window.hasOwnProperty('AudioContext')) {\n        return window.AudioContext;\n    }\n    return (window.hasOwnProperty('webkitAudioContext')) ? window.webkitAudioContext : null;\n};\n//# sourceMappingURL=/build/es2018/factories/native-audio-context-constructor.js.map","import { BACKUP_NATIVE_CONTEXT_STORE } from '../globals';\nexport const createGetBackupNativeContext = (isNativeOfflineAudioContext, nativeAudioContextConstructor, nativeOfflineAudioContextConstructor) => {\n    return (nativeContext) => {\n        /*\n         * Bug #50: Only Edge does currently not allow to create AudioNodes on a closed context yet which is why there needs to be no\n         * backupNativeContext in that case.\n         */\n        if (nativeContext.state === 'closed'\n            && nativeAudioContextConstructor !== null\n            && nativeAudioContextConstructor.name !== 'webkitAudioContext') {\n            if (isNativeOfflineAudioContext(nativeContext)) {\n                const backupNativeContext = BACKUP_NATIVE_CONTEXT_STORE.get(nativeContext);\n                if (backupNativeContext !== undefined) {\n                    return backupNativeContext;\n                }\n                if (nativeOfflineAudioContextConstructor !== null) {\n                    // @todo Copy the attached AudioWorkletProcessors and other settings.\n                    const bckpNtveCntxt = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n                    BACKUP_NATIVE_CONTEXT_STORE.set(nativeContext, bckpNtveCntxt);\n                    return bckpNtveCntxt;\n                }\n            }\n            else {\n                const backupNativeContext = BACKUP_NATIVE_CONTEXT_STORE.get(nativeContext);\n                if (backupNativeContext !== undefined) {\n                    return backupNativeContext;\n                }\n                // @todo Copy the attached AudioWorkletProcessors and other settings.\n                const bckpNtveCntxt = new nativeAudioContextConstructor();\n                BACKUP_NATIVE_CONTEXT_STORE.set(nativeContext, bckpNtveCntxt);\n                return bckpNtveCntxt;\n            }\n        }\n        return null;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/get-backup-native-context.js.map","export const createNativeAudioNodeFactory = (getBackupNativeContext) => {\n    return (nativeContext, factoryFunction) => {\n        // Bug #50: Only Edge does currently not allow to create AudioNodes on a closed context yet.\n        const backupNativeContext = getBackupNativeContext(nativeContext);\n        if (backupNativeContext !== null) {\n            return factoryFunction(backupNativeContext);\n        }\n        return factoryFunction(nativeContext);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-audio-node-factory.js.map","import { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { testAnalyserNodeGetFloatTimeDomainDataMethodSupport } from '../helpers/test-analyser-node-get-float-time-domain-data-method-support';\nimport { wrapAnalyserNodeGetFloatTimeDomainDataMethod } from '../helpers/wrap-analyser-node-get-float-time-domain-data-method';\nexport const createNativeAnalyserNodeFactory = (cacheTestResult, createIndexSizeError, createNativeAudioNode) => {\n    return (nativeContext, options) => {\n        const nativeAnalyserNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createAnalyser());\n        // Bug #37: Firefox does not create an AnalyserNode with the default properties.\n        assignNativeAudioNodeOptions(nativeAnalyserNode, options);\n        // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.\n        if (!(options.maxDecibels > options.minDecibels)) {\n            throw createIndexSizeError();\n        }\n        assignNativeAudioNodeOption(nativeAnalyserNode, options, 'fftSize');\n        assignNativeAudioNodeOption(nativeAnalyserNode, options, 'maxDecibels');\n        assignNativeAudioNodeOption(nativeAnalyserNode, options, 'minDecibels');\n        assignNativeAudioNodeOption(nativeAnalyserNode, options, 'smoothingTimeConstant');\n        // Bug #36: Safari does not support getFloatTimeDomainData() yet.\n        if (!cacheTestResult(testAnalyserNodeGetFloatTimeDomainDataMethodSupport, () => testAnalyserNodeGetFloatTimeDomainDataMethodSupport(nativeAnalyserNode))) {\n            wrapAnalyserNodeGetFloatTimeDomainDataMethod(nativeAnalyserNode);\n        }\n        return nativeAnalyserNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-analyser-node-factory.js.map","export const wrapAnalyserNodeGetFloatTimeDomainDataMethod = (nativeAnalyserNode) => {\n    nativeAnalyserNode.getFloatTimeDomainData = (array) => {\n        const byteTimeDomainData = new Uint8Array(array.length);\n        nativeAnalyserNode.getByteTimeDomainData(byteTimeDomainData);\n        const length = Math.max(byteTimeDomainData.length, nativeAnalyserNode.fftSize);\n        for (let i = 0; i < length; i += 1) {\n            array[i] = (byteTimeDomainData[i] - 128) * 0.0078125;\n        }\n        return array;\n    };\n};\n//# sourceMappingURL=/build/es2018/helpers/wrap-analyser-node-get-float-time-domain-data-method.js.map","export const createGetAudioNodeRenderer = (getAudioNodeConnections) => {\n    return (audioNode) => {\n        const audioNodeConnections = getAudioNodeConnections(audioNode);\n        if (audioNodeConnections.renderer === null) {\n            throw new Error('Missing the renderer of the given AudioNode in the audio graph.');\n        }\n        return audioNodeConnections.renderer;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/get-audio-node-renderer.js.map","export const createRenderInputsOfAudioNode = (getAudioNodeConnections, getAudioNodeRenderer, isPartOfACycle) => {\n    return async (audioNode, nativeOfflineAudioContext, nativeAudioNode, trace) => {\n        const audioNodeConnections = getAudioNodeConnections(audioNode);\n        const nextTrace = [...trace, audioNode];\n        await Promise\n            .all(audioNodeConnections.activeInputs\n            .map((connections, input) => Array\n            .from(connections)\n            .filter(([source]) => !nextTrace.includes(source))\n            .map(async ([source, output]) => {\n            const audioNodeRenderer = getAudioNodeRenderer(source);\n            const renderedNativeAudioNode = await audioNodeRenderer.render(source, nativeOfflineAudioContext, nextTrace);\n            if (!isPartOfACycle(source) && !(audioNode === audioNode.context.destination && isPartOfACycle(audioNode))) {\n                renderedNativeAudioNode.connect(nativeAudioNode, output, input);\n            }\n        }))\n            .reduce((allRenderingPromises, renderingPromises) => [...allRenderingPromises, ...renderingPromises], []));\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/render-inputs-of-audio-node.js.map","import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createAnalyserNodeRendererFactory = (createNativeAnalyserNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeAnalyserNodes = new WeakMap();\n        const createAnalyserNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeAnalyserNode = getNativeAudioNode(proxy);\n            // If the initially used nativeAnalyserNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeAnalyserNodeIsOwnedByContext = isOwnedByContext(nativeAnalyserNode, nativeOfflineAudioContext);\n            if (!nativeAnalyserNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeAnalyserNode.channelCount,\n                    channelCountMode: nativeAnalyserNode.channelCountMode,\n                    channelInterpretation: nativeAnalyserNode.channelInterpretation,\n                    fftSize: nativeAnalyserNode.fftSize,\n                    maxDecibels: nativeAnalyserNode.maxDecibels,\n                    minDecibels: nativeAnalyserNode.minDecibels,\n                    smoothingTimeConstant: nativeAnalyserNode.smoothingTimeConstant\n                };\n                nativeAnalyserNode = createNativeAnalyserNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeAnalyserNodes.set(nativeOfflineAudioContext, nativeAnalyserNode);\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAnalyserNode, trace);\n            return nativeAnalyserNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeAnalyserNode = renderedNativeAnalyserNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeAnalyserNode !== undefined) {\n                    return Promise.resolve(renderedNativeAnalyserNode);\n                }\n                return createAnalyserNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/analyser-node-renderer-factory.js.map","import { createInvalidStateError } from '../factories/invalid-state-error';\nexport const createGetNativeContext = (contextStore) => {\n    return (context) => {\n        const nativeContext = contextStore.get(context);\n        if (nativeContext === undefined) {\n            throw createInvalidStateError();\n        }\n        return nativeContext;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/get-native-context.js.map","export const createIsNativeAudioNode = (window) => {\n    return (anything) => {\n        return (window !== null && typeof window.AudioNode === 'function' && anything instanceof window.AudioNode);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/is-native-audio-node.js.map","export const createIsNativeAudioParam = (window) => {\n    return (anything) => {\n        return (window !== null && typeof window.AudioParam === 'function' && anything instanceof window.AudioParam);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/is-native-audio-param.js.map","import { isNativeAudioNode } from '../guards/native-audio-node';\nexport const wrapAudioNodeDisconnectMethod = (nativeAudioNode) => {\n    const connections = new Map();\n    nativeAudioNode.connect = ((connect) => {\n        return (destination, output = 0, input = 0) => {\n            const returnValue = (isNativeAudioNode(destination))\n                ? connect(destination, output, input)\n                : connect(destination, output);\n            // Save the new connection only if the calls to connect above didn't throw an error.\n            const connectionsToDestination = connections.get(destination);\n            if (connectionsToDestination === undefined) {\n                connections.set(destination, [{ input, output }]);\n            }\n            else {\n                if (connectionsToDestination.every((connection) => (connection.input !== input || connection.output !== output))) {\n                    connectionsToDestination.push({ input, output });\n                }\n            }\n            return returnValue;\n        };\n    })(nativeAudioNode.connect.bind(nativeAudioNode));\n    nativeAudioNode.disconnect = ((disconnect) => {\n        return (destinationOrOutput, output, input) => {\n            disconnect.apply(nativeAudioNode);\n            if (destinationOrOutput === undefined) {\n                connections.clear();\n            }\n            else if (typeof destinationOrOutput === 'number') {\n                for (const [destination, connectionsToDestination] of connections) {\n                    const filteredConnections = connectionsToDestination\n                        .filter((connection) => (connection.output !== destinationOrOutput));\n                    if (filteredConnections.length === 0) {\n                        connections.delete(destination);\n                    }\n                    else {\n                        connections.set(destination, filteredConnections);\n                    }\n                }\n            }\n            else if (connections.has(destinationOrOutput)) {\n                if (output === undefined) {\n                    connections.delete(destinationOrOutput);\n                }\n                else {\n                    const connectionsToDestination = connections.get(destinationOrOutput);\n                    if (connectionsToDestination !== undefined) {\n                        const filteredConnections = connectionsToDestination\n                            .filter((connection) => (connection.output !== output && (connection.input !== input || input === undefined)));\n                        if (filteredConnections.length === 0) {\n                            connections.delete(destinationOrOutput);\n                        }\n                        else {\n                            connections.set(destinationOrOutput, filteredConnections);\n                        }\n                    }\n                }\n            }\n            for (const [destination, connectionsToDestination] of connections) {\n                connectionsToDestination\n                    .forEach((connection) => {\n                    if (isNativeAudioNode(destination)) {\n                        nativeAudioNode.connect(destination, connection.output, connection.input);\n                    }\n                    else {\n                        nativeAudioNode.connect(destination, connection.output);\n                    }\n                });\n            }\n        };\n    })(nativeAudioNode.disconnect);\n};\n//# sourceMappingURL=/build/es2018/helpers/wrap-audio-node-disconnect-method.js.map","export const createAddAudioNodeConnections = (audioNodeConnectionsStore) => {\n    return (audioNode, audioNoderRender, nativeAudioNode) => {\n        const activeInputs = [];\n        for (let i = 0; i < nativeAudioNode.numberOfInputs; i += 1) {\n            activeInputs.push(new Set());\n        }\n        audioNodeConnectionsStore.set(audioNode, {\n            activeInputs,\n            outputs: new Set(),\n            passiveInputs: new WeakMap(),\n            renderer: audioNoderRender\n        });\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/add-audio-node-connections.js.map","import { isAudioNodeOutputConnection } from '../guards/audio-node-output-connection';\nexport const createIncrementCycleCounterFactory = (cycleCounters, disconnectNativeAudioNodeFromNativeAudioNode, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, isActiveAudioNode) => {\n    return (isOffline) => {\n        return (audioNode, count) => {\n            const cycleCounter = cycleCounters.get(audioNode);\n            if (cycleCounter === undefined) {\n                if (!isOffline && isActiveAudioNode(audioNode)) {\n                    const nativeSourceAudioNode = getNativeAudioNode(audioNode);\n                    const { outputs } = getAudioNodeConnections(audioNode);\n                    for (const output of outputs) {\n                        if (isAudioNodeOutputConnection(output)) {\n                            const nativeDestinationAudioNode = getNativeAudioNode(output[0]);\n                            disconnectNativeAudioNodeFromNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output[1], output[2]);\n                        }\n                        else {\n                            const nativeDestinationAudioParam = getNativeAudioParam(output[0]);\n                            nativeSourceAudioNode.disconnect(nativeDestinationAudioParam, output[1]);\n                        }\n                    }\n                }\n                cycleCounters.set(audioNode, count);\n            }\n            else {\n                cycleCounters.set(audioNode, cycleCounter + count);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/increment-cycle-counter-factory.js.map","import { isAudioNodeOutputConnection } from '../guards/audio-node-output-connection';\nexport const createDecrementCycleCounter = (connectNativeAudioNodeToNativeAudioNode, cycleCounters, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, getNativeContext, isActiveAudioNode, isNativeOfflineAudioContext) => {\n    return (audioNode, count) => {\n        const cycleCounter = cycleCounters.get(audioNode);\n        if (cycleCounter === undefined) {\n            throw new Error('Missing the expected cycle count.');\n        }\n        const nativeContext = getNativeContext(audioNode.context);\n        const isOffline = isNativeOfflineAudioContext(nativeContext);\n        if (cycleCounter === count) {\n            cycleCounters.delete(audioNode);\n            if (!isOffline && isActiveAudioNode(audioNode)) {\n                const nativeSourceAudioNode = getNativeAudioNode(audioNode);\n                const { outputs } = getAudioNodeConnections(audioNode);\n                for (const output of outputs) {\n                    if (isAudioNodeOutputConnection(output)) {\n                        const nativeDestinationAudioNode = getNativeAudioNode(output[0]);\n                        connectNativeAudioNodeToNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output[1], output[2]);\n                    }\n                    else {\n                        const nativeDestinationAudioParam = getNativeAudioParam(output[0]);\n                        nativeSourceAudioNode.connect(nativeDestinationAudioParam, output[1]);\n                    }\n                }\n            }\n        }\n        else {\n            cycleCounters.set(audioNode, cycleCounter - count);\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/decrement-cycle-counter.js.map","import { isAudioNode } from '../guards/audio-node';\nimport { isDelayNode } from '../guards/delay-node';\nexport const createDetectCycles = (audioParamAudioNodeStore, getAudioNodeConnections, getValueForKey) => {\n    return function detectCycles(chain, nextLink) {\n        const audioNode = (isAudioNode(nextLink))\n            ? nextLink\n            : getValueForKey(audioParamAudioNodeStore, nextLink);\n        if (isDelayNode(audioNode)) {\n            return [];\n        }\n        if (chain[0] === audioNode) {\n            return [chain];\n        }\n        if (chain.includes(audioNode)) {\n            return [];\n        }\n        const { outputs } = getAudioNodeConnections(audioNode);\n        return Array\n            .from(outputs)\n            .map((outputConnection) => detectCycles([...chain, audioNode], outputConnection[0]))\n            .reduce((mergedCycles, nestedCycles) => mergedCycles.concat(nestedCycles), []);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/detect-cycles.js.map","export const isDelayNode = (audioNode) => {\n    return 'delayTime' in audioNode;\n};\n//# sourceMappingURL=/build/es2018/guards/delay-node.js.map","export const createNativeAudioBufferConstructor = (window) => {\n    if (window === null) {\n        return null;\n    }\n    if (window.hasOwnProperty('AudioBuffer')) {\n        return window.AudioBuffer;\n    }\n    return null;\n};\n//# sourceMappingURL=/build/es2018/factories/native-audio-buffer-constructor.js.map","export const createConvertNumberToUnsignedLong = (unit32Array) => {\n    return (value) => {\n        unit32Array[0] = value;\n        return unit32Array[0];\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/convert-number-to-unsigned-long.js.map","export const createWrapAudioBufferCopyChannelMethods = (convertNumberToUnsignedLong, createIndexSizeError) => {\n    return (audioBuffer) => {\n        audioBuffer.copyFromChannel = (destination, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {\n            const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n            const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n            if (channelNumber >= audioBuffer.numberOfChannels) {\n                throw createIndexSizeError();\n            }\n            const audioBufferLength = audioBuffer.length;\n            const channelData = audioBuffer.getChannelData(channelNumber);\n            const destinationLength = destination.length;\n            for (let i = (bufferOffset < 0) ? -bufferOffset : 0; i + bufferOffset < audioBufferLength && i < destinationLength; i += 1) {\n                destination[i] = channelData[i + bufferOffset];\n            }\n        };\n        audioBuffer.copyToChannel = (source, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {\n            const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n            const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n            if (channelNumber >= audioBuffer.numberOfChannels) {\n                throw createIndexSizeError();\n            }\n            const audioBufferLength = audioBuffer.length;\n            const channelData = audioBuffer.getChannelData(channelNumber);\n            const sourceLength = source.length;\n            for (let i = (bufferOffset < 0) ? -bufferOffset : 0; i + bufferOffset < audioBufferLength && i < sourceLength; i += 1) {\n                channelData[i + bufferOffset] = source[i];\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/wrap-audio-buffer-copy-channel-methods.js.map","export const createWrapAudioBufferCopyChannelMethodsOutOfBounds = (convertNumberToUnsignedLong) => {\n    return (audioBuffer) => {\n        audioBuffer.copyFromChannel = ((copyFromChannel) => {\n            return (destination, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {\n                const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n                const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n                if (bufferOffset < audioBuffer.length) {\n                    return copyFromChannel.call(audioBuffer, destination, channelNumber, bufferOffset);\n                }\n            };\n        })(audioBuffer.copyFromChannel);\n        audioBuffer.copyToChannel = ((copyToChannel) => {\n            return (source, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {\n                const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n                const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n                if (bufferOffset < audioBuffer.length) {\n                    return copyToChannel.call(audioBuffer, source, channelNumber, bufferOffset);\n                }\n            };\n        })(audioBuffer.copyToChannel);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/wrap-audio-buffer-copy-channel-methods-out-of-bounds.js.map","// Bug #33: Edge & Safari expose an AudioBuffer but it can't be used as a constructor.\nexport const createTestAudioBufferConstructorSupport = (nativeAudioBufferConstructor) => {\n    return () => {\n        if (nativeAudioBufferConstructor === null) {\n            return false;\n        }\n        try {\n            new nativeAudioBufferConstructor({ length: 1, sampleRate: 44100 }); // tslint:disable-line:no-unused-expression\n        }\n        catch (_a) {\n            return false;\n        }\n        return true;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/test-audio-buffer-constructor-support.js.map","export const createTestAudioScheduledSourceNodeStartMethodNegativeParametersSupport = (createNativeAudioNode) => {\n    return (nativeContext) => {\n        const nativeAudioBufferSourceNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createOscillator());\n        try {\n            nativeAudioBufferSourceNode.start(-1);\n        }\n        catch (err) {\n            return (err instanceof RangeError);\n        }\n        return false;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/test-audio-scheduled-source-node-start-method-negative-parameters-support.js.map","export const createTestAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport = (createNativeAudioNode) => {\n    return (nativeContext) => {\n        const nativeAudioBuffer = nativeContext.createBuffer(1, 1, 44100);\n        const nativeAudioBufferSourceNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createBufferSource());\n        nativeAudioBufferSourceNode.buffer = nativeAudioBuffer;\n        nativeAudioBufferSourceNode.start();\n        nativeAudioBufferSourceNode.stop();\n        try {\n            nativeAudioBufferSourceNode.stop();\n            return true;\n        }\n        catch (_a) {\n            return false;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/test-audio-scheduled-source-node-stop-method-consecutive-calls-support.js.map","export const createTestAudioScheduledSourceNodeStopMethodNegativeParametersSupport = (createNativeAudioNode) => {\n    return (nativeContext) => {\n        const nativeAudioBufferSourceNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createOscillator());\n        try {\n            nativeAudioBufferSourceNode.stop(-1);\n        }\n        catch (err) {\n            return (err instanceof RangeError);\n        }\n        return false;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/test-audio-scheduled-source-node-stop-method-negative-parameters-support.js.map","import { interceptConnections } from '../helpers/intercept-connections';\nexport const createWrapAudioScheduledSourceNodeStopMethodConsecutiveCalls = (createNativeAudioNode) => {\n    return (nativeAudioScheduledSourceNode, nativeContext) => {\n        const nativeGainNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createGain());\n        nativeAudioScheduledSourceNode.connect(nativeGainNode);\n        const disconnectGainNode = ((disconnect) => {\n            return () => {\n                // @todo TypeScript cannot infer the overloaded signature with 1 argument yet.\n                disconnect.call(nativeAudioScheduledSourceNode, nativeGainNode);\n                nativeAudioScheduledSourceNode.removeEventListener('ended', disconnectGainNode);\n            };\n        })(nativeAudioScheduledSourceNode.disconnect);\n        nativeAudioScheduledSourceNode.addEventListener('ended', disconnectGainNode);\n        interceptConnections(nativeAudioScheduledSourceNode, nativeGainNode);\n        nativeAudioScheduledSourceNode.stop = ((stop) => {\n            let isStopped = false;\n            return (when = 0) => {\n                if (isStopped) {\n                    try {\n                        stop.call(nativeAudioScheduledSourceNode, when);\n                    }\n                    catch (_a) {\n                        nativeGainNode.gain.setValueAtTime(0, when);\n                    }\n                }\n                else {\n                    stop.call(nativeAudioScheduledSourceNode, when);\n                    isStopped = true;\n                }\n            };\n        })(nativeAudioScheduledSourceNode.stop);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/wrap-audio-scheduled-source-node-stop-method-consecutive-calls.js.map","export const createRenderInputsOfAudioParam = (getAudioNodeRenderer, getAudioParamConnections, isPartOfACycle) => {\n    return async (audioParam, nativeOfflineAudioContext, nativeAudioParam, trace) => {\n        const audioParamConnections = getAudioParamConnections(audioParam);\n        await Promise\n            .all(Array\n            .from(audioParamConnections.activeInputs)\n            .map(async ([source, output]) => {\n            const audioNodeRenderer = getAudioNodeRenderer(source);\n            const renderedNativeAudioNode = await audioNodeRenderer.render(source, nativeOfflineAudioContext, trace);\n            if (!isPartOfACycle(source)) {\n                renderedNativeAudioNode.connect(nativeAudioParam, output);\n            }\n        }));\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/render-inputs-of-audio-param.js.map","export const createConnectAudioParam = (renderInputsOfAudioParam) => {\n    return (nativeOfflineAudioContext, audioParam, nativeAudioParam, trace) => {\n        return renderInputsOfAudioParam(audioParam, nativeOfflineAudioContext, nativeAudioParam, trace);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/connect-audio-param.js.map","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { wrapAudioBufferSourceNodeStartMethodConsecutiveCalls } from '../helpers/wrap-audio-buffer-source-node-start-method-consecutive-calls';\nimport { wrapAudioBufferSourceNodeStartMethodDurationParameter } from '../helpers/wrap-audio-buffer-source-node-start-method-duration-parameter';\nimport { wrapAudioScheduledSourceNodeStartMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters';\nimport { wrapAudioScheduledSourceNodeStopMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters';\nexport const createNativeAudioBufferSourceNodeFactory = (cacheTestResult, createNativeAudioNode, testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport, testAudioBufferSourceNodeStartMethodDurationParameterSupport, testAudioBufferSourceNodeStartMethodOffsetClampingSupport, testAudioBufferSourceNodeStopMethodNullifiedBufferSupport, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioBufferSourceNodeStartMethodOffsetClampling, wrapAudioBufferSourceNodeStopMethodNullifiedBuffer, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls) => {\n    return (nativeContext, options = {}) => {\n        const nativeAudioBufferSourceNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createBufferSource());\n        assignNativeAudioNodeOptions(nativeAudioBufferSourceNode, options);\n        assignNativeAudioNodeAudioParamValue(nativeAudioBufferSourceNode, options, 'playbackRate');\n        // Bug #71: Edge does not allow to set the buffer to null.\n        assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'buffer');\n        // Bug #149: Safari does not yet support the detune AudioParam.\n        assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'loop');\n        assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'loopEnd');\n        assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'loopStart');\n        // Bug #69: Safari does allow calls to start() of an already scheduled AudioBufferSourceNode.\n        if (!cacheTestResult(testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport, () => testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport(nativeContext))) {\n            wrapAudioBufferSourceNodeStartMethodConsecutiveCalls(nativeAudioBufferSourceNode);\n        }\n        // Bug #92: Edge does not respect the duration parameter yet.\n        if (!cacheTestResult(testAudioBufferSourceNodeStartMethodDurationParameterSupport, testAudioBufferSourceNodeStartMethodDurationParameterSupport)) {\n            wrapAudioBufferSourceNodeStartMethodDurationParameter(nativeAudioBufferSourceNode, nativeContext);\n        }\n        // Bug #154 & #155: Safari does not handle offsets which are equal to or greater than the duration of the buffer.\n        if (!cacheTestResult(testAudioBufferSourceNodeStartMethodOffsetClampingSupport, () => testAudioBufferSourceNodeStartMethodOffsetClampingSupport(nativeContext))) {\n            wrapAudioBufferSourceNodeStartMethodOffsetClampling(nativeAudioBufferSourceNode);\n        }\n        // Bug #162: Safari does throw an error when stop() is called on an AudioBufferSourceNode which has no buffer assigned to it.\n        if (!cacheTestResult(testAudioBufferSourceNodeStopMethodNullifiedBufferSupport, () => testAudioBufferSourceNodeStopMethodNullifiedBufferSupport(nativeContext))) {\n            wrapAudioBufferSourceNodeStopMethodNullifiedBuffer(nativeAudioBufferSourceNode, nativeContext);\n        }\n        // Bug #44: Only Chrome, Firefox & Opera throw a RangeError yet.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(nativeContext))) {\n            wrapAudioScheduledSourceNodeStartMethodNegativeParameters(nativeAudioBufferSourceNode);\n        }\n        // Bug #19: Safari does not ignore calls to stop() of an already stopped AudioBufferSourceNode.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, () => testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport(nativeContext))) {\n            wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls(nativeAudioBufferSourceNode, nativeContext);\n        }\n        // Bug #44: Only Firefox does throw a RangeError yet.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(nativeContext))) {\n            wrapAudioScheduledSourceNodeStopMethodNegativeParameters(nativeAudioBufferSourceNode);\n        }\n        return nativeAudioBufferSourceNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-audio-buffer-source-node-factory.js.map","import { createInvalidStateError } from '../factories/invalid-state-error';\nexport const wrapAudioBufferSourceNodeStartMethodConsecutiveCalls = (nativeAudioBufferSourceNode) => {\n    nativeAudioBufferSourceNode.start = ((start) => {\n        let isScheduled = false;\n        return (when = 0, offset = 0, duration) => {\n            if (isScheduled) {\n                throw createInvalidStateError();\n            }\n            start.call(nativeAudioBufferSourceNode, when, offset, duration);\n            isScheduled = true;\n        };\n    })(nativeAudioBufferSourceNode.start);\n};\n//# sourceMappingURL=/build/es2018/helpers/wrap-audio-buffer-source-node-start-method-consecutive-calls.js.map","export const wrapAudioBufferSourceNodeStartMethodDurationParameter = (nativeAudioScheduledSourceNode, nativeContext) => {\n    let endTime = Number.POSITIVE_INFINITY;\n    let stopTime = Number.POSITIVE_INFINITY;\n    nativeAudioScheduledSourceNode.start = ((start, stop) => {\n        return (when = 0, offset = 0, duration = Number.POSITIVE_INFINITY) => {\n            start.call(nativeAudioScheduledSourceNode, when, offset);\n            if (duration >= 0 && duration < Number.POSITIVE_INFINITY) {\n                const actualStartTime = Math.max(when, nativeContext.currentTime);\n                // @todo The playbackRate could of course also have been automated and is not always fixed.\n                const durationInBufferTime = (duration / nativeAudioScheduledSourceNode.playbackRate.value);\n                endTime = actualStartTime + durationInBufferTime;\n                stop.call(nativeAudioScheduledSourceNode, Math.min(endTime, stopTime));\n            }\n        };\n    })(nativeAudioScheduledSourceNode.start, nativeAudioScheduledSourceNode.stop);\n    nativeAudioScheduledSourceNode.stop = ((stop) => {\n        return (when = 0) => {\n            stopTime = Math.max(when, nativeContext.currentTime);\n            stop.call(nativeAudioScheduledSourceNode, Math.min(endTime, stopTime));\n        };\n    })(nativeAudioScheduledSourceNode.stop);\n};\n//# sourceMappingURL=/build/es2018/helpers/wrap-audio-buffer-source-node-start-method-duration-parameter.js.map","export const createTestAudioBufferSourceNodeStartMethodConsecutiveCallsSupport = (createNativeAudioNode) => {\n    return (nativeContext) => {\n        const nativeAudioBufferSourceNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createBufferSource());\n        nativeAudioBufferSourceNode.start();\n        try {\n            nativeAudioBufferSourceNode.start();\n        }\n        catch (_a) {\n            return true;\n        }\n        return false;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/test-audio-buffer-source-node-start-method-consecutive-calls-support.js.map","// Bug #92: Edge does not respect the duration parameter yet.\nexport const createTestAudioBufferSourceNodeStartMethodDurationParameterSupport = (nativeOfflineAudioContextConstructor) => {\n    return () => {\n        if (nativeOfflineAudioContextConstructor === null) {\n            return Promise.resolve(false);\n        }\n        const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n        const audioBuffer = offlineAudioContext.createBuffer(1, 1, offlineAudioContext.sampleRate);\n        const audioBufferSourceNode = offlineAudioContext.createBufferSource();\n        audioBuffer.getChannelData(0)[0] = 1;\n        audioBufferSourceNode.buffer = audioBuffer;\n        audioBufferSourceNode.start(0, 0, 0);\n        audioBufferSourceNode.connect(offlineAudioContext.destination);\n        // Bug #21: Safari does not support promises yet.\n        return new Promise((resolve) => {\n            offlineAudioContext.oncomplete = ({ renderedBuffer }) => {\n                // Bug #5: Safari does not support copyFromChannel().\n                resolve(renderedBuffer.getChannelData(0)[0] === 0);\n            };\n            offlineAudioContext.startRendering();\n        });\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/test-audio-buffer-source-node-start-method-duration-parameter-support.js.map","export const createTestAudioBufferSourceNodeStartMethodOffsetClampingSupport = (createNativeAudioNode) => {\n    return (nativeContext) => {\n        const nativeAudioBufferSourceNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createBufferSource());\n        const nativeAudioBuffer = nativeContext.createBuffer(1, 1, 44100);\n        nativeAudioBufferSourceNode.buffer = nativeAudioBuffer;\n        try {\n            nativeAudioBufferSourceNode.start(0, 1);\n        }\n        catch (_a) {\n            return false;\n        }\n        return true;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/test-audio-buffer-source-node-start-method-offset-clamping-support.js.map","export const createTestAudioBufferSourceNodeStopMethodNullifiedBufferSupport = (createNativeAudioNode) => {\n    return (nativeContext) => {\n        const nativeAudioBufferSourceNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createBufferSource());\n        nativeAudioBufferSourceNode.start();\n        try {\n            nativeAudioBufferSourceNode.stop();\n        }\n        catch (_a) {\n            return false;\n        }\n        return true;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/test-audio-buffer-source-node-stop-method-nullified-buffer-support.js.map","export const wrapAudioBufferSourceNodeStartMethodOffsetClamping = (nativeAudioBufferSourceNode) => {\n    nativeAudioBufferSourceNode.start = ((start) => {\n        return (when = 0, offset = 0, duration) => {\n            const buffer = nativeAudioBufferSourceNode.buffer;\n            // Bug #154: Safari does not clamp the offset if it is equal to or greater than the duration of the buffer.\n            const clampedOffset = (buffer === null) ? offset : Math.min(buffer.duration, offset);\n            // Bug #155: Safari does not handle the offset correctly if it would cause the buffer to be not be played at all.\n            if (buffer !== null && clampedOffset > buffer.duration - (0.5 / nativeAudioBufferSourceNode.context.sampleRate)) {\n                start.call(nativeAudioBufferSourceNode, when, 0, 0);\n            }\n            else {\n                start.call(nativeAudioBufferSourceNode, when, clampedOffset, duration);\n            }\n        };\n    })(nativeAudioBufferSourceNode.start);\n};\n//# sourceMappingURL=/build/es2018/helpers/wrap-audio-buffer-source-node-start-method-offset-clamping.js.map","export const createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer = (overwriteAccessors) => {\n    return (nativeAudioBufferSourceNode, nativeContext) => {\n        const nullifiedBuffer = nativeContext.createBuffer(1, 1, nativeContext.sampleRate);\n        if (nativeAudioBufferSourceNode.buffer === null) {\n            nativeAudioBufferSourceNode.buffer = nullifiedBuffer;\n        }\n        overwriteAccessors(nativeAudioBufferSourceNode, 'buffer', (get) => () => {\n            const value = get.call(nativeAudioBufferSourceNode);\n            return (value === nullifiedBuffer) ? null : value;\n        }, (set) => (value) => {\n            return set.call(nativeAudioBufferSourceNode, (value === null) ? nullifiedBuffer : value);\n        });\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/wrap-audio-buffer-source-node-stop-method-nullified-buffer.js.map","export const createRenderAutomation = (getAudioParamRenderer, renderInputsOfAudioParam) => {\n    return (nativeOfflineAudioContext, audioParam, nativeAudioParam, trace) => {\n        const audioParamRenderer = getAudioParamRenderer(audioParam);\n        audioParamRenderer.replay(nativeAudioParam);\n        return renderInputsOfAudioParam(audioParam, nativeOfflineAudioContext, nativeAudioParam, trace);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/render-automation.js.map","export const createGetAudioParamRenderer = (getAudioParamConnections) => {\n    return (audioParam) => {\n        const audioParamConnections = getAudioParamConnections(audioParam);\n        if (audioParamConnections.renderer === null) {\n            throw new Error('Missing the renderer of the given AudioParam in the audio graph.');\n        }\n        return audioParamConnections.renderer;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/get-audio-param-renderer.js.map","import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createAudioBufferSourceNodeRendererFactory = (connectAudioParam, createNativeAudioBufferSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeAudioBufferSourceNodes = new WeakMap();\n        let start = null;\n        let stop = null;\n        const createAudioBufferSourceNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeAudioBufferSourceNode = getNativeAudioNode(proxy);\n            /*\n             * If the initially used nativeAudioBufferSourceNode was not constructed on the same OfflineAudioContext it needs to be created\n             * again.\n             */\n            const nativeAudioBufferSourceNodeIsOwnedByContext = isOwnedByContext(nativeAudioBufferSourceNode, nativeOfflineAudioContext);\n            if (!nativeAudioBufferSourceNodeIsOwnedByContext) {\n                const options = {\n                    buffer: nativeAudioBufferSourceNode.buffer,\n                    channelCount: nativeAudioBufferSourceNode.channelCount,\n                    channelCountMode: nativeAudioBufferSourceNode.channelCountMode,\n                    channelInterpretation: nativeAudioBufferSourceNode.channelInterpretation,\n                    // Bug #149: Safari does not yet support the detune AudioParam.\n                    loop: nativeAudioBufferSourceNode.loop,\n                    loopEnd: nativeAudioBufferSourceNode.loopEnd,\n                    loopStart: nativeAudioBufferSourceNode.loopStart,\n                    playbackRate: nativeAudioBufferSourceNode.playbackRate.value\n                };\n                nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext, options);\n                if (start !== null) {\n                    nativeAudioBufferSourceNode.start(...start);\n                }\n                if (stop !== null) {\n                    nativeAudioBufferSourceNode.stop(stop);\n                }\n            }\n            renderedNativeAudioBufferSourceNodes.set(nativeOfflineAudioContext, nativeAudioBufferSourceNode);\n            if (!nativeAudioBufferSourceNodeIsOwnedByContext) {\n                // Bug #149: Safari does not yet support the detune AudioParam.\n                await renderAutomation(nativeOfflineAudioContext, proxy.playbackRate, nativeAudioBufferSourceNode.playbackRate, trace);\n            }\n            else {\n                // Bug #149: Safari does not yet support the detune AudioParam.\n                await connectAudioParam(nativeOfflineAudioContext, proxy.playbackRate, nativeAudioBufferSourceNode.playbackRate, trace);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioBufferSourceNode, trace);\n            return nativeAudioBufferSourceNode;\n        };\n        return {\n            set start(value) {\n                start = value;\n            },\n            set stop(value) {\n                stop = value;\n            },\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeAudioBufferSourceNode = renderedNativeAudioBufferSourceNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeAudioBufferSourceNode !== undefined) {\n                    return Promise.resolve(renderedNativeAudioBufferSourceNode);\n                }\n                return createAudioBufferSourceNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-buffer-source-node-renderer-factory.js.map","import { AutomationEventList } from 'automation-events';\nexport const createAudioParamFactory = (addAudioParamConnections, audioParamAudioNodeStore, audioParamStore, createAudioParamRenderer, createCancelAndHoldAutomationEvent, createCancelScheduledValuesAutomationEvent, createExponentialRampToValueAutomationEvent, createLinearRampToValueAutomationEvent, createSetTargetAutomationEvent, createSetValueAutomationEvent, createSetValueCurveAutomationEvent, nativeAudioContextConstructor) => {\n    return (audioNode, isAudioParamOfOfflineAudioContext, nativeAudioParam, maxValue = null, minValue = null) => {\n        const automationEventList = new AutomationEventList(nativeAudioParam.defaultValue);\n        const audioParamRenderer = (isAudioParamOfOfflineAudioContext) ? createAudioParamRenderer(automationEventList) : null;\n        const audioParam = {\n            get defaultValue() {\n                return nativeAudioParam.defaultValue;\n            },\n            get maxValue() {\n                return (maxValue === null) ? nativeAudioParam.maxValue : maxValue;\n            },\n            get minValue() {\n                return (minValue === null) ? nativeAudioParam.minValue : minValue;\n            },\n            get value() {\n                return nativeAudioParam.value;\n            },\n            set value(value) {\n                nativeAudioParam.value = value;\n                // Bug #98: Edge, Firefox & Safari do not yet treat the value setter like a call to setValueAtTime().\n                audioParam.setValueAtTime(value, audioNode.context.currentTime);\n            },\n            cancelAndHoldAtTime(cancelTime) {\n                // Bug #28: Edge, Firefox & Safari do not yet implement cancelAndHoldAtTime().\n                if (typeof nativeAudioParam.cancelAndHoldAtTime === 'function') {\n                    if (audioParamRenderer === null) {\n                        automationEventList.flush(audioNode.context.currentTime);\n                    }\n                    automationEventList.add(createCancelAndHoldAutomationEvent(cancelTime));\n                    nativeAudioParam.cancelAndHoldAtTime(cancelTime);\n                }\n                else {\n                    const previousLastEvent = Array\n                        .from(automationEventList)\n                        .pop();\n                    if (audioParamRenderer === null) {\n                        automationEventList.flush(audioNode.context.currentTime);\n                    }\n                    automationEventList.add(createCancelAndHoldAutomationEvent(cancelTime));\n                    const currentLastEvent = Array\n                        .from(automationEventList)\n                        .pop();\n                    nativeAudioParam.cancelScheduledValues(cancelTime);\n                    if (previousLastEvent !== currentLastEvent && currentLastEvent !== undefined) {\n                        if (currentLastEvent.type === 'exponentialRampToValue') {\n                            nativeAudioParam.exponentialRampToValueAtTime(currentLastEvent.value, currentLastEvent.endTime);\n                        }\n                        else if (currentLastEvent.type === 'linearRampToValue') {\n                            nativeAudioParam.linearRampToValueAtTime(currentLastEvent.value, currentLastEvent.endTime);\n                        }\n                        else if (currentLastEvent.type === 'setValue') {\n                            nativeAudioParam.setValueAtTime(currentLastEvent.value, currentLastEvent.startTime);\n                        }\n                        else if (currentLastEvent.type === 'setValueCurve') {\n                            nativeAudioParam.setValueCurveAtTime(currentLastEvent.values, currentLastEvent.startTime, currentLastEvent.duration);\n                        }\n                    }\n                }\n                return audioParam;\n            },\n            cancelScheduledValues(cancelTime) {\n                if (audioParamRenderer === null) {\n                    automationEventList.flush(audioNode.context.currentTime);\n                }\n                automationEventList.add(createCancelScheduledValuesAutomationEvent(cancelTime));\n                nativeAudioParam.cancelScheduledValues(cancelTime);\n                return audioParam;\n            },\n            exponentialRampToValueAtTime(value, endTime) {\n                if (audioParamRenderer === null) {\n                    automationEventList.flush(audioNode.context.currentTime);\n                }\n                automationEventList.add(createExponentialRampToValueAutomationEvent(value, endTime));\n                nativeAudioParam.exponentialRampToValueAtTime(value, endTime);\n                return audioParam;\n            },\n            linearRampToValueAtTime(value, endTime) {\n                if (audioParamRenderer === null) {\n                    automationEventList.flush(audioNode.context.currentTime);\n                }\n                automationEventList.add(createLinearRampToValueAutomationEvent(value, endTime));\n                nativeAudioParam.linearRampToValueAtTime(value, endTime);\n                return audioParam;\n            },\n            setTargetAtTime(target, startTime, timeConstant) {\n                if (audioParamRenderer === null) {\n                    automationEventList.flush(audioNode.context.currentTime);\n                }\n                automationEventList.add(createSetTargetAutomationEvent(target, startTime, timeConstant));\n                nativeAudioParam.setTargetAtTime(target, startTime, timeConstant);\n                return audioParam;\n            },\n            setValueAtTime(value, startTime) {\n                if (audioParamRenderer === null) {\n                    automationEventList.flush(audioNode.context.currentTime);\n                }\n                automationEventList.add(createSetValueAutomationEvent(value, startTime));\n                nativeAudioParam.setValueAtTime(value, startTime);\n                return audioParam;\n            },\n            setValueCurveAtTime(values, startTime, duration) {\n                /*\n                 * Bug #152: Safari does not correctly interpolate the values of the curve.\n                 * @todo Unfortunately there is no way to test for this behavior in synchronous fashion which is why testing for the\n                 * existence of the webkitAudioContext is used as a workaround here.\n                 */\n                if (nativeAudioContextConstructor !== null && nativeAudioContextConstructor.name === 'webkitAudioContext') {\n                    const endTime = startTime + duration;\n                    const sampleRate = audioNode.context.sampleRate;\n                    const firstSample = Math.ceil(startTime * sampleRate);\n                    const lastSample = Math.floor((endTime) * sampleRate);\n                    const numberOfInterpolatedValues = lastSample - firstSample;\n                    const interpolatedValues = new Float32Array(numberOfInterpolatedValues);\n                    for (let i = 0; i < numberOfInterpolatedValues; i += 1) {\n                        const theoreticIndex = ((values.length - 1) / duration) * (((firstSample + i) / sampleRate) - startTime);\n                        const lowerIndex = Math.floor(theoreticIndex);\n                        const upperIndex = Math.ceil(theoreticIndex);\n                        interpolatedValues[i] = (lowerIndex === upperIndex)\n                            ? values[lowerIndex]\n                            : ((1 - (theoreticIndex - lowerIndex)) * values[lowerIndex])\n                                + ((1 - (upperIndex - theoreticIndex)) * values[upperIndex]);\n                    }\n                    if (audioParamRenderer === null) {\n                        automationEventList.flush(audioNode.context.currentTime);\n                    }\n                    automationEventList.add(createSetValueCurveAutomationEvent(interpolatedValues, startTime, duration));\n                    nativeAudioParam.setValueCurveAtTime(interpolatedValues, startTime, duration);\n                    const timeOfLastSample = lastSample / sampleRate;\n                    if (timeOfLastSample < endTime) {\n                        audioParam.setValueAtTime(interpolatedValues[interpolatedValues.length - 1], timeOfLastSample);\n                    }\n                    audioParam.setValueAtTime(values[values.length - 1], endTime);\n                }\n                else {\n                    if (audioParamRenderer === null) {\n                        automationEventList.flush(audioNode.context.currentTime);\n                    }\n                    automationEventList.add(createSetValueCurveAutomationEvent(values, startTime, duration));\n                    nativeAudioParam.setValueCurveAtTime(values, startTime, duration);\n                }\n                return audioParam;\n            }\n        };\n        audioParamStore.set(audioParam, nativeAudioParam);\n        audioParamAudioNodeStore.set(audioParam, audioNode);\n        addAudioParamConnections(audioParam, audioParamRenderer);\n        return audioParam;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-param-factory.js.map","export const createAddAudioParamConnections = (audioParamConnectionsStore) => {\n    return (audioParam, audioParamRenderer) => {\n        audioParamConnectionsStore.set(audioParam, { activeInputs: new Set(), passiveInputs: new WeakMap(), renderer: audioParamRenderer });\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/add-audio-param-connections.js.map","export const createAudioParamRenderer = (automationEventList) => {\n    return {\n        replay(audioParam) {\n            for (const automationEvent of automationEventList) {\n                if (automationEvent.type === 'exponentialRampToValue') {\n                    const { endTime, value } = automationEvent;\n                    audioParam.exponentialRampToValueAtTime(value, endTime);\n                }\n                else if (automationEvent.type === 'linearRampToValue') {\n                    const { endTime, value } = automationEvent;\n                    audioParam.linearRampToValueAtTime(value, endTime);\n                }\n                else if (automationEvent.type === 'setTarget') {\n                    const { startTime, target, timeConstant } = automationEvent;\n                    audioParam.setTargetAtTime(target, startTime, timeConstant);\n                }\n                else if (automationEvent.type === 'setValue') {\n                    const { startTime, value } = automationEvent;\n                    audioParam.setValueAtTime(value, startTime);\n                }\n                else if (automationEvent.type === 'setValueCurve') {\n                    const { duration, startTime, values } = automationEvent;\n                    audioParam.setValueCurveAtTime(values, startTime, duration);\n                }\n                else {\n                    throw new Error(\"Can't apply an unknown automation.\");\n                }\n            }\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-param-renderer.js.map","export const MOST_NEGATIVE_SINGLE_FLOAT = -3.4028234663852886e38;\nexport const MOST_POSITIVE_SINGLE_FLOAT = -MOST_NEGATIVE_SINGLE_FLOAT;\n//# sourceMappingURL=/build/es2018/constants.js.map","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeGainNodeFactory = (createNativeAudioNode) => {\n    return (nativeContext, options) => {\n        const nativeGainNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createGain());\n        assignNativeAudioNodeOptions(nativeGainNode, options);\n        assignNativeAudioNodeAudioParamValue(nativeGainNode, options, 'gain');\n        return nativeGainNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-gain-node-factory.js.map","export const createAudioDestinationNodeConstructor = (audioNodeConstructor, createAudioDestinationNodeRenderer, createIndexSizeError, createInvalidStateError, createNativeAudioDestinationNode, getNativeContext, isNativeOfflineAudioContext, renderInputsOfAudioNode) => {\n    return class AudioDestinationNode extends audioNodeConstructor {\n        constructor(context, channelCount) {\n            const nativeContext = getNativeContext(context);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const nativeAudioDestinationNode = createNativeAudioDestinationNode(nativeContext, channelCount, isOffline);\n            const audioDestinationNodeRenderer = ((isOffline)\n                ? createAudioDestinationNodeRenderer(renderInputsOfAudioNode)\n                : null);\n            super(context, false, nativeAudioDestinationNode, audioDestinationNodeRenderer);\n            this._isNodeOfNativeOfflineAudioContext = isOffline;\n            this._nativeAudioDestinationNode = nativeAudioDestinationNode;\n        }\n        get channelCount() {\n            return this._nativeAudioDestinationNode.channelCount;\n        }\n        set channelCount(value) {\n            // Bug #52: Chrome, Edge, Opera & Safari do not throw an exception at all.\n            // Bug #54: Firefox does throw an IndexSizeError.\n            if (this._isNodeOfNativeOfflineAudioContext) {\n                throw createInvalidStateError();\n            }\n            // Bug #47: The AudioDestinationNode in Edge and Safari do not initialize the maxChannelCount property correctly.\n            if (value > this._nativeAudioDestinationNode.maxChannelCount) {\n                throw createIndexSizeError();\n            }\n            this._nativeAudioDestinationNode.channelCount = value;\n        }\n        get channelCountMode() {\n            return this._nativeAudioDestinationNode.channelCountMode;\n        }\n        set channelCountMode(value) {\n            // Bug #53: No browser does throw an exception yet.\n            if (this._isNodeOfNativeOfflineAudioContext) {\n                throw createInvalidStateError();\n            }\n            this._nativeAudioDestinationNode.channelCountMode = value;\n        }\n        get maxChannelCount() {\n            return this._nativeAudioDestinationNode.maxChannelCount;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-destination-node-constructor.js.map","export const createAudioDestinationNodeRenderer = (renderInputsOfAudioNode) => {\n    let nativeAudioDestinationNodePromise = null;\n    const createAudioDestinationNode = async (proxy, nativeOfflineAudioContext, trace) => {\n        const nativeAudioDestinationNode = nativeOfflineAudioContext.destination;\n        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioDestinationNode, trace);\n        return nativeAudioDestinationNode;\n    };\n    return {\n        render(proxy, nativeOfflineAudioContext, trace) {\n            if (nativeAudioDestinationNodePromise === null) {\n                nativeAudioDestinationNodePromise = createAudioDestinationNode(proxy, nativeOfflineAudioContext, trace);\n            }\n            return nativeAudioDestinationNodePromise;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-destination-node-renderer-factory.js.map","export const createNativeAudioDestinationNodeFactory = (createNativeGainNode, overwriteAccessors) => {\n    return (nativeContext, channelCount, isNodeOfNativeOfflineAudioContext) => {\n        const nativeAudioDestinationNode = nativeContext.destination;\n        // Bug #132: Edge & Safari do not have the correct channelCount.\n        if (nativeAudioDestinationNode.channelCount !== channelCount) {\n            try {\n                nativeAudioDestinationNode.channelCount = channelCount;\n            }\n            catch (_a) {\n                // Bug #169: Safari throws an error on each attempt to change the channelCount.\n            }\n        }\n        // Bug #83: Edge & Safari do not have the correct channelCountMode.\n        if (isNodeOfNativeOfflineAudioContext && nativeAudioDestinationNode.channelCountMode !== 'explicit') {\n            nativeAudioDestinationNode.channelCountMode = 'explicit';\n        }\n        // Bug #47: The AudioDestinationNode in Edge and Safari does not initialize the maxChannelCount property correctly.\n        if (nativeAudioDestinationNode.maxChannelCount === 0) {\n            Object.defineProperty(nativeAudioDestinationNode, 'maxChannelCount', {\n                value: channelCount\n            });\n        }\n        // Bug #168: No browser does yet have an AudioDestinationNode with an output.\n        const gainNode = createNativeGainNode(nativeContext, {\n            channelCount,\n            channelCountMode: nativeAudioDestinationNode.channelCountMode,\n            channelInterpretation: nativeAudioDestinationNode.channelInterpretation,\n            gain: 1\n        });\n        overwriteAccessors(gainNode, 'channelCount', (get) => () => get.call(gainNode), (set) => (value) => {\n            set.call(gainNode, value);\n            try {\n                nativeAudioDestinationNode.channelCount = value;\n            }\n            catch (err) {\n                // Bug #169: Safari throws an error on each attempt to change the channelCount.\n                if (value > nativeAudioDestinationNode.maxChannelCount) {\n                    throw err;\n                }\n            }\n        });\n        overwriteAccessors(gainNode, 'channelCountMode', (get) => () => get.call(gainNode), (set) => (value) => {\n            set.call(gainNode, value);\n            nativeAudioDestinationNode.channelCountMode = value;\n        });\n        overwriteAccessors(gainNode, 'channelInterpretation', (get) => () => get.call(gainNode), (set) => (value) => {\n            set.call(gainNode, value);\n            nativeAudioDestinationNode.channelInterpretation = value;\n        });\n        Object.defineProperty(gainNode, 'maxChannelCount', {\n            get: () => nativeAudioDestinationNode.maxChannelCount\n        });\n        // @todo This should be disconnected when the context is closed.\n        gainNode.connect(nativeAudioDestinationNode);\n        return gainNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-audio-destination-node.js.map","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeBiquadFilterNodeFactory = (createNativeAudioNode) => {\n    return (nativeContext, options) => {\n        const nativeBiquadFilterNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createBiquadFilter());\n        assignNativeAudioNodeOptions(nativeBiquadFilterNode, options);\n        assignNativeAudioNodeAudioParamValue(nativeBiquadFilterNode, options, 'Q');\n        assignNativeAudioNodeAudioParamValue(nativeBiquadFilterNode, options, 'detune');\n        assignNativeAudioNodeAudioParamValue(nativeBiquadFilterNode, options, 'frequency');\n        assignNativeAudioNodeAudioParamValue(nativeBiquadFilterNode, options, 'gain');\n        assignNativeAudioNodeOption(nativeBiquadFilterNode, options, 'type');\n        return nativeBiquadFilterNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-biquad-filter-node-factory.js.map","import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createBiquadFilterNodeRendererFactory = (connectAudioParam, createNativeBiquadFilterNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeBiquadFilterNodes = new WeakMap();\n        const createBiquadFilterNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeBiquadFilterNode = getNativeAudioNode(proxy);\n            /*\n             * If the initially used nativeBiquadFilterNode was not constructed on the same OfflineAudioContext it needs to be created\n             * again.\n             */\n            const nativeBiquadFilterNodeIsOwnedByContext = isOwnedByContext(nativeBiquadFilterNode, nativeOfflineAudioContext);\n            if (!nativeBiquadFilterNodeIsOwnedByContext) {\n                const options = {\n                    Q: nativeBiquadFilterNode.Q.value,\n                    channelCount: nativeBiquadFilterNode.channelCount,\n                    channelCountMode: nativeBiquadFilterNode.channelCountMode,\n                    channelInterpretation: nativeBiquadFilterNode.channelInterpretation,\n                    detune: nativeBiquadFilterNode.detune.value,\n                    frequency: nativeBiquadFilterNode.frequency.value,\n                    gain: nativeBiquadFilterNode.gain.value,\n                    type: nativeBiquadFilterNode.type\n                };\n                nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeBiquadFilterNodes.set(nativeOfflineAudioContext, nativeBiquadFilterNode);\n            if (!nativeBiquadFilterNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain, trace);\n            }\n            else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain, trace);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeBiquadFilterNode, trace);\n            return nativeBiquadFilterNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeBiquadFilterNode = renderedNativeBiquadFilterNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeBiquadFilterNode !== undefined) {\n                    return Promise.resolve(renderedNativeBiquadFilterNode);\n                }\n                return createBiquadFilterNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/biquad-filter-node-renderer-factory.js.map","export const createMonitorConnections = (insertElementInSet, isNativeAudioNode) => {\n    return (nativeAudioNode, whenConnected, whenDisconnected) => {\n        const connections = new Set();\n        nativeAudioNode.connect = ((connect) => {\n            return (destination, output = 0, input = 0) => {\n                const wasDisconnected = connections.size === 0;\n                if (isNativeAudioNode(destination)) {\n                    // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.\n                    connect.call(nativeAudioNode, destination, output, input);\n                    insertElementInSet(connections, [destination, output, input], (connection) => (connection[0] === destination && connection[1] === output && connection[2] === input), true);\n                    if (wasDisconnected) {\n                        whenConnected();\n                    }\n                    return destination;\n                }\n                connect.call(nativeAudioNode, destination, output);\n                insertElementInSet(connections, [destination, output], (connection) => (connection[0] === destination && connection[1] === output), true);\n                if (wasDisconnected) {\n                    whenConnected();\n                }\n                return;\n            };\n        })(nativeAudioNode.connect);\n        nativeAudioNode.disconnect = ((disconnect) => {\n            return (destinationOrOutput, output, input) => {\n                const wasConnected = connections.size > 0;\n                if (destinationOrOutput === undefined) {\n                    disconnect.apply(nativeAudioNode);\n                    connections.clear();\n                }\n                else if (typeof destinationOrOutput === 'number') {\n                    // @todo TypeScript cannot infer the overloaded signature with 1 argument yet.\n                    disconnect.call(nativeAudioNode, destinationOrOutput);\n                    for (const connection of connections) {\n                        if (connection[1] === destinationOrOutput) {\n                            connections.delete(connection);\n                        }\n                    }\n                }\n                else {\n                    if (isNativeAudioNode(destinationOrOutput)) {\n                        // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.\n                        disconnect.call(nativeAudioNode, destinationOrOutput, output, input);\n                    }\n                    else {\n                        // @todo TypeScript cannot infer the overloaded signature with 2 arguments yet.\n                        disconnect.call(nativeAudioNode, destinationOrOutput, output);\n                    }\n                    for (const connection of connections) {\n                        if (connection[0] === destinationOrOutput\n                            && (output === undefined || connection[1] === output)\n                            && (input === undefined || connection[2] === input)) {\n                            connections.delete(connection);\n                        }\n                    }\n                }\n                const isDisconnected = connections.size === 0;\n                if (wasConnected && isDisconnected) {\n                    whenDisconnected();\n                }\n            };\n        })(nativeAudioNode.disconnect);\n        return nativeAudioNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/monitor-connections.js.map","export const createWrapChannelMergerNode = (createInvalidStateError, createNativeAudioNode, monitorConnectionsFunction) => {\n    return (nativeContext, channelMergerNode) => {\n        channelMergerNode.channelCount = 1;\n        channelMergerNode.channelCountMode = 'explicit';\n        Object.defineProperty(channelMergerNode, 'channelCount', {\n            get: () => 1,\n            set: () => {\n                throw createInvalidStateError();\n            }\n        });\n        Object.defineProperty(channelMergerNode, 'channelCountMode', {\n            get: () => 'explicit',\n            set: () => {\n                throw createInvalidStateError();\n            }\n        });\n        // Bug #20: Safari requires a connection of any kind to treat the input signal correctly.\n        const audioBufferSourceNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createBufferSource());\n        const whenConnected = () => {\n            const length = channelMergerNode.numberOfInputs;\n            for (let i = 0; i < length; i += 1) {\n                audioBufferSourceNode.connect(channelMergerNode, 0, i);\n            }\n        };\n        const whenDisconnected = () => audioBufferSourceNode.disconnect(channelMergerNode);\n        monitorConnectionsFunction(channelMergerNode, whenConnected, whenDisconnected);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/wrap-channel-merger-node.js.map","import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeChannelMergerNodeFactory = (createNativeAudioNode, wrapChannelMergerNode) => {\n    return (nativeContext, options) => {\n        const nativeChannelMergerNode = createNativeAudioNode(nativeContext, (ntvCntxt) => {\n            return ntvCntxt.createChannelMerger(options.numberOfInputs);\n        });\n        assignNativeAudioNodeOptions(nativeChannelMergerNode, options);\n        // Bug #15: Safari does not return the default properties.\n        if (nativeChannelMergerNode.channelCount !== 1 &&\n            nativeChannelMergerNode.channelCountMode !== 'explicit') {\n            wrapChannelMergerNode(nativeContext, nativeChannelMergerNode);\n        }\n        // Bug #16: Firefox does not throw an error when setting a different channelCount or channelCountMode.\n        try {\n            nativeChannelMergerNode.channelCount = (options.numberOfInputs === undefined) ? 6 : options.numberOfInputs;\n            wrapChannelMergerNode(nativeContext, nativeChannelMergerNode);\n        }\n        catch ( /* Ignore errors. */_a) { /* Ignore errors. */ } // tslint:disable-line:no-empty\n        return nativeChannelMergerNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-channel-merger-node-factory.js.map","import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createChannelMergerNodeRendererFactory = (createNativeChannelMergerNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeAudioNodes = new WeakMap();\n        const createAudioNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeAudioNode = getNativeAudioNode(proxy);\n            // If the initially used nativeAudioNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeAudioNodeIsOwnedByContext = isOwnedByContext(nativeAudioNode, nativeOfflineAudioContext);\n            if (!nativeAudioNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeAudioNode.channelCount,\n                    channelCountMode: nativeAudioNode.channelCountMode,\n                    channelInterpretation: nativeAudioNode.channelInterpretation,\n                    numberOfInputs: nativeAudioNode.numberOfInputs\n                };\n                nativeAudioNode = createNativeChannelMergerNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioNode);\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioNode, trace);\n            return nativeAudioNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeAudioNode !== undefined) {\n                    return Promise.resolve(renderedNativeAudioNode);\n                }\n                return createAudioNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/channel-merger-node-renderer-factory.js.map","import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { wrapChannelSplitterNode } from '../helpers/wrap-channel-splitter-node';\nexport const createNativeChannelSplitterNodeFactory = (createNativeAudioNode) => {\n    return (nativeContext, options) => {\n        const nativeChannelSplitterNode = createNativeAudioNode(nativeContext, (ntvCntxt) => {\n            return ntvCntxt.createChannelSplitter(options.numberOfOutputs);\n        });\n        // Bug #96: Safari does not have the correct channelCount.\n        // Bug #29: Edge & Safari do not have the correct channelCountMode.\n        // Bug #31: Edge & Safari do not have the correct channelInterpretation.\n        assignNativeAudioNodeOptions(nativeChannelSplitterNode, options);\n        // Bug #29, #30, #31, #32, #96 & #97: Only Chrome, Firefox & Opera partially support the spec yet.\n        wrapChannelSplitterNode(nativeChannelSplitterNode);\n        return nativeChannelSplitterNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-channel-splitter-node-factory.js.map","import { createInvalidStateError } from '../factories/invalid-state-error';\nexport const wrapChannelSplitterNode = (channelSplitterNode) => {\n    const channelCount = channelSplitterNode.numberOfOutputs;\n    // Bug #97: Safari does not throw an error when attempting to change the channelCount to something other than its initial value.\n    Object.defineProperty(channelSplitterNode, 'channelCount', {\n        get: () => channelCount,\n        set: (value) => {\n            if (value !== channelCount) {\n                throw createInvalidStateError();\n            }\n        }\n    });\n    /*\n     * Bug #30: Only Chrome, Firefox & Opera throw an error when attempting to change the channelCountMode to something other than\n     * explicit.\n     */\n    Object.defineProperty(channelSplitterNode, 'channelCountMode', {\n        get: () => 'explicit',\n        set: (value) => {\n            if (value !== 'explicit') {\n                throw createInvalidStateError();\n            }\n        }\n    });\n    /*\n     * Bug #32: Only Chrome, Firefox & Opera throws an error when attempting to change the channelInterpretation to something other than\n     * discrete.\n     */\n    Object.defineProperty(channelSplitterNode, 'channelInterpretation', {\n        get: () => 'discrete',\n        set: (value) => {\n            if (value !== 'discrete') {\n                throw createInvalidStateError();\n            }\n        }\n    });\n};\n//# sourceMappingURL=/build/es2018/helpers/wrap-channel-splitter-node.js.map","import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createChannelSplitterNodeRendererFactory = (createNativeChannelSplitterNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeAudioNodes = new WeakMap();\n        const createAudioNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeAudioNode = getNativeAudioNode(proxy);\n            // If the initially used nativeAudioNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeAudioNodeIsOwnedByContext = isOwnedByContext(nativeAudioNode, nativeOfflineAudioContext);\n            if (!nativeAudioNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeAudioNode.channelCount,\n                    channelCountMode: nativeAudioNode.channelCountMode,\n                    channelInterpretation: nativeAudioNode.channelInterpretation,\n                    numberOfOutputs: nativeAudioNode.numberOfOutputs\n                };\n                nativeAudioNode = createNativeChannelSplitterNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioNode);\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioNode, trace);\n            return nativeAudioNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeAudioNode !== undefined) {\n                    return Promise.resolve(renderedNativeAudioNode);\n                }\n                return createAudioNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/channel-splitter-node-renderer-factory.js.map","import { interceptConnections } from '../helpers/intercept-connections';\nexport const createNativeConstantSourceNodeFakerFactory = (createNativeAudioBufferSourceNode, createNativeGainNode, monitorConnections) => {\n    return (nativeContext, { offset, ...audioNodeOptions }) => {\n        const audioBuffer = nativeContext.createBuffer(1, 2, nativeContext.sampleRate);\n        const audioBufferSourceNode = createNativeAudioBufferSourceNode(nativeContext);\n        const gainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, gain: offset });\n        // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n        const channelData = audioBuffer.getChannelData(0);\n        // Bug #95: Safari does not play or loop one sample buffers.\n        channelData[0] = 1;\n        channelData[1] = 1;\n        audioBufferSourceNode.buffer = audioBuffer;\n        audioBufferSourceNode.loop = true;\n        const nativeConstantSourceNodeFaker = {\n            get bufferSize() {\n                return undefined;\n            },\n            get channelCount() {\n                return gainNode.channelCount;\n            },\n            set channelCount(value) {\n                gainNode.channelCount = value;\n            },\n            get channelCountMode() {\n                return gainNode.channelCountMode;\n            },\n            set channelCountMode(value) {\n                gainNode.channelCountMode = value;\n            },\n            get channelInterpretation() {\n                return gainNode.channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                gainNode.channelInterpretation = value;\n            },\n            get context() {\n                return gainNode.context;\n            },\n            get inputs() {\n                return [];\n            },\n            get numberOfInputs() {\n                return audioBufferSourceNode.numberOfInputs;\n            },\n            get numberOfOutputs() {\n                return gainNode.numberOfOutputs;\n            },\n            get offset() {\n                return gainNode.gain;\n            },\n            get onended() {\n                return audioBufferSourceNode.onended;\n            },\n            set onended(value) {\n                audioBufferSourceNode.onended = value;\n            },\n            addEventListener(...args) {\n                return audioBufferSourceNode.addEventListener(args[0], args[1], args[2]);\n            },\n            dispatchEvent(...args) {\n                return audioBufferSourceNode.dispatchEvent(args[0]);\n            },\n            removeEventListener(...args) {\n                return audioBufferSourceNode.removeEventListener(args[0], args[1], args[2]);\n            },\n            start(when = 0) {\n                audioBufferSourceNode.start.call(audioBufferSourceNode, when);\n            },\n            stop(when = 0) {\n                audioBufferSourceNode.stop.call(audioBufferSourceNode, when);\n            }\n        };\n        const whenConnected = () => audioBufferSourceNode.connect(gainNode);\n        const whenDisconnected = () => audioBufferSourceNode.disconnect(gainNode);\n        return monitorConnections(interceptConnections(nativeConstantSourceNodeFaker, gainNode), whenConnected, whenDisconnected);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-constant-source-node-faker-factory.js.map","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { wrapAudioScheduledSourceNodeStartMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters';\nimport { wrapAudioScheduledSourceNodeStopMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters';\nexport const createNativeConstantSourceNodeFactory = (cacheTestResult, createNativeAudioNode, createNativeConstantSourceNodeFaker, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport) => {\n    return (nativeContext, options) => {\n        // Bug #62: Edge & Safari do not support ConstantSourceNodes.\n        if (nativeContext.createConstantSource === undefined) {\n            return createNativeConstantSourceNodeFaker(nativeContext, options);\n        }\n        const nativeConstantSourceNode = createNativeAudioNode(nativeContext, (ntvCntxt) => {\n            return ntvCntxt.createConstantSource();\n        });\n        assignNativeAudioNodeOptions(nativeConstantSourceNode, options);\n        assignNativeAudioNodeAudioParamValue(nativeConstantSourceNode, options, 'offset');\n        // Bug #44: Only Chrome, Firefox & Opera throw a RangeError yet.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(nativeContext))) {\n            wrapAudioScheduledSourceNodeStartMethodNegativeParameters(nativeConstantSourceNode);\n        }\n        // Bug #44: Only Firefox does throw a RangeError yet.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(nativeContext))) {\n            wrapAudioScheduledSourceNodeStopMethodNegativeParameters(nativeConstantSourceNode);\n        }\n        return nativeConstantSourceNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-constant-source-node-factory.js.map","import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createConstantSourceNodeRendererFactory = (connectAudioParam, createNativeConstantSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeConstantSourceNodes = new WeakMap();\n        let start = null;\n        let stop = null;\n        const createConstantSourceNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeConstantSourceNode = getNativeAudioNode(proxy);\n            /*\n             * If the initially used nativeConstantSourceNode was not constructed on the same OfflineAudioContext it needs to be created\n             * again.\n             */\n            const nativeConstantSourceNodeIsOwnedByContext = isOwnedByContext(nativeConstantSourceNode, nativeOfflineAudioContext);\n            if (!nativeConstantSourceNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeConstantSourceNode.channelCount,\n                    channelCountMode: nativeConstantSourceNode.channelCountMode,\n                    channelInterpretation: nativeConstantSourceNode.channelInterpretation,\n                    offset: nativeConstantSourceNode.offset.value\n                };\n                nativeConstantSourceNode = createNativeConstantSourceNode(nativeOfflineAudioContext, options);\n                if (start !== null) {\n                    nativeConstantSourceNode.start(start);\n                }\n                if (stop !== null) {\n                    nativeConstantSourceNode.stop(stop);\n                }\n            }\n            renderedNativeConstantSourceNodes.set(nativeOfflineAudioContext, nativeConstantSourceNode);\n            if (!nativeConstantSourceNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset, trace);\n            }\n            else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset, trace);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConstantSourceNode, trace);\n            return nativeConstantSourceNode;\n        };\n        return {\n            set start(value) {\n                start = value;\n            },\n            set stop(value) {\n                stop = value;\n            },\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeConstantSourceNode = renderedNativeConstantSourceNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeConstantSourceNode !== undefined) {\n                    return Promise.resolve(renderedNativeConstantSourceNode);\n                }\n                return createConstantSourceNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/constant-source-node-renderer-factory.js.map","import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { interceptConnections } from '../helpers/intercept-connections';\nexport const createNativeConvolverNodeFakerFactory = (createNativeAudioNode, createNativeGainNode, monitorConnections) => {\n    return (nativeContext, { buffer, channelCount, channelCountMode, channelInterpretation, disableNormalization }) => {\n        const convolverNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createConvolver());\n        assignNativeAudioNodeOptions(convolverNode, {\n            // Bug #166: Chrome & Opera do not allow yet to set the channelCount to 1.\n            channelCount: Math.max(channelCount, 2),\n            // Bug #167: Chrome & Opera do not allow yet to set the channelCountMode to 'explicit'.\n            channelCountMode: (channelCountMode === 'max') ? channelCountMode : 'clamped-max',\n            channelInterpretation\n        });\n        const gainNode = createNativeGainNode(nativeContext, { channelCount, channelCountMode, channelInterpretation, gain: 1 });\n        const nativeConvolverNodeFaker = {\n            get buffer() {\n                return convolverNode.buffer;\n            },\n            set buffer(value) {\n                convolverNode.buffer = value;\n            },\n            get bufferSize() {\n                return undefined;\n            },\n            get channelCount() {\n                return gainNode.channelCount;\n            },\n            set channelCount(value) {\n                // Bug #166: Chrome & Opera do not allow yet to set the channelCount to 1.\n                if (value > 2) {\n                    convolverNode.channelCount = value;\n                }\n                gainNode.channelCount = value;\n            },\n            get channelCountMode() {\n                return gainNode.channelCountMode;\n            },\n            set channelCountMode(value) {\n                // Bug #167: Chrome & Opera do not allow yet to set the channelCountMode to 'explicit'.\n                if (value === 'max') {\n                    convolverNode.channelCountMode = value;\n                }\n                gainNode.channelCountMode = value;\n            },\n            get channelInterpretation() {\n                return convolverNode.channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                convolverNode.channelInterpretation = value;\n                gainNode.channelInterpretation = value;\n            },\n            get context() {\n                return convolverNode.context;\n            },\n            get inputs() {\n                return [convolverNode];\n            },\n            get numberOfInputs() {\n                return convolverNode.numberOfInputs;\n            },\n            get numberOfOutputs() {\n                return convolverNode.numberOfOutputs;\n            },\n            get normalize() {\n                return convolverNode.normalize;\n            },\n            set normalize(value) {\n                convolverNode.normalize = value;\n            },\n            addEventListener(...args) {\n                return convolverNode.addEventListener(args[0], args[1], args[2]);\n            },\n            dispatchEvent(...args) {\n                return convolverNode.dispatchEvent(args[0]);\n            },\n            removeEventListener(...args) {\n                return convolverNode.removeEventListener(args[0], args[1], args[2]);\n            }\n        };\n        // The normalize property needs to be set before setting the buffer.\n        if (disableNormalization === nativeConvolverNodeFaker.normalize) {\n            nativeConvolverNodeFaker.normalize = !disableNormalization;\n        }\n        if (buffer !== nativeConvolverNodeFaker.buffer) {\n            nativeConvolverNodeFaker.buffer = buffer;\n        }\n        const whenConnected = () => convolverNode.connect(gainNode);\n        const whenDisconnected = () => convolverNode.disconnect(gainNode);\n        return monitorConnections(interceptConnections(nativeConvolverNodeFaker, gainNode), whenConnected, whenDisconnected);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-convolver-node-faker-factory.js.map","import { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeConvolverNodeFactory = (createNativeAudioNode, createNativeConvolverNodeFaker, createNotSupportedError, overwriteAccessors) => {\n    return (nativeContext, options) => {\n        const nativeConvolverNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createConvolver());\n        try {\n            // Bug #166: Chrome & Opera do not allow yet to set the channelCount to 1.\n            nativeConvolverNode.channelCount = 1;\n        }\n        catch (err) {\n            return createNativeConvolverNodeFaker(nativeContext, options);\n        }\n        assignNativeAudioNodeOptions(nativeConvolverNode, options);\n        // The normalize property needs to be set before setting the buffer.\n        if (options.disableNormalization === nativeConvolverNode.normalize) {\n            nativeConvolverNode.normalize = !options.disableNormalization;\n        }\n        assignNativeAudioNodeOption(nativeConvolverNode, options, 'buffer');\n        // Bug #113: Edge & Safari allow to set the channelCount to a value larger than 2.\n        if (options.channelCount > 2) {\n            throw createNotSupportedError();\n        }\n        overwriteAccessors(nativeConvolverNode, 'channelCount', (get) => () => get.call(nativeConvolverNode), (set) => (value) => {\n            if (value > 2) {\n                throw createNotSupportedError();\n            }\n            return set.call(nativeConvolverNode, value);\n        });\n        // Bug #114: Edge & Safari allow to set the channelCountMode to 'max'.\n        if (options.channelCountMode === 'max') {\n            throw createNotSupportedError();\n        }\n        overwriteAccessors(nativeConvolverNode, 'channelCountMode', (get) => () => get.call(nativeConvolverNode), (set) => (value) => {\n            if (value === 'max') {\n                throw createNotSupportedError();\n            }\n            return set.call(nativeConvolverNode, value);\n        });\n        return nativeConvolverNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-convolver-node-factory.js.map","import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createConvolverNodeRendererFactory = (createNativeConvolverNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeConvolverNodes = new WeakMap();\n        const createConvolverNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeConvolverNode = getNativeAudioNode(proxy);\n            // If the initially used nativeConvolverNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeConvolverNodeIsOwnedByContext = isOwnedByContext(nativeConvolverNode, nativeOfflineAudioContext);\n            if (!nativeConvolverNodeIsOwnedByContext) {\n                const options = {\n                    buffer: nativeConvolverNode.buffer,\n                    channelCount: nativeConvolverNode.channelCount,\n                    channelCountMode: nativeConvolverNode.channelCountMode,\n                    channelInterpretation: nativeConvolverNode.channelInterpretation,\n                    disableNormalization: !nativeConvolverNode.normalize\n                };\n                nativeConvolverNode = createNativeConvolverNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeConvolverNodes.set(nativeOfflineAudioContext, nativeConvolverNode);\n            if (isNativeAudioNodeFaker(nativeConvolverNode)) {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode.inputs[0], trace);\n            }\n            else {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode, trace);\n            }\n            return nativeConvolverNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeConvolverNode = renderedNativeConvolverNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeConvolverNode !== undefined) {\n                    return Promise.resolve(renderedNativeConvolverNode);\n                }\n                return createConvolverNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/convolver-node-renderer-factory.js.map","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeDelayNodeFactory = (createNativeAudioNode) => {\n    return (nativeContext, options) => {\n        const nativeDelayNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createDelay(options.maxDelayTime));\n        assignNativeAudioNodeOptions(nativeDelayNode, options);\n        assignNativeAudioNodeAudioParamValue(nativeDelayNode, options, 'delayTime');\n        return nativeDelayNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-delay-node-factory.js.map","import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createDelayNodeRendererFactory = (connectAudioParam, createNativeDelayNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return (maxDelayTime) => {\n        const renderedNativeDelayNodes = new WeakMap();\n        const createDelayNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeDelayNode = getNativeAudioNode(proxy);\n            // If the initially used nativeDelayNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeDelayNodeIsOwnedByContext = isOwnedByContext(nativeDelayNode, nativeOfflineAudioContext);\n            if (!nativeDelayNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeDelayNode.channelCount,\n                    channelCountMode: nativeDelayNode.channelCountMode,\n                    channelInterpretation: nativeDelayNode.channelInterpretation,\n                    delayTime: nativeDelayNode.delayTime.value,\n                    maxDelayTime\n                };\n                nativeDelayNode = createNativeDelayNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeDelayNodes.set(nativeOfflineAudioContext, nativeDelayNode);\n            if (!nativeDelayNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime, trace);\n            }\n            else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime, trace);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDelayNode, trace);\n            return nativeDelayNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeDelayNode = renderedNativeDelayNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeDelayNode !== undefined) {\n                    return Promise.resolve(renderedNativeDelayNode);\n                }\n                return createDelayNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/delay-node-renderer-factory.js.map","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeDynamicsCompressorNodeFactory = (createNativeAudioNode, createNotSupportedError) => {\n    return (nativeContext, options) => {\n        const nativeDynamicsCompressorNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createDynamicsCompressor());\n        assignNativeAudioNodeOptions(nativeDynamicsCompressorNode, options);\n        // Bug #108: Only Chrome, Firefox and Opera disallow a channelCount of three and above yet.\n        if (options.channelCount > 2) {\n            throw createNotSupportedError();\n        }\n        // Bug #109: Only Chrome, Firefox and Opera disallow a channelCountMode of 'max'.\n        if (options.channelCountMode === 'max') {\n            throw createNotSupportedError();\n        }\n        assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode, options, 'attack');\n        assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode, options, 'knee');\n        assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode, options, 'ratio');\n        assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode, options, 'release');\n        assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode, options, 'threshold');\n        return nativeDynamicsCompressorNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-dynamics-compressor-node-factory.js.map","import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createDynamicsCompressorNodeRendererFactory = (connectAudioParam, createNativeDynamicsCompressorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeDynamicsCompressorNodes = new WeakMap();\n        const createDynamicsCompressorNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeDynamicsCompressorNode = getNativeAudioNode(proxy);\n            /*\n             * If the initially used nativeDynamicsCompressorNode was not constructed on the same OfflineAudioContext it needs to be\n             * created again.\n             */\n            const nativeDynamicsCompressorNodeIsOwnedByContext = isOwnedByContext(nativeDynamicsCompressorNode, nativeOfflineAudioContext);\n            if (!nativeDynamicsCompressorNodeIsOwnedByContext) {\n                const options = {\n                    attack: nativeDynamicsCompressorNode.attack.value,\n                    channelCount: nativeDynamicsCompressorNode.channelCount,\n                    channelCountMode: nativeDynamicsCompressorNode.channelCountMode,\n                    channelInterpretation: nativeDynamicsCompressorNode.channelInterpretation,\n                    knee: nativeDynamicsCompressorNode.knee.value,\n                    ratio: nativeDynamicsCompressorNode.ratio.value,\n                    release: nativeDynamicsCompressorNode.release.value,\n                    threshold: nativeDynamicsCompressorNode.threshold.value\n                };\n                nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeDynamicsCompressorNodes.set(nativeOfflineAudioContext, nativeDynamicsCompressorNode);\n            if (!nativeDynamicsCompressorNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold, trace);\n            }\n            else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold, trace);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDynamicsCompressorNode, trace);\n            return nativeDynamicsCompressorNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeDynamicsCompressorNode = renderedNativeDynamicsCompressorNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeDynamicsCompressorNode !== undefined) {\n                    return Promise.resolve(renderedNativeDynamicsCompressorNode);\n                }\n                return createDynamicsCompressorNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/dynamics-compressor-node-renderer-factory.js.map","import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createGainNodeRendererFactory = (connectAudioParam, createNativeGainNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeGainNodes = new WeakMap();\n        const createGainNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeGainNode = getNativeAudioNode(proxy);\n            // If the initially used nativeGainNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeGainNodeIsOwnedByContext = isOwnedByContext(nativeGainNode, nativeOfflineAudioContext);\n            if (!nativeGainNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeGainNode.channelCount,\n                    channelCountMode: nativeGainNode.channelCountMode,\n                    channelInterpretation: nativeGainNode.channelInterpretation,\n                    gain: nativeGainNode.gain.value\n                };\n                nativeGainNode = createNativeGainNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeGainNodes.set(nativeOfflineAudioContext, nativeGainNode);\n            if (!nativeGainNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain, trace);\n            }\n            else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain, trace);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeGainNode, trace);\n            return nativeGainNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeGainNode = renderedNativeGainNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeGainNode !== undefined) {\n                    return Promise.resolve(renderedNativeGainNode);\n                }\n                return createGainNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/gain-node-renderer-factory.js.map","export const createNativeScriptProcessorNodeFactory = (createNativeAudioNode) => {\n    return (nativeContext, bufferSize, numberOfInputChannels, numberOfOutputChannels) => {\n        return createNativeAudioNode(nativeContext, (ntvCntxt) => {\n            return ntvCntxt.createScriptProcessor(bufferSize, numberOfInputChannels, numberOfOutputChannels);\n        });\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-script-processor-node-factory.js.map","import { testPromiseSupport } from '../helpers/test-promise-support';\nexport const createRenderNativeOfflineAudioContext = (cacheTestResult, createNativeGainNode, createNativeScriptProcessorNode, testOfflineAudioContextCurrentTimeSupport) => {\n    return (nativeOfflineAudioContext) => {\n        // Bug #21: Safari does not support promises yet.\n        if (cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeOfflineAudioContext))) {\n            // Bug #158: Edge does not advance currentTime if it is not accessed while rendering the audio.\n            return Promise\n                .resolve(cacheTestResult(testOfflineAudioContextCurrentTimeSupport, testOfflineAudioContextCurrentTimeSupport))\n                .then((isOfflineAudioContextCurrentTimeSupported) => {\n                if (!isOfflineAudioContextCurrentTimeSupported) {\n                    const scriptProcessorNode = createNativeScriptProcessorNode(nativeOfflineAudioContext, 512, 0, 1);\n                    nativeOfflineAudioContext.oncomplete = () => {\n                        scriptProcessorNode.onaudioprocess = null; // tslint:disable-line:deprecation\n                        scriptProcessorNode.disconnect();\n                    };\n                    scriptProcessorNode.onaudioprocess = () => nativeOfflineAudioContext.currentTime; // tslint:disable-line:deprecation\n                    scriptProcessorNode.connect(nativeOfflineAudioContext.destination);\n                }\n                return nativeOfflineAudioContext.startRendering();\n            });\n        }\n        return new Promise((resolve) => {\n            // Bug #48: Safari does not render an OfflineAudioContext without any connected node.\n            const gainNode = createNativeGainNode(nativeOfflineAudioContext, {\n                channelCount: 1,\n                channelCountMode: 'explicit',\n                channelInterpretation: 'discrete',\n                gain: 0\n            });\n            nativeOfflineAudioContext.oncomplete = (event) => {\n                gainNode.disconnect();\n                resolve(event.renderedBuffer);\n            };\n            gainNode.connect(nativeOfflineAudioContext.destination);\n            nativeOfflineAudioContext.startRendering();\n        });\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/render-native-offline-audio-context.js.map","export const createTestOfflineAudioContextCurrentTimeSupport = (createNativeGainNode, nativeOfflineAudioContextConstructor) => {\n    return () => {\n        if (nativeOfflineAudioContextConstructor === null) {\n            return Promise.resolve(false);\n        }\n        const nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n        // Bug #48: Safari does not render an OfflineAudioContext without any connected node.\n        const gainNode = createNativeGainNode(nativeOfflineAudioContext, {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete',\n            gain: 0\n        });\n        // Bug #21: Safari does not support promises yet.\n        return new Promise((resolve) => {\n            nativeOfflineAudioContext.oncomplete = () => {\n                gainNode.disconnect();\n                resolve(nativeOfflineAudioContext.currentTime !== 0);\n            };\n            nativeOfflineAudioContext.startRendering();\n        });\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/test-offline-audio-context-current-time-support.js.map","import { filterBuffer } from '../helpers/filter-buffer';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nconst filterFullBuffer = (renderedBuffer, nativeOfflineAudioContext, feedback, feedforward) => {\n    const feedbackLength = feedback.length;\n    const feedforwardLength = feedforward.length;\n    const minLength = Math.min(feedbackLength, feedforwardLength);\n    if (feedback[0] !== 1) {\n        for (let i = 0; i < feedbackLength; i += 1) {\n            feedforward[i] /= feedback[0];\n        }\n        for (let i = 1; i < feedforwardLength; i += 1) {\n            feedback[i] /= feedback[0];\n        }\n    }\n    const bufferLength = 32;\n    const xBuffer = new Float32Array(bufferLength);\n    const yBuffer = new Float32Array(bufferLength);\n    const filteredBuffer = nativeOfflineAudioContext.createBuffer(renderedBuffer.numberOfChannels, renderedBuffer.length, renderedBuffer.sampleRate);\n    const numberOfChannels = renderedBuffer.numberOfChannels;\n    for (let i = 0; i < numberOfChannels; i += 1) {\n        const input = renderedBuffer.getChannelData(i);\n        const output = filteredBuffer.getChannelData(i);\n        xBuffer.fill(0);\n        yBuffer.fill(0);\n        filterBuffer(feedback, feedbackLength, feedforward, feedforwardLength, minLength, xBuffer, yBuffer, 0, bufferLength, input, output);\n    }\n    return filteredBuffer;\n};\nexport const createIIRFilterNodeRendererFactory = (createNativeAudioBufferSourceNode, createNativeAudioNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderInputsOfAudioNode, renderNativeOfflineAudioContext) => {\n    return (feedback, feedforward) => {\n        const renderedNativeAudioNodes = new WeakMap();\n        let filteredBufferPromise = null;\n        const createAudioNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeIIRFilterNode = getNativeAudioNode(proxy);\n            let nativeAudioBufferSourceNode = null;\n            // If the initially used nativeIIRFilterNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeIIRFilterNodeIsOwnedByContext = isOwnedByContext(nativeIIRFilterNode, nativeOfflineAudioContext);\n            // Bug #9: Safari does not support IIRFilterNodes.\n            if (nativeOfflineAudioContext.createIIRFilter === undefined) {\n                nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext);\n            }\n            else if (!nativeIIRFilterNodeIsOwnedByContext) {\n                nativeIIRFilterNode = createNativeAudioNode(nativeOfflineAudioContext, (ntvCntxt) => {\n                    return ntvCntxt.createIIRFilter(feedforward, feedback);\n                });\n            }\n            renderedNativeAudioNodes.set(nativeOfflineAudioContext, (nativeAudioBufferSourceNode === null) ? nativeIIRFilterNode : nativeAudioBufferSourceNode);\n            if (nativeAudioBufferSourceNode !== null) {\n                if (filteredBufferPromise === null) {\n                    if (nativeOfflineAudioContextConstructor === null) {\n                        throw new Error('Missing the native OfflineAudioContext constructor.');\n                    }\n                    const partialOfflineAudioContext = new nativeOfflineAudioContextConstructor(\n                    // Bug #47: The AudioDestinationNode in Edge and Safari gets not initialized correctly.\n                    proxy.context.destination.channelCount, \n                    // Bug #17: Safari does not yet expose the length.\n                    proxy.context.length, nativeOfflineAudioContext.sampleRate);\n                    filteredBufferPromise = (async () => {\n                        await renderInputsOfAudioNode(proxy, partialOfflineAudioContext, partialOfflineAudioContext.destination, trace);\n                        const renderedBuffer = await renderNativeOfflineAudioContext(partialOfflineAudioContext);\n                        return filterFullBuffer(renderedBuffer, nativeOfflineAudioContext, feedback, feedforward);\n                    })();\n                }\n                const filteredBuffer = await filteredBufferPromise;\n                nativeAudioBufferSourceNode.buffer = filteredBuffer;\n                nativeAudioBufferSourceNode.start(0);\n                return nativeAudioBufferSourceNode;\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeIIRFilterNode, trace);\n            return nativeIIRFilterNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeAudioNode !== undefined) {\n                    return Promise.resolve(renderedNativeAudioNode);\n                }\n                return createAudioNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/iir-filter-node-renderer-factory.js.map","import { createInvalidAccessError } from '../factories/invalid-access-error';\nexport const wrapIIRFilterNodeGetFrequencyResponseMethod = (nativeIIRFilterNode) => {\n    nativeIIRFilterNode.getFrequencyResponse = ((getFrequencyResponse) => {\n        return (frequencyHz, magResponse, phaseResponse) => {\n            if ((frequencyHz.length !== magResponse.length) || (magResponse.length !== phaseResponse.length)) {\n                throw createInvalidAccessError();\n            }\n            return getFrequencyResponse.call(nativeIIRFilterNode, frequencyHz, magResponse, phaseResponse);\n        };\n    })(nativeIIRFilterNode.getFrequencyResponse);\n};\n//# sourceMappingURL=/build/es2018/helpers/wrap-iir-filter-node-get-frequency-response-method.js.map","import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeIIRFilterNodeFactory = (createNativeAudioNode, createNativeIIRFilterNodeFaker) => {\n    return (nativeContext, baseLatency, options) => {\n        // Bug #9: Safari does not support IIRFilterNodes.\n        if (nativeContext.createIIRFilter === undefined) {\n            return createNativeIIRFilterNodeFaker(nativeContext, baseLatency, options);\n        }\n        const nativeIIRFilterNode = createNativeAudioNode(nativeContext, (ntvCntxt) => {\n            return ntvCntxt.createIIRFilter(options.feedforward, options.feedback);\n        });\n        assignNativeAudioNodeOptions(nativeIIRFilterNode, options);\n        return nativeIIRFilterNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-iir-filter-node-factory.js.map","import { EventTarget } from '../event-target';\nimport { CONTEXT_STORE } from '../globals';\nimport { wrapEventListener } from '../helpers/wrap-event-listener';\nexport const createMinimalBaseAudioContextConstructor = (audioDestinationNodeConstructor, createAudioListener) => {\n    return class MinimalBaseAudioContext extends EventTarget {\n        constructor(_nativeContext, numberOfChannels) {\n            super(_nativeContext);\n            this._nativeContext = _nativeContext;\n            CONTEXT_STORE.set(this, _nativeContext);\n            // Bug #93: Edge will set the sampleRate of an AudioContext to zero when it is closed.\n            const sampleRate = _nativeContext.sampleRate;\n            Object.defineProperty(_nativeContext, 'sampleRate', {\n                get: () => sampleRate\n            });\n            this._destination = new audioDestinationNodeConstructor(this, numberOfChannels);\n            this._listener = createAudioListener(this, _nativeContext);\n            this._onstatechange = null;\n        }\n        get currentTime() {\n            return this._nativeContext.currentTime;\n        }\n        get destination() {\n            return this._destination;\n        }\n        get listener() {\n            return this._listener;\n        }\n        get onstatechange() {\n            return this._onstatechange;\n        }\n        set onstatechange(value) {\n            const wrappedListener = wrapEventListener(this, value);\n            this._nativeContext.onstatechange = wrappedListener;\n            const nativeOnStateChange = this._nativeContext.onstatechange;\n            this._onstatechange = (nativeOnStateChange === wrappedListener) ? value : nativeOnStateChange;\n        }\n        get sampleRate() {\n            return this._nativeContext.sampleRate;\n        }\n        get state() {\n            return this._nativeContext.state;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/minimal-base-audio-context-constructor.js.map","import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nexport const createAudioListenerFactory = (createAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeScriptProcessorNode, isNativeOfflineAudioContext) => {\n    return (context, nativeContext) => {\n        const nativeListener = nativeContext.listener;\n        // Bug #117: Only Chrome & Opera support the new interface already.\n        const createFakeAudioParams = () => {\n            const channelMergerNode = createNativeChannelMergerNode(nativeContext, { channelCount: 1, channelCountMode: 'explicit', channelInterpretation: 'speakers', numberOfInputs: 9 });\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, 256, 9, 0);\n            const createFakeAudioParam = (input, value) => {\n                const constantSourceNode = createNativeConstantSourceNode(nativeContext, { channelCount: 1, channelCountMode: 'explicit', channelInterpretation: 'discrete', offset: value });\n                constantSourceNode.connect(channelMergerNode, 0, input);\n                // @todo This should be stopped when the context is closed.\n                constantSourceNode.start();\n                Object.defineProperty(constantSourceNode.offset, 'defaultValue', {\n                    get() {\n                        return value;\n                    }\n                });\n                /*\n                 * Bug #62 & #74: Edge & Safari do not support ConstantSourceNodes and do not export the correct values for maxValue and\n                 * minValue for GainNodes.\n                 */\n                return createAudioParam({ context }, isOffline, constantSourceNode.offset, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            };\n            let lastOrientation = [0, 0, -1, 0, 1, 0];\n            let lastPosition = [0, 0, 0];\n            scriptProcessorNode.onaudioprocess = ({ inputBuffer }) => {\n                const orientation = [\n                    inputBuffer.getChannelData(0)[0],\n                    inputBuffer.getChannelData(1)[0],\n                    inputBuffer.getChannelData(2)[0],\n                    inputBuffer.getChannelData(3)[0],\n                    inputBuffer.getChannelData(4)[0],\n                    inputBuffer.getChannelData(5)[0]\n                ];\n                if (orientation.some((value, index) => (value !== lastOrientation[index]))) {\n                    nativeListener.setOrientation(...orientation); // tslint:disable-line:deprecation\n                    lastOrientation = orientation;\n                }\n                const positon = [\n                    inputBuffer.getChannelData(6)[0],\n                    inputBuffer.getChannelData(7)[0],\n                    inputBuffer.getChannelData(8)[0]\n                ];\n                if (positon.some((value, index) => (value !== lastPosition[index]))) {\n                    nativeListener.setPosition(...positon); // tslint:disable-line:deprecation\n                    lastPosition = positon;\n                }\n            };\n            channelMergerNode.connect(scriptProcessorNode);\n            return {\n                forwardX: createFakeAudioParam(0, 0),\n                forwardY: createFakeAudioParam(1, 0),\n                forwardZ: createFakeAudioParam(2, -1),\n                positionX: createFakeAudioParam(6, 0),\n                positionY: createFakeAudioParam(7, 0),\n                positionZ: createFakeAudioParam(8, 0),\n                upX: createFakeAudioParam(3, 0),\n                upY: createFakeAudioParam(4, 1),\n                upZ: createFakeAudioParam(5, 0)\n            };\n        };\n        const { forwardX, forwardY, forwardZ, positionX, positionY, positionZ, upX, upY, upZ } = (nativeListener.forwardX === undefined)\n            ? createFakeAudioParams()\n            : nativeListener;\n        return {\n            get forwardX() {\n                return forwardX;\n            },\n            get forwardY() {\n                return forwardY;\n            },\n            get forwardZ() {\n                return forwardZ;\n            },\n            get positionX() {\n                return positionX;\n            },\n            get positionY() {\n                return positionY;\n            },\n            get positionZ() {\n                return positionZ;\n            },\n            get upX() {\n                return upX;\n            },\n            get upY() {\n                return upY;\n            },\n            get upZ() {\n                return upZ;\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-listener-factory.js.map","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { wrapAudioScheduledSourceNodeStartMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters';\nimport { wrapAudioScheduledSourceNodeStopMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters';\nexport const createNativeOscillatorNodeFactory = (cacheTestResult, createNativeAudioNode, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls) => {\n    return (nativeContext, options) => {\n        const nativeOscillatorNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createOscillator());\n        assignNativeAudioNodeOptions(nativeOscillatorNode, options);\n        assignNativeAudioNodeAudioParamValue(nativeOscillatorNode, options, 'detune');\n        assignNativeAudioNodeAudioParamValue(nativeOscillatorNode, options, 'frequency');\n        if (options.periodicWave !== undefined) {\n            nativeOscillatorNode.setPeriodicWave(options.periodicWave);\n        }\n        else {\n            assignNativeAudioNodeOption(nativeOscillatorNode, options, 'type');\n        }\n        // Bug #44: Only Chrome & Opera throw a RangeError yet.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(nativeContext))) {\n            wrapAudioScheduledSourceNodeStartMethodNegativeParameters(nativeOscillatorNode);\n        }\n        // Bug #19: Safari does not ignore calls to stop() of an already stopped AudioBufferSourceNode.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, () => testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport(nativeContext))) {\n            wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls(nativeOscillatorNode, nativeContext);\n        }\n        // Bug #44: No browser does throw a RangeError yet.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(nativeContext))) {\n            wrapAudioScheduledSourceNodeStopMethodNegativeParameters(nativeOscillatorNode);\n        }\n        return nativeOscillatorNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-oscillator-node-factory.js.map","import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createOscillatorNodeRendererFactory = (connectAudioParam, createNativeOscillatorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeOscillatorNodes = new WeakMap();\n        let periodicWave = null;\n        let start = null;\n        let stop = null;\n        const createOscillatorNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeOscillatorNode = getNativeAudioNode(proxy);\n            // If the initially used nativeOscillatorNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeOscillatorNodeIsOwnedByContext = isOwnedByContext(nativeOscillatorNode, nativeOfflineAudioContext);\n            if (!nativeOscillatorNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeOscillatorNode.channelCount,\n                    channelCountMode: nativeOscillatorNode.channelCountMode,\n                    channelInterpretation: nativeOscillatorNode.channelInterpretation,\n                    detune: nativeOscillatorNode.detune.value,\n                    frequency: nativeOscillatorNode.frequency.value,\n                    periodicWave: (periodicWave === null) ? undefined : periodicWave,\n                    type: nativeOscillatorNode.type\n                };\n                nativeOscillatorNode = createNativeOscillatorNode(nativeOfflineAudioContext, options);\n                if (start !== null) {\n                    nativeOscillatorNode.start(start);\n                }\n                if (stop !== null) {\n                    nativeOscillatorNode.stop(stop);\n                }\n            }\n            renderedNativeOscillatorNodes.set(nativeOfflineAudioContext, nativeOscillatorNode);\n            if (!nativeOscillatorNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency, trace);\n            }\n            else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency, trace);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeOscillatorNode, trace);\n            return nativeOscillatorNode;\n        };\n        return {\n            set periodicWave(value) {\n                periodicWave = value;\n            },\n            set start(value) {\n                start = value;\n            },\n            set stop(value) {\n                stop = value;\n            },\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeOscillatorNode = renderedNativeOscillatorNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeOscillatorNode !== undefined) {\n                    return Promise.resolve(renderedNativeOscillatorNode);\n                }\n                return createOscillatorNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/oscillator-node-renderer-factory.js.map","export const createConnectedNativeAudioBufferSourceNodeFactory = (createNativeAudioBufferSourceNode) => {\n    return (nativeContext, nativeAudioNode) => {\n        const nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeContext);\n        const nativeAudioBuffer = nativeContext.createBuffer(1, 2, nativeContext.sampleRate);\n        nativeAudioBufferSourceNode.buffer = nativeAudioBuffer;\n        nativeAudioBufferSourceNode.loop = true;\n        nativeAudioBufferSourceNode.connect(nativeAudioNode);\n        nativeAudioBufferSourceNode.start();\n        return () => {\n            nativeAudioBufferSourceNode.stop();\n            nativeAudioBufferSourceNode.disconnect(nativeAudioNode);\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/connected-native-audio-buffer-source-node-factory.js.map","import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { interceptConnections } from '../helpers/intercept-connections';\nexport const createNativeWaveShaperNodeFakerFactory = (createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeAudioNode, createNativeGainNode, isDCCurve, monitorConnections) => {\n    return (nativeContext, { curve, oversample, ...audioNodeOptions }) => {\n        const negativeWaveShaperNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createWaveShaper());\n        const positiveWaveShaperNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createWaveShaper());\n        assignNativeAudioNodeOptions(negativeWaveShaperNode, audioNodeOptions);\n        assignNativeAudioNodeOptions(positiveWaveShaperNode, audioNodeOptions);\n        const inputGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, gain: 1 });\n        const invertGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, gain: -1 });\n        const outputGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, gain: 1 });\n        const revertGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, gain: -1 });\n        let disconnectNativeAudioBufferSourceNode = null;\n        let isConnected = false;\n        let unmodifiedCurve = null;\n        const nativeWaveShaperNodeFaker = {\n            get bufferSize() {\n                return undefined;\n            },\n            get channelCount() {\n                return negativeWaveShaperNode.channelCount;\n            },\n            set channelCount(value) {\n                inputGainNode.channelCount = value;\n                invertGainNode.channelCount = value;\n                negativeWaveShaperNode.channelCount = value;\n                outputGainNode.channelCount = value;\n                positiveWaveShaperNode.channelCount = value;\n                revertGainNode.channelCount = value;\n            },\n            get channelCountMode() {\n                return negativeWaveShaperNode.channelCountMode;\n            },\n            set channelCountMode(value) {\n                inputGainNode.channelCountMode = value;\n                invertGainNode.channelCountMode = value;\n                negativeWaveShaperNode.channelCountMode = value;\n                outputGainNode.channelCountMode = value;\n                positiveWaveShaperNode.channelCountMode = value;\n                revertGainNode.channelCountMode = value;\n            },\n            get channelInterpretation() {\n                return negativeWaveShaperNode.channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                inputGainNode.channelInterpretation = value;\n                invertGainNode.channelInterpretation = value;\n                negativeWaveShaperNode.channelInterpretation = value;\n                outputGainNode.channelInterpretation = value;\n                positiveWaveShaperNode.channelInterpretation = value;\n                revertGainNode.channelInterpretation = value;\n            },\n            get context() {\n                return negativeWaveShaperNode.context;\n            },\n            get curve() {\n                return unmodifiedCurve;\n            },\n            set curve(value) {\n                // Bug #102: Safari does not throw an InvalidStateError when the curve has less than two samples.\n                if (curve !== null && curve.length < 2) {\n                    throw createInvalidStateError();\n                }\n                if (value === null) {\n                    negativeWaveShaperNode.curve = value;\n                    positiveWaveShaperNode.curve = value;\n                }\n                else {\n                    const curveLength = value.length;\n                    const negativeCurve = new Float32Array(curveLength + 2 - (curveLength % 2));\n                    const positiveCurve = new Float32Array(curveLength + 2 - (curveLength % 2));\n                    negativeCurve[0] = value[0];\n                    positiveCurve[0] = -value[curveLength - 1];\n                    const length = Math.ceil((curveLength + 1) / 2);\n                    const centerIndex = ((curveLength + 1) / 2) - 1;\n                    for (let i = 1; i < length; i += 1) {\n                        const theoreticIndex = (i / length) * centerIndex;\n                        const lowerIndex = Math.floor(theoreticIndex);\n                        const upperIndex = Math.ceil(theoreticIndex);\n                        negativeCurve[i] = (lowerIndex === upperIndex)\n                            ? value[lowerIndex]\n                            : ((1 - (theoreticIndex - lowerIndex)) * value[lowerIndex])\n                                + ((1 - (upperIndex - theoreticIndex)) * value[upperIndex]);\n                        positiveCurve[i] = (lowerIndex === upperIndex)\n                            ? -value[curveLength - 1 - lowerIndex]\n                            : -((1 - (theoreticIndex - lowerIndex)) * value[curveLength - 1 - lowerIndex])\n                                - ((1 - (upperIndex - theoreticIndex)) * value[curveLength - 1 - upperIndex]);\n                    }\n                    negativeCurve[length] = (curveLength % 2 === 1) ? value[length - 1] : (value[length - 2] + value[length - 1]) / 2;\n                    negativeWaveShaperNode.curve = negativeCurve;\n                    positiveWaveShaperNode.curve = positiveCurve;\n                }\n                unmodifiedCurve = value;\n                if (isConnected) {\n                    if (isDCCurve(unmodifiedCurve) && disconnectNativeAudioBufferSourceNode === null) {\n                        disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, inputGainNode);\n                    }\n                    else if (disconnectNativeAudioBufferSourceNode !== null) {\n                        disconnectNativeAudioBufferSourceNode();\n                        disconnectNativeAudioBufferSourceNode = null;\n                    }\n                }\n            },\n            get inputs() {\n                return [inputGainNode];\n            },\n            get numberOfInputs() {\n                return negativeWaveShaperNode.numberOfInputs;\n            },\n            get numberOfOutputs() {\n                return negativeWaveShaperNode.numberOfOutputs;\n            },\n            get oversample() {\n                return negativeWaveShaperNode.oversample;\n            },\n            set oversample(value) {\n                negativeWaveShaperNode.oversample = value;\n                positiveWaveShaperNode.oversample = value;\n            },\n            addEventListener(...args) {\n                return inputGainNode.addEventListener(args[0], args[1], args[2]);\n            },\n            dispatchEvent(...args) {\n                return inputGainNode.dispatchEvent(args[0]);\n            },\n            removeEventListener(...args) {\n                return inputGainNode.removeEventListener(args[0], args[1], args[2]);\n            }\n        };\n        if (curve !== nativeWaveShaperNodeFaker.curve) {\n            nativeWaveShaperNodeFaker.curve = curve;\n        }\n        if (oversample !== nativeWaveShaperNodeFaker.oversample) {\n            nativeWaveShaperNodeFaker.oversample = oversample;\n        }\n        const whenConnected = () => {\n            inputGainNode\n                .connect(negativeWaveShaperNode)\n                .connect(outputGainNode);\n            inputGainNode\n                .connect(invertGainNode)\n                .connect(positiveWaveShaperNode)\n                .connect(revertGainNode)\n                .connect(outputGainNode);\n            isConnected = true;\n            if (isDCCurve(unmodifiedCurve)) {\n                disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, inputGainNode);\n            }\n        };\n        const whenDisconnected = () => {\n            inputGainNode.disconnect(negativeWaveShaperNode);\n            negativeWaveShaperNode.disconnect(outputGainNode);\n            inputGainNode.disconnect(invertGainNode);\n            invertGainNode.disconnect(positiveWaveShaperNode);\n            positiveWaveShaperNode.disconnect(revertGainNode);\n            revertGainNode.disconnect(outputGainNode);\n            isConnected = false;\n            if (disconnectNativeAudioBufferSourceNode !== null) {\n                disconnectNativeAudioBufferSourceNode();\n                disconnectNativeAudioBufferSourceNode = null;\n            }\n        };\n        return monitorConnections(interceptConnections(nativeWaveShaperNodeFaker, outputGainNode), whenConnected, whenDisconnected);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-wave-shaper-node-faker-factory.js.map","import { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeWaveShaperNodeFactory = (createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeAudioNode, createNativeWaveShaperNodeFaker, isDCCurve, monitorConnections, overwriteAccessors) => {\n    return (nativeContext, options) => {\n        const nativeWaveShaperNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createWaveShaper());\n        try {\n            // Bug #102: Safari does not throw an InvalidStateError when the curve has less than two samples.\n            // Bug #119: Safari does not correctly map the values. Bug #102 is only used to detect Safari in this case.\n            nativeWaveShaperNode.curve = new Float32Array([1]);\n            return createNativeWaveShaperNodeFaker(nativeContext, options);\n        }\n        catch ( /* Ignore errors. */_a) { /* Ignore errors. */ }\n        assignNativeAudioNodeOptions(nativeWaveShaperNode, options);\n        const curve = options.curve;\n        // Bug #104: Chrome will throw an InvalidAccessError when the curve has less than two samples.\n        if (curve !== null && curve.length < 2) {\n            throw createInvalidStateError();\n        }\n        assignNativeAudioNodeOption(nativeWaveShaperNode, options, 'curve');\n        assignNativeAudioNodeOption(nativeWaveShaperNode, options, 'oversample');\n        let disconnectNativeAudioBufferSourceNode = null;\n        let isConnected = false;\n        overwriteAccessors(nativeWaveShaperNode, 'curve', (get) => () => get.call(nativeWaveShaperNode), (set) => (value) => {\n            set.call(nativeWaveShaperNode, value);\n            if (isConnected) {\n                if (isDCCurve(value) && disconnectNativeAudioBufferSourceNode === null) {\n                    disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, nativeWaveShaperNode);\n                }\n                else if (!isDCCurve(value) && disconnectNativeAudioBufferSourceNode !== null) {\n                    disconnectNativeAudioBufferSourceNode();\n                    disconnectNativeAudioBufferSourceNode = null;\n                }\n            }\n            return value;\n        });\n        const whenConnected = () => {\n            isConnected = true;\n            if (isDCCurve(nativeWaveShaperNode.curve)) {\n                disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, nativeWaveShaperNode);\n            }\n        };\n        const whenDisconnected = () => {\n            isConnected = false;\n            if (disconnectNativeAudioBufferSourceNode !== null) {\n                disconnectNativeAudioBufferSourceNode();\n                disconnectNativeAudioBufferSourceNode = null;\n            }\n        };\n        return monitorConnections(nativeWaveShaperNode, whenConnected, whenDisconnected);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-wave-shaper-node-factory.js.map","import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { interceptConnections } from '../helpers/intercept-connections';\nexport const createNativePannerNodeFakerFactory = (connectNativeAudioNodeToNativeAudioNode, createInvalidStateError, createNativeAudioNode, createNativeChannelMergerNode, createNativeGainNode, createNativeScriptProcessorNode, createNativeWaveShaperNode, createNotSupportedError, disconnectNativeAudioNodeFromNativeAudioNode, monitorConnections) => {\n    return (nativeContext, { coneInnerAngle, coneOuterAngle, coneOuterGain, distanceModel, maxDistance, orientationX, orientationY, orientationZ, panningModel, positionX, positionY, positionZ, refDistance, rolloffFactor, ...audioNodeOptions }) => {\n        const pannerNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createPanner());\n        // Bug #125: Safari does not throw an error yet.\n        if (audioNodeOptions.channelCount > 2) {\n            throw createNotSupportedError();\n        }\n        // Bug #126: Safari does not throw an error yet.\n        if (audioNodeOptions.channelCountMode === 'max') {\n            throw createNotSupportedError();\n        }\n        assignNativeAudioNodeOptions(pannerNode, audioNodeOptions);\n        const SINGLE_CHANNEL_OPTIONS = {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete'\n        };\n        const channelMergerNode = createNativeChannelMergerNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, channelInterpretation: 'speakers', numberOfInputs: 6 });\n        const inputGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, gain: 1 });\n        const orientationXGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 1 });\n        const orientationYGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        const orientationZGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        const positionXGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        const positionYGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        const positionZGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, 256, 6, 0);\n        const waveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, curve: new Float32Array([1, 1]), oversample: 'none' });\n        let lastOrientation = [1, 0, 0];\n        let lastPosition = [0, 0, 0];\n        scriptProcessorNode.onaudioprocess = ({ inputBuffer }) => {\n            const orientation = [\n                inputBuffer.getChannelData(0)[0],\n                inputBuffer.getChannelData(1)[0],\n                inputBuffer.getChannelData(2)[0]\n            ];\n            if (orientation.some((value, index) => (value !== lastOrientation[index]))) {\n                pannerNode.setOrientation(...orientation); // tslint:disable-line:deprecation\n                lastOrientation = orientation;\n            }\n            const positon = [\n                inputBuffer.getChannelData(6)[0],\n                inputBuffer.getChannelData(7)[0],\n                inputBuffer.getChannelData(8)[0]\n            ];\n            if (positon.some((value, index) => (value !== lastPosition[index]))) {\n                pannerNode.setPosition(...positon); // tslint:disable-line:deprecation\n                lastPosition = positon;\n            }\n        };\n        Object.defineProperty(orientationYGainNode.gain, 'defaultValue', { get: () => 0 });\n        Object.defineProperty(orientationZGainNode.gain, 'defaultValue', { get: () => 0 });\n        Object.defineProperty(positionXGainNode.gain, 'defaultValue', { get: () => 0 });\n        Object.defineProperty(positionYGainNode.gain, 'defaultValue', { get: () => 0 });\n        Object.defineProperty(positionZGainNode.gain, 'defaultValue', { get: () => 0 });\n        const nativePannerNodeFaker = {\n            get bufferSize() {\n                return undefined;\n            },\n            get channelCount() {\n                return pannerNode.channelCount;\n            },\n            set channelCount(value) {\n                // Bug #125: Safari does not throw an error yet.\n                if (value > 2) {\n                    throw createNotSupportedError();\n                }\n                inputGainNode.channelCount = value;\n                pannerNode.channelCount = value;\n            },\n            get channelCountMode() {\n                return pannerNode.channelCountMode;\n            },\n            set channelCountMode(value) {\n                // Bug #126: Safari does not throw an error yet.\n                if (value === 'max') {\n                    throw createNotSupportedError();\n                }\n                inputGainNode.channelCountMode = value;\n                pannerNode.channelCountMode = value;\n            },\n            get channelInterpretation() {\n                return pannerNode.channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                inputGainNode.channelInterpretation = value;\n                pannerNode.channelInterpretation = value;\n            },\n            get coneInnerAngle() {\n                return pannerNode.coneInnerAngle;\n            },\n            set coneInnerAngle(value) {\n                pannerNode.coneInnerAngle = value;\n            },\n            get coneOuterAngle() {\n                return pannerNode.coneOuterAngle;\n            },\n            set coneOuterAngle(value) {\n                pannerNode.coneOuterAngle = value;\n            },\n            get coneOuterGain() {\n                return pannerNode.coneOuterGain;\n            },\n            set coneOuterGain(value) {\n                // Bug #127: Edge & Safari do not throw an InvalidStateError yet.\n                if (value < 0 || value > 1) {\n                    throw createInvalidStateError();\n                }\n                pannerNode.coneOuterGain = value;\n            },\n            get context() {\n                return pannerNode.context;\n            },\n            get distanceModel() {\n                return pannerNode.distanceModel;\n            },\n            set distanceModel(value) {\n                pannerNode.distanceModel = value;\n            },\n            get inputs() {\n                return [inputGainNode];\n            },\n            get maxDistance() {\n                return pannerNode.maxDistance;\n            },\n            set maxDistance(value) {\n                // Bug #128: Edge & Safari do not throw an error yet.\n                if (value < 0) {\n                    throw new RangeError();\n                }\n                pannerNode.maxDistance = value;\n            },\n            get numberOfInputs() {\n                return pannerNode.numberOfInputs;\n            },\n            get numberOfOutputs() {\n                return pannerNode.numberOfOutputs;\n            },\n            get orientationX() {\n                return orientationXGainNode.gain;\n            },\n            get orientationY() {\n                return orientationYGainNode.gain;\n            },\n            get orientationZ() {\n                return orientationZGainNode.gain;\n            },\n            get panningModel() {\n                return pannerNode.panningModel;\n            },\n            set panningModel(value) {\n                pannerNode.panningModel = value;\n                // Bug #123: Edge does not support HRTF as panningModel.\n                if (pannerNode.panningModel !== value && value === 'HRTF') {\n                    throw createNotSupportedError();\n                }\n            },\n            get positionX() {\n                return positionXGainNode.gain;\n            },\n            get positionY() {\n                return positionYGainNode.gain;\n            },\n            get positionZ() {\n                return positionZGainNode.gain;\n            },\n            get refDistance() {\n                return pannerNode.refDistance;\n            },\n            set refDistance(value) {\n                // Bug #129: Edge & Safari do not throw an error yet.\n                if (value < 0) {\n                    throw new RangeError();\n                }\n                pannerNode.refDistance = value;\n            },\n            get rolloffFactor() {\n                return pannerNode.rolloffFactor;\n            },\n            set rolloffFactor(value) {\n                // Bug #130: Edge & Safari do not throw an error yet.\n                if (value < 0) {\n                    throw new RangeError();\n                }\n                pannerNode.rolloffFactor = value;\n            },\n            addEventListener(...args) {\n                return inputGainNode.addEventListener(args[0], args[1], args[2]);\n            },\n            dispatchEvent(...args) {\n                return inputGainNode.dispatchEvent(args[0]);\n            },\n            removeEventListener(...args) {\n                return inputGainNode.removeEventListener(args[0], args[1], args[2]);\n            }\n        };\n        if (coneInnerAngle !== nativePannerNodeFaker.coneInnerAngle) {\n            nativePannerNodeFaker.coneInnerAngle = coneInnerAngle;\n        }\n        if (coneOuterAngle !== nativePannerNodeFaker.coneOuterAngle) {\n            nativePannerNodeFaker.coneOuterAngle = coneOuterAngle;\n        }\n        if (coneOuterGain !== nativePannerNodeFaker.coneOuterGain) {\n            nativePannerNodeFaker.coneOuterGain = coneOuterGain;\n        }\n        if (distanceModel !== nativePannerNodeFaker.distanceModel) {\n            nativePannerNodeFaker.distanceModel = distanceModel;\n        }\n        if (maxDistance !== nativePannerNodeFaker.maxDistance) {\n            nativePannerNodeFaker.maxDistance = maxDistance;\n        }\n        if (orientationX !== nativePannerNodeFaker.orientationX.value) {\n            nativePannerNodeFaker.orientationX.value = orientationX;\n        }\n        if (orientationY !== nativePannerNodeFaker.orientationY.value) {\n            nativePannerNodeFaker.orientationY.value = orientationY;\n        }\n        if (orientationZ !== nativePannerNodeFaker.orientationZ.value) {\n            nativePannerNodeFaker.orientationZ.value = orientationZ;\n        }\n        if (panningModel !== nativePannerNodeFaker.panningModel) {\n            nativePannerNodeFaker.panningModel = panningModel;\n        }\n        if (positionX !== nativePannerNodeFaker.positionX.value) {\n            nativePannerNodeFaker.positionX.value = positionX;\n        }\n        if (positionY !== nativePannerNodeFaker.positionY.value) {\n            nativePannerNodeFaker.positionY.value = positionY;\n        }\n        if (positionZ !== nativePannerNodeFaker.positionZ.value) {\n            nativePannerNodeFaker.positionZ.value = positionZ;\n        }\n        if (refDistance !== nativePannerNodeFaker.refDistance) {\n            nativePannerNodeFaker.refDistance = refDistance;\n        }\n        if (rolloffFactor !== nativePannerNodeFaker.rolloffFactor) {\n            nativePannerNodeFaker.rolloffFactor = rolloffFactor;\n        }\n        const whenConnected = () => {\n            inputGainNode.connect(pannerNode);\n            // Bug #119: Safari does not fully support the WaveShaperNode.\n            connectNativeAudioNodeToNativeAudioNode(inputGainNode, waveShaperNode, 0, 0);\n            waveShaperNode\n                .connect(orientationXGainNode)\n                .connect(channelMergerNode);\n            waveShaperNode\n                .connect(orientationYGainNode)\n                .connect(channelMergerNode);\n            waveShaperNode\n                .connect(orientationZGainNode)\n                .connect(channelMergerNode);\n            waveShaperNode\n                .connect(positionXGainNode)\n                .connect(channelMergerNode);\n            waveShaperNode\n                .connect(positionYGainNode)\n                .connect(channelMergerNode);\n            waveShaperNode\n                .connect(positionZGainNode)\n                .connect(channelMergerNode);\n            channelMergerNode.connect(scriptProcessorNode);\n        };\n        const whenDisconnected = () => {\n            inputGainNode.disconnect(pannerNode);\n            // Bug #119: Safari does not fully support the WaveShaperNode.\n            disconnectNativeAudioNodeFromNativeAudioNode(inputGainNode, waveShaperNode, 0, 0);\n            waveShaperNode.disconnect(orientationXGainNode);\n            orientationXGainNode.disconnect(channelMergerNode);\n            waveShaperNode.disconnect(orientationYGainNode);\n            orientationYGainNode.disconnect(channelMergerNode);\n            waveShaperNode.disconnect(orientationZGainNode);\n            orientationZGainNode.disconnect(channelMergerNode);\n            waveShaperNode.disconnect(positionXGainNode);\n            positionXGainNode.disconnect(channelMergerNode);\n            waveShaperNode.disconnect(positionYGainNode);\n            positionYGainNode.disconnect(channelMergerNode);\n            waveShaperNode.disconnect(positionZGainNode);\n            positionZGainNode.disconnect(channelMergerNode);\n            channelMergerNode.disconnect(scriptProcessorNode);\n        };\n        return monitorConnections(interceptConnections(nativePannerNodeFaker, pannerNode), whenConnected, whenDisconnected);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-panner-node-faker-factory.js.map","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativePannerNodeFactory = (createNativeAudioNode, createNativePannerNodeFaker) => {\n    return (nativeContext, options) => {\n        const nativePannerNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createPanner());\n        // Bug #124: Edge & Safari do not support modifying the orientation and the position with AudioParams.\n        if (nativePannerNode.orientationX === undefined) {\n            return createNativePannerNodeFaker(nativeContext, options);\n        }\n        assignNativeAudioNodeOptions(nativePannerNode, options);\n        assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'orientationX');\n        assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'orientationY');\n        assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'orientationZ');\n        assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'positionX');\n        assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'positionY');\n        assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'positionZ');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'coneInnerAngle');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'coneOuterAngle');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'coneOuterGain');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'distanceModel');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'maxDistance');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'panningModel');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'refDistance');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'rolloffFactor');\n        return nativePannerNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-panner-node-factory.js.map","import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createPannerNodeRendererFactory = (connectAudioParam, createNativePannerNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativePannerNodes = new WeakMap();\n        const createPannerNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativePannerNode = getNativeAudioNode(proxy);\n            // If the initially used nativePannerNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativePannerNodeIsOwnedByContext = isOwnedByContext(nativePannerNode, nativeOfflineAudioContext);\n            if (!nativePannerNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativePannerNode.channelCount,\n                    channelCountMode: nativePannerNode.channelCountMode,\n                    channelInterpretation: nativePannerNode.channelInterpretation,\n                    coneInnerAngle: nativePannerNode.coneInnerAngle,\n                    coneOuterAngle: nativePannerNode.coneOuterAngle,\n                    coneOuterGain: nativePannerNode.coneOuterGain,\n                    distanceModel: nativePannerNode.distanceModel,\n                    maxDistance: nativePannerNode.maxDistance,\n                    orientationX: nativePannerNode.orientationX.value,\n                    orientationY: nativePannerNode.orientationY.value,\n                    orientationZ: nativePannerNode.orientationZ.value,\n                    panningModel: nativePannerNode.panningModel,\n                    positionX: nativePannerNode.positionX.value,\n                    positionY: nativePannerNode.positionY.value,\n                    positionZ: nativePannerNode.positionZ.value,\n                    refDistance: nativePannerNode.refDistance,\n                    rolloffFactor: nativePannerNode.rolloffFactor\n                };\n                nativePannerNode = createNativePannerNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativePannerNodes.set(nativeOfflineAudioContext, nativePannerNode);\n            if (!nativePannerNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.orientationX, nativePannerNode.orientationX, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.orientationY, nativePannerNode.orientationY, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.orientationZ, nativePannerNode.orientationZ, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.positionX, nativePannerNode.positionX, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.positionY, nativePannerNode.positionY, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.positionZ, nativePannerNode.positionZ, trace);\n            }\n            else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.orientationX, nativePannerNode.orientationX, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.orientationY, nativePannerNode.orientationY, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.orientationZ, nativePannerNode.orientationZ, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.positionX, nativePannerNode.positionX, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.positionY, nativePannerNode.positionY, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.positionZ, nativePannerNode.positionZ, trace);\n            }\n            if (isNativeAudioNodeFaker(nativePannerNode)) {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativePannerNode.inputs[0], trace);\n            }\n            else {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativePannerNode, trace);\n            }\n            return nativePannerNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativePannerNode = renderedNativePannerNodes.get(nativeOfflineAudioContext);\n                if (renderedNativePannerNode !== undefined) {\n                    return Promise.resolve(renderedNativePannerNode);\n                }\n                return createPannerNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/panner-node-renderer-factory.js.map","export const createNativePeriodicWaveFactory = (getBackupNativeContext) => {\n    return (nativeContext, { disableNormalization, imag, real }) => {\n        // Bug #50: Only Edge does currently not allow to create AudioNodes (and other objects) on a closed context yet.\n        const backupNativeContext = getBackupNativeContext(nativeContext);\n        // @todo Edge, Firefox & Safari do only accept Float32Arrays.\n        const wrappedImag = new Float32Array(imag);\n        const wrappedReal = new Float32Array(real);\n        if (backupNativeContext !== null) {\n            return backupNativeContext.createPeriodicWave(wrappedReal, wrappedImag, { disableNormalization });\n        }\n        return nativeContext.createPeriodicWave(wrappedReal, wrappedImag, { disableNormalization });\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-periodic-wave-factory.js.map","import { interceptConnections } from '../helpers/intercept-connections';\nexport const createNativeStereoPannerNodeFakerFactory = (createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeGainNode, createNativeWaveShaperNode, createNotSupportedError, monitorConnections) => {\n    // The curve has a size of 14bit plus 1 value to have an exact representation for zero. This value has been determined experimentally.\n    const CURVE_SIZE = 16385;\n    const DC_CURVE = new Float32Array([1, 1]);\n    const HALF_PI = Math.PI / 2;\n    const SINGLE_CHANNEL_OPTIONS = { channelCount: 1, channelCountMode: 'explicit', channelInterpretation: 'discrete' };\n    const SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS = { ...SINGLE_CHANNEL_OPTIONS, oversample: 'none' };\n    const buildInternalGraphForMono = (nativeContext, inputGainNode, panGainNode, channelMergerNode) => {\n        const leftWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        const rightWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        for (let i = 0; i < CURVE_SIZE; i += 1) {\n            const x = (i / (CURVE_SIZE - 1)) * HALF_PI;\n            leftWaveShaperCurve[i] = Math.cos(x);\n            rightWaveShaperCurve[i] = Math.sin(x);\n        }\n        const leftGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const leftWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: leftWaveShaperCurve });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const panWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: DC_CURVE });\n        const rightGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const rightWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: rightWaveShaperCurve });\n        return {\n            connectGraph() {\n                inputGainNode.connect(leftGainNode);\n                inputGainNode.connect(panWaveShaperNode.inputs[0]);\n                inputGainNode.connect(rightGainNode);\n                panWaveShaperNode.connect(panGainNode);\n                panGainNode.connect(leftWaveShaperNode.inputs[0]);\n                panGainNode.connect(rightWaveShaperNode.inputs[0]);\n                leftWaveShaperNode.connect(leftGainNode.gain);\n                rightWaveShaperNode.connect(rightGainNode.gain);\n                leftGainNode.connect(channelMergerNode, 0, 0);\n                rightGainNode.connect(channelMergerNode, 0, 1);\n            },\n            disconnectGraph() {\n                inputGainNode.disconnect(leftGainNode);\n                inputGainNode.disconnect(panWaveShaperNode.inputs[0]);\n                inputGainNode.disconnect(rightGainNode);\n                panWaveShaperNode.disconnect(panGainNode);\n                panGainNode.disconnect(leftWaveShaperNode.inputs[0]);\n                panGainNode.disconnect(rightWaveShaperNode.inputs[0]);\n                leftWaveShaperNode.disconnect(leftGainNode.gain);\n                rightWaveShaperNode.disconnect(rightGainNode.gain);\n                leftGainNode.disconnect(channelMergerNode, 0, 0);\n                rightGainNode.disconnect(channelMergerNode, 0, 1);\n            }\n        };\n    };\n    const buildInternalGraphForStereo = (nativeContext, inputGainNode, panGainNode, channelMergerNode) => {\n        const leftInputForLeftOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        const leftInputForRightOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        const rightInputForLeftOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        const rightInputForRightOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        const centerIndex = Math.floor(CURVE_SIZE / 2);\n        for (let i = 0; i < CURVE_SIZE; i += 1) {\n            if (i > centerIndex) {\n                const x = ((i - centerIndex) / (CURVE_SIZE - 1 - centerIndex)) * HALF_PI;\n                leftInputForLeftOutputWaveShaperCurve[i] = Math.cos(x);\n                leftInputForRightOutputWaveShaperCurve[i] = Math.sin(x);\n                rightInputForLeftOutputWaveShaperCurve[i] = 0;\n                rightInputForRightOutputWaveShaperCurve[i] = 1;\n            }\n            else {\n                const x = (i / (CURVE_SIZE - 1 - centerIndex)) * HALF_PI;\n                leftInputForLeftOutputWaveShaperCurve[i] = 1;\n                leftInputForRightOutputWaveShaperCurve[i] = 0;\n                rightInputForLeftOutputWaveShaperCurve[i] = Math.cos(x);\n                rightInputForRightOutputWaveShaperCurve[i] = Math.sin(x);\n            }\n        }\n        const channelSplitterNode = createNativeChannelSplitterNode(nativeContext, {\n            channelCount: 2,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete',\n            numberOfOutputs: 2\n        });\n        const leftInputForLeftOutputGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const leftInputForLeftOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: leftInputForLeftOutputWaveShaperCurve });\n        const leftInputForRightOutputGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const leftInputForRightOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: leftInputForRightOutputWaveShaperCurve });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const panWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: DC_CURVE });\n        const rightInputForLeftOutputGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const rightInputForLeftOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: rightInputForLeftOutputWaveShaperCurve });\n        const rightInputForRightOutputGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const rightInputForRightOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: rightInputForRightOutputWaveShaperCurve });\n        return {\n            connectGraph() {\n                inputGainNode.connect(channelSplitterNode);\n                inputGainNode.connect(panWaveShaperNode.inputs[0]);\n                channelSplitterNode.connect(leftInputForLeftOutputGainNode, 1);\n                channelSplitterNode.connect(leftInputForRightOutputGainNode, 1);\n                channelSplitterNode.connect(rightInputForLeftOutputGainNode, 1);\n                channelSplitterNode.connect(rightInputForRightOutputGainNode, 1);\n                panWaveShaperNode.connect(panGainNode);\n                panGainNode.connect(leftInputForLeftOutputWaveShaperNode.inputs[0]);\n                panGainNode.connect(leftInputForRightOutputWaveShaperNode.inputs[0]);\n                panGainNode.connect(rightInputForLeftOutputWaveShaperNode.inputs[0]);\n                panGainNode.connect(rightInputForRightOutputWaveShaperNode.inputs[0]);\n                leftInputForLeftOutputWaveShaperNode.connect(leftInputForLeftOutputGainNode.gain);\n                leftInputForRightOutputWaveShaperNode.connect(leftInputForRightOutputGainNode.gain);\n                rightInputForLeftOutputWaveShaperNode.connect(rightInputForLeftOutputGainNode.gain);\n                rightInputForRightOutputWaveShaperNode.connect(rightInputForRightOutputGainNode.gain);\n                leftInputForLeftOutputGainNode.connect(channelMergerNode, 0, 0);\n                rightInputForLeftOutputGainNode.connect(channelMergerNode, 0, 0);\n                leftInputForRightOutputGainNode.connect(channelMergerNode, 0, 1);\n                rightInputForRightOutputGainNode.connect(channelMergerNode, 0, 1);\n            },\n            disconnectGraph() {\n                inputGainNode.disconnect(channelSplitterNode);\n                inputGainNode.disconnect(panWaveShaperNode.inputs[0]);\n                channelSplitterNode.disconnect(leftInputForLeftOutputGainNode, 1);\n                channelSplitterNode.disconnect(leftInputForRightOutputGainNode, 1);\n                channelSplitterNode.disconnect(rightInputForLeftOutputGainNode, 1);\n                channelSplitterNode.disconnect(rightInputForRightOutputGainNode, 1);\n                panWaveShaperNode.disconnect(panGainNode);\n                panGainNode.disconnect(leftInputForLeftOutputWaveShaperNode.inputs[0]);\n                panGainNode.disconnect(leftInputForRightOutputWaveShaperNode.inputs[0]);\n                panGainNode.disconnect(rightInputForLeftOutputWaveShaperNode.inputs[0]);\n                panGainNode.disconnect(rightInputForRightOutputWaveShaperNode.inputs[0]);\n                leftInputForLeftOutputWaveShaperNode.disconnect(leftInputForLeftOutputGainNode.gain);\n                leftInputForRightOutputWaveShaperNode.disconnect(leftInputForRightOutputGainNode.gain);\n                rightInputForLeftOutputWaveShaperNode.disconnect(rightInputForLeftOutputGainNode.gain);\n                rightInputForRightOutputWaveShaperNode.disconnect(rightInputForRightOutputGainNode.gain);\n                leftInputForLeftOutputGainNode.disconnect(channelMergerNode, 0, 0);\n                rightInputForLeftOutputGainNode.disconnect(channelMergerNode, 0, 0);\n                leftInputForRightOutputGainNode.disconnect(channelMergerNode, 0, 1);\n                rightInputForRightOutputGainNode.disconnect(channelMergerNode, 0, 1);\n            }\n        };\n    };\n    const buildInternalGraph = (nativeContext, channelCount, inputGainNode, panGainNode, channelMergerNode) => {\n        if (channelCount === 1) {\n            return buildInternalGraphForMono(nativeContext, inputGainNode, panGainNode, channelMergerNode);\n        }\n        if (channelCount === 2) {\n            return buildInternalGraphForStereo(nativeContext, inputGainNode, panGainNode, channelMergerNode);\n        }\n        throw createNotSupportedError();\n    };\n    return (nativeContext, { channelCount, channelCountMode, pan, ...audioNodeOptions }) => {\n        if (channelCountMode === 'max') {\n            throw createNotSupportedError();\n        }\n        const channelMergerNode = createNativeChannelMergerNode(nativeContext, {\n            ...audioNodeOptions,\n            channelCount: 1,\n            channelCountMode,\n            numberOfInputs: 2\n        });\n        const inputGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, channelCount, channelCountMode, gain: 1 });\n        const panGainNode = createNativeGainNode(nativeContext, {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete',\n            gain: pan\n        });\n        let { connectGraph, disconnectGraph } = buildInternalGraph(nativeContext, channelCount, inputGainNode, panGainNode, channelMergerNode);\n        Object.defineProperty(panGainNode.gain, 'defaultValue', { get: () => 0 });\n        const nativeStereoPannerNodeFakerFactory = {\n            get bufferSize() {\n                return undefined;\n            },\n            get channelCount() {\n                return inputGainNode.channelCount;\n            },\n            set channelCount(value) {\n                if (inputGainNode.channelCount !== value) {\n                    if (isConnected) {\n                        disconnectGraph();\n                    }\n                    ({ connectGraph, disconnectGraph } = buildInternalGraph(nativeContext, value, inputGainNode, panGainNode, channelMergerNode));\n                    if (isConnected) {\n                        connectGraph();\n                    }\n                }\n                inputGainNode.channelCount = value;\n            },\n            get channelCountMode() {\n                return inputGainNode.channelCountMode;\n            },\n            set channelCountMode(value) {\n                if (value === 'clamped-max' || value === 'max') {\n                    throw createNotSupportedError();\n                }\n                inputGainNode.channelCountMode = value;\n            },\n            get channelInterpretation() {\n                return inputGainNode.channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                inputGainNode.channelInterpretation = value;\n            },\n            get context() {\n                return inputGainNode.context;\n            },\n            get inputs() {\n                return [inputGainNode];\n            },\n            get numberOfInputs() {\n                return inputGainNode.numberOfInputs;\n            },\n            get numberOfOutputs() {\n                return inputGainNode.numberOfOutputs;\n            },\n            get pan() {\n                return panGainNode.gain;\n            },\n            addEventListener(...args) {\n                return inputGainNode.addEventListener(args[0], args[1], args[2]);\n            },\n            dispatchEvent(...args) {\n                return inputGainNode.dispatchEvent(args[0]);\n            },\n            removeEventListener(...args) {\n                return inputGainNode.removeEventListener(args[0], args[1], args[2]);\n            }\n        };\n        let isConnected = false;\n        const whenConnected = () => {\n            connectGraph();\n            isConnected = true;\n        };\n        const whenDisconnected = () => {\n            disconnectGraph();\n            isConnected = false;\n        };\n        return monitorConnections(interceptConnections(nativeStereoPannerNodeFakerFactory, channelMergerNode), whenConnected, whenDisconnected);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-stereo-panner-node-faker-factory.js.map","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeStereoPannerNodeFactory = (createNativeAudioNode, createNativeStereoPannerNodeFaker, createNotSupportedError) => {\n    return (nativeContext, options) => createNativeAudioNode(nativeContext, (ntvCntxt) => {\n        const channelCountMode = options.channelCountMode;\n        /*\n         * Bug #105: The channelCountMode of 'clamped-max' should be supported. However it is not possible to write a polyfill for Safari\n         * which supports it and therefore it can't be supported at all.\n         */\n        if (channelCountMode === 'clamped-max') {\n            throw createNotSupportedError();\n        }\n        // Bug #105: Safari does not support the StereoPannerNode.\n        if (nativeContext.createStereoPanner === undefined) {\n            return createNativeStereoPannerNodeFaker(nativeContext, options);\n        }\n        const nativeStereoPannerNode = ntvCntxt.createStereoPanner();\n        assignNativeAudioNodeOptions(nativeStereoPannerNode, options);\n        assignNativeAudioNodeAudioParamValue(nativeStereoPannerNode, options, 'pan');\n        /*\n         * Bug #105: The channelCountMode of 'clamped-max' should be supported. However it is not possible to write a polyfill for Safari\n         * which supports it and therefore it can't be supported at all.\n         */\n        Object.defineProperty(nativeStereoPannerNode, 'channelCountMode', {\n            get: () => channelCountMode,\n            set: (value) => {\n                if (value !== channelCountMode) {\n                    throw createNotSupportedError();\n                }\n            }\n        });\n        return nativeStereoPannerNode;\n    });\n};\n//# sourceMappingURL=/build/es2018/factories/native-stereo-panner-node-factory.js.map","import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createStereoPannerNodeRendererFactory = (connectAudioParam, createNativeStereoPannerNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeStereoPannerNodes = new WeakMap();\n        const createStereoPannerNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeStereoPannerNode = getNativeAudioNode(proxy);\n            /*\n             * If the initially used nativeStereoPannerNode was not constructed on the same OfflineAudioContext it needs to be created\n             * again.\n             */\n            const nativeStereoPannerNodeIsOwnedByContext = isOwnedByContext(nativeStereoPannerNode, nativeOfflineAudioContext);\n            if (!nativeStereoPannerNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeStereoPannerNode.channelCount,\n                    channelCountMode: nativeStereoPannerNode.channelCountMode,\n                    channelInterpretation: nativeStereoPannerNode.channelInterpretation,\n                    pan: nativeStereoPannerNode.pan.value\n                };\n                nativeStereoPannerNode = createNativeStereoPannerNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeStereoPannerNodes.set(nativeOfflineAudioContext, nativeStereoPannerNode);\n            if (!nativeStereoPannerNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan, trace);\n            }\n            else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan, trace);\n            }\n            if (isNativeAudioNodeFaker(nativeStereoPannerNode)) {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode.inputs[0], trace);\n            }\n            else {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode, trace);\n            }\n            return nativeStereoPannerNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeStereoPannerNode = renderedNativeStereoPannerNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeStereoPannerNode !== undefined) {\n                    return Promise.resolve(renderedNativeStereoPannerNode);\n                }\n                return createStereoPannerNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/stereo-panner-node-renderer-factory.js.map","import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createWaveShaperNodeRendererFactory = (createNativeWaveShaperNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeWaveShaperNodes = new WeakMap();\n        const createWaveShaperNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeWaveShaperNode = getNativeAudioNode(proxy);\n            // If the initially used nativeWaveShaperNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeWaveShaperNodeIsOwnedByContext = isOwnedByContext(nativeWaveShaperNode, nativeOfflineAudioContext);\n            if (!nativeWaveShaperNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeWaveShaperNode.channelCount,\n                    channelCountMode: nativeWaveShaperNode.channelCountMode,\n                    channelInterpretation: nativeWaveShaperNode.channelInterpretation,\n                    curve: nativeWaveShaperNode.curve,\n                    oversample: nativeWaveShaperNode.oversample\n                };\n                nativeWaveShaperNode = createNativeWaveShaperNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeWaveShaperNodes.set(nativeOfflineAudioContext, nativeWaveShaperNode);\n            if (isNativeAudioNodeFaker(nativeWaveShaperNode)) {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeWaveShaperNode.inputs[0], trace);\n            }\n            else {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeWaveShaperNode, trace);\n            }\n            return nativeWaveShaperNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeWaveShaperNode = renderedNativeWaveShaperNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeWaveShaperNode !== undefined) {\n                    return Promise.resolve(renderedNativeWaveShaperNode);\n                }\n                return createWaveShaperNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/wave-shaper-node-renderer-factory.js.map","export const createIsSecureContext = (window) => (window !== null && window.isSecureContext);\n//# sourceMappingURL=/build/es2018/factories/is-secure-context.js.map","export const createExposeCurrentFrameAndCurrentTime = (window) => {\n    return (currentTime, sampleRate, fn) => {\n        Object.defineProperties(window, {\n            currentFrame: {\n                configurable: true,\n                get() {\n                    return Math.round(currentTime * sampleRate);\n                }\n            },\n            currentTime: {\n                configurable: true,\n                get() {\n                    return currentTime;\n                }\n            }\n        });\n        try {\n            return fn();\n        }\n        finally {\n            if (window !== null) {\n                delete window.currentFrame;\n                delete window.currentTime;\n            }\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/expose-current-frame-and-current-time.js.map","export const createEvaluateSource = (window) => {\n    return (source) => new Promise((resolve, reject) => {\n        if (window === null) {\n            reject(new SyntaxError());\n            return;\n        }\n        const head = window.document.head;\n        if (head === null) {\n            reject(new SyntaxError());\n        }\n        else {\n            const script = window.document.createElement('script');\n            // @todo Safari doesn't like URLs with a type of 'application/javascript; charset=utf-8'.\n            const blob = new Blob([source], { type: 'application/javascript' });\n            const url = URL.createObjectURL(blob);\n            const originalOnErrorHandler = window.onerror;\n            const removeErrorEventListenerAndRevokeUrl = () => {\n                window.onerror = originalOnErrorHandler;\n                URL.revokeObjectURL(url);\n            };\n            window.onerror = (message, src, lineno, colno, error) => {\n                // @todo Edge thinks the source is the one of the html document.\n                if (src === url || (src === location.href && lineno === 1 && colno === 1)) {\n                    removeErrorEventListenerAndRevokeUrl();\n                    reject(error);\n                    return false;\n                }\n                if (originalOnErrorHandler !== null) {\n                    return originalOnErrorHandler(message, src, lineno, colno, error);\n                }\n            };\n            script.onerror = () => {\n                removeErrorEventListenerAndRevokeUrl();\n                reject(new SyntaxError());\n            };\n            script.onload = () => {\n                removeErrorEventListenerAndRevokeUrl();\n                resolve();\n            };\n            script.src = url;\n            script.type = 'module';\n            head.appendChild(script);\n        }\n    });\n};\n//# sourceMappingURL=/build/es2018/factories/evaluate-source.js.map","export const createFetchSource = (createAbortError) => {\n    return async (url) => {\n        try {\n            const response = await fetch(url);\n            if (response.ok) {\n                return response.text();\n            }\n        }\n        catch ( /* Ignore errors. */_a) { /* Ignore errors. */ } // tslint:disable-line:no-empty\n        throw createAbortError();\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/fetch-source.js.map","export const createIsNativeAudioContext = (nativeAudioContextConstructor) => {\n    return (anything) => {\n        return (nativeAudioContextConstructor !== null && anything instanceof nativeAudioContextConstructor);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/is-native-audio-context.js.map","export const createIsNativeContext = (isNativeAudioContext, isNativeOfflineAudioContext) => {\n    return (anything) => {\n        return (isNativeAudioContext(anything) || isNativeOfflineAudioContext(anything));\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/is-native-context.js.map","export const createBaseAudioContextConstructor = (addAudioWorkletModule, analyserNodeConstructor, audioBufferConstructor, audioBufferSourceNodeConstructor, biquadFilterNodeConstructor, channelMergerNodeConstructor, channelSplitterNodeConstructor, constantSourceNodeConstructor, convolverNodeConstructor, decodeAudioData, delayNodeConstructor, dynamicsCompressorNodeConstructor, gainNodeConstructor, iIRFilterNodeConstructor, minimalBaseAudioContextConstructor, oscillatorNodeConstructor, pannerNodeConstructor, periodicWaveConstructor, stereoPannerNodeConstructor, waveShaperNodeConstructor) => {\n    return class BaseAudioContext extends minimalBaseAudioContextConstructor {\n        constructor(_nativeContext, numberOfChannels) {\n            super(_nativeContext, numberOfChannels);\n            this._nativeContext = _nativeContext;\n            this._audioWorklet = (addAudioWorkletModule === undefined) ?\n                undefined :\n                { addModule: (moduleURL, options) => addAudioWorkletModule(this, moduleURL, options) };\n        }\n        get audioWorklet() {\n            return this._audioWorklet;\n        }\n        createAnalyser() {\n            return new analyserNodeConstructor(this);\n        }\n        createBiquadFilter() {\n            return new biquadFilterNodeConstructor(this);\n        }\n        createBuffer(numberOfChannels, length, sampleRate) {\n            return new audioBufferConstructor({ length, numberOfChannels, sampleRate });\n        }\n        createBufferSource() {\n            return new audioBufferSourceNodeConstructor(this);\n        }\n        createChannelMerger(numberOfInputs = 6) {\n            return new channelMergerNodeConstructor(this, { numberOfInputs });\n        }\n        createChannelSplitter(numberOfOutputs = 6) {\n            return new channelSplitterNodeConstructor(this, { numberOfOutputs });\n        }\n        createConstantSource() {\n            return new constantSourceNodeConstructor(this);\n        }\n        createConvolver() {\n            return new convolverNodeConstructor(this);\n        }\n        createDelay(maxDelayTime = 1) {\n            return new delayNodeConstructor(this, { maxDelayTime });\n        }\n        createDynamicsCompressor() {\n            return new dynamicsCompressorNodeConstructor(this);\n        }\n        createGain() {\n            return new gainNodeConstructor(this);\n        }\n        createIIRFilter(feedforward, feedback) {\n            return new iIRFilterNodeConstructor(this, { feedback, feedforward });\n        }\n        createOscillator() {\n            return new oscillatorNodeConstructor(this);\n        }\n        createPanner() {\n            return new pannerNodeConstructor(this);\n        }\n        createPeriodicWave(real, imag, constraints = { disableNormalization: false }) {\n            return new periodicWaveConstructor(this, { ...constraints, imag, real });\n        }\n        createStereoPanner() {\n            return new stereoPannerNodeConstructor(this);\n        }\n        createWaveShaper() {\n            return new waveShaperNodeConstructor(this);\n        }\n        decodeAudioData(audioData, successCallback, errorCallback) {\n            return decodeAudioData(this._nativeContext, audioData)\n                .then((audioBuffer) => {\n                if (typeof successCallback === 'function') {\n                    successCallback(audioBuffer);\n                }\n                return audioBuffer;\n            })\n                .catch((err) => {\n                if (typeof errorCallback === 'function') {\n                    errorCallback(err);\n                }\n                throw err; // tslint:disable-line:rxjs-throw-error\n            });\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/base-audio-context-constructor.js.map","import { detachArrayBuffer } from '../helpers/detach-array-buffer';\nimport { wrapAudioBufferGetChannelDataMethod } from '../helpers/wrap-audio-buffer-get-channel-data-method';\nexport const createDecodeAudioData = (audioBufferStore, cacheTestResult, createDataCloneError, createEncodingError, detachedArrayBuffers, getNativeContext, isNativeContext, isNativeOfflineAudioContext, nativeOfflineAudioContextConstructor, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, testPromiseSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds) => {\n    return (anyContext, audioData) => {\n        const nativeContext = isNativeContext(anyContext) ? anyContext : getNativeContext(anyContext);\n        // Bug #43: Only Chrome and Opera do throw a DataCloneError.\n        if (detachedArrayBuffers.has(audioData)) {\n            const err = createDataCloneError();\n            return Promise.reject(err);\n        }\n        // The audioData parameter maybe of a type which can't be added to a WeakSet.\n        try {\n            detachedArrayBuffers.add(audioData);\n        }\n        catch (_a) {\n            // Ignore errors.\n        }\n        // Bug #21: Safari does not support promises yet.\n        if (cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeContext))) {\n            // Bug #101: Edge does not decode something on a closed OfflineAudioContext.\n            const nativeContextOrBackupNativeContext = (nativeContext.state === 'closed' &&\n                nativeOfflineAudioContextConstructor !== null &&\n                isNativeOfflineAudioContext(nativeContext)) ?\n                new nativeOfflineAudioContextConstructor(1, 1, nativeContext.sampleRate) :\n                nativeContext;\n            const promise = nativeContextOrBackupNativeContext\n                .decodeAudioData(audioData)\n                .catch((err) => {\n                // Bug #27: Edge is rejecting invalid arrayBuffers with a DOMException.\n                if (err instanceof DOMException && err.name === 'NotSupportedError') {\n                    throw new TypeError();\n                }\n                throw err;\n            });\n            return promise\n                .then((audioBuffer) => {\n                // Bug #157: Only Chrome does allow the bufferOffset to be out-of-bounds.\n                if (!cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, () => testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer))) {\n                    wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n                }\n                audioBufferStore.add(audioBuffer);\n                return audioBuffer;\n            });\n        }\n        // Bug #21: Safari does not return a Promise yet.\n        return new Promise((resolve, reject) => {\n            const complete = () => {\n                // Bug #133: Safari does neuter the ArrayBuffer.\n                try {\n                    detachArrayBuffer(audioData);\n                }\n                catch ( /* Ignore errors. */_a) { /* Ignore errors. */ }\n            };\n            const fail = (err) => {\n                reject(err);\n                complete();\n            };\n            // Bug #26: Safari throws a synchronous error.\n            try {\n                // Bug #1: Safari requires a successCallback.\n                nativeContext.decodeAudioData(audioData, (audioBuffer) => {\n                    // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n                    // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.\n                    if (typeof audioBuffer.copyFromChannel !== 'function') {\n                        wrapAudioBufferCopyChannelMethods(audioBuffer);\n                        wrapAudioBufferGetChannelDataMethod(audioBuffer);\n                    }\n                    audioBufferStore.add(audioBuffer);\n                    complete();\n                    resolve(audioBuffer);\n                }, (err) => {\n                    // Bug #4: Safari returns null instead of an error.\n                    if (err === null) {\n                        fail(createEncodingError());\n                    }\n                    else {\n                        fail(err);\n                    }\n                });\n            }\n            catch (err) {\n                fail(err);\n            }\n        });\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/decode-audio-data.js.map","export const detachArrayBuffer = (arrayBuffer) => {\n    const { port1 } = new MessageChannel();\n    port1.postMessage(arrayBuffer, [arrayBuffer]);\n};\n//# sourceMappingURL=/build/es2018/helpers/detach-array-buffer.js.map","export const createDataCloneError = () => {\n    try {\n        return new DOMException('', 'DataCloneError');\n    }\n    catch (err) {\n        // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.\n        err.code = 25;\n        err.name = 'DataCloneError';\n        return err;\n    }\n};\n//# sourceMappingURL=/build/es2018/factories/data-clone-error.js.map","export const createEncodingError = () => {\n    try {\n        return new DOMException('', 'EncodingError');\n    }\n    catch (err) {\n        // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.\n        err.code = 0;\n        err.name = 'EncodingError';\n        return err;\n    }\n};\n//# sourceMappingURL=/build/es2018/factories/encoding-error.js.map","export const createMediaElementAudioSourceNodeConstructor = (audioNodeConstructor, createNativeMediaElementAudioSourceNode, createNotSupportedError, getNativeContext, isNativeOfflineAudioContext) => {\n    return class MediaElementAudioSourceNode extends audioNodeConstructor {\n        constructor(context, options) {\n            const nativeContext = getNativeContext(context);\n            if (isNativeOfflineAudioContext(nativeContext)) {\n                throw createNotSupportedError();\n            }\n            const nativeMediaElementAudioSourceNode = createNativeMediaElementAudioSourceNode(nativeContext, options);\n            super(context, true, nativeMediaElementAudioSourceNode, null);\n            // Bug #63: Edge & Firefox do not expose the mediaElement yet.\n            this._mediaElement = options.mediaElement;\n            this._nativeMediaElementAudioSourceNode = nativeMediaElementAudioSourceNode;\n        }\n        get mediaElement() {\n            return (this._nativeMediaElementAudioSourceNode.mediaElement === undefined) ?\n                this._mediaElement :\n                this._nativeMediaElementAudioSourceNode.mediaElement;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/media-element-audio-source-node-constructor.js.map","export const createNativeMediaElementAudioSourceNodeFactory = (createNativeAudioNode) => {\n    return (nativeAudioContext, options) => createNativeAudioNode(nativeAudioContext, (ntvDCntxt) => {\n        return ntvDCntxt.createMediaElementSource(options.mediaElement);\n    });\n};\n//# sourceMappingURL=/build/es2018/factories/native-media-element-audio-source-node-factory.js.map","export const createMediaStreamAudioSourceNodeConstructor = (audioNodeConstructor, createNativeMediaStreamAudioSourceNode, createNotSupportedError, getNativeContext, isNativeOfflineAudioContext) => {\n    return class MediaStreamAudioSourceNode extends audioNodeConstructor {\n        constructor(context, options) {\n            const nativeContext = getNativeContext(context);\n            if (isNativeOfflineAudioContext(nativeContext)) {\n                throw createNotSupportedError();\n            }\n            const nativeMediaStreamAudioSourceNode = createNativeMediaStreamAudioSourceNode(nativeContext, options);\n            super(context, true, nativeMediaStreamAudioSourceNode, null);\n            this._nativeMediaStreamAudioSourceNode = nativeMediaStreamAudioSourceNode;\n        }\n        get mediaStream() {\n            return this._nativeMediaStreamAudioSourceNode.mediaStream;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/media-stream-audio-source-node-constructor.js.map","export const createNativeMediaStreamAudioSourceNodeFactory = (createNativeAudioNode) => {\n    return (nativeAudioContext, { mediaStream }) => {\n        const audioStreamTracks = mediaStream.getAudioTracks();\n        const nativeMediaStreamAudioSourceNode = createNativeAudioNode(nativeAudioContext, (ntvDCntxt) => {\n            /*\n             * Bug #151: Safari does not use the audio track as input anymore if it gets removed from the mediaStream after construction.\n             * Bug #159: Safari picks the first audio track if the MediaStream has more than one audio track.\n             */\n            const filteredAudioStreamTracks = audioStreamTracks\n                .sort((a, b) => ((a.id < b.id) ? -1 : (a.id > b.id) ? 1 : 0))\n                .slice(0, 1);\n            return ntvDCntxt.createMediaStreamSource(new MediaStream(filteredAudioStreamTracks));\n        });\n        // Bug #63: Edge & Firefox do not expose the mediaStream yet.\n        Object.defineProperty(nativeMediaStreamAudioSourceNode, 'mediaStream', { value: mediaStream });\n        return nativeMediaStreamAudioSourceNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-media-stream-audio-source-node-factory.js.map","export const createMediaStreamTrackAudioSourceNodeConstructor = (audioNodeConstructor, createNativeMediaStreamTrackAudioSourceNode, createNotSupportedError, getNativeContext, isNativeOfflineAudioContext) => {\n    return class MediaStreamTrackAudioSourceNode extends audioNodeConstructor {\n        constructor(context, options) {\n            const nativeContext = getNativeContext(context);\n            if (isNativeOfflineAudioContext(nativeContext)) {\n                throw createNotSupportedError();\n            }\n            const nativeMediaStreamTrackAudioSourceNode = createNativeMediaStreamTrackAudioSourceNode(nativeContext, options);\n            super(context, true, nativeMediaStreamTrackAudioSourceNode, null);\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/media-stream-track-audio-source-node-constructor.js.map","export const createNativeMediaStreamTrackAudioSourceNodeFactory = (createInvalidStateError, createNativeAudioNode) => {\n    return (nativeAudioContext, { mediaStreamTrack }) => {\n        if (typeof nativeAudioContext.createMediaStreamTrackSource === 'function') {\n            return createNativeAudioNode(nativeAudioContext, (ntvDCntxt) => ntvDCntxt.createMediaStreamTrackSource(mediaStreamTrack));\n        }\n        // Bug #121: Only Firefox does yet support the MediaStreamTrackAudioSourceNode.\n        return createNativeAudioNode(nativeAudioContext, (ntvDCntxt) => {\n            const mediaStream = new MediaStream([mediaStreamTrack]);\n            const nativeMediaStreamAudioSourceNode = ntvDCntxt.createMediaStreamSource(mediaStream);\n            // Bug #120: Firefox does not throw an error if the mediaStream has no audio track.\n            if (mediaStreamTrack.kind !== 'audio') {\n                throw createInvalidStateError();\n            }\n            return nativeMediaStreamAudioSourceNode;\n        });\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-media-stream-track-audio-source-node-factory.js.map","import { isValidLatencyHint } from '../helpers/is-valid-latency-hint';\nexport const createAudioContextConstructor = (baseAudioContextConstructor, createInvalidStateError, createNotSupportedError, createUnknownError, mediaElementAudioSourceNodeConstructor, mediaStreamAudioSourceNodeConstructor, mediaStreamTrackAudioSourceNodeConstructor, nativeAudioContextConstructor) => {\n    return class AudioContext extends baseAudioContextConstructor {\n        constructor(options = {}) {\n            if (nativeAudioContextConstructor === null) {\n                throw new Error('Missing the native AudioContext constructor.');\n            }\n            const nativeAudioContext = new nativeAudioContextConstructor(options);\n            // Bug #131 Safari returns null when there are four other AudioContexts running already.\n            if (nativeAudioContext === null) {\n                throw createUnknownError();\n            }\n            // Bug #51 Only Chrome and Opera throw an error if the given latencyHint is invalid.\n            if (!isValidLatencyHint(options.latencyHint)) {\n                throw new TypeError(`The provided value '${options.latencyHint}' is not a valid enum value of type AudioContextLatencyCategory.`);\n            }\n            // Bug #150 Only Chrome, Firefox and Opera support setting the sampleRate.\n            if (options.sampleRate !== undefined && nativeAudioContext.sampleRate !== options.sampleRate) {\n                throw createNotSupportedError();\n            }\n            super(nativeAudioContext, 2);\n            const { latencyHint } = options;\n            const { sampleRate } = nativeAudioContext;\n            // @todo The values for 'balanced', 'interactive' and 'playback' are just copied from Chrome's implementation.\n            this._baseLatency = (typeof nativeAudioContext.baseLatency === 'number')\n                ? nativeAudioContext.baseLatency\n                : (latencyHint === 'balanced')\n                    ? (512 / sampleRate)\n                    : (latencyHint === 'interactive' || latencyHint === undefined)\n                        ? (256 / sampleRate)\n                        : (latencyHint === 'playback')\n                            ? (1024 / sampleRate)\n                            /*\n                             * @todo The min (256) and max (16384) values are taken from the allowed bufferSize values of a\n                             * ScriptProcessorNode.\n                             */\n                            : ((Math.max(2, Math.min(128, Math.round((latencyHint * sampleRate) / 128))) * 128) / sampleRate);\n            this._nativeAudioContext = nativeAudioContext;\n            this._state = null;\n            /*\n             * Bug #34: Chrome and Opera pretend to be running right away, but fire an onstatechange event when the state actually changes\n             * to 'running'.\n             */\n            if (nativeAudioContext.state === 'running') {\n                this._state = 'suspended';\n                const revokeState = () => {\n                    if (this._state === 'suspended') {\n                        this._state = null;\n                    }\n                    nativeAudioContext.removeEventListener('statechange', revokeState);\n                };\n                nativeAudioContext.addEventListener('statechange', revokeState);\n            }\n        }\n        get baseLatency() {\n            return this._baseLatency;\n        }\n        get state() {\n            return (this._state !== null) ? this._state : this._nativeAudioContext.state;\n        }\n        close() {\n            // Bug #35: Firefox does not throw an error if the AudioContext was closed before.\n            if (this.state === 'closed') {\n                return this._nativeAudioContext\n                    .close()\n                    .then(() => {\n                    throw createInvalidStateError();\n                });\n            }\n            // Bug #34: If the state was set to suspended before it should be revoked now.\n            if (this._state === 'suspended') {\n                this._state = null;\n            }\n            return this._nativeAudioContext.close();\n            /*\n             * Bug #50: Deleting the AudioGraph is currently not possible anymore.\n             * ...then(() => deleteAudioGraph(this, this._nativeAudioContext));\n             */\n        }\n        createMediaElementSource(mediaElement) {\n            return new mediaElementAudioSourceNodeConstructor(this, { mediaElement });\n        }\n        createMediaStreamSource(mediaStream) {\n            return new mediaStreamAudioSourceNodeConstructor(this, { mediaStream });\n        }\n        createMediaStreamTrackSource(mediaStreamTrack) {\n            return new mediaStreamTrackAudioSourceNodeConstructor(this, { mediaStreamTrack });\n        }\n        resume() {\n            if (this._state === 'suspended') {\n                return new Promise((resolve, reject) => {\n                    const resolvePromise = () => {\n                        this._nativeAudioContext.removeEventListener('statechange', resolvePromise);\n                        if (this._nativeAudioContext.state === 'running') {\n                            resolve();\n                        }\n                        else {\n                            this\n                                .resume()\n                                .then(resolve, reject);\n                        }\n                    };\n                    this._nativeAudioContext.addEventListener('statechange', resolvePromise);\n                });\n            }\n            return this._nativeAudioContext\n                .resume()\n                .catch((err) => {\n                // Bug #55: Chrome, Edge and Opera do throw an InvalidAccessError instead of an InvalidStateError.\n                // Bug #56: Safari invokes the catch handler but without an error.\n                if (err === undefined || err.code === 15) {\n                    throw createInvalidStateError();\n                }\n                throw err; // tslint:disable-line:rxjs-throw-error\n            });\n        }\n        suspend() {\n            return this._nativeAudioContext\n                .suspend()\n                .catch((err) => {\n                // Bug #56: Safari invokes the catch handler but without an error.\n                if (err === undefined) {\n                    throw createInvalidStateError();\n                }\n                throw err; // tslint:disable-line:rxjs-throw-error\n            });\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-context-constructor.js.map","import { isNativeAudioNode } from '../guards/native-audio-node';\nexport const createConnectMultipleOutputs = (createIndexSizeError) => {\n    return (outputAudioNodes, destination, output = 0, input = 0) => {\n        const outputAudioNode = outputAudioNodes[output];\n        if (outputAudioNode === undefined) {\n            throw createIndexSizeError();\n        }\n        if (isNativeAudioNode(destination)) {\n            return outputAudioNode.connect(destination, 0, input);\n        }\n        return outputAudioNode.connect(destination, 0);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/connect-multiple-outputs.js.map","import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { computeBufferSize } from '../helpers/compute-buffer-size';\nimport { copyFromChannel } from '../helpers/copy-from-channel';\nimport { copyToChannel } from '../helpers/copy-to-channel';\nimport { createAudioWorkletProcessor } from '../helpers/create-audio-worklet-processor';\nimport { createNestedArrays } from '../helpers/create-nested-arrays';\nimport { ReadOnlyMap } from '../read-only-map';\nexport const createNativeAudioWorkletNodeFakerFactory = (auxiliaryGainNodeStore, connectMultipleOutputs, createIndexSizeError, createInvalidStateError, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, createNativeScriptProcessorNode, createNotSupportedError, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, monitorConnections) => {\n    return (nativeContext, baseLatency, processorConstructor, options) => {\n        if (options.numberOfInputs === 0 && options.numberOfOutputs === 0) {\n            throw createNotSupportedError();\n        }\n        if (options.outputChannelCount !== undefined) {\n            if (options.outputChannelCount.length !== options.numberOfOutputs) {\n                throw createIndexSizeError();\n            }\n            // @todo Check if any of the channelCount values is greater than the implementation's maximum number of channels.\n            if (options.outputChannelCount.some((channelCount) => (channelCount < 1))) {\n                throw createNotSupportedError();\n            }\n        }\n        // Bug #61: This is not part of the standard but required for the faker to work.\n        if (options.channelCountMode !== 'explicit') {\n            throw createNotSupportedError();\n        }\n        const numberOfInputChannels = options.channelCount * options.numberOfInputs;\n        const numberOfOutputChannels = options.outputChannelCount.reduce((sum, value) => sum + value, 0);\n        const numberOfParameters = (processorConstructor.parameterDescriptors === undefined)\n            ? 0\n            : processorConstructor.parameterDescriptors.length;\n        // Bug #61: This is not part of the standard but required for the faker to work.\n        if (numberOfInputChannels + numberOfParameters > 6 || numberOfOutputChannels > 6) {\n            throw createNotSupportedError();\n        }\n        const messageChannel = new MessageChannel();\n        const gainNodes = [];\n        const inputChannelSplitterNodes = [];\n        for (let i = 0; i < options.numberOfInputs; i += 1) {\n            gainNodes.push(createNativeGainNode(nativeContext, {\n                channelCount: options.channelCount,\n                channelCountMode: options.channelCountMode,\n                channelInterpretation: options.channelInterpretation,\n                gain: 1\n            }));\n            inputChannelSplitterNodes.push(createNativeChannelSplitterNode(nativeContext, {\n                channelCount: options.channelCount,\n                channelCountMode: 'explicit',\n                channelInterpretation: 'discrete',\n                numberOfOutputs: options.channelCount\n            }));\n        }\n        const constantSourceNodes = [];\n        if (processorConstructor.parameterDescriptors !== undefined) {\n            for (const { defaultValue, maxValue, minValue, name } of processorConstructor.parameterDescriptors) {\n                const constantSourceNode = createNativeConstantSourceNode(nativeContext, {\n                    channelCount: 1,\n                    channelCountMode: 'explicit',\n                    channelInterpretation: 'discrete',\n                    offset: (options.parameterData[name] !== undefined)\n                        ? options.parameterData[name]\n                        : (defaultValue === undefined)\n                            ? 0\n                            : defaultValue\n                });\n                Object.defineProperties(constantSourceNode.offset, {\n                    defaultValue: {\n                        get: () => (defaultValue === undefined) ? 0 : defaultValue\n                    },\n                    maxValue: {\n                        get: () => (maxValue === undefined) ? MOST_POSITIVE_SINGLE_FLOAT : maxValue\n                    },\n                    minValue: {\n                        get: () => (minValue === undefined) ? MOST_NEGATIVE_SINGLE_FLOAT : minValue\n                    }\n                });\n                constantSourceNodes.push(constantSourceNode);\n            }\n        }\n        const inputChannelMergerNode = createNativeChannelMergerNode(nativeContext, {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'speakers',\n            numberOfInputs: Math.max(1, numberOfInputChannels + numberOfParameters)\n        });\n        const bufferSize = computeBufferSize(baseLatency, nativeContext.sampleRate);\n        const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, bufferSize, numberOfInputChannels + numberOfParameters, \n        // Bug #87: Only Firefox will fire an AudioProcessingEvent if there is no connected output.\n        Math.max(1, numberOfOutputChannels));\n        const outputChannelSplitterNode = createNativeChannelSplitterNode(nativeContext, {\n            channelCount: Math.max(1, numberOfOutputChannels),\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete',\n            numberOfOutputs: Math.max(1, numberOfOutputChannels)\n        });\n        const outputChannelMergerNodes = [];\n        for (let i = 0; i < options.numberOfOutputs; i += 1) {\n            outputChannelMergerNodes.push(createNativeChannelMergerNode(nativeContext, {\n                channelCount: 1,\n                channelCountMode: 'explicit',\n                channelInterpretation: 'speakers',\n                numberOfInputs: options.outputChannelCount[i]\n            }));\n        }\n        for (let i = 0; i < options.numberOfInputs; i += 1) {\n            gainNodes[i].connect(inputChannelSplitterNodes[i]);\n            for (let j = 0; j < options.channelCount; j += 1) {\n                inputChannelSplitterNodes[i].connect(inputChannelMergerNode, j, (i * options.channelCount) + j);\n            }\n        }\n        const parameterMap = new ReadOnlyMap((processorConstructor.parameterDescriptors === undefined)\n            ? []\n            : processorConstructor.parameterDescriptors\n                .map(({ name }, index) => {\n                const constantSourceNode = constantSourceNodes[index];\n                constantSourceNode.connect(inputChannelMergerNode, 0, numberOfInputChannels + index);\n                constantSourceNode.start(0);\n                return [name, constantSourceNode.offset];\n            }));\n        inputChannelMergerNode.connect(scriptProcessorNode);\n        let channelInterpretation = options.channelInterpretation;\n        let onprocessorerror = null;\n        // Bug #87: Expose at least one output to make this node connectable.\n        const outputAudioNodes = (options.numberOfOutputs === 0) ? [scriptProcessorNode] : outputChannelMergerNodes;\n        const nativeAudioWorkletNodeFaker = {\n            get bufferSize() {\n                return bufferSize;\n            },\n            get channelCount() {\n                return options.channelCount;\n            },\n            set channelCount(_) {\n                // Bug #61: This is not part of the standard but required for the faker to work.\n                throw createInvalidStateError();\n            },\n            get channelCountMode() {\n                return options.channelCountMode;\n            },\n            set channelCountMode(_) {\n                // Bug #61: This is not part of the standard but required for the faker to work.\n                throw createInvalidStateError();\n            },\n            get channelInterpretation() {\n                return channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                for (const gainNode of gainNodes) {\n                    gainNode.channelInterpretation = value;\n                }\n                channelInterpretation = value;\n            },\n            get context() {\n                return scriptProcessorNode.context;\n            },\n            get inputs() {\n                return gainNodes;\n            },\n            get numberOfInputs() {\n                return options.numberOfInputs;\n            },\n            get numberOfOutputs() {\n                return options.numberOfOutputs;\n            },\n            get onprocessorerror() {\n                return onprocessorerror;\n            },\n            set onprocessorerror(value) {\n                if (typeof onprocessorerror === 'function') {\n                    nativeAudioWorkletNodeFaker.removeEventListener('processorerror', onprocessorerror);\n                }\n                onprocessorerror = (typeof value === 'function') ? value : null;\n                if (typeof onprocessorerror === 'function') {\n                    nativeAudioWorkletNodeFaker.addEventListener('processorerror', onprocessorerror);\n                }\n            },\n            get parameters() {\n                return parameterMap;\n            },\n            get port() {\n                return messageChannel.port2;\n            },\n            addEventListener(...args) {\n                return scriptProcessorNode.addEventListener(args[0], args[1], args[2]);\n            },\n            connect: connectMultipleOutputs.bind(null, outputAudioNodes),\n            disconnect: disconnectMultipleOutputs.bind(null, outputAudioNodes),\n            dispatchEvent(...args) {\n                return scriptProcessorNode.dispatchEvent(args[0]);\n            },\n            removeEventListener(...args) {\n                return scriptProcessorNode.removeEventListener(args[0], args[1], args[2]);\n            }\n        };\n        const patchedEventListeners = new Map(); // tslint:disable-line:max-line-length\n        messageChannel.port1.addEventListener = ((addEventListener) => {\n            return (...args) => {\n                if (args[0] === 'message') {\n                    const unpatchedEventListener = (typeof args[1] === 'function')\n                        ? args[1]\n                        : (typeof args[1] === 'object' && args[1] !== null && typeof args[1].handleEvent === 'function')\n                            ? args[1].handleEvent\n                            : null;\n                    if (unpatchedEventListener !== null) {\n                        const patchedEventListener = patchedEventListeners.get(args[1]);\n                        if (patchedEventListener !== undefined) {\n                            args[1] = patchedEventListener;\n                        }\n                        else {\n                            args[1] = (event) => {\n                                exposeCurrentFrameAndCurrentTime(nativeContext.currentTime, nativeContext.sampleRate, () => unpatchedEventListener(event));\n                            };\n                            patchedEventListeners.set(unpatchedEventListener, args[1]);\n                        }\n                    }\n                }\n                return addEventListener.call(messageChannel.port1, args[0], args[1], args[2]);\n            };\n        })(messageChannel.port1.addEventListener);\n        messageChannel.port1.removeEventListener = ((removeEventListener) => {\n            return (...args) => {\n                if (args[0] === 'message') {\n                    const patchedEventListener = patchedEventListeners.get(args[1]);\n                    if (patchedEventListener !== undefined) {\n                        patchedEventListeners.delete(args[1]);\n                        args[1] = patchedEventListener;\n                    }\n                }\n                return removeEventListener.call(messageChannel.port1, args[0], args[1], args[2]);\n            };\n        })(messageChannel.port1.removeEventListener);\n        let onmessage = null;\n        Object.defineProperty(messageChannel.port1, 'onmessage', {\n            get: () => onmessage,\n            set: (value) => {\n                if (typeof onmessage === 'function') {\n                    messageChannel.port1.removeEventListener('message', onmessage);\n                }\n                onmessage = (typeof value === 'function') ? value : null;\n                if (typeof onmessage === 'function') {\n                    messageChannel.port1.addEventListener('message', onmessage);\n                    messageChannel.port1.start();\n                }\n            }\n        });\n        processorConstructor.prototype.port = messageChannel.port1;\n        let audioWorkletProcessor = null;\n        const audioWorkletProcessorPromise = createAudioWorkletProcessor(nativeContext, nativeAudioWorkletNodeFaker, processorConstructor, options);\n        audioWorkletProcessorPromise\n            .then((dWrkltPrcssr) => audioWorkletProcessor = dWrkltPrcssr);\n        const inputs = createNestedArrays(options.numberOfInputs, options.channelCount);\n        const outputs = createNestedArrays(options.numberOfOutputs, options.outputChannelCount);\n        const parameters = (processorConstructor.parameterDescriptors === undefined) ?\n            [] :\n            processorConstructor.parameterDescriptors\n                .reduce((prmtrs, { name }) => ({ ...prmtrs, [name]: new Float32Array(128) }), {});\n        let isActive = true;\n        const disconnectOutputsGraph = () => {\n            if (options.numberOfOutputs > 0) {\n                scriptProcessorNode.disconnect(outputChannelSplitterNode);\n            }\n            for (let i = 0, outputChannelSplitterNodeOutput = 0; i < options.numberOfOutputs; i += 1) {\n                const outputChannelMergerNode = outputChannelMergerNodes[i];\n                for (let j = 0; j < options.outputChannelCount[i]; j += 1) {\n                    outputChannelSplitterNode.disconnect(outputChannelMergerNode, outputChannelSplitterNodeOutput + j, j);\n                }\n                outputChannelSplitterNodeOutput += options.outputChannelCount[i];\n            }\n        };\n        scriptProcessorNode.onaudioprocess = ({ inputBuffer, outputBuffer }) => {\n            if (audioWorkletProcessor !== null) {\n                for (let i = 0; i < bufferSize; i += 128) {\n                    for (let j = 0; j < options.numberOfInputs; j += 1) {\n                        for (let k = 0; k < options.channelCount; k += 1) {\n                            copyFromChannel(inputBuffer, inputs[j], k, k, i);\n                        }\n                    }\n                    if (processorConstructor.parameterDescriptors !== undefined) {\n                        processorConstructor.parameterDescriptors.forEach(({ name }, index) => {\n                            copyFromChannel(inputBuffer, parameters, name, numberOfInputChannels + index, i);\n                        });\n                    }\n                    for (let j = 0; j < options.numberOfInputs; j += 1) {\n                        for (let k = 0; k < options.outputChannelCount[j]; k += 1) {\n                            // The byteLength will be 0 when the ArrayBuffer was transferred.\n                            if (outputs[j][k].byteLength === 0) {\n                                outputs[j][k] = new Float32Array(128);\n                            }\n                        }\n                    }\n                    try {\n                        const potentiallyEmptyInputs = inputs\n                            .map((input, index) => {\n                            const auxiliaryGainNodes = auxiliaryGainNodeStore.get(nativeAudioWorkletNodeFaker);\n                            if (auxiliaryGainNodes === undefined || auxiliaryGainNodes.get(index) === undefined) {\n                                return [new Float32Array(0)];\n                            }\n                            return input;\n                        });\n                        const activeSourceFlag = exposeCurrentFrameAndCurrentTime(nativeContext.currentTime + (i / nativeContext.sampleRate), nativeContext.sampleRate, () => audioWorkletProcessor.process(potentiallyEmptyInputs, outputs, parameters));\n                        isActive = activeSourceFlag;\n                        for (let j = 0, outputChannelSplitterNodeOutput = 0; j < options.numberOfOutputs; j += 1) {\n                            for (let k = 0; k < options.outputChannelCount[j]; k += 1) {\n                                copyToChannel(outputBuffer, outputs[j], k, outputChannelSplitterNodeOutput + k, i);\n                            }\n                            outputChannelSplitterNodeOutput += options.outputChannelCount[j];\n                        }\n                    }\n                    catch (error) {\n                        isActive = false;\n                        nativeAudioWorkletNodeFaker.dispatchEvent(new ErrorEvent('processorerror', { error }));\n                    }\n                    if (!isActive) {\n                        for (let j = 0; j < options.numberOfInputs; j += 1) {\n                            gainNodes[j].disconnect(inputChannelSplitterNodes[j]);\n                            for (let k = 0; k < options.channelCount; k += 1) {\n                                inputChannelSplitterNodes[i].disconnect(inputChannelMergerNode, k, (j * options.channelCount) + k);\n                            }\n                        }\n                        if (processorConstructor.parameterDescriptors !== undefined) {\n                            const length = processorConstructor.parameterDescriptors.length;\n                            for (let j = 0; j < length; j += 1) {\n                                const constantSourceNode = constantSourceNodes[j];\n                                constantSourceNode.disconnect(inputChannelMergerNode, 0, numberOfInputChannels + j);\n                                constantSourceNode.stop();\n                            }\n                        }\n                        inputChannelMergerNode.disconnect(scriptProcessorNode);\n                        scriptProcessorNode.onaudioprocess = null; // tslint:disable-line:deprecation\n                        if (isConnected) {\n                            disconnectOutputsGraph();\n                        }\n                        break;\n                    }\n                }\n            }\n        };\n        let isConnected = false;\n        const whenConnected = () => {\n            if (isActive) {\n                if (options.numberOfOutputs > 0) {\n                    scriptProcessorNode.connect(outputChannelSplitterNode);\n                }\n                for (let i = 0, outputChannelSplitterNodeOutput = 0; i < options.numberOfOutputs; i += 1) {\n                    const outputChannelMergerNode = outputChannelMergerNodes[i];\n                    for (let j = 0; j < options.outputChannelCount[i]; j += 1) {\n                        outputChannelSplitterNode.connect(outputChannelMergerNode, outputChannelSplitterNodeOutput + j, j);\n                    }\n                    outputChannelSplitterNodeOutput += options.outputChannelCount[i];\n                }\n            }\n            isConnected = true;\n        };\n        const whenDisconnected = () => {\n            if (isActive) {\n                disconnectOutputsGraph();\n            }\n            isConnected = false;\n        };\n        return monitorConnections(nativeAudioWorkletNodeFaker, whenConnected, whenDisconnected);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-audio-worklet-node-faker-factory.js.map","import { NODE_TO_PROCESSOR_MAPS } from '../globals';\nimport { createAudioWorkletProcessorPromise } from './create-audio-worklet-processor-promise';\nexport const createAudioWorkletProcessor = (nativeContext, nativeAudioWorkletNode, processorConstructor, audioWorkletNodeOptions) => {\n    let nodeToProcessorMap = NODE_TO_PROCESSOR_MAPS.get(nativeContext);\n    if (nodeToProcessorMap === undefined) {\n        nodeToProcessorMap = new WeakMap();\n        NODE_TO_PROCESSOR_MAPS.set(nativeContext, nodeToProcessorMap);\n    }\n    const audioWorkletProcessorPromise = createAudioWorkletProcessorPromise(processorConstructor, audioWorkletNodeOptions);\n    nodeToProcessorMap.set(nativeAudioWorkletNode, audioWorkletProcessorPromise);\n    return audioWorkletProcessorPromise;\n};\n//# sourceMappingURL=/build/es2018/helpers/create-audio-worklet-processor.js.map","import { testClonabilityOfAudioWorkletNodeOptions } from '../helpers/test-clonability-of-audio-worklet-node-options';\nexport const createNativeAudioWorkletNodeFactory = (createInvalidStateError, createNativeAudioNode, createNativeAudioWorkletNodeFaker, createNotSupportedError, isNativeOfflineAudioContext) => {\n    return (nativeContext, baseLatency, nativeAudioWorkletNodeConstructor, name, processorConstructor, options) => {\n        if (nativeAudioWorkletNodeConstructor !== null) {\n            try {\n                // Bug #86: Chrome Canary does not invoke the process() function if the corresponding AudioWorkletNode has no output.\n                const nativeAudioWorkletNode = createNativeAudioNode(nativeContext, (ntvCntxt) => {\n                    return (isNativeOfflineAudioContext(ntvCntxt) && options.numberOfInputs !== 0 && options.numberOfOutputs === 0) ?\n                        new nativeAudioWorkletNodeConstructor(ntvCntxt, name, {\n                            ...options,\n                            numberOfOutputs: 1,\n                            outputChannelCount: [1],\n                            parameterData: { ...options.parameterData, hasNoOutput: 1 }\n                        }) :\n                        new nativeAudioWorkletNodeConstructor(ntvCntxt, name, options);\n                });\n                const patchedEventListeners = new Map(); // tslint:disable-line:max-line-length\n                let onprocessorerror = null;\n                Object.defineProperties(nativeAudioWorkletNode, {\n                    /*\n                     * Bug #61: Overwriting the property accessors for channelCount and channelCountMode is necessary as long as some\n                     * browsers have no native implementation to achieve a consistent behavior.\n                     */\n                    channelCount: {\n                        get: () => options.channelCount,\n                        set: () => {\n                            throw createInvalidStateError();\n                        }\n                    },\n                    channelCountMode: {\n                        get: () => 'explicit',\n                        set: () => {\n                            throw createInvalidStateError();\n                        }\n                    },\n                    // Bug #156: Chrome does not yet fire an ErrorEvent.\n                    onprocessorerror: {\n                        get: () => onprocessorerror,\n                        set: (value) => {\n                            if (typeof onprocessorerror === 'function') {\n                                nativeAudioWorkletNode.removeEventListener('processorerror', onprocessorerror);\n                            }\n                            onprocessorerror = (typeof value === 'function') ? value : null;\n                            if (typeof onprocessorerror === 'function') {\n                                nativeAudioWorkletNode.addEventListener('processorerror', onprocessorerror);\n                            }\n                        }\n                    }\n                });\n                nativeAudioWorkletNode.addEventListener = ((addEventListener) => {\n                    return (...args) => {\n                        if (args[0] === 'processorerror') {\n                            const unpatchedEventListener = (typeof args[1] === 'function')\n                                ? args[1]\n                                : (typeof args[1] === 'object' && args[1] !== null && typeof args[1].handleEvent === 'function')\n                                    ? args[1].handleEvent\n                                    : null;\n                            if (unpatchedEventListener !== null) {\n                                const patchedEventListener = patchedEventListeners.get(args[1]);\n                                if (patchedEventListener !== undefined) {\n                                    args[1] = patchedEventListener;\n                                }\n                                else {\n                                    args[1] = (event) => {\n                                        unpatchedEventListener(new ErrorEvent(args[0], { ...event, error: new Error( /* @todo */) }));\n                                    };\n                                    patchedEventListeners.set(unpatchedEventListener, args[1]);\n                                }\n                            }\n                        }\n                        return addEventListener.call(nativeAudioWorkletNode, args[0], args[1], args[2]);\n                    };\n                })(nativeAudioWorkletNode.addEventListener);\n                nativeAudioWorkletNode.removeEventListener = ((removeEventListener) => {\n                    return (...args) => {\n                        if (args[0] === 'processorerror') {\n                            const patchedEventListener = patchedEventListeners.get(args[1]);\n                            if (patchedEventListener !== undefined) {\n                                patchedEventListeners.delete(args[1]);\n                                args[1] = patchedEventListener;\n                            }\n                        }\n                        return removeEventListener.call(nativeAudioWorkletNode, args[0], args[1], args[2]);\n                    };\n                })(nativeAudioWorkletNode.removeEventListener);\n                return nativeAudioWorkletNode;\n            }\n            catch (err) {\n                // Bug #60: Chrome Canary throws an InvalidStateError instead of a NotSupportedError.\n                if (err.code === 11) {\n                    throw createNotSupportedError();\n                }\n                throw err; // tslint:disable-line:rxjs-throw-error\n            }\n        }\n        // Bug #61: Only Chrome & Opera have an implementation of the AudioWorkletNode yet.\n        if (processorConstructor === undefined) {\n            throw createNotSupportedError();\n        }\n        testClonabilityOfAudioWorkletNodeOptions(options);\n        return createNativeAudioWorkletNodeFaker(nativeContext, baseLatency, processorConstructor, options);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-audio-worklet-node-factory.js.map","export const testClonabilityOfAudioWorkletNodeOptions = (audioWorkletNodeOptions) => {\n    const { port1 } = new MessageChannel();\n    try {\n        // This will throw an error if the audioWorkletNodeOptions are not clonable.\n        port1.postMessage(audioWorkletNodeOptions);\n    }\n    finally {\n        port1.close();\n    }\n};\n//# sourceMappingURL=/build/es2018/helpers/test-clonability-of-audio-worklet-node-options.js.map","export const createNativeAudioWorkletNodeConstructor = (window) => {\n    if (window === null) {\n        return null;\n    }\n    return (window.hasOwnProperty('AudioWorkletNode')) ? window.AudioWorkletNode : null;\n};\n//# sourceMappingURL=/build/es2018/factories/native-audio-worklet-node-constructor.js.map","import { isValidLatencyHint } from '../helpers/is-valid-latency-hint';\nexport const createMinimalAudioContextConstructor = (createInvalidStateError, createNotSupportedError, createUnknownError, minimalBaseAudioContextConstructor, nativeAudioContextConstructor) => {\n    return class MinimalAudioContext extends minimalBaseAudioContextConstructor {\n        constructor(options = {}) {\n            if (nativeAudioContextConstructor === null) {\n                throw new Error('Missing the native AudioContext constructor.');\n            }\n            const nativeAudioContext = new nativeAudioContextConstructor(options);\n            // Bug #131 Safari returns null when there are four other AudioContexts running already.\n            if (nativeAudioContext === null) {\n                throw createUnknownError();\n            }\n            // Bug #51 Only Chrome and Opera throw an error if the given latencyHint is invalid.\n            if (!isValidLatencyHint(options.latencyHint)) {\n                throw new TypeError(`The provided value '${options.latencyHint}' is not a valid enum value of type AudioContextLatencyCategory.`);\n            }\n            // Bug #150 Only Chrome, Firefox and Opera support setting the sampleRate.\n            if (options.sampleRate !== undefined && nativeAudioContext.sampleRate !== options.sampleRate) {\n                throw createNotSupportedError();\n            }\n            super(nativeAudioContext, 2);\n            const { latencyHint } = options;\n            const { sampleRate } = nativeAudioContext;\n            // @todo The values for 'balanced', 'interactive' and 'playback' are just copied from Chrome's implementation.\n            this._baseLatency = (typeof nativeAudioContext.baseLatency === 'number')\n                ? nativeAudioContext.baseLatency\n                : (latencyHint === 'balanced')\n                    ? (512 / sampleRate)\n                    : (latencyHint === 'interactive' || latencyHint === undefined)\n                        ? (256 / sampleRate)\n                        : (latencyHint === 'playback')\n                            ? (1024 / sampleRate)\n                            /*\n                             * @todo The min (256) and max (16384) values are taken from the allowed bufferSize values of a\n                             * ScriptProcessorNode.\n                             */\n                            : ((Math.max(2, Math.min(128, Math.round((latencyHint * sampleRate) / 128))) * 128) / sampleRate);\n            this._nativeAudioContext = nativeAudioContext;\n            this._state = null;\n            /*\n             * Bug #34: Chrome and Opera pretend to be running right away, but fire an onstatechange event when the state actually\n             * changes to 'running'.\n             */\n            if (nativeAudioContext.state === 'running') {\n                this._state = 'suspended';\n                const revokeState = () => {\n                    if (this._state === 'suspended') {\n                        this._state = null;\n                    }\n                    nativeAudioContext.removeEventListener('statechange', revokeState);\n                };\n                nativeAudioContext.addEventListener('statechange', revokeState);\n            }\n        }\n        get baseLatency() {\n            return this._baseLatency;\n        }\n        get state() {\n            return (this._state !== null) ? this._state : this._nativeAudioContext.state;\n        }\n        close() {\n            // Bug #35: Firefox does not throw an error if the AudioContext was closed before.\n            if (this.state === 'closed') {\n                return this._nativeAudioContext\n                    .close()\n                    .then(() => {\n                    throw createInvalidStateError();\n                });\n            }\n            // Bug #34: If the state was set to suspended before it should be revoked now.\n            if (this._state === 'suspended') {\n                this._state = null;\n            }\n            return this._nativeAudioContext.close();\n            /*\n             * Bug #50: Deleting the AudioGraph is currently not possible anymore.\n             * ...then(() => deleteAudioGraph(this, this._nativeAudioContext));\n             */\n        }\n        resume() {\n            if (this._state === 'suspended') {\n                return new Promise((resolve, reject) => {\n                    const resolvePromise = () => {\n                        this._nativeAudioContext.removeEventListener('statechange', resolvePromise);\n                        if (this._nativeAudioContext.state === 'running') {\n                            resolve();\n                        }\n                        else {\n                            this\n                                .resume()\n                                .then(resolve, reject);\n                        }\n                    };\n                    this._nativeAudioContext.addEventListener('statechange', resolvePromise);\n                });\n            }\n            return this._nativeAudioContext\n                .resume()\n                .catch((err) => {\n                // Bug #55: Chrome, Edge and Opera do throw an InvalidAccessError instead of an InvalidStateError.\n                // Bug #56: Safari invokes the catch handler but without an error.\n                if (err === undefined || err.code === 15) {\n                    throw createInvalidStateError();\n                }\n                throw err; // tslint:disable-line:rxjs-throw-error\n            });\n        }\n        suspend() {\n            return this._nativeAudioContext\n                .suspend()\n                .catch((err) => {\n                // Bug #56: Safari invokes the catch handler but without an error.\n                if (err === undefined) {\n                    throw createInvalidStateError();\n                }\n                throw err; // tslint:disable-line:rxjs-throw-error\n            });\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/minimal-audio-context-constructor.js.map","export const createCreateNativeOfflineAudioContext = (createNotSupportedError, nativeOfflineAudioContextConstructor) => {\n    return (numberOfChannels, length, sampleRate) => {\n        if (nativeOfflineAudioContextConstructor === null) {\n            throw new Error('Missing the native OfflineAudioContext constructor.');\n        }\n        try {\n            return new nativeOfflineAudioContextConstructor(numberOfChannels, length, sampleRate);\n        }\n        catch (err) {\n            // Bug #143, #144 & #146: Safari throws a SyntaxError when numberOfChannels, length or sampleRate are invalid.\n            // Bug #143: Edge throws a SyntaxError when numberOfChannels or length are invalid.\n            // Bug #145: Edge throws an IndexSizeError when sampleRate is zero.\n            if (err.name === 'IndexSizeError' || err.name === 'SyntaxError') {\n                throw createNotSupportedError();\n            }\n            throw err; // tslint:disable-line:rxjs-throw-error\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/create-native-offline-audio-context.js.map","import { wrapAudioBufferGetChannelDataMethod } from '../helpers/wrap-audio-buffer-get-channel-data-method';\nexport const createStartRendering = (audioBufferStore, cacheTestResult, getAudioNodeRenderer, renderNativeOfflineAudioContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds) => {\n    return (destination, nativeOfflineAudioContext) => getAudioNodeRenderer(destination)\n        .render(destination, nativeOfflineAudioContext, [])\n        .then(() => renderNativeOfflineAudioContext(nativeOfflineAudioContext))\n        .then((audioBuffer) => {\n        // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n        // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.\n        if (typeof audioBuffer.copyFromChannel !== 'function') {\n            wrapAudioBufferCopyChannelMethods(audioBuffer);\n            wrapAudioBufferGetChannelDataMethod(audioBuffer);\n            // Bug #157: Only Chrome does allow the bufferOffset to be out-of-bounds.\n        }\n        else if (!cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, () => testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer))) {\n            wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n        }\n        audioBufferStore.add(audioBuffer);\n        return audioBuffer;\n    });\n};\n//# sourceMappingURL=/build/es2018/factories/start-rendering.js.map","export const createIsAnyAudioContext = (contextStore, isNativeAudioContext) => {\n    return (anything) => {\n        const nativeContext = contextStore.get(anything);\n        return isNativeAudioContext(nativeContext) || isNativeAudioContext(anything);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/is-any-audio-context.js.map","export const createIsAnyAudioNode = (audioNodeStore, isNativeAudioNode) => {\n    return (anything) => audioNodeStore.has(anything) || isNativeAudioNode(anything);\n};\n//# sourceMappingURL=/build/es2018/factories/is-any-audio-node.js.map","export const createIsAnyAudioParam = (audioParamStore, isNativeAudioParam) => {\n    return (anything) => audioParamStore.has(anything) || isNativeAudioParam(anything);\n};\n//# sourceMappingURL=/build/es2018/factories/is-any-audio-param.js.map","export const createIsAnyOfflineAudioContext = (contextStore, isNativeOfflineAudioContext) => {\n    return (anything) => {\n        const nativeContext = contextStore.get(anything);\n        return isNativeOfflineAudioContext(nativeContext) || isNativeOfflineAudioContext(anything);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/is-any-offline-audio-context.js.map","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * Assert that the statement is true, otherwise invoke an error with the given message.\n */\nexport function assert(statement: boolean, error: string): void {\n\tif (!statement) {\n\t\tthrow new Error(error);\n\t}\n}\n\n/**\n * Make sure that the given value is within the range\n */\nexport function assertRange(value: number, gte: number, lte = Infinity): void {\n\tif (!(gte <= value && value <= lte)) {\n\t\tthrow new RangeError(`Value must be within [${gte}, ${lte}], got: ${value}`);\n\t}\n}\n\n/**\n * Make sure that the given value is within the range\n */\nexport function assertContextRunning(context: import(\"../context/BaseContext\").BaseContext): void {\n\t// add a warning if the context is not started\n\tif (!context.isOffline && context.state !== \"running\") {\n\t\twarn(\"The AudioContext is \\\"suspended\\\". Invoke Tone.start() from a user action to start the audio.\");\n\t}\n}\n\n/**\n * A basic logging interface\n */\ninterface Logger {\n\tlog: (args?: any[]) => void;\n\twarn: (args?: any[]) => void;\n}\n\n/**\n * The default logger is the console\n */\nlet defaultLogger: Logger = console;\n\n/**\n * Set the logging interface\n */\nexport function setLogger(logger: Logger): void {\n\tdefaultLogger = logger;\n}\n\n/**\n * Log anything\n */\nexport function log(...args: any[]): void {\n\tdefaultLogger.log(...args);\n}\n\n/**\n * Warn anything\n */\nexport function warn(...args: any[]): void {\n\tdefaultLogger.warn(...args);\n}\n","import { Note } from \"../type/Units\";\n\n/**\n * Test if the arg is undefined\n */\nexport function isUndef(arg: any): arg is undefined {\n\treturn typeof arg === \"undefined\";\n}\n\n/**\n * Test if the arg is not undefined\n */\nexport function isDefined<T>(arg: T | undefined): arg is T {\n\treturn !isUndef(arg);\n}\n\n/**\n * Test if the arg is a function\n */\nexport function isFunction(arg: any): arg is (a: any) => any {\n\treturn typeof arg === \"function\";\n}\n\n/**\n * Test if the argument is a number.\n */\nexport function isNumber(arg: any): arg is number {\n\treturn (typeof arg === \"number\");\n}\n\n/**\n * Test if the given argument is an object literal (i.e. `{}`);\n */\nexport function isObject(arg: any): arg is object {\n\treturn (Object.prototype.toString.call(arg) === \"[object Object]\" && arg.constructor === Object);\n}\n\n/**\n * Test if the argument is a boolean.\n */\nexport function isBoolean(arg: any): arg is boolean {\n\treturn (typeof arg === \"boolean\");\n}\n\n/**\n * Test if the argument is an Array\n */\nexport function isArray(arg: any): arg is any[] {\n\treturn (Array.isArray(arg));\n}\n\n/**\n * Test if the argument is a string.\n */\nexport function isString(arg: any): arg is string {\n\treturn (typeof arg === \"string\");\n}\n\n/**\n * Test if the argument is in the form of a note in scientific pitch notation.\n * e.g. \"C4\"\n */\nexport function isNote(arg: any): arg is Note {\n\treturn isString(arg) && /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i.test(arg);\n}\n","import {\n\tAudioContext as stdAudioContext,\n\tAudioWorkletNode as stdAudioWorkletNode,\n\tOfflineAudioContext as stdOfflineAudioContext,\n} from \"standardized-audio-context\";\nimport { assert } from \"../util/Debug\";\nimport { isDefined } from \"../util/TypeCheck\";\n\n/**\n * Create a new AudioContext\n */\nexport function createAudioContext(): AudioContext {\n\treturn new stdAudioContext() as unknown as AudioContext;\n}\n\n/**\n * Create a new OfflineAudioContext\n */\nexport function createOfflineAudioContext(channels: number, length: number, sampleRate: number): OfflineAudioContext {\n\treturn new stdOfflineAudioContext(channels, length, sampleRate) as unknown as OfflineAudioContext;\n}\n\n/**\n * Either the online or offline audio context\n */\nexport type AnyAudioContext = AudioContext | OfflineAudioContext;\n\n/**\n * Interface for things that Tone.js adds to the window\n */\ninterface ToneWindow extends Window {\n\tTONE_SILENCE_LOGGING?: boolean;\n\tTONE_DEBUG_CLASS?: string;\n}\n\n/**\n * A reference to the window object\n * @hidden\n */\nexport const theWindow: ToneWindow | null = typeof self === \"object\" ? self : null;\n\n/**\n * If the browser has a window object which has an AudioContext\n * @hidden\n */\nexport const hasAudioContext = theWindow &&\n\t(theWindow.hasOwnProperty(\"AudioContext\") || theWindow.hasOwnProperty(\"webkitAudioContext\"));\n\nexport function createAudioWorkletNode(context: AnyAudioContext, name: string, options?: Partial<AudioWorkletNodeOptions>): AudioWorkletNode {\n\tassert(isDefined(stdAudioWorkletNode), \"This node only works in a secure context (https or localhost)\");\n\t// @ts-ignore\n\treturn new stdAudioWorkletNode(context, name, options);\n}\n","import { Seconds } from \"../type/Units\";\n\nexport type TickerClockSource = \"worker\" | \"timeout\" | \"offline\";\n\n/**\n * A class which provides a reliable callback using either\n * a Web Worker, or if that isn't supported, falls back to setTimeout.\n */\nexport class Ticker {\n\n\t/**\n\t * Either \"worker\" or \"timeout\" or \"offline\"\n\t */\n\tprivate _type: TickerClockSource;\n\n\t/**\n\t * The update interval of the worker\n\t */\n\tprivate _updateInterval: Seconds;\n\n\t/**\n\t * The callback to invoke at regular intervals\n\t */\n\tprivate _callback: () => void;\n\n\t/**\n\t * track the callback interval\n\t */\n\tprivate _timeout!: number;\n\n\t/**\n\t * private reference to the worker\n\t */\n\tprivate _worker!: Worker;\n\n\tconstructor(callback: () => void, type: TickerClockSource, updateInterval: Seconds) {\n\n\t\tthis._callback = callback;\n\t\tthis._type = type;\n\t\tthis._updateInterval = updateInterval;\n\n\t\t// create the clock source for the first time\n\t\tthis._createClock();\n\t}\n\n\t/**\n\t * Generate a web worker\n\t */\n\tprivate _createWorker(): void {\n\n\t\tconst blob = new Blob([\n\t\t\t/* javascript */`\n\t\t\t// the initial timeout time\n\t\t\tlet timeoutTime =  ${(this._updateInterval * 1000).toFixed(1)};\n\t\t\t// onmessage callback\n\t\t\tself.onmessage = function(msg){\n\t\t\t\ttimeoutTime = parseInt(msg.data);\n\t\t\t};\n\t\t\t// the tick function which posts a message\n\t\t\t// and schedules a new tick\n\t\t\tfunction tick(){\n\t\t\t\tsetTimeout(tick, timeoutTime);\n\t\t\t\tself.postMessage('tick');\n\t\t\t}\n\t\t\t// call tick initially\n\t\t\ttick();\n\t\t\t`\n\t\t], { type: \"text/javascript\" });\n\t\tconst blobUrl = URL.createObjectURL(blob);\n\t\tconst worker = new Worker(blobUrl);\n\n\t\tworker.onmessage = this._callback.bind(this);\n\n\t\tthis._worker = worker;\n\t}\n\n\t/**\n\t * Create a timeout loop\n\t */\n\tprivate _createTimeout(): void {\n\t\tthis._timeout = setTimeout(() => {\n\t\t\tthis._createTimeout();\n\t\t\tthis._callback();\n\t\t}, this._updateInterval * 1000);\n\t}\n\n\t/**\n\t * Create the clock source.\n\t */\n\tprivate _createClock(): void {\n\t\tif (this._type === \"worker\") {\n\t\t\ttry {\n\t\t\t\tthis._createWorker();\n\t\t\t} catch (e) {\n\t\t\t\t// workers not supported, fallback to timeout\n\t\t\t\tthis._type = \"timeout\";\n\t\t\t\tthis._createClock();\n\t\t\t}\n\t\t} else if (this._type === \"timeout\") {\n\t\t\tthis._createTimeout();\n\t\t}\n\t}\n\n\t/**\n\t * Clean up the current clock source\n\t */\n\tprivate _disposeClock(): void {\n\t\tif (this._timeout) {\n\t\t\tclearTimeout(this._timeout);\n\t\t\tthis._timeout = 0;\n\t\t}\n\t\tif (this._worker) {\n\t\t\tthis._worker.terminate();\n\t\t\tthis._worker.onmessage = null;\n\t\t}\n\t}\n\n\t/**\n\t * The rate in seconds the ticker will update\n\t */\n\tget updateInterval(): Seconds {\n\t\treturn this._updateInterval;\n\t}\n\tset updateInterval(interval: Seconds) {\n\t\tthis._updateInterval = Math.max(interval, 128 / 44100);\n\t\tif (this._type === \"worker\") {\n\t\t\tthis._worker.postMessage(Math.max(interval * 1000, 1));\n\t\t}\n\t}\n\n\t/**\n\t * The type of the ticker, either a worker or a timeout\n\t */\n\tget type(): TickerClockSource {\n\t\treturn this._type;\n\t}\n\tset type(type: TickerClockSource) {\n\t\tthis._disposeClock();\n\t\tthis._type = type;\n\t\tthis._createClock();\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): void {\n\t\tthis._disposeClock();\n\t}\n}\n","import {\n\tisAnyAudioContext, isAnyAudioNode,\n\tisAnyAudioParam, isAnyOfflineAudioContext,\n} from \"standardized-audio-context\";\n\n/**\n * Test if the given value is an instanceof AudioParam\n */\nexport function isAudioParam(arg: any): arg is AudioParam {\n\treturn isAnyAudioParam(arg);\n}\n\n/**\n * Test if the given value is an instanceof AudioNode\n */\nexport function isAudioNode(arg: any): arg is AudioNode {\n\treturn isAnyAudioNode(arg);\n}\n\n/**\n * Test if the arg is instanceof an OfflineAudioContext\n */\nexport function isOfflineAudioContext(arg: any): arg is OfflineAudioContext {\n\treturn isAnyOfflineAudioContext(arg);\n}\n\n/**\n * Test if the arg is an instanceof AudioContext\n */\nexport function isAudioContext(arg: any): arg is AudioContext {\n\treturn isAnyAudioContext(arg);\n}\n\n/**\n * Test if the arg is instanceof an AudioBuffer\n */\nexport function isAudioBuffer(arg: any): arg is AudioBuffer {\n\treturn arg instanceof AudioBuffer;\n}\n","import { isAudioBuffer, isAudioNode, isAudioParam } from \"./AdvancedTypeCheck\";\nimport { isDefined, isObject, isUndef } from \"./TypeCheck\";\n\ntype BaseToneOptions = import(\"../Tone\").BaseToneOptions;\n\n/**\n * Some objects should not be merged\n */\nfunction noCopy(key: string, arg: any): boolean {\n\treturn key === \"value\" || isAudioParam(arg) || isAudioNode(arg) || isAudioBuffer(arg);\n}\n\n/**\n * Recursively merge an object\n * @param target the object to merge into\n * @param sources the source objects to merge\n */\nexport function deepMerge<T>(target: T): T;\nexport function deepMerge<T, U>(target: T, source1: U): T & U;\nexport function deepMerge<T, U, V>(target: T, source1: U, source2: V): T & U & V;\nexport function deepMerge<T, U, V, W>(target: T, source1: U, source2: V, source3: W): T & U & V & W;\nexport function deepMerge(target: any, ...sources: any[]): any {\n\tif (!sources.length) {\n\t\treturn target; \n\t}\n\tconst source = sources.shift();\n\n\tif (isObject(target) && isObject(source)) {\n\t\tfor (const key in source) {\n\t\t\tif (noCopy(key, source[key])) {\n\t\t\t\ttarget[key] = source[key];\n\t\t\t} else if (isObject(source[key])) {\n\t\t\t\tif (!target[key]) {\n\t\t\t\t\tObject.assign(target, { [key]: {} }); \n\t\t\t\t}\n\t\t\t\tdeepMerge(target[key], source[key] as any);\n\t\t\t} else {\n\t\t\t\tObject.assign(target, { [key]: source[key] as any });\n\t\t\t}\n\t\t}\n\t}\n\t// @ts-ignore\n\treturn deepMerge(target, ...sources);\n}\n\n/**\n * Returns true if the two arrays have the same value for each of the elements\n */\nexport function deepEquals(arrayA: number[] | string[], arrayB: number[] | string[]): boolean {\n\treturn arrayA.length === arrayB.length && arrayA.every((element, index) => arrayB[index] === element);\n}\n\n/**\n * Convert an args array into an object.\n */\nexport function optionsFromArguments<T extends object>(\n\tdefaults: T,\n\targsArray: IArguments,\n\tkeys: string[] = [],\n\tobjKey?: string,\n): T {\n\tconst opts: any = {};\n\tconst args = Array.from(argsArray);\n\t// if the first argument is an object and has an object key\n\tif (isObject(args[0]) && objKey && !Reflect.has(args[0], objKey)) {\n\t\t// if it's not part of the defaults\n\t\tconst partOfDefaults = Object.keys(args[0]).some(key => Reflect.has(defaults, key));\n\t\tif (!partOfDefaults) {\n\t\t\t// merge that key\n\t\t\tdeepMerge(opts, { [objKey]: args[0] });\n\t\t\t// remove the obj key from the keys\n\t\t\tkeys.splice(keys.indexOf(objKey), 1);\n\t\t\t// shift the first argument off\n\t\t\targs.shift();\n\t\t}\n\t}\n\tif (args.length === 1 && isObject(args[0])) {\n\t\tdeepMerge(opts, args[0]);\n\t} else {\n\t\tfor (let i = 0; i < keys.length; i++) {\n\t\t\tif (isDefined(args[i])) {\n\t\t\t\topts[keys[i]] = args[i];\n\t\t\t}\n\t\t}\n\t}\n\treturn deepMerge(defaults, opts);\n}\n\n/**\n * Return this instances default values by calling Constructor.getDefaults()\n */\nexport function getDefaultsFromInstance<T>(instance: T): BaseToneOptions {\n\ttype ToneClass = {\n\t\tconstructor: ToneClass;\n\t\tgetDefaults: () => BaseToneOptions;\n\t} & T;\n\n\treturn (instance as ToneClass).constructor.getDefaults();\n}\n\n/**\n * Returns the fallback if the given object is undefined.\n * Take an array of arguments and return a formatted options object.\n */\nexport function defaultArg<T>(given: T, fallback: T): T {\n\tif (isUndef(given)) {\n\t\treturn fallback;\n\t} else {\n\t\treturn given;\n\t}\n}\n\n/**\n * Remove all of the properties belonging to omit from obj.\n */\nexport function omitFromObject<T extends object, O extends string[]>(obj: T, omit: O): Omit<T, keyof O> {\n\tomit.forEach(prop => {\n\t\tif (Reflect.has(obj, prop)) {\n\t\t\tdelete obj[prop];\n\t\t}\n\t});\n\treturn obj;\n}\n","/**\n * Tone.js\n * @author Yotam Mann\n * @license http://opensource.org/licenses/MIT MIT License\n * @copyright 2014-2019 Yotam Mann\n */\nimport { version } from \"../version\";\nimport { theWindow } from \"./context/AudioContext\";\nimport { assert, log } from \"./util/Debug\";\n\n//-------------------------------------\n// \tTONE\n//-------------------------------------\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface BaseToneOptions {}\n\n/**\n * @class  Tone is the base class of all other classes.\n * @constructor\n */\nexport abstract class Tone {\n\n\t/**\n\t * The version number semver\n\t */\n\tstatic version: string = version;\n\n\t/**\n\t * The name of the class\n\t */\n\tprotected abstract name: string;\n\n\t/**\n\t * Returns all of the default options belonging to the class.\n\t */\n\tstatic getDefaults(): BaseToneOptions {\n\t\treturn {};\n\t}\n\n\t//-------------------------------------\n\t// \tDEBUGGING\n\t//-------------------------------------\n\n\t/**\n\t * Set this debug flag to log all events that happen in this class.\n\t */\n\tdebug = false;\n\n\t/**\n\t * Prints the outputs to the console log for debugging purposes.\n\t * Prints the contents only if either the object has a property\n\t * called `debug` set to true, or a variable called TONE_DEBUG_CLASS\n\t * is set to the name of the class.\n\t * @example\n\t * import { Oscillator } from \"tone\";\n\t * const osc = new Oscillator();\n\t * // prints all logs originating from this oscillator\n\t * osc.debug = true;\n\t * // calls to start/stop will print in the console\n\t * osc.start();\n\t */\n\tprotected log(...args: any[]): void {\n\t\t// if the object is either set to debug = true\n\t\t// or if there is a string on the Tone.global.with the class name\n\t\tif (this.debug || (theWindow && this.toString() === theWindow.TONE_DEBUG_CLASS)) {\n\t\t\tlog(this, ...args);\n\t\t}\n\t}\n\n\t/**\n\t * Assert that the statement is true, otherwise invoke the error.\n\t * @param statement\n\t * @param error The message which is passed into an Error\n\t */\n\tprotected assert(statement: boolean, error: string): void {\n\t\tassert(statement, error);\n\t}\n\n\t//-------------------------------------\n\t// \tDISPOSING\n\t//-------------------------------------\n\n\t/**\n\t * Indicates if the instance was disposed\n\t */\n\tprivate _wasDisposed = false;\n\n\t/**\n\t * disconnect and dispose.\n\t */\n\tdispose(): this {\n\t\tthis._wasDisposed = true;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Indicates if the instance was disposed. 'Disposing' an\n\t * instance means that all of the Web Audio nodes that were\n\t * created for the instance are disconnected and freed for garbage collection.\n\t */\n\tget disposed(): boolean {\n\t\treturn this._wasDisposed;\n\t}\n\n\t/**\n\t * Convert the class to a string\n\t * @example\n\t * import { Oscillator } from \"tone\";\n\t * const osc = new Oscillator();\n\t * console.log(osc.toString());\n\t */\n\ttoString(): string {\n\t\treturn this.name;\n\t}\n}\n","/**\n * The threshold for correctness for operators. Less than one sample even \n * at very high sampling rates (e.g. `1e-6 < 1 / 192000`).\n */\nconst EPSILON = 1e-6;\n\n/**\n * Test if A is greater than B\n */\nexport function GT(a: number, b: number): boolean {\n\treturn a > b + EPSILON;\n}\n\n/**\n * Test if A is greater than or equal to B\n */\nexport function GTE(a: number, b: number): boolean {\n\treturn GT(a, b) || EQ(a, b);\n}\n\n/**\n * Test if A is less than B\n */\nexport function LT(a: number, b: number): boolean {\n\treturn a + EPSILON < b;\n}\n\n/**\n * Test if A is less than B\n */\nexport function EQ(a: number, b: number): boolean {\n\treturn Math.abs(a - b) < EPSILON;\n}\n","import { Tone } from \"../Tone\";\nimport { Seconds } from \"../type/Units\";\nimport { optionsFromArguments } from \"./Defaults\";\nimport { EQ, GT, GTE, LT } from \"./Math\";\n\ntype TimelineSearchParam = \"ticks\" | \"time\";\n\n/**\n * The options object for Timeline\n */\ninterface TimelineOptions {\n\tmemory: number;\n\tincreasing: boolean;\n}\n\n/**\n * An event must have a time number\n */\nexport interface TimelineEvent {\n\ttime: number;\n}\n\n/**\n * A Timeline class for scheduling and maintaining state\n * along a timeline. All events must have a \"time\" property.\n * Internally, events are stored in time order for fast\n * retrieval.\n */\nexport class Timeline<GenericEvent extends TimelineEvent> extends Tone {\n\n\treadonly name: string = \"Timeline\";\n\n\t/**\n\t * The memory of the timeline, i.e.\n\t * how many events in the past it will retain\n\t */\n\tmemory: number;\n\n\t/**\n\t * The array of scheduled timeline events\n\t */\n\tprotected _timeline: GenericEvent[] = [];\n\n\t/**\n\t * If the time value must always be greater than or equal to the last \n\t * element on the list. \n\t */\n\tincreasing: boolean;\n\n\t/**\n\t * @param memory The number of previous events that are retained.\n\t */\n\tconstructor(memory?: number);\n\tconstructor(options?: Partial<TimelineOptions>);\n\tconstructor() {\n\t\tsuper();\n\t\tconst options = optionsFromArguments(Timeline.getDefaults(), arguments, [\"memory\"]);\n\n\t\tthis.memory = options.memory;\n\t\tthis.increasing = options.increasing;\n\t}\n\n\tstatic getDefaults(): TimelineOptions {\n\t\treturn {\n\t\t\tmemory: Infinity,\n\t\t\tincreasing: false,\n\t\t};\n\t}\n\n\t/**\n\t * The number of items in the timeline.\n\t */\n\tget length(): number {\n\t\treturn this._timeline.length;\n\t}\n\n\t/**\n\t * Insert an event object onto the timeline. Events must have a \"time\" attribute.\n\t * @param event  The event object to insert into the timeline.\n\t */\n\tadd(event: GenericEvent): this {\n\t\t// the event needs to have a time attribute\n\t\tthis.assert(Reflect.has(event, \"time\"), \"Timeline: events must have a time attribute\");\n\t\tevent.time = event.time.valueOf();\n\t\tif (this.increasing && this.length) {\n\t\t\tconst lastValue = this._timeline[this.length - 1] as GenericEvent;\n\t\t\tthis.assert(GTE(event.time, lastValue.time), \"The time must be greater than or equal to the last scheduled time\");\n\t\t\tthis._timeline.push(event);\n\t\t} else {\n\t\t\tconst index = this._search(event.time);\n\t\t\tthis._timeline.splice(index + 1, 0, event);\n\t\t}\n\t\t// if the length is more than the memory, remove the previous ones\n\t\tif (this.length > this.memory) {\n\t\t\tconst diff = this.length - this.memory;\n\t\t\tthis._timeline.splice(0, diff);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Remove an event from the timeline.\n\t * @param  {Object}  event  The event object to remove from the list.\n\t * @returns {Timeline} this\n\t */\n\tremove(event: GenericEvent): this {\n\t\tconst index = this._timeline.indexOf(event);\n\t\tif (index !== -1) {\n\t\t\tthis._timeline.splice(index, 1);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the nearest event whose time is less than or equal to the given time.\n\t * @param  time  The time to query.\n\t */\n\tget(time: number, param: TimelineSearchParam = \"time\"): GenericEvent | null {\n\t\tconst index = this._search(time, param);\n\t\tif (index !== -1) {\n\t\t\treturn this._timeline[index];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * Return the first event in the timeline without removing it\n\t * @returns {Object} The first event object\n\t */\n\tpeek(): GenericEvent | undefined {\n\t\treturn this._timeline[0];\n\t}\n\n\t/**\n\t * Return the first event in the timeline and remove it\n\t */\n\tshift(): GenericEvent | undefined {\n\t\treturn this._timeline.shift();\n\t}\n\n\t/**\n\t * Get the event which is scheduled after the given time.\n\t * @param  time  The time to query.\n\t */\n\tgetAfter(time: number, param: TimelineSearchParam = \"time\"): GenericEvent | null {\n\t\tconst index = this._search(time, param);\n\t\tif (index + 1 < this._timeline.length) {\n\t\t\treturn this._timeline[index + 1];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * Get the event before the event at the given time.\n\t * @param  time  The time to query.\n\t */\n\tgetBefore(time: number): GenericEvent | null {\n\t\tconst len = this._timeline.length;\n\t\t// if it's after the last item, return the last item\n\t\tif (len > 0 && this._timeline[len - 1].time < time) {\n\t\t\treturn this._timeline[len - 1];\n\t\t}\n\t\tconst index = this._search(time);\n\t\tif (index - 1 >= 0) {\n\t\t\treturn this._timeline[index - 1];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * Cancel events at and after the given time\n\t * @param  after  The time to query.\n\t */\n\tcancel(after: number): this {\n\t\tif (this._timeline.length > 1) {\n\t\t\tlet index = this._search(after);\n\t\t\tif (index >= 0) {\n\t\t\t\tif (EQ(this._timeline[index].time, after)) {\n\t\t\t\t\t// get the first item with that time\n\t\t\t\t\tfor (let i = index; i >= 0; i--) {\n\t\t\t\t\t\tif (EQ(this._timeline[i].time, after)) {\n\t\t\t\t\t\t\tindex = i;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis._timeline = this._timeline.slice(0, index);\n\t\t\t\t} else {\n\t\t\t\t\tthis._timeline = this._timeline.slice(0, index + 1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._timeline = [];\n\t\t\t}\n\t\t} else if (this._timeline.length === 1) {\n\t\t\t// the first item's time\n\t\t\tif (GTE(this._timeline[0].time, after)) {\n\t\t\t\tthis._timeline = [];\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Cancel events before or equal to the given time.\n\t * @param  time  The time to cancel before.\n\t */\n\tcancelBefore(time: number): this {\n\t\tconst index = this._search(time);\n\t\tif (index >= 0) {\n\t\t\tthis._timeline = this._timeline.slice(index + 1);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the previous event if there is one. null otherwise\n\t * @param  event The event to find the previous one of\n\t * @return The event right before the given event\n\t */\n\tpreviousEvent(event: GenericEvent): GenericEvent | null {\n\t\tconst index = this._timeline.indexOf(event);\n\t\tif (index > 0) {\n\t\t\treturn this._timeline[index - 1];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * Does a binary search on the timeline array and returns the\n\t * nearest event index whose time is after or equal to the given time.\n\t * If a time is searched before the first index in the timeline, -1 is returned.\n\t * If the time is after the end, the index of the last item is returned.\n\t * @param  time\n\t */\n\tprotected _search(time: number, param: TimelineSearchParam = \"time\"): number {\n\t\tif (this._timeline.length === 0) {\n\t\t\treturn -1;\n\t\t}\n\t\tlet beginning = 0;\n\t\tconst len = this._timeline.length;\n\t\tlet end = len;\n\t\tif (len > 0 && this._timeline[len - 1][param] <= time) {\n\t\t\treturn len - 1;\n\t\t}\n\t\twhile (beginning < end) {\n\t\t\t// calculate the midpoint for roughly equal partition\n\t\t\tlet midPoint = Math.floor(beginning + (end - beginning) / 2);\n\t\t\tconst event = this._timeline[midPoint];\n\t\t\tconst nextEvent = this._timeline[midPoint + 1];\n\t\t\tif (EQ(event[param], time)) {\n\t\t\t\t// choose the last one that has the same time\n\t\t\t\tfor (let i = midPoint; i < this._timeline.length; i++) {\n\t\t\t\t\tconst testEvent = this._timeline[i];\n\t\t\t\t\tif (EQ(testEvent[param], time)) {\n\t\t\t\t\t\tmidPoint = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn midPoint;\n\t\t\t} else if (LT(event[param], time) && GT(nextEvent[param], time)) {\n\t\t\t\treturn midPoint;\n\t\t\t} else if (GT(event[param], time)) {\n\t\t\t\t// search lower\n\t\t\t\tend = midPoint;\n\t\t\t} else {\n\t\t\t\t// search upper\n\t\t\t\tbeginning = midPoint + 1;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\n\t/**\n\t * Internal iterator. Applies extra safety checks for\n\t * removing items from the array.\n\t */\n\tprivate _iterate(\n\t\tcallback: (event: GenericEvent) => void,\n\t\tlowerBound = 0, upperBound = this._timeline.length - 1,\n\t): void {\n\t\tthis._timeline.slice(lowerBound, upperBound + 1).forEach(callback);\n\t}\n\n\t/**\n\t * Iterate over everything in the array\n\t * @param  callback The callback to invoke with every item\n\t */\n\tforEach(callback: (event: GenericEvent) => void): this {\n\t\tthis._iterate(callback);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Iterate over everything in the array at or before the given time.\n\t * @param  time The time to check if items are before\n\t * @param  callback The callback to invoke with every item\n\t */\n\tforEachBefore(time: Seconds, callback: (event: GenericEvent) => void): this {\n\t\t// iterate over the items in reverse so that removing an item doesn't break things\n\t\tconst upperBound = this._search(time);\n\t\tif (upperBound !== -1) {\n\t\t\tthis._iterate(callback, 0, upperBound);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Iterate over everything in the array after the given time.\n\t * @param  time The time to check if items are before\n\t * @param  callback The callback to invoke with every item\n\t */\n\tforEachAfter(time: Seconds, callback: (event: GenericEvent) => void): this {\n\t\t// iterate over the items in reverse so that removing an item doesn't break things\n\t\tconst lowerBound = this._search(time);\n\t\tthis._iterate(callback, lowerBound + 1);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Iterate over everything in the array between the startTime and endTime.\n\t * The timerange is inclusive of the startTime, but exclusive of the endTime.\n\t * range = [startTime, endTime).\n\t * @param  startTime The time to check if items are before\n\t * @param  endTime The end of the test interval.\n\t * @param  callback The callback to invoke with every item\n\t */\n\tforEachBetween(startTime: number, endTime: number, callback: (event: GenericEvent) => void): this {\n\t\tlet lowerBound = this._search(startTime);\n\t\tlet upperBound = this._search(endTime);\n\t\tif (lowerBound !== -1 && upperBound !== -1) {\n\t\t\tif (this._timeline[lowerBound].time !== startTime) {\n\t\t\t\tlowerBound += 1;\n\t\t\t}\n\t\t\t// exclusive of the end time\n\t\t\tif (this._timeline[upperBound].time === endTime) {\n\t\t\t\tupperBound -= 1;\n\t\t\t}\n\t\t\tthis._iterate(callback, lowerBound, upperBound);\n\t\t} else if (lowerBound === -1) {\n\t\t\tthis._iterate(callback, 0, upperBound);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Iterate over everything in the array at or after the given time. Similar to\n\t * forEachAfter, but includes the item(s) at the given time.\n\t * @param  time The time to check if items are before\n\t * @param  callback The callback to invoke with every item\n\t */\n\tforEachFrom(time: number, callback: (event: GenericEvent) => void): this {\n\t\t// iterate over the items in reverse so that removing an item doesn't break things\n\t\tlet lowerBound = this._search(time);\n\t\t// work backwards until the event time is less than time\n\t\twhile (lowerBound >= 0 && this._timeline[lowerBound].time >= time) {\n\t\t\tlowerBound--;\n\t\t}\n\t\tthis._iterate(callback, lowerBound + 1);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Iterate over everything in the array at the given time\n\t * @param  time The time to check if items are before\n\t * @param  callback The callback to invoke with every item\n\t */\n\tforEachAtTime(time: number, callback: (event: GenericEvent) => void): this {\n\t\t// iterate over the items in reverse so that removing an item doesn't break things\n\t\tconst upperBound = this._search(time);\n\t\tif (upperBound !== -1) {\n\t\t\tthis._iterate(event => {\n\t\t\t\tif (event.time === time) {\n\t\t\t\t\tcallback(event);\n\t\t\t\t}\n\t\t\t}, 0, upperBound);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._timeline = [];\n\t\treturn this;\n\t}\n}\n","//-------------------------------------\n// INITIALIZING NEW CONTEXT\n//-------------------------------------\n\ntype Context = import(\"./Context\").Context;\n\n/**\n * Array of callbacks to invoke when a new context is created\n */\nconst notifyNewContext: Array<(ctx: Context) => void> = [];\n\n/**\n * Used internally to setup a new Context\n */\nexport function onContextInit(cb: (ctx: Context) => void): void {\n\tnotifyNewContext.push(cb);\n}\n\n/**\n * Invoke any classes which need to also be initialized when a new context is created.\n */\nexport function initializeContext(ctx: Context): void {\n\t// add any additional modules\n\tnotifyNewContext.forEach(cb => cb(ctx));\n}\n\n/**\n * Array of callbacks to invoke when a new context is created\n */\nconst notifyCloseContext: Array<(ctx: Context) => void> = [];\n\n/**\n * Used internally to tear down a Context\n */\nexport function onContextClose(cb: (ctx: Context) => void): void {\n\tnotifyCloseContext.push(cb);\n}\n\nexport function closeContext(ctx: Context): void {\n\t// add any additional modules\n\tnotifyCloseContext.forEach(cb => cb(ctx));\n}\n","import { Tone } from \"../Tone\";\nimport { isUndef } from \"./TypeCheck\";\n\nexport interface EmitterEventObject {\n\t[event: string]: Array<(...args: any[]) => void>;\n}\n\n/**\n * Emitter gives classes which extend it\n * the ability to listen for and emit events.\n * Inspiration and reference from Jerome Etienne's [MicroEvent](https://github.com/jeromeetienne/microevent.js).\n * MIT (c) 2011 Jerome Etienne.\n */\nexport class Emitter<EventType extends string = string> extends Tone {\n\n\treadonly name: string = \"Emitter\";\n\n\t/**\n\t * Private container for the events\n\t */\n\tprivate _events?: EmitterEventObject;\n\n\t/**\n\t * Bind a callback to a specific event.\n\t * @param  event     The name of the event to listen for.\n\t * @param  callback  The callback to invoke when the event is emitted\n\t */\n\ton(event: EventType, callback: (...args: any[]) => void): this {\n\t\t// split the event\n\t\tconst events = event.split(/\\W+/);\n\t\tevents.forEach(eventName => {\n\t\t\tif (isUndef(this._events)) {\n\t\t\t\tthis._events = {};\n\t\t\t}\n\t\t\tif (!this._events.hasOwnProperty(eventName)) {\n\t\t\t\tthis._events[eventName] = [];\n\t\t\t}\n\t\t\tthis._events[eventName].push(callback);\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Bind a callback which is only invoked once\n\t * @param  event     The name of the event to listen for.\n\t * @param  callback  The callback to invoke when the event is emitted\n\t */\n\tonce(event: EventType, callback: (...args: any[]) => void): this {\n\t\tconst boundCallback = (...args: any[]) => {\n\t\t\t// invoke the callback\n\t\t\tcallback(...args);\n\t\t\t// remove the event\n\t\t\tthis.off(event, boundCallback);\n\t\t};\n\t\tthis.on(event, boundCallback);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Remove the event listener.\n\t * @param  event     The event to stop listening to.\n\t * @param  callback  The callback which was bound to the event with Emitter.on.\n\t *                   If no callback is given, all callbacks events are removed.\n\t */\n\toff(event: EventType, callback?: (...args: any[]) => void): this {\n\t\tconst events = event.split(/\\W+/);\n\t\tevents.forEach(eventName => {\n\t\t\tif (isUndef(this._events)) {\n\t\t\t\tthis._events = {};\n\t\t\t}\n\t\t\tif (this._events.hasOwnProperty(event)) {\n\t\t\t\tif (isUndef(callback)) {\n\t\t\t\t\tthis._events[event] = [];\n\t\t\t\t} else {\n\t\t\t\t\tconst eventList = this._events[event];\n\t\t\t\t\tfor (let i = 0; i < eventList.length; i++) {\n\t\t\t\t\t\tif (eventList[i] === callback) {\n\t\t\t\t\t\t\teventList.splice(i, 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Invoke all of the callbacks bound to the event\n\t * with any arguments passed in.\n\t * @param  event  The name of the event.\n\t * @param args The arguments to pass to the functions listening.\n\t */\n\temit(event, ...args: any[]): this {\n\t\tif (this._events) {\n\t\t\tif (this._events.hasOwnProperty(event)) {\n\t\t\t\tconst eventList = this._events[event].slice(0);\n\t\t\t\tfor (let i = 0, len = eventList.length; i < len; i++) {\n\t\t\t\t\teventList[i].apply(this, args);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add Emitter functions (on/off/emit) to the object\n\t */\n\tstatic mixin(constr: any): void {\n\t\t// instance._events = {};\n\t\t[\"on\", \"once\", \"off\", \"emit\"].forEach(name => {\n\t\t\tconst property = Object.getOwnPropertyDescriptor(Emitter.prototype, name) as PropertyDescriptor;\n\t\t\tObject.defineProperty(constr.prototype, name, property);\n\t\t});\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._events = undefined;\n\t\treturn this;\n\t}\n}\n","import { Seconds } from \"../type/Units\";\nimport { Emitter } from \"../util/Emitter\";\nimport { AnyAudioContext } from \"./AudioContext\";\n\ntype Draw = import(\"../util/Draw\").Draw;\ntype Destination = import(\"./Destination\").Destination;\ntype Transport = import(\"../clock/Transport\").Transport;\ntype BaseAudioContextSubset = import(\"./Context\").BaseAudioContextSubset;\n\nexport type ContextLatencyHint = AudioContextLatencyCategory | \"fastest\";\n\nexport abstract class BaseContext extends Emitter<\"statechange\" | \"tick\"> implements BaseAudioContextSubset {\n\n\t//---------------------------\n\t// BASE AUDIO CONTEXT METHODS\n\t//---------------------------\n\tabstract createAnalyser(): AnalyserNode\n\n\tabstract createOscillator(): OscillatorNode\n\n\tabstract createBufferSource(): AudioBufferSourceNode\n\n\tabstract createBiquadFilter(): BiquadFilterNode\n\n\tabstract createBuffer(_numberOfChannels: number, _length: number, _sampleRate: number): AudioBuffer\n\n\tabstract createChannelMerger(_numberOfInputs?: number | undefined): ChannelMergerNode\n\n\tabstract createChannelSplitter(_numberOfOutputs?: number | undefined): ChannelSplitterNode\n\n\tabstract createConstantSource(): ConstantSourceNode\n\n\tabstract createConvolver(): ConvolverNode\n\n\tabstract createDelay(_maxDelayTime?: number | undefined): DelayNode\n\n\tabstract createDynamicsCompressor(): DynamicsCompressorNode\n\n\tabstract createGain(): GainNode\n\n\tabstract createIIRFilter(_feedForward: number[] | Float32Array, _feedback: number[] | Float32Array): IIRFilterNode\n\n\tabstract createPanner(): PannerNode\n\n\tabstract createPeriodicWave(\n\t\t_real: number[] | Float32Array,\n\t\t_imag: number[] | Float32Array,\n\t\t_constraints?: PeriodicWaveConstraints | undefined,\n\t): PeriodicWave\n\n\tabstract createStereoPanner(): StereoPannerNode\n\n\tabstract createWaveShaper(): WaveShaperNode\n\n\tabstract createMediaStreamSource(_stream: MediaStream): MediaStreamAudioSourceNode\n\n\tabstract decodeAudioData(_audioData: ArrayBuffer): Promise<AudioBuffer>\n\n\t//---------------------------\n\t// TONE AUDIO CONTEXT METHODS\n\t//---------------------------\n\n\tabstract createAudioWorkletNode(\n\t\t_name: string, \n\t\t_options?: Partial<AudioWorkletNodeOptions>\n\t): AudioWorkletNode\n\n\tabstract get rawContext(): AnyAudioContext\n\n\tabstract async addAudioWorkletModule(_url: string, _name: string): Promise<void>\n\n\tabstract lookAhead: number;\n\n\tabstract latencyHint: ContextLatencyHint | Seconds;\n\n\tabstract resume(): Promise<void>\n\n\tabstract setTimeout(_fn: (...args: any[]) => void, _timeout: Seconds): number\n\n\tabstract clearTimeout(_id: number): this\n\n\tabstract setInterval(_fn: (...args: any[]) => void, _interval: Seconds): number\n\n\tabstract clearInterval(_id: number): this\n\n\tabstract getConstant(_val: number): AudioBufferSourceNode\n\n\tabstract get currentTime(): Seconds\n\n\tabstract get state(): AudioContextState\n\n\tabstract get sampleRate(): number\n\n\tabstract get listener(): AudioListener\n\n\tabstract get transport(): Transport\n\n\tabstract get draw(): Draw\n\n\tabstract get destination(): Destination\n\n\tabstract now(): Seconds\n\n\tabstract immediate(): Seconds\n\n\treadonly isOffline: boolean = false;\n}\n","import { Ticker, TickerClockSource } from \"../clock/Ticker\";\nimport { Seconds } from \"../type/Units\";\nimport { isAudioContext } from \"../util/AdvancedTypeCheck\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Omit } from \"../util/Interface\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isDefined, isString } from \"../util/TypeCheck\";\nimport { AnyAudioContext, createAudioContext, createAudioWorkletNode } from \"./AudioContext\";\nimport { closeContext, initializeContext } from \"./ContextInitialization\";\nimport { BaseContext, ContextLatencyHint } from \"./BaseContext\";\n\ntype Transport = import(\"../clock/Transport\").Transport;\ntype Destination = import(\"./Destination\").Destination;\ntype Draw = import(\"../util/Draw\").Draw;\n\n// these are either not used in Tone.js or deprecated and not implemented.\nexport type ExcludedFromBaseAudioContext = \"onstatechange\" | \"addEventListener\" |\n\"removeEventListener\" | \"listener\" | \"dispatchEvent\" | \"audioWorklet\" | \"destination\" | \"createScriptProcessor\";\n// \"createMediaStreamSource\" | \"createMediaElementSource\" | \"createMediaStreamTrackSource\" |\n// \"baseLatency\" | \"suspend\" |\n\n// the subset of the BaseAudioContext which Tone.Context implements.\nexport type BaseAudioContextSubset = Omit<BaseAudioContext, ExcludedFromBaseAudioContext>;\n\nexport interface ContextOptions {\n\tclockSource: TickerClockSource;\n\tlatencyHint: ContextLatencyHint;\n\tlookAhead: Seconds;\n\tupdateInterval: Seconds;\n\tcontext: AnyAudioContext;\n}\n\nexport interface ContextTimeoutEvent {\n\tcallback: (...args: any[]) => void;\n\tid: number;\n\ttime: Seconds;\n}\n\n/**\n * Wrapper around the native AudioContext.\n * @category Core\n */\nexport class Context extends BaseContext {\n\n\treadonly name: string = \"Context\";\n\n\t/**\n\t * The amount of time into the future events are scheduled. Giving Web Audio\n\t * a short amount of time into the future to schedule events can reduce clicks and\n\t * improve performance. This value can be set to 0 to get the lowest latency.\n\t */\n\tlookAhead: Seconds;\n\n\t/**\n\t * private reference to the BaseAudioContext\n\t */\n\tprotected readonly _context: AnyAudioContext;\n\n\t/**\n\t * A reliable callback method\n\t */\n\tprivate readonly _ticker: Ticker;\n\n\t/**\n\t * The default latency hint\n\t */\n\tprivate _latencyHint: ContextLatencyHint | Seconds;\n\n\t/**\n\t * An object containing all of the constants AudioBufferSourceNodes\n\t */\n\tprivate _constants = new Map<number, AudioBufferSourceNode>();\n\n\t/**\n\t * All of the setTimeout events.\n\t */\n\tprivate _timeouts: Timeline<ContextTimeoutEvent> = new Timeline();\n\n\t/**\n\t * The timeout id counter\n\t */\n\tprivate _timeoutIds = 0;\n\n\t/**\n\t * A reference the Transport singleton belonging to this context\n\t */\n\tprivate _transport!: Transport;\n\t\n\t/**\n\t * A reference the Destination singleton belonging to this context\n\t */\n\tprivate _destination!: Destination;\n\n\t/**\n\t * A reference the Transport singleton belonging to this context\n\t */\n\tprivate _draw!: Draw;\n\n\t/**\n\t * Private indicator if the context has been initialized\n\t */\n\tprivate _initialized = false;\n\n\t/**\n\t * Indicates if the context is an OfflineAudioContext or an AudioContext\n\t */\n\treadonly isOffline: boolean = false;\n\n\tconstructor(context?: AnyAudioContext);\n\tconstructor(options?: Partial<ContextOptions>);\n\tconstructor() {\n\t\tsuper();\n\t\tconst options = optionsFromArguments(Context.getDefaults(), arguments, [\"context\"]);\n\n\t\tif (options.context) {\n\t\t\tthis._context = options.context;\n\t\t} else {\n\t\t\tthis._context = createAudioContext();\n\t\t}\n\t\tthis._latencyHint = options.latencyHint;\n\t\tthis.lookAhead = options.lookAhead;\n\n\t\tthis._ticker = new Ticker(this.emit.bind(this, \"tick\"), options.clockSource, options.updateInterval);\n\t\tthis.on(\"tick\", this._timeoutLoop.bind(this));\n\n\t\t// fwd events from the context\n\t\tthis._context.onstatechange = () => {\n\t\t\tthis.emit(\"statechange\", this.state);\n\t\t};\n\t}\n\n\tstatic getDefaults(): ContextOptions {\n\t\treturn {\n\t\t\tclockSource: \"worker\",\n\t\t\tlatencyHint: \"interactive\",\n\t\t\tlookAhead: 0.1,\n\t\t\tupdateInterval: 0.05,\n\t\t} as ContextOptions;\n\t}\n\n\t/**\n\t * Finish setting up the context. **You usually do not need to do this manually.**\n\t */\n\tprivate initialize(): this {\n\t\tif (!this._initialized) {\n\t\t\t// add any additional modules\n\t\t\tinitializeContext(this);\n\t\t\tthis._initialized = true;\n\t\t}\n\t\treturn this;\n\t}\n\n\t//---------------------------\n\t// BASE AUDIO CONTEXT METHODS\n\t//---------------------------\n\n\tcreateAnalyser(): AnalyserNode {\n\t\treturn this._context.createAnalyser();\n\t}\n\tcreateOscillator(): OscillatorNode {\n\t\treturn this._context.createOscillator();\n\t}\n\tcreateBufferSource(): AudioBufferSourceNode {\n\t\treturn this._context.createBufferSource();\n\t}\n\tcreateBiquadFilter(): BiquadFilterNode {\n\t\treturn this._context.createBiquadFilter();\n\t}\n\tcreateBuffer(numberOfChannels: number, length: number, sampleRate: number): AudioBuffer {\n\t\treturn this._context.createBuffer(numberOfChannels, length, sampleRate);\n\t}\n\tcreateChannelMerger(numberOfInputs?: number | undefined): ChannelMergerNode {\n\t\treturn this._context.createChannelMerger(numberOfInputs);\n\t}\n\tcreateChannelSplitter(numberOfOutputs?: number | undefined): ChannelSplitterNode {\n\t\treturn this._context.createChannelSplitter(numberOfOutputs);\n\t}\n\tcreateConstantSource(): ConstantSourceNode {\n\t\treturn this._context.createConstantSource();\n\t}\n\tcreateConvolver(): ConvolverNode {\n\t\treturn this._context.createConvolver();\n\t}\n\tcreateDelay(maxDelayTime?: number | undefined): DelayNode {\n\t\treturn this._context.createDelay(maxDelayTime);\n\t}\n\tcreateDynamicsCompressor(): DynamicsCompressorNode {\n\t\treturn this._context.createDynamicsCompressor();\n\t}\n\tcreateGain(): GainNode {\n\t\treturn this._context.createGain();\n\t}\n\tcreateIIRFilter(feedForward: number[] | Float32Array, feedback: number[] | Float32Array): IIRFilterNode {\n\t\t// @ts-ignore\n\t\treturn this._context.createIIRFilter(feedForward, feedback);\n\t}\n\tcreatePanner(): PannerNode {\n\t\treturn this._context.createPanner();\n\t}\n\tcreatePeriodicWave(\n\t\treal: number[] | Float32Array,\n\t\timag: number[] | Float32Array,\n\t\tconstraints?: PeriodicWaveConstraints | undefined,\n\t): PeriodicWave {\n\t\treturn this._context.createPeriodicWave(real, imag, constraints);\n\t}\n\tcreateStereoPanner(): StereoPannerNode {\n\t\treturn this._context.createStereoPanner();\n\t}\n\tcreateWaveShaper(): WaveShaperNode {\n\t\treturn this._context.createWaveShaper();\n\t}\n\tcreateMediaStreamSource(stream: MediaStream): MediaStreamAudioSourceNode {\n\t\tif (isAudioContext(this._context)) {\n\t\t\treturn this._context.createMediaStreamSource(stream);\n\t\t} else {\n\t\t\tthrow new Error(\"Only available on online audio context\");\n\t\t}\n\t}\n\tdecodeAudioData(audioData: ArrayBuffer): Promise<AudioBuffer> {\n\t\treturn this._context.decodeAudioData(audioData);\n\t}\n\n\t/**\n\t * The current time in seconds of the AudioContext.\n\t */\n\tget currentTime(): Seconds {\n\t\treturn this._context.currentTime;\n\t}\n\t/**\n\t * The current time in seconds of the AudioContext.\n\t */\n\tget state(): AudioContextState {\n\t\treturn this._context.state;\n\t}\n\t/**\n\t * The current time in seconds of the AudioContext.\n\t */\n\tget sampleRate(): number {\n\t\treturn this._context.sampleRate;\n\t}\n\t/**\n\t * The listener\n\t */\n\tget listener(): AudioListener {\n\t\treturn this._context.listener;\n\t}\n\n\t/**\n\t * There is only one Transport per Context. It is created on initialization.\n\t */\n\tget transport(): Transport {\n\t\tthis.initialize();\n\t\treturn this._transport;\n\t}\n\tset transport(t: Transport) {\n\t\tthis.assert(!this._initialized, \"The transport cannot be set after initialization.\");\n\t\tthis._transport = t;\n\t}\n\n\t/**\n\t * This is the Draw object for the context which is useful for synchronizing the draw frame with the Tone.js clock.\n\t */\n\tget draw(): Draw {\n\t\tthis.initialize();\n\t\treturn this._draw;\n\t}\n\tset draw(d) {\n\t\tthis.assert(!this._initialized, \"Draw cannot be set after initialization.\");\n\t\tthis._draw = d;\n\t}\n\n\t/**\n\t * A reference to the Context's destination node.\n\t */\n\tget destination(): Destination {\n\t\tthis.initialize();\n\t\treturn this._destination;\n\t}\n\tset destination(d: Destination) {\n\t\tthis.assert(!this._initialized, \"The destination cannot be set after initialization.\");\n\t\tthis._destination = d;\n\t}\n\n\t//--------------------------------------------\n\t// AUDIO WORKLET\n\t//--------------------------------------------\n\n\t/**\n\t * Maps a module name to promise of the addModule method\n\t */\n\tprivate _workletModules: Map<string, Promise<void>> = new Map()\n\n\t/**\n\t * Create an audio worklet node from a name and options. The module\n\t * must first be loaded using [[addAudioWorkletModule]]. \n\t */\n\tcreateAudioWorkletNode(\n\t\tname: string, \n\t\toptions?: Partial<AudioWorkletNodeOptions>\n\t): AudioWorkletNode {\n\t\treturn createAudioWorkletNode(this.rawContext, name, options);\n\t}\n\t\n\t/**\n\t * Add an AudioWorkletProcessor module\n\t * @param url The url of the module\n\t * @param name The name of the module\n\t */\n\tasync addAudioWorkletModule(url: string, name: string): Promise<void> {\n\t\tthis.assert(isDefined(this.rawContext.audioWorklet), \"AudioWorkletNode is only available in a secure context (https or localhost)\");\n\t\tif (!this._workletModules.has(name)) {\n\t\t\tthis._workletModules.set(name, this.rawContext.audioWorklet.addModule(url));\n\t\t}\n\t\tawait this._workletModules.get(name);\n\t}\n\n\t/**\n\t * Returns a promise which resolves when all of the worklets have been loaded on this context\n\t */\n\tprotected async workletsAreReady(): Promise<void> {\n\t\tconst promises: Promise<void>[] = [];\n\t\tthis._workletModules.forEach(promise => promises.push(promise));\n\t\tawait Promise.all(promises);\n\t}\n\n\t//---------------------------\n\t// TICKER\n\t//---------------------------\n\n\t/**\n\t * How often the interval callback is invoked.\n\t * This number corresponds to how responsive the scheduling\n\t * can be. context.updateInterval + context.lookAhead gives you the\n\t * total latency between scheduling an event and hearing it.\n\t */\n\tget updateInterval(): Seconds {\n\t\treturn this._ticker.updateInterval;\n\t}\n\tset updateInterval(interval: Seconds) {\n\t\tthis._ticker.updateInterval = interval;\n\t}\n\n\t/**\n\t * What the source of the clock is, either \"worker\" (default),\n\t * \"timeout\", or \"offline\" (none).\n\t */\n\tget clockSource(): TickerClockSource {\n\t\treturn this._ticker.type;\n\t}\n\tset clockSource(type: TickerClockSource) {\n\t\tthis._ticker.type = type;\n\t}\n\n\t/**\n\t * The type of playback, which affects tradeoffs between audio\n\t * output latency and responsiveness.\n\t * In addition to setting the value in seconds, the latencyHint also\n\t * accepts the strings \"interactive\" (prioritizes low latency),\n\t * \"playback\" (prioritizes sustained playback), \"balanced\" (balances\n\t * latency and performance), and \"fastest\" (lowest latency, might glitch more often).\n\t * @example\n\t * import * as Tone from \"tone\";\n\t * // set the latencyHint to prioritize smooth playback at the expensive of latency\n\t * Tone.context.latencyHint = \"playback\";\n\t */\n\tget latencyHint(): ContextLatencyHint | Seconds {\n\t\treturn this._latencyHint;\n\t}\n\tset latencyHint(hint: ContextLatencyHint | Seconds) {\n\t\tlet lookAheadValue = 0;\n\t\tthis._latencyHint = hint;\n\t\tif (isString(hint)) {\n\t\t\tswitch (hint) {\n\t\t\t\tcase \"interactive\":\n\t\t\t\t\tlookAheadValue = 0.1;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"playback\":\n\t\t\t\t\tlookAheadValue = 0.8;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"balanced\":\n\t\t\t\t\tlookAheadValue = 0.25;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"fastest\":\n\t\t\t\t\tlookAheadValue = 0.01;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tthis.lookAhead = lookAheadValue;\n\t\tthis.updateInterval = lookAheadValue / 2;\n\t}\n\n\t/**\n\t * The unwrapped AudioContext.\n\t */\n\tget rawContext(): AnyAudioContext {\n\t\treturn this._context;\n\t}\n\n\t/**\n\t * The current audio context time plus a short [[lookAhead]].\n\t */\n\tnow(): Seconds {\n\t\treturn this._context.currentTime + this.lookAhead;\n\t}\n\n\t/**\n\t * The current audio context time without the [[lookAhead]]. \n\t * In most cases it is better to use [[now]] instead of [[immediate]] since\n\t * with [[now]] the [[lookAhead]] is applied equally to _all_ components including internal components,\n\t * to making sure that everything is scheduled in sync. Mixing [[now]] and [[immediate]]\n\t * can cause some timing issues. If no lookAhead is desired, you can set the [[lookAhead]] to `0`.\n\t */\n\timmediate(): Seconds {\n\t\treturn this._context.currentTime;\n\t}\n\n\t/**\n\t * Starts the audio context from a suspended state. This is required\n\t * to initially start the AudioContext.\n\t */\n\tresume(): Promise<void> {\n\t\tif (this._context.state === \"suspended\" && isAudioContext(this._context)) {\n\t\t\treturn this._context.resume();\n\t\t} else {\n\t\t\treturn Promise.resolve();\n\t\t}\n\t}\n\n\t/**\n\t * Promise which is invoked when the context is running.\n\t * Tries to resume the context if it's not started.\n\t */\n\tasync close(): Promise<void> {\n\t\tif (isAudioContext(this._context)) {\n\t\t\tawait this._context.close();\n\t\t}\n\t\tif (this._initialized) {\n\t\t\tcloseContext(this);\n\t\t}\n\t}\n\n\t/**\n\t * Generate a looped buffer at some constant value.\n\t */\n\tgetConstant(val: number): AudioBufferSourceNode {\n\t\tif (this._constants.has(val)) {\n\t\t\treturn this._constants.get(val) as AudioBufferSourceNode;\n\t\t} else {\n\t\t\tconst buffer = this._context.createBuffer(1, 128, this._context.sampleRate);\n\t\t\tconst arr = buffer.getChannelData(0);\n\t\t\tfor (let i = 0; i < arr.length; i++) {\n\t\t\t\tarr[i] = val;\n\t\t\t}\n\t\t\tconst constant = this._context.createBufferSource();\n\t\t\tconstant.channelCount = 1;\n\t\t\tconstant.channelCountMode = \"explicit\";\n\t\t\tconstant.buffer = buffer;\n\t\t\tconstant.loop = true;\n\t\t\tconstant.start(0);\n\t\t\tthis._constants.set(val, constant);\n\t\t\treturn constant;\n\t\t}\n\t}\n\n\t/**\n\t * Clean up. Also closes the audio context.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._ticker.dispose();\n\t\tthis._timeouts.dispose();\n\t\tObject.keys(this._constants).map(val => this._constants[val].disconnect());\n\t\treturn this;\n\t}\n\n\t//---------------------------\n\t// TIMEOUTS\n\t//---------------------------\n\n\t/**\n\t * The private loop which keeps track of the context scheduled timeouts\n\t * Is invoked from the clock source\n\t */\n\tprivate _timeoutLoop(): void {\n\t\tconst now = this.now();\n\t\tlet firstEvent = this._timeouts.peek();\n\t\twhile (this._timeouts.length && firstEvent && firstEvent.time <= now) {\n\t\t\t// invoke the callback\n\t\t\tfirstEvent.callback();\n\t\t\t// shift the first event off\n\t\t\tthis._timeouts.shift();\n\t\t\t// get the next one\n\t\t\tfirstEvent = this._timeouts.peek();\n\t\t}\n\t}\n\n\t/**\n\t * A setTimeout which is guaranteed by the clock source.\n\t * Also runs in the offline context.\n\t * @param  fn       The callback to invoke\n\t * @param  timeout  The timeout in seconds\n\t * @returns ID to use when invoking Context.clearTimeout\n\t */\n\tsetTimeout(fn: (...args: any[]) => void, timeout: Seconds): number {\n\t\tthis._timeoutIds++;\n\t\tconst now = this.now();\n\t\tthis._timeouts.add({\n\t\t\tcallback: fn,\n\t\t\tid: this._timeoutIds,\n\t\t\ttime: now + timeout,\n\t\t});\n\t\treturn this._timeoutIds;\n\t}\n\n\t/**\n\t * Clears a previously scheduled timeout with Tone.context.setTimeout\n\t * @param  id  The ID returned from setTimeout\n\t */\n\tclearTimeout(id: number): this {\n\t\tthis._timeouts.forEach(event => {\n\t\t\tif (event.id === id) {\n\t\t\t\tthis._timeouts.remove(event);\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clear the function scheduled by [[setInterval]]\n\t */\n\tclearInterval(id: number): this {\n\t\treturn this.clearTimeout(id);\n\t}\n\n\t/**\n\t * Adds a repeating event to the context's callback clock\n\t */\n\tsetInterval(fn: (...args: any[]) => void, interval: Seconds): number {\n\t\tconst id = ++this._timeoutIds;\n\t\tconst intervalFn = () => {\n\t\t\tconst now = this.now();\n\t\t\tthis._timeouts.add({\n\t\t\t\tcallback: () => {\n\t\t\t\t\t// invoke the callback\n\t\t\t\t\tfn();\n\t\t\t\t\t// invoke the event to repeat it\n\t\t\t\t\tintervalFn();\n\t\t\t\t},\n\t\t\t\tid,\n\t\t\t\ttime: now + interval,\n\t\t\t});\n\t\t};\n\t\t// kick it off\n\t\tintervalFn();\n\t\treturn id;\n\t}\n}\n","import { BaseContext } from \"./BaseContext\";\nimport { Seconds } from \"../type/Units\";\nimport { AnyAudioContext } from \"./AudioContext\";\n\ntype Draw = import(\"../util/Draw\").Draw;\ntype Destination = import(\"./Destination\").Destination;\ntype Transport = import(\"../clock/Transport\").Transport;\n\nexport class DummyContext extends BaseContext {\n\t//---------------------------\n\t// BASE AUDIO CONTEXT METHODS\n\t//---------------------------\n\tcreateAnalyser(): AnalyserNode {\n\t\treturn {} as AnalyserNode;\n\t}\n\n\tcreateOscillator(): OscillatorNode {\n\t\treturn {} as OscillatorNode;\n\t}\n\n\tcreateBufferSource() {\n\t\treturn {} as AudioBufferSourceNode;\n\t}\n\n\tcreateBiquadFilter(): BiquadFilterNode {\n\t\treturn {} as BiquadFilterNode;\n\t}\n\n\tcreateBuffer(_numberOfChannels: number, _length: number, _sampleRate: number): AudioBuffer {\n\t\treturn {} as AudioBuffer;\n\t}\n\n\tcreateChannelMerger(_numberOfInputs?: number | undefined): ChannelMergerNode {\n\t\treturn {} as ChannelMergerNode;\n\t}\n\n\tcreateChannelSplitter(_numberOfOutputs?: number | undefined): ChannelSplitterNode {\n\t\treturn {} as ChannelSplitterNode;\n\t}\n\n\tcreateConstantSource(): ConstantSourceNode {\n\t\treturn {} as ConstantSourceNode;\n\t}\n\n\tcreateConvolver(): ConvolverNode {\n\t\treturn {} as ConvolverNode;\n\t}\n\n\tcreateDelay(_maxDelayTime?: number | undefined): DelayNode {\n\t\treturn {} as DelayNode;\n\t}\n\n\tcreateDynamicsCompressor(): DynamicsCompressorNode {\n\t\treturn {} as DynamicsCompressorNode;\n\t}\n\n\tcreateGain(): GainNode {\n\t\treturn {} as GainNode;\n\t}\n\n\tcreateIIRFilter(_feedForward: number[] | Float32Array, _feedback: number[] | Float32Array): IIRFilterNode {\n\t\treturn {} as IIRFilterNode;\n\t}\n\n\tcreatePanner(): PannerNode {\n\t\treturn {} as PannerNode;\n\t}\n\n\tcreatePeriodicWave(\n\t\t_real: number[] | Float32Array,\n\t\t_imag: number[] | Float32Array,\n\t\t_constraints?: PeriodicWaveConstraints | undefined,\n\t): PeriodicWave {\n\t\treturn {} as PeriodicWave;\n\t}\n\n\tcreateStereoPanner(): StereoPannerNode {\n\t\treturn {} as StereoPannerNode;\n\t}\n\n\tcreateWaveShaper(): WaveShaperNode {\n\t\treturn {} as WaveShaperNode;\n\t}\n\n\tcreateMediaStreamSource(_stream: MediaStream): MediaStreamAudioSourceNode {\n\t\treturn {} as MediaStreamAudioSourceNode;\n\t}\n\n\tdecodeAudioData(_audioData: ArrayBuffer): Promise<AudioBuffer> {\n\t\treturn Promise.resolve({} as AudioBuffer);\n\t}\n\n\t//---------------------------\n\t// TONE AUDIO CONTEXT METHODS\n\t//---------------------------\n\n\tcreateAudioWorkletNode(\n\t\t_name: string, \n\t\t_options?: Partial<AudioWorkletNodeOptions>\n\t): AudioWorkletNode {\n\t\treturn {} as AudioWorkletNode;\n\t}\n\n\tget rawContext(): AnyAudioContext {\n\t\treturn {} as AnyAudioContext;\n\t}\n\n\tasync addAudioWorkletModule(_url: string, _name: string): Promise<void> {\n\t\treturn Promise.resolve();\n\t}\n\n\tlookAhead = 0;\n\t\n\tlatencyHint = 0;\n\n\tresume(): Promise<void> {\n\t\treturn Promise.resolve();\n\t}\n\n\tsetTimeout(_fn: (...args: any[]) => void, _timeout: Seconds): number {\n\t\treturn 0;\n\t}\n\n\tclearTimeout(_id: number): this {\n\t\treturn this;\n\t}\n\n\tsetInterval(_fn: (...args: any[]) => void, _interval: Seconds): number {\n\t\treturn 0;\n\t}\n\n\tclearInterval(_id: number): this {\n\t\treturn this;\n\t}\n\n\tgetConstant(_val: number): AudioBufferSourceNode {\n\t\treturn {} as AudioBufferSourceNode;\n\t}\n\n\tget currentTime(): Seconds {\n\t\treturn 0;\n\t}\n\n\tget state(): AudioContextState {\n\t\treturn {} as AudioContextState;\n\t}\n\n\tget sampleRate(): number {\n\t\treturn 0;\n\t}\n\n\tget listener(): AudioListener {\n\t\treturn {} as AudioListener;\n\t}\n\n\tget transport(): Transport {\n\t\treturn {} as Transport;\n\t}\n\n\tget draw(): Draw {\n\t\treturn {} as Draw;\n\t}\n\tset draw(_d) { }\n\n\tget destination(): Destination {\n\t\treturn {} as Destination;\n\t}\n\tset destination(_d: Destination) { }\n\n\tnow() {\n\t\treturn 0;\n\t}\n\n\timmediate() {\n\t\treturn 0;\n\t}\n\n\treadonly isOffline: boolean = false;\n}\n","import { isArray } from \"./TypeCheck\";\n\n// return an interface which excludes certain keys\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n\n/**\n * Make the property not writable using `defineProperty`. Internal use only.\n */\nexport function readOnly(target: object, property: string | string[]): void {\n\tif (isArray(property)) {\n\t\tproperty.forEach(str => readOnly(target, str));\n\t} else {\n\t\tObject.defineProperty(target, property, {\n\t\t\tenumerable: true,\n\t\t\twritable: false,\n\t\t});\n\t}\n}\n\n/**\n * Make an attribute writeable. Internal use only.\n */\nexport function writable(target: object, property: string | string[]): void {\n\tif (isArray(property)) {\n\t\tproperty.forEach(str => writable(target, str));\n\t} else {\n\t\tObject.defineProperty(target, property, {\n\t\t\twritable: true,\n\t\t});\n\t}\n}\n\nexport const noOp: (...args: any[]) => any = () => {\n\t// no operation here!\n};\n\n/**\n * Recursive Partial taken from here: https://stackoverflow.com/a/51365037\n */\nexport type RecursivePartial<T> = {\n\t[P in keyof T]?:\n\tT[P] extends Array<infer U> ? Array<RecursivePartial<U>> :\n\t\tT[P] extends object ? RecursivePartial<T[P]> :\n\t\t\tT[P];\n};\n\n/**\n * Recursive Omit modified from here: https://stackoverflow.com/a/54487392/1146428\n */\ntype OmitDistributive<T, K extends string | number> = T extends any ? (T extends object ? Id<RecursiveOmit<T, K>> : T) : never;\ntype Id<T> = {} & { [P in keyof T]: T[P]} // Cosmetic use only makes the tooltips expand the type can be removed \nexport type RecursiveOmit<T extends any, K extends string | number> = Omit<{ [P in keyof T]: OmitDistributive<T[P], K> }, K>;\n","import { getContext } from \"../Global\";\nimport { Tone } from \"../Tone\";\nimport { Samples, Seconds } from \"../type/Units\";\nimport { isAudioBuffer } from \"../util/AdvancedTypeCheck\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { noOp } from \"../util/Interface\";\nimport { isArray, isNumber, isString } from \"../util/TypeCheck\";\n\ninterface ToneAudioBufferOptions {\n\turl?: string | AudioBuffer | ToneAudioBuffer;\n\treverse: boolean;\n\tonload: (buffer?: ToneAudioBuffer) => void;\n\tonerror: (error: Error) => void;\n}\n\n/**\n * AudioBuffer loading and storage. ToneAudioBuffer is used internally by all\n * classes that make requests for audio files such as Tone.Player,\n * Tone.Sampler and Tone.Convolver.\n * Aside from load callbacks from individual buffers, ToneAudioBuffer\n * provides events which keep track of the loading progress\n * of _all_ of the buffers. These are ToneAudioBuffer.on(\"load\" / \"progress\" / \"error\")\n * @example\n * import { ToneAudioBuffer } from \"tone\";\n * const buffer = new ToneAudioBuffer(\"https://tonejs.github.io/examples/audio/FWDL.mp3\", () => {\n * \tconsole.log(\"loaded\");\n * });\n * @category Core\n */\nexport class ToneAudioBuffer extends Tone {\n\n\treadonly name: string = \"ToneAudioBuffer\";\n\n\t/**\n\t * stores the loaded AudioBuffer\n\t */\n\tprivate _buffer?: AudioBuffer;\n\n\t/**\n\t * indicates if the buffer should be reversed or not\n\t */\n\tprivate _reversed!: boolean;\n\n\t/**\n\t * Callback when the buffer is loaded.\n\t */\n\tonload: (buffer: ToneAudioBuffer) => void = noOp;\n\n\t/**\n\t *\n\t * @param url The url to load, or the audio buffer to set.\n\t * @param onload A callback which is invoked after the buffer is loaded.\n\t *                           It's recommended to use `ToneAudioBuffer.on('load', callback)` instead\n\t *                           since it will give you a callback when _all_ buffers are loaded.\n\t * @param onerror The callback to invoke if there is an error\n\t */\n\tconstructor(\n\t\turl?: string | ToneAudioBuffer | AudioBuffer,\n\t\tonload?: (buffer: ToneAudioBuffer) => void,\n\t\tonerror?: (error: Error) => void,\n\t);\n\tconstructor(options?: Partial<ToneAudioBufferOptions>);\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tconst options = optionsFromArguments(ToneAudioBuffer.getDefaults(), arguments, [\"url\", \"onload\", \"onerror\"]);\n\n\t\tthis.reverse = options.reverse;\n\t\tthis.onload = options.onload;\n\n\t\tif (options.url && isAudioBuffer(options.url) || options.url instanceof ToneAudioBuffer) {\n\t\t\tthis.set(options.url);\n\t\t} else if (isString(options.url)) {\n\t\t\t// initiate the download\n\t\t\tthis.load(options.url).catch(options.onerror);\n\t\t}\n\t}\n\n\tstatic getDefaults(): ToneAudioBufferOptions {\n\t\treturn {\n\t\t\tonerror: noOp,\n\t\t\tonload: noOp,\n\t\t\treverse: false,\n\t\t};\n\t}\n\n\t/**\n\t * The sample rate of the AudioBuffer\n\t */\n\tget sampleRate(): number {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.sampleRate;\n\t\t} else {\n\t\t\treturn getContext().sampleRate;\n\t\t}\n\t}\n\n\t/**\n\t * Pass in an AudioBuffer or ToneAudioBuffer to set the value of this buffer.\n\t */\n\tset(buffer: AudioBuffer | ToneAudioBuffer): this {\n\t\tif (buffer instanceof ToneAudioBuffer) {\n\t\t\t// if it's loaded, set it\n\t\t\tif (buffer.loaded) {\n\t\t\t\tthis._buffer = buffer.get();\n\t\t\t} else {\n\t\t\t\t// otherwise when it's loaded, invoke it's callback\n\t\t\t\tbuffer.onload = () => {\n\t\t\t\t\tthis.set(buffer);\n\t\t\t\t\tthis.onload(this);\n\t\t\t\t};\n\t\t\t}\n\t\t} else {\n\t\t\tthis._buffer = buffer;\n\t\t}\n\t\t// reverse it initially\n\t\tif (this._reversed) {\n\t\t\tthis._reverse();\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * The audio buffer stored in the object.\n\t */\n\tget(): AudioBuffer | undefined {\n\t\treturn this._buffer;\n\t}\n\n\t/**\n\t * Makes an fetch request for the selected url then decodes the file as an audio buffer.\n\t * Invokes the callback once the audio buffer loads.\n\t * @param url The url of the buffer to load. filetype support depends on the browser.\n\t * @returns A Promise which resolves with this ToneAudioBuffer\n\t */\n\tasync load(url: string): Promise<this> {\n\t\tconst promise = ToneAudioBuffer.load(url);\n\t\tToneAudioBuffer.downloads.push(promise);\n\t\ttry {\n\t\t\tconst audioBuffer = await promise;\n\t\t\tthis.set(audioBuffer);\n\t\t\t// invoke the onload method\n\t\t\tthis.onload(this);\n\t\t} catch (e) {\n\t\t\t// remove the failed file before throwing error\n\t\t\tconst index = ToneAudioBuffer.downloads.indexOf(promise);\n\t\t\tToneAudioBuffer.downloads.splice(index, 1);\n\t\t\tthrow e;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._buffer = undefined;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set the audio buffer from the array.\n\t * To create a multichannel AudioBuffer, pass in a multidimensional array.\n\t * @param array The array to fill the audio buffer\n\t */\n\tfromArray(array: Float32Array | Float32Array[]): this {\n\t\tconst isMultidimensional = isArray(array) && array[0].length > 0;\n\t\tconst channels = isMultidimensional ? array.length : 1;\n\t\tconst len = isMultidimensional ? (array[0] as Float32Array).length : array.length;\n\t\tconst context = getContext();\n\t\tconst buffer = context.createBuffer(channels, len, context.sampleRate);\n\t\tconst multiChannelArray: Float32Array[] = !isMultidimensional && channels === 1 ?\n\t\t\t[array as Float32Array] : array as Float32Array[];\n\n\t\tfor (let c = 0; c < channels; c++) {\n\t\t\tbuffer.copyToChannel(multiChannelArray[c], c);\n\t\t}\n\t\tthis._buffer = buffer;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sums multiple channels into 1 channel\n\t * @param chanNum Optionally only copy a single channel from the array.\n\t */\n\ttoMono(chanNum?: number): this {\n\t\tif (isNumber(chanNum)) {\n\t\t\tthis.fromArray(this.toArray(chanNum));\n\t\t} else {\n\t\t\tlet outputArray = new Float32Array(this.length as number);\n\t\t\tconst numChannels = this.numberOfChannels;\n\t\t\tfor (let channel = 0; channel < numChannels; channel++) {\n\t\t\t\tconst channelArray = this.toArray(channel) as Float32Array;\n\t\t\t\tfor (let i = 0; i < channelArray.length; i++) {\n\t\t\t\t\toutputArray[i] += channelArray[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\t// divide by the number of channels\n\t\t\toutputArray = outputArray.map(sample => sample / numChannels);\n\t\t\tthis.fromArray(outputArray);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the buffer as an array. Single channel buffers will return a 1-dimensional\n\t * Float32Array, and multichannel buffers will return multidimensional arrays.\n\t * @param channel Optionally only copy a single channel from the array.\n\t */\n\ttoArray(channel?: number): Float32Array | Float32Array[] {\n\t\tif (isNumber(channel)) {\n\t\t\treturn this.getChannelData(channel);\n\t\t} else if (this.numberOfChannels === 1) {\n\t\t\treturn this.toArray(0);\n\t\t} else {\n\t\t\tconst ret: Float32Array[] = [];\n\t\t\tfor (let c = 0; c < this.numberOfChannels; c++) {\n\t\t\t\tret[c] = this.getChannelData(c);\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\t}\n\n\t/**\n\t * Returns the Float32Array representing the PCM audio data for the specific channel.\n\t * @param  channel  The channel number to return\n\t * @return The audio as a TypedArray\n\t */\n\tgetChannelData(channel: number): Float32Array {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.getChannelData(channel);\n\t\t} else {\n\t\t\treturn new Float32Array(0);\n\t\t}\n\t}\n\n\t/**\n\t * Cut a subsection of the array and return a buffer of the\n\t * subsection. Does not modify the original buffer\n\t * @param start The time to start the slice\n\t * @param end The end time to slice. If none is given will default to the end of the buffer\n\t */\n\tslice(start: Seconds, end: Seconds = this.duration): ToneAudioBuffer {\n\t\tconst startSamples = Math.floor(start * this.sampleRate);\n\t\tconst endSamples = Math.floor(end * this.sampleRate);\n\t\tthis.assert(startSamples < endSamples, \"The start time must be less than the end time\");\n\t\tconst length = endSamples - startSamples;\n\t\tconst retBuffer = getContext().createBuffer(this.numberOfChannels, length, this.sampleRate);\n\t\tfor (let channel = 0; channel < this.numberOfChannels; channel++) {\n\t\t\tretBuffer.copyToChannel(this.getChannelData(channel).subarray(startSamples, endSamples), channel);\n\t\t}\n\t\treturn new ToneAudioBuffer(retBuffer);\n\t}\n\n\t/**\n\t * Reverse the buffer.\n\t */\n\tprivate _reverse(): this {\n\t\tif (this.loaded) {\n\t\t\tfor (let i = 0; i < this.numberOfChannels; i++) {\n\t\t\t\tthis.getChannelData(i).reverse();\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * If the buffer is loaded or not\n\t */\n\tget loaded(): boolean {\n\t\treturn this.length > 0;\n\t}\n\n\t/**\n\t * The duration of the buffer in seconds.\n\t */\n\tget duration(): Seconds {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.duration;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * The length of the buffer in samples\n\t */\n\tget length(): Samples {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.length;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * The number of discrete audio channels. Returns 0 if no buffer is loaded.\n\t */\n\tget numberOfChannels(): number {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.numberOfChannels;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * Reverse the buffer.\n\t */\n\tget reverse(): boolean {\n\t\treturn this._reversed;\n\t}\n\tset reverse(rev: boolean) {\n\t\tif (this._reversed !== rev) {\n\t\t\tthis._reversed = rev;\n\t\t\tthis._reverse();\n\t\t}\n\t}\n\n\t//-------------------------------------\n\t// STATIC METHODS\n\t//-------------------------------------\n\n\t/**\n\t * A path which is prefixed before every url.\n\t */\n\tstatic baseUrl = \"\";\n\n\t/**\n\t * Create a ToneAudioBuffer from the array. To create a multichannel AudioBuffer,\n\t * pass in a multidimensional array.\n\t * @param array The array to fill the audio buffer\n\t * @return A ToneAudioBuffer created from the array\n\t */\n\tstatic fromArray(array: Float32Array | Float32Array[]): ToneAudioBuffer {\n\t\treturn (new ToneAudioBuffer()).fromArray(array);\n\t}\n\n\t/**\n\t * Creates a ToneAudioBuffer from a URL, returns a promise which resolves to a ToneAudioBuffer\n\t * @param  url The url to load.\n\t * @return A promise which resolves to a ToneAudioBuffer\n\t */\n\tstatic async fromUrl(url: string): Promise<ToneAudioBuffer> {\n\t\tconst buffer = new ToneAudioBuffer();\n\t\treturn await buffer.load(url);\n\t}\n\n\t/**\n\t * All of the downloads\n\t */\n\tstatic downloads: Array<Promise<AudioBuffer>> = [];\n\n\t/**\n\t * Loads a url using fetch and returns the AudioBuffer.\n\t */\n\tstatic async load(url: string): Promise<AudioBuffer> {\n\n\t\t// test if the url contains multiple extensions\n\t\tconst matches = url.match(/\\[(.+\\|?)+\\]$/);\n\t\tif (matches) {\n\t\t\tconst extensions = matches[1].split(\"|\");\n\t\t\tlet extension = extensions[0];\n\t\t\tfor (const ext of extensions) {\n\t\t\t\tif (ToneAudioBuffer.supportsType(ext)) {\n\t\t\t\t\textension = ext;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\turl = url.replace(matches[0], extension);\n\t\t}\n\n\t\t// make sure there is a slash between the baseUrl and the url\n\t\tconst baseUrl = ToneAudioBuffer.baseUrl.endsWith(\"/\") ? ToneAudioBuffer.baseUrl : ToneAudioBuffer.baseUrl + \"/\";\n\t\tconst response = await fetch(baseUrl + url);\n\t\tif (!response.ok) {\n\t\t\tthrow new Error(`could not load url: ${url}`);\n\t\t}\n\t\tconst arrayBuffer = await response.arrayBuffer();\n\n\t\tconst audioBuffer = await getContext().decodeAudioData(arrayBuffer);\n\n\t\treturn audioBuffer;\n\t}\n\n\t/**\n\t * Checks a url's extension to see if the current browser can play that file type.\n\t * @param url The url/extension to test\n\t * @return If the file extension can be played\n\t * @static\n\t * @example\n\t * import { ToneAudioBuffer } from \"tone\";\n\t * ToneAudioBuffer.supportsType(\"wav\"); // returns true\n\t * ToneAudioBuffer.supportsType(\"path/to/file.wav\"); // returns true\n\t */\n\tstatic supportsType(url: string): boolean {\n\t\tconst extensions = url.split(\".\");\n\t\tconst extension = extensions[extensions.length - 1];\n\t\tconst response = document.createElement(\"audio\").canPlayType(\"audio/\" + extension);\n\t\treturn response !== \"\";\n\t}\n\n\t/**\n\t * Returns a Promise which resolves when all of the buffers have loaded\n\t */\n\tstatic async loaded(): Promise<void> {\n\t\tfor (const promise of ToneAudioBuffer.downloads) {\n\t\t\tawait promise;\n\t\t}\n\t}\n}\n","import { createOfflineAudioContext } from \"../context/AudioContext\";\nimport { Context } from \"../context/Context\";\nimport { Seconds } from \"../type/Units\";\nimport { isOfflineAudioContext } from \"../util/AdvancedTypeCheck\";\nimport { ToneAudioBuffer } from \"./ToneAudioBuffer\";\n\n/**\n * Wrapper around the OfflineAudioContext\n * @category Core\n */\nexport class OfflineContext extends Context {\n\n\treadonly name: string = \"OfflineContext\";\n\n\t/**\n\t * A private reference to the duration\n\t */\n\tprivate readonly _duration: Seconds;\n\n\t/**\n\t * An artificial clock source\n\t */\n\tprivate _currentTime: Seconds = 0;\n\n\t/**\n\t * Private reference to the OfflineAudioContext.\n\t */\n\tprotected _context!: OfflineAudioContext;\n\n\treadonly isOffline: boolean = true;\n\n\t/**\n\t * @param  channels  The number of channels to render\n\t * @param  duration  The duration to render in seconds\n\t * @param sampleRate the sample rate to render at\n\t */\n\tconstructor(\n\t\tchannels: number,\n\t\tduration: Seconds, sampleRate: number,\n\t);\n\tconstructor(context: OfflineAudioContext);\n\tconstructor() {\n\n\t\tsuper({\n\t\t\tclockSource: \"offline\",\n\t\t\tcontext: isOfflineAudioContext(arguments[0]) ?\n\t\t\t\targuments[0] : createOfflineAudioContext(arguments[0], arguments[1] * arguments[2], arguments[2]),\n\t\t\tlookAhead: 0,\n\t\t\tupdateInterval: isOfflineAudioContext(arguments[0]) ?\n\t\t\t\t128 / arguments[0].sampleRate : 128 / arguments[2],\n\t\t});\n\n\t\tthis._duration = isOfflineAudioContext(arguments[0]) ?\n\t\t\targuments[0].length / arguments[0].sampleRate : arguments[1];\n\t}\n\n\t/**\n\t * Override the now method to point to the internal clock time\n\t */\n\tnow(): Seconds {\n\t\treturn this._currentTime;\n\t}\n\n\t/**\n\t * Same as this.now()\n\t */\n\tget currentTime(): Seconds {\n\t\treturn this._currentTime;\n\t}\n\n\t/**\n\t * Render just the clock portion of the audio context.\n\t */\n\tprivate async _renderClock(asynchronous: boolean): Promise<void> {\n\t\tlet index = 0;\n\t\twhile (this._duration - this._currentTime >= 0) {\n\t\t\t\n\t\t\t// invoke all the callbacks on that time\n\t\t\tthis.emit(\"tick\");\n\t\t\t\n\t\t\t// increment the clock in block-sized chunks\n\t\t\tthis._currentTime += 128 / this.sampleRate;\n\t\t\t\n\t\t\t// yield once a second of audio\n\t\t\tindex++;\n\t\t\tconst yieldEvery = Math.floor(this.sampleRate / 128);\n\t\t\tif (asynchronous && index % yieldEvery === 0) {\n\t\t\t\tawait new Promise(done => setTimeout(done, 1));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Render the output of the OfflineContext\n\t * @param asynchronous If the clock should be rendered asynchronously, which will not block the main thread, but be slightly slower.\n\t */\n\tasync render(asynchronous = true): Promise<ToneAudioBuffer> {\n\t\tawait this.workletsAreReady();\n\t\tawait this._renderClock(asynchronous);\n\t\tconst buffer = await this._context.startRendering();\n\t\treturn new ToneAudioBuffer(buffer);\n\t}\n\n\t/**\n\t * Close the context\n\t */\n\tclose(): Promise<void> {\n\t\treturn Promise.resolve();\n\t}\n}\n","import { version } from \"../version\";\nimport { AnyAudioContext, hasAudioContext, theWindow } from \"./context/AudioContext\";\nimport { Context } from \"./context/Context\";\nimport { DummyContext } from \"./context/DummyContext\";\nimport { BaseContext } from \"./context/BaseContext\";\nimport { OfflineContext } from \"./context/OfflineContext\";\nimport { isAudioContext, isOfflineAudioContext } from \"./util/AdvancedTypeCheck\";\n\n/**\n * This dummy context is used to avoid throwing immediate errors when importing in Node.js\n */\nconst dummyContext = new DummyContext();\n\n/**\n * The global audio context which is getable and assignable through\n * getContext and setContext\n */\nlet globalContext: BaseContext = dummyContext;\n\n/**\n * Returns the default system-wide [[Context]]\n * @category Core\n */\nexport function getContext(): BaseContext {\n\tif (globalContext === dummyContext && hasAudioContext) {\n\t\tsetContext(new Context());\n\t}\n\treturn globalContext;\n}\n\n/**\n * Set the default audio context\n * @category Core\n */\nexport function setContext(context: BaseContext | AnyAudioContext): void {\n\tif (isAudioContext(context)) {\n\t\tglobalContext = new Context(context);\n\t} else if (isOfflineAudioContext(context)) {\n\t\tglobalContext = new OfflineContext(context);\n\t} else {\n\t\tglobalContext = context;\n\t}\n}\n\n/**\n * Most browsers will not play _any_ audio until a user\n * clicks something (like a play button). Invoke this method\n * on a click or keypress event handler to start the audio context.\n * More about the Autoplay policy\n * [here](https://developers.google.com/web/updates/2017/09/autoplay-policy-changes#webaudio)\n * @example\n * import * as Tone from \"tone\";\n * document.querySelector(\"button\").addEventListener(\"click\", async () => {\n * \tawait Tone.start();\n * \tconsole.log(\"context started\");\n * });\n * @category Core\n */\nexport function start(): Promise <void> {\n\treturn globalContext.resume();\n}\n\n/**\n * Log Tone.js + version in the console.\n */\nif (theWindow && !theWindow.TONE_SILENCE_LOGGING) {\n\tlet prefix = \"v\";\n\tif (version === \"dev\") {\n\t\tprefix = \"\";\n\t}\n\tconst printString = ` * Tone.js ${prefix}${version} * `;\n\t// eslint-disable-next-line no-console\n\tconsole.log(`%c${printString}`, \"background: #000; color: #fff\");\n}\n","import { Decibels, GainFactor, Hertz, Interval, MidiNote, NormalRange } from \"./Units\";\n\n/**\n * Equal power gain scale. Good for cross-fading.\n * @param  percent (0-1)\n */\nexport function equalPowerScale(percent: NormalRange): number {\n\tconst piFactor = 0.5 * Math.PI;\n\treturn Math.sin(percent * piFactor);\n}\n\n/**\n * Convert decibels into gain.\n */\nexport function dbToGain(db: Decibels): GainFactor {\n\treturn Math.pow(10, db / 20);\n}\n\n/**\n * Convert gain to decibels.\n */\nexport function gainToDb(gain: GainFactor): Decibels {\n\treturn 20 * (Math.log(gain) / Math.LN10);\n}\n\n/**\n * Convert an interval (in semitones) to a frequency ratio.\n * @param interval the number of semitones above the base note\n * @example\n * import { intervalToFrequencyRatio } from \"tone\";\n * intervalToFrequencyRatio(0); // 1\n * intervalToFrequencyRatio(12); // 2\n * intervalToFrequencyRatio(-12); // 0.5\n */\nexport function intervalToFrequencyRatio(interval: Interval): number {\n\treturn Math.pow(2, (interval / 12));\n}\n\n/**\n * The Global [concert tuning pitch](https://en.wikipedia.org/wiki/Concert_pitch) which is used\n * to generate all the other pitch values from notes. A4's values in Hertz.\n */\nlet A4: Hertz = 440;\n\nexport function getA4(): Hertz {\n\treturn A4;\n}\n\nexport function setA4(freq: Hertz): void {\n\tA4 = freq;\n}\n\n/**\n * Convert a frequency value to a MIDI note.\n * @param frequency The value to frequency value to convert.\n * @example\n * import { ftom } from \"tone\";\n * ftom(440); // returns 69\n */\nexport function ftom(frequency: Hertz): MidiNote {\n\treturn Math.round(ftomf(frequency)) as MidiNote;\n}\n\n/**\n * Convert a frequency to a floating point midi value\n */\nexport function ftomf(frequency: Hertz): number {\n\treturn 69 + 12 * Math.log2(frequency / A4);\n}\n\n/**\n * Convert a MIDI note to frequency value.\n * @param  midi The midi number to convert.\n * @return The corresponding frequency value\n * @example\n * import { mtof } from \"tone\";\n * mtof(69); // 440\n */\nexport function mtof(midi: MidiNote): Hertz {\n\treturn A4 * Math.pow(2, (midi - 69) / 12);\n}\n","import { BaseContext } from \"../context/BaseContext\";\nimport { Tone } from \"../Tone\";\nimport { isDefined, isObject, isString, isUndef } from \"../util/TypeCheck\";\nimport { BPM, Hertz, MidiNote, Milliseconds, Samples, Seconds, Ticks, Time } from \"./Units\";\n\nexport type TimeValue = Time | TimeBaseClass<any, any>;\n\n/**\n * The units that the TimeBase can accept. extended by other classes\n */\nexport type TimeBaseUnit = \"s\" | \"n\" | \"t\" | \"m\" | \"i\" | \"hz\" | \"tr\" | \"samples\" | \"number\";\n\nexport interface TypeFunction {\n\tregexp: RegExp;\n\tmethod: (value: string, ...args: string[]) => number;\n}\n\nexport interface TimeExpression<Type extends number> {\n\t[key: string]: {\n\t\tregexp: RegExp;\n\t\tmethod: (value: string, ...args: string[]) => Type;\n\t};\n}\n\n/**\n * TimeBase is a flexible encoding of time which can be evaluated to and from a string.\n */\nexport abstract class TimeBaseClass<Type extends number, Unit extends string> extends Tone {\n\n\treadonly context: BaseContext;\n\n\t/**\n\t * The value of the units\n\t */\n\tprotected _val?: TimeValue;\n\n\t/**\n\t * The units of time\n\t */\n\tprotected _units?: Unit;\n\n\t/**\n\t * All of the conversion expressions\n\t */\n\tprotected _expressions: TimeExpression<Type>;\n\n\t/**\n\t * The default units\n\t */\n\treadonly defaultUnits: Unit = \"s\" as Unit;\n\n\t/**\n\t * @param context The context associated with the time value. Used to compute\n\t * Transport and context-relative timing.\n\t * @param  value  The time value as a number, string or object\n\t * @param  units  Unit values\n\t */\n\tconstructor(context: BaseContext, value?: TimeValue, units?: Unit) {\n\t\tsuper();\n\n\t\tthis._val = value;\n\t\tthis._units = units;\n\t\tthis.context = context;\n\t\tthis._expressions = this._getExpressions();\n\t}\n\n\t/**\n\t * All of the time encoding expressions\n\t */\n\tprotected _getExpressions(): TimeExpression<Type> {\n\t\treturn {\n\t\t\thz: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._frequencyToUnits(parseFloat(value));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?)hz$/i,\n\t\t\t},\n\t\t\ti: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._ticksToUnits(parseInt(value, 10));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)i$/i,\n\t\t\t},\n\t\t\tm: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._beatsToUnits(parseInt(value, 10) * this._getTimeSignature());\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)m$/i,\n\t\t\t},\n\t\t\tn: {\n\t\t\t\tmethod: (value, dot) => {\n\t\t\t\t\tconst numericValue = parseInt(value, 10);\n\t\t\t\t\tconst scalar = dot === \".\" ? 1.5 : 1;\n\t\t\t\t\tif (numericValue === 1) {\n\t\t\t\t\t\treturn this._beatsToUnits(this._getTimeSignature()) * scalar as Type;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn this._beatsToUnits(4 / numericValue) * scalar as Type;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)n(\\.?)$/i,\n\t\t\t},\n\t\t\tnumber: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._expressions[this.defaultUnits].method.call(this, value);\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?)$/,\n\t\t\t},\n\t\t\ts: {\n\t\t\t\tmethod: (value): Type => {\n\t\t\t\t\treturn this._secondsToUnits(parseFloat(value));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?)s$/,\n\t\t\t},\n\t\t\tsamples: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn parseInt(value, 10) / this.context.sampleRate as Type;\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)samples$/,\n\t\t\t},\n\t\t\tt: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\tconst numericValue = parseInt(value, 10);\n\t\t\t\t\treturn this._beatsToUnits(8 / (Math.floor(numericValue) * 3));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)t$/i,\n\t\t\t},\n\t\t\ttr: {\n\t\t\t\tmethod: (m, q, s) => {\n\t\t\t\t\tlet total = 0;\n\t\t\t\t\tif (m && m !== \"0\") {\n\t\t\t\t\t\ttotal += this._beatsToUnits(this._getTimeSignature() * parseFloat(m));\n\t\t\t\t\t}\n\t\t\t\t\tif (q && q !== \"0\") {\n\t\t\t\t\t\ttotal += this._beatsToUnits(parseFloat(q));\n\t\t\t\t\t}\n\t\t\t\t\tif (s && s !== \"0\") {\n\t\t\t\t\t\ttotal += this._beatsToUnits(parseFloat(s) / 4);\n\t\t\t\t\t}\n\t\t\t\t\treturn total as Type;\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?$/,\n\t\t\t},\n\t\t};\n\t}\n\n\t//-------------------------------------\n\t// \tVALUE OF\n\t//-------------------------------------\n\n\t/**\n\t * Evaluate the time value. Returns the time in seconds.\n\t */\n\tvalueOf(): Type {\n\t\tif (this._val instanceof TimeBaseClass) {\n\t\t\tthis.fromType(this._val);\n\t\t}\n\t\tif (isUndef(this._val)) {\n\t\t\treturn this._noArg();\n\t\t} else if (isString(this._val) && isUndef(this._units)) {\n\t\t\tfor (const units in this._expressions) {\n\t\t\t\tif (this._expressions[units].regexp.test(this._val.trim())) {\n\t\t\t\t\tthis._units = units as Unit;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (isObject(this._val)) {\n\t\t\tlet total = 0;\n\t\t\tfor (const typeName in this._val) {\n\t\t\t\tif (isDefined(this._val[typeName])) {\n\t\t\t\t\tconst quantity = this._val[typeName];\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tconst time = (new this.constructor(this.context, typeName)).valueOf() * quantity;\n\t\t\t\t\ttotal += time;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn total as Type;\n\t\t}\n\t\tif (isDefined(this._units)) {\n\t\t\tconst expr = this._expressions[this._units];\n\t\t\tconst matching = this._val.toString().trim().match(expr.regexp);\n\t\t\tif (matching) {\n\t\t\t\treturn expr.method.apply(this, matching.slice(1));\n\t\t\t} else {\n\t\t\t\treturn expr.method.call(this, this._val);\n\t\t\t}\n\t\t} else if (isString(this._val)) {\n\t\t\treturn parseFloat(this._val) as Type;\n\t\t} else {\n\t\t\treturn this._val as Type;\n\t\t}\n\t}\n\n\t//-------------------------------------\n\t// \tUNIT CONVERSIONS\n\t//-------------------------------------\n\n\t/**\n\t * Returns the value of a frequency in the current units\n\t */\n\tprotected _frequencyToUnits(freq: Hertz): Type {\n\t\treturn 1 / freq as Type;\n\t}\n\n\t/**\n\t * Return the value of the beats in the current units\n\t */\n\tprotected _beatsToUnits(beats: number): Type {\n\t\treturn (60 / this._getBpm()) * beats as Type;\n\t}\n\n\t/**\n\t * Returns the value of a second in the current units\n\t */\n\tprotected _secondsToUnits(seconds: Seconds): Type {\n\t\treturn seconds as Type;\n\t}\n\n\t/**\n\t * Returns the value of a tick in the current time units\n\t */\n\tprotected _ticksToUnits(ticks: Ticks): Type {\n\t\treturn (ticks * (this._beatsToUnits(1)) / this._getPPQ()) as Type;\n\t}\n\n\t/**\n\t * With no arguments, return 'now'\n\t */\n\tprotected _noArg(): Type {\n\t\treturn this._now();\n\t}\n\n\t//-------------------------------------\n\t// \tTEMPO CONVERSIONS\n\t//-------------------------------------\n\n\t/**\n\t * Return the bpm\n\t */\n\tprotected _getBpm(): BPM {\n\t\treturn this.context.transport.bpm.value;\n\t}\n\n\t/**\n\t * Return the timeSignature\n\t */\n\tprotected _getTimeSignature(): number {\n\t\treturn this.context.transport.timeSignature as number;\n\t}\n\n\t/**\n\t * Return the PPQ or 192 if Transport is not available\n\t */\n\tprotected _getPPQ(): number {\n\t\treturn this.context.transport.PPQ;\n\t}\n\n\t/**\n\t * Return the current time in whichever context is relevant\n\t */\n\tprotected abstract _now(): Type;\n\n\t//-------------------------------------\n\t// \tCONVERSION INTERFACE\n\t//-------------------------------------\n\n\t/**\n\t * Coerce a time type into this units type.\n\t * @param type Any time type units\n\t */\n\tfromType(type: TimeBaseClass<any, any>): this {\n\t\tthis._units = undefined;\n\t\tswitch (this.defaultUnits) {\n\t\t\tcase \"s\":\n\t\t\t\tthis._val = type.toSeconds();\n\t\t\t\tbreak;\n\t\t\tcase \"i\":\n\t\t\t\tthis._val = type.toTicks();\n\t\t\t\tbreak;\n\t\t\tcase \"hz\":\n\t\t\t\tthis._val = type.toFrequency();\n\t\t\t\tbreak;\n\t\t\tcase \"midi\":\n\t\t\t\tthis._val = type.toMidi();\n\t\t\t\tbreak;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Return the value in seconds\n\t */\n\tabstract toSeconds(): Seconds;\n\n\t/**\n\t * Return the value as a Midi note\n\t */\n\tabstract toMidi(): MidiNote;\n\n\t/**\n\t * Convert the value into ticks\n\t */\n\tabstract toTicks(): Ticks;\n\n\t/**\n\t * Return the value in hertz\n\t */\n\ttoFrequency(): Hertz {\n\t\treturn 1 / this.toSeconds();\n\t}\n\n\t/**\n\t * Return the time in samples\n\t */\n\ttoSamples(): Samples {\n\t\treturn this.toSeconds() * this.context.sampleRate;\n\t}\n\n\t/**\n\t * Return the time in milliseconds.\n\t */\n\ttoMilliseconds(): Milliseconds {\n\t\treturn this.toSeconds() * 1000;\n\t}\n}\n","import { getContext } from \"../Global\";\nimport { ftom } from \"./Conversions\";\nimport { TimeBaseClass, TimeBaseUnit, TimeExpression, TimeValue } from \"./TimeBase\";\nimport { BarsBeatsSixteenths, MidiNote, Seconds, Subdivision, Ticks, Time } from \"./Units\";\n\n/**\n * TimeClass is a primitive type for encoding and decoding Time values.\n * TimeClass can be passed into the parameter of any method which takes time as an argument.\n * @param  val    The time value.\n * @param  units  The units of the value.\n * @example\n * import { Time } from \"tone\";\n * const time = Time(\"4n\"); // a quarter note\n * @category Unit\n */\nexport class TimeClass<Type extends Seconds | Ticks = Seconds, Unit extends string = TimeBaseUnit>\n\textends TimeBaseClass<Type, Unit> {\n\n\treadonly name: string = \"TimeClass\";\n\n\tprotected _getExpressions(): TimeExpression<Type> {\n\t\treturn Object.assign(super._getExpressions(), {\n\t\t\tnow: {\n\t\t\t\tmethod: (capture: string): Type => {\n\t\t\t\t\treturn this._now() + new (this.constructor as typeof TimeClass)(this.context, capture).valueOf() as Type;\n\t\t\t\t},\n\t\t\t\tregexp: /^\\+(.+)/,\n\t\t\t},\n\t\t\tquantize: {\n\t\t\t\tmethod: (capture: string): Type => {\n\t\t\t\t\tconst quantTo = new TimeClass(this.context, capture).valueOf();\n\t\t\t\t\treturn this._secondsToUnits(this.context.transport.nextSubdivision(quantTo));\n\t\t\t\t},\n\t\t\t\tregexp: /^@(.+)/,\n\t\t\t},\n\t\t});\n\t}\n\n\t/**\n\t * Quantize the time by the given subdivision. Optionally add a\n\t * percentage which will move the time value towards the ideal\n\t * quantized value by that percentage.\n\t * @param  subdiv    The subdivision to quantize to\n\t * @param  percent  Move the time value towards the quantized value by a percentage.\n\t * @example\n\t * import { Time } from \"tone\";\n\t * Time(21).quantize(2); // returns 22\n\t * Time(0.6).quantize(\"4n\", 0.5); // returns 0.55\n\t */\n\tquantize(subdiv: Time, percent = 1): Type {\n\t\tconst subdivision = new (this.constructor as typeof TimeClass)(this.context, subdiv).valueOf();\n\t\tconst value = this.valueOf();\n\t\tconst multiple = Math.round(value / subdivision);\n\t\tconst ideal = multiple * subdivision;\n\t\tconst diff = ideal - value;\n\t\treturn value + diff * percent as Type;\n\t}\n\n\t//-------------------------------------\n\t// CONVERSIONS\n\t//-------------------------------------\n\t/**\n\t * Convert a Time to Notation. The notation values are will be the\n\t * closest representation between 1m to 128th note.\n\t * @return {Notation}\n\t * @example\n\t * import { Time } from \"tone\";\n\t * // if the Transport is at 120bpm:\n\t * Time(2).toNotation(); // returns \"1m\"\n\t */\n\ttoNotation(): Subdivision {\n\t\tconst time = this.toSeconds();\n\t\tconst testNotations: Subdivision[] = [\"1m\"];\n\t\tfor (let power = 1; power < 9; power++) {\n\t\t\tconst subdiv = Math.pow(2, power);\n\t\t\ttestNotations.push(subdiv + \"n.\" as Subdivision);\n\t\t\ttestNotations.push(subdiv + \"n\" as Subdivision);\n\t\t\ttestNotations.push(subdiv + \"t\" as Subdivision);\n\t\t}\n\t\ttestNotations.push(\"0\");\n\t\t// find the closets notation representation\n\t\tlet closest = testNotations[0];\n\t\tlet closestSeconds = new TimeClass(this.context, testNotations[0]).toSeconds();\n\t\ttestNotations.forEach(notation => {\n\t\t\tconst notationSeconds = new TimeClass(this.context, notation).toSeconds();\n\t\t\tif (Math.abs(notationSeconds - time) < Math.abs(closestSeconds - time)) {\n\t\t\t\tclosest = notation;\n\t\t\t\tclosestSeconds = notationSeconds;\n\t\t\t}\n\t\t});\n\t\treturn closest;\n\t}\n\n\t/**\n\t * Return the time encoded as Bars:Beats:Sixteenths.\n\t */\n\ttoBarsBeatsSixteenths(): BarsBeatsSixteenths {\n\t\tconst quarterTime = this._beatsToUnits(1);\n\t\tlet quarters = this.valueOf() / quarterTime;\n\t\tquarters = parseFloat(quarters.toFixed(4));\n\t\tconst measures = Math.floor(quarters / this._getTimeSignature());\n\t\tlet sixteenths = (quarters % 1) * 4;\n\t\tquarters = Math.floor(quarters) % this._getTimeSignature();\n\t\tconst sixteenthString = sixteenths.toString();\n\t\tif (sixteenthString.length > 3) {\n\t\t\t// the additional parseFloat removes insignificant trailing zeroes\n\t\t\tsixteenths = parseFloat(parseFloat(sixteenthString).toFixed(3));\n\t\t}\n\t\tconst progress = [measures, quarters, sixteenths];\n\t\treturn progress.join(\":\");\n\t}\n\n\t/**\n\t * Return the time in ticks.\n\t */\n\ttoTicks(): Ticks {\n\t\tconst quarterTime = this._beatsToUnits(1);\n\t\tconst quarters = this.valueOf() / quarterTime;\n\t\treturn Math.round(quarters * this._getPPQ());\n\t}\n\n\t/**\n\t * Return the time in seconds.\n\t */\n\ttoSeconds(): Seconds {\n\t\treturn this.valueOf();\n\t}\n\n\t/**\n\t * Return the value as a midi note.\n\t */\n\ttoMidi(): MidiNote {\n\t\treturn ftom(this.toFrequency());\n\t}\n\n\tprotected _now(): Type {\n\t\treturn this.context.now() as Type;\n\t}\n}\n\n/**\n * Create a TimeClass from a time string or number.\n * @param value A value which reprsents time\n * @param units The value's units if they can't be inferred by the value.\n * @category Unit\n */\nexport function Time(value?: TimeValue, units?: TimeBaseUnit): TimeClass<Seconds> {\n\treturn new TimeClass(getContext(), value, units);\n}\n","import { getContext } from \"../Global\";\nimport { intervalToFrequencyRatio, mtof } from \"./Conversions\";\nimport { ftom, getA4, setA4 } from \"./Conversions\";\nimport { TimeClass } from \"./Time\";\nimport { TimeBaseUnit, TimeExpression, TimeValue } from \"./TimeBase\";\nimport { Frequency, Hertz, Interval, MidiNote, Note, Seconds, Ticks } from \"./Units\";\n\nexport type FrequencyUnit = TimeBaseUnit | \"midi\";\n\n/**\n * Frequency is a primitive type for encoding Frequency values.\n * Eventually all time values are evaluated to hertz using the `eval` method.\n * @example\n * import { Frequency } from \"tone\";\n * Frequency(\"C3\"); // 261\n * Frequency(38, \"midi\");\n * Frequency(\"C3\").transpose(4);\n * @category Unit\n */\nexport class FrequencyClass<Type extends number = Hertz> extends TimeClass<Type, FrequencyUnit> {\n\n\treadonly name: string = \"Frequency\";\n\n\treadonly defaultUnits: FrequencyUnit = \"hz\";\n\n\t/**\n\t * The [concert tuning pitch](https://en.wikipedia.org/wiki/Concert_pitch) which is used\n\t * to generate all the other pitch values from notes. A4's values in Hertz.\n\t */\n\tstatic get A4(): Hertz {\n\t\treturn getA4();\n\t}\n\tstatic set A4(freq: Hertz) {\n\t\tsetA4(freq);\n\t}\n\n\t//-------------------------------------\n\t// \tAUGMENT BASE EXPRESSIONS\n\t//-------------------------------------\n\n\tprotected _getExpressions(): TimeExpression<Type> {\n\t\treturn Object.assign({}, super._getExpressions(), {\n\t\t\tmidi: {\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?midi)/,\n\t\t\t\tmethod(value): number {\n\t\t\t\t\tif (this.defaultUnits === \"midi\") {\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn FrequencyClass.mtof(value);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\tnote: {\n\t\t\t\tregexp: /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i,\n\t\t\t\tmethod(pitch, octave): number {\n\t\t\t\t\tconst index = noteToScaleIndex[pitch.toLowerCase()];\n\t\t\t\t\tconst noteNumber = index + (parseInt(octave, 10) + 1) * 12;\n\t\t\t\t\tif (this.defaultUnits === \"midi\") {\n\t\t\t\t\t\treturn noteNumber;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn FrequencyClass.mtof(noteNumber);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\ttr: {\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?/,\n\t\t\t\tmethod(m, q, s): number {\n\t\t\t\t\tlet total = 1;\n\t\t\t\t\tif (m && m !== \"0\") {\n\t\t\t\t\t\ttotal *= this._beatsToUnits(this._getTimeSignature() * parseFloat(m));\n\t\t\t\t\t}\n\t\t\t\t\tif (q && q !== \"0\") {\n\t\t\t\t\t\ttotal *= this._beatsToUnits(parseFloat(q));\n\t\t\t\t\t}\n\t\t\t\t\tif (s && s !== \"0\") {\n\t\t\t\t\t\ttotal *= this._beatsToUnits(parseFloat(s) / 4);\n\t\t\t\t\t}\n\t\t\t\t\treturn total;\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t}\n\n\t//-------------------------------------\n\t// \tEXPRESSIONS\n\t//-------------------------------------\n\n\t/**\n\t * Transposes the frequency by the given number of semitones.\n\t * @return  A new transposed frequency\n\t * @example\n\t * import { Frequency } from \"tone\";\n\t * Frequency(\"A4\").transpose(3); // \"C5\"\n\t */\n\ttranspose(interval: Interval): FrequencyClass {\n\t\treturn new FrequencyClass(this.context, this.valueOf() * intervalToFrequencyRatio(interval));\n\t}\n\n\t/**\n\t * Takes an array of semitone intervals and returns\n\t * an array of frequencies transposed by those intervals.\n\t * @return  Returns an array of Frequencies\n\t * @example\n\t * import { Frequency } from \"tone\";\n\t * Frequency(\"A4\").harmonize([0, 3, 7]); // [\"A4\", \"C5\", \"E5\"]\n\t */\n\tharmonize(intervals: Interval[]): FrequencyClass[] {\n\t\treturn intervals.map(interval => {\n\t\t\treturn this.transpose(interval);\n\t\t});\n\t}\n\n\t//-------------------------------------\n\t// \tUNIT CONVERSIONS\n\t//-------------------------------------\n\n\t/**\n\t * Return the value of the frequency as a MIDI note\n\t * @example\n\t * import { Frequency } from \"tone\";\n\t * Frequency(\"C4\").toMidi(); // 60\n\t */\n\ttoMidi(): MidiNote {\n\t\treturn ftom(this.valueOf());\n\t}\n\n\t/**\n\t * Return the value of the frequency in Scientific Pitch Notation\n\t * @example\n\t * import { Frequency } from \"tone\";\n\t * Frequency(69, \"midi\").toNote(); // \"A4\"\n\t */\n\ttoNote(): Note {\n\t\tconst freq = this.toFrequency();\n\t\tconst log = Math.log2(freq / FrequencyClass.A4);\n\t\tlet noteNumber = Math.round(12 * log) + 57;\n\t\tconst octave = Math.floor(noteNumber / 12);\n\t\tif (octave < 0) {\n\t\t\tnoteNumber += -12 * octave;\n\t\t}\n\t\tconst noteName = scaleIndexToNote[noteNumber % 12];\n\t\treturn noteName + octave.toString() as Note;\n\t}\n\n\t/**\n\t * Return the duration of one cycle in seconds.\n\t */\n\ttoSeconds(): Seconds {\n\t\treturn 1 / super.toSeconds();\n\t}\n\n\t/**\n\t * Return the duration of one cycle in ticks\n\t */\n\ttoTicks(): Ticks {\n\t\tconst quarterTime = this._beatsToUnits(1);\n\t\tconst quarters = this.valueOf() / quarterTime;\n\t\treturn Math.floor(quarters * this._getPPQ());\n\t}\n\n\t//-------------------------------------\n\t// \tUNIT CONVERSIONS HELPERS\n\t//-------------------------------------\n\n\t/**\n\t * With no arguments, return 0\n\t */\n\tprotected _noArg(): Type {\n\t\treturn 0 as Type;\n\t}\n\n\t/**\n\t * Returns the value of a frequency in the current units\n\t */\n\tprotected _frequencyToUnits(freq: Hertz): Type {\n\t\treturn freq as Type;\n\t}\n\n\t/**\n\t * Returns the value of a tick in the current time units\n\t */\n\tprotected _ticksToUnits(ticks: Ticks): Type {\n\t\treturn 1 / ((ticks * 60) / (this._getBpm() * this._getPPQ())) as Type;\n\t}\n\n\t/**\n\t * Return the value of the beats in the current units\n\t */\n\tprotected _beatsToUnits(beats: number): Type {\n\t\treturn 1 / super._beatsToUnits(beats) as Type;\n\t}\n\n\t/**\n\t * Returns the value of a second in the current units\n\t */\n\tprotected _secondsToUnits(seconds: Seconds): Type {\n\t\treturn 1 / seconds as Type;\n\t}\n\n\t/**\n\t * Convert a MIDI note to frequency value.\n\t * @param  midi The midi number to convert.\n\t * @return The corresponding frequency value\n\t */\n\tstatic mtof(midi: MidiNote): Hertz {\n\t\treturn mtof(midi);\n\t}\n\n\t/**\n\t * Convert a frequency value to a MIDI note.\n\t * @param frequency The value to frequency value to convert.\n\t */\n\tstatic ftom(frequency: Hertz): MidiNote {\n\t\treturn ftom(frequency);\n\t}\n}\n\n//-------------------------------------\n// \tFREQUENCY CONVERSIONS\n//-------------------------------------\n\n/**\n * Note to scale index. \n * @hidden\n */\nconst noteToScaleIndex = {\n\tcbb: -2, cb: -1, c: 0, \"c#\": 1, cx: 2,\n\tdbb: 0, db: 1, d: 2, \"d#\": 3, dx: 4,\n\tebb: 2, eb: 3, e: 4, \"e#\": 5, ex: 6,\n\tfbb: 3, fb: 4, f: 5, \"f#\": 6, fx: 7,\n\tgbb: 5, gb: 6, g: 7, \"g#\": 8, gx: 9,\n\tabb: 7, ab: 8, a: 9, \"a#\": 10, ax: 11,\n\tbbb: 9, bb: 10, b: 11, \"b#\": 12, bx: 13,\n};\n\n/**\n * scale index to note (sharps)\n * @hidden\n */\nconst scaleIndexToNote = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n\n/**\n * Convert a value into a FrequencyClass object.\n * @category Unit\n */\nexport function Frequency(value?: TimeValue | Frequency, units?: FrequencyUnit): FrequencyClass {\n\treturn new FrequencyClass(getContext(), value, units);\n}\n","import { getContext } from \"../Global\";\nimport { Seconds, Ticks } from \"../type/Units\";\nimport { TimeClass } from \"./Time\";\nimport { TimeBaseUnit, TimeValue } from \"./TimeBase\";\n\n/**\n * TransportTime is a the time along the Transport's\n * timeline. It is similar to Tone.Time, but instead of evaluating\n * against the AudioContext's clock, it is evaluated against\n * the Transport's position. See [TransportTime wiki](https://github.com/Tonejs/Tone.js/wiki/TransportTime).\n * @category Unit\n */\nexport class TransportTimeClass<Type extends Seconds | Ticks = Seconds> extends TimeClass<Type> {\n\n\treadonly name: string = \"TransportTime\";\n\n\t/**\n\t * Return the current time in whichever context is relevant\n\t */\n\tprotected _now(): Type {\n\t\treturn this.context.transport.seconds as Type;\n\t}\n}\n\n/**\n * TransportTime is a the time along the Transport's\n * timeline. It is similar to [[Time]], but instead of evaluating\n * against the AudioContext's clock, it is evaluated against\n * the Transport's position. See [TransportTime wiki](https://github.com/Tonejs/Tone.js/wiki/TransportTime).\n * @category Unit\n */\nexport function TransportTime(value?: TimeValue, units?: TimeBaseUnit): TransportTimeClass {\n\treturn new TransportTimeClass(getContext(), value, units);\n}\n","import { getContext } from \"../Global\";\nimport { Tone } from \"../Tone\";\nimport { FrequencyClass } from \"../type/Frequency\";\nimport { TimeClass } from \"../type/Time\";\nimport { TransportTimeClass } from \"../type/TransportTime\";\nimport { Frequency, Hertz, Seconds, Ticks, Time } from \"../type/Units\";\nimport { getDefaultsFromInstance, optionsFromArguments } from \"../util/Defaults\";\nimport { RecursivePartial } from \"../util/Interface\";\nimport { isArray, isBoolean, isDefined, isNumber, isString, isUndef } from \"../util/TypeCheck\";\nimport { BaseContext } from \"./BaseContext\";\n\n/**\n * A unit which process audio\n */\nexport interface ToneWithContextOptions {\n\tcontext: BaseContext;\n}\n\n/**\n * The Base class for all nodes that have an AudioContext.\n */\nexport abstract class ToneWithContext<Options extends ToneWithContextOptions> extends Tone {\n\n\t/**\n\t * The context belonging to the node.\n\t */\n\treadonly context: BaseContext;\n\n\t/**\n\t * The default context to use if no AudioContext is passed in to the constructor.\n\t * Probably should not be set manually. Used internally.\n\t * @hidden\n\t */\n\treadonly defaultContext?: BaseContext;\n\n\t/**\n\t * Pass in a constructor as the first argument\n\t */\n\tconstructor(context?: BaseContext)\n\tconstructor(options?: Partial<ToneWithContextOptions>);\n\tconstructor() {\n\t\tsuper();\n\t\tconst options = optionsFromArguments(ToneWithContext.getDefaults(), arguments, [\"context\"]);\n\t\tif (this.defaultContext) {\n\t\t\tthis.context = this.defaultContext;\n\t\t} else {\n\t\t\tthis.context = options.context;\n\t\t}\n\t}\n\n\tstatic getDefaults(): ToneWithContextOptions {\n\t\treturn {\n\t\t\tcontext: getContext(),\n\t\t};\n\t}\n\n\t/**\n\t * Return the current time of the Context clock plus the lookAhead.\n\t */\n\tnow(): Seconds {\n\t\treturn this.context.currentTime + this.context.lookAhead;\n\t}\n\n\t/**\n\t * Return the current time of the Context clock without any lookAhead.\n\t */\n\timmediate(): Seconds {\n\t\treturn this.context.currentTime;\n\t}\n\n\t/**\n\t * The duration in seconds of one sample.\n\t */\n\tget sampleTime(): Seconds {\n\t\treturn 1 / this.context.sampleRate;\n\t}\n\n\t/**\n\t * The number of seconds of 1 processing block (128 samples)\n\t */\n\tget blockTime(): Seconds {\n\t\treturn 128 / this.context.sampleRate;\n\t}\n\n\t/**\n\t * Convert the incoming time to seconds\n\t */\n\ttoSeconds(time?: Time): Seconds {\n\t\treturn new TimeClass(this.context, time).toSeconds();\n\t}\n\n\t/**\n\t * Convert the input to a frequency number\n\t */\n\ttoFrequency(freq: Frequency): Hertz {\n\t\treturn new FrequencyClass(this.context, freq).toFrequency();\n\t}\n\n\t/**\n\t * Convert the input time into ticks\n\t */\n\ttoTicks(time?: Time | TimeClass): Ticks {\n\t\treturn new TransportTimeClass(this.context, time).toTicks();\n\t}\n\n\t//-------------------------------------\n\t// \tGET/SET\n\t//-------------------------------------\n\n\t/**\n\t * Get a subset of the properties which are in the partial props\n\t */\n\tprotected _getPartialProperties(props: Options): Partial<Options> {\n\t\tconst options = this.get();\n\t\t// remove attributes from the prop that are not in the partial\n\t\tObject.keys(options).forEach(name => {\n\t\t\tif (isUndef(props[name])) {\n\t\t\t\tdelete options[name];\n\t\t\t}\n\t\t});\n\t\treturn options;\n\t}\n\n\t/**\n\t * Get the object's attributes.\n\t * @example\n\t * import { Oscillator } from \"tone\";\n\t * const osc = new Oscillator();\n\t * console.log(osc.get());\n\t * // returns {\"type\" : \"sine\", \"frequency\" : 440, ...etc}\n\t */\n\tget(): Options {\n\t\tconst defaults = getDefaultsFromInstance(this) as Options;\n\t\tObject.keys(defaults).forEach(attribute => {\n\t\t\tif (Reflect.has(this, attribute)) {\n\t\t\t\tconst member = this[attribute];\n\t\t\t\tif (isDefined(member) && isDefined(member.value) && isDefined(member.setValueAtTime)) {\n\t\t\t\t\tdefaults[attribute] = member.value;\n\t\t\t\t} else if (member instanceof ToneWithContext) {\n\t\t\t\t\tdefaults[attribute] = member._getPartialProperties(defaults[attribute]);\n\t\t\t\t// otherwise make sure it's a serializable type\n\t\t\t\t} else if (isArray(member) || isNumber(member) || isString(member) || isBoolean(member)) {\n\t\t\t\t\tdefaults[attribute] = member;\n\t\t\t\t} else {\n\t\t\t\t\t// remove all undefined and unserializable attributes\n\t\t\t\t\tdelete defaults[attribute];\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn defaults;\n\t}\n\n\t/**\n\t * Set multiple properties at once with an object.\n\t * @example\n\t * import { Filter } from \"tone\";\n\t * const filter = new Filter();\n\t * // set values using an object\n\t * filter.set({\n\t * \tfrequency: 300,\n\t * \ttype: \"highpass\"\n\t * });\n\t */\n\tset(props: RecursivePartial<Options>): this {\n\t\tObject.keys(props).forEach(attribute => {\n\t\t\tif (Reflect.has(this, attribute) && isDefined(this[attribute])) {\n\t\t\t\tif (this[attribute] && isDefined(this[attribute].value) && isDefined(this[attribute].setValueAtTime)) {\n\t\t\t\t\t// small optimization\n\t\t\t\t\tif (this[attribute].value !== props[attribute]) {\n\t\t\t\t\t\tthis[attribute].value = props[attribute];\n\t\t\t\t\t}\n\t\t\t\t} else if (this[attribute] instanceof ToneWithContext) {\n\t\t\t\t\tthis[attribute].set(props[attribute]);\n\t\t\t\t} else {\n\t\t\t\t\tthis[attribute] = props[attribute];\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n}\n","import { Seconds } from \"../type/Units\";\nimport { Timeline, TimelineEvent } from \"./Timeline\";\nimport { assertRange } from \"./Debug\";\n\nexport type BasicPlaybackState = \"started\" | \"stopped\";\nexport type PlaybackState = BasicPlaybackState | \"paused\";\n\nexport interface StateTimelineEvent extends TimelineEvent {\n\tstate: PlaybackState;\n}\n\n/**\n * A Timeline State. Provides the methods: `setStateAtTime(\"state\", time)` and `getValueAtTime(time)`\n * @param initial The initial state of the StateTimeline.  Defaults to `undefined`\n */\nexport class StateTimeline<AdditionalOptions extends {} = {}> extends Timeline<StateTimelineEvent & AdditionalOptions> {\n\n\treadonly name: string = \"StateTimeline\";\n\n\t/**\n\t * The initial state\n\t */\n\tprivate _initial: PlaybackState;\n\n\tconstructor(initial: PlaybackState = \"stopped\") {\n\t\tsuper();\n\t\tthis._initial = initial;\n\t}\n\n\t/**\n\t * Returns the scheduled state scheduled before or at\n\t * the given time.\n\t * @param  time  The time to query.\n\t * @return  The name of the state input in setStateAtTime.\n\t */\n\tgetValueAtTime(time: Seconds): PlaybackState {\n\t\tconst event = this.get(time);\n\t\tif (event !== null) {\n\t\t\treturn event.state;\n\t\t} else {\n\t\t\treturn this._initial;\n\t\t}\n\t}\n\n\t/**\n\t * Add a state to the timeline.\n\t * @param  state The name of the state to set.\n\t * @param  time  The time to query.\n\t * @param options Any additional options that are needed in the timeline.\n\t */\n\tsetStateAtTime(state: PlaybackState, time: Seconds, options?: AdditionalOptions): this {\n\t\tassertRange(time, 0);\n\t\tthis.add(Object.assign({}, options, {\n\t\t\tstate,\n\t\t\ttime,\n\t\t}));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Return the event before the time with the given state\n\t * @param  state The state to look for\n\t * @param  time  When to check before\n\t * @return  The event with the given state before the time\n\t */\n\tgetLastState(state: PlaybackState, time: number): StateTimelineEvent & AdditionalOptions | undefined {\n\t\t// time = this.toSeconds(time);\n\t\tconst index = this._search(time);\n\t\tfor (let i = index; i >= 0; i--) {\n\t\t\tconst event = this._timeline[i];\n\t\t\tif (event.state === state) {\n\t\t\t\treturn event;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Return the event after the time with the given state\n\t * @param  state The state to look for\n\t * @param  time  When to check from\n\t * @return  The event with the given state after the time\n\t */\n\tgetNextState(state: PlaybackState, time: number): StateTimelineEvent & AdditionalOptions | undefined {\n\t\t// time = this.toSeconds(time);\n\t\tconst index = this._search(time);\n\t\tif (index !== -1) {\n\t\t\tfor (let i = index; i < this._timeline.length; i++) {\n\t\t\t\tconst event = this._timeline[i];\n\t\t\t\tif (event.state === state) {\n\t\t\t\t\treturn event;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","import { AbstractParam } from \"../context/AbstractParam\";\nimport { dbToGain, gainToDb } from \"../type/Conversions\";\nimport { AudioRange, Decibels, Frequency, NormalRange, Positive, Time, UnitMap, UnitName } from \"../type/Units\";\nimport { isAudioParam } from \"../util/AdvancedTypeCheck\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isDefined } from \"../util/TypeCheck\";\nimport { ToneWithContext, ToneWithContextOptions } from \"./ToneWithContext\";\nimport { EQ } from \"../util/Math\";\n\nexport interface ParamOptions<TypeName extends UnitName> extends ToneWithContextOptions {\n\tunits: TypeName;\n\tvalue?: UnitMap[TypeName];\n\tparam: AudioParam | Param<TypeName>;\n\tconvert: boolean;\n\tminValue?: number;\n\tmaxValue?: number;\n\tswappable?: boolean;\n}\n\n/**\n * the possible automation types\n */\ntype AutomationType = \"linearRampToValueAtTime\" | \"exponentialRampToValueAtTime\" | \"setValueAtTime\" | \"setTargetAtTime\" | \"cancelScheduledValues\";\n\ninterface TargetAutomationEvent {\n\ttype: \"setTargetAtTime\";\n\ttime: number;\n\tvalue: number;\n\tconstant: number;\n}\n\ninterface NormalAutomationEvent {\n\ttype: Exclude<AutomationType, \"setTargetAtTime\">;\n\ttime: number;\n\tvalue: number;\n}\n/**\n * The events on the automation\n */\nexport type AutomationEvent = NormalAutomationEvent | TargetAutomationEvent;\n\n/**\n * Param wraps the native Web Audio's AudioParam to provide\n * additional unit conversion functionality. It also\n * serves as a base-class for classes which have a single,\n * automatable parameter.\n */\nexport class Param<TypeName extends UnitName = \"number\">\n\textends ToneWithContext<ParamOptions<TypeName>>\n\timplements AbstractParam<TypeName> {\n\n\treadonly name: string = \"Param\";\n\n\treadonly input: GainNode | AudioParam;\n\n\treadonly units: UnitName;\n\tconvert: boolean;\n\toverridden = false;\n\n\t/**\n\t * The timeline which tracks all of the automations.\n\t */\n\tprotected _events: Timeline<AutomationEvent>;\n\n\t/**\n\t * The native parameter to control\n\t */\n\tprotected _param: AudioParam;\n\n\t/**\n\t * The default value before anything is assigned\n\t */\n\tprotected _initialValue: number;\n\n\t/**\n\t * The minimum output value\n\t */\n\tprivate _minOutput = 1e-7;\n\n\t/**\n\t * Private reference to the min and max values if passed into the constructor\n\t */\n\tprivate readonly _minValue?: number;\n\tprivate readonly _maxValue?: number;\n\n\t/**\n\t * If the underlying AudioParam can be swapped out\n\t * using the setParam method. \n\t */\n\tprotected readonly _swappable: boolean;\n\n\t/**\n\t * @param param The AudioParam to wrap\n\t * @param units The unit name\n\t * @param convert Whether or not to convert the value to the target units\n\t */\n\tconstructor(param: AudioParam, units?: TypeName, convert?: boolean);\n\tconstructor(options: Partial<ParamOptions<TypeName>>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Param.getDefaults(), arguments, [\"param\", \"units\", \"convert\"]));\n\n\t\tconst options = optionsFromArguments(Param.getDefaults(), arguments, [\"param\", \"units\", \"convert\"]);\n\n\t\tthis.assert(isDefined(options.param) &&\n\t\t\t(isAudioParam(options.param) || options.param instanceof Param), \"param must be an AudioParam\");\n\n\t\twhile (!isAudioParam(options.param)) {\n\t\t\toptions.param = options.param._param;\n\t\t}\n\n\t\tthis._swappable = isDefined(options.swappable) ? options.swappable : false;\n\t\tif (this._swappable) {\n\t\t\tthis.input = this.context.createGain();\n\t\t\t// initialize\n\t\t\tthis._param = options.param;\n\t\t\tthis.input.connect(this._param);\n\t\t} else {\n\t\t\tthis._param = this.input = options.param;\n\t\t}\n\t\tthis._events = new Timeline<AutomationEvent>(1000);\n\t\tthis._initialValue = this._param.defaultValue;\n\t\tthis.units = options.units;\n\t\tthis.convert = options.convert;\n\t\tthis._minValue = options.minValue;\n\t\tthis._maxValue = options.maxValue;\n\n\t\t// if the value is defined, set it immediately\n\t\tif (isDefined(options.value) && options.value !== this._toType(this._initialValue)) {\n\t\t\tthis.setValueAtTime(options.value, 0);\n\t\t}\n\t}\n\n\tstatic getDefaults(): ParamOptions<any> {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tconvert: true,\n\t\t\tunits: \"number\" as UnitName,\n\t\t} as ParamOptions<any>);\n\t}\n\n\tget value(): UnitMap[TypeName] {\n\t\tconst now = this.now();\n\t\treturn this.getValueAtTime(now);\n\t}\n\tset value(value) {\n\t\tthis._initialValue = this._fromType(value);\n\t\tthis.cancelScheduledValues(this.now());\n\t\tthis.setValueAtTime(value, this.now());\n\t}\n\n\tget minValue(): number {\n\t\t// if it's not the default minValue, return it\n\t\tif (isDefined(this._minValue)) {\n\t\t\treturn this._minValue;\n\t\t} else if (this.units === \"time\" || this.units === \"frequency\" ||\n\t\t\tthis.units === \"normalRange\" || this.units === \"positive\" ||\n\t\t\tthis.units === \"transportTime\" || this.units === \"ticks\" ||\n\t\t\tthis.units === \"bpm\" || this.units === \"hertz\" || this.units === \"samples\") {\n\t\t\treturn 0;\n\t\t} else if (this.units === \"audioRange\") {\n\t\t\treturn -1;\n\t\t} else if (this.units === \"decibels\") {\n\t\t\treturn -Infinity;\n\t\t} else {\n\t\t\treturn this._param.minValue;\n\t\t}\n\t}\n\n\tget maxValue(): number {\n\t\tif (isDefined(this._maxValue)) {\n\t\t\treturn this._maxValue;\n\t\t} else if (this.units === \"normalRange\" ||\n\t\t\tthis.units === \"audioRange\") {\n\t\t\treturn 1;\n\t\t} else {\n\t\t\treturn this._param.maxValue;\n\t\t}\n\t}\n\n\t/**\n\t * Type guard based on the unit name\n\t */\n\tprivate _is<T>(arg: any, type: UnitName): arg is T {\n\t\treturn this.units === type;\n\t}\n\n\t/**\n\t * Convert the given value from the type specified by Param.units\n\t * into the destination value (such as Gain or Frequency).\n\t */\n\tprotected _fromType(val: UnitMap[TypeName]): number {\n\t\tif (this.convert && !this.overridden) {\n\t\t\tif (this._is<Time>(val, \"time\")) {\n\t\t\t\treturn this.toSeconds(val);\n\t\t\t} else if (this._is<Decibels>(val, \"decibels\")) {\n\t\t\t\treturn dbToGain(val);\n\t\t\t} else if (this._is<Frequency>(val, \"frequency\")) {\n\t\t\t\treturn this.toFrequency(val);\n\t\t\t} else if (this._is<NormalRange>(val, \"normalRange\")) {\n\t\t\t\treturn Math.min(Math.max(val, 0), 1);\n\t\t\t} else if (this._is<AudioRange>(val, \"audioRange\")) {\n\t\t\t\treturn Math.min(Math.max(val, -1), 1);\n\t\t\t} else if (this._is<Positive>(val, \"positive\")) {\n\t\t\t\treturn Math.max(val, 0);\n\t\t\t} else if (this._is<number>(val, \"number\")) {\n\t\t\t\treturn val;\n\t\t\t} else {\n\t\t\t\treturn val as number;\n\t\t\t}\n\t\t} else {\n\t\t\treturn val as number;\n\t\t}\n\t}\n\n\t/**\n\t * Convert the parameters value into the units specified by Param.units.\n\t */\n\tprotected _toType(val: number): UnitMap[TypeName] {\n\t\tif (this.convert && this.units === \"decibels\") {\n\t\t\treturn gainToDb(val) as UnitMap[TypeName];\n\t\t} else {\n\t\t\treturn val as UnitMap[TypeName];\n\t\t}\n\t}\n\n\t//-------------------------------------\n\t// ABSTRACT PARAM INTERFACE\n\t// all docs are generated from ParamInterface.ts\n\t//-------------------------------------\n\n\tsetValueAtTime(value: UnitMap[TypeName], time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst numericValue = this._fromType(value);\n\t\tthis.assert(isFinite(numericValue) && isFinite(computedTime),\n\t\t\t`Invalid argument(s) to setValueAtTime: ${JSON.stringify(value)}, ${JSON.stringify(time)}`);\n\n\t\tthis.log(this.units, \"setValueAtTime\", value, computedTime);\n\t\tthis._events.add({\n\t\t\ttime: computedTime,\n\t\t\ttype: \"setValueAtTime\",\n\t\t\tvalue: numericValue,\n\t\t});\n\t\tthis._param.setValueAtTime(numericValue, computedTime);\n\t\treturn this;\n\t}\n\n\tgetValueAtTime(time: Time): UnitMap[TypeName] {\n\t\tconst computedTime = Math.max(this.toSeconds(time), 0);\n\t\tconst after = this._events.getAfter(computedTime);\n\t\tconst before = this._events.get(computedTime);\n\t\tlet value = this._initialValue;\n\t\t// if it was set by\n\t\tif (before === null) {\n\t\t\tvalue = this._initialValue;\n\t\t} else if (before.type === \"setTargetAtTime\" && (after === null || after.type === \"setValueAtTime\")) {\n\t\t\tconst previous = this._events.getBefore(before.time);\n\t\t\tlet previousVal;\n\t\t\tif (previous === null) {\n\t\t\t\tpreviousVal = this._initialValue;\n\t\t\t} else {\n\t\t\t\tpreviousVal = previous.value;\n\t\t\t}\n\t\t\tif (before.type === \"setTargetAtTime\") {\n\t\t\t\tvalue = this._exponentialApproach(before.time, previousVal, before.value, before.constant, computedTime);\n\t\t\t}\n\t\t} else if (after === null) {\n\t\t\tvalue = before.value;\n\t\t} else if (after.type === \"linearRampToValueAtTime\" || after.type === \"exponentialRampToValueAtTime\") {\n\t\t\tlet beforeValue = before.value;\n\t\t\tif (before.type === \"setTargetAtTime\") {\n\t\t\t\tconst previous = this._events.getBefore(before.time);\n\t\t\t\tif (previous === null) {\n\t\t\t\t\tbeforeValue = this._initialValue;\n\t\t\t\t} else {\n\t\t\t\t\tbeforeValue = previous.value;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (after.type === \"linearRampToValueAtTime\") {\n\t\t\t\tvalue = this._linearInterpolate(before.time, beforeValue, after.time, after.value, computedTime);\n\t\t\t} else {\n\t\t\t\tvalue = this._exponentialInterpolate(before.time, beforeValue, after.time, after.value, computedTime);\n\t\t\t}\n\t\t} else {\n\t\t\tvalue = before.value;\n\t\t}\n\t\treturn this._toType(value);\n\t}\n\n\tsetRampPoint(time: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tlet currentVal = this.getValueAtTime(time);\n\t\tthis.cancelAndHoldAtTime(time);\n\t\tif (this._fromType(currentVal) === 0) {\n\t\t\tcurrentVal = this._toType(this._minOutput);\n\t\t}\n\t\tthis.setValueAtTime(currentVal, time);\n\t\treturn this;\n\t}\n\n\tlinearRampToValueAtTime(value: UnitMap[TypeName], endTime: Time): this {\n\t\tconst numericValue = this._fromType(value);\n\t\tconst computedTime = this.toSeconds(endTime);\n\t\tthis.assert(isFinite(numericValue) && isFinite(computedTime),\n\t\t\t`Invalid argument(s) to linearRampToValueAtTime: ${JSON.stringify(value)}, ${JSON.stringify(endTime)}`);\n\t\tthis._events.add({\n\t\t\ttime: computedTime,\n\t\t\ttype: \"linearRampToValueAtTime\",\n\t\t\tvalue: numericValue,\n\t\t});\n\t\tthis.log(this.units, \"linearRampToValueAtTime\", value, computedTime);\n\t\tthis._param.linearRampToValueAtTime(numericValue, computedTime);\n\t\treturn this;\n\t}\n\n\texponentialRampToValueAtTime(value: UnitMap[TypeName], endTime: Time): this {\n\t\tlet numericValue = this._fromType(value);\n\t\tnumericValue = Math.max(this._minOutput, numericValue);\n\t\tconst computedTime = this.toSeconds(endTime);\n\t\tthis.assert(isFinite(numericValue) && isFinite(computedTime),\n\t\t\t`Invalid argument(s) to exponentialRampToValueAtTime: ${JSON.stringify(value)}, ${JSON.stringify(endTime)}`);\n\t\t// store the event\n\t\tthis._events.add({\n\t\t\ttime: computedTime,\n\t\t\ttype: \"exponentialRampToValueAtTime\",\n\t\t\tvalue: numericValue,\n\t\t});\n\t\tthis.log(this.units, \"exponentialRampToValueAtTime\", value, computedTime);\n\t\tthis._param.exponentialRampToValueAtTime(numericValue, computedTime);\n\t\treturn this;\n\t}\n\n\texponentialRampTo(value: UnitMap[TypeName], rampTime: Time, startTime?: Time): this {\n\t\tstartTime = this.toSeconds(startTime);\n\t\tthis.setRampPoint(startTime);\n\t\tthis.exponentialRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n\t\treturn this;\n\t}\n\n\tlinearRampTo(value: UnitMap[TypeName], rampTime: Time, startTime?: Time): this {\n\t\tstartTime = this.toSeconds(startTime);\n\t\tthis.setRampPoint(startTime);\n\t\tthis.linearRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n\t\treturn this;\n\t}\n\n\ttargetRampTo(value: UnitMap[TypeName], rampTime: Time, startTime?: Time): this {\n\t\tstartTime = this.toSeconds(startTime);\n\t\tthis.setRampPoint(startTime);\n\t\tthis.exponentialApproachValueAtTime(value, startTime, rampTime);\n\t\treturn this;\n\t}\n\n\texponentialApproachValueAtTime(value: UnitMap[TypeName], time: Time, rampTime: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\trampTime = this.toSeconds(rampTime);\n\t\tconst timeConstant = Math.log(rampTime + 1) / Math.log(200);\n\t\tthis.setTargetAtTime(value, time, timeConstant);\n\t\t// at 90% start a linear ramp to the final value\n\t\tthis.cancelAndHoldAtTime(time + rampTime * 0.9);\n\t\tthis.linearRampToValueAtTime(value, time + rampTime);\n\t\treturn this;\n\t}\n\n\tsetTargetAtTime(value: UnitMap[TypeName], startTime: Time, timeConstant: Positive): this {\n\t\tconst numericValue = this._fromType(value);\n\t\t// The value will never be able to approach without timeConstant > 0.\n\t\tthis.assert(isFinite(timeConstant) && timeConstant > 0, \"timeConstant must be a number greater than 0\");\n\t\tconst computedTime = this.toSeconds(startTime);\n\t\tthis.assert(isFinite(numericValue) && isFinite(computedTime),\n\t\t\t`Invalid argument(s) to setTargetAtTime: ${JSON.stringify(value)}, ${JSON.stringify(startTime)}`);\n\t\tthis._events.add({\n\t\t\tconstant: timeConstant,\n\t\t\ttime: computedTime,\n\t\t\ttype: \"setTargetAtTime\",\n\t\t\tvalue: numericValue,\n\t\t});\n\t\tthis.log(this.units, \"setTargetAtTime\", value, computedTime, timeConstant);\n\t\tthis._param.setTargetAtTime(numericValue, computedTime, timeConstant);\n\t\treturn this;\n\t}\n\n\tsetValueCurveAtTime(values: UnitMap[TypeName][], startTime: Time, duration: Time, scaling = 1): this {\n\t\tduration = this.toSeconds(duration);\n\t\tstartTime = this.toSeconds(startTime);\n\t\tconst startingValue = this._fromType(values[0]) * scaling;\n\t\tthis.setValueAtTime(this._toType(startingValue), startTime);\n\t\tconst segTime = duration / (values.length - 1);\n\t\tfor (let i = 1; i < values.length; i++) {\n\t\t\tconst numericValue = this._fromType(values[i]) * scaling;\n\t\t\tthis.linearRampToValueAtTime(this._toType(numericValue), startTime + i * segTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\tcancelScheduledValues(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis.assert(isFinite(computedTime), `Invalid argument to cancelScheduledValues: ${JSON.stringify(time)}`);\n\t\tthis._events.cancel(computedTime);\n\t\tthis._param.cancelScheduledValues(computedTime);\n\t\tthis.log(this.units, \"cancelScheduledValues\", computedTime);\n\t\treturn this;\n\t}\n\n\tcancelAndHoldAtTime(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst valueAtTime = this._fromType(this.getValueAtTime(computedTime));\n\t\t// remove the schedule events\n\t\tthis.assert(isFinite(computedTime), `Invalid argument to cancelAndHoldAtTime: ${JSON.stringify(time)}`);\n\n\t\tthis.log(this.units, \"cancelAndHoldAtTime\", computedTime, \"value=\" + valueAtTime);\n\t\t\n\t\t// if there is an event at the given computedTime\n\t\t// and that even is not a \"set\"\n\t\tconst before = this._events.get(computedTime);\n\t\tconst after = this._events.getAfter(computedTime);\n\t\tif (before && EQ(before.time, computedTime)) {\n\t\t\t// remove everything after\n\t\t\tif (after) {\n\t\t\t\tthis._param.cancelScheduledValues(after.time);\n\t\t\t\tthis._events.cancel(after.time);\n\t\t\t} else {\n\t\t\t\tthis._param.cancelAndHoldAtTime(computedTime);\n\t\t\t\tthis._events.cancel(computedTime + this.sampleTime);\n\t\t\t}\n\t\t} else if (after) {\n\t\t\tthis._param.cancelScheduledValues(after.time);\n\t\t\t// cancel the next event(s)\n\t\t\tthis._events.cancel(after.time);\n\t\t\tif (after.type === \"linearRampToValueAtTime\") {\n\t\t\t\tthis.linearRampToValueAtTime(this._toType(valueAtTime), computedTime);\n\t\t\t} else if (after.type === \"exponentialRampToValueAtTime\") {\n\t\t\t\tthis.exponentialRampToValueAtTime(this._toType(valueAtTime), computedTime);\n\t\t\t}\n\t\t}\n\n\t\t// set the value at the given time\n\t\tthis._events.add({\n\t\t\ttime: computedTime,\n\t\t\ttype: \"setValueAtTime\",\n\t\t\tvalue: valueAtTime,\n\t\t});\n\t\tthis._param.setValueAtTime(valueAtTime, computedTime);\n\t\treturn this;\n\t}\n\n\trampTo(value: UnitMap[TypeName], rampTime: Time = 0.1, startTime?: Time): this {\n\t\tif (this.units === \"frequency\" || this.units === \"bpm\" || this.units === \"decibels\") {\n\t\t\tthis.exponentialRampTo(value, rampTime, startTime);\n\t\t} else {\n\t\t\tthis.linearRampTo(value, rampTime, startTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Apply all of the previously scheduled events to the passed in Param or AudioParam.\n\t * The applied values will start at the context's current time and schedule\n\t * all of the events which are scheduled on this Param onto the passed in param.\n\t */\n\tapply(param: Param | AudioParam): this {\n\t\tconst now = this.context.currentTime;\n\t\t// set the param's value at the current time and schedule everything else\n\t\tparam.setValueAtTime(this.getValueAtTime(now) as number, now);\n\t\t// if the previous event was a curve, then set the rest of it\n\t\tconst previousEvent = this._events.get(now);\n\t\tif (previousEvent && previousEvent.type === \"setTargetAtTime\") {\n\t\t\t// approx it until the next event with linear ramps\n\t\t\tconst nextEvent = this._events.getAfter(previousEvent.time);\n\t\t\t// or for 2 seconds if there is no event\n\t\t\tconst endTime = nextEvent ? nextEvent.time : now + 2;\n\t\t\tconst subdivisions = (endTime - now) / 10;\n\t\t\tfor (let i = now; i < endTime; i += subdivisions) {\n\t\t\t\tparam.linearRampToValueAtTime(this.getValueAtTime(i) as number, i);\n\t\t\t}\n\t\t}\n\t\tthis._events.forEachAfter(this.context.currentTime, event => {\n\t\t\tif (event.type === \"cancelScheduledValues\") {\n\t\t\t\tparam.cancelScheduledValues(event.time);\n\t\t\t} else if (event.type === \"setTargetAtTime\") {\n\t\t\t\tparam.setTargetAtTime(event.value, event.time, event.constant);\n\t\t\t} else {\n\t\t\t\tparam[event.type](event.value, event.time);\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Replace the Param's internal AudioParam. Will apply scheduled curves \n\t * onto the parameter and replace the connections.\n\t */\n\tsetParam(param: AudioParam): this {\n\t\tthis.assert(this._swappable, \"The Param must be assigned as 'swappable' in the constructor\");\n\t\tconst input = this.input as GainNode;\n\t\tinput.disconnect(this._param);\n\t\tthis.apply(param);\n\t\tthis._param = param;\n\t\tinput.connect(this._param);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._events.dispose();\n\t\treturn this;\n\t}\n\n\tget defaultValue(): UnitMap[TypeName] {\n\t\treturn this._toType(this._param.defaultValue);\n\t}\n\n\t//-------------------------------------\n\t// \tAUTOMATION CURVE CALCULATIONS\n\t// \tMIT License, copyright (c) 2014 Jordan Santell\n\t//-------------------------------------\n\n\t// Calculates the the value along the curve produced by setTargetAtTime\n\tprotected _exponentialApproach(t0: number, v0: number, v1: number, timeConstant: number, t: number): number {\n\t\treturn v1 + (v0 - v1) * Math.exp(-(t - t0) / timeConstant);\n\t}\n\n\t// Calculates the the value along the curve produced by linearRampToValueAtTime\n\tprotected _linearInterpolate(t0: number, v0: number, t1: number, v1: number, t: number): number {\n\t\treturn v0 + (v1 - v0) * ((t - t0) / (t1 - t0));\n\t}\n\n\t// Calculates the the value along the curve produced by exponentialRampToValueAtTime\n\tprotected _exponentialInterpolate(t0: number, v0: number, t1: number, v1: number, t: number): number {\n\t\treturn v0 * Math.pow(v1 / v0, (t - t0) / (t1 - t0));\n\t}\n}\n","import { isAudioNode, isAudioParam } from \"../util/AdvancedTypeCheck\";\nimport { assert } from \"../util/Debug\";\nimport { isDefined } from \"../util/TypeCheck\";\nimport { Param } from \"./Param\";\nimport { ToneWithContext, ToneWithContextOptions } from \"./ToneWithContext\";\nimport { warn } from \"../util/Debug\";\n\nexport type InputNode = ToneAudioNode | AudioNode | Param<any> | AudioParam;\nexport type OutputNode = ToneAudioNode | AudioNode;\n\ninterface ChannelProperties {\n\tchannelCount: number;\n\tchannelCountMode: ChannelCountMode;\n\tchannelInterpretation: ChannelInterpretation;\n}\n\n/**\n * The possible options for this node\n */\nexport type ToneAudioNodeOptions = ToneWithContextOptions;\n\n/**\n * ToneAudioNode is the base class for classes which process audio.\n */\nexport abstract class ToneAudioNode<Options extends ToneAudioNodeOptions = ToneAudioNodeOptions>\n\textends ToneWithContext<Options> {\n\n\t/**\n\t * The name of the class\n\t */\n\tabstract readonly name: string = \"ToneAudioNode\";\n\n\t/**\n\t * The input node or nodes. If the object is a source,\n\t * it does not have any input and this.input is undefined.\n\t */\n\tabstract input: InputNode | undefined;\n\n\t/**\n\t * The output nodes. If the object is a sink,\n\t * it does not have any output and this.output is undefined.\n\t */\n\tabstract output: OutputNode | undefined;\n\n\t/**\n\t * The number of inputs feeding into the AudioNode.\n\t * For source nodes, this will be 0.\n\t */\n\tget numberOfInputs(): number {\n\t\tif (isDefined(this.input)) {\n\t\t\tif (isAudioParam(this.input) || this.input instanceof Param) {\n\t\t\t\treturn 1;\n\t\t\t} else {\n\t\t\t\treturn this.input.numberOfInputs;\n\t\t\t}\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * The number of outputs of the AudioNode.\n\t */\n\tget numberOfOutputs(): number {\n\t\tif (isDefined(this.output)) {\n\t\t\treturn this.output.numberOfOutputs;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * List all of the node that must be set to match the ChannelProperties\n\t */\n\tprotected _internalChannels: OutputNode[] = [];\n\n\t//-------------------------------------\n\t// AUDIO PROPERTIES\n\t//-------------------------------------\n\n\t/**\n\t * Used to decide which nodes to get/set properties on\n\t */\n\tprivate _isAudioNode(node: any): node is AudioNode | ToneAudioNode {\n\t\treturn isDefined(node) && (node instanceof ToneAudioNode || isAudioNode(node));\n\t}\n\n\t/**\n\t * Get all of the audio nodes (either internal or input/output) which together\n\t * make up how the class node responds to channel input/output\n\t */\n\tprivate _getInternalNodes(): OutputNode[] {\n\t\tconst nodeList = this._internalChannels.slice(0);\n\t\tif (this._isAudioNode(this.input)) {\n\t\t\tnodeList.push(this.input);\n\t\t}\n\t\tif (this._isAudioNode(this.output)) {\n\t\t\tif (this.input !== this.output) {\n\t\t\t\tnodeList.push(this.output);\n\t\t\t}\n\t\t}\n\t\treturn nodeList;\n\t}\n\n\t/**\n\t * Set the audio options for this node such as channelInterpretation\n\t * channelCount, etc.\n\t * @param options\n\t */\n\tprivate _setChannelProperties(options: ChannelProperties): void {\n\t\tconst nodeList = this._getInternalNodes();\n\t\tnodeList.forEach(node => {\n\t\t\tnode.channelCount = options.channelCount;\n\t\t\tnode.channelCountMode = options.channelCountMode;\n\t\t\tnode.channelInterpretation = options.channelInterpretation;\n\t\t});\n\t}\n\n\t/**\n\t * Get the current audio options for this node such as channelInterpretation\n\t * channelCount, etc.\n\t */\n\tprivate _getChannelProperties(): ChannelProperties {\n\t\tconst nodeList = this._getInternalNodes();\n\t\tthis.assert(nodeList.length > 0, \"ToneAudioNode does not have any internal nodes\");\n\t\t// use the first node to get properties\n\t\t// they should all be the same\n\t\tconst node = nodeList[0];\n\t\treturn {\n\t\t\tchannelCount: node.channelCount,\n\t\t\tchannelCountMode: node.channelCountMode,\n\t\t\tchannelInterpretation: node.channelInterpretation,\n\t\t};\n\t}\n\n\t/**\n\t * channelCount is the number of channels used when up-mixing and down-mixing\n\t * connections to any inputs to the node. The default value is 2 except for\n\t * specific nodes where its value is specially determined.\n\t */\n\tget channelCount(): number {\n\t\treturn this._getChannelProperties().channelCount;\n\t}\n\tset channelCount(channelCount) {\n\t\tconst props = this._getChannelProperties();\n\t\t// merge it with the other properties\n\t\tthis._setChannelProperties(Object.assign(props, { channelCount }));\n\t}\n\n\t/**\n\t * channelCountMode determines how channels will be counted when up-mixing and\n\t * down-mixing connections to any inputs to the node.\n\t * The default value is \"max\". This attribute has no effect for nodes with no inputs.\n\t * * \"max\" - computedNumberOfChannels is the maximum of the number of channels of all connections to an input. In this mode channelCount is ignored.\n\t * * \"clamped-max\" - computedNumberOfChannels is determined as for \"max\" and then clamped to a maximum value of the given channelCount.\n\t * * \"explicit\" - computedNumberOfChannels is the exact value as specified by the channelCount.\n\t */\n\tget channelCountMode(): ChannelCountMode {\n\t\treturn this._getChannelProperties().channelCountMode;\n\t}\n\tset channelCountMode(channelCountMode) {\n\t\tconst props = this._getChannelProperties();\n\t\t// merge it with the other properties\n\t\tthis._setChannelProperties(Object.assign(props, { channelCountMode }));\n\t}\n\n\t/**\n\t * channelInterpretation determines how individual channels will be treated\n\t * when up-mixing and down-mixing connections to any inputs to the node.\n\t * The default value is \"speakers\".\n\t */\n\tget channelInterpretation(): ChannelInterpretation {\n\t\treturn this._getChannelProperties().channelInterpretation;\n\t}\n\tset channelInterpretation(channelInterpretation) {\n\t\tconst props = this._getChannelProperties();\n\t\t// merge it with the other properties\n\t\tthis._setChannelProperties(Object.assign(props, { channelInterpretation }));\n\t}\n\n\t//-------------------------------------\n\t// CONNECTIONS\n\t//-------------------------------------\n\n\t/**\n\t * connect the output of a ToneAudioNode to an AudioParam, AudioNode, or ToneAudioNode\n\t * @param destination The output to connect to\n\t * @param outputNum The output to connect from\n\t * @param inputNum The input to connect to\n\t */\n\tconnect(destination: InputNode, outputNum = 0, inputNum = 0): this {\n\t\tconnect(this, destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Connect the output to the context's destination node.\n\t */\n\ttoDestination(): this {\n\t\tthis.connect(this.context.destination);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Connect the output to the context's destination node.\n\t * See [[toDestination]]\n\t * @deprecated\n\t */\n\ttoMaster(): this {\n\t\twarn(\"toMaster() has been renamed toDestination()\");\n\t\treturn this.toDestination();\n\t}\n\n\t/**\n\t * disconnect the output\n\t */\n\tdisconnect(destination?: InputNode, outputNum = 0, inputNum = 0): this {\n\t\tdisconnect(this, destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Connect the output of this node to the rest of the nodes in series.\n\t * @example\n\t * import { Destination, Filter, Oscillator, Volume } from \"tone\";\n\t * const osc = new Oscillator().start();\n\t * const filter = new Filter();\n\t * const volume = new Volume(-8);\n\t * // connect a node to the filter, volume and then to the master output\n\t * osc.chain(filter, volume, Destination);\n\t */\n\tchain(...nodes: InputNode[]): this {\n\t\tconnectSeries(this, ...nodes);\n\t\treturn this;\n\t}\n\n\t/**\n\t * connect the output of this node to the rest of the nodes in parallel.\n\t */\n\tfan(...nodes: InputNode[]): this {\n\t\tnodes.forEach(node => this.connect(node));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Dispose and disconnect\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (isDefined(this.input)) {\n\t\t\tif (this.input instanceof ToneAudioNode) {\n\t\t\t\tthis.input.dispose();\n\t\t\t} else if (isAudioNode(this.input)) {\n\t\t\t\tthis.input.disconnect();\n\t\t\t}\n\t\t}\n\t\tif (isDefined(this.output)) {\n\t\t\tif (this.output instanceof ToneAudioNode) {\n\t\t\t\tthis.output.dispose();\n\t\t\t} else if (isAudioNode(this.output)) {\n\t\t\t\tthis.output.disconnect();\n\t\t\t}\n\t\t}\n\t\tthis._internalChannels = [];\n\t\treturn this;\n\t}\n}\n\n//-------------------------------------\n// CONNECTIONS\n//-------------------------------------\n\n/**\n * connect together all of the arguments in series\n * @param nodes\n */\nexport function connectSeries(...nodes: InputNode[]): void {\n\tconst first = nodes.shift();\n\tnodes.reduce((prev, current) => {\n\t\tif (prev instanceof ToneAudioNode) {\n\t\t\tprev.connect(current);\n\t\t} else if (isAudioNode(prev)) {\n\t\t\tconnect(prev, current);\n\t\t}\n\t\treturn current;\n\t}, first);\n}\n\n/**\n * Connect two nodes together so that signal flows from the\n * first node to the second. Optionally specify the input and output channels.\n * @param srcNode The source node\n * @param dstNode The destination node\n * @param outputNumber The output channel of the srcNode\n * @param inputNumber The input channel of the dstNode\n */\nexport function connect(srcNode: OutputNode, dstNode: InputNode, outputNumber = 0, inputNumber = 0): void {\n\n\tassert(isDefined(srcNode), \"Cannot connect from undefined node\");\n\tassert(isDefined(dstNode), \"Cannot connect to undefined node\");\n\n\tif (dstNode instanceof ToneAudioNode || isAudioNode(dstNode)) {\n\t\tassert(dstNode.numberOfInputs > 0, \"Cannot connect to node with no inputs\");\n\t}\n\tassert(srcNode.numberOfOutputs > 0, \"Cannot connect from node with no outputs\");\n\n\t// resolve the input of the dstNode\n\twhile ((dstNode instanceof ToneAudioNode || dstNode instanceof Param)) {\n\t\tif (isDefined(dstNode.input)) {\n\t\t\tdstNode = dstNode.input;\n\t\t}\n\t}\n\n\twhile (srcNode instanceof ToneAudioNode) {\n\t\tif (isDefined(srcNode.output)) {\n\t\t\tsrcNode = srcNode.output;\n\t\t}\n\t}\n\n\t// make the connection\n\tif (isAudioParam(dstNode)) {\n\t\tsrcNode.connect(dstNode as AudioParam, outputNumber);\n\t} else {\n\t\tsrcNode.connect(dstNode, outputNumber, inputNumber);\n\t}\n}\n\n/**\n * Disconnect a node from all nodes or optionally include a destination node and input/output channels.\n * @param srcNode The source node\n * @param dstNode The destination node\n * @param outputNumber The output channel of the srcNode\n * @param inputNumber The input channel of the dstNode\n */\nexport function disconnect(\n\tsrcNode: OutputNode,\n\tdstNode?: InputNode,\n\toutputNumber = 0,\n\tinputNumber = 0,\n): void {\n\n\t// resolve the destination node\n\tif (isDefined(dstNode)) {\n\t\twhile (dstNode instanceof ToneAudioNode) {\n\t\t\tdstNode = dstNode.input;\n\t\t}\n\t}\n\n\t// resolve the src node\n\twhile (!(isAudioNode(srcNode))) {\n\t\tif (isDefined(srcNode.output)) {\n\t\t\tsrcNode = srcNode.output;\n\t\t}\n\t}\n\n\tif (isAudioParam(dstNode)) {\n\t\tsrcNode.disconnect(dstNode, outputNumber);\n\t} else if (isAudioNode(dstNode)) {\n\t\tsrcNode.disconnect(dstNode, outputNumber, inputNumber);\n\t} else {\n\t\tsrcNode.disconnect();\n\t}\n}\n","import { Param } from \"../context/Param\";\nimport { UnitMap, UnitName } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"./ToneAudioNode\";\n\ninterface GainOptions<TypeName extends UnitName> extends ToneAudioNodeOptions {\n\tgain: UnitMap[TypeName];\n\tunits: TypeName;\n\tconvert: boolean;\n}\n\n/**\n * A thin wrapper around the Native Web Audio GainNode.\n * The GainNode is a basic building block of the Web Audio\n * API and is useful for routing audio and adjusting gains.\n * @category Core\n */\nexport class Gain<TypeName extends \"gain\" | \"decibels\" | \"normalRange\" = \"gain\"> extends ToneAudioNode<GainOptions<TypeName>> {\n\n\treadonly name: string = \"Gain\";\n\n\t/**\n\t * The gain parameter of the gain node.\n\t */\n\treadonly gain: Param<TypeName>;\n\n\t/**\n\t * The wrapped GainNode.\n\t */\n\tprivate _gainNode: GainNode = this.context.createGain();\n\n\t// input = output\n\treadonly input: GainNode = this._gainNode;\n\treadonly output: GainNode = this._gainNode;\n\n\t/**\n\t * @param  gain The initial gain of the GainNode\n\t * @param units The units of the gain parameter.\n\t */\n\tconstructor(gain?: UnitMap[TypeName], units?: TypeName);\n\tconstructor(options?: Partial<GainOptions<TypeName>>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Gain.getDefaults(), arguments, [\"gain\", \"units\"]));\n\t\tconst options = optionsFromArguments(Gain.getDefaults(), arguments, [\"gain\", \"units\"]);\n\n\t\tthis.gain = new Param({\n\t\t\tcontext: this.context,\n\t\t\tconvert: options.convert,\n\t\t\tparam: this._gainNode.gain,\n\t\t\tunits: options.units,\n\t\t\tvalue: options.gain,\n\t\t});\n\t\treadOnly(this, \"gain\");\n\t}\n\n\tstatic getDefaults(): GainOptions<any> {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tconvert: true,\n\t\t\tgain: 1,\n\t\t\tunits: \"gain\",\n\t\t});\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._gainNode.disconnect();\n\t\tthis.gain.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../core/context/Gain\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { GainFactor, Seconds, Time } from \"../core/type/Units\";\nimport { noOp } from \"../core/util/Interface\";\nimport { BasicPlaybackState } from \"../core/util/StateTimeline\";\n\nexport type OneShotSourceCurve = \"linear\" | \"exponential\";\n\ntype onEndedCallback = (source: OneShotSource<any>) => void;\n\nexport interface OneShotSourceOptions extends ToneAudioNodeOptions {\n\tonended: onEndedCallback;\n\tfadeIn: Time;\n\tfadeOut: Time;\n\tcurve: OneShotSourceCurve;\n}\n\n/**\n * Base class for fire-and-forget nodes\n */\nexport abstract class OneShotSource<Options extends ToneAudioNodeOptions> extends ToneAudioNode<Options> {\n\n\t/**\n\t * The callback to invoke after the\n\t * source is done playing.\n\t */\n\tonended: onEndedCallback = noOp;\n\n\t/**\n\t * Sources do not have input nodes\n\t */\n\tinput: undefined;\n\n\t/**\n\t * The start time\n\t */\n\tprotected _startTime = -1;\n\n\t/**\n\t * The stop time\n\t */\n\tprotected _stopTime = -1;\n\n\t/**\n\t * The id of the timeout\n\t */\n\tprivate _timeout = -1;\n\n\t/**\n\t * The public output node\n\t */\n\toutput: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\n\t/**\n\t * The output gain node.\n\t */\n\tprotected _gainNode = this.output;\n\n\t/**\n\t * The fadeIn time of the amplitude envelope.\n\t */\n\tprotected _fadeIn: Time;\n\n\t/**\n\t * The fadeOut time of the amplitude envelope.\n\t */\n\tprotected _fadeOut: Time;\n\n\t/**\n\t * The curve applied to the fades, either \"linear\" or \"exponential\"\n\t */\n\tprotected _curve: OneShotSourceCurve;\n\n\tconstructor(options: OneShotSourceOptions) {\n\t\tsuper(options);\n\n\t\tthis._fadeIn = options.fadeIn;\n\t\tthis._fadeOut = options.fadeOut;\n\t\tthis._curve = options.curve;\n\t\tthis.onended = options.onended;\n\t}\n\n\tstatic getDefaults(): OneShotSourceOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tcurve: \"linear\" as OneShotSourceCurve,\n\t\t\tfadeIn: 0,\n\t\t\tfadeOut: 0,\n\t\t\tonended: noOp,\n\t\t});\n\t}\n\n\t/**\n\t * Stop the source node\n\t */\n\tprotected abstract _stopSource(time: Seconds): void;\n\n\t/**\n\t * Start the source node at the given time\n\t * @param  time When to start the node\n\t */\n\tprotected abstract start(time?: Time): this;\n\t/**\n\t * Start the source at the given time\n\t * @param  time When to start the source\n\t */\n\tprotected _startGain(time: Seconds, gain: GainFactor = 1): this {\n\t\tthis.assert(this._startTime === -1, \"Source cannot be started more than once\");\n\t\t// apply a fade in envelope\n\t\tconst fadeInTime = this.toSeconds(this._fadeIn);\n\n\t\t// record the start time\n\t\tthis._startTime = time + fadeInTime;\n\t\tthis._startTime = Math.max(this._startTime, this.context.currentTime);\n\n\t\t// schedule the envelope\n\t\tif (fadeInTime > 0) {\n\t\t\tthis._gainNode.gain.setValueAtTime(0, time);\n\t\t\tif (this._curve === \"linear\") {\n\t\t\t\tthis._gainNode.gain.linearRampToValueAtTime(gain, time + fadeInTime);\n\t\t\t} else {\n\t\t\t\tthis._gainNode.gain.exponentialApproachValueAtTime(gain, time, fadeInTime);\n\t\t\t}\n\t\t} else {\n\t\t\tthis._gainNode.gain.setValueAtTime(gain, time);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the source node at the given time.\n\t * @param time When to stop the source\n\t */\n\tstop(time?: Time): this {\n\t\tthis.log(\"stop\", time);\n\t\tthis._stopGain(this.toSeconds(time));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the source at the given time\n\t * @param  time When to stop the source\n\t */\n\tprotected _stopGain(time: Seconds): this {\n\t\tthis.assert(this._startTime !== -1, \"'start' must be called before 'stop'\");\n\t\t// cancel the previous stop\n\t\tthis.cancelStop();\n\n\t\t// the fadeOut time\n\t\tconst fadeOutTime = this.toSeconds(this._fadeOut);\n\n\t\t// schedule the stop callback\n\t\tthis._stopTime = this.toSeconds(time) + fadeOutTime;\n\t\tthis._stopTime = Math.max(this._stopTime, this.context.currentTime);\n\t\tif (fadeOutTime > 0) {\n\t\t\t// start the fade out curve at the given time\n\t\t\tif (this._curve === \"linear\") {\n\t\t\t\tthis._gainNode.gain.linearRampTo(0, fadeOutTime, time);\n\t\t\t} else {\n\t\t\t\tthis._gainNode.gain.targetRampTo(0, fadeOutTime, time);\n\t\t\t}\n\t\t} else {\n\t\t\t// stop any ongoing ramps, and set the value to 0\n\t\t\tthis._gainNode.gain.cancelAndHoldAtTime(time);\n\t\t\tthis._gainNode.gain.setValueAtTime(0, time);\n\t\t}\n\t\tthis.context.clearTimeout(this._timeout);\n\t\tthis._timeout = this.context.setTimeout(() => {\n\t\t\t// allow additional time for the exponential curve to fully decay\n\t\t\tconst additionalTail = this._curve === \"exponential\" ? fadeOutTime * 2 : 0;\n\t\t\tthis._stopSource(this.now() + additionalTail);\n\t\t\tthis._onended();\n\t\t}, this._stopTime - this.context.now());\n\t\treturn this;\n\t}\n\n\t/**\n\t * Invoke the onended callback\n\t */\n\tprotected _onended(): void {\n\t\tif (this.onended !== noOp) {\n\t\t\tthis.onended(this);\n\t\t\t// overwrite onended to make sure it only is called once\n\t\t\tthis.onended = noOp;\n\t\t\t// dispose when it's ended to free up for garbage collection only in the online context\n\t\t\tif (!this.context.isOffline) {\n\t\t\t\tsetTimeout(() => this.dispose(), 1000);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Get the playback state at the given time\n\t */\n\tgetStateAtTime = function(time: Time): BasicPlaybackState {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._startTime !== -1 && computedTime >= this._startTime &&\n\t\t\t(this._stopTime === -1 || computedTime <= this._stopTime)) {\n\t\t\treturn \"started\";\n\t\t} else {\n\t\t\treturn \"stopped\";\n\t\t}\n\t};\n\n\t/**\n\t * Get the playback state at the current time\n\t */\n\tget state(): BasicPlaybackState {\n\t\treturn this.getStateAtTime(this.now());\n\t}\n\n\t/**\n\t * Cancel a scheduled stop event\n\t */\n\tcancelStop(): this {\n\t\tthis.log(\"cancelStop\");\n\t\tthis.assert(this._startTime !== -1, \"Source is not started\");\n\t\t// cancel the stop envelope\n\t\tthis._gainNode.gain.cancelScheduledValues(this._startTime + this.sampleTime);\n\t\tthis.context.clearTimeout(this._timeout);\n\t\tthis._stopTime = -1;\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._gainNode.disconnect();\n\t\treturn this;\n\t}\n}\n","import { connect } from \"../core/Connect\";\nimport { Param } from \"../core/context/Param\";\nimport { Seconds, Time, UnitMap, UnitName } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { OneShotSource, OneShotSourceOptions } from \"../source/OneShotSource\";\n\nexport interface ToneConstantSourceOptions<TypeName extends UnitName> extends OneShotSourceOptions {\n\tconvert: boolean;\n\toffset: UnitMap[TypeName];\n\tunits: TypeName;\n}\n\n/**\n * Wrapper around the native fire-and-forget ConstantSource.\n * Adds the ability to reschedule the stop method.\n * @category Signal\n */\nexport class ToneConstantSource<TypeName extends UnitName = \"number\"> extends OneShotSource<ToneConstantSourceOptions<TypeName>> {\n\n\treadonly name: string = \"ToneConstantSource\";\n\n\t/**\n\t * The signal generator\n\t */\n\tprivate _source = this.context.createConstantSource();\n\n\t/**\n\t * The offset of the signal generator\n\t */\n\treadonly offset: Param<TypeName>;\n\n\t/**\n\t * @param  offset   The offset value\n\t */\n\tconstructor(offset: UnitMap[TypeName]);\n\tconstructor(options?: Partial<ToneConstantSourceOptions<TypeName>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(ToneConstantSource.getDefaults(), arguments, [\"offset\"]));\n\t\tconst options = optionsFromArguments(ToneConstantSource.getDefaults(), arguments, [\"offset\"]);\n\n\t\tconnect(this._source, this._gainNode);\n\n\t\tthis.offset = new Param({\n\t\t\tcontext: this.context,\n\t\t\tconvert: options.convert,\n\t\t\tparam: this._source.offset,\n\t\t\tunits: options.units,\n\t\t\tvalue: options.offset,\n\t\t});\n\t}\n\n\tstatic getDefaults(): ToneConstantSourceOptions<any> {\n\t\treturn Object.assign(OneShotSource.getDefaults(), {\n\t\t\tconvert: true,\n\t\t\toffset: 1,\n\t\t\tunits: \"number\" as UnitName,\n\t\t});\n\t}\n\n\t/**\n\t * Start the source node at the given time\n\t * @param  time When to start the source\n\t */\n\tstart(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis.log(\"start\", computedTime);\n\t\tthis._startGain(computedTime);\n\t\tthis._source.start(computedTime);\n\t\treturn this;\n\t}\n\n\tprotected _stopSource(time?: Seconds): void {\n\t\tthis._source.stop(time);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (this.state === \"started\") {\n\t\t\tthis.stop();\n\t\t}\n\t\tthis._source.disconnect();\n\t\tthis.offset.dispose();\n\t\treturn this;\n\t}\n}\n","import { AbstractParam } from \"../core/context/AbstractParam\";\nimport { Param } from \"../core/context/Param\";\nimport { InputNode, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { connect } from \"../core/context/ToneAudioNode\";\nimport { Time, UnitMap, UnitName } from \"../core/type/Units\";\nimport { isAudioParam } from \"../core/util/AdvancedTypeCheck\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { ToneConstantSource } from \"./ToneConstantSource\";\n\nexport interface SignalOptions<TypeName extends UnitName> extends ToneAudioNodeOptions {\n\tvalue: UnitMap[TypeName];\n\tunits: TypeName;\n\tconvert: boolean;\n}\n\n/**\n * A signal is an audio-rate value. Tone.Signal is a core component of the library.\n * Unlike a number, Signals can be scheduled with sample-level accuracy. Tone.Signal\n * has all of the methods available to native Web Audio\n * [AudioParam](http://webaudio.github.io/web-audio-api/#the-audioparam-interface)\n * as well as additional conveniences. Read more about working with signals\n * [here](https://github.com/Tonejs/Tone.js/wiki/Signals).\n *\n * @example\n * import { Oscillator, Signal } from \"tone\";\n * const osc = new Oscillator().toDestination().start();\n * // a scheduleable signal which can be connected to control an AudioParam or another Signal\n * const signal = new Signal({\n * \tvalue: \"C4\",\n * \tunits: \"frequency\"\n * }).connect(osc.frequency);\n * // the scheduled ramp controls the connected signal\n * signal.rampTo(\"C2\", 4, \"+0.5\");\n * @category Signal\n */\nexport class Signal<TypeName extends UnitName = \"number\"> extends ToneAudioNode<SignalOptions<any>>\n\timplements AbstractParam<TypeName> {\n\n\treadonly name: string = \"Signal\";\n\n\t/**\n\t * Indicates if the value should be overridden on connection.\n\t */\n\treadonly override: boolean = true;\n\n\t/**\n\t * The constant source node which generates the signal\n\t */\n\tprotected _constantSource: ToneConstantSource<TypeName>;\n\treadonly output: OutputNode;\n\tprotected _param: Param<TypeName>;\n\treadonly input: InputNode;\n\n\t/**\n\t * @param value Initial value of the signal\n\t * @param units The unit name, e.g. \"frequency\"\n\t */\n\tconstructor(value?: UnitMap[TypeName], units?: TypeName);\n\tconstructor(options?: Partial<SignalOptions<TypeName>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]));\n\n\t\tconst options = optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]) as SignalOptions<TypeName>;\n\n\t\tthis.output = this._constantSource = new ToneConstantSource({\n\t\t\tcontext: this.context,\n\t\t\tconvert: options.convert,\n\t\t\toffset: options.value,\n\t\t\tunits: options.units,\n\t\t});\n\t\tthis._constantSource.start(0);\n\t\tthis.input = this._param = this._constantSource.offset;\n\t}\n\n\tstatic getDefaults(): SignalOptions<any> {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tconvert: true,\n\t\t\tunits: \"number\" as UnitName,\n\t\t\tvalue: 0,\n\t\t});\n\t}\n\n\tconnect(destination: InputNode, outputNum = 0, inputNum = 0): this {\n\t\t// start it only when connected to something\n\t\tconnectSignal(this, destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._param.dispose();\n\t\tthis._constantSource.dispose();\n\t\treturn this;\n\t}\n\n\t//-------------------------------------\n\t// ABSTRACT PARAM INTERFACE\n\t// just a proxy for the ConstantSourceNode's offset AudioParam\n\t// all docs are generated from AbstractParam.ts\n\t//-------------------------------------\n\n\tsetValueAtTime(value: UnitMap[TypeName], time: Time): this {\n\t\tthis._param.setValueAtTime(value, time);\n\t\treturn this;\n\t}\n\tgetValueAtTime(time: Time): UnitMap[TypeName] {\n\t\treturn this._param.getValueAtTime(time);\n\t}\n\tsetRampPoint(time: Time): this {\n\t\tthis._param.setRampPoint(time);\n\t\treturn this;\n\t}\n\tlinearRampToValueAtTime(value: UnitMap[TypeName], time: Time): this {\n\t\tthis._param.linearRampToValueAtTime(value, time);\n\t\treturn this;\n\t}\n\texponentialRampToValueAtTime(value: UnitMap[TypeName], time: Time): this {\n\t\tthis._param.exponentialRampToValueAtTime(value, time);\n\t\treturn this;\n\t}\n\texponentialRampTo(value: UnitMap[TypeName], rampTime: Time, startTime?: Time): this {\n\t\tthis._param.exponentialRampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\tlinearRampTo(value: UnitMap[TypeName], rampTime: Time, startTime?: Time): this {\n\t\tthis._param.linearRampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\ttargetRampTo(value: UnitMap[TypeName], rampTime: Time, startTime?: Time): this {\n\t\tthis._param.targetRampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\texponentialApproachValueAtTime(value: UnitMap[TypeName], time: Time, rampTime: Time): this {\n\t\tthis._param.exponentialApproachValueAtTime(value, time, rampTime);\n\t\treturn this;\n\t}\n\tsetTargetAtTime(value: UnitMap[TypeName], startTime: Time, timeConstant: number): this {\n\t\tthis._param.setTargetAtTime(value, startTime, timeConstant);\n\t\treturn this;\n\t}\n\tsetValueCurveAtTime(values: UnitMap[TypeName][], startTime: Time, duration: Time, scaling?: number): this {\n\t\tthis._param.setValueCurveAtTime(values, startTime, duration, scaling);\n\t\treturn this;\n\t}\n\tcancelScheduledValues(time: Time): this {\n\t\tthis._param.cancelScheduledValues(time);\n\t\treturn this;\n\t}\n\tcancelAndHoldAtTime(time: Time): this {\n\t\tthis._param.cancelAndHoldAtTime(time);\n\t\treturn this;\n\t}\n\trampTo(value: UnitMap[TypeName], rampTime: Time, startTime?: Time): this {\n\t\tthis._param.rampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\n\tget value(): UnitMap[TypeName] {\n\t\treturn this._param.value;\n\t}\n\tset value(value: UnitMap[TypeName]) {\n\t\tthis._param.value = value;\n\t}\n\n\tget convert(): boolean {\n\t\treturn this._param.convert;\n\t}\n\tset convert(convert: boolean) {\n\t\tthis._param.convert = convert;\n\t}\n\n\tget units(): UnitName {\n\t\treturn this._param.units;\n\t}\n\n\tget overridden(): boolean {\n\t\treturn this._param.overridden;\n\t}\n\tset overridden(overridden: boolean) {\n\t\tthis._param.overridden = overridden;\n\t}\n\n\tget maxValue(): number {\n\t\treturn this._param.maxValue;\n\t}\n\tget minValue(): number {\n\t\treturn this._param.minValue;\n\t}\n\n\t/**\n\t * See [[Param.apply]].\n\t */\n\tapply(param: Param | AudioParam): this {\n\t\tthis._param.apply(param);\n\t\treturn this;\n\t}\n}\n\n/**\n * When connecting from a signal, it's necessary to zero out the node destination\n * node if that node is also a signal. If the destination is not 0, then the values\n * will be summed. This method insures that the output of the destination signal will\n * be the same as the source signal, making the destination signal a pass through node.\n * @param signal The output signal to connect from\n * @param destination the destination to connect to\n * @param outputNum the optional output number\n * @param inputNum the input number\n */\nexport function connectSignal(signal: OutputNode, destination: InputNode, outputNum?: number, inputNum?: number): void {\n\tif (destination instanceof Param || isAudioParam(destination) ||\n\t\t(destination instanceof Signal && destination.override)) {\n\t\t// cancel changes\n\t\tdestination.cancelScheduledValues(0);\n\t\t// reset the value\n\t\tdestination.setValueAtTime(0, 0);\n\t\t// mark the value as overridden\n\t\tif (destination instanceof Signal) {\n\t\t\tdestination.overridden = true;\n\t\t}\n\t}\n\tconnect(signal, destination, outputNum, inputNum);\n}\n","import { AutomationEvent, Param, ParamOptions } from \"../context/Param\";\nimport { Seconds, Ticks, Time, UnitMap, UnitName } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isUndef } from \"../util/TypeCheck\";\n\ntype TickAutomationEvent = AutomationEvent & {\n\tticks: number;\n};\n\ninterface TickParamOptions<TypeName extends UnitName> extends ParamOptions<TypeName> {\n\tmultiplier: number;\n}\n\n/**\n * A Param class just for computing ticks. Similar to the [[Param]] class,\n * but offers conversion to BPM values as well as ability to compute tick\n * duration and elapsed ticks\n */\nexport class TickParam<TypeName extends \"hertz\" | \"bpm\"> extends Param<TypeName> {\n\n\treadonly name: string = \"TickParam\";\n\n\t/**\n\t * The timeline which tracks all of the automations.\n\t */\n\tprotected _events: Timeline<TickAutomationEvent> = new Timeline(Infinity);\n\n\t/**\n\t * The internal holder for the multiplier value\n\t */\n\tprivate _multiplier = 1;\n\n\t/**\n\t * @param param The AudioParam to wrap\n\t * @param units The unit name\n\t * @param convert Whether or not to convert the value to the target units\n\t */\n\t/**\n\t * @param value The initial value of the signal\n\t */\n\tconstructor(value?: number);\n\tconstructor(options: Partial<TickParamOptions<TypeName>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(TickParam.getDefaults(), arguments, [\"value\"]));\n\t\tconst options = optionsFromArguments(TickParam.getDefaults(), arguments, [\"value\"]);\n\n\t\t// set the multiplier\n\t\tthis._multiplier = options.multiplier;\n\n\t\t// clear the ticks from the beginning\n\t\tthis._events.cancel(0);\n\t\t// set an initial event\n\t\tthis._events.add({\n\t\t\tticks: 0,\n\t\t\ttime: 0,\n\t\t\ttype: \"setValueAtTime\",\n\t\t\tvalue: this._fromType(options.value),\n\t\t});\n\t\tthis.setValueAtTime(options.value, 0);\n\t}\n\n\tstatic getDefaults(): TickParamOptions<any> {\n\t\treturn Object.assign(Param.getDefaults(), {\n\t\t\tmultiplier: 1,\n\t\t\tunits: \"hertz\",\n\t\t\tvalue: 1,\n\t\t});\n\t}\n\n\tsetTargetAtTime(value: UnitMap[TypeName], time: Time, constant: number): this {\n\t\t// approximate it with multiple linear ramps\n\t\ttime = this.toSeconds(time);\n\t\tthis.setRampPoint(time);\n\t\tconst computedValue = this._fromType(value);\n\n\t\t// start from previously scheduled value\n\t\tconst prevEvent = this._events.get(time) as TickAutomationEvent;\n\t\tconst segments = Math.round(Math.max(1 / constant, 1));\n\t\tfor (let i = 0; i <= segments; i++) {\n\t\t\tconst segTime = constant * i + time;\n\t\t\tconst rampVal = this._exponentialApproach(prevEvent.time, prevEvent.value, computedValue, constant, segTime);\n\t\t\tthis.linearRampToValueAtTime(this._toType(rampVal), segTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\tsetValueAtTime(value: UnitMap[TypeName], time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tsuper.setValueAtTime(value, time);\n\t\tconst event = this._events.get(computedTime) as TickAutomationEvent;\n\t\tconst previousEvent = this._events.previousEvent(event);\n\t\tconst ticksUntilTime = this._getTicksUntilEvent(previousEvent, computedTime);\n\t\tevent.ticks = Math.max(ticksUntilTime, 0);\n\t\treturn this;\n\t}\n\n\tlinearRampToValueAtTime(value: UnitMap[TypeName], time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tsuper.linearRampToValueAtTime(value, time);\n\t\tconst event = this._events.get(computedTime) as TickAutomationEvent;\n\t\tconst previousEvent = this._events.previousEvent(event);\n\t\tconst ticksUntilTime = this._getTicksUntilEvent(previousEvent, computedTime);\n\t\tevent.ticks = Math.max(ticksUntilTime, 0);\n\t\treturn this;\n\t}\n\n\texponentialRampToValueAtTime(value: UnitMap[TypeName], time: Time): this {\n\t\t// aproximate it with multiple linear ramps\n\t\ttime = this.toSeconds(time);\n\t\tconst computedVal = this._fromType(value);\n\n\t\t// start from previously scheduled value\n\t\tconst prevEvent = this._events.get(time) as TickAutomationEvent;\n\t\t// approx 10 segments per second\n\t\tconst segments = Math.round(Math.max((time - prevEvent.time) * 10, 1));\n\t\tconst segmentDur = ((time - prevEvent.time) / segments);\n\t\tfor (let i = 0; i <= segments; i++) {\n\t\t\tconst segTime = segmentDur * i + prevEvent.time;\n\t\t\tconst rampVal = this._exponentialInterpolate(prevEvent.time, prevEvent.value, time, computedVal, segTime);\n\t\t\tthis.linearRampToValueAtTime(this._toType(rampVal), segTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the tick value at the time. Takes into account\n\t * any automation curves scheduled on the signal.\n\t * @param  event The time to get the tick count at\n\t * @return The number of ticks which have elapsed at the time given any automations.\n\t */\n\tprivate _getTicksUntilEvent(event: TickAutomationEvent | null, time: number): Ticks {\n\t\tif (event === null) {\n\t\t\tevent = {\n\t\t\t\tticks: 0,\n\t\t\t\ttime: 0,\n\t\t\t\ttype: \"setValueAtTime\",\n\t\t\t\tvalue: 0,\n\t\t\t};\n\t\t} else if (isUndef(event.ticks)) {\n\t\t\tconst previousEvent = this._events.previousEvent(event);\n\t\t\tevent.ticks = this._getTicksUntilEvent(previousEvent, event.time);\n\t\t}\n\t\tconst val0 = this._fromType(this.getValueAtTime(event.time));\n\t\tlet val1 = this._fromType(this.getValueAtTime(time));\n\t\t// if it's right on the line, take the previous value\n\t\tconst onTheLineEvent = this._events.get(time);\n\t\tif (onTheLineEvent && onTheLineEvent.time === time && onTheLineEvent.type === \"setValueAtTime\") {\n\t\t\tval1 = this._fromType(this.getValueAtTime(time - this.sampleTime));\n\t\t}\n\t\treturn 0.5 * (time - event.time) * (val0 + val1) + event.ticks;\n\t}\n\n\t/**\n\t * Returns the tick value at the time. Takes into account\n\t * any automation curves scheduled on the signal.\n\t * @param  time The time to get the tick count at\n\t * @return The number of ticks which have elapsed at the time given any automations.\n\t */\n\tgetTicksAtTime(time: Time): Ticks {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst event = this._events.get(computedTime);\n\t\treturn Math.max(this._getTicksUntilEvent(event, computedTime), 0);\n\t}\n\n\t/**\n\t * Return the elapsed time of the number of ticks from the given time\n\t * @param ticks The number of ticks to calculate\n\t * @param  time The time to get the next tick from\n\t * @return The duration of the number of ticks from the given time in seconds\n\t */\n\tgetDurationOfTicks(ticks: Ticks, time: Time): Seconds {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst currentTick = this.getTicksAtTime(time);\n\t\treturn this.getTimeOfTick(currentTick + ticks) - computedTime;\n\t}\n\n\t/**\n\t * Given a tick, returns the time that tick occurs at.\n\t * @return The time that the tick occurs.\n\t */\n\tgetTimeOfTick(tick: Ticks): Seconds {\n\t\tconst before = this._events.get(tick, \"ticks\");\n\t\tconst after = this._events.getAfter(tick, \"ticks\");\n\t\tif (before && before.ticks === tick) {\n\t\t\treturn before.time;\n\t\t} else if (before && after &&\n\t\t\tafter.type === \"linearRampToValueAtTime\" &&\n\t\t\tbefore.value !== after.value) {\n\t\t\tconst val0 = this._fromType(this.getValueAtTime(before.time));\n\t\t\tconst val1 = this._fromType(this.getValueAtTime(after.time));\n\t\t\tconst delta = (val1 - val0) / (after.time - before.time);\n\t\t\tconst k = Math.sqrt(Math.pow(val0, 2) - 2 * delta * (before.ticks - tick));\n\t\t\tconst sol1 = (-val0 + k) / delta;\n\t\t\tconst sol2 = (-val0 - k) / delta;\n\t\t\treturn (sol1 > 0 ? sol1 : sol2) + before.time;\n\t\t} else if (before) {\n\t\t\tif (before.value === 0) {\n\t\t\t\treturn Infinity;\n\t\t\t} else {\n\t\t\t\treturn before.time + (tick - before.ticks) / before.value;\n\t\t\t}\n\t\t} else {\n\t\t\treturn tick / this._initialValue;\n\t\t}\n\t}\n\n\t/**\n\t * Convert some number of ticks their the duration in seconds accounting\n\t * for any automation curves starting at the given time.\n\t * @param  ticks The number of ticks to convert to seconds.\n\t * @param  when  When along the automation timeline to convert the ticks.\n\t * @return The duration in seconds of the ticks.\n\t */\n\tticksToTime(ticks: Ticks, when: Time): Seconds {\n\t\treturn this.getDurationOfTicks(ticks, when);\n\t}\n\n\t/**\n\t * The inverse of [[ticksToTime]]. Convert a duration in\n\t * seconds to the corresponding number of ticks accounting for any\n\t * automation curves starting at the given time.\n\t * @param  duration The time interval to convert to ticks.\n\t * @param  when When along the automation timeline to convert the ticks.\n\t * @return The duration in ticks.\n\t */\n\ttimeToTicks(duration: Time, when: Time): Ticks {\n\t\tconst computedTime = this.toSeconds(when);\n\t\tconst computedDuration = this.toSeconds(duration);\n\t\tconst startTicks = this.getTicksAtTime(computedTime);\n\t\tconst endTicks = this.getTicksAtTime(computedTime + computedDuration);\n\t\treturn endTicks - startTicks;\n\t}\n\n\t/**\n\t * Convert from the type when the unit value is BPM\n\t */\n\tprotected _fromType(val: UnitMap[TypeName]): number {\n\t\tif (this.units === \"bpm\" && this.multiplier) {\n\t\t\treturn 1 / (60 / val / this.multiplier);\n\t\t} else {\n\t\t\treturn super._fromType(val);\n\t\t}\n\t}\n\n\t/**\n\t * Special case of type conversion where the units === \"bpm\"\n\t */\n\tprotected _toType(val: number): UnitMap[TypeName] {\n\t\tif (this.units === \"bpm\" && this.multiplier) {\n\t\t\treturn (val / this.multiplier) * 60 as UnitMap[TypeName];\n\t\t} else {\n\t\t\treturn super._toType(val);\n\t\t}\n\t}\n\t/**\n\t * A multiplier on the bpm value. Useful for setting a PPQ relative to the base frequency value.\n\t */\n\tget multiplier(): number {\n\t\treturn this._multiplier;\n\t}\n\tset multiplier(m: number) {\n\t\t// get and reset the current value with the new multiplier\n\t\t// might be necessary to clear all the previous values\n\t\tconst currentVal = this.value;\n\t\tthis._multiplier = m;\n\t\tthis.value = currentVal;\n\t}\n}\n","import { Signal, SignalOptions } from \"../../signal/Signal\";\nimport { InputNode } from \"../context/ToneAudioNode\";\nimport { Seconds, Ticks, Time, UnitMap, UnitName } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { TickParam } from \"./TickParam\";\n\ninterface TickSignalOptions<TypeName extends UnitName> extends SignalOptions<TypeName> {\n\tvalue: UnitMap[TypeName];\n\tmultiplier: number;\n}\n\n/**\n * TickSignal extends Tone.Signal, but adds the capability\n * to calculate the number of elapsed ticks. exponential and target curves\n * are approximated with multiple linear ramps.\n *\n * Thank you Bruno Dias, H. Sofia Pinto, and David M. Matos,\n * for your [WAC paper](https://smartech.gatech.edu/bitstream/handle/1853/54588/WAC2016-49.pdf)\n * describing integrating timing functions for tempo calculations.\n */\nexport class TickSignal<TypeName extends \"hertz\" | \"bpm\"> extends Signal<TypeName> {\n\n\treadonly name: string = \"TickSignal\";\n\n\t/**\n\t * The param which controls the output signal value\n\t */\n\tprotected _param: TickParam<TypeName>;\n\treadonly input: InputNode;\n\n\t/**\n\t * @param value The initial value of the signal\n\t */\n\tconstructor(value?: UnitMap[TypeName]);\n\tconstructor(options: Partial<TickSignalOptions<TypeName>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(TickSignal.getDefaults(), arguments, [\"value\"]));\n\t\tconst options = optionsFromArguments(TickSignal.getDefaults(), arguments, [\"value\"]);\n\n\t\tthis.input = this._param = new TickParam({\n\t\t\tcontext: this.context,\n\t\t\tconvert: options.convert,\n\t\t\tmultiplier: options.multiplier,\n\t\t\tparam: this._constantSource.offset,\n\t\t\tunits: options.units,\n\t\t\tvalue: options.value,\n\t\t});\n\t}\n\n\tstatic getDefaults(): TickSignalOptions<any> {\n\t\treturn Object.assign(Signal.getDefaults(), {\n\t\t\tmultiplier: 1,\n\t\t\tunits: \"hertz\",\n\t\t\tvalue: 1,\n\t\t});\n\t}\n\n\tticksToTime(ticks: Ticks, when: Time): Seconds {\n\t\treturn this._param.ticksToTime(ticks, when);\n\t}\n\n\ttimeToTicks(duration: Time, when: Time): Ticks {\n\t\treturn this._param.timeToTicks(duration, when);\n\t}\n\n\tgetTimeOfTick(tick: Ticks): Seconds {\n\t\treturn this._param.getTimeOfTick(tick);\n\t}\n\n\tgetDurationOfTicks(ticks: Ticks, time: Time): Seconds {\n\t\treturn this._param.getDurationOfTicks(ticks, time);\n\t}\n\n\tgetTicksAtTime(time: Time): Ticks {\n\t\treturn this._param.getTicksAtTime(time);\n\t}\n\n\t/**\n\t * A multiplier on the bpm value. Useful for setting a PPQ relative to the base frequency value.\n\t */\n\tget multiplier(): number {\n\t\treturn this._param.multiplier;\n\t}\n\tset multiplier(m: number) {\n\t\tthis._param.multiplier = m;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._param.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneWithContext, ToneWithContextOptions } from \"../context/ToneWithContext\";\nimport { Seconds, Ticks, Time } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { PlaybackState, StateTimeline, StateTimelineEvent } from \"../util/StateTimeline\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isDefined } from \"../util/TypeCheck\";\nimport { TickSignal } from \"./TickSignal\";\n\ninterface TickSourceOptions extends ToneWithContextOptions {\n\tfrequency: number;\n\tunits: \"bpm\" | \"hertz\";\n}\n\ninterface TickSourceOffsetEvent {\n\tticks: number;\n\ttime: number;\n\tseconds: number;\n}\n\n/**\n * Uses [TickSignal](TickSignal) to track elapsed ticks with complex automation curves.\n */\nexport class TickSource<TypeName extends \"bpm\" | \"hertz\"> extends ToneWithContext<TickSourceOptions> {\n\n\treadonly name: string = \"TickSource\";\n\n\t/**\n\t * The frequency the callback function should be invoked.\n\t */\n\treadonly frequency: TickSignal<TypeName>;\n\n\t/**\n\t * The state timeline\n\t */\n\tprivate _state: StateTimeline = new StateTimeline();\n\n\t/**\n\t * The offset values of the ticks\n\t */\n\tprivate _tickOffset: Timeline<TickSourceOffsetEvent> = new Timeline();\n\n\t/**\n\t * @param frequency The initial frequency that the signal ticks at\n\t */\n\tconstructor(frequency?: number);\n\tconstructor(options?: Partial<TickSourceOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(TickSource.getDefaults(), arguments, [\"frequency\"]));\n\t\tconst options = optionsFromArguments(TickSource.getDefaults(), arguments, [\"frequency\"]);\n\n\t\tthis.frequency = new TickSignal({\n\t\t\tcontext: this.context,\n\t\t\tunits: options.units as TypeName,\n\t\t\tvalue: options.frequency,\n\t\t});\n\t\treadOnly(this, \"frequency\");\n\n\t\t// set the initial state\n\t\tthis._state.setStateAtTime(\"stopped\", 0);\n\t\t// add the first event\n\t\tthis.setTicksAtTime(0, 0);\n\t}\n\n\tstatic getDefaults(): TickSourceOptions {\n\t\treturn Object.assign({\n\t\t\tfrequency: 1,\n\t\t\tunits: \"hertz\" as \"hertz\",\n\t\t}, ToneWithContext.getDefaults());\n\t}\n\n\t/**\n\t * Returns the playback state of the source, either \"started\", \"stopped\" or \"paused\".\n\t */\n\tget state(): PlaybackState {\n\t\treturn this.getStateAtTime(this.now());\n\t}\n\n\t/**\n\t * Start the clock at the given time. Optionally pass in an offset\n\t * of where to start the tick counter from.\n\t * @param  time    The time the clock should start\n\t * @param offset The number of ticks to start the source at\n\t */\n\tstart(time: Time, offset?: Ticks): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(computedTime) !== \"started\") {\n\t\t\tthis._state.setStateAtTime(\"started\", computedTime);\n\t\t\tif (isDefined(offset)) {\n\t\t\t\tthis.setTicksAtTime(offset, computedTime);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the clock. Stopping the clock resets the tick counter to 0.\n\t * @param time The time when the clock should stop.\n\t */\n\tstop(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\t// cancel the previous stop\n\t\tif (this._state.getValueAtTime(computedTime) === \"stopped\") {\n\t\t\tconst event = this._state.get(computedTime);\n\t\t\tif (event && event.time > 0) {\n\t\t\t\tthis._tickOffset.cancel(event.time);\n\t\t\t\tthis._state.cancel(event.time);\n\t\t\t}\n\t\t}\n\t\tthis._state.cancel(computedTime);\n\t\tthis._state.setStateAtTime(\"stopped\", computedTime);\n\t\tthis.setTicksAtTime(0, computedTime);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Pause the clock. Pausing does not reset the tick counter.\n\t * @param time The time when the clock should stop.\n\t */\n\tpause(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(computedTime) === \"started\") {\n\t\t\tthis._state.setStateAtTime(\"paused\", computedTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Cancel start/stop/pause and setTickAtTime events scheduled after the given time.\n\t * @param time When to clear the events after\n\t */\n\tcancel(time: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis._state.cancel(time);\n\t\tthis._tickOffset.cancel(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the elapsed ticks at the given time\n\t * @param  time  When to get the tick value\n\t * @return The number of ticks\n\t */\n\tgetTicksAtTime(time?: Time): Ticks {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst stopEvent = this._state.getLastState(\"stopped\", computedTime) as StateTimelineEvent;\n\t\t// this event allows forEachBetween to iterate until the current time\n\t\tconst tmpEvent: StateTimelineEvent = { state: \"paused\", time: computedTime };\n\t\tthis._state.add(tmpEvent);\n\n\t\t// keep track of the previous offset event\n\t\tlet lastState = stopEvent;\n\t\tlet elapsedTicks = 0;\n\n\t\t// iterate through all the events since the last stop\n\t\tthis._state.forEachBetween(stopEvent.time, computedTime + this.sampleTime, e => {\n\t\t\tlet periodStartTime = lastState.time;\n\t\t\t// if there is an offset event in this period use that\n\t\t\tconst offsetEvent = this._tickOffset.get(e.time);\n\t\t\tif (offsetEvent && offsetEvent.time >= lastState.time) {\n\t\t\t\telapsedTicks = offsetEvent.ticks;\n\t\t\t\tperiodStartTime = offsetEvent.time;\n\t\t\t}\n\t\t\tif (lastState.state === \"started\" && e.state !== \"started\") {\n\t\t\t\telapsedTicks += this.frequency.getTicksAtTime(e.time) - this.frequency.getTicksAtTime(periodStartTime);\n\t\t\t}\n\t\t\tlastState = e;\n\t\t});\n\n\t\t// remove the temporary event\n\t\tthis._state.remove(tmpEvent);\n\n\t\t// return the ticks\n\t\treturn elapsedTicks;\n\t}\n\n\t/**\n\t * The number of times the callback was invoked. Starts counting at 0\n\t * and increments after the callback was invoked. Returns -1 when stopped.\n\t */\n\tget ticks(): Ticks {\n\t\treturn this.getTicksAtTime(this.now());\n\t}\n\tset ticks(t: Ticks) {\n\t\tthis.setTicksAtTime(t, this.now());\n\t}\n\n\t/**\n\t * The time since ticks=0 that the TickSource has been running. Accounts\n\t * for tempo curves\n\t */\n\tget seconds(): Seconds {\n\t\treturn this.getSecondsAtTime(this.now());\n\t}\n\tset seconds(s: Seconds) {\n\t\tconst now = this.now();\n\t\tconst ticks = this.frequency.timeToTicks(s, now);\n\t\tthis.setTicksAtTime(ticks, now);\n\t}\n\n\t/**\n\t * Return the elapsed seconds at the given time.\n\t * @param  time  When to get the elapsed seconds\n\t * @return  The number of elapsed seconds\n\t */\n\tgetSecondsAtTime(time: Time): Seconds {\n\t\ttime = this.toSeconds(time);\n\t\tconst stopEvent = this._state.getLastState(\"stopped\", time) as StateTimelineEvent;\n\t\t// this event allows forEachBetween to iterate until the current time\n\t\tconst tmpEvent: StateTimelineEvent = { state: \"paused\", time };\n\t\tthis._state.add(tmpEvent);\n\n\t\t// keep track of the previous offset event\n\t\tlet lastState = stopEvent;\n\t\tlet elapsedSeconds = 0;\n\n\t\t// iterate through all the events since the last stop\n\t\tthis._state.forEachBetween(stopEvent.time, time + this.sampleTime, e => {\n\t\t\tlet periodStartTime = lastState.time;\n\t\t\t// if there is an offset event in this period use that\n\t\t\tconst offsetEvent = this._tickOffset.get(e.time);\n\t\t\tif (offsetEvent && offsetEvent.time >= lastState.time) {\n\t\t\t\telapsedSeconds = offsetEvent.seconds;\n\t\t\t\tperiodStartTime = offsetEvent.time;\n\t\t\t}\n\t\t\tif (lastState.state === \"started\" && e.state !== \"started\") {\n\t\t\t\telapsedSeconds += e.time - periodStartTime;\n\t\t\t}\n\t\t\tlastState = e;\n\t\t});\n\n\t\t// remove the temporary event\n\t\tthis._state.remove(tmpEvent);\n\n\t\t// return the ticks\n\t\treturn elapsedSeconds;\n\t}\n\n\t/**\n\t * Set the clock's ticks at the given time.\n\t * @param  ticks The tick value to set\n\t * @param  time  When to set the tick value\n\t */\n\tsetTicksAtTime(ticks: Ticks, time: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis._tickOffset.cancel(time);\n\t\tthis._tickOffset.add({\n\t\t\tseconds: this.frequency.getDurationOfTicks(ticks, time),\n\t\t\tticks,\n\t\t\ttime,\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the scheduled state at the given time.\n\t * @param  time  The time to query.\n\t */\n\tgetStateAtTime(time: Time): PlaybackState {\n\t\ttime = this.toSeconds(time);\n\t\treturn this._state.getValueAtTime(time);\n\t}\n\n\t/**\n\t * Get the time of the given tick. The second argument\n\t * is when to test before. Since ticks can be set (with setTicksAtTime)\n\t * there may be multiple times for a given tick value.\n\t * @param  tick The tick number.\n\t * @param  before When to measure the tick value from.\n\t * @return The time of the tick\n\t */\n\tgetTimeOfTick(tick: Ticks, before = this.now()): Seconds {\n\t\tconst offset = this._tickOffset.get(before) as TickSourceOffsetEvent;\n\t\tconst event = this._state.get(before) as StateTimelineEvent;\n\t\tconst startTime = Math.max(offset.time, event.time);\n\t\tconst absoluteTicks = this.frequency.getTicksAtTime(startTime) + tick - offset.ticks;\n\t\treturn this.frequency.getTimeOfTick(absoluteTicks);\n\t}\n\n\t/**\n\t * Invoke the callback event at all scheduled ticks between the\n\t * start time and the end time\n\t * @param  startTime  The beginning of the search range\n\t * @param  endTime    The end of the search range\n\t * @param  callback   The callback to invoke with each tick\n\t */\n\tforEachTickBetween(startTime: number, endTime: number, callback: (when: Seconds, ticks: Ticks) => void): this {\n\t\t// only iterate through the sections where it is \"started\"\n\t\tlet lastStateEvent = this._state.get(startTime);\n\t\tthis._state.forEachBetween(startTime, endTime, event => {\n\t\t\tif (lastStateEvent && lastStateEvent.state === \"started\" && event.state !== \"started\") {\n\t\t\t\tthis.forEachTickBetween(Math.max(lastStateEvent.time, startTime), event.time - this.sampleTime, callback);\n\t\t\t}\n\t\t\tlastStateEvent = event;\n\t\t});\n\n\t\tlet error: Error | null = null;\n\n\t\tif (lastStateEvent && lastStateEvent.state === \"started\") {\n\t\t\tconst maxStartTime = Math.max(lastStateEvent.time, startTime);\n\t\t\t// figure out the difference between the frequency ticks and the\n\t\t\tconst startTicks = this.frequency.getTicksAtTime(maxStartTime);\n\t\t\tconst ticksAtStart = this.frequency.getTicksAtTime(lastStateEvent.time);\n\t\t\tconst diff = startTicks - ticksAtStart;\n\t\t\tconst offset = Math.ceil(diff) - diff;\n\t\t\tlet nextTickTime = this.frequency.getTimeOfTick(startTicks + offset);\n\t\t\twhile (nextTickTime < endTime) {\n\t\t\t\ttry {\n\t\t\t\t\tcallback(nextTickTime, Math.round(this.getTicksAtTime(nextTickTime)));\n\t\t\t\t} catch (e) {\n\t\t\t\t\terror = e;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tnextTickTime += this.frequency.getDurationOfTicks(1, nextTickTime);\n\t\t\t}\n\t\t}\n\n\t\tif (error) {\n\t\t\tthrow error;\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._state.dispose();\n\t\tthis._tickOffset.dispose();\n\t\tthis.frequency.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneWithContext, ToneWithContextOptions } from \"../context/ToneWithContext\";\nimport { Frequency, Hertz, Seconds, Ticks, Time } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Emitter } from \"../util/Emitter\";\nimport { noOp, readOnly } from \"../util/Interface\";\nimport { PlaybackState, StateTimeline } from \"../util/StateTimeline\";\nimport { TickSignal } from \"./TickSignal\";\nimport { TickSource } from \"./TickSource\";\nimport { assertContextRunning } from \"../util/Debug\";\n\ntype ClockCallback = (time: Time, ticks?: Ticks) => void;\n\ninterface ClockOptions extends ToneWithContextOptions {\n\tfrequency: Hertz;\n\tcallback: ClockCallback;\n\tunits: \"hertz\" | \"bpm\";\n}\n\ntype ClockEvent = \"start\" | \"stop\" | \"pause\";\n\n/**\n * A sample accurate clock which provides a callback at the given rate.\n * While the callback is not sample-accurate (it is still susceptible to\n * loose JS timing), the time passed in as the argument to the callback\n * is precise. For most applications, it is better to use Tone.Transport\n * instead of the Clock by itself since you can synchronize multiple callbacks.\n * @example\n * import { Clock } from \"tone\";\n * // the callback will be invoked approximately once a second\n * // and will print the time exactly once a second apart.\n * const clock = new Clock(time => {\n * \tconsole.log(time);\n * }, 1);\n * clock.start();\n * @category Core\n */\nexport class Clock<TypeName extends \"bpm\" | \"hertz\" = \"hertz\">\n\textends ToneWithContext<ClockOptions> implements Emitter<ClockEvent> {\n\n\treadonly name: string = \"Clock\";\n\n\t/**\n\t * The callback function to invoke at the scheduled tick.\n\t */\n\tcallback: ClockCallback = noOp;\n\n\t/**\n\t * The tick counter\n\t */\n\tprivate _tickSource: TickSource<TypeName>;\n\n\t/**\n\t * The last time the loop callback was invoked\n\t */\n\tprivate _lastUpdate = 0;\n\n\t/**\n\t * Keep track of the playback state\n\t */\n\tprivate _state: StateTimeline = new StateTimeline(\"stopped\");\n\n\t/**\n\t * Context bound reference to the _loop method\n\t * This is necessary to remove the event in the end.\n\t */\n\tprivate _boundLoop: () => void = this._loop.bind(this);\n\n\t/**\n\t * The rate the callback function should be invoked.\n\t */\n\tfrequency: TickSignal<TypeName>;\n\n\t/**\n\t * @param callback The callback to be invoked with the time of the audio event\n\t * @param frequency The rate of the callback\n\t */\n\tconstructor(callback?: ClockCallback, frequency?: Frequency);\n\tconstructor(options: Partial<ClockOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Clock.getDefaults(), arguments, [\"callback\", \"frequency\"]));\n\t\tconst options = optionsFromArguments(Clock.getDefaults(), arguments, [\"callback\", \"frequency\"]);\n\n\t\tthis.callback = options.callback;\n\t\tthis._tickSource = new TickSource({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.frequency,\n\t\t\tunits: options.units,\n\t\t});\n\t\tthis._lastUpdate = 0;\n\t\tthis.frequency = this._tickSource.frequency;\n\t\treadOnly(this, \"frequency\");\n\n\t\t// add an initial state\n\t\tthis._state.setStateAtTime(\"stopped\", 0);\n\n\t\t// bind a callback to the worker thread\n\t\tthis.context.on(\"tick\", this._boundLoop);\n\t}\n\n\tstatic getDefaults(): ClockOptions {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tcallback: noOp as ClockCallback,\n\t\t\tfrequency: 1,\n\t\t\tunits: \"hertz\",\n\t\t}) as ClockOptions;\n\t}\n\n\t/**\n\t * Returns the playback state of the source, either \"started\", \"stopped\" or \"paused\".\n\t */\n\tget state(): PlaybackState {\n\t\treturn this._state.getValueAtTime(this.now());\n\t}\n\n\t/**\n\t * Start the clock at the given time. Optionally pass in an offset\n\t * of where to start the tick counter from.\n\t * @param  time    The time the clock should start\n\t * @param offset  Where the tick counter starts counting from.\n\t */\n\tstart(time?: Time, offset?: Ticks): this {\n\t\t// make sure the context is running\n\t\tassertContextRunning(this.context);\n\t\t// start the loop\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis.log(\"start\", computedTime);\n\t\tif (this._state.getValueAtTime(computedTime) !== \"started\") {\n\t\t\tthis._state.setStateAtTime(\"started\", computedTime);\n\t\t\tthis._tickSource.start(computedTime, offset);\n\t\t\tif (computedTime < this._lastUpdate) {\n\t\t\t\tthis.emit(\"start\", computedTime, offset);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the clock. Stopping the clock resets the tick counter to 0.\n\t * @param time The time when the clock should stop.\n\t * @example\n\t * import { Clock } from \"tone\";\n\t * const clock = new Clock(time => {\n\t * \tconsole.log(time);\n\t * }, 1);\n\t * clock.start();\n\t * // stop the clock after 10 seconds\n\t * clock.stop(\"+10\");\n\t */\n\tstop(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis.log(\"stop\", computedTime);\n\t\tthis._state.cancel(computedTime);\n\t\tthis._state.setStateAtTime(\"stopped\", computedTime);\n\t\tthis._tickSource.stop(computedTime);\n\t\tif (computedTime < this._lastUpdate) {\n\t\t\tthis.emit(\"stop\", computedTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Pause the clock. Pausing does not reset the tick counter.\n\t * @param time The time when the clock should stop.\n\t */\n\tpause(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(computedTime) === \"started\") {\n\t\t\tthis._state.setStateAtTime(\"paused\", computedTime);\n\t\t\tthis._tickSource.pause(computedTime);\n\t\t\tif (computedTime < this._lastUpdate) {\n\t\t\t\tthis.emit(\"pause\", computedTime);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * The number of times the callback was invoked. Starts counting at 0\n\t * and increments after the callback was invoked.\n\t */\n\tget ticks(): Ticks {\n\t\treturn Math.ceil(this.getTicksAtTime(this.now()));\n\t}\n\tset ticks(t: Ticks) {\n\t\tthis._tickSource.ticks = t;\n\t}\n\n\t/**\n\t * The time since ticks=0 that the Clock has been running. Accounts for tempo curves\n\t */\n\tget seconds(): Seconds {\n\t\treturn this._tickSource.seconds;\n\t}\n\tset seconds(s: Seconds) {\n\t\tthis._tickSource.seconds = s;\n\t}\n\n\t/**\n\t * Return the elapsed seconds at the given time.\n\t * @param  time  When to get the elapsed seconds\n\t * @return  The number of elapsed seconds\n\t */\n\tgetSecondsAtTime(time: Time): Seconds {\n\t\treturn this._tickSource.getSecondsAtTime(time);\n\t}\n\n\t/**\n\t * Set the clock's ticks at the given time.\n\t * @param  ticks The tick value to set\n\t * @param  time  When to set the tick value\n\t */\n\tsetTicksAtTime(ticks: Ticks, time: Time): this {\n\t\tthis._tickSource.setTicksAtTime(ticks, time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the time of the given tick. The second argument\n\t * is when to test before. Since ticks can be set (with setTicksAtTime)\n\t * there may be multiple times for a given tick value.\n\t * @param  tick The tick number.\n\t * @param  before When to measure the tick value from.\n\t * @return The time of the tick\n\t */\n\tgetTimeOfTick(tick: Ticks, before = this.now()): Seconds {\n\t\treturn this._tickSource.getTimeOfTick(tick, before);\n\t}\n\n\t/**\n\t * Get the clock's ticks at the given time.\n\t * @param  time  When to get the tick value\n\t * @return The tick value at the given time.\n\t */\n\tgetTicksAtTime(time?: Time): Ticks {\n\t\treturn this._tickSource.getTicksAtTime(time);\n\t}\n\n\t/**\n\t * Get the time of the next tick\n\t * @param  offset The tick number.\n\t */\n\tnextTickTime(offset: Ticks, when: Time): Seconds {\n\t\tconst computedTime = this.toSeconds(when);\n\t\tconst currentTick = this.getTicksAtTime(computedTime);\n\t\treturn this._tickSource.getTimeOfTick(currentTick + offset, computedTime);\n\t}\n\n\t/**\n\t * The scheduling loop.\n\t */\n\tprivate _loop(): void {\n\n\t\tconst startTime = this._lastUpdate;\n\t\tconst endTime = this.now();\n\t\tthis._lastUpdate = endTime;\n\t\tthis.log(\"loop\", startTime, endTime);\n\n\t\tif (startTime !== endTime) {\n\t\t\t// the state change events\n\t\t\tthis._state.forEachBetween(startTime, endTime, e => {\n\t\t\t\tswitch (e.state) {\n\t\t\t\t\tcase \"started\" :\n\t\t\t\t\t\tconst offset = this._tickSource.getTicksAtTime(e.time);\n\t\t\t\t\t\tthis.emit(\"start\", e.time, offset);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"stopped\" :\n\t\t\t\t\t\tif (e.time !== 0) {\n\t\t\t\t\t\t\tthis.emit(\"stop\", e.time);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"paused\" :\n\t\t\t\t\t\tthis.emit(\"pause\", e.time);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t});\n\t\t\t// the tick callbacks\n\t\t\tthis._tickSource.forEachTickBetween(startTime, endTime, (time, ticks) => {\n\t\t\t\tthis.callback(time, ticks);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Returns the scheduled state at the given time.\n\t * @param  time  The time to query.\n\t * @return  The name of the state input in setStateAtTime.\n\t * @example\n\t * import { Clock } from \"tone\";\n\t * const clock = new Clock();\n\t * clock.start(\"+0.1\");\n\t * clock.getStateAtTime(\"+0.1\"); // returns \"started\"\n\t */\n\tgetStateAtTime(time: Time): PlaybackState {\n\t\tconst computedTime = this.toSeconds(time);\n\t\treturn this._state.getValueAtTime(computedTime);\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.context.off(\"tick\", this._boundLoop);\n\t\tthis._tickSource.dispose();\n\t\tthis._state.dispose();\n\t\treturn this;\n\t}\n\n\t//-------------------------------------\n\t// EMITTER MIXIN TO SATISFY COMPILER\n\t//-------------------------------------\n\n\ton!: (event: ClockEvent, callback: (...args: any[]) => void) => this;\n\tonce!: (event: ClockEvent, callback: (...args: any[]) => void) => this;\n\toff!: (event: ClockEvent, callback?: ((...args: any[]) => void) | undefined) => this;\n\temit!: (event: any, ...args: any[]) => this;\n}\n\nEmitter.mixin(Clock);\n","import { Timeline, TimelineEvent } from \"./Timeline\";\nimport { Tone } from \"../Tone\";\nimport { Seconds } from \"../type/Units\";\n\ninterface TimelineValueEvent<T> extends TimelineEvent {\n\tvalue: T;\n}\n\n/**\n * Represents a single value which is gettable and settable in a timed way\n */\nexport class TimelineValue<Type> extends Tone {\n\n\treadonly name: string = \"TimelineValue\";\n\n\t/**\n\t * The timeline which stores the values\n\t */\n\tprivate _timeline: Timeline<TimelineValueEvent<Type>> = new Timeline({ memory: 10 })\n\n\t/**\n\t * Hold the value to return if there is no scheduled values\n\t */\n\tprivate _initialValue: Type;\n\n\t/**\n\t * @param initialValue The value to return if there is no scheduled values\n\t */\n\tconstructor(initialValue: Type) {\n\n\t\tsuper();\n\t\tthis._initialValue = initialValue;\n\t}\n\n\t/**\n\t * Set the value at the given time\n\t */\n\tset(value: Type, time: Seconds): this {\n\t\tthis._timeline.add({\n\t\t\tvalue, time\n\t\t});\n\t\treturn this;\n\t}\n\t\n\t/**\n\t * Get the value at the given time\n\t */\n\tget(time: Seconds): Type {\n\t\tconst event = this._timeline.get(time);\n\t\tif (event) {\n\t\t\treturn event.value;\n\t\t} else {\n\t\t\treturn this._initialValue;\n\t\t}\n\t}\n}\n","import { getContext } from \"../Global\";\nimport { TimeBaseUnit, TimeValue } from \"./TimeBase\";\nimport { TransportTimeClass } from \"./TransportTime\";\nimport { Seconds, Ticks } from \"./Units\";\n\n/**\n * Ticks is a primitive type for encoding Time values.\n * Ticks can be constructed with or without the `new` keyword. Ticks can be passed\n * into the parameter of any method which takes time as an argument.\n * @example\n * import { Ticks } from \"tone\";\n * const t = Ticks(\"4n\"); // a quarter note as ticks\n * @category Unit\n */\nexport class TicksClass extends TransportTimeClass<Ticks> {\n\n\treadonly name: string = \"Ticks\";\n\n\treadonly defaultUnits: TimeBaseUnit = \"i\";\n\n\t/**\n\t * Get the current time in the given units\n\t */\n\tprotected _now(): Ticks {\n\t\treturn this.context.transport.ticks;\n\t}\n\n\t/**\n\t * Return the value of the beats in the current units\n\t */\n\tprotected _beatsToUnits(beats: number): Ticks {\n\t\treturn this._getPPQ() * beats;\n\t}\n\n\t/**\n\t * Returns the value of a second in the current units\n\t */\n\tprotected _secondsToUnits(seconds: Seconds): Ticks {\n\t\treturn Math.floor(seconds / (60 / this._getBpm()) * this._getPPQ());\n\t}\n\n\t/**\n\t * Returns the value of a tick in the current time units\n\t */\n\tprotected _ticksToUnits(ticks: Ticks): Ticks {\n\t\treturn ticks;\n\t}\n\n\t/**\n\t * Return the time in ticks\n\t */\n\ttoTicks(): Ticks {\n\t\treturn this.valueOf() as Ticks;\n\t}\n\n\t/**\n\t * Return the time in seconds\n\t */\n\ttoSeconds(): Seconds {\n\t\treturn (this.valueOf() / this._getPPQ()) * (60 / this._getBpm());\n\t}\n}\n\n/**\n * Convert a time representation to ticks\n * @category Unit\n */\nexport function Ticks(value?: TimeValue, units?: TimeBaseUnit): TicksClass {\n\treturn new TicksClass(getContext(), value, units);\n}\n","import { Tone } from \"../Tone\";\nimport { isDefined } from \"./TypeCheck\";\n\n/**\n * An IntervalTimeline event must have a time and duration\n */\nexport interface IntervalTimelineEvent {\n\ttime: number;\n\tduration: number;\n\t[propName: string]: any;\n}\n\ntype IteratorCallback = (event: IntervalTimelineEvent) => void;\n\n/**\n * Similar to Tone.Timeline, but all events represent\n * intervals with both \"time\" and \"duration\" times. The\n * events are placed in a tree structure optimized\n * for querying an intersection point with the timeline\n * events. Internally uses an [Interval Tree](https://en.wikipedia.org/wiki/Interval_tree)\n * to represent the data.\n */\nexport class IntervalTimeline extends Tone {\n\n\treadonly name: string = \"IntervalTimeline\";\n\n\t/**\n\t * The root node of the inteval tree\n\t */\n\tprivate _root: IntervalNode | null = null;\n\n\t/**\n\t * Keep track of the length of the timeline.\n\t */\n\tprivate _length = 0;\n\n\t/**\n\t * The event to add to the timeline. All events must\n\t * have a time and duration value\n\t * @param  event  The event to add to the timeline\n\t */\n\tadd(event: IntervalTimelineEvent): this {\n\t\tthis.assert(isDefined(event.time), \"Events must have a time property\");\n\t\tthis.assert(isDefined(event.duration), \"Events must have a duration parameter\");\n\n\t\tevent.time = event.time.valueOf();\n\t\tlet node: IntervalNode | null = new IntervalNode(event.time, event.time + event.duration, event);\n\t\tif (this._root === null) {\n\t\t\tthis._root = node;\n\t\t} else {\n\t\t\tthis._root.insert(node);\n\t\t}\n\t\tthis._length++;\n\t\t// Restructure tree to be balanced\n\t\twhile (node !== null) {\n\t\t\tnode.updateHeight();\n\t\t\tnode.updateMax();\n\t\t\tthis._rebalance(node);\n\t\t\tnode = node.parent;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Remove an event from the timeline.\n\t * @param  event  The event to remove from the timeline\n\t */\n\tremove(event: IntervalTimelineEvent): this {\n\t\tif (this._root !== null) {\n\t\t\tconst results: IntervalNode[] = [];\n\t\t\tthis._root.search(event.time, results);\n\t\t\tfor (const node of results) {\n\t\t\t\tif (node.event === event) {\n\t\t\t\t\tthis._removeNode(node);\n\t\t\t\t\tthis._length--;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * The number of items in the timeline.\n\t * @readOnly\n\t */\n\tget length(): number {\n\t\treturn this._length;\n\t}\n\n\t/**\n\t * Remove events whose time time is after the given time\n\t * @param  after  The time to query.\n\t */\n\tcancel(after: number): this {\n\t\tthis.forEachFrom(after, event => this.remove(event));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set the root node as the given node\n\t */\n\tprivate _setRoot(node: IntervalNode | null): void {\n\t\tthis._root = node;\n\t\tif (this._root !== null) {\n\t\t\tthis._root.parent = null;\n\t\t}\n\t}\n\n\t/**\n\t * Replace the references to the node in the node's parent\n\t * with the replacement node.\n\t */\n\tprivate _replaceNodeInParent(node: IntervalNode, replacement: IntervalNode | null): void {\n\t\tif (node.parent !== null) {\n\t\t\tif (node.isLeftChild()) {\n\t\t\t\tnode.parent.left = replacement;\n\t\t\t} else {\n\t\t\t\tnode.parent.right = replacement;\n\t\t\t}\n\t\t\tthis._rebalance(node.parent);\n\t\t} else {\n\t\t\tthis._setRoot(replacement);\n\t\t}\n\t}\n\n\t/**\n\t * Remove the node from the tree and replace it with\n\t * a successor which follows the schema.\n\t */\n\tprivate _removeNode(node: IntervalNode): void {\n\t\tif (node.left === null && node.right === null) {\n\t\t\tthis._replaceNodeInParent(node, null);\n\t\t} else if (node.right === null) {\n\t\t\tthis._replaceNodeInParent(node, node.left);\n\t\t} else if (node.left === null) {\n\t\t\tthis._replaceNodeInParent(node, node.right);\n\t\t} else {\n\t\t\tconst balance = node.getBalance();\n\t\t\tlet replacement: IntervalNode;\n\t\t\tlet temp: IntervalNode | null = null;\n\t\t\tif (balance > 0) {\n\t\t\t\tif (node.left.right === null) {\n\t\t\t\t\treplacement = node.left;\n\t\t\t\t\treplacement.right = node.right;\n\t\t\t\t\ttemp = replacement;\n\t\t\t\t} else {\n\t\t\t\t\treplacement = node.left.right;\n\t\t\t\t\twhile (replacement.right !== null) {\n\t\t\t\t\t\treplacement = replacement.right;\n\t\t\t\t\t}\n\t\t\t\t\tif (replacement.parent) {\n\t\t\t\t\t\treplacement.parent.right = replacement.left;\n\t\t\t\t\t\ttemp = replacement.parent;\n\t\t\t\t\t\treplacement.left = node.left;\n\t\t\t\t\t\treplacement.right = node.right;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (node.right.left === null) {\n\t\t\t\treplacement = node.right;\n\t\t\t\treplacement.left = node.left;\n\t\t\t\ttemp = replacement;\n\t\t\t} else {\n\t\t\t\treplacement = node.right.left;\n\t\t\t\twhile (replacement.left !== null) {\n\t\t\t\t\treplacement = replacement.left;\n\t\t\t\t}\n\t\t\t\tif (replacement.parent) {\n\t\t\t\t\treplacement.parent.left = replacement.right;\n\t\t\t\t\ttemp = replacement.parent;\n\t\t\t\t\treplacement.left = node.left;\n\t\t\t\t\treplacement.right = node.right;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (node.parent !== null) {\n\t\t\t\tif (node.isLeftChild()) {\n\t\t\t\t\tnode.parent.left = replacement;\n\t\t\t\t} else {\n\t\t\t\t\tnode.parent.right = replacement;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._setRoot(replacement);\n\t\t\t}\n\t\t\tif (temp) {\n\t\t\t\tthis._rebalance(temp);\n\t\t\t}\n\t\t}\n\t\tnode.dispose();\n\t}\n\n\t/**\n\t * Rotate the tree to the left\n\t */\n\tprivate _rotateLeft(node: IntervalNode): void {\n\t\tconst parent = node.parent;\n\t\tconst isLeftChild = node.isLeftChild();\n\n\t\t// Make node.right the new root of this sub tree (instead of node)\n\t\tconst pivotNode = node.right;\n\t\tif (pivotNode) {\n\t\t\tnode.right = pivotNode.left;\n\t\t\tpivotNode.left = node;\n\t\t}\n\n\t\tif (parent !== null) {\n\t\t\tif (isLeftChild) {\n\t\t\t\tparent.left = pivotNode;\n\t\t\t} else {\n\t\t\t\tparent.right = pivotNode;\n\t\t\t}\n\t\t} else {\n\t\t\tthis._setRoot(pivotNode);\n\t\t}\n\t}\n\n\t/**\n\t * Rotate the tree to the right\n\t */\n\tprivate _rotateRight(node: IntervalNode): void {\n\t\tconst parent = node.parent;\n\t\tconst isLeftChild = node.isLeftChild();\n\n\t\t// Make node.left the new root of this sub tree (instead of node)\n\t\tconst pivotNode = node.left;\n\t\tif (pivotNode) {\n\t\t\tnode.left = pivotNode.right;\n\t\t\tpivotNode.right = node;\n\t\t}\n\n\t\tif (parent !== null) {\n\t\t\tif (isLeftChild) {\n\t\t\t\tparent.left = pivotNode;\n\t\t\t} else {\n\t\t\t\tparent.right = pivotNode;\n\t\t\t}\n\t\t} else {\n\t\t\tthis._setRoot(pivotNode);\n\t\t}\n\t}\n\n\t/**\n\t * Balance the BST\n\t */\n\tprivate _rebalance(node: IntervalNode): void {\n\t\tconst balance = node.getBalance();\n\t\tif (balance > 1 && node.left) {\n\t\t\tif (node.left.getBalance() < 0) {\n\t\t\t\tthis._rotateLeft(node.left);\n\t\t\t} else {\n\t\t\t\tthis._rotateRight(node);\n\t\t\t}\n\t\t} else if (balance < -1 && node.right) {\n\t\t\tif (node.right.getBalance() > 0) {\n\t\t\t\tthis._rotateRight(node.right);\n\t\t\t} else {\n\t\t\t\tthis._rotateLeft(node);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Get an event whose time and duration span the give time. Will\n\t * return the match whose \"time\" value is closest to the given time.\n\t * @return  The event which spans the desired time\n\t */\n\tget(time: number): IntervalTimelineEvent | null {\n\t\tif (this._root !== null) {\n\t\t\tconst results: IntervalNode[] = [];\n\t\t\tthis._root.search(time, results);\n\t\t\tif (results.length > 0) {\n\t\t\t\tlet max = results[0];\n\t\t\t\tfor (let i = 1; i < results.length; i++) {\n\t\t\t\t\tif (results[i].low > max.low) {\n\t\t\t\t\t\tmax = results[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn max.event;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Iterate over everything in the timeline.\n\t * @param  callback The callback to invoke with every item\n\t */\n\tforEach(callback: IteratorCallback): this {\n\t\tif (this._root !== null) {\n\t\t\tconst allNodes: IntervalNode[] = [];\n\t\t\tthis._root.traverse(node => allNodes.push(node));\n\t\t\tallNodes.forEach(node => {\n\t\t\t\tif (node.event) {\n\t\t\t\t\tcallback(node.event);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Iterate over everything in the array in which the given time\n\t * overlaps with the time and duration time of the event.\n\t * @param  time The time to check if items are overlapping\n\t * @param  callback The callback to invoke with every item\n\t */\n\tforEachAtTime(time: number, callback: IteratorCallback): this {\n\t\tif (this._root !== null) {\n\t\t\tconst results: IntervalNode[] = [];\n\t\t\tthis._root.search(time, results);\n\t\t\tresults.forEach(node => {\n\t\t\t\tif (node.event) {\n\t\t\t\t\tcallback(node.event);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Iterate over everything in the array in which the time is greater\n\t * than or equal to the given time.\n\t * @param  time The time to check if items are before\n\t * @param  callback The callback to invoke with every item\n\t */\n\tforEachFrom(time: number, callback: IteratorCallback): this {\n\t\tif (this._root !== null) {\n\t\t\tconst results: IntervalNode[] = [];\n\t\t\tthis._root.searchAfter(time, results);\n\t\t\tresults.forEach(node => {\n\t\t\t\tif (node.event) {\n\t\t\t\t\tcallback(node.event);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (this._root !== null) {\n\t\t\tthis._root.traverse(node => node.dispose());\n\t\t}\n\t\tthis._root = null;\n\t\treturn this;\n\t}\n}\n\n//-------------------------------------\n// \tINTERVAL NODE HELPER\n//-------------------------------------\n\n/**\n * Represents a node in the binary search tree, with the addition\n * of a \"high\" value which keeps track of the highest value of\n * its children.\n * References:\n * https://brooknovak.wordpress.com/2013/12/07/augmented-interval-tree-in-c/\n * http://www.mif.vu.lt/~valdas/ALGORITMAI/LITERATURA/Cormen/Cormen.pdf\n * @param low\n * @param high\n */\nclass IntervalNode {\n\n\t// the event container\n\tevent: IntervalTimelineEvent | null;\n\t// the low value\n\tlow: number;\n\t// the high value\n\thigh: number;\n\t// the high value for this and all child nodes\n\tmax: number;\n\t// the nodes to the left\n\tprivate _left: IntervalNode | null = null;\n\t// the nodes to the right\n\tprivate _right: IntervalNode | null = null;\n\t// the parent node\n\tparent: IntervalNode | null = null;\n\t// the number of child nodes\n\theight = 0;\n\n\tconstructor(low: number, high: number, event: IntervalTimelineEvent) {\n\t\tthis.event = event;\n\t\t// the low value\n\t\tthis.low = low;\n\t\t// the high value\n\t\tthis.high = high;\n\t\t// the high value for this and all child nodes\n\t\tthis.max = this.high;\n\t}\n\n\t/**\n\t * Insert a node into the correct spot in the tree\n\t */\n\tinsert(node: IntervalNode): void {\n\t\tif (node.low <= this.low) {\n\t\t\tif (this.left === null) {\n\t\t\t\tthis.left = node;\n\t\t\t} else {\n\t\t\t\tthis.left.insert(node);\n\t\t\t}\n\t\t} else if (this.right === null) {\n\t\t\tthis.right = node;\n\t\t} else {\n\t\t\tthis.right.insert(node);\n\t\t}\n\t}\n\n\t/**\n\t * Search the tree for nodes which overlap\n\t * with the given point\n\t * @param  point  The point to query\n\t * @param  results  The array to put the results\n\t */\n\tsearch(point: number, results: IntervalNode[]): void {\n\t\t// If p is to the right of the rightmost point of any interval\n\t\t// in this node and all children, there won't be any matches.\n\t\tif (point > this.max) {\n\t\t\treturn;\n\t\t}\n\t\t// Search left children\n\t\tif (this.left !== null) {\n\t\t\tthis.left.search(point, results);\n\t\t}\n\t\t// Check this node\n\t\tif (this.low <= point && this.high > point) {\n\t\t\tresults.push(this);\n\t\t}\n\t\t// If p is to the left of the time of this interval,\n\t\t// then it can't be in any child to the right.\n\t\tif (this.low > point) {\n\t\t\treturn;\n\t\t}\n\t\t// Search right children\n\t\tif (this.right !== null) {\n\t\t\tthis.right.search(point, results);\n\t\t}\n\t}\n\n\t/**\n\t * Search the tree for nodes which are less\n\t * than the given point\n\t * @param  point  The point to query\n\t * @param  results  The array to put the results\n\t */\n\tsearchAfter(point: number, results: IntervalNode[]): void {\n\t\t// Check this node\n\t\tif (this.low >= point) {\n\t\t\tresults.push(this);\n\t\t\tif (this.left !== null) {\n\t\t\t\tthis.left.searchAfter(point, results);\n\t\t\t}\n\t\t}\n\t\t// search the right side\n\t\tif (this.right !== null) {\n\t\t\tthis.right.searchAfter(point, results);\n\t\t}\n\t}\n\n\t/**\n\t * Invoke the callback on this element and both it's branches\n\t * @param  {Function}  callback\n\t */\n\ttraverse(callback: (self: IntervalNode) => void): void {\n\t\tcallback(this);\n\t\tif (this.left !== null) {\n\t\t\tthis.left.traverse(callback);\n\t\t}\n\t\tif (this.right !== null) {\n\t\t\tthis.right.traverse(callback);\n\t\t}\n\t}\n\n\t/**\n\t * Update the height of the node\n\t */\n\tupdateHeight(): void {\n\t\tif (this.left !== null && this.right !== null) {\n\t\t\tthis.height = Math.max(this.left.height, this.right.height) + 1;\n\t\t} else if (this.right !== null) {\n\t\t\tthis.height = this.right.height + 1;\n\t\t} else if (this.left !== null) {\n\t\t\tthis.height = this.left.height + 1;\n\t\t} else {\n\t\t\tthis.height = 0;\n\t\t}\n\t}\n\n\t/**\n\t * Update the height of the node\n\t */\n\tupdateMax(): void {\n\t\tthis.max = this.high;\n\t\tif (this.left !== null) {\n\t\t\tthis.max = Math.max(this.max, this.left.max);\n\t\t}\n\t\tif (this.right !== null) {\n\t\t\tthis.max = Math.max(this.max, this.right.max);\n\t\t}\n\t}\n\n\t/**\n\t * The balance is how the leafs are distributed on the node\n\t * @return  Negative numbers are balanced to the right\n\t */\n\tgetBalance(): number {\n\t\tlet balance = 0;\n\t\tif (this.left !== null && this.right !== null) {\n\t\t\tbalance = this.left.height - this.right.height;\n\t\t} else if (this.left !== null) {\n\t\t\tbalance = this.left.height + 1;\n\t\t} else if (this.right !== null) {\n\t\t\tbalance = -(this.right.height + 1);\n\t\t}\n\t\treturn balance;\n\t}\n\n\t/**\n\t * @returns true if this node is the left child of its parent\n\t */\n\tisLeftChild(): boolean {\n\t\treturn this.parent !== null && this.parent.left === this;\n\t}\n\n\t/**\n\t * get/set the left node\n\t */\n\tget left(): IntervalNode | null {\n\t\treturn this._left;\n\t}\n\n\tset left(node: IntervalNode | null) {\n\t\tthis._left = node;\n\t\tif (node !== null) {\n\t\t\tnode.parent = this;\n\t\t}\n\t\tthis.updateHeight();\n\t\tthis.updateMax();\n\t}\n\n\t/**\n\t * get/set the right node\n\t */\n\tget right(): IntervalNode | null {\n\t\treturn this._right;\n\t}\n\n\tset right(node: IntervalNode | null) {\n\t\tthis._right = node;\n\t\tif (node !== null) {\n\t\t\tnode.parent = this;\n\t\t}\n\t\tthis.updateHeight();\n\t\tthis.updateMax();\n\t}\n\n\t/**\n\t * null out references.\n\t */\n\tdispose(): void {\n\t\tthis.parent = null;\n\t\tthis._left = null;\n\t\tthis._right = null;\n\t\tthis.event = null;\n\t}\n}\n","import { Seconds, Ticks } from \"../type/Units\";\nimport { noOp } from \"../util/Interface\";\n\ntype Transport = import(\"../clock/Transport\").Transport;\n\nexport interface TransportEventOptions {\n\tcallback: (time: number) => void;\n\tonce: boolean;\n\ttime: Ticks;\n}\n\n/**\n * TransportEvent is an internal class used by [[Transport]]\n * to schedule events. Do no invoke this class directly, it is\n * handled from within Tone.Transport.\n */\nexport class TransportEvent {\n\n\t/**\n\t * Reference to the Transport that created it\n\t */\n\tprotected transport: Transport;\n\n\t/**\n\t * The unique id of the event\n\t */\n\tid: number = TransportEvent._eventId++;\n\n\t/**\n\t * The time the event starts\n\t */\n\ttime: Ticks;\n\n\t/**\n\t * The callback to invoke\n\t */\n\tprivate callback?: (time: Seconds) => void;\n\n\t/**\n\t * If the event should be removed after being invoked.\n\t */\n\tprivate _once: boolean;\n\n\t/**\n\t * @param transport The transport object which the event belongs to\n\t */\n\tconstructor(transport: Transport, opts: Partial<TransportEventOptions>) {\n\n\t\tconst options: TransportEventOptions = Object.assign(TransportEvent.getDefaults(), opts);\n\n\t\tthis.transport = transport;\n\t\tthis.callback = options.callback;\n\t\tthis._once = options.once;\n\t\tthis.time = options.time;\n\t}\n\n\tstatic getDefaults(): TransportEventOptions {\n\t\treturn {\n\t\t\tcallback: noOp,\n\t\t\tonce: false,\n\t\t\ttime: 0,\n\t\t};\n\t}\n\n\t/**\n\t * Current ID counter\n\t */\n\tprivate static _eventId = 0;\n\n\t/**\n\t * Invoke the event callback.\n\t * @param  time  The AudioContext time in seconds of the event\n\t */\n\tinvoke(time: Seconds): void {\n\t\tif (this.callback) {\n\t\t\tthis.callback(time);\n\t\t\tif (this._once) {\n\t\t\t\tthis.transport.clear(this.id);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tthis.callback = undefined;\n\t\treturn this;\n\t}\n}\n","import { BaseContext } from \"../context/BaseContext\";\nimport { TicksClass } from \"../type/Ticks\";\nimport { Seconds, Ticks, Time } from \"../type/Units\";\nimport { TransportEvent, TransportEventOptions } from \"./TransportEvent\";\n\ntype Transport = import(\"../clock/Transport\").Transport;\n\ninterface TransportRepeatEventOptions extends TransportEventOptions {\n\tinterval: Ticks;\n\tduration: Ticks;\n}\n\n/**\n * TransportRepeatEvent is an internal class used by Tone.Transport\n * to schedule repeat events. This class should not be instantiated directly.\n */\nexport class TransportRepeatEvent extends TransportEvent {\n\n\t/**\n\t * When the event should stop repeating\n\t */\n\tprivate duration: Ticks;\n\n\t/**\n\t * The interval of the repeated event\n\t */\n\tprivate _interval: Ticks;\n\n\t/**\n\t * The ID of the current timeline event\n\t */\n\tprivate _currentId = -1;\n\n\t/**\n\t * The ID of the next timeline event\n\t */\n\tprivate _nextId = -1;\n\n\t/**\n\t * The time of the next event\n\t */\n\tprivate _nextTick = this.time;\n\n\t/**\n\t * a reference to the bound start method\n\t */\n\tprivate _boundRestart = this._restart.bind(this);\n\n\t/**\n\t * The audio context belonging to this event\n\t */\n\tprotected context: BaseContext;\n\n\t/**\n\t * @param transport The transport object which the event belongs to\n\t */\n\tconstructor(transport: Transport, opts: Partial<TransportRepeatEventOptions>) {\n\n\t\tsuper(transport, opts);\n\n\t\tconst options = Object.assign(TransportRepeatEvent.getDefaults(), opts);\n\n\t\tthis.duration = new TicksClass(transport.context, options.duration).valueOf();\n\t\tthis._interval = new TicksClass(transport.context, options.interval).valueOf();\n\t\tthis._nextTick = options.time;\n\t\tthis.transport.on(\"start\", this._boundRestart);\n\t\tthis.transport.on(\"loopStart\", this._boundRestart);\n\t\tthis.context = this.transport.context;\n\t\tthis._restart();\n\t}\n\n\tstatic getDefaults(): TransportRepeatEventOptions {\n\t\treturn Object.assign({}, TransportEvent.getDefaults(), {\n\t\t\tduration: Infinity,\n\t\t\tinterval: 1,\n\t\t\tonce: false,\n\t\t});\n\t}\n\n\t/**\n\t * Invoke the callback. Returns the tick time which\n\t * the next event should be scheduled at.\n\t * @param  time  The AudioContext time in seconds of the event\n\t */\n\tinvoke(time: Seconds): void {\n\t\t// create more events if necessary\n\t\tthis._createEvents(time);\n\t\t// call the super class\n\t\tsuper.invoke(time);\n\t}\n\n\t/**\n\t * Push more events onto the timeline to keep up with the position of the timeline\n\t */\n\tprivate _createEvents(time: Seconds): void {\n\t\t// schedule the next event\n\t\tconst ticks = this.transport.getTicksAtTime(time);\n\t\tif (ticks >= this.time && ticks >= this._nextTick && this._nextTick + this._interval < this.time + this.duration) {\n\t\t\tthis._nextTick += this._interval;\n\t\t\tthis._currentId = this._nextId;\n\t\t\tthis._nextId = this.transport.scheduleOnce(this.invoke.bind(this),\n\t\t\t\tnew TicksClass(this.context, this._nextTick).toSeconds());\n\t\t}\n\t}\n\n\t/**\n\t * Push more events onto the timeline to keep up with the position of the timeline\n\t */\n\tprivate _restart(time?: Time): void {\n\t\tthis.transport.clear(this._currentId);\n\t\tthis.transport.clear(this._nextId);\n\t\tthis._nextTick = this.time;\n\t\tconst ticks = this.transport.getTicksAtTime(time);\n\t\tif (ticks > this.time) {\n\t\t\tthis._nextTick = this.time + Math.ceil((ticks - this.time) / this._interval) * this._interval;\n\t\t}\n\t\tthis._currentId = this.transport.scheduleOnce(this.invoke.bind(this),\n\t\t\tnew TicksClass(this.context, this._nextTick).toSeconds());\n\t\tthis._nextTick += this._interval;\n\t\tthis._nextId = this.transport.scheduleOnce(this.invoke.bind(this),\n\t\t\tnew TicksClass(this.context, this._nextTick).toSeconds());\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.transport.clear(this._currentId);\n\t\tthis.transport.clear(this._nextId);\n\t\tthis.transport.off(\"start\", this._boundRestart);\n\t\tthis.transport.off(\"loopStart\", this._boundRestart);\n\t\treturn this;\n\t}\n}\n","import { TimeClass } from \"../../core/type/Time\";\nimport { PlaybackState } from \"../../core/util/StateTimeline\";\nimport { TimelineValue } from \"../../core/util/TimelineValue\";\nimport { Signal } from \"../../signal/Signal\";\nimport { onContextClose, onContextInit } from \"../context/ContextInitialization\";\nimport { Gain } from \"../context/Gain\";\nimport { ToneWithContext, ToneWithContextOptions } from \"../context/ToneWithContext\";\nimport { TicksClass } from \"../type/Ticks\";\nimport { TransportTimeClass } from \"../type/TransportTime\";\nimport { BarsBeatsSixteenths, BPM, NormalRange, Seconds,\n\tSubdivision, Ticks, Time, TimeSignature, TransportTime } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Emitter } from \"../util/Emitter\";\nimport { readOnly, writable } from \"../util/Interface\";\nimport { IntervalTimeline } from \"../util/IntervalTimeline\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isArray, isDefined } from \"../util/TypeCheck\";\nimport { Clock } from \"./Clock\";\nimport { TickParam } from \"./TickParam\";\nimport { TransportEvent } from \"./TransportEvent\";\nimport { TransportRepeatEvent } from \"./TransportRepeatEvent\";\n\ninterface TransportOptions extends ToneWithContextOptions {\n\tbpm: BPM;\n\tswing: NormalRange;\n\tswingSubdivision: Subdivision;\n\ttimeSignature: number;\n\tloopStart: Time;\n\tloopEnd: Time;\n\tppq: number;\n}\n\ntype TransportEventNames = \"start\" | \"stop\" | \"pause\" | \"loop\" | \"loopEnd\" | \"loopStart\";\n\ninterface SyncedSignalEvent {\n\tsignal: Signal;\n\tinitial: number;\n\tratio: Gain;\n}\n\ntype TransportCallback = (time: Seconds) => void;\n\n/**\n * Transport for timing musical events.\n * Supports tempo curves and time changes. Unlike browser-based timing (setInterval, requestAnimationFrame)\n * Transport timing events pass in the exact time of the scheduled event\n * in the argument of the callback function. Pass that time value to the object\n * you're scheduling. <br><br>\n * A single transport is created for you when the library is initialized.\n * <br><br>\n * The transport emits the events: \"start\", \"stop\", \"pause\", and \"loop\" which are\n * called with the time of that event as the argument.\n *\n * @example\n * import { Oscillator, Transport } from \"tone\";\n * const osc = new Oscillator().toDestination();\n * // repeated event every 8th note\n * Transport.scheduleRepeat((time) => {\n * \t// use the callback time to schedule events\n * \tosc.start(time).stop(time + 0.1);\n * }, \"8n\");\n * // transport must be started before it starts invoking events\n * Transport.start();\n * @category Core\n */\nexport class Transport extends ToneWithContext<TransportOptions> implements Emitter<TransportEventNames> {\n\n\treadonly name: string = \"Transport\";\n\n\t//-------------------------------------\n\t// \tLOOPING\n\t//-------------------------------------\n\n\t/**\n\t * If the transport loops or not.\n\t */\n\tprivate _loop: TimelineValue<boolean> = new TimelineValue(false);\n\n\t/**\n\t * The loop start position in ticks\n\t */\n\tprivate _loopStart: Ticks = 0;\n\n\t/**\n\t * The loop end position in ticks\n\t */\n\tprivate _loopEnd: Ticks = 0;\n\n\t//-------------------------------------\n\t// \tCLOCK/TEMPO\n\t//-------------------------------------\n\n\t/**\n\t * Pulses per quarter is the number of ticks per quarter note.\n\t */\n\tprivate _ppq: number;\n\n\t/**\n\t * watches the main oscillator for timing ticks\n\t * initially starts at 120bpm\n\t */\n\tprivate _clock: Clock<\"bpm\">;\n\n\t/**\n\t * The Beats Per Minute of the Transport.\n\t * @example\n\t * import { Oscillator, Transport } from \"tone\";\n\t * const osc = new Oscillator().toDestination();\n\t * Transport.bpm.value = 80;\n\t * // start/stop the oscillator every quarter note\n\t * Transport.scheduleRepeat(time => {\n\t * \tosc.start(time).stop(time + 0.1);\n\t * }, \"4n\");\n\t * Transport.start();\n\t * // ramp the bpm to 120 over 10 seconds\n\t * Transport.bpm.rampTo(120, 10);\n\t */\n\tbpm: TickParam<\"bpm\">;\n\n\t/**\n\t * The time signature, or more accurately the numerator\n\t * of the time signature over a denominator of 4.\n\t */\n\tprivate _timeSignature: number;\n\n\t//-------------------------------------\n\t// \tTIMELINE EVENTS\n\t//-------------------------------------\n\n\t/**\n\t * All the events in an object to keep track by ID\n\t */\n\tprivate _scheduledEvents = {};\n\n\t/**\n\t * The scheduled events.\n\t */\n\tprivate _timeline: Timeline<TransportEvent> = new Timeline();\n\n\t/**\n\t * Repeated events\n\t */\n\tprivate _repeatedEvents: IntervalTimeline = new IntervalTimeline();\n\n\t/**\n\t * All of the synced Signals\n\t */\n\tprivate _syncedSignals: SyncedSignalEvent[] = [];\n\n\t//-------------------------------------\n\t// \tSWING\n\t//-------------------------------------\n\n\t/**\n\t * The subdivision of the swing\n\t */\n\tprivate _swingTicks: Ticks;\n\n\t/**\n\t * The swing amount\n\t */\n\tprivate _swingAmount: NormalRange = 0;\n\n\tconstructor(options?: Partial<TransportOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Transport.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Transport.getDefaults(), arguments);\n\n\t\t// CLOCK/TEMPO\n\t\tthis._ppq = options.ppq;\n\t\tthis._clock = new Clock({\n\t\t\tcallback: this._processTick.bind(this),\n\t\t\tcontext: this.context,\n\t\t\tfrequency: 0,\n\t\t\tunits: \"bpm\",\n\t\t});\n\t\tthis._bindClockEvents();\n\t\tthis.bpm = this._clock.frequency as unknown as TickParam<\"bpm\">;\n\t\tthis._clock.frequency.multiplier = options.ppq;\n\t\tthis.bpm.value = options.bpm;\n\t\treadOnly(this, \"bpm\");\n\t\tthis._timeSignature = options.timeSignature;\n\n\t\t// SWING\n\t\tthis._swingTicks = options.ppq / 2; // 8n\n\t}\n\n\tstatic getDefaults(): TransportOptions {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tbpm: 120,\n\t\t\tloopEnd: \"4m\" as Subdivision,\n\t\t\tloopStart: 0,\n\t\t\tppq: 192,\n\t\t\tswing: 0,\n\t\t\tswingSubdivision: \"8n\" as Subdivision,\n\t\t\ttimeSignature: 4,\n\t\t});\n\t}\n\n\t//-------------------------------------\n\t// \tTICKS\n\t//-------------------------------------\n\n\t/**\n\t * called on every tick\n\t * @param  tickTime clock relative tick time\n\t */\n\tprivate _processTick(tickTime: Seconds, ticks: Ticks): void {\n\t\t// handle swing\n\t\tif (this._swingAmount > 0 &&\n\t\t\tticks % this._ppq !== 0 && // not on a downbeat\n\t\t\tticks % (this._swingTicks * 2) !== 0) {\n\t\t\t// add some swing\n\t\t\tconst progress = (ticks % (this._swingTicks * 2)) / (this._swingTicks * 2);\n\t\t\tconst amount = Math.sin((progress) * Math.PI) * this._swingAmount;\n\t\t\ttickTime += new TicksClass(this.context, this._swingTicks * 2 / 3).toSeconds() * amount;\n\t\t}\n\t\t// do the loop test\n\t\tif (this._loop.get(tickTime)) {\n\t\t\tif (ticks >= this._loopEnd) {\n\t\t\t\tthis.emit(\"loopEnd\", tickTime);\n\t\t\t\tthis._clock.setTicksAtTime(this._loopStart, tickTime);\n\t\t\t\tticks = this._loopStart;\n\t\t\t\tthis.emit(\"loopStart\", tickTime, this._clock.getSecondsAtTime(tickTime));\n\t\t\t\tthis.emit(\"loop\", tickTime);\n\t\t\t}\n\t\t}\n\t\t// invoke the timeline events scheduled on this tick\n\t\tthis._timeline.forEachAtTime(ticks, event => event.invoke(tickTime));\n\t}\n\n\t//-------------------------------------\n\t// \tSCHEDULABLE EVENTS\n\t//-------------------------------------\n\n\t/**\n\t * Schedule an event along the timeline.\n\t * @param callback The callback to be invoked at the time.\n\t * @param time The time to invoke the callback at.\n\t * @return The id of the event which can be used for canceling the event.\n\t * @example\n\t * import { Transport } from \"tone\";\n\t * // schedule an event on the 16th measure\n\t * Transport.schedule((time) => {\n\t * \t// invoked on measure 16\n\t * \tconsole.log(\"measure 16!\");\n\t * }, \"16:0:0\");\n\t */\n\tschedule(callback: TransportCallback, time: TransportTime | TransportTimeClass): number {\n\t\tconst event = new TransportEvent(this, {\n\t\t\tcallback,\n\t\t\ttime: new TransportTimeClass(this.context, time).toTicks(),\n\t\t});\n\t\treturn this._addEvent(event, this._timeline);\n\t}\n\n\t/**\n\t * Schedule a repeated event along the timeline. The event will fire\n\t * at the `interval` starting at the `startTime` and for the specified\n\t * `duration`.\n\t * @param  callback   The callback to invoke.\n\t * @param  interval   The duration between successive callbacks. Must be a positive number.\n\t * @param  startTime  When along the timeline the events should start being invoked.\n\t * @param  duration How long the event should repeat.\n\t * @return  The ID of the scheduled event. Use this to cancel the event.\n\t * @example\n\t * import { Oscillator, Transport } from \"tone\";\n\t * const osc = new Oscillator().toDestination().start();\n\t * // a callback invoked every eighth note after the first measure\n\t * Transport.scheduleRepeat((time) => {\n\t * \tosc.start(time).stop(time + 0.1);\n\t * }, \"8n\", \"1m\");\n\t */\n\tscheduleRepeat(\n\t\tcallback: TransportCallback,\n\t\tinterval: Time | TimeClass,\n\t\tstartTime?: TransportTime | TransportTimeClass,\n\t\tduration: Time = Infinity,\n\t): number {\n\t\tconst event = new TransportRepeatEvent(this, {\n\t\t\tcallback,\n\t\t\tduration: new TimeClass(this.context, duration).toTicks(),\n\t\t\tinterval: new TimeClass(this.context, interval).toTicks(),\n\t\t\ttime: new TransportTimeClass(this.context, startTime).toTicks(),\n\t\t});\n\t\t// kick it off if the Transport is started\n\t\t// @ts-ignore\n\t\treturn this._addEvent(event, this._repeatedEvents);\n\t}\n\n\t/**\n\t * Schedule an event that will be removed after it is invoked.\n\t * @param callback The callback to invoke once.\n\t * @param time The time the callback should be invoked.\n\t * @returns The ID of the scheduled event.\n\t */\n\tscheduleOnce(callback: TransportCallback, time: TransportTime | TransportTimeClass): number {\n\t\tconst event = new TransportEvent(this, {\n\t\t\tcallback,\n\t\t\tonce: true,\n\t\t\ttime: new TransportTimeClass(this.context, time).toTicks(),\n\t\t});\n\t\treturn this._addEvent(event, this._timeline);\n\t}\n\n\t/**\n\t * Clear the passed in event id from the timeline\n\t * @param eventId The id of the event.\n\t */\n\tclear(eventId: number): this {\n\t\tif (this._scheduledEvents.hasOwnProperty(eventId)) {\n\t\t\tconst item = this._scheduledEvents[eventId.toString()];\n\t\t\titem.timeline.remove(item.event);\n\t\t\titem.event.dispose();\n\t\t\tdelete this._scheduledEvents[eventId.toString()];\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add an event to the correct timeline. Keep track of the\n\t * timeline it was added to.\n\t * @returns the event id which was just added\n\t */\n\tprivate _addEvent(event: TransportEvent, timeline: Timeline<TransportEvent>): number {\n\t\tthis._scheduledEvents[event.id.toString()] = {\n\t\t\tevent,\n\t\t\ttimeline,\n\t\t};\n\t\ttimeline.add(event);\n\t\treturn event.id;\n\t}\n\n\t/**\n\t * Remove scheduled events from the timeline after\n\t * the given time. Repeated events will be removed\n\t * if their startTime is after the given time\n\t * @param after Clear all events after this time.\n\t */\n\tcancel(after: TransportTime = 0): this {\n\t\tconst computedAfter = this.toTicks(after);\n\t\tthis._timeline.forEachFrom(computedAfter, event => this.clear(event.id));\n\t\tthis._repeatedEvents.forEachFrom(computedAfter, event => this.clear(event.id));\n\t\treturn this;\n\t}\n\n\t//-------------------------------------\n\t// \tSTART/STOP/PAUSE\n\t//-------------------------------------\n\n\t/**\n\t * Bind start/stop/pause events from the clock and emit them.\n\t */\n\tprivate _bindClockEvents(): void {\n\t\tthis._clock.on(\"start\", (time, offset) => {\n\t\t\toffset = new TicksClass(this.context, offset).toSeconds();\n\t\t\tthis.emit(\"start\", time, offset);\n\t\t});\n\n\t\tthis._clock.on(\"stop\", (time) => {\n\t\t\tthis.emit(\"stop\", time);\n\t\t});\n\n\t\tthis._clock.on(\"pause\", (time) => {\n\t\t\tthis.emit(\"pause\", time);\n\t\t});\n\t}\n\n\t/**\n\t * Returns the playback state of the source, either \"started\", \"stopped\", or \"paused\"\n\t */\n\tget state(): PlaybackState {\n\t\treturn this._clock.getStateAtTime(this.now());\n\t}\n\n\t/**\n\t * Start the transport and all sources synced to the transport.\n\t * @param  time The time when the transport should start.\n\t * @param  offset The timeline offset to start the transport.\n\t * @example\n\t * import { Transport } from \"tone\";\n\t * // start the transport in one second starting at beginning of the 5th measure.\n\t * Transport.start(\"+1\", \"4:0:0\");\n\t */\n\tstart(time?: Time, offset?: TransportTime): this {\n\t\tlet offsetTicks;\n\t\tif (isDefined(offset)) {\n\t\t\toffsetTicks = this.toTicks(offset);\n\t\t}\n\t\t// start the clock\n\t\tthis._clock.start(time, offsetTicks);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the transport and all sources synced to the transport.\n\t * @param time The time when the transport should stop.\n\t * @example\n\t * import { Transport } from \"tone\";\n\t * Transport.stop();\n\t */\n\tstop(time?: Time): this {\n\t\tthis._clock.stop(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Pause the transport and all sources synced to the transport.\n\t */\n\tpause(time?: Time): this {\n\t\tthis._clock.pause(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Toggle the current state of the transport. If it is\n\t * started, it will stop it, otherwise it will start the Transport.\n\t * @param  time The time of the event\n\t */\n\ttoggle(time?: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tif (this._clock.getStateAtTime(time) !== \"started\") {\n\t\t\tthis.start(time);\n\t\t} else {\n\t\t\tthis.stop(time);\n\t\t}\n\t\treturn this;\n\t}\n\n\t//-------------------------------------\n\t// \tSETTERS/GETTERS\n\t//-------------------------------------\n\n\t/**\n\t * The time signature as just the numerator over 4.\n\t * For example 4/4 would be just 4 and 6/8 would be 3.\n\t * @example\n\t * import { Transport } from \"tone\";\n\t * // common time\n\t * Transport.timeSignature = 4;\n\t * // 7/8\n\t * Transport.timeSignature = [7, 8];\n\t * // this will be reduced to a single number\n\t * Transport.timeSignature; // returns 3.5\n\t */\n\tget timeSignature(): TimeSignature {\n\t\treturn this._timeSignature;\n\t}\n\tset timeSignature(timeSig: TimeSignature) {\n\t\tif (isArray(timeSig)) {\n\t\t\ttimeSig = (timeSig[0] / timeSig[1]) * 4;\n\t\t}\n\t\tthis._timeSignature = timeSig;\n\t}\n\n\t/**\n\t * When the Transport.loop = true, this is the starting position of the loop.\n\t */\n\tget loopStart(): Time {\n\t\treturn new TimeClass(this.context, this._loopStart, \"i\").toSeconds();\n\t}\n\tset loopStart(startPosition: Time) {\n\t\tthis._loopStart = this.toTicks(startPosition);\n\t}\n\n\t/**\n\t * When the Transport.loop = true, this is the ending position of the loop.\n\t */\n\tget loopEnd(): Time {\n\t\treturn new TimeClass(this.context, this._loopEnd, \"i\").toSeconds();\n\t}\n\tset loopEnd(endPosition: Time) {\n\t\tthis._loopEnd = this.toTicks(endPosition);\n\t}\n\t\n\t/**\n\t * If the transport loops or not.\n\t */\n\tget loop(): boolean {\n\t\treturn this._loop.get(this.now());\n\t}\n\tset loop(loop) {\n\t\tthis._loop.set(loop, this.now());\n\t}\n\n\t/**\n\t * Set the loop start and stop at the same time.\n\t * @example\n\t * import { Transport } from \"tone\";\n\t * // loop over the first measure\n\t * Transport.setLoopPoints(0, \"1m\");\n\t * Transport.loop = true;\n\t */\n\tsetLoopPoints(startPosition: TransportTime, endPosition: TransportTime): this {\n\t\tthis.loopStart = startPosition;\n\t\tthis.loopEnd = endPosition;\n\t\treturn this;\n\t}\n\n\t/**\n\t * The swing value. Between 0-1 where 1 equal to the note + half the subdivision.\n\t */\n\tget swing(): NormalRange {\n\t\treturn this._swingAmount;\n\t}\n\tset swing(amount: NormalRange) {\n\t\t// scale the values to a normal range\n\t\tthis._swingAmount = amount;\n\t}\n\n\t/**\n\t * Set the subdivision which the swing will be applied to.\n\t * The default value is an 8th note. Value must be less\n\t * than a quarter note.\n\t */\n\tget swingSubdivision(): Subdivision {\n\t\treturn new TicksClass(this.context, this._swingTicks).toNotation();\n\t}\n\tset swingSubdivision(subdivision: Subdivision) {\n\t\tthis._swingTicks = this.toTicks(subdivision);\n\t}\n\n\t/**\n\t * The Transport's position in Bars:Beats:Sixteenths.\n\t * Setting the value will jump to that position right away.\n\t */\n\tget position(): BarsBeatsSixteenths | Time {\n\t\tconst now = this.now();\n\t\tconst ticks = this._clock.getTicksAtTime(now);\n\t\treturn new TicksClass(this.context, ticks).toBarsBeatsSixteenths();\n\t}\n\tset position(progress: Time) {\n\t\tconst ticks = this.toTicks(progress);\n\t\tthis.ticks = ticks;\n\t}\n\n\t/**\n\t * The Transport's position in seconds\n\t * Setting the value will jump to that position right away.\n\t */\n\tget seconds(): Seconds {\n\t\treturn this._clock.seconds;\n\t}\n\tset seconds(s: Seconds) {\n\t\tconst now = this.now();\n\t\tconst ticks = this._clock.frequency.timeToTicks(s, now);\n\t\tthis.ticks = ticks;\n\t}\n\n\t/**\n\t * The Transport's loop position as a normalized value. Always\n\t * returns 0 if the transport if loop is not true.\n\t */\n\tget progress(): NormalRange {\n\t\tif (this.loop) {\n\t\t\tconst now = this.now();\n\t\t\tconst ticks = this._clock.getTicksAtTime(now);\n\t\t\treturn (ticks - this._loopStart) / (this._loopEnd - this._loopStart);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * The transports current tick position.\n\t */\n\tget ticks(): Ticks {\n\t\treturn this._clock.ticks;\n\t}\n\tset ticks(t: Ticks) {\n\t\tif (this._clock.ticks !== t) {\n\t\t\tconst now = this.now();\n\t\t\t// stop everything synced to the transport\n\t\t\tif (this.state === \"started\") {\n\t\t\t\tconst ticks = this._clock.getTicksAtTime(now);\n\t\t\t\t// schedule to start on the next tick, #573\n\t\t\t\tconst time = this._clock.getTimeOfTick(Math.ceil(ticks));\n\t\t\t\tthis.emit(\"stop\", time);\n\t\t\t\tthis._clock.setTicksAtTime(t, time);\n\t\t\t\t// restart it with the new time\n\t\t\t\tthis.emit(\"start\", time, this._clock.getSecondsAtTime(time));\n\t\t\t} else {\n\t\t\t\tthis._clock.setTicksAtTime(t, now);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Get the clock's ticks at the given time.\n\t * @param  time  When to get the tick value\n\t * @return The tick value at the given time.\n\t */\n\tgetTicksAtTime(time?: Time): Ticks {\n\t\treturn Math.round(this._clock.getTicksAtTime(time));\n\t}\n\n\t/**\n\t * Return the elapsed seconds at the given time.\n\t * @param  time  When to get the elapsed seconds\n\t * @return  The number of elapsed seconds\n\t */\n\tgetSecondsAtTime(time: Time): Seconds {\n\t\treturn this._clock.getSecondsAtTime(time);\n\t}\n\n\t/**\n\t * Pulses Per Quarter note. This is the smallest resolution\n\t * the Transport timing supports. This should be set once\n\t * on initialization and not set again. Changing this value\n\t * after other objects have been created can cause problems.\n\t */\n\tget PPQ(): number {\n\t\treturn this._clock.frequency.multiplier;\n\t}\n\tset PPQ(ppq: number) {\n\t\tthis._clock.frequency.multiplier = ppq;\n\t}\n\n\t//-------------------------------------\n\t// \tSYNCING\n\t//-------------------------------------\n\n\t/**\n\t * Returns the time aligned to the next subdivision\n\t * of the Transport. If the Transport is not started,\n\t * it will return 0.\n\t * Note: this will not work precisely during tempo ramps.\n\t * @param  subdivision  The subdivision to quantize to\n\t * @return  The context time of the next subdivision.\n\t * @example\n\t * import { Transport } from \"tone\";\n\t * // the transport must be started, otherwise returns 0\n\t * Transport.start(); \n\t * Transport.nextSubdivision(\"4n\");\n\t */\n\tnextSubdivision(subdivision?: Time): Seconds {\n\t\tsubdivision = this.toTicks(subdivision);\n\t\tif (this.state !== \"started\") {\n\t\t\t// if the transport's not started, return 0\n\t\t\treturn 0;\n\t\t} else {\n\t\t\tconst now = this.now();\n\t\t\t// the remainder of the current ticks and the subdivision\n\t\t\tconst transportPos = this.getTicksAtTime(now);\n\t\t\tconst remainingTicks = subdivision - transportPos % subdivision;\n\t\t\treturn this._clock.nextTickTime(remainingTicks, now);\n\t\t}\n\t}\n\n\t/**\n\t * Attaches the signal to the tempo control signal so that\n\t * any changes in the tempo will change the signal in the same\n\t * ratio.\n\t *\n\t * @param signal\n\t * @param ratio Optionally pass in the ratio between the two signals.\n\t * \t\t\tOtherwise it will be computed based on their current values.\n\t */\n\tsyncSignal(signal: Signal<any>, ratio?: number): this {\n\t\tif (!ratio) {\n\t\t\t// get the sync ratio\n\t\t\tconst now = this.now();\n\t\t\tif (signal.getValueAtTime(now) !== 0) {\n\t\t\t\tconst bpm = this.bpm.getValueAtTime(now);\n\t\t\t\tconst computedFreq = 1 / (60 / bpm / this.PPQ);\n\t\t\t\tratio = signal.getValueAtTime(now) / computedFreq;\n\t\t\t} else {\n\t\t\t\tratio = 0;\n\t\t\t}\n\t\t}\n\t\tconst ratioSignal = new Gain(ratio);\n\t\t// @ts-ignore\n\t\tthis.bpm.connect(ratioSignal);\n\t\t// @ts-ignore\n\t\tratioSignal.connect(signal._param);\n\t\tthis._syncedSignals.push({\n\t\t\tinitial: signal.value,\n\t\t\tratio: ratioSignal,\n\t\t\tsignal,\n\t\t});\n\t\tsignal.value = 0;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unsyncs a previously synced signal from the transport's control.\n\t * See Transport.syncSignal.\n\t */\n\tunsyncSignal(signal: Signal<any>): this {\n\t\tfor (let i = this._syncedSignals.length - 1; i >= 0; i--) {\n\t\t\tconst syncedSignal = this._syncedSignals[i];\n\t\t\tif (syncedSignal.signal === signal) {\n\t\t\t\tsyncedSignal.ratio.dispose();\n\t\t\t\tsyncedSignal.signal.value = syncedSignal.initial;\n\t\t\t\tthis._syncedSignals.splice(i, 1);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._clock.dispose();\n\t\twritable(this, \"bpm\");\n\t\tthis._timeline.dispose();\n\t\tthis._repeatedEvents.dispose();\n\t\treturn this;\n\t}\n\n\t//-------------------------------------\n\t// EMITTER MIXIN TO SATISFY COMPILER\n\t//-------------------------------------\n\n\ton!: (event: TransportEventNames, callback: (...args: any[]) => void) => this;\n\tonce!: (event: TransportEventNames, callback: (...args: any[]) => void) => this;\n\toff!: (event: TransportEventNames, callback?: ((...args: any[]) => void) | undefined) => this;\n\temit!: (event: any, ...args: any[]) => this;\n}\n\nEmitter.mixin(Transport);\n\n//-------------------------------------\n// \tINITIALIZATION\n//-------------------------------------\n\nonContextInit(context => {\n\tcontext.transport = new Transport({ context });\n});\n\nonContextClose(context => {\n\tcontext.transport.dispose();\n});\n","import { Param } from \"../context/Param\";\nimport { Time } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"./ToneAudioNode\";\n\nexport interface DelayOptions extends ToneAudioNodeOptions {\n\tdelayTime: Time;\n\tmaxDelay: Time;\n}\n\n/**\n * Wrapper around Web Audio's native [DelayNode](http://webaudio.github.io/web-audio-api/#the-delaynode-interface).\n * @category Core\n */\nexport class Delay extends ToneAudioNode<DelayOptions> {\n\n\treadonly name: string = \"Delay\";\n\n\t/**\n\t * The maximum delay time. This cannot be changed after\n\t * the value is passed into the constructor.\n\t */\n\treadonly maxDelay: Time;\n\n\t/**\n\t * The amount of time the incoming signal is delayed.\n\t */\n\treadonly delayTime: Param<\"time\">;\n\n\t/**\n\t * Private reference to the internal DelayNode\n\t */\n\tprivate _delayNode: DelayNode;\n\treadonly input: DelayNode;\n\treadonly output: DelayNode;\n\n\t/**\n\t * @param delayTime The delay applied to the incoming signal.\n\t * @param maxDelay The maximum delay time.\n\t */\n\tconstructor(delayTime?: Time, maxDelay?: Time);\n\tconstructor(options?: Partial<DelayOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Delay.getDefaults(), arguments, [\"delayTime\", \"maxDelay\"]));\n\n\t\tconst options = optionsFromArguments(Delay.getDefaults(), arguments, [\"delayTime\", \"maxDelay\"]);\n\n\t\tconst maxDelayInSeconds = this.toSeconds(options.maxDelay);\n\t\tthis.maxDelay = Math.max(maxDelayInSeconds, this.toSeconds(options.delayTime));\n\n\t\tthis._delayNode = this.input = this.output = this.context.createDelay(maxDelayInSeconds);\n\n\t\tthis.delayTime = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._delayNode.delayTime,\n\t\t\tunits: \"time\",\n\t\t\tvalue: options.delayTime,\n\t\t});\n\n\t\treadOnly(this, \"delayTime\");\n\t}\n\n\tstatic getDefaults(): DelayOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tdelayTime: 0,\n\t\t\tmaxDelay: 1,\n\t\t});\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._delayNode.disconnect();\n\t\tthis.delayTime.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Decibels } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\n\ninterface VolumeOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n\tmute: boolean;\n}\n\n/**\n * Volume is a simple volume node, useful for creating a volume fader.\n *\n * @example\n * import { Oscillator, Volume } from \"tone\";\n * const vol = new Volume(-12).toDestination();\n * const osc = new Oscillator().connect(vol).start();\n * @category Component\n */\nexport class Volume extends ToneAudioNode<VolumeOptions> {\n\n\treadonly name: string = \"Volume\";\n\n\t/**\n\t * the output node\n\t */\n\toutput: Gain<\"decibels\">;\n\n\t/**\n\t * Input and output are the same\n\t */\n\tinput: Gain<\"decibels\">;\n\n\t/**\n\t * The unmuted volume\n\t */\n\tprivate _unmutedVolume: Decibels;\n\n\t/**\n\t * The volume control in decibels.\n\t * @example\n\t * import { Oscillator, Volume } from \"tone\";\n\t * const vol = new Volume().toDestination();\n\t * const osc = new Oscillator().connect(vol).start();\n\t * vol.volume.value = -20;\n\t */\n\tvolume: Param<\"decibels\">;\n\n\t/**\n\t * @param volume the initial volume in decibels\n\t */\n\tconstructor(volume?: Decibels);\n\tconstructor(options?: Partial<VolumeOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Volume.getDefaults(), arguments, [\"volume\"]));\n\t\tconst options = optionsFromArguments(Volume.getDefaults(), arguments, [\"volume\"]);\n\n\t\tthis.input = this.output = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: options.volume,\n\t\t\tunits: \"decibels\",\n\t\t});\n\t\tthis.volume = this.output.gain;\n\t\treadOnly(this, \"volume\");\n\t\tthis._unmutedVolume = options.volume;\n\n\t\t// set the mute initially\n\t\tthis.mute = options.mute;\n\t}\n\n\tstatic getDefaults(): VolumeOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmute: false,\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Mute the output.\n\t * @example\n\t * import { Oscillator, Volume } from \"tone\";\n\t * const vol = new Volume(-12).toDestination();\n\t * const osc = new Oscillator().connect(vol).start();\n\t * // mute the output\n\t * vol.mute = true;\n\t */\n\tget mute(): boolean {\n\t\treturn this.volume.value === -Infinity;\n\t}\n\tset mute(mute: boolean) {\n\t\tif (!this.mute && mute) {\n\t\t\tthis._unmutedVolume = this.volume.value;\n\t\t\t// maybe it should ramp here?\n\t\t\tthis.volume.value = -Infinity;\n\t\t} else if (this.mute && !mute) {\n\t\t\tthis.volume.value = this._unmutedVolume;\n\t\t}\n\t}\n\n\t/**\n\t * clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.input.dispose();\n\t\tthis.volume.dispose();\n\t\treturn this;\n\t}\n}\n","import { Volume } from \"../../component/channel/Volume\";\nimport { connectSeries } from \"../Connect\";\nimport { Decibels } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { onContextClose, onContextInit } from \"./ContextInitialization\";\nimport { Gain } from \"./Gain\";\nimport { Param } from \"./Param\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"./ToneAudioNode\";\n\ninterface DestinationOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n\tmute: boolean;\n}\n\n/**\n * A single master output which is connected to the\n * AudioDestinationNode (aka your speakers).\n * It provides useful conveniences such as the ability\n * to set the volume and mute the entire application.\n * It also gives you the ability to apply master effects to your application.\n *\n * @example\n * import { Destination, Oscillator } from \"tone\";\n * const oscillator = new Oscillator().start();\n * // the audio will go from the oscillator to the speakers\n * oscillator.connect(Destination);\n * // a convenience for connecting to the master output is also provided:\n * oscillator.toDestination();\n * // these two are equivalent.\n * @category Core\n */\nexport class Destination extends ToneAudioNode<DestinationOptions> {\n\n\treadonly name: string = \"Destination\";\n\n\tinput: Volume = new Volume({ context: this.context });\n\toutput: Gain = new Gain({ context: this.context });\n\n\t/**\n\t * The volume of the master output.\n\t */\n\tvolume: Param<\"decibels\"> = this.input.volume;\n\n\tconstructor(options: Partial<DestinationOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Destination.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Destination.getDefaults(), arguments);\n\n\t\tconnectSeries(this.input, this.output, this.context.rawContext.destination);\n\n\t\tthis.mute = options.mute;\n\t}\n\n\tstatic getDefaults(): DestinationOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmute: false,\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Mute the output.\n\t * @example\n\t * import { Destination, Oscillator } from \"tone\";\n\t * const oscillator = new Oscillator().start().toDestination();\n\t * // mute the output\n\t * Destination.mute = true;\n\t */\n\tget mute(): boolean {\n\t\treturn this.input.mute;\n\t}\n\n\tset mute(mute: boolean) {\n\t\tthis.input.mute = mute;\n\t}\n\n\t/**\n\t * Add a master effects chain. NOTE: this will disconnect any nodes which were previously\n\t * chained in the master effects chain.\n\t * @param args All arguments will be connected in a row and the Master will be routed through it.\n\t * @return  {Destination}  this\n\t * @example\n\t * import { Compressor, Destination, Filter } from \"tone\";\n\t * // some overall compression to keep the levels in check\n\t * const masterCompressor = new Compressor({\n\t * \tthreshold: -6,\n\t * \tratio: 3,\n\t * \tattack: 0.5,\n\t * \trelease: 0.1\n\t * });\n\t * // give a little boost to the lows\n\t * const lowBump = new Filter(200, \"lowshelf\");\n\t * // route everything through the filter and compressor before going to the speakers\n\t * Destination.chain(lowBump, masterCompressor);\n\t */\n\tchain(...args: Array<AudioNode | ToneAudioNode>): this {\n\t\tthis.input.disconnect();\n\t\targs.unshift(this.input);\n\t\targs.push(this.output);\n\t\tconnectSeries(...args);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.volume.dispose();\n\t\treturn this;\n\t}\n}\n\n//-------------------------------------\n// \tINITIALIZATION\n//-------------------------------------\n\nonContextInit(context => {\n\tcontext.destination = new Destination({ context });\n});\n\nonContextClose(context => {\n\tcontext.destination.dispose();\n});\n","import { getContext, setContext } from \"../Global\";\nimport { Seconds } from \"../type/Units\";\nimport { OfflineContext } from \"./OfflineContext\";\nimport { ToneAudioBuffer } from \"./ToneAudioBuffer\";\n\n/**\n * Generate a buffer by rendering all of the Tone.js code within the callback using the OfflineAudioContext.\n * The OfflineAudioContext is capable of rendering much faster than real time in many cases.\n * The callback function also passes in an offline instance of [[Context]] which can be used\n * to schedule events along the Transport. \n * @param  callback  All Tone.js nodes which are created and scheduled within this callback are recorded into the output Buffer.\n * @param  duration     the amount of time to record for.\n * @return  The promise which is invoked with the ToneAudioBuffer of the recorded output.\n * @example\n * import { Offline, Oscillator } from \"tone\";\n * // render 2 seconds of the oscillator\n * Offline(() => {\n * \t// only nodes created in this callback will be recorded\n * \tconst oscillator = new Oscillator().toDestination().start(0);\n * }, 2).then((buffer) => {\n * \t// do something with the output buffer\n * \tconsole.log(buffer);\n * });\n * @example\n * import { Offline, Oscillator } from \"tone\";\n * // can also schedule events along the Transport\n * // using the passed in Offline Transport\n * Offline(({ transport }) => {\n * \tconst osc = new Oscillator().toDestination();\n * \ttransport.schedule(time => {\n * \t\tosc.start(time).stop(time + 0.1);\n * \t}, 1);\n * \t// make sure to start the transport\n * \ttransport.start(0.2);\n * }, 4).then((buffer) => {\n * \t// do something with the output buffer\n * \tconsole.log(buffer);\n * });\n * @category Core\n */\nexport async function Offline(\n\tcallback: (context: OfflineContext) => Promise<void> | void,\n\tduration: Seconds,\n\tchannels = 2,\n\tsampleRate: number = getContext().sampleRate,\n): Promise<ToneAudioBuffer> {\n\t// set the OfflineAudioContext based on the current context\n\tconst originalContext = getContext();\n\n\tconst context = new OfflineContext(channels, duration, sampleRate);\n\tsetContext(context);\n\n\t// invoke the callback/scheduling\n\tawait callback(context);\n\n\t// then render the audio\n\tconst bufferPromise = context.render();\n\n\t// return the original AudioContext\n\tsetContext(originalContext);\n\n\t// await the rendering\n\tconst buffer = await bufferPromise;\n\n\t// return the audio\n\treturn new ToneAudioBuffer(buffer);\n}\n","import { Tone } from \"../Tone\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { noOp } from \"../util/Interface\";\nimport { isString } from \"../util/TypeCheck\";\nimport { ToneAudioBuffer } from \"./ToneAudioBuffer\";\n\nexport interface ToneAudioBuffersUrlMap {\n\t[name: string]: string | AudioBuffer | ToneAudioBuffer;\n\t[name: number]: string | AudioBuffer | ToneAudioBuffer;\n}\n\ninterface ToneAudioBuffersOptions {\n\turls: ToneAudioBuffersUrlMap;\n\tonload: () => void;\n\tonerror?: (error: Error) => void;\n\tbaseUrl: string;\n}\n\n/**\n * A data structure for holding multiple buffers in a Map-like datastructure.\n *\n * @example\n * import { Player, ToneAudioBuffers } from \"tone\";\n * const pianoSamples = new ToneAudioBuffers({\n * \tC1: \"https://tonejs.github.io/examples/audio/casio/C1.mp3\",\n * \tC2: \"https://tonejs.github.io/examples/audio/casio/C2.mp3\",\n * }, () => {\n * \tconst player = new Player().toDestination();\n * \t// play one of the samples when they all load\n * \tplayer.buffer = pianoSamples.get(\"C2\");\n * \tplayer.start();\n * });\n * @example\n * import { ToneAudioBuffers } from \"tone\";\n * // To pass in additional parameters in the second parameter\n * const buffers = new ToneAudioBuffers({\n * \t urls: {\n * \t\t C1: \"C1.mp3\",\n * \t\t C2: \"C2.mp3\",\n * \t },\n * \t onload: () => console.log(\"loaded\"),\n * \t baseUrl: \"https://tonejs.github.io/examples/audio/casio/\"\n * });\n * @category Core\n */\nexport class ToneAudioBuffers extends Tone {\n\n\treadonly name: string = \"ToneAudioBuffers\";\n\n\t/**\n\t * All of the buffers\n\t */\n\tprivate _buffers: Map<string, ToneAudioBuffer> = new Map();\n\n\t/**\n\t * A path which is prefixed before every url.\n\t */\n\tbaseUrl: string;\n\n\t/**\n\t * Keep track of the number of loaded buffers\n\t */\n\tprivate _loadingCount = 0;\n\n\t/**\n\t * @param  urls  An object literal or array of urls to load.\n\t * @param onload  The callback to invoke when the buffers are loaded.\n\t * @param baseUrl A prefix url to add before all the urls\n\t */\n\tconstructor(\n\t\turls?: ToneAudioBuffersUrlMap,\n\t\tonload?: () => void,\n\t\tbaseUrl?: string,\n\t);\n\tconstructor(options?: Partial<ToneAudioBuffersOptions>);\n\tconstructor() {\n\n\t\tsuper();\n\t\tconst options = optionsFromArguments(\n\t\t\tToneAudioBuffers.getDefaults(), arguments, [\"urls\", \"onload\", \"baseUrl\"], \"urls\",\n\t\t);\n\n\t\tthis.baseUrl = options.baseUrl;\n\t\t// add each one\n\t\tObject.keys(options.urls).forEach(name => {\n\t\t\tthis._loadingCount++;\n\t\t\tconst url = options.urls[name];\n\t\t\tthis.add(name, url, this._bufferLoaded.bind(this, options.onload));\n\t\t});\n\n\t}\n\n\tstatic getDefaults(): ToneAudioBuffersOptions {\n\t\treturn {\n\t\t\tbaseUrl: \"\",\n\t\t\tonerror: noOp,\n\t\t\tonload: noOp,\n\t\t\turls: {},\n\t\t};\n\t}\n\n\t/**\n\t * True if the buffers object has a buffer by that name.\n\t * @param  name  The key or index of the buffer.\n\t */\n\thas(name: string | number): boolean {\n\t\treturn this._buffers.has(name.toString());\n\t}\n\n\t/**\n\t * Get a buffer by name. If an array was loaded,\n\t * then use the array index.\n\t * @param  name  The key or index of the buffer.\n\t */\n\tget(name: string | number): ToneAudioBuffer {\n\t\tthis.assert(this.has(name), `ToneAudioBuffers has no buffer named: ${name}`);\n\t\treturn this._buffers.get(name.toString()) as ToneAudioBuffer;\n\t}\n\n\t/**\n\t * A buffer was loaded. decrement the counter.\n\t */\n\tprivate _bufferLoaded(callback: () => void): void {\n\t\tthis._loadingCount--;\n\t\tif (this._loadingCount === 0 && callback) {\n\t\t\tcallback();\n\t\t}\n\t}\n\n\t/**\n\t * If the buffers are loaded or not\n\t */\n\tget loaded(): boolean {\n\t\treturn Array.from(this._buffers).every(([_, buffer]) => buffer.loaded);\n\t}\n\n\t/**\n\t * Add a buffer by name and url to the Buffers\n\t * @param  name      A unique name to give the buffer\n\t * @param  url  Either the url of the bufer, or a buffer which will be added with the given name.\n\t * @param  callback  The callback to invoke when the url is loaded.\n\t */\n\tadd(\n\t\tname: string | number,\n\t\turl: string | AudioBuffer | ToneAudioBuffer,\n\t\tcallback: () => void = noOp,\n\t): this {\n\t\tif (isString(url)) {\n\t\t\tthis._buffers.set(name.toString(), new ToneAudioBuffer(this.baseUrl + url, callback));\n\t\t} else {\n\t\t\tthis._buffers.set(name.toString(), new ToneAudioBuffer(url, callback));\n\t\t}\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._buffers.forEach(buffer => buffer.dispose());\n\t\tthis._buffers.clear();\n\t\treturn this;\n\t}\n}\n","import { getContext } from \"../Global\";\nimport { ftom, mtof } from \"./Conversions\";\nimport { FrequencyClass, FrequencyUnit } from \"./Frequency\";\nimport { TimeValue } from \"./TimeBase\";\nimport { Hertz, Interval, MidiNote, Seconds, Ticks } from \"./Units\";\n\n/**\n * Midi is a primitive type for encoding Time values.\n * Midi can be constructed with or without the `new` keyword. Midi can be passed\n * into the parameter of any method which takes time as an argument.\n * @category Unit\n */\nexport class MidiClass extends FrequencyClass<MidiNote> {\n\n\treadonly name: string = \"MidiClass\";\n\n\treadonly defaultUnits = \"midi\";\n\n\t/**\n\t * Returns the value of a frequency in the current units\n\t */\n\tprotected _frequencyToUnits(freq: Hertz): MidiNote {\n\t\treturn ftom(super._frequencyToUnits(freq));\n\t}\n\n\t/**\n\t * Returns the value of a tick in the current time units\n\t */\n\tprotected _ticksToUnits(ticks: Ticks): MidiNote {\n\t\treturn ftom(super._ticksToUnits(ticks));\n\t}\n\n\t/**\n\t * Return the value of the beats in the current units\n\t */\n\tprotected _beatsToUnits(beats: number): MidiNote {\n\t\treturn ftom(super._beatsToUnits(beats));\n\t}\n\n\t/**\n\t * Returns the value of a second in the current units\n\t */\n\tprotected _secondsToUnits(seconds: Seconds): MidiNote {\n\t\treturn ftom(super._secondsToUnits(seconds));\n\t}\n\n\t/**\n\t * Return the value of the frequency as a MIDI note\n\t * @example\n\t * import { Midi } from \"tone\";\n\t * Midi(60).toMidi(); // 60\n\t */\n\ttoMidi(): MidiNote {\n\t\treturn this.valueOf();\n\t}\n\n\t/**\n\t * Return the value of the frequency as a MIDI note\n\t * @example\n\t * import { Midi } from \"tone\";\n\t * Midi(60).toFrequency(); // 261.6255653005986\n\t */\n\ttoFrequency(): Hertz {\n\t\treturn mtof(this.toMidi());\n\t}\n\n\t/**\n\t * Transposes the frequency by the given number of semitones.\n\t * @return A new transposed MidiClass\n\t * @example\n\t * import { Midi } from \"tone\";\n\t * Midi(\"A4\").transpose(3); // \"C5\"\n\t */\n\ttranspose(interval: Interval): MidiClass {\n\t\treturn new MidiClass(this.context, this.toMidi() + interval);\n\t}\n}\n\n/**\n * Convert a value into a FrequencyClass object.\n * @category Unit\n */\nexport function Midi(value?: TimeValue, units?: FrequencyUnit): MidiClass {\n\treturn new MidiClass(getContext(), value, units);\n}\n","import { ToneWithContext, ToneWithContextOptions } from \"../context/ToneWithContext\";\nimport { Seconds, Time } from \"../type/Units\";\nimport { Timeline, TimelineEvent } from \"./Timeline\";\nimport { onContextClose, onContextInit } from \"../context/ContextInitialization\";\n\ninterface DrawEvent extends TimelineEvent {\n\tcallback: () => void;\n}\n\n/**\n * Draw is useful for synchronizing visuals and audio events.\n * Callbacks from Tone.Transport or any of the Tone.Event classes\n * always happen _before_ the scheduled time and are not synchronized\n * to the animation frame so they are not good for triggering tightly\n * synchronized visuals and sound. Draw makes it easy to schedule\n * callbacks using the AudioContext time and uses requestAnimationFrame.\n * @example\n * import { Draw, Transport } from \"tone\";\n * Transport.schedule((time) => {\n *  \t// use the time argument to schedule a callback with Draw\n *  \tDraw.schedule(() => {\n *  \t\t// do drawing or DOM manipulation here\n *  \t}, time);\n * }, \"+0.5\");\n * @category Core\n */\nexport class Draw extends ToneWithContext<ToneWithContextOptions> {\n\n\treadonly name: string = \"Draw\";\n\n\t/**\n\t * The duration after which events are not invoked.\n\t */\n\texpiration: Seconds = 0.25;\n\n\t/**\n\t * The amount of time before the scheduled time\n\t * that the callback can be invoked. Default is\n\t * half the time of an animation frame (0.008 seconds).\n\t */\n\tanticipation: Seconds = 0.008;\n\n\t/**\n\t * All of the events.\n\t */\n\tprivate _events: Timeline<DrawEvent> = new Timeline();\n\n\t/**\n\t * The draw loop\n\t */\n\tprivate _boundDrawLoop = this._drawLoop.bind(this);\n\n\t/**\n\t * The animation frame id\n\t */\n\tprivate _animationFrame = -1;\n\n\t/**\n\t * Schedule a function at the given time to be invoked\n\t * on the nearest animation frame.\n\t * @param  callback  Callback is invoked at the given time.\n\t * @param  time      The time relative to the AudioContext time to invoke the callback.\n\t */\n\tschedule(callback: () => void, time: Time): this {\n\t\tthis._events.add({\n\t\t\tcallback,\n\t\t\ttime: this.toSeconds(time),\n\t\t});\n\t\t// start the draw loop on the first event\n\t\tif (this._events.length === 1) {\n\t\t\tthis._animationFrame = requestAnimationFrame(this._boundDrawLoop);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Cancel events scheduled after the given time\n\t * @param  after  Time after which scheduled events will be removed from the scheduling timeline.\n\t */\n\tcancel(after?: Time): this {\n\t\tthis._events.cancel(this.toSeconds(after));\n\t\treturn this;\n\t}\n\n\t/**\n\t * The draw loop\n\t */\n\tprivate _drawLoop(): void {\n\t\tconst now = this.context.currentTime;\n\t\twhile (this._events.length && (this._events.peek() as DrawEvent).time - this.anticipation <= now) {\n\t\t\tconst event = this._events.shift();\n\t\t\tif (event && now - event.time <= this.expiration) {\n\t\t\t\tevent.callback();\n\t\t\t}\n\t\t}\n\t\tif (this._events.length > 0) {\n\t\t\tthis._animationFrame = requestAnimationFrame(this._boundDrawLoop);\n\t\t}\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._events.dispose();\n\t\tcancelAnimationFrame(this._animationFrame);\n\t\treturn this;\n\t}\n}\n\n//-------------------------------------\n// \tINITIALIZATION\n//-------------------------------------\n\nonContextInit(context => {\n\tcontext.draw = new Draw({ context });\n});\n\nonContextClose(context => {\n\tcontext.draw.dispose();\n});\n","import { Volume } from \"../component/channel/Volume\";\nimport \"../core/context/Destination\";\nimport \"../core/clock/Transport\";\nimport { Param } from \"../core/context/Param\";\nimport { OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { Decibels, Seconds, Time } from \"../core/type/Units\";\nimport { defaultArg } from \"../core/util/Defaults\";\nimport { noOp, readOnly } from \"../core/util/Interface\";\nimport { BasicPlaybackState, StateTimeline } from \"../core/util/StateTimeline\";\nimport { isUndef } from \"../core/util/TypeCheck\";\nimport { assertContextRunning } from \"../core/util/Debug\";\n\ntype onStopCallback = (source: Source<any>) => void;\n\nexport interface SourceOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n\tmute: boolean;\n\tonstop: onStopCallback;\n}\n\n/**\n * Base class for sources. \n * start/stop of this.context.transport.\n * \n * ```\n * // Multiple state change events can be chained together,\n * // but must be set in the correct order and with ascending times\n * // OK\n * state.start().stop(\"+0.2\");\n * // OK\n * state.start().stop(\"+0.2\").start(\"+0.4\").stop(\"+0.7\")\n * // BAD\n * state.stop(\"+0.2\").start();\n * // BAD\n * state.start(\"+0.3\").stop(\"+0.2\");\n * ```\n */\nexport abstract class Source<Options extends SourceOptions> extends ToneAudioNode<Options> {\n\n\t/**\n\t * The output volume node\n\t */\n\tprivate _volume: Volume;\n\n\t/**\n\t * The output note\n\t */\n\toutput: OutputNode;\n\n\t/**\n\t * Sources have no inputs\n\t */\n\tinput = undefined;\n\n\t/**\n\t * The volume of the output in decibels.\n\t * @example\n\t * import { PWMOscillator } from \"tone\";\n\t * const source = new PWMOscillator().toDestination();\n\t * source.volume.value = -6;\n\t */\n\tvolume: Param<\"decibels\">;\n\n\t/**\n\t * The callback to invoke when the source is stopped.\n\t */\n\tonstop: onStopCallback;\n\n\t/**\n\t * Keep track of the scheduled state.\n\t */\n\tprotected _state: StateTimeline<{\n\t\tduration?: Seconds;\n\t\toffset?: Seconds;\n\t\t/**\n\t\t * Either the buffer is explicitly scheduled to end using the stop method,\n\t\t * or it's implicitly ended when the buffer is over.\n\t\t */\n\t\timplicitEnd?: boolean;\n\t}> = new StateTimeline(\"stopped\");\n\n\t/**\n\t * The synced `start` callback function from the transport\n\t */\n\tprotected _synced = false;\n\n\t/**\n\t * Keep track of all of the scheduled event ids\n\t */\n\tprivate _scheduled: number[] = [];\n\n\t/**\n\t * Placeholder functions for syncing/unsyncing to transport\n\t */\n\tprivate _syncedStart: (time: Seconds, offset: Seconds) => void = noOp;\n\tprivate _syncedStop: (time: Seconds) => void = noOp;\n\n\tconstructor(options: SourceOptions) {\n\t\tsuper(options);\n\t\tthis._state.memory = 100;\n\t\tthis._state.increasing = true;\n\n\t\tthis._volume = this.output = new Volume({\n\t\t\tcontext: this.context,\n\t\t\tmute: options.mute,\n\t\t\tvolume: options.volume,\n\t\t});\n\t\tthis.volume = this._volume.volume;\n\t\treadOnly(this, \"volume\");\n\t\tthis.onstop = options.onstop;\n\t}\n\n\tstatic getDefaults(): SourceOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmute: false,\n\t\t\tonstop: noOp,\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Returns the playback state of the source, either \"started\" or \"stopped\".\n\t * @example\n\t * import { Player } from \"tone\";\n\t * const player = new Player(\"https://tonejs.github.io/examples/audio/FWDL.mp3\", () => {\n\t * \tplayer.start();\n\t * \tconsole.log(player.state);\n\t * }).toDestination();\n\t */\n\tget state(): BasicPlaybackState {\n\t\tif (this._synced) {\n\t\t\tif (this.context.transport.state === \"started\") {\n\t\t\t\treturn this._state.getValueAtTime(this.context.transport.seconds) as BasicPlaybackState;\n\t\t\t} else {\n\t\t\t\treturn \"stopped\";\n\t\t\t}\n\t\t} else {\n\t\t\treturn this._state.getValueAtTime(this.now()) as BasicPlaybackState;\n\t\t}\n\t}\n\n\t/**\n\t * Mute the output.\n\t * @example\n\t * import { Oscillator } from \"tone\";\n\t * const osc = new Oscillator().toDestination().start();\n\t * // mute the output\n\t * osc.mute = true;\n\t */\n\tget mute(): boolean {\n\t\treturn this._volume.mute;\n\t}\n\tset mute(mute: boolean) {\n\t\tthis._volume.mute = mute;\n\t}\n\n\t// overwrite these functions\n\tprotected abstract _start(time: Time, offset?: Time, duration?: Time): void;\n\tprotected abstract _stop(time: Time): void;\n\tabstract restart(time: Time, offset?: Time, duration?: Time): this;\n\n\t/**\n\t * Ensure that the scheduled time is not before the current time.\n\t * Should only be used when scheduled unsynced.\n\t */\n\tprivate _clampToCurrentTime(time: Seconds): Seconds {\n\t\tif (this._synced) {\n\t\t\treturn time;\n\t\t} else {\n\t\t\treturn Math.max(time, this.context.currentTime);\n\t\t}\n\t}\n\n\t/**\n\t * Start the source at the specified time. If no time is given,\n\t * start the source now.\n\t * @param  time When the source should be started.\n\t * @example\n\t * import { Oscillator } from \"tone\";\n\t * const source = new Oscillator().toDestination();\n\t * source.start(\"+0.5\"); // starts the source 0.5 seconds from now\n\t */\n\tstart(time?: Time, offset?: Time, duration?: Time): this {\n\t\tlet computedTime = isUndef(time) && this._synced ? this.context.transport.seconds : this.toSeconds(time);\n\t\tcomputedTime = this._clampToCurrentTime(computedTime);\n\t\t// if it's started, stop it and restart it\n\t\tif (this._state.getValueAtTime(computedTime) === \"started\") {\n\t\t\tthis._state.cancel(computedTime);\n\t\t\tthis._state.setStateAtTime(\"started\", computedTime);\n\t\t\tthis.log(\"restart\", computedTime);\n\t\t\tthis.restart(computedTime, offset, duration);\n\t\t} else {\n\t\t\tthis.log(\"start\", computedTime);\n\t\t\tthis._state.setStateAtTime(\"started\", computedTime);\n\t\t\tif (this._synced) {\n\t\t\t\t// add the offset time to the event\n\t\t\t\tconst event = this._state.get(computedTime);\n\t\t\t\tif (event) {\n\t\t\t\t\tevent.offset = this.toSeconds(defaultArg(offset, 0));\n\t\t\t\t\tevent.duration = duration ? this.toSeconds(duration) : undefined;\n\t\t\t\t}\n\t\t\t\tconst sched = this.context.transport.schedule(t => {\n\t\t\t\t\tthis._start(t, offset, duration);\n\t\t\t\t}, computedTime);\n\t\t\t\tthis._scheduled.push(sched);\n\n\t\t\t\t// if it's already started\n\t\t\t\tif (this.context.transport.state === \"started\") {\n\t\t\t\t\tthis._syncedStart(this.now(), this.context.transport.seconds);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._start(computedTime, offset, duration);\n\t\t\t}\n\t\t\tassertContextRunning(this.context);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the source at the specified time. If no time is given,\n\t * stop the source now.\n\t * @param  time When the source should be stopped.\n\t * @example\n\t * import { Oscillator } from \"tone\";\n\t * const source = new Oscillator().toDestination();\n\t * source.start();\n\t * source.stop(\"+0.5\"); // stops the source 0.5 seconds from now\n\t */\n\tstop(time?: Time): this {\n\t\tlet computedTime = isUndef(time) && this._synced ? this.context.transport.seconds : this.toSeconds(time);\n\t\tcomputedTime = this._clampToCurrentTime(computedTime);\n\t\tthis.log(\"stop\", computedTime);\n\t\tif (!this._synced) {\n\t\t\tthis._stop(computedTime);\n\t\t} else {\n\t\t\tconst sched = this.context.transport.schedule(this._stop.bind(this), computedTime);\n\t\t\tthis._scheduled.push(sched);\n\t\t}\n\t\tthis._state.cancel(computedTime);\n\t\tthis._state.setStateAtTime(\"stopped\", computedTime);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sync the source to the Transport so that all subsequent\n\t * calls to `start` and `stop` are synced to the TransportTime\n\t * instead of the AudioContext time.\n\t *\n\t * @example\n\t * import { Oscillator, Transport } from \"tone\";\n\t * const osc = new Oscillator().toDestination();\n\t * // sync the source so that it plays between 0 and 0.3 on the Transport's timeline\n\t * osc.sync().start(0).stop(0.3);\n\t * // start the transport.\n\t * Transport.start();\n\t * // set it to loop once a second\n\t * Transport.loop = true;\n\t * Transport.loopEnd = 1;\n\t */\n\tsync(): this {\n\t\tif (!this._synced) {\n\t\t\tthis._synced = true;\n\t\t\tthis._syncedStart = (time, offset) => {\n\t\t\t\tif (offset > 0) {\n\t\t\t\t\t// get the playback state at that time\n\t\t\t\t\tconst stateEvent = this._state.get(offset);\n\t\t\t\t\t// listen for start events which may occur in the middle of the sync'ed time\n\t\t\t\t\tif (stateEvent && stateEvent.state === \"started\" && stateEvent.time !== offset) {\n\t\t\t\t\t\t// get the offset\n\t\t\t\t\t\tconst startOffset = offset - this.toSeconds(stateEvent.time);\n\t\t\t\t\t\tlet duration;\n\t\t\t\t\t\tif (stateEvent.duration) {\n\t\t\t\t\t\t\tduration = this.toSeconds(stateEvent.duration) - startOffset;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._start(time, this.toSeconds(stateEvent.offset) + startOffset, duration);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis._syncedStop = time => {\n\t\t\t\tconst seconds = this.context.transport.getSecondsAtTime(Math.max(time - this.sampleTime, 0));\n\t\t\t\tif (this._state.getValueAtTime(seconds) === \"started\") {\n\t\t\t\t\tthis._stop(time);\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis.context.transport.on(\"start\", this._syncedStart);\n\t\t\tthis.context.transport.on(\"loopStart\", this._syncedStart);\n\t\t\tthis.context.transport.on(\"stop\", this._syncedStop);\n\t\t\tthis.context.transport.on(\"pause\", this._syncedStop);\n\t\t\tthis.context.transport.on(\"loopEnd\", this._syncedStop);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unsync the source to the Transport. See Source.sync\n\t */\n\tunsync(): this {\n\t\tif (this._synced) {\n\t\t\tthis.context.transport.off(\"stop\", this._syncedStop);\n\t\t\tthis.context.transport.off(\"pause\", this._syncedStop);\n\t\t\tthis.context.transport.off(\"loopEnd\", this._syncedStop);\n\t\t\tthis.context.transport.off(\"start\", this._syncedStart);\n\t\t\tthis.context.transport.off(\"loopStart\", this._syncedStart);\n\t\t}\n\t\tthis._synced = false;\n\t\t// clear all of the scheduled ids\n\t\tthis._scheduled.forEach(id => this.context.transport.clear(id));\n\t\tthis._scheduled = [];\n\t\tthis._state.cancel(0);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.onstop = noOp;\n\t\tthis.unsync();\n\t\tthis._volume.dispose();\n\t\tthis._state.dispose();\n\t\treturn this;\n\t}\n}\n","import { connect } from \"../../core/Connect\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { GainFactor, Positive, Seconds, Time } from \"../../core/type/Units\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp } from \"../../core/util/Interface\";\nimport { isDefined } from \"../../core/util/TypeCheck\";\nimport { OneShotSource, OneShotSourceCurve, OneShotSourceOptions } from \"../OneShotSource\";\nimport { GTE, LT } from \"../../core/util/Math\";\n\nexport type ToneBufferSourceCurve = OneShotSourceCurve;\n\nexport interface ToneBufferSourceOptions extends OneShotSourceOptions {\n\tbuffer: ToneAudioBuffer;\n\tcurve: ToneBufferSourceCurve;\n\tplaybackRate: Positive;\n\tfadeIn: Time;\n\tfadeOut: Time;\n\tloopStart: Time;\n\tloopEnd: Time;\n\tloop: boolean;\n\tonload: () => void;\n}\n\n/**\n * Wrapper around the native BufferSourceNode.\n * @category Source\n */\nexport class ToneBufferSource extends OneShotSource<ToneBufferSourceOptions> {\n\n\treadonly name: string = \"ToneBufferSource\";\n\n\t/**\n\t * The oscillator\n\t */\n\tprivate _source = this.context.createBufferSource();\n\tprotected _internalChannels = [this._source];\n\n\t/**\n\t * The frequency of the oscillator\n\t */\n\treadonly playbackRate: Param<\"positive\">;\n\n\t/**\n\t * The private instance of the buffer object\n\t */\n\tprivate _buffer: ToneAudioBuffer;\n\n\t/**\n\t * indicators if the source has started/stopped\n\t */\n\tprivate _sourceStarted = false;\n\tprivate _sourceStopped = false;\n\n\t/**\n\t * @param buffer The buffer to play\n\t * @param onload The callback to invoke when the buffer is done playing.\n\t */\n\tconstructor(buffer?: ToneAudioBuffer | AudioBuffer | string, onload?: () => void);\n\tconstructor(options?: Partial<ToneBufferSourceOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(ToneBufferSource.getDefaults(), arguments, [\"buffer\", \"onload\"]));\n\t\tconst options = optionsFromArguments(ToneBufferSource.getDefaults(), arguments, [\"buffer\", \"onload\"]);\n\n\t\tconnect(this._source, this._gainNode);\n\t\tthis._source.onended = () => this._stopSource();\n\n\t\t/**\n\t\t * The playbackRate of the buffer\n\t\t */\n\t\tthis.playbackRate = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._source.playbackRate,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.playbackRate,\n\t\t});\n\n\t\t// set some values initially\n\t\tthis.loop = options.loop;\n\t\tthis.loopStart = options.loopStart;\n\t\tthis.loopEnd = options.loopEnd;\n\t\tthis._buffer = new ToneAudioBuffer(options.buffer, options.onload);\n\n\t\tthis._internalChannels.push(this._source);\n\t}\n\n\tstatic getDefaults(): ToneBufferSourceOptions {\n\t\treturn Object.assign(OneShotSource.getDefaults(), {\n\t\t\tbuffer: new ToneAudioBuffer(),\n\t\t\tloop: false,\n\t\t\tloopEnd: 0,\n\t\t\tloopStart: 0,\n\t\t\tonload: noOp,\n\t\t\tplaybackRate: 1,\n\t\t});\n\t}\n\n\t/**\n\t * The fadeIn time of the amplitude envelope.\n\t */\n\tget fadeIn(): Time {\n\t\treturn this._fadeIn;\n\t}\n\tset fadeIn(t: Time) {\n\t\tthis._fadeIn = t;\n\t}\n\n\t/**\n\t * The fadeOut time of the amplitude envelope.\n\t */\n\tget fadeOut(): Time {\n\t\treturn this._fadeOut;\n\t}\n\tset fadeOut(t: Time) {\n\t\tthis._fadeOut = t;\n\t}\n\n\t/**\n\t * The curve applied to the fades, either \"linear\" or \"exponential\"\n\t */\n\tget curve(): ToneBufferSourceCurve {\n\t\treturn this._curve;\n\t}\n\tset curve(t) {\n\t\tthis._curve = t;\n\t}\n\n\t/**\n\t * Start the buffer\n\t * @param  time When the player should start.\n\t * @param  offset The offset from the beginning of the sample to start at.\n\t * @param  duration How long the sample should play. If no duration is given, it will default to the full length of the sample (minus any offset)\n\t * @param  gain  The gain to play the buffer back at.\n\t */\n\tstart(time?: Time, offset?: Time, duration?: Time, gain: GainFactor = 1): this {\n\t\tthis.assert(this.buffer.loaded, \"buffer is either not set or not loaded\");\n\t\tconst computedTime = this.toSeconds(time);\n\n\t\t// apply the gain envelope\n\t\tthis._startGain(computedTime, gain);\n\n\t\t// if it's a loop the default offset is the loopstart point\n\t\tif (this.loop) {\n\t\t\toffset = defaultArg(offset, this.loopStart);\n\t\t} else {\n\t\t\t// otherwise the default offset is 0\n\t\t\toffset = defaultArg(offset, 0);\n\t\t}\n\t\t// make sure the offset is not less than 0\n\t\tlet computedOffset = Math.max(this.toSeconds(offset), 0);\n\n\t\t// start the buffer source\n\t\tif (this.loop) {\n\t\t\t// modify the offset if it's greater than the loop time\n\t\t\tconst loopEnd = this.toSeconds(this.loopEnd) || this.buffer.duration;\n\t\t\tconst loopStart = this.toSeconds(this.loopStart);\n\t\t\tconst loopDuration = loopEnd - loopStart;\n\t\t\t// move the offset back\n\t\t\tif (GTE(computedOffset, loopEnd)) {\n\t\t\t\tcomputedOffset = ((computedOffset - loopStart) % loopDuration) + loopStart;\n\t\t\t}\n\t\t}\n\n\t\t// this.buffer.loaded would have return false if the AudioBuffer was undefined\n\t\tthis._source.buffer = this.buffer.get() as AudioBuffer;\n\t\tthis._source.loopEnd = this.toSeconds(this.loopEnd) || this.buffer.duration;\n\t\tif (LT(computedOffset, this.buffer.duration)) {\n\t\t\tthis._sourceStarted = true;\n\t\t\tthis._source.start(computedTime, computedOffset);\n\t\t}\n\n\t\t// if a duration is given, schedule a stop\n\t\tif (isDefined(duration)) {\n\t\t\tlet computedDur = this.toSeconds(duration);\n\t\t\t// make sure it's never negative\n\t\t\tcomputedDur = Math.max(computedDur, 0);\n\t\t\tthis.stop(computedTime + computedDur);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\tprotected _stopSource(time?: Seconds): void {\n\t\tif (!this._sourceStopped && this._sourceStarted) {\n\t\t\tthis._sourceStopped = true;\n\t\t\tthis._source.stop(this.toSeconds(time));\n\t\t\tthis._onended();\n\t\t}\n\t}\n\n\t/**\n\t * If loop is true, the loop will start at this position.\n\t */\n\tget loopStart(): Time {\n\t\treturn this._source.loopStart;\n\t}\n\tset loopStart(loopStart: Time) {\n\t\tthis._source.loopStart = this.toSeconds(loopStart);\n\t}\n\n\t/**\n\t * If loop is true, the loop will end at this position.\n\t */\n\tget loopEnd(): Time {\n\t\treturn this._source.loopEnd;\n\t}\n\tset loopEnd(loopEnd: Time) {\n\t\tthis._source.loopEnd = this.toSeconds(loopEnd);\n\t}\n\n\t/**\n\t * The audio buffer belonging to the player.\n\t */\n\tget buffer(): ToneAudioBuffer {\n\t\treturn this._buffer;\n\t}\n\tset buffer(buffer: ToneAudioBuffer) {\n\t\tthis._buffer.set(buffer);\n\t}\n\n\t/**\n\t * If the buffer should loop once it's over.\n\t */\n\tget loop(): boolean {\n\t\treturn this._source.loop;\n\t}\n\tset loop(loop: boolean) {\n\t\tthis._source.loop = loop;\n\t\tif (this._sourceStarted) {\n\t\t\tthis.cancelStop();\n\t\t}\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._source.onended = null;\n\t\tthis._source.disconnect();\n\t\tthis._buffer.dispose();\n\t\tthis.playbackRate.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioBuffer } from \"../core/context/ToneAudioBuffer\";\nimport { Positive, Time } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Source, SourceOptions } from \"../source/Source\";\nimport { ToneBufferSource } from \"./buffer/ToneBufferSource\";\n\nexport type NoiseType = \"white\" | \"brown\" | \"pink\";\n\nexport interface NoiseOptions extends SourceOptions {\n\ttype: NoiseType;\n\tplaybackRate: Positive;\n\tfadeIn: Time;\n\tfadeOut: Time;\n}\n\n/**\n * Noise is a noise generator. It uses looped noise buffers to save on performance.\n * Noise supports the noise types: \"pink\", \"white\", and \"brown\". Read more about\n * colors of noise on [Wikipedia](https://en.wikipedia.org/wiki/Colors_of_noise).\n *\n * @example\n * import { AutoFilter, Noise } from \"tone\";\n * // initialize the noise and start\n * const noise = new Noise(\"pink\").start();\n * // make an autofilter to shape the noise\n * const autoFilter = new AutoFilter({\n * \tfrequency: \"8n\",\n * \tbaseFrequency: 200,\n * \toctaves: 8\n * }).toDestination().start();\n * // connect the noise\n * noise.connect(autoFilter);\n * // start the autofilter LFO\n * autoFilter.start();\n * @category Source\n */\nexport class Noise extends Source<NoiseOptions> {\n\n\treadonly name: string = \"Noise\";\n\n\t/**\n\t * Private reference to the source\n\t */\n\tprivate _source: ToneBufferSource | null = null;\n\n\t/**\n\t * private reference to the type\n\t */\n\tprivate _type!: NoiseType;\n\n\t/**\n\t * The playback rate of the noise. Affects\n\t * the \"frequency\" of the noise.\n\t */\n\tprivate _playbackRate: Positive;\n\n\t/**\n\t * The fadeIn time of the amplitude envelope.\n\t */\n\tprotected _fadeIn: Time;\n\n\t/**\n\t * The fadeOut time of the amplitude envelope.\n\t */\n\tprotected _fadeOut: Time;\n\n\t/**\n\t * @param type the noise type (white|pink|brown)\n\t */\n\tconstructor(type?: NoiseType);\n\tconstructor(options?: Partial<NoiseOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Noise.getDefaults(), arguments, [\"type\"]));\n\t\tconst options = optionsFromArguments(Noise.getDefaults(), arguments, [\"type\"]);\n\n\t\tthis._playbackRate = options.playbackRate;\n\t\tthis.type = options.type;\n\t\tthis._fadeIn = options.fadeIn;\n\t\tthis._fadeOut = options.fadeOut;\n\t}\n\n\tstatic getDefaults(): NoiseOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tfadeIn: 0,\n\t\t\tfadeOut: 0,\n\t\t\tplaybackRate: 1,\n\t\t\ttype: \"white\" as NoiseType,\n\t\t});\n\t}\n\n\t/**\n\t * The type of the noise. Can be \"white\", \"brown\", or \"pink\".\n\t * @example\n\t * import { Noise } from \"tone\";\n\t * const noise = new Noise().toDestination().start();\n\t * noise.type = \"brown\";\n\t */\n\tget type(): NoiseType {\n\t\treturn this._type;\n\t}\n\tset type(type: NoiseType) {\n\t\tthis.assert(type in _noiseBuffers, \"Noise: invalid type: \" + type);\n\t\tif (this._type !== type) {\n\t\t\tthis._type = type;\n\t\t\t// if it's playing, stop and restart it\n\t\t\tif (this.state === \"started\") {\n\t\t\t\tconst now = this.now();\n\t\t\t\tthis._stop(now);\n\t\t\t\tthis._start(now);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * The playback rate of the noise. Affects\n\t * the \"frequency\" of the noise.\n\t */\n\tget playbackRate(): Positive {\n\t\treturn this._playbackRate;\n\t}\n\tset playbackRate(rate: Positive) {\n\t\tthis._playbackRate = rate;\n\t\tif (this._source) {\n\t\t\tthis._source.playbackRate.value = rate;\n\t\t}\n\t}\n\n\t/**\n\t * internal start method\n\t */\n\tprotected _start(time?: Time): void {\n\t\tconst buffer = _noiseBuffers[this._type];\n\t\tthis._source = new ToneBufferSource({\n\t\t\tbuffer,\n\t\t\tcontext: this.context,\n\t\t\tfadeIn: this._fadeIn,\n\t\t\tfadeOut: this._fadeOut,\n\t\t\tloop: true,\n\t\t\tonended: () => this.onstop(this),\n\t\t\tplaybackRate: this._playbackRate,\n\t\t}).connect(this.output);\n\t\tthis._source.start(this.toSeconds(time), Math.random() * (buffer.duration - 0.001));\n\t}\n\n\t/**\n\t * internal stop method\n\t */\n\tprotected _stop(time?: Time): void {\n\t\tif (this._source) {\n\t\t\tthis._source.stop(this.toSeconds(time));\n\t\t\tthis._source = null;\n\t\t}\n\t}\n\n\t/**\n\t * The fadeIn time of the amplitude envelope.\n\t */\n\tget fadeIn(): Time {\n\t\treturn this._fadeIn;\n\t}\n\tset fadeIn(time) {\n\t\tthis._fadeIn = time;\n\t\tif (this._source) {\n\t\t\tthis._source.fadeIn = this._fadeIn;\n\t\t}\n\t}\n\n\t/**\n\t * The fadeOut time of the amplitude envelope.\n\t */\n\tget fadeOut(): Time {\n\t\treturn this._fadeOut;\n\t}\n\tset fadeOut(time) {\n\t\tthis._fadeOut = time;\n\t\tif (this._source) {\n\t\t\tthis._source.fadeOut = this._fadeOut;\n\t\t}\n\t}\n\n\t/**\n\t * Restarts the noise.\n\t * @param  time When to restart the noise.\n\t */\n\trestart(time?: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(time) === \"started\") {\n\t\t\t// TODO could be optimized by cancelling the buffer source 'stop'\n\t\t\t// stop and restart\n\t\t\tthis._stop(time);\n\t\t\tthis._start(time);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (this._source) {\n\t\t\tthis._source.disconnect();\n\t\t}\n\t\treturn this;\n\t}\n}\n\n//--------------------\n// THE NOISE BUFFERS\n//--------------------\n\n// Noise buffer stats\nconst BUFFER_LENGTH = 44100 * 5;\nconst NUM_CHANNELS = 2;\n\n/**\n * The cached noise buffers\n */\ninterface NoiseCache {\n\t[key: string]: ToneAudioBuffer | null;\n}\n\n/**\n * Cache the noise buffers\n */\nconst _noiseCache: NoiseCache = {\n\tbrown: null,\n\tpink: null,\n\twhite: null,\n};\n\n/**\n * The noise arrays. Generated on initialization.\n * borrowed heavily from https://github.com/zacharydenton/noise.js\n * (c) 2013 Zach Denton (MIT)\n */\nconst _noiseBuffers = {\n\tget brown(): ToneAudioBuffer {\n\t\tif (!_noiseCache.brown) {\n\t\t\tconst buffer: Float32Array[] = [];\n\t\t\tfor (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {\n\t\t\t\tconst channel = new Float32Array(BUFFER_LENGTH);\n\t\t\t\tbuffer[channelNum] = channel;\n\t\t\t\tlet lastOut = 0.0;\n\t\t\t\tfor (let i = 0; i < BUFFER_LENGTH; i++) {\n\t\t\t\t\tconst white = Math.random() * 2 - 1;\n\t\t\t\t\tchannel[i] = (lastOut + (0.02 * white)) / 1.02;\n\t\t\t\t\tlastOut = channel[i];\n\t\t\t\t\tchannel[i] *= 3.5; // (roughly) compensate for gain\n\t\t\t\t}\n\t\t\t}\n\t\t\t_noiseCache.brown = new ToneAudioBuffer().fromArray(buffer);\n\t\t}\n\t\treturn _noiseCache.brown;\n\t},\n\n\tget pink(): ToneAudioBuffer {\n\t\tif (!_noiseCache.pink) {\n\t\t\tconst buffer: Float32Array[] = [];\n\t\t\tfor (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {\n\t\t\t\tconst channel = new Float32Array(BUFFER_LENGTH);\n\t\t\t\tbuffer[channelNum] = channel;\n\t\t\t\tlet b0, b1, b2, b3, b4, b5, b6;\n\t\t\t\tb0 = b1 = b2 = b3 = b4 = b5 = b6 = 0.0;\n\t\t\t\tfor (let i = 0; i < BUFFER_LENGTH; i++) {\n\t\t\t\t\tconst white = Math.random() * 2 - 1;\n\t\t\t\t\tb0 = 0.99886 * b0 + white * 0.0555179;\n\t\t\t\t\tb1 = 0.99332 * b1 + white * 0.0750759;\n\t\t\t\t\tb2 = 0.96900 * b2 + white * 0.1538520;\n\t\t\t\t\tb3 = 0.86650 * b3 + white * 0.3104856;\n\t\t\t\t\tb4 = 0.55000 * b4 + white * 0.5329522;\n\t\t\t\t\tb5 = -0.7616 * b5 - white * 0.0168980;\n\t\t\t\t\tchannel[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;\n\t\t\t\t\tchannel[i] *= 0.11; // (roughly) compensate for gain\n\t\t\t\t\tb6 = white * 0.115926;\n\t\t\t\t}\n\t\t\t}\n\t\t\t_noiseCache.pink = new ToneAudioBuffer().fromArray(buffer);\n\t\t}\n\t\treturn _noiseCache.pink;\n\t},\n\n\tget white(): ToneAudioBuffer {\n\t\tif (!_noiseCache.white) {\n\t\t\tconst buffer: Float32Array[] = [];\n\t\t\tfor (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {\n\t\t\t\tconst channel = new Float32Array(BUFFER_LENGTH);\n\t\t\t\tbuffer[channelNum] = channel;\n\t\t\t\tfor (let i = 0; i < BUFFER_LENGTH; i++) {\n\t\t\t\t\tchannel[i] = Math.random() * 2 - 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t_noiseCache.white = new ToneAudioBuffer().fromArray(buffer);\n\t\t}\n\t\treturn _noiseCache.white;\n\t},\n};\n","import { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { NormalRange, PowerOfTwo } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n\nexport type AnalyserType = \"fft\" | \"waveform\";\n\nexport interface AnalyserOptions extends ToneAudioNodeOptions {\n\tsize: PowerOfTwo;\n\ttype: AnalyserType;\n\tsmoothing: NormalRange;\n}\n\n/**\n * Wrapper around the native Web Audio's [AnalyserNode](http://webaudio.github.io/web-audio-api/#idl-def-AnalyserNode).\n * Extracts FFT or Waveform data from the incoming signal.\n * @category Component\n */\nexport class Analyser extends ToneAudioNode<AnalyserOptions> {\n\n\treadonly name: string = \"Analyser\";\n\n\treadonly input: AnalyserNode;\n\treadonly output: AnalyserNode;\n\n\t/**\n\t * The analyser node.\n\t */\n\tprivate _analyser = this.context.createAnalyser();\n\n\t/**\n\t * The analysis type\n\t */\n\tprivate _type!: AnalyserType;\n\n\t/**\n\t * The buffer that the FFT data is written to\n\t */\n\tprivate _buffer!: Float32Array;\n\n\t/**\n\t * @param type The return type of the analysis, either \"fft\", or \"waveform\".\n\t * @param size The size of the FFT. This must be a power of two in the range 16 to 16384.\n\t */\n\tconstructor(type?: AnalyserType, size?: number);\n\tconstructor(options?: Partial<AnalyserOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Analyser.getDefaults(), arguments, [\"type\", \"size\"]));\n\t\tconst options = optionsFromArguments(Analyser.getDefaults(), arguments, [\"type\", \"size\"]);\n\t\t// set the values initially\n\t\tthis.size = options.size;\n\t\tthis.type = options.type;\n\t\tthis.input = this.output = this._analyser;\n\t}\n\n\tstatic getDefaults(): AnalyserOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tsize: 1024,\n\t\t\tsmoothing: 0.8,\n\t\t\ttype: \"fft\" as AnalyserType,\n\t\t});\n\t}\n\n\t/**\n\t * Run the analysis given the current settings and return the\n\t */\n\tgetValue(): Float32Array {\n\t\tif (this._type === \"fft\") {\n\t\t\tthis._analyser.getFloatFrequencyData(this._buffer);\n\t\t} else if (this._type === \"waveform\") {\n\t\t\tthis._analyser.getFloatTimeDomainData(this._buffer);\n\t\t}\n\t\treturn this._buffer;\n\t}\n\n\t/**\n\t * The size of analysis. This must be a power of two in the range 16 to 16384.\n\t */\n\tget size(): PowerOfTwo {\n\t\treturn this._analyser.frequencyBinCount;\n\t}\n\tset size(size: PowerOfTwo) {\n\t\tthis._analyser.fftSize = size * 2;\n\t\tthis._buffer = new Float32Array(size);\n\t}\n\n\t/**\n\t * The analysis function returned by analyser.getValue(), either \"fft\" or \"waveform\".\n\t */\n\tget type(): AnalyserType {\n\t\treturn this._type;\n\t}\n\tset type(type: AnalyserType) {\n\t\tthis.assert(type === \"waveform\" || type === \"fft\", `Analyser: invalid type: ${type}`);\n\t\tthis._type = type;\n\t}\n\n\t/**\n\t * 0 represents no time averaging with the last analysis frame.\n\t */\n\tget smoothing(): NormalRange {\n\t\treturn this._analyser.smoothingTimeConstant;\n\t}\n\n\tset smoothing(val: NormalRange) {\n\t\tthis._analyser.smoothingTimeConstant = val;\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._analyser.disconnect();\n\t\treturn this;\n\t}\n}\n","import { InputNode, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Analyser } from \"./Analyser\";\n\nexport type MeterBaseOptions = ToneAudioNodeOptions;\n\n/**\n * The base class for Metering classes.\n */\nexport class MeterBase<Options extends MeterBaseOptions> extends ToneAudioNode<Options> {\n\n\treadonly name: string = \"MeterBase\";\n\n\t/**\n\t * The signal to be analysed\n\t */\n\tinput: InputNode;\n\n\t/**\n\t * The output is just a pass through of the input\n\t */\n\toutput: OutputNode;\n\n\t/**\n\t * The analyser node for the incoming signal\n\t */\n\tprotected _analyser: Analyser;\n\n\tconstructor(options?: Partial<MeterBaseOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(MeterBase.getDefaults(), arguments));\n\n\t\tthis.input = this.output = this._analyser = new Analyser({\n\t\t\tcontext: this.context,\n\t\t\tsize: 256,\n\t\t\ttype: \"waveform\",\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._analyser.dispose();\n\t\treturn this;\n\t}\n}\n","import { gainToDb } from \"../../core/type/Conversions\";\nimport { Decibels, NormalRange } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { MeterBase, MeterBaseOptions } from \"./MeterBase\";\nimport { warn } from \"../../core/util/Debug\";\n\nexport interface MeterOptions extends MeterBaseOptions {\n\tsmoothing: NormalRange;\n}\n\n/**\n * Meter gets the [RMS](https://en.wikipedia.org/wiki/Root_mean_square)\n * of an input signal. It can also get the raw value of the input signal.\n *\n * @example\n * import { Meter, UserMedia } from \"tone\";\n * const meter = new Meter();\n * const mic = new UserMedia();\n * mic.open();\n * // connect mic to the meter\n * mic.connect(meter);\n * // the current level of the mic\n * const level = meter.getValue();\n * @category Component\n */\nexport class Meter extends MeterBase<MeterOptions> {\n\n\treadonly name: string = \"Meter\";\n\n\t/**\n\t * A value from between 0 and 1 where 0 represents no time averaging with the last analysis frame.\n\t */\n\tsmoothing: number;\n\n\t/**\n\t * The previous frame's value\n\t */\n\tprivate _rms = 0;\n\n\t/**\n\t * @param smoothing The amount of smoothing applied between frames.\n\t */\n\tconstructor(smoothing?: NormalRange);\n\tconstructor(options?: Partial<MeterOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Meter.getDefaults(), arguments, [\"smoothing\"]));\n\t\tconst options = optionsFromArguments(Meter.getDefaults(), arguments, [\"smoothing\"]);\n\n\t\tthis.smoothing = options.smoothing;\n\t\tthis._analyser.size = 256;\n\t\tthis._analyser.type = \"waveform\";\n\t}\n\n\tstatic getDefaults(): MeterOptions {\n\t\treturn Object.assign(MeterBase.getDefaults(), {\n\t\t\tsmoothing: 0.8,\n\t\t});\n\t}\n\n\t/**\n\t * Use [[getValue]] instead. For the previous getValue behavior, use DCMeter.\n\t * @deprecated\n\t */\n\tgetLevel(): Decibels {\n\t\twarn(\"'getLevel' has been changed to 'getValue'\");\n\t\treturn this.getValue();\n\t}\n\n\t/**\n\t * Get the current decibel value of the incoming signal\n\t */\n\tgetValue(): number {\n\t\tconst values = this._analyser.getValue();\n\t\tconst totalSquared = values.reduce((total, current) => total + current * current, 0);\n\t\tconst rms = Math.sqrt(totalSquared / values.length);\n\t\t// the rms can only fall at the rate of the smoothing\n\t\t// but can jump up instantly\n\t\tthis._rms = Math.max(rms, this._rms * this.smoothing);\n\t\treturn gainToDb(this._rms);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._analyser.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { dbToGain } from \"../../core/type/Conversions\";\nimport { NormalRange, PowerOfTwo } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { MeterBase, MeterBaseOptions } from \"./MeterBase\";\n\nexport interface FFTOptions extends MeterBaseOptions {\n\tsize: PowerOfTwo;\n\tsmoothing: NormalRange;\n\tnormalRange: boolean;\n}\n\n/**\n * Get the current frequency data of the connected audio source using a fast Fourier transform.\n * @category Component\n */\nexport class FFT extends MeterBase<FFTOptions> {\n\n\treadonly name: string = \"FFT\";\n\n\t/**\n\t * If the output should be in decibels or normal range between 0-1. If `normalRange` is false,\n\t * the output range will be the measured decibel value, otherwise the decibel value will be converted to\n\t * the range of 0-1\n\t */\n\tnormalRange: boolean;\n\n\t/**\n\t * @param size The size of the FFT. Value must be a power of two in the range 16 to 16384.\n\t */\n\tconstructor(size?: PowerOfTwo);\n\tconstructor(options?: Partial<FFTOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(FFT.getDefaults(), arguments, [\"size\"]));\n\t\tconst options = optionsFromArguments(FFT.getDefaults(), arguments, [\"size\"]);\n\n\t\tthis.normalRange = options.normalRange;\n\t\tthis._analyser.type = \"fft\";\n\t\tthis.size = options.size;\n\t}\n\n\tstatic getDefaults(): FFTOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tnormalRange: false,\n\t\t\tsize: 1024,\n\t\t\tsmoothing: 0.8,\n\t\t});\n\t}\n\n\t/**\n\t * Gets the current frequency data from the connected audio source.\n\t * Returns the frequency data of length [[size]] as a Float32Array of decibel values.\n\t */\n\tgetValue(): Float32Array {\n\t\treturn this._analyser.getValue().map(v => this.normalRange ? dbToGain(v) : v);\n\t}\n\n\t/**\n\t * The size of analysis. This must be a power of two in the range 16 to 16384.\n\t * Determines the size of the array returned by [[getValue]] (i.e. the number of\n\t * frequency bins). Large FFT sizes may be costly to compute.\n\t */\n\tget size(): PowerOfTwo {\n\t\treturn this._analyser.size;\n\t}\n\tset size(size) {\n\t\tthis._analyser.size = size;\n\t}\n\n\t/**\n\t * 0 represents no time averaging with the last analysis frame.\n\t */\n\tget smoothing(): NormalRange {\n\t\treturn this._analyser.smoothing;\n\t}\n\tset smoothing(val) {\n\t\tthis._analyser.smoothing = val;\n\t}\n}\n","import { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { MeterBase, MeterBaseOptions } from \"./MeterBase\";\n\nexport type DCMeterOptions = MeterBaseOptions;\n\n/**\n * DCMeter gets the raw value of the input signal at the current time.\n *\n * @example\n * import { DCMeter, UserMedia } from \"tone\";\n * const meter = new DCMeter();\n * const mic = new UserMedia();\n * mic.open();\n * // connect mic to the meter\n * mic.connect(meter);\n * // the current level of the mic\n * const level = meter.getValue();\n * @category Component\n */\nexport class DCMeter extends MeterBase<DCMeterOptions> {\n\n\treadonly name: string = \"DCMeter\";\n\n\tconstructor(options?: Partial<DCMeterOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(DCMeter.getDefaults(), arguments));\n\n\t\tthis._analyser.type = \"waveform\";\n\t\tthis._analyser.size = 256;\n\t}\n\n\t/**\n\t * Get the signal value of the incoming signal\n\t */\n\tgetValue(): number {\n\t\tconst value = this._analyser.getValue();\n\t\treturn value[0];\n\t}\n}\n","import { PowerOfTwo } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { MeterBase, MeterBaseOptions } from \"./MeterBase\";\n\nexport interface WaveformOptions extends MeterBaseOptions {\n\t/**\n\t * The size of the Waveform. Value must be a power of two in the range 16 to 16384.\n\t */\n\tsize: PowerOfTwo;\n}\n\n/**\n * Get the current waveform data of the connected audio source.\n * @category Component\n */\nexport class Waveform extends MeterBase<WaveformOptions> {\n\n\treadonly name: string = \"Waveform\";\n\n\t/**\n\t * @param size The size of the Waveform. Value must be a power of two in the range 16 to 16384.\n\t */\n\tconstructor(size?: PowerOfTwo);\n\tconstructor(options?: Partial<WaveformOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Waveform.getDefaults(), arguments, [\"size\"]));\n\t\tconst options = optionsFromArguments(Waveform.getDefaults(), arguments, [\"size\"]);\n\n\t\tthis._analyser.type = \"waveform\";\n\t\tthis.size = options.size;\n\t}\n\n\tstatic getDefaults(): WaveformOptions {\n\t\treturn Object.assign(MeterBase.getDefaults(), {\n\t\t\tsize: 1024,\n\t\t});\n\t}\n\n\t/**\n\t * Return the waveform for the current time as a Float32Array where each value in the array\n\t * represents a sample in the waveform.\n\t */\n\tgetValue(): Float32Array {\n\t\treturn this._analyser.getValue();\n\t}\n\n\t/**\n\t * The size of analysis. This must be a power of two in the range 16 to 16384.\n\t * Determines the size of the array returned by [[getValue]].\n\t */\n\tget size(): PowerOfTwo {\n\t\treturn this._analyser.size;\n\t}\n\tset size(size) {\n\t\tthis._analyser.size = size;\n\t}\n}\n","import { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Frequency } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Gain } from \"../../core/context/Gain\";\n\nexport type OnePoleFilterType = \"highpass\" | \"lowpass\";\n\nexport interface OnePoleFilterOptions extends ToneAudioNodeOptions {\n\tfrequency: Frequency;\n\ttype: OnePoleFilterType;\n}\n\n/**\n * A one pole filter with 6db-per-octave rolloff. Either \"highpass\" or \"lowpass\". \n * Note that changing the type or frequency may result in a discontinuity which\n * can sound like a click or pop. \n * References: \n * * http://www.earlevel.com/main/2012/12/15/a-one-pole-filter/  \n * * http://www.dspguide.com/ch19/2.htm\n * * https://github.com/vitaliy-bobrov/js-rocks/blob/master/src/app/audio/effects/one-pole-filters.ts\n * @category Component\n */\nexport class OnePoleFilter extends ToneAudioNode<OnePoleFilterOptions> {\n\t\n\treadonly name: string = \"OnePoleFilter\";\n\n\t/**\n\t * Hold the current frequency\n\t */\n\tprivate _frequency: Frequency;\n\n\t/**\n\t * the current one pole type\n\t */\n\tprivate _type: OnePoleFilterType;\n\n\t/**\n\t * the current one pole filter\n\t */\n\tprivate _filter!: IIRFilterNode;\n\n\treadonly input: Gain;\n\treadonly output: Gain;\n\n\t/**\n\t * @param frequency The frequency\n\t * @param type The  filter type, either \"lowpass\" or \"highpass\"\n\t */\n\tconstructor(frequency?: Frequency, type?: OnePoleFilterType);\n\tconstructor(options?: Partial<OnePoleFilterOptions>)\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(OnePoleFilter.getDefaults(), arguments, [\"frequency\", \"type\"]));\n\t\tconst options = optionsFromArguments(OnePoleFilter.getDefaults(), arguments, [\"frequency\", \"type\"]);\n\n\t\tthis._frequency = options.frequency;\n\t\tthis._type = options.type;\n\t\tthis.input = new Gain({ context: this.context });\n\t\tthis.output = new Gain({ context: this.context });\n\t\tthis._createFilter();\n\t}\n\n\tstatic getDefaults(): OnePoleFilterOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tfrequency: 880,\n\t\t\ttype: \"lowpass\" as OnePoleFilterType\n\t\t});\n\t}\n\n\t/**\n\t * Create a filter and dispose the old one\n\t */\n\tprivate _createFilter() {\n\t\tconst oldFilter = this._filter;\n\t\tconst freq = this.toFrequency(this._frequency);\n\t\tconst t = 1 / (2 * Math.PI * freq);\n\t\tif (this._type === \"lowpass\") {\n\t\t\tconst a0 = 1 / (t * this.context.sampleRate);\n\t\t\tconst b1 = a0 - 1;\n\t\t\tthis._filter = this.context.createIIRFilter([a0, 0], [1, b1]);\n\t\t} else {\n\t\t\tconst b1 = 1 / (t * this.context.sampleRate) - 1;\n\t\t\tthis._filter = this.context.createIIRFilter([1, -1], [1, b1]);\n\t\t}\n\t\t\n\t\tthis.input.chain(this._filter, this.output);\n\t\tif (oldFilter) {\n\t\t\t// dispose it on the next block\n\t\t\tthis.context.setTimeout(() => {\n\t\t\t\tif (!this.disposed) {\n\t\t\t\t\tthis.input.disconnect(oldFilter);\n\t\t\t\t\toldFilter.disconnect();\n\t\t\t\t}\n\t\t\t}, this.blockTime);\n\t\t}\n\t}\n\n\t/**\n\t * The frequency value. \n\t */\n\tget frequency(): Frequency {\n\t\treturn this._frequency;\n\t}\n\tset frequency(fq) {\n\t\tthis._frequency = fq;\n\t\tthis._createFilter();\n\t}\n\t\n\t/**\n\t * The OnePole Filter type, either \"highpass\" or \"lowpass\"\n\t */\n\tget type(): OnePoleFilterType {\n\t\treturn this._type;\n\t}\n\tset type(t) {\n\t\tthis._type = t;\n\t\tthis._createFilter();\n\t}\n\n\t/**\n\t * Get the frequency response curve. This curve represents how the filter\n\t * responses to frequencies between 20hz-20khz.\n\t * @param  len The number of values to return\n\t * @return The frequency response curve between 20-20kHz\n\t */\n\tgetFrequencyResponse(len = 128): Float32Array {\n\t\tconst freqValues = new Float32Array(len);\n\t\tfor (let i = 0; i < len; i++) {\n\t\t\tconst norm = Math.pow(i / len, 2);\n\t\t\tconst freq = norm * (20000 - 20) + 20;\n\t\t\tfreqValues[i] = freq;\n\t\t}\n\t\tconst magValues = new Float32Array(len);\n\t\tconst phaseValues = new Float32Array(len);\n\t\tthis._filter.getFrequencyResponse(freqValues, magValues, phaseValues);\n\t\treturn magValues;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.input.dispose();\n\t\tthis.output.dispose();\n\t\tthis._filter.disconnect();\n\t\treturn this;\n\t}\n}\n","import { optionsFromArguments } from \"..//core/util/Defaults\";\nimport { InputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { connectSignal } from \"./Signal\";\n\nexport type SignalOperatorOptions = ToneAudioNodeOptions;\n\n/**\n * A signal operator has an input and output and modifies the signal.\n */\nexport abstract class SignalOperator<Options extends SignalOperatorOptions> extends ToneAudioNode<Options> {\n\n\tconstructor(options?: Partial<Options>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(SignalOperator.getDefaults(), arguments, [\"context\"])));\n\t}\n\n\tconnect(destination: InputNode, outputNum = 0, inputNum = 0): this {\n\t\tconnectSignal(this, destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { isArray, isFunction } from \"../core/util/TypeCheck\";\nimport { Signal } from \"./Signal\";\nimport { SignalOperator } from \"./SignalOperator\";\n\nexport type WaveShaperMappingFn = (value: number, index?: number) => number;\n\ntype WaveShaperMapping = WaveShaperMappingFn | number[] | Float32Array;\n\ninterface WaveShaperOptions extends ToneAudioNodeOptions {\n\tmapping?: WaveShaperMapping;\n\tlength: number;\n\tcurve?: number[] | Float32Array;\n}\n\n/**\n * Wraps the native Web Audio API\n * [WaveShaperNode](http://webaudio.github.io/web-audio-api/#the-waveshapernode-interface).\n *\n * @example\n * import { Oscillator, Signal, WaveShaper } from \"tone\";\n * const osc = new Oscillator().toDestination().start();\n * // multiply the output of the signal by 2 using the waveshaper's function\n * const timesTwo = new WaveShaper((val) => val * 2, 2048).connect(osc.frequency);\n * const signal = new Signal(440).connect(timesTwo);\n * @category Signal\n */\nexport class WaveShaper extends SignalOperator<WaveShaperOptions> {\n\n\treadonly name: string = \"WaveShaper\";\n\n\t/**\n\t * the waveshaper node\n\t */\n\tprivate _shaper: WaveShaperNode = this.context.createWaveShaper();\n\n\t/**\n\t * The input to the waveshaper node.\n\t */\n\tinput = this._shaper;\n\n\t/**\n\t * The output from the waveshaper node\n\t */\n\toutput = this._shaper;\n\n\t/**\n\t * @param mapping The function used to define the values.\n\t *                The mapping function should take two arguments:\n\t *                the first is the value at the current position\n\t *                and the second is the array position.\n\t *                If the argument is an array, that array will be\n\t *                set as the wave shaping function. The input\n\t *                signal is an AudioRange [-1, 1] value and the output\n\t *                signal can take on any numerical values.\n\t *\n\t * @param bufferLen The length of the WaveShaperNode buffer.\n\t */\n\tconstructor(mapping?: WaveShaperMapping, length?: number);\n\tconstructor(options?: Partial<WaveShaperOptions>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(WaveShaper.getDefaults(), arguments, [\"mapping\", \"length\"])));\n\t\tconst options = optionsFromArguments(WaveShaper.getDefaults(), arguments, [\"mapping\", \"length\"]);\n\n\t\tif (isArray(options.mapping) || options.mapping instanceof Float32Array) {\n\t\t\tthis.curve = Float32Array.from(options.mapping);\n\t\t} else if (isFunction(options.mapping)) {\n\t\t\tthis.setMap(options.mapping, options.length);\n\t\t}\n\t}\n\n\tstatic getDefaults(): WaveShaperOptions {\n\t\treturn Object.assign(Signal.getDefaults(), {\n\t\t\tlength: 1024,\n\t\t});\n\t}\n\n\t/**\n\t * Uses a mapping function to set the value of the curve.\n\t * @param mapping The function used to define the values.\n\t *                The mapping function take two arguments:\n\t *                the first is the value at the current position\n\t *                which goes from -1 to 1 over the number of elements\n\t *                in the curve array. The second argument is the array position.\n\t * @example\n\t * import { WaveShaper } from \"tone\";\n\t * const shaper = new WaveShaper();\n\t * // map the input signal from [-1, 1] to [0, 10]\n\t * shaper.setMap((val, index) => (val + 1) * 5);\n\t */\n\tsetMap(mapping: WaveShaperMappingFn, length = 1024): this {\n\t\tconst array = new Float32Array(length);\n\t\tfor (let i = 0, len = length; i < len; i++) {\n\t\t\tconst normalized = (i / (len - 1)) * 2 - 1;\n\t\t\tarray[i] = mapping(normalized, i);\n\t\t}\n\t\tthis.curve = array;\n\t\treturn this;\n\t}\n\n\t/**\n\t * The array to set as the waveshaper curve. For linear curves\n\t * array length does not make much difference, but for complex curves\n\t * longer arrays will provide smoother interpolation.\n\t */\n\tget curve(): Float32Array | null {\n\t\treturn this._shaper.curve;\n\t}\n\n\tset curve(mapping: Float32Array | null) {\n\t\tthis._shaper.curve = mapping;\n\t}\n\n\t/**\n\t * Specifies what type of oversampling (if any) should be used when\n\t * applying the shaping curve. Can either be \"none\", \"2x\" or \"4x\".\n\t */\n\tget oversample(): OverSampleType {\n\t\treturn this._shaper.oversample;\n\t}\n\n\tset oversample(oversampling: OverSampleType) {\n\t\tconst isOverSampleType = [\"none\", \"2x\", \"4x\"].some(str => str.includes(oversampling));\n\t\tthis.assert(isOverSampleType, \"oversampling must be either 'none', '2x', or '4x'\");\n\t\tthis._shaper.oversample = oversampling;\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._shaper.disconnect();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { SignalOperator } from \"./SignalOperator\";\nimport { WaveShaper } from \"./WaveShaper\";\n\n/**\n * Return the absolute value of an incoming signal.\n *\n * @example\n * import { Abs, Signal } from \"tone\";\n * const signal = new Signal(-1);\n * const abs = new Abs();\n * signal.connect(abs);\n * // the output of abs is 1.\n * @category Signal\n */\nexport class Abs extends SignalOperator<ToneAudioNodeOptions> {\n\n\treadonly name: string = \"Abs\";\n\n\t/**\n\t * The node which converts the audio ranges\n\t */\n\tprivate _abs = new WaveShaper({\n\t\tcontext: this.context,\n\t\tmapping: val => {\n\t\t\tif (Math.abs(val) < 0.001) {\n\t\t\t\treturn 0;\n\t\t\t} else {\n\t\t\t\treturn Math.abs(val);\n\t\t\t}\n\t\t},\n\t});\n\n\t/**\n\t * The AudioRange input [-1, 1]\n\t */\n\tinput = this._abs;\n\n\t/**\n\t * The output range [0, 1]\n\t */\n\toutput = this._abs;\n\n\t/**\n\t * clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._abs.dispose();\n\t\treturn this;\n\t}\n}\n","import { Time } from \"../../core/type/Units\";\nimport { InputNode, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { OnePoleFilter } from \"../filter/OnePoleFilter\";\nimport { Abs } from \"../../signal/Abs\";\n\nexport interface FollowerOptions extends ToneAudioNodeOptions {\n\tsmoothing: Time;\n}\n\n/**\n * Follower is a simple envelope follower. \n * It's implemented by applying a lowpass filter to the absolute value of the incoming signal. \n * ```\n *          +-----+    +---------------+\n * Input +--> Abs +----> OnePoleFilter +--> Output\n *          +-----+    +---------------+\n * ```\n * @category Component\n */\nexport class Follower extends ToneAudioNode<FollowerOptions> {\n\n\treadonly name: string = \"Follower\";\n\n\treadonly input: InputNode;\n\treadonly output: OutputNode;\n\n\t/**\n\t * Private reference to the smoothing parameter\n\t */\n\tprivate _smoothing: Time;\n\n\t/**\n\t * The lowpass filter\n\t */\n\tprivate _lowpass: OnePoleFilter;\n\n\t/**\n\t * The absolute value\n\t */\n\tprivate _abs: Abs;\n\n\t/**\n\t * @param smoothing The rate of change of the follower.\n\t */\n\tconstructor(smoothing?: Time);\n\tconstructor(options?: Partial<FollowerOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Follower.getDefaults(), arguments, [\"smoothing\"]));\n\t\tconst options = optionsFromArguments(Follower.getDefaults(), arguments, [\"smoothing\"]);\n\n\t\tthis._abs = this.input = new Abs({ context: this.context });\n\t\tthis._lowpass = this.output = new OnePoleFilter({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: 1 / this.toSeconds(options.smoothing),\n\t\t\ttype: \"lowpass\"\n\t\t});\n\t\tthis._abs.connect(this._lowpass);\n\t\tthis._smoothing = options.smoothing;\n\t}\n\n\tstatic getDefaults(): FollowerOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tsmoothing: 0.05\n\t\t});\n\t}\n\n\t/**\n\t * The amount of time it takes a value change to arrive at the updated value. \n\t */\n\tget smoothing(): Time {\n\t\treturn this._smoothing;\n\t}\n\tset smoothing(smoothing) {\n\t\tthis._smoothing = smoothing;\n\t\tthis._lowpass.frequency = 1 / this.toSeconds(this.smoothing);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._abs.dispose();\n\t\tthis._lowpass.dispose();\n\t\treturn this;\n\t}\n}\n","import { BaseContext } from \"../../core/context/BaseContext\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n\nexport interface SoloOptions extends ToneAudioNodeOptions {\n\tsolo: boolean;\n}\n\n/**\n * Solo lets you isolate a specific audio stream. When an instance is set to `solo=true`,\n * it will mute all other instances of Solo.\n * @example\n * import { Oscillator, Solo } from \"tone\";\n * \n * const soloA = new Solo().toDestination();\n * const oscA = new Oscillator(\"C4\", \"sawtooth\").connect(soloA);\n * const soloB = new Solo().toDestination();\n * const oscB = new Oscillator(\"E4\", \"square\").connect(soloB);\n * \n * soloA.solo = true;\n * // no audio will pass through soloB\n * @category Component\n */\nexport class Solo extends ToneAudioNode<SoloOptions> {\n\n\treadonly name: string = \"Solo\";\n\n\treadonly input: Gain;\n\treadonly output: Gain;\n\n\t/**\n\t * @param solo If the connection should be initially solo'ed.\n\t */\n\tconstructor(solo?: boolean);\n\tconstructor(options?: Partial<SoloOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Solo.getDefaults(), arguments, [\"solo\"]));\n\t\tconst options = optionsFromArguments(Solo.getDefaults(), arguments, [\"solo\"]);\n\n\t\tthis.input = this.output = new Gain({\n\t\t\tcontext: this.context,\n\t\t});\n\n\t\tif (!Solo._allSolos.has(this.context)) {\n\t\t\tSolo._allSolos.set(this.context, new Set());\n\t\t}\n\t\t(Solo._allSolos.get(this.context) as Set<Solo>).add(this);\n\n\t\t// set initially\n\t\tthis.solo = options.solo;\n\t}\n\n\tstatic getDefaults(): SoloOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tsolo: false,\n\t\t});\n\t}\n\n\t/**\n\t * Hold all of the solo'ed tracks belonging to a specific context\n\t */\n\tprivate static _allSolos: Map<BaseContext, Set<Solo>> = new Map();\n\n\t/**\n\t * Hold the currently solo'ed instance(s)\n\t */\n\tprivate static _soloed: Map<BaseContext, Set<Solo>> = new Map();\n\n\t/**\n\t * Isolates this instance and mutes all other instances of Solo.\n\t * Only one instance can be soloed at a time. A soloed\n\t * instance will report `solo=false` when another instance is soloed.\n\t */\n\tget solo(): boolean {\n\t\treturn this._isSoloed();\n\t}\n\tset solo(solo) {\n\t\tif (solo) {\n\t\t\tthis._addSolo();\n\t\t} else {\n\t\t\tthis._removeSolo();\n\t\t}\n\t\t(Solo._allSolos.get(this.context) as Set<Solo>).forEach(instance => instance._updateSolo());\n\t}\n\n\t/**\n\t * If the current instance is muted, i.e. another instance is soloed\n\t */\n\tget muted(): boolean {\n\t\treturn this.input.gain.value === 0;\n\t}\n\n\t/**\n\t * Add this to the soloed array\n\t */\n\tprivate _addSolo(): void {\n\t\tif (!Solo._soloed.has(this.context)) {\n\t\t\tSolo._soloed.set(this.context, new Set());\n\t\t}\n\t\t(Solo._soloed.get(this.context) as Set<Solo>).add(this);\n\t}\n\n\t/**\n\t * Remove this from the soloed array\n\t */\n\tprivate _removeSolo(): void {\n\t\tif (Solo._soloed.has(this.context)) {\n\t\t\t(Solo._soloed.get(this.context) as Set<Solo>).delete(this);\n\t\t}\n\t}\n\n\t/**\n\t * Is this on the soloed array\n\t */\n\tprivate _isSoloed(): boolean {\n\t\treturn Solo._soloed.has(this.context) && (Solo._soloed.get(this.context) as Set<Solo>).has(this);\n\t}\n\n\t/**\n\t * Returns true if no one is soloed\n\t */\n\tprivate _noSolos(): boolean {\n\t\t// either does not have any soloed added\n\t\treturn !Solo._soloed.has(this.context) ||\n\t\t\t// or has a solo set but doesn't include any items\n\t\t\t(Solo._soloed.has(this.context) && (Solo._soloed.get(this.context) as Set<Solo>).size === 0);\n\t}\n\n\t/**\n\t * Solo the current instance and unsolo all other instances.\n\t */\n\tprivate _updateSolo(): void {\n\t\tif (this._isSoloed()) {\n\t\t\tthis.input.gain.value = 1;\n\t\t} else if (this._noSolos()) {\n\t\t\t// no one is soloed\n\t\t\tthis.input.gain.value = 1;\n\t\t} else {\n\t\t\tthis.input.gain.value = 0;\n\t\t}\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\t(Solo._allSolos.get(this.context) as Set<Solo>).delete(this);\n\t\tthis._removeSolo();\n\t\treturn this;\n\t}\n}\n","import { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { AudioRange } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\n\ninterface TonePannerOptions extends ToneAudioNodeOptions {\n\tpan: AudioRange;\n}\n\n/**\n * Panner is an equal power Left/Right Panner. It is a wrapper around the StereoPannerNode.\n * @example\n * import { Oscillator, Panner } from \"tone\";\n * // pan the input signal hard right.\n * const panner = new Panner(1).toDestination();\n * const osc = new Oscillator().connect(panner).start();\n * @category Component\n */\nexport class Panner extends ToneAudioNode<TonePannerOptions> {\n\n\treadonly name: string = \"Panner\";\n\n\t/**\n\t * the panner node\n\t */\n\tprivate _panner: StereoPannerNode = this.context.createStereoPanner();\n\treadonly input: StereoPannerNode = this._panner;\n\treadonly output: StereoPannerNode = this._panner;\n\n\t/**\n\t * The pan control. -1 = hard left, 1 = hard right.\n\t * @min -1\n\t * @max 1\n\t */\n\treadonly pan: Param<\"audioRange\">;\n\n\tconstructor(options?: Partial<TonePannerOptions>);\n\t/**\n\t * @param pan The initial panner value (Defaults to 0 = \"center\").\n\t */\n\tconstructor(pan?: AudioRange);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Panner.getDefaults(), arguments, [\"pan\"])));\n\t\tconst options = optionsFromArguments(Panner.getDefaults(), arguments, [\"pan\"]);\n\n\t\tthis.pan = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._panner.pan,\n\t\t\tvalue: options.pan,\n\t\t\tminValue: -1,\n\t\t\tmaxValue: 1,\n\t\t});\n\n\t\t// this is necessary for standardized-audio-context\n\t\t// doesn't make any difference for the native AudioContext\n\t\t// https://github.com/chrisguttandin/standardized-audio-context/issues/647\n\t\tthis._panner.channelCount = 1;\n\t\tthis._panner.channelCountMode = \"explicit\";\n\n\t\t// initial value\n\t\treadOnly(this, \"pan\");\n\t}\n\n\tstatic getDefaults(): TonePannerOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tpan: 0,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._panner.disconnect();\n\t\tthis.pan.dispose();\n\t\treturn this;\n\t}\n}\n","import { readOnly } from \"../../core/util/Interface\";\nimport { Param } from \"../../core/context/Param\";\nimport { InputNode, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { AudioRange, Decibels } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Panner } from \"./Panner\";\nimport { Volume } from \"./Volume\";\n\nexport interface PanVolOptions extends ToneAudioNodeOptions {\n\tpan: AudioRange;\n\tvolume: Decibels;\n\tmute: boolean;\n}\n\n/**\n * PanVol is a Tone.Panner and Tone.Volume in one.\n * @example\n * import { Oscillator, PanVol } from \"tone\";\n * // pan the incoming signal left and drop the volume\n * const panVol = new PanVol(-0.25, -12).toDestination();\n * const osc = new Oscillator().connect(panVol).start();\n * @category Component\n */\nexport class PanVol extends ToneAudioNode<PanVolOptions> {\n\n\treadonly name: string = \"PanVol\";\n\n\treadonly input: InputNode;\n\treadonly output: OutputNode;\n\n\t/**\n\t * The panning node\n\t */\n\tprivate _panner: Panner;\n\n\t/**\n\t * The L/R panning control.\n\t */\n\treadonly pan: Param<\"audioRange\">;\n\n\t/**\n\t * The volume node\n\t */\n\tprivate _volume: Volume;\n\n\t/**\n\t * The volume control in decibels.\n\t */\n\treadonly volume: Param<\"decibels\">;\n\n\t/**\n\t * @param pan the initial pan\n\t * @param volume The output volume.\n\t */\n\tconstructor(pan?: AudioRange, volume?: Decibels);\n\tconstructor(options?: Partial<PanVolOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(PanVol.getDefaults(), arguments, [\"pan\", \"volume\"]));\n\t\tconst options = optionsFromArguments(PanVol.getDefaults(), arguments, [\"pan\", \"volume\"]);\n\n\t\tthis._panner = this.input = new Panner({\n\t\t\tcontext: this.context,\n\t\t\tpan: options.pan,\n\t\t});\n\t\tthis.pan = this._panner.pan;\n\t\tthis._volume = this.output = new Volume({\n\t\t\tcontext: this.context,\n\t\t\tvolume: options.volume,\n\t\t});\n\t\tthis.volume = this._volume.volume;\n\n\t\t// connections\n\t\tthis._panner.connect(this._volume);\n\t\tthis.mute = options.mute;\n\n\t\treadOnly(this, [\"pan\", \"volume\"]);\n\t}\n\n\tstatic getDefaults(): PanVolOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmute: false,\n\t\t\tpan: 0,\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Mute/unmute the volume\n\t */\n\tget mute(): boolean {\n\t\treturn this._volume.mute;\n\t}\n\tset mute(mute) {\n\t\tthis._volume.mute = mute;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._panner.dispose();\n\t\tthis.pan.dispose();\n\t\tthis._volume.dispose();\n\t\tthis.volume.dispose();\n\t\treturn this;\n\t}\n}\n","import { AudioRange, Decibels } from \"../../core/type/Units\";\nimport { InputNode, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Solo } from \"./Solo\";\nimport { PanVol } from \"./PanVol\";\nimport { Param } from \"../../core/context/Param\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Gain } from \"../../core/context/Gain\";\n\nexport interface ChannelOptions extends ToneAudioNodeOptions {\n\tpan: AudioRange;\n\tvolume: Decibels;\n\tsolo: boolean;\n\tmute: boolean;\n}\n\n/**\n * Channel provides a channel strip interface with volume, pan, solo and mute controls. \n * See [[PanVol]] and [[Solo]]\n * @example\n * import { Channel } from \"tone\";\n * // pan the incoming signal left and drop the volume 12db\n * const channel = new Channel(-0.25, -12);\n * @category Component\n */\nexport class Channel extends ToneAudioNode<ChannelOptions> {\n\n\treadonly name: string = \"Channel\";\n\n\treadonly input: InputNode;\n\treadonly output: OutputNode;\n\n\t/**\n\t * The soloing interface\n\t */\n\tprivate _solo: Solo;\n\n\t/**\n\t * The panning and volume node\n\t */\n\tprivate _panVol: PanVol;\n\n\t/**\n\t * The L/R panning control.\n\t */\n\treadonly pan: Param<\"audioRange\">;\n\n\t/**\n\t * The volume control in decibels.\n\t */\n\treadonly volume: Param<\"decibels\">;\n\t\n\t/**\n\t * @param volume The output volume.\n\t * @param pan the initial pan\n\t */\n\tconstructor(volume?: Decibels, pan?: AudioRange);\n\tconstructor(options?: Partial<ChannelOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Channel.getDefaults(), arguments, [\"volume\", \"pan\"]));\n\t\tconst options = optionsFromArguments(Channel.getDefaults(), arguments, [\"volume\", \"pan\"]);\n\n\t\tthis._solo = this.input = new Solo({\n\t\t\tsolo: options.solo,\n\t\t\tcontext: this.context,\n\t\t});\n\t\tthis._panVol = this.output = new PanVol({\n\t\t\tcontext: this.context,\n\t\t\tpan: options.pan,\n\t\t\tvolume: options.volume,\n\t\t\tmute: options.mute,\n\t\t});\n\t\tthis.pan = this._panVol.pan;\n\t\tthis.volume = this._panVol.volume;\n\n\t\tthis._solo.connect(this._panVol);\n\t\treadOnly(this, [\"pan\", \"volume\"]);\n\t}\n\n\tstatic getDefaults(): ChannelOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tpan: 0,\n\t\t\tvolume: 0,\n\t\t\tmute: false,\n\t\t\tsolo: false\n\t\t});\n\t}\n\n\t/**\n\t * Solo/unsolo the channel. Soloing is only relative to other [[Channels]] and [[Solo]] instances\n\t */\n\tget solo(): boolean {\n\t\treturn this._solo.solo;\n\t}\n\tset solo(solo) {\n\t\tthis._solo.solo = solo;\n\t}\n\n\t/**\n\t * If the current instance is muted, i.e. another instance is soloed,\n\t * or the channel is muted\n\t */\n\tget muted(): boolean {\n\t\treturn this._solo.muted || this.mute;\n\t}\n\n\t/**\n\t * Mute/unmute the volume\n\t */\n\tget mute(): boolean {\n\t\treturn this._panVol.mute;\n\t}\n\tset mute(mute) {\n\t\tthis._panVol.mute = mute;\n\t}\n\n\t/**\n\t * Store the send/receive channels by name. \n\t */\n\tprivate static buses: Map<string, Gain> = new Map();\n\n\t/**\n\t * Get the gain node belonging to the bus name. Create it if\n\t * it doesn't exist\n\t * @param name The bus name\n\t */\n\tprivate _getBus(name: string): Gain {\n\t\tif (!Channel.buses.has(name)) {\n\t\t\tChannel.buses.set(name, new Gain({ context: this.context }));\n\t\t}\n\t\treturn Channel.buses.get(name) as Gain;\n\t}\n\n\t/**\n\t * Send audio to another channel using a string. `send` is a lot like\n\t * [[connect]], except it uses a string instead of an object. This can \n\t * be useful in large applications to decouple sections since [[send]]\n\t * and [[receive]] can be invoked separately in order to connect an object\n\t * @param name The channel name to send the audio\n\t * @param volume The amount of the signal to send. \n\t * \tDefaults to 0db, i.e. send the entire signal\n\t * @returns Returns the gain node of this connection.\n\t */\n\tsend(name: string, volume: Decibels = 0): Gain<\"decibels\"> {\n\t\tconst bus = this._getBus(name);\n\t\tconst sendKnob = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"decibels\",\n\t\t\tgain: volume,\n\t\t});\n\t\tthis.connect(sendKnob);\n\t\tsendKnob.connect(bus);\n\t\treturn sendKnob;\n\t}\n\n\t/**\n\t * Receive audio from a channel which was connected with [[send]]. \n\t * @param name The channel name to receive audio from.\n\t */\n\treceive(name: string) {\n\t\tconst bus = this._getBus(name);\n\t\tbus.connect(this);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._panVol.dispose();\n\t\tthis.pan.dispose();\n\t\tthis.volume.dispose();\n\t\tthis._solo.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { SignalOperator } from \"./SignalOperator\";\nimport { WaveShaper } from \"./WaveShaper\";\n\n/**\n * GainToAudio converts an input in NormalRange [0,1] to AudioRange [-1,1].\n * See {@link AudioToGain}.\n * @category Signal\n */\nexport class GainToAudio extends SignalOperator<ToneAudioNodeOptions> {\n\n\treadonly name: string = \"GainToAudio\";\n\n\t/**\n\t * The node which converts the audio ranges\n\t */\n\tprivate _norm = new WaveShaper({\n\t\tcontext: this.context,\n\t\tmapping: x => Math.abs(x) * 2 - 1,\n\t});\n\n\t/**\n\t * The NormalRange input [0, 1]\n\t */\n\tinput = this._norm;\n\n\t/**\n\t * The AudioRange output [-1, 1]\n\t */\n\toutput = this._norm;\n\n\t/**\n\t * clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._norm.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { connect, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { NormalRange } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { GainToAudio } from \"../../signal/GainToAudio\";\nimport { Signal } from \"../../signal/Signal\";\n\ninterface CrossFadeOptions extends ToneAudioNodeOptions {\n\tfade: NormalRange;\n}\n\n/**\n * Tone.Crossfade provides equal power fading between two inputs.\n * More on crossfading technique [here](https://en.wikipedia.org/wiki/Fade_(audio_engineering)#Crossfading).\n * ```\n *                                             +---------+\n *                                            +> input a +>--+\n * +-----------+   +---------------------+     |         |   |\n * | 1s signal +>--> stereoPannerNode  L +>----> gain    |   |\n * +-----------+   |                     |     +---------+   |\n *               +-> pan               R +>-+                |   +--------+\n *               | +---------------------+  |                +---> output +>\n *  +------+     |                          |  +---------+   |   +--------+\n *  | fade +>----+                          | +> input b +>--+\n *  +------+                                |  |         |\n *                                          +--> gain    |\n *                                             +---------+\n * ```\n * @example\n * import { CrossFade, Oscillator } from \"tone\";\n * const crossFade = new CrossFade().toDestination();\n * // connect two inputs to a/b\n * const inputA = new Oscillator(440, \"square\").connect(crossFade.a).start();\n * const inputB = new Oscillator(440, \"sine\").connect(crossFade.b).start();\n * // use the fade to control the mix between the two\n * crossFade.fade.value = 0.5;\n * @category Component\n */\nexport class CrossFade extends ToneAudioNode<CrossFadeOptions> {\n\n\treadonly name: string = \"CrossFade\";\n\n\t/**\n\t * The crossfading is done by a StereoPannerNode\n\t */\n\tprivate _panner: StereoPannerNode = this.context.createStereoPanner();\n\n\t/**\n\t * Split the output of the panner node into two values used to control the gains.\n\t */\n\tprivate _split: ChannelSplitterNode = this.context.createChannelSplitter(2);\n\n\t/**\n\t * Convert the fade value into an audio range value so it can be connected\n\t * to the panner.pan AudioParam\n\t */\n\tprivate _g2a: GainToAudio = new GainToAudio({ context: this.context });\n\n\t/**\n\t * The input which is at full level when fade = 0\n\t */\n\treadonly a: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\n\t/**\n\t * The input which is at full level when fade = 1\n\t */\n\treadonly b: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\n\t/**\n\t * The output is a mix between `a` and `b` at the ratio of `fade`\n\t */\n\treadonly output: Gain = new Gain({ context: this.context });\n\n\t/**\n\t * CrossFade has no input, you must choose either `a` or `b`\n\t */\n\treadonly input: undefined;\n\n\t/**\n\t * The mix between the two inputs. A fade value of 0\n\t * will output 100% crossFade.a and\n\t * a value of 1 will output 100% crossFade.b.\n\t */\n\treadonly fade: Signal<\"normalRange\">;\n\n\tprotected _internalChannels = [this.a, this.b];\n\n\t/**\n\t * @param fade The initial fade value [0, 1].\n\t */\n\tconstructor(fade?: NormalRange);\n\tconstructor(options?: Partial<CrossFadeOptions>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(CrossFade.getDefaults(), arguments, [\"fade\"])));\n\t\tconst options = optionsFromArguments(CrossFade.getDefaults(), arguments, [\"fade\"]);\n\n\t\tthis.fade = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"normalRange\",\n\t\t\tvalue: options.fade,\n\t\t});\n\t\treadOnly(this, \"fade\");\n\n\t\tthis.context.getConstant(1).connect(this._panner);\n\t\tthis._panner.connect(this._split);\n\t\t// this is necessary for standardized-audio-context\n\t\t// doesn't make any difference for the native AudioContext\n\t\t// https://github.com/chrisguttandin/standardized-audio-context/issues/647\n\t\tthis._panner.channelCount = 1;\n\t\tthis._panner.channelCountMode = \"explicit\";\n\t\tconnect(this._split, this.a.gain, 0);\n\t\tconnect(this._split, this.b.gain, 1);\n\n\t\tthis.fade.chain(this._g2a, this._panner.pan);\n\n\t\tthis.a.connect(this.output);\n\t\tthis.b.connect(this.output);\n\t}\n\n\tstatic getDefaults(): CrossFadeOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tfade: 0.5,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.a.dispose();\n\t\tthis.b.dispose();\n\t\tthis.output.dispose();\n\t\tthis.fade.dispose();\n\t\tthis._g2a.dispose();\n\t\tthis._panner.disconnect();\n\t\tthis._split.disconnect();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Positive } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n\ninterface MergeOptions extends ToneAudioNodeOptions {\n\tchannels: Positive;\n}\n\n/**\n * Merge brings multiple mono input channels into a single multichannel output channel.\n *\n * @example\n * import { Merge, Noise, Oscillator } from \"tone\";\n * const merge = new Merge().toDestination();\n * // routing a sine tone in the left channel\n * const osc = new Oscillator().connect(merge, 0, 0).start();\n * // and noise in the right channel\n * const noise = new Noise().connect(merge, 0, 1).start();;\n * @category Component\n */\nexport class Merge extends ToneAudioNode<MergeOptions> {\n\n\treadonly name: string = \"Merge\";\n\n\t/**\n\t * The merger node for the channels.\n\t */\n\tprivate _merger: ChannelMergerNode;\n\n\t/**\n\t * The output is the input channels combined into a single (multichannel) output\n\t */\n\treadonly output: ChannelMergerNode;\n\n\t/**\n\t * Multiple input connections combine into a single output.\n\t */\n\treadonly input: ChannelMergerNode;\n\n\t/**\n\t * @param channels The number of channels to merge.\n\t */\n\tconstructor(channels?: Positive);\n\tconstructor(options?: Partial<MergeOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Merge.getDefaults(), arguments, [\"channels\"]));\n\t\tconst options = optionsFromArguments(Merge.getDefaults(), arguments, [\"channels\"]);\n\n\t\tthis._merger = this.output = this.input = this.context.createChannelMerger(options.channels);\n\t}\n\n\tstatic getDefaults(): MergeOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tchannels: 2,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._merger.disconnect();\n\t\treturn this;\n\t}\n}\n","import { connectSeries } from \"../core/Connect\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Param } from \"../core/context/Param\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Signal, SignalOptions } from \"./Signal\";\n\n/**\n * Add a signal and a number or two signals. When no value is\n * passed into the constructor, Tone.Add will sum input and `addend`\n * If a value is passed into the constructor, the it will be added to the input.\n *\n * @example\n * import { Add, Signal } from \"tone\";\n * const signal = new Signal(2);\n * // add a signal and a scalar\n * const add = new Add(2);\n * signal.connect(add);\n * // the output of add equals 4\n * @example\n * import { Add, Signal } from \"tone\";\n * // Add two signal inputs\n * const add = new Add();\n * const sig0 = new Signal(3).connect(add);\n * const sig1 = new Signal(4).connect(add.addend);\n * // the output of add equals 7.\n * @category Signal\n */\nexport class Add extends Signal {\n\n\toverride = false;\n\n\treadonly name: string = \"Add\";\n\n\t/**\n\t * the summing node\n\t */\n\tprivate _sum: Gain = new Gain({ context: this.context });\n\treadonly input = this._sum;\n\treadonly output = this._sum;\n\n\t/**\n\t * The value which is added to the input signal\n\t */\n\treadonly addend: Param<\"number\"> = this._param;\n\n\t/**\n\t * @param value If no value is provided, will sum the input and [[addend]].\n\t */\n\tconstructor(value?: number);\n\tconstructor(options?: Partial<SignalOptions<\"number\">>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Add.getDefaults(), arguments, [\"value\"])));\n\n\t\tconnectSeries(this._constantSource, this._sum);\n\t}\n\n\tstatic getDefaults(): SignalOptions<\"number\"> {\n\t\treturn Object.assign(Signal.getDefaults(), {\n\t\t\tvalue: 0,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._sum.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../core/context/Gain\";\nimport { Param } from \"../core/context/Param\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Signal, SignalOptions } from \"./Signal\";\n\n/**\n * Multiply two incoming signals. Or, if a number is given in the constructor,\n * multiplies the incoming signal by that value.\n *\n * @example\n * import { Multiply, Signal } from \"tone\";\n * // multiply two signals\n * const mult = new Multiply();\n * const sigA = new Signal(3);\n * const sigB = new Signal(4);\n * sigA.connect(mult);\n * sigB.connect(mult.factor);\n * // output of mult is 12.\n * @example\n * import { Multiply, Signal } from \"tone\";\n * // multiply a signal and a number\n * const mult = new Multiply(10);\n * const sig = new Signal(2).connect(mult);\n * // the output of mult is 20.\n * @category Signal\n */\nexport class Multiply<TypeName extends \"number\" | \"positive\" = \"number\"> extends Signal<TypeName> {\n\n\treadonly name: string = \"Multiply\";\n\n\t/**\n\t * Indicates if the value should be overridden on connection\n\t */\n\treadonly override = false;\n\n\t/**\n\t * the input gain node\n\t */\n\tprivate _mult: Gain = new Gain({ context: this.context });\n\n\t/**\n\t * The multiplicand input.\n\t */\n\tinput = this._mult;\n\n\t/**\n\t * The product of the input and {@link factor}\n\t */\n\toutput = this._mult;\n\n\t/**\n\t * The multiplication factor. Can be set directly or a signal can be connected to it.\n\t */\n\tfactor: Param<TypeName>;\n\n\t/**\n\t * @param value Constant value to multiple\n\t */\n\tconstructor(value?: number);\n\tconstructor(options?: Partial<SignalOptions<TypeName>>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Multiply.getDefaults(), arguments, [\"value\"])));\n\t\tconst options = optionsFromArguments(Multiply.getDefaults(), arguments, [\"value\"]);\n\n\t\tthis.factor = this._param = this._mult.gain as unknown as Param<TypeName>;\n\t\tthis.factor.setValueAtTime(options.value, 0);\n\t}\n\n\tstatic getDefaults(): SignalOptions<any> {\n\t\treturn Object.assign(Signal.getDefaults(), {\n\t\t\tvalue: 0,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._mult.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { Multiply } from \"./Multiply\";\nimport { SignalOperator } from \"./SignalOperator\";\n\n/**\n * Negate the incoming signal. i.e. an input signal of 10 will output -10\n *\n * @example\n * import { Negate, Signal } from \"tone\";\n * const neg = new Negate();\n * const sig = new Signal(-2).connect(neg);\n * // output of neg is positive 2.\n * @category Signal\n */\nexport class Negate extends SignalOperator<ToneAudioNodeOptions> {\n\n\treadonly name: string = \"Negate\";\n\n\t/**\n\t * negation is done by multiplying by -1\n\t */\n\tprivate _multiply: Multiply = new Multiply({\n\t\tcontext: this.context,\n\t\tvalue: -1,\n\t});\n\n\t/**\n\t * The input and output are equal to the multiply node\n\t */\n\tinput = this._multiply;\n\toutput = this._multiply;\n\n\t/**\n\t * clean up\n\t * @returns {Negate} this\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._multiply.dispose();\n\t\treturn this;\n\t}\n}\n","import { connectSeries } from \"../core/Connect\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Param } from \"../core/context/Param\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Negate } from \"../signal/Negate\";\nimport { Signal, SignalOptions } from \"../signal/Signal\";\n\n/**\n * Subtract the signal connected to the input is subtracted from the signal connected\n * The subtrahend.\n *\n * @example\n * import { Signal, Subtract } from \"tone\";\n * // subtract a scalar from a signal\n * const sub = new Subtract(1);\n * const sig = new Signal(4).connect(sub);\n * // the output of sub is 3.\n * @example\n * import { Signal, Subtract } from \"tone\";\n * // subtract two signals\n * const sub = new Subtract();\n * const sigA = new Signal(10);\n * const sigB = new Signal(2.5);\n * sigA.connect(sub);\n * sigB.connect(sub.subtrahend);\n * // output of sub is 7.5\n * @category Signal\n */\nexport class Subtract extends Signal {\n\n\toverride = false;\n\n\treadonly name: string = \"Subtract\";\n\n\t/**\n\t * the summing node\n\t */\n\tprivate _sum: Gain = new Gain({ context: this.context });\n\treadonly input: Gain = this._sum;\n\treadonly output: Gain = this._sum;\n\n\t/**\n\t * Negate the input of the second input before connecting it to the summing node.\n\t */\n\tprivate _neg: Negate = new Negate({ context: this.context });\n\n\t/**\n\t * The value which is subtracted from the main signal\n\t */\n\tsubtrahend: Param<\"number\"> = this._param;\n\n\t/**\n\t * @param value The value to subtract from the incoming signal. If the value\n\t *             is omitted, it will subtract the second signal from the first.\n\t */\n\tconstructor(value?: number);\n\tconstructor(options?: Partial<SignalOptions<\"number\">>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Subtract.getDefaults(), arguments, [\"value\"])));\n\n\t\tconnectSeries(this._constantSource, this._neg, this._sum);\n\t}\n\n\tstatic getDefaults(): SignalOptions<\"number\"> {\n\t\treturn Object.assign(Signal.getDefaults(), {\n\t\t\tvalue: 0,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._neg.dispose();\n\t\tthis._sum.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Merge } from \"./Merge\";\nimport { Add } from \"../../signal/Add\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Subtract } from \"../../signal/Subtract\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n\nexport type MidSideMergeOptions = ToneAudioNodeOptions;\n\n/**\n * MidSideMerge merges the mid and side signal after they've been separated by [[MidSideMerge]]\n * ```\n * Mid = (Left+Right)/sqrt(2);   // obtain mid-signal from left and right\n * Side = (Left-Right)/sqrt(2);   // obtain side-signal from left and righ\n * ```\n */\nexport class MidSideMerge extends ToneAudioNode<MidSideMergeOptions> {\n\t\n\treadonly name: string = \"MidSideMerge\";\n\n\t/**\n\t * There is no input, connect sources to either [[mid]] or [[side]] inputs.\n\t */\n\treadonly input: undefined;\n\n\t/**\n\t * The merged signal\n\t */\n\treadonly output: Merge;\n\n\t/**\n\t * Merge the incoming signal into left and right channels\n\t */\n\tprivate _merge: Merge;\n\n\t/**\n\t * The \"mid\" input.\n\t */\n\treadonly mid: ToneAudioNode;\n\n\t/**\n\t * The \"side\" input.\n\t */\n\treadonly side: ToneAudioNode;\n\n\t/**\n\t * Recombine the mid/side into Left\n\t */\n\tprivate _left: Add;\n\n\t/**\n\t * Recombine the mid/side into Right\n\t */\n\tprivate _right: Subtract;\n\n\t/**\n\t * Multiply the right by sqrt(1/2)\n\t */\n\tprivate _leftMult: Multiply;\n\n\t/**\n\t * Multiply the left by sqrt(1/2)\n\t */\n\tprivate _rightMult: Multiply;\n\t\n\tconstructor(options?: Partial<MidSideMergeOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(MidSideMerge.getDefaults(), arguments));\n\t\tthis.mid = new Gain({ context: this.context });\n\t\tthis.side = new Gain({ context: this.context });\n\t\tthis._left = new Add({ context: this.context });\n\t\tthis._leftMult = new Multiply({\n\t\t\tcontext: this.context, \n\t\t\tvalue: Math.SQRT1_2\n\t\t});\n\t\tthis._right = new Subtract({ context: this.context });\n\t\tthis._rightMult = new Multiply({\n\t\t\tcontext: this.context, \n\t\t\tvalue: Math.SQRT1_2\n\t\t});\n\t\tthis._merge = this.output = new Merge({ context: this.context });\n\n\t\tthis.mid.fan(this._left);\n\t\tthis.side.connect(this._left.addend);\n\t\tthis.mid.connect(this._right);\n\t\tthis.side.connect(this._right.subtrahend);\n\t\tthis._left.connect(this._leftMult);\n\t\tthis._right.connect(this._rightMult);\n\t\tthis._leftMult.connect(this._merge, 0, 0);\n\t\tthis._rightMult.connect(this._merge, 0, 1);\n\t}\n\t\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.mid.dispose();\n\t\tthis.side.dispose();\n\t\tthis._leftMult.dispose();\n\t\tthis._rightMult.dispose();\n\t\tthis._left.dispose();\n\t\tthis._right.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n\ninterface SplitOptions extends ToneAudioNodeOptions {\n\tchannels: number;\n}\n\n/**\n * Split splits an incoming signal into the number of given channels.\n *\n * @example\n * import { Split } from \"tone\";\n * \n * const split = new Split();\n * // stereoSignal.connect(split);\n * @category Component\n */\nexport class Split extends ToneAudioNode<SplitOptions> {\n\treadonly name: string = \"Split\";\n\n\t/**\n\t * The splitting node\n\t */\n\tprivate _splitter: ChannelSplitterNode;\n\n\treadonly input: ChannelSplitterNode;\n\treadonly output: ChannelSplitterNode;\n\n\t/**\n\t * @param channels The number of channels to merge.\n\t */\n\tconstructor(channels?: number);\n\tconstructor(options?: Partial<SplitOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Split.getDefaults(), arguments, [\"channels\"]));\n\t\tconst options = optionsFromArguments(Split.getDefaults(), arguments, [\"channels\"]);\n\n\t\tthis._splitter = this.input = this.output = this.context.createChannelSplitter(options.channels);\n\t\tthis._internalChannels = [this._splitter];\n\t}\n\n\tstatic getDefaults(): SplitOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tchannels: 2,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._splitter.disconnect();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Split } from \"./Split\";\nimport { Add } from \"../../signal/Add\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Subtract } from \"../../signal/Subtract\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n\nexport type MidSideSplitOptions = ToneAudioNodeOptions;\n\n/**\n * Mid/Side processing separates the the 'mid' signal (which comes out of both the left and the right channel)\n * and the 'side' (which only comes out of the the side channels).\n * ```\n * Mid = (Left+Right)/sqrt(2);   // obtain mid-signal from left and right\n * Side = (Left-Right)/sqrt(2);   // obtain side-signal from left and right\n * ```\n */\nexport class MidSideSplit extends ToneAudioNode<MidSideSplitOptions> {\n\t\n\treadonly name: string = \"MidSideSplit\";\n\n\treadonly input: Split;\n\n\t/**\n\t * There is no output node, use either [[mid]] or [[side]] outputs.\n\t */\n\treadonly output: undefined;\n\t/**\n\t * Split the incoming signal into left and right channels\n\t */\n\tprivate _split: Split;\n\n\t/**\n\t * Sums the left and right channels\n\t */\n\tprivate _midAdd: Add;\n\n\t/**\n\t * Subtract left and right channels. \n\t */\n\tprivate _sideSubtract: Subtract;\n\n\t/**\n\t * The \"mid\" output. `(Left+Right)/sqrt(2)`\n\t */\n\treadonly mid: ToneAudioNode;\n\n\t/**\n\t * The \"side\" output. `(Left-Right)/sqrt(2)`\n\t */\n\treadonly side: ToneAudioNode;\n\t\n\tconstructor(options?: Partial<MidSideSplitOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(MidSideSplit.getDefaults(), arguments));\n\n\t\tthis._split = this.input = new Split({\n\t\t\tchannels: 2,\n\t\t\tcontext: this.context\n\t\t});\n\t\tthis._midAdd = new Add({ context: this.context });\n\t\tthis.mid = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tvalue: Math.SQRT1_2,\n\t\t});\n\t\tthis._sideSubtract = new Subtract({ context: this.context });\n\t\tthis.side = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tvalue: Math.SQRT1_2,\n\t\t});\n\n\t\tthis._split.connect(this._midAdd, 0);\n\t\tthis._split.connect(this._midAdd.addend, 1);\n\t\tthis._split.connect(this._sideSubtract, 0);\n\t\tthis._split.connect(this._sideSubtract.subtrahend, 1);\n\t\tthis._midAdd.connect(this.mid);\n\t\tthis._sideSubtract.connect(this.side);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.mid.dispose();\n\t\tthis.side.dispose();\n\t\tthis._midAdd.dispose();\n\t\tthis._sideSubtract.dispose();\n\t\tthis._split.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { connectSeries, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Cents, Frequency, GainFactor, Positive } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { isNumber } from \"../../core/util/TypeCheck\";\nimport { Signal } from \"../../signal/Signal\";\n\nexport type FilterRollOff = -12 | -24 | -48 | -96;\n\nexport interface FilterOptions extends ToneAudioNodeOptions {\n\ttype: BiquadFilterType;\n\tfrequency: Frequency;\n\trolloff: FilterRollOff;\n\tQ: Positive;\n\tdetune: Cents;\n\tgain: GainFactor;\n}\n\n/**\n * Tone.Filter is a filter which allows for all of the same native methods\n * as the [BiquadFilterNode](http://webaudio.github.io/web-audio-api/#the-biquadfilternode-interface).\n * Tone.Filter has the added ability to set the filter rolloff at -12\n * (default), -24 and -48.\n * @example\n * import { Filter, Noise } from \"tone\";\n * \n * const filter = new Filter(1500, \"highpass\").toDestination();\n * filter.frequency.rampTo(20000, 10);\n * const noise = new Noise().connect(filter).start();\n * @category Component\n */\nexport class Filter extends ToneAudioNode<FilterOptions> {\n\n\treadonly name: string = \"Filter\";\n\n\treadonly input = new Gain({ context: this.context });\n\treadonly output = new Gain({ context: this.context });\n\tprivate _filters: BiquadFilterNode[] = [];\n\n\t/**\n\t * the rolloff value of the filter\n\t */\n\tprivate _rolloff!: FilterRollOff;\n\tprivate _type: BiquadFilterType;\n\n\t/**\n\t * The Q or Quality of the filter\n\t */\n\treadonly Q: Signal<\"positive\">;\n\n\t/**\n\t * The cutoff frequency of the filter.\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * The detune parameter\n\t */\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * The gain of the filter, only used in certain filter types\n\t */\n\treadonly gain: Signal<\"decibels\">;\n\n\t/**\n\t * @param frequency The cutoff frequency of the filter.\n\t * @param type The type of filter.\n\t * @param rolloff The drop in decibels per octave after the cutoff frequency\n\t */\n\tconstructor(frequency?: Frequency, type?: BiquadFilterType, rolloff?: FilterRollOff);\n\tconstructor(options?: Partial<FilterOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Filter.getDefaults(), arguments, [\"frequency\", \"type\", \"rolloff\"]));\n\t\tconst options = optionsFromArguments(Filter.getDefaults(), arguments, [\"frequency\", \"type\", \"rolloff\"]);\n\n\t\tthis._filters = [];\n\n\t\tthis.Q = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.Q,\n\t\t});\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t});\n\t\tthis.detune = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune,\n\t\t});\n\t\tthis.gain = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"decibels\",\n\t\t\tvalue: options.gain,\n\t\t});\n\t\tthis._type = options.type;\n\t\tthis.rolloff = options.rolloff;\n\t\treadOnly(this, [\"detune\", \"frequency\", \"gain\", \"Q\"]);\n\t}\n\n\tstatic getDefaults(): FilterOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tQ: 1,\n\t\t\tdetune: 0,\n\t\t\tfrequency: 350,\n\t\t\tgain: 0,\n\t\t\trolloff: -12 as FilterRollOff,\n\t\t\ttype: \"lowpass\" as BiquadFilterType,\n\t\t});\n\t}\n\n\t/**\n\t * The type of the filter. Types: \"lowpass\", \"highpass\",\n\t * \"bandpass\", \"lowshelf\", \"highshelf\", \"notch\", \"allpass\", or \"peaking\".\n\t */\n\tget type(): BiquadFilterType {\n\t\treturn this._type;\n\t}\n\tset type(type: BiquadFilterType) {\n\t\tconst types: BiquadFilterType[] = [\"lowpass\", \"highpass\", \"bandpass\",\n\t\t\t\"lowshelf\", \"highshelf\", \"notch\", \"allpass\", \"peaking\"];\n\t\tthis.assert(types.indexOf(type) !== -1, `Invalid filter type: ${type}`);\n\t\tthis._type = type;\n\t\tthis._filters.forEach(filter => filter.type = type);\n\t}\n\n\t/**\n\t * The rolloff of the filter which is the drop in db\n\t * per octave. Implemented internally by cascading filters.\n\t * Only accepts the values -12, -24, -48 and -96.\n\t */\n\tget rolloff(): FilterRollOff {\n\t\treturn this._rolloff;\n\t}\n\tset rolloff(rolloff) {\n\t\tconst rolloffNum = isNumber(rolloff) ? rolloff : parseInt(rolloff, 10) as FilterRollOff;\n\t\tconst possibilities = [-12, -24, -48, -96];\n\t\tlet cascadingCount = possibilities.indexOf(rolloffNum);\n\t\t// check the rolloff is valid\n\t\tthis.assert(cascadingCount !== -1, `rolloff can only be ${possibilities.join(\", \")}`);\n\t\tcascadingCount += 1;\n\n\t\tthis._rolloff = rolloffNum;\n\t\tthis.input.disconnect();\n\t\tthis._filters.forEach(filter => filter.disconnect());\n\n\t\tthis._filters = new Array(cascadingCount);\n\t\tfor (let count = 0; count < cascadingCount; count++) {\n\t\t\tconst filter = this.context.createBiquadFilter();\n\t\t\tfilter.type = this._type;\n\t\t\tthis.frequency.connect(filter.frequency);\n\t\t\tthis.detune.connect(filter.detune);\n\t\t\tthis.Q.connect(filter.Q);\n\t\t\tthis.gain.connect(filter.gain);\n\t\t\tthis._filters[count] = filter;\n\t\t}\n\t\tthis._internalChannels = this._filters;\n\t\tconnectSeries(this.input, ...this._internalChannels, this.output);\n\t}\n\n\t/**\n\t * Get the frequency response curve. This curve represents how the filter\n\t * responses to frequencies between 20hz-20khz.\n\t * @param  len The number of values to return\n\t * @return The frequency response curve between 20-20kHz\n\t */\n\tgetFrequencyResponse(len = 128): Float32Array {\n\t\t// start with all 1s\n\t\tconst totalResponse = new Float32Array(len).map(() => 1);\n\t\tconst freqValues = new Float32Array(len);\n\t\tfor (let i = 0; i < len; i++) {\n\t\t\tconst norm = Math.pow(i / len, 2);\n\t\t\tconst freq = norm * (20000 - 20) + 20;\n\t\t\tfreqValues[i] = freq;\n\t\t}\n\t\tconst magValues = new Float32Array(len);\n\t\tconst phaseValues = new Float32Array(len);\n\t\tthis._filters.forEach(() => {\n\t\t\tconst filterClone = this.context.createBiquadFilter();\n\t\t\tfilterClone.type = this._type;\n\t\t\tfilterClone.Q.value = this.Q.value;\n\t\t\tfilterClone.frequency.value = this.frequency.value as number;\n\t\t\tfilterClone.gain.value = this.gain.value as number;\n\t\t\tfilterClone.getFrequencyResponse(freqValues, magValues, phaseValues);\n\t\t\tmagValues.forEach((val, i) => {\n\t\t\t\ttotalResponse[i] *= val;\n\t\t\t});\n\t\t});\n\t\treturn totalResponse;\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._filters.forEach(filter => {\n\t\t\tfilter.disconnect();\n\t\t});\n\t\twritable(this, [\"detune\", \"frequency\", \"gain\", \"Q\"]);\n\t\tthis.frequency.dispose();\n\t\tthis.Q.dispose();\n\t\tthis.detune.dispose();\n\t\tthis.gain.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Frequency, Positive } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Filter } from \"../filter/Filter\";\n\ninterface MultibandSplitOptions extends ToneAudioNodeOptions {\n\tQ: Positive;\n\tlowFrequency: Frequency;\n\thighFrequency: Frequency;\n}\n\n/**\n * Split the incoming signal into three bands (low, mid, high)\n * with two crossover frequency controls.\n * ```\n *            +----------------------+\n *          +-> input < lowFrequency +------------------> low\n *          | +----------------------+\n *          |\n *          | +--------------------------------------+\n * input ---+-> lowFrequency < input < highFrequency +--> mid\n *          | +--------------------------------------+\n *          |\n *          | +-----------------------+\n *          +-> highFrequency < input +-----------------> high\n *            +-----------------------+\n * ```\n * @category Component\n */\nexport class MultibandSplit extends ToneAudioNode<MultibandSplitOptions> {\n\n\treadonly name: string = \"MultibandSplit\";\n\n\t/**\n\t * the input\n\t */\n\treadonly input = new Gain({ context: this.context });\n\n\t/**\n\t * no output node, use either low, mid or high outputs\n\t */\n\treadonly output = undefined;\n\n\t/**\n\t * The low band.\n\t */\n\treadonly low = new Filter({\n\t\tcontext: this.context,\n\t\tfrequency: 0,\n\t\ttype: \"lowpass\",\n\t});\n\n\t/**\n\t * the lower filter of the mid band\n\t */\n\tprivate _lowMidFilter = new Filter({\n\t\tcontext: this.context,\n\t\tfrequency: 0,\n\t\ttype: \"highpass\",\n\t});\n\n\t/**\n\t * The mid band output.\n\t */\n\treadonly mid = new Filter({\n\t\tcontext: this.context,\n\t\tfrequency: 0,\n\t\ttype: \"lowpass\",\n\t});\n\n\t/**\n\t * The high band output.\n\t */\n\treadonly high = new Filter({\n\t\tcontext: this.context,\n\t\tfrequency: 0,\n\t\ttype: \"highpass\",\n\t});\n\n\t/**\n\t * The low/mid crossover frequency.\n\t */\n\treadonly lowFrequency: Signal<\"frequency\">;\n\n\t/**\n\t * The mid/high crossover frequency.\n\t */\n\treadonly highFrequency: Signal<\"frequency\">;\n\n\tprotected _internalChannels = [this.low, this.mid, this.high];\n\n\t/**\n\t * The Q or Quality of the filter\n\t */\n\treadonly Q: Signal<\"positive\">;\n\n\t/**\n\t * @param lowFrequency the low/mid crossover frequency\n\t * @param highFrequency the mid/high crossover frequency\n\t */\n\tconstructor(lowFrequency?: Frequency, highFrequency?: Frequency);\n\tconstructor(options?: Partial<MultibandSplitOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(MultibandSplit.getDefaults(), arguments, [\"lowFrequency\", \"highFrequency\"]));\n\t\tconst options = optionsFromArguments(MultibandSplit.getDefaults(), arguments, [\"lowFrequency\", \"highFrequency\"]);\n\n\t\tthis.lowFrequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.lowFrequency,\n\t\t});\n\n\t\tthis.highFrequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.highFrequency,\n\t\t});\n\n\t\tthis.Q = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.Q,\n\t\t});\n\n\t\tthis.input.fan(this.low, this.high);\n\t\tthis.input.chain(this._lowMidFilter, this.mid);\n\t\t// the frequency control signal\n\t\tthis.lowFrequency.fan(this.low.frequency, this._lowMidFilter.frequency);\n\t\tthis.highFrequency.fan(this.mid.frequency, this.high.frequency);\n\t\t// the Q value\n\t\tthis.Q.connect(this.low.Q);\n\t\tthis.Q.connect(this._lowMidFilter.Q);\n\t\tthis.Q.connect(this.mid.Q);\n\t\tthis.Q.connect(this.high.Q);\n\n\t\treadOnly(this, [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n\t}\n\n\tstatic getDefaults(): MultibandSplitOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tQ: 1,\n\t\t\thighFrequency: 2500,\n\t\t\tlowFrequency: 400,\n\t\t});\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\twritable(this, [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n\t\tthis.low.dispose();\n\t\tthis._lowMidFilter.dispose();\n\t\tthis.mid.dispose();\n\t\tthis.high.dispose();\n\t\tthis.lowFrequency.dispose();\n\t\tthis.highFrequency.dispose();\n\t\tthis.Q.dispose();\n\t\treturn this;\n\t}\n\n}\n","import { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Decibels, Positive, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\n\nexport interface CompressorOptions extends ToneAudioNodeOptions {\n\tattack: Time;\n\tknee: Decibels;\n\tratio: Positive;\n\trelease: Time;\n\tthreshold: Decibels;\n}\n\n/**\n * Compressor is a thin wrapper around the Web Audio\n * [DynamicsCompressorNode](http://webaudio.github.io/web-audio-api/#the-dynamicscompressornode-interface).\n * Compression reduces the volume of loud sounds or amplifies quiet sounds\n * by narrowing or \"compressing\" an audio signal's dynamic range.\n * Read more on [Wikipedia](https://en.wikipedia.org/wiki/Dynamic_range_compression).\n * @example\n * import { Compressor } from \"tone\";\n * const comp = new Compressor(-30, 3);\n * @category Component\n */\nexport class Compressor extends ToneAudioNode<CompressorOptions> {\n\n\treadonly name: string = \"Compressor\";\n\n\t/**\n\t * the compressor node\n\t */\n\tprivate _compressor: DynamicsCompressorNode = this.context.createDynamicsCompressor();\n\treadonly input = this._compressor;\n\treadonly output = this._compressor;\n\n\t/**\n\t * The decibel value above which the compression will start taking effect.\n\t * @min -100\n\t * @max 0\n\t */\n\treadonly threshold: Param<\"decibels\">;\n\n\t/**\n\t * The amount of time (in seconds) to reduce the gain by 10dB.\n\t * @min 0\n\t * @max 1\n\t */\n\treadonly attack: Param<\"time\">;\n\t\n\t/**\n\t * The amount of time (in seconds) to increase the gain by 10dB.\n\t * @min 0\n\t * @max 1\n\t */\n\treadonly release: Param<\"time\">;\n\n\t/**\n\t * A decibel value representing the range above the threshold where the\n\t * curve smoothly transitions to the \"ratio\" portion.\n\t * @min 0\n\t * @max 40\n\t */\n\treadonly knee: Param<\"decibels\">;\n\n\t/**\n\t * The amount of dB change in input for a 1 dB change in output.\n\t * @min 1\n\t * @max 20\n\t */\n\treadonly ratio: Param<\"positive\">;\n\n\t/**\n\t * @param threshold The value above which the compression starts to be applied.\n\t * @param ratio The gain reduction ratio.\n\t */\n\tconstructor(threshold?: Decibels, ratio?: Positive);\n\tconstructor(options?: Partial<CompressorOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Compressor.getDefaults(), arguments, [\"threshold\", \"ratio\"]));\n\t\tconst options = optionsFromArguments(Compressor.getDefaults(), arguments, [\"threshold\", \"ratio\"]);\n\n\t\tthis.threshold = new Param({\n\t\t\tminValue: this._compressor.threshold.minValue,\n\t\t\tmaxValue: this._compressor.threshold.maxValue,\n\t\t\tcontext: this.context,\n\t\t\tconvert: false,\n\t\t\tparam: this._compressor.threshold,\n\t\t\tunits: \"decibels\",\n\t\t\tvalue: options.threshold,\n\t\t});\n\t\t\n\t\tthis.attack = new Param({\n\t\t\tminValue: this._compressor.attack.minValue,\n\t\t\tmaxValue: this._compressor.attack.maxValue,\n\t\t\tcontext: this.context,\n\t\t\tparam: this._compressor.attack,\n\t\t\tunits: \"time\",\n\t\t\tvalue: options.attack,\n\t\t});\n\t\t\n\t\tthis.release = new Param({\n\t\t\tminValue: this._compressor.release.minValue,\n\t\t\tmaxValue: this._compressor.release.maxValue,\n\t\t\tcontext: this.context,\n\t\t\tparam: this._compressor.release,\n\t\t\tunits: \"time\",\n\t\t\tvalue: options.release,\n\t\t});\n\t\t\n\t\tthis.knee = new Param({\n\t\t\tminValue: this._compressor.knee.minValue,\n\t\t\tmaxValue: this._compressor.knee.maxValue,\n\t\t\tcontext: this.context,\n\t\t\tconvert: false,\n\t\t\tparam: this._compressor.knee,\n\t\t\tunits: \"decibels\",\n\t\t\tvalue: options.knee,\n\t\t});\n\t\t\n\t\tthis.ratio = new Param({\n\t\t\tminValue: this._compressor.ratio.minValue,\n\t\t\tmaxValue: this._compressor.ratio.maxValue,\n\t\t\tcontext: this.context,\n\t\t\tconvert: false,\n\t\t\tparam: this._compressor.ratio,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.ratio,\n\t\t});\n\n\t\t// set the defaults\n\t\treadOnly(this, [\"knee\", \"release\", \"attack\", \"ratio\", \"threshold\"]);\n\t}\n\n\tstatic getDefaults(): CompressorOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tattack: 0.003,\n\t\t\tknee: 30,\n\t\t\tratio: 12,\n\t\t\trelease: 0.25,\n\t\t\tthreshold: -24,\n\t\t});\n\t}\n\n\t/**\n\t * A read-only decibel value for metering purposes, representing the current amount of gain\n\t * reduction that the compressor is applying to the signal. If fed no signal the value will be 0 (no gain reduction).\n\t */\n\tget reduction(): Decibels {\n\t\treturn this._compressor.reduction;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._compressor.disconnect();\n\t\tthis.attack.dispose();\n\t\tthis.release.dispose();\n\t\tthis.threshold.dispose();\n\t\tthis.ratio.dispose();\n\t\tthis.knee.dispose();\n\t\treturn this;\n\t}\n}\n","import { SignalOperator, SignalOperatorOptions } from \"./SignalOperator\";\nimport { Multiply } from \"./Multiply\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { WaveShaper } from \"./WaveShaper\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\n\nexport type GreaterThanZeroOptions = SignalOperatorOptions\n\n/**\n * GreaterThanZero outputs 1 when the input is strictly greater than zero\n * @example\n * import { GreaterThanZero, Signal } from \"tone\";\n * const gt0 = new GreaterThanZero();\n * const sig = new Signal(0.01).connect(gt0);\n * // the output of gt0 is 1.\n * sig.value = 0;\n * // the output of gt0 is 0.\n */\nexport class GreaterThanZero extends SignalOperator<GreaterThanZeroOptions> {\n\n\treadonly name: string = \"GreaterThanZero\";\n\n\t/**\n\t * The waveshaper\n\t */\n\tprivate _thresh: WaveShaper;\n\t\n\t/**\n\t * Scale the first thresholded signal by a large value.\n\t * this will help with values which are very close to 0\n\t */\n\tprivate _scale: Multiply;\n\n\treadonly output: ToneAudioNode;\n\treadonly input: ToneAudioNode;\n\n\tconstructor(options?: Partial<GreaterThanZeroOptions>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(GreaterThanZero.getDefaults(), arguments)));\n\n\t\tthis._thresh = this.output = new WaveShaper({\n\t\t\tcontext: this.context,\n\t\t\tlength: 127,\n\t\t\tmapping: (val) => {\n\t\t\t\tif (val <= 0) {\n\t\t\t\t\treturn 0;\n\t\t\t\t} else {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t},\n\t\t});\n\t\tthis._scale = this.input = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tvalue: 10000\n\t\t});\n\n\t\t// connections\n\t\tthis._scale.connect(this._thresh);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._scale.dispose();\n\t\tthis._thresh.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Subtract } from \"./Subtract\";\nimport { Signal, SignalOptions } from \"./Signal\";\nimport { GreaterThanZero } from \"./GreaterThanZero\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Param } from \"../core/context/Param\";\n\nexport type GreaterThanOptions = SignalOptions<\"number\">;\n\n/**\n * Output 1 if the signal is greater than the value, otherwise outputs 0.\n * can compare two signals or a signal and a number.\n * \n * @example\n * import { GreaterThan, Signal } from \"tone\";\n * const gt = new GreaterThan(2);\n * const sig = new Signal(4).connect(gt);\n * // output of gt is equal 1.\n */\nexport class GreaterThan extends Signal<\"number\"> {\n\n\treadonly name: string = \"GreaterThan\"\n\n\treadonly override: boolean = false;\n\n\treadonly input: ToneAudioNode;\n\treadonly output: ToneAudioNode;\n\n\t/**\n\t * compare that amount to zero after subtracting\n\t */\n\tprivate _gtz: GreaterThanZero;\n\n\t/**\n\t * Subtract the value from the input node\n\t */\n\tprivate _subtract: Subtract;\n\n\t/**\n\t * The signal to compare to 0. \n\t */\n\treadonly comparator: Param<\"number\">\n\t\t\n\t/**\n\t * @param value The value to compare to\n\t */\n\tconstructor(value?: number);\n\tconstructor(options?: Partial<GreaterThanOptions>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(GreaterThan.getDefaults(), arguments, [\"value\"])));\n\t\tconst options = optionsFromArguments(GreaterThan.getDefaults(), arguments, [\"value\"]);\n\n\t\tthis._subtract = this.input = new Subtract({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.value\n\t\t});\n\t\tthis._gtz = this.output = new GreaterThanZero({ context: this.context });\n\t\t\n\t\tthis.comparator = this._param = this._subtract.subtrahend;\n\t\treadOnly(this, \"comparator\");\n\n\t\t// connect\n\t\tthis._subtract.connect(this._gtz);\n\t}\n\n\tstatic getDefaults(): GreaterThanOptions {\n\t\treturn Object.assign(Signal.getDefaults(), {\n\t\t\tvalue: 0,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._gtz.dispose();\n\t\tthis._subtract.dispose();\n\t\tthis.comparator.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Decibels, Time } from \"../../core/type/Units\";\nimport { GreaterThan } from \"../../signal/GreaterThan\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { Follower } from \"../analysis/Follower\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { dbToGain, gainToDb } from \"../../core/type/Conversions\";\n\nexport interface GateOptions extends ToneAudioNodeOptions {\n\tthreshold: Decibels;\n\tsmoothing: Time;\n}\n\n/**\n * Gate only passes a signal through when the incoming\n * signal exceeds a specified threshold. It uses [[Follower]] to follow the ampltiude\n * of the incoming signal and compares it to the [[threshold]] value using [[GreaterThan]].\n *\n * @example\n * import { Gate, UserMedia } from \"tone\";\n * const gate = new Gate(-30, 0.2).toDestination();\n * const mic = new UserMedia().connect(gate);\n * // the gate will only pass through the incoming\n * // signal when it's louder than -30db\n */\nexport class Gate extends ToneAudioNode<GateOptions> {\n\n\treadonly name: string = \"Gate\";\n\n\treadonly input: ToneAudioNode;\n\treadonly output: ToneAudioNode;\n\n\t/**\n\t * Follow the incoming signal\n\t */\n\tprivate _follower: Follower;\n\n\t/**\n\t * Test if it's greater than the threshold\n\t */\n\tprivate _gt: GreaterThan;\n\n\t/**\n\t * Gate the incoming signal when it does not exceed the threshold\n\t */\n\tprivate _gate: Gain;\n\t\n\t/**\n\t * @param threshold The threshold above which the gate will open.\n\t * @param smoothing The follower's smoothing time\n\t */\n\tconstructor(threshold?: Decibels, smoothing?: Time);\n\tconstructor(options?: Partial<GateOptions>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Gate.getDefaults(), arguments, [\"threshold\", \"smoothing\"])));\n\t\tconst options = optionsFromArguments(Gate.getDefaults(), arguments, [\"threshold\", \"smoothing\"]);\n\n\t\tthis._follower = new Follower({\n\t\t\tcontext: this.context,\n\t\t\tsmoothing: options.smoothing,\n\t\t});\n\t\tthis._gt = new GreaterThan({\n\t\t\tcontext: this.context,\n\t\t\tvalue: dbToGain(options.threshold),\n\t\t});\n\t\tthis.input = new Gain({ context: this.context });\n\t\tthis._gate = this.output = new Gain({ context: this.context });\n\n\t\t// connections\n\t\tthis.input.connect(this._gate);\n\t\t// the control signal\n\t\tthis.input.chain(this._follower, this._gt, this._gate.gain);\n\t}\n\n\tstatic getDefaults(): GateOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tsmoothing: 0.1,\n\t\t\tthreshold: -40\n\t\t});\n\t}\n\n\t/**\n\t * The threshold of the gate in decibels\n\t */\n\tget threshold(): Decibels {\n\t\treturn gainToDb(this._gt.value);\n\t}\n\tset threshold(thresh) {\n\t\tthis._gt.value = dbToGain(thresh);\n\t}\n\n\t/**\n\t * The attack/decay speed of the gate. See [[Follower.smoothing]]\n\t */\n\tget smoothing(): Time {\n\t\treturn this._follower.smoothing;\n\t}\n\tset smoothing(smoothingTime) {\n\t\tthis._follower.smoothing = smoothingTime;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.input.dispose();\n\t\tthis._follower.dispose();\n\t\tthis._gt.dispose();\n\t\tthis._gate.dispose();\n\t\treturn this;\n\t}\n}\n","import { InputNode, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Decibels } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Compressor } from \"./Compressor\";\nimport { Param } from \"../../core/context/Param\";\nimport { readOnly } from \"../../core/util/Interface\";\n\nexport interface LimiterOptions extends ToneAudioNodeOptions {\n\tthreshold: Decibels;\n};\n\n/**\n * Limiter will limit the loudness of an incoming signal.\n * It is composed of a [[Compressor]] with a fast attack\n * and release and max ratio. Limiters are commonly used to safeguard against\n * signal clipping. Unlike a compressor, limiters do not provide\n * smooth gain reduction and almost completely prevent\n * additional gain above the threshold.\n *\n * @example\n * import { Limiter, Oscillator } from \"tone\";\n * const limiter = new Limiter(-20).toDestination();\n * const oscillator = new Oscillator().connect(limiter);\n * oscillator.start();\n */\nexport class Limiter extends ToneAudioNode<LimiterOptions> {\n\n\treadonly name: string = \"Limiter\";\n\n\treadonly input: InputNode;\n\treadonly output: OutputNode;\n\n\t/**\n\t * The compressor which does the limiting\n\t */\n\tprivate _compressor: Compressor;\n\n\treadonly threshold: Param<\"decibels\">\n\n\t/**\n\t * @param threshold The threshold above which the gain reduction is applied.\n\t */\n\tconstructor(threshold?: Decibels);\n\tconstructor(options?: Partial<LimiterOptions>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Limiter.getDefaults(), arguments, [\"threshold\"])));\n\t\tconst options = optionsFromArguments(Limiter.getDefaults(), arguments, [\"threshold\"]);\n\n\t\tthis._compressor = this.input = this.output = new Compressor({\n\t\t\tcontext: this.context,\n\t\t\tratio: 20,\n\t\t\tattack: 0,\n\t\t\trelease: 0,\n\t\t\tthreshold: options.threshold\n\t\t});\n\n\t\tthis.threshold = this._compressor.threshold;\n\t\treadOnly(this, \"threshold\");\n\t}\n\n\tstatic getDefaults(): LimiterOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tthreshold: -12\n\t\t});\n\t}\n\n\t/**\n\t * A read-only decibel value for metering purposes, representing the current amount of gain\n\t * reduction that the compressor is applying to the signal. \n\t */\n\tget reduction(): Decibels {\n\t\treturn this._compressor.reduction;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._compressor.dispose();\n\t\tthis.threshold.dispose();\n\t\treturn this;\n\t}\n}\n","import { InputNode, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Compressor, CompressorOptions } from \"./Compressor\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { MidSideSplit } from \"../channel/MidSideSplit\";\nimport { MidSideMerge } from \"../channel/MidSideMerge\";\nimport { readOnly, RecursivePartial } from \"../../core/util/Interface\";\n\nexport interface MidSideCompressorOptions extends ToneAudioNodeOptions {\n\tmid: Omit<CompressorOptions, keyof ToneAudioNodeOptions>;\n\tside: Omit<CompressorOptions, keyof ToneAudioNodeOptions>;\n}\n\n/**\n * MidSideCompressor applies two different compressors to the [[mid]]\n * and [[side]] signal components of the input. See [[MidSideSplit]] and [[MidSideMerge]].\n */\nexport class MidSideCompressor extends ToneAudioNode<MidSideCompressorOptions> {\n\n\treadonly name: string = \"MidSideCompressor\";\n\n\treadonly input: InputNode;\n\treadonly output: OutputNode;\n\n\t/**\n\t * Split the incoming signal into Mid/Side\n\t */\n\tprivate _midSideSplit: MidSideSplit;\n\n\t/**\n\t * Merge the compressed signal back into a single stream\n\t */\n\tprivate _midSideMerge: MidSideMerge;\n\n\t/**\n\t * The compression applied to the mid signal\n\t */\n\treadonly mid: Compressor;\n\n\t/**\n\t * The compression applied to the side signal\n\t */\n\treadonly side: Compressor;\n\n\tconstructor(options?: RecursivePartial<MidSideCompressorOptions>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(MidSideCompressor.getDefaults(), arguments)));\n\t\tconst options = optionsFromArguments(MidSideCompressor.getDefaults(), arguments);\n\n\t\tthis._midSideSplit = this.input = new MidSideSplit({ context: this.context });\n\t\tthis._midSideMerge = this.output = new MidSideMerge({ context: this.context });\n\t\tthis.mid = new Compressor(Object.assign(options.mid, { context: this.context }));\n\t\tthis.side = new Compressor(Object.assign(options.side, { context: this.context }));\n\n\t\tthis._midSideSplit.mid.chain(this.mid, this._midSideMerge.mid);\n\t\tthis._midSideSplit.side.chain(this.side, this._midSideMerge.side);\n\t\treadOnly(this, [\"mid\", \"side\"]);\n\t}\n\n\tstatic getDefaults(): MidSideCompressorOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmid: {\n\t\t\t\tratio: 3,\n\t\t\t\tthreshold: -24,\n\t\t\t\trelease: 0.03,\n\t\t\t\tattack: 0.02,\n\t\t\t\tknee: 16\n\t\t\t},\n\t\t\tside: {\n\t\t\t\tratio: 6,\n\t\t\t\tthreshold: -30,\n\t\t\t\trelease: 0.25,\n\t\t\t\tattack: 0.03,\n\t\t\t\tknee: 10\n\t\t\t}\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.mid.dispose();\n\t\tthis.side.dispose();\n\t\tthis._midSideSplit.dispose();\n\t\tthis._midSideMerge.dispose();\n\t\treturn this;\n\t}\n}\n","import { InputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Compressor, CompressorOptions } from \"./Compressor\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, RecursivePartial } from \"../../core/util/Interface\";\nimport { Frequency } from \"../../core/type/Units\";\nimport { MultibandSplit } from \"../channel/MultibandSplit\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Gain } from \"../../core/context/Gain\";\n\nexport interface MultibandCompressorOptions extends ToneAudioNodeOptions {\n\tmid: Omit<CompressorOptions, keyof ToneAudioNodeOptions>;\n\tlow: Omit<CompressorOptions, keyof ToneAudioNodeOptions>;\n\thigh: Omit<CompressorOptions, keyof ToneAudioNodeOptions>;\n\tlowFrequency: Frequency;\n\thighFrequency: Frequency;\n}\n\n/**\n * A compressor with separate controls over low/mid/high dynamics. See [[Compressor]] and [[MultibandSplit]]\n *\n * @example\n * import { MultibandCompressor } from \"tone\";\n * const multiband = new MultibandCompressor({\n * \tlowFrequency: 200,\n * \thighFrequency: 1300,\n * \tlow: {\n * \t\tthreshold: -12\n * \t}\n * });\n */\nexport class MultibandCompressor extends ToneAudioNode<MultibandCompressorOptions> {\n\n\treadonly name: string = \"MultibandCompressor\";\n\n\treadonly input: InputNode;\n\treadonly output: ToneAudioNode;\n\n\t/**\n\t * Split the incoming signal into high/mid/low\n\t */\n\tprivate _splitter: MultibandSplit;\n\n\t/**\n\t * low/mid crossover frequency.\n\t */\n\treadonly lowFrequency: Signal<\"frequency\">;\n\n\t/**\n\t * mid/high crossover frequency.\n\t */\n  \treadonly highFrequency: Signal<\"frequency\">;\n\n\t/**\n\t * The compressor applied to the low frequencies\n\t */\n\treadonly low: Compressor;\n\n\t/**\n\t * The compressor applied to the mid frequencies\n\t */\n\treadonly mid: Compressor;\n\n\t/**\n\t * The compressor applied to the high frequencies\n\t */\n\treadonly high: Compressor;\n\t\n\tconstructor(options?: RecursivePartial<MultibandCompressorOptions>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(MultibandCompressor.getDefaults(), arguments)));\n\t\tconst options = optionsFromArguments(MultibandCompressor.getDefaults(), arguments);\n\n\t\tthis._splitter = this.input = new MultibandSplit({\n\t\t\tcontext: this.context,\n\t\t\tlowFrequency: options.lowFrequency,\n\t\t\thighFrequency: options.highFrequency\n\t\t});\n\t\tthis.lowFrequency = this._splitter.lowFrequency;\n\t\tthis.highFrequency = this._splitter.highFrequency;\n\t\tthis.output = new Gain({ context: this.context });\n\t\tthis.low = new Compressor(Object.assign(options.low, { context: this.context }));\n\t\tthis.mid = new Compressor(Object.assign(options.mid, { context: this.context }));\n\t\tthis.high = new Compressor(Object.assign(options.high, { context: this.context }));\n\n\t\t// connect the compressor\n\t\tthis._splitter.low.chain(this.low, this.output);\n\t\tthis._splitter.mid.chain(this.mid, this.output);\n\t\tthis._splitter.high.chain(this.high, this.output);\n\n\t\treadOnly(this, [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n\t}\n\n\tstatic getDefaults(): MultibandCompressorOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tlowFrequency: 250,\n\t\t\thighFrequency: 2000,\n\t\t\tlow: {\n\t\t\t\tratio: 6,\n\t\t\t\tthreshold: -30,\n\t\t\t\trelease: 0.25,\n\t\t\t\tattack: 0.03,\n\t\t\t\tknee: 10\n\t\t\t},\n\t\t\tmid: {\n\t\t\t\tratio: 3,\n\t\t\t\tthreshold: -24,\n\t\t\t\trelease: 0.03,\n\t\t\t\tattack: 0.02,\n\t\t\t\tknee: 16\n\t\t\t},\n\t\t\thigh: {\n\t\t\t\tratio: 3,\n\t\t\t\tthreshold: -24,\n\t\t\t\trelease: 0.03,\n\t\t\t\tattack: 0.02,\n\t\t\t\tknee: 16\n\t\t\t},\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._splitter.dispose();\n\t\tthis.low.dispose();\n\t\tthis.mid.dispose();\n\t\tthis.high.dispose();\n\t\tthis.output.dispose();\n\t\treturn this;\n\t}\n}\n","import { InputNode, OutputNode } from \"../../core/context/ToneAudioNode\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { NormalRange, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { isArray, isObject, isString } from \"../../core/util/TypeCheck\";\nimport { connectSignal, Signal } from \"../../signal/Signal\";\nimport { OfflineContext } from \"../../core/context/OfflineContext\";\nimport { assertRange } from \"../../core/util/Debug\";\nimport { EQ } from \"../../core/util/Math\";\n\ntype BasicEnvelopeCurve = \"linear\" | \"exponential\";\ntype InternalEnvelopeCurve = BasicEnvelopeCurve | number[];\nexport type EnvelopeCurve = EnvelopeCurveName | number[];\n\nexport interface EnvelopeOptions extends ToneAudioNodeOptions {\n\tattack: Time;\n\tdecay: Time;\n\tsustain: NormalRange;\n\trelease: Time;\n\tattackCurve: EnvelopeCurve;\n\treleaseCurve: EnvelopeCurve;\n\tdecayCurve: BasicEnvelopeCurve;\n}\n\n/**\n * Envelope is an [ADSR](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope)\n * envelope generator. Envelope outputs a signal which\n * can be connected to an AudioParam or Tone.Signal.\n * ```\n *           /\\\n *          /  \\\n *         /    \\\n *        /      \\\n *       /        \\___________\n *      /                     \\\n *     /                       \\\n *    /                         \\\n *   /                           \\\n * ```\n *\n * @example\n * import { Envelope, Gain } from \"tone\";\n * // an amplitude envelope\n * const gainNode = new Gain();\n * const env = new Envelope({\n * \tattack: 0.1,\n * \tdecay: 0.2,\n * \tsustain: 1,\n * \trelease: 0.8,\n * });\n * env.connect(gainNode.gain);\n * @category Component\n */\nexport class Envelope extends ToneAudioNode<EnvelopeOptions> {\n\n\treadonly name: string = \"Envelope\";\n\t\n\t/**\n\t * Private container for the attack value\n\t */\n\tprivate _attack!: Time;\n\n\t/**\n\t * Private holder of the decay time\n\t */\n\tprivate _decay!: Time;\n\n\t/**\n\t * private holder for the sustain value\n\t */\n\tprivate _sustain!: NormalRange;\n\n\t/**\n\t * private holder for the release value\n\t */\n\tprivate _release!: Time;\n\n\t/**\n\t * The automation curve type for the attack\n\t */\n\tprivate _attackCurve!: InternalEnvelopeCurve;\n\n\t/**\n\t * The automation curve type for the decay\n\t */\n\tprivate _decayCurve!: BasicEnvelopeCurve;\n\n\t/**\n\t * The automation curve type for the release\n\t */\n\tprivate _releaseCurve!: InternalEnvelopeCurve;\n\n\t/**\n\t * the signal which is output.\n\t */\n\tprotected _sig: Signal<\"normalRange\"> = new Signal({\n\t\tcontext: this.context,\n\t\tvalue: 0,\n\t});\n\n\t/**\n\t * The output signal of the envelope\n\t */\n\toutput: OutputNode = this._sig;\n\n\t/**\n\t * Envelope has no input\n\t */\n\tinput: InputNode | undefined = undefined;\n\n\t/**\n\t * @param attack The amount of time it takes for the envelope to go from\n\t *                        0 to it's maximum value.\n\t * @param decay\tThe period of time after the attack that it takes for the envelope\n\t *                      \tto fall to the sustain value. Value must be greater than 0.\n\t * @param sustain\tThe percent of the maximum value that the envelope rests at until\n\t *                               \tthe release is triggered.\n\t * @param release\tThe amount of time after the release is triggered it takes to reach 0.\n\t *                        \tValue must be greater than 0.\n\t */\n\tconstructor(attack?: Time, decay?: Time, sustain?: NormalRange, release?: Time);\n\tconstructor(options?: Partial<EnvelopeOptions>)\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Envelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]));\n\t\tconst options = optionsFromArguments(Envelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]);\n\n\t\tthis.attack = options.attack;\n\t\tthis.decay = options.decay;\n\t\tthis.sustain = options.sustain;\n\t\tthis.release = options.release;\n\t\tthis.attackCurve = options.attackCurve;\n\t\tthis.releaseCurve = options.releaseCurve;\n\t\tthis.decayCurve = options.decayCurve;\n\t}\n\n\tstatic getDefaults(): EnvelopeOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tattack: 0.01,\n\t\t\tattackCurve: \"linear\" as EnvelopeCurveName,\n\t\t\tdecay: 0.1,\n\t\t\tdecayCurve: \"exponential\" as BasicEnvelopeCurve,\n\t\t\trelease: 1,\n\t\t\treleaseCurve: \"exponential\" as EnvelopeCurveName,\n\t\t\tsustain: 0.5,\n\t\t});\n\t}\n\n\t/**\n\t * Read the current value of the envelope. Useful for\n\t * synchronizing visual output to the envelope.\n\t */\n\tget value(): NormalRange {\n\t\treturn this.getValueAtTime(this.now());\n\t}\n\n\t/**\n\t * When triggerAttack is called, the attack time is the amount of\n\t * time it takes for the envelope to reach it's maximum value.\n\t * ```\n\t *           /\\\n\t *          /X \\\n\t *         /XX  \\\n\t *        /XXX   \\\n\t *       /XXXX    \\___________\n\t *      /XXXXX                \\\n\t *     /XXXXXX                 \\\n\t *    /XXXXXXX                  \\\n\t *   /XXXXXXXX                   \\\n\t * ```\n\t * @min 0\n\t * @max 2\n\t */\n\tget attack(): Time {\n\t\treturn this._attack;\n\t}\n\tset attack(time) {\n\t\tassertRange(this.toSeconds(time), 0);\n\t\tthis._attack = time;\n\t}\n\n\t/**\n\t * After the attack portion of the envelope, the value will fall\n\t * over the duration of the decay time to it's sustain value.\n\t * ```\n\t *           /\\\n\t *          / X\\\n\t *         /  XX\\\n\t *        /   XXX\\\n\t *       /    XXXX\\___________\n\t *      /     XXXXX           \\\n\t *     /      XXXXX            \\\n\t *    /       XXXXX             \\\n\t *   /        XXXXX              \\\n\t * ```\n\t * @min 0\n\t * @max 2\n\t */\n\tget decay(): Time {\n\t\treturn this._decay;\n\t}\n\tset decay(time) {\n\t\tassertRange(this.toSeconds(time), 0);\n\t\tthis._decay = time;\n\t}\n\n\t/**\n\t * The sustain value is the value\n\t * which the envelope rests at after triggerAttack is\n\t * called, but before triggerRelease is invoked.\n\t * ```\n\t *           /\\\n\t *          /  \\\n\t *         /    \\\n\t *        /      \\\n\t *       /        \\___________\n\t *      /          XXXXXXXXXXX\\\n\t *     /           XXXXXXXXXXX \\\n\t *    /            XXXXXXXXXXX  \\\n\t *   /             XXXXXXXXXXX   \\\n\t * ```\n\t */\n\tget sustain(): NormalRange {\n\t\treturn this._sustain;\n\t}\n\tset sustain(val) {\n\t\tassertRange(this.toSeconds(val), 0, 1);\n\t\tthis._sustain = val;\n\t}\n\n\t/**\n\t * After triggerRelease is called, the envelope's\n\t * value will fall to it's miminum value over the\n\t * duration of the release time.\n\t * ```\n\t *           /\\\n\t *          /  \\\n\t *         /    \\\n\t *        /      \\\n\t *       /        \\___________\n\t *      /                    X\\\n\t *     /                     XX\\\n\t *    /                      XXX\\\n\t *   /                       XXXX\\\n\t * ```\n\t * @min 0\n\t * @max 5\n\t */\n\tget release(): Time {\n\t\treturn this._release;\n\t}\n\tset release(time) {\n\t\tassertRange(this.toSeconds(time), 0);\n\t\tthis._release = time;\n\t}\n\n\t/**\n\t * Get the curve\n\t * @param  curve\n\t * @param  direction  In/Out\n\t * @return The curve name\n\t */\n\tprivate _getCurve(curve: InternalEnvelopeCurve, direction: EnvelopeDirection): EnvelopeCurve {\n\t\tif (isString(curve)) {\n\t\t\treturn curve;\n\t\t} else {\n\t\t\t// look up the name in the curves array\n\t\t\tlet curveName: EnvelopeCurveName;\n\t\t\tfor (curveName in EnvelopeCurves) {\n\t\t\t\tif (EnvelopeCurves[curveName][direction] === curve) {\n\t\t\t\t\treturn curveName;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// return the custom curve\n\t\t\treturn curve;\n\t\t}\n\t}\n\n\t/**\n\t * Assign a the curve to the given name using the direction\n\t * @param  name\n\t * @param  direction In/Out\n\t * @param  curve\n\t */\n\tprivate _setCurve(\n\t\tname: \"_attackCurve\" | \"_decayCurve\" | \"_releaseCurve\",\n\t\tdirection: EnvelopeDirection,\n\t\tcurve: EnvelopeCurve,\n\t): void {\n\t\t// check if it's a valid type\n\t\tif (isString(curve) && Reflect.has(EnvelopeCurves, curve)) {\n\t\t\tconst curveDef = EnvelopeCurves[curve];\n\t\t\tif (isObject(curveDef)) {\n\t\t\t\tif (name !== \"_decayCurve\") {\n\t\t\t\t\tthis[name] = curveDef[direction];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis[name] = curveDef;\n\t\t\t}\n\t\t} else if (isArray(curve) && name !== \"_decayCurve\") {\n\t\t\tthis[name] = curve;\n\t\t} else {\n\t\t\tthrow new Error(\"Envelope: invalid curve: \" + curve);\n\t\t}\n\t}\n\n\t/**\n\t * The shape of the attack.\n\t * Can be any of these strings:\n\t * * \"linear\"\n\t * * \"exponential\"\n\t * * \"sine\"\n\t * * \"cosine\"\n\t * * \"bounce\"\n\t * * \"ripple\"\n\t * * \"step\"\n\t *\n\t * Can also be an array which describes the curve. Values\n\t * in the array are evenly subdivided and linearly\n\t * interpolated over the duration of the attack.\n\t * @example\n\t * import { Envelope } from \"tone\";\n\t * const env = new Envelope();\n\t * env.attackCurve = \"linear\";\n\t * @example\n\t * import { Envelope } from \"tone\";\n\t * const env = new Envelope();\n\t * // can also be an array\n\t * env.attackCurve = [0, 0.2, 0.3, 0.4, 1];\n\t */\n\tget attackCurve(): EnvelopeCurve {\n\t\treturn this._getCurve(this._attackCurve, \"In\");\n\t}\n\tset attackCurve(curve) {\n\t\tthis._setCurve(\"_attackCurve\", \"In\", curve);\n\t}\n\n\t/**\n\t * The shape of the release. See the attack curve types.\n\t * @example\n\t * import { Envelope } from \"tone\";\n\t * const env = new Envelope();\n\t * env.releaseCurve = \"linear\";\n\t */\n\tget releaseCurve(): EnvelopeCurve {\n\t\treturn this._getCurve(this._releaseCurve, \"Out\");\n\t}\n\tset releaseCurve(curve) {\n\t\tthis._setCurve(\"_releaseCurve\", \"Out\", curve);\n\t}\n\n\t/**\n\t * The shape of the decay either \"linear\" or \"exponential\"\n\t * @example\n\t * import { Envelope } from \"tone\";\n\t * const env = new Envelope();\n\t * env.decayCurve = \"linear\";\n\t */\n\tget decayCurve(): BasicEnvelopeCurve {\n\t\treturn this._decayCurve;\n\t}\n\tset decayCurve(curve) {\n\t\tthis.assert([\"linear\", \"exponential\"].some(c => c === curve), `Invalid envelope curve: ${curve}`);\n\t\tthis._decayCurve = curve;\n\t}\n\n\t/**\n\t * Trigger the attack/decay portion of the ADSR envelope.\n\t * @param  time When the attack should start.\n\t * @param velocity The velocity of the envelope scales the vales.\n\t *                             number between 0-1\n\t * @example\n\t * import { AmplitudeEnvelope, Oscillator } from \"tone\";\n\t * const env = new AmplitudeEnvelope().toDestination();\n\t * const osc = new Oscillator().connect(env).start();\n\t * // trigger the attack 0.5 seconds from now with a velocity of 0.2\n\t * env.triggerAttack(\"+0.5\", 0.2);\n\t */\n\ttriggerAttack(time?: Time, velocity: NormalRange = 1): this {\n\t\tthis.log(\"triggerAttack\", time, velocity);\n\t\ttime = this.toSeconds(time);\n\t\tconst originalAttack = this.toSeconds(this.attack);\n\t\tlet attack = originalAttack;\n\t\tconst decay = this.toSeconds(this.decay);\n\t\t// check if it's not a complete attack\n\t\tconst currentValue = this.getValueAtTime(time);\n\t\tif (currentValue > 0) {\n\t\t\t// subtract the current value from the attack time\n\t\t\tconst attackRate = 1 / attack;\n\t\t\tconst remainingDistance = 1 - currentValue;\n\t\t\t// the attack is now the remaining time\n\t\t\tattack = remainingDistance / attackRate;\n\t\t}\n\t\t// attack\n\t\tif (attack === 0) {\n\t\t\t// case where the attack time is 0 should set instantly\n\t\t\tthis._sig.setValueAtTime(velocity, time);\n\t\t} else if (this._attackCurve === \"linear\") {\n\t\t\tthis._sig.linearRampTo(velocity, attack, time);\n\t\t} else if (this._attackCurve === \"exponential\") {\n\t\t\tthis._sig.targetRampTo(velocity, attack, time);\n\t\t} else {\n\t\t\tthis._sig.cancelAndHoldAtTime(time);\n\t\t\tlet curve = this._attackCurve;\n\t\t\t// find the starting position in the curve\n\t\t\tfor (let i = 1; i < curve.length; i++) {\n\t\t\t\t// the starting index is between the two values\n\t\t\t\tif (curve[i - 1] <= currentValue && currentValue <= curve[i]) {\n\t\t\t\t\tcurve = this._attackCurve.slice(i);\n\t\t\t\t\t// the first index is the current value\n\t\t\t\t\tcurve[0] = currentValue;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._sig.setValueCurveAtTime(curve, time, attack, velocity);\n\t\t}\n\t\t// decay\n\t\tif (decay) {\n\t\t\tconst decayValue = velocity * this.sustain;\n\t\t\tconst decayStart = time + attack;\n\t\t\tthis.log(\"decay\", decayStart);\n\t\t\tif (this._decayCurve === \"linear\") {\n\t\t\t\tthis._sig.linearRampTo(decayValue, decay, decayStart + this.sampleTime);\n\t\t\t} else {\n\t\t\t\tthis.assert(this._decayCurve === \"exponential\",\n\t\t\t\t\t`decayCurve can only be \"linear\" or \"exponential\", got ${this._decayCurve}`);\n\t\t\t\tthis._sig.exponentialApproachValueAtTime(decayValue, decayStart, decay);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Triggers the release of the envelope.\n\t * @param  time When the release portion of the envelope should start.\n\t * @example\n\t * import { AmplitudeEnvelope, Oscillator } from \"tone\";\n\t * const env = new AmplitudeEnvelope().toDestination();\n\t * const osc = new Oscillator().connect(env).start();\n\t * env.triggerAttack();\n\t * // trigger the release half a second after the attack\n\t * env.triggerRelease(\"+0.5\");\n\t */\n\ttriggerRelease(time?: Time): this {\n\t\tthis.log(\"triggerRelease\", time);\n\t\ttime = this.toSeconds(time);\n\t\tconst currentValue = this.getValueAtTime(time);\n\t\tif (currentValue > 0) {\n\t\t\tconst release = this.toSeconds(this.release);\n\t\t\tif (EQ(release, 0)) {\n\t\t\t\tthis._sig.setValueAtTime(0, time);\n\t\t\t} else if (this._releaseCurve === \"linear\") {\n\t\t\t\tthis._sig.linearRampTo(0, release, time);\n\t\t\t} else if (this._releaseCurve === \"exponential\") {\n\t\t\t\tthis._sig.targetRampTo(0, release, time);\n\t\t\t} else {\n\t\t\t\tthis.assert(isArray(this._releaseCurve), \"releaseCurve must be either 'linear', 'exponential' or an array\");\n\t\t\t\tthis._sig.cancelAndHoldAtTime(time);\n\t\t\t\tthis._sig.setValueCurveAtTime(this._releaseCurve, time, release, currentValue);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the scheduled value at the given time. This will\n\t * return the unconverted (raw) value.\n\t */\n\tgetValueAtTime(time: Time): NormalRange {\n\t\treturn this._sig.getValueAtTime(time);\n\t}\n\n\t/**\n\t * triggerAttackRelease is shorthand for triggerAttack, then waiting\n\t * some duration, then triggerRelease.\n\t * @param duration The duration of the sustain.\n\t * @param time When the attack should be triggered.\n\t * @param velocity The velocity of the envelope.\n\t * @example\n\t * import { AmplitudeEnvelope, Oscillator } from \"tone\";\n\t * const env = new AmplitudeEnvelope().toDestination();\n\t * const osc = new Oscillator().connect(env).start();\n\t * // trigger the release 0.5 seconds after the attack\n\t * env.triggerAttackRelease(0.5);\n\t */\n\ttriggerAttackRelease(duration: Time, time?: Time, velocity: NormalRange = 1): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis.triggerAttack(time, velocity);\n\t\tthis.triggerRelease(time + this.toSeconds(duration));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Cancels all scheduled envelope changes after the given time.\n\t */\n\tcancel(after?: Time): this {\n\t\tthis._sig.cancelScheduledValues(this.toSeconds(after));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Connect the envelope to a destination node.\n\t */\n\tconnect(destination: InputNode, outputNumber = 0, inputNumber = 0): this {\n\t\tconnectSignal(this, destination, outputNumber, inputNumber);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Render the envelope curve to an array of the given length. \n\t * Good for visualizing the envelope curve\n\t */\n\tasync asArray(length = 1024): Promise<Float32Array> {\n\t\tconst duration = length / this.context.sampleRate;\n\t\tconst context = new OfflineContext(1, duration, this.context.sampleRate);\n\t\t// normalize the ADSR for the given duration with 20% sustain time\n\t\tconst attackPortion = this.toSeconds(this.attack) + this.toSeconds(this.decay);\n\t\tconst envelopeDuration = attackPortion + this.toSeconds(this.release);\n\t\tconst sustainTime = envelopeDuration * 0.1;\n\t\tconst totalDuration = envelopeDuration + sustainTime;\n\t\t// @ts-ignore\n\t\tconst clone = new this.constructor(Object.assign(this.get(), { \n\t\t\tattack: duration * this.toSeconds(this.attack) / totalDuration,\n\t\t\tdecay: duration * this.toSeconds(this.decay) / totalDuration,\n\t\t\trelease: duration * this.toSeconds(this.release) / totalDuration,\n\t\t\tcontext\n\t\t})) as Envelope;\n\t\tclone._sig.toDestination();\n\t\tclone.triggerAttackRelease(duration * (attackPortion + sustainTime) / totalDuration, 0);\n\t\tconst buffer = await context.render();\n\t\treturn buffer.getChannelData(0);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._sig.dispose();\n\t\treturn this;\n\t}\n}\n\ninterface EnvelopeCurveObject {\n\tIn: number[];\n\tOut: number[];\n}\n\ntype EnvelopeDirection = keyof EnvelopeCurveObject;\n\ninterface EnvelopeCurveMap {\n\tlinear: \"linear\";\n\texponential: \"exponential\";\n\tbounce: EnvelopeCurveObject;\n\tcosine: EnvelopeCurveObject;\n\tsine: EnvelopeCurveObject;\n\tripple: EnvelopeCurveObject;\n\tstep: EnvelopeCurveObject;\n}\n\ntype EnvelopeCurveName = keyof EnvelopeCurveMap;\n\n/**\n * Generate some complex envelope curves.\n */\nconst EnvelopeCurves: EnvelopeCurveMap = (() => {\n\n\tconst curveLen = 128;\n\n\tlet i: number;\n\tlet k: number;\n\n\t// cosine curve\n\tconst cosineCurve: number[] = [];\n\tfor (i = 0; i < curveLen; i++) {\n\t\tcosineCurve[i] = Math.sin((i / (curveLen - 1)) * (Math.PI / 2));\n\t}\n\n\t// ripple curve\n\tconst rippleCurve: number[] = [];\n\tconst rippleCurveFreq = 6.4;\n\tfor (i = 0; i < curveLen - 1; i++) {\n\t\tk = (i / (curveLen - 1));\n\t\tconst sineWave = Math.sin(k * (Math.PI * 2) * rippleCurveFreq - Math.PI / 2) + 1;\n\t\trippleCurve[i] = sineWave / 10 + k * 0.83;\n\t}\n\trippleCurve[curveLen - 1] = 1;\n\n\t// stairs curve\n\tconst stairsCurve: number[] = [];\n\tconst steps = 5;\n\tfor (i = 0; i < curveLen; i++) {\n\t\tstairsCurve[i] = Math.ceil((i / (curveLen - 1)) * steps) / steps;\n\t}\n\n\t// in-out easing curve\n\tconst sineCurve: number[] = [];\n\tfor (i = 0; i < curveLen; i++) {\n\t\tk = i / (curveLen - 1);\n\t\tsineCurve[i] = 0.5 * (1 - Math.cos(Math.PI * k));\n\t}\n\n\t// a bounce curve\n\tconst bounceCurve: number[] = [];\n\tfor (i = 0; i < curveLen; i++) {\n\t\tk = i / (curveLen - 1);\n\t\tconst freq = Math.pow(k, 3) * 4 + 0.2;\n\t\tconst val = Math.cos(freq * Math.PI * 2 * k);\n\t\tbounceCurve[i] = Math.abs(val * (1 - k));\n\t}\n\n\t/**\n\t * Invert a value curve to make it work for the release\n\t */\n\tfunction invertCurve(curve: number[]): number[] {\n\t\tconst out = new Array(curve.length);\n\t\tfor (let j = 0; j < curve.length; j++) {\n\t\t\tout[j] = 1 - curve[j];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t * reverse the curve\n\t */\n\tfunction reverseCurve(curve: number[]): number[] {\n\t\treturn curve.slice(0).reverse();\n\t}\n\n\t/**\n\t * attack and release curve arrays\n\t */\n\treturn {\n\t\tbounce: {\n\t\t\tIn: invertCurve(bounceCurve),\n\t\t\tOut: bounceCurve,\n\t\t},\n\t\tcosine: {\n\t\t\tIn: cosineCurve,\n\t\t\tOut: reverseCurve(cosineCurve),\n\t\t},\n\t\texponential: \"exponential\" as \"exponential\",\n\t\tlinear: \"linear\" as \"linear\",\n\t\tripple: {\n\t\t\tIn: rippleCurve,\n\t\t\tOut: invertCurve(rippleCurve),\n\t\t},\n\t\tsine: {\n\t\t\tIn: sineCurve,\n\t\t\tOut: invertCurve(sineCurve),\n\t\t},\n\t\tstep: {\n\t\t\tIn: stairsCurve,\n\t\t\tOut: invertCurve(stairsCurve),\n\t\t},\n\t};\n})();\n","import { Gain } from \"../../core/context/Gain\";\nimport { NormalRange, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Envelope, EnvelopeOptions } from \"./Envelope\";\n\n/**\n * AmplitudeEnvelope is a Tone.Envelope connected to a gain node.\n * Unlike Tone.Envelope, which outputs the envelope's value, AmplitudeEnvelope accepts\n * an audio signal as the input and will apply the envelope to the amplitude\n * of the signal.\n * Read more about ADSR Envelopes on [Wikipedia](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope).\n *\n * @example\n * import { AmplitudeEnvelope, Oscillator } from \"tone\";\n * const ampEnv = new AmplitudeEnvelope({\n * \tattack: 0.1,\n * \tdecay: 0.2,\n * \tsustain: 1.0,\n * \trelease: 0.8\n * }).toDestination();\n * // create an oscillator and connect it\n * const osc = new Oscillator().connect(ampEnv).start();\n * // trigger the envelopes attack and release \"8t\" apart\n * ampEnv.triggerAttackRelease(\"8t\");\n * @category Component\n */\nexport class AmplitudeEnvelope extends Envelope {\n\n\treadonly name: string = \"AmplitudeEnvelope\";\n\n\tprivate _gainNode: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\toutput: Gain = this._gainNode;\n\tinput: Gain = this._gainNode;\n\n\t/**\n\t * @param attack The amount of time it takes for the envelope to go from 0 to it's maximum value.\n\t * @param decay\tThe period of time after the attack that it takes for the envelope\n\t *                      \tto fall to the sustain value. Value must be greater than 0.\n\t * @param sustain\tThe percent of the maximum value that the envelope rests at until\n\t *                               \tthe release is triggered.\n\t * @param release\tThe amount of time after the release is triggered it takes to reach 0.\n\t *                        \tValue must be greater than 0.\n\t */\n\tconstructor(attack?: Time, decay?: Time, sustain?: NormalRange, release?: Time);\n\tconstructor(options?: Partial<EnvelopeOptions>)\n\tconstructor() {\n\t\tsuper(optionsFromArguments(AmplitudeEnvelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]));\n\t\tthis._sig.connect(this._gainNode.gain);\n\t\tthis.output = this._gainNode;\n\t\tthis.input = this._gainNode;\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._gainNode.dispose();\n\t\treturn this;\n\t}\n}\n","import { InputNode, OutputNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Add } from \"./Add\";\nimport { Multiply } from \"./Multiply\";\nimport { SignalOperator } from \"./SignalOperator\";\n\nexport interface ScaleOptions extends ToneAudioNodeOptions {\n\tmin: number;\n\tmax: number;\n}\n\n/**\n * Performs a linear scaling on an input signal.\n * Scales a NormalRange input to between\n * outputMin and outputMax.\n *\n * @example\n * import { Scale, Signal } from \"tone\";\n * const scale = new Scale(50, 100);\n * const signal = new Signal(0.5).connect(scale);\n * // the output of scale equals 75\n * @category Signal\n */\nexport class Scale<Options extends ScaleOptions = ScaleOptions> extends SignalOperator<Options> {\n\n\treadonly name: string = \"Scale\";\n\n\tinput: InputNode;\n\toutput: OutputNode;\n\n\t/**\n\t * Hold the multiple\n\t */\n\tprotected _mult: Multiply;\n\n\t/**\n\t * Hold the adder\n\t */\n\tprotected _add: Add;\n\n\t/**\n\t * Private reference to the min value\n\t */\n\tprivate _min: number;\n\n\t/**\n\t * Private reference to the max value\n\t */\n\tprivate _max: number;\n\n\t/**\n\t * @param min The output value when the input is 0.\n\t * @param max The output value when the input is 1.\n\t */\n\tconstructor(min?: number, max?: number);\n\tconstructor(options?: Partial<ScaleOptions>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Scale.getDefaults(), arguments, [\"min\", \"max\"])));\n\t\tconst options = optionsFromArguments(Scale.getDefaults(), arguments, [\"min\", \"max\"]);\n\n\t\tthis._mult = this.input = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.max - options.min,\n\t\t});\n\t\n\t\tthis._add = this.output = new Add({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.min,\n\t\t});\n\n\t\tthis._min = options.min;\n\t\tthis._max = options.max;\n\n\t\tthis.input.connect(this.output);\n\t}\n\n\tstatic getDefaults(): ScaleOptions {\n\t\treturn Object.assign(SignalOperator.getDefaults(), {\n\t\t\tmax: 1,\n\t\t\tmin: 0,\n\t\t});\n\t}\n\n\t/**\n\t * The minimum output value. This number is output when the value input value is 0.\n\t */\n\tget min(): number {\n\t\treturn this._min;\n\t}\n\tset min(min) {\n\t\tthis._min = min;\n\t\tthis._setRange();\n\t}\n\n\t/**\n\t * The maximum output value. This number is output when the value input value is 1.\n\t */\n\tget max(): number {\n\t\treturn this._max;\n\t}\n\tset max(max) {\n\t\tthis._max = max;\n\t\tthis._setRange();\n\t}\n\n\t/**\n\t * set the values\n\t */\n\tprivate _setRange(): void {\n\t\tthis._add.value = this._min;\n\t\tthis._mult.value = this._max - this._min;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._add.dispose();\n\t\tthis._mult.dispose();\n\t\treturn this;\n\t}\n}\n","import { WaveShaper, WaveShaperMappingFn } from \"./WaveShaper\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { SignalOperator } from \"./SignalOperator\";\nimport { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\n\nexport interface PowOptions extends ToneAudioNodeOptions {\n\tvalue: number;\n}\n\n/**\n * Pow applies an exponent to the incoming signal. The incoming signal must be AudioRange [-1, 1]\n *\n * @example\n * import { Pow, Signal } from \"tone\";\n * const pow = new Pow(2);\n * const sig = new Signal(0.5).connect(pow);\n * // output of pow is 0.25. \n * @category Signal\n */\nexport class Pow extends SignalOperator<PowOptions> {\n\t\n\treadonly name: string = \"Pow\";\n\t\n\tprivate _exponent: number;\n\n\tprivate _exponentScaler: WaveShaper;\n\n\tinput: WaveShaper;\n\n\toutput: WaveShaper;\n\t\n\t/**\n\t * @param value Constant exponent value to use\n\t */\n\tconstructor(value?: number);\n\tconstructor(options?: Partial<PowOptions>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Pow.getDefaults(), arguments, [\"value\"])));\n\t\tconst options = optionsFromArguments(Pow.getDefaults(), arguments, [\"value\"]);\n\n\t\tthis._exponentScaler = this.input = this.output = new WaveShaper({\n\t\t\tcontext: this.context,\n\t\t\tmapping: this._expFunc(options.value),\n\t\t\tlength: 8192,\n\t\t});\n\n\t\tthis._exponent = options.value;\n\t}\n\n\tstatic getDefaults(): PowOptions {\n\t\treturn Object.assign(SignalOperator.getDefaults(), {\n\t\t\tvalue: 1,\n\t\t});\n\t}\n\n\t/**\n\t * the function which maps the waveshaper\n\t * @param exponent exponent value\n\t */\n\tprivate _expFunc(exponent: number): WaveShaperMappingFn {\n\t\treturn (val: number) => {\n\t\t\treturn Math.pow(Math.abs(val), exponent);\n\t\t};\n\t}\n\n\t/**\n\t * The value of the exponent.\n\t */\n\tget value(): number {\n\t\treturn this._exponent;\n\t}\n\tset value(exponent: number) {\n\t\tthis._exponent = exponent;\n\t\tthis._exponentScaler.setMap(this._expFunc(this._exponent));\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._exponentScaler.dispose();\n\t\treturn this;\n\t}\n}\n","import { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Frequency, Hertz, NormalRange, Positive, Time } from \"../../core/type/Units\";\nimport { Envelope, EnvelopeOptions } from \"./Envelope\";\nimport { Scale } from \"../../signal/Scale\";\nimport { Pow } from \"../../signal/Pow\";\n\nexport interface FrequencyEnvelopeOptions extends EnvelopeOptions {\n\tbaseFrequency: Frequency;\n\toctaves: number;\n\texponent: number;\n}\n/**\n * FrequencyEnvelope is an [[Envelope]] which ramps between [[baseFrequency]]\n * and [[octaves]]. It can also have an optional [[exponent]] to adjust the curve\n * which it ramps. \n * @example\n * import { FrequencyEnvelope, Oscillator } from \"tone\";\n * const oscillator = new Oscillator().toDestination().start();\n * const freqEnv = new FrequencyEnvelope({\n * \tattack: 0.2,\n * \tbaseFrequency: \"C2\",\n * \toctaves: 4\n * });\n * freqEnv.connect(oscillator.frequency);\n * freqEnv.triggerAttack();\n */\nexport class FrequencyEnvelope extends Envelope {\n\n\treadonly name: string = \"FrequencyEnvelope\";\n\n\t/**\n\t * Private reference to the base frequency as a number\n\t */\n\tprivate _baseFrequency: Hertz;\n\n\t/**\n\t * The number of octaves\n\t */\n\tprivate _octaves: Positive;\n\n\t/**\n\t * Internal scaler from 0-1 to the final output range\n\t */\n\tprivate _scale: Scale;\n\n\t/**\n\t * Apply a power curve to the output\n\t */\n\tprivate _exponent: Pow;\n\n\t/**\n\t * @param attack\tthe attack time in seconds\n\t * @param decay\t\tthe decay time in seconds\n\t * @param sustain \ta percentage (0-1) of the full amplitude\n\t * @param release\tthe release time in seconds\n\t */\n\tconstructor(attack?: Time, decay?: Time, sustain?: NormalRange, release?: Time);\n\tconstructor(options?: Partial<FrequencyEnvelopeOptions>)\n\tconstructor() {\n\t\tsuper(optionsFromArguments(FrequencyEnvelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]));\n\t\tconst options = optionsFromArguments(FrequencyEnvelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]);\n\n\t\tthis._octaves = options.octaves;\n\t\tthis._baseFrequency = this.toFrequency(options.baseFrequency);\n\n\t\tthis._exponent = this.input = new Pow({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.exponent\n\t\t});\n\t\tthis._scale = this.output = new Scale({\n\t\t\tcontext: this.context,\n\t\t\tmin: this._baseFrequency,\n\t\t\tmax: this._baseFrequency * Math.pow(2, this._octaves),\n\t\t});\n\t\tthis._sig.chain(this._exponent, this._scale);\n\t}\n\n\tstatic getDefaults(): FrequencyEnvelopeOptions {\n\t\treturn Object.assign(Envelope.getDefaults(), {\n\t\t\tbaseFrequency: 200,\n\t\t\texponent: 1,\n\t\t\toctaves: 4,\n\t\t});\n\t}\n\n\t/**\n\t * The envelope's minimum output value. This is the value which it\n\t * starts at.\n\t */\n\tget baseFrequency(): Frequency {\n\t\treturn this._baseFrequency;\n\t}\n\tset baseFrequency(min) {\n\t\tthis._baseFrequency = this.toFrequency(min);\n\t\tthis._scale.min = this._baseFrequency;\n\t\t// update the max value when the min changes\n\t\tthis.octaves = this._octaves;\n\t}\n\n\t/**\n\t * The number of octaves above the baseFrequency that the\n\t * envelope will scale to.\n\t */\n\tget octaves(): Positive {\n\t\treturn this._octaves;\n\t}\n\tset octaves(octaves: Positive) {\n\t\tthis._octaves = octaves;\n\t\tthis._scale.max = this._baseFrequency * Math.pow(2, octaves);\n\t}\n\n\t/**\n\t * The envelope's exponent value.\n\t */\n\tget exponent(): number {\n\t\treturn this._exponent.value;\n\t}\n\tset exponent(exponent) {\n\t\tthis._exponent.value = exponent;\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._exponent.dispose();\n\t\tthis._scale.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Decibels, Frequency } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { MultibandSplit } from \"../channel/MultibandSplit\";\n\ninterface EQ3Options extends ToneAudioNodeOptions {\n\tlow: Decibels;\n\tmid: Decibels;\n\thigh: Decibels;\n\tlowFrequency: Frequency;\n\thighFrequency: Frequency;\n}\n\n/**\n * EQ3 provides 3 equalizer bins: Low/Mid/High. \n * @category Component\n */\nexport class EQ3 extends ToneAudioNode<EQ3Options> {\n\n\treadonly name: string = \"EQ3\";\n\n\t/**\n\t * the input\n\t */\n\treadonly input: MultibandSplit;\n\n\t/**\n\t * the output\n\t */\n\treadonly output = new Gain({ context: this.context });\n\n\t/**\n\t * Splits the input into three outputs\n\t */\n\tprivate _multibandSplit: MultibandSplit;\n\n\t/**\n\t * The gain for the lower signals\n\t */\n\tprivate _lowGain: Gain<\"decibels\">;\n\n\t/**\n\t * The gain for the mid signals\n\t */\n\tprivate _midGain: Gain<\"decibels\">;\n\n\t/**\n\t * The gain for the high signals\n\t */\n\tprivate _highGain: Gain<\"decibels\">;\n\n\t/**\n\t * The gain in decibels of the low part\n\t */\n\treadonly low: Param<\"decibels\">;\n\n\t/**\n\t * The gain in decibels of the mid part\n\t */\n\treadonly mid: Param<\"decibels\">;\n\n\t/**\n\t * The gain in decibels of the high part\n\t */\n\treadonly high: Param<\"decibels\">;\n\n\t/**\n\t * The Q value for all of the filters.\n\t */\n\treadonly Q: Signal<\"positive\">;\n\n\t/**\n\t * The low/mid crossover frequency.\n\t */\n\treadonly lowFrequency: Signal<\"frequency\">;\n\n\t/**\n\t * The mid/high crossover frequency.\n\t */\n\treadonly highFrequency: Signal<\"frequency\">;\n\n\tprotected _internalChannels: ToneAudioNode[] = [];\n\n\tconstructor(lowLevel?: Decibels, midLevel?: Decibels, highLevel?: Decibels);\n\tconstructor(options: Partial<EQ3Options>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(EQ3.getDefaults(), arguments, [\"low\", \"mid\", \"high\"]));\n\t\tconst options = optionsFromArguments(EQ3.getDefaults(), arguments, [\"low\", \"mid\", \"high\"]);\n\n\t\tthis.input = this._multibandSplit = new MultibandSplit({\n\t\t\tcontext: this.context,\n\t\t\thighFrequency: options.highFrequency,\n\t\t\tlowFrequency: options.lowFrequency,\n\t\t});\n\n\t\tthis._lowGain = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: options.low,\n\t\t\tunits: \"decibels\",\n\t\t});\n\n\t\tthis._midGain = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: options.mid,\n\t\t\tunits: \"decibels\",\n\t\t});\n\n\t\tthis._highGain = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: options.high,\n\t\t\tunits: \"decibels\",\n\t\t});\n\n\t\tthis.low = this._lowGain.gain;\n\t\tthis.mid = this._midGain.gain;\n\t\tthis.high = this._highGain.gain;\n\t\tthis.Q = this._multibandSplit.Q;\n\t\tthis.lowFrequency = this._multibandSplit.lowFrequency;\n\t\tthis.highFrequency\t= this._multibandSplit.highFrequency;\n\n\t\t// the frequency bands\n\t\tthis._multibandSplit.low.chain(this._lowGain, this.output);\n\t\tthis._multibandSplit.mid.chain(this._midGain, this.output);\n\t\tthis._multibandSplit.high.chain(this._highGain, this.output);\n\n\t\treadOnly(this, [\"low\", \"mid\", \"high\", \"lowFrequency\", \"highFrequency\"]);\n\t\tthis._internalChannels = [this._multibandSplit];\n\t}\n\n\tstatic getDefaults(): EQ3Options {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\thigh: 0,\n\t\t\thighFrequency: 2500,\n\t\t\tlow: 0,\n\t\t\tlowFrequency: 400,\n\t\t\tmid: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\twritable(this, [\"low\", \"mid\", \"high\", \"lowFrequency\", \"highFrequency\"]);\n\t\tthis._multibandSplit.dispose();\n\t\tthis.lowFrequency.dispose();\n\t\tthis.highFrequency.dispose();\n\t\tthis._lowGain.dispose();\n\t\tthis._midGain.dispose();\n\t\tthis._highGain.dispose();\n\t\tthis.low.dispose();\n\t\tthis.mid.dispose();\n\t\tthis.high.dispose();\n\t\tthis.Q.dispose();\n\t\treturn this;\n\t}\n\n}\n","import { ToneAudioNode, ToneAudioNodeOptions } from \"./ToneAudioNode\";\nimport { noOp } from \"../util/Interface\";\n\nexport type ToneAudioWorkletOptions = ToneAudioNodeOptions;\n\nexport abstract class ToneAudioWorklet<Options extends ToneAudioWorkletOptions> extends ToneAudioNode<Options> {\n\n\treadonly name: string = \"ToneAudioWorklet\";\n\n\t/**\n\t * The processing node\n\t */\n\tprotected _worklet!: AudioWorkletNode;\n\n\t/**\n\t * The constructor options for the node\n\t */\n\tprotected workletOptions: Partial<AudioWorkletNodeOptions> = {};\n\n\t/**\n\t * The code which is run in the worklet\n\t */\n\tprotected abstract _audioWorklet(): string;\n\n\t/**\n\t * Get the name of the audio worklet\n\t */\n\tprotected abstract _audioWorkletName(): string;\n\t\n\t/**\n\t * Invoked when the module is loaded and the node is created\n\t */\n\tprotected abstract onReady(node: AudioWorkletNode): void;\n\n\t/**\n\t * Callback which is invoked when there is an error in the processing\n\t */\n\tonprocessorerror: (e: string) => void = noOp;\n\t\n\tconstructor(options: Options) {\n\t\tsuper(options);\n\n\t\tconst blobUrl = URL.createObjectURL(new Blob([this._audioWorklet()], { type: \"text/javascript\" }));\n\t\tconst name = this._audioWorkletName();\n\n\t\t// Register the processor\n\t\tthis.context.addAudioWorkletModule(blobUrl, name).then(() => {\n\t\t\t// create the worklet when it's read\n\t\t\tif (!this.disposed) {\n\t\t\t\tthis._worklet = this.context.createAudioWorkletNode(name, this.workletOptions);\n\t\t\t\tthis._worklet.onprocessorerror = this.onprocessorerror.bind(this);\n\t\t\t\tthis.onReady(this._worklet);\n\t\t\t}\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (this._worklet) {\n\t\t\tthis._worklet.disconnect();\n\t\t}\n\t\treturn this;\n\t}\n\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { Param } from \"../../core/context/Param\";\nimport { connectSeries, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { NormalRange, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, RecursivePartial } from \"../../core/util/Interface\";\nimport { ToneAudioWorklet } from \"../../core/context/ToneAudioWorklet\";\n\nexport interface FeedbackCombFilterOptions extends ToneAudioNodeOptions {\n\tdelayTime: Time;\n\tresonance: NormalRange;\n}\n\n/**\n * Comb filters are basic building blocks for physical modeling. Read more\n * about comb filters on [CCRMA's website](https://ccrma.stanford.edu/~jos/pasp/Feedback_Comb_Filters.html).\n * \n * This comb filter is implemented with the AudioWorkletNode which allows it to have feedback delays less than the \n * Web Audio processing block of 128 samples. There is a polyfill for browsers that don't yet support the \n * AudioWorkletNode, but it will add some latency and have slower performance than the AudioWorkletNode. \n * @category Component\n */\nexport class FeedbackCombFilter extends ToneAudioWorklet<FeedbackCombFilterOptions> {\n\t\n\treadonly name = \"FeedbackCombFilter\";\n\t\n\t/**\n\t * The amount of delay of the comb filter.\n\t */\n\treadonly delayTime: Param<\"time\">;\n\t\n\t/**\n\t * The amount of feedback of the delayed signal.\n\t */\n\treadonly resonance: Param<\"normalRange\">;\n\t\n\treadonly input: Gain;\n\treadonly output: Gain;\n\n\t/**\n\t * Default constructor options for the filter\n\t */\n\tprotected workletOptions: Partial<AudioWorkletNodeOptions> = {\n\t\tnumberOfInputs: 1,\n\t\tnumberOfOutputs: 1,\n\t\tchannelCount: 1,\n\t}\n\t\n\t/**\n\t * @param delayTime The delay time of the filter.\n\t * @param resonance The amount of feedback the filter has.\n\t */\n\tconstructor(delayTime?: Time, resonance?: NormalRange);\n\tconstructor(options?: RecursivePartial<FeedbackCombFilterOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(FeedbackCombFilter.getDefaults(), arguments, [\"delayTime\", \"resonance\"]));\n\t\tconst options = optionsFromArguments(FeedbackCombFilter.getDefaults(), arguments, [\"delayTime\", \"resonance\"]);\n\n\t\tthis.input = new Gain({ context: this.context });\n\t\tthis.output = new Gain({ context: this.context });\n\n\t\tconst dummyGain = this.context.createGain();\n\n\t\tthis.delayTime = new Param<\"time\">({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.delayTime,\n\t\t\tunits: \"time\",\n\t\t\tminValue: 0,\n\t\t\tmaxValue: 1,\n\t\t\tparam: dummyGain.gain,\n\t\t\tswappable: true,\n\t\t});\n\t\t\n\t\tthis.resonance = new Param<\"normalRange\">({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.resonance,\n\t\t\tunits: \"normalRange\",\n\t\t\tparam: dummyGain.gain,\n\t\t\tswappable: true,\n\t\t});\n\n\t\treadOnly(this, [\"resonance\", \"delayTime\"]);\n\t}\n\n\tprotected _audioWorkletName(): string {\n\t\treturn \"feedback-comb-filter\";\n\t}\n\n\tprotected _audioWorklet(): string {\n\t\treturn /* javascript */` \n\t\t\tregisterProcessor(\"${this._audioWorkletName()}\", class extends AudioWorkletProcessor {\n\t\t\t\tstatic get parameterDescriptors() {\n\t\t\t\t\treturn [{\n\t\t\t\t\t\tname: \"delayTime\",\n\t\t\t\t\t\tdefaultValue: 0.1,\n\t\t\t\t\t\tminValue: 0,\n\t\t\t\t\t\tmaxValue: 1,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"feedback\",\n\t\t\t\t\t\tdefaultValue: 0.5,\n\t\t\t\t\t\tminValue: 0,\n\t\t\t\t\t\tmaxValue: 0.9999,\n\t\t\t\t\t}];\n\t\t\t\t}\n\t\t\t\n\t\t\t\tconstructor(options) {\n\t\t\t\t\tsuper(options);\n\t\t\t\t\tthis.delayBuffer = new Float32Array(sampleRate);\n\t\t\t\t}\n\t\t\t\n\t\t\t\tgetParameter(parameter, index) {\n\t\t\t\t\tif (parameter.length > 1) {\n\t\t\t\t\t\treturn parameter[index];\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn parameter[0];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\n\t\t\t\tprocess(inputs, outputs, parameters) {\n\t\t\t\t\tconst input = inputs[0];\n\t\t\t\t\tconst output = outputs[0];\n\t\t\t\t\tconst delayLength = this.delayBuffer.length;\n\t\t\t\t\tconst inputChannel = input[0];\n\t\t\t\t\tconst outputChannel = output[0];\n\t\t\t\t\tconst delayTimeParam = parameters.delayTime;\n\t\t\t\t\tconst feedbackParam = parameters.feedback;\n\t\t\t\t\tinputChannel.forEach((value, index) => {\n\t\t\t\t\t\tconst delayTime = this.getParameter(delayTimeParam, index);\n\t\t\t\t\t\tconst feedback = this.getParameter(feedbackParam, index);\n\t\t\t\t\t\tconst delaySamples = Math.floor(delayTime * sampleRate);\n\t\t\t\t\t\tconst currentIndex = (currentFrame + index) % delayLength;\n\t\t\t\t\t\tconst delayedIndex = (currentFrame + index + delaySamples) % delayLength;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// the current value to output\n\t\t\t\t\t\tconst currentValue = this.delayBuffer[currentIndex];\n\t\t\t\t\t\t\n\t\t\t\t\t\t// write the current value to the delayBuffer in the future\n\t\t\t\t\t\tthis.delayBuffer[delayedIndex] = value + currentValue * feedback;\n\n\t\t\t\t\t\t// set all of the output channels to the same value\n\t\t\t\t\t\toutputChannel[index] = delaySamples > 0 ? currentValue : value;\n\t\t\t\t\t});\n\t\t\t\t\t// keep the processing alive\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t});\n\t\t`;\n\t}\n\n\t/**\n\t * The default parameters\n\t */\n\tstatic getDefaults(): FeedbackCombFilterOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tdelayTime: 0.1,\n\t\t\tresonance: 0.5,\n\t\t});\n\t}\n\n\tonReady(node: AudioWorkletNode) {\n\t\tconnectSeries(this.input, node, this.output);\n\t\t// @ts-ignore\n\t\tconst delayTime = node.parameters.get(\"delayTime\");\n\t\tthis.delayTime.setParam(delayTime);\n\t\t// @ts-ignore\n\t\tconst feedback = node.parameters.get(\"feedback\");\n\t\tthis.resonance.setParam(feedback);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.input.dispose();\n\t\tthis.output.dispose();\n\t\tthis.delayTime.dispose();\n\t\tthis.resonance.dispose();\n\t\treturn this;\n\t}\n}\n","import { Param } from \"../../core/context/Param\";\nimport { InputNode, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Frequency, NormalRange, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { RecursivePartial } from \"../../core/util/Interface\";\nimport { FeedbackCombFilter } from \"./FeedbackCombFilter\";\nimport { OnePoleFilter } from \"./OnePoleFilter\";\n\ninterface LowpassCombFilterOptions extends ToneAudioNodeOptions {\n\tdelayTime: Time;\n\tresonance: NormalRange;\n\tdampening: Frequency;\n}\n\n/**\n * A lowpass feedback comb filter. It is similar to\n * [[FeedbackCombFilter]], but includes a lowpass filter.\n * @category Component\n */\nexport class LowpassCombFilter extends ToneAudioNode<LowpassCombFilterOptions> {\n\n\treadonly name = \"LowpassCombFilter\";\n\n\t/**\n\t * The delay node\n\t */\n\tprivate _combFilter: FeedbackCombFilter;\n\n\t/**\n\t * The lowpass filter\n\t */\n\tprivate _lowpass: OnePoleFilter;\n\n\t/**\n\t * The delayTime of the comb filter.\n\t */\n\treadonly delayTime: Param<\"time\">;\n\n\t/**\n\t * The amount of feedback of the delayed signal.\n\t */\n\treadonly resonance: Param<\"normalRange\">;\n\n\treadonly input: InputNode;\n\treadonly output: OutputNode;\n\n\t/**\n\t * @param delayTime The delay time of the comb filter\n\t * @param resonance The resonance (feedback) of the comb filter\n\t * @param dampening The cutoff of the lowpass filter dampens the signal as it is fedback.\n\t */\n\tconstructor(delayTime?: Time, resonance?: NormalRange, dampening?: Frequency);\n\tconstructor(options?: RecursivePartial<LowpassCombFilterOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(LowpassCombFilter.getDefaults(), arguments, [\"delayTime\", \"resonance\", \"dampening\"]));\n\t\tconst options = optionsFromArguments(LowpassCombFilter.getDefaults(), arguments, [\"delayTime\", \"resonance\", \"dampening\"]);\n\n\t\tthis._combFilter = this.output = new FeedbackCombFilter({\n\t\t\tcontext: this.context,\n\t\t\tdelayTime: options.delayTime,\n\t\t\tresonance: options.resonance,\n\t\t});\n\t\tthis.delayTime = this._combFilter.delayTime;\n\t\tthis.resonance = this._combFilter.resonance;\n\n\t\tthis._lowpass = this.input = new OnePoleFilter({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.dampening,\n\t\t\ttype: \"lowpass\",\n\t\t});\n\n\t\t// connections\n\t\tthis._lowpass.connect(this._combFilter);\n\t}\n\n\tstatic getDefaults(): LowpassCombFilterOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tdampening: 3000,\n\t\t\tdelayTime: 0.1,\n\t\t\tresonance: 0.5,\n\t\t});\n\t}\n\t\n\t/**\n\t * The dampening control of the feedback\n\t */\n\tget dampening(): Frequency {\n\t\treturn this._lowpass.frequency;\n\t}\n\tset dampening(fq) {\n\t\tthis._lowpass.frequency = fq;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._combFilter.dispose();\n\t\tthis._lowpass.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { noOp } from \"../../core/util/Interface\";\n\nexport interface ConvolverOptions extends ToneAudioNodeOptions {\n\tonload: () => void;\n\tnormalize: boolean;\n\turl?: string | AudioBuffer | ToneAudioBuffer;\n}\n\n/**\n * Convolver is a wrapper around the Native Web Audio\n * [ConvolverNode](http://webaudio.github.io/web-audio-api/#the-convolvernode-interface).\n * Convolution is useful for reverb and filter emulation. Read more about convolution reverb on\n * [Wikipedia](https://en.wikipedia.org/wiki/Convolution_reverb).\n *\n * @example\n * import { Convolver } from \"tone\";\n * // initializing the convolver with an impulse response\n * const convolver = new Convolver(\"./path/to/ir.wav\").toDestination();\n * @category Component\n */\nexport class Convolver extends ToneAudioNode<ConvolverOptions> {\n\n\treadonly name: string = \"Convolver\";\n\t\n\t/**\n\t * The native ConvolverNode\n\t */\n\tprivate _convolver: ConvolverNode = this.context.createConvolver();\n\n\t/**\n\t * The Buffer belonging to the convolver\n\t */\n\tprivate _buffer: ToneAudioBuffer;\n\n\treadonly input: Gain;\n\treadonly output: Gain;\n\n\t/**\n\t * @param url The URL of the impulse response or the ToneAudioBuffer containing the impulse response.\n\t * @param onload The callback to invoke when the url is loaded.\n\t */\n\tconstructor(url?: string | AudioBuffer | ToneAudioBuffer, onload?: () => void);\n\tconstructor(options?: Partial<ConvolverOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Convolver.getDefaults(), arguments, [\"url\", \"onload\"]));\n\t\tconst options = optionsFromArguments(Convolver.getDefaults(), arguments, [\"url\", \"onload\"]);\n\n\t\tthis._buffer = new ToneAudioBuffer(options.url, buffer => {\n\t\t\tthis.buffer = buffer;\n\t\t\toptions.onload();\n\t\t});\n\n\t\tthis.input = new Gain({ context: this.context });\n\t\tthis.output = new Gain({ context: this.context });\n\n\t\t// set if it's already loaded, set it immediately\n\t\tif (this._buffer.loaded) {\n\t\t\tthis.buffer = this._buffer;\n\t\t}\n\n\t\t// initially set normalization\n\t\tthis.normalize = options.normalize;\n\n\t\t// connect it up\n\t\tthis.input.chain(this._convolver, this.output);\n\t}\n\n\tstatic getDefaults(): ConvolverOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tnormalize: true,\n\t\t\tonload: noOp,\n\t\t});\n\t}\n\n\t/**\n\t * Load an impulse response url as an audio buffer.\n\t * Decodes the audio asynchronously and invokes\n\t * the callback once the audio buffer loads.\n\t * @param url The url of the buffer to load. filetype support depends on the browser.\n\t */\n\tasync load(url: string): Promise<void> {\n\t\tthis.buffer = await this._buffer.load(url);\n\t}\n\n\t/**\n\t * The convolver's buffer\n\t */\n\tget buffer(): ToneAudioBuffer | null {\n\t\tif (this._buffer.length) {\n\t\t\treturn this._buffer;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\tset buffer(buffer) {\n\t\tif (buffer) {\n\t\t\tthis._buffer.set(buffer);\n\t\t}\n\t\t// if it's already got a buffer, create a new one\n\t\tif (this._convolver.buffer) {\n\t\t\t// disconnect the old one\n\t\t\tthis.input.disconnect();\n\t\t\tthis._convolver.disconnect();\n\t\t\t// create and connect a new one\n\t\t\tthis._convolver = this.context.createConvolver();\n\t\t\tthis.input.connect(this._convolver);\n\t\t}\n\t\tconst buff = this._buffer.get();\n\t\tthis._convolver.buffer = buff ? buff : null;\n\t}\n\n\t/**\n\t * The normalize property of the ConvolverNode interface is a boolean that\n\t * controls whether the impulse response from the buffer will be scaled by\n\t * an equal-power normalization when the buffer attribute is set, or not.\n\t */\n\tget normalize(): boolean {\n\t\treturn this._convolver.normalize;\n\t}\n\tset normalize(norm) {\n\t\tthis._convolver.normalize = norm;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._buffer.dispose();\n\t\tthis._convolver.disconnect();\n\t\treturn this;\n\t}\n}\n","import { connect, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { Decibels } from \"../core/type/Units\";\nimport { Volume } from \"../component\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Param } from \"../core/context/Param\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { isDefined, isNumber } from \"../core/util/TypeCheck\";\n\nexport interface UserMediaOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n\tmute: boolean;\n}\n/**\n * UserMedia uses MediaDevices.getUserMedia to open up and external microphone or audio input. \n * Check [MediaDevices API Support](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia)\n * to see which browsers are supported. Access to an external input\n * is limited to secure (HTTPS) connections.\n * @example\n * import { UserMedia } from \"tone\";\n * const mic = new UserMedia();\n * mic.open().then(() => {\n * \t// promise resolves when input is available\n * });\n * @category Source\n */\n\nexport class UserMedia extends ToneAudioNode<UserMediaOptions> {\n\n\treadonly name: string = \"UserMedia\";\n\n\treadonly input: undefined;\n\treadonly output: OutputNode;\n\n\t/**\n\t * The MediaStreamNode\n\t */\n\tprivate _mediaStream?: MediaStreamAudioSourceNode;\n\n\t/**\n\t * The media stream created by getUserMedia.\n\t */\n\tprivate _stream?: MediaStream;\n\n\t/**\n\t * The open device\n\t */\n\tprivate _device?: MediaDeviceInfo;\n\n\t/**\n\t * The output volume node\n\t */\n\tprivate _volume: Volume;\n\n\t/**\n\t * The volume of the output in decibels.\n\t */\n\treadonly volume: Param<\"decibels\">;\t\t\n\t\n\t/**\n\t * @param volume The level of the input in decibels\n\t */\n\tconstructor(volume?: Decibels);\n\tconstructor(options?: Partial<UserMediaOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(UserMedia.getDefaults(), arguments, [\"volume\"]));\n\t\tconst options = optionsFromArguments(UserMedia.getDefaults(), arguments, [\"volume\"]);\n\n\t\tthis._volume = this.output = new Volume({\n\t\t\tcontext: this.context,\n\t\t\tvolume: options.volume,\n\t\t});\n\t\tthis.volume = this._volume.volume;\n\t\treadOnly(this, \"volume\");\n\t\tthis.mute = options.mute;\n\t}\n\n\tstatic getDefaults(): UserMediaOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmute: false,\n\t\t\tvolume: 0\n\t\t});\n\t}\n\n\t/**\n\t * Open the media stream. If a string is passed in, it is assumed\n\t * to be the label or id of the stream, if a number is passed in,\n\t * it is the input number of the stream.\n\t * @param  labelOrId The label or id of the audio input media device.\n\t *                   With no argument, the default stream is opened.\n\t * @return The promise is resolved when the stream is open.\n\t */\n\tasync open(labelOrId?: string | number): Promise<void> {\n\t\tthis.assert(UserMedia.supported, \"UserMedia is not supported\");\n\t\t// close the previous stream\n\t\tif (this.state === \"started\") {\n\t\t\tthis.close();\n\t\t}\n\t\tconst devices = await UserMedia.enumerateDevices();\n\t\tif (isNumber(labelOrId)) {\n\t\t\tthis._device = devices[labelOrId];\n\t\t} else {\n\t\t\tthis._device = devices.find((device) => {\n\t\t\t\treturn device.label === labelOrId || device.deviceId === labelOrId;\n\t\t\t});\n\t\t\t// didn't find a matching device\n\t\t\tif (!this._device && devices.length > 0) {\n\t\t\t\tthis._device = devices[0];\n\t\t\t}\n\t\t\tthis.assert(isDefined(this._device), `No matching device ${labelOrId}`);\n\t\t}\n\t\t// do getUserMedia\n\t\tconst constraints = {\n\t\t\taudio: {\n\t\t\t\techoCancellation: false,\n\t\t\t\tsampleRate: this.context.sampleRate,\n\t\t\t\tnoiseSuppression: false,\n\t\t\t\tmozNoiseSuppression: false,\n\t\t\t}\n\t\t};\n\t\tif (this._device) {\n\t\t\t// @ts-ignore\n\t\t\tconstraints.audio.deviceId = this._device.deviceId;\t\t\t\t\n\t\t}\n\t\tconst stream = await navigator.mediaDevices.getUserMedia(constraints);\n\t\t// start a new source only if the previous one is closed\n\t\tif (!this._stream) {\n\t\t\tthis._stream = stream;\n\t\t\t// Wrap a MediaStreamSourceNode around the live input stream.\n\t\t\tconst mediaStreamNode = this.context.createMediaStreamSource(stream);\n\t\t\t// Connect the MediaStreamSourceNode to a gate gain node\n\t\t\tconnect(mediaStreamNode, this.output);\n\t\t\tthis._mediaStream = mediaStreamNode;\n\t\t}\n\t}\n\n\t/**\n\t * Close the media stream\n\t */\n\tclose(): this {\n\t\tif (this._stream && this._mediaStream) {\n\t\t\tthis._stream.getAudioTracks().forEach((track) => {\n\t\t\t\ttrack.stop();\n\t\t\t});\n\t\t\tthis._stream = undefined;\n\t\t\t// remove the old media stream\n\t\t\tthis._mediaStream.disconnect();\n\t\t\tthis._mediaStream = undefined;\n\t\t}\n\t\tthis._device = undefined;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns a promise which resolves with the list of audio input devices available.\n\t * @return The promise that is resolved with the devices\n\t * @example\n\t * import { UserMedia } from \"tone\";\n\t * UserMedia.enumerateDevices().then((devices) => {\n\t * \t// print the device labels\n\t * \tconsole.log(devices.map(device => device.label));\n\t * });\n\t */\n\tstatic async enumerateDevices(): Promise<MediaDeviceInfo[]> {\n\t\tconst allDevices = await navigator.mediaDevices.enumerateDevices();\n\t\treturn allDevices.filter(device => {\n\t\t\treturn device.kind === \"audioinput\";\n\t\t});\n\t}\n\n\t/**\n\t * Returns the playback state of the source, \"started\" when the microphone is open\n\t * and \"stopped\" when the mic is closed.\n\t */\n\tget state() {\n\t\treturn this._stream && this._stream.active ? \"started\" : \"stopped\";\n\t}\n\n\t/**\n\t * Returns an identifier for the represented device that is\n\t * persisted across sessions. It is un-guessable by other applications and\n\t * unique to the origin of the calling application. It is reset when the\n\t * user clears cookies (for Private Browsing, a different identifier is\n\t * used that is not persisted across sessions). Returns undefined when the\n\t * device is not open.\n\t */\n\tget deviceId(): string | undefined {\n\t\tif (this._device) {\n\t\t\treturn this._device.deviceId;\n\t\t} else {\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\t/**\n\t * Returns a group identifier. Two devices have the\n\t * same group identifier if they belong to the same physical device.\n\t * Returns null  when the device is not open.\n\t */\n\tget groupId(): string | undefined {\n\t\tif (this._device) {\n\t\t\treturn this._device.groupId;\n\t\t} else {\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\t/**\n\t * Returns a label describing this device (for example \"Built-in Microphone\").\n\t * Returns undefined when the device is not open or label is not available\n\t * because of permissions.\n\t */\n\tget label(): string | undefined {\n\t\tif (this._device) {\n\t\t\treturn this._device.label;\n\t\t} else {\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\t/**\n\t * Mute the output.\n\t * @example\n\t * import { UserMedia } from \"tone\";\n\t * const mic = new UserMedia();\n\t * mic.open().then(() => {\n\t * \t// promise resolves when input is available\n\t * });\n\t * // mute the output\n\t * mic.mute = true;\n\t */\n\tget mute(): boolean {\n\t\treturn this._volume.mute;\n\t}\n\tset mute(mute) {\n\t\tthis._volume.mute = mute;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.close();\n\t\tthis._volume.dispose();\n\t\tthis.volume.dispose();\n\t\treturn this;\n\t}\n\n\t/**\n\t * If getUserMedia is supported by the browser.\n\t */\n\tstatic get supported(): boolean {\n\t\treturn isDefined(navigator.mediaDevices) && \n\t\t\tisDefined(navigator.mediaDevices.getUserMedia);\n\t}\n}\n","import { AudioRange, Cents, Degrees, Frequency, Positive } from \"../../core/type/Units\";\nimport { Omit } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { SourceOptions } from \"../Source\";\nimport { OfflineContext } from \"../../core/context/OfflineContext\";\n\n/**\n * The common interface of all Oscillators\n */\nexport interface ToneOscillatorInterface {\n\n\t/**\n\t * The oscillator type without the partialsCount appended to the end\n\t * @example\n\t * import { Oscillator } from \"tone\";\n\t * const osc = new Oscillator();\n\t * osc.type = \"sine2\";\n\t * console.log(osc.baseType); // \"sine\"\n\t */\n\tbaseType: OscillatorType | \"pulse\" | \"pwm\";\n\n\t/**\n\t * The oscillator's type. Also capable of setting the first x number of partials of the oscillator. \n\t * For example: \"sine4\" would set be the first 4 partials of the sine wave and \"triangle8\" would \n\t * set the first 8 partials of the triangle wave.\n\t * @example\n\t * import { Oscillator } from \"tone\";\n\t * const osc = new Oscillator();\n\t * osc.type = \"sine2\";\n\t */\n\ttype: ExtendedToneOscillatorType;\n\t\n\t/**\n\t * The frequency value of the oscillator\n\t * @example\n\t * import { FMOscillator } from \"tone\";\n\t * const osc = new FMOscillator(\"Bb4\").toDestination().start();\n\t * osc.frequency.rampTo(\"D2\", 3);\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * The detune value in cents (100th of a semitone).\n\t * @example\n\t * import { now, PulseOscillator } from \"tone\";\n\t * const osc = new PulseOscillator(\"F3\").toDestination().start();\n\t * // pitch it 1 octave = 12 semitones = 1200 cents\n\t * osc.detune.setValueAtTime(-1200, now());\n\t * osc.detune.setValueAtTime(1200, now() + 0.5);\n\t * osc.detune.linearRampToValueAtTime(0, now() + 1);\n\t * osc.stop(now() + 1.5);\n\t */\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * The phase is the starting position within the oscillator's cycle. For example\n\t * a phase of 180 would start halfway through the oscillator's cycle. \n\t */\n\tphase: Degrees;\n\n\t/**\n\t * The partials describes the relative amplitude of each of the harmonics of the oscillator. \n\t * The first value in the array is the first harmonic (i.e. the fundamental frequency), the \n\t * second harmonic is an octave up, the third harmonic is an octave and a fifth, etc. The resulting\n\t * oscillator output is composed of a sine tone at the relative amplitude at each of the harmonic intervals. \n\t * \n\t * Setting this value will automatically set the type to \"custom\".\n\t * The value is an empty array when the type is not \"custom\".\n\t * @example\n\t * import { Oscillator } from \"tone\";\n\t * const osc = new Oscillator(\"F3\").toDestination().start();\n\t * osc.partials = [1, 0, 0.4, 1, 0.2];\n\t */\n\tpartials: number[];\n\t\n\t/**\n\t * 'partialCount' offers an alternative way to set the number of used partials.\n\t * When partialCount is 0, the maximum number of partials are used when representing\n\t * the waveform using the periodicWave. When 'partials' is set, this value is\n\t * not settable, but equals the length of the partials array. A square wave wave\n\t * is composed of only odd harmonics up through the harmonic series. Partial count\n\t * can limit the number of harmonics which are used to generate the waveform.\n\t * @example\n\t * import { Oscillator } from \"tone\";\n\t * const osc = new Oscillator(\"C3\", \"square\").toDestination().start();\n\t * osc.partialCount = 5;\n\t */\n\tpartialCount?: number;\n\n\t/**\n\t * Returns an array of values which represents the waveform.\n\t * @param length The length of the waveform to return\n\t */\n\tasArray(length: number): Promise<Float32Array>;\n}\n\n/**\n * Render a segment of the oscillator to an offline context and return the results as an array\n */\nexport async function generateWaveform(instance: any, length: number): Promise<Float32Array> {\n\tconst duration = length / instance.context.sampleRate;\n\tconst context = new OfflineContext(1, duration, instance.context.sampleRate);\n\tconst clone = new instance.constructor(Object.assign(instance.get(), { \n\t\t// should do 2 iterations\n\t\tfrequency: 2 / duration,\n\t\t// zero out the detune\n\t\tdetune: 0,\n\t\tcontext\n\t})).toDestination();\n\tclone.start(0);\n\tconst buffer = await context.render();\n\treturn buffer.getChannelData(0);\n}\n\n/**\n * Oscillators with partials\n */\ntype SineWithPartials =\n\t\"sine1\" | \"sine2\" | \"sine3\" | \"sine4\" | \"sine5\" | \"sine6\" | \"sine7\" | \"sine8\" | \"sine9\" |\n\t\"sine10\" | \"sine11\" | \"sine12\" | \"sine13\" | \"sine14\" | \"sine15\" | \"sine16\" | \"sine17\" | \"sine18\" | \"sine19\" |\n\t\"sine20\" | \"sine21\" | \"sine22\" | \"sine23\" | \"sine24\" | \"sine25\" | \"sine26\" | \"sine27\" | \"sine28\" | \"sine29\" |\n\t\"sine30\" | \"sine31\" | \"sine32\";\n\ntype SquareWithPartials =\n\t\"square1\" | \"square2\" | \"square3\" | \"square4\" | \"square5\" | \"square6\" | \"square7\" | \"square8\" | \"square9\" |\n\t\"square10\" | \"square11\" | \"square12\" | \"square13\" | \"square14\" | \"square15\" | \"square16\" | \"square17\" | \"square18\" | \"square19\" |\n\t\"square20\" | \"square21\" | \"square22\" | \"square23\" | \"square24\" | \"square25\" | \"square26\" | \"square27\" | \"square28\" | \"square29\" |\n\t\"square30\" | \"square31\" | \"square32\";\n\ntype SawtoothWithPartials =\n\t\"sawtooth1\" | \"sawtooth2\" | \"sawtooth3\" | \"sawtooth4\" | \"sawtooth5\" | \"sawtooth6\" | \"sawtooth7\" | \"sawtooth8\" | \"sawtooth9\" |\n\t\"sawtooth10\" | \"sawtooth11\" | \"sawtooth12\" | \"sawtooth13\" | \"sawtooth14\" | \"sawtooth15\" | \"sawtooth16\" | \"sawtooth17\" | \"sawtooth18\" | \"sawtooth19\" |\n\t\"sawtooth20\" | \"sawtooth21\" | \"sawtooth22\" | \"sawtooth23\" | \"sawtooth24\" | \"sawtooth25\" | \"sawtooth26\" | \"sawtooth27\" | \"sawtooth28\" | \"sawtooth29\" |\n\t\"sawtooth30\" | \"sawtooth31\" | \"sawtooth32\";\n\ntype TriangleWithPartials =\n\t\"triangle1\" | \"triangle2\" | \"triangle3\" | \"triangle4\" | \"triangle5\" | \"triangle6\" | \"triangle7\" | \"triangle8\" | \"triangle9\" |\n\t\"triangle10\" | \"triangle11\" | \"triangle12\" | \"triangle13\" | \"triangle14\" | \"triangle15\" | \"triangle16\" | \"triangle17\" | \"triangle18\" | \"triangle19\" |\n\t\"triangle20\" | \"triangle21\" | \"triangle22\" | \"triangle23\" | \"triangle24\" | \"triangle25\" | \"triangle26\" | \"triangle27\" | \"triangle28\" | \"triangle29\" |\n\t\"triangle30\" | \"triangle31\" | \"triangle32\";\n\ntype TypeWithPartials = SineWithPartials | SquareWithPartials | TriangleWithPartials | SawtoothWithPartials;\n\ninterface BaseOscillatorOptions extends SourceOptions {\n\tfrequency: Frequency;\n\tdetune: Cents;\n\tphase: Degrees;\n}\n\nexport type NonCustomOscillatorType = Exclude<OscillatorType, \"custom\">;\n\ntype AllNonCustomOscillatorType = NonCustomOscillatorType | TypeWithPartials;\n\nexport type ToneOscillatorType = AllNonCustomOscillatorType | \"custom\";\n\nexport type ExtendedToneOscillatorType = ToneOscillatorType | \"pwm\" | \"pulse\";\n\n/**\n * Oscillator Interfaces\n */\ninterface ToneCustomOscillatorOptions extends BaseOscillatorOptions {\n\ttype: \"custom\";\n\tpartials: number[];\n}\n\ninterface ToneTypeOscillatorOptions extends BaseOscillatorOptions {\n\ttype: NonCustomOscillatorType;\n\tpartialCount?: number;\n}\n\ninterface TonePartialOscillatorOptions extends BaseOscillatorOptions {\n\ttype: TypeWithPartials;\n}\n\nexport type ToneOscillatorConstructorOptions = ToneCustomOscillatorOptions | ToneTypeOscillatorOptions | TonePartialOscillatorOptions;\n\nexport interface ToneOscillatorOptions extends BaseOscillatorOptions {\n\ttype: ToneOscillatorType;\n\tpartialCount: number;\n\tpartials: number[];\n}\n\n/**\n * FMOscillator Interface\n */\ninterface FMBaseOscillatorOptions extends BaseOscillatorOptions {\n\tharmonicity: Positive;\n\tmodulationIndex: Positive;\n\tmodulationType: AllNonCustomOscillatorType;\n}\n\ninterface FMCustomOscillatorOptions extends FMBaseOscillatorOptions {\n\ttype: \"custom\";\n\tpartials: number[];\n}\n\ninterface FMTypeOscillatorOptions extends FMBaseOscillatorOptions {\n\ttype: NonCustomOscillatorType;\n\tpartialsCount?: number;\n}\n\ninterface FMPartialsOscillatorOptions extends FMBaseOscillatorOptions {\n\ttype: TypeWithPartials;\n}\n\nexport type FMConstructorOptions = FMTypeOscillatorOptions | FMCustomOscillatorOptions | FMPartialsOscillatorOptions;\n\nexport interface FMOscillatorOptions extends ToneOscillatorOptions {\n\tharmonicity: Positive;\n\tmodulationIndex: Positive;\n\tmodulationType: AllNonCustomOscillatorType;\n}\n\n/**\n * AMOscillator Interface\n */\ninterface AMBaseOscillatorOptions extends BaseOscillatorOptions {\n\tharmonicity: Positive;\n\tmodulationType: AllNonCustomOscillatorType;\n}\n\ninterface AMCustomOscillatorOptions extends AMBaseOscillatorOptions {\n\ttype: \"custom\";\n\tpartials: number[];\n}\n\ninterface AMTypeOscillatorOptions extends AMBaseOscillatorOptions {\n\ttype: NonCustomOscillatorType;\n\tpartialsCount?: number;\n}\n\ninterface AMPartialsOscillatorOptions extends AMBaseOscillatorOptions {\n\ttype: TypeWithPartials;\n}\n\nexport type AMConstructorOptions = AMCustomOscillatorOptions | AMTypeOscillatorOptions | AMPartialsOscillatorOptions;\n\nexport interface AMOscillatorOptions extends ToneOscillatorOptions {\n\tharmonicity: Positive;\n\tmodulationType: AllNonCustomOscillatorType;\n}\n/**\n * FatOscillator\n */\ninterface FatBaseOscillatorOptions extends BaseOscillatorOptions {\n\tspread: Cents;\n\tcount: Positive;\n}\n\ninterface FatCustomOscillatorOptions extends FatBaseOscillatorOptions {\n\ttype: \"custom\";\n\tpartials: number[];\n}\n\ninterface FatTypeOscillatorOptions extends FatBaseOscillatorOptions {\n\ttype: NonCustomOscillatorType;\n\tpartialCount?: number;\n}\n\ninterface FatPartialsOscillatorOptions extends FatBaseOscillatorOptions {\n\ttype: TypeWithPartials;\n}\n\nexport type FatConstructorOptions = FatCustomOscillatorOptions | FatTypeOscillatorOptions | FatPartialsOscillatorOptions;\n\nexport interface FatOscillatorOptions extends ToneOscillatorOptions {\n\tspread: Cents;\n\tcount: Positive;\n}\n\n/**\n * Pulse Oscillator\n */\nexport interface PulseOscillatorOptions extends BaseOscillatorOptions {\n\ttype: \"pulse\";\n\twidth: AudioRange;\n}\n\n/**\n * PWM Oscillator\n */\nexport interface PWMOscillatorOptions extends BaseOscillatorOptions {\n\ttype: \"pwm\";\n\tmodulationFrequency: Frequency;\n}\n\n/**\n * OMNI OSCILLATOR\n */\n\n/**\n * FM Oscillators with partials\n */\ntype FMSineWithPartials =\n\t\"fmsine1\" | \"fmsine2\" | \"fmsine3\" | \"fmsine4\" | \"fmsine5\" | \"fmsine6\" | \"fmsine7\" | \"fmsine8\" | \"fmsine9\" |\n\t\"fmsine10\" | \"fmsine11\" | \"fmsine12\" | \"fmsine13\" | \"fmsine14\" | \"fmsine15\" | \"fmsine16\" | \"fmsine17\" | \"fmsine18\" | \"fmsine19\" |\n\t\"fmsine20\" | \"fmsine21\" | \"fmsine22\" | \"fmsine23\" | \"fmsine24\" | \"fmsine25\" | \"fmsine26\" | \"fmsine27\" | \"fmsine28\" | \"fmsine29\" |\n\t\"fmsine30\" | \"fmsine31\" | \"fmsine32\";\n\ntype FMSquareWithPartials =\n\t\"fmsquare1\" | \"fmsquare2\" | \"fmsquare3\" | \"fmsquare4\" | \"fmsquare5\" | \"fmsquare6\" | \"fmsquare7\" | \"fmsquare8\" | \"fmsquare9\" |\n\t\"fmsquare10\" | \"fmsquare11\" | \"fmsquare12\" | \"fmsquare13\" | \"fmsquare14\" | \"fmsquare15\" | \"fmsquare16\" | \"fmsquare17\" | \"fmsquare18\" | \"fmsquare19\" |\n\t\"fmsquare20\" | \"fmsquare21\" | \"fmsquare22\" | \"fmsquare23\" | \"fmsquare24\" | \"fmsquare25\" | \"fmsquare26\" | \"fmsquare27\" | \"fmsquare28\" | \"fmsquare29\" |\n\t\"fmsquare30\" | \"fmsquare31\" | \"fmsquare32\";\n\ntype FMSawtoothWithPartials =\n\t\"fmsawtooth1\" | \"fmsawtooth2\" | \"fmsawtooth3\" | \"fmsawtooth4\" | \"fmsawtooth5\" | \"fmsawtooth6\" | \"fmsawtooth7\" | \"fmsawtooth8\" | \"fmsawtooth9\" |\n\t\"fmsawtooth10\" | \"fmsawtooth11\" | \"fmsawtooth12\" | \"fmsawtooth13\" | \"fmsawtooth14\" | \"fmsawtooth15\" | \"fmsawtooth16\" | \"fmsawtooth17\" | \"fmsawtooth18\" | \"fmsawtooth19\" |\n\t\"fmsawtooth20\" | \"fmsawtooth21\" | \"fmsawtooth22\" | \"fmsawtooth23\" | \"fmsawtooth24\" | \"fmsawtooth25\" | \"fmsawtooth26\" | \"fmsawtooth27\" | \"fmsawtooth28\" | \"fmsawtooth29\" |\n\t\"fmsawtooth30\" | \"fmsawtooth31\" | \"fmsawtooth32\";\n\ntype FMTriangleWithPartials =\n\t\"fmtriangle1\" | \"fmtriangle2\" | \"fmtriangle3\" | \"fmtriangle4\" | \"fmtriangle5\" | \"fmtriangle6\" | \"fmtriangle7\" | \"fmtriangle8\" | \"fmtriangle9\" |\n\t\"fmtriangle10\" | \"fmtriangle11\" | \"fmtriangle12\" | \"fmtriangle13\" | \"fmtriangle14\" | \"fmtriangle15\" | \"fmtriangle16\" | \"fmtriangle17\" | \"fmtriangle18\" | \"fmtriangle19\" |\n\t\"fmtriangle20\" | \"fmtriangle21\" | \"fmtriangle22\" | \"fmtriangle23\" | \"fmtriangle24\" | \"fmtriangle25\" | \"fmtriangle26\" | \"fmtriangle27\" | \"fmtriangle28\" | \"fmtriangle29\" |\n\t\"fmtriangle30\" | \"fmtriangle31\" | \"fmtriangle32\";\n\ntype FMTypeWithPartials = FMSineWithPartials | FMSquareWithPartials | FMSawtoothWithPartials | FMTriangleWithPartials;\n\n/**\n * AM Oscillators with partials\n */\ntype AMSineWithPartials =\n\t\"amsine1\" | \"amsine2\" | \"amsine3\" | \"amsine4\" | \"amsine5\" | \"amsine6\" | \"amsine7\" | \"amsine8\" | \"amsine9\" |\n\t\"amsine10\" | \"amsine11\" | \"amsine12\" | \"amsine13\" | \"amsine14\" | \"amsine15\" | \"amsine16\" | \"amsine17\" | \"amsine18\" | \"amsine19\" |\n\t\"amsine20\" | \"amsine21\" | \"amsine22\" | \"amsine23\" | \"amsine24\" | \"amsine25\" | \"amsine26\" | \"amsine27\" | \"amsine28\" | \"amsine29\" |\n\t\"amsine30\" | \"amsine31\" | \"amsine32\";\n\ntype AMSquareWithPartials =\n\t\"amsquare1\" | \"amsquare2\" | \"amsquare3\" | \"amsquare4\" | \"amsquare5\" | \"amsquare6\" | \"amsquare7\" | \"amsquare8\" | \"amsquare9\" |\n\t\"amsquare10\" | \"amsquare11\" | \"amsquare12\" | \"amsquare13\" | \"amsquare14\" | \"amsquare15\" | \"amsquare16\" | \"amsquare17\" | \"amsquare18\" | \"amsquare19\" |\n\t\"amsquare20\" | \"amsquare21\" | \"amsquare22\" | \"amsquare23\" | \"amsquare24\" | \"amsquare25\" | \"amsquare26\" | \"amsquare27\" | \"amsquare28\" | \"amsquare29\" |\n\t\"amsquare30\" | \"amsquare31\" | \"amsquare32\";\n\ntype AMSawtoothWithPartials =\n\t\"amsawtooth1\" | \"amsawtooth2\" | \"amsawtooth3\" | \"amsawtooth4\" | \"amsawtooth5\" | \"amsawtooth6\" | \"amsawtooth7\" | \"amsawtooth8\" | \"amsawtooth9\" |\n\t\"amsawtooth10\" | \"amsawtooth11\" | \"amsawtooth12\" | \"amsawtooth13\" | \"amsawtooth14\" | \"amsawtooth15\" | \"amsawtooth16\" | \"amsawtooth17\" | \"amsawtooth18\" | \"amsawtooth19\" |\n\t\"amsawtooth20\" | \"amsawtooth21\" | \"amsawtooth22\" | \"amsawtooth23\" | \"amsawtooth24\" | \"amsawtooth25\" | \"amsawtooth26\" | \"amsawtooth27\" | \"amsawtooth28\" | \"amsawtooth29\" |\n\t\"amsawtooth30\" | \"amsawtooth31\" | \"amsawtooth32\";\n\ntype AMTriangleWithPartials =\n\t\"amtriangle1\" | \"amtriangle2\" | \"amtriangle3\" | \"amtriangle4\" | \"amtriangle5\" | \"amtriangle6\" | \"amtriangle7\" | \"amtriangle8\" | \"amtriangle9\" |\n\t\"amtriangle10\" | \"amtriangle11\" | \"amtriangle12\" | \"amtriangle13\" | \"amtriangle14\" | \"amtriangle15\" | \"amtriangle16\" | \"amtriangle17\" | \"amtriangle18\" | \"amtriangle19\" |\n\t\"amtriangle20\" | \"amtriangle21\" | \"amtriangle22\" | \"amtriangle23\" | \"amtriangle24\" | \"amtriangle25\" | \"amtriangle26\" | \"amtriangle27\" | \"amtriangle28\" | \"amtriangle29\" |\n\t\"amtriangle30\" | \"amtriangle31\" | \"amtriangle32\";\n\ntype AMTypeWithPartials = AMSineWithPartials | AMSquareWithPartials | AMSawtoothWithPartials | AMTriangleWithPartials;\n\n/**\n * Fat Oscillators with partials\n */\ntype FatSineWithPartials =\n\t\"fatsine1\" | \"fatsine2\" | \"fatsine3\" | \"fatsine4\" | \"fatsine5\" | \"fatsine6\" | \"fatsine7\" | \"fatsine8\" | \"fatsine9\" |\n\t\"fatsine10\" | \"fatsine11\" | \"fatsine12\" | \"fatsine13\" | \"fatsine14\" | \"fatsine15\" | \"fatsine16\" | \"fatsine17\" | \"fatsine18\" | \"fatsine19\" |\n\t\"fatsine20\" | \"fatsine21\" | \"fatsine22\" | \"fatsine23\" | \"fatsine24\" | \"fatsine25\" | \"fatsine26\" | \"fatsine27\" | \"fatsine28\" | \"fatsine29\" |\n\t\"fatsine30\" | \"fatsine31\" | \"fatsine32\";\n\ntype FatSquareWithPartials =\n\t\"fatsquare1\" | \"fatsquare2\" | \"fatsquare3\" | \"fatsquare4\" | \"fatsquare5\" | \"fatsquare6\" | \"fatsquare7\" | \"fatsquare8\" | \"fatsquare9\" |\n\t\"fatsquare10\" | \"fatsquare11\" | \"fatsquare12\" | \"fatsquare13\" | \"fatsquare14\" | \"fatsquare15\" | \"fatsquare16\" | \"fatsquare17\" | \"fatsquare18\" | \"fatsquare19\" |\n\t\"fatsquare20\" | \"fatsquare21\" | \"fatsquare22\" | \"fatsquare23\" | \"fatsquare24\" | \"fatsquare25\" | \"fatsquare26\" | \"fatsquare27\" | \"fatsquare28\" | \"fatsquare29\" |\n\t\"fatsquare30\" | \"fatsquare31\" | \"fatsquare32\";\n\ntype FatSawtoothWithPartials =\n\t\"fatsawtooth1\" | \"fatsawtooth2\" | \"fatsawtooth3\" | \"fatsawtooth4\" | \"fatsawtooth5\" | \"fatsawtooth6\" | \"fatsawtooth7\" | \"fatsawtooth8\" | \"fatsawtooth9\" |\n\t\"fatsawtooth10\" | \"fatsawtooth11\" | \"fatsawtooth12\" | \"fatsawtooth13\" | \"fatsawtooth14\" | \"fatsawtooth15\" | \"fatsawtooth16\" | \"fatsawtooth17\" | \"fatsawtooth18\" | \"fatsawtooth19\" |\n\t\"fatsawtooth20\" | \"fatsawtooth21\" | \"fatsawtooth22\" | \"fatsawtooth23\" | \"fatsawtooth24\" | \"fatsawtooth25\" | \"fatsawtooth26\" | \"fatsawtooth27\" | \"fatsawtooth28\" | \"fatsawtooth29\" |\n\t\"fatsawtooth30\" | \"fatsawtooth31\" | \"fatsawtooth32\";\n\ntype FatTriangleWithPartials =\n\t\"fattriangle1\" | \"fattriangle2\" | \"fattriangle3\" | \"fattriangle4\" | \"fattriangle5\" | \"fattriangle6\" | \"fattriangle7\" | \"fattriangle8\" | \"fattriangle9\" |\n\t\"fattriangle10\" | \"fattriangle11\" | \"fattriangle12\" | \"fattriangle13\" | \"fattriangle14\" | \"fattriangle15\" | \"fattriangle16\" | \"fattriangle17\" | \"fattriangle18\" | \"fattriangle19\" |\n\t\"fattriangle20\" | \"fattriangle21\" | \"fattriangle22\" | \"fattriangle23\" | \"fattriangle24\" | \"fattriangle25\" | \"fattriangle26\" | \"fattriangle27\" | \"fattriangle28\" | \"fattriangle29\" |\n\t\"fattriangle30\" | \"fattriangle31\" | \"fattriangle32\";\n\ntype FatTypeWithPartials = FatSineWithPartials | FatSquareWithPartials | FatSawtoothWithPartials | FatTriangleWithPartials;\n\n/**\n * Omni FM\n */\ninterface OmniFMCustomOscillatorOptions extends FMBaseOscillatorOptions {\n\ttype: \"fmcustom\";\n\tpartials: number[];\n}\n\ninterface OmniFMTypeOscillatorOptions extends FMBaseOscillatorOptions {\n\ttype: \"fmsine\" | \"fmsquare\" | \"fmsawtooth\" | \"fmtriangle\";\n\tpartialsCount?: number;\n}\n\ninterface OmniFMPartialsOscillatorOptions extends FMBaseOscillatorOptions {\n\ttype: FMTypeWithPartials;\n}\n\n/**\n * Omni AM\n */\ninterface OmniAMCustomOscillatorOptions extends AMBaseOscillatorOptions {\n\ttype: \"amcustom\";\n\tpartials: number[];\n}\n\ninterface OmniAMTypeOscillatorOptions extends AMBaseOscillatorOptions {\n\ttype: \"amsine\" | \"amsquare\" | \"amsawtooth\" | \"amtriangle\";\n\tpartialsCount?: number;\n}\n\ninterface OmniAMPartialsOscillatorOptions extends AMBaseOscillatorOptions {\n\ttype: AMTypeWithPartials;\n}\n\n/**\n * Omni Fat\n */\ninterface OmniFatCustomOscillatorOptions extends FatBaseOscillatorOptions {\n\ttype: \"fatcustom\";\n\tpartials: number[];\n}\n\ninterface OmniFatTypeOscillatorOptions extends FatBaseOscillatorOptions {\n\ttype: \"fatsine\" | \"fatsquare\" | \"fatsawtooth\" | \"fattriangle\";\n\tpartialsCount?: number;\n}\n\ninterface OmniFatPartialsOscillatorOptions extends FatBaseOscillatorOptions {\n\ttype: FatTypeWithPartials;\n}\n\nexport type OmniOscillatorType =\n\t\"fatsine\" | \"fatsquare\" | \"fatsawtooth\" | \"fattriangle\" | \"fatcustom\" | FatTypeWithPartials |\n\t\"fmsine\" | \"fmsquare\" | \"fmsawtooth\" | \"fmtriangle\" | \"fmcustom\" | FMTypeWithPartials |\n\t\"amsine\" | \"amsquare\" | \"amsawtooth\" | \"amtriangle\" | \"amcustom\" | AMTypeWithPartials |\n\tTypeWithPartials | OscillatorType | \"pulse\" | \"pwm\";\n\nexport type OmniOscillatorConstructorOptions =\n\tPulseOscillatorOptions | PWMOscillatorOptions |\n\tOmniFatCustomOscillatorOptions | OmniFatTypeOscillatorOptions | OmniFatPartialsOscillatorOptions |\n\tOmniFMCustomOscillatorOptions | OmniFMTypeOscillatorOptions | OmniFMPartialsOscillatorOptions |\n\tOmniAMCustomOscillatorOptions | OmniAMTypeOscillatorOptions | OmniAMPartialsOscillatorOptions |\n\tToneOscillatorConstructorOptions;\n\n// export type OmniOscillatorSourceOptions = OmniOscillatorConstructorOptions & SourceOptions;\n\nexport type OmniOscillatorOptions =\n\tPulseOscillatorOptions & PWMOscillatorOptions &\n\tOmniFatCustomOscillatorOptions & OmniFatTypeOscillatorOptions & OmniFatPartialsOscillatorOptions &\n\tOmniFMCustomOscillatorOptions & OmniFMTypeOscillatorOptions & OmniFMPartialsOscillatorOptions &\n\tOmniAMCustomOscillatorOptions & OmniAMTypeOscillatorOptions & OmniAMPartialsOscillatorOptions &\n\tToneOscillatorConstructorOptions;\n\ntype OmitSourceOptions<T extends BaseOscillatorOptions> = Omit<T, \"frequency\" | \"detune\" | \"context\">;\n\n/**\n * The settable options for the omni oscillator inside of the source which excludes certain attributes that are defined by the parent class\n */\nexport type OmniOscillatorSynthOptions =\n\tOmitSourceOptions<PulseOscillatorOptions> | OmitSourceOptions<PWMOscillatorOptions> |\n\tOmitSourceOptions<OmniFatCustomOscillatorOptions> | OmitSourceOptions<OmniFatTypeOscillatorOptions> | OmitSourceOptions<OmniFatPartialsOscillatorOptions> |\n\tOmitSourceOptions<OmniFMCustomOscillatorOptions> | OmitSourceOptions<OmniFMTypeOscillatorOptions> | OmitSourceOptions<OmniFMPartialsOscillatorOptions> |\n\tOmitSourceOptions<OmniAMCustomOscillatorOptions> | OmitSourceOptions<OmniAMTypeOscillatorOptions> | OmitSourceOptions<OmniAMPartialsOscillatorOptions> |\n\tOmitSourceOptions<ToneOscillatorConstructorOptions>;\n","import { connect } from \"../../core/Connect\";\nimport { Param } from \"../../core/context/Param\";\nimport { Cents, Frequency, Seconds, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { OneShotSource, OneShotSourceOptions } from \"../OneShotSource\";\n\nexport interface ToneOscillatorNodeOptions extends OneShotSourceOptions {\n\tfrequency: Frequency;\n\tdetune: Cents;\n\ttype: OscillatorType;\n}\n\n/**\n * Wrapper around the native fire-and-forget OscillatorNode.\n * Adds the ability to reschedule the stop method.\n * ***[[Oscillator]] is better for most use-cases***\n * @category Source\n */\nexport class ToneOscillatorNode extends OneShotSource<ToneOscillatorNodeOptions> {\n\n\treadonly name: string = \"ToneOscillatorNode\";\n\n\t/**\n\t * The oscillator\n\t */\n\tprivate _oscillator = this.context.createOscillator();\n\tprotected _internalChannels = [this._oscillator];\n\n\t/**\n\t * The frequency of the oscillator\n\t */\n\treadonly frequency: Param<\"frequency\">;\n\n\t/**\n\t * The detune of the oscillator\n\t */\n\treadonly detune: Param<\"cents\">;\n\n\t/**\n\t * @param  frequency   The frequency value\n\t * @param  type  The basic oscillator type\n\t */\n\tconstructor(\n\t\tfrequency: Frequency,\n\t\ttype: OscillatorType,\n\t);\n\tconstructor(options?: Partial<ToneOscillatorNodeOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(ToneOscillatorNode.getDefaults(), arguments, [\"frequency\", \"type\"]));\n\t\tconst options = optionsFromArguments(ToneOscillatorNode.getDefaults(), arguments, [\"frequency\", \"type\"]);\n\n\t\tconnect(this._oscillator, this._gainNode);\n\n\t\tthis.type = options.type;\n\n\t\tthis.frequency = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._oscillator.frequency,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t});\n\n\t\tthis.detune = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._oscillator.detune,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune,\n\t\t});\n\t}\n\n\tstatic getDefaults(): ToneOscillatorNodeOptions {\n\t\treturn Object.assign(OneShotSource.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tfrequency: 440,\n\t\t\ttype: \"sine\" as OscillatorType,\n\t\t});\n\t}\n\n\t/**\n\t * Start the oscillator node at the given time\n\t * @param  time When to start the oscillator\n\t */\n\tstart(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis.log(\"start\", computedTime);\n\t\tthis._startGain(computedTime);\n\t\tthis._oscillator.start(computedTime);\n\t\treturn this;\n\t}\n\n\tprotected _stopSource(time?: Seconds): void {\n\t\tthis._oscillator.stop(time);\n\t}\n\n\t/**\n\t * Sets an arbitrary custom periodic waveform given a PeriodicWave.\n\t * @param  periodicWave PeriodicWave should be created with context.createPeriodicWave\n\t */\n\tsetPeriodicWave(periodicWave: PeriodicWave): this {\n\t\tthis._oscillator.setPeriodicWave(periodicWave);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The oscillator type. Either 'sine', 'sawtooth', 'square', or 'triangle'\n\t */\n\tget type(): OscillatorType {\n\t\treturn this._oscillator.type;\n\t}\n\tset type(type: OscillatorType) {\n\t\tthis._oscillator.type = type;\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (this.state === \"started\") {\n\t\t\tthis.stop();\n\t\t}\n\t\tthis._oscillator.disconnect();\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\treturn this;\n\t}\n}\n","import { AudioRange, Degrees, Frequency, Radians, Time } from \"../../core/type/Units\";\nimport { deepEquals, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { isDefined } from \"../../core/util/TypeCheck\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { generateWaveform, ToneOscillatorConstructorOptions, ToneOscillatorInterface,\n\tToneOscillatorOptions, ToneOscillatorType } from \"./OscillatorInterface\";\nimport { ToneOscillatorNode } from \"./ToneOscillatorNode\";\nimport { assertRange } from \"../../core/util/Debug\";\nexport { ToneOscillatorOptions, ToneOscillatorType } from \"./OscillatorInterface\";\n/**\n * Oscillator supports a number of features including\n * phase rotation, multiple oscillator types (see Oscillator.type),\n * and Transport syncing (see Oscillator.syncFrequency).\n *\n * @example\n * import { Oscillator } from \"tone\";\n * // make and start a 440hz sine tone\n * const osc = new Oscillator(440, \"sine\").toDestination().start();\n * @category Source\n */\nexport class Oscillator extends Source<ToneOscillatorOptions> implements ToneOscillatorInterface {\n\n\treadonly name: string = \"Oscillator\";\n\n\t/**\n\t * the main oscillator\n\t */\n\tprivate _oscillator: ToneOscillatorNode | null = null;\n\n\t/**\n\t * The frequency control.\n\t */\n\tfrequency: Signal<\"frequency\">;\n\n\t/**\n\t * The detune control signal.\n\t */\n\tdetune: Signal<\"cents\">;\n\n\t/**\n\t * the periodic wave\n\t */\n\tprivate _wave?: PeriodicWave;\n\n\t/**\n\t * The partials of the oscillator\n\t */\n\tprivate _partials: number[];\n\n\t/**\n\t * The number of partials to limit or extend the periodic wave by\n\t */\n\tprivate _partialCount: number;\n\n\t/**\n\t * the phase of the oscillator between 0 - 360\n\t */\n\tprivate _phase!: Radians;\n\n\t/**\n\t * the type of the oscillator\n\t */\n\tprivate _type: ToneOscillatorType;\n\n\t/**\n\t * @param frequency Starting frequency\n\t * @param type The oscillator type. Read more about type below.\n\t */\n\tconstructor(frequency?: Frequency, type?: ToneOscillatorType);\n\tconstructor(options?: Partial<ToneOscillatorConstructorOptions>)\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Oscillator.getDefaults(), arguments, [\"frequency\", \"type\"]));\n\t\tconst options = optionsFromArguments(Oscillator.getDefaults(), arguments, [\"frequency\", \"type\"]);\n\n\t\tthis.frequency = new Signal<\"frequency\">({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t});\n\t\treadOnly(this, \"frequency\");\n\n\t\tthis.detune = new Signal<\"cents\">({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune,\n\t\t});\n\t\treadOnly(this, \"detune\");\n\n\t\tthis._partials = options.partials;\n\t\tthis._partialCount = options.partialCount;\n\t\tthis._type = options.type;\n\n\t\tif (options.partialCount && options.type !== \"custom\") {\n\t\t\tthis._type = this.baseType + options.partialCount.toString() as ToneOscillatorType;\n\t\t}\n\t\tthis.phase = options.phase;\n\t}\n\n\tstatic getDefaults(): ToneOscillatorOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tfrequency: 440,\n\t\t\tpartialCount: 0,\n\t\t\tpartials: [],\n\t\t\tphase: 0,\n\t\t\ttype: \"sine\",\n\t\t}) as ToneOscillatorOptions;\n\t}\n\n\t/**\n\t * start the oscillator\n\t */\n\tprotected _start(time?: Time): void {\n\t\tconst computedTime = this.toSeconds(time);\n\t\t// new oscillator with previous values\n\t\tconst oscillator = new ToneOscillatorNode({\n\t\t\tcontext: this.context,\n\t\t\tonended: () => this.onstop(this),\n\t\t});\n\t\tthis._oscillator = oscillator;\n\t\tif (this._wave) {\n\t\t\tthis._oscillator.setPeriodicWave(this._wave);\n\t\t} else {\n\t\t\tthis._oscillator.type = this._type as OscillatorType;\n\t\t}\n\t\t// connect the control signal to the oscillator frequency & detune\n\t\tthis._oscillator.connect(this.output);\n\t\tthis.frequency.connect(this._oscillator.frequency);\n\t\tthis.detune.connect(this._oscillator.detune);\n\n\t\t// start the oscillator\n\t\tthis._oscillator.start(computedTime);\n\t}\n\n\t/**\n\t * stop the oscillator\n\t */\n\tprotected _stop(time?: Time): void {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._oscillator) {\n\t\t\tthis._oscillator.stop(computedTime);\n\t\t}\n\t}\n\n\t/**\n\t * Restart the oscillator. Does not stop the oscillator, but instead\n\t * just cancels any scheduled 'stop' from being invoked.\n\t */\n\trestart(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis.log(\"restart\", computedTime);\n\t\tif (this._oscillator) {\n\t\t\tthis._oscillator.cancelStop();\n\t\t}\n\t\tthis._state.cancel(computedTime);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sync the signal to the Transport's bpm. Any changes to the transports bpm,\n\t * will also affect the oscillators frequency.\n\t * @example\n\t * import { Oscillator, Transport } from \"tone\";\n\t * const osc = new Oscillator().toDestination().start();\n\t * osc.frequency.value = 440;\n\t * // the ratio between the bpm and the frequency will be maintained\n\t * osc.syncFrequency();\n\t * // double the tempo\n\t * Transport.bpm.value *= 2;\n\t * // the frequency of the oscillator is doubled to 880\n\t */\n\tsyncFrequency(): this {\n\t\tthis.context.transport.syncSignal(this.frequency);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unsync the oscillator's frequency from the Transport.\n\t * See Oscillator.syncFrequency\n\t */\n\tunsyncFrequency(): this {\n\t\tthis.context.transport.unsyncSignal(this.frequency);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Cache the periodic waves to avoid having to redo computations\n\t */\n\tprivate static _periodicWaveCache: Array<{\n\t\tpartials: number[];\n\t\tphase: number;\n\t\ttype: string;\n\t\tpartialCount: number;\n\t\treal: Float32Array;\n\t\timag: Float32Array;\n\t\twave: PeriodicWave;\n\t}> = [];\n\n\t/**\n\t * Get a cached periodic wave. Avoids having to recompute\n\t * the oscillator values when they have already been computed\n\t * with the same values.\n\t */\n\tprivate _getCachedPeriodicWave(): {real: Float32Array; imag: Float32Array; partials: number[]; wave: PeriodicWave} | undefined {\n\t\tif (this._type === \"custom\") {\n\t\t\tconst oscProps = Oscillator._periodicWaveCache.find(description => {\n\t\t\t\treturn description.phase === this._phase &&\n\t\t\t\t\tdeepEquals(description.partials, this._partials);\n\t\t\t});\n\t\t\treturn oscProps;\n\t\t} else {\n\t\t\tconst oscProps = Oscillator._periodicWaveCache.find(description => {\n\t\t\t\treturn description.type === this._type &&\n\t\t\t\t\tdescription.phase === this._phase;\n\t\t\t});\n\t\t\tthis._partialCount = oscProps ? oscProps.partialCount : this._partialCount;\n\t\t\treturn oscProps;\n\t\t}\n\t}\n\n\tget type(): ToneOscillatorType {\n\t\treturn this._type;\n\t}\n\tset type(type) {\n\t\tthis._type = type;\n\t\tconst isBasicType = [\"sine\", \"square\", \"sawtooth\", \"triangle\"].indexOf(type) !== -1;\n\t\tif (this._phase === 0 && isBasicType) {\n\t\t\tthis._wave = undefined;\n\t\t\tthis._partialCount = 0;\n\t\t\t// just go with the basic approach\n\t\t\tif (this._oscillator !== null) {\n\t\t\t\t// already tested that it's a basic type\n\t\t\t\tthis._oscillator.type = type as OscillatorType;\n\t\t\t}\n\t\t} else {\n\t\t\t// first check if the value is cached\n\t\t\tconst cache = this._getCachedPeriodicWave();\n\t\t\tif (isDefined(cache)) {\n\t\t\t\tconst { partials, wave } = cache;\n\t\t\t\tthis._wave = wave;\n\t\t\t\tthis._partials = partials;\n\t\t\t\tif (this._oscillator !== null) {\n\t\t\t\t\tthis._oscillator.setPeriodicWave(this._wave);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst [real, imag] = this._getRealImaginary(type, this._phase);\n\t\t\t\tconst periodicWave = this.context.createPeriodicWave(real, imag);\n\t\t\t\tthis._wave = periodicWave;\n\t\t\t\tif (this._oscillator !== null) {\n\t\t\t\t\tthis._oscillator.setPeriodicWave(this._wave);\n\t\t\t\t}\n\t\t\t\t// set the cache\n\t\t\t\tOscillator._periodicWaveCache.push({\n\t\t\t\t\timag,\n\t\t\t\t\tpartialCount: this._partialCount,\n\t\t\t\t\tpartials: this._partials,\n\t\t\t\t\tphase: this._phase,\n\t\t\t\t\treal,\n\t\t\t\t\ttype: this._type,\n\t\t\t\t\twave: this._wave,\n\t\t\t\t});\n\t\t\t\tif (Oscillator._periodicWaveCache.length > 100) {\n\t\t\t\t\tOscillator._periodicWaveCache.shift();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tget baseType(): OscillatorType {\n\t\treturn (this._type as string).replace(this.partialCount.toString(), \"\") as OscillatorType;\n\t}\n\tset baseType(baseType) {\n\t\tif (this.partialCount && this._type !== \"custom\" && baseType !== \"custom\") {\n\t\t\tthis.type = baseType + this.partialCount as ToneOscillatorType;\n\t\t} else {\n\t\t\tthis.type = baseType;\n\t\t}\n\t}\n\n\tget partialCount(): number {\n\t\treturn this._partialCount;\n\t}\n\tset partialCount(p) {\n\t\tassertRange(p, 0);\n\t\tlet type = this._type;\n\t\tconst partial = /^(sine|triangle|square|sawtooth)(\\d+)$/.exec(this._type);\n\t\tif (partial) {\n\t\t\ttype = partial[1] as OscillatorType;\n\t\t}\n\t\tif (this._type !== \"custom\") {\n\t\t\tif (p === 0) {\n\t\t\t\tthis.type = type;\n\t\t\t} else {\n\t\t\t\tthis.type = type + p.toString() as ToneOscillatorType;\n\t\t\t}\n\t\t} else {\n\t\t\t// extend or shorten the partials array\n\t\t\tconst fullPartials = new Float32Array(p);\n\t\t\t// copy over the partials array\n\t\t\tthis._partials.forEach((v, i) => fullPartials[i] = v);\n\t\t\tthis._partials = Array.from(fullPartials);\n\t\t\tthis.type = this._type;\n\t\t}\n\t}\n\n\t/**\n\t * Returns the real and imaginary components based\n\t * on the oscillator type.\n\t * @returns [real: Float32Array, imaginary: Float32Array]\n\t */\n\tprivate _getRealImaginary(type: ToneOscillatorType, phase: Radians): Float32Array[] {\n\t\tconst fftSize = 4096;\n\t\tlet periodicWaveSize = fftSize / 2;\n\n\t\tconst real = new Float32Array(periodicWaveSize);\n\t\tconst imag = new Float32Array(periodicWaveSize);\n\n\t\tlet partialCount = 1;\n\t\tif (type === \"custom\") {\n\t\t\tpartialCount = this._partials.length + 1;\n\t\t\tthis._partialCount = this._partials.length;\n\t\t\tperiodicWaveSize = partialCount;\n\t\t\t// if the partial count is 0, don't bother doing any computation\n\t\t\tif (this._partials.length === 0) {\n\t\t\t\treturn [real, imag];\n\t\t\t}\n\t\t} else {\n\t\t\tconst partial = /^(sine|triangle|square|sawtooth)(\\d+)$/.exec(type);\n\t\t\tif (partial) {\n\t\t\t\tpartialCount = parseInt(partial[2], 10) + 1;\n\t\t\t\tthis._partialCount = parseInt(partial[2], 10);\n\t\t\t\ttype = partial[1] as ToneOscillatorType;\n\t\t\t\tpartialCount = Math.max(partialCount, 2);\n\t\t\t\tperiodicWaveSize = partialCount;\n\t\t\t} else {\n\t\t\t\tthis._partialCount = 0;\n\t\t\t}\n\t\t\tthis._partials = [];\n\t\t}\n\n\t\tfor (let n = 1; n < periodicWaveSize; ++n) {\n\t\t\tconst piFactor = 2 / (n * Math.PI);\n\t\t\tlet b;\n\t\t\tswitch (type) {\n\t\t\t\tcase \"sine\":\n\t\t\t\t\tb = (n <= partialCount) ? 1 : 0;\n\t\t\t\t\tthis._partials[n - 1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"square\":\n\t\t\t\t\tb = (n & 1) ? 2 * piFactor : 0;\n\t\t\t\t\tthis._partials[n - 1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"sawtooth\":\n\t\t\t\t\tb = piFactor * ((n & 1) ? 1 : -1);\n\t\t\t\t\tthis._partials[n - 1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"triangle\":\n\t\t\t\t\tif (n & 1) {\n\t\t\t\t\t\tb = 2 * (piFactor * piFactor) * ((((n - 1) >> 1) & 1) ? -1 : 1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tb = 0;\n\t\t\t\t\t}\n\t\t\t\t\tthis._partials[n - 1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"custom\":\n\t\t\t\t\tb = this._partials[n - 1];\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new TypeError(\"Oscillator: invalid type: \" + type);\n\t\t\t}\n\t\t\tif (b !== 0) {\n\t\t\t\treal[n] = -b * Math.sin(phase * n);\n\t\t\t\timag[n] = b * Math.cos(phase * n);\n\t\t\t} else {\n\t\t\t\treal[n] = 0;\n\t\t\t\timag[n] = 0;\n\t\t\t}\n\t\t}\n\t\treturn [real, imag];\n\t}\n\n\t/**\n\t * Compute the inverse FFT for a given phase.\n\t */\n\tprivate _inverseFFT(real: Float32Array, imag: Float32Array, phase: Radians): number {\n\t\tlet sum = 0;\n\t\tconst len = real.length;\n\t\tfor (let i = 0; i < len; i++) {\n\t\t\tsum += real[i] * Math.cos(i * phase) + imag[i] * Math.sin(i * phase);\n\t\t}\n\t\treturn sum;\n\t}\n\n\t/**\n\t * Returns the initial value of the oscillator when stopped.\n\t * E.g. a \"sine\" oscillator with phase = 90 would return an initial value of -1.\n\t */\n\tgetInitialValue(): AudioRange {\n\t\tconst [real, imag] = this._getRealImaginary(this._type, 0);\n\t\tlet maxValue = 0;\n\t\tconst twoPi = Math.PI * 2;\n\t\tconst testPositions = 32;\n\t\t// check for peaks in 16 places\n\t\tfor (let i = 0; i < testPositions; i++) {\n\t\t\tmaxValue = Math.max(this._inverseFFT(real, imag, (i / testPositions) * twoPi), maxValue);\n\t\t}\n\t\treturn -this._inverseFFT(real, imag, this._phase) / maxValue;\n\t}\n\n\tget partials(): number[] {\n\t\treturn this._partials.slice(0, this.partialCount);\n\t}\n\tset partials(partials) {\n\t\tthis._partials = partials;\n\t\tthis._partialCount = this._partials.length;\n\t\tif (partials.length) {\n\t\t\tthis.type = \"custom\";\n\t\t}\n\t}\n\n\tget phase(): Degrees {\n\t\treturn this._phase * (180 / Math.PI);\n\t}\n\tset phase(phase) {\n\t\tthis._phase = phase * Math.PI / 180;\n\t\t// reset the type\n\t\tthis.type = this._type;\n\t}\n\n\tasync asArray(length = 1024): Promise<Float32Array> {\n\t\treturn generateWaveform(this, length);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (this._oscillator !== null) {\n\t\t\tthis._oscillator.dispose();\n\t\t}\n\t\tthis._wave = undefined;\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { SignalOperator } from \"./SignalOperator\";\nimport { WaveShaper } from \"./WaveShaper\";\n\n/**\n * AudioToGain converts an input in AudioRange [-1,1] to NormalRange [0,1].\n * See {@link GainToAudio}.\n * @category Signal\n */\nexport class AudioToGain extends SignalOperator<ToneAudioNodeOptions> {\n\n\treadonly name: string = \"AudioToGain\";\n\n\t/**\n\t * The node which converts the audio ranges\n\t */\n\tprivate _norm = new WaveShaper({\n\t\tcontext: this.context,\n\t\tmapping: x => (x + 1) / 2,\n\t});\n\n\t/**\n\t * The AudioRange input [-1, 1]\n\t */\n\tinput = this._norm;\n\n\t/**\n\t * The GainRange output [0, 1]\n\t */\n\toutput = this._norm;\n\n\t/**\n\t * clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._norm.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { Degrees, Frequency, Seconds, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { AudioToGain } from \"../../signal/AudioToGain\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { AMConstructorOptions, AMOscillatorOptions,\n\tgenerateWaveform, NonCustomOscillatorType,\n\tToneOscillatorInterface, \n\tToneOscillatorType } from \"./OscillatorInterface\";\n\nexport { AMOscillatorOptions } from \"./OscillatorInterface\";\n\n/**\n * An amplitude modulated oscillator node. It is implemented with\n * two oscillators, one which modulators the other's amplitude\n * through a gain node.\n * ```\n *    +-------------+       +----------+\n *    | Carrier Osc +>------> GainNode |\n *    +-------------+       |          +--->Output\n *                      +---> gain     |\n * +---------------+    |   +----------+\n * | Modulator Osc +>---+\n * +---------------+\n * ```\n *\n * @example\n * import { AMOscillator } from \"tone\";\n * // a sine oscillator amplitude-modulated by a square wave\n * const amOsc = new AMOscillator(\"Ab3\", \"sine\", \"square\").toDestination().start().stop(\"+5\");\n * // schedule a series of notes\n * amOsc.frequency.setValueAtTime(\"F3\", \"+0.25\");\n * amOsc.frequency.setValueAtTime(\"C4\", \"+0.5\");\n * amOsc.frequency.setValueAtTime(\"Bb3\", \"+1\");\n * // schedule harmonicity changes along with those notes\n * amOsc.harmonicity.setValueAtTime(0.5, \"+0.25\");\n * amOsc.harmonicity.setValueAtTime(1, \"+1\");\n * amOsc.harmonicity.linearRampTo(1.1, 2, \"+1\");\n * // fade it out all the way at the end\n * amOsc.volume.exponentialRampTo(-Infinity, 3, \"+2,\");\n * @category Source\n */\nexport class AMOscillator extends Source<AMOscillatorOptions> implements ToneOscillatorInterface {\n\n\treadonly name: string = \"AMOscillator\";\n\n\t/**\n\t * The carrier oscillator\n\t */\n\tprivate _carrier: Oscillator;\n\n\treadonly frequency: Signal<\"frequency\">;\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * The modulating oscillator\n\t */\n\tprivate _modulator: Oscillator;\n\n\t/**\n\t * convert the -1,1 output to 0,1\n\t */\n\tprivate _modulationScale = new AudioToGain({ context: this.context });\n\n\t/**\n\t * Harmonicity is the frequency ratio between the carrier and the modulator oscillators.\n\t * A harmonicity of 1 gives both oscillators the same frequency.\n\t * Harmonicity = 2 means a change of an octave.\n\t * @example\n\t * import { AMOscillator, Transport } from \"tone\";\n\t * const amOsc = new AMOscillator(\"D2\").toDestination().start();\n\t * Transport.scheduleRepeat(time => {\n\t * \tamOsc.harmonicity.setValueAtTime(1, time);\n\t * \tamOsc.harmonicity.setValueAtTime(0.5, time + 0.5);\n\t * \tamOsc.harmonicity.setValueAtTime(1.5, time + 1);\n\t * \tamOsc.harmonicity.setValueAtTime(1, time + 2);\n\t * \tamOsc.harmonicity.linearRampToValueAtTime(2, time + 4);\n\t * }, 4);\n\t * Transport.start();\n\t */\n\treadonly harmonicity: Signal<\"positive\">;\n\n\t/**\n\t * the node where the modulation happens\n\t */\n\tprivate _modulationNode = new Gain({\n\t\tcontext: this.context,\n\t});\n\n\t/**\n\t * @param frequency The starting frequency of the oscillator.\n\t * @param type The type of the carrier oscillator.\n\t * @param modulationType The type of the modulator oscillator.\n\t */\n\tconstructor(frequency?: Frequency, type?: ToneOscillatorType, modulationType?: ToneOscillatorType);\n\tconstructor(options?: Partial<AMConstructorOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(AMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]));\n\t\tconst options = optionsFromArguments(AMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]);\n\n\t\tthis._carrier = new Oscillator({\n\t\t\tcontext: this.context,\n\t\t\tdetune: options.detune,\n\t\t\tfrequency: options.frequency,\n\t\t\tonstop: () => this.onstop(this),\n\t\t\tphase: options.phase,\n\t\t\ttype: options.type,\n\t\t} as OscillatorOptions);\n\t\tthis.frequency = this._carrier.frequency,\n\t\tthis.detune = this._carrier.detune;\n\n\t\tthis._modulator = new Oscillator({\n\t\t\tcontext: this.context,\n\t\t\tphase: options.phase,\n\t\t\ttype: options.modulationType,\n\t\t} as OscillatorOptions);\n\n\t\tthis.harmonicity = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.harmonicity,\n\t\t});\n\n\t\t// connections\n\t\tthis.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t\tthis._modulator.chain(this._modulationScale, this._modulationNode.gain);\n\t\tthis._carrier.chain(this._modulationNode, this.output);\n\n\t\treadOnly(this, [\"frequency\", \"detune\", \"harmonicity\"]);\n\t}\n\n\tstatic getDefaults(): AMOscillatorOptions {\n\t\treturn Object.assign(Oscillator.getDefaults(), {\n\t\t\tharmonicity: 1,\n\t\t\tmodulationType: \"square\" as NonCustomOscillatorType,\n\t\t});\n\t}\n\n\t/**\n\t * start the oscillator\n\t */\n\tprotected _start(time: Seconds): void {\n\t\tthis._modulator.start(time);\n\t\tthis._carrier.start(time);\n\t}\n\n\t/**\n\t * stop the oscillator\n\t */\n\tprotected _stop(time: Seconds): void {\n\t\tthis._modulator.stop(time);\n\t\tthis._carrier.stop(time);\n\t}\n\n\t/**\n\t * restart the oscillator\n\t */\n\trestart(time?: Time): this {\n\t\tthis._modulator.restart(time);\n\t\tthis._carrier.restart(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The type of the carrier oscillator\n\t */\n\tget type(): ToneOscillatorType {\n\t\treturn this._carrier.type;\n\t}\n\tset type(type: ToneOscillatorType) {\n\t\tthis._carrier.type = type;\n\t}\n\n\tget baseType(): OscillatorType {\n\t\treturn this._carrier.baseType;\n\t}\n\tset baseType(baseType: OscillatorType) {\n\t\tthis._carrier.baseType = baseType;\n\t}\n\n\tget partialCount(): number {\n\t\treturn this._carrier.partialCount;\n\t}\n\tset partialCount(partialCount: number) {\n\t\tthis._carrier.partialCount = partialCount;\n\t}\n\n\t/**\n\t * The type of the modulator oscillator\n\t */\n\tget modulationType(): ToneOscillatorType {\n\t\treturn this._modulator.type;\n\t}\n\tset modulationType(type: ToneOscillatorType) {\n\t\tthis._modulator.type = type;\n\t}\n\n\tget phase(): Degrees {\n\t\treturn this._carrier.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._carrier.phase = phase;\n\t\tthis._modulator.phase = phase;\n\t}\n\n\tget partials(): number[] {\n\t\treturn this._carrier.partials;\n\t}\n\tset partials(partials: number[]) {\n\t\tthis._carrier.partials = partials;\n\t}\n\n\tasync asArray(length = 1024): Promise<Float32Array> {\n\t\treturn generateWaveform(this, length);\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\tthis.harmonicity.dispose();\n\t\tthis._carrier.dispose();\n\t\tthis._modulator.dispose();\n\t\tthis._modulationNode.dispose();\n\t\tthis._modulationScale.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { Degrees, Frequency, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { FMConstructorOptions, FMOscillatorOptions,\n\tgenerateWaveform, NonCustomOscillatorType, ToneOscillatorInterface, ToneOscillatorType } from \"./OscillatorInterface\";\n\nexport { FMOscillatorOptions } from \"./OscillatorInterface\";\n/**\n * FMOscillator implements a frequency modulation synthesis\n * ```\n *                                              +-------------+\n * +---------------+        +-------------+     | Carrier Osc |\n * | Modulator Osc +>-------> GainNode    |     |             +--->Output\n * +---------------+        |             +>----> frequency   |\n *                       +--> gain        |     +-------------+\n *                       |  +-------------+\n * +-----------------+   |\n * | modulationIndex +>--+\n * +-----------------+\n * ```\n *\n * @example\n * import { FMOscillator } from \"tone\";\n * // a sine oscillator frequency-modulated by a square wave\n * const fmOsc = new FMOscillator(\"Ab3\", \"sine\", \"square\").toDestination().start();\n * @category Source\n */\nexport class FMOscillator extends Source<FMOscillatorOptions> implements ToneOscillatorInterface {\n\n\treadonly name: string = \"FMOscillator\";\n\n\t/**\n\t * The carrier oscillator\n\t */\n\tprivate _carrier: Oscillator;\n\n\treadonly frequency: Signal<\"frequency\">;\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * The modulating oscillator\n\t */\n\tprivate _modulator: Oscillator;\n\n\t/**\n\t * Harmonicity is the frequency ratio between the carrier and the modulator oscillators.\n\t * A harmonicity of 1 gives both oscillators the same frequency.\n\t * Harmonicity = 2 means a change of an octave.\n\t * @example\n\t * import { FMOscillator } from \"tone\";\n\t * const fmOsc = new FMOscillator(\"D2\").toDestination().start();\n\t * // pitch the modulator an octave below carrier\n\t * fmOsc.harmonicity.value = 0.5;\n\t */\n\treadonly harmonicity: Signal<\"positive\">;\n\n\t/**\n\t * The modulation index which is in essence the depth or amount of the modulation. In other terms it is the\n\t * ratio of the frequency of the modulating signal (mf) to the amplitude of the\n\t * modulating signal (ma) -- as in ma/mf.\n\t */\n\treadonly modulationIndex: Signal<\"positive\">;\n\n\t/**\n\t * the node where the modulation happens\n\t */\n\tprivate _modulationNode: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\n\t/**\n\t * @param frequency The starting frequency of the oscillator.\n\t * @param type The type of the carrier oscillator.\n\t * @param modulationType The type of the modulator oscillator.\n\t */\n\tconstructor(frequency?: Frequency, type?: ToneOscillatorType, modulationType?: ToneOscillatorType);\n\tconstructor(options?: Partial<FMConstructorOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(FMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]));\n\t\tconst options = optionsFromArguments(FMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]);\n\n\t\tthis._carrier = new Oscillator({\n\t\t\tcontext: this.context,\n\t\t\tdetune: options.detune,\n\t\t\tfrequency: 0,\n\t\t\tonstop: () => this.onstop(this),\n\t\t\tphase: options.phase,\n\t\t\ttype: options.type,\n\t\t} as OscillatorOptions);\n\n\t\tthis.detune = this._carrier.detune;\n\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t});\n\n\t\tthis._modulator = new Oscillator({\n\t\t\tcontext: this.context,\n\t\t\tphase: options.phase,\n\t\t\ttype: options.modulationType,\n\t\t} as OscillatorOptions);\n\n\t\tthis.harmonicity = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.harmonicity,\n\t\t});\n\n\t\tthis.modulationIndex = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.modulationIndex,\n\t\t});\n\n\t\t// connections\n\t\tthis.frequency.connect(this._carrier.frequency);\n\t\tthis.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t\tthis.frequency.chain(this.modulationIndex, this._modulationNode);\n\t\tthis._modulator.connect(this._modulationNode.gain);\n\t\tthis._modulationNode.connect(this._carrier.frequency);\n\t\tthis._carrier.connect(this.output);\n\t\tthis.detune.connect(this._modulator.detune);\n\n\t\treadOnly(this, [\"modulationIndex\", \"frequency\", \"detune\", \"harmonicity\"]);\n\t}\n\n\tstatic getDefaults(): FMOscillatorOptions {\n\t\treturn Object.assign(Oscillator.getDefaults(), {\n\t\t\tharmonicity: 1,\n\t\t\tmodulationIndex: 2,\n\t\t\tmodulationType: \"square\" as NonCustomOscillatorType,\n\t\t});\n\t}\n\n\t/**\n\t * start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\tthis._modulator.start(time);\n\t\tthis._carrier.start(time);\n\t}\n\n\t/**\n\t * stop the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\tthis._modulator.stop(time);\n\t\tthis._carrier.stop(time);\n\t}\n\n\t/**\n\t * stop and restart the oscillator\n\t */\n\trestart(time?: Time): this {\n\t\tthis._modulator.restart(time);\n\t\tthis._carrier.restart(time);\n\t\treturn this;\n\t}\n\n\tget type(): ToneOscillatorType {\n\t\treturn this._carrier.type;\n\t}\n\tset type(type: ToneOscillatorType) {\n\t\tthis._carrier.type = type;\n\t}\n\n\tget baseType(): OscillatorType {\n\t\treturn this._carrier.baseType;\n\t}\n\tset baseType(baseType: OscillatorType) {\n\t\tthis._carrier.baseType = baseType;\n\t}\n\n\tget partialCount(): number {\n\t\treturn this._carrier.partialCount;\n\t}\n\tset partialCount(partialCount: number) {\n\t\tthis._carrier.partialCount = partialCount;\n\t}\n\n\t/**\n\t * The type of the modulator oscillator\n\t */\n\tget modulationType(): ToneOscillatorType {\n\t\treturn this._modulator.type;\n\t}\n\tset modulationType(type: ToneOscillatorType) {\n\t\tthis._modulator.type = type;\n\t}\n\n\tget phase(): Degrees {\n\t\treturn this._carrier.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._carrier.phase = phase;\n\t\tthis._modulator.phase = phase;\n\t}\n\n\tget partials(): number[] {\n\t\treturn this._carrier.partials;\n\t}\n\tset partials(partials: number[]) {\n\t\tthis._carrier.partials = partials;\n\t}\n\n\tasync asArray(length = 1024): Promise<Float32Array> {\n\t\treturn generateWaveform(this, length);\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.harmonicity.dispose();\n\t\tthis._carrier.dispose();\n\t\tthis._modulator.dispose();\n\t\tthis._modulationNode.dispose();\n\t\tthis.modulationIndex.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { AudioRange, Degrees, Frequency, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { WaveShaper } from \"../../signal/WaveShaper\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { generateWaveform, PulseOscillatorOptions, ToneOscillatorInterface } from \"./OscillatorInterface\";\n\nexport { PulseOscillatorOptions } from \"./OscillatorInterface\";\n\n/**\n * PulseOscillator is an oscillator with control over pulse width,\n * also known as the duty cycle. At 50% duty cycle (width = 0) the wave is\n * a square wave.\n * [Read more](https://wigglewave.wordpress.com/2014/08/16/pulse-waveforms-and-harmonics/).\n * ```\n *    width = -0.25        width = 0.0          width = 0.25\n *\n *   +-----+            +-------+       +    +-------+     +-+\n *   |     |            |       |       |            |     |\n *   |     |            |       |       |            |     |\n * +-+     +-------+    +       +-------+            +-----+\n *\n *\n *    width = -0.5                              width = 0.5\n *\n *     +---+                                 +-------+   +---+\n *     |   |                                         |   |\n *     |   |                                         |   |\n * +---+   +-------+                                 +---+\n *\n *\n *    width = -0.75                             width = 0.75\n *\n *       +-+                                 +-------+ +-----+\n *       | |                                         | |\n *       | |                                         | |\n * +-----+ +-------+                                 +-+\n * ```\n * @example\n * import { PulseOscillator } from \"tone\";\n * const pulse = new PulseOscillator(\"E5\", 0.4).toDestination().start();\n * @category Source\n */\nexport class PulseOscillator extends Source<PulseOscillatorOptions> implements ToneOscillatorInterface {\n\n\treadonly name: string = \"PulseOscillator\";\n\n\t/**\n\t * The width of the pulse.\n\t */\n\twidth: Signal<\"audioRange\">;\n\n\t/**\n\t * gate the width amount\n\t */\n\tprivate _widthGate: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\n\t/**\n\t * the sawtooth oscillator\n\t */\n\tprivate _sawtooth: Oscillator;\n\n\t/**\n\t * The frequency control.\n\t */\n\tfrequency: Signal<\"frequency\">;\n\n\t/**\n\t * The detune in cents.\n\t */\n\tdetune: Signal<\"cents\">;\n\n\t/**\n\t * Threshold the signal to turn it into a square\n\t */\n\tprivate _thresh = new WaveShaper({\n\t\tcontext: this.context,\n\t\tmapping: val => val <= 0 ? -1 : 1,\n\t});\n\n\t/**\n\t * @param frequency The frequency of the oscillator\n\t * @param width The width of the pulse\n\t */\n\tconstructor(frequency?: Frequency, width?: AudioRange);\n\tconstructor(options?: Partial<PulseOscillatorOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(PulseOscillator.getDefaults(), arguments, [\"frequency\", \"width\"]));\n\t\tconst options = optionsFromArguments(PulseOscillator.getDefaults(), arguments, [\"frequency\", \"width\"]);\n\n\t\tthis.width = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"audioRange\",\n\t\t\tvalue: options.width,\n\t\t});\n\n\t\tthis._sawtooth = new Oscillator({\n\t\t\tcontext: this.context,\n\t\t\tdetune: options.detune,\n\t\t\tfrequency: options.frequency,\n\t\t\tonstop: () => this.onstop(this),\n\t\t\tphase: options.phase,\n\t\t\ttype: \"sawtooth\",\n\t\t});\n\t\tthis.frequency = this._sawtooth.frequency;\n\t\tthis.detune = this._sawtooth.detune;\n\n\t\t// connections\n\t\tthis._sawtooth.chain(this._thresh, this.output);\n\t\tthis.width.chain(this._widthGate, this._thresh);\n\t\treadOnly(this, [\"width\", \"frequency\", \"detune\"]);\n\t}\n\n\tstatic getDefaults(): PulseOscillatorOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tfrequency: 440,\n\t\t\tphase: 0,\n\t\t\ttype: \"pulse\" as \"pulse\",\n\t\t\twidth: 0.2,\n\t\t});\n\t}\n\n\t/**\n\t * start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._sawtooth.start(time);\n\t\tthis._widthGate.gain.setValueAtTime(1, time);\n\t}\n\n\t/**\n\t * stop the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._sawtooth.stop(time);\n\t\t// the width is still connected to the output.\n\t\t// that needs to be stopped also\n\t\tthis._widthGate.gain.cancelScheduledValues(time);\n\t\tthis._widthGate.gain.setValueAtTime(0, time);\n\t}\n\n\t/**\n\t * Restart the oscillator\n\t */\n\trestart(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(computedTime) === \"started\") {\n\t\t\tthis._sawtooth.restart(computedTime);\n\t\t\tthis._widthGate.gain.cancelScheduledValues(computedTime);\n\t\t\tthis._widthGate.gain.setValueAtTime(1, computedTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._sawtooth.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._sawtooth.phase = phase;\n\t}\n\n\t/**\n\t * The type of the oscillator. Always returns \"pulse\".\n\t */\n\tget type(): \"pulse\" {\n\t\treturn \"pulse\";\n\t}\n\n\t/**\n\t * The baseType of the oscillator. Always returns \"pulse\".\n\t */\n\tget baseType(): \"pulse\" {\n\t\treturn \"pulse\";\n\t}\n\n\t/**\n\t * The partials of the waveform. Cannot set partials for this waveform type\n\t */\n\tget partials(): number[] {\n\t\treturn [];\n\t}\n\n\t/**\n\t * No partials for this waveform type.\n\t */\n\tget partialCount(): number {\n\t\treturn 0;\n\t}\n\n\tasync asArray(length = 1024): Promise<Float32Array> {\n\t\treturn generateWaveform(this, length);\n\t}\n\n\t/**\n\t * Clean up method.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._sawtooth.dispose();\n\t\tthis.width.dispose();\n\t\tthis._widthGate.dispose();\n\t\tthis._thresh.dispose();\n\t\treturn this;\n\t}\n}\n","import { Cents, Degrees, Frequency, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp, readOnly } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { FatConstructorOptions, FatOscillatorOptions,\n\tgenerateWaveform, NonCustomOscillatorType, ToneOscillatorInterface, ToneOscillatorType } from \"./OscillatorInterface\";\nimport { assertRange } from \"../../core/util/Debug\";\n\nexport { FatOscillatorOptions } from \"./OscillatorInterface\";\n\n/**\n * FatOscillator is an array of oscillators with detune spread between the oscillators\n * @example\n * import { FatOscillator } from \"tone\";\n * const fatOsc = new FatOscillator(\"Ab3\", \"sawtooth\", 40).toDestination().start();\n * @category Source\n */\nexport class FatOscillator extends Source<FatOscillatorOptions> implements ToneOscillatorInterface {\n\n\treadonly name: string = \"FatOscillator\";\n\n\treadonly frequency: Signal<\"frequency\">;\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * The array of oscillators\n\t */\n\tprivate _oscillators: Oscillator[] = [];\n\n\t/**\n\t * The total spread of the oscillators\n\t */\n\tprivate _spread: Cents;\n\n\t/**\n\t * The type of the oscillator\n\t */\n\tprivate _type: ToneOscillatorType;\n\n\t/**\n\t * The phase of the oscillators\n\t */\n\tprivate _phase: Degrees;\n\n\t/**\n\t * The partials array\n\t */\n\tprivate _partials: number[];\n\n\t/**\n\t * The number of partials to use\n\t */\n\tprivate _partialCount: number;\n\n\t/**\n\t * @param frequency The oscillator's frequency.\n\t * @param type The type of the oscillator.\n\t * @param spread The detune spread between the oscillators.\n\t */\n\tconstructor(frequency?: Frequency, type?: ToneOscillatorType, spread?: Cents);\n\tconstructor(options?: Partial<FatConstructorOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(FatOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"spread\"]));\n\t\tconst options = optionsFromArguments(FatOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"spread\"]);\n\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t});\n\t\tthis.detune = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune,\n\t\t});\n\n\t\tthis._spread = options.spread;\n\t\tthis._type = options.type;\n\t\tthis._phase = options.phase;\n\t\tthis._partials = options.partials;\n\t\tthis._partialCount = options.partialCount;\n\n\t\t// set the count initially\n\t\tthis.count = options.count;\n\n\t\treadOnly(this, [\"frequency\", \"detune\"]);\n\t}\n\n\tstatic getDefaults(): FatOscillatorOptions {\n\t\treturn Object.assign(Oscillator.getDefaults(), {\n\t\t\tcount: 3,\n\t\t\tspread: 20,\n\t\t\ttype: \"sawtooth\",\n\t\t});\n\t}\n\n\t/**\n\t * start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._forEach(osc => osc.start(time));\n\t}\n\n\t/**\n\t * stop the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._forEach(osc => osc.stop(time));\n\t}\n\n\t/**\n\t * restart the oscillator\n\t */\n\trestart(time): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis._forEach(osc => osc.restart(time));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Iterate over all of the oscillators\n\t */\n\tprivate _forEach(iterator: (osc: Oscillator, index: number) => void): void {\n\t\tfor (let i = 0; i < this._oscillators.length; i++) {\n\t\t\titerator(this._oscillators[i], i);\n\t\t}\n\t}\n\n\t/**\n\t * The type of the oscillator\n\t */\n\tget type(): ToneOscillatorType {\n\t\treturn this._type;\n\t}\n\tset type(type: ToneOscillatorType) {\n\t\tthis._type = type;\n\t\tthis._forEach(osc => osc.type = type);\n\t}\n\n\t/**\n\t * The detune spread between the oscillators. If \"count\" is\n\t * set to 3 oscillators and the \"spread\" is set to 40,\n\t * the three oscillators would be detuned like this: [-20, 0, 20]\n\t * for a total detune spread of 40 cents.\n\t * @example\n\t * import { FatOscillator } from \"tone\";\n\t * const fatOsc = new FatOscillator().toDestination().start();\n\t * fatOsc.spread = 70;\n\t */\n\tget spread(): Cents {\n\t\treturn this._spread;\n\t}\n\tset spread(spread: Cents) {\n\t\tthis._spread = spread;\n\t\tif (this._oscillators.length > 1) {\n\t\t\tconst start = -spread / 2;\n\t\t\tconst step = spread / (this._oscillators.length - 1);\n\t\t\tthis._forEach((osc, i) => osc.detune.value = start + step * i);\n\t\t}\n\t}\n\n\t/**\n\t * The number of detuned oscillators. Must be an integer greater than 1.\n\t * @example\n\t * import { FatOscillator } from \"tone\";\n\t * const fatOsc = new FatOscillator(\"C#3\", \"sawtooth\").toDestination().start();\n\t * // use 4 sawtooth oscillators\n\t * fatOsc.count = 4;\n\t */\n\tget count(): number {\n\t\treturn this._oscillators.length;\n\t}\n\tset count(count: number) {\n\t\tassertRange(count, 1);\n\t\tif (this._oscillators.length !== count) {\n\t\t\t// dispose the previous oscillators\n\t\t\tthis._forEach(osc => osc.dispose());\n\t\t\tthis._oscillators = [];\n\t\t\tfor (let i = 0; i < count; i++) {\n\t\t\t\tconst osc = new Oscillator({\n\t\t\t\t\tcontext: this.context,\n\t\t\t\t\tvolume: -6 - count * 1.1,\n\t\t\t\t\ttype: this._type as NonCustomOscillatorType,\n\t\t\t\t\tphase: this._phase + (i / count) * 360,\n\t\t\t\t\tpartialCount: this._partialCount,\n\t\t\t\t\tonstop: i === 0 ? () => this.onstop(this) : noOp,\n\t\t\t\t});\n\t\t\t\tif (this.type === \"custom\") {\n\t\t\t\t\tosc.partials = this._partials;\n\t\t\t\t}\n\t\t\t\tthis.frequency.connect(osc.frequency);\n\t\t\t\tthis.detune.connect(osc.detune);\n\t\t\t\tosc.connect(this.output);\n\t\t\t\tthis._oscillators[i] = osc;\n\t\t\t}\n\t\t\t// set the spread\n\t\t\tthis.spread = this._spread;\n\t\t\tif (this.state === \"started\") {\n\t\t\t\tthis._forEach(osc => osc.start());\n\t\t\t}\n\t\t}\n\t}\n\n\tget phase(): Degrees {\n\t\treturn this._phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._phase = phase;\n\t\tthis._forEach(osc => osc.phase = phase);\n\t}\n\n\tget baseType(): OscillatorType {\n\t\treturn this._oscillators[0].baseType;\n\t}\n\tset baseType(baseType: OscillatorType) {\n\t\tthis._forEach(osc => osc.baseType = baseType);\n\t\tthis._type = this._oscillators[0].type;\n\t}\n\n\tget partials(): number[] {\n\t\treturn this._oscillators[0].partials;\n\t}\n\tset partials(partials: number[]) {\n\t\tthis._partials = partials;\n\t\tthis._partialCount = this._partials.length;\n\t\tif (partials.length) {\n\t\t\tthis._type = \"custom\";\n\t\t\tthis._forEach(osc => osc.partials = partials);\n\t\t}\n\t}\n\n\tget partialCount(): number {\n\t\treturn this._oscillators[0].partialCount;\n\t}\n\tset partialCount(partialCount: number) {\n\t\tthis._partialCount = partialCount;\n\t\tthis._forEach(osc => osc.partialCount = partialCount);\n\t\tthis._type = this._oscillators[0].type;\n\t}\n\n\tasync asArray(length = 1024): Promise<Float32Array> {\n\t\treturn generateWaveform(this, length);\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\tthis._forEach(osc => osc.dispose());\n\t\treturn this;\n\t}\n}\n","import { Degrees, Frequency, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { generateWaveform, PWMOscillatorOptions, ToneOscillatorInterface } from \"./OscillatorInterface\";\nimport { PulseOscillator } from \"./PulseOscillator\";\n\nexport { PWMOscillatorOptions } from \"./OscillatorInterface\";\n\n/**\n * PWMOscillator modulates the width of a Tone.PulseOscillator\n * at the modulationFrequency. This has the effect of continuously\n * changing the timbre of the oscillator by altering the harmonics\n * generated.\n * @example\n * import { PWMOscillator } from \"tone\";\n * const pwm = new PWMOscillator(\"Ab3\", 0.3).toDestination().start();\n * @category Source\n */\nexport class PWMOscillator extends Source<PWMOscillatorOptions> implements ToneOscillatorInterface {\n\n\treadonly name: string = \"PWMOscillator\";\n\n\treadonly sourceType = \"pwm\";\n\n\t/**\n\t * the pulse oscillator\n\t */\n\tprivate _pulse: PulseOscillator;\n\t/**\n\t * the modulator\n\t */\n\tprivate _modulator: Oscillator;\n\n\t/**\n\t * Scale the oscillator so it doesn't go silent\n\t * at the extreme values.\n\t */\n\tprivate _scale: Multiply = new Multiply({\n\t\tcontext: this.context,\n\t\tvalue: 2,\n\t});\n\n\t/**\n\t * The frequency control.\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * The detune of the oscillator.\n\t */\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * The modulation rate of the oscillator.\n\t */\n\treadonly modulationFrequency: Signal<\"frequency\">;\n\n\t/**\n\t * @param {Frequency} frequency The starting frequency of the oscillator.\n\t * @param {Frequency} modulationFrequency The modulation frequency of the width of the pulse.\n\t */\n\tconstructor(frequency?: Frequency, modulationFrequency?: Frequency);\n\tconstructor(options?: Partial<PWMOscillatorOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(PWMOscillator.getDefaults(), arguments, [\"frequency\", \"modulationFrequency\"]));\n\t\tconst options = optionsFromArguments(PWMOscillator.getDefaults(), arguments, [\"frequency\", \"modulationFrequency\"]);\n\n\t\tthis._pulse = new PulseOscillator({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.modulationFrequency,\n\t\t});\n\t\t// change the pulse oscillator type\n\t\t// @ts-ignore\n\t\tthis._pulse._sawtooth.type = \"sine\";\n\n\t\tthis.modulationFrequency = this._pulse.frequency;\n\n\t\tthis._modulator = new Oscillator({\n\t\t\tcontext: this.context,\n\t\t\tdetune: options.detune,\n\t\t\tfrequency: options.frequency,\n\t\t\tonstop: () => this.onstop(this),\n\t\t\tphase: options.phase,\n\t\t});\n\n\t\tthis.frequency = this._modulator.frequency;\n\t\tthis.detune = this._modulator.detune;\n\n\t\t// connections\n\t\tthis._modulator.chain(this._scale, this._pulse.width);\n\t\tthis._pulse.connect(this.output);\n\t\treadOnly(this, [\"modulationFrequency\", \"frequency\", \"detune\"]);\n\t}\n\n\tstatic getDefaults(): PWMOscillatorOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tfrequency: 440,\n\t\t\tmodulationFrequency: 0.4,\n\t\t\tphase: 0,\n\t\t\ttype: \"pwm\" as \"pwm\",\n\t\t});\n\t}\n\t/**\n\t * start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._modulator.start(time);\n\t\tthis._pulse.start(time);\n\t}\n\n\t/**\n\t * stop the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._modulator.stop(time);\n\t\tthis._pulse.stop(time);\n\t}\n\n\t/**\n\t * restart the oscillator\n\t */\n\trestart(time?: Time): this {\n\t\tthis._modulator.restart(time);\n\t\tthis._pulse.restart(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The type of the oscillator. Always returns \"pwm\".\n\t */\n\tget type(): \"pwm\" {\n\t\treturn \"pwm\";\n\t}\n\n\t/**\n\t * The baseType of the oscillator. Always returns \"pwm\".\n\t */\n\tget baseType(): \"pwm\" {\n\t\treturn \"pwm\";\n\t}\n\n\t/**\n\t * The partials of the waveform. Cannot set partials for this waveform type\n\t */\n\tget partials(): number[] {\n\t\treturn [];\n\t}\n\n\t/**\n\t * No partials for this waveform type.\n\t */\n\tget partialCount(): number {\n\t\treturn 0;\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._modulator.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._modulator.phase = phase;\n\t}\n\n\tasync asArray(length = 1024): Promise<Float32Array> {\n\t\treturn generateWaveform(this, length);\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._pulse.dispose();\n\t\tthis._scale.dispose();\n\t\tthis._modulator.dispose();\n\t\treturn this;\n\t}\n}\n","import { Cents, Degrees, Frequency, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { isNumber, isString } from \"../../core/util/TypeCheck\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { AMOscillator } from \"./AMOscillator\";\nimport { FatOscillator } from \"./FatOscillator\";\nimport { FMOscillator } from \"./FMOscillator\";\nimport { Oscillator } from \"./Oscillator\";\nimport { generateWaveform,\n\tOmniOscillatorConstructorOptions, OmniOscillatorOptions,\n\tOmniOscillatorType, ToneOscillatorInterface, ToneOscillatorType } from \"./OscillatorInterface\";\nimport { PulseOscillator } from \"./PulseOscillator\";\nimport { PWMOscillator } from \"./PWMOscillator\";\n\nexport { OmniOscillatorOptions } from \"./OscillatorInterface\";\n\n/**\n * All of the oscillator types that OmniOscillator can take on\n */\ntype AnyOscillator = Oscillator | PWMOscillator | PulseOscillator | FatOscillator | AMOscillator | FMOscillator;\n\n/**\n * All of the Oscillator constructor types mapped to their name.\n */\ninterface OmniOscillatorSource {\n\t\"fm\": FMOscillator;\n\t\"am\": AMOscillator;\n\t\"pwm\": PWMOscillator;\n\t\"pulse\": PulseOscillator;\n\t\"oscillator\": Oscillator;\n\t\"fat\": FatOscillator;\n}\n\n/**\n * The available oscillator types.\n */\nexport type OmniOscSourceType = keyof OmniOscillatorSource;\n\n// Conditional Types\ntype IsAmOrFmOscillator<Osc, Ret> = Osc extends AMOscillator ? Ret : Osc extends FMOscillator ? Ret : undefined;\ntype IsFatOscillator<Osc, Ret> = Osc extends FatOscillator ? Ret : undefined;\ntype IsPWMOscillator<Osc, Ret> = Osc extends PWMOscillator ? Ret : undefined;\ntype IsPulseOscillator<Osc, Ret> = Osc extends PulseOscillator ? Ret : undefined;\ntype IsFMOscillator<Osc, Ret> = Osc extends FMOscillator ? Ret : undefined;\n\ntype AnyOscillatorConstructor = new (...args: any[]) => AnyOscillator;\n\nconst OmniOscillatorSourceMap: {\n\t[key in OmniOscSourceType]: AnyOscillatorConstructor\n} = {\n\tam: AMOscillator,\n\tfat: FatOscillator,\n\tfm: FMOscillator,\n\toscillator: Oscillator,\n\tpulse: PulseOscillator,\n\tpwm: PWMOscillator,\n};\n\n/**\n * OmniOscillator aggregates Tone.Oscillator, Tone.PulseOscillator,\n * Tone.PWMOscillator, Tone.FMOscillator, Tone.AMOscillator, and Tone.FatOscillator\n * into one class. The oscillator class can be changed by setting the `type`.\n * `omniOsc.type = \"pwm\"` will set it to the Tone.PWMOscillator. Prefixing\n * any of the basic types (\"sine\", \"square4\", etc.) with \"fm\", \"am\", or \"fat\"\n * will use the FMOscillator, AMOscillator or FatOscillator respectively.\n * For example: `omniOsc.type = \"fatsawtooth\"` will create set the oscillator\n * to a FatOscillator of type \"sawtooth\".\n * @example\n * import { OmniOscillator } from \"tone\";\n * const omniOsc = new OmniOscillator(\"C#4\", \"pwm\");\n * @category Source\n */\nexport class OmniOscillator<OscType extends AnyOscillator>\n\textends Source<OmniOscillatorConstructorOptions>\n\timplements Omit<ToneOscillatorInterface, \"type\"> {\n\n\treadonly name: string = \"OmniOscillator\";\n\n\treadonly frequency: Signal<\"frequency\">;\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * The oscillator that can switch types\n\t */\n\tprivate _oscillator!: AnyOscillator;\n\n\t/**\n\t * the type of the oscillator source\n\t */\n\tprivate _sourceType!: OmniOscSourceType;\n\n\t/**\n\t * @param frequency The initial frequency of the oscillator.\n\t * @param type The type of the oscillator.\n\t */\n\tconstructor(frequency?: Frequency, type?: OmniOscillatorType);\n\tconstructor(options?: Partial<OmniOscillatorConstructorOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(OmniOscillator.getDefaults(), arguments, [\"frequency\", \"type\"]));\n\t\tconst options = optionsFromArguments(OmniOscillator.getDefaults(), arguments, [\"frequency\", \"type\"]);\n\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t});\n\t\tthis.detune = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune,\n\t\t});\n\t\treadOnly(this, [\"frequency\", \"detune\"]);\n\n\t\t// set the options\n\t\tthis.set(options);\n\t}\n\n\tstatic getDefaults(): OmniOscillatorOptions {\n\t\treturn Object.assign(\n\t\t\tOscillator.getDefaults(),\n\t\t\tFMOscillator.getDefaults(),\n\t\t\tAMOscillator.getDefaults(),\n\t\t\tFatOscillator.getDefaults(),\n\t\t\tPulseOscillator.getDefaults(),\n\t\t\tPWMOscillator.getDefaults(),\n\t\t);\n\t}\n\n\t/**\n\t * start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\tthis._oscillator.start(time);\n\t}\n\n\t/**\n\t * start the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\tthis._oscillator.stop(time);\n\t}\n\n\trestart(time?: Time): this {\n\t\tthis._oscillator.restart(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The type of the oscillator. Can be any of the basic types: sine, square, triangle, sawtooth. Or\n\t * prefix the basic types with \"fm\", \"am\", or \"fat\" to use the FMOscillator, AMOscillator or FatOscillator\n\t * types. The oscillator could also be set to \"pwm\" or \"pulse\". All of the parameters of the\n\t * oscillator's class are accessible when the oscillator is set to that type, but throws an error\n\t * when it's not. \n\t * @example\n\t * import { OmniOscillator } from \"tone\";\n\t * const omniOsc = new OmniOscillator().toDestination().start();\n\t * omniOsc.type = \"pwm\";\n\t * // modulationFrequency is parameter which is available\n\t * // only when the type is \"pwm\".\n\t * omniOsc.modulationFrequency.value = 0.5;\n\t * @example\n\t * import { OmniOscillator } from \"tone\";\n\t * const omniOsc = new OmniOscillator().toDestination().start();\n\t * // an square wave frequency modulated by a sawtooth\n\t * omniOsc.type = \"fmsquare\";\n\t * omniOsc.modulationType = \"sawtooth\";\n\t */\n\tget type(): OmniOscillatorType {\n\t\tlet prefix = \"\";\n\t\tif ([\"am\", \"fm\", \"fat\"].some(p => this._sourceType === p)) {\n\t\t\tprefix = this._sourceType;\n\t\t}\n\t\treturn prefix + this._oscillator.type as OmniOscillatorType;\n\t}\n\tset type(type) {\n\t\tif (type.substr(0, 2) === \"fm\") {\n\t\t\tthis._createNewOscillator(\"fm\");\n\t\t\tthis._oscillator = this._oscillator as FMOscillator;\n\t\t\tthis._oscillator.type = type.substr(2) as ToneOscillatorType;\n\t\t} else if (type.substr(0, 2) === \"am\") {\n\t\t\tthis._createNewOscillator(\"am\");\n\t\t\tthis._oscillator = this._oscillator as AMOscillator;\n\t\t\tthis._oscillator.type = type.substr(2) as ToneOscillatorType;\n\t\t} else if (type.substr(0, 3) === \"fat\") {\n\t\t\tthis._createNewOscillator(\"fat\");\n\t\t\tthis._oscillator = this._oscillator as FatOscillator;\n\t\t\tthis._oscillator.type = type.substr(3) as ToneOscillatorType;\n\t\t} else if (type === \"pwm\") {\n\t\t\tthis._createNewOscillator(\"pwm\");\n\t\t\tthis._oscillator = this._oscillator as PWMOscillator;\n\t\t} else if (type === \"pulse\") {\n\t\t\tthis._createNewOscillator(\"pulse\");\n\t\t} else {\n\t\t\tthis._createNewOscillator(\"oscillator\");\n\t\t\tthis._oscillator = this._oscillator as Oscillator;\n\t\t\tthis._oscillator.type = (type as ToneOscillatorType);\n\t\t}\n\t}\n\n\t/**\n\t * The value is an empty array when the type is not \"custom\".\n\t * This is not available on \"pwm\" and \"pulse\" oscillator types.\n\t * See [[Oscillator.partials]]\n\t */\n\tget partials(): number[] {\n\t\treturn this._oscillator.partials;\n\t}\n\tset partials(partials) {\n\t\tif (!this._getOscType(this._oscillator, \"pulse\") && !this._getOscType(this._oscillator, \"pwm\")) {\n\t\t\tthis._oscillator.partials = partials;\n\t\t}\n\t}\n\n\tget partialCount(): number {\n\t\treturn this._oscillator.partialCount;\n\t}\n\tset partialCount(partialCount) {\n\t\tif (!this._getOscType(this._oscillator, \"pulse\") && !this._getOscType(this._oscillator, \"pwm\")) {\n\t\t\tthis._oscillator.partialCount = partialCount;\n\t\t}\n\t}\n\n\tset(props: Partial<OmniOscillatorConstructorOptions>): this {\n\t\t// make sure the type is set first\n\t\tif (Reflect.has(props, \"type\") && props.type) {\n\t\t\tthis.type = props.type;\n\t\t}\n\t\t// then set the rest\n\t\tsuper.set(props);\n\t\treturn this;\n\t}\n\n\t/**\n\t * connect the oscillator to the frequency and detune signals\n\t */\n\tprivate _createNewOscillator(oscType: OmniOscSourceType): void {\n\t\tif (oscType !== this._sourceType) {\n\t\t\tthis._sourceType = oscType;\n\t\t\tconst OscConstructor = OmniOscillatorSourceMap[oscType];\n\t\t\t// short delay to avoid clicks on the change\n\t\t\tconst now = this.now();\n\t\t\tif (this._oscillator) {\n\t\t\t\tconst oldOsc = this._oscillator;\n\t\t\t\toldOsc.stop(now);\n\t\t\t\t// dispose the old one\n\t\t\t\tthis.context.setTimeout(() => oldOsc.dispose(), this.blockTime);\n\t\t\t}\n\t\t\tthis._oscillator = new OscConstructor({\n\t\t\t\tcontext: this.context,\n\t\t\t});\n\t\t\tthis.frequency.connect(this._oscillator.frequency);\n\t\t\tthis.detune.connect(this._oscillator.detune);\n\t\t\tthis._oscillator.connect(this.output);\n\t\t\tthis._oscillator.onstop = () => this.onstop(this);\n\t\t\tif (this.state === \"started\") {\n\t\t\t\tthis._oscillator.start(now);\n\t\t\t}\n\t\t}\n\t}\n\n\tget phase(): Degrees {\n\t\treturn this._oscillator.phase;\n\t}\n\tset phase(phase) {\n\t\tthis._oscillator.phase = phase;\n\t}\n\n\t/**\n\t * The source type of the oscillator.\n\t * @example\n\t * import { OmniOscillator } from \"tone\";\n\t * const omniOsc = new OmniOscillator(440, \"fmsquare\");\n\t * console.log(omniOsc.sourceType); // 'fm'\n\t */\n\tget sourceType(): OmniOscSourceType {\n\t\treturn this._sourceType;\n\t}\n\tset sourceType(sType) {\n\t\t// the basetype defaults to sine\n\t\tlet baseType = \"sine\";\n\t\tif (this._oscillator.type !== \"pwm\" && this._oscillator.type !== \"pulse\") {\n\t\t\tbaseType = this._oscillator.type;\n\t\t}\n\n\t\t// set the type\n\t\tif (sType === \"fm\") {\n\t\t\tthis.type = \"fm\" + baseType as OmniOscillatorType;\n\t\t} else if (sType === \"am\") {\n\t\t\tthis.type = \"am\" + baseType as OmniOscillatorType;\n\t\t} else if (sType === \"fat\") {\n\t\t\tthis.type = \"fat\" + baseType as OmniOscillatorType;\n\t\t} else if (sType === \"oscillator\") {\n\t\t\tthis.type = baseType as OmniOscillatorType;\n\t\t} else if (sType === \"pulse\") {\n\t\t\tthis.type = \"pulse\";\n\t\t} else if (sType === \"pwm\") {\n\t\t\tthis.type = \"pwm\";\n\t\t}\n\t}\n\n\tprivate _getOscType<SourceType extends OmniOscSourceType>(\n\t\tosc: AnyOscillator,\n\t\tsourceType: SourceType,\n\t): osc is OmniOscillatorSource[SourceType] {\n\t\treturn osc instanceof OmniOscillatorSourceMap[sourceType];\n\t}\n\n\t/**\n\t * The base type of the oscillator. See [[Oscillator.baseType]]\n\t * @example\n\t * import { OmniOscillator } from \"tone\";\n\t * const omniOsc = new OmniOscillator(440, \"fmsquare4\");\n\t * omniOsc.sourceType; // 'fm'\n\t * omniOsc.baseType; // 'square'\n\t * omniOsc.partialCount; // 4\n\t */\n\tget baseType(): OscillatorType | \"pwm\" | \"pulse\" {\n\t\treturn this._oscillator.baseType;\n\t}\n\tset baseType(baseType) {\n\t\tif (!this._getOscType(this._oscillator, \"pulse\") &&\n\t\t\t!this._getOscType(this._oscillator, \"pwm\") &&\n\t\t\tbaseType !== \"pulse\" && baseType !== \"pwm\") {\n\t\t\tthis._oscillator.baseType = baseType;\n\t\t}\n\t}\n\n\t/**\n\t * The width of the oscillator when sourceType === \"pulse\".\n\t * See [[PWMOscillator.width]]\n\t * @example\n\t * import { OmniOscillator } from \"tone\";\n\t * const omniOsc = new OmniOscillator(440, \"pulse\");\n\t * // can access the width attribute only if type === \"pulse\"\n\t * omniOsc.width.value = 0.2;\n\t */\n\tget width(): IsPulseOscillator<OscType, Signal<\"audioRange\">> {\n\t\tif (this._getOscType(this._oscillator, \"pulse\")) {\n\t\t\treturn this._oscillator.width as IsPulseOscillator<OscType, Signal<\"audioRange\">> ;\n\t\t} else {\n\t\t\treturn undefined as IsPulseOscillator<OscType, Signal<\"audioRange\">> ;\n\t\t}\n\t}\n\n\t/**\n\t * The number of detuned oscillators when sourceType === \"fat\".\n\t * See [[FatOscillator.count]]\n\t */\n\tget count(): IsFatOscillator<OscType, number> {\n\t\tif (this._getOscType(this._oscillator, \"fat\")) {\n\t\t\treturn this._oscillator.count as IsFatOscillator<OscType, number>;\n\t\t} else {\n\t\t\treturn undefined as IsFatOscillator<OscType, number>;\n\t\t}\n\t}\n\tset count(count) {\n\t\tif (this._getOscType(this._oscillator, \"fat\") && isNumber(count)) {\n\t\t\tthis._oscillator.count = count;\n\t\t}\n\t}\n\n\t/**\n\t * The detune spread between the oscillators when sourceType === \"fat\".\n\t * See [[FatOscillator.count]]\n\t */\n\tget spread(): IsFatOscillator<OscType, Cents> {\n\t\tif (this._getOscType(this._oscillator, \"fat\")) {\n\t\t\treturn this._oscillator.spread as IsFatOscillator<OscType, Cents>;\n\t\t} else {\n\t\t\treturn undefined as IsFatOscillator<OscType, Cents>;\n\t\t}\n\t}\n\tset spread(spread) {\n\t\tif (this._getOscType(this._oscillator, \"fat\") && isNumber(spread)) {\n\t\t\tthis._oscillator.spread = spread;\n\t\t}\n\t}\n\n\t/**\n\t * The type of the modulator oscillator. Only if the oscillator is set to \"am\" or \"fm\" types. \n\t * See [[AMOscillator]] or [[FMOscillator]]\n\t */\n\tget modulationType(): IsAmOrFmOscillator<OscType, ToneOscillatorType> {\n\t\tif (this._getOscType(this._oscillator, \"fm\") || this._getOscType(this._oscillator, \"am\")) {\n\t\t\treturn this._oscillator.modulationType as IsAmOrFmOscillator<OscType, ToneOscillatorType>;\n\t\t} else {\n\t\t\treturn undefined as IsAmOrFmOscillator<OscType, ToneOscillatorType>;\n\t\t}\n\t}\n\tset modulationType(mType) {\n\t\tif ((this._getOscType(this._oscillator, \"fm\") || this._getOscType(this._oscillator, \"am\")) && isString(mType)) {\n\t\t\tthis._oscillator.modulationType = mType;\n\t\t}\n\t}\n\n\t/**\n\t * The modulation index when the sourceType === \"fm\"\n\t * See [[FMOscillator]].\n\t */\n\tget modulationIndex(): IsFMOscillator<OscType, Signal<\"positive\">> {\n\t\tif (this._getOscType(this._oscillator, \"fm\")) {\n\t\t\treturn this._oscillator.modulationIndex as IsFMOscillator<OscType, Signal<\"positive\">>;\n\t\t} else {\n\t\t\treturn undefined as IsFMOscillator<OscType, Signal<\"positive\">>;\n\t\t}\n\t}\n\n\t/**\n\t * Harmonicity is the frequency ratio between the carrier and the modulator oscillators.\n\t * See [[AMOscillator]] or [[FMOscillator]]\n\t */\n\tget harmonicity(): IsAmOrFmOscillator<OscType, Signal<\"positive\">> {\n\t\tif (this._getOscType(this._oscillator, \"fm\") || this._getOscType(this._oscillator, \"am\")) {\n\t\t\treturn this._oscillator.harmonicity as IsAmOrFmOscillator<OscType, Signal<\"positive\">>;\n\t\t} else {\n\t\t\treturn undefined as IsAmOrFmOscillator<OscType, Signal<\"positive\">>;\n\t\t}\n\t}\n\n\t/**\n\t * The modulationFrequency Signal of the oscillator when sourceType === \"pwm\"\n\t * see [[PWMOscillator]]\n\t * @min 0.1\n\t * @max 5\n\t */\n\tget modulationFrequency(): IsPWMOscillator<OscType, Signal<\"frequency\">> {\n\t\tif (this._getOscType(this._oscillator, \"pwm\")) {\n\t\t\treturn this._oscillator.modulationFrequency as IsPWMOscillator<OscType, Signal<\"frequency\">>;\n\t\t} else {\n\t\t\treturn undefined as IsPWMOscillator<OscType, Signal<\"frequency\">>;\n\t\t}\n\t}\n\n\tasync asArray(length = 1024): Promise<Float32Array> {\n\t\treturn generateWaveform(this, length);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.detune.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis._oscillator.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../core/context/Gain\";\nimport { connect, disconnect, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { SignalOperator } from \"./SignalOperator\";\n\n/**\n * Tone.Zero outputs 0's at audio-rate. The reason this has to be\n * it's own class is that many browsers optimize out Tone.Signal\n * with a value of 0 and will not process nodes further down the graph.\n * @category Signal\n */\nexport class Zero extends SignalOperator<ToneAudioNodeOptions> {\n\n\treadonly name: string = \"Zero\";\n\n\t/**\n\t * The gain node which connects the constant source to the output\n\t */\n\tprivate _gain = new Gain({ context: this.context });\n\n\t/**\n\t * Only outputs 0\n\t */\n\toutput = this._gain;\n\n\t/**\n\t * no input node\n\t */\n\tinput = undefined;\n\n\tconstructor(options?: Partial<ToneAudioNodeOptions>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Zero.getDefaults(), arguments)));\n\t\tconnect(this.context.getConstant(0), this._gain);\n\t}\n\n\t/**\n\t * clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tdisconnect(this.context.getConstant(0), this._gain);\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { Param } from \"../../core/context/Param\";\nimport { InputNode, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Degrees, Frequency, NormalRange, Time, UnitName } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { BasicPlaybackState } from \"../../core/util/StateTimeline\";\nimport { AudioToGain } from \"../../signal/AudioToGain\";\nimport { Scale } from \"../../signal/Scale\";\nimport { connectSignal, Signal } from \"../../signal/Signal\";\nimport { Zero } from \"../../signal/Zero\";\nimport { Oscillator, ToneOscillatorType } from \"./Oscillator\";\n\nexport interface LFOOptions extends ToneAudioNodeOptions {\n\ttype: ToneOscillatorType;\n\tmin: number;\n\tmax: number;\n\tphase: Degrees;\n\tfrequency: Frequency;\n\tamplitude: NormalRange;\n\tunits: UnitName;\n}\n\n/**\n * LFO stands for low frequency oscillator. LFO produces an output signal\n * which can be attached to an AudioParam or Tone.Signal\n * in order to modulate that parameter with an oscillator. The LFO can\n * also be synced to the transport to start/stop and change when the tempo changes.\n *\n * @example\n * import { Filter, LFO, Noise } from \"tone\";\n * const filter = new Filter().toDestination();\n * const noise = new Noise().connect(filter).start();\n * const lfo = new LFO(\"4n\", 400, 4000).start();\n * // have it control the filters cutoff\n * lfo.connect(filter.frequency);\n * @category Source\n */\nexport class LFO extends ToneAudioNode<LFOOptions> {\n\n\treadonly name: string = \"LFO\";\n\n\t/**\n\t * The oscillator.\n\t */\n\tprivate _oscillator: Oscillator;\n\n\t/**\n\t * The gain of the output\n\t */\n\tprivate _amplitudeGain: Gain<\"normalRange\">;\n\n\t/**\n\t * The amplitude of the LFO, which controls the output range between\n\t * the min and max output. For example if the min is -10 and the max\n\t * is 10, setting the amplitude to 0.5 would make the LFO modulate\n\t * between -5 and 5.\n\t */\n\treadonly amplitude: Param<\"normalRange\">;\n\n\t/**\n\t * The signal which is output when the LFO is stopped\n\t */\n\tprivate _stoppedSignal: Signal<\"audioRange\">;\n\n\t/**\n\t * Just outputs zeros. This is used so that scaled signal is not\n\t * optimized to silence.\n\t */\n\tprivate _zeros: Zero;\n\n\t/**\n\t * The value that the LFO outputs when it's stopped\n\t */\n\tprivate _stoppedValue = 0;\n\n\t/**\n\t * Convert the oscillators audio range to an output between 0-1 so it can be scaled\n\t */\n\tprivate _a2g: AudioToGain;\n\n\t/**\n\t * Scales the final output to the min and max value\n\t */\n\tprivate _scaler: Scale;\n\n\t/**\n\t * The output of the LFO\n\t */\n\treadonly output: OutputNode;\n\n\t/**\n\t * There is no input node\n\t */\n\treadonly input: undefined;\n\n\t/**\n\t * A private placeholder for the units\n\t */\n\tprivate _units: UnitName = \"number\";\n\n\t/**\n\t * If the input value is converted using the [[units]]\n\t */\n\tconvert = true;\n\n\t/**\n\t * The frequency value of the LFO\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * @param frequency The frequency of the oscillation.\n\t * Typically, LFOs will be in the frequency range of 0.1 to 10 hertz.\n\t * @param min The minimum output value of the LFO.\n\t * @param max The maximum value of the LFO.\n\t */\n\tconstructor(frequency?: Frequency, min?: number, max?: number);\n\tconstructor(options?: Partial<LFOOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(LFO.getDefaults(), arguments, [\"frequency\", \"min\", \"max\"]));\n\t\tconst options = optionsFromArguments(LFO.getDefaults(), arguments, [\"frequency\", \"min\", \"max\"]);\n\n\t\t// @ts-ignore\n\t\tthis._oscillator = new Oscillator({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.frequency,\n\t\t\ttype: options.type,\n\t\t});\n\t\tthis.frequency = this._oscillator.frequency;\n\n\t\tthis._amplitudeGain = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: options.amplitude,\n\t\t\tunits: \"normalRange\",\n\t\t});\n\t\tthis.amplitude = this._amplitudeGain.gain;\n\t\tthis._stoppedSignal = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"audioRange\",\n\t\t\tvalue: 0,\n\t\t});\n\t\tthis._zeros = new Zero({ context: this.context });\n\t\tthis._a2g = new AudioToGain({ context: this.context });\n\t\tthis._scaler = this.output = new Scale({\n\t\t\tcontext: this.context,\n\t\t\tmax: options.max,\n\t\t\tmin: options.min,\n\t\t});\n\n\t\tthis.min = options.min;\n\t\tthis.max = options.max;\n\t\tthis.units = options.units;\n\n\t\t// connect it up\n\t\tthis._oscillator.chain(this._a2g, this._amplitudeGain, this._scaler);\n\t\tthis._zeros.connect(this._a2g);\n\t\tthis._stoppedSignal.connect(this._a2g);\n\t\treadOnly(this, [\"amplitude\", \"frequency\"]);\n\t\tthis.phase = options.phase;\n\t}\n\n\tstatic getDefaults(): LFOOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tamplitude: 1,\n\t\t\tfrequency: \"4n\",\n\t\t\tmax: 1,\n\t\t\tmin: 0,\n\t\t\tphase: 0,\n\t\t\ttype: \"sine\" as ToneOscillatorType,\n\t\t\tunits: \"number\" as UnitName,\n\t\t});\n\t}\n\n\t/**\n\t * Start the LFO.\n\t * @param time The time the LFO will start\n\t */\n\tstart(time?: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis._stoppedSignal.setValueAtTime(0, time);\n\t\tthis._oscillator.start(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the LFO.\n\t * @param  time The time the LFO will stop\n\t */\n\tstop(time?: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis._stoppedSignal.setValueAtTime(this._stoppedValue, time);\n\t\tthis._oscillator.stop(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sync the start/stop/pause to the transport\n\t * and the frequency to the bpm of the transport\n\t * @example\n\t * import { LFO } from \"tone\";\n\t * const lfo = new LFO(\"8n\");\n\t * lfo.sync().start(0);\n\t * // the rate of the LFO will always be an eighth note, even as the tempo changes\n\t */\n\tsync(): this {\n\t\tthis._oscillator.sync();\n\t\tthis._oscillator.syncFrequency();\n\t\treturn this;\n\t}\n\n\t/**\n\t * unsync the LFO from transport control\n\t */\n\tunsync(): this {\n\t\tthis._oscillator.unsync();\n\t\tthis._oscillator.unsyncFrequency();\n\t\treturn this;\n\t}\n\n\t/**\n\t * The minimum output of the LFO.\n\t */\n\tget min(): number {\n\t\treturn this._toType(this._scaler.min);\n\t}\n\tset min(min) {\n\t\tmin = this._fromType(min);\n\t\tthis._scaler.min = min;\n\t}\n\n\t/**\n\t * The maximum output of the LFO.\n\t */\n\tget max(): number {\n\t\treturn this._toType(this._scaler.max);\n\t}\n\tset max(max) {\n\t\tmax = this._fromType(max);\n\t\tthis._scaler.max = max;\n\t}\n\n\t/**\n\t * The type of the oscillator: See [[Oscillator.type]]\n\t */\n\tget type(): ToneOscillatorType {\n\t\treturn this._oscillator.type;\n\t}\n\tset type(type) {\n\t\tthis._oscillator.type = type;\n\t\tthis._stoppedValue = this._oscillator.getInitialValue();\n\t\tthis._stoppedSignal.value = this._stoppedValue;\n\t}\n\n\t/**\n\t * The phase of the LFO.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._oscillator.phase;\n\t}\n\tset phase(phase) {\n\t\tthis._oscillator.phase = phase;\n\t\tthis._stoppedValue = this._oscillator.getInitialValue();\n\t\tthis._stoppedSignal.value = this._stoppedValue;\n\t}\n\n\t/**\n\t * The output units of the LFO.\n\t */\n\tget units(): UnitName {\n\t\treturn this._units;\n\t}\n\tset units(val) {\n\t\tconst currentMin = this.min;\n\t\tconst currentMax = this.max;\n\t\t// convert the min and the max\n\t\tthis._units = val;\n\t\tthis.min = currentMin;\n\t\tthis.max = currentMax;\n\t}\n\n\t/**\n\t * Returns the playback state of the source, either \"started\" or \"stopped\".\n\t */\n\tget state(): BasicPlaybackState {\n\t\treturn this._oscillator.state;\n\t}\n\n\t/**\n\t * @param node the destination to connect to\n\t * @param outputNum the optional output number\n\t * @param inputNum the input number\n\t */\n\tconnect(node: InputNode, outputNum?: number, inputNum?: number): this {\n\t\tif (node instanceof Param || node instanceof Signal) {\n\t\t\tthis.convert = node.convert;\n\t\t\tthis.units = node.units;\n\t\t}\n\t\tconnectSignal(this, node, outputNum, inputNum);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Private methods borrowed from Param\n\t */\n\t// @ts-ignore\n\tprivate _fromType = Param.prototype._fromType;\n\t// @ts-ignore\n\tprivate _toType = Param.prototype._toType;\n\t// @ts-ignore\n\tprivate _is = Param.prototype._is;\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._oscillator.dispose();\n\t\tthis._stoppedSignal.dispose();\n\t\tthis._zeros.dispose();\n\t\tthis._scaler.dispose();\n\t\tthis._a2g.dispose();\n\t\tthis._amplitudeGain.dispose();\n\t\tthis.amplitude.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { Positive, Time } from \"../../core/type/Units\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp } from \"../../core/util/Interface\";\nimport { isUndef } from \"../../core/util/TypeCheck\";\nimport { Source, SourceOptions } from \"../Source\";\nimport { ToneBufferSource } from \"./ToneBufferSource\";\nimport { assertRange } from \"../../core/util/Debug\";\n\nexport interface PlayerOptions extends SourceOptions {\n\tonload: () => void;\n\tplaybackRate: Positive;\n\tloop: boolean;\n\tautostart: boolean;\n\tloopStart: Time;\n\tloopEnd: Time;\n\treverse: boolean;\n\tfadeIn: Time;\n\tfadeOut: Time;\n\turl?: ToneAudioBuffer | string | AudioBuffer;\n}\n\n/**\n * Player is an audio file player with start, loop, and stop functions.\n * @example\n * import { Player } from \"tone\";\n * const player = new Player(\"https://tonejs.github.io/examples/audio/FWDL.mp3\").toDestination();\n * // play as soon as the buffer is loaded\n * player.autostart = true;\n * @category Source\n */\nexport class Player extends Source<PlayerOptions> {\n\n\treadonly name: string = \"Player\";\n\n\t/**\n\t * If the file should play as soon\n\t * as the buffer is loaded.\n\t */\n\tautostart: boolean;\n\n\t/**\n\t * The buffer\n\t */\n\tprivate _buffer: ToneAudioBuffer;\n\n\t/**\n\t * if the buffer should loop once it's over\n\t */\n\tprivate _loop: boolean;\n\n\t/**\n\t * if 'loop' is true, the loop will start at this position\n\t */\n\tprivate _loopStart: Time;\n\n\t/**\n\t * if 'loop' is true, the loop will end at this position\n\t */\n\tprivate _loopEnd: Time;\n\n\t/**\n\t * the playback rate\n\t */\n\tprivate _playbackRate: Positive;\n\n\t/**\n\t * All of the active buffer source nodes\n\t */\n\tprivate _activeSources: Set<ToneBufferSource> = new Set();\n\n\t/**\n\t * The fadeIn time of the amplitude envelope.\n\t */\n\tfadeIn: Time;\n\n\t/**\n\t * The fadeOut time of the amplitude envelope.\n\t */\n\tfadeOut: Time;\n\n\t/**\n\t * @param url Either the AudioBuffer or the url from which to load the AudioBuffer\n\t * @param onload The function to invoke when the buffer is loaded.\n\t */\n\tconstructor(url?: string | AudioBuffer | ToneAudioBuffer, onload?: () => void);\n\tconstructor(options?: Partial<PlayerOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Player.getDefaults(), arguments, [\"url\", \"onload\"]));\n\t\tconst options = optionsFromArguments(Player.getDefaults(), arguments, [\"url\", \"onload\"]);\n\n\t\tthis._buffer = new ToneAudioBuffer({\n\t\t\tonload: this._onload.bind(this, options.onload),\n\t\t\treverse: options.reverse,\n\t\t\turl: options.url,\n\t\t});\n\t\tthis.autostart = options.autostart;\n\t\tthis._loop = options.loop;\n\t\tthis._loopStart = options.loopStart;\n\t\tthis._loopEnd = options.loopEnd;\n\t\tthis._playbackRate = options.playbackRate;\n\t\tthis.fadeIn = options.fadeIn;\n\t\tthis.fadeOut = options.fadeOut;\n\t}\n\n\tstatic getDefaults(): PlayerOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tautostart: false,\n\t\t\tfadeIn: 0,\n\t\t\tfadeOut: 0,\n\t\t\tloop: false,\n\t\t\tloopEnd: 0,\n\t\t\tloopStart: 0,\n\t\t\tonload: noOp,\n\t\t\tplaybackRate: 1,\n\t\t\treverse: false,\n\t\t});\n\t}\n\n\t/**\n\t * Load the audio file as an audio buffer.\n\t * Decodes the audio asynchronously and invokes\n\t * the callback once the audio buffer loads.\n\t * Note: this does not need to be called if a url\n\t * was passed in to the constructor. Only use this\n\t * if you want to manually load a new url.\n\t * @param url The url of the buffer to load. Filetype support depends on the browser.\n\t */\n\tasync load(url: string): Promise<this> {\n\t\tawait this._buffer.load(url);\n\t\tthis._onload();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Internal callback when the buffer is loaded.\n\t */\n\tprivate _onload(callback: () => void = noOp): void {\n\t\tcallback();\n\t\tif (this.autostart) {\n\t\t\tthis.start();\n\t\t}\n\t}\n\n\t/**\n\t * Internal callback when the buffer is done playing.\n\t */\n\tprivate _onSourceEnd(source: ToneBufferSource): void {\n\t\t// invoke the onstop function\n\t\tthis.onstop(this);\n\n\t\t// delete the source from the active sources\n\t\tthis._activeSources.delete(source);\n\t\tif (this._activeSources.size === 0 && !this._synced) {\n\t\t\tthis._state.setStateAtTime(\"stopped\", this.now());\n\t\t}\n\t}\n\n\t/**\n\t * Play the buffer at the given startTime. Optionally add an offset\n\t * and/or duration which will play the buffer from a position\n\t * within the buffer for the given duration.\n\t *\n\t * @param  time When the player should start.\n\t * @param  offset The offset from the beginning of the samplem to start at.\n\t * @param  duration How long the sample should play. If no duration is given, it will default to the full length of the sample (minus any offset)\n\t */\n\tstart(time?: Time, offset?: Time, duration?: Time): this {\n\t\tsuper.start(time, offset, duration);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Internal start method\n\t */\n\tprotected _start(startTime?: Time, offset?: Time, duration?: Time): void {\n\t\t// if it's a loop the default offset is the loopstart point\n\t\tif (this._loop) {\n\t\t\toffset = defaultArg(offset, this._loopStart);\n\t\t} else {\n\t\t\t// otherwise the default offset is 0\n\t\t\toffset = defaultArg(offset, 0);\n\t\t}\n\n\t\t// compute the values in seconds\n\t\tlet computedOffset = this.toSeconds(offset);\n\n\t\t// if it's synced, it should factor in the playback rate for computing the offset\n\t\tif (this._synced) {\n\t\t\tcomputedOffset *= this._playbackRate;\n\t\t}\n\n\t\t// compute the duration which is either the passed in duration of the buffer.duration - offset\n\t\tconst origDuration = duration;\n\t\tduration = defaultArg(duration, Math.max(this._buffer.duration - computedOffset, 0));\n\t\tlet computedDuration = this.toSeconds(duration);\n\n\t\t// scale it by the playback rate\n\t\tcomputedDuration = computedDuration / this._playbackRate;\n\n\t\t// get the start time\n\t\tstartTime = this.toSeconds(startTime);\n\n\t\t// make the source\n\t\tconst source = new ToneBufferSource({\n\t\t\tbuffer: this._buffer,\n\t\t\tcontext: this.context,\n\t\t\tfadeIn: this.fadeIn,\n\t\t\tfadeOut: this.fadeOut,\n\t\t\tloop: this._loop,\n\t\t\tloopEnd: this._loopEnd,\n\t\t\tloopStart: this._loopStart,\n\t\t\tonended: this._onSourceEnd.bind(this),\n\t\t\tplaybackRate: this._playbackRate,\n\t\t}).connect(this.output);\n\n\t\t// set the looping properties\n\t\tif (!this._loop && !this._synced) {\n\t\t\t// cancel the previous stop\n\t\t\tthis._state.cancel(startTime + computedDuration);\n\t\t\t// if it's not looping, set the state change at the end of the sample\n\t\t\tthis._state.setStateAtTime(\"stopped\", startTime + computedDuration, {\n\t\t\t\timplicitEnd: true,\n\t\t\t});\n\t\t}\n\n\t\t// add it to the array of active sources\n\t\tthis._activeSources.add(source);\n\n\t\t// start it\n\t\tif (this._loop && isUndef(origDuration)) {\n\t\t\tsource.start(startTime, computedOffset);\n\t\t} else {\n\t\t\t// subtract the fade out time\n\t\t\tsource.start(startTime, computedOffset, computedDuration - this.toSeconds(this.fadeOut));\n\t\t}\n\t}\n\n\t/**\n\t * Stop playback.\n\t */\n\tprotected _stop(time?: Time): void {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._activeSources.forEach(source => source.stop(computedTime));\n\t}\n\n\t/**\n\t * Stop and then restart the player from the beginning (or offset)\n\t * @param  time When the player should start.\n\t * @param  offset The offset from the beginning of the sample to start at.\n\t * @param  duration How long the sample should play. If no duration is given, it will default to the full length of the sample (minus any offset)\n\t */\n\trestart(time?: Time, offset?: Time, duration?: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(time) === \"started\") {\n\t\t\tthis._stop(time);\n\t\t\tthis._start(time, offset, duration);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Seek to a specific time in the player's buffer. If the\n\t * source is no longer playing at that time, it will stop.\n\t * If you seek to a time that\n\t * @param offset The time to seek to.\n\t * @param when The time for the seek event to occur.\n\t * @example\n\t * import { Player } from \"tone\";\n\t * const player = new Player(\"https://tonejs.github.io/examples/audio/FWDL.mp3\", () => {\n\t * \tplayer.start();\n\t * \t// seek to the offset in 1 second from now\n\t * \tplayer.seek(0.4, \"+1\");\n\t * }).toDestination();\n\t */\n\tseek(offset: Time, when?: Time): this {\n\t\tconst computedTime = this.toSeconds(when);\n\t\tif (this._state.getValueAtTime(computedTime) === \"started\") {\n\t\t\tconst computedOffset = this.toSeconds(offset);\n\t\t\t// if it's currently playing, stop it\n\t\t\tthis._stop(computedTime);\n\t\t\t// restart it at the given time\n\t\t\tthis._start(computedTime, computedOffset);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set the loop start and end. Will only loop if loop is set to true.\n\t * @param loopStart The loop end time\n\t * @param loopEnd The loop end time\n\t * @example\n\t * import { Player } from \"tone\";\n\t * const player = new Player(\"https://tonejs.github.io/examples/audio/FWDL.mp3\").toDestination();\n\t * // loop between the given points\n\t * player.setLoopPoints(0.2, 0.3);\n\t * player.loop = true;\n\t * player.autostart = true;\n\t */\n\tsetLoopPoints(loopStart: Time, loopEnd: Time): this {\n\t\tthis.loopStart = loopStart;\n\t\tthis.loopEnd = loopEnd;\n\t\treturn this;\n\t}\n\n\t/**\n\t * If loop is true, the loop will start at this position.\n\t */\n\tget loopStart(): Time {\n\t\treturn this._loopStart;\n\t}\n\tset loopStart(loopStart) {\n\t\tthis._loopStart = loopStart;\n\t\tif (this.buffer.loaded) {\n\t\t\tassertRange(this.toSeconds(loopStart), 0, this.buffer.duration);\n\t\t}\n\t\t// get the current source\n\t\tthis._activeSources.forEach(source => {\n\t\t\tsource.loopStart = loopStart;\n\t\t});\n\t}\n\n\t/**\n\t * If loop is true, the loop will end at this position.\n\t */\n\tget loopEnd(): Time {\n\t\treturn this._loopEnd;\n\t}\n\tset loopEnd(loopEnd) {\n\t\tthis._loopEnd = loopEnd;\n\t\tif (this.buffer.loaded) {\n\t\t\tassertRange(this.toSeconds(loopEnd), 0, this.buffer.duration);\n\t\t}\n\t\t// get the current source\n\t\tthis._activeSources.forEach(source => {\n\t\t\tsource.loopEnd = loopEnd;\n\t\t});\n\t}\n\n\t/**\n\t * The audio buffer belonging to the player.\n\t */\n\tget buffer(): ToneAudioBuffer {\n\t\treturn this._buffer;\n\t}\n\tset buffer(buffer) {\n\t\tthis._buffer.set(buffer);\n\t}\n\n\t/**\n\t * If the buffer should loop once it's over.\n\t */\n\tget loop(): boolean {\n\t\treturn this._loop;\n\t}\n\tset loop(loop) {\n\t\t// if no change, do nothing\n\t\tif (this._loop === loop) {\n\t\t\treturn;\n\t\t}\n\t\tthis._loop = loop;\n\t\t// set the loop of all of the sources\n\t\tthis._activeSources.forEach(source => {\n\t\t\tsource.loop = loop;\n\t\t});\n\t\tif (loop) {\n\t\t\t// remove the next stopEvent\n\t\t\tconst stopEvent = this._state.getNextState(\"stopped\", this.now());\n\t\t\tif (stopEvent) {\n\t\t\t\tthis._state.cancel(stopEvent.time);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * The playback speed. 1 is normal speed. This is not a signal because\n\t * Safari and iOS currently don't support playbackRate as a signal.\n\t */\n\tget playbackRate(): Positive {\n\t\treturn this._playbackRate;\n\t}\n\tset playbackRate(rate) {\n\t\tthis._playbackRate = rate;\n\t\tconst now = this.now();\n\n\t\t// cancel the stop event since it's at a different time now\n\t\tconst stopEvent = this._state.getNextState(\"stopped\", now);\n\t\tif (stopEvent && stopEvent.implicitEnd) {\n\t\t\tthis._state.cancel(stopEvent.time);\n\t\t\tthis._activeSources.forEach(source => source.cancelStop());\n\t\t}\n\n\t\t// set all the sources\n\t\tthis._activeSources.forEach(source => {\n\t\t\tsource.playbackRate.setValueAtTime(rate, now);\n\t\t});\n\t}\n\n\t/**\n\t * The direction the buffer should play in\n\t */\n\tget reverse(): boolean {\n\t\treturn this._buffer.reverse;\n\t}\n\tset reverse(rev) {\n\t\tthis._buffer.reverse = rev;\n\t}\n\n\t/**\n\t * If the buffer is loaded\n\t */\n\tget loaded(): boolean {\n\t\treturn this._buffer.loaded;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\t// disconnect all of the players\n\t\tthis._activeSources.forEach(source => source.dispose());\n\t\tthis._activeSources.clear();\n\t\tthis._buffer.dispose();\n\t\treturn this;\n\t}\n}\n","import { Volume } from \"../../component/channel/Volume\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { ToneAudioBuffers, ToneAudioBuffersUrlMap } from \"../../core/context/ToneAudioBuffers\";\nimport { OutputNode, ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { Decibels, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp, readOnly } from \"../../core/util/Interface\";\nimport { BasicPlaybackState } from \"../../core/util/StateTimeline\";\nimport { Source, SourceOptions } from \"../Source\";\nimport { Player } from \"./Player\";\n\nexport interface PlayersOptions extends SourceOptions {\n\turls: ToneAudioBuffersUrlMap;\n\tvolume: Decibels;\n\tmute: boolean;\n\tonload: () => void;\n\tbaseUrl: string;\n\tfadeIn: Time;\n\tfadeOut: Time;\n}\n\n/**\n * Players combines multiple [[Player]] objects.\n * @category Source\n */\nexport class Players extends ToneAudioNode<PlayersOptions> {\n\n\treadonly name: string = \"Players\";\n\n\t/**\n\t * The output volume node\n\t */\n\tprivate _volume: Volume;\n\n\t/**\n\t * The volume of the output in decibels.\n\t */\n\treadonly volume: Param<\"decibels\">;\n\n\t/**\n\t * The combined output of all of the players\n\t */\n\treadonly output: OutputNode;\n\n\t/**\n\t * Players has no input.\n\t */\n\treadonly input = undefined;\n\n\t/**\n\t * The container of all of the players\n\t */\n\tprivate _players: Map<string, Player> = new Map();\n\n\t/**\n\t * The container of all the buffers\n\t */\n\tprivate _buffers: ToneAudioBuffers;\n\n\t/**\n\t * private holder of the fadeIn time\n\t */\n\tprivate _fadeIn: Time;\n\n\t/**\n\t * private holder of the fadeOut time\n\t */\n\tprivate _fadeOut: Time;\n\n\t/**\n\t * @param urls An object mapping a name to a url.\n\t * @param onload The function to invoke when all buffers are loaded.\n\t */\n\tconstructor(urls?: ToneAudioBuffersUrlMap, onload?: () => void);\n\t/**\n\t * @param urls An object mapping a name to a url.\n\t * @param options The remaining options associated with the players\n\t */\n\tconstructor(urls?: ToneAudioBuffersUrlMap, options?: Partial<Omit<PlayersOptions, \"urls\">>);\n\tconstructor(options?: Partial<PlayersOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Players.getDefaults(), arguments, [\"urls\", \"onload\"], \"urls\"));\n\t\tconst options = optionsFromArguments(Players.getDefaults(), arguments, [\"urls\", \"onload\"], \"urls\");\n\n\t\t/**\n\t\t * The output volume node\n\t\t */\n\t\tthis._volume = this.output = new Volume({\n\t\t\tcontext: this.context,\n\t\t\tvolume: options.volume,\n\t\t});\n\n\t\tthis.volume = this._volume.volume;\n\t\treadOnly(this, \"volume\");\n\t\tthis._buffers = new ToneAudioBuffers(options.urls, options.onload, options.baseUrl);\n\t\t// mute initially\n\t\tthis.mute = options.mute;\n\t\tthis._fadeIn = options.fadeIn;\n\t\tthis._fadeOut = options.fadeOut;\n\t}\n\n\tstatic getDefaults(): PlayersOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tbaseUrl: \"\",\n\t\t\tfadeIn: 0,\n\t\t\tfadeOut: 0,\n\t\t\tmute: false,\n\t\t\tonload: noOp,\n\t\t\turls: {},\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Mute the output.\n\t */\n\tget mute(): boolean {\n\t\treturn this._volume.mute;\n\t}\n\tset mute(mute) {\n\t\tthis._volume.mute = mute;\n\t}\n\n\t/**\n\t * The fadeIn time of the envelope applied to the source.\n\t */\n\tget fadeIn(): Time {\n\t\treturn this._fadeIn;\n\t}\n\tset fadeIn(fadeIn) {\n\t\tthis._fadeIn = fadeIn;\n\t\tthis._players.forEach(player => {\n\t\t\tplayer.fadeIn = fadeIn;\n\t\t});\n\t}\n\n\t/**\n\t * The fadeOut time of the each of the sources.\n\t */\n\tget fadeOut(): Time {\n\t\treturn this._fadeOut;\n\t}\n\tset fadeOut(fadeOut) {\n\t\tthis._fadeOut = fadeOut;\n\t\tthis._players.forEach(player => {\n\t\t\tplayer.fadeOut = fadeOut;\n\t\t});\n\t}\n\n\t/**\n\t * The state of the players object. Returns \"started\" if any of the players are playing.\n\t */\n\tget state(): BasicPlaybackState {\n\t\tconst playing = Array.from(this._players).some(([_, player]) => player.state === \"started\");\n\t\treturn playing ? \"started\" : \"stopped\";\n\t}\n\n\t/**\n\t * True if the buffers object has a buffer by that name.\n\t * @param name  The key or index of the buffer.\n\t */\n\thas(name: string): boolean {\n\t\treturn this._buffers.has(name);\n\t}\n\n\t/**\n\t * Get a player by name.\n\t * @param  name  The players name as defined in the constructor object or `add` method.\n\t */\n\tplayer(name: string): Player {\n\t\tthis.assert(this.has(name), `No Player with the name ${name} exists on this object`);\n\t\tif (!this._players.has(name)) {\n\t\t\tconst player = new Player({\n\t\t\t\tcontext: this.context,\n\t\t\t\tfadeIn: this._fadeIn,\n\t\t\t\tfadeOut: this._fadeOut,\n\t\t\t\turl: this._buffers.get(name),\n\t\t\t}).connect(this.output);\n\t\t\tthis._players.set(name, player);\n\t\t}\n\t\treturn this._players.get(name) as Player;\n\t}\n\n\t/**\n\t * If all the buffers are loaded or not\n\t */\n\tget loaded(): boolean {\n\t\treturn this._buffers.loaded;\n\t}\n\n\t/**\n\t * Add a player by name and url to the Players\n\t * @param  name A unique name to give the player\n\t * @param  url  Either the url of the bufer or a buffer which will be added with the given name.\n\t * @param callback  The callback to invoke when the url is loaded.\n\t */\n\tadd(name: string, url: string | ToneAudioBuffer | AudioBuffer, callback?: () => void): this {\n\t\tthis.assert(!this._buffers.has(name), \"A buffer with that name already exists on this object\");\n\t\tthis._buffers.add(name, url, callback);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop all of the players at the given time\n\t * @param time The time to stop all of the players.\n\t */\n\tstopAll(time?: Time): this {\n\t\tthis._players.forEach(player => player.stop(time));\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._volume.dispose();\n\t\tthis.volume.dispose();\n\t\tthis._players.forEach(player => player.dispose());\n\t\tthis._buffers.dispose();\n\t\treturn this;\n\t}\n}\n","import { Source, SourceOptions } from \"../Source\";\nimport { noOp } from \"../../core/util/Interface\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Clock } from \"../../core/clock/Clock\";\nimport { Cents, Positive, Seconds, Time } from \"../../core/type/Units\";\nimport { ToneBufferSource } from \"./ToneBufferSource\";\nimport { intervalToFrequencyRatio } from \"../../core/type/Conversions\";\nimport { assertRange } from \"../../core/util/Debug\";\n\ninterface GrainPlayerOptions extends SourceOptions {\n\tonload: () => void;\n\treverse: boolean;\n\turl?: ToneAudioBuffer | string | AudioBuffer;\n\toverlap: Seconds;\n\tgrainSize: Seconds;\n\tplaybackRate: Positive;\n\tdetune: Cents;\n\tloop: boolean;\n\tloopStart: Time;\n\tloopEnd: Time;\n}\n\n/**\n * GrainPlayer implements [granular synthesis](https://en.wikipedia.org/wiki/Granular_synthesis).\n * Granular Synthesis enables you to adjust pitch and playback rate independently. The grainSize is the\n * amount of time each small chunk of audio is played for and the overlap is the\n * amount of crossfading transition time between successive grains.\n * @category Source\n */\nexport class GrainPlayer extends Source<GrainPlayerOptions> {\n\n\treadonly name: string = \"GrainPlayer\";\n\n\t/**\n\t * The audio buffer belonging to the player.\n\t */\n\tbuffer: ToneAudioBuffer;\n\n\t/**\n\t * Create a repeating tick to schedule the grains.\n\t */\n\tprivate _clock: Clock;\n\n\t/**\n\t * Internal loopStart value\n\t */\n\tprivate _loopStart = 0;\n\n\t/**\n\t * Internal loopStart value\n\t */\n\tprivate _loopEnd = 0;\n\n\t/**\n\t * All of the currently playing BufferSources\n\t */\n\tprivate _activeSources: ToneBufferSource[] = [];\n\n\t/**\n\t * Internal reference to the playback rate\n\t */\n\tprivate _playbackRate: Positive;\n\n\t/**\n\t * Internal grain size reference;\n\t */\n\tprivate _grainSize: Seconds; \n\n\t/**\n\t * Internal overlap reference;\n\t */\n\tprivate _overlap: Seconds; \n\n\t/**\n\t * Adjust the pitch independently of the playbackRate.\n\t */\n\tdetune: Cents;\n\n\t/**\n\t * If the buffer should loop back to the loopStart when completed\n\t */\n\tloop: boolean;\n\t\t\n\t/**\n\t * @param url Either the AudioBuffer or the url from which to load the AudioBuffer\n\t * @param onload The function to invoke when the buffer is loaded.\n\t */\n\tconstructor(url?: string | AudioBuffer | ToneAudioBuffer, onload?: () => void);\n\tconstructor(options?: Partial<GrainPlayerOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(GrainPlayer.getDefaults(), arguments, [\"url\", \"onload\"]));\n\t\tconst options = optionsFromArguments(GrainPlayer.getDefaults(), arguments, [\"url\", \"onload\"]);\n\n\t\tthis.buffer = new ToneAudioBuffer({\n\t\t\tonload: options.onload,\n\t\t\treverse: options.reverse,\n\t\t\turl: options.url,\n\t\t});\n\t\tthis._clock = new Clock({\n\t\t\tcontext: this.context,\n\t\t\tcallback: this._tick.bind(this), \n\t\t\tfrequency: 1 / options.grainSize\n\t\t});\n\t\tthis._playbackRate = options.playbackRate;\n\t\tthis._grainSize = options.grainSize;\n\t\tthis._overlap = options.overlap;\n\t\tthis.detune = options.detune;\n\n\t\t// setup\n\t\tthis.overlap = options.overlap;\n\t\tthis.loop = options.loop;\n\t\tthis.playbackRate = options.playbackRate;\n\t\tthis.grainSize = options.grainSize;\n\t\tthis.loopStart = options.loopStart;\n\t\tthis.loopEnd = options.loopEnd;\n\t\tthis.reverse = options.reverse;\n\t\tthis._clock.on(\"stop\", this._onstop.bind(this));\n\t}\n\n\tstatic getDefaults(): GrainPlayerOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tonload: noOp,\n\t\t\toverlap: 0.1,\n\t\t\tgrainSize: 0.2,\n\t\t\tplaybackRate: 1,\n\t\t\tdetune: 0,\n\t\t\tloop: false,\n\t\t\tloopStart: 0,\n\t\t\tloopEnd: 0,\n\t\t\treverse: false\n\t\t});\n\t}\n\n\t/**\n\t * Internal start method\n\t */\n\tprotected _start(time?: Time, offset?: Time, duration?: Time): void {\n\t\toffset = defaultArg(offset, 0);\n\t\toffset = this.toSeconds(offset);\n\t\ttime = this.toSeconds(time);\n\n\t\tconst grainSize = 1 / this._clock.frequency.getValueAtTime(time);\n\t\tthis._clock.start(time, offset / grainSize);\n\n\t\tif (duration) {\n\t\t\tthis.stop(time + this.toSeconds(duration));\n\t\t}\n\t}\n\n\t/**\n\t * Stop and then restart the player from the beginning (or offset)\n\t * @param  time When the player should start.\n\t * @param  offset The offset from the beginning of the sample to start at.\n\t * @param  duration How long the sample should play. If no duration is given, \n\t * \t\t\t\t\tit will default to the full length of the sample (minus any offset)\n\t */\n\trestart(time?: Time, offset?: Time, duration?: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(time) === \"started\") {\n\t\t\tthis._stop(time);\n\t\t\tthis._start(time, offset, duration);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Internal stop method\n\t */\n\tprotected _stop(time?: Time): void {\n\t\tthis._clock.stop(time);\n\t}\n\n\t/**\n\t * Invoked when the clock is stopped\n\t */\n\tprivate _onstop(time: Seconds): void {\n\t\t// stop the players\n\t\tthis._activeSources.forEach((source) => {\n\t\t\tsource.fadeOut = 0;\n\t\t\tsource.stop(time);\n\t\t});\n\t\tthis.onstop(this);\n\t}\n\n\t/**\n\t * Invoked on each clock tick. scheduled a new grain at this time.\n\t */\n\tprivate _tick(time: Seconds): void {\n\t\t// check if it should stop looping\n\t\tconst ticks = this._clock.getTicksAtTime(time);\n\t\tconst grainSize = 1 / this._clock.frequency.getValueAtTime(time);\n\t\tconst offset = ticks * grainSize;\n\t\tthis.log(\"offset\", offset);\n\n\t\tif (!this.loop && offset > this.buffer.duration) {\n\t\t\tthis.stop(time);\n\t\t\treturn;\n\t\t}\n\n\t\t// at the beginning of the file, the fade in should be 0\n\t\tconst fadeIn = offset < this._overlap ? 0 : this._overlap;\n\n\t\t// create a buffer source\n\t\tconst source = new ToneBufferSource({\n\t\t\tcontext: this.context,\n\t\t\tbuffer: this.buffer,\n\t\t\tfadeIn: fadeIn,\n\t\t\tfadeOut: this._overlap,\n\t\t\tloop: this.loop,\n\t\t\tloopStart: this._loopStart,\n\t\t\tloopEnd: this._loopEnd,\n\t\t\t// compute the playbackRate based on the detune\n\t\t\tplaybackRate: intervalToFrequencyRatio(this.detune / 100)\n\t\t}).connect(this.output);\n\n\t\tsource.start(time, this._grainSize * ticks);\n\t\tsource.stop(time + this._grainSize / this.playbackRate);\n\n\t\t// add it to the active sources\n\t\tthis._activeSources.push(source);\n\t\t// remove it when it's done\n\t\tsource.onended = () => {\n\t\t\tconst index = this._activeSources.indexOf(source);\n\t\t\tif (index !== -1) {\n\t\t\t\tthis._activeSources.splice(index, 1);\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * The playback rate of the sample\n\t */\n\tget playbackRate(): Positive {\n\t\treturn this._playbackRate;\n\t}\n\tset playbackRate(rate) {\n\t\tassertRange(rate, 0.001);\n\t\tthis._playbackRate = rate;\n\t\tthis.grainSize = this._grainSize;\n\t}\n\n\t/**\n\t * The loop start time.\n\t */\n\tget loopStart(): Time {\n\t\treturn this._loopStart;\n\t}\n\tset loopStart(time) {\n\t\tthis._loopStart = this.toSeconds(time);\n\t}\n\n\t/**\n\t * The loop end time.\n\t */\n\tget loopEnd(): Time {\n\t\treturn this._loopEnd;\n\t}\n\tset loopEnd(time) {\n\t\tthis._loopEnd = this.toSeconds(time);\n\t}\n\n\t/**\n\t * The direction the buffer should play in\n\t */\n\tget reverse() {\n\t\treturn this.buffer.reverse;\n\t}\n\n\tset reverse(rev) {\n\t\tthis.buffer.reverse = rev;\n\t}\n\n\t/**\n\t * The size of each chunk of audio that the\n\t * buffer is chopped into and played back at.\n\t */\n\tget grainSize(): Time {\n\t\treturn this._grainSize;\n\t}\n\tset grainSize(size) {\n\t\tthis._grainSize = this.toSeconds(size);\n\t\tthis._clock.frequency.setValueAtTime(this._playbackRate / this._grainSize, this.now());\n\t}\n\n\t/**\n\t * The duration of the cross-fade between successive grains.\n\t */\n\tget overlap(): Time {\n\t\treturn this._overlap;\n\t}\n\tset overlap(time) {\n\t\tthis._overlap = this.toSeconds(time);\n\t}\n\n\t/**\n\t * If all the buffer is loaded\n\t */\n\tget loaded(): boolean {\n\t\treturn this.buffer.loaded;\n\t}\n\n\tdispose(): this{\n\t\tsuper.dispose();\n\t\tthis.buffer.dispose();\n\t\tthis._clock.dispose();\n\t\tthis._activeSources.forEach((source) => source.dispose());\n\t\treturn this;\n\t}\n}\n","import { Scale, ScaleOptions } from \"./Scale\";\nimport { Positive } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Pow } from \"./Pow\";\n\nexport interface ScaleExpOptions extends ScaleOptions {\n\texponent: Positive;\n}\n\n/**\n * Performs an exponential scaling on an input signal.\n * Scales a NormalRange value [0,1] exponentially\n * to the output range of outputMin to outputMax.\n * @example\n * import { ScaleExp, Signal } from \"tone\";\n * const scaleExp = new ScaleExp(0, 100, 2);\n * const signal = new Signal(0.5).connect(scaleExp);\n */\nexport class ScaleExp extends Scale<ScaleExpOptions> {\n\n\treadonly name: string = \"ScaleExp\";\n\n\t/**\n\t * The exponent scaler\n\t */\n\tprivate _exp: Pow;\n\n\t/**\n\t * @param min The output value when the input is 0.\n\t * @param max The output value when the input is 1.\n\t * @param exponent The exponent which scales the incoming signal.\n\t */\n\tconstructor(min?: number, max?: number, exponent?: number);\n\tconstructor(options?: Partial<ScaleExpOptions>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(ScaleExp.getDefaults(), arguments, [\"min\", \"max\", \"exponent\"])));\n\t\tconst options = optionsFromArguments(ScaleExp.getDefaults(), arguments, [\"min\", \"max\", \"exponent\"]);\n\n\t\tthis.input = this._exp = new Pow({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.exponent,\n\t\t});\n\t\tthis._exp.connect(this._mult);\n\t}\n\n\tstatic getDefaults(): ScaleExpOptions {\n\t\treturn Object.assign(Scale.getDefaults(), {\n\t\t\texponent: 1,\n\t\t});\n\t}\n\n\t/**\n\t * Instead of interpolating linearly between the [[min]] and\n\t * [[max]] values, setting the exponent will interpolate between\n\t * the two values with an exponential curve.\n\t */\n\tget exponent(): Positive {\n\t\treturn this._exp.value;\n\t}\n\tset exponent(exp) {\n\t\tthis._exp.value = exp;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._exp.dispose();\n\t\treturn this;\n\t}\n}\n","import { Signal, SignalOptions } from \"./Signal\";\nimport { NormalRange, Seconds, Time, TransportTime, UnitMap, UnitName } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { TransportTimeClass } from \"../core/type/TransportTime\";\nimport { ToneConstantSource } from \"./ToneConstantSource\";\nimport { OutputNode } from \"../core/context/ToneAudioNode\";\n\n/**\n * Adds the ability to synchronize the signal to the [[Transport]]\n */\nexport class SyncedSignal<TypeName extends UnitName = \"number\"> extends Signal<TypeName> {\n\n\treadonly name: string = \"SyncedSignal\";\n\t\n\t/**\n\t * Don't override when something is connected to the input\n\t */\n\treadonly override = false;\n\n\treadonly output: OutputNode;\n\n\t/**\n\t * Keep track of the last value as an optimization.\n\t */\n\tprivate _lastVal: UnitMap[TypeName];\n\n\t/**\n\t * The ID returned from scheduleRepeat\n\t */\n\tprivate _synced: number;\n\n\t/**\n\t * Remember the callback value\n\t */\n\tprivate _syncedCallback: () => void;\n\n\t/**\n\t * @param value Initial value of the signal\n\t * @param units The unit name, e.g. \"frequency\"\n\t */\n\tconstructor(value?: UnitMap[TypeName], units?: TypeName);\n\tconstructor(options?: Partial<SignalOptions<TypeName>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]));\n\t\tconst options = optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]) as SignalOptions<TypeName>;\n\n\t\tthis._lastVal = options.value;\n\t\tthis._synced = this.context.transport.scheduleRepeat(this._onTick.bind(this), \"1i\");\n\n\t\tthis._syncedCallback = this._anchorValue.bind(this);\n\t\tthis.context.transport.on(\"start\", this._syncedCallback);\n\t\tthis.context.transport.on(\"pause\", this._syncedCallback);\n\t\tthis.context.transport.on(\"stop\", this._syncedCallback);\n\n\t\t// disconnect the constant source from the output and replace it with another one\n\t\tthis._constantSource.disconnect();\n\t\tthis._constantSource.stop(0);\n\n\t\t// create a new one\n\t\tthis._constantSource = this.output = new ToneConstantSource<TypeName>({ \n\t\t\tcontext: this.context,\n\t\t\toffset: options.value,\n\t\t\tunits: options.units,\n\t\t}).start(0);\n\t\tthis.setValueAtTime(options.value, 0);\n\t}\n\n\t/**\n\t * Callback which is invoked every tick.\n\t */\n\tprivate _onTick(time: Seconds): void {\n\t\tconst val = super.getValueAtTime(this.context.transport.seconds);\n\t\t// approximate ramp curves with linear ramps\n\t\tif (this._lastVal !== val) {\n\t\t\tthis._lastVal = val;\n\t\t\tthis._constantSource.offset.setValueAtTime(val, time);\n\t\t}\n\t}\n\n\t/**\n\t * Anchor the value at the start and stop of the Transport\n\t */\n\tprivate _anchorValue(time: Seconds): void {\n\t\tconst val = super.getValueAtTime(this.context.transport.seconds);\n\t\tthis._lastVal = val;\n\t\tthis._constantSource.offset.cancelAndHoldAtTime(time);\n\t\tthis._constantSource.offset.setValueAtTime(val, time);\n\t}\n\n\tgetValueAtTime(time: TransportTime): UnitMap[TypeName] {\n\t\tconst computedTime = new TransportTimeClass(this.context, time).toSeconds();\n\t\treturn super.getValueAtTime(computedTime);\n\t}\n\t\n\tsetValueAtTime(value: UnitMap[TypeName], time: TransportTime) {\n\t\tconst computedTime = new TransportTimeClass(this.context, time).toSeconds();\n\t\tsuper.setValueAtTime(value, computedTime);\n\t\treturn this;\n\t}\n\n\tlinearRampToValueAtTime(value: UnitMap[TypeName], time: TransportTime) {\n\t\tconst computedTime = new TransportTimeClass(this.context, time).toSeconds();\n\t\tsuper.linearRampToValueAtTime(value, computedTime);\n\t\treturn this;\n\t}\n\n\texponentialRampToValueAtTime(value: UnitMap[TypeName], time: TransportTime) {\n\t\tconst computedTime = new TransportTimeClass(this.context, time).toSeconds();\n\t\tsuper.exponentialRampToValueAtTime(value, computedTime);\n\t\treturn this;\n\t}\n\n\tsetTargetAtTime(value, startTime: TransportTime, timeConstant: number): this {\n\t\tconst computedTime = new TransportTimeClass(this.context, startTime).toSeconds();\n\t\tsuper.setTargetAtTime(value, computedTime, timeConstant);\n\t\treturn this;\n\t}\n\n\tcancelScheduledValues(startTime: TransportTime): this {\n\t\tconst computedTime = new TransportTimeClass(this.context, startTime).toSeconds();\n\t\tsuper.cancelScheduledValues(computedTime);\n\t\treturn this;\n\t}\n\n\tsetValueCurveAtTime(values: UnitMap[TypeName][], startTime: TransportTime, duration: Time, scaling: NormalRange): this {\n\t\tconst computedTime = new TransportTimeClass(this.context, startTime).toSeconds();\n\t\tduration = this.toSeconds(duration);\n\t\tsuper.setValueCurveAtTime(values, computedTime, duration, scaling);\n\t\treturn this;\n\t}\n\n\tcancelAndHoldAtTime(time: TransportTime): this {\n\t\tconst computedTime = new TransportTimeClass(this.context, time).toSeconds();\n\t\tsuper.cancelAndHoldAtTime(computedTime);\n\t\treturn this;\n\t}\n\t\n\tsetRampPoint(time: TransportTime): this {\n\t\tconst computedTime = new TransportTimeClass(this.context, time).toSeconds();\n\t\tsuper.setRampPoint(computedTime);\n\t\treturn this;\n\t}\n\t\n\texponentialRampTo(value: UnitMap[TypeName], rampTime: Time, startTime?: TransportTime): this {\n\t\tconst computedTime = new TransportTimeClass(this.context, startTime).toSeconds();\n\t\tsuper.exponentialRampTo(value, rampTime, computedTime);\n\t\treturn this;\n\t}\n\t\n\tlinearRampTo(value: UnitMap[TypeName], rampTime: Time, startTime?: TransportTime): this {\n\t\tconst computedTime = new TransportTimeClass(this.context, startTime).toSeconds();\n\t\tsuper.linearRampTo(value, rampTime, computedTime);\n\t\treturn this;\n\t}\n\n\ttargetRampTo(value: UnitMap[TypeName], rampTime: Time, startTime?: TransportTime): this {\n\t\tconst computedTime = new TransportTimeClass(this.context, startTime).toSeconds();\n\t\tsuper.targetRampTo(value, rampTime, computedTime);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.context.transport.clear(this._synced);\n\t\tthis.context.transport.off(\"start\", this._syncedCallback);\n\t\tthis.context.transport.off(\"pause\", this._syncedCallback);\n\t\tthis.context.transport.off(\"stop\", this._syncedCallback);\n\t\tthis._constantSource.dispose();\n\t\treturn this;\n\t}\n}\n","import { Volume } from \"../component/channel/Volume\";\nimport { Param } from \"../core/context/Param\";\nimport { OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { Decibels, Frequency, NormalRange, Time } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\n\nexport interface InstrumentOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n}\n\n/**\n * Base-class for all instruments\n */\nexport abstract class Instrument<Options extends InstrumentOptions> extends ToneAudioNode<Options> {\n\n\t/**\n\t * The output and volume triming node\n\t */\n\tprivate _volume: Volume;\n\toutput: OutputNode;\n\n\t/**\n\t * The instrument only has an output\n\t */\n\tinput: undefined;\n\n\t/**\n\t * The volume of the output in decibels.\n\t * @example\n\t * import { AMSynth } from \"tone\";\n\t * const amSynth = new AMSynth().toDestination();\n\t * amSynth.volume.value = -6;\n\t * amSynth.triggerAttackRelease(\"G#3\", 0.2);\n\t */\n\tvolume: Param<\"decibels\">;\n\n\t/**\n\t * Keep track of all events scheduled to the transport\n\t * when the instrument is 'synced'\n\t */\n\tprivate _scheduledEvents: number[] = [];\n\n\t/**\n\t * If the instrument is currently synced\n\t */\n\tprivate _synced = false;\n\n\tconstructor(options?: Partial<InstrumentOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Instrument.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Instrument.getDefaults(), arguments);\n\n\t\tthis._volume = this.output = new Volume({\n\t\t\tcontext: this.context,\n\t\t\tvolume: options.volume,\n\t\t});\n\t\tthis.volume = this._volume.volume;\n\t\treadOnly(this, \"volume\");\n\t}\n\n\tstatic getDefaults(): InstrumentOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Sync the instrument to the Transport. All subsequent calls of\n\t * [[triggerAttack]] and [[triggerRelease]] will be scheduled along the transport.\n\t * @example\n\t * import { FMSynth, Transport } from \"tone\";\n\t * const fmSynth = new FMSynth().toDestination();\n\t * fmSynth.volume.value = -6;\n\t * fmSynth.sync();\n\t * // schedule 3 notes when the transport first starts\n\t * fmSynth.triggerAttackRelease(\"C4\", \"8n\", 0);\n\t * fmSynth.triggerAttackRelease(\"E4\", \"8n\", \"8n\");\n\t * fmSynth.triggerAttackRelease(\"G4\", \"8n\", \"4n\");\n\t * // start the transport to hear the notes\n\t * Transport.start();\n\t */\n\tsync(): this {\n\t\tif (!this._synced) {\n\t\t\tthis._synced = true;\n\t\t\tthis._syncMethod(\"triggerAttack\", 1);\n\t\t\tthis._syncMethod(\"triggerRelease\", 0);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Wrap the given method so that it can be synchronized\n\t * @param method Which method to wrap and sync\n\t * @param  timePosition What position the time argument appears in\n\t */\n\tprotected _syncMethod(method: string, timePosition: number): void {\n\t\tconst originalMethod = this[\"_original_\" + method] = this[method];\n\t\tthis[method] = (...args: any[]) => {\n\t\t\tconst time = args[timePosition];\n\t\t\tconst id = this.context.transport.schedule((t) => {\n\t\t\t\targs[timePosition] = t;\n\t\t\t\toriginalMethod.apply(this, args);\n\t\t\t}, time);\n\t\t\tthis._scheduledEvents.push(id);\n\t\t};\n\t}\n\n\t/**\n\t * Unsync the instrument from the Transport\n\t */\n\tunsync(): this {\n\t\tthis._scheduledEvents.forEach(id => this.context.transport.clear(id));\n\t\tthis._scheduledEvents = [];\n\t\tif (this._synced) {\n\t\t\tthis._synced = false;\n\t\t\tthis.triggerAttack = this._original_triggerAttack;\n\t\t\tthis.triggerRelease = this._original_triggerRelease;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Trigger the attack and then the release after the duration.\n\t * @param  note     The note to trigger.\n\t * @param  duration How long the note should be held for before\n\t *                         triggering the release. This value must be greater than 0.\n\t * @param time  When the note should be triggered.\n\t * @param  velocity The velocity the note should be triggered at.\n\t * @example\n\t * import { Synth } from \"tone\";\n\t * const synth = new Synth().toDestination();\n\t * // trigger \"C4\" for the duration of an 8th note\n\t * synth.triggerAttackRelease(\"C4\", \"8n\");\n\t */\n\ttriggerAttackRelease(note: Frequency, duration: Time, time?: Time, velocity?: NormalRange): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst computedDuration = this.toSeconds(duration);\n\t\tthis.triggerAttack(note, computedTime, velocity);\n\t\tthis.triggerRelease(computedTime + computedDuration);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Start the instrument's note.\n\t * @param note the note to trigger\n\t * @param time the time to trigger the ntoe\n\t * @param velocity the velocity to trigger the note (betwee 0-1)\n\t */\n\tabstract triggerAttack(note: Frequency, time?: Time, velocity?: NormalRange): this;\n\tprivate _original_triggerAttack = this.triggerAttack;\n\n\t/**\n\t * Trigger the release phase of the current note.\n\t * @param time when to trigger the release\n\t */\n\tabstract triggerRelease(...args: any[]): this;\n\tprivate _original_triggerRelease = this.triggerRelease;\n\n\t/**\n\t * clean up\n\t * @returns {Instrument} this\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._volume.dispose();\n\t\tthis.unsync();\n\t\tthis._scheduledEvents = [];\n\t\treturn this;\n\t}\n}\n","import { FrequencyClass } from \"../core/type/Frequency\";\nimport { Cents, Frequency, NormalRange, Seconds, Time } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { Instrument, InstrumentOptions } from \"../instrument/Instrument\";\nimport { Signal } from \"../signal/Signal\";\n\ntype onSilenceCallback = (instrument: Monophonic<any>) => void;\n\nexport interface MonophonicOptions extends InstrumentOptions {\n\tportamento: Seconds;\n\tonsilence: onSilenceCallback;\n\tdetune: Cents;\n}\n\n/**\n * Abstract base class for other monophonic instruments to extend.\n */\nexport abstract class Monophonic<Options extends MonophonicOptions> extends Instrument<Options> {\n\n\t/**\n\t * The glide time between notes.\n\t */\n\tportamento: Seconds;\n\n\t/**\n\t * Invoked when the release has finished and the output is silent.\n\t */\n\tonsilence: onSilenceCallback;\n\n\t/**\n\t * The instrument's frequency signal.\n\t */\n\tabstract readonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * The instrument's detune control signal.\n\t */\n\tabstract readonly detune: Signal<\"cents\">;\n\n\tconstructor(options?: Partial<MonophonicOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Monophonic.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Monophonic.getDefaults(), arguments);\n\n\t\tthis.portamento = options.portamento;\n\t\tthis.onsilence = options.onsilence;\n\t}\n\n\tstatic getDefaults(): MonophonicOptions {\n\t\treturn Object.assign(Instrument.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tonsilence: noOp,\n\t\t\tportamento: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Trigger the attack of the note optionally with a given velocity.\n\t * @param  note The note to trigger.\n\t * @param  time When the note should start.\n\t * @param  velocity The velocity scaler determines how \"loud\" the note will be triggered.\n\t * @example\n\t * import { Synth } from \"tone\";\n\t * const synth = new Synth().toDestination();\n\t * // trigger the note a half second from now at half velocity\n\t * synth.triggerAttack(\"C4\", \"+0.5\", 0.5);\n\t */\n\ttriggerAttack(note: Frequency | FrequencyClass, time?: Time, velocity: NormalRange = 1): this {\n\t\tthis.log(\"triggerAttack\", note, time, velocity);\n\t\tconst seconds = this.toSeconds(time);\n\t\tthis._triggerEnvelopeAttack(seconds, velocity);\n\t\tthis.setNote(note, seconds);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Trigger the release portion of the envelope\n\t * @param  time If no time is given, the release happens immediatly\n\t * @example\n\t * import { Synth } from \"tone\";\n\t * const synth = new Synth().toDestination();\n\t * synth.triggerAttack(\"C4\");\n\t * // trigger the release a second from now\n\t * synth.triggerRelease(\"+1\");\n\t */\n\ttriggerRelease(time?: Time): this {\n\t\tthis.log(\"triggerRelease\", time);\n\t\tconst seconds = this.toSeconds(time);\n\t\tthis._triggerEnvelopeRelease(seconds);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Internal method which starts the envelope attack\n\t */\n\tprotected abstract _triggerEnvelopeAttack(time: Seconds, velocity: NormalRange): void;\n\n\t/**\n\t * Internal method which starts the envelope release\n\t */\n\tprotected abstract _triggerEnvelopeRelease(time: Seconds): void;\n\n\t/**\n\t * Get the level of the output at the given time. Measures\n\t * the envelope(s) value at the time.\n\t * @param time The time to query the envelope value\n\t * @return The output level between 0-1\n\t */\n\tabstract getLevelAtTime(time: Time): NormalRange;\n\n\t/**\n\t * Set the note at the given time. If no time is given, the note\n\t * will set immediately.\n\t * @param note The note to change to.\n\t * @param  time The time when the note should be set.\n\t * @example\n\t * import { Synth } from \"tone\";\n\t * const synth = new Synth().toDestination();\n\t * synth.triggerAttack(\"C4\");\n\t * // change to F#6 in one quarter note from now.\n\t * synth.setNote(\"F#6\", \"+4n\");\n\t */\n\tsetNote(note: Frequency | FrequencyClass, time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst computedFrequency = note instanceof FrequencyClass ? note.toFrequency() : note;\n\t\tif (this.portamento > 0 && this.getLevelAtTime(computedTime) > 0.05) {\n\t\t\tconst portTime = this.toSeconds(this.portamento);\n\t\t\tthis.frequency.exponentialRampTo(computedFrequency, portTime, computedTime);\n\t\t} else {\n\t\t\tthis.frequency.setValueAtTime(computedFrequency, computedTime);\n\t\t}\n\t\treturn this;\n\t}\n}\n","import { AmplitudeEnvelope } from \"../component/envelope/AmplitudeEnvelope\";\nimport { Envelope, EnvelopeOptions } from \"../component/envelope/Envelope\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { NormalRange, Seconds, Time } from \"../core/type/Units\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { RecursivePartial } from \"../core/util/Interface\";\nimport { Signal } from \"../signal/Signal\";\nimport { OmniOscillator } from \"../source/oscillator/OmniOscillator\";\nimport { OmniOscillatorSynthOptions } from \"../source/oscillator/OscillatorInterface\";\nimport { Source } from \"../source/Source\";\nimport { Monophonic, MonophonicOptions } from \"./Monophonic\";\n\nexport interface SynthOptions extends MonophonicOptions {\n\toscillator: OmniOscillatorSynthOptions;\n\tenvelope: Omit<EnvelopeOptions, keyof ToneAudioNodeOptions>;\n}\n\n/**\n * Synth is composed simply of a {@link OmniOscillator} routed through an {@link AmplitudeEnvelope}.\n * ```\n * +----------------+   +-------------------+\n * | OmniOscillator +>--> AmplitudeEnvelope +>--> Output\n * +----------------+   +-------------------+\n * ```\n * @example\n * import { Synth } from \"tone\";\n * const synth = new Synth().toDestination();\n * synth.triggerAttackRelease(\"C4\", \"8n\");\n * @category Instrument\n */\nexport class Synth<Options extends SynthOptions = SynthOptions> extends Monophonic<Options> {\n\n\treadonly name: string = \"Synth\";\n\n\t/**\n\t * The oscillator.\n\t */\n\treadonly oscillator: OmniOscillator<any>;\n\n\t/**\n\t * The frequency signal\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * The detune signal\n\t */\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * The envelope\n\t */\n\treadonly envelope: AmplitudeEnvelope;\n\n\t/**\n\t * @param options the options available for the synth.\n\t */\n\tconstructor(options?: RecursivePartial<SynthOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Synth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Synth.getDefaults(), arguments);\n\n\t\tthis.oscillator = new OmniOscillator(Object.assign({\n\t\t\tcontext: this.context,\n\t\t\tdetune: options.detune,\n\t\t\tonstop: () => this.onsilence(this),\n\t\t}, options.oscillator));\n\n\t\tthis.frequency = this.oscillator.frequency;\n\t\tthis.detune = this.oscillator.detune;\n\n\t\tthis.envelope = new AmplitudeEnvelope(Object.assign({\n\t\t\tcontext: this.context,\n\t\t}, options.envelope));\n\n\t\t// connect the oscillators to the output\n\t\tthis.oscillator.chain(this.envelope, this.output);\n\t\treadOnly(this, [\"oscillator\", \"frequency\", \"detune\", \"envelope\"]);\n\t}\n\n\tstatic getDefaults(): SynthOptions {\n\t\treturn Object.assign(Monophonic.getDefaults(), {\n\t\t\tenvelope: Object.assign(\n\t\t\t\tomitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())),\n\t\t\t\t{\n\t\t\t\t\tattack: 0.005,\n\t\t\t\t\tdecay: 0.1,\n\t\t\t\t\trelease: 1,\n\t\t\t\t\tsustain: 0.3,\n\t\t\t\t},\n\t\t\t),\n\t\t\toscillator: Object.assign(\n\t\t\t\tomitFromObject(OmniOscillator.getDefaults(), [...Object.keys(Source.getDefaults()), \"frequency\", \"detune\"]),\n\t\t\t\t{\n\t\t\t\t\ttype: \"triangle\",\n\t\t\t\t},\n\t\t\t),\n\t\t});\n\t}\n\n\t/**\n\t * start the attack portion of the envelope\n\t * @param time the time the attack should start\n\t * @param velocity the velocity of the note (0-1)\n\t */\n\tprotected _triggerEnvelopeAttack(time: Seconds, velocity: number): void {\n\t\t// the envelopes\n\t\tthis.envelope.triggerAttack(time, velocity);\n\t\tthis.oscillator.start(time);\n\t\t// if there is no release portion, stop the oscillator\n\t\tif (this.envelope.sustain === 0) {\n\t\t\tconst computedAttack = this.toSeconds(this.envelope.attack);\n\t\t\tconst computedDecay = this.toSeconds(this.envelope.decay);\n\t\t\tthis.oscillator.stop(time + computedAttack + computedDecay);\n\t\t}\n\t}\n\n\t/**\n\t * start the release portion of the envelope\n\t * @param time the time the release should start\n\t */\n\tprotected _triggerEnvelopeRelease(time: Seconds): void {\n\t\tthis.envelope.triggerRelease(time);\n\t\tthis.oscillator.stop(time + this.toSeconds(this.envelope.release));\n\t}\n\n\tgetLevelAtTime(time: Time): NormalRange {\n\t\ttime = this.toSeconds(time);\n\t\treturn this.envelope.getValueAtTime(time);\n\t}\n\n\t/**\n\t * clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.oscillator.dispose();\n\t\tthis.envelope.dispose();\n\t\treturn this;\n\t}\n}\n","import { Signal } from \"../signal/Signal\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Gain } from \"../core/context/Gain\";\nimport { NormalRange, Positive, Seconds, Time } from \"../core/type/Units\";\nimport { Envelope, EnvelopeOptions } from \"../component/envelope/Envelope\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { Monophonic } from \"./Monophonic\";\nimport { OmniOscillator } from \"../source/oscillator/OmniOscillator\";\nimport { OmniOscillatorSynthOptions } from \"../source/oscillator/OscillatorInterface\";\nimport { Source } from \"../source/Source\";\nimport { Synth, SynthOptions } from \"./Synth\";\nimport { AmplitudeEnvelope } from \"../component/envelope/AmplitudeEnvelope\";\nimport { readOnly, RecursivePartial } from \"../core/util/Interface\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\n\nexport interface ModulationSynthOptions extends SynthOptions {\n\tharmonicity: Positive;\n\tmodulationEnvelope: Omit<EnvelopeOptions, keyof ToneAudioNodeOptions>;\n\tmodulation: OmniOscillatorSynthOptions;\n}\n/**\n * Base class for both AM and FM synths\n */\nexport abstract class ModulationSynth<Options extends ModulationSynthOptions> extends Monophonic<Options> {\n\n\treadonly name: string = \"ModulationSynth\";\n\n\t/**\n\t * The carrier voice.\n\t */\n\tprotected _carrier: Synth;\n\n\t/**\n\t * The modulator voice.\n\t */\n\n\tprotected _modulator: Synth;\n\n\t/**\n\t * The carrier's oscillator\n\t */\n\treadonly oscillator: OmniOscillator<any>;\n\n\t/**\n\t * The carrier's envelope\n\t */\n\treadonly envelope: AmplitudeEnvelope;\n\n\t/**\n\t * The modulator's oscillator which is applied to the amplitude of the oscillator\n\t */\n\treadonly modulation: OmniOscillator<any>;\n\n\t/**\n\t * The modulator's envelope\n\t */\n\treadonly modulationEnvelope: AmplitudeEnvelope;\n\n\t/**\n\t * The frequency control\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * The detune in cents\n\t */\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * Harmonicity is the ratio between the two voices. A harmonicity of\n\t * 1 is no change. Harmonicity = 2 means a change of an octave.\n\t * @example\n\t * import { AMSynth } from \"tone\";\n\t * const amSynth = new AMSynth().toDestination();\n\t * // pitch the modulator an octave below oscillator\n\t * amSynth.harmonicity.value = 0.5;\n\t * amSynth.triggerAttackRelease(\"C5\", \"4n\");\n\t */\n\treadonly harmonicity: Multiply;\n\n\t/**\n\t * The node where the modulation happens\n\t */\n\tprotected _modulationNode: Gain;\n\n\tconstructor(options?: RecursivePartial<ModulationSynthOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(ModulationSynth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(ModulationSynth.getDefaults(), arguments);\n\n\t\tthis._carrier = new Synth({\n\t\t\tcontext: this.context,\n\t\t\toscillator: options.oscillator,\n\t\t\tenvelope: options.envelope,\n\t\t\tonsilence: () => this.onsilence(this),\n\t\t\tvolume: -10,\n\t\t});\n\t\tthis._modulator = new Synth({\n\t\t\tcontext: this.context,\n\t\t\toscillator: options.modulation,\n\t\t\tenvelope: options.modulationEnvelope,\n\t\t\tvolume: -10,\n\t\t});\n\n\t\tthis.oscillator = this._carrier.oscillator;\n\t\tthis.envelope = this._carrier.envelope;\n\t\tthis.modulation = this._modulator.oscillator;\n\t\tthis.modulationEnvelope = this._modulator.envelope;\n\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t});\n\t\tthis.detune = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.detune,\n\t\t\tunits: \"cents\"\n\t\t});\n\t\tthis.harmonicity = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.harmonicity,\n\t\t});\n\t\tthis._modulationNode = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: 0,\n\t\t});\n\t\t\n\t\treadOnly(this, [\"frequency\", \"harmonicity\", \"oscillator\", \"envelope\", \"modulation\", \"modulationEnvelope\", \"detune\"]);\n\t}\n\n\tstatic getDefaults(): ModulationSynthOptions {\n\t\treturn Object.assign(Monophonic.getDefaults(), {\n\t\t\tharmonicity: 3,\n\t\t\toscillator: Object.assign(\n\t\t\t\tomitFromObject(OmniOscillator.getDefaults(), [\n\t\t\t\t\t...Object.keys(Source.getDefaults()),\n\t\t\t\t\t\"frequency\",\n\t\t\t\t\t\"detune\"\n\t\t\t\t]),\n\t\t\t\t{\n\t\t\t\t\ttype: \"sine\"\n\t\t\t\t}\n\t\t\t),\n\t\t\tenvelope: Object.assign(\n\t\t\t\tomitFromObject(\n\t\t\t\t\tEnvelope.getDefaults(),\n\t\t\t\t\tObject.keys(ToneAudioNode.getDefaults())\n\t\t\t\t),\n\t\t\t\t{\n\t\t\t\t\tattack: 0.01,\n\t\t\t\t\tdecay: 0.01,\n\t\t\t\t\tsustain: 1,\n\t\t\t\t\trelease: 0.5\n\t\t\t\t}\n\t\t\t),\n\t\t\tmodulation: Object.assign(\n\t\t\t\tomitFromObject(OmniOscillator.getDefaults(), [\n\t\t\t\t\t...Object.keys(Source.getDefaults()),\n\t\t\t\t\t\"frequency\",\n\t\t\t\t\t\"detune\"\n\t\t\t\t]),\n\t\t\t\t{\n\t\t\t\t\ttype: \"square\"\n\t\t\t\t}\n\t\t\t),\n\t\t\tmodulationEnvelope: Object.assign(\n\t\t\t\tomitFromObject(\n\t\t\t\t\tEnvelope.getDefaults(),\n\t\t\t\t\tObject.keys(ToneAudioNode.getDefaults())\n\t\t\t\t),\n\t\t\t\t{\n\t\t\t\t\tattack: 0.5,\n\t\t\t\t\tdecay: 0.0,\n\t\t\t\t\tsustain: 1,\n\t\t\t\t\trelease: 0.5\n\t\t\t\t}\n\t\t\t)\n\t\t});\n\t}\n\n\t/**\n\t * Trigger the attack portion of the note\n\t */\n\tprotected _triggerEnvelopeAttack(time: Seconds, velocity: number): void {\n\t\t// @ts-ignore\n\t\tthis._carrier._triggerEnvelopeAttack(time, velocity);\n\t\t// @ts-ignore\n\t\tthis._modulator._triggerEnvelopeAttack(time, velocity);\n\t}\n\t\n\t/**\n\t * Trigger the release portion of the note\n\t */\n\tprotected _triggerEnvelopeRelease(time: Seconds) {\n\t\t// @ts-ignore\n\t\tthis._carrier._triggerEnvelopeRelease(time);\n\t\t// @ts-ignore\n\t\tthis._modulator._triggerEnvelopeRelease(time);\n\t\treturn this;\n\t}\n\t\n\tgetLevelAtTime(time: Time): NormalRange {\n\t\ttime = this.toSeconds(time);\n\t\treturn this.envelope.getValueAtTime(time);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._carrier.dispose();\n\t\tthis._modulator.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\tthis.harmonicity.dispose();\n\t\tthis._modulationNode.dispose();\n\t\treturn this;\n\t}\n}\n","import { AudioToGain } from \"../signal/AudioToGain\";\nimport { RecursivePartial } from \"../core/util/Interface\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { ModulationSynth, ModulationSynthOptions } from \"./ModulationSynth\";\n\nexport type AMSynthOptions = ModulationSynthOptions;\n\n/**\n * AMSynth uses the output of one Tone.Synth to modulate the\n * amplitude of another Tone.Synth. The harmonicity (the ratio between\n * the two signals) affects the timbre of the output signal greatly.\n * Read more about Amplitude Modulation Synthesis on\n * [SoundOnSound](https://web.archive.org/web/20160404103653/http://www.soundonsound.com:80/sos/mar00/articles/synthsecrets.htm).\n *\n * @example\n * import { AMSynth } from \"tone\";\n * const synth = new AMSynth().toDestination();\n * synth.triggerAttackRelease(\"C4\", \"4n\");\n * \n * @category Instrument\n */\nexport class AMSynth extends ModulationSynth<AMSynthOptions> {\n\n\treadonly name: string = \"AMSynth\";\n\n\t/**\n\t * Scale the oscillator from -1,1 to 0-1\n\t */\n\tprivate _modulationScale: AudioToGain;\n\n\tconstructor(options?: RecursivePartial<AMSynthOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(AMSynth.getDefaults(), arguments));\n\n\t\tthis._modulationScale = new AudioToGain({\n\t\t\tcontext: this.context,\n\t\t});\n\n\t\t// control the two voices frequency\n\t\tthis.frequency.connect(this._carrier.frequency);\n\t\tthis.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t\tthis.detune.fan(this._carrier.detune, this._modulator.detune);\n\t\tthis._modulator.chain(this._modulationScale, this._modulationNode.gain);\n\t\tthis._carrier.chain(this._modulationNode, this.output);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._modulationScale.dispose();\n\t\treturn this;\n\t}\n}\n","import { AmplitudeEnvelope } from \"../component/envelope/AmplitudeEnvelope\";\nimport { Envelope, EnvelopeOptions } from \"../component/envelope/Envelope\";\nimport { Filter, FilterOptions } from \"../component/filter/Filter\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly, RecursivePartial } from \"../core/util/Interface\";\nimport { Monophonic, MonophonicOptions } from \"../instrument/Monophonic\";\nimport { OmniOscillator } from \"../source/oscillator/OmniOscillator\";\nimport { Source } from \"../source/Source\";\nimport { FrequencyEnvelope, FrequencyEnvelopeOptions } from \"../component/envelope/FrequencyEnvelope\";\nimport { NormalRange, Seconds, Time } from \"../core/type/Units\";\nimport { Signal } from \"../signal/Signal\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { OmniOscillatorSynthOptions } from \"../source/oscillator/OscillatorInterface\";\n\nexport interface MonoSynthOptions extends MonophonicOptions {\n\toscillator: OmniOscillatorSynthOptions;\n\tenvelope: Omit<EnvelopeOptions, keyof ToneAudioNodeOptions>;\n\tfilterEnvelope: Omit<FrequencyEnvelopeOptions, keyof ToneAudioNodeOptions>;\n\tfilter: Omit<FilterOptions, keyof ToneAudioNodeOptions>;\n}\n\n/**\n * MonoSynth is composed of one `oscillator`, one `filter`, and two `envelopes`.\n * The amplitude of the Oscillator and the cutoff frequency of the\n * Filter are controlled by Envelopes.\n * <img src=\"https://docs.google.com/drawings/d/1gaY1DF9_Hzkodqf8JI1Cg2VZfwSElpFQfI94IQwad38/pub?w=924&h=240\">\n * @example\n * import { MonoSynth } from \"tone\";\n * const synth = new MonoSynth({\n * \toscillator: {\n * \t\ttype: \"square\"\n * \t},\n * \tenvelope: {\n * \t\tattack: 0.1\n * \t}\n * }).toDestination();\n * synth.triggerAttackRelease(\"C4\", \"8n\");\n * @category Instrument\n */\nexport class MonoSynth extends Monophonic<MonoSynthOptions> {\n\n\treadonly name = \"MonoSynth\";\n\n\t/**\n\t * The oscillator.\n\t */\n\treadonly oscillator: OmniOscillator<any>;\n\n\t/**\n\t * The frequency control.\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * The detune control.\n\t */\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * The filter.\n\t */\n\treadonly filter: Filter;\n\n\t/**\n\t * The filter envelope.\n\t */\n\treadonly filterEnvelope: FrequencyEnvelope;\n\n\t/**\n\t * The amplitude envelope.\n\t */\n\treadonly envelope: AmplitudeEnvelope;\n\n\tconstructor(options?: RecursivePartial<MonoSynthOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(MonoSynth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(MonoSynth.getDefaults(), arguments);\n\n\t\tthis.oscillator = new OmniOscillator(Object.assign(options.oscillator, { \n\t\t\tcontext: this.context,\n\t\t\tdetune: options.detune,\n\t\t\tonstop: () => this.onsilence(this),\n\t\t}));\n\t\tthis.frequency = this.oscillator.frequency;\n\t\tthis.detune = this.oscillator.detune;\n\t\tthis.filter = new Filter(Object.assign(options.filter, { context: this.context }));\n\t\tthis.filterEnvelope = new FrequencyEnvelope(Object.assign(options.filterEnvelope, { context: this.context }));\n\t\tthis.envelope = new AmplitudeEnvelope(Object.assign(options.envelope, { context: this.context }));\n\n\t\t// connect the oscillators to the output\n\t\tthis.oscillator.chain(this.filter, this.envelope, this.output);\n\n\t\t// connect the filter envelope\n\t\tthis.filterEnvelope.connect(this.filter.frequency);\n\t\t\n\t\treadOnly(this, [\"oscillator\", \"frequency\", \"detune\", \"filter\", \"filterEnvelope\", \"envelope\"]);\n\t}\n\n\tstatic getDefaults(): MonoSynthOptions {\n\t\treturn Object.assign(Monophonic.getDefaults(), {\n\t\t\tenvelope: Object.assign(\n\t\t\t\tomitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())),\n\t\t\t\t{\n\t\t\t\t\tattack: 0.005,\n\t\t\t\t\tdecay: 0.1,\n\t\t\t\t\trelease: 1,\n\t\t\t\t\tsustain: 0.9,\n\t\t\t\t},\n\t\t\t),\n\t\t\tfilter: Object.assign(\n\t\t\t\tomitFromObject(Filter.getDefaults(), Object.keys(ToneAudioNode.getDefaults())),\n\t\t\t\t{\n\t\t\t\t\tQ: 1,\n\t\t\t\t\trolloff: -12,\n\t\t\t\t\ttype: \"lowpass\",\n\t\t\t\t},\n\t\t\t),\n\t\t\tfilterEnvelope: Object.assign(\n\t\t\t\tomitFromObject(FrequencyEnvelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), \n\t\t\t\t{\n\t\t\t\t\tattack: 0.6,\n\t\t\t\t\tbaseFrequency: 200,\n\t\t\t\t\tdecay: 0.2,\n\t\t\t\t\texponent: 2,\n\t\t\t\t\toctaves: 3,\n\t\t\t\t\trelease: 2,\n\t\t\t\t\tsustain: 0.5,\n\t\t\t\t}\n\t\t\t),\n\t\t\toscillator: Object.assign(\n\t\t\t\tomitFromObject(OmniOscillator.getDefaults(), Object.keys(Source.getDefaults())),\n\t\t\t\t{\n\t\t\t\t\ttype: \"sawtooth\",\n\t\t\t\t},\n\t\t\t),\n\t\t});\n\t}\n\n\t/**\n\t * start the attack portion of the envelope\n\t * @param time the time the attack should start\n\t * @param velocity the velocity of the note (0-1)\n\t */\n\tprotected _triggerEnvelopeAttack(time: Seconds, velocity = 1): void {\n\t\tthis.envelope.triggerAttack(time, velocity);\n\t\tthis.filterEnvelope.triggerAttack(time);\n\t\tthis.oscillator.start(time);\n\t\tif (this.envelope.sustain === 0) {\n\t\t\tconst computedAttack = this.toSeconds(this.envelope.attack);\n\t\t\tconst computedDecay = this.toSeconds(this.envelope.decay);\n\t\t\tthis.oscillator.stop(time + computedAttack + computedDecay);\n\t\t}\n\t}\n\n\t/**\n\t * start the release portion of the envelope\n\t * @param time the time the release should start\n\t */\n\tprotected _triggerEnvelopeRelease(time: Seconds): void {\n\t\tthis.envelope.triggerRelease(time);\n\t\tthis.filterEnvelope.triggerRelease(time);\n\t\tthis.oscillator.stop(time + this.toSeconds(this.envelope.release));\n\t}\n\n\tgetLevelAtTime(time: Time): NormalRange {\n\t\ttime = this.toSeconds(time);\n\t\treturn this.envelope.getValueAtTime(time);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.oscillator.dispose();\n\t\tthis.envelope.dispose();\n\t\tthis.filterEnvelope.dispose();\n\t\tthis.filter.dispose();\n\t\treturn this;\n\t}\n}\n","import { Monophonic, MonophonicOptions } from \"./Monophonic\";\nimport { MonoSynth, MonoSynthOptions } from \"./MonoSynth\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly, RecursivePartial } from \"../core/util/Interface\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Gain, } from \"../core/context/Gain\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Frequency, NormalRange, Positive, Seconds, Time } from \"../core/type/Units\";\nimport { deepMerge, omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { Param } from \"../core/context/Param\";\n\nexport interface DuoSynthOptions extends MonophonicOptions {\n\tvoice0: Omit<MonoSynthOptions, keyof MonophonicOptions>;\n\tvoice1: Omit<MonoSynthOptions, keyof MonophonicOptions>;\n\tharmonicity: Positive;\n\tvibratoRate: Frequency;\n\tvibratoAmount: Positive;\n}\n\n/**\n * DuoSynth is a monophonic synth composed of two [[MonoSynths]] run in parallel with control over the\n * frequency ratio between the two voices and vibrato effect.\n * @example\n * import { DuoSynth } from \"tone\";\n * const duoSynth = new DuoSynth().toDestination();\n * duoSynth.triggerAttackRelease(\"C4\", \"2n\");\n * @category Instrument\n */\nexport class DuoSynth extends Monophonic<DuoSynthOptions> {\n\n\treadonly name: string = \"DuoSynth\";\n\n\treadonly frequency: Signal<\"frequency\">;\n\treadonly detune: Signal<\"cents\">;\n\t\t\n\t/**\n\t * the first voice\n\t */\n\treadonly voice0: MonoSynth;\n\n\t/**\n\t * the second voice\n\t */\n\treadonly voice1: MonoSynth;\n\t\n\t/**\n\t * The amount of vibrato\n\t */\n\tpublic vibratoAmount: Param<\"normalRange\">;\n\n\t/**\n\t * the vibrato frequency\n\t */\n\tpublic vibratoRate: Signal<\"frequency\">;\n\n\t/**\n\t * Harmonicity is the ratio between the two voices. A harmonicity of\n\t * 1 is no change. Harmonicity = 2 means a change of an octave.\n\t * @example\n\t * import { DuoSynth } from \"tone\";\n\t * const duoSynth = new DuoSynth().toDestination();\n\t * duoSynth.triggerAttackRelease(\"C4\", \"2n\");\n\t * // pitch voice1 an octave below voice0\n\t * duoSynth.harmonicity.value = 0.5;\n\t */\n\tpublic harmonicity: Signal<\"positive\">;\n\n\t/**\n\t * The vibrato LFO.\n\t */\n\tprivate _vibrato: LFO;\n\n\t/**\n\t * the vibrato gain\n\t */\n\tprivate _vibratoGain: Gain<\"normalRange\">;\n\n\tconstructor(options?: RecursivePartial<DuoSynthOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(DuoSynth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(DuoSynth.getDefaults(), arguments);\n\n\t\tthis.voice0 = new MonoSynth(Object.assign(options.voice0, { \n\t\t\tcontext: this.context, \n\t\t\tonsilence: () => this.onsilence(this)\n\t\t}));\n\t\tthis.voice1 = new MonoSynth(Object.assign(options.voice1, { \n\t\t\tcontext: this.context, \n\t\t}));\n\n\t\tthis.harmonicity = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.harmonicity,\n\t\t});\n\n\t\tthis._vibrato = new LFO({\n\t\t\tfrequency: options.vibratoRate,\n\t\t\tcontext: this.context,\n\t\t\tmin: -50,\n\t\t\tmax: 50\n\t\t});\n\t\t// start the vibrato immediately\n\t\tthis._vibrato.start();\n\t\tthis.vibratoRate = this._vibrato.frequency;\n\t\tthis._vibratoGain = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"normalRange\",\n\t\t\tgain: options.vibratoAmount\n\t\t});\n\t\tthis.vibratoAmount = this._vibratoGain.gain;\n\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: 440\n\t\t});\n\t\tthis.detune = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune\n\t\t});\n\t\t\n\t\t// control the two voices frequency\n\t\tthis.frequency.connect(this.voice0.frequency);\n\t\tthis.frequency.chain(this.harmonicity, this.voice1.frequency);\n\n\t\tthis._vibrato.connect(this._vibratoGain);\n\t\tthis._vibratoGain.fan(this.voice0.detune, this.voice1.detune);\n\n\t\tthis.detune.fan(this.voice0.detune, this.voice1.detune);\n\n\t\tthis.voice0.connect(this.output);\n\t\tthis.voice1.connect(this.output);\n\n\t\treadOnly(this, [\"voice0\", \"voice1\", \"frequency\", \"vibratoAmount\", \"vibratoRate\"]);\n\t}\n\n\tgetLevelAtTime(time: Time): NormalRange {\n\t\ttime = this.toSeconds(time);\n\t\treturn this.voice0.envelope.getValueAtTime(time) + this.voice1.envelope.getValueAtTime(time);\n\t}\n\n\tstatic getDefaults(): DuoSynthOptions {\n\t\treturn deepMerge(Monophonic.getDefaults(), {\n\t\t\tvibratoAmount: 0.5,\n\t\t\tvibratoRate: 5,\n\t\t\tharmonicity: 1.5,\n\t\t\tvoice0: deepMerge(\n\t\t\t\tomitFromObject(MonoSynth.getDefaults(), Object.keys(Monophonic.getDefaults())), \n\t\t\t\t{\n\t\t\t\t\tfilterEnvelope: {\n\t\t\t\t\t\tattack: 0.01,\n\t\t\t\t\t\tdecay: 0.0,\n\t\t\t\t\t\tsustain: 1,\n\t\t\t\t\t\trelease: 0.5\n\t\t\t\t\t},\n\t\t\t\t\tenvelope: {\n\t\t\t\t\t\tattack: 0.01,\n\t\t\t\t\t\tdecay: 0.0,\n\t\t\t\t\t\tsustain: 1,\n\t\t\t\t\t\trelease: 0.5\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\tvoice1: deepMerge(\n\t\t\t\tomitFromObject(MonoSynth.getDefaults(), Object.keys(Monophonic.getDefaults())), \n\t\t\t\t{\n\t\t\t\t\t\n\t\t\t\t\tfilterEnvelope: {\n\t\t\t\t\t\tattack: 0.01,\n\t\t\t\t\t\tdecay: 0.0,\n\t\t\t\t\t\tsustain: 1,\n\t\t\t\t\t\trelease: 0.5\n\t\t\t\t\t},\n\t\t\t\t\tenvelope: {\n\t\t\t\t\t\tattack: 0.01,\n\t\t\t\t\t\tdecay: 0.0,\n\t\t\t\t\t\tsustain: 1,\n\t\t\t\t\t\trelease: 0.5\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t}) as DuoSynthOptions;\n\t}\n\t/**\n\t * Trigger the attack portion of the note\n\t */\n\tprotected _triggerEnvelopeAttack(time: Seconds, velocity: number): void {\n\t\t// @ts-ignore\n\t\tthis.voice0._triggerEnvelopeAttack(time, velocity);\n\t\t// @ts-ignore\n\t\tthis.voice1._triggerEnvelopeAttack(time, velocity);\n\t}\n\t\n\t/**\n\t * Trigger the release portion of the note\n\t */\n\tprotected _triggerEnvelopeRelease(time: Seconds) {\n\t\t// @ts-ignore\n\t\tthis.voice0._triggerEnvelopeRelease(time);\n\t\t// @ts-ignore\n\t\tthis.voice1._triggerEnvelopeRelease(time);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.voice0.dispose();\n\t\tthis.voice1.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\tthis._vibrato.dispose();\n\t\tthis.vibratoRate.dispose();\n\t\tthis._vibratoGain.dispose();\n\t\tthis.harmonicity.dispose();\n\t\treturn this;\n\t}\n}\n\n","import { Positive } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { RecursivePartial } from \"../core/util/Interface\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { ModulationSynth, ModulationSynthOptions } from \"./ModulationSynth\";\n\nexport interface FMSynthOptions extends ModulationSynthOptions {\n\tmodulationIndex: Positive;\n}\n\n/**\n * FMSynth is composed of two Tone.Synths where one Tone.Synth modulates\n * the frequency of a second Tone.Synth. A lot of spectral content\n * can be explored using the modulationIndex parameter. Read more about\n * frequency modulation synthesis on Sound On Sound: [Part 1](https://web.archive.org/web/20160403123704/http://www.soundonsound.com/sos/apr00/articles/synthsecrets.htm), [Part 2](https://web.archive.org/web/20160403115835/http://www.soundonsound.com/sos/may00/articles/synth.htm).\n *\n * @example\n * import { FMSynth } from \"tone\";\n * const fmSynth = new FMSynth().toDestination();\n * fmSynth.triggerAttackRelease(\"C5\", \"4n\");\n * \n * @category Instrument\n */\n\nexport class FMSynth extends ModulationSynth<FMSynthOptions> {\n\treadonly name: string = \"FMSynth\";\n\n\t/**\n\t * The modulation index which essentially the depth or amount of the modulation. It is the\n\t * ratio of the frequency of the modulating signal (mf) to the amplitude of the\n\t * modulating signal (ma) -- as in ma/mf.\n\t */\n\treadonly modulationIndex: Multiply;\n\n\tconstructor(options?: RecursivePartial<FMSynthOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(FMSynth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(FMSynth.getDefaults(), arguments);\n\n\t\tthis.modulationIndex = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.modulationIndex,\n\t\t});\n\n\t\t// control the two voices frequency\n\t\tthis.frequency.connect(this._carrier.frequency);\n\t\tthis.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t\tthis.frequency.chain(this.modulationIndex, this._modulationNode);\n\t\tthis.detune.fan(this._carrier.detune, this._modulator.detune);\n\t\tthis._modulator.connect(this._modulationNode.gain);\n\t\tthis._modulationNode.connect(this._carrier.frequency);\n\t\tthis._carrier.connect(this.output);\n\t}\n\n\tstatic getDefaults(): FMSynthOptions {\n\t\treturn Object.assign(ModulationSynth.getDefaults(), {\n\t\t\tmodulationIndex: 10,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.modulationIndex.dispose();\n\t\treturn this;\n\t}\n}\n","import { Envelope, EnvelopeOptions } from \"../component/envelope/Envelope\";\nimport { Filter } from \"../component/filter/Filter\";\nimport { Gain } from \"../core/context/Gain\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { Frequency, NormalRange, Positive, Seconds, Time } from \"../core/type/Units\";\nimport { deepMerge, omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp, RecursivePartial } from \"../core/util/Interface\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Scale } from \"../signal/Scale\";\nimport { Signal } from \"../signal/Signal\";\nimport { FMOscillator } from \"../source/oscillator/FMOscillator\";\nimport { Monophonic, MonophonicOptions } from \"./Monophonic\";\n\nexport interface MetalSynthOptions extends MonophonicOptions {\n\tharmonicity: Positive;\n\tmodulationIndex: Positive;\n\toctaves: number;\n\tresonance: Frequency;\n\tenvelope: Omit<EnvelopeOptions, keyof ToneAudioNodeOptions>;\n}\n\n/**\n * Inharmonic ratio of frequencies based on the Roland TR-808\n * Taken from https://ccrma.stanford.edu/papers/tr-808-cymbal-physically-informed-circuit-bendable-digital-model\n */\nconst inharmRatios: number[] = [1.0, 1.483, 1.932, 2.546, 2.630, 3.897];\n\n/**\n * A highly inharmonic and spectrally complex source with a highpass filter\n * and amplitude envelope which is good for making metallophone sounds.\n * Based on CymbalSynth by [@polyrhythmatic](https://github.com/polyrhythmatic).\n * Inspiration from [Sound on Sound](https://shorturl.at/rSZ12).\n * @category Instrument\n */\nexport class MetalSynth extends Monophonic<MetalSynthOptions> {\n\n\treadonly name: string = \"MetalSynth\";\n\n\t/**\n\t * The frequency of the cymbal\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * The detune applied to the oscillators\n\t */\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * The array of FMOscillators\n\t */\n\tprivate _oscillators: FMOscillator[] = [];\n\n\t/**\n\t * The frequency multipliers\n\t */\n\tprivate _freqMultipliers: Multiply[] = [];\n\n\t/**\n\t * The gain node for the envelope.\n\t */\n\tprivate _amplitude: Gain;\n\n\t/**\n\t * Highpass the output\n\t */\n\tprivate _highpass: Filter;\n\n\t/**\n\t * The number of octaves the highpass\n\t * filter frequency ramps\n\t */\n\tprivate _octaves: number;\n\n\t/**\n\t * Scale the body envelope for the highpass filter\n\t */\n\tprivate _filterFreqScaler: Scale;\n\n\t/**\n\t * The envelope which is connected both to the\n\t * amplitude and a highpass filter's cutoff frequency.\n\t * The lower-limit of the filter is controlled by the [[resonance]]\n\t */\n\treadonly envelope: Envelope;\n\n\tconstructor(options?: RecursivePartial<MetalSynthOptions>)\n\tconstructor() {\n\t\tsuper(optionsFromArguments(MetalSynth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(MetalSynth.getDefaults(), arguments);\n\n\t\tthis.detune = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune,\n\t\t});\n\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t});\n\n\t\tthis._amplitude = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: 0,\n\t\t}).connect(this.output);\n\n\t\tthis._highpass = new Filter({\n\t\t\tQ: -3.0102999566398125,\n\t\t\tcontext: this.context,\n\t\t\ttype: \"highpass\",\n\t\t}).connect(this._amplitude);\n\n\t\tfor (let i = 0; i < inharmRatios.length; i++) {\n\t\t\tconst osc = new FMOscillator({\n\t\t\t\tcontext: this.context,\n\t\t\t\tharmonicity: options.harmonicity,\n\t\t\t\tmodulationIndex: options.modulationIndex,\n\t\t\t\tmodulationType: \"square\",\n\t\t\t\tonstop: i === 0 ? () => this.onsilence(this) : noOp,\n\t\t\t\ttype: \"square\",\n\t\t\t});\n\t\t\tosc.connect(this._highpass);\n\t\t\tthis._oscillators[i] = osc;\n\n\t\t\tconst mult = new Multiply({\n\t\t\t\tcontext: this.context,\n\t\t\t\tvalue: inharmRatios[i],\n\t\t\t});\n\t\t\tthis._freqMultipliers[i] = mult;\n\t\t\tthis.frequency.chain(mult, osc.frequency);\n\t\t\tthis.detune.connect(osc.detune);\n\t\t}\n\n\t\tthis._filterFreqScaler = new Scale({\n\t\t\tcontext: this.context,\n\t\t\tmax: 7000,\n\t\t\tmin: this.toFrequency(options.resonance),\n\t\t});\n\n\t\tthis.envelope = new Envelope({\n\t\t\tattack: options.envelope.attack,\n\t\t\tattackCurve: \"linear\",\n\t\t\tcontext: this.context,\n\t\t\tdecay: options.envelope.decay,\n\t\t\trelease: options.envelope.release,\n\t\t\tsustain: 0,\n\t\t});\n\n\t\tthis.envelope.chain(this._filterFreqScaler, this._highpass.frequency);\n\t\tthis.envelope.connect(this._amplitude.gain);\n\t\t// set the octaves\n\t\tthis._octaves = options.octaves;\n\t\tthis.octaves = options.octaves;\n\t}\n\n\tstatic getDefaults(): MetalSynthOptions {\n\t\treturn deepMerge(Monophonic.getDefaults(), {\n\t\t\tenvelope: Object.assign(\n\t\t\t\tomitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())),\n\t\t\t\t{\n\t\t\t\t\tattack: 0.001,\n\t\t\t\t\tdecay: 1.4,\n\t\t\t\t\trelease: 0.2,\n\t\t\t\t},\n\t\t\t),\n\t\t\tharmonicity: 5.1,\n\t\t\tmodulationIndex: 32,\n\t\t\toctaves: 1.5,\n\t\t\tresonance: 4000,\n\t\t});\n\t}\n\n\t/**\n\t * Trigger the attack.\n\t * @param time When the attack should be triggered.\n\t * @param velocity The velocity that the envelope should be triggered at.\n\t */\n\tprotected _triggerEnvelopeAttack(time: Seconds, velocity: NormalRange = 1): this {\n\t\tthis.envelope.triggerAttack(time, velocity);\n\t\tthis._oscillators.forEach(osc => osc.start(time));\n\t\tif (this.envelope.sustain === 0) {\n\t\t\tthis._oscillators.forEach(osc => {\n\t\t\t\tosc.stop(time + this.toSeconds(this.envelope.attack) + this.toSeconds(this.envelope.decay));\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\t\n\t/**\n\t * Trigger the release of the envelope.\n\t * @param time When the release should be triggered.\n\t */\n\tprotected _triggerEnvelopeRelease(time: Seconds): this {\n\t\tthis.envelope.triggerRelease(time);\n\t\tthis._oscillators.forEach(osc => osc.stop(time + this.toSeconds(this.envelope.release)));\n\t\treturn this;\n\t}\n\n\tgetLevelAtTime(time: Time): NormalRange {\n\t\ttime = this.toSeconds(time);\n\t\treturn this.envelope.getValueAtTime(time);\n\t}\n\n\t/**\n\t * The modulationIndex of the oscillators which make up the source.\n\t * see [[FMOscillator.modulationIndex]]\n\t * @min 1\n\t * @max 100\n\t */\n\tget modulationIndex(): number {\n\t\treturn this._oscillators[0].modulationIndex.value;\n\t}\n\tset modulationIndex(val) {\n\t\tthis._oscillators.forEach(osc => (osc.modulationIndex.value = val));\n\t}\n\n\t/**\n\t * The harmonicity of the oscillators which make up the source.\n\t * see Tone.FMOscillator.harmonicity\n\t * @min 0.1\n\t * @max 10\n\t */\n\tget harmonicity(): number {\n\t\treturn this._oscillators[0].harmonicity.value;\n\t}\n\tset harmonicity(val) {\n\t\tthis._oscillators.forEach(osc => (osc.harmonicity.value = val));\n\t}\n\n\t/**\n\t * The lower level of the highpass filter which is attached to the envelope.\n\t * This value should be between [0, 7000]\n\t * @min 0\n\t * @max 7000\n\t */\n\tget resonance(): Frequency {\n\t\treturn this._filterFreqScaler.min;\n\t}\n\tset resonance(val) {\n\t\tthis._filterFreqScaler.min = this.toFrequency(val);\n\t\tthis.octaves = this._octaves;\n\t}\n\n\t/**\n\t * The number of octaves above the \"resonance\" frequency\n\t * that the filter ramps during the attack/decay envelope\n\t * @min 0\n\t * @max 8\n\t */\n\tget octaves(): number {\n\t\treturn this._octaves;\n\t}\n\tset octaves(val) {\n\t\tthis._octaves = val;\n\t\tthis._filterFreqScaler.max = this._filterFreqScaler.min * Math.pow(2, val);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._oscillators.forEach(osc => osc.dispose());\n\t\tthis._freqMultipliers.forEach(freqMult => freqMult.dispose());\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\tthis._filterFreqScaler.dispose();\n\t\tthis._amplitude.dispose();\n\t\tthis.envelope.dispose();\n\t\tthis._highpass.dispose();\n\t\treturn this;\n\t}\n}\n","import { FrequencyClass } from \"../core/type/Frequency\";\nimport { Frequency, Positive, Time } from \"../core/type/Units\";\nimport { deepMerge, optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly, RecursivePartial } from \"../core/util/Interface\";\nimport { Monophonic } from \"./Monophonic\";\nimport { Synth, SynthOptions } from \"./Synth\";\n\nexport interface MembraneSynthOptions extends SynthOptions {\n\tpitchDecay: Time;\n\toctaves: Positive;\n}\n\n/**\n * MembraneSynth makes kick and tom sounds using a single oscillator\n * with an amplitude envelope and frequency ramp. A Tone.OmniOscillator\n * is routed through a Tone.AmplitudeEnvelope to the output. The drum\n * quality of the sound comes from the frequency envelope applied\n * during MembraneSynth.triggerAttack(note). The frequency envelope\n * starts at <code>note * .octaves</code> and ramps to <code>note</code>\n * over the duration of <code>.pitchDecay</code>.\n * @example\n * import { MembraneSynth } from \"tone\";\n * const synth = new MembraneSynth().toDestination();\n * synth.triggerAttackRelease(\"C2\", \"8n\");\n * @category Instrument\n */\nexport class MembraneSynth extends Synth<MembraneSynthOptions> {\n\n\treadonly name: string = \"MembraneSynth\";\n\n\t/**\n\t * The number of octaves the pitch envelope ramps.\n\t * @min 0.5\n\t * @max 8\n\t */\n\toctaves: Positive;\n\n\t/**\n\t * The amount of time the frequency envelope takes.\n\t * @min 0\n\t * @max 0.5\n\t */\n\tpitchDecay: Time;\n\n\t/**\n\t * Portamento is ignored in this synth. use pitch decay instead.\n\t */\n\treadonly portamento = 0;\n\n\t/**\n\t * @param options the options available for the synth see defaults\n\t */\n\tconstructor(options?: RecursivePartial<MembraneSynthOptions>)\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(MembraneSynth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(MembraneSynth.getDefaults(), arguments);\n\n\t\tthis.pitchDecay = options.pitchDecay;\n\t\tthis.octaves = options.octaves;\n\t\treadOnly(this, [\"oscillator\", \"envelope\"]);\n\t}\n\n\tstatic getDefaults(): MembraneSynthOptions {\n\t\treturn deepMerge(Monophonic.getDefaults(), Synth.getDefaults(), {\n\t\t\tenvelope: {\n\t\t\t\tattack: 0.001,\n\t\t\t\tattackCurve: \"exponential\",\n\t\t\t\tdecay: 0.4,\n\t\t\t\trelease: 1.4,\n\t\t\t\tsustain: 0.01,\n\t\t\t},\n\t\t\toctaves: 10,\n\t\t\toscillator: {\n\t\t\t\ttype: \"sine\",\n\t\t\t},\n\t\t\tpitchDecay: 0.05,\n\t\t});\n\t}\n\n\tsetNote(note: Frequency | FrequencyClass, time?: Time): this {\n\t\tconst seconds = this.toSeconds(time);\n\t\tconst hertz = this.toFrequency(note instanceof FrequencyClass ? note.toFrequency() : note);\n\t\tconst maxNote = hertz * this.octaves;\n\t\tthis.oscillator.frequency.setValueAtTime(maxNote, seconds);\n\t\tthis.oscillator.frequency.exponentialRampToValueAtTime(hertz, seconds + this.toSeconds(this.pitchDecay));\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\treturn this;\n\t}\n}\n","import { AmplitudeEnvelope } from \"../component/envelope/AmplitudeEnvelope\";\nimport { NormalRange, Time } from \"../core/type/Units\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { RecursivePartial } from \"../core/util/Interface\";\nimport { Noise, NoiseOptions } from \"../source/Noise\";\nimport { Instrument, InstrumentOptions } from \"./Instrument\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { Envelope, EnvelopeOptions } from \"../component/envelope/Envelope\";\nimport { Source } from \"../source/Source\";\n\nexport interface NoiseSynthOptions extends InstrumentOptions {\n\tenvelope: Omit<EnvelopeOptions, keyof ToneAudioNodeOptions>;\n\tnoise: Omit<NoiseOptions, keyof ToneAudioNodeOptions>;\n}\n\n/**\n * Tone.NoiseSynth is composed of [[Noise]] through an [[AmplitudeEnvelope]]. \n * ```\n * +-------+   +-------------------+\n * | Noise +>--> AmplitudeEnvelope +>--> Output\n * +-------+   +-------------------+\n * ```\n * @example\n * import { NoiseSynth } from \"tone\";\n * const noiseSynth = new NoiseSynth().toDestination();\n * noiseSynth.triggerAttackRelease(\"8n\", 0.05);\n * @category Instrument\n */\nexport class NoiseSynth extends Instrument<NoiseSynthOptions> {\n\n\treadonly name = \"NoiseSynth\";\n\n\t/**\n\t * The noise source.\n\t */\n\treadonly noise: Noise;\n\n\t/**\n\t * The amplitude envelope.\n\t */\n\treadonly envelope: AmplitudeEnvelope;\n\n\tconstructor(options?: RecursivePartial<NoiseSynthOptions>)\n\tconstructor() {\n\t\tsuper(optionsFromArguments(NoiseSynth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(NoiseSynth.getDefaults(), arguments);\n\t\tthis.noise = new Noise(Object.assign({\n\t\t\tcontext: this.context,\n\t\t}, options.noise));\n\n\t\tthis.envelope = new AmplitudeEnvelope(Object.assign({\n\t\t\tcontext: this.context,\n\t\t}, options.envelope));\n\n\t\t// connect the noise to the output\n\t\tthis.noise.chain(this.envelope, this.output);\n\t}\n\n\tstatic getDefaults(): NoiseSynthOptions {\n\t\treturn Object.assign(Instrument.getDefaults(), {\n\t\t\tenvelope: Object.assign(\n\t\t\t\tomitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())),\n\t\t\t\t{\n\t\t\t\t\tdecay: 0.1,\n\t\t\t\t\tsustain: 0.0,\n\t\t\t\t},\n\t\t\t),\n\t\t\tnoise: Object.assign(\n\t\t\t\tomitFromObject(Noise.getDefaults(), Object.keys(Source.getDefaults())),\n\t\t\t\t{\n\t\t\t\t\ttype: \"white\",\n\t\t\t\t},\n\t\t\t),\n\t\t});\n\t}\n\n\t/**\n\t * Start the attack portion of the envelopes. Unlike other\n\t * instruments, Tone.NoiseSynth doesn't have a note.\n\t * @example\n\t * import { NoiseSynth } from \"tone\";\n\t * const noiseSynth = new NoiseSynth().toDestination();\n\t * noiseSynth.triggerAttack();\n\t */\n\ttriggerAttack(time?: Time, velocity: NormalRange = 1): this {\n\t\ttime = this.toSeconds(time);\n\t\t// the envelopes\n\t\tthis.envelope.triggerAttack(time, velocity);\n\t\t// start the noise\n\t\tthis.noise.start(time);\n\t\tif (this.envelope.sustain === 0) {\n\t\t\tthis.noise.stop(time + this.toSeconds(this.envelope.attack) + this.toSeconds(this.envelope.decay));\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Start the release portion of the envelopes.\n\t */\n\ttriggerRelease(time?: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis.envelope.triggerRelease(time);\n\t\tthis.noise.stop(time + this.toSeconds(this.envelope.release));\n\t\treturn this;\n\t}\n\n\tsync(): this {\n\t\tthis._syncMethod(\"triggerAttack\", 0);\n\t\tthis._syncMethod(\"triggerRelease\", 0);\n\t\treturn this;\n\t}\n\n\ttriggerAttackRelease(duration: Time, time?: Time, velocity: NormalRange = 1): this {\n\t\ttime = this.toSeconds(time);\n\t\tduration = this.toSeconds(duration);\n\t\tthis.triggerAttack(time, velocity);\n\t\tthis.triggerRelease(time + duration);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.noise.dispose();\n\t\tthis.envelope.dispose();\n\t\treturn this;\n\t}\n}\n","import { Frequency, NormalRange, Time } from \"../core/type/Units\";\nimport { LowpassCombFilter } from \"../component/filter/LowpassCombFilter\";\nimport { deepMerge } from \"../core/util/Defaults\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { RecursivePartial } from \"../core/util/Interface\";\nimport { Noise } from \"../source/Noise\";\nimport { Instrument, InstrumentOptions } from \"./Instrument\";\n\nexport interface PluckSynthOptions extends InstrumentOptions {\n\tattackNoise: number;\n\tdampening: Frequency;\n\tresonance: NormalRange;\n\trelease: Time;\n}\n\n/**\n * Karplus-String string synthesis.\n * @example\n * import { PluckSynth } from \"tone\";\n * const plucky = new PluckSynth().toDestination();\n * plucky.triggerAttack(\"C4\", \"+0.5\");\n * plucky.triggerAttack(\"C3\", \"+1\");\n * plucky.triggerAttack(\"C2\", \"+1.5\");\n * plucky.triggerAttack(\"C1\", \"+2\");\n * @category Instrument\n */\nexport class PluckSynth extends Instrument<PluckSynthOptions> {\n\n\treadonly name = \"PluckSynth\";\n\n\t/**\n\t * Noise burst at the beginning\n\t */\n\tprivate _noise: Noise;\n\tprivate _lfcf: LowpassCombFilter;\n\n\t/**\n\t * The amount of noise at the attack.\n\t * Nominal range of [0.1, 20]\n\t * @min 0.1\n\t * @max 20\n\t */\n\tattackNoise: number;\n\n\t/**\n\t * The amount of resonance of the pluck. Also correlates to the sustain duration.\n\t */\n\tresonance: NormalRange;\n\n\t/**\n\t * The release time which corresponds to a resonance ramp down to 0\n\t */\n\trelease: Time;\n\n\tconstructor(options?: RecursivePartial<PluckSynthOptions>)\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(PluckSynth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(PluckSynth.getDefaults(), arguments);\n\n\t\tthis._noise = new Noise({\n\t\t\tcontext: this.context,\n\t\t\ttype: \"pink\"\n\t\t});\n\n\t\tthis.attackNoise = options.attackNoise;\n\n\t\tthis._lfcf = new LowpassCombFilter({\n\t\t\tcontext: this.context,\n\t\t\tdampening: options.dampening,\n\t\t\tresonance: options.resonance,\n\t\t});\n\n\t\tthis.resonance = options.resonance;\n\t\tthis.release = options.release;\n\n\t\tthis._noise.connect(this._lfcf);\n\t\tthis._lfcf.connect(this.output);\n\t}\n\n\tstatic getDefaults(): PluckSynthOptions {\n\t\treturn deepMerge(Instrument.getDefaults(), {\n\t\t\tattackNoise: 1,\n\t\t\tdampening: 4000,\n\t\t\tresonance: 0.7,\n\t\t\trelease: 1,\n\t\t});\n\t}\n\n\t/**\n\t * The dampening control. i.e. the lowpass filter frequency of the comb filter\n\t * @min 0\n\t * @max 7000\n\t */\n\tget dampening(): Frequency {\n\t\treturn this._lfcf.dampening;\n\t}\n\tset dampening(fq) {\n\t\tthis._lfcf.dampening = fq;\n\t}\n\n\ttriggerAttack(note: Frequency, time?: Time): this {\n\t\tconst freq = this.toFrequency(note);\n\t\ttime = this.toSeconds(time);\n\t\tconst delayAmount = 1 / freq;\n\t\tthis._lfcf.delayTime.setValueAtTime(delayAmount, time);\n\t\tthis._noise.start(time);\n\t\tthis._noise.stop(time + delayAmount * this.attackNoise);\n\t\tthis._lfcf.resonance.cancelScheduledValues(time);\n\t\tthis._lfcf.resonance.setValueAtTime(this.resonance, time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Ramp down the [[resonance]] to 0 over the duration of the release time.\n\t */\n\ttriggerRelease(time?: Time): this{\n\t\tthis._lfcf.resonance.linearRampTo(0, this.release, time);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._noise.dispose();\n\t\tthis._lfcf.dispose();\n\t\treturn this;\n\t}\n}\n","import { MidiClass } from \"../core/type/Midi\";\nimport { Frequency, MidiNote, NormalRange, Seconds, Time } from \"../core/type/Units\";\nimport { deepMerge, omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { RecursivePartial } from \"../core/util/Interface\";\nimport { isArray, isNumber } from \"../core/util/TypeCheck\";\nimport { Instrument, InstrumentOptions } from \"./Instrument\";\nimport { MembraneSynth, MembraneSynthOptions } from \"./MembraneSynth\";\nimport { FMSynth, FMSynthOptions } from \"./FMSynth\";\nimport { AMSynth, AMSynthOptions } from \"./AMSynth\";\nimport { MetalSynth, MetalSynthOptions } from \"./MetalSynth\";\nimport { Monophonic } from \"./Monophonic\";\nimport { Synth, SynthOptions } from \"./Synth\";\nimport { warn } from \"../core/util/Debug\";\n\ntype VoiceConstructor<V> = {\n\tgetDefaults: () => VoiceOptions<V>;\n} & (new (...args: any[]) => V);\n\ntype OmitMonophonicOptions<T> = Omit<T, \"context\" | \"onsilence\">;\n\ntype VoiceOptions<T> =\n\tT extends MembraneSynth ? MembraneSynthOptions :\n\t\tT extends MetalSynth ? MetalSynthOptions :\n\t\t\tT extends FMSynth ? FMSynthOptions :\n\t\t\t\tT extends AMSynth ? AMSynthOptions :\n\t\t\t\t\tT extends Synth ? SynthOptions :\n\t\t\t\t\t\tnever;\n\n/**\n * The settable synth options. excludes monophonic options.\n */\ntype PartialVoiceOptions<T> = RecursivePartial<OmitMonophonicOptions<VoiceOptions<T>>>;\n\nexport interface PolySynthOptions<Voice> extends InstrumentOptions {\n\tmaxPolyphony: number;\n\tvoice: VoiceConstructor<Voice>;\n\toptions: PartialVoiceOptions<Voice>;\n}\n\n/**\n * PolySynth handles voice creation and allocation for any\n * instruments passed in as the second paramter. PolySynth is\n * not a synthesizer by itself, it merely manages voices of\n * one of the other types of synths, allowing any of the\n * monophonic synthesizers to be polyphonic.\n *\n * @example\n * import { PolySynth } from \"tone\";\n * const synth = new PolySynth().toDestination();\n * // set the attributes across all the voices using 'set'\n * synth.set({ detune: -1200 });\n * // play a chord\n * synth.triggerAttackRelease([\"C4\", \"E4\", \"A4\"], 1);\n * @category Instrument\n */\nexport class PolySynth<Voice extends Monophonic<any> = Synth> extends Instrument<VoiceOptions<Voice>> {\n\n\treadonly name: string = \"PolySynth\";\n\n\t/**\n\t * The voices which are not currently in use\n\t */\n\tprivate _availableVoices: Voice[] = [];\n\n\t/**\n\t * The currently active voices\n\t */\n\tprivate _activeVoices: Array<{midi: MidiNote; voice: Voice; released: boolean}> = [];\n\n\t/**\n\t * All of the allocated voices for this synth.\n\t */\n\tprivate _voices: Voice[] = [];\n\n\t/**\n\t * The options that are set on the synth.\n\t */\n\tprivate options: VoiceOptions<Voice>;\n\n\t/**\n\t * The polyphony limit.\n\t */\n\tmaxPolyphony: number;\n\n\t/**\n\t * The voice constructor\n\t */\n\tprivate readonly voice: VoiceConstructor<Voice>;\n\n\t/**\n\t * A voice used for holding the get/set values\n\t */\n\tprivate _dummyVoice: Voice;\n\n\t/**\n\t * The GC timeout. Held so that it could be cancelled when the node is disposed.\n\t */\n\tprivate _gcTimeout = -1;\n\n\t/**\n\t * A moving average of the number of active voices\n\t */\n\tprivate _averageActiveVoices = 0;\n\n\t/**\n\t * @param voice The constructor of the voices\n\t * @param options\tThe options object to set the synth voice\n\t */\n\tconstructor(\n\t\tvoice?: VoiceConstructor<Voice>,\n\t\toptions?: PartialVoiceOptions<Voice>,\n\t);\n\tconstructor(options?: Partial<PolySynthOptions<Voice>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(PolySynth.getDefaults(), arguments, [\"voice\", \"options\"]));\n\t\tconst options = optionsFromArguments(PolySynth.getDefaults(), arguments, [\"voice\", \"options\"]);\n\n\t\t// check against the old API (pre 14.3.0)\n\t\tthis.assert(!isNumber(options.voice), \"DEPRECATED: The polyphony count is no longer the first argument.\");\n\n\t\tconst defaults = options.voice.getDefaults();\n\t\tthis.options = Object.assign(defaults, options.options) as VoiceOptions<Voice>;\n\t\tthis.voice = options.voice as unknown as VoiceConstructor<Voice>;\n\t\tthis.maxPolyphony = options.maxPolyphony;\n\n\t\t// create the first voice\n\t\tthis._dummyVoice = this._getNextAvailableVoice() as Voice;\n\t\t// remove it from the voices list\n\t\tconst index = this._voices.indexOf(this._dummyVoice);\n\t\tthis._voices.splice(index, 1);\n\t\t// kick off the GC interval\n\t\tthis._gcTimeout = this.context.setInterval(this._collectGarbage.bind(this), 1);\n\t}\n\n\tstatic getDefaults(): PolySynthOptions<Synth> {\n\t\treturn Object.assign(Instrument.getDefaults(), {\n\t\t\tmaxPolyphony: 32,\n\t\t\toptions: {},\n\t\t\tvoice: Synth,\n\t\t});\n\t}\n\n\t/**\n\t * The number of active voices.\n\t */\n\tget activeVoices(): number {\n\t\treturn this._activeVoices.length;\n\t}\n\n\t/**\n\t * Invoked when the source is done making sound, so that it can be\n\t * readded to the pool of available voices\n\t */\n\tprivate _makeVoiceAvailable(voice: Voice): void {\n\t\tthis._availableVoices.push(voice);\n\t\t// remove the midi note from 'active voices'\n\t\tconst activeVoiceIndex = this._activeVoices.findIndex((e) => e.voice === voice);\n\t\tthis._activeVoices.splice(activeVoiceIndex, 1);\n\t}\n\n\t/**\n\t * Get an available voice from the pool of available voices.\n\t * If one is not available and the maxPolyphony limit is reached,\n\t * steal a voice, otherwise return null.\n\t */\n\tprivate _getNextAvailableVoice(): Voice | undefined {\n\t\t// if there are available voices, return the first one\n\t\tif (this._availableVoices.length) {\n\t\t\treturn this._availableVoices.shift();\n\t\t} else if (this._voices.length < this.maxPolyphony) {\n\t\t\t// otherwise if there is still more maxPolyphony, make a new voice\n\t\t\tconst voice = new this.voice(Object.assign(this.options, {\n\t\t\t\tcontext: this.context,\n\t\t\t\tonsilence: this._makeVoiceAvailable.bind(this),\n\t\t\t}));\n\t\t\tvoice.connect(this.output);\n\t\t\tthis._voices.push(voice);\n\t\t\treturn voice;\n\t\t} else {\n\t\t\twarn(\"Max polyphony exceeded. Note dropped.\");\n\t\t}\n\t}\n\n\t/**\n\t * Occasionally check if there are any allocated voices which can be cleaned up.\n\t */\n\tprivate _collectGarbage(): void {\n\t\tthis._averageActiveVoices = Math.max(this._averageActiveVoices * 0.95, this.activeVoices);\n\t\tif (this._availableVoices.length && this._voices.length > Math.ceil(this._averageActiveVoices + 1)) {\n\t\t\t// take off an available note\n\t\t\tconst firstAvail = this._availableVoices.shift() as Voice;\n\t\t\tconst index = this._voices.indexOf(firstAvail);\n\t\t\tthis._voices.splice(index, 1);\n\t\t\tif (!this.context.isOffline) {\n\t\t\t\tfirstAvail.dispose();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Internal method which triggers the attack\n\t */\n\tprivate _triggerAttack(notes: Frequency[], time: Seconds, velocity?: NormalRange): void {\n\t\tnotes.forEach(note => {\n\t\t\tconst midiNote = new MidiClass(this.context, note).toMidi();\n\t\t\tconst voice = this._getNextAvailableVoice();\n\t\t\tif (voice) {\n\t\t\t\tvoice.triggerAttack(note, time, velocity);\n\t\t\t\tthis._activeVoices.push({\n\t\t\t\t\tmidi: midiNote, voice, released: false,\n\t\t\t\t});\n\t\t\t\tthis.log(\"triggerAttack\", note, time);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Internal method which triggers the release\n\t */\n\tprivate _triggerRelease(notes: Frequency[], time: Seconds): void {\n\t\tnotes.forEach(note => {\n\t\t\tconst midiNote = new MidiClass(this.context, note).toMidi();\n\t\t\tconst event = this._activeVoices.find(({ midi, released }) => midi === midiNote && !released);\n\t\t\tif (event) {\n\t\t\t\t// trigger release on that note\n\t\t\t\tevent.voice.triggerRelease(time);\n\t\t\t\t// mark it as released\n\t\t\t\tevent.released = true;\n\t\t\t\tthis.log(\"triggerRelease\", note, time);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Schedule the attack/release events. If the time is in the future, then it should set a timeout\n\t * to wait for just-in-time scheduling\n\t */\n\tprivate _scheduleEvent(type: \"attack\" | \"release\", notes: Frequency[], time: Seconds, velocity?: NormalRange): void {\n\t\tthis.assert(!this.disposed, \"Synth was already disposed\");\n\t\t// if the notes are greater than this amount of time in the future, they should be scheduled with setTimeout\n\t\tif (time <= this.now()) {\n\t\t\t// do it immediately\n\t\t\tif (type === \"attack\") {\n\t\t\t\tthis._triggerAttack(notes, time, velocity);\n\t\t\t} else {\n\t\t\t\tthis._triggerRelease(notes, time);\n\t\t\t}\n\t\t} else {\n\t\t\t// schedule it to start in the future\n\t\t\tthis.context.setTimeout(() => {\n\t\t\t\tthis._scheduleEvent(type, notes, time, velocity);\n\t\t\t}, time - this.now());\n\t\t}\n\t}\n\n\t/**\n\t * Trigger the attack portion of the note\n\t * @param  notes The notes to play. Accepts a single Frequency or an array of frequencies.\n\t * @param  time  The start time of the note.\n\t * @param velocity The velocity of the note.\n\t * @example\n\t * import { FMSynth, now, PolySynth } from \"tone\";\n\t * const synth = new PolySynth(FMSynth).toDestination();\n\t * // trigger a chord immediately with a velocity of 0.2\n\t * synth.triggerAttack([\"Ab3\", \"C4\", \"F5\"], now(), 0.2);\n\t */\n\ttriggerAttack(notes: Frequency | Frequency[], time?: Time, velocity?: NormalRange): this {\n\n\t\tif (!Array.isArray(notes)) {\n\t\t\tnotes = [notes];\n\t\t}\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._scheduleEvent(\"attack\", notes, computedTime, velocity);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Trigger the release of the note. Unlike monophonic instruments,\n\t * a note (or array of notes) needs to be passed in as the first argument.\n\t * @param  notes The notes to play. Accepts a single Frequency or an array of frequencies.\n\t * @param  time  When the release will be triggered.\n\t * @example\n\t * @example\n\t * import { AMSynth, PolySynth } from \"tone\";\n\t * const poly = new PolySynth(AMSynth).toDestination();\n\t * poly.triggerAttack([\"Ab3\", \"C4\", \"F5\"]);\n\t * // trigger the release of the given notes. \n\t * poly.triggerRelease([\"Ab3\", \"C4\"], \"+1\");\n\t * poly.triggerRelease(\"F5\", \"+3\");\n\t */\n\ttriggerRelease(notes: Frequency | Frequency[], time?: Time): this {\n\t\tif (!Array.isArray(notes)) {\n\t\t\tnotes = [notes];\n\t\t}\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._scheduleEvent(\"release\", notes, computedTime);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Trigger the attack and release after the specified duration\n\t * @param  notes The notes to play. Accepts a single  Frequency or an array of frequencies.\n\t * @param  duration the duration of the note\n\t * @param  time  if no time is given, defaults to now\n\t * @param  velocity the velocity of the attack (0-1)\n\t * @example\n\t * import { AMSynth, PolySynth } from \"tone\";\n\t * const poly = new PolySynth(AMSynth).toDestination();\n\t * // can pass in an array of durations as well\n\t * poly.triggerAttackRelease([\"Eb3\", \"G4\", \"Bb4\", \"D5\"], [4, 3, 2, 1]);\n\t */\n\ttriggerAttackRelease(\n\t\tnotes: Frequency | Frequency[],\n\t\tduration: Time | Time[],\n\t\ttime?: Time,\n\t\tvelocity?: NormalRange,\n\t): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis.triggerAttack(notes, computedTime, velocity);\n\t\tif (isArray(duration)) {\n\t\t\tthis.assert(isArray(notes), \"If the duration is an array, the notes must also be an array\");\n\t\t\tnotes = notes as Frequency[];\n\t\t\tfor (let i = 0; i < notes.length; i++) {\n\t\t\t\tconst d = duration[Math.min(i, duration.length - 1)];\n\t\t\t\tconst durationSeconds = this.toSeconds(d);\n\t\t\t\tthis.assert(durationSeconds > 0, \"The duration must be greater than 0\");\n\t\t\t\tthis.triggerRelease(notes[i], computedTime + durationSeconds);\n\t\t\t}\n\t\t} else {\n\t\t\tconst durationSeconds = this.toSeconds(duration);\n\t\t\tthis.assert(durationSeconds > 0, \"The duration must be greater than 0\");\n\t\t\tthis.triggerRelease(notes, computedTime + durationSeconds);\n\t\t}\n\t\treturn this;\n\t}\n\n\tsync(): this {\n\t\tthis._syncMethod(\"triggerAttack\", 1);\n\t\tthis._syncMethod(\"triggerRelease\", 1);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set a member/attribute of the voices\n\t * @example\n\t * import { PolySynth } from \"tone\";\n\t * const poly = new PolySynth().toDestination();\n\t * // set all of the voices using an options object for the synth type\n\t * poly.set({\n\t * \tenvelope: {\n\t * \t\tattack: 0.25\n\t * \t}\n\t * });\n\t * poly.triggerAttackRelease(\"Bb3\", 0.2);\n\t */\n\tset(options: RecursivePartial<VoiceOptions<Voice>>): this {\n\t\t// remove options which are controlled by the PolySynth\n\t\tconst sanitizedOptions = omitFromObject(options, [\"onsilence\", \"context\"]);\n\t\t// store all of the options\n\t\tthis.options = deepMerge(this.options, sanitizedOptions);\n\t\tthis._voices.forEach(voice => voice.set(sanitizedOptions));\n\t\tthis._dummyVoice.set(sanitizedOptions);\n\t\treturn this;\n\t}\n\n\tget(): VoiceOptions<Voice> {\n\t\treturn this._dummyVoice.get();\n\t}\n\n\t/**\n\t * Trigger the release portion of all the currently active voices immediately.\n\t * Useful for silencing the synth.\n\t */\n\treleaseAll(): this {\n\t\tconst now = this.now();\n\t\tthis._activeVoices.forEach(({ voice }) => {\n\t\t\tvoice.triggerRelease(now);\n\t\t});\n\t\tthis._activeVoices = [];\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._dummyVoice.dispose();\n\t\tthis._voices.forEach(v => v.dispose());\n\t\tthis._activeVoices = [];\n\t\tthis._availableVoices = [];\n\t\tthis.context.clearInterval(this._gcTimeout);\n\t\treturn this;\n\t}\n}\n","import { ToneAudioBuffer } from \"../core/context/ToneAudioBuffer\";\nimport { ToneAudioBuffers } from \"../core/context/ToneAudioBuffers\";\nimport { intervalToFrequencyRatio } from \"../core/type/Conversions\";\nimport { FrequencyClass } from \"../core/type/Frequency\";\nimport { Frequency, Interval, MidiNote, NormalRange, Note, Time } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { isArray, isNote, isNumber } from \"../core/util/TypeCheck\";\nimport { Instrument, InstrumentOptions } from \"../instrument/Instrument\";\nimport { ToneBufferSource, ToneBufferSourceCurve } from \"../source/buffer/ToneBufferSource\";\n\ninterface SamplesMap {\n\t[note: string]: ToneAudioBuffer | AudioBuffer | string;\n\t[midi: number]: ToneAudioBuffer | AudioBuffer | string;\n}\n\nexport interface SamplerOptions extends InstrumentOptions {\n\tattack: Time;\n\trelease: Time;\n\tonload: () => void;\n\tbaseUrl: string;\n\tcurve: ToneBufferSourceCurve;\n\turls: SamplesMap;\n}\n\n/**\n * Pass in an object which maps the note's pitch or midi value to the url,\n * then you can trigger the attack and release of that note like other instruments.\n * By automatically repitching the samples, it is possible to play pitches which\n * were not explicitly included which can save loading time.\n *\n * For sample or buffer playback where repitching is not necessary,\n * use [[Player]].\n * @example\n * import { Sampler } from \"tone\";\n * const sampler = new Sampler({\n * \turls: {\n * \t\tC1: \"C1.mp3\",\n * \t\tC2: \"C2.mp3\",\n * \t},\n * \tbaseUrl: \"https://tonejs.github.io/examples/audio/casio/\",\n * \tonload: () => {\n * \t\tsampler.triggerAttackRelease([\"C1\", \"E1\", \"G1\", \"B1\"], 0.5);\n * \t},\n * });\n * @category Instrument\n */\nexport class Sampler extends Instrument<SamplerOptions> {\n\n\treadonly name: string = \"Sampler\";\n\n\t/**\n\t * The stored and loaded buffers\n\t */\n\tprivate _buffers: ToneAudioBuffers;\n\n\t/**\n\t * The object of all currently playing BufferSources\n\t */\n\tprivate _activeSources: Map<MidiNote, ToneBufferSource[]> = new Map();\n\n\t/**\n\t * The envelope applied to the beginning of the sample.\n\t * @min 0\n\t * @max 1\n\t */\n\tattack: Time;\n\t\n\t/**\n\t * The envelope applied to the end of the envelope.\n\t * @min 0\n\t * @max 1\n\t */\n\trelease: Time;\n\n\t/**\n\t * The shape of the attack/release curve.\n\t * Either \"linear\" or \"exponential\"\n\t */\n\tcurve: ToneBufferSourceCurve;\n\n\t/**\n\t * @param samples An object of samples mapping either Midi Note Numbers or\n\t * \t\t\tScientific Pitch Notation to the url of that sample.\n\t * @param onload The callback to invoke when all of the samples are loaded.\n\t * @param baseUrl The root URL of all of the samples, which is prepended to all the URLs.\n\t */\n\tconstructor(samples?: SamplesMap, onload?: () => void, baseUrl?: string);\n\t/**\n\t * @param samples An object of samples mapping either Midi Note Numbers or\n\t * \t\t\tScientific Pitch Notation to the url of that sample.\n\t * @param options The remaining options associated with the sampler\n\t */\n\tconstructor(samples?: SamplesMap, options?: Partial<Omit<SamplerOptions, \"urls\">>);\n\tconstructor(options?: Partial<SamplerOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Sampler.getDefaults(), arguments, [\"urls\", \"onload\", \"baseUrl\"], \"urls\"));\n\t\tconst options = optionsFromArguments(Sampler.getDefaults(), arguments, [\"urls\", \"onload\", \"baseUrl\"], \"urls\");\n\n\t\tconst urlMap = {};\n\t\tObject.keys(options.urls).forEach((note) => {\n\t\t\tconst noteNumber = parseInt(note, 10);\n\t\t\tthis.assert(isNote(note)\n\t\t\t\t|| (isNumber(noteNumber) && isFinite(noteNumber)), `url key is neither a note or midi pitch: ${note}`);\n\t\t\tif (isNote(note)) {\n\t\t\t\t// convert the note name to MIDI\n\t\t\t\tconst mid = new FrequencyClass(this.context, note).toMidi();\n\t\t\t\turlMap[mid] = options.urls[note];\n\t\t\t} else if (isNumber(noteNumber) && isFinite(noteNumber)) {\n\t\t\t\t// otherwise if it's numbers assume it's midi\n\t\t\t\turlMap[noteNumber] = options.urls[noteNumber];\n\t\t\t}\n\t\t});\n\n\t\tthis._buffers = new ToneAudioBuffers(urlMap, options.onload, options.baseUrl);\n\t\tthis.attack = options.attack;\n\t\tthis.release = options.release;\n\t\tthis.curve = options.curve;\n\n\t\t// invoke the callback if it's already loaded\n\t\tif (this._buffers.loaded) {\n\t\t\t// invoke onload deferred\n\t\t\tPromise.resolve().then(options.onload);\n\t\t}\n\t}\n\n\tstatic getDefaults(): SamplerOptions {\n\t\treturn Object.assign(Instrument.getDefaults(), {\n\t\t\tattack: 0,\n\t\t\tbaseUrl: \"\",\n\t\t\tcurve: \"exponential\" as \"exponential\",\n\t\t\tonload: noOp,\n\t\t\trelease: 0.1,\n\t\t\turls: {},\n\t\t});\n\t}\n\n\t/**\n\t * Returns the difference in steps between the given midi note at the closets sample.\n\t */\n\tprivate _findClosest(midi: MidiNote): Interval {\n\t\t// searches within 8 octaves of the given midi note\n\t\tconst MAX_INTERVAL = 96;\n\t\tlet interval = 0;\n\t\twhile (interval < MAX_INTERVAL) {\n\t\t\t// check above and below\n\t\t\tif (this._buffers.has(midi + interval)) {\n\t\t\t\treturn -interval;\n\t\t\t} else if (this._buffers.has(midi - interval)) {\n\t\t\t\treturn interval;\n\t\t\t}\n\t\t\tinterval++;\n\t\t}\n\t\tthrow new Error(`No available buffers for note: ${midi}`);\n\t}\n\n\t/**\n\t * @param  notes\tThe note to play, or an array of notes.\n\t * @param  time     When to play the note\n\t * @param  velocity The velocity to play the sample back.\n\t */\n\ttriggerAttack(notes: Frequency | Frequency[], time?: Time, velocity: NormalRange = 1): this {\n\t\tthis.log(\"triggerAttack\", notes, time, velocity);\n\t\tif (!Array.isArray(notes)) {\n\t\t\tnotes = [notes];\n\t\t}\n\t\tnotes.forEach(note => {\n\t\t\tconst midi = new FrequencyClass(this.context, note).toMidi();\n\t\t\t// find the closest note pitch\n\t\t\tconst difference = this._findClosest(midi);\n\t\t\tconst closestNote = midi - difference;\n\t\t\tconst buffer = this._buffers.get(closestNote);\n\t\t\tconst playbackRate = intervalToFrequencyRatio(difference);\n\t\t\t// play that note\n\t\t\tconst source = new ToneBufferSource({\n\t\t\t\tbuffer,\n\t\t\t\tcontext: this.context,\n\t\t\t\tcurve: this.curve,\n\t\t\t\tfadeIn: this.attack,\n\t\t\t\tfadeOut: this.release,\n\t\t\t\tplaybackRate,\n\t\t\t}).connect(this.output);\n\t\t\tsource.start(time, 0, buffer.duration / playbackRate, velocity);\n\t\t\t// add it to the active sources\n\t\t\tif (!isArray(this._activeSources.get(midi))) {\n\t\t\t\tthis._activeSources.set(midi, []);\n\t\t\t}\n\t\t\t(this._activeSources.get(midi) as ToneBufferSource[]).push(source);\n\n\t\t\t// remove it when it's done\n\t\t\tsource.onended = () => {\n\t\t\t\tif (this._activeSources && this._activeSources.has(midi)) {\n\t\t\t\t\tconst sources = this._activeSources.get(midi) as ToneBufferSource[];\n\t\t\t\t\tconst index = sources.indexOf(source);\n\t\t\t\t\tif (index !== -1) {\n\t\t\t\t\t\tsources.splice(index, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * @param  notes\tThe note to release, or an array of notes.\n\t * @param  time     \tWhen to release the note.\n\t */\n\ttriggerRelease(notes: Frequency | Frequency[], time?: Time): this {\n\t\tthis.log(\"triggerRelease\", notes, time);\n\t\tif (!Array.isArray(notes)) {\n\t\t\tnotes = [notes];\n\t\t}\n\t\tnotes.forEach(note => {\n\t\t\tconst midi = new FrequencyClass(this.context, note).toMidi();\n\t\t\t// find the note\n\t\t\tif (this._activeSources.has(midi) && (this._activeSources.get(midi) as ToneBufferSource[]).length) {\n\t\t\t\tconst sources = this._activeSources.get(midi) as ToneBufferSource[];\n\t\t\t\ttime = this.toSeconds(time);\n\t\t\t\tsources.forEach(source => {\n\t\t\t\t\tsource.stop(time);\n\t\t\t\t});\n\t\t\t\tthis._activeSources.set(midi, []);\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Release all currently active notes.\n\t * @param  time     \tWhen to release the notes.\n\t */\n\treleaseAll(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._activeSources.forEach(sources => {\n\t\t\twhile (sources.length) {\n\t\t\t\tconst source = sources.shift() as ToneBufferSource;\n\t\t\t\tsource.stop(computedTime);\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\tsync(): this {\n\t\tthis._syncMethod(\"triggerAttack\", 1);\n\t\tthis._syncMethod(\"triggerRelease\", 1);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Invoke the attack phase, then after the duration, invoke the release.\n\t * @param  notes\tThe note to play and release, or an array of notes.\n\t * @param  duration The time the note should be held\n\t * @param  time     When to start the attack\n\t * @param  velocity The velocity of the attack\n\t */\n\ttriggerAttackRelease(\n\t\tnotes: Frequency[] | Frequency,\n\t\tduration: Time | Time[],\n\t\ttime?: Time,\n\t\tvelocity: NormalRange = 1,\n\t): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis.triggerAttack(notes, computedTime, velocity);\n\t\tif (isArray(duration)) {\n\t\t\tthis.assert(isArray(notes), \"notes must be an array when duration is array\");\n\t\t\t(notes as Frequency[]).forEach((note, index) => {\n\t\t\t\tconst d = duration[Math.min(index, duration.length - 1)];\n\t\t\t\tthis.triggerRelease(note, computedTime + this.toSeconds(d));\n\t\t\t});\n\t\t} else {\n\t\t\tthis.triggerRelease(notes, computedTime + this.toSeconds(duration));\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a note to the sampler.\n\t * @param  note      The buffer's pitch.\n\t * @param  url  Either the url of the buffer, or a buffer which will be added with the given name.\n\t * @param  callback  The callback to invoke when the url is loaded.\n\t */\n\tadd(note: Note | MidiNote, url: string | ToneAudioBuffer | AudioBuffer, callback?: () => void): this {\n\t\tthis.assert(isNote(note) || isFinite(note), `note must be a pitch or midi: ${note}`);\n\t\tif (isNote(note)) {\n\t\t\t// convert the note name to MIDI\n\t\t\tconst mid = new FrequencyClass(this.context, note).toMidi();\n\t\t\tthis._buffers.add(mid, url, callback);\n\t\t} else {\n\t\t\t// otherwise if it's numbers assume it's midi\n\t\t\tthis._buffers.add(note, url, callback);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * If the buffers are loaded or not\n\t */\n\tget loaded(): boolean {\n\t\treturn this._buffers.loaded;\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._buffers.dispose();\n\t\tthis._activeSources.forEach(sources => {\n\t\t\tsources.forEach(source => source.dispose());\n\t\t});\n\t\tthis._activeSources.clear();\n\t\treturn this;\n\t}\n}\n","import \"../core/clock/Transport\";\nimport { ToneWithContext, ToneWithContextOptions } from \"../core/context/ToneWithContext\";\nimport { TicksClass } from \"../core/type/Ticks\";\nimport { TransportTimeClass } from \"../core/type/TransportTime\";\nimport { NormalRange, Positive, Seconds, Ticks, Time, TransportTime } from \"../core/type/Units\";\nimport { defaultArg, optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { BasicPlaybackState, StateTimeline } from \"../core/util/StateTimeline\";\nimport { isBoolean, isNumber } from \"../core/util/TypeCheck\";\n\nexport type ToneEventCallback<T> = (time: Seconds, value: T) => void;\n\nexport interface ToneEventOptions<T> extends ToneWithContextOptions {\n\tcallback: ToneEventCallback<T>;\n\tloop: boolean | number;\n\tloopEnd: Time;\n\tloopStart: Time;\n\tplaybackRate: Positive;\n\tvalue?: T;\n\tprobability: NormalRange;\n\tmute: boolean;\n\thumanize: boolean | Time;\n}\n\n/**\n * ToneEvent abstracts away this.context.transport.schedule and provides a schedulable\n * callback for a single or repeatable events along the timeline.\n *\n * @example\n * import { PolySynth, Sequence, ToneEvent, Transport } from \"tone\";\n * \n * const synth = new PolySynth().toDestination();\n * const chordEvent = new ToneEvent(((time, chord) => {\n * \t// the chord as well as the exact time of the event\n * \t// are passed in as arguments to the callback function\n * \tsynth.triggerAttackRelease(chord, 0.5, time);\n * }), [\"D4\", \"E4\", \"F4\"]);\n * // start the chord at the beginning of the transport timeline\n * chordEvent.start();\n * // loop it every measure for 8 measures\n * chordEvent.loop = 8;\n * chordEvent.loopEnd = \"1m\";\n * @category Event\n */\nexport class ToneEvent<ValueType = any> extends ToneWithContext<ToneEventOptions<ValueType>> {\n\n\treadonly name: string = \"ToneEvent\";\n\n\t/**\n\t * Loop value\n\t */\n\tprotected _loop: boolean | number;\n\n\t/**\n\t * The callback to invoke.\n\t */\n\tcallback: ToneEventCallback<ValueType>;\n\n\t/**\n\t * The value which is passed to the\n\t * callback function.\n\t */\n\tvalue: ValueType;\n\n\t/**\n\t * When the note is scheduled to start.\n\t */\n\tprotected _loopStart: Ticks;\n\n\t/**\n\t * When the note is scheduled to start.\n\t */\n\tprotected _loopEnd: Ticks;\n\n\t/**\n\t * Tracks the scheduled events\n\t */\n\tprotected _state: StateTimeline<{\n\t\tid: number;\n\t}> = new StateTimeline(\"stopped\");\n\n\t/**\n\t * The playback speed of the note. A speed of 1\n\t * is no change.\n\t */\n\tprotected _playbackRate: Positive;\n\n\t/**\n\t * A delay time from when the event is scheduled to start\n\t */\n\tprotected _startOffset: Ticks = 0;\n\n\t/**\n\t * private holder of probability value\n\t */\n\tprotected _probability: NormalRange;\n\n\t/**\n\t * the amount of variation from the given time.\n\t */\n\tprotected _humanize: boolean | Time;\n\n\t/**\n\t * If mute is true, the callback won't be invoked.\n\t */\n\tmute: boolean;\n\n\t/**\n\t * @param callback The callback to invoke at the time.\n\t * @param value The value or values which should be passed to the callback function on invocation.\n\t */\n\tconstructor(callback?: ToneEventCallback<ValueType>, value?: ValueType);\n\tconstructor(options?: Partial<ToneEventOptions<ValueType>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(ToneEvent.getDefaults(), arguments, [\"callback\", \"value\"]));\n\t\tconst options = optionsFromArguments(ToneEvent.getDefaults(), arguments, [\"callback\", \"value\"]);\n\n\t\tthis._loop = options.loop;\n\t\tthis.callback = options.callback;\n\t\tthis.value = options.value;\n\t\tthis._loopStart = this.toTicks(options.loopStart);\n\t\tthis._loopEnd = this.toTicks(options.loopEnd);\n\t\tthis._playbackRate = options.playbackRate;\n\t\tthis._probability = options.probability;\n\t\tthis._humanize = options.humanize;\n\t\tthis.mute = options.mute;\n\t\tthis._playbackRate = options.playbackRate;\n\t\tthis._state.increasing = true;\n\t\t// schedule the events for the first time\n\t\tthis._rescheduleEvents();\n\t}\n\n\tstatic getDefaults(): ToneEventOptions<any> {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tcallback: noOp,\n\t\t\thumanize: false,\n\t\t\tloop: false,\n\t\t\tloopEnd: \"1m\",\n\t\t\tloopStart: 0,\n\t\t\tmute: false,\n\t\t\tplaybackRate: 1,\n\t\t\tprobability: 1,\n\t\t\tvalue: null,\n\t\t});\n\t}\n\n\t/**\n\t * Reschedule all of the events along the timeline\n\t * with the updated values.\n\t * @param after Only reschedules events after the given time.\n\t */\n\tprivate _rescheduleEvents(after: Ticks = -1): void {\n\t\t// if no argument is given, schedules all of the events\n\t\tthis._state.forEachFrom(after, event => {\n\t\t\tlet duration;\n\t\t\tif (event.state === \"started\") {\n\t\t\t\tif (event.id !== -1) {\n\t\t\t\t\tthis.context.transport.clear(event.id);\n\t\t\t\t}\n\t\t\t\tconst startTick = event.time + Math.round(this.startOffset / this._playbackRate);\n\t\t\t\tif (this._loop === true || isNumber(this._loop) && this._loop > 1) {\n\t\t\t\t\tduration = Infinity;\n\t\t\t\t\tif (isNumber(this._loop)) {\n\t\t\t\t\t\tduration = (this._loop) * this._getLoopDuration();\n\t\t\t\t\t}\n\t\t\t\t\tconst nextEvent = this._state.getAfter(startTick);\n\t\t\t\t\tif (nextEvent !== null) {\n\t\t\t\t\t\tduration = Math.min(duration, nextEvent.time - startTick);\n\t\t\t\t\t}\n\t\t\t\t\tif (duration !== Infinity) {\n\t\t\t\t\t\t// schedule a stop since it's finite duration\n\t\t\t\t\t\tthis._state.setStateAtTime(\"stopped\", startTick + duration + 1, { id: -1 });\n\t\t\t\t\t\tduration = new TicksClass(this.context, duration);\n\t\t\t\t\t}\n\t\t\t\t\tconst interval = new TicksClass(this.context, this._getLoopDuration());\n\t\t\t\t\tevent.id = this.context.transport.scheduleRepeat(\n\t\t\t\t\t\tthis._tick.bind(this), interval, new TicksClass(this.context, startTick), duration);\n\t\t\t\t} else {\n\t\t\t\t\tevent.id = this.context.transport.schedule(this._tick.bind(this), new TicksClass(this.context, startTick));\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Returns the playback state of the note, either \"started\" or \"stopped\".\n\t */\n\tget state(): BasicPlaybackState {\n\t\treturn this._state.getValueAtTime(this.context.transport.ticks) as BasicPlaybackState;\n\t}\n\n\t/**\n\t * The start from the scheduled start time.\n\t */\n\tget startOffset(): Ticks {\n\t\treturn this._startOffset;\n\t}\n\tset startOffset(offset) {\n\t\tthis._startOffset = offset;\n\t}\n\n\t/**\n\t * The probability of the notes being triggered.\n\t */\n\tget probability(): NormalRange {\n\t\treturn this._probability;\n\t}\n\tset probability(prob) {\n\t\tthis._probability = prob;\n\t}\n\n\t/**\n\t * If set to true, will apply small random variation\n\t * to the callback time. If the value is given as a time, it will randomize\n\t * by that amount.\n\t * @example\n\t * import { ToneEvent } from \"tone\";\n\t * const event = new ToneEvent();\n\t * event.humanize = true;\n\t */\n\tget humanize(): Time | boolean {\n\t\treturn this._humanize;\n\t}\n\n\tset humanize(variation) {\n\t\tthis._humanize = variation;\n\t}\n\n\t/**\n\t * Start the note at the given time.\n\t * @param  time  When the event should start.\n\t */\n\tstart(time?: TransportTime | TransportTimeClass): this {\n\t\tconst ticks = this.toTicks(time);\n\t\tif (this._state.getValueAtTime(ticks) === \"stopped\") {\n\t\t\tthis._state.add({\n\t\t\t\tid: -1,\n\t\t\t\tstate: \"started\",\n\t\t\t\ttime: ticks,\n\t\t\t});\n\t\t\tthis._rescheduleEvents(ticks);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the Event at the given time.\n\t * @param  time  When the event should stop.\n\t */\n\tstop(time?: TransportTime | TransportTimeClass): this {\n\t\tthis.cancel(time);\n\t\tconst ticks = this.toTicks(time);\n\t\tif (this._state.getValueAtTime(ticks) === \"started\") {\n\t\t\tthis._state.setStateAtTime(\"stopped\", ticks, { id: -1 });\n\t\t\tconst previousEvent = this._state.getBefore(ticks);\n\t\t\tlet reschedulTime = ticks;\n\t\t\tif (previousEvent !== null) {\n\t\t\t\treschedulTime = previousEvent.time;\n\t\t\t}\n\t\t\tthis._rescheduleEvents(reschedulTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Cancel all scheduled events greater than or equal to the given time\n\t * @param  time  The time after which events will be cancel.\n\t */\n\tcancel(time?: TransportTime | TransportTimeClass): this {\n\t\ttime = defaultArg(time, -Infinity);\n\t\tconst ticks = this.toTicks(time);\n\t\tthis._state.forEachFrom(ticks, event => {\n\t\t\tthis.context.transport.clear(event.id);\n\t\t});\n\t\tthis._state.cancel(ticks);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The callback function invoker. Also\n\t * checks if the Event is done playing\n\t * @param  time  The time of the event in seconds\n\t */\n\tprotected _tick(time: Seconds): void {\n\t\tconst ticks = this.context.transport.getTicksAtTime(time);\n\t\tif (!this.mute && this._state.getValueAtTime(ticks) === \"started\") {\n\t\t\tif (this.probability < 1 && Math.random() > this.probability) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (this.humanize) {\n\t\t\t\tlet variation = 0.02;\n\t\t\t\tif (!isBoolean(this.humanize)) {\n\t\t\t\t\tvariation = this.toSeconds(this.humanize);\n\t\t\t\t}\n\t\t\t\ttime += (Math.random() * 2 - 1) * variation;\n\t\t\t}\n\t\t\tthis.callback(time, this.value);\n\t\t}\n\t}\n\n\t/**\n\t * Get the duration of the loop.\n\t */\n\tprotected _getLoopDuration(): Ticks {\n\t\treturn Math.round((this._loopEnd - this._loopStart) / this._playbackRate);\n\t}\n\n\t/**\n\t * If the note should loop or not\n\t * between ToneEvent.loopStart and\n\t * ToneEvent.loopEnd. If set to true,\n\t * the event will loop indefinitely,\n\t * if set to a number greater than 1\n\t * it will play a specific number of\n\t * times, if set to false, 0 or 1, the\n\t * part will only play once.\n\t */\n\tget loop(): boolean | number {\n\t\treturn this._loop;\n\t}\n\tset loop(loop) {\n\t\tthis._loop = loop;\n\t\tthis._rescheduleEvents();\n\t}\n\n\t/**\n\t * The playback rate of the note. Defaults to 1.\n\t * @example\n\t * import { ToneEvent } from \"tone\";\n\t * const note = new ToneEvent();\n\t * note.loop = true;\n\t * // repeat the note twice as fast\n\t * note.playbackRate = 2;\n\t */\n\tget playbackRate(): Positive {\n\t\treturn this._playbackRate;\n\t}\n\tset playbackRate(rate) {\n\t\tthis._playbackRate = rate;\n\t\tthis._rescheduleEvents();\n\t}\n\n\t/**\n\t * The loopEnd point is the time the event will loop\n\t * if ToneEvent.loop is true.\n\t */\n\tget loopEnd(): Time {\n\t\treturn new TicksClass(this.context, this._loopEnd).toSeconds();\n\t}\n\tset loopEnd(loopEnd) {\n\t\tthis._loopEnd = this.toTicks(loopEnd);\n\t\tif (this._loop) {\n\t\t\tthis._rescheduleEvents();\n\t\t}\n\t}\n\n\t/**\n\t * The time when the loop should start.\n\t */\n\tget loopStart(): Time {\n\t\treturn new TicksClass(this.context, this._loopStart).toSeconds();\n\t}\n\tset loopStart(loopStart) {\n\t\tthis._loopStart = this.toTicks(loopStart);\n\t\tif (this._loop) {\n\t\t\tthis._rescheduleEvents();\n\t\t}\n\t}\n\n\t/**\n\t * The current progress of the loop interval.\n\t * Returns 0 if the event is not started yet or\n\t * it is not set to loop.\n\t */\n\tget progress(): NormalRange {\n\t\tif (this._loop) {\n\t\t\tconst ticks = this.context.transport.ticks;\n\t\t\tconst lastEvent = this._state.get(ticks);\n\t\t\tif (lastEvent !== null && lastEvent.state === \"started\") {\n\t\t\t\tconst loopDuration = this._getLoopDuration();\n\t\t\t\tconst progress = (ticks - lastEvent.time) % loopDuration;\n\t\t\t\treturn progress / loopDuration;\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.cancel();\n\t\tthis._state.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneEvent } from \"./ToneEvent\";\nimport { NormalRange, Positive, Seconds, Time, TransportTime } from \"../core/type/Units\";\nimport { ToneWithContext, ToneWithContextOptions } from \"../core/context/ToneWithContext\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { BasicPlaybackState } from \"../core/util/StateTimeline\";\n\nexport interface LoopOptions extends ToneWithContextOptions {\n\tcallback: (time: Seconds) => void;\n\tinterval: Time;\n\tplaybackRate: Positive;\n\titerations: number;\n\tprobability: NormalRange;\n\tmute: boolean;\n\thumanize: boolean | Time;\n}\n\n/**\n * Loop creates a looped callback at the \n * specified interval. The callback can be \n * started, stopped and scheduled along\n * the Transport's timeline. \n * @example\n * import { Loop, Transport } from \"tone\";\n * const loop = new Loop((time) => {\n * \t// triggered every eighth note. \n * \tconsole.log(time);\n * }, \"8n\").start(0);\n * Transport.start();\n * @category Event\n */\nexport class Loop<Options extends LoopOptions = LoopOptions> extends ToneWithContext<Options> {\n\n\treadonly name: string = \"Loop\";\n\n\t/**\n\t * The event which produces the callbacks\n\t */\n\tprivate _event: ToneEvent;\n\n\t/**\n\t * The callback to invoke with the next event in the pattern\n\t */\n\tcallback: (time: Seconds) => void\n\n\t/**\n\t * @param callback The callback to invoke at the time.\n\t * @param interval The time between successive callback calls. \n\t */\n\tconstructor(callback?: (time: Seconds) => void, interval?: Time);\n\tconstructor(options?: Partial<LoopOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Loop.getDefaults(), arguments, [\"callback\", \"interval\"]));\n\t\tconst options = optionsFromArguments(Loop.getDefaults(), arguments, [\"callback\", \"interval\"]);\n\n\t\tthis._event = new ToneEvent({\n\t\t\tcontext: this.context,\n\t\t\tcallback: this._tick.bind(this),\n\t\t\tloop: true,\n\t\t\tloopEnd: options.interval,\n\t\t\tplaybackRate: options.playbackRate,\n\t\t\tprobability: options.probability\n\t\t});\n\n\t\tthis.callback = options.callback;\n\t\t// set the iterations\n\t\tthis.iterations = options.iterations;\n\t}\n\n\tstatic getDefaults(): LoopOptions {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tinterval: \"4n\",\n\t\t\tcallback: noOp,\n\t\t\tplaybackRate: 1,\n\t\t\titerations: Infinity,\n\t\t\tprobability: 1,\n\t\t\tmute: false,\n\t\t\thumanize: false\n\t\t});\n\t}\n\n\t/**\n\t * Start the loop at the specified time along the Transport's timeline.\n\t * @param  time  When to start the Loop.\n\t */\n\tstart(time?: TransportTime): this {\n\t\tthis._event.start(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the loop at the given time.\n\t * @param  time  When to stop the Loop.\n\t */\n\tstop(time?: TransportTime): this{\n\t\tthis._event.stop(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Cancel all scheduled events greater than or equal to the given time\n\t * @param  time  The time after which events will be cancel.\n\t */\n\tcancel(time?: TransportTime): this{\n\t\tthis._event.cancel(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Internal function called when the notes should be called\n\t * @param time  The time the event occurs\n\t */\n\tprotected _tick(time: Seconds): void {\n\t\tthis.callback(time);\n\t}\n\n\t/**\n\t * The state of the Loop, either started or stopped.\n\t */\n\tget state(): BasicPlaybackState {\n\t\treturn this._event.state;\n\t}\n\n\t/**\n\t * The progress of the loop as a value between 0-1. 0, when the loop is stopped or done iterating. \n\t */\n\tget progress(): NormalRange {\n\t\treturn this._event.progress;\n\t}\n\n\t/**\n\t * The time between successive callbacks. \n\t * @example\n\t * import { Loop, Transport } from \"tone\";\n\t * const loop = new Loop();\n\t * loop.interval = \"8n\"; // loop every 8n\n\t */\n\tget interval(): Time {\n\t\treturn this._event.loopEnd;\n\t}\n\tset interval(interval) {\n\t\tthis._event.loopEnd = interval;\n\t}\n\n\t/**\n\t * The playback rate of the loop. The normal playback rate is 1 (no change). \n\t * A `playbackRate` of 2 would be twice as fast. \n\t */\n\tget playbackRate(): Positive {\n\t\treturn this._event.playbackRate;\n\t}\n\tset playbackRate(rate) {\n\t\tthis._event.playbackRate = rate;\n\t}\n\n\t/**\n\t * Random variation +/-0.01s to the scheduled time. \n\t * Or give it a time value which it will randomize by.\n\t */\n\tget humanize(): boolean | Time {\n\t\treturn this._event.humanize;\n\t}\n\tset humanize(variation) {\n\t\tthis._event.humanize = variation;\n\t}\n\n\t/**\n\t * The probably of the callback being invoked.\n\t */\n\tget probability(): NormalRange {\n\t\treturn this._event.probability;\n\t}\n\n\tset probability(prob) {\n\t\tthis._event.probability = prob;\n\t}\n\n\t/**\n\t * Muting the Loop means that no callbacks are invoked.\n\t */\n\tget mute(): boolean {\n\t\treturn this._event.mute;\n\t}\n\n\tset mute(mute) {\n\t\tthis._event.mute = mute;\n\t}\n\n\t/**\n\t * The number of iterations of the loop. The default value is `Infinity` (loop forever).\n\t */\n\tget iterations(): number {\n\t\tif (this._event.loop === true) {\n\t\t\treturn Infinity;\n\t\t} else {\n\t\t\treturn this._event.loop as number;\n\t\t}\n\t}\n\tset iterations(iters) {\n\t\tif (iters === Infinity) {\n\t\t\tthis._event.loop = true;\n\t\t} else {\n\t\t\tthis._event.loop = iters;\n\t\t}\n\t}\n\n\tdispose(): this{\n\t\tsuper.dispose();\n\t\tthis._event.dispose();\n\t\treturn this;\n\t}\n}\n","import { TicksClass } from \"../core/type/Ticks\";\nimport { TransportTimeClass } from \"../core/type/TransportTime\";\nimport { NormalRange, Positive, Seconds, Ticks, Time, TransportTime } from \"../core/type/Units\";\nimport { defaultArg, optionsFromArguments } from \"../core/util/Defaults\";\nimport { StateTimeline } from \"../core/util/StateTimeline\";\nimport { isArray, isDefined, isObject, isUndef } from \"../core/util/TypeCheck\";\nimport { ToneEvent, ToneEventCallback, ToneEventOptions } from \"./ToneEvent\";\n\ntype CallbackType<T> =\n\tT extends {\n\t\ttime: Time;\n\t\t[key: string]: any;\n\t} ? T :\n\t\tT extends ArrayLike<any> ? T[1] :\n\t\t\tT extends Time ? null : never;\n\ninterface PartOptions<T> extends Omit<ToneEventOptions<CallbackType<T>>, \"value\"> {\n\tevents: T[];\n}\n\n/**\n * Part is a collection ToneEvents which can be started/stopped and looped as a single unit.\n *\n * @example\n * import { Part, Synth } from \"tone\";\n * const synth = new Synth().toDestination();\n * const part = new Part(((time, note) => {\n * \t// the notes given as the second element in the array\n * \t// will be passed in as the second argument\n * \tsynth.triggerAttackRelease(note, \"8n\", time);\n * }), [[0, \"C2\"], [\"0:2\", \"C3\"], [\"0:3:2\", \"G2\"]]);\n * @example\n * import { Part, Synth } from \"tone\";\n * const synth = new Synth().toDestination();\n * // use an array of objects as long as the object has a \"time\" attribute\n * const part = new Part(((time, value) => {\n * \t// the value is an object which contains both the note and the velocity\n * \tsynth.triggerAttackRelease(value.note, \"8n\", time, value.velocity);\n * }), [{ time: 0, note: \"C3\", velocity: 0.9 },\n * \t{ time: \"0:2\", note: \"C4\", velocity: 0.5 }\n * ]).start(0);\n * @category Event\n */\nexport class Part<ValueType = any> extends ToneEvent<ValueType> {\n\n\treadonly name: string = \"Part\";\n\n\t/**\n\t * Tracks the scheduled events\n\t */\n\tprotected _state: StateTimeline<{\n\t\tid: number;\n\t\toffset: number;\n\t}> = new StateTimeline(\"stopped\");\n\n\t/**\n\t * The events that belong to this part\n\t */\n\tprivate _events: Set<ToneEvent> = new Set();\n\n\t/**\n\t * @param callback The callback to invoke on each event\n\t * @param events the array of events\n\t */\n\tconstructor(callback?: ToneEventCallback<CallbackType<ValueType>>, value?: ValueType[]);\n\tconstructor(options?: Partial<PartOptions<ValueType>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Part.getDefaults(), arguments, [\"callback\", \"events\"]));\n\t\tconst options = optionsFromArguments(Part.getDefaults(), arguments, [\"callback\", \"events\"]);\n\n\t\t// make sure things are assigned in the right order\n\t\tthis._state.increasing = true;\n\n\t\t// add the events\n\t\toptions.events.forEach(event => {\n\t\t\tif (isArray(event)) {\n\t\t\t\tthis.add(event[0], event[1]);\n\t\t\t} else {\n\t\t\t\tthis.add(event);\n\t\t\t}\n\t\t});\n\t}\n\n\tstatic getDefaults(): PartOptions<any> {\n\t\treturn Object.assign(ToneEvent.getDefaults(), {\n\t\t\tevents: [],\n\t\t});\n\t}\n\n\t/**\n\t * Start the part at the given time.\n\t * @param  time    When to start the part.\n\t * @param  offset  The offset from the start of the part to begin playing at.\n\t */\n\tstart(time?: TransportTime, offset?: Time): this {\n\t\tconst ticks = this.toTicks(time);\n\t\tif (this._state.getValueAtTime(ticks) !== \"started\") {\n\t\t\toffset = defaultArg(offset, this._loop ? this._loopStart : 0);\n\t\t\tif (this._loop) {\n\t\t\t\toffset = defaultArg(offset, this._loopStart);\n\t\t\t} else {\n\t\t\t\toffset = defaultArg(offset, 0);\n\t\t\t}\n\t\t\tconst computedOffset = this.toTicks(offset);\n\t\t\tthis._state.add({\n\t\t\t\tid: -1,\n\t\t\t\toffset: computedOffset,\n\t\t\t\tstate: \"started\",\n\t\t\t\ttime: ticks,\n\t\t\t});\n\t\t\tthis._forEach(event => {\n\t\t\t\tthis._startNote(event, ticks, computedOffset);\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Start the event in the given event at the correct time given\n\t * the ticks and offset and looping.\n\t * @param  event\n\t * @param  ticks\n\t * @param  offset\n\t */\n\tprivate _startNote(event: ToneEvent, ticks: Ticks, offset: Ticks): void {\n\t\tticks -= offset;\n\t\tif (this._loop) {\n\t\t\tif (event.startOffset >= this._loopStart && event.startOffset < this._loopEnd) {\n\t\t\t\tif (event.startOffset < offset) {\n\t\t\t\t\t// start it on the next loop\n\t\t\t\t\tticks += this._getLoopDuration();\n\t\t\t\t}\n\t\t\t\tevent.start(new TicksClass(this.context, ticks));\n\t\t\t} else if (event.startOffset < this._loopStart && event.startOffset >= offset) {\n\t\t\t\tevent.loop = false;\n\t\t\t\tevent.start(new TicksClass(this.context, ticks));\n\t\t\t}\n\t\t} else if (event.startOffset >= offset) {\n\t\t\tevent.start(new TicksClass(this.context, ticks));\n\t\t}\n\t}\n\n\tget startOffset(): Ticks {\n\t\treturn this._startOffset;\n\t}\n\tset startOffset(offset) {\n\t\tthis._startOffset = offset;\n\t\tthis._forEach(event => {\n\t\t\tevent.startOffset += this._startOffset;\n\t\t});\n\t}\n\n\t/**\n\t * Stop the part at the given time.\n\t * @param  time  When to stop the part.\n\t */\n\tstop(time?: TransportTime): this {\n\t\tconst ticks = this.toTicks(time);\n\t\tthis._state.cancel(ticks);\n\t\tthis._state.setStateAtTime(\"stopped\", ticks);\n\t\tthis._forEach(event => {\n\t\t\tevent.stop(time);\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get/Set an Event's value at the given time.\n\t * If a value is passed in and no event exists at\n\t * the given time, one will be created with that value.\n\t * If two events are at the same time, the first one will\n\t * be returned.\n\t * @example\n\t * import { Part } from \"tone\";\n\t * const part = new Part();\n\t * part.at(\"1m\"); // returns the part at the first measure\n\t * part.at(\"2m\", \"C2\"); // set the value at \"2m\" to C2.\n\t * // if an event didn't exist at that time, it will be created.\n\t * @param time The time of the event to get or set.\n\t * @param value If a value is passed in, the value of the event at the given time will be set to it.\n\t */\n\tat(time: Time, value?: any): ToneEvent | null {\n\t\tconst timeInTicks = new TransportTimeClass(this.context, time).toTicks();\n\t\tconst tickTime = new TicksClass(this.context, 1).toSeconds();\n\n\t\tconst iterator = this._events.values();\n\t\tlet result = iterator.next();\n\t\twhile (!result.done) {\n\t\t\tconst event = result.value;\n\t\t\tif (Math.abs(timeInTicks - event.startOffset) < tickTime) {\n\t\t\t\tif (isDefined(value)) {\n\t\t\t\t\tevent.value = value;\n\t\t\t\t}\n\t\t\t\treturn event;\n\t\t\t}\n\t\t\tresult = iterator.next();\n\t\t}\n\t\t// if there was no event at that time, create one\n\t\tif (isDefined(value)) {\n\t\t\tthis.add(time, value);\n\t\t\t// return the new event\n\t\t\treturn this.at(time);\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * Add a an event to the part.\n\t * @param time The time the note should start. If an object is passed in, it should\n\t * \t\thave a 'time' attribute and the rest of the object will be used as the 'value'.\n\t * @param  value\n\t * @example\n\t * import { Part } from \"tone\";\n\t * const part = new Part();\n\t * part.add(\"1m\", \"C#+11\");\n\t */\n\tadd(obj: {\n\t\ttime: Time;\n\t\t[key: string]: any;\n\t}): this;\n\tadd(time: Time, value?: any): this;\n\tadd(time: Time | object, value?: any): this {\n\t\t// extract the parameters\n\t\tif (time instanceof Object && Reflect.has(time, \"time\")) {\n\t\t\tvalue = time;\n\t\t\ttime = value.time;\n\t\t}\n\t\tconst ticks = this.toTicks(time);\n\t\tlet event: ToneEvent;\n\t\tif (value instanceof ToneEvent) {\n\t\t\tevent = value;\n\t\t\tevent.callback = this._tick.bind(this);\n\t\t} else {\n\t\t\tevent = new ToneEvent({\n\t\t\t\tcallback: this._tick.bind(this),\n\t\t\t\tcontext: this.context,\n\t\t\t\tvalue,\n\t\t\t});\n\t\t}\n\t\t// the start offset\n\t\tevent.startOffset = ticks;\n\n\t\t// initialize the values\n\t\tevent.set({\n\t\t\thumanize: this.humanize,\n\t\t\tloop: this.loop,\n\t\t\tloopEnd: this.loopEnd,\n\t\t\tloopStart: this.loopStart,\n\t\t\tplaybackRate: this.playbackRate,\n\t\t\tprobability: this.probability,\n\t\t});\n\n\t\tthis._events.add(event);\n\n\t\t// start the note if it should be played right now\n\t\tthis._restartEvent(event);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Restart the given event\n\t */\n\tprivate _restartEvent(event: ToneEvent): void {\n\t\tthis._state.forEach((stateEvent) => {\n\t\t\tif (stateEvent.state === \"started\") {\n\t\t\t\tthis._startNote(event, stateEvent.time, stateEvent.offset);\n\t\t\t} else {\n\t\t\t\t// stop the note\n\t\t\t\tevent.stop(new TicksClass(this.context, stateEvent.time));\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Remove an event from the part. If the event at that time is a Part,\n\t * it will remove the entire part.\n\t * @param time The time of the event\n\t * @param value Optionally select only a specific event value\n\t */\n\tremove(obj: {\n\t\ttime: Time;\n\t\t[key: string]: any;\n\t}): this;\n\tremove(time: Time, value?: any): this;\n\tremove(time: Time | object, value?: any): this {\n\t\t// extract the parameters\n\t\tif (isObject(time) && time.hasOwnProperty(\"time\")) {\n\t\t\tvalue = time;\n\t\t\ttime = value.time;\n\t\t}\n\t\ttime = this.toTicks(time);\n\t\tthis._events.forEach(event => {\n\t\t\tif (event.startOffset === time) {\n\t\t\t\tif (isUndef(value) || (isDefined(value) && event.value === value)) {\n\t\t\t\t\tthis._events.delete(event);\n\t\t\t\t\tevent.dispose();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Remove all of the notes from the group.\n\t */\n\tclear(): this {\n\t\tthis._forEach(event => event.dispose());\n\t\tthis._events.clear();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Cancel scheduled state change events: i.e. \"start\" and \"stop\".\n\t * @param after The time after which to cancel the scheduled events.\n\t */\n\tcancel(after?: TransportTime | TransportTimeClass): this {\n\t\tthis._forEach(event => event.cancel(after));\n\t\tthis._state.cancel(this.toTicks(after));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Iterate over all of the events\n\t */\n\tprivate _forEach(callback: (event: ToneEvent) => void): this {\n\t\tif (this._events) {\n\t\t\tthis._events.forEach(event => {\n\t\t\t\tif (event instanceof Part) {\n\t\t\t\t\tevent._forEach(callback);\n\t\t\t\t} else {\n\t\t\t\t\tcallback(event);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set the attribute of all of the events\n\t * @param  attr  the attribute to set\n\t * @param  value      The value to set it to\n\t */\n\tprivate _setAll(attr: string, value: any): void {\n\t\tthis._forEach(event => {\n\t\t\tevent[attr] = value;\n\t\t});\n\t}\n\n\t/**\n\t * Internal tick method\n\t * @param  time  The time of the event in seconds\n\t */\n\tprotected _tick(time: Seconds, value?: any): void {\n\t\tif (!this.mute) {\n\t\t\tthis.callback(time, value);\n\t\t}\n\t}\n\n\t/**\n\t * Determine if the event should be currently looping\n\t * given the loop boundries of this Part.\n\t * @param  event  The event to test\n\t */\n\tprivate _testLoopBoundries(event: ToneEvent): void {\n\t\tif (this._loop && (event.startOffset < this._loopStart || event.startOffset >= this._loopEnd)) {\n\t\t\tevent.cancel(0);\n\t\t} else if (event.state === \"stopped\") {\n\t\t\t// reschedule it if it's stopped\n\t\t\tthis._restartEvent(event);\n\t\t}\n\t}\n\n\tget probability(): NormalRange {\n\t\treturn this._probability;\n\t}\n\tset probability(prob) {\n\t\tthis._probability = prob;\n\t\tthis._setAll(\"probability\", prob);\n\t}\n\n\tget humanize(): boolean | Time {\n\t\treturn this._humanize;\n\t}\n\tset humanize(variation) {\n\t\tthis._humanize = variation;\n\t\tthis._setAll(\"humanize\", variation);\n\t}\n\n\t/**\n\t * If the part should loop or not\n\t * between Part.loopStart and\n\t * Part.loopEnd. If set to true,\n\t * the part will loop indefinitely,\n\t * if set to a number greater than 1\n\t * it will play a specific number of\n\t * times, if set to false, 0 or 1, the\n\t * part will only play once.\n\t * @example\n\t * import { Part } from \"tone\";\n\t * const part = new Part();\n\t * // loop the part 8 times\n\t * part.loop = 8;\n\t */\n\tget loop(): boolean | number {\n\t\treturn this._loop;\n\t}\n\tset loop(loop) {\n\t\tthis._loop = loop;\n\t\tthis._forEach(event => {\n\t\t\tevent.loopStart = this.loopStart;\n\t\t\tevent.loopEnd = this.loopEnd;\n\t\t\tevent.loop = loop;\n\t\t\tthis._testLoopBoundries(event);\n\t\t});\n\t}\n\n\t/**\n\t * The loopEnd point determines when it will\n\t * loop if Part.loop is true.\n\t */\n\tget loopEnd(): Time {\n\t\treturn new TicksClass(this.context, this._loopEnd).toSeconds();\n\t}\n\tset loopEnd(loopEnd) {\n\t\tthis._loopEnd = this.toTicks(loopEnd);\n\t\tif (this._loop) {\n\t\t\tthis._forEach(event => {\n\t\t\t\tevent.loopEnd = loopEnd;\n\t\t\t\tthis._testLoopBoundries(event);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * The loopStart point determines when it will\n\t * loop if Part.loop is true.\n\t */\n\tget loopStart(): Time {\n\t\treturn new TicksClass(this.context, this._loopStart).toSeconds();\n\t}\n\tset loopStart(loopStart) {\n\t\tthis._loopStart = this.toTicks(loopStart);\n\t\tif (this._loop) {\n\t\t\tthis._forEach(event => {\n\t\t\t\tevent.loopStart = this.loopStart;\n\t\t\t\tthis._testLoopBoundries(event);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * The playback rate of the part\n\t */\n\tget playbackRate(): Positive {\n\t\treturn this._playbackRate;\n\t}\n\tset playbackRate(rate) {\n\t\tthis._playbackRate = rate;\n\t\tthis._setAll(\"playbackRate\", rate);\n\t}\n\n\t/**\n\t * The number of scheduled notes in the part.\n\t */\n\tget length(): number {\n\t\treturn this._events.size;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.clear();\n\t\treturn this;\n\t}\n}\n","import { assert } from \"../core/util/Debug\";\n\n/**\n * The name of the patterns\n */\nexport type PatternName = \"up\" | \"down\" | \"upDown\" | \"downUp\" | \"alternateUp\" | \"alternateDown\" | \"random\" | \"randomOnce\";\n\n/**\n * Start at the first value and go up to the last\n */\nfunction* upPatternGen<T>(values: T[]): IterableIterator<T> {\n\tlet index = 0;\n\twhile (index < values.length) {\n\t\tindex = clamp(index, values);\n\t\tyield values[index];\n\t\tindex++;\n\t}\n}\n\n/**\n * Start at the last value and go down to 0\n */\nfunction* downPatternGen<T>(values: T[]): IterableIterator<T> {\n\tlet index = values.length - 1;\n\twhile (index >= 0) {\n\t\tindex = clamp(index, values);\n\t\tyield values[index];\n\t\tindex--;\n\t}\n}\n\n/**\n * Infinitely yield the generator\n */\nfunction* infiniteGen<T>(values: T[], gen: typeof upPatternGen): IterableIterator<T> {\n\twhile (true) {\n\t\tyield* gen(values);\n\t}\n}\n\n/**\n * Make sure that the index is in the given range\n */\nfunction clamp(index: number, values: any[]): number {\n\treturn Math.max(Math.min(index, values.length - 1), 0);\n}\n\n/**\n * Alternate between two generators\n */\nfunction* alternatingGenerator<T>(values: T[], directionUp: boolean): IterableIterator<T> {\n\tlet index = directionUp ? 0 : values.length - 1;\n\twhile (true) {\n\t\tindex = clamp(index, values);\n\t\tyield values[index];\n\t\tif (directionUp) {\n\t\t\tindex++;\n\t\t\tif (index >= values.length - 1) {\n\t\t\t\tdirectionUp = false;\n\t\t\t}\n\t\t} else {\n\t\t\tindex--;\n\t\t\tif (index <= 0) {\n\t\t\t\tdirectionUp = true;\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Starting from the bottom move up 2, down 1\n */\nfunction* jumpUp<T>(values: T[]): IterableIterator<T> {\n\tlet index = 0;\n\tlet stepIndex = 0;\n\twhile (index < values.length) {\n\t\tindex = clamp(index, values);\n\t\tyield values[index];\n\t\tstepIndex++;\n\t\tindex += (stepIndex % 2 ? 2 : -1);\n\t}\n}\n\n/**\n * Starting from the top move down 2, up 1\n */\nfunction* jumpDown<T>(values: T[]): IterableIterator<T> {\n\tlet index = values.length - 1;\n\tlet stepIndex = 0;\n\twhile (index >= 0) {\n\t\tindex = clamp(index, values);\n\t\tyield values[index];\n\t\tstepIndex++;\n\t\tindex += (stepIndex % 2 ? -2 : 1);\n\t}\n}\n\n/**\n * Choose a random index each time\n */\nfunction* randomGen<T>(values: T[]): IterableIterator<T> {\n\twhile (true) {\n\t\tconst randomIndex = Math.floor(Math.random() * values.length);\n\t\tyield values[randomIndex];\n\t}\n}\n\n/**\n * Randomly go through all of the values once before choosing a new random order\n */\nfunction* randomOnce<T>(values: T[]): IterableIterator<T> {\n\t// create an array of indices\n\tconst copy: number[] = [];\n\tfor (let i = 0; i < values.length; i++) {\n\t\tcopy.push(i);\n\t}\n\twhile (copy.length > 0) {\n\t\t// random choose an index, and then remove it so it's not chosen again\n\t\tconst randVal = copy.splice(Math.floor(copy.length * Math.random()), 1);\n\t\tconst index = clamp(randVal[0], values);\n\t\tyield values[index];\n\t}\n}\n\n/**\n * PatternGenerator returns a generator which will iterate over the given array\n * of values and yield the items according to the passed in pattern\n * @param values An array of values to iterate over\n * @param pattern The name of the pattern use when iterating over\n * @param index Where to start in the offset of the values array\n */\nexport function* PatternGenerator<T>(values: T[], pattern: PatternName = \"up\", index = 0): Iterator<T> {\n\t// safeguards\n\tassert(values.length > 0, \"The array must have more than one value in it\");\n\tswitch (pattern) {\n\t\tcase \"up\" :\n\t\t\tyield* infiniteGen(values, upPatternGen);\n\t\tcase \"down\" :\n\t\t\tyield* infiniteGen(values, downPatternGen);\n\t\tcase \"upDown\" :\n\t\t\tyield* alternatingGenerator(values, true);\n\t\tcase \"downUp\" :\n\t\t\tyield* alternatingGenerator(values, false);\n\t\tcase \"alternateUp\":\n\t\t\tyield* infiniteGen(values, jumpUp);\n\t\tcase \"alternateDown\":\n\t\t\tyield* infiniteGen(values, jumpDown);\n\t\tcase \"random\":\n\t\t\tyield* randomGen(values);\n\t\tcase \"randomOnce\":\n\t\t\tyield* infiniteGen(values, randomOnce);\n\t}\n}\n","import { Loop, LoopOptions } from \"./Loop\";\nimport { PatternGenerator, PatternName } from \"./PatternGenerator\";\nimport { ToneEventCallback } from \"./ToneEvent\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Seconds } from \"../core/type/Units\";\nimport { noOp } from \"../core/util/Interface\";\n\nexport interface PatternOptions<ValueType> extends LoopOptions {\n\tpattern: PatternName;\n\tvalues: ValueType[];\n\tcallback: (time: Seconds, value?: ValueType) => void;\n}\n\n/**\n * Pattern arpeggiates between the given notes\n * in a number of patterns. \n * @example\n * import { Pattern } from \"tone\";\n * const pattern = new Pattern((time, note) => {\n * \t// the order of the notes passed in depends on the pattern\n * }, [\"C2\", \"D4\", \"E5\", \"A6\"], \"upDown\");\n */\nexport class Pattern<ValueType> extends Loop<PatternOptions<ValueType>> {\n\n\treadonly name: string = \"Pattern\";\n\t\n\t/**\n\t * The pattern generator function\n\t */\n\tprivate _pattern: Iterator<ValueType>;\n\n\t/**\n\t * The current value\n\t */\n\tprivate _value?: ValueType;\n\n\t/**\n\t * Hold the pattern type\n\t */\n\tprivate _type: PatternName;\n\n\t/**\n\t * Hold the values\n\t */\n\tprivate _values: ValueType[];\n\n\t/**\n\t * The callback to be invoked at a regular interval\n\t */\n\tcallback: (time: Seconds, value?: ValueType) => void;\n\n\t/**\n\t * @param  callback The callback to invoke with the event.\n\t * @param  values The values to arpeggiate over.\n\t * @param  pattern  The name of the pattern\n\t */\n\tconstructor(\n\t\tcallback?: ToneEventCallback<ValueType>,\n\t\tvalues?: ValueType[],\n\t\tpattern?: PatternName,\n\t);\n\tconstructor(options?: Partial<PatternOptions<ValueType>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Pattern.getDefaults(), arguments, [\"callback\", \"values\", \"pattern\"]));\n\t\tconst options = optionsFromArguments(Pattern.getDefaults(), arguments, [\"callback\", \"values\", \"pattern\"]);\n\n\t\tthis.callback = options.callback;\n\t\tthis._values = options.values;\n\t\tthis._pattern = PatternGenerator(options.values, options.pattern);\n\t\tthis._type = options.pattern;\n\t}\n\n\tstatic getDefaults(): PatternOptions<any> {\n\t\treturn Object.assign(Loop.getDefaults(), {\n\t\t\tpattern: \"up\" as \"up\",\n\t\t\tvalues: [],\n\t\t\tcallback: noOp,\n\t\t});\n\t}\n\n\t/**\n\t * Internal function called when the notes should be called\n\t */\n\tprotected _tick(time: Seconds): void {\n\t\tconst value = this._pattern.next() as IteratorResult<ValueType>;\n\t\tthis._value = value.value;\n\t\tthis.callback(time, this._value);\n\t}\n\n\t/**\n\t * The array of events.\n\t */\n\tget values(): ValueType[] {\n\t\treturn this._values;\n\t}\n\tset values(val) {\n\t\tthis._values = val;\n\t\t// reset the pattern\n\t\tthis.pattern = this._type;\n\t}\n\n\t/**\n\t * The current value of the pattern.\n\t */\n\tget value(): ValueType | undefined {\n\t\treturn this._value;\n\t}\n\n\t/**\n\t * The pattern type. See Tone.CtrlPattern for the full list of patterns.\n\t */\n\tget pattern(): PatternName {\n\t\treturn this._type;\n\t}\n\tset pattern(pattern) {\n\t\tthis._type = pattern;\n\t\tthis._pattern = PatternGenerator(this._values, this._type);\n\t}\n}\n\n","import { TicksClass } from \"../core/type/Ticks\";\nimport { NormalRange, Positive, Seconds, Ticks, Time, TransportTime } from \"../core/type/Units\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { isArray, isString } from \"../core/util/TypeCheck\";\nimport { Part } from \"./Part\";\nimport { ToneEvent, ToneEventCallback, ToneEventOptions } from \"./ToneEvent\";\n\ntype SequenceEventDescription<T> = Array<T | T[]>;\n\ninterface SequenceOptions<T> extends Omit<ToneEventOptions<T>, \"value\"> {\n\tloopStart: number;\n\tloopEnd: number;\n\tsubdivision: Time;\n\tevents: SequenceEventDescription<T>;\n}\n\n/**\n * A sequence is an alternate notation of a part. Instead\n * of passing in an array of [time, event] pairs, pass\n * in an array of events which will be spaced at the\n * given subdivision. Sub-arrays will subdivide that beat\n * by the number of items are in the array.\n * Sequence notation inspiration from [Tidal](http://yaxu.org/tidal/)\n * @example\n * import { Sequence, Synth, Transport } from \"tone\";\n * const synth = new Synth().toDestination();\n * const seq = new Sequence((time, note) => {\n * \tsynth.triggerAttackRelease(note, 0.1, time);\n * \t// subdivisions are given as subarrays\n * }, [\"C4\", [\"E4\", \"D4\", \"E4\"], \"G4\", [\"A4\", \"G4\"]]).start(0);\n * Transport.start();\n * @category Event\n */\nexport class Sequence<ValueType = any> extends ToneEvent<ValueType> {\n\n\treadonly name: string = \"Sequence\";\n\n\t/**\n\t * The subdivison of each note\n\t */\n\tprivate _subdivision: Ticks;\n\n\t/**\n\t * The object responsible for scheduling all of the events\n\t */\n\tprivate _part: Part = new Part({\n\t\tcallback: this._seqCallback.bind(this),\n\t\tcontext: this.context,\n\t});\n\n\t/**\n\t * private reference to all of the sequence proxies\n\t */\n\tprivate _events: ValueType[] = [];\n\n\t/**\n\t * The proxied array\n\t */\n\tprivate _eventsArray: ValueType[] = [];\n\n\t/**\n\t * @param  callback  The callback to invoke with every note\n\t * @param  sequence  The sequence\n\t * @param  subdivision  The subdivision between which events are placed.\n\t */\n\tconstructor(\n\t\tcallback?: ToneEventCallback<ValueType>,\n\t\tevents?: SequenceEventDescription<ValueType>,\n\t\tsubdivision?: Time,\n\t);\n\tconstructor(options?: Partial<SequenceOptions<ValueType>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Sequence.getDefaults(), arguments, [\"callback\", \"events\", \"subdivision\"]));\n\t\tconst options = optionsFromArguments(Sequence.getDefaults(), arguments, [\"callback\", \"events\", \"subdivision\"]);\n\n\t\tthis._subdivision = this.toTicks(options.subdivision);\n\n\t\tthis.events = options.events;\n\n\t\t// set all of the values\n\t\tthis.loop = options.loop;\n\t\tthis.loopStart = options.loopStart;\n\t\tthis.loopEnd = options.loopEnd;\n\t\tthis.playbackRate = options.playbackRate;\n\t\tthis.probability = options.probability;\n\t\tthis.humanize = options.humanize;\n\t\tthis.mute = options.mute;\n\t\tthis.playbackRate = options.playbackRate;\n\t}\n\n\tstatic getDefaults(): SequenceOptions<any> {\n\t\treturn Object.assign(omitFromObject(ToneEvent.getDefaults(), [\"value\"]), {\n\t\t\tevents: [],\n\t\t\tloop: true,\n\t\t\tloopEnd: 0,\n\t\t\tloopStart: 0,\n\t\t\tsubdivision: \"8n\",\n\t\t});\n\t}\n\n\t/**\n\t * The internal callback for when an event is invoked\n\t */\n\tprivate _seqCallback(time: Seconds, value: any): void {\n\t\tif (value !== null) {\n\t\t\tthis.callback(time, value);\n\t\t}\n\t}\n\n\t/**\n\t * The sequence\n\t */\n\tget events(): any[] {\n\t\treturn this._events;\n\t}\n\tset events(s) {\n\t\tthis.clear();\n\t\tthis._eventsArray = s;\n\t\tthis._events = this._createSequence(this._eventsArray);\n\t\tthis._eventsUpdated();\n\t}\n\n\t/**\n\t * Start the part at the given time.\n\t * @param  time    When to start the part.\n\t * @param  offset  The offset index to start at\n\t */\n\tstart(time?: TransportTime, offset?: number): this {\n\t\tthis._part.start(time, offset ? this._indexTime(offset) : offset);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the part at the given time.\n\t * @param  time  When to stop the part.\n\t */\n\tstop(time?: TransportTime): this {\n\t\tthis._part.stop(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The subdivision of the sequence. This can only be\n\t * set in the constructor. The subdivision is the\n\t * interval between successive steps.\n\t */\n\tget subdivision(): Seconds {\n\t\treturn new TicksClass(this.context, this._subdivision).toSeconds();\n\t}\n\n\t/**\n\t * Create a sequence proxy which can be monitored to create subsequences\n\t */\n\tprivate _createSequence(array: any[]): any[] {\n\t\treturn new Proxy(array, {\n\t\t\tget: (target: any[], property: PropertyKey): any => {\n\t\t\t\t// property is index in this case\n\t\t\t\treturn target[property];\n\t\t\t},\n\t\t\tset: (target: any[], property: PropertyKey, value: any): boolean => {\n\t\t\t\tif (isString(property) && isFinite(parseInt(property, 10))) {\n\t\t\t\t\tif (isArray(value)) {\n\t\t\t\t\t\ttarget[property] = this._createSequence(value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttarget[property] = value;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttarget[property] = value;\n\t\t\t\t}\n\t\t\t\tthis._eventsUpdated();\n\t\t\t\t// return true to accept the changes\n\t\t\t\treturn true;\n\t\t\t},\n\t\t});\n\t}\n\n\t/**\n\t * When the sequence has changed, all of the events need to be recreated\n\t */\n\tprivate _eventsUpdated(): void {\n\t\tthis._part.clear();\n\t\tthis._rescheduleSequence(this._eventsArray, this._subdivision, this.startOffset);\n\t\t// update the loopEnd\n\t\tthis.loopEnd = this.loopEnd;\n\t}\n\n\t/**\n\t * reschedule all of the events that need to be rescheduled\n\t */\n\tprivate _rescheduleSequence(sequence: any[], subdivision: Ticks, startOffset: Ticks): void {\n\t\tsequence.forEach((value, index) => {\n\t\t\tconst eventOffset = index * (subdivision) + startOffset;\n\t\t\tif (isArray(value)) {\n\t\t\t\tthis._rescheduleSequence(value, subdivision / value.length, eventOffset);\n\t\t\t} else {\n\t\t\t\tconst startTime = new TicksClass(this.context, eventOffset, \"i\").toSeconds();\n\t\t\t\tthis._part.add(startTime, value);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Get the time of the index given the Sequence's subdivision\n\t * @param  index\n\t * @return The time of that index\n\t */\n\tprivate _indexTime(index: number): Seconds {\n\t\treturn new TicksClass(this.context, index * (this._subdivision) + this.startOffset).toSeconds();\n\t}\n\n\t/**\n\t * Clear all of the events\n\t */\n\tclear(): this {\n\t\tthis._part.clear();\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._part.dispose();\n\t\treturn this;\n\t}\n\n\t//-------------------------------------\n\t// PROXY CALLS\n\t//-------------------------------------\n\n\tget loop(): boolean | number {\n\t\treturn this._part.loop;\n\t}\n\tset loop(l) {\n\t\tthis._part.loop = l;\n\t}\n\n\t/**\n\t * The index at which the sequence should start looping\n\t */\n\tget loopStart(): number {\n\t\treturn this._loopStart;\n\t}\n\tset loopStart(index) {\n\t\tthis._loopStart = index;\n\t\tthis._part.loopStart = this._indexTime(index);\n\t}\n\n\t/**\n\t * The index at which the sequence should end looping\n\t */\n\tget loopEnd(): number {\n\t\treturn this._loopEnd;\n\t}\n\tset loopEnd(index) {\n\t\tthis._loopEnd = index;\n\t\tif (index === 0) {\n\t\t\tthis._part.loopEnd = this._indexTime(this._eventsArray.length);\n\t\t} else {\n\t\t\tthis._part.loopEnd = this._indexTime(index);\n\t\t}\n\t}\n\n\tget startOffset(): Ticks {\n\t\treturn this._part.startOffset;\n\t}\n\tset startOffset(start) {\n\t\tthis._part.startOffset = start;\n\t}\n\n\tget playbackRate(): Positive {\n\t\treturn this._part.playbackRate;\n\t}\n\tset playbackRate(rate) {\n\t\tthis._part.playbackRate = rate;\n\t}\n\n\tget probability(): NormalRange {\n\t\treturn this._part.probability;\n\t}\n\tset probability(prob) {\n\t\tthis._part.probability = prob;\n\t}\n\n\tget humanize(): boolean | Time {\n\t\treturn this._part.humanize;\n\t}\n\tset humanize(variation) {\n\t\tthis._part.humanize = variation;\n\t}\n\n\t/**\n\t * The number of scheduled events\n\t */\n\tget length(): number {\n\t\treturn this._part.length;\n\t}\n}\n","import { CrossFade } from \"../component/channel/CrossFade\";\nimport { Gain } from \"../core/context/Gain\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { NormalRange } from \"../core/type/Units\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Signal } from \"../signal/Signal\";\n\nexport interface EffectOptions extends ToneAudioNodeOptions {\n\twet: NormalRange;\n}\n/**\n * Effect is the base class for effects. Connect the effect between\n * the effectSend and effectReturn GainNodes, then control the amount of\n * effect which goes to the output using the wet control.\n */\nexport abstract class Effect<Options extends EffectOptions>\n\textends ToneAudioNode<Options> {\n\n\treadonly name: string = \"Effect\";\n\n\t/**\n\t * the drywet knob to control the amount of effect\n\t */\n\tprivate _dryWet: CrossFade = new CrossFade({ context: this.context });\n\n\t/**\n\t * The wet control is how much of the effected\n\t * will pass through to the output. 1 = 100% effected\n\t * signal, 0 = 100% dry signal.\n\t */\n\twet: Signal<\"normalRange\"> = this._dryWet.fade;\n\n\t/**\n\t * connect the effectSend to the input of hte effect\n\t */\n\tprotected effectSend: Gain = new Gain({ context: this.context });\n\n\t/**\n\t * connect the output of the effect to the effectReturn\n\t */\n\tprotected effectReturn: Gain = new Gain({ context: this.context });\n\n\t/**\n\t * The effect input node\n\t */\n\tinput: Gain = new Gain({ context: this.context });\n\n\t/**\n\t * The effect output\n\t */\n\toutput = this._dryWet;\n\n\tconstructor(options: EffectOptions) {\n\t\tsuper(options);\n\n\t\t// connections\n\t\tthis.input.fan(this._dryWet.a, this.effectSend);\n\t\tthis.effectReturn.connect(this._dryWet.b);\n\t\tthis.wet.setValueAtTime(options.wet, 0);\n\t\tthis._internalChannels = [this.effectReturn, this.effectSend];\n\t\treadOnly(this, \"wet\");\n\t}\n\n\tstatic getDefaults(): EffectOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\twet: 1,\n\t\t});\n\t}\n\n\t/**\n\t * chains the effect in between the effectSend and effectReturn\n\t */\n\tprotected connectEffect(effect: ToneAudioNode | AudioNode): this {\n\t\t// add it to the internal channels\n\t\tthis._internalChannels.push(effect);\n\t\tthis.effectSend.chain(effect, this.effectReturn);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._dryWet.dispose();\n\t\tthis.effectSend.dispose();\n\t\tthis.effectReturn.dispose();\n\t\tthis.wet.dispose();\n\t\treturn this;\n\t}\n}\n","import { Effect, EffectOptions } from \"../effect/Effect\";\nimport { Frequency, NormalRange, Time } from \"../core/type/Units\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { ToneOscillatorType } from \"../source/oscillator/OscillatorInterface\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Param } from \"../core/context/Param\";\n\nexport interface LFOEffectOptions extends EffectOptions {\n\tfrequency: Frequency;\n\ttype: ToneOscillatorType;\n\tdepth: NormalRange;\n}\n\n/**\n * Base class for LFO-based effects.\n */\nexport abstract class LFOEffect<Options extends LFOEffectOptions> extends Effect<Options> {\n\n\treadonly name: string = \"LFOEffect\";\n\n\t/**\n\t * the lfo which drives the filter cutoff\n\t */\n\tprotected _lfo: LFO;\n\t\n\t/**\n\t * The range of the filter modulating between the min and max frequency. \n\t * 0 = no modulation. 1 = full modulation.\n\t */\n\treadonly depth: Param<\"normalRange\">;\n\t\n\t/**\n\t * How fast the filter modulates between min and max. \n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\tconstructor(options: LFOEffectOptions) {\n\n\t\tsuper(options);\n\n\t\tthis._lfo = new LFO({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.frequency,\n\t\t\tamplitude: options.depth,\n\t\t});\n\t\tthis.depth = this._lfo.amplitude;\n\t\tthis.frequency = this._lfo.frequency;\n\n\t\tthis.type = options.type;\n\t\treadOnly(this, [\"frequency\", \"depth\"]);\n\t}\n\n\tstatic getDefaults(): LFOEffectOptions {\n\t\treturn Object.assign(Effect.getDefaults(), {\n\t\t\tfrequency: 1,\n\t\t\ttype: \"sine\" as ToneOscillatorType,\n\t\t\tdepth: 1,\n\t\t});\n\t}\n\n\t/**\n\t * Start the effect.\n\t */\n\tstart(time?: Time): this {\n\t\tthis._lfo.start(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the lfo\n\t */\n\tstop(time?: Time): this {\n\t\tthis._lfo.stop(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sync the filter to the transport. See [[LFO.sync]]\n\t */\n\tsync(): this {\n\t\tthis._lfo.sync();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unsync the filter from the transport.\n\t */\n\tunsync(): this {\n\t\tthis._lfo.unsync();\n\t\treturn this;\n\t}\n\n\t/**\n\t * The type of the LFO's oscillator: See [[Oscillator.type]]\n\t * @example\n\t * import { AutoFilter, Noise } from \"tone\";\n\t * const autoFilter = new AutoFilter().start().toDestination();\n\t * const noise = new Noise().start().connect(autoFilter);\n\t * autoFilter.type = \"square\";\n\t */\n\tget type() {\n\t\treturn this._lfo.type;\n\t}\n\tset type(type) {\n\t\tthis._lfo.type = type;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._lfo.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.depth.dispose();\n\t\treturn this;\n\t}\n}\n","import { Frequency, Positive } from \"../core/type/Units\";\nimport { Filter, FilterOptions } from \"../component/filter/Filter\";\nimport { SourceOptions } from \"../source/Source\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFOEffect, LFOEffectOptions } from \"./LFOEffect\";\n\nexport interface AutoFilterOptions extends LFOEffectOptions {\n\tbaseFrequency: Frequency;\n\toctaves: Positive;\n\tfilter: Omit<FilterOptions, keyof SourceOptions | \"frequency\" | \"detune\" | \"gain\">;\n}\n\n/**\n * AutoFilter is a Tone.Filter with a Tone.LFO connected to the filter cutoff frequency.\n * Setting the LFO rate and depth allows for control over the filter modulation rate \n * and depth.\n *\n * @example\n * import { AutoFilter, Oscillator } from \"tone\";\n * // create an autofilter and start it's LFO\n * const autoFilter = new AutoFilter(\"4n\").toDestination().start();\n * // route an oscillator through the filter and start it\n * const oscillator = new Oscillator().connect(autoFilter).start();\n * @category Effect\n */\nexport class AutoFilter extends LFOEffect<AutoFilterOptions> {\n\n\treadonly name: string = \"AutoFilter\";\n\n\t/**\n\t * The filter node\n\t */\n\treadonly filter: Filter;\n\t\n\t/**\n\t * The octaves placeholder\n\t */\n\tprivate _octaves!: Positive;\n\n\t/**\n\t * @param frequency The rate of the LFO.\n\t * @param baseFrequency The lower value of the LFOs oscillation\n\t * @param octaves The number of octaves above the baseFrequency\n\t */\n\tconstructor(frequency?: Frequency, baseFrequency?: Frequency, octaves?: Positive);\n\tconstructor(options?: Partial<AutoFilterOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(AutoFilter.getDefaults(), arguments, [\"frequency\", \"baseFrequency\", \"octaves\"]));\n\t\tconst options = optionsFromArguments(AutoFilter.getDefaults(), arguments, [\"frequency\", \"baseFrequency\", \"octaves\"]);\n\n\t\tthis.filter = new Filter(Object.assign(options.filter, {\n\t\t\tcontext: this.context,\n\t\t}));\n\n\t\t// connections\n\t\tthis.connectEffect(this.filter);\n\t\tthis._lfo.connect(this.filter.frequency);\n\t\tthis.octaves = options.octaves;\n\t\tthis.baseFrequency = options.baseFrequency;\n\t}\n\n\tstatic getDefaults(): AutoFilterOptions {\n\t\treturn Object.assign(LFOEffect.getDefaults(), {\n\t\t\tbaseFrequency: 200,\n\t\t\toctaves: 2.6,\n\t\t\tfilter: {\n\t\t\t\ttype: \"lowpass\" as \"lowpass\",\n\t\t\t\trolloff: -12 as -12,\n\t\t\t\tQ: 1,\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * The minimum value of the filter's cutoff frequency.\n\t */\n\tget baseFrequency(): Frequency {\n\t\treturn this._lfo.min;\n\t}\n\tset baseFrequency(freq) {\n\t\tthis._lfo.min = this.toFrequency(freq);\n\t\t// and set the max\n\t\tthis.octaves = this._octaves;\n\t}\n\n\t/**\n\t * The maximum value of the filter's cutoff frequency. \n\t */\n\tget octaves(): Positive {\n\t\treturn this._octaves;\n\t}\n\tset octaves(oct) {\n\t\tthis._octaves = oct;\n\t\tthis._lfo.max = this._lfo.min * Math.pow(2, oct);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.filter.dispose();\n\t\treturn this;\n\t}\n}\n","import { Panner } from \"../component/channel/Panner\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFOEffect, LFOEffectOptions } from \"./LFOEffect\";\nimport { Frequency } from \"../core/type/Units\";\n\nexport type AutoPannerOptions = LFOEffectOptions;\n\n/**\n * AutoPanner is a [[Panner]] with an [[LFO]] connected to the pan amount. \n * [Related Reading](https://www.ableton.com/en/blog/autopan-chopper-effect-and-more-liveschool/).\n *\n * @example\n * import { AutoPanner, Oscillator } from \"tone\";\n * // create an autopanner and start it\n * const autoPanner = new AutoPanner(\"4n\").toDestination().start();\n * // route an oscillator through the panner and start it\n * const oscillator = new Oscillator().connect(autoPanner).start();\n * @category Effect\n */\nexport class AutoPanner extends LFOEffect<AutoPannerOptions> {\n\t\n\treadonly name: string = \"AutoPanner\";\n\t\n\t/**\n\t * The filter node\n\t */\n\treadonly _panner: Panner;\n\t\n\t/**\n\t * @param frequency Rate of left-right oscillation. \n\t */\n\tconstructor(frequency?: Frequency);\n\tconstructor(options?: Partial<AutoPannerOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(AutoPanner.getDefaults(), arguments, [\"frequency\"]));\n\n\t\tthis._panner = new Panner({ context: this.context });\n\t\t// connections\n\t\tthis.connectEffect(this._panner);\n\t\tthis._lfo.connect(this._panner.pan);\n\t\tthis._lfo.min = -1;\n\t\tthis._lfo.max = 1;\n\t}\n\n\tdispose(): this{\n\t\tsuper.dispose();\n\t\tthis._panner.dispose();\n\t\treturn this;\n\t}\n}\n\n","import { Effect, EffectOptions } from \"./Effect\";\nimport { Filter } from \"../component/filter/Filter\";\nimport { Follower } from \"../component/analysis/Follower\";\nimport { Decibels, Frequency, GainFactor, Hertz, Positive, Time } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Gain } from \"../core/context/Gain\";\nimport { dbToGain, gainToDb } from \"../core/type/Conversions\";\nimport { ScaleExp } from \"../signal/ScaleExp\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\n\nexport interface AutoWahOptions extends EffectOptions {\n\tbaseFrequency: Frequency;\n\toctaves: Positive;\n\tsensitivity: Decibels;\n\tQ: Positive;\n\tgain: GainFactor;\n\tfollower: Time;\n}\n\n/**\n * AutoWah connects a [[Follower]] to a [[Filter]]. \n * The frequency of the filter, follows the input amplitude curve. \n * Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna).\n * \n * @example\n * import { AutoWah, Synth } from \"tone\";\n * const autoWah = new AutoWah(50, 6, -30).toDestination();\n * // initialize the synth and connect to autowah\n * const synth = new Synth().connect(autoWah);\n * // Q value influences the effect of the wah - default is 2\n * autoWah.Q.value = 6;\n * // more audible on higher notes\n * synth.triggerAttackRelease(\"C4\", \"8n\");\n * @category Effect\n */\nexport class AutoWah extends Effect<AutoWahOptions> {\n\n\treadonly name: string = \"AutoWah\";\n\t\n\t/**\n\t * The envelope follower. Set the attack/release\n\t * timing to adjust how the envelope is followed.\n\t */\n\tprivate _follower: Follower;\n\n\t/**\n\t * scales the follower value to the frequency domain\n\t */\n\tprivate _sweepRange: ScaleExp;\n\n\t/**\n\t * Hold the base frequency value\n\t */\n\tprivate _baseFrequency: Hertz;\n\n\t/**\n\t * Private holder for the octave count\n\t */\n\tprivate _octaves: Positive;\n\n\t/**\n\t * the input gain to adjust the sensitivity\n\t */\n\tprivate _inputBoost: Gain;\n\n\t/**\n\t * Private holder for the filter\n\t */\n\tprivate _bandpass: Filter;\n\n\t/**\n\t * The peaking fitler\n\t */\n\tprivate _peaking: Filter;\n\n\t/**\n\t * The gain of the filter.\n\t */\n\treadonly gain: Signal<\"decibels\">;\n\n\t/**\n\t * The quality of the filter.\n\t */\n\treadonly Q: Signal<\"positive\">;\n\n\t/**\n\t * @param baseFrequency The frequency the filter is set to at the low point of the wah\n\t * @param octaves The number of octaves above the baseFrequency the filter will sweep to when fully open. \n\t * @param sensitivity The decibel threshold sensitivity for the incoming signal. Normal range of -40 to 0.\n\t */\n\tconstructor(baseFrequency?: Frequency, octaves?: Positive, sensitivity?: Decibels);\n\tconstructor(options?: Partial<AutoWahOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(AutoWah.getDefaults(), arguments, [\"baseFrequency\", \"octaves\", \"sensitivity\"]));\n\t\tconst options = optionsFromArguments(AutoWah.getDefaults(), arguments, [\"baseFrequency\", \"octaves\", \"sensitivity\"]);\n\n\t\tthis._follower = new Follower({\n\t\t\tcontext: this.context,\n\t\t\tsmoothing: options.follower,\n\t\t});\n\t\tthis._sweepRange = new ScaleExp({\n\t\t\tcontext: this.context,\n\t\t\tmin: 0,\n\t\t\tmax: 1,\n\t\t\texponent: 0.5,\n\t\t});\n\t\tthis._baseFrequency = this.toFrequency(options.baseFrequency);\n\t\tthis._octaves = options.octaves;\n\t\tthis._inputBoost = new Gain({ context: this.context });\n\t\tthis._bandpass = new Filter({\n\t\t\tcontext: this.context,\n\t\t\trolloff: -48,\n\t\t\tfrequency: 0,\n\t\t\tQ: options.Q,\n\t\t});\n\t\tthis._peaking = new Filter({\n\t\t\tcontext: this.context,\n\t\t\ttype: \"peaking\"\n\t\t});\n\t\tthis._peaking.gain.value = options.gain;\n\t\tthis.gain = this._peaking.gain;\n\t\tthis.Q = this._bandpass.Q;\n\n\t\t// the control signal path\n\t\tthis.effectSend.chain(this._inputBoost, this._follower, this._sweepRange);\n\t\tthis._sweepRange.connect(this._bandpass.frequency);\n\t\tthis._sweepRange.connect(this._peaking.frequency);\n\t\t// the filtered path\n\t\tthis.effectSend.chain(this._bandpass, this._peaking, this.effectReturn);\n\t\t// set the initial value\n\t\tthis._setSweepRange();\n\t\tthis.sensitivity = options.sensitivity;\n\n\t\treadOnly(this, [\"gain\", \"Q\"]);\n\t}\n\n\tstatic getDefaults(): AutoWahOptions {\n\t\treturn Object.assign(Effect.getDefaults(), {\n\t\t\tbaseFrequency: 100,\n\t\t\toctaves: 6,\n\t\t\tsensitivity: 0,\n\t\t\tQ: 2,\n\t\t\tgain: 2,\n\t\t\tfollower: 0.2,\n\t\t});\n\t}\n\n\t/**\n\t * The number of octaves that the filter will sweep above the baseFrequency.\n\t */\n\tget octaves() {\n\t\treturn this._octaves;\n\t}\n\tset octaves(octaves) {\n\t\tthis._octaves = octaves;\n\t\tthis._setSweepRange();\n\t}\n\n\t/**\n\t * The follower's smoothing time\n\t */\n\tget follower(): Time {\n\t\treturn this._follower.smoothing;\n\t}\n\tset follower(follower) {\n\t\tthis._follower.smoothing = follower;\n\t}\n\n\t/**\n\t * The base frequency from which the sweep will start from.\n\t */\n\tget baseFrequency(): Frequency {\n\t\treturn this._baseFrequency;\n\t}\n\tset baseFrequency(baseFreq) {\n\t\tthis._baseFrequency = this.toFrequency(baseFreq);\n\t\tthis._setSweepRange();\n\t}\n\n\t/**\n\t * The sensitivity to control how responsive to the input signal the filter is.\n\t */\n\tget sensitivity(): Decibels {\n\t\treturn gainToDb(1 / this._inputBoost.gain.value);\n\t}\n\tset sensitivity(sensitivity) {\n\t\tthis._inputBoost.gain.value = 1 / dbToGain(sensitivity);\n\t}\n\n\t/**\n\t * sets the sweep range of the scaler\n\t */\n\tprivate _setSweepRange() {\n\t\tthis._sweepRange.min = this._baseFrequency;\n\t\tthis._sweepRange.max = Math.min(this._baseFrequency * Math.pow(2, this._octaves), this.context.sampleRate / 2);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._follower.dispose();\n\t\tthis._sweepRange.dispose();\n\t\tthis._bandpass.dispose();\n\t\tthis._peaking.dispose();\n\t\tthis._inputBoost.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioWorklet, ToneAudioWorkletOptions } from \"../core/context/ToneAudioWorklet\";\nimport { Effect, EffectOptions } from \"./Effect\";\nimport { NormalRange, Positive } from \"../core/type/Units\";\nimport { Gain } from \"../core/context/Gain\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { connectSeries } from \"../core/context/ToneAudioNode\";\nimport { Param } from \"../core/context/Param\";\n\nexport interface BitCrusherOptions extends EffectOptions {\n\tbits: Positive;\n}\n\n/**\n * BitCrusher down-samples the incoming signal to a different bit depth.\n * Lowering the bit depth of the signal creates distortion. Read more about BitCrushing\n * on [Wikipedia](https://en.wikipedia.org/wiki/Bitcrusher).\n * @example\n * import { BitCrusher, Synth } from \"tone\";\n * // initialize crusher and route a synth through it\n * const crusher = new BitCrusher(4).toDestination();\n * const synth = new Synth().connect(crusher);\n * synth.triggerAttackRelease(\"C2\", 2);\n * \n * @category Effect\n */\nexport class BitCrusher extends Effect<BitCrusherOptions> {\n\n\treadonly name: string = \"BitCrusher\";\n\n\t/**\n\t * The bit depth of the effect\n\t * @min 1\n\t * @max 16\n\t */\n\treadonly bits: Param<\"positive\">;\n\t\n\t/**\n\t * The node which does the bit crushing effect. Runs in an AudioWorklet when possible.\n\t */\n\tprivate _bitCrusherWorklet: BitCrusherWorklet;\n\t\n\tconstructor(bits?: Positive, frequencyReduction?: NormalRange);\n\tconstructor(options?: Partial<BitCrusherWorkletOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(BitCrusher.getDefaults(), arguments, [\"bits\"]));\n\t\tconst options = optionsFromArguments(BitCrusher.getDefaults(), arguments, [\"bits\"]);\n\t\t\n\t\tthis._bitCrusherWorklet = new BitCrusherWorklet({\n\t\t\tcontext: this.context,\n\t\t\tbits: options.bits,\n\t\t});\n\t\t// connect it up\n\t\tthis.connectEffect(this._bitCrusherWorklet);\n\n\t\tthis.bits = this._bitCrusherWorklet.bits;\n\t}\n\n\tstatic getDefaults(): BitCrusherOptions {\n\t\treturn Object.assign(Effect.getDefaults(), {\n\t\t\tbits: 4,\n\t\t\tfrequencyReduction: 0.5,\n\t\t});\n\t}\n\t\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._bitCrusherWorklet.dispose();\n\t\treturn this;\n\t}\n}\n\ninterface BitCrusherWorkletOptions extends ToneAudioWorkletOptions {\n\tbits: number;\n}\n\n/**\n * Internal class which creates an AudioWorklet to do the bit crushing\n */\nclass BitCrusherWorklet extends ToneAudioWorklet<BitCrusherWorkletOptions> {\n\t\n\treadonly name: string = \"BitCrusherWorklet\";\n\t\n\treadonly input: Gain;\n\treadonly output: Gain;\n\n\treadonly bits: Param<\"positive\">;\n\t\n\tprotected workletOptions: Partial<AudioWorkletNodeOptions> = {\n\t\tnumberOfInputs: 1,\n\t\tnumberOfOutputs: 1,\n\t}\n\t\n\tconstructor(options?: Partial<BitCrusherWorkletOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(BitCrusherWorklet.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(BitCrusherWorklet.getDefaults(), arguments);\n\t\t\n\t\tthis.input = new Gain({ context: this.context });\n\t\tthis.output = new Gain({ context: this.context });\n\n\t\tconst dummyGain = this.context.createGain();\n\n\t\tthis.bits = new Param<\"positive\">({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.bits,\n\t\t\tunits: \"positive\",\n\t\t\tminValue: 1,\n\t\t\tmaxValue: 16,\n\t\t\tparam: dummyGain.gain,\n\t\t\tswappable: true,\n\t\t});\n\t}\n\t\n\tstatic getDefaults(): BitCrusherWorkletOptions {\n\t\treturn Object.assign(ToneAudioWorklet.getDefaults(), {\n\t\t\tbits: 12,\n\t\t});\n\t}\n\t\n\tprotected _audioWorkletName(): string {\n\t\treturn \"bit-crusher\";\n\t}\n\t\n\tprotected _audioWorklet(): string {\n\t\treturn /* javascript */` \n\t\tregisterProcessor(\"${this._audioWorkletName()}\", class extends AudioWorkletProcessor {\n\t\t\tstatic get parameterDescriptors () {\n\t\t\t\treturn [{\n\t\t\t\t\tname: 'bits',\n\t\t\t\t\tdefaultValue: 12,\n\t\t\t\t\tminValue: 1,\n\t\t\t\t\tmaxValue: 16\n\t\t\t\t}];\n\t\t\t}\n\t\t\t\n\t\t\tprocess (inputs, outputs, parameters) {\n\t\t\t\tconst input = inputs[0];\n\t\t\t\tconst output = outputs[0];\n\t\t\t\tif (input && output && input.length === output.length) {\n\t\t\t\t\tconst bits = parameters.bits;\n\t\t\t\t\tfor (let channelNum = 0; channelNum < input.length; channelNum++) {\n\t\t\t\t\t\tconst inputChannel = input[channelNum];\n\t\t\t\t\t\tfor (let index = 0; index < inputChannel.length; index++) {\n\t\t\t\t\t\t\tconst value = inputChannel[index];\n\t\t\t\t\t\t\tconst step = bits.length > 1 ? Math.pow(0.5, bits[index]) : Math.pow(0.5, bits[0]);\n\t\t\t\t\t\t\tconst val = step * Math.floor(value / step + 0.5);\n\t\t\t\t\t\t\toutput[channelNum][index] = val;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\t\t`;\n\t}\n\t\n\tonReady(node: AudioWorkletNode) {\n\t\tconnectSeries(this.input, node, this.output);\n\t\t// @ts-ignore\n\t\tconst bits = node.parameters.get(\"bits\");\n\t\tthis.bits.setParam(bits);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.input.dispose();\n\t\tthis.output.dispose();\n\t\tthis.bits.dispose();\n\t\treturn this;\n\t}\n}\n","import { Effect, EffectOptions } from \"./Effect\";\nimport { Positive } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { WaveShaper } from \"../signal/WaveShaper\";\n\nexport interface ChebyshevOptions extends EffectOptions {\n\torder: Positive;\n\toversample: OverSampleType;\n}\n\n/**\n * Chebyshev is a waveshaper which is good \n * for making different types of distortion sounds.\n * Note that odd orders sound very different from even ones, \n * and order = 1 is no change. \n * Read more at [music.columbia.edu](http://music.columbia.edu/cmc/musicandcomputers/chapter4/04_06.php).\n * @example\n * import { Chebyshev, MonoSynth } from \"tone\";\n * // create a new cheby\n * const cheby = new Chebyshev(50).toDestination();\n * // create a monosynth connected to our cheby\n * const synth = new MonoSynth().connect(cheby);\n * synth.triggerAttackRelease(\"C2\", 0.4);\n * @category Effect\n */\nexport class Chebyshev extends Effect<ChebyshevOptions> {\n\n\treadonly name: string = \"Chebyshev\";\n\n\t/**\n\t * The private waveshaper node\n\t */\n\tprivate _shaper: WaveShaper;\n\n\t/**\n\t * holds onto the order of the filter\n\t */\n\tprivate _order: number;\n\t\n\t/**\n\t * @param order The order of the chebyshev polynomial. Normal range between 1-100. \n\t */\n\tconstructor(order?: Positive);\n\tconstructor(options?: Partial<ChebyshevOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Chebyshev.getDefaults(), arguments, [\"order\"]));\n\t\tconst options = optionsFromArguments(Chebyshev.getDefaults(), arguments, [\"order\"]);\n\n\t\tthis._shaper = new WaveShaper({\n\t\t\tcontext: this.context,\n\t\t\tlength: 4096\n\t\t});\n\t\tthis._order = options.order;\n\n\t\tthis.connectEffect(this._shaper);\n\t\tthis.order = options.order;\n\t\tthis.oversample = options.oversample;\n\t}\n\n\tstatic getDefaults(): ChebyshevOptions {\n\t\treturn Object.assign(Effect.getDefaults(), {\n\t\t\torder: 1,\n\t\t\toversample: \"none\" as \"none\"\n\t\t});\n\t}\n\n\t/**\n\t * get the coefficient for that degree\n\t * @param  x the x value\n\t * @param  degree \n\t * @param  memo memoize the computed value. this speeds up computation greatly. \n\t */\n\tprivate _getCoefficient(x: number, degree: number, memo: Map<number, number>): number {\n\t\tif (memo.has(degree)) {\n\t\t\treturn memo.get(degree) as number;\n\t\t} else if (degree === 0) {\n\t\t\tmemo.set(degree, 0);\n\t\t} else if (degree === 1) {\n\t\t\tmemo.set(degree, x);\n\t\t} else {\n\t\t\tmemo.set(degree, 2 * x * this._getCoefficient(x, degree - 1, memo) - this._getCoefficient(x, degree - 2, memo));\n\t\t}\n\t\treturn memo.get(degree) as number;\n\t}\n\n\t/**\n\t * The order of the Chebyshev polynomial which creates the equation which is applied to the incoming \n\t * signal through a Tone.WaveShaper. The equations are in the form:\n\t * ```\n\t * order 2: 2x^2 + 1\n\t * order 3: 4x^3 + 3x \n\t * ```\n\t * @min 1\n\t * @max 100\n\t */\n\tget order(): Positive {\n\t\treturn this._order;\n\t}\n\tset order(order) {\n\t\tthis._order = order;\n\t\tthis._shaper.setMap((x => {\n\t\t\treturn this._getCoefficient(x, order, new Map());\n\t\t}));\n\t}\n\n\t/**\n\t * The oversampling of the effect. Can either be \"none\", \"2x\" or \"4x\".\n\t */\n\tget oversample(): OverSampleType {\n\t\treturn this._shaper.oversample;\n\t}\n\tset oversample(oversampling) {\n\t\tthis._shaper.oversample = oversampling;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._shaper.dispose();\n\t\treturn this;\n\t}\n}\n","import { EffectOptions } from \"./Effect\";\nimport { OutputNode, ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { connect, connectSeries } from \"../core/Connect\";\nimport { CrossFade } from \"../component/channel/CrossFade\";\nimport { Signal } from \"../signal/Signal\";\nimport { Split } from \"../component/channel/Split\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Merge } from \"../component\";\nimport { readOnly } from \"../core/util/Interface\";\n\nexport type StereoEffectOptions = EffectOptions;\n\n/**\n * Base class for Stereo effects.\n */\nexport class StereoEffect<Options extends StereoEffectOptions> extends ToneAudioNode<Options> {\n\n\treadonly name: string = \"StereoEffect\";\n\n\treadonly input: Gain;\n\treadonly output: CrossFade;\n\n\t/**\n\t * the drywet knob to control the amount of effect\n\t */\n\tprivate _dryWet: CrossFade;\n\t\n\t/**\n\t * The wet control, i.e. how much of the effected\n\t * will pass through to the output.\n\t */\n\treadonly wet: Signal<\"normalRange\">;\n\t\n\t/**\n\t * Split it\n\t */\n\tprotected _split: Split;\n\t\n\t/**\n\t * the stereo effect merger\n\t */\n\tprotected _merge: Merge;\n\n\tconstructor(options: StereoEffectOptions) {\n\n\t\tsuper(options);\n\n\t\tthis.input = new Gain({ context: this.context });\n\t\t// force mono sources to be stereo\n\t\tthis.input.channelCount = 2;\n\t\tthis.input.channelCountMode = \"explicit\";\n\n\t\tthis._dryWet = this.output = new CrossFade({\n\t\t\tcontext: this.context,\n\t\t\tfade: options.wet\n\t\t});\n\t\tthis.wet = this._dryWet.fade;\n\t\tthis._split = new Split({ context: this.context, channels: 2 });\n\t\tthis._merge = new Merge({ context: this.context, channels: 2 });\n\n\t\t// connections\n\t\tthis.input.connect(this._split);\n\t\t// dry wet connections\n\t\tthis.input.connect(this._dryWet.a);\n\t\tthis._merge.connect(this._dryWet.b);\n\t\treadOnly(this, [\"wet\"]);\n\t}\n\t\n\t/**\n\t * Connect the left part of the effect\n\t */\n\tprotected connectEffectLeft(...nodes: OutputNode[]): void{\n\t\tthis._split.connect(nodes[0], 0, 0);\n\t\tconnectSeries(...nodes);\n\t\tconnect(nodes[nodes.length-1], this._merge, 0, 0);\n\t}\n\t\n\t/**\n\t * Connect the right part of the effect\n\t */\n\tprotected connectEffectRight(...nodes: OutputNode[]): void{\n\t\tthis._split.connect(nodes[0], 1, 0);\n\t\tconnectSeries(...nodes);\n\t\tconnect(nodes[nodes.length-1], this._merge, 0, 1);\n\t}\n\n\tstatic getDefaults(): StereoEffectOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\twet: 1,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._dryWet.dispose();\n\t\tthis._split.dispose();\n\t\tthis._merge.dispose();\n\t\treturn this;\n\t}\n}\n","import { StereoEffect, StereoEffectOptions } from \"./StereoEffect\";\nimport { NormalRange } from \"../core/type/Units\";\nimport { Signal } from \"../signal/Signal\";\nimport { Gain } from \"../core/context/Gain\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Split } from \"../component/channel/Split\";\nimport { Merge } from \"../component/channel/Merge\";\n\nexport interface StereoFeedbackEffectOptions extends StereoEffectOptions {\n\tfeedback: NormalRange;\n}\n\n/**\n * Just like a stereo feedback effect, but the feedback is routed from left to right\n * and right to left instead of on the same channel.\n * ```\n * +--------------------------------+ feedbackL <-----------------------------------+\n * |                                                                                |\n * +-->                          +----->        +---->                          +---+\n *      feedbackMerge +--> split        (EFFECT)       merge +--> feedbackSplit\n * +-->                          +----->        +---->                          +---+\n * |                                                                                |\n * +--------------------------------+ feedbackR <-----------------------------------+\n * ```\n */\nexport class StereoFeedbackEffect<Options extends StereoFeedbackEffectOptions> extends StereoEffect<Options> {\n\t\n\t/**\n\t * The amount of feedback from the output\n\t * back into the input of the effect (routed\n\t * across left and right channels).\n\t */\n\treadonly feedback: Signal<\"normalRange\">;\n\n\t/**\n\t * the left side feedback\n\t */\n\tprotected _feedbackL: Gain;\n\n\t/**\n\t * the right side feedback\n\t */\n\tprotected _feedbackR: Gain;\n\n\t/**\n\t * Split the channels for feedback\n\t */\n\tprotected _feedbackSplit: Split;\n\n\t/**\n\t * Merge the channels for feedback\n\t */\n\tprotected _feedbackMerge: Merge;\n\n\tconstructor(options: StereoFeedbackEffectOptions) {\n\n\t\tsuper(options);\n\n\t\tthis.feedback = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.feedback, \n\t\t\tunits: \"normalRange\"\n\t\t});\n\t\tthis._feedbackL = new Gain({ context: this.context });\n\t\tthis._feedbackR = new Gain({ context: this.context });\n\n\t\tthis._feedbackSplit = new Split({ context: this.context, channels: 2 });\n\t\tthis._feedbackMerge = new Merge({ context: this.context, channels: 2 });\n\n\t\tthis._merge.connect(this._feedbackSplit);\n\t\tthis._feedbackMerge.connect(this._split);\n\t\t\n\t\t// the left output connected to the left input\n\t\tthis._feedbackSplit.connect(this._feedbackL, 0, 0);\n\t\tthis._feedbackL.connect(this._feedbackMerge, 0, 0);\n\n\t\t// the right output connected to the right input\n\t\tthis._feedbackSplit.connect(this._feedbackR, 1, 0);\n\t\tthis._feedbackR.connect(this._feedbackMerge, 0, 1);\n\t\t\n\t\t// the feedback control\n\t\tthis.feedback.fan(this._feedbackL.gain, this._feedbackR.gain);\n\t\treadOnly(this, [\"feedback\"]);\n\t}\n\n\tstatic getDefaults(): StereoFeedbackEffectOptions {\n\t\treturn Object.assign(StereoEffect.getDefaults(), {\n\t\t\tfeedback: 0.5,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.feedback.dispose();\n\t\tthis._feedbackL.dispose();\n\t\tthis._feedbackR.dispose();\n\t\tthis._feedbackSplit.dispose();\n\t\tthis._feedbackMerge.dispose();\n\t\treturn this;\n\t}\n}\n","import { StereoFeedbackEffect, StereoFeedbackEffectOptions } from \"../effect/StereoFeedbackEffect\";\nimport { Degrees, Frequency, Milliseconds, NormalRange, Seconds, Time } from \"../core/type/Units\";\nimport { ToneOscillatorType } from \"../source/oscillator/OscillatorInterface\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Delay } from \"../core/context/Delay\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\n\nexport interface ChorusOptions extends StereoFeedbackEffectOptions {\n\tfrequency: Frequency;\n\tdelayTime: Milliseconds;\n\tdepth: NormalRange;\n\ttype: ToneOscillatorType;\n\tspread: Degrees;\t\n}\n\n/**\n * Chorus is a stereo chorus effect composed of a left and right delay with an [[LFO]] applied to the delayTime of each channel.\n * When [[feedback]] is set to a value larger than 0, you also get Flanger-type effects. \n * Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna/blob/master/tuna.js).\n * Read more on the chorus effect on [SoundOnSound](http://www.soundonsound.com/sos/jun04/articles/synthsecrets.htm).\n *\n * @example\n * import { Chorus, PolySynth } from \"tone\";\n * const chorus = new Chorus(4, 2.5, 0.5);\n * const synth = new PolySynth().connect(chorus);\n * synth.triggerAttackRelease([\"C3\", \"E3\", \"G3\"], \"8n\");\n * \n * @category Effect\n */\nexport class Chorus extends StereoFeedbackEffect<ChorusOptions> {\n\n\treadonly name: string = \"Chorus\";\n\n\t/**\n\t * the depth of the chorus\n\t */\n\tprivate _depth: NormalRange;\n\n\t/**\n\t * the delayTime in seconds.\n\t */\n\tprivate _delayTime: Seconds;\n\n\t/**\n\t * the lfo which controls the delayTime\n\t */\n\tprivate _lfoL: LFO\n\n\t/**\n\t * another LFO for the right side with a 180 degree phase diff\n\t */\n\tprivate _lfoR: LFO\n\n\t/**\n\t * delay for left\n\t */\n\tprivate _delayNodeL: Delay;\n\n\t/**\n\t * delay for right\n\t */\n\tprivate _delayNodeR: Delay;\n\n\t/**\n\t * The frequency of the LFO which modulates the delayTime.\n\t */\n\treadonly frequency: Signal<\"frequency\">\n\n\t/**\n\t * @param frequency The frequency of the LFO.\n\t * @param delayTime The delay of the chorus effect in ms.\n\t * @param depth The depth of the chorus.\n\t */\n\tconstructor(frequency?: Frequency, delayTime?: Milliseconds, depth?: NormalRange);\n\tconstructor(options?: Partial<ChorusOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Chorus.getDefaults(), arguments, [\"frequency\", \"delayTime\", \"depth\"]));\n\t\tconst options = optionsFromArguments(Chorus.getDefaults(), arguments, [\"frequency\", \"delayTime\", \"depth\"]);\n\n\t\tthis._depth = options.depth;\n\t\tthis._delayTime = options.delayTime / 1000;\n\t\tthis._lfoL = new LFO({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.frequency,\n\t\t\tmin: 0,\n\t\t\tmax: 1,\n\t\t});\n\t\tthis._lfoR = new LFO({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.frequency,\n\t\t\tmin: 0,\n\t\t\tmax: 1,\n\t\t\tphase: 180\n\t\t});\n\t\tthis._delayNodeL = new Delay({ context: this.context });\n\t\tthis._delayNodeR = new Delay({ context: this.context });\n\t\tthis.frequency = this._lfoL.frequency;\n\t\treadOnly(this, [\"frequency\"]);\n\t\t// have one LFO frequency control the other\n\t\tthis._lfoL.frequency.connect(this._lfoR.frequency);\n\n\t\t// connections\n\t\tthis.connectEffectLeft(this._delayNodeL);\n\t\tthis.connectEffectRight(this._delayNodeR);\n\t\t// lfo setup\n\t\tthis._lfoL.connect(this._delayNodeL.delayTime);\n\t\tthis._lfoR.connect(this._delayNodeR.delayTime);\n\t\t// set the initial values\n\t\tthis.depth = this._depth;\n\t\tthis.type = options.type;\n\t\tthis.spread = options.spread;\n\t}\n\n\tstatic getDefaults(): ChorusOptions {\n\t\treturn Object.assign(StereoFeedbackEffect.getDefaults(), {\n\t\t\tfrequency: 1.5,\n\t\t\tdelayTime: 3.5,\n\t\t\tdepth: 0.7,\n\t\t\ttype: \"sine\" as \"sine\",\n\t\t\tspread: 180,\n\t\t\tfeedback: 0,\n\t\t\twet: 0.5,\n\t\t});\n\t}\n\n\t/**\n\t * The depth of the effect. A depth of 1 makes the delayTime\n\t * modulate between 0 and 2*delayTime (centered around the delayTime).\n\t */\n\tget depth(): NormalRange {\n\t\treturn this._depth;\n\t}\n\tset depth(depth) {\n\t\tthis._depth = depth;\n\t\tconst deviation = this._delayTime * depth;\n\t\tthis._lfoL.min = Math.max(this._delayTime - deviation, 0);\n\t\tthis._lfoL.max = this._delayTime + deviation;\n\t\tthis._lfoR.min = Math.max(this._delayTime - deviation, 0);\n\t\tthis._lfoR.max = this._delayTime + deviation;\n\t}\n\n\t/**\n\t * The delayTime in milliseconds of the chorus. A larger delayTime\n\t * will give a more pronounced effect. Nominal range a delayTime\n\t * is between 2 and 20ms.\n\t */\n\tget delayTime(): Milliseconds {\n\t\treturn this._delayTime * 1000;\n\t}\n\tset delayTime(delayTime) {\n\t\tthis._delayTime = delayTime / 1000;\n\t\tthis.depth = this._depth;\n\t}\n\n\t/**\n\t * The oscillator type of the LFO.\n\t */\n\tget type(): ToneOscillatorType {\n\t\treturn this._lfoL.type;\n\t}\n\tset type(type) {\n\t\tthis._lfoL.type = type;\n\t\tthis._lfoR.type = type;\n\t}\n\n\t/**\n\t * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.\n\t * When set to 180, LFO's will be panned hard left and right respectively.\n\t */\n\tget spread(): Degrees {\n\t\treturn this._lfoR.phase - this._lfoL.phase;\n\t}\n\tset spread(spread) {\n\t\tthis._lfoL.phase = 90 - (spread/2);\n\t\tthis._lfoR.phase = (spread/2) + 90;\n\t}\n\n\t/**\n\t * Start the effect.\n\t */\n\tstart(time?: Time): this {\n\t\tthis._lfoL.start(time);\n\t\tthis._lfoR.start(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the lfo\n\t */\n\tstop(time?: Time): this {\n\t\tthis._lfoL.stop(time);\n\t\tthis._lfoR.stop(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sync the filter to the transport. See [[LFO.sync]]\n\t */\n\tsync(): this {\n\t\tthis._lfoL.sync();\n\t\tthis._lfoR.sync();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unsync the filter from the transport.\n\t */\n\tunsync(): this {\n\t\tthis._lfoL.unsync();\n\t\tthis._lfoR.unsync();\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._lfoL.dispose();\n\t\tthis._lfoR.dispose();\n\t\tthis._delayNodeL.dispose();\n\t\tthis._delayNodeR.dispose();\n\t\tthis.frequency.dispose();\n\t\treturn this;\n\t}\n}\n","import { optionsFromArguments } from \"../core/util/Defaults\";\nimport { WaveShaper } from \"../signal/WaveShaper\";\nimport { Effect, EffectOptions } from \"./Effect\";\n\nexport interface DistortionOptions extends EffectOptions {\n\tdistortion: number;\n\toversample: OverSampleType;\n}\n\n/**\n * A simple distortion effect using Tone.WaveShaper.\n * Algorithm from [this stackoverflow answer](http://stackoverflow.com/a/22313408).\n *\n * @example\n * import { Distortion, FMSynth } from \"tone\";\n * const dist = new Distortion(0.8).toDestination();\n * const fm = new FMSynth().connect(dist);\n * fm.triggerAttackRelease(\"A1\", \"8n\");\n * @category Effect\n */\nexport class Distortion extends Effect<DistortionOptions> {\n\n\treadonly name: string = \"Distortion\";\n\n\t/**\n\t * The waveshaper which does the distortion\n\t */\n\tprivate _shaper: WaveShaper;\n\n\t/**\n\t * Stores the distortion value\n\t */\n\tprivate _distortion: number;\n\n\t/**\n\t * @param distortion The amount of distortion (nominal range of 0-1)\n\t */\n\tconstructor(distortion?: number);\n\tconstructor(options?: Partial<DistortionOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Distortion.getDefaults(), arguments, [\"distortion\"]));\n\t\tconst options = optionsFromArguments(Distortion.getDefaults(), arguments, [\"distortion\"]);\n\n\t\tthis._shaper = new WaveShaper({\n\t\t\tcontext: this.context,\n\t\t\tlength: 4096,\n\t\t});\n\n\t\tthis._distortion = options.distortion;\n\n\t\tthis.connectEffect(this._shaper);\n\t\tthis.distortion = options.distortion;\n\t\tthis.oversample = options.oversample;\n\t}\n\n\tstatic getDefaults(): DistortionOptions {\n\t\treturn Object.assign(Effect.getDefaults(), {\n\t\t\tdistortion: 0.4,\n\t\t\toversample: \"none\" as OverSampleType,\n\t\t});\n\t}\n\n\t/**\n\t * The amount of distortion. Nominal range is between 0 and 1.\n\t */\n\tget distortion(): number {\n\t\treturn this._distortion;\n\t}\n\tset distortion(amount) {\n\t\tthis._distortion = amount;\n\t\tconst k = amount * 100;\n\t\tconst deg = Math.PI / 180;\n\t\tthis._shaper.setMap((x) => {\n\t\t\tif (Math.abs(x) < 0.001) {\n\t\t\t\t// should output 0 when input is 0\n\t\t\t\treturn 0;\n\t\t\t} else {\n\t\t\t\treturn (3 + k) * x * 20 * deg / (Math.PI + k * Math.abs(x));\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * The oversampling of the effect. Can either be \"none\", \"2x\" or \"4x\".\n\t */\n\tget oversample(): OverSampleType {\n\t\treturn this._shaper.oversample;\n\t}\n\tset oversample(oversampling) {\n\t\tthis._shaper.oversample = oversampling;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._shaper.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../core/context/Gain\";\nimport { Param } from \"../core/context/Param\";\nimport { NormalRange } from \"../core/type/Units\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Effect, EffectOptions } from \"./Effect\";\n\nexport interface FeedbackEffectOptions extends EffectOptions {\n\t/**\n\t * The feedback from the output back to the input\n\t * ```\n\t * +---<--------<---+\n\t * |                |\n\t * |  +----------+  |\n\t * +--> feedback +>-+\n\t *    +----------+\n\t * ```\n\t */\n\tfeedback: NormalRange;\n}\n\n/**\n * FeedbackEffect provides a loop between an audio source and its own output.\n * This is a base-class for feedback effects.\n */\nexport abstract class FeedbackEffect<Options extends FeedbackEffectOptions> extends Effect<Options> {\n\n\treadonly name: string = \"FeedbackEffect\";\n\n\t/**\n\t * the gain which controls the feedback\n\t */\n\tprivate _feedbackGain: Gain<\"normalRange\">;\n\n\t/**\n\t * The amount of signal which is fed back into the effect input.\n\t */\n\tfeedback: Param<\"normalRange\">;\n\n\tconstructor(options: FeedbackEffectOptions) {\n\n\t\tsuper(options);\n\n\t\tthis._feedbackGain = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: options.feedback,\n\t\t\tunits: \"normalRange\",\n\t\t});\n\n\t\tthis.feedback = this._feedbackGain.gain;\n\t\treadOnly(this, \"feedback\");\n\n\t\t// the feedback loop\n\t\tthis.effectReturn.chain(this._feedbackGain, this.effectSend);\n\t}\n\n\tstatic getDefaults(): FeedbackEffectOptions {\n\t\treturn Object.assign(Effect.getDefaults(), {\n\t\t\tfeedback: 0.125,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._feedbackGain.dispose();\n\t\tthis.feedback.dispose();\n\t\treturn this;\n\t}\n}\n","import { Delay } from \"../core/context/Delay\";\nimport { Param } from \"../core/context/Param\";\nimport { NormalRange, Time } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { FeedbackEffect, FeedbackEffectOptions } from \"./FeedbackEffect\";\n\ninterface FeedbackDelayOptions extends FeedbackEffectOptions {\n\tdelayTime: Time;\n\tmaxDelay: Time;\n}\n\n/**\n * FeedbackDelay is a DelayNode in which part of output signal is fed back into the delay.\n *\n * @param delayTime The delay applied to the incoming signal.\n * @param feedback The amount of the effected signal which is fed back through the delay.\n * @example\n * import { FeedbackDelay, MembraneSynth } from \"tone\";\n * const feedbackDelay = new FeedbackDelay(\"8n\", 0.5).toDestination();\n * const tom = new MembraneSynth({\n * \toctaves: 4,\n * \tpitchDecay: 0.1\n * }).connect(feedbackDelay);\n * tom.triggerAttackRelease(\"A2\", \"32n\");\n * @category Effect\n */\nexport class FeedbackDelay extends FeedbackEffect<FeedbackDelayOptions> {\n\n\treadonly name: string = \"FeedbackDelay\";\n\n\t/**\n\t * the delay node\n\t */\n\tprivate _delayNode: Delay;\n\n\t/**\n\t * The delayTime of the FeedbackDelay.\n\t */\n\treadonly delayTime: Param<\"time\">;\n\n\tconstructor(delayTime?: Time, feedback?: NormalRange);\n\tconstructor(options?: Partial<FeedbackDelayOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(FeedbackDelay.getDefaults(), arguments, [\"delayTime\", \"feedback\"]));\n\t\tconst options = optionsFromArguments(FeedbackDelay.getDefaults(), arguments, [\"delayTime\", \"feedback\"]);\n\n\t\tthis._delayNode = new Delay({\n\t\t\tcontext: this.context,\n\t\t\tdelayTime: options.delayTime,\n\t\t\tmaxDelay: options.maxDelay,\n\t\t});\n\t\tthis.delayTime = this._delayNode.delayTime;\n\n\t\t// connect it up\n\t\tthis.connectEffect(this._delayNode);\n\t\treadOnly(this, \"delayTime\");\n\t}\n\n\tstatic getDefaults(): FeedbackDelayOptions {\n\t\treturn Object.assign(FeedbackEffect.getDefaults(), {\n\t\t\tdelayTime: 0.25,\n\t\t\tmaxDelay: 1,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._delayNode.dispose();\n\t\tthis.delayTime.dispose();\n\t\treturn this;\n\t}\n}\n","import { connectSeries } from \"../../core/Connect\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\n\n/**\n * PhaseShiftAllpass is an very efficient implementation of a Hilbert Transform\n * using two Allpass filter banks whose outputs have a phase difference of 90°.\n * Here the `offset90` phase is offset by +90° in relation to `output`.\n * Coefficients and structure was developed by Olli Niemitalo.\n * For more details see: http://yehar.com/blog/?p=368\n * @category Component\n */\nexport class PhaseShiftAllpass extends ToneAudioNode<ToneAudioNodeOptions> {\n\n\treadonly name: string = \"PhaseShiftAllpass\";\n\n\treadonly input = new Gain({ context: this.context });\n\n\t/**\n\t * The Allpass filter in the first bank\n\t */\n\tprivate _bank0: IIRFilterNode[];\n\n\t/**\n\t * The Allpass filter in the seconds bank\n\t */\n\tprivate _bank1: IIRFilterNode[];\n\n\t/**\n\t * A IIR filter implementing a delay by one sample used by the first bank\n\t */\n\tprivate _oneSampleDelay: IIRFilterNode;\n\n\t/**\n\t * The phase shifted output\n\t */\n\treadonly output = new Gain({ context: this.context });\n\n\t/**\n\t * The PhaseShifted allpass output\n\t */\n\treadonly offset90 = new Gain({ context: this.context });\n\n\tconstructor(options?: Partial<ToneAudioNodeOptions>) {\n\n\t\tsuper(options);\n\n\t\tconst allpassBank1Values = [0.6923878, 0.9360654322959, 0.9882295226860, 0.9987488452737];\n\t\tconst allpassBank2Values = [0.4021921162426, 0.8561710882420, 0.9722909545651, 0.9952884791278];\n\n\t\tthis._bank0 = this._createAllPassFilterBank(allpassBank1Values);\n\t\tthis._bank1 = this._createAllPassFilterBank(allpassBank2Values);\n\t\tthis._oneSampleDelay = this.context.createIIRFilter([0.0, 1.0], [1.0, 0.0]);\n\n\t\t// connect Allpass filter banks\n\t\tconnectSeries(this.input, ...this._bank0, this._oneSampleDelay, this.output);\n\t\tconnectSeries(this.input, ...this._bank1, this.offset90);\n\t}\n\n\t/**\n\t * Create all of the IIR filters from an array of values using the coefficient calculation.\n\t */\n\tprivate _createAllPassFilterBank(bankValues: number[]): IIRFilterNode[] {\n\t\tconst nodes: IIRFilterNode[] = bankValues.map(value => {\n\t\t\tconst coefficients = [[value * value, 0, -1], [1, 0, -(value * value)]];\n\t\t\treturn this.context.createIIRFilter(coefficients[0], coefficients[1]);\n\t\t});\n\n\t\treturn nodes;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.input.dispose();\n\t\tthis.output.dispose();\n\t\tthis.offset90.dispose();\n\t\tthis._bank0.forEach(f => f.disconnect());\n\t\tthis._bank1.forEach(f => f.disconnect());\n\t\tthis._oneSampleDelay.disconnect();\n\t\treturn this;\n\t}\n}\n","import { PhaseShiftAllpass } from \"../component/filter/PhaseShiftAllpass\";\nimport { Frequency } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Effect, EffectOptions } from \"../effect/Effect\";\nimport { Add } from \"../signal/Add\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Negate } from \"../signal/Negate\";\nimport { Signal } from \"../signal/Signal\";\nimport { Oscillator } from \"../source/oscillator/Oscillator\";\nimport { ToneOscillatorNode } from \"../source/oscillator/ToneOscillatorNode\";\n\ninterface FrequencyShifterOptions extends EffectOptions {\n\tfrequency: Frequency;\n}\n\n/**\n * FrequencyShifter can be used to shift all frequencies of a signal by a fixed amount.\n * The amount can be changed at audio rate and the effect is applied in real time.\n * The frequency shifting is implemented with a technique called single side band modulation using a ring modulator.\n * Note: Contrary to pitch shifting, all frequencies are shifted by the same amount,\n * destroying the harmonic relationship between them. This leads to the classic ring modulator timbre distortion.\n * The algorithm will produces some aliasing towards the high end, especially if your source material\n * contains a lot of high frequencies. Unfortunatelly the webaudio API does not support resampling\n * buffers in real time, so it is not possible to fix it properly. Depending on the use case it might\n * be an option to low pass filter your input before frequency shifting it to get ride of the aliasing.\n * You can find a very detailed description of the algorithm here: https://larzeitlin.github.io/RMFS/\n *\n * @example\n * import { FrequencyShifter, Oscillator } from \"tone\";\n * const input = new Oscillator(230, \"sawtooth\").start();\n * const shift = new FrequencyShifter(42).toDestination();\n * input.connect(shift);\n * @category Effect\n */\nexport class FrequencyShifter extends Effect<FrequencyShifterOptions> {\n\n\treadonly name: string = \"FrequencyShifter\";\n\n\t/**\n\t * The ring modulators carrier frequency. This frequency determines\n\t * by how many Hertz the input signal will be shifted up or down. Default is 0.\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * The ring modulators sine carrier\n\t */\n\tprivate _sine: ToneOscillatorNode;\n\n\t/**\n\t * The ring modulators cosine carrier\n\t */\n\tprivate _cosine: Oscillator;\n\n\t/**\n\t * The sine multiply operator\n\t */\n\tprivate _sineMultiply: Multiply;\n\n\t/**\n\t * The cosine multiply operator\n\t */\n\tprivate _cosineMultiply: Multiply;\n\n\t/**\n\t * The negate operator\n\t */\n\tprivate _negate: Negate;\n\n\t/**\n\t * The final add operator\n\t */\n\tprivate _add: Add;\n\n\t/**\n\t * The phase shifter to create the initial 90° phase offset\n\t */\n\tprivate _phaseShifter: PhaseShiftAllpass;\n\n\t/**\n\t * @param frequency The incoming signal is shifted by this frequency value.\n\t */\n\tconstructor(frequency?: Frequency);\n\tconstructor(options?: Partial<FrequencyShifterOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(FrequencyShifter.getDefaults(), arguments, [\"frequency\"]));\n\t\tconst options = optionsFromArguments(FrequencyShifter.getDefaults(), arguments, [\"frequency\"]);\n\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t});\n\n\t\tthis._sine = new ToneOscillatorNode({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.frequency,\n\t\t\ttype: \"sine\",\n\t\t});\n\n\t\tthis._cosine = new Oscillator({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.frequency,\n\t\t\tphase: -90,\n\t\t\ttype: \"sine\",\n\t\t});\n\n\t\tthis._sineMultiply = new Multiply({ context: this.context });\n\t\tthis._cosineMultiply = new Multiply({ context: this.context });\n\t\tthis._negate = new Negate({ context: this.context });\n\t\tthis._add = new Add({ context: this.context });\n\n\t\tthis._phaseShifter = new PhaseShiftAllpass({ context: this.context });\n\t\tthis.effectSend.connect(this._phaseShifter);\n\n\t\t// connect the carrier frequency signal to the two oscillators\n\t\tthis.frequency.fan(this._sine.frequency, this._cosine.frequency);\n\n\t\tthis._phaseShifter.offset90.connect(this._cosineMultiply);\n\t\tthis._cosine.connect(this._cosineMultiply.factor);\n\n\t\tthis._phaseShifter.connect(this._sineMultiply);\n\t\tthis._sine.connect(this._sineMultiply.factor);\n\t\tthis._sineMultiply.connect(this._negate);\n\n\t\tthis._cosineMultiply.connect(this._add);\n\t\tthis._negate.connect(this._add.addend);\n\n\t\tthis._add.connect(this.effectReturn);\n\n\t\t// start the oscillators at the same time\n\t\tconst now = this.immediate();\n\t\tthis._sine.start(now);\n\t\tthis._cosine.start(now);\n\t}\n\n\tstatic getDefaults(): FrequencyShifterOptions {\n\t\treturn Object.assign(Effect.getDefaults(), {\n\t\t\tfrequency: 0,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis._add.dispose();\n\t\tthis._cosine.dispose();\n\t\tthis._cosineMultiply.dispose();\n\t\tthis._negate.dispose();\n\t\tthis._phaseShifter.dispose();\n\t\tthis._sine.dispose();\n\t\tthis._sineMultiply.dispose();\n\t\treturn this;\n\t}\n}\n","import { StereoEffect, StereoEffectOptions } from \"./StereoEffect\";\nimport { Frequency, NormalRange } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Signal } from \"../signal/Signal\";\nimport { LowpassCombFilter } from \"../component/filter/LowpassCombFilter\";\n\nexport interface FreeverbOptions extends StereoEffectOptions {\n\tdampening: Frequency;\n\troomSize: NormalRange;\n}\n\n/**\n * An array of comb filter delay values from Freeverb implementation\n */\nconst combFilterTunings = [1557 / 44100, 1617 / 44100, 1491 / 44100, 1422 / 44100, 1277 / 44100, 1356 / 44100, 1188 / 44100, 1116 / 44100];\n\n/**\n * An array of allpass filter frequency values from Freeverb implementation\n */\nconst allpassFilterFrequencies = [225, 556, 441, 341];\n\n/**\n * Freeverb is a reverb based on [Freeverb](https://ccrma.stanford.edu/~jos/pasp/Freeverb.html).\n * Read more on reverb on [Sound On Sound](https://web.archive.org/web/20160404083902/http://www.soundonsound.com:80/sos/feb01/articles/synthsecrets.asp).\n * @example\n * import { Freeverb, NoiseSynth } from \"tone\";\n * const freeverb = new Freeverb().toDestination();\n * freeverb.dampening = 1000;\n * // routing synth through the reverb\n * const synth = new NoiseSynth().connect(freeverb);\n * synth.triggerAttackRelease(0.05);\n * @category Effect\n */\nexport class Freeverb extends StereoEffect<FreeverbOptions> {\n\n\treadonly name: string = \"Freeverb\";\n\n\t/**\n\t * The roomSize value between 0 and 1. A larger roomSize will result in a longer decay.\n\t */\n\treadonly roomSize: Signal<\"normalRange\">;\n\n\t/**\n\t * the comb filters\n\t */\n\tprivate _combFilters: LowpassCombFilter[] = [];\n\n\t/**\n\t * the allpass filters on the left\n\t */\n\tprivate _allpassFiltersL: BiquadFilterNode[] = [];\n\n\t/**\n\t * the allpass filters on the right\n\t */\n\tprivate _allpassFiltersR: BiquadFilterNode[]= [];\n\n\t/**\n\t * @param roomSize Correlated to the decay time.\n\t * @param dampening The cutoff frequency of a lowpass filter as part of the reverb.\n\t */\n\tconstructor(roomSize?: NormalRange, dampening?: Frequency);\n\tconstructor(options?: Partial<FreeverbOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Freeverb.getDefaults(), arguments, [\"roomSize\", \"dampening\"]));\n\t\tconst options = optionsFromArguments(Freeverb.getDefaults(), arguments, [\"roomSize\", \"dampening\"]);\n\t\n\t\tthis.roomSize = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.roomSize,\n\t\t\tunits: \"normalRange\",\n\t\t});\n\n\t\t// make the allpass filters on the right\n\t\tthis._allpassFiltersL = allpassFilterFrequencies.map(freq => {\n\t\t\tconst allpassL = this.context.createBiquadFilter();\n\t\t\tallpassL.type = \"allpass\";\n\t\t\tallpassL.frequency.value = freq;\n\t\t\treturn allpassL;\n\t\t});\n\t\t\n\t\t// make the allpass filters on the left\n\t\tthis._allpassFiltersR = allpassFilterFrequencies.map(freq => {\n\t\t\tconst allpassR = this.context.createBiquadFilter();\n\t\t\tallpassR.type = \"allpass\";\n\t\t\tallpassR.frequency.value = freq;\n\t\t\treturn allpassR;\n\t\t});\n\n\t\t// make the comb filters\n\t\tthis._combFilters = combFilterTunings.map((delayTime, index) => {\n\t\t\tconst lfpf = new LowpassCombFilter({\n\t\t\t\tcontext: this.context,\n\t\t\t\tdampening: options.dampening,\n\t\t\t\tdelayTime,\n\t\t\t});\n\t\t\tif (index < combFilterTunings.length / 2) {\n\t\t\t\tthis.connectEffectLeft(lfpf, ...this._allpassFiltersL);\n\t\t\t} else {\n\t\t\t\tthis.connectEffectRight(lfpf, ...this._allpassFiltersR);\n\t\t\t}\n\t\t\tthis.roomSize.connect(lfpf.resonance);\n\t\t\treturn lfpf;\n\t\t});\n\n\t\treadOnly(this, [\"roomSize\"]);\n\t}\n\n\tstatic getDefaults(): FreeverbOptions {\n\t\treturn Object.assign(StereoEffect.getDefaults(), {\n\t\t\troomSize: 0.7,\n\t\t\tdampening: 3000\n\t\t});\n\t}\n\n\t/**\n\t * The amount of dampening of the reverberant signal.\n\t */\n\t\n\tget dampening(): Frequency {\n\t\treturn this._combFilters[0].dampening;\n\t}\n\tset dampening(d) {\n\t\tthis._combFilters.forEach(c => c.dampening = d);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tfor (let al = 0; al < this._allpassFiltersL.length; al++) {\n\t\t\tthis._allpassFiltersL[al].disconnect();\n\t\t}\n\t\tfor (let ar = 0; ar < this._allpassFiltersR.length; ar++) {\n\t\t\tthis._allpassFiltersR[ar].disconnect();\n\t\t}\n\t\tfor (let cf = 0; cf < this._combFilters.length; cf++) {\n\t\t\tthis._combFilters[cf].dispose();\n\t\t}\n\t\tthis.roomSize.dispose();\n\t\treturn this;\n\t}\n}\n","import { NormalRange } from \"../core/type/Units\";\nimport { StereoEffect, StereoEffectOptions } from \"./StereoEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Scale } from \"../signal/Scale\";\nimport { Signal } from \"../signal/Signal\";\nimport { FeedbackCombFilter } from \"../component/filter/FeedbackCombFilter\";\nimport { readOnly } from \"../core/util/Interface\";\n\nexport interface JCReverbOptions extends StereoEffectOptions {\n\troomSize: NormalRange;\n}\n\n/**\n * an array of the comb filter delay time values\n */\nconst combFilterDelayTimes = [1687 / 25000, 1601 / 25000, 2053 / 25000, 2251 / 25000];\n\n/**\n * the resonances of each of the comb filters\n */\nconst combFilterResonances = [0.773, 0.802, 0.753, 0.733];\n\n/**\n * the allpass filter frequencies\n */\nconst allpassFilterFreqs = [347, 113, 37];\n\n/**\n * JCReverb is a simple [Schroeder Reverberator](https://ccrma.stanford.edu/~jos/pasp/Schroeder_Reverberators.html)\n * tuned by John Chowning in 1970.\n * It is made up of three allpass filters and four [[FeedbackCombFilter]].\n *\n * @example\n * import { DuoSynth, FeedbackDelay, JCReverb } from \"tone\";\n * const reverb = new JCReverb(0.4).toDestination();\n * const delay = new FeedbackDelay(0.5);\n * // connecting the synth to reverb through delay\n * const synth = new DuoSynth().chain(delay, reverb);\n * synth.triggerAttackRelease(\"A4\", \"8n\");\n * \n * @category Effect\n */\nexport class JCReverb extends StereoEffect<JCReverbOptions> {\n\n\treadonly name: string = \"JCReverb\";\n\t\n\t/**\n\t * Room size control values. \n\t */\n\treadonly roomSize: Signal<\"normalRange\">\n\n\t/**\n\t * Scale the room size\n\t */\n\tprivate _scaleRoomSize: Scale;\n\n\t/**\n\t * a series of allpass filters\n\t */\n\tprivate _allpassFilters: BiquadFilterNode[] = [];\n\n\t/**\n\t * parallel feedback comb filters\n\t */\n\tprivate _feedbackCombFilters: FeedbackCombFilter[] = [];\n\n\t/**\n\t * @param roomSize Correlated to the decay time.\n\t */\n\tconstructor(roomSize?: NormalRange);\n\tconstructor(options?: Partial<JCReverbOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(JCReverb.getDefaults(), arguments, [\"roomSize\"]));\n\t\tconst options = optionsFromArguments(JCReverb.getDefaults(), arguments, [\"roomSize\"]);\n\n\t\tthis.roomSize = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.roomSize,\n\t\t\tunits: \"normalRange\",\n\t\t});\n\t\tthis._scaleRoomSize = new Scale({\n\t\t\tcontext: this.context,\n\t\t\tmin: -0.733, \n\t\t\tmax: 0.197,\n\t\t});\n\n\t\t// make the allpass filters\n\t\tthis._allpassFilters = allpassFilterFreqs.map(freq => {\n\t\t\tconst allpass = this.context.createBiquadFilter();\n\t\t\tallpass.type = \"allpass\";\n\t\t\tallpass.frequency.value = freq;\n\t\t\treturn allpass;\n\t\t});\n\t\t\n\t\t// and the comb filters\n\t\tthis._feedbackCombFilters = combFilterDelayTimes.map((delayTime, index) => {\n\t\t\tconst fbcf = new FeedbackCombFilter({\n\t\t\t\tcontext: this.context,\n\t\t\t\tdelayTime, \n\t\t\t});\n\t\t\tthis._scaleRoomSize.connect(fbcf.resonance);\n\t\t\tfbcf.resonance.value = combFilterResonances[index];\n\t\t\tif (index < combFilterDelayTimes.length / 2) {\n\t\t\t\tthis.connectEffectLeft(...this._allpassFilters, fbcf);\n\t\t\t} else {\n\t\t\t\tthis.connectEffectRight(...this._allpassFilters, fbcf);\n\t\t\t}\n\t\t\treturn fbcf;\n\t\t});\n\n\t\t// chain the allpass filters together\n\t\tthis.roomSize.connect(this._scaleRoomSize);\n\t\treadOnly(this, [\"roomSize\"]);\n\t}\n\n\tstatic getDefaults(): JCReverbOptions {\n\t\treturn Object.assign(StereoEffect.getDefaults(), {\n\t\t\troomSize: 0.5,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._allpassFilters.forEach(apf => apf.disconnect());\n\t\tthis._feedbackCombFilters.forEach(fbcf => fbcf.dispose());\n\t\tthis.roomSize.dispose();\n\t\tthis._scaleRoomSize.dispose();\n\t\treturn this;\n\t}\n}\n","import { StereoFeedbackEffect, StereoFeedbackEffectOptions } from \"./StereoFeedbackEffect\";\nimport { NormalRange } from \"../core/type/Units\";\nimport { readOnly } from \"../core/util/Interface\";\n\nexport interface StereoXFeedbackEffectOptions extends StereoFeedbackEffectOptions {\n\tfeedback: NormalRange;\n}\n\n/**\n * Just like a [[StereoFeedbackEffect]], but the feedback is routed from left to right\n * and right to left instead of on the same channel.\n * ```\n * +--------------------------------+ feedbackL <-----------------------------------+\n * |                                                                                |\n * +-->                          +----->        +---->                          +-----+\n *      feedbackMerge +--> split        (EFFECT)       merge +--> feedbackSplit     | |\n * +-->                          +----->        +---->                          +---+ |\n * |                                                                                  |\n * +--------------------------------+ feedbackR <-------------------------------------+\n * ```\n */\nexport class StereoXFeedbackEffect<Options extends StereoXFeedbackEffectOptions> extends StereoFeedbackEffect<Options> {\n\t\n\tconstructor(options: StereoXFeedbackEffectOptions) {\n\n\t\tsuper(options);\n\t\t// the left output connected to the right input\n\t\tthis._feedbackL.disconnect();\n\t\tthis._feedbackL.connect(this._feedbackMerge, 0, 1);\n\n\t\t// the left output connected to the right input\n\t\tthis._feedbackR.disconnect();\n\t\tthis._feedbackR.connect(this._feedbackMerge, 0, 0);\n\t\t\n\t\treadOnly(this, [\"feedback\"]);\n\t}\n}\n","import { StereoXFeedbackEffect, StereoXFeedbackEffectOptions } from \"./StereoXFeedbackEffect\";\nimport { NormalRange, Seconds, Time } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Delay } from \"../core/context/Delay\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\n\nexport interface PingPongDelayOptions extends StereoXFeedbackEffectOptions {\n\tdelayTime: Time;\n\tmaxDelay: Seconds;\n}\n\n/**\n * PingPongDelay is a feedback delay effect where the echo is heard\n * first in one channel and next in the opposite channel. In a stereo\n * system these are the right and left channels.\n * PingPongDelay in more simplified terms is two Tone.FeedbackDelays\n * with independent delay values. Each delay is routed to one channel\n * (left or right), and the channel triggered second will always\n * trigger at the same interval after the first.\n * @example\n * import { MembraneSynth, PingPongDelay } from \"tone\";\n * const pingPong = new PingPongDelay(\"4n\", 0.2).toDestination();\n * const drum = new MembraneSynth().connect(pingPong);\n * drum.triggerAttackRelease(\"C4\", \"32n\");\n * @category Effect\n */\nexport class PingPongDelay extends StereoXFeedbackEffect<PingPongDelayOptions> {\n\n\treadonly name: string = \"PingPongDelay\";\n\t\n\t/**\n\t * the delay node on the left side\n\t */\n\tprivate _leftDelay: Delay;\n\n\t/**\n\t * the delay node on the right side\n\t */\n\tprivate _rightDelay: Delay;\n\n\t/**\n\t * the predelay on the right side\n\t */\n\tprivate _rightPreDelay: Delay;\n\n\t/**\n\t * the delay time signal\n\t */\n\treadonly delayTime: Signal<\"time\">;\n\t\n\t/**\n\t * @param delayTime The delayTime between consecutive echos.\n\t * @param feedback The amount of the effected signal which is fed back through the delay.\n\t */\n\tconstructor(delayTime?: Time, feedback?: NormalRange);\n\tconstructor(options?: Partial<PingPongDelayOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(PingPongDelay.getDefaults(), arguments, [\"delayTime\", \"feedback\"]));\n\t\tconst options = optionsFromArguments(PingPongDelay.getDefaults(), arguments, [\"delayTime\", \"feedback\"]);\n\n\t\tthis._leftDelay = new Delay({\n\t\t\tcontext: this.context,\n\t\t\tmaxDelay: options.maxDelay,\n\t\t});\n\t\tthis._rightDelay = new Delay({\n\t\t\tcontext: this.context,\n\t\t\tmaxDelay: options.maxDelay\n\t\t});\n\t\tthis._rightPreDelay = new Delay({\n\t\t\tcontext: this.context,\n\t\t\tmaxDelay: options.maxDelay\n\t\t});\n\t\tthis.delayTime = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"time\",\n\t\t\tvalue: options.delayTime,\n\t\t});\n\n\t\t// connect it up\n\t\tthis.connectEffectLeft(this._leftDelay);\n\t\tthis.connectEffectRight(this._rightPreDelay, this._rightDelay);\n\t\tthis.delayTime.fan(this._leftDelay.delayTime, this._rightDelay.delayTime, this._rightPreDelay.delayTime);\n\t\t// rearranged the feedback to be after the rightPreDelay\n\t\tthis._feedbackL.disconnect();\n\t\tthis._feedbackL.connect(this._rightDelay);\n\t\treadOnly(this, [\"delayTime\"]);\n\t}\n\n\tstatic getDefaults(): PingPongDelayOptions {\n\t\treturn Object.assign(StereoXFeedbackEffect.getDefaults(), {\n\t\t\tdelayTime: 0.25,\n\t\t\tmaxDelay: 1\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._leftDelay.dispose();\n\t\tthis._rightDelay.dispose();\n\t\tthis._rightPreDelay.dispose();\n\t\tthis.delayTime.dispose();\n\t\treturn this;\n\t}\n}\n","import { Interval, Seconds, Time } from \"../core/type/Units\";\nimport { FeedbackEffect, FeedbackEffectOptions } from \"./FeedbackEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Delay } from \"../core/context/Delay\";\nimport { CrossFade } from \"../component/channel/CrossFade\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Param } from \"../core/context/Param\";\nimport { intervalToFrequencyRatio } from \"../core/type/Conversions\";\n\nexport interface PitchShiftOptions extends FeedbackEffectOptions {\n\tpitch: Interval;\n\twindowSize: Seconds;\n\tdelayTime: Time;\n}\n\n/**\n * PitchShift does near-realtime pitch shifting to the incoming signal.\n * The effect is achieved by speeding up or slowing down the delayTime\n * of a DelayNode using a sawtooth wave.\n * Algorithm found in [this pdf](http://dsp-book.narod.ru/soundproc.pdf).\n * Additional reference by [Miller Pucket](http://msp.ucsd.edu/techniques/v0.11/book-html/node115.html).\n * @category Effect\n */\nexport class PitchShift extends FeedbackEffect<PitchShiftOptions> {\n\n\treadonly name: string = \"PitchShift\";\n\t\n\t/**\n\t * The pitch signal\n\t */\n\tprivate _frequency: Signal<\"frequency\">;\n\n\t/**\n\t * Uses two DelayNodes to cover up the jump in the sawtooth wave.\n\t */\n\tprivate _delayA: Delay;\n\n\t/**\n\t * The first LFO.\n\t */\n\tprivate _lfoA: LFO;\n\n\t/**\n\t * The second DelayNode\n\t */\n\tprivate _delayB: Delay;\n\n\t/**\n\t * The second LFO.\n\t */\n\tprivate _lfoB: LFO;\n\n\t/**\n\t * Cross fade quickly between the two delay lines to cover up the jump in the sawtooth wave\n\t */\n\tprivate _crossFade: CrossFade;\n\n\t/**\n\t * LFO which alternates between the two delay lines to cover up the disparity in the\n\t * sawtooth wave.\n\t */\n\tprivate _crossFadeLFO: LFO;\n\n\t/**\n\t * The delay node\n\t */\n\tprivate _feedbackDelay: Delay;\n\n\t/**\n\t * The amount of delay on the input signal\n\t */\n\treadonly delayTime: Param<\"time\">;\n\n\t/**\n\t * Hold the current pitch\n\t */\n\tprivate _pitch: Interval;\n\n\t/**\n\t * Hold the current windowSize\n\t */\n\tprivate _windowSize;\n\n\t/**\n\t * @param pitch The interval to transpose the incoming signal by.\n\t */\n\tconstructor(pitch?: Interval);\n\tconstructor(options?: Partial<PitchShiftOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(PitchShift.getDefaults(), arguments, [\"pitch\"]));\n\t\tconst options = optionsFromArguments(PitchShift.getDefaults(), arguments, [\"pitch\"]);\n\n\t\tthis._frequency = new Signal({ context: this.context });\n\t\tthis._delayA = new Delay({\n\t\t\tmaxDelay: 1,\n\t\t\tcontext: this.context\n\t\t});\n\t\tthis._lfoA = new LFO({\n\t\t\tcontext: this.context,\n\t\t\tmin: 0,\n\t\t\tmax: 0.1,\n\t\t\ttype: \"sawtooth\"\n\t\t}).connect(this._delayA.delayTime);\n\t\tthis._delayB = new Delay({\n\t\t\tmaxDelay: 1,\n\t\t\tcontext: this.context\n\t\t});\n\t\tthis._lfoB = new LFO({\n\t\t\tcontext: this.context,\n\t\t\tmin: 0,\n\t\t\tmax: 0.1,\n\t\t\ttype: \"sawtooth\",\n\t\t\tphase: 180\n\t\t}).connect(this._delayB.delayTime);\n\t\tthis._crossFade = new CrossFade({ context: this.context });\n\t\tthis._crossFadeLFO = new LFO({\n\t\t\tcontext: this.context,\n\t\t\tmin: 0,\n\t\t\tmax: 1,\n\t\t\ttype: \"triangle\",\n\t\t\tphase: 90\n\t\t}).connect(this._crossFade.fade);\n\t\tthis._feedbackDelay = new Delay({\n\t\t\tdelayTime: options.delayTime,\n\t\t\tcontext: this.context,\n\t\t});\n\t\tthis.delayTime = this._feedbackDelay.delayTime;\n\t\treadOnly(this, \"delayTime\");\n\t\tthis._pitch = options.pitch;\n\n\t\tthis._windowSize = options.windowSize;\n\n\t\t// connect the two delay lines up\n\t\tthis._delayA.connect(this._crossFade.a);\n\t\tthis._delayB.connect(this._crossFade.b);\n\t\t// connect the frequency\n\t\tthis._frequency.fan(this._lfoA.frequency, this._lfoB.frequency, this._crossFadeLFO.frequency);\n\t\t// route the input\n\t\tthis.effectSend.fan(this._delayA, this._delayB);\n\t\tthis._crossFade.chain(this._feedbackDelay, this.effectReturn);\n\t\t// start the LFOs at the same time\n\t\tconst now = this.now();\n\t\tthis._lfoA.start(now);\n\t\tthis._lfoB.start(now);\n\t\tthis._crossFadeLFO.start(now);\n\t\t// set the initial value\n\t\tthis.windowSize = this._windowSize;\n\t}\n\n\tstatic getDefaults(): PitchShiftOptions {\n\t\treturn Object.assign(FeedbackEffect.getDefaults(), {\n\t\t\tpitch: 0,\n\t\t\twindowSize: 0.1,\n\t\t\tdelayTime: 0,\n\t\t\tfeedback: 0\n\t\t});\n\t}\n\n\t/**\n\t * Repitch the incoming signal by some interval (measured in semi-tones).\n\t * @example\n\t * import { Oscillator, PitchShift } from \"tone\";\n\t * const pitchShift = new PitchShift().toDestination();\n\t * const osc = new Oscillator().connect(pitchShift).start().toDestination();\n\t * pitchShift.pitch = -12; // down one octave\n\t * pitchShift.pitch = 7; // up a fifth\n\t */\n\tget pitch() {\n\t\treturn this._pitch;\n\t}\n\tset pitch(interval) {\n\t\tthis._pitch = interval;\n\t\tlet factor = 0;\n\t\tif (interval < 0) {\n\t\t\tthis._lfoA.min = 0;\n\t\t\tthis._lfoA.max = this._windowSize;\n\t\t\tthis._lfoB.min = 0;\n\t\t\tthis._lfoB.max = this._windowSize;\n\t\t\tfactor = intervalToFrequencyRatio(interval - 1) + 1;\n\t\t} else {\n\t\t\tthis._lfoA.min = this._windowSize;\n\t\t\tthis._lfoA.max = 0;\n\t\t\tthis._lfoB.min = this._windowSize;\n\t\t\tthis._lfoB.max = 0;\n\t\t\tfactor = intervalToFrequencyRatio(interval) - 1;\n\t\t}\n\t\tthis._frequency.value = factor * (1.2 / this._windowSize);\n\t}\n\n\t/**\n\t * The window size corresponds roughly to the sample length in a looping sampler.\n\t * Smaller values are desirable for a less noticeable delay time of the pitch shifted\n\t * signal, but larger values will result in smoother pitch shifting for larger intervals.\n\t * A nominal range of 0.03 to 0.1 is recommended.\n\t */\n\tget windowSize() {\n\t\treturn this._windowSize;\n\t}\n\tset windowSize(size) {\n\t\tthis._windowSize = this.toSeconds(size);\n\t\tthis.pitch = this._pitch;\n\t}\n\n\tdispose(): this{\n\t\tsuper.dispose();\n\t\tthis._frequency.dispose();\n\t\tthis._delayA.dispose();\n\t\tthis._delayB.dispose();\n\t\tthis._lfoA.dispose();\n\t\tthis._lfoB.dispose();\n\t\tthis._crossFade.dispose();\n\t\tthis._crossFadeLFO.dispose();\n\t\tthis._feedbackDelay.dispose();\n\t\treturn this;\n\t}\n}\n","import { StereoEffect, StereoEffectOptions } from \"./StereoEffect\";\nimport { Frequency, Hertz, Positive } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\n\nexport interface PhaserOptions extends StereoEffectOptions {\n\tfrequency: Frequency;\n\toctaves: Positive;\n\tstages: Positive;\n\tQ: Positive;\n\tbaseFrequency: Frequency;\t\n}\n\n/**\n * Phaser is a phaser effect. Phasers work by changing the phase\n * of different frequency components of an incoming signal. Read more on\n * [Wikipedia](https://en.wikipedia.org/wiki/Phaser_(effect)).\n * Inspiration for this phaser comes from [Tuna.js](https://github.com/Dinahmoe/tuna/).\n * @example\n * import { FMSynth, Phaser } from \"tone\";\n * const phaser = new Phaser({\n * \tfrequency: 15,\n * \toctaves: 5,\n * \tbaseFrequency: 1000\n * }).toDestination();\n * const synth = new FMSynth().connect(phaser);\n * synth.triggerAttackRelease(\"E3\", \"2n\");\n * @category Effect\n */\nexport class Phaser extends StereoEffect<PhaserOptions> {\n\n\treadonly name: string = \"Phaser\";\n\n\t/**\n\t * the lfo which controls the frequency on the left side\n\t */\n\tprivate _lfoL: LFO;\n\n\t/**\n\t * the lfo which controls the frequency on the right side\n\t */\n\tprivate _lfoR: LFO;\n\n\t/**\n\t * the base modulation frequency\n\t */\n\tprivate _baseFrequency: Hertz;\n\n\t/**\n\t * the octaves of the phasing\n\t */\n\tprivate _octaves: Positive;\n\n\t/**\n\t * The quality factor of the filters\n\t */\n\treadonly Q: Signal<\"positive\">;\n\n\t/**\n\t * the array of filters for the left side\n\t */\n\tprivate _filtersL: BiquadFilterNode[];\n\n\t/**\n\t * the array of filters for the left side\n\t */\n\tprivate _filtersR: BiquadFilterNode[];\n\n\t/**\n\t * the frequency of the effect\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * @param frequency The speed of the phasing.\n\t * @param octaves The octaves of the effect.\n\t * @param baseFrequency The base frequency of the filters.\n\t */\n\tconstructor(frequency?: Frequency, octaves?: Positive, baseFrequency?: Frequency);\n\tconstructor(options?: Partial<PhaserOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Phaser.getDefaults(), arguments, [\"frequency\", \"octaves\", \"baseFrequency\"]));\n\t\tconst options = optionsFromArguments(Phaser.getDefaults(), arguments, [\"frequency\", \"octaves\", \"baseFrequency\"]);\n\n\t\tthis._lfoL = new LFO({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.frequency, \n\t\t\tmin: 0,\n\t\t\tmax: 1\n\t\t});\n\t\tthis._lfoR = new LFO({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.frequency, \n\t\t\tmin: 0,\n\t\t\tmax: 1,\n\t\t\tphase: 180,\n\t\t});\n\t\tthis._baseFrequency = this.toFrequency(options.baseFrequency);\n\t\tthis._octaves = options.octaves;\n\t\tthis.Q = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.Q,\n\t\t\tunits: \"positive\",\n\t\t});\n\t\tthis._filtersL = this._makeFilters(options.stages, this._lfoL);\n\t\tthis._filtersR = this._makeFilters(options.stages, this._lfoR);\n\n\t\tthis.frequency = this._lfoL.frequency;\n\t\tthis.frequency.value = options.frequency;\n\n\t\t// connect them up\n\t\tthis.connectEffectLeft(...this._filtersL);\n\t\tthis.connectEffectRight(...this._filtersR);\n\t\t// control the frequency with one LFO\n\t\tthis._lfoL.frequency.connect(this._lfoR.frequency);\n\t\t// set the options\n\t\tthis.baseFrequency = options.baseFrequency;\n\t\tthis.octaves = options.octaves;\n\t\t// start the lfo\n\t\tthis._lfoL.start();\n\t\tthis._lfoR.start();\n\t\treadOnly(this, [\"frequency\", \"Q\"]);\n\t}\n\n\tstatic getDefaults(): PhaserOptions {\n\t\treturn Object.assign(StereoEffect.getDefaults(), {\n\t\t\tfrequency: 0.5,\n\t\t\toctaves: 3,\n\t\t\tstages: 10,\n\t\t\tQ: 10,\n\t\t\tbaseFrequency: 350,\n\t\t});\n\t}\n\n\tprivate _makeFilters(stages: number, connectToFreq: LFO): BiquadFilterNode[] {\n\t\tconst filters: BiquadFilterNode[] = [];\n\t\t// make all the filters\n\t\tfor (let i = 0; i < stages; i++) {\n\t\t\tconst filter = this.context.createBiquadFilter();\n\t\t\tfilter.type = \"allpass\";\n\t\t\tthis.Q.connect(filter.Q);\n\t\t\tconnectToFreq.connect(filter.frequency);\n\t\t\tfilters.push(filter);\n\t\t}\n\t\treturn filters;\n\t}\n\n\t/**\n\t * The number of octaves the phase goes above the baseFrequency\n\t */\n\tget octaves() {\n\t\treturn this._octaves;\n\t}\n\tset octaves(octaves) {\n\t\tthis._octaves = octaves;\n\t\tconst max = this._baseFrequency * Math.pow(2, octaves);\n\t\tthis._lfoL.max = max;\n\t\tthis._lfoR.max = max;\n\t}\n\n\t/**\n\t * The the base frequency of the filters.\n\t */\n\tget baseFrequency(): Frequency {\n\t\treturn this._baseFrequency;\n\t}\n\tset baseFrequency(freq) {\n\t\tthis._baseFrequency = this.toFrequency(freq);\n\t\tthis._lfoL.min = this._baseFrequency;\n\t\tthis._lfoR.min = this._baseFrequency;\n\t\tthis.octaves = this._octaves;\n\t}\n\t\n\tdispose(): this{\n\t\tsuper.dispose();\n\t\tthis.Q.dispose();\n\t\tthis._lfoL.dispose();\n\t\tthis._lfoR.dispose();\n\t\tthis._filtersL.forEach(f => f.disconnect());\n\t\tthis._filtersR.forEach(f => f.disconnect());\n\t\tthis.frequency.dispose();\n\t\treturn this;\n\t}\n}\n\n","import { Merge } from \"../component/channel/Merge\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Seconds } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Noise } from \"../source/Noise\";\nimport { Effect, EffectOptions } from \"./Effect\";\nimport { OfflineContext } from \"../core/context/OfflineContext\";\n\ninterface ReverbOptions extends EffectOptions {\n\tdecay: Seconds;\n\tpreDelay: Seconds;\n}\n\n/**\n * Simple convolution created with decaying noise.\n * Generates an Impulse Response Buffer\n * with Tone.Offline then feeds the IR into ConvolverNode.\n * Note: the Reverb will not make any sound until [[generate]]\n * has been invoked and resolved.\n *\n * Inspiration from [ReverbGen](https://github.com/adelespinasse/reverbGen).\n * Copyright (c) 2014 Alan deLespinasse Apache 2.0 License.\n * \n * @category Effect\n */\nexport class Reverb extends Effect<ReverbOptions> {\n\n\treadonly name: string = \"Reverb\";\n\n\t/**\n\t * Convolver node\n\t */\n\tprivate _convolver: ConvolverNode = this.context.createConvolver();\n\n\t/**\n\t * The duration of the reverb.\n\t * [[generate]] must be called in order to update the values.\n\t */\n\tdecay: Seconds;\n\t\n\t/**\n\t * The amount of time before the reverb is fully ramped in.\n\t * [[generate]] must be called in order to update the values.\n\t */\n\tpreDelay: Seconds;\n\n\t/**\n\t * @param decay The amount of time it will reverberate for.\n\t */\n\tconstructor(decay?: Seconds);\n\tconstructor(options?: Partial<ReverbOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Reverb.getDefaults(), arguments, [\"decay\"]));\n\t\tconst options = optionsFromArguments(Reverb.getDefaults(), arguments, [\"decay\"]);\n\n\t\tthis.decay = options.decay;\n\t\tthis.preDelay = options.preDelay;\n\n\t\tthis.connectEffect(this._convolver);\n\t}\n\n\tstatic getDefaults(): ReverbOptions {\n\t\treturn Object.assign(Effect.getDefaults(), {\n\t\t\tdecay: 1.5,\n\t\t\tpreDelay: 0.01,\n\t\t});\n\t}\n\n\t/**\n\t * Generate the Impulse Response. Returns a promise while the IR is being generated.\n\t * @return Promise which returns this object.\n\t */\n\tasync generate(): Promise<this> {\n\t\tconst context = new OfflineContext(2, this.decay + this.preDelay, this.context.sampleRate);\n\t\t// create a noise burst which decays over the duration\n\t\tconst noiseL = new Noise({ context });\n\t\tconst noiseR = new Noise({ context });\n\t\tconst merge = new Merge({ context });\n\t\tnoiseL.connect(merge, 0, 0);\n\t\tnoiseR.connect(merge, 0, 1);\n\t\tconst gainNode = new Gain({ context }).toDestination();\n\t\tmerge.connect(gainNode);\n\t\tnoiseL.start(0);\n\t\tnoiseR.start(0);\n\t\t// predelay\n\t\tgainNode.gain.setValueAtTime(0, 0);\n\t\tgainNode.gain.setValueAtTime(1, this.preDelay);\n\t\t// decay\n\t\tgainNode.gain.exponentialApproachValueAtTime(0, this.preDelay, this.decay);\n\t\t\n\t\t// render the output\n\t\tconst response = await context.render();\n\t\tthis._convolver.buffer = response.get() as AudioBuffer;\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._convolver.disconnect();\n\t\treturn this;\n\t}\n}\n","import { Effect, EffectOptions } from \"./Effect\";\nimport { MidSideSplit } from \"../component/channel/MidSideSplit\";\nimport { MidSideMerge } from \"../component/channel/MidSideMerge\";\nimport { OutputNode, ToneAudioNode } from \"../core/context/ToneAudioNode\";\n\nexport type MidSideEffectOptions = EffectOptions;\n\n/**\n * Mid/Side processing separates the the 'mid' signal\n * (which comes out of both the left and the right channel)\n * and the 'side' (which only comes out of the the side channels)\n * and effects them separately before being recombined.\n * Applies a Mid/Side seperation and recombination.\n * Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).\n * This is a base-class for Mid/Side Effects.\n */\nexport abstract class MidSideEffect<Options extends MidSideEffectOptions> extends Effect<Options> {\n\n\treadonly name: string = \"MidSideEffect\";\n\n\t/**\n\t * The mid/side split\n\t */\n\tprivate _midSideSplit: MidSideSplit;\n\t\n\t/**\n\t * The mid/side merge\n\t */\n\tprivate _midSideMerge: MidSideMerge;\n\t\n\t/**\n\t * The mid send. Connect to mid processing\n\t */\n\tprotected _midSend: ToneAudioNode;\n\t\n\t/**\n\t * The side send. Connect to side processing\n\t */\n\tprotected _sideSend: ToneAudioNode;\n\t\n\t/**\n\t * The mid return connection\n\t */\n\tprotected _midReturn: ToneAudioNode;\n\t\n\t/**\n\t * The side return connection\n\t */\n\tprotected _sideReturn: ToneAudioNode;\n\n\tconstructor(options: MidSideEffectOptions) {\n\n\t\tsuper(options);\n\n\t\tthis._midSideMerge = new MidSideMerge({ context: this.context });\n\t\tthis._midSideSplit = new MidSideSplit({ context: this.context });\n\t\tthis._midSend = this._midSideSplit.mid;\n\t\tthis._sideSend = this._midSideSplit.side;\n\t\tthis._midReturn = this._midSideMerge.mid;\n\t\tthis._sideReturn = this._midSideMerge.side;\n\n\t\t// the connections\n\t\tthis.effectSend.connect(this._midSideSplit);\n\t\tthis._midSideMerge.connect(this.effectReturn);\n\t}\n\n\t/**\n\t * Connect the mid chain of the effect\n\t */\n\tprotected connectEffectMid(...nodes: OutputNode[]): void{\n\t\tthis._midSend.chain(...nodes, this._midReturn);\n\t}\n\t\n\t/**\n\t * Connect the side chain of the effect\n\t */\n\tprotected connectEffectSide(...nodes: OutputNode[]): void{\n\t\tthis._sideSend.chain(...nodes, this._sideReturn);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._midSideSplit.dispose();\n\t\tthis._midSideMerge.dispose();\n\t\tthis._midSend.dispose();\n\t\tthis._sideSend.dispose();\n\t\tthis._midReturn.dispose();\n\t\tthis._sideReturn.dispose();\n\t\treturn this;\n\t}\n}\n\n","import { MidSideEffect, MidSideEffectOptions } from \"../effect/MidSideEffect\";\nimport { Signal } from \"../signal/Signal\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Subtract } from \"../signal/Subtract\";\nimport { NormalRange } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { connect } from \"../core/context/ToneAudioNode\";\n\nexport interface StereoWidenerOptions extends MidSideEffectOptions {\n\twidth: NormalRange;\n}\n\n/**\n * Applies a width factor to the mid/side seperation.\n * 0 is all mid and 1 is all side.\n * Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).\n * ```\n * Mid *= 2*(1-width)<br>\n * Side *= 2*width\n * ```\n * @category Effect\n */\nexport class StereoWidener extends MidSideEffect<StereoWidenerOptions> {\n\n\treadonly name: string = \"StereoWidener\";\n\n\t/**\n\t * The width control. 0 = 100% mid. 1 = 100% side. 0.5 = no change.\n\t */\n\treadonly width: Signal<\"normalRange\">;\n\t\n\t/**\n\t * Two times the (1-width) for the mid channel\n\t */\n\tprivate _twoTimesWidthMid: Multiply;\n\t\n\t/**\n\t * Two times the width for the side channel\n\t */\n\tprivate _twoTimesWidthSide: Multiply;\n\t\n\t/**\n\t * Mid multiplier\n\t */\n\tprivate _midMult: Multiply;\n\t\n\t/**\n\t * 1 - width\n\t */\n\tprivate _oneMinusWidth: Subtract;\n\t\n\t/**\n\t * Side multiplier\n\t */\n\tprivate _sideMult: Multiply;\n\n\t/**\n\t * @param width The stereo width. A width of 0 is mono and 1 is stereo. 0.5 is no change.\n\t */\n\tconstructor(width?: NormalRange);\n\tconstructor(options?: Partial<StereoWidenerOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(StereoWidener.getDefaults(), arguments, [\"width\"]));\n\t\tconst options = optionsFromArguments(StereoWidener.getDefaults(), arguments, [\"width\"]);\n\t\tthis.width = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.width,\n\t\t\tunits: \"normalRange\",\n\t\t});\n\t\treadOnly(this, [\"width\"]);\n\t\tthis._twoTimesWidthMid = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tvalue: 2,\n\t\t});\n\t\tthis._twoTimesWidthSide = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tvalue: 2,\n\t\t});\n\t\tthis._midMult = new Multiply({ context: this.context });\n\t\tthis._twoTimesWidthMid.connect(this._midMult.factor);\n\t\tthis.connectEffectMid(this._midMult);\n\n\t\tthis._oneMinusWidth = new Subtract({ context: this.context });\n\t\tthis._oneMinusWidth.connect(this._twoTimesWidthMid);\n\t\tconnect(this.context.getConstant(1), this._oneMinusWidth);\n\t\tthis.width.connect(this._oneMinusWidth.subtrahend);\n\n\t\tthis._sideMult = new Multiply({ context: this.context });\n\t\tthis.width.connect(this._twoTimesWidthSide);\n\t\tthis._twoTimesWidthSide.connect(this._sideMult.factor);\n\t\tthis.connectEffectSide(this._sideMult);\n\t}\n\n\tstatic getDefaults(): StereoWidenerOptions {\n\t\treturn Object.assign(MidSideEffect.getDefaults(), {\n\t\t\twidth: 0.5,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.width.dispose();\n\t\tthis._midMult.dispose();\n\t\tthis._sideMult.dispose();\n\t\tthis._twoTimesWidthMid.dispose();\n\t\tthis._twoTimesWidthSide.dispose();\n\t\tthis._oneMinusWidth.dispose();\n\t\treturn this;\n\t}\n}\n","import { StereoEffect, StereoEffectOptions } from \"./StereoEffect\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Signal } from \"../signal/Signal\";\nimport { Degrees, Frequency, NormalRange, Time } from \"../core/type/Units\";\nimport { ToneOscillatorType } from \"../source/oscillator/OscillatorInterface\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\n\nexport interface TremoloOptions extends StereoEffectOptions {\n\tfrequency: Frequency;\n\ttype: ToneOscillatorType;\n\tdepth: NormalRange;\n\tspread: Degrees;\n}\n\n/**\n * Tremolo modulates the amplitude of an incoming signal using an [[LFO]].\n * The effect is a stereo effect where the modulation phase is inverted in each channel.\n *\n * @example\n * import { Oscillator, Tremolo } from \"tone\";\n * // create a tremolo and start it's LFO\n * const tremolo = new Tremolo(9, 0.75).toDestination().start();\n * // route an oscillator through the tremolo and start it\n * const oscillator = new Oscillator().connect(tremolo).start();\n * \n * @category Effect\n */\nexport class Tremolo extends StereoEffect<TremoloOptions> {\n\n\treadonly name: string = \"Tremolo\";\n\t\n\t/**\n\t * The tremolo LFO in the left channel\n\t */\n\tprivate _lfoL: LFO;\n\t\n\t/**\n\t * The tremolo LFO in the left channel\n\t */\n\tprivate _lfoR: LFO;\n\n\t/**\n\t * Where the gain is multiplied\n\t */\n\tprivate _amplitudeL: Gain;\n\n\t/**\n\t * Where the gain is multiplied\n\t */\n\tprivate _amplitudeR: Gain;\n\n\t/**\n\t * The frequency of the tremolo.\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * The depth of the effect. A depth of 0, has no effect\n\t * on the amplitude, and a depth of 1 makes the amplitude\n\t * modulate fully between 0 and 1.\n\t */\n\treadonly depth: Signal<\"normalRange\">;\n\n\t/**\n\t * @param frequency The rate of the effect.\n\t * @param depth The depth of the effect.\n\t */\n\tconstructor(frequency?: Frequency, depth?: NormalRange);\n\tconstructor(options?: Partial<TremoloOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Tremolo.getDefaults(), arguments, [\"frequency\", \"depth\"]));\n\t\tconst options = optionsFromArguments(Tremolo.getDefaults(), arguments, [\"frequency\", \"depth\"]);\n\n\t\tthis._lfoL = new LFO({\n\t\t\tcontext: this.context,\n\t\t\ttype: options.type,\n\t\t\tmin: 1,\n\t\t\tmax: 0,\n\t\t});\n\t\tthis._lfoR = new LFO({\n\t\t\tcontext: this.context,\n\t\t\ttype: options.type,\n\t\t\tmin: 1,\n\t\t\tmax: 0,\n\t\t});\n\t\tthis._amplitudeL = new Gain({ context: this.context });\n\t\tthis._amplitudeR = new Gain({ context: this.context });\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.frequency, \n\t\t\tunits: \"frequency\",\n\t\t});\n\t\tthis.depth = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.depth, \n\t\t\tunits: \"normalRange\",\n\t\t});\n\n\t\treadOnly(this, [\"frequency\", \"depth\"]);\n\t\tthis.connectEffectLeft(this._amplitudeL);\n\t\tthis.connectEffectRight(this._amplitudeR);\n\t\tthis._lfoL.connect(this._amplitudeL.gain);\n\t\tthis._lfoR.connect(this._amplitudeR.gain);\n\t\tthis.frequency.fan(this._lfoL.frequency, this._lfoR.frequency);\n\t\tthis.depth.fan(this._lfoR.amplitude, this._lfoL.amplitude);\n\t\tthis.spread = options.spread;\n\t}\n\n\tstatic getDefaults(): TremoloOptions {\n\t\treturn Object.assign(StereoEffect.getDefaults(), {\n\t\t\tfrequency: 10,\n\t\t\ttype: \"sine\" as \"sine\",\n\t\t\tdepth: 0.5,\n\t\t\tspread: 180,\n\t\t});\n\t}\n\n\t/**\n\t * Start the tremolo.\n\t */\n\tstart(time?: Time): this {\n\t\tthis._lfoL.start(time);\n\t\tthis._lfoR.start(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the tremolo.\n\t */\n\tstop(time?: Time): this {\n\t\tthis._lfoL.stop(time);\n\t\tthis._lfoR.stop(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sync the effect to the transport.\n\t */\n\tsync(): this{\n\t\tthis._lfoL.sync();\n\t\tthis._lfoR.sync();\n\t\tthis.context.transport.syncSignal(this.frequency);\n\t\treturn this;\n\t}\n\t\n\t/**\n\t * Unsync the filter from the transport\n\t */\n\tunsync(): this {\n\t\tthis._lfoL.unsync();\n\t\tthis._lfoR.unsync();\n\t\tthis.context.transport.unsyncSignal(this.frequency);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The oscillator type.\n\t */\n\tget type(): ToneOscillatorType {\n\t\treturn this._lfoL.type;\n\t}\n\tset type(type) {\n\t\tthis._lfoL.type = type;\n\t\tthis._lfoR.type = type;\n\t}\n\n\t/**\n\t * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.\n\t * When set to 180, LFO's will be panned hard left and right respectively.\n\t */\n\tget spread(): Degrees {\n\t\treturn this._lfoR.phase - this._lfoL.phase; // 180\n\t}\n\tset spread(spread) {\n\t\tthis._lfoL.phase = 90 - (spread/2);\n\t\tthis._lfoR.phase = (spread/2) + 90;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._lfoL.dispose();\n\t\tthis._lfoR.dispose();\n\t\tthis._amplitudeL.dispose();\n\t\tthis._amplitudeR.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.depth.dispose();\n\t\treturn this;\n\t}\n}\n","import { Effect, EffectOptions } from \"./Effect\";\nimport { ToneOscillatorType } from \"../source/oscillator/OscillatorInterface\";\nimport { Frequency, NormalRange, Seconds } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Delay } from \"../core/context/Delay\";\nimport { Signal } from \"../signal/Signal\";\nimport { Param } from \"../core/context/Param\";\nimport { readOnly } from \"../core/util/Interface\";\n\nexport interface VibratoOptions extends EffectOptions {\n\tmaxDelay: Seconds;\n\tfrequency: Frequency;\n\tdepth: NormalRange;\n\ttype: ToneOscillatorType;\n}\n/**\n * A Vibrato effect composed of a Tone.Delay and a Tone.LFO. The LFO\n * modulates the delayTime of the delay, causing the pitch to rise and fall. \n * @category Effect\n */\nexport class Vibrato extends Effect<VibratoOptions> {\n\n\treadonly name: string = \"Vibrato\";\n\t/**\n\t * The delay node used for the vibrato effect\n\t */\n\tprivate _delayNode: Delay;\n\t\n\t/**\n\t * The LFO used to control the vibrato\n\t */\n\tprivate _lfo: LFO;\n\t\n\t/**\n\t * The frequency of the vibrato\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\t\n\t/**\n\t * The depth of the vibrato. \n\t */\n\treadonly depth: Param<\"normalRange\">;\n\n\t/**\n\t * @param frequency The frequency of the vibrato.\n\t * @param depth The amount the pitch is modulated.\n\t */\n\tconstructor(frequency?: Frequency, depth?: NormalRange);\n\tconstructor(options?: Partial<VibratoOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Vibrato.getDefaults(), arguments, [\"frequency\", \"depth\"]));\n\t\tconst options = optionsFromArguments(Vibrato.getDefaults(), arguments, [\"frequency\", \"depth\"]);\n\n\t\tthis._delayNode = new Delay({\n\t\t\tcontext: this.context,\n\t\t\tdelayTime: 0,\n\t\t\tmaxDelay: options.maxDelay,\n\t\t});\n\t\tthis._lfo = new LFO({\n\t\t\tcontext: this.context,\n\t\t\ttype: options.type,\n\t\t\tmin: 0,\n\t\t\tmax: options.maxDelay, \n\t\t\tfrequency: options.frequency,\n\t\t\tphase: -90 // offse the phase so the resting position is in the center\n\t\t}).start().connect(this._delayNode.delayTime);\n\t\tthis.frequency = this._lfo.frequency;\n\t\tthis.depth = this._lfo.amplitude;\n\n\t\tthis.depth.value = options.depth;\n\t\treadOnly(this, [\"frequency\", \"depth\"]);\n\t\tthis.effectSend.chain(this._delayNode, this.effectReturn);\n\t}\n\n\tstatic getDefaults(): VibratoOptions {\n\t\treturn Object.assign(Effect.getDefaults(), {\n\t\t\tmaxDelay: 0.005,\n\t\t\tfrequency: 5,\n\t\t\tdepth: 0.1,\n\t\t\ttype: \"sine\" as \"sine\"\n\t\t});\n\t}\n\n\t/**\n\t * Type of oscillator attached to the Vibrato.\n\t */\n\tget type(): ToneOscillatorType {\n\t\treturn this._lfo.type;\n\t}\n\tset type(type) {\n\t\tthis._lfo.type = type;\n\t}\n\t\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._delayNode.dispose();\n\t\tthis._lfo.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.depth.dispose();\n\t\treturn this;\n\t}\n}\n","export { getContext, setContext } from \"./core/Global\";\nexport * from \"./classes\";\nexport * from \"./version\";\nimport { getContext } from \"./core/Global\";\nimport { ToneAudioBuffer } from \"./core/context/ToneAudioBuffer\";\nexport { start } from \"./core/Global\";\n\n/**\n * The current audio context time of the global [[Context]]. \n * See [[Context.now]]\n * @category Core\n */\nexport const now = getContext().now.bind(getContext());\n\n/**\n * The current audio context time of the global [[Context]] without the [[Context.lookAhead]]\n * See [[Context.immediate]]\n * @category Core\n */\nexport const immediate = getContext().immediate.bind(getContext());\n\n/**\n * The Transport object belonging to the global Tone.js Context.\n * See [[Transport]]\n * @category Core\n */\nexport const Transport = getContext().transport;\n\n/**\n * The Destination (output) belonging to the global Tone.js Context.\n * See [[Destination]]\n * @category Core\n */\nexport const Destination = getContext().destination;\n\n/**\n * Draw is used to synchronize the draw frame with the Transport's callbacks. \n * See [[Draw]]\n * @category Core\n */\nexport const Draw = getContext().draw;\n\n/**\n * A reference to the global context\n * See [[Context]]\n * @category Core\n */\nexport const context = getContext();\n\n/**\n * Promise which resolves when all of the loading promises are resolved. \n * Alias for static [[ToneAudioBuffer.loaded]] method.\n * @category Core\n */\nexport const loaded = ToneAudioBuffer.loaded.bind(ToneAudioBuffer);\n"],"sourceRoot":""}