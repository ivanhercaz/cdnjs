{"version":3,"sources":["webpack://Tone/webpack/universalModuleDefinition","webpack://Tone/webpack/bootstrap","webpack://Tone/./node_modules/automation-events/build/es5/bundle.js","webpack://Tone/./node_modules/@babel/runtime/helpers/slicedToArray.js","webpack://Tone/./node_modules/@babel/runtime/helpers/arrayWithHoles.js","webpack://Tone/./node_modules/@babel/runtime/helpers/iterableToArrayLimit.js","webpack://Tone/./node_modules/@babel/runtime/helpers/nonIterableRest.js","webpack://Tone/./node_modules/@babel/runtime/helpers/classCallCheck.js","webpack://Tone/./node_modules/@babel/runtime/helpers/createClass.js","webpack://Tone/./Tone/version.ts","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/abort-error.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/globals.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/invalid-state-error.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/get-native-context.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/is-constructible.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/split-import-statements.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/add-audio-worklet-module.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/analyser-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/get-value-for-key.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/get-native-audio-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/is-owned-by-context.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/get-audio-graph.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/get-audio-node-connections.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/get-audio-node-renderer.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/render-inputs-of-audio-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/test-audio-buffer-copy-channel-methods-subarray-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/index-size-error.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/wrap-audio-buffer-get-channel-data-method.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/audio-buffer-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/get-event-listeners-of-audio-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/set-internal-state.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/wrap-event-listener.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/audio-buffer-source-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/get-native-audio-param.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/get-audio-param-connections.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/render-inputs-of-audio-param.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/connect-audio-param.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/render-automation.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/get-audio-param-renderer.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/is-valid-latency-hint.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/event-target.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/guards/audio-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/guards/audio-node-output-connection.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/guards/audio-worklet-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/connect-native-audio-node-to-native-audio-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/delete-event-listeners-of-audio-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/disconnect-native-audio-node-from-native-audio-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/insert-element-in-set.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/is-active-audio-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/is-passive-audio-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/pick-element-from-set.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/set-internal-state-to-passive-when-necessary.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/test-audio-node-disconnect-method-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/guards/native-audio-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/audio-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/read-only-map.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/audio-worklet-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/copy-from-channel.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/copy-to-channel.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/create-nested-arrays.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/audio-worklet-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/get-audio-worklet-processor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/biquad-filter-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/channel-merger-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/channel-splitter-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/constant-source-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/convolver-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/delay-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/disconnect-multiple-outputs.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/dynamics-compressor-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/gain-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/invalid-access-error.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/iir-filter-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/filter-buffer.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/test-promise-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/minimal-offline-audio-context-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/assign-native-audio-node-option.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/assign-native-audio-node-options.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/test-analyser-node-get-float-time-domain-data-method-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/assign-native-audio-node-audio-param-value.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/compute-buffer-size.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/create-audio-worklet-processor-promise.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/clone-audio-worklet-node-options.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/intercept-connections.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-iir-filter-node-faker-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/not-supported-error.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/offline-audio-context-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/oscillator-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/panner-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/periodic-wave-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/stereo-panner-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/unknown-error.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/wave-shaper-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/module.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/cache-test-result.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/window.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-offline-audio-context-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/is-native-offline-audio-context.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-audio-context-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/get-backup-native-context.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-audio-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-analyser-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/wrap-analyser-node-get-float-time-domain-data-method.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/analyser-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/is-native-audio-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/is-native-audio-param.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/wrap-audio-node-disconnect-method.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/detect-cycles.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/guards/delay-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/none-audio-destination-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-audio-buffer-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/convert-number-to-unsigned-long.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/wrap-audio-buffer-copy-channel-methods.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/wrap-audio-buffer-copy-channel-methods-out-of-bounds.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/wrap-audio-buffer-copy-channel-methods-subarray.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/test-audio-buffer-constructor-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/test-audio-scheduled-source-node-start-method-negative-parameters-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/test-audio-scheduled-source-node-stop-method-consecutive-calls-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/test-audio-scheduled-source-node-stop-method-negative-parameters-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/wrap-audio-scheduled-source-node-stop-method-consecutive-calls.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-audio-buffer-source-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/wrap-audio-buffer-source-node-start-method-consecutive-calls.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/wrap-audio-buffer-source-node-start-method-duration-parameter.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/test-audio-buffer-source-node-start-method-consecutive-calls-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/test-audio-buffer-source-node-start-method-duration-parameter-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/test-audio-buffer-source-node-start-method-offset-clamping-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/wrap-audio-buffer-source-node-start-method-offset-clamping.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/audio-buffer-source-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/audio-param-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/audio-param-renderer.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/constants.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/audio-destination-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/audio-destination-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-audio-destination-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-biquad-filter-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/biquad-filter-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/wrap-channel-merger-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-channel-merger-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/channel-merger-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-channel-splitter-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/wrap-channel-splitter-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/channel-splitter-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-gain-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-constant-source-node-faker-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-constant-source-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/constant-source-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-convolver-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/convolver-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-delay-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/delay-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-dynamics-compressor-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/dynamics-compressor-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/gain-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-script-processor-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/render-native-offline-audio-context.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/test-offline-audio-context-current-time-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/iir-filter-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/wrap-iir-filter-node-get-frequency-response-method.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-iir-filter-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/minimal-base-audio-context-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/audio-listener-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-oscillator-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/oscillator-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-wave-shaper-node-faker-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-wave-shaper-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-panner-node-faker-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-panner-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/panner-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-periodic-wave-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-stereo-panner-node-faker-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-stereo-panner-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/stereo-panner-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/wave-shaper-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/is-secure-context.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/expose-current-frame-and-current-time.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/evaluate-source.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/fetch-source.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/is-native-audio-context.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/is-native-context.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/base-audio-context-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/decode-audio-data.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/detach-array-buffer.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/data-clone-error.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/encoding-error.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/media-element-audio-source-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-media-element-audio-source-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/media-stream-audio-source-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-media-stream-audio-source-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/media-stream-track-audio-source-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-media-stream-track-audio-source-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/audio-context-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/connect-multiple-outputs.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-audio-worklet-node-faker-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/create-audio-worklet-processor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-audio-worklet-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/test-clonability-of-audio-worklet-node-options.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-audio-worklet-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/minimal-audio-context-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/create-native-offline-audio-context.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/start-rendering.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/is-any-audio-context.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/is-any-audio-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/is-any-audio-param.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/is-any-offline-audio-context.js","webpack://Tone/./Tone/core/context/AudioContext.ts","webpack://Tone/./Tone/core/clock/Ticker.ts","webpack://Tone/./Tone/core/util/AdvancedTypeCheck.ts","webpack://Tone/./Tone/core/util/TypeCheck.ts","webpack://Tone/./Tone/core/util/Defaults.ts","webpack://Tone/./Tone/core/util/Debug.ts","webpack://Tone/./Tone/core/Tone.ts","webpack://Tone/./Tone/core/util/Emitter.ts","webpack://Tone/./Tone/core/util/Timeline.ts","webpack://Tone/./Tone/core/context/ContextInitialization.ts","webpack://Tone/./Tone/core/context/Context.ts","webpack://Tone/./Tone/core/context/OfflineContext.ts","webpack://Tone/./Tone/core/Global.ts","webpack://Tone/./Tone/core/type/Conversions.ts","webpack://Tone/./Tone/core/type/TimeBase.ts","webpack://Tone/./Tone/core/type/Time.ts","webpack://Tone/./Tone/core/type/Frequency.ts","webpack://Tone/./Tone/core/type/TransportTime.ts","webpack://Tone/./Tone/core/context/ToneWithContext.ts","webpack://Tone/./Tone/core/context/Param.ts","webpack://Tone/./Tone/core/context/ToneAudioNode.ts","webpack://Tone/./Tone/core/util/Interface.ts","webpack://Tone/./Tone/core/context/Gain.ts","webpack://Tone/./Tone/core/context/ToneAudioBuffer.ts","webpack://Tone/./Tone/core/context/Offline.ts","webpack://Tone/./Tone/core/context/ToneAudioBuffers.ts","webpack://Tone/./Tone/core/context/Delay.ts","webpack://Tone/./Tone/core/util/StateTimeline.ts","webpack://Tone/./Tone/source/OneShotSource.ts","webpack://Tone/./Tone/signal/ToneConstantSource.ts","webpack://Tone/./Tone/signal/Signal.ts","webpack://Tone/./Tone/core/clock/TickParam.ts","webpack://Tone/./Tone/core/clock/TickSignal.ts","webpack://Tone/./Tone/core/clock/TickSource.ts","webpack://Tone/./Tone/core/clock/Clock.ts","webpack://Tone/./Tone/core/type/Ticks.ts","webpack://Tone/./Tone/core/type/Midi.ts","webpack://Tone/./Tone/core/util/Draw.ts","webpack://Tone/./Tone/core/util/IntervalTimeline.ts","webpack://Tone/./Tone/component/channel/Volume.ts","webpack://Tone/./Tone/core/context/Destination.ts","webpack://Tone/./Tone/core/clock/TransportEvent.ts","webpack://Tone/./Tone/core/clock/TransportRepeatEvent.ts","webpack://Tone/./Tone/core/clock/Transport.ts","webpack://Tone/./Tone/source/Source.ts","webpack://Tone/./Tone/source/buffer/ToneBufferSource.ts","webpack://Tone/./Tone/source/Noise.ts","webpack://Tone/./Tone/source/oscillator/ToneOscillatorNode.ts","webpack://Tone/./Tone/source/oscillator/Oscillator.ts","webpack://Tone/./Tone/signal/SignalOperator.ts","webpack://Tone/./Tone/signal/WaveShaper.ts","webpack://Tone/./Tone/signal/AudioToGain.ts","webpack://Tone/./Tone/signal/Multiply.ts","webpack://Tone/./Tone/source/oscillator/AMOscillator.ts","webpack://Tone/./Tone/source/oscillator/FMOscillator.ts","webpack://Tone/./Tone/source/oscillator/PulseOscillator.ts","webpack://Tone/./Tone/source/oscillator/FatOscillator.ts","webpack://Tone/./Tone/source/oscillator/PWMOscillator.ts","webpack://Tone/./Tone/source/oscillator/OmniOscillator.ts","webpack://Tone/./Tone/source/buffer/Player.ts","webpack://Tone/./Tone/source/buffer/Players.ts","webpack://Tone/./Tone/signal/Add.ts","webpack://Tone/./Tone/signal/Abs.ts","webpack://Tone/./Tone/signal/GainToAudio.ts","webpack://Tone/./Tone/signal/Negate.ts","webpack://Tone/./Tone/signal/Subtract.ts","webpack://Tone/./Tone/signal/Zero.ts","webpack://Tone/./Tone/component/envelope/Envelope.ts","webpack://Tone/./Tone/component/envelope/AmplitudeEnvelope.ts","webpack://Tone/./Tone/instrument/Instrument.ts","webpack://Tone/./Tone/instrument/Monophonic.ts","webpack://Tone/./Tone/instrument/Synth.ts","webpack://Tone/./Tone/instrument/Sampler.ts","webpack://Tone/./Tone/instrument/PolySynth.ts","webpack://Tone/./Tone/instrument/MembraneSynth.ts","webpack://Tone/./Tone/component/filter/Filter.ts","webpack://Tone/./Tone/signal/Scale.ts","webpack://Tone/./Tone/instrument/MetalSynth.ts","webpack://Tone/./Tone/event/ToneEvent.ts","webpack://Tone/./Tone/event/Part.ts","webpack://Tone/./Tone/event/Sequence.ts","webpack://Tone/./Tone/component/channel/CrossFade.ts","webpack://Tone/./Tone/effect/Effect.ts","webpack://Tone/./Tone/effect/FeedbackEffect.ts","webpack://Tone/./Tone/effect/FeedbackDelay.ts","webpack://Tone/./Tone/effect/Convolver.ts","webpack://Tone/./Tone/component/channel/Merge.ts","webpack://Tone/./Tone/effect/Reverb.ts","webpack://Tone/./Tone/component/analysis/Analyser.ts","webpack://Tone/./Tone/component/channel/MultibandSplit.ts","webpack://Tone/./Tone/component/filter/EQ3.ts","webpack://Tone/./Tone/component/dynamics/Compressor.ts","webpack://Tone/./Tone/index.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","_slicedToArray","_classCallCheck","_createClass","createExtendedExponentialRampToValueAutomationEvent","endTime","insertTime","type","createExtendedLinearRampToValueAutomationEvent","createSetValueAutomationEvent","startTime","createSetValueCurveAutomationEvent","values","duration","getTargetValueAtTime","time","valueAtStartTime","_ref","target","timeConstant","Math","exp","isExponentialRampToValueAutomationEvent","automationEvent","isLinearRampToValueAutomationEvent","isAnyRampToValueAutomationEvent","isSetValueAutomationEvent","isSetValueCurveAutomationEvent","getValueOfAutomationEventAtIndexAtTime","automationEvents","index","defaultValue","undefined","length","getEndTimeAndValueOfPreviousAutomationEvent","currentAutomationEvent","nextAutomationEvent","isCancelAndHoldAutomationEvent","isCancelScheduledValuesAutomationEvent","getEventTime","cancelTime","getExponentialRampValueAtTime","pow","getLinearRampValueAtTime","getValueCurveValueAtTime","theoreticIndex","lowerIndex","floor","upperIndex","ceil","interpolateValue","isSetTargetAutomationEvent","AutomationEventList","this","_automationEvents","_currenTime","_defaultValue","iterator","eventTime","findIndex","removedAutomationEvent","slice","lastAutomationEvent","Error","startValue","truncatedAutomationEvent","push","getValue","Float32Array","_index","previousAutomationEvent","persistentAutomationEvent","splice","remainingAutomationEvents","firstRemainingAutomationEvent","unshift","_getEndTimeAndValueOf","_getEndTimeAndValueOf2","_getEndTimeAndValueOf3","_getEndTimeAndValueOf4","_startTime","_value","createCancelAndHoldAutomationEvent","createCancelScheduledValuesAutomationEvent","createExponentialRampToValueAutomationEvent","createLinearRampToValueAutomationEvent","createSetTargetAutomationEvent","arrayWithHoles","iterableToArrayLimit","nonIterableRest","arr","Array","isArray","_arr","_n","_d","_e","_s","_i","next","done","err","TypeError","instance","Constructor","_defineProperties","props","descriptor","configurable","writable","protoProps","staticProps","DOMException","code","ACTIVE_AUDIO_NODE_STORE","WeakSet","AUDIO_NODE_STORE","WeakMap","AUDIO_GRAPHS","AUDIO_PARAM_STORE","AUDIO_PARAM_AUDIO_NODE_STORE","AUXILIARY_GAIN_NODE_STORE","BACKUP_NATIVE_CONTEXT_STORE","CONTEXT_STORE","DETACHED_ARRAY_BUFFERS","EVENT_LISTENERS","NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS","NODE_TO_PROCESSOR_MAPS","TEST_RESULTS","getNativeContext","context","nativeContext","handler","construct","IMPORT_STATEMENT_REGEX","splitImportStatements","source","url","importStatements","sourceWithoutImportStatements","replace","result","match","unresolvedUrl","importStatementWithResolvedUrl","URL","toString","join","verifyParameterDescriptors","parameterDescriptors","verifyProcessorCtor","processorCtor","constructible","Proxy","_a","isConstructible","process","DEFAULT_OPTIONS","channelCount","channelCountMode","channelInterpretation","fftSize","maxDecibels","minDecibels","smoothingTimeConstant","map","getNativeAudioNode","audioNode","isOwnedByContext","nativeAudioNode","getAudioGraph","audioGraph","nodes","getAudioNodeRenderer","audioNodeConnections","renderer","renderInputsOfAudioNode","nativeOfflineAudioContext","Promise","all","activeInputs","connections","input","from","output","render","then","node","connect","reduce","allRenderingPromises","renderingPromises","nativeAudioBuffer","copyToChannel","copyFromChannel","wrapAudioBufferGetChannelDataMethod","audioBuffer","getChannelData","channel","numberOfChannels","getEventListenersOfAudioNode","setInternalState","internalState","has","add","delete","forEach","eventListener","wrapEventListener","event","defineProperties","currentTarget","buffer","loop","loopEnd","loopStart","playbackRate","getNativeAudioParam","audioParam","getAudioParamConnections","params","renderInputsOfAudioParam","nativeAudioParam","audioParamConnections","connectAudioParam","renderAutomation","getAudioParamRenderer","replay","isValidLatencyHint","latencyHint","_nativeEventTarget","_listeners","listener","options","wrappedEventListener","set","addEventListener","dispatchEvent","removeEventListener","isAudioNode","audioNodeOrAudioParam","isAudioNodeOutputConnection","outputConnection","isAudioWorkletNode","connectNativeAudioNodeToNativeAudioNode","nativeSourceAudioNode","nativeDestinationAudioNode","inputs","deleteEventListenerOfAudioNode","disconnectNativeAudioNodeFromNativeAudioNode","disconnect","insertElementInSet","element","predicate","ignoreDuplicates","lmnt","isActiveAudioNode","isPassiveAudioNode","pickElementFromSet","matchingElements","filter","matchingElement","setInternalStateToPassiveWhenNecessary","every","size","testAudioNodeDisconnectMethodSupport","nativeAudioContext","resolve","analyzer","createScriptProcessor","dummy","createGain","ones","createBuffer","channelData","createBufferSource","destination","onaudioprocess","chnnlDt","inputBuffer","some","sample","stop","start","nativeAudioNodeOrAudioParam","addActiveInputConnectionToAudioNode","activeInputConnection","addActiveInputConnectionToAudioParam","addPassiveInputConnectionToAudioNode","passiveInputs","passiveInputConnections","Set","passiveInputConnection","addPassiveInputConnectionToAudioParam","deletePassiveInputConnectionToAudioNode","matchingConnection","deletePassiveInputConnectionToAudioParam","addConnectionToAudioNodeOfAudioContext","outputs","eventListeners","partialConnection","deleteActiveInputConnectionToAudioNode","addConnectionToAudioParamOfAudioContext","deleteActiveInputConnectionToAudioParam","deleteActiveInputConnection","activeInputConnections","deleteInputsOfAudioNode","deleteInputConnectionOfAudioNode","deleteInputsOfAudioParam","deleteInputConnectionOfAudioParam","ReadOnlyMap","parameters","_map","Map","entries","callback","thisArg","keys","numberOfInputs","numberOfOutputs","outputChannelCount","parameterData","processorOptions","createChannelCount","parent","channelNumber","bufferOffset","byteLength","slicedInput","BYTES_PER_ELEMENT","createNestedArrays","x","y","arrays","array","j","processBuffer","async","proxy","renderedBuffer","processorConstructor","numberOfInputChannels","numberOfOutputChannels","sum","processedBuffer","sampleRate","audioWorkletProcessor","nodeToProcessorMap","nativeAudioWorkletNode","getAudioWorkletProcessor","prmtrs","k","potentiallyEmptyInputs","activeSourceFlag","outputChannelSplitterNodeOutput","error","ErrorEvent","Q","detune","frequency","gain","offset","disableNormalization","delayTime","maxDelayTime","getOutputAudioNodeAtIndex","createIndexSizeError","outputAudioNodes","outputAudioNode","attack","knee","ratio","release","threshold","filterBuffer","feedback","feedbackLength","feedforward","feedforwardLength","minLength","xBuffer","yBuffer","bufferIndex","bufferLength","inputLength","uint32Array","Uint32Array","promise","decodeAudioData","catch","assignNativeAudioNodeOption","option","assignNativeAudioNodeOptions","testAnalyserNodeGetFloatTimeDomainDataMethodSupport","nativeAnalyserNode","getFloatTimeDomainData","assignNativeAudioNodeAudioParamValue","wrapAudioScheduledSourceNodeStartMethodNegativeParameters","nativeAudioScheduledSourceNode","when","RangeError","wrapAudioScheduledSourceNodeStopMethodNegativeParameters","computeBufferSize","baseLatency","max","min","round","log2","createAudioWorkletProcessorPromise","audioWorkletNodeOptions","reject","port1","port2","MessageChannel","onmessage","data","close","onmessageerror","postMessage","cloneAudioWorkletNodeOptions","interceptConnections","original","interceptor","apply","arguments","divide","a","b","denominator","evaluatePolynomial","coefficient","z","coneInnerAngle","coneOuterAngle","coneOuterGain","distanceModel","maxDistance","orientationX","orientationY","orientationZ","panningModel","positionX","positionY","positionZ","refDistance","rolloffFactor","pan","curve","oversample","ongoingTests","tester","test","cachedTestResult","ongoingTest","synchronousTestResult","finalTestResult","createCacheTestResult","createWindow","OfflineAudioContext","webkitOfflineAudioContext","createNativeOfflineAudioContextConstructor","nativeOfflineAudioContextConstructor","anything","createIsNativeOfflineAudioContext","AudioContext","webkitAudioContext","createNativeAudioContextConstructor","isNativeOfflineAudioContext","nativeAudioContextConstructor","state","backupNativeContext","bckpNtveCntxt","createGetBackupNativeContext","getBackupNativeContext","factoryFunction","createNativeAudioNodeFactory","cacheTestResult","createNativeAudioNode","ntvCntxt","createAnalyser","byteTimeDomainData","Uint8Array","getByteTimeDomainData","wrapAnalyserNodeGetFloatTimeDomainDataMethod","createNativeAnalyserNodeFactory","createNativeAnalyserNode","renderedNativeAnalyserNodes","renderedNativeAnalyserNode","createAnalyserNode","createAnalyserNodeRendererFactory","AudioNode","createIsNativeAudioNode","AudioParam","createIsNativeAudioParam","createInvalidAccessError","createNotSupportedError","detectCycles","isNativeAudioNode","isNativeAudioParam","audioNodeRenderer","super","_context","_nativeAudioNode","returnValue","connectionsToDestination","connection","destinationOrOutput","clear","filteredConnections","wrapAudioNodeDisconnectMethod","audioNoderRender","addAudioNode","isOffline","auxiliaryGainNodes","nativeGainNode","addConnectionToAudioNodeOfOfflineAudioContext","addConnectionToAudioParamOfOfflineAudioContext","audioNodeConnectionsOfSource","deleteAnyConnection","deleteConnectionAtOutput","numberOfDeletedConnections","deleteConnectionToDestination","createAudioNodeConstructor","audioParamAudioNodeStore","getAudioNodeConnections","getValueForKey","audioNodeOfDestination","isDelayNode","createDetectCycles","audioNodeConstructor","createNoneAudioDestinationNodeConstructor","analyserNodeConstructor","createAnalyserNodeRenderer","noneAudioDestinationNodeConstructor","mergedOptions","_nativeAnalyserNode","frequencyBinCount","getByteFrequencyData","getFloatFrequencyData","createAnalyserNodeConstructor","AudioBuffer","createNativeAudioBufferConstructor","convertNumberToUnsignedLong","unit32Array","createConvertNumberToUnsignedLong","channelNumberAsNumber","bufferOffsetAsNumber","audioBufferLength","destinationLength","sourceLength","createWrapAudioBufferCopyChannelMethods","createWrapAudioBufferCopyChannelMethodsOutOfBounds","subarray","createWrapAudioBufferCopyChannelMethodsSubarray","audioBufferConstructor","nativeAudioBufferConstructor","testNativeAudioBufferConstructorSupport","wrapAudioBufferCopyChannelMethods","wrapAudioBufferCopyChannelMethodsOutOfBounds","wrapAudioBufferCopyChannelMethodsSubarray","_1","_2","_3","_","createAudioBufferConstructor","createTestAudioBufferConstructorSupport","nativeAudioBufferSourceNode","createOscillator","createTestAudioScheduledSourceNodeStartMethodNegativeParametersSupport","createTestAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport","createTestAudioScheduledSourceNodeStopMethodNegativeParametersSupport","disconnectGainNode","isStopped","setValueAtTime","createWrapAudioScheduledSourceNodeStopMethodConsecutiveCalls","testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport","testAudioBufferSourceNodeStartMethodDurationParameterSupport","testAudioBufferSourceNodeStartMethodOffsetClampingSupport","testAudioScheduledSourceNodeStartMethodNegativeParametersSupport","testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport","testAudioScheduledSourceNodeStopMethodNegativeParametersSupport","wrapAudioBufferSourceNodeStartMethodOffsetClampling","wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls","isScheduled","wrapAudioBufferSourceNodeStartMethodConsecutiveCalls","Number","POSITIVE_INFINITY","stopTime","actualStartTime","currentTime","durationInBufferTime","wrapAudioBufferSourceNodeStartMethodDurationParameter","createNativeAudioBufferSourceNodeFactory","createTestAudioBufferSourceNodeStartMethodConsecutiveCallsSupport","offlineAudioContext","audioBufferSourceNode","oncomplete","startRendering","createTestAudioBufferSourceNodeStartMethodDurationParameterSupport","createTestAudioBufferSourceNodeStartMethodOffsetClampingSupport","clampedOffset","createNativeAudioBufferSourceNode","renderedNativeAudioBufferSourceNodes","renderedNativeAudioBufferSourceNode","nativeAudioBufferSourceNodeIsOwnedByContext","createAudioBufferSourceNode","createAudioBufferSourceNodeRendererFactory","createAudioParamRenderer","isAudioParamOfOfflineAudioContext","maxValue","minValue","automationEventList","audioParamRenderer","cancelAndHoldAtTime","flush","previousLastEvent","pop","currentLastEvent","cancelScheduledValues","exponentialRampToValueAtTime","linearRampToValueAtTime","setValueCurveAtTime","setTargetAtTime","firstSample","lastSample","numberOfInterpolatedValues","interpolatedValues","timeOfLastSample","addAudioParam","createAudioParamFactory","audioBufferSourceNodeConstructor","createAudioBufferSourceNodeRenderer","createAudioParam","createInvalidStateError","audioBufferSourceNodeRenderer","_audioBufferSourceNodeRenderer","_isBufferNullified","_isBufferSet","_nativeAudioBufferSourceNode","_onended","_playbackRate","fill","wrappedListener","onended","nativeOnEnded","setInternalStateToInactive","setTimeout","createAudioBufferSourceNodeConstructor","createAudioDestinationNodeRenderer","createNativeAudioDestinationNode","nativeAudioDestinationNode","audioDestinationNodeRenderer","audioWorkletGlobalScope","_isNodeOfNativeOfflineAudioContext","_nativeAudioDestinationNode","maxChannelCount","createAudioDestinationNodeConstructor","nativeAudioDestinationNodePromise","createAudioDestinationNode","isNodeOfNativeOfflineAudioContext","nativeBiquadFilterNode","createBiquadFilter","createNativeBiquadFilterNodeFactory","biquadFilterNodeConstructor","createBiquadFilterNodeRenderer","createNativeBiquadFilterNode","_Q","_detune","_frequency","_gain","_nativeBiquadFilterNode","frequencyHz","magResponse","phaseResponse","getFrequencyResponse","createBiquadFilterNodeConstructor","renderedNativeBiquadFilterNodes","renderedNativeBiquadFilterNode","nativeBiquadFilterNodeIsOwnedByContext","createBiquadFilterNode","createBiquadFilterNodeRendererFactory","channelMergerNode","createWrapChannelMergerNode","wrapChannelMergerNode","nativeChannelMergerNode","createChannelMerger","createNativeChannelMergerNodeFactory","channelMergerNodeConstructor","createChannelMergerNodeRenderer","createNativeChannelMergerNode","createChannelMergerNodeConstructor","renderedNativeAudioNodes","renderedNativeAudioNode","createAudioNode","createChannelMergerNodeRendererFactory","nativeChannelSplitterNode","createChannelSplitter","channelSplitterNode","wrapChannelSplitterNode","createNativeChannelSplitterNodeFactory","channelSplitterNodeConstructor","createChannelSplitterNodeRenderer","createNativeChannelSplitterNode","createChannelSplitterNodeConstructor","createChannelSplitterNodeRendererFactory","createNativeGainNodeFactory","createNativeGainNode","audioNodeOptions","gainNode","args","createNativeConstantSourceNodeFakerFactory","createNativeConstantSourceNodeFaker","createConstantSource","nativeConstantSourceNode","createNativeConstantSourceNodeFactory","constantSourceNodeConstructor","createConstantSourceNodeRendererFactory","createNativeConstantSourceNode","constantSourceNodeRenderer","_constantSourceNodeRenderer","_nativeConstantSourceNode","_offset","createConstantSourceNodeConstructor","renderedNativeConstantSourceNodes","renderedNativeConstantSourceNode","nativeConstantSourceNodeIsOwnedByContext","createConstantSourceNode","nativeConvolverNode","createConvolver","normalize","createNativeConvolverNodeFactory","convolverNodeConstructor","createConvolverNodeRenderer","createNativeConvolverNode","_nativeConvolverNode","createConvolverNodeConstructor","renderedNativeConvolverNodes","renderedNativeConvolverNode","createConvolverNode","createConvolverNodeRendererFactory","nativeDelayNode","createDelay","createNativeDelayNodeFactory","delayNodeConstructor","createDelayNodeRenderer","createNativeDelayNode","_delayTime","createDelayNodeConstructor","renderedNativeDelayNodes","renderedNativeDelayNode","nativeDelayNodeIsOwnedByContext","createDelayNode","createDelayNodeRendererFactory","nativeDynamicsCompressorNode","createDynamicsCompressor","createNativeDynamicsCompressorNodeFactory","dynamicsCompressorNodeConstructor","createDynamicsCompressorNodeRenderer","createNativeDynamicsCompressorNode","_attack","_knee","_nativeDynamicsCompressorNode","_ratio","_release","_threshold","previousChannelCount","reduction","createDynamicsCompressorNodeConstructor","renderedNativeDynamicsCompressorNodes","renderedNativeDynamicsCompressorNode","nativeDynamicsCompressorNodeIsOwnedByContext","createDynamicsCompressorNode","createDynamicsCompressorNodeRendererFactory","createGainNodeRenderer","createGainNodeConstructor","renderedNativeGainNodes","renderedNativeGainNode","nativeGainNodeIsOwnedByContext","createGainNode","createGainNodeRendererFactory","bufferSize","createNativeScriptProcessorNodeFactory","createNativeScriptProcessorNode","scriptProcessorNode","bufferIndexes","xBuffers","yBuffers","outputBuffer","nyquist","omega","PI","cos","sin","response","sqrt","atan2","createNativeIIRFilterNodeFakerFactory","testOfflineAudioContextCurrentTimeSupport","isOfflineAudioContextCurrentTimeSupported","createRenderNativeOfflineAudioContext","createTestOfflineAudioContextCurrentTimeSupport","renderNativeOfflineAudioContext","nativeIIRFilterNode","nativeIIRFilterNodeIsOwnedByContext","createIIRFilter","partialOfflineAudioContext","filteredBuffer","filterFullBuffer","createIIRFilterNodeRendererFactory","iIRFilterNodeConstructor","createNativeIIRFilterNode","createIIRFilterNodeRenderer","wrapIIRFilterNodeGetFrequencyResponseMethod","_nativeIIRFilterNode","createIIRFilterNodeConstructor","createNativeIIRFilterNodeFaker","createNativeIIRFilterNodeFactory","audioDestinationNodeConstructor","createAudioListener","_nativeContext","_destination","_listener","_onstatechange","onstatechange","nativeOnStateChange","createMinimalBaseAudioContextConstructor","nativeListener","forwardX","forwardY","forwardZ","upX","upY","upZ","createFakeAudioParam","constantSourceNode","lastOrientation","lastPosition","orientation","setOrientation","positon","setPosition","createFakeAudioParams","createAudioListenerFactory","nativeOscillatorNode","periodicWave","setPeriodicWave","createNativeOscillatorNodeFactory","createNativeOscillatorNode","renderedNativeOscillatorNodes","renderedNativeOscillatorNode","nativeOscillatorNodeIsOwnedByContext","createOscillatorNode","createOscillatorNodeRendererFactory","oscillatorNodeConstructor","createOscillatorNodeRenderer","oscillatorNodeRenderer","_nativeOscillatorNode","_oscillatorNodeRenderer","createOscillatorNodeConstructor","negativeWaveShaperNode","createWaveShaper","positiveWaveShaperNode","inputGainNode","invertGainNode","outputGainNode","revertGainNode","unmodifiedCurve","nativeWaveShaperNodeFaker","curveLength","negativeCurve","positiveCurve","centerIndex","createNativeWaveShaperNodeFakerFactory","createNativeWaveShaperNodeFaker","nativeWaveShaperNode","createNativeWaveShaperNodeFactory","createNativeWaveShaperNode","pannerNode","createPanner","SINGLE_CHANNEL_OPTIONS","orientationXGainNode","orientationYGainNode","orientationZGainNode","positionXGainNode","positionYGainNode","positionZGainNode","waveShaperNode","nativePannerNodeFaker","createNativePannerNodeFakerFactory","createNativePannerNodeFaker","nativePannerNode","createNativePannerNodeFactory","pannerNodeConstructor","createNativePannerNode","createPannerNodeRenderer","_nativePannerNode","_orientationX","_orientationY","_orientationZ","_positionX","_positionY","_positionZ","createPannerNodeConstructor","renderedNativePannerNodes","renderedNativePannerNode","nativePannerNodeIsOwnedByContext","createPannerNode","createPannerNodeRendererFactory","periodicWaveConstructor","createNativePeriodicWave","createPeriodicWaveConstructor","imag","real","wrappedImag","wrappedReal","createPeriodicWave","createNativePeriodicWaveFactory","DC_CURVE","HALF_PI","SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS","buildInternalGraph","panGainNode","leftWaveShaperCurve","rightWaveShaperCurve","leftGainNode","leftWaveShaperNode","panWaveShaperNode","rightGainNode","rightWaveShaperNode","buildInternalGraphForMono","leftInputForLeftOutputWaveShaperCurve","leftInputForRightOutputWaveShaperCurve","rightInputForLeftOutputWaveShaperCurve","rightInputForRightOutputWaveShaperCurve","CURVE_SIZE","leftInputForLeftOutputGainNode","leftInputForLeftOutputWaveShaperNode","leftInputForRightOutputGainNode","leftInputForRightOutputWaveShaperNode","rightInputForLeftOutputGainNode","rightInputForLeftOutputWaveShaperNode","rightInputForRightOutputGainNode","rightInputForRightOutputWaveShaperNode","buildInternalGraphForStereo","outputNodes","outputNode","createNativeStereoPannerNodeFakerFactory","createNativeStereoPannerNodeFaker","createStereoPanner","nativeStereoPannerNode","createNativeStereoPannerNodeFactory","stereoPannerNodeConstructor","createNativeStereoPannerNode","createStereoPannerNodeRenderer","_pan","createStereoPannerNodeConstructor","renderedNativeStereoPannerNodes","renderedNativeStereoPannerNode","nativeStereoPannerNodeIsOwnedByContext","createStereoPannerNode","createStereoPannerNodeRendererFactory","renderedNativeWaveShaperNodes","renderedNativeWaveShaperNode","createWaveShaperNode","createWaveShaperNodeRendererFactory","waveShaperNodeConstructor","createWaveShaperNodeRenderer","_isCurveNullified","_nativeWaveShaperNode","createWaveShaperNodeConstructor","isSecureContext","createIsSecureContext","fn","currentFrame","createExposeCurrentFrameAndCurrentTime","addAudioWorkletModule","createAbortError","exposeCurrentFrameAndCurrentTime","fetchSource","ongoingRequests","resolvedRequests","moduleURL","credentials","absoluteUrl","location","href","audioWorklet","blob","Blob","createObjectURL","addModule","revokeObjectURL","resolvedRequestsOfContext","ongoingRequestsOfContext","promiseOfOngoingRequest","head","document","SyntaxError","script","createElement","originalOnErrorHandler","onerror","removeErrorEventListenerAndRevokeUrl","message","src","lineno","colno","onload","appendChild","evaluateSource","evaluateAudioWorkletGlobalScope","_AWGS","trim","nodeNameToProcessorConstructorMap","rslvdRqstsFCntxt","ngngRqstsFCntxt","createAddAudioWorkletModule","fetch","ok","text","createFetchSource","isNativeAudioContext","createIsNativeAudioContext","createIsNativeContext","gainNodeConstructor","minimalBaseAudioContextConstructor","_audioWorklet","constraints","audioData","successCallback","errorCallback","createBaseAudioContextConstructor","createDataCloneError","createEncodingError","isNativeContext","testAudioBufferCopyChannelMethodsOutOfBoundsSupport","testAudioBufferCopyChannelMethodsSubarraySupport","testPromiseSupport","anyContext","complete","arrayBuffer","detachArrayBuffer","fail","createDecodeAudioData","createNativeMediaElementAudioSourceNode","nativeMediaElementAudioSourceNode","_mediaElement","mediaElement","_nativeMediaElementAudioSourceNode","createMediaElementAudioSourceNodeConstructor","ntvDCntxt","createMediaElementSource","createNativeMediaElementAudioSourceNodeFactory","createNativeMediaStreamAudioSourceNode","nativeMediaStreamAudioSourceNode","_nativeMediaStreamAudioSourceNode","mediaStream","createMediaStreamAudioSourceNodeConstructor","audioStreamTracks","getAudioTracks","filteredAudioStreamTracks","sort","id","createMediaStreamSource","MediaStream","createNativeMediaStreamAudioSourceNodeFactory","createNativeMediaStreamTrackAudioSourceNode","createMediaStreamTrackAudioSourceNodeConstructor","mediaStreamTrack","createMediaStreamTrackSource","kind","createNativeMediaStreamTrackAudioSourceNodeFactory","audioContextConstructor","baseAudioContextConstructor","createUnknownError","mediaElementAudioSourceNodeConstructor","mediaStreamAudioSourceNodeConstructor","mediaStreamTrackAudioSourceNodeConstructor","_baseLatency","_nativeAudioContext","_state","revokeState","resolvePromise","resume","suspend","createAudioContextConstructor","createConnectMultipleOutputs","createDisconnectMultipleOutputs","connectMultipleOutputs","disconnectMultipleOutputs","numberOfParameters","messageChannel","gainNodes","inputChannelSplitterNodes","constantSourceNodes","inputChannelMergerNode","outputChannelSplitterNode","outputChannelMergerNodes","parameterMap","outputChannelMergerNode","onprocessorerror","nativeAudioWorkletNodeFaker","patchedEventListeners","unpatchedEventListener","handleEvent","patchedEventListener","port","audioWorkletProcessorPromise","createAudioWorkletProcessor","dWrkltPrcssr","isActive","createNativeAudioWorkletNodeFakerFactory","createNativeAudioWorkletNodeFaker","nativeAudioWorkletNodeConstructor","hasNoOutput","testClonabilityOfAudioWorkletNodeOptions","createNativeAudioWorkletNodeFactory","AudioWorkletNode","createNativeAudioWorkletNodeConstructor","renderedNativeAudioWorkletNodeOrOutputNodes","renderedNativeAudioWorkletNodeOrGainNode","nativeOutputNodes","nativeAudioWorkletNodeIsOwnedByContext","nm","createAudioWorkletNodeRendererFactory","createAudioWorkletNodeRenderer","createNativeAudioWorkletNode","sanitizedOptions","_nativeAudioWorkletNode","_numberOfOutputs","_onprocessorerror","_parameters","nativeOnProcessorError","createAudioWorkletNodeConstructor","createMinimalAudioContextConstructor","createCreateNativeOfflineAudioContext","createStartRendering","offlineAudioContextConstructor","createNativeOfflineAudioContext","delayStateChangeEvent","stopImmediatePropagation","_waitForThePromiseToSettle","_length","_nativeOfflineAudioContext","createMinimalOfflineAudioContextConstructor","createOfflineAudioContextConstructor","isAnyAudioContext","contextStore","createIsAnyAudioContext","isAnyAudioNode","audioNodeStore","createIsAnyAudioNode","isAnyAudioParam","audioParamStore","createIsAnyAudioParam","isAnyOfflineAudioContext","createIsAnyOfflineAudioContext","globalContext","theWindow","self","hasAudioContext","getAudioContext","TONE_AUDIO_CONTEXT","updateInterval","_callback","_type","_updateInterval","_createClock","_createWorker","toFixed","blobUrl","worker","Worker","_worker","_createTimeout","_timeout","e","_disposeClock","clearTimeout","terminate","interval","dispose","isAudioParam","arg","isOfflineAudioContext","isAudioContext","isAudioBuffer","isUndef","isDefined","isFunction","isNumber","isObject","constructor","isBoolean","isString","isNote","noCopy","deepMerge","sources","shift","assign","optionsFromArguments","defaults","argsArray","objKey","opts","Reflect","indexOf","defaultArg","given","fallback","omitFromObject","obj","omit","prop","assert","statement","log","console","debug","_wasDisposed","getDefaults","TONE_DEBUG_CLASS","version","on","split","eventName","_events","once","boundCallback","off","eventList","emit","len","mixin","constr","getOwnPropertyDescriptor","Emitter","_timeline","Timeline","memory","Infinity","valueOf","_search","diff","remove","param","peek","getAfter","getBefore","cancel","after","cancelBefore","previousEvent","beginning","end","midPoint","nextEvent","_iterate","lowerBound","upperBound","forEachBefore","forEachAfter","forEachBetween","forEachFrom","forEachAtTime","notifyNewContext","onContextInit","cb","notifyCloseContext","onContextClose","_constants","_timeouts","_timeoutIds","_initialized","Context","_latencyHint","lookAhead","_ticker","Ticker","clockSource","_timeoutLoop","initialize","ctx","feedForward","_transport","hint","lookAheadValue","now","getConstant","val","constant","firstEvent","timeout","clearInterval","setInterval","intervalFn","channels","_currentTime","_duration","dummyContext","transport","getContext","setContext","TONE_SILENCE_LOGGING","prefix","printString","dbToGain","db","gainToDb","LN10","intervalToFrequencyRatio","A4","ftom","ftomf","mtof","midi","units","defaultUnits","_val","_units","_expressions","_getExpressions","hz","method","_frequencyToUnits","parseFloat","regexp","_ticksToUnits","parseInt","_beatsToUnits","_getTimeSignature","dot","numericValue","scalar","number","_secondsToUnits","samples","tr","q","total","TimeBaseClass","fromType","_noArg","typeName","quantity","expr","matching","freq","beats","_getBpm","seconds","ticks","_getPPQ","_now","bpm","timeSignature","PPQ","toSeconds","toTicks","toFrequency","toMidi","toSamples","toMilliseconds","capture","quantize","quantTo","TimeClass","nextSubdivision","subdiv","percent","subdivision","toNotation","testNotations","power","closest","closestSeconds","notation","notationSeconds","abs","toBarsBeatsSixteenths","quarterTime","quarters","measures","sixteenths","sixteenthString","Time","setA4","FrequencyClass","note","pitch","octave","noteNumber","noteToScaleIndex","toLowerCase","transpose","harmonize","intervals","toNote","scaleIndexToNote","Frequency","TransportTime","TransportTimeClass","ToneWithContext","defaultContext","immediate","_getPartialProperties","attribute","member","Param","overridden","_minOutput","_param","_initialValue","convert","_toType","getValueAtTime","_fromType","_is","computedTime","isFinite","JSON","stringify","before","beforeValue","previous","_linearInterpolate","_exponentialInterpolate","previousVal","_exponentialApproach","setRampPoint","currentVal","exponentialRampTo","rampTime","linearRampTo","targetRampTo","exponentialApproachValueAtTime","scaling","startingValue","segTime","valueAtTime","sampleTime","rampTo","subdivisions","t0","v0","v1","t1","_internalChannels","_isAudioNode","ToneAudioNode","_getInternalNodes","nodeList","_setChannelProperties","_getChannelProperties","outputNum","inputNum","toDestination","toMaster","warn","chain","connectSeries","fan","first","prev","current","srcNode","dstNode","outputNumber","inputNumber","readOnly","str","noOp","Gain","_gainNode","ToneAudioBuffer","reverse","load","_buffer","loaded","_reversed","_reverse","downloads","fromArray","isMultidimensional","multiChannelArray","toMono","chanNum","toArray","outputArray","channelArray","ret","startSamples","endSamples","retBuffer","rev","fromUrl","matches","extensions","extension","ext","supportsType","baseUrl","canPlayType","Offline","originalContext","bufferPromise","_buffers","_loadingCount","ToneAudioBuffers","urls","_bufferLoaded","Delay","maxDelayInSeconds","maxDelay","_delayNode","initial","_initial","setStateAtTime","getLastState","getNextState","_stopTime","getStateAtTime","_fadeIn","fadeIn","_fadeOut","fadeOut","_curve","_startGain","fadeInTime","_stopGain","cancelStop","fadeOutTime","additionalTail","_stopSource","ToneConstantSource","_source","Signal","override","_constantSource","connectSignal","signal","TickParam","_multiplier","multiplier","computedValue","prevEvent","segments","rampVal","ticksUntilTime","_getTicksUntilEvent","computedVal","segmentDur","val0","val1","onTheLineEvent","getTicksAtTime","getDurationOfTicks","currentTick","getTimeOfTick","tick","delta","sol1","ticksToTime","timeToTicks","computedDuration","startTicks","TickSignal","TickSource","StateTimeline","_tickOffset","setTicksAtTime","pause","stopEvent","tmpEvent","lastState","elapsedTicks","periodStartTime","offsetEvent","getSecondsAtTime","elapsedSeconds","absoluteTicks","forEachTickBetween","computedStartTime","computedEndTime","lastStateEvent","maxStartTime","nextTickTime","Clock","_lastUpdate","_boundLoop","_loop","_tickSource","Ticks","TicksClass","MidiClass","Midi","expiration","anticipation","_boundDrawLoop","_drawLoop","_animationFrame","schedule","requestAnimationFrame","cancelAnimationFrame","_root","IntervalNode","insert","updateHeight","updateMax","_rebalance","results","search","_removeNode","_setRoot","_replaceNodeInParent","replacement","isLeftChild","left","right","temp","getBalance","_rotateLeft","pivotNode","_rotateRight","balance","low","traverse","searchAfter","high","_left","_right","height","point","Volume","volume","_unmutedVolume","mute","Destination","rawContext","TransportEvent","_eventId","_once","invoke","_currentId","_nextId","_nextTick","_boundRestart","_restart","TransportRepeatEvent","_interval","_createEvents","scheduleOnce","Transport","_loopStart","_loopEnd","_scheduledEvents","_repeatedEvents","_syncedSignals","_swingAmount","_ppq","ppq","_clock","_processTick","_bindClockEvents","_timeSignature","_swingTicks","swing","swingSubdivision","tickTime","progress","amount","_addEvent","scheduleRepeat","eventId","item","timeline","computedAfter","offsetTicks","toggle","timeSig","startPosition","endPosition","setLoopPoints","remainingTicks","syncSignal","computedFreq","ratioSignal","unsyncSignal","syncedSignal","_synced","_scheduled","_syncedStart","_syncedStop","_volume","onstop","_clampToCurrentTime","restart","sched","_start","_stop","sync","stateEvent","startOffset","unsync","ToneBufferSource","_sourceStarted","_sourceStopped","computedOffset","computedDur","Noise","_noiseBuffers","rate","random","_noiseCache","brown","pink","white","channelNum","lastOut","b0","b1","b2","b3","b4","b5","b6","ToneOscillatorNode","_oscillator","Oscillator","_partials","partials","_partialCount","partialCount","baseType","phase","oscillator","_wave","syncFrequency","unsyncFrequency","_getCachedPeriodicWave","oscProps","_periodicWaveCache","find","description","_phase","arrayA","arrayB","isBasicType","cache","partial","exec","_getRealImaginary","periodicWaveSize","piFactor","_inverseFFT","getInitialValue","twoPi","SignalOperator","WaveShaper","_shaper","mapping","setMap","normalized","oversampling","isOverSampleType","includes","_norm","Multiply","_mult","factor","AMOscillator","_modulationScale","_modulationNode","_carrier","_modulator","modulationType","harmonicity","FMOscillator","modulationIndex","PulseOscillator","_widthGate","_thresh","width","_sawtooth","FatOscillator","_oscillators","_spread","spread","count","_forEach","osc","PWMOscillator","sourceType","_scale","_pulse","modulationFrequency","OmniOscillatorSourceMap","am","fat","fm","pulse","pwm","OmniOscillator","_sourceType","substr","_createNewOscillator","_getOscType","oscType","OscConstructor","blockTime","sType","mType","Player","_activeSources","_onload","autostart","_onSourceEnd","comptuedOffset","origDuration","implicitEnd","seek","Players","_players","player","stopAll","Add","_sum","addend","_abs","_multiply","Subtract","_neg","subtrahend","Zero","Envelope","_sig","decay","sustain","attackCurve","releaseCurve","decayCurve","_getCurve","direction","curveName","EnvelopeCurves","_setCurve","curveDef","_attackCurve","_releaseCurve","_decayCurve","triggerAttack","velocity","currentValue","decayValue","decayStart","triggerRelease","triggerAttackRelease","cosineCurve","rippleCurve","curveLen","sineWave","stairsCurve","sineCurve","bounceCurve","invertCurve","out","bounce","In","Out","cosine","exponential","linear","ripple","sine","step","AmplitudeEnvelope","Instrument","_original_triggerAttack","_original_triggerRelease","_syncMethod","timePosition","originalMethod","Monophonic","portamento","onsilence","_triggerEnvelopeAttack","setNote","_triggerEnvelopeRelease","getLevelAtTime","envelope","computedFrequency","portTime","Synth","computedAttack","computedDecay","Sampler","urlMap","mid","_findClosest","notes","difference","closestNote","releaseAll","PolySynth","_availableVoices","_activeVoices","_voices","_gcTimeout","_averageActiveVoices","voice","maxPolyphony","_collectGarbage","_getActiveVoice","_makeVoiceAvailable","activeVoiceIndex","_getNextAvailableVoice","activeVoices","firstAvail","_triggerAttack","midiNote","_triggerRelease","_scheduleEvent","disposed","durationSeconds","v","MembraneSynth","pitchDecay","octaves","hertz","maxNote","Filter","_filters","rolloff","_rolloff","rolloffNum","possibilities","cascadingCount","totalResponse","freqValues","magValues","phaseValues","filterClone","Scale","_outputMin","_outputMax","_setRange","inharmRatios","MetalSynth","_freqMultipliers","_amplitude","_highpass","mult","_filterFreqScaler","resonance","_octaves","freqMult","ToneEvent","_startOffset","_probability","probability","_humanize","humanize","_rescheduleEvents","startTick","_getLoopDuration","_tick","prob","variation","reschedulTime","lastEvent","loopDuration","Part","events","_startNote","at","timeInTicks","_restartEvent","_setAll","attr","_testLoopBoundries","Sequence","_part","_seqCallback","_eventsArray","_subdivision","_createSequence","_eventsUpdated","_indexTime","_rescheduleSequence","sequence","eventOffset","CrossFade","_panner","_split","_g2a","fade","_dryWet","wet","effectSend","effectReturn","connectEffect","effect","_feedbackGain","FeedbackDelay","Convolver","_convolver","buff","norm","Merge","_merger","Reverb","preDelay","generate","noiseL","noiseR","merge","Analyser","_analyser","smoothing","MultibandSplit","_lowMidFilter","lowFrequency","highFrequency","EQ3","_multibandSplit","_lowGain","_midGain","_highGain","Compressor","_compressor"],"mappings":"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","file":"Tone.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Tone\"] = factory();\n\telse\n\t\troot[\"Tone\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 8);\n","(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@babel/runtime/helpers/slicedToArray'), require('@babel/runtime/helpers/classCallCheck'), require('@babel/runtime/helpers/createClass')) :\n    typeof define === 'function' && define.amd ? define(['exports', '@babel/runtime/helpers/slicedToArray', '@babel/runtime/helpers/classCallCheck', '@babel/runtime/helpers/createClass'], factory) :\n    (global = global || self, factory(global.automationEvents = {}, global._slicedToArray, global._classCallCheck, global._createClass));\n}(this, function (exports, _slicedToArray, _classCallCheck, _createClass) { 'use strict';\n\n    _slicedToArray = _slicedToArray && _slicedToArray.hasOwnProperty('default') ? _slicedToArray['default'] : _slicedToArray;\n    _classCallCheck = _classCallCheck && _classCallCheck.hasOwnProperty('default') ? _classCallCheck['default'] : _classCallCheck;\n    _createClass = _createClass && _createClass.hasOwnProperty('default') ? _createClass['default'] : _createClass;\n\n    var createExtendedExponentialRampToValueAutomationEvent = function createExtendedExponentialRampToValueAutomationEvent(value, endTime, insertTime) {\n      return {\n        endTime: endTime,\n        insertTime: insertTime,\n        type: 'exponentialRampToValue',\n        value: value\n      };\n    };\n\n    var createExtendedLinearRampToValueAutomationEvent = function createExtendedLinearRampToValueAutomationEvent(value, endTime, insertTime) {\n      return {\n        endTime: endTime,\n        insertTime: insertTime,\n        type: 'linearRampToValue',\n        value: value\n      };\n    };\n\n    var createSetValueAutomationEvent = function createSetValueAutomationEvent(value, startTime) {\n      return {\n        startTime: startTime,\n        type: 'setValue',\n        value: value\n      };\n    };\n\n    var createSetValueCurveAutomationEvent = function createSetValueCurveAutomationEvent(values, startTime, duration) {\n      return {\n        duration: duration,\n        startTime: startTime,\n        type: 'setValueCurve',\n        values: values\n      };\n    };\n\n    var getTargetValueAtTime = function getTargetValueAtTime(time, valueAtStartTime, _ref) {\n      var startTime = _ref.startTime,\n          target = _ref.target,\n          timeConstant = _ref.timeConstant;\n      return target + (valueAtStartTime - target) * Math.exp((startTime - time) / timeConstant);\n    };\n\n    var isExponentialRampToValueAutomationEvent = function isExponentialRampToValueAutomationEvent(automationEvent) {\n      return automationEvent.type === 'exponentialRampToValue';\n    };\n\n    var isLinearRampToValueAutomationEvent = function isLinearRampToValueAutomationEvent(automationEvent) {\n      return automationEvent.type === 'linearRampToValue';\n    };\n\n    var isAnyRampToValueAutomationEvent = function isAnyRampToValueAutomationEvent(automationEvent) {\n      return isExponentialRampToValueAutomationEvent(automationEvent) || isLinearRampToValueAutomationEvent(automationEvent);\n    };\n\n    var isSetValueAutomationEvent = function isSetValueAutomationEvent(automationEvent) {\n      return automationEvent.type === 'setValue';\n    };\n\n    var isSetValueCurveAutomationEvent = function isSetValueCurveAutomationEvent(automationEvent) {\n      return automationEvent.type === 'setValueCurve';\n    };\n\n    var getValueOfAutomationEventAtIndexAtTime = function getValueOfAutomationEventAtIndexAtTime(automationEvents, index, time, defaultValue) {\n      var automationEvent = automationEvents[index];\n      return automationEvent === undefined ? defaultValue : isAnyRampToValueAutomationEvent(automationEvent) || isSetValueAutomationEvent(automationEvent) ? automationEvent.value : isSetValueCurveAutomationEvent(automationEvent) ? automationEvent.values[automationEvent.values.length - 1] : getTargetValueAtTime(time, getValueOfAutomationEventAtIndexAtTime(automationEvents, index - 1, automationEvent.startTime, defaultValue), automationEvent);\n    };\n\n    var getEndTimeAndValueOfPreviousAutomationEvent = function getEndTimeAndValueOfPreviousAutomationEvent(automationEvents, index, currentAutomationEvent, nextAutomationEvent, defaultValue) {\n      return currentAutomationEvent === undefined ? [nextAutomationEvent.insertTime, defaultValue] : isAnyRampToValueAutomationEvent(currentAutomationEvent) ? [currentAutomationEvent.endTime, currentAutomationEvent.value] : isSetValueAutomationEvent(currentAutomationEvent) ? [currentAutomationEvent.startTime, currentAutomationEvent.value] : isSetValueCurveAutomationEvent(currentAutomationEvent) ? [currentAutomationEvent.startTime + currentAutomationEvent.duration, currentAutomationEvent.values[currentAutomationEvent.values.length - 1]] : [currentAutomationEvent.startTime, getValueOfAutomationEventAtIndexAtTime(automationEvents, index - 1, currentAutomationEvent.startTime, defaultValue)];\n    };\n\n    var isCancelAndHoldAutomationEvent = function isCancelAndHoldAutomationEvent(automationEvent) {\n      return automationEvent.type === 'cancelAndHold';\n    };\n\n    var isCancelScheduledValuesAutomationEvent = function isCancelScheduledValuesAutomationEvent(automationEvent) {\n      return automationEvent.type === 'cancelScheduledValues';\n    };\n\n    var getEventTime = function getEventTime(automationEvent) {\n      if (isCancelAndHoldAutomationEvent(automationEvent) || isCancelScheduledValuesAutomationEvent(automationEvent)) {\n        return automationEvent.cancelTime;\n      }\n\n      if (isExponentialRampToValueAutomationEvent(automationEvent) || isLinearRampToValueAutomationEvent(automationEvent)) {\n        return automationEvent.endTime;\n      }\n\n      return automationEvent.startTime;\n    };\n\n    var getExponentialRampValueAtTime = function getExponentialRampValueAtTime(time, startTime, valueAtStartTime, _ref) {\n      var endTime = _ref.endTime,\n          value = _ref.value;\n\n      if (valueAtStartTime === value) {\n        return value;\n      }\n\n      if (0 < valueAtStartTime && 0 < value || valueAtStartTime < 0 && value < 0) {\n        return valueAtStartTime * Math.pow(value / valueAtStartTime, (time - startTime) / (endTime - startTime));\n      }\n\n      return 0;\n    };\n\n    var getLinearRampValueAtTime = function getLinearRampValueAtTime(time, startTime, valueAtStartTime, _ref) {\n      var endTime = _ref.endTime,\n          value = _ref.value;\n      return valueAtStartTime + (time - startTime) / (endTime - startTime) * (value - valueAtStartTime);\n    };\n\n    var interpolateValue = function interpolateValue(values, theoreticIndex) {\n      var lowerIndex = Math.floor(theoreticIndex);\n      var upperIndex = Math.ceil(theoreticIndex);\n\n      if (lowerIndex === upperIndex) {\n        return values[lowerIndex];\n      }\n\n      return (1 - (theoreticIndex - lowerIndex)) * values[lowerIndex] + (1 - (upperIndex - theoreticIndex)) * values[upperIndex];\n    };\n\n    var getValueCurveValueAtTime = function getValueCurveValueAtTime(time, _ref) {\n      var duration = _ref.duration,\n          startTime = _ref.startTime,\n          values = _ref.values;\n      var theoreticIndex = (time - startTime) / duration * (values.length - 1);\n      return interpolateValue(values, theoreticIndex);\n    };\n\n    var isSetTargetAutomationEvent = function isSetTargetAutomationEvent(automationEvent) {\n      return automationEvent.type === 'setTarget';\n    };\n\n    var AutomationEventList =\n    /*#__PURE__*/\n    function () {\n      function AutomationEventList(defaultValue) {\n        _classCallCheck(this, AutomationEventList);\n\n        this._automationEvents = [];\n        this._currenTime = 0;\n        this._defaultValue = defaultValue;\n      }\n\n      _createClass(AutomationEventList, [{\n        key: Symbol.iterator,\n        value: function value() {\n          return this._automationEvents[Symbol.iterator]();\n        }\n      }, {\n        key: \"add\",\n        value: function add(automationEvent) {\n          var eventTime = getEventTime(automationEvent);\n\n          if (isCancelAndHoldAutomationEvent(automationEvent) || isCancelScheduledValuesAutomationEvent(automationEvent)) {\n            var index = this._automationEvents.findIndex(function (currentAutomationEvent) {\n              return getEventTime(currentAutomationEvent) >= eventTime;\n            });\n\n            var removedAutomationEvent = this._automationEvents[index];\n\n            if (index !== -1) {\n              this._automationEvents = this._automationEvents.slice(0, index);\n            }\n\n            if (isCancelAndHoldAutomationEvent(automationEvent)) {\n              var lastAutomationEvent = this._automationEvents[this._automationEvents.length - 1];\n\n              if (removedAutomationEvent !== undefined && isAnyRampToValueAutomationEvent(removedAutomationEvent)) {\n                if (isSetTargetAutomationEvent(lastAutomationEvent)) {\n                  throw new Error('The internal list is malformed.');\n                }\n\n                var startTime = isSetValueCurveAutomationEvent(lastAutomationEvent) ? lastAutomationEvent.startTime + lastAutomationEvent.duration : getEventTime(lastAutomationEvent);\n                var startValue = isSetValueCurveAutomationEvent(lastAutomationEvent) ? lastAutomationEvent.values[lastAutomationEvent.values.length - 1] : lastAutomationEvent.value;\n                var value = isExponentialRampToValueAutomationEvent(removedAutomationEvent) ? getExponentialRampValueAtTime(eventTime, startTime, startValue, removedAutomationEvent) : getLinearRampValueAtTime(eventTime, startTime, startValue, removedAutomationEvent);\n                var truncatedAutomationEvent = isExponentialRampToValueAutomationEvent(removedAutomationEvent) ? createExtendedExponentialRampToValueAutomationEvent(value, eventTime, this._currenTime) : createExtendedLinearRampToValueAutomationEvent(value, eventTime, this._currenTime);\n\n                this._automationEvents.push(truncatedAutomationEvent);\n              }\n\n              if (lastAutomationEvent !== undefined && isSetTargetAutomationEvent(lastAutomationEvent)) {\n                this._automationEvents.push(createSetValueAutomationEvent(this.getValue(eventTime), eventTime));\n              }\n\n              if (lastAutomationEvent !== undefined && isSetValueCurveAutomationEvent(lastAutomationEvent) && lastAutomationEvent.startTime + lastAutomationEvent.duration > eventTime) {\n                this._automationEvents[this._automationEvents.length - 1] = createSetValueCurveAutomationEvent(new Float32Array([6, 7]), lastAutomationEvent.startTime, eventTime - lastAutomationEvent.startTime);\n              }\n            }\n          } else {\n            var _index = this._automationEvents.findIndex(function (currentAutomationEvent) {\n              return getEventTime(currentAutomationEvent) > eventTime;\n            });\n\n            var previousAutomationEvent = _index === -1 ? this._automationEvents[this._automationEvents.length - 1] : this._automationEvents[_index - 1];\n\n            if (previousAutomationEvent !== undefined && isSetValueCurveAutomationEvent(previousAutomationEvent) && getEventTime(previousAutomationEvent) + previousAutomationEvent.duration > eventTime) {\n              return false;\n            }\n\n            var persistentAutomationEvent = isExponentialRampToValueAutomationEvent(automationEvent) ? createExtendedExponentialRampToValueAutomationEvent(automationEvent.value, automationEvent.endTime, this._currenTime) : isLinearRampToValueAutomationEvent(automationEvent) ? createExtendedLinearRampToValueAutomationEvent(automationEvent.value, eventTime, this._currenTime) : automationEvent;\n\n            if (_index === -1) {\n              this._automationEvents.push(persistentAutomationEvent);\n            } else {\n              if (isSetValueCurveAutomationEvent(automationEvent) && eventTime + automationEvent.duration > getEventTime(this._automationEvents[_index])) {\n                return false;\n              }\n\n              this._automationEvents.splice(_index, 0, persistentAutomationEvent);\n            }\n          }\n\n          return true;\n        }\n      }, {\n        key: \"flush\",\n        value: function flush(time) {\n          var index = this._automationEvents.findIndex(function (currentAutomationEvent) {\n            return getEventTime(currentAutomationEvent) > time;\n          });\n\n          if (index > 1) {\n            var remainingAutomationEvents = this._automationEvents.slice(index - 1);\n\n            var firstRemainingAutomationEvent = remainingAutomationEvents[0];\n\n            if (isSetTargetAutomationEvent(firstRemainingAutomationEvent)) {\n              remainingAutomationEvents.unshift(createSetValueAutomationEvent(getValueOfAutomationEventAtIndexAtTime(this._automationEvents, index - 2, firstRemainingAutomationEvent.startTime, this._defaultValue), firstRemainingAutomationEvent.startTime));\n            }\n\n            this._automationEvents = remainingAutomationEvents;\n          }\n        }\n      }, {\n        key: \"getValue\",\n        value: function getValue(time) {\n          if (this._automationEvents.length === 0) {\n            return this._defaultValue;\n          }\n\n          var lastAutomationEvent = this._automationEvents[this._automationEvents.length - 1];\n\n          var index = this._automationEvents.findIndex(function (automationEvent) {\n            return getEventTime(automationEvent) > time;\n          });\n\n          var nextAutomationEvent = this._automationEvents[index];\n          var currentAutomationEvent = getEventTime(lastAutomationEvent) <= time ? lastAutomationEvent : this._automationEvents[index - 1];\n\n          if (currentAutomationEvent !== undefined && isSetTargetAutomationEvent(currentAutomationEvent) && (nextAutomationEvent === undefined || !isAnyRampToValueAutomationEvent(nextAutomationEvent) || nextAutomationEvent.insertTime > time)) {\n            return getTargetValueAtTime(time, getValueOfAutomationEventAtIndexAtTime(this._automationEvents, index - 2, currentAutomationEvent.startTime, this._defaultValue), currentAutomationEvent);\n          }\n\n          if (currentAutomationEvent !== undefined && isSetValueAutomationEvent(currentAutomationEvent) && (nextAutomationEvent === undefined || !isAnyRampToValueAutomationEvent(nextAutomationEvent))) {\n            return currentAutomationEvent.value;\n          }\n\n          if (currentAutomationEvent !== undefined && isSetValueCurveAutomationEvent(currentAutomationEvent) && (nextAutomationEvent === undefined || !isAnyRampToValueAutomationEvent(nextAutomationEvent) || currentAutomationEvent.startTime + currentAutomationEvent.duration > time)) {\n            if (time < currentAutomationEvent.startTime + currentAutomationEvent.duration) {\n              return getValueCurveValueAtTime(time, currentAutomationEvent);\n            }\n\n            return currentAutomationEvent.values[currentAutomationEvent.values.length - 1];\n          }\n\n          if (currentAutomationEvent !== undefined && isAnyRampToValueAutomationEvent(currentAutomationEvent) && (nextAutomationEvent === undefined || !isAnyRampToValueAutomationEvent(nextAutomationEvent))) {\n            return currentAutomationEvent.value;\n          }\n\n          if (nextAutomationEvent !== undefined && isExponentialRampToValueAutomationEvent(nextAutomationEvent)) {\n            var _getEndTimeAndValueOf = getEndTimeAndValueOfPreviousAutomationEvent(this._automationEvents, index - 1, currentAutomationEvent, nextAutomationEvent, this._defaultValue),\n                _getEndTimeAndValueOf2 = _slicedToArray(_getEndTimeAndValueOf, 2),\n                startTime = _getEndTimeAndValueOf2[0],\n                value = _getEndTimeAndValueOf2[1];\n\n            return getExponentialRampValueAtTime(time, startTime, value, nextAutomationEvent);\n          }\n\n          if (nextAutomationEvent !== undefined && isLinearRampToValueAutomationEvent(nextAutomationEvent)) {\n            var _getEndTimeAndValueOf3 = getEndTimeAndValueOfPreviousAutomationEvent(this._automationEvents, index - 1, currentAutomationEvent, nextAutomationEvent, this._defaultValue),\n                _getEndTimeAndValueOf4 = _slicedToArray(_getEndTimeAndValueOf3, 2),\n                _startTime = _getEndTimeAndValueOf4[0],\n                _value = _getEndTimeAndValueOf4[1];\n\n            return getLinearRampValueAtTime(time, _startTime, _value, nextAutomationEvent);\n          }\n\n          return this._defaultValue;\n        }\n      }]);\n\n      return AutomationEventList;\n    }();\n\n    var createCancelAndHoldAutomationEvent = function createCancelAndHoldAutomationEvent(cancelTime) {\n      return {\n        cancelTime: cancelTime,\n        type: 'cancelAndHold'\n      };\n    };\n\n    var createCancelScheduledValuesAutomationEvent = function createCancelScheduledValuesAutomationEvent(cancelTime) {\n      return {\n        cancelTime: cancelTime,\n        type: 'cancelScheduledValues'\n      };\n    };\n\n    var createExponentialRampToValueAutomationEvent = function createExponentialRampToValueAutomationEvent(value, endTime) {\n      return {\n        endTime: endTime,\n        type: 'exponentialRampToValue',\n        value: value\n      };\n    };\n\n    var createLinearRampToValueAutomationEvent = function createLinearRampToValueAutomationEvent(value, endTime) {\n      return {\n        endTime: endTime,\n        type: 'linearRampToValue',\n        value: value\n      };\n    };\n\n    var createSetTargetAutomationEvent = function createSetTargetAutomationEvent(target, startTime, timeConstant) {\n      return {\n        startTime: startTime,\n        target: target,\n        timeConstant: timeConstant,\n        type: 'setTarget'\n      };\n    };\n\n    exports.AutomationEventList = AutomationEventList;\n    exports.createCancelAndHoldAutomationEvent = createCancelAndHoldAutomationEvent;\n    exports.createCancelScheduledValuesAutomationEvent = createCancelScheduledValuesAutomationEvent;\n    exports.createExponentialRampToValueAutomationEvent = createExponentialRampToValueAutomationEvent;\n    exports.createLinearRampToValueAutomationEvent = createLinearRampToValueAutomationEvent;\n    exports.createSetTargetAutomationEvent = createSetTargetAutomationEvent;\n    exports.createSetValueAutomationEvent = createSetValueAutomationEvent;\n    exports.createSetValueCurveAutomationEvent = createSetValueCurveAutomationEvent;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n","var arrayWithHoles = require(\"./arrayWithHoles\");\n\nvar iterableToArrayLimit = require(\"./iterableToArrayLimit\");\n\nvar nonIterableRest = require(\"./nonIterableRest\");\n\nfunction _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n}\n\nmodule.exports = _slicedToArray;","function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nmodule.exports = _arrayWithHoles;","function _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nmodule.exports = _iterableToArrayLimit;","function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nmodule.exports = _nonIterableRest;","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck;","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;","export const version: string = \"14.3.34\";\n","export const createAbortError = () => {\n    try {\n        return new DOMException('', 'AbortError');\n    }\n    catch (err) {\n        // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.\n        err.code = 20;\n        err.name = 'AbortError';\n        return err;\n    }\n};\n//# sourceMappingURL=/build/es2018/factories/abort-error.js.map","export const ACTIVE_AUDIO_NODE_STORE = new WeakSet();\nexport const AUDIO_NODE_STORE = new WeakMap();\nexport const AUDIO_GRAPHS = new WeakMap();\nexport const AUDIO_PARAM_STORE = new WeakMap();\nexport const AUDIO_PARAM_AUDIO_NODE_STORE = new WeakMap();\nexport const AUXILIARY_GAIN_NODE_STORE = new WeakMap();\nexport const BACKUP_NATIVE_CONTEXT_STORE = new WeakMap();\nexport const CONTEXT_STORE = new WeakMap();\nexport const DETACHED_ARRAY_BUFFERS = new WeakSet();\nexport const EVENT_LISTENERS = new WeakMap();\n// This clunky name is borrowed from the spec. :-)\nexport const NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS = new WeakMap();\nexport const NODE_TO_PROCESSOR_MAPS = new WeakMap();\nexport const TEST_RESULTS = new WeakMap();\n//# sourceMappingURL=/build/es2018/globals.js.map","export const createInvalidStateError = () => {\n    try {\n        return new DOMException('', 'InvalidStateError');\n    }\n    catch (err) {\n        // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.\n        err.code = 11;\n        err.name = 'InvalidStateError';\n        return err;\n    }\n};\n//# sourceMappingURL=/build/es2018/factories/invalid-state-error.js.map","import { createInvalidStateError } from '../factories/invalid-state-error';\nimport { CONTEXT_STORE } from '../globals';\nexport const getNativeContext = (context) => {\n    const nativeContext = CONTEXT_STORE.get(context);\n    if (nativeContext === undefined) {\n        throw createInvalidStateError();\n    }\n    return nativeContext;\n};\n//# sourceMappingURL=/build/es2018/helpers/get-native-context.js.map","const handler = {\n    construct() {\n        return handler;\n    }\n};\nexport const isConstructible = (constructible) => {\n    try {\n        const proxy = new Proxy(constructible, handler);\n        new proxy(); // tslint:disable-line:no-unused-expression\n    }\n    catch (_a) {\n        return false;\n    }\n    return true;\n};\n//# sourceMappingURL=/build/es2018/helpers/is-constructible.js.map","/*\n * This massive regex tries to cover all the following cases.\n *\n * import './path';\n * import defaultImport from './path';\n * import { namedImport } from './path';\n * import { namedImport as renamendImport } from './path';\n * import * as namespaceImport from './path';\n * import defaultImport, { namedImport } from './path';\n * import defaultImport, { namedImport as renamendImport } from './path';\n * import defaultImport, * as namespaceImport from './path';\n */\nconst IMPORT_STATEMENT_REGEX = /^import(?:(?:[\\s]+[\\w]+|(?:[\\s]+[\\w]+[\\s]*,)?[\\s]*\\{[\\s]*[\\w]+(?:[\\s]+as[\\s]+[\\w]+)?(?:[\\s]*,[\\s]*[\\w]+(?:[\\s]+as[\\s]+[\\w]+)?)*[\\s]*}|(?:[\\s]+[\\w]+[\\s]*,)?[\\s]*\\*[\\s]+as[\\s]+[\\w]+)[\\s]+from)?(?:[\\s]*)(\"([^\"\\\\]|\\\\.)+\"|'([^'\\\\]|\\\\.)+')(?:[\\s]*);?/; // tslint:disable-line:max-line-length\nexport const splitImportStatements = (source, url) => {\n    const importStatements = [];\n    let sourceWithoutImportStatements = source.replace(/^[\\s]+/, '');\n    let result = sourceWithoutImportStatements.match(IMPORT_STATEMENT_REGEX);\n    while (result !== null) {\n        const unresolvedUrl = result[1].slice(1, -1);\n        const importStatementWithResolvedUrl = result[0]\n            .replace(/([\\s]+)?;?$/, '')\n            .replace(unresolvedUrl, (new URL(unresolvedUrl, url)).toString());\n        importStatements.push(importStatementWithResolvedUrl);\n        sourceWithoutImportStatements = sourceWithoutImportStatements\n            .slice(result[0].length)\n            .replace(/^[\\s]+/, '');\n        result = sourceWithoutImportStatements.match(IMPORT_STATEMENT_REGEX);\n    }\n    return [importStatements.join(';'), sourceWithoutImportStatements];\n};\n//# sourceMappingURL=/build/es2018/helpers/split-import-statements.js.map","import { NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS } from '../globals';\nimport { evaluateSource } from '../helpers/evaluate-source';\nimport { getNativeContext } from '../helpers/get-native-context';\nimport { isConstructible } from '../helpers/is-constructible';\nimport { splitImportStatements } from '../helpers/split-import-statements';\nconst verifyParameterDescriptors = (parameterDescriptors) => {\n    if (parameterDescriptors !== undefined && !Array.isArray(parameterDescriptors)) {\n        throw new TypeError('The parameterDescriptors property of given value for processorCtor is not an array.');\n    }\n};\nconst verifyProcessorCtor = (processorCtor) => {\n    if (!isConstructible(processorCtor)) {\n        throw new TypeError('The given value for processorCtor should be a constructor.');\n    }\n    if (processorCtor.prototype === null || typeof processorCtor.prototype !== 'object') {\n        throw new TypeError('The given value for processorCtor should have a prototype.');\n    }\n    if (typeof processorCtor.prototype.process !== 'function') {\n        throw new TypeError('The given value for processorCtor should have a callable process() function.');\n    }\n};\nexport const createAddAudioWorkletModule = (createAbortError, createNotSupportedError, exposeCurrentFrameAndCurrentTime, fetchSource, getBackupNativeContext, ongoingRequests, resolvedRequests) => {\n    return (context, moduleURL, options = { credentials: 'omit' }) => {\n        const nativeContext = getNativeContext(context);\n        const absoluteUrl = (new URL(moduleURL, location.href)).toString();\n        // Bug #59: Only Chrome & Opera do implement the audioWorklet property.\n        if (nativeContext.audioWorklet !== undefined) {\n            return fetchSource(moduleURL)\n                .then((source) => {\n                const [importStatements, sourceWithoutImportStatements] = splitImportStatements(source, absoluteUrl);\n                /*\n                 * Bug #86: Chrome Canary does not invoke the process() function if the corresponding AudioWorkletNode has no output.\n                 *\n                 * This is the unminified version of the code used below:\n                 *\n                 * ```js\n                 * `${ importStatements };\n                 * ((registerProcessor) => {${ sourceWithoutImportStatements }\n                 * })((name, processorCtor) => registerProcessor(name, class extends processorCtor {\n                 *\n                 *     constructor (options) {\n                 *         const { hasNoOutput, ...otherParameterData } = options.parameterData;\n                 *\n                 *         if (hasNoOutput === 1) {\n                 *             super({ ...options, numberOfOutputs: 0, outputChannelCount: [ ], parameterData: otherParameterData });\n                 *\n                 *             this._hasNoOutput = true;\n                 *         } else {\n                 *             super(options);\n                 *\n                 *             this._hasNoOutput = false;\n                 *         }\n                 *     }\n                 *\n                 *     process (inputs, outputs, parameters) {\n                 *         return super.process(inputs, (this._hasNoOutput) ? [ ] : outputs, parameters);\n                 *     }\n                 *\n                 * }))`\n                 * ```\n                 */\n                const wrappedSource = `${importStatements};(registerProcessor=>{${sourceWithoutImportStatements}\n})((n,p)=>registerProcessor(n,class extends p{constructor(o){const{hasNoOutput,...q}=o.parameterData;if(hasNoOutput===1){super({...o,numberOfOutputs:0,outputChannelCount:[],parameterData:q});this._h=true}else{super(o);this._h=false}}process(i,o,p){return super.process(i,(this._h)?[]:o,p)}}))`; // tslint:disable-line:max-line-length\n                const blob = new Blob([wrappedSource], { type: 'application/javascript; charset=utf-8' });\n                const url = URL.createObjectURL(blob);\n                const backupNativeContext = getBackupNativeContext(nativeContext);\n                const nativeContextOrBackupNativeContext = (backupNativeContext !== null) ? backupNativeContext : nativeContext;\n                return nativeContextOrBackupNativeContext.audioWorklet\n                    .addModule(url, options)\n                    .then(() => URL.revokeObjectURL(url))\n                    // @todo This could be written more elegantly when Promise.finally() becomes avalaible.\n                    .catch((err) => {\n                    URL.revokeObjectURL(url);\n                    throw err; // tslint:disable-line:rxjs-throw-error\n                });\n            });\n        }\n        const resolvedRequestsOfContext = resolvedRequests.get(context);\n        if (resolvedRequestsOfContext !== undefined && resolvedRequestsOfContext.has(moduleURL)) {\n            return Promise.resolve();\n        }\n        const ongoingRequestsOfContext = ongoingRequests.get(context);\n        if (ongoingRequestsOfContext !== undefined) {\n            const promiseOfOngoingRequest = ongoingRequestsOfContext.get(moduleURL);\n            if (promiseOfOngoingRequest !== undefined) {\n                return promiseOfOngoingRequest;\n            }\n        }\n        const promise = fetchSource(moduleURL)\n            .then((source) => {\n            const [importStatements, sourceWithoutImportStatements] = splitImportStatements(source, absoluteUrl);\n            /*\n             * This is the unminified version of the code used below:\n             *\n             * ```js\n             * ${ importStatements };\n             * ((a, b) => {\n             *     (a[b] = a[b] || [ ]).push(\n             *         (AudioWorkletProcessor, global, registerProcessor, sampleRate, self, window) => {\n             *             ${ sourceWithoutImportStatements }\n             *         }\n             *     );\n             * })(window, '_AWGS');\n             * ```\n             */\n            // tslint:disable-next-line:max-line-length\n            const wrappedSource = `${importStatements};((a,b)=>{(a[b]=a[b]||[]).push((AudioWorkletProcessor,global,registerProcessor,sampleRate,self,window)=>{${sourceWithoutImportStatements}\n})})(window,'_AWGS')`;\n            // @todo Evaluating the given source code is a possible security problem.\n            return evaluateSource(wrappedSource);\n        })\n            .then(() => {\n            const evaluateAudioWorkletGlobalScope = window._AWGS.pop();\n            if (evaluateAudioWorkletGlobalScope === undefined) {\n                throw new SyntaxError();\n            }\n            exposeCurrentFrameAndCurrentTime(nativeContext, () => evaluateAudioWorkletGlobalScope(class AudioWorkletProcessor {\n            }, undefined, (name, processorCtor) => {\n                if (name.trim() === '') {\n                    throw createNotSupportedError();\n                }\n                const nodeNameToProcessorConstructorMap = NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.get(nativeContext);\n                if (nodeNameToProcessorConstructorMap !== undefined) {\n                    if (nodeNameToProcessorConstructorMap.has(name)) {\n                        throw createNotSupportedError();\n                    }\n                    verifyProcessorCtor(processorCtor);\n                    verifyParameterDescriptors(processorCtor.parameterDescriptors);\n                    nodeNameToProcessorConstructorMap.set(name, processorCtor);\n                }\n                else {\n                    verifyProcessorCtor(processorCtor);\n                    verifyParameterDescriptors(processorCtor.parameterDescriptors);\n                    NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.set(nativeContext, new Map([[name, processorCtor]]));\n                }\n            }, nativeContext.sampleRate, undefined, undefined));\n        })\n            .catch((err) => {\n            if (err.name === 'SyntaxError') {\n                throw createAbortError();\n            }\n            throw err; // tslint:disable-line:rxjs-throw-error\n        });\n        if (ongoingRequestsOfContext === undefined) {\n            ongoingRequests.set(context, new Map([[moduleURL, promise]]));\n        }\n        else {\n            ongoingRequestsOfContext.set(moduleURL, promise);\n        }\n        promise\n            .then(() => {\n            const rslvdRqstsFCntxt = resolvedRequests.get(context);\n            if (rslvdRqstsFCntxt === undefined) {\n                resolvedRequests.set(context, new Set([moduleURL]));\n            }\n            else {\n                rslvdRqstsFCntxt.add(moduleURL);\n            }\n        })\n            .catch(() => { }) // tslint:disable-line:no-empty\n            // @todo Use finally when it becomes available in all supported browsers.\n            .then(() => {\n            const ngngRqstsFCntxt = ongoingRequests.get(context);\n            if (ngngRqstsFCntxt !== undefined) {\n                ngngRqstsFCntxt.delete(moduleURL);\n            }\n        });\n        return promise;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/add-audio-worklet-module.js.map","import { getNativeContext } from '../helpers/get-native-context';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    fftSize: 2048,\n    maxDecibels: -30,\n    minDecibels: -100,\n    smoothingTimeConstant: 0.8\n};\nexport const createAnalyserNodeConstructor = (createAnalyserNodeRenderer, createIndexSizeError, createNativeAnalyserNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class AnalyserNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeAnalyserNode = createNativeAnalyserNode(nativeContext, mergedOptions);\n            const analyserNodeRenderer = ((isNativeOfflineAudioContext(nativeContext))\n                ? createAnalyserNodeRenderer()\n                : null);\n            super(context, 'passive', nativeAnalyserNode, analyserNodeRenderer);\n            this._nativeAnalyserNode = nativeAnalyserNode;\n        }\n        get fftSize() {\n            return this._nativeAnalyserNode.fftSize;\n        }\n        set fftSize(value) {\n            this._nativeAnalyserNode.fftSize = value;\n        }\n        get frequencyBinCount() {\n            return this._nativeAnalyserNode.frequencyBinCount;\n        }\n        get maxDecibels() {\n            return this._nativeAnalyserNode.maxDecibels;\n        }\n        set maxDecibels(value) {\n            // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.\n            const maxDecibels = this._nativeAnalyserNode.maxDecibels;\n            this._nativeAnalyserNode.maxDecibels = value;\n            if (!(value > this._nativeAnalyserNode.minDecibels)) {\n                this._nativeAnalyserNode.maxDecibels = maxDecibels;\n                throw createIndexSizeError();\n            }\n        }\n        get minDecibels() {\n            return this._nativeAnalyserNode.minDecibels;\n        }\n        set minDecibels(value) {\n            // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.\n            const minDecibels = this._nativeAnalyserNode.minDecibels;\n            this._nativeAnalyserNode.minDecibels = value;\n            if (!(this._nativeAnalyserNode.maxDecibels > value)) {\n                this._nativeAnalyserNode.minDecibels = minDecibels;\n                throw createIndexSizeError();\n            }\n        }\n        get smoothingTimeConstant() {\n            return this._nativeAnalyserNode.smoothingTimeConstant;\n        }\n        set smoothingTimeConstant(value) {\n            this._nativeAnalyserNode.smoothingTimeConstant = value;\n        }\n        getByteFrequencyData(array) {\n            this._nativeAnalyserNode.getByteFrequencyData(array);\n        }\n        getByteTimeDomainData(array) {\n            this._nativeAnalyserNode.getByteTimeDomainData(array);\n        }\n        getFloatFrequencyData(array) {\n            this._nativeAnalyserNode.getFloatFrequencyData(array);\n        }\n        getFloatTimeDomainData(array) {\n            this._nativeAnalyserNode.getFloatTimeDomainData(array);\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/analyser-node-constructor.js.map","export const getValueForKey = (map, key) => {\n    const value = map.get(key);\n    if (value === undefined) {\n        throw new Error('A value with the given key could not be found.');\n    }\n    return value;\n};\n//# sourceMappingURL=/build/es2018/helpers/get-value-for-key.js.map","import { AUDIO_NODE_STORE } from '../globals';\nimport { getValueForKey } from './get-value-for-key';\nexport const getNativeAudioNode = (audioNode) => {\n    return getValueForKey(AUDIO_NODE_STORE, audioNode);\n};\n//# sourceMappingURL=/build/es2018/helpers/get-native-audio-node.js.map","export const isOwnedByContext = (nativeAudioNode, nativeContext) => {\n    return nativeAudioNode.context === nativeContext;\n};\n//# sourceMappingURL=/build/es2018/helpers/is-owned-by-context.js.map","import { AUDIO_GRAPHS } from '../globals';\nimport { getValueForKey } from './get-value-for-key';\nexport function getAudioGraph(context) {\n    return getValueForKey(AUDIO_GRAPHS, context);\n}\n//# sourceMappingURL=/build/es2018/helpers/get-audio-graph.js.map","import { getAudioGraph } from './get-audio-graph';\nimport { getValueForKey } from './get-value-for-key';\nexport const getAudioNodeConnections = (audioNode) => {\n    const audioGraph = getAudioGraph(audioNode.context);\n    return getValueForKey(audioGraph.nodes, audioNode);\n};\n//# sourceMappingURL=/build/es2018/helpers/get-audio-node-connections.js.map","import { getAudioNodeConnections } from './get-audio-node-connections';\nexport const getAudioNodeRenderer = (audioNode) => {\n    const audioNodeConnections = getAudioNodeConnections(audioNode);\n    if (audioNodeConnections.renderer === null) {\n        throw new Error('Missing the renderer of the given AudioNode in the audio graph.');\n    }\n    return audioNodeConnections.renderer;\n};\n//# sourceMappingURL=/build/es2018/helpers/get-audio-node-renderer.js.map","import { getAudioNodeConnections } from './get-audio-node-connections';\nimport { getAudioNodeRenderer } from './get-audio-node-renderer';\nexport const renderInputsOfAudioNode = (audioNode, nativeOfflineAudioContext, nativeAudioNode) => {\n    const audioNodeConnections = getAudioNodeConnections(audioNode);\n    return Promise\n        .all(audioNodeConnections.activeInputs\n        .map((connections, input) => Array\n        .from(connections)\n        .map(([source, output]) => {\n        return getAudioNodeRenderer(source)\n            .render(source, nativeOfflineAudioContext)\n            .then((node) => node.connect(nativeAudioNode, output, input));\n    }))\n        .reduce((allRenderingPromises, renderingPromises) => [...allRenderingPromises, ...renderingPromises], []));\n};\n//# sourceMappingURL=/build/es2018/helpers/render-inputs-of-audio-node.js.map","export const testAudioBufferCopyChannelMethodsOutOfBoundsSupport = (nativeAudioBuffer) => {\n    try {\n        nativeAudioBuffer.copyToChannel(new Float32Array(1), 0, -1);\n    }\n    catch (_a) {\n        return false;\n    }\n    return true;\n};\n//# sourceMappingURL=/build/es2018/helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support.js.map","export const testAudioBufferCopyChannelMethodsSubarraySupport = (nativeAudioBuffer) => {\n    const source = new Float32Array(2);\n    try {\n        /*\n         * Firefox up to version 67 didn't fully support the copyFromChannel() and copyToChannel() methods. Therefore testing one of those\n         * methods is enough to know if the other one it supported as well.\n         */\n        nativeAudioBuffer.copyFromChannel(source, 0, nativeAudioBuffer.length - 1);\n    }\n    catch (_a) {\n        return false;\n    }\n    return true;\n};\n//# sourceMappingURL=/build/es2018/helpers/test-audio-buffer-copy-channel-methods-subarray-support.js.map","export const createIndexSizeError = () => {\n    try {\n        return new DOMException('', 'IndexSizeError');\n    }\n    catch (err) {\n        // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.\n        err.code = 1;\n        err.name = 'IndexSizeError';\n        return err;\n    }\n};\n//# sourceMappingURL=/build/es2018/factories/index-size-error.js.map","import { createIndexSizeError } from '../factories/index-size-error';\nexport const wrapAudioBufferGetChannelDataMethod = (audioBuffer) => {\n    audioBuffer.getChannelData = ((getChannelData) => {\n        return (channel) => {\n            try {\n                return getChannelData.call(audioBuffer, channel);\n            }\n            catch (err) {\n                if (err.code === 12) {\n                    throw createIndexSizeError();\n                }\n                throw err; // tslint:disable-line:rxjs-throw-error\n            }\n        };\n    })(audioBuffer.getChannelData);\n};\n//# sourceMappingURL=/build/es2018/helpers/wrap-audio-buffer-get-channel-data-method.js.map","import { testAudioBufferCopyChannelMethodsOutOfBoundsSupport } from '../helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support';\nimport { testAudioBufferCopyChannelMethodsSubarraySupport } from '../helpers/test-audio-buffer-copy-channel-methods-subarray-support';\nimport { wrapAudioBufferGetChannelDataMethod } from '../helpers/wrap-audio-buffer-get-channel-data-method';\nconst DEFAULT_OPTIONS = {\n    numberOfChannels: 1\n};\nexport const createAudioBufferConstructor = (cacheTestResult, createNotSupportedError, nativeAudioBufferConstructor, nativeOfflineAudioContextConstructor, testNativeAudioBufferConstructorSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds, wrapAudioBufferCopyChannelMethodsSubarray) => {\n    let nativeOfflineAudioContext = null;\n    return class AudioBuffer {\n        constructor(options) {\n            if (nativeOfflineAudioContextConstructor === null) {\n                throw new Error('Missing the native OfflineAudioContext constructor.');\n            }\n            const { length, numberOfChannels, sampleRate } = { ...DEFAULT_OPTIONS, ...options };\n            if (nativeOfflineAudioContext === null) {\n                nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n            }\n            /*\n             * Bug #99: Firefox does not throw a NotSupportedError when the numberOfChannels is zero. But it only does it when using the\n             * factory function. But since Firefox also supports the constructor everything should be fine.\n             */\n            const audioBuffer = (nativeAudioBufferConstructor !== null &&\n                cacheTestResult(testNativeAudioBufferConstructorSupport, testNativeAudioBufferConstructorSupport)) ?\n                new nativeAudioBufferConstructor({ length, numberOfChannels, sampleRate }) :\n                nativeOfflineAudioContext.createBuffer(numberOfChannels, length, sampleRate);\n            // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n            // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.\n            if (typeof audioBuffer.copyFromChannel !== 'function') {\n                wrapAudioBufferCopyChannelMethods(audioBuffer);\n                wrapAudioBufferGetChannelDataMethod(audioBuffer);\n                // Bug #42: Firefox does not yet fully support copyFromChannel() and copyToChannel().\n            }\n            else if (!cacheTestResult(testAudioBufferCopyChannelMethodsSubarraySupport, () => testAudioBufferCopyChannelMethodsSubarraySupport(audioBuffer))) {\n                wrapAudioBufferCopyChannelMethodsSubarray(audioBuffer);\n                wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n                // Bug #157: No browser does allow the bufferOffset to be out-of-bounds.\n            }\n            else if (!cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, () => testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer))) {\n                wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n            }\n            // Bug #99: Safari does not throw an error when the numberOfChannels is zero.\n            if (audioBuffer.numberOfChannels === 0) {\n                throw createNotSupportedError();\n            }\n            /*\n             * This does violate all good pratices but it is necessary to allow this AudioBuffer to be used with native\n             * (Offline)AudioContexts.\n             */\n            return audioBuffer;\n        }\n        // This method needs to be defined to convince TypeScript that the IAudioBuffer will be implemented.\n        copyFromChannel(_1, _2, _3 = 0) { } // tslint:disable-line:no-empty\n        // This method needs to be defined to convince TypeScript that the IAudioBuffer will be implemented.\n        copyToChannel(_1, _2, _3 = 0) { } // tslint:disable-line:no-empty\n        // This method needs to be defined to convince TypeScript that the IAudioBuffer will be implemented.\n        getChannelData(_) {\n            return new Float32Array(0);\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-buffer-constructor.js.map","import { EVENT_LISTENERS } from '../globals';\nimport { getValueForKey } from './get-value-for-key';\nexport const getEventListenersOfAudioNode = (audioNode) => {\n    return getValueForKey(EVENT_LISTENERS, audioNode);\n};\n//# sourceMappingURL=/build/es2018/helpers/get-event-listeners-of-audio-node.js.map","import { ACTIVE_AUDIO_NODE_STORE } from '../globals';\nimport { getEventListenersOfAudioNode } from './get-event-listeners-of-audio-node';\nexport const setInternalState = (audioNode, internalState) => {\n    if (internalState === 'active') {\n        if (ACTIVE_AUDIO_NODE_STORE.has(audioNode)) {\n            throw new Error('The AudioNode is already stored.');\n        }\n        ACTIVE_AUDIO_NODE_STORE.add(audioNode);\n    }\n    else {\n        if (!ACTIVE_AUDIO_NODE_STORE.has(audioNode)) {\n            throw new Error('The AudioNode is not stored.');\n        }\n        ACTIVE_AUDIO_NODE_STORE.delete(audioNode);\n    }\n    getEventListenersOfAudioNode(audioNode)\n        .forEach((eventListener) => eventListener(internalState));\n};\n//# sourceMappingURL=/build/es2018/helpers/set-internal-state.js.map","export const wrapEventListener = (target, eventListener) => {\n    if (typeof eventListener === 'function') {\n        return (event) => {\n            const descriptor = { value: target };\n            Object.defineProperties(event, {\n                currentTarget: descriptor,\n                target: descriptor\n            });\n            return eventListener.call(target, event);\n        };\n    }\n    return eventListener;\n};\n//# sourceMappingURL=/build/es2018/helpers/wrap-event-listener.js.map","import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { getNativeContext } from '../helpers/get-native-context';\nimport { setInternalState } from '../helpers/set-internal-state';\nimport { wrapEventListener } from '../helpers/wrap-event-listener';\nconst DEFAULT_OPTIONS = {\n    buffer: null,\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    // Bug #149: Safari does not yet support the detune AudioParam.\n    loop: false,\n    loopEnd: 0,\n    loopStart: 0,\n    playbackRate: 1\n};\nexport const createAudioBufferSourceNodeConstructor = (createAudioBufferSourceNodeRenderer, createAudioParam, createInvalidStateError, createNativeAudioBufferSourceNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class AudioBufferSourceNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const audioBufferSourceNodeRenderer = ((isOffline)\n                ? createAudioBufferSourceNodeRenderer()\n                : null);\n            super(context, 'passive', nativeAudioBufferSourceNode, audioBufferSourceNodeRenderer);\n            this._audioBufferSourceNodeRenderer = audioBufferSourceNodeRenderer;\n            this._isBufferNullified = false;\n            this._isBufferSet = false;\n            this._nativeAudioBufferSourceNode = nativeAudioBufferSourceNode;\n            this._onended = null;\n            // Bug #73: Edge & Safari do not export the correct values for maxValue and minValue.\n            this._playbackRate = createAudioParam(this, isOffline, nativeAudioBufferSourceNode.playbackRate, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n        }\n        get buffer() {\n            if (this._isBufferNullified) {\n                return null;\n            }\n            return this._nativeAudioBufferSourceNode.buffer;\n        }\n        set buffer(value) {\n            // Bug #71: Edge does not allow to set the buffer to null.\n            try {\n                this._nativeAudioBufferSourceNode.buffer = value;\n            }\n            catch (err) {\n                if (value !== null || err.code !== 17) {\n                    throw err; // tslint:disable-line:rxjs-throw-error\n                }\n                // This will modify the buffer in place. Luckily that works in Edge and has the same effect as setting the buffer to null.\n                if (this._nativeAudioBufferSourceNode.buffer !== null) {\n                    const buffer = this._nativeAudioBufferSourceNode.buffer;\n                    const numberOfChannels = buffer.numberOfChannels;\n                    for (let i = 0; i < numberOfChannels; i += 1) {\n                        buffer\n                            .getChannelData(i)\n                            .fill(0);\n                    }\n                    this._isBufferNullified = true;\n                }\n            }\n            // Bug #72: Only Chrome, Edge & Opera do not allow to reassign the buffer yet.\n            if (value !== null) {\n                if (this._isBufferSet) {\n                    throw createInvalidStateError();\n                }\n                this._isBufferSet = true;\n            }\n        }\n        get onended() {\n            return this._onended;\n        }\n        set onended(value) {\n            const wrappedListener = wrapEventListener(this, value);\n            this._nativeAudioBufferSourceNode.onended = wrappedListener;\n            const nativeOnEnded = this._nativeAudioBufferSourceNode.onended;\n            this._onended = (nativeOnEnded === wrappedListener) ? value : nativeOnEnded;\n        }\n        get loop() {\n            return this._nativeAudioBufferSourceNode.loop;\n        }\n        set loop(value) {\n            this._nativeAudioBufferSourceNode.loop = value;\n        }\n        get loopEnd() {\n            return this._nativeAudioBufferSourceNode.loopEnd;\n        }\n        set loopEnd(value) {\n            this._nativeAudioBufferSourceNode.loopEnd = value;\n        }\n        get loopStart() {\n            return this._nativeAudioBufferSourceNode.loopStart;\n        }\n        set loopStart(value) {\n            this._nativeAudioBufferSourceNode.loopStart = value;\n        }\n        get playbackRate() {\n            return this._playbackRate;\n        }\n        start(when = 0, offset = 0, duration) {\n            this._nativeAudioBufferSourceNode.start(when, offset, duration);\n            if (this._audioBufferSourceNodeRenderer !== null) {\n                this._audioBufferSourceNodeRenderer.start = (duration === undefined) ? [when, offset] : [when, offset, duration];\n            }\n            else {\n                setInternalState(this, 'active');\n                const setInternalStateToInactive = () => {\n                    this._nativeAudioBufferSourceNode.removeEventListener('ended', setInternalStateToInactive);\n                    // @todo Determine a meaningful delay instead of just using one second.\n                    setTimeout(() => setInternalState(this, 'passive'), 1000);\n                };\n                this._nativeAudioBufferSourceNode.addEventListener('ended', setInternalStateToInactive);\n            }\n        }\n        stop(when = 0) {\n            this._nativeAudioBufferSourceNode.stop(when);\n            if (this._audioBufferSourceNodeRenderer !== null) {\n                this._audioBufferSourceNodeRenderer.stop = when;\n            }\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-buffer-source-node-constructor.js.map","import { AUDIO_PARAM_STORE } from '../globals';\nimport { getValueForKey } from './get-value-for-key';\nexport const getNativeAudioParam = (audioParam) => {\n    return getValueForKey(AUDIO_PARAM_STORE, audioParam);\n};\n//# sourceMappingURL=/build/es2018/helpers/get-native-audio-param.js.map","import { getAudioGraph } from './get-audio-graph';\nimport { getValueForKey } from './get-value-for-key';\nexport function getAudioParamConnections(context, audioParam) {\n    const audioGraph = getAudioGraph(context);\n    return getValueForKey(audioGraph.params, audioParam);\n}\n//# sourceMappingURL=/build/es2018/helpers/get-audio-param-connections.js.map","import { getAudioNodeRenderer } from './get-audio-node-renderer';\nimport { getAudioParamConnections } from './get-audio-param-connections';\nexport const renderInputsOfAudioParam = (context, audioParam, nativeOfflineAudioContext, nativeAudioParam) => {\n    const audioParamConnections = getAudioParamConnections(context, audioParam);\n    return Promise\n        .all(Array\n        .from(audioParamConnections.activeInputs)\n        .map(([source, output]) => {\n        return getAudioNodeRenderer(source)\n            .render(source, nativeOfflineAudioContext)\n            .then((node) => node.connect(nativeAudioParam, output));\n    }));\n};\n//# sourceMappingURL=/build/es2018/helpers/render-inputs-of-audio-param.js.map","import { getNativeAudioParam } from './get-native-audio-param';\nimport { renderInputsOfAudioParam } from './render-inputs-of-audio-param';\nexport const connectAudioParam = (context, nativeOfflineAudioContext, audioParam, nativeAudioParam = getNativeAudioParam(audioParam)) => {\n    return renderInputsOfAudioParam(context, audioParam, nativeOfflineAudioContext, nativeAudioParam);\n};\n//# sourceMappingURL=/build/es2018/helpers/connect-audio-param.js.map","import { getAudioParamRenderer } from './get-audio-param-renderer';\nimport { renderInputsOfAudioParam } from './render-inputs-of-audio-param';\nexport const renderAutomation = (context, nativeOfflineAudioContext, audioParam, nativeAudioParam) => {\n    const audioParamRenderer = getAudioParamRenderer(context, audioParam);\n    audioParamRenderer.replay(nativeAudioParam);\n    return renderInputsOfAudioParam(context, audioParam, nativeOfflineAudioContext, nativeAudioParam);\n};\n//# sourceMappingURL=/build/es2018/helpers/render-automation.js.map","import { getAudioParamConnections } from './get-audio-param-connections';\nexport function getAudioParamRenderer(context, audioParam) {\n    const audioParamConnections = getAudioParamConnections(context, audioParam);\n    if (audioParamConnections.renderer === null) {\n        throw new Error('Missing the renderer of the given AudioParam in the audio graph.');\n    }\n    return audioParamConnections.renderer;\n}\n//# sourceMappingURL=/build/es2018/helpers/get-audio-param-renderer.js.map","export const isValidLatencyHint = (latencyHint) => {\n    return latencyHint === undefined ||\n        typeof latencyHint === 'number' ||\n        (typeof latencyHint === 'string' && (latencyHint === 'balanced' || latencyHint === 'interactive' || latencyHint === 'playback'));\n};\n//# sourceMappingURL=/build/es2018/helpers/is-valid-latency-hint.js.map","import { wrapEventListener } from './helpers/wrap-event-listener';\nexport class EventTarget {\n    constructor(_nativeEventTarget) {\n        this._nativeEventTarget = _nativeEventTarget;\n        this._listeners = new WeakMap();\n    }\n    addEventListener(type, listener, // @todo EventListenerOrEventListenerObject | null = null,\n    options) {\n        let wrappedEventListener = this._listeners.get(listener);\n        if (wrappedEventListener === undefined) {\n            wrappedEventListener = wrapEventListener(this, listener);\n            if (typeof listener === 'function') {\n                this._listeners.set(listener, wrappedEventListener);\n            }\n        }\n        return this._nativeEventTarget.addEventListener(type, wrappedEventListener, options);\n    }\n    dispatchEvent(event) {\n        return this._nativeEventTarget.dispatchEvent(event);\n    }\n    removeEventListener(type, listener, // @todo EventListenerOrEventListenerObject | null = null,\n    options) {\n        const wrappedEventListener = this._listeners.get(listener);\n        return this._nativeEventTarget.removeEventListener(type, (wrappedEventListener === undefined) ? null : wrappedEventListener, options);\n    }\n}\n//# sourceMappingURL=/build/es2018/event-target.js.map","export const isAudioNode = (audioNodeOrAudioParam) => {\n    return 'context' in audioNodeOrAudioParam;\n};\n//# sourceMappingURL=/build/es2018/guards/audio-node.js.map","import { isAudioNode } from './audio-node';\nexport const isAudioNodeOutputConnection = (outputConnection) => {\n    return isAudioNode(outputConnection[0]);\n};\n//# sourceMappingURL=/build/es2018/guards/audio-node-output-connection.js.map","export const isAudioWorkletNode = (audioNode) => {\n    return 'port' in audioNode;\n};\n//# sourceMappingURL=/build/es2018/guards/audio-worklet-node.js.map","export const connectNativeAudioNodeToNativeAudioNode = (nativeSourceAudioNode, nativeDestinationAudioNode, output, input) => {\n    const inputs = nativeDestinationAudioNode.inputs;\n    if (inputs !== undefined) {\n        nativeSourceAudioNode.connect(inputs[input], output, 0);\n        return [inputs[input], output, 0];\n    }\n    nativeSourceAudioNode.connect(nativeDestinationAudioNode, output, input);\n    return [nativeDestinationAudioNode, output, input];\n};\n//# sourceMappingURL=/build/es2018/helpers/connect-native-audio-node-to-native-audio-node.js.map","import { getEventListenersOfAudioNode } from './get-event-listeners-of-audio-node';\nexport const deleteEventListenerOfAudioNode = (audioNode, eventListener) => {\n    const eventListeners = getEventListenersOfAudioNode(audioNode);\n    if (!eventListeners.delete(eventListener)) {\n        throw new Error('Missing the expected event listener');\n    }\n};\n//# sourceMappingURL=/build/es2018/helpers/delete-event-listeners-of-audio-node.js.map","export const disconnectNativeAudioNodeFromNativeAudioNode = (nativeSourceAudioNode, nativeDestinationAudioNode, output, input) => {\n    const inputs = nativeDestinationAudioNode.inputs;\n    if (input === undefined || output === undefined) {\n        nativeSourceAudioNode.disconnect(nativeDestinationAudioNode);\n    }\n    else if (inputs !== undefined) {\n        nativeSourceAudioNode.disconnect(inputs[input], output, 0);\n    }\n    else {\n        nativeSourceAudioNode.disconnect(nativeDestinationAudioNode, output, input);\n    }\n};\n//# sourceMappingURL=/build/es2018/helpers/disconnect-native-audio-node-from-native-audio-node.js.map","export const insertElementInSet = (set, element, predicate, ignoreDuplicates) => {\n    for (const lmnt of set) {\n        if (predicate(lmnt)) {\n            if (ignoreDuplicates) {\n                return false;\n            }\n            throw Error('The set contains at least one similar element.');\n        }\n    }\n    set.add(element);\n    return true;\n};\n//# sourceMappingURL=/build/es2018/helpers/insert-element-in-set.js.map","import { ACTIVE_AUDIO_NODE_STORE } from '../globals';\nexport const isActiveAudioNode = (audioNode) => {\n    return ACTIVE_AUDIO_NODE_STORE.has(audioNode);\n};\n//# sourceMappingURL=/build/es2018/helpers/is-active-audio-node.js.map","import { ACTIVE_AUDIO_NODE_STORE } from '../globals';\nexport const isPassiveAudioNode = (audioNode) => {\n    return !ACTIVE_AUDIO_NODE_STORE.has(audioNode);\n};\n//# sourceMappingURL=/build/es2018/helpers/is-passive-audio-node.js.map","export const pickElementFromSet = (set, predicate) => {\n    const matchingElements = Array\n        .from(set)\n        .filter(predicate);\n    if (matchingElements.length > 1) {\n        throw Error('More than one element was found.');\n    }\n    if (matchingElements.length === 0) {\n        throw Error('No element was found.');\n    }\n    const [matchingElement] = matchingElements;\n    set.delete(matchingElement);\n    return matchingElement;\n};\n//# sourceMappingURL=/build/es2018/helpers/pick-element-from-set.js.map","import { isAudioWorkletNode } from '../guards/audio-worklet-node';\nimport { setInternalState } from './set-internal-state';\n// Set the internalState of the audioNode to 'passive' if it is not an AudioWorkletNode and if it has no 'active' input connections.\nexport const setInternalStateToPassiveWhenNecessary = (audioNode, activeInputs) => {\n    if (!isAudioWorkletNode(audioNode) && activeInputs.every((connections) => (connections.size === 0))) {\n        setInternalState(audioNode, 'passive');\n    }\n};\n//# sourceMappingURL=/build/es2018/helpers/set-internal-state-to-passive-when-necessary.js.map","export const testAudioNodeDisconnectMethodSupport = (nativeAudioContext) => {\n    return new Promise((resolve) => {\n        const analyzer = nativeAudioContext.createScriptProcessor(256, 1, 1);\n        const dummy = nativeAudioContext.createGain();\n        // Bug #95: Safari does not play one sample buffers.\n        const ones = nativeAudioContext.createBuffer(1, 2, 44100);\n        const channelData = ones.getChannelData(0);\n        channelData[0] = 1;\n        channelData[1] = 1;\n        const source = nativeAudioContext.createBufferSource();\n        source.buffer = ones;\n        source.loop = true;\n        source.connect(analyzer);\n        analyzer.connect(nativeAudioContext.destination);\n        source.connect(dummy);\n        source.disconnect(dummy);\n        analyzer.onaudioprocess = (event) => {\n            const chnnlDt = event.inputBuffer.getChannelData(0);\n            if (Array.prototype.some.call(chnnlDt, (sample) => sample === 1)) {\n                resolve(true);\n            }\n            else {\n                resolve(false);\n            }\n            source.stop();\n            analyzer.onaudioprocess = null; // tslint:disable-line:deprecation\n            source.disconnect(analyzer);\n            analyzer.disconnect(nativeAudioContext.destination);\n        };\n        source.start();\n    });\n};\n//# sourceMappingURL=/build/es2018/helpers/test-audio-node-disconnect-method-support.js.map","export const isNativeAudioNode = (nativeAudioNodeOrAudioParam) => {\n    return 'context' in nativeAudioNodeOrAudioParam;\n};\n//# sourceMappingURL=/build/es2018/guards/native-audio-node.js.map","import { EventTarget } from '../event-target';\nimport { ACTIVE_AUDIO_NODE_STORE, AUDIO_NODE_STORE, AUXILIARY_GAIN_NODE_STORE, EVENT_LISTENERS } from '../globals';\nimport { isAudioNode } from '../guards/audio-node';\nimport { isAudioNodeOutputConnection } from '../guards/audio-node-output-connection';\nimport { isAudioWorkletNode } from '../guards/audio-worklet-node';\nimport { connectNativeAudioNodeToNativeAudioNode } from '../helpers/connect-native-audio-node-to-native-audio-node';\nimport { deleteEventListenerOfAudioNode } from '../helpers/delete-event-listeners-of-audio-node';\nimport { disconnectNativeAudioNodeFromNativeAudioNode } from '../helpers/disconnect-native-audio-node-from-native-audio-node';\nimport { getAudioGraph } from '../helpers/get-audio-graph';\nimport { getAudioNodeConnections } from '../helpers/get-audio-node-connections';\nimport { getAudioParamConnections } from '../helpers/get-audio-param-connections';\nimport { getEventListenersOfAudioNode } from '../helpers/get-event-listeners-of-audio-node';\nimport { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { getNativeAudioParam } from '../helpers/get-native-audio-param';\nimport { getNativeContext } from '../helpers/get-native-context';\nimport { getValueForKey } from '../helpers/get-value-for-key';\nimport { insertElementInSet } from '../helpers/insert-element-in-set';\nimport { isActiveAudioNode } from '../helpers/is-active-audio-node';\nimport { isPassiveAudioNode } from '../helpers/is-passive-audio-node';\nimport { pickElementFromSet } from '../helpers/pick-element-from-set';\nimport { setInternalState } from '../helpers/set-internal-state';\nimport { setInternalStateToPassiveWhenNecessary } from '../helpers/set-internal-state-to-passive-when-necessary';\nimport { testAudioNodeDisconnectMethodSupport } from '../helpers/test-audio-node-disconnect-method-support';\nimport { wrapAudioNodeDisconnectMethod } from '../helpers/wrap-audio-node-disconnect-method';\nconst addAudioNode = (context, audioNode, audioNoderRender, nativeAudioNode) => {\n    const activeInputs = [];\n    for (let i = 0; i < nativeAudioNode.numberOfInputs; i += 1) {\n        activeInputs.push(new Set());\n    }\n    const { nodes } = getAudioGraph(context);\n    nodes.set(audioNode, {\n        activeInputs,\n        outputs: new Set(),\n        passiveInputs: new WeakMap(),\n        renderer: audioNoderRender\n    });\n};\nconst addActiveInputConnectionToAudioNode = (activeInputs, source, [output, input, eventListener], ignoreDuplicates) => {\n    insertElementInSet(activeInputs[input], [source, output, eventListener], (activeInputConnection) => (activeInputConnection[0] === source && activeInputConnection[1] === output), ignoreDuplicates);\n};\nconst addActiveInputConnectionToAudioParam = (activeInputs, source, [output, eventListener], ignoreDuplicates) => {\n    insertElementInSet(activeInputs, [source, output, eventListener], (activeInputConnection) => (activeInputConnection[0] === source && activeInputConnection[1] === output), ignoreDuplicates);\n};\nconst deleteActiveInputConnectionToAudioNode = (activeInputs, source, output, input) => {\n    return pickElementFromSet(activeInputs[input], (activeInputConnection) => (activeInputConnection[0] === source && activeInputConnection[1] === output));\n};\nconst deleteActiveInputConnectionToAudioParam = (activeInputs, source, output) => {\n    return pickElementFromSet(activeInputs, (activeInputConnection) => (activeInputConnection[0] === source && activeInputConnection[1] === output));\n};\nconst addPassiveInputConnectionToAudioNode = (passiveInputs, input, [source, output, eventListener], ignoreDuplicates) => {\n    const passiveInputConnections = passiveInputs.get(source);\n    if (passiveInputConnections === undefined) {\n        passiveInputs.set(source, new Set([[output, input, eventListener]]));\n    }\n    else {\n        insertElementInSet(passiveInputConnections, [output, input, eventListener], (passiveInputConnection) => (passiveInputConnection[0] === output && passiveInputConnection[1] === input), ignoreDuplicates);\n    }\n};\nconst addPassiveInputConnectionToAudioParam = (passiveInputs, [source, output, eventListener], ignoreDuplicates) => {\n    const passiveInputConnections = passiveInputs.get(source);\n    if (passiveInputConnections === undefined) {\n        passiveInputs.set(source, new Set([[output, eventListener]]));\n    }\n    else {\n        insertElementInSet(passiveInputConnections, [output, eventListener], (passiveInputConnection) => (passiveInputConnection[0] === output), ignoreDuplicates);\n    }\n};\nconst deletePassiveInputConnectionToAudioNode = (passiveInputs, source, output, input) => {\n    const passiveInputConnections = getValueForKey(passiveInputs, source);\n    const matchingConnection = pickElementFromSet(passiveInputConnections, (passiveInputConnection) => (passiveInputConnection[0] === output && passiveInputConnection[1] === input));\n    if (passiveInputConnections.size === 0) {\n        passiveInputs.delete(source);\n    }\n    return matchingConnection;\n};\nconst deletePassiveInputConnectionToAudioParam = (passiveInputs, source, output) => {\n    const passiveInputConnections = getValueForKey(passiveInputs, source);\n    const matchingConnection = pickElementFromSet(passiveInputConnections, (passiveInputConnection) => (passiveInputConnection[0] === output));\n    if (passiveInputConnections.size === 0) {\n        passiveInputs.delete(source);\n    }\n    return matchingConnection;\n};\nconst addConnectionToAudioNodeOfAudioContext = (source, destination, output, input) => {\n    const { activeInputs, passiveInputs } = getAudioNodeConnections(destination);\n    const { outputs } = getAudioNodeConnections(source);\n    const eventListeners = getEventListenersOfAudioNode(source);\n    const eventListener = ((type) => {\n        const nativeDestinationAudioNode = getNativeAudioNode(destination);\n        const nativeSourceAudioNode = getNativeAudioNode(source);\n        if (type === 'active') {\n            const partialConnection = deletePassiveInputConnectionToAudioNode(passiveInputs, source, output, input);\n            addActiveInputConnectionToAudioNode(activeInputs, source, partialConnection, false);\n            connectNativeAudioNodeToNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output, input);\n            if (isPassiveAudioNode(destination)) {\n                setInternalState(destination, 'active');\n            }\n        }\n        else if (type === 'passive') {\n            const partialConnection = deleteActiveInputConnectionToAudioNode(activeInputs, source, output, input);\n            addPassiveInputConnectionToAudioNode(passiveInputs, input, partialConnection, false);\n            disconnectNativeAudioNodeFromNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output, input);\n            if (isActiveAudioNode(destination)) {\n                setInternalStateToPassiveWhenNecessary(destination, activeInputs);\n            }\n        }\n    });\n    if (insertElementInSet(outputs, [destination, output, input], (outputConnection) => (outputConnection[0] === destination && outputConnection[1] === output && outputConnection[2] === input), true)) {\n        eventListeners.add(eventListener);\n        if (isActiveAudioNode(source)) {\n            addActiveInputConnectionToAudioNode(activeInputs, source, [output, input, eventListener], true);\n        }\n        else {\n            addPassiveInputConnectionToAudioNode(passiveInputs, input, [source, output, eventListener], true);\n        }\n    }\n};\nconst addConnectionToAudioNodeOfOfflineAudioContext = (source, destination, output, input) => {\n    const { activeInputs } = getAudioNodeConnections(destination);\n    const { outputs } = getAudioNodeConnections(source);\n    if (insertElementInSet(outputs, [destination, output, input], (outputConnection) => (outputConnection[0] === destination && outputConnection[1] === output && outputConnection[2] === input), true)) {\n        addActiveInputConnectionToAudioNode(activeInputs, source, [output, input, null], true);\n    }\n};\nconst addConnectionToAudioParamOfAudioContext = (source, destination, output) => {\n    const { activeInputs, passiveInputs } = getAudioParamConnections(source.context, destination);\n    const { outputs } = getAudioNodeConnections(source);\n    const eventListeners = getEventListenersOfAudioNode(source);\n    const eventListener = ((type) => {\n        const nativeAudioNode = getNativeAudioNode(source);\n        const nativeAudioParam = getNativeAudioParam(destination);\n        if (type === 'active') {\n            const partialConnection = deletePassiveInputConnectionToAudioParam(passiveInputs, source, output);\n            addActiveInputConnectionToAudioParam(activeInputs, source, partialConnection, false);\n            nativeAudioNode.connect(nativeAudioParam, output);\n        }\n        else if (type === 'passive') {\n            const partialConnection = deleteActiveInputConnectionToAudioParam(activeInputs, source, output);\n            addPassiveInputConnectionToAudioParam(passiveInputs, partialConnection, false);\n            nativeAudioNode.disconnect(nativeAudioParam, output);\n        }\n    });\n    if (insertElementInSet(outputs, [destination, output], (outputConnection) => (outputConnection[0] === destination && outputConnection[1] === output), true)) {\n        eventListeners.add(eventListener);\n        if (isActiveAudioNode(source)) {\n            addActiveInputConnectionToAudioParam(activeInputs, source, [output, eventListener], true);\n        }\n        else {\n            addPassiveInputConnectionToAudioParam(passiveInputs, [source, output, eventListener], true);\n        }\n    }\n};\nconst addConnectionToAudioParamOfOfflineAudioContext = (source, destination, output) => {\n    const { activeInputs } = getAudioParamConnections(source.context, destination);\n    const { outputs } = getAudioNodeConnections(source);\n    if (insertElementInSet(outputs, [destination, output], (outputConnection) => (outputConnection[0] === destination && outputConnection[1] === output), true)) {\n        addActiveInputConnectionToAudioParam(activeInputs, source, [output, null], true);\n    }\n};\nconst deleteActiveInputConnection = (activeInputConnections, source, output) => {\n    for (const activeInputConnection of activeInputConnections) {\n        if (activeInputConnection[0] === source && activeInputConnection[1] === output) {\n            activeInputConnections.delete(activeInputConnection);\n            return activeInputConnection;\n        }\n    }\n    return null;\n};\nconst deleteInputConnectionOfAudioNode = (source, destination, output, input) => {\n    const { activeInputs, passiveInputs } = getAudioNodeConnections(destination);\n    const activeInputConnection = deleteActiveInputConnection(activeInputs[input], source, output);\n    if (activeInputConnection === null) {\n        const passiveInputConnection = deletePassiveInputConnectionToAudioNode(passiveInputs, source, output, input);\n        return [passiveInputConnection[2], 'passive'];\n    }\n    return [activeInputConnection[2], 'active'];\n};\nconst deleteInputConnectionOfAudioParam = (source, destination, output) => {\n    const { activeInputs, passiveInputs } = getAudioParamConnections(source.context, destination);\n    const activeInputConnection = deleteActiveInputConnection(activeInputs, source, output);\n    if (activeInputConnection === null) {\n        const passiveInputConnection = deletePassiveInputConnectionToAudioParam(passiveInputs, source, output);\n        return [passiveInputConnection[1], 'passive'];\n    }\n    return [activeInputConnection[2], 'active'];\n};\nconst deleteInputsOfAudioNode = (source, destination, output, input) => {\n    const [listener, internalState] = deleteInputConnectionOfAudioNode(source, destination, output, input);\n    if (listener !== null) {\n        deleteEventListenerOfAudioNode(source, listener);\n        if (internalState === 'active') {\n            disconnectNativeAudioNodeFromNativeAudioNode(getNativeAudioNode(source), getNativeAudioNode(destination), output, input);\n        }\n    }\n    if (isActiveAudioNode(destination)) {\n        const { activeInputs } = getAudioNodeConnections(destination);\n        setInternalStateToPassiveWhenNecessary(destination, activeInputs);\n    }\n};\nconst deleteInputsOfAudioParam = (source, destination, output) => {\n    const [listener, internalState] = deleteInputConnectionOfAudioParam(source, destination, output);\n    if (listener !== null) {\n        deleteEventListenerOfAudioNode(source, listener);\n        if (internalState === 'active') {\n            getNativeAudioNode(source)\n                .disconnect(getNativeAudioParam(destination), output);\n        }\n    }\n};\nconst deleteAnyConnection = (source) => {\n    const audioNodeConnectionsOfSource = getAudioNodeConnections(source);\n    for (const outputConnection of audioNodeConnectionsOfSource.outputs) {\n        if (isAudioNodeOutputConnection(outputConnection)) {\n            deleteInputsOfAudioNode(source, ...outputConnection);\n        }\n        else {\n            deleteInputsOfAudioParam(source, ...outputConnection);\n        }\n    }\n    audioNodeConnectionsOfSource.outputs.clear();\n};\nconst deleteConnectionAtOutput = (source, output) => {\n    const audioNodeConnectionsOfSource = getAudioNodeConnections(source);\n    for (const outputConnection of audioNodeConnectionsOfSource.outputs) {\n        if (outputConnection[1] === output) {\n            if (isAudioNodeOutputConnection(outputConnection)) {\n                deleteInputsOfAudioNode(source, ...outputConnection);\n            }\n            else {\n                deleteInputsOfAudioParam(source, ...outputConnection);\n            }\n            audioNodeConnectionsOfSource.outputs.delete(outputConnection);\n        }\n    }\n};\nconst deleteConnectionToDestination = (source, destination, output, input) => {\n    const audioNodeConnectionsOfSource = getAudioNodeConnections(source);\n    return Array\n        .from(audioNodeConnectionsOfSource.outputs)\n        .filter((outputConnection) => (outputConnection[0] === destination\n        && (output === undefined || outputConnection[1] === output)\n        && (input === undefined || outputConnection[2] === input)))\n        .reduce((numberOfDeletedConnections, outputConnection) => {\n        if (isAudioNodeOutputConnection(outputConnection)) {\n            deleteInputsOfAudioNode(source, ...outputConnection);\n        }\n        else {\n            deleteInputsOfAudioParam(source, ...outputConnection);\n        }\n        audioNodeConnectionsOfSource.outputs.delete(outputConnection);\n        return numberOfDeletedConnections + 1;\n    }, 0);\n};\nexport const createAudioNodeConstructor = (cacheTestResult, createIndexSizeError, createInvalidAccessError, createNotSupportedError, detectCycles, isNativeAudioNode, isNativeAudioParam, isNativeOfflineAudioContext) => {\n    return class AudioNode extends EventTarget {\n        constructor(context, internalState, nativeAudioNode, audioNodeRenderer) {\n            super(nativeAudioNode);\n            this._context = context;\n            this._nativeAudioNode = nativeAudioNode;\n            const nativeContext = getNativeContext(context);\n            // Bug #12: Safari does not support to disconnect a specific destination.\n            // @todo Make sure this is not used with an OfflineAudioContext.\n            if (!isNativeOfflineAudioContext(nativeContext) && true !== cacheTestResult(testAudioNodeDisconnectMethodSupport, () => {\n                return testAudioNodeDisconnectMethodSupport(nativeContext);\n            })) {\n                wrapAudioNodeDisconnectMethod(nativeAudioNode);\n            }\n            if (internalState === 'active') {\n                ACTIVE_AUDIO_NODE_STORE.add(this);\n            }\n            AUDIO_NODE_STORE.set(this, nativeAudioNode);\n            EVENT_LISTENERS.set(this, new Set());\n            addAudioNode(context, this, audioNodeRenderer, nativeAudioNode);\n        }\n        get channelCount() {\n            return this._nativeAudioNode.channelCount;\n        }\n        set channelCount(value) {\n            this._nativeAudioNode.channelCount = value;\n        }\n        get channelCountMode() {\n            return this._nativeAudioNode.channelCountMode;\n        }\n        set channelCountMode(value) {\n            this._nativeAudioNode.channelCountMode = value;\n        }\n        get channelInterpretation() {\n            return this._nativeAudioNode.channelInterpretation;\n        }\n        set channelInterpretation(value) {\n            this._nativeAudioNode.channelInterpretation = value;\n        }\n        get context() {\n            return this._context;\n        }\n        get numberOfInputs() {\n            return this._nativeAudioNode.numberOfInputs;\n        }\n        get numberOfOutputs() {\n            return this._nativeAudioNode.numberOfOutputs;\n        }\n        connect(destination, output = 0, input = 0) {\n            const nativeContext = getNativeContext(this._context);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            if (isNativeAudioNode(destination) || isNativeAudioParam(destination)) {\n                throw createInvalidAccessError();\n            }\n            if (isAudioNode(destination)) {\n                const nativeDestinationAudioNode = getNativeAudioNode(destination);\n                try {\n                    const connection = connectNativeAudioNodeToNativeAudioNode(this._nativeAudioNode, nativeDestinationAudioNode, output, input);\n                    if (isOffline || isPassiveAudioNode(this)) {\n                        this._nativeAudioNode.disconnect(...connection);\n                    }\n                    else if (isPassiveAudioNode(destination)) {\n                        setInternalState(destination, 'active');\n                    }\n                    // An AudioWorklet needs a connection because it otherwise may truncate the input array.\n                    // @todo Count the number of connections which depend on this auxiliary GainNode to know when it can be removed again.\n                    if (isAudioWorkletNode(destination)) {\n                        const auxiliaryGainNodes = AUXILIARY_GAIN_NODE_STORE.get(nativeDestinationAudioNode);\n                        if (auxiliaryGainNodes === undefined) {\n                            const nativeGainNode = nativeContext.createGain();\n                            nativeGainNode.connect(connection[0], 0, connection[2]);\n                            AUXILIARY_GAIN_NODE_STORE.set(nativeDestinationAudioNode, new Map([[input, nativeGainNode]]));\n                        }\n                        else if (auxiliaryGainNodes.get(input) === undefined) {\n                            const nativeGainNode = nativeContext.createGain();\n                            nativeGainNode.connect(connection[0], 0, connection[2]);\n                            auxiliaryGainNodes.set(input, nativeGainNode);\n                        }\n                    }\n                }\n                catch (err) {\n                    // Bug #41: Only Chrome, Firefox and Opera throw the correct exception by now.\n                    if (err.code === 12) {\n                        throw createInvalidAccessError();\n                    }\n                    throw err; // tslint:disable-line:rxjs-throw-error\n                }\n                detectCycles(this, destination);\n                if (isOffline) {\n                    addConnectionToAudioNodeOfOfflineAudioContext(this, destination, output, input);\n                }\n                else {\n                    addConnectionToAudioNodeOfAudioContext(this, destination, output, input);\n                }\n                return destination;\n            }\n            const nativeAudioParam = getNativeAudioParam(destination);\n            /*\n             * Bug #147 & #153: Safari does not support to connect an input signal to the playbackRate AudioParam of an\n             * AudioBufferSourceNode. This can't be easily detected and that's why the outdated name property is used here to identify\n             * Safari.\n             */\n            if (nativeAudioParam.name === 'playbackRate') {\n                throw createNotSupportedError();\n            }\n            try {\n                this._nativeAudioNode.connect(nativeAudioParam, output);\n                if (isOffline || isPassiveAudioNode(this)) {\n                    this._nativeAudioNode.disconnect(nativeAudioParam, output);\n                }\n            }\n            catch (err) {\n                // Bug #58: Only Firefox does throw an InvalidStateError yet.\n                if (err.code === 12) {\n                    throw createInvalidAccessError();\n                }\n                throw err; // tslint:disable-line:rxjs-throw-error\n            }\n            detectCycles(this, destination);\n            if (isOffline) {\n                addConnectionToAudioParamOfOfflineAudioContext(this, destination, output);\n            }\n            else {\n                addConnectionToAudioParamOfAudioContext(this, destination, output);\n            }\n        }\n        disconnect(destinationOrOutput, output, input) {\n            if (destinationOrOutput === undefined) {\n                deleteAnyConnection(this);\n            }\n            else if (typeof destinationOrOutput === 'number') {\n                if (destinationOrOutput < 0 || destinationOrOutput >= this.numberOfOutputs) {\n                    throw createIndexSizeError();\n                }\n                deleteConnectionAtOutput(this, destinationOrOutput);\n            }\n            else {\n                if (output !== undefined && (output < 0 || output >= this.numberOfOutputs)) {\n                    throw createIndexSizeError();\n                }\n                if (isAudioNode(destinationOrOutput)\n                    && input !== undefined\n                    && (input < 0 || input >= destinationOrOutput.numberOfInputs)) {\n                    throw createIndexSizeError();\n                }\n                if (deleteConnectionToDestination(this, destinationOrOutput, output, input) === 0) {\n                    throw createInvalidAccessError();\n                }\n            }\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-node-constructor.js.map","export class ReadOnlyMap {\n    constructor(parameters) {\n        this._map = new Map(parameters);\n    }\n    get size() {\n        return this._map.size;\n    }\n    entries() {\n        return this._map.entries();\n    }\n    forEach(callback, thisArg = null) {\n        return this._map.forEach((value, key) => callback.call(thisArg, value, key, this));\n    }\n    get(name) {\n        return this._map.get(name);\n    }\n    has(name) {\n        return this._map.has(name);\n    }\n    keys() {\n        return this._map.keys();\n    }\n    values() {\n        return this._map.values();\n    }\n}\n//# sourceMappingURL=/build/es2018/read-only-map.js.map","import { NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS } from '../globals';\nimport { getNativeContext } from '../helpers/get-native-context';\nimport { wrapEventListener } from '../helpers/wrap-event-listener';\nimport { ReadOnlyMap } from '../read-only-map';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    // Bug #61: The channelCountMode should be 'max' according to the spec but is set to 'explicit' to achieve consistent behavior.\n    channelCountMode: 'explicit',\n    channelInterpretation: 'speakers',\n    numberOfInputs: 1,\n    numberOfOutputs: 1,\n    outputChannelCount: undefined,\n    parameterData: {},\n    processorOptions: {}\n};\nconst createChannelCount = (length) => {\n    const channelCount = [];\n    for (let i = 0; i < length; i += 1) {\n        channelCount.push(1);\n    }\n    return channelCount;\n};\nconst sanitizedOptions = (options) => {\n    return {\n        ...options,\n        outputChannelCount: (options.outputChannelCount !== undefined) ?\n            options.outputChannelCount :\n            (options.numberOfInputs === 1 && options.numberOfOutputs === 1) ?\n                /*\n                 * Bug #61: This should be the computedNumberOfChannels, but unfortunately that is almost impossible to fake. That's why\n                 * the channelCountMode is required to be 'explicit' as long as there is not a native implementation in every browser. That\n                 * makes sure the computedNumberOfChannels is equivilant to the channelCount which makes it much easier to compute.\n                 */\n                [options.channelCount] :\n                createChannelCount(options.numberOfOutputs)\n    };\n};\nexport const createAudioWorkletNodeConstructor = (createAudioParam, createAudioWorkletNodeRenderer, createNativeAudioWorkletNode, gainNodeConstructor, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor, noneAudioDestinationNodeConstructor) => {\n    return class AudioWorkletNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, name, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const mergedOptions = sanitizedOptions({ ...DEFAULT_OPTIONS, ...options });\n            const nodeNameToProcessorConstructorMap = NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.get(nativeContext);\n            const processorConstructor = (nodeNameToProcessorConstructorMap === undefined) ?\n                undefined :\n                nodeNameToProcessorConstructorMap.get(name);\n            const nativeAudioWorkletNode = createNativeAudioWorkletNode(nativeContext, isOffline ? null : context.baseLatency, nativeAudioWorkletNodeConstructor, name, processorConstructor, mergedOptions);\n            const audioWorkletNodeRenderer = ((isOffline)\n                ? createAudioWorkletNodeRenderer(name, mergedOptions, processorConstructor)\n                : null);\n            /*\n             * @todo Add a mechanism to switch an AudioWorkletNode to passive once the process() function of the AudioWorkletProcessor\n             * returns false.\n             */\n            super(context, 'active', nativeAudioWorkletNode, audioWorkletNodeRenderer);\n            const parameters = [];\n            nativeAudioWorkletNode.parameters.forEach((nativeAudioParam, nm) => {\n                const audioParam = createAudioParam(this, isOffline, nativeAudioParam);\n                parameters.push([nm, audioParam]);\n            });\n            this._nativeAudioWorkletNode = nativeAudioWorkletNode;\n            // Bug #86 & #87: Every browser but Firefox needs to get an unused output which should not be exposed.\n            this._numberOfOutputs = (options.numberOfOutputs === 0) ? 0 : this._nativeAudioWorkletNode.numberOfOutputs;\n            this._onprocessorerror = null;\n            this._parameters = new ReadOnlyMap(parameters);\n            /*\n             * Bug #86 & #87: Every browser but Firefox needs an output to be connected.\n             *\n             * Bug #50: Only Edge does not yet allow to create AudioNodes on a closed AudioContext. Therefore this is currently faked by\n             * using another AudioContext. And that is the reason why this will fail in case of a closed AudioContext.\n             */\n            if (context.state !== 'closed') {\n                const gainNode = new gainNodeConstructor(context, { gain: 0 });\n                try {\n                    this\n                        .connect(gainNode)\n                        .connect(context.destination);\n                }\n                catch (err) {\n                    if (err.name !== 'IndexSizeError') {\n                        throw err; // tslint:disable-line:rxjs-throw-error\n                    }\n                }\n            }\n        }\n        get numberOfOutputs() {\n            return this._numberOfOutputs;\n        }\n        get onprocessorerror() {\n            return this._onprocessorerror;\n        }\n        set onprocessorerror(value) {\n            const wrappedListener = wrapEventListener(this, value);\n            this._nativeAudioWorkletNode.onprocessorerror = wrappedListener;\n            const nativeOnProcessorError = this._nativeAudioWorkletNode.onprocessorerror;\n            this._onprocessorerror = (nativeOnProcessorError === wrappedListener) ? value : nativeOnProcessorError;\n        }\n        get parameters() {\n            if (this._parameters === null) {\n                // @todo The definition that TypeScript uses of the AudioParamMap is lacking many methods.\n                return this._nativeAudioWorkletNode.parameters;\n            }\n            return this._parameters;\n        }\n        get port() {\n            return this._nativeAudioWorkletNode.port;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-worklet-node-constructor.js.map","export function copyFromChannel(audioBuffer, \n// @todo There is currently no way to define something like { [ key: number | string ]: Float32Array }\nparent, key, channelNumber, bufferOffset) {\n    if (typeof audioBuffer.copyFromChannel === 'function') {\n        // The byteLength will be 0 when the ArrayBuffer was transferred.\n        if (parent[key].byteLength === 0) {\n            parent[key] = new Float32Array(128);\n        }\n        audioBuffer.copyFromChannel(parent[key], channelNumber, bufferOffset);\n        // Bug #5: Safari does not support copyFromChannel().\n    }\n    else {\n        const channelData = audioBuffer.getChannelData(channelNumber);\n        // The byteLength will be 0 when the ArrayBuffer was transferred.\n        if (parent[key].byteLength === 0) {\n            parent[key] = channelData.slice(bufferOffset, bufferOffset + 128);\n        }\n        else {\n            const slicedInput = new Float32Array(channelData.buffer, bufferOffset * Float32Array.BYTES_PER_ELEMENT, 128);\n            parent[key].set(slicedInput);\n        }\n    }\n}\n//# sourceMappingURL=/build/es2018/helpers/copy-from-channel.js.map","export const copyToChannel = (audioBuffer, parent, key, channelNumber, bufferOffset) => {\n    if (typeof audioBuffer.copyToChannel === 'function') {\n        // The byteLength will be 0 when the ArrayBuffer was transferred.\n        if (parent[key].byteLength !== 0) {\n            audioBuffer.copyToChannel(parent[key], channelNumber, bufferOffset);\n        }\n        // Bug #5: Safari does not support copyToChannel().\n    }\n    else {\n        // The byteLength will be 0 when the ArrayBuffer was transferred.\n        if (parent[key].byteLength !== 0) {\n            audioBuffer\n                .getChannelData(channelNumber)\n                .set(parent[key], bufferOffset);\n        }\n    }\n};\n//# sourceMappingURL=/build/es2018/helpers/copy-to-channel.js.map","export const createNestedArrays = (x, y) => {\n    const arrays = [];\n    for (let i = 0; i < x; i += 1) {\n        const array = [];\n        const length = (typeof y === 'number') ? y : y[i];\n        for (let j = 0; j < length; j += 1) {\n            array.push(new Float32Array(128));\n        }\n        arrays.push(array);\n    }\n    return arrays;\n};\n//# sourceMappingURL=/build/es2018/helpers/create-nested-arrays.js.map","import { connectAudioParam } from '../helpers/connect-audio-param';\nimport { copyFromChannel } from '../helpers/copy-from-channel';\nimport { copyToChannel } from '../helpers/copy-to-channel';\nimport { createNestedArrays } from '../helpers/create-nested-arrays';\nimport { getAudioNodeConnections } from '../helpers/get-audio-node-connections';\nimport { getAudioWorkletProcessor } from '../helpers/get-audio-worklet-processor';\nimport { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { renderAutomation } from '../helpers/render-automation';\nimport { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nconst processBuffer = async (proxy, renderedBuffer, nativeOfflineAudioContext, options, processorConstructor) => {\n    const { length } = renderedBuffer;\n    const numberOfInputChannels = options.channelCount * options.numberOfInputs;\n    const numberOfOutputChannels = options.outputChannelCount.reduce((sum, value) => sum + value, 0);\n    const processedBuffer = (numberOfOutputChannels === 0) ? null : nativeOfflineAudioContext.createBuffer(numberOfOutputChannels, length, renderedBuffer.sampleRate);\n    if (processorConstructor === undefined) {\n        throw new Error('Missing the processor constructor.');\n    }\n    const audioNodeConnections = getAudioNodeConnections(proxy);\n    const audioWorkletProcessor = await getAudioWorkletProcessor(nativeOfflineAudioContext, proxy);\n    const inputs = createNestedArrays(options.numberOfInputs, options.channelCount);\n    const outputs = createNestedArrays(options.numberOfOutputs, options.outputChannelCount);\n    const parameters = Array\n        .from(proxy.parameters.keys())\n        .reduce((prmtrs, name) => ({ ...prmtrs, [name]: new Float32Array(128) }), {});\n    for (let i = 0; i < length; i += 128) {\n        for (let j = 0; j < options.numberOfInputs; j += 1) {\n            for (let k = 0; k < options.channelCount; k += 1) {\n                copyFromChannel(renderedBuffer, inputs[j], k, k, i);\n            }\n        }\n        if (processorConstructor.parameterDescriptors !== undefined) {\n            processorConstructor.parameterDescriptors.forEach(({ name }, index) => {\n                copyFromChannel(renderedBuffer, parameters, name, numberOfInputChannels + index, i);\n            });\n        }\n        for (let j = 0; j < options.numberOfInputs; j += 1) {\n            for (let k = 0; k < options.outputChannelCount[j]; k += 1) {\n                // The byteLength will be 0 when the ArrayBuffer was transferred.\n                if (outputs[j][k].byteLength === 0) {\n                    outputs[j][k] = new Float32Array(128);\n                }\n            }\n        }\n        try {\n            const potentiallyEmptyInputs = inputs\n                .map((input, index) => {\n                if (audioNodeConnections.activeInputs[index].size === 0) {\n                    return [new Float32Array(0)];\n                }\n                return input;\n            });\n            const activeSourceFlag = audioWorkletProcessor.process(potentiallyEmptyInputs, outputs, parameters);\n            if (processedBuffer !== null) {\n                for (let j = 0, outputChannelSplitterNodeOutput = 0; j < options.numberOfOutputs; j += 1) {\n                    for (let k = 0; k < options.outputChannelCount[j]; k += 1) {\n                        copyToChannel(processedBuffer, outputs[j], k, outputChannelSplitterNodeOutput + k, i);\n                    }\n                    outputChannelSplitterNodeOutput += options.outputChannelCount[j];\n                }\n            }\n            if (!activeSourceFlag) {\n                break;\n            }\n        }\n        catch (error) {\n            proxy.dispatchEvent(new ErrorEvent('processorerror', { error }));\n            break;\n        }\n    }\n    return processedBuffer;\n};\nexport const createAudioWorkletNodeRendererFactory = (connectMultipleOutputs, createNativeAudioBufferSourceNode, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, disconnectMultipleOutputs, nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor, renderNativeOfflineAudioContext) => {\n    return (name, options, processorConstructor) => {\n        const renderedNativeAudioNodes = new WeakMap();\n        const createAudioNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeAudioWorkletNode = getNativeAudioNode(proxy);\n            let nativeOutputNodes = null;\n            const nativeAudioWorkletNodeIsOwnedByContext = isOwnedByContext(nativeAudioWorkletNode, nativeOfflineAudioContext);\n            // Bug #61: Only Chrome & Opera have an implementation of the AudioWorkletNode yet.\n            if (nativeAudioWorkletNodeConstructor === null) {\n                const numberOfOutputChannels = options.outputChannelCount.reduce((sum, value) => sum + value, 0);\n                const outputChannelSplitterNode = createNativeChannelSplitterNode(nativeOfflineAudioContext, {\n                    channelCount: Math.max(1, numberOfOutputChannels),\n                    channelCountMode: 'explicit',\n                    channelInterpretation: 'discrete',\n                    numberOfOutputs: Math.max(1, numberOfOutputChannels)\n                });\n                const outputChannelMergerNodes = [];\n                for (let i = 0; i < proxy.numberOfOutputs; i += 1) {\n                    outputChannelMergerNodes.push(createNativeChannelMergerNode(nativeOfflineAudioContext, {\n                        channelCount: 1,\n                        channelCountMode: 'explicit',\n                        channelInterpretation: 'speakers',\n                        numberOfInputs: options.outputChannelCount[i]\n                    }));\n                }\n                // Bug #87: Expose at least one output to make this node connectable.\n                const outputAudioNodes = (options.numberOfOutputs === 0) ?\n                    [outputChannelSplitterNode] :\n                    outputChannelMergerNodes;\n                const outputGainNode = createNativeGainNode(nativeOfflineAudioContext, {\n                    channelCount: options.channelCount,\n                    channelCountMode: options.channelCountMode,\n                    channelInterpretation: options.channelInterpretation,\n                    gain: 1\n                });\n                outputGainNode.connect = connectMultipleOutputs.bind(null, outputAudioNodes);\n                outputGainNode.disconnect = disconnectMultipleOutputs.bind(null, outputAudioNodes);\n                nativeOutputNodes = [outputChannelSplitterNode, outputChannelMergerNodes, outputGainNode];\n            }\n            else if (!nativeAudioWorkletNodeIsOwnedByContext) {\n                nativeAudioWorkletNode = new nativeAudioWorkletNodeConstructor(nativeOfflineAudioContext, name);\n            }\n            renderedNativeAudioNodes.set(nativeOfflineAudioContext, (nativeOutputNodes === null) ? nativeAudioWorkletNode : nativeOutputNodes);\n            if (nativeOutputNodes !== null) {\n                const [outputChannelSplitterNode, outputChannelMergerNodes, outputGainNode] = nativeOutputNodes;\n                if (processorConstructor === undefined) {\n                    throw new Error('Missing the processor constructor.');\n                }\n                if (nativeOfflineAudioContextConstructor === null) {\n                    throw new Error('Missing the native OfflineAudioContext constructor.');\n                }\n                // Bug #47: The AudioDestinationNode in Edge and Safari gets not initialized correctly.\n                const numberOfInputChannels = proxy.channelCount * proxy.numberOfInputs;\n                const numberOfParameters = (processorConstructor.parameterDescriptors === undefined)\n                    ? 0\n                    : processorConstructor.parameterDescriptors.length;\n                const partialOfflineAudioContext = new nativeOfflineAudioContextConstructor(numberOfInputChannels + numberOfParameters, \n                // Ceil the length to the next full render quantum.\n                // Bug #17: Safari does not yet expose the length.\n                Math.ceil(proxy.context.length / 128) * 128, nativeOfflineAudioContext.sampleRate);\n                const gainNodes = [];\n                const inputChannelSplitterNodes = [];\n                for (let i = 0; i < options.numberOfInputs; i += 1) {\n                    gainNodes.push(createNativeGainNode(partialOfflineAudioContext, {\n                        channelCount: options.channelCount,\n                        channelCountMode: options.channelCountMode,\n                        channelInterpretation: options.channelInterpretation,\n                        gain: 1\n                    }));\n                    inputChannelSplitterNodes.push(createNativeChannelSplitterNode(partialOfflineAudioContext, {\n                        channelCount: options.channelCount,\n                        channelCountMode: 'explicit',\n                        channelInterpretation: 'discrete',\n                        numberOfOutputs: options.channelCount\n                    }));\n                }\n                const constantSourceNodes = await Promise\n                    .all(Array\n                    .from(proxy.parameters.values())\n                    .map(async (audioParam) => {\n                    const constantSourceNode = createNativeConstantSourceNode(partialOfflineAudioContext, {\n                        channelCount: 1,\n                        channelCountMode: 'explicit',\n                        channelInterpretation: 'discrete',\n                        offset: audioParam.value\n                    });\n                    await renderAutomation(proxy.context, partialOfflineAudioContext, audioParam, constantSourceNode.offset);\n                    return constantSourceNode;\n                }));\n                const inputChannelMergerNode = createNativeChannelMergerNode(partialOfflineAudioContext, {\n                    channelCount: 1,\n                    channelCountMode: 'explicit',\n                    channelInterpretation: 'speakers',\n                    numberOfInputs: Math.max(1, numberOfInputChannels + numberOfParameters)\n                });\n                for (let i = 0; i < options.numberOfInputs; i += 1) {\n                    gainNodes[i].connect(inputChannelSplitterNodes[i]);\n                    for (let j = 0; j < options.channelCount; j += 1) {\n                        inputChannelSplitterNodes[i].connect(inputChannelMergerNode, j, (i * options.channelCount) + j);\n                    }\n                }\n                for (const [index, constantSourceNode] of constantSourceNodes.entries()) {\n                    constantSourceNode.connect(inputChannelMergerNode, 0, numberOfInputChannels + index);\n                    constantSourceNode.start(0);\n                }\n                inputChannelMergerNode.connect(partialOfflineAudioContext.destination);\n                return Promise\n                    .all(gainNodes\n                    .map((gainNode) => renderInputsOfAudioNode(proxy, partialOfflineAudioContext, gainNode)))\n                    .then(() => renderNativeOfflineAudioContext(partialOfflineAudioContext))\n                    .then(async (renderedBuffer) => {\n                    const audioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext);\n                    const processedBuffer = await processBuffer(proxy, renderedBuffer, nativeOfflineAudioContext, options, processorConstructor);\n                    if (processedBuffer !== null) {\n                        audioBufferSourceNode.buffer = processedBuffer;\n                        audioBufferSourceNode.start(0);\n                    }\n                    audioBufferSourceNode.connect(outputChannelSplitterNode);\n                    for (let i = 0, outputChannelSplitterNodeOutput = 0; i < proxy.numberOfOutputs; i += 1) {\n                        const outputChannelMergerNode = outputChannelMergerNodes[i];\n                        for (let j = 0; j < options.outputChannelCount[i]; j += 1) {\n                            outputChannelSplitterNode.connect(outputChannelMergerNode, outputChannelSplitterNodeOutput + j, j);\n                        }\n                        outputChannelSplitterNodeOutput += options.outputChannelCount[i];\n                    }\n                    return outputGainNode;\n                });\n            }\n            if (!nativeAudioWorkletNodeIsOwnedByContext) {\n                for (const [nm, audioParam] of proxy.parameters.entries()) {\n                    await renderAutomation(proxy.context, nativeOfflineAudioContext, audioParam, \n                    // @todo The definition that TypeScript uses of the AudioParamMap is lacking many methods.\n                    nativeAudioWorkletNode.parameters.get(nm));\n                }\n            }\n            else {\n                for (const [nm, audioParam] of proxy.parameters.entries()) {\n                    await connectAudioParam(proxy.context, nativeOfflineAudioContext, audioParam, \n                    // @todo The definition that TypeScript uses of the AudioParamMap is lacking many methods.\n                    nativeAudioWorkletNode.parameters.get(nm));\n                }\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioWorkletNode);\n            return nativeAudioWorkletNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeAudioWorkletNodeOrOutputNodes = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeAudioWorkletNodeOrOutputNodes !== undefined) {\n                    const renderedNativeAudioWorkletNodeOrGainNode = Array.isArray(renderedNativeAudioWorkletNodeOrOutputNodes)\n                        ? renderedNativeAudioWorkletNodeOrOutputNodes[2]\n                        : renderedNativeAudioWorkletNodeOrOutputNodes;\n                    return Promise.resolve(renderedNativeAudioWorkletNodeOrGainNode);\n                }\n                return createAudioNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-worklet-node-renderer-factory.js.map","import { NODE_TO_PROCESSOR_MAPS } from '../globals';\nimport { getNativeAudioNode } from './get-native-audio-node';\nimport { getValueForKey } from './get-value-for-key';\nexport const getAudioWorkletProcessor = (nativeOfflineAudioContext, proxy) => {\n    const nodeToProcessorMap = getValueForKey(NODE_TO_PROCESSOR_MAPS, nativeOfflineAudioContext);\n    const nativeAudioWorkletNode = getNativeAudioNode(proxy);\n    return getValueForKey(nodeToProcessorMap, nativeAudioWorkletNode);\n};\n//# sourceMappingURL=/build/es2018/helpers/get-audio-worklet-processor.js.map","import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { getNativeContext } from '../helpers/get-native-context';\nconst DEFAULT_OPTIONS = {\n    Q: 1,\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    detune: 0,\n    frequency: 350,\n    gain: 0,\n    type: 'lowpass'\n};\nexport const createBiquadFilterNodeConstructor = (createAudioParam, createBiquadFilterNodeRenderer, createInvalidAccessError, createNativeBiquadFilterNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class BiquadFilterNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const biquadFilterNodeRenderer = ((isOffline) ? createBiquadFilterNodeRenderer() : null);\n            super(context, 'passive', nativeBiquadFilterNode, biquadFilterNodeRenderer);\n            // Bug #80: Edge & Safari do not export the correct values for maxValue and minValue.\n            this._Q = createAudioParam(this, isOffline, nativeBiquadFilterNode.Q, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            // Bug #78: Edge & Safari do not export the correct values for maxValue and minValue.\n            this._detune = createAudioParam(this, isOffline, nativeBiquadFilterNode.detune, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            // Bug #77: Chrome, Edge, Firefox, Opera & Safari do not export the correct values for maxValue and minValue.\n            this._frequency = createAudioParam(this, isOffline, nativeBiquadFilterNode.frequency, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            // Bug #79: Edge & Safari do not export the correct values for maxValue and minValue.\n            this._gain = createAudioParam(this, isOffline, nativeBiquadFilterNode.gain, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            this._nativeBiquadFilterNode = nativeBiquadFilterNode;\n        }\n        get Q() {\n            return this._Q;\n        }\n        get detune() {\n            return this._detune;\n        }\n        get frequency() {\n            return this._frequency;\n        }\n        get gain() {\n            return this._gain;\n        }\n        get type() {\n            return this._nativeBiquadFilterNode.type;\n        }\n        set type(value) {\n            this._nativeBiquadFilterNode.type = value;\n        }\n        getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {\n            this._nativeBiquadFilterNode.getFrequencyResponse(frequencyHz, magResponse, phaseResponse);\n            // Bug #68: Only Chrome & Opera do throw an error if the parameters differ in their length.\n            if ((frequencyHz.length !== magResponse.length) || (magResponse.length !== phaseResponse.length)) {\n                throw createInvalidAccessError();\n            }\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/biquad-filter-node-constructor.js.map","import { getNativeContext } from '../helpers/get-native-context';\nconst DEFAULT_OPTIONS = {\n    channelCount: 1,\n    channelCountMode: 'explicit',\n    channelInterpretation: 'speakers',\n    numberOfInputs: 6\n};\nexport const createChannelMergerNodeConstructor = (createChannelMergerNodeRenderer, createNativeChannelMergerNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class ChannelMergerNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeChannelMergerNode = createNativeChannelMergerNode(nativeContext, mergedOptions);\n            const channelMergerNodeRenderer = ((isNativeOfflineAudioContext(nativeContext))\n                ? createChannelMergerNodeRenderer()\n                : null);\n            super(context, 'passive', nativeChannelMergerNode, channelMergerNodeRenderer);\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/channel-merger-node-constructor.js.map","import { getNativeContext } from '../helpers/get-native-context';\nconst DEFAULT_OPTIONS = {\n    channelCount: 6,\n    channelCountMode: 'explicit',\n    channelInterpretation: 'discrete',\n    numberOfOutputs: 6\n};\nconst sanitizedOptions = (options) => {\n    return { ...options, channelCount: options.numberOfOutputs };\n};\nexport const createChannelSplitterNodeConstructor = (createChannelSplitterNodeRenderer, createNativeChannelSplitterNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class ChannelSplitterNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = sanitizedOptions({ ...DEFAULT_OPTIONS, ...options });\n            const nativeChannelSplitterNode = createNativeChannelSplitterNode(nativeContext, mergedOptions);\n            const channelSplitterNodeRenderer = ((isNativeOfflineAudioContext(nativeContext))\n                ? createChannelSplitterNodeRenderer()\n                : null);\n            super(context, 'passive', nativeChannelSplitterNode, channelSplitterNodeRenderer);\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/channel-splitter-node-constructor.js.map","import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { getNativeContext } from '../helpers/get-native-context';\nimport { setInternalState } from '../helpers/set-internal-state';\nimport { wrapEventListener } from '../helpers/wrap-event-listener';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    offset: 1\n};\nexport const createConstantSourceNodeConstructor = (createAudioParam, createConstantSourceNodeRendererFactory, createNativeConstantSourceNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class ConstantSourceNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeConstantSourceNode = createNativeConstantSourceNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const constantSourceNodeRenderer = ((isOffline)\n                ? createConstantSourceNodeRendererFactory()\n                : null);\n            super(context, 'passive', nativeConstantSourceNode, constantSourceNodeRenderer);\n            this._constantSourceNodeRenderer = constantSourceNodeRenderer;\n            this._nativeConstantSourceNode = nativeConstantSourceNode;\n            /*\n             * Bug #62 & #74: Edge & Safari do not support ConstantSourceNodes and do not export the correct values for maxValue and\n             * minValue for GainNodes.\n             */\n            this._offset = createAudioParam(this, isOffline, nativeConstantSourceNode.offset, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            this._onended = null;\n        }\n        get offset() {\n            return this._offset;\n        }\n        get onended() {\n            return this._onended;\n        }\n        set onended(value) {\n            const wrappedListener = wrapEventListener(this, value);\n            this._nativeConstantSourceNode.onended = wrappedListener;\n            const nativeOnEnded = this._nativeConstantSourceNode.onended;\n            this._onended = (nativeOnEnded === wrappedListener) ? value : nativeOnEnded;\n        }\n        start(when = 0) {\n            this._nativeConstantSourceNode.start(when);\n            if (this._constantSourceNodeRenderer !== null) {\n                this._constantSourceNodeRenderer.start = when;\n            }\n            else {\n                setInternalState(this, 'active');\n                const setInternalStateToInactive = () => {\n                    this._nativeConstantSourceNode.removeEventListener('ended', setInternalStateToInactive);\n                    // @todo Determine a meaningful delay instead of just using one second.\n                    setTimeout(() => setInternalState(this, 'passive'), 1000);\n                };\n                this._nativeConstantSourceNode.addEventListener('ended', setInternalStateToInactive);\n            }\n        }\n        stop(when = 0) {\n            this._nativeConstantSourceNode.stop(when);\n            if (this._constantSourceNodeRenderer !== null) {\n                this._constantSourceNodeRenderer.stop = when;\n            }\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/constant-source-node-constructor.js.map","import { getNativeContext } from '../helpers/get-native-context';\nconst DEFAULT_OPTIONS = {\n    buffer: null,\n    channelCount: 2,\n    channelCountMode: 'clamped-max',\n    channelInterpretation: 'speakers',\n    disableNormalization: false\n};\nexport const createConvolverNodeConstructor = (createConvolverNodeRenderer, createNativeConvolverNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class ConvolverNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeConvolverNode = createNativeConvolverNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const convolverNodeRenderer = ((isOffline) ? createConvolverNodeRenderer() : null);\n            super(context, 'passive', nativeConvolverNode, convolverNodeRenderer);\n            this._isBufferNullified = false;\n            this._nativeConvolverNode = nativeConvolverNode;\n        }\n        get buffer() {\n            if (this._isBufferNullified) {\n                return null;\n            }\n            return this._nativeConvolverNode.buffer;\n        }\n        set buffer(value) {\n            this._nativeConvolverNode.buffer = value;\n            // Bug #115: Safari does not allow to set the buffer to null.\n            if (value === null && this._nativeConvolverNode.buffer !== null) {\n                const nativeContext = this._nativeConvolverNode.context;\n                this._nativeConvolverNode.buffer = nativeContext.createBuffer(1, 1, nativeContext.sampleRate);\n                this._isBufferNullified = true;\n            }\n            else {\n                this._isBufferNullified = false;\n            }\n        }\n        get normalize() {\n            return this._nativeConvolverNode.normalize;\n        }\n        set normalize(value) {\n            this._nativeConvolverNode.normalize = value;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/convolver-node-constructor.js.map","import { getNativeContext } from '../helpers/get-native-context';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    delayTime: 0,\n    maxDelayTime: 1\n};\nexport const createDelayNodeConstructor = (createAudioParam, createDelayNodeRenderer, createNativeDelayNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class DelayNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeDelayNode = createNativeDelayNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const delayNodeRenderer = ((isOffline)\n                ? createDelayNodeRenderer(mergedOptions.maxDelayTime)\n                : null);\n            super(context, 'passive', nativeDelayNode, delayNodeRenderer);\n            // @todo Edge does not export the correct values for maxValue and minValue.\n            this._delayTime = createAudioParam(this, isOffline, nativeDelayNode.delayTime, mergedOptions.maxDelayTime, 0);\n        }\n        get delayTime() {\n            return this._delayTime;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/delay-node-constructor.js.map","import { isNativeAudioNode } from '../guards/native-audio-node';\nconst getOutputAudioNodeAtIndex = (createIndexSizeError, outputAudioNodes, output) => {\n    const outputAudioNode = outputAudioNodes[output];\n    if (outputAudioNode === undefined) {\n        throw createIndexSizeError();\n    }\n    return outputAudioNode;\n};\nexport const createDisconnectMultipleOutputs = (createIndexSizeError) => {\n    return (outputAudioNodes, destinationOrOutput = undefined, output = undefined, input = 0) => {\n        if (destinationOrOutput === undefined) {\n            return outputAudioNodes\n                .forEach((outputAudioNode) => outputAudioNode.disconnect());\n        }\n        if (typeof destinationOrOutput === 'number') {\n            return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, destinationOrOutput)\n                .disconnect();\n        }\n        if (isNativeAudioNode(destinationOrOutput)) {\n            if (output === undefined) {\n                return outputAudioNodes\n                    .forEach((outputAudioNode) => outputAudioNode.disconnect(destinationOrOutput));\n            }\n            if (input === undefined) {\n                return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output)\n                    .disconnect(destinationOrOutput, 0);\n            }\n            return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output)\n                .disconnect(destinationOrOutput, 0, input);\n        }\n        if (output === undefined) {\n            return outputAudioNodes\n                .forEach((outputAudioNode) => outputAudioNode.disconnect(destinationOrOutput));\n        }\n        return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output)\n            .disconnect(destinationOrOutput, 0);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/disconnect-multiple-outputs.js.map","import { getNativeContext } from '../helpers/get-native-context';\nconst DEFAULT_OPTIONS = {\n    attack: 0.003,\n    channelCount: 2,\n    channelCountMode: 'clamped-max',\n    channelInterpretation: 'speakers',\n    knee: 30,\n    ratio: 12,\n    release: 0.25,\n    threshold: -24\n};\nexport const createDynamicsCompressorNodeConstructor = (createAudioParam, createDynamicsCompressorNodeRenderer, createNativeDynamicsCompressorNode, createNotSupportedError, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class DynamicsCompressorNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const dynamicsCompressorNodeRenderer = ((isOffline)\n                ? createDynamicsCompressorNodeRenderer()\n                : null);\n            super(context, 'passive', nativeDynamicsCompressorNode, dynamicsCompressorNodeRenderer);\n            // Bug #110: Edge does not export the correct values for maxValue and minValue.\n            this._attack = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.attack, 1, 0);\n            this._knee = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.knee, 40, 0);\n            this._nativeDynamicsCompressorNode = nativeDynamicsCompressorNode;\n            this._ratio = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.ratio, 20, 1);\n            this._release = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.release, 1, 0);\n            this._threshold = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.threshold, 0, -100);\n        }\n        get attack() {\n            return this._attack;\n        }\n        /*\n         * Bug #108: Only Chrome, Firefox and Opera disallow a channelCount of three and above yet which is why the getter and setter needs\n         * to be overwritten here.\n         */\n        get channelCount() {\n            return this._nativeDynamicsCompressorNode.channelCount;\n        }\n        set channelCount(value) {\n            const previousChannelCount = this._nativeDynamicsCompressorNode.channelCount;\n            this._nativeDynamicsCompressorNode.channelCount = value;\n            if (value > 2) {\n                this._nativeDynamicsCompressorNode.channelCount = previousChannelCount;\n                throw createNotSupportedError();\n            }\n        }\n        /*\n         * Bug #109: Only Chrome, Firefox and Opera disallow a channelCountMode of 'max' yet which is why the getter and setter needs to be\n         * overwritten here.\n         */\n        get channelCountMode() {\n            return this._nativeDynamicsCompressorNode.channelCountMode;\n        }\n        set channelCountMode(value) {\n            const previousChannelCount = this._nativeDynamicsCompressorNode.channelCountMode;\n            this._nativeDynamicsCompressorNode.channelCountMode = value;\n            if (value === 'max') {\n                this._nativeDynamicsCompressorNode.channelCountMode = previousChannelCount;\n                throw createNotSupportedError();\n            }\n        }\n        get knee() {\n            return this._knee;\n        }\n        get ratio() {\n            return this._ratio;\n        }\n        get reduction() {\n            // Bug #111: Safari returns an AudioParam instead of a number.\n            if (typeof this._nativeDynamicsCompressorNode.reduction.value === 'number') {\n                return this._nativeDynamicsCompressorNode.reduction.value;\n            }\n            return this._nativeDynamicsCompressorNode.reduction;\n        }\n        get release() {\n            return this._release;\n        }\n        get threshold() {\n            return this._threshold;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/dynamics-compressor-node-constructor.js.map","import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { getNativeContext } from '../helpers/get-native-context';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    gain: 1\n};\nexport const createGainNodeConstructor = (createAudioParam, createGainNodeRenderer, createNativeGainNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class GainNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeGainNode = createNativeGainNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const gainNodeRenderer = ((isOffline) ? createGainNodeRenderer() : null);\n            super(context, 'passive', nativeGainNode, gainNodeRenderer);\n            // Bug #74: Edge & Safari do not export the correct values for maxValue and minValue.\n            this._gain = createAudioParam(this, isOffline, nativeGainNode.gain, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n        }\n        get gain() {\n            return this._gain;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/gain-node-constructor.js.map","export const createInvalidAccessError = () => {\n    try {\n        return new DOMException('', 'InvalidAccessError');\n    }\n    catch (err) {\n        // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.\n        err.code = 15;\n        err.name = 'InvalidAccessError';\n        return err;\n    }\n};\n//# sourceMappingURL=/build/es2018/factories/invalid-access-error.js.map","import { getNativeContext } from '../helpers/get-native-context';\nimport { wrapIIRFilterNodeGetFrequencyResponseMethod } from '../helpers/wrap-iir-filter-node-get-frequency-response-method';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers'\n};\nexport const createIIRFilterNodeConstructor = (createNativeIIRFilterNode, createIIRFilterNodeRenderer, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class IIRFilterNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options) {\n            const nativeContext = getNativeContext(context);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeIIRFilterNode = createNativeIIRFilterNode(nativeContext, isOffline ? null : context.baseLatency, mergedOptions);\n            const iirFilterNodeRenderer = ((isOffline)\n                ? createIIRFilterNodeRenderer(mergedOptions.feedback, mergedOptions.feedforward)\n                : null);\n            super(context, 'passive', nativeIIRFilterNode, iirFilterNodeRenderer);\n            // Bug #23 & #24: FirefoxDeveloper does not throw an InvalidAccessError.\n            // @todo Write a test which allows other browsers to remain unpatched.\n            wrapIIRFilterNodeGetFrequencyResponseMethod(nativeIIRFilterNode);\n            this._nativeIIRFilterNode = nativeIIRFilterNode;\n        }\n        getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {\n            return this._nativeIIRFilterNode.getFrequencyResponse(frequencyHz, magResponse, phaseResponse);\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/iir-filter-node-constructor.js.map","// This implementation as shamelessly inspired by source code of\n// tslint:disable-next-line:max-line-length\n// {@link https://chromium.googlesource.com/chromium/src.git/+/master/third_party/WebKit/Source/platform/audio/IIRFilter.cpp|Chromium's IIRFilter}.\nexport const filterBuffer = (feedback, feedbackLength, feedforward, feedforwardLength, minLength, xBuffer, yBuffer, bufferIndex, bufferLength, input, output) => {\n    const inputLength = input.length;\n    let i = bufferIndex;\n    for (let j = 0; j < inputLength; j += 1) {\n        let y = feedforward[0] * input[j];\n        for (let k = 1; k < minLength; k += 1) {\n            const x = (i - k) & (bufferLength - 1); // tslint:disable-line:no-bitwise\n            y += feedforward[k] * xBuffer[x];\n            y -= feedback[k] * yBuffer[x];\n        }\n        for (let k = minLength; k < feedforwardLength; k += 1) {\n            y += feedforward[k] * xBuffer[(i - k) & (bufferLength - 1)]; // tslint:disable-line:no-bitwise\n        }\n        for (let k = minLength; k < feedbackLength; k += 1) {\n            y -= feedback[k] * yBuffer[(i - k) & (bufferLength - 1)]; // tslint:disable-line:no-bitwise\n        }\n        xBuffer[i] = input[j];\n        yBuffer[i] = y;\n        i = (i + 1) & (bufferLength - 1); // tslint:disable-line:no-bitwise\n        output[j] = y;\n    }\n    return i;\n};\n//# sourceMappingURL=/build/es2018/helpers/filter-buffer.js.map","export const testPromiseSupport = (nativeContext) => {\n    // This 12 numbers represent the 48 bytes of an empty WAVE file with a single sample.\n    const uint32Array = new Uint32Array([\n        1179011410,\n        40,\n        1163280727,\n        544501094,\n        16,\n        131073,\n        44100,\n        176400,\n        1048580,\n        1635017060,\n        4,\n        0\n    ]);\n    try {\n        // Bug #1: Safari requires a successCallback.\n        const promise = nativeContext.decodeAudioData(uint32Array.buffer, () => {\n            // Ignore the success callback.\n        });\n        if (promise === undefined) {\n            return false;\n        }\n        promise.catch(() => {\n            // Ignore rejected errors.\n        });\n        return true;\n    }\n    catch (_a) {\n        // Ignore errors.\n    }\n    return false;\n};\n//# sourceMappingURL=/build/es2018/helpers/test-promise-support.js.map","import { testPromiseSupport } from '../helpers/test-promise-support';\nconst DEFAULT_OPTIONS = {\n    numberOfChannels: 1\n};\nexport const createMinimalOfflineAudioContextConstructor = (cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, minimalBaseAudioContextConstructor, startRendering) => {\n    return class MinimalOfflineAudioContext extends minimalBaseAudioContextConstructor {\n        constructor(options) {\n            const { length, numberOfChannels, sampleRate } = { ...DEFAULT_OPTIONS, ...options };\n            const nativeOfflineAudioContext = createNativeOfflineAudioContext(numberOfChannels, length, sampleRate);\n            // #21 Safari does not support promises and therefore would fire the statechange event before the promise can be resolved.\n            if (!cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeOfflineAudioContext))) {\n                nativeOfflineAudioContext.addEventListener('statechange', (() => {\n                    let i = 0;\n                    const delayStateChangeEvent = (event) => {\n                        if (this._state === 'running') {\n                            if (i > 0) {\n                                nativeOfflineAudioContext.removeEventListener('statechange', delayStateChangeEvent);\n                                event.stopImmediatePropagation();\n                                this._waitForThePromiseToSettle(event);\n                            }\n                            else {\n                                i += 1;\n                            }\n                        }\n                    };\n                    return delayStateChangeEvent;\n                })());\n            }\n            super(nativeOfflineAudioContext, numberOfChannels);\n            this._length = length;\n            this._nativeOfflineAudioContext = nativeOfflineAudioContext;\n            this._state = null;\n        }\n        get length() {\n            // Bug #17: Safari does not yet expose the length.\n            if (this._nativeOfflineAudioContext.length === undefined) {\n                return this._length;\n            }\n            return this._nativeOfflineAudioContext.length;\n        }\n        get state() {\n            return (this._state === null) ? this._nativeOfflineAudioContext.state : this._state;\n        }\n        startRendering() {\n            /*\n             * Bug #9 & #59: It is theoretically possible that startRendering() will first render a partialOfflineAudioContext. Therefore\n             * the state of the nativeOfflineAudioContext might no transition to running immediately.\n             */\n            if (this._state === 'running') {\n                return Promise.reject(createInvalidStateError());\n            }\n            this._state = 'running';\n            return startRendering(this.destination, this._nativeOfflineAudioContext)\n                .then((audioBuffer) => {\n                this._state = null;\n                /*\n                 * Bug #50: Deleting the AudioGraph is currently not possible anymore.\n                 * deleteAudioGraph(this, this._nativeOfflineAudioContext);\n                 */\n                return audioBuffer;\n            })\n                // @todo This could be written more elegantly when Promise.finally() becomes avalaible.\n                .catch((err) => {\n                this._state = null;\n                /*\n                 * Bug #50: Deleting the AudioGraph is currently not possible anymore.\n                 * deleteAudioGraph(this, this._nativeOfflineAudioContext);\n                 */\n                throw err; // tslint:disable-line:rxjs-throw-error\n            });\n        }\n        _waitForThePromiseToSettle(event) {\n            if (this._state === null) {\n                this._nativeOfflineAudioContext.dispatchEvent(event);\n            }\n            else {\n                setTimeout(() => this._waitForThePromiseToSettle(event));\n            }\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/minimal-offline-audio-context-constructor.js.map","export const assignNativeAudioNodeOption = (nativeAudioNode, options, option) => {\n    const value = options[option];\n    if (value !== undefined && value !== nativeAudioNode[option]) {\n        nativeAudioNode[option] = value;\n    }\n};\n//# sourceMappingURL=/build/es2018/helpers/assign-native-audio-node-option.js.map","import { assignNativeAudioNodeOption } from './assign-native-audio-node-option';\nexport const assignNativeAudioNodeOptions = (nativeAudioNode, options) => {\n    assignNativeAudioNodeOption(nativeAudioNode, options, 'channelCount');\n    assignNativeAudioNodeOption(nativeAudioNode, options, 'channelCountMode');\n    assignNativeAudioNodeOption(nativeAudioNode, options, 'channelInterpretation');\n};\n//# sourceMappingURL=/build/es2018/helpers/assign-native-audio-node-options.js.map","export const testAnalyserNodeGetFloatTimeDomainDataMethodSupport = (nativeAnalyserNode) => {\n    return typeof nativeAnalyserNode.getFloatTimeDomainData === 'function';\n};\n//# sourceMappingURL=/build/es2018/helpers/test-analyser-node-get-float-time-domain-data-method-support.js.map","export const assignNativeAudioNodeAudioParamValue = (nativeAudioNode, options, audioParam) => {\n    const value = options[audioParam];\n    if (value !== undefined && value !== nativeAudioNode[audioParam].value) {\n        nativeAudioNode[audioParam].value = value;\n    }\n};\n//# sourceMappingURL=/build/es2018/helpers/assign-native-audio-node-audio-param-value.js.map","export const wrapAudioScheduledSourceNodeStartMethodNegativeParameters = (nativeAudioScheduledSourceNode) => {\n    nativeAudioScheduledSourceNode.start = ((start) => {\n        return (when = 0, offset = 0, duration) => {\n            if ((typeof duration === 'number' && duration < 0) || offset < 0 || when < 0) {\n                throw new RangeError(\"The parameters can't be negative.\");\n            }\n            // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.\n            start.call(nativeAudioScheduledSourceNode, when, offset, duration);\n        };\n    })(nativeAudioScheduledSourceNode.start);\n};\n//# sourceMappingURL=/build/es2018/helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters.js.map","export const wrapAudioScheduledSourceNodeStopMethodNegativeParameters = (nativeAudioScheduledSourceNode) => {\n    nativeAudioScheduledSourceNode.stop = ((stop) => {\n        return (when = 0) => {\n            if (when < 0) {\n                throw new RangeError(\"The parameter can't be negative.\");\n            }\n            stop.call(nativeAudioScheduledSourceNode, when);\n        };\n    })(nativeAudioScheduledSourceNode.stop);\n};\n//# sourceMappingURL=/build/es2018/helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters.js.map","export const computeBufferSize = (baseLatency, sampleRate) => {\n    if (baseLatency === null) {\n        return 512;\n    }\n    return Math.max(512, Math.min(16384, Math.pow(2, Math.round(Math.log2(baseLatency * sampleRate)))));\n};\n//# sourceMappingURL=/build/es2018/helpers/compute-buffer-size.js.map","import { cloneAudioWorkletNodeOptions } from './clone-audio-worklet-node-options';\nexport const createAudioWorkletProcessorPromise = async (processorConstructor, audioWorkletNodeOptions) => {\n    const clonedAudioWorkletNodeOptions = await cloneAudioWorkletNodeOptions(audioWorkletNodeOptions);\n    return new processorConstructor(clonedAudioWorkletNodeOptions);\n};\n//# sourceMappingURL=/build/es2018/helpers/create-audio-worklet-processor-promise.js.map","export const cloneAudioWorkletNodeOptions = (audioWorkletNodeOptions) => {\n    return new Promise((resolve, reject) => {\n        const { port1, port2 } = new MessageChannel();\n        port1.onmessage = ({ data }) => {\n            port1.close();\n            port2.close();\n            resolve(data);\n        };\n        port1.onmessageerror = ({ data }) => {\n            port1.close();\n            port2.close();\n            reject(data);\n        };\n        // This will throw an error if the audioWorkletNodeOptions are not clonable.\n        port2.postMessage(audioWorkletNodeOptions);\n    });\n};\n//# sourceMappingURL=/build/es2018/helpers/clone-audio-worklet-node-options.js.map","import { isNativeAudioNode } from '../guards/native-audio-node';\nexport const interceptConnections = (original, interceptor) => {\n    original.connect = ((destination, \n    // @todo TypeScript can't infer the type for the parameters output and input in this case.\n    output = 0, // tslint:disable-line:no-inferrable-types\n    input = 0 // tslint:disable-line:no-inferrable-types\n    ) => {\n        if (isNativeAudioNode(destination)) {\n            // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.\n            interceptor.connect.call(interceptor, destination, output, input);\n            // Bug #11: Safari does not support chaining yet.\n            return destination;\n        }\n        // @todo TypeScript does still assume that connect() returns void.\n        return interceptor.connect.call(interceptor, destination, output);\n    });\n    original.disconnect = function () {\n        // @todo TypeScript cannot infer all the signatures yet.\n        interceptor.disconnect.apply(interceptor, arguments);\n    };\n    return original;\n};\n//# sourceMappingURL=/build/es2018/helpers/intercept-connections.js.map","import { computeBufferSize } from '../helpers/compute-buffer-size';\nimport { filterBuffer } from '../helpers/filter-buffer';\nimport { interceptConnections } from '../helpers/intercept-connections';\nfunction divide(a, b) {\n    const denominator = (b[0] * b[0]) + (b[1] * b[1]);\n    return [(((a[0] * b[0]) + (a[1] * b[1])) / denominator), (((a[1] * b[0]) - (a[0] * b[1])) / denominator)];\n}\nfunction multiply(a, b) {\n    return [((a[0] * b[0]) - (a[1] * b[1])), ((a[0] * b[1]) + (a[1] * b[0]))];\n}\nfunction evaluatePolynomial(coefficient, z) {\n    let result = [0, 0];\n    for (let i = coefficient.length - 1; i >= 0; i -= 1) {\n        result = multiply(result, z);\n        result[0] += coefficient[i];\n    }\n    return result;\n}\nexport const createNativeIIRFilterNodeFakerFactory = (createInvalidAccessError, createInvalidStateError, createNativeScriptProcessorNode, createNotSupportedError) => {\n    return (nativeContext, baseLatency, { channelCount, channelCountMode, channelInterpretation, feedback, feedforward }) => {\n        const bufferSize = computeBufferSize(baseLatency, nativeContext.sampleRate);\n        const feedbackLength = feedback.length;\n        const feedforwardLength = feedforward.length;\n        const minLength = Math.min(feedbackLength, feedforwardLength);\n        if (feedback.length === 0 || feedback.length > 20) {\n            throw createNotSupportedError();\n        }\n        if (feedback[0] === 0) {\n            throw createInvalidStateError();\n        }\n        if (feedforward.length === 0 || feedforward.length > 20) {\n            throw createNotSupportedError();\n        }\n        if (feedforward[0] === 0) {\n            throw createInvalidStateError();\n        }\n        if (feedback[0] !== 1) {\n            for (let i = 0; i < feedforwardLength; i += 1) {\n                feedforward[i] /= feedback[0];\n            }\n            for (let i = 1; i < feedbackLength; i += 1) {\n                feedback[i] /= feedback[0];\n            }\n        }\n        const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, bufferSize, channelCount, channelCount);\n        scriptProcessorNode.channelCount = channelCount;\n        scriptProcessorNode.channelCountMode = channelCountMode;\n        scriptProcessorNode.channelInterpretation = channelInterpretation;\n        const bufferLength = 32;\n        const bufferIndexes = [];\n        const xBuffers = [];\n        const yBuffers = [];\n        for (let i = 0; i < channelCount; i += 1) {\n            bufferIndexes.push(0);\n            const xBuffer = new Float32Array(bufferLength);\n            const yBuffer = new Float32Array(bufferLength);\n            // @todo Add a test which checks support for TypedArray.prototype.fill().\n            xBuffer.fill(0);\n            yBuffer.fill(0);\n            xBuffers.push(xBuffer);\n            yBuffers.push(yBuffer);\n        }\n        scriptProcessorNode.onaudioprocess = (event) => {\n            const inputBuffer = event.inputBuffer;\n            const outputBuffer = event.outputBuffer;\n            const numberOfChannels = inputBuffer.numberOfChannels;\n            for (let i = 0; i < numberOfChannels; i += 1) {\n                const input = inputBuffer.getChannelData(i);\n                const output = outputBuffer.getChannelData(i);\n                bufferIndexes[i] = filterBuffer(feedback, feedbackLength, feedforward, feedforwardLength, minLength, xBuffers[i], yBuffers[i], bufferIndexes[i], bufferLength, input, output);\n            }\n        };\n        const nyquist = nativeContext.sampleRate / 2;\n        const nativeIIRFilterNodeFaker = {\n            get bufferSize() {\n                return bufferSize;\n            },\n            get channelCount() {\n                return scriptProcessorNode.channelCount;\n            },\n            set channelCount(value) {\n                scriptProcessorNode.channelCount = value;\n            },\n            get channelCountMode() {\n                return scriptProcessorNode.channelCountMode;\n            },\n            set channelCountMode(value) {\n                scriptProcessorNode.channelCountMode = value;\n            },\n            get channelInterpretation() {\n                return scriptProcessorNode.channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                scriptProcessorNode.channelInterpretation = value;\n            },\n            get context() {\n                return scriptProcessorNode.context;\n            },\n            get inputs() {\n                return [scriptProcessorNode];\n            },\n            get numberOfInputs() {\n                return scriptProcessorNode.numberOfInputs;\n            },\n            get numberOfOutputs() {\n                return scriptProcessorNode.numberOfOutputs;\n            },\n            addEventListener(...args) {\n                // @todo Dissallow adding an audioprocess listener.\n                return scriptProcessorNode.addEventListener(args[0], args[1], args[2]);\n            },\n            dispatchEvent(...args) {\n                return scriptProcessorNode.dispatchEvent(args[0]);\n            },\n            getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {\n                if ((frequencyHz.length !== magResponse.length) || (magResponse.length !== phaseResponse.length)) {\n                    throw createInvalidAccessError();\n                }\n                const length = frequencyHz.length;\n                for (let i = 0; i < length; i += 1) {\n                    const omega = -Math.PI * (frequencyHz[i] / nyquist);\n                    const z = [Math.cos(omega), Math.sin(omega)];\n                    const numerator = evaluatePolynomial(feedforward, z);\n                    const denominator = evaluatePolynomial(feedback, z);\n                    const response = divide(numerator, denominator);\n                    magResponse[i] = Math.sqrt((response[0] * response[0]) + (response[1] * response[1]));\n                    phaseResponse[i] = Math.atan2(response[1], response[0]);\n                }\n            },\n            removeEventListener(...args) {\n                return scriptProcessorNode.removeEventListener(args[0], args[1], args[2]);\n            }\n        };\n        return interceptConnections(nativeIIRFilterNodeFaker, scriptProcessorNode);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-iir-filter-node-faker-factory.js.map","export const createNotSupportedError = () => {\n    try {\n        return new DOMException('', 'NotSupportedError');\n    }\n    catch (err) {\n        // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.\n        err.code = 9;\n        err.name = 'NotSupportedError';\n        return err;\n    }\n};\n//# sourceMappingURL=/build/es2018/factories/not-supported-error.js.map","import { testPromiseSupport } from '../helpers/test-promise-support';\nconst DEFAULT_OPTIONS = {\n    numberOfChannels: 1\n};\nexport const createOfflineAudioContextConstructor = (baseAudioContextConstructor, cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, startRendering) => {\n    return class OfflineAudioContext extends baseAudioContextConstructor {\n        constructor(a, b, c) {\n            let options;\n            if (typeof a === 'number' && b !== undefined && c !== undefined) {\n                options = { length: b, numberOfChannels: a, sampleRate: c };\n            }\n            else if (typeof a === 'object') {\n                options = a;\n            }\n            else {\n                throw new Error('The given parameters are not valid.');\n            }\n            const { length, numberOfChannels, sampleRate } = { ...DEFAULT_OPTIONS, ...options };\n            const nativeOfflineAudioContext = createNativeOfflineAudioContext(numberOfChannels, length, sampleRate);\n            // #21 Safari does not support promises and therefore would fire the statechange event before the promise can be resolved.\n            if (!cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeOfflineAudioContext))) {\n                nativeOfflineAudioContext.addEventListener('statechange', (() => {\n                    let i = 0;\n                    const delayStateChangeEvent = (event) => {\n                        if (this._state === 'running') {\n                            if (i > 0) {\n                                nativeOfflineAudioContext.removeEventListener('statechange', delayStateChangeEvent);\n                                event.stopImmediatePropagation();\n                                this._waitForThePromiseToSettle(event);\n                            }\n                            else {\n                                i += 1;\n                            }\n                        }\n                    };\n                    return delayStateChangeEvent;\n                })());\n            }\n            super(nativeOfflineAudioContext, numberOfChannels);\n            this._length = length;\n            this._nativeOfflineAudioContext = nativeOfflineAudioContext;\n            this._state = null;\n        }\n        get length() {\n            // Bug #17: Safari does not yet expose the length.\n            if (this._nativeOfflineAudioContext.length === undefined) {\n                return this._length;\n            }\n            return this._nativeOfflineAudioContext.length;\n        }\n        get state() {\n            return (this._state === null) ? this._nativeOfflineAudioContext.state : this._state;\n        }\n        startRendering() {\n            /*\n             * Bug #9 & #59: It is theoretically possible that startRendering() will first render a partialOfflineAudioContext. Therefore\n             * the state of the nativeOfflineAudioContext might no transition to running immediately.\n             */\n            if (this._state === 'running') {\n                return Promise.reject(createInvalidStateError());\n            }\n            this._state = 'running';\n            return startRendering(this.destination, this._nativeOfflineAudioContext)\n                .then((audioBuffer) => {\n                this._state = null;\n                /*\n                 * Bug #50: Deleting the AudioGraph is currently not possible anymore.\n                 * deleteAudioGraph(this, this._nativeOfflineAudioContext);\n                 */\n                return audioBuffer;\n            })\n                // @todo This could be written more elegantly when Promise.finally() becomes avalaible.\n                .catch((err) => {\n                this._state = null;\n                /*\n                 * Bug #50: Deleting the AudioGraph is currently not possible anymore.\n                 * deleteAudioGraph(this, this._nativeOfflineAudioContext);\n                 */\n                throw err; // tslint:disable-line:rxjs-throw-error\n            });\n        }\n        _waitForThePromiseToSettle(event) {\n            if (this._state === null) {\n                this._nativeOfflineAudioContext.dispatchEvent(event);\n            }\n            else {\n                setTimeout(() => this._waitForThePromiseToSettle(event));\n            }\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/offline-audio-context-constructor.js.map","import { getNativeContext } from '../helpers/get-native-context';\nimport { setInternalState } from '../helpers/set-internal-state';\nimport { wrapEventListener } from '../helpers/wrap-event-listener';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    detune: 0,\n    frequency: 440,\n    type: 'sine'\n};\nexport const createOscillatorNodeConstructor = (createAudioParam, createInvalidStateError, createNativeOscillatorNode, createOscillatorNodeRenderer, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class OscillatorNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeOscillatorNode = createNativeOscillatorNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const oscillatorNodeRenderer = ((isOffline) ? createOscillatorNodeRenderer() : null);\n            const nyquist = context.sampleRate / 2;\n            super(context, 'passive', nativeOscillatorNode, oscillatorNodeRenderer);\n            // Bug #81: Edge, Firefox & Safari do not export the correct values for maxValue and minValue.\n            this._detune = createAudioParam(this, isOffline, nativeOscillatorNode.detune, 153600, -153600);\n            // Bug #76: Edge & Safari do not export the correct values for maxValue and minValue.\n            this._frequency = createAudioParam(this, isOffline, nativeOscillatorNode.frequency, nyquist, -nyquist);\n            this._nativeOscillatorNode = nativeOscillatorNode;\n            this._onended = null;\n            this._oscillatorNodeRenderer = oscillatorNodeRenderer;\n            if (this._oscillatorNodeRenderer !== null && mergedOptions.periodicWave !== undefined) {\n                this._oscillatorNodeRenderer.periodicWave =\n                    mergedOptions.periodicWave;\n            }\n        }\n        get detune() {\n            return this._detune;\n        }\n        get frequency() {\n            return this._frequency;\n        }\n        get onended() {\n            return this._onended;\n        }\n        set onended(value) {\n            const wrappedListener = wrapEventListener(this, value);\n            this._nativeOscillatorNode.onended = wrappedListener;\n            const nativeOnEnded = this._nativeOscillatorNode.onended;\n            this._onended = (nativeOnEnded === wrappedListener) ? value : nativeOnEnded;\n        }\n        get type() {\n            return this._nativeOscillatorNode.type;\n        }\n        set type(value) {\n            this._nativeOscillatorNode.type = value;\n            // Bug #57: Edge will not throw an error when assigning the type to 'custom'. But it still will change the value.\n            if (value === 'custom') {\n                throw createInvalidStateError();\n            }\n            if (this._oscillatorNodeRenderer !== null) {\n                this._oscillatorNodeRenderer.periodicWave = null;\n            }\n        }\n        setPeriodicWave(periodicWave) {\n            this._nativeOscillatorNode.setPeriodicWave(periodicWave);\n            if (this._oscillatorNodeRenderer !== null) {\n                this._oscillatorNodeRenderer.periodicWave = periodicWave;\n            }\n        }\n        start(when = 0) {\n            this._nativeOscillatorNode.start(when);\n            if (this._oscillatorNodeRenderer !== null) {\n                this._oscillatorNodeRenderer.start = when;\n            }\n            else {\n                setInternalState(this, 'active');\n                const setInternalStateToInactive = () => {\n                    this._nativeOscillatorNode.removeEventListener('ended', setInternalStateToInactive);\n                    // @todo Determine a meaningful delay instead of just using one second.\n                    setTimeout(() => setInternalState(this, 'passive'), 1000);\n                };\n                this._nativeOscillatorNode.addEventListener('ended', setInternalStateToInactive);\n            }\n        }\n        stop(when = 0) {\n            this._nativeOscillatorNode.stop(when);\n            if (this._oscillatorNodeRenderer !== null) {\n                this._oscillatorNodeRenderer.stop = when;\n            }\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/oscillator-node-constructor.js.map","import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { getNativeContext } from '../helpers/get-native-context';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'clamped-max',\n    channelInterpretation: 'speakers',\n    coneInnerAngle: 360,\n    coneOuterAngle: 360,\n    coneOuterGain: 0,\n    distanceModel: 'inverse',\n    maxDistance: 10000,\n    orientationX: 1,\n    orientationY: 0,\n    orientationZ: 0,\n    panningModel: 'equalpower',\n    positionX: 0,\n    positionY: 0,\n    positionZ: 0,\n    refDistance: 1,\n    rolloffFactor: 1\n};\nexport const createPannerNodeConstructor = (createAudioParam, createNativePannerNode, createPannerNodeRenderer, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class PannerNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativePannerNode = createNativePannerNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const pannerNodeRenderer = ((isOffline) ? createPannerNodeRenderer() : null);\n            super(context, 'passive', nativePannerNode, pannerNodeRenderer);\n            this._nativePannerNode = nativePannerNode;\n            // Bug #74: Edge & Safari do not export the correct values for maxValue and minValue for GainNodes.\n            this._orientationX = createAudioParam(this, isOffline, nativePannerNode.orientationX, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            this._orientationY = createAudioParam(this, isOffline, nativePannerNode.orientationY, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            this._orientationZ = createAudioParam(this, isOffline, nativePannerNode.orientationZ, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            this._positionX = createAudioParam(this, isOffline, nativePannerNode.positionX, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            this._positionY = createAudioParam(this, isOffline, nativePannerNode.positionY, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            this._positionZ = createAudioParam(this, isOffline, nativePannerNode.positionZ, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n        }\n        get coneInnerAngle() {\n            return this._nativePannerNode.coneInnerAngle;\n        }\n        set coneInnerAngle(value) {\n            this._nativePannerNode.coneInnerAngle = value;\n        }\n        get coneOuterAngle() {\n            return this._nativePannerNode.coneOuterAngle;\n        }\n        set coneOuterAngle(value) {\n            this._nativePannerNode.coneOuterAngle = value;\n        }\n        get coneOuterGain() {\n            return this._nativePannerNode.coneOuterGain;\n        }\n        set coneOuterGain(value) {\n            this._nativePannerNode.coneOuterGain = value;\n        }\n        get distanceModel() {\n            return this._nativePannerNode.distanceModel;\n        }\n        set distanceModel(value) {\n            this._nativePannerNode.distanceModel = value;\n        }\n        get maxDistance() {\n            return this._nativePannerNode.maxDistance;\n        }\n        set maxDistance(value) {\n            this._nativePannerNode.maxDistance = value;\n        }\n        get orientationX() {\n            return this._orientationX;\n        }\n        get orientationY() {\n            return this._orientationY;\n        }\n        get orientationZ() {\n            return this._orientationZ;\n        }\n        get panningModel() {\n            return this._nativePannerNode.panningModel;\n        }\n        set panningModel(value) {\n            this._nativePannerNode.panningModel = value;\n        }\n        get positionX() {\n            return this._positionX;\n        }\n        get positionY() {\n            return this._positionY;\n        }\n        get positionZ() {\n            return this._positionZ;\n        }\n        get refDistance() {\n            return this._nativePannerNode.refDistance;\n        }\n        set refDistance(value) {\n            this._nativePannerNode.refDistance = value;\n        }\n        get rolloffFactor() {\n            return this._nativePannerNode.rolloffFactor;\n        }\n        set rolloffFactor(value) {\n            this._nativePannerNode.rolloffFactor = value;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/panner-node-constructor.js.map","import { getNativeContext } from '../helpers/get-native-context';\nconst DEFAULT_OPTIONS = {\n    disableNormalization: false\n};\nexport const createPeriodicWaveConstructor = (createNativePeriodicWave) => {\n    return class PeriodicWave {\n        constructor(context, options) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            // This does violate all good pratices but it is used here to simplify the handling of periodic waves.\n            return createNativePeriodicWave(nativeContext, mergedOptions);\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/periodic-wave-constructor.js.map","import { getNativeContext } from '../helpers/get-native-context';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    /*\n     * Bug #105: The channelCountMode should be 'clamped-max' according to the spec but is set to 'explicit' to achieve consistent\n     * behavior.\n     */\n    channelCountMode: 'explicit',\n    channelInterpretation: 'speakers',\n    pan: 0\n};\nexport const createStereoPannerNodeConstructor = (createAudioParam, createNativeStereoPannerNode, createStereoPannerNodeRenderer, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class StereoPannerNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeStereoPannerNode = createNativeStereoPannerNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const stereoPannerNodeRenderer = ((isOffline) ? createStereoPannerNodeRenderer() : null);\n            super(context, 'passive', nativeStereoPannerNode, stereoPannerNodeRenderer);\n            // Bug #106: Edge does not export a maxValue and minValue property.\n            this._pan = createAudioParam(this, isOffline, nativeStereoPannerNode.pan, 1, -1);\n        }\n        get pan() {\n            return this._pan;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/stereo-panner-node-constructor.js.map","export const createUnknownError = () => {\n    try {\n        return new DOMException('', 'UnknownError');\n    }\n    catch (err) {\n        // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.\n        err.name = 'UnknownError';\n        return err;\n    }\n};\n//# sourceMappingURL=/build/es2018/factories/unknown-error.js.map","import { getNativeContext } from '../helpers/get-native-context';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    curve: null,\n    oversample: 'none'\n};\nexport const createWaveShaperNodeConstructor = (createInvalidStateError, createNativeWaveShaperNode, createWaveShaperNodeRenderer, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class WaveShaperNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeWaveShaperNode = createNativeWaveShaperNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const waveShaperNodeRenderer = ((isOffline) ? createWaveShaperNodeRenderer() : null);\n            super(context, 'passive', nativeWaveShaperNode, waveShaperNodeRenderer);\n            this._isCurveNullified = false;\n            this._nativeWaveShaperNode = nativeWaveShaperNode;\n        }\n        get curve() {\n            if (this._isCurveNullified) {\n                return null;\n            }\n            return this._nativeWaveShaperNode.curve;\n        }\n        set curve(value) {\n            // Bug #103: Safari does not allow to set the curve to null.\n            if (value === null) {\n                this._isCurveNullified = true;\n                this._nativeWaveShaperNode.curve = new Float32Array([0, 0]);\n            }\n            else {\n                // Bug #102: Safari does not throw an InvalidStateError when the curve has less than two samples.\n                // Bug #104: Chrome will throw an InvalidAccessError when the curve has less than two samples.\n                if (value.length < 2) {\n                    throw createInvalidStateError();\n                }\n                this._isCurveNullified = false;\n                this._nativeWaveShaperNode.curve = value;\n            }\n        }\n        get oversample() {\n            return this._nativeWaveShaperNode.oversample;\n        }\n        set oversample(value) {\n            this._nativeWaveShaperNode.oversample = value;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/wave-shaper-node-constructor.js.map","import { createCancelAndHoldAutomationEvent, createCancelScheduledValuesAutomationEvent, createExponentialRampToValueAutomationEvent, createLinearRampToValueAutomationEvent, createSetTargetAutomationEvent, createSetValueAutomationEvent, createSetValueCurveAutomationEvent } from 'automation-events';\nimport { createAbortError } from './factories/abort-error';\nimport { createAddAudioWorkletModule } from './factories/add-audio-worklet-module';\nimport { createAnalyserNodeConstructor } from './factories/analyser-node-constructor';\nimport { createAnalyserNodeRendererFactory } from './factories/analyser-node-renderer-factory';\nimport { createAudioBufferConstructor } from './factories/audio-buffer-constructor';\nimport { createAudioBufferSourceNodeConstructor } from './factories/audio-buffer-source-node-constructor';\nimport { createAudioBufferSourceNodeRendererFactory } from './factories/audio-buffer-source-node-renderer-factory';\nimport { createAudioContextConstructor } from './factories/audio-context-constructor';\nimport { createAudioDestinationNodeConstructor } from './factories/audio-destination-node-constructor';\nimport { createAudioDestinationNodeRenderer } from './factories/audio-destination-node-renderer-factory';\nimport { createAudioListenerFactory } from './factories/audio-listener-factory';\nimport { createAudioNodeConstructor } from './factories/audio-node-constructor';\nimport { createAudioParamFactory } from './factories/audio-param-factory';\nimport { createAudioParamRenderer } from './factories/audio-param-renderer';\nimport { createAudioWorkletNodeConstructor } from './factories/audio-worklet-node-constructor';\nimport { createAudioWorkletNodeRendererFactory } from './factories/audio-worklet-node-renderer-factory';\nimport { createBaseAudioContextConstructor } from './factories/base-audio-context-constructor';\nimport { createBiquadFilterNodeConstructor } from './factories/biquad-filter-node-constructor';\nimport { createBiquadFilterNodeRendererFactory } from './factories/biquad-filter-node-renderer-factory';\nimport { createCacheTestResult } from './factories/cache-test-result';\nimport { createChannelMergerNodeConstructor } from './factories/channel-merger-node-constructor';\nimport { createChannelMergerNodeRendererFactory } from './factories/channel-merger-node-renderer-factory';\nimport { createChannelSplitterNodeConstructor } from './factories/channel-splitter-node-constructor';\nimport { createChannelSplitterNodeRendererFactory } from './factories/channel-splitter-node-renderer-factory';\nimport { createConnectMultipleOutputs } from './factories/connect-multiple-outputs';\nimport { createConstantSourceNodeConstructor } from './factories/constant-source-node-constructor';\nimport { createConstantSourceNodeRendererFactory } from './factories/constant-source-node-renderer-factory';\nimport { createConvertNumberToUnsignedLong } from './factories/convert-number-to-unsigned-long';\nimport { createConvolverNodeConstructor } from './factories/convolver-node-constructor';\nimport { createConvolverNodeRendererFactory } from './factories/convolver-node-renderer-factory';\nimport { createCreateNativeOfflineAudioContext } from './factories/create-native-offline-audio-context';\nimport { createDataCloneError } from './factories/data-clone-error';\nimport { createDecodeAudioData } from './factories/decode-audio-data';\nimport { createDelayNodeConstructor } from './factories/delay-node-constructor';\nimport { createDelayNodeRendererFactory } from './factories/delay-node-renderer-factory';\nimport { createDetectCycles } from './factories/detect-cycles';\nimport { createDisconnectMultipleOutputs } from './factories/disconnect-multiple-outputs';\nimport { createDynamicsCompressorNodeConstructor } from './factories/dynamics-compressor-node-constructor';\nimport { createDynamicsCompressorNodeRendererFactory } from './factories/dynamics-compressor-node-renderer-factory';\nimport { createEncodingError } from './factories/encoding-error';\nimport { createExposeCurrentFrameAndCurrentTime } from './factories/expose-current-frame-and-current-time';\nimport { createFetchSource } from './factories/fetch-source';\nimport { createGainNodeConstructor } from './factories/gain-node-constructor';\nimport { createGainNodeRendererFactory } from './factories/gain-node-renderer-factory';\nimport { createGetBackupNativeContext } from './factories/get-backup-native-context';\nimport { createIIRFilterNodeConstructor } from './factories/iir-filter-node-constructor';\nimport { createIIRFilterNodeRendererFactory } from './factories/iir-filter-node-renderer-factory';\nimport { createIndexSizeError } from './factories/index-size-error';\nimport { createInvalidAccessError } from './factories/invalid-access-error';\nimport { createInvalidStateError } from './factories/invalid-state-error';\nimport { createIsAnyAudioContext } from './factories/is-any-audio-context';\nimport { createIsAnyAudioNode } from './factories/is-any-audio-node';\nimport { createIsAnyAudioParam } from './factories/is-any-audio-param';\nimport { createIsAnyOfflineAudioContext } from './factories/is-any-offline-audio-context';\nimport { createIsNativeAudioContext } from './factories/is-native-audio-context';\nimport { createIsNativeAudioNode } from './factories/is-native-audio-node';\nimport { createIsNativeAudioParam } from './factories/is-native-audio-param';\nimport { createIsNativeContext } from './factories/is-native-context';\nimport { createIsNativeOfflineAudioContext } from './factories/is-native-offline-audio-context';\nimport { createIsSecureContext } from './factories/is-secure-context';\nimport { createIsSupportedPromise } from './factories/is-supported-promise';\nimport { createMediaElementAudioSourceNodeConstructor } from './factories/media-element-audio-source-node-constructor';\nimport { createMediaStreamAudioSourceNodeConstructor } from './factories/media-stream-audio-source-node-constructor';\nimport { createMediaStreamTrackAudioSourceNodeConstructor } from './factories/media-stream-track-audio-source-node-constructor';\nimport { createMinimalAudioContextConstructor } from './factories/minimal-audio-context-constructor';\nimport { createMinimalBaseAudioContextConstructor } from './factories/minimal-base-audio-context-constructor';\nimport { createMinimalOfflineAudioContextConstructor } from './factories/minimal-offline-audio-context-constructor';\nimport { createNativeAnalyserNodeFactory } from './factories/native-analyser-node-factory';\nimport { createNativeAudioBufferConstructor } from './factories/native-audio-buffer-constructor';\nimport { createNativeAudioBufferSourceNodeFactory } from './factories/native-audio-buffer-source-node-factory';\nimport { createNativeAudioContextConstructor } from './factories/native-audio-context-constructor';\nimport { createNativeAudioDestinationNode } from './factories/native-audio-destination-node';\nimport { createNativeAudioNodeFactory } from './factories/native-audio-node-factory';\nimport { createNativeAudioWorkletNodeConstructor } from './factories/native-audio-worklet-node-constructor';\nimport { createNativeAudioWorkletNodeFactory } from './factories/native-audio-worklet-node-factory';\nimport { createNativeAudioWorkletNodeFakerFactory } from './factories/native-audio-worklet-node-faker-factory';\nimport { createNativeBiquadFilterNodeFactory } from './factories/native-biquad-filter-node-factory';\nimport { createNativeChannelMergerNodeFactory } from './factories/native-channel-merger-node-factory';\nimport { createNativeChannelSplitterNodeFactory } from './factories/native-channel-splitter-node-factory';\nimport { createNativeConstantSourceNodeFactory } from './factories/native-constant-source-node-factory';\nimport { createNativeConstantSourceNodeFakerFactory } from './factories/native-constant-source-node-faker-factory';\nimport { createNativeConvolverNodeFactory } from './factories/native-convolver-node-factory';\nimport { createNativeDelayNodeFactory } from './factories/native-delay-node-factory';\nimport { createNativeDynamicsCompressorNodeFactory } from './factories/native-dynamics-compressor-node-factory';\nimport { createNativeGainNodeFactory } from './factories/native-gain-node-factory';\nimport { createNativeIIRFilterNodeFactory } from './factories/native-iir-filter-node-factory';\nimport { createNativeIIRFilterNodeFakerFactory } from './factories/native-iir-filter-node-faker-factory';\nimport { createNativeMediaElementAudioSourceNodeFactory } from './factories/native-media-element-audio-source-node-factory';\nimport { createNativeMediaStreamAudioSourceNodeFactory } from './factories/native-media-stream-audio-source-node-factory';\nimport { createNativeMediaStreamTrackAudioSourceNodeFactory } from './factories/native-media-stream-track-audio-source-node-factory';\nimport { createNativeOfflineAudioContextConstructor } from './factories/native-offline-audio-context-constructor';\nimport { createNativeOscillatorNodeFactory } from './factories/native-oscillator-node-factory';\nimport { createNativePannerNodeFactory } from './factories/native-panner-node-factory';\nimport { createNativePannerNodeFakerFactory } from './factories/native-panner-node-faker-factory';\nimport { createNativePeriodicWaveFactory } from './factories/native-periodic-wave-factory';\nimport { createNativeScriptProcessorNodeFactory } from './factories/native-script-processor-node-factory';\nimport { createNativeStereoPannerNodeFactory } from './factories/native-stereo-panner-node-factory';\nimport { createNativeStereoPannerNodeFakerFactory } from './factories/native-stereo-panner-node-faker-factory';\nimport { createNativeWaveShaperNodeFactory } from './factories/native-wave-shaper-node-factory';\nimport { createNativeWaveShaperNodeFakerFactory } from './factories/native-wave-shaper-node-faker-factory';\nimport { createNoneAudioDestinationNodeConstructor } from './factories/none-audio-destination-node-constructor';\nimport { createNotSupportedError } from './factories/not-supported-error';\nimport { createOfflineAudioContextConstructor } from './factories/offline-audio-context-constructor';\nimport { createOscillatorNodeConstructor } from './factories/oscillator-node-constructor';\nimport { createOscillatorNodeRendererFactory } from './factories/oscillator-node-renderer-factory';\nimport { createPannerNodeConstructor } from './factories/panner-node-constructor';\nimport { createPannerNodeRendererFactory } from './factories/panner-node-renderer-factory';\nimport { createPeriodicWaveConstructor } from './factories/periodic-wave-constructor';\nimport { createRenderNativeOfflineAudioContext } from './factories/render-native-offline-audio-context';\nimport { createStartRendering } from './factories/start-rendering';\nimport { createStereoPannerNodeConstructor } from './factories/stereo-panner-node-constructor';\nimport { createStereoPannerNodeRendererFactory } from './factories/stereo-panner-node-renderer-factory';\nimport { createTestAudioBufferConstructorSupport } from './factories/test-audio-buffer-constructor-support';\nimport { createTestAudioBufferSourceNodeStartMethodConsecutiveCallsSupport } from './factories/test-audio-buffer-source-node-start-method-consecutive-calls-support';\nimport { createTestAudioBufferSourceNodeStartMethodDurationParameterSupport } from './factories/test-audio-buffer-source-node-start-method-duration-parameter-support';\nimport { createTestAudioBufferSourceNodeStartMethodOffsetClampingSupport } from './factories/test-audio-buffer-source-node-start-method-offset-clamping-support';\nimport { createTestAudioContextCloseMethodSupport } from './factories/test-audio-context-close-method-support';\nimport { createTestAudioContextDecodeAudioDataMethodTypeErrorSupport } from './factories/test-audio-context-decode-audio-data-method-type-error-support';\nimport { createTestAudioContextOptionsSupport } from './factories/test-audio-context-options-support';\nimport { createTestAudioScheduledSourceNodeStartMethodNegativeParametersSupport } from './factories/test-audio-scheduled-source-node-start-method-negative-parameters-support';\nimport { createTestAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport } from './factories/test-audio-scheduled-source-node-stop-method-consecutive-calls-support';\nimport { createTestAudioScheduledSourceNodeStopMethodNegativeParametersSupport } from './factories/test-audio-scheduled-source-node-stop-method-negative-parameters-support';\nimport { createTestAudioWorkletProcessorNoOutputsSupport } from './factories/test-audio-worklet-processor-no-outputs-support';\nimport { createTestChannelSplitterNodeChannelCountSupport } from './factories/test-channel-splitter-node-channel-count-support';\nimport { createTestConstantSourceNodeAccurateSchedulingSupport } from './factories/test-constant-source-node-accurate-scheduling-support';\nimport { createTestConvolverNodeBufferReassignabilitySupport } from './factories/test-convolver-node-buffer-reassignability-support';\nimport { createTestIsSecureContextSupport } from './factories/test-is-secure-context-support';\nimport { createTestOfflineAudioContextCurrentTimeSupport } from './factories/test-offline-audio-context-current-time-support';\nimport { createTestStereoPannerNodeDefaultValueSupport } from './factories/test-stereo-panner-node-default-value-support';\nimport { createUnknownError } from './factories/unknown-error';\nimport { createWaveShaperNodeConstructor } from './factories/wave-shaper-node-constructor';\nimport { createWaveShaperNodeRendererFactory } from './factories/wave-shaper-node-renderer-factory';\nimport { createWindow } from './factories/window';\nimport { createWrapAudioBufferCopyChannelMethods } from './factories/wrap-audio-buffer-copy-channel-methods';\nimport { createWrapAudioBufferCopyChannelMethodsOutOfBounds } from './factories/wrap-audio-buffer-copy-channel-methods-out-of-bounds';\nimport { createWrapAudioBufferCopyChannelMethodsSubarray } from './factories/wrap-audio-buffer-copy-channel-methods-subarray';\nimport { createWrapAudioScheduledSourceNodeStopMethodConsecutiveCalls } from './factories/wrap-audio-scheduled-source-node-stop-method-consecutive-calls';\nimport { createWrapChannelMergerNode } from './factories/wrap-channel-merger-node';\nimport { AUDIO_NODE_STORE, AUDIO_PARAM_AUDIO_NODE_STORE, AUDIO_PARAM_STORE, CONTEXT_STORE } from './globals';\nimport { getAudioNodeConnections } from './helpers/get-audio-node-connections';\nimport { getValueForKey } from './helpers/get-value-for-key';\nimport { testAudioBufferCopyChannelMethodsOutOfBoundsSupport } from './helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support';\nimport { testAudioBufferCopyChannelMethodsSubarraySupport } from './helpers/test-audio-buffer-copy-channel-methods-subarray-support';\nimport { testPromiseSupport } from './helpers/test-promise-support';\nimport { testTransferablesSupport } from './helpers/test-transferables-support';\nimport { wrapAudioBufferSourceNodeStartMethodOffsetClamping } from './helpers/wrap-audio-buffer-source-node-start-method-offset-clamping';\nconst cacheTestResult = createCacheTestResult(new Map());\nconst window = createWindow();\nconst nativeOfflineAudioContextConstructor = createNativeOfflineAudioContextConstructor(window);\nconst isNativeOfflineAudioContext = createIsNativeOfflineAudioContext(nativeOfflineAudioContextConstructor);\nconst nativeAudioContextConstructor = createNativeAudioContextConstructor(window);\nconst getBackupNativeContext = createGetBackupNativeContext(isNativeOfflineAudioContext, nativeAudioContextConstructor, nativeOfflineAudioContextConstructor);\nconst createNativeAudioNode = createNativeAudioNodeFactory(getBackupNativeContext);\nconst createNativeAnalyserNode = createNativeAnalyserNodeFactory(cacheTestResult, createIndexSizeError, createNativeAudioNode);\nconst createAnalyserNodeRenderer = createAnalyserNodeRendererFactory(createNativeAnalyserNode);\nconst isNativeAudioNode = createIsNativeAudioNode(window);\nconst isNativeAudioParam = createIsNativeAudioParam(window);\nconst audioNodeConstructor = createAudioNodeConstructor(cacheTestResult, createIndexSizeError, createInvalidAccessError, createNotSupportedError, createDetectCycles(AUDIO_PARAM_AUDIO_NODE_STORE, createNotSupportedError, getAudioNodeConnections, getValueForKey), isNativeAudioNode, isNativeAudioParam, isNativeOfflineAudioContext);\nconst noneAudioDestinationNodeConstructor = createNoneAudioDestinationNodeConstructor(audioNodeConstructor);\nconst analyserNodeConstructor = createAnalyserNodeConstructor(createAnalyserNodeRenderer, createIndexSizeError, createNativeAnalyserNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nexport { analyserNodeConstructor as AnalyserNode };\nconst nativeAudioBufferConstructor = createNativeAudioBufferConstructor(window);\nconst convertNumberToUnsignedLong = createConvertNumberToUnsignedLong(new Uint32Array(1));\nconst wrapAudioBufferCopyChannelMethods = createWrapAudioBufferCopyChannelMethods(convertNumberToUnsignedLong, createIndexSizeError);\nconst wrapAudioBufferCopyChannelMethodsOutOfBounds = createWrapAudioBufferCopyChannelMethodsOutOfBounds(convertNumberToUnsignedLong);\nconst wrapAudioBufferCopyChannelMethodsSubarray = createWrapAudioBufferCopyChannelMethodsSubarray(convertNumberToUnsignedLong, createIndexSizeError);\nconst audioBufferConstructor = createAudioBufferConstructor(cacheTestResult, createNotSupportedError, nativeAudioBufferConstructor, nativeOfflineAudioContextConstructor, createTestAudioBufferConstructorSupport(nativeAudioBufferConstructor), wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds, wrapAudioBufferCopyChannelMethodsSubarray);\nexport { audioBufferConstructor as AudioBuffer };\nconst testAudioScheduledSourceNodeStartMethodNegativeParametersSupport = createTestAudioScheduledSourceNodeStartMethodNegativeParametersSupport(createNativeAudioNode);\nconst testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport = createTestAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport(createNativeAudioNode);\nconst testAudioScheduledSourceNodeStopMethodNegativeParametersSupport = createTestAudioScheduledSourceNodeStopMethodNegativeParametersSupport(createNativeAudioNode);\nconst wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls = createWrapAudioScheduledSourceNodeStopMethodConsecutiveCalls(createNativeAudioNode);\nconst createNativeAudioBufferSourceNode = createNativeAudioBufferSourceNodeFactory(cacheTestResult, createNativeAudioNode, createTestAudioBufferSourceNodeStartMethodConsecutiveCallsSupport(createNativeAudioNode), createTestAudioBufferSourceNodeStartMethodDurationParameterSupport(nativeOfflineAudioContextConstructor), createTestAudioBufferSourceNodeStartMethodOffsetClampingSupport(createNativeAudioNode), testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioBufferSourceNodeStartMethodOffsetClamping, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls);\nconst createAudioBufferSourceNodeRenderer = createAudioBufferSourceNodeRendererFactory(createNativeAudioBufferSourceNode);\nconst createAudioParam = createAudioParamFactory(createAudioParamRenderer, createCancelAndHoldAutomationEvent, createCancelScheduledValuesAutomationEvent, createExponentialRampToValueAutomationEvent, createLinearRampToValueAutomationEvent, createSetTargetAutomationEvent, createSetValueAutomationEvent, createSetValueCurveAutomationEvent, nativeAudioContextConstructor);\nconst audioBufferSourceNodeConstructor = createAudioBufferSourceNodeConstructor(createAudioBufferSourceNodeRenderer, createAudioParam, createInvalidStateError, createNativeAudioBufferSourceNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nexport { audioBufferSourceNodeConstructor as AudioBufferSourceNode };\nconst audioDestinationNodeConstructor = createAudioDestinationNodeConstructor(audioNodeConstructor, createAudioDestinationNodeRenderer, createIndexSizeError, createInvalidStateError, createNativeAudioDestinationNode, isNativeOfflineAudioContext);\nconst createNativeBiquadFilterNode = createNativeBiquadFilterNodeFactory(createNativeAudioNode);\nconst createBiquadFilterNodeRenderer = createBiquadFilterNodeRendererFactory(createNativeBiquadFilterNode);\nconst biquadFilterNodeConstructor = createBiquadFilterNodeConstructor(createAudioParam, createBiquadFilterNodeRenderer, createInvalidAccessError, createNativeBiquadFilterNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nconst wrapChannelMergerNode = createWrapChannelMergerNode(createInvalidStateError, createNativeAudioNode);\nconst createNativeChannelMergerNode = createNativeChannelMergerNodeFactory(createNativeAudioNode, wrapChannelMergerNode);\nconst createChannelMergerNodeRenderer = createChannelMergerNodeRendererFactory(createNativeChannelMergerNode);\nconst channelMergerNodeConstructor = createChannelMergerNodeConstructor(createChannelMergerNodeRenderer, createNativeChannelMergerNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nconst createNativeChannelSplitterNode = createNativeChannelSplitterNodeFactory(createNativeAudioNode);\nconst createChannelSplitterNodeRenderer = createChannelSplitterNodeRendererFactory(createNativeChannelSplitterNode);\nconst channelSplitterNodeConstructor = createChannelSplitterNodeConstructor(createChannelSplitterNodeRenderer, createNativeChannelSplitterNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nconst createNativeGainNode = createNativeGainNodeFactory(createNativeAudioNode);\nconst createNativeConstantSourceNodeFaker = createNativeConstantSourceNodeFakerFactory(createNativeAudioBufferSourceNode, createNativeGainNode);\nconst createNativeConstantSourceNode = createNativeConstantSourceNodeFactory(cacheTestResult, createNativeAudioNode, createNativeConstantSourceNodeFaker, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport);\nconst createConstantSourceNodeRenderer = createConstantSourceNodeRendererFactory(createNativeConstantSourceNode);\nconst constantSourceNodeConstructor = createConstantSourceNodeConstructor(createAudioParam, createConstantSourceNodeRenderer, createNativeConstantSourceNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nconst createNativeConvolverNode = createNativeConvolverNodeFactory(createNativeAudioNode, createNotSupportedError);\nconst createConvolverNodeRenderer = createConvolverNodeRendererFactory(createNativeConvolverNode);\nconst convolverNodeConstructor = createConvolverNodeConstructor(createConvolverNodeRenderer, createNativeConvolverNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nconst createNativeDelayNode = createNativeDelayNodeFactory(createNativeAudioNode);\nconst createDelayNodeRenderer = createDelayNodeRendererFactory(createNativeDelayNode);\nconst delayNodeConstructor = createDelayNodeConstructor(createAudioParam, createDelayNodeRenderer, createNativeDelayNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nconst createNativeDynamicsCompressorNode = createNativeDynamicsCompressorNodeFactory(createNativeAudioNode, createNotSupportedError);\nconst createDynamicsCompressorNodeRenderer = createDynamicsCompressorNodeRendererFactory(createNativeDynamicsCompressorNode);\nconst dynamicsCompressorNodeConstructor = createDynamicsCompressorNodeConstructor(createAudioParam, createDynamicsCompressorNodeRenderer, createNativeDynamicsCompressorNode, createNotSupportedError, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nconst createGainNodeRenderer = createGainNodeRendererFactory(createNativeGainNode);\nconst gainNodeConstructor = createGainNodeConstructor(createAudioParam, createGainNodeRenderer, createNativeGainNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nconst createNativeScriptProcessorNode = createNativeScriptProcessorNodeFactory(createNativeAudioNode);\nconst createNativeIIRFilterNodeFaker = createNativeIIRFilterNodeFakerFactory(createInvalidAccessError, createInvalidStateError, createNativeScriptProcessorNode, createNotSupportedError);\nconst renderNativeOfflineAudioContext = createRenderNativeOfflineAudioContext(cacheTestResult, createNativeGainNode, createNativeScriptProcessorNode, createTestOfflineAudioContextCurrentTimeSupport(createNativeGainNode, nativeOfflineAudioContextConstructor));\nconst createIIRFilterNodeRenderer = createIIRFilterNodeRendererFactory(createNativeAudioBufferSourceNode, createNativeAudioNode, nativeOfflineAudioContextConstructor, renderNativeOfflineAudioContext);\nconst createNativeIIRFilterNode = createNativeIIRFilterNodeFactory(createNativeAudioNode, createNativeIIRFilterNodeFaker);\nconst iIRFilterNodeConstructor = createIIRFilterNodeConstructor(createNativeIIRFilterNode, createIIRFilterNodeRenderer, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nconst createAudioListener = createAudioListenerFactory(createAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeScriptProcessorNode, isNativeOfflineAudioContext);\nconst minimalBaseAudioContextConstructor = createMinimalBaseAudioContextConstructor(audioDestinationNodeConstructor, createAudioListener);\nconst createNativeOscillatorNode = createNativeOscillatorNodeFactory(cacheTestResult, createNativeAudioNode, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls);\nconst createOscillatorNodeRenderer = createOscillatorNodeRendererFactory(createNativeOscillatorNode);\nconst oscillatorNodeConstructor = createOscillatorNodeConstructor(createAudioParam, createInvalidStateError, createNativeOscillatorNode, createOscillatorNodeRenderer, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nconst createNativeWaveShaperNodeFaker = createNativeWaveShaperNodeFakerFactory(createInvalidStateError, createNativeAudioNode, createNativeGainNode);\nconst createNativeWaveShaperNode = createNativeWaveShaperNodeFactory(createInvalidStateError, createNativeAudioNode, createNativeWaveShaperNodeFaker);\nconst createNativePannerNodeFaker = createNativePannerNodeFakerFactory(createInvalidStateError, createNativeAudioNode, createNativeChannelMergerNode, createNativeGainNode, createNativeScriptProcessorNode, createNativeWaveShaperNode, createNotSupportedError);\nconst createNativePannerNode = createNativePannerNodeFactory(createNativeAudioNode, createNativePannerNodeFaker);\nconst createPannerNodeRenderer = createPannerNodeRendererFactory(createNativePannerNode);\nconst pannerNodeConstructor = createPannerNodeConstructor(createAudioParam, createNativePannerNode, createPannerNodeRenderer, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nconst createNativePeriodicWave = createNativePeriodicWaveFactory(getBackupNativeContext);\nconst periodicWaveConstructor = createPeriodicWaveConstructor(createNativePeriodicWave);\nconst nativeStereoPannerNodeFakerFactory = createNativeStereoPannerNodeFakerFactory(createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeGainNode, createNativeWaveShaperNode, createNotSupportedError);\nconst createNativeStereoPannerNode = createNativeStereoPannerNodeFactory(createNativeAudioNode, nativeStereoPannerNodeFakerFactory, createNotSupportedError);\nconst createStereoPannerNodeRenderer = createStereoPannerNodeRendererFactory(createNativeStereoPannerNode);\nconst stereoPannerNodeConstructor = createStereoPannerNodeConstructor(createAudioParam, createNativeStereoPannerNode, createStereoPannerNodeRenderer, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nconst createWaveShaperNodeRenderer = createWaveShaperNodeRendererFactory(createNativeWaveShaperNode);\nconst waveShaperNodeConstructor = createWaveShaperNodeConstructor(createInvalidStateError, createNativeWaveShaperNode, createWaveShaperNodeRenderer, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nconst isSecureContext = createIsSecureContext(window);\nconst exposeCurrentFrameAndCurrentTime = createExposeCurrentFrameAndCurrentTime(window);\n// The addAudioWorkletModule() function is only available in a SecureContext.\nexport const addAudioWorkletModule = (isSecureContext) ?\n    createAddAudioWorkletModule(createAbortError, createNotSupportedError, exposeCurrentFrameAndCurrentTime, createFetchSource(createAbortError), getBackupNativeContext, new WeakMap(), new WeakMap()) :\n    undefined;\nconst isNativeAudioContext = createIsNativeAudioContext(nativeAudioContextConstructor);\nconst isNativeContext = createIsNativeContext(isNativeAudioContext, isNativeOfflineAudioContext);\nexport const decodeAudioData = createDecodeAudioData(cacheTestResult, createDataCloneError, createEncodingError, nativeOfflineAudioContextConstructor, isNativeContext, isNativeOfflineAudioContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, testAudioBufferCopyChannelMethodsSubarraySupport, testPromiseSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds, wrapAudioBufferCopyChannelMethodsSubarray);\nconst baseAudioContextConstructor = createBaseAudioContextConstructor(addAudioWorkletModule, analyserNodeConstructor, audioBufferConstructor, audioBufferSourceNodeConstructor, biquadFilterNodeConstructor, channelMergerNodeConstructor, channelSplitterNodeConstructor, constantSourceNodeConstructor, convolverNodeConstructor, decodeAudioData, delayNodeConstructor, dynamicsCompressorNodeConstructor, gainNodeConstructor, iIRFilterNodeConstructor, minimalBaseAudioContextConstructor, oscillatorNodeConstructor, pannerNodeConstructor, periodicWaveConstructor, stereoPannerNodeConstructor, waveShaperNodeConstructor);\nconst createNativeMediaElementAudioSourceNode = createNativeMediaElementAudioSourceNodeFactory(createNativeAudioNode);\nconst mediaElementAudioSourceNodeConstructor = createMediaElementAudioSourceNodeConstructor(createNativeMediaElementAudioSourceNode, createNotSupportedError, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nconst createNativeMediaStreamAudioSourceNode = createNativeMediaStreamAudioSourceNodeFactory(createInvalidStateError, createNativeAudioNode);\nconst mediaStreamAudioSourceNodeConstructor = createMediaStreamAudioSourceNodeConstructor(createNativeMediaStreamAudioSourceNode, createNotSupportedError, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nconst createNativeMediaStreamTrackAudioSourceNode = createNativeMediaStreamTrackAudioSourceNodeFactory(createInvalidStateError, createNativeAudioNode);\nconst mediaStreamTrackAudioSourceNodeConstructor = createMediaStreamTrackAudioSourceNodeConstructor(createNativeMediaStreamTrackAudioSourceNode, createNotSupportedError, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nconst audioContextConstructor = createAudioContextConstructor(baseAudioContextConstructor, createInvalidStateError, createNotSupportedError, createUnknownError, mediaElementAudioSourceNodeConstructor, mediaStreamAudioSourceNodeConstructor, mediaStreamTrackAudioSourceNodeConstructor, nativeAudioContextConstructor);\nexport { audioContextConstructor as AudioContext };\nconst connectMultipleOutputs = createConnectMultipleOutputs(createIndexSizeError);\nconst disconnectMultipleOutputs = createDisconnectMultipleOutputs(createIndexSizeError);\nconst createNativeAudioWorkletNodeFaker = createNativeAudioWorkletNodeFakerFactory(connectMultipleOutputs, createIndexSizeError, createInvalidStateError, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, createNativeScriptProcessorNode, createNotSupportedError, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime);\nconst createNativeAudioWorkletNode = createNativeAudioWorkletNodeFactory(createInvalidStateError, createNativeAudioNode, createNativeAudioWorkletNodeFaker, createNotSupportedError, isNativeOfflineAudioContext);\nconst nativeAudioWorkletNodeConstructor = createNativeAudioWorkletNodeConstructor(window);\nconst createAudioWorkletNodeRenderer = createAudioWorkletNodeRendererFactory(connectMultipleOutputs, createNativeAudioBufferSourceNode, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, disconnectMultipleOutputs, nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor, renderNativeOfflineAudioContext);\n// The AudioWorkletNode constructor is only available in a SecureContext.\nconst audioWorkletNodeConstructor = (isSecureContext) ?\n    createAudioWorkletNodeConstructor(createAudioParam, createAudioWorkletNodeRenderer, createNativeAudioWorkletNode, gainNodeConstructor, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor, noneAudioDestinationNodeConstructor) :\n    undefined;\nexport { audioWorkletNodeConstructor as AudioWorkletNode };\nexport { biquadFilterNodeConstructor as BiquadFilterNode };\nexport { channelMergerNodeConstructor as ChannelMergerNode };\nexport { channelSplitterNodeConstructor as ChannelSplitterNode };\nexport { convolverNodeConstructor as ConvolverNode };\nexport { constantSourceNodeConstructor as ConstantSourceNode };\nexport { delayNodeConstructor as DelayNode };\nexport { dynamicsCompressorNodeConstructor as DynamicsCompressorNode };\nexport { gainNodeConstructor as GainNode };\nexport { iIRFilterNodeConstructor as IIRFilterNode };\nexport { mediaElementAudioSourceNodeConstructor as MediaElementAudioSourceNode };\nexport { mediaStreamAudioSourceNodeConstructor as MediaStreamAudioSourceNode };\nexport { mediaStreamTrackAudioSourceNodeConstructor as MediaStreamTrackAudioSourceNode };\nconst minimalAudioContextConstructor = createMinimalAudioContextConstructor(createInvalidStateError, createNotSupportedError, createUnknownError, minimalBaseAudioContextConstructor, nativeAudioContextConstructor);\nexport { minimalAudioContextConstructor as MinimalAudioContext };\nconst createNativeOfflineAudioContext = createCreateNativeOfflineAudioContext(createNotSupportedError, nativeOfflineAudioContextConstructor);\nconst startRendering = createStartRendering(cacheTestResult, renderNativeOfflineAudioContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, testAudioBufferCopyChannelMethodsSubarraySupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds, wrapAudioBufferCopyChannelMethodsSubarray);\nconst minimalOfflineAudioContextConstructor = createMinimalOfflineAudioContextConstructor(cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, minimalBaseAudioContextConstructor, startRendering);\nexport { minimalOfflineAudioContextConstructor as MinimalOfflineAudioContext };\nconst offlineAudioContextConstructor = createOfflineAudioContextConstructor(baseAudioContextConstructor, cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, startRendering);\nexport { offlineAudioContextConstructor as OfflineAudioContext };\nexport { oscillatorNodeConstructor as OscillatorNode };\nexport { pannerNodeConstructor as PannerNode };\nexport { periodicWaveConstructor as PeriodicWave };\nexport { stereoPannerNodeConstructor as StereoPannerNode };\nexport { waveShaperNodeConstructor as WaveShaperNode };\nexport const isAnyAudioContext = createIsAnyAudioContext(CONTEXT_STORE, isNativeAudioContext);\nexport const isAnyAudioNode = createIsAnyAudioNode(AUDIO_NODE_STORE, isNativeAudioNode);\nexport const isAnyAudioParam = createIsAnyAudioParam(AUDIO_PARAM_STORE, isNativeAudioParam);\nexport const isAnyOfflineAudioContext = createIsAnyOfflineAudioContext(CONTEXT_STORE, isNativeOfflineAudioContext);\nexport const isSupported = () => createIsSupportedPromise(cacheTestResult, createTestAudioContextCloseMethodSupport(nativeAudioContextConstructor), createTestAudioContextDecodeAudioDataMethodTypeErrorSupport(nativeOfflineAudioContextConstructor), createTestAudioContextOptionsSupport(nativeAudioContextConstructor), createTestAudioWorkletProcessorNoOutputsSupport(nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor), createTestChannelSplitterNodeChannelCountSupport(nativeOfflineAudioContextConstructor), createTestConstantSourceNodeAccurateSchedulingSupport(createNativeAudioNode, nativeOfflineAudioContextConstructor), createTestConvolverNodeBufferReassignabilitySupport(nativeOfflineAudioContextConstructor), createTestIsSecureContextSupport(window), createTestStereoPannerNodeDefaultValueSupport(nativeOfflineAudioContextConstructor), testTransferablesSupport);\n//# sourceMappingURL=/build/es2018/module.js.map","import { TEST_RESULTS } from '../globals';\nexport const createCacheTestResult = (ongoingTests) => {\n    return (tester, test) => {\n        const cachedTestResult = TEST_RESULTS.get(tester);\n        if (cachedTestResult !== undefined) {\n            return cachedTestResult;\n        }\n        const ongoingTest = ongoingTests.get(tester);\n        if (ongoingTest !== undefined) {\n            return ongoingTest;\n        }\n        const synchronousTestResult = test();\n        if (synchronousTestResult instanceof Promise) {\n            ongoingTests.set(tester, synchronousTestResult);\n            return synchronousTestResult\n                .then((finalTestResult) => {\n                ongoingTests.delete(tester);\n                TEST_RESULTS.set(tester, finalTestResult);\n                return finalTestResult;\n            });\n        }\n        TEST_RESULTS.set(tester, synchronousTestResult);\n        return synchronousTestResult;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/cache-test-result.js.map","export const createWindow = () => (typeof window === 'undefined') ? null : window;\n//# sourceMappingURL=/build/es2018/factories/window.js.map","export const createNativeOfflineAudioContextConstructor = (window) => {\n    if (window === null) {\n        return null;\n    }\n    if (window.hasOwnProperty('OfflineAudioContext')) {\n        return window.OfflineAudioContext;\n    }\n    return (window.hasOwnProperty('webkitOfflineAudioContext')) ? window.webkitOfflineAudioContext : null;\n};\n//# sourceMappingURL=/build/es2018/factories/native-offline-audio-context-constructor.js.map","export const createIsNativeOfflineAudioContext = (nativeOfflineAudioContextConstructor) => {\n    return (anything) => {\n        return (nativeOfflineAudioContextConstructor !== null && anything instanceof nativeOfflineAudioContextConstructor);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/is-native-offline-audio-context.js.map","export const createNativeAudioContextConstructor = (window) => {\n    if (window === null) {\n        return null;\n    }\n    if (window.hasOwnProperty('AudioContext')) {\n        return window.AudioContext;\n    }\n    return (window.hasOwnProperty('webkitAudioContext')) ? window.webkitAudioContext : null;\n};\n//# sourceMappingURL=/build/es2018/factories/native-audio-context-constructor.js.map","import { BACKUP_NATIVE_CONTEXT_STORE } from '../globals';\nexport const createGetBackupNativeContext = (isNativeOfflineAudioContext, nativeAudioContextConstructor, nativeOfflineAudioContextConstructor) => {\n    return (nativeContext) => {\n        /*\n         * Bug #50: Only Edge does currently not allow to create AudioNodes on a closed context yet which is why there needs to be no\n         * backupNativeContext in that case.\n         */\n        if (nativeContext.state === 'closed'\n            && nativeAudioContextConstructor !== null\n            && nativeAudioContextConstructor.name !== 'webkitAudioContext') {\n            if (isNativeOfflineAudioContext(nativeContext)) {\n                const backupNativeContext = BACKUP_NATIVE_CONTEXT_STORE.get(nativeContext);\n                if (backupNativeContext !== undefined) {\n                    return backupNativeContext;\n                }\n                if (nativeOfflineAudioContextConstructor !== null) {\n                    // @todo Copy the attached AudioWorkletProcessors and other settings.\n                    const bckpNtveCntxt = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n                    BACKUP_NATIVE_CONTEXT_STORE.set(nativeContext, bckpNtveCntxt);\n                    return bckpNtveCntxt;\n                }\n            }\n            else {\n                const backupNativeContext = BACKUP_NATIVE_CONTEXT_STORE.get(nativeContext);\n                if (backupNativeContext !== undefined) {\n                    return backupNativeContext;\n                }\n                // @todo Copy the attached AudioWorkletProcessors and other settings.\n                const bckpNtveCntxt = new nativeAudioContextConstructor();\n                BACKUP_NATIVE_CONTEXT_STORE.set(nativeContext, bckpNtveCntxt);\n                return bckpNtveCntxt;\n            }\n        }\n        return null;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/get-backup-native-context.js.map","export const createNativeAudioNodeFactory = (getBackupNativeContext) => {\n    return (nativeContext, factoryFunction) => {\n        // Bug #50: Only Edge does currently not allow to create AudioNodes on a closed context yet.\n        const backupNativeContext = getBackupNativeContext(nativeContext);\n        if (backupNativeContext !== null) {\n            return factoryFunction(backupNativeContext);\n        }\n        return factoryFunction(nativeContext);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-audio-node-factory.js.map","import { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { testAnalyserNodeGetFloatTimeDomainDataMethodSupport } from '../helpers/test-analyser-node-get-float-time-domain-data-method-support';\nimport { wrapAnalyserNodeGetFloatTimeDomainDataMethod } from '../helpers/wrap-analyser-node-get-float-time-domain-data-method';\nexport const createNativeAnalyserNodeFactory = (cacheTestResult, createIndexSizeError, createNativeAudioNode) => {\n    return (nativeContext, options) => {\n        const nativeAnalyserNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createAnalyser());\n        // Bug #37: Firefox does not create an AnalyserNode with the default properties.\n        assignNativeAudioNodeOptions(nativeAnalyserNode, options);\n        // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.\n        if (!(options.maxDecibels > options.minDecibels)) {\n            throw createIndexSizeError();\n        }\n        assignNativeAudioNodeOption(nativeAnalyserNode, options, 'fftSize');\n        assignNativeAudioNodeOption(nativeAnalyserNode, options, 'maxDecibels');\n        assignNativeAudioNodeOption(nativeAnalyserNode, options, 'minDecibels');\n        assignNativeAudioNodeOption(nativeAnalyserNode, options, 'smoothingTimeConstant');\n        // Bug #36: Safari does not support getFloatTimeDomainData() yet.\n        if (!cacheTestResult(testAnalyserNodeGetFloatTimeDomainDataMethodSupport, () => testAnalyserNodeGetFloatTimeDomainDataMethodSupport(nativeAnalyserNode))) {\n            wrapAnalyserNodeGetFloatTimeDomainDataMethod(nativeAnalyserNode);\n        }\n        return nativeAnalyserNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-analyser-node-factory.js.map","export const wrapAnalyserNodeGetFloatTimeDomainDataMethod = (nativeAnalyserNode) => {\n    nativeAnalyserNode.getFloatTimeDomainData = (array) => {\n        const byteTimeDomainData = new Uint8Array(array.length);\n        nativeAnalyserNode.getByteTimeDomainData(byteTimeDomainData);\n        const length = Math.max(byteTimeDomainData.length, nativeAnalyserNode.fftSize);\n        for (let i = 0; i < length; i += 1) {\n            array[i] = (byteTimeDomainData[i] - 128) * 0.0078125;\n        }\n        return array;\n    };\n};\n//# sourceMappingURL=/build/es2018/helpers/wrap-analyser-node-get-float-time-domain-data-method.js.map","import { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nexport const createAnalyserNodeRendererFactory = (createNativeAnalyserNode) => {\n    return () => {\n        const renderedNativeAnalyserNodes = new WeakMap();\n        const createAnalyserNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeAnalyserNode = getNativeAudioNode(proxy);\n            // If the initially used nativeAnalyserNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeAnalyserNodeIsOwnedByContext = isOwnedByContext(nativeAnalyserNode, nativeOfflineAudioContext);\n            if (!nativeAnalyserNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeAnalyserNode.channelCount,\n                    channelCountMode: nativeAnalyserNode.channelCountMode,\n                    channelInterpretation: nativeAnalyserNode.channelInterpretation,\n                    fftSize: nativeAnalyserNode.fftSize,\n                    maxDecibels: nativeAnalyserNode.maxDecibels,\n                    minDecibels: nativeAnalyserNode.minDecibels,\n                    smoothingTimeConstant: nativeAnalyserNode.smoothingTimeConstant\n                };\n                nativeAnalyserNode = createNativeAnalyserNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeAnalyserNodes.set(nativeOfflineAudioContext, nativeAnalyserNode);\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAnalyserNode);\n            return nativeAnalyserNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeAnalyserNode = renderedNativeAnalyserNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeAnalyserNode !== undefined) {\n                    return Promise.resolve(renderedNativeAnalyserNode);\n                }\n                return createAnalyserNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/analyser-node-renderer-factory.js.map","export const createIsNativeAudioNode = (window) => {\n    return (anything) => {\n        return (window !== null && typeof window.AudioNode === 'function' && anything instanceof window.AudioNode);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/is-native-audio-node.js.map","export const createIsNativeAudioParam = (window) => {\n    return (anything) => {\n        return (window !== null && typeof window.AudioParam === 'function' && anything instanceof window.AudioParam);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/is-native-audio-param.js.map","import { isNativeAudioNode } from '../guards/native-audio-node';\nexport const wrapAudioNodeDisconnectMethod = (nativeAudioNode) => {\n    const connections = new Map();\n    nativeAudioNode.connect = ((connect) => {\n        return (destination, output = 0, input = 0) => {\n            const returnValue = (isNativeAudioNode(destination))\n                ? connect(destination, output, input)\n                : connect(destination, output);\n            // Save the new connection only if the calls to connect above didn't throw an error.\n            const connectionsToDestination = connections.get(destination);\n            if (connectionsToDestination === undefined) {\n                connections.set(destination, [{ input, output }]);\n            }\n            else {\n                if (connectionsToDestination.every((connection) => (connection.input !== input || connection.output !== output))) {\n                    connectionsToDestination.push({ input, output });\n                }\n            }\n            return returnValue;\n        };\n    })(nativeAudioNode.connect.bind(nativeAudioNode));\n    nativeAudioNode.disconnect = ((disconnect) => {\n        return (destinationOrOutput, output, input) => {\n            disconnect.apply(nativeAudioNode);\n            if (destinationOrOutput === undefined) {\n                connections.clear();\n            }\n            else if (typeof destinationOrOutput === 'number') {\n                for (const [destination, connectionsToDestination] of connections) {\n                    const filteredConnections = connectionsToDestination\n                        .filter((connection) => (connection.output !== destinationOrOutput));\n                    if (filteredConnections.length === 0) {\n                        connections.delete(destination);\n                    }\n                    else {\n                        connections.set(destination, filteredConnections);\n                    }\n                }\n            }\n            else if (connections.has(destinationOrOutput)) {\n                if (output === undefined) {\n                    connections.delete(destinationOrOutput);\n                }\n                else {\n                    const connectionsToDestination = connections.get(destinationOrOutput);\n                    if (connectionsToDestination !== undefined) {\n                        const filteredConnections = connectionsToDestination\n                            .filter((connection) => (connection.output !== output && (connection.input !== input || input === undefined)));\n                        if (filteredConnections.length === 0) {\n                            connections.delete(destinationOrOutput);\n                        }\n                        else {\n                            connections.set(destinationOrOutput, filteredConnections);\n                        }\n                    }\n                }\n            }\n            for (const [destination, connectionsToDestination] of connections) {\n                connectionsToDestination\n                    .forEach((connection) => {\n                    if (isNativeAudioNode(destination)) {\n                        nativeAudioNode.connect(destination, connection.output, connection.input);\n                    }\n                    else {\n                        nativeAudioNode.connect(destination, connection.output);\n                    }\n                });\n            }\n        };\n    })(nativeAudioNode.disconnect);\n};\n//# sourceMappingURL=/build/es2018/helpers/wrap-audio-node-disconnect-method.js.map","import { isAudioNode } from '../guards/audio-node';\nimport { isDelayNode } from '../guards/delay-node';\nexport const createDetectCycles = (audioParamAudioNodeStore, createNotSupportedError, getAudioNodeConnections, getValueForKey) => {\n    return function detectCycles(source, destination) {\n        const audioNodeOfDestination = (isAudioNode(destination))\n            ? destination\n            : getValueForKey(audioParamAudioNodeStore, destination);\n        if (isDelayNode(audioNodeOfDestination)) {\n            return true;\n        }\n        if (source === audioNodeOfDestination) {\n            throw createNotSupportedError();\n        }\n        const { outputs } = getAudioNodeConnections(audioNodeOfDestination);\n        for (const outputConnection of outputs) {\n            if (detectCycles(source, outputConnection[0])) {\n                return true;\n            }\n        }\n        return false;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/detect-cycles.js.map","export const isDelayNode = (audioNode) => {\n    return 'delayTime' in audioNode;\n};\n//# sourceMappingURL=/build/es2018/guards/delay-node.js.map","export const createNoneAudioDestinationNodeConstructor = (audioNodeConstructor) => {\n    return class NoneAudioDestinationNode extends audioNodeConstructor {\n        constructor(context, internalState, nativeAudioNode, audioNodeRenderer) {\n            super(context, internalState, nativeAudioNode, audioNodeRenderer);\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/none-audio-destination-node-constructor.js.map","export const createNativeAudioBufferConstructor = (window) => {\n    if (window === null) {\n        return null;\n    }\n    if (window.hasOwnProperty('AudioBuffer')) {\n        return window.AudioBuffer;\n    }\n    return null;\n};\n//# sourceMappingURL=/build/es2018/factories/native-audio-buffer-constructor.js.map","export const createConvertNumberToUnsignedLong = (unit32Array) => {\n    return (value) => {\n        unit32Array[0] = value;\n        return unit32Array[0];\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/convert-number-to-unsigned-long.js.map","export const createWrapAudioBufferCopyChannelMethods = (convertNumberToUnsignedLong, createIndexSizeError) => {\n    return (audioBuffer) => {\n        audioBuffer.copyFromChannel = (destination, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {\n            const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n            const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n            if (channelNumber >= audioBuffer.numberOfChannels) {\n                throw createIndexSizeError();\n            }\n            const audioBufferLength = audioBuffer.length;\n            const channelData = audioBuffer.getChannelData(channelNumber);\n            const destinationLength = destination.length;\n            for (let i = (bufferOffset < 0) ? -bufferOffset : 0; i + bufferOffset < audioBufferLength && i < destinationLength; i += 1) {\n                destination[i] = channelData[i + bufferOffset];\n            }\n        };\n        audioBuffer.copyToChannel = (source, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {\n            const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n            const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n            if (channelNumber >= audioBuffer.numberOfChannels) {\n                throw createIndexSizeError();\n            }\n            const audioBufferLength = audioBuffer.length;\n            const channelData = audioBuffer.getChannelData(channelNumber);\n            const sourceLength = source.length;\n            for (let i = (bufferOffset < 0) ? -bufferOffset : 0; i + bufferOffset < audioBufferLength && i < sourceLength; i += 1) {\n                channelData[i + bufferOffset] = source[i];\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/wrap-audio-buffer-copy-channel-methods.js.map","export const createWrapAudioBufferCopyChannelMethodsOutOfBounds = (convertNumberToUnsignedLong) => {\n    return (audioBuffer) => {\n        audioBuffer.copyFromChannel = ((copyFromChannel) => {\n            return (destination, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {\n                const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n                const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n                if (bufferOffset < audioBuffer.length) {\n                    return copyFromChannel.call(audioBuffer, destination, channelNumber, bufferOffset);\n                }\n            };\n        })(audioBuffer.copyFromChannel);\n        audioBuffer.copyToChannel = ((copyToChannel) => {\n            return (source, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {\n                const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n                const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n                if (bufferOffset < audioBuffer.length) {\n                    return copyToChannel.call(audioBuffer, source, channelNumber, bufferOffset);\n                }\n            };\n        })(audioBuffer.copyToChannel);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/wrap-audio-buffer-copy-channel-methods-out-of-bounds.js.map","export const createWrapAudioBufferCopyChannelMethodsSubarray = (convertNumberToUnsignedLong, createIndexSizeError) => {\n    return (audioBuffer) => {\n        audioBuffer.copyFromChannel = ((copyFromChannel) => {\n            return (destination, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {\n                const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n                const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n                if (channelNumber >= audioBuffer.numberOfChannels) {\n                    throw createIndexSizeError();\n                }\n                if (bufferOffset < audioBuffer.length && audioBuffer.length - bufferOffset < destination.length) {\n                    return copyFromChannel.call(audioBuffer, destination.subarray(0, audioBuffer.length - bufferOffset), channelNumber, bufferOffset);\n                }\n                return copyFromChannel.call(audioBuffer, destination, channelNumber, bufferOffset);\n            };\n        })(audioBuffer.copyFromChannel);\n        audioBuffer.copyToChannel = ((copyToChannel) => {\n            return (source, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {\n                const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n                const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n                if (channelNumber >= audioBuffer.numberOfChannels) {\n                    throw createIndexSizeError();\n                }\n                if (bufferOffset < audioBuffer.length && audioBuffer.length - bufferOffset < source.length) {\n                    return copyToChannel.call(audioBuffer, source.subarray(0, audioBuffer.length - bufferOffset), channelNumber, bufferOffset);\n                }\n                return copyToChannel.call(audioBuffer, source, channelNumber, bufferOffset);\n            };\n        })(audioBuffer.copyToChannel);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/wrap-audio-buffer-copy-channel-methods-subarray.js.map","// Bug #33: Edge & Safari expose an AudioBuffer but it can't be used as a constructor.\nexport const createTestAudioBufferConstructorSupport = (nativeAudioBufferConstructor) => {\n    return () => {\n        if (nativeAudioBufferConstructor === null) {\n            return false;\n        }\n        try {\n            new nativeAudioBufferConstructor({ length: 1, sampleRate: 44100 }); // tslint:disable-line:no-unused-expression\n        }\n        catch (_a) {\n            return false;\n        }\n        return true;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/test-audio-buffer-constructor-support.js.map","export const createTestAudioScheduledSourceNodeStartMethodNegativeParametersSupport = (createNativeAudioNode) => {\n    return (nativeContext) => {\n        const nativeAudioBufferSourceNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createOscillator());\n        try {\n            nativeAudioBufferSourceNode.start(-1);\n        }\n        catch (err) {\n            return (err instanceof RangeError);\n        }\n        return false;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/test-audio-scheduled-source-node-start-method-negative-parameters-support.js.map","export const createTestAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport = (createNativeAudioNode) => {\n    return (nativeContext) => {\n        const nativeAudioBuffer = nativeContext.createBuffer(1, 1, 44100);\n        const nativeAudioBufferSourceNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createBufferSource());\n        nativeAudioBufferSourceNode.buffer = nativeAudioBuffer;\n        nativeAudioBufferSourceNode.start();\n        nativeAudioBufferSourceNode.stop();\n        try {\n            nativeAudioBufferSourceNode.stop();\n            return true;\n        }\n        catch (_a) {\n            return false;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/test-audio-scheduled-source-node-stop-method-consecutive-calls-support.js.map","export const createTestAudioScheduledSourceNodeStopMethodNegativeParametersSupport = (createNativeAudioNode) => {\n    return (nativeContext) => {\n        const nativeAudioBufferSourceNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createOscillator());\n        try {\n            nativeAudioBufferSourceNode.stop(-1);\n        }\n        catch (err) {\n            return (err instanceof RangeError);\n        }\n        return false;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/test-audio-scheduled-source-node-stop-method-negative-parameters-support.js.map","import { interceptConnections } from '../helpers/intercept-connections';\nexport const createWrapAudioScheduledSourceNodeStopMethodConsecutiveCalls = (createNativeAudioNode) => {\n    return (nativeAudioScheduledSourceNode, nativeContext) => {\n        const nativeGainNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createGain());\n        nativeAudioScheduledSourceNode.connect(nativeGainNode);\n        const disconnectGainNode = ((disconnect) => {\n            return () => {\n                // @todo TypeScript cannot infer the overloaded signature with 1 argument yet.\n                disconnect.call(nativeAudioScheduledSourceNode, nativeGainNode);\n                nativeAudioScheduledSourceNode.removeEventListener('ended', disconnectGainNode);\n            };\n        })(nativeAudioScheduledSourceNode.disconnect);\n        nativeAudioScheduledSourceNode.addEventListener('ended', disconnectGainNode);\n        interceptConnections(nativeAudioScheduledSourceNode, nativeGainNode);\n        nativeAudioScheduledSourceNode.stop = ((stop) => {\n            let isStopped = false;\n            return (when = 0) => {\n                if (isStopped) {\n                    try {\n                        stop.call(nativeAudioScheduledSourceNode, when);\n                    }\n                    catch (_a) {\n                        nativeGainNode.gain.setValueAtTime(0, when);\n                    }\n                }\n                else {\n                    stop.call(nativeAudioScheduledSourceNode, when);\n                    isStopped = true;\n                }\n            };\n        })(nativeAudioScheduledSourceNode.stop);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/wrap-audio-scheduled-source-node-stop-method-consecutive-calls.js.map","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { wrapAudioBufferSourceNodeStartMethodConsecutiveCalls } from '../helpers/wrap-audio-buffer-source-node-start-method-consecutive-calls';\nimport { wrapAudioBufferSourceNodeStartMethodDurationParameter } from '../helpers/wrap-audio-buffer-source-node-start-method-duration-parameter';\nimport { wrapAudioScheduledSourceNodeStartMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters';\nimport { wrapAudioScheduledSourceNodeStopMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters';\nexport const createNativeAudioBufferSourceNodeFactory = (cacheTestResult, createNativeAudioNode, testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport, testAudioBufferSourceNodeStartMethodDurationParameterSupport, testAudioBufferSourceNodeStartMethodOffsetClampingSupport, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioBufferSourceNodeStartMethodOffsetClampling, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls) => {\n    return (nativeContext, options = {}) => {\n        const nativeAudioBufferSourceNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createBufferSource());\n        assignNativeAudioNodeOptions(nativeAudioBufferSourceNode, options);\n        assignNativeAudioNodeAudioParamValue(nativeAudioBufferSourceNode, options, 'playbackRate');\n        // Bug #71: Edge does not allow to set the buffer to null.\n        assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'buffer');\n        // Bug #149: Safari does not yet support the detune AudioParam.\n        assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'loop');\n        assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'loopEnd');\n        assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'loopStart');\n        // Bug #69: Safari does allow calls to start() of an already scheduled AudioBufferSourceNode.\n        if (!cacheTestResult(testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport, () => testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport(nativeContext))) {\n            wrapAudioBufferSourceNodeStartMethodConsecutiveCalls(nativeAudioBufferSourceNode);\n        }\n        // Bug #92: Edge does not respect the duration parameter yet.\n        if (!cacheTestResult(testAudioBufferSourceNodeStartMethodDurationParameterSupport, testAudioBufferSourceNodeStartMethodDurationParameterSupport)) {\n            wrapAudioBufferSourceNodeStartMethodDurationParameter(nativeAudioBufferSourceNode, nativeContext);\n        }\n        // Bug #154 & #155: Safari does not handle offsets which are equal to or greater than the duration of the buffer.\n        if (!cacheTestResult(testAudioBufferSourceNodeStartMethodOffsetClampingSupport, () => testAudioBufferSourceNodeStartMethodOffsetClampingSupport(nativeContext))) {\n            wrapAudioBufferSourceNodeStartMethodOffsetClampling(nativeAudioBufferSourceNode);\n        }\n        // Bug #44: Only Chrome, Firefox & Opera throw a RangeError yet.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(nativeContext))) {\n            wrapAudioScheduledSourceNodeStartMethodNegativeParameters(nativeAudioBufferSourceNode);\n        }\n        // Bug #19: Safari does not ignore calls to stop() of an already stopped AudioBufferSourceNode.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, () => testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport(nativeContext))) {\n            wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls(nativeAudioBufferSourceNode, nativeContext);\n        }\n        // Bug #44: Only Firefox does throw a RangeError yet.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(nativeContext))) {\n            wrapAudioScheduledSourceNodeStopMethodNegativeParameters(nativeAudioBufferSourceNode);\n        }\n        return nativeAudioBufferSourceNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-audio-buffer-source-node-factory.js.map","import { createInvalidStateError } from '../factories/invalid-state-error';\nexport const wrapAudioBufferSourceNodeStartMethodConsecutiveCalls = (nativeAudioBufferSourceNode) => {\n    nativeAudioBufferSourceNode.start = ((start) => {\n        let isScheduled = false;\n        return (when = 0, offset = 0, duration) => {\n            if (isScheduled) {\n                throw createInvalidStateError();\n            }\n            start.call(nativeAudioBufferSourceNode, when, offset, duration);\n            isScheduled = true;\n        };\n    })(nativeAudioBufferSourceNode.start);\n};\n//# sourceMappingURL=/build/es2018/helpers/wrap-audio-buffer-source-node-start-method-consecutive-calls.js.map","export const wrapAudioBufferSourceNodeStartMethodDurationParameter = (nativeAudioScheduledSourceNode, nativeContext) => {\n    let endTime = Number.POSITIVE_INFINITY;\n    let stopTime = Number.POSITIVE_INFINITY;\n    nativeAudioScheduledSourceNode.start = ((start, stop) => {\n        return (when = 0, offset = 0, duration = Number.POSITIVE_INFINITY) => {\n            start.call(nativeAudioScheduledSourceNode, when, offset);\n            if (duration >= 0 && duration < Number.POSITIVE_INFINITY) {\n                const actualStartTime = Math.max(when, nativeContext.currentTime);\n                // @todo The playbackRate could of course also have been automated and is not always fixed.\n                const durationInBufferTime = (duration / nativeAudioScheduledSourceNode.playbackRate.value);\n                endTime = actualStartTime + durationInBufferTime;\n                stop.call(nativeAudioScheduledSourceNode, Math.min(endTime, stopTime));\n            }\n        };\n    })(nativeAudioScheduledSourceNode.start, nativeAudioScheduledSourceNode.stop);\n    nativeAudioScheduledSourceNode.stop = ((stop) => {\n        return (when = 0) => {\n            stopTime = Math.max(when, nativeContext.currentTime);\n            stop.call(nativeAudioScheduledSourceNode, Math.min(endTime, stopTime));\n        };\n    })(nativeAudioScheduledSourceNode.stop);\n};\n//# sourceMappingURL=/build/es2018/helpers/wrap-audio-buffer-source-node-start-method-duration-parameter.js.map","export const createTestAudioBufferSourceNodeStartMethodConsecutiveCallsSupport = (createNativeAudioNode) => {\n    return (nativeContext) => {\n        const nativeAudioBufferSourceNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createBufferSource());\n        nativeAudioBufferSourceNode.start();\n        try {\n            nativeAudioBufferSourceNode.start();\n        }\n        catch (_a) {\n            return true;\n        }\n        return false;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/test-audio-buffer-source-node-start-method-consecutive-calls-support.js.map","// Bug #92: Edge does not respect the duration parameter yet.\nexport const createTestAudioBufferSourceNodeStartMethodDurationParameterSupport = (nativeOfflineAudioContextConstructor) => {\n    return () => {\n        if (nativeOfflineAudioContextConstructor === null) {\n            return Promise.resolve(false);\n        }\n        const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n        const audioBuffer = offlineAudioContext.createBuffer(1, 1, offlineAudioContext.sampleRate);\n        const audioBufferSourceNode = offlineAudioContext.createBufferSource();\n        audioBuffer.getChannelData(0)[0] = 1;\n        audioBufferSourceNode.buffer = audioBuffer;\n        audioBufferSourceNode.start(0, 0, 0);\n        audioBufferSourceNode.connect(offlineAudioContext.destination);\n        // Bug #21: Safari does not support promises yet.\n        return new Promise((resolve) => {\n            offlineAudioContext.oncomplete = ({ renderedBuffer }) => {\n                // Bug #5: Safari does not support copyFromChannel().\n                resolve(renderedBuffer.getChannelData(0)[0] === 0);\n            };\n            offlineAudioContext.startRendering();\n        });\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/test-audio-buffer-source-node-start-method-duration-parameter-support.js.map","export const createTestAudioBufferSourceNodeStartMethodOffsetClampingSupport = (createNativeAudioNode) => {\n    return (nativeContext) => {\n        const nativeAudioBufferSourceNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createBufferSource());\n        const nativeAudioBuffer = nativeContext.createBuffer(1, 1, 44100);\n        nativeAudioBufferSourceNode.buffer = nativeAudioBuffer;\n        try {\n            nativeAudioBufferSourceNode.start(0, 1);\n        }\n        catch (_a) {\n            return false;\n        }\n        return true;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/test-audio-buffer-source-node-start-method-offset-clamping-support.js.map","export const wrapAudioBufferSourceNodeStartMethodOffsetClamping = (nativeAudioBufferSourceNode) => {\n    nativeAudioBufferSourceNode.start = ((start) => {\n        return (when = 0, offset = 0, duration) => {\n            const buffer = nativeAudioBufferSourceNode.buffer;\n            // Bug #154: Safari does not clamp the offset if it is equal to or greater than the duration of the buffer.\n            const clampedOffset = (buffer === null) ? offset : Math.min(buffer.duration, offset);\n            // Bug #155: Safari does not handle the offset correctly if it would cause the buffer to be not be played at all.\n            if (buffer !== null && clampedOffset > buffer.duration - (0.5 / nativeAudioBufferSourceNode.context.sampleRate)) {\n                start.call(nativeAudioBufferSourceNode, when, 0, 0);\n            }\n            else {\n                start.call(nativeAudioBufferSourceNode, when, clampedOffset, duration);\n            }\n        };\n    })(nativeAudioBufferSourceNode.start);\n};\n//# sourceMappingURL=/build/es2018/helpers/wrap-audio-buffer-source-node-start-method-offset-clamping.js.map","import { connectAudioParam } from '../helpers/connect-audio-param';\nimport { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { renderAutomation } from '../helpers/render-automation';\nimport { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nexport const createAudioBufferSourceNodeRendererFactory = (createNativeAudioBufferSourceNode) => {\n    return () => {\n        const renderedNativeAudioBufferSourceNodes = new WeakMap();\n        let start = null;\n        let stop = null;\n        const createAudioBufferSourceNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeAudioBufferSourceNode = getNativeAudioNode(proxy);\n            /*\n             * If the initially used nativeAudioBufferSourceNode was not constructed on the same OfflineAudioContext it needs to be created\n             * again.\n             */\n            const nativeAudioBufferSourceNodeIsOwnedByContext = isOwnedByContext(nativeAudioBufferSourceNode, nativeOfflineAudioContext);\n            if (!nativeAudioBufferSourceNodeIsOwnedByContext) {\n                const options = {\n                    buffer: nativeAudioBufferSourceNode.buffer,\n                    channelCount: nativeAudioBufferSourceNode.channelCount,\n                    channelCountMode: nativeAudioBufferSourceNode.channelCountMode,\n                    channelInterpretation: nativeAudioBufferSourceNode.channelInterpretation,\n                    // Bug #149: Safari does not yet support the detune AudioParam.\n                    loop: nativeAudioBufferSourceNode.loop,\n                    loopEnd: nativeAudioBufferSourceNode.loopEnd,\n                    loopStart: nativeAudioBufferSourceNode.loopStart,\n                    playbackRate: nativeAudioBufferSourceNode.playbackRate.value\n                };\n                nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext, options);\n                if (start !== null) {\n                    nativeAudioBufferSourceNode.start(...start);\n                }\n                if (stop !== null) {\n                    nativeAudioBufferSourceNode.stop(stop);\n                }\n            }\n            renderedNativeAudioBufferSourceNodes.set(nativeOfflineAudioContext, nativeAudioBufferSourceNode);\n            if (!nativeAudioBufferSourceNodeIsOwnedByContext) {\n                // Bug #149: Safari does not yet support the detune AudioParam.\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.playbackRate, nativeAudioBufferSourceNode.playbackRate);\n            }\n            else {\n                // Bug #149: Safari does not yet support the detune AudioParam.\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.playbackRate);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioBufferSourceNode);\n            return nativeAudioBufferSourceNode;\n        };\n        return {\n            set start(value) {\n                start = value;\n            },\n            set stop(value) {\n                stop = value;\n            },\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeAudioBufferSourceNode = renderedNativeAudioBufferSourceNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeAudioBufferSourceNode !== undefined) {\n                    return Promise.resolve(renderedNativeAudioBufferSourceNode);\n                }\n                return createAudioBufferSourceNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-buffer-source-node-renderer-factory.js.map","import { AutomationEventList } from 'automation-events';\nimport { AUDIO_PARAM_AUDIO_NODE_STORE, AUDIO_PARAM_STORE } from '../globals';\nimport { getAudioGraph } from '../helpers/get-audio-graph';\nconst addAudioParam = (context, audioParam, audioParamRenderer) => {\n    const audioGraph = getAudioGraph(context);\n    audioGraph.params.set(audioParam, { activeInputs: new Set(), passiveInputs: new WeakMap(), renderer: audioParamRenderer });\n};\nexport const createAudioParamFactory = (createAudioParamRenderer, createCancelAndHoldAutomationEvent, createCancelScheduledValuesAutomationEvent, createExponentialRampToValueAutomationEvent, createLinearRampToValueAutomationEvent, createSetTargetAutomationEvent, createSetValueAutomationEvent, createSetValueCurveAutomationEvent, nativeAudioContextConstructor) => {\n    return (audioNode, isAudioParamOfOfflineAudioContext, nativeAudioParam, maxValue = null, minValue = null) => {\n        const automationEventList = new AutomationEventList(nativeAudioParam.defaultValue);\n        const audioParamRenderer = (isAudioParamOfOfflineAudioContext) ? createAudioParamRenderer(automationEventList) : null;\n        const audioParam = {\n            get defaultValue() {\n                return nativeAudioParam.defaultValue;\n            },\n            get maxValue() {\n                return (maxValue === null) ? nativeAudioParam.maxValue : maxValue;\n            },\n            get minValue() {\n                return (minValue === null) ? nativeAudioParam.minValue : minValue;\n            },\n            get value() {\n                return nativeAudioParam.value;\n            },\n            set value(value) {\n                nativeAudioParam.value = value;\n                // Bug #98: Edge, Firefox & Safari do not yet treat the value setter like a call to setValueAtTime().\n                audioParam.setValueAtTime(value, audioNode.context.currentTime);\n            },\n            cancelAndHoldAtTime(cancelTime) {\n                // Bug #28: Edge, Firefox & Safari do not yet implement cancelAndHoldAtTime().\n                if (typeof nativeAudioParam.cancelAndHoldAtTime === 'function') {\n                    if (audioParamRenderer === null) {\n                        automationEventList.flush(audioNode.context.currentTime);\n                    }\n                    automationEventList.add(createCancelAndHoldAutomationEvent(cancelTime));\n                    nativeAudioParam.cancelAndHoldAtTime(cancelTime);\n                }\n                else {\n                    const previousLastEvent = Array\n                        .from(automationEventList)\n                        .pop();\n                    if (audioParamRenderer === null) {\n                        automationEventList.flush(audioNode.context.currentTime);\n                    }\n                    automationEventList.add(createCancelAndHoldAutomationEvent(cancelTime));\n                    const currentLastEvent = Array\n                        .from(automationEventList)\n                        .pop();\n                    nativeAudioParam.cancelScheduledValues(cancelTime);\n                    if (previousLastEvent !== currentLastEvent && currentLastEvent !== undefined) {\n                        if (currentLastEvent.type === 'exponentialRampToValue') {\n                            nativeAudioParam.exponentialRampToValueAtTime(currentLastEvent.value, currentLastEvent.endTime);\n                        }\n                        else if (currentLastEvent.type === 'linearRampToValue') {\n                            nativeAudioParam.linearRampToValueAtTime(currentLastEvent.value, currentLastEvent.endTime);\n                        }\n                        else if (currentLastEvent.type === 'setValue') {\n                            nativeAudioParam.setValueAtTime(currentLastEvent.value, currentLastEvent.startTime);\n                        }\n                        else if (currentLastEvent.type === 'setValueCurve') {\n                            nativeAudioParam.setValueCurveAtTime(currentLastEvent.values, currentLastEvent.startTime, currentLastEvent.duration);\n                        }\n                    }\n                }\n                return audioParam;\n            },\n            cancelScheduledValues(cancelTime) {\n                if (audioParamRenderer === null) {\n                    automationEventList.flush(audioNode.context.currentTime);\n                }\n                automationEventList.add(createCancelScheduledValuesAutomationEvent(cancelTime));\n                nativeAudioParam.cancelScheduledValues(cancelTime);\n                return audioParam;\n            },\n            exponentialRampToValueAtTime(value, endTime) {\n                if (audioParamRenderer === null) {\n                    automationEventList.flush(audioNode.context.currentTime);\n                }\n                automationEventList.add(createExponentialRampToValueAutomationEvent(value, endTime));\n                nativeAudioParam.exponentialRampToValueAtTime(value, endTime);\n                return audioParam;\n            },\n            linearRampToValueAtTime(value, endTime) {\n                if (audioParamRenderer === null) {\n                    automationEventList.flush(audioNode.context.currentTime);\n                }\n                automationEventList.add(createLinearRampToValueAutomationEvent(value, endTime));\n                nativeAudioParam.linearRampToValueAtTime(value, endTime);\n                return audioParam;\n            },\n            setTargetAtTime(target, startTime, timeConstant) {\n                if (audioParamRenderer === null) {\n                    automationEventList.flush(audioNode.context.currentTime);\n                }\n                automationEventList.add(createSetTargetAutomationEvent(target, startTime, timeConstant));\n                nativeAudioParam.setTargetAtTime(target, startTime, timeConstant);\n                return audioParam;\n            },\n            setValueAtTime(value, startTime) {\n                if (audioParamRenderer === null) {\n                    automationEventList.flush(audioNode.context.currentTime);\n                }\n                automationEventList.add(createSetValueAutomationEvent(value, startTime));\n                nativeAudioParam.setValueAtTime(value, startTime);\n                return audioParam;\n            },\n            setValueCurveAtTime(values, startTime, duration) {\n                /*\n                 * Bug #152: Safari does not correctly interpolate the values of the curve.\n                 * @todo Unfortunately there is no way to test for this behavior in synchronous fashion which is why testing for the\n                 * existence of the webkitAudioContext is used as a workaround here.\n                 */\n                if (nativeAudioContextConstructor !== null && nativeAudioContextConstructor.name === 'webkitAudioContext') {\n                    const endTime = startTime + duration;\n                    const sampleRate = audioNode.context.sampleRate;\n                    const firstSample = Math.ceil(startTime * sampleRate);\n                    const lastSample = Math.floor((endTime) * sampleRate);\n                    const numberOfInterpolatedValues = lastSample - firstSample;\n                    const interpolatedValues = new Float32Array(numberOfInterpolatedValues);\n                    for (let i = 0; i < numberOfInterpolatedValues; i += 1) {\n                        const theoreticIndex = ((values.length - 1) / duration) * (((firstSample + i) / sampleRate) - startTime);\n                        const lowerIndex = Math.floor(theoreticIndex);\n                        const upperIndex = Math.ceil(theoreticIndex);\n                        interpolatedValues[i] = (lowerIndex === upperIndex)\n                            ? values[lowerIndex]\n                            : ((1 - (theoreticIndex - lowerIndex)) * values[lowerIndex])\n                                + ((1 - (upperIndex - theoreticIndex)) * values[upperIndex]);\n                    }\n                    if (audioParamRenderer === null) {\n                        automationEventList.flush(audioNode.context.currentTime);\n                    }\n                    automationEventList.add(createSetValueCurveAutomationEvent(interpolatedValues, startTime, duration));\n                    nativeAudioParam.setValueCurveAtTime(interpolatedValues, startTime, duration);\n                    const timeOfLastSample = lastSample / sampleRate;\n                    if (timeOfLastSample < endTime) {\n                        audioParam.setValueAtTime(interpolatedValues[interpolatedValues.length - 1], timeOfLastSample);\n                    }\n                    audioParam.setValueAtTime(values[values.length - 1], endTime);\n                }\n                else {\n                    if (audioParamRenderer === null) {\n                        automationEventList.flush(audioNode.context.currentTime);\n                    }\n                    automationEventList.add(createSetValueCurveAutomationEvent(values, startTime, duration));\n                    nativeAudioParam.setValueCurveAtTime(values, startTime, duration);\n                }\n                return audioParam;\n            }\n        };\n        AUDIO_PARAM_STORE.set(audioParam, nativeAudioParam);\n        AUDIO_PARAM_AUDIO_NODE_STORE.set(audioParam, audioNode);\n        addAudioParam(audioNode.context, audioParam, audioParamRenderer);\n        return audioParam;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-param-factory.js.map","export const createAudioParamRenderer = (automationEventList) => {\n    return {\n        replay(audioParam) {\n            for (const automationEvent of automationEventList) {\n                if (automationEvent.type === 'exponentialRampToValue') {\n                    const { endTime, value } = automationEvent;\n                    audioParam.exponentialRampToValueAtTime(value, endTime);\n                }\n                else if (automationEvent.type === 'linearRampToValue') {\n                    const { endTime, value } = automationEvent;\n                    audioParam.linearRampToValueAtTime(value, endTime);\n                }\n                else if (automationEvent.type === 'setTarget') {\n                    const { startTime, target, timeConstant } = automationEvent;\n                    audioParam.setTargetAtTime(target, startTime, timeConstant);\n                }\n                else if (automationEvent.type === 'setValue') {\n                    const { startTime, value } = automationEvent;\n                    audioParam.setValueAtTime(value, startTime);\n                }\n                else if (automationEvent.type === 'setValueCurve') {\n                    const { duration, startTime, values } = automationEvent;\n                    audioParam.setValueCurveAtTime(values, startTime, duration);\n                }\n                else {\n                    throw new Error(\"Can't apply an unknown automation.\");\n                }\n            }\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-param-renderer.js.map","export const MOST_NEGATIVE_SINGLE_FLOAT = -3.4028234663852886e38;\nexport const MOST_POSITIVE_SINGLE_FLOAT = -MOST_NEGATIVE_SINGLE_FLOAT;\n//# sourceMappingURL=/build/es2018/constants.js.map","import { AUDIO_GRAPHS } from '../globals';\nimport { getNativeContext } from '../helpers/get-native-context';\nexport const createAudioDestinationNodeConstructor = (audioNodeConstructor, createAudioDestinationNodeRenderer, createIndexSizeError, createInvalidStateError, createNativeAudioDestinationNode, isNativeOfflineAudioContext) => {\n    return class AudioDestinationNode extends audioNodeConstructor {\n        constructor(context, channelCount) {\n            const nativeContext = getNativeContext(context);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const nativeAudioDestinationNode = createNativeAudioDestinationNode(nativeContext, channelCount, isOffline);\n            const audioDestinationNodeRenderer = ((isOffline) ? createAudioDestinationNodeRenderer() : null);\n            const audioGraph = { audioWorkletGlobalScope: null, nodes: new WeakMap(), params: new WeakMap() };\n            AUDIO_GRAPHS.set(context, audioGraph);\n            super(context, 'passive', nativeAudioDestinationNode, audioDestinationNodeRenderer);\n            this._isNodeOfNativeOfflineAudioContext = isOffline;\n            this._nativeAudioDestinationNode = nativeAudioDestinationNode;\n        }\n        get channelCount() {\n            return this._nativeAudioDestinationNode.channelCount;\n        }\n        set channelCount(value) {\n            // Bug #52: Chrome, Edge, Opera & Safari do not throw an exception at all.\n            // Bug #54: Firefox does throw an IndexSizeError.\n            if (this._isNodeOfNativeOfflineAudioContext) {\n                throw createInvalidStateError();\n            }\n            // Bug #47: The AudioDestinationNode in Edge and Safari do not initialize the maxChannelCount property correctly.\n            if (value > this._nativeAudioDestinationNode.maxChannelCount) {\n                throw createIndexSizeError();\n            }\n            this._nativeAudioDestinationNode.channelCount = value;\n        }\n        get channelCountMode() {\n            return this._nativeAudioDestinationNode.channelCountMode;\n        }\n        set channelCountMode(value) {\n            // Bug #53: No browser does throw an exception yet.\n            if (this._isNodeOfNativeOfflineAudioContext) {\n                throw createInvalidStateError();\n            }\n            this._nativeAudioDestinationNode.channelCountMode = value;\n        }\n        get maxChannelCount() {\n            return this._nativeAudioDestinationNode.maxChannelCount;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-destination-node-constructor.js.map","import { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nexport const createAudioDestinationNodeRenderer = () => {\n    let nativeAudioDestinationNodePromise = null;\n    const createAudioDestinationNode = async (proxy, nativeOfflineAudioContext) => {\n        const nativeAudioDestinationNode = nativeOfflineAudioContext.destination;\n        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioDestinationNode);\n        return nativeAudioDestinationNode;\n    };\n    return {\n        render(proxy, nativeOfflineAudioContext) {\n            if (nativeAudioDestinationNodePromise === null) {\n                nativeAudioDestinationNodePromise = createAudioDestinationNode(proxy, nativeOfflineAudioContext);\n            }\n            return nativeAudioDestinationNodePromise;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-destination-node-renderer-factory.js.map","export const createNativeAudioDestinationNode = (nativeContext, channelCount, isNodeOfNativeOfflineAudioContext) => {\n    const nativeAudioDestinationNode = nativeContext.destination;\n    // Bug #132: Edge & Safari do not have the correct channelCount.\n    if (nativeAudioDestinationNode.channelCount !== channelCount) {\n        nativeAudioDestinationNode.channelCount = channelCount;\n    }\n    // Bug #83: Edge & Safari do not have the correct channelCountMode.\n    if (isNodeOfNativeOfflineAudioContext && nativeAudioDestinationNode.channelCountMode !== 'explicit') {\n        nativeAudioDestinationNode.channelCountMode = 'explicit';\n    }\n    // Bug #47: The AudioDestinationNode in Edge and Safari does not initialize the maxChannelCount property correctly.\n    if (nativeAudioDestinationNode.maxChannelCount === 0) {\n        Object.defineProperty(nativeAudioDestinationNode, 'maxChannelCount', {\n            get: () => nativeAudioDestinationNode.channelCount\n        });\n    }\n    return nativeAudioDestinationNode;\n};\n//# sourceMappingURL=/build/es2018/factories/native-audio-destination-node.js.map","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeBiquadFilterNodeFactory = (createNativeAudioNode) => {\n    return (nativeContext, options) => {\n        const nativeBiquadFilterNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createBiquadFilter());\n        assignNativeAudioNodeOptions(nativeBiquadFilterNode, options);\n        assignNativeAudioNodeAudioParamValue(nativeBiquadFilterNode, options, 'Q');\n        assignNativeAudioNodeAudioParamValue(nativeBiquadFilterNode, options, 'detune');\n        assignNativeAudioNodeAudioParamValue(nativeBiquadFilterNode, options, 'frequency');\n        assignNativeAudioNodeAudioParamValue(nativeBiquadFilterNode, options, 'gain');\n        assignNativeAudioNodeOption(nativeBiquadFilterNode, options, 'type');\n        return nativeBiquadFilterNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-biquad-filter-node-factory.js.map","import { connectAudioParam } from '../helpers/connect-audio-param';\nimport { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { renderAutomation } from '../helpers/render-automation';\nimport { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nexport const createBiquadFilterNodeRendererFactory = (createNativeBiquadFilterNode) => {\n    return () => {\n        const renderedNativeBiquadFilterNodes = new WeakMap();\n        const createBiquadFilterNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeBiquadFilterNode = getNativeAudioNode(proxy);\n            /*\n             * If the initially used nativeBiquadFilterNode was not constructed on the same OfflineAudioContext it needs to be created\n             * again.\n             */\n            const nativeBiquadFilterNodeIsOwnedByContext = isOwnedByContext(nativeBiquadFilterNode, nativeOfflineAudioContext);\n            if (!nativeBiquadFilterNodeIsOwnedByContext) {\n                const options = {\n                    Q: nativeBiquadFilterNode.Q.value,\n                    channelCount: nativeBiquadFilterNode.channelCount,\n                    channelCountMode: nativeBiquadFilterNode.channelCountMode,\n                    channelInterpretation: nativeBiquadFilterNode.channelInterpretation,\n                    detune: nativeBiquadFilterNode.detune.value,\n                    frequency: nativeBiquadFilterNode.frequency.value,\n                    gain: nativeBiquadFilterNode.gain.value,\n                    type: nativeBiquadFilterNode.type\n                };\n                nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeBiquadFilterNodes.set(nativeOfflineAudioContext, nativeBiquadFilterNode);\n            if (!nativeBiquadFilterNodeIsOwnedByContext) {\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q);\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune);\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency);\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain);\n            }\n            else {\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.Q);\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.detune);\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.frequency);\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.gain);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeBiquadFilterNode);\n            return nativeBiquadFilterNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeBiquadFilterNode = renderedNativeBiquadFilterNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeBiquadFilterNode !== undefined) {\n                    return Promise.resolve(renderedNativeBiquadFilterNode);\n                }\n                return createBiquadFilterNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/biquad-filter-node-renderer-factory.js.map","export const createWrapChannelMergerNode = (createInvalidStateError, createNativeAudioNode) => {\n    return (nativeContext, channelMergerNode) => {\n        const audioBufferSourceNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createBufferSource());\n        channelMergerNode.channelCount = 1;\n        channelMergerNode.channelCountMode = 'explicit';\n        // Bug #20: Safari requires a connection of any kind to treat the input signal correctly.\n        const length = channelMergerNode.numberOfInputs;\n        for (let i = 0; i < length; i += 1) {\n            audioBufferSourceNode.connect(channelMergerNode, 0, i);\n        }\n        Object.defineProperty(channelMergerNode, 'channelCount', {\n            get: () => 1,\n            set: () => {\n                throw createInvalidStateError();\n            }\n        });\n        Object.defineProperty(channelMergerNode, 'channelCountMode', {\n            get: () => 'explicit',\n            set: () => {\n                throw createInvalidStateError();\n            }\n        });\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/wrap-channel-merger-node.js.map","import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeChannelMergerNodeFactory = (createNativeAudioNode, wrapChannelMergerNode) => {\n    return (nativeContext, options) => {\n        const nativeChannelMergerNode = createNativeAudioNode(nativeContext, (ntvCntxt) => {\n            return ntvCntxt.createChannelMerger(options.numberOfInputs);\n        });\n        assignNativeAudioNodeOptions(nativeChannelMergerNode, options);\n        // Bug #15: Safari does not return the default properties.\n        if (nativeChannelMergerNode.channelCount !== 1 &&\n            nativeChannelMergerNode.channelCountMode !== 'explicit') {\n            wrapChannelMergerNode(nativeContext, nativeChannelMergerNode);\n        }\n        // Bug #16: Firefox does not throw an error when setting a different channelCount or channelCountMode.\n        try {\n            nativeChannelMergerNode.channelCount = (options.numberOfInputs === undefined) ? 6 : options.numberOfInputs;\n            wrapChannelMergerNode(nativeContext, nativeChannelMergerNode);\n        }\n        catch ( /* Ignore errors. */_a) { /* Ignore errors. */ } // tslint:disable-line:no-empty\n        return nativeChannelMergerNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-channel-merger-node-factory.js.map","import { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nexport const createChannelMergerNodeRendererFactory = (createNativeChannelMergerNode) => {\n    return () => {\n        const renderedNativeAudioNodes = new WeakMap();\n        const createAudioNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeAudioNode = getNativeAudioNode(proxy);\n            // If the initially used nativeAudioNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeAudioNodeIsOwnedByContext = isOwnedByContext(nativeAudioNode, nativeOfflineAudioContext);\n            if (!nativeAudioNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeAudioNode.channelCount,\n                    channelCountMode: nativeAudioNode.channelCountMode,\n                    channelInterpretation: nativeAudioNode.channelInterpretation,\n                    numberOfInputs: nativeAudioNode.numberOfInputs\n                };\n                nativeAudioNode = createNativeChannelMergerNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioNode);\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioNode);\n            return nativeAudioNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeAudioNode !== undefined) {\n                    return Promise.resolve(renderedNativeAudioNode);\n                }\n                return createAudioNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/channel-merger-node-renderer-factory.js.map","import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { wrapChannelSplitterNode } from '../helpers/wrap-channel-splitter-node';\nexport const createNativeChannelSplitterNodeFactory = (createNativeAudioNode) => {\n    return (nativeContext, options) => {\n        const nativeChannelSplitterNode = createNativeAudioNode(nativeContext, (ntvCntxt) => {\n            return ntvCntxt.createChannelSplitter(options.numberOfOutputs);\n        });\n        // Bug #96: Safari does not have the correct channelCount.\n        // Bug #29: Edge & Safari do not have the correct channelCountMode.\n        // Bug #31: Edge & Safari do not have the correct channelInterpretation.\n        assignNativeAudioNodeOptions(nativeChannelSplitterNode, options);\n        // Bug #29, #30, #31, #32, #96 & #97: Only Chrome, Firefox & Opera partially support the spec yet.\n        wrapChannelSplitterNode(nativeChannelSplitterNode);\n        return nativeChannelSplitterNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-channel-splitter-node-factory.js.map","import { createInvalidStateError } from '../factories/invalid-state-error';\nexport const wrapChannelSplitterNode = (channelSplitterNode) => {\n    const channelCount = channelSplitterNode.numberOfOutputs;\n    // Bug #97: Safari does not throw an error when attempting to change the channelCount to something other than its initial value.\n    Object.defineProperty(channelSplitterNode, 'channelCount', {\n        get: () => channelCount,\n        set: (value) => {\n            if (value !== channelCount) {\n                throw createInvalidStateError();\n            }\n        }\n    });\n    /*\n     * Bug #30: Only Chrome, Firefox & Opera throw an error when attempting to change the channelCountMode to something other than\n     * explicit.\n     */\n    Object.defineProperty(channelSplitterNode, 'channelCountMode', {\n        get: () => 'explicit',\n        set: (value) => {\n            if (value !== 'explicit') {\n                throw createInvalidStateError();\n            }\n        }\n    });\n    /*\n     * Bug #32: Only Chrome, Firefox & Opera throws an error when attempting to change the channelInterpretation to something other than\n     * discrete.\n     */\n    Object.defineProperty(channelSplitterNode, 'channelInterpretation', {\n        get: () => 'discrete',\n        set: (value) => {\n            if (value !== 'discrete') {\n                throw createInvalidStateError();\n            }\n        }\n    });\n};\n//# sourceMappingURL=/build/es2018/helpers/wrap-channel-splitter-node.js.map","import { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nexport const createChannelSplitterNodeRendererFactory = (createNativeChannelSplitterNode) => {\n    return () => {\n        const renderedNativeAudioNodes = new WeakMap();\n        const createAudioNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeAudioNode = getNativeAudioNode(proxy);\n            // If the initially used nativeAudioNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeAudioNodeIsOwnedByContext = isOwnedByContext(nativeAudioNode, nativeOfflineAudioContext);\n            if (!nativeAudioNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeAudioNode.channelCount,\n                    channelCountMode: nativeAudioNode.channelCountMode,\n                    channelInterpretation: nativeAudioNode.channelInterpretation,\n                    numberOfOutputs: nativeAudioNode.numberOfOutputs\n                };\n                nativeAudioNode = createNativeChannelSplitterNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioNode);\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioNode);\n            return nativeAudioNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeAudioNode !== undefined) {\n                    return Promise.resolve(renderedNativeAudioNode);\n                }\n                return createAudioNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/channel-splitter-node-renderer-factory.js.map","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeGainNodeFactory = (createNativeAudioNode) => {\n    return (nativeContext, options) => {\n        const nativeGainNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createGain());\n        assignNativeAudioNodeOptions(nativeGainNode, options);\n        assignNativeAudioNodeAudioParamValue(nativeGainNode, options, 'gain');\n        return nativeGainNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-gain-node-factory.js.map","import { interceptConnections } from '../helpers/intercept-connections';\nexport const createNativeConstantSourceNodeFakerFactory = (createNativeAudioBufferSourceNode, createNativeGainNode) => {\n    return (nativeContext, { offset, ...audioNodeOptions }) => {\n        const audioBufferSourceNode = createNativeAudioBufferSourceNode(nativeContext);\n        /*\n         * @todo Edge will throw a NotSupportedError when calling createBuffer() on a closed context. That's why the audioBuffer is created\n         * after the audioBufferSourceNode in this case. If the context is closed createNativeAudioBufferSourceNode() will throw the\n         * expected error and createBuffer() never gets called.\n         */\n        const audioBuffer = nativeContext.createBuffer(1, 2, nativeContext.sampleRate);\n        const gainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, gain: offset });\n        // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n        const channelData = audioBuffer.getChannelData(0);\n        // Bug #95: Safari does not play or loop one sample buffers.\n        channelData[0] = 1;\n        channelData[1] = 1;\n        audioBufferSourceNode.buffer = audioBuffer;\n        audioBufferSourceNode.loop = true;\n        audioBufferSourceNode.connect(gainNode);\n        const nativeConstantSourceNodeFaker = {\n            get bufferSize() {\n                return undefined;\n            },\n            get channelCount() {\n                return gainNode.channelCount;\n            },\n            set channelCount(value) {\n                gainNode.channelCount = value;\n            },\n            get channelCountMode() {\n                return gainNode.channelCountMode;\n            },\n            set channelCountMode(value) {\n                gainNode.channelCountMode = value;\n            },\n            get channelInterpretation() {\n                return gainNode.channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                gainNode.channelInterpretation = value;\n            },\n            get context() {\n                return gainNode.context;\n            },\n            get inputs() {\n                return undefined;\n            },\n            get numberOfInputs() {\n                return audioBufferSourceNode.numberOfInputs;\n            },\n            get numberOfOutputs() {\n                return gainNode.numberOfOutputs;\n            },\n            get offset() {\n                return gainNode.gain;\n            },\n            get onended() {\n                return audioBufferSourceNode.onended;\n            },\n            set onended(value) {\n                audioBufferSourceNode.onended = value;\n            },\n            addEventListener(...args) {\n                return audioBufferSourceNode.addEventListener(args[0], args[1], args[2]);\n            },\n            dispatchEvent(...args) {\n                return audioBufferSourceNode.dispatchEvent(args[0]);\n            },\n            removeEventListener(...args) {\n                return audioBufferSourceNode.removeEventListener(args[0], args[1], args[2]);\n            },\n            start(when = 0) {\n                audioBufferSourceNode.start.call(audioBufferSourceNode, when);\n            },\n            stop(when = 0) {\n                audioBufferSourceNode.stop.call(audioBufferSourceNode, when);\n            }\n        };\n        return interceptConnections(nativeConstantSourceNodeFaker, gainNode);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-constant-source-node-faker-factory.js.map","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { wrapAudioScheduledSourceNodeStartMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters';\nimport { wrapAudioScheduledSourceNodeStopMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters';\nexport const createNativeConstantSourceNodeFactory = (cacheTestResult, createNativeAudioNode, createNativeConstantSourceNodeFaker, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport) => {\n    return (nativeContext, options) => {\n        // Bug #62: Edge & Safari do not support ConstantSourceNodes.\n        if (nativeContext.createConstantSource === undefined) {\n            return createNativeConstantSourceNodeFaker(nativeContext, options);\n        }\n        const nativeConstantSourceNode = createNativeAudioNode(nativeContext, (ntvCntxt) => {\n            return ntvCntxt.createConstantSource();\n        });\n        assignNativeAudioNodeOptions(nativeConstantSourceNode, options);\n        assignNativeAudioNodeAudioParamValue(nativeConstantSourceNode, options, 'offset');\n        // Bug #44: Only Chrome, Firefox & Opera throw a RangeError yet.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(nativeContext))) {\n            wrapAudioScheduledSourceNodeStartMethodNegativeParameters(nativeConstantSourceNode);\n        }\n        // Bug #44: Only Firefox does throw a RangeError yet.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(nativeContext))) {\n            wrapAudioScheduledSourceNodeStopMethodNegativeParameters(nativeConstantSourceNode);\n        }\n        return nativeConstantSourceNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-constant-source-node-factory.js.map","import { connectAudioParam } from '../helpers/connect-audio-param';\nimport { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { renderAutomation } from '../helpers/render-automation';\nimport { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nexport const createConstantSourceNodeRendererFactory = (createNativeConstantSourceNode) => {\n    return () => {\n        const renderedNativeConstantSourceNodes = new WeakMap();\n        let start = null;\n        let stop = null;\n        const createConstantSourceNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeConstantSourceNode = getNativeAudioNode(proxy);\n            /*\n             * If the initially used nativeConstantSourceNode was not constructed on the same OfflineAudioContext it needs to be created\n             * again.\n             */\n            const nativeConstantSourceNodeIsOwnedByContext = isOwnedByContext(nativeConstantSourceNode, nativeOfflineAudioContext);\n            if (!nativeConstantSourceNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeConstantSourceNode.channelCount,\n                    channelCountMode: nativeConstantSourceNode.channelCountMode,\n                    channelInterpretation: nativeConstantSourceNode.channelInterpretation,\n                    offset: nativeConstantSourceNode.offset.value\n                };\n                nativeConstantSourceNode = createNativeConstantSourceNode(nativeOfflineAudioContext, options);\n                if (start !== null) {\n                    nativeConstantSourceNode.start(start);\n                }\n                if (stop !== null) {\n                    nativeConstantSourceNode.stop(stop);\n                }\n            }\n            renderedNativeConstantSourceNodes.set(nativeOfflineAudioContext, nativeConstantSourceNode);\n            if (!nativeConstantSourceNodeIsOwnedByContext) {\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset);\n            }\n            else {\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.offset);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConstantSourceNode);\n            return nativeConstantSourceNode;\n        };\n        return {\n            set start(value) {\n                start = value;\n            },\n            set stop(value) {\n                stop = value;\n            },\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeConstantSourceNode = renderedNativeConstantSourceNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeConstantSourceNode !== undefined) {\n                    return Promise.resolve(renderedNativeConstantSourceNode);\n                }\n                return createConstantSourceNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/constant-source-node-renderer-factory.js.map","import { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeConvolverNodeFactory = (createNativeAudioNode, createNotSupportedError) => {\n    return (nativeContext, options) => {\n        const nativeConvolverNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createConvolver());\n        assignNativeAudioNodeOptions(nativeConvolverNode, options);\n        // The normalize property needs to be set before setting the buffer.\n        if (options.disableNormalization === nativeConvolverNode.normalize) {\n            nativeConvolverNode.normalize = !options.disableNormalization;\n        }\n        assignNativeAudioNodeOption(nativeConvolverNode, options, 'buffer');\n        // Bug #113: Edge & Safari allow to change the channelCount\n        if (options.channelCount !== 2) {\n            throw createNotSupportedError();\n        }\n        Object.defineProperty(nativeConvolverNode, 'channelCount', {\n            get: () => options.channelCount,\n            set: (value) => {\n                if (value !== options.channelCount) {\n                    throw createNotSupportedError();\n                }\n            }\n        });\n        // Bug #114: Edge & Safari allow to change the channelCountMode\n        if (options.channelCountMode !== 'clamped-max') {\n            throw createNotSupportedError();\n        }\n        Object.defineProperty(nativeConvolverNode, 'channelCountMode', {\n            get: () => options.channelCountMode,\n            set: (value) => {\n                if (value !== options.channelCountMode) {\n                    throw createNotSupportedError();\n                }\n            }\n        });\n        return nativeConvolverNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-convolver-node-factory.js.map","import { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nexport const createConvolverNodeRendererFactory = (createNativeConvolverNode) => {\n    return () => {\n        const renderedNativeConvolverNodes = new WeakMap();\n        const createConvolverNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeConvolverNode = getNativeAudioNode(proxy);\n            // If the initially used nativeConvolverNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeConvolverNodeIsOwnedByContext = isOwnedByContext(nativeConvolverNode, nativeOfflineAudioContext);\n            if (!nativeConvolverNodeIsOwnedByContext) {\n                const options = {\n                    buffer: nativeConvolverNode.buffer,\n                    channelCount: nativeConvolverNode.channelCount,\n                    channelCountMode: nativeConvolverNode.channelCountMode,\n                    channelInterpretation: nativeConvolverNode.channelInterpretation,\n                    disableNormalization: !nativeConvolverNode.normalize\n                };\n                nativeConvolverNode = createNativeConvolverNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeConvolverNodes.set(nativeOfflineAudioContext, nativeConvolverNode);\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode);\n            return nativeConvolverNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeConvolverNode = renderedNativeConvolverNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeConvolverNode !== undefined) {\n                    return Promise.resolve(renderedNativeConvolverNode);\n                }\n                return createConvolverNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/convolver-node-renderer-factory.js.map","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeDelayNodeFactory = (createNativeAudioNode) => {\n    return (nativeContext, options) => {\n        const nativeDelayNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createDelay(options.maxDelayTime));\n        assignNativeAudioNodeOptions(nativeDelayNode, options);\n        assignNativeAudioNodeAudioParamValue(nativeDelayNode, options, 'delayTime');\n        return nativeDelayNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-delay-node-factory.js.map","import { connectAudioParam } from '../helpers/connect-audio-param';\nimport { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { renderAutomation } from '../helpers/render-automation';\nimport { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nexport const createDelayNodeRendererFactory = (createNativeDelayNode) => {\n    return (maxDelayTime) => {\n        const renderedNativeDelayNodes = new WeakMap();\n        const createDelayNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeDelayNode = getNativeAudioNode(proxy);\n            // If the initially used nativeDelayNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeDelayNodeIsOwnedByContext = isOwnedByContext(nativeDelayNode, nativeOfflineAudioContext);\n            if (!nativeDelayNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeDelayNode.channelCount,\n                    channelCountMode: nativeDelayNode.channelCountMode,\n                    channelInterpretation: nativeDelayNode.channelInterpretation,\n                    delayTime: nativeDelayNode.delayTime.value,\n                    maxDelayTime\n                };\n                nativeDelayNode = createNativeDelayNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeDelayNodes.set(nativeOfflineAudioContext, nativeDelayNode);\n            if (!nativeDelayNodeIsOwnedByContext) {\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime);\n            }\n            else {\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.delayTime);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDelayNode);\n            return nativeDelayNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeDelayNode = renderedNativeDelayNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeDelayNode !== undefined) {\n                    return Promise.resolve(renderedNativeDelayNode);\n                }\n                return createDelayNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/delay-node-renderer-factory.js.map","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeDynamicsCompressorNodeFactory = (createNativeAudioNode, createNotSupportedError) => {\n    return (nativeContext, options) => {\n        const nativeDynamicsCompressorNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createDynamicsCompressor());\n        assignNativeAudioNodeOptions(nativeDynamicsCompressorNode, options);\n        // Bug #108: Only Chrome, Firefox and Opera disallow a channelCount of three and above yet.\n        if (options.channelCount > 2) {\n            throw createNotSupportedError();\n        }\n        // Bug #109: Only Chrome, Firefox and Opera disallow a channelCountMode of 'max'.\n        if (options.channelCountMode === 'max') {\n            throw createNotSupportedError();\n        }\n        assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode, options, 'attack');\n        assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode, options, 'knee');\n        assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode, options, 'ratio');\n        assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode, options, 'release');\n        assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode, options, 'threshold');\n        return nativeDynamicsCompressorNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-dynamics-compressor-node-factory.js.map","import { connectAudioParam } from '../helpers/connect-audio-param';\nimport { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { renderAutomation } from '../helpers/render-automation';\nimport { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nexport const createDynamicsCompressorNodeRendererFactory = (createNativeDynamicsCompressorNode) => {\n    return () => {\n        const renderedNativeDynamicsCompressorNodes = new WeakMap();\n        const createDynamicsCompressorNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeDynamicsCompressorNode = getNativeAudioNode(proxy);\n            /*\n             * If the initially used nativeDynamicsCompressorNode was not constructed on the same OfflineAudioContext it needs to be\n             * created again.\n             */\n            const nativeDynamicsCompressorNodeIsOwnedByContext = isOwnedByContext(nativeDynamicsCompressorNode, nativeOfflineAudioContext);\n            if (!nativeDynamicsCompressorNodeIsOwnedByContext) {\n                const options = {\n                    attack: nativeDynamicsCompressorNode.attack.value,\n                    channelCount: nativeDynamicsCompressorNode.channelCount,\n                    channelCountMode: nativeDynamicsCompressorNode.channelCountMode,\n                    channelInterpretation: nativeDynamicsCompressorNode.channelInterpretation,\n                    knee: nativeDynamicsCompressorNode.knee.value,\n                    ratio: nativeDynamicsCompressorNode.ratio.value,\n                    release: nativeDynamicsCompressorNode.release.value,\n                    threshold: nativeDynamicsCompressorNode.threshold.value\n                };\n                nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeDynamicsCompressorNodes.set(nativeOfflineAudioContext, nativeDynamicsCompressorNode);\n            if (!nativeDynamicsCompressorNodeIsOwnedByContext) {\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack);\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee);\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio);\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release);\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold);\n            }\n            else {\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.attack);\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.knee);\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.ratio);\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.release);\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.threshold);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDynamicsCompressorNode);\n            return nativeDynamicsCompressorNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeDynamicsCompressorNode = renderedNativeDynamicsCompressorNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeDynamicsCompressorNode !== undefined) {\n                    return Promise.resolve(renderedNativeDynamicsCompressorNode);\n                }\n                return createDynamicsCompressorNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/dynamics-compressor-node-renderer-factory.js.map","import { connectAudioParam } from '../helpers/connect-audio-param';\nimport { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { renderAutomation } from '../helpers/render-automation';\nimport { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nexport const createGainNodeRendererFactory = (createNativeGainNode) => {\n    return () => {\n        const renderedNativeGainNodes = new WeakMap();\n        const createGainNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeGainNode = getNativeAudioNode(proxy);\n            // If the initially used nativeGainNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeGainNodeIsOwnedByContext = isOwnedByContext(nativeGainNode, nativeOfflineAudioContext);\n            if (!nativeGainNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeGainNode.channelCount,\n                    channelCountMode: nativeGainNode.channelCountMode,\n                    channelInterpretation: nativeGainNode.channelInterpretation,\n                    gain: nativeGainNode.gain.value\n                };\n                nativeGainNode = createNativeGainNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeGainNodes.set(nativeOfflineAudioContext, nativeGainNode);\n            if (!nativeGainNodeIsOwnedByContext) {\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain);\n            }\n            else {\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.gain);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeGainNode);\n            return nativeGainNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeGainNode = renderedNativeGainNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeGainNode !== undefined) {\n                    return Promise.resolve(renderedNativeGainNode);\n                }\n                return createGainNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/gain-node-renderer-factory.js.map","export const createNativeScriptProcessorNodeFactory = (createNativeAudioNode) => {\n    return (nativeContext, bufferSize, numberOfInputChannels, numberOfOutputChannels) => {\n        return createNativeAudioNode(nativeContext, (ntvCntxt) => {\n            return ntvCntxt.createScriptProcessor(bufferSize, numberOfInputChannels, numberOfOutputChannels);\n        });\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-script-processor-node-factory.js.map","import { testPromiseSupport } from '../helpers/test-promise-support';\nexport const createRenderNativeOfflineAudioContext = (cacheTestResult, createNativeGainNode, createNativeScriptProcessorNode, testOfflineAudioContextCurrentTimeSupport) => {\n    return (nativeOfflineAudioContext) => {\n        // Bug #21: Safari does not support promises yet.\n        if (cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeOfflineAudioContext))) {\n            // Bug #158: Edge does not advance currentTime if it is not accessed while rendering the audio.\n            return Promise\n                .resolve(cacheTestResult(testOfflineAudioContextCurrentTimeSupport, testOfflineAudioContextCurrentTimeSupport))\n                .then((isOfflineAudioContextCurrentTimeSupported) => {\n                if (!isOfflineAudioContextCurrentTimeSupported) {\n                    const scriptProcessorNode = createNativeScriptProcessorNode(nativeOfflineAudioContext, 512, 0, 1);\n                    nativeOfflineAudioContext.oncomplete = () => {\n                        scriptProcessorNode.onaudioprocess = null; // tslint:disable-line:deprecation\n                        scriptProcessorNode.disconnect();\n                    };\n                    scriptProcessorNode.onaudioprocess = () => nativeOfflineAudioContext.currentTime; // tslint:disable-line:deprecation\n                    scriptProcessorNode.connect(nativeOfflineAudioContext.destination);\n                }\n                return nativeOfflineAudioContext.startRendering();\n            });\n        }\n        return new Promise((resolve) => {\n            // Bug #48: Safari does not render an OfflineAudioContext without any connected node.\n            const gainNode = createNativeGainNode(nativeOfflineAudioContext, {\n                channelCount: 1,\n                channelCountMode: 'explicit',\n                channelInterpretation: 'discrete',\n                gain: 0\n            });\n            nativeOfflineAudioContext.oncomplete = (event) => {\n                gainNode.disconnect();\n                resolve(event.renderedBuffer);\n            };\n            gainNode.connect(nativeOfflineAudioContext.destination);\n            nativeOfflineAudioContext.startRendering();\n        });\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/render-native-offline-audio-context.js.map","export const createTestOfflineAudioContextCurrentTimeSupport = (createNativeGainNode, nativeOfflineAudioContextConstructor) => {\n    return () => {\n        if (nativeOfflineAudioContextConstructor === null) {\n            return Promise.resolve(false);\n        }\n        const nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n        // Bug #48: Safari does not render an OfflineAudioContext without any connected node.\n        const gainNode = createNativeGainNode(nativeOfflineAudioContext, {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete',\n            gain: 0\n        });\n        // Bug #21: Safari does not support promises yet.\n        return new Promise((resolve) => {\n            nativeOfflineAudioContext.oncomplete = () => {\n                gainNode.disconnect();\n                resolve(nativeOfflineAudioContext.currentTime !== 0);\n            };\n            nativeOfflineAudioContext.startRendering();\n        });\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/test-offline-audio-context-current-time-support.js.map","import { filterBuffer } from '../helpers/filter-buffer';\nimport { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nconst filterFullBuffer = (renderedBuffer, nativeOfflineAudioContext, feedback, feedforward) => {\n    const feedbackLength = feedback.length;\n    const feedforwardLength = feedforward.length;\n    const minLength = Math.min(feedbackLength, feedforwardLength);\n    if (feedback[0] !== 1) {\n        for (let i = 0; i < feedbackLength; i += 1) {\n            feedforward[i] /= feedback[0];\n        }\n        for (let i = 1; i < feedforwardLength; i += 1) {\n            feedback[i] /= feedback[0];\n        }\n    }\n    const bufferLength = 32;\n    const xBuffer = new Float32Array(bufferLength);\n    const yBuffer = new Float32Array(bufferLength);\n    const filteredBuffer = nativeOfflineAudioContext.createBuffer(renderedBuffer.numberOfChannels, renderedBuffer.length, renderedBuffer.sampleRate);\n    const numberOfChannels = renderedBuffer.numberOfChannels;\n    for (let i = 0; i < numberOfChannels; i += 1) {\n        const input = renderedBuffer.getChannelData(i);\n        const output = filteredBuffer.getChannelData(i);\n        // @todo Add a test which checks support for TypedArray.prototype.fill().\n        xBuffer.fill(0);\n        yBuffer.fill(0);\n        filterBuffer(feedback, feedbackLength, feedforward, feedforwardLength, minLength, xBuffer, yBuffer, 0, bufferLength, input, output);\n    }\n    return filteredBuffer;\n};\nexport const createIIRFilterNodeRendererFactory = (createNativeAudioBufferSourceNode, createNativeAudioNode, nativeOfflineAudioContextConstructor, renderNativeOfflineAudioContext) => {\n    return (feedback, feedforward) => {\n        const renderedNativeAudioNodes = new WeakMap();\n        const createAudioNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeIIRFilterNode = getNativeAudioNode(proxy);\n            let nativeAudioBufferSourceNode = null;\n            // If the initially used nativeIIRFilterNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeIIRFilterNodeIsOwnedByContext = isOwnedByContext(nativeIIRFilterNode, nativeOfflineAudioContext);\n            // Bug #9: Safari does not support IIRFilterNodes.\n            if (nativeOfflineAudioContext.createIIRFilter === undefined) {\n                nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext);\n            }\n            else if (!nativeIIRFilterNodeIsOwnedByContext) {\n                nativeIIRFilterNode = createNativeAudioNode(nativeOfflineAudioContext, (ntvCntxt) => {\n                    return ntvCntxt.createIIRFilter(feedforward, feedback);\n                });\n            }\n            renderedNativeAudioNodes.set(nativeOfflineAudioContext, (nativeAudioBufferSourceNode === null) ? nativeIIRFilterNode : nativeAudioBufferSourceNode);\n            if (nativeAudioBufferSourceNode !== null) {\n                if (nativeOfflineAudioContextConstructor === null) {\n                    throw new Error('Missing the native OfflineAudioContext constructor.');\n                }\n                const partialOfflineAudioContext = new nativeOfflineAudioContextConstructor(\n                // Bug #47: The AudioDestinationNode in Edge and Safari gets not initialized correctly.\n                proxy.context.destination.channelCount, \n                // Bug #17: Safari does not yet expose the length.\n                proxy.context.length, nativeOfflineAudioContext.sampleRate);\n                await renderInputsOfAudioNode(proxy, partialOfflineAudioContext, partialOfflineAudioContext.destination);\n                const renderedBuffer = await renderNativeOfflineAudioContext(partialOfflineAudioContext);\n                nativeAudioBufferSourceNode.buffer = filterFullBuffer(renderedBuffer, nativeOfflineAudioContext, feedback, feedforward);\n                nativeAudioBufferSourceNode.start(0);\n                return nativeAudioBufferSourceNode;\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeIIRFilterNode);\n            return nativeIIRFilterNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeAudioNode !== undefined) {\n                    return Promise.resolve(renderedNativeAudioNode);\n                }\n                return createAudioNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/iir-filter-node-renderer-factory.js.map","import { createInvalidAccessError } from '../factories/invalid-access-error';\nexport const wrapIIRFilterNodeGetFrequencyResponseMethod = (nativeIIRFilterNode) => {\n    nativeIIRFilterNode.getFrequencyResponse = ((getFrequencyResponse) => {\n        return (frequencyHz, magResponse, phaseResponse) => {\n            if ((frequencyHz.length !== magResponse.length) || (magResponse.length !== phaseResponse.length)) {\n                throw createInvalidAccessError();\n            }\n            return getFrequencyResponse.call(nativeIIRFilterNode, frequencyHz, magResponse, phaseResponse);\n        };\n    })(nativeIIRFilterNode.getFrequencyResponse);\n};\n//# sourceMappingURL=/build/es2018/helpers/wrap-iir-filter-node-get-frequency-response-method.js.map","import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeIIRFilterNodeFactory = (createNativeAudioNode, createNativeIIRFilterNodeFaker) => {\n    return (nativeContext, baseLatency, options) => {\n        // Bug #9: Safari does not support IIRFilterNodes.\n        if (nativeContext.createIIRFilter === undefined) {\n            return createNativeIIRFilterNodeFaker(nativeContext, baseLatency, options);\n        }\n        const nativeIIRFilterNode = createNativeAudioNode(nativeContext, (ntvCntxt) => {\n            return ntvCntxt.createIIRFilter(options.feedforward, options.feedback);\n        });\n        assignNativeAudioNodeOptions(nativeIIRFilterNode, options);\n        return nativeIIRFilterNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-iir-filter-node-factory.js.map","import { EventTarget } from '../event-target';\nimport { CONTEXT_STORE } from '../globals';\nimport { wrapEventListener } from '../helpers/wrap-event-listener';\nexport const createMinimalBaseAudioContextConstructor = (audioDestinationNodeConstructor, createAudioListener) => {\n    return class MinimalBaseAudioContext extends EventTarget {\n        constructor(_nativeContext, numberOfChannels) {\n            super(_nativeContext);\n            this._nativeContext = _nativeContext;\n            CONTEXT_STORE.set(this, _nativeContext);\n            // Bug #93: Edge will set the sampleRate of an AudioContext to zero when it is closed.\n            const sampleRate = _nativeContext.sampleRate;\n            Object.defineProperty(_nativeContext, 'sampleRate', {\n                get: () => sampleRate\n            });\n            this._destination = new audioDestinationNodeConstructor(this, numberOfChannels);\n            this._listener = createAudioListener(this, _nativeContext);\n            this._onstatechange = null;\n        }\n        get currentTime() {\n            return this._nativeContext.currentTime;\n        }\n        get destination() {\n            return this._destination;\n        }\n        get listener() {\n            return this._listener;\n        }\n        get onstatechange() {\n            return this._onstatechange;\n        }\n        set onstatechange(value) {\n            const wrappedListener = wrapEventListener(this, value);\n            this._nativeContext.onstatechange = wrappedListener;\n            const nativeOnStateChange = this._nativeContext.onstatechange;\n            this._onstatechange = (nativeOnStateChange === wrappedListener) ? value : nativeOnStateChange;\n        }\n        get sampleRate() {\n            return this._nativeContext.sampleRate;\n        }\n        get state() {\n            return this._nativeContext.state;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/minimal-base-audio-context-constructor.js.map","import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nexport const createAudioListenerFactory = (createAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeScriptProcessorNode, isNativeOfflineAudioContext) => {\n    return (context, nativeContext) => {\n        const nativeListener = nativeContext.listener;\n        // Bug #117: Only Chrome & Opera support the new interface already.\n        const createFakeAudioParams = () => {\n            const channelMergerNode = createNativeChannelMergerNode(nativeContext, { channelCount: 1, channelCountMode: 'explicit', channelInterpretation: 'speakers', numberOfInputs: 9 });\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, 256, 9, 0);\n            const createFakeAudioParam = (input, value) => {\n                const constantSourceNode = createNativeConstantSourceNode(nativeContext, { channelCount: 1, channelCountMode: 'explicit', channelInterpretation: 'discrete', offset: value });\n                constantSourceNode.connect(channelMergerNode, 0, input);\n                // @todo This should be stopped when the context is closed.\n                constantSourceNode.start();\n                Object.defineProperty(constantSourceNode.offset, 'defaultValue', {\n                    get() {\n                        return value;\n                    }\n                });\n                /*\n                 * Bug #62 & #74: Edge & Safari do not support ConstantSourceNodes and do not export the correct values for maxValue and\n                 * minValue for GainNodes.\n                 */\n                return createAudioParam({ context }, isOffline, constantSourceNode.offset, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            };\n            let lastOrientation = [0, 0, -1, 0, 1, 0];\n            let lastPosition = [0, 0, 0];\n            scriptProcessorNode.onaudioprocess = ({ inputBuffer }) => {\n                const orientation = [\n                    inputBuffer.getChannelData(0)[0],\n                    inputBuffer.getChannelData(1)[0],\n                    inputBuffer.getChannelData(2)[0],\n                    inputBuffer.getChannelData(3)[0],\n                    inputBuffer.getChannelData(4)[0],\n                    inputBuffer.getChannelData(5)[0]\n                ];\n                if (orientation.some((value, index) => (value !== lastOrientation[index]))) {\n                    nativeListener.setOrientation(...orientation); // tslint:disable-line:deprecation\n                    lastOrientation = orientation;\n                }\n                const positon = [\n                    inputBuffer.getChannelData(6)[0],\n                    inputBuffer.getChannelData(7)[0],\n                    inputBuffer.getChannelData(8)[0]\n                ];\n                if (positon.some((value, index) => (value !== lastPosition[index]))) {\n                    nativeListener.setPosition(...positon); // tslint:disable-line:deprecation\n                    lastPosition = positon;\n                }\n            };\n            channelMergerNode.connect(scriptProcessorNode);\n            return {\n                forwardX: createFakeAudioParam(0, 0),\n                forwardY: createFakeAudioParam(1, 0),\n                forwardZ: createFakeAudioParam(2, -1),\n                positionX: createFakeAudioParam(6, 0),\n                positionY: createFakeAudioParam(7, 0),\n                positionZ: createFakeAudioParam(8, 0),\n                upX: createFakeAudioParam(3, 0),\n                upY: createFakeAudioParam(4, 1),\n                upZ: createFakeAudioParam(5, 0)\n            };\n        };\n        const { forwardX, forwardY, forwardZ, positionX, positionY, positionZ, upX, upY, upZ } = (nativeListener.forwardX === undefined)\n            ? createFakeAudioParams()\n            : nativeListener;\n        return {\n            get forwardX() {\n                return forwardX;\n            },\n            get forwardY() {\n                return forwardY;\n            },\n            get forwardZ() {\n                return forwardZ;\n            },\n            get positionX() {\n                return positionX;\n            },\n            get positionY() {\n                return positionY;\n            },\n            get positionZ() {\n                return positionZ;\n            },\n            get upX() {\n                return upX;\n            },\n            get upY() {\n                return upY;\n            },\n            get upZ() {\n                return upZ;\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-listener-factory.js.map","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { wrapAudioScheduledSourceNodeStartMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters';\nimport { wrapAudioScheduledSourceNodeStopMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters';\nexport const createNativeOscillatorNodeFactory = (cacheTestResult, createNativeAudioNode, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls) => {\n    return (nativeContext, options) => {\n        const nativeOscillatorNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createOscillator());\n        assignNativeAudioNodeOptions(nativeOscillatorNode, options);\n        assignNativeAudioNodeAudioParamValue(nativeOscillatorNode, options, 'detune');\n        assignNativeAudioNodeAudioParamValue(nativeOscillatorNode, options, 'frequency');\n        if (options.periodicWave !== undefined) {\n            nativeOscillatorNode.setPeriodicWave(options.periodicWave);\n        }\n        else {\n            assignNativeAudioNodeOption(nativeOscillatorNode, options, 'type');\n        }\n        // Bug #44: Only Chrome & Opera throw a RangeError yet.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(nativeContext))) {\n            wrapAudioScheduledSourceNodeStartMethodNegativeParameters(nativeOscillatorNode);\n        }\n        // Bug #19: Safari does not ignore calls to stop() of an already stopped AudioBufferSourceNode.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, () => testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport(nativeContext))) {\n            wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls(nativeOscillatorNode, nativeContext);\n        }\n        // Bug #44: No browser does throw a RangeError yet.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(nativeContext))) {\n            wrapAudioScheduledSourceNodeStopMethodNegativeParameters(nativeOscillatorNode);\n        }\n        return nativeOscillatorNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-oscillator-node-factory.js.map","import { connectAudioParam } from '../helpers/connect-audio-param';\nimport { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { renderAutomation } from '../helpers/render-automation';\nimport { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nexport const createOscillatorNodeRendererFactory = (createNativeOscillatorNode) => {\n    return () => {\n        const renderedNativeOscillatorNodes = new WeakMap();\n        let periodicWave = null;\n        let start = null;\n        let stop = null;\n        const createOscillatorNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeOscillatorNode = getNativeAudioNode(proxy);\n            // If the initially used nativeOscillatorNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeOscillatorNodeIsOwnedByContext = isOwnedByContext(nativeOscillatorNode, nativeOfflineAudioContext);\n            if (!nativeOscillatorNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeOscillatorNode.channelCount,\n                    channelCountMode: nativeOscillatorNode.channelCountMode,\n                    channelInterpretation: nativeOscillatorNode.channelInterpretation,\n                    detune: nativeOscillatorNode.detune.value,\n                    frequency: nativeOscillatorNode.frequency.value,\n                    periodicWave: (periodicWave === null) ? undefined : periodicWave,\n                    type: nativeOscillatorNode.type\n                };\n                nativeOscillatorNode = createNativeOscillatorNode(nativeOfflineAudioContext, options);\n                if (start !== null) {\n                    nativeOscillatorNode.start(start);\n                }\n                if (stop !== null) {\n                    nativeOscillatorNode.stop(stop);\n                }\n            }\n            renderedNativeOscillatorNodes.set(nativeOfflineAudioContext, nativeOscillatorNode);\n            if (!nativeOscillatorNodeIsOwnedByContext) {\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune);\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency);\n            }\n            else {\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.detune);\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.frequency);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeOscillatorNode);\n            return nativeOscillatorNode;\n        };\n        return {\n            set periodicWave(value) {\n                periodicWave = value;\n            },\n            set start(value) {\n                start = value;\n            },\n            set stop(value) {\n                stop = value;\n            },\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeOscillatorNode = renderedNativeOscillatorNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeOscillatorNode !== undefined) {\n                    return Promise.resolve(renderedNativeOscillatorNode);\n                }\n                return createOscillatorNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/oscillator-node-renderer-factory.js.map","import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { interceptConnections } from '../helpers/intercept-connections';\nexport const createNativeWaveShaperNodeFakerFactory = (createInvalidStateError, createNativeAudioNode, createNativeGainNode) => {\n    return (nativeContext, { curve, oversample, ...audioNodeOptions }) => {\n        const negativeWaveShaperNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createWaveShaper());\n        const positiveWaveShaperNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createWaveShaper());\n        assignNativeAudioNodeOptions(negativeWaveShaperNode, audioNodeOptions);\n        assignNativeAudioNodeOptions(positiveWaveShaperNode, audioNodeOptions);\n        const inputGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, gain: 1 });\n        const invertGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, gain: -1 });\n        const outputGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, gain: 1 });\n        const revertGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, gain: -1 });\n        inputGainNode.connect(negativeWaveShaperNode);\n        negativeWaveShaperNode.connect(outputGainNode);\n        inputGainNode.connect(invertGainNode);\n        invertGainNode.connect(positiveWaveShaperNode);\n        positiveWaveShaperNode.connect(revertGainNode);\n        revertGainNode.connect(outputGainNode);\n        let unmodifiedCurve = null;\n        const nativeWaveShaperNodeFaker = {\n            get bufferSize() {\n                return undefined;\n            },\n            get channelCount() {\n                return negativeWaveShaperNode.channelCount;\n            },\n            set channelCount(value) {\n                inputGainNode.channelCount = value;\n                invertGainNode.channelCount = value;\n                negativeWaveShaperNode.channelCount = value;\n                outputGainNode.channelCount = value;\n                positiveWaveShaperNode.channelCount = value;\n                revertGainNode.channelCount = value;\n            },\n            get channelCountMode() {\n                return negativeWaveShaperNode.channelCountMode;\n            },\n            set channelCountMode(value) {\n                inputGainNode.channelCountMode = value;\n                invertGainNode.channelCountMode = value;\n                negativeWaveShaperNode.channelCountMode = value;\n                outputGainNode.channelCountMode = value;\n                positiveWaveShaperNode.channelCountMode = value;\n                revertGainNode.channelCountMode = value;\n            },\n            get channelInterpretation() {\n                return negativeWaveShaperNode.channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                inputGainNode.channelInterpretation = value;\n                invertGainNode.channelInterpretation = value;\n                negativeWaveShaperNode.channelInterpretation = value;\n                outputGainNode.channelInterpretation = value;\n                positiveWaveShaperNode.channelInterpretation = value;\n                revertGainNode.channelInterpretation = value;\n            },\n            get context() {\n                return negativeWaveShaperNode.context;\n            },\n            get curve() {\n                return unmodifiedCurve;\n            },\n            set curve(value) {\n                // Bug #102: Safari does not throw an InvalidStateError when the curve has less than two samples.\n                if (curve !== null && curve.length < 2) {\n                    throw createInvalidStateError();\n                }\n                if (value === null) {\n                    negativeWaveShaperNode.curve = value;\n                    positiveWaveShaperNode.curve = value;\n                }\n                else {\n                    const curveLength = value.length;\n                    const negativeCurve = new Float32Array(curveLength + 2 - (curveLength % 2));\n                    const positiveCurve = new Float32Array(curveLength + 2 - (curveLength % 2));\n                    negativeCurve[0] = value[0];\n                    positiveCurve[0] = -value[curveLength - 1];\n                    const length = Math.ceil((curveLength + 1) / 2);\n                    const centerIndex = ((curveLength + 1) / 2) - 1;\n                    for (let i = 1; i < length; i += 1) {\n                        const theoreticIndex = (i / length) * centerIndex;\n                        const lowerIndex = Math.floor(theoreticIndex);\n                        const upperIndex = Math.ceil(theoreticIndex);\n                        negativeCurve[i] = (lowerIndex === upperIndex)\n                            ? value[lowerIndex]\n                            : ((1 - (theoreticIndex - lowerIndex)) * value[lowerIndex])\n                                + ((1 - (upperIndex - theoreticIndex)) * value[upperIndex]);\n                        positiveCurve[i] = (lowerIndex === upperIndex)\n                            ? -value[curveLength - 1 - lowerIndex]\n                            : -((1 - (theoreticIndex - lowerIndex)) * value[curveLength - 1 - lowerIndex])\n                                - ((1 - (upperIndex - theoreticIndex)) * value[curveLength - 1 - upperIndex]);\n                    }\n                    negativeCurve[length] = (curveLength % 2 === 1) ? value[length - 1] : (value[length - 2] + value[length - 1]) / 2;\n                    negativeWaveShaperNode.curve = negativeCurve;\n                    positiveWaveShaperNode.curve = positiveCurve;\n                }\n                unmodifiedCurve = value;\n            },\n            get inputs() {\n                return [inputGainNode];\n            },\n            get numberOfInputs() {\n                return negativeWaveShaperNode.numberOfInputs;\n            },\n            get numberOfOutputs() {\n                return negativeWaveShaperNode.numberOfOutputs;\n            },\n            get oversample() {\n                return negativeWaveShaperNode.oversample;\n            },\n            set oversample(value) {\n                negativeWaveShaperNode.oversample = value;\n                positiveWaveShaperNode.oversample = value;\n            },\n            addEventListener(...args) {\n                return inputGainNode.addEventListener(args[0], args[1], args[2]);\n            },\n            dispatchEvent(...args) {\n                return inputGainNode.dispatchEvent(args[0]);\n            },\n            removeEventListener(...args) {\n                return inputGainNode.removeEventListener(args[0], args[1], args[2]);\n            }\n        };\n        if (curve !== nativeWaveShaperNodeFaker.curve) {\n            nativeWaveShaperNodeFaker.curve = curve;\n        }\n        if (oversample !== nativeWaveShaperNodeFaker.oversample) {\n            nativeWaveShaperNodeFaker.oversample = oversample;\n        }\n        return interceptConnections(nativeWaveShaperNodeFaker, outputGainNode);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-wave-shaper-node-faker-factory.js.map","import { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeWaveShaperNodeFactory = (createInvalidStateError, createNativeAudioNode, createNativeWaveShaperNodeFaker) => {\n    return (nativeContext, options) => {\n        const nativeWaveShaperNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createWaveShaper());\n        try {\n            // Bug #102: Safari does not throw an InvalidStateError when the curve has less than two samples.\n            // Bug #119: Safari does not correctly map the values. Bug #102 is only used to detect Safari in this case.\n            nativeWaveShaperNode.curve = new Float32Array([1]);\n            return createNativeWaveShaperNodeFaker(nativeContext, options);\n        }\n        catch ( /* Ignore errors. */_a) { /* Ignore errors. */ }\n        assignNativeAudioNodeOptions(nativeWaveShaperNode, options);\n        const curve = options.curve;\n        // Bug #104: Chrome will throw an InvalidAccessError when the curve has less than two samples.\n        if (curve !== null && curve.length < 2) {\n            throw createInvalidStateError();\n        }\n        assignNativeAudioNodeOption(nativeWaveShaperNode, options, 'curve');\n        assignNativeAudioNodeOption(nativeWaveShaperNode, options, 'oversample');\n        return nativeWaveShaperNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-wave-shaper-node-factory.js.map","import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { connectNativeAudioNodeToNativeAudioNode } from '../helpers/connect-native-audio-node-to-native-audio-node';\nimport { interceptConnections } from '../helpers/intercept-connections';\nexport const createNativePannerNodeFakerFactory = (createInvalidStateError, createNativeAudioNode, createNativeChannelMergerNode, createNativeGainNode, createNativeScriptProcessorNode, createNativeWaveShaperNode, createNotSupportedError) => {\n    return (nativeContext, { coneInnerAngle, coneOuterAngle, coneOuterGain, distanceModel, maxDistance, orientationX, orientationY, orientationZ, panningModel, positionX, positionY, positionZ, refDistance, rolloffFactor, ...audioNodeOptions }) => {\n        const pannerNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createPanner());\n        // Bug #125: Safari does not throw an error yet.\n        if (audioNodeOptions.channelCount > 2) {\n            throw createNotSupportedError();\n        }\n        // Bug #126: Safari does not throw an error yet.\n        if (audioNodeOptions.channelCountMode === 'max') {\n            throw createNotSupportedError();\n        }\n        assignNativeAudioNodeOptions(pannerNode, audioNodeOptions);\n        const SINGLE_CHANNEL_OPTIONS = {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete'\n        };\n        const channelMergerNode = createNativeChannelMergerNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, channelInterpretation: 'speakers', numberOfInputs: 6 });\n        const inputGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, gain: 1 });\n        const orientationXGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 1 });\n        const orientationYGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        const orientationZGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        const positionXGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        const positionYGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        const positionZGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, 256, 6, 0);\n        const waveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, curve: new Float32Array([1, 1]), oversample: 'none' });\n        let lastOrientation = [1, 0, 0];\n        let lastPosition = [0, 0, 0];\n        scriptProcessorNode.onaudioprocess = ({ inputBuffer }) => {\n            const orientation = [\n                inputBuffer.getChannelData(0)[0],\n                inputBuffer.getChannelData(1)[0],\n                inputBuffer.getChannelData(2)[0]\n            ];\n            if (orientation.some((value, index) => (value !== lastOrientation[index]))) {\n                pannerNode.setOrientation(...orientation); // tslint:disable-line:deprecation\n                lastOrientation = orientation;\n            }\n            const positon = [\n                inputBuffer.getChannelData(6)[0],\n                inputBuffer.getChannelData(7)[0],\n                inputBuffer.getChannelData(8)[0]\n            ];\n            if (positon.some((value, index) => (value !== lastPosition[index]))) {\n                pannerNode.setPosition(...positon); // tslint:disable-line:deprecation\n                lastPosition = positon;\n            }\n        };\n        inputGainNode.connect(pannerNode);\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        connectNativeAudioNodeToNativeAudioNode(inputGainNode, waveShaperNode, 0, 0);\n        waveShaperNode.connect(orientationXGainNode);\n        waveShaperNode.connect(orientationYGainNode);\n        waveShaperNode.connect(orientationZGainNode);\n        waveShaperNode.connect(positionXGainNode);\n        waveShaperNode.connect(positionYGainNode);\n        waveShaperNode.connect(positionZGainNode);\n        orientationXGainNode.connect(channelMergerNode);\n        orientationYGainNode.connect(channelMergerNode);\n        orientationZGainNode.connect(channelMergerNode);\n        positionXGainNode.connect(channelMergerNode);\n        positionYGainNode.connect(channelMergerNode);\n        positionZGainNode.connect(channelMergerNode);\n        channelMergerNode.connect(scriptProcessorNode);\n        Object.defineProperty(orientationYGainNode.gain, 'defaultValue', { get: () => 0 });\n        Object.defineProperty(orientationZGainNode.gain, 'defaultValue', { get: () => 0 });\n        Object.defineProperty(positionXGainNode.gain, 'defaultValue', { get: () => 0 });\n        Object.defineProperty(positionYGainNode.gain, 'defaultValue', { get: () => 0 });\n        Object.defineProperty(positionZGainNode.gain, 'defaultValue', { get: () => 0 });\n        const nativePannerNodeFaker = {\n            get bufferSize() {\n                return undefined;\n            },\n            get channelCount() {\n                return pannerNode.channelCount;\n            },\n            set channelCount(value) {\n                // Bug #125: Safari does not throw an error yet.\n                if (value > 2) {\n                    throw createNotSupportedError();\n                }\n                inputGainNode.channelCount = value;\n                pannerNode.channelCount = value;\n            },\n            get channelCountMode() {\n                return pannerNode.channelCountMode;\n            },\n            set channelCountMode(value) {\n                // Bug #126: Safari does not throw an error yet.\n                if (value === 'max') {\n                    throw createNotSupportedError();\n                }\n                inputGainNode.channelCountMode = value;\n                pannerNode.channelCountMode = value;\n            },\n            get channelInterpretation() {\n                return pannerNode.channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                inputGainNode.channelInterpretation = value;\n                pannerNode.channelInterpretation = value;\n            },\n            get coneInnerAngle() {\n                return pannerNode.coneInnerAngle;\n            },\n            set coneInnerAngle(value) {\n                pannerNode.coneInnerAngle = value;\n            },\n            get coneOuterAngle() {\n                return pannerNode.coneOuterAngle;\n            },\n            set coneOuterAngle(value) {\n                pannerNode.coneOuterAngle = value;\n            },\n            get coneOuterGain() {\n                return pannerNode.coneOuterGain;\n            },\n            set coneOuterGain(value) {\n                // Bug #127: Edge & Safari do not throw an InvalidStateError yet.\n                if (value < 0 || value > 1) {\n                    throw createInvalidStateError();\n                }\n                pannerNode.coneOuterGain = value;\n            },\n            get context() {\n                return pannerNode.context;\n            },\n            get distanceModel() {\n                return pannerNode.distanceModel;\n            },\n            set distanceModel(value) {\n                pannerNode.distanceModel = value;\n            },\n            get inputs() {\n                return [inputGainNode];\n            },\n            get maxDistance() {\n                return pannerNode.maxDistance;\n            },\n            set maxDistance(value) {\n                // Bug #128: Edge & Safari do not throw an error yet.\n                if (value < 0) {\n                    throw new RangeError();\n                }\n                pannerNode.maxDistance = value;\n            },\n            get numberOfInputs() {\n                return pannerNode.numberOfInputs;\n            },\n            get numberOfOutputs() {\n                return pannerNode.numberOfOutputs;\n            },\n            get orientationX() {\n                return orientationXGainNode.gain;\n            },\n            get orientationY() {\n                return orientationYGainNode.gain;\n            },\n            get orientationZ() {\n                return orientationZGainNode.gain;\n            },\n            get panningModel() {\n                return pannerNode.panningModel;\n            },\n            set panningModel(value) {\n                pannerNode.panningModel = value;\n                // Bug #123: Edge does not support HRTF as panningModel.\n                if (pannerNode.panningModel !== value && value === 'HRTF') {\n                    throw createNotSupportedError();\n                }\n            },\n            get positionX() {\n                return positionXGainNode.gain;\n            },\n            get positionY() {\n                return positionYGainNode.gain;\n            },\n            get positionZ() {\n                return positionZGainNode.gain;\n            },\n            get refDistance() {\n                return pannerNode.refDistance;\n            },\n            set refDistance(value) {\n                // Bug #129: Edge & Safari do not throw an error yet.\n                if (value < 0) {\n                    throw new RangeError();\n                }\n                pannerNode.refDistance = value;\n            },\n            get rolloffFactor() {\n                return pannerNode.rolloffFactor;\n            },\n            set rolloffFactor(value) {\n                // Bug #130: Edge & Safari do not throw an error yet.\n                if (value < 0) {\n                    throw new RangeError();\n                }\n                pannerNode.rolloffFactor = value;\n            },\n            addEventListener(...args) {\n                return inputGainNode.addEventListener(args[0], args[1], args[2]);\n            },\n            dispatchEvent(...args) {\n                return inputGainNode.dispatchEvent(args[0]);\n            },\n            removeEventListener(...args) {\n                return inputGainNode.removeEventListener(args[0], args[1], args[2]);\n            }\n        };\n        if (coneInnerAngle !== nativePannerNodeFaker.coneInnerAngle) {\n            nativePannerNodeFaker.coneInnerAngle = coneInnerAngle;\n        }\n        if (coneOuterAngle !== nativePannerNodeFaker.coneOuterAngle) {\n            nativePannerNodeFaker.coneOuterAngle = coneOuterAngle;\n        }\n        if (coneOuterGain !== nativePannerNodeFaker.coneOuterGain) {\n            nativePannerNodeFaker.coneOuterGain = coneOuterGain;\n        }\n        if (distanceModel !== nativePannerNodeFaker.distanceModel) {\n            nativePannerNodeFaker.distanceModel = distanceModel;\n        }\n        if (maxDistance !== nativePannerNodeFaker.maxDistance) {\n            nativePannerNodeFaker.maxDistance = maxDistance;\n        }\n        if (orientationX !== nativePannerNodeFaker.orientationX.value) {\n            nativePannerNodeFaker.orientationX.value = orientationX;\n        }\n        if (orientationY !== nativePannerNodeFaker.orientationY.value) {\n            nativePannerNodeFaker.orientationY.value = orientationY;\n        }\n        if (orientationZ !== nativePannerNodeFaker.orientationZ.value) {\n            nativePannerNodeFaker.orientationZ.value = orientationZ;\n        }\n        if (panningModel !== nativePannerNodeFaker.panningModel) {\n            nativePannerNodeFaker.panningModel = panningModel;\n        }\n        if (positionX !== nativePannerNodeFaker.positionX.value) {\n            nativePannerNodeFaker.positionX.value = positionX;\n        }\n        if (positionY !== nativePannerNodeFaker.positionY.value) {\n            nativePannerNodeFaker.positionY.value = positionY;\n        }\n        if (positionZ !== nativePannerNodeFaker.positionZ.value) {\n            nativePannerNodeFaker.positionZ.value = positionZ;\n        }\n        if (refDistance !== nativePannerNodeFaker.refDistance) {\n            nativePannerNodeFaker.refDistance = refDistance;\n        }\n        if (rolloffFactor !== nativePannerNodeFaker.rolloffFactor) {\n            nativePannerNodeFaker.rolloffFactor = rolloffFactor;\n        }\n        return interceptConnections(nativePannerNodeFaker, pannerNode);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-panner-node-faker-factory.js.map","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativePannerNodeFactory = (createNativeAudioNode, createNativePannerNodeFaker) => {\n    return (nativeContext, options) => {\n        const nativePannerNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createPanner());\n        // Bug #124: Edge & Safari do not support modifying the orientation and the position with AudioParams.\n        if (nativePannerNode.orientationX === undefined) {\n            return createNativePannerNodeFaker(nativeContext, options);\n        }\n        assignNativeAudioNodeOptions(nativePannerNode, options);\n        assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'orientationX');\n        assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'orientationY');\n        assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'orientationZ');\n        assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'positionX');\n        assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'positionY');\n        assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'positionZ');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'coneInnerAngle');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'coneOuterAngle');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'coneOuterGain');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'distanceModel');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'maxDistance');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'panningModel');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'refDistance');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'rolloffFactor');\n        return nativePannerNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-panner-node-factory.js.map","import { connectAudioParam } from '../helpers/connect-audio-param';\nimport { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { renderAutomation } from '../helpers/render-automation';\nimport { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nexport const createPannerNodeRendererFactory = (createNativePannerNode) => {\n    return () => {\n        const renderedNativePannerNodes = new WeakMap();\n        const createPannerNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativePannerNode = getNativeAudioNode(proxy);\n            // If the initially used nativePannerNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativePannerNodeIsOwnedByContext = isOwnedByContext(nativePannerNode, nativeOfflineAudioContext);\n            if (!nativePannerNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativePannerNode.channelCount,\n                    channelCountMode: nativePannerNode.channelCountMode,\n                    channelInterpretation: nativePannerNode.channelInterpretation,\n                    coneInnerAngle: nativePannerNode.coneInnerAngle,\n                    coneOuterAngle: nativePannerNode.coneOuterAngle,\n                    coneOuterGain: nativePannerNode.coneOuterGain,\n                    distanceModel: nativePannerNode.distanceModel,\n                    maxDistance: nativePannerNode.maxDistance,\n                    orientationX: nativePannerNode.orientationX.value,\n                    orientationY: nativePannerNode.orientationY.value,\n                    orientationZ: nativePannerNode.orientationZ.value,\n                    panningModel: nativePannerNode.panningModel,\n                    positionX: nativePannerNode.positionX.value,\n                    positionY: nativePannerNode.positionY.value,\n                    positionZ: nativePannerNode.positionZ.value,\n                    refDistance: nativePannerNode.refDistance,\n                    rolloffFactor: nativePannerNode.rolloffFactor\n                };\n                nativePannerNode = createNativePannerNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativePannerNodes.set(nativeOfflineAudioContext, nativePannerNode);\n            if (!nativePannerNodeIsOwnedByContext) {\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.orientationX, nativePannerNode.orientationX);\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.orientationY, nativePannerNode.orientationY);\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.orientationZ, nativePannerNode.orientationZ);\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.positionX, nativePannerNode.positionX);\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.positionY, nativePannerNode.positionY);\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.positionZ, nativePannerNode.positionZ);\n            }\n            else {\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.orientationX);\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.orientationY);\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.orientationZ);\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.positionX);\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.positionY);\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.positionZ);\n            }\n            if (nativePannerNode.inputs !== undefined) {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativePannerNode.inputs[0]);\n            }\n            else {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativePannerNode);\n            }\n            return nativePannerNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativePannerNode = renderedNativePannerNodes.get(nativeOfflineAudioContext);\n                if (renderedNativePannerNode !== undefined) {\n                    return Promise.resolve(renderedNativePannerNode);\n                }\n                return createPannerNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/panner-node-renderer-factory.js.map","export const createNativePeriodicWaveFactory = (getBackupNativeContext) => {\n    return (nativeContext, { disableNormalization, imag, real }) => {\n        // Bug #50: Only Edge does currently not allow to create AudioNodes (and other objects) on a closed context yet.\n        const backupNativeContext = getBackupNativeContext(nativeContext);\n        // @todo Edge, Firefox & Safari do only accept Float32Arrays.\n        const wrappedImag = new Float32Array(imag);\n        const wrappedReal = new Float32Array(real);\n        if (backupNativeContext !== null) {\n            return backupNativeContext.createPeriodicWave(wrappedReal, wrappedImag, { disableNormalization });\n        }\n        return nativeContext.createPeriodicWave(wrappedReal, wrappedImag, { disableNormalization });\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-periodic-wave-factory.js.map","import { interceptConnections } from '../helpers/intercept-connections';\nexport const createNativeStereoPannerNodeFakerFactory = (createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeGainNode, createNativeWaveShaperNode, createNotSupportedError) => {\n    // The curve has a size of 14bit plus 1 value to have an exact representation for zero. This value has been determined experimentally.\n    const CURVE_SIZE = 16385;\n    const DC_CURVE = new Float32Array([1, 1]);\n    const HALF_PI = Math.PI / 2;\n    const SINGLE_CHANNEL_OPTIONS = { channelCount: 1, channelCountMode: 'explicit', channelInterpretation: 'discrete' };\n    const SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS = { ...SINGLE_CHANNEL_OPTIONS, oversample: 'none' };\n    const buildInternalGraphForMono = (nativeContext, inputGainNode, panGainNode, channelMergerNode) => {\n        const leftWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        const rightWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        for (let i = 0; i < CURVE_SIZE; i += 1) {\n            const x = (i / (CURVE_SIZE - 1)) * HALF_PI;\n            leftWaveShaperCurve[i] = Math.cos(x);\n            rightWaveShaperCurve[i] = Math.sin(x);\n        }\n        const leftGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const leftWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: leftWaveShaperCurve });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const panWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: DC_CURVE });\n        const rightGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const rightWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: rightWaveShaperCurve });\n        inputGainNode.connect(leftGainNode);\n        inputGainNode.connect(panWaveShaperNode.inputs[0]);\n        inputGainNode.connect(rightGainNode);\n        panWaveShaperNode.connect(panGainNode);\n        panGainNode.connect(leftWaveShaperNode.inputs[0]);\n        panGainNode.connect(rightWaveShaperNode.inputs[0]);\n        leftWaveShaperNode.connect(leftGainNode.gain);\n        rightWaveShaperNode.connect(rightGainNode.gain);\n        leftGainNode.connect(channelMergerNode, 0, 0);\n        rightGainNode.connect(channelMergerNode, 0, 1);\n        return [leftGainNode, rightGainNode];\n    };\n    const buildInternalGraphForStereo = (nativeContext, inputGainNode, panGainNode, channelMergerNode) => {\n        const leftInputForLeftOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        const leftInputForRightOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        const rightInputForLeftOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        const rightInputForRightOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        const centerIndex = Math.floor(CURVE_SIZE / 2);\n        for (let i = 0; i < CURVE_SIZE; i += 1) {\n            if (i > centerIndex) {\n                const x = ((i - centerIndex) / (CURVE_SIZE - 1 - centerIndex)) * HALF_PI;\n                leftInputForLeftOutputWaveShaperCurve[i] = Math.cos(x);\n                leftInputForRightOutputWaveShaperCurve[i] = Math.sin(x);\n                rightInputForLeftOutputWaveShaperCurve[i] = 0;\n                rightInputForRightOutputWaveShaperCurve[i] = 1;\n            }\n            else {\n                const x = (i / (CURVE_SIZE - 1 - centerIndex)) * HALF_PI;\n                leftInputForLeftOutputWaveShaperCurve[i] = 1;\n                leftInputForRightOutputWaveShaperCurve[i] = 0;\n                rightInputForLeftOutputWaveShaperCurve[i] = Math.cos(x);\n                rightInputForRightOutputWaveShaperCurve[i] = Math.sin(x);\n            }\n        }\n        const channelSplitterNode = createNativeChannelSplitterNode(nativeContext, {\n            channelCount: 2,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete',\n            numberOfOutputs: 2\n        });\n        const leftInputForLeftOutputGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const leftInputForLeftOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: leftInputForLeftOutputWaveShaperCurve });\n        const leftInputForRightOutputGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const leftInputForRightOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: leftInputForRightOutputWaveShaperCurve });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const panWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: DC_CURVE });\n        const rightInputForLeftOutputGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const rightInputForLeftOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: rightInputForLeftOutputWaveShaperCurve });\n        const rightInputForRightOutputGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const rightInputForRightOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: rightInputForRightOutputWaveShaperCurve });\n        inputGainNode.connect(channelSplitterNode);\n        inputGainNode.connect(panWaveShaperNode.inputs[0]);\n        channelSplitterNode.connect(leftInputForLeftOutputGainNode, 1);\n        channelSplitterNode.connect(leftInputForRightOutputGainNode, 1);\n        channelSplitterNode.connect(rightInputForLeftOutputGainNode, 1);\n        channelSplitterNode.connect(rightInputForRightOutputGainNode, 1);\n        panWaveShaperNode.connect(panGainNode);\n        panGainNode.connect(leftInputForLeftOutputWaveShaperNode.inputs[0]);\n        panGainNode.connect(leftInputForRightOutputWaveShaperNode.inputs[0]);\n        panGainNode.connect(rightInputForLeftOutputWaveShaperNode.inputs[0]);\n        panGainNode.connect(rightInputForRightOutputWaveShaperNode.inputs[0]);\n        leftInputForLeftOutputWaveShaperNode.connect(leftInputForLeftOutputGainNode.gain);\n        leftInputForRightOutputWaveShaperNode.connect(leftInputForRightOutputGainNode.gain);\n        rightInputForLeftOutputWaveShaperNode.connect(rightInputForLeftOutputGainNode.gain);\n        rightInputForRightOutputWaveShaperNode.connect(rightInputForRightOutputGainNode.gain);\n        leftInputForLeftOutputGainNode.connect(channelMergerNode, 0, 0);\n        rightInputForLeftOutputGainNode.connect(channelMergerNode, 0, 0);\n        leftInputForRightOutputGainNode.connect(channelMergerNode, 0, 1);\n        rightInputForRightOutputGainNode.connect(channelMergerNode, 0, 1);\n        return [\n            leftInputForLeftOutputGainNode,\n            rightInputForLeftOutputGainNode,\n            leftInputForRightOutputGainNode,\n            rightInputForRightOutputGainNode\n        ];\n    };\n    const buildInternalGraph = (nativeContext, channelCount, inputGainNode, panGainNode, channelMergerNode) => {\n        if (channelCount === 1) {\n            return buildInternalGraphForMono(nativeContext, inputGainNode, panGainNode, channelMergerNode);\n        }\n        if (channelCount === 2) {\n            return buildInternalGraphForStereo(nativeContext, inputGainNode, panGainNode, channelMergerNode);\n        }\n        throw createNotSupportedError();\n    };\n    return (nativeContext, { channelCount, channelCountMode, pan, ...audioNodeOptions }) => {\n        if (channelCountMode === 'max') {\n            throw createNotSupportedError();\n        }\n        const channelMergerNode = createNativeChannelMergerNode(nativeContext, {\n            ...audioNodeOptions,\n            channelCount: 1,\n            channelCountMode,\n            numberOfInputs: 2\n        });\n        const inputGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, channelCount, channelCountMode, gain: 1 });\n        const panGainNode = createNativeGainNode(nativeContext, {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete',\n            gain: pan\n        });\n        let outputNodes = buildInternalGraph(nativeContext, channelCount, inputGainNode, panGainNode, channelMergerNode);\n        Object.defineProperty(panGainNode.gain, 'defaultValue', { get: () => 0 });\n        const nativeStereoPannerNodeFakerFactory = {\n            get bufferSize() {\n                return undefined;\n            },\n            get channelCount() {\n                return inputGainNode.channelCount;\n            },\n            set channelCount(value) {\n                if (inputGainNode.channelCount !== value) {\n                    inputGainNode.disconnect();\n                    outputNodes.forEach((outputNode) => outputNode.disconnect());\n                    outputNodes = buildInternalGraph(nativeContext, value, inputGainNode, panGainNode, channelMergerNode);\n                }\n                inputGainNode.channelCount = value;\n            },\n            get channelCountMode() {\n                return inputGainNode.channelCountMode;\n            },\n            set channelCountMode(value) {\n                if (value === 'clamped-max' || value === 'max') {\n                    throw createNotSupportedError();\n                }\n                inputGainNode.channelCountMode = value;\n            },\n            get channelInterpretation() {\n                return inputGainNode.channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                inputGainNode.channelInterpretation = value;\n            },\n            get context() {\n                return inputGainNode.context;\n            },\n            get inputs() {\n                return [inputGainNode];\n            },\n            get numberOfInputs() {\n                return inputGainNode.numberOfInputs;\n            },\n            get numberOfOutputs() {\n                return inputGainNode.numberOfOutputs;\n            },\n            get pan() {\n                return panGainNode.gain;\n            },\n            addEventListener(...args) {\n                return inputGainNode.addEventListener(args[0], args[1], args[2]);\n            },\n            dispatchEvent(...args) {\n                return inputGainNode.dispatchEvent(args[0]);\n            },\n            removeEventListener(...args) {\n                return inputGainNode.removeEventListener(args[0], args[1], args[2]);\n            }\n        };\n        return interceptConnections(nativeStereoPannerNodeFakerFactory, channelMergerNode);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-stereo-panner-node-faker-factory.js.map","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeStereoPannerNodeFactory = (createNativeAudioNode, createNativeStereoPannerNodeFaker, createNotSupportedError) => {\n    return (nativeContext, options) => createNativeAudioNode(nativeContext, (ntvCntxt) => {\n        const channelCountMode = options.channelCountMode;\n        /*\n         * Bug #105: The channelCountMode of 'clamped-max' should be supported. However it is not possible to write a polyfill for Safari\n         * which supports it and therefore it can't be supported at all.\n         */\n        if (channelCountMode === 'clamped-max') {\n            throw createNotSupportedError();\n        }\n        // Bug #105: Safari does not support the StereoPannerNode.\n        if (nativeContext.createStereoPanner === undefined) {\n            return createNativeStereoPannerNodeFaker(nativeContext, options);\n        }\n        const nativeStereoPannerNode = ntvCntxt.createStereoPanner();\n        assignNativeAudioNodeOptions(nativeStereoPannerNode, options);\n        assignNativeAudioNodeAudioParamValue(nativeStereoPannerNode, options, 'pan');\n        /*\n         * Bug #105: The channelCountMode of 'clamped-max' should be supported. However it is not possible to write a polyfill for Safari\n         * which supports it and therefore it can't be supported at all.\n         */\n        Object.defineProperty(nativeStereoPannerNode, 'channelCountMode', {\n            get: () => channelCountMode,\n            set: (value) => {\n                if (value !== channelCountMode) {\n                    throw createNotSupportedError();\n                }\n            }\n        });\n        return nativeStereoPannerNode;\n    });\n};\n//# sourceMappingURL=/build/es2018/factories/native-stereo-panner-node-factory.js.map","import { connectAudioParam } from '../helpers/connect-audio-param';\nimport { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { renderAutomation } from '../helpers/render-automation';\nimport { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nexport const createStereoPannerNodeRendererFactory = (createNativeStereoPannerNode) => {\n    return () => {\n        const renderedNativeStereoPannerNodes = new WeakMap();\n        const createStereoPannerNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeStereoPannerNode = getNativeAudioNode(proxy);\n            /*\n             * If the initially used nativeStereoPannerNode was not constructed on the same OfflineAudioContext it needs to be created\n             * again.\n             */\n            const nativeStereoPannerNodeIsOwnedByContext = isOwnedByContext(nativeStereoPannerNode, nativeOfflineAudioContext);\n            if (!nativeStereoPannerNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeStereoPannerNode.channelCount,\n                    channelCountMode: nativeStereoPannerNode.channelCountMode,\n                    channelInterpretation: nativeStereoPannerNode.channelInterpretation,\n                    pan: nativeStereoPannerNode.pan.value\n                };\n                nativeStereoPannerNode = createNativeStereoPannerNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeStereoPannerNodes.set(nativeOfflineAudioContext, nativeStereoPannerNode);\n            if (!nativeStereoPannerNodeIsOwnedByContext) {\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan);\n            }\n            else {\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.pan);\n            }\n            if (nativeStereoPannerNode.inputs !== undefined) {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode.inputs[0]);\n            }\n            else {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode);\n            }\n            return nativeStereoPannerNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeStereoPannerNode = renderedNativeStereoPannerNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeStereoPannerNode !== undefined) {\n                    return Promise.resolve(renderedNativeStereoPannerNode);\n                }\n                return createStereoPannerNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/stereo-panner-node-renderer-factory.js.map","import { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nexport const createWaveShaperNodeRendererFactory = (createNativeWaveShaperNode) => {\n    return () => {\n        const renderedNativeWaveShaperNodes = new WeakMap();\n        const createWaveShaperNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeWaveShaperNode = getNativeAudioNode(proxy);\n            // If the initially used nativeWaveShaperNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeWaveShaperNodeIsOwnedByContext = isOwnedByContext(nativeWaveShaperNode, nativeOfflineAudioContext);\n            if (!nativeWaveShaperNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeWaveShaperNode.channelCount,\n                    channelCountMode: nativeWaveShaperNode.channelCountMode,\n                    channelInterpretation: nativeWaveShaperNode.channelInterpretation,\n                    curve: nativeWaveShaperNode.curve,\n                    oversample: nativeWaveShaperNode.oversample\n                };\n                nativeWaveShaperNode = createNativeWaveShaperNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeWaveShaperNodes.set(nativeOfflineAudioContext, nativeWaveShaperNode);\n            if (nativeWaveShaperNode.inputs !== undefined) {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeWaveShaperNode.inputs[0]);\n            }\n            else {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeWaveShaperNode);\n            }\n            return nativeWaveShaperNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeWaveShaperNode = renderedNativeWaveShaperNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeWaveShaperNode !== undefined) {\n                    return Promise.resolve(renderedNativeWaveShaperNode);\n                }\n                return createWaveShaperNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/wave-shaper-node-renderer-factory.js.map","export const createIsSecureContext = (window) => (window !== null && window.isSecureContext);\n//# sourceMappingURL=/build/es2018/factories/is-secure-context.js.map","export const createExposeCurrentFrameAndCurrentTime = (window) => {\n    return (nativeContext, fn) => {\n        Object.defineProperties(window, {\n            currentFrame: {\n                configurable: true,\n                get() {\n                    return Math.round(nativeContext.currentTime * nativeContext.sampleRate);\n                }\n            },\n            currentTime: {\n                configurable: true,\n                get() {\n                    return nativeContext.currentTime;\n                }\n            }\n        });\n        try {\n            return fn();\n        }\n        finally {\n            if (window !== null) {\n                delete window.currentFrame;\n                delete window.currentTime;\n            }\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/expose-current-frame-and-current-time.js.map","export const evaluateSource = (source) => {\n    return new Promise((resolve, reject) => {\n        const head = document.head;\n        if (head === null) {\n            reject(new SyntaxError());\n        }\n        else {\n            const script = document.createElement('script');\n            // @todo Safari doesn't like URLs with a type of 'application/javascript; charset=utf-8'.\n            const blob = new Blob([source], { type: 'application/javascript' });\n            const url = URL.createObjectURL(blob);\n            const originalOnErrorHandler = window.onerror;\n            const removeErrorEventListenerAndRevokeUrl = () => {\n                window.onerror = originalOnErrorHandler;\n                URL.revokeObjectURL(url);\n            };\n            window.onerror = (message, src, lineno, colno, error) => {\n                // @todo Edge thinks the source is the one of the html document.\n                if (src === url || (src === location.href && lineno === 1 && colno === 1)) {\n                    removeErrorEventListenerAndRevokeUrl();\n                    reject(error);\n                    return false;\n                }\n                if (originalOnErrorHandler !== null) {\n                    return originalOnErrorHandler(message, src, lineno, colno, error);\n                }\n            };\n            script.onerror = () => {\n                removeErrorEventListenerAndRevokeUrl();\n                reject(new SyntaxError());\n            };\n            script.onload = () => {\n                removeErrorEventListenerAndRevokeUrl();\n                resolve();\n            };\n            script.src = url;\n            script.type = 'module';\n            head.appendChild(script);\n        }\n    });\n};\n//# sourceMappingURL=/build/es2018/helpers/evaluate-source.js.map","export const createFetchSource = (createAbortError) => {\n    return async (url) => {\n        try {\n            const response = await fetch(url);\n            if (response.ok) {\n                return response.text();\n            }\n        }\n        catch ( /* Ignore errors. */_a) { /* Ignore errors. */ } // tslint:disable-line:no-empty\n        throw createAbortError();\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/fetch-source.js.map","export const createIsNativeAudioContext = (nativeAudioContextConstructor) => {\n    return (anything) => {\n        return (nativeAudioContextConstructor !== null && anything instanceof nativeAudioContextConstructor);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/is-native-audio-context.js.map","export const createIsNativeContext = (isNativeAudioContext, isNativeOfflineAudioContext) => {\n    return (anything) => {\n        return (isNativeAudioContext(anything) || isNativeOfflineAudioContext(anything));\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/is-native-context.js.map","export const createBaseAudioContextConstructor = (addAudioWorkletModule, analyserNodeConstructor, audioBufferConstructor, audioBufferSourceNodeConstructor, biquadFilterNodeConstructor, channelMergerNodeConstructor, channelSplitterNodeConstructor, constantSourceNodeConstructor, convolverNodeConstructor, decodeAudioData, delayNodeConstructor, dynamicsCompressorNodeConstructor, gainNodeConstructor, iIRFilterNodeConstructor, minimalBaseAudioContextConstructor, oscillatorNodeConstructor, pannerNodeConstructor, periodicWaveConstructor, stereoPannerNodeConstructor, waveShaperNodeConstructor) => {\n    return class BaseAudioContext extends minimalBaseAudioContextConstructor {\n        constructor(_nativeContext, numberOfChannels) {\n            super(_nativeContext, numberOfChannels);\n            this._nativeContext = _nativeContext;\n            this._audioWorklet = (addAudioWorkletModule === undefined) ?\n                undefined :\n                { addModule: (moduleURL, options) => addAudioWorkletModule(this, moduleURL, options) };\n        }\n        get audioWorklet() {\n            return this._audioWorklet;\n        }\n        createAnalyser() {\n            return new analyserNodeConstructor(this);\n        }\n        createBiquadFilter() {\n            return new biquadFilterNodeConstructor(this);\n        }\n        createBuffer(numberOfChannels, length, sampleRate) {\n            return new audioBufferConstructor({ length, numberOfChannels, sampleRate });\n        }\n        createBufferSource() {\n            return new audioBufferSourceNodeConstructor(this);\n        }\n        createChannelMerger(numberOfInputs = 6) {\n            return new channelMergerNodeConstructor(this, { numberOfInputs });\n        }\n        createChannelSplitter(numberOfOutputs = 6) {\n            return new channelSplitterNodeConstructor(this, { numberOfOutputs });\n        }\n        createConstantSource() {\n            return new constantSourceNodeConstructor(this);\n        }\n        createConvolver() {\n            return new convolverNodeConstructor(this);\n        }\n        createDelay(maxDelayTime = 1) {\n            return new delayNodeConstructor(this, { maxDelayTime });\n        }\n        createDynamicsCompressor() {\n            return new dynamicsCompressorNodeConstructor(this);\n        }\n        createGain() {\n            return new gainNodeConstructor(this);\n        }\n        createIIRFilter(feedforward, feedback) {\n            return new iIRFilterNodeConstructor(this, { feedback, feedforward });\n        }\n        createOscillator() {\n            return new oscillatorNodeConstructor(this);\n        }\n        createPanner() {\n            return new pannerNodeConstructor(this);\n        }\n        createPeriodicWave(real, imag, constraints = { disableNormalization: false }) {\n            return new periodicWaveConstructor(this, { ...constraints, imag, real });\n        }\n        createStereoPanner() {\n            return new stereoPannerNodeConstructor(this);\n        }\n        createWaveShaper() {\n            return new waveShaperNodeConstructor(this);\n        }\n        decodeAudioData(audioData, successCallback, errorCallback) {\n            return decodeAudioData(this._nativeContext, audioData)\n                .then((audioBuffer) => {\n                if (typeof successCallback === 'function') {\n                    successCallback(audioBuffer);\n                }\n                return audioBuffer;\n            })\n                .catch((err) => {\n                if (typeof errorCallback === 'function') {\n                    errorCallback(err);\n                }\n                throw err; // tslint:disable-line:rxjs-throw-error\n            });\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/base-audio-context-constructor.js.map","import { DETACHED_ARRAY_BUFFERS } from '../globals';\nimport { detachArrayBuffer } from '../helpers/detach-array-buffer';\nimport { getNativeContext } from '../helpers/get-native-context';\nimport { wrapAudioBufferGetChannelDataMethod } from '../helpers/wrap-audio-buffer-get-channel-data-method';\nexport const createDecodeAudioData = (cacheTestResult, createDataCloneError, createEncodingError, nativeOfflineAudioContextConstructor, isNativeContext, isNativeOfflineAudioContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, testAudioBufferCopyChannelMethodsSubarraySupport, testPromiseSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds, wrapAudioBufferCopyChannelMethodsSubarray) => {\n    return (anyContext, audioData) => {\n        const nativeContext = isNativeContext(anyContext) ? anyContext : getNativeContext(anyContext);\n        // Bug #43: Only Chrome and Opera do throw a DataCloneError.\n        if (DETACHED_ARRAY_BUFFERS.has(audioData)) {\n            const err = createDataCloneError();\n            return Promise.reject(err);\n        }\n        // The audioData parameter maybe of a type which can't be added to a WeakSet.\n        try {\n            DETACHED_ARRAY_BUFFERS.add(audioData);\n        }\n        catch (_a) {\n            // Ignore errors.\n        }\n        // Bug #21: Safari does not support promises yet.\n        if (cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeContext))) {\n            // Bug #101: Edge does not decode something on a closed OfflineAudioContext.\n            const nativeContextOrBackupNativeContext = (nativeContext.state === 'closed' &&\n                nativeOfflineAudioContextConstructor !== null &&\n                isNativeOfflineAudioContext(nativeContext)) ?\n                new nativeOfflineAudioContextConstructor(1, 1, nativeContext.sampleRate) :\n                nativeContext;\n            const promise = nativeContextOrBackupNativeContext\n                .decodeAudioData(audioData)\n                .catch((err) => {\n                // Bug #27: Edge is rejecting invalid arrayBuffers with a DOMException.\n                if (err instanceof DOMException && err.name === 'NotSupportedError') {\n                    throw new TypeError();\n                }\n                throw err;\n            });\n            return promise\n                .then((audioBuffer) => {\n                // Bug #42: Firefox does not yet fully support copyFromChannel() and copyToChannel().\n                if (!cacheTestResult(testAudioBufferCopyChannelMethodsSubarraySupport, () => testAudioBufferCopyChannelMethodsSubarraySupport(audioBuffer))) {\n                    wrapAudioBufferCopyChannelMethodsSubarray(audioBuffer);\n                    wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n                    // Bug #157: No browser does allow the bufferOffset to be out-of-bounds.\n                }\n                else if (!cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, () => testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer))) {\n                    wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n                }\n                return audioBuffer;\n            });\n        }\n        // Bug #21: Safari does not return a Promise yet.\n        return new Promise((resolve, reject) => {\n            const complete = () => {\n                // Bug #133: Safari does neuter the ArrayBuffer.\n                try {\n                    detachArrayBuffer(audioData);\n                }\n                catch ( /* Ignore errors. */_a) { /* Ignore errors. */ }\n            };\n            const fail = (err) => {\n                reject(err);\n                complete();\n            };\n            // Bug #26: Safari throws a synchronous error.\n            try {\n                // Bug #1: Safari requires a successCallback.\n                nativeContext.decodeAudioData(audioData, (audioBuffer) => {\n                    // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n                    // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.\n                    if (typeof audioBuffer.copyFromChannel !== 'function') {\n                        wrapAudioBufferCopyChannelMethods(audioBuffer);\n                        wrapAudioBufferGetChannelDataMethod(audioBuffer);\n                    }\n                    complete();\n                    resolve(audioBuffer);\n                }, (err) => {\n                    // Bug #4: Safari returns null instead of an error.\n                    if (err === null) {\n                        fail(createEncodingError());\n                    }\n                    else {\n                        fail(err);\n                    }\n                });\n            }\n            catch (err) {\n                fail(err);\n            }\n        });\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/decode-audio-data.js.map","export const detachArrayBuffer = (arrayBuffer) => {\n    const { port1 } = new MessageChannel();\n    port1.postMessage(arrayBuffer, [arrayBuffer]);\n};\n//# sourceMappingURL=/build/es2018/helpers/detach-array-buffer.js.map","export const createDataCloneError = () => {\n    try {\n        return new DOMException('', 'DataCloneError');\n    }\n    catch (err) {\n        // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.\n        err.code = 25;\n        err.name = 'DataCloneError';\n        return err;\n    }\n};\n//# sourceMappingURL=/build/es2018/factories/data-clone-error.js.map","export const createEncodingError = () => {\n    try {\n        return new DOMException('', 'EncodingError');\n    }\n    catch (err) {\n        // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.\n        err.code = 0;\n        err.name = 'EncodingError';\n        return err;\n    }\n};\n//# sourceMappingURL=/build/es2018/factories/encoding-error.js.map","import { getNativeContext } from '../helpers/get-native-context';\nexport const createMediaElementAudioSourceNodeConstructor = (createNativeMediaElementAudioSourceNode, createNotSupportedError, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class MediaElementAudioSourceNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options) {\n            const nativeContext = getNativeContext(context);\n            if (isNativeOfflineAudioContext(nativeContext)) {\n                throw createNotSupportedError();\n            }\n            const nativeMediaElementAudioSourceNode = createNativeMediaElementAudioSourceNode(nativeContext, options);\n            super(context, 'active', nativeMediaElementAudioSourceNode, null);\n            // Bug #63: Edge & Firefox do not expose the mediaElement yet.\n            this._mediaElement = options.mediaElement;\n            this._nativeMediaElementAudioSourceNode = nativeMediaElementAudioSourceNode;\n        }\n        get mediaElement() {\n            return (this._nativeMediaElementAudioSourceNode.mediaElement === undefined) ?\n                this._mediaElement :\n                this._nativeMediaElementAudioSourceNode.mediaElement;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/media-element-audio-source-node-constructor.js.map","export const createNativeMediaElementAudioSourceNodeFactory = (createNativeAudioNode) => {\n    return (nativeAudioContext, options) => createNativeAudioNode(nativeAudioContext, (ntvDCntxt) => {\n        return ntvDCntxt.createMediaElementSource(options.mediaElement);\n    });\n};\n//# sourceMappingURL=/build/es2018/factories/native-media-element-audio-source-node-factory.js.map","import { getNativeContext } from '../helpers/get-native-context';\nexport const createMediaStreamAudioSourceNodeConstructor = (createNativeMediaStreamAudioSourceNode, createNotSupportedError, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class MediaStreamAudioSourceNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options) {\n            const nativeContext = getNativeContext(context);\n            if (isNativeOfflineAudioContext(nativeContext)) {\n                throw createNotSupportedError();\n            }\n            const nativeMediaStreamAudioSourceNode = createNativeMediaStreamAudioSourceNode(nativeContext, options);\n            super(context, 'active', nativeMediaStreamAudioSourceNode, null);\n            this._nativeMediaStreamAudioSourceNode = nativeMediaStreamAudioSourceNode;\n        }\n        get mediaStream() {\n            return this._nativeMediaStreamAudioSourceNode.mediaStream;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/media-stream-audio-source-node-constructor.js.map","export const createNativeMediaStreamAudioSourceNodeFactory = (createInvalidStateError, createNativeAudioNode) => {\n    return (nativeAudioContext, { mediaStream }) => {\n        const audioStreamTracks = mediaStream.getAudioTracks();\n        const nativeMediaStreamAudioSourceNode = createNativeAudioNode(nativeAudioContext, (ntvDCntxt) => {\n            /*\n             * Bug #151: Firefox does not use the audio track as input anymore if it gets removed from the mediaStream after construction.\n             * Bug #159: Chrome and Firefox pick the first audio track if the MediaStream has more than one audio track.\n             */\n            const filteredAudioStreamTracks = audioStreamTracks\n                .sort((a, b) => ((a.id < b.id) ? -1 : (a.id > b.id) ? 1 : 0))\n                .slice(0, 1);\n            return ntvDCntxt.createMediaStreamSource(new MediaStream(filteredAudioStreamTracks));\n        });\n        // Bug #120: Firefox does not throw an error if the mediaStream has no audio track.\n        if (audioStreamTracks.length === 0) {\n            throw createInvalidStateError();\n        }\n        // Bug #63: Edge & Firefox do not expose the mediaStream yet.\n        Object.defineProperty(nativeMediaStreamAudioSourceNode, 'mediaStream', { value: mediaStream });\n        return nativeMediaStreamAudioSourceNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-media-stream-audio-source-node-factory.js.map","import { getNativeContext } from '../helpers/get-native-context';\nexport const createMediaStreamTrackAudioSourceNodeConstructor = (createNativeMediaStreamTrackAudioSourceNode, createNotSupportedError, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class MediaStreamTrackAudioSourceNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options) {\n            const nativeContext = getNativeContext(context);\n            if (isNativeOfflineAudioContext(nativeContext)) {\n                throw createNotSupportedError();\n            }\n            const nativeMediaStreamTrackAudioSourceNode = createNativeMediaStreamTrackAudioSourceNode(nativeContext, options);\n            super(context, 'active', nativeMediaStreamTrackAudioSourceNode, null);\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/media-stream-track-audio-source-node-constructor.js.map","export const createNativeMediaStreamTrackAudioSourceNodeFactory = (createInvalidStateError, createNativeAudioNode) => {\n    return (nativeAudioContext, { mediaStreamTrack }) => {\n        if (typeof nativeAudioContext.createMediaStreamTrackSource === 'function') {\n            return createNativeAudioNode(nativeAudioContext, (ntvDCntxt) => ntvDCntxt.createMediaStreamTrackSource(mediaStreamTrack));\n        }\n        // Bug #121: Only Firefox does yet support the MediaStreamTrackAudioSourceNode.\n        return createNativeAudioNode(nativeAudioContext, (ntvDCntxt) => {\n            const mediaStream = new MediaStream([mediaStreamTrack]);\n            const nativeMediaStreamAudioSourceNode = ntvDCntxt.createMediaStreamSource(mediaStream);\n            // Bug #120: Firefox does not throw an error if the mediaStream has no audio track.\n            if (mediaStreamTrack.kind !== 'audio') {\n                throw createInvalidStateError();\n            }\n            return nativeMediaStreamAudioSourceNode;\n        });\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-media-stream-track-audio-source-node-factory.js.map","import { isValidLatencyHint } from '../helpers/is-valid-latency-hint';\nexport const createAudioContextConstructor = (baseAudioContextConstructor, createInvalidStateError, createNotSupportedError, createUnknownError, mediaElementAudioSourceNodeConstructor, mediaStreamAudioSourceNodeConstructor, mediaStreamTrackAudioSourceNodeConstructor, nativeAudioContextConstructor) => {\n    return class AudioContext extends baseAudioContextConstructor {\n        constructor(options = {}) {\n            if (nativeAudioContextConstructor === null) {\n                throw new Error('Missing the native AudioContext constructor.');\n            }\n            const nativeAudioContext = new nativeAudioContextConstructor(options);\n            // Bug #131 Safari returns null when there are four other AudioContexts running already.\n            if (nativeAudioContext === null) {\n                throw createUnknownError();\n            }\n            // Bug #51 Only Chrome and Opera throw an error if the given latencyHint is invalid.\n            if (!isValidLatencyHint(options.latencyHint)) {\n                throw new TypeError(`The provided value '${options.latencyHint}' is not a valid enum value of type AudioContextLatencyCategory.`);\n            }\n            // Bug #150 Only Chrome, Firefox and Opera support setting the sampleRate.\n            if (options.sampleRate !== undefined && nativeAudioContext.sampleRate !== options.sampleRate) {\n                throw createNotSupportedError();\n            }\n            super(nativeAudioContext, nativeAudioContext.destination.channelCount);\n            const { latencyHint } = options;\n            const { sampleRate } = nativeAudioContext;\n            // @todo The values for 'balanced', 'interactive' and 'playback' are just copied from Chrome's implementation.\n            this._baseLatency = (typeof nativeAudioContext.baseLatency === 'number')\n                ? nativeAudioContext.baseLatency\n                : (latencyHint === 'balanced')\n                    ? (512 / sampleRate)\n                    : (latencyHint === 'interactive' || latencyHint === undefined)\n                        ? (256 / sampleRate)\n                        : (latencyHint === 'playback')\n                            ? (1024 / sampleRate)\n                            /*\n                             * @todo The min (256) and max (16384) values are taken from the allowed bufferSize values of a\n                             * ScriptProcessorNode.\n                             */\n                            : ((Math.max(2, Math.min(128, Math.round((latencyHint * sampleRate) / 128))) * 128) / sampleRate);\n            this._nativeAudioContext = nativeAudioContext;\n            this._state = null;\n            /*\n             * Bug #34: Chrome and Opera pretend to be running right away, but fire an onstatechange event when the state actually changes\n             * to 'running'.\n             */\n            if (nativeAudioContext.state === 'running') {\n                this._state = 'suspended';\n                const revokeState = () => {\n                    if (this._state === 'suspended') {\n                        this._state = null;\n                    }\n                    nativeAudioContext.removeEventListener('statechange', revokeState);\n                };\n                nativeAudioContext.addEventListener('statechange', revokeState);\n            }\n        }\n        get baseLatency() {\n            return this._baseLatency;\n        }\n        get state() {\n            return (this._state !== null) ? this._state : this._nativeAudioContext.state;\n        }\n        close() {\n            // Bug #35: Firefox does not throw an error if the AudioContext was closed before.\n            if (this.state === 'closed') {\n                return this._nativeAudioContext\n                    .close()\n                    .then(() => {\n                    throw createInvalidStateError();\n                });\n            }\n            // Bug #34: If the state was set to suspended before it should be revoked now.\n            if (this._state === 'suspended') {\n                this._state = null;\n            }\n            return this._nativeAudioContext.close();\n            /*\n             * Bug #50: Deleting the AudioGraph is currently not possible anymore.\n             * ...then(() => deleteAudioGraph(this, this._nativeAudioContext));\n             */\n        }\n        createMediaElementSource(mediaElement) {\n            return new mediaElementAudioSourceNodeConstructor(this, { mediaElement });\n        }\n        createMediaStreamSource(mediaStream) {\n            return new mediaStreamAudioSourceNodeConstructor(this, { mediaStream });\n        }\n        createMediaStreamTrackSource(mediaStreamTrack) {\n            return new mediaStreamTrackAudioSourceNodeConstructor(this, { mediaStreamTrack });\n        }\n        resume() {\n            if (this._state === 'suspended') {\n                return new Promise((resolve, reject) => {\n                    const resolvePromise = () => {\n                        this._nativeAudioContext.removeEventListener('statechange', resolvePromise);\n                        if (this._nativeAudioContext.state === 'running') {\n                            resolve();\n                        }\n                        else {\n                            this\n                                .resume()\n                                .then(resolve, reject);\n                        }\n                    };\n                    this._nativeAudioContext.addEventListener('statechange', resolvePromise);\n                });\n            }\n            return this._nativeAudioContext\n                .resume()\n                .catch((err) => {\n                // Bug #55: Chrome, Edge and Opera do throw an InvalidAccessError instead of an InvalidStateError.\n                // Bug #56: Safari invokes the catch handler but without an error.\n                if (err === undefined || err.code === 15) {\n                    throw createInvalidStateError();\n                }\n                throw err; // tslint:disable-line:rxjs-throw-error\n            });\n        }\n        suspend() {\n            return this._nativeAudioContext\n                .suspend()\n                .catch((err) => {\n                // Bug #56: Safari invokes the catch handler but without an error.\n                if (err === undefined) {\n                    throw createInvalidStateError();\n                }\n                throw err; // tslint:disable-line:rxjs-throw-error\n            });\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-context-constructor.js.map","import { isNativeAudioNode } from '../guards/native-audio-node';\nexport const createConnectMultipleOutputs = (createIndexSizeError) => {\n    return (outputAudioNodes, destination, output = 0, input = 0) => {\n        const outputAudioNode = outputAudioNodes[output];\n        if (outputAudioNode === undefined) {\n            throw createIndexSizeError();\n        }\n        if (isNativeAudioNode(destination)) {\n            return outputAudioNode.connect(destination, 0, input);\n        }\n        return outputAudioNode.connect(destination, 0);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/connect-multiple-outputs.js.map","import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { AUXILIARY_GAIN_NODE_STORE } from '../globals';\nimport { computeBufferSize } from '../helpers/compute-buffer-size';\nimport { copyFromChannel } from '../helpers/copy-from-channel';\nimport { copyToChannel } from '../helpers/copy-to-channel';\nimport { createAudioWorkletProcessor } from '../helpers/create-audio-worklet-processor';\nimport { createNestedArrays } from '../helpers/create-nested-arrays';\nimport { ReadOnlyMap } from '../read-only-map';\nexport const createNativeAudioWorkletNodeFakerFactory = (connectMultipleOutputs, createIndexSizeError, createInvalidStateError, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, createNativeScriptProcessorNode, createNotSupportedError, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime) => {\n    return (nativeContext, baseLatency, processorConstructor, options) => {\n        if (options.numberOfInputs === 0 && options.numberOfOutputs === 0) {\n            throw createNotSupportedError();\n        }\n        if (options.outputChannelCount !== undefined) {\n            if (options.outputChannelCount.length !== options.numberOfOutputs) {\n                throw createIndexSizeError();\n            }\n            // @todo Check if any of the channelCount values is greater than the implementation's maximum number of channels.\n            if (options.outputChannelCount.some((channelCount) => (channelCount < 1))) {\n                throw createNotSupportedError();\n            }\n        }\n        // Bug #61: This is not part of the standard but required for the faker to work.\n        if (options.channelCountMode !== 'explicit') {\n            throw createNotSupportedError();\n        }\n        const numberOfInputChannels = options.channelCount * options.numberOfInputs;\n        const numberOfOutputChannels = options.outputChannelCount.reduce((sum, value) => sum + value, 0);\n        const numberOfParameters = (processorConstructor.parameterDescriptors === undefined)\n            ? 0\n            : processorConstructor.parameterDescriptors.length;\n        // Bug #61: This is not part of the standard but required for the faker to work.\n        if (numberOfInputChannels + numberOfParameters > 6 || numberOfOutputChannels > 6) {\n            throw createNotSupportedError();\n        }\n        const messageChannel = new MessageChannel();\n        const gainNodes = [];\n        const inputChannelSplitterNodes = [];\n        for (let i = 0; i < options.numberOfInputs; i += 1) {\n            gainNodes.push(createNativeGainNode(nativeContext, {\n                channelCount: options.channelCount,\n                channelCountMode: options.channelCountMode,\n                channelInterpretation: options.channelInterpretation,\n                gain: 1\n            }));\n            inputChannelSplitterNodes.push(createNativeChannelSplitterNode(nativeContext, {\n                channelCount: options.channelCount,\n                channelCountMode: 'explicit',\n                channelInterpretation: 'discrete',\n                numberOfOutputs: options.channelCount\n            }));\n        }\n        const constantSourceNodes = [];\n        if (processorConstructor.parameterDescriptors !== undefined) {\n            for (const { defaultValue, maxValue, minValue, name } of processorConstructor.parameterDescriptors) {\n                const constantSourceNode = createNativeConstantSourceNode(nativeContext, {\n                    channelCount: 1,\n                    channelCountMode: 'explicit',\n                    channelInterpretation: 'discrete',\n                    offset: (options.parameterData[name] !== undefined)\n                        ? options.parameterData[name]\n                        : (defaultValue === undefined)\n                            ? 0\n                            : defaultValue\n                });\n                Object.defineProperties(constantSourceNode.offset, {\n                    defaultValue: {\n                        get: () => (defaultValue === undefined) ? 0 : defaultValue\n                    },\n                    maxValue: {\n                        get: () => (maxValue === undefined) ? MOST_POSITIVE_SINGLE_FLOAT : maxValue\n                    },\n                    minValue: {\n                        get: () => (minValue === undefined) ? MOST_NEGATIVE_SINGLE_FLOAT : minValue\n                    }\n                });\n                constantSourceNodes.push(constantSourceNode);\n            }\n        }\n        const inputChannelMergerNode = createNativeChannelMergerNode(nativeContext, {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'speakers',\n            numberOfInputs: Math.max(1, numberOfInputChannels + numberOfParameters)\n        });\n        const bufferSize = computeBufferSize(baseLatency, nativeContext.sampleRate);\n        const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, bufferSize, numberOfInputChannels + numberOfParameters, \n        // Bug #87: Only Firefox will fire an AudioProcessingEvent if there is no connected output.\n        Math.max(1, numberOfOutputChannels));\n        const outputChannelSplitterNode = createNativeChannelSplitterNode(nativeContext, {\n            channelCount: Math.max(1, numberOfOutputChannels),\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete',\n            numberOfOutputs: Math.max(1, numberOfOutputChannels)\n        });\n        const outputChannelMergerNodes = [];\n        for (let i = 0; i < options.numberOfOutputs; i += 1) {\n            outputChannelMergerNodes.push(createNativeChannelMergerNode(nativeContext, {\n                channelCount: 1,\n                channelCountMode: 'explicit',\n                channelInterpretation: 'speakers',\n                numberOfInputs: options.outputChannelCount[i]\n            }));\n        }\n        for (let i = 0; i < options.numberOfInputs; i += 1) {\n            gainNodes[i].connect(inputChannelSplitterNodes[i]);\n            for (let j = 0; j < options.channelCount; j += 1) {\n                inputChannelSplitterNodes[i].connect(inputChannelMergerNode, j, (i * options.channelCount) + j);\n            }\n        }\n        const parameterMap = new ReadOnlyMap((processorConstructor.parameterDescriptors === undefined)\n            ? []\n            : processorConstructor.parameterDescriptors\n                .map(({ name }, index) => {\n                const constantSourceNode = constantSourceNodes[index];\n                constantSourceNode.connect(inputChannelMergerNode, 0, numberOfInputChannels + index);\n                constantSourceNode.start(0);\n                return [name, constantSourceNode.offset];\n            }));\n        inputChannelMergerNode.connect(scriptProcessorNode);\n        if (options.numberOfOutputs > 0) {\n            scriptProcessorNode.connect(outputChannelSplitterNode);\n        }\n        for (let i = 0, outputChannelSplitterNodeOutput = 0; i < options.numberOfOutputs; i += 1) {\n            const outputChannelMergerNode = outputChannelMergerNodes[i];\n            for (let j = 0; j < options.outputChannelCount[i]; j += 1) {\n                outputChannelSplitterNode.connect(outputChannelMergerNode, outputChannelSplitterNodeOutput + j, j);\n            }\n            outputChannelSplitterNodeOutput += options.outputChannelCount[i];\n        }\n        let channelInterpretation = options.channelInterpretation;\n        let onprocessorerror = null;\n        // Bug #87: Expose at least one output to make this node connectable.\n        const outputAudioNodes = (options.numberOfOutputs === 0) ? [scriptProcessorNode] : outputChannelMergerNodes;\n        const nativeAudioWorkletNodeFaker = {\n            get bufferSize() {\n                return bufferSize;\n            },\n            get channelCount() {\n                return options.channelCount;\n            },\n            set channelCount(_) {\n                // Bug #61: This is not part of the standard but required for the faker to work.\n                throw createInvalidStateError();\n            },\n            get channelCountMode() {\n                return options.channelCountMode;\n            },\n            set channelCountMode(_) {\n                // Bug #61: This is not part of the standard but required for the faker to work.\n                throw createInvalidStateError();\n            },\n            get channelInterpretation() {\n                return channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                for (const gainNode of gainNodes) {\n                    gainNode.channelInterpretation = value;\n                }\n                channelInterpretation = value;\n            },\n            get context() {\n                return scriptProcessorNode.context;\n            },\n            get inputs() {\n                return gainNodes;\n            },\n            get numberOfInputs() {\n                return options.numberOfInputs;\n            },\n            get numberOfOutputs() {\n                return options.numberOfOutputs;\n            },\n            get onprocessorerror() {\n                return onprocessorerror;\n            },\n            set onprocessorerror(value) {\n                if (typeof onprocessorerror === 'function') {\n                    nativeAudioWorkletNodeFaker.removeEventListener('processorerror', onprocessorerror);\n                }\n                onprocessorerror = (typeof value === 'function') ? value : null;\n                if (typeof onprocessorerror === 'function') {\n                    nativeAudioWorkletNodeFaker.addEventListener('processorerror', onprocessorerror);\n                }\n            },\n            get parameters() {\n                return parameterMap;\n            },\n            get port() {\n                return messageChannel.port2;\n            },\n            addEventListener(...args) {\n                return scriptProcessorNode.addEventListener(args[0], args[1], args[2]);\n            },\n            connect: connectMultipleOutputs.bind(null, outputAudioNodes),\n            disconnect: disconnectMultipleOutputs.bind(null, outputAudioNodes),\n            dispatchEvent(...args) {\n                return scriptProcessorNode.dispatchEvent(args[0]);\n            },\n            removeEventListener(...args) {\n                return scriptProcessorNode.removeEventListener(args[0], args[1], args[2]);\n            }\n        };\n        const patchedEventListeners = new Map(); // tslint:disable-line:max-line-length\n        messageChannel.port1.addEventListener = ((addEventListener) => {\n            return (...args) => {\n                if (args[0] === 'message') {\n                    const unpatchedEventListener = (typeof args[1] === 'function')\n                        ? args[1]\n                        : (typeof args[1] === 'object' && args[1] !== null && typeof args[1].handleEvent === 'function')\n                            ? args[1].handleEvent\n                            : null;\n                    if (unpatchedEventListener !== null) {\n                        const patchedEventListener = patchedEventListeners.get(args[1]);\n                        if (patchedEventListener !== undefined) {\n                            args[1] = patchedEventListener;\n                        }\n                        else {\n                            args[1] = (event) => {\n                                exposeCurrentFrameAndCurrentTime(nativeContext, () => unpatchedEventListener(event));\n                            };\n                            patchedEventListeners.set(unpatchedEventListener, args[1]);\n                        }\n                    }\n                }\n                return addEventListener.call(messageChannel.port1, args[0], args[1], args[2]);\n            };\n        })(messageChannel.port1.addEventListener);\n        messageChannel.port1.removeEventListener = ((removeEventListener) => {\n            return (...args) => {\n                if (args[0] === 'message') {\n                    const patchedEventListener = patchedEventListeners.get(args[1]);\n                    if (patchedEventListener !== undefined) {\n                        patchedEventListeners.delete(args[1]);\n                        args[1] = patchedEventListener;\n                    }\n                }\n                return removeEventListener.call(messageChannel.port1, args[0], args[1], args[2]);\n            };\n        })(messageChannel.port1.removeEventListener);\n        let onmessage = null;\n        Object.defineProperty(messageChannel.port1, 'onmessage', {\n            get: () => onmessage,\n            set: (value) => {\n                if (typeof onmessage === 'function') {\n                    messageChannel.port1.removeEventListener('message', onmessage);\n                }\n                onmessage = (typeof value === 'function') ? value : null;\n                if (typeof onmessage === 'function') {\n                    messageChannel.port1.addEventListener('message', onmessage);\n                    messageChannel.port1.start();\n                }\n            }\n        });\n        processorConstructor.prototype.port = messageChannel.port1;\n        let audioWorkletProcessor = null;\n        const audioWorkletProcessorPromise = createAudioWorkletProcessor(nativeContext, nativeAudioWorkletNodeFaker, processorConstructor, options);\n        audioWorkletProcessorPromise\n            .then((dWrkltPrcssr) => audioWorkletProcessor = dWrkltPrcssr);\n        const inputs = createNestedArrays(options.numberOfInputs, options.channelCount);\n        const outputs = createNestedArrays(options.numberOfOutputs, options.outputChannelCount);\n        const parameters = (processorConstructor.parameterDescriptors === undefined) ?\n            [] :\n            processorConstructor.parameterDescriptors\n                .reduce((prmtrs, { name }) => ({ ...prmtrs, [name]: new Float32Array(128) }), {});\n        let isActive = true;\n        scriptProcessorNode.onaudioprocess = ({ inputBuffer, outputBuffer }) => {\n            if (audioWorkletProcessor !== null) {\n                for (let i = 0; i < bufferSize; i += 128) {\n                    for (let j = 0; j < options.numberOfInputs; j += 1) {\n                        for (let k = 0; k < options.channelCount; k += 1) {\n                            copyFromChannel(inputBuffer, inputs[j], k, k, i);\n                        }\n                    }\n                    if (processorConstructor.parameterDescriptors !== undefined) {\n                        processorConstructor.parameterDescriptors.forEach(({ name }, index) => {\n                            copyFromChannel(inputBuffer, parameters, name, numberOfInputChannels + index, i);\n                        });\n                    }\n                    for (let j = 0; j < options.numberOfInputs; j += 1) {\n                        for (let k = 0; k < options.outputChannelCount[j]; k += 1) {\n                            // The byteLength will be 0 when the ArrayBuffer was transferred.\n                            if (outputs[j][k].byteLength === 0) {\n                                outputs[j][k] = new Float32Array(128);\n                            }\n                        }\n                    }\n                    try {\n                        const potentiallyEmptyInputs = inputs\n                            .map((input, index) => {\n                            const auxiliaryGainNodes = AUXILIARY_GAIN_NODE_STORE.get(nativeAudioWorkletNodeFaker);\n                            if (auxiliaryGainNodes === undefined || auxiliaryGainNodes.get(index) === undefined) {\n                                return [new Float32Array(0)];\n                            }\n                            return input;\n                        });\n                        const activeSourceFlag = exposeCurrentFrameAndCurrentTime(nativeContext, () => audioWorkletProcessor.process(potentiallyEmptyInputs, outputs, parameters));\n                        isActive = activeSourceFlag;\n                        for (let j = 0, outputChannelSplitterNodeOutput = 0; j < options.numberOfOutputs; j += 1) {\n                            for (let k = 0; k < options.outputChannelCount[j]; k += 1) {\n                                copyToChannel(outputBuffer, outputs[j], k, outputChannelSplitterNodeOutput + k, i);\n                            }\n                            outputChannelSplitterNodeOutput += options.outputChannelCount[j];\n                        }\n                    }\n                    catch (error) {\n                        isActive = false;\n                        nativeAudioWorkletNodeFaker.dispatchEvent(new ErrorEvent('processorerror', { error }));\n                    }\n                    if (!isActive) {\n                        scriptProcessorNode.onaudioprocess = null; // tslint:disable-line:deprecation\n                        break;\n                    }\n                }\n            }\n        };\n        return nativeAudioWorkletNodeFaker;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-audio-worklet-node-faker-factory.js.map","import { NODE_TO_PROCESSOR_MAPS } from '../globals';\nimport { createAudioWorkletProcessorPromise } from './create-audio-worklet-processor-promise';\nexport const createAudioWorkletProcessor = (nativeContext, nativeAudioWorkletNode, processorConstructor, audioWorkletNodeOptions) => {\n    let nodeToProcessorMap = NODE_TO_PROCESSOR_MAPS.get(nativeContext);\n    if (nodeToProcessorMap === undefined) {\n        nodeToProcessorMap = new WeakMap();\n        NODE_TO_PROCESSOR_MAPS.set(nativeContext, nodeToProcessorMap);\n    }\n    const audioWorkletProcessorPromise = createAudioWorkletProcessorPromise(processorConstructor, audioWorkletNodeOptions);\n    nodeToProcessorMap.set(nativeAudioWorkletNode, audioWorkletProcessorPromise);\n    return audioWorkletProcessorPromise;\n};\n//# sourceMappingURL=/build/es2018/helpers/create-audio-worklet-processor.js.map","import { testClonabilityOfAudioWorkletNodeOptions } from '../helpers/test-clonability-of-audio-worklet-node-options';\nexport const createNativeAudioWorkletNodeFactory = (createInvalidStateError, createNativeAudioNode, createNativeAudioWorkletNodeFaker, createNotSupportedError, isNativeOfflineAudioContext) => {\n    return (nativeContext, baseLatency, nativeAudioWorkletNodeConstructor, name, processorConstructor, options) => {\n        if (nativeAudioWorkletNodeConstructor !== null) {\n            try {\n                // Bug #86: Chrome Canary does not invoke the process() function if the corresponding AudioWorkletNode has no output.\n                const nativeAudioWorkletNode = createNativeAudioNode(nativeContext, (ntvCntxt) => {\n                    return (isNativeOfflineAudioContext(ntvCntxt) && options.numberOfInputs !== 0 && options.numberOfOutputs === 0) ?\n                        new nativeAudioWorkletNodeConstructor(ntvCntxt, name, {\n                            ...options,\n                            numberOfOutputs: 1,\n                            outputChannelCount: [1],\n                            parameterData: { ...options.parameterData, hasNoOutput: 1 }\n                        }) :\n                        new nativeAudioWorkletNodeConstructor(ntvCntxt, name, options);\n                });\n                const patchedEventListeners = new Map(); // tslint:disable-line:max-line-length\n                let onprocessorerror = null;\n                Object.defineProperties(nativeAudioWorkletNode, {\n                    /*\n                     * Bug #61: Overwriting the property accessors for channelCount and channelCountMode is necessary as long as some\n                     * browsers have no native implementation to achieve a consistent behavior.\n                     */\n                    channelCount: {\n                        get: () => options.channelCount,\n                        set: () => {\n                            throw createInvalidStateError();\n                        }\n                    },\n                    channelCountMode: {\n                        get: () => 'explicit',\n                        set: () => {\n                            throw createInvalidStateError();\n                        }\n                    },\n                    // Bug #156: Chrome does not yet fire an ErrorEvent.\n                    onprocessorerror: {\n                        get: () => onprocessorerror,\n                        set: (value) => {\n                            if (typeof onprocessorerror === 'function') {\n                                nativeAudioWorkletNode.removeEventListener('processorerror', onprocessorerror);\n                            }\n                            onprocessorerror = (typeof value === 'function') ? value : null;\n                            if (typeof onprocessorerror === 'function') {\n                                nativeAudioWorkletNode.addEventListener('processorerror', onprocessorerror);\n                            }\n                        }\n                    }\n                });\n                nativeAudioWorkletNode.addEventListener = ((addEventListener) => {\n                    return (...args) => {\n                        if (args[0] === 'processorerror') {\n                            const unpatchedEventListener = (typeof args[1] === 'function')\n                                ? args[1]\n                                : (typeof args[1] === 'object' && args[1] !== null && typeof args[1].handleEvent === 'function')\n                                    ? args[1].handleEvent\n                                    : null;\n                            if (unpatchedEventListener !== null) {\n                                const patchedEventListener = patchedEventListeners.get(args[1]);\n                                if (patchedEventListener !== undefined) {\n                                    args[1] = patchedEventListener;\n                                }\n                                else {\n                                    args[1] = (event) => {\n                                        unpatchedEventListener(new ErrorEvent(args[0], { ...event, error: new Error( /* @todo */) }));\n                                    };\n                                    patchedEventListeners.set(unpatchedEventListener, args[1]);\n                                }\n                            }\n                        }\n                        return addEventListener.call(nativeAudioWorkletNode, args[0], args[1], args[2]);\n                    };\n                })(nativeAudioWorkletNode.addEventListener);\n                nativeAudioWorkletNode.removeEventListener = ((removeEventListener) => {\n                    return (...args) => {\n                        if (args[0] === 'processorerror') {\n                            const patchedEventListener = patchedEventListeners.get(args[1]);\n                            if (patchedEventListener !== undefined) {\n                                patchedEventListeners.delete(args[1]);\n                                args[1] = patchedEventListener;\n                            }\n                        }\n                        return removeEventListener.call(nativeAudioWorkletNode, args[0], args[1], args[2]);\n                    };\n                })(nativeAudioWorkletNode.removeEventListener);\n                return nativeAudioWorkletNode;\n            }\n            catch (err) {\n                // Bug #60: Chrome Canary throws an InvalidStateError instead of a NotSupportedError.\n                if (err.code === 11) {\n                    throw createNotSupportedError();\n                }\n                throw err; // tslint:disable-line:rxjs-throw-error\n            }\n        }\n        // Bug #61: Only Chrome & Opera have an implementation of the AudioWorkletNode yet.\n        if (processorConstructor === undefined) {\n            throw createNotSupportedError();\n        }\n        testClonabilityOfAudioWorkletNodeOptions(options);\n        return createNativeAudioWorkletNodeFaker(nativeContext, baseLatency, processorConstructor, options);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-audio-worklet-node-factory.js.map","export const testClonabilityOfAudioWorkletNodeOptions = (audioWorkletNodeOptions) => {\n    const { port1 } = new MessageChannel();\n    try {\n        // This will throw an error if the audioWorkletNodeOptions are not clonable.\n        port1.postMessage(audioWorkletNodeOptions);\n    }\n    finally {\n        port1.close();\n    }\n};\n//# sourceMappingURL=/build/es2018/helpers/test-clonability-of-audio-worklet-node-options.js.map","export const createNativeAudioWorkletNodeConstructor = (window) => {\n    if (window === null) {\n        return null;\n    }\n    return (window.hasOwnProperty('AudioWorkletNode')) ? window.AudioWorkletNode : null;\n};\n//# sourceMappingURL=/build/es2018/factories/native-audio-worklet-node-constructor.js.map","import { isValidLatencyHint } from '../helpers/is-valid-latency-hint';\nexport const createMinimalAudioContextConstructor = (createInvalidStateError, createNotSupportedError, createUnknownError, minimalBaseAudioContextConstructor, nativeAudioContextConstructor) => {\n    return class MinimalAudioContext extends minimalBaseAudioContextConstructor {\n        constructor(options = {}) {\n            if (nativeAudioContextConstructor === null) {\n                throw new Error('Missing the native AudioContext constructor.');\n            }\n            const nativeAudioContext = new nativeAudioContextConstructor(options);\n            // Bug #131 Safari returns null when there are four other AudioContexts running already.\n            if (nativeAudioContext === null) {\n                throw createUnknownError();\n            }\n            // Bug #51 Only Chrome and Opera throw an error if the given latencyHint is invalid.\n            if (!isValidLatencyHint(options.latencyHint)) {\n                throw new TypeError(`The provided value '${options.latencyHint}' is not a valid enum value of type AudioContextLatencyCategory.`);\n            }\n            // Bug #150 Only Chrome, Firefox and Opera support setting the sampleRate.\n            if (options.sampleRate !== undefined && nativeAudioContext.sampleRate !== options.sampleRate) {\n                throw createNotSupportedError();\n            }\n            super(nativeAudioContext, nativeAudioContext.destination.channelCount);\n            const { latencyHint } = options;\n            const { sampleRate } = nativeAudioContext;\n            // @todo The values for 'balanced', 'interactive' and 'playback' are just copied from Chrome's implementation.\n            this._baseLatency = (typeof nativeAudioContext.baseLatency === 'number')\n                ? nativeAudioContext.baseLatency\n                : (latencyHint === 'balanced')\n                    ? (512 / sampleRate)\n                    : (latencyHint === 'interactive' || latencyHint === undefined)\n                        ? (256 / sampleRate)\n                        : (latencyHint === 'playback')\n                            ? (1024 / sampleRate)\n                            /*\n                             * @todo The min (256) and max (16384) values are taken from the allowed bufferSize values of a\n                             * ScriptProcessorNode.\n                             */\n                            : ((Math.max(2, Math.min(128, Math.round((latencyHint * sampleRate) / 128))) * 128) / sampleRate);\n            this._nativeAudioContext = nativeAudioContext;\n            this._state = null;\n            /*\n             * Bug #34: Chrome and Opera pretend to be running right away, but fire an onstatechange event when the state actually\n             * changes to 'running'.\n             */\n            if (nativeAudioContext.state === 'running') {\n                this._state = 'suspended';\n                const revokeState = () => {\n                    if (this._state === 'suspended') {\n                        this._state = null;\n                    }\n                    nativeAudioContext.removeEventListener('statechange', revokeState);\n                };\n                nativeAudioContext.addEventListener('statechange', revokeState);\n            }\n        }\n        get baseLatency() {\n            return this._baseLatency;\n        }\n        get state() {\n            return (this._state !== null) ? this._state : this._nativeAudioContext.state;\n        }\n        close() {\n            // Bug #35: Firefox does not throw an error if the AudioContext was closed before.\n            if (this.state === 'closed') {\n                return this._nativeAudioContext\n                    .close()\n                    .then(() => {\n                    throw createInvalidStateError();\n                });\n            }\n            // Bug #34: If the state was set to suspended before it should be revoked now.\n            if (this._state === 'suspended') {\n                this._state = null;\n            }\n            return this._nativeAudioContext.close();\n            /*\n             * Bug #50: Deleting the AudioGraph is currently not possible anymore.\n             * ...then(() => deleteAudioGraph(this, this._nativeAudioContext));\n             */\n        }\n        resume() {\n            if (this._state === 'suspended') {\n                return new Promise((resolve, reject) => {\n                    const resolvePromise = () => {\n                        this._nativeAudioContext.removeEventListener('statechange', resolvePromise);\n                        if (this._nativeAudioContext.state === 'running') {\n                            resolve();\n                        }\n                        else {\n                            this\n                                .resume()\n                                .then(resolve, reject);\n                        }\n                    };\n                    this._nativeAudioContext.addEventListener('statechange', resolvePromise);\n                });\n            }\n            return this._nativeAudioContext\n                .resume()\n                .catch((err) => {\n                // Bug #55: Chrome, Edge and Opera do throw an InvalidAccessError instead of an InvalidStateError.\n                // Bug #56: Safari invokes the catch handler but without an error.\n                if (err === undefined || err.code === 15) {\n                    throw createInvalidStateError();\n                }\n                throw err; // tslint:disable-line:rxjs-throw-error\n            });\n        }\n        suspend() {\n            return this._nativeAudioContext\n                .suspend()\n                .catch((err) => {\n                // Bug #56: Safari invokes the catch handler but without an error.\n                if (err === undefined) {\n                    throw createInvalidStateError();\n                }\n                throw err; // tslint:disable-line:rxjs-throw-error\n            });\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/minimal-audio-context-constructor.js.map","export const createCreateNativeOfflineAudioContext = (createNotSupportedError, nativeOfflineAudioContextConstructor) => {\n    return (numberOfChannels, length, sampleRate) => {\n        if (nativeOfflineAudioContextConstructor === null) {\n            throw new Error('Missing the native OfflineAudioContext constructor.');\n        }\n        try {\n            return new nativeOfflineAudioContextConstructor(numberOfChannels, length, sampleRate);\n        }\n        catch (err) {\n            // Bug #143, #144 & #146: Safari throws a SyntaxError when numberOfChannels, length or sampleRate are invalid.\n            // Bug #143: Edge throws a SyntaxError when numberOfChannels or length are invalid.\n            // Bug #145: Edge throws an IndexSizeError when sampleRate is zero.\n            if (err.name === 'IndexSizeError' || err.name === 'SyntaxError') {\n                throw createNotSupportedError();\n            }\n            throw err; // tslint:disable-line:rxjs-throw-error\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/create-native-offline-audio-context.js.map","import { getAudioNodeRenderer } from '../helpers/get-audio-node-renderer';\nimport { wrapAudioBufferGetChannelDataMethod } from '../helpers/wrap-audio-buffer-get-channel-data-method';\nexport const createStartRendering = (cacheTestResult, renderNativeOfflineAudioContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, testAudioBufferCopyChannelMethodsSubarraySupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds, wrapAudioBufferCopyChannelMethodsSubarray) => {\n    return (destination, nativeOfflineAudioContext) => getAudioNodeRenderer(destination)\n        .render(destination, nativeOfflineAudioContext)\n        .then(() => renderNativeOfflineAudioContext(nativeOfflineAudioContext))\n        .then((audioBuffer) => {\n        // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n        // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.\n        if (typeof audioBuffer.copyFromChannel !== 'function') {\n            wrapAudioBufferCopyChannelMethods(audioBuffer);\n            wrapAudioBufferGetChannelDataMethod(audioBuffer);\n            // Bug #42: Firefox does not yet fully support copyFromChannel() and copyToChannel().\n        }\n        else if (!cacheTestResult(testAudioBufferCopyChannelMethodsSubarraySupport, () => testAudioBufferCopyChannelMethodsSubarraySupport(audioBuffer))) {\n            wrapAudioBufferCopyChannelMethodsSubarray(audioBuffer);\n            wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n            // Bug #157: No browser does allow the bufferOffset to be out-of-bounds.\n        }\n        else if (!cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, () => testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer))) {\n            wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n        }\n        return audioBuffer;\n    });\n};\n//# sourceMappingURL=/build/es2018/factories/start-rendering.js.map","export const createIsAnyAudioContext = (contextStore, isNativeAudioContext) => {\n    return (anything) => {\n        const nativeContext = contextStore.get(anything);\n        return isNativeAudioContext(nativeContext) || isNativeAudioContext(anything);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/is-any-audio-context.js.map","export const createIsAnyAudioNode = (audioNodeStore, isNativeAudioNode) => {\n    return (anything) => audioNodeStore.has(anything) || isNativeAudioNode(anything);\n};\n//# sourceMappingURL=/build/es2018/factories/is-any-audio-node.js.map","export const createIsAnyAudioParam = (audioParamStore, isNativeAudioParam) => {\n    return (anything) => audioParamStore.has(anything) || isNativeAudioParam(anything);\n};\n//# sourceMappingURL=/build/es2018/factories/is-any-audio-param.js.map","export const createIsAnyOfflineAudioContext = (contextStore, isNativeOfflineAudioContext) => {\n    return (anything) => {\n        const nativeContext = contextStore.get(anything);\n        return isNativeOfflineAudioContext(nativeContext) || isNativeOfflineAudioContext(anything);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/is-any-offline-audio-context.js.map","import {\n\tAudioContext as stdAudioContext,\n\tOfflineAudioContext as stdOfflineAudioContext,\n} from \"standardized-audio-context\";\n\n/**\n * Create a new AudioContext\n */\nfunction createAudioContext(): AudioContext {\n\treturn new stdAudioContext() as unknown as AudioContext;\n}\n\n/**\n * Create a new OfflineAudioContext\n */\nexport function createOfflineAudioContext(channels: number, length: number, sampleRate: number): OfflineAudioContext {\n\treturn new stdOfflineAudioContext(channels, length, sampleRate) as unknown as OfflineAudioContext;\n}\n\n/**\n * Either the online or offline audio context\n */\nexport type AnyAudioContext = AudioContext | OfflineAudioContext;\n\n/**\n * Interface for things that Tone.js adds to the window\n */\ninterface ToneWindow extends Window {\n\tTONE_AUDIO_CONTEXT?: AnyAudioContext;\n\tTONE_SILENCE_LOGGING?: boolean;\n\tTONE_DEBUG_CLASS?: string;\n}\n\n/**\n * A reference to the window object\n * @hidden\n */\nexport const theWindow: ToneWindow | null = typeof self === \"object\" ? self : null;\n\n/**\n * If the browser has a window object which has an AudioContext\n * @hidden\n */\nexport const hasAudioContext = theWindow &&\n\t(theWindow.hasOwnProperty(\"AudioContext\") || theWindow.hasOwnProperty(\"webkitAudioContext\"));\n\n/**\n * The global audio context which is getable and assignable through\n * getAudioContext and setAudioContext\n */\nlet globalContext: AnyAudioContext;\n\n// if it was created already, use that one\n// this enables multiple versions of Tone.js to run on the same page.\nif (theWindow && theWindow.TONE_AUDIO_CONTEXT) {\n\tglobalContext = theWindow.TONE_AUDIO_CONTEXT;\n}\n\n/**\n * Returns the default system-wide AudioContext\n */\nexport function getAudioContext(): AnyAudioContext {\n\tif (!globalContext && hasAudioContext) {\n\t\tsetAudioContext(createAudioContext());\n\t}\n\treturn globalContext;\n}\n\n/**\n * Set the default audio context\n */\nexport function setAudioContext(context: AnyAudioContext): void {\n\tglobalContext = context;\n\tif (theWindow) {\n\t\ttheWindow.TONE_AUDIO_CONTEXT = globalContext;\n\t}\n}\n","import { Seconds } from \"../type/Units\";\n\nexport type TickerClockSource = \"worker\" | \"timeout\" | \"offline\";\n\n/**\n * A class which provides a reliable callback using either\n * a Web Worker, or if that isn't supported, falls back to setTimeout.\n */\nexport class Ticker {\n\n\t/**\n\t * Either \"worker\" or \"timeout\" or \"offline\"\n\t */\n\tprivate _type: TickerClockSource;\n\n\t/**\n\t * The update interval of the worker\n\t */\n\tprivate _updateInterval: Seconds;\n\n\t/**\n\t * The callback to invoke at regular intervals\n\t */\n\tprivate _callback: () => void;\n\n\t/**\n\t * track the callback interval\n\t */\n\tprivate _timeout!: number;\n\n\t/**\n\t * private reference to the worker\n\t */\n\tprivate _worker!: Worker;\n\n\tconstructor(callback: () => void, type: TickerClockSource, updateInterval: Seconds) {\n\n\t\tthis._callback = callback;\n\t\tthis._type = type;\n\t\tthis._updateInterval = updateInterval;\n\n\t\t// create the clock source for the first time\n\t\tthis._createClock();\n\t}\n\n\t/**\n\t * Generate a web worker\n\t */\n\tprivate _createWorker(): void {\n\n\t\tconst blob = new Blob([\n\t\t\t// the initial timeout time\n\t\t\t`var timeoutTime =  ${(this._updateInterval * 1000).toFixed(1)};\n\t\t\t// onmessage callback\n\t\t\tself.onmessage = function(msg){\n\t\t\t\ttimeoutTime = parseInt(msg.data);\n\t\t\t};\n\t\t\t// the tick function which posts a message\n\t\t\t// and schedules a new tick\n\t\t\tfunction tick(){\n\t\t\t\tsetTimeout(tick, timeoutTime);\n\t\t\t\tself.postMessage('tick');\n\t\t\t}\n\t\t\t// call tick initially\n\t\t\ttick();`,\n\t\t]);\n\t\tconst blobUrl = URL.createObjectURL(blob);\n\t\tconst worker = new Worker(blobUrl);\n\n\t\tworker.onmessage = this._callback.bind(this);\n\n\t\tthis._worker = worker;\n\t}\n\n\t/**\n\t * Create a timeout loop\n\t */\n\tprivate _createTimeout(): void {\n\t\tthis._timeout = setTimeout(() => {\n\t\t\tthis._createTimeout();\n\t\t\tthis._callback();\n\t\t}, this._updateInterval * 1000);\n\t}\n\n\t/**\n\t * Create the clock source.\n\t */\n\tprivate _createClock(): void {\n\t\tif (this._type === \"worker\") {\n\t\t\ttry {\n\t\t\t\tthis._createWorker();\n\t\t\t} catch (e) {\n\t\t\t\t// workers not supported, fallback to timeout\n\t\t\t\tthis._type = \"timeout\";\n\t\t\t\tthis._createClock();\n\t\t\t}\n\t\t} else if (this._type === \"timeout\") {\n\t\t\tthis._createTimeout();\n\t\t}\n\t}\n\n\t/**\n\t * Clean up the current clock source\n\t */\n\tprivate _disposeClock(): void {\n\t\tif (this._timeout) {\n\t\t\tclearTimeout(this._timeout);\n\t\t\tthis._timeout = 0;\n\t\t}\n\t\tif (this._worker) {\n\t\t\tthis._worker.terminate();\n\t\t\tthis._worker.onmessage = null;\n\t\t}\n\t}\n\n\t/**\n\t * The rate in seconds the ticker will update\n\t */\n\tget updateInterval(): Seconds {\n\t\treturn this._updateInterval;\n\t}\n\tset updateInterval(interval: Seconds) {\n\t\tthis._updateInterval = Math.max(interval, 128 / 44100);\n\t\tif (this._type === \"worker\") {\n\t\t\tthis._worker.postMessage(Math.max(interval * 1000, 1));\n\t\t}\n\t}\n\n\t/**\n\t * The type of the ticker, either a worker or a timeout\n\t */\n\tget type(): TickerClockSource {\n\t\treturn this._type;\n\t}\n\tset type(type: TickerClockSource) {\n\t\tthis._disposeClock();\n\t\tthis._type = type;\n\t\tthis._createClock();\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): void {\n\t\tthis._disposeClock();\n\t}\n}\n","import {\n\tisAnyAudioContext, isAnyAudioNode,\n\tisAnyAudioParam, isAnyOfflineAudioContext,\n} from \"standardized-audio-context\";\n\n/**\n * Test if the given value is an instanceof AudioParam\n */\nexport function isAudioParam(arg: any): arg is AudioParam {\n\treturn isAnyAudioParam(arg);\n}\n\n/**\n * Test if the given value is an instanceof AudioNode\n */\nexport function isAudioNode(arg: any): arg is AudioNode {\n\treturn isAnyAudioNode(arg);\n}\n\n/**\n * Test if the arg is instanceof an OfflineAudioContext\n */\nexport function isOfflineAudioContext(arg: any): arg is OfflineAudioContext {\n\treturn isAnyOfflineAudioContext(arg);\n}\n\n/**\n * Test if the arg is an instanceof AudioContext\n */\nexport function isAudioContext(arg: any): arg is AudioContext {\n\treturn isAnyAudioContext(arg);\n}\n\n/**\n * Test if the arg is instanceof an AudioBuffer\n */\nexport function isAudioBuffer(arg: any): arg is AudioBuffer {\n\treturn arg instanceof AudioBuffer;\n}\n","import { Note } from \"../type/Units\";\n\n/**\n * Test if the arg is undefined\n */\nexport function isUndef(arg: any): arg is undefined {\n\treturn typeof arg === \"undefined\";\n}\n\n/**\n * Test if the arg is not undefined\n */\nexport function isDefined<T>(arg: T | undefined): arg is T {\n\treturn !isUndef(arg);\n}\n\n/**\n * Test if the arg is a function\n */\nexport function isFunction(arg: any): arg is (a: any) => any {\n\treturn typeof arg === \"function\";\n}\n\n/**\n * Test if the argument is a number.\n */\nexport function isNumber(arg: any): arg is number {\n\treturn (typeof arg === \"number\");\n}\n\n/**\n * Test if the given argument is an object literal (i.e. `{}`);\n */\nexport function isObject(arg: any): arg is object {\n\treturn (Object.prototype.toString.call(arg) === \"[object Object]\" && arg.constructor === Object);\n}\n\n/**\n * Test if the argument is a boolean.\n */\nexport function isBoolean(arg: any): arg is boolean {\n\treturn (typeof arg === \"boolean\");\n}\n\n/**\n * Test if the argument is an Array\n */\nexport function isArray(arg: any): arg is any[] {\n\treturn (Array.isArray(arg));\n}\n\n/**\n * Test if the argument is a string.\n */\nexport function isString(arg: any): arg is string {\n\treturn (typeof arg === \"string\");\n}\n\n/**\n * Test if the argument is in the form of a note in scientific pitch notation.\n * e.g. \"C4\"\n */\nexport function isNote(arg: any): arg is Note {\n\treturn isString(arg) && /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i.test(arg);\n}\n","import { isAudioBuffer, isAudioNode, isAudioParam } from \"./AdvancedTypeCheck\";\nimport { isDefined, isObject, isUndef } from \"./TypeCheck\";\n\ntype BaseToneOptions = import(\"../Tone\").BaseToneOptions;\n\n/**\n * Some objects should not be merged\n */\nfunction noCopy(key: string, arg: any): boolean {\n\treturn key === \"value\" || isAudioParam(arg) || isAudioNode(arg) || isAudioBuffer(arg);\n}\n\n/**\n * Recursively merge an object\n * @param target the object to merge into\n * @param sources the source objects to merge\n */\nexport function deepMerge<T>(target: T): T;\nexport function deepMerge<T, U>(target: T, source1: U): T & U;\nexport function deepMerge<T, U, V>(target: T, source1: U, source2: V): T & U & V;\nexport function deepMerge<T, U, V, W>(target: T, source1: U, source2: V, source3: W): T & U & V & W;\nexport function deepMerge(target: any, ...sources: any[]): any {\n\tif (!sources.length) {\n\t\treturn target; \n\t}\n\tconst source = sources.shift();\n\n\tif (isObject(target) && isObject(source)) {\n\t\tfor (const key in source) {\n\t\t\tif (noCopy(key, source[key])) {\n\t\t\t\ttarget[key] = source[key];\n\t\t\t} else if (isObject(source[key])) {\n\t\t\t\tif (!target[key]) {\n\t\t\t\t\tObject.assign(target, { [key]: {} }); \n\t\t\t\t}\n\t\t\t\tdeepMerge(target[key], source[key] as any);\n\t\t\t} else {\n\t\t\t\tObject.assign(target, { [key]: source[key] as any });\n\t\t\t}\n\t\t}\n\t}\n\t// @ts-ignore\n\treturn deepMerge(target, ...sources);\n}\n\n/**\n * Returns true if the two arrays have the same value for each of the elements\n */\nexport function deepEquals(arrayA: number[] | string[], arrayB: number[] | string[]): boolean {\n\treturn arrayA.length === arrayB.length && arrayA.every((element, index) => arrayB[index] === element);\n}\n\n/**\n * Convert an args array into an object.\n */\nexport function optionsFromArguments<T extends object>(\n\tdefaults: T,\n\targsArray: IArguments,\n\tkeys: string[] = [],\n\tobjKey?: string,\n): T {\n\tconst opts: any = {};\n\tconst args = Array.from(argsArray);\n\t// if the first argument is an object and has an object key\n\tif (isObject(args[0]) && objKey && !Reflect.has(args[0], objKey)) {\n\t\t// if it's not part of the defaults\n\t\tconst partOfDefaults = Object.keys(args[0]).some(key => Reflect.has(defaults, key));\n\t\tif (!partOfDefaults) {\n\t\t\t// merge that key\n\t\t\tdeepMerge(opts, { [objKey]: args[0] });\n\t\t\t// remove the obj key from the keys\n\t\t\tkeys.splice(keys.indexOf(objKey), 1);\n\t\t\t// shift the first argument off\n\t\t\targs.shift();\n\t\t}\n\t}\n\tif (args.length === 1 && isObject(args[0])) {\n\t\tdeepMerge(opts, args[0]);\n\t} else {\n\t\tfor (let i = 0; i < keys.length; i++) {\n\t\t\tif (isDefined(args[i])) {\n\t\t\t\topts[keys[i]] = args[i];\n\t\t\t}\n\t\t}\n\t}\n\treturn deepMerge(defaults, opts);\n}\n\n/**\n * Return this instances default values by calling Constructor.getDefaults()\n */\nexport function getDefaultsFromInstance<T>(instance: T): BaseToneOptions {\n\ttype ToneClass = {\n\t\tconstructor: ToneClass;\n\t\tgetDefaults: () => BaseToneOptions;\n\t} & T;\n\n\treturn (instance as ToneClass).constructor.getDefaults();\n}\n\n/**\n * Returns the fallback if the given object is undefined.\n * Take an array of arguments and return a formatted options object.\n */\nexport function defaultArg<T>(given: T, fallback: T): T {\n\tif (isUndef(given)) {\n\t\treturn fallback;\n\t} else {\n\t\treturn given;\n\t}\n}\n\n/**\n * Remove all of the properties belonging to omit from obj.\n */\nexport function omitFromObject<T extends object, O extends string[]>(obj: T, omit: O): Omit<T, keyof O> {\n\tomit.forEach(prop => {\n\t\tif (Reflect.has(obj, prop)) {\n\t\t\tdelete obj[prop];\n\t\t}\n\t});\n\treturn obj;\n}\n","/**\n * Assert that the statement is true, otherwise invoke an error with the given message.\n */\nexport function assert(statement: boolean, error: string): void {\n\tif (!statement) {\n\t\tthrow new Error(error);\n\t}\n}\n\nexport function log(...args: any[]): void {\n\t// eslint-disable-next-line no-console\n\tconsole.log(...args);\n}\n","/**\n * Tone.js\n * @author Yotam Mann\n * @license http://opensource.org/licenses/MIT MIT License\n * @copyright 2014-2019 Yotam Mann\n */\nimport { version } from \"../version\";\nimport { theWindow } from \"./context/AudioContext\";\nimport { assert, log } from \"./util/Debug\";\n\n//-------------------------------------\n// \tTONE\n//-------------------------------------\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface BaseToneOptions {}\n\n/**\n * @class  Tone is the base class of all other classes.\n * @constructor\n */\nexport abstract class Tone {\n\n\t/**\n\t * The version number semver\n\t */\n\tstatic version: string = version;\n\n\t/**\n\t * The name of the class\n\t */\n\tprotected abstract name: string;\n\n\t/**\n\t * Returns all of the default options belonging to the class.\n\t */\n\tstatic getDefaults(): BaseToneOptions {\n\t\treturn {};\n\t}\n\n\t//-------------------------------------\n\t// \tDEBUGGING\n\t//-------------------------------------\n\n\t/**\n\t * Set this debug flag to log all events that happen in this class.\n\t */\n\tdebug: boolean = false;\n\n\t/**\n\t * Prints the outputs to the console log for debugging purposes.\n\t * Prints the contents only if either the object has a property\n\t * called `debug` set to true, or a variable called TONE_DEBUG_CLASS\n\t * is set to the name of the class.\n\t * @example\n\t * //prints all logs originating from Tone.OscillatorNode\n\t * Tone.global.TONE_DEBUG_CLASS = \"OscillatorNode\"\n\t */\n\tprotected log(...args: any[]): void {\n\t\t// if the object is either set to debug = true\n\t\t// or if there is a string on the Tone.global.with the class name\n\t\tif (this.debug || (theWindow && this.toString() === theWindow.TONE_DEBUG_CLASS)) {\n\t\t\targs.unshift(this.toString() + \":\");\n\t\t\tlog(...args);\n\t\t}\n\t}\n\n\t/**\n\t * Assert that the statement is true, otherwise invoke the error.\n\t * @param statement\n\t * @param error The message which is passed into an Error\n\t */\n\tprotected assert(statement: boolean, error: string): void {\n\t\tassert(statement, error);\n\t}\n\n\t//-------------------------------------\n\t// \tDISPOSING\n\t//-------------------------------------\n\n\t/**\n\t * Indicates if the instance was disposed\n\t */\n\tprivate _wasDisposed: boolean = false;\n\n\t/**\n\t * disconnect and dispose.\n\t */\n\tdispose(): this {\n\t\tthis._wasDisposed = true;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Indicates if the instance was disposed. 'Disposing' an\n\t * instance means that all of the Web Audio nodes that were\n\t * created for the instance are disconnected and freed for garbage collection.\n\t */\n\tget disposed(): boolean {\n\t\treturn this._wasDisposed;\n\t}\n\n\t//-------------------------------------\n\t// \tDEFAULTS\n\t//-------------------------------------\n\n\t/**\n\t * If the `given` parameter is undefined, use the `fallback`.\n\t * If both `given` and `fallback` are object literals, it will\n\t * return a deep copy which includes all of the parameters from both\n\t * objects. If a parameter is undefined in given, it will return\n\t * the fallback property.\n\t * <br><br>\n\t * WARNING: if object is self referential, it will go into an an\n\t * infinite recursive loop.\n\t * @memberOf Tone\n\t * @param  {*} given\n\t * @param  {*} fallback\n\t * @return {*}\n\t */\n\t// static defaultArg(given, fallback) {\n\t// if (isObject(given) && isObject(fallback)) {\n\t// \tconst ret = {};\n\t// \t// make a deep copy of the given object\n\t// \tfor (const givenProp in given) {\n\t// \t\tret[givenProp] = Tone.defaultArg(fallback[givenProp], given[givenProp]);\n\t// \t}\n\t// \tfor (const fallbackProp in fallback) {\n\t// \t\tret[fallbackProp] = Tone.defaultArg(given[fallbackProp], fallback[fallbackProp]);\n\t// \t}\n\t// \treturn ret;\n\t// } else {\n\t// \treturn isUndef(given) ? fallback : given;\n\t// }\n\t// }\n\n\t// protected options(argsArray: IArguments, keys: string[]): object {\n\t// \tlet options: any = {};\n\t// \tconst args = Array.from(argsArray);\n\t// \tif (args[0] instanceof BaseAudioContext) {\n\t// \t\toptions.context = args.shift();\n\t// \t}\n\t// \tif (args.length === 1 && isObject(args[0])) {\n\t// \t\toptions = Object.assign(options, args[0]);\n\t// \t} else {\n\t// \t\tfor (let i = 0; i < keys.length; i++) {\n\t// \t\t\tif (isDefined(args[i])) {\n\t// \t\t\t\toptions[keys[i]] = args[i];\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\t// \treturn deepMerge(this.getDefaults(), options);\n\t// }\n\n\t/**\n\t * Convert the class to a string\n\t * @example\n\t * const osc = new Oscillator()\n\t * osc.toString() // \"Oscillator\"\n\t */\n\ttoString(): string {\n\t\treturn this.name;\n\t}\n\n\t//-------------------------------------\n\t// \tSTATIC\n\t//-------------------------------------\n\n\t// static get context(): import(\"./context/Context\").Context {\n\t// \treturn getContext();\n\t// }\n\n\t// static now(): Seconds {\n\t// \treturn Tone.context.now();\n\t// }\n}\n","import { Tone } from \"../Tone\";\nimport { isUndef } from \"./TypeCheck\";\n\nexport interface EmitterEventObject {\n\t[event: string]: Array<(...args: any[]) => void>;\n}\n\n/**\n * Emitter gives classes which extend it\n * the ability to listen for and emit events.\n * Inspiration and reference from Jerome Etienne's [MicroEvent](https://github.com/jeromeetienne/microevent.js).\n * MIT (c) 2011 Jerome Etienne.\n */\nexport class Emitter<EventType extends string = string> extends Tone {\n\n\treadonly name: string = \"Emitter\";\n\n\t/**\n\t * Private container for the events\n\t */\n\tprivate _events?: EmitterEventObject;\n\n\t/**\n\t * Bind a callback to a specific event.\n\t * @param  event     The name of the event to listen for.\n\t * @param  callback  The callback to invoke when the event is emitted\n\t */\n\ton(event: EventType, callback: (...args: any[]) => void): this {\n\t\t// split the event\n\t\tconst events = event.split(/\\W+/);\n\t\tevents.forEach(eventName => {\n\t\t\tif (isUndef(this._events)) {\n\t\t\t\tthis._events = {};\n\t\t\t}\n\t\t\tif (!this._events.hasOwnProperty(eventName)) {\n\t\t\t\tthis._events[eventName] = [];\n\t\t\t}\n\t\t\tthis._events[eventName].push(callback);\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Bind a callback which is only invoked once\n\t * @param  event     The name of the event to listen for.\n\t * @param  callback  The callback to invoke when the event is emitted\n\t */\n\tonce(event: EventType, callback: (...args: any[]) => void): this {\n\t\tconst boundCallback = (...args: any[]) => {\n\t\t\t// invoke the callback\n\t\t\tcallback(...args);\n\t\t\t// remove the event\n\t\t\tthis.off(event, boundCallback);\n\t\t};\n\t\tthis.on(event, boundCallback);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Remove the event listener.\n\t * @param  event     The event to stop listening to.\n\t * @param  callback  The callback which was bound to the event with Emitter.on.\n\t *                   If no callback is given, all callbacks events are removed.\n\t */\n\toff(event: EventType, callback?: (...args: any[]) => void): this {\n\t\tconst events = event.split(/\\W+/);\n\t\tevents.forEach(eventName => {\n\t\t\tif (isUndef(this._events)) {\n\t\t\t\tthis._events = {};\n\t\t\t}\n\t\t\tif (this._events.hasOwnProperty(event)) {\n\t\t\t\tif (isUndef(callback)) {\n\t\t\t\t\tthis._events[event] = [];\n\t\t\t\t} else {\n\t\t\t\t\tconst eventList = this._events[event];\n\t\t\t\t\tfor (let i = 0; i < eventList.length; i++) {\n\t\t\t\t\t\tif (eventList[i] === callback) {\n\t\t\t\t\t\t\teventList.splice(i, 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Invoke all of the callbacks bound to the event\n\t * with any arguments passed in.\n\t * @param  event  The name of the event.\n\t * @param args The arguments to pass to the functions listening.\n\t */\n\temit(event, ...args: any[]): this {\n\t\tif (this._events) {\n\t\t\tif (this._events.hasOwnProperty(event)) {\n\t\t\t\tconst eventList = this._events[event].slice(0);\n\t\t\t\tfor (let i = 0, len = eventList.length; i < len; i++) {\n\t\t\t\t\teventList[i].apply(this, args);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add Emitter functions (on/off/emit) to the object\n\t */\n\tstatic mixin(constr: any): void {\n\t\t// instance._events = {};\n\t\t[\"on\", \"once\", \"off\", \"emit\"].forEach(name => {\n\t\t\tconst property = Object.getOwnPropertyDescriptor(Emitter.prototype, name) as PropertyDescriptor;\n\t\t\tObject.defineProperty(constr.prototype, name, property);\n\t\t});\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._events = undefined;\n\t\treturn this;\n\t}\n}\n","import { Tone } from \"../Tone\";\nimport { Seconds } from \"../type/Units\";\nimport { optionsFromArguments } from \"./Defaults\";\n\ntype TimelineSearchParam = \"ticks\" | \"time\";\n\n/**\n * The options object for Timeline\n */\ninterface TimelineOptions {\n\tmemory: number;\n}\n\n/**\n * An event must have a time number\n */\nexport interface TimelineEvent {\n\ttime: number;\n}\n\n/**\n * A Timeline class for scheduling and maintaining state\n * along a timeline. All events must have a \"time\" property.\n * Internally, events are stored in time order for fast\n * retrieval.\n */\nexport class Timeline<GenericEvent extends TimelineEvent> extends Tone {\n\n\treadonly name: string = \"Timeline\";\n\n\t/**\n\t * The memory of the timeline, i.e.\n\t * how many events in the past it will retain\n\t */\n\tmemory: number;\n\n\t/**\n\t * The array of scheduled timeline events\n\t */\n\tprotected _timeline: GenericEvent[] = [];\n\n\t/**\n\t * @param memory The number of previous events that are retained.\n\t */\n\tconstructor(memory?: number);\n\tconstructor(options?: Partial<TimelineOptions>);\n\tconstructor() {\n\t\tsuper();\n\t\tconst options = optionsFromArguments(Timeline.getDefaults(), arguments, [\"memory\"]);\n\n\t\tthis.memory = options.memory;\n\t}\n\n\tstatic getDefaults(): TimelineOptions {\n\t\treturn {\n\t\t\tmemory: Infinity,\n\t\t};\n\t}\n\n\t/**\n\t * The number of items in the timeline.\n\t */\n\tget length(): number {\n\t\treturn this._timeline.length;\n\t}\n\n\t/**\n\t * Insert an event object onto the timeline. Events must have a \"time\" attribute.\n\t * @param event  The event object to insert into the timeline.\n\t */\n\tadd(event: GenericEvent): this {\n\t\t// the event needs to have a time attribute\n\t\tthis.assert(Reflect.has(event, \"time\"), \"Timeline: events must have a time attribute\");\n\t\tevent.time = event.time.valueOf();\n\t\tconst index = this._search(event.time);\n\t\tthis._timeline.splice(index + 1, 0, event);\n\t\t// if the length is more than the memory, remove the previous ones\n\t\tif (this.length > this.memory) {\n\t\t\tconst diff = this.length - this.memory;\n\t\t\tthis._timeline.splice(0, diff);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Remove an event from the timeline.\n\t * @param  {Object}  event  The event object to remove from the list.\n\t * @returns {Timeline} this\n\t */\n\tremove(event: GenericEvent): this {\n\t\tconst index = this._timeline.indexOf(event);\n\t\tif (index !== -1) {\n\t\t\tthis._timeline.splice(index, 1);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the nearest event whose time is less than or equal to the given time.\n\t * @param  time  The time to query.\n\t */\n\tget(time: number, param: TimelineSearchParam = \"time\"): GenericEvent | null {\n\t\tconst index = this._search(time, param);\n\t\tif (index !== -1) {\n\t\t\treturn this._timeline[index];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * Return the first event in the timeline without removing it\n\t * @returns {Object} The first event object\n\t */\n\tpeek(): GenericEvent | undefined {\n\t\treturn this._timeline[0];\n\t}\n\n\t/**\n\t * Return the first event in the timeline and remove it\n\t */\n\tshift(): GenericEvent | undefined {\n\t\treturn this._timeline.shift();\n\t}\n\n\t/**\n\t * Get the event which is scheduled after the given time.\n\t * @param  time  The time to query.\n\t */\n\tgetAfter(time: number, param: TimelineSearchParam = \"time\"): GenericEvent | null {\n\t\tconst index = this._search(time, param);\n\t\tif (index + 1 < this._timeline.length) {\n\t\t\treturn this._timeline[index + 1];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * Get the event before the event at the given time.\n\t * @param  time  The time to query.\n\t */\n\tgetBefore(time: number): GenericEvent | null {\n\t\tconst len = this._timeline.length;\n\t\t// if it's after the last item, return the last item\n\t\tif (len > 0 && this._timeline[len - 1].time < time) {\n\t\t\treturn this._timeline[len - 1];\n\t\t}\n\t\tconst index = this._search(time);\n\t\tif (index - 1 >= 0) {\n\t\t\treturn this._timeline[index - 1];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * Cancel events at and after the given time\n\t * @param  time  The time to query.\n\t */\n\tcancel(after: number): this {\n\t\tif (this._timeline.length > 1) {\n\t\t\tlet index = this._search(after);\n\t\t\tif (index >= 0) {\n\t\t\t\tif (this._timeline[index].time === after) {\n\t\t\t\t\t// get the first item with that time\n\t\t\t\t\tfor (let i = index; i >= 0; i--) {\n\t\t\t\t\t\tif (this._timeline[i].time === after) {\n\t\t\t\t\t\t\tindex = i;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis._timeline = this._timeline.slice(0, index);\n\t\t\t\t} else {\n\t\t\t\t\tthis._timeline = this._timeline.slice(0, index + 1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._timeline = [];\n\t\t\t}\n\t\t} else if (this._timeline.length === 1) {\n\t\t\t// the first item's time\n\t\t\tif (this._timeline[0].time >= after) {\n\t\t\t\tthis._timeline = [];\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Cancel events before or equal to the given time.\n\t * @param  time  The time to cancel before.\n\t */\n\tcancelBefore(time: number): this {\n\t\tconst index = this._search(time);\n\t\tif (index >= 0) {\n\t\t\tthis._timeline = this._timeline.slice(index + 1);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the previous event if there is one. null otherwise\n\t * @param  event The event to find the previous one of\n\t * @return The event right before the given event\n\t */\n\tpreviousEvent(event: GenericEvent): GenericEvent | null {\n\t\tconst index = this._timeline.indexOf(event);\n\t\tif (index > 0) {\n\t\t\treturn this._timeline[index - 1];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * Does a binary search on the timeline array and returns the\n\t * nearest event index whose time is after or equal to the given time.\n\t * If a time is searched before the first index in the timeline, -1 is returned.\n\t * If the time is after the end, the index of the last item is returned.\n\t * @param  time\n\t */\n\tprotected _search(time: number, param: TimelineSearchParam = \"time\"): number {\n\t\tif (this._timeline.length === 0) {\n\t\t\treturn -1;\n\t\t}\n\t\tlet beginning = 0;\n\t\tconst len = this._timeline.length;\n\t\tlet end = len;\n\t\tif (len > 0 && this._timeline[len - 1][param] <= time) {\n\t\t\treturn len - 1;\n\t\t}\n\t\twhile (beginning < end) {\n\t\t\t// calculate the midpoint for roughly equal partition\n\t\t\tlet midPoint = Math.floor(beginning + (end - beginning) / 2);\n\t\t\tconst event = this._timeline[midPoint];\n\t\t\tconst nextEvent = this._timeline[midPoint + 1];\n\t\t\tif (event[param] === time) {\n\t\t\t\t// choose the last one that has the same time\n\t\t\t\tfor (let i = midPoint; i < this._timeline.length; i++) {\n\t\t\t\t\tconst testEvent = this._timeline[i];\n\t\t\t\t\tif (testEvent[param] === time) {\n\t\t\t\t\t\tmidPoint = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn midPoint;\n\t\t\t} else if (event[param] < time && nextEvent[param] > time) {\n\t\t\t\treturn midPoint;\n\t\t\t} else if (event[param] > time) {\n\t\t\t\t// search lower\n\t\t\t\tend = midPoint;\n\t\t\t} else {\n\t\t\t\t// search upper\n\t\t\t\tbeginning = midPoint + 1;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\n\t/**\n\t * Internal iterator. Applies extra safety checks for\n\t * removing items from the array.\n\t */\n\tprivate _iterate(\n\t\tcallback: (event: GenericEvent) => void,\n\t\tlowerBound = 0, upperBound = this._timeline.length - 1,\n\t): void {\n\t\tthis._timeline.slice(lowerBound, upperBound + 1).forEach(callback);\n\t}\n\n\t/**\n\t * Iterate over everything in the array\n\t * @param  callback The callback to invoke with every item\n\t */\n\tforEach(callback: (event: GenericEvent) => void): this {\n\t\tthis._iterate(callback);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Iterate over everything in the array at or before the given time.\n\t * @param  time The time to check if items are before\n\t * @param  callback The callback to invoke with every item\n\t */\n\tforEachBefore(time: Seconds, callback: (event: GenericEvent) => void): this {\n\t\t// iterate over the items in reverse so that removing an item doesn't break things\n\t\tconst upperBound = this._search(time);\n\t\tif (upperBound !== -1) {\n\t\t\tthis._iterate(callback, 0, upperBound);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Iterate over everything in the array after the given time.\n\t * @param  time The time to check if items are before\n\t * @param  callback The callback to invoke with every item\n\t */\n\tforEachAfter(time: Seconds, callback: (event: GenericEvent) => void): this {\n\t\t// iterate over the items in reverse so that removing an item doesn't break things\n\t\tconst lowerBound = this._search(time);\n\t\tthis._iterate(callback, lowerBound + 1);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Iterate over everything in the array between the startTime and endTime.\n\t * The timerange is inclusive of the startTime, but exclusive of the endTime.\n\t * range = [startTime, endTime).\n\t * @param  startTime The time to check if items are before\n\t * @param  endTime The end of the test interval.\n\t * @param  callback The callback to invoke with every item\n\t */\n\tforEachBetween(startTime: number, endTime: number, callback: (event: GenericEvent) => void): this {\n\t\tlet lowerBound = this._search(startTime);\n\t\tlet upperBound = this._search(endTime);\n\t\tif (lowerBound !== -1 && upperBound !== -1) {\n\t\t\tif (this._timeline[lowerBound].time !== startTime) {\n\t\t\t\tlowerBound += 1;\n\t\t\t}\n\t\t\t// exclusive of the end time\n\t\t\tif (this._timeline[upperBound].time === endTime) {\n\t\t\t\tupperBound -= 1;\n\t\t\t}\n\t\t\tthis._iterate(callback, lowerBound, upperBound);\n\t\t} else if (lowerBound === -1) {\n\t\t\tthis._iterate(callback, 0, upperBound);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Iterate over everything in the array at or after the given time. Similar to\n\t * forEachAfter, but includes the item(s) at the given time.\n\t * @param  time The time to check if items are before\n\t * @param  callback The callback to invoke with every item\n\t */\n\tforEachFrom(time: number, callback: (event: GenericEvent) => void): this {\n\t\t// iterate over the items in reverse so that removing an item doesn't break things\n\t\tlet lowerBound = this._search(time);\n\t\t// work backwards until the event time is less than time\n\t\twhile (lowerBound >= 0 && this._timeline[lowerBound].time >= time) {\n\t\t\tlowerBound--;\n\t\t}\n\t\tthis._iterate(callback, lowerBound + 1);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Iterate over everything in the array at the given time\n\t * @param  time The time to check if items are before\n\t * @param  callback The callback to invoke with every item\n\t */\n\tforEachAtTime(time: number, callback: (event: GenericEvent) => void): this {\n\t\t// iterate over the items in reverse so that removing an item doesn't break things\n\t\tconst upperBound = this._search(time);\n\t\tif (upperBound !== -1) {\n\t\t\tthis._iterate(event => {\n\t\t\t\tif (event.time === time) {\n\t\t\t\t\tcallback(event);\n\t\t\t\t}\n\t\t\t}, 0, upperBound);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._timeline = [];\n\t\treturn this;\n\t}\n}\n","//-------------------------------------\n// INITIALIZING NEW CONTEXT\n//-------------------------------------\n\ntype Context = import(\"./Context\").Context;\n\n/**\n * Array of callbacks to invoke when a new context is created\n */\nconst notifyNewContext: Array<(ctx: Context) => void> = [];\n\n/**\n * Used internally to setup a new Context\n */\nexport function onContextInit(cb: (ctx: Context) => void): void {\n\tnotifyNewContext.push(cb);\n}\n\n/**\n * Invoke any classes which need to also be initialized when a new context is created.\n */\nexport function initializeContext(ctx: Context): void {\n\t// add any additional modules\n\tnotifyNewContext.forEach(cb => cb(ctx));\n}\n\n/**\n * Array of callbacks to invoke when a new context is created\n */\nconst notifyCloseContext: Array<(ctx: Context) => void> = [];\n\n/**\n * Used internally to tear down a Context\n */\nexport function onContextClose(cb: (ctx: Context) => void): void {\n\tnotifyCloseContext.push(cb);\n}\n\nexport function closeContext(ctx: Context): void {\n\t// add any additional modules\n\tnotifyCloseContext.forEach(cb => cb(ctx));\n}\n","import { Ticker, TickerClockSource } from \"../clock/Ticker\";\nimport { Seconds } from \"../type/Units\";\nimport { isAudioContext } from \"../util/AdvancedTypeCheck\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Emitter } from \"../util/Emitter\";\nimport { Omit } from \"../util/Interface\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isString } from \"../util/TypeCheck\";\nimport { AnyAudioContext, getAudioContext } from \"./AudioContext\";\nimport { closeContext, initializeContext } from \"./ContextInitialization\";\n\ntype Transport = import(\"../clock/Transport\").Transport;\ntype Destination = import(\"./Destination\").Destination;\n\nexport type ContextLatencyHint = AudioContextLatencyCategory | \"fastest\";\n\n// these are either not used in Tone.js or deprecated and not implemented.\nexport type ExcludedFromBaseAudioContext = \"onstatechange\" | \"addEventListener\" |\n\"removeEventListener\" | \"listener\" | \"dispatchEvent\" | \"audioWorklet\" | \"destination\" | \"createScriptProcessor\";\n// \"createMediaStreamSource\" | \"createMediaElementSource\" | \"createMediaStreamTrackSource\" |\n// \"baseLatency\" | \"suspend\" |\n\n// the subset of the BaseAudioContext which Tone.Context implements.\nexport type BaseAudioContextSubset = Omit<BaseAudioContext, ExcludedFromBaseAudioContext>;\n\nexport interface ContextOptions {\n\tclockSource: TickerClockSource;\n\tlatencyHint: ContextLatencyHint;\n\tlookAhead: Seconds;\n\tupdateInterval: Seconds;\n\tcontext: AnyAudioContext;\n}\n\nexport interface ContextTimeoutEvent {\n\tcallback: (...args: any[]) => void;\n\tid: number;\n\ttime: Seconds;\n}\n\n/**\n * Wrapper around the native AudioContext.\n * @category Core\n */\nexport class Context extends Emitter<\"statechange\" | \"tick\"> implements BaseAudioContextSubset {\n\n\treadonly name: string = \"Context\";\n\n\t/**\n\t * The amount of time into the future events are scheduled. Giving Web Audio\n\t * a short amount of time into the future to schedule events can reduce clicks and\n\t * improve performance. This value can be set to 0 to get the lowest latency.\n\t */\n\tlookAhead: Seconds;\n\n\t/**\n\t * private reference to the BaseAudioContext\n\t */\n\tprotected readonly _context: AnyAudioContext;\n\n\t/**\n\t * A reliable callback method\n\t */\n\tprivate readonly _ticker: Ticker;\n\n\t/**\n\t * The default latency hint\n\t */\n\tprivate _latencyHint: ContextLatencyHint | Seconds;\n\n\t/**\n\t * An object containing all of the constants AudioBufferSourceNodes\n\t */\n\tprivate _constants = new Map<number, AudioBufferSourceNode>();\n\n\t/**\n\t * All of the setTimeout events.\n\t */\n\tprivate _timeouts: Timeline<ContextTimeoutEvent> = new Timeline();\n\n\t/**\n\t * The timeout id counter\n\t */\n\tprivate _timeoutIds = 0;\n\n\t/**\n\t * A reference the Transport singleton belonging to this context\n\t */\n\tprivate _transport!: Transport;\n\n\t/**\n\t * A reference the Destination singleton belonging to this context\n\t */\n\tprivate _destination!: Destination;\n\n\t/**\n\t * Private indicator if the context has been initialized\n\t */\n\tprivate _initialized: boolean = false;\n\n\tconstructor(context?: AnyAudioContext);\n\tconstructor(options?: Partial<ContextOptions>);\n\tconstructor() {\n\t\tsuper();\n\t\tconst options = optionsFromArguments(Context.getDefaults(), arguments, [\"context\"]);\n\n\t\tthis._context = options.context;\n\n\t\tthis._latencyHint = options.latencyHint;\n\t\tthis.lookAhead = options.lookAhead;\n\n\t\tthis._ticker = new Ticker(this.emit.bind(this, \"tick\"), options.clockSource, options.updateInterval);\n\t\tthis.on(\"tick\", this._timeoutLoop.bind(this));\n\n\t\t// fwd events from the context\n\t\tthis._context.onstatechange = () => {\n\t\t\tthis.emit(\"statechange\", this.state);\n\t\t};\n\t}\n\n\tstatic getDefaults(): ContextOptions {\n\t\treturn {\n\t\t\tclockSource: \"worker\",\n\t\t\tcontext: getAudioContext(),\n\t\t\tlatencyHint: \"interactive\",\n\t\t\tlookAhead: 0.1,\n\t\t\tupdateInterval: 0.03,\n\t\t};\n\t}\n\n\t/**\n\t * Finish setting up the context. **You usually do not need to do this manually.**\n\t */\n\tinitialize(): this {\n\t\tif (!this._initialized) {\n\t\t\t// add any additional modules\n\t\t\tinitializeContext(this);\n\t\t\tthis._initialized = true;\n\t\t}\n\t\treturn this;\n\t}\n\n\t//---------------------------\n\t// BASE AUDIO CONTEXT METHODS\n\t//---------------------------\n\n\tcreateAnalyser(): AnalyserNode {\n\t\treturn this._context.createAnalyser();\n\t}\n\tcreateOscillator(): OscillatorNode {\n\t\treturn this._context.createOscillator();\n\t}\n\tcreateBufferSource(): AudioBufferSourceNode {\n\t\treturn this._context.createBufferSource();\n\t}\n\tcreateBiquadFilter(): BiquadFilterNode {\n\t\treturn this._context.createBiquadFilter();\n\t}\n\tcreateBuffer(numberOfChannels: number, length: number, sampleRate: number): AudioBuffer {\n\t\treturn this._context.createBuffer(numberOfChannels, length, sampleRate);\n\t}\n\tcreateChannelMerger(numberOfInputs?: number | undefined): ChannelMergerNode {\n\t\treturn this._context.createChannelMerger(numberOfInputs);\n\t}\n\tcreateChannelSplitter(numberOfOutputs?: number | undefined): ChannelSplitterNode {\n\t\treturn this._context.createChannelSplitter(numberOfOutputs);\n\t}\n\tcreateConstantSource(): ConstantSourceNode {\n\t\treturn this._context.createConstantSource();\n\t}\n\tcreateConvolver(): ConvolverNode {\n\t\treturn this._context.createConvolver();\n\t}\n\tcreateDelay(maxDelayTime?: number | undefined): DelayNode {\n\t\treturn this._context.createDelay(maxDelayTime);\n\t}\n\tcreateDynamicsCompressor(): DynamicsCompressorNode {\n\t\treturn this._context.createDynamicsCompressor();\n\t}\n\tcreateGain(): GainNode {\n\t\treturn this._context.createGain();\n\t}\n\tcreateIIRFilter(feedForward: number[], feedback: number[]): IIRFilterNode {\n\t\treturn this._context.createIIRFilter(feedForward, feedback);\n\t}\n\tcreatePanner(): PannerNode {\n\t\treturn this._context.createPanner();\n\t}\n\tcreatePeriodicWave(\n\t\treal: number[] | Float32Array,\n\t\timag: number[] | Float32Array,\n\t\tconstraints?: PeriodicWaveConstraints | undefined,\n\t): PeriodicWave {\n\t\treturn this._context.createPeriodicWave(real, imag, constraints);\n\t}\n\tcreateStereoPanner(): StereoPannerNode {\n\t\treturn this._context.createStereoPanner();\n\t}\n\tcreateWaveShaper(): WaveShaperNode {\n\t\treturn this._context.createWaveShaper();\n\t}\n\tdecodeAudioData(audioData: ArrayBuffer): Promise<AudioBuffer> {\n\t\treturn this._context.decodeAudioData(audioData);\n\t}\n\n\t/**\n\t * The current time in seconds of the AudioContext.\n\t */\n\tget currentTime(): Seconds {\n\t\treturn this._context.currentTime;\n\t}\n\t/**\n\t * The current time in seconds of the AudioContext.\n\t */\n\tget state(): AudioContextState {\n\t\treturn this._context.state;\n\t}\n\t/**\n\t * The current time in seconds of the AudioContext.\n\t */\n\tget sampleRate(): number {\n\t\treturn this._context.sampleRate;\n\t}\n\t/**\n\t * The listener\n\t */\n\tget listener(): AudioListener {\n\t\treturn this._context.listener;\n\t}\n\n\t/**\n\t * There is only one Transport per Context. It is created on initialization.\n\t */\n\tget transport(): Transport {\n\t\tthis.assert(this._initialized, \"The context must be initialized before being used by invoking context.initialize()\");\n\t\treturn this._transport;\n\t}\n\tset transport(t: Transport) {\n\t\tthis.assert(!this._initialized, \"The transport cannot be set after initialization.\");\n\t\tthis._transport = t;\n\t}\n\n\t/**\n\t * A reference to the Context's destination node.\n\t */\n\tget destination(): Destination {\n\t\tthis.assert(this._initialized, \"The context must be initialized before being used by invoking context.initialize()\");\n\t\treturn this._destination;\n\t}\n\tset destination(d: Destination) {\n\t\tthis.assert(!this._initialized, \"The transport cannot be set after initialization.\");\n\t\tthis._destination = d;\n\t}\n\n\t//---------------------------\n\t// TICKER\n\t//---------------------------\n\n\t/**\n\t * How often the interval callback is invoked.\n\t * This number corresponds to how responsive the scheduling\n\t * can be. context.updateInterval + context.lookAhead gives you the\n\t * total latency between scheduling an event and hearing it.\n\t */\n\tget updateInterval(): Seconds {\n\t\treturn this._ticker.updateInterval;\n\t}\n\tset updateInterval(interval: Seconds) {\n\t\tthis._ticker.updateInterval = interval;\n\t}\n\n\t/**\n\t * What the source of the clock is, either \"worker\" (default),\n\t * \"timeout\", or \"offline\" (none).\n\t */\n\tget clockSource(): TickerClockSource {\n\t\treturn this._ticker.type;\n\t}\n\tset clockSource(type: TickerClockSource) {\n\t\tthis._ticker.type = type;\n\t}\n\n\t/**\n\t * The type of playback, which affects tradeoffs between audio\n\t * output latency and responsiveness.\n\t * In addition to setting the value in seconds, the latencyHint also\n\t * accepts the strings \"interactive\" (prioritizes low latency),\n\t * \"playback\" (prioritizes sustained playback), \"balanced\" (balances\n\t * latency and performance), and \"fastest\" (lowest latency, might glitch more often).\n\t * @example\n\t * //set the lookAhead to 0.3 seconds\n\t * Tone.context.latencyHint = 0.3;\n\t */\n\tget latencyHint(): ContextLatencyHint | Seconds {\n\t\treturn this._latencyHint;\n\t}\n\tset latencyHint(hint: ContextLatencyHint | Seconds) {\n\t\tlet lookAheadValue = 0;\n\t\tthis._latencyHint = hint;\n\t\tif (isString(hint)) {\n\t\t\tswitch (hint) {\n\t\t\t\tcase \"interactive\":\n\t\t\t\t\tlookAheadValue = 0.1;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"playback\":\n\t\t\t\t\tlookAheadValue = 0.8;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"balanced\":\n\t\t\t\t\tlookAheadValue = 0.25;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"fastest\":\n\t\t\t\t\tlookAheadValue = 0.01;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tthis.lookAhead = lookAheadValue;\n\t\tthis.updateInterval = lookAheadValue / 3;\n\t}\n\n\t/**\n\t * The unwrapped AudioContext.\n\t */\n\tget rawContext(): AnyAudioContext {\n\t\treturn this._context;\n\t}\n\n\t/**\n\t * The current audio context time plus a short {@link lookAhead}.\n\t */\n\tnow(): Seconds {\n\t\treturn this._context.currentTime + this.lookAhead;\n\t}\n\n\t/**\n\t * Starts the audio context from a suspended state. This is required\n\t * to initially start the AudioContext.\n\t */\n\tresume(): Promise<void> {\n\t\tif (this._context.state === \"suspended\" && isAudioContext(this._context)) {\n\t\t\treturn this._context.resume();\n\t\t} else {\n\t\t\treturn Promise.resolve();\n\t\t}\n\t}\n\n\t/**\n\t * Promise which is invoked when the context is running.\n\t * Tries to resume the context if it's not started.\n\t */\n\tasync close(): Promise<void> {\n\t\tif (isAudioContext(this._context)) {\n\t\t\tawait this._context.close();\n\t\t}\n\t\tif (this._initialized) {\n\t\t\tcloseContext(this);\n\t\t}\n\t}\n\n\t/**\n\t * Generate a looped buffer at some constant value.\n\t */\n\tgetConstant(val: number): AudioBufferSourceNode {\n\t\tif (this._constants.has(val)) {\n\t\t\treturn this._constants.get(val) as AudioBufferSourceNode;\n\t\t} else {\n\t\t\tconst buffer = this._context.createBuffer(1, 128, this._context.sampleRate);\n\t\t\tconst arr = buffer.getChannelData(0);\n\t\t\tfor (let i = 0; i < arr.length; i++) {\n\t\t\t\tarr[i] = val;\n\t\t\t}\n\t\t\tconst constant = this._context.createBufferSource();\n\t\t\tconstant.channelCount = 1;\n\t\t\tconstant.channelCountMode = \"explicit\";\n\t\t\tconstant.buffer = buffer;\n\t\t\tconstant.loop = true;\n\t\t\tconstant.start(0);\n\t\t\tthis._constants.set(val, constant);\n\t\t\treturn constant;\n\t\t}\n\t}\n\n\t/**\n\t * Clean up. Also closes the audio context.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._ticker.dispose();\n\t\tthis._timeouts.dispose();\n\t\tObject.keys(this._constants).map(val => this._constants[val].disconnect());\n\t\treturn this;\n\t}\n\n\t//---------------------------\n\t// TIMEOUTS\n\t//---------------------------\n\n\t/**\n\t * The private loop which keeps track of the context scheduled timeouts\n\t * Is invoked from the clock source\n\t */\n\tprivate _timeoutLoop(): void {\n\t\tconst now = this.now();\n\t\tlet firstEvent = this._timeouts.peek();\n\t\twhile (this._timeouts.length && firstEvent && firstEvent.time <= now) {\n\t\t\t// invoke the callback\n\t\t\tfirstEvent.callback();\n\t\t\t// shift the first event off\n\t\t\tthis._timeouts.shift();\n\t\t\t// get the next one\n\t\t\tfirstEvent = this._timeouts.peek();\n\t\t}\n\t}\n\n\t/**\n\t * A setTimeout which is guaranteed by the clock source.\n\t * Also runs in the offline context.\n\t * @param  fn       The callback to invoke\n\t * @param  timeout  The timeout in seconds\n\t * @returns ID to use when invoking Context.clearTimeout\n\t */\n\tsetTimeout(fn: (...args: any[]) => void, timeout: Seconds): number {\n\t\tthis._timeoutIds++;\n\t\tconst now = this.now();\n\t\tthis._timeouts.add({\n\t\t\tcallback: fn,\n\t\t\tid: this._timeoutIds,\n\t\t\ttime: now + timeout,\n\t\t});\n\t\treturn this._timeoutIds;\n\t}\n\n\t/**\n\t * Clears a previously scheduled timeout with Tone.context.setTimeout\n\t * @param  id  The ID returned from setTimeout\n\t */\n\tclearTimeout(id: number): this {\n\t\tthis._timeouts.forEach(event => {\n\t\t\tif (event.id === id) {\n\t\t\t\tthis._timeouts.remove(event);\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clear the function scheduled by [[setInterval]]\n\t */\n\tclearInterval(id: number): this {\n\t\treturn this.clearTimeout(id);\n\t}\n\n\t/**\n\t * Adds a repeating event to the context's callback clock\n\t */\n\tsetInterval(fn: (...args: any[]) => void, interval: Seconds): number {\n\t\tconst id = ++this._timeoutIds;\n\t\tconst intervalFn = () => {\n\t\t\tconst now = this.now();\n\t\t\tthis._timeouts.add({\n\t\t\t\tcallback: () => {\n\t\t\t\t\t// invoke the callback\n\t\t\t\t\tfn();\n\t\t\t\t\t// invoke the event to repeat it\n\t\t\t\t\tintervalFn();\n\t\t\t\t},\n\t\t\t\tid,\n\t\t\t\ttime: now + interval,\n\t\t\t});\n\t\t};\n\t\t// kick it off\n\t\tintervalFn();\n\t\treturn id;\n\t}\n}\n","import { createOfflineAudioContext } from \"../context/AudioContext\";\nimport { Context } from \"../context/Context\";\nimport { Seconds } from \"../type/Units\";\nimport { isOfflineAudioContext } from \"../util/AdvancedTypeCheck\";\n\n/**\n * Wrapper around the OfflineAudioContext\n * @category Core\n */\nexport class OfflineContext extends Context {\n\n\treadonly name: string = \"OfflineContext\";\n\n\t/**\n\t * A private reference to the duration\n\t */\n\tprivate readonly _duration: Seconds;\n\n\t/**\n\t * An artificial clock source\n\t */\n\tprivate _currentTime: Seconds = 0;\n\n\t/**\n\t * Private reference to the OfflineAudioContext.\n\t */\n\tprotected _context!: OfflineAudioContext;\n\n\t/**\n\t * @param  channels  The number of channels to render\n\t * @param  duration  The duration to render in seconds\n\t * @param sampleRate the sample rate to render at\n\t */\n\tconstructor(\n\t\tchannels: number,\n\t\tduration: Seconds, sampleRate: number,\n\t);\n\tconstructor(context: OfflineAudioContext);\n\tconstructor() {\n\n\t\tsuper({\n\t\t\tclockSource: \"offline\",\n\t\t\tcontext: isOfflineAudioContext(arguments[0]) ?\n\t\t\t\targuments[0] : createOfflineAudioContext(arguments[0], arguments[1] * arguments[2], arguments[2]),\n\t\t\tlookAhead: 0,\n\t\t\tupdateInterval: isOfflineAudioContext(arguments[0]) ?\n\t\t\t\t128 / arguments[0].sampleRate : 128 / arguments[2],\n\t\t});\n\n\t\tthis._duration = isOfflineAudioContext(arguments[0]) ?\n\t\t\targuments[0].length / arguments[0].sampleRate : arguments[1];\n\t}\n\n\t/**\n\t * Override the now method to point to the internal clock time\n\t */\n\tnow(): Seconds {\n\t\treturn this._currentTime;\n\t}\n\n\t/**\n\t * Same as this.now()\n\t */\n\tget currentTime(): Seconds {\n\t\treturn this._currentTime;\n\t}\n\n\t/**\n\t * Render the output of the OfflineContext\n\t */\n\trender(): Promise<AudioBuffer> {\n\t\twhile (this._duration - this._currentTime >= 0) {\n\t\t\t// invoke all the callbacks on that time\n\t\t\tthis.emit(\"tick\");\n\t\t\t// increment the clock in 5ms chunks\n\t\t\tthis._currentTime += 128 / this.sampleRate;\n\t\t}\n\n\t\treturn this._context.startRendering();\n\t}\n\n\t/**\n\t * Close the context\n\t */\n\tclose(): Promise<void> {\n\t\treturn Promise.resolve();\n\t}\n}\n","import { version } from \"../version\";\nimport { hasAudioContext, theWindow } from \"./context/AudioContext\";\nimport { Context } from \"./context/Context\";\nimport { OfflineContext } from \"./context/OfflineContext\";\nimport { isAudioContext, isOfflineAudioContext } from \"./util/AdvancedTypeCheck\";\n\n/**\n * This dummy context is used to avoid throwing immediate errors when importing in Node.js\n */\n// eslint-disable-next-line @typescript-eslint/no-object-literal-type-assertion\nconst dummyContext: Context = {\n\tdestination: {},\n\ttransport: {},\n} as Context;\n\n/**\n * The global audio context which is getable and assignable through\n * getContext and setContext\n */\nlet globalContext: Context = dummyContext;\n\n/**\n * Returns the default system-wide [[Context]]\n * @category Core\n */\nexport function getContext(): Context {\n\tif (globalContext === dummyContext && hasAudioContext) {\n\t\tsetContext(new Context());\n\t}\n\treturn globalContext;\n}\n\n/**\n * Set the default audio context\n * @category Core\n */\nexport function setContext(context: Context | AudioContext | OfflineAudioContext): void {\n\tif (isAudioContext(context)) {\n\t\tglobalContext = new Context(context);\n\t} else if (isOfflineAudioContext(context)) {\n\t\tglobalContext = new OfflineContext(context);\n\t} else {\n\t\tglobalContext = context;\n\t}\n\tglobalContext.initialize();\n}\n\n/**\n * Most browsers will not play _any_ audio until a user\n * clicks something (like a play button). Invoke this method\n * on a click or keypress event handler to start the audio context.\n * More about the Autoplay policy\n * [here](https://developers.google.com/web/updates/2017/09/autoplay-policy-changes#webaudio)\n * @example\n * document.querySelector('#playbutton').addEventListener('click', async () => {\n * \tawait Tone.start()\n * \tconsole.log('audio ready')\n * })\n * @category Core\n */\nexport function start(): Promise <void> {\n\treturn globalContext.resume();\n}\n\n/**\n * Log Tone.js + version in the console.\n */\nif (theWindow && !theWindow.TONE_SILENCE_LOGGING) {\n\tlet prefix = \"v\";\n\tif (version === \"dev\") {\n\t\tprefix = \"\";\n\t}\n\tconst printString = ` * Tone.js ${prefix}${version} * `;\n\t// eslint-disable-next-line no-console\n\tconsole.log(`%c${printString}`, \"background: #000; color: #fff\");\n}\n","import { Decibels, GainFactor, Hertz, Interval, MidiNote, NormalRange } from \"./Units\";\n\n/**\n * Equal power gain scale. Good for cross-fading.\n * @param  percent (0-1)\n */\nexport function equalPowerScale(percent: NormalRange): number {\n\tconst piFactor = 0.5 * Math.PI;\n\treturn Math.sin(percent * piFactor);\n}\n\n/**\n * Convert decibels into gain.\n */\nexport function dbToGain(db: Decibels): GainFactor {\n\treturn Math.pow(10, db / 20);\n}\n\n/**\n * Convert gain to decibels.\n */\nexport function gainToDb(gain: GainFactor): Decibels {\n\treturn 20 * (Math.log(gain) / Math.LN10);\n}\n\n/**\n * Convert an interval (in semitones) to a frequency ratio.\n * @param interval the number of semitones above the base note\n * @example\n * tone.intervalToFrequencyRatio(0); // 1\n * tone.intervalToFrequencyRatio(12); // 2\n * tone.intervalToFrequencyRatio(-12); // 0.5\n */\nexport function intervalToFrequencyRatio(interval: Interval): number {\n\treturn Math.pow(2, (interval / 12));\n}\n\n/**\n * The Global [concert tuning pitch](https://en.wikipedia.org/wiki/Concert_pitch) which is used\n * to generate all the other pitch values from notes. A4's values in Hertz.\n */\nlet A4: Hertz = 440;\n\nexport function getA4(): Hertz {\n\treturn A4;\n}\n\nexport function setA4(freq: Hertz): void {\n\tA4 = freq;\n}\n\n/**\n * Convert a frequency value to a MIDI note.\n * @param frequency The value to frequency value to convert.\n * @example\n * ftom(440); // returns 69\n */\nexport function ftom(frequency: Hertz): MidiNote {\n\treturn Math.round(ftomf(frequency)) as MidiNote;\n}\n\n/**\n * Convert a frequency to a floating point midi value\n */\nexport function ftomf(frequency: Hertz): number {\n\treturn 69 + 12 * Math.log2(frequency / A4);\n}\n\n/**\n * Convert a MIDI note to frequency value.\n * @param  midi The midi number to convert.\n * @return The corresponding frequency value\n * @example\n */\nexport function mtof(midi: MidiNote): Hertz {\n\treturn A4 * Math.pow(2, (midi - 69) / 12);\n}\n","import { Context } from \"../context/Context\";\nimport { Tone } from \"../Tone\";\nimport { isDefined, isObject, isString, isUndef } from \"../util/TypeCheck\";\nimport { BPM, Hertz, MidiNote, Milliseconds, Samples, Seconds, Ticks, Time } from \"./Units\";\n\nexport type TimeValue = Time | TimeBaseClass<any, any>;\n\n/**\n * The units that the TimeBase can accept. extended by other classes\n */\nexport type TimeBaseUnit = \"s\" | \"n\" | \"t\" | \"m\" | \"i\" | \"hz\" | \"tr\" | \"samples\" | \"number\";\n\nexport interface TypeFunction {\n\tregexp: RegExp;\n\tmethod: (value: string, ...args: string[]) => number;\n}\n\nexport interface TimeExpression<Type extends number> {\n\t[key: string]: {\n\t\tregexp: RegExp;\n\t\tmethod: (value: string, ...args: string[]) => Type;\n\t};\n}\n\n/**\n * TimeBase is a flexible encoding of time which can be evaluated to and from a string.\n * @example\n * new TimeBase(4, \"n\")\n * new TimeBase(2, \"t\")\n * new TimeBase(\"2t\")\n * new TimeBase({\"2t\" : 2})\n * new TimeBase(\"2t\") + new TimeBase(\"4n\");\n */\nexport abstract class TimeBaseClass<Type extends number, Unit extends string> extends Tone {\n\n\treadonly context: Context;\n\n\t/**\n\t * The value of the units\n\t */\n\tprotected _val?: TimeValue;\n\n\t/**\n\t * The units of time\n\t */\n\tprotected _units?: Unit;\n\n\t/**\n\t * All of the conversion expressions\n\t */\n\tprotected _expressions: TimeExpression<Type>;\n\n\t/**\n\t * The default units\n\t */\n\treadonly defaultUnits: Unit = \"s\" as Unit;\n\n\t/**\n\t * @param context The context associated with the time value. Used to compute\n\t * Transport and context-relative timing.\n\t * @param  value  The time value as a number, string or object\n\t * @param  units  Unit values\n\t */\n\tconstructor(context: Context, value?: TimeValue, units?: Unit) {\n\t\tsuper();\n\n\t\tthis._val = value;\n\t\tthis._units = units;\n\t\tthis.context = context;\n\t\tthis._expressions = this._getExpressions();\n\t}\n\n\t/**\n\t * All of the time encoding expressions\n\t */\n\tprotected _getExpressions(): TimeExpression<Type> {\n\t\treturn {\n\t\t\thz: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._frequencyToUnits(parseFloat(value));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?)hz$/i,\n\t\t\t},\n\t\t\ti: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._ticksToUnits(parseInt(value, 10));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)i$/i,\n\t\t\t},\n\t\t\tm: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._beatsToUnits(parseInt(value, 10) * this._getTimeSignature());\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)m$/i,\n\t\t\t},\n\t\t\tn: {\n\t\t\t\tmethod: (value, dot) => {\n\t\t\t\t\tconst numericValue = parseInt(value, 10);\n\t\t\t\t\tconst scalar = dot === \".\" ? 1.5 : 1;\n\t\t\t\t\tif (numericValue === 1) {\n\t\t\t\t\t\treturn this._beatsToUnits(this._getTimeSignature()) * scalar as Type;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn this._beatsToUnits(4 / numericValue) * scalar as Type;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)n(\\.?)$/i,\n\t\t\t},\n\t\t\tnumber: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._expressions[this.defaultUnits].method.call(this, value);\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?)$/,\n\t\t\t},\n\t\t\ts: {\n\t\t\t\tmethod: (value): Type => {\n\t\t\t\t\treturn this._secondsToUnits(parseFloat(value));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?)s$/,\n\t\t\t},\n\t\t\tsamples: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn parseInt(value, 10) / this.context.sampleRate as Type;\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)samples$/,\n\t\t\t},\n\t\t\tt: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\tconst numericValue = parseInt(value, 10);\n\t\t\t\t\treturn this._beatsToUnits(8 / (Math.floor(numericValue) * 3));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)t$/i,\n\t\t\t},\n\t\t\ttr: {\n\t\t\t\tmethod: (m, q, s) => {\n\t\t\t\t\tlet total = 0;\n\t\t\t\t\tif (m && m !== \"0\") {\n\t\t\t\t\t\ttotal += this._beatsToUnits(this._getTimeSignature() * parseFloat(m));\n\t\t\t\t\t}\n\t\t\t\t\tif (q && q !== \"0\") {\n\t\t\t\t\t\ttotal += this._beatsToUnits(parseFloat(q));\n\t\t\t\t\t}\n\t\t\t\t\tif (s && s !== \"0\") {\n\t\t\t\t\t\ttotal += this._beatsToUnits(parseFloat(s) / 4);\n\t\t\t\t\t}\n\t\t\t\t\treturn total as Type;\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?$/,\n\t\t\t},\n\t\t};\n\t}\n\n\t//-------------------------------------\n\t// \tVALUE OF\n\t//-------------------------------------\n\n\t/**\n\t * Evaluate the time value. Returns the time in seconds.\n\t */\n\tvalueOf(): Type {\n\t\tif (this._val instanceof TimeBaseClass) {\n\t\t\tthis.fromType(this._val);\n\t\t}\n\t\tif (isUndef(this._val)) {\n\t\t\treturn this._noArg();\n\t\t} else if (isString(this._val) && isUndef(this._units)) {\n\t\t\tfor (const units in this._expressions) {\n\t\t\t\tif (this._expressions[units].regexp.test(this._val.trim())) {\n\t\t\t\t\tthis._units = units as Unit;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (isObject(this._val)) {\n\t\t\tlet total = 0;\n\t\t\tfor (const typeName in this._val) {\n\t\t\t\tif (isDefined(this._val[typeName])) {\n\t\t\t\t\tconst quantity = this._val[typeName];\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tconst time = (new this.constructor(this.context, typeName)).valueOf() * quantity;\n\t\t\t\t\ttotal += time;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn total as Type;\n\t\t}\n\t\tif (isDefined(this._units)) {\n\t\t\tconst expr = this._expressions[this._units];\n\t\t\tconst matching = this._val.toString().trim().match(expr.regexp);\n\t\t\tif (matching) {\n\t\t\t\treturn expr.method.apply(this, matching.slice(1));\n\t\t\t} else {\n\t\t\t\treturn expr.method.call(this, this._val);\n\t\t\t}\n\t\t} else if (isString(this._val)) {\n\t\t\treturn parseFloat(this._val) as Type;\n\t\t} else {\n\t\t\treturn this._val as Type;\n\t\t}\n\t}\n\n\t//-------------------------------------\n\t// \tUNIT CONVERSIONS\n\t//-------------------------------------\n\n\t/**\n\t * Returns the value of a frequency in the current units\n\t */\n\tprotected _frequencyToUnits(freq: Hertz): Type {\n\t\treturn 1 / freq as Type;\n\t}\n\n\t/**\n\t * Return the value of the beats in the current units\n\t */\n\tprotected _beatsToUnits(beats: number): Type {\n\t\treturn (60 / this._getBpm()) * beats as Type;\n\t}\n\n\t/**\n\t * Returns the value of a second in the current units\n\t */\n\tprotected _secondsToUnits(seconds: Seconds): Type {\n\t\treturn seconds as Type;\n\t}\n\n\t/**\n\t * Returns the value of a tick in the current time units\n\t */\n\tprotected _ticksToUnits(ticks: Ticks): Type {\n\t\treturn (ticks * (this._beatsToUnits(1)) / this._getPPQ()) as Type;\n\t}\n\n\t/**\n\t * With no arguments, return 'now'\n\t */\n\tprotected _noArg(): Type {\n\t\treturn this._now();\n\t}\n\n\t//-------------------------------------\n\t// \tTEMPO CONVERSIONS\n\t//-------------------------------------\n\n\t/**\n\t * Return the bpm\n\t */\n\tprotected _getBpm(): BPM {\n\t\treturn this.context.transport.bpm.value;\n\t}\n\n\t/**\n\t * Return the timeSignature\n\t */\n\tprotected _getTimeSignature(): number {\n\t\treturn this.context.transport.timeSignature as number;\n\t}\n\n\t/**\n\t * Return the PPQ or 192 if Transport is not available\n\t */\n\tprotected _getPPQ(): number {\n\t\treturn this.context.transport.PPQ;\n\t}\n\n\t/**\n\t * Return the current time in whichever context is relevant\n\t */\n\tprotected abstract _now(): Type;\n\n\t//-------------------------------------\n\t// \tCONVERSION INTERFACE\n\t//-------------------------------------\n\n\t/**\n\t * Coerce a time type into this units type.\n\t * @param type Any time type units\n\t */\n\tfromType(type: TimeBaseClass<any, any>): this {\n\t\tthis._units = undefined;\n\t\tswitch (this.defaultUnits) {\n\t\t\tcase \"s\":\n\t\t\t\tthis._val = type.toSeconds();\n\t\t\t\tbreak;\n\t\t\tcase \"i\":\n\t\t\t\tthis._val = type.toTicks();\n\t\t\t\tbreak;\n\t\t\tcase \"hz\":\n\t\t\t\tthis._val = type.toFrequency();\n\t\t\t\tbreak;\n\t\t\tcase \"midi\":\n\t\t\t\tthis._val = type.toMidi();\n\t\t\t\tbreak;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Return the value in seconds\n\t */\n\tabstract toSeconds(): Seconds;\n\n\t/**\n\t * Return the value as a Midi note\n\t */\n\tabstract toMidi(): MidiNote;\n\n\t/**\n\t * Convert the value into ticks\n\t */\n\tabstract toTicks(): Ticks;\n\n\t/**\n\t * Return the value in hertz\n\t */\n\ttoFrequency(): Hertz {\n\t\treturn 1 / this.toSeconds();\n\t}\n\n\t/**\n\t * Return the time in samples\n\t */\n\ttoSamples(): Samples {\n\t\treturn this.toSeconds() * this.context.sampleRate;\n\t}\n\n\t/**\n\t * Return the time in milliseconds.\n\t */\n\ttoMilliseconds(): Milliseconds {\n\t\treturn this.toSeconds() * 1000;\n\t}\n}\n","import { getContext } from \"../Global\";\nimport { ftom } from \"./Conversions\";\nimport { TimeBaseClass, TimeBaseUnit, TimeExpression, TimeValue } from \"./TimeBase\";\nimport { BarsBeatsSixteenths, MidiNote, Seconds, Subdivision, Ticks, Time } from \"./Units\";\n\n/**\n * TimeClass is a primitive type for encoding and decoding Time values.\n * TimeClass can be passed into the parameter of any method which takes time as an argument.\n * @param  val    The time value.\n * @param  units  The units of the value.\n * @example\n * var t = Time(\"4n\");//a quarter note\n * @category Unit\n */\nexport class TimeClass<Type extends Seconds | Ticks = Seconds, Unit extends string = TimeBaseUnit>\n\textends TimeBaseClass<Type, Unit> {\n\n\treadonly name: string = \"Time\";\n\n\tprotected _getExpressions(): TimeExpression<Type> {\n\t\treturn Object.assign(super._getExpressions(), {\n\t\t\tnow: {\n\t\t\t\tmethod: (capture: string): Type => {\n\t\t\t\t\treturn this._now() + new (this.constructor as typeof TimeClass)(this.context, capture).valueOf() as Type;\n\t\t\t\t},\n\t\t\t\tregexp: /^\\+(.+)/,\n\t\t\t},\n\t\t\tquantize: {\n\t\t\t\tmethod: (capture: string): Type => {\n\t\t\t\t\tconst quantTo = new TimeClass(this.context, capture).valueOf();\n\t\t\t\t\treturn this._secondsToUnits(this.context.transport.nextSubdivision(quantTo));\n\t\t\t\t},\n\t\t\t\tregexp: /^@(.+)/,\n\t\t\t},\n\t\t});\n\t}\n\n\t/**\n\t * Quantize the time by the given subdivision. Optionally add a\n\t * percentage which will move the time value towards the ideal\n\t * quantized value by that percentage.\n\t * @param  val    The subdivision to quantize to\n\t * @param  percent  Move the time value towards the quantized value by a percentage.\n\t * @example\n\t * Time(21).quantize(2) //returns 22\n\t * Time(0.6).quantize(\"4n\", 0.5) //returns 0.55\n\t */\n\tquantize(subdiv: Time, percent = 1): Type {\n\t\tconst subdivision = new (this.constructor as typeof TimeClass)(this.context, subdiv).valueOf();\n\t\tconst value = this.valueOf();\n\t\tconst multiple = Math.round(value / subdivision);\n\t\tconst ideal = multiple * subdivision;\n\t\tconst diff = ideal - value;\n\t\treturn value + diff * percent as Type;\n\t}\n\n\t//-------------------------------------\n\t// CONVERSIONS\n\t//-------------------------------------\n\t/**\n\t * Convert a Time to Notation. The notation values are will be the\n\t * closest representation between 1m to 128th note.\n\t * @return {Notation}\n\t * @example\n\t * //if the Transport is at 120bpm:\n\t * Time(2).toNotation();//returns \"1m\"\n\t */\n\ttoNotation(): Subdivision {\n\t\tconst time = this.toSeconds();\n\t\tconst testNotations: Subdivision[] = [\"1m\"];\n\t\tfor (let power = 1; power < 9; power++) {\n\t\t\tconst subdiv = Math.pow(2, power);\n\t\t\ttestNotations.push(subdiv + \"n.\" as Subdivision);\n\t\t\ttestNotations.push(subdiv + \"n\" as Subdivision);\n\t\t\ttestNotations.push(subdiv + \"t\" as Subdivision);\n\t\t}\n\t\ttestNotations.push(\"0\");\n\t\t// find the closets notation representation\n\t\tlet closest = testNotations[0];\n\t\tlet closestSeconds = new TimeClass(this.context, testNotations[0]).toSeconds();\n\t\ttestNotations.forEach(notation => {\n\t\t\tconst notationSeconds = new TimeClass(this.context, notation).toSeconds();\n\t\t\tif (Math.abs(notationSeconds - time) < Math.abs(closestSeconds - time)) {\n\t\t\t\tclosest = notation;\n\t\t\t\tclosestSeconds = notationSeconds;\n\t\t\t}\n\t\t});\n\t\treturn closest;\n\t}\n\n\t/**\n\t * Return the time encoded as Bars:Beats:Sixteenths.\n\t */\n\ttoBarsBeatsSixteenths(): BarsBeatsSixteenths {\n\t\tconst quarterTime = this._beatsToUnits(1);\n\t\tlet quarters = this.valueOf() / quarterTime;\n\t\tquarters = parseFloat(quarters.toFixed(4));\n\t\tconst measures = Math.floor(quarters / this._getTimeSignature());\n\t\tlet sixteenths = (quarters % 1) * 4;\n\t\tquarters = Math.floor(quarters) % this._getTimeSignature();\n\t\tconst sixteenthString = sixteenths.toString();\n\t\tif (sixteenthString.length > 3) {\n\t\t\t// the additional parseFloat removes insignificant trailing zeroes\n\t\t\tsixteenths = parseFloat(parseFloat(sixteenthString).toFixed(3));\n\t\t}\n\t\tconst progress = [measures, quarters, sixteenths];\n\t\treturn progress.join(\":\");\n\t}\n\n\t/**\n\t * Return the time in ticks.\n\t */\n\ttoTicks(): Ticks {\n\t\tconst quarterTime = this._beatsToUnits(1);\n\t\tconst quarters = this.valueOf() / quarterTime;\n\t\treturn Math.round(quarters * this._getPPQ());\n\t}\n\n\t/**\n\t * Return the time in seconds.\n\t */\n\ttoSeconds(): Seconds {\n\t\treturn this.valueOf();\n\t}\n\n\t/**\n\t * Return the value as a midi note.\n\t */\n\ttoMidi(): MidiNote {\n\t\treturn ftom(this.toFrequency());\n\t}\n\n\tprotected _now(): Type {\n\t\treturn this.context.now() as Type;\n\t}\n}\n\n/**\n * Create a TimeClass from a time string or number.\n * @param value A value which reprsents time\n * @param units The value's units if they can't be inferred by the value.\n * @category Unit\n */\nexport function Time(value?: TimeValue, units?: TimeBaseUnit): TimeClass<Seconds> {\n\treturn new TimeClass(getContext(), value, units);\n}\n","import { getContext } from \"../Global\";\nimport { intervalToFrequencyRatio, mtof } from \"./Conversions\";\nimport { ftom, getA4, setA4 } from \"./Conversions\";\nimport { TimeClass } from \"./Time\";\nimport { TimeBaseClass, TimeBaseUnit, TimeExpression, TimeValue } from \"./TimeBase\";\nimport { Frequency, Hertz, Interval, MidiNote, Note, Seconds, Ticks } from \"./Units\";\n\nexport type FrequencyUnit = TimeBaseUnit | \"midi\";\n\n/**\n * Frequency is a primitive type for encoding Frequency values.\n * Eventually all time values are evaluated to hertz using the `eval` method.\n * @example\n * Frequency(\"C3\") // 261\n * Frequency(38, \"midi\") //\n * Frequency(\"C3\").transpose(4);\n * @category Unit\n */\nexport class FrequencyClass<Type extends number = Hertz> extends TimeClass<Type, FrequencyUnit> {\n\n\treadonly name: string = \"Frequency\";\n\n\treadonly defaultUnits: FrequencyUnit = \"hz\";\n\n\t/**\n\t * The [concert tuning pitch](https://en.wikipedia.org/wiki/Concert_pitch) which is used\n\t * to generate all the other pitch values from notes. A4's values in Hertz.\n\t */\n\tstatic get A4(): Hertz {\n\t\treturn getA4();\n\t}\n\tstatic set A4(freq: Hertz) {\n\t\tsetA4(freq);\n\t}\n\n\t//-------------------------------------\n\t// \tAUGMENT BASE EXPRESSIONS\n\t//-------------------------------------\n\n\tprotected _getExpressions(): TimeExpression<Type> {\n\t\treturn Object.assign({}, super._getExpressions(), {\n\t\t\tmidi: {\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?midi)/,\n\t\t\t\tmethod(value): number {\n\t\t\t\t\tif (this.defaultUnits === \"midi\") {\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn FrequencyClass.mtof(value);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\tnote: {\n\t\t\t\tregexp: /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i,\n\t\t\t\tmethod(pitch, octave): number {\n\t\t\t\t\tconst index = noteToScaleIndex[pitch.toLowerCase()];\n\t\t\t\t\tconst noteNumber = index + (parseInt(octave, 10) + 1) * 12;\n\t\t\t\t\tif (this.defaultUnits === \"midi\") {\n\t\t\t\t\t\treturn noteNumber;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn FrequencyClass.mtof(noteNumber);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\ttr: {\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?/,\n\t\t\t\tmethod(m, q, s): number {\n\t\t\t\t\tlet total = 1;\n\t\t\t\t\tif (m && m !== \"0\") {\n\t\t\t\t\t\ttotal *= this._beatsToUnits(this._getTimeSignature() * parseFloat(m));\n\t\t\t\t\t}\n\t\t\t\t\tif (q && q !== \"0\") {\n\t\t\t\t\t\ttotal *= this._beatsToUnits(parseFloat(q));\n\t\t\t\t\t}\n\t\t\t\t\tif (s && s !== \"0\") {\n\t\t\t\t\t\ttotal *= this._beatsToUnits(parseFloat(s) / 4);\n\t\t\t\t\t}\n\t\t\t\t\treturn total;\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t}\n\n\t//-------------------------------------\n\t// \tEXPRESSIONS\n\t//-------------------------------------\n\n\t/**\n\t * Transposes the frequency by the given number of semitones.\n\t * @return  A new transposed frequency\n\t * @example\n\t * Frequency(\"A4\").transpose(3); //\"C5\"\n\t */\n\ttranspose(interval: Interval): FrequencyClass {\n\t\treturn new FrequencyClass(this.context, this.valueOf() * intervalToFrequencyRatio(interval));\n\t}\n\n\t/**\n\t * Takes an array of semitone intervals and returns\n\t * an array of frequencies transposed by those intervals.\n\t * @return  Returns an array of Frequencies\n\t * @example\n\t * Frequency(\"A4\").harmonize([0, 3, 7]); //[\"A4\", \"C5\", \"E5\"]\n\t */\n\tharmonize(intervals: Interval[]): FrequencyClass[] {\n\t\treturn intervals.map(interval => {\n\t\t\treturn this.transpose(interval);\n\t\t});\n\t}\n\n\t//-------------------------------------\n\t// \tUNIT CONVERSIONS\n\t//-------------------------------------\n\n\t/**\n\t * Return the value of the frequency as a MIDI note\n\t * @example\n\t * Frequency(\"C4\").toMidi(); //60\n\t */\n\ttoMidi(): MidiNote {\n\t\treturn ftom(this.valueOf());\n\t}\n\n\t/**\n\t * Return the value of the frequency in Scientific Pitch Notation\n\t * @example\n\t * Frequency(69, \"midi\").toNote(); //\"A4\"\n\t */\n\ttoNote(): Note {\n\t\tconst freq = this.toFrequency();\n\t\tconst log = Math.log2(freq / FrequencyClass.A4);\n\t\tlet noteNumber = Math.round(12 * log) + 57;\n\t\tconst octave = Math.floor(noteNumber / 12);\n\t\tif (octave < 0) {\n\t\t\tnoteNumber += -12 * octave;\n\t\t}\n\t\tconst noteName = scaleIndexToNote[noteNumber % 12];\n\t\treturn noteName + octave.toString() as Note;\n\t}\n\n\t/**\n\t * Return the duration of one cycle in seconds.\n\t */\n\ttoSeconds(): Seconds {\n\t\treturn 1 / super.toSeconds();\n\t}\n\n\t/**\n\t * Return the duration of one cycle in ticks\n\t */\n\ttoTicks(): Ticks {\n\t\tconst quarterTime = this._beatsToUnits(1);\n\t\tconst quarters = this.valueOf() / quarterTime;\n\t\treturn Math.floor(quarters * this._getPPQ());\n\t}\n\n\t//-------------------------------------\n\t// \tUNIT CONVERSIONS HELPERS\n\t//-------------------------------------\n\n\t/**\n\t * With no arguments, return 0\n\t */\n\tprotected _noArg(): Type {\n\t\treturn 0 as Type;\n\t}\n\n\t/**\n\t * Returns the value of a frequency in the current units\n\t */\n\tprotected _frequencyToUnits(freq: Hertz): Type {\n\t\treturn freq as Type;\n\t}\n\n\t/**\n\t * Returns the value of a tick in the current time units\n\t */\n\tprotected _ticksToUnits(ticks: Ticks): Type {\n\t\treturn 1 / ((ticks * 60) / (this._getBpm() * this._getPPQ())) as Type;\n\t}\n\n\t/**\n\t * Return the value of the beats in the current units\n\t */\n\tprotected _beatsToUnits(beats: number): Type {\n\t\treturn 1 / super._beatsToUnits(beats) as Type;\n\t}\n\n\t/**\n\t * Returns the value of a second in the current units\n\t */\n\tprotected _secondsToUnits(seconds: Seconds): Type {\n\t\treturn 1 / seconds as Type;\n\t}\n\n\t/**\n\t * Convert a MIDI note to frequency value.\n\t * @param  midi The midi number to convert.\n\t * @return The corresponding frequency value\n\t * @example\n\t * FrequencyClass.mtof(69); // returns 440\n\t */\n\tstatic mtof(midi: MidiNote): Hertz {\n\t\treturn mtof(midi);\n\t}\n\n\t/**\n\t * Convert a frequency value to a MIDI note.\n\t * @param frequency The value to frequency value to convert.\n\t * @example\n\t * Frequency.ftom(440); // returns 69\n\t */\n\tstatic ftom(frequency: Hertz): MidiNote {\n\t\treturn ftom(frequency);\n\t}\n}\n\n//-------------------------------------\n// \tFREQUENCY CONVERSIONS\n//-------------------------------------\n\n/**\n * Note to scale index. \n * @hidden\n */\nconst noteToScaleIndex = {\n\t\"cbb\": -2, \"cb\": -1, \"c\": 0, \"c#\": 1, \"cx\": 2,\n\t\"dbb\": 0, \"db\": 1, \"d\": 2, \"d#\": 3, \"dx\": 4,\n\t\"ebb\": 2, \"eb\": 3, \"e\": 4, \"e#\": 5, \"ex\": 6,\n\t\"fbb\": 3, \"fb\": 4, \"f\": 5, \"f#\": 6, \"fx\": 7,\n\t\"gbb\": 5, \"gb\": 6, \"g\": 7, \"g#\": 8, \"gx\": 9,\n\t\"abb\": 7, \"ab\": 8, \"a\": 9, \"a#\": 10, \"ax\": 11,\n\t\"bbb\": 9, \"bb\": 10, \"b\": 11, \"b#\": 12, \"bx\": 13,\n};\n\n/**\n * scale index to note (sharps)\n * @hidden\n */\nconst scaleIndexToNote = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n\n/**\n * Convert a value into a FrequencyClass object.\n * @category Unit\n */\nexport function Frequency(value?: TimeValue | Frequency, units?: FrequencyUnit): FrequencyClass {\n\treturn new FrequencyClass(getContext(), value, units);\n}\n","import { getContext } from \"../Global\";\nimport { Seconds, Ticks } from \"../type/Units\";\nimport { TimeClass } from \"./Time\";\nimport { TimeBaseUnit, TimeValue } from \"./TimeBase\";\n\n/**\n * TransportTime is a the time along the Transport's\n * timeline. It is similar to Tone.Time, but instead of evaluating\n * against the AudioContext's clock, it is evaluated against\n * the Transport's position. See [TransportTime wiki](https://github.com/Tonejs/Tone.js/wiki/TransportTime).\n * @category Unit\n */\nexport class TransportTimeClass<Type extends Seconds | Ticks = Seconds> extends TimeClass<Type> {\n\n\treadonly name: string = \"TransportTime\";\n\n\t/**\n\t * Return the current time in whichever context is relevant\n\t */\n\tprotected _now(): Type {\n\t\treturn this.context.transport.seconds as Type;\n\t}\n}\n\n/**\n * TransportTime is a the time along the Transport's\n * timeline. It is similar to [[Time]], but instead of evaluating\n * against the AudioContext's clock, it is evaluated against\n * the Transport's position. See [TransportTime wiki](https://github.com/Tonejs/Tone.js/wiki/TransportTime).\n * @category Unit\n */\nexport function TransportTime(value?: TimeValue, units?: TimeBaseUnit): TransportTimeClass {\n\treturn new TransportTimeClass(getContext(), value, units);\n}\n","import { getContext } from \"../Global\";\nimport { Tone } from \"../Tone\";\nimport { FrequencyClass } from \"../type/Frequency\";\nimport { TimeClass } from \"../type/Time\";\nimport { TransportTimeClass } from \"../type/TransportTime\";\nimport { Frequency, Hertz, Seconds, Ticks, Time } from \"../type/Units\";\nimport { getDefaultsFromInstance, omitFromObject, optionsFromArguments } from \"../util/Defaults\";\nimport { RecursivePartial } from \"../util/Interface\";\nimport { isArray, isBoolean, isDefined, isNumber, isString, isUndef } from \"../util/TypeCheck\";\nimport { Context } from \"./Context\";\n\n/**\n * A unit which process audio\n */\nexport interface ToneWithContextOptions {\n\tcontext: Context;\n}\n\n/**\n * The Base class for all nodes that have an AudioContext.\n */\nexport abstract class ToneWithContext<Options extends ToneWithContextOptions> extends Tone {\n\n\t/**\n\t * The context belonging to the node.\n\t */\n\treadonly context: Context;\n\n\t/**\n\t * The default context to use if no AudioContext is passed in to the constructor.\n\t * Probably should not be set manually. Used internally.\n\t * @hidden\n\t */\n\treadonly defaultContext?: Context;\n\n\t/**\n\t * Pass in a constructor as the first argument\n\t */\n\tconstructor(context?: Context)\n\tconstructor(options?: Partial<ToneWithContextOptions>);\n\tconstructor() {\n\t\tsuper();\n\t\tconst options = optionsFromArguments(ToneWithContext.getDefaults(), arguments, [\"context\"]);\n\t\tif (this.defaultContext) {\n\t\t\tthis.context = this.defaultContext;\n\t\t} else {\n\t\t\tthis.context = options.context;\n\t\t}\n\t}\n\n\tstatic getDefaults(): ToneWithContextOptions {\n\t\treturn {\n\t\t\tcontext: getContext(),\n\t\t};\n\t}\n\n\t/**\n\t * Return the current time of the Context clock plus the lookAhead.\n\t */\n\tnow(): Seconds {\n\t\treturn this.context.currentTime + this.context.lookAhead;\n\t}\n\n\t/**\n\t * Return the current time of the Context clock without any lookAhead.\n\t */\n\timmediate(): Seconds {\n\t\treturn this.context.currentTime;\n\t}\n\n\t/**\n\t * The duration in seconds of one sample.\n\t */\n\tget sampleTime(): Seconds {\n\t\treturn 1 / this.context.sampleRate;\n\t}\n\n\t/**\n\t * The number of seconds of 1 processing block (128 samples)\n\t */\n\tget blockTime(): Seconds {\n\t\treturn 128 / this.context.sampleRate;\n\t}\n\n\t/**\n\t * Convert the incoming time to seconds\n\t */\n\ttoSeconds(time?: Time): Seconds {\n\t\treturn new TimeClass(this.context, time).toSeconds();\n\t}\n\n\t/**\n\t * Convert the input to a frequency number\n\t */\n\ttoFrequency(freq: Frequency): Hertz {\n\t\treturn new FrequencyClass(this.context, freq).toFrequency();\n\t}\n\n\t/**\n\t * Convert the input time into ticks\n\t */\n\ttoTicks(time?: Time | TimeClass): Ticks {\n\t\treturn new TransportTimeClass(this.context, time).toTicks();\n\t}\n\n\t//-------------------------------------\n\t// \tGET/SET\n\t//-------------------------------------\n\n\t/**\n\t * Get a subset of the properties which are in the partial props\n\t */\n\tprotected _getPartialProperties(props: Options): Partial<Options> {\n\t\tconst options = this.get();\n\t\t// remove attributes from the prop that are not in the partial\n\t\tObject.keys(options).forEach(name => {\n\t\t\tif (isUndef(props[name])) {\n\t\t\t\tdelete options[name];\n\t\t\t}\n\t\t});\n\t\treturn options;\n\t}\n\n\t/**\n\t * Get the object's attributes.\n\t * @example\n\t * osc.get();\n\t * //returns {\"type\" : \"sine\", \"frequency\" : 440, ...etc}\n\t */\n\tget(): Options {\n\t\tconst defaults = getDefaultsFromInstance(this) as Options;\n\t\tObject.keys(defaults).forEach(attribute => {\n\t\t\tif (Reflect.has(this, attribute)) {\n\t\t\t\tconst member = this[attribute];\n\t\t\t\tif (isDefined(member) && isDefined(member.value) && isDefined(member.setValueAtTime)) {\n\t\t\t\t\tdefaults[attribute] = member.value;\n\t\t\t\t} else if (member instanceof ToneWithContext) {\n\t\t\t\t\tdefaults[attribute] = member._getPartialProperties(defaults[attribute]);\n\t\t\t\t// otherwise make sure it's a serializable type\n\t\t\t\t} else if (isArray(member) || isNumber(member) || isString(member) || isBoolean(member)) {\n\t\t\t\t\tdefaults[attribute] = member;\n\t\t\t\t} else {\n\t\t\t\t\t// remove all undefined and unserializable attributes\n\t\t\t\t\tdelete defaults[attribute];\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn defaults;\n\t}\n\n\t/**\n\t * Set the parameters at once. Either pass in an\n\t * object mapping parameters to values, or to set a\n\t * single parameter, by passing in a string and value.\n\t * The last argument is an optional ramp time which\n\t * will ramp any signal values to their destination value\n\t * over the duration of the rampTime.\n\t * @param  params\n\t * @example\n\t * //set values using an object\n\t * filter.set({\n\t * \"frequency\" : 300,\n\t * \"type\" : \"highpass\"\n\t * });\n\t */\n\tset(props: RecursivePartial<Options>): this {\n\t\tObject.keys(props).forEach(attribute => {\n\t\t\tif (Reflect.has(this, attribute) && isDefined(this[attribute])) {\n\t\t\t\tif (this[attribute] && isDefined(this[attribute].value) && isDefined(this[attribute].setValueAtTime)) {\n\t\t\t\t\t// small optimization\n\t\t\t\t\tif (this[attribute].value !== props[attribute]) {\n\t\t\t\t\t\tthis[attribute].value = props[attribute];\n\t\t\t\t\t}\n\t\t\t\t} else if (this[attribute] instanceof ToneWithContext) {\n\t\t\t\t\tthis[attribute].set(props[attribute]);\n\t\t\t\t} else {\n\t\t\t\t\tthis[attribute] = props[attribute];\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n}\n","import { AbstractParam } from \"../context/AbstractParam\";\nimport { dbToGain, gainToDb } from \"../type/Conversions\";\nimport { AudioRange, Decibels, Frequency, NormalRange, Positive, Time, Unit, UnitName } from \"../type/Units\";\nimport { isAudioParam } from \"../util/AdvancedTypeCheck\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isDefined } from \"../util/TypeCheck\";\nimport { ToneWithContext, ToneWithContextOptions } from \"./ToneWithContext\";\n\nexport interface ParamOptions<Type> extends ToneWithContextOptions {\n\tunits: UnitName;\n\tvalue?: Type;\n\tparam: AudioParam | Param<Type>;\n\tconvert: boolean;\n}\n\n/**\n * the possible automation types\n */\ntype AutomationType = \"linearRampToValueAtTime\" | \"exponentialRampToValueAtTime\" | \"setValueAtTime\" | \"setTargetAtTime\" | \"cancelScheduledValues\";\n\ninterface TargetAutomationEvent {\n\ttype: \"setTargetAtTime\";\n\ttime: number;\n\tvalue: number;\n\tconstant: number;\n}\n\ninterface NormalAutomationEvent {\n\ttype: Exclude<AutomationType, \"setTargetAtTime\">;\n\ttime: number;\n\tvalue: number;\n}\n/**\n * The events on the automation\n */\nexport type AutomationEvent = NormalAutomationEvent | TargetAutomationEvent;\n\n/**\n * Param wraps the native Web Audio's AudioParam to provide\n * additional unit conversion functionality. It also\n * serves as a base-class for classes which have a single,\n * automatable parameter.\n */\nexport class Param<Type extends Unit = number>\n\textends ToneWithContext<ParamOptions<Type>>\n\timplements AbstractParam<Type> {\n\n\treadonly name: string = \"Param\";\n\n\tstatic getDefaults(): ParamOptions<any> {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tconvert: true,\n\t\t\tunits: \"number\" as UnitName,\n\t\t} as ParamOptions<any>);\n\t}\n\n\t/**\n\t * The input connection\n\t */\n\treadonly input: AudioParam;\n\treadonly units: UnitName;\n\tconvert: boolean;\n\toverridden: boolean = false;\n\n\t/**\n\t * The timeline which tracks all of the automations.\n\t */\n\tprotected _events: Timeline<AutomationEvent>;\n\n\t/**\n\t * The native parameter to control\n\t */\n\tprotected _param: AudioParam;\n\n\t/**\n\t * The default value before anything is assigned\n\t */\n\tprotected _initialValue: number;\n\n\t/**\n\t * The minimum output value\n\t */\n\tprivate _minOutput = 1e-7;\n\n\t/**\n\t * @param param The AudioParam to wrap\n\t * @param units The unit name\n\t * @param convert Whether or not to convert the value to the target units\n\t */\n\tconstructor(param: AudioParam, units?: Unit, convert?: boolean);\n\tconstructor(options: Partial<ParamOptions<Type>>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Param.getDefaults(), arguments, [\"param\", \"units\", \"convert\"]));\n\n\t\tconst options = optionsFromArguments(Param.getDefaults(), arguments, [\"param\", \"units\", \"convert\"]);\n\n\t\tthis.assert(isDefined(options.param) &&\n\t\t\t(isAudioParam(options.param) || options.param instanceof Param), \"param must be an AudioParam\");\n\n\t\twhile (!isAudioParam(options.param)) {\n\t\t\toptions.param = options.param._param;\n\t\t}\n\t\t// initialize\n\t\tthis._param = this.input = options.param;\n\t\tthis._events = new Timeline<AutomationEvent>(1000);\n\t\tthis._initialValue = this._param.defaultValue;\n\t\tthis.units = options.units;\n\t\tthis.convert = options.convert;\n\n\t\t// if the value is defined, set it immediately\n\t\tif (isDefined(options.value) && options.value !== this._toType(this._initialValue)) {\n\t\t\tthis.setValueAtTime(options.value, 0);\n\t\t}\n\t}\n\n\tget value(): Type {\n\t\tconst now = this.now();\n\t\treturn this.getValueAtTime(now);\n\t}\n\tset value(value: Type) {\n\t\tthis._initialValue = this._fromType(value);\n\t\tthis.cancelScheduledValues(this.now());\n\t\tthis.setValueAtTime(value, this.now());\n\t}\n\n\tget minValue(): number {\n\t\tif (this.units === \"time\" || this.units === \"frequency\" ||\n\t\t\tthis.units === \"normalRange\" || this.units === \"positive\" ||\n\t\t\tthis.units === \"transportTime\" || this.units === \"ticks\" ||\n\t\t\tthis.units === \"bpm\" || this.units === \"hertz\" || this.units === \"samples\") {\n\t\t\treturn 0;\n\t\t} else if (this.units === \"audioRange\") {\n\t\t\treturn -1;\n\t\t} else if (this.units === \"decibels\") {\n\t\t\treturn -Infinity;\n\t\t} else {\n\t\t\treturn this._param.minValue;\n\t\t}\n\t}\n\n\tget maxValue(): number {\n\t\tif (this.units === \"normalRange\" ||\n\t\t\tthis.units === \"audioRange\") {\n\t\t\treturn 1;\n\t\t} else {\n\t\t\treturn this._param.maxValue;\n\t\t}\n\t}\n\n\t/**\n\t * Type guard based on the unit name\n\t */\n\tprivate _is<T>(arg: any, type: UnitName): arg is T {\n\t\treturn this.units === type;\n\t}\n\n\t/**\n\t * Convert the given value from the type specified by Param.units\n\t * into the destination value (such as Gain or Frequency).\n\t */\n\tprotected _fromType(val: Type): number {\n\t\tif (this.convert && !this.overridden) {\n\t\t\tif (this._is<Time>(val, \"time\")) {\n\t\t\t\treturn this.toSeconds(val);\n\t\t\t} else if (this._is<Decibels>(val, \"decibels\")) {\n\t\t\t\treturn dbToGain(val);\n\t\t\t} else if (this._is<Frequency>(val, \"frequency\")) {\n\t\t\t\treturn this.toFrequency(val);\n\t\t\t} else if (this._is<NormalRange>(val, \"normalRange\")) {\n\t\t\t\treturn Math.min(Math.max(val, 0), 1);\n\t\t\t} else if (this._is<AudioRange>(val, \"audioRange\")) {\n\t\t\t\treturn Math.min(Math.max(val, -1), 1);\n\t\t\t} else if (this._is<Positive>(val, \"positive\")) {\n\t\t\t\treturn Math.max(val, 0);\n\t\t\t} else if (this._is<number>(val, \"number\")) {\n\t\t\t\treturn val;\n\t\t\t} else {\n\t\t\t\treturn val as number;\n\t\t\t}\n\t\t} else {\n\t\t\treturn val as number;\n\t\t}\n\t}\n\n\t/**\n\t * Convert the parameters value into the units specified by Param.units.\n\t */\n\tprotected _toType(val: number): Type {\n\t\tif (this.convert && this.units === \"decibels\") {\n\t\t\treturn gainToDb(val) as Type;\n\t\t} else {\n\t\t\treturn val as Type;\n\t\t}\n\t}\n\n\t//-------------------------------------\n\t// ABSTRACT PARAM INTERFACE\n\t// all docs are generated from ParamInterface.ts\n\t//-------------------------------------\n\n\tsetValueAtTime(value: Type, time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst numericValue = this._fromType(value);\n\t\tthis.assert(isFinite(numericValue) && isFinite(computedTime),\n\t\t\t`Invalid argument(s) to setValueAtTime: ${JSON.stringify(value)}, ${JSON.stringify(time)}`);\n\n\t\tthis.log(this.units, \"setValueAtTime\", value, computedTime);\n\t\tthis._events.add({\n\t\t\ttime: computedTime,\n\t\t\ttype: \"setValueAtTime\",\n\t\t\tvalue: numericValue,\n\t\t});\n\t\tthis._param.setValueAtTime(numericValue, computedTime);\n\t\treturn this;\n\t}\n\n\tgetValueAtTime(time: Time): Type {\n\t\tconst computedTime = Math.max(this.toSeconds(time), 0);\n\t\tconst after = this._events.getAfter(computedTime);\n\t\tconst before = this._events.get(computedTime);\n\t\tlet value = this._initialValue;\n\t\t// if it was set by\n\t\tif (before === null) {\n\t\t\tvalue = this._initialValue;\n\t\t} else if (before.type === \"setTargetAtTime\" && (after === null || after.type === \"setValueAtTime\")) {\n\t\t\tconst previous = this._events.getBefore(before.time);\n\t\t\tlet previousVal;\n\t\t\tif (previous === null) {\n\t\t\t\tpreviousVal = this._initialValue;\n\t\t\t} else {\n\t\t\t\tpreviousVal = previous.value;\n\t\t\t}\n\t\t\tif (before.type === \"setTargetAtTime\") {\n\t\t\t\tvalue = this._exponentialApproach(before.time, previousVal, before.value, before.constant, computedTime);\n\t\t\t}\n\t\t} else if (after === null) {\n\t\t\tvalue = before.value;\n\t\t} else if (after.type === \"linearRampToValueAtTime\" || after.type === \"exponentialRampToValueAtTime\") {\n\t\t\tlet beforeValue = before.value;\n\t\t\tif (before.type === \"setTargetAtTime\") {\n\t\t\t\tconst previous = this._events.getBefore(before.time);\n\t\t\t\tif (previous === null) {\n\t\t\t\t\tbeforeValue = this._initialValue;\n\t\t\t\t} else {\n\t\t\t\t\tbeforeValue = previous.value;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (after.type === \"linearRampToValueAtTime\") {\n\t\t\t\tvalue = this._linearInterpolate(before.time, beforeValue, after.time, after.value, computedTime);\n\t\t\t} else {\n\t\t\t\tvalue = this._exponentialInterpolate(before.time, beforeValue, after.time, after.value, computedTime);\n\t\t\t}\n\t\t} else {\n\t\t\tvalue = before.value;\n\t\t}\n\t\treturn this._toType(value);\n\t}\n\n\tsetRampPoint(time: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tlet currentVal = this.getValueAtTime(time);\n\t\tthis.cancelAndHoldAtTime(time);\n\t\tif (this._fromType(currentVal) === 0) {\n\t\t\tcurrentVal = this._toType(this._minOutput);\n\t\t}\n\t\tthis.setValueAtTime(currentVal, time);\n\t\treturn this;\n\t}\n\n\tlinearRampToValueAtTime(value: Type, endTime: Time): this {\n\t\tconst numericValue = this._fromType(value);\n\t\tconst computedTime = this.toSeconds(endTime);\n\t\tthis.assert(isFinite(numericValue) && isFinite(computedTime),\n\t\t\t`Invalid argument(s) to linearRampToValueAtTime: ${JSON.stringify(value)}, ${JSON.stringify(endTime)}`);\n\t\tthis._events.add({\n\t\t\ttime: computedTime,\n\t\t\ttype: \"linearRampToValueAtTime\",\n\t\t\tvalue: numericValue,\n\t\t});\n\t\tthis.log(this.units, \"linearRampToValueAtTime\", value, computedTime);\n\t\tthis._param.linearRampToValueAtTime(numericValue, computedTime);\n\t\treturn this;\n\t}\n\n\texponentialRampToValueAtTime(value: Type, endTime: Time): this {\n\t\tlet numericValue = this._fromType(value);\n\t\tnumericValue = Math.max(this._minOutput, numericValue);\n\t\tconst computedTime = this.toSeconds(endTime);\n\t\tthis.assert(isFinite(numericValue) && isFinite(computedTime),\n\t\t\t`Invalid argument(s) to exponentialRampToValueAtTime: ${JSON.stringify(value)}, ${JSON.stringify(endTime)}`);\n\t\t// store the event\n\t\tthis._events.add({\n\t\t\ttime: computedTime,\n\t\t\ttype: \"exponentialRampToValueAtTime\",\n\t\t\tvalue: numericValue,\n\t\t});\n\t\tthis.log(this.units, \"exponentialRampToValueAtTime\", value, computedTime);\n\t\tthis._param.exponentialRampToValueAtTime(numericValue, computedTime);\n\t\treturn this;\n\t}\n\n\texponentialRampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tstartTime = this.toSeconds(startTime);\n\t\tthis.setRampPoint(startTime);\n\t\tthis.exponentialRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n\t\treturn this;\n\t}\n\n\tlinearRampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tstartTime = this.toSeconds(startTime);\n\t\tthis.setRampPoint(startTime);\n\t\tthis.linearRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n\t\treturn this;\n\t}\n\n\ttargetRampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tstartTime = this.toSeconds(startTime);\n\t\tthis.setRampPoint(startTime);\n\t\tthis.exponentialApproachValueAtTime(value, startTime, rampTime);\n\t\treturn this;\n\t}\n\n\texponentialApproachValueAtTime(value: Type, time: Time, rampTime: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\trampTime = this.toSeconds(rampTime);\n\t\tconst timeConstant = Math.log(rampTime + 1) / Math.log(200);\n\t\tthis.setTargetAtTime(value, time, timeConstant);\n\t\t// at 90% start a linear ramp to the final value\n\t\tthis.cancelAndHoldAtTime(time + rampTime * 0.9);\n\t\tthis.linearRampToValueAtTime(value, time + rampTime);\n\t\treturn this;\n\t}\n\n\tsetTargetAtTime(value: Type, startTime: Time, timeConstant: Positive): this {\n\t\tconst numericValue = this._fromType(value);\n\t\t// The value will never be able to approach without timeConstant > 0.\n\t\tthis.assert(isFinite(timeConstant) && timeConstant > 0, \"timeConstant must be a number greater than 0\");\n\t\tconst computedTime = this.toSeconds(startTime);\n\t\tthis.assert(isFinite(numericValue) && isFinite(computedTime),\n\t\t\t`Invalid argument(s) to setTargetAtTime: ${JSON.stringify(value)}, ${JSON.stringify(startTime)}`);\n\t\tthis._events.add({\n\t\t\tconstant: timeConstant,\n\t\t\ttime: computedTime,\n\t\t\ttype: \"setTargetAtTime\",\n\t\t\tvalue: numericValue,\n\t\t});\n\t\tthis.log(this.units, \"setTargetAtTime\", value, computedTime, timeConstant);\n\t\tthis._param.setTargetAtTime(numericValue, computedTime, timeConstant);\n\t\treturn this;\n\t}\n\n\tsetValueCurveAtTime(values: Type[], startTime: Time, duration: Time, scaling: number = 1): this {\n\t\tduration = this.toSeconds(duration);\n\t\tstartTime = this.toSeconds(startTime);\n\t\tconst startingValue = this._fromType(values[0]) * scaling;\n\t\tthis.setValueAtTime(this._toType(startingValue), startTime);\n\t\tconst segTime = duration / (values.length - 1);\n\t\tfor (let i = 1; i < values.length; i++) {\n\t\t\tconst numericValue = this._fromType(values[i]) * scaling;\n\t\t\tthis.linearRampToValueAtTime(this._toType(numericValue), startTime + i * segTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\tcancelScheduledValues(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis.assert(isFinite(computedTime), `Invalid argument to cancelScheduledValues: ${JSON.stringify(time)}`);\n\t\tthis._events.cancel(computedTime);\n\t\tthis._param.cancelScheduledValues(computedTime);\n\t\tthis.log(this.units, \"cancelScheduledValues\", computedTime);\n\t\treturn this;\n\t}\n\n\tcancelAndHoldAtTime(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst valueAtTime = this._fromType(this.getValueAtTime(computedTime));\n\t\t// remove the schedule events\n\t\tthis.assert(isFinite(computedTime), `Invalid argument to cancelAndHoldAtTime: ${JSON.stringify(time)}`);\n\n\t\tthis.log(this.units, \"cancelAndHoldAtTime\", computedTime, \"value=\" + valueAtTime);\n\n\t\tthis._param.cancelScheduledValues(computedTime);\n\n\t\t// if there is an event at the given computedTime\n\t\t// and that even is not a \"set\"\n\t\tconst before = this._events.get(computedTime);\n\t\tconst after = this._events.getAfter(computedTime);\n\t\tif (before && before.time === computedTime) {\n\t\t\t// remove everything after\n\t\t\tif (after) {\n\t\t\t\tthis._events.cancel(after.time);\n\t\t\t} else {\n\t\t\t\tthis._events.cancel(computedTime + this.sampleTime);\n\t\t\t}\n\t\t} else if (after) {\n\t\t\t// cancel the next event(s)\n\t\t\tthis._events.cancel(after.time);\n\t\t\tif (after.type === \"linearRampToValueAtTime\") {\n\t\t\t\tthis.linearRampToValueAtTime(this._toType(valueAtTime), computedTime);\n\t\t\t} else if (after.type === \"exponentialRampToValueAtTime\") {\n\t\t\t\tthis.exponentialRampToValueAtTime(this._toType(valueAtTime), computedTime);\n\t\t\t}\n\t\t}\n\n\t\t// set the value at the given time\n\t\tthis._events.add({\n\t\t\ttime: computedTime,\n\t\t\ttype: \"setValueAtTime\",\n\t\t\tvalue: valueAtTime,\n\t\t});\n\t\tthis._param.setValueAtTime(valueAtTime, computedTime);\n\t\treturn this;\n\t}\n\n\trampTo(value: Type, rampTime: Time = 0.1, startTime?: Time): this {\n\t\tif (this.units === \"frequency\" || this.units === \"bpm\" || this.units === \"decibels\") {\n\t\t\tthis.exponentialRampTo(value, rampTime, startTime);\n\t\t} else {\n\t\t\tthis.linearRampTo(value, rampTime, startTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Apply all of the previously scheduled events to the passed in Param or AudioParam.\n\t * The applied values will start at the context's current time and schedule\n\t * all of the events which are scheduled on this Param onto the passed in param.\n\t */\n\tapply(param: Param | AudioParam): this {\n\t\tconst now = this.context.currentTime;\n\t\t// set the param's value at the current time and schedule everything else\n\t\tparam.setValueAtTime(this.getValueAtTime(now) as number, now);\n\t\t// if the previous event was a curve, then set the rest of it\n\t\tconst previousEvent = this._events.get(now);\n\t\tif (previousEvent && previousEvent.type === \"setTargetAtTime\") {\n\t\t\t// approx it until the next event with linear ramps\n\t\t\tconst nextEvent = this._events.getAfter(previousEvent.time);\n\t\t\t// or for 2 seconds if there is no event\n\t\t\tconst endTime = nextEvent ? nextEvent.time : now + 2;\n\t\t\tconst subdivisions = (endTime - now) / 10;\n\t\t\tfor (let i = now; i < endTime; i += subdivisions) {\n\t\t\t\tparam.linearRampToValueAtTime(this.getValueAtTime(i) as number, i);\n\t\t\t}\n\t\t}\n\t\tthis._events.forEachAfter(this.context.currentTime, event => {\n\t\t\tif (event.type === \"cancelScheduledValues\") {\n\t\t\t\tparam.cancelScheduledValues(event.time);\n\t\t\t} else if (event.type === \"setTargetAtTime\") {\n\t\t\t\tparam.setTargetAtTime(event.value, event.time, event.constant);\n\t\t\t} else {\n\t\t\t\tparam[event.type](event.value, event.time);\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._events.dispose();\n\t\treturn this;\n\t}\n\n\tget defaultValue(): Type {\n\t\treturn this._toType(this._param.defaultValue);\n\t}\n\n\t//-------------------------------------\n\t// \tAUTOMATION CURVE CALCULATIONS\n\t// \tMIT License, copyright (c) 2014 Jordan Santell\n\t//-------------------------------------\n\n\t// Calculates the the value along the curve produced by setTargetAtTime\n\tprotected _exponentialApproach(t0: number, v0: number, v1: number, timeConstant: number, t: number): number {\n\t\treturn v1 + (v0 - v1) * Math.exp(-(t - t0) / timeConstant);\n\t}\n\n\t// Calculates the the value along the curve produced by linearRampToValueAtTime\n\tprotected _linearInterpolate(t0: number, v0: number, t1: number, v1: number, t: number): number {\n\t\treturn v0 + (v1 - v0) * ((t - t0) / (t1 - t0));\n\t}\n\n\t// Calculates the the value along the curve produced by exponentialRampToValueAtTime\n\tprotected _exponentialInterpolate(t0: number, v0: number, t1: number, v1: number, t: number): number {\n\t\treturn v0 * Math.pow(v1 / v0, (t - t0) / (t1 - t0));\n\t}\n}\n","import { Unit } from \"../type/Units\";\nimport { isAudioNode, isAudioParam } from \"../util/AdvancedTypeCheck\";\nimport { assert } from \"../util/Debug\";\nimport { isDefined } from \"../util/TypeCheck\";\nimport { Param } from \"./Param\";\nimport { ToneWithContext, ToneWithContextOptions } from \"./ToneWithContext\";\n\nexport type InputNode = ToneAudioNode | AudioNode | Param<any> | AudioParam;\nexport type OutputNode = ToneAudioNode | AudioNode;\n\ninterface ChannelProperties {\n\tchannelCount: number;\n\tchannelCountMode: ChannelCountMode;\n\tchannelInterpretation: ChannelInterpretation;\n}\n\n/**\n * The possible options for this node\n */\nexport type ToneAudioNodeOptions = ToneWithContextOptions;\n\n/**\n * ToneAudioNode is the base class for classes which process audio.\n */\nexport abstract class ToneAudioNode<Options extends ToneAudioNodeOptions = ToneAudioNodeOptions>\n\textends ToneWithContext<Options> {\n\n\t/**\n\t * The name of the class\n\t */\n\tabstract readonly name: string = \"AudioNode\";\n\n\t/**\n\t * The input node or nodes. If the object is a source,\n\t * it does not have any input and this.input is undefined.\n\t */\n\tabstract input: InputNode | undefined;\n\n\t/**\n\t * The output nodes. If the object is a sink,\n\t * it does not have any output and this.output is undefined.\n\t */\n\tabstract output: OutputNode | undefined;\n\n\t/**\n\t * The number of inputs feeding into the AudioNode.\n\t * For source nodes, this will be 0.\n\t */\n\tget numberOfInputs(): number {\n\t\tif (isDefined(this.input)) {\n\t\t\tif (isAudioParam(this.input) || this.input instanceof Param) {\n\t\t\t\treturn 1;\n\t\t\t} else {\n\t\t\t\treturn this.input.numberOfInputs;\n\t\t\t}\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * The number of outputs of the AudioNode.\n\t */\n\tget numberOfOutputs(): number {\n\t\tif (isDefined(this.output)) {\n\t\t\treturn this.output.numberOfOutputs;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * List all of the node that must be set to match the ChannelProperties\n\t */\n\tprotected _internalChannels: OutputNode[] = [];\n\n\t//-------------------------------------\n\t// AUDIO PROPERTIES\n\t//-------------------------------------\n\n\t/**\n\t * Used to decide which nodes to get/set properties on\n\t */\n\tprivate _isAudioNode(node: any): node is AudioNode | ToneAudioNode {\n\t\treturn isDefined(node) && (node instanceof ToneAudioNode || isAudioNode(node));\n\t}\n\n\t/**\n\t * Get all of the audio nodes (either internal or input/output) which together\n\t * make up how the class node responds to channel input/output\n\t */\n\tprivate _getInternalNodes(): OutputNode[] {\n\t\tconst nodeList = this._internalChannels.slice(0);\n\t\tif (this._isAudioNode(this.input)) {\n\t\t\tnodeList.push(this.input);\n\t\t}\n\t\tif (this._isAudioNode(this.output)) {\n\t\t\tif (this.input !== this.output) {\n\t\t\t\tnodeList.push(this.output);\n\t\t\t}\n\t\t}\n\t\treturn nodeList;\n\t}\n\n\t/**\n\t * Set the audio options for this node such as channelInterpretation\n\t * channelCount, etc.\n\t * @param options\n\t */\n\tprivate _setChannelProperties(options: ChannelProperties): void {\n\t\tconst nodeList = this._getInternalNodes();\n\t\tnodeList.forEach(node => {\n\t\t\tnode.channelCount = options.channelCount;\n\t\t\tnode.channelCountMode = options.channelCountMode;\n\t\t\tnode.channelInterpretation = options.channelInterpretation;\n\t\t});\n\t}\n\n\t/**\n\t * Get the current audio options for this node such as channelInterpretation\n\t * channelCount, etc.\n\t */\n\tprivate _getChannelProperties(): ChannelProperties {\n\t\tconst nodeList = this._getInternalNodes();\n\t\tthis.assert(nodeList.length > 0, \"ToneAudioNode does not have any internal nodes\");\n\t\t// use the first node to get properties\n\t\t// they should all be the same\n\t\tconst node = nodeList[0];\n\t\treturn {\n\t\t\tchannelCount: node.channelCount,\n\t\t\tchannelCountMode: node.channelCountMode,\n\t\t\tchannelInterpretation: node.channelInterpretation,\n\t\t};\n\t}\n\n\t/**\n\t * channelCount is the number of channels used when up-mixing and down-mixing\n\t * connections to any inputs to the node. The default value is 2 except for\n\t * specific nodes where its value is specially determined.\n\t */\n\tget channelCount(): number {\n\t\treturn this._getChannelProperties().channelCount;\n\t}\n\tset channelCount(channelCount) {\n\t\tconst props = this._getChannelProperties();\n\t\t// merge it with the other properties\n\t\tthis._setChannelProperties(Object.assign(props, { channelCount }));\n\t}\n\n\t/**\n\t * channelCountMode determines how channels will be counted when up-mixing and\n\t * down-mixing connections to any inputs to the node.\n\t * The default value is \"max\". This attribute has no effect for nodes with no inputs.\n\t * * \"max\" - computedNumberOfChannels is the maximum of the number of channels of all connections to an input. In this mode channelCount is ignored.\n\t * * \"clamped-max\" - computedNumberOfChannels is determined as for \"max\" and then clamped to a maximum value of the given channelCount.\n\t * * \"explicit\" - computedNumberOfChannels is the exact value as specified by the channelCount.\n\t */\n\tget channelCountMode(): ChannelCountMode {\n\t\treturn this._getChannelProperties().channelCountMode;\n\t}\n\tset channelCountMode(channelCountMode) {\n\t\tconst props = this._getChannelProperties();\n\t\t// merge it with the other properties\n\t\tthis._setChannelProperties(Object.assign(props, { channelCountMode }));\n\t}\n\n\t/**\n\t * channelInterpretation determines how individual channels will be treated\n\t * when up-mixing and down-mixing connections to any inputs to the node.\n\t * The default value is \"speakers\".\n\t */\n\tget channelInterpretation(): ChannelInterpretation {\n\t\treturn this._getChannelProperties().channelInterpretation;\n\t}\n\tset channelInterpretation(channelInterpretation) {\n\t\tconst props = this._getChannelProperties();\n\t\t// merge it with the other properties\n\t\tthis._setChannelProperties(Object.assign(props, { channelInterpretation }));\n\t}\n\n\t//-------------------------------------\n\t// CONNECTIONS\n\t//-------------------------------------\n\n\t/**\n\t * connect the output of a ToneAudioNode to an AudioParam, AudioNode, or ToneAudioNode\n\t * @param unit The output to connect to\n\t * @param outputNum The output to connect from\n\t * @param inputNum The input to connect to\n\t */\n\tconnect(destination: InputNode, outputNum = 0, inputNum = 0): this {\n\t\tconnect(this, destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Connect the output to the context's destination node.\n\t */\n\ttoDestination(): this {\n\t\tthis.connect(this.context.destination);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Connect the output to the context's destination node.\n\t * alias for {@link toDestination}\n\t * @deprecated\n\t */\n\ttoMaster(): this {\n\t\tconsole.warn(\"toMaster() has been renamed toDestination()\");\n\t\treturn this.toDestination();\n\t}\n\n\t/**\n\t * disconnect the output\n\t */\n\tdisconnect(destination?: InputNode, outputNum = 0, inputNum = 0): this {\n\t\tdisconnect(this, destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Connect the output of this node to the rest of the nodes in series.\n\t * @example\n\t * //connect a node to an effect, panVol and then to the master output\n\t * node.chain(effect, panVol, Tone.Destination);\n\t */\n\tchain(...nodes: InputNode[]): this {\n\t\tconnectSeries(this, ...nodes);\n\t\treturn this;\n\t}\n\n\t/**\n\t * connect the output of this node to the rest of the nodes in parallel.\n\t */\n\tfan(...nodes: InputNode[]): this {\n\t\tnodes.forEach(node => this.connect(node));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Dispose and disconnect\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (isDefined(this.input)) {\n\t\t\tif (this.input instanceof ToneAudioNode) {\n\t\t\t\tthis.input.dispose();\n\t\t\t} else if (isAudioNode(this.input)) {\n\t\t\t\tthis.input.disconnect();\n\t\t\t}\n\t\t}\n\t\tif (isDefined(this.output)) {\n\t\t\tif (this.output instanceof ToneAudioNode) {\n\t\t\t\tthis.output.dispose();\n\t\t\t} else if (isAudioNode(this.output)) {\n\t\t\t\tthis.output.disconnect();\n\t\t\t}\n\t\t}\n\t\tthis._internalChannels = [];\n\t\treturn this;\n\t}\n}\n\n//-------------------------------------\n// CONNECTIONS\n//-------------------------------------\n\n/**\n * connect together all of the arguments in series\n * @param nodes\n */\nexport function connectSeries(...nodes: InputNode[]): void {\n\tconst first = nodes.shift();\n\tnodes.reduce((prev, current) => {\n\t\tif (prev instanceof ToneAudioNode) {\n\t\t\tprev.connect(current);\n\t\t} else if (isAudioNode(prev)) {\n\t\t\tconnect(prev, current);\n\t\t}\n\t\treturn current;\n\t}, first);\n}\n\n/**\n * Connect two nodes together so that signal flows from the\n * first node to the second. Optionally specify the input and output channels.\n * @param srcNode The source node\n * @param dstNode The destination node\n * @param outputNumber The output channel of the srcNode\n * @param inputNumber The input channel of the dstNode\n */\nexport function connect(srcNode: OutputNode, dstNode: InputNode, outputNumber = 0, inputNumber = 0): void {\n\n\tassert(isDefined(srcNode), \"Cannot connect from undefined node\");\n\tassert(isDefined(dstNode), \"Cannot connect to undefined node\");\n\n\tif (dstNode instanceof ToneAudioNode || isAudioNode(dstNode)) {\n\t\tassert(dstNode.numberOfInputs > 0, \"Cannot connect to node with no inputs\");\n\t}\n\tassert(srcNode.numberOfOutputs > 0, \"Cannot connect from node with no outputs\");\n\n\t// resolve the input of the dstNode\n\twhile (dstNode instanceof ToneAudioNode || dstNode instanceof Param) {\n\t\tif (isDefined(dstNode.input)) {\n\t\t\tdstNode = dstNode.input;\n\t\t}\n\t}\n\n\twhile (srcNode instanceof ToneAudioNode) {\n\t\tif (isDefined(srcNode.output)) {\n\t\t\tsrcNode = srcNode.output;\n\t\t}\n\t}\n\n\t// make the connection\n\tif (isAudioParam(dstNode)) {\n\t\tsrcNode.connect(dstNode as AudioParam, outputNumber);\n\t} else {\n\t\tsrcNode.connect(dstNode, outputNumber, inputNumber);\n\t}\n}\n\n/**\n * Disconnect a node from all nodes or optionally include a destination node and input/output channels.\n * @param srcNode The source node\n * @param dstNode The destination node\n * @param outputNumber The output channel of the srcNode\n * @param inputNumber The input channel of the dstNode\n */\nexport function disconnect(\n\tsrcNode: OutputNode,\n\tdstNode?: InputNode,\n\toutputNumber = 0,\n\tinputNumber = 0,\n): void {\n\n\t// resolve the destination node\n\tif (isDefined(dstNode)) {\n\t\twhile (dstNode instanceof ToneAudioNode) {\n\t\t\tif (dstNode.input) {\n\t\t\t\tdstNode = dstNode.input;\n\t\t\t}\n\t\t}\n\t}\n\n\t// resolve the src node\n\twhile (!(isAudioNode(srcNode))) {\n\t\tif (isDefined(srcNode.output)) {\n\t\t\tsrcNode = srcNode.output;\n\t\t}\n\t}\n\n\tif (isAudioParam(dstNode)) {\n\t\tsrcNode.disconnect(dstNode as AudioParam, outputNumber);\n\t} else if (isAudioNode(dstNode)) {\n\t\tsrcNode.disconnect(dstNode, outputNumber, inputNumber);\n\t} else {\n\t\tsrcNode.disconnect();\n\t}\n}\n","import { isArray } from \"./TypeCheck\";\n\n// return an interface which excludes certain keys\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n\n/**\n * Make the property not writable using `defineProperty`. Internal use only.\n */\nexport function readOnly(target: object, property: string | string[]): void {\n\tif (isArray(property)) {\n\t\tproperty.forEach(str => readOnly(target, str));\n\t} else {\n\t\tObject.defineProperty(target, property, {\n\t\t\tenumerable: true,\n\t\t\twritable: false,\n\t\t});\n\t}\n}\n\n/**\n * Make an attribute writeable. Internal use only.\n */\nexport function writable(target: object, property: string | string[]): void {\n\tif (isArray(property)) {\n\t\tproperty.forEach(str => writable(target, str));\n\t} else {\n\t\tObject.defineProperty(target, property, {\n\t\t\twritable: true,\n\t\t});\n\t}\n}\n\nexport const noOp: (...args: any[]) => any = () => {\n\t// no op!\n};\n\n/**\n * Recursive Partial taken from here: https://stackoverflow.com/a/51365037\n */\nexport type RecursivePartial<T> = {\n\t[P in keyof T]?:\n\tT[P] extends Array<infer U> ? Array<RecursivePartial<U>> :\n\t\tT[P] extends object ? RecursivePartial<T[P]> :\n\t\t\tT[P];\n};\n","import { Param } from \"../context/Param\";\nimport { GainFactor, Unit, UnitName } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"./ToneAudioNode\";\n\ninterface GainOptions extends ToneAudioNodeOptions {\n\tgain: number;\n\tunits: UnitName;\n\tconvert: boolean;\n}\n\n/**\n * A thin wrapper around the Native Web Audio GainNode.\n * The GainNode is a basic building block of the Web Audio\n * API and is useful for routing audio and adjusting gains.\n * @category Core\n */\nexport class Gain<Type extends Unit = GainFactor> extends ToneAudioNode<GainOptions> {\n\n\treadonly name: string = \"Gain\";\n\n\t/**\n\t * The gain parameter of the gain node.\n\t */\n\treadonly gain: Param<Type>;\n\n\t/**\n\t * The wrapped GainNode.\n\t */\n\tprivate _gainNode: GainNode = this.context.createGain();\n\n\t// input = output\n\treadonly input: GainNode = this._gainNode;\n\treadonly output: GainNode = this._gainNode;\n\n\t/**\n\t * @param  gain The initial gain of the GainNode\n\t * @param units The units of the gain parameter.\n\t */\n\tconstructor(gain?: GainFactor, units?: Unit);\n\tconstructor(options?: Partial<GainOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Gain.getDefaults(), arguments, [\"gain\", \"units\"]));\n\t\tconst options = optionsFromArguments(Gain.getDefaults(), arguments, [\"gain\", \"units\"]);\n\n\t\tthis.gain = new Param({\n\t\t\tcontext: this.context,\n\t\t\tconvert: options.convert,\n\t\t\tparam: this._gainNode.gain,\n\t\t\tunits: options.units,\n\t\t\tvalue: options.gain as Type,\n\t\t});\n\t\treadOnly(this, \"gain\");\n\t}\n\n\tstatic getDefaults(): GainOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tconvert: true,\n\t\t\tgain: 1,\n\t\t\tunits: \"gain\" as UnitName,\n\t\t});\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._gainNode.disconnect();\n\t\tthis.gain.dispose();\n\t\treturn this;\n\t}\n}\n","import { getContext } from \"../Global\";\nimport { Tone } from \"../Tone\";\nimport { Samples, Seconds, Time } from \"../type/Units\";\nimport { isAudioBuffer } from \"../util/AdvancedTypeCheck\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { noOp } from \"../util/Interface\";\nimport { isArray, isNumber, isString } from \"../util/TypeCheck\";\n\ninterface ToneAudioBufferOptions {\n\turl?: string | AudioBuffer | ToneAudioBuffer;\n\treverse: boolean;\n\tonload: (buffer?: ToneAudioBuffer) => void;\n\tonerror: (error: Error) => void;\n}\n\n/**\n * AudioBuffer loading and storage. ToneAudioBuffer is used internally by all\n * classes that make requests for audio files such as Tone.Player,\n * Tone.Sampler and Tone.Convolver.\n *\n * Aside from load callbacks from individual buffers, ToneAudioBuffer\n * provides events which keep track of the loading progress\n * of _all_ of the buffers. These are ToneAudioBuffer.on(\"load\" / \"progress\" / \"error\")\n * @example\n * var buffer = new ToneAudioBuffer(\"path/to/sound.mp3\", function(){\n * \t//the buffer is now available.\n * \tvar buff = buffer.get();\n * });\n * @example\n * //can load provide fallback extension types if the first type is not supported.\n * var buffer = new ToneAudioBuffer(\"path/to/sound.[mp3|ogg|wav]\");\n * @category Core\n */\nexport class ToneAudioBuffer extends Tone {\n\n\treadonly name: string = \"ToneAudioBuffer\";\n\n\t/**\n\t * stores the loaded AudioBuffer\n\t */\n\tprivate _buffer?: AudioBuffer;\n\n\t/**\n\t * indicates if the buffer should be reversed or not\n\t */\n\tprivate _reversed!: boolean;\n\n\t/**\n\t * Callback when the buffer is loaded.\n\t */\n\tonload: (buffer: ToneAudioBuffer) => void = noOp;\n\n\t/**\n\t *\n\t * @param url The url to load, or the audio buffer to set.\n\t * @param onload A callback which is invoked after the buffer is loaded.\n\t *                           It's recommended to use `ToneAudioBuffer.on('load', callback)` instead\n\t *                           since it will give you a callback when _all_ buffers are loaded.\n\t * @param onerror The callback to invoke if there is an error\n\t */\n\tconstructor(\n\t\turl?: string | ToneAudioBuffer | AudioBuffer,\n\t\tonload?: (buffer: ToneAudioBuffer) => void,\n\t\tonerror?: (error: Error) => void,\n\t);\n\tconstructor(options?: Partial<ToneAudioBufferOptions>);\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tconst options = optionsFromArguments(ToneAudioBuffer.getDefaults(), arguments, [\"url\", \"onload\", \"onerror\"]);\n\n\t\tthis.reverse = options.reverse;\n\t\tthis.onload = options.onload;\n\n\t\tif (options.url && isAudioBuffer(options.url) || options.url instanceof ToneAudioBuffer) {\n\t\t\tthis.set(options.url);\n\t\t} else if (isString(options.url)) {\n\t\t\t// initiate the download\n\t\t\tthis.load(options.url).catch(options.onerror);\n\t\t}\n\t}\n\n\tstatic getDefaults(): ToneAudioBufferOptions {\n\t\treturn {\n\t\t\tonerror: noOp,\n\t\t\tonload: noOp,\n\t\t\treverse: false,\n\t\t};\n\t}\n\n\t/**\n\t * The sample rate of the AudioBuffer\n\t */\n\tget sampleRate(): number {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.sampleRate;\n\t\t} else {\n\t\t\treturn getContext().sampleRate;\n\t\t}\n\t}\n\n\t/**\n\t * Pass in an AudioBuffer or ToneAudioBuffer to set the value of this buffer.\n\t */\n\tset(buffer: AudioBuffer | ToneAudioBuffer): this {\n\t\tif (buffer instanceof ToneAudioBuffer) {\n\t\t\t// if it's loaded, set it\n\t\t\tif (buffer.loaded) {\n\t\t\t\tthis._buffer = buffer.get();\n\t\t\t} else {\n\t\t\t\t// otherwise when it's loaded, invoke it's callback\n\t\t\t\tbuffer.onload = () => {\n\t\t\t\t\tthis.set(buffer);\n\t\t\t\t\tthis.onload(this);\n\t\t\t\t};\n\t\t\t}\n\t\t} else {\n\t\t\tthis._buffer = buffer;\n\t\t}\n\t\t// reverse it initially\n\t\tif (this._reversed) {\n\t\t\tthis._reverse();\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * The audio buffer stored in the object.\n\t */\n\tget(): AudioBuffer | undefined {\n\t\treturn this._buffer;\n\t}\n\n\t/**\n\t * Makes an fetch request for the selected url then decodes the file as an audio buffer.\n\t * Invokes the callback once the audio buffer loads.\n\t * @param url The url of the buffer to load. filetype support depends on the browser.\n\t * @returns A Promise which resolves with this ToneAudioBuffer\n\t */\n\tasync load(url: string): Promise<this> {\n\t\tconst promise = ToneAudioBuffer.load(url);\n\t\tToneAudioBuffer.downloads.push(promise);\n\t\ttry {\n\t\t\tconst audioBuffer = await promise;\n\t\t\tthis.set(audioBuffer);\n\t\t\t// invoke the onload method\n\t\t\tthis.onload(this);\n\t\t} catch (e) {\n\t\t\t// remove the failed file before throwing error\n\t\t\tconst index = ToneAudioBuffer.downloads.indexOf(promise);\n\t\t\tToneAudioBuffer.downloads.splice(index, 1);\n\t\t\tthrow e;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._buffer = undefined;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set the audio buffer from the array.\n\t * To create a multichannel AudioBuffer, pass in a multidimensional array.\n\t * @param array The array to fill the audio buffer\n\t */\n\tfromArray(array: Float32Array | Float32Array[]): this {\n\t\tconst isMultidimensional = isArray(array) && array[0].length > 0;\n\t\tconst channels = isMultidimensional ? array.length : 1;\n\t\tconst len = isMultidimensional ? (array[0] as Float32Array).length : array.length;\n\t\tconst context = getContext();\n\t\tconst buffer = context.createBuffer(channels, len, context.sampleRate);\n\t\tconst multiChannelArray: Float32Array[] = !isMultidimensional && channels === 1 ?\n\t\t\t[array as Float32Array] : array as Float32Array[];\n\n\t\tfor (let c = 0; c < channels; c++) {\n\t\t\tbuffer.copyToChannel(multiChannelArray[c], c);\n\t\t}\n\t\tthis._buffer = buffer;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sums multiple channels into 1 channel\n\t * @param channel Optionally only copy a single channel from the array.\n\t */\n\ttoMono(chanNum?: number): this {\n\t\tif (isNumber(chanNum)) {\n\t\t\tthis.fromArray(this.toArray(chanNum));\n\t\t} else {\n\t\t\tlet outputArray = new Float32Array(this.length as number);\n\t\t\tconst numChannels = this.numberOfChannels;\n\t\t\tfor (let channel = 0; channel < numChannels; channel++) {\n\t\t\t\tconst channelArray = this.toArray(channel) as Float32Array;\n\t\t\t\tfor (let i = 0; i < channelArray.length; i++) {\n\t\t\t\t\toutputArray[i] += channelArray[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\t// divide by the number of channels\n\t\t\toutputArray = outputArray.map(sample => sample / numChannels);\n\t\t\tthis.fromArray(outputArray);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the buffer as an array. Single channel buffers will return a 1-dimensional\n\t * Float32Array, and multichannel buffers will return multidimensional arrays.\n\t * @param channel Optionally only copy a single channel from the array.\n\t */\n\ttoArray(channel?: number): Float32Array | Float32Array[] {\n\t\tif (isNumber(channel)) {\n\t\t\treturn this.getChannelData(channel);\n\t\t} else if (this.numberOfChannels === 1) {\n\t\t\treturn this.toArray(0);\n\t\t} else {\n\t\t\tconst ret: Float32Array[] = [];\n\t\t\tfor (let c = 0; c < this.numberOfChannels; c++) {\n\t\t\t\tret[c] = this.getChannelData(c);\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\t}\n\n\t/**\n\t * Returns the Float32Array representing the PCM audio data for the specific channel.\n\t * @param  channel  The channel number to return\n\t * @return The audio as a TypedArray\n\t */\n\tgetChannelData(channel: number): Float32Array {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.getChannelData(channel);\n\t\t} else {\n\t\t\treturn new Float32Array(0);\n\t\t}\n\t}\n\n\t/**\n\t * Cut a subsection of the array and return a buffer of the\n\t * subsection. Does not modify the original buffer\n\t * @param start The time to start the slice\n\t * @param end The end time to slice. If none is given will default to the end of the buffer\n\t */\n\tslice(start: Seconds, end: Seconds = this.duration): ToneAudioBuffer {\n\t\tconst startSamples = Math.floor(start * this.sampleRate);\n\t\tconst endSamples = Math.floor(end * this.sampleRate);\n\t\tthis.assert(startSamples < endSamples, \"The start time must be less than the end time\");\n\t\tconst length = endSamples - startSamples;\n\t\tconst retBuffer = getContext().createBuffer(this.numberOfChannels, length, this.sampleRate);\n\t\tfor (let channel = 0; channel < this.numberOfChannels; channel++) {\n\t\t\tretBuffer.copyToChannel(this.getChannelData(channel).subarray(startSamples, endSamples), channel);\n\t\t}\n\t\treturn new ToneAudioBuffer(retBuffer);\n\t}\n\n\t/**\n\t * Reverse the buffer.\n\t */\n\tprivate _reverse(): this {\n\t\tif (this.loaded) {\n\t\t\tfor (let i = 0; i < this.numberOfChannels; i++) {\n\t\t\t\tthis.getChannelData(i).reverse();\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * If the buffer is loaded or not\n\t */\n\tget loaded(): boolean {\n\t\treturn this.length > 0;\n\t}\n\n\t/**\n\t * The duration of the buffer in seconds.\n\t */\n\tget duration(): Seconds {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.duration;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * The length of the buffer in samples\n\t */\n\tget length(): Samples {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.length;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * The number of discrete audio channels. Returns 0 if no buffer is loaded.\n\t */\n\tget numberOfChannels(): number {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.numberOfChannels;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * Reverse the buffer.\n\t */\n\tget reverse(): boolean {\n\t\treturn this._reversed;\n\t}\n\tset reverse(rev: boolean) {\n\t\tif (this._reversed !== rev) {\n\t\t\tthis._reversed = rev;\n\t\t\tthis._reverse();\n\t\t}\n\t}\n\n\t//-------------------------------------\n\t// STATIC METHODS\n\t//-------------------------------------\n\n\t/**\n\t * A path which is prefixed before every url.\n\t */\n\tstatic baseUrl = \"\";\n\n\t/**\n\t * Create a ToneAudioBuffer from the array. To create a multichannel AudioBuffer,\n\t * pass in a multidimensional array.\n\t * @param array The array to fill the audio buffer\n\t * @return A ToneAudioBuffer created from the array\n\t */\n\tstatic fromArray(array: Float32Array | Float32Array[]): ToneAudioBuffer {\n\t\treturn (new ToneAudioBuffer()).fromArray(array);\n\t}\n\n\t/**\n\t * Creates a ToneAudioBuffer from a URL, returns a promise which resolves to a ToneAudioBuffer\n\t * @param  url The url to load.\n\t * @return A promise which resolves to a ToneAudioBuffer\n\t */\n\tstatic async fromUrl(url: string): Promise<ToneAudioBuffer> {\n\t\tconst buffer = new ToneAudioBuffer();\n\t\treturn await buffer.load(url);\n\t}\n\n\t/**\n\t * All of the downloads\n\t */\n\tstatic downloads: Array<Promise<AudioBuffer>> = [];\n\n\t/**\n\t * Loads a url using fetch and returns the AudioBuffer.\n\t */\n\tstatic async load(url: string): Promise<AudioBuffer> {\n\n\t\t// test if the url contains multiple extensions\n\t\tconst matches = url.match(/\\[(.+\\|?)+\\]$/);\n\t\tif (matches) {\n\t\t\tconst extensions = matches[1].split(\"|\");\n\t\t\tlet extension = extensions[0];\n\t\t\tfor (const ext of extensions) {\n\t\t\t\tif (ToneAudioBuffer.supportsType(ext)) {\n\t\t\t\t\textension = ext;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\turl = url.replace(matches[0], extension);\n\t\t}\n\n\t\tconst response = await fetch(ToneAudioBuffer.baseUrl + url);\n\t\tif (!response.ok) {\n\t\t\tthrow new Error(`could not load url: ${url}`);\n\t\t}\n\t\tconst arrayBuffer = await response.arrayBuffer();\n\n\t\tconst audioBuffer = await getContext().decodeAudioData(arrayBuffer);\n\n\t\treturn audioBuffer;\n\t}\n\n\t/**\n\t * Checks a url's extension to see if the current browser can play that file type.\n\t * @param url The url/extension to test\n\t * @return If the file extension can be played\n\t * @static\n\t * @example\n\t * ToneAudioBuffer.supportsType(\"wav\"); //returns true\n\t * ToneAudioBuffer.supportsType(\"path/to/file.wav\"); //returns true\n\t */\n\tstatic supportsType(url: string): boolean {\n\t\tconst extensions = url.split(\".\");\n\t\tconst extension = extensions[extensions.length - 1];\n\t\tconst response = document.createElement(\"audio\").canPlayType(\"audio/\" + extension);\n\t\treturn response !== \"\";\n\t}\n\n\t/**\n\t * Returns a Promise which resolves when all of the buffers have loaded\n\t */\n\tstatic async loaded(): Promise<void> {\n\t\tfor (const promise of ToneAudioBuffer.downloads) {\n\t\t\tawait promise;\n\t\t}\n\t}\n}\n","import { getContext, setContext } from \"../Global\";\nimport { Seconds } from \"../type/Units\";\nimport { OfflineContext } from \"./OfflineContext\";\nimport { ToneAudioBuffer } from \"./ToneAudioBuffer\";\n\n/**\n * Generate a buffer by rendering all of the Tone.js code within the callback using the OfflineAudioContext.\n * The OfflineAudioContext is capable of rendering much faster than real time in many cases.\n * The callback function also passes in an offline instance of [[Context]] which can be used\n * to schedule events along the Transport. \n * @param  callback  All Tone.js nodes which are created and scheduled within this callback are recorded into the output Buffer.\n * @param  duration     the amount of time to record for.\n * @return  The promise which is invoked with the ToneAudioBuffer of the recorded output.\n * @example\n * //render 2 seconds of the oscillator\n * Tone.Offline(() => {\n * \t//only nodes created in this callback will be recorded\n * \tvar oscillator = new Tone.Oscillator().toDestination().start(0)\n * \t//schedule their events\n * }, 2).then((buffer) => {\n * \t//do something with the output buffer\n * })\n * @example\n * //can also schedule events along the Transport\n * //using the passed in Offline Transport\n * Tone.Offline(({ transport }) => {\n * \tvar osc = new Tone.Oscillator().toDestination()\n * \ttransport.schedule(function(time){\n * \t\tosc.start(time).stop(time + 0.1)\n * \t}, 1)\n * \ttransport.start(0.2)\n * }, 4).then((buffer) => {\n * \t//do something with the output buffer\n * })\n * @category Core\n */\nexport async function Offline(\n\tcallback: (context: OfflineContext) => Promise<void> | void,\n\tduration: Seconds,\n\tchannels: number = 2,\n\tsampleRate: number = getContext().sampleRate,\n): Promise<ToneAudioBuffer> {\n\t// set the OfflineAudioContext based on the current context\n\tconst originalContext = getContext();\n\n\tconst context = new OfflineContext(channels, duration, sampleRate);\n\tsetContext(context);\n\n\t// invoke the callback/scheduling\n\tawait callback(context);\n\n\t// then render the audio\n\tconst bufferPromise = context.render();\n\n\t// return the original AudioContext\n\tsetContext(originalContext);\n\n\t// await the rendering\n\tconst buffer = await bufferPromise;\n\n\t// return the audio\n\treturn new ToneAudioBuffer(buffer);\n}\n","import { Tone } from \"../Tone\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { noOp } from \"../util/Interface\";\nimport { isString } from \"../util/TypeCheck\";\nimport { ToneAudioBuffer } from \"./ToneAudioBuffer\";\n\nexport interface ToneAudioBuffersUrlMap {\n\t[name: string]: string | AudioBuffer | ToneAudioBuffer;\n\t[name: number]: string | AudioBuffer | ToneAudioBuffer;\n}\n\ninterface ToneAudioBuffersOptions {\n\turls: ToneAudioBuffersUrlMap;\n\tonload: () => void;\n\tonerror?: (error: Error) => void;\n\tbaseUrl: string;\n}\n\n/**\n * A data structure for holding multiple buffers in a Map-like datastructure.\n *\n * @example\n * //load a whole bank of piano samples\n * var pianoSamples = new ToneAudioBuffers({\n * \t\"C4\" : \"path/to/C4.mp3\"\n * \t\"C#4\" : \"path/to/C#4.mp3\"\n * \t\"D4\" : \"path/to/D4.mp3\"\n * \t\"D#4\" : \"path/to/D#4.mp3\"\n * }, function(){\n * \t//play one of the samples when they all load\n * \tplayer.buffer = pianoSamples.get(\"C4\");\n * \tplayer.start();\n * });\n * @example\n * //To pass in additional parameters in the second parameter\n * var buffers = new ToneAudioBuffers(urls, {\n * \t\"onload\" : callback,\n * \t\"baseUrl\" : \"../path/to/audio/\"\n * })\n * @category Core\n */\nexport class ToneAudioBuffers extends Tone {\n\n\treadonly name: string = \"ToneAudioBuffers\";\n\n\t/**\n\t * All of the buffers\n\t */\n\tprivate _buffers: Map<string, ToneAudioBuffer> = new Map();\n\n\t/**\n\t * A path which is prefixed before every url.\n\t */\n\tbaseUrl: string;\n\n\t/**\n\t * Keep track of the number of loaded buffers\n\t */\n\tprivate _loadingCount: number = 0;\n\n\t/**\n\t * @param  urls  An object literal or array of urls to load.\n\t * @param onload  The callback to invoke when the buffers are loaded.\n\t * @param baseUrl A prefix url to add before all the urls\n\t */\n\tconstructor(\n\t\turls?: ToneAudioBuffersUrlMap,\n\t\tonload?: () => void,\n\t\tbaseUrl?: string,\n\t);\n\tconstructor(options?: Partial<ToneAudioBuffersOptions>);\n\tconstructor() {\n\n\t\tsuper();\n\t\tconst options = optionsFromArguments(\n\t\t\tToneAudioBuffers.getDefaults(), arguments, [\"urls\", \"onload\", \"baseUrl\"], \"urls\",\n\t\t);\n\n\t\tthis.baseUrl = options.baseUrl;\n\t\t// add each one\n\t\tObject.keys(options.urls).forEach(name => {\n\t\t\tthis._loadingCount++;\n\t\t\tconst url = options.urls[name];\n\t\t\tthis.add(name, url, this._bufferLoaded.bind(this, options.onload));\n\t\t});\n\n\t}\n\n\tstatic getDefaults(): ToneAudioBuffersOptions {\n\t\treturn {\n\t\t\tbaseUrl: \"\",\n\t\t\tonerror: noOp,\n\t\t\tonload: noOp,\n\t\t\turls: {},\n\t\t};\n\t}\n\n\t/**\n\t * True if the buffers object has a buffer by that name.\n\t * @param  name  The key or index of the buffer.\n\t */\n\thas(name: string | number): boolean {\n\t\treturn this._buffers.has(name.toString());\n\t}\n\n\t/**\n\t * Get a buffer by name. If an array was loaded,\n\t * then use the array index.\n\t * @param  name  The key or index of the buffer.\n\t */\n\tget(name: string | number): ToneAudioBuffer {\n\t\tthis.assert(this.has(name), `ToneAudioBuffers has no buffer named: ${name}`);\n\t\treturn this._buffers.get(name.toString()) as ToneAudioBuffer;\n\t}\n\n\t/**\n\t * A buffer was loaded. decrement the counter.\n\t */\n\tprivate _bufferLoaded(callback: () => void): void {\n\t\tthis._loadingCount--;\n\t\tif (this._loadingCount === 0 && callback) {\n\t\t\tcallback();\n\t\t}\n\t}\n\n\t/**\n\t * If the buffers are loaded or not\n\t */\n\tget loaded(): boolean {\n\t\treturn Array.from(this._buffers).every(([_, buffer]) => buffer.loaded);\n\t}\n\n\t/**\n\t * Add a buffer by name and url to the Buffers\n\t * @param  name      A unique name to give the buffer\n\t * @param  url  Either the url of the bufer, or a buffer which will be added with the given name.\n\t * @param  callback  The callback to invoke when the url is loaded.\n\t */\n\tadd(\n\t\tname: string | number,\n\t\turl: string | AudioBuffer | ToneAudioBuffer,\n\t\tcallback: () => void = noOp,\n\t): this {\n\t\tif (isString(url)) {\n\t\t\tthis._buffers.set(name.toString(), new ToneAudioBuffer(this.baseUrl + url, callback));\n\t\t} else {\n\t\t\tthis._buffers.set(name.toString(), new ToneAudioBuffer(url, callback));\n\t\t}\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._buffers.forEach(buffer => buffer.dispose());\n\t\tthis._buffers.clear();\n\t\treturn this;\n\t}\n}\n","import { Param } from \"../context/Param\";\nimport { Time } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"./ToneAudioNode\";\n\nexport interface DelayOptions extends ToneAudioNodeOptions {\n\tdelayTime: Time;\n\tmaxDelay: Time;\n}\n\n/**\n * Wrapper around Web Audio's native [DelayNode](http://webaudio.github.io/web-audio-api/#the-delaynode-interface).\n * @category Core\n */\nexport class Delay extends ToneAudioNode<DelayOptions> {\n\n\treadonly name: string = \"Delay\";\n\n\t/**\n\t * The maximum delay time. This cannot be changed after\n\t * the value is passed into the constructor.\n\t */\n\treadonly maxDelay: Time;\n\n\t/**\n\t * The amount of time the incoming signal is delayed.\n\t */\n\treadonly delayTime: Param<Time>;\n\n\t/**\n\t * Private reference to the internal DelayNode\n\t */\n\tprivate _delayNode: DelayNode;\n\treadonly input: DelayNode;\n\treadonly output: DelayNode;\n\n\t/**\n\t * @param delayTime The delay applied to the incoming signal.\n\t * @param maxDelay The maximum delay time.\n\t */\n\tconstructor(delayTime?: Time, maxDelay?: Time);\n\tconstructor(options?: Partial<DelayOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Delay.getDefaults(), arguments, [\"delayTime\", \"maxDelay\"]));\n\n\t\tconst options = optionsFromArguments(Delay.getDefaults(), arguments, [\"delayTime\", \"maxDelay\"]);\n\n\t\tconst maxDelayInSeconds = this.toSeconds(options.maxDelay);\n\t\tthis.maxDelay = Math.max(maxDelayInSeconds, this.toSeconds(options.delayTime));\n\n\t\tthis._delayNode = this.input = this.output = this.context.createDelay(maxDelayInSeconds);\n\n\t\tthis.delayTime = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._delayNode.delayTime,\n\t\t\tunits: \"time\",\n\t\t\tvalue: options.delayTime,\n\t\t});\n\n\t\treadOnly(this, \"delayTime\");\n\t}\n\n\tstatic getDefaults(): DelayOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tdelayTime: 0,\n\t\t\tmaxDelay: 1,\n\t\t});\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._delayNode.disconnect();\n\t\tthis.delayTime.dispose();\n\t\treturn this;\n\t}\n}\n","import { Seconds } from \"../type/Units\";\nimport { Timeline, TimelineEvent } from \"./Timeline\";\n\nexport type BasicPlaybackState = \"started\" | \"stopped\";\nexport type PlaybackState = BasicPlaybackState | \"paused\";\n\nexport interface StateTimelineEvent extends TimelineEvent {\n\tstate: PlaybackState;\n}\n\n/**\n * A Timeline State. Provides the methods: `setStateAtTime(\"state\", time)` and `getValueAtTime(time)`\n * @param initial The initial state of the StateTimeline.  Defaults to `undefined`\n */\nexport class StateTimeline<AdditionalOptions extends {} = {}> extends Timeline<StateTimelineEvent & AdditionalOptions> {\n\n\treadonly name: string = \"StateTimeline\";\n\n\t/**\n\t * The initial state\n\t */\n\tprivate _initial: PlaybackState;\n\n\tconstructor(initial: PlaybackState = \"stopped\") {\n\t\tsuper();\n\t\tthis._initial = initial;\n\t}\n\n\t/**\n\t * Returns the scheduled state scheduled before or at\n\t * the given time.\n\t * @param  time  The time to query.\n\t * @return  The name of the state input in setStateAtTime.\n\t */\n\tgetValueAtTime(time: Seconds): PlaybackState {\n\t\tconst event = this.get(time);\n\t\tif (event !== null) {\n\t\t\treturn event.state;\n\t\t} else {\n\t\t\treturn this._initial;\n\t\t}\n\t}\n\n\t/**\n\t * Add a state to the timeline.\n\t * @param  state The name of the state to set.\n\t * @param  time  The time to query.\n\t * @param options Any additional options that are needed in the timeline.\n\t */\n\tsetStateAtTime(state: PlaybackState, time: Seconds, options?: AdditionalOptions): this {\n\t\t// all state changes need to be >= the previous state time\n\t\t// TODO throw error if time < the previous event time\n\t\tthis.add(Object.assign({}, options, {\n\t\t\tstate,\n\t\t\ttime,\n\t\t}));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Return the event before the time with the given state\n\t * @param  state The state to look for\n\t * @param  time  When to check before\n\t * @return  The event with the given state before the time\n\t */\n\tgetLastState(state: PlaybackState, time: number): StateTimelineEvent & AdditionalOptions | undefined {\n\t\t// time = this.toSeconds(time);\n\t\tconst index = this._search(time);\n\t\tfor (let i = index; i >= 0; i--) {\n\t\t\tconst event = this._timeline[i];\n\t\t\tif (event.state === state) {\n\t\t\t\treturn event;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Return the event after the time with the given state\n\t * @param  state The state to look for\n\t * @param  time  When to check from\n\t * @return  The event with the given state after the time\n\t */\n\tgetNextState(state: PlaybackState, time: number): StateTimelineEvent & AdditionalOptions | undefined {\n\t\t// time = this.toSeconds(time);\n\t\tconst index = this._search(time);\n\t\tif (index !== -1) {\n\t\t\tfor (let i = index; i < this._timeline.length; i++) {\n\t\t\t\tconst event = this._timeline[i];\n\t\t\t\tif (event.state === state) {\n\t\t\t\t\treturn event;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","import { Gain } from \"../core/context/Gain\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { GainFactor, Seconds, Time } from \"../core/type/Units\";\nimport { noOp } from \"../core/util/Interface\";\nimport { BasicPlaybackState } from \"../core/util/StateTimeline\";\n\nexport type OneShotSourceCurve = \"linear\" | \"exponential\";\n\ntype onEndedCallback = (source: OneShotSource<any>) => void;\n\nexport interface OneShotSourceOptions extends ToneAudioNodeOptions {\n\tonended: onEndedCallback;\n\tfadeIn: Time;\n\tfadeOut: Time;\n\tcurve: OneShotSourceCurve;\n}\n\n/**\n * Base class for fire-and-forget nodes\n */\nexport abstract class OneShotSource<Options extends ToneAudioNodeOptions> extends ToneAudioNode<Options> {\n\n\t/**\n\t * The callback to invoke after the\n\t * source is done playing.\n\t */\n\tonended: onEndedCallback = noOp;\n\n\t/**\n\t * Sources do not have input nodes\n\t */\n\tinput: undefined;\n\n\t/**\n\t * The start time\n\t */\n\tprotected _startTime: number = -1;\n\n\t/**\n\t * The stop time\n\t */\n\tprotected _stopTime: number = -1;\n\n\t/**\n\t * The id of the timeout\n\t */\n\tprivate _timeout: number = -1;\n\n\t/**\n\t * The public output node\n\t */\n\toutput: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\n\t/**\n\t * The output gain node.\n\t */\n\tprotected _gainNode = this.output;\n\n\t/**\n\t * The fadeIn time of the amplitude envelope.\n\t */\n\tprotected _fadeIn: Time;\n\n\t/**\n\t * The fadeOut time of the amplitude envelope.\n\t */\n\tprotected _fadeOut: Time;\n\n\t/**\n\t * The curve applied to the fades, either \"linear\" or \"exponential\"\n\t */\n\tprotected _curve: OneShotSourceCurve;\n\n\tconstructor(options: OneShotSourceOptions) {\n\t\tsuper(options);\n\n\t\tthis._fadeIn = options.fadeIn;\n\t\tthis._fadeOut = options.fadeOut;\n\t\tthis._curve = options.curve;\n\t\tthis.onended = options.onended;\n\t}\n\n\tstatic getDefaults(): OneShotSourceOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tcurve: \"linear\" as OneShotSourceCurve,\n\t\t\tfadeIn: 0,\n\t\t\tfadeOut: 0,\n\t\t\tonended: noOp,\n\t\t});\n\t}\n\n\t/**\n\t * Stop the source node\n\t */\n\tprotected abstract _stopSource(time: Seconds): void;\n\n\t/**\n\t * Start the source node at the given time\n\t * @param  time When to start the node\n\t */\n\tprotected abstract start(time?: Time): this;\n\t/**\n\t * Start the source at the given time\n\t * @param  time When to start the source\n\t */\n\tprotected _startGain(time: Seconds, gain: GainFactor = 1): this {\n\t\tthis.assert(this._startTime === -1, \"Source cannot be started more than once\");\n\t\t// apply a fade in envelope\n\t\tconst fadeInTime = this.toSeconds(this._fadeIn);\n\n\t\t// record the start time\n\t\tthis._startTime = time + fadeInTime;\n\t\tthis._startTime = Math.max(this._startTime, this.context.currentTime);\n\n\t\t// schedule the envelope\n\t\tif (fadeInTime > 0) {\n\t\t\tthis._gainNode.gain.setValueAtTime(0, time);\n\t\t\tif (this._curve === \"linear\") {\n\t\t\t\tthis._gainNode.gain.linearRampToValueAtTime(gain, time + fadeInTime);\n\t\t\t} else {\n\t\t\t\tthis._gainNode.gain.exponentialApproachValueAtTime(gain, time, fadeInTime);\n\t\t\t}\n\t\t} else {\n\t\t\tthis._gainNode.gain.setValueAtTime(gain, time);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the source node at the given time.\n\t * @param time When to stop the source\n\t */\n\tstop(time?: Time): this {\n\t\tthis.log(\"stop\", time);\n\t\tthis._stopGain(this.toSeconds(time));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the source at the given time\n\t * @param  time When to stop the source\n\t */\n\tprotected _stopGain(time: Seconds): this {\n\t\tthis.assert(this._startTime !== -1, \"'start' must be called before 'stop'\");\n\t\t// cancel the previous stop\n\t\tthis.cancelStop();\n\n\t\t// the fadeOut time\n\t\tconst fadeOutTime = this.toSeconds(this._fadeOut);\n\n\t\t// schedule the stop callback\n\t\tthis._stopTime = this.toSeconds(time) + fadeOutTime;\n\t\tthis._stopTime = Math.max(this._stopTime, this.context.currentTime);\n\t\tif (fadeOutTime > 0) {\n\t\t\t// start the fade out curve at the given time\n\t\t\tif (this._curve === \"linear\") {\n\t\t\t\tthis._gainNode.gain.linearRampTo(0, fadeOutTime, time);\n\t\t\t} else {\n\t\t\t\tthis._gainNode.gain.targetRampTo(0, fadeOutTime, time);\n\t\t\t}\n\t\t} else {\n\t\t\t// stop any ongoing ramps, and set the value to 0\n\t\t\tthis._gainNode.gain.cancelAndHoldAtTime(time);\n\t\t\tthis._gainNode.gain.setValueAtTime(0, time);\n\t\t}\n\t\tthis.context.clearTimeout(this._timeout);\n\t\tthis._timeout = this.context.setTimeout(() => {\n\t\t\t// allow additional time for the exponential curve to fully decay\n\t\t\tconst additionalTail = this._curve === \"exponential\" ? fadeOutTime * 2 : 0;\n\t\t\tthis._stopSource(this.now() + additionalTail);\n\t\t\tthis._onended();\n\t\t}, this._stopTime - this.context.now());\n\t\treturn this;\n\t}\n\n\t/**\n\t * Invoke the onended callback\n\t */\n\tprotected _onended(): void {\n\t\tif (this.onended !== noOp) {\n\t\t\tthis.onended(this);\n\t\t\t// overwrite onended to make sure it only is called once\n\t\t\tthis.onended = noOp;\n\t\t\t// dispose when it's ended to free up for garbage collection\n\t\t\tsetTimeout(() => this.dispose(), 1000);\n\t\t}\n\t}\n\n\t/**\n\t * Get the playback state at the given time\n\t */\n\tgetStateAtTime = function(time: Time): BasicPlaybackState {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._startTime !== -1 && computedTime >= this._startTime &&\n\t\t\t(this._stopTime === -1 || computedTime <= this._stopTime)) {\n\t\t\treturn \"started\";\n\t\t} else {\n\t\t\treturn \"stopped\";\n\t\t}\n\t};\n\n\t/**\n\t * Get the playback state at the current time\n\t */\n\tget state(): BasicPlaybackState {\n\t\treturn this.getStateAtTime(this.now());\n\t}\n\n\t/**\n\t * Cancel a scheduled stop event\n\t */\n\tcancelStop(): this {\n\t\tthis.log(\"cancelStop\");\n\t\tthis.assert(this._startTime !== -1, \"Source is not started\");\n\t\t// cancel the stop envelope\n\t\tthis._gainNode.gain.cancelScheduledValues(this._startTime + this.sampleTime);\n\t\tthis.context.clearTimeout(this._timeout);\n\t\tthis._stopTime = -1;\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._gainNode.disconnect();\n\t\treturn this;\n\t}\n}\n","import { connect } from \"../core/Connect\";\nimport { Param } from \"../core/context/Param\";\nimport { Seconds, Time, Unit, UnitName } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { OneShotSource, OneShotSourceOptions } from \"../source/OneShotSource\";\n\nexport interface ToneConstantSourceOptions<Type> extends OneShotSourceOptions {\n\tconvert: boolean;\n\toffset: Type;\n\tunits: UnitName;\n}\n\n/**\n * Wrapper around the native fire-and-forget ConstantSource.\n * Adds the ability to reschedule the stop method.\n * @category Signal\n */\nexport class ToneConstantSource<Type extends Unit = number> extends OneShotSource<ToneConstantSourceOptions<Type>> {\n\n\treadonly name: string = \"ToneConstantSource\";\n\n\t/**\n\t * The signal generator\n\t */\n\tprivate _source = this.context.createConstantSource();\n\n\t/**\n\t * The offset of the signal generator\n\t */\n\treadonly offset: Param<Type>;\n\n\t/**\n\t * @param  offset   The offset value\n\t */\n\tconstructor(offset: Type);\n\tconstructor(options?: Partial<ToneConstantSourceOptions<Type>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(ToneConstantSource.getDefaults(), arguments, [\"offset\"]));\n\t\tconst options = optionsFromArguments(ToneConstantSource.getDefaults(), arguments, [\"offset\"]);\n\n\t\tconnect(this._source, this._gainNode);\n\n\t\tthis.offset = new Param({\n\t\t\tcontext: this.context,\n\t\t\tconvert: options.convert,\n\t\t\tparam: this._source.offset,\n\t\t\tunits: options.units,\n\t\t\tvalue: options.offset,\n\t\t});\n\t}\n\n\tstatic getDefaults(): ToneConstantSourceOptions<any> {\n\t\treturn Object.assign(OneShotSource.getDefaults(), {\n\t\t\tconvert: true,\n\t\t\toffset: 1,\n\t\t\tunits: \"number\" as UnitName,\n\t\t});\n\t}\n\n\t/**\n\t * Start the source node at the given time\n\t * @param  time When to start the source\n\t */\n\tstart(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis.log(\"start\", computedTime);\n\t\tthis._startGain(computedTime);\n\t\tthis._source.start(computedTime);\n\t\treturn this;\n\t}\n\n\tprotected _stopSource(time?: Seconds): void {\n\t\tthis._source.stop(time);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (this.state === \"started\") {\n\t\t\tthis.stop();\n\t\t}\n\t\tthis._source.disconnect();\n\t\tthis.offset.dispose();\n\t\treturn this;\n\t}\n}\n","import { AbstractParam } from \"../core/context/AbstractParam\";\nimport { Param } from \"../core/context/Param\";\nimport { InputNode, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { connect } from \"../core/context/ToneAudioNode\";\nimport { Time, Unit, UnitName } from \"../core/type/Units\";\nimport { isAudioParam } from \"../core/util/AdvancedTypeCheck\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { ToneConstantSource } from \"./ToneConstantSource\";\n\nexport interface SignalOptions<Type> extends ToneAudioNodeOptions {\n\tvalue: Type;\n\tunits: UnitName;\n\tconvert: boolean;\n}\n\n/**\n * A signal is an audio-rate value. Tone.Signal is a core component of the library.\n * Unlike a number, Signals can be scheduled with sample-level accuracy. Tone.Signal\n * has all of the methods available to native Web Audio\n * [AudioParam](http://webaudio.github.io/web-audio-api/#the-audioparam-interface)\n * as well as additional conveniences. Read more about working with signals\n * [here](https://github.com/Tonejs/Tone.js/wiki/Signals).\n *\n * @example\n * const signal = new Tone.Signal(10);\n * @category Signal\n */\nexport class Signal<Type extends Unit = number> extends ToneAudioNode<SignalOptions<any>>\n\timplements AbstractParam<Type> {\n\n\treadonly name: string = \"Signal\";\n\n\t/**\n\t * Indicates if the value should be overridden on connection.\n\t */\n\treadonly override: boolean = true;\n\n\t/**\n\t * The constant source node which generates the signal\n\t */\n\tprotected _constantSource: ToneConstantSource<Type>;\n\treadonly output: OutputNode;\n\tprotected _param: Param<Type>;\n\treadonly input: InputNode;\n\n\t/**\n\t * @param value Initial value of the signal\n\t * @param units The unit name, e.g. \"frequency\"\n\t */\n\tconstructor(value?: Type, units?: UnitName);\n\tconstructor(options?: Partial<SignalOptions<Type>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]));\n\n\t\tconst options = optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]) as SignalOptions<Type>;\n\n\t\tthis.output = this._constantSource = new ToneConstantSource({\n\t\t\tcontext: this.context,\n\t\t\tconvert: options.convert,\n\t\t\toffset: options.value,\n\t\t\tunits: options.units,\n\t\t});\n\t\tthis._constantSource.start(0);\n\t\tthis.input = this._param = this._constantSource.offset;\n\t}\n\n\tstatic getDefaults(): SignalOptions<any> {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tconvert: true,\n\t\t\tunits: \"number\" as UnitName,\n\t\t\tvalue: 0,\n\t\t});\n\t}\n\n\tconnect(destination: InputNode, outputNum: number = 0, inputNum: number = 0): this {\n\t\t// start it only when connected to something\n\t\tconnectSignal(this, destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._param.dispose();\n\t\tthis._constantSource.dispose();\n\t\treturn this;\n\t}\n\n\t//-------------------------------------\n\t// ABSTRACT PARAM INTERFACE\n\t// just a proxy for the ConstantSourceNode's offset AudioParam\n\t// all docs are generated from AbstractParam.ts\n\t//-------------------------------------\n\n\tsetValueAtTime(value: Type, time: Time): this {\n\t\tthis._param.setValueAtTime(value, time);\n\t\treturn this;\n\t}\n\tgetValueAtTime(time: Time): Type {\n\t\treturn this._param.getValueAtTime(time);\n\t}\n\tsetRampPoint(time: Time): this {\n\t\tthis._param.setRampPoint(time);\n\t\treturn this;\n\t}\n\tlinearRampToValueAtTime(value: Type, time: Time): this {\n\t\tthis._param.linearRampToValueAtTime(value, time);\n\t\treturn this;\n\t}\n\texponentialRampToValueAtTime(value: Type, time: Time): this {\n\t\tthis._param.exponentialRampToValueAtTime(value, time);\n\t\treturn this;\n\t}\n\texponentialRampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tthis._param.exponentialRampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\tlinearRampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tthis._param.linearRampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\ttargetRampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tthis._param.targetRampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\texponentialApproachValueAtTime(value: Type, time: Time, rampTime: Time): this {\n\t\tthis._param.exponentialApproachValueAtTime(value, time, rampTime);\n\t\treturn this;\n\t}\n\tsetTargetAtTime(value: Type, startTime: Time, timeConstant: number): this {\n\t\tthis._param.setTargetAtTime(value, startTime, timeConstant);\n\t\treturn this;\n\t}\n\tsetValueCurveAtTime(values: Type[], startTime: Time, duration: Time, scaling?: number): this {\n\t\tthis._param.setValueCurveAtTime(values, startTime, duration, scaling);\n\t\treturn this;\n\t}\n\tcancelScheduledValues(time: Time): this {\n\t\tthis._param.cancelScheduledValues(time);\n\t\treturn this;\n\t}\n\tcancelAndHoldAtTime(time: Time): this {\n\t\tthis._param.cancelAndHoldAtTime(time);\n\t\treturn this;\n\t}\n\trampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tthis._param.rampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\n\tget value(): Type {\n\t\treturn this._param.value;\n\t}\n\tset value(value: Type) {\n\t\tthis._param.value = value;\n\t}\n\n\tget convert(): boolean {\n\t\treturn this._param.convert;\n\t}\n\tset convert(convert: boolean) {\n\t\tthis._param.convert = convert;\n\t}\n\n\tget units(): UnitName {\n\t\treturn this._param.units;\n\t}\n\n\tget overridden(): boolean {\n\t\treturn this._param.overridden;\n\t}\n\tset overridden(overridden: boolean) {\n\t\tthis._param.overridden = overridden;\n\t}\n\n\tget maxValue(): number {\n\t\treturn this._param.maxValue;\n\t}\n\tget minValue(): number {\n\t\treturn this._param.minValue;\n\t}\n\n\t/**\n\t * See [[Param.apply]].\n\t */\n\tapply(param: Param | AudioParam): this {\n\t\tthis._param.apply(param);\n\t\treturn this;\n\t}\n}\n\n/**\n * When connecting from a signal, it's necessary to zero out the node destination\n * node if that node is also a signal. If the destination is not 0, then the values\n * will be summed. This method insures that the output of the destination signal will\n * be the same as the source signal, making the destination signal a pass through node.\n * @param signal The output signal to connect from\n * @param destination the destination to connect to\n * @param outputNum the optional output number\n * @param inputNum the input number\n */\nexport function connectSignal(signal: OutputNode, destination: InputNode, outputNum?: number, inputNum?: number): void {\n\tif (destination instanceof Param || isAudioParam(destination) ||\n\t\t(destination instanceof Signal && destination.override)) {\n\t\t// cancel changes\n\t\tdestination.cancelScheduledValues(0);\n\t\t// reset the value\n\t\tdestination.setValueAtTime(0, 0);\n\t\t// mark the value as overridden\n\t\tif (destination instanceof Signal) {\n\t\t\tdestination.overridden = true;\n\t\t}\n\t}\n\tconnect(signal, destination, outputNum, inputNum);\n}\n","import { AutomationEvent, Param, ParamOptions } from \"../context/Param\";\nimport { BPM, Hertz, Seconds, Ticks, Time } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isUndef } from \"../util/TypeCheck\";\n\ntype TickAutomationEvent = AutomationEvent & {\n\tticks: number;\n};\n\ninterface TickParamOptions<Type> extends ParamOptions<Type> {\n\tmultiplier: number;\n}\n\n/**\n * A Param class just for computing ticks. Similar to the [[Param]] class,\n * but offers conversion to BPM values as well as ability to compute tick\n * duration and elapsed ticks\n */\nexport class TickParam<Type extends Hertz | BPM> extends Param<Type> {\n\n\treadonly name: string = \"TickParam\";\n\n\t/**\n\t * The timeline which tracks all of the automations.\n\t */\n\tprotected _events: Timeline<TickAutomationEvent> = new Timeline(Infinity);\n\n\t/**\n\t * The internal holder for the multiplier value\n\t */\n\tprivate _multiplier: number = 1;\n\n\t/**\n\t * @param param The AudioParam to wrap\n\t * @param units The unit name\n\t * @param convert Whether or not to convert the value to the target units\n\t */\n\t/**\n\t * @param value The initial value of the signal\n\t */\n\tconstructor(value?: number);\n\tconstructor(options: Partial<TickParamOptions<Type>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(TickParam.getDefaults(), arguments, [\"value\"]));\n\t\tconst options = optionsFromArguments(TickParam.getDefaults(), arguments, [\"value\"]);\n\n\t\t// set the multiplier\n\t\tthis._multiplier = options.multiplier;\n\n\t\t// clear the ticks from the beginning\n\t\tthis._events.cancel(0);\n\t\t// set an initial event\n\t\tthis._events.add({\n\t\t\tticks: 0,\n\t\t\ttime: 0,\n\t\t\ttype: \"setValueAtTime\",\n\t\t\tvalue: this._fromType(options.value),\n\t\t});\n\t\tthis.setValueAtTime(options.value, 0);\n\t}\n\n\tstatic getDefaults(): TickParamOptions<any> {\n\t\treturn Object.assign(Param.getDefaults(), {\n\t\t\tmultiplier: 1,\n\t\t\tunits: \"hertz\",\n\t\t\tvalue: 1,\n\t\t});\n\t}\n\n\tsetTargetAtTime(value: Type, time: Time, constant: number): this {\n\t\t// approximate it with multiple linear ramps\n\t\ttime = this.toSeconds(time);\n\t\tthis.setRampPoint(time);\n\t\tconst computedValue = this._fromType(value);\n\n\t\t// start from previously scheduled value\n\t\tconst prevEvent = this._events.get(time) as TickAutomationEvent;\n\t\tconst segments = Math.round(Math.max(1 / constant, 1));\n\t\tfor (let i = 0; i <= segments; i++) {\n\t\t\tconst segTime = constant * i + time;\n\t\t\tconst rampVal = this._exponentialApproach(prevEvent.time, prevEvent.value, computedValue, constant, segTime);\n\t\t\tthis.linearRampToValueAtTime(this._toType(rampVal), segTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\tsetValueAtTime(value: Type, time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tsuper.setValueAtTime(value, time);\n\t\tconst event = this._events.get(computedTime) as TickAutomationEvent;\n\t\tconst previousEvent = this._events.previousEvent(event);\n\t\tconst ticksUntilTime = this._getTicksUntilEvent(previousEvent, computedTime);\n\t\tevent.ticks = Math.max(ticksUntilTime, 0);\n\t\treturn this;\n\t}\n\n\tlinearRampToValueAtTime(value: Type, time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tsuper.linearRampToValueAtTime(value, time);\n\t\tconst event = this._events.get(computedTime) as TickAutomationEvent;\n\t\tconst previousEvent = this._events.previousEvent(event);\n\t\tconst ticksUntilTime = this._getTicksUntilEvent(previousEvent, computedTime);\n\t\tevent.ticks = Math.max(ticksUntilTime, 0);\n\t\treturn this;\n\t}\n\n\texponentialRampToValueAtTime(value: Type, time: Time): this {\n\t\t// aproximate it with multiple linear ramps\n\t\ttime = this.toSeconds(time);\n\t\tconst computedVal = this._fromType(value);\n\n\t\t// start from previously scheduled value\n\t\tconst prevEvent = this._events.get(time) as TickAutomationEvent;\n\t\t// approx 10 segments per second\n\t\tconst segments = Math.round(Math.max((time - prevEvent.time) * 10, 1));\n\t\tconst segmentDur = ((time - prevEvent.time) / segments);\n\t\tfor (let i = 0; i <= segments; i++) {\n\t\t\tconst segTime = segmentDur * i + prevEvent.time;\n\t\t\tconst rampVal = this._exponentialInterpolate(prevEvent.time, prevEvent.value, time, computedVal, segTime);\n\t\t\tthis.linearRampToValueAtTime(this._toType(rampVal), segTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the tick value at the time. Takes into account\n\t * any automation curves scheduled on the signal.\n\t * @param  time The time to get the tick count at\n\t * @return The number of ticks which have elapsed at the time given any automations.\n\t */\n\tprivate _getTicksUntilEvent(event: TickAutomationEvent | null, time: number): Ticks {\n\t\tif (event === null) {\n\t\t\tevent = {\n\t\t\t\tticks: 0,\n\t\t\t\ttime: 0,\n\t\t\t\ttype: \"setValueAtTime\",\n\t\t\t\tvalue: 0,\n\t\t\t};\n\t\t} else if (isUndef(event.ticks)) {\n\t\t\tconst previousEvent = this._events.previousEvent(event);\n\t\t\tevent.ticks = this._getTicksUntilEvent(previousEvent, event.time);\n\t\t}\n\t\tconst val0 = this._fromType(this.getValueAtTime(event.time));\n\t\tlet val1 = this._fromType(this.getValueAtTime(time));\n\t\t// if it's right on the line, take the previous value\n\t\tconst onTheLineEvent = this._events.get(time);\n\t\tif (onTheLineEvent && onTheLineEvent.time === time && onTheLineEvent.type === \"setValueAtTime\") {\n\t\t\tval1 = this._fromType(this.getValueAtTime(time - this.sampleTime));\n\t\t}\n\t\treturn 0.5 * (time - event.time) * (val0 + val1) + event.ticks;\n\t}\n\n\t/**\n\t * Returns the tick value at the time. Takes into account\n\t * any automation curves scheduled on the signal.\n\t * @param  time The time to get the tick count at\n\t * @return The number of ticks which have elapsed at the time given any automations.\n\t */\n\tgetTicksAtTime(time: Time): Ticks {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst event = this._events.get(computedTime);\n\t\treturn Math.max(this._getTicksUntilEvent(event, computedTime), 0);\n\t}\n\n\t/**\n\t * Return the elapsed time of the number of ticks from the given time\n\t * @param ticks The number of ticks to calculate\n\t * @param  time The time to get the next tick from\n\t * @return The duration of the number of ticks from the given time in seconds\n\t */\n\tgetDurationOfTicks(ticks: Ticks, time: Time): Seconds {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst currentTick = this.getTicksAtTime(time);\n\t\treturn this.getTimeOfTick(currentTick + ticks) - computedTime;\n\t}\n\n\t/**\n\t * Given a tick, returns the time that tick occurs at.\n\t * @return The time that the tick occurs.\n\t */\n\tgetTimeOfTick(tick: Ticks): Seconds {\n\t\tconst before = this._events.get(tick, \"ticks\");\n\t\tconst after = this._events.getAfter(tick, \"ticks\");\n\t\tif (before && before.ticks === tick) {\n\t\t\treturn before.time;\n\t\t} else if (before && after &&\n\t\t\tafter.type === \"linearRampToValueAtTime\" &&\n\t\t\tbefore.value !== after.value) {\n\t\t\tconst val0 = this._fromType(this.getValueAtTime(before.time));\n\t\t\tconst val1 = this._fromType(this.getValueAtTime(after.time));\n\t\t\tconst delta = (val1 - val0) / (after.time - before.time);\n\t\t\tconst k = Math.sqrt(Math.pow(val0, 2) - 2 * delta * (before.ticks - tick));\n\t\t\tconst sol1 = (-val0 + k) / delta;\n\t\t\tconst sol2 = (-val0 - k) / delta;\n\t\t\treturn (sol1 > 0 ? sol1 : sol2) + before.time;\n\t\t} else if (before) {\n\t\t\tif (before.value === 0) {\n\t\t\t\treturn Infinity;\n\t\t\t} else {\n\t\t\t\treturn before.time + (tick - before.ticks) / before.value;\n\t\t\t}\n\t\t} else {\n\t\t\treturn tick / this._initialValue;\n\t\t}\n\t}\n\n\t/**\n\t * Convert some number of ticks their the duration in seconds accounting\n\t * for any automation curves starting at the given time.\n\t * @param  ticks The number of ticks to convert to seconds.\n\t * @param  when  When along the automation timeline to convert the ticks.\n\t * @return The duration in seconds of the ticks.\n\t */\n\tticksToTime(ticks: Ticks, when: Time): Seconds {\n\t\treturn this.getDurationOfTicks(ticks, when);\n\t}\n\n\t/**\n\t * The inverse of [[ticksToTime]]. Convert a duration in\n\t * seconds to the corresponding number of ticks accounting for any\n\t * automation curves starting at the given time.\n\t * @param  duration The time interval to convert to ticks.\n\t * @param  when When along the automation timeline to convert the ticks.\n\t * @return The duration in ticks.\n\t */\n\ttimeToTicks(duration: Time, when: Time): Ticks {\n\t\tconst computedTime = this.toSeconds(when);\n\t\tconst computedDuration = this.toSeconds(duration);\n\t\tconst startTicks = this.getTicksAtTime(computedTime);\n\t\tconst endTicks = this.getTicksAtTime(computedTime + computedDuration);\n\t\treturn endTicks - startTicks;\n\t}\n\n\t/**\n\t * Convert from the type when the unit value is BPM\n\t */\n\tprotected _fromType(val: Type): number {\n\t\tif (this.units === \"bpm\" && this.multiplier) {\n\t\t\treturn 1 / (60 / val / this.multiplier);\n\t\t} else {\n\t\t\treturn super._fromType(val);\n\t\t}\n\t}\n\n\t/**\n\t * Special case of type conversion where the units === \"bpm\"\n\t */\n\tprotected _toType(val: number): Type {\n\t\tif (this.units === \"bpm\" && this.multiplier) {\n\t\t\treturn (val / this.multiplier) * 60 as Type;\n\t\t} else {\n\t\t\treturn super._toType(val);\n\t\t}\n\t}\n\t/**\n\t * A multiplier on the bpm value. Useful for setting a PPQ relative to the base frequency value.\n\t */\n\tget multiplier(): number {\n\t\treturn this._multiplier;\n\t}\n\tset multiplier(m: number) {\n\t\t// get and reset the current value with the new multiplier\n\t\t// might be necessary to clear all the previous values\n\t\tconst currentVal = this.value;\n\t\tthis._multiplier = m;\n\t\tthis.value = currentVal;\n\t}\n}\n","import { Signal, SignalOptions } from \"../../signal/Signal\";\nimport { InputNode } from \"../context/ToneAudioNode\";\nimport { BPM, Hertz, Seconds, Ticks, Time } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { TickParam } from \"./TickParam\";\n\ninterface TickSignalOptions<T> extends SignalOptions<T> {\n\tvalue: T;\n\tmultiplier: number;\n}\n\n/**\n * TickSignal extends Tone.Signal, but adds the capability\n * to calculate the number of elapsed ticks. exponential and target curves\n * are approximated with multiple linear ramps.\n *\n * Thank you Bruno Dias, H. Sofia Pinto, and David M. Matos,\n * for your [WAC paper](https://smartech.gatech.edu/bitstream/handle/1853/54588/WAC2016-49.pdf)\n * describing integrating timing functions for tempo calculations.\n */\nexport class TickSignal<Type extends Hertz | BPM> extends Signal<Type> {\n\n\treadonly name: string = \"TickSignal\";\n\n\t/**\n\t * The param which controls the output signal value\n\t */\n\tprotected _param: TickParam<Type>;\n\treadonly input: InputNode;\n\n\t/**\n\t * @param value The initial value of the signal\n\t */\n\tconstructor(value?: Type);\n\tconstructor(options: Partial<TickSignalOptions<Type>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(TickSignal.getDefaults(), arguments, [\"value\"]));\n\t\tconst options = optionsFromArguments(TickSignal.getDefaults(), arguments, [\"value\"]);\n\n\t\tthis.input = this._param = new TickParam({\n\t\t\tcontext: this.context,\n\t\t\tconvert: options.convert,\n\t\t\tmultiplier: options.multiplier,\n\t\t\tparam: this._constantSource.offset,\n\t\t\tunits: options.units,\n\t\t\tvalue: options.value,\n\t\t});\n\t}\n\n\tstatic getDefaults(): TickSignalOptions<any> {\n\t\treturn Object.assign(Signal.getDefaults(), {\n\t\t\tmultiplier: 1,\n\t\t\tunits: \"hertz\",\n\t\t\tvalue: 1,\n\t\t});\n\t}\n\n\tticksToTime(ticks: Ticks, when: Time): Seconds {\n\t\treturn this._param.ticksToTime(ticks, when);\n\t}\n\n\ttimeToTicks(duration: Time, when: Time): Ticks {\n\t\treturn this._param.timeToTicks(duration, when);\n\t}\n\n\tgetTimeOfTick(tick: Ticks): Seconds {\n\t\treturn this._param.getTimeOfTick(tick);\n\t}\n\n\tgetDurationOfTicks(ticks: Ticks, time: Time): Seconds {\n\t\treturn this._param.getDurationOfTicks(ticks, time);\n\t}\n\n\tgetTicksAtTime(time: Time): Ticks {\n\t\treturn this._param.getTicksAtTime(time);\n\t}\n\n\t/**\n\t * A multiplier on the bpm value. Useful for setting a PPQ relative to the base frequency value.\n\t */\n\tget multiplier(): number {\n\t\treturn this._param.multiplier;\n\t}\n\tset multiplier(m: number) {\n\t\tthis._param.multiplier = m;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._param.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneWithContext, ToneWithContextOptions } from \"../context/ToneWithContext\";\nimport { BPM, Frequency, Hertz, Seconds, Ticks, Time } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { PlaybackState, StateTimeline, StateTimelineEvent } from \"../util/StateTimeline\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isDefined } from \"../util/TypeCheck\";\nimport { TickSignal } from \"./TickSignal\";\n\ninterface TickSourceOptions extends ToneWithContextOptions {\n\tfrequency: Frequency;\n\tunits: \"hertz\" | \"bpm\";\n}\n\ninterface TickSourceOffsetEvent {\n\tticks: number;\n\ttime: number;\n\tseconds: number;\n}\n\n/**\n * Uses [TickSignal](TickSignal) to track elapsed ticks with complex automation curves.\n */\nexport class TickSource<Type extends BPM | Hertz> extends ToneWithContext<TickSourceOptions> {\n\n\treadonly name: string = \"TickSource\";\n\n\t/**\n\t * The frequency the callback function should be invoked.\n\t */\n\treadonly frequency: TickSignal<Type>;\n\n\t/**\n\t * The state timeline\n\t */\n\tprivate _state: StateTimeline = new StateTimeline();\n\n\t/**\n\t * The offset values of the ticks\n\t */\n\tprivate _tickOffset: Timeline<TickSourceOffsetEvent> = new Timeline();\n\n\t/**\n\t * @param frequency The initial frequency that the signal ticks at\n\t */\n\tconstructor(frequency?: Frequency);\n\tconstructor(options?: Partial<TickSourceOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(TickSource.getDefaults(), arguments, [\"frequency\"]));\n\t\tconst options = optionsFromArguments(TickSource.getDefaults(), arguments, [\"frequency\"]);\n\n\t\tthis.frequency = new TickSignal<Type>({\n\t\t\tcontext: this.context,\n\t\t\tunits: options.units,\n\t\t\tvalue: options.frequency as Type,\n\t\t});\n\t\treadOnly(this, \"frequency\");\n\n\t\t// set the inital state\n\t\tthis._state.setStateAtTime(\"stopped\", 0);\n\t\t// add the first event\n\t\tthis.setTicksAtTime(0, 0);\n\t}\n\n\tstatic getDefaults(): TickSourceOptions {\n\t\treturn Object.assign({\n\t\t\tfrequency: 1,\n\t\t\tunits: \"hertz\" as \"hertz\",\n\t\t}, ToneWithContext.getDefaults());\n\t}\n\n\t/**\n\t * Returns the playback state of the source, either \"started\", \"stopped\" or \"paused\".\n\t */\n\tget state(): PlaybackState {\n\t\treturn this._state.getValueAtTime(this.now());\n\t}\n\n\t/**\n\t * Start the clock at the given time. Optionally pass in an offset\n\t * of where to start the tick counter from.\n\t * @param  time    The time the clock should start\n\t * @param offset The number of ticks to start the source at\n\t */\n\tstart(time: Time, offset?: Ticks): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(computedTime) !== \"started\") {\n\t\t\tthis._state.setStateAtTime(\"started\", computedTime);\n\t\t\tif (isDefined(offset)) {\n\t\t\t\tthis.setTicksAtTime(offset, computedTime);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the clock. Stopping the clock resets the tick counter to 0.\n\t * @param time The time when the clock should stop.\n\t */\n\tstop(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\t// cancel the previous stop\n\t\tif (this._state.getValueAtTime(computedTime) === \"stopped\") {\n\t\t\tconst event = this._state.get(computedTime);\n\t\t\tif (event && event.time > 0) {\n\t\t\t\tthis._tickOffset.cancel(event.time);\n\t\t\t\tthis._state.cancel(event.time);\n\t\t\t}\n\t\t}\n\t\tthis._state.cancel(computedTime);\n\t\tthis._state.setStateAtTime(\"stopped\", computedTime);\n\t\tthis.setTicksAtTime(0, computedTime);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Pause the clock. Pausing does not reset the tick counter.\n\t * @param time The time when the clock should stop.\n\t */\n\tpause(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(computedTime) === \"started\") {\n\t\t\tthis._state.setStateAtTime(\"paused\", computedTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Cancel start/stop/pause and setTickAtTime events scheduled after the given time.\n\t * @param time When to clear the events after\n\t */\n\tcancel(time: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis._state.cancel(time);\n\t\tthis._tickOffset.cancel(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the elapsed ticks at the given time\n\t * @param  time  When to get the tick value\n\t * @return The number of ticks\n\t */\n\tgetTicksAtTime(time?: Time): Ticks {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst stopEvent = this._state.getLastState(\"stopped\", computedTime);\n\t\tif (!stopEvent) {\n\t\t\treturn 0;\n\t\t}\n\t\t// this event allows forEachBetween to iterate until the current time\n\t\tconst tmpEvent: StateTimelineEvent = { state: \"paused\", time: computedTime };\n\t\tthis._state.add(tmpEvent);\n\n\t\t// keep track of the previous offset event\n\t\tlet lastState = stopEvent;\n\t\tlet elapsedTicks = 0;\n\n\t\t// iterate through all the events since the last stop\n\t\tthis._state.forEachBetween(stopEvent.time, computedTime + this.sampleTime, e => {\n\t\t\tlet periodStartTime = lastState.time;\n\t\t\t// if there is an offset event in this period use that\n\t\t\tconst offsetEvent = this._tickOffset.get(e.time);\n\t\t\tif (offsetEvent && offsetEvent.time >= lastState.time) {\n\t\t\t\telapsedTicks = offsetEvent.ticks;\n\t\t\t\tperiodStartTime = offsetEvent.time;\n\t\t\t}\n\t\t\tif (lastState.state === \"started\" && e.state !== \"started\") {\n\t\t\t\telapsedTicks += this.frequency.getTicksAtTime(e.time) - this.frequency.getTicksAtTime(periodStartTime);\n\t\t\t}\n\t\t\tlastState = e;\n\t\t});\n\n\t\t// remove the temporary event\n\t\tthis._state.remove(tmpEvent);\n\n\t\t// return the ticks\n\t\treturn elapsedTicks;\n\t}\n\n\t/**\n\t * The number of times the callback was invoked. Starts counting at 0\n\t * and increments after the callback was invoked. Returns -1 when stopped.\n\t */\n\tget ticks(): Ticks {\n\t\treturn this.getTicksAtTime(this.now());\n\t}\n\n\tset ticks(t: Ticks) {\n\t\tthis.setTicksAtTime(t, this.now());\n\t}\n\n\t/**\n\t * The time since ticks=0 that the TickSource has been running. Accounts\n\t * for tempo curves\n\t */\n\tget seconds(): Seconds {\n\t\treturn this.getSecondsAtTime(this.now());\n\t}\n\n\tset seconds(s: Seconds) {\n\t\tconst now = this.now();\n\t\tconst ticks = this.frequency.timeToTicks(s, now);\n\t\tthis.setTicksAtTime(ticks, now);\n\t}\n\n\t/**\n\t * Return the elapsed seconds at the given time.\n\t * @param  time  When to get the elapsed seconds\n\t * @return  The number of elapsed seconds\n\t */\n\tgetSecondsAtTime(time: Time): Seconds {\n\t\ttime = this.toSeconds(time);\n\t\tconst stopEvent = this._state.getLastState(\"stopped\", time);\n\t\tif (!stopEvent) {\n\t\t\treturn 0;\n\t\t}\n\t\t// this event allows forEachBetween to iterate until the current time\n\t\tconst tmpEvent: StateTimelineEvent = { state: \"paused\", time };\n\t\tthis._state.add(tmpEvent);\n\n\t\t// keep track of the previous offset event\n\t\tlet lastState = stopEvent;\n\t\tlet elapsedSeconds = 0;\n\n\t\t// iterate through all the events since the last stop\n\t\tthis._state.forEachBetween(stopEvent.time, time + this.sampleTime, e => {\n\t\t\tlet periodStartTime = lastState.time;\n\t\t\t// if there is an offset event in this period use that\n\t\t\tconst offsetEvent = this._tickOffset.get(e.time);\n\t\t\tif (offsetEvent && offsetEvent.time >= lastState.time) {\n\t\t\t\telapsedSeconds = offsetEvent.seconds;\n\t\t\t\tperiodStartTime = offsetEvent.time;\n\t\t\t}\n\t\t\tif (lastState.state === \"started\" && e.state !== \"started\") {\n\t\t\t\telapsedSeconds += e.time - periodStartTime;\n\t\t\t}\n\t\t\tlastState = e;\n\t\t});\n\n\t\t// remove the temporary event\n\t\tthis._state.remove(tmpEvent);\n\n\t\t// return the ticks\n\t\treturn elapsedSeconds;\n\t}\n\n\t/**\n\t * Set the clock's ticks at the given time.\n\t * @param  ticks The tick value to set\n\t * @param  time  When to set the tick value\n\t */\n\tsetTicksAtTime(ticks: Ticks, time: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis._tickOffset.cancel(time);\n\t\tthis._tickOffset.add({\n\t\t\tseconds: this.frequency.getDurationOfTicks(ticks, time),\n\t\t\tticks,\n\t\t\ttime,\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the scheduled state at the given time.\n\t * @param  time  The time to query.\n\t * @example\n\t * source.start(\"+0.1\");\n\t * source.getStateAtTime(\"+0.1\"); //returns \"started\"\n\t */\n\tgetStateAtTime(time: Time): PlaybackState {\n\t\ttime = this.toSeconds(time);\n\t\treturn this._state.getValueAtTime(time);\n\t}\n\n\t/**\n\t * Get the time of the given tick. The second argument\n\t * is when to test before. Since ticks can be set (with setTicksAtTime)\n\t * there may be multiple times for a given tick value.\n\t * @param  ticks The tick number.\n\t * @param  before When to measure the tick value from.\n\t * @return The time of the tick\n\t */\n\tgetTimeOfTick(tick: Ticks, before = this.now()): Seconds {\n\t\tconst offset = this._tickOffset.get(before) as TickSourceOffsetEvent;\n\t\tconst event = this._state.get(before) as StateTimelineEvent;\n\t\tconst startTime = Math.max(offset.time, event.time);\n\t\tconst absoluteTicks = this.frequency.getTicksAtTime(startTime) + tick - offset.ticks;\n\t\treturn this.frequency.getTimeOfTick(absoluteTicks);\n\t}\n\n\t/**\n\t * Invoke the callback event at all scheduled ticks between the\n\t * start time and the end time\n\t * @param  startTime  The beginning of the search range\n\t * @param  endTime    The end of the search range\n\t * @param  callback   The callback to invoke with each tick\n\t */\n\tforEachTickBetween(startTime: Time, endTime: Time, callback: (when: Seconds, ticks: Ticks) => void): this {\n\t\tconst computedStartTime = this.toSeconds(startTime);\n\t\tconst computedEndTime = this.toSeconds(endTime);\n\t\t// only iterate through the sections where it is \"started\"\n\t\tlet lastStateEvent = this._state.get(computedStartTime);\n\t\tthis._state.forEachBetween(computedStartTime, computedEndTime, event => {\n\t\t\tif (lastStateEvent && lastStateEvent.state === \"started\" && event.state !== \"started\") {\n\t\t\t\tthis.forEachTickBetween(Math.max(lastStateEvent.time, computedStartTime), event.time - this.sampleTime, callback);\n\t\t\t}\n\t\t\tlastStateEvent = event;\n\t\t});\n\n\t\tlet error = null;\n\n\t\tif (lastStateEvent && lastStateEvent.state === \"started\" && this._state) {\n\t\t\tconst maxStartTime = Math.max(lastStateEvent.time, computedStartTime);\n\t\t\t// figure out the difference between the frequency ticks and the\n\t\t\tconst startTicks = this.frequency.getTicksAtTime(maxStartTime);\n\t\t\tconst ticksAtStart = this.frequency.getTicksAtTime(lastStateEvent.time);\n\t\t\tconst diff = startTicks - ticksAtStart;\n\t\t\tlet offset = diff % 1;\n\t\t\tif (offset !== 0) {\n\t\t\t\toffset = 1 - offset;\n\t\t\t}\n\t\t\tlet nextTickTime = this.frequency.getTimeOfTick(startTicks + offset);\n\t\t\twhile (nextTickTime < computedEndTime && this._state) {\n\t\t\t\ttry {\n\t\t\t\t\tcallback(nextTickTime, Math.round(this.getTicksAtTime(nextTickTime)));\n\t\t\t\t} catch (e) {\n\t\t\t\t\terror = e;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (this._state) {\n\t\t\t\t\tnextTickTime += this.frequency.getDurationOfTicks(1, nextTickTime);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (error) {\n\t\t\tthrow error;\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._state.dispose();\n\t\tthis._tickOffset.dispose();\n\t\tthis.frequency.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneWithContext, ToneWithContextOptions } from \"../context/ToneWithContext\";\nimport { BPM, Frequency, Hertz, Seconds, Ticks, Time } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Emitter } from \"../util/Emitter\";\nimport { noOp, readOnly } from \"../util/Interface\";\nimport { PlaybackState, StateTimeline } from \"../util/StateTimeline\";\nimport { TickSignal } from \"./TickSignal\";\nimport { TickSource } from \"./TickSource\";\n\ntype ClockCallback = (time: Time, ticks?: Ticks) => void;\n\ninterface ClockOptions extends ToneWithContextOptions {\n\tfrequency: number;\n\tcallback: ClockCallback;\n\tunits: \"hertz\" | \"bpm\";\n}\n\ntype ClockEvent = \"start\" | \"stop\" | \"pause\";\n\n/**\n * A sample accurate clock which provides a callback at the given rate.\n * While the callback is not sample-accurate (it is still susceptible to\n * loose JS timing), the time passed in as the argument to the callback\n * is precise. For most applications, it is better to use Tone.Transport\n * instead of the Clock by itself since you can synchronize multiple callbacks.\n * @example\n * //the callback will be invoked approximately once a second\n * //and will print the time exactly once a second apart.\n * const clock = new Clock(time => {\n * \tconsole.log(time);\n * }, 1);\n * @category Core\n */\nexport class Clock<Type extends BPM | Hertz = Hertz>\n\textends ToneWithContext<ClockOptions> implements Emitter<ClockEvent> {\n\n\treadonly name: string = \"Clock\";\n\n\t/**\n\t * The callback function to invoke at the scheduled tick.\n\t */\n\tcallback: ClockCallback = noOp;\n\n\t/**\n\t * The tick counter\n\t */\n\tprivate _tickSource: TickSource<Type>;\n\n\t/**\n\t * The last time the loop callback was invoked\n\t */\n\tprivate _lastUpdate: number = 0;\n\n\t/**\n\t * Keep track of the playback state\n\t */\n\tprivate _state: StateTimeline = new StateTimeline(\"stopped\");\n\n\t/**\n\t * Context bound reference to the _loop method\n\t * This is necessary to remove the event in the end.\n\t */\n\tprivate _boundLoop: () => void = this._loop.bind(this);\n\n\t/**\n\t * The rate the callback function should be invoked.\n\t */\n\tfrequency: TickSignal<Type>;\n\n\t/**\n\t * @param callback The callback to be invoked with the time of the audio event\n\t * @param frequency The rate of the callback\n\t */\n\tconstructor(callback?: ClockCallback, frequency?: Frequency);\n\tconstructor(options: Partial<ClockOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Clock.getDefaults(), arguments, [\"callback\", \"frequency\"]));\n\t\tconst options = optionsFromArguments(Clock.getDefaults(), arguments, [\"callback\", \"frequency\"]);\n\n\t\tthis.callback = options.callback;\n\t\tthis._tickSource = new TickSource({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.frequency,\n\t\t\tunits: options.units,\n\t\t});\n\t\tthis._lastUpdate = 0;\n\t\tthis.frequency = this._tickSource.frequency;\n\t\treadOnly(this, \"frequency\");\n\n\t\t// add an initial state\n\t\tthis._state.setStateAtTime(\"stopped\", 0);\n\n\t\t// bind a callback to the worker thread\n\t\tthis.context.on(\"tick\", this._boundLoop);\n\t}\n\n\tstatic getDefaults(): ClockOptions {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tcallback: noOp as ClockCallback,\n\t\t\tfrequency: 1,\n\t\t\tunits: \"hertz\",\n\t\t}) as ClockOptions;\n\t}\n\n\t/**\n\t * Returns the playback state of the source, either \"started\", \"stopped\" or \"paused\".\n\t */\n\tget state(): PlaybackState {\n\t\treturn this._state.getValueAtTime(this.now());\n\t}\n\n\t/**\n\t * Start the clock at the given time. Optionally pass in an offset\n\t * of where to start the tick counter from.\n\t * @param  time    The time the clock should start\n\t * @param offset  Where the tick counter starts counting from.\n\t */\n\tstart(time?: Time, offset?: Ticks): this {\n\t\t// make sure the context is started\n\t\tthis.context.resume();\n\t\t// start the loop\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(computedTime) !== \"started\") {\n\t\t\tthis._state.setStateAtTime(\"started\", computedTime);\n\t\t\tthis._tickSource.start(computedTime, offset);\n\t\t\tif (computedTime < this._lastUpdate) {\n\t\t\t\tthis.emit(\"start\", computedTime, offset);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the clock. Stopping the clock resets the tick counter to 0.\n\t * @param time The time when the clock should stop.\n\t * @example\n\t * clock.stop();\n\t */\n\tstop(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._state.cancel(computedTime);\n\t\tthis._state.setStateAtTime(\"stopped\", computedTime);\n\t\tthis._tickSource.stop(computedTime);\n\t\tif (computedTime < this._lastUpdate) {\n\t\t\tthis.emit(\"stop\", computedTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Pause the clock. Pausing does not reset the tick counter.\n\t * @param time The time when the clock should stop.\n\t */\n\tpause(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(computedTime) === \"started\") {\n\t\t\tthis._state.setStateAtTime(\"paused\", computedTime);\n\t\t\tthis._tickSource.pause(computedTime);\n\t\t\tif (computedTime < this._lastUpdate) {\n\t\t\t\tthis.emit(\"pause\", computedTime);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * The number of times the callback was invoked. Starts counting at 0\n\t * and increments after the callback was invoked.\n\t */\n\tget ticks(): Ticks {\n\t\treturn Math.ceil(this.getTicksAtTime(this.now()));\n\t}\n\tset ticks(t: Ticks) {\n\t\tthis._tickSource.ticks = t;\n\t}\n\n\t/**\n\t * The time since ticks=0 that the Clock has been running. Accounts for tempo curves\n\t */\n\tget seconds(): Seconds {\n\t\treturn this._tickSource.seconds;\n\t}\n\tset seconds(s: Seconds) {\n\t\tthis._tickSource.seconds = s;\n\t}\n\n\t/**\n\t * Return the elapsed seconds at the given time.\n\t * @param  time  When to get the elapsed seconds\n\t * @return  The number of elapsed seconds\n\t */\n\tgetSecondsAtTime(time: Time): Seconds {\n\t\treturn this._tickSource.getSecondsAtTime(time);\n\t}\n\n\t/**\n\t * Set the clock's ticks at the given time.\n\t * @param  ticks The tick value to set\n\t * @param  time  When to set the tick value\n\t */\n\tsetTicksAtTime(ticks: Ticks, time: Time): this {\n\t\tthis._tickSource.setTicksAtTime(ticks, time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the clock's ticks at the given time.\n\t * @param  time  When to get the tick value\n\t * @return The tick value at the given time.\n\t */\n\tgetTicksAtTime(time?: Time): Ticks {\n\t\treturn this._tickSource.getTicksAtTime(time);\n\t}\n\n\t/**\n\t * Get the time of the next tick\n\t * @param  ticks The tick number.\n\t */\n\tnextTickTime(offset: Ticks, when: Time): Seconds {\n\t\tconst computedTime = this.toSeconds(when);\n\t\tconst currentTick = this.getTicksAtTime(computedTime);\n\t\treturn this._tickSource.getTimeOfTick(currentTick + offset, computedTime);\n\t}\n\n\t/**\n\t * The scheduling loop.\n\t */\n\tprivate _loop(): void {\n\n\t\tconst startTime = this._lastUpdate;\n\t\tconst endTime = this.now();\n\t\tthis._lastUpdate = endTime;\n\n\t\tif (startTime !== endTime) {\n\t\t\t// the state change events\n\t\t\tthis._state.forEachBetween(startTime, endTime, e => {\n\t\t\t\tswitch (e.state) {\n\t\t\t\t\tcase \"started\" :\n\t\t\t\t\t\tconst offset = this._tickSource.getTicksAtTime(e.time);\n\t\t\t\t\t\tthis.emit(\"start\", e.time, offset);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"stopped\" :\n\t\t\t\t\t\tif (e.time !== 0) {\n\t\t\t\t\t\t\tthis.emit(\"stop\", e.time);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"paused\" :\n\t\t\t\t\t\tthis.emit(\"pause\", e.time);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t});\n\t\t\t// the tick callbacks\n\t\t\tthis._tickSource.forEachTickBetween(startTime, endTime, (time, ticks) => {\n\t\t\t\tthis.callback(time, ticks);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Returns the scheduled state at the given time.\n\t * @param  time  The time to query.\n\t * @return  The name of the state input in setStateAtTime.\n\t * @example\n\t * clock.start(\"+0.1\");\n\t * clock.getStateAtTime(\"+0.1\"); //returns \"started\"\n\t */\n\tgetStateAtTime(time: Time): PlaybackState {\n\t\tconst computedTime = this.toSeconds(time);\n\t\treturn this._state.getValueAtTime(computedTime);\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.context.off(\"tick\", this._boundLoop);\n\t\tthis._tickSource.dispose();\n\t\tthis._state.dispose();\n\t\treturn this;\n\t}\n\n\t//-------------------------------------\n\t// EMITTER MIXIN TO SATISFY COMPILER\n\t//-------------------------------------\n\n\ton!: (event: ClockEvent, callback: (...args: any[]) => void) => this;\n\tonce!: (event: ClockEvent, callback: (...args: any[]) => void) => this;\n\toff!: (event: ClockEvent, callback?: ((...args: any[]) => void) | undefined) => this;\n\temit!: (event: any, ...args: any[]) => this;\n}\n\nEmitter.mixin(Clock);\n","import { getContext } from \"../Global\";\nimport { TimeBaseUnit, TimeValue } from \"./TimeBase\";\nimport { TransportTimeClass } from \"./TransportTime\";\nimport { Seconds, Ticks } from \"./Units\";\n\n/**\n * Ticks is a primitive type for encoding Time values.\n * Ticks can be constructed with or without the `new` keyword. Ticks can be passed\n * into the parameter of any method which takes time as an argument.\n * @example\n * const t = Ticks(\"4n\"); //a quarter note as ticks\n * @category Unit\n */\nexport class TicksClass extends TransportTimeClass<Ticks> {\n\n\treadonly name: string = \"Ticks\";\n\n\treadonly defaultUnits: TimeBaseUnit = \"i\";\n\n\t/**\n\t * Get the current time in the given units\n\t */\n\tprotected _now(): Ticks {\n\t\treturn this.context.transport.ticks;\n\t}\n\n\t/**\n\t * Return the value of the beats in the current units\n\t */\n\tprotected _beatsToUnits(beats: number): Ticks {\n\t\treturn this._getPPQ() * beats;\n\t}\n\n\t/**\n\t * Returns the value of a second in the current units\n\t */\n\tprotected _secondsToUnits(seconds: Seconds): Ticks {\n\t\treturn Math.floor(seconds / (60 / this._getBpm()) * this._getPPQ());\n\t}\n\n\t/**\n\t * Returns the value of a tick in the current time units\n\t */\n\tprotected _ticksToUnits(ticks: Ticks): Ticks {\n\t\treturn ticks;\n\t}\n\n\t/**\n\t * Return the time in ticks\n\t */\n\ttoTicks(): Ticks {\n\t\treturn this.valueOf() as Ticks;\n\t}\n\n\t/**\n\t * Return the time in seconds\n\t */\n\ttoSeconds(): Seconds {\n\t\treturn (this.valueOf() / this._getPPQ()) * (60 / this._getBpm());\n\t}\n}\n\n/**\n * Convert a time representation to ticks\n * @category Unit\n */\nexport function Ticks(value?: TimeValue, units?: TimeBaseUnit): TicksClass {\n\treturn new TicksClass(getContext(), value, units);\n}\n","import { getContext } from \"../Global\";\nimport { ftom, mtof } from \"./Conversions\";\nimport { FrequencyClass, FrequencyUnit } from \"./Frequency\";\nimport { TimeValue } from \"./TimeBase\";\nimport { Hertz, Interval, MidiNote, Seconds, Ticks } from \"./Units\";\n\n/**\n * Midi is a primitive type for encoding Time values.\n * Midi can be constructed with or without the `new` keyword. Midi can be passed\n * into the parameter of any method which takes time as an argument.\n * @example\n * var t = Midi(\"4n\");//a quarter note\n * @category Unit\n */\nexport class MidiClass extends FrequencyClass<MidiNote> {\n\n\treadonly name: string = \"Midi\";\n\n\treadonly defaultUnits = \"midi\";\n\n\t/**\n\t * Returns the value of a frequency in the current units\n\t */\n\tprotected _frequencyToUnits(freq: Hertz): MidiNote {\n\t\treturn ftom(super._frequencyToUnits(freq));\n\t}\n\n\t/**\n\t * Returns the value of a tick in the current time units\n\t */\n\tprotected _ticksToUnits(ticks: Ticks): MidiNote {\n\t\treturn ftom(super._ticksToUnits(ticks));\n\t}\n\n\t/**\n\t * Return the value of the beats in the current units\n\t */\n\tprotected _beatsToUnits(beats: number): MidiNote {\n\t\treturn ftom(super._beatsToUnits(beats));\n\t}\n\n\t/**\n\t * Returns the value of a second in the current units\n\t */\n\tprotected _secondsToUnits(seconds: Seconds): MidiNote {\n\t\treturn ftom(super._secondsToUnits(seconds));\n\t}\n\n\t/**\n\t * Return the value of the frequency as a MIDI note\n\t * @return  {MIDI}\n\t * @example\n\t * Midi(60).toMidi(); //60\n\t */\n\ttoMidi(): MidiNote {\n\t\treturn this.valueOf();\n\t}\n\n\t/**\n\t * Return the value of the frequency as a MIDI note\n\t * @return  {MIDI}\n\t * @example\n\t * Midi(60).toFrequency(); //261.6255653005986\n\t */\n\ttoFrequency(): Hertz {\n\t\treturn mtof(this.toMidi());\n\t}\n\n\t/**\n\t * Transposes the frequency by the given number of semitones.\n\t * @return A new transposed MidiClass\n\t * @example\n\t * Midi(\"A4\").transpose(3); //\"C5\"\n\t */\n\ttranspose(interval: Interval): MidiClass {\n\t\treturn new MidiClass(this.context, this.toMidi() + interval);\n\t}\n}\n\n/**\n * Convert a value into a FrequencyClass object.\n * @category Unit\n */\nexport function Midi(value?: TimeValue, units?: FrequencyUnit): MidiClass {\n\treturn new MidiClass(getContext(), value, units);\n}\n","import { ToneWithContext, ToneWithContextOptions } from \"../context/ToneWithContext\";\nimport { Seconds, Time } from \"../type/Units\";\nimport { Timeline, TimelineEvent } from \"./Timeline\";\n\ninterface DrawEvent extends TimelineEvent {\n\tcallback: () => void;\n}\n\n/**\n * Draw is useful for synchronizing visuals and audio events.\n * Callbacks from Tone.Transport or any of the Tone.Event classes\n * always happen _before_ the scheduled time and are not synchronized\n * to the animation frame so they are not good for triggering tightly\n * synchronized visuals and sound. Draw makes it easy to schedule\n * callbacks using the AudioContext time and uses requestAnimationFrame.\n * @example\n * Tone.Transport.schedule(function(time){\n * \t//use the time argument to schedule a callback with Draw\n * \tDraw.schedule(function(){\n * \t\t//do drawing or DOM manipulation here\n * \t}, time)\n * }, \"+0.5\")\n * @category Core\n */\nexport class Draw extends ToneWithContext<ToneWithContextOptions> {\n\n\treadonly name: string = \"Draw\";\n\n\t/**\n\t * The duration after which events are not invoked.\n\t */\n\texpiration: Seconds = 0.25;\n\n\t/**\n\t * The amount of time before the scheduled time\n\t * that the callback can be invoked. Default is\n\t * half the time of an animation frame (0.008 seconds).\n\t */\n\tanticipation: Seconds = 0.008;\n\n\t/**\n\t * All of the events.\n\t */\n\tprivate _events: Timeline<DrawEvent> = new Timeline();\n\n\t/**\n\t * The draw loop\n\t */\n\tprivate _boundDrawLoop = this._drawLoop.bind(this);\n\n\t/**\n\t * The animation frame id\n\t */\n\tprivate _animationFrame: number = -1;\n\n\t/**\n\t * Schedule a function at the given time to be invoked\n\t * on the nearest animation frame.\n\t * @param  callback  Callback is invoked at the given time.\n\t * @param  time      The time relative to the AudioContext time to invoke the callback.\n\t */\n\tschedule(callback: () => void, time: Time): this {\n\t\tthis._events.add({\n\t\t\tcallback,\n\t\t\ttime: this.toSeconds(time),\n\t\t});\n\t\t// start the draw loop on the first event\n\t\tif (this._events.length === 1) {\n\t\t\tthis._animationFrame = requestAnimationFrame(this._boundDrawLoop);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Cancel events scheduled after the given time\n\t * @param  after  Time after which scheduled events will be removed from the scheduling timeline.\n\t */\n\tcancel(after?: Time): this {\n\t\tthis._events.cancel(this.toSeconds(after));\n\t\treturn this;\n\t}\n\n\t/**\n\t * The draw loop\n\t */\n\tprivate _drawLoop(): void {\n\t\tconst now = this.context.currentTime;\n\t\twhile (this._events.length && (this._events.peek() as DrawEvent).time - this.anticipation <= now) {\n\t\t\tconst event = this._events.shift();\n\t\t\tif (event && now - event.time <= this.expiration) {\n\t\t\t\tevent.callback();\n\t\t\t}\n\t\t}\n\t\tif (this._events.length > 0) {\n\t\t\tthis._animationFrame = requestAnimationFrame(this._boundDrawLoop);\n\t\t}\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._events.dispose();\n\t\tcancelAnimationFrame(this._animationFrame);\n\t\treturn this;\n\t}\n}\n","import { Tone } from \"../Tone\";\nimport { isDefined } from \"./TypeCheck\";\n\n/**\n * An IntervalTimeline event must have a time and duration\n */\nexport interface IntervalTimelineEvent {\n\ttime: number;\n\tduration: number;\n\t[propName: string]: any;\n}\n\ntype IteratorCallback = (event: IntervalTimelineEvent) => void;\n\n/**\n * Similar to Tone.Timeline, but all events represent\n * intervals with both \"time\" and \"duration\" times. The\n * events are placed in a tree structure optimized\n * for querying an intersection point with the timeline\n * events. Internally uses an [Interval Tree](https://en.wikipedia.org/wiki/Interval_tree)\n * to represent the data.\n */\nexport class IntervalTimeline extends Tone {\n\n\treadonly name: string = \"IntervalTimeline\";\n\n\t/**\n\t * The root node of the inteval tree\n\t */\n\tprivate _root: IntervalNode | null = null;\n\n\t/**\n\t * Keep track of the length of the timeline.\n\t */\n\tprivate _length: number = 0;\n\n\t/**\n\t * The event to add to the timeline. All events must\n\t * have a time and duration value\n\t * @param  event  The event to add to the timeline\n\t */\n\tadd(event: IntervalTimelineEvent): this {\n\t\tthis.assert(isDefined(event.time), \"Events must have a time property\");\n\t\tthis.assert(isDefined(event.duration), \"Events must have a duration parameter\");\n\n\t\tevent.time = event.time.valueOf();\n\t\tlet node: IntervalNode | null = new IntervalNode(event.time, event.time + event.duration, event);\n\t\tif (this._root === null) {\n\t\t\tthis._root = node;\n\t\t} else {\n\t\t\tthis._root.insert(node);\n\t\t}\n\t\tthis._length++;\n\t\t// Restructure tree to be balanced\n\t\twhile (node !== null) {\n\t\t\tnode.updateHeight();\n\t\t\tnode.updateMax();\n\t\t\tthis._rebalance(node);\n\t\t\tnode = node.parent;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Remove an event from the timeline.\n\t * @param  event  The event to remove from the timeline\n\t */\n\tremove(event: IntervalTimelineEvent): this {\n\t\tif (this._root !== null) {\n\t\t\tconst results: IntervalNode[] = [];\n\t\t\tthis._root.search(event.time, results);\n\t\t\tfor (const node of results) {\n\t\t\t\tif (node.event === event) {\n\t\t\t\t\tthis._removeNode(node);\n\t\t\t\t\tthis._length--;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * The number of items in the timeline.\n\t * @readOnly\n\t */\n\tget length(): number {\n\t\treturn this._length;\n\t}\n\n\t/**\n\t * Remove events whose time time is after the given time\n\t * @param  time  The time to query.\n\t */\n\tcancel(after: number): this {\n\t\tthis.forEachFrom(after, event => this.remove(event));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set the root node as the given node\n\t */\n\tprivate _setRoot(node: IntervalNode | null): void {\n\t\tthis._root = node;\n\t\tif (this._root !== null) {\n\t\t\tthis._root.parent = null;\n\t\t}\n\t}\n\n\t/**\n\t * Replace the references to the node in the node's parent\n\t * with the replacement node.\n\t */\n\tprivate _replaceNodeInParent(node: IntervalNode, replacement: IntervalNode | null): void {\n\t\tif (node.parent !== null) {\n\t\t\tif (node.isLeftChild()) {\n\t\t\t\tnode.parent.left = replacement;\n\t\t\t} else {\n\t\t\t\tnode.parent.right = replacement;\n\t\t\t}\n\t\t\tthis._rebalance(node.parent);\n\t\t} else {\n\t\t\tthis._setRoot(replacement);\n\t\t}\n\t}\n\n\t/**\n\t * Remove the node from the tree and replace it with\n\t * a successor which follows the schema.\n\t */\n\tprivate _removeNode(node: IntervalNode): void {\n\t\tif (node.left === null && node.right === null) {\n\t\t\tthis._replaceNodeInParent(node, null);\n\t\t} else if (node.right === null) {\n\t\t\tthis._replaceNodeInParent(node, node.left);\n\t\t} else if (node.left === null) {\n\t\t\tthis._replaceNodeInParent(node, node.right);\n\t\t} else {\n\t\t\tconst balance = node.getBalance();\n\t\t\tlet replacement: IntervalNode;\n\t\t\tlet temp: IntervalNode | null = null;\n\t\t\tif (balance > 0) {\n\t\t\t\tif (node.left.right === null) {\n\t\t\t\t\treplacement = node.left;\n\t\t\t\t\treplacement.right = node.right;\n\t\t\t\t\ttemp = replacement;\n\t\t\t\t} else {\n\t\t\t\t\treplacement = node.left.right;\n\t\t\t\t\twhile (replacement.right !== null) {\n\t\t\t\t\t\treplacement = replacement.right;\n\t\t\t\t\t}\n\t\t\t\t\tif (replacement.parent) {\n\t\t\t\t\t\treplacement.parent.right = replacement.left;\n\t\t\t\t\t\ttemp = replacement.parent;\n\t\t\t\t\t\treplacement.left = node.left;\n\t\t\t\t\t\treplacement.right = node.right;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (node.right.left === null) {\n\t\t\t\treplacement = node.right;\n\t\t\t\treplacement.left = node.left;\n\t\t\t\ttemp = replacement;\n\t\t\t} else {\n\t\t\t\treplacement = node.right.left;\n\t\t\t\twhile (replacement.left !== null) {\n\t\t\t\t\treplacement = replacement.left;\n\t\t\t\t}\n\t\t\t\tif (replacement.parent) {\n\t\t\t\t\treplacement.parent.left = replacement.right;\n\t\t\t\t\ttemp = replacement.parent;\n\t\t\t\t\treplacement.left = node.left;\n\t\t\t\t\treplacement.right = node.right;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (node.parent !== null) {\n\t\t\t\tif (node.isLeftChild()) {\n\t\t\t\t\tnode.parent.left = replacement;\n\t\t\t\t} else {\n\t\t\t\t\tnode.parent.right = replacement;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._setRoot(replacement);\n\t\t\t}\n\t\t\tif (temp) {\n\t\t\t\tthis._rebalance(temp);\n\t\t\t}\n\t\t}\n\t\tnode.dispose();\n\t}\n\n\t/**\n\t * Rotate the tree to the left\n\t */\n\tprivate _rotateLeft(node: IntervalNode): void {\n\t\tconst parent = node.parent;\n\t\tconst isLeftChild = node.isLeftChild();\n\n\t\t// Make node.right the new root of this sub tree (instead of node)\n\t\tconst pivotNode = node.right;\n\t\tif (pivotNode) {\n\t\t\tnode.right = pivotNode.left;\n\t\t\tpivotNode.left = node;\n\t\t}\n\n\t\tif (parent !== null) {\n\t\t\tif (isLeftChild) {\n\t\t\t\tparent.left = pivotNode;\n\t\t\t} else {\n\t\t\t\tparent.right = pivotNode;\n\t\t\t}\n\t\t} else {\n\t\t\tthis._setRoot(pivotNode);\n\t\t}\n\t}\n\n\t/**\n\t * Rotate the tree to the right\n\t */\n\tprivate _rotateRight(node: IntervalNode): void {\n\t\tconst parent = node.parent;\n\t\tconst isLeftChild = node.isLeftChild();\n\n\t\t// Make node.left the new root of this sub tree (instead of node)\n\t\tconst pivotNode = node.left;\n\t\tif (pivotNode) {\n\t\t\tnode.left = pivotNode.right;\n\t\t\tpivotNode.right = node;\n\t\t}\n\n\t\tif (parent !== null) {\n\t\t\tif (isLeftChild) {\n\t\t\t\tparent.left = pivotNode;\n\t\t\t} else {\n\t\t\t\tparent.right = pivotNode;\n\t\t\t}\n\t\t} else {\n\t\t\tthis._setRoot(pivotNode);\n\t\t}\n\t}\n\n\t/**\n\t * Balance the BST\n\t */\n\tprivate _rebalance(node: IntervalNode): void {\n\t\tconst balance = node.getBalance();\n\t\tif (balance > 1 && node.left) {\n\t\t\tif (node.left.getBalance() < 0) {\n\t\t\t\tthis._rotateLeft(node.left);\n\t\t\t} else {\n\t\t\t\tthis._rotateRight(node);\n\t\t\t}\n\t\t} else if (balance < -1 && node.right) {\n\t\t\tif (node.right.getBalance() > 0) {\n\t\t\t\tthis._rotateRight(node.right);\n\t\t\t} else {\n\t\t\t\tthis._rotateLeft(node);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Get an event whose time and duration span the give time. Will\n\t * return the match whose \"time\" value is closest to the given time.\n\t * @return  The event which spans the desired time\n\t */\n\tget(time: number): IntervalTimelineEvent | null {\n\t\tif (this._root !== null) {\n\t\t\tconst results: IntervalNode[] = [];\n\t\t\tthis._root.search(time, results);\n\t\t\tif (results.length > 0) {\n\t\t\t\tlet max = results[0];\n\t\t\t\tfor (let i = 1; i < results.length; i++) {\n\t\t\t\t\tif (results[i].low > max.low) {\n\t\t\t\t\t\tmax = results[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn max.event;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Iterate over everything in the timeline.\n\t * @param  callback The callback to invoke with every item\n\t */\n\tforEach(callback: IteratorCallback): this {\n\t\tif (this._root !== null) {\n\t\t\tconst allNodes: IntervalNode[] = [];\n\t\t\tthis._root.traverse(node => allNodes.push(node));\n\t\t\tallNodes.forEach(node => {\n\t\t\t\tif (node.event) {\n\t\t\t\t\tcallback(node.event);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Iterate over everything in the array in which the given time\n\t * overlaps with the time and duration time of the event.\n\t * @param  time The time to check if items are overlapping\n\t * @param  callback The callback to invoke with every item\n\t */\n\tforEachAtTime(time: number, callback: IteratorCallback): this {\n\t\tif (this._root !== null) {\n\t\t\tconst results: IntervalNode[] = [];\n\t\t\tthis._root.search(time, results);\n\t\t\tresults.forEach(node => {\n\t\t\t\tif (node.event) {\n\t\t\t\t\tcallback(node.event);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Iterate over everything in the array in which the time is greater\n\t * than or equal to the given time.\n\t * @param  time The time to check if items are before\n\t * @param  callback The callback to invoke with every item\n\t */\n\tforEachFrom(time: number, callback: IteratorCallback): this {\n\t\tif (this._root !== null) {\n\t\t\tconst results: IntervalNode[] = [];\n\t\t\tthis._root.searchAfter(time, results);\n\t\t\tresults.forEach(node => {\n\t\t\t\tif (node.event) {\n\t\t\t\t\tcallback(node.event);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (this._root !== null) {\n\t\t\tthis._root.traverse(node => node.dispose());\n\t\t}\n\t\tthis._root = null;\n\t\treturn this;\n\t}\n}\n\n//-------------------------------------\n// \tINTERVAL NODE HELPER\n//-------------------------------------\n\n/**\n * Represents a node in the binary search tree, with the addition\n * of a \"high\" value which keeps track of the highest value of\n * its children.\n * References:\n * https://brooknovak.wordpress.com/2013/12/07/augmented-interval-tree-in-c/\n * http://www.mif.vu.lt/~valdas/ALGORITMAI/LITERATURA/Cormen/Cormen.pdf\n * @param low\n * @param high\n */\nclass IntervalNode {\n\n\t// the event container\n\tevent: IntervalTimelineEvent | null;\n\t// the low value\n\tlow: number;\n\t// the high value\n\thigh: number;\n\t// the high value for this and all child nodes\n\tmax: number;\n\t// the nodes to the left\n\tprivate _left: IntervalNode | null = null;\n\t// the nodes to the right\n\tprivate _right: IntervalNode | null = null;\n\t// the parent node\n\tparent: IntervalNode | null = null;\n\t// the number of child nodes\n\theight: number = 0;\n\n\tconstructor(low: number, high: number, event: IntervalTimelineEvent) {\n\t\tthis.event = event;\n\t\t// the low value\n\t\tthis.low = low;\n\t\t// the high value\n\t\tthis.high = high;\n\t\t// the high value for this and all child nodes\n\t\tthis.max = this.high;\n\t}\n\n\t/**\n\t * Insert a node into the correct spot in the tree\n\t */\n\tinsert(node: IntervalNode): void {\n\t\tif (node.low <= this.low) {\n\t\t\tif (this.left === null) {\n\t\t\t\tthis.left = node;\n\t\t\t} else {\n\t\t\t\tthis.left.insert(node);\n\t\t\t}\n\t\t} else if (this.right === null) {\n\t\t\tthis.right = node;\n\t\t} else {\n\t\t\tthis.right.insert(node);\n\t\t}\n\t}\n\n\t/**\n\t * Search the tree for nodes which overlap\n\t * with the given point\n\t * @param  point  The point to query\n\t * @param  results  The array to put the results\n\t */\n\tsearch(point: number, results: IntervalNode[]): void {\n\t\t// If p is to the right of the rightmost point of any interval\n\t\t// in this node and all children, there won't be any matches.\n\t\tif (point > this.max) {\n\t\t\treturn;\n\t\t}\n\t\t// Search left children\n\t\tif (this.left !== null) {\n\t\t\tthis.left.search(point, results);\n\t\t}\n\t\t// Check this node\n\t\tif (this.low <= point && this.high > point) {\n\t\t\tresults.push(this);\n\t\t}\n\t\t// If p is to the left of the time of this interval,\n\t\t// then it can't be in any child to the right.\n\t\tif (this.low > point) {\n\t\t\treturn;\n\t\t}\n\t\t// Search right children\n\t\tif (this.right !== null) {\n\t\t\tthis.right.search(point, results);\n\t\t}\n\t}\n\n\t/**\n\t * Search the tree for nodes which are less\n\t * than the given point\n\t * @param  point  The point to query\n\t * @param  results  The array to put the results\n\t */\n\tsearchAfter(point: number, results: IntervalNode[]): void {\n\t\t// Check this node\n\t\tif (this.low >= point) {\n\t\t\tresults.push(this);\n\t\t\tif (this.left !== null) {\n\t\t\t\tthis.left.searchAfter(point, results);\n\t\t\t}\n\t\t}\n\t\t// search the right side\n\t\tif (this.right !== null) {\n\t\t\tthis.right.searchAfter(point, results);\n\t\t}\n\t}\n\n\t/**\n\t * Invoke the callback on this element and both it's branches\n\t * @param  {Function}  callback\n\t */\n\ttraverse(callback: (self: IntervalNode) => void): void {\n\t\tcallback(this);\n\t\tif (this.left !== null) {\n\t\t\tthis.left.traverse(callback);\n\t\t}\n\t\tif (this.right !== null) {\n\t\t\tthis.right.traverse(callback);\n\t\t}\n\t}\n\n\t/**\n\t * Update the height of the node\n\t */\n\tupdateHeight(): void {\n\t\tif (this.left !== null && this.right !== null) {\n\t\t\tthis.height = Math.max(this.left.height, this.right.height) + 1;\n\t\t} else if (this.right !== null) {\n\t\t\tthis.height = this.right.height + 1;\n\t\t} else if (this.left !== null) {\n\t\t\tthis.height = this.left.height + 1;\n\t\t} else {\n\t\t\tthis.height = 0;\n\t\t}\n\t}\n\n\t/**\n\t * Update the height of the node\n\t */\n\tupdateMax(): void {\n\t\tthis.max = this.high;\n\t\tif (this.left !== null) {\n\t\t\tthis.max = Math.max(this.max, this.left.max);\n\t\t}\n\t\tif (this.right !== null) {\n\t\t\tthis.max = Math.max(this.max, this.right.max);\n\t\t}\n\t}\n\n\t/**\n\t * The balance is how the leafs are distributed on the node\n\t * @return  Negative numbers are balanced to the right\n\t */\n\tgetBalance(): number {\n\t\tlet balance = 0;\n\t\tif (this.left !== null && this.right !== null) {\n\t\t\tbalance = this.left.height - this.right.height;\n\t\t} else if (this.left !== null) {\n\t\t\tbalance = this.left.height + 1;\n\t\t} else if (this.right !== null) {\n\t\t\tbalance = -(this.right.height + 1);\n\t\t}\n\t\treturn balance;\n\t}\n\n\t/**\n\t * @returns true if this node is the left child of its parent\n\t */\n\tisLeftChild(): boolean {\n\t\treturn this.parent !== null && this.parent.left === this;\n\t}\n\n\t/**\n\t * get/set the left node\n\t */\n\tget left(): IntervalNode | null {\n\t\treturn this._left;\n\t}\n\n\tset left(node: IntervalNode | null) {\n\t\tthis._left = node;\n\t\tif (node !== null) {\n\t\t\tnode.parent = this;\n\t\t}\n\t\tthis.updateHeight();\n\t\tthis.updateMax();\n\t}\n\n\t/**\n\t * get/set the right node\n\t */\n\tget right(): IntervalNode | null {\n\t\treturn this._right;\n\t}\n\n\tset right(node: IntervalNode | null) {\n\t\tthis._right = node;\n\t\tif (node !== null) {\n\t\t\tnode.parent = this;\n\t\t}\n\t\tthis.updateHeight();\n\t\tthis.updateMax();\n\t}\n\n\t/**\n\t * null out references.\n\t */\n\tdispose(): void {\n\t\tthis.parent = null;\n\t\tthis._left = null;\n\t\tthis._right = null;\n\t\tthis.event = null;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { Param } from \"../../core/context/Param\";\nimport { InputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Decibels } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\n\ninterface VolumeOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n\tmute: boolean;\n}\n\n/**\n * Volume is a simple volume node, useful for creating a volume fader.\n *\n * @example\n * var vol = new Volume(-12);\n * instrument.chain(vol, Tone.Destination);\n * @category Component\n */\nexport class Volume extends ToneAudioNode<VolumeOptions> {\n\n\treadonly name: string = \"Volume\";\n\n\t/**\n\t * the output node\n\t */\n\toutput: Gain<Decibels>;\n\n\t/**\n\t * Input and output are the same\n\t */\n\tinput: Gain;\n\n\t/**\n\t * The unmuted volume\n\t */\n\tprivate _unmutedVolume: Decibels;\n\n\t/**\n\t * The volume control in decibels.\n\t */\n\tvolume: Param<Decibels>;\n\n\t/**\n\t * @param volume the initial volume in decibels\n\t */\n\tconstructor(volume?: Decibels);\n\tconstructor(options?: Partial<VolumeOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Volume.getDefaults(), arguments, [\"volume\"]));\n\t\tconst options = optionsFromArguments(Volume.getDefaults(), arguments, [\"volume\"]);\n\n\t\tthis.input = this.output = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: options.volume,\n\t\t\tunits: \"decibels\",\n\t\t});\n\t\tthis.volume = this.output.gain;\n\t\treadOnly(this, \"volume\");\n\t\tthis._unmutedVolume = options.volume;\n\n\t\t// set the mute initially\n\t\tthis.mute = options.mute;\n\t}\n\n\tstatic getDefaults(): VolumeOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmute: false,\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Mute the output.\n\t * @example\n\t * //mute the output\n\t * volume.mute = true;\n\t */\n\tget mute(): boolean {\n\t\treturn this.volume.value === -Infinity;\n\t}\n\tset mute(mute: boolean) {\n\t\tif (!this.mute && mute) {\n\t\t\tthis._unmutedVolume = this.volume.value;\n\t\t\t// maybe it should ramp here?\n\t\t\tthis.volume.value = -Infinity;\n\t\t} else if (this.mute && !mute) {\n\t\t\tthis.volume.value = this._unmutedVolume;\n\t\t}\n\t}\n\n\t/**\n\t * clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.input.dispose();\n\t\tthis.volume.dispose();\n\t\treturn this;\n\t}\n}\n","import { Volume } from \"../../component/channel/Volume\";\nimport { connectSeries } from \"../Connect\";\nimport { Decibels } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { onContextClose, onContextInit } from \"./ContextInitialization\";\nimport { Gain } from \"./Gain\";\nimport { Param } from \"./Param\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"./ToneAudioNode\";\n\ninterface DestinationOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n\tmute: boolean;\n}\n\n/**\n * A single master output which is connected to the\n * AudioDestinationNode (aka your speakers).\n * It provides useful conveniences such as the ability\n * to set the volume and mute the entire application.\n * It also gives you the ability to apply master effects to your application.\n *\n * @example\n * //the audio will go from the oscillator to the speakers\n * oscillator.connect(Destination);\n * //a convenience for connecting to the master output is also provided:\n * oscillator.toDestination();\n * //the above two examples are equivalent.\n * @category Core\n */\nexport class Destination extends ToneAudioNode<DestinationOptions> {\n\n\treadonly name: string = \"Destination\";\n\n\tinput: Volume = new Volume({ context: this.context });\n\toutput: Gain = new Gain({ context: this.context });\n\n\t/**\n\t * The volume of the master output.\n\t */\n\tvolume: Param<Decibels> = this.input.volume;\n\n\tconstructor(options: Partial<DestinationOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Destination.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Destination.getDefaults(), arguments);\n\n\t\tconnectSeries(this.input, this.output, this.context.rawContext.destination);\n\n\t\tthis.mute = options.mute;\n\t}\n\n\tstatic getDefaults(): DestinationOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmute: false,\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Mute the output.\n\t * @example\n\t * //mute the output\n\t * Destination.mute = true;\n\t */\n\tget mute(): boolean {\n\t\treturn this.input.mute;\n\t}\n\n\tset mute(mute: boolean) {\n\t\tthis.input.mute = mute;\n\t}\n\n\t/**\n\t * Add a master effects chain. NOTE: this will disconnect any nodes which were previously\n\t * chained in the master effects chain.\n\t * @param nodes All arguments will be connected in a row and the Master will be routed through it.\n\t * @return  {Destination}  this\n\t * @example\n\t * //some overall compression to keep the levels in check\n\t * var masterCompressor = new Tone.Compressor({\n\t * \t\"threshold\" : -6,\n\t * \t\"ratio\" : 3,\n\t * \t\"attack\" : 0.5,\n\t * \t\"release\" : 0.1\n\t * });\n\t * //give a little boost to the lows\n\t * var lowBump = new Tone.Filter(200, \"lowshelf\");\n\t * //route everything through the filter\n\t * //and compressor before going to the speakers\n\t * Destination.chain(lowBump, masterCompressor);\n\t */\n\tchain(...args: Array<AudioNode | ToneAudioNode>): this {\n\t\tthis.input.disconnect();\n\t\targs.unshift(this.input);\n\t\targs.push(this.output);\n\t\tconnectSeries(...args);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.volume.dispose();\n\t\treturn this;\n\t}\n}\n\n//-------------------------------------\n// \tINITIALIZATION\n//-------------------------------------\n\nonContextInit(context => {\n\tcontext.destination = new Destination({ context });\n});\n\nonContextClose(context => {\n\tcontext.destination.dispose();\n});\n","import { Seconds, Ticks } from \"../type/Units\";\nimport { noOp } from \"../util/Interface\";\n\ntype Transport = import(\"../clock/Transport\").Transport;\n\nexport interface TransportEventOptions {\n\tcallback: (time: number) => void;\n\tonce: boolean;\n\ttime: Ticks;\n}\n\n/**\n * TransportEvent is an internal class used by [[Transport]]\n * to schedule events. Do no invoke this class directly, it is\n * handled from within Tone.Transport.\n */\nexport class TransportEvent {\n\n\t/**\n\t * Reference to the Transport that created it\n\t */\n\tprotected transport: Transport;\n\n\t/**\n\t * The unique id of the event\n\t */\n\tid: number = TransportEvent._eventId++;\n\n\t/**\n\t * The time the event starts\n\t */\n\ttime: Ticks;\n\n\t/**\n\t * The callback to invoke\n\t */\n\tprivate callback?: (time: Seconds) => void;\n\n\t/**\n\t * If the event should be removed after being invoked.\n\t */\n\tprivate _once: boolean;\n\n\t/**\n\t * @param Transport The transport object which the event belongs to\n\t */\n\tconstructor(transport: Transport, opts: Partial<TransportEventOptions>) {\n\n\t\tconst options: TransportEventOptions = Object.assign(TransportEvent.getDefaults(), opts);\n\n\t\tthis.transport = transport;\n\t\tthis.callback = options.callback;\n\t\tthis._once = options.once;\n\t\tthis.time = options.time;\n\t}\n\n\tstatic getDefaults(): TransportEventOptions {\n\t\treturn {\n\t\t\tcallback: noOp,\n\t\t\tonce: false,\n\t\t\ttime: 0,\n\t\t};\n\t}\n\n\t/**\n\t * Current ID counter\n\t */\n\tprivate static _eventId: number = 0;\n\n\t/**\n\t * Invoke the event callback.\n\t * @param  time  The AudioContext time in seconds of the event\n\t */\n\tinvoke(time: Seconds): void {\n\t\tif (this.callback) {\n\t\t\tthis.callback(time);\n\t\t\tif (this._once) {\n\t\t\t\tthis.transport.clear(this.id);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tthis.callback = undefined;\n\t\treturn this;\n\t}\n}\n","import { Context } from \"../context/Context\";\nimport { TicksClass } from \"../type/Ticks\";\nimport { Seconds, Ticks, Time } from \"../type/Units\";\nimport { TransportEvent, TransportEventOptions } from \"./TransportEvent\";\n\ntype Transport = import(\"../clock/Transport\").Transport;\n\ninterface TransportRepeatEventOptions extends TransportEventOptions {\n\tinterval: Ticks;\n\tduration: Ticks;\n}\n\n/**\n * TransportRepeatEvent is an internal class used by Tone.Transport\n * to schedule repeat events. This class should not be instantiated directly.\n */\nexport class TransportRepeatEvent extends TransportEvent {\n\n\t/**\n\t * When the event should stop repeating\n\t */\n\tprivate duration: Ticks;\n\n\t/**\n\t * The interval of the repeated event\n\t */\n\tprivate _interval: Ticks;\n\n\t/**\n\t * The ID of the current timeline event\n\t */\n\tprivate _currentId: number = -1;\n\n\t/**\n\t * The ID of the next timeline event\n\t */\n\tprivate _nextId: number = -1;\n\n\t/**\n\t * The time of the next event\n\t */\n\tprivate _nextTick = this.time;\n\n\t/**\n\t * a reference to the bound start method\n\t */\n\tprivate _boundRestart = this._restart.bind(this);\n\n\t/**\n\t * The audio context belonging to this event\n\t */\n\tprotected context: Context;\n\n\t/**\n\t * @param Transport The transport object which the event belongs to\n\t */\n\tconstructor(transport: Transport, opts: Partial<TransportRepeatEventOptions>) {\n\n\t\tsuper(transport, opts);\n\n\t\tconst options = Object.assign(TransportRepeatEvent.getDefaults(), opts);\n\n\t\tthis.duration = new TicksClass(transport.context, options.duration).valueOf();\n\t\tthis._interval = new TicksClass(transport.context, options.interval).valueOf();\n\t\tthis._nextTick = options.time;\n\t\tthis.transport.on(\"start\", this._boundRestart);\n\t\tthis.transport.on(\"loopStart\", this._boundRestart);\n\t\tthis.context = this.transport.context;\n\t\tthis._restart();\n\t}\n\n\tstatic getDefaults(): TransportRepeatEventOptions {\n\t\treturn Object.assign({}, TransportEvent.getDefaults(), {\n\t\t\tduration: Infinity,\n\t\t\tinterval: 1,\n\t\t\tonce: false,\n\t\t});\n\t}\n\n\t/**\n\t * Invoke the callback. Returns the tick time which\n\t * the next event should be scheduled at.\n\t * @param  time  The AudioContext time in seconds of the event\n\t */\n\tinvoke(time: Seconds): void {\n\t\t// create more events if necessary\n\t\tthis._createEvents(time);\n\t\t// call the super class\n\t\tsuper.invoke(time);\n\t}\n\n\t/**\n\t * Push more events onto the timeline to keep up with the position of the timeline\n\t */\n\tprivate _createEvents(time: Seconds): void {\n\t\t// schedule the next event\n\t\tconst ticks = this.transport.getTicksAtTime(time);\n\t\tif (ticks >= this.time && ticks >= this._nextTick && this._nextTick + this._interval < this.time + this.duration) {\n\t\t\tthis._nextTick += this._interval;\n\t\t\tthis._currentId = this._nextId;\n\t\t\tthis._nextId = this.transport.scheduleOnce(this.invoke.bind(this),\n\t\t\t\tnew TicksClass(this.context, this._nextTick).toSeconds());\n\t\t}\n\t}\n\n\t/**\n\t * Push more events onto the timeline to keep up with the position of the timeline\n\t */\n\tprivate _restart(time?: Time): void {\n\t\tthis.transport.clear(this._currentId);\n\t\tthis.transport.clear(this._nextId);\n\t\tthis._nextTick = this.time;\n\t\tconst ticks = this.transport.getTicksAtTime(time);\n\t\tif (ticks > this.time) {\n\t\t\tthis._nextTick = this.time + Math.ceil((ticks - this.time) / this._interval) * this._interval;\n\t\t}\n\t\tthis._currentId = this.transport.scheduleOnce(this.invoke.bind(this),\n\t\t\tnew TicksClass(this.context, this._nextTick).toSeconds());\n\t\tthis._nextTick += this._interval;\n\t\tthis._nextId = this.transport.scheduleOnce(this.invoke.bind(this),\n\t\t\tnew TicksClass(this.context, this._nextTick).toSeconds());\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.transport.clear(this._currentId);\n\t\tthis.transport.clear(this._nextId);\n\t\tthis.transport.off(\"start\", this._boundRestart);\n\t\tthis.transport.off(\"loopStart\", this._boundRestart);\n\t\treturn this;\n\t}\n}\n","import { TimeClass } from \"../../core/type/Time\";\nimport { PlaybackState } from \"../../core/util/StateTimeline\";\nimport { Signal } from \"../../signal/Signal\";\nimport { onContextClose, onContextInit } from \"../context/ContextInitialization\";\nimport { Gain } from \"../context/Gain\";\nimport { Param } from \"../context/Param\";\nimport { ToneWithContext, ToneWithContextOptions } from \"../context/ToneWithContext\";\nimport { TicksClass } from \"../type/Ticks\";\nimport { TransportTimeClass } from \"../type/TransportTime\";\nimport { BarsBeatsSixteenths, BPM, NormalRange, Seconds,\n\tSubdivision, Ticks, Time, TimeSignature, TransportTime } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Emitter } from \"../util/Emitter\";\nimport { readOnly, writable } from \"../util/Interface\";\nimport { IntervalTimeline } from \"../util/IntervalTimeline\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isArray, isDefined } from \"../util/TypeCheck\";\nimport { Clock } from \"./Clock\";\nimport { TickParam } from \"./TickParam\";\nimport { TransportEvent } from \"./TransportEvent\";\nimport { TransportRepeatEvent } from \"./TransportRepeatEvent\";\n\ninterface TransportOptions extends ToneWithContextOptions {\n\tbpm: BPM;\n\tswing: NormalRange;\n\tswingSubdivision: Subdivision;\n\ttimeSignature: number;\n\tloopStart: Time;\n\tloopEnd: Time;\n\tppq: number;\n}\n\ntype TransportEventNames = \"start\" | \"stop\" | \"pause\" | \"loop\" | \"loopEnd\" | \"loopStart\";\n\ninterface SyncedSignalEvent {\n\tsignal: Signal;\n\tinitial: number;\n\tratio: Gain;\n}\n\ntype TransportCallback = (time: Seconds) => void;\n\n/**\n * Transport for timing musical events.\n * Supports tempo curves and time changes. Unlike browser-based timing (setInterval, requestAnimationFrame)\n * Transport timing events pass in the exact time of the scheduled event\n * in the argument of the callback function. Pass that time value to the object\n * you're scheduling. <br><br>\n * A single transport is created for you when the library is initialized.\n * <br><br>\n * The transport emits the events: \"start\", \"stop\", \"pause\", and \"loop\" which are\n * called with the time of that event as the argument.\n *\n * @example\n * //repeated event every 8th note\n * Transport.scheduleRepeat(function(time){\n * //do something with the time\n * }, \"8n\");\n * @example\n * //schedule an event on the 16th measure\n * Transport.schedule(function(time){\n * //do something with the time\n * }, \"16:0:0\");\n * @category Core\n */\nexport class Transport extends ToneWithContext<TransportOptions> implements Emitter<TransportEventNames> {\n\n\treadonly name: string = \"Transport\";\n\n\t//-------------------------------------\n\t// \tLOOPING\n\t//-------------------------------------\n\n\t/**\n\t * If the transport loops or not.\n\t */\n\tloop: boolean = false;\n\n\t/**\n\t * The loop start position in ticks\n\t */\n\tprivate _loopStart: Ticks = 0;\n\n\t/**\n\t * The loop end position in ticks\n\t */\n\tprivate _loopEnd: Ticks = 0;\n\n\t//-------------------------------------\n\t// \tCLOCK/TEMPO\n\t//-------------------------------------\n\n\t/**\n\t * Pulses per quarter is the number of ticks per quarter note.\n\t */\n\tprivate _ppq: number;\n\n\t/**\n\t * watches the main oscillator for timing ticks\n\t * initially starts at 120bpm\n\t */\n\tprivate _clock: Clock<BPM>;\n\n\t/**\n\t * The Beats Per Minute of the Transport.\n\t * @example\n\t * Transport.bpm.value = 80;\n\t * //ramp the bpm to 120 over 10 seconds\n\t * Transport.bpm.rampTo(120, 10);\n\t */\n\tbpm: TickParam<BPM>;\n\n\t/**\n\t * The time signature, or more accurately the numerator\n\t * of the time signature over a denominator of 4.\n\t */\n\tprivate _timeSignature: number;\n\n\t//-------------------------------------\n\t// \tTIMELINE EVENTS\n\t//-------------------------------------\n\n\t/**\n\t * All the events in an object to keep track by ID\n\t */\n\tprivate _scheduledEvents = {};\n\n\t/**\n\t * The scheduled events.\n\t */\n\tprivate _timeline: Timeline<TransportEvent> = new Timeline();\n\n\t/**\n\t * Repeated events\n\t */\n\tprivate _repeatedEvents: IntervalTimeline = new IntervalTimeline();\n\n\t/**\n\t * All of the synced Signals\n\t */\n\tprivate _syncedSignals: SyncedSignalEvent[] = [];\n\n\t//-------------------------------------\n\t// \tSWING\n\t//-------------------------------------\n\n\t/**\n\t * The subdivision of the swing\n\t */\n\tprivate _swingTicks: Ticks;\n\n\t/**\n\t * The swing amount\n\t */\n\tprivate _swingAmount: NormalRange = 0;\n\n\tconstructor(options?: Partial<TransportOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Transport.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Transport.getDefaults(), arguments);\n\n\t\t// CLOCK/TEMPO\n\t\tthis._ppq = options.ppq;\n\t\tthis._clock = new Clock({\n\t\t\tcallback: this._processTick.bind(this),\n\t\t\tcontext: this.context,\n\t\t\tfrequency: 0,\n\t\t\tunits: \"bpm\",\n\t\t});\n\t\tthis._bindClockEvents();\n\t\tthis.bpm = this._clock.frequency as unknown as TickParam<BPM>;\n\t\tthis._clock.frequency.multiplier = options.ppq;\n\t\tthis.bpm.value = options.bpm;\n\t\treadOnly(this, \"bpm\");\n\t\tthis._timeSignature = options.timeSignature;\n\n\t\t// SWING\n\t\tthis._swingTicks = options.ppq / 2; // 8n\n\t}\n\n\tstatic getDefaults(): TransportOptions {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tbpm: 120,\n\t\t\tloopEnd: \"4m\" as Subdivision,\n\t\t\tloopStart: 0,\n\t\t\tppq: 192,\n\t\t\tswing: 0,\n\t\t\tswingSubdivision: \"8n\" as Subdivision,\n\t\t\ttimeSignature: 4,\n\t\t});\n\t}\n\n\t//-------------------------------------\n\t// \tTICKS\n\t//-------------------------------------\n\n\t/**\n\t * called on every tick\n\t * @param  tickTime clock relative tick time\n\t */\n\tprivate _processTick(tickTime: Seconds, ticks: Ticks): void {\n\t\t// handle swing\n\t\tif (this._swingAmount > 0 &&\n\t\t\tticks % this._ppq !== 0 && // not on a downbeat\n\t\t\tticks % (this._swingTicks * 2) !== 0) {\n\t\t\t// add some swing\n\t\t\tconst progress = (ticks % (this._swingTicks * 2)) / (this._swingTicks * 2);\n\t\t\tconst amount = Math.sin((progress) * Math.PI) * this._swingAmount;\n\t\t\ttickTime += new TicksClass(this.context, this._swingTicks * 2 / 3).toSeconds() * amount;\n\t\t}\n\t\t// do the loop test\n\t\tif (this.loop) {\n\t\t\tif (ticks >= this._loopEnd) {\n\t\t\t\tthis.emit(\"loopEnd\", tickTime);\n\t\t\t\tthis._clock.setTicksAtTime(this._loopStart, tickTime);\n\t\t\t\tticks = this._loopStart;\n\t\t\t\tthis.emit(\"loopStart\", tickTime, this._clock.getSecondsAtTime(tickTime));\n\t\t\t\tthis.emit(\"loop\", tickTime);\n\t\t\t}\n\t\t}\n\t\t// invoke the timeline events scheduled on this tick\n\t\tthis._timeline.forEachAtTime(ticks, event => event.invoke(tickTime));\n\t}\n\n\t//-------------------------------------\n\t// \tSCHEDULABLE EVENTS\n\t//-------------------------------------\n\n\t/**\n\t * Schedule an event along the timeline.\n\t * @param callback The callback to be invoked at the time.\n\t * @param time The time to invoke the callback at.\n\t * @return The id of the event which can be used for canceling the event.\n\t * @example\n\t * //trigger the callback when the Transport reaches the desired time\n\t * Transport.schedule(function(time){\n\t * envelope.triggerAttack(time);\n\t * }, \"128i\");\n\t */\n\tschedule(callback: TransportCallback, time: TransportTime | TransportTimeClass): number {\n\t\tconst event = new TransportEvent(this, {\n\t\t\tcallback,\n\t\t\ttime: new TransportTimeClass(this.context, time).toTicks(),\n\t\t});\n\t\treturn this._addEvent(event, this._timeline);\n\t}\n\n\t/**\n\t * Schedule a repeated event along the timeline. The event will fire\n\t * at the `interval` starting at the `startTime` and for the specified\n\t * `duration`.\n\t * @param  callback   The callback to invoke.\n\t * @param  interval   The duration between successive callbacks. Must be a positive number.\n\t * @param  startTime  When along the timeline the events should start being invoked.\n\t * @param  duration How long the event should repeat.\n\t * @return  The ID of the scheduled event. Use this to cancel the event.\n\t * @example\n\t * //a callback invoked every eighth note after the first measure\n\t * Transport.scheduleRepeat(callback, \"8n\", \"1m\");\n\t */\n\tscheduleRepeat(\n\t\tcallback: TransportCallback,\n\t\tinterval: Time | TimeClass,\n\t\tstartTime?: TransportTime | TransportTimeClass,\n\t\tduration: Time = Infinity,\n\t): number {\n\t\tconst event = new TransportRepeatEvent(this, {\n\t\t\tcallback,\n\t\t\tduration: new TimeClass(this.context, duration).toTicks(),\n\t\t\tinterval: new TimeClass(this.context, interval).toTicks(),\n\t\t\ttime: new TransportTimeClass(this.context, startTime).toTicks(),\n\t\t});\n\t\t// kick it off if the Transport is started\n\t\t// @ts-ignore\n\t\treturn this._addEvent(event, this._repeatedEvents);\n\t}\n\n\t/**\n\t * Schedule an event that will be removed after it is invoked.\n\t * @param callback The callback to invoke once.\n\t * @param time The time the callback should be invoked.\n\t * @returns The ID of the scheduled event.\n\t */\n\tscheduleOnce(callback: TransportCallback, time: TransportTime | TransportTimeClass): number {\n\t\tconst event = new TransportEvent(this, {\n\t\t\tcallback,\n\t\t\tonce: true,\n\t\t\ttime: new TransportTimeClass(this.context, time).toTicks(),\n\t\t});\n\t\treturn this._addEvent(event, this._timeline);\n\t}\n\n\t/**\n\t * Clear the passed in event id from the timeline\n\t * @param eventId The id of the event.\n\t */\n\tclear(eventId: number): this {\n\t\tif (this._scheduledEvents.hasOwnProperty(eventId)) {\n\t\t\tconst item = this._scheduledEvents[eventId.toString()];\n\t\t\titem.timeline.remove(item.event);\n\t\t\titem.event.dispose();\n\t\t\tdelete this._scheduledEvents[eventId.toString()];\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add an event to the correct timeline. Keep track of the\n\t * timeline it was added to.\n\t * @returns the event id which was just added\n\t */\n\tprivate _addEvent(event: TransportEvent, timeline: Timeline<TransportEvent>): number {\n\t\tthis._scheduledEvents[event.id.toString()] = {\n\t\t\tevent,\n\t\t\ttimeline,\n\t\t};\n\t\ttimeline.add(event);\n\t\treturn event.id;\n\t}\n\n\t/**\n\t * Remove scheduled events from the timeline after\n\t * the given time. Repeated events will be removed\n\t * if their startTime is after the given time\n\t * @param after Clear all events after this time.\n\t */\n\tcancel(after: TransportTime = 0): this {\n\t\tconst computedAfter = this.toTicks(after);\n\t\tthis._timeline.forEachFrom(computedAfter, event => this.clear(event.id));\n\t\tthis._repeatedEvents.forEachFrom(computedAfter, event => this.clear(event.id));\n\t\treturn this;\n\t}\n\n\t//-------------------------------------\n\t// \tSTART/STOP/PAUSE\n\t//-------------------------------------\n\n\t/**\n\t * Bind start/stop/pause events from the clock and emit them.\n\t */\n\tprivate _bindClockEvents(): void {\n\t\tthis._clock.on(\"start\", (time, offset) => {\n\t\t\toffset = new TicksClass(this.context, offset).toSeconds();\n\t\t\tthis.emit(\"start\", time, offset);\n\t\t});\n\n\t\tthis._clock.on(\"stop\", (time) => {\n\t\t\tthis.emit(\"stop\", time);\n\t\t});\n\n\t\tthis._clock.on(\"pause\", (time) => {\n\t\t\tthis.emit(\"pause\", time);\n\t\t});\n\t}\n\n\t/**\n\t * Returns the playback state of the source, either \"started\", \"stopped\", or \"paused\"\n\t */\n\tget state(): PlaybackState {\n\t\treturn this._clock.getStateAtTime(this.now());\n\t}\n\n\t/**\n\t * Start the transport and all sources synced to the transport.\n\t * @param  time The time when the transport should start.\n\t * @param  offset The timeline offset to start the transport.\n\t * @example\n\t * //start the transport in one second starting at beginning of the 5th measure.\n\t * Transport.start(\"+1\", \"4:0:0\");\n\t */\n\tstart(time?: Time, offset?: TransportTime): this {\n\t\tlet offsetTicks;\n\t\tif (isDefined(offset)) {\n\t\t\toffsetTicks = this.toTicks(offset);\n\t\t}\n\t\t// start the clock\n\t\tthis._clock.start(time, offsetTicks);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the transport and all sources synced to the transport.\n\t * @param time The time when the transport should stop.\n\t * @example\n\t * Transport.stop();\n\t */\n\tstop(time?: Time): this {\n\t\tthis._clock.stop(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Pause the transport and all sources synced to the transport.\n\t */\n\tpause(time?: Time): this {\n\t\tthis._clock.pause(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Toggle the current state of the transport. If it is\n\t * started, it will stop it, otherwise it will start the Transport.\n\t * @param  time The time of the event\n\t */\n\ttoggle(time?: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tif (this._clock.getStateAtTime(time) !== \"started\") {\n\t\t\tthis.start(time);\n\t\t} else {\n\t\t\tthis.stop(time);\n\t\t}\n\t\treturn this;\n\t}\n\n\t//-------------------------------------\n\t// \tSETTERS/GETTERS\n\t//-------------------------------------\n\n\t/**\n\t * The time signature as just the numerator over 4.\n\t * For example 4/4 would be just 4 and 6/8 would be 3.\n\t * @example\n\t * //common time\n\t * Transport.timeSignature = 4;\n\t * // 7/8\n\t * Transport.timeSignature = [7, 8];\n\t * //this will be reduced to a single number\n\t * Transport.timeSignature; //returns 3.5\n\t */\n\tget timeSignature(): TimeSignature {\n\t\treturn this._timeSignature;\n\t}\n\tset timeSignature(timeSig: TimeSignature) {\n\t\tif (isArray(timeSig)) {\n\t\t\ttimeSig = (timeSig[0] / timeSig[1]) * 4;\n\t\t}\n\t\tthis._timeSignature = timeSig;\n\t}\n\n\t/**\n\t * When the Transport.loop = true, this is the starting position of the loop.\n\t */\n\tget loopStart(): Time {\n\t\treturn new TimeClass(this.context, this._loopStart, \"i\").toSeconds();\n\t}\n\tset loopStart(startPosition: Time) {\n\t\tthis._loopStart = this.toTicks(startPosition);\n\t}\n\n\t/**\n\t * When the Transport.loop = true, this is the ending position of the loop.\n\t */\n\tget loopEnd(): Time {\n\t\treturn new TimeClass(this.context, this._loopEnd, \"i\").toSeconds();\n\t}\n\tset loopEnd(endPosition: Time) {\n\t\tthis._loopEnd = this.toTicks(endPosition);\n\t}\n\n\t/**\n\t * Set the loop start and stop at the same time.\n\t * @example\n\t * //loop over the first measure\n\t * Transport.setLoopPoints(0, \"1m\");\n\t * Transport.loop = true;\n\t */\n\tsetLoopPoints(startPosition: TransportTime, endPosition: TransportTime): this {\n\t\tthis.loopStart = startPosition;\n\t\tthis.loopEnd = endPosition;\n\t\treturn this;\n\t}\n\n\t/**\n\t * The swing value. Between 0-1 where 1 equal to the note + half the subdivision.\n\t */\n\tget swing(): NormalRange {\n\t\treturn this._swingAmount;\n\t}\n\tset swing(amount: NormalRange) {\n\t\t// scale the values to a normal range\n\t\tthis._swingAmount = amount;\n\t}\n\n\t/**\n\t * Set the subdivision which the swing will be applied to.\n\t * The default value is an 8th note. Value must be less\n\t * than a quarter note.\n\t */\n\tget swingSubdivision(): Subdivision {\n\t\treturn new TicksClass(this.context, this._swingTicks).toNotation();\n\t}\n\tset swingSubdivision(subdivision: Subdivision) {\n\t\tthis._swingTicks = this.toTicks(subdivision);\n\t}\n\n\t/**\n\t * The Transport's position in Bars:Beats:Sixteenths.\n\t * Setting the value will jump to that position right away.\n\t */\n\tget position(): BarsBeatsSixteenths | Time {\n\t\tconst now = this.now();\n\t\tconst ticks = this._clock.getTicksAtTime(now);\n\t\treturn new TicksClass(this.context, ticks).toBarsBeatsSixteenths();\n\t}\n\tset position(progress: Time) {\n\t\tconst ticks = this.toTicks(progress);\n\t\tthis.ticks = ticks;\n\t}\n\n\t/**\n\t * The Transport's position in seconds\n\t * Setting the value will jump to that position right away.\n\t */\n\tget seconds(): Seconds {\n\t\treturn this._clock.seconds;\n\t}\n\n\tset seconds(s: Seconds) {\n\t\tconst now = this.now();\n\t\tconst ticks = this._clock.frequency.timeToTicks(s, now);\n\t\tthis.ticks = ticks;\n\t}\n\n\t/**\n\t * The Transport's loop position as a normalized value. Always\n\t * returns 0 if the transport if loop is not true.\n\t */\n\tget progress(): NormalRange {\n\t\tif (this.loop) {\n\t\t\tconst now = this.now();\n\t\t\tconst ticks = this._clock.getTicksAtTime(now);\n\t\t\treturn (ticks - this._loopStart) / (this._loopEnd - this._loopStart);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * The transports current tick position.\n\t */\n\tget ticks(): Ticks {\n\t\treturn this._clock.ticks;\n\t}\n\tset ticks(t: Ticks) {\n\t\tif (this._clock.ticks !== t) {\n\t\t\tconst now = this.now();\n\t\t\t// stop everything synced to the transport\n\t\t\tif (this.state === \"started\") {\n\t\t\t\tthis.emit(\"stop\", now);\n\t\t\t\tthis._clock.setTicksAtTime(t, now);\n\t\t\t\t// restart it with the new time\n\t\t\t\tthis.emit(\"start\", now, this.seconds);\n\t\t\t} else {\n\t\t\t\tthis._clock.setTicksAtTime(t, now);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Get the clock's ticks at the given time.\n\t * @param  time  When to get the tick value\n\t * @return The tick value at the given time.\n\t */\n\tgetTicksAtTime(time?: Time): Ticks {\n\t\treturn Math.round(this._clock.getTicksAtTime(time));\n\t}\n\n\t/**\n\t * Return the elapsed seconds at the given time.\n\t * @param  time  When to get the elapsed seconds\n\t * @return  The number of elapsed seconds\n\t */\n\tgetSecondsAtTime(time: Time): Seconds {\n\t\treturn this._clock.getSecondsAtTime(time);\n\t}\n\n\t/**\n\t * Pulses Per Quarter note. This is the smallest resolution\n\t * the Transport timing supports. This should be set once\n\t * on initialization and not set again. Changing this value\n\t * after other objects have been created can cause problems.\n\t */\n\tget PPQ(): number {\n\t\treturn this._clock.frequency.multiplier;\n\t}\n\tset PPQ(ppq: number) {\n\t\tthis._clock.frequency.multiplier = ppq;\n\t}\n\n\t//-------------------------------------\n\t// \tSYNCING\n\t//-------------------------------------\n\n\t/**\n\t * Returns the time aligned to the next subdivision\n\t * of the Transport. If the Transport is not started,\n\t * it will return 0.\n\t * Note: this will not work precisely during tempo ramps.\n\t * @param  subdivision  The subdivision to quantize to\n\t * @return  The context time of the next subdivision.\n\t * @example\n\t * Transport.start(); //the transport must be started\n\t * Transport.nextSubdivision(\"4n\");\n\t */\n\tnextSubdivision(subdivision?: Time): Seconds {\n\t\tsubdivision = this.toTicks(subdivision);\n\t\tif (this.state !== \"started\") {\n\t\t\t// if the transport's not started, return 0\n\t\t\treturn 0;\n\t\t} else {\n\t\t\tconst now = this.now();\n\t\t\t// the remainder of the current ticks and the subdivision\n\t\t\tconst transportPos = this.getTicksAtTime(now);\n\t\t\tconst remainingTicks = subdivision - transportPos % subdivision;\n\t\t\treturn this._clock.nextTickTime(remainingTicks, now);\n\t\t}\n\t}\n\n\t/**\n\t * Attaches the signal to the tempo control signal so that\n\t * any changes in the tempo will change the signal in the same\n\t * ratio.\n\t *\n\t * @param signal\n\t * @param ratio Optionally pass in the ratio between the two signals.\n\t * \t\t\tOtherwise it will be computed based on their current values.\n\t */\n\tsyncSignal(signal: Signal<any>, ratio?: number): this {\n\t\tif (!ratio) {\n\t\t\t// get the sync ratio\n\t\t\tconst now = this.now();\n\t\t\tif (signal.getValueAtTime(now) !== 0) {\n\t\t\t\tconst bpm = this.bpm.getValueAtTime(now);\n\t\t\t\tconst computedFreq = 1 / (60 / bpm / this.PPQ);\n\t\t\t\tratio = signal.getValueAtTime(now) / computedFreq;\n\t\t\t} else {\n\t\t\t\tratio = 0;\n\t\t\t}\n\t\t}\n\t\tconst ratioSignal = new Gain(ratio);\n\t\t// @ts-ignore\n\t\tthis.bpm.connect(ratioSignal);\n\t\t// @ts-ignore\n\t\tratioSignal.connect(signal._param);\n\t\tthis._syncedSignals.push({\n\t\t\tinitial: signal.value,\n\t\t\tratio: ratioSignal,\n\t\t\tsignal,\n\t\t});\n\t\tsignal.value = 0;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unsyncs a previously synced signal from the transport's control.\n\t * See Transport.syncSignal.\n\t */\n\tunsyncSignal(signal: Signal<any>): this {\n\t\tfor (let i = this._syncedSignals.length - 1; i >= 0; i--) {\n\t\t\tconst syncedSignal = this._syncedSignals[i];\n\t\t\tif (syncedSignal.signal === signal) {\n\t\t\t\tsyncedSignal.ratio.dispose();\n\t\t\t\tsyncedSignal.signal.value = syncedSignal.initial;\n\t\t\t\tthis._syncedSignals.splice(i, 1);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._clock.dispose();\n\t\twritable(this, \"bpm\");\n\t\tthis._timeline.dispose();\n\t\tthis._repeatedEvents.dispose();\n\t\treturn this;\n\t}\n\n\t//-------------------------------------\n\t// EMITTER MIXIN TO SATISFY COMPILER\n\t//-------------------------------------\n\n\ton!: (event: TransportEventNames, callback: (...args: any[]) => void) => this;\n\tonce!: (event: TransportEventNames, callback: (...args: any[]) => void) => this;\n\toff!: (event: TransportEventNames, callback?: ((...args: any[]) => void) | undefined) => this;\n\temit!: (event: any, ...args: any[]) => this;\n}\n\nEmitter.mixin(Transport);\n\n//-------------------------------------\n// \tINITIALIZATION\n//-------------------------------------\n\nonContextInit(context => {\n\tcontext.transport = new Transport({ context });\n});\n\nonContextClose(context => {\n\tcontext.transport.dispose();\n});\n","import { Volume } from \"../component/channel/Volume\";\nimport \"../core/context/Destination\";\nimport { Param } from \"../core/context/Param\";\nimport { OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { Decibels, Seconds, Time } from \"../core/type/Units\";\nimport { defaultArg } from \"../core/util/Defaults\";\nimport { noOp, readOnly } from \"../core/util/Interface\";\nimport { BasicPlaybackState, StateTimeline } from \"../core/util/StateTimeline\";\nimport { isUndef } from \"../core/util/TypeCheck\";\n\ntype onStopCallback = (source: Source<any>) => void;\n\nexport interface SourceOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n\tmute: boolean;\n\tonstop: onStopCallback;\n}\n\n/**\n * Base class for sources. Sources have start/stop methods\n * and the ability to be synced to the\n * start/stop of this.context.transport.\n *\n * @example\n * //Multiple state change events can be chained together,\n * //but must be set in the correct order and with ascending times\n *\n * // OK\n * state.start().stop(\"+0.2\");\n * // AND\n * state.start().stop(\"+0.2\").start(\"+0.4\").stop(\"+0.7\")\n *\n * // BAD\n * state.stop(\"+0.2\").start();\n * // OR\n * state.start(\"+0.3\").stop(\"+0.2\");\n *\n */\nexport abstract class Source<Options extends SourceOptions> extends ToneAudioNode<Options> {\n\n\t/**\n\t * The output volume node\n\t */\n\tprivate _volume: Volume;\n\n\t/**\n\t * The output note\n\t */\n\toutput: OutputNode;\n\n\t/**\n\t * Sources have no inputs\n\t */\n\tinput = undefined;\n\n\t/**\n\t * The volume of the output in decibels.\n\t * @example\n\t * source.volume.value = -6;\n\t */\n\tvolume: Param<Decibels>;\n\n\t/**\n\t * The callback to invoke when the source is stopped.\n\t */\n\tonstop: onStopCallback;\n\n\t/**\n\t * Keep track of the scheduled state.\n\t */\n\tprotected _state: StateTimeline<{\n\t\tduration?: Seconds;\n\t\toffset?: Seconds;\n\t\t/**\n\t\t * Either the buffer is explicitly scheduled to end using the stop method,\n\t\t * or it's implicitly ended when the buffer is over.\n\t\t */\n\t\timplicitEnd?: boolean;\n\t}> = new StateTimeline(\"stopped\");\n\n\t/**\n\t * The synced `start` callback function from the transport\n\t */\n\tprotected _synced: boolean = false;\n\n\t/**\n\t * Keep track of all of the scheduled event ids\n\t */\n\tprivate _scheduled: number[] = [];\n\n\t/**\n\t * Placeholder functions for syncing/unsyncing to transport\n\t */\n\tprivate _syncedStart: (time: Seconds, offset: Seconds) => void = noOp;\n\tprivate _syncedStop: (time: Seconds) => void = noOp;\n\n\tconstructor(options: SourceOptions) {\n\t\tsuper(options);\n\t\tthis._state.memory = 100;\n\n\t\tthis._volume = this.output = new Volume({\n\t\t\tcontext: this.context,\n\t\t\tmute: options.mute,\n\t\t\tvolume: options.volume,\n\t\t});\n\t\tthis.volume = this._volume.volume;\n\t\treadOnly(this, \"volume\");\n\t\tthis.onstop = options.onstop;\n\t}\n\n\tstatic getDefaults(): SourceOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmute: false,\n\t\t\tonstop: noOp,\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Returns the playback state of the source, either \"started\" or \"stopped\".\n\t */\n\tget state(): BasicPlaybackState {\n\t\tif (this._synced) {\n\t\t\tif (this.context.transport.state === \"started\") {\n\t\t\t\treturn this._state.getValueAtTime(this.context.transport.seconds) as BasicPlaybackState;\n\t\t\t} else {\n\t\t\t\treturn \"stopped\";\n\t\t\t}\n\t\t} else {\n\t\t\treturn this._state.getValueAtTime(this.now()) as BasicPlaybackState;\n\t\t}\n\t}\n\n\t/**\n\t * Mute the output.\n\t * @example\n\t * //mute the output\n\t * source.mute = true;\n\t */\n\tget mute(): boolean {\n\t\treturn this._volume.mute;\n\t}\n\tset mute(mute: boolean) {\n\t\tthis._volume.mute = mute;\n\t}\n\n\t// overwrite these functions\n\tprotected abstract _start(time: Time, offset?: Time, duration?: Time): void;\n\tprotected abstract _stop(time: Time): void;\n\tabstract restart(time: Time, offset?: Time, duration?: Time): this;\n\n\t/**\n\t * Ensure that the scheduled time is not before the current time.\n\t * Should only be used when scheduled unsynced.\n\t */\n\tprivate _clampToCurrentTime(time: Seconds): Seconds {\n\t\tif (this._synced) {\n\t\t\treturn time;\n\t\t} else {\n\t\t\treturn Math.max(time, this.context.currentTime);\n\t\t}\n\t}\n\n\t/**\n\t * Start the source at the specified time. If no time is given,\n\t * start the source now.\n\t * @param  time When the source should be started.\n\t * @example\n\t * source.start(\"+0.5\"); //starts the source 0.5 seconds from now\n\t */\n\tstart(time?: Time, offset?: Time, duration?: Time): this {\n\t\tlet computedTime = isUndef(time) && this._synced ? this.context.transport.seconds : this.toSeconds(time);\n\t\tcomputedTime = this._clampToCurrentTime(computedTime);\n\t\tthis.log(\"start\", computedTime);\n\t\t// if it's started, stop it and restart it\n\t\tif (this._state.getValueAtTime(computedTime) === \"started\") {\n\t\t\tthis._state.cancel(computedTime);\n\t\t\tthis._state.setStateAtTime(\"started\", computedTime);\n\t\t\tthis.restart(computedTime, offset, duration);\n\t\t} else {\n\t\t\tthis._state.setStateAtTime(\"started\", computedTime);\n\t\t\tif (this._synced) {\n\t\t\t\t// add the offset time to the event\n\t\t\t\tconst event = this._state.get(computedTime);\n\t\t\t\tif (event) {\n\t\t\t\t\tevent.offset = this.toSeconds(defaultArg(offset, 0));\n\t\t\t\t\tevent.duration = duration ? this.toSeconds(duration) : undefined;\n\t\t\t\t}\n\t\t\t\tconst sched = this.context.transport.schedule(t => {\n\t\t\t\t\tthis._start(t, offset, duration);\n\t\t\t\t}, computedTime);\n\t\t\t\tthis._scheduled.push(sched);\n\n\t\t\t\t// if it's already started\n\t\t\t\tif (this.context.transport.state === \"started\") {\n\t\t\t\t\tthis._syncedStart(this.now(), this.context.transport.seconds);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._start(computedTime, offset, duration);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the source at the specified time. If no time is given,\n\t * stop the source now.\n\t * @param  time When the source should be stopped.\n\t * @example\n\t * source.stop(); // stops the source immediately\n\t */\n\tstop(time?: Time): this {\n\t\tlet computedTime = isUndef(time) && this._synced ? this.context.transport.seconds : this.toSeconds(time);\n\t\tcomputedTime = this._clampToCurrentTime(computedTime);\n\t\tthis.log(\"stop\", computedTime);\n\t\tif (!this._synced) {\n\t\t\tthis._stop(computedTime);\n\t\t} else {\n\t\t\tconst sched = this.context.transport.schedule(this._stop.bind(this), computedTime);\n\t\t\tthis._scheduled.push(sched);\n\t\t}\n\t\tthis._state.cancel(computedTime);\n\t\tthis._state.setStateAtTime(\"stopped\", computedTime);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sync the source to the Transport so that all subsequent\n\t * calls to `start` and `stop` are synced to the TransportTime\n\t * instead of the AudioContext time.\n\t *\n\t * @example\n\t * //sync the source so that it plays between 0 and 0.3 on the Transport's timeline\n\t * source.sync().start(0).stop(0.3);\n\t * //start the transport.\n\t * this.context.transport.start();\n\t *\n\t * @example\n\t * //start the transport with an offset and the sync'ed sources\n\t * //will start in the correct position\n\t * source.sync().start(0.1);\n\t * //the source will be invoked with an offset of 0.4 = (0.5 - 0.1)\n\t * this.context.transport.start(\"+0.5\", 0.5);\n\t */\n\tsync(): this {\n\t\tif (!this._synced) {\n\t\t\tthis._synced = true;\n\t\t\tthis._syncedStart = (time, offset) => {\n\t\t\t\tif (offset > 0) {\n\t\t\t\t\t// get the playback state at that time\n\t\t\t\t\tconst stateEvent = this._state.get(offset);\n\t\t\t\t\t// listen for start events which may occur in the middle of the sync'ed time\n\t\t\t\t\tif (stateEvent && stateEvent.state === \"started\" && stateEvent.time !== offset) {\n\t\t\t\t\t\t// get the offset\n\t\t\t\t\t\tconst startOffset = offset - this.toSeconds(stateEvent.time);\n\t\t\t\t\t\tlet duration;\n\t\t\t\t\t\tif (stateEvent.duration) {\n\t\t\t\t\t\t\tduration = this.toSeconds(stateEvent.duration) - startOffset;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._start(time, this.toSeconds(stateEvent.offset) + startOffset, duration);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis._syncedStop = time => {\n\t\t\t\tconst seconds = this.context.transport.getSecondsAtTime(Math.max(time - this.sampleTime, 0));\n\t\t\t\tif (this._state.getValueAtTime(seconds) === \"started\") {\n\t\t\t\t\tthis._stop(time);\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis.context.transport.on(\"start\", this._syncedStart);\n\t\t\tthis.context.transport.on(\"loopStart\", this._syncedStart);\n\t\t\tthis.context.transport.on(\"stop\", this._syncedStop);\n\t\t\tthis.context.transport.on(\"pause\", this._syncedStop);\n\t\t\tthis.context.transport.on(\"loopEnd\", this._syncedStop);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unsync the source to the Transport. See Source.sync\n\t */\n\tunsync(): this {\n\t\tif (this._synced) {\n\t\t\tthis.context.transport.off(\"stop\", this._syncedStop);\n\t\t\tthis.context.transport.off(\"pause\", this._syncedStop);\n\t\t\tthis.context.transport.off(\"loopEnd\", this._syncedStop);\n\t\t\tthis.context.transport.off(\"start\", this._syncedStart);\n\t\t\tthis.context.transport.off(\"loopStart\", this._syncedStart);\n\t\t}\n\t\tthis._synced = false;\n\t\t// clear all of the scheduled ids\n\t\tthis._scheduled.forEach(id => this.context.transport.clear(id));\n\t\tthis._scheduled = [];\n\t\tthis._state.cancel(0);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.onstop = noOp;\n\t\tthis.unsync();\n\t\tthis._volume.dispose();\n\t\tthis._state.dispose();\n\t\treturn this;\n\t}\n}\n","import { connect } from \"../../core/Connect\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { GainFactor, Positive, Seconds, Time } from \"../../core/type/Units\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp } from \"../../core/util/Interface\";\nimport { isDefined } from \"../../core/util/TypeCheck\";\nimport { OneShotSource, OneShotSourceCurve, OneShotSourceOptions } from \"../OneShotSource\";\n\nexport type ToneBufferSourceCurve = OneShotSourceCurve;\n\nexport interface ToneBufferSourceOptions extends OneShotSourceOptions {\n\tbuffer: ToneAudioBuffer;\n\tcurve: ToneBufferSourceCurve;\n\tplaybackRate: Positive;\n\tfadeIn: Time;\n\tfadeOut: Time;\n\tloopStart: Time;\n\tloopEnd: Time;\n\tloop: boolean;\n\tonload: () => void;\n}\n\n/**\n * Wrapper around the native BufferSourceNode.\n * @category Source\n */\nexport class ToneBufferSource extends OneShotSource<ToneBufferSourceOptions> {\n\n\treadonly name: string = \"ToneBufferSource\";\n\n\t/**\n\t * The oscillator\n\t */\n\tprivate _source = this.context.createBufferSource();\n\tprotected _internalChannels = [this._source];\n\n\t/**\n\t * The frequency of the oscillator\n\t */\n\treadonly playbackRate: Param<Positive>;\n\n\t/**\n\t * The private instance of the buffer object\n\t */\n\tprivate _buffer: ToneAudioBuffer;\n\n\t/**\n\t * indicators if the source has started/stopped\n\t */\n\tprivate _sourceStarted: boolean = false;\n\tprivate _sourceStopped: boolean = false;\n\n\t/**\n\t * @param buffer The buffer to play\n\t * @param onload The callback to invoke when the buffer is done playing.\n\t */\n\tconstructor(buffer?: ToneAudioBuffer | AudioBuffer | string, onload?: () => void);\n\tconstructor(options?: Partial<ToneBufferSourceOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(ToneBufferSource.getDefaults(), arguments, [\"buffer\", \"onload\"]));\n\t\tconst options = optionsFromArguments(ToneBufferSource.getDefaults(), arguments, [\"buffer\", \"onload\"]);\n\n\t\tconnect(this._source, this._gainNode);\n\t\tthis._source.onended = () => this._stopSource();\n\n\t\t/**\n\t\t * The playbackRate of the buffer\n\t\t */\n\t\tthis.playbackRate = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._source.playbackRate,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.playbackRate,\n\t\t});\n\n\t\t// set some values initially\n\t\tthis.loop = options.loop;\n\t\tthis.loopStart = options.loopStart;\n\t\tthis.loopEnd = options.loopEnd;\n\t\tthis._buffer = new ToneAudioBuffer(options.buffer, options.onload);\n\n\t\tthis._internalChannels.push(this._source);\n\t}\n\n\tstatic getDefaults(): ToneBufferSourceOptions {\n\t\treturn Object.assign(OneShotSource.getDefaults(), {\n\t\t\tbuffer: new ToneAudioBuffer(),\n\t\t\tloop: false,\n\t\t\tloopEnd: 0,\n\t\t\tloopStart: 0,\n\t\t\tonload: noOp,\n\t\t\tplaybackRate: 1,\n\t\t});\n\t}\n\n\t/**\n\t * The fadeIn time of the amplitude envelope.\n\t */\n\tget fadeIn(): Time {\n\t\treturn this._fadeIn;\n\t}\n\tset fadeIn(t: Time) {\n\t\tthis._fadeIn = t;\n\t}\n\n\t/**\n\t * The fadeOut time of the amplitude envelope.\n\t */\n\tget fadeOut(): Time {\n\t\treturn this._fadeOut;\n\t}\n\tset fadeOut(t: Time) {\n\t\tthis._fadeOut = t;\n\t}\n\n\t/**\n\t * The curve applied to the fades, either \"linear\" or \"exponential\"\n\t */\n\tget curve(): ToneBufferSourceCurve {\n\t\treturn this._curve;\n\t}\n\tset curve(t) {\n\t\tthis._curve = t;\n\t}\n\n\t/**\n\t * Start the buffer\n\t * @param  time When the player should start.\n\t * @param  offset The offset from the beginning of the sample to start at.\n\t * @param  duration How long the sample should play. If no duration\n\t *                  is given, it will default to the full length\n\t *                  of the sample (minus any offset)\n\t * @param  gain  The gain to play the buffer back at.\n\t */\n\tstart(time?: Time, offset?: Time, duration?: Time, gain: GainFactor = 1): this {\n\t\tthis.assert(this.buffer.loaded, \"buffer is either not set or not loaded\");\n\t\tconst computedTime = this.toSeconds(time);\n\n\t\t// apply the gain envelope\n\t\tthis._startGain(computedTime, gain);\n\n\t\t// if it's a loop the default offset is the loopstart point\n\t\tif (this.loop) {\n\t\t\toffset = defaultArg(offset, this.loopStart);\n\t\t} else {\n\t\t\t// otherwise the default offset is 0\n\t\t\toffset = defaultArg(offset, 0);\n\t\t}\n\t\t// make sure the offset is not less than 0\n\t\tlet computedOffset = Math.max(this.toSeconds(offset), 0);\n\n\t\t// start the buffer source\n\t\tif (this.loop) {\n\t\t\t// modify the offset if it's greater than the loop time\n\t\t\tconst loopEnd = this.toSeconds(this.loopEnd) || this.buffer.duration;\n\t\t\tconst loopStart = this.toSeconds(this.loopStart);\n\t\t\tconst loopDuration = loopEnd - loopStart;\n\t\t\t// move the offset back\n\t\t\tif (computedOffset >= loopEnd) {\n\t\t\t\tcomputedOffset = ((computedOffset - loopStart) % loopDuration) + loopStart;\n\t\t\t}\n\t\t}\n\n\t\t// this.buffer.loaded would have return false if the AudioBuffer was undefined\n\t\tthis._source.buffer = this.buffer.get() as AudioBuffer;\n\t\tthis._source.loopEnd = this.toSeconds(this.loopEnd) || this.buffer.duration;\n\t\tif (computedOffset < this.buffer.duration) {\n\t\t\tthis._sourceStarted = true;\n\t\t\tthis._source.start(computedTime, computedOffset);\n\t\t}\n\n\t\t// if a duration is given, schedule a stop\n\t\tif (isDefined(duration)) {\n\t\t\tlet computedDur = this.toSeconds(duration);\n\t\t\t// make sure it's never negative\n\t\t\tcomputedDur = Math.max(computedDur, 0);\n\t\t\tthis.stop(computedTime + computedDur);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\tprotected _stopSource(time?: Seconds): void {\n\t\tif (!this._sourceStopped) {\n\t\t\tthis._sourceStopped = true;\n\t\t\tthis._source.stop(this.toSeconds(time));\n\t\t\tthis._onended();\n\t\t}\n\t}\n\n\t/**\n\t * If loop is true, the loop will start at this position.\n\t */\n\tget loopStart(): Time {\n\t\treturn this._source.loopStart;\n\t}\n\tset loopStart(loopStart: Time) {\n\t\tthis._source.loopStart = this.toSeconds(loopStart);\n\t}\n\n\t/**\n\t * If loop is true, the loop will end at this position.\n\t */\n\tget loopEnd(): Time {\n\t\treturn this._source.loopEnd;\n\t}\n\tset loopEnd(loopEnd: Time) {\n\t\tthis._source.loopEnd = this.toSeconds(loopEnd);\n\t}\n\n\t/**\n\t * The audio buffer belonging to the player.\n\t */\n\tget buffer(): ToneAudioBuffer {\n\t\treturn this._buffer;\n\t}\n\tset buffer(buffer: ToneAudioBuffer) {\n\t\tthis._buffer.set(buffer);\n\t}\n\n\t/**\n\t * If the buffer should loop once it's over.\n\t */\n\tget loop(): boolean {\n\t\treturn this._source.loop;\n\t}\n\tset loop(loop: boolean) {\n\t\tthis._source.loop = loop;\n\t\tif (this._sourceStarted) {\n\t\t\tthis.cancelStop();\n\t\t}\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._source.onended = null;\n\t\tthis._source.disconnect();\n\t\tthis._buffer.dispose();\n\t\tthis.playbackRate.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioBuffer } from \"../core/context/ToneAudioBuffer\";\nimport { Positive, Time } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Source, SourceOptions } from \"../source/Source\";\nimport { ToneBufferSource } from \"./buffer/ToneBufferSource\";\n\nexport type NoiseType = \"white\" | \"brown\" | \"pink\";\n\nexport interface NoiseOptions extends SourceOptions {\n\ttype: NoiseType;\n\tplaybackRate: Positive;\n\tfadeIn: Time;\n\tfadeOut: Time;\n}\n\n/**\n * Noise is a noise generator. It uses looped noise buffers to save on performance.\n * Noise supports the noise types: \"pink\", \"white\", and \"brown\". Read more about\n * colors of noise on [Wikipedia](https://en.wikipedia.org/wiki/Colors_of_noise).\n *\n * @example\n * //initialize the noise and start\n * var noise = new Noise(\"pink\").start();\n *\n * //make an autofilter to shape the noise\n * var autoFilter = new Tone.AutoFilter({\n * \t\"frequency\" : \"8m\",\n * \t\"min\" : 800,\n * \t\"max\" : 15000\n * }).connect(Tone.Destination);\n *\n * //connect the noise\n * noise.connect(autoFilter);\n * //start the autofilter LFO\n * autoFilter.start()\n * @category Source\n */\nexport class Noise extends Source<NoiseOptions> {\n\n\treadonly name: string = \"Noise\";\n\n\t/**\n\t * Private reference to the source\n\t */\n\tprivate _source: ToneBufferSource | null = null;\n\n\t/**\n\t * private reference to the type\n\t */\n\tprivate _type!: NoiseType;\n\n\t/**\n\t * The playback rate of the noise. Affects\n\t * the \"frequency\" of the noise.\n\t */\n\tprivate _playbackRate: Positive;\n\n\t/**\n\t * The fadeIn time of the amplitude envelope.\n\t */\n\tprotected _fadeIn: Time;\n\n\t/**\n\t * The fadeOut time of the amplitude envelope.\n\t */\n\tprotected _fadeOut: Time;\n\n\t/**\n\t * @param type the noise type (white|pink|brown)\n\t */\n\tconstructor(type?: NoiseType);\n\tconstructor(options?: Partial<NoiseOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Noise.getDefaults(), arguments, [\"type\"]));\n\t\tconst options = optionsFromArguments(Noise.getDefaults(), arguments, [\"type\"]);\n\n\t\tthis._playbackRate = options.playbackRate;\n\t\tthis.type = options.type;\n\t\tthis._fadeIn = options.fadeIn;\n\t\tthis._fadeOut = options.fadeOut;\n\t}\n\n\tstatic getDefaults(): NoiseOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tfadeIn: 0,\n\t\t\tfadeOut: 0,\n\t\t\tplaybackRate: 1,\n\t\t\ttype: \"white\" as NoiseType,\n\t\t});\n\t}\n\n\t/**\n\t * The type of the noise. Can be \"white\", \"brown\", or \"pink\".\n\t * @example\n\t * noise.type = \"white\";\n\t */\n\tget type(): NoiseType {\n\t\treturn this._type;\n\t}\n\tset type(type: NoiseType) {\n\t\tthis.assert(type in _noiseBuffers, \"Noise: invalid type: \" + type);\n\t\tif (this._type !== type) {\n\t\t\tthis._type = type;\n\t\t\t// if it's playing, stop and restart it\n\t\t\tif (this.state === \"started\") {\n\t\t\t\tconst now = this.now();\n\t\t\t\tthis._stop(now);\n\t\t\t\tthis._start(now);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * The playback rate of the noise. Affects\n\t * the \"frequency\" of the noise.\n\t */\n\tget playbackRate(): Positive {\n\t\treturn this._playbackRate;\n\t}\n\tset playbackRate(rate: Positive) {\n\t\tthis._playbackRate = rate;\n\t\tif (this._source) {\n\t\t\tthis._source.playbackRate.value = rate;\n\t\t}\n\t}\n\n\t/**\n\t * internal start method\n\t */\n\tprotected _start(time?: Time): void {\n\t\tconst buffer = _noiseBuffers[this._type];\n\t\tthis._source = new ToneBufferSource({\n\t\t\tbuffer,\n\t\t\tcontext: this.context,\n\t\t\tfadeIn: this._fadeIn,\n\t\t\tfadeOut: this._fadeOut,\n\t\t\tloop: true,\n\t\t\tonended: () => this.onstop(this),\n\t\t\tplaybackRate: this._playbackRate,\n\t\t}).connect(this.output);\n\t\tthis._source.start(this.toSeconds(time), Math.random() * (buffer.duration - 0.001));\n\t}\n\n\t/**\n\t * internal stop method\n\t */\n\tprotected _stop(time?: Time): void {\n\t\tif (this._source) {\n\t\t\tthis._source.stop(this.toSeconds(time));\n\t\t\tthis._source = null;\n\t\t}\n\t}\n\n\t/**\n\t * The fadeIn time of the amplitude envelope.\n\t */\n\tget fadeIn(): Time {\n\t\treturn this._fadeIn;\n\t}\n\tset fadeIn(time) {\n\t\tthis._fadeIn = time;\n\t\tif (this._source) {\n\t\t\tthis._source.fadeIn = this._fadeIn;\n\t\t}\n\t}\n\n\t/**\n\t * The fadeOut time of the amplitude envelope.\n\t */\n\tget fadeOut(): Time {\n\t\treturn this._fadeOut;\n\t}\n\tset fadeOut(time) {\n\t\tthis._fadeOut = time;\n\t\tif (this._source) {\n\t\t\tthis._source.fadeOut = this._fadeOut;\n\t\t}\n\t}\n\n\t/**\n\t * Restarts the noise.\n\t * @param  time When to restart the noise.\n\t */\n\trestart(time?: Time): this {\n\t\t// TODO could be optimized by cancelling the buffer source 'stop'\n\t\t// stop and restart\n\t\tthis._stop(time);\n\t\tthis._start(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (this._source) {\n\t\t\tthis._source.disconnect();\n\t\t}\n\t\treturn this;\n\t}\n}\n\n//--------------------\n// THE NOISE BUFFERS\n//--------------------\n\n// Noise buffer stats\nconst BUFFER_LENGTH = 44100 * 5;\nconst NUM_CHANNELS = 2;\n\n/**\n * The cached noise buffers\n */\ninterface NoiseCache {\n\t[key: string]: ToneAudioBuffer | null;\n}\n\n/**\n * Cache the noise buffers\n */\nconst _noiseCache: NoiseCache = {\n\tbrown: null,\n\tpink: null,\n\twhite: null,\n};\n\n/**\n * The noise arrays. Generated on initialization.\n * borrowed heavily from https://github.com/zacharydenton/noise.js\n * (c) 2013 Zach Denton (MIT)\n */\nconst _noiseBuffers = {\n\tget brown(): ToneAudioBuffer {\n\t\tif (!_noiseCache.brown) {\n\t\t\tconst buffer: Float32Array[] = [];\n\t\t\tfor (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {\n\t\t\t\tconst channel = new Float32Array(BUFFER_LENGTH);\n\t\t\t\tbuffer[channelNum] = channel;\n\t\t\t\tlet lastOut = 0.0;\n\t\t\t\tfor (let i = 0; i < BUFFER_LENGTH; i++) {\n\t\t\t\t\tconst white = Math.random() * 2 - 1;\n\t\t\t\t\tchannel[i] = (lastOut + (0.02 * white)) / 1.02;\n\t\t\t\t\tlastOut = channel[i];\n\t\t\t\t\tchannel[i] *= 3.5; // (roughly) compensate for gain\n\t\t\t\t}\n\t\t\t}\n\t\t\t_noiseCache.brown = new ToneAudioBuffer().fromArray(buffer);\n\t\t}\n\t\treturn _noiseCache.brown;\n\t},\n\n\tget pink(): ToneAudioBuffer {\n\t\tif (!_noiseCache.pink) {\n\t\t\tconst buffer: Float32Array[] = [];\n\t\t\tfor (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {\n\t\t\t\tconst channel = new Float32Array(BUFFER_LENGTH);\n\t\t\t\tbuffer[channelNum] = channel;\n\t\t\t\tlet b0, b1, b2, b3, b4, b5, b6;\n\t\t\t\tb0 = b1 = b2 = b3 = b4 = b5 = b6 = 0.0;\n\t\t\t\tfor (let i = 0; i < BUFFER_LENGTH; i++) {\n\t\t\t\t\tconst white = Math.random() * 2 - 1;\n\t\t\t\t\tb0 = 0.99886 * b0 + white * 0.0555179;\n\t\t\t\t\tb1 = 0.99332 * b1 + white * 0.0750759;\n\t\t\t\t\tb2 = 0.96900 * b2 + white * 0.1538520;\n\t\t\t\t\tb3 = 0.86650 * b3 + white * 0.3104856;\n\t\t\t\t\tb4 = 0.55000 * b4 + white * 0.5329522;\n\t\t\t\t\tb5 = -0.7616 * b5 - white * 0.0168980;\n\t\t\t\t\tchannel[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;\n\t\t\t\t\tchannel[i] *= 0.11; // (roughly) compensate for gain\n\t\t\t\t\tb6 = white * 0.115926;\n\t\t\t\t}\n\t\t\t}\n\t\t\t_noiseCache.pink = new ToneAudioBuffer().fromArray(buffer);\n\t\t}\n\t\treturn _noiseCache.pink;\n\t},\n\n\tget white(): ToneAudioBuffer {\n\t\tif (!_noiseCache.white) {\n\t\t\tconst buffer: Float32Array[] = [];\n\t\t\tfor (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {\n\t\t\t\tconst channel = new Float32Array(BUFFER_LENGTH);\n\t\t\t\tbuffer[channelNum] = channel;\n\t\t\t\tfor (let i = 0; i < BUFFER_LENGTH; i++) {\n\t\t\t\t\tchannel[i] = Math.random() * 2 - 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t_noiseCache.white = new ToneAudioBuffer().fromArray(buffer);\n\t\t}\n\t\treturn _noiseCache.white;\n\t},\n};\n","import { connect } from \"../../core/Connect\";\nimport { Param } from \"../../core/context/Param\";\nimport { Cents, Frequency, Seconds, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { OneShotSource, OneShotSourceOptions } from \"../OneShotSource\";\n\nexport interface ToneOscillatorNodeOptions extends OneShotSourceOptions {\n\tfrequency: Frequency;\n\tdetune: Cents;\n\ttype: OscillatorType;\n}\n\n/**\n * Wrapper around the native fire-and-forget OscillatorNode.\n * Adds the ability to reschedule the stop method.\n * ***[[Oscillator]] is better for most use-cases***\n * @category Source\n */\nexport class ToneOscillatorNode extends OneShotSource<ToneOscillatorNodeOptions> {\n\n\treadonly name: string = \"ToneOscillatorNode\";\n\n\t/**\n\t * The oscillator\n\t */\n\tprivate _oscillator = this.context.createOscillator();\n\tprotected _internalChannels = [this._oscillator];\n\n\t/**\n\t * The frequency of the oscillator\n\t */\n\treadonly frequency: Param<Frequency>;\n\n\t/**\n\t * The detune of the oscillator\n\t */\n\treadonly detune: Param<Cents>;\n\n\t/**\n\t * @param  frequency   The frequency value\n\t * @param  type  The basic oscillator type\n\t */\n\tconstructor(\n\t\tfrequency: Frequency,\n\t\ttype: OscillatorType,\n\t);\n\tconstructor(options?: Partial<ToneOscillatorNodeOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(ToneOscillatorNode.getDefaults(), arguments, [\"frequency\", \"type\"]));\n\t\tconst options = optionsFromArguments(ToneOscillatorNode.getDefaults(), arguments, [\"frequency\", \"type\"]);\n\n\t\tconnect(this._oscillator, this._gainNode);\n\n\t\tthis.type = options.type;\n\n\t\tthis.frequency = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._oscillator.frequency,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t});\n\n\t\tthis.detune = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._oscillator.detune,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune,\n\t\t});\n\t}\n\n\tstatic getDefaults(): ToneOscillatorNodeOptions {\n\t\treturn Object.assign(OneShotSource.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tfrequency: 440,\n\t\t\ttype: \"sine\" as OscillatorType,\n\t\t});\n\t}\n\n\t/**\n\t * Start the oscillator node at the given time\n\t * @param  time When to start the oscillator\n\t */\n\tstart(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis.log(\"start\", computedTime);\n\t\tthis._startGain(computedTime);\n\t\tthis._oscillator.start(computedTime);\n\t\treturn this;\n\t}\n\n\tprotected _stopSource(time?: Seconds): void {\n\t\tthis._oscillator.stop(time);\n\t}\n\n\t/**\n\t * Sets an arbitrary custom periodic waveform given a PeriodicWave.\n\t * @param  periodicWave PeriodicWave should be created with context.createPeriodicWave\n\t */\n\tsetPeriodicWave(periodicWave: PeriodicWave): this {\n\t\tthis._oscillator.setPeriodicWave(periodicWave);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The oscillator type. Either 'sine', 'sawtooth', 'square', or 'triangle'\n\t */\n\tget type(): OscillatorType {\n\t\treturn this._oscillator.type;\n\t}\n\tset type(type: OscillatorType) {\n\t\tthis._oscillator.type = type;\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (this.state === \"started\") {\n\t\t\tthis.stop();\n\t\t}\n\t\tthis._oscillator.disconnect();\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\treturn this;\n\t}\n}\n","import { AudioRange, Cents, Degrees, Frequency, Radians, Time } from \"../../core/type/Units\";\nimport { deepEquals, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp, readOnly } from \"../../core/util/Interface\";\nimport { isDefined } from \"../../core/util/TypeCheck\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { ToneOscillatorConstructorOptions, ToneOscillatorInterface,\n\tToneOscillatorOptions, ToneOscillatorType } from \"./OscillatorInterface\";\nimport { ToneOscillatorNode } from \"./ToneOscillatorNode\";\n\nexport { ToneOscillatorOptions, ToneOscillatorType } from \"./OscillatorInterface\";\n/**\n * Oscillator supports a number of features including\n * phase rotation, multiple oscillator types (see Oscillator.type),\n * and Transport syncing (see Oscillator.syncFrequency).\n *\n * @example\n * //make and start a 440hz sine tone\n * var osc = new Oscillator(440, \"sine\").toDestination().start();\n * @category Source\n */\nexport class Oscillator extends Source<ToneOscillatorOptions> implements ToneOscillatorInterface {\n\n\treadonly name: string = \"Oscillator\";\n\n\t/**\n\t * the main oscillator\n\t */\n\tprivate _oscillator: ToneOscillatorNode | null = null;\n\n\t/**\n\t * The frequency control.\n\t */\n\tfrequency: Signal<Frequency>;\n\n\t/**\n\t * The detune control signal.\n\t */\n\tdetune: Signal<Cents>;\n\n\t/**\n\t * the periodic wave\n\t */\n\tprivate _wave?: PeriodicWave;\n\n\t/**\n\t * The partials of the oscillator\n\t */\n\tprivate _partials: number[];\n\n\t/**\n\t * The number of partials to limit or extend the periodic wave by\n\t */\n\tprivate _partialCount: number;\n\n\t/**\n\t * the phase of the oscillator between 0 - 360\n\t */\n\tprivate _phase!: Radians;\n\n\t/**\n\t * the type of the oscillator\n\t */\n\tprivate _type: ToneOscillatorType;\n\n\t/**\n\t * @param frequency Starting frequency\n\t * @param type The oscillator type. Read more about type below.\n\t */\n\tconstructor(frequency?: Frequency, type?: ToneOscillatorType);\n\tconstructor(options?: Partial<ToneOscillatorConstructorOptions>)\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Oscillator.getDefaults(), arguments, [\"frequency\", \"type\"]));\n\t\tconst options = optionsFromArguments(Oscillator.getDefaults(), arguments, [\"frequency\", \"type\"]);\n\n\t\tthis.frequency = new Signal<Frequency>({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t});\n\t\treadOnly(this, \"frequency\");\n\n\t\tthis.detune = new Signal<Cents>({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune,\n\t\t});\n\t\treadOnly(this, \"detune\");\n\n\t\tthis._partials = options.partials;\n\t\tthis._partialCount = options.partialCount;\n\t\tthis._type = options.type;\n\n\t\tif (options.partialCount && options.type !== \"custom\") {\n\t\t\tthis._type = this.baseType + options.partialCount.toString() as ToneOscillatorType;\n\t\t}\n\t\tthis.phase = options.phase;\n\t}\n\n\tstatic getDefaults(): ToneOscillatorOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tfrequency: 440,\n\t\t\tpartialCount: 0,\n\t\t\tpartials: [],\n\t\t\tphase: 0,\n\t\t\ttype: \"sine\",\n\t\t}) as ToneOscillatorOptions;\n\t}\n\n\t/**\n\t * start the oscillator\n\t */\n\tprotected _start(time?: Time): void {\n\t\tconst computedTime = this.toSeconds(time);\n\t\t// new oscillator with previous values\n\t\tconst oscillator = new ToneOscillatorNode({\n\t\t\tcontext: this.context,\n\t\t\tonended: () => this.onstop(this),\n\t\t});\n\t\tthis._oscillator = oscillator;\n\t\tif (this._wave) {\n\t\t\tthis._oscillator.setPeriodicWave(this._wave);\n\t\t} else {\n\t\t\tthis._oscillator.type = this._type as OscillatorType;\n\t\t}\n\t\t// connect the control signal to the oscillator frequency & detune\n\t\tthis._oscillator.connect(this.output);\n\t\tthis.frequency.connect(this._oscillator.frequency);\n\t\tthis.detune.connect(this._oscillator.detune);\n\n\t\t// start the oscillator\n\t\tthis._oscillator.start(computedTime);\n\t}\n\n\t/**\n\t * stop the oscillator\n\t */\n\tprotected _stop(time?: Time): void {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._oscillator) {\n\t\t\tthis._oscillator.stop(computedTime);\n\t\t}\n\t}\n\n\t/**\n\t * Restart the oscillator. Does not stop the oscillator, but instead\n\t * just cancels any scheduled 'stop' from being invoked.\n\t */\n\trestart(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis.log(\"restart\", computedTime);\n\t\tif (this._oscillator) {\n\t\t\tthis._oscillator.cancelStop();\n\t\t}\n\t\tthis._state.cancel(computedTime);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sync the signal to the Transport's bpm. Any changes to the transports bpm,\n\t * will also affect the oscillators frequency.\n\t * @example\n\t * Tone.Transport.bpm.value = 120;\n\t * osc.frequency.value = 440;\n\t * //the ration between the bpm and the frequency will be maintained\n\t * osc.syncFrequency();\n\t * Tone.Transport.bpm.value = 240;\n\t * // the frequency of the oscillator is doubled to 880\n\t */\n\tsyncFrequency(): this {\n\t\tthis.context.transport.syncSignal(this.frequency);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unsync the oscillator's frequency from the Transport.\n\t * See Oscillator.syncFrequency\n\t */\n\tunsyncFrequency(): this {\n\t\tthis.context.transport.unsyncSignal(this.frequency);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Cache the periodic waves to avoid having to redo computations\n\t */\n\tprivate static _periodicWaveCache: Array<{\n\t\tpartials: number[];\n\t\tphase: number;\n\t\ttype: string;\n\t\tpartialCount: number;\n\t\treal: Float32Array;\n\t\timag: Float32Array;\n\t}> = [];\n\n\t/**\n\t * Get a cached periodic wave. Avoids having to recompute\n\t * the oscillator values when they have already been computed\n\t * with the same values.\n\t */\n\tprivate _getCachedPeriodicWave(): [Float32Array, Float32Array] | undefined {\n\t\tif (this._type === \"custom\") {\n\t\t\tconst oscProps = Oscillator._periodicWaveCache.find(description => {\n\t\t\t\treturn description.phase === this._phase &&\n\t\t\t\t\tdeepEquals(description.partials, this._partials);\n\t\t\t});\n\t\t\treturn oscProps && [oscProps.real, oscProps.imag];\n\t\t} else {\n\t\t\tconst oscProps = Oscillator._periodicWaveCache.find(description => {\n\t\t\t\treturn description.type === this._type &&\n\t\t\t\t\tdescription.phase === this._phase;\n\t\t\t});\n\t\t\tthis._partialCount = oscProps ? oscProps.partialCount : this._partialCount;\n\t\t\treturn oscProps && [oscProps.real, oscProps.imag];\n\t\t}\n\t}\n\n\t/**\n\t * The type of the oscillator: either sine, square, triangle, or sawtooth. Also capable of\n\t * setting the first x number of partials of the oscillator. For example: \"sine4\" would\n\t * set be the first 4 partials of the sine wave and \"triangle8\" would set the first\n\t * 8 partials of the triangle wave.\n\t * <br><br>\n\t * Uses PeriodicWave internally even for native types so that it can set the phase.\n\t * PeriodicWave equations are from the\n\t * [Webkit Web Audio implementation](https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/modules/webaudio/PeriodicWave.cpp&sq=package:chromium).\n\t *\n\t * @memberOf Oscillator#\n\t * @type {string}\n\t * @name type\n\t * @example\n\t * //set it to a square wave\n\t * osc.type = \"square\";\n\t * @example\n\t * //set the first 6 partials of a sawtooth wave\n\t * osc.type = \"sawtooth6\";\n\t */\n\tget type(): ToneOscillatorType {\n\t\treturn this._type;\n\t}\n\tset type(type) {\n\t\tthis._type = type;\n\t\tconst isBasicType = [\"sine\", \"square\", \"sawtooth\", \"triangle\"].indexOf(type) !== -1;\n\t\tif (this._phase === 0 && isBasicType) {\n\t\t\tthis._wave = undefined;\n\t\t\tthis._partialCount = 0;\n\t\t\t// just go with the basic approach\n\t\t\tif (this._oscillator !== null) {\n\t\t\t\t// already tested that it's a basic type\n\t\t\t\tthis._oscillator.type = type as OscillatorType;\n\t\t\t}\n\t\t} else {\n\t\t\t// first check if the value is cached\n\t\t\tconst cache = this._getCachedPeriodicWave();\n\t\t\tif (isDefined(cache)) {\n\t\t\t\tconst [real, imag] = cache;\n\t\t\t\tthis._wave = this.context.createPeriodicWave(real, imag);\n\t\t\t\tif (this._oscillator !== null) {\n\t\t\t\t\tthis._oscillator.setPeriodicWave(this._wave);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst [real, imag] = this._getRealImaginary(type, this._phase);\n\t\t\t\tconst periodicWave = this.context.createPeriodicWave(real, imag);\n\t\t\t\tthis._wave = periodicWave;\n\t\t\t\tif (this._oscillator !== null) {\n\t\t\t\t\tthis._oscillator.setPeriodicWave(this._wave);\n\t\t\t\t}\n\t\t\t\t// set the cache\n\t\t\t\tOscillator._periodicWaveCache.push({\n\t\t\t\t\timag,\n\t\t\t\t\tpartialCount: this._partialCount,\n\t\t\t\t\tpartials: this._partials,\n\t\t\t\t\tphase: this._phase,\n\t\t\t\t\treal,\n\t\t\t\t\ttype: this._type,\n\t\t\t\t});\n\t\t\t\tif (Oscillator._periodicWaveCache.length > 100) {\n\t\t\t\t\tOscillator._periodicWaveCache.shift();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * The oscillator type without the partialsCount appended to the end\n\t * @example\n\t * osc.type = 'sine2'\n\t * osc.baseType //'sine'\n\t * osc.partialCount = 2\n\t */\n\tget baseType(): OscillatorType {\n\t\treturn (this._type as string).replace(this.partialCount.toString(), \"\") as OscillatorType;\n\t}\n\tset baseType(baseType) {\n\t\tif (this.partialCount && this._type !== \"custom\" && baseType !== \"custom\") {\n\t\t\tthis.type = baseType + this.partialCount as ToneOscillatorType;\n\t\t} else {\n\t\t\tthis.type = baseType;\n\t\t}\n\t}\n\n\t/**\n\t * 'partialCount' offers an alternative way to set the number of used partials.\n\t * When partialCount is 0, the maximum number of partials are used when representing\n\t * the waveform using the periodicWave. When 'partials' is set, this value is\n\t * not settable, but equals the length of the partials array.\n\t * @example\n\t * osc.type = 'sine'\n\t * osc.partialCount = 3\n\t * //is equivalent to\n\t * osc.type = 'sine3'\n\t */\n\tget partialCount(): number {\n\t\treturn this._partialCount;\n\t}\n\tset partialCount(p) {\n\t\tlet type = this._type;\n\t\tconst partial = /^(sine|triangle|square|sawtooth)(\\d+)$/.exec(this._type);\n\t\tif (partial) {\n\t\t\ttype = partial[1] as OscillatorType;\n\t\t}\n\t\tif (this._type !== \"custom\") {\n\t\t\tif (p === 0) {\n\t\t\t\tthis.type = type;\n\t\t\t} else {\n\t\t\t\tthis.type = type + p.toString() as ToneOscillatorType;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Get the object's attributes. Given no arguments get\n\t * will return all available object properties and their corresponding\n\t * values.\n\t */\n\tget(): ToneOscillatorOptions {\n\t\tconst values = super.get();\n\t\tif (values.type !== \"custom\") {\n\t\t\tdelete values.partials;\n\t\t}\n\t\treturn values;\n\t}\n\n\t/**\n\t * Returns the real and imaginary components based\n\t * on the oscillator type.\n\t * @returns [real: Float32Array, imaginary: Float32Array]\n\t */\n\tprivate _getRealImaginary(type: ToneOscillatorType, phase: Radians): Float32Array[] {\n\t\tconst fftSize = 4096;\n\t\tlet periodicWaveSize = fftSize / 2;\n\n\t\tconst real = new Float32Array(periodicWaveSize);\n\t\tconst imag = new Float32Array(periodicWaveSize);\n\n\t\tlet partialCount = 1;\n\t\tif (type === \"custom\") {\n\t\t\tpartialCount = this._partials.length + 1;\n\t\t\tthis._partialCount = this._partials.length;\n\t\t\tperiodicWaveSize = partialCount;\n\t\t\t// if the partial count is 0, don't bother doing any computation\n\t\t\tif (this._partials.length === 0) {\n\t\t\t\treturn [real, imag];\n\t\t\t}\n\t\t} else {\n\t\t\tconst partial = /^(sine|triangle|square|sawtooth)(\\d+)$/.exec(type);\n\t\t\tif (partial) {\n\t\t\t\tpartialCount = parseInt(partial[2], 10) + 1;\n\t\t\t\tthis._partialCount = parseInt(partial[2], 10);\n\t\t\t\ttype = partial[1] as ToneOscillatorType;\n\t\t\t\tpartialCount = Math.max(partialCount, 2);\n\t\t\t\tperiodicWaveSize = partialCount;\n\t\t\t} else {\n\t\t\t\tthis._partialCount = 0;\n\t\t\t}\n\t\t\tthis._partials = [];\n\t\t}\n\n\t\tfor (let n = 1; n < periodicWaveSize; ++n) {\n\t\t\tconst piFactor = 2 / (n * Math.PI);\n\t\t\tlet b;\n\t\t\tswitch (type) {\n\t\t\t\tcase \"sine\":\n\t\t\t\t\tb = (n <= partialCount) ? 1 : 0;\n\t\t\t\t\tthis._partials[n - 1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"square\":\n\t\t\t\t\tb = (n & 1) ? 2 * piFactor : 0;\n\t\t\t\t\tthis._partials[n - 1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"sawtooth\":\n\t\t\t\t\tb = piFactor * ((n & 1) ? 1 : -1);\n\t\t\t\t\tthis._partials[n - 1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"triangle\":\n\t\t\t\t\tif (n & 1) {\n\t\t\t\t\t\tb = 2 * (piFactor * piFactor) * ((((n - 1) >> 1) & 1) ? -1 : 1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tb = 0;\n\t\t\t\t\t}\n\t\t\t\t\tthis._partials[n - 1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"custom\":\n\t\t\t\t\tb = this._partials[n - 1];\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new TypeError(\"Oscillator: invalid type: \" + type);\n\t\t\t}\n\t\t\tif (b !== 0) {\n\t\t\t\treal[n] = -b * Math.sin(phase * n);\n\t\t\t\timag[n] = b * Math.cos(phase * n);\n\t\t\t} else {\n\t\t\t\treal[n] = 0;\n\t\t\t\timag[n] = 0;\n\t\t\t}\n\t\t}\n\t\treturn [real, imag];\n\t}\n\n\t/**\n\t * Compute the inverse FFT for a given phase.\n\t */\n\tprivate _inverseFFT(real: Float32Array, imag: Float32Array, phase: Radians): number {\n\t\tlet sum = 0;\n\t\tconst len = real.length;\n\t\tfor (let i = 0; i < len; i++) {\n\t\t\tsum += real[i] * Math.cos(i * phase) + imag[i] * Math.sin(i * phase);\n\t\t}\n\t\treturn sum;\n\t}\n\n\t/**\n\t * Returns the initial value of the oscillator when stopped.\n\t * E.g. a \"sine\" oscillator with phase = 90 would return an initial value of -1.\n\t */\n\tgetInitialValue(): AudioRange {\n\t\tconst [real, imag] = this._getRealImaginary(this._type, 0);\n\t\tlet maxValue = 0;\n\t\tconst twoPi = Math.PI * 2;\n\t\tconst testPositions = 32;\n\t\t// check for peaks in 16 places\n\t\tfor (let i = 0; i < testPositions; i++) {\n\t\t\tmaxValue = Math.max(this._inverseFFT(real, imag, (i / testPositions) * twoPi), maxValue);\n\t\t}\n\t\treturn -this._inverseFFT(real, imag, this._phase) / maxValue;\n\t}\n\n\t/**\n\t * The partials of the waveform. A partial represents\n\t * the amplitude at a harmonic. The first harmonic is the\n\t * fundamental frequency, the second is the octave and so on\n\t * following the harmonic series.\n\t * Setting this value will automatically set the type to \"custom\".\n\t * The value is an empty array when the type is not \"custom\".\n\t * @example\n\t * osc.partials = [1, 0.2, 0.01];\n\t */\n\tget partials(): number[] {\n\t\treturn this._partials;\n\t}\n\tset partials(partials) {\n\t\tthis._partials = partials;\n\t\tif (partials.length) {\n\t\t\tthis.type = \"custom\";\n\t\t}\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t * @example\n\t * osc.phase = 180; //flips the phase of the oscillator\n\t */\n\tget phase(): Degrees {\n\t\treturn this._phase * (180 / Math.PI);\n\t}\n\tset phase(phase) {\n\t\tthis._phase = phase * Math.PI / 180;\n\t\t// reset the type\n\t\tthis.type = this._type;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (this._oscillator !== null) {\n\t\t\tthis._oscillator.dispose();\n\t\t}\n\t\tthis._wave = undefined;\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\treturn this;\n\t}\n}\n","import { optionsFromArguments } from \"..//core/util/Defaults\";\nimport { InputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { connectSignal } from \"./Signal\";\n/**\n * A signal operator has an input and output and modifies the signal.\n */\nexport abstract class SignalOperator<Options extends ToneAudioNodeOptions> extends ToneAudioNode<Options> {\n\n\tconstructor(options?: Partial<Options>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(SignalOperator.getDefaults(), arguments, [\"context\"])));\n\t}\n\n\tconnect(destination: InputNode, outputNum: number = 0, inputNum: number = 0): this {\n\t\tconnectSignal(this, destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { isArray, isFunction, isUndef } from \"../core/util/TypeCheck\";\nimport { Signal, SignalOptions } from \"./Signal\";\nimport { SignalOperator } from \"./SignalOperator\";\n\ntype WaveShaperMappingFn = (value: number, index?: number) => number;\n\ntype WaveShaperMapping = WaveShaperMappingFn | number[] | Float32Array;\n\ninterface WaveShaperOptions extends ToneAudioNodeOptions {\n\tmapping?: WaveShaperMapping;\n\tlength: number;\n\tcurve?: number[] | Float32Array;\n}\n\n/**\n * Wraps the native Web Audio API\n * [WaveShaperNode](http://webaudio.github.io/web-audio-api/#the-waveshapernode-interface).\n *\n * @example\n * var timesTwo = new WaveShaper(function(val){\n * \treturn val * 2;\n * }, 2048);\n * @example\n * //a waveshaper can also be constructed with an array of values\n * var invert = new WaveShaper([1, -1]);\n * @category Signal\n */\nexport class WaveShaper extends SignalOperator<WaveShaperOptions> {\n\n\treadonly name: string = \"WaveShaper\";\n\n\t/**\n\t * the waveshaper node\n\t */\n\tprivate _shaper: WaveShaperNode = this.context.createWaveShaper();\n\n\t/**\n\t * The input to the waveshaper node.\n\t */\n\tinput = this._shaper;\n\n\t/**\n\t * The output from the waveshaper node\n\t */\n\toutput = this._shaper;\n\n\t/**\n\t * @param mapping The function used to define the values.\n\t *                The mapping function should take two arguments:\n\t *                the first is the value at the current position\n\t *                and the second is the array position.\n\t *                If the argument is an array, that array will be\n\t *                set as the wave shaping function. The input\n\t *                signal is an AudioRange [-1, 1] value and the output\n\t *                signal can take on any numerical values.\n\t *\n\t * @param bufferLen The length of the WaveShaperNode buffer.\n\t */\n\tconstructor(mapping?: WaveShaperMapping, length?: number);\n\tconstructor(options?: Partial<WaveShaperOptions>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(WaveShaper.getDefaults(), arguments, [\"mapping\", \"length\"])));\n\t\tconst options = optionsFromArguments(WaveShaper.getDefaults(), arguments, [\"mapping\", \"length\"]);\n\n\t\tif (isArray(options.mapping) || options.mapping instanceof Float32Array) {\n\t\t\tthis.curve = Float32Array.from(options.mapping);\n\t\t} else if (isFunction(options.mapping)) {\n\t\t\tthis.setMap(options.mapping, options.length);\n\t\t}\n\t}\n\n\tstatic getDefaults(): WaveShaperOptions {\n\t\treturn Object.assign(Signal.getDefaults(), {\n\t\t\tlength: 1024,\n\t\t});\n\t}\n\n\t/**\n\t * Uses a mapping function to set the value of the curve.\n\t * @param mapping The function used to define the values.\n\t *                The mapping function take two arguments:\n\t *                the first is the value at the current position\n\t *                which goes from -1 to 1 over the number of elements\n\t *                in the curve array. The second argument is the array position.\n\t * @example\n\t * //map the input signal from [-1, 1] to [0, 10]\n\t * shaper.setMap(function(val, index){\n\t * \treturn (val + 1) * 5;\n\t * })\n\t */\n\tsetMap(mapping: WaveShaperMappingFn, length: number = 1024): this {\n\t\tconst array = new Float32Array(length);\n\t\tfor (let i = 0, len = length; i < len; i++) {\n\t\t\tconst normalized = (i / (len - 1)) * 2 - 1;\n\t\t\tarray[i] = mapping(normalized, i);\n\t\t}\n\t\tthis.curve = array;\n\t\treturn this;\n\t}\n\n\t/**\n\t * The array to set as the waveshaper curve. For linear curves\n\t * array length does not make much difference, but for complex curves\n\t * longer arrays will provide smoother interpolation.\n\t */\n\tget curve(): Float32Array | null {\n\t\treturn this._shaper.curve;\n\t}\n\n\tset curve(mapping: Float32Array | null) {\n\t\tthis._shaper.curve = mapping;\n\t}\n\n\t/**\n\t * Specifies what type of oversampling (if any) should be used when\n\t * applying the shaping curve. Can either be \"none\", \"2x\" or \"4x\".\n\t */\n\tget oversample(): OverSampleType {\n\t\treturn this._shaper.oversample;\n\t}\n\n\tset oversample(oversampling: OverSampleType) {\n\t\tconst isOverSampleType = [\"none\", \"2x\", \"4x\"].some(str => str.includes(oversampling));\n\t\tthis.assert(isOverSampleType, \"oversampling must be either 'none', '2x', or '4x'\");\n\t\tthis._shaper.oversample = oversampling;\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._shaper.disconnect();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { SignalOperator } from \"./SignalOperator\";\nimport { WaveShaper } from \"./WaveShaper\";\n\n/**\n * AudioToGain converts an input in AudioRange [-1,1] to NormalRange [0,1].\n * See {@link GainToAudio}.\n *\n * @example\n * var a2g = new AudioToGain();\n * @category Signal\n */\nexport class AudioToGain extends SignalOperator<ToneAudioNodeOptions> {\n\n\treadonly name: string = \"AudioToGain\";\n\n\t/**\n\t * The node which converts the audio ranges\n\t */\n\tprivate _norm = new WaveShaper({\n\t\tcontext: this.context,\n\t\tmapping: x => (x + 1) / 2,\n\t});\n\n\t/**\n\t * The AudioRange input [-1, 1]\n\t */\n\tinput = this._norm;\n\n\t/**\n\t * The GainRange output [0, 1]\n\t */\n\toutput = this._norm;\n\n\t/**\n\t * clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._norm.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../core/context/Gain\";\nimport { Param } from \"../core/context/Param\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Signal, SignalOptions } from \"./Signal\";\n\n/**\n * Multiply two incoming signals. Or, if a number is given in the constructor,\n * multiplies the incoming signal by that value.\n *\n * @example\n * const mult = new Multiply();\n * const sigA = new Tone.Signal(3);\n * const sigB = new Tone.Signal(4);\n * sigA.connect(mult);\n * sigB.connect(mult.factor);\n * //output of mult is 12.\n * @example\n * const mult = new Multiply(10);\n * const sig = new Tone.Signal(2).connect(mult);\n * //the output of mult is 20.\n * @category Signal\n */\nexport class Multiply extends Signal<number> {\n\n\treadonly name: string = \"Multiply\";\n\n\t/**\n\t * Indicates if the value should be overridden on connection\n\t */\n\treadonly override = false;\n\n\t/**\n\t * the input gain node\n\t */\n\tprivate _mult: Gain = new Gain({ context: this.context });\n\n\t/**\n\t * The multiplicand input.\n\t */\n\tinput = this._mult;\n\n\t/**\n\t * The product of the input and {@link factor}\n\t */\n\toutput = this._mult;\n\n\t/**\n\t * The multiplication factor. Can be set directly or a signal can be connected to it.\n\t */\n\tfactor: Param<number>;\n\n\t/**\n\t * @param value Constant value to multiple\n\t */\n\tconstructor(value?: number);\n\tconstructor(options?: Partial<SignalOptions<number>>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Multiply.getDefaults(), arguments, [\"value\"])));\n\t\tconst options = optionsFromArguments(Multiply.getDefaults(), arguments, [\"value\"]);\n\n\t\tthis.factor = this._param = this._mult.gain as unknown as Param<number>;\n\t\tthis.factor.setValueAtTime(options.value, 0);\n\t}\n\n\tstatic getDefaults(): SignalOptions<number> {\n\t\treturn Object.assign(Signal.getDefaults(), {\n\t\t\tvalue: 0,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._mult.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { Cents, Degrees, Frequency, Positive, Seconds, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { AudioToGain } from \"../../signal/AudioToGain\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { AMConstructorOptions, AMOscillatorOptions,\n\tNonCustomOscillatorType, ToneOscillatorInterface,\n\tToneOscillatorType } from \"./OscillatorInterface\";\n\nexport { AMOscillatorOptions } from \"./OscillatorInterface\";\n\n/**\n * An amplitude modulated oscillator node. It is implemented with\n * two oscillators, one which modulators the other's amplitude\n * through a gain node.\n * ```\n *    +-------------+       +----------+\n *    | Carrier Osc +>------> GainNode |\n *    +-------------+       |          +--->Output\n *                      +---> gain     |\n * +---------------+    |   +----------+\n * | Modulator Osc +>---+\n * +---------------+\n * ```\n *\n * @example\n * //a sine oscillator amplitude-modulated by a square wave\n * var amOsc = new AMOscillator(\"Ab3\", \"sine\", \"square\").toDestination().start();\n * @category Source\n */\nexport class AMOscillator extends Source<AMOscillatorOptions> implements ToneOscillatorInterface {\n\n\treadonly name: string = \"AMOscillator\";\n\n\t/**\n\t * The carrier oscillator\n\t */\n\tprivate _carrier: Oscillator;\n\n\t/**\n\t * The oscillator's frequency\n\t */\n\treadonly frequency: Signal<Frequency>;\n\n\t/**\n\t * The detune control signal.\n\t */\n\treadonly detune: Signal<Cents>;\n\n\t/**\n\t * The modulating oscillator\n\t */\n\tprivate _modulator: Oscillator;\n\n\t/**\n\t * convert the -1,1 output to 0,1\n\t */\n\tprivate _modulationScale = new AudioToGain({ context: this.context });\n\n\t/**\n\t * Harmonicity is the frequency ratio between the carrier and the modulator oscillators.\n\t * A harmonicity of 1 gives both oscillators the same frequency.\n\t * Harmonicity = 2 means a change of an octave.\n\t * @example\n\t * //pitch the modulator an octave below carrier\n\t * synth.harmonicity.value = 0.5;\n\t */\n\treadonly harmonicity: Signal<Positive>;\n\n\t/**\n\t * the node where the modulation happens\n\t */\n\tprivate _modulationNode = new Gain({\n\t\tcontext: this.context,\n\t});\n\n\t/**\n\t * @param frequency The starting frequency of the oscillator.\n\t * @param type The type of the carrier oscillator.\n\t * @param modulationType The type of the modulator oscillator.\n\t */\n\tconstructor(frequency?: Frequency, type?: ToneOscillatorType, modulationType?: ToneOscillatorType);\n\tconstructor(options?: Partial<AMConstructorOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(AMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]));\n\t\tconst options = optionsFromArguments(AMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]);\n\n\t\tthis._carrier = new Oscillator({\n\t\t\tcontext: this.context,\n\t\t\tdetune: options.detune,\n\t\t\tfrequency: options.frequency,\n\t\t\tonstop: () => this.onstop(this),\n\t\t\tphase: options.phase,\n\t\t\ttype: options.type,\n\t\t} as OscillatorOptions);\n\t\tthis.frequency = this._carrier.frequency,\n\t\tthis.detune = this._carrier.detune;\n\n\t\tthis._modulator = new Oscillator({\n\t\t\tcontext: this.context,\n\t\t\tphase: options.phase,\n\t\t\ttype: options.modulationType,\n\t\t} as OscillatorOptions);\n\n\t\tthis.harmonicity = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.harmonicity,\n\t\t});\n\n\t\t// connections\n\t\tthis.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t\tthis._modulator.chain(this._modulationScale, this._modulationNode.gain);\n\t\tthis._carrier.chain(this._modulationNode, this.output);\n\n\t\treadOnly(this, [\"frequency\", \"detune\", \"harmonicity\"]);\n\t}\n\n\tstatic getDefaults(): AMOscillatorOptions {\n\t\treturn Object.assign(Oscillator.getDefaults(), {\n\t\t\tharmonicity: 1,\n\t\t\tmodulationType: \"square\" as NonCustomOscillatorType,\n\t\t});\n\t}\n\n\t/**\n\t * start the oscillator\n\t */\n\tprotected _start(time: Seconds): void {\n\t\tthis._modulator.start(time);\n\t\tthis._carrier.start(time);\n\t}\n\n\t/**\n\t * stop the oscillator\n\t */\n\tprotected _stop(time: Seconds): void {\n\t\tthis._modulator.stop(time);\n\t\tthis._carrier.stop(time);\n\t}\n\n\t/**\n\t * restart the oscillator\n\t */\n\trestart(time?: Time): this {\n\t\tthis._modulator.restart(time);\n\t\tthis._carrier.restart(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The type of the carrier oscillator\n\t */\n\tget type(): ToneOscillatorType {\n\t\treturn this._carrier.type;\n\t}\n\tset type(type: ToneOscillatorType) {\n\t\tthis._carrier.type = type;\n\t}\n\n\t/**\n\t * The oscillator type without the partialsCount appended to the end\n\t * @example\n\t * osc.type = 'sine2'\n\t * osc.baseType //'sine'\n\t * osc.partialCount = 2\n\t */\n\tget baseType(): OscillatorType {\n\t\treturn this._carrier.baseType;\n\t}\n\tset baseType(baseType: OscillatorType) {\n\t\tthis._carrier.baseType = baseType;\n\t}\n\n\t/**\n\t * 'partialCount' offers an alternative way to set the number of used partials.\n\t * When partialCount is 0, the maximum number of partials are used when representing\n\t * the waveform using the periodicWave. When 'partials' is set, this value is\n\t * not settable, but equals the length of the partials array.\n\t */\n\tget partialCount(): number {\n\t\treturn this._carrier.partialCount;\n\t}\n\n\tset partialCount(partialCount: number) {\n\t\tthis._carrier.partialCount = partialCount;\n\t}\n\n\t/**\n\t * The type of the modulator oscillator\n\t */\n\tget modulationType(): ToneOscillatorType {\n\t\treturn this._modulator.type;\n\t}\n\n\tset modulationType(type: ToneOscillatorType) {\n\t\tthis._modulator.type = type;\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._carrier.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._carrier.phase = phase;\n\t\tthis._modulator.phase = phase;\n\t}\n\n\t/**\n\t * The partials of the carrier waveform. A partial represents\n\t * the amplitude at a harmonic. The first harmonic is the\n\t * fundamental frequency, the second is the octave and so on\n\t * following the harmonic series.\n\t * Setting this value will automatically set the type to \"custom\".\n\t * The value is an empty array when the type is not \"custom\".\n\t * @example\n\t * osc.partials = [1, 0.2, 0.01];\n\t */\n\tget partials(): number[] {\n\t\treturn this._carrier.partials;\n\t}\n\tset partials(partials: number[]) {\n\t\tthis._carrier.partials = partials;\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\tthis.harmonicity.dispose();\n\t\tthis._carrier.dispose();\n\t\tthis._modulator.dispose();\n\t\tthis._modulationNode.dispose();\n\t\tthis._modulationScale.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { AudioRange, Cents, Degrees, Frequency, Positive, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { FMConstructorOptions, FMOscillatorOptions,\n\tNonCustomOscillatorType, ToneOscillatorInterface, ToneOscillatorType } from \"./OscillatorInterface\";\n\nexport { FMOscillatorOptions } from \"./OscillatorInterface\";\n/**\n * FMOscillator implements a frequency modulation synthesis\n * ```\n *                                              +-------------+\n * +---------------+        +-------------+     | Carrier Osc |\n * | Modulator Osc +>-------> GainNode    |     |             +--->Output\n * +---------------+        |             +>----> frequency   |\n *                       +--> gain        |     +-------------+\n *                       |  +-------------+\n * +-----------------+   |\n * | modulationIndex +>--+\n * +-----------------+\n * ```\n *\n * @example\n * //a sine oscillator frequency-modulated by a square wave\n * var fmOsc = new FMOscillator(\"Ab3\", \"sine\", \"square\").toDestination().start();\n * @category Source\n */\nexport class FMOscillator extends Source<FMOscillatorOptions> implements ToneOscillatorInterface {\n\n\treadonly name: string = \"FMOscillator\";\n\n\t/**\n\t * The carrier oscillator\n\t */\n\tprivate _carrier: Oscillator;\n\n\t/**\n\t * The oscillator's frequency\n\t */\n\treadonly frequency: Signal<Frequency>;\n\n\t/**\n\t * The detune control signal.\n\t */\n\treadonly detune: Signal<Cents>;\n\n\t/**\n\t * The modulating oscillator\n\t */\n\tprivate _modulator: Oscillator;\n\n\t/**\n\t * Harmonicity is the frequency ratio between the carrier and the modulator oscillators.\n\t * A harmonicity of 1 gives both oscillators the same frequency.\n\t * Harmonicity = 2 means a change of an octave.\n\t * @example\n\t * //pitch the modulator an octave below carrier\n\t * synth.harmonicity.value = 0.5;\n\t */\n\treadonly harmonicity: Signal<Positive>;\n\n\t/**\n\t * The modulation index which is in essence the depth or amount of the modulation. In other terms it is the\n\t * ratio of the frequency of the modulating signal (mf) to the amplitude of the\n\t * modulating signal (ma) -- as in ma/mf.\n\t */\n\treadonly modulationIndex: Signal<Positive>;\n\n\t/**\n\t * the node where the modulation happens\n\t */\n\tprivate _modulationNode: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\n\t/**\n\t * @param frequency The starting frequency of the oscillator.\n\t * @param type The type of the carrier oscillator.\n\t * @param modulationType The type of the modulator oscillator.\n\t */\n\tconstructor(frequency?: Frequency, type?: ToneOscillatorType, modulationType?: ToneOscillatorType);\n\tconstructor(options?: Partial<FMConstructorOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(FMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]));\n\t\tconst options = optionsFromArguments(FMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]);\n\n\t\tthis._carrier = new Oscillator({\n\t\t\tcontext: this.context,\n\t\t\tdetune: options.detune,\n\t\t\tfrequency: 0,\n\t\t\tonstop: () => this.onstop(this),\n\t\t\tphase: options.phase,\n\t\t\ttype: options.type,\n\t\t} as OscillatorOptions);\n\n\t\tthis.detune = this._carrier.detune;\n\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t});\n\n\t\tthis._modulator = new Oscillator({\n\t\t\tcontext: this.context,\n\t\t\tphase: options.phase,\n\t\t\ttype: options.modulationType,\n\t\t} as OscillatorOptions);\n\n\t\tthis.harmonicity = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.harmonicity,\n\t\t});\n\n\t\tthis.modulationIndex = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.modulationIndex,\n\t\t});\n\n\t\t// connections\n\t\tthis.frequency.connect(this._carrier.frequency);\n\t\tthis.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t\tthis.frequency.chain(this.modulationIndex, this._modulationNode);\n\t\tthis._modulator.connect(this._modulationNode.gain);\n\t\tthis._modulationNode.connect(this._carrier.frequency);\n\t\tthis._carrier.connect(this.output);\n\t\tthis.detune.connect(this._modulator.detune);\n\n\t\treadOnly(this, [\"modulationIndex\", \"frequency\", \"detune\", \"harmonicity\"]);\n\t}\n\n\tstatic getDefaults(): FMOscillatorOptions {\n\t\treturn Object.assign(Oscillator.getDefaults(), {\n\t\t\tharmonicity: 1,\n\t\t\tmodulationIndex: 2,\n\t\t\tmodulationType: \"square\" as NonCustomOscillatorType,\n\t\t});\n\t}\n\n\t/**\n\t * start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\tthis._modulator.start(time);\n\t\tthis._carrier.start(time);\n\t}\n\n\t/**\n\t * stop the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\tthis._modulator.stop(time);\n\t\tthis._carrier.stop(time);\n\t}\n\n\t/**\n\t * stop and restart the oscillator\n\t */\n\trestart(time?: Time): this {\n\t\tthis._modulator.restart(time);\n\t\tthis._carrier.restart(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The type of the carrier oscillator\n\t */\n\tget type(): ToneOscillatorType {\n\t\treturn this._carrier.type;\n\t}\n\tset type(type: ToneOscillatorType) {\n\t\tthis._carrier.type = type;\n\t}\n\n\t/**\n\t * The oscillator type without the partialsCount appended to the end\n\t * @example\n\t * osc.type = 'sine2'\n\t * osc.baseType //'sine'\n\t * osc.partialCount = 2\n\t */\n\tget baseType(): OscillatorType {\n\t\treturn this._carrier.baseType;\n\t}\n\tset baseType(baseType: OscillatorType) {\n\t\tthis._carrier.baseType = baseType;\n\t}\n\n\t/**\n\t * 'partialCount' offers an alternative way to set the number of used partials.\n\t * When partialCount is 0, the maximum number of partials are used when representing\n\t * the waveform using the periodicWave. When 'partials' is set, this value is\n\t * not settable, but equals the length of the partials array.\n\t */\n\tget partialCount(): number {\n\t\treturn this._carrier.partialCount;\n\t}\n\tset partialCount(partialCount: number) {\n\t\tthis._carrier.partialCount = partialCount;\n\t}\n\n\t/**\n\t * The type of the modulator oscillator\n\t */\n\tget modulationType(): ToneOscillatorType {\n\t\treturn this._modulator.type;\n\t}\n\tset modulationType(type: ToneOscillatorType) {\n\t\tthis._modulator.type = type;\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._carrier.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._carrier.phase = phase;\n\t\tthis._modulator.phase = phase;\n\t}\n\n\t/**\n\t * The partials of the carrier waveform. A partial represents\n\t * the amplitude at a harmonic. The first harmonic is the\n\t * fundamental frequency, the second is the octave and so on\n\t * following the harmonic series.\n\t * Setting this value will automatically set the type to \"custom\".\n\t * The value is an empty array when the type is not \"custom\".\n\t * @example\n\t * osc.partials = [1, 0.2, 0.01];\n\t */\n\tget partials(): number[] {\n\t\treturn this._carrier.partials;\n\t}\n\tset partials(partials: number[]) {\n\t\tthis._carrier.partials = partials;\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.harmonicity.dispose();\n\t\tthis._carrier.dispose();\n\t\tthis._modulator.dispose();\n\t\tthis._modulationNode.dispose();\n\t\tthis.modulationIndex.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { AudioRange, Cents, Degrees, Frequency, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { WaveShaper } from \"../../signal/WaveShaper\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { PulseOscillatorOptions, ToneOscillatorInterface } from \"./OscillatorInterface\";\n\nexport { PulseOscillatorOptions } from \"./OscillatorInterface\";\n\n/**\n * PulseOscillator is an oscillator with control over pulse width,\n * also known as the duty cycle. At 50% duty cycle (width = 0) the wave is\n * a square wave.\n * [Read more](https://wigglewave.wordpress.com/2014/08/16/pulse-waveforms-and-harmonics/).\n * ```\n *    width = -0.25        width = 0.0          width = 0.25\n *\n *   +-----+            +-------+       +    +-------+     +-+\n *   |     |            |       |       |            |     |\n *   |     |            |       |       |            |     |\n * +-+     +-------+    +       +-------+            +-----+\n *\n *\n *    width = -0.5                              width = 0.5\n *\n *     +---+                                 +-------+   +---+\n *     |   |                                         |   |\n *     |   |                                         |   |\n * +---+   +-------+                                 +---+\n *\n *\n *    width = -0.75                             width = 0.75\n *\n *       +-+                                 +-------+ +-----+\n *       | |                                         | |\n *       | |                                         | |\n * +-----+ +-------+                                 +-+\n * ```\n * @example\n * var pulse = new PulseOscillator(\"E5\", 0.4).toDestination().start();\n * @category Source\n */\nexport class PulseOscillator extends Source<PulseOscillatorOptions> implements ToneOscillatorInterface {\n\n\treadonly name: string = \"PulseOscillator\";\n\n\t/**\n\t * The width of the pulse.\n\t */\n\twidth: Signal<AudioRange>;\n\n\t/**\n\t * gate the width amount\n\t */\n\tprivate _widthGate: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\n\t/**\n\t * the sawtooth oscillator\n\t */\n\tprivate _sawtooth: Oscillator;\n\n\t/**\n\t * The frequency control.\n\t */\n\tfrequency: Signal<Frequency>;\n\n\t/**\n\t * The detune in cents.\n\t */\n\tdetune: Signal<Cents>;\n\n\t/**\n\t * Threshold the signal to turn it into a square\n\t */\n\tprivate _thresh = new WaveShaper({\n\t\tcontext: this.context,\n\t\tmapping: val => val <= 0 ? -1 : 1,\n\t});\n\n\t/**\n\t * @param frequency The frequency of the oscillator\n\t * @param width The width of the pulse\n\t */\n\tconstructor(frequency?: Frequency, width?: AudioRange);\n\tconstructor(options?: Partial<PulseOscillatorOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(PulseOscillator.getDefaults(), arguments, [\"frequency\", \"width\"]));\n\t\tconst options = optionsFromArguments(PulseOscillator.getDefaults(), arguments, [\"frequency\", \"width\"]);\n\n\t\tthis.width = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"audioRange\",\n\t\t\tvalue: options.width,\n\t\t});\n\n\t\tthis._sawtooth = new Oscillator({\n\t\t\tcontext: this.context,\n\t\t\tdetune: options.detune,\n\t\t\tfrequency: options.frequency,\n\t\t\tonstop: () => this.onstop(this),\n\t\t\tphase: options.phase,\n\t\t\ttype: \"sawtooth\",\n\t\t});\n\t\tthis.frequency = this._sawtooth.frequency;\n\t\tthis.detune = this._sawtooth.detune;\n\n\t\t// connections\n\t\tthis._sawtooth.chain(this._thresh, this.output);\n\t\tthis.width.chain(this._widthGate, this._thresh);\n\t\treadOnly(this, [\"width\", \"frequency\", \"detune\"]);\n\t}\n\n\tstatic getDefaults(): PulseOscillatorOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tfrequency: 440,\n\t\t\tphase: 0,\n\t\t\ttype: \"pulse\" as \"pulse\",\n\t\t\twidth: 0.2,\n\t\t});\n\t}\n\n\t/**\n\t * start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._sawtooth.start(time);\n\t\tthis._widthGate.gain.setValueAtTime(1, time);\n\t}\n\n\t/**\n\t * stop the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._sawtooth.stop(time);\n\t\t// the width is still connected to the output.\n\t\t// that needs to be stopped also\n\t\tthis._widthGate.gain.cancelScheduledValues(time);\n\t\tthis._widthGate.gain.setValueAtTime(0, time);\n\t}\n\n\t/**\n\t * Restart the oscillator\n\t */\n\trestart(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._sawtooth.restart(computedTime);\n\t\tthis._widthGate.gain.cancelScheduledValues(computedTime);\n\t\tthis._widthGate.gain.setValueAtTime(1, computedTime);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._sawtooth.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._sawtooth.phase = phase;\n\t}\n\n\t/**\n\t * The type of the oscillator. Always returns \"pulse\".\n\t */\n\tget type(): \"pulse\" {\n\t\treturn \"pulse\";\n\t}\n\n\t/**\n\t * The baseType of the oscillator. Always returns \"pulse\".\n\t */\n\tget baseType(): \"pulse\" {\n\t\treturn \"pulse\";\n\t}\n\n\t/**\n\t * The partials of the waveform. Cannot set partials for this waveform type\n\t */\n\tget partials(): number[] {\n\t\treturn [];\n\t}\n\n\t/**\n\t * No partials for this waveform type.\n\t */\n\tget partialCount(): number {\n\t\treturn 0;\n\t}\n\n\t/**\n\t * Clean up method.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._sawtooth.dispose();\n\t\tthis.width.dispose();\n\t\tthis._widthGate.dispose();\n\t\tthis._thresh.dispose();\n\t\treturn this;\n\t}\n}\n","import { AudioRange, Cents, Degrees, Frequency, Positive, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp, readOnly } from \"../../core/util/Interface\";\nimport { AudioToGain } from \"../../signal/AudioToGain\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { FatConstructorOptions, FatOscillatorOptions,\n\tToneOscillatorInterface, ToneOscillatorType } from \"./OscillatorInterface\";\n\nexport { FatOscillatorOptions } from \"./OscillatorInterface\";\n\n/**\n * FatOscillator is an array of oscillators with detune spread between the oscillators\n * @param frequency The oscillator's frequency.\n * @param type The type of the oscillator.\n * @param spread The detune spread between the oscillators.\n * @example\n * var fatOsc = new FatOscillator(\"Ab3\", \"sine\", 40).toDestination().start();\n * @category Source\n */\nexport class FatOscillator extends Source<FatOscillatorOptions> implements ToneOscillatorInterface {\n\n\treadonly name: string = \"FatOscillator\";\n\n\t/**\n\t * The oscillator's frequency\n\t */\n\treadonly frequency: Signal<Frequency>;\n\n\t/**\n\t * The detune control signal.\n\t */\n\treadonly detune: Signal<Cents>;\n\n\t/**\n\t * The array of oscillators\n\t */\n\tprivate _oscillators: Oscillator[] = [];\n\n\t/**\n\t * The total spread of the oscillators\n\t */\n\tprivate _spread: Cents;\n\n\t/**\n\t * The type of the oscillator\n\t */\n\tprivate _type: ToneOscillatorType;\n\n\t/**\n\t * The phase of the oscillators\n\t */\n\tprivate _phase: Degrees;\n\n\t/**\n\t * The partials array\n\t */\n\tprivate _partials: number[];\n\n\t/**\n\t * The number of partials to use\n\t */\n\tprivate _partialCount: number;\n\n\tconstructor(options?: Partial<FatConstructorOptions>);\n\tconstructor(frequency?: Frequency, type?: ToneOscillatorType, modulationType?: ToneOscillatorType);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(FatOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"spread\"]));\n\t\tconst options = optionsFromArguments(FatOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"spread\"]);\n\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t});\n\t\tthis.detune = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune,\n\t\t});\n\n\t\tthis._spread = options.spread;\n\t\tthis._type = options.type;\n\t\tthis._phase = options.phase;\n\t\tthis._partials = options.partials;\n\t\tthis._partialCount = options.partialCount;\n\n\t\t// set the count initially\n\t\tthis.count = options.count;\n\n\t\treadOnly(this, [\"frequency\", \"detune\"]);\n\t}\n\n\tstatic getDefaults(): FatOscillatorOptions {\n\t\treturn Object.assign(Oscillator.getDefaults(), {\n\t\t\tcount: 3,\n\t\t\tspread: 20,\n\t\t\ttype: \"sawtooth\",\n\t\t});\n\t}\n\n\t/**\n\t * start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._forEach(osc => osc.start(time));\n\t}\n\n\t/**\n\t * stop the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._forEach(osc => osc.stop(time));\n\t}\n\n\t/**\n\t * restart the oscillator\n\t */\n\trestart(time): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis._forEach(osc => osc.restart(time));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Iterate over all of the oscillators\n\t */\n\tprivate _forEach(iterator: (osc: Oscillator, index: number) => void): void {\n\t\tfor (let i = 0; i < this._oscillators.length; i++) {\n\t\t\titerator(this._oscillators[i], i);\n\t\t}\n\t}\n\n\t/**\n\t * The type of the oscillator\n\t */\n\tget type(): ToneOscillatorType {\n\t\treturn this._type;\n\t}\n\n\tset type(type: ToneOscillatorType) {\n\t\tthis._type = type;\n\t\tthis._forEach(osc => osc.type = type);\n\t}\n\n\t/**\n\t * The detune spread between the oscillators. If \"count\" is\n\t * set to 3 oscillators and the \"spread\" is set to 40,\n\t * the three oscillators would be detuned like this: [-20, 0, 20]\n\t * for a total detune spread of 40 cents.\n\t */\n\tget spread(): Cents {\n\t\treturn this._spread;\n\t}\n\n\tset spread(spread: Cents) {\n\t\tthis._spread = spread;\n\t\tif (this._oscillators.length > 1) {\n\t\t\tconst start = -spread / 2;\n\t\t\tconst step = spread / (this._oscillators.length - 1);\n\t\t\tthis._forEach((osc, i) => osc.detune.value = start + step * i);\n\t\t}\n\t}\n\n\t/**\n\t * The number of detuned oscillators. Should be an integer greater than 1.\n\t */\n\tget count(): number {\n\t\treturn this._oscillators.length;\n\t}\n\tset count(count: number) {\n\t\tcount = Math.max(count, 1);\n\t\tif (this._oscillators.length !== count) {\n\t\t\t// dispose the previous oscillators\n\t\t\tthis._forEach(osc => osc.dispose());\n\t\t\tthis._oscillators = [];\n\t\t\tfor (let i = 0; i < count; i++) {\n\t\t\t\tconst osc = new Oscillator({\n\t\t\t\t\tcontext: this.context,\n\t\t\t\t\tonstop: i === 0 ? () => this.onstop(this) : noOp,\n\t\t\t\t});\n\t\t\t\tif (this.type === \"custom\") {\n\t\t\t\t\tosc.partials = this._partials;\n\t\t\t\t} else {\n\t\t\t\t\tosc.type = this._type;\n\t\t\t\t}\n\t\t\t\tosc.partialCount = this._partialCount;\n\t\t\t\tosc.phase = this._phase + (i / count) * 360;\n\t\t\t\tosc.volume.value = -6 - count * 1.1;\n\t\t\t\tthis.frequency.connect(osc.frequency);\n\t\t\t\tthis.detune.connect(osc.detune);\n\t\t\t\tosc.connect(this.output);\n\t\t\t\tthis._oscillators[i] = osc;\n\t\t\t}\n\t\t\t// set the spread\n\t\t\tthis.spread = this._spread;\n\t\t\tif (this.state === \"started\") {\n\t\t\t\tthis._forEach(osc => osc.start());\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._phase = phase;\n\t\tthis._forEach(osc => osc.phase = phase);\n\t}\n\n\t/**\n\t * The oscillator type without the partialsCount appended to the end\n\t * @example\n\t * osc.type = 'sine2'\n\t * osc.baseType //'sine'\n\t * osc.partialCount = 2\n\t */\n\tget baseType(): OscillatorType {\n\t\treturn this._oscillators[0].baseType;\n\t}\n\tset baseType(baseType: OscillatorType) {\n\t\tthis._forEach(osc => osc.baseType = baseType);\n\t\tthis._type = this._oscillators[0].type;\n\t}\n\n\t/**\n\t * The partials of the carrier waveform. A partial represents\n\t * the amplitude at a harmonic. The first harmonic is the\n\t * fundamental frequency, the second is the octave and so on\n\t * following the harmonic series.\n\t * Setting this value will automatically set the type to \"custom\".\n\t * The value is an empty array when the type is not \"custom\".\n\t * @memberOf FatOscillator#\n\t * @type {Array}\n\t * @name partials\n\t * @example\n\t * osc.partials = [1, 0.2, 0.01];\n\t */\n\tget partials(): number[] {\n\t\treturn this._oscillators[0].partials;\n\t}\n\tset partials(partials: number[]) {\n\t\tthis._partials = partials;\n\t\tif (partials.length) {\n\t\t\tthis._type = \"custom\";\n\t\t\tthis._forEach(osc => osc.partials = partials);\n\t\t}\n\t}\n\n\t/**\n\t * 'partialCount' offers an alternative way to set the number of used partials.\n\t * When partialCount is 0, the maximum number of partials are used when representing\n\t * the waveform using the periodicWave. When 'partials' is set, this value is\n\t * not settable, but equals the length of the partials array.\n\t * @memberOf FatOscillator#\n\t * @type {Number}\n\t * @name partialCount\n\t */\n\tget partialCount(): number {\n\t\treturn this._oscillators[0].partialCount;\n\t}\n\tset partialCount(partialCount: number) {\n\t\tthis._partialCount = partialCount;\n\t\tthis._forEach(osc => osc.partialCount = partialCount);\n\t\tthis._type = this._oscillators[0].type;\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\tthis._forEach(osc => osc.dispose());\n\t\treturn this;\n\t}\n}\n","import { Cents, Degrees, Frequency, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { PWMOscillatorOptions, ToneOscillatorInterface } from \"./OscillatorInterface\";\nimport { PulseOscillator } from \"./PulseOscillator\";\n\nexport { PWMOscillatorOptions } from \"./OscillatorInterface\";\n\n/**\n * PWMOscillator modulates the width of a Tone.PulseOscillator\n * at the modulationFrequency. This has the effect of continuously\n * changing the timbre of the oscillator by altering the harmonics\n * generated.\n * @example\n * var pwm = new PWMOscillator(\"Ab3\", 0.3).toDestination().start();\n * @category Source\n */\nexport class PWMOscillator extends Source<PWMOscillatorOptions> implements ToneOscillatorInterface {\n\n\treadonly name: string = \"PWMOscillator\";\n\n\treadonly sourceType = \"pwm\";\n\n\t/**\n\t * the pulse oscillator\n\t */\n\tprivate _pulse: PulseOscillator;\n\t/**\n\t * the modulator\n\t */\n\tprivate _modulator: Oscillator;\n\n\t/**\n\t * Scale the oscillator so it doesn't go silent\n\t * at the extreme values.\n\t */\n\tprivate _scale: Multiply = new Multiply({\n\t\tcontext: this.context,\n\t\tvalue: 2,\n\t});\n\n\t/**\n\t * The frequency control.\n\t */\n\treadonly frequency: Signal<Frequency>;\n\n\t/**\n\t * The detune of the oscillator.\n\t */\n\treadonly detune: Signal<Cents>;\n\n\t/**\n\t * The modulation rate of the oscillator.\n\t */\n\treadonly modulationFrequency: Signal<Frequency>;\n\n\t/**\n\t * @param {Frequency} frequency The starting frequency of the oscillator.\n\t * @param {Frequency} modulationFrequency The modulation frequency of the width of the pulse.\n\t */\n\tconstructor(frequency?: Frequency, modulationFrequency?: Frequency);\n\tconstructor(options?: Partial<PWMOscillatorOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(PWMOscillator.getDefaults(), arguments, [\"frequency\", \"modulationFrequency\"]));\n\t\tconst options = optionsFromArguments(PWMOscillator.getDefaults(), arguments, [\"frequency\", \"modulationFrequency\"]);\n\n\t\tthis._pulse = new PulseOscillator({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.modulationFrequency,\n\t\t});\n\t\t// change the pulse oscillator type\n\t\t// @ts-ignore\n\t\tthis._pulse._sawtooth.type = \"sine\";\n\n\t\tthis.modulationFrequency = this._pulse.frequency;\n\n\t\tthis._modulator = new Oscillator({\n\t\t\tcontext: this.context,\n\t\t\tdetune: options.detune,\n\t\t\tfrequency: options.frequency,\n\t\t\tonstop: () => this.onstop(this),\n\t\t\tphase: options.phase,\n\t\t});\n\n\t\tthis.frequency = this._modulator.frequency;\n\t\tthis.detune = this._modulator.detune;\n\n\t\t// connections\n\t\tthis._modulator.chain(this._scale, this._pulse.width);\n\t\tthis._pulse.connect(this.output);\n\t\treadOnly(this, [\"modulationFrequency\", \"frequency\", \"detune\"]);\n\t}\n\n\tstatic getDefaults(): PWMOscillatorOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tfrequency: 440,\n\t\t\tmodulationFrequency: 0.4,\n\t\t\tphase: 0,\n\t\t\ttype: \"pwm\" as \"pwm\",\n\t\t});\n\t}\n\t/**\n\t * start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._modulator.start(time);\n\t\tthis._pulse.start(time);\n\t}\n\n\t/**\n\t * stop the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._modulator.stop(time);\n\t\tthis._pulse.stop(time);\n\t}\n\n\t/**\n\t * restart the oscillator\n\t */\n\trestart(time?: Time): this {\n\t\tthis._modulator.restart(time);\n\t\tthis._pulse.restart(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The type of the oscillator. Always returns \"pwm\".\n\t */\n\tget type(): \"pwm\" {\n\t\treturn \"pwm\";\n\t}\n\n\t/**\n\t * The baseType of the oscillator. Always returns \"pwm\".\n\t */\n\tget baseType(): \"pwm\" {\n\t\treturn \"pwm\";\n\t}\n\n\t/**\n\t * The partials of the waveform. Cannot set partials for this waveform type\n\t */\n\tget partials(): number[] {\n\t\treturn [];\n\t}\n\n\t/**\n\t * No partials for this waveform type.\n\t */\n\tget partialCount(): number {\n\t\treturn 0;\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._modulator.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._modulator.phase = phase;\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._pulse.dispose();\n\t\tthis._scale.dispose();\n\t\tthis._modulator.dispose();\n\t\treturn this;\n\t}\n}\n","import { AudioRange, Cents, Degrees, Frequency, Positive, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { isNumber, isString } from \"../../core/util/TypeCheck\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { AMOscillator } from \"./AMOscillator\";\nimport { FatOscillator } from \"./FatOscillator\";\nimport { FMOscillator } from \"./FMOscillator\";\nimport { Oscillator } from \"./Oscillator\";\nimport { OmniOscillatorConstructorOptions,\n\tOmniOscillatorOptions, OmniOscillatorType,\n\tToneOscillatorInterface, ToneOscillatorType } from \"./OscillatorInterface\";\nimport { PulseOscillator } from \"./PulseOscillator\";\nimport { PWMOscillator } from \"./PWMOscillator\";\n\nexport { OmniOscillatorOptions } from \"./OscillatorInterface\";\n\n/**\n * All of the oscillator types that OmniOscillator can take on\n */\ntype AnyOscillator = Oscillator | PWMOscillator | PulseOscillator | FatOscillator | AMOscillator | FMOscillator;\n\n/**\n * All of the Oscillator constructor types mapped to their name.\n */\ninterface OmniOscillatorSource {\n\t\"fm\": FMOscillator;\n\t\"am\": AMOscillator;\n\t\"pwm\": PWMOscillator;\n\t\"pulse\": PulseOscillator;\n\t\"oscillator\": Oscillator;\n\t\"fat\": FatOscillator;\n}\n\n/**\n * The available oscillator types.\n */\nexport type OmniOscSourceType = keyof OmniOscillatorSource;\n\n// Conditional Types\ntype IsAmOrFmOscillator<Osc, Ret> = Osc extends AMOscillator ? Ret : Osc extends FMOscillator ? Ret : undefined;\ntype IsFatOscillator<Osc, Ret> = Osc extends FatOscillator ? Ret : undefined;\ntype IsPWMOscillator<Osc, Ret> = Osc extends PWMOscillator ? Ret : undefined;\ntype IsPulseOscillator<Osc, Ret> = Osc extends PulseOscillator ? Ret : undefined;\ntype IsFMOscillator<Osc, Ret> = Osc extends FMOscillator ? Ret : undefined;\n\ntype AnyOscillatorConstructor = new (...args: any[]) => AnyOscillator;\n\nconst OmniOscillatorSourceMap: {\n\t[key in OmniOscSourceType]: AnyOscillatorConstructor\n} = {\n\tam: AMOscillator,\n\tfat: FatOscillator,\n\tfm: FMOscillator,\n\toscillator: Oscillator,\n\tpulse: PulseOscillator,\n\tpwm: PWMOscillator,\n};\n\n/**\n * OmniOscillator aggregates Tone.Oscillator, Tone.PulseOscillator,\n * Tone.PWMOscillator, Tone.FMOscillator, Tone.AMOscillator, and Tone.FatOscillator\n * into one class. The oscillator class can be changed by setting the `type`.\n * `omniOsc.type = \"pwm\"` will set it to the Tone.PWMOscillator. Prefixing\n * any of the basic types (\"sine\", \"square4\", etc.) with \"fm\", \"am\", or \"fat\"\n * will use the FMOscillator, AMOscillator or FatOscillator respectively.\n * For example: `omniOsc.type = \"fatsawtooth\"` will create set the oscillator\n * to a FatOscillator of type \"sawtooth\".\n * @example\n * var omniOsc = new OmniOscillator(\"C#4\", \"pwm\");\n * @category Source\n */\nexport class OmniOscillator<OscType extends AnyOscillator>\n\textends Source<OmniOscillatorConstructorOptions>\n\timplements Omit<ToneOscillatorInterface, \"type\"> {\n\n\treadonly name: string = \"OmniOscillator\";\n\n\t/**\n\t * The frequency control.\n\t */\n\treadonly frequency: Signal<Frequency>;\n\n\t/**\n\t * The detune control.\n\t */\n\treadonly detune: Signal<Cents>;\n\n\t/**\n\t * The oscillator that can switch types\n\t */\n\tprivate _oscillator!: AnyOscillator;\n\n\t/**\n\t * the type of the oscillator source\n\t */\n\tprivate _sourceType!: OmniOscSourceType;\n\n\t/**\n\t * @param frequency The initial frequency of the oscillator.\n\t * @param type The type of the oscillator.\n\t */\n\tconstructor(frequency?: Frequency, type?: OmniOscillatorType);\n\tconstructor(options?: Partial<OmniOscillatorConstructorOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(OmniOscillator.getDefaults(), arguments, [\"frequency\", \"type\"]));\n\t\tconst options = optionsFromArguments(OmniOscillator.getDefaults(), arguments, [\"frequency\", \"type\"]);\n\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t});\n\t\tthis.detune = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune,\n\t\t});\n\t\treadOnly(this, [\"frequency\", \"detune\"]);\n\n\t\t// set the options\n\t\tthis.set(options);\n\t}\n\n\tstatic getDefaults(): OmniOscillatorOptions {\n\t\treturn Object.assign(\n\t\t\tOscillator.getDefaults(),\n\t\t\tFMOscillator.getDefaults(),\n\t\t\tAMOscillator.getDefaults(),\n\t\t\tFatOscillator.getDefaults(),\n\t\t\tPulseOscillator.getDefaults(),\n\t\t\tPWMOscillator.getDefaults(),\n\t\t);\n\t}\n\n\t/**\n\t * start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\tthis._oscillator.start(time);\n\t}\n\n\t/**\n\t * start the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\tthis._oscillator.stop(time);\n\t}\n\n\trestart(time?: Time): this {\n\t\tthis._oscillator.restart(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The type of the oscillator. Can be any of the basic types: sine, square, triangle, sawtooth. Or\n\t * prefix the basic types with \"fm\", \"am\", or \"fat\" to use the FMOscillator, AMOscillator or FatOscillator\n\t * types. The oscillator could also be set to \"pwm\" or \"pulse\". All of the parameters of the\n\t * oscillator's class are accessible when the oscillator is set to that type, but throws an error\n\t * when it's not.\n\t * @example\n\t * omniOsc.type = \"pwm\";\n\t * //modulationFrequency is parameter which is available\n\t * //only when the type is \"pwm\".\n\t * omniOsc.modulationFrequency.value = 0.5;\n\t * @example\n\t * //an square wave frequency modulated by a sawtooth\n\t * omniOsc.type = \"fmsquare\";\n\t * omniOsc.modulationType = \"sawtooth\";\n\t */\n\tget type(): OmniOscillatorType {\n\t\tlet prefix = \"\";\n\t\tif ([\"am\", \"fm\", \"fat\"].some(p => this._sourceType === p)) {\n\t\t\tprefix = this._sourceType;\n\t\t}\n\t\treturn prefix + this._oscillator.type as OmniOscillatorType;\n\t}\n\tset type(type) {\n\t\tif (type.substr(0, 2) === \"fm\") {\n\t\t\tthis._createNewOscillator(\"fm\");\n\t\t\tthis._oscillator = this._oscillator as FMOscillator;\n\t\t\tthis._oscillator.type = type.substr(2) as ToneOscillatorType;\n\t\t} else if (type.substr(0, 2) === \"am\") {\n\t\t\tthis._createNewOscillator(\"am\");\n\t\t\tthis._oscillator = this._oscillator as AMOscillator;\n\t\t\tthis._oscillator.type = type.substr(2) as ToneOscillatorType;\n\t\t} else if (type.substr(0, 3) === \"fat\") {\n\t\t\tthis._createNewOscillator(\"fat\");\n\t\t\tthis._oscillator = this._oscillator as FatOscillator;\n\t\t\tthis._oscillator.type = type.substr(3) as ToneOscillatorType;\n\t\t} else if (type === \"pwm\") {\n\t\t\tthis._createNewOscillator(\"pwm\");\n\t\t\tthis._oscillator = this._oscillator as PWMOscillator;\n\t\t} else if (type === \"pulse\") {\n\t\t\tthis._createNewOscillator(\"pulse\");\n\t\t} else {\n\t\t\tthis._createNewOscillator(\"oscillator\");\n\t\t\tthis._oscillator = this._oscillator as Oscillator;\n\t\t\tthis._oscillator.type = (type as ToneOscillatorType);\n\t\t}\n\t}\n\n\t/**\n\t * The partials of the waveform. A partial represents\n\t * the amplitude at a harmonic. The first harmonic is the\n\t * fundamental frequency, the second is the octave and so on\n\t * following the harmonic series.\n\t * Setting this value will automatically set the type to \"custom\".\n\t * The value is an empty array when the type is not \"custom\".\n\t * This is not available on \"pwm\" and \"pulse\" oscillator types.\n\t * @example\n\t * osc.partials = [1, 0.2, 0.01];\n\t */\n\tget partials(): number[] {\n\t\treturn this._oscillator.partials;\n\t}\n\tset partials(partials) {\n\t\tif (!this._getOscType(this._oscillator, \"pulse\") && !this._getOscType(this._oscillator, \"pwm\")) {\n\t\t\tthis._oscillator.partials = partials;\n\t\t}\n\t}\n\n\t/**\n\t * The partial count of the oscillator. This is not available on \"pwm\" and \"pulse\" oscillator types.\n\t * @example\n\t * //set the maximum number of partials\n\t * osc.partialCount = 0;\n\t */\n\tget partialCount(): number {\n\t\treturn this._oscillator.partialCount;\n\t}\n\tset partialCount(partialCount) {\n\t\tif (!this._getOscType(this._oscillator, \"pulse\") && !this._getOscType(this._oscillator, \"pwm\")) {\n\t\t\tthis._oscillator.partialCount = partialCount;\n\t\t}\n\t}\n\n\t/**\n\t * Set the parameters at once. Either pass in an\n\t * object mapping parameters to values, or to set a\n\t * single parameter, by passing in a string and value.\n\t * The last argument is an optional ramp time which\n\t * will ramp any signal values to their destination value\n\t * over the duration of the rampTime.\n\t * @param  params\n\t * @example\n\t * //set values using an object\n\t * filter.set({\n\t * \t\"frequency\" : 300,\n\t * \t\"type\" : \"highpass\"\n\t * });\n\t */\n\tset(props: Partial<OmniOscillatorConstructorOptions>): this {\n\t\t// make sure the type is set first\n\t\tif (Reflect.has(props, \"type\") && props.type) {\n\t\t\tthis.type = props.type;\n\t\t}\n\t\t// then set the rest\n\t\tsuper.set(props);\n\t\treturn this;\n\t}\n\n\t/**\n\t * connect the oscillator to the frequency and detune signals\n\t */\n\tprivate _createNewOscillator(oscType: OmniOscSourceType): void {\n\t\tif (oscType !== this._sourceType) {\n\t\t\tthis._sourceType = oscType;\n\t\t\tconst OscConstructor = OmniOscillatorSourceMap[oscType];\n\t\t\t// short delay to avoid clicks on the change\n\t\t\tconst now = this.now();\n\t\t\tif (this._oscillator) {\n\t\t\t\tconst oldOsc = this._oscillator;\n\t\t\t\toldOsc.stop(now);\n\t\t\t\t// dispose the old one\n\t\t\t\tthis.context.setTimeout(() => oldOsc.dispose(), this.blockTime);\n\t\t\t}\n\t\t\tthis._oscillator = new OscConstructor({\n\t\t\t\tcontext: this.context,\n\t\t\t});\n\t\t\tthis.frequency.connect(this._oscillator.frequency);\n\t\t\tthis.detune.connect(this._oscillator.detune);\n\t\t\tthis._oscillator.connect(this.output);\n\t\t\tthis._oscillator.onstop = () => this.onstop(this);\n\t\t\tif (this.state === \"started\") {\n\t\t\t\tthis._oscillator.start(now);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._oscillator.phase;\n\t}\n\tset phase(phase) {\n\t\tthis._oscillator.phase = phase;\n\t}\n\n\t/**\n\t * The source type of the oscillator.\n\t * @example\n\t * var omniOsc = new OmniOscillator(440, \"fmsquare\");\n\t * omniOsc.sourceType // 'fm'\n\t */\n\tget sourceType(): OmniOscSourceType {\n\t\treturn this._sourceType;\n\t}\n\tset sourceType(sType) {\n\t\t// the basetype defaults to sine\n\t\tlet baseType = \"sine\";\n\t\tif (this._oscillator.type !== \"pwm\" && this._oscillator.type !== \"pulse\") {\n\t\t\tbaseType = this._oscillator.type;\n\t\t}\n\n\t\t// set the type\n\t\tif (sType === \"fm\") {\n\t\t\tthis.type = \"fm\" + baseType as OmniOscillatorType;\n\t\t} else if (sType === \"am\") {\n\t\t\tthis.type = \"am\" + baseType as OmniOscillatorType;\n\t\t} else if (sType === \"fat\") {\n\t\t\tthis.type = \"fat\" + baseType as OmniOscillatorType;\n\t\t} else if (sType === \"oscillator\") {\n\t\t\tthis.type = baseType as OmniOscillatorType;\n\t\t} else if (sType === \"pulse\") {\n\t\t\tthis.type = \"pulse\";\n\t\t} else if (sType === \"pwm\") {\n\t\t\tthis.type = \"pwm\";\n\t\t}\n\t}\n\n\tprivate _getOscType<SourceType extends OmniOscSourceType>(\n\t\tosc: AnyOscillator,\n\t\tsourceType: SourceType,\n\t): osc is OmniOscillatorSource[SourceType] {\n\t\treturn osc instanceof OmniOscillatorSourceMap[sourceType];\n\t}\n\n\t/**\n\t * The base type of the oscillator.\n\t * @example\n\t * var omniOsc = new OmniOscillator(440, \"fmsquare4\");\n\t * omniOsc.sourceType // 'fm'\n\t * omniOsc.baseType //'square'\n\t * omniOsc.partialCount //4\n\t */\n\tget baseType(): OscillatorType | \"pwm\" | \"pulse\" {\n\t\treturn this._oscillator.baseType;\n\t}\n\tset baseType(baseType) {\n\t\tif (!this._getOscType(this._oscillator, \"pulse\") &&\n\t\t\t!this._getOscType(this._oscillator, \"pwm\") &&\n\t\t\tbaseType !== \"pulse\" && baseType !== \"pwm\") {\n\t\t\tthis._oscillator.baseType = baseType;\n\t\t}\n\t}\n\n\t/**\n\t * The width of the oscillator when sourceType === \"pulse\".\n\t * @example\n\t * var omniOsc = new OmniOscillator(440, \"pulse\");\n\t * //can access the width attribute only if type === \"pulse\"\n\t * omniOsc.width.value = 0.2;\n\t */\n\tget width(): IsPulseOscillator<OscType, Signal<AudioRange>> {\n\t\tif (this._getOscType(this._oscillator, \"pulse\")) {\n\t\t\treturn this._oscillator.width as IsPulseOscillator<OscType, Signal<AudioRange>> ;\n\t\t} else {\n\t\t\treturn undefined as IsPulseOscillator<OscType, Signal<AudioRange>> ;\n\t\t}\n\t}\n\n\t/**\n\t * The number of detuned oscillators, when sourceType === \"fat\".\n\t */\n\tget count(): IsFatOscillator<OscType, number> {\n\t\tif (this._getOscType(this._oscillator, \"fat\")) {\n\t\t\treturn this._oscillator.count as IsFatOscillator<OscType, number>;\n\t\t} else {\n\t\t\treturn undefined as IsFatOscillator<OscType, number>;\n\t\t}\n\t}\n\tset count(count) {\n\t\tif (this._getOscType(this._oscillator, \"fat\") && isNumber(count)) {\n\t\t\tthis._oscillator.count = count;\n\t\t}\n\t}\n\n\t/**\n\t * The detune spread between the oscillators. If \"count\" is\n\t * set to 3 oscillators and the \"spread\" is set to 40,\n\t * the three oscillators would be detuned like this: [-20, 0, 20]\n\t * for a total detune spread of 40 cents. See Tone.FatOscillator\n\t * for more info.\n\t */\n\tget spread(): IsFatOscillator<OscType, Cents> {\n\t\tif (this._getOscType(this._oscillator, \"fat\")) {\n\t\t\treturn this._oscillator.spread as IsFatOscillator<OscType, Cents>;\n\t\t} else {\n\t\t\treturn undefined as IsFatOscillator<OscType, Cents>;\n\t\t}\n\t}\n\tset spread(spread) {\n\t\tif (this._getOscType(this._oscillator, \"fat\") && isNumber(spread)) {\n\t\t\tthis._oscillator.spread = spread;\n\t\t}\n\t}\n\n\t/**\n\t * The type of the modulator oscillator. Only if the oscillator\n\t * is set to \"am\" or \"fm\" types. see. Tone.AMOscillator or Tone.FMOscillator\n\t * for more info.\n\t */\n\tget modulationType(): IsAmOrFmOscillator<OscType, ToneOscillatorType> {\n\t\tif (this._getOscType(this._oscillator, \"fm\") || this._getOscType(this._oscillator, \"am\")) {\n\t\t\treturn this._oscillator.modulationType as IsAmOrFmOscillator<OscType, ToneOscillatorType>;\n\t\t} else {\n\t\t\treturn undefined as IsAmOrFmOscillator<OscType, ToneOscillatorType>;\n\t\t}\n\t}\n\tset modulationType(mType) {\n\t\tif ((this._getOscType(this._oscillator, \"fm\") || this._getOscType(this._oscillator, \"am\")) && isString(mType)) {\n\t\t\tthis._oscillator.modulationType = mType;\n\t\t}\n\t}\n\n\t/**\n\t * The modulation index which is in essence the depth or amount of the modulation. In other terms it is the\n\t * ratio of the frequency of the modulating signal (mf) to the amplitude of the\n\t * modulating signal (ma) -- as in ma/mf.\n\t * See Tone.FMOscillator for more info.\n\t */\n\tget modulationIndex(): IsFMOscillator<OscType, Signal<Positive>> {\n\t\tif (this._getOscType(this._oscillator, \"fm\")) {\n\t\t\treturn this._oscillator.modulationIndex as IsFMOscillator<OscType, Signal<Positive>>;\n\t\t} else {\n\t\t\treturn undefined as IsFMOscillator<OscType, Signal<Positive>>;\n\t\t}\n\t}\n\n\t/**\n\t * Harmonicity is the frequency ratio between the carrier and the modulator oscillators.\n\t * A harmonicity of 1 gives both oscillators the same frequency.\n\t * Harmonicity = 2 means a change of an octave. See Tone.AMOscillator or Tone.FMOscillator\n\t * for more info.\n\t */\n\tget harmonicity(): IsAmOrFmOscillator<OscType, Signal<Positive>> {\n\t\tif (this._getOscType(this._oscillator, \"fm\") || this._getOscType(this._oscillator, \"am\")) {\n\t\t\treturn this._oscillator.harmonicity as IsAmOrFmOscillator<OscType, Signal<Positive>>;\n\t\t} else {\n\t\t\treturn undefined as IsAmOrFmOscillator<OscType, Signal<Positive>>;\n\t\t}\n\t}\n\n\t/**\n\t * The modulationFrequency Signal of the oscillator\n\t * (only if the oscillator type is set to pwm). See\n\t * Tone.PWMOscillator for more info.\n\t * @example\n\t * var omniOsc = new OmniOscillator(440, \"pwm\");\n\t * //can access the modulationFrequency attribute only if type === \"pwm\"\n\t * omniOsc.modulationFrequency.value = 0.2;\n\t */\n\tget modulationFrequency(): IsPWMOscillator<OscType, Signal<Frequency>> {\n\t\tif (this._getOscType(this._oscillator, \"pwm\")) {\n\t\t\treturn this._oscillator.modulationFrequency as IsPWMOscillator<OscType, Signal<Frequency>>;\n\t\t} else {\n\t\t\treturn undefined as IsPWMOscillator<OscType, Signal<Frequency>>;\n\t\t}\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.detune.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis._oscillator.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { Positive, Time } from \"../../core/type/Units\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp } from \"../../core/util/Interface\";\nimport { isUndef } from \"../../core/util/TypeCheck\";\nimport { Source, SourceOptions } from \"../Source\";\nimport { ToneBufferSource } from \"./ToneBufferSource\";\n\nexport interface PlayerOptions extends SourceOptions {\n\tonload: () => void;\n\tplaybackRate: Positive;\n\tloop: boolean;\n\tautostart: boolean;\n\tloopStart: Time;\n\tloopEnd: Time;\n\treverse: boolean;\n\tfadeIn: Time;\n\tfadeOut: Time;\n\turl?: ToneAudioBuffer | string | AudioBuffer;\n}\n\n/**\n * Player is an audio file player with start, loop, and stop functions.\n * @example\n * var player = new Player(\"./path/to/sample.mp3\").toDestination();\n * //play as soon as the buffer is loaded\n * player.autostart = true;\n * @category Source\n */\nexport class Player extends Source<PlayerOptions> {\n\n\treadonly name: string = \"Player\";\n\n\t/**\n\t * If the file should play as soon\n\t * as the buffer is loaded.\n\t * @example\n\t * //will play as soon as it's loaded\n\t * var player = new Player({\n\t * \t\"url\" : \"./path/to/sample.mp3\",\n\t * \t\"autostart\" : true,\n\t * }).toDestination();\n\t */\n\tautostart: boolean;\n\n\t/**\n\t * The buffer\n\t */\n\tprivate _buffer: ToneAudioBuffer;\n\n\t/**\n\t * if the buffer should loop once it's over\n\t */\n\tprivate _loop: boolean;\n\n\t/**\n\t * if 'loop' is true, the loop will start at this position\n\t */\n\tprivate _loopStart: Time;\n\n\t/**\n\t * if 'loop' is true, the loop will end at this position\n\t */\n\tprivate _loopEnd: Time;\n\n\t/**\n\t * the playback rate\n\t */\n\tprivate _playbackRate: Positive;\n\n\t/**\n\t * All of the active buffer source nodes\n\t */\n\tprivate _activeSources: Set<ToneBufferSource> = new Set();\n\n\t/**\n\t * The fadeIn time of the amplitude envelope.\n\t */\n\tfadeIn: Time;\n\n\t/**\n\t * The fadeOut time of the amplitude envelope.\n\t */\n\tfadeOut: Time;\n\n\t/**\n\t * @param url Either the AudioBuffer or the url from which to load the AudioBuffer\n\t * @param onload The function to invoke when the buffer is loaded.\n\t */\n\tconstructor(url?: string | AudioBuffer | ToneAudioBuffer, onload?: () => void);\n\tconstructor(options?: Partial<PlayerOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Player.getDefaults(), arguments, [\"url\", \"onload\"]));\n\t\tconst options = optionsFromArguments(Player.getDefaults(), arguments, [\"url\", \"onload\"]);\n\n\t\tthis._buffer = new ToneAudioBuffer({\n\t\t\tonload: this._onload.bind(this, options.onload),\n\t\t\treverse: options.reverse,\n\t\t\turl: options.url,\n\t\t});\n\t\tthis.autostart = options.autostart;\n\t\tthis._loop = options.loop;\n\t\tthis._loopStart = options.loopStart;\n\t\tthis._loopEnd = options.loopEnd;\n\t\tthis._playbackRate = options.playbackRate;\n\t\tthis.fadeIn = options.fadeIn;\n\t\tthis.fadeOut = options.fadeOut;\n\t}\n\n\tstatic getDefaults(): PlayerOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tautostart: false,\n\t\t\tfadeIn: 0,\n\t\t\tfadeOut: 0,\n\t\t\tloop: false,\n\t\t\tloopEnd: 0,\n\t\t\tloopStart: 0,\n\t\t\tonload: noOp,\n\t\t\tplaybackRate: 1,\n\t\t\treverse: false,\n\t\t});\n\t}\n\n\t/**\n\t * Load the audio file as an audio buffer.\n\t * Decodes the audio asynchronously and invokes\n\t * the callback once the audio buffer loads.\n\t * Note: this does not need to be called if a url\n\t * was passed in to the constructor. Only use this\n\t * if you want to manually load a new url.\n\t * @param url The url of the buffer to load. Filetype support depends on the browser.\n\t */\n\tasync load(url: string): Promise<this> {\n\t\tawait this._buffer.load(url);\n\t\tthis._onload();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Internal callback when the buffer is loaded.\n\t */\n\tprivate _onload(callback: () => void = noOp): void {\n\t\tcallback();\n\t\tif (this.autostart) {\n\t\t\tthis.start();\n\t\t}\n\t}\n\n\t/**\n\t * Internal callback when the buffer is done playing.\n\t */\n\tprivate _onSourceEnd(source: ToneBufferSource): void {\n\t\t// invoke the onstop function\n\t\tthis.onstop(this);\n\n\t\t// delete the source from the active sources\n\t\tthis._activeSources.delete(source);\n\t\tif (this._activeSources.size === 0 && !this._synced) {\n\t\t\tthis._state.setStateAtTime(\"stopped\", this.now());\n\t\t}\n\t}\n\n\t/**\n\t * Play the buffer at the given startTime. Optionally add an offset\n\t * and/or duration which will play the buffer from a position\n\t * within the buffer for the given duration.\n\t *\n\t * @param  time When the player should start.\n\t * @param  offset The offset from the beginning of the sample\n\t *                                to start at.\n\t * @param  duration How long the sample should play. If no duration is given, it will default to the full length\n\t *                  of the sample (minus any offset)\n\t */\n\tstart(time?: Time, offset?: Time, duration?: Time): this {\n\t\tsuper.start(time, offset, duration);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Internal start method\n\t */\n\tprotected _start(startTime?: Time, offset?: Time, duration?: Time): void {\n\t\t// if it's a loop the default offset is the loopstart point\n\t\tif (this._loop) {\n\t\t\toffset = defaultArg(offset, this._loopStart);\n\t\t} else {\n\t\t\t// otherwise the default offset is 0\n\t\t\toffset = defaultArg(offset, 0);\n\t\t}\n\n\t\t// compute the values in seconds\n\t\tlet comptuedOffset = this.toSeconds(offset);\n\n\t\t// if it's synced, it should factor in the playback rate for computing the offset\n\t\tif (this._synced) {\n\t\t\tcomptuedOffset *= this._playbackRate;\n\t\t}\n\n\t\t// compute the duration which is either the passed in duration of the buffer.duration - offset\n\t\tconst origDuration = duration;\n\t\tduration = defaultArg(duration, Math.max(this._buffer.duration - comptuedOffset, 0));\n\t\tlet computedDuration = this.toSeconds(duration);\n\n\t\t// scale it by the playback rate\n\t\tcomputedDuration = computedDuration / this._playbackRate;\n\n\t\t// get the start time\n\t\tstartTime = this.toSeconds(startTime);\n\n\t\t// make the source\n\t\tconst source = new ToneBufferSource({\n\t\t\tbuffer: this._buffer,\n\t\t\tcontext: this.context,\n\t\t\tfadeIn: this.fadeIn,\n\t\t\tfadeOut: this.fadeOut,\n\t\t\tloop: this._loop,\n\t\t\tloopEnd: this._loopEnd,\n\t\t\tloopStart: this._loopStart,\n\t\t\tonended: this._onSourceEnd.bind(this),\n\t\t\tplaybackRate: this._playbackRate,\n\t\t}).connect(this.output);\n\n\t\t// set the looping properties\n\t\tif (!this._loop && !this._synced) {\n\t\t\t// if it's not looping, set the state change at the end of the sample\n\t\t\tthis._state.setStateAtTime(\"stopped\", startTime + computedDuration, {\n\t\t\t\timplicitEnd: true,\n\t\t\t});\n\t\t}\n\n\t\t// add it to the array of active sources\n\t\tthis._activeSources.add(source);\n\n\t\t// start it\n\t\tif (this._loop && isUndef(origDuration)) {\n\t\t\tsource.start(startTime, comptuedOffset);\n\t\t} else {\n\t\t\t// subtract the fade out time\n\t\t\tsource.start(startTime, comptuedOffset, computedDuration - this.toSeconds(this.fadeOut));\n\t\t}\n\t}\n\n\t/**\n\t * Stop playback.\n\t */\n\tprotected _stop(time?: Time): void {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._activeSources.forEach(source => source.stop(computedTime));\n\t}\n\n\t/**\n\t * Stop and then restart the player from the beginning (or offset)\n\t * @param  time When the player should start.\n\t * @param  offset The offset from the beginning of the sample to start at.\n\t * @param  duration How long the sample should play. If no duration is given,\n\t * \t\t\t\tit will default to the full length of the sample (minus any offset)\n\t */\n\trestart(time?: Time, offset?: Time, duration?: Time): this {\n\t\tthis._stop(time);\n\t\tthis._start(time, offset, duration);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Seek to a specific time in the player's buffer. If the\n\t * source is no longer playing at that time, it will stop.\n\t * If you seek to a time that\n\t * @param {Time} offset The time to seek to.\n\t * @param {Time=} time The time for the seek event to occur.\n\t * @return {Player} this\n\t * @example\n\t * source.start(0.2);\n\t * source.stop(0.4);\n\t */\n\tseek(offset: Time, when?: Time): this {\n\t\tconst computedTime = this.toSeconds(when);\n\t\tif (this._state.getValueAtTime(computedTime) === \"started\") {\n\t\t\tconst comptuedOffset = this.toSeconds(offset);\n\t\t\t// if it's currently playing, stop it\n\t\t\tthis._stop(computedTime);\n\t\t\t// restart it at the given time\n\t\t\tthis._start(computedTime, comptuedOffset);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set the loop start and end. Will only loop if loop is set to true.\n\t * @param loopStart The loop end time\n\t * @param loopEnd The loop end time\n\t * @example\n\t * //loop 0.1 seconds of the file.\n\t * player.setLoopPoints(0.2, 0.3);\n\t * player.loop = true;\n\t */\n\tsetLoopPoints(loopStart: Time, loopEnd: Time): this {\n\t\tthis.loopStart = loopStart;\n\t\tthis.loopEnd = loopEnd;\n\t\treturn this;\n\t}\n\n\t/**\n\t * If loop is true, the loop will start at this position.\n\t */\n\tget loopStart(): Time {\n\t\treturn this._loopStart;\n\t}\n\tset loopStart(loopStart) {\n\t\tthis._loopStart = loopStart;\n\t\t// get the current source\n\t\tthis._activeSources.forEach(source => {\n\t\t\tsource.loopStart = loopStart;\n\t\t});\n\t}\n\n\t/**\n\t * If loop is true, the loop will end at this position.\n\t */\n\tget loopEnd(): Time {\n\t\treturn this._loopEnd;\n\t}\n\tset loopEnd(loopEnd) {\n\t\tthis._loopEnd = loopEnd;\n\t\t// get the current source\n\t\tthis._activeSources.forEach(source => {\n\t\t\tsource.loopEnd = loopEnd;\n\t\t});\n\t}\n\n\t/**\n\t * The audio buffer belonging to the player.\n\t */\n\tget buffer(): ToneAudioBuffer {\n\t\treturn this._buffer;\n\t}\n\tset buffer(buffer) {\n\t\tthis._buffer.set(buffer);\n\t}\n\n\t/**\n\t * If the buffer should loop once it's over.\n\t */\n\tget loop(): boolean {\n\t\treturn this._loop;\n\t}\n\tset loop(loop) {\n\t\t// if no change, do nothing\n\t\tif (this._loop === loop) {\n\t\t\treturn;\n\t\t}\n\t\tthis._loop = loop;\n\t\t// set the loop of all of the sources\n\t\tthis._activeSources.forEach(source => {\n\t\t\tsource.loop = loop;\n\t\t});\n\t\tif (loop) {\n\t\t\t// remove the next stopEvent\n\t\t\tconst stopEvent = this._state.getNextState(\"stopped\", this.now());\n\t\t\tif (stopEvent) {\n\t\t\t\tthis._state.cancel(stopEvent.time);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * The playback speed. 1 is normal speed. This is not a signal because\n\t * Safari and iOS currently don't support playbackRate as a signal.\n\t */\n\tget playbackRate(): Positive {\n\t\treturn this._playbackRate;\n\t}\n\tset playbackRate(rate) {\n\t\tthis._playbackRate = rate;\n\t\tconst now = this.now();\n\n\t\t// cancel the stop event since it's at a different time now\n\t\tconst stopEvent = this._state.getNextState(\"stopped\", now);\n\t\tif (stopEvent && stopEvent.implicitEnd) {\n\t\t\tthis._state.cancel(stopEvent.time);\n\t\t\tthis._activeSources.forEach(source => source.cancelStop());\n\t\t}\n\n\t\t// set all the sources\n\t\tthis._activeSources.forEach(source => {\n\t\t\tsource.playbackRate.setValueAtTime(rate, now);\n\t\t});\n\t}\n\n\t/**\n\t * The direction the buffer should play in\n\t */\n\tget reverse(): boolean {\n\t\treturn this._buffer.reverse;\n\t}\n\tset reverse(rev) {\n\t\tthis._buffer.reverse = rev;\n\t}\n\n\t/**\n\t * If the buffer is loaded\n\t */\n\tget loaded(): boolean {\n\t\treturn this._buffer.loaded;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\t// disconnect all of the players\n\t\tthis._activeSources.forEach(source => source.dispose());\n\t\tthis._activeSources.clear();\n\t\tthis._buffer.dispose();\n\t\treturn this;\n\t}\n}\n","import { Volume } from \"../../component/channel/Volume\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { ToneAudioBuffers, ToneAudioBuffersUrlMap } from \"../../core/context/ToneAudioBuffers\";\nimport { OutputNode, ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { Decibels, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp, readOnly } from \"../../core/util/Interface\";\nimport { BasicPlaybackState } from \"../../core/util/StateTimeline\";\nimport { Source, SourceOptions } from \"../Source\";\nimport { Player } from \"./Player\";\n\nexport interface PlayersOptions extends SourceOptions {\n\turls: ToneAudioBuffersUrlMap;\n\tvolume: Decibels;\n\tmute: boolean;\n\tonload: () => void;\n\tbaseUrl: string;\n\tfadeIn: Time;\n\tfadeOut: Time;\n}\n\n/**\n * Players combines multiple [[Player]] objects.\n * @category Source\n */\nexport class Players extends ToneAudioNode<PlayersOptions> {\n\n\treadonly name: string = \"Players\";\n\n\t/**\n\t * The output volume node\n\t */\n\tprivate _volume: Volume;\n\n\t/**\n\t * The volume of the output in decibels.\n\t * @example\n\t * source.volume.value = -6;\n\t */\n\treadonly volume: Param<Decibels>;\n\n\t/**\n\t * The combined output of all of the players\n\t */\n\treadonly output: OutputNode;\n\n\t/**\n\t * Players has no input.\n\t */\n\treadonly input = undefined;\n\n\t/**\n\t * The container of all of the players\n\t */\n\tprivate _players: Map<string, Player> = new Map();\n\n\t/**\n\t * The container of all the buffers\n\t */\n\tprivate _buffers: ToneAudioBuffers;\n\n\t/**\n\t * private holder of the fadeIn time\n\t */\n\tprivate _fadeIn: Time;\n\n\t/**\n\t * private holder of the fadeOut time\n\t */\n\tprivate _fadeOut: Time;\n\n\t/**\n\t * @param urls An object mapping a name to a url.\n\t * @param onload The function to invoke when all buffers are loaded.\n\t */\n\tconstructor(urls?: ToneAudioBuffersUrlMap, onload?: () => void);\n\t/**\n\t * @param urls An object mapping a name to a url.\n\t * @param options The remaining options associated with the players\n\t */\n\tconstructor(urls?: ToneAudioBuffersUrlMap, options?: Partial<Omit<PlayersOptions, \"urls\">>);\n\tconstructor(options?: Partial<GainOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Players.getDefaults(), arguments, [\"urls\", \"onload\"], \"urls\"));\n\t\tconst options = optionsFromArguments(Players.getDefaults(), arguments, [\"urls\", \"onload\"], \"urls\");\n\n\t\t/**\n\t\t * The output volume node\n\t\t */\n\t\tthis._volume = this.output = new Volume({\n\t\t\tcontext: this.context,\n\t\t\tvolume: options.volume,\n\t\t});\n\n\t\tthis.volume = this._volume.volume;\n\t\treadOnly(this, \"volume\");\n\t\tthis._buffers = new ToneAudioBuffers(options.urls, options.onload, options.baseUrl);\n\t\t// mute initially\n\t\tthis.mute = options.mute;\n\t\tthis._fadeIn = options.fadeIn;\n\t\tthis._fadeOut = options.fadeOut;\n\t}\n\n\tstatic getDefaults(): PlayersOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tbaseUrl: \"\",\n\t\t\tfadeIn: 0,\n\t\t\tfadeOut: 0,\n\t\t\tmute: false,\n\t\t\tonload: noOp,\n\t\t\turls: {},\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Mute the output.\n\t * @example\n\t * //mute the output\n\t * source.mute = true;\n\t */\n\tget mute(): boolean {\n\t\treturn this._volume.mute;\n\t}\n\tset mute(mute) {\n\t\tthis._volume.mute = mute;\n\t}\n\n\t/**\n\t * The fadeIn time of the envelope applied to the source.\n\t */\n\tget fadeIn(): Time {\n\t\treturn this._fadeIn;\n\t}\n\tset fadeIn(fadeIn) {\n\t\tthis._fadeIn = fadeIn;\n\t\tthis._players.forEach(player => {\n\t\t\tplayer.fadeIn = fadeIn;\n\t\t});\n\t}\n\n\t/**\n\t * The fadeOut time of the each of the sources.\n\t */\n\tget fadeOut(): Time {\n\t\treturn this._fadeOut;\n\t}\n\tset fadeOut(fadeOut) {\n\t\tthis._fadeOut = fadeOut;\n\t\tthis._players.forEach(player => {\n\t\t\tplayer.fadeOut = fadeOut;\n\t\t});\n\t}\n\n\t/**\n\t * The state of the players object. Returns \"started\" if any of the players are playing.\n\t */\n\tget state(): BasicPlaybackState {\n\t\tconst playing = Array.from(this._players).some(([_, player]) => player.state === \"started\");\n\t\treturn playing ? \"started\" : \"stopped\";\n\t}\n\n\t/**\n\t * True if the buffers object has a buffer by that name.\n\t * @param name  The key or index of the buffer.\n\t */\n\thas(name: string): boolean {\n\t\treturn this._buffers.has(name);\n\t}\n\n\t/**\n\t * Get a player by name.\n\t * @param  name  The players name as defined in the constructor object or `add` method.\n\t */\n\tplayer(name: string): Player {\n\t\tthis.assert(this.has(name), `No Player with the name ${name} exists on this object`);\n\t\tif (!this._players.has(name)) {\n\t\t\tconst player = new Player({\n\t\t\t\tcontext: this.context,\n\t\t\t\tfadeIn: this._fadeIn,\n\t\t\t\tfadeOut: this._fadeOut,\n\t\t\t\turl: this._buffers.get(name),\n\t\t\t}).connect(this.output);\n\t\t\tthis._players.set(name, player);\n\t\t}\n\t\treturn this._players.get(name) as Player;\n\t}\n\n\t/**\n\t * If all the buffers are loaded or not\n\t */\n\tget loaded(): boolean {\n\t\treturn this._buffers.loaded;\n\t}\n\n\t/**\n\t * Add a player by name and url to the Players\n\t * @param  name A unique name to give the player\n\t * @param  url  Either the url of the bufer or a buffer which will be added with the given name.\n\t * @param callback  The callback to invoke when the url is loaded.\n\t */\n\tadd(name: string, url: string | ToneAudioBuffer | AudioBuffer, callback?: () => void): this {\n\t\tthis.assert(!this._buffers.has(name), \"A buffer with that name already exists on this object\");\n\t\tthis._buffers.add(name, url, callback);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop all of the players at the given time\n\t * @param time The time to stop all of the players.\n\t */\n\tstopAll(time?: Time): this {\n\t\tthis._players.forEach(player => player.stop(time));\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._volume.dispose();\n\t\tthis.volume.dispose();\n\t\tthis._players.forEach(player => player.dispose());\n\t\tthis._buffers.dispose();\n\t\treturn this;\n\t}\n}\n","import { connectSeries } from \"../core/Connect\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Param } from \"../core/context/Param\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Signal, SignalOptions } from \"./Signal\";\n\n/**\n * Add a signal and a number or two signals. When no value is\n * passed into the constructor, Tone.Add will sum input and `addend`\n * If a value is passed into the constructor, the it will be added to the input.\n *\n * @example\n * var signal = new Signal(2);\n * var add = new Add(2);\n * signal.connect(add);\n * //the output of add equals 4\n * @example\n * //if constructed with no arguments\n * //it will add the first and second inputs\n * var add = new Add();\n * var sig0 = new Signal(3).connect(add);\n * var sig1 = new Signal(4).connect(add.addend);\n * //the output of add equals 7.\n * @category Signal\n */\nexport class Add extends Signal {\n\n\toverride = false;\n\n\treadonly name: string = \"Add\";\n\n\t/**\n\t * the summing node\n\t */\n\tprivate _sum: Gain = new Gain({ context: this.context });\n\treadonly input = this._sum;\n\treadonly output = this._sum;\n\n\t/**\n\t * The value which is added to the input signal\n\t */\n\treadonly addend: Param<number> = this._param;\n\n\t/**\n\t * @param value If no value is provided, Tone.Add will sum the first  and second inputs.\n\t */\n\tconstructor(value?: number);\n\tconstructor(options?: Partial<SignalOptions<number>>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Add.getDefaults(), arguments, [\"value\"])));\n\n\t\tconnectSeries(this._constantSource, this._sum);\n\t}\n\n\tstatic getDefaults(): SignalOptions<number> {\n\t\treturn Object.assign(Signal.getDefaults(), {\n\t\t\tvalue: 0,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._sum.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { SignalOperator } from \"./SignalOperator\";\nimport { WaveShaper } from \"./WaveShaper\";\n\n/**\n * Return the absolute value of an incoming signal.\n *\n * @example\n * var signal = new Tone.Signal(-1);\n * var abs = new Tone.Abs();\n * signal.connect(abs);\n * //the output of abs is 1.\n * @category Signal\n */\nexport class Abs extends SignalOperator<ToneAudioNodeOptions> {\n\n\treadonly name: string = \"Abs\";\n\n\t/**\n\t * The node which converts the audio ranges\n\t */\n\tprivate _abs = new WaveShaper({\n\t\tcontext: this.context,\n\t\tmapping: val => {\n\t\t\tif (Math.abs(val) < 0.001) {\n\t\t\t\treturn 0;\n\t\t\t} else {\n\t\t\t\treturn Math.abs(val);\n\t\t\t}\n\t\t},\n\t});\n\n\t/**\n\t * The AudioRange input [-1, 1]\n\t */\n\tinput = this._abs;\n\n\t/**\n\t * The output range [0, 1]\n\t */\n\toutput = this._abs;\n\n\t/**\n\t * clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._abs.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { SignalOperator } from \"./SignalOperator\";\nimport { WaveShaper } from \"./WaveShaper\";\n\n/**\n * GainToAudio converts an input in NormalRange [0,1] to AudioRange [-1,1].\n * See {@link AudioToGain}.\n *\n * @example\n * var a2g = new GainToAudio();\n * @category Signal\n */\nexport class GainToAudio extends SignalOperator<ToneAudioNodeOptions> {\n\n\treadonly name: string = \"GainToAudio\";\n\n\t/**\n\t * The node which converts the audio ranges\n\t */\n\tprivate _norm = new WaveShaper({\n\t\tcontext: this.context,\n\t\tmapping: x => Math.abs(x) * 2 - 1,\n\t});\n\n\t/**\n\t * The NormalRange input [0, 1]\n\t */\n\tinput = this._norm;\n\n\t/**\n\t * The AudioRange output [-1, 1]\n\t */\n\toutput = this._norm;\n\n\t/**\n\t * clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._norm.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Multiply } from \"./Multiply\";\nimport { SignalOperator } from \"./SignalOperator\";\n\n/**\n * Negate the incoming signal. i.e. an input signal of 10 will output -10\n *\n * @example\n * var neg = new Negate();\n * var sig = new Signal(-2).connect(neg);\n * //output of neg is positive 2.\n * @category Signal\n */\nexport class Negate extends SignalOperator<ToneAudioNodeOptions> {\n\n\treadonly name: string = \"Negate\";\n\n\t/**\n\t * negation is done by multiplying by -1\n\t */\n\tprivate _multiply: Multiply = new Multiply({\n\t\tcontext: this.context,\n\t\tvalue: -1,\n\t});\n\n\t/**\n\t * The input and output are equal to the multiply node\n\t */\n\tinput = this._multiply;\n\toutput = this._multiply;\n\n\t/**\n\t * clean up\n\t * @returns {Negate} this\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._multiply.dispose();\n\t\treturn this;\n\t}\n}\n","import { connectSeries } from \"../core/Connect\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Param } from \"../core/context/Param\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Negate } from \"../signal/Negate\";\nimport { Signal, SignalOptions } from \"../signal/Signal\";\n\n/**\n * Subtract the signal connected to the input is subtracted from the signal connected\n * The subtrahend.\n *\n * @example\n * var sub = new Subtract(1);\n * var sig = new Tone.Signal(4).connect(sub);\n * //the output of sub is 3.\n * @example\n * var sub = new Subtract();\n * var sigA = new Tone.Signal(10);\n * var sigB = new Tone.Signal(2.5);\n * sigA.connect(sub);\n * sigB.connect(sub.subtrahend);\n * //output of sub is 7.5\n * @category Signal\n */\nexport class Subtract extends Signal {\n\n\toverride = false;\n\n\treadonly name: string = \"Subtract\";\n\n\t/**\n\t * the summing node\n\t */\n\tprivate _sum: Gain = new Gain({ context: this.context });\n\treadonly input: Gain = this._sum;\n\treadonly output: Gain = this._sum;\n\n\t/**\n\t * Negate the input of the second input before connecting it to the summing node.\n\t */\n\tprivate _neg: Negate = new Negate({ context: this.context });\n\n\t/**\n\t * The value which is subtracted from the main signal\n\t */\n\tsubtrahend: Param<number> = this._param;\n\n\t/**\n\t * @param value The value to subtract from the incoming signal. If the value\n\t *             is omitted, it will subtract the second signal from the first.\n\t */\n\tconstructor(value?: number);\n\tconstructor(options?: Partial<SignalOptions<number>>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Subtract.getDefaults(), arguments, [\"value\"])));\n\n\t\tconnectSeries(this._constantSource, this._neg, this._sum);\n\t}\n\n\tstatic getDefaults(): SignalOptions<number> {\n\t\treturn Object.assign(Signal.getDefaults(), {\n\t\t\tvalue: 0,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._neg.dispose();\n\t\tthis._sum.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../core/context/Gain\";\nimport { connect, disconnect, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { SignalOperator } from \"./SignalOperator\";\n\n/**\n * Tone.Zero outputs 0's at audio-rate. The reason this has to be\n * it's own class is that many browsers optimize out Tone.Signal\n * with a value of 0 and will not process nodes further down the graph.\n * @category Signal\n */\nexport class Zero extends SignalOperator<ToneAudioNodeOptions> {\n\n\treadonly name: string = \"Zero\";\n\n\t/**\n\t * The gain node which connects the constant source to the output\n\t */\n\tprivate _gain = new Gain({ context: this.context });\n\n\t/**\n\t * Only outputs 0\n\t */\n\toutput = this._gain;\n\n\t/**\n\t * no input node\n\t */\n\tinput = undefined;\n\n\tconstructor(options?: Partial<ToneAudioNodeOptions>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Zero.getDefaults(), arguments)));\n\t\tconnect(this.context.getConstant(0), this._gain);\n\t}\n\n\t/**\n\t * clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tdisconnect(this.context.getConstant(0), this._gain);\n\t\treturn this;\n\t}\n}\n","import { InputNode, OutputNode } from \"../../core/context/ToneAudioNode\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { NormalRange, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { isArray, isObject, isString } from \"../../core/util/TypeCheck\";\nimport { connectSignal, Signal } from \"../../signal/Signal\";\n\ntype BasicEnvelopeCurve = \"linear\" | \"exponential\";\ntype InternalEnvelopeCurve = BasicEnvelopeCurve | number[];\nexport type EnvelopeCurve = EnvelopeCurveName | number[];\n\nexport interface EnvelopeOptions extends ToneAudioNodeOptions {\n\tattack: Time;\n\tdecay: Time;\n\tsustain: NormalRange;\n\trelease: Time;\n\tattackCurve: EnvelopeCurve;\n\treleaseCurve: EnvelopeCurve;\n\tdecayCurve: BasicEnvelopeCurve;\n}\n\n/**\n * Envelope is an [ADSR](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope)\n * envelope generator. Envelope outputs a signal which\n * can be connected to an AudioParam or Tone.Signal.\n * ```\n *           /\\\n *          /  \\\n *         /    \\\n *        /      \\\n *       /        \\___________\n *      /                     \\\n *     /                       \\\n *    /                         \\\n *   /                           \\\n * ```\n *\n * @example\n * //an amplitude envelope\n * var gainNode = Tone.context.createGain();\n * var env = new Envelope({\n * \t\"attack\" : 0.1,\n * \t\"decay\" : 0.2,\n * \t\"sustain\" : 1,\n * \t\"release\" : 0.8,\n * });\n * env.connect(gainNode.gain);\n * @category Component\n */\nexport class Envelope extends ToneAudioNode<EnvelopeOptions> {\n\n\treadonly name: string = \"Envelope\";\n\n\t/**\n\t * When triggerAttack is called, the attack time is the amount of\n\t * time it takes for the envelope to reach it's maximum value.\n\t * ```\n\t *           /\\\n\t *          /X \\\n\t *         /XX  \\\n\t *        /XXX   \\\n\t *       /XXXX    \\___________\n\t *      /XXXXX                \\\n\t *     /XXXXXX                 \\\n\t *    /XXXXXXX                  \\\n\t *   /XXXXXXXX                   \\\n\t * ```\n\t */\n\tattack: Time;\n\n\t/**\n\t * After the attack portion of the envelope, the value will fall\n\t * over the duration of the decay time to it's sustain value.\n\t * ```\n\t *           /\\\n\t *          / X\\\n\t *         /  XX\\\n\t *        /   XXX\\\n\t *       /    XXXX\\___________\n\t *      /     XXXXX           \\\n\t *     /      XXXXX            \\\n\t *    /       XXXXX             \\\n\t *   /        XXXXX              \\\n\t * ```\n\t */\n\tdecay: Time;\n\n\t/**\n\t * The sustain value is the value\n\t * which the envelope rests at after triggerAttack is\n\t * called, but before triggerRelease is invoked.\n\t * ```\n\t *           /\\\n\t *          /  \\\n\t *         /    \\\n\t *        /      \\\n\t *       /        \\___________\n\t *      /          XXXXXXXXXXX\\\n\t *     /           XXXXXXXXXXX \\\n\t *    /            XXXXXXXXXXX  \\\n\t *   /             XXXXXXXXXXX   \\\n\t * ```\n\t */\n\tsustain: NormalRange;\n\n\t/**\n\t * After triggerRelease is called, the envelope's\n\t * value will fall to it's miminum value over the\n\t * duration of the release time.\n\t * ```\n\t *           /\\\n\t *          /  \\\n\t *         /    \\\n\t *        /      \\\n\t *       /        \\___________\n\t *      /                    X\\\n\t *     /                     XX\\\n\t *    /                      XXX\\\n\t *   /                       XXXX\\\n\t * ```\n\t */\n\trelease: Time;\n\n\t/**\n\t * The automation curve type for the attack\n\t */\n\tprivate _attackCurve!: InternalEnvelopeCurve;\n\n\t/**\n\t * The automation curve type for the decay\n\t */\n\tprivate _decayCurve!: BasicEnvelopeCurve;\n\n\t/**\n\t * The automation curve type for the release\n\t */\n\tprivate _releaseCurve!: InternalEnvelopeCurve;\n\n\t/**\n\t * the signal which is output.\n\t */\n\tprotected _sig: Signal<NormalRange> = new Signal({\n\t\tcontext: this.context,\n\t\tvalue: 0,\n\t});\n\n\t/**\n\t * The output signal of the envelope\n\t */\n\toutput: OutputNode = this._sig;\n\n\t/**\n\t * Envelope has no input\n\t */\n\tinput: InputNode | undefined = undefined;\n\n\t/**\n\t * @param attack The amount of time it takes for the envelope to go from\n\t *                        0 to it's maximum value.\n\t * @param decay\tThe period of time after the attack that it takes for the envelope\n\t *                      \tto fall to the sustain value. Value must be greater than 0.\n\t * @param sustain\tThe percent of the maximum value that the envelope rests at until\n\t *                               \tthe release is triggered.\n\t * @param release\tThe amount of time after the release is triggered it takes to reach 0.\n\t *                        \tValue must be greater than 0.\n\t */\n\tconstructor(attack?: Time, decay?: Time, sustain?: NormalRange, release?: Time);\n\tconstructor(options?: Partial<EnvelopeOptions>)\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Envelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]));\n\t\tconst options = optionsFromArguments(Envelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]);\n\n\t\tthis.attack = options.attack;\n\t\tthis.decay = options.decay;\n\t\tthis.sustain = options.sustain;\n\t\tthis.release = options.release;\n\t\tthis.attackCurve = options.attackCurve;\n\t\tthis.releaseCurve = options.releaseCurve;\n\t\tthis.decayCurve = options.decayCurve;\n\t}\n\n\tstatic getDefaults(): EnvelopeOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tattack: 0.01,\n\t\t\tattackCurve: \"linear\" as EnvelopeCurveName,\n\t\t\tdecay: 0.1,\n\t\t\tdecayCurve: \"exponential\" as BasicEnvelopeCurve,\n\t\t\trelease: 1,\n\t\t\treleaseCurve: \"exponential\" as EnvelopeCurveName,\n\t\t\tsustain: 0.5,\n\t\t});\n\t}\n\n\t/**\n\t * Read the current value of the envelope. Useful for\n\t * syncronizing visual output to the envelope.\n\t */\n\tget value(): NormalRange {\n\t\treturn this.getValueAtTime(this.now());\n\t}\n\n\t/**\n\t * Get the curve\n\t * @param  curve\n\t * @param  direction  In/Out\n\t * @return The curve name\n\t */\n\tprivate _getCurve(curve: InternalEnvelopeCurve, direction: EnvelopeDirection): EnvelopeCurve {\n\t\tif (isString(curve)) {\n\t\t\treturn curve;\n\t\t} else {\n\t\t\t// look up the name in the curves array\n\t\t\tlet curveName: EnvelopeCurveName;\n\t\t\tfor (curveName in EnvelopeCurves) {\n\t\t\t\tif (EnvelopeCurves[curveName][direction] === curve) {\n\t\t\t\t\treturn curveName;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// return the custom curve\n\t\t\treturn curve;\n\t\t}\n\t}\n\n\t/**\n\t * Assign a the curve to the given name using the direction\n\t * @param  name\n\t * @param  direction In/Out\n\t * @param  curve\n\t */\n\tprivate _setCurve(\n\t\tname: \"_attackCurve\" | \"_decayCurve\" | \"_releaseCurve\",\n\t\tdirection: EnvelopeDirection,\n\t\tcurve: EnvelopeCurve,\n\t): void {\n\t\t// check if it's a valid type\n\t\tif (isString(curve) && Reflect.has(EnvelopeCurves, curve)) {\n\t\t\tconst curveDef = EnvelopeCurves[curve];\n\t\t\tif (isObject(curveDef)) {\n\t\t\t\tif (name !== \"_decayCurve\") {\n\t\t\t\t\tthis[name] = curveDef[direction];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis[name] = curveDef;\n\t\t\t}\n\t\t} else if (isArray(curve) && name !== \"_decayCurve\") {\n\t\t\tthis[name] = curve;\n\t\t} else {\n\t\t\tthrow new Error(\"Envelope: invalid curve: \" + curve);\n\t\t}\n\t}\n\n\t/**\n\t * The shape of the attack.\n\t * Can be any of these strings:\n\t * * \"linear\"\n\t * * \"exponential\"\n\t * * \"sine\"\n\t * * \"cosine\"\n\t * * \"bounce\"\n\t * * \"ripple\"\n\t * * \"step\"\n\t *\n\t * Can also be an array which describes the curve. Values\n\t * in the array are evenly subdivided and linearly\n\t * interpolated over the duration of the attack.\n\t * @example\n\t * env.attackCurve = \"linear\";\n\t * @example\n\t * //can also be an array\n\t * env.attackCurve = [0, 0.2, 0.3, 0.4, 1]\n\t */\n\tget attackCurve(): EnvelopeCurve {\n\t\treturn this._getCurve(this._attackCurve, \"In\");\n\t}\n\tset attackCurve(curve) {\n\t\tthis._setCurve(\"_attackCurve\", \"In\", curve);\n\t}\n\n\t/**\n\t * The shape of the release. See the attack curve types.\n\t * @example\n\t * env.releaseCurve = \"linear\";\n\t */\n\tget releaseCurve(): EnvelopeCurve {\n\t\treturn this._getCurve(this._releaseCurve, \"Out\");\n\t}\n\tset releaseCurve(curve) {\n\t\tthis._setCurve(\"_releaseCurve\", \"Out\", curve);\n\t}\n\n\t/**\n\t * The shape of the decay either \"linear\" or \"exponential\"\n\t * @example\n\t * env.decayCurve = \"linear\";\n\t */\n\tget decayCurve(): BasicEnvelopeCurve {\n\t\treturn this._decayCurve;\n\t}\n\tset decayCurve(curve) {\n\t\tthis.assert([\"linear\", \"exponential\"].some(c => c === curve), `Invalid envelope curve: ${curve}`);\n\t\tthis._decayCurve = curve;\n\t}\n\n\t/**\n\t * Trigger the attack/decay portion of the ADSR envelope.\n\t * @param  time When the attack should start.\n\t * @param velocity The velocity of the envelope scales the vales.\n\t *                             number between 0-1\n\t * @example\n\t * //trigger the attack 0.5 seconds from now with a velocity of 0.2\n\t * env.triggerAttack(\"+0.5\", 0.2);\n\t */\n\ttriggerAttack(time?: Time, velocity: NormalRange = 1): this {\n\t\tthis.log(\"triggerAttack\", time, velocity);\n\t\ttime = this.toSeconds(time);\n\t\tconst originalAttack = this.toSeconds(this.attack);\n\t\tlet attack = originalAttack;\n\t\tconst decay = this.toSeconds(this.decay);\n\t\t// check if it's not a complete attack\n\t\tconst currentValue = this.getValueAtTime(time);\n\t\tif (currentValue > 0) {\n\t\t\t// subtract the current value from the attack time\n\t\t\tconst attackRate = 1 / attack;\n\t\t\tconst remainingDistance = 1 - currentValue;\n\t\t\t// the attack is now the remaining time\n\t\t\tattack = remainingDistance / attackRate;\n\t\t}\n\t\t// attack\n\t\tif (attack === 0) {\n\t\t\t// case where the attack time is 0 should set instantly\n\t\t\tthis._sig.setValueAtTime(velocity, time);\n\t\t} else if (this._attackCurve === \"linear\") {\n\t\t\tthis._sig.linearRampTo(velocity, attack, time);\n\t\t} else if (this._attackCurve === \"exponential\") {\n\t\t\tthis._sig.targetRampTo(velocity, attack, time);\n\t\t} else {\n\t\t\tthis._sig.cancelAndHoldAtTime(time);\n\t\t\tlet curve = this._attackCurve;\n\t\t\t// find the starting position in the curve\n\t\t\tfor (let i = 1; i < curve.length; i++) {\n\t\t\t\t// the starting index is between the two values\n\t\t\t\tif (curve[i - 1] <= currentValue && currentValue <= curve[i]) {\n\t\t\t\t\tcurve = this._attackCurve.slice(i);\n\t\t\t\t\t// the first index is the current value\n\t\t\t\t\tcurve[0] = currentValue;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._sig.setValueCurveAtTime(curve, time, attack, velocity);\n\t\t}\n\t\t// decay\n\t\tif (decay) {\n\t\t\tconst decayValue = velocity * this.sustain;\n\t\t\tconst decayStart = time + attack;\n\t\t\tthis.log(\"decay\", decayStart);\n\t\t\tif (this._decayCurve === \"linear\") {\n\t\t\t\tthis._sig.linearRampTo(decayValue, decay, decayStart + this.sampleTime);\n\t\t\t} else {\n\t\t\t\tthis.assert(this._decayCurve === \"exponential\",\n\t\t\t\t\t`decayCurve can only be \"linear\" or \"exponential\", got ${this._decayCurve}`);\n\t\t\t\tthis._sig.exponentialApproachValueAtTime(decayValue, decayStart, decay);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Triggers the release of the envelope.\n\t * @param  time When the release portion of the envelope should start.\n\t * @example\n\t * //trigger release immediately\n\t * env.triggerRelease();\n\t */\n\ttriggerRelease(time?: Time): this {\n\t\tthis.log(\"triggerRelease\", time);\n\t\ttime = this.toSeconds(time);\n\t\tconst currentValue = this.getValueAtTime(time);\n\t\tif (currentValue > 0) {\n\t\t\tconst release = this.toSeconds(this.release);\n\t\t\tif (this._releaseCurve === \"linear\") {\n\t\t\t\tthis._sig.linearRampTo(0, release, time);\n\t\t\t} else if (this._releaseCurve === \"exponential\") {\n\t\t\t\tthis._sig.targetRampTo(0, release, time);\n\t\t\t} else {\n\t\t\t\tthis.assert(isArray(this._releaseCurve), \"releaseCurve must be either 'linear', 'exponential' or an array\");\n\t\t\t\tthis._sig.cancelAndHoldAtTime(time);\n\t\t\t\tthis._sig.setValueCurveAtTime(this._releaseCurve, time, release, currentValue);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the scheduled value at the given time. This will\n\t * return the unconverted (raw) value.\n\t */\n\tgetValueAtTime(time: Time): NormalRange {\n\t\treturn this._sig.getValueAtTime(time);\n\t}\n\n\t/**\n\t * triggerAttackRelease is shorthand for triggerAttack, then waiting\n\t * some duration, then triggerRelease.\n\t * @param duration The duration of the sustain.\n\t * @param time When the attack should be triggered.\n\t * @param velocity The velocity of the envelope.\n\t * @example\n\t * //trigger the attack and then the release after 0.6 seconds.\n\t * env.triggerAttackRelease(0.6);\n\t */\n\ttriggerAttackRelease(duration: Time, time?: Time, velocity: NormalRange = 1): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis.triggerAttack(time, velocity);\n\t\tthis.triggerRelease(time + this.toSeconds(duration));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Cancels all scheduled envelope changes after the given time.\n\t */\n\tcancel(after?: Time): this {\n\t\tthis._sig.cancelScheduledValues(this.toSeconds(after));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Connect the envelope to a destination node.\n\t */\n\tconnect(destination: InputNode, outputNumber: number = 0, inputNumber: number = 0): this {\n\t\tconnectSignal(this, destination, outputNumber, inputNumber);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._sig.dispose();\n\t\treturn this;\n\t}\n}\n\ninterface EnvelopeCurveObject {\n\tIn: number[];\n\tOut: number[];\n}\n\ntype EnvelopeDirection = keyof EnvelopeCurveObject;\n\ninterface EnvelopeCurveMap {\n\tlinear: \"linear\";\n\texponential: \"exponential\";\n\tbounce: EnvelopeCurveObject;\n\tcosine: EnvelopeCurveObject;\n\tsine: EnvelopeCurveObject;\n\tripple: EnvelopeCurveObject;\n\tstep: EnvelopeCurveObject;\n}\n\ntype EnvelopeCurveName = keyof EnvelopeCurveMap;\n\n/**\n * Generate some complex envelope curves.\n */\nconst EnvelopeCurves: EnvelopeCurveMap = (() => {\n\n\tconst curveLen = 128;\n\n\tlet i: number;\n\tlet k: number;\n\n\t// cosine curve\n\tconst cosineCurve: number[] = [];\n\tfor (i = 0; i < curveLen; i++) {\n\t\tcosineCurve[i] = Math.sin((i / (curveLen - 1)) * (Math.PI / 2));\n\t}\n\n\t// ripple curve\n\tconst rippleCurve: number[] = [];\n\tconst rippleCurveFreq = 6.4;\n\tfor (i = 0; i < curveLen - 1; i++) {\n\t\tk = (i / (curveLen - 1));\n\t\tconst sineWave = Math.sin(k * (Math.PI * 2) * rippleCurveFreq - Math.PI / 2) + 1;\n\t\trippleCurve[i] = sineWave / 10 + k * 0.83;\n\t}\n\trippleCurve[curveLen - 1] = 1;\n\n\t// stairs curve\n\tconst stairsCurve: number[] = [];\n\tconst steps = 5;\n\tfor (i = 0; i < curveLen; i++) {\n\t\tstairsCurve[i] = Math.ceil((i / (curveLen - 1)) * steps) / steps;\n\t}\n\n\t// in-out easing curve\n\tconst sineCurve: number[] = [];\n\tfor (i = 0; i < curveLen; i++) {\n\t\tk = i / (curveLen - 1);\n\t\tsineCurve[i] = 0.5 * (1 - Math.cos(Math.PI * k));\n\t}\n\n\t// a bounce curve\n\tconst bounceCurve: number[] = [];\n\tfor (i = 0; i < curveLen; i++) {\n\t\tk = i / (curveLen - 1);\n\t\tconst freq = Math.pow(k, 3) * 4 + 0.2;\n\t\tconst val = Math.cos(freq * Math.PI * 2 * k);\n\t\tbounceCurve[i] = Math.abs(val * (1 - k));\n\t}\n\n\t/**\n\t * Invert a value curve to make it work for the release\n\t */\n\tfunction invertCurve(curve: number[]): number[] {\n\t\tconst out = new Array(curve.length);\n\t\tfor (let j = 0; j < curve.length; j++) {\n\t\t\tout[j] = 1 - curve[j];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t * reverse the curve\n\t */\n\tfunction reverseCurve(curve: number[]): number[] {\n\t\treturn curve.slice(0).reverse();\n\t}\n\n\t/**\n\t * attack and release curve arrays\n\t */\n\treturn {\n\t\tbounce: {\n\t\t\tIn: invertCurve(bounceCurve),\n\t\t\tOut: bounceCurve,\n\t\t},\n\t\tcosine: {\n\t\t\tIn: cosineCurve,\n\t\t\tOut: reverseCurve(cosineCurve),\n\t\t},\n\t\texponential: \"exponential\" as \"exponential\",\n\t\tlinear: \"linear\" as \"linear\",\n\t\tripple: {\n\t\t\tIn: rippleCurve,\n\t\t\tOut: invertCurve(rippleCurve),\n\t\t},\n\t\tsine: {\n\t\t\tIn: sineCurve,\n\t\t\tOut: invertCurve(sineCurve),\n\t\t},\n\t\tstep: {\n\t\t\tIn: stairsCurve,\n\t\t\tOut: invertCurve(stairsCurve),\n\t\t},\n\t};\n})();\n","import { Gain } from \"../../core/context/Gain\";\nimport { NormalRange, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Envelope, EnvelopeOptions } from \"./Envelope\";\n\n/**\n * AmplitudeEnvelope is a Tone.Envelope connected to a gain node.\n * Unlike Tone.Envelope, which outputs the envelope's value, AmplitudeEnvelope accepts\n * an audio signal as the input and will apply the envelope to the amplitude\n * of the signal.\n * Read more about ADSR Envelopes on [Wikipedia](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope).\n *\n * @example\n * var ampEnv = new AmplitudeEnvelope({\n * \t\"attack\": 0.1,\n * \t\"decay\": 0.2,\n * \t\"sustain\": 1.0,\n * \t\"release\": 0.8\n * }).toDestination();\n * //create an oscillator and connect it\n * var osc = new Tone.Oscillator().connect(ampEnv).start();\n * //trigger the envelopes attack and release \"8t\" apart\n * ampEnv.triggerAttackRelease(\"8t\");\n * @category Component\n */\nexport class AmplitudeEnvelope extends Envelope {\n\n\treadonly name: string = \"AmplitudeEnvelope\";\n\n\tprivate _gainNode: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\toutput: Gain = this._gainNode;\n\tinput: Gain = this._gainNode;\n\n\t/**\n\t * @param attack The amount of time it takes for the envelope to go from 0 to it's maximum value.\n\t * @param decay\tThe period of time after the attack that it takes for the envelope\n\t *                      \tto fall to the sustain value. Value must be greater than 0.\n\t * @param sustain\tThe percent of the maximum value that the envelope rests at until\n\t *                               \tthe release is triggered.\n\t * @param release\tThe amount of time after the release is triggered it takes to reach 0.\n\t *                        \tValue must be greater than 0.\n\t */\n\tconstructor(attack?: Time, decay?: Time, sustain?: NormalRange, release?: Time);\n\tconstructor(options?: Partial<EnvelopeOptions>)\n\tconstructor() {\n\t\tsuper(optionsFromArguments(AmplitudeEnvelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]));\n\t\tthis._sig.connect(this._gainNode.gain);\n\t\tthis.output = this._gainNode;\n\t\tthis.input = this._gainNode;\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._gainNode.dispose();\n\t\treturn this;\n\t}\n}\n","import { Volume } from \"../component/channel/Volume\";\nimport { Param } from \"../core/context/Param\";\nimport { OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { Decibels, Frequency, NormalRange, Time } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\n\nexport interface InstrumentOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n}\n\n/**\n * Base-class for all instruments\n */\nexport abstract class Instrument<Options extends InstrumentOptions> extends ToneAudioNode<Options> {\n\n\t/**\n\t * The output and volume triming node\n\t */\n\tprivate _volume: Volume;\n\toutput: OutputNode;\n\n\t/**\n\t * The instrument only has an output\n\t */\n\tinput: undefined;\n\n\t/**\n\t * The volume of the output in decibels.\n\t * @example\n\t * source.volume.value = -6;\n\t */\n\tvolume: Param<Decibels>;\n\n\t/**\n\t * Keep track of all events scheduled to the transport\n\t * when the instrument is 'synced'\n\t */\n\tprivate _scheduledEvents: number[] = [];\n\n\t/**\n\t * If the instrument is currently synced\n\t */\n\tprivate _synced: boolean = false;\n\n\tconstructor(options?: Partial<InstrumentOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Instrument.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Instrument.getDefaults(), arguments);\n\n\t\tthis._volume = this.output = new Volume({\n\t\t\tcontext: this.context,\n\t\t\tvolume: options.volume,\n\t\t});\n\t\tthis.volume = this._volume.volume;\n\t\treadOnly(this, \"volume\");\n\t}\n\n\tstatic getDefaults(): InstrumentOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Sync the instrument to the Transport. All subsequent calls of\n\t * [[triggerAttack]] and [[triggerRelease]]\n\t * will be scheduled along the transport.\n\t * @example\n\t * instrument.sync()\n\t * //schedule 3 notes when the transport first starts\n\t * instrument.triggerAttackRelease('C4', '8n', 0)\n\t * instrument.triggerAttackRelease('E4', '8n', '8n')\n\t * instrument.triggerAttackRelease('G4', '8n', '4n')\n\t * //start the transport to hear the notes\n\t * Transport.start()\n\t * @returns {Instrument} this\n\t */\n\tsync(): this {\n\t\tif (!this._synced) {\n\t\t\tthis._synced = true;\n\t\t\tthis._syncMethod(\"triggerAttack\", 1);\n\t\t\tthis._syncMethod(\"triggerRelease\", 0);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Wrap the given method so that it can be synchronized\n\t * @param method Which method to wrap and sync\n\t * @param  timePosition What position the time argument appears in\n\t */\n\tprotected _syncMethod(method: string, timePosition: number): void {\n\t\tconst originalMethod = this[\"_original_\" + method] = this[method];\n\t\tthis[method] = (...args: any[]) => {\n\t\t\tconst time = args[timePosition];\n\t\t\tconst id = this.context.transport.schedule((t) => {\n\t\t\t\targs[timePosition] = t;\n\t\t\t\toriginalMethod.apply(this, args);\n\t\t\t}, time);\n\t\t\tthis._scheduledEvents.push(id);\n\t\t};\n\t}\n\n\t/**\n\t * Unsync the instrument from the Transport\n\t */\n\tunsync(): this {\n\t\tthis._scheduledEvents.forEach(id => this.context.transport.clear(id));\n\t\tthis._scheduledEvents = [];\n\t\tif (this._synced) {\n\t\t\tthis._synced = false;\n\t\t\tthis.triggerAttack = this._original_triggerAttack;\n\t\t\tthis.triggerRelease = this._original_triggerRelease;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Trigger the attack and then the release after the duration.\n\t * @param  note     The note to trigger.\n\t * @param  duration How long the note should be held for before\n\t *                         triggering the release. This value must be greater than 0.\n\t * @param time  When the note should be triggered.\n\t * @param  velocity The velocity the note should be triggered at.\n\t * @example\n\t * //trigger \"C4\" for the duration of an 8th note\n\t * synth.triggerAttackRelease(\"C4\", \"8n\");\n\t */\n\ttriggerAttackRelease(note: Frequency, duration: Time, time?: Time, velocity?: NormalRange): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst computedDuration = this.toSeconds(duration);\n\t\tthis.triggerAttack(note, computedTime, velocity);\n\t\tthis.triggerRelease(computedTime + computedDuration);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Start the instrument's note.\n\t * @param note the note to trigger\n\t * @param time the time to trigger the ntoe\n\t * @param velocity the velocity to trigger the note (betwee 0-1)\n\t */\n\tabstract triggerAttack(note: Frequency, time?: Time, velocity?: NormalRange): this;\n\tprivate _original_triggerAttack = this.triggerAttack;\n\n\t/**\n\t * Trigger the release phase of the current note.\n\t * @param time when to trigger the release\n\t */\n\tabstract triggerRelease(...args: any[]): this;\n\tprivate _original_triggerRelease = this.triggerRelease;\n\n\t/**\n\t * clean up\n\t * @returns {Instrument} this\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._volume.dispose();\n\t\tthis.unsync();\n\t\tthis._scheduledEvents = [];\n\t\treturn this;\n\t}\n}\n","import { Envelope } from \"../component/envelope/Envelope\";\nimport { FrequencyClass } from \"../core/type/Frequency\";\nimport { Cents, Frequency, NormalRange, Seconds, Time } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { Instrument, InstrumentOptions } from \"../instrument/Instrument\";\nimport { Signal } from \"../signal/Signal\";\n\ntype onSilenceCallback = (instrument: Monophonic<any>) => void;\n\nexport interface MonophonicOptions extends InstrumentOptions {\n\tportamento: Seconds;\n\tonsilence: onSilenceCallback;\n\tdetune: Cents;\n}\n\n/**\n * Abstract base class for other monophonic instruments to extend.\n */\nexport abstract class Monophonic<Options extends MonophonicOptions> extends Instrument<Options> {\n\n\t/**\n\t * The glide time between notes.\n\t */\n\tportamento: Seconds;\n\n\t/**\n\t * Invoked when the release has finished and the output is silent.\n\t */\n\tonsilence: onSilenceCallback;\n\n\t/**\n\t * The instrument's envelope\n\t */\n\tabstract envelope: Envelope;\n\n\t/**\n\t * The instrument's frequency signal.\n\t */\n\tabstract readonly frequency: Signal<Frequency>;\n\n\t/**\n\t * The instrument's detune control signal.\n\t */\n\tabstract readonly detune: Signal<Cents>;\n\n\tconstructor(options?: Partial<MonophonicOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Monophonic.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Monophonic.getDefaults(), arguments);\n\n\t\tthis.portamento = options.portamento;\n\t\tthis.onsilence = options.onsilence;\n\t}\n\n\tstatic getDefaults(): MonophonicOptions {\n\t\treturn Object.assign(Instrument.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tonsilence: noOp,\n\t\t\tportamento: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Trigger the attack of the note optionally with a given velocity.\n\t * @param  note The note to trigger.\n\t * @param  time When the note should start.\n\t * @param  velocity The velocity scaler determines how \"loud\" the note will be triggered.\n\t * @example\n\t * synth.triggerAttack(\"C4\");\n\t * @example\n\t * //trigger the note a half second from now at half velocity\n\t * synth.triggerAttack(\"C4\", \"+0.5\", 0.5);\n\t */\n\ttriggerAttack(note: Frequency | FrequencyClass, time?: Time, velocity: NormalRange = 1): this {\n\t\tthis.log(\"triggerAttack\", note, time, velocity);\n\t\tconst seconds = this.toSeconds(time);\n\t\tthis._triggerEnvelopeAttack(seconds, velocity);\n\t\tthis.setNote(note, seconds);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Trigger the release portion of the envelope\n\t * @param  time If no time is given, the release happens immediatly\n\t * @example\n\t * synth.triggerRelease();\n\t */\n\ttriggerRelease(time?: Time): this {\n\t\tthis.log(\"triggerRelease\", time);\n\t\tconst seconds = this.toSeconds(time);\n\t\tthis._triggerEnvelopeRelease(seconds);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Internal method which starts the envelope attack\n\t */\n\tprotected abstract _triggerEnvelopeAttack(time: Seconds, velocity: NormalRange): void;\n\n\t/**\n\t * Internal method which starts the envelope release\n\t */\n\tprotected abstract _triggerEnvelopeRelease(time: Seconds): void;\n\n\t/**\n\t * Get the level of the output at the given time. Measures\n\t * the envelope(s) value at the time.\n\t * @param time The time to query the envelope value\n\t * @return The output level between 0-1\n\t */\n\tgetLevelAtTime(time: Time): NormalRange {\n\t\ttime = this.toSeconds(time);\n\t\treturn this.envelope.getValueAtTime(time);\n\t}\n\n\t/**\n\t * Set the note at the given time. If no time is given, the note\n\t * will set immediately.\n\t * @param note The note to change to.\n\t * @param  time The time when the note should be set.\n\t * @example\n\t * //change to F#6 in one quarter note from now.\n\t * synth.setNote(\"F#6\", \"+4n\");\n\t * @example\n\t * //change to Bb4 right now\n\t * synth.setNote(\"Bb4\");\n\t */\n\tsetNote(note: Frequency | FrequencyClass, time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst computedFrequency = note instanceof FrequencyClass ? note.toFrequency() : note;\n\t\tif (this.portamento > 0 && this.getLevelAtTime(computedTime) > 0.05) {\n\t\t\tconst portTime = this.toSeconds(this.portamento);\n\t\t\tthis.frequency.exponentialRampTo(computedFrequency, portTime, computedTime);\n\t\t} else {\n\t\t\tthis.frequency.setValueAtTime(computedFrequency, computedTime);\n\t\t}\n\t\treturn this;\n\t}\n}\n","import { AmplitudeEnvelope } from \"../component/envelope/AmplitudeEnvelope\";\nimport { Envelope, EnvelopeOptions } from \"../component/envelope/Envelope\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { Cents, Frequency, Seconds } from \"../core/type/Units\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { RecursivePartial } from \"../core/util/Interface\";\nimport { Signal } from \"../signal/Signal\";\nimport { OmniOscillator } from \"../source/oscillator/OmniOscillator\";\nimport { OmniOscillatorConstructorOptions, OmniOscillatorSynthOptions } from \"../source/oscillator/OscillatorInterface\";\nimport { Source, SourceOptions } from \"../source/Source\";\nimport { Monophonic, MonophonicOptions } from \"./Monophonic\";\n\nexport interface SynthOptions extends MonophonicOptions {\n\toscillator: OmniOscillatorSynthOptions;\n\tenvelope: Omit<EnvelopeOptions, keyof ToneAudioNodeOptions>;\n}\n\n/**\n * Synth is composed simply of a {@link OmniOscillator} routed through an {@link AmplitudeEnvelope}.\n * ```\n * +----------------+   +-------------------+\n * | OmniOscillator +>--> AmplitudeEnvelope +>--> Output\n * +----------------+   +-------------------+\n * ```\n * @example\n * var synth = new Synth().toDestination();\n * synth.triggerAttackRelease(\"C4\", \"8n\");\n * @category Instrument\n */\nexport class Synth<Options extends SynthOptions = SynthOptions> extends Monophonic<Options> {\n\n\treadonly name: string = \"Synth\";\n\n\t/**\n\t * The oscillator.\n\t */\n\treadonly oscillator: OmniOscillator<any>;\n\n\t/**\n\t * The frequency signal\n\t */\n\treadonly frequency: Signal<Frequency>;\n\n\t/**\n\t * The detune signal\n\t */\n\treadonly detune: Signal<Cents>;\n\n\t/**\n\t * The envelope\n\t */\n\treadonly envelope: AmplitudeEnvelope;\n\n\t/**\n\t * @param options the options available for the synth.\n\t */\n\tconstructor(options?: RecursivePartial<SynthOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Synth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Synth.getDefaults(), arguments);\n\n\t\tthis.oscillator = new OmniOscillator(Object.assign({\n\t\t\tcontext: this.context,\n\t\t\tdetune: options.detune,\n\t\t\tonstop: () => this.onsilence(this),\n\t\t}, options.oscillator));\n\n\t\tthis.frequency = this.oscillator.frequency;\n\t\tthis.detune = this.oscillator.detune;\n\n\t\tthis.envelope = new AmplitudeEnvelope(Object.assign({\n\t\t\tcontext: this.context,\n\t\t}, options.envelope));\n\n\t\t// connect the oscillators to the output\n\t\tthis.oscillator.chain(this.envelope, this.output);\n\t\treadOnly(this, [\"oscillator\", \"frequency\", \"detune\", \"envelope\"]);\n\t}\n\n\tstatic getDefaults(): SynthOptions {\n\t\treturn Object.assign(Monophonic.getDefaults(), {\n\t\t\tenvelope: Object.assign(\n\t\t\t\tomitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())),\n\t\t\t\t{\n\t\t\t\t\tattack: 0.005,\n\t\t\t\t\tdecay: 0.1,\n\t\t\t\t\trelease: 1,\n\t\t\t\t\tsustain: 0.3,\n\t\t\t\t},\n\t\t\t),\n\t\t\toscillator: Object.assign(\n\t\t\t\tomitFromObject(OmniOscillator.getDefaults(), [...Object.keys(Source.getDefaults()), \"frequency\", \"detune\"]),\n\t\t\t\t{\n\t\t\t\t\ttype: \"triangle\",\n\t\t\t\t},\n\t\t\t),\n\t\t});\n\t}\n\n\t/**\n\t * start the attack portion of the envelope\n\t * @param time the time the attack should start\n\t * @param velocity the velocity of the note (0-1)\n\t */\n\tprotected _triggerEnvelopeAttack(time: Seconds, velocity: number): void {\n\t\t// the envelopes\n\t\tthis.envelope.triggerAttack(time, velocity);\n\t\tthis.oscillator.start(time);\n\t\t// if there is no release portion, stop the oscillator\n\t\tif (this.envelope.sustain === 0) {\n\t\t\tconst computedAttack = this.toSeconds(this.envelope.attack);\n\t\t\tconst computedDecay = this.toSeconds(this.envelope.decay);\n\t\t\tthis.oscillator.stop(time + computedAttack + computedDecay);\n\t\t}\n\t}\n\n\t/**\n\t * start the release portion of the envelope\n\t * @param time the time the release should start\n\t */\n\tprotected _triggerEnvelopeRelease(time: Seconds): void {\n\t\tthis.envelope.triggerRelease(time);\n\t\tthis.oscillator.stop(time + this.toSeconds(this.envelope.release));\n\t}\n\n\t/**\n\t * clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.oscillator.dispose();\n\t\tthis.envelope.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioBuffer } from \"../core/context/ToneAudioBuffer\";\nimport { ToneAudioBuffers } from \"../core/context/ToneAudioBuffers\";\nimport { intervalToFrequencyRatio } from \"../core/type/Conversions\";\nimport { FrequencyClass } from \"../core/type/Frequency\";\nimport { Frequency, Interval, MidiNote, NormalRange, Note, Time } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { isArray, isNote, isNumber } from \"../core/util/TypeCheck\";\nimport { Instrument, InstrumentOptions } from \"../instrument/Instrument\";\nimport { ToneBufferSource, ToneBufferSourceCurve } from \"../source/buffer/ToneBufferSource\";\n\ninterface SamplesMap {\n\t[note: string]: ToneAudioBuffer | AudioBuffer | string;\n\t[midi: number]: ToneAudioBuffer | AudioBuffer | string;\n}\n\nexport interface SamplerOptions extends InstrumentOptions {\n\tattack: Time;\n\trelease: Time;\n\tonload: () => void;\n\tbaseUrl: string;\n\tcurve: ToneBufferSourceCurve;\n\turls: SamplesMap;\n}\n\n/**\n * Pass in an object which maps the note's pitch or midi value to the url,\n * then you can trigger the attack and release of that note like other instruments.\n * By automatically repitching the samples, it is possible to play pitches which\n * were not explicitly included which can save loading time.\n *\n * For sample or buffer playback where repitching is not necessary,\n * use [[Player]].\n * @example\n * var sampler = new Sampler({\n * \t\"C3\" : \"path/to/C3.mp3\",\n * \t\"D#3\" : \"path/to/Dsharp3.mp3\",\n * \t\"F#3\" : \"path/to/Fsharp3.mp3\",\n * \t\"A3\" : \"path/to/A3.mp3\",\n * }, function(){\n * \t//sampler will repitch the closest sample\n * \tsampler.triggerAttack(\"D3\")\n * })\n * @category Instrument\n */\nexport class Sampler extends Instrument<SamplerOptions> {\n\n\treadonly name: string = \"Sampler\";\n\n\t/**\n\t * The stored and loaded buffers\n\t */\n\tprivate _buffers: ToneAudioBuffers;\n\n\t/**\n\t * The object of all currently playing BufferSources\n\t */\n\tprivate _activeSources: Map<MidiNote, ToneBufferSource[]> = new Map();\n\n\t/**\n\t * The envelope applied to the beginning of the sample.\n\t */\n\tattack: Time;\n\n\t/**\n\t * The envelope applied to the end of the envelope.\n\t */\n\trelease: Time;\n\n\t/**\n\t * The shape of the attack/release curve.\n\t * Either \"linear\" or \"exponential\"\n\t */\n\tcurve: ToneBufferSourceCurve;\n\n\t/**\n\t * @param samples An object of samples mapping either Midi Note Numbers or\n\t * \t\t\tScientific Pitch Notation to the url of that sample.\n\t * @param onload The callback to invoke when all of the samples are loaded.\n\t * @param baseUrl The root URL of all of the samples, which is prepended to all the URLs.\n\t */\n\tconstructor(samples?: SamplesMap, onload?: () => void, baseUrl?: string);\n\t/**\n\t * @param samples An object of samples mapping either Midi Note Numbers or\n\t * \t\t\tScientific Pitch Notation to the url of that sample.\n\t * @param options The remaining options associated with the sampler\n\t */\n\tconstructor(samples?: SamplesMap, options?: Partial<Omit<SamplerOptions, \"urls\">>);\n\tconstructor(options?: Partial<SamplerOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Sampler.getDefaults(), arguments, [\"urls\", \"onload\", \"baseUrl\"], \"urls\"));\n\t\tconst options = optionsFromArguments(Sampler.getDefaults(), arguments, [\"urls\", \"onload\", \"baseUrl\"], \"urls\");\n\n\t\tconst urlMap = {};\n\t\tObject.keys(options.urls).forEach((note) => {\n\t\t\tconst noteNumber = parseInt(note, 10);\n\t\t\tthis.assert(isNote(note)\n\t\t\t\t|| (isNumber(noteNumber) && isFinite(noteNumber)), `url key is neither a note or midi pitch: ${note}`);\n\t\t\tif (isNote(note)) {\n\t\t\t\t// convert the note name to MIDI\n\t\t\t\tconst mid = new FrequencyClass(this.context, note).toMidi();\n\t\t\t\turlMap[mid] = options.urls[note];\n\t\t\t} else if (isNumber(noteNumber) && isFinite(noteNumber)) {\n\t\t\t\t// otherwise if it's numbers assume it's midi\n\t\t\t\turlMap[noteNumber] = options.urls[noteNumber];\n\t\t\t}\n\t\t});\n\n\t\tthis._buffers = new ToneAudioBuffers(urlMap, options.onload, options.baseUrl);\n\t\tthis.attack = options.attack;\n\t\tthis.release = options.release;\n\t\tthis.curve = options.curve;\n\n\t\t// invoke the callback if it's already loaded\n\t\tif (this._buffers.loaded) {\n\t\t\t// invoke onload deferred\n\t\t\tPromise.resolve().then(options.onload);\n\t\t}\n\t}\n\n\tstatic getDefaults(): SamplerOptions {\n\t\treturn Object.assign(Instrument.getDefaults(), {\n\t\t\tattack: 0,\n\t\t\tbaseUrl: \"\",\n\t\t\tcurve: \"exponential\" as \"exponential\",\n\t\t\tonload: noOp,\n\t\t\trelease: 0.1,\n\t\t\turls: {},\n\t\t});\n\t}\n\n\t/**\n\t * Returns the difference in steps between the given midi note at the closets sample.\n\t */\n\tprivate _findClosest(midi: MidiNote): Interval {\n\t\t// searches within 8 octaves of the given midi note\n\t\tconst MAX_INTERVAL = 96;\n\t\tlet interval = 0;\n\t\twhile (interval < MAX_INTERVAL) {\n\t\t\t// check above and below\n\t\t\tif (this._buffers.has(midi + interval)) {\n\t\t\t\treturn -interval;\n\t\t\t} else if (this._buffers.has(midi - interval)) {\n\t\t\t\treturn interval;\n\t\t\t}\n\t\t\tinterval++;\n\t\t}\n\t\tthrow new Error(`No available buffers for note: ${midi}`);\n\t}\n\n\t/**\n\t * @param  notes\tThe note to play, or an array of notes.\n\t * @param  time     When to play the note\n\t * @param  velocity The velocity to play the sample back.\n\t */\n\ttriggerAttack(notes: Frequency | Frequency[], time?: Time, velocity: NormalRange = 1): this {\n\t\tthis.log(\"triggerAttack\", notes, time, velocity);\n\t\tif (!Array.isArray(notes)) {\n\t\t\tnotes = [notes];\n\t\t}\n\t\tnotes.forEach(note => {\n\t\t\tconst midi = new FrequencyClass(this.context, note).toMidi();\n\t\t\t// find the closest note pitch\n\t\t\tconst difference = this._findClosest(midi);\n\t\t\tconst closestNote = midi - difference;\n\t\t\tconst buffer = this._buffers.get(closestNote);\n\t\t\tconst playbackRate = intervalToFrequencyRatio(difference);\n\t\t\t// play that note\n\t\t\tconst source = new ToneBufferSource({\n\t\t\t\tbuffer,\n\t\t\t\tcontext: this.context,\n\t\t\t\tcurve: this.curve,\n\t\t\t\tfadeIn: this.attack,\n\t\t\t\tfadeOut: this.release,\n\t\t\t\tplaybackRate,\n\t\t\t}).connect(this.output);\n\t\t\tsource.start(time, 0, buffer.duration / playbackRate, velocity);\n\t\t\t// add it to the active sources\n\t\t\tif (!isArray(this._activeSources.get(midi))) {\n\t\t\t\tthis._activeSources.set(midi, []);\n\t\t\t}\n\t\t\t(this._activeSources.get(midi) as ToneBufferSource[]).push(source);\n\n\t\t\t// remove it when it's done\n\t\t\tsource.onended = () => {\n\t\t\t\tif (this._activeSources && this._activeSources.has(midi)) {\n\t\t\t\t\tconst sources = this._activeSources.get(midi) as ToneBufferSource[];\n\t\t\t\t\tconst index = sources.indexOf(source);\n\t\t\t\t\tif (index !== -1) {\n\t\t\t\t\t\tsources.splice(index, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * @param  notes\tThe note to release, or an array of notes.\n\t * @param  time     \tWhen to release the note.\n\t */\n\ttriggerRelease(notes: Frequency | Frequency[], time?: Time): this {\n\t\tthis.log(\"triggerRelease\", notes, time);\n\t\tif (!Array.isArray(notes)) {\n\t\t\tnotes = [notes];\n\t\t}\n\t\tnotes.forEach(note => {\n\t\t\tconst midi = new FrequencyClass(this.context, note).toMidi();\n\t\t\t// find the note\n\t\t\tif (this._activeSources.has(midi) && (this._activeSources.get(midi) as ToneBufferSource[]).length) {\n\t\t\t\tconst sources = this._activeSources.get(midi) as ToneBufferSource[];\n\t\t\t\ttime = this.toSeconds(time);\n\t\t\t\tsources.forEach(source => {\n\t\t\t\t\tsource.stop(time);\n\t\t\t\t});\n\t\t\t\tthis._activeSources.set(midi, []);\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Release all currently active notes.\n\t * @param  time     \tWhen to release the notes.\n\t */\n\treleaseAll(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._activeSources.forEach(sources => {\n\t\t\twhile (sources.length) {\n\t\t\t\tconst source = sources.shift() as ToneBufferSource;\n\t\t\t\tsource.stop(computedTime);\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sync the instrument to the Transport. All subsequent calls of\n\t * [[triggerAttack]] and [[triggerRelease]]\n\t * will be scheduled along the transport.\n\t * @example\n\t * synth.sync()\n\t * //schedule 3 notes when the transport first starts\n\t * synth.triggerAttackRelease('8n', 0)\n\t * synth.triggerAttackRelease('8n', '8n')\n\t * synth.triggerAttackRelease('8n', '4n')\n\t * //start the transport to hear the notes\n\t * Transport.start()\n\t * @returns {Tone.Instrument} this\n\t */\n\tsync(): this {\n\t\tthis._syncMethod(\"triggerAttack\", 1);\n\t\tthis._syncMethod(\"triggerRelease\", 1);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Invoke the attack phase, then after the duration, invoke the release.\n\t * @param  notes\tThe note to play and release, or an array of notes.\n\t * @param  duration The time the note should be held\n\t * @param  time     When to start the attack\n\t * @param  velocity The velocity of the attack\n\t */\n\ttriggerAttackRelease(\n\t\tnotes: Frequency[] | Frequency,\n\t\tduration: Time | Time[],\n\t\ttime?: Time,\n\t\tvelocity: NormalRange = 1,\n\t): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis.triggerAttack(notes, computedTime, velocity);\n\t\tif (isArray(duration)) {\n\t\t\tthis.assert(isArray(notes), \"notes must be an array when duration is array\");\n\t\t\t(notes as Frequency[]).forEach((note, index) => {\n\t\t\t\tconst d = duration[Math.min(index, duration.length - 1)];\n\t\t\t\tthis.triggerRelease(note, computedTime + this.toSeconds(d));\n\t\t\t});\n\t\t} else {\n\t\t\tthis.triggerRelease(notes, computedTime + this.toSeconds(duration));\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a note to the sampler.\n\t * @param  note      The buffer's pitch.\n\t * @param  url  Either the url of the buffer, or a buffer which will be added with the given name.\n\t * @param  callback  The callback to invoke when the url is loaded.\n\t */\n\tadd(note: Note | MidiNote, url: string | ToneAudioBuffer | AudioBuffer, callback?: () => void): this {\n\t\tthis.assert(isNote(note) || isFinite(note), `note must be a pitch or midi: ${note}`);\n\t\tif (isNote(note)) {\n\t\t\t// convert the note name to MIDI\n\t\t\tconst mid = new FrequencyClass(this.context, note).toMidi();\n\t\t\tthis._buffers.add(mid, url, callback);\n\t\t} else {\n\t\t\t// otherwise if it's numbers assume it's midi\n\t\t\tthis._buffers.add(note, url, callback);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * If the buffers are loaded or not\n\t */\n\tget loaded(): boolean {\n\t\treturn this._buffers.loaded;\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._buffers.dispose();\n\t\tthis._activeSources.forEach(sources => {\n\t\t\tsources.forEach(source => source.dispose());\n\t\t});\n\t\tthis._activeSources.clear();\n\t\treturn this;\n\t}\n}\n","import { MidiClass } from \"../core/type/Midi\";\nimport { Frequency, MidiNote, NormalRange, Seconds, Time } from \"../core/type/Units\";\nimport { deepMerge, optionsFromArguments } from \"../core/util/Defaults\";\nimport { RecursivePartial } from \"../core/util/Interface\";\nimport { isArray, isNumber } from \"../core/util/TypeCheck\";\nimport { Instrument, InstrumentOptions } from \"./Instrument\";\nimport { MembraneSynth, MembraneSynthOptions } from \"./MembraneSynth\";\nimport { MetalSynth, MetalSynthOptions } from \"./MetalSynth\";\nimport { Monophonic } from \"./Monophonic\";\nimport { Synth, SynthOptions } from \"./Synth\";\n\ntype VoiceConstructor<V> = {\n\tgetDefaults: () => VoiceOptions<V>;\n} & (new (...args: any[]) => V);\n\ntype OmitMonophonicOptions<T> = Omit<T, \"context\" | \"onsilence\">;\n\ntype VoiceOptions<T> =\n\tT extends MembraneSynth ? MembraneSynthOptions :\n\t\tT extends MetalSynth ? MetalSynthOptions :\n\t\t\tT extends Synth ? SynthOptions :\n\t\t\t\tnever;\n\n/**\n * The settable synth options. excludes monophonic options.\n */\ntype PartialVoiceOptions<T> = RecursivePartial<OmitMonophonicOptions<VoiceOptions<T>>>;\n\nexport interface PolySynthOptions<Voice> extends InstrumentOptions {\n\tmaxPolyphony: number;\n\tvoice: VoiceConstructor<Voice>;\n\toptions: PartialVoiceOptions<Voice>;\n}\n\n/**\n * PolySynth handles voice creation and allocation for any\n * instruments passed in as the second paramter. PolySynth is\n * not a synthesizer by itself, it merely manages voices of\n * one of the other types of synths, allowing any of the\n * monophonic synthesizers to be polyphonic.\n *\n * @example\n * var synth = new PolySynth(Tone.Synth, {\n *   oscillator : {\n * \t\ttype : \"square\"\n * \t}\n * }).toMaster();\n * //set the attributes using the set interface\n * synth.set(\"detune\", -1200);\n * //play a chord\n * synth.triggerAttackRelease([\"C4\", \"E4\", \"A4\"], \"4n\");\n * @category Instrument\n */\nexport class PolySynth<Voice extends Monophonic<any> = Synth> extends Instrument<VoiceOptions<Voice>> {\n\n\treadonly name: string = \"PolySynth\";\n\n\t/**\n\t * The voices which are not currently in use\n\t */\n\tprivate _availableVoices: Voice[] = [];\n\n\t/**\n\t * The currently active voices\n\t */\n\tprivate _activeVoices: Array<{midi: MidiNote; voice: Voice}> = [];\n\n\t/**\n\t * All of the allocated voices for this synth.\n\t */\n\tprivate _voices: Voice[] = [];\n\n\t/**\n\t * The options that are set on the synth.\n\t */\n\tprivate options: VoiceOptions<Voice>;\n\n\t/**\n\t * The polyphony limit.\n\t */\n\tmaxPolyphony: number;\n\n\t/**\n\t * The voice constructor\n\t */\n\tprivate readonly voice: VoiceConstructor<Voice>;\n\n\t/**\n\t * The GC timeout. Held so that it could be cancelled when the node is disposed.\n\t */\n\tprivate _gcTimeout: number = -1;\n\n\t/**\n\t * A moving average of the number of active voices\n\t */\n\tprivate _averageActiveVoices: number = 0;\n\n\t/**\n\t * @param voice The constructor of the voices\n\t * @param options\tThe options object to set the synth voice\n\t */\n\tconstructor(\n\t\tvoice?: VoiceConstructor<Voice>,\n\t\toptions?: PartialVoiceOptions<Voice>,\n\t);\n\tconstructor(options?: Partial<PolySynthOptions<Voice>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(PolySynth.getDefaults(), arguments, [\"voice\", \"options\"]));\n\t\tconst options = optionsFromArguments(PolySynth.getDefaults(), arguments, [\"voice\", \"options\"]);\n\n\t\t// check against the old API (pre 14.3.0)\n\t\tthis.assert(!isNumber(options.voice), \"DEPRECATED: The polyphony count is no longer the first argument.\");\n\n\t\tconst defaults = options.voice.getDefaults();\n\t\tthis.options = Object.assign(defaults, options.options) as VoiceOptions<Voice>;\n\t\tthis.voice = options.voice as unknown as VoiceConstructor<Voice>;\n\t\tthis.maxPolyphony = options.maxPolyphony;\n\n\t\t// kick off the GC interval\n\t\tthis._gcTimeout = this.context.setInterval(this._collectGarbage.bind(this), 1);\n\t}\n\n\tstatic getDefaults(): PolySynthOptions<Synth> {\n\t\treturn Object.assign(Instrument.getDefaults(), {\n\t\t\tmaxPolyphony: 32,\n\t\t\toptions: {},\n\t\t\tvoice: Synth,\n\t\t});\n\t}\n\n\t/**\n\t * The number of active voices.\n\t */\n\tget activeVoices(): number {\n\t\treturn this._activeVoices.length;\n\t}\n\n\t/**\n\t * If there is a voice active on that note, return it\n\t */\n\tprivate _getActiveVoice(note: MidiNote): Voice | undefined {\n\t\tconst event = this._activeVoices.find(({ midi }) => midi === note);\n\t\tif (event) {\n\t\t\treturn event.voice;\n\t\t}\n\t}\n\n\t/**\n\t * Invoked when the source is done making sound, so that it can be\n\t * readded to the pool of available voices\n\t */\n\tprivate _makeVoiceAvailable(voice: Voice): void {\n\t\tthis._availableVoices.push(voice);\n\t\t// remove the midi note from 'active voices'\n\t\tconst activeVoiceIndex = this._activeVoices.findIndex((e) => e.voice === voice);\n\t\tthis._activeVoices.splice(activeVoiceIndex, 1);\n\t}\n\n\t/**\n\t * Get an available voice from the pool of available voices.\n\t * If one is not available and the maxPolyphony limit is reached,\n\t * steal a voice, otherwise return null.\n\t */\n\tprivate _getNextAvailableVoice(): Voice | undefined {\n\t\t// if there are available voices, return the first one\n\t\tif (this._availableVoices.length) {\n\t\t\treturn this._availableVoices.shift();\n\t\t} else if (this._voices.length < this.maxPolyphony) {\n\t\t\t// otherwise if there is still more maxPolyphony, make a new voice\n\t\t\tconst voice = new this.voice(Object.assign(this.options, {\n\t\t\t\tcontext: this.context,\n\t\t\t\tonsilence: this._makeVoiceAvailable.bind(this),\n\t\t\t}));\n\t\t\tvoice.connect(this.output);\n\t\t\tthis._voices.push(voice);\n\t\t\treturn voice;\n\t\t} else {\n\t\t\tconsole.warn(\"Max polyphony exceeded. Note dropped.\");\n\t\t}\n\t}\n\n\t/**\n\t * Occasionally check if there are any allocated voices which can be cleaned up.\n\t */\n\tprivate _collectGarbage(): void {\n\t\tthis._averageActiveVoices = Math.max(this._averageActiveVoices * 0.95, this.activeVoices);\n\t\tif (this._availableVoices.length && this._voices.length > this._averageActiveVoices) {\n\t\t\t// take off an available note\n\t\t\tconst firstAvail = this._availableVoices.shift() as Voice;\n\t\t\tconst index = this._voices.indexOf(firstAvail);\n\t\t\tthis._voices.splice(index, 1);\n\t\t\tfirstAvail.dispose();\n\t\t}\n\t}\n\n\t/**\n\t * Internal method which triggers the attack\n\t */\n\tprivate _triggerAttack(notes: Frequency[], time: Seconds, velocity?: NormalRange): void {\n\t\tnotes.forEach(note => {\n\t\t\tconst midiNote = new MidiClass(this.context, note).toMidi();\n\t\t\t// let voice: Voice | undefined;\n\t\t\t// if there's already a note at that voice, reuse it\n\t\t\tlet voice = this._getActiveVoice(midiNote);\n\t\t\t// if it has a note, and that note is still active\n\t\t\tif (voice && voice.getLevelAtTime(time) > 0) {\n\t\t\t\tconst activeVoiceIndex = this._activeVoices.findIndex((e) => e.voice === voice);\n\t\t\t\tthis._activeVoices.splice(activeVoiceIndex, 1);\n\t\t\t} else {\n\t\t\t\t// otherwise get the next available voice\n\t\t\t\tvoice = this._getNextAvailableVoice();\n\t\t\t}\n\t\t\tif (voice) {\n\t\t\t\tvoice.triggerAttack(note, time, velocity);\n\t\t\t\tthis._activeVoices.unshift({\n\t\t\t\t\tmidi: midiNote, voice,\n\t\t\t\t});\n\t\t\t\tthis.log(\"triggerAttack\", note, time);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Internal method which triggers the release\n\t */\n\tprivate _triggerRelease(notes: Frequency[], time: Seconds): void {\n\t\tnotes.forEach(note => {\n\t\t\tconst midiNote = new MidiClass(this.context, note).toMidi();\n\t\t\tconst voice = this._getActiveVoice(midiNote);\n\t\t\tif (voice) {\n\t\t\t\t// trigger release on that note\n\t\t\t\tvoice.triggerRelease(time);\n\t\t\t\tthis.log(\"triggerRelease\", note, time);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Schedule the attack/release events. If the time is in the future, then it should set a timeout\n\t * to wait for just-in-time scheduling\n\t */\n\tprivate _scheduleEvent(type: \"attack\" | \"release\", notes: Frequency[], time: Seconds, velocity?: NormalRange): void {\n\t\tthis.assert(!this.disposed, \"Synth was already disposed\");\n\t\t// if the notes are greater than this amount of time in the future, they should be scheduled with setTimeout\n\t\tif (time <= this.now()) {\n\t\t\t// do it immediately\n\t\t\tif (type === \"attack\") {\n\t\t\t\tthis._triggerAttack(notes, time, velocity);\n\t\t\t} else {\n\t\t\t\tthis._triggerRelease(notes, time);\n\t\t\t}\n\t\t} else {\n\t\t\t// schedule it to start in the future\n\t\t\tthis.context.setTimeout(() => {\n\t\t\t\tthis._scheduleEvent(type, notes, time, velocity);\n\t\t\t}, time - this.now());\n\t\t}\n\t}\n\n\t/**\n\t * Trigger the attack portion of the note\n\t * @param  notes The notes to play. Accepts a single Frequency or an array of frequencies.\n\t * @param  time  The start time of the note.\n\t * @param velocity The velocity of the note.\n\t * @example\n\t * //trigger a chord immediately with a velocity of 0.2\n\t * poly.triggerAttack([\"Ab3\", \"C4\", \"F5\"], undefined, 0.2);\n\t */\n\ttriggerAttack(notes: Frequency | Frequency[], time?: Time, velocity?: NormalRange): this {\n\n\t\tif (!Array.isArray(notes)) {\n\t\t\tnotes = [notes];\n\t\t}\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._scheduleEvent(\"attack\", notes, computedTime, velocity);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Trigger the release of the note. Unlike monophonic instruments,\n\t * a note (or array of notes) needs to be passed in as the first argument.\n\t * @param  notes The notes to play. Accepts a single Frequency or an array of frequencies.\n\t * @param  time  When the release will be triggered.\n\t * @example\n\t * poly.triggerRelease([\"Ab3\", \"C4\", \"F5\"], \"+2n\");\n\t */\n\ttriggerRelease(notes: Frequency | Frequency[], time?: Time): this {\n\t\tif (!Array.isArray(notes)) {\n\t\t\tnotes = [notes];\n\t\t}\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._scheduleEvent(\"release\", notes, computedTime);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Trigger the attack and release after the specified duration\n\t * @param  notes The notes to play. Accepts a single  Frequency or an array of frequencies.\n\t * @param  duration the duration of the note\n\t * @param  time  if no time is given, defaults to now\n\t * @param  velocity the velocity of the attack (0-1)\n\t * @example\n\t * //trigger a chord for a duration of a half note\n\t * poly.triggerAttackRelease([\"Eb3\", \"G4\", \"C5\"], \"2n\");\n\t * @example\n\t * //can pass in an array of durations as well\n\t * poly.triggerAttackRelease([\"Eb3\", \"G4\", \"C5\"], [\"2n\", \"4n\", \"4n\"]);\n\t */\n\ttriggerAttackRelease(\n\t\tnotes: Frequency | Frequency[],\n\t\tduration: Time | Time[],\n\t\ttime?: Time,\n\t\tvelocity?: NormalRange,\n\t): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis.triggerAttack(notes, computedTime, velocity);\n\t\tif (isArray(duration)) {\n\t\t\tthis.assert(isArray(notes), \"If the duration is an array, the notes must also be an array\");\n\t\t\tnotes = notes as Frequency[];\n\t\t\tfor (let i = 0; i < notes.length; i++) {\n\t\t\t\tconst d = duration[Math.min(i, duration.length - 1)];\n\t\t\t\tconst durationSeconds = this.toSeconds(d);\n\t\t\t\tthis.assert(durationSeconds > 0, \"The duration must be greater than 0\");\n\t\t\t\tthis.triggerRelease(notes[i], computedTime + durationSeconds);\n\t\t\t}\n\t\t} else {\n\t\t\tconst durationSeconds = this.toSeconds(duration);\n\t\t\tthis.assert(durationSeconds > 0, \"The duration must be greater than 0\");\n\t\t\tthis.triggerRelease(notes, computedTime + durationSeconds);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sync the instrument to the Transport. All subsequent calls of\n\t * {@link triggerAttack} and {@link triggerRelease} will be scheduled along the transport.\n\t * @example\n\t * synth.sync()\n\t * //schedule 3 notes when the transport first starts\n\t * synth.triggerAttackRelease('8n', 0)\n\t * synth.triggerAttackRelease('8n', '8n')\n\t * synth.triggerAttackRelease('8n', '4n')\n\t * //start the transport to hear the notes\n\t * Transport.start()\n\t */\n\tsync(): this {\n\t\tthis._syncMethod(\"triggerAttack\", 1);\n\t\tthis._syncMethod(\"triggerRelease\", 1);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set a member/attribute of the voices\n\t * @example\n\t * poly.set({\n\t * \t\"filter\" : {\n\t * \t\t\"type\" : \"highpass\"\n\t * \t},\n\t * \t\"envelope\" : {\n\t * \t\t\"attack\" : 0.25\n\t * \t}\n\t * });\n\t */\n\tset(options: RecursivePartial<VoiceOptions<Voice>>): this {\n\t\tthis.options = deepMerge(this.options, options);\n\t\tthis._voices.forEach(voice => voice.set(this.options));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the synth's attributes.\n\t */\n\tget(): VoiceOptions<Voice> {\n\t\t// return a clone of the options\n\t\treturn Object.assign({}, this.options);\n\t}\n\n\t/**\n\t * Trigger the release portion of all the currently active voices immediately.\n\t * Useful for silencing the synth.\n\t */\n\treleaseAll(): this {\n\t\tconst now = this.now();\n\t\tthis._activeVoices.forEach(({ voice }) => {\n\t\t\tvoice.triggerRelease(now);\n\t\t});\n\t\tthis._activeVoices = [];\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._voices.forEach(v => v.dispose());\n\t\tthis._activeVoices = [];\n\t\tthis._availableVoices = [];\n\t\tthis.context.clearInterval(this._gcTimeout);\n\t\treturn this;\n\t}\n}\n","import { FrequencyClass } from \"../core/type/Frequency\";\nimport { Frequency, Positive, Time } from \"../core/type/Units\";\nimport { deepMerge, optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly, RecursivePartial } from \"../core/util/Interface\";\nimport { Monophonic } from \"./Monophonic\";\nimport { Synth, SynthOptions } from \"./Synth\";\n\nexport interface MembraneSynthOptions extends SynthOptions {\n\tpitchDecay: Time;\n\toctaves: Positive;\n}\n\n/**\n * MembraneSynth makes kick and tom sounds using a single oscillator\n * with an amplitude envelope and frequency ramp. A Tone.OmniOscillator\n * is routed through a Tone.AmplitudeEnvelope to the output. The drum\n * quality of the sound comes from the frequency envelope applied\n * during MembraneSynth.triggerAttack(note). The frequency envelope\n * starts at <code>note * .octaves</code> and ramps to <code>note</code>\n * over the duration of <code>.pitchDecay</code>.\n * @example\n * var synth = new MembraneSynth().toMaster();\n * synth.triggerAttackRelease(\"C2\", \"8n\");\n * @category Instrument\n */\nexport class MembraneSynth extends Synth<MembraneSynthOptions> {\n\n\treadonly name: string = \"MembraneSynth\";\n\n\t/**\n\t * The number of octaves the pitch envelope ramps.\n\t */\n\toctaves: Positive;\n\n\t/**\n\t * The amount of time the frequency envelope takes.\n\t */\n\tpitchDecay: Time;\n\n\t/**\n\t * Portamento is ignored in this synth. use pitch decay instead.\n\t */\n\treadonly portamento = 0;\n\n\t/**\n\t * @param options the options available for the synth see defaults\n\t */\n\tconstructor(options?: RecursivePartial<MembraneSynthOptions>)\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(MembraneSynth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(MembraneSynth.getDefaults(), arguments);\n\n\t\tthis.pitchDecay = options.pitchDecay;\n\t\tthis.octaves = options.octaves;\n\t\treadOnly(this, [\"oscillator\", \"envelope\"]);\n\t}\n\n\tstatic getDefaults(): MembraneSynthOptions {\n\t\treturn deepMerge(Monophonic.getDefaults(), Synth.getDefaults(), {\n\t\t\tenvelope: {\n\t\t\t\tattack: 0.001,\n\t\t\t\tattackCurve: \"exponential\",\n\t\t\t\tdecay: 0.4,\n\t\t\t\trelease: 1.4,\n\t\t\t\tsustain: 0.01,\n\t\t\t},\n\t\t\toctaves: 10,\n\t\t\toscillator: {\n\t\t\t\ttype: \"sine\",\n\t\t\t},\n\t\t\tpitchDecay: 0.05,\n\t\t});\n\t}\n\n\tsetNote(note: Frequency | FrequencyClass, time?: Time): this {\n\t\tconst seconds = this.toSeconds(time);\n\t\tconst hertz = this.toFrequency(note instanceof FrequencyClass ? note.toFrequency() : note);\n\t\tconst maxNote = hertz * this.octaves;\n\t\tthis.oscillator.frequency.setValueAtTime(maxNote, seconds);\n\t\tthis.oscillator.frequency.exponentialRampToValueAtTime(hertz, seconds + this.toSeconds(this.pitchDecay));\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { connectSeries, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Cents, Decibels, Frequency, GainFactor, Positive } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { isNumber } from \"../../core/util/TypeCheck\";\nimport { Signal } from \"../../signal/Signal\";\n\ninterface FilterOptions extends ToneAudioNodeOptions {\n\ttype: BiquadFilterType;\n\tfrequency: Frequency;\n\trolloff: number;\n\tQ: Positive;\n\tdetune: Cents;\n\tgain: GainFactor;\n}\n\n/**\n * Tone.Filter is a filter which allows for all of the same native methods\n * as the [BiquadFilterNode](http://webaudio.github.io/web-audio-api/#the-biquadfilternode-interface).\n * Tone.Filter has the added ability to set the filter rolloff at -12\n * (default), -24 and -48.\n * @example\n * var filter = new Filter(200, \"highpass\");\n * @category Component\n */\nexport class Filter extends ToneAudioNode<FilterOptions> {\n\n\treadonly name: string = \"Filter\";\n\n\treadonly input = new Gain({ context: this.context });\n\treadonly output = new Gain({ context: this.context });\n\tprivate _filters: BiquadFilterNode[] = [];\n\n\t/**\n\t * the rolloff value of the filter\n\t */\n\tprivate _rolloff!: number;\n\tprivate _type: BiquadFilterType;\n\n\t/**\n\t * The Q or Quality of the filter\n\t */\n\treadonly Q: Signal<Positive>;\n\n\t/**\n\t * The cutoff frequency of the filter.\n\t */\n\treadonly frequency: Signal<Frequency>;\n\n\t/**\n\t * The detune parameter\n\t */\n\treadonly detune: Signal<Cents>;\n\n\t/**\n\t * The gain of the filter, only used in certain filter types\n\t */\n\treadonly gain: Signal<Decibels>;\n\n\t/**\n\t * @param frequency The cutoff frequency of the filter.\n\t * @param type The type of filter.\n\t * @param rolloff The drop in decibels per octave after the cutoff frequency\n\t */\n\tconstructor(frequency?: Frequency, type?: BiquadFilterType, rolloff?: number);\n\tconstructor(options?: Partial<FilterOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Filter.getDefaults(), arguments, [\"frequency\", \"type\", \"rolloff\"]));\n\t\tconst options = optionsFromArguments(Filter.getDefaults(), arguments, [\"frequency\", \"type\", \"rolloff\"]);\n\n\t\tthis._filters = [];\n\n\t\tthis.Q = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.Q,\n\t\t});\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t});\n\t\tthis.detune = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune,\n\t\t});\n\t\tthis.gain = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"decibels\",\n\t\t\tvalue: options.gain,\n\t\t});\n\t\tthis._type = options.type;\n\t\tthis.rolloff = options.rolloff;\n\t\treadOnly(this, [\"detune\", \"frequency\", \"gain\", \"Q\"]);\n\t}\n\n\tstatic getDefaults(): FilterOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tQ: 1,\n\t\t\tdetune: 0,\n\t\t\tfrequency: 350,\n\t\t\tgain: 0,\n\t\t\trolloff: -12,\n\t\t\ttype: \"lowpass\" as BiquadFilterType,\n\t\t});\n\t}\n\n\t/**\n\t * The type of the filter. Types: \"lowpass\", \"highpass\",\n\t * \"bandpass\", \"lowshelf\", \"highshelf\", \"notch\", \"allpass\", or \"peaking\".\n\t */\n\tget type(): BiquadFilterType {\n\t\treturn this._type;\n\t}\n\tset type(type: BiquadFilterType) {\n\t\tconst types: BiquadFilterType[] = [\"lowpass\", \"highpass\", \"bandpass\",\n\t\t\t\"lowshelf\", \"highshelf\", \"notch\", \"allpass\", \"peaking\"];\n\t\tthis.assert(types.indexOf(type) !== -1, `Invalid filter type: ${type}`);\n\t\tthis._type = type;\n\t\tthis._filters.forEach(filter => filter.type = type);\n\t}\n\n\t/**\n\t * The rolloff of the filter which is the drop in db\n\t * per octave. Implemented internally by cascading filters.\n\t * Only accepts the values -12, -24, -48 and -96.\n\t */\n\tget rolloff(): number | string {\n\t\treturn this._rolloff;\n\t}\n\tset rolloff(rolloff: number | string) {\n\t\tconst rolloffNum = isNumber(rolloff) ? rolloff : parseInt(rolloff, 10);\n\t\tconst possibilities = [-12, -24, -48, -96];\n\t\tlet cascadingCount = possibilities.indexOf(rolloffNum);\n\t\t// check the rolloff is valid\n\t\tthis.assert(cascadingCount !== -1, `rolloff can only be ${possibilities.join(\", \")}`);\n\t\tcascadingCount += 1;\n\n\t\tthis._rolloff = rolloffNum;\n\t\tthis.input.disconnect();\n\t\tthis._filters.forEach(filter => filter.disconnect());\n\n\t\tthis._filters = new Array(cascadingCount);\n\t\tfor (let count = 0; count < cascadingCount; count++) {\n\t\t\tconst filter = this.context.createBiquadFilter();\n\t\t\tfilter.type = this._type;\n\t\t\tthis.frequency.connect(filter.frequency);\n\t\t\tthis.detune.connect(filter.detune);\n\t\t\tthis.Q.connect(filter.Q);\n\t\t\tthis.gain.connect(filter.gain);\n\t\t\tthis._filters[count] = filter;\n\t\t}\n\t\tthis._internalChannels = this._filters;\n\t\tconnectSeries(this.input, ...this._internalChannels, this.output);\n\t}\n\n\t/**\n\t * Get the frequency response curve. This curve represents how the filter\n\t * responses to frequencies between 20hz-20khz.\n\t * @param  len The number of values to return\n\t * @return The frequency response curve between 20-20kHz\n\t */\n\tgetFrequencyResponse(len: number = 128): Float32Array {\n\t\t// start with all 1s\n\t\tconst totalResponse = new Float32Array(len).map(() => 1);\n\t\tconst freqValues = new Float32Array(len);\n\t\tfor (let i = 0; i < len; i++) {\n\t\t\tconst norm = Math.pow(i / len, 2);\n\t\t\tconst freq = norm * (20000 - 20) + 20;\n\t\t\tfreqValues[i] = freq;\n\t\t}\n\t\tconst magValues = new Float32Array(len);\n\t\tconst phaseValues = new Float32Array(len);\n\t\tthis._filters.forEach(() => {\n\t\t\tconst filterClone = this.context.createBiquadFilter();\n\t\t\tfilterClone.type = this._type;\n\t\t\tfilterClone.Q.value = this.Q.value;\n\t\t\tfilterClone.frequency.value = this.frequency.value as number;\n\t\t\tfilterClone.gain.value = this.gain.value as number;\n\t\t\tfilterClone.getFrequencyResponse(freqValues, magValues, phaseValues);\n\t\t\tmagValues.forEach((val, i) => {\n\t\t\t\ttotalResponse[i] *= val;\n\t\t\t});\n\t\t});\n\t\treturn totalResponse;\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._filters.forEach(filter => {\n\t\t\tfilter.disconnect();\n\t\t});\n\t\twritable(this, [\"detune\", \"frequency\", \"gain\", \"Q\"]);\n\t\tthis.frequency.dispose();\n\t\tthis.Q.dispose();\n\t\tthis.detune.dispose();\n\t\tthis.gain.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Add } from \"./Add\";\nimport { Multiply } from \"./Multiply\";\nimport { Signal } from \"./Signal\";\nimport { SignalOperator } from \"./SignalOperator\";\n\nexport interface ScaleOptions extends ToneAudioNodeOptions {\n\tmin: number;\n\tmax: number;\n}\n\n/**\n * Performs a linear scaling on an input signal.\n * Scales a NormalRange input to between\n * outputMin and outputMax.\n *\n * @example\n * var scale = new Scale(50, 100);\n * var signal = new Signal(0.5).connect(scale);\n * //the output of scale equals 75\n * @category Signal\n */\nexport class Scale extends SignalOperator<ScaleOptions> {\n\n\treadonly name: string = \"Scale\";\n\n\treadonly input = new Multiply({\n\t\tcontext: this.context,\n\t\tvalue: 1,\n\t});\n\n\treadonly output = new Add({\n\t\tcontext: this.context,\n\t\tvalue: 0,\n\t});\n\n\tprivate _outputMin: number;\n\tprivate _outputMax: number;\n\n\t/**\n\t * @param min The output value when the input is 0.\n\t * @param max The output value when the input is 1.\n\t */\n\tconstructor(min?: number, max?: number);\n\tconstructor(options?: Partial<ScaleOptions>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Scale.getDefaults(), arguments, [\"min\", \"max\"])));\n\n\t\tconst options = optionsFromArguments(Scale.getDefaults(), arguments, [\"min\", \"max\"]);\n\t\tthis._outputMin = options.min;\n\t\tthis._outputMax = options.max;\n\n\t\tthis.input.connect(this.output);\n\t\tthis._setRange();\n\t}\n\n\tstatic getDefaults(): ScaleOptions {\n\t\treturn Object.assign(SignalOperator.getDefaults(), {\n\t\t\tmax: 1,\n\t\t\tmin: 0,\n\t\t});\n\t}\n\n\t/**\n\t * The minimum output value. This number is output when the value input value is 0.\n\t */\n\tget min(): number {\n\t\treturn this._outputMin;\n\t}\n\tset min(min) {\n\t\tthis._outputMin = min;\n\t\tthis._setRange();\n\t}\n\n\t/**\n\t * The maximum output value. This number is output when  the value input value is 1.\n\t */\n\tget max(): number {\n\t\treturn this._outputMax;\n\t}\n\tset max(max) {\n\t\tthis._outputMax = max;\n\t\tthis._setRange();\n\t}\n\n\t/**\n\t * set the values\n\t */\n\tprivate _setRange(): void {\n\t\tthis.output.value = this._outputMin;\n\t\tthis.input.value = this._outputMax - this._outputMin;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.input.dispose();\n\t\tthis.output.dispose();\n\t\treturn this;\n\t}\n}\n","import { Envelope, EnvelopeOptions } from \"../component/envelope/Envelope\";\nimport { Filter } from \"../component/filter/Filter\";\nimport { Gain } from \"../core/context/Gain\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { Cents, Frequency, NormalRange, Positive, Time } from \"../core/type/Units\";\nimport { deepMerge, omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp, RecursivePartial } from \"../core/util/Interface\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Scale } from \"../signal/Scale\";\nimport { Signal } from \"../signal/Signal\";\nimport { FMOscillator } from \"../source/oscillator/FMOscillator\";\nimport { Monophonic, MonophonicOptions } from \"./Monophonic\";\n\nexport interface MetalSynthOptions extends MonophonicOptions {\n\tharmonicity: Positive;\n\tmodulationIndex: Positive;\n\toctaves: number;\n\tresonance: Frequency;\n\tenvelope: Omit<EnvelopeOptions, keyof ToneAudioNodeOptions>;\n}\n\n/**\n * Inharmonic ratio of frequencies based on the Roland TR-808\n * Taken from https://ccrma.stanford.edu/papers/tr-808-cymbal-physically-informed-circuit-bendable-digital-model\n */\nconst inharmRatios: number[] = [1.0, 1.483, 1.932, 2.546, 2.630, 3.897];\n\n/**\n * A highly inharmonic and spectrally complex source with a highpass filter\n * and amplitude envelope which is good for making metallophone sounds.\n * Based on CymbalSynth by [@polyrhythmatic](https://github.com/polyrhythmatic).\n * Inspiration from [Sound on Sound](https://shorturl.at/rSZ12).\n * @category Instrument\n */\nexport class MetalSynth extends Monophonic<MetalSynthOptions> {\n\n\treadonly name: string = \"MetalSynth\";\n\n\t/**\n\t * The frequency of the cymbal\n\t */\n\treadonly frequency: Signal<Frequency>;\n\n\t/**\n\t * The detune applied to the oscillators\n\t */\n\treadonly detune: Signal<Cents>;\n\n\t/**\n\t * The array of FMOscillators\n\t */\n\tprivate _oscillators: FMOscillator[] = [];\n\n\t/**\n\t * The frequency multipliers\n\t */\n\tprivate _freqMultipliers: Multiply[] = [];\n\n\t/**\n\t * The gain node for the envelope.\n\t */\n\tprivate _amplitude: Gain;\n\n\t/**\n\t * Highpass the output\n\t */\n\tprivate _highpass: Filter;\n\n\t/**\n\t * The number of octaves the highpass\n\t * filter frequency ramps\n\t */\n\tprivate _octaves: number;\n\n\t/**\n\t * Scale the body envelope for the highpass filter\n\t */\n\tprivate _filterFreqScaler: Scale;\n\n\t/**\n\t * The envelope which is connected both to the\n\t * amplitude and a highpass filter's cutoff frequency.\n\t * The lower-limit of the filter is controlled by the [[resonance]]\n\t */\n\treadonly envelope: Envelope;\n\n\tconstructor(options?: RecursivePartial<MetalSynthOptions>)\n\tconstructor() {\n\t\tsuper(optionsFromArguments(MetalSynth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(MetalSynth.getDefaults(), arguments);\n\n\t\tthis.detune = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune,\n\t\t});\n\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t});\n\n\t\tthis._amplitude = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: 0,\n\t\t}).connect(this.output);\n\n\t\tthis._highpass = new Filter({\n\t\t\tQ: -3.0102999566398125,\n\t\t\tcontext: this.context,\n\t\t\ttype: \"highpass\",\n\t\t}).connect(this._amplitude);\n\n\t\tfor (let i = 0; i < inharmRatios.length; i++) {\n\t\t\tconst osc = new FMOscillator({\n\t\t\t\tcontext: this.context,\n\t\t\t\tharmonicity: options.harmonicity,\n\t\t\t\tmodulationIndex: options.modulationIndex,\n\t\t\t\tmodulationType: \"square\",\n\t\t\t\tonstop: i === 0 ? () => this.onsilence(this) : noOp,\n\t\t\t\ttype: \"square\",\n\t\t\t});\n\t\t\tosc.connect(this._highpass);\n\t\t\tthis._oscillators[i] = osc;\n\n\t\t\tconst mult = new Multiply({\n\t\t\t\tcontext: this.context,\n\t\t\t\tvalue: inharmRatios[i],\n\t\t\t});\n\t\t\tthis._freqMultipliers[i] = mult;\n\t\t\tthis.frequency.chain(mult, osc.frequency);\n\t\t\tthis.detune.connect(osc.detune);\n\t\t}\n\n\t\tthis._filterFreqScaler = new Scale({\n\t\t\tcontext: this.context,\n\t\t\tmax: 7000,\n\t\t\tmin: this.toFrequency(options.resonance),\n\t\t});\n\n\t\tthis.envelope = new Envelope({\n\t\t\tattack: options.envelope.attack,\n\t\t\tattackCurve: \"linear\",\n\t\t\tcontext: this.context,\n\t\t\tdecay: options.envelope.decay,\n\t\t\trelease: options.envelope.release,\n\t\t\tsustain: 0,\n\t\t});\n\n\t\tthis.envelope.chain(this._filterFreqScaler, this._highpass.frequency);\n\t\tthis.envelope.connect(this._amplitude.gain);\n\t\t// set the octaves\n\t\tthis._octaves = options.octaves;\n\t\tthis.octaves = options.octaves;\n\t}\n\n\tstatic getDefaults(): MetalSynthOptions {\n\t\treturn deepMerge(Monophonic.getDefaults(), {\n\t\t\tenvelope: Object.assign(\n\t\t\t\tomitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())),\n\t\t\t\t{\n\t\t\t\t\tattack: 0.001,\n\t\t\t\t\tdecay: 1.4,\n\t\t\t\t\trelease: 0.2,\n\t\t\t\t},\n\t\t\t),\n\t\t\tharmonicity: 5.1,\n\t\t\tmodulationIndex: 32,\n\t\t\toctaves: 1.5,\n\t\t\tresonance: 4000,\n\t\t});\n\t}\n\n\t/**\n\t * Trigger the attack.\n\t * @param time When the attack should be triggered.\n\t * @param velocity The velocity that the envelope should be triggered at.\n\t */\n\tprotected _triggerEnvelopeAttack(time: Time, velocity: NormalRange = 1): this {\n\t\tthis.envelope.triggerAttack(time, velocity);\n\t\tthis._oscillators.forEach(osc => osc.start(time));\n\t\tif (this.envelope.sustain === 0) {\n\t\t\tthis._oscillators.forEach(osc => {\n\t\t\t\tosc.stop(this.toSeconds(time) + this.toSeconds(this.envelope.attack) + this.toSeconds(this.envelope.decay));\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Trigger the release of the envelope.\n\t * @param time When the release should be triggered.\n\t */\n\tprotected _triggerEnvelopeRelease(time: Time): this {\n\t\tthis.envelope.triggerRelease(time);\n\t\tthis._oscillators.forEach(osc => osc.stop(this.toSeconds(time) + this.toSeconds(this.envelope.release)));\n\t\treturn this;\n\t}\n\n\t/**\n\t * The modulationIndex of the oscillators which make up the source.\n\t * see [[FMOscillator.modulationIndex]]\n\t */\n\tget modulationIndex(): number {\n\t\treturn this._oscillators[0].modulationIndex.value;\n\t}\n\tset modulationIndex(val) {\n\t\tthis._oscillators.forEach(osc => (osc.modulationIndex.value = val));\n\t}\n\n\t/**\n\t * The harmonicity of the oscillators which make up the source.\n\t * see Tone.FMOscillator.harmonicity\n\t */\n\tget harmonicity(): number {\n\t\treturn this._oscillators[0].harmonicity.value;\n\t}\n\tset harmonicity(val) {\n\t\tthis._oscillators.forEach(osc => (osc.harmonicity.value = val));\n\t}\n\n\t/**\n\t * The lower level of the highpass filter which is attached to the envelope.\n\t * This value should be between [0, 7000]\n\t * @min 0\n\t * @max 7000\n\t */\n\tget resonance(): Frequency {\n\t\treturn this._filterFreqScaler.min;\n\t}\n\tset resonance(val) {\n\t\tthis._filterFreqScaler.min = this.toFrequency(val);\n\t\tthis.octaves = this._octaves;\n\t}\n\n\t/**\n\t * The number of octaves above the \"resonance\" frequency\n\t * that the filter ramps during the attack/decay envelope\n\t */\n\tget octaves(): number {\n\t\treturn this._octaves;\n\t}\n\tset octaves(val) {\n\t\tthis._octaves = val;\n\t\tthis._filterFreqScaler.max = this._filterFreqScaler.min * Math.pow(2, val);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._oscillators.forEach(osc => osc.dispose());\n\t\tthis._freqMultipliers.forEach(freqMult => freqMult.dispose());\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\tthis._filterFreqScaler.dispose();\n\t\tthis._amplitude.dispose();\n\t\tthis.envelope.dispose();\n\t\tthis._highpass.dispose();\n\t\treturn this;\n\t}\n}\n","import \"../core/clock/Transport\";\nimport { ToneWithContext, ToneWithContextOptions } from \"../core/context/ToneWithContext\";\nimport { TicksClass } from \"../core/type/Ticks\";\nimport { TransportTimeClass } from \"../core/type/TransportTime\";\nimport { NormalRange, Positive, Seconds, Ticks, Time, TransportTime } from \"../core/type/Units\";\nimport { defaultArg, optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { BasicPlaybackState, StateTimeline } from \"../core/util/StateTimeline\";\nimport { isBoolean, isNumber } from \"../core/util/TypeCheck\";\n\nexport type ToneEventCallback<T> = (time: Seconds, value: T) => void;\n\nexport interface ToneEventOptions<T> extends ToneWithContextOptions {\n\tcallback: ToneEventCallback<T>;\n\tloop: boolean | number;\n\tloopEnd: Time;\n\tloopStart: Time;\n\tplaybackRate: Positive;\n\tvalue?: T;\n\tprobability: NormalRange;\n\tmute: boolean;\n\thumanize: boolean | Time;\n}\n\n/**\n * ToneEvent abstracts away this.context.transport.schedule and provides a schedulable\n * callback for a single or repeatable events along the timeline.\n *\n * @example\n * var chord = new ToneEvent(function(time, chord){\n * \t//the chord as well as the exact time of the event\n * \t//are passed in as arguments to the callback function\n * }, [\"D4\", \"E4\", \"F4\"]);\n * //start the chord at the beginning of the transport timeline\n * chord.start();\n * //loop it every measure for 8 measures\n * chord.loop = 8;\n * chord.loopEnd = \"1m\";\n * @category Event\n */\nexport class ToneEvent<ValueType = any> extends ToneWithContext<ToneEventOptions<ValueType>> {\n\n\treadonly name: string = \"ToneEvent\";\n\n\t/**\n\t * Loop value\n\t */\n\tprotected _loop: boolean | number;\n\n\t/**\n\t * The callback to invoke.\n\t */\n\tcallback: ToneEventCallback<ValueType>;\n\n\t/**\n\t * The value which is passed to the\n\t * callback function.\n\t */\n\tvalue: ValueType;\n\n\t/**\n\t * When the note is scheduled to start.\n\t */\n\tprotected _loopStart: Ticks;\n\n\t/**\n\t * When the note is scheduled to start.\n\t */\n\tprotected _loopEnd: Ticks;\n\n\t/**\n\t * Tracks the scheduled events\n\t */\n\tprotected _state: StateTimeline<{\n\t\tid: number;\n\t}> = new StateTimeline(\"stopped\");\n\n\t/**\n\t * The playback speed of the note. A speed of 1\n\t * is no change.\n\t */\n\tprotected _playbackRate: Positive;\n\n\t/**\n\t * A delay time from when the event is scheduled to start\n\t */\n\tprotected _startOffset: Ticks = 0;\n\n\t/**\n\t * private holder of probability value\n\t */\n\tprotected _probability: NormalRange;\n\n\t/**\n\t * the amount of variation from the given time.\n\t */\n\tprotected _humanize: boolean | Time;\n\n\t/**\n\t * If mute is true, the callback won't be invoked.\n\t */\n\tmute: boolean;\n\n\t/**\n\t * @param callback The callback to invoke at the time.\n\t * @param value The value or values which should be passed to the callback function on invocation.\n\t */\n\tconstructor(callback?: ToneEventCallback<ValueType>, value?: ValueType);\n\tconstructor(options?: Partial<ToneEventOptions<ValueType>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(ToneEvent.getDefaults(), arguments, [\"callback\", \"value\"]));\n\t\tconst options = optionsFromArguments(ToneEvent.getDefaults(), arguments, [\"callback\", \"value\"]);\n\n\t\tthis._loop = options.loop;\n\t\tthis.callback = options.callback;\n\t\tthis.value = options.value;\n\t\tthis._loopStart = this.toTicks(options.loopStart);\n\t\tthis._loopEnd = this.toTicks(options.loopEnd);\n\t\tthis._playbackRate = options.playbackRate;\n\t\tthis._probability = options.probability;\n\t\tthis._humanize = options.humanize;\n\t\tthis.mute = options.mute;\n\t\tthis.playbackRate = options.playbackRate;\n\t}\n\n\tstatic getDefaults(): ToneEventOptions<any> {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tcallback: noOp,\n\t\t\thumanize: false,\n\t\t\tloop: false,\n\t\t\tloopEnd: \"1m\",\n\t\t\tloopStart: 0,\n\t\t\tmute: false,\n\t\t\tplaybackRate: 1,\n\t\t\tprobability: 1,\n\t\t\tvalue: null,\n\t\t});\n\t}\n\n\t/**\n\t * Reschedule all of the events along the timeline\n\t * with the updated values.\n\t * @param after Only reschedules events after the given time.\n\t */\n\tprivate _rescheduleEvents(after: Ticks = -1): void {\n\t\t// if no argument is given, schedules all of the events\n\t\tthis._state.forEachFrom(after, event => {\n\t\t\tlet duration;\n\t\t\tif (event.state === \"started\") {\n\t\t\t\tif (event.id !== -1) {\n\t\t\t\t\tthis.context.transport.clear(event.id);\n\t\t\t\t}\n\t\t\t\tconst startTick = event.time + Math.round(this.startOffset / this._playbackRate);\n\t\t\t\tif (this._loop === true || isNumber(this._loop) && this._loop > 1) {\n\t\t\t\t\tduration = Infinity;\n\t\t\t\t\tif (isNumber(this._loop)) {\n\t\t\t\t\t\tduration = (this._loop) * this._getLoopDuration();\n\t\t\t\t\t}\n\t\t\t\t\tconst nextEvent = this._state.getAfter(startTick);\n\t\t\t\t\tif (nextEvent !== null) {\n\t\t\t\t\t\tduration = Math.min(duration, nextEvent.time - startTick);\n\t\t\t\t\t}\n\t\t\t\t\tif (duration !== Infinity) {\n\t\t\t\t\t\t// schedule a stop since it's finite duration\n\t\t\t\t\t\tthis._state.setStateAtTime(\"stopped\", startTick + duration + 1, { id: -1 });\n\t\t\t\t\t\tduration = new TicksClass(this.context, duration);\n\t\t\t\t\t}\n\t\t\t\t\tconst interval = new TicksClass(this.context, this._getLoopDuration());\n\t\t\t\t\tevent.id = this.context.transport.scheduleRepeat(\n\t\t\t\t\t\tthis._tick.bind(this), interval, new TicksClass(this.context, startTick), duration);\n\t\t\t\t} else {\n\t\t\t\t\tevent.id = this.context.transport.schedule(this._tick.bind(this), new TicksClass(this.context, startTick));\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Returns the playback state of the note, either \"started\" or \"stopped\".\n\t */\n\tget state(): BasicPlaybackState {\n\t\treturn this._state.getValueAtTime(this.context.transport.ticks) as BasicPlaybackState;\n\t}\n\n\t/**\n\t * The start from the scheduled start time.\n\t */\n\tget startOffset(): Ticks {\n\t\treturn this._startOffset;\n\t}\n\tset startOffset(offset) {\n\t\tthis._startOffset = offset;\n\t}\n\n\t/**\n\t * The probability of the notes being triggered.\n\t */\n\tget probability(): NormalRange {\n\t\treturn this._probability;\n\t}\n\tset probability(prob) {\n\t\tthis._probability = prob;\n\t}\n\n\t/**\n\t * If set to true, will apply small random variation\n\t * to the callback time. If the value is given as a time, it will randomize\n\t * by that amount.\n\t * @example\n\t * event.humanize = true;\n\t */\n\tget humanize(): Time | boolean {\n\t\treturn this._humanize;\n\t}\n\n\tset humanize(variation) {\n\t\tthis._humanize = variation;\n\t}\n\n\t/**\n\t * Start the note at the given time.\n\t * @param  time  When the event should start.\n\t */\n\tstart(time?: TransportTime | TransportTimeClass): this {\n\t\tconst ticks = this.toTicks(time);\n\t\tif (this._state.getValueAtTime(ticks) === \"stopped\") {\n\t\t\tthis._state.add({\n\t\t\t\tid: -1,\n\t\t\t\tstate: \"started\",\n\t\t\t\ttime: ticks,\n\t\t\t});\n\t\t\tthis._rescheduleEvents(ticks);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the Event at the given time.\n\t * @param  time  When the event should stop.\n\t */\n\tstop(time?: TransportTime | TransportTimeClass): this {\n\t\tthis.cancel(time);\n\t\tconst ticks = this.toTicks(time);\n\t\tif (this._state.getValueAtTime(ticks) === \"started\") {\n\t\t\tthis._state.setStateAtTime(\"stopped\", ticks, { id: -1 });\n\t\t\tconst previousEvent = this._state.getBefore(ticks);\n\t\t\tlet reschedulTime = ticks;\n\t\t\tif (previousEvent !== null) {\n\t\t\t\treschedulTime = previousEvent.time;\n\t\t\t}\n\t\t\tthis._rescheduleEvents(reschedulTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Cancel all scheduled events greater than or equal to the given time\n\t * @param  time  The time after which events will be cancel.\n\t */\n\tcancel(time?: TransportTime | TransportTimeClass): this {\n\t\ttime = defaultArg(time, -Infinity);\n\t\tconst ticks = this.toTicks(time);\n\t\tthis._state.forEachFrom(ticks, event => {\n\t\t\tthis.context.transport.clear(event.id);\n\t\t});\n\t\tthis._state.cancel(ticks);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The callback function invoker. Also\n\t * checks if the Event is done playing\n\t * @param  time  The time of the event in seconds\n\t */\n\tprotected _tick(time: Seconds): void {\n\t\tconst ticks = this.context.transport.getTicksAtTime(time);\n\t\tif (!this.mute && this._state.getValueAtTime(ticks) === \"started\") {\n\t\t\tif (this.probability < 1 && Math.random() > this.probability) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (this.humanize) {\n\t\t\t\tlet variation = 0.02;\n\t\t\t\tif (!isBoolean(this.humanize)) {\n\t\t\t\t\tvariation = this.toSeconds(this.humanize);\n\t\t\t\t}\n\t\t\t\ttime += (Math.random() * 2 - 1) * variation;\n\t\t\t}\n\t\t\tthis.callback(time, this.value);\n\t\t}\n\t}\n\n\t/**\n\t * Get the duration of the loop.\n\t */\n\tprotected _getLoopDuration(): Ticks {\n\t\treturn Math.round((this._loopEnd - this._loopStart) / this._playbackRate);\n\t}\n\n\t/**\n\t * If the note should loop or not\n\t * between ToneEvent.loopStart and\n\t * ToneEvent.loopEnd. If set to true,\n\t * the event will loop indefinitely,\n\t * if set to a number greater than 1\n\t * it will play a specific number of\n\t * times, if set to false, 0 or 1, the\n\t * part will only play once.\n\t */\n\tget loop(): boolean | number {\n\t\treturn this._loop;\n\t}\n\tset loop(loop) {\n\t\tthis._loop = loop;\n\t\tthis._rescheduleEvents();\n\t}\n\n\t/**\n\t * The playback rate of the note. Defaults to 1.\n\t * @example\n\t * note.loop = true;\n\t * //repeat the note twice as fast\n\t * note.playbackRate = 2;\n\t */\n\tget playbackRate(): Positive {\n\t\treturn this._playbackRate;\n\t}\n\tset playbackRate(rate) {\n\t\tthis._playbackRate = rate;\n\t\tthis._rescheduleEvents();\n\t}\n\n\t/**\n\t * The loopEnd point is the time the event will loop\n\t * if ToneEvent.loop is true.\n\t */\n\tget loopEnd(): Time {\n\t\treturn new TicksClass(this.context, this._loopEnd).toSeconds();\n\t}\n\tset loopEnd(loopEnd) {\n\t\tthis._loopEnd = this.toTicks(loopEnd);\n\t\tif (this._loop) {\n\t\t\tthis._rescheduleEvents();\n\t\t}\n\t}\n\n\t/**\n\t * The time when the loop should start.\n\t */\n\tget loopStart(): Time {\n\t\treturn new TicksClass(this.context, this._loopStart).toSeconds();\n\t}\n\tset loopStart(loopStart) {\n\t\tthis._loopStart = this.toTicks(loopStart);\n\t\tif (this._loop) {\n\t\t\tthis._rescheduleEvents();\n\t\t}\n\t}\n\n\t/**\n\t * The current progress of the loop interval.\n\t * Returns 0 if the event is not started yet or\n\t * it is not set to loop.\n\t */\n\tget progress(): NormalRange {\n\t\tif (this._loop) {\n\t\t\tconst ticks = this.context.transport.ticks;\n\t\t\tconst lastEvent = this._state.get(ticks);\n\t\t\tif (lastEvent !== null && lastEvent.state === \"started\") {\n\t\t\t\tconst loopDuration = this._getLoopDuration();\n\t\t\t\tconst progress = (ticks - lastEvent.time) % loopDuration;\n\t\t\t\treturn progress / loopDuration;\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.cancel();\n\t\tthis._state.dispose();\n\t\treturn this;\n\t}\n}\n","import { TicksClass } from \"../core/type/Ticks\";\nimport { TransportTimeClass } from \"../core/type/TransportTime\";\nimport { NormalRange, Positive, Seconds, Ticks, Time, TransportTime } from \"../core/type/Units\";\nimport { defaultArg, optionsFromArguments } from \"../core/util/Defaults\";\nimport { StateTimeline } from \"../core/util/StateTimeline\";\nimport { isArray, isDefined, isObject, isUndef } from \"../core/util/TypeCheck\";\nimport { ToneEvent, ToneEventCallback, ToneEventOptions } from \"./ToneEvent\";\n\ntype CallbackType<T> =\n\tT extends {\n\t\ttime: Time;\n\t\t[key: string]: any;\n\t} ? T :\n\t\tT extends ArrayLike<any> ? T[1] :\n\t\t\tT extends Time ? null : never;\n\ninterface PartOptions<T> extends Omit<ToneEventOptions<CallbackType<T>>, \"value\"> {\n\tevents: T[];\n}\n\n/**\n * Part is a collection ToneEvents which can be started/stopped and looped as a single unit.\n *\n * @example\n * var part = new Part(function(time, note){\n * \t//the notes given as the second element in the array\n * \t//will be passed in as the second argument\n * \tsynth.triggerAttackRelease(note, \"8n\", time);\n * }, [[0, \"C2\"], [\"0:2\", \"C3\"], [\"0:3:2\", \"G2\"]]);\n * @example\n * //use an array of objects as long as the object has a \"time\" attribute\n * var part = new Part(function(time, value){\n * \t//the value is an object which contains both the note and the velocity\n * \tsynth.triggerAttackRelease(value.note, \"8n\", time, value.velocity);\n * }, [{\"time\" : 0, \"note\" : \"C3\", \"velocity\": 0.9},\n * {\"time\" : \"0:2\", \"note\" : \"C4\", \"velocity\": 0.5}\n * ]).start(0);\n * @category Event\n */\nexport class Part<ValueType = any> extends ToneEvent<ValueType> {\n\n\treadonly name: string = \"Part\";\n\n\t/**\n\t * Tracks the scheduled events\n\t */\n\tprotected _state: StateTimeline<{\n\t\tid: number;\n\t\toffset: number;\n\t}> = new StateTimeline(\"stopped\");\n\n\t/**\n\t * The events that belong to this part\n\t */\n\tprivate _events: Set<ToneEvent> = new Set();\n\n\t/**\n\t * @param callback The callback to invoke on each event\n\t * @param events the array of events\n\t */\n\tconstructor(callback?: ToneEventCallback<CallbackType<ValueType>>, value?: ValueType[]);\n\tconstructor(options?: Partial<PartOptions<ValueType>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Part.getDefaults(), arguments, [\"callback\", \"events\"]));\n\t\tconst options = optionsFromArguments(Part.getDefaults(), arguments, [\"callback\", \"events\"]);\n\n\t\t// add the events\n\t\toptions.events.forEach(event => {\n\t\t\tif (isArray(event)) {\n\t\t\t\tthis.add(event[0], event[1]);\n\t\t\t} else {\n\t\t\t\tthis.add(event);\n\t\t\t}\n\t\t});\n\t}\n\n\tstatic getDefaults(): PartOptions<any> {\n\t\treturn Object.assign(ToneEvent.getDefaults(), {\n\t\t\tevents: [],\n\t\t});\n\t}\n\n\t/**\n\t * Start the part at the given time.\n\t * @param  time    When to start the part.\n\t * @param  offset  The offset from the start of the part to begin playing at.\n\t */\n\tstart(time?: TransportTime, offset?: Time): this {\n\t\tconst ticks = this.toTicks(time);\n\t\tif (this._state.getValueAtTime(ticks) !== \"started\") {\n\t\t\toffset = defaultArg(offset, this._loop ? this._loopStart : 0);\n\t\t\tif (this._loop) {\n\t\t\t\toffset = defaultArg(offset, this._loopStart);\n\t\t\t} else {\n\t\t\t\toffset = defaultArg(offset, 0);\n\t\t\t}\n\t\t\tconst computedOffset = this.toTicks(offset);\n\t\t\tthis._state.add({\n\t\t\t\tid: -1,\n\t\t\t\toffset: computedOffset,\n\t\t\t\tstate: \"started\",\n\t\t\t\ttime: ticks,\n\t\t\t});\n\t\t\tthis._forEach(event => {\n\t\t\t\tthis._startNote(event, ticks, computedOffset);\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Start the event in the given event at the correct time given\n\t * the ticks and offset and looping.\n\t * @param  event\n\t * @param  ticks\n\t * @param  offset\n\t */\n\tprivate _startNote(event: ToneEvent, ticks: Ticks, offset: Ticks): void {\n\t\tticks -= offset;\n\t\tif (this._loop) {\n\t\t\tif (event.startOffset >= this._loopStart && event.startOffset < this._loopEnd) {\n\t\t\t\tif (event.startOffset < offset) {\n\t\t\t\t\t// start it on the next loop\n\t\t\t\t\tticks += this._getLoopDuration();\n\t\t\t\t}\n\t\t\t\tevent.start(new TicksClass(this.context, ticks));\n\t\t\t} else if (event.startOffset < this._loopStart && event.startOffset >= offset) {\n\t\t\t\tevent.loop = false;\n\t\t\t\tevent.start(new TicksClass(this.context, ticks));\n\t\t\t}\n\t\t} else if (event.startOffset >= offset) {\n\t\t\tevent.start(new TicksClass(this.context, ticks));\n\t\t}\n\t}\n\n\tget startOffset(): Ticks {\n\t\treturn this._startOffset;\n\t}\n\tset startOffset(offset) {\n\t\tthis._startOffset = offset;\n\t\tthis._forEach(event => {\n\t\t\tevent.startOffset += this._startOffset;\n\t\t});\n\t}\n\n\t/**\n\t * Stop the part at the given time.\n\t * @param  time  When to stop the part.\n\t */\n\tstop(time?: TransportTime): this {\n\t\tconst ticks = this.toTicks(time);\n\t\tthis._state.cancel(ticks);\n\t\tthis._state.setStateAtTime(\"stopped\", ticks);\n\t\tthis._forEach(event => {\n\t\t\tevent.stop(time);\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get/Set an Event's value at the given time.\n\t * If a value is passed in and no event exists at\n\t * the given time, one will be created with that value.\n\t * If two events are at the same time, the first one will\n\t * be returned.\n\t * @example\n\t * part.at(\"1m\"); //returns the part at the first measure\n\t * part.at(\"2m\", \"C2\"); //set the value at \"2m\" to C2.\n\t * //if an event didn't exist at that time, it will be created.\n\t * @param time The time of the event to get or set.\n\t * @param value If a value is passed in, the value of the event at the given time will be set to it.\n\t */\n\tat(time: Time, value?: any): ToneEvent | null {\n\t\tconst timeInTicks = new TransportTimeClass(this.context, time).toTicks();\n\t\tconst tickTime = new TicksClass(this.context, 1).toSeconds();\n\n\t\tconst iterator = this._events.values();\n\t\tlet result = iterator.next();\n\t\twhile (!result.done) {\n\t\t\tconst event = result.value;\n\t\t\tif (Math.abs(timeInTicks - event.startOffset) < tickTime) {\n\t\t\t\tif (isDefined(value)) {\n\t\t\t\t\tevent.value = value;\n\t\t\t\t}\n\t\t\t\treturn event;\n\t\t\t}\n\t\t\tresult = iterator.next();\n\t\t}\n\t\t// if there was no event at that time, create one\n\t\tif (isDefined(value)) {\n\t\t\tthis.add(time, value);\n\t\t\t// return the new event\n\t\t\treturn this.at(time);\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * Add a an event to the part.\n\t * @param time The time the note should start. If an object is passed in, it should\n\t * \t\thave a 'time' attribute and the rest of the object will be used as the 'value'.\n\t * @param  value\n\t * @example\n\t * part.add(\"1m\", \"C#+11\");\n\t * @example\n\t * part.add({\n\t * \ttime: \"1m\",\n\t * \tnote: \"C#11\"\n\t * });\n\t */\n\tadd(obj: {\n\t\ttime: Time;\n\t\t[key: string]: any;\n\t}): this;\n\tadd(time: Time, value?: any): this;\n\tadd(time: Time | object, value?: any): this {\n\t\t// extract the parameters\n\t\tif (time instanceof Object && Reflect.has(time, \"time\")) {\n\t\t\tvalue = time;\n\t\t\ttime = value.time;\n\t\t}\n\t\tconst ticks = this.toTicks(time);\n\t\tlet event: ToneEvent;\n\t\tif (value instanceof ToneEvent) {\n\t\t\tevent = value;\n\t\t\tevent.callback = this._tick.bind(this);\n\t\t} else {\n\t\t\tevent = new ToneEvent({\n\t\t\t\tcallback: this._tick.bind(this),\n\t\t\t\tcontext: this.context,\n\t\t\t\tvalue,\n\t\t\t});\n\t\t}\n\t\t// the start offset\n\t\tevent.startOffset = ticks;\n\n\t\t// initialize the values\n\t\tevent.set({\n\t\t\thumanize: this.humanize,\n\t\t\tloop: this.loop,\n\t\t\tloopEnd: this.loopEnd,\n\t\t\tloopStart: this.loopStart,\n\t\t\tplaybackRate: this.playbackRate,\n\t\t\tprobability: this.probability,\n\t\t});\n\n\t\tthis._events.add(event);\n\n\t\t// start the note if it should be played right now\n\t\tthis._restartEvent(event);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Restart the given event\n\t */\n\tprivate _restartEvent(event: ToneEvent): void {\n\t\tthis._state.forEach((stateEvent) => {\n\t\t\tif (stateEvent.state === \"started\") {\n\t\t\t\tthis._startNote(event, stateEvent.time, stateEvent.offset);\n\t\t\t} else {\n\t\t\t\t// stop the note\n\t\t\t\tevent.stop(new TicksClass(this.context, stateEvent.time));\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Remove an event from the part. If the event at that time is a Part,\n\t * it will remove the entire part.\n\t * @param time The time of the event\n\t * @param value Optionally select only a specific event value\n\t */\n\tremove(obj: {\n\t\ttime: Time;\n\t\t[key: string]: any;\n\t}): this;\n\tremove(time: Time, value?: any): this;\n\tremove(time: Time | object, value?: any): this {\n\t\t// extract the parameters\n\t\tif (isObject(time) && time.hasOwnProperty(\"time\")) {\n\t\t\tvalue = time;\n\t\t\ttime = value.time;\n\t\t}\n\t\ttime = this.toTicks(time);\n\t\tthis._events.forEach(event => {\n\t\t\tif (event.startOffset === time) {\n\t\t\t\tif (isUndef(value) || (isDefined(value) && event.value === value)) {\n\t\t\t\t\tthis._events.delete(event);\n\t\t\t\t\tevent.dispose();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Remove all of the notes from the group.\n\t */\n\tclear(): this {\n\t\tthis._forEach(event => event.dispose());\n\t\tthis._events.clear();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Cancel scheduled state change events: i.e. \"start\" and \"stop\".\n\t * @param after The time after which to cancel the scheduled events.\n\t */\n\tcancel(after?: TransportTime | TransportTimeClass): this {\n\t\tthis._forEach(event => event.cancel(after));\n\t\tthis._state.cancel(this.toTicks(after));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Iterate over all of the events\n\t */\n\tprivate _forEach(callback: (event: ToneEvent) => void): this {\n\t\tif (this._events) {\n\t\t\tthis._events.forEach(event => {\n\t\t\t\tif (event instanceof Part) {\n\t\t\t\t\tevent._forEach(callback);\n\t\t\t\t} else {\n\t\t\t\t\tcallback(event);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set the attribute of all of the events\n\t * @param  attr  the attribute to set\n\t * @param  value      The value to set it to\n\t */\n\tprivate _setAll(attr: string, value: any): void {\n\t\tthis._forEach(event => {\n\t\t\tevent[attr] = value;\n\t\t});\n\t}\n\n\t/**\n\t * Internal tick method\n\t * @param  time  The time of the event in seconds\n\t */\n\tprotected _tick(time: Seconds, value?: any): void {\n\t\tif (!this.mute) {\n\t\t\tthis.callback(time, value);\n\t\t}\n\t}\n\n\t/**\n\t * Determine if the event should be currently looping\n\t * given the loop boundries of this Part.\n\t * @param  event  The event to test\n\t */\n\tprivate _testLoopBoundries(event: ToneEvent): void {\n\t\tif (this._loop && (event.startOffset < this._loopStart || event.startOffset >= this._loopEnd)) {\n\t\t\tevent.cancel(0);\n\t\t} else if (event.state === \"stopped\") {\n\t\t\t// reschedule it if it's stopped\n\t\t\tthis._restartEvent(event);\n\t\t}\n\t}\n\n\t/**\n\t * The probability of the notes being triggered.\n\t */\n\tget probability(): NormalRange {\n\t\treturn this._probability;\n\t}\n\tset probability(prob) {\n\t\tthis._probability = prob;\n\t\tthis._setAll(\"probability\", prob);\n\t}\n\n\t/**\n\t * If set to true, will apply small random variation\n\t * to the callback time. If the value is given as a time, it will randomize\n\t * by that amount.\n\t * @example\n\t * event.humanize = true;\n\t */\n\tget humanize(): boolean | Time {\n\t\treturn this._humanize;\n\t}\n\tset humanize(variation) {\n\t\tthis._humanize = variation;\n\t\tthis._setAll(\"humanize\", variation);\n\t}\n\n\t/**\n\t * If the part should loop or not\n\t * between Part.loopStart and\n\t * Part.loopEnd. If set to true,\n\t * the part will loop indefinitely,\n\t * if set to a number greater than 1\n\t * it will play a specific number of\n\t * times, if set to false, 0 or 1, the\n\t * part will only play once.\n\t * @example\n\t * //loop the part 8 times\n\t * part.loop = 8;\n\t */\n\tget loop(): boolean | number {\n\t\treturn this._loop;\n\t}\n\tset loop(loop) {\n\t\tthis._loop = loop;\n\t\tthis._forEach(event => {\n\t\t\tevent.loopStart = this.loopStart;\n\t\t\tevent.loopEnd = this.loopEnd;\n\t\t\tevent.loop = loop;\n\t\t\tthis._testLoopBoundries(event);\n\t\t});\n\t}\n\n\t/**\n\t * The loopEnd point determines when it will\n\t * loop if Part.loop is true.\n\t * @memberOf Part#\n\t * @type {Time}\n\t * @name loopEnd\n\t */\n\tget loopEnd(): Time {\n\t\treturn new TicksClass(this.context, this._loopEnd).toSeconds();\n\t}\n\tset loopEnd(loopEnd) {\n\t\tthis._loopEnd = this.toTicks(loopEnd);\n\t\tif (this._loop) {\n\t\t\tthis._forEach(event => {\n\t\t\t\tevent.loopEnd = loopEnd;\n\t\t\t\tthis._testLoopBoundries(event);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * The loopStart point determines when it will\n\t * loop if Part.loop is true.\n\t */\n\tget loopStart(): Time {\n\t\treturn new TicksClass(this.context, this._loopStart).toSeconds();\n\t}\n\tset loopStart(loopStart) {\n\t\tthis._loopStart = this.toTicks(loopStart);\n\t\tif (this._loop) {\n\t\t\tthis._forEach(event => {\n\t\t\t\tevent.loopStart = this.loopStart;\n\t\t\t\tthis._testLoopBoundries(event);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * The playback rate of the part\n\t */\n\tget playbackRate(): Positive {\n\t\treturn this._playbackRate;\n\t}\n\tset playbackRate(rate) {\n\t\tthis._playbackRate = rate;\n\t\tthis._setAll(\"playbackRate\", rate);\n\t}\n\n\t/**\n\t * The number of scheduled notes in the part.\n\t */\n\tget length(): number {\n\t\treturn this._events.size;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.clear();\n\t\treturn this;\n\t}\n}\n","import { TicksClass } from \"../core/type/Ticks\";\nimport { NormalRange, Positive, Seconds, Ticks, Time, TransportTime } from \"../core/type/Units\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { isArray, isString } from \"../core/util/TypeCheck\";\nimport { Part } from \"./Part\";\nimport { ToneEvent, ToneEventCallback, ToneEventOptions } from \"./ToneEvent\";\n\ntype SequenceEventDescription<T> = Array<T | T[]>;\n\ninterface SequenceOptions<T> extends Omit<ToneEventOptions<T>, \"value\"> {\n\tloopStart: number;\n\tloopEnd: number;\n\tsubdivision: Time;\n\tevents: SequenceEventDescription<T>;\n}\n\n/**\n * A sequence is an alternate notation of a part. Instead\n * of passing in an array of [time, event] pairs, pass\n * in an array of events which will be spaced at the\n * given subdivision. Sub-arrays will subdivide that beat\n * by the number of items are in the array.\n * Sequence notation inspiration from [Tidal](http://yaxu.org/tidal/)\n * @example\n * var seq = new Sequence(function(time, note){\n * \tconsole.log(note);\n * //straight quater notes\n * }, [\"C4\", \"E4\", \"G4\", \"A4\"], \"4n\");\n * @example\n * var seq = new Sequence(function(time, note){\n * \tconsole.log(note);\n * //subdivisions are given as subarrays\n * }, [\"C4\", [\"E4\", \"D4\", \"E4\"], \"G4\", [\"A4\", \"G4\"]]);\n * @category Event\n */\nexport class Sequence<ValueType = any> extends ToneEvent<ValueType> {\n\n\treadonly name: string = \"Sequence\";\n\n\t/**\n\t * The subdivison of each note\n\t */\n\tprivate _subdivision: Ticks;\n\n\t/**\n\t * The object responsible for scheduling all of the events\n\t */\n\tprivate _part: Part = new Part({\n\t\tcallback: this._seqCallback.bind(this),\n\t\tcontext: this.context,\n\t});\n\n\t/**\n\t * private reference to all of the sequence proxies\n\t */\n\tprivate _events: ValueType[] = [];\n\n\t/**\n\t * The proxied array\n\t */\n\tprivate _eventsArray: ValueType[] = [];\n\n\t/**\n\t * @param  callback  The callback to invoke with every note\n\t * @param  sequence  The sequence\n\t * @param  subdivision  The subdivision between which events are placed.\n\t */\n\tconstructor(\n\t\tcallback?: ToneEventCallback<ValueType>,\n\t\tevents?: SequenceEventDescription<ValueType>,\n\t\tsubdivision?: Time,\n\t);\n\tconstructor(options?: Partial<SequenceOptions<ValueType>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Sequence.getDefaults(), arguments, [\"callback\", \"events\", \"subdivision\"]));\n\t\tconst options = optionsFromArguments(Sequence.getDefaults(), arguments, [\"callback\", \"events\", \"subdivision\"]);\n\n\t\tthis._subdivision = this.toTicks(options.subdivision);\n\n\t\tthis.events = options.events;\n\n\t\t// set all of the values\n\t\tthis.loop = options.loop;\n\t\tthis.loopStart = options.loopStart;\n\t\tthis.loopEnd = options.loopEnd;\n\t\tthis.playbackRate = options.playbackRate;\n\t\tthis.probability = options.probability;\n\t\tthis.humanize = options.humanize;\n\t\tthis.mute = options.mute;\n\t\tthis.playbackRate = options.playbackRate;\n\t}\n\n\tstatic getDefaults(): SequenceOptions<any> {\n\t\treturn Object.assign(omitFromObject(ToneEvent.getDefaults(), [\"value\"]), {\n\t\t\tevents: [],\n\t\t\tloop: true,\n\t\t\tloopEnd: 0,\n\t\t\tloopStart: 0,\n\t\t\tsubdivision: \"8n\",\n\t\t});\n\t}\n\n\t/**\n\t * The internal callback for when an event is invoked\n\t */\n\tprivate _seqCallback(time: Seconds, value: any): void {\n\t\tif (value !== null) {\n\t\t\tthis.callback(time, value);\n\t\t}\n\t}\n\n\t/**\n\t * The sequence\n\t */\n\tget events(): any[] {\n\t\treturn this._events;\n\t}\n\tset events(s) {\n\t\tthis.clear();\n\t\tthis._eventsArray = s;\n\t\tthis._events = this._createSequence(this._eventsArray);\n\t\tthis._eventsUpdated();\n\t}\n\n\t/**\n\t * Start the part at the given time.\n\t * @param  time    When to start the part.\n\t * @param  offset  The offset index to start at\n\t */\n\tstart(time?: TransportTime, offset?: number): this {\n\t\tthis._part.start(time, offset ? this._indexTime(offset) : offset);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the part at the given time.\n\t * @param  time  When to stop the part.\n\t */\n\tstop(time?: TransportTime): this {\n\t\tthis._part.stop(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The subdivision of the sequence. This can only be\n\t * set in the constructor. The subdivision is the\n\t * interval between successive steps.\n\t */\n\tget subdivision(): Seconds {\n\t\treturn new TicksClass(this.context, this._subdivision).toSeconds();\n\t}\n\n\t/**\n\t * Create a sequence proxy which can be monitored to create subsequences\n\t */\n\tprivate _createSequence(array: any[]): any[] {\n\t\treturn new Proxy(array, {\n\t\t\tget: (target: any[], property: PropertyKey): any => {\n\t\t\t\t// property is index in this case\n\t\t\t\treturn target[property];\n\t\t\t},\n\t\t\tset: (target: any[], property: PropertyKey, value: any): boolean => {\n\t\t\t\tif (isString(property) && isFinite(parseInt(property, 10))) {\n\t\t\t\t\tconst index = parseInt(property, 10);\n\t\t\t\t\tif (isArray(value)) {\n\t\t\t\t\t\ttarget[property] = this._createSequence(value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttarget[property] = value;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttarget[property] = value;\n\t\t\t\t}\n\t\t\t\tthis._eventsUpdated();\n\t\t\t\t// return true to accept the changes\n\t\t\t\treturn true;\n\t\t\t},\n\t\t});\n\t}\n\n\t/**\n\t * When the sequence has changed, all of the events need to be recreated\n\t */\n\tprivate _eventsUpdated(): void {\n\t\tthis._part.clear();\n\t\tthis._rescheduleSequence(this._eventsArray, this._subdivision, this.startOffset);\n\t\t// update the loopEnd\n\t\tthis.loopEnd = this.loopEnd;\n\t}\n\n\t/**\n\t * reschedule all of the events that need to be rescheduled\n\t */\n\tprivate _rescheduleSequence(sequence: any[], subdivision: Ticks, startOffset: Ticks): void {\n\t\tsequence.forEach((value, index) => {\n\t\t\tconst eventOffset = index * (subdivision) + startOffset;\n\t\t\tif (isArray(value)) {\n\t\t\t\tthis._rescheduleSequence(value, subdivision / value.length, eventOffset);\n\t\t\t} else {\n\t\t\t\tconst startTime = new TicksClass(this.context, eventOffset, \"i\").toSeconds();\n\t\t\t\tthis._part.add(startTime, value);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Get the time of the index given the Sequence's subdivision\n\t * @param  index\n\t * @return The time of that index\n\t */\n\tprivate _indexTime(index: number): Seconds {\n\t\treturn new TicksClass(this.context, index * (this._subdivision) + this.startOffset).toSeconds();\n\t}\n\n\t/**\n\t * Clear all of the events\n\t */\n\tclear(): this {\n\t\tthis._part.clear();\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._part.dispose();\n\t\treturn this;\n\t}\n\n\t//-------------------------------------\n\t// PROXY CALLS\n\t//-------------------------------------\n\n\tget loop(): boolean | number {\n\t\treturn this._part.loop;\n\t}\n\tset loop(l) {\n\t\tif (this._part) {\n\t\t\tthis._part.loop = l;\n\t\t}\n\t}\n\n\t/**\n\t * The index at which the sequence should start looping\n\t */\n\tget loopStart(): number {\n\t\treturn this._loopStart;\n\t}\n\tset loopStart(index) {\n\t\tthis._loopStart = index;\n\t\tif (this._part) {\n\t\t\tthis._part.loopStart = this._indexTime(index);\n\t\t}\n\t}\n\n\t/**\n\t * The index at which the sequence should end looping\n\t */\n\tget loopEnd(): number {\n\t\treturn this._loopEnd;\n\t}\n\tset loopEnd(index) {\n\t\tthis._loopEnd = index;\n\t\tif (this._part) {\n\t\t\tif (index === 0) {\n\t\t\t\tthis._part.loopEnd = this._indexTime(this._eventsArray.length);\n\t\t\t} else {\n\t\t\t\tthis._part.loopEnd = this._indexTime(index);\n\t\t\t}\n\t\t}\n\t}\n\n\tget startOffset(): Ticks {\n\t\treturn this._part.startOffset;\n\t}\n\tset startOffset(start) {\n\t\tif (this._part) {\n\t\t\tthis._part.startOffset = start;\n\t\t}\n\t}\n\n\tget playbackRate(): Positive {\n\t\treturn this._part.playbackRate;\n\t}\n\tset playbackRate(rate) {\n\t\tif (this._part) {\n\t\t\tthis._part.playbackRate = rate;\n\t\t}\n\t}\n\n\tget probability(): NormalRange {\n\t\treturn this._part.probability;\n\t}\n\tset probability(prob) {\n\t\tif (this._part) {\n\t\t\tthis._part.probability = prob;\n\t\t}\n\t}\n\n\tget humanize(): boolean | Time {\n\t\treturn this._part.humanize;\n\t}\n\tset humanize(variation) {\n\t\tif (this._part) {\n\t\t\tthis._part.humanize = variation;\n\t\t}\n\t}\n\n\t/**\n\t * The number of scheduled events\n\t */\n\tget length(): number {\n\t\treturn this._part.length;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { connect, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { NormalRange } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { GainToAudio } from \"../../signal/GainToAudio\";\nimport { Signal } from \"../../signal/Signal\";\n\ninterface CrossFadeOptions extends ToneAudioNodeOptions {\n\tfade: NormalRange;\n}\n\n/**\n * Tone.Crossfade provides equal power fading between two inputs.\n * More on crossfading technique [here](https://en.wikipedia.org/wiki/Fade_(audio_engineering)#Crossfading).\n * ```\n *                                             +---------+\n *                                            +> input a +>--+\n * +-----------+   +---------------------+     |         |   |\n * | 1s signal +>--> stereoPannerNode  L +>----> gain    |   |\n * +-----------+   |                     |     +---------+   |\n *               +-> pan               R +>-+                |   +--------+\n *               | +---------------------+  |                +---> output +>\n *  +------+     |                          |  +---------+   |   +--------+\n *  | fade +>----+                          | +> input b +>--+\n *  +------+                                |  |         |\n *                                          +--> gain    |\n *                                             +---------+\n * ```\n * @example\n * var crossFade = new CrossFade(0.5);\n * //connect effect A to crossfade from\n * //effect output 0 to crossfade input 0\n * effectA.connect(crossFade.a);\n * //connect effect B to crossfade from\n * //effect output 0 to crossfade input 1\n * effectB.connect(crossFade.b);\n * crossFade.fade.value = 0;\n * // ^ only effectA is output\n * crossFade.fade.value = 1;\n * // ^ only effectB is output\n * crossFade.fade.value = 0.5;\n * // ^ the two signals are mixed equally.\n * @category Component\n */\nexport class CrossFade extends ToneAudioNode<CrossFadeOptions> {\n\n\treadonly name: string = \"CrossFade\";\n\n\t/**\n\t * The crossfading is done by a StereoPannerNode\n\t */\n\tprivate _panner: StereoPannerNode = this.context.createStereoPanner();\n\n\t/**\n\t * Split the output of the panner node into two values used to control the gains.\n\t */\n\tprivate _split: ChannelSplitterNode = this.context.createChannelSplitter(2);\n\n\t/**\n\t * Convert the fade value into an audio range value so it can be connected\n\t * to the panner.pan AudioParam\n\t */\n\tprivate _g2a: GainToAudio = new GainToAudio({ context: this.context });\n\n\t/**\n\t * The input which is at full level when fade = 0\n\t */\n\treadonly a: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\n\t/**\n\t * The input which is at full level when fade = 1\n\t */\n\treadonly b: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\n\t/**\n\t * The output is a mix between `a` and `b` at the ratio of `fade`\n\t */\n\treadonly output: Gain = new Gain({ context: this.context });\n\n\t/**\n\t * CrossFade has no input, you must choose either `a` or `b`\n\t */\n\treadonly input: undefined;\n\n\t/**\n\t * The mix between the two inputs. A fade value of 0\n\t * will output 100% crossFade.a and\n\t * a value of 1 will output 100% crossFade.b.\n\t */\n\treadonly fade: Signal<NormalRange>;\n\n\tprotected _internalChannels = [this.a, this.b];\n\n\t/**\n\t * @param fade The initial fade value [0, 1].\n\t */\n\tconstructor(fade?: NormalRange);\n\tconstructor(options?: Partial<CrossFadeOptions>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(CrossFade.getDefaults(), arguments, [\"fade\"])));\n\t\tconst options = optionsFromArguments(CrossFade.getDefaults(), arguments, [\"fade\"]);\n\n\t\tthis.fade = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"normalRange\",\n\t\t\tvalue: options.fade,\n\t\t});\n\t\treadOnly(this, \"fade\");\n\n\t\tthis.context.getConstant(1).connect(this._panner);\n\t\tthis._panner.connect(this._split);\n\t\t// this is necessary for standardized-audio-context\n\t\t// doesn't make any difference for the native AudioContext\n\t\t// https://github.com/chrisguttandin/standardized-audio-context/issues/647\n\t\tthis._panner.channelCount = 1;\n\t\tthis._panner.channelCountMode = \"explicit\";\n\t\tconnect(this._split, this.a.gain, 0);\n\t\tconnect(this._split, this.b.gain, 1);\n\n\t\tthis.fade.chain(this._g2a, this._panner.pan);\n\n\t\tthis.a.connect(this.output);\n\t\tthis.b.connect(this.output);\n\t}\n\n\tstatic getDefaults(): CrossFadeOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tfade: 0.5,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.a.dispose();\n\t\tthis.b.dispose();\n\t\tthis.output.dispose();\n\t\tthis.fade.dispose();\n\t\tthis._g2a.dispose();\n\t\tthis._panner.disconnect();\n\t\tthis._split.disconnect();\n\t\treturn this;\n\t}\n}\n","import { CrossFade } from \"../component/channel/CrossFade\";\nimport { Gain } from \"../core/context/Gain\";\nimport { InputNode, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { NormalRange } from \"../core/type/Units\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Signal } from \"../signal/Signal\";\n\nexport interface EffectOptions extends ToneAudioNodeOptions {\n\twet: NormalRange;\n}\n/**\n * Effect is the base class for effects. Connect the effect between\n * the effectSend and effectReturn GainNodes, then control the amount of\n * effect which goes to the output using the wet control.\n */\nexport abstract class Effect<Options extends EffectOptions>\n\textends ToneAudioNode<Options> {\n\n\treadonly name: string = \"Effect\";\n\n\t/**\n\t * the drywet knob to control the amount of effect\n\t */\n\tprivate _dryWet: CrossFade = new CrossFade({ context: this.context });\n\n\t/**\n\t * The wet control is how much of the effected\n\t * will pass through to the output. 1 = 100% effected\n\t * signal, 0 = 100% dry signal.\n\t */\n\twet: Signal<NormalRange> = this._dryWet.fade;\n\n\t/**\n\t * connect the effectSend to the input of hte effect\n\t */\n\tprotected effectSend: Gain = new Gain({ context: this.context });\n\n\t/**\n\t * connect the output of the effect to the effectReturn\n\t */\n\tprotected effectReturn: Gain = new Gain({ context: this.context });\n\n\t/**\n\t * The effect input node\n\t */\n\tinput: Gain = new Gain({ context: this.context });\n\n\t/**\n\t * The effect output\n\t */\n\toutput = this._dryWet;\n\n\tconstructor(options: EffectOptions) {\n\t\tsuper(options);\n\n\t\t// connections\n\t\tthis.input.fan(this._dryWet.a, this.effectSend);\n\t\tthis.effectReturn.connect(this._dryWet.b);\n\t\tthis.wet.setValueAtTime(options.wet, 0);\n\t\tthis._internalChannels = [this.effectReturn, this.effectSend];\n\t\treadOnly(this, \"wet\");\n\t}\n\n\tstatic getDefaults(): EffectOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\twet: 1,\n\t\t});\n\t}\n\n\t/**\n\t * chains the effect in between the effectSend and effectReturn\n\t */\n\tprotected connectEffect(effect: ToneAudioNode | AudioNode): this {\n\t\t// add it to the internal channels\n\t\tthis._internalChannels.push(effect);\n\t\tthis.effectSend.chain(effect, this.effectReturn);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._dryWet.dispose();\n\t\tthis.effectSend.dispose();\n\t\tthis.effectReturn.dispose();\n\t\tthis.wet.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../core/context/Gain\";\nimport { Param } from \"../core/context/Param\";\nimport { NormalRange } from \"../core/type/Units\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Effect, EffectOptions } from \"./Effect\";\n\nexport interface FeedbackEffectOptions extends EffectOptions {\n\t/**\n\t * The feedback from the output back to the input\n\t * ```\n\t * +---<--------<---+\n\t * |                |\n\t * |  +----------+  |\n\t * +--> feedback +>-+\n\t *    +----------+\n\t * ```\n\t */\n\tfeedback: NormalRange;\n}\n\n/**\n * FeedbackEffect provides a loop between an audio source and its own output.\n * This is a base-class for feedback effects.\n */\nexport abstract class FeedbackEffect<Options extends FeedbackEffectOptions> extends Effect<Options> {\n\n\treadonly name: string = \"FeedbackEffect\";\n\n\t/**\n\t * the gain which controls the feedback\n\t */\n\tprivate _feedbackGain: Gain<NormalRange>;\n\n\t/**\n\t * The amount of signal which is fed back into the effect input.\n\t */\n\tfeedback: Param<NormalRange>;\n\n\tconstructor(options: FeedbackEffectOptions) {\n\n\t\tsuper(options);\n\n\t\tthis._feedbackGain = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: options.feedback,\n\t\t\tunits: \"normalRange\",\n\t\t});\n\n\t\tthis.feedback = this._feedbackGain.gain;\n\t\treadOnly(this, \"feedback\");\n\n\t\t// the feedback loop\n\t\tthis.effectReturn.chain(this._feedbackGain, this.effectSend);\n\t}\n\n\tstatic getDefaults(): FeedbackEffectOptions {\n\t\treturn Object.assign(Effect.getDefaults(), {\n\t\t\tfeedback: 0.125,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._feedbackGain.dispose();\n\t\tthis.feedback.dispose();\n\t\treturn this;\n\t}\n}\n","import { Delay } from \"../core/context/Delay\";\nimport { Param } from \"../core/context/Param\";\nimport { NormalRange, Time } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { FeedbackEffect, FeedbackEffectOptions } from \"./FeedbackEffect\";\n\ninterface FeedbackDelayOptions extends FeedbackEffectOptions {\n\tdelayTime: Time;\n\tmaxDelay: Time;\n}\n\n/**\n * FeedbackDelay is a DelayNode in which part of output signal is fed back into the delay.\n *\n * @param delayTime The delay applied to the incoming signal.\n * @param feedback The amount of the effected signal which is fed back through the delay.\n * @example\n * var feedbackDelay = new FeedbackDelay(\"8n\", 0.5).toDestination();\n * var tom = new Tone.MembraneSynth({\n * \"octaves\" : 4,\n * \"pitchDecay\" : 0.1\n * }).connect(feedbackDelay);\n * tom.triggerAttackRelease(\"A2\",\"32n\");\n * @category Effect\n */\nexport class FeedbackDelay extends FeedbackEffect<FeedbackDelayOptions> {\n\n\treadonly name: string = \"FeedbackDelay\";\n\n\t/**\n\t * the delay node\n\t */\n\tprivate _delayNode: Delay;\n\n\t/**\n\t * The delayTime of the FeedbackDelay.\n\t */\n\treadonly delayTime: Param<Time>;\n\n\tconstructor(delayTime?: Time, feedback?: NormalRange);\n\tconstructor(options?: Partial<FeedbackDelayOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(FeedbackDelay.getDefaults(), arguments, [\"delayTime\", \"feedback\"]));\n\t\tconst options = optionsFromArguments(FeedbackDelay.getDefaults(), arguments, [\"delayTime\", \"feedback\"]);\n\n\t\tthis._delayNode = new Delay({\n\t\t\tcontext: this.context,\n\t\t\tdelayTime: options.delayTime,\n\t\t\tmaxDelay: options.maxDelay,\n\t\t});\n\t\tthis.delayTime = this._delayNode.delayTime;\n\n\t\t// connect it up\n\t\tthis.connectEffect(this._delayNode);\n\t\treadOnly(this, \"delayTime\");\n\t}\n\n\tstatic getDefaults(): FeedbackDelayOptions {\n\t\treturn Object.assign(FeedbackEffect.getDefaults(), {\n\t\t\tdelayTime: 0.25,\n\t\t\tmaxDelay: 1,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._delayNode.dispose();\n\t\tthis.delayTime.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioBuffer } from \"../core/context/ToneAudioBuffer\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { Effect, EffectOptions } from \"./Effect\";\n\ninterface ToneConvolverOptions extends EffectOptions {\n\tonload: () => void;\n\tnormalize: boolean;\n\turl?: string | AudioBuffer | ToneAudioBuffer;\n}\n\n/**\n * Convolver is a wrapper around the Native Web Audio\n * [ConvolverNode](http://webaudio.github.io/web-audio-api/#the-convolvernode-interface).\n * Convolution is useful for reverb and filter emulation. Read more about convolution reverb on\n * [Wikipedia](https://en.wikipedia.org/wiki/Convolution_reverb).\n *\n * @example\n * //initializing the convolver with an impulse response\n * var convolver = new Convolver(\"./path/to/ir.wav\").toDestination();\n * @category Effect\n */\nexport class Convolver extends Effect<ToneConvolverOptions> {\n\n\treadonly name: string = \"Convolver\";\n\n\t/**\n\t * The native ConvolverNode\n\t */\n\tprivate _convolver: ConvolverNode = this.context.createConvolver();\n\n\t/**\n\t * The Buffer belonging to the convolver\n\t */\n\tprivate _buffer: ToneAudioBuffer;\n\n\t/**\n\t * @param url The URL of the impulse response or the ToneAudioBuffer containing the impulse response.\n\t * @param onload The callback to invoke when the url is loaded.\n\t */\n\tconstructor(url?: string | AudioBuffer | ToneAudioBuffer, onload?: () => void);\n\tconstructor(options?: Partial<ToneConvolverOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Convolver.getDefaults(), arguments, [\"url\", \"onload\"]));\n\t\tconst options = optionsFromArguments(Convolver.getDefaults(), arguments, [\"url\", \"onload\"]);\n\n\t\tthis._buffer = new ToneAudioBuffer(options.url, buffer => {\n\t\t\tthis.buffer = buffer;\n\t\t\toptions.onload();\n\t\t});\n\n\t\t// set if it's already loaded\n\t\tif (this._buffer.loaded) {\n\t\t\tthis.buffer = this._buffer;\n\t\t}\n\n\t\t// initially set normalization\n\t\tthis.normalize = options.normalize;\n\n\t\t// connect it up\n\t\tthis.connectEffect(this._convolver);\n\t}\n\n\tstatic getDefaults(): ToneConvolverOptions {\n\t\treturn Object.assign(Effect.getDefaults(), {\n\t\t\tnormalize: true,\n\t\t\tonload: noOp,\n\t\t});\n\t}\n\n\t/**\n\t * Load an impulse response url as an audio buffer.\n\t * Decodes the audio asynchronously and invokes\n\t * the callback once the audio buffer loads.\n\t * @param url The url of the buffer to load. filetype support depends on the browser.\n\t */\n\tasync load(url: string): Promise<void> {\n\t\tthis.buffer = await this._buffer.load(url);\n\t}\n\n\t/**\n\t * The convolver's buffer\n\t */\n\tget buffer(): ToneAudioBuffer | null {\n\t\tif (this._buffer.length) {\n\t\t\treturn this._buffer;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\tset buffer(buffer) {\n\t\tif (buffer) {\n\t\t\tthis._buffer.set(buffer);\n\t\t}\n\t\t// if it's already got a buffer, create a new one\n\t\tif (this._convolver.buffer) {\n\t\t\t// disconnect the old one\n\t\t\tthis.effectSend.disconnect();\n\t\t\tthis._convolver.disconnect();\n\t\t\t// create and connect a new one\n\t\t\tthis._convolver = this.context.createConvolver();\n\t\t\tthis.connectEffect(this._convolver);\n\t\t}\n\t\tconst buff = this._buffer.get();\n\t\tthis._convolver.buffer = buff ? buff : null;\n\t}\n\n\t/**\n\t * The normalize property of the ConvolverNode interface is a boolean that\n\t * controls whether the impulse response from the buffer will be scaled by\n\t * an equal-power normalization when the buffer attribute is set, or not.\n\t */\n\tget normalize(): boolean {\n\t\treturn this._convolver.normalize;\n\t}\n\tset normalize(norm) {\n\t\tthis._convolver.normalize = norm;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._buffer.dispose();\n\t\tthis._convolver.disconnect();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Positive } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n\ninterface MergeOptions extends ToneAudioNodeOptions {\n\tchannels: Positive;\n}\n\n/**\n * Merge brings multiple mono input channels into a single multichannel output channel.\n *\n * @example\n * var merge = new Merge().toDestination();\n * //routing a sine tone in the left channel\n * //and noise in the right channel\n * var osc = new Tone.Oscillator().connect(merge.left);\n * var noise = new Tone.Noise().connect(merge.right);\n * //starting our oscillators\n * noise.start();\n * osc.start();\n * @category Component\n */\nexport class Merge extends ToneAudioNode<MergeOptions> {\n\n\treadonly name: string = \"Merge\";\n\n\t/**\n\t * The merger node for the two channels.\n\t */\n\tprivate _merger: ChannelMergerNode;\n\n\t/**\n\t * The output is the input channels combined into a sigle (multichannel) output\n\t */\n\treadonly output: ChannelMergerNode;\n\n\t/**\n\t * Multiple input connections combine into a single output.\n\t */\n\treadonly input: ChannelMergerNode;\n\n\t/**\n\t * @param channels The number of channels to merge.\n\t */\n\tconstructor(channels?: Positive);\n\tconstructor(options?: Partial<MergeOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Merge.getDefaults(), arguments, [\"channels\"]));\n\t\tconst options = optionsFromArguments(Merge.getDefaults(), arguments, [\"channels\"]);\n\n\t\tthis._merger = this.output = this.input = this.context.createChannelMerger(options.channels);\n\t}\n\n\tstatic getDefaults(): MergeOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tchannels: 2,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._merger.disconnect();\n\t\treturn this;\n\t}\n}\n","import { Merge } from \"../component/channel/Merge\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Offline } from \"../core/context/Offline\";\nimport { Seconds } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Noise } from \"../source/Noise\";\nimport { Effect, EffectOptions } from \"./Effect\";\n\ninterface ReverbOptions extends EffectOptions {\n\tdecay: Seconds;\n\tpreDelay: Seconds;\n}\n\n/**\n * Simple convolution created with decaying noise.\n * Generates an Impulse Response Buffer\n * with Tone.Offline then feeds the IR into ConvolverNode.\n * Note: the Reverb will not make any sound until [[generate]]\n * has been invoked and resolved.\n *\n * Inspiration from [ReverbGen](https://github.com/adelespinasse/reverbGen).\n * Copyright (c) 2014 Alan deLespinasse Apache 2.0 License.\n * \n * @category Effect\n */\nexport class Reverb extends Effect<ReverbOptions> {\n\n\treadonly name: string = \"Reverb\";\n\n\t/**\n\t * Convolver node\n\t */\n\tprivate _convolver: ConvolverNode = this.context.createConvolver();\n\n\t/**\n\t * The duration of the reverb\n\t */\n\tdecay: Seconds;\n\n\t/**\n\t * The amount of time before the reverb is fully ramped in.\n\t */\n\tpreDelay: Seconds;\n\n\t/**\n\t * @param decay The amount of time it will reverberate for.\n\t */\n\tconstructor(decay?: Seconds);\n\tconstructor(options?: Partial<ReverbOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Reverb.getDefaults(), arguments, [\"decay\"]));\n\t\tconst options = optionsFromArguments(Reverb.getDefaults(), arguments, [\"decay\"]);\n\n\t\tthis.decay = options.decay;\n\t\tthis.preDelay = options.preDelay;\n\n\t\tthis.connectEffect(this._convolver);\n\t}\n\n\tstatic getDefaults(): ReverbOptions {\n\t\treturn Object.assign(Effect.getDefaults(), {\n\t\t\tdecay: 1.5,\n\t\t\tpreDelay: 0.01,\n\t\t});\n\t}\n\n\t/**\n\t * Generate the Impulse Response. Returns a promise while the IR is being generated.\n\t * @return Promise which returns this object.\n\t */\n\tasync generate(): Promise<this> {\n\t\tconst buffer = await Offline((context) => {\n\t\t\t// create a noise burst which decays over the duration\n\t\t\tconst noiseL = new Noise({ context });\n\t\t\tconst noiseR = new Noise({ context });\n\t\t\tconst merge = new Merge({ context });\n\t\t\tnoiseL.connect(merge, 0, 0);\n\t\t\tnoiseR.connect(merge, 0, 1);\n\t\t\tconst gainNode = new Gain({ context }).toDestination();\n\t\t\tmerge.connect(gainNode);\n\t\t\tnoiseL.start(0);\n\t\t\tnoiseR.start(0);\n\t\t\t// predelay\n\t\t\tgainNode.gain.setValueAtTime(0, 0);\n\t\t\tgainNode.gain.setValueAtTime(1, this.preDelay);\n\t\t\t// decay\n\t\t\tgainNode.gain.exponentialApproachValueAtTime(0, this.preDelay, this.decay);\n\t\t}, this.decay + this.preDelay);\n\t\tthis._convolver.buffer = buffer.get() as AudioBuffer;\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._convolver.disconnect();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { NormalRange, PowerOfTwo } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n\nexport type AnalyserType = \"fft\" | \"waveform\";\n\nexport interface AnalyserOptions extends ToneAudioNodeOptions {\n\tsize: PowerOfTwo;\n\ttype: AnalyserType;\n\tsmoothing: NormalRange;\n}\n\n/**\n * Wrapper around the native Web Audio's [AnalyserNode](http://webaudio.github.io/web-audio-api/#idl-def-AnalyserNode).\n * Extracts FFT or Waveform data from the incoming signal.\n * @category Component\n */\nexport class Analyser extends ToneAudioNode<AnalyserOptions> {\n\n\treadonly name: string = \"Analyser\";\n\n\treadonly input: AnalyserNode;\n\treadonly output: AnalyserNode;\n\n\t/**\n\t * The analyser node.\n\t */\n\tprivate _analyser = this.context.createAnalyser();\n\n\t/**\n\t * The analysis type\n\t */\n\tprivate _type!: AnalyserType;\n\n\t/**\n\t * The buffer that the FFT data is written to\n\t */\n\tprivate _buffer!: Float32Array;\n\n\t/**\n\t * @param type The return type of the analysis, either \"fft\", or \"waveform\".\n\t * @param size The size of the FFT. This must be a power of two in the range 16 to 16384.\n\t */\n\tconstructor(type?: AnalyserType, size?: number);\n\tconstructor(options?: Partial<AnalyserOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Analyser.getDefaults(), arguments, [\"type\", \"size\"]));\n\t\tconst options = optionsFromArguments(Analyser.getDefaults(), arguments, [\"type\", \"size\"]);\n\t\t// set the values initially\n\t\tthis.size = options.size;\n\t\tthis.type = options.type;\n\t\tthis.input = this.output = this._analyser;\n\t}\n\n\tstatic getDefaults(): AnalyserOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tsize: 1024,\n\t\t\tsmoothing: 0.8,\n\t\t\ttype: \"fft\" as AnalyserType,\n\t\t});\n\t}\n\n\t/**\n\t * Run the analysis given the current settings and return the\n\t */\n\tgetValue(): Float32Array {\n\t\tif (this._type === \"fft\") {\n\t\t\tthis._analyser.getFloatFrequencyData(this._buffer);\n\t\t} else if (this._type === \"waveform\") {\n\t\t\tthis._analyser.getFloatTimeDomainData(this._buffer);\n\t\t}\n\t\treturn this._buffer;\n\t}\n\n\t/**\n\t * The size of analysis. This must be a power of two in the range 16 to 16384.\n\t */\n\tget size(): PowerOfTwo {\n\t\treturn this._analyser.frequencyBinCount;\n\t}\n\tset size(size: PowerOfTwo) {\n\t\tthis._analyser.fftSize = size * 2;\n\t\tthis._buffer = new Float32Array(size);\n\t}\n\n\t/**\n\t * The analysis function returned by analyser.getValue(), either \"fft\" or \"waveform\".\n\t */\n\tget type(): AnalyserType {\n\t\treturn this._type;\n\t}\n\tset type(type: AnalyserType) {\n\t\tthis.assert(type === \"waveform\" || type === \"fft\", `Analyser: invalid type: ${type}`);\n\t\tthis._type = type;\n\t}\n\n\t/**\n\t * 0 represents no time averaging with the last analysis frame.\n\t */\n\tget smoothing(): NormalRange {\n\t\treturn this._analyser.smoothingTimeConstant;\n\t}\n\n\tset smoothing(val: NormalRange) {\n\t\tthis._analyser.smoothingTimeConstant = val;\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._analyser.disconnect();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Frequency, Positive } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Filter } from \"../filter/Filter\";\n\ninterface MultibandSplitOptions extends ToneAudioNodeOptions {\n\tQ: Positive;\n\tlowFrequency: Frequency;\n\thighFrequency: Frequency;\n}\n\n/**\n * Split the incoming signal into three bands (low, mid, high)\n * with two crossover frequency controls.\n * ```\n *            +----------------------+\n *          +-> input < lowFrequency +------------------> low\n *          | +----------------------+\n *          |\n *          | +--------------------------------------+\n * input ---+-> lowFrequency < input < highFrequency +--> mid\n *          | +--------------------------------------+\n *          |\n *          | +-----------------------+\n *          +-> highFrequency < input +-----------------> high\n *            +-----------------------+\n * ```\n * @category Component\n */\nexport class MultibandSplit extends ToneAudioNode<MultibandSplitOptions> {\n\n\treadonly name: string = \"MultibandSplit\";\n\n\t/**\n\t * the input\n\t */\n\treadonly input = new Gain({ context: this.context });\n\n\t/**\n\t * no output node, use either low, mid or high outputs\n\t */\n\treadonly output = undefined;\n\n\t/**\n\t * The low band.\n\t */\n\treadonly low = new Filter({\n\t\tcontext: this.context,\n\t\tfrequency: 0,\n\t\ttype: \"lowpass\",\n\t});\n\n\t/**\n\t * the lower filter of the mid band\n\t */\n\tprivate _lowMidFilter = new Filter({\n\t\tcontext: this.context,\n\t\tfrequency: 0,\n\t\ttype: \"highpass\",\n\t});\n\n\t/**\n\t * The mid band output.\n\t */\n\treadonly mid = new Filter({\n\t\tcontext: this.context,\n\t\tfrequency: 0,\n\t\ttype: \"lowpass\",\n\t});\n\n\t/**\n\t * The high band output.\n\t */\n\treadonly high = new Filter({\n\t\tcontext: this.context,\n\t\tfrequency: 0,\n\t\ttype: \"highpass\",\n\t});\n\n\t/**\n\t * The low/mid crossover frequency.\n\t */\n\treadonly lowFrequency: Signal<Frequency>;\n\n\t/**\n\t * The mid/high crossover frequency.\n\t */\n\treadonly highFrequency: Signal<Frequency>;\n\n\tprotected _internalChannels = [this.low, this.mid, this.high];\n\n\t/**\n\t * The Q or Quality of the filter\n\t */\n\treadonly Q: Signal<Positive>;\n\n\t/**\n\t * @param lowFrequency the low/mid crossover frequency\n\t * @param highFrequency the mid/high crossover frequency\n\t */\n\tconstructor(lowFrequency?: Frequency, highFrequency?: Frequency);\n\tconstructor(options?: Partial<MultibandSplitOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(MultibandSplit.getDefaults(), arguments, [\"lowFrequency\", \"highFrequency\"]));\n\t\tconst options = optionsFromArguments(MultibandSplit.getDefaults(), arguments, [\"lowFrequency\", \"highFrequency\"]);\n\n\t\tthis.lowFrequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.lowFrequency,\n\t\t});\n\n\t\tthis.highFrequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.highFrequency,\n\t\t});\n\n\t\tthis.Q = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.Q,\n\t\t});\n\n\t\tthis.input.fan(this.low, this.high);\n\t\tthis.input.chain(this._lowMidFilter, this.mid);\n\t\t// the frequency control signal\n\t\tthis.lowFrequency.fan(this.low.frequency, this._lowMidFilter.frequency);\n\t\tthis.highFrequency.fan(this.mid.frequency, this.high.frequency);\n\t\t// the Q value\n\t\tthis.Q.connect(this.low.Q);\n\t\tthis.Q.connect(this._lowMidFilter.Q);\n\t\tthis.Q.connect(this.mid.Q);\n\t\tthis.Q.connect(this.high.Q);\n\n\t\treadOnly(this, [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n\t}\n\n\tstatic getDefaults(): MultibandSplitOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tQ: 1,\n\t\t\thighFrequency: 2500,\n\t\t\tlowFrequency: 400,\n\t\t});\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\twritable(this, [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n\t\tthis.low.dispose();\n\t\tthis._lowMidFilter.dispose();\n\t\tthis.mid.dispose();\n\t\tthis.high.dispose();\n\t\tthis.lowFrequency.dispose();\n\t\tthis.highFrequency.dispose();\n\t\tthis.Q.dispose();\n\t\treturn this;\n\t}\n\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Cents, Decibels, Frequency, GainFactor, Positive } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { MultibandSplit } from \"../channel/MultibandSplit\";\n\ninterface EQ3Options extends ToneAudioNodeOptions {\n\tlow: Decibels;\n\tmid: Decibels;\n\thigh: Decibels;\n\tlowFrequency: Frequency;\n\thighFrequency: Frequency;\n}\n\n/**\n * EQ3 provides 3 equalizer bins: Low/Mid/High. \n * @category Component\n */\nexport class EQ3 extends ToneAudioNode<EQ3Options> {\n\n\treadonly name: string = \"EQ3\";\n\n\t/**\n\t * the input\n\t */\n\treadonly input: MultibandSplit;\n\n\t/**\n\t * the output\n\t */\n\treadonly output = new Gain({ context: this.context });\n\n\t/**\n\t * Splits the input into three outputs\n\t */\n\tprivate _multibandSplit: MultibandSplit;\n\n\t/**\n\t * The gain for the lower signals\n\t */\n\tprivate _lowGain: Gain<Decibels>;\n\n\t/**\n\t * The gain for the mid signals\n\t */\n\tprivate _midGain: Gain<Decibels>;\n\n\t/**\n\t * The gain for the high signals\n\t */\n\tprivate _highGain: Gain<Decibels>;\n\n\t/**\n\t * The gain in decibels of the low part\n\t */\n\treadonly low: Param<Decibels>;\n\n\t/**\n\t * The gain in decibels of the mid part\n\t */\n\treadonly mid: Param<Decibels>;\n\n\t/**\n\t * The gain in decibels of the high part\n\t */\n\treadonly high: Param<Decibels>;\n\n\t/**\n\t * The Q value for all of the filters.\n\t */\n\treadonly Q: Signal<Positive>;\n\n\t/**\n\t * The low/mid crossover frequency.\n\t */\n\treadonly lowFrequency: Signal<Frequency>;\n\n\t/**\n\t * The mid/high crossover frequency.\n\t */\n\treadonly highFrequency: Signal<Frequency>;\n\n\tprotected _internalChannels: ToneAudioNode[] = [];\n\n\tconstructor(lowLevel?: Decibels, midLevel?: Decibels, highLevel?: Decibels);\n\tconstructor(options: Partial<EQ3Options>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(EQ3.getDefaults(), arguments, [\"low\", \"mid\", \"high\"]));\n\t\tconst options = optionsFromArguments(EQ3.getDefaults(), arguments, [\"low\", \"mid\", \"high\"]);\n\n\t\tthis.input = this._multibandSplit = new MultibandSplit({\n\t\t\tcontext: this.context,\n\t\t\thighFrequency: options.highFrequency,\n\t\t\tlowFrequency: options.lowFrequency,\n\t\t});\n\n\t\tthis._lowGain = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: options.low,\n\t\t\tunits: \"decibels\",\n\t\t});\n\n\t\tthis._midGain = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: options.mid,\n\t\t\tunits: \"decibels\",\n\t\t});\n\n\t\tthis._highGain = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: options.high,\n\t\t\tunits: \"decibels\",\n\t\t});\n\n\t\tthis.low = this._lowGain.gain;\n\t\tthis.mid = this._midGain.gain;\n\t\tthis.high = this._highGain.gain;\n\t\tthis.Q = this._multibandSplit.Q;\n\t\tthis.lowFrequency = this._multibandSplit.lowFrequency;\n\t\tthis.highFrequency\t= this._multibandSplit.highFrequency;\n\n\t\t// the frequency bands\n\t\tthis._multibandSplit.low.chain(this._lowGain, this.output);\n\t\tthis._multibandSplit.mid.chain(this._midGain, this.output);\n\t\tthis._multibandSplit.high.chain(this._highGain, this.output);\n\n\t\treadOnly(this, [\"low\", \"mid\", \"high\", \"lowFrequency\", \"highFrequency\"]);\n\t\tthis._internalChannels = [this._multibandSplit];\n\t}\n\n\tstatic getDefaults(): EQ3Options {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\thigh: 0,\n\t\t\thighFrequency: 2500,\n\t\t\tlow: 0,\n\t\t\tlowFrequency: 400,\n\t\t\tmid: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\twritable(this, [\"low\", \"mid\", \"high\", \"lowFrequency\", \"highFrequency\"]);\n\t\tthis._multibandSplit.dispose();\n\t\tthis.lowFrequency.dispose();\n\t\tthis.highFrequency.dispose();\n\t\tthis._lowGain.dispose();\n\t\tthis._midGain.dispose();\n\t\tthis._highGain.dispose();\n\t\tthis.low.dispose();\n\t\tthis.mid.dispose();\n\t\tthis.high.dispose();\n\t\tthis.Q.dispose();\n\t\treturn this;\n\t}\n\n}\n","import { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Decibels, Positive, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\n\ninterface CompressorOptions extends ToneAudioNodeOptions {\n\tattack: Time;\n\tknee: Decibels;\n\tratio: Positive;\n\trelease: Time;\n\tthreshold: Decibels;\n}\n\n/**\n * Compressor is a thin wrapper around the Web Audio\n * [DynamicsCompressorNode](http://webaudio.github.io/web-audio-api/#the-dynamicscompressornode-interface).\n * Compression reduces the volume of loud sounds or amplifies quiet sounds\n * by narrowing or \"compressing\" an audio signal's dynamic range.\n * Read more on [Wikipedia](https://en.wikipedia.org/wiki/Dynamic_range_compression).\n * @example\n * var comp = new Compressor(-30, 3);\n * @category Component\n */\nexport class Compressor extends ToneAudioNode<CompressorOptions> {\n\n\treadonly name: string = \"Compressor\";\n\n\t/**\n\t * the compressor node\n\t */\n\tprivate _compressor: DynamicsCompressorNode = this.context.createDynamicsCompressor();\n\treadonly input = this._compressor;\n\treadonly output = this._compressor;\n\n\t/**\n\t * The decibel value above which the compression will start taking effect.\n\t */\n\treadonly threshold: Param<Decibels>;\n\n\t/**\n\t * The amount of time (in seconds) to reduce the gain by 10dB.\n\t */\n\treadonly attack: Param<Time>;\n\n\t/**\n\t * The amount of time (in seconds) to increase the gain by 10dB.\n\t */\n\treadonly release: Param<Time>;\n\n\t/**\n\t * A decibel value representing the range above the threshold where the\n\t * curve smoothly transitions to the \"ratio\" portion.\n\t */\n\treadonly knee: Param<Decibels>;\n\n\t/**\n\t * The amount of dB change in input for a 1 dB change in output.\n\t */\n\treadonly ratio: Param<Decibels>;\n\n\t/**\n\t * @param threshold The value above which the compression starts to be applied.\n\t * @param ratio The gain reduction ratio.\n\t */\n\tconstructor(threshold?: Decibels, ratio?: Positive);\n\tconstructor(options?: Partial<CompressorOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Compressor.getDefaults(), arguments, [\"threshold\", \"ratio\"]));\n\t\tconst options = optionsFromArguments(Compressor.getDefaults(), arguments, [\"threshold\", \"ratio\"]);\n\n\t\tthis.threshold = new Param({\n\t\t\tcontext: this.context,\n\t\t\tconvert: false,\n\t\t\tparam: this._compressor.threshold,\n\t\t\tunits: \"decibels\",\n\t\t\tvalue: options.threshold,\n\t\t});\n\n\t\tthis.attack = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._compressor.attack,\n\t\t\tunits: \"time\",\n\t\t\tvalue: options.attack,\n\t\t});\n\n\t\tthis.release = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._compressor.release,\n\t\t\tunits: \"time\",\n\t\t\tvalue: options.release,\n\t\t});\n\n\t\tthis.knee = new Param({\n\t\t\tcontext: this.context,\n\t\t\tconvert: false,\n\t\t\tparam: this._compressor.knee,\n\t\t\tunits: \"decibels\",\n\t\t\tvalue: options.knee,\n\t\t});\n\n\t\tthis.ratio = new Param({\n\t\t\tcontext: this.context,\n\t\t\tconvert: false,\n\t\t\tparam: this._compressor.ratio,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.ratio,\n\t\t});\n\n\t\t// set the defaults\n\t\treadOnly(this, [\"knee\", \"release\", \"attack\", \"ratio\", \"threshold\"]);\n\t}\n\n\tstatic getDefaults(): CompressorOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tattack: 0.003,\n\t\t\tknee: 30,\n\t\t\tratio: 12,\n\t\t\trelease: 0.25,\n\t\t\tthreshold: -24,\n\t\t});\n\t}\n\n\t/**\n\t * A read-only decibel value for metering purposes, representing the current amount of gain\n\t * reduction that the compressor is applying to the signal. If fed no signal the value will be 0 (no gain reduction).\n\t */\n\tget reduction(): number {\n\t\treturn this._compressor.reduction;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._compressor.disconnect();\n\t\tthis.attack.dispose();\n\t\tthis.release.dispose();\n\t\tthis.threshold.dispose();\n\t\tthis.ratio.dispose();\n\t\tthis.knee.dispose();\n\t\treturn this;\n\t}\n}\n","export { getContext, setContext } from \"./core/Global\";\nexport * from \"./classes\";\nimport { getContext } from \"./core/Global\";\nexport { start } from \"./core/Global\";\n\n/**\n * The current audio context time\n * @Category Core\n */\nexport function now(): import(\"./core/type/Units\").Seconds {\n\treturn getContext().now();\n}\n\n/**\n * The Transport object belonging to the global Tone.js Context\n * @Category Core\n */\nexport const Transport = getContext().transport;\n\n/**\n * The Destination (output) belonging to the global Tone.js Context\n * @Category Core\n */\nexport const Destination = getContext().destination;\n"],"sourceRoot":""}