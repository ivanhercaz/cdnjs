{"version":3,"sources":["webpack://Tone/webpack/universalModuleDefinition","webpack://Tone/webpack/bootstrap","webpack://Tone/./Tone/core/Tone.ts","webpack://Tone/./Tone/version.ts","webpack://Tone/./Tone/core/context/AudioContext.ts","webpack://Tone/./Tone/core/clock/Ticker.ts","webpack://Tone/./Tone/core/util/TypeCheck.ts","webpack://Tone/./Tone/core/util/Defaults.ts","webpack://Tone/./Tone/core/util/Emitter.ts","webpack://Tone/./Tone/core/util/Timeline.ts","webpack://Tone/./Tone/core/context/ContextInitialization.ts","webpack://Tone/./Tone/core/context/Context.ts","webpack://Tone/./Tone/core/Global.ts","webpack://Tone/./Tone/core/type/Conversions.ts","webpack://Tone/./Tone/core/type/TimeBase.ts","webpack://Tone/./Tone/core/type/Time.ts","webpack://Tone/./Tone/core/type/Frequency.ts","webpack://Tone/./Tone/core/type/TransportTime.ts","webpack://Tone/./Tone/core/context/ToneWithContext.ts","webpack://Tone/./Tone/core/context/Param.ts","webpack://Tone/./Tone/core/util/Interface.ts","webpack://Tone/./Tone/core/context/ToneAudioNode.ts","webpack://Tone/./Tone/core/context/Gain.ts","webpack://Tone/./Tone/core/context/OfflineContext.ts","webpack://Tone/./Tone/core/context/ToneAudioBuffer.ts","webpack://Tone/./Tone/core/context/Offline.ts","webpack://Tone/./Tone/core/context/Delay.ts","webpack://Tone/./Tone/core/util/StateTimeline.ts","webpack://Tone/./Tone/core/clock/TickSignal.ts","webpack://Tone/./Tone/core/clock/TickSource.ts","webpack://Tone/./Tone/core/clock/Clock.ts","webpack://Tone/./Tone/core/type/Ticks.ts","webpack://Tone/./Tone/core/util/Draw.ts","webpack://Tone/./Tone/core/util/IntervalTimeline.ts","webpack://Tone/./Tone/component/channel/Volume.ts","webpack://Tone/./Tone/core/context/Destination.ts","webpack://Tone/./Tone/core/clock/TransportEvent.ts","webpack://Tone/./Tone/core/clock/TransportRepeatEvent.ts","webpack://Tone/./Tone/core/clock/Transport.ts","webpack://Tone/./Tone/source/Source.ts","webpack://Tone/./Tone/source/OneShotSource.ts","webpack://Tone/./Tone/source/buffer/BufferSource.ts","webpack://Tone/./Tone/source/Noise.ts","webpack://Tone/./Tone/signal/Signal.ts","webpack://Tone/./Tone/source/oscillator/OscillatorNode.ts","webpack://Tone/./Tone/source/oscillator/Oscillator.ts","webpack://Tone/./Tone/signal/SignalOperator.ts","webpack://Tone/./Tone/signal/WaveShaper.ts","webpack://Tone/./Tone/signal/AudioToGain.ts","webpack://Tone/./Tone/signal/Multiply.ts","webpack://Tone/./Tone/source/oscillator/AMOscillator.ts","webpack://Tone/./Tone/source/oscillator/FMOscillator.ts","webpack://Tone/./Tone/source/oscillator/PulseOscillator.ts","webpack://Tone/./Tone/source/oscillator/FatOscillator.ts","webpack://Tone/./Tone/source/oscillator/PWMOscillator.ts","webpack://Tone/./Tone/source/oscillator/OmniOscillator.ts","webpack://Tone/./Tone/source/buffer/Player.ts","webpack://Tone/./Tone/component/envelope/Envelope.ts","webpack://Tone/./Tone/component/envelope/AmplitudeEnvelope.ts","webpack://Tone/./Tone/instrument/Instrument.ts","webpack://Tone/./Tone/instrument/Monophonic.ts","webpack://Tone/./Tone/instrument/Synth.ts","webpack://Tone/./Tone/core/context/ToneAudioBuffers.ts","webpack://Tone/./Tone/instrument/Sampler.ts","webpack://Tone/./Tone/event/ToneEvent.ts","webpack://Tone/./Tone/event/Part.ts","webpack://Tone/./Tone/event/Sequence.ts","webpack://Tone/./Tone/signal/GainToAudio.ts","webpack://Tone/./Tone/component/channel/CrossFade.ts","webpack://Tone/./Tone/effect/Effect.ts","webpack://Tone/./Tone/effect/FeedbackEffect.ts","webpack://Tone/./Tone/effect/FeedbackDelay.ts","webpack://Tone/./Tone/effect/Convolver.ts","webpack://Tone/./Tone/component/analysis/Analyser.ts","webpack://Tone/./Tone/component/channel/Merge.ts","webpack://Tone/./Tone/component/filter/Filter.ts","webpack://Tone/./Tone/component/channel/MultibandSplit.ts","webpack://Tone/./Tone/component/filter/EQ3.ts","webpack://Tone/./Tone/index.ts","webpack://Tone/(webpack)/buildin/global.js"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","Tone","debug","_wasDisposed","getDefaults","log","args","_i","arguments","length","toString","global","TONE_DEBUG_CLASS","unshift","console","apply","assert","statement","error","Error","dispose","version","_version__WEBPACK_IMPORTED_MODULE_0__","globalContext","theWindow","hasAudioContext","getAudioContext","context","AudioContext","TONE_AUDIO_CONTEXT","Ticker","callback","type","updateInterval","_callback","_type","_updateInterval","_createClock","_createWorker","blob","Blob","toFixed","blobUrl","URL","createObjectURL","worker","Worker","onmessage","bind","_worker","_createTimeout","_this","_timeout","setTimeout","e","_disposeClock","clearTimeout","terminate","interval","Math","max","postMessage","isUndef","arg","isDefined","isNumber","isObject","constructor","isBoolean","isArray","Array","isString","isNote","test","deepMerge","target","sources","source","shift","key","assign","_a","_b","concat","optionsFromArguments","defaults","argsArray","keys","objKey","opts","from","Reflect","has","some","splice","indexOf","defaultArg","given","fallback","omitFromObject","obj","omit","forEach","prop","Emitter_Emitter","_super","Emitter","__extends","on","event","split","eventName","_events","push","once","boundCallback","off","eventList","emit","slice","len","mixin","constr","getOwnPropertyDescriptor","undefined","Timeline_Timeline","Timeline","_timeline","options","memory","Timeline_extends","Infinity","add","time","valueOf","index","_search","diff","remove","param","peek","getAfter","getBefore","cancel","after","cancelBefore","previousEvent","beginning","end","midPoint","floor","event_1","nextEvent","_iterate","lowerBound","upperBound","forEachBefore","forEachAfter","forEachBetween","startTime","endTime","forEachFrom","forEachAtTime","notifyNewContext","onContextInit","cb","notifyCloseContext","onContextClose","Context_Context","Context","_constants","Map","_timeouts","_timeoutIds","_initialized","_context","_latencyHint","latencyHint","lookAhead","_ticker","clockSource","_timeoutLoop","addEventListener","state","Context_extends","initialize","ctx","createAnalyser","createOscillator","createBufferSource","createBiquadFilter","createBuffer","numberOfChannels","sampleRate","createChannelMerger","numberOfInputs","createChannelSplitter","numberOfOutputs","createConstantSource","createConvolver","createDelay","maxDelayTime","createDynamicsCompressor","createGain","createIIRFilter","feedforward","feedback","createPanner","createPeriodicWave","real","imag","constraints","createStereoPanner","createWaveShaper","decodeAudioData","audioData","currentTime","listener","_transport","t","_destination","hint","lookAheadValue","now","resume","Promise","resolve","close","sent","getConstant","val","buffer","arr","getChannelData","constant","channelCount","channelCountMode","loop","start","set","map","disconnect","firstEvent","fn","timeout","id","dummyContext","destination","transport","Global_globalContext","getContext","setContext","TONE_SILENCE_LOGGING","prefix","printString","intervalToFrequencyRatio","pow","A4","ftom","frequency","round","log2","TimeBase_TimeBaseClass","TimeBaseClass","units","defaultUnits","_val","_units","_expressions","_getExpressions","TimeBase_extends","hz","method","_frequencyToUnits","parseFloat","regexp","_ticksToUnits","parseInt","_beatsToUnits","_getTimeSignature","dot","numericValue","scalar","number","_secondsToUnits","samples","tr","q","total","fromType","_noArg","trim","typeName","quantity","expr","matching","match","freq","beats","_getBpm","seconds","ticks","_getPPQ","_now","bpm","timeSignature","PPQ","toSeconds","toTicks","toFrequency","toMidi","toSamples","toMilliseconds","Time_TimeClass","TimeClass","Time_extends","capture","quantize","quantTo","nextSubdivision","subdiv","percent","subdivision","toNotation","testNotations","power","closest","closestSeconds","notation","notationSeconds","abs","toBarsBeatsSixteenths","quarterTime","quarters","measures","sixteenths","sixteenthString","join","Time","Frequency_FrequencyClass","FrequencyClass","Frequency_extends","setA4","midi","mtof","note","pitch","octave","noteNumber","noteToScaleIndex","toLowerCase","transpose","harmonize","intervals","toNote","scaleIndexToNote","cbb","c#","cx","dbb","db","d#","dx","ebb","eb","e#","ex","fbb","fb","f","f#","fx","gbb","gb","g","g#","gx","abb","ab","a","a#","ax","bbb","bb","b","b#","bx","Frequency","TransportTimeClass","TransportTime_extends","TransportTime","ToneWithContext_ToneWithContext","ToneWithContext","defaultContext","ToneWithContext_extends","immediate","attribute","member","setValueAtTime","props","Param_Param","Param","overridden","_minOutput","AudioParam","_param","input","_initialValue","convert","Param_extends","getValueAtTime","_fromType","cancelScheduledValues","minValue","maxValue","_is","min","_toType","gain","LN10","computedTime","isFinite","JSON","stringify","before","beforeValue","previous","_linearInterpolate","_exponentialInterpolate","previousVal","_exponentialApproach","setRampPoint","currentVal","cancelAndHoldAtTime","linearRampToValueAtTime","exponentialRampToValueAtTime","exponentialRampTo","rampTime","linearRampTo","targetRampTo","exponentialApproachValueAtTime","timeConstant","setTargetAtTime","setValueCurveAtTime","values","duration","scaling","startingValue","segTime","valueAtTime","sampleTime","rampTo","t0","v0","v1","exp","t1","readOnly","str","writable","noOp","ToneAudioNode_ToneAudioNode","ToneAudioNode","ToneAudioNode_extends","channelInterpretation","createInsOuts","_setChannelProperties","_internalChannels","node","_getChannelProperties","connect","outputNum","inputNum","toDestination","toMaster","warn","chain","nodes","connectSeries","fan","AudioNode","output","first","reduce","prev","current","srcNode","dstNode","outputNumber","inputNumber","Gain_Gain","Gain","_gainNode","Gain_extends","OfflineContext","channels","OfflineAudioContext","_currentTime","_duration","OfflineContext_extends","render","startRendering","ToneAudioBuffer_ToneAudioBuffer","ToneAudioBuffer","onload","reverse","url","AudioBuffer","load","catch","onerror","ToneAudioBuffer_extends","_buffer","loaded","_reversed","_reverse","promise","downloads","audioBuffer","e_1","fromArray","array","isMultidimensional","multiChannelArray","copyToChannel","toMono","chanNum","toArray","outputArray","Float32Array","numChannels_1","channel","channelArray","sample","ret","startSamples","endSamples","retBuffer","copyFromChannel","subarray","rev","fromUrl","matches","extensions","extension","extensions_1","ext","supportsType","replace","fetch","baseUrl","response","ok","arrayBuffer","document","createElement","canPlayType","Offline","originalContext","bufferPromise","Delay_Delay","Delay","maxDelayInSeconds","maxDelay","delayTime","_delayNode","Delay_extends","StateTimeline","initial","_initial","StateTimeline_extends","setStateAtTime","getLastState","getNextState","event_2","TickSignal_TickSignal","TickSignal","_sig","offset","_multiplier","multiplier","TickSignal_extends","computedValue","prevEvent","segments","rampVal","ticksUntilTime","_getTicksUntilEvent","computedVal","segmentDur","val0","val1","onTheLineEvent","getTicksAtTime","getDurationOfTicks","currentTick","getTimeOfTick","tick","delta","k","sqrt","sol1","ticksToTime","when","timeToTicks","computedDuration","startTicks","TickSource_TickSource","TickSource","_state","_tickOffset","setTicksAtTime","TickSource_extends","stop","pause","stopEvent","tmpEvent","lastState","elapsedTicks","periodStartTime","offsetEvent","getSecondsAtTime","elapsedSeconds","getStateAtTime","absoluteTicks","forEachTickBetween","computedStartTime","computedEndTime","lastStateEvent","maxStartTime","nextTickTime","Clock_Clock","Clock","_lastUpdate","_boundLoop","_loop","_tickSource","Clock_extends","ceil","TicksClass","Ticks_extends","Ticks","Draw_Draw","Draw","expiration","anticipation","_boundDrawLoop","_drawLoop","_animationFrame","Draw_extends","schedule","requestAnimationFrame","cancelAnimationFrame","IntervalTimeline_IntervalTimeline","IntervalTimeline","_root","_length","IntervalTimeline_extends","IntervalNode","insert","updateHeight","updateMax","_rebalance","parent","results","search","results_1","_removeNode","_setRoot","_replaceNodeInParent","replacement","isLeftChild","left","right","temp","getBalance","_rotateLeft","pivotNode","_rotateRight","balance","low","allNodes_1","traverse","searchAfter","high","_left","_right","height","point","Volume_Volume","Volume","volume","_unmutedVolume","mute","Volume_extends","Destination_Destination","Destination","rawContext","Destination_extends","TransportEvent_TransportEvent","TransportEvent","_eventId","_once","invoke","clear","TransportRepeatEvent_TransportRepeatEvent","TransportRepeatEvent","_currentId","_nextId","_nextTick","_boundRestart","_restart","_interval","TransportRepeatEvent_extends","_createEvents","scheduleOnce","Transport_Transport","Transport","_loopStart","_loopEnd","_scheduledEvents","_repeatedEvents","_syncedSignals","_swingAmount","_ppq","ppq","_clock","_processTick","_bindClockEvents","_timeSignature","_swingTicks","Transport_extends","loopEnd","loopStart","swing","swingSubdivision","tickTime","progress","amount","sin","PI","_addEvent","scheduleRepeat","eventId","item","timeline","computedAfter","offsetTicks","toggle","timeSig","startPosition","endPosition","setLoopPoints","remainingTicks","syncSignal","signal","ratio","computedFreq","ratioSignal","unsyncSignal","syncedSignal","Source_Source","Source","_volume","_synced","_scheduled","_syncedStart","_syncedStop","Source_extends","restart","sched","_start","_stop","sync","stateEvent","startOffset","unsync","OneShotSource_OneShotSource","OneShotSource","onended","_startTime","_stopTime","_fadeIn","fadeIn","_fadeOut","fadeOut","_curve","curve","OneShotSource_extends","_startGain","fadeInTime","_stopGain","cancelStop","fadeOutTime","additionalTail","_stopSource","_onended","BufferSource_ToneBufferSource","ToneBufferSource","_source","_sourceStarted","_sourceStopped","playbackRate","BufferSource_extends","computedDur","Noise_Noise","Noise","_playbackRate","Noise_extends","_noiseBuffers","rate","random","_noiseCache","brown","pink","white","channelNum","lastOut","b0","b1","b2","b3","b4","b5","b6","Signal_Signal","Signal","override","_constantSource","Signal_extends","connectSignal","OscillatorNode_ToneOscillatorNode","ToneOscillatorNode","_oscillator","detune","OscillatorNode_extends","setPeriodicWave","periodicWave","Oscillator_Oscillator","Oscillator","_partials","partials","_partialCount","partialCount","_phase","phase","baseType","Oscillator_extends","oscillator","_wave","syncFrequency","unsyncFrequency","isBasicType","_getRealImaginary","partial","exec","periodicWaveSize","fftSize","piFactor","TypeError","cos","_inverseFFT","sum","_getInitialValue","twoPi","SignalOperator_SignalOperator","SignalOperator","SignalOperator_extends","WaveShaper_WaveShaper","WaveShaper","_shaper","mapping","setMap","WaveShaper_extends","normalized","oversample","oversampling","isOverSampleType","includes","AudioToGain_AudioToGain","AudioToGain","_norm","x","AudioToGain_extends","Multiply_Multiply","Multiply","_mult","factor","Multiply_extends","AMOscillator_AMOscillator","AMOscillator","_carrier","_modulator","_modulationScale","harmonicity","_modulationNode","modulationType","AMOscillator_extends","FMOscillator_FMOscillator","FMOscillator","modulationIndex","FMOscillator_extends","PulseOscillator_PulseOscillator","PulseOscillator","width","_widthGate","_sawtooth","_thresh","PulseOscillator_extends","FatOscillator_FatOscillator","FatOscillator","_oscillators","_spread","spread","count","FatOscillator_extends","_forEach","osc","iterator","start_1","step_1","PWMOscillator_PWMOscillator","PWMOscillator","sourceType","_pulse","_scale","modulationFrequency","PWMOscillator_extends","OmniOscillatorSourceMap","am","fat","fm","pulse","pwm","OmniOscillator_OmniOscillator","OmniOscillator","OmniOscillator_extends","_sourceType","substr","_createNewOscillator","_getOscType","oscType","oscConstructor","oldOsc_1","blockTime","sType","mType","Player_Player","Player","_activeSources","Set","_onload","autostart","Player_extends","_onSourceEnd","delete","size","implicitEnd","seek","comptuedOffset","Envelope_Envelope","Envelope","attack","decay","sustain","release","attackCurve","releaseCurve","decayCurve","Envelope_extends","_getCurve","direction","curveName","EnvelopeCurves","_setCurve","curveDef","_attackCurve","_releaseCurve","_decayCurve","triggerAttack","velocity","currentValue","decayValue","decayStart","triggerRelease","triggerAttackRelease","cosineCurve","rippleCurve","curveLen","sineWave","stairsCurve","sineCurve","bounceCurve","invertCurve","out","j","bounce","In","Out","cosine","exponential","linear","ripple","sine","step","AmplitudeEnvelope_AmplitudeEnvelope","AmplitudeEnvelope","AmplitudeEnvelope_extends","Instrument_Instrument","Instrument","_original_triggerAttack","_original_triggerRelease","Instrument_extends","_syncMethod","timePosition","originalMethod","Monophonic_Monophonic","Monophonic","portamento","Monophonic_extends","_triggerEnvelopeAttack","setNote","_triggerEnvelopeRelease","getLevelAtTime","envelope","computedFrequency","portTime","Synth_Synth","Synth","Synth_extends","computedAttack","computedDecay","ToneAudioBuffers_ToneAudioBuffers","ToneAudioBuffers","_buffers","_loadingCount","urls","_bufferLoaded","ToneAudioBuffers_extends","every","Sampler_Sampler","Sampler","urlMap","mid","Sampler_extends","_findClosest","notes","difference","closestNote","releaseAll","ToneEvent_ToneEvent","ToneEvent","_startOffset","_probability","probability","_humanize","humanize","ToneEvent_extends","_rescheduleEvents","startTick","_getLoopDuration","_tick","prob","variation","reschedulTime","lastEvent","loopDuration","Part_Part","Part","events","Part_extends","computedOffset_1","_startNote","at","timeInTicks","result","next","done","_restartEvent","_setAll","attr","_testLoopBoundries","Sequence_Sequence","Sequence","_part","_seqCallback","_eventsArray","_subdivision","Sequence_extends","_createSequence","_eventsUpdated","_indexTime","Proxy","_rescheduleSequence","sequence","eventOffset","GainToAudio_GainToAudio","GainToAudio","GainToAudio_extends","CrossFade_CrossFade","CrossFade","_panner","_split","_g2a","fade","pan","CrossFade_extends","Effect_Effect","Effect","_dryWet","wet","effectSend","effectReturn","Effect_extends","connectEffect","effect","FeedbackEffect_FeedbackEffect","FeedbackEffect","_feedbackGain","FeedbackEffect_extends","FeedbackDelay_FeedbackDelay","FeedbackDelay","FeedbackDelay_extends","Convolver_Convolver","Convolver","_convolver","normalize","Convolver_extends","buff","norm","Analyser_Analyser","Analyser","_analyser","Analyser_extends","smoothing","getValue","getFloatFrequencyData","getFloatTimeDomainData","frequencyBinCount","smoothingTimeConstant","Merge_Merge","Merge","_merger","Merge_extends","Filter_Filter","Filter","_filters","Q","rolloff","Filter_extends","filter","_rolloff","rolloffNum","possibilities","cascadingCount","getFrequencyResponse","totalResponse","freqValues","magValues","phaseValues","filterClone","MultibandSplit_MultibandSplit","MultibandSplit","_lowMidFilter","lowFrequency","highFrequency","MultibandSplit_extends","EQ3_EQ3","EQ3","_multibandSplit","_lowGain","_midGain","_highGain","EQ3_extends","Tone_now","Tone_Transport","Tone_Destination","Function","eval","window"],"mappings":"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","file":"Tone.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Tone\"] = factory();\n\telse\n\t\troot[\"Tone\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","/**\n *  Tone.js\n *  @author Yotam Mann\n *  @license http://opensource.org/licenses/MIT MIT License\n *  @copyright 2014-2019 Yotam Mann\n */\nimport { version } from \"../version\";\n// import { getContext } from \"./Global\";\nimport \"./type/Units\";\n\n///////////////////////////////////////////////////////////////////////////\n// \tTONE\n///////////////////////////////////////////////////////////////////////////\n\n// tslint:disable-next-line: no-empty-interface\nexport interface BaseToneOptions {}\n\n/**\n *  @class  Tone is the base class of all other classes.\n *  @constructor\n */\nexport abstract class Tone {\n\n\t/**\n\t * The version number semver\n\t */\n\tstatic version: string = version;\n\n\t/**\n\t * The name of the class\n\t */\n\tprotected abstract name: string;\n\n\t/**\n\t * Takes a partial options an returns the completed options by filling in the defaults\n\t */\n\tstatic getDefaults(): BaseToneOptions {\n\t\treturn {};\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tDEBUGGING\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Set this debug flag to log all events that happen in this class.\n\t */\n\tdebug: boolean = false;\n\n\t/**\n\t * Prints the outputs to the console log for debugging purposes.\n\t * Prints the contents only if either the object has a property\n\t * called `debug` set to true, or a variable called TONE_DEBUG_CLASS\n\t * is set to the name of the class.\n\t * @param args\n\t *  @example\n\t * //prints all logs originating from Tone.OscillatorNode\n\t * Tone.global.TONE_DEBUG_CLASS = \"OscillatorNode\"\n\t */\n\tprotected log(...args): void {\n\t\t// if the object is either set to debug = true\n\t\t// or if there is a string on the Tone.global.with the class name\n\t\t// @ts-ignore\n\t\tif (this.debug || this.toString() === global.TONE_DEBUG_CLASS) {\n\t\t\targs.unshift(this.toString() + \":\");\n\t\t\t// tslint:disable-next-line: no-console\n\t\t\tconsole.log(...args);\n\t\t}\n\t}\n\n\t/**\n\t *  Assert that the statement is true, otherwise invoke the error.\n\t *  @param {Boolean} statement\n\t *  @param {String} error The message which is passed into an Error\n\t *  @private\n\t */\n\tprotected assert(statement: boolean, error: string): void {\n\t\tif (!statement) {\n\t\t\tthrow new Error(error);\n\t\t}\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tDISPOSING\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Indicates if the instance was disposed\n\t */\n\tprivate _wasDisposed: boolean = false;\n\n\t/**\n\t *  disconnect and dispose.\n\t */\n\tdispose(): this {\n\t\tthis._wasDisposed = true;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Indicates if the instance was disposed. 'Disposing' an\n\t * instance means that all of the Web Audio nodes that were\n\t * created for the instance are disconnected and freed for garbage collection.\n\t */\n\tget disposed(): boolean {\n\t\treturn this._wasDisposed;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tDEFAULTS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  If the `given` parameter is undefined, use the `fallback`.\n\t *  If both `given` and `fallback` are object literals, it will\n\t *  return a deep copy which includes all of the parameters from both\n\t *  objects. If a parameter is undefined in given, it will return\n\t *  the fallback property.\n\t *  <br><br>\n\t *  WARNING: if object is self referential, it will go into an an\n\t *  infinite recursive loop.\n\t *  @memberOf Tone\n\t *  @param  {*} given\n\t *  @param  {*} fallback\n\t *  @return {*}\n\t */\n\t// static defaultArg(given, fallback) {\n\t\t// if (isObject(given) && isObject(fallback)) {\n\t\t// \tconst ret = {};\n\t\t// \t// make a deep copy of the given object\n\t\t// \tfor (const givenProp in given) {\n\t\t// \t\tret[givenProp] = Tone.defaultArg(fallback[givenProp], given[givenProp]);\n\t\t// \t}\n\t\t// \tfor (const fallbackProp in fallback) {\n\t\t// \t\tret[fallbackProp] = Tone.defaultArg(given[fallbackProp], fallback[fallbackProp]);\n\t\t// \t}\n\t\t// \treturn ret;\n\t\t// } else {\n\t\t// \treturn isUndef(given) ? fallback : given;\n\t\t// }\n\t// }\n\n\t// protected options(argsArray: IArguments, keys: string[]): object {\n\t// \tlet options: any = {};\n\t// \tconst args = Array.from(argsArray);\n\t// \tif (args[0] instanceof BaseAudioContext) {\n\t// \t\toptions.context = args.shift();\n\t// \t}\n\t// \tif (args.length === 1 && isObject(args[0])) {\n\t// \t\toptions = Object.assign(options, args[0]);\n\t// \t} else {\n\t// \t\tfor (let i = 0; i < keys.length; i++) {\n\t// \t\t\tif (isDefined(args[i])) {\n\t// \t\t\t\toptions[keys[i]] = args[i];\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\t// \treturn deepMerge(this.getDefaults(), options);\n\t// }\n\n\t/**\n\t * Convert the class to a string\n\t * @example\n\t * const osc = new Oscillator()\n\t * osc.toString() // \"Oscillator\"\n\t */\n\ttoString(): string {\n\t\treturn this.name;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tSTATIC\n\t///////////////////////////////////////////////////////////////////////////\n\n\t// static get context(): import(\"./context/Context\").Context {\n\t// \treturn getContext();\n\t// }\n\n\t// static now(): Seconds {\n\t// \treturn Tone.context.now();\n\t// }\n}\n","export const version: string = \"14.1.6\";\n","/**\n * Interface for things that Tone.js adds to the window\n */\ninterface ToneWindow extends Window {\n\tTONE_AUDIO_CONTEXT?: BaseAudioContext;\n\tTONE_SILENCE_LOGGING?: boolean;\n}\n\n/**\n * A reference to the window object\n */\nexport const theWindow: ToneWindow | null = typeof self === \"object\" ? self : null;\n\n/**\n * If the browser has a window object which has an AudioContext\n */\nexport const hasAudioContext = theWindow && theWindow.hasOwnProperty(\"AudioContext\");\n\n/**\n * The global audio context which is getable and assignable through\n * getAudioContext and setAudioContext\n */\nlet globalContext: BaseAudioContext;\n\n// if it was created already, use that one\n// this enables multiple versions of Tone.js to run on the same page.\nif (theWindow && theWindow.TONE_AUDIO_CONTEXT) {\n\tglobalContext = theWindow.TONE_AUDIO_CONTEXT;\n}\n\n/**\n * Returns the default system-wide AudioContext\n */\nexport function getAudioContext(): BaseAudioContext {\n\tif (!globalContext && hasAudioContext) {\n\t\tsetAudioContext(new AudioContext());\n\t}\n\treturn globalContext;\n}\n\n/**\n * Set the default audio context\n */\nexport function setAudioContext(context: BaseAudioContext): void {\n\tglobalContext = context;\n\tif (theWindow) {\n\t\ttheWindow.TONE_AUDIO_CONTEXT = globalContext;\n\t}\n}\n","\nexport type TickerClockSource = \"worker\" | \"timeout\" | \"offline\";\n\n/**\n * A class which provides a reliable callback using either\n * a Web Worker, or if that isn't supported, falls back to setTimeout.\n */\nexport class Ticker {\n\n\t/**\n\t * Either \"worker\" or \"timeout\" or \"offline\"\n\t */\n\tprivate _type: TickerClockSource;\n\n\t/**\n\t * The update interval of the worker\n\t */\n\tprivate _updateInterval: Seconds;\n\n\t/**\n\t * The callback to invoke at regular intervals\n\t */\n\tprivate _callback: () => void;\n\n\t/**\n\t * track the callback interval\n\t */\n\tprivate _timeout!: number;\n\n\t/**\n\t * private reference to the worker\n\t */\n\tprivate _worker!: Worker;\n\n\tconstructor(callback: () => void, type: TickerClockSource, updateInterval: Seconds) {\n\n\t\tthis._callback = callback;\n\t\tthis._type = type;\n\t\tthis._updateInterval = updateInterval;\n\n\t\t// create the clock source for the first time\n\t\tthis._createClock();\n\t}\n\n\t/**\n\t *  Generate a web worker\n\t */\n\tprivate _createWorker(): void {\n\n\t\tconst blob = new Blob([\n\t\t\t// the initial timeout time\n\t\t\t`var timeoutTime =  ${(this._updateInterval * 1000).toFixed(1)};\n\t\t\t// onmessage callback\n\t\t\tself.onmessage = function(msg){\n\t\t\t\ttimeoutTime = parseInt(msg.data);\n\t\t\t};\n\t\t\t// the tick function which posts a message\n\t\t\t// and schedules a new tick\n\t\t\tfunction tick(){\n\t\t\t\tsetTimeout(tick, timeoutTime);\n\t\t\t\tself.postMessage('tick');\n\t\t\t}\n\t\t\t// call tick initially\n\t\t\ttick();`,\n\t\t]);\n\t\tconst blobUrl = URL.createObjectURL(blob);\n\t\tconst worker = new Worker(blobUrl);\n\n\t\tworker.onmessage = this._callback.bind(this);\n\n\t\tthis._worker = worker;\n\t}\n\n\t/**\n\t * Create a timeout loop\n\t */\n\tprivate _createTimeout(): void {\n\t\tthis._timeout = setTimeout(()  => {\n\t\t\tthis._createTimeout();\n\t\t\tthis._callback();\n\t\t}, this._updateInterval * 1000);\n\t}\n\n\t/**\n\t * Create the clock source.\n\t */\n\tprivate _createClock(): void {\n\t\tif (this._type === \"worker\") {\n\t\t\ttry {\n\t\t\t\tthis._createWorker();\n\t\t\t} catch (e) {\n\t\t\t\t// workers not supported, fallback to timeout\n\t\t\t\tthis._type = \"timeout\";\n\t\t\t\tthis._createClock();\n\t\t\t}\n\t\t} else if (this._type === \"timeout\") {\n\t\t\tthis._createTimeout();\n\t\t}\n\t}\n\n\t/**\n\t * Clean up the current clock source\n\t */\n\tprivate _disposeClock(): void {\n\t\tif (this._timeout) {\n\t\t\tclearTimeout(this._timeout);\n\t\t\tthis._timeout = 0;\n\t\t}\n\t\tif (this._worker) {\n\t\t\tthis._worker.terminate();\n\t\t\tthis._worker.onmessage = null;\n\t\t}\n\t}\n\n\t/**\n\t * The rate in seconds the ticker will update\n\t */\n\tget updateInterval(): Seconds {\n\t\treturn this._updateInterval;\n\t}\n\tset updateInterval(interval: Seconds) {\n\t\tthis._updateInterval = Math.max(interval, 128 / 44100);\n\t\tif (this._type === \"worker\") {\n\t\t\tthis._worker.postMessage(Math.max(interval * 1000, 1));\n\t\t}\n\t}\n\n\t/**\n\t * The type of the ticker, either a worker or a timeout\n\t */\n\tget type(): TickerClockSource {\n\t\treturn this._type;\n\t}\n\tset type(type: TickerClockSource) {\n\t\tthis._disposeClock();\n\t\tthis._type = type;\n\t\tthis._createClock();\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): void {\n\t\tthis._disposeClock();\n\t}\n}\n","/**\n *  Test if the arg is undefined\n */\nexport function isUndef(arg: any): arg is undefined {\n\treturn typeof arg === \"undefined\";\n}\n\n/**\n *  Test if the arg is not undefined\n */\nexport function isDefined<T>(arg: T | undefined): arg is T {\n\treturn !isUndef(arg);\n}\n\n/**\n *  Test if the arg is a function\n */\nexport function isFunction(arg: any): arg is (a: any) => any {\n\treturn typeof arg === \"function\";\n}\n\n/**\n *  Test if the argument is a number.\n */\nexport function isNumber(arg: any): arg is number {\n\treturn (typeof arg === \"number\");\n}\n\n/**\n *  Test if the given argument is an object literal (i.e. `{}`);\n */\nexport function isObject(arg: any): arg is object {\n\treturn (Object.prototype.toString.call(arg) === \"[object Object]\" && arg.constructor === Object);\n}\n\n/**\n *  Test if the argument is a boolean.\n */\nexport function isBoolean(arg: any): arg is boolean {\n\treturn (typeof arg === \"boolean\");\n}\n\n/**\n *  Test if the argument is an Array\n */\nexport function isArray(arg: any): arg is any[] {\n\treturn (Array.isArray(arg));\n}\n\n/**\n *  Test if the argument is a string.\n */\nexport function isString(arg: any): arg is string {\n\treturn (typeof arg === \"string\");\n}\n\n/**\n *  Test if the argument is in the form of a note in scientific pitch notation.\n *  e.g. \"C4\"\n */\nexport function isNote(arg: any): arg is Note {\n\treturn isString(arg) && /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i.test(arg);\n}\n","// import { BaseToneOptions } from \"../Tone\";\nimport { isDefined, isObject, isUndef } from \"./TypeCheck\";\n\ntype BaseToneOptions = import(\"../Tone\").BaseToneOptions;\n\n/**\n * Recursively merge an object\n * @param target the object to merge into\n * @param sources the source objects to merge\n */\nexport function deepMerge<T>(target: T, ...sources: T[]): T {\n\tif (!sources.length) { return target; }\n\tconst source = sources.shift();\n\n\tif (isObject(target) && isObject(source)) {\n\t\tfor (const key in source) {\n\t\t\t// values with the key 'value' are an exception\n\t\t\t// they don't get deep merged\n\t\t\tif (key === \"value\") {\n\t\t\t\ttarget[key] = source[key];\n\t\t\t} else if (isObject(source[key])) {\n\t\t\t\tif (!target[key]) { Object.assign(target, { [key]: {} }); }\n\t\t\t\tdeepMerge(target[key], source[key] as any);\n\t\t\t} else {\n\t\t\t\tObject.assign(target, { [key]: source[key] as any });\n\t\t\t}\n\t\t}\n\t}\n\n\treturn deepMerge(target, ...sources);\n}\n\n/**\n * Convert an args array into an object.\n */\nexport function optionsFromArguments<T extends object>(\n\tdefaults: T,\n\targsArray: IArguments,\n\tkeys: string[] = [],\n\tobjKey?: string,\n): T {\n\tconst opts: any = {};\n\tconst args = Array.from(argsArray);\n\t// if the first argument is an object and has an object key\n\tif (isObject(args[0]) && objKey && !Reflect.has(args[0], objKey)) {\n\t\t// if it's not part of the defaults\n\t\tconst partOfDefaults = Object.keys(args[0]).some(key => Reflect.has(defaults, key));\n\t\tif (!partOfDefaults) {\n\t\t\t// merge that key\n\t\t\tdeepMerge(opts, {[objKey] : args[0]});\n\t\t\t// remove the obj key from the keys\n\t\t\tkeys.splice(keys.indexOf(objKey), 1);\n\t\t\t// shift the first argument off\n\t\t\targs.shift();\n\t\t}\n\t}\n\tif (args.length === 1 && isObject(args[0])) {\n\t\tdeepMerge(opts, args[0]);\n\t} else {\n\t\tfor (let i = 0; i < keys.length; i++) {\n\t\t\tif (isDefined(args[i])) {\n\t\t\t\topts[keys[i]] = args[i];\n\t\t\t}\n\t\t}\n\t}\n\treturn deepMerge(defaults, opts);\n}\n\n/**\n * Return this instances default values by calling Constructor.getDefaults()\n */\nexport function getDefaultsFromInstance<T>(instance: T): BaseToneOptions {\n\ttype ToneClass = {\n\t\tconstructor: ToneClass;\n\t\tgetDefaults: () => BaseToneOptions;\n\t} & T;\n\n\treturn (instance as ToneClass).constructor.getDefaults();\n}\n\n/**\n * Returns the fallback if the given object is undefined.\n * Take an array of arguments and return a formatted options object.\n */\nexport function defaultArg<T>(given: T, fallback: T): T {\n\tif (isUndef(given)) {\n\t\treturn fallback;\n\t} else {\n\t\treturn given;\n\t}\n}\n\n/**\n * Remove all of the properties belonging to omit from obj.\n */\nexport function omitFromObject<T extends object, O extends string[]>(obj: T, omit: O): Omit<T, keyof O> {\n\tomit.forEach(prop => {\n\t\tif (Reflect.has(obj, prop)) {\n\t\t\tdelete obj[prop];\n\t\t}\n\t});\n\treturn obj;\n}\n","import { Tone } from \"../Tone\";\nimport { isUndef } from \"./TypeCheck\";\n\nexport interface EmitterEventObject {\n\t[event: string]: Array<(...args: any[]) => void>;\n}\n\n/**\n * Emitter gives classes which extend it\n * the ability to listen for and emit events.\n * Inspiration and reference from Jerome Etienne's [MicroEvent](https://github.com/jeromeetienne/microevent.js).\n * MIT (c) 2011 Jerome Etienne.\n */\nexport class Emitter<EventType extends string = string> extends Tone {\n\n\tname = \"Emitter\";\n\n\t/**\n\t * Private container for the events\n\t */\n\tprivate _events?: EmitterEventObject;\n\n\t/**\n\t *  Bind a callback to a specific event.\n\t *  @param  event     The name of the event to listen for.\n\t *  @param  callback  The callback to invoke when the event is emitted\n\t */\n\ton(event: EventType, callback: (...args: any[]) => void): this {\n\t\t// split the event\n\t\tconst events = event.split(/\\W+/);\n\t\tevents.forEach(eventName => {\n\t\t\tif (isUndef(this._events)) {\n\t\t\t\tthis._events = {};\n\t\t\t}\n\t\t\tif (!this._events.hasOwnProperty(eventName)) {\n\t\t\t\tthis._events[eventName] = [];\n\t\t\t}\n\t\t\tthis._events[eventName].push(callback);\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Bind a callback which is only invoked once\n\t *  @param  event     The name of the event to listen for.\n\t *  @param  callback  The callback to invoke when the event is emitted\n\t */\n\tonce(event: EventType, callback: (...args: any[]) => void): this {\n\t\tconst boundCallback = (...args: any[])  => {\n\t\t\t// invoke the callback\n\t\t\tcallback(...args);\n\t\t\t// remove the event\n\t\t\tthis.off(event, boundCallback);\n\t\t};\n\t\tthis.on(event, boundCallback);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Remove the event listener.\n\t *  @param  event     The event to stop listening to.\n\t *  @param  callback  The callback which was bound to the event with Emitter.on.\n\t *                    If no callback is given, all callbacks events are removed.\n\t */\n\toff(event: EventType, callback?: (...args: any[]) => void): this {\n\t\tconst events = event.split(/\\W+/);\n\t\tevents.forEach(eventName => {\n\t\t\tif (isUndef(this._events)) {\n\t\t\t\tthis._events = {};\n\t\t\t}\n\t\t\tif (this._events.hasOwnProperty(event)) {\n\t\t\t\tif (isUndef(callback)) {\n\t\t\t\t\tthis._events[event] = [];\n\t\t\t\t} else {\n\t\t\t\t\tconst eventList = this._events[event];\n\t\t\t\t\tfor (let i = 0; i < eventList.length; i++) {\n\t\t\t\t\t\tif (eventList[i] === callback) {\n\t\t\t\t\t\t\teventList.splice(i, 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Invoke all of the callbacks bound to the event\n\t *  with any arguments passed in.\n\t *  @param  event  The name of the event.\n\t *  @param args The arguments to pass to the functions listening.\n\t */\n\temit(event, ...args: any[]): this {\n\t\tif (this._events) {\n\t\t\tif (this._events.hasOwnProperty(event)) {\n\t\t\t\tconst eventList = this._events[event].slice(0);\n\t\t\t\tfor (let i = 0, len = eventList.length; i < len; i++) {\n\t\t\t\t\teventList[i].apply(this, args);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Add Emitter functions (on/off/emit) to the object\n\t */\n\tstatic mixin(constr: any): void {\n\t\t// instance._events = {};\n\t\t[\"on\", \"once\", \"off\", \"emit\"].forEach(name => {\n\t\t\tconst property = Object.getOwnPropertyDescriptor(Emitter.prototype, name) as PropertyDescriptor;\n\t\t\tObject.defineProperty(constr.prototype, name, property);\n\t\t});\n\t}\n\n\t/**\n\t *  Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._events = undefined;\n\t\treturn this;\n\t}\n}\n","import { Tone } from \"../Tone\";\nimport { optionsFromArguments } from \"./Defaults\";\n\ntype TimelineSearchParam = \"ticks\" | \"time\";\n\n/**\n * The options object for Timeline\n */\ninterface TimelineOptions {\n\tmemory: number;\n}\n\n/**\n * An event must have a time number\n */\nexport interface TimelineEvent {\n\ttime: number;\n}\n\n/**\n *  @class A Timeline class for scheduling and maintaining state\n *         along a timeline. All events must have a \"time\" property.\n *         Internally, events are stored in time order for fast\n *         retrieval.\n *  @param memory The number of previous events that are retained.\n */\nexport class Timeline<GenericEvent extends TimelineEvent> extends Tone {\n\n\tname = \"Timeline\";\n\n\t/**\n\t *  The memory of the timeline, i.e.\n\t *  how many events in the past it will retain\n\t */\n\tmemory: number;\n\n\t/**\n\t * The array of scheduled timeline events\n\t */\n\tprotected _timeline: GenericEvent[] = [];\n\n\tconstructor(options?: Partial<TimelineOptions>);\n\t// tslint:disable-next-line: unified-signatures\n\tconstructor(memory?: number);\n\tconstructor() {\n\t\tsuper();\n\t\tconst options = optionsFromArguments(Timeline.getDefaults(), arguments, [\"memory\"]);\n\n\t\tthis.memory = options.memory;\n\t}\n\n\tstatic getDefaults(): TimelineOptions {\n\t\treturn {\n\t\t\tmemory: Infinity,\n\t\t};\n\t}\n\n\t/**\n\t *  The number of items in the timeline.\n\t */\n\tget length(): number {\n\t\treturn this._timeline.length;\n\t}\n\n\t/**\n\t *  Insert an event object onto the timeline. Events must have a \"time\" attribute.\n\t *  @param event  The event object to insert into the timeline.\n\t */\n\tadd(event: GenericEvent): Timeline<GenericEvent> {\n\t\t// the event needs to have a time attribute\n\t\tthis.assert(Reflect.has(event, \"time\"), \"Timeline: events must have a time attribute\");\n\t\tevent.time = event.time.valueOf();\n\t\tconst index = this._search(event.time);\n\t\tthis._timeline.splice(index + 1, 0, event);\n\t\t// if the length is more than the memory, remove the previous ones\n\t\tif (this.length > this.memory) {\n\t\t\tconst diff = this.length - this.memory;\n\t\t\tthis._timeline.splice(0, diff);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Remove an event from the timeline.\n\t *  @param  {Object}  event  The event object to remove from the list.\n\t *  @returns {Timeline} this\n\t */\n\tremove(event: GenericEvent): Timeline<GenericEvent> {\n\t\tconst index = this._timeline.indexOf(event);\n\t\tif (index !== -1) {\n\t\t\tthis._timeline.splice(index, 1);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Get the nearest event whose time is less than or equal to the given time.\n\t *  @param  time  The time to query.\n\t */\n\tget(time: number, param: TimelineSearchParam = \"time\"): GenericEvent | null {\n\t\tconst index = this._search(time, param);\n\t\tif (index !== -1) {\n\t\t\treturn this._timeline[index];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t *  Return the first event in the timeline without removing it\n\t *  @returns {Object} The first event object\n\t */\n\tpeek(): GenericEvent | undefined {\n\t\treturn this._timeline[0];\n\t}\n\n\t/**\n\t *  Return the first event in the timeline and remove it\n\t */\n\tshift(): GenericEvent | undefined {\n\t\treturn this._timeline.shift();\n\t}\n\n\t/**\n\t *  Get the event which is scheduled after the given time.\n\t *  @param  time  The time to query.\n\t */\n\tgetAfter(time: number, param: TimelineSearchParam = \"time\"): GenericEvent | null {\n\t\tconst index = this._search(time, param);\n\t\tif (index + 1 < this._timeline.length) {\n\t\t\treturn this._timeline[index + 1];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t *  Get the event before the event at the given time.\n\t *  @param  time  The time to query.\n\t */\n\tgetBefore(time: number): GenericEvent | null {\n\t\tconst len = this._timeline.length;\n\t\t// if it's after the last item, return the last item\n\t\tif (len > 0 && this._timeline[len - 1].time < time) {\n\t\t\treturn this._timeline[len - 1];\n\t\t}\n\t\tconst index = this._search(time);\n\t\tif (index - 1 >= 0) {\n\t\t\treturn this._timeline[index - 1];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t *  Cancel events at and after the given time\n\t *  @param  time  The time to query.\n\t */\n\tcancel(after: number): Timeline<GenericEvent> {\n\t\tif (this._timeline.length > 1) {\n\t\t\tlet index = this._search(after);\n\t\t\tif (index >= 0) {\n\t\t\t\tif (this._timeline[index].time === after) {\n\t\t\t\t\t// get the first item with that time\n\t\t\t\t\tfor (let i = index; i >= 0; i--) {\n\t\t\t\t\t\tif (this._timeline[i].time === after) {\n\t\t\t\t\t\t\tindex = i;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis._timeline = this._timeline.slice(0, index);\n\t\t\t\t} else {\n\t\t\t\t\tthis._timeline = this._timeline.slice(0, index + 1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._timeline = [];\n\t\t\t}\n\t\t} else if (this._timeline.length === 1) {\n\t\t\t// the first item's time\n\t\t\tif (this._timeline[0].time >= after) {\n\t\t\t\tthis._timeline = [];\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Cancel events before or equal to the given time.\n\t *  @param  {Number}  time  The time to cancel before.\n\t *  @returns {Timeline} this\n\t */\n\tcancelBefore(time): Timeline<GenericEvent> {\n\t\tconst index = this._search(time);\n\t\tif (index >= 0) {\n\t\t\tthis._timeline = this._timeline.slice(index + 1);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the previous event if there is one. null otherwise\n\t * @param  {Object} event The event to find the previous one of\n\t * @return {Object}       The event right before the given event\n\t */\n\tpreviousEvent(event): GenericEvent | null {\n\t\tconst index = this._timeline.indexOf(event);\n\t\tif (index > 0) {\n\t\t\treturn this._timeline[index - 1];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t *  Does a binary search on the timeline array and returns the\n\t *  nearest event index whose time is after or equal to the given time.\n\t *  If a time is searched before the first index in the timeline, -1 is returned.\n\t *  If the time is after the end, the index of the last item is returned.\n\t *  @param  time\n\t */\n\tprotected _search(time: number, param: TimelineSearchParam = \"time\"): number {\n\t\tif (this._timeline.length === 0) {\n\t\t\treturn -1;\n\t\t}\n\t\tlet beginning = 0;\n\t\tconst len = this._timeline.length;\n\t\tlet end = len;\n\t\tif (len > 0 && this._timeline[len - 1][param] <= time) {\n\t\t\treturn len - 1;\n\t\t}\n\t\twhile (beginning < end) {\n\t\t\t// calculate the midpoint for roughly equal partition\n\t\t\tlet midPoint = Math.floor(beginning + (end - beginning) / 2);\n\t\t\tconst event = this._timeline[midPoint];\n\t\t\tconst nextEvent = this._timeline[midPoint + 1];\n\t\t\tif (event[param] === time) {\n\t\t\t\t// choose the last one that has the same time\n\t\t\t\tfor (let i = midPoint; i < this._timeline.length; i++) {\n\t\t\t\t\tconst testEvent = this._timeline[i];\n\t\t\t\t\tif (testEvent[param] === time) {\n\t\t\t\t\t\tmidPoint = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn midPoint;\n\t\t\t} else if (event[param] < time && nextEvent[param] > time) {\n\t\t\t\treturn midPoint;\n\t\t\t} else if (event[param] > time) {\n\t\t\t\t// search lower\n\t\t\t\tend = midPoint;\n\t\t\t} else {\n\t\t\t\t// search upper\n\t\t\t\tbeginning = midPoint + 1;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\n\t/**\n\t *  Internal iterator. Applies extra safety checks for\n\t *  removing items from the array.\n\t */\n\tprivate _iterate(\n\t\tcallback: (event: GenericEvent) => void,\n\t\tlowerBound = 0, upperBound = this._timeline.length - 1,\n\t): void {\n\t\tthis._timeline.slice(lowerBound, upperBound + 1).forEach(callback);\n\t}\n\n\t/**\n\t *  Iterate over everything in the array\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEach(callback: (event: GenericEvent) => void): Timeline<GenericEvent> {\n\t\tthis._iterate(callback);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array at or before the given time.\n\t *  @param  time The time to check if items are before\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachBefore(time, callback: (event: GenericEvent) => void): Timeline<GenericEvent> {\n\t\t// iterate over the items in reverse so that removing an item doesn't break things\n\t\tconst upperBound = this._search(time);\n\t\tif (upperBound !== -1) {\n\t\t\tthis._iterate(callback, 0, upperBound);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array after the given time.\n\t *  @param  time The time to check if items are before\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachAfter(time, callback: (event: GenericEvent) => void): Timeline<GenericEvent> {\n\t\t// iterate over the items in reverse so that removing an item doesn't break things\n\t\tconst lowerBound = this._search(time);\n\t\tthis._iterate(callback, lowerBound + 1);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array between the startTime and endTime.\n\t *  The timerange is inclusive of the startTime, but exclusive of the endTime.\n\t *  range = [startTime, endTime).\n\t *  @param  startTime The time to check if items are before\n\t *  @param  endTime The end of the test interval.\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachBetween(startTime: number, endTime: number, callback: (event: GenericEvent) => void): Timeline<GenericEvent> {\n\t\tlet lowerBound = this._search(startTime);\n\t\tlet upperBound = this._search(endTime);\n\t\tif (lowerBound !== -1 && upperBound !== -1) {\n\t\t\tif (this._timeline[lowerBound].time !== startTime) {\n\t\t\t\tlowerBound += 1;\n\t\t\t}\n\t\t\t// exclusive of the end time\n\t\t\tif (this._timeline[upperBound].time === endTime) {\n\t\t\t\tupperBound -= 1;\n\t\t\t}\n\t\t\tthis._iterate(callback, lowerBound, upperBound);\n\t\t} else if (lowerBound === -1) {\n\t\t\tthis._iterate(callback, 0, upperBound);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array at or after the given time. Similar to\n\t *  forEachAfter, but includes the item(s) at the given time.\n\t *  @param  time The time to check if items are before\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachFrom(time: number, callback: (event: GenericEvent) => void): Timeline<GenericEvent> {\n\t\t// iterate over the items in reverse so that removing an item doesn't break things\n\t\tlet lowerBound = this._search(time);\n\t\t// work backwards until the event time is less than time\n\t\twhile (lowerBound >= 0 && this._timeline[lowerBound].time >= time) {\n\t\t\tlowerBound--;\n\t\t}\n\t\tthis._iterate(callback, lowerBound + 1);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array at the given time\n\t *  @param  time The time to check if items are before\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachAtTime(time: number, callback: (event: GenericEvent) => void): Timeline<GenericEvent> {\n\t\t// iterate over the items in reverse so that removing an item doesn't break things\n\t\tconst upperBound = this._search(time);\n\t\tif (upperBound !== -1) {\n\t\t\tthis._iterate(event => {\n\t\t\t\tif (event.time === time) {\n\t\t\t\t\tcallback(event);\n\t\t\t\t}\n\t\t\t}, 0, upperBound);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._timeline = [];\n\t\treturn this;\n\t}\n}\n","///////////////////////////////////////////////////////////////////////////\n// INITIALIZING NEW CONTEXT\n///////////////////////////////////////////////////////////////////////////\n\ntype Context = import(\"./Context\").Context;\n\n/**\n * Array of callbacks to invoke when a new context is created\n */\nconst notifyNewContext: Array<(ctx: Context) => void> = [];\n\n/**\n * Used internally to setup a new Context\n */\nexport function onContextInit(cb: (ctx: Context) => void): void {\n\tnotifyNewContext.push(cb);\n}\n\n/**\n * Invoke any classes which need to also be initialized when a new context is created.\n */\nexport function initializeContext(ctx: Context): void {\n\t// add any additional modules\n\tnotifyNewContext.forEach(cb => cb(ctx));\n}\n\n/**\n * Array of callbacks to invoke when a new context is created\n */\nconst notifyCloseContext: Array<(ctx: Context) => void> = [];\n\n/**\n * Used internally to tear down a Context\n */\nexport function onContextClose(cb: (ctx: Context) => void): void {\n\tnotifyCloseContext.push(cb);\n}\n\nexport function closeContext(ctx: Context): void {\n\t// add any additional modules\n\tnotifyCloseContext.forEach(cb => cb(ctx));\n}\n","import { Ticker, TickerClockSource } from \"../clock/Ticker\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Emitter } from \"../util/Emitter\";\nimport { Omit } from \"../util/Interface\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isString } from \"../util/TypeCheck\";\nimport { getAudioContext } from \"./AudioContext\";\nimport { closeContext, initializeContext } from \"./ContextInitialization\";\n\ntype Transport = import(\"../clock/Transport\").Transport;\ntype Destination = import(\"./Destination\").Destination;\n\nexport type ContextLatencyHint = AudioContextLatencyCategory | \"fastest\";\n\n// these are either not used in Tone.js or deprecated and not implemented.\nexport type ExcludedFromBaseAudioContext = \"createScriptProcessor\" | \"onstatechange\" | \"addEventListener\"\n\t| \"removeEventListener\" | \"listener\" | \"dispatchEvent\" | \"audioWorklet\" | \"destination\";\n\n// the subset of the BaseAudioContext which Tone.Context implements.\nexport type BaseAudioContextSubset = Omit<BaseAudioContext, ExcludedFromBaseAudioContext>;\n\nexport interface ContextOptions {\n\tclockSource: TickerClockSource;\n\tlatencyHint: ContextLatencyHint;\n\tlookAhead: Seconds;\n\tupdateInterval: Seconds;\n\tcontext: BaseAudioContext;\n}\n\nexport interface ContextTimeoutEvent {\n\tcallback: (...args: any[]) => void;\n\tid: number;\n\ttime: Seconds;\n}\n\n/**\n * Wrapper around the native AudioContext.\n */\nexport class Context extends Emitter<\"statechange\" | \"tick\"> implements BaseAudioContextSubset {\n\n\tname = \"Context\";\n\n\t/**\n\t * The amount of time into the future events are scheduled. Giving Web Audio\n\t * a short amount of time into the future to schedule events can reduce clicks and\n\t * improve performance. This value can be set to 0 to get the lowest latency.\n\t */\n\tlookAhead: Seconds;\n\n\t/**\n\t * private reference to the BaseAudioContext\n\t */\n\tprotected readonly _context: BaseAudioContext;\n\n\t/**\n\t * A reliable callback method\n\t */\n\tprivate readonly _ticker: Ticker;\n\n\t/**\n\t *  The default latency hint\n\t */\n\tprivate _latencyHint: ContextLatencyHint | Seconds;\n\n\t/**\n\t *  An object containing all of the constants AudioBufferSourceNodes\n\t */\n\tprivate _constants = new Map<number, AudioBufferSourceNode>();\n\n\t/**\n\t *  All of the setTimeout events.\n\t */\n\tprivate _timeouts: Timeline<ContextTimeoutEvent> = new Timeline();\n\n\t/**\n\t *  The timeout id counter\n\t */\n\tprivate _timeoutIds = 0;\n\n\t/**\n\t * A reference the Transport singleton belonging to this context\n\t */\n\tprivate _transport!: Transport;\n\n\t/**\n\t * A reference the Destination singleton belonging to this context\n\t */\n\tprivate _destination!: Destination;\n\n\t/**\n\t * Private indicator if the context has been initialized\n\t */\n\tprivate _initialized: boolean = false;\n\n\tconstructor(context?: BaseAudioContext);\n\t// tslint:disable-next-line: unified-signatures\n\tconstructor(options?: Partial<ContextOptions>);\n\tconstructor() {\n\t\tsuper();\n\t\tconst options = optionsFromArguments(Context.getDefaults(), arguments, [\"context\"]);\n\n\t\tthis._context = options.context;\n\n\t\tthis._latencyHint = options.latencyHint;\n\t\tthis.lookAhead = options.lookAhead;\n\n\t\tthis._ticker = new Ticker(this.emit.bind(this, \"tick\"), options.clockSource, options.updateInterval);\n\t\tthis.on(\"tick\", this._timeoutLoop.bind(this));\n\n\t\t// fwd events from the context\n\t\tthis._context.addEventListener(\"statechange\", () => {\n\t\t\tthis.emit(\"statechange\", this.state);\n\t\t});\n\t}\n\n\tstatic getDefaults(): ContextOptions {\n\t\treturn {\n\t\t\tclockSource: \"worker\",\n\t\t\tcontext: getAudioContext(),\n\t\t\tlatencyHint: \"interactive\",\n\t\t\tlookAhead: 0.1,\n\t\t\tupdateInterval: 0.03,\n\t\t};\n\t}\n\n\t/**\n\t * Finish setting up the context. **You usually do not need to do this manually.**\n\t */\n\tinitialize(): this {\n\t\tif (!this._initialized) {\n\t\t\t// add any additional modules\n\t\t\tinitializeContext(this);\n\t\t\tthis._initialized = true;\n\t\t}\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////\n\t// BASE AUDIO CONTEXT METHODS\n\t///////////////////////////////////////////////////////////////////////\n\n\tcreateAnalyser(): AnalyserNode {\n\t\treturn this._context.createAnalyser();\n\t}\n\tcreateOscillator(): OscillatorNode {\n\t\treturn this._context.createOscillator();\n\t}\n\tcreateBufferSource(): AudioBufferSourceNode {\n\t\treturn this._context.createBufferSource();\n\t}\n\tcreateBiquadFilter(): BiquadFilterNode {\n\t\treturn this._context.createBiquadFilter();\n\t}\n\tcreateBuffer(numberOfChannels: number, length: number, sampleRate: number): AudioBuffer {\n\t\treturn this._context.createBuffer(numberOfChannels, length, sampleRate);\n\t}\n\tcreateChannelMerger(numberOfInputs?: number | undefined): ChannelMergerNode {\n\t\treturn this._context.createChannelMerger(numberOfInputs);\n\t}\n\tcreateChannelSplitter(numberOfOutputs?: number | undefined): ChannelSplitterNode {\n\t\treturn this._context.createChannelSplitter(numberOfOutputs);\n\t}\n\tcreateConstantSource(): ConstantSourceNode {\n\t\treturn this._context.createConstantSource();\n\t}\n\tcreateConvolver(): ConvolverNode {\n\t\treturn this._context.createConvolver();\n\t}\n\tcreateDelay(maxDelayTime?: number | undefined): DelayNode {\n\t\treturn this._context.createDelay(maxDelayTime);\n\t}\n\tcreateDynamicsCompressor(): DynamicsCompressorNode {\n\t\treturn this._context.createDynamicsCompressor();\n\t}\n\tcreateGain(): GainNode {\n\t\treturn this._context.createGain();\n\t}\n\tcreateIIRFilter(feedforward: number[], feedback: number[]): IIRFilterNode {\n\t\treturn this._context.createIIRFilter(feedforward, feedback);\n\t}\n\tcreatePanner(): PannerNode {\n\t\treturn this._context.createPanner();\n\t}\n\tcreatePeriodicWave(\n\t\treal: number[] | Float32Array,\n\t\timag: number[] | Float32Array,\n\t\tconstraints?: PeriodicWaveConstraints | undefined,\n\t): PeriodicWave {\n\t\treturn this._context.createPeriodicWave(real, imag, constraints);\n\t}\n\tcreateStereoPanner(): StereoPannerNode {\n\t\treturn this._context.createStereoPanner();\n\t}\n\tcreateWaveShaper(): WaveShaperNode {\n\t\treturn this._context.createWaveShaper();\n\t}\n\tdecodeAudioData(audioData: ArrayBuffer): Promise<AudioBuffer> {\n\t\treturn this._context.decodeAudioData(audioData);\n\t}\n\n\t/**\n\t *  The current time in seconds of the AudioContext.\n\t */\n\tget currentTime(): Seconds {\n\t\treturn this._context.currentTime;\n\t}\n\t/**\n\t *  The current time in seconds of the AudioContext.\n\t */\n\tget state(): AudioContextState {\n\t\treturn this._context.state;\n\t}\n\t/**\n\t *  The current time in seconds of the AudioContext.\n\t */\n\tget sampleRate(): number {\n\t\treturn this._context.sampleRate;\n\t}\n\t/**\n\t *  The listener\n\t */\n\tget listener(): AudioListener {\n\t\treturn this._context.listener;\n\t}\n\n\t/**\n\t *  There is only one Transport per Context. It is created on initialization.\n\t */\n\tget transport(): Transport {\n\t\tthis.assert(this._initialized, \"The context must be initialized before being used by invoking context.initialize()\");\n\t\treturn this._transport;\n\t}\n\tset transport(t: Transport) {\n\t\tthis.assert(!this._initialized, \"The transport cannot be set after initialization.\");\n\t\tthis._transport = t;\n\t}\n\n\t/**\n\t *  A reference to the Context's destination node.\n\t */\n\tget destination(): Destination {\n\t\tthis.assert(this._initialized, \"The context must be initialized before being used by invoking context.initialize()\");\n\t\treturn this._destination;\n\t}\n\tset destination(d: Destination) {\n\t\tthis.assert(!this._initialized, \"The transport cannot be set after initialization.\");\n\t\tthis._destination = d;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////\n\t// TICKER\n\t///////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  How often the interval callback is invoked.\n\t *  This number corresponds to how responsive the scheduling\n\t *  can be. context.updateInterval + context.lookAhead gives you the\n\t *  total latency between scheduling an event and hearing it.\n\t */\n\tget updateInterval(): Seconds {\n\t\treturn this._ticker.updateInterval;\n\t}\n\tset updateInterval(interval: Seconds) {\n\t\tthis._ticker.updateInterval = interval;\n\t}\n\n\t/**\n\t *  What the source of the clock is, either \"worker\" (default),\n\t *  \"timeout\", or \"offline\" (none).\n\t */\n\tget clockSource(): TickerClockSource {\n\t\treturn this._ticker.type;\n\t}\n\tset clockSource(type: TickerClockSource) {\n\t\tthis._ticker.type = type;\n\t}\n\n\t/**\n\t * The type of playback, which affects tradeoffs between audio\n\t * output latency and responsiveness.\n\t * In addition to setting the value in seconds, the latencyHint also\n\t * accepts the strings \"interactive\" (prioritizes low latency),\n\t * \"playback\" (prioritizes sustained playback), \"balanced\" (balances\n\t * latency and performance), and \"fastest\" (lowest latency, might glitch more often).\n\t * @example\n\t * //set the lookAhead to 0.3 seconds\n\t * Tone.context.latencyHint = 0.3;\n\t */\n\tget latencyHint(): ContextLatencyHint | Seconds {\n\t\treturn this._latencyHint;\n\t}\n\tset latencyHint(hint: ContextLatencyHint | Seconds) {\n\t\tlet lookAheadValue = 0;\n\t\tthis._latencyHint = hint;\n\t\tif (isString(hint)) {\n\t\t\tswitch (hint) {\n\t\t\t\tcase \"interactive\":\n\t\t\t\t\tlookAheadValue = 0.1;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"playback\":\n\t\t\t\t\tlookAheadValue = 0.8;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"balanced\":\n\t\t\t\t\tlookAheadValue = 0.25;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"fastest\":\n\t\t\t\t\tlookAheadValue = 0.01;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tthis.lookAhead = lookAheadValue;\n\t\tthis.updateInterval = lookAheadValue / 3;\n\t}\n\n\t/**\n\t *  The unwrapped AudioContext.\n\t */\n\tget rawContext(): BaseAudioContext {\n\t\treturn this._context;\n\t}\n\n\t/**\n\t * The current audio context time plus a short {@link lookAhead}.\n\t */\n\tnow(): Seconds {\n\t\treturn this._context.currentTime + this.lookAhead;\n\t}\n\n\t/**\n\t *  Starts the audio context from a suspended state. This is required\n\t *  to initially start the AudioContext.\n\t */\n\tresume(): Promise<void> {\n\t\tif (this._context.state === \"suspended\" && this._context instanceof AudioContext) {\n\t\t\treturn this._context.resume();\n\t\t} else {\n\t\t\treturn Promise.resolve();\n\t\t}\n\t}\n\n\t/**\n\t *  Promise which is invoked when the context is running.\n\t *  Tries to resume the context if it's not started.\n\t */\n\tasync close(): Promise<Context> {\n\t\tif (this._context instanceof AudioContext) {\n\t\t\tawait this._context.close();\n\t\t}\n\t\tif (this._initialized) {\n\t\t\tcloseContext(this);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Generate a looped buffer at some constant value.\n\t */\n\tgetConstant(val: number): AudioBufferSourceNode {\n\t\tif (this._constants.has(val)) {\n\t\t\treturn this._constants.get(val) as AudioBufferSourceNode;\n\t\t} else {\n\t\t\tconst buffer = this._context.createBuffer(1, 128, this._context.sampleRate);\n\t\t\tconst arr = buffer.getChannelData(0);\n\t\t\tfor (let i = 0; i < arr.length; i++) {\n\t\t\t\tarr[i] = val;\n\t\t\t}\n\t\t\tconst constant = this._context.createBufferSource();\n\t\t\tconstant.channelCount = 1;\n\t\t\tconstant.channelCountMode = \"explicit\";\n\t\t\tconstant.buffer = buffer;\n\t\t\tconstant.loop = true;\n\t\t\tconstant.start(0);\n\t\t\tthis._constants.set(val, constant);\n\t\t\treturn constant;\n\t\t}\n\t}\n\n\t/**\n\t *  Clean up. Also closes the audio context.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._ticker.dispose();\n\t\tthis._timeouts.dispose();\n\t\tObject.keys(this._constants).map(val => this._constants[val].disconnect());\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////\n\t// TIMEOUTS\n\t///////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  The private loop which keeps track of the context scheduled timeouts\n\t *  Is invoked from the clock source\n\t */\n\tprivate _timeoutLoop(): void  {\n\t\tconst now = this.now();\n\t\tlet firstEvent = this._timeouts.peek();\n\t\twhile (this._timeouts.length && firstEvent && firstEvent.time <= now) {\n\t\t\t// invoke the callback\n\t\t\tfirstEvent.callback();\n\t\t\t// shift the first event off\n\t\t\tthis._timeouts.shift();\n\t\t\t// get the next one\n\t\t\tfirstEvent = this._timeouts.peek();\n\t\t}\n\t}\n\n\t/**\n\t *  A setTimeout which is guarented by the clock source.\n\t *  Also runs in the offline context.\n\t *  @param  fn       The callback to invoke\n\t *  @param  timeout  The timeout in seconds\n\t *  @returns ID to use when invoking Context.clearTimeout\n\t */\n\tsetTimeout(fn: (...args: any[]) => void, timeout: Seconds): number {\n\t\tthis._timeoutIds++;\n\t\tconst now = this.now();\n\t\tthis._timeouts.add({\n\t\t\tcallback : fn,\n\t\t\tid : this._timeoutIds,\n\t\t\ttime : now + timeout,\n\t\t});\n\t\treturn this._timeoutIds;\n\t}\n\n\t/**\n\t *  Clears a previously scheduled timeout with Tone.context.setTimeout\n\t *  @param  id  The ID returned from setTimeout\n\t */\n\tclearTimeout(id: number): Context {\n\t\tthis._timeouts.forEach(event => {\n\t\t\tif (event.id === id) {\n\t\t\t\tthis._timeouts.remove(event);\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n}\n","import { version } from \"../version\";\nimport { hasAudioContext, theWindow } from \"./context/AudioContext\";\nimport { Context } from \"./context/Context\";\n\n/**\n * This dummy context is used to avoid throwing immediate errors when importing in Node.js\n */\nconst dummyContext: Context = {\n\tdestination: {},\n\ttransport: {},\n} as Context;\n\n/**\n * The global audio context which is getable and assignable through\n * getContext and setContext\n */\nlet globalContext: Context = dummyContext;\n\n/**\n * Returns the default system-wide AudioContext\n */\nexport function getContext(): Context {\n\tif (globalContext === dummyContext && hasAudioContext) {\n\t\tsetContext(new Context());\n\t}\n\treturn globalContext;\n}\n\n/**\n * Set the default audio context\n */\nexport function setContext(context: Context): void {\n\tglobalContext = context;\n\tcontext.initialize();\n}\n\n/**\n * Most browsers will not play _any_ audio until a user\n * clicks something (like a play button). Invoke this method\n * on a click or keypress event handler to start the audio context.\n * More about the Autoplay policy\n * [here](https://developers.google.com/web/updates/2017/09/autoplay-policy-changes#webaudio)\n * @example\n * document.querySelector('#playbutton').addEventListener('click', () => Tone.start())\n */\nexport function start(): Promise <void> {\n\treturn globalContext.resume();\n}\n\n/**\n * Log Tone.js + version in the console.\n */\nif (theWindow && !theWindow.TONE_SILENCE_LOGGING) {\n\tlet prefix = \"v\";\n\tif (version === \"dev\") {\n\t\tprefix = \"\";\n\t}\n\tconst printString = ` * Tone.js ${prefix}${version} * `;\n\t// tslint:disable-next-line: no-console\n\tconsole.log(`%c${printString}`, \"background: #000; color: #fff\");\n}\n","import \"./Units\";\n\n/**\n *  Equal power gain scale. Good for cross-fading.\n *  @param  percent (0-1)\n */\nexport function equalPowerScale(percent: NormalRange): number {\n\tconst piFactor = 0.5 * Math.PI;\n\treturn Math.sin(percent * piFactor);\n}\n\n/**\n *  Convert decibels into gain.\n */\nexport function dbToGain(db: Decibels): GainFactor {\n\treturn Math.pow(10, db / 20);\n}\n\n/**\n *  Convert gain to decibels.\n */\nexport function gainToDb(gain: GainFactor): Decibels {\n\treturn 20 * (Math.log(gain) / Math.LN10);\n}\n\n/**\n * Convert an interval (in semitones) to a frequency ratio.\n * @param interval the number of semitones above the base note\n * @example\n * tone.intervalToFrequencyRatio(0); // 1\n * tone.intervalToFrequencyRatio(12); // 2\n * tone.intervalToFrequencyRatio(-12); // 0.5\n */\nexport function intervalToFrequencyRatio(interval: Interval): number {\n\treturn Math.pow(2, (interval / 12));\n}\n\n/**\n * The Global [concert tuning pitch](https://en.wikipedia.org/wiki/Concert_pitch) which is used\n * to generate all the other pitch values from notes. A4's values in Hertz.\n */\nlet A4: Hertz = 440;\n\nexport function getA4(): Hertz {\n\treturn A4;\n}\n\nexport function setA4(freq: Hertz): void {\n\tA4 = freq;\n}\n\n/**\n * Convert a frequency value to a MIDI note.\n * @param frequency The value to frequency value to convert.\n * @example\n * ftom(440); // returns 69\n */\nexport function ftom(frequency: Hertz): MidiNote {\n\treturn 69 + Math.round(12 * Math.log2(frequency / A4));\n}\n\n/**\n * Convert a MIDI note to frequency value.\n * @param  midi The midi number to convert.\n * @return The corresponding frequency value\n * @example\n */\nexport function mtof(midi: MidiNote): Hertz {\n\treturn A4 * Math.pow(2, (midi - 69) / 12);\n}\n","import { Context } from \"../context/Context\";\nimport { Tone } from \"../Tone\";\nimport { isDefined, isObject , isString, isUndef } from \"../util/TypeCheck\";\n\nexport type TimeValue = Time | TimeBaseClass<any, any>;\n\n/**\n * The units that the TimeBase can accept. extended by other classes\n */\nexport type TimeBaseUnit = \"s\" | \"n\" | \"t\" | \"m\" | \"i\" | \"hz\" | \"tr\" | \"samples\" | \"number\";\n\nexport interface TypeFunction {\n\tregexp: RegExp;\n\tmethod: (value: string, ...args: string[]) => number;\n}\n\nexport interface TimeExpression<Type extends number> {\n\t[key: string]: {\n\t\tregexp: RegExp;\n\t\tmethod: (value: string, ...args: string[]) => Type;\n\t};\n}\n\n/**\n * TimeBase is a flexible encoding of time which can be evaluated to and from a string.\n * @param  val    The time value as a number, string or object\n * @param  units  Unit values\n * @example\n * new TimeBase(4, \"n\")\n * new TimeBase(2, \"t\")\n * new TimeBase(\"2t\")\n * new TimeBase({\"2t\" : 2})\n * new TimeBase(\"2t\") + new TimeBase(\"4n\");\n */\nexport abstract class TimeBaseClass<Type extends number, Unit extends string> extends Tone {\n\n\treadonly context: Context;\n\n\t/**\n\t * The value of the units\n\t */\n\tprotected _val?: TimeValue;\n\n\t/**\n\t * The units of time\n\t */\n\tprotected _units?: Unit;\n\n\t/**\n\t * All of the conversion expressions\n\t */\n\tprotected _expressions: TimeExpression<Type>;\n\n\t/**\n\t * The default units\n\t */\n\treadonly defaultUnits: Unit = \"s\" as Unit;\n\n\tconstructor(context: Context, value?: TimeValue, units?: Unit) {\n\t\tsuper();\n\n\t\tthis._val = value;\n\t\tthis._units = units;\n\t\tthis.context = context;\n\t\tthis._expressions = this._getExpressions();\n\t}\n\n\t/**\n\t * All of the time encoding expressions\n\t */\n\tprotected _getExpressions(): TimeExpression<Type> {\n\t\treturn {\n\t\t\thz: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._frequencyToUnits(parseFloat(value));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?)hz$/i,\n\t\t\t},\n\t\t\ti: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._ticksToUnits(parseInt(value, 10));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)i$/i,\n\t\t\t},\n\t\t\tm: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._beatsToUnits(parseInt(value, 10) * this._getTimeSignature());\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)m$/i,\n\t\t\t},\n\t\t\tn: {\n\t\t\t\tmethod: (value, dot) => {\n\t\t\t\t\tconst numericValue = parseInt(value, 10);\n\t\t\t\t\tconst scalar = dot === \".\" ? 1.5 : 1;\n\t\t\t\t\tif (numericValue === 1) {\n\t\t\t\t\t\treturn this._beatsToUnits(this._getTimeSignature()) * scalar as Type;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn this._beatsToUnits(4 / numericValue) * scalar as Type;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)n(\\.?)$/i,\n\t\t\t},\n\t\t\tnumber: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._expressions[this.defaultUnits].method.call(this, value);\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?)$/,\n\t\t\t},\n\t\t\ts: {\n\t\t\t\tmethod: (value): Type => {\n\t\t\t\t\treturn this._secondsToUnits(parseFloat(value));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?)s$/,\n\t\t\t},\n\t\t\tsamples: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn parseInt(value, 10) / this.context.sampleRate as Type;\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)samples$/,\n\t\t\t},\n\t\t\tt: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\tconst numericValue = parseInt(value, 10);\n\t\t\t\t\treturn this._beatsToUnits(8 / (Math.floor(numericValue) * 3));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)t$/i,\n\t\t\t},\n\t\t\ttr: {\n\t\t\t\tmethod: (m, q, s) => {\n\t\t\t\t\tlet total = 0;\n\t\t\t\t\tif (m && m !== \"0\") {\n\t\t\t\t\t\ttotal += this._beatsToUnits(this._getTimeSignature() * parseFloat(m));\n\t\t\t\t\t}\n\t\t\t\t\tif (q && q !== \"0\") {\n\t\t\t\t\t\ttotal += this._beatsToUnits(parseFloat(q));\n\t\t\t\t\t}\n\t\t\t\t\tif (s && s !== \"0\") {\n\t\t\t\t\t\ttotal += this._beatsToUnits(parseFloat(s) / 4);\n\t\t\t\t\t}\n\t\t\t\t\treturn total as Type;\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?$/,\n\t\t\t},\n\t\t};\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tVALUE OF\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Evaluate the time value. Returns the time in seconds.\n\t */\n\tvalueOf(): Type {\n\t\tif (this._val instanceof TimeBaseClass) {\n\t\t\tthis.fromType(this._val);\n\t\t}\n\t\tif (isUndef(this._val)) {\n\t\t\treturn this._noArg();\n\t\t} else if (isString(this._val) && isUndef(this._units)) {\n\t\t\tfor (const units in this._expressions) {\n\t\t\t\tif (this._expressions[units].regexp.test(this._val.trim())) {\n\t\t\t\t\tthis._units = units as Unit;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (isObject(this._val)) {\n\t\t\tlet total = 0;\n\t\t\tfor (const typeName in this._val) {\n\t\t\t\tif (isDefined(this._val[typeName])) {\n\t\t\t\t\tconst quantity = this._val[typeName];\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tconst time = (new this.constructor(this.context, typeName)).valueOf() * quantity;\n\t\t\t\t\ttotal += time;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn total as Type;\n\t\t}\n\t\tif (isDefined(this._units)) {\n\t\t\tconst expr = this._expressions[this._units];\n\t\t\tconst matching = this._val.toString().trim().match(expr.regexp);\n\t\t\tif (matching) {\n\t\t\t\treturn expr.method.apply(this, matching.slice(1));\n\t\t\t} else {\n\t\t\t\treturn expr.method.call(this, this._val);\n\t\t\t}\n\t\t} else if (isString(this._val)) {\n\t\t\treturn parseFloat(this._val) as Type;\n\t\t} else {\n\t\t\treturn this._val as Type;\n\t\t}\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tUNIT CONVERSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Returns the value of a frequency in the current units\n\t */\n\tprotected _frequencyToUnits(freq: Hertz): Type {\n\t\treturn 1 / freq as Type;\n\t}\n\n\t/**\n\t *  Return the value of the beats in the current units\n\t */\n\tprotected _beatsToUnits(beats: number): Type {\n\t\treturn (60 / this._getBpm()) * beats as Type;\n\t}\n\n\t/**\n\t *  Returns the value of a second in the current units\n\t */\n\tprotected _secondsToUnits(seconds: Seconds): Type {\n\t\treturn seconds as Type;\n\t}\n\n\t/**\n\t *  Returns the value of a tick in the current time units\n\t *  @private\n\t */\n\tprotected _ticksToUnits(ticks: Ticks): Type {\n\t\treturn (ticks * (this._beatsToUnits(1)) / this._getPPQ()) as Type;\n\t}\n\n\t/**\n\t *  With no arguments, return 'now'\n\t */\n\tprotected _noArg(): Type {\n\t\treturn this._now();\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tTEMPO CONVERSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Return the bpm\n\t */\n\tprotected _getBpm(): BPM {\n\t\treturn this.context.transport.bpm.value;\n\t}\n\n\t/**\n\t * Return the timeSignature\n\t */\n\tprotected _getTimeSignature(): number {\n\t\treturn this.context.transport.timeSignature as number;\n\t}\n\n\t/**\n\t * Return the PPQ or 192 if Transport is not available\n\t */\n\tprotected _getPPQ(): number {\n\t\treturn this.context.transport.PPQ;\n\t}\n\n\t/**\n\t * Return the current time in whichever context is relevant\n\t */\n\tprotected abstract _now(): Type;\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tCONVERSION INTERFACE\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Coerce a time type into this units type.\n\t * @param type Any time type units\n\t */\n\tfromType(type: TimeBaseClass<any, any>): this {\n\t\tthis._units = undefined;\n\t\tswitch (this.defaultUnits) {\n\t\t\tcase \"s\":\n\t\t\t\tthis._val = type.toSeconds();\n\t\t\t\tbreak;\n\t\t\tcase \"i\":\n\t\t\t\tthis._val = type.toTicks();\n\t\t\t\tbreak;\n\t\t\tcase \"hz\":\n\t\t\t\tthis._val = type.toFrequency();\n\t\t\t\tbreak;\n\t\t\tcase \"midi\":\n\t\t\t\tthis._val = type.toMidi();\n\t\t\t\tbreak;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Return the value in seconds\n\t */\n\tabstract toSeconds(): Seconds;\n\n\t/**\n\t *  Return the value as a Midi note\n\t */\n\tabstract toMidi(): MidiNote;\n\n\t/**\n\t * Convert the value into ticks\n\t */\n\tabstract toTicks(): Ticks;\n\n\t/**\n\t *  Return the value in hertz\n\t */\n\ttoFrequency(): Hertz {\n\t\treturn 1 / this.toSeconds();\n\t}\n\n\t/**\n\t *  Return the time in samples\n\t */\n\ttoSamples(): Samples {\n\t\treturn this.toSeconds() * this.context.sampleRate;\n\t}\n\n\t/**\n\t *  Return the time in milliseconds.\n\t */\n\ttoMilliseconds(): Milliseconds {\n\t\treturn this.toSeconds() * 1000;\n\t}\n}\n","import { getContext } from \"../Global\";\nimport { ftom } from \"./Conversions\";\nimport { TimeBaseClass, TimeBaseUnit, TimeExpression, TimeValue } from \"./TimeBase\";\n\n/**\n * TimeClass is a primitive type for encoding and decoding Time values.\n * TimeClass can be passed into the parameter of any method which takes time as an argument.\n * @param  val    The time value.\n * @param  units  The units of the value.\n * @example\n * var t = Time(\"4n\");//a quarter note\n */\nexport class TimeClass<Type extends Seconds | Ticks = Seconds, Unit extends string = TimeBaseUnit>\nextends TimeBaseClass<Type, Unit> {\n\n\tname = \"Time\";\n\n\tprotected _getExpressions(): TimeExpression<Type> {\n\t\treturn Object.assign(super._getExpressions(), {\n\t\t\tnow: {\n\t\t\t\tmethod: (capture: string): Type => {\n\t\t\t\t\treturn this._now() + new (this.constructor as typeof TimeClass)(this.context, capture).valueOf() as Type;\n\t\t\t\t},\n\t\t\t\tregexp: /^\\+(.+)/,\n\t\t\t},\n\t\t\tquantize: {\n\t\t\t\tmethod: (capture: string): Type => {\n\t\t\t\t\tconst quantTo = new TimeClass(this.context, capture).valueOf();\n\t\t\t\t\treturn this._secondsToUnits(this.context.transport.nextSubdivision(quantTo));\n\t\t\t\t},\n\t\t\t\tregexp: /^@(.+)/,\n\t\t\t},\n\t\t});\n\t}\n\n\t/**\n\t * Quantize the time by the given subdivision. Optionally add a\n\t * percentage which will move the time value towards the ideal\n\t * quantized value by that percentage.\n\t * @param  val    The subdivision to quantize to\n\t * @param  percent  Move the time value towards the quantized value by a percentage.\n\t * @example\n\t * Time(21).quantize(2) //returns 22\n\t * Time(0.6).quantize(\"4n\", 0.5) //returns 0.55\n\t */\n\tquantize(subdiv: number | Subdivision | TimeObject, percent = 1): Type {\n\t\tconst subdivision = new (this.constructor as typeof TimeClass)(this.context, subdiv).valueOf();\n\t\tconst value = this.valueOf();\n\t\tconst multiple = Math.round(value / subdivision);\n\t\tconst ideal = multiple * subdivision;\n\t\tconst diff = ideal - value;\n\t\treturn value + diff * percent as Type;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// CONVERSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\t/**\n\t *  Convert a Time to Notation. The notation values are will be the\n\t *  closest representation between 1m to 128th note.\n\t *  @return {Notation}\n\t *  @example\n\t * //if the Transport is at 120bpm:\n\t * Time(2).toNotation();//returns \"1m\"\n\t */\n\ttoNotation(): Subdivision {\n\t\tconst time = this.toSeconds();\n\t\tconst testNotations: Subdivision[] = [\"1m\"];\n\t\tfor (let power = 1; power < 9; power++) {\n\t\t\tconst subdiv = Math.pow(2, power);\n\t\t\ttestNotations.push(subdiv + \"n.\" as Subdivision);\n\t\t\ttestNotations.push(subdiv + \"n\" as Subdivision);\n\t\t\ttestNotations.push(subdiv + \"t\" as Subdivision);\n\t\t}\n\t\ttestNotations.push(\"0\");\n\t\t// find the closets notation representation\n\t\tlet closest = testNotations[0];\n\t\tlet closestSeconds = new TimeClass(this.context, testNotations[0]).toSeconds();\n\t\ttestNotations.forEach(notation => {\n\t\t\tconst notationSeconds = new TimeClass(this.context, notation).toSeconds();\n\t\t\tif (Math.abs(notationSeconds - time) < Math.abs(closestSeconds - time)) {\n\t\t\t\tclosest = notation;\n\t\t\t\tclosestSeconds = notationSeconds;\n\t\t\t}\n\t\t});\n\t\treturn closest;\n\t}\n\n\t/**\n\t *  Return the time encoded as Bars:Beats:Sixteenths.\n\t */\n\ttoBarsBeatsSixteenths(): BarsBeatsSixteenths {\n\t\tconst quarterTime = this._beatsToUnits(1);\n\t\tlet quarters = this.valueOf() / quarterTime;\n\t\tquarters = parseFloat(quarters.toFixed(4));\n\t\tconst measures = Math.floor(quarters / this._getTimeSignature());\n\t\tlet sixteenths = (quarters % 1) * 4;\n\t\tquarters = Math.floor(quarters) % this._getTimeSignature();\n\t\tconst sixteenthString = sixteenths.toString();\n\t\tif (sixteenthString.length > 3) {\n\t\t\t// the additional parseFloat removes insignificant trailing zeroes\n\t\t\tsixteenths = parseFloat(parseFloat(sixteenthString).toFixed(3));\n\t\t}\n\t\tconst progress = [measures, quarters, sixteenths];\n\t\treturn progress.join(\":\");\n\t}\n\n\t/**\n\t *  Return the time in ticks.\n\t */\n\ttoTicks(): Ticks {\n\t\tconst quarterTime = this._beatsToUnits(1);\n\t\tconst quarters = this.valueOf() / quarterTime;\n\t\treturn Math.round(quarters * this._getPPQ());\n\t}\n\n\t/**\n\t *  Return the time in seconds.\n\t */\n\ttoSeconds(): Seconds {\n\t\treturn this.valueOf();\n\t}\n\n\t/**\n\t *  Return the value as a midi note.\n\t */\n\ttoMidi(): MidiNote {\n\t\treturn ftom(this.toFrequency());\n\t}\n\n\tprotected _now(): Type {\n\t\treturn this.context.now() as Type;\n\t}\n}\n\n/**\n * Create a TimeClass from a time string or number.\n * @param value A value which reprsents time\n * @param units The value's units if they can't be inferred by the value.\n */\nexport function Time(value?: TimeValue, units?: TimeBaseUnit): TimeClass<Seconds> {\n\treturn new TimeClass(getContext(), value, units);\n}\n","import { getContext } from \"../Global\";\nimport { intervalToFrequencyRatio, mtof } from \"./Conversions\";\nimport { ftom, getA4, setA4 } from \"./Conversions\";\nimport { TimeClass } from \"./Time\";\nimport { TimeBaseClass, TimeBaseUnit, TimeExpression, TimeValue } from \"./TimeBase\";\n\nexport type FrequencyUnit = TimeBaseUnit | \"midi\";\n\n/**\n * Frequency is a primitive type for encoding Frequency values.\n * Eventually all time values are evaluated to hertz using the `eval` method.\n * @example\n * Frequency(\"C3\") // 261\n * Frequency(38, \"midi\") //\n * Frequency(\"C3\").transpose(4);\n */\nexport class FrequencyClass<Type extends number = Hertz> extends TimeClass<Type, FrequencyUnit> {\n\n\tname = \"Frequency\";\n\n\treadonly defaultUnits: FrequencyUnit = \"hz\";\n\n\t/**\n\t * The [concert tuning pitch](https://en.wikipedia.org/wiki/Concert_pitch) which is used\n\t * to generate all the other pitch values from notes. A4's values in Hertz.\n\t */\n\tstatic get A4(): Hertz {\n\t\treturn getA4();\n\t}\n\tstatic set A4(freq: Hertz) {\n\t\tsetA4(freq);\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tAUGMENT BASE EXPRESSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\tprotected _getExpressions(): TimeExpression<Type> {\n\t\treturn Object.assign({}, super._getExpressions(), {\n\t\t\tmidi : {\n\t\t\t\tregexp : /^(\\d+(?:\\.\\d+)?midi)/,\n\t\t\t\tmethod(value): number {\n\t\t\t\t\tif (this.defaultUnits === \"midi\") {\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn FrequencyClass.mtof(value);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\tnote : {\n\t\t\t\tregexp : /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i,\n\t\t\t\tmethod(pitch, octave): number {\n\t\t\t\t\tconst index = noteToScaleIndex[pitch.toLowerCase()];\n\t\t\t\t\tconst noteNumber = index + (parseInt(octave, 10) + 1) * 12;\n\t\t\t\t\tif (this.defaultUnits === \"midi\") {\n\t\t\t\t\t\treturn noteNumber;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn FrequencyClass.mtof(noteNumber);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\ttr : {\n\t\t\t\tregexp : /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?/,\n\t\t\t\tmethod(m, q, s): number {\n\t\t\t\t\tlet total = 1;\n\t\t\t\t\tif (m && m !== \"0\") {\n\t\t\t\t\t\ttotal *= this._beatsToUnits(this._getTimeSignature() * parseFloat(m));\n\t\t\t\t\t}\n\t\t\t\t\tif (q && q !== \"0\") {\n\t\t\t\t\t\ttotal *= this._beatsToUnits(parseFloat(q));\n\t\t\t\t\t}\n\t\t\t\t\tif (s && s !== \"0\") {\n\t\t\t\t\t\ttotal *= this._beatsToUnits(parseFloat(s) / 4);\n\t\t\t\t\t}\n\t\t\t\t\treturn total;\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tEXPRESSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Transposes the frequency by the given number of semitones.\n\t *  @return  A new transposed frequency\n\t *  @example\n\t * Frequency(\"A4\").transpose(3); //\"C5\"\n\t */\n\ttranspose(interval: Interval): FrequencyClass {\n\t\treturn new FrequencyClass(this.context, this.valueOf() * intervalToFrequencyRatio(interval));\n\t}\n\n\t/**\n\t *  Takes an array of semitone intervals and returns\n\t *  an array of frequencies transposed by those intervals.\n\t *  @return  Returns an array of Frequencies\n\t *  @example\n\t * Frequency(\"A4\").harmonize([0, 3, 7]); //[\"A4\", \"C5\", \"E5\"]\n\t */\n\tharmonize(intervals: Interval[]): FrequencyClass[] {\n\t\treturn intervals.map(interval => {\n\t\t\treturn this.transpose(interval);\n\t\t});\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tUNIT CONVERSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Return the value of the frequency as a MIDI note\n\t *  @return  {MIDI}\n\t *  @example\n\t * Frequency(\"C4\").toMidi(); //60\n\t */\n\ttoMidi(): MidiNote {\n\t\treturn ftom(this.valueOf());\n\t}\n\n\t/**\n\t *  Return the value of the frequency in Scientific Pitch Notation\n\t *  @return  {Note}\n\t *  @example\n\t * Frequency(69, \"midi\").toNote(); //\"A4\"\n\t */\n\ttoNote(): Note {\n\t\tconst freq = this.toFrequency();\n\t\tconst log = Math.log2(freq / FrequencyClass.A4);\n\t\tlet noteNumber = Math.round(12 * log) + 57;\n\t\tconst octave = Math.floor(noteNumber / 12);\n\t\tif (octave < 0) {\n\t\t\tnoteNumber += -12 * octave;\n\t\t}\n\t\tconst noteName = scaleIndexToNote[noteNumber % 12];\n\t\treturn noteName + octave.toString();\n\t}\n\n\t/**\n\t *  Return the duration of one cycle in seconds.\n\t */\n\ttoSeconds(): Seconds {\n\t\treturn 1 / super.toSeconds();\n\t}\n\n\t/**\n\t *  Return the duration of one cycle in ticks\n\t */\n\ttoTicks(): Ticks {\n\t\tconst quarterTime = this._beatsToUnits(1);\n\t\tconst quarters = this.valueOf() / quarterTime;\n\t\treturn Math.floor(quarters * this._getPPQ());\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tUNIT CONVERSIONS HELPERS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  With no arguments, return 0\n\t */\n\tprotected _noArg(): Type {\n\t\treturn 0 as Type;\n\t}\n\n\t/**\n\t *  Returns the value of a frequency in the current units\n\t */\n\tprotected _frequencyToUnits(freq: Hertz): Type {\n\t\treturn freq as Type;\n\t}\n\n\t/**\n\t *  Returns the value of a tick in the current time units\n\t */\n\tprotected _ticksToUnits(ticks: Ticks): Type {\n\t\treturn 1 / ((ticks * 60) / (this._getBpm() * this._getPPQ())) as Type;\n\t}\n\n\t/**\n\t *  Return the value of the beats in the current units\n\t */\n\tprotected _beatsToUnits(beats: number): Type {\n\t\treturn 1 / super._beatsToUnits(beats) as Type;\n\t}\n\n\t/**\n\t *  Returns the value of a second in the current units\n\t */\n\tprotected _secondsToUnits(seconds: Seconds): Type {\n\t\treturn 1 / seconds as Type;\n\t}\n\n\t/**\n\t * Convert a MIDI note to frequency value.\n\t * @param  midi The midi number to convert.\n\t * @return The corresponding frequency value\n\t * @example\n\t * FrequencyClass.mtof(69); // returns 440\n\t */\n\tstatic mtof(midi: MidiNote): Hertz {\n\t\treturn mtof(midi);\n\t}\n\n\t/**\n\t * Convert a frequency value to a MIDI note.\n\t * @param frequency The value to frequency value to convert.\n\t * @example\n\t * Frequency.ftom(440); // returns 69\n\t */\n\tstatic ftom(frequency: Hertz): MidiNote {\n\t\treturn ftom(frequency);\n\t}\n}\n\n///////////////////////////////////////////////////////////////////////////\n// \tFREQUENCY CONVERSIONS\n///////////////////////////////////////////////////////////////////////////\n\n/**\n *  Note to scale index\n *  @type  {Object}\n *  @private\n */\nconst noteToScaleIndex = {\n\t// tslint:disable-next-line\n\t\"cbb\" : -2, \"cb\" : -1, \"c\" : 0, \"c#\" : 1, \"cx\" : 2,\n\t\"dbb\" : 0, \"db\" : 1, \"d\" : 2, \"d#\" : 3, \"dx\" : 4,\n\t\"ebb\" : 2, \"eb\" : 3, \"e\" : 4, \"e#\" : 5, \"ex\" : 6,\n\t\"fbb\" : 3, \"fb\" : 4, \"f\" : 5, \"f#\" : 6, \"fx\" : 7,\n\t\"gbb\" : 5, \"gb\" : 6, \"g\" : 7, \"g#\" : 8, \"gx\" : 9,\n\t\"abb\" : 7, \"ab\" : 8, \"a\" : 9, \"a#\" : 10, \"ax\" : 11,\n\t\"bbb\" : 9, \"bb\" : 10, \"b\" : 11, \"b#\" : 12, \"bx\" : 13,\n};\n\n/**\n *  scale index to note (sharps)\n *  @type  {Array}\n *  @private\n */\nconst scaleIndexToNote = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n\n/**\n * Convert a value into a FrequencyClass object.\n */\nexport function Frequency(value?: TimeValue | Frequency, units?: FrequencyUnit): FrequencyClass {\n\treturn new FrequencyClass(getContext(), value, units);\n}\n","import { getContext } from \"../Global\";\nimport { TimeClass } from \"./Time\";\nimport { TimeBaseUnit, TimeValue } from \"./TimeBase\";\n\n/**\n * TransportTime is a the time along the Transport's\n * timeline. It is similar to Tone.Time, but instead of evaluating\n * against the AudioContext's clock, it is evaluated against\n * the Transport's position. See [TransportTime wiki](https://github.com/Tonejs/Tone.js/wiki/TransportTime).\n */\nexport class TransportTimeClass<Type extends Seconds | Ticks = Seconds> extends TimeClass<Type> {\n\n\tname = \"TransportTime\";\n\n\t/**\n\t * Return the current time in whichever context is relevant\n\t */\n\tprotected _now(): Type {\n\t\treturn this.context.transport.seconds as Type;\n\t}\n}\n\n/**\n * TransportTime is a the time along the Transport's\n * timeline. It is similar to Tone.Time, but instead of evaluating\n * against the AudioContext's clock, it is evaluated against\n * the Transport's position. See [TransportTime wiki](https://github.com/Tonejs/Tone.js/wiki/TransportTime).\n */\nexport function TransportTime(value?: TimeValue, units?: TimeBaseUnit): TransportTimeClass {\n\treturn new TransportTimeClass(getContext(), value, units);\n}\n","import { getContext } from \"../Global\";\nimport { Tone } from \"../Tone\";\nimport { FrequencyClass } from \"../type/Frequency\";\nimport { TimeClass } from \"../type/Time\";\nimport { TransportTimeClass } from \"../type/TransportTime\";\nimport \"../type/Units\";\nimport { getDefaultsFromInstance, omitFromObject, optionsFromArguments } from \"../util/Defaults\";\nimport { RecursivePartial } from \"../util/Interface\";\nimport { isArray, isBoolean, isDefined, isNumber, isString, isUndef } from \"../util/TypeCheck\";\nimport { Context } from \"./Context\";\n\n/**\n * A unit which process audio\n */\nexport interface ToneWithContextOptions {\n\tcontext: Context;\n}\n\n/**\n * The Base class for all nodes that have an AudioContext.\n */\nexport abstract class ToneWithContext<Options extends ToneWithContextOptions> extends Tone {\n\n\t/**\n\t * The context belonging to the node.\n\t */\n\treadonly context: Context;\n\n\t/**\n\t * The default context to use if no AudioContext is passed in to the constructor\n\t */\n\treadonly defaultContext?: Context;\n\n\tconstructor(context?: Context | Partial<ToneWithContextOptions>) {\n\t\tconst options = optionsFromArguments(ToneWithContext.getDefaults(), arguments, [\"context\"]);\n\t\tsuper();\n\t\tif (this.defaultContext) {\n\t\t\tthis.context = this.defaultContext;\n\t\t} else {\n\t\t\tthis.context = options.context;\n\t\t}\n\t}\n\n\tstatic getDefaults(): ToneWithContextOptions {\n\t\treturn {\n\t\t\tcontext: getContext(),\n\t\t};\n\t}\n\n\t/**\n\t * Return the current time of the Context clock plus the lookAhead.\n\t */\n\tnow(): Seconds {\n\t\treturn this.context.currentTime + this.context.lookAhead;\n\t}\n\n\t/**\n\t * Return the current time of the Context clock without any lookAhead.\n\t */\n\timmediate(): Seconds {\n\t\treturn this.context.currentTime;\n\t}\n\n\t/**\n\t * The duration in seconds of one sample.\n\t */\n\tget sampleTime(): Seconds {\n\t\treturn 1 / this.context.sampleRate;\n\t}\n\n\t/**\n\t * The number of seconds of 1 processing block (128 samples)\n\t */\n\tget blockTime(): Seconds {\n\t\treturn 128 / this.context.sampleRate;\n\t}\n\n\t/**\n\t * Convert the incoming time to seconds\n\t */\n\ttoSeconds(time?: Time): Seconds {\n\t\treturn new TimeClass(this.context, time).toSeconds();\n\t}\n\n\t/**\n\t * Convert the input to a frequency number\n\t */\n\ttoFrequency(freq: Frequency): Hertz {\n\t\treturn new FrequencyClass(this.context, freq).toFrequency();\n\t}\n\n\t/**\n\t * Convert the input time into ticks\n\t */\n\ttoTicks(time?: Time | TimeClass): Ticks {\n\t\treturn new TransportTimeClass(this.context, time).toTicks();\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tGET/SET\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Get the object's attributes.\n\t * @example\n\t * osc.get();\n\t * //returns {\"type\" : \"sine\", \"frequency\" : 440, ...etc}\n\t */\n\tget(): Options {\n\t\tconst defaults = getDefaultsFromInstance(this) as Options;\n\t\tObject.keys(defaults).forEach(attribute => {\n\t\t\tif (Reflect.has(this, attribute)) {\n\t\t\t\tconst member = this[attribute];\n\t\t\t\tif (isDefined(member) && isDefined(member.value) && isDefined(member.setValueAtTime)) {\n\t\t\t\t\tdefaults[attribute] = member.value;\n\t\t\t\t} else if (member instanceof ToneWithContext) {\n\t\t\t\t\tdefaults[attribute] = member.get();\n\t\t\t\t// otherwise make sure it's a serializable type\n\t\t\t\t} else if (isArray(member) || isNumber(member) || isString(member) || isBoolean(member)) {\n\t\t\t\t\tdefaults[attribute] = member;\n\t\t\t\t} else {\n\t\t\t\t\t// remove all undefined and unserializable attributes\n\t\t\t\t\tdelete defaults[attribute];\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn defaults;\n\t}\n\n\t/**\n\t * Set the parameters at once. Either pass in an\n\t * object mapping parameters to values, or to set a\n\t * single parameter, by passing in a string and value.\n\t * The last argument is an optional ramp time which\n\t * will ramp any signal values to their destination value\n\t * over the duration of the rampTime.\n\t * @param  params\n\t * @example\n\t * //set values using an object\n\t * filter.set({\n\t * \t\"frequency\" : 300,\n\t * \t\"type\" : \"highpass\"\n\t * });\n\t */\n\tset(props: RecursivePartial<Options>): this {\n\t\tObject.keys(props).forEach(attribute => {\n\t\t\tif (Reflect.has(this, attribute) && isDefined(this[attribute])) {\n\t\t\t\tif (this[attribute] && isDefined(this[attribute].value) && isDefined(this[attribute].setValueAtTime)) {\n\t\t\t\t\tthis[attribute].value = props[attribute];\n\t\t\t\t} else if (this[attribute] instanceof ToneWithContext) {\n\t\t\t\t\tthis[attribute].set(props[attribute]);\n\t\t\t\t} else {\n\t\t\t\t\tthis[attribute] = props[attribute];\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n}\n","import { AbstractParam } from \"../context/AbstractParam\";\nimport { dbToGain, gainToDb } from \"../type/Conversions\";\nimport \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isDefined, isNumber } from \"../util/TypeCheck\";\nimport { ToneWithContext, ToneWithContextOptions } from \"./ToneWithContext\";\n\nexport interface ParamOptions extends ToneWithContextOptions {\n\tunits: UnitName;\n\tvalue?: any;\n\tparam: AudioParam;\n\tconvert: boolean;\n}\n\n/**\n * the possible automation types\n */\ntype AutomationType = \"linear\" | \"exponential\" | \"setValue\" | \"setTarget\" | \"cancel\";\n\n/**\n * The events on the automation\n */\nexport interface AutomationEvent {\n\ttype: AutomationType;\n\ttime: number;\n\tvalue: number;\n\tconstant?: number;\n}\n\n/**\n *  Param wraps the native Web Audio's AudioParam to provide\n * additional unit conversion functionality. It also\n * serves as a base-class for classes which have a single,\n * automatable parameter.\n */\nexport class Param<Type extends Unit = number>\nextends ToneWithContext<ParamOptions>\nimplements AbstractParam<Type> {\n\n\tname = \"Param\";\n\n\tstatic getDefaults(): ParamOptions {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tconvert: true,\n\t\t\tunits: \"number\" as UnitName,\n\t\t} as ParamOptions);\n\t}\n\n\t/**\n\t * The input connection\n\t */\n\treadonly input: AudioParam;\n\treadonly units: UnitName;\n\tconvert: boolean;\n\toverridden: boolean = false;\n\n\t/**\n\t * The timeline which tracks all of the automations.\n\t */\n\tprotected _events: Timeline<AutomationEvent>;\n\n\t/**\n\t *  The native parameter to control\n\t */\n\tprotected _param: AudioParam;\n\n\t/**\n\t *  The default value before anything is assigned\n\t */\n\tprotected _initialValue: number;\n\n\t/**\n\t *  The minimum output value\n\t */\n\tprivate _minOutput = 1e-5;\n\n\tconstructor(param: AudioParam, units?: Unit, convert?: boolean);\n\tconstructor(options: Partial<ParamOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Param.getDefaults(), arguments, [\"param\", \"units\", \"convert\"]));\n\n\t\tconst options = optionsFromArguments(Param.getDefaults(), arguments, [\"param\", \"units\", \"convert\"]);\n\n\t\tthis.assert(isDefined(options.param) && options.param instanceof AudioParam, \"param must be an AudioParam\");\n\n\t\t// initialize\n\t\tthis._param = this.input = options.param;\n\t\tthis._events = new Timeline<AutomationEvent>(1000);\n\t\tthis._initialValue = this._param.value;\n\t\tthis.units = options.units;\n\t\tthis.convert = options.convert;\n\n\t\t// if the value is defined, set it immediately\n\t\tif (isDefined(options.value)) {\n\t\t\tthis.setValueAtTime(options.value, 0);\n\t\t}\n\t}\n\n\tget value(): Type {\n\t\tconst now = this.now();\n\t\treturn this.getValueAtTime(now);\n\t}\n\tset value(value: Type) {\n\t\tthis._initialValue = this._fromType(value);\n\t\tthis.cancelScheduledValues(this.now());\n\t\tthis.setValueAtTime(value, this.now());\n\t}\n\n\tget minValue(): number {\n\t\tif (this.units === \"time\" || this.units === \"frequency\" ||\n\t\t\tthis.units === \"normalRange\" || this.units === \"positive\" ||\n\t\t\tthis.units === \"transportTime\" || this.units === \"ticks\" ||\n\t\t\tthis.units === \"bpm\" || this.units === \"hertz\" || this.units === \"samples\") {\n\t\t\treturn 0;\n\t\t} else if (this.units === \"audioRange\") {\n\t\t\treturn -1;\n\t\t} else if (this.units === \"decibels\") {\n\t\t\treturn -Infinity;\n\t\t} else {\n\t\t\treturn this._param.minValue;\n\t\t}\n\t}\n\n\tget maxValue(): number {\n\t\tif (this.units === \"normalRange\" ||\n\t\t\tthis.units === \"audioRange\") {\n\t\t\treturn 1;\n\t\t} else {\n\t\t\treturn this._param.maxValue;\n\t\t}\n\t}\n\n\t/**\n\t * Type guard based on the unit name\n\t */\n\tprivate _is<T>(arg: any, type: UnitName): arg is T {\n\t\treturn this.units === type;\n\t}\n\n\t/**\n\t *  Convert the given value from the type specified by Param.units\n\t *  into the destination value (such as Gain or Frequency).\n\t */\n\tprotected _fromType(val: Type): number {\n\t\tif (this.convert && !this.overridden) {\n\t\t\tif (this._is<Time>(val, \"time\")) {\n\t\t\t\treturn this.toSeconds(val);\n\t\t\t} else if (this._is<Decibels>(val, \"decibels\")) {\n\t\t\t\treturn dbToGain(val);\n\t\t\t} else if (this._is<Frequency>(val, \"frequency\")) {\n\t\t\t\treturn this.toFrequency(val);\n\t\t\t} else if (this._is<NormalRange>(val, \"normalRange\")) {\n\t\t\t\treturn Math.min(Math.max(val, 0), 1);\n\t\t\t} else if (this._is<AudioRange>(val, \"audioRange\")) {\n\t\t\t\treturn Math.min(Math.max(val, -1), 1);\n\t\t\t} else if (this._is<Positive>(val, \"positive\")) {\n\t\t\t\treturn Math.max(val, 0);\n\t\t\t} else if (this._is<number>(val, \"number\")) {\n\t\t\t\treturn val;\n\t\t\t} else {\n\t\t\t\treturn val as number;\n\t\t\t}\n\t\t} else {\n\t\t\treturn val as number;\n\t\t}\n\t}\n\n\t/**\n\t * Convert the parameters value into the units specified by Param.units.\n\t */\n\tprotected _toType(val: number): Type {\n\t\tif (this.convert && this.units === \"decibels\") {\n\t\t\treturn gainToDb(val) as Type;\n\t\t} else {\n\t\t\treturn val as Type;\n\t\t}\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// ABSTRACT PARAM INTERFACE\n\t// all docs are generated from ParamInterface.ts\n\t///////////////////////////////////////////////////////////////////////////\n\n\tsetValueAtTime(value: Type, time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst numericValue = this._fromType(value);\n\t\tthis._events.add({\n\t\t\ttime: computedTime,\n\t\t\ttype: \"setValue\",\n\t\t\tvalue: numericValue,\n\t\t});\n\t\tthis.log(\"setValue\", value, computedTime);\n\t\tthis.assert(isFinite(numericValue) && isFinite(computedTime),\n\t\t\t`Invalid argument(s) to setValueAtTime: ${JSON.stringify(value)}, ${JSON.stringify(time)}`);\n\t\tthis._param.setValueAtTime(numericValue, computedTime);\n\t\treturn this;\n\t}\n\n\tgetValueAtTime(time: Time): Type {\n\t\tconst computedTime = Math.max(this.toSeconds(time), 0);\n\t\tconst after = this._events.getAfter(computedTime);\n\t\tconst before = this._events.get(computedTime);\n\t\tlet value = this._initialValue;\n\t\t// if it was set by\n\t\tif (before === null) {\n\t\t\tvalue = this._initialValue;\n\t\t} else if (before.type === \"setTarget\" && (after === null || after.type === \"setValue\")) {\n\t\t\tconst previous = this._events.getBefore(before.time);\n\t\t\tlet previousVal;\n\t\t\tif (previous === null) {\n\t\t\t\tpreviousVal = this._initialValue;\n\t\t\t} else {\n\t\t\t\tpreviousVal = previous.value;\n\t\t\t}\n\t\t\tif (isDefined(before.constant)) {\n\t\t\t\tvalue = this._exponentialApproach(before.time, previousVal, before.value, before.constant, computedTime);\n\t\t\t}\n\t\t} else if (after === null) {\n\t\t\tvalue = before.value;\n\t\t} else if (after.type === \"linear\" || after.type === \"exponential\") {\n\t\t\tlet beforeValue = before.value;\n\t\t\tif (before.type === \"setTarget\") {\n\t\t\t\tconst previous = this._events.getBefore(before.time);\n\t\t\t\tif (previous === null) {\n\t\t\t\t\tbeforeValue = this._initialValue;\n\t\t\t\t} else {\n\t\t\t\t\tbeforeValue = previous.value;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (after.type === \"linear\") {\n\t\t\t\tvalue = this._linearInterpolate(before.time, beforeValue, after.time, after.value, computedTime);\n\t\t\t} else {\n\t\t\t\tvalue = this._exponentialInterpolate(before.time, beforeValue, after.time, after.value, computedTime);\n\t\t\t}\n\t\t} else {\n\t\t\tvalue = before.value;\n\t\t}\n\t\treturn this._toType(value);\n\t}\n\n\tsetRampPoint(time: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tlet currentVal = this.getValueAtTime(time);\n\t\tthis.cancelAndHoldAtTime(time);\n\t\tif (this._fromType(currentVal) === 0) {\n\t\t\tcurrentVal = this._toType(this._minOutput);\n\t\t}\n\t\tthis.setValueAtTime(currentVal, time);\n\t\treturn this;\n\t}\n\n\tlinearRampToValueAtTime(value: Type, endTime: Time): this {\n\t\tconst numericValue = this._fromType(value);\n\t\tconst computedTime = this.toSeconds(endTime);\n\t\tthis._events.add({\n\t\t\ttime: computedTime,\n\t\t\ttype: \"linear\",\n\t\t\tvalue : numericValue,\n\t\t});\n\t\tthis.log(\"linear\", value, computedTime);\n\t\tthis.assert(isFinite(numericValue) && isFinite(computedTime),\n\t\t\t`Invalid argument(s) to linearRampToValueAtTime: ${JSON.stringify(value)}, ${JSON.stringify(endTime)}`);\n\t\tthis._param.linearRampToValueAtTime(numericValue, computedTime);\n\t\treturn this;\n\t}\n\n\texponentialRampToValueAtTime(value: Type, endTime: Time): this {\n\t\tlet numericValue = this._fromType(value);\n\t\tnumericValue = Math.max(this._minOutput, numericValue);\n\t\tconst computedTime = this.toSeconds(endTime);\n\t\t// store the event\n\t\tthis._events.add({\n\t\t\ttime: computedTime,\n\t\t\ttype: \"exponential\",\n\t\t\tvalue : numericValue,\n\t\t});\n\t\tthis.log(\"exponential\", value, computedTime);\n\t\tthis.assert(isFinite(numericValue) && isFinite(computedTime),\n\t\t\t`Invalid argument(s) to exponentialRampToValueAtTime: ${JSON.stringify(value)}, ${JSON.stringify(endTime)}`);\n\t\tthis._param.exponentialRampToValueAtTime(numericValue, computedTime);\n\t\treturn this;\n\t}\n\n\texponentialRampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tstartTime = this.toSeconds(startTime);\n\t\tthis.setRampPoint(startTime);\n\t\tthis.exponentialRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n\t\treturn this;\n\t}\n\n\tlinearRampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tstartTime = this.toSeconds(startTime);\n\t\tthis.setRampPoint(startTime);\n\t\tthis.linearRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n\t\treturn this;\n\t}\n\n\ttargetRampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tstartTime = this.toSeconds(startTime);\n\t\tthis.setRampPoint(startTime);\n\t\tthis.exponentialApproachValueAtTime(value, startTime, rampTime);\n\t\treturn this;\n\t}\n\n\texponentialApproachValueAtTime(value: Type, time: Time, rampTime: Time): this {\n\t\tconst timeConstant = Math.log(this.toSeconds(rampTime) + 1) / Math.log(200);\n\t\ttime = this.toSeconds(time);\n\t\treturn this.setTargetAtTime(value, time, timeConstant);\n\t}\n\n\tsetTargetAtTime(value: Type, startTime: Time, timeConstant: Positive): this {\n\t\tconst numericValue = this._fromType(value);\n\t\t// The value will never be able to approach without timeConstant > 0.\n\t\tthis.assert(isFinite(timeConstant) && timeConstant > 0, \"timeConstant must be a number greater than 0\");\n\t\tconst computedTime = this.toSeconds(startTime);\n\t\tthis._events.add({\n\t\t\tconstant: timeConstant,\n\t\t\ttime: computedTime,\n\t\t\ttype: \"setTarget\",\n\t\t\tvalue: numericValue,\n\t\t});\n\t\tthis.log(\"setTarget\", value, computedTime, timeConstant);\n\t\tthis.assert(isFinite(numericValue) && isFinite(computedTime),\n\t\t\t`Invalid argument(s) to setTargetAtTime: ${JSON.stringify(value)}, ${JSON.stringify(startTime)}`);\n\t\tthis._param.setTargetAtTime(numericValue, computedTime, timeConstant);\n\t\treturn this;\n\t}\n\n\tsetValueCurveAtTime(values: Type[], startTime: Time, duration: Time, scaling: number = 1): this {\n\t\tduration = this.toSeconds(duration);\n\t\tstartTime = this.toSeconds(startTime);\n\t\tconst startingValue = this._fromType(values[0]) * scaling;\n\t\tthis.setValueAtTime(this._toType(startingValue), startTime);\n\t\tconst segTime = duration / (values.length - 1);\n\t\tfor (let i = 1; i < values.length; i++) {\n\t\t\tconst numericValue = this._fromType(values[i]) * scaling;\n\t\t\tthis.linearRampToValueAtTime(this._toType(numericValue), startTime + i * segTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\tcancelScheduledValues(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._events.cancel(computedTime);\n\t\tthis.assert(isFinite(computedTime), `Invalid argument to cancelScheduledValues: ${JSON.stringify(time)}`);\n\t\tthis._param.cancelScheduledValues(computedTime);\n\t\tthis.log(\"cancel\", computedTime);\n\t\treturn this;\n\t}\n\n\tcancelAndHoldAtTime(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst valueAtTime = this._fromType(this.getValueAtTime(computedTime));\n\t\tthis.log(\"cancelAndHoldAtTime\", computedTime, \"value=\" + valueAtTime);\n\n\t\t// remove the schedule events\n\t\tthis.assert(isFinite(computedTime), `Invalid argument to cancelAndHoldAtTime: ${JSON.stringify(time)}`);\n\t\tthis._param.cancelScheduledValues(computedTime);\n\n\t\t// if there is an event at the given computedTime\n\t\t// and that even is not a \"set\"\n\t\tconst before = this._events.get(computedTime);\n\t\tconst after = this._events.getAfter(computedTime);\n\t\tif (before && before.time === computedTime) {\n\t\t\t// remove everything after\n\t\t\tif (after) {\n\t\t\t\tthis._events.cancel(after.time);\n\t\t\t} else {\n\t\t\t\tthis._events.cancel(computedTime + this.sampleTime);\n\t\t\t}\n\t\t} else if (after) {\n\t\t\t// cancel the next event(s)\n\t\t\tthis._events.cancel(after.time);\n\t\t\tif (after.type === \"linear\") {\n\t\t\t\tthis.linearRampToValueAtTime(this._toType(valueAtTime), computedTime);\n\t\t\t} else if (after.type === \"exponential\") {\n\t\t\t\tthis.exponentialRampToValueAtTime(this._toType(valueAtTime), computedTime);\n\t\t\t}\n\t\t}\n\n\t\t// set the value at the given time\n\t\tthis._events.add({\n\t\t\ttime: computedTime,\n\t\t\ttype: \"setValue\",\n\t\t\tvalue: valueAtTime,\n\t\t});\n\t\tthis._param.setValueAtTime(valueAtTime, computedTime);\n\t\treturn this;\n\t}\n\n\trampTo(value: Type, rampTime: Time = 0.1, startTime?: Time): this {\n\t\tif (this.units === \"frequency\" || this.units === \"bpm\" || this.units === \"decibels\") {\n\t\t\tthis.exponentialRampTo(value, rampTime, startTime);\n\t\t} else {\n\t\t\tthis.linearRampTo(value, rampTime, startTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._events.dispose();\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tAUTOMATION CURVE CALCULATIONS\n\t// \tMIT License, copyright (c) 2014 Jordan Santell\n\t///////////////////////////////////////////////////////////////////////////\n\n\t// Calculates the the value along the curve produced by setTargetAtTime\n\tprotected _exponentialApproach(t0: number, v0: number, v1: number, timeConstant: number, t: number): number {\n\t\treturn v1 + (v0 - v1) * Math.exp(-(t - t0) / timeConstant);\n\t}\n\n\t// Calculates the the value along the curve produced by linearRampToValueAtTime\n\tprotected _linearInterpolate(t0: number, v0: number, t1: number, v1: number, t: number): number {\n\t\treturn v0 + (v1 - v0) * ((t - t0) / (t1 - t0));\n\t}\n\n\t// Calculates the the value along the curve produced by exponentialRampToValueAtTime\n\tprotected _exponentialInterpolate(t0: number, v0: number, t1: number, v1: number, t: number): number {\n\t\treturn v0 * Math.pow(v1 / v0, (t - t0) / (t1 - t0));\n\t}\n}\n","import { isArray } from \"./TypeCheck\";\n\n// return an interface which excludes certain keys\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n\n/**\n *  Make the property not writable using `defineProperty`. Internal use only.\n */\nexport function readOnly(target: object, property: string | string[]): void {\n\tif (isArray(property)) {\n\t\tproperty.forEach(str => readOnly(target, str));\n\t} else {\n\t\tObject.defineProperty(target, property, {\n\t\t\tenumerable: true,\n\t\t\twritable: false,\n\t\t});\n\t}\n}\n\n/**\n *  Make an attribute writeable. Internal use only.\n */\nexport function writable(target: object, property: string | string[]): void {\n\tif (isArray(property)) {\n\t\tproperty.forEach(str => writable(target, str));\n\t} else {\n\t\tObject.defineProperty(target, property, {\n\t\t\twritable: true,\n\t\t});\n\t}\n}\n\nexport const noOp: (...args: any[]) => any = () => {\n\t// no op!\n};\n\n/**\n * Recursive Partial taken from here: https://stackoverflow.com/a/51365037\n */\nexport type RecursivePartial<T> = {\n\t[P in keyof T]?:\n\tT[P] extends Array<infer U> ? Array<RecursivePartial<U>> :\n\tT[P] extends object ? RecursivePartial<T[P]> :\n\tT[P];\n};\n","import { optionsFromArguments } from \"../util/Defaults\";\nimport { isArray, isDefined, isNumber } from \"../util/TypeCheck\";\nimport { Param } from \"./Param\";\nimport { ToneWithContext, ToneWithContextOptions } from \"./ToneWithContext\";\n\nexport type InputNode = ToneAudioNode | AudioNode | AudioParam | Param<Unit>;\nexport type OutputNode = ToneAudioNode | AudioNode;\n\nexport interface ChannelProperties {\n\tchannelCount: number;\n\tchannelCountMode: ChannelCountMode;\n\tchannelInterpretation: ChannelInterpretation;\n}\n\n/**\n * The possible options for this node\n */\nexport interface ToneAudioNodeOptions extends ToneWithContextOptions {\n\tnumberOfInputs: number;\n\tnumberOfOutputs: number;\n\tchannelCount: number;\n\tchannelCountMode: ChannelCountMode;\n\tchannelInterpretation: ChannelInterpretation;\n}\n\n/**\n *  ToneAudioNode is the base class for classes which process audio.\n */\nexport abstract class ToneAudioNode<Options extends ToneAudioNodeOptions = ToneAudioNodeOptions>\nextends ToneWithContext<Options> {\n\n\tabstract name = \"AudioNode\";\n\n\t/**\n\t * The input node or nodes. If the object is a source,\n\t * it does not have any input and this.input is undefined.\n\t */\n\tabstract input: InputNode | InputNode | undefined;\n\n\t/**\n\t * The output nodes. If the object is a sink,\n\t * it does not have any output and this.output is undefined.\n\t */\n\tabstract output: OutputNode | OutputNode | undefined;\n\n\t/**\n\t *  The number of inputs feeding into the AudioNode.\n\t *  For source nodes, this will be 0.\n\t */\n\treadonly numberOfInputs: number;\n\n\t/**\n\t *  The number of outputs of the AudioNode.\n\t */\n\treadonly numberOfOutputs: number;\n\n\t/**\n\t * List all of the node that must be set to match the ChannelProperties\n\t */\n\tprotected abstract _internalChannels: OutputNode[];\n\n\tstatic getDefaults(): ToneAudioNodeOptions {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tchannelCount: 2,\n\t\t\tchannelCountMode: \"max\" as ChannelCountMode,\n\t\t\tchannelInterpretation: \"speakers\" as ChannelInterpretation,\n\t\t\tnumberOfInputs: 0,\n\t\t\tnumberOfOutputs: 0,\n\t\t});\n\t}\n\n\tconstructor(options: ToneAudioNodeOptions) {\n\t\tsuper(options);\n\t\tthis.numberOfInputs = options.numberOfInputs;\n\t\tthis.numberOfOutputs = options.numberOfOutputs;\n\t}\n\n\tprotected createInsOuts(numberOfInputs: number = 0, numberOfOutputs: number = 0): void {\n\t\t// if (numberOfInputs === 1) {\n\t\t// \tthis.input = this.context.createGain();\n\t\t// } else if (numberOfInputs > 1) {\n\t\t// \tthis.input = [];\n\t\t// \tfor (let i = 0; i < numberOfInputs; i++) {\n\t\t// \t\tthis.input[i] = this.context.createGain();\n\t\t// \t}\n\t\t// }\n\n\t\t// if (numberOfOutputs === 1) {\n\t\t// \tthis.output = this.context.createGain();\n\t\t// } else if (numberOfOutputs > 1) {\n\t\t// \tthis.output = [];\n\t\t// \tfor (let o = 0; o < numberOfOutputs; o++) {\n\t\t// \t\tthis.output[o] = this.context.createGain();\n\t\t// \t}\n\t\t// }\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// AUDIO PROPERTIES\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Set the audio options for this node such as channelInterpretation\n\t * channelCount, etc.\n\t * @param options\n\t */\n\tprivate _setChannelProperties(options: ChannelProperties): void {\n\t\tif (this._internalChannels.length) {\n\t\t\tthis._internalChannels.forEach(node => {\n\t\t\t\tnode.channelCount = options.channelCount;\n\t\t\t\tnode.channelCountMode = options.channelCountMode;\n\t\t\t\tnode.channelInterpretation = options.channelInterpretation;\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Get the current audio options for this node such as channelInterpretation\n\t * channelCount, etc.\n\t */\n\tprivate _getChannelProperties(): ChannelProperties {\n\t\tif (this._internalChannels.length) {\n\t\t\tconst node = this._internalChannels[0];\n\t\t\treturn {\n\t\t\t\tchannelCount: node.channelCount,\n\t\t\t\tchannelCountMode: node.channelCountMode,\n\t\t\t\tchannelInterpretation: node.channelInterpretation,\n\t\t\t};\n\t\t} else {\n\t\t\t// return the defaults\n\t\t\treturn {\n\t\t\t\tchannelCount: 2,\n\t\t\t\tchannelCountMode: \"max\",\n\t\t\t\tchannelInterpretation: \"speakers\",\n\t\t\t};\n\t\t}\n\t}\n\n\t/**\n\t *  channelCount is the number of channels used when up-mixing and down-mixing\n\t *  connections to any inputs to the node. The default value is 2 except for\n\t *  specific nodes where its value is specially determined.\n\t */\n\tget channelCount(): number {\n\t\treturn this._getChannelProperties().channelCount;\n\t}\n\tset channelCount(channelCount: number) {\n\t\tconst props = this._getChannelProperties();\n\t\t// merge it with the other properties\n\t\tthis._setChannelProperties(Object.assign(props, { channelCount }));\n\t}\n\n\t/**\n\t *  channelCountMode determines how channels will be counted when up-mixing and\n\t *  down-mixing connections to any inputs to the node.\n\t *  The default value is \"max\". This attribute has no effect for nodes with no inputs.\n\t */\n\tget channelCountMode(): ChannelCountMode {\n\t\treturn this._getChannelProperties().channelCountMode;\n\t}\n\tset channelCountMode(channelCountMode: ChannelCountMode) {\n\t\tconst props = this._getChannelProperties();\n\t\t// merge it with the other properties\n\t\tthis._setChannelProperties(Object.assign(props, { channelCountMode }));\n\t}\n\n\t/**\n\t *  channelInterpretation determines how individual channels will be treated\n\t *  when up-mixing and down-mixing connections to any inputs to the node.\n\t *  The default value is \"speakers\".\n\t */\n\tget channelInterpretation(): ChannelInterpretation {\n\t\treturn this._getChannelProperties().channelInterpretation;\n\t}\n\tset channelInterpretation(channelInterpretation: ChannelInterpretation) {\n\t\tconst props = this._getChannelProperties();\n\t\t// merge it with the other properties\n\t\tthis._setChannelProperties(Object.assign(props, { channelInterpretation }));\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// CONNECTIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * connect the output of a ToneAudioNode to an AudioParam, AudioNode, or ToneAudioNode\n\t * @param unit The output to connect to\n\t * @param outputNum The output to connect from\n\t * @param inputNum The input to connect to\n\t */\n\tconnect(destination: InputNode, outputNum = 0, inputNum = 0): this {\n\t\tconnect(this, destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Connect the output to the context's destination node.\n\t */\n\ttoDestination(): this {\n\t\tthis.connect(this.context.destination);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Connect the output to the context's destination node.\n\t * alias for {@link toDestination}\n\t */\n\ttoMaster(): this {\n\t\tconsole.warn(\"toMaster() has been renamed toDestination()\");\n\t\treturn this.toDestination();\n\t}\n\n\t/**\n\t *  disconnect the output\n\t *  @param output Either the output index to disconnect if the output is an array, or the node to disconnect from.\n\t */\n\tdisconnect(destination?: InputNode, outputNum = 0, inputNum = 0): this {\n\t\tdisconnect(this, destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Connect the output of this node to the rest of the nodes in series.\n\t *  @param nodes\n\t *  @example\n\t *  //connect a node to an effect, panVol and then to the master output\n\t *  node.chain(effect, panVol, Tone.Destination);\n\t */\n\tchain(...nodes: InputNode[]): this {\n\t\tconnectSeries(this, ...nodes);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  connect the output of this node to the rest of the nodes in parallel.\n\t *  @param nodes\n\t *  @returns this\n\t */\n\tfan(...nodes: InputNode[]): this {\n\t\tnodes.forEach(node => this.connect(node));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Dispose and disconnect\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (isDefined(this.input)) {\n\t\t\tif (isArray(this.input)) {\n\t\t\t\tthis.input.forEach(input => {\n\t\t\t\t\tif (input instanceof ToneAudioNode) {\n\t\t\t\t\t\tinput.dispose();\n\t\t\t\t\t} else if (input instanceof AudioNode) {\n\t\t\t\t\t\tinput.disconnect();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else if (this.input instanceof ToneAudioNode) {\n\t\t\t\tthis.input.dispose();\n\t\t\t} else if (this.input instanceof AudioNode) {\n\t\t\t\tthis.input.disconnect();\n\t\t\t}\n\t\t}\n\t\tif (isDefined(this.output)) {\n\t\t\tif (isArray(this.output)) {\n\t\t\t\tthis.output.forEach(output => {\n\t\t\t\t\tif (output instanceof ToneAudioNode) {\n\t\t\t\t\t\toutput.dispose();\n\t\t\t\t\t} else {\n\t\t\t\t\t\toutput.disconnect();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else if (this.output instanceof ToneAudioNode) {\n\t\t\t\tthis.output.dispose();\n\t\t\t} else if (this.output instanceof AudioNode) {\n\t\t\t\tthis.output.disconnect();\n\t\t\t}\n\t\t}\n\t\tthis._internalChannels = [];\n\t\treturn this;\n\t}\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// CONNECTIONS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n *  connect together all of the arguments in series\n *  @param nodes\n */\nexport function connectSeries(...nodes: InputNode[]): void {\n\tconst first = nodes.shift();\n\tnodes.reduce((prev, current) => {\n\t\tif (prev instanceof ToneAudioNode) {\n\t\t\tprev.connect(current);\n\t\t} else if (prev instanceof AudioNode) {\n\t\t\tconnect(prev, current);\n\t\t}\n\t\treturn current;\n\t}, first);\n}\n\n/**\n * Connect two nodes together so that signal flows from the\n * first node to the second. Optionally specify the input and output channels.\n * @param srcNode The source node\n * @param dstNode The destination node\n * @param outputNumber The output channel of the srcNode\n * @param inputNumber The input channel of the dstNode\n */\nexport function connect(srcNode: OutputNode, dstNode: InputNode, outputNumber = 0, inputNumber = 0): void {\n\n\t// resolve the input of the dstNode\n\twhile (!(dstNode instanceof AudioNode || dstNode instanceof AudioParam)) {\n\t\tif (isDefined(dstNode.input)) {\n\t\t\tdstNode = dstNode.input;\n\t\t}\n\t}\n\n\twhile (srcNode instanceof ToneAudioNode) {\n\t\tif (isDefined(srcNode.output)) {\n\t\t\tsrcNode = srcNode.output;\n\t\t}\n\t}\n\n\t// make the connection\n\tif (dstNode instanceof AudioParam) {\n\t\tsrcNode.connect(dstNode, outputNumber);\n\t} else {\n\t\tsrcNode.connect(dstNode, outputNumber, inputNumber);\n\t}\n}\n\n/**\n * Disconnect a node from all nodes or optionally include a destination node and input/output channels.\n * @param srcNode The source node\n * @param dstNode The destination node\n * @param outputNumber The output channel of the srcNode\n * @param inputNumber The input channel of the dstNode\n */\nexport function disconnect(\n\tsrcNode: OutputNode,\n\tdstNode?: InputNode,\n\toutputNumber = 0,\n\tinputNumber = 0,\n): void {\n\n\t// resolve the destination node\n\tif (isDefined(dstNode)) {\n\t\twhile (dstNode instanceof ToneAudioNode) {\n\t\t\tif (dstNode.input) {\n\t\t\t\tdstNode = dstNode.input;\n\t\t\t}\n\t\t}\n\t}\n\n\t// resolve the src node\n\twhile (!(srcNode instanceof AudioNode)) {\n\t\tif (isDefined(srcNode.output)) {\n\t\t\tsrcNode = srcNode.output;\n\t\t}\n\t}\n\n\tif (dstNode instanceof AudioParam) {\n\t\tsrcNode.disconnect(dstNode, outputNumber);\n\t} else if (dstNode instanceof AudioNode) {\n\t\tsrcNode.disconnect(dstNode, outputNumber, inputNumber);\n\t} else {\n\t\tsrcNode.disconnect();\n\t}\n}\n","import { Param } from \"../context/Param\";\nimport \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"./ToneAudioNode\";\n\ninterface GainOptions extends ToneAudioNodeOptions {\n\tgain: number;\n\tunits: UnitName;\n\tconvert: boolean;\n}\n\n/**\n * A thin wrapper around the Native Web Audio GainNode.\n * The GainNode is a basic building block of the Web Audio\n * API and is useful for routing audio and adjusting gains.\n * @param  gain The initial gain of the GainNode\n * @param units The units of the gain parameter.\n */\nexport class Gain<Type extends Unit = GainFactor> extends ToneAudioNode<GainOptions> {\n\n\tname = \"Gain\";\n\n\t/**\n\t *  The gain parameter of the gain node.\n\t */\n\treadonly gain: Param<Type>;\n\n\t/**\n\t * The wrapped GainNode.\n\t */\n\tprivate _gainNode: GainNode = this.context.createGain();\n\n\t// input = output\n\treadonly input: GainNode = this._gainNode;\n\treadonly output: GainNode = this._gainNode;\n\n\t/**\n\t * Add all of the gain nodes\n\t */\n\tprotected _internalChannels: AudioNode[] = [this._gainNode];\n\n\tconstructor(gain?: GainFactor, units?: Unit);\n\tconstructor(options?: Partial<GainOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Gain.getDefaults(), arguments, [\"gain\", \"units\"]));\n\t\tconst options = optionsFromArguments(Gain.getDefaults(), arguments, [\"gain\", \"units\"]);\n\n\t\tthis.gain = new Param({\n\t\t\tcontext : this.context,\n\t\t\tconvert : options.convert,\n\t\t\tparam : this._gainNode.gain,\n\t\t\tunits : options.units,\n\t\t\tvalue : options.gain,\n\t\t});\n\t\treadOnly(this, \"gain\");\n\t}\n\n\tstatic getDefaults(): GainOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tconvert : true,\n\t\t\tgain : 1,\n\t\t\tnumberOfInputs: 1,\n\t\t\tnumberOfOutputs: 1,\n\t\t\tunits : \"gain\" as UnitName,\n\t\t});\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._gainNode.disconnect();\n\t\tthis.gain.dispose();\n\t\treturn this;\n\t}\n}\n","import { Context } from \"../context/Context\";\n\n/**\n *  Wrapper around the OfflineAudioContext\n *  @param  channels  The number of channels to render\n *  @param  duration  The duration to render in samples\n *  @param sampleRate the sample rate to render at\n */\nexport class OfflineContext extends Context {\n\n\tname = \"OfflineContext\";\n\n\t/**\n\t *  A private reference to the duration\n\t */\n\tprivate readonly _duration: Seconds;\n\n\t/**\n\t *  An artificial clock source\n\t */\n\tprivate _currentTime: Seconds = 0;\n\n\t/**\n\t * Private reference to the OfflineAudioContext.\n\t */\n\tprotected _context!: OfflineAudioContext;\n\n\tconstructor(channels: number | OfflineAudioContext, duration: Seconds, sampleRate: number) {\n\n\t\tsuper({\n\t\t\tclockSource: \"offline\",\n\t\t\tcontext: channels instanceof OfflineAudioContext ?\n\t\t\t\tchannels : new OfflineAudioContext(channels, duration * sampleRate, sampleRate),\n\t\t\tlookAhead: 0,\n\t\t\tupdateInterval: channels instanceof OfflineAudioContext ?\n\t\t\t\t\t128 / channels.sampleRate : 128 / sampleRate,\n\t\t});\n\n\t\tthis._duration = channels instanceof OfflineAudioContext ?\n\t\t\tchannels.length / channels.sampleRate : duration;\n\t}\n\n\t/**\n\t *  Override the now method to point to the internal clock time\n\t */\n\tnow(): Seconds {\n\t\treturn this._currentTime;\n\t}\n\n\t/**\n\t * Same as this.now()\n\t */\n\tget currentTime(): Seconds {\n\t\treturn this._currentTime;\n\t}\n\n\t/**\n\t *  Render the output of the OfflineContext\n\t */\n\trender(): Promise<AudioBuffer> {\n\t\twhile (this._duration - this._currentTime >= 0) {\n\t\t\t// invoke all the callbacks on that time\n\t\t\tthis.emit(\"tick\");\n\t\t\t// increment the clock in 5ms chunks\n\t\t\tthis._currentTime += 0.005;\n\t\t}\n\n\t\treturn this._context.startRendering();\n\t}\n\n\t/**\n\t *  Close the context\n\t */\n\tclose(): Promise<OfflineContext> {\n\t\treturn Promise.resolve(this);\n\t}\n}\n","import { getContext } from \"../Global\";\nimport { Tone } from \"../Tone\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { noOp } from \"../util/Interface\";\nimport { isArray, isNumber, isString } from \"../util/TypeCheck\";\n\ninterface ToneAudioBufferOptions {\n\turl?: string | AudioBuffer | ToneAudioBuffer;\n\treverse: boolean;\n\tonload: (buffer?: ToneAudioBuffer) => void;\n\tonerror: (error: Error) => void;\n}\n\n/**\n * AudioBuffer loading and storage. ToneAudioBuffer is used internally by all\n * classes that make requests for audio files such as Tone.Player,\n * Tone.Sampler and Tone.Convolver.\n *\n * Aside from load callbacks from individual buffers, ToneAudioBuffer\n * provides events which keep track of the loading progress\n * of _all_ of the buffers. These are ToneAudioBuffer.on(\"load\" / \"progress\" / \"error\")\n *\n * @param url The url to load, or the audio buffer to set.\n * @param onload A callback which is invoked after the buffer is loaded.\n *                            It's recommended to use `ToneAudioBuffer.on('load', callback)` instead\n *                            since it will give you a callback when _all_ buffers are loaded.\n * @param onerror The callback to invoke if there is an error\n * @example\n * var buffer = new ToneAudioBuffer(\"path/to/sound.mp3\", function(){\n * \t//the buffer is now available.\n * \tvar buff = buffer.get();\n * });\n * @example\n * //can load provide fallback extension types if the first type is not supported.\n * var buffer = new ToneAudioBuffer(\"path/to/sound.[mp3|ogg|wav]\");\n */\nexport class ToneAudioBuffer extends Tone {\n\n\tname = \"ToneAudioBuffer\";\n\n\t/**\n\t *  stores the loaded AudioBuffer\n\t */\n\tprivate _buffer?: AudioBuffer;\n\n\t/**\n\t *  indicates if the buffer should be reversed or not\n\t */\n\tprivate _reversed!: boolean;\n\n\t/**\n\t * Callback when the buffer is loaded.\n\t */\n\tonload: (buffer: ToneAudioBuffer) => void = noOp;\n\n\tconstructor(options?: Partial<ToneAudioBufferOptions>);\n\tconstructor(\n\t\turl?: string | ToneAudioBuffer | AudioBuffer,\n\t\tonload?: (buffer: ToneAudioBuffer) => void,\n\t\tonerror?: (error: Error) => void,\n\t);\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tconst options = optionsFromArguments(ToneAudioBuffer.getDefaults(), arguments, [\"url\", \"onload\", \"onerror\"]);\n\n\t\tthis.reverse = options.reverse;\n\t\tthis.onload = options.onload;\n\n\t\tif (options.url && options.url instanceof AudioBuffer || options.url instanceof ToneAudioBuffer) {\n\t\t\tthis.set(options.url);\n\t\t} else if (isString(options.url)) {\n\t\t\t// initiate the download\n\t\t\tthis.load(options.url).catch(options.onerror);\n\t\t}\n\t}\n\n\tstatic getDefaults(): ToneAudioBufferOptions {\n\t\treturn {\n\t\t\tonerror: noOp,\n\t\t\tonload: noOp,\n\t\t\treverse: false,\n\t\t};\n\t}\n\n\t/**\n\t * The sample rate of the AudioBuffer\n\t */\n\tget sampleRate(): number {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.sampleRate;\n\t\t} else {\n\t\t\treturn getContext().sampleRate;\n\t\t}\n\t}\n\n\t/**\n\t *  Pass in an AudioBuffer or ToneAudioBuffer to set the value of this buffer.\n\t */\n\tset(buffer: AudioBuffer | ToneAudioBuffer): this {\n\t\tif (buffer instanceof ToneAudioBuffer) {\n\t\t\t// if it's loaded, set it\n\t\t\tif (buffer.loaded) {\n\t\t\t\tthis._buffer = buffer.get();\n\t\t\t} else {\n\t\t\t\t// otherwise when it's loaded, invoke it's callback\n\t\t\t\tbuffer.onload = () => {\n\t\t\t\t\tthis.set(buffer);\n\t\t\t\t\tthis.onload(this);\n\t\t\t\t};\n\t\t\t}\n\t\t} else {\n\t\t\tthis._buffer = buffer;\n\t\t}\n\t\t// reverse it initially\n\t\tif (this._reversed) {\n\t\t\tthis._reverse();\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  The audio buffer stored in the object.\n\t */\n\tget(): AudioBuffer | undefined {\n\t\treturn this._buffer;\n\t}\n\n\t/**\n\t *  Makes an fetch request for the selected url then decodes the file as an audio buffer.\n\t * \tInvokes the callback once the audio buffer loads.\n\t *  @param url The url of the buffer to load. filetype support depends on the browser.\n\t *  @returns A Promise which resolves with this ToneAudioBuffer\n\t */\n\tasync load(url: string): Promise<this> {\n\t\tconst promise = ToneAudioBuffer.load(url);\n\t\tToneAudioBuffer.downloads.push(promise);\n\t\ttry {\n\t\t\tconst audioBuffer = await promise;\n\t\t\tthis.set(audioBuffer);\n\t\t\t// invoke the onload method\n\t\t\tthis.onload(this);\n\t\t} catch (e) {\n\t\t\t// remove the failed file before throwing error\n\t\t\tconst index = ToneAudioBuffer.downloads.indexOf(promise);\n\t\t\tToneAudioBuffer.downloads.splice(index, 1);\n\t\t\tthrow e;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._buffer = undefined;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set the audio buffer from the array.\n\t * To create a multichannel AudioBuffer, pass in a multidimensional array.\n\t * @param array The array to fill the audio buffer\n\t */\n\tfromArray(array: Float32Array | Float32Array[]): this {\n\t\tconst isMultidimensional = isArray(array) && array[0].length > 0;\n\t\tconst channels = isMultidimensional ? array.length : 1;\n\t\tconst len = isMultidimensional ? (array[0] as Float32Array).length : array.length;\n\t\tconst context = getContext();\n\t\tconst buffer = context.createBuffer(channels, len, context.sampleRate);\n\t\tconst multiChannelArray: Float32Array[] = !isMultidimensional && channels === 1 ?\n\t\t\t[array as Float32Array] : array as Float32Array[];\n\n\t\tfor (let c = 0; c < channels; c++) {\n\t\t\tbuffer.copyToChannel(multiChannelArray[c], c);\n\t\t}\n\t\tthis._buffer = buffer;\n\t\treturn this;\n\t}\n\n\t/**\n\t * \tSums multiple channels into 1 channel\n\t *  @param channel Optionally only copy a single channel from the array.\n\t */\n\ttoMono(chanNum?: number): this {\n\t\tif (isNumber(chanNum)) {\n\t\t\tthis.fromArray(this.toArray(chanNum));\n\t\t} else {\n\t\t\tlet outputArray = new Float32Array(this.length as number);\n\t\t\tconst numChannels = this.numberOfChannels;\n\t\t\tfor (let channel = 0; channel < numChannels; channel++) {\n\t\t\t\tconst channelArray = this.toArray(channel) as Float32Array;\n\t\t\t\tfor (let i = 0; i < channelArray.length; i++) {\n\t\t\t\t\toutputArray[i] += channelArray[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\t// divide by the number of channels\n\t\t\toutputArray = outputArray.map(sample => sample / numChannels);\n\t\t\tthis.fromArray(outputArray);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * \tGet the buffer as an array. Single channel buffers will return a 1-dimensional\n\t * \tFloat32Array, and multichannel buffers will return multidimensional arrays.\n\t *  @param channel Optionally only copy a single channel from the array.\n\t */\n\ttoArray(channel?: number): Float32Array | Float32Array[] {\n\t\tif (isNumber(channel)) {\n\t\t\treturn this.getChannelData(channel);\n\t\t} else if (this.numberOfChannels === 1) {\n\t\t\treturn this.toArray(0);\n\t\t} else {\n\t\t\tconst ret: Float32Array[] = [];\n\t\t\tfor (let c = 0; c < this.numberOfChannels; c++) {\n\t\t\t\tret[c] = this.getChannelData(c);\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\t}\n\n\t/**\n\t *  Returns the Float32Array representing the PCM audio data for the specific channel.\n\t *  @param  channel  The channel number to return\n\t *  @return The audio as a TypedArray\n\t */\n\tgetChannelData(channel: number): Float32Array {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.getChannelData(channel);\n\t\t} else {\n\t\t\treturn new Float32Array(0);\n\t\t}\n\t}\n\n\t/**\n\t *  Cut a subsection of the array and return a buffer of the\n\t *  subsection. Does not modify the original buffer\n\t *  @param start The time to start the slice\n\t *  @param end The end time to slice. If none is given will default to the end of the buffer\n\t */\n\tslice(start: Seconds, end: Seconds = this.duration): ToneAudioBuffer {\n\t\tconst startSamples = Math.floor(start * this.sampleRate);\n\t\tconst endSamples = Math.floor(end * this.sampleRate);\n\t\tthis.assert(startSamples < endSamples, \"The start time must be less than the end time\");\n\t\tconst length = endSamples - startSamples;\n\t\tconst retBuffer = getContext().createBuffer(this.numberOfChannels, length, this.sampleRate);\n\t\tfor (let channel = 0; channel < this.numberOfChannels; channel++) {\n\t\t\tretBuffer.copyFromChannel(this.getChannelData(channel).subarray(startSamples, endSamples), channel);\n\t\t}\n\t\treturn new ToneAudioBuffer(retBuffer);\n\t}\n\n\t/**\n\t *  Reverse the buffer.\n\t */\n\tprivate _reverse(): this {\n\t\tif (this.loaded) {\n\t\t\tfor (let i = 0; i < this.numberOfChannels; i++) {\n\t\t\t\tthis.getChannelData(i).reverse();\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * If the buffer is loaded or not\n\t */\n\tget loaded(): boolean {\n\t\treturn this.length > 0;\n\t}\n\n\t/**\n\t * The duration of the buffer in seconds.\n\t */\n\tget duration(): Seconds {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.duration;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * The length of the buffer in samples\n\t */\n\tget length(): Samples {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.length;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * The number of discrete audio channels. Returns 0 if no buffer is loaded.\n\t */\n\tget numberOfChannels(): number {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.numberOfChannels;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * Reverse the buffer.\n\t */\n\tget reverse(): boolean {\n\t\treturn this._reversed;\n\t}\n\tset reverse(rev: boolean) {\n\t\tif (this._reversed !== rev) {\n\t\t\tthis._reversed = rev;\n\t\t\tthis._reverse();\n\t\t}\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// STATIC METHODS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  A path which is prefixed before every url.\n\t */\n\tstatic baseUrl = \"\";\n\n\t/**\n\t *  Create a ToneAudioBuffer from the array. To create a multichannel AudioBuffer,\n\t *  pass in a multidimensional array.\n\t *  @param array The array to fill the audio buffer\n\t *  @return A ToneAudioBuffer created from the array\n\t */\n\tstatic fromArray(array: Float32Array | Float32Array[]): ToneAudioBuffer {\n\t\treturn (new ToneAudioBuffer()).fromArray(array);\n\t}\n\n\t/**\n\t * Creates a ToneAudioBuffer from a URL, returns a promise which resolves to a ToneAudioBuffer\n\t * @param  url The url to load.\n\t * @return A promise which resolves to a ToneAudioBuffer\n\t */\n\tstatic async fromUrl(url: string): Promise<ToneAudioBuffer> {\n\t\tconst buffer = new ToneAudioBuffer();\n\t\treturn await buffer.load(url);\n\t}\n\n\t/**\n\t * All of the downloads\n\t */\n\tstatic downloads: Array<Promise<AudioBuffer>> = [];\n\n\t/**\n\t *  Loads a url using fetch and returns the AudioBuffer.\n\t */\n\tstatic async load(url: string): Promise<AudioBuffer> {\n\n\t\t// test if the url contains multiple extensions\n\t\tconst matches = url.match(/\\[(.+\\|?)+\\]$/);\n\t\tif (matches) {\n\t\t\tconst extensions = matches[1].split(\"|\");\n\t\t\tlet extension = extensions[0];\n\t\t\tfor (const ext of extensions) {\n\t\t\t\tif (ToneAudioBuffer.supportsType(ext)) {\n\t\t\t\t\textension = ext;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\turl = url.replace(matches[0], extension);\n\t\t}\n\n\t\tconst response = await fetch(ToneAudioBuffer.baseUrl + url);\n\t\tif (!response.ok) {\n\t\t\tthrow new Error(`could not load url: ${url}`);\n\t\t}\n\t\tconst arrayBuffer = await response.arrayBuffer();\n\n\t\tconst audioBuffer = await getContext().decodeAudioData(arrayBuffer);\n\n\t\treturn audioBuffer;\n\t}\n\n\t/**\n\t *  Checks a url's extension to see if the current browser can play that file type.\n\t *  @param url The url/extension to test\n\t *  @return If the file extension can be played\n\t *  @static\n\t *  @example\n\t * ToneAudioBuffer.supportsType(\"wav\"); //returns true\n\t * ToneAudioBuffer.supportsType(\"path/to/file.wav\"); //returns true\n\t */\n\tstatic supportsType(url: string): boolean {\n\t\tconst extensions = url.split(\".\");\n\t\tconst extension = extensions[extensions.length - 1];\n\t\tconst response = document.createElement(\"audio\").canPlayType(\"audio/\" + extension);\n\t\treturn response !== \"\";\n\t}\n\n\t/**\n\t *  Returns a Promise which resolves when all of the buffers have loaded\n\t */\n\tstatic async loaded(): Promise<void> {\n\t\tfor (const promise of ToneAudioBuffer.downloads) {\n\t\t\tawait promise;\n\t\t}\n\t}\n}\n","import { getContext, setContext } from \"../Global\";\nimport { OfflineContext } from \"./OfflineContext\";\nimport { ToneAudioBuffer } from \"./ToneAudioBuffer\";\n\n/**\n * Generate a buffer by rendering all of the Tone.js code within the callback using the OfflineAudioContext.\n * The OfflineAudioContext is capable of rendering much faster than real time in many cases.\n * The callback function also passes in an offline instance of Tone.Transport which can be used\n * to schedule events along the Transport. **NOTE** OfflineAudioContext has the same restrictions\n * as the AudioContext in that on certain platforms (like iOS) it must be invoked by an explicit\n * user action like a click or tap.\n * @param  callback  All Tone.js nodes which are created and scheduled\n * \t\t\t\t\twithin this callback are recorded into the output Buffer.\n * @param  duration     the amount of time to record for.\n * @return  The promise which is invoked with the Tone.Buffer of the recorded output.\n * @example\n * //render 2 seconds of the oscillator\n * Tone.Offline(function(){\n * \t//only nodes created in this callback will be recorded\n * \tvar oscillator = new Tone.Oscillator().toDestination().start(0)\n * \t//schedule their events\n * }, 2).then(function(buffer){\n * \t//do something with the output buffer\n * })\n * @example\n * //can also schedule events along the Transport\n * //using the passed in Offline Transport\n * Tone.Offline(function(Transport){\n * \tvar osc = new Tone.Oscillator().toDestination()\n * \tTransport.schedule(function(time){\n * \t\tosc.start(time).stop(time + 0.1)\n * \t}, 1)\n * \tTransport.start(0.2)\n * }, 4).then(function(buffer){\n * \t//do something with the output buffer\n * })\n */\nexport async function Offline(\n\tcallback: (context: OfflineContext) => Promise<void> | void,\n\tduration: Seconds,\n\tchannels: number = 2,\n\tsampleRate: number = getContext().sampleRate,\n): Promise<ToneAudioBuffer> {\n\t// set the OfflineAudioContext based on the current context\n\tconst originalContext = getContext();\n\n\tconst context = new OfflineContext(channels, duration, sampleRate);\n\tsetContext(context);\n\n\t// invoke the callback/scheduling\n\tawait callback(context);\n\n\t// then render the audio\n\tconst bufferPromise = context.render();\n\n\t// return the original AudioContext\n\tsetContext(originalContext);\n\n\t// await the rendering\n\tconst buffer = await bufferPromise;\n\n\t// return the audio\n\treturn new ToneAudioBuffer(buffer);\n}\n","import { Param } from \"../context/Param\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"./ToneAudioNode\";\n\nexport interface DelayOptions extends ToneAudioNodeOptions {\n\tdelayTime: Time;\n\tmaxDelay: Time;\n}\n\n/**\n *  Wrapper around Web Audio's native [DelayNode](http://webaudio.github.io/web-audio-api/#the-delaynode-interface).\n *  @param delayTime The delay applied to the incoming signal.\n *  @param maxDelay The maximum delay time.\n */\nexport class Delay extends ToneAudioNode<DelayOptions> {\n\n\tname = \"Delay\";\n\n\t/**\n\t * The maximum delay time. This cannot be changed after\n\t * the value is passed into the constructor.\n\t */\n\treadonly maxDelay: Time;\n\n\t/**\n\t *  The amount of time the incoming signal is delayed.\n\t */\n\treadonly delayTime: Param<Time>;\n\n\t/**\n\t * Private reference to the internal DelayNode\n\t */\n\tprivate _delayNode: DelayNode;\n\treadonly input: DelayNode;\n\treadonly output: DelayNode;\n\n\t/**\n\t * The internal channels for channel routing changes\n\t */\n\tprotected _internalChannels: AudioNode[];\n\n\tconstructor(options?: Partial<DelayOptions>)\n\tconstructor(delayTime?: Time, maxDelay?: Time)\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Delay.getDefaults(), arguments, [\"delayTime\", \"maxDelay\"]));\n\n\t\tconst options = optionsFromArguments(Delay.getDefaults(), arguments, [\"delayTime\", \"maxDelay\"]);\n\n\t\tconst maxDelayInSeconds = this.toSeconds(options.maxDelay);\n\t\tthis.maxDelay = Math.max(maxDelayInSeconds, this.toSeconds(options.delayTime));\n\n\t\tthis._delayNode = this.input = this.output = this.context.createDelay(maxDelayInSeconds);\n\t\tthis._internalChannels = [this._delayNode];\n\n\t\tthis.delayTime = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam : this._delayNode.delayTime,\n\t\t\tunits : \"time\",\n\t\t\tvalue : options.delayTime,\n\t\t});\n\n\t\treadOnly(this, \"delayTime\");\n\t}\n\n\tstatic getDefaults(): DelayOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tdelayTime : 0,\n\t\t\tmaxDelay: 1,\n\t\t\tnumberOfInputs: 1,\n\t\t\tnumberOfOutputs: 1,\n\t\t});\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._delayNode.disconnect();\n\t\tthis.delayTime.dispose();\n\t\treturn this;\n\t}\n}\n","// import \"../type/Type\";\nimport { Timeline, TimelineEvent } from \"./Timeline\";\n\nexport type BasicPlaybackState = \"started\" | \"stopped\";\nexport type PlaybackState = BasicPlaybackState | \"paused\";\n\nexport interface StateTimelineEvent extends TimelineEvent {\n\tstate: PlaybackState;\n}\n\n/**\n *  A Timeline State. Provides the methods: `setStateAtTime(\"state\", time)` and `getValueAtTime(time)`\n *  @param initial The initial state of the StateTimeline.  Defaults to `undefined`\n */\nexport class StateTimeline<AdditionalOptions extends {} = {}> extends Timeline<StateTimelineEvent & AdditionalOptions> {\n\n\t/**\n\t *  The initial state\n\t */\n\tprivate _initial: PlaybackState;\n\n\tconstructor(initial: PlaybackState = \"stopped\") {\n\t\tsuper();\n\t\tthis._initial = initial;\n\t}\n\n\t/**\n\t *  Returns the scheduled state scheduled before or at\n\t *  the given time.\n\t *  @param  time  The time to query.\n\t *  @return  The name of the state input in setStateAtTime.\n\t */\n\tgetValueAtTime(time: Seconds): PlaybackState {\n\t\tconst event = this.get(time);\n\t\tif (event !== null) {\n\t\t\treturn event.state;\n\t\t} else {\n\t\t\treturn this._initial;\n\t\t}\n\t}\n\n\t/**\n\t *  Add a state to the timeline.\n\t * @param  state The name of the state to set.\n\t * @param  time  The time to query.\n\t * @param options Any additional options that are needed in the timeline.\n\t */\n\tsetStateAtTime(state: PlaybackState, time: Seconds, options?: AdditionalOptions): this {\n\t\t// all state changes need to be >= the previous state time\n\t\t// TODO throw error if time < the previous event time\n\t\tthis.add(Object.assign({}, options, {\n\t\t\tstate,\n\t\t\ttime,\n\t\t}));\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Return the event before the time with the given state\n\t *  @param  state The state to look for\n\t *  @param  time  When to check before\n\t *  @return  The event with the given state before the time\n\t */\n\tgetLastState(state: PlaybackState, time: number): StateTimelineEvent & AdditionalOptions | undefined {\n\t\t// time = this.toSeconds(time);\n\t\tconst index = this._search(time);\n\t\tfor (let i = index; i >= 0; i--) {\n\t\t\tconst event = this._timeline[i];\n\t\t\tif (event.state === state) {\n\t\t\t\treturn event;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *  Return the event after the time with the given state\n\t *  @param  state The state to look for\n\t *  @param  time  When to check from\n\t *  @return  The event with the given state after the time\n\t */\n\tgetNextState(state: PlaybackState, time: number): StateTimelineEvent & AdditionalOptions | undefined {\n\t\t// time = this.toSeconds(time);\n\t\tconst index = this._search(time);\n\t\tif (index !== -1) {\n\t\t\tfor (let i = index; i < this._timeline.length; i++) {\n\t\t\t\tconst event = this._timeline[i];\n\t\t\t\tif (event.state === state) {\n\t\t\t\t\treturn event;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","import { connect } from \"../Connect\";\nimport { AutomationEvent, Param, ParamOptions } from \"../context/Param\";\nimport { getContext } from \"../Global\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isUndef } from \"../util/TypeCheck\";\n\ninterface TickAutomationEvent extends AutomationEvent {\n\tticks: number;\n}\n\ninterface TickSignalOptions extends ParamOptions {\n\tvalue: Hertz | BPM;\n\tmultiplier: number;\n}\n\n/**\n * TickSignal extends Tone.Signal, but adds the capability\n * to calculate the number of elapsed ticks. exponential and target curves\n * are approximated with multiple linear ramps.\n *\n * Thank you Bruno Dias, H. Sofia Pinto, and David M. Matos,\n * for your [WAC paper](https://smartech.gatech.edu/bitstream/handle/1853/54588/WAC2016-49.pdf)\n * describing integrating timing functions for tempo calculations.\n *\n * @param value The initial value of the signal\n */\nexport class TickSignal<Type extends Hertz | BPM> extends Param<Type> {\n\n\tname = \"TickSignal\";\n\n\tprotected _events: Timeline<TickAutomationEvent> = new Timeline(Infinity);\n\n\tprivate _sig: ConstantSourceNode = this.context.createConstantSource();\n\n\tprotected _param = this._sig.offset;\n\n\tprivate _multiplier: number = 1;\n\n\tconstructor(options: Partial<TickSignalOptions>);\n\tconstructor(value?: number);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(TickSignal.getDefaults(), arguments, [\"value\"]));\n\t\tconst options = optionsFromArguments(TickSignal.getDefaults(), arguments, [\"value\"]);\n\n\t\tthis._sig = this.context.createConstantSource();\n\t\tthis._sig.start(0);\n\t\tthis._param = this._sig.offset;\n\n\t\t// set the multiplier\n\t\tthis.multiplier = options.multiplier;\n\n\t\t// clear the ticks from the beginning\n\t\tthis.cancelScheduledValues(0);\n\t\t// set an initial event\n\t\tthis._events.add({\n\t\t\tticks: 0,\n\t\t\ttime : 0,\n\t\t\ttype : \"setValue\",\n\t\t\tvalue: this._fromType(options.value as Type),\n\t\t});\n\t\tthis.setValueAtTime(options.value as Type, 0);\n\t}\n\n\tstatic getDefaults(): TickSignalOptions {\n\t\treturn Object.assign(Param.getDefaults(), {\n\t\t\tmultiplier: 1,\n\t\t\tparam: getContext().createConstantSource().offset,\n\t\t\tunits: \"hertz\",\n\t\t\tvalue: 1,\n\t\t});\n\t}\n\n\tsetTargetAtTime(value: Type, time: Time, constant: number): this {\n\t\t// approximate it with multiple linear ramps\n\t\ttime = this.toSeconds(time);\n\t\tthis.setRampPoint(time);\n\t\tconst computedValue = this._fromType(value);\n\n\t\t// start from previously scheduled value\n\t\tconst prevEvent = this._events.get(time) as TickAutomationEvent;\n\t\tconst segments = Math.round(Math.max(1 / constant, 1));\n\t\tfor (let i = 0; i <= segments; i++) {\n\t\t\tconst segTime = constant * i + time;\n\t\t\tconst rampVal = this._exponentialApproach(prevEvent.time, prevEvent.value, computedValue, constant, segTime);\n\t\t\tthis.linearRampToValueAtTime(this._toType(rampVal), segTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\tsetValueAtTime(value: Type, time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tsuper.setValueAtTime(value, time);\n\t\tconst event = this._events.get(computedTime) as TickAutomationEvent;\n\t\tconst previousEvent = this._events.previousEvent(event);\n\t\tconst ticksUntilTime = this._getTicksUntilEvent(previousEvent, computedTime);\n\t\tevent.ticks = Math.max(ticksUntilTime, 0);\n\t\treturn this;\n\t}\n\n\tlinearRampToValueAtTime(value: Type, time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tsuper.linearRampToValueAtTime(value, time);\n\t\tconst event = this._events.get(computedTime) as TickAutomationEvent;\n\t\tconst previousEvent = this._events.previousEvent(event);\n\t\tconst ticksUntilTime = this._getTicksUntilEvent(previousEvent, computedTime);\n\t\tevent.ticks = Math.max(ticksUntilTime, 0);\n\t\treturn this;\n\t}\n\n\texponentialRampToValueAtTime(value: Type, time: Time): this {\n\t\t// aproximate it with multiple linear ramps\n\t\ttime = this.toSeconds(time);\n\t\tconst computedVal = this._fromType(value);\n\n\t\t// start from previously scheduled value\n\t\tconst prevEvent = this._events.get(time) as TickAutomationEvent;\n\t\t// approx 10 segments per second\n\t\tconst segments = Math.round(Math.max((time - prevEvent.time) * 10, 1));\n\t\tconst segmentDur = ((time - prevEvent.time) / segments);\n\t\tfor (let i = 0; i <= segments; i++) {\n\t\t\tconst segTime = segmentDur * i + prevEvent.time;\n\t\t\tconst rampVal = this._exponentialInterpolate(prevEvent.time, prevEvent.value, time, computedVal, segTime);\n\t\t\tthis.linearRampToValueAtTime(this._toType(rampVal), segTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the tick value at the time. Takes into account\n\t * any automation curves scheduled on the signal.\n\t * @param  time The time to get the tick count at\n\t * @return The number of ticks which have elapsed at the time given any automations.\n\t */\n\tprivate _getTicksUntilEvent(event: TickAutomationEvent | null, time: number): Ticks {\n\t\tif (event === null) {\n\t\t\tevent = {\n\t\t\t\tticks : 0,\n\t\t\t\ttime : 0,\n\t\t\t\ttype: \"setValue\",\n\t\t\t\tvalue: 0,\n\t\t\t};\n\t\t} else if (isUndef(event.ticks)) {\n\t\t\tconst previousEvent = this._events.previousEvent(event);\n\t\t\tevent.ticks = this._getTicksUntilEvent(previousEvent, event.time);\n\t\t}\n\t\tconst val0 = this._fromType(this.getValueAtTime(event.time));\n\t\tlet val1 = this._fromType(this.getValueAtTime(time));\n\t\t// if it's right on the line, take the previous value\n\t\tconst onTheLineEvent = this._events.get(time);\n\t\tif (onTheLineEvent && onTheLineEvent.time === time && onTheLineEvent.type === \"setValue\") {\n\t\t\tval1 = this._fromType(this.getValueAtTime(time - this.sampleTime));\n\t\t}\n\t\treturn 0.5 * (time - event.time) * (val0 + val1) + event.ticks;\n\t}\n\n\t/**\n\t * Returns the tick value at the time. Takes into account\n\t * any automation curves scheduled on the signal.\n\t * @param  time The time to get the tick count at\n\t * @return The number of ticks which have elapsed at the time given any automations.\n\t */\n\tgetTicksAtTime(time: Time): Ticks {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst event = this._events.get(computedTime);\n\t\treturn Math.max(this._getTicksUntilEvent(event, computedTime), 0);\n\t}\n\n\t/**\n\t * Return the elapsed time of the number of ticks from the given time\n\t * @param ticks The number of ticks to calculate\n\t * @param  time The time to get the next tick from\n\t * @return The duration of the number of ticks from the given time in seconds\n\t */\n\tgetDurationOfTicks(ticks: Ticks, time: Time): Seconds {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst currentTick = this.getTicksAtTime(time);\n\t\treturn this.getTimeOfTick(currentTick + ticks) - computedTime;\n\t}\n\n\t/**\n\t * Given a tick, returns the time that tick occurs at.\n\t * @return The time that the tick occurs.\n\t */\n\tgetTimeOfTick(tick: Ticks): Seconds {\n\t\tconst before = this._events.get(tick, \"ticks\");\n\t\tconst after = this._events.getAfter(tick, \"ticks\");\n\t\tif (before && before.ticks === tick) {\n\t\t\treturn before.time;\n\t\t} else if (before && after &&\n\t\t\tafter.type === \"linear\" &&\n\t\t\tbefore.value !== after.value) {\n\t\t\tconst val0 = this._fromType(this.getValueAtTime(before.time));\n\t\t\tconst val1 = this._fromType(this.getValueAtTime(after.time));\n\t\t\tconst delta = (val1 - val0) / (after.time - before.time);\n\t\t\tconst k = Math.sqrt(Math.pow(val0, 2) - 2 * delta * (before.ticks - tick));\n\t\t\tconst sol1 = (-val0 + k) / delta;\n\t\t\tconst sol2 = (-val0 - k) / delta;\n\t\t\treturn (sol1 > 0 ? sol1 : sol2) + before.time;\n\t\t} else if (before) {\n\t\t\tif (before.value === 0) {\n\t\t\t\treturn Infinity;\n\t\t\t} else {\n\t\t\t\treturn before.time + (tick - before.ticks) / before.value;\n\t\t\t}\n\t\t} else {\n\t\t\treturn tick / this._initialValue;\n\t\t}\n\t}\n\n\t/**\n\t * Convert some number of ticks their the duration in seconds accounting\n\t * for any automation curves starting at the given time.\n\t * @param  ticks The number of ticks to convert to seconds.\n\t * @param  when  When along the automation timeline to convert the ticks.\n\t * @return The duration in seconds of the ticks.\n\t */\n\tticksToTime(ticks: Ticks, when: Time): Seconds {\n\t\treturn this.getDurationOfTicks(ticks, when);\n\t}\n\n\t/**\n\t * The inverse of [ticksToTime](#tickstotime). Convert a duration in\n\t * seconds to the corresponding number of ticks accounting for any\n\t * automation curves starting at the given time.\n\t * @param  duration The time interval to convert to ticks.\n\t * @param  when When along the automation timeline to convert the ticks.\n\t * @return The duration in ticks.\n\t */\n\ttimeToTicks(duration: Time, when: Time): Ticks {\n\t\tconst computedTime = this.toSeconds(when);\n\t\tconst computedDuration = this.toSeconds(duration);\n\t\tconst startTicks = this.getTicksAtTime(computedTime);\n\t\tconst endTicks = this.getTicksAtTime(computedTime + computedDuration);\n\t\treturn endTicks - startTicks;\n\t}\n\n\t/**\n\t * Convert from the type when the unit value is BPM\n\t */\n\tprotected _fromType(val: Type): number {\n\t\tif (this.units === \"bpm\" && this.multiplier) {\n\t\t\treturn 1 / (60 / val / this.multiplier);\n\t\t} else {\n\t\t\treturn super._fromType(val);\n\t\t}\n\t}\n\n\t/**\n\t * Special case of type conversion where the units === \"bpm\"\n\t */\n\tprotected _toType(val: number): Type {\n\t\tif (this.units === \"bpm\" && this.multiplier) {\n\t\t\treturn (val / this.multiplier) * 60 as Type;\n\t\t} else {\n\t\t\treturn super._toType(val);\n\t\t}\n\t}\n\t/**\n\t * A multiplier on the bpm value. Useful for setting a PPQ relative to the base frequency value.\n\t */\n\tget multiplier(): number {\n\t\treturn this._multiplier;\n\t}\n\tset multiplier(m: number) {\n\t\t// get and reset the current value with the new multipler\n\t\t// might be necessary to clear all the previous values\n\t\tconst currentVal = this.value;\n\t\tthis._multiplier = m;\n\t\tthis.value = currentVal;\n\t}\n\n\t/**\n\t * Connect the output signal\n\t */\n\tconnect(dstNode, outputNumber = 0, inputNumber = 0): this {\n\t\tconnect(this._sig, dstNode, outputNumber, inputNumber);\n\t\treturn this;\n\t}\n}\n","import { ToneWithContext, ToneWithContextOptions } from \"../context/ToneWithContext\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { PlaybackState, StateTimeline, StateTimelineEvent } from \"../util/StateTimeline\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isDefined } from \"../util/TypeCheck\";\nimport { TickSignal } from \"./TickSignal\";\n\ninterface TickSourceOptions extends ToneWithContextOptions {\n\tfrequency: Frequency;\n\tunits: \"hertz\" | \"bpm\";\n}\n\ninterface TickSourceOffsetEvent {\n\tticks: number;\n\ttime: number;\n\tseconds: number;\n}\n\n/**\n *  Uses [TickSignal](TickSignal) to track elapsed ticks with complex automation curves.\n *\n *  @param frequency The initial frequency that the signal ticks at\n */\nexport class TickSource<Type extends BPM | Hertz> extends ToneWithContext<TickSourceOptions> {\n\n\tname = \"TickSource\";\n\n\t/**\n\t *  The frequency the callback function should be invoked.\n\t */\n\tfrequency: TickSignal<Type>;\n\n\t/**\n\t *  The state timeline\n\t */\n\tprivate _state: StateTimeline = new StateTimeline();\n\n\t/**\n\t * The offset values of the ticks\n\t */\n\tprivate _tickOffset: Timeline<TickSourceOffsetEvent> = new Timeline();\n\n\tconstructor(frequency?: Frequency);\n\t// tslint:disable-next-line: unified-signatures\n\tconstructor(options?: Partial<TickSourceOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(TickSource.getDefaults(), arguments, [\"frequency\"]));\n\t\tconst options = optionsFromArguments(TickSource.getDefaults(), arguments, [\"frequency\"]);\n\n\t\tthis.frequency = new TickSignal({\n\t\t\tcontext: this.context,\n\t\t\tunits: options.units,\n\t\t\tvalue: this.toFrequency(options.frequency),\n\t\t});\n\t\treadOnly(this, \"frequency\");\n\n\t\t// set the inital state\n\t\tthis._state.setStateAtTime(\"stopped\", 0);\n\t\t// add the first event\n\t\tthis.setTicksAtTime(0, 0);\n\t}\n\n\tstatic getDefaults(): TickSourceOptions {\n\t\treturn Object.assign({\n\t\t\tfrequency: 1,\n\t\t\tunits: \"hertz\" as \"hertz\",\n\t\t}, ToneWithContext.getDefaults());\n\t}\n\n\t/**\n\t *  Returns the playback state of the source, either \"started\", \"stopped\" or \"paused\".\n\t */\n\tget state(): PlaybackState {\n\t\treturn this._state.getValueAtTime(this.now());\n\t}\n\n\t/**\n\t *  Start the clock at the given time. Optionally pass in an offset\n\t *  of where to start the tick counter from.\n\t *  @param  time    The time the clock should start\n\t *  @param offset The number of ticks to start the source at\n\t */\n\tstart(time: Time, offset?: Ticks): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(computedTime) !== \"started\") {\n\t\t\tthis._state.setStateAtTime(\"started\", computedTime);\n\t\t\tif (isDefined(offset)) {\n\t\t\t\tthis.setTicksAtTime(offset, computedTime);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the clock. Stopping the clock resets the tick counter to 0.\n\t * @param time The time when the clock should stop.\n\t */\n\tstop(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\t// cancel the previous stop\n\t\tif (this._state.getValueAtTime(computedTime) === \"stopped\") {\n\t\t\tconst event = this._state.get(computedTime);\n\t\t\tif (event && event.time > 0) {\n\t\t\t\tthis._tickOffset.cancel(event.time);\n\t\t\t\tthis._state.cancel(event.time);\n\t\t\t}\n\t\t}\n\t\tthis._state.cancel(computedTime);\n\t\tthis._state.setStateAtTime(\"stopped\", computedTime);\n\t\tthis.setTicksAtTime(0, computedTime);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Pause the clock. Pausing does not reset the tick counter.\n\t *  @param time The time when the clock should stop.\n\t */\n\tpause(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(computedTime) === \"started\") {\n\t\t\tthis._state.setStateAtTime(\"paused\", computedTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Cancel start/stop/pause and setTickAtTime events scheduled after the given time.\n\t *  @param time When to clear the events after\n\t */\n\tcancel(time: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis._state.cancel(time);\n\t\tthis._tickOffset.cancel(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the elapsed ticks at the given time\n\t * @param  time  When to get the tick value\n\t * @return The number of ticks\n\t */\n\tgetTicksAtTime(time?: Time): Ticks {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst stopEvent = this._state.getLastState(\"stopped\", computedTime);\n\t\tif (!stopEvent) {\n\t\t\treturn 0;\n\t\t}\n\t\t// this event allows forEachBetween to iterate until the current time\n\t\tconst tmpEvent: StateTimelineEvent = { state: \"paused\", time: computedTime};\n\t\tthis._state.add(tmpEvent);\n\n\t\t// keep track of the previous offset event\n\t\tlet lastState = stopEvent;\n\t\tlet elapsedTicks = 0;\n\n\t\t// iterate through all the events since the last stop\n\t\tthis._state.forEachBetween(stopEvent.time, computedTime + this.sampleTime, e => {\n\t\t\tlet periodStartTime = lastState.time;\n\t\t\t// if there is an offset event in this period use that\n\t\t\tconst offsetEvent = this._tickOffset.get(e.time);\n\t\t\tif (offsetEvent && offsetEvent.time >= lastState.time) {\n\t\t\t\telapsedTicks = offsetEvent.ticks;\n\t\t\t\tperiodStartTime = offsetEvent.time;\n\t\t\t}\n\t\t\tif (lastState.state === \"started\" && e.state !== \"started\") {\n\t\t\t\telapsedTicks += this.frequency.getTicksAtTime(e.time) - this.frequency.getTicksAtTime(periodStartTime);\n\t\t\t}\n\t\t\tlastState = e;\n\t\t});\n\n\t\t// remove the temporary event\n\t\tthis._state.remove(tmpEvent);\n\n\t\t// return the ticks\n\t\treturn elapsedTicks;\n\t}\n\n\t/**\n\t *  The number of times the callback was invoked. Starts counting at 0\n\t *  and increments after the callback was invoked. Returns -1 when stopped.\n\t */\n\tget ticks(): Ticks {\n\t\treturn this.getTicksAtTime(this.now());\n\t}\n\n\tset ticks(t: Ticks) {\n\t\tthis.setTicksAtTime(t, this.now());\n\t}\n\n\t/**\n\t *  The time since ticks=0 that the TickSource has been running. Accounts\n\t *  for tempo curves\n\t */\n\tget seconds(): Seconds {\n\t\treturn this.getSecondsAtTime(this.now());\n\t}\n\n\tset seconds(s: Seconds) {\n\t\tconst now = this.now();\n\t\tconst ticks = this.frequency.timeToTicks(s, now);\n\t\tthis.setTicksAtTime(ticks, now);\n\t}\n\n\t/**\n\t *  Return the elapsed seconds at the given time.\n\t *  @param  time  When to get the elapsed seconds\n\t *  @return  The number of elapsed seconds\n\t */\n\tgetSecondsAtTime(time: Time): Seconds {\n\t\ttime = this.toSeconds(time);\n\t\tconst stopEvent = this._state.getLastState(\"stopped\", time);\n\t\tif (!stopEvent) {\n\t\t\treturn 0;\n\t\t}\n\t\t// this event allows forEachBetween to iterate until the current time\n\t\tconst tmpEvent: StateTimelineEvent = { state : \"paused\", time };\n\t\tthis._state.add(tmpEvent);\n\n\t\t// keep track of the previous offset event\n\t\tlet lastState = stopEvent;\n\t\tlet elapsedSeconds = 0;\n\n\t\t// iterate through all the events since the last stop\n\t\tthis._state.forEachBetween(stopEvent.time, time + this.sampleTime, e => {\n\t\t\tlet periodStartTime = lastState.time;\n\t\t\t// if there is an offset event in this period use that\n\t\t\tconst offsetEvent = this._tickOffset.get(e.time);\n\t\t\tif (offsetEvent && offsetEvent.time >= lastState.time) {\n\t\t\t\telapsedSeconds = offsetEvent.seconds;\n\t\t\t\tperiodStartTime = offsetEvent.time;\n\t\t\t}\n\t\t\tif (lastState.state === \"started\" && e.state !== \"started\") {\n\t\t\t\telapsedSeconds += e.time - periodStartTime;\n\t\t\t}\n\t\t\tlastState = e;\n\t\t});\n\n\t\t// remove the temporary event\n\t\tthis._state.remove(tmpEvent);\n\n\t\t// return the ticks\n\t\treturn elapsedSeconds;\n\t}\n\n\t/**\n\t * Set the clock's ticks at the given time.\n\t * @param  ticks The tick value to set\n\t * @param  time  When to set the tick value\n\t */\n\tsetTicksAtTime(ticks: Ticks, time: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis._tickOffset.cancel(time);\n\t\tthis._tickOffset.add({\n\t\t\tseconds : this.frequency.getDurationOfTicks(ticks, time),\n\t\t\tticks,\n\t\t\ttime,\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Returns the scheduled state at the given time.\n\t *  @param  time  The time to query.\n\t *  @example\n\t * source.start(\"+0.1\");\n\t * source.getStateAtTime(\"+0.1\"); //returns \"started\"\n\t */\n\tgetStateAtTime(time): PlaybackState {\n\t\ttime = this.toSeconds(time);\n\t\treturn this._state.getValueAtTime(time);\n\t}\n\n\t/**\n\t * Get the time of the given tick. The second argument\n\t * is when to test before. Since ticks can be set (with setTicksAtTime)\n\t * there may be multiple times for a given tick value.\n\t * @param  ticks The tick number.\n\t * @param  before When to measure the tick value from.\n\t * @return The time of the tick\n\t */\n\tgetTimeOfTick(tick: Ticks, before = this.now()): Seconds {\n\t\tconst offset = this._tickOffset.get(before) as TickSourceOffsetEvent;\n\t\tconst event = this._state.get(before) as StateTimelineEvent;\n\t\tconst startTime = Math.max(offset.time, event.time);\n\t\tconst absoluteTicks = this.frequency.getTicksAtTime(startTime) + tick - offset.ticks;\n\t\treturn this.frequency.getTimeOfTick(absoluteTicks);\n\t}\n\n\t/**\n\t *  Invoke the callback event at all scheduled ticks between the\n\t *  start time and the end time\n\t *  @param  startTime  The beginning of the search range\n\t *  @param  endTime    The end of the search range\n\t *  @param  callback   The callback to invoke with each tick\n\t */\n\tforEachTickBetween(startTime: Time, endTime: Time, callback: (when: Seconds, ticks: Ticks) => void): this {\n\t\tconst computedStartTime = this.toSeconds(startTime);\n\t\tconst computedEndTime = this.toSeconds(endTime);\n\t\t// only iterate through the sections where it is \"started\"\n\t\tlet lastStateEvent = this._state.get(computedStartTime);\n\t\tthis._state.forEachBetween(computedStartTime, computedEndTime, event => {\n\t\t\tif (lastStateEvent && lastStateEvent.state === \"started\" && event.state !== \"started\") {\n\t\t\t\tthis.forEachTickBetween(Math.max(lastStateEvent.time, computedStartTime), event.time - this.sampleTime, callback);\n\t\t\t}\n\t\t\tlastStateEvent = event;\n\t\t});\n\n\t\tlet error = null;\n\n\t\tif (lastStateEvent && lastStateEvent.state === \"started\" && this._state) {\n\t\t\tconst maxStartTime = Math.max(lastStateEvent.time, computedStartTime);\n\t\t\t// figure out the difference between the frequency ticks and the\n\t\t\tconst startTicks = this.frequency.getTicksAtTime(maxStartTime);\n\t\t\tconst ticksAtStart = this.frequency.getTicksAtTime(lastStateEvent.time);\n\t\t\tconst diff = startTicks - ticksAtStart;\n\t\t\tlet offset = diff % 1;\n\t\t\tif (offset !== 0) {\n\t\t\t\toffset = 1 - offset;\n\t\t\t}\n\t\t\tlet nextTickTime = this.frequency.getTimeOfTick(startTicks + offset);\n\t\t\twhile (nextTickTime < computedEndTime && this._state) {\n\t\t\t\ttry {\n\t\t\t\t\tcallback(nextTickTime, Math.round(this.getTicksAtTime(nextTickTime)));\n\t\t\t\t} catch (e) {\n\t\t\t\t\terror = e;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (this._state) {\n\t\t\t\t\tnextTickTime += this.frequency.getDurationOfTicks(1, nextTickTime);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (error) {\n\t\t\tthrow error;\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._state.dispose();\n\t\tthis._tickOffset.dispose();\n\t\tthis.frequency.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneWithContext, ToneWithContextOptions } from \"../context/ToneWithContext\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Emitter, EmitterEventObject } from \"../util/Emitter\";\nimport { noOp, readOnly } from \"../util/Interface\";\nimport { PlaybackState, StateTimeline } from \"../util/StateTimeline\";\nimport { TickSignal } from \"./TickSignal\";\nimport { TickSource } from \"./TickSource\";\n\ntype ClockCallback = (time: Time, ticks?: Ticks) => void;\n\ninterface ClockOptions extends ToneWithContextOptions {\n\tfrequency: number;\n\tcallback: ClockCallback;\n\tunits: \"hertz\" | \"bpm\";\n}\n\ntype ClockEvent = \"start\" | \"stop\" | \"pause\";\n\n/**\n * A sample accurate clock which provides a callback at the given rate.\n * While the callback is not sample-accurate (it is still susceptible to\n * loose JS timing), the time passed in as the argument to the callback\n * is precise. For most applications, it is better to use Tone.Transport\n * instead of the Clock by itself since you can synchronize multiple callbacks.\n *\n * @param callback The callback to be invoked with the time of the audio event\n * @param frequency The rate of the callback\n * @example\n * //the callback will be invoked approximately once a second\n * //and will print the time exactly once a second apart.\n * const clock = new Clock(time => {\n * \tconsole.log(time);\n * }, 1);\n */\nexport class Clock<Type extends BPM | Hertz = Hertz>\nextends ToneWithContext<ClockOptions> implements Emitter<ClockEvent> {\n\n\tname = \"Clock\";\n\n\t/**\n\t *  The callback function to invoke at the scheduled tick.\n\t */\n\tcallback: ClockCallback = noOp;\n\n\t/**\n\t *  The tick counter\n\t */\n\tprivate _tickSource: TickSource<Type>;\n\n\t/**\n\t *  The last time the loop callback was invoked\n\t */\n\tprivate _lastUpdate: number = 0;\n\n\t/**\n\t *  Keep track of the playback state\n\t */\n\tprivate _state: StateTimeline = new StateTimeline(\"stopped\");\n\n\t/**\n\t * Context bound reference to the _loop method\n\t * This is necessary to remove the event in the end.\n\t */\n\tprivate _boundLoop: () => void = this._loop.bind(this);\n\n\t/**\n\t *  The rate the callback function should be invoked.\n\t */\n\tfrequency: TickSignal<Type>;\n\n\tconstructor(options: Partial<ClockOptions>);\n\tconstructor(callback?: ClockCallback, frequency?: Frequency);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Clock.getDefaults(), arguments, [\"callback\", \"frequency\"]));\n\t\tconst options = optionsFromArguments(Clock.getDefaults(), arguments, [\"callback\", \"frequency\"]);\n\n\t\tthis.callback = options.callback;\n\t\tthis._tickSource = new TickSource({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.frequency,\n\t\t\tunits: options.units,\n\t\t});\n\t\tthis._lastUpdate = 0;\n\t\tthis.frequency = this._tickSource.frequency;\n\t\treadOnly(this, \"frequency\");\n\n\t\t// add an initial state\n\t\tthis._state.setStateAtTime(\"stopped\", 0);\n\n\t\t// bind a callback to the worker thread\n\t\tthis.context.on(\"tick\", this._boundLoop);\n\t}\n\n\tstatic getDefaults(): ClockOptions {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tcallback: noOp as ClockCallback,\n\t\t\tfrequency: 1,\n\t\t\tunits: \"hertz\",\n\t\t}) as ClockOptions;\n\t}\n\n\t/**\n\t *  Returns the playback state of the source, either \"started\", \"stopped\" or \"paused\".\n\t */\n\tget state(): PlaybackState {\n\t\treturn this._state.getValueAtTime(this.now());\n\t}\n\n\t/**\n\t *  Start the clock at the given time. Optionally pass in an offset\n\t *  of where to start the tick counter from.\n\t *  @param  time    The time the clock should start\n\t *  @param offset  Where the tick counter starts counting from.\n\t */\n\tstart(time?: Time, offset?: Ticks): this {\n\t\t// make sure the context is started\n\t\tthis.context.resume();\n\t\t// start the loop\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(computedTime) !== \"started\") {\n\t\t\tthis._state.setStateAtTime(\"started\", computedTime);\n\t\t\tthis._tickSource.start(computedTime, offset);\n\t\t\tif (computedTime < this._lastUpdate) {\n\t\t\t\tthis.emit(\"start\", computedTime, offset);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Stop the clock. Stopping the clock resets the tick counter to 0.\n\t *  @param time The time when the clock should stop.\n\t *  @example\n\t * clock.stop();\n\t */\n\tstop(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._state.cancel(computedTime);\n\t\tthis._state.setStateAtTime(\"stopped\", computedTime);\n\t\tthis._tickSource.stop(computedTime);\n\t\tif (computedTime < this._lastUpdate) {\n\t\t\tthis.emit(\"stop\", computedTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Pause the clock. Pausing does not reset the tick counter.\n\t *  @param time The time when the clock should stop.\n\t */\n\tpause(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(computedTime) === \"started\") {\n\t\t\tthis._state.setStateAtTime(\"paused\", computedTime);\n\t\t\tthis._tickSource.pause(computedTime);\n\t\t\tif (computedTime < this._lastUpdate) {\n\t\t\t\tthis.emit(\"pause\", computedTime);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  The number of times the callback was invoked. Starts counting at 0\n\t *  and increments after the callback was invoked.\n\t */\n\tget ticks(): Ticks {\n\t\treturn Math.ceil(this.getTicksAtTime(this.now()));\n\t}\n\tset ticks(t: Ticks) {\n\t\tthis._tickSource.ticks = t;\n\t}\n\n\t/**\n\t *  The time since ticks=0 that the Clock has been running. Accounts for tempo curves\n\t */\n\tget seconds(): Seconds {\n\t\treturn this._tickSource.seconds;\n\t}\n\tset seconds(s: Seconds) {\n\t\tthis._tickSource.seconds = s;\n\t}\n\n\t/**\n\t *  Return the elapsed seconds at the given time.\n\t *  @param  time  When to get the elapsed seconds\n\t *  @return  The number of elapsed seconds\n\t */\n\tgetSecondsAtTime(time: Time): Seconds {\n\t\treturn this._tickSource.getSecondsAtTime(time);\n\t}\n\n\t/**\n\t * Set the clock's ticks at the given time.\n\t * @param  ticks The tick value to set\n\t * @param  time  When to set the tick value\n\t */\n\tsetTicksAtTime(ticks: Ticks, time: Time): this {\n\t\tthis._tickSource.setTicksAtTime(ticks, time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the clock's ticks at the given time.\n\t * @param  time  When to get the tick value\n\t * @return The tick value at the given time.\n\t */\n\tgetTicksAtTime(time?: Time): Ticks {\n\t\treturn this._tickSource.getTicksAtTime(time);\n\t}\n\n\t/**\n\t * Get the time of the next tick\n\t * @param  ticks The tick number.\n\t */\n\tnextTickTime(offset: Ticks, when: Time): Seconds {\n\t\tconst computedTime = this.toSeconds(when);\n\t\tconst currentTick = this.getTicksAtTime(computedTime);\n\t\treturn this._tickSource.getTimeOfTick(currentTick + offset, computedTime);\n\t}\n\n\t/**\n\t *  The scheduling loop.\n\t */\n\tprivate _loop(): void {\n\n\t\tconst startTime = this._lastUpdate;\n\t\tconst endTime = this.now();\n\t\tthis._lastUpdate = endTime;\n\n\t\tif (startTime !== endTime) {\n\t\t\t// the state change events\n\t\t\tthis._state.forEachBetween(startTime, endTime, e => {\n\t\t\t\tswitch (e.state) {\n\t\t\t\t\tcase \"started\" :\n\t\t\t\t\t\tconst offset = this._tickSource.getTicksAtTime(e.time);\n\t\t\t\t\t\tthis.emit(\"start\", e.time, offset);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"stopped\" :\n\t\t\t\t\t\tif (e.time !== 0) {\n\t\t\t\t\t\t\tthis.emit(\"stop\", e.time);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"paused\" :\n\t\t\t\t\t\tthis.emit(\"pause\", e.time);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t});\n\t\t\t// the tick callbacks\n\t\t\tthis._tickSource.forEachTickBetween(startTime, endTime, (time, ticks) => {\n\t\t\t\tthis.callback(time, ticks);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Returns the scheduled state at the given time.\n\t * @param  time  The time to query.\n\t * @return  The name of the state input in setStateAtTime.\n\t * @example\n\t * clock.start(\"+0.1\");\n\t * clock.getStateAtTime(\"+0.1\"); //returns \"started\"\n\t */\n\tgetStateAtTime(time: Time): PlaybackState {\n\t\tconst computedTime = this.toSeconds(time);\n\t\treturn this._state.getValueAtTime(computedTime);\n\t}\n\n\t/**\n\t *  Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.context.off(\"tick\", this._boundLoop);\n\t\tthis._tickSource.dispose();\n\t\tthis._state.dispose();\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////\n\t// EMITTER MIXIN TO SATISFY COMPILER\n\t///////////////////////////////////////////////////////////////////////\n\n\ton!: (event: ClockEvent, callback: (...args: any[]) => void) => this;\n\tonce!: (event: ClockEvent, callback: (...args: any[]) => void) => this;\n\toff!: (event: ClockEvent, callback?: ((...args: any[]) => void) | undefined) => this;\n\temit!: (event: any, ...args: any[]) => this;\n}\n\nEmitter.mixin(Clock);\n","import { getContext } from \"../Global\";\nimport { TimeBaseUnit, TimeValue } from \"./TimeBase\";\nimport { TransportTimeClass } from \"./TransportTime\";\n\n/**\n * Ticks is a primitive type for encoding Time values.\n * Ticks can be constructed with or without the `new` keyword. Ticks can be passed\n * into the parameter of any method which takes time as an argument.\n * @example\n * const t = Ticks(\"4n\"); //a quarter note as ticks\n */\nexport class TicksClass extends TransportTimeClass<Ticks> {\n\n\tname = \"Ticks\";\n\n\treadonly defaultUnits: TimeBaseUnit = \"i\";\n\n\t/**\n\t * Get the current time in the given units\n\t */\n\tprotected _now(): Ticks {\n\t\treturn this.context.transport.ticks;\n\t}\n\n\t/**\n\t *  Return the value of the beats in the current units\n\t */\n\tprotected _beatsToUnits(beats: number): Ticks {\n\t\treturn this._getPPQ() * beats;\n\t}\n\n\t/**\n\t *  Returns the value of a second in the current units\n\t */\n\tprotected _secondsToUnits(seconds: Seconds): Ticks {\n\t\treturn Math.floor(seconds / (60 / this._getBpm()) * this._getPPQ());\n\t}\n\n\t/**\n\t *  Returns the value of a tick in the current time units\n\t */\n\tprotected _ticksToUnits(ticks: Ticks): Ticks {\n\t\treturn ticks;\n\t}\n\n\t/**\n\t *  Return the time in ticks\n\t */\n\ttoTicks(): Ticks {\n\t\treturn this.valueOf() as Ticks;\n\t}\n\n\t/**\n\t *  Return the time in seconds\n\t */\n\ttoSeconds(): Seconds {\n\t\treturn (this.valueOf() / this._getPPQ()) * (60 / this._getBpm());\n\t}\n}\n\nexport function Ticks(value?: TimeValue, units?: TimeBaseUnit): TicksClass {\n\treturn new TicksClass(getContext(), value, units);\n}\n","import { ToneWithContext, ToneWithContextOptions } from \"../context/ToneWithContext\";\nimport { Timeline, TimelineEvent } from \"./Timeline\";\n\ninterface DrawEvent extends TimelineEvent {\n\tcallback: () => void;\n}\n\n/**\n * Draw is useful for synchronizing visuals and audio events.\n * Callbacks from Tone.Transport or any of the Tone.Event classes\n * always happen _before_ the scheduled time and are not synchronized\n * to the animation frame so they are not good for triggering tightly\n * synchronized visuals and sound. Draw makes it easy to schedule\n * callbacks using the AudioContext time and uses requestAnimationFrame.\n * @example\n * Tone.Transport.schedule(function(time){\n * \t//use the time argument to schedule a callback with Draw\n * \tDraw.schedule(function(){\n * \t\t//do drawing or DOM manipulation here\n * \t}, time)\n * }, \"+0.5\")\n */\nexport class Draw extends ToneWithContext<ToneWithContextOptions> {\n\n\tname = \"Draw\";\n\n\t/**\n\t *  The duration after which events are not invoked.\n\t */\n\texpiration: Seconds = 0.25;\n\n\t/**\n\t *  The amount of time before the scheduled time\n\t *  that the callback can be invoked. Default is\n\t *  half the time of an animation frame (0.008 seconds).\n\t */\n\tanticipation: Seconds = 0.008;\n\n\t/**\n\t *  All of the events.\n\t */\n\tprivate _events: Timeline<DrawEvent> = new Timeline();\n\n\t/**\n\t *  The draw loop\n\t */\n\tprivate _boundDrawLoop = this._drawLoop.bind(this);\n\n\t/**\n\t * The animation frame id\n\t */\n\tprivate _animationFrame: number = -1;\n\n\t/**\n\t *  Schedule a function at the given time to be invoked\n\t *  on the nearest animation frame.\n\t *  @param  callback  Callback is invoked at the given time.\n\t *  @param  time      The time relative to the AudioContext time to invoke the callback.\n\t */\n\tschedule(callback: () => void, time: Time): this {\n\t\tthis._events.add({\n\t\t\tcallback,\n\t\t\ttime : this.toSeconds(time),\n\t\t});\n\t\t// start the draw loop on the first event\n\t\tif (this._events.length === 1) {\n\t\t\tthis._animationFrame = requestAnimationFrame(this._boundDrawLoop);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Cancel events scheduled after the given time\n\t *  @param  after  Time after which scheduled events will be removed from the scheduling timeline.\n\t */\n\tcancel(after?: Time): this {\n\t\tthis._events.cancel(this.toSeconds(after));\n\t\treturn this;\n\t}\n\n\t/**\n\t *  The draw loop\n\t */\n\tprivate _drawLoop(): void {\n\t\tconst now = this.context.currentTime;\n\t\twhile (this._events.length && (this._events.peek() as DrawEvent).time - this.anticipation <= now) {\n\t\t\tconst event = this._events.shift();\n\t\t\tif (event && now - event.time <= this.expiration) {\n\t\t\t\tevent.callback();\n\t\t\t}\n\t\t}\n\t\tif (this._events.length > 0) {\n\t\t\tthis._animationFrame = requestAnimationFrame(this._boundDrawLoop);\n\t\t}\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._events.dispose();\n\t\tcancelAnimationFrame(this._animationFrame);\n\t\treturn this;\n\t}\n}\n","import { Tone } from \"../Tone\";\nimport { isDefined } from \"./TypeCheck\";\n\n/**\n * An IntervalTimeline event must have a time and duration\n */\nexport interface IntervalTimelineEvent {\n\ttime: number;\n\tduration: number;\n\t[propName: string]: any;\n}\n\n/**\n * Similar to Tone.Timeline, but all events represent\n * intervals with both \"time\" and \"duration\" times. The\n * events are placed in a tree structure optimized\n * for querying an intersection point with the timeline\n * events. Internally uses an [Interval Tree](https://en.wikipedia.org/wiki/Interval_tree)\n * to represent the data.\n */\nexport class IntervalTimeline extends Tone {\n\n\tname = \"IntervalTimeline\";\n\n\t/**\n\t *  The root node of the inteval tree\n\t */\n\tprivate _root: IntervalNode | null = null;\n\n\t/**\n\t *  Keep track of the length of the timeline.\n\t */\n\tprivate _length: number = 0;\n\n\t/**\n\t *  The event to add to the timeline. All events must\n\t *  have a time and duration value\n\t *  @param  event  The event to add to the timeline\n\t */\n\tadd(event: IntervalTimelineEvent): this {\n\t\tthis.assert(isDefined(event.time), \"Events must have a time property\");\n\t\tthis.assert(isDefined(event.duration), \"Events must have a duration parameter\");\n\n\t\tevent.time = event.time.valueOf();\n\t\tlet node: IntervalNode | null = new IntervalNode(event.time, event.time + event.duration, event);\n\t\tif (this._root === null) {\n\t\t\tthis._root = node;\n\t\t} else {\n\t\t\tthis._root.insert(node);\n\t\t}\n\t\tthis._length++;\n\t\t// Restructure tree to be balanced\n\t\twhile (node !== null) {\n\t\t\tnode.updateHeight();\n\t\t\tnode.updateMax();\n\t\t\tthis._rebalance(node);\n\t\t\tnode = node.parent;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Remove an event from the timeline.\n\t *  @param  event  The event to remove from the timeline\n\t */\n\tremove(event: IntervalTimelineEvent): this {\n\t\tif (this._root !== null) {\n\t\t\tconst results: IntervalNode[] = [];\n\t\t\tthis._root.search(event.time, results);\n\t\t\tfor (const node of results) {\n\t\t\t\tif (node.event === event) {\n\t\t\t\t\tthis._removeNode(node);\n\t\t\t\t\tthis._length--;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  The number of items in the timeline.\n\t *  @readOnly\n\t */\n\tget length(): number {\n\t\treturn this._length;\n\t}\n\n\t/**\n\t *  Remove events whose time time is after the given time\n\t *  @param  time  The time to query.\n\t */\n\tcancel(after: number): this {\n\t\tthis.forEachFrom(after, event => this.remove(event));\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Set the root node as the given node\n\t */\n\tprivate _setRoot(node: IntervalNode | null): void {\n\t\tthis._root = node;\n\t\tif (this._root !== null) {\n\t\t\tthis._root.parent = null;\n\t\t}\n\t}\n\n\t/**\n\t *  Replace the references to the node in the node's parent\n\t *  with the replacement node.\n\t */\n\tprivate _replaceNodeInParent(node: IntervalNode, replacement: IntervalNode | null): void {\n\t\tif (node.parent !== null) {\n\t\t\tif (node.isLeftChild()) {\n\t\t\t\tnode.parent.left = replacement;\n\t\t\t} else {\n\t\t\t\tnode.parent.right = replacement;\n\t\t\t}\n\t\t\tthis._rebalance(node.parent);\n\t\t} else {\n\t\t\tthis._setRoot(replacement);\n\t\t}\n\t}\n\n\t/**\n\t *  Remove the node from the tree and replace it with\n\t *  a successor which follows the schema.\n\t */\n\tprivate _removeNode(node): void {\n\t\tif (node.left === null && node.right === null) {\n\t\t\tthis._replaceNodeInParent(node, null);\n\t\t} else if (node.right === null) {\n\t\t\tthis._replaceNodeInParent(node, node.left);\n\t\t} else if (node.left === null) {\n\t\t\tthis._replaceNodeInParent(node, node.right);\n\t\t} else {\n\t\t\tconst balance = node.getBalance();\n\t\t\tlet replacement: IntervalNode;\n\t\t\tlet temp: IntervalNode | null = null;\n\t\t\tif (balance > 0) {\n\t\t\t\tif (node.left.right === null) {\n\t\t\t\t\treplacement = node.left;\n\t\t\t\t\treplacement.right = node.right;\n\t\t\t\t\ttemp = replacement;\n\t\t\t\t} else {\n\t\t\t\t\treplacement = node.left.right;\n\t\t\t\t\twhile (replacement.right !== null) {\n\t\t\t\t\t\treplacement = replacement.right;\n\t\t\t\t\t}\n\t\t\t\t\tif (replacement.parent) {\n\t\t\t\t\t\treplacement.parent.right = replacement.left;\n\t\t\t\t\t\ttemp = replacement.parent;\n\t\t\t\t\t\treplacement.left = node.left;\n\t\t\t\t\t\treplacement.right = node.right;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (node.right.left === null) {\n\t\t\t\treplacement = node.right;\n\t\t\t\treplacement.left = node.left;\n\t\t\t\ttemp = replacement;\n\t\t\t} else {\n\t\t\t\treplacement = node.right.left;\n\t\t\t\twhile (replacement.left !== null) {\n\t\t\t\t\treplacement = replacement.left;\n\t\t\t\t}\n\t\t\t\tif (replacement.parent) {\n\t\t\t\t\treplacement.parent.left = replacement.right;\n\t\t\t\t\ttemp = replacement.parent;\n\t\t\t\t\treplacement.left = node.left;\n\t\t\t\t\treplacement.right = node.right;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (node.parent !== null) {\n\t\t\t\tif (node.isLeftChild()) {\n\t\t\t\t\tnode.parent.left = replacement;\n\t\t\t\t} else {\n\t\t\t\t\tnode.parent.right = replacement;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._setRoot(replacement);\n\t\t\t}\n\t\t\tif (temp) {\n\t\t\t\tthis._rebalance(temp);\n\t\t\t}\n\t\t}\n\t\tnode.dispose();\n\t}\n\n\t/**\n\t *  Rotate the tree to the left\n\t *  @param  {IntervalNode}  node\n\t *  @private\n\t */\n\t_rotateLeft(node): void {\n\t\tconst parent = node.parent;\n\t\tconst isLeftChild = node.isLeftChild();\n\n\t\t// Make node.right the new root of this sub tree (instead of node)\n\t\tconst pivotNode = node.right;\n\t\tnode.right = pivotNode.left;\n\t\tpivotNode.left = node;\n\n\t\tif (parent !== null) {\n\t\t\tif (isLeftChild) {\n\t\t\t\tparent.left = pivotNode;\n\t\t\t} else {\n\t\t\t\tparent.right = pivotNode;\n\t\t\t}\n\t\t} else {\n\t\t\tthis._setRoot(pivotNode);\n\t\t}\n\t}\n\n\t/**\n\t *  Rotate the tree to the right\n\t *  @param  {IntervalNode}  node\n\t *  @private\n\t */\n\t_rotateRight(node): void {\n\t\tconst parent = node.parent;\n\t\tconst isLeftChild = node.isLeftChild();\n\n\t\t// Make node.left the new root of this sub tree (instead of node)\n\t\tconst pivotNode = node.left;\n\t\tnode.left = pivotNode.right;\n\t\tpivotNode.right = node;\n\n\t\tif (parent !== null) {\n\t\t\tif (isLeftChild) {\n\t\t\t\tparent.left = pivotNode;\n\t\t\t} else {\n\t\t\t\tparent.right = pivotNode;\n\t\t\t}\n\t\t} else {\n\t\t\tthis._setRoot(pivotNode);\n\t\t}\n\t}\n\n\t/**\n\t *  Balance the BST\n\t */\n\tprivate _rebalance(node: IntervalNode): void {\n\t\tconst balance = node.getBalance();\n\t\tif (balance > 1 && node.left) {\n\t\t\tif (node.left.getBalance() < 0) {\n\t\t\t\tthis._rotateLeft(node.left);\n\t\t\t} else {\n\t\t\t\tthis._rotateRight(node);\n\t\t\t}\n\t\t} else if (balance < -1 && node.right) {\n\t\t\tif (node.right.getBalance() > 0) {\n\t\t\t\tthis._rotateRight(node.right);\n\t\t\t} else {\n\t\t\t\tthis._rotateLeft(node);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *  Get an event whose time and duration span the give time. Will\n\t *  return the match whose \"time\" value is closest to the given time.\n\t *  @return  The event which spans the desired time\n\t */\n\tget(time: number): IntervalTimelineEvent | null {\n\t\tif (this._root !== null) {\n\t\t\tconst results: IntervalNode[] = [];\n\t\t\tthis._root.search(time, results);\n\t\t\tif (results.length > 0) {\n\t\t\t\tlet max = results[0];\n\t\t\t\tfor (let i = 1; i < results.length; i++) {\n\t\t\t\t\tif (results[i].low > max.low) {\n\t\t\t\t\t\tmax = results[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn max.event;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t *  Iterate over everything in the timeline.\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEach(callback: (event: IntervalTimelineEvent) => void): this {\n\t\tif (this._root !== null) {\n\t\t\tconst allNodes: IntervalNode[] = [];\n\t\t\tthis._root.traverse(node => allNodes.push(node));\n\t\t\tallNodes.forEach(node => {\n\t\t\t\tif (node.event) {\n\t\t\t\t\tcallback(node.event);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array in which the given time\n\t *  overlaps with the time and duration time of the event.\n\t *  @param  time The time to check if items are overlapping\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachAtTime(time: number, callback: (event: IntervalTimelineEvent) => void): this {\n\t\tif (this._root !== null) {\n\t\t\tconst results: IntervalNode[] = [];\n\t\t\tthis._root.search(time, results);\n\t\t\tresults.forEach(node => {\n\t\t\t\tif (node.event) {\n\t\t\t\t\tcallback(node.event);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array in which the time is greater\n\t *  than or equal to the given time.\n\t *  @param  time The time to check if items are before\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachFrom(time, callback): this {\n\t\tif (this._root !== null) {\n\t\t\tconst results: IntervalNode[] = [];\n\t\t\tthis._root.searchAfter(time, results);\n\t\t\tresults.forEach(node => {\n\t\t\t\tif (node.event) {\n\t\t\t\t\tcallback(node.event);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (this._root !== null) {\n\t\t\tthis._root.traverse(node => node.dispose());\n\t\t}\n\t\tthis._root = null;\n\t\treturn this;\n\t}\n}\n\n///////////////////////////////////////////////////////////////////////////\n// \tINTERVAL NODE HELPER\n///////////////////////////////////////////////////////////////////////////\n\n/**\n *  Represents a node in the binary search tree, with the addition\n *  of a \"high\" value which keeps track of the highest value of\n *  its children.\n *  References:\n *  https://brooknovak.wordpress.com/2013/12/07/augmented-interval-tree-in-c/\n *  http://www.mif.vu.lt/~valdas/ALGORITMAI/LITERATURA/Cormen/Cormen.pdf\n *  @param low\n *  @param high\n */\n// tslint:disable-next-line: max-classes-per-file\nclass IntervalNode {\n\n\t// the event container\n\tevent: IntervalTimelineEvent | null;\n\t// the low value\n\tlow: number;\n\t// the high value\n\thigh: number;\n\t// the high value for this and all child nodes\n\tmax: number;\n\t// the nodes to the left\n\tprivate _left: IntervalNode | null = null;\n\t// the nodes to the right\n\tprivate _right: IntervalNode | null = null;\n\t// the parent node\n\tparent: IntervalNode | null = null;\n\t// the number of child nodes\n\theight: number = 0;\n\n\tconstructor(low, high, event) {\n\t\tthis.event = event;\n\t\t// the low value\n\t\tthis.low = low;\n\t\t// the high value\n\t\tthis.high = high;\n\t\t// the high value for this and all child nodes\n\t\tthis.max = this.high;\n\t}\n\n\t/**\n\t *  Insert a node into the correct spot in the tree\n\t */\n\tinsert(node: IntervalNode): void {\n\t\tif (node.low <= this.low) {\n\t\t\tif (this.left === null) {\n\t\t\t\tthis.left = node;\n\t\t\t} else {\n\t\t\t\tthis.left.insert(node);\n\t\t\t}\n\t\t} else if (this.right === null) {\n\t\t\tthis.right = node;\n\t\t} else {\n\t\t\tthis.right.insert(node);\n\t\t}\n\t}\n\n\t/**\n\t *  Search the tree for nodes which overlap\n\t *  with the given point\n\t *  @param  point  The point to query\n\t *  @param  results  The array to put the results\n\t */\n\tsearch(point: number, results: IntervalNode[]): void {\n\t\t// If p is to the right of the rightmost point of any interval\n\t\t// in this node and all children, there won't be any matches.\n\t\tif (point > this.max) {\n\t\t\treturn;\n\t\t}\n\t\t// Search left children\n\t\tif (this.left !== null) {\n\t\t\tthis.left.search(point, results);\n\t\t}\n\t\t// Check this node\n\t\tif (this.low <= point && this.high > point) {\n\t\t\tresults.push(this);\n\t\t}\n\t\t// If p is to the left of the time of this interval,\n\t\t// then it can't be in any child to the right.\n\t\tif (this.low > point) {\n\t\t\treturn;\n\t\t}\n\t\t// Search right children\n\t\tif (this.right !== null) {\n\t\t\tthis.right.search(point, results);\n\t\t}\n\t}\n\n\t/**\n\t *  Search the tree for nodes which are less\n\t *  than the given point\n\t *  @param  point  The point to query\n\t *  @param  results  The array to put the results\n\t */\n\tsearchAfter(point: number, results: IntervalNode[]): void {\n\t\t// Check this node\n\t\tif (this.low >= point) {\n\t\t\tresults.push(this);\n\t\t\tif (this.left !== null) {\n\t\t\t\tthis.left.searchAfter(point, results);\n\t\t\t}\n\t\t}\n\t\t// search the right side\n\t\tif (this.right !== null) {\n\t\t\tthis.right.searchAfter(point, results);\n\t\t}\n\t}\n\n\t/**\n\t *  Invoke the callback on this element and both it's branches\n\t *  @param  {Function}  callback\n\t */\n\ttraverse(callback: (self: IntervalNode) => void): void {\n\t\tcallback(this);\n\t\tif (this.left !== null) {\n\t\t\tthis.left.traverse(callback);\n\t\t}\n\t\tif (this.right !== null) {\n\t\t\tthis.right.traverse(callback);\n\t\t}\n\t}\n\n\t/**\n\t *  Update the height of the node\n\t */\n\tupdateHeight(): void {\n\t\tif (this.left !== null && this.right !== null) {\n\t\t\tthis.height = Math.max(this.left.height, this.right.height) + 1;\n\t\t} else if (this.right !== null) {\n\t\t\tthis.height = this.right.height + 1;\n\t\t} else if (this.left !== null) {\n\t\t\tthis.height = this.left.height + 1;\n\t\t} else {\n\t\t\tthis.height = 0;\n\t\t}\n\t}\n\n\t/**\n\t *  Update the height of the node\n\t */\n\tupdateMax(): void {\n\t\tthis.max = this.high;\n\t\tif (this.left !== null) {\n\t\t\tthis.max = Math.max(this.max, this.left.max);\n\t\t}\n\t\tif (this.right !== null) {\n\t\t\tthis.max = Math.max(this.max, this.right.max);\n\t\t}\n\t}\n\n\t/**\n\t *  The balance is how the leafs are distributed on the node\n\t *  @return  Negative numbers are balanced to the right\n\t */\n\tgetBalance(): number {\n\t\tlet balance = 0;\n\t\tif (this.left !== null && this.right !== null) {\n\t\t\tbalance = this.left.height - this.right.height;\n\t\t} else if (this.left !== null) {\n\t\t\tbalance = this.left.height + 1;\n\t\t} else if (this.right !== null) {\n\t\t\tbalance = -(this.right.height + 1);\n\t\t}\n\t\treturn balance;\n\t}\n\n\t/**\n\t *  @returns true if this node is the left child of its parent\n\t */\n\tisLeftChild(): boolean {\n\t\treturn this.parent !== null && this.parent.left === this;\n\t}\n\n\t/**\n\t *  get/set the left node\n\t */\n\tget left(): IntervalNode | null {\n\t\treturn this._left;\n\t}\n\n\tset left(node: IntervalNode | null) {\n\t\tthis._left = node;\n\t\tif (node !== null) {\n\t\t\tnode.parent = this;\n\t\t}\n\t\tthis.updateHeight();\n\t\tthis.updateMax();\n\t}\n\n\t/**\n\t *  get/set the right node\n\t */\n\tget right(): IntervalNode | null {\n\t\treturn this._right;\n\t}\n\n\tset right(node: IntervalNode | null) {\n\t\tthis._right = node;\n\t\tif (node !== null) {\n\t\t\tnode.parent = this;\n\t\t}\n\t\tthis.updateHeight();\n\t\tthis.updateMax();\n\t}\n\n\t/**\n\t *  null out references.\n\t */\n\tdispose(): void {\n\t\tthis.parent = null;\n\t\tthis._left = null;\n\t\tthis._right = null;\n\t\tthis.event = null;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\n\ninterface VolumeOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n\tmute: boolean;\n}\n\n/**\n *  @class Volume is a simple volume node, useful for creating a volume fader.\n *\n *  @extends {Tone.AudioNode}\n *  @constructor\n *  @param {Decibels} [volume=0] the initial volume\n *  @example\n * var vol = new Volume(-12);\n * instrument.chain(vol, Tone.Master);\n */\nexport class Volume extends ToneAudioNode<VolumeOptions> {\n\n\tname = \"Volume\";\n\n\t/**\n\t * the output node\n\t */\n\toutput: Gain<Decibels> = new Gain({\n\t\tcontext: this.context,\n\t\tunits: \"decibels\",\n\t});\n\tprotected _internalChannels = [this.output];\n\n\t/**\n\t * Input and output are the same\n\t */\n\tinput = this.output;\n\n\t/**\n\t * The unmuted volume\n\t */\n\tprivate _unmutedVolume: Decibels;\n\n\t/**\n\t *  The volume control in decibels.\n\t */\n\tvolume: Param<Decibels> = this.output.gain;\n\n\tconstructor(options?: Decibels | Partial<VolumeOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Volume.getDefaults(), arguments, [\"volume\"]));\n\t\tconst options = optionsFromArguments(Volume.getDefaults(), arguments, [\"volume\"]);\n\n\t\tthis.volume.value = options.volume;\n\t\treadOnly(this, \"volume\");\n\t\tthis._unmutedVolume = options.volume;\n\n\t\t// set the mute initially\n\t\tthis.mute = options.mute;\n\t}\n\n\tstatic getDefaults(): VolumeOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmute: false,\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Mute the output.\n\t * @example\n\t * //mute the output\n\t * volume.mute = true;\n\t */\n\tget mute(): boolean {\n\t\treturn this.volume.value === -Infinity;\n\t}\n\tset mute(mute: boolean) {\n\t\tif (!this.mute && mute) {\n\t\t\tthis._unmutedVolume = this.volume.value;\n\t\t\t// maybe it should ramp here?\n\t\t\tthis.volume.value = -Infinity;\n\t\t} else if (this.mute && !mute) {\n\t\t\tthis.volume.value = this._unmutedVolume;\n\t\t}\n\t}\n\n\t/**\n\t *  clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.input.dispose();\n\t\tthis.volume.dispose();\n\t\treturn this;\n\t}\n}\n","import { Volume } from \"../../component/channel/Volume\";\nimport { connectSeries } from \"../Connect\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { onContextClose, onContextInit } from \"./ContextInitialization\";\nimport { Gain } from \"./Gain\";\nimport { Param } from \"./Param\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"./ToneAudioNode\";\n\ninterface DestinationOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n\tmute: boolean;\n}\n\n/**\n *  A single master output which is connected to the\n *  AudioDestinationNode (aka your speakers).\n *  It provides useful conveniences such as the ability\n *  to set the volume and mute the entire application.\n *  It also gives you the ability to apply master effects to your application.\n *\n *  @example\n * //the audio will go from the oscillator to the speakers\n * oscillator.connect(Destination);\n * //a convenience for connecting to the master output is also provided:\n * oscillator.toDestination();\n * //the above two examples are equivalent.\n */\nexport class Destination extends ToneAudioNode<DestinationOptions> {\n\n\tname = \"Destination\";\n\n\tinput: Volume = new Volume({ context: this.context });\n\toutput: Gain = new Gain({ context : this.context });\n\n\t/**\n\t * The volume of the master output.\n\t */\n\tvolume: Param<Decibels> = this.input.volume;\n\t_internalChannels = [this.input, this.output];\n\n\tconstructor(options: Partial<DestinationOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Destination.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Destination.getDefaults(), arguments);\n\n\t\tconnectSeries(this.input, this.output, this.context.rawContext.destination);\n\n\t\tthis.volume.value = options.volume;\n\t\tthis.mute = options.mute;\n\t}\n\n\tstatic getDefaults(): DestinationOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmute: false,\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Mute the output.\n\t * @example\n\t * //mute the output\n\t * Destination.mute = true;\n\t */\n\tget mute(): boolean {\n\t\treturn this.input.mute;\n\t}\n\n\tset mute(mute: boolean) {\n\t\tthis.input.mute = mute;\n\t}\n\n\t/**\n\t *  Add a master effects chain. NOTE: this will disconnect any nodes which were previously\n\t *  chained in the master effects chain.\n\t *  @param nodes All arguments will be connected in a row and the Master will be routed through it.\n\t *  @return  {Destination}  this\n\t *  @example\n\t * //some overall compression to keep the levels in check\n\t * var masterCompressor = new Tone.Compressor({\n\t * \t\"threshold\" : -6,\n\t * \t\"ratio\" : 3,\n\t * \t\"attack\" : 0.5,\n\t * \t\"release\" : 0.1\n\t * });\n\t * //give a little boost to the lows\n\t * var lowBump = new Tone.Filter(200, \"lowshelf\");\n\t * //route everything through the filter\n\t * //and compressor before going to the speakers\n\t * Destination.chain(lowBump, masterCompressor);\n\t */\n\tchain(...args: Array<AudioNode | ToneAudioNode>): this {\n\t\tthis.input.disconnect();\n\t\targs.unshift(this.input);\n\t\targs.push(this.output);\n\t\tconnectSeries(...args);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.volume.dispose();\n\t\treturn this;\n\t}\n}\n\n///////////////////////////////////////////////////////////////////////////\n// \tINITIALIZATION\n///////////////////////////////////////////////////////////////////////////\n\nonContextInit(context => {\n\tcontext.destination = new Destination({ context });\n});\n\nonContextClose(context => {\n\tcontext.destination.dispose();\n});\n","import { noOp } from \"../util/Interface\";\n\ntype Transport = import(\"../clock/Transport\").Transport;\n\nexport interface TransportEventOptions {\n\tcallback: (time: number) => void;\n\tonce: boolean;\n\ttime: Ticks;\n}\n\n/**\n * TransportEvent is an internal class used by (Tone.Transport)[Transport]\n * to schedule events. Do no invoke this class directly, it is\n * handled from within Tone.Transport.\n * @param Transport The transport object which the event belongs to\n */\nexport class TransportEvent {\n\n\t/**\n\t * Reference to the Transport that created it\n\t */\n\tprotected transport: Transport;\n\n\t/**\n\t * The unique id of the event\n\t */\n\tid: number = TransportEvent._eventId++;\n\n\t/**\n\t * The time the event starts\n\t */\n\ttime: Ticks;\n\n\t/**\n\t * The callback to invoke\n\t */\n\tprivate callback?: (time: Seconds) => void;\n\n\t/**\n\t * If the event should be removed after being invoked.\n\t */\n\tprivate _once: boolean;\n\n\tconstructor(transport: Transport, opts: Partial<TransportEventOptions>) {\n\n\t\tconst options: TransportEventOptions = Object.assign(TransportEvent.getDefaults(), opts);\n\n\t\tthis.transport = transport;\n\t\tthis.callback = options.callback;\n\t\tthis._once = options.once;\n\t\tthis.time = options.time;\n\t}\n\n\tstatic getDefaults(): TransportEventOptions {\n\t\treturn {\n\t\t\tcallback: noOp,\n\t\t\tonce: false,\n\t\t\ttime: 0,\n\t\t};\n\t}\n\n\t/**\n\t * Current ID counter\n\t */\n\tprivate static _eventId: number = 0;\n\n\t/**\n\t * Invoke the event callback.\n\t * @param  time  The AudioContext time in seconds of the event\n\t */\n\tinvoke(time: Seconds): void {\n\t\tif (this.callback) {\n\t\t\tthis.callback(time);\n\t\t\tif (this._once) {\n\t\t\t\tthis.transport.clear(this.id);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tthis.callback = undefined;\n\t\treturn this;\n\t}\n}\n","import { Context } from \"../context/Context\";\nimport { Ticks, TicksClass } from \"../type/Ticks\";\nimport { TransportEvent, TransportEventOptions } from \"./TransportEvent\";\n\ntype Transport = import(\"../clock/Transport\").Transport;\n\ninterface TransportRepeatEventOptions extends TransportEventOptions {\n\tinterval: Ticks;\n\tduration: Ticks;\n}\n\n/**\n * TransportRepeatEvent is an internal class used by Tone.Transport\n * to schedule repeat events. This class should not be instantiated directly.\n */\nexport class TransportRepeatEvent extends TransportEvent {\n\n\t/**\n\t * When the event should stop repeating\n\t */\n\tprivate duration: Ticks;\n\n\t/**\n\t * The interval of the repeated event\n\t */\n\tprivate _interval: Ticks;\n\n\t/**\n\t * The ID of the current timeline event\n\t */\n\tprivate _currentId: number = -1;\n\n\t/**\n\t * The ID of the next timeline event\n\t */\n\tprivate _nextId: number = -1;\n\n\t/**\n\t * The time of the next event\n\t */\n\tprivate _nextTick = this.time;\n\n\t/**\n\t * a reference to the bound start method\n\t */\n\tprivate _boundRestart = this._restart.bind(this);\n\n\t/**\n\t * The audio context belonging to this event\n\t */\n\tprotected context: Context;\n\n\tconstructor(transport: Transport, opts: Partial<TransportRepeatEventOptions>) {\n\n\t\tsuper(transport, opts);\n\n\t\tconst options = Object.assign(TransportRepeatEvent.getDefaults(), opts);\n\n\t\tthis.duration = Ticks(options.duration).valueOf();\n\t\tthis._interval = Ticks(options.interval).valueOf();\n\t\tthis._nextTick = options.time;\n\t\tthis.transport.on(\"start\", this._boundRestart);\n\t\tthis.transport.on(\"loopStart\", this._boundRestart);\n\t\tthis.context = this.transport.context;\n\t\tthis._restart();\n\t}\n\n\tstatic getDefaults(): TransportRepeatEventOptions {\n\t\treturn Object.assign({}, TransportEvent.getDefaults(), {\n\t\t\tduration: Infinity,\n\t\t\tinterval: 1,\n\t\t\tonce: false,\n\t\t});\n\t}\n\n\t/**\n\t * Invoke the callback. Returns the tick time which\n\t * the next event should be scheduled at.\n\t * @param  time  The AudioContext time in seconds of the event\n\t */\n\tinvoke(time: Seconds): void {\n\t\t// create more events if necessary\n\t\tthis._createEvents(time);\n\t\t// call the super class\n\t\tsuper.invoke(time);\n\t}\n\n\t/**\n\t * Push more events onto the timeline to keep up with the position of the timeline\n\t */\n\tprivate _createEvents(time: Seconds): void {\n\t\t// schedule the next event\n\t\tconst ticks = this.transport.getTicksAtTime(time);\n\t\tif (ticks >= this.time && ticks >= this._nextTick && this._nextTick + this._interval < this.time + this.duration) {\n\t\t\tthis._nextTick += this._interval;\n\t\t\tthis._currentId = this._nextId;\n\t\t\tthis._nextId = this.transport.scheduleOnce(this.invoke.bind(this),\n\t\t\t\tnew TicksClass(this.context, this._nextTick).toSeconds());\n\t\t}\n\t}\n\n\t/**\n\t * Push more events onto the timeline to keep up with the position of the timeline\n\t */\n\tprivate _restart(time?: Time): void {\n\t\tthis.transport.clear(this._currentId);\n\t\tthis.transport.clear(this._nextId);\n\t\tthis._nextTick = this.time;\n\t\tconst ticks = this.transport.getTicksAtTime(time);\n\t\tif (ticks > this.time) {\n\t\t\tthis._nextTick = this.time + Math.ceil((ticks - this.time) / this._interval) * this._interval;\n\t\t}\n\t\tthis._currentId = this.transport.scheduleOnce(this.invoke.bind(this),\n\t\t\tnew TicksClass(this.context, this._nextTick).toSeconds());\n\t\tthis._nextTick += this._interval;\n\t\tthis._nextId = this.transport.scheduleOnce(this.invoke.bind(this),\n\t\t\tnew TicksClass(this.context, this._nextTick).toSeconds());\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.transport.clear(this._currentId);\n\t\tthis.transport.clear(this._nextId);\n\t\tthis.transport.off(\"start\", this._boundRestart);\n\t\tthis.transport.off(\"loopStart\", this._boundRestart);\n\t\treturn this;\n\t}\n}\n","import { Time, TimeClass } from \"../../core/type/Time\";\nimport { PlaybackState } from \"../../core/util/StateTimeline\";\nimport { Signal } from \"../../signal/Signal\";\nimport { onContextClose, onContextInit } from \"../context/ContextInitialization\";\nimport { Gain } from \"../context/Gain\";\nimport { Param } from \"../context/Param\";\nimport { ToneWithContext, ToneWithContextOptions } from \"../context/ToneWithContext\";\nimport { TicksClass } from \"../type/Ticks\";\nimport { TransportTimeClass } from \"../type/TransportTime\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Emitter } from \"../util/Emitter\";\nimport { readOnly, writable } from \"../util/Interface\";\nimport { IntervalTimeline } from \"../util/IntervalTimeline\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isArray, isDefined } from \"../util/TypeCheck\";\nimport { Clock } from \"./Clock\";\nimport { TransportEvent } from \"./TransportEvent\";\nimport { TransportRepeatEvent } from \"./TransportRepeatEvent\";\n\ninterface TransportOptions extends ToneWithContextOptions {\n\tbpm: BPM;\n\tswing: NormalRange;\n\tswingSubdivision: Subdivision;\n\ttimeSignature: number;\n\tloopStart: Time;\n\tloopEnd: Time;\n\tppq: number;\n}\n\ntype TransportEventNames = \"start\" | \"stop\" | \"pause\" | \"loop\" | \"loopEnd\" | \"loopStart\";\n\ninterface SyncedSignalEvent {\n\tsignal: Signal;\n\tinitial: number;\n\tratio: Gain;\n}\n\ntype TransportCallback = (time: Seconds) => void;\n\n/**\n * Transport for timing musical events.\n * Supports tempo curves and time changes. Unlike browser-based timing (setInterval, requestAnimationFrame)\n * Transport timing events pass in the exact time of the scheduled event\n * in the argument of the callback function. Pass that time value to the object\n * you're scheduling. <br><br>\n * A single transport is created for you when the library is initialized.\n * <br><br>\n * The transport emits the events: \"start\", \"stop\", \"pause\", and \"loop\" which are\n * called with the time of that event as the argument.\n *\n * @example\n * //repeated event every 8th note\n * Transport.scheduleRepeat(function(time){\n * \t//do something with the time\n * }, \"8n\");\n * @example\n * //schedule an event on the 16th measure\n * Transport.schedule(function(time){\n * \t//do something with the time\n * }, \"16:0:0\");\n */\nexport class Transport extends ToneWithContext<TransportOptions> implements Emitter<TransportEventNames> {\n\n\tname = \"Transport\";\n\n\t///////////////////////////////////////////////////////////////////////\n\t// \tLOOPING\n\t//////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * \tIf the transport loops or not.\n\t */\n\tloop: boolean = false;\n\n\t/**\n\t * \tThe loop start position in ticks\n\t */\n\tprivate _loopStart: Ticks = 0;\n\n\t/**\n\t * \tThe loop end position in ticks\n\t */\n\tprivate _loopEnd: Ticks = 0;\n\n\t///////////////////////////////////////////////////////////////////////\n\t// \tCLOCK/TEMPO\n\t//////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Pulses per quarter is the number of ticks per quarter note.\n\t */\n\tprivate _ppq: number;\n\n\t/**\n\t *  watches the main oscillator for timing ticks\n\t *  initially starts at 120bpm\n\t */\n\tprivate _clock: Clock<BPM>;\n\n\t/**\n\t * The Beats Per Minute of the Transport.\n\t * @example\n\t * Transport.bpm.value = 80;\n\t * //ramp the bpm to 120 over 10 seconds\n\t * Transport.bpm.rampTo(120, 10);\n\t */\n\tbpm: Param<BPM>;\n\n\t/**\n\t *  The time signature, or more accurately the numerator\n\t *  of the time signature over a denominator of 4.\n\t */\n\tprivate _timeSignature: number;\n\n\t///////////////////////////////////////////////////////////////////////\n\t// \tTIMELINE EVENTS\n\t//////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  All the events in an object to keep track by ID\n\t */\n\tprivate _scheduledEvents = {};\n\n\t/**\n\t * \tThe scheduled events.\n\t */\n\tprivate _timeline: Timeline<TransportEvent> = new Timeline();\n\n\t/**\n\t *  Repeated events\n\t */\n\tprivate _repeatedEvents: IntervalTimeline = new IntervalTimeline();\n\n\t/**\n\t *  All of the synced Signals\n\t */\n\tprivate _syncedSignals: SyncedSignalEvent[] = [];\n\n\t///////////////////////////////////////////////////////////////////////\n\t// \tSWING\n\t//////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  The subdivision of the swing\n\t */\n\tprivate _swingTicks: Ticks;\n\n\t/**\n\t *  The swing amount\n\t */\n\tprivate _swingAmount: NormalRange = 0;\n\n\tconstructor(options?: Partial<TransportOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Transport.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Transport.getDefaults(), arguments);\n\n\t\t// CLOCK/TEMPO\n\t\tthis._ppq = options.ppq;\n\t\tthis._clock = new Clock({\n\t\t\tcallback : this._processTick.bind(this),\n\t\t\tcontext: this.context,\n\t\t\tfrequency : 0,\n\t\t\tunits: \"bpm\",\n\t\t});\n\t\tthis._bindClockEvents();\n\t\tthis.bpm = this._clock.frequency;\n\t\tthis._clock.frequency.multiplier = options.ppq;\n\t\tthis.bpm.value = options.bpm;\n\t\treadOnly(this, \"bpm\");\n\t\tthis._timeSignature = options.timeSignature;\n\n\t\t// SWING\n\t\tthis._swingTicks = options.ppq / 2; // 8n\n\t}\n\n\tstatic getDefaults(): TransportOptions {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tbpm: 120,\n\t\t\tloopEnd: \"4m\" as Subdivision,\n\t\t\tloopStart: 0,\n\t\t\tppq: 192,\n\t\t\tswing: 0,\n\t\t\tswingSubdivision: \"8n\" as Subdivision,\n\t\t\ttimeSignature: 4,\n\t\t});\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////////\n\t// \tTICKS\n\t///////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  called on every tick\n\t *  @param  tickTime clock relative tick time\n\t *  @private\n\t */\n\tprivate _processTick(tickTime: Seconds, ticks: Ticks): void {\n\t\t// handle swing\n\t\tif (this._swingAmount > 0 &&\n\t\t\tticks % this._ppq !== 0 && // not on a downbeat\n\t\t\tticks % (this._swingTicks * 2) !== 0) {\n\t\t\t// add some swing\n\t\t\tconst progress = (ticks % (this._swingTicks * 2)) / (this._swingTicks * 2);\n\t\t\tconst amount = Math.sin((progress) * Math.PI) * this._swingAmount;\n\t\t\ttickTime += new TicksClass(this.context, this._swingTicks * 2 / 3).toSeconds() * amount;\n\t\t}\n\t\t// do the loop test\n\t\tif (this.loop) {\n\t\t\tif (ticks >= this._loopEnd) {\n\t\t\t\tthis.emit(\"loopEnd\", tickTime);\n\t\t\t\tthis._clock.setTicksAtTime(this._loopStart, tickTime);\n\t\t\t\tticks = this._loopStart;\n\t\t\t\tthis.emit(\"loopStart\", tickTime, this._clock.getSecondsAtTime(tickTime));\n\t\t\t\tthis.emit(\"loop\", tickTime);\n\t\t\t}\n\t\t}\n\t\t// invoke the timeline events scheduled on this tick\n\t\tthis._timeline.forEachAtTime(ticks, event => event.invoke(tickTime));\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////////\n\t// \tSCHEDULABLE EVENTS\n\t///////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Schedule an event along the timeline.\n\t * @param callback The callback to be invoked at the time.\n\t * @param time The time to invoke the callback at.\n\t * @return The id of the event which can be used for canceling the event.\n\t * @example\n\t * //trigger the callback when the Transport reaches the desired time\n\t * Transport.schedule(function(time){\n\t * \tenvelope.triggerAttack(time);\n\t * }, \"128i\");\n\t */\n\tschedule(callback: TransportCallback, time: TransportTime | TransportTimeClass): number {\n\t\tconst event = new TransportEvent(this, {\n\t\t\tcallback,\n\t\t\ttime : new TransportTimeClass(this.context, time).toTicks(),\n\t\t});\n\t\treturn this._addEvent(event, this._timeline);\n\t}\n\n\t/**\n\t * Schedule a repeated event along the timeline. The event will fire\n\t * at the `interval` starting at the `startTime` and for the specified\n\t * `duration`.\n\t * @param  callback   The callback to invoke.\n\t * @param  interval   The duration between successive callbacks. Must be a positive number.\n\t * @param  startTime  When along the timeline the events should start being invoked.\n\t * @param  duration How long the event should repeat.\n\t * @return  The ID of the scheduled event. Use this to cancel the event.\n\t * @example\n\t * //a callback invoked every eighth note after the first measure\n\t * Transport.scheduleRepeat(callback, \"8n\", \"1m\");\n\t */\n\tscheduleRepeat(\n\t\tcallback: TransportCallback,\n\t\tinterval: Time | TimeClass,\n\t\tstartTime?: TransportTime | TransportTimeClass,\n\t\tduration: Time = Infinity,\n\t): number {\n\t\tconst event = new TransportRepeatEvent(this, {\n\t\t\tcallback,\n\t\t\tduration : new TimeClass(this.context, duration).toTicks(),\n\t\t\tinterval: new TimeClass(this.context, interval).toTicks(),\n\t\t\ttime : new TransportTimeClass(this.context, startTime).toTicks(),\n\t\t});\n\t\t// kick it off if the Transport is started\n\t\t// @ts-ignore\n\t\treturn this._addEvent(event, this._repeatedEvents);\n\t}\n\n\t/**\n\t *  Schedule an event that will be removed after it is invoked.\n\t *  @param callback The callback to invoke once.\n\t *  @param time The time the callback should be invoked.\n\t *  @returns The ID of the scheduled event.\n\t */\n\tscheduleOnce(callback: TransportCallback, time: TransportTime | TransportTimeClass): number {\n\t\tconst event = new TransportEvent(this, {\n\t\t\tcallback,\n\t\t\tonce : true,\n\t\t\ttime : new TransportTimeClass(this.context, time).toTicks(),\n\t\t});\n\t\treturn this._addEvent(event, this._timeline);\n\t}\n\n\t/**\n\t * Clear the passed in event id from the timeline\n\t * @param eventId The id of the event.\n\t */\n\tclear(eventId: number): this {\n\t\tif (this._scheduledEvents.hasOwnProperty(eventId)) {\n\t\t\tconst item = this._scheduledEvents[eventId.toString()];\n\t\t\titem.timeline.remove(item.event);\n\t\t\titem.event.dispose();\n\t\t\tdelete this._scheduledEvents[eventId.toString()];\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add an event to the correct timeline. Keep track of the\n\t * timeline it was added to.\n\t * @returns the event id which was just added\n\t */\n\tprivate _addEvent(event: TransportEvent, timeline: Timeline<TransportEvent>): number {\n\t\tthis._scheduledEvents[event.id.toString()] = {\n\t\t\tevent,\n\t\t\ttimeline,\n\t\t};\n\t\ttimeline.add(event);\n\t\treturn event.id;\n\t}\n\n\t/**\n\t * Remove scheduled events from the timeline after\n\t * the given time. Repeated events will be removed\n\t * if their startTime is after the given time\n\t * @param after Clear all events after this time.\n\t */\n\tcancel(after: TransportTime = 0): this {\n\t\tconst computedAfter = this.toTicks(after);\n\t\tthis._timeline.forEachFrom(computedAfter, event => this.clear(event.id));\n\t\tthis._repeatedEvents.forEachFrom(computedAfter, event => this.clear(event.id));\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////////\n\t// \tSTART/STOP/PAUSE\n\t///////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Bind start/stop/pause events from the clock and emit them.\n\t */\n\tprivate _bindClockEvents(): void {\n\t\tthis._clock.on(\"start\", (time, offset) => {\n\t\t\toffset = new TicksClass(this.context, offset).toSeconds();\n\t\t\tthis.emit(\"start\", time, offset);\n\t\t});\n\n\t\tthis._clock.on(\"stop\", (time) => {\n\t\t\tthis.emit(\"stop\", time);\n\t\t});\n\n\t\tthis._clock.on(\"pause\", (time) => {\n\t\t\tthis.emit(\"pause\", time);\n\t\t});\n\t}\n\n\t/**\n\t *  Returns the playback state of the source, either \"started\", \"stopped\", or \"paused\"\n\t */\n\tget state(): PlaybackState {\n\t\treturn this._clock.getStateAtTime(this.now());\n\t}\n\n\t/**\n\t * Start the transport and all sources synced to the transport.\n\t * @param  time The time when the transport should start.\n\t * @param  offset The timeline offset to start the transport.\n\t * @example\n\t * //start the transport in one second starting at beginning of the 5th measure.\n\t * Transport.start(\"+1\", \"4:0:0\");\n\t */\n\tstart(time?: Time, offset?: TransportTime): this {\n\t\tlet offsetTicks;\n\t\tif (isDefined(offset)) {\n\t\t\toffsetTicks = this.toTicks(offset);\n\t\t}\n\t\t// start the clock\n\t\tthis._clock.start(time, offsetTicks);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the transport and all sources synced to the transport.\n\t * @param time The time when the transport should stop.\n\t * @example\n\t * Transport.stop();\n\t */\n\tstop(time?: Time): this {\n\t\tthis._clock.stop(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Pause the transport and all sources synced to the transport.\n\t */\n\tpause(time?: Time): this {\n\t\tthis._clock.pause(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Toggle the current state of the transport. If it is\n\t * started, it will stop it, otherwise it will start the Transport.\n\t * @param  time The time of the event\n\t */\n\ttoggle(time?: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tif (this._clock.getStateAtTime(time) !== \"started\") {\n\t\t\tthis.start(time);\n\t\t} else {\n\t\t\tthis.stop(time);\n\t\t}\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////////\n\t// \tSETTERS/GETTERS\n\t///////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * The time signature as just the numerator over 4.\n\t * For example 4/4 would be just 4 and 6/8 would be 3.\n\t * @example\n\t * //common time\n\t * Transport.timeSignature = 4;\n\t * // 7/8\n\t * Transport.timeSignature = [7, 8];\n\t * //this will be reduced to a single number\n\t * Transport.timeSignature; //returns 3.5\n\t */\n\tget timeSignature(): TimeSignature {\n\t\treturn this._timeSignature;\n\t}\n\tset timeSignature(timeSig: TimeSignature) {\n\t\tif (isArray(timeSig)) {\n\t\t\ttimeSig = (timeSig[0] / timeSig[1]) * 4;\n\t\t}\n\t\tthis._timeSignature = timeSig;\n\t}\n\n\t/**\n\t * When the Transport.loop = true, this is the starting position of the loop.\n\t */\n\tget loopStart(): Time {\n\t\treturn Time(this._loopStart, \"i\").toSeconds();\n\t}\n\tset loopStart(startPosition: Time) {\n\t\tthis._loopStart = this.toTicks(startPosition);\n\t}\n\n\t/**\n\t * When the Transport.loop = true, this is the ending position of the loop.\n\t */\n\tget loopEnd(): Time {\n\t\treturn Time(this._loopEnd, \"i\").toSeconds();\n\t}\n\tset loopEnd(endPosition: Time) {\n\t\tthis._loopEnd = this.toTicks(endPosition);\n\t}\n\n\t/**\n\t * Set the loop start and stop at the same time.\n\t * @example\n\t * //loop over the first measure\n\t * Transport.setLoopPoints(0, \"1m\");\n\t * Transport.loop = true;\n\t */\n\tsetLoopPoints(startPosition: TransportTime, endPosition: TransportTime): this {\n\t\tthis.loopStart = startPosition;\n\t\tthis.loopEnd = endPosition;\n\t\treturn this;\n\t}\n\n\t/**\n\t * The swing value. Between 0-1 where 1 equal to the note + half the subdivision.\n\t */\n\tget swing(): NormalRange {\n\t\treturn this._swingAmount;\n\t}\n\tset swing(amount: NormalRange) {\n\t\t// scale the values to a normal range\n\t\tthis._swingAmount = amount;\n\t}\n\n\t/**\n\t * Set the subdivision which the swing will be applied to.\n\t * The default value is an 8th note. Value must be less\n\t * than a quarter note.\n\t */\n\tget swingSubdivision(): Subdivision {\n\t\treturn new TicksClass(this.context, this._swingTicks).toNotation();\n\t}\n\tset swingSubdivision(subdivision: Subdivision) {\n\t\tthis._swingTicks = this.toTicks(subdivision);\n\t}\n\n\t/**\n\t *  The Transport's position in Bars:Beats:Sixteenths.\n\t *  Setting the value will jump to that position right away.\n\t */\n\tget position(): BarsBeatsSixteenths | Time {\n\t\tconst now = this.now();\n\t\tconst ticks = this._clock.getTicksAtTime(now);\n\t\treturn new TicksClass(this.context, ticks).toBarsBeatsSixteenths();\n\t}\n\tset position(progress: Time) {\n\t\tconst ticks = this.toTicks(progress);\n\t\tthis.ticks = ticks;\n\t}\n\n\t/**\n\t *  The Transport's position in seconds\n\t *  Setting the value will jump to that position right away.\n\t */\n\tget seconds(): Seconds {\n\t\treturn this._clock.seconds;\n\t}\n\n\tset seconds(s: Seconds) {\n\t\tconst now = this.now();\n\t\tconst ticks = this._clock.frequency.timeToTicks(s, now);\n\t\tthis.ticks = ticks;\n\t}\n\n\t/**\n\t *  The Transport's loop position as a normalized value. Always\n\t *  returns 0 if the transport if loop is not true.\n\t */\n\tget progress(): NormalRange {\n\t\tif (this.loop) {\n\t\t\tconst now = this.now();\n\t\t\tconst ticks = this._clock.getTicksAtTime(now);\n\t\t\treturn (ticks - this._loopStart) / (this._loopEnd - this._loopStart);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t *  The transports current tick position.\n\t */\n\tget ticks(): Ticks {\n\t\treturn this._clock.ticks;\n\t}\n\tset ticks(t: Ticks) {\n\t\tif (this._clock.ticks !== t) {\n\t\t\tconst now = this.now();\n\t\t\t// stop everything synced to the transport\n\t\t\tif (this.state === \"started\") {\n\t\t\t\tthis.emit(\"stop\", now);\n\t\t\t\tthis._clock.setTicksAtTime(t, now);\n\t\t\t\t// restart it with the new time\n\t\t\t\tthis.emit(\"start\", now, this.seconds);\n\t\t\t} else {\n\t\t\t\tthis._clock.setTicksAtTime(t, now);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Get the clock's ticks at the given time.\n\t * @param  time  When to get the tick value\n\t * @return The tick value at the given time.\n\t */\n\tgetTicksAtTime(time?: Time): Ticks {\n\t\treturn Math.round(this._clock.getTicksAtTime(time));\n\t}\n\n\t/**\n\t *  Return the elapsed seconds at the given time.\n\t *  @param  time  When to get the elapsed seconds\n\t *  @return  The number of elapsed seconds\n\t */\n\tgetSecondsAtTime(time: Time): Seconds {\n\t\treturn this._clock.getSecondsAtTime(time);\n\t}\n\n\t/**\n\t *  Pulses Per Quarter note. This is the smallest resolution\n\t *  the Transport timing supports. This should be set once\n\t *  on initialization and not set again. Changing this value\n\t *  after other objects have been created can cause problems.\n\t */\n\tget PPQ(): number {\n\t\treturn this._clock.frequency.multiplier;\n\t}\n\tset PPQ(ppq: number) {\n\t\tthis._clock.frequency.multiplier = ppq;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////////\n\t// \tSYNCING\n\t///////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Returns the time aligned to the next subdivision\n\t * of the Transport. If the Transport is not started,\n\t * it will return 0.\n\t * Note: this will not work precisely during tempo ramps.\n\t * @param  subdivision  The subdivision to quantize to\n\t * @return  The context time of the next subdivision.\n\t * @example\n\t * Transport.start(); //the transport must be started\n\t * Transport.nextSubdivision(\"4n\");\n\t */\n\tnextSubdivision(subdivision?: Time): Seconds {\n\t\tsubdivision = this.toTicks(subdivision);\n\t\tif (this.state !== \"started\") {\n\t\t\t// if the transport's not started, return 0\n\t\t\treturn 0;\n\t\t} else {\n\t\t\tconst now = this.now();\n\t\t\t// the remainder of the current ticks and the subdivision\n\t\t\tconst transportPos = this.getTicksAtTime(now);\n\t\t\tconst remainingTicks = subdivision - transportPos % subdivision;\n\t\t\treturn this._clock.nextTickTime(remainingTicks, now);\n\t\t}\n\t}\n\n\t/**\n\t *  Attaches the signal to the tempo control signal so that\n\t *  any changes in the tempo will change the signal in the same\n\t *  ratio.\n\t *\n\t *  @param signal\n\t *  @param ratio Optionally pass in the ratio between the two signals.\n\t * \t\t\t\tOtherwise it will be computed based on their current values.\n\t */\n\tsyncSignal(signal: Signal<any>, ratio?: number): this {\n\t\tif (!ratio) {\n\t\t\t// get the sync ratio\n\t\t\tconst now = this.now();\n\t\t\tif (signal.getValueAtTime(now) !== 0) {\n\t\t\t\tconst bpm = this.bpm.getValueAtTime(now);\n\t\t\t\tconst computedFreq = 1 / (60 / bpm / this.PPQ);\n\t\t\t\tratio = signal.getValueAtTime(now) / computedFreq;\n\t\t\t} else {\n\t\t\t\tratio = 0;\n\t\t\t}\n\t\t}\n\t\tconst ratioSignal = new Gain(ratio);\n\t\t// @ts-ignore\n\t\tthis.bpm.connect(ratioSignal);\n\t\t// @ts-ignore\n\t\tratioSignal.connect(signal._param);\n\t\tthis._syncedSignals.push({\n\t\t\tinitial : signal.value,\n\t\t\tratio : ratioSignal,\n\t\t\tsignal,\n\t\t});\n\t\tsignal.value = 0;\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Unsyncs a previously synced signal from the transport's control.\n\t *  See Transport.syncSignal.\n\t */\n\tunsyncSignal(signal: Signal<any>): this {\n\t\tfor (let i = this._syncedSignals.length - 1; i >= 0; i--) {\n\t\t\tconst syncedSignal = this._syncedSignals[i];\n\t\t\tif (syncedSignal.signal === signal) {\n\t\t\t\tsyncedSignal.ratio.dispose();\n\t\t\t\tsyncedSignal.signal.value = syncedSignal.initial;\n\t\t\t\tthis._syncedSignals.splice(i, 1);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._clock.dispose();\n\t\twritable(this, \"bpm\");\n\t\tthis._timeline.dispose();\n\t\tthis._repeatedEvents.dispose();\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////\n\t// EMITTER MIXIN TO SATISFY COMPILER\n\t///////////////////////////////////////////////////////////////////////\n\n\ton!: (event: TransportEventNames, callback: (...args: any[]) => void) => this;\n\tonce!: (event: TransportEventNames, callback: (...args: any[]) => void) => this;\n\toff!: (event: TransportEventNames, callback?: ((...args: any[]) => void) | undefined) => this;\n\temit!: (event: any, ...args: any[]) => this;\n}\n\nEmitter.mixin(Transport);\n\n///////////////////////////////////////////////////////////////////////////////\n// \tINITIALIZATION\n///////////////////////////////////////////////////////////////////////////////\n\nonContextInit(context => {\n\tcontext.transport = new Transport({ context });\n});\n\nonContextClose(context => {\n\tcontext.transport.dispose();\n});\n","import { Volume } from \"../component/channel/Volume\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { defaultArg, optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp, readOnly } from \"../core/util/Interface\";\nimport { BasicPlaybackState, StateTimeline } from \"../core/util/StateTimeline\";\nimport { isUndef } from \"../core/util/TypeCheck\";\n\nexport interface SourceOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n\tmute: boolean;\n}\n\n/**\n *  @class  Base class for sources. Sources have start/stop methods\n *          and the ability to be synced to the\n *          start/stop of this.context.transport.\n *\n *  @constructor\n *  @extends {Tone.AudioNode}\n *  @example\n * //Multiple state change events can be chained together,\n * //but must be set in the correct order and with ascending times\n *\n * // OK\n * state.start().stop(\"+0.2\");\n * // AND\n * state.start().stop(\"+0.2\").start(\"+0.4\").stop(\"+0.7\")\n *\n * // BAD\n * state.stop(\"+0.2\").start();\n * // OR\n * state.start(\"+0.3\").stop(\"+0.2\");\n *\n */\nexport abstract class Source<Options extends SourceOptions> extends ToneAudioNode<Options> {\n\n\t/**\n\t *  The output volume node\n\t *  @type  {Tone.Volume}\n\t *  @private\n\t */\n\tprivate _volume: Volume = new Volume({\n\t\tcontext: this.context,\n\t});\n\n\t/**\n\t * The output note\n\t */\n\toutput = this._volume;\n\tprotected _internalChannels = [this.output];\n\n\t/**\n\t * There is no input\n\t */\n\tinput = undefined;\n\n\t/**\n\t * The volume of the output in decibels.\n\t * @example\n\t * source.volume.value = -6;\n\t */\n\tvolume = this._volume.volume;\n\n\t/**\n\t * \tKeep track of the scheduled state.\n\t *  @type {Tone.StateTimeline}\n\t *  @private\n\t */\n\tprotected _state: StateTimeline<{\n\t\tduration?: Seconds;\n\t\toffset?: Seconds;\n\t\t/**\n\t\t * Either the buffer is explicitly scheduled to end using the stop method,\n\t\t * or it's implicitly ended when the buffer is over.\n\t\t */\n\t\timplicitEnd?: boolean;\n\t}> = new StateTimeline(\"stopped\");\n\n\t/**\n\t *  The synced `start` callback function from the transport\n\t *  @type {Function}\n\t *  @private\n\t */\n\tprotected _synced = false;\n\n\t/**\n\t *  Keep track of all of the scheduled event ids\n\t */\n\tprivate _scheduled: number[] = [];\n\n\t/**\n\t * Placeholder functions for syncing/unsyncing to transport\n\t */\n\tprivate _syncedStart: (time: Seconds, offset: Seconds) => void = noOp;\n\tprivate _syncedStop: (time: Seconds) => void = noOp;\n\n\tconstructor(options: SourceOptions) {\n\t\tsuper(options);\n\t\treadOnly(this, \"volume\");\n\t\tthis._state.memory = 100;\n\t\tthis.volume.setValueAtTime(options.volume, 0);\n\t\t// set mute initially\n\t\tthis.mute = options.mute;\n\n\t}\n\n\tstatic getDefaults(): SourceOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmute: false,\n\t\t\tnumberOfOutputs: 1,\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t *  Returns the playback state of the source, either \"started\" or \"stopped\".\n\t */\n\tget state(): BasicPlaybackState {\n\t\tif (this._synced) {\n\t\t\tif (this.context.transport.state === \"started\") {\n\t\t\t\treturn this._state.getValueAtTime(this.context.transport.seconds) as BasicPlaybackState;\n\t\t\t} else {\n\t\t\t\treturn \"stopped\";\n\t\t\t}\n\t\t} else {\n\t\t\treturn this._state.getValueAtTime(this.now()) as BasicPlaybackState;\n\t\t}\n\t}\n\n\t/**\n\t * Mute the output.\n\t * @example\n\t * //mute the output\n\t * source.mute = true;\n\t */\n\tget mute(): boolean {\n\t\treturn this._volume.mute;\n\t}\n\tset mute(mute: boolean) {\n\t\tthis._volume.mute = mute;\n\t}\n\n\t// overwrite these functions\n\tprotected abstract _start(time: Time, offset?: Time, duration?: Time): void;\n\tprotected abstract _stop(time: Time): void;\n\tabstract restart(time: Time, offset?: Time, duration?: Time): this;\n\n\t/**\n\t *  Start the source at the specified time. If no time is given,\n\t *  start the source now.\n\t *  @param  time When the source should be started.\n\t *  @returns {Source} this\n\t *  @example\n\t * source.start(\"+0.5\"); //starts the source 0.5 seconds from now\n\t */\n\tstart(time?: Time, offset?: Time, duration: Time = 0): this {\n\t\tif (isUndef(time) && this._synced) {\n\t\t\ttime = this.context.transport.seconds;\n\t\t} else {\n\t\t\ttime = this.toSeconds(time);\n\t\t}\n\t\t// if it's started, stop it and restart it\n\t\tif (this._state.getValueAtTime(time) === \"started\") {\n\t\t\tthis._state.cancel(time);\n\t\t\tthis._state.setStateAtTime(\"started\", time);\n\t\t\tthis.restart(time, offset, duration);\n\t\t} else {\n\t\t\tthis._state.setStateAtTime(\"started\", time);\n\t\t\tif (this._synced) {\n\t\t\t\t// add the offset time to the event\n\t\t\t\tconst event = this._state.get(time);\n\t\t\t\tif (event) {\n\t\t\t\t\tevent.offset = this.toSeconds(defaultArg(offset, 0));\n\t\t\t\t\tevent.duration = this.toSeconds(duration);\n\t\t\t\t}\n\t\t\t\tconst sched = this.context.transport.schedule(t => {\n\t\t\t\t\tthis._start(t, offset, duration);\n\t\t\t\t}, time);\n\t\t\t\tthis._scheduled.push(sched);\n\n\t\t\t\t// if it's already started\n\t\t\t\tif (this.context.transport.state === \"started\") {\n\t\t\t\t\tthis._syncedStart(this.now(), this.context.transport.seconds);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._start.apply(this, arguments);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Stop the source at the specified time. If no time is given,\n\t *  stop the source now.\n\t *  @param  {Time} [time=now] When the source should be stopped.\n\t *  @returns {Source} this\n\t *  @example\n\t * source.stop(); // stops the source immediately\n\t */\n\tstop(time?: Time): this {\n\t\tif (isUndef(time) && this._synced) {\n\t\t\ttime = this.context.transport.seconds;\n\t\t} else {\n\t\t\ttime = this.toSeconds(time);\n\t\t}\n\t\tif (!this._synced) {\n\t\t\tthis._stop.apply(this, arguments);\n\t\t} else {\n\t\t\tconst sched = this.context.transport.schedule(this._stop.bind(this), time);\n\t\t\tthis._scheduled.push(sched);\n\t\t}\n\t\tthis._state.cancel(time);\n\t\tthis._state.setStateAtTime(\"stopped\", time);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Sync the source to the Transport so that all subsequent\n\t *  calls to `start` and `stop` are synced to the TransportTime\n\t *  instead of the AudioContext time.\n\t *\n\t * @example\n\t * //sync the source so that it plays between 0 and 0.3 on the Transport's timeline\n\t * source.sync().start(0).stop(0.3);\n\t * //start the transport.\n\t * this.context.transport.start();\n\t *\n\t * @example\n\t * //start the transport with an offset and the sync'ed sources\n\t * //will start in the correct position\n\t * source.sync().start(0.1);\n\t * //the source will be invoked with an offset of 0.4 = (0.5 - 0.1)\n\t * this.context.transport.start(\"+0.5\", 0.5);\n\t */\n\tsync(): this {\n\t\tif (!this._synced) {\n\t\t\tthis._synced = true;\n\t\t\tthis._syncedStart = (time, offset) => {\n\t\t\t\tif (offset > 0) {\n\t\t\t\t\t// get the playback state at that time\n\t\t\t\t\tconst stateEvent = this._state.get(offset);\n\t\t\t\t\t// listen for start events which may occur in the middle of the sync'ed time\n\t\t\t\t\tif (stateEvent && stateEvent.state === \"started\" && stateEvent.time !== offset) {\n\t\t\t\t\t\t// get the offset\n\t\t\t\t\t\tconst startOffset = offset - this.toSeconds(stateEvent.time);\n\t\t\t\t\t\tlet duration;\n\t\t\t\t\t\tif (stateEvent.duration) {\n\t\t\t\t\t\t\tduration = this.toSeconds(stateEvent.duration) - startOffset;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._start(time, this.toSeconds(stateEvent.offset) + startOffset, duration);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis._syncedStop = time => {\n\t\t\t\tconst seconds = this.context.transport.getSecondsAtTime(Math.max(time - this.sampleTime, 0));\n\t\t\t\tif (this._state.getValueAtTime(seconds) === \"started\") {\n\t\t\t\t\tthis._stop(time);\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis.context.transport.on(\"start\", this._syncedStart);\n\t\t\tthis.context.transport.on(\"loopStart\", this._syncedStart);\n\t\t\tthis.context.transport.on(\"stop\", this._syncedStop);\n\t\t\tthis.context.transport.on(\"pause\", this._syncedStop);\n\t\t\tthis.context.transport.on(\"loopEnd\", this._syncedStop);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Unsync the source to the Transport. See Source.sync\n\t */\n\tunsync(): this {\n\t\tif (this._synced) {\n\t\t\tthis.context.transport.off(\"stop\", this._syncedStop);\n\t\t\tthis.context.transport.off(\"pause\", this._syncedStop);\n\t\t\tthis.context.transport.off(\"loopEnd\", this._syncedStop);\n\t\t\tthis.context.transport.off(\"start\", this._syncedStart);\n\t\t\tthis.context.transport.off(\"loopStart\", this._syncedStart);\n\t\t}\n\t\tthis._synced = false;\n\t\t// clear all of the scheduled ids\n\t\tthis._scheduled.forEach(id => this.context.transport.clear(id));\n\t\tthis._scheduled = [];\n\t\tthis._state.cancel(0);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.unsync();\n\t\tthis._volume.dispose();\n\t\tthis._state.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../core/context/Gain\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { noOp } from \"../core/util/Interface\";\nimport { BasicPlaybackState } from \"../core/util/StateTimeline\";\n\nexport type OneShotSourceCurve = \"linear\" | \"exponential\";\n\nexport interface OneShotSourceOptions extends ToneAudioNodeOptions {\n\tonended: () => void;\n\tfadeIn: Time;\n\tfadeOut: Time;\n\tcurve: OneShotSourceCurve;\n}\n\nexport abstract class OneShotSource<Options extends ToneAudioNodeOptions> extends ToneAudioNode<Options> {\n\n\t/**\n\t *  The callback to invoke after the\n\t *  source is done playing.\n\t */\n\tonended: () => void = noOp;\n\n\t/**\n\t * Sources do not have input nodes\n\t */\n\tinput: undefined;\n\n\t/**\n\t *  The start time\n\t */\n\tprotected _startTime: number = -1;\n\n\t/**\n\t *  The stop time\n\t */\n\tprotected _stopTime: number = -1;\n\n\t/**\n\t * The id of the timeout\n\t */\n\tprivate _timeout: number = -1;\n\n\t/**\n\t * The public output node\n\t */\n\toutput: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain : 0,\n\t});\n\n\t/**\n\t *  The output gain node.\n\t */\n\tprotected _gainNode = this.output;\n\n\t/**\n\t *  The fadeIn time of the amplitude envelope.\n\t */\n\tprotected _fadeIn: Time;\n\n\t/**\n\t *  The fadeOut time of the amplitude envelope.\n\t */\n\tprotected _fadeOut: Time;\n\n\t/**\n\t * The curve applied to the fades, either \"linear\" or \"exponential\"\n\t */\n\tprotected _curve: OneShotSourceCurve;\n\n\tconstructor(options: OneShotSourceOptions) {\n\t\tsuper(options);\n\n\t\tthis._fadeIn = options.fadeIn;\n\t\tthis._fadeOut = options.fadeOut;\n\t\tthis._curve = options.curve;\n\t}\n\n\tstatic getDefaults(): OneShotSourceOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tcurve: \"linear\" as OneShotSourceCurve,\n\t\t\tfadeIn : 0,\n\t\t\tfadeOut: 0,\n\t\t\tonended : noOp,\n\t\t});\n\t}\n\n\t/**\n\t * Stop the source node\n\t */\n\tprotected abstract _stopSource(time: Seconds): void;\n\n\t/**\n\t * Start the source node at the given time\n\t * @param  time When to start the node\n\t */\n\tprotected abstract start(time?: Time): this;\n\t/**\n\t * Start the source at the given time\n\t * @param  time When to start the source\n\t */\n\tprotected _startGain(time: Seconds, gain: GainFactor = 1): this {\n\t\tthis.assert(this._startTime === -1, \"Source cannot be started more than once\");\n\t\t// apply a fade in envelope\n\t\tconst fadeInTime = this.toSeconds(this._fadeIn);\n\n\t\t// record the start time\n\t\tthis._startTime = time + fadeInTime;\n\t\tthis._startTime = Math.max(this._startTime, this.context.currentTime);\n\n\t\t// schedule the envelope\n\t\tif (fadeInTime > 0) {\n\t\t\tthis._gainNode.gain.setValueAtTime(0, time);\n\t\t\tif (this._curve === \"linear\") {\n\t\t\t\tthis._gainNode.gain.linearRampToValueAtTime(gain, time + fadeInTime);\n\t\t\t} else {\n\t\t\t\tthis._gainNode.gain.exponentialApproachValueAtTime(gain, time, fadeInTime);\n\t\t\t}\n\t\t} else {\n\t\t\tthis._gainNode.gain.setValueAtTime(gain, time);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the source node at the given time.\n\t * @param time When to stop the source\n\t */\n\tstop(time?: Time): this {\n\t\tthis._stopGain(this.toSeconds(time));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the source at the given time\n\t * @param  time When to stop the source\n\t */\n\tprotected _stopGain(time: Seconds): this {\n\t\tthis.assert(this._startTime !== -1, \"'start' must be called before 'stop'\");\n\t\t// cancel the previous stop\n\t\tthis.cancelStop();\n\n\t\t// the fadeOut time\n\t\tconst fadeOutTime = this.toSeconds(this._fadeOut);\n\n\t\t// schedule the stop callback\n\t\tthis._stopTime = this.toSeconds(time) + fadeOutTime;\n\t\tthis._stopTime = Math.max(this._stopTime, this.context.currentTime);\n\t\tif (fadeOutTime > 0) {\n\t\t\t// start the fade out curve at the given time\n\t\t\tif (this._curve === \"linear\") {\n\t\t\t\tthis._gainNode.gain.linearRampTo(0, fadeOutTime, time);\n\t\t\t} else {\n\t\t\t\tthis._gainNode.gain.targetRampTo(0, fadeOutTime, time);\n\t\t\t}\n\t\t} else {\n\t\t\t// stop any ongoing ramps, and set the value to 0\n\t\t\tthis._gainNode.gain.cancelAndHoldAtTime(time);\n\t\t\tthis._gainNode.gain.setValueAtTime(0, time);\n\t\t}\n\t\tthis.context.clearTimeout(this._timeout);\n\t\tthis._timeout = this.context.setTimeout(() => {\n\t\t\t// allow additional time for the exponential curve to fully decay\n\t\t\tconst additionalTail = this._curve === \"exponential\" ? fadeOutTime * 2 : 0;\n\t\t\tthis._stopSource(this.now() + additionalTail);\n\t\t\tthis._onended();\n\t\t}, this._stopTime - this.context.currentTime);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Invoke the onended callback\n\t */\n\tprotected _onended(): void {\n\t\tif (this.onended !== noOp) {\n\t\t\tthis.onended();\n\t\t\t// overwrite onended to make sure it only is called once\n\t\t\tthis.onended = noOp;\n\t\t\t// dispose when it's ended to free up for garbage collection\n\t\t\tsetTimeout(() => this.dispose(), 1000);\n\t\t}\n\t}\n\n\t/**\n\t *  Get the playback state at the given time\n\t */\n\tgetStateAtTime = function(time: Time): BasicPlaybackState {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._startTime !== -1 && computedTime >= this._startTime &&\n\t\t\t(this._stopTime === -1 || computedTime <= this._stopTime)) {\n\t\t\treturn \"started\";\n\t\t} else {\n\t\t\treturn \"stopped\";\n\t\t}\n\t};\n\n\t/**\n\t * Get the playback state at the current time\n\t */\n\tget state(): BasicPlaybackState {\n\t\treturn this.getStateAtTime(this.now());\n\t}\n\n\t/**\n\t *  Cancel a scheduled stop event\n\t */\n\tcancelStop(): this {\n\t\tthis.assert(this._startTime !== -1, \"Source is not started\");\n\t\t// cancel the stop envelope\n\t\tthis._gainNode.gain.cancelScheduledValues(this._startTime + this.sampleTime);\n\t\tthis.context.clearTimeout(this._timeout);\n\t\tthis._stopTime = -1;\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._gainNode.disconnect();\n\t\treturn this;\n\t}\n}\n","import { connect } from \"../../core/Connect\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp } from \"../../core/util/Interface\";\nimport { isDefined } from \"../../core/util/TypeCheck\";\nimport { OneShotSource, OneShotSourceCurve, OneShotSourceOptions } from \"../OneShotSource\";\n\nexport type ToneBufferSourceCurve = OneShotSourceCurve;\n\ninterface ToneBufferSourceOptions extends OneShotSourceOptions {\n\tbuffer: ToneAudioBuffer;\n\tcurve: ToneBufferSourceCurve;\n\tplaybackRate: Positive;\n\tfadeIn: Time;\n\tfadeOut: Time;\n\tloopStart: Time;\n\tloopEnd: Time;\n\tloop: boolean;\n\tonload: () => void;\n}\n\n/**\n *  Wrapper around the native BufferSourceNode.\n *  @param  buffer   The buffer to play\n *  @param  onended  The callback to invoke when the buffer is done playing.\n */\nexport class ToneBufferSource extends OneShotSource<ToneBufferSourceOptions> {\n\n\tname = \"ToneBufferSource\";\n\n\t/**\n\t *  The oscillator\n\t */\n\tprivate _source = this.context.createBufferSource();\n\tprotected _internalChannels = [this._gainNode, this._source];\n\n\t/**\n\t *  The frequency of the oscillator\n\t */\n\treadonly playbackRate: Param<Positive>;\n\n\t/**\n\t * The private instance of the buffer object\n\t */\n\tprivate _buffer: ToneAudioBuffer;\n\n\t/**\n\t * indicators if the source has started/stopped\n\t */\n\tprivate _sourceStarted: boolean = false;\n\tprivate _sourceStopped: boolean = false;\n\n\tconstructor(buffer?: ToneAudioBuffer | AudioBuffer | string, onload?: () => void);\n\tconstructor(options?: Partial<ToneBufferSourceOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(ToneBufferSource.getDefaults(), arguments, [\"buffer\", \"onload\"]));\n\t\tconst options = optionsFromArguments(ToneBufferSource.getDefaults(), arguments, [\"buffer\", \"onload\"]);\n\n\t\tconnect(this._source, this._gainNode);\n\t\tthis._source.onended = () => this._stopSource();\n\n\t\t/**\n\t\t *  The playbackRate of the buffer\n\t\t */\n\t\tthis.playbackRate = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam : this._source.playbackRate,\n\t\t\tunits : \"positive\",\n\t\t\tvalue : options.playbackRate,\n\t\t});\n\n\t\t// set some values initially\n\t\tthis.loop = options.loop;\n\t\tthis.loopStart = options.loopStart;\n\t\tthis.loopEnd = options.loopEnd;\n\t\tthis._buffer = new ToneAudioBuffer(options.buffer, options.onload);\n\t}\n\n\tstatic getDefaults(): ToneBufferSourceOptions {\n\t\treturn Object.assign(OneShotSource.getDefaults(), {\n\t\t\tbuffer: new ToneAudioBuffer(),\n\t\t\tloop: false,\n\t\t\tloopEnd : 0,\n\t\t\tloopStart : 0,\n\t\t\tonload: noOp,\n\t\t\tplaybackRate : 1,\n\t\t});\n\t}\n\n\t/**\n\t *  The fadeIn time of the amplitude envelope.\n\t */\n\tget fadeIn(): Time {\n\t\treturn this._fadeIn;\n\t}\n\tset fadeIn(t: Time) {\n\t\tthis._fadeIn = t;\n\t}\n\n\t/**\n\t *  The fadeOut time of the amplitude envelope.\n\t */\n\tget fadeOut(): Time {\n\t\treturn this._fadeOut;\n\t}\n\tset fadeOut(t: Time) {\n\t\tthis._fadeOut = t;\n\t}\n\n\t/**\n\t * The curve applied to the fades, either \"linear\" or \"exponential\"\n\t */\n\tget curve(): ToneBufferSourceCurve {\n\t\treturn this._curve;\n\t}\n\tset curve(t) {\n\t\tthis._curve = t;\n\t}\n\n\t/**\n\t *  Start the buffer\n\t *  @param  time When the player should start.\n\t *  @param  offset The offset from the beginning of the sample to start at.\n\t *  @param  duration How long the sample should play. If no duration\n\t *                   is given, it will default to the full length\n\t *                   of the sample (minus any offset)\n\t *  @param  gain  The gain to play the buffer back at.\n\t */\n\tstart(time?: Time, offset?: Time, duration?: Time, gain: GainFactor = 1): this {\n\t\tthis.assert(this.buffer.loaded, \"buffer is either not set or not loaded\");\n\t\ttime = this.toSeconds(time);\n\n\t\t// apply the gain envelope\n\t\tthis._startGain(time, gain);\n\n\t\t// if it's a loop the default offset is the loopstart point\n\t\tif (this.loop) {\n\t\t\toffset = defaultArg(offset, this.loopStart);\n\t\t} else {\n\t\t\t// otherwise the default offset is 0\n\t\t\toffset = defaultArg(offset, 0);\n\t\t}\n\t\toffset = this.toSeconds(offset);\n\t\t// make sure the offset is not less than 0\n\t\toffset = Math.max(offset, 0);\n\n\t\t// start the buffer source\n\t\tif (this.loop) {\n\t\t\t// modify the offset if it's greater than the loop time\n\t\t\tconst loopEnd = this.toSeconds(this.loopEnd) || this.buffer.duration;\n\t\t\tconst loopStart = this.toSeconds(this.loopStart);\n\t\t\tconst loopDuration = loopEnd - loopStart;\n\t\t\t// move the offset back\n\t\t\tif (offset >= loopEnd) {\n\t\t\t\toffset = ((offset - loopStart) % loopDuration) + loopStart;\n\t\t\t}\n\t\t}\n\n\t\t// this.buffer.loaded would have return false if the AudioBuffer was undefined\n\t\tthis._source.buffer = this.buffer.get() as AudioBuffer;\n\t\tthis._source.loopEnd = this.toSeconds(this.loopEnd) || this.buffer.duration;\n\t\tif (offset < this.buffer.duration) {\n\t\t\tthis._sourceStarted = true;\n\t\t\tthis._source.start(time, offset);\n\t\t}\n\n\t\t// if a duration is given, schedule a stop\n\t\tif (isDefined(duration)) {\n\t\t\tlet computedDur = this.toSeconds(duration);\n\t\t\t// make sure it's never negative\n\t\t\tcomputedDur = Math.max(computedDur, 0);\n\t\t\tthis.stop(time + computedDur);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\tprotected _stopSource(time?: Seconds): void {\n\t\tif (!this._sourceStopped) {\n\t\t\tthis._sourceStopped = true;\n\t\t\tthis._source.stop(this.toSeconds(time));\n\t\t\tthis._onended();\n\t\t}\n\t}\n\n\t/**\n\t * If loop is true, the loop will start at this position.\n\t */\n\tget loopStart(): Time {\n\t\treturn this._source.loopStart;\n\t}\n\tset loopStart(loopStart: Time) {\n\t\tthis._source.loopStart = this.toSeconds(loopStart);\n\t}\n\n\t/**\n\t * If loop is true, the loop will end at this position.\n\t */\n\tget loopEnd(): Time {\n\t\treturn this._source.loopEnd;\n\t}\n\tset loopEnd(loopEnd: Time) {\n\t\tthis._source.loopEnd = this.toSeconds(loopEnd);\n\t}\n\n\t/**\n\t * The audio buffer belonging to the player.\n\t */\n\tget buffer(): ToneAudioBuffer {\n\t\treturn this._buffer;\n\t}\n\tset buffer(buffer: ToneAudioBuffer) {\n\t\tthis._buffer.set(buffer);\n\t}\n\n\t/**\n\t * If the buffer should loop once it's over.\n\t */\n\tget loop(): boolean {\n\t\treturn this._source.loop;\n\t}\n\tset loop(loop: boolean) {\n\t\tthis._source.loop = loop;\n\t\tif (this._sourceStarted) {\n\t\t\tthis.cancelStop();\n\t\t}\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._source.onended = null;\n\t\tthis._source.disconnect();\n\t\tthis._buffer.dispose();\n\t\tthis.playbackRate.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioBuffer } from \"../core/context/ToneAudioBuffer\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Source, SourceOptions } from \"../source/Source\";\nimport { ToneBufferSource } from \"./buffer/BufferSource\";\n\ntype NoiseType = \"white\" | \"brown\" | \"pink\";\n\ninterface NoiseOptions extends SourceOptions {\n\ttype: NoiseType;\n\tplaybackRate: Positive;\n}\n\n/**\n * Noise is a noise generator. It uses looped noise buffers to save on performance.\n * Noise supports the noise types: \"pink\", \"white\", and \"brown\". Read more about\n * colors of noise on [Wikipedia](https://en.wikipedia.org/wiki/Colors_of_noise).\n *\n * @param type the noise type (white|pink|brown)\n * @example\n * //initialize the noise and start\n * var noise = new Noise(\"pink\").start();\n *\n * //make an autofilter to shape the noise\n * var autoFilter = new Tone.AutoFilter({\n * \t\"frequency\" : \"8m\",\n * \t\"min\" : 800,\n * \t\"max\" : 15000\n * }).connect(Tone.Master);\n *\n * //connect the noise\n * noise.connect(autoFilter);\n * //start the autofilter LFO\n * autoFilter.start()\n */\nexport class Noise extends Source<NoiseOptions> {\n\n\tname = \"Noise\";\n\n\t/**\n\t * Private reference to the source\n\t */\n\tprivate _source: ToneBufferSource | null = null;\n\n\t/**\n\t * private reference to the type\n\t */\n\tprivate _type!: NoiseType;\n\n\t/**\n\t *  The playback rate of the noise. Affects\n\t *  the \"frequency\" of the noise.\n\t */\n\tprivate _playbackRate: Positive;\n\n\tconstructor(options?: NoiseType | Partial<NoiseOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Noise.getDefaults(), arguments, [\"type\"]));\n\t\tconst options = optionsFromArguments(Noise.getDefaults(), arguments, [\"type\"]);\n\n\t\tthis._playbackRate = options.playbackRate;\n\t\tthis.type = options.type;\n\t}\n\n\tstatic getDefaults(): NoiseOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tplaybackRate: 1,\n\t\t\ttype: \"white\" as NoiseType,\n\t\t});\n\t}\n\n\t/**\n\t * The type of the noise. Can be \"white\", \"brown\", or \"pink\".\n\t * @example\n\t * noise.type = \"white\";\n\t */\n\tget type(): NoiseType {\n\t\treturn this._type;\n\t}\n\tset type(type: NoiseType) {\n\t\tthis.assert(type in _noiseBuffers, \"Noise: invalid type: \" + type);\n\t\tif (this._type !== type) {\n\t\t\tthis._type = type;\n\t\t\t// if it's playing, stop and restart it\n\t\t\tif (this.state === \"started\") {\n\t\t\t\tconst now = this.now();\n\t\t\t\tthis._stop(now);\n\t\t\t\tthis._start(now);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *  The playback rate of the noise. Affects\n\t *  the \"frequency\" of the noise.\n\t */\n\tget playbackRate(): Positive {\n\t\treturn this._playbackRate;\n\t}\n\tset playbackRate(rate: Positive) {\n\t\tthis._playbackRate = rate;\n\t\tif (this._source) {\n\t\t\tthis._source.playbackRate.value = rate;\n\t\t}\n\t}\n\n\t/**\n\t *  internal start method\n\t */\n\tprotected _start(time?: Time): void {\n\t\tconst buffer = _noiseBuffers[this._type];\n\t\tthis._source = new ToneBufferSource(buffer).connect(this.output);\n\t\tthis._source.loop = true;\n\t\tthis._source.playbackRate.value = this._playbackRate;\n\t\tthis._source.start(this.toSeconds(time), Math.random() * (buffer.duration - 0.001));\n\t}\n\n\t/**\n\t *  internal stop method\n\t *\n\t *  @param {Time} time\n\t *  @private\n\t */\n\tprotected _stop(time?: Time): void {\n\t\tif (this._source) {\n\t\t\tthis._source.stop(this.toSeconds(time));\n\t\t\tthis._source = null;\n\t\t}\n\t}\n\n\t/**\n\t * Restarts the noise.\n\t * @param  time When to restart the noise.\n\t */\n\trestart(time?: Time): this {\n\t\t// TODO could be optimized by cancelling the buffer source 'stop'\n\t\t// stop and restart\n\t\tthis._stop(time);\n\t\tthis._start(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (this._source) {\n\t\t\tthis._source.disconnect();\n\t\t}\n\t\treturn this;\n\t}\n}\n\n///////////////////////////////////////////////////////////////////////////\n// THE NOISE BUFFERS\n///////////////////////////////////////////////////////////////////////////\n\n// Noise buffer stats\nconst BUFFER_LENGTH = 44100 * 5;\nconst NUM_CHANNELS = 2;\n\n/**\n * The cached noise buffers\n */\ninterface NoiseCache {\n\t[key: string]: ToneAudioBuffer | null;\n}\n\n/**\n * Cache the noise buffers\n */\nconst _noiseCache: NoiseCache = {\n\tbrown: null,\n\tpink: null,\n\twhite: null,\n};\n\n/**\n * The noise arrays. Generated on initialization.\n * borrowed heavily from https://github.com/zacharydenton/noise.js\n * (c) 2013 Zach Denton (MIT)\n */\nconst _noiseBuffers = {\n\tget brown(): ToneAudioBuffer {\n\t\tif (!_noiseCache.brown) {\n\t\t\tconst buffer: Float32Array[] = [];\n\t\t\tfor (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {\n\t\t\t\tconst channel = new Float32Array(BUFFER_LENGTH);\n\t\t\t\tbuffer[channelNum] = channel;\n\t\t\t\tlet lastOut = 0.0;\n\t\t\t\tfor (let i = 0; i < BUFFER_LENGTH; i++) {\n\t\t\t\t\tconst white = Math.random() * 2 - 1;\n\t\t\t\t\tchannel[i] = (lastOut + (0.02 * white)) / 1.02;\n\t\t\t\t\tlastOut = channel[i];\n\t\t\t\t\tchannel[i] *= 3.5; // (roughly) compensate for gain\n\t\t\t\t}\n\t\t\t}\n\t\t\t_noiseCache.brown = new ToneAudioBuffer().fromArray(buffer);\n\t\t}\n\t\treturn _noiseCache.brown;\n\t},\n\n\tget pink(): ToneAudioBuffer {\n\t\tif (!_noiseCache.pink) {\n\t\t\tconst buffer: Float32Array[] = [];\n\t\t\tfor (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {\n\t\t\t\tconst channel = new Float32Array(BUFFER_LENGTH);\n\t\t\t\tbuffer[channelNum] = channel;\n\t\t\t\t// tslint:disable-next-line: one-variable-per-declaration\n\t\t\t\tlet b0, b1, b2, b3, b4, b5, b6;\n\t\t\t\tb0 = b1 = b2 = b3 = b4 = b5 = b6 = 0.0;\n\t\t\t\tfor (let i = 0; i < BUFFER_LENGTH; i++) {\n\t\t\t\t\tconst white = Math.random() * 2 - 1;\n\t\t\t\t\tb0 = 0.99886 * b0 + white * 0.0555179;\n\t\t\t\t\tb1 = 0.99332 * b1 + white * 0.0750759;\n\t\t\t\t\tb2 = 0.96900 * b2 + white * 0.1538520;\n\t\t\t\t\tb3 = 0.86650 * b3 + white * 0.3104856;\n\t\t\t\t\tb4 = 0.55000 * b4 + white * 0.5329522;\n\t\t\t\t\tb5 = -0.7616 * b5 - white * 0.0168980;\n\t\t\t\t\tchannel[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;\n\t\t\t\t\tchannel[i] *= 0.11; // (roughly) compensate for gain\n\t\t\t\t\tb6 = white * 0.115926;\n\t\t\t\t}\n\t\t\t}\n\t\t\t_noiseCache.pink = new ToneAudioBuffer().fromArray(buffer);\n\t\t}\n\t\treturn _noiseCache.pink;\n\t},\n\n\tget white(): ToneAudioBuffer {\n\t\tif (!_noiseCache.white) {\n\t\t\tconst buffer: Float32Array[] = [];\n\t\t\tfor (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {\n\t\t\t\tconst channel = new Float32Array(BUFFER_LENGTH);\n\t\t\t\tbuffer[channelNum] = channel;\n\t\t\t\tfor (let i = 0; i < BUFFER_LENGTH; i++) {\n\t\t\t\t\tchannel[i] = Math.random() * 2 - 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t_noiseCache.white = new ToneAudioBuffer().fromArray(buffer);\n\t\t}\n\t\treturn _noiseCache.white;\n\t},\n};\n","import { AbstractParam } from \"../core/context/AbstractParam\";\nimport { Param } from \"../core/context/Param\";\nimport { InputNode, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { connect } from \"../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\n\nexport interface SignalOptions<Type> extends ToneAudioNodeOptions {\n\tvalue: Type;\n\tunits: UnitName;\n\tconvert: boolean;\n}\n\n/**\n * A signal is an audio-rate value. Tone.Signal is a core component of the library.\n * Unlike a number, Signals can be scheduled with sample-level accuracy. Tone.Signal\n * has all of the methods available to native Web Audio\n * [AudioParam](http://webaudio.github.io/web-audio-api/#the-audioparam-interface)\n * as well as additional conveniences. Read more about working with signals\n * [here](https://github.com/Tonejs/Tone.js/wiki/Signals).\n *  @param value Initial value of the signal\n *  @param units unit The units the signal is in.\n * @example\n * const signal = new Tone.Signal(10);\n */\nexport class Signal<Type extends Unit = number> extends ToneAudioNode<SignalOptions<any>>\nimplements AbstractParam<Type> {\n\n\tname = \"Signal\";\n\n\t/**\n\t * Indicates if the value should be overridden on connection.\n\t */\n\treadonly override: boolean = true;\n\n\t/**\n\t * The constant source node which generates the signal\n\t */\n\tprotected _constantSource: ConstantSourceNode = this.context.createConstantSource();\n\treadonly output: OutputNode = this._constantSource;\n\tprotected _param: Param<Type>;\n\treadonly input: InputNode;\n\tprotected _internalChannels = [this._constantSource];\n\n\tconstructor(value?: Type, units?: UnitName);\n\tconstructor(options?: Partial<SignalOptions<Type>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]));\n\n\t\tconst options = optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]) as SignalOptions<Type>;\n\n\t\tthis._constantSource.start(0);\n\t\tthis.input = this._param = new Param({\n\t\t\tcontext: this.context,\n\t\t\tconvert: options.convert,\n\t\t\tparam: this._constantSource.offset,\n\t\t\tunits: options.units,\n\t\t\tvalue: options.value,\n\t\t});\n\t}\n\n\tstatic getDefaults(): SignalOptions<any> {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tchannelCount: 1,\n\t\t\tchannelCountMode: \"explicit\",\n\t\t\tchannelInterpretation: \"discrete\",\n\t\t\tconvert: true,\n\t\t\tnumberOfInputs: 1,\n\t\t\tnumberOfOutputs: 1,\n\t\t\tunits: \"number\" as UnitName,\n\t\t\tvalue: 0,\n\t\t}) as SignalOptions<any>;\n\t}\n\n\tconnect(destination: InputNode, outputNum: number = 0, inputNum: number = 0): this {\n\t\tconnectSignal(this, destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._param.dispose();\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// ABSTRACT PARAM INTERFACE\n\t// just a proxy for the ConstantSourceNode's offset AudioParam\n\t// all docs are generated from AbstractParam.ts\n\t///////////////////////////////////////////////////////////////////////////\n\n\tsetValueAtTime(value: Type, time: Time): this {\n\t\tthis._param.setValueAtTime(value, time);\n\t\treturn this;\n\t}\n\tgetValueAtTime(time: Time): Type {\n\t\treturn this._param.getValueAtTime(time);\n\t}\n\tsetRampPoint(time: Time): this {\n\t\tthis._param.setRampPoint(time);\n\t\treturn this;\n\t}\n\tlinearRampToValueAtTime(value: Type, time: Time): this {\n\t\tthis._param.linearRampToValueAtTime(value, time);\n\t\treturn this;\n\t}\n\texponentialRampToValueAtTime(value: Type, time: Time): this {\n\t\tthis._param.exponentialRampToValueAtTime(value, time);\n\t\treturn this;\n\t}\n\texponentialRampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tthis._param.exponentialRampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\tlinearRampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tthis._param.linearRampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\ttargetRampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tthis._param.targetRampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\texponentialApproachValueAtTime(value: Type, time: Time, rampTime: Time): this {\n\t\tthis._param.exponentialApproachValueAtTime(value, time, rampTime);\n\t\treturn this;\n\t}\n\tsetTargetAtTime(value: Type, startTime: Time, timeConstant: number): this {\n\t\tthis._param.setTargetAtTime(value, startTime, timeConstant);\n\t\treturn this;\n\t}\n\tsetValueCurveAtTime(values: Type[], startTime: Time, duration: Time, scaling?: number): this {\n\t\tthis._param.setValueCurveAtTime(values, startTime, duration, scaling);\n\t\treturn this;\n\t}\n\tcancelScheduledValues(time: Time): this {\n\t\tthis._param.cancelScheduledValues(time);\n\t\treturn this;\n\t}\n\tcancelAndHoldAtTime(time: Time): this {\n\t\tthis._param.cancelAndHoldAtTime(time);\n\t\treturn this;\n\t}\n\trampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tthis._param.rampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\n\tget value(): Type {\n\t\treturn this._param.value;\n\t}\n\tset value(value: Type) {\n\t\tthis._param.value = value;\n\t}\n\n\tget convert(): boolean {\n\t\treturn this._param.convert;\n\t}\n\tset convert(convert: boolean) {\n\t\tthis._param.convert = convert;\n\t}\n\n\tget units(): UnitName {\n\t\treturn this._param.units;\n\t}\n\n\tget overridden(): boolean {\n\t\treturn this._param.overridden;\n\t}\n\tset overridden(overridden: boolean) {\n\t\tthis._param.overridden = overridden;\n\t}\n\n\tget maxValue(): number {\n\t\treturn this._param.maxValue;\n\t}\n\tget minValue(): number {\n\t\treturn this._param.minValue;\n\t}\n}\n\n/**\n * When connecting from a signal, it's necessary to zero out the node destination\n * node if that node is also a signal. If the destination is not 0, then the values\n * will be summed. This method insures that the output of the destination signal will\n * be the same as the source signal, making the destination signal a pass through node.\n * @param signal The output signal to connect from\n * @param destination the destination to connect to\n * @param outputNum the optional output number\n * @param inputNum the input number\n */\nexport function connectSignal(signal: OutputNode, destination: InputNode, outputNum?: number, inputNum?: number): void {\n\tif (destination instanceof Param || destination instanceof AudioParam ||\n\t\t(destination instanceof Signal && destination.override)) {\n\t\t// cancel changes\n\t\tdestination.cancelScheduledValues(0);\n\t\t// reset the value\n\t\tdestination.setValueAtTime(0, 0);\n\t\t// mark the value as overridden\n\t\tif (destination instanceof Signal) {\n\t\t\tdestination.overridden = true;\n\t\t}\n\t}\n\tconnect(signal, destination, outputNum, inputNum);\n}\n","import { connect } from \"../../core/Connect\";\nimport { Param } from \"../../core/context/Param\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { OneShotSource, OneShotSourceOptions } from \"../OneShotSource\";\n\ninterface ToneOscillatorNodeOptions extends OneShotSourceOptions {\n\tfrequency: Frequency;\n\tdetune: Cents;\n\ttype: OscillatorType;\n}\n\n/**\n * Wrapper around the native fire-and-forget OscillatorNode.\n * Adds the ability to reschedule the stop method.\n * ***[Tone.Oscillator](Oscillator) is better for most use-cases***\n *  @extends {Tone.AudioNode}\n *  @param  {AudioBuffer|Tone.Buffer}  buffer   The buffer to play\n *  @param  {Function}  onload  The callback to invoke when the\n *                               buffer is done playing.\n */\nexport class ToneOscillatorNode extends OneShotSource<ToneOscillatorNodeOptions> {\n\n\tname = \"ToneOscillatorNode\";\n\n\t/**\n\t *  The oscillator\n\t */\n\tprivate _oscillator = this.context.createOscillator();\n\tprotected _internalChannels = [this._gainNode, this._oscillator];\n\n\t/**\n\t *  The frequency of the oscillator\n\t */\n\treadonly frequency: Param<\"frequency\">;\n\n\t/**\n\t *  The detune of the oscillator\n\t */\n\treadonly detune: Param<\"cents\">;\n\n\tconstructor(options?: Partial<ToneOscillatorNodeOptions>);\n\tconstructor(\n\t\tfrequency: Frequency,\n\t\ttype: OscillatorType,\n\t);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(ToneOscillatorNode.getDefaults(), arguments, [\"frequency\", \"type\"]));\n\t\tconst options = optionsFromArguments(ToneOscillatorNode.getDefaults(), arguments, [\"frequency\", \"type\"]);\n\n\t\tconnect(this._oscillator, this._gainNode);\n\n\t\tthis.type = options.type;\n\n\t\tthis.frequency = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam : this._oscillator.frequency,\n\t\t\tunits : \"frequency\",\n\t\t\tvalue : this.toFrequency(options.frequency),\n\t\t});\n\n\t\tthis.detune = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam : this._oscillator.detune,\n\t\t\tunits : \"cents\",\n\t\t\tvalue : options.detune,\n\t\t});\n\t}\n\n\tstatic getDefaults(): ToneOscillatorNodeOptions {\n\t\treturn Object.assign(OneShotSource.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tfrequency: 440,\n\t\t\ttype: \"sine\" as OscillatorType,\n\t\t});\n\t}\n\n\t/**\n\t * Start the oscillator node at the given time\n\t * @param  time When to start the oscillator\n\t */\n\tstart(time?: Time): this {\n\t\tthis.log(\"start\", time);\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._startGain(computedTime);\n\t\tthis._oscillator.start(computedTime);\n\t\treturn this;\n\t}\n\n\tprotected _stopSource(time?: Seconds): void {\n\t\tthis._oscillator.stop(time);\n\t}\n\n\t/**\n\t * Sets an arbitrary custom periodic waveform given a PeriodicWave.\n\t * @param  periodicWave PeriodicWave should be created with context.createPeriodicWave\n\t */\n\tsetPeriodicWave(periodicWave: PeriodicWave): this {\n\t\tthis._oscillator.setPeriodicWave(periodicWave);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The oscillator type. Either 'sine', 'sawtooth', 'square', or 'triangle'\n\t */\n\tget type(): OscillatorType {\n\t\treturn this._oscillator.type;\n\t}\n\tset type(type: OscillatorType) {\n\t\tthis._oscillator.type = type;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._oscillator.disconnect();\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\treturn this;\n\t}\n}\n","import { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { ToneOscillatorConstructorOptions, ToneOscillatorInterface,\n\tToneOscillatorOptions, ToneOscillatorType } from \"./OscillatorInterface\";\nimport { ToneOscillatorNode } from \"./OscillatorNode\";\n\n/**\n *  Oscillator supports a number of features including\n *  phase rotation, multiple oscillator types (see Oscillator.type),\n *  and Transport syncing (see Oscillator.syncFrequency).\n *\n *  @param frequency Starting frequency\n *  @param type The oscillator type. Read more about type below.\n *  @example\n * //make and start a 440hz sine tone\n * var osc = new Oscillator(440, \"sine\").toDestination().start();\n */\nexport class Oscillator extends Source<ToneOscillatorOptions> implements ToneOscillatorInterface {\n\n\tname = \"Oscillator\";\n\n\t/**\n\t *  the main oscillator\n\t */\n\tprivate _oscillator: ToneOscillatorNode | null = null;\n\n\t/**\n\t *  The frequency control.\n\t */\n\tfrequency: Signal<Frequency>;\n\n\t/**\n\t *  The detune control signal.\n\t */\n\tdetune: Signal<Cents>;\n\n\t/**\n\t *  the periodic wave\n\t */\n\tprivate _wave?: PeriodicWave;\n\n\t/**\n\t *  The partials of the oscillator\n\t */\n\tprivate _partials: number[];\n\n\t/**\n\t *  The number of partials to limit or extend the periodic wave by\n\t */\n\tprivate _partialCount: number;\n\n\t/**\n\t *  the phase of the oscillator between 0 - 360\n\t */\n\tprivate _phase: Radians;\n\n\t/**\n\t *  the type of the oscillator\n\t *  @type {string}\n\t *  @private\n\t */\n\tprivate _type;\n\n\tconstructor(options?: Partial<ToneOscillatorConstructorOptions>)\n\tconstructor(frequency?: Frequency, type?: ToneOscillatorType);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Oscillator.getDefaults(), arguments, [\"frequency\", \"type\"]));\n\t\tconst options = optionsFromArguments(Oscillator.getDefaults(), arguments, [\"frequency\", \"type\"]);\n\n\t\tthis.frequency = new Signal<Frequency>({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t});\n\t\treadOnly(this, \"frequency\");\n\n\t\tthis.detune = new Signal<Cents>({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune,\n\t\t});\n\t\treadOnly(this, \"detune\");\n\n\t\tthis._partials = options.partials;\n\t\tthis._partialCount = options.partialCount;\n\t\tthis._phase = options.phase;\n\t\tthis._type = options.type;\n\n\t\tif (options.partialCount && options.type !== \"custom\") {\n\t\t\tthis._type = this.baseType + options.partialCount.toString();\n\t\t}\n\t\tthis.phase = this._phase;\n\t}\n\n\tstatic getDefaults(): ToneOscillatorOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tfrequency: 440,\n\t\t\tpartialCount: 0,\n\t\t\tpartials: [],\n\t\t\tphase: 0,\n\t\t\ttype: \"sine\",\n\t\t}) as ToneOscillatorOptions;\n\t}\n\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _start(time?: Time): void {\n\t\tthis.log(\"start\", time);\n\t\t// new oscillator with previous values\n\t\tconst oscillator = new ToneOscillatorNode({\n\t\t\tcontext: this.context,\n\t\t});\n\t\tthis._oscillator = oscillator;\n\t\tif (this._wave) {\n\t\t\tthis._oscillator.setPeriodicWave(this._wave);\n\t\t} else {\n\t\t\tthis._oscillator.type = this._type;\n\t\t}\n\t\t// connect the control signal to the oscillator frequency & detune\n\t\tthis._oscillator.connect(this.output);\n\t\tthis.frequency.connect(this._oscillator.frequency);\n\t\tthis.detune.connect(this._oscillator.detune);\n\n\t\t// start the oscillator\n\t\ttime = this.toSeconds(time);\n\t\tthis._oscillator.start(time);\n\t}\n\n\t/**\n\t *  stop the oscillator\n\t */\n\tprotected _stop(time?: Time): void {\n\t\tthis.log(\"stop\", time);\n\t\tif (this._oscillator) {\n\t\t\ttime = this.toSeconds(time);\n\t\t\tthis._oscillator.stop(time);\n\t\t}\n\t}\n\n\t/**\n\t * Restart the oscillator. Does not stop the oscillator, but instead\n\t * just cancels any scheduled 'stop' from being invoked.\n\t */\n\trestart(time?: Time): this {\n\t\tif (this._oscillator) {\n\t\t\tthis._oscillator.cancelStop();\n\t\t}\n\t\tthis._state.cancel(this.toSeconds(time));\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Sync the signal to the Transport's bpm. Any changes to the transports bpm,\n\t *  will also affect the oscillators frequency.\n\t *  @example\n\t * Tone.Transport.bpm.value = 120;\n\t * osc.frequency.value = 440;\n\t * //the ration between the bpm and the frequency will be maintained\n\t * osc.syncFrequency();\n\t * Tone.Transport.bpm.value = 240;\n\t * // the frequency of the oscillator is doubled to 880\n\t */\n\tsyncFrequency(): this {\n\t\tthis.context.transport.syncSignal(this.frequency);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Unsync the oscillator's frequency from the Transport.\n\t *  See Oscillator.syncFrequency\n\t */\n\tunsyncFrequency(): this {\n\t\tthis.context.transport.unsyncSignal(this.frequency);\n\t\treturn this;\n\t}\n\n\t/* tslint:disable */\n\t/**\n\t * The type of the oscillator: either sine, square, triangle, or sawtooth. Also capable of\n\t * setting the first x number of partials of the oscillator. For example: \"sine4\" would\n\t * set be the first 4 partials of the sine wave and \"triangle8\" would set the first\n\t * 8 partials of the triangle wave.\n\t * <br><br>\n\t * Uses PeriodicWave internally even for native types so that it can set the phase.\n\t * PeriodicWave equations are from the\n\t * [Webkit Web Audio implementation](https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/modules/webaudio/PeriodicWave.cpp&sq=package:chromium).\n\t *\n\t * @memberOf Oscillator#\n\t * @type {string}\n\t * @name type\n\t * @example\n\t * //set it to a square wave\n\t * osc.type = \"square\";\n\t * @example\n\t * //set the first 6 partials of a sawtooth wave\n\t * osc.type = \"sawtooth6\";\n\t */\n\t/* tslint:enable */\n\tget type(): ToneOscillatorType {\n\t\treturn this._type;\n\t}\n\tset type(type: ToneOscillatorType) {\n\t\tconst isBasicType = [\"sine\", \"square\", \"sawtooth\", \"triangle\"].indexOf(type) !== -1;\n\t\tif (this._phase === 0 && isBasicType) {\n\t\t\tthis._wave = undefined;\n\t\t\tthis._partialCount = 0;\n\t\t\t// just go with the basic approach\n\t\t\tif (this._oscillator !== null) {\n\t\t\t\t// already tested that it's a basic type\n\t\t\t\tthis._oscillator.type = type as OscillatorType;\n\t\t\t}\n\t\t} else {\n\t\t\tconst [real, imag] = this._getRealImaginary(type, this._phase);\n\t\t\tconst periodicWave = this.context.createPeriodicWave(real, imag);\n\t\t\tthis._wave = periodicWave;\n\t\t\tif (this._oscillator !== null) {\n\t\t\t\tthis._oscillator.setPeriodicWave(this._wave);\n\t\t\t}\n\t\t}\n\t\tthis._type = type;\n\t}\n\n\t/**\n\t * The oscillator type without the partialsCount appended to the end\n\t * @example\n\t * osc.type = 'sine2'\n\t * osc.baseType //'sine'\n\t * osc.partialCount = 2\n\t */\n\tget baseType(): OscillatorType {\n\t\treturn this._type.replace(this.partialCount, \"\");\n\t}\n\tset baseType(baseType: OscillatorType) {\n\t\tif (this.partialCount && this._type !== \"custom\" && baseType !== \"custom\") {\n\t\t\tthis.type = baseType + this.partialCount as ToneOscillatorType;\n\t\t} else {\n\t\t\tthis.type = baseType;\n\t\t}\n\t}\n\n\t/**\n\t * 'partialCount' offers an alternative way to set the number of used partials.\n\t * When partialCount is 0, the maximum number of partials are used when representing\n\t * the waveform using the periodicWave. When 'partials' is set, this value is\n\t * not settable, but equals the length of the partials array.\n\t * @example\n\t * osc.type = 'sine'\n\t * osc.partialCount = 3\n\t * //is equivalent to\n\t * osc.type = 'sine3'\n\t */\n\tget partialCount(): number {\n\t\treturn this._partialCount;\n\t}\n\tset partialCount(p: number) {\n\t\tlet type = this._type;\n\t\tconst partial = /^(sine|triangle|square|sawtooth)(\\d+)$/.exec(this._type);\n\t\tif (partial) {\n\t\t\ttype = partial[1];\n\t\t}\n\t\tif (this._type !== \"custom\") {\n\t\t\tif (p === 0) {\n\t\t\t\tthis.type = type;\n\t\t\t} else {\n\t\t\t\tthis.type = type + p.toString() as ToneOscillatorType;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *  Get the object's attributes. Given no arguments get\n\t *  will return all available object properties and their corresponding\n\t *  values.\n\t */\n\tget(): ToneOscillatorOptions {\n\t\tconst values = super.get();\n\t\tif (values.type !== \"custom\") {\n\t\t\tdelete values.partials;\n\t\t}\n\t\treturn values;\n\t}\n\n\t/**\n\t *  Returns the real and imaginary components based\n\t *  on the oscillator type.\n\t *  @returns [real: Float32Array, imaginary: Float32Array]\n\t *  @private\n\t */\n\tprivate _getRealImaginary(type: ToneOscillatorType, phase: Radians): Float32Array[] {\n\t\tconst fftSize = 4096;\n\t\tlet periodicWaveSize = fftSize / 2;\n\n\t\tconst real = new Float32Array(periodicWaveSize);\n\t\tconst imag = new Float32Array(periodicWaveSize);\n\n\t\tlet partialCount = 1;\n\t\tif (type === \"custom\") {\n\t\t\tpartialCount = this._partials.length + 1;\n\t\t\tthis._partialCount = this._partials.length;\n\t\t\tperiodicWaveSize = partialCount;\n\t\t} else {\n\t\t\tconst partial = /^(sine|triangle|square|sawtooth)(\\d+)$/.exec(type);\n\t\t\tif (partial) {\n\t\t\t\tpartialCount = parseInt(partial[2], 10) + 1;\n\t\t\t\tthis._partialCount = parseInt(partial[2], 10);\n\t\t\t\ttype = partial[1] as ToneOscillatorType;\n\t\t\t\tpartialCount = Math.max(partialCount, 2);\n\t\t\t\tperiodicWaveSize = partialCount;\n\t\t\t} else {\n\t\t\t\tthis._partialCount = 0;\n\t\t\t}\n\t\t\tthis._partials = [];\n\t\t}\n\n\t\t// tslint:disable: no-bitwise\n\t\tfor (let n = 1; n < periodicWaveSize; ++n) {\n\t\t\tconst piFactor = 2 / (n * Math.PI);\n\t\t\tlet b;\n\t\t\tswitch (type) {\n\t\t\t\tcase \"sine\":\n\t\t\t\t\tb = (n <= partialCount) ? 1 : 0;\n\t\t\t\t\tthis._partials[n - 1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"square\":\n\t\t\t\t\tb = (n & 1) ? 2 * piFactor : 0;\n\t\t\t\t\tthis._partials[n - 1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"sawtooth\":\n\t\t\t\t\tb = piFactor * ((n & 1) ? 1 : -1);\n\t\t\t\t\tthis._partials[n - 1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"triangle\":\n\t\t\t\t\tif (n & 1) {\n\t\t\t\t\t\tb = 2 * (piFactor * piFactor) * ((((n - 1) >> 1) & 1) ? -1 : 1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tb = 0;\n\t\t\t\t\t}\n\t\t\t\t\tthis._partials[n - 1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"custom\":\n\t\t\t\t\tb = this._partials[n - 1];\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new TypeError(\"Oscillator: invalid type: \" + type);\n\t\t\t}\n\t\t\tif (b !== 0) {\n\t\t\t\treal[n] = -b * Math.sin(phase * n);\n\t\t\t\timag[n] = b * Math.cos(phase * n);\n\t\t\t} else {\n\t\t\t\treal[n] = 0;\n\t\t\t\timag[n] = 0;\n\t\t\t}\n\t\t}\n\t\treturn [real, imag];\n\t}\n\n\t/**\n\t *  Compute the inverse FFT for a given phase.\n\t */\n\tprivate _inverseFFT(real: Float32Array, imag: Float32Array, phase: Radians): number {\n\t\tlet sum = 0;\n\t\tconst len = real.length;\n\t\tfor (let i = 0; i < len; i++) {\n\t\t\tsum += real[i] * Math.cos(i * phase) + imag[i] * Math.sin(i * phase);\n\t\t}\n\t\treturn sum;\n\t}\n\n\t/**\n\t *  Returns the initial value of the oscillator.\n\t */\n\tprotected _getInitialValue(): AudioRange {\n\t\tconst [real, imag] = this._getRealImaginary(this._type, 0);\n\t\tlet maxValue = 0;\n\t\tconst twoPi = Math.PI * 2;\n\t\t// check for peaks in 8 places\n\t\tfor (let i = 0; i < 8; i++) {\n\t\t\tmaxValue = Math.max(this._inverseFFT(real, imag, (i / 8) * twoPi), maxValue);\n\t\t}\n\t\treturn -this._inverseFFT(real, imag, this._phase) / maxValue;\n\t}\n\n\t/**\n\t * The partials of the waveform. A partial represents\n\t * the amplitude at a harmonic. The first harmonic is the\n\t * fundamental frequency, the second is the octave and so on\n\t * following the harmonic series.\n\t * Setting this value will automatically set the type to \"custom\".\n\t * The value is an empty array when the type is not \"custom\".\n\t * @example\n\t * osc.partials = [1, 0.2, 0.01];\n\t */\n\tget partials(): number[] {\n\t\treturn this._partials;\n\t}\n\tset partials(partials: number[]) {\n\t\tthis._partials = partials;\n\t\tif (partials.length) {\n\t\t\tthis.type = \"custom\";\n\t\t}\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t * @example\n\t * osc.phase = 180; //flips the phase of the oscillator\n\t */\n\tget phase(): Degrees {\n\t\treturn this._phase * (180 / Math.PI);\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._phase = phase * Math.PI / 180;\n\t\t// reset the type\n\t\tthis.type = this._type;\n\t}\n\n\t/**\n\t *  Dispose and disconnect.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (this._oscillator !== null) {\n\t\t\tthis._oscillator.dispose();\n\t\t}\n\t\tthis._wave = undefined;\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\treturn this;\n\t}\n}\n","import { optionsFromArguments } from \"..//core/util/Defaults\";\nimport { InputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { connectSignal } from \"./Signal\";\n/**\n * A signal operator has an input and output and modifies the signal.\n */\nexport abstract class SignalOperator<Options extends ToneAudioNodeOptions> extends ToneAudioNode<Options> {\n\n\tconstructor(options?: Partial<Options>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(SignalOperator.getDefaults(), arguments, [\"context\"])));\n\t}\n\n\tconnect(destination: InputNode, outputNum: number = 0, inputNum: number = 0): this {\n\t\tconnectSignal(this, destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { isArray, isFunction, isUndef } from \"../core/util/TypeCheck\";\nimport { Signal, SignalOptions } from \"./Signal\";\nimport { SignalOperator } from \"./SignalOperator\";\n\ntype WaveShaperMappingFn = (value: number, index?: number) => number;\n\ntype WaveShaperMapping =  WaveShaperMappingFn | number[] | Float32Array;\n\ninterface WaveShaperOptions extends ToneAudioNodeOptions {\n\tmapping?: WaveShaperMapping;\n\tlength: number;\n\tcurve?: number[] | Float32Array;\n}\n\n/**\n * Wraps the native Web Audio API\n * [WaveShaperNode](http://webaudio.github.io/web-audio-api/#the-waveshapernode-interface).\n *\n *  @param mapping The function used to define the values.\n *                 The mapping function should take two arguments:\n *                 the first is the value at the current position\n *                 and the second is the array position.\n *                 If the argument is an array, that array will be\n *                 set as the wave shaping function. The input\n *                 signal is an AudioRange [-1, 1] value and the output\n *                 signal can take on any numerical values.\n *\n *  @param bufferLen The length of the WaveShaperNode buffer.\n *  @example\n * var timesTwo = new WaveShaper(function(val){\n * \treturn val * 2;\n * }, 2048);\n *  @example\n * //a waveshaper can also be constructed with an array of values\n * var invert = new WaveShaper([1, -1]);\n */\nexport class WaveShaper extends SignalOperator<WaveShaperOptions> {\n\n\tname = \"WaveShaper\";\n\n\t/**\n\t *  the waveshaper node\n\t */\n\tprivate _shaper: WaveShaperNode = this.context.createWaveShaper();\n\n\t/**\n\t * The input to the waveshaper node.\n\t */\n\tinput = this._shaper;\n\n\t/**\n\t * The output from the waveshaper node\n\t */\n\toutput = this._shaper;\n\n\tprotected _internalChannels = [this._shaper];\n\n\tconstructor(options?: Partial<WaveShaperOptions>);\n\tconstructor(mapping?: WaveShaperMapping , length?: number);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(WaveShaper.getDefaults(), arguments, [\"mapping\", \"length\"])));\n\t\tconst options = optionsFromArguments(WaveShaper.getDefaults(), arguments, [\"mapping\", \"length\"]);\n\n\t\tif (isArray(options.mapping) || options.mapping instanceof Float32Array) {\n\t\t\tthis.curve = Float32Array.from(options.mapping);\n\t\t} else if (isFunction(options.mapping)) {\n\t\t\tthis.setMap(options.mapping, options.length);\n\t\t}\n\t}\n\n\tstatic getDefaults(): WaveShaperOptions {\n\t\treturn Object.assign(Signal.getDefaults(), {\n\t\t\tlength: 1024,\n\t\t});\n\t}\n\n\t/**\n\t *  Uses a mapping function to set the value of the curve.\n\t *  @param mapping The function used to define the values.\n\t *                 The mapping function take two arguments:\n\t *                 the first is the value at the current position\n\t *                 which goes from -1 to 1 over the number of elements\n\t *                 in the curve array. The second argument is the array position.\n\t * @example\n\t * //map the input signal from [-1, 1] to [0, 10]\n\t * shaper.setMap(function(val, index){\n\t * \treturn (val + 1) * 5;\n\t * })\n\t */\n\tsetMap(mapping: WaveShaperMappingFn, length: number = 1024): this {\n\t\tconst array = new Float32Array(length);\n\t\tfor (let i = 0, len = length; i < len; i++) {\n\t\t\tconst normalized = (i / (len - 1)) * 2 - 1;\n\t\t\tarray[i] = mapping(normalized, i);\n\t\t}\n\t\tthis.curve = array;\n\t\treturn this;\n\t}\n\n\t/**\n\t * The array to set as the waveshaper curve. For linear curves\n\t * array length does not make much difference, but for complex curves\n\t * longer arrays will provide smoother interpolation.\n\t */\n\tget curve(): Float32Array | null {\n\t\treturn this._shaper.curve;\n\t}\n\n\tset curve(mapping: Float32Array | null) {\n\t\tthis._shaper.curve = mapping;\n\t}\n\n\t/**\n\t * Specifies what type of oversampling (if any) should be used when\n\t * applying the shaping curve. Can either be \"none\", \"2x\" or \"4x\".\n\t */\n\tget oversample(): OverSampleType {\n\t\treturn this._shaper.oversample;\n\t}\n\n\tset oversample(oversampling: OverSampleType) {\n\t\tconst isOverSampleType = [\"none\", \"2x\", \"4x\"].some(str => str.includes(oversampling));\n\t\tthis.assert(isOverSampleType, \"oversampling must be either 'none', '2x', or '4x'\");\n\t\tthis._shaper.oversample = oversampling;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._shaper.disconnect();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { SignalOperator } from \"./SignalOperator\";\nimport { WaveShaper } from \"./WaveShaper\";\n\n/**\n * AudioToGain converts an input in AudioRange [-1,1] to NormalRange [0,1].\n * See {@link GainToAudio}.\n *\n * @example\n * var a2g = new AudioToGain();\n */\nexport class AudioToGain extends SignalOperator<ToneAudioNodeOptions> {\n\n\tname = \"AudioToGain\";\n\n\t/**\n\t * The node which converts the audio ranges\n\t */\n\tprivate _norm = new WaveShaper({\n\t\tcontext: this.context,\n\t\tmapping: x => (x + 1) / 2,\n\t});\n\tprotected _internalChannels = [this._norm];\n\n\t/**\n\t * The AudioRange input [-1, 1]\n\t */\n\tinput = this._norm;\n\n\t/**\n\t * The GainRange output [0, 1]\n\t */\n\toutput = this._norm;\n\n\t/**\n\t *  clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._norm.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../core/context/Gain\";\nimport { Param } from \"../core/context/Param\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Signal, SignalOptions } from \"./Signal\";\n\n/**\n * Multiply two incoming signals. Or, if a number is given in the constructor,\n * multiplies the incoming signal by that value.\n *\n * @param {number=} value Constant value to multiple\n * @example\n * const mult = new Multiply();\n * const sigA = new Tone.Signal(3);\n * const sigB = new Tone.Signal(4);\n * sigA.connect(mult);\n * sigB.connect(mult.factor);\n * //output of mult is 12.\n *  @example\n * const mult = new Multiply(10);\n * const sig = new Tone.Signal(2).connect(mult);\n * //the output of mult is 20.\n */\nexport class Multiply extends Signal<number> {\n\n\tname = \"Multiply\";\n\n\t/**\n\t * Indicates if the value should be overridden on connection\n\t */\n\treadonly override = false;\n\n\t/**\n\t * the input gain node\n\t */\n\tprivate _mult: Gain = new Gain({ context : this.context });\n\n\t/**\n\t * The multiplcant input.\n\t */\n\tinput = this._mult;\n\n\t/**\n\t * The product of the input and {@link factor}\n\t */\n\toutput = this._mult;\n\n\t/**\n\t * The multiplication factor. Can be set directly or a signal can be connected to it.\n\t */\n\tfactor: Param<number>;\n\n\tconstructor(options?: Partial<SignalOptions<number>>);\n\t// tslint:disable-next-line: unified-signatures\n\tconstructor(value?: number);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Multiply.getDefaults(), arguments, [\"value\"])));\n\t\tconst options = optionsFromArguments(Multiply.getDefaults(), arguments, [\"value\"]);\n\n\t\tthis.factor = this._param = this._mult.gain as unknown as Param<number>;\n\t\tthis.factor.setValueAtTime(options.value, 0);\n\t}\n\n\tstatic getDefaults(): SignalOptions<number> {\n\t\treturn Object.assign(Signal.getDefaults(), {\n\t\t\tvalue: 0,\n\t\t});\n\t}\n\n\t/**\n\t *  clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._mult.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { AudioToGain } from \"../../signal/AudioToGain\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { AMConstructorOptions, AMOscillatorOptions,\n\tNonCustomOscillatorType, ToneOscillatorInterface,\n\tToneOscillatorType } from \"./OscillatorInterface\";\n\n/**\n * An amplitude modulated oscillator node. It is implemented with\n * two oscillators, one which modulators the other's amplitude\n * through a gain node.\n * ```\n *    +-------------+       +----------+\n *    | Carrier Osc +>------> GainNode |\n *    +-------------+       |          +--->Output\n *                      +---> gain     |\n * +---------------+    |   +----------+\n * | Modulator Osc +>---+\n * +---------------+\n * ```\n *\n * @param frequency The starting frequency of the oscillator.\n * @param type The type of the carrier oscillator.\n * @param modulationType The type of the modulator oscillator.\n * @example\n * //a sine oscillator frequency-modulated by a square wave\n * var fmOsc = new AMOscillator(\"Ab3\", \"sine\", \"square\").toDestination().start();\n */\nexport class AMOscillator extends Source<AMOscillatorOptions> implements ToneOscillatorInterface {\n\n\tname = \"AMOscillator\";\n\n\t/**\n\t *  The carrier oscillator\n\t */\n\tprivate _carrier: Oscillator = new Oscillator({context : this.context });\n\n\t/**\n\t *  The oscillator's frequency\n\t */\n\treadonly frequency: Signal<Frequency> = this._carrier.frequency;\n\n\t/**\n\t *  The detune control signal.\n\t */\n\treadonly detune: Signal<Cents> = this._carrier.detune;\n\n\t/**\n\t *  The modulating oscillator\n\t */\n\tprivate _modulator = new Oscillator({ context : this.context });\n\n\t/**\n\t *  convert the -1,1 output to 0,1\n\t */\n\tprivate _modulationScale = new AudioToGain({ context: this.context });\n\n\t/**\n\t *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators.\n\t *  A harmonicity of 1 gives both oscillators the same frequency.\n\t *  Harmonicity = 2 means a change of an octave.\n\t *  @example\n\t * //pitch the modulator an octave below carrier\n\t * synth.harmonicity.value = 0.5;\n\t */\n\treadonly harmonicity: Signal<Positive> = new Multiply({\n\t\tcontext: this.context,\n\t\tunits: \"positive\",\n\t});\n\n\t/**\n\t *  the node where the modulation happens\n\t */\n\tprivate _modulationNode = new Gain({\n\t\tcontext: this.context,\n\t});\n\n\tconstructor(options?: Partial<AMConstructorOptions>);\n\tconstructor(frequency?: Frequency, type?: ToneOscillatorType, modulationType?: ToneOscillatorType);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(AMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]));\n\t\tconst options = optionsFromArguments(AMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]);\n\n\t\tthis._carrier.type = options.type;\n\t\tthis._modulator.type = options.modulationType;\n\t\tthis.frequency.setValueAtTime(options.frequency, 0);\n\t\tthis.detune.setValueAtTime(options.detune, 0);\n\t\tthis.harmonicity.setValueAtTime(options.harmonicity, 0);\n\n\t\t// connections\n\t\tthis.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t\tthis._modulator.chain(this._modulationScale, this._modulationNode.gain);\n\t\tthis._carrier.chain(this._modulationNode, this.output);\n\n\t\tthis.phase = options.phase;\n\n\t\treadOnly(this, [\"frequency\", \"detune\", \"harmonicity\"]);\n\t}\n\n\tstatic getDefaults(): AMOscillatorOptions {\n\t\treturn Object.assign(Oscillator.getDefaults(), {\n\t\t\tharmonicity: 1,\n\t\t\tmodulationType: \"square\" as NonCustomOscillatorType,\n\t\t});\n\t}\n\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _start(time: Seconds): void {\n\t\tthis._modulator.start(time);\n\t\tthis._carrier.start(time);\n\t}\n\n\t/**\n\t *  stop the oscillator\n\t */\n\tprotected _stop(time: Seconds): void {\n\t\tthis._modulator.stop(time);\n\t\tthis._carrier.stop(time);\n\t}\n\n\t/**\n\t *  restart the oscillator\n\t */\n\trestart(time?: Time): this {\n\t\tthis._modulator.restart(time);\n\t\tthis._carrier.restart(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The type of the carrier oscillator\n\t */\n\tget type(): ToneOscillatorType {\n\t\treturn this._carrier.type;\n\t}\n\tset type(type: ToneOscillatorType) {\n\t\tthis._carrier.type = type;\n\t}\n\n\t/**\n\t * The oscillator type without the partialsCount appended to the end\n\t * @example\n\t * osc.type = 'sine2'\n\t * osc.baseType //'sine'\n\t * osc.partialCount = 2\n\t */\n\tget baseType(): OscillatorType {\n\t\treturn this._carrier.baseType;\n\t}\n\tset baseType(baseType: OscillatorType) {\n\t\tthis._carrier.baseType = baseType;\n\t}\n\n\t/**\n\t * 'partialCount' offers an alternative way to set the number of used partials.\n\t * When partialCount is 0, the maximum number of partials are used when representing\n\t * the waveform using the periodicWave. When 'partials' is set, this value is\n\t * not settable, but equals the length of the partials array.\n\t */\n\tget partialCount(): number {\n\t\treturn this._carrier.partialCount;\n\t}\n\n\tset partialCount(partialCount: number) {\n\t\tthis._carrier.partialCount = partialCount;\n\t}\n\n\t/**\n\t * The type of the modulator oscillator\n\t */\n\tget modulationType(): ToneOscillatorType {\n\t\treturn this._modulator.type;\n\t}\n\n\tset modulationType(type: ToneOscillatorType) {\n\t\tthis._modulator.type = type;\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._carrier.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._carrier.phase = phase;\n\t\tthis._modulator.phase = phase;\n\t}\n\n\t/**\n\t * The partials of the carrier waveform. A partial represents\n\t * the amplitude at a harmonic. The first harmonic is the\n\t * fundamental frequency, the second is the octave and so on\n\t * following the harmonic series.\n\t * Setting this value will automatically set the type to \"custom\".\n\t * The value is an empty array when the type is not \"custom\".\n\t * @example\n\t * osc.partials = [1, 0.2, 0.01];\n\t */\n\tget partials(): number[] {\n\t\treturn this._carrier.partials;\n\t}\n\tset partials(partials: number[]) {\n\t\tthis._carrier.partials = partials;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\tthis.harmonicity.dispose();\n\t\tthis._carrier.dispose();\n\t\tthis._modulator.dispose();\n\t\tthis._modulationNode.dispose();\n\t\tthis._modulationScale.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { FMConstructorOptions, FMOscillatorOptions,\n\tNonCustomOscillatorType, ToneOscillatorInterface, ToneOscillatorType } from \"./OscillatorInterface\";\n\n/**\n * FMOscillator implements a frequency modulation synthesis\n * ```\n *                                              +-------------+\n * +---------------+        +-------------+     | Carrier Osc |\n * | Modulator Osc +>-------> GainNode    |     |             +--->Output\n * +---------------+        |             +>----> frequency   |\n *                       +--> gain        |     +-------------+\n *                       |  +-------------+\n * +-----------------+   |\n * | modulationIndex +>--+\n * +-----------------+\n * ```\n *\n * @param frequency The starting frequency of the oscillator.\n * @param type The type of the carrier oscillator.\n * @param modulationType The type of the modulator oscillator.\n * @example\n * //a sine oscillator frequency-modulated by a square wave\n * var fmOsc = new FMOscillator(\"Ab3\", \"sine\", \"square\").toDestination().start();\n */\nexport class FMOscillator extends Source<FMOscillatorOptions> implements ToneOscillatorInterface {\n\n\tname = \"FMOscillator\";\n\n\t/**\n\t *  The carrier oscillator\n\t */\n\tprivate _carrier: Oscillator = new Oscillator({\n\t\tcontext : this.context,\n\t\tfrequency: 0,\n\t});\n\n\t/**\n\t *  The oscillator's frequency\n\t */\n\treadonly frequency: Signal<Frequency> = new Signal({\n\t\tcontext: this.context,\n\t\tunits: \"frequency\",\n\t});\n\n\t/**\n\t *  The detune control signal.\n\t */\n\treadonly detune: Signal<Cents> = this._carrier.detune;\n\n\t/**\n\t *  The modulating oscillator\n\t */\n\tprivate _modulator = new Oscillator({ context : this.context });\n\n\t/**\n\t *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators.\n\t *  A harmonicity of 1 gives both oscillators the same frequency.\n\t *  Harmonicity = 2 means a change of an octave.\n\t *  @example\n\t * //pitch the modulator an octave below carrier\n\t * synth.harmonicity.value = 0.5;\n\t */\n\treadonly harmonicity: Signal<Positive> = new Multiply({\n\t\tcontext: this.context,\n\t\tunits: \"positive\",\n\t});\n\n\t/**\n\t *  The modulation index which is in essence the depth or amount of the modulation. In other terms it is the\n\t *  ratio of the frequency of the modulating signal (mf) to the amplitude of the\n\t *  modulating signal (ma) -- as in ma/mf.\n\t */\n\treadonly modulationIndex: Signal<Positive> = new Multiply({\n\t\tcontext: this.context,\n\t\tunits: \"positive\",\n\t});\n\n\t/**\n\t *  the node where the modulation happens\n\t */\n\tprivate _modulationNode = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\n\tconstructor(options?: Partial<FMConstructorOptions>);\n\tconstructor(frequency?: Frequency, type?: ToneOscillatorType, modulationType?: ToneOscillatorType);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(FMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]));\n\t\tconst options = optionsFromArguments(FMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]);\n\n\t\tthis._carrier.type = options.type;\n\t\tthis._modulator.type = options.modulationType;\n\t\tthis.frequency.setValueAtTime(options.frequency, 0);\n\t\tthis.detune.setValueAtTime(options.detune, 0);\n\t\tthis.harmonicity.setValueAtTime(options.harmonicity, 0);\n\t\tthis.modulationIndex.setValueAtTime(options.modulationIndex, 0);\n\n\t\t// connections\n\t\tthis.frequency.connect(this._carrier.frequency);\n\t\tthis.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t\tthis.frequency.chain(this.modulationIndex, this._modulationNode);\n\t\tthis._modulator.connect(this._modulationNode.gain);\n\t\tthis._modulationNode.connect(this._carrier.frequency);\n\t\tthis._carrier.connect(this.output);\n\t\tthis.detune.connect(this._modulator.detune);\n\n\t\tthis.phase = options.phase;\n\n\t\treadOnly(this, [\"modulationIndex\", \"frequency\", \"detune\", \"harmonicity\"]);\n\t}\n\n\tstatic getDefaults(): FMOscillatorOptions {\n\t\treturn Object.assign(Oscillator.getDefaults(), {\n\t\t\tharmonicity: 1,\n\t\t\tmodulationIndex: 2,\n\t\t\tmodulationType: \"square\" as NonCustomOscillatorType,\n\t\t});\n\t}\n\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\tthis._modulator.start(time);\n\t\tthis._carrier.start(time);\n\t}\n\n\t/**\n\t *  stop the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\tthis._modulator.stop(time);\n\t\tthis._carrier.stop(time);\n\t}\n\n\t/**\n\t *  stop and restart the oscillator\n\t */\n\trestart(time?: Time): this {\n\t\tthis._modulator.restart(time);\n\t\tthis._carrier.restart(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The type of the carrier oscillator\n\t */\n\tget type(): ToneOscillatorType {\n\t\treturn this._carrier.type;\n\t}\n\tset type(type: ToneOscillatorType) {\n\t\tthis._carrier.type = type;\n\t}\n\n\t/**\n\t * The oscillator type without the partialsCount appended to the end\n\t * @example\n\t * osc.type = 'sine2'\n\t * osc.baseType //'sine'\n\t * osc.partialCount = 2\n\t */\n\tget baseType(): OscillatorType {\n\t\treturn this._carrier.baseType;\n\t}\n\tset baseType(baseType: OscillatorType) {\n\t\tthis._carrier.baseType = baseType;\n\t}\n\n\t/**\n\t * 'partialCount' offers an alternative way to set the number of used partials.\n\t * When partialCount is 0, the maximum number of partials are used when representing\n\t * the waveform using the periodicWave. When 'partials' is set, this value is\n\t * not settable, but equals the length of the partials array.\n\t */\n\tget partialCount(): number {\n\t\treturn this._carrier.partialCount;\n\t}\n\tset partialCount(partialCount: number) {\n\t\tthis._carrier.partialCount = partialCount;\n\t}\n\n\t/**\n\t * The type of the modulator oscillator\n\t */\n\tget modulationType(): ToneOscillatorType {\n\t\treturn this._modulator.type;\n\t}\n\tset modulationType(type: ToneOscillatorType) {\n\t\tthis._modulator.type = type;\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._carrier.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._carrier.phase = phase;\n\t\tthis._modulator.phase = phase;\n\t}\n\n\t/**\n\t * The partials of the carrier waveform. A partial represents\n\t * the amplitude at a harmonic. The first harmonic is the\n\t * fundamental frequency, the second is the octave and so on\n\t * following the harmonic series.\n\t * Setting this value will automatically set the type to \"custom\".\n\t * The value is an empty array when the type is not \"custom\".\n\t * @example\n\t * osc.partials = [1, 0.2, 0.01];\n\t */\n\tget partials(): number[] {\n\t\treturn this._carrier.partials;\n\t}\n\tset partials(partials: number[]) {\n\t\tthis._carrier.partials = partials;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.harmonicity.dispose();\n\t\tthis._carrier.dispose();\n\t\tthis._modulator.dispose();\n\t\tthis._modulationNode.dispose();\n\t\tthis.modulationIndex.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { WaveShaper } from \"../../signal/WaveShaper\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { PulseOscillatorOptions, ToneOscillatorInterface } from \"./OscillatorInterface\";\n\n/**\n * PulseOscillator is an oscillator with control over pulse width,\n * also known as the duty cycle. At 50% duty cycle (width = 0) the wave is\n * a square wave.\n * [Read more](https://wigglewave.wordpress.com/2014/08/16/pulse-waveforms-and-harmonics/).\n * ```\n *    width = -0.25        width = 0.0          width = 0.25\n *\n *   +-----+            +-------+       +    +-------+     +-+\n *   |     |            |       |       |            |     |\n *   |     |            |       |       |            |     |\n * +-+     +-------+    +       +-------+            +-----+\n *\n *\n *    width = -0.5                              width = 0.5\n *\n *     +---+                                 +-------+   +---+\n *     |   |                                         |   |\n *     |   |                                         |   |\n * +---+   +-------+                                 +---+\n *\n *\n *    width = -0.75                             width = 0.75\n *\n *       +-+                                 +-------+ +-----+\n *       | |                                         | |\n *       | |                                         | |\n * +-----+ +-------+                                 +-+\n * ```\n * @param frequency The frequency of the oscillator\n * @param width The width of the pulse\n * @example\n * var pulse = new PulseOscillator(\"E5\", 0.4).toDestination().start();\n */\nexport class PulseOscillator extends Source<PulseOscillatorOptions> implements ToneOscillatorInterface {\n\n\tname = \"PulseOscillator\";\n\n\t/**\n\t *  The width of the pulse.\n\t */\n\twidth: Signal<AudioRange> = new Signal({\n\t\tcontext: this.context,\n\t\tunits: \"audioRange\",\n\t});\n\n\t/**\n\t *  gate the width amount\n\t */\n\tprivate _widthGate: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\n\t/**\n\t *  the sawtooth oscillator\n\t */\n\tprivate _sawtooth: Oscillator = new Oscillator({\n\t\tcontext: this.context,\n\t\ttype : \"sawtooth\",\n\t});\n\n\t/**\n\t *  The frequency control.\n\t */\n\tfrequency: Signal<Frequency> = this._sawtooth.frequency;\n\n\t/**\n\t *  The detune in cents.\n\t */\n\tdetune: Signal<Cents> = this._sawtooth.detune;\n\n\t/**\n\t *  Threshold the signal to turn it into a square\n\t */\n\tprivate _thresh = new WaveShaper({\n\t\tcontext: this.context,\n\t\tmapping: val => val <= 0 ? -1 : 1,\n\t});\n\n\tconstructor(options?: Partial<PulseOscillatorOptions>);\n\tconstructor(frequency?: Frequency, width?: AudioRange);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(PulseOscillator.getDefaults(), arguments, [\"frequency\", \"width\"]));\n\t\tconst options = optionsFromArguments(PulseOscillator.getDefaults(), arguments, [\"frequency\", \"width\"]);\n\n\t\tthis.width.setValueAtTime(options.width, 0);\n\t\tthis._sawtooth.frequency.setValueAtTime(options.frequency, 0);\n\t\tthis._sawtooth.detune.setValueAtTime(options.detune, 0);\n\t\tthis._sawtooth.phase = options.phase;\n\n\t\t// connections\n\t\tthis._sawtooth.chain(this._thresh, this.output);\n\t\tthis.width.chain(this._widthGate, this._thresh);\n\t\treadOnly(this, [\"width\", \"frequency\", \"detune\"]);\n\t}\n\n\tstatic getDefaults(): PulseOscillatorOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tfrequency: 440,\n\t\t\tphase: 0,\n\t\t\ttype: \"pulse\" as \"pulse\",\n\t\t\twidth: 0.2,\n\t\t});\n\t}\n\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._sawtooth.start(time);\n\t\tthis._widthGate.gain.setValueAtTime(1, time);\n\t}\n\n\t/**\n\t *  stop the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._sawtooth.stop(time);\n\t\t// the width is still connected to the output.\n\t\t// that needs to be stopped also\n\t\tthis._widthGate.gain.cancelScheduledValues(time);\n\t\tthis._widthGate.gain.setValueAtTime(0, time);\n\t}\n\n\t/**\n\t *  Restart the oscillator\n\t */\n\trestart(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._sawtooth.restart(computedTime);\n\t\tthis._widthGate.gain.cancelScheduledValues(computedTime);\n\t\tthis._widthGate.gain.setValueAtTime(1, computedTime);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._sawtooth.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._sawtooth.phase = phase;\n\t}\n\n\t/**\n\t * The type of the oscillator. Always returns \"pulse\".\n\t */\n\tget type(): \"pulse\" {\n\t\treturn \"pulse\";\n\t}\n\n\t/**\n\t * The baseType of the oscillator. Always returns \"pulse\".\n\t */\n\tget baseType(): \"pulse\" {\n\t\treturn \"pulse\";\n\t}\n\n\t/**\n\t * The partials of the waveform. Cannot set partials for this waveform type\n\t */\n\tget partials(): number[] {\n\t\treturn [];\n\t}\n\n\t/**\n\t * No partials for this waveform type.\n\t */\n\tget partialCount(): number {\n\t\treturn 0;\n\t}\n\n\t/**\n\t *  Clean up method.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._sawtooth.dispose();\n\t\tthis.width.dispose();\n\t\tthis._widthGate.dispose();\n\t\tthis._thresh.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { AudioToGain } from \"../../signal/AudioToGain\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { FatConstructorOptions, FatOscillatorOptions,\n\tToneOscillatorInterface, ToneOscillatorType } from \"./OscillatorInterface\";\n\n/**\n *  FatOscillator is an array of oscillators with detune spread between the oscillators\n *  @param frequency The oscillator's frequency.\n *  @param type The type of the oscillator.\n *  @param spread The detune spread between the oscillators.\n *  @example\n * var fatOsc = new FatOscillator(\"Ab3\", \"sine\", 40).toDestination().start();\n */\nexport class FatOscillator extends Source<FatOscillatorOptions> implements ToneOscillatorInterface {\n\n\tname = \"FatOscillator\";\n\n\t/**\n\t *  The oscillator's frequency\n\t */\n\treadonly frequency: Signal<Frequency> = new Signal({\n\t\tcontext: this.context,\n\t\tunits: \"frequency\",\n\t});\n\n\t/**\n\t *  The detune control signal.\n\t */\n\treadonly detune: Signal<Cents> = new Signal({\n\t\tcontext: this.context,\n\t\tunits: \"cents\",\n\t});\n\n\t/**\n\t *  The array of oscillators\n\t */\n\tprivate _oscillators: Oscillator[] = [];\n\n\t/**\n\t *  The total spread of the oscillators\n\t */\n\tprivate _spread: Cents;\n\n\t/**\n\t *  The type of the oscillator\n\t */\n\tprivate _type: ToneOscillatorType;\n\n\t/**\n\t *  The phase of the oscillators\n\t */\n\tprivate _phase: Degrees;\n\n\t/**\n\t *  The partials array\n\t */\n\tprivate _partials: number[];\n\n\t/**\n\t *  The number of partials to use\n\t */\n\tprivate _partialCount: number;\n\n\tconstructor(options?: Partial<FatConstructorOptions>);\n\tconstructor(frequency?: Frequency, type?: ToneOscillatorType, modulationType?: ToneOscillatorType);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(FatOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"spread\"]));\n\t\tconst options = optionsFromArguments(FatOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"spread\"]);\n\n\t\tthis.frequency.setValueAtTime(options.frequency, 0);\n\t\tthis.detune.setValueAtTime(options.detune, 0);\n\n\t\tthis._spread = options.spread;\n\t\tthis._type = options.type;\n\t\tthis._phase = options.phase;\n\t\tthis._partials = options.partials;\n\t\tthis._partialCount = options.partialCount;\n\n\t\t// set the count initially\n\t\tthis.count = options.count;\n\n\t\treadOnly(this, [\"frequency\", \"detune\"]);\n\t}\n\n\tstatic getDefaults(): FatOscillatorOptions {\n\t\treturn Object.assign(Oscillator.getDefaults(), {\n\t\t\tcount : 3,\n\t\t\tspread : 20,\n\t\t\ttype : \"sawtooth\",\n\t\t});\n\t}\n\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._forEach(osc => osc.start(time));\n\t}\n\n\t/**\n\t *  stop the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._forEach(osc => osc.stop(time));\n\t}\n\n\t/**\n\t *  restart the oscillator\n\t */\n\trestart(time): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis._forEach(osc => osc.restart(time));\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over all of the oscillators\n\t */\n\tprivate _forEach(iterator: (osc: Oscillator, index: number) => void): void {\n\t\tfor (let i = 0; i < this._oscillators.length; i++) {\n\t\t\titerator(this._oscillators[i], i);\n\t\t}\n\t}\n\n\t/**\n\t * The type of the oscillator\n\t */\n\tget type(): ToneOscillatorType {\n\t\treturn this._type;\n\t}\n\n\tset type(type: ToneOscillatorType) {\n\t\tthis._type = type;\n\t\tthis._forEach(osc => osc.type = type);\n\t}\n\n\t/**\n\t * The detune spread between the oscillators. If \"count\" is\n\t * set to 3 oscillators and the \"spread\" is set to 40,\n\t * the three oscillators would be detuned like this: [-20, 0, 20]\n\t * for a total detune spread of 40 cents.\n\t */\n\tget spread(): Cents {\n\t\treturn this._spread;\n\t}\n\n\tset spread(spread: Cents) {\n\t\tthis._spread = spread;\n\t\tif (this._oscillators.length > 1) {\n\t\t\tconst start = -spread / 2;\n\t\t\tconst step = spread / (this._oscillators.length - 1);\n\t\t\tthis._forEach((osc, i) => osc.detune.value = start + step * i);\n\t\t}\n\t}\n\n\t/**\n\t * The number of detuned oscillators. Should be an integer greater than 1.\n\t */\n\tget count(): number {\n\t\treturn this._oscillators.length;\n\t}\n\n\tset count(count: number) {\n\t\tcount = Math.max(count, 1);\n\t\tif (this._oscillators.length !== count) {\n\t\t\t// dispose the previous oscillators\n\t\t\tthis._forEach(osc => osc.dispose());\n\t\t\tthis._oscillators = [];\n\t\t\tfor (let i = 0; i < count; i++) {\n\t\t\t\tconst osc = new Oscillator({\n\t\t\t\t\tcontext : this.context,\n\t\t\t\t});\n\t\t\t\tif (this.type === \"custom\") {\n\t\t\t\t\tosc.partials = this._partials;\n\t\t\t\t} else {\n\t\t\t\t\tosc.type = this._type;\n\t\t\t\t}\n\t\t\t\tosc.partialCount = this._partialCount;\n\t\t\t\tosc.phase = this._phase + (i / count) * 360;\n\t\t\t\tosc.volume.value = -6 - count * 1.1;\n\t\t\t\tthis.frequency.connect(osc.frequency);\n\t\t\t\tthis.detune.connect(osc.detune);\n\t\t\t\tosc.connect(this.output);\n\t\t\t\tthis._oscillators[i] = osc;\n\t\t\t}\n\t\t\t// set the spread\n\t\t\tthis.spread = this._spread;\n\t\t\tif (this.state === \"started\") {\n\t\t\t\tthis._forEach(osc => osc.start());\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._phase = phase;\n\t\tthis._forEach(osc => osc.phase = phase);\n\t}\n\n\t/**\n\t * The oscillator type without the partialsCount appended to the end\n\t * @example\n\t * osc.type = 'sine2'\n\t * osc.baseType //'sine'\n\t * osc.partialCount = 2\n\t */\n\tget baseType(): OscillatorType {\n\t\treturn this._oscillators[0].baseType;\n\t}\n\tset baseType(baseType: OscillatorType) {\n\t\tthis._forEach(osc => osc.baseType = baseType);\n\t\tthis._type = this._oscillators[0].type;\n\t}\n\n\t/**\n\t * The partials of the carrier waveform. A partial represents\n\t * the amplitude at a harmonic. The first harmonic is the\n\t * fundamental frequency, the second is the octave and so on\n\t * following the harmonic series.\n\t * Setting this value will automatically set the type to \"custom\".\n\t * The value is an empty array when the type is not \"custom\".\n\t * @memberOf FatOscillator#\n\t * @type {Array}\n\t * @name partials\n\t * @example\n\t * osc.partials = [1, 0.2, 0.01];\n\t */\n\tget partials(): number[] {\n\t\treturn this._oscillators[0].partials;\n\t}\n\tset partials(partials: number[]) {\n\t\tthis._partials = partials;\n\t\tif (partials.length) {\n\t\t\tthis._type = \"custom\";\n\t\t\tthis._forEach(osc => osc.partials = partials);\n\t\t}\n\t}\n\n\t/**\n\t * 'partialCount' offers an alternative way to set the number of used partials.\n\t * When partialCount is 0, the maximum number of partials are used when representing\n\t * the waveform using the periodicWave. When 'partials' is set, this value is\n\t * not settable, but equals the length of the partials array.\n\t * @memberOf FatOscillator#\n\t * @type {Number}\n\t * @name partialCount\n\t */\n\tget partialCount(): number {\n\t\treturn this._oscillators[0].partialCount;\n\t}\n\tset partialCount(partialCount: number) {\n\t\tthis._partialCount = partialCount;\n\t\tthis._forEach(osc => osc.partialCount = partialCount);\n\t\tthis._type = this._oscillators[0].type;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\tthis._forEach(osc => osc.dispose());\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { PWMOscillatorOptions, ToneOscillatorInterface } from \"./OscillatorInterface\";\nimport { PulseOscillator } from \"./PulseOscillator\";\n\n/**\n * PWMOscillator modulates the width of a Tone.PulseOscillator\n * at the modulationFrequency. This has the effect of continuously\n * changing the timbre of the oscillator by altering the harmonics\n * generated.\n *\n * @param {Frequency} frequency The starting frequency of the oscillator.\n * @param {Frequency} modulationFrequency The modulation frequency of the width of the pulse.\n * @example\n *  var pwm = new PWMOscillator(\"Ab3\", 0.3).toDestination().start();\n */\nexport class PWMOscillator extends Source<PWMOscillatorOptions> implements ToneOscillatorInterface {\n\n\tname = \"PWMOscillator\";\n\n\treadonly sourceType = \"pwm\";\n\n\t/**\n\t *  the pulse oscillator\n\t */\n\tprivate _pulse: PulseOscillator = new PulseOscillator({ context: this.context });\n\t/**\n\t *  the modulator\n\t *  @type {Tone.Oscillator}\n\t *  @private\n\t */\n\tprivate _modulator: Oscillator = new Oscillator({ context: this.context });\n\n\t/**\n\t *  Scale the oscillator so it doesn't go silent\n\t *  at the extreme values.\n\t */\n\tprivate _scale: Multiply = new Multiply({\n\t\tcontext: this.context,\n\t\tvalue: 2,\n\t});\n\n\t/**\n\t *  The frequency control.\n\t */\n\treadonly frequency: Signal<Frequency> = this._modulator.frequency;\n\n\t/**\n\t *  The detune of the oscillator.\n\t */\n\treadonly detune: Signal<Cents> = this._modulator.detune;\n\n\t/**\n\t *  The modulation rate of the oscillator.\n\t */\n\treadonly modulationFrequency: Signal<Frequency> = this._pulse.frequency;\n\n\tconstructor(options?: Partial<PWMOscillatorOptions>);\n\tconstructor(frequency?: Frequency, modulationFrequency?: Frequency);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(PWMOscillator.getDefaults(), arguments, [\"frequency\", \"modulationFrequency\"]));\n\t\tconst options = optionsFromArguments(PWMOscillator.getDefaults(), arguments, [\"frequency\", \"modulationFrequency\"]);\n\n\t\t// change the pulse oscillator type\n\t\t// @ts-ignore\n\t\tthis._pulse._sawtooth.type = \"sine\";\n\n\t\tthis._pulse.frequency.setValueAtTime(options.modulationFrequency, 0);\n\t\tthis._modulator.frequency.setValueAtTime(options.frequency, 0);\n\t\tthis._modulator.detune.setValueAtTime(options.detune, 0);\n\t\tthis._modulator.phase = options.phase;\n\n\t\t// connections\n\t\tthis._modulator.chain(this._scale, this._pulse.width);\n\t\tthis._pulse.connect(this.output);\n\t\treadOnly(this, [\"modulationFrequency\", \"frequency\", \"detune\"]);\n\t}\n\n\tstatic getDefaults(): PWMOscillatorOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tfrequency: 440,\n\t\t\tmodulationFrequency: 0.4,\n\t\t\tphase: 0,\n\t\t\ttype: \"pwm\" as \"pwm\",\n\t\t});\n\t}\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._modulator.start(time);\n\t\tthis._pulse.start(time);\n\t}\n\n\t/**\n\t *  stop the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._modulator.stop(time);\n\t\tthis._pulse.stop(time);\n\t}\n\n\t/**\n\t *  restart the oscillator\n\t */\n\trestart(time?: Time): this {\n\t\tthis._modulator.restart(time);\n\t\tthis._pulse.restart(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The type of the oscillator. Always returns \"pwm\".\n\t */\n\tget type(): \"pwm\" {\n\t\treturn \"pwm\";\n\t}\n\n\t/**\n\t * The baseType of the oscillator. Always returns \"pwm\".\n\t */\n\tget baseType(): \"pwm\" {\n\t\treturn \"pwm\";\n\t}\n\n\t/**\n\t * The partials of the waveform. Cannot set partials for this waveform type\n\t */\n\tget partials(): number[] {\n\t\treturn [];\n\t}\n\n\t/**\n\t * No partials for this waveform type.\n\t */\n\tget partialCount(): number {\n\t\treturn 0;\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._modulator.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._modulator.phase = phase;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._pulse.dispose();\n\t\tthis._scale.dispose();\n\t\tthis._modulator.dispose();\n\t\treturn this;\n\t}\n}\n","import { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { isNumber, isString } from \"../../core/util/TypeCheck\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { AMOscillator } from \"./AMOscillator\";\nimport { FatOscillator } from \"./FatOscillator\";\nimport { FMOscillator } from \"./FMOscillator\";\nimport { Oscillator } from \"./Oscillator\";\nimport { AMOscillatorOptions, FatOscillatorOptions,\n\tFMOscillatorOptions, OmniOscillatorConstructorOptions,\n\tOmniOscillatorOptions, OmniOscillatorType,\n\tPulseOscillatorOptions, PWMOscillatorOptions,\n\tToneOscillatorInterface, ToneOscillatorOptions, ToneOscillatorType } from \"./OscillatorInterface\";\nimport { PulseOscillator } from \"./PulseOscillator\";\nimport { PWMOscillator } from \"./PWMOscillator\";\n\n/**\n * All of the oscillator types that OmniOscillator can take on\n */\ntype AnyOscillator = Oscillator | PWMOscillator | PulseOscillator | FatOscillator | AMOscillator | FMOscillator;\n\n/**\n * The constructor of each of the OmniOscillator types\n */\ntype TypeofAnyOscillator = typeof Oscillator | typeof PWMOscillator |\n\ttypeof PulseOscillator | typeof FatOscillator |\n\ttypeof AMOscillator | typeof FMOscillator;\n\n/**\n * Select the Oscillator's Options depending on the generic type.\n */\ntype ConditionalOptions<Osc extends AnyOscillator> =\n\tOsc extends FMOscillator ? FMOscillatorOptions :\n\tOsc extends Oscillator ? ToneOscillatorOptions :\n\tOsc extends AMOscillator ? AMOscillatorOptions :\n\tOsc extends FatOscillator ? FatOscillatorOptions :\n\tOsc extends PulseOscillator ? PulseOscillatorOptions :\n\tOsc extends PWMOscillator ? PWMOscillatorOptions :\n\tToneOscillatorOptions;\n\n/**\n * The aggregate options of all of the oscillators\n */\n// export type OmniOscillatorOptions = ConditionalOptions<AnyOscillator>;\n\n/**\n * All of the Oscillator constructor types mapped to their name.\n */\ninterface OmniOscillatorSource {\n\t\"fm\": FMOscillator;\n\t\"am\": AMOscillator;\n\t\"pwm\": PWMOscillator;\n\t\"pulse\": PulseOscillator;\n\t\"oscillator\": Oscillator;\n\t\"fat\": FatOscillator;\n}\n\n/**\n * The available oscillator types.\n */\nexport type OmniOscSourceType = keyof OmniOscillatorSource;\n\n// Conditional Types\ntype IsAmOrFmOscillator<Osc, Ret> = Osc extends AMOscillator ? Ret : Osc extends FMOscillator ? Ret : undefined;\ntype IsFatOscillator<Osc, Ret> = Osc extends FatOscillator ? Ret : undefined;\ntype IsPWMOscillator<Osc, Ret> = Osc extends PWMOscillator ? Ret : undefined;\ntype IsPulseOscillator<Osc, Ret> = Osc extends PulseOscillator ? Ret : undefined;\ntype IsFMOscillator<Osc, Ret> = Osc extends FMOscillator ? Ret : undefined;\n\n// tslint:disable-next-line: variable-name\nconst OmniOscillatorSourceMap: {\n\t[key in OmniOscSourceType] : TypeofAnyOscillator\n} = {\n\tam: AMOscillator,\n\tfat: FatOscillator,\n\tfm: FMOscillator,\n\toscillator: Oscillator,\n\tpulse: PulseOscillator,\n\tpwm: PWMOscillator,\n};\n\n/**\n * OmniOscillator aggregates Tone.Oscillator, Tone.PulseOscillator,\n * Tone.PWMOscillator, Tone.FMOscillator, Tone.AMOscillator, and Tone.FatOscillator\n * into one class. The oscillator class can be changed by setting the `type`.\n * `omniOsc.type = \"pwm\"` will set it to the Tone.PWMOscillator. Prefixing\n * any of the basic types (\"sine\", \"square4\", etc.) with \"fm\", \"am\", or \"fat\"\n * will use the FMOscillator, AMOscillator or FatOscillator respectively.\n * For example: `omniOsc.type = \"fatsawtooth\"` will create set the oscillator\n * to a FatOscillator of type \"sawtooth\".\n *\n * @param frequency The initial frequency of the oscillator.\n * @param type The type of the oscillator.\n * @example\n * var omniOsc = new OmniOscillator(\"C#4\", \"pwm\");\n */\nexport class OmniOscillator<OscType extends AnyOscillator>\nextends Source<OmniOscillatorConstructorOptions>\nimplements Omit<ToneOscillatorInterface, \"type\"> {\n\n\tname = \"OmniOscillator\";\n\n\t/**\n\t *  The frequency control.\n\t */\n\treadonly frequency: Signal<Frequency> = new Signal({\n\t\tcontext: this.context,\n\t\tunits: \"frequency\",\n\t});\n\n\t/**\n\t *  The detune control.\n\t */\n\treadonly detune: Signal<Cents> = new Signal({\n\t\tcontext: this.context,\n\t\tunits: \"cents\",\n\t});\n\n\t/**\n\t * The oscillator that can switch types\n\t */\n\tprivate _oscillator!: AnyOscillator;\n\n\t/**\n\t *  the type of the oscillator source\n\t */\n\tprivate _sourceType!: OmniOscSourceType;\n\n\tconstructor(options?: Partial<OmniOscillatorConstructorOptions>);\n\tconstructor(frequency?: Frequency, type?: OmniOscillatorType);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(OmniOscillator.getDefaults(), arguments, [\"frequency\", \"type\"]));\n\t\tconst options = optionsFromArguments(OmniOscillator.getDefaults(), arguments, [\"frequency\", \"type\"]);\n\n\t\tthis.frequency.setValueAtTime(options.frequency, 0);\n\t\tthis.detune.setValueAtTime(options.detune, 0);\n\t\treadOnly(this, [\"frequency\", \"detune\"]);\n\n\t\t// set the options\n\t\tthis.set(options);\n\t}\n\n\tstatic getDefaults(): OmniOscillatorOptions {\n\t\treturn Object.assign(\n\t\t\tOscillator.getDefaults(),\n\t\t\tFMOscillator.getDefaults(),\n\t\t\tAMOscillator.getDefaults(),\n\t\t\tFatOscillator.getDefaults(),\n\t\t\tPulseOscillator.getDefaults(),\n\t\t\tPWMOscillator.getDefaults(),\n\t\t);\n\t\t// return Oscillator.getDefaults() as OmniOscillatorConstructorOptions;\n\t}\n\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\tthis._oscillator.start(time);\n\t}\n\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\tthis._oscillator.stop(time);\n\t}\n\n\trestart(time?: Time): this {\n\t\tthis._oscillator.restart(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The type of the oscillator. Can be any of the basic types: sine, square, triangle, sawtooth. Or\n\t * prefix the basic types with \"fm\", \"am\", or \"fat\" to use the FMOscillator, AMOscillator or FatOscillator\n\t * types. The oscillator could also be set to \"pwm\" or \"pulse\". All of the parameters of the\n\t * oscillator's class are accessible when the oscillator is set to that type, but throws an error\n\t * when it's not.\n\t * @example\n\t * omniOsc.type = \"pwm\";\n\t * //modulationFrequency is parameter which is available\n\t * //only when the type is \"pwm\".\n\t * omniOsc.modulationFrequency.value = 0.5;\n\t * @example\n\t * //an square wave frequency modulated by a sawtooth\n\t * omniOsc.type = \"fmsquare\";\n\t * omniOsc.modulationType = \"sawtooth\";\n\t */\n\tget type(): OmniOscillatorType {\n\t\tlet prefix = \"\";\n\t\tif ([\"am\", \"fm\", \"fat\"].some(p => this._sourceType === p)) {\n\t\t\tprefix = this._sourceType;\n\t\t}\n\t\treturn prefix + this._oscillator.type as OmniOscillatorType;\n\t}\n\tset type(type) {\n\t\tif (type.substr(0, 2) === \"fm\") {\n\t\t\tthis._createNewOscillator(\"fm\");\n\t\t\tthis._oscillator = this._oscillator as FMOscillator;\n\t\t\tthis._oscillator.type = type.substr(2) as ToneOscillatorType;\n\t\t} else if (type.substr(0, 2) === \"am\") {\n\t\t\tthis._createNewOscillator(\"am\");\n\t\t\tthis._oscillator = this._oscillator as AMOscillator;\n\t\t\tthis._oscillator.type = type.substr(2)  as ToneOscillatorType;\n\t\t} else if (type.substr(0, 3) === \"fat\") {\n\t\t\tthis._createNewOscillator(\"fat\");\n\t\t\tthis._oscillator = this._oscillator as FatOscillator;\n\t\t\tthis._oscillator.type = type.substr(3)  as ToneOscillatorType;\n\t\t} else if (type === \"pwm\") {\n\t\t\tthis._createNewOscillator(\"pwm\");\n\t\t\tthis._oscillator = this._oscillator as PWMOscillator;\n\t\t} else if (type === \"pulse\") {\n\t\t\tthis._createNewOscillator(\"pulse\");\n\t\t} else {\n\t\t\tthis._createNewOscillator(\"oscillator\");\n\t\t\tthis._oscillator = this._oscillator as Oscillator;\n\t\t\tthis._oscillator.type = (type as ToneOscillatorType);\n\t\t}\n\t}\n\n\t/**\n\t * The partials of the waveform. A partial represents\n\t * the amplitude at a harmonic. The first harmonic is the\n\t * fundamental frequency, the second is the octave and so on\n\t * following the harmonic series.\n\t * Setting this value will automatically set the type to \"custom\".\n\t * The value is an empty array when the type is not \"custom\".\n\t * This is not available on \"pwm\" and \"pulse\" oscillator types.\n\t * @example\n\t * osc.partials = [1, 0.2, 0.01];\n\t */\n\tget partials(): number[] {\n\t\treturn this._oscillator.partials;\n\t}\n\tset partials(partials) {\n\t\tif (!this._getOscType(this._oscillator, \"pulse\") && !this._getOscType(this._oscillator, \"pwm\")) {\n\t\t\tthis._oscillator.partials = partials;\n\t\t}\n\t}\n\n\t/**\n\t * The partial count of the oscillator. This is not available on \"pwm\" and \"pulse\" oscillator types.\n\t * @example\n\t * //set the maximum number of partials\n\t * osc.partialCount = 0;\n\t */\n\tget partialCount(): number {\n\t\treturn this._oscillator.partialCount;\n\t}\n\tset partialCount(partialCount) {\n\t\tif (!this._getOscType(this._oscillator, \"pulse\") && !this._getOscType(this._oscillator, \"pwm\")) {\n\t\t\tthis._oscillator.partialCount = partialCount;\n\t\t}\n\t}\n\n\t/**\n\t * Set the parameters at once. Either pass in an\n\t * object mapping parameters to values, or to set a\n\t * single parameter, by passing in a string and value.\n\t * The last argument is an optional ramp time which\n\t * will ramp any signal values to their destination value\n\t * over the duration of the rampTime.\n\t * @param  params\n\t * @example\n\t * //set values using an object\n\t * filter.set({\n\t * \t\"frequency\" : 300,\n\t * \t\"type\" : \"highpass\"\n\t * });\n\t */\n\tset(props: Partial<OmniOscillatorConstructorOptions>): this {\n\t\t// make sure the type is set first\n\t\tif (Reflect.has(props, \"type\") && props.type) {\n\t\t\tthis.type = props.type;\n\t\t\t// delete props.type;\n\t\t}\n\t\t// then set the rest\n\t\tsuper.set(props);\n\t\treturn this;\n\t}\n\n\tget(): OmniOscillatorConstructorOptions {\n\t\tconst options = this._oscillator.get();\n\t\t// @ts-ignore\n\t\toptions.type = this.type;\n\t\treturn options as OmniOscillatorOptions;\n\t}\n\n\t/**\n\t *  connect the oscillator to the frequency and detune signals\n\t */\n\tprivate _createNewOscillator(oscType: OmniOscSourceType): void {\n\t\tif (oscType !== this._sourceType) {\n\t\t\tthis._sourceType = oscType;\n\t\t\tconst oscConstructor = OmniOscillatorSourceMap[oscType];\n\t\t\t// short delay to avoid clicks on the change\n\t\t\tconst now = this.now();\n\t\t\tif (this._oscillator) {\n\t\t\t\tconst oldOsc = this._oscillator;\n\t\t\t\toldOsc.stop(now);\n\t\t\t\t// dispose the old one\n\t\t\t\tthis.context.setTimeout(() => oldOsc.dispose(), this.blockTime);\n\t\t\t}\n\t\t\t// @ts-ignore\n\t\t\tthis._oscillator = new oscConstructor({\n\t\t\t\tcontext : this.context,\n\t\t\t});\n\t\t\tthis.frequency.connect(this._oscillator.frequency);\n\t\t\tthis.detune.connect(this._oscillator.detune);\n\t\t\tthis._oscillator.connect(this.output);\n\t\t\tif (this.state === \"started\") {\n\t\t\t\tthis._oscillator.start(now);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._oscillator.phase;\n\t}\n\tset phase(phase) {\n\t\tthis._oscillator.phase = phase;\n\t}\n\n\t/**\n\t * The source type of the oscillator.\n\t * @example\n\t * var omniOsc = new OmniOscillator(440, \"fmsquare\");\n\t * omniOsc.sourceType // 'fm'\n\t */\n\tget sourceType(): OmniOscSourceType {\n\t\treturn this._sourceType;\n\t}\n\tset sourceType(sType) {\n\t\t// the basetype defaults to sine\n\t\tlet baseType = \"sine\";\n\t\tif (this._oscillator.type !== \"pwm\" && this._oscillator.type !== \"pulse\") {\n\t\t\tbaseType = this._oscillator.type;\n\t\t}\n\n\t\t// set the type\n\t\tif (sType === \"fm\") {\n\t\t\tthis.type = \"fm\" + baseType as OmniOscillatorType;\n\t\t} else if (sType === \"am\") {\n\t\t\tthis.type = \"am\" + baseType as OmniOscillatorType;\n\t\t} else if (sType === \"fat\") {\n\t\t\tthis.type = \"fat\" + baseType as OmniOscillatorType;\n\t\t} else if (sType === \"oscillator\") {\n\t\t\tthis.type = baseType as OmniOscillatorType;\n\t\t} else if (sType === \"pulse\") {\n\t\t\tthis.type = \"pulse\";\n\t\t} else if (sType === \"pwm\") {\n\t\t\tthis.type = \"pwm\";\n\t\t}\n\t}\n\n\tprivate _getOscType<SourceType extends OmniOscSourceType>(\n\t\tosc: AnyOscillator,\n\t\tsourceType: SourceType,\n\t): osc is OmniOscillatorSource[SourceType] {\n\t\treturn osc instanceof OmniOscillatorSourceMap[sourceType];\n\t}\n\n\t/**\n\t * The base type of the oscillator.\n\t * @example\n\t * var omniOsc = new OmniOscillator(440, \"fmsquare4\");\n\t * omniOsc.sourceType // 'fm'\n\t * omniOsc.baseType //'square'\n\t * omniOsc.partialCount //4\n\t */\n\tget baseType(): OscillatorType | \"pwm\" | \"pulse\" {\n\t\treturn this._oscillator.baseType;\n\t}\n\tset baseType(baseType) {\n\t\tif (!this._getOscType(this._oscillator, \"pulse\") &&\n\t\t\t!this._getOscType(this._oscillator, \"pwm\") &&\n\t\t\tbaseType !== \"pulse\" && baseType !== \"pwm\") {\n\t\t\tthis._oscillator.baseType = baseType;\n\t\t}\n\t}\n\n\t/**\n\t * The width of the oscillator when sourceType === \"pulse\".\n\t * @example\n\t * var omniOsc = new OmniOscillator(440, \"pulse\");\n\t * //can access the width attribute only if type === \"pulse\"\n\t * omniOsc.width.value = 0.2;\n\t */\n\tget width(): IsPulseOscillator<OscType, Signal<AudioRange>> {\n\t\tif (this._getOscType(this._oscillator, \"pulse\")) {\n\t\t\treturn this._oscillator.width as IsPulseOscillator<OscType, Signal<AudioRange>> ;\n\t\t} else {\n\t\t\treturn undefined as IsPulseOscillator<OscType, Signal<AudioRange>> ;\n\t\t}\n\t}\n\n\t/**\n\t * The number of detuned oscillators, when sourceType === \"fat\".\n\t */\n\tget count(): IsFatOscillator<OscType, number> {\n\t\tif (this._getOscType(this._oscillator, \"fat\")) {\n\t\t\treturn this._oscillator.count as IsFatOscillator<OscType, number>;\n\t\t} else {\n\t\t\treturn undefined as IsFatOscillator<OscType, number>;\n\t\t}\n\t}\n\tset count(count) {\n\t\tif (this._getOscType(this._oscillator, \"fat\") && isNumber(count)) {\n\t\t\tthis._oscillator.count = count;\n\t\t}\n\t}\n\n\t/**\n\t * The detune spread between the oscillators. If \"count\" is\n\t * set to 3 oscillators and the \"spread\" is set to 40,\n\t * the three oscillators would be detuned like this: [-20, 0, 20]\n\t * for a total detune spread of 40 cents. See Tone.FatOscillator\n\t * for more info.\n\t */\n\tget spread(): IsFatOscillator<OscType, Cents> {\n\t\tif (this._getOscType(this._oscillator, \"fat\")) {\n\t\t\treturn this._oscillator.spread as IsFatOscillator<OscType, Cents>;\n\t\t} else {\n\t\t\treturn undefined as IsFatOscillator<OscType, Cents>;\n\t\t}\n\t}\n\tset spread(spread) {\n\t\tif (this._getOscType(this._oscillator, \"fat\") && isNumber(spread)) {\n\t\t\tthis._oscillator.spread = spread;\n\t\t}\n\t}\n\n\t/**\n\t * The type of the modulator oscillator. Only if the oscillator\n\t * is set to \"am\" or \"fm\" types. see. Tone.AMOscillator or Tone.FMOscillator\n\t * for more info.\n\t */\n\tget modulationType(): IsAmOrFmOscillator<OscType, ToneOscillatorType> {\n\t\tif (this._getOscType(this._oscillator, \"fm\") || this._getOscType(this._oscillator, \"am\")) {\n\t\t\treturn this._oscillator.modulationType as IsAmOrFmOscillator<OscType, ToneOscillatorType>;\n\t\t} else {\n\t\t\treturn undefined as IsAmOrFmOscillator<OscType, ToneOscillatorType>;\n\t\t}\n\t}\n\tset modulationType(mType) {\n\t\tif ((this._getOscType(this._oscillator, \"fm\") || this._getOscType(this._oscillator, \"am\")) && isString(mType)) {\n\t\t\tthis._oscillator.modulationType = mType;\n\t\t}\n\t}\n\n\t/**\n\t * The modulation index which is in essence the depth or amount of the modulation. In other terms it is the\n\t * ratio of the frequency of the modulating signal (mf) to the amplitude of the\n\t * modulating signal (ma) -- as in ma/mf.\n\t * See Tone.FMOscillator for more info.\n\t */\n\tget modulationIndex(): IsFMOscillator<OscType, Signal<Positive>> {\n\t\tif (this._getOscType(this._oscillator, \"fm\")) {\n\t\t\treturn this._oscillator.modulationIndex as IsFMOscillator<OscType, Signal<Positive>>;\n\t\t} else {\n\t\t\treturn undefined as IsFMOscillator<OscType, Signal<Positive>>;\n\t\t}\n\t}\n\n\t/**\n\t *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators.\n\t *  A harmonicity of 1 gives both oscillators the same frequency.\n\t *  Harmonicity = 2 means a change of an octave. See Tone.AMOscillator or Tone.FMOscillator\n\t *  for more info.\n\t */\n\tget harmonicity(): IsAmOrFmOscillator<OscType, Signal<Positive>> {\n\t\tif (this._getOscType(this._oscillator, \"fm\") || this._getOscType(this._oscillator, \"am\")) {\n\t\t\treturn this._oscillator.harmonicity as IsAmOrFmOscillator<OscType, Signal<Positive>>;\n\t\t} else {\n\t\t\treturn undefined as IsAmOrFmOscillator<OscType, Signal<Positive>>;\n\t\t}\n\t}\n\n\t/**\n\t * The modulationFrequency Signal of the oscillator\n\t * (only if the oscillator type is set to pwm). See\n\t * Tone.PWMOscillator for more info.\n\t * @example\n\t * var omniOsc = new OmniOscillator(440, \"pwm\");\n\t * //can access the modulationFrequency attribute only if type === \"pwm\"\n\t * omniOsc.modulationFrequency.value = 0.2;\n\t */\n\tget modulationFrequency(): IsPWMOscillator<OscType, Signal<Frequency>> {\n\t\tif (this._getOscType(this._oscillator, \"pwm\")) {\n\t\t\treturn this._oscillator.modulationFrequency as IsPWMOscillator<OscType, Signal<Frequency>>;\n\t\t} else {\n\t\t\treturn undefined as IsPWMOscillator<OscType, Signal<Frequency>>;\n\t\t}\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.detune.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis._oscillator.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp } from \"../../core/util/Interface\";\nimport { isUndef } from \"../../core/util/TypeCheck\";\nimport { Source, SourceOptions } from \"../Source\";\nimport { ToneBufferSource } from \"./BufferSource\";\n\ninterface PlayerOptions extends SourceOptions {\n\tonload: () => void;\n\tplaybackRate: Positive;\n\tloop: boolean;\n\tautostart: boolean;\n\tloopStart: Time;\n\tloopEnd: Time;\n\treverse: boolean;\n\tfadeIn: Time;\n\tfadeOut: Time;\n\turl?: ToneAudioBuffer | string | AudioBuffer;\n}\n\n/**\n * Player is an audio file player with start, loop, and stop functions.\n *\n * @param url Either the AudioBuffer or the url from which to load the AudioBuffer\n * @param onload The function to invoke when the buffer is loaded.\n *                            Recommended to use Tone.Buffer.on('load') instead.\n * @example\n * var player = new Player(\"./path/to/sample.mp3\").toDestination();\n * //play as soon as the buffer is loaded\n * player.autostart = true;\n */\nexport class Player extends Source<PlayerOptions> {\n\n\tname = \"Player\";\n\n\t/**\n\t * If the file should play as soon\n\t * as the buffer is loaded.\n\t * @example\n\t * //will play as soon as it's loaded\n\t * var player = new Player({\n\t * \t\"url\" : \"./path/to/sample.mp3\",\n\t * \t\"autostart\" : true,\n\t * }).toDestination();\n\t */\n\tautostart: boolean;\n\n\t/**\n\t *  The buffer\n\t */\n\tprivate _buffer: ToneAudioBuffer;\n\n\t/**\n\t *  if the buffer should loop once it's over\n\t */\n\tprivate _loop: boolean;\n\n\t/**\n\t *  if 'loop' is true, the loop will start at this position\n\t */\n\tprivate _loopStart: Time;\n\n\t/**\n\t *  if 'loop' is true, the loop will end at this position\n\t */\n\tprivate _loopEnd: Time;\n\n\t/**\n\t *  the playback rate\n\t */\n\tprivate _playbackRate: Positive;\n\n\t/**\n\t *  All of the active buffer source nodes\n\t */\n\tprivate _activeSources: Set<ToneBufferSource> = new Set();\n\n\t/**\n\t *  The fadeIn time of the amplitude envelope.\n\t */\n\tfadeIn: Time;\n\n\t/**\n\t *  The fadeOut time of the amplitude envelope.\n\t */\n\tfadeOut: Time;\n\n\tconstructor(options?: Partial<PlayerOptions>);\n\tconstructor(url?: string | AudioBuffer | ToneAudioBuffer, onload?: () => void);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Player.getDefaults(), arguments, [\"url\", \"onload\"]));\n\t\tconst options = optionsFromArguments(Player.getDefaults(), arguments, [\"url\", \"onload\"]);\n\n\t\tthis._buffer = new ToneAudioBuffer({\n\t\t\tonload: this._onload.bind(this, options.onload),\n\t\t\treverse: options.reverse,\n\t\t\turl: options.url,\n\t\t});\n\t\tthis.autostart = options.autostart;\n\t\tthis._loop = options.loop;\n\t\tthis._loopStart = options.loopStart;\n\t\tthis._loopEnd = options.loopEnd;\n\t\tthis._playbackRate = options.playbackRate;\n\t\tthis.fadeIn = options.fadeIn;\n\t\tthis.fadeOut = options.fadeOut;\n\t}\n\n\tstatic getDefaults(): PlayerOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tautostart : false,\n\t\t\tfadeIn : 0,\n\t\t\tfadeOut : 0,\n\t\t\tloop : false,\n\t\t\tloopEnd : 0,\n\t\t\tloopStart : 0,\n\t\t\tonload : noOp,\n\t\t\tplaybackRate : 1,\n\t\t\treverse : false,\n\t\t});\n\t}\n\n\t/**\n\t * Load the audio file as an audio buffer.\n\t * Decodes the audio asynchronously and invokes\n\t * the callback once the audio buffer loads.\n\t * Note: this does not need to be called if a url\n\t * was passed in to the constructor. Only use this\n\t * if you want to manually load a new url.\n\t * @param url The url of the buffer to load. Filetype support depends on the browser.\n\t */\n\tasync load(url: string): Promise<this> {\n\t\tawait this._buffer.load(url);\n\t\tthis._onload();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Internal callback when the buffer is loaded.\n\t */\n\tprivate _onload(callback: () => void = noOp): void {\n\t\tcallback();\n\t\tif (this.autostart) {\n\t\t\tthis.start();\n\t\t}\n\t}\n\n\t/**\n\t * Internal callback when the buffer is done playing.\n\t */\n\tprivate _onSourceEnd(source: ToneBufferSource): void {\n\t\tthis._activeSources.delete(source);\n\t\tif (this._activeSources.size === 0 && !this._synced) {\n\t\t\tthis._state.setStateAtTime(\"stopped\", this.now());\n\t\t}\n\t}\n\n\t/**\n\t *  Play the buffer at the given startTime. Optionally add an offset\n\t *  and/or duration which will play the buffer from a position\n\t *  within the buffer for the given duration.\n\t *\n\t *  @param  time When the player should start.\n\t *  @param  offset The offset from the beginning of the sample\n\t *                                 to start at.\n\t *  @param  duration How long the sample should play. If no duration is given, it will default to the full length\n\t *                   of the sample (minus any offset)\n\t */\n\tstart(time?: Time, offset?: Time, duration?: Time): this {\n\t\tsuper.start(time, offset, duration);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Internal start method\n\t */\n\tprotected _start(startTime?: Time, offset?: Time, duration?: Time): void {\n\t\t// if it's a loop the default offset is the loopstart point\n\t\tif (this._loop) {\n\t\t\toffset = defaultArg(offset, this._loopStart);\n\t\t} else {\n\t\t\t// otherwise the default offset is 0\n\t\t\toffset = defaultArg(offset, 0);\n\t\t}\n\n\t\t// compute the values in seconds\n\t\toffset = this.toSeconds(offset);\n\n\t\t// if it's synced, it should factor in the playback rate for computing the offset\n\t\tif (this._synced) {\n\t\t\toffset *= this._playbackRate;\n\t\t}\n\n\t\t// compute the duration which is either the passed in duration of the buffer.duration - offset\n\t\tlet computedDuration = defaultArg(duration, Math.max(this._buffer.duration - offset, 0));\n\t\tcomputedDuration = this.toSeconds(computedDuration);\n\n\t\t// scale it by the playback rate\n\t\tcomputedDuration = computedDuration / this._playbackRate;\n\n\t\t// get the start time\n\t\tstartTime = this.toSeconds(startTime);\n\n\t\t// make the source\n\t\tconst source = new ToneBufferSource({\n\t\t\tbuffer : this._buffer,\n\t\t\tcontext: this.context,\n\t\t\tfadeIn : this.fadeIn,\n\t\t\tfadeOut : this.fadeOut,\n\t\t\tloop : this._loop,\n\t\t\tloopEnd : this._loopEnd,\n\t\t\tloopStart : this._loopStart,\n\t\t\tonended : this._onSourceEnd.bind(this),\n\t\t\tplaybackRate : this._playbackRate,\n\t\t}).connect(this.output);\n\n\t\t// set the looping properties\n\t\tif (!this._loop && !this._synced) {\n\t\t\t// if it's not looping, set the state change at the end of the sample\n\t\t\tthis._state.setStateAtTime(\"stopped\", startTime + computedDuration, {\n\t\t\t\timplicitEnd: true,\n\t\t\t});\n\t\t}\n\n\t\t// add it to the array of active sources\n\t\tthis._activeSources.add(source);\n\n\t\t// start it\n\t\tif (this._loop && isUndef(duration)) {\n\t\t\tsource.start(startTime, offset);\n\t\t} else {\n\t\t\t// subtract the fade out time\n\t\t\tsource.start(startTime, offset, computedDuration - this.toSeconds(this.fadeOut));\n\t\t}\n\t}\n\n\t/**\n\t *  Stop playback.\n\t */\n\tprotected _stop(time?: Time): void {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._activeSources.forEach(source => source.stop(computedTime));\n\t}\n\n\t/**\n\t * Stop and then restart the player from the beginning (or offset)\n\t * @param  time When the player should start.\n\t * @param  offset The offset from the beginning of the sample to start at.\n\t * @param  duration How long the sample should play. If no duration is given,\n\t * \t\t\t\t\tit will default to the full length of the sample (minus any offset)\n\t */\n\trestart(time?: Time, offset?: Time, duration?: Time): this {\n\t\tthis._stop(time);\n\t\tthis._start(time, offset, duration);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Seek to a specific time in the player's buffer. If the\n\t *  source is no longer playing at that time, it will stop.\n\t *  If you seek to a time that\n\t *  @param {Time} offset The time to seek to.\n\t *  @param {Time=} time The time for the seek event to occur.\n\t *  @return {Player} this\n\t *  @example\n\t * source.start(0.2);\n\t * source.stop(0.4);\n\t */\n\tseek(offset: Time, when?: Time): this {\n\t\tconst computedTime = this.toSeconds(when);\n\t\tif (this._state.getValueAtTime(computedTime) === \"started\") {\n\t\t\tconst comptuedOffset = this.toSeconds(offset);\n\t\t\t// if it's currently playing, stop it\n\t\t\tthis._stop(computedTime);\n\t\t\t// restart it at the given time\n\t\t\tthis._start(computedTime, comptuedOffset);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set the loop start and end. Will only loop if loop is set to true.\n\t * @param loopStart The loop end time\n\t * @param loopEnd The loop end time\n\t * @example\n\t * //loop 0.1 seconds of the file.\n\t * player.setLoopPoints(0.2, 0.3);\n\t * player.loop = true;\n\t */\n\tsetLoopPoints(loopStart: Time, loopEnd: Time): this {\n\t\tthis.loopStart = loopStart;\n\t\tthis.loopEnd = loopEnd;\n\t\treturn this;\n\t}\n\n\t/**\n\t * If loop is true, the loop will start at this position.\n\t */\n\tget loopStart(): Time {\n\t\treturn this._loopStart;\n\t}\n\tset loopStart(loopStart) {\n\t\tthis._loopStart = loopStart;\n\t\t// get the current source\n\t\tthis._activeSources.forEach(source => {\n\t\t\tsource.loopStart = loopStart;\n\t\t});\n\t}\n\n\t/**\n\t * If loop is true, the loop will end at this position.\n\t */\n\tget loopEnd(): Time {\n\t\treturn this._loopEnd;\n\t}\n\tset loopEnd(loopEnd) {\n\t\tthis._loopEnd = loopEnd;\n\t\t// get the current source\n\t\tthis._activeSources.forEach(source => {\n\t\t\tsource.loopEnd = loopEnd;\n\t\t});\n\t}\n\n\t/**\n\t * The audio buffer belonging to the player.\n\t */\n\tget buffer(): ToneAudioBuffer {\n\t\treturn this._buffer;\n\t}\n\tset buffer(buffer) {\n\t\tthis._buffer.set(buffer);\n\t}\n\n\t/**\n\t * If the buffer should loop once it's over.\n\t */\n\tget loop(): boolean {\n\t\treturn this._loop;\n\t}\n\tset loop(loop) {\n\t\t// if no change, do nothing\n\t\tif (this._loop === loop) {\n\t\t\treturn;\n\t\t}\n\t\tthis._loop = loop;\n\t\t// set the loop of all of the sources\n\t\tthis._activeSources.forEach(source => {\n\t\t\tsource.loop = loop;\n\t\t});\n\t\tif (loop) {\n\t\t\t// remove the next stopEvent\n\t\t\tconst stopEvent = this._state.getNextState(\"stopped\", this.now());\n\t\t\tif (stopEvent) {\n\t\t\t\tthis._state.cancel(stopEvent.time);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * The playback speed. 1 is normal speed. This is not a signal because\n\t * Safari and iOS currently don't support playbackRate as a signal.\n\t */\n\tget playbackRate(): Positive {\n\t\treturn this._playbackRate;\n\t}\n\tset playbackRate(rate) {\n\t\tthis._playbackRate = rate;\n\t\tconst now = this.now();\n\n\t\t// cancel the stop event since it's at a different time now\n\t\tconst stopEvent = this._state.getNextState(\"stopped\", now);\n\t\tif (stopEvent && stopEvent.implicitEnd) {\n\t\t\tthis._state.cancel(stopEvent.time);\n\t\t}\n\n\t\t// set all the sources\n\t\tthis._activeSources.forEach(source => {\n\t\t\tsource.playbackRate.setValueAtTime(rate, now);\n\t\t});\n\t}\n\n\t/**\n\t * The direction the buffer should play in\n\t */\n\tget reverse(): boolean {\n\t\treturn this._buffer.reverse;\n\t}\n\tset reverse(rev) {\n\t\tthis._buffer.reverse = rev;\n\t}\n\n\t/**\n\t * If the buffer is loaded\n\t */\n\tget loaded(): boolean {\n\t\treturn this._buffer.loaded;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\t// disconnect all of the players\n\t\tthis._activeSources.forEach(source => source.dispose());\n\t\tthis._activeSources.clear();\n\t\tthis._buffer.dispose();\n\t\treturn this;\n\t}\n}\n","import { InputNode, OutputNode } from \"../../core/context/ToneAudioNode\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { isArray, isObject, isString } from \"../../core/util/TypeCheck\";\nimport { connectSignal, Signal } from \"../../signal/Signal\";\n\ntype BasicEnvelopeCurve = \"linear\" | \"exponential\";\ntype InternalEnvelopeCurve = BasicEnvelopeCurve | number[];\nexport type EnvelopeCurve = EnvelopeCurveName | number[];\n\nexport interface EnvelopeOptions extends ToneAudioNodeOptions {\n\tattack: Time;\n\tdecay: Time;\n\tsustain: NormalRange;\n\trelease: Time;\n\tattackCurve: EnvelopeCurve;\n\treleaseCurve: EnvelopeCurve;\n\tdecayCurve: BasicEnvelopeCurve;\n}\n\n/**\n *  Envelope is an [ADSR](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope)\n *  envelope generator. Envelope outputs a signal which\n *  can be connected to an AudioParam or Tone.Signal.\n * ```\n *           /\\\n *          /  \\\n *         /    \\\n *        /      \\\n *       /        \\___________\n *      /                     \\\n *     /                       \\\n *    /                         \\\n *   /                           \\\n * ```\n *\n *  @param attack The amount of time it takes for the envelope to go from\n *                         0 to it's maximum value.\n *  @param decay\tThe period of time after the attack that it takes for the envelope\n *                       \tto fall to the sustain value. Value must be greater than 0.\n *  @param sustain\tThe percent of the maximum value that the envelope rests at until\n *                                \tthe release is triggered.\n *  @param release\tThe amount of time after the release is triggered it takes to reach 0.\n *                         \tValue must be greater than 0.\n *  @example\n * //an amplitude envelope\n * var gainNode = Tone.context.createGain();\n * var env = new Envelope({\n * \t\"attack\" : 0.1,\n * \t\"decay\" : 0.2,\n * \t\"sustain\" : 1,\n * \t\"release\" : 0.8,\n * });\n * env.connect(gainNode.gain);\n */\nexport class Envelope extends ToneAudioNode<EnvelopeOptions> {\n\n\tname = \"Envelope\";\n\n\t/**\n\t * When triggerAttack is called, the attack time is the amount of\n\t * time it takes for the envelope to reach it's maximum value.\n\t * ```\n\t *           /\\\n\t *          /X \\\n\t *         /XX  \\\n\t *        /XXX   \\\n\t *       /XXXX    \\___________\n\t *      /XXXXX                \\\n\t *     /XXXXXX                 \\\n\t *    /XXXXXXX                  \\\n\t *   /XXXXXXXX                   \\\n\t * ```\n\t */\n\tattack: Time;\n\n\t/**\n\t * After the attack portion of the envelope, the value will fall\n\t * over the duration of the decay time to it's sustain value.\n\t * ```\n\t *           /\\\n\t *          / X\\\n\t *         /  XX\\\n\t *        /   XXX\\\n\t *       /    XXXX\\___________\n\t *      /     XXXXX           \\\n\t *     /      XXXXX            \\\n\t *    /       XXXXX             \\\n\t *   /        XXXXX              \\\n\t * ```\n\t */\n\tdecay: Time;\n\n\t/**\n\t * \tThe sustain value is the value\n\t * \twhich the envelope rests at after triggerAttack is\n\t * \tcalled, but before triggerRelease is invoked.\n\t * ```\n\t *           /\\\n\t *          /  \\\n\t *         /    \\\n\t *        /      \\\n\t *       /        \\___________\n\t *      /          XXXXXXXXXXX\\\n\t *     /           XXXXXXXXXXX \\\n\t *    /            XXXXXXXXXXX  \\\n\t *   /             XXXXXXXXXXX   \\\n\t * ```\n\t */\n\tsustain: NormalRange;\n\n\t/**\n\t *  After triggerRelease is called, the envelope's\n\t *  value will fall to it's miminum value over the\n\t *  duration of the release time.\n\t * ```\n\t *           /\\\n\t *          /  \\\n\t *         /    \\\n\t *        /      \\\n\t *       /        \\___________\n\t *      /                    X\\\n\t *     /                     XX\\\n\t *    /                      XXX\\\n\t *   /                       XXXX\\\n\t * ```\n\t */\n\trelease: Time;\n\n\t/**\n\t *  The automation curve type for the attack\n\t */\n\tprivate _attackCurve!: InternalEnvelopeCurve;\n\n\t/**\n\t *  The automation curve type for the decay\n\t */\n\tprivate _decayCurve!: BasicEnvelopeCurve;\n\n\t/**\n\t *  The automation curve type for the release\n\t */\n\tprivate _releaseCurve!: InternalEnvelopeCurve;\n\n\t/**\n\t *  the signal which is output.\n\t */\n\tprotected _sig: Signal<NormalRange> = new Signal({\n\t\tcontext: this.context,\n\t\tvalue: 0,\n\t});\n\tprotected _internalChannels = [this._sig];\n\n\t/**\n\t * The output signal of the envelope\n\t */\n\toutput: OutputNode = this._sig;\n\n\t/**\n\t * Envelope has no input\n\t */\n\tinput: InputNode | undefined = undefined;\n\n\tconstructor(attack?: Time, decay?: Time, sustain?: NormalRange, release?: Time);\n\tconstructor(options?: Partial<EnvelopeOptions>)\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Envelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]));\n\t\tconst options = optionsFromArguments(Envelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]);\n\n\t\tthis.attack = options.attack;\n\t\tthis.decay = options.decay;\n\t\tthis.sustain = options.sustain;\n\t\tthis.release = options.release;\n\t\tthis.attackCurve = options.attackCurve;\n\t\tthis.releaseCurve = options.releaseCurve;\n\t\tthis.decayCurve = options.decayCurve;\n\t}\n\n\tstatic getDefaults(): EnvelopeOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tattack : 0.01,\n\t\t\tattackCurve : \"linear\" as EnvelopeCurveName,\n\t\t\tdecay : 0.1,\n\t\t\tdecayCurve : \"exponential\" as BasicEnvelopeCurve,\n\t\t\trelease : 1,\n\t\t\treleaseCurve : \"exponential\" as EnvelopeCurveName,\n\t\t\tsustain : 0.5,\n\t\t});\n\t}\n\n\t/**\n\t * Read the current value of the envelope. Useful for\n\t * syncronizing visual output to the envelope.\n\t */\n\tget value(): NormalRange {\n\t\treturn this.getValueAtTime(this.now());\n\t}\n\n\t/**\n\t *  Get the curve\n\t *  @param  curve\n\t *  @param  direction  In/Out\n\t *  @return  {String}  The curve name\n\t *  @private\n\t */\n\tprivate _getCurve(curve: InternalEnvelopeCurve, direction: EnvelopeDirection): EnvelopeCurve {\n\t\tif (isString(curve)) {\n\t\t\treturn curve;\n\t\t} else {\n\t\t\t// look up the name in the curves array\n\t\t\tlet curveName: EnvelopeCurveName;\n\t\t\tfor (curveName in EnvelopeCurves) {\n\t\t\t\tif (EnvelopeCurves[curveName][direction] === curve) {\n\t\t\t\t\treturn curveName;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// return the custom curve\n\t\t\treturn curve;\n\t\t}\n\t}\n\n\t/**\n\t *  Assign a the curve to the given name using the direction\n\t *  @param  name\n\t *  @param  direction In/Out\n\t *  @param  curve\n\t *  @private\n\t */\n\tprivate _setCurve(\n\t\tname: \"_attackCurve\" | \"_decayCurve\" | \"_releaseCurve\",\n\t\tdirection: EnvelopeDirection,\n\t\tcurve: EnvelopeCurve,\n\t): void {\n\t\t// check if it's a valid type\n\t\tif (isString(curve) && Reflect.has(EnvelopeCurves, curve)) {\n\t\t\tconst curveDef = EnvelopeCurves[curve];\n\t\t\tif (isObject(curveDef)) {\n\t\t\t\tif (name !== \"_decayCurve\") {\n\t\t\t\t\tthis[name] = curveDef[direction];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis[name] = curveDef;\n\t\t\t}\n\t\t} else if (isArray(curve) && name !== \"_decayCurve\") {\n\t\t\tthis[name] = curve;\n\t\t} else {\n\t\t\tthrow new Error(\"Envelope: invalid curve: \" + curve);\n\t\t}\n\t}\n\n\t/**\n\t * The shape of the attack.\n\t * Can be any of these strings:\n\t * * \"linear\"\n\t * * \"exponential\"\n\t * * \"sine\"\n\t * * \"cosine\"\n\t * * \"bounce\"\n\t * * \"ripple\"\n\t * * \"step\"\n\t *\n\t * Can also be an array which describes the curve. Values\n\t * in the array are evenly subdivided and linearly\n\t * interpolated over the duration of the attack.\n\t * @example\n\t * env.attackCurve = \"linear\";\n\t * @example\n\t * //can also be an array\n\t * env.attackCurve = [0, 0.2, 0.3, 0.4, 1]\n\t */\n\tget attackCurve(): EnvelopeCurve {\n\t\treturn this._getCurve(this._attackCurve, \"In\");\n\t}\n\tset attackCurve(curve) {\n\t\tthis._setCurve(\"_attackCurve\", \"In\", curve);\n\t}\n\n\t/**\n\t * The shape of the release. See the attack curve types.\n\t * @example\n\t * env.releaseCurve = \"linear\";\n\t */\n\tget releaseCurve(): EnvelopeCurve {\n\t\treturn this._getCurve(this._releaseCurve, \"Out\");\n\t}\n\tset releaseCurve(curve) {\n\t\tthis._setCurve(\"_releaseCurve\", \"Out\", curve);\n\t}\n\n\t/**\n\t * The shape of the decay either \"linear\" or \"exponential\"\n\t * @example\n\t * env.decayCurve = \"linear\";\n\t */\n\tget decayCurve(): BasicEnvelopeCurve {\n\t\treturn this._decayCurve;\n\t}\n\tset decayCurve(curve) {\n\t\tthis.assert([\"linear\", \"exponential\"].some(c => c === curve), `Invalid envelope curve: ${curve}`);\n\t\tthis._decayCurve = curve;\n\t}\n\n\t/**\n\t * Trigger the attack/decay portion of the ADSR envelope.\n\t * @param  time When the attack should start.\n\t * @param velocity The velocity of the envelope scales the vales.\n\t *                              number between 0-1\n\t * @example\n\t * //trigger the attack 0.5 seconds from now with a velocity of 0.2\n\t * env.triggerAttack(\"+0.5\", 0.2);\n\t */\n\ttriggerAttack(time?: Time, velocity: NormalRange = 1): this {\n\t\tthis.log(\"triggerAttack\", time, velocity);\n\t\ttime = this.toSeconds(time);\n\t\tconst originalAttack = this.toSeconds(this.attack);\n\t\tlet attack = originalAttack;\n\t\tconst decay = this.toSeconds(this.decay);\n\t\t// check if it's not a complete attack\n\t\tconst currentValue = this.getValueAtTime(time);\n\t\tif (currentValue > 0) {\n\t\t\t// subtract the current value from the attack time\n\t\t\tconst attackRate = 1 / attack;\n\t\t\tconst remainingDistance = 1 - currentValue;\n\t\t\t// the attack is now the remaining time\n\t\t\tattack = remainingDistance / attackRate;\n\t\t}\n\t\t// attack\n\t\tif (attack === 0) {\n\t\t\t// case where the attack time is 0 should set instantly\n\t\t\tthis._sig.setValueAtTime(velocity, time);\n\t\t} else if (this._attackCurve === \"linear\") {\n\t\t\tthis._sig.linearRampTo(velocity, attack, time);\n\t\t} else if (this._attackCurve === \"exponential\") {\n\t\t\tthis._sig.targetRampTo(velocity, attack, time);\n\t\t} else if (attack > 0) {\n\t\t\tthis._sig.cancelAndHoldAtTime(time);\n\t\t\tlet curve = this._attackCurve;\n\t\t\t// find the starting position in the curve\n\t\t\tfor (let i = 1; i < curve.length; i++) {\n\t\t\t\t// the starting index is between the two values\n\t\t\t\tif (curve[i - 1] <= currentValue && currentValue <= curve[i]) {\n\t\t\t\t\tcurve = this._attackCurve.slice(i);\n\t\t\t\t\t// the first index is the current value\n\t\t\t\t\tcurve[0] = currentValue;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._sig.setValueCurveAtTime(curve, time, attack, velocity);\n\t\t}\n\t\t// decay\n\t\tif (decay) {\n\t\t\tconst decayValue = velocity * this.sustain;\n\t\t\tconst decayStart = time + attack;\n\t\t\tthis.log(\"decay\", decayStart);\n\t\t\tif (this._decayCurve === \"linear\") {\n\t\t\t\tthis._sig.linearRampTo(decayValue, decay, decayStart + this.sampleTime);\n\t\t\t} else if (this._decayCurve === \"exponential\") {\n\t\t\t\tthis._sig.exponentialApproachValueAtTime(decayValue, decayStart, decay);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Triggers the release of the envelope.\n\t *  @param  time When the release portion of the envelope should start.\n\t *  @example\n\t *  //trigger release immediately\n\t *  env.triggerRelease();\n\t */\n\ttriggerRelease(time?: Time): this {\n\t\tthis.log(\"triggerRelease\", time);\n\t\ttime = this.toSeconds(time);\n\t\tconst currentValue = this.getValueAtTime(time);\n\t\tif (currentValue > 0) {\n\t\t\tconst release = this.toSeconds(this.release);\n\t\t\tif (this._releaseCurve === \"linear\") {\n\t\t\t\tthis._sig.linearRampTo(0, release, time);\n\t\t\t} else if (this._releaseCurve === \"exponential\") {\n\t\t\t\tthis._sig.targetRampTo(0, release, time);\n\t\t\t} else {\n\t\t\t\tif (isArray(this._releaseCurve)) {\n\t\t\t\t\tthis._sig.cancelAndHoldAtTime(time);\n\t\t\t\t\tthis._sig.setValueCurveAtTime(this._releaseCurve, time, release, currentValue);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Get the scheduled value at the given time. This will\n\t *  return the unconverted (raw) value.\n\t */\n\tgetValueAtTime(time: Time): NormalRange {\n\t\treturn this._sig.getValueAtTime(time);\n\t}\n\n\t/**\n\t *  triggerAttackRelease is shorthand for triggerAttack, then waiting\n\t *  some duration, then triggerRelease.\n\t *  @param duration The duration of the sustain.\n\t *  @param time When the attack should be triggered.\n\t *  @param velocity The velocity of the envelope.\n\t *  @example\n\t * //trigger the attack and then the release after 0.6 seconds.\n\t * env.triggerAttackRelease(0.6);\n\t */\n\ttriggerAttackRelease(duration: Time, time?: Time, velocity: NormalRange = 1): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis.triggerAttack(time, velocity);\n\t\tthis.triggerRelease(time + this.toSeconds(duration));\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Cancels all scheduled envelope changes after the given time.\n\t */\n\tcancel(after?: Time): this {\n\t\tthis._sig.cancelScheduledValues(this.toSeconds(after));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Connect the envelope to a destination node.\n\t */\n\tconnect(destination: InputNode, outputNumber: number = 0, inputNumber: number = 0): this {\n\t\tconnectSignal(this, destination, outputNumber, inputNumber);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._sig.dispose();\n\t\treturn this;\n\t}\n}\n\ninterface EnvelopeCurveObject {\n\tIn: number[];\n\tOut: number[];\n}\n\ntype EnvelopeDirection = keyof EnvelopeCurveObject;\n\ninterface EnvelopeCurveMap {\n\tlinear: \"linear\";\n\texponential: \"exponential\";\n\tbounce: EnvelopeCurveObject;\n\tcosine: EnvelopeCurveObject;\n\tsine: EnvelopeCurveObject;\n\tripple: EnvelopeCurveObject;\n\tstep: EnvelopeCurveObject;\n}\n\ntype EnvelopeCurveName =  keyof EnvelopeCurveMap;\n\n/**\n *  Generate some complex envelope curves.\n */\n// tslint:disable-next-line: variable-name\nconst EnvelopeCurves: EnvelopeCurveMap = (() => {\n\n\tconst curveLen = 128;\n\n\tlet i: number;\n\tlet k: number;\n\n\t// cosine curve\n\tconst cosineCurve: number[] = [];\n\tfor (i = 0; i < curveLen; i++) {\n\t\tcosineCurve[i] = Math.sin((i / (curveLen - 1)) * (Math.PI / 2));\n\t}\n\n\t// ripple curve\n\tconst rippleCurve: number[] = [];\n\tconst rippleCurveFreq = 6.4;\n\tfor (i = 0; i < curveLen - 1; i++) {\n\t\tk = (i / (curveLen - 1));\n\t\tconst sineWave = Math.sin(k * (Math.PI * 2) * rippleCurveFreq - Math.PI / 2) + 1;\n\t\trippleCurve[i] = sineWave / 10 + k * 0.83;\n\t}\n\trippleCurve[curveLen - 1] = 1;\n\n\t// stairs curve\n\tconst stairsCurve: number[] = [];\n\tconst steps = 5;\n\tfor (i = 0; i < curveLen; i++) {\n\t\tstairsCurve[i] = Math.ceil((i / (curveLen - 1)) * steps) / steps;\n\t}\n\n\t// in-out easing curve\n\tconst sineCurve: number[] = [];\n\tfor (i = 0; i < curveLen; i++) {\n\t\tk = i / (curveLen - 1);\n\t\tsineCurve[i] = 0.5 * (1 - Math.cos(Math.PI * k));\n\t}\n\n\t// a bounce curve\n\tconst bounceCurve: number[] = [];\n\tfor (i = 0; i < curveLen; i++) {\n\t\tk = i / (curveLen - 1);\n\t\tconst freq = Math.pow(k, 3) * 4 + 0.2;\n\t\tconst val = Math.cos(freq * Math.PI * 2 * k);\n\t\tbounceCurve[i] = Math.abs(val * (1 - k));\n\t}\n\n\t/**\n\t *  Invert a value curve to make it work for the release\n\t */\n\tfunction invertCurve(curve: number[]): number[] {\n\t\tconst out = new Array(curve.length);\n\t\tfor (let j = 0; j < curve.length; j++) {\n\t\t\tout[j] = 1 - curve[j];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t *  reverse the curve\n\t */\n\tfunction reverseCurve(curve: number[]): number[] {\n\t\treturn curve.slice(0).reverse();\n\t}\n\n\t/**\n\t *  attack and release curve arrays\n\t */\n\treturn {\n\t\tbounce : {\n\t\t\tIn : invertCurve(bounceCurve),\n\t\t\tOut : bounceCurve,\n\t\t},\n\t\tcosine : {\n\t\t\tIn : cosineCurve,\n\t\t\tOut : reverseCurve(cosineCurve),\n\t\t},\n\t\texponential : \"exponential\" as \"exponential\",\n\t\tlinear : \"linear\" as \"linear\",\n\t\tripple : {\n\t\t\tIn : rippleCurve,\n\t\t\tOut : invertCurve(rippleCurve),\n\t\t},\n\t\tsine : {\n\t\t\tIn : sineCurve,\n\t\t\tOut : invertCurve(sineCurve),\n\t\t},\n\t\tstep : {\n\t\t\tIn : stairsCurve,\n\t\t\tOut : invertCurve(stairsCurve),\n\t\t},\n\t};\n})();\n","import { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Envelope, EnvelopeOptions } from \"./Envelope\";\n\n/**\n * AmplitudeEnvelope is a Tone.Envelope connected to a gain node.\n * Unlike Tone.Envelope, which outputs the envelope's value, AmplitudeEnvelope accepts\n * an audio signal as the input and will apply the envelope to the amplitude\n * of the signal.\n * Read more about ADSR Envelopes on [Wikipedia](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope).\n *\n * @param attack The amount of time it takes for the envelope to go from 0 to it's maximum value.\n * @param decay\tThe period of time after the attack that it takes for the envelope\n *                       \tto fall to the sustain value. Value must be greater than 0.\n * @param sustain\tThe percent of the maximum value that the envelope rests at until\n *                                \tthe release is triggered.\n * @param release\tThe amount of time after the release is triggered it takes to reach 0.\n *                         \tValue must be greater than 0.\n *  @example\n * var ampEnv = new AmplitudeEnvelope({\n * \t\"attack\": 0.1,\n * \t\"decay\": 0.2,\n * \t\"sustain\": 1.0,\n * \t\"release\": 0.8\n * }).toDestination();\n * //create an oscillator and connect it\n * var osc = new Tone.Oscillator().connect(ampEnv).start();\n * //trigger the envelopes attack and release \"8t\" apart\n * ampEnv.triggerAttackRelease(\"8t\");\n */\nexport class AmplitudeEnvelope extends Envelope {\n\n\tname = \"AmplitudeEnvelope\";\n\n\tprivate _gainNode: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\toutput: Gain = this._gainNode;\n\tinput: Gain = this._gainNode;\n\n\tconstructor(attack?: Time, decay?: Time, sustain?: NormalRange, release?: Time);\n\tconstructor(options?: Partial<EnvelopeOptions>)\n\tconstructor() {\n\t\tsuper(optionsFromArguments(AmplitudeEnvelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]));\n\t\tthis._sig.connect(this._gainNode.gain);\n\t\tthis.output = this._gainNode;\n\t\tthis.input = this._gainNode;\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._gainNode.dispose();\n\t\treturn this;\n\t}\n}\n","import { Volume } from \"../component/channel/Volume\";\nimport { Param } from \"../core/context/Param\";\nimport { OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\n\nexport interface InstrumentOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n}\n\n/**\n *  Base-class for all instruments\n */\nexport abstract class Instrument<Options extends InstrumentOptions> extends ToneAudioNode<Options> {\n\n\t/**\n\t *  The output and volume triming node\n\t */\n\tprivate _volume: Volume;\n\toutput: OutputNode;\n\n\t/**\n\t * The instrument only has an output\n\t */\n\tinput: undefined;\n\n\t/**\n\t * The volume of the output in decibels.\n\t * @example\n\t * source.volume.value = -6;\n\t */\n\tvolume: Param<Decibels>;\n\n\t/**\n\t * Keep track of all events scheduled to the transport\n\t * when the instrument is 'synced'\n\t */\n\tprivate _scheduledEvents: number[] = [];\n\n\t/**\n\t * If the instrument is currently synced\n\t */\n\tprivate _synced: boolean = false;\n\n\tconstructor(options?: Partial<InstrumentOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Instrument.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Instrument.getDefaults(), arguments);\n\n\t\tthis._volume = new Volume({\n\t\t\tcontext: this.context,\n\t\t\tvolume: options.volume,\n\t\t});\n\t\tthis.volume = this._volume.volume;\n\t\tthis.output = this._volume;\n\t\treadOnly(this, \"volume\");\n\t}\n\n\tstatic getDefaults(): InstrumentOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tnumberOfOutputs: 1,\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Sync the instrument to the Transport. All subsequent calls of\n\t * [triggerAttack](#triggerattack) and [triggerRelease](#triggerrelease)\n\t * will be scheduled along the transport.\n\t * @example\n\t * instrument.sync()\n\t * //schedule 3 notes when the transport first starts\n\t * instrument.triggerAttackRelease('C4', '8n', 0)\n\t * instrument.triggerAttackRelease('E4', '8n', '8n')\n\t * instrument.triggerAttackRelease('G4', '8n', '4n')\n\t * //start the transport to hear the notes\n\t * Transport.start()\n\t * @returns {Instrument} this\n\t */\n\tsync(): this {\n\t\tif (!this._synced) {\n\t\t\tthis._synced = true;\n\t\t\tthis._syncMethod(\"triggerAttack\", 1);\n\t\t\tthis._syncMethod(\"triggerRelease\", 0);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Wrap the given method so that it can be synchronized\n\t * @param method Which method to wrap and sync\n\t * @param  timePosition What position the time argument appears in\n\t */\n\tprotected _syncMethod(method: string, timePosition: number): void {\n\t\tconst originalMethod = this[\"_original_\" + method] = this[method];\n\t\tthis[method] = (...args: any[]) => {\n\t\t\tconst time = args[timePosition];\n\t\t\tconst id = this.context.transport.schedule((t) => {\n\t\t\t\targs[timePosition] = t;\n\t\t\t\toriginalMethod.apply(this, args);\n\t\t\t}, time);\n\t\t\tthis._scheduledEvents.push(id);\n\t\t};\n\t}\n\n\t/**\n\t * Unsync the instrument from the Transport\n\t */\n\tunsync(): this {\n\t\tthis._scheduledEvents.forEach(id => this.context.transport.clear(id));\n\t\tthis._scheduledEvents = [];\n\t\tif (this._synced) {\n\t\t\tthis._synced = false;\n\t\t\tthis.triggerAttack = this._original_triggerAttack;\n\t\t\tthis.triggerRelease = this._original_triggerRelease;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Trigger the attack and then the release after the duration.\n\t *  @param  note     The note to trigger.\n\t *  @param  duration How long the note should be held for before\n\t *                          triggering the release. This value must be greater than 0.\n\t *  @param time  When the note should be triggered.\n\t *  @param  velocity The velocity the note should be triggered at.\n\t *  @example\n\t * //trigger \"C4\" for the duration of an 8th note\n\t * synth.triggerAttackRelease(\"C4\", \"8n\");\n\t */\n\ttriggerAttackRelease(note: Frequency, duration: Time, time?: Time, velocity?: NormalRange): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst computedDuration = this.toSeconds(duration);\n\t\tthis.triggerAttack(note, computedTime, velocity);\n\t\tthis.triggerRelease(computedTime + computedDuration);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Start the instrument's note.\n\t * @param note the note to trigger\n\t * @param time the time to trigger the ntoe\n\t * @param velocity the velocity to trigger the note (betwee 0-1)\n\t */\n\tabstract triggerAttack(note: Frequency, time?: Time, velocity?: NormalRange): this;\n\t// tslint:disable-next-line: variable-name\n\tprivate _original_triggerAttack = this.triggerAttack;\n\n\t/**\n\t * Trigger the release phase of the current note.\n\t *  @param time when to trigger the release\n\t */\n\tabstract triggerRelease(...args: any[]): this;\n\t// tslint:disable-next-line: variable-name\n\tprivate _original_triggerRelease = this.triggerRelease;\n\n\t/**\n\t *  clean up\n\t *  @returns {Instrument} this\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._volume.dispose();\n\t\tthis.unsync();\n\t\tthis._scheduledEvents = [];\n\t\treturn this;\n\t}\n}\n","import { FrequencyClass } from \"../core/type/Frequency\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Instrument, InstrumentOptions } from \"../instrument/Instrument\";\nimport { Signal } from \"../signal/Signal\";\n\nexport interface MonophonicOptions extends InstrumentOptions {\n\tportamento: Seconds;\n}\n\n/**\n * Abstract base class for other monophonic instruments to extend.\n */\nexport abstract class Monophonic<Options extends MonophonicOptions> extends Instrument<Options> {\n\n\t/**\n\t *  The glide time between notes.\n\t */\n\tportamento: Seconds;\n\n\t/**\n\t * The instrument's envelope\n\t */\n\tabstract envelope: any;\n\n\t/**\n\t * The instrument's frequency signal.\n\t */\n\tabstract readonly frequency: Signal<Frequency>;\n\n\t/**\n\t * The instrument's detune control signal.\n\t */\n\tabstract readonly detune: Signal<Cents>;\n\n\tconstructor(options?: Partial<MonophonicOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Monophonic.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Monophonic.getDefaults(), arguments);\n\n\t\tthis.portamento = options.portamento;\n\n\t}\n\n\tstatic getDefaults(): MonophonicOptions {\n\t\treturn Object.assign(Instrument.getDefaults(), {\n\t\t\tportamento: 0,\n\t\t});\n\t}\n\n\t/**\n\t *  Trigger the attack of the note optionally with a given velocity.\n\t *\n\t *\n\t *  @param  note The note to trigger.\n\t *  @param  time When the note should start.\n\t *  @param  velocity The velocity scaler determines how \"loud\" the note\n\t *                   will be triggered.\n\t *  @example\n\t * synth.triggerAttack(\"C4\");\n\t *  @example\n\t * //trigger the note a half second from now at half velocity\n\t * synth.triggerAttack(\"C4\", \"+0.5\", 0.5);\n\t */\n\ttriggerAttack(note: Frequency | FrequencyClass, time?: Time, velocity: NormalRange = 1): this {\n\t\tthis.log(\"triggerAttack\", note, time, velocity);\n\t\ttime = this.toSeconds(time);\n\t\tthis._triggerEnvelopeAttack(time, velocity);\n\t\tthis.setNote(note, time);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Trigger the release portion of the envelope\n\t *  @param  {Time} [time=now] If no time is given, the release happens immediatly\n\t *  @returns {Monophonic} this\n\t *  @example\n\t * synth.triggerRelease();\n\t */\n\ttriggerRelease(time?: Time): this {\n\t\tthis.log(\"triggerRelease\", time);\n\t\ttime = this.toSeconds(time);\n\t\tthis._triggerEnvelopeRelease(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Internal method which starts the envelope attack\n\t */\n\tprotected abstract _triggerEnvelopeAttack(time: Seconds, velocity: NormalRange): void;\n\n\t/**\n\t *  Internal method which starts the envelope release\n\t */\n\tprotected abstract _triggerEnvelopeRelease(time: Seconds): void;\n\n\t/**\n\t *  Get the level of the output at the given time. Measures\n\t *  the envelope(s) value at the time.\n\t *  @param time The time to query the envelope value\n\t *  @return The output level between 0-1\n\t */\n\tgetLevelAtTime(time: Time): NormalRange {\n\t\ttime = this.toSeconds(time);\n\t\treturn this.envelope.getValueAtTime(time);\n\t}\n\n\t/**\n\t *  Set the note at the given time. If no time is given, the note\n\t *  will set immediately.\n\t *  @param note The note to change to.\n\t *  @param  time The time when the note should be set.\n\t * @example\n\t * //change to F#6 in one quarter note from now.\n\t * synth.setNote(\"F#6\", \"+4n\");\n\t * @example\n\t * //change to Bb4 right now\n\t * synth.setNote(\"Bb4\");\n\t */\n\tsetNote(note: Frequency | FrequencyClass, time?: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tconst computedFrequency = note instanceof FrequencyClass ? note.toFrequency() : note;\n\t\tif (this.portamento > 0 && this.getLevelAtTime(time) > 0.05) {\n\t\t\tconst portTime = this.toSeconds(this.portamento);\n\t\t\tthis.frequency.exponentialRampTo(computedFrequency, portTime, time);\n\t\t} else {\n\t\t\tthis.frequency.setValueAtTime(computedFrequency, time);\n\t\t}\n\t\treturn this;\n\t}\n}\n","import { AmplitudeEnvelope } from \"../component/envelope/AmplitudeEnvelope\";\nimport { Envelope, EnvelopeOptions } from \"../component/envelope/Envelope\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { RecursivePartial } from \"../core/util/Interface\";\nimport { OmniOscillator } from \"../source/oscillator/OmniOscillator\";\nimport { OmniOscillatorConstructorOptions } from \"../source/oscillator/OscillatorInterface\";\nimport { Source } from \"../source/Source\";\nimport { Monophonic, MonophonicOptions } from \"./Monophonic\";\n\nexport interface SynthOptions extends MonophonicOptions {\n\toscillator: OmniOscillatorConstructorOptions;\n\tenvelope: EnvelopeOptions;\n}\n\n/**\n *  Synth is composed simply of a Tone.OmniOscillator routed through a Tone.AmplitudeEnvelope.\n * ```\n * +----------------+     +-------------------+\n * | OmniOscillator +>----> AmplitudeEnvelope +>-->Output\n * +----------------+     +-------------------+\n * ```\n *  @constructor\n *  @param options the options available for the synth.\n *  @example\n * var synth = new Synth().toDestination();\n * synth.triggerAttackRelease(\"C4\", \"8n\");\n */\nexport class Synth extends Monophonic<SynthOptions> {\n\n\tname = \"Synth\";\n\n\t/**\n\t *  The oscillator.\n\t */\n\treadonly oscillator = new OmniOscillator({ context: this.context });\n\n\t/**\n\t * The frequency signal\n\t */\n\treadonly frequency = this.oscillator.frequency;\n\n\t/**\n\t * The detune signal\n\t */\n\treadonly detune = this.oscillator.detune;\n\n\t/**\n\t * The envelope\n\t */\n\treadonly envelope: AmplitudeEnvelope = new AmplitudeEnvelope({ context: this.context });\n\n\tprotected _internalChannels = [this.oscillator, this.envelope, this.output];\n\n\tconstructor(options?: RecursivePartial<SynthOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Synth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Synth.getDefaults(), arguments);\n\n\t\tthis.oscillator.set(options.oscillator);\n\t\tthis.envelope.set(options.envelope);\n\n\t\t// connect the oscillators to the output\n\t\tthis.oscillator.chain(this.envelope, this.output);\n\t\treadOnly(this, [\"oscillator\", \"frequency\", \"detune\", \"envelope\"]);\n\t}\n\n\tstatic getDefaults(): SynthOptions {\n\t\treturn Object.assign(Monophonic.getDefaults(), {\n\t\t\tenvelope: Object.assign(\n\t\t\t\tomitFromObject(Envelope.getDefaults(), Object.keys(Source.getDefaults())),\n\t\t\t\t{\n\t\t\t\t\tattack : 0.005,\n\t\t\t\t\tdecay : 0.1,\n\t\t\t\t\trelease : 1,\n\t\t\t\t\tsustain : 0.3,\n\t\t\t\t},\n\t\t\t),\n\t\t\toscillator: Object.assign(\n\t\t\t\tomitFromObject(OmniOscillator.getDefaults(), Object.keys(Source.getDefaults())),\n\t\t\t\t{\n\t\t\t\t\ttype: \"triangle\",\n\t\t\t\t},\n\t\t\t),\n\t\t});\n\t}\n\n\t/**\n\t *  start the attack portion of the envelope\n\t *  @param time the time the attack should start\n\t *  @param velocity the velocity of the note (0-1)\n\t */\n\tprotected _triggerEnvelopeAttack(time?: Time, velocity: number = 1): void {\n\t\tconst computedTime = this.toSeconds(time);\n\t\t// the envelopes\n\t\tthis.envelope.triggerAttack(computedTime, velocity);\n\t\tthis.oscillator.start(computedTime);\n\t\t// if there is no release portion, stop the oscillator\n\t\tif (this.envelope.sustain === 0) {\n\t\t\tconst computedAttack = this.toSeconds(this.envelope.attack);\n\t\t\tconst computedDecay = this.toSeconds(this.envelope.decay);\n\t\t\tthis.oscillator.stop(computedTime + computedAttack + computedDecay);\n\t\t}\n\t}\n\n\t/**\n\t *  start the release portion of the envelope\n\t *  @param time the time the release should start\n\t */\n\tprotected _triggerEnvelopeRelease(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis.envelope.triggerRelease(time);\n\t\tthis.oscillator.stop(time + this.toSeconds(this.envelope.release));\n\t}\n\n\t/**\n\t *  clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.oscillator.dispose();\n\t\tthis.envelope.dispose();\n\t\treturn this;\n\t}\n}\n","import { Tone } from \"../Tone\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { noOp } from \"../util/Interface\";\nimport { isString } from \"../util/TypeCheck\";\nimport { ToneAudioBuffer } from \"./ToneAudioBuffer\";\n\ninterface ToneAudioBuffersUrlMap {\n\t[name: string]: string | AudioBuffer | ToneAudioBuffer;\n\t[name: number]: string | AudioBuffer | ToneAudioBuffer;\n}\n\ninterface ToneAudioBuffersOptions {\n\turls: ToneAudioBuffersUrlMap;\n\tonload: () => void;\n\tonerror?: (error: Error) => void;\n\tbaseUrl: string;\n}\n\n/**\n * A data structure for holding multiple buffers in a Map-like datastructure.\n *\n * @param  urls      An object literal or array of urls to load.\n * @param onload  The callback to invoke when the buffers are loaded.\n * @example\n * //load a whole bank of piano samples\n * var pianoSamples = new ToneAudioBuffers({\n * \t\"C4\" : \"path/to/C4.mp3\"\n * \t\"C#4\" : \"path/to/C#4.mp3\"\n * \t\"D4\" : \"path/to/D4.mp3\"\n * \t\"D#4\" : \"path/to/D#4.mp3\"\n * }, function(){\n * \t//play one of the samples when they all load\n * \tplayer.buffer = pianoSamples.get(\"C4\");\n * \tplayer.start();\n * });\n * @example\n * //To pass in additional parameters in the second parameter\n * var buffers = new ToneAudioBuffers(urls, {\n * \t\"onload\" : callback,\n * \t\"baseUrl\" : \"../path/to/audio/\"\n * })\n */\nexport class ToneAudioBuffers extends Tone {\n\n\tname = \"ToneAudioBuffers\";\n\n\t/**\n\t *  All of the buffers\n\t */\n\tprivate _buffers: Map<string, ToneAudioBuffer> = new Map();\n\n\t/**\n\t *  A path which is prefixed before every url.\n\t */\n\tbaseUrl: string;\n\n\t/**\n\t * Keep track of the number of loaded buffers\n\t */\n\tprivate _loadingCount: number = 0;\n\n\tconstructor(\n\t\turls?: ToneAudioBuffersUrlMap,\n\t\tonload?: () => void,\n\t\tbaseUrl?: string,\n\t\t);\n\tconstructor(options?: Partial<ToneAudioBuffersOptions>);\n\tconstructor() {\n\n\t\tsuper();\n\t\tconst options = optionsFromArguments(\n\t\t\tToneAudioBuffers.getDefaults(), arguments, [\"urls\", \"onload\", \"baseUrl\"], \"urls\",\n\t\t);\n\n\t\tthis.baseUrl = options.baseUrl;\n\t\tconst urlMap: ToneAudioBuffersUrlMap = {};\n\t\t// add each one\n\t\tObject.keys(options.urls).forEach(name => {\n\t\t\tthis._loadingCount++;\n\t\t\tconst url = options.urls[name];\n\t\t\tthis.add(name, url, this._bufferLoaded.bind(this, (options as ToneAudioBuffersOptions).onload));\n\t\t});\n\n\t}\n\n\tstatic getDefaults(): ToneAudioBuffersOptions {\n\t\treturn {\n\t\t\tbaseUrl: \"\",\n\t\t\tonerror: noOp,\n\t\t\tonload: noOp,\n\t\t\turls: {},\n\t\t};\n\t}\n\n\t/**\n\t *  True if the buffers object has a buffer by that name.\n\t *  @param  name  The key or index of the buffer.\n\t */\n\thas(name: string | number): boolean {\n\t\treturn this._buffers.has(name.toString());\n\t}\n\n\t/**\n\t *  Get a buffer by name. If an array was loaded,\n\t *  then use the array index.\n\t *  @param  name  The key or index of the buffer.\n\t */\n\tget(name: string | number): ToneAudioBuffer {\n\t\tthis.assert(this.has(name), `ToneAudioBuffers has no buffer named: ${name}`);\n\t\treturn this._buffers.get(name.toString()) as ToneAudioBuffer;\n\t}\n\n\t/**\n\t *  A buffer was loaded. decrement the counter.\n\t */\n\tprivate _bufferLoaded(callback: () => void): void {\n\t\tthis._loadingCount--;\n\t\tif (this._loadingCount === 0 && callback) {\n\t\t\tcallback();\n\t\t}\n\t}\n\n\t/**\n\t * If the buffers are loaded or not\n\t */\n\tget loaded(): boolean {\n\t\treturn Array.from(this._buffers).every(([name, buffer]) => buffer.loaded);\n\t}\n\n\t/**\n\t *  Add a buffer by name and url to the Buffers\n\t *  @param  name      A unique name to give the buffer\n\t *  @param  url  Either the url of the bufer, or a buffer which will be added with the given name.\n\t *  @param  callback  The callback to invoke when the url is loaded.\n\t */\n\tadd(\n\t\tname: string | number,\n\t\turl: string | AudioBuffer | ToneAudioBuffer,\n\t\tcallback: () => void = noOp,\n\t): this {\n\t\tif (url instanceof ToneAudioBuffer) {\n\t\t\tthis._buffers.set(name.toString(), url);\n\t\t\tcallback();\n\t\t} else if (url instanceof AudioBuffer) {\n\t\t\tthis._buffers.set(name.toString(), new ToneAudioBuffer(url));\n\t\t\tcallback();\n\t\t} else if (isString(url)) {\n\t\t\tthis._buffers.set(name.toString(), new ToneAudioBuffer(this.baseUrl + url, callback));\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._buffers.forEach(buffer => buffer.dispose());\n\t\tthis._buffers.clear();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioBuffer } from \"../core/context/ToneAudioBuffer\";\nimport { ToneAudioBuffers } from \"../core/context/ToneAudioBuffers\";\nimport { intervalToFrequencyRatio } from \"../core/type/Conversions\";\nimport { FrequencyClass } from \"../core/type/Frequency\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { isArray, isNote } from \"../core/util/TypeCheck\";\nimport { Instrument, InstrumentOptions } from \"../instrument/Instrument\";\nimport { ToneBufferSource, ToneBufferSourceCurve } from \"../source/buffer/BufferSource\";\n\ninterface SamplesMap {\n\t[note: string]: ToneAudioBuffer | AudioBuffer | string;\n\t[midi: number]: ToneAudioBuffer | AudioBuffer | string;\n}\n\ninterface SamplerOptions extends InstrumentOptions {\n\tattack: Time;\n\trelease: Time;\n\tonload: () => void;\n\tbaseUrl: string;\n\tcurve: ToneBufferSourceCurve;\n\turls: SamplesMap;\n}\n\n/**\n * Pass in an object which maps the note's pitch or midi value to the url,\n * then you can trigger the attack and release of that note like other instruments.\n * By automatically repitching the samples, it is possible to play pitches which\n * were not explicitly included which can save loading time.\n *\n * For sample or buffer playback where repitching is not necessary,\n * use {@link Player}.\n * @param samples An object of samples mapping either Midi\n *                         Note Numbers or Scientific Pitch Notation\n *                         to the url of that sample.\n * @param onload The callback to invoke when all of the samples are loaded.\n * @param baseUrl The root URL of all of the samples, which is prepended to all the URLs.\n * @example\n * var sampler = new Sampler({\n * \t\"C3\" : \"path/to/C3.mp3\",\n * \t\"D#3\" : \"path/to/Dsharp3.mp3\",\n * \t\"F#3\" : \"path/to/Fsharp3.mp3\",\n * \t\"A3\" : \"path/to/A3.mp3\",\n * }, function(){\n * \t//sampler will repitch the closest sample\n * \tsampler.triggerAttack(\"D3\")\n * })\n */\nexport class Sampler extends Instrument<SamplerOptions> {\n\n\tname = \"Sampler\";\n\n\t/**\n\t * The stored and loaded buffers\n\t * @type {Tone.Buffers}\n\t * @private\n\t */\n\tprivate _buffers: ToneAudioBuffers;\n\n\t/**\n\t * The object of all currently playing BufferSources\n\t */\n\tprivate _activeSources: Map<MidiNote, ToneBufferSource[]> = new Map();\n\n\t/**\n\t * The envelope applied to the beginning of the sample.\n\t */\n\tattack: Time;\n\n\t/**\n\t * The envelope applied to the end of the envelope.\n\t */\n\trelease: Time;\n\n\t/**\n\t *  The shape of the attack/release curve.\n\t *  Either \"linear\" or \"exponential\"\n\t */\n\tcurve: ToneBufferSourceCurve;\n\n\tprotected _internalChannels = [this.output];\n\n\tconstructor(options?: Partial<SamplerOptions>);\n\tconstructor(samples?: SamplesMap, options?: Partial<Omit<SamplerOptions, \"urls\">>);\n\tconstructor(samples?: SamplesMap, onload?: () => void, baseUrl?: string);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Sampler.getDefaults(), arguments, [\"urls\", \"onload\", \"baseUrl\"], \"urls\"));\n\t\tconst options = optionsFromArguments(Sampler.getDefaults(), arguments, [\"urls\", \"onload\", \"baseUrl\"], \"urls\");\n\n\t\tconst urlMap = {};\n\t\tObject.keys(options.urls).forEach((note) => {\n\t\t\tthis.assert(isNote(note) || isFinite(note), `url key is neither a note or midi pitch: ${note}`);\n\t\t\tif (isNote(note)) {\n\t\t\t\t// convert the note name to MIDI\n\t\t\t\tconst mid = new FrequencyClass(this.context, note).toMidi();\n\t\t\t\turlMap[mid] = options.urls[note];\n\t\t\t} else if (isFinite(note)) {\n\t\t\t\t// otherwise if it's numbers assume it's midi\n\t\t\t\turlMap[parseInt(note, 10)] = options.urls[note];\n\t\t\t}\n\t\t});\n\n\t\tthis._buffers = new ToneAudioBuffers(urlMap, options.onload, options.baseUrl);\n\t\tthis.attack = options.attack;\n\t\tthis.release = options.release;\n\t\tthis.curve = options.curve;\n\t}\n\n\tstatic getDefaults(): SamplerOptions {\n\t\treturn Object.assign(Instrument.getDefaults(), {\n\t\t\tattack : 0,\n\t\t\tbaseUrl : \"\",\n\t\t\tcurve : \"exponential\" as \"exponential\",\n\t\t\tonload : noOp,\n\t\t\trelease : 0.1,\n\t\t\turls: {},\n\t\t});\n\t}\n\n\t/**\n\t * Returns the difference in steps between the given midi note at the closets sample.\n\t */\n\tprivate _findClosest(midi: MidiNote): Interval {\n\t\t// searches within 8 octaves of the given midi note\n\t\tconst MAX_INTERVAL = 96;\n\t\tlet interval = 0;\n\t\twhile (interval < MAX_INTERVAL) {\n\t\t\t// check above and below\n\t\t\tif (this._buffers.has(midi + interval)) {\n\t\t\t\treturn -interval;\n\t\t\t} else if (this._buffers.has(midi - interval)) {\n\t\t\t\treturn interval;\n\t\t\t}\n\t\t\tinterval++;\n\t\t}\n\t\tthrow new Error(`No available buffers for note: ${midi}`);\n\t}\n\n\t/**\n\t * @param  notes\tThe note to play, or an array of notes.\n\t * @param  time     When to play the note\n\t * @param  velocity The velocity to play the sample back.\n\t */\n\ttriggerAttack(notes: Frequency | Frequency[], time?: Time, velocity: NormalRange = 1): this {\n\t\tthis.log(\"triggerAttack\", notes, time, velocity);\n\t\tif (!Array.isArray(notes)) {\n\t\t\tnotes = [notes];\n\t\t}\n\t\tnotes.forEach(note => {\n\t\t\tconst midi = new FrequencyClass(this.context, note).toMidi();\n\t\t\t// find the closest note pitch\n\t\t\tconst difference = this._findClosest(midi);\n\t\t\tconst closestNote = midi - difference;\n\t\t\tconst buffer = this._buffers.get(closestNote);\n\t\t\tconst playbackRate = intervalToFrequencyRatio(difference);\n\t\t\t// play that note\n\t\t\tconst source = new ToneBufferSource({\n\t\t\t\tbuffer,\n\t\t\t\tcontext: this.context,\n\t\t\t\tcurve : this.curve,\n\t\t\t\tfadeIn : this.attack,\n\t\t\t\tfadeOut : this.release,\n\t\t\t\tplaybackRate,\n\t\t\t}).connect(this.output);\n\t\t\tsource.start(time, 0, buffer.duration / playbackRate, velocity);\n\t\t\t// add it to the active sources\n\t\t\tif (!isArray(this._activeSources.get(midi))) {\n\t\t\t\tthis._activeSources.set(midi, []);\n\t\t\t}\n\t\t\t(this._activeSources.get(midi) as ToneBufferSource[]).push(source);\n\n\t\t\t// remove it when it's done\n\t\t\tsource.onended = () => {\n\t\t\t\tif (this._activeSources && this._activeSources.has(midi)) {\n\t\t\t\t\tconst sources = this._activeSources.get(midi) as ToneBufferSource[];\n\t\t\t\t\tconst index = sources.indexOf(source);\n\t\t\t\t\tif (index !== -1) {\n\t\t\t\t\t\tsources.splice(index, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * @param  notes\tThe note to release, or an array of notes.\n\t * @param  time     \tWhen to release the note.\n\t */\n\ttriggerRelease(notes: Frequency | Frequency[], time?: Time): this {\n\t\tthis.log(\"triggerRelease\", notes, time);\n\t\tif (!Array.isArray(notes)) {\n\t\t\tnotes = [notes];\n\t\t}\n\t\tnotes.forEach(note => {\n\t\t\tconst midi = new FrequencyClass(this.context, note).toMidi();\n\t\t\t// find the note\n\t\t\tif (this._activeSources.has(midi) && (this._activeSources.get(midi) as ToneBufferSource[]).length) {\n\t\t\t\tconst source = (this._activeSources.get(midi) as ToneBufferSource[]).shift() as ToneBufferSource;\n\t\t\t\ttime = this.toSeconds(time);\n\t\t\t\tsource.stop(time);\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Release all currently active notes.\n\t * @param  time     \tWhen to release the notes.\n\t */\n\treleaseAll(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._activeSources.forEach(sources => {\n\t\t\twhile (sources.length) {\n\t\t\t\tconst source = sources.shift() as ToneBufferSource;\n\t\t\t\tsource.stop(computedTime);\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sync the instrument to the Transport. All subsequent calls of\n\t * [triggerAttack](#triggerattack) and [triggerRelease](#triggerrelease)\n\t * will be scheduled along the transport.\n\t * @example\n\t * synth.sync()\n\t * //schedule 3 notes when the transport first starts\n\t * synth.triggerAttackRelease('8n', 0)\n\t * synth.triggerAttackRelease('8n', '8n')\n\t * synth.triggerAttackRelease('8n', '4n')\n\t * //start the transport to hear the notes\n\t * Transport.start()\n\t * @returns {Tone.Instrument} this\n\t */\n\tsync(): this {\n\t\tthis._syncMethod(\"triggerAttack\", 1);\n\t\tthis._syncMethod(\"triggerRelease\", 1);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Invoke the attack phase, then after the duration, invoke the release.\n\t * @param  notes\tThe note to play and release, or an array of notes.\n\t * @param  duration The time the note should be held\n\t * @param  time     When to start the attack\n\t * @param  velocity The velocity of the attack\n\t */\n\ttriggerAttackRelease(\n\t\tnotes: Frequency[] | Frequency,\n\t\tduration: Time | Time[],\n\t\ttime?: Time,\n\t\tvelocity: NormalRange = 1,\n\t): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis.triggerAttack(notes, computedTime, velocity);\n\t\tif (isArray(duration)) {\n\t\t\tthis.assert(isArray(notes), \"notes must be an array when duration is array\");\n\t\t\t(notes as Frequency[]).forEach((note, index) => {\n\t\t\t\tconst d = duration[Math.min(index, duration.length - 1)];\n\t\t\t\tthis.triggerRelease(note, computedTime + this.toSeconds(d));\n\t\t\t});\n\t\t} else {\n\t\t\tthis.triggerRelease(notes, computedTime + this.toSeconds(duration));\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Add a note to the sampler.\n\t *  @param  {Note|Midi}   note      The buffer's pitch.\n\t *  @param  {String|Tone.Buffer|Audiobuffer}  url  Either the url of the bufer,\n\t *                                                 or a buffer which will be added\n\t *                                                 with the given name.\n\t *  @param  {Function=}  callback  The callback to invoke\n\t *                                 when the url is loaded.\n\t */\n\tadd(note: Note | MidiNote, url: string | ToneAudioBuffer | AudioBuffer, callback?: () => void): this {\n\t\tthis.assert(isNote(note) || isFinite(note), `note must be a pitch or midi: ${note}`);\n\t\tif (isNote(note)) {\n\t\t\t// convert the note name to MIDI\n\t\t\tconst mid = new FrequencyClass(this.context, note).toMidi();\n\t\t\tthis._buffers.add(mid, url, callback);\n\t\t} else {\n\t\t\t// otherwise if it's numbers assume it's midi\n\t\t\tthis._buffers.add(note, url, callback);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * If the buffers are loaded or not\n\t */\n\tget loaded(): boolean {\n\t\treturn this._buffers.loaded;\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._buffers.dispose();\n\t\tthis._activeSources.forEach(sources => {\n\t\t\tsources.forEach(source => source.dispose());\n\t\t});\n\t\tthis._activeSources.clear();\n\t\treturn this;\n\t}\n}\n","import \"../core/clock/Transport\";\nimport { ToneWithContext, ToneWithContextOptions } from \"../core/context/ToneWithContext\";\nimport { TicksClass } from \"../core/type/Ticks\";\nimport { TransportTimeClass } from \"../core/type/TransportTime\";\nimport { defaultArg, optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { BasicPlaybackState, StateTimeline } from \"../core/util/StateTimeline\";\nimport { isBoolean, isNumber } from \"../core/util/TypeCheck\";\n\nexport type ToneEventCallback<T> = (time: Seconds, value: T) => void;\n\nexport interface ToneEventOptions<T> extends ToneWithContextOptions {\n\tcallback: ToneEventCallback<T>;\n\tloop: boolean | number;\n\tloopEnd: Time;\n\tloopStart: Time;\n\tplaybackRate: Positive;\n\tvalue?: T;\n\tprobability: NormalRange;\n\tmute: boolean;\n\thumanize: boolean | Time;\n}\n\n/**\n * ToneEvent abstracts away this.context.transport.schedule and provides a schedulable\n * callback for a single or repeatable events along the timeline.\n *\n * @param callback The callback to invoke at the time.\n * @param value The value or values which should be passed to the callback function on invocation.\n * @example\n * var chord = new ToneEvent(function(time, chord){\n * \t//the chord as well as the exact time of the event\n * \t//are passed in as arguments to the callback function\n * }, [\"D4\", \"E4\", \"F4\"]);\n * //start the chord at the beginning of the transport timeline\n * chord.start();\n * //loop it every measure for 8 measures\n * chord.loop = 8;\n * chord.loopEnd = \"1m\";\n */\nexport class ToneEvent<ValueType = any> extends ToneWithContext<ToneEventOptions<ValueType>> {\n\n\tname = \"ToneEvent\";\n\n\t/**\n\t *  Loop value\n\t */\n\tprotected _loop: boolean | number;\n\n\t/**\n\t *  The callback to invoke.\n\t */\n\tcallback: ToneEventCallback<ValueType>;\n\n\t/**\n\t *  The value which is passed to the\n\t *  callback function.\n\t */\n\tvalue: ValueType;\n\n\t/**\n\t *  When the note is scheduled to start.\n\t */\n\tprotected _loopStart: Ticks;\n\n\t/**\n\t *  When the note is scheduled to start.\n\t */\n\tprotected _loopEnd: Ticks;\n\n\t/**\n\t *  Tracks the scheduled events\n\t */\n\tprotected _state: StateTimeline<{\n\t\tid: number,\n\t}> = new StateTimeline(\"stopped\");\n\n\t/**\n\t *  The playback speed of the note. A speed of 1\n\t *  is no change.\n\t */\n\tprotected _playbackRate: Positive;\n\n\t/**\n\t *  A delay time from when the event is scheduled to start\n\t */\n\tprotected _startOffset: Ticks = 0;\n\n\t/**\n\t *  private holder of probability value\n\t */\n\tprotected _probability: NormalRange;\n\n\t/**\n\t *  the amount of variation from the given time.\n\t */\n\tprotected _humanize: boolean | Time;\n\n\t/**\n\t *  If mute is true, the callback won't be invoked.\n\t */\n\tmute: boolean;\n\n\tconstructor(callback?: ToneEventCallback<ValueType>, value?: ValueType);\n\tconstructor(options?: Partial<ToneEventOptions<ValueType>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(ToneEvent.getDefaults(), arguments, [\"callback\", \"value\"]));\n\t\tconst options = optionsFromArguments(ToneEvent.getDefaults(), arguments, [\"callback\", \"value\"]);\n\n\t\tthis._loop = options.loop;\n\t\tthis.callback = options.callback;\n\t\tthis.value = options.value;\n\t\tthis._loopStart = this.toTicks(options.loopStart);\n\t\tthis._loopEnd = this.toTicks(options.loopEnd);\n\t\tthis._playbackRate = options.playbackRate;\n\t\tthis._probability = options.probability;\n\t\tthis._humanize = options.humanize;\n\t\tthis.mute = options.mute;\n\t\tthis.playbackRate = options.playbackRate;\n\t}\n\n\tstatic getDefaults(): ToneEventOptions<any> {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tcallback : noOp,\n\t\t\thumanize : false,\n\t\t\tloop : false,\n\t\t\tloopEnd : \"1m\",\n\t\t\tloopStart : 0,\n\t\t\tmute : false,\n\t\t\tplaybackRate : 1,\n\t\t\tprobability : 1,\n\t\t\tvalue : null,\n\t\t});\n\t}\n\n\t/**\n\t *  Reschedule all of the events along the timeline\n\t *  with the updated values.\n\t *  @param after Only reschedules events after the given time.\n\t *  @private\n\t */\n\tprivate _rescheduleEvents(after: Ticks = -1): void {\n\t\t// if no argument is given, schedules all of the events\n\t\tthis._state.forEachFrom(after, event => {\n\t\t\tlet duration;\n\t\t\tif (event.state === \"started\") {\n\t\t\t\tif (event.id !== -1) {\n\t\t\t\t\tthis.context.transport.clear(event.id);\n\t\t\t\t}\n\t\t\t\tconst startTick = event.time + Math.round(this.startOffset / this._playbackRate);\n\t\t\t\tif (this._loop === true || isNumber(this._loop) && this._loop > 1) {\n\t\t\t\t\tduration = Infinity;\n\t\t\t\t\tif (isNumber(this._loop)) {\n\t\t\t\t\t\tduration = (this._loop) * this._getLoopDuration();\n\t\t\t\t\t}\n\t\t\t\t\tconst nextEvent = this._state.getAfter(startTick);\n\t\t\t\t\tif (nextEvent !== null) {\n\t\t\t\t\t\tduration = Math.min(duration, nextEvent.time - startTick);\n\t\t\t\t\t}\n\t\t\t\t\tif (duration !== Infinity) {\n\t\t\t\t\t\t// schedule a stop since it's finite duration\n\t\t\t\t\t\tthis._state.setStateAtTime(\"stopped\", startTick + duration + 1, { id : -1 });\n\t\t\t\t\t\tduration = new TicksClass(this.context, duration);\n\t\t\t\t\t}\n\t\t\t\t\tconst interval = new TicksClass(this.context, this._getLoopDuration());\n\t\t\t\t\tevent.id = this.context.transport.scheduleRepeat(\n\t\t\t\t\t\tthis._tick.bind(this), interval, new TicksClass(this.context, startTick), duration);\n\t\t\t\t} else {\n\t\t\t\t\tevent.id = this.context.transport.schedule(this._tick.bind(this), new TicksClass(this.context, startTick));\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t *  Returns the playback state of the note, either \"started\" or \"stopped\".\n\t */\n\tget state(): BasicPlaybackState {\n\t\treturn this._state.getValueAtTime(this.context.transport.ticks) as BasicPlaybackState;\n\t}\n\n\t/**\n\t * The start from the scheduled start time.\n\t */\n\tget startOffset(): Ticks {\n\t\treturn this._startOffset;\n\t}\n\tset startOffset(offset) {\n\t\tthis._startOffset = offset;\n\t}\n\n\t/**\n\t *  The probability of the notes being triggered.\n\t */\n\tget probability(): NormalRange {\n\t\treturn this._probability;\n\t}\n\tset probability(prob) {\n\t\tthis._probability = prob;\n\t}\n\n\t/**\n\t *  If set to true, will apply small random variation\n\t *  to the callback time. If the value is given as a time, it will randomize\n\t *  by that amount.\n\t * @example\n\t * event.humanize = true;\n\t */\n\tget humanize(): Time | boolean {\n\t\treturn this._humanize;\n\t}\n\n\tset humanize(variation) {\n\t\tthis._humanize = variation;\n\t}\n\n\t/**\n\t *  Start the note at the given time.\n\t *  @param  time  When the event should start.\n\t */\n\tstart(time?: TransportTime | TransportTimeClass): this {\n\t\ttime = this.toTicks(time);\n\t\tif (this._state.getValueAtTime(time) === \"stopped\") {\n\t\t\tthis._state.add({\n\t\t\t\tid : -1,\n\t\t\t\tstate : \"started\",\n\t\t\t\ttime,\n\t\t\t});\n\t\t\tthis._rescheduleEvents(time);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Stop the Event at the given time.\n\t *  @param  time  When the event should stop.\n\t */\n\tstop(time?: TransportTime | TransportTimeClass): this {\n\t\tthis.cancel(time);\n\t\ttime = this.toTicks(time);\n\t\tif (this._state.getValueAtTime(time) === \"started\") {\n\t\t\tthis._state.setStateAtTime(\"stopped\", time, { id: -1 });\n\t\t\tconst previousEvent = this._state.getBefore(time);\n\t\t\tlet reschedulTime = time;\n\t\t\tif (previousEvent !== null) {\n\t\t\t\treschedulTime = previousEvent.time;\n\t\t\t}\n\t\t\tthis._rescheduleEvents(reschedulTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Cancel all scheduled events greater than or equal to the given time\n\t *  @param  time  The time after which events will be cancel.\n\t */\n\tcancel(time?: TransportTime | TransportTimeClass): this {\n\t\ttime = defaultArg(time, -Infinity);\n\t\ttime = this.toTicks(time);\n\t\tthis._state.forEachFrom(time, event => {\n\t\t\tthis.context.transport.clear(event.id);\n\t\t});\n\t\tthis._state.cancel(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  The callback function invoker. Also\n\t *  checks if the Event is done playing\n\t *  @param  time  The time of the event in seconds\n\t */\n\tprotected _tick(time: Seconds): void {\n\t\tconst ticks = this.context.transport.getTicksAtTime(time);\n\t\tif (!this.mute && this._state.getValueAtTime(ticks) === \"started\") {\n\t\t\tif (this.probability < 1 && Math.random() > this.probability) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (this.humanize) {\n\t\t\t\tlet variation = 0.02;\n\t\t\t\tif (!isBoolean(this.humanize)) {\n\t\t\t\t\tvariation = this.toSeconds(this.humanize);\n\t\t\t\t}\n\t\t\t\ttime += (Math.random() * 2 - 1) * variation;\n\t\t\t}\n\t\t\tthis.callback(time, this.value);\n\t\t}\n\t}\n\n\t/**\n\t *  Get the duration of the loop.\n\t */\n\tprotected _getLoopDuration(): Ticks {\n\t\treturn Math.round((this._loopEnd - this._loopStart) / this._playbackRate);\n\t}\n\n\t/**\n\t *  If the note should loop or not\n\t *  between ToneEvent.loopStart and\n\t *  ToneEvent.loopEnd. If set to true,\n\t *  the event will loop indefinitely,\n\t *  if set to a number greater than 1\n\t *  it will play a specific number of\n\t *  times, if set to false, 0 or 1, the\n\t *  part will only play once.\n\t */\n\tget loop(): boolean | number {\n\t\treturn this._loop;\n\t}\n\tset loop(loop) {\n\t\tthis._loop = loop;\n\t\tthis._rescheduleEvents();\n\t}\n\n\t/**\n\t * \tThe playback rate of the note. Defaults to 1.\n\t *  @example\n\t * note.loop = true;\n\t * //repeat the note twice as fast\n\t * note.playbackRate = 2;\n\t */\n\tget playbackRate(): Positive {\n\t\treturn this._playbackRate;\n\t}\n\tset playbackRate(rate) {\n\t\tthis._playbackRate = rate;\n\t\tthis._rescheduleEvents();\n\t}\n\n\t/**\n\t *  The loopEnd point is the time the event will loop\n\t *  if ToneEvent.loop is true.\n\t */\n\tget loopEnd(): Time {\n\t\treturn new TicksClass(this.context, this._loopEnd).toSeconds();\n\t}\n\tset loopEnd(loopEnd) {\n\t\tthis._loopEnd = this.toTicks(loopEnd);\n\t\tif (this._loop) {\n\t\t\tthis._rescheduleEvents();\n\t\t}\n\t}\n\n\t/**\n\t *  The time when the loop should start.\n\t */\n\tget loopStart(): Time {\n\t\treturn new TicksClass(this.context, this._loopStart).toSeconds();\n\t}\n\tset loopStart(loopStart) {\n\t\tthis._loopStart = this.toTicks(loopStart);\n\t\tif (this._loop) {\n\t\t\tthis._rescheduleEvents();\n\t\t}\n\t}\n\n\t/**\n\t *  The current progress of the loop interval.\n\t *  Returns 0 if the event is not started yet or\n\t *  it is not set to loop.\n\t */\n\tget progress(): NormalRange {\n\t\tif (this._loop) {\n\t\t\tconst ticks = this.context.transport.ticks;\n\t\t\tconst lastEvent = this._state.get(ticks);\n\t\t\tif (lastEvent !== null && lastEvent.state === \"started\") {\n\t\t\t\tconst loopDuration = this._getLoopDuration();\n\t\t\t\tconst progress = (ticks - lastEvent.time) % loopDuration;\n\t\t\t\treturn progress / loopDuration;\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.cancel();\n\t\tthis._state.dispose();\n\t\treturn this;\n\t}\n}\n","import { noOp } from \"Tone/core/util/Interface\";\nimport { TicksClass } from \"../core/type/Ticks\";\nimport { TransportTimeClass } from \"../core/type/TransportTime\";\nimport { defaultArg, optionsFromArguments } from \"../core/util/Defaults\";\nimport { StateTimeline } from \"../core/util/StateTimeline\";\nimport { isArray, isDefined, isObject, isUndef } from \"../core/util/TypeCheck\";\nimport { ToneEvent, ToneEventCallback, ToneEventOptions } from \"./ToneEvent\";\n\ntype CallbackType<T> =\n\tT extends {\n\t\ttime: Time;\n\t\t[key: string]: any,\n\t} ? T :\n\tT extends ArrayLike<any> ? T[1] :\n\tT extends Time ? null : never;\n\ninterface PartOptions<T> extends Omit<ToneEventOptions<CallbackType<T>>, \"value\"> {\n\tevents: T[];\n}\n\n/**\n *  Part is a collection ToneEvents which can be started/stopped and looped as a single unit.\n *\n *  @param callback The callback to invoke on each event\n *  @param events the array of events\n *  @example\n * var part = new Part(function(time, note){\n * \t//the notes given as the second element in the array\n * \t//will be passed in as the second argument\n * \tsynth.triggerAttackRelease(note, \"8n\", time);\n * }, [[0, \"C2\"], [\"0:2\", \"C3\"], [\"0:3:2\", \"G2\"]]);\n *  @example\n * //use an array of objects as long as the object has a \"time\" attribute\n * var part = new Part(function(time, value){\n * \t//the value is an object which contains both the note and the velocity\n * \tsynth.triggerAttackRelease(value.note, \"8n\", time, value.velocity);\n * }, [{\"time\" : 0, \"note\" : \"C3\", \"velocity\": 0.9},\n * \t   {\"time\" : \"0:2\", \"note\" : \"C4\", \"velocity\": 0.5}\n * ]).start(0);\n */\nexport class Part<ValueType = any> extends ToneEvent<ValueType> {\n\n\tname = \"Part\";\n\n\t/**\n\t *  Tracks the scheduled events\n\t */\n\tprotected _state: StateTimeline<{\n\t\tid: number,\n\t\toffset: number,\n\t}> = new StateTimeline(\"stopped\");\n\n\t/**\n\t * The events that belong to this part\n\t */\n\tprivate _events: Set<ToneEvent> = new Set();\n\n\tconstructor(options?: Partial<PartOptions<ValueType>>);\n\tconstructor(callback?: ToneEventCallback<CallbackType<ValueType>>, value?: ValueType[]);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Part.getDefaults(), arguments, [\"callback\", \"events\"]));\n\t\tconst options = optionsFromArguments(Part.getDefaults(), arguments, [\"callback\", \"events\"]);\n\n\t\t// add the events\n\t\toptions.events.forEach(event => {\n\t\t\tif (isArray(event)) {\n\t\t\t\tthis.add(event[0], event[1]);\n\t\t\t} else {\n\t\t\t\tthis.add(event);\n\t\t\t}\n\t\t});\n\t}\n\n\tstatic getDefaults(): PartOptions<any> {\n\t\treturn Object.assign(ToneEvent.getDefaults(), {\n\t\t\tevents: [],\n\t\t});\n\t}\n\n\t/**\n\t *  Start the part at the given time.\n\t *  @param  time    When to start the part.\n\t *  @param  offset  The offset from the start of the part to begin playing at.\n\t */\n\tstart(time?: TransportTime, offset?: Time): this {\n\t\tconst ticks = this.toTicks(time);\n\t\tif (this._state.getValueAtTime(ticks) !== \"started\") {\n\t\t\toffset = defaultArg(offset, this._loop ? this._loopStart : 0);\n\t\t\tif (this._loop) {\n\t\t\t\toffset = defaultArg(offset, this._loopStart);\n\t\t\t} else {\n\t\t\t\toffset = defaultArg(offset, 0);\n\t\t\t}\n\t\t\tconst computedOffset = this.toTicks(offset);\n\t\t\tthis._state.add({\n\t\t\t\tid : -1,\n\t\t\t\toffset: computedOffset,\n\t\t\t\tstate : \"started\",\n\t\t\t\ttime : ticks,\n\t\t\t});\n\t\t\tthis._forEach(event => {\n\t\t\t\tthis._startNote(event, ticks, computedOffset);\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Start the event in the given event at the correct time given\n\t *  the ticks and offset and looping.\n\t *  @param  event\n\t *  @param  ticks\n\t *  @param  offset\n\t */\n\tprivate _startNote(event: ToneEvent, ticks: Ticks, offset: Ticks): void {\n\t\tticks -= offset;\n\t\tif (this._loop) {\n\t\t\tif (event.startOffset >= this._loopStart && event.startOffset < this._loopEnd) {\n\t\t\t\tif (event.startOffset < offset) {\n\t\t\t\t\t// start it on the next loop\n\t\t\t\t\tticks += this._getLoopDuration();\n\t\t\t\t}\n\t\t\t\tevent.start(new TicksClass(this.context, ticks));\n\t\t\t} else if (event.startOffset < this._loopStart && event.startOffset >= offset) {\n\t\t\t\tevent.loop = false;\n\t\t\t\tevent.start(new TicksClass(this.context, ticks));\n\t\t\t}\n\t\t} else if (event.startOffset >= offset) {\n\t\t\tevent.start(new TicksClass(this.context, ticks));\n\t\t}\n\t}\n\n\tget startOffset(): Ticks {\n\t\treturn this._startOffset;\n\t}\n\tset startOffset(offset) {\n\t\tthis._startOffset = offset;\n\t\tthis._forEach(event => {\n\t\t\tevent.startOffset += this._startOffset;\n\t\t});\n\t}\n\n\t/**\n\t *  Stop the part at the given time.\n\t *  @param  time  When to stop the part.\n\t */\n\tstop(time?: TransportTime): this {\n\t\tconst ticks = this.toTicks(time);\n\t\tthis._state.cancel(ticks);\n\t\tthis._state.setStateAtTime(\"stopped\", ticks);\n\t\tthis._forEach(event => {\n\t\t\tevent.stop(time);\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get/Set an Event's value at the given time.\n\t * If a value is passed in and no event exists at\n\t * the given time, one will be created with that value.\n\t * If two events are at the same time, the first one will\n\t * be returned.\n\t * @example\n\t * part.at(\"1m\"); //returns the part at the first measure\n\t * part.at(\"2m\", \"C2\"); //set the value at \"2m\" to C2.\n\t * //if an event didn't exist at that time, it will be created.\n\t * @param time The time of the event to get or set.\n\t * @param value If a value is passed in, the value of the event at the given time will be set to it.\n\t */\n\tat(time: Time, value?: any): ToneEvent | null {\n\t\tconst timeInTicks = new TransportTimeClass(this.context, time).toTicks();\n\t\tconst tickTime = new TicksClass(this.context, 1).toSeconds();\n\n\t\tconst iterator = this._events.values();\n\t\tlet result = iterator.next();\n\t\twhile (!result.done) {\n\t\t\tconst event = result.value;\n\t\t\tif (Math.abs(timeInTicks - event.startOffset) < tickTime) {\n\t\t\t\tif (isDefined(value)) {\n\t\t\t\t\tevent.value = value;\n\t\t\t\t}\n\t\t\t\treturn event;\n\t\t\t}\n\t\t\tresult = iterator.next();\n\t\t}\n\t\t// if there was no event at that time, create one\n\t\tif (isDefined(value)) {\n\t\t\tthis.add(time, value);\n\t\t\t// return the new event\n\t\t\treturn this.at(time);\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t *  Add a an event to the part.\n\t *  @param time The time the note should start. If an object is passed in, it should\n\t *  \t\t\thave a 'time' attribute and the rest of the object will be used as the 'value'.\n\t *  @param  value\n\t * @example\n\t * part.add(\"1m\", \"C#+11\");\n\t * @example\n\t * part.add({\n\t * \ttime: \"1m\",\n\t * \tnote: \"C#11\"\n\t * });\n\t */\n\tadd(obj: {\n\t\ttime: Time,\n\t\t[key: string]: any;\n\t}): this;\n\tadd(time: Time, value?: any): this;\n\tadd(time: Time | object, value?: any): this {\n\t\t// extract the parameters\n\t\tif (isObject(time) && time.hasOwnProperty(\"time\")) {\n\t\t\tvalue = time;\n\t\t\ttime = value.time;\n\t\t}\n\t\ttime = this.toTicks(time);\n\t\tlet event: ToneEvent;\n\t\tif (value instanceof ToneEvent) {\n\t\t\tevent = value;\n\t\t\tevent.callback = this._tick.bind(this);\n\t\t} else {\n\t\t\tevent = new ToneEvent({\n\t\t\t\tcallback : this._tick.bind(this),\n\t\t\t\tcontext: this.context,\n\t\t\t\tvalue,\n\t\t\t});\n\t\t}\n\t\t// the start offset\n\t\tevent.startOffset = time;\n\n\t\t// initialize the values\n\t\tevent.set({\n\t\t\thumanize : this.humanize,\n\t\t\tloop : this.loop,\n\t\t\tloopEnd : this.loopEnd,\n\t\t\tloopStart : this.loopStart,\n\t\t\tplaybackRate : this.playbackRate,\n\t\t\tprobability : this.probability,\n\t\t});\n\n\t\tthis._events.add(event);\n\n\t\t// start the note if it should be played right now\n\t\tthis._restartEvent(event);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Restart the given event\n\t */\n\tprivate _restartEvent(event: ToneEvent): void {\n\t\tthis._state.forEach((stateEvent) => {\n\t\t\tif (stateEvent.state === \"started\") {\n\t\t\t\tthis._startNote(event, stateEvent.time, stateEvent.offset);\n\t\t\t} else {\n\t\t\t\t// stop the note\n\t\t\t\tevent.stop(new TicksClass(this.context, stateEvent.time));\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t *  Remove an event from the part. If the event at that time is a Part,\n\t *  it will remove the entire part.\n\t *  @param time The time of the event\n\t *  @param value Optionally select only a specific event value\n\t */\n\tremove(obj: {\n\t\ttime: Time,\n\t\t[key: string]: any;\n\t}): this;\n\tremove(time: Time, value?: any): this;\n\tremove(time: Time | object, value?: any): this {\n\t\t// extract the parameters\n\t\tif (isObject(time) && time.hasOwnProperty(\"time\")) {\n\t\t\tvalue = time;\n\t\t\ttime = value.time;\n\t\t}\n\t\ttime = this.toTicks(time);\n\t\tthis._events.forEach(event => {\n\t\t\tif (event.startOffset === time) {\n\t\t\t\tif (isUndef(value) || (isDefined(value) && event.value === value)) {\n\t\t\t\t\tthis._events.delete(event);\n\t\t\t\t\tevent.dispose();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Remove all of the notes from the group.\n\t */\n\tclear(): this {\n\t\tthis._forEach(event => event.dispose());\n\t\tthis._events.clear();\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Cancel scheduled state change events: i.e. \"start\" and \"stop\".\n\t *  @param after The time after which to cancel the scheduled events.\n\t */\n\tcancel(after?: TransportTime | TransportTimeClass): this {\n\t\tthis._forEach(event => event.cancel(after));\n\t\tthis._state.cancel(this.toTicks(after));\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over all of the events\n\t */\n\tprivate _forEach(callback: (event: ToneEvent) => void): this {\n\t\tif (this._events) {\n\t\t\tthis._events.forEach(event => {\n\t\t\t\tif (event instanceof Part) {\n\t\t\t\t\tevent._forEach(callback);\n\t\t\t\t} else {\n\t\t\t\t\tcallback(event);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Set the attribute of all of the events\n\t *  @param  attr  the attribute to set\n\t *  @param  value      The value to set it to\n\t */\n\tprivate _setAll(attr: string, value: any): void {\n\t\tthis._forEach(event => {\n\t\t\tevent[attr] = value;\n\t\t});\n\t}\n\n\t/**\n\t *  Internal tick method\n\t *  @param  time  The time of the event in seconds\n\t */\n\tprotected _tick(time: Seconds, value?: any): void {\n\t\tif (!this.mute) {\n\t\t\tthis.callback(time, value);\n\t\t}\n\t}\n\n\t/**\n\t *  Determine if the event should be currently looping\n\t *  given the loop boundries of this Part.\n\t *  @param  event  The event to test\n\t */\n\tprivate _testLoopBoundries(event: ToneEvent): void {\n\t\tif (this._loop && (event.startOffset < this._loopStart || event.startOffset >= this._loopEnd)) {\n\t\t\tevent.cancel(0);\n\t\t} else if (event.state === \"stopped\") {\n\t\t\t// reschedule it if it's stopped\n\t\t\tthis._restartEvent(event);\n\t\t}\n\t}\n\n\t/**\n\t *  The probability of the notes being triggered.\n\t */\n\tget probability(): NormalRange {\n\t\treturn this._probability;\n\t}\n\tset probability(prob) {\n\t\tthis._probability = prob;\n\t\tthis._setAll(\"probability\", prob);\n\t}\n\n\t/**\n\t * If set to true, will apply small random variation\n\t * to the callback time. If the value is given as a time, it will randomize\n\t * by that amount.\n\t * @example\n\t * event.humanize = true;\n\t */\n\tget humanize(): boolean | Time {\n\t\treturn this._humanize;\n\t}\n\tset humanize(variation) {\n\t\tthis._humanize = variation;\n\t\tthis._setAll(\"humanize\", variation);\n\t}\n\n\t/**\n\t * If the part should loop or not\n\t * between Part.loopStart and\n\t * Part.loopEnd. If set to true,\n\t * the part will loop indefinitely,\n\t * if set to a number greater than 1\n\t * it will play a specific number of\n\t * times, if set to false, 0 or 1, the\n\t * part will only play once.\n\t * @example\n\t * //loop the part 8 times\n\t * part.loop = 8;\n\t */\n\tget loop(): boolean | number {\n\t\treturn this._loop;\n\t}\n\tset loop(loop) {\n\t\tthis._loop = loop;\n\t\tthis._forEach(event => {\n\t\t\tevent.loopStart = this.loopStart;\n\t\t\tevent.loopEnd = this.loopEnd;\n\t\t\tevent.loop = loop;\n\t\t\tthis._testLoopBoundries(event);\n\t\t});\n\t}\n\n\t/**\n\t *  The loopEnd point determines when it will\n\t *  loop if Part.loop is true.\n\t *  @memberOf Part#\n\t *  @type {Time}\n\t *  @name loopEnd\n\t */\n\tget loopEnd(): Time {\n\t\treturn new TicksClass(this.context, this._loopEnd).toSeconds();\n\t}\n\tset loopEnd(loopEnd) {\n\t\tthis._loopEnd = this.toTicks(loopEnd);\n\t\tif (this._loop) {\n\t\t\tthis._forEach(event => {\n\t\t\t\tevent.loopEnd = loopEnd;\n\t\t\t\tthis._testLoopBoundries(event);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t *  The loopStart point determines when it will\n\t *  loop if Part.loop is true.\n\t */\n\tget loopStart(): Time {\n\t\treturn new TicksClass(this.context, this._loopStart).toSeconds();\n\t}\n\tset loopStart(loopStart) {\n\t\tthis._loopStart = this.toTicks(loopStart);\n\t\tif (this._loop) {\n\t\t\tthis._forEach(event => {\n\t\t\t\tevent.loopStart = this.loopStart;\n\t\t\t\tthis._testLoopBoundries(event);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * \tThe playback rate of the part\n\t */\n\tget playbackRate(): Positive {\n\t\treturn this._playbackRate;\n\t}\n\tset playbackRate(rate) {\n\t\tthis._playbackRate = rate;\n\t\tthis._setAll(\"playbackRate\", rate);\n\t}\n\n\t/**\n\t * \tThe number of scheduled notes in the part.\n\t */\n\tget length(): number {\n\t\treturn this._events.size;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.clear();\n\t\treturn this;\n\t}\n}\n","import { TicksClass } from \"../core/type/Ticks\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { isArray, isString } from \"../core/util/TypeCheck\";\nimport { Part } from \"./Part\";\nimport { ToneEvent, ToneEventCallback, ToneEventOptions } from \"./ToneEvent\";\n\ntype SequenceEventDescription<T> = Array<T | T[]>;\n\ninterface SequenceOptions<T> extends Omit<ToneEventOptions<T>, \"value\"> {\n\tloopStart: number;\n\tloopEnd: number;\n\tsubdivision: Time;\n\tevents: SequenceEventDescription<T>;\n}\n\n/**\n * A sequence is an alternate notation of a part. Instead\n * of passing in an array of [time, event] pairs, pass\n * in an array of events which will be spaced at the\n * given subdivision. Sub-arrays will subdivide that beat\n * by the number of items are in the array.\n * Sequence notation inspiration from [Tidal](http://yaxu.org/tidal/)\n * @param  callback  The callback to invoke with every note\n * @param  sequence  The sequence\n * @param  subdivision  The subdivision between which events are placed.\n * @example\n * var seq = new Sequence(function(time, note){\n * \tconsole.log(note);\n * //straight quater notes\n * }, [\"C4\", \"E4\", \"G4\", \"A4\"], \"4n\");\n * @example\n * var seq = new Sequence(function(time, note){\n * \tconsole.log(note);\n * //subdivisions are given as subarrays\n * }, [\"C4\", [\"E4\", \"D4\", \"E4\"], \"G4\", [\"A4\", \"G4\"]]);\n */\nexport class Sequence<ValueType = any> extends ToneEvent<ValueType> {\n\n\tname = \"Sequence\";\n\n\t/**\n\t *  The subdivison of each note\n\t */\n\tprivate _subdivision: Ticks;\n\n\t/**\n\t * The object responsible for scheduling all of the events\n\t */\n\tprivate _part: Part = new Part({\n\t\tcallback: this._seqCallback.bind(this),\n\t\tcontext: this.context,\n\t});\n\n\t/**\n\t * private reference to all of the sequence proxies\n\t */\n\tprivate _events: ValueType[] = [];\n\n\t/**\n\t * The proxied array\n\t */\n\tprivate _eventsArray: ValueType[] = [];\n\n\tconstructor(\n\t\tcallback?: ToneEventCallback<ValueType>,\n\t\tevents?: SequenceEventDescription<ValueType>,\n\t\tsubdivision?: Time,\n\t);\n\tconstructor(options?: Partial<SequenceOptions<ValueType>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Sequence.getDefaults(), arguments, [\"callback\", \"events\", \"subdivision\"]));\n\t\tconst options = optionsFromArguments(Sequence.getDefaults(), arguments, [\"callback\", \"events\", \"subdivision\"]);\n\n\t\tthis._subdivision = this.toTicks(options.subdivision);\n\n\t\tthis.events = options.events;\n\n\t\t// set all of the values\n\t\tthis.loop = options.loop;\n\t\tthis.loopStart = options.loopStart;\n\t\tthis.loopEnd = options.loopEnd;\n\t\tthis.playbackRate = options.playbackRate;\n\t\tthis.probability = options.probability;\n\t\tthis.humanize = options.humanize;\n\t\tthis.mute = options.mute;\n\t\tthis.playbackRate = options.playbackRate;\n\t}\n\n\tstatic getDefaults(): SequenceOptions<any> {\n\t\treturn Object.assign( omitFromObject(ToneEvent.getDefaults(), [\"value\"]), {\n\t\t\tevents: [],\n\t\t\tloop: true,\n\t\t\tloopEnd : 0,\n\t\t\tloopStart: 0,\n\t\t\tsubdivision: \"8n\",\n\t\t});\n\t}\n\n\t/**\n\t * The internal callback for when an event is invoked\n\t */\n\tprivate _seqCallback(time: Seconds, value: any): void {\n\t\tif (value !== null) {\n\t\t\tthis.callback(time, value);\n\t\t}\n\t}\n\n\t/**\n\t * The sequence\n\t */\n\tget events(): any[] {\n\t\treturn this._events;\n\t}\n\tset events(s) {\n\t\tthis.clear();\n\t\tthis._eventsArray = s;\n\t\tthis._events = this._createSequence(this._eventsArray);\n\t\tthis._eventsUpdated();\n\t}\n\n\t/**\n\t *  Start the part at the given time.\n\t *  @param  time    When to start the part.\n\t *  @param  offset  The offset index to start at\n\t */\n\tstart(time?: TransportTime, offset?: number): this {\n\t\tthis._part.start(time, offset ? this._indexTime(offset) : offset);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Stop the part at the given time.\n\t *  @param  time  When to stop the part.\n\t */\n\tstop(time?: TransportTime): this {\n\t\tthis._part.stop(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  The subdivision of the sequence. This can only be\n\t *  set in the constructor. The subdivision is the\n\t *  interval between successive steps.\n\t */\n\tget subdivision(): Seconds {\n\t\treturn new TicksClass(this.context, this._subdivision).toSeconds();\n\t}\n\n\t/**\n\t * Create a sequence proxy which can be monitored to create subsequences\n\t */\n\tprivate _createSequence(array: any[]): any[] {\n\t\treturn new Proxy(array, {\n\t\t\tget: (target: any[], property: PropertyKey): any => {\n\t\t\t\t// property is index in this case\n\t\t\t\treturn target[property];\n\t\t\t},\n\t\t\tset: (target: any[], property: PropertyKey, value: any): boolean => {\n\t\t\t\tif (isString(property) && isFinite(parseInt(property, 10))) {\n\t\t\t\t\tconst index = parseInt(property, 10);\n\t\t\t\t\tif (isArray(value)) {\n\t\t\t\t\t\ttarget[property] = this._createSequence(value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttarget[property] = value;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttarget[property] = value;\n\t\t\t\t}\n\t\t\t\tthis._eventsUpdated();\n\t\t\t\t// return true to accept the changes\n\t\t\t\treturn true;\n\t\t\t},\n\t\t});\n\t}\n\n\t/**\n\t * When the sequence has changed, all of the events need to be recreated\n\t */\n\tprivate _eventsUpdated(): void {\n\t\tthis._part.clear();\n\t\tthis._rescheduleSequence(this._eventsArray, this._subdivision, this.startOffset);\n\t\t// update the loopEnd\n\t\tthis.loopEnd = this.loopEnd;\n\t}\n\n\t/**\n\t * reschedule all of the events that need to be rescheduled\n\t */\n\tprivate _rescheduleSequence(sequence: any[], subdivision: Ticks, startOffset: Ticks): void {\n\t\tsequence.forEach((value, index) => {\n\t\t\tconst eventOffset = index * (subdivision) + startOffset;\n\t\t\tif (isArray(value)) {\n\t\t\t\tthis._rescheduleSequence(value, subdivision / value.length, eventOffset);\n\t\t\t} else {\n\t\t\t\tconst startTime = new TicksClass(this.context, eventOffset, \"i\").toSeconds();\n\t\t\t\tthis._part.add(startTime, value);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t *  Get the time of the index given the Sequence's subdivision\n\t *  @param  index\n\t *  @return The time of that index\n\t *  @private\n\t */\n\tprivate _indexTime(index: number): Seconds {\n\t\treturn new TicksClass(this.context, index * (this._subdivision) + this.startOffset).toSeconds();\n\t}\n\n\t/**\n\t * Clear all of the events\n\t */\n\tclear(): this {\n\t\tthis._part.clear();\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._part.dispose();\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// PROXY CALLS\n\t///////////////////////////////////////////////////////////////////////////\n\n\tget loop(): boolean | number {\n\t\treturn this._part.loop;\n\t}\n\tset loop(l) {\n\t\tif (this._part) {\n\t\t\tthis._part.loop = l;\n\t\t}\n\t}\n\n\t/**\n\t * The index at which the sequence should start looping\n\t */\n\tget loopStart(): number {\n\t\treturn this._loopStart;\n\t}\n\tset loopStart(index) {\n\t\tthis._loopStart = index;\n\t\tif (this._part) {\n\t\t\tthis._part.loopStart = this._indexTime(index);\n\t\t}\n\t}\n\n\t/**\n\t * The index at which the sequence should end looping\n\t */\n\tget loopEnd(): number {\n\t\treturn this._loopEnd;\n\t}\n\tset loopEnd(index) {\n\t\tthis._loopEnd = index;\n\t\tif (this._part) {\n\t\t\tif (index === 0) {\n\t\t\t\tthis._part.loopEnd = this._indexTime(this._eventsArray.length);\n\t\t\t} else {\n\t\t\t\tthis._part.loopEnd = this._indexTime(index);\n\t\t\t}\n\t\t}\n\t}\n\n\tget startOffset(): Ticks {\n\t\treturn this._part.startOffset;\n\t}\n\tset startOffset(start) {\n\t\tif (this._part) {\n\t\t\tthis._part.startOffset = start;\n\t\t}\n\t}\n\n\tget playbackRate(): Positive {\n\t\treturn this._part.playbackRate;\n\t}\n\tset playbackRate(rate) {\n\t\tif (this._part) {\n\t\t\tthis._part.playbackRate = rate;\n\t\t}\n\t}\n\n\tget probability(): NormalRange {\n\t\treturn this._part.probability;\n\t}\n\tset probability(prob) {\n\t\tif (this._part) {\n\t\t\tthis._part.probability = prob;\n\t\t}\n\t}\n\n\tget humanize(): boolean | Time {\n\t\treturn this._part.humanize;\n\t}\n\tset humanize(variation) {\n\t\tif (this._part) {\n\t\t\tthis._part.humanize = variation;\n\t\t}\n\t}\n\n\t/**\n\t * The number of scheduled events\n\t */\n\tget length(): number {\n\t\treturn this._part.length;\n\t}\n}\n","import { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { SignalOperator } from \"./SignalOperator\";\nimport { WaveShaper } from \"./WaveShaper\";\n\n/**\n * GainToAudio converts an input in NormalRange [0,1] to AudioRange [-1,1].\n * See {@link AudioToGain}.\n *\n * @example\n * var a2g = new GainToAudio();\n */\nexport class GainToAudio extends SignalOperator<ToneAudioNodeOptions> {\n\n\tname = \"GainToAudio\";\n\n\t/**\n\t * The node which converts the audio ranges\n\t */\n\tprivate _norm = new WaveShaper({\n\t\tcontext: this.context,\n\t\tmapping: x => Math.abs(x) * 2 - 1,\n\t});\n\tprotected _internalChannels = [this._norm];\n\n\t/**\n\t * The NormalRange input [0, 1]\n\t */\n\tinput = this._norm;\n\n\t/**\n\t * The AudioRange output [-1, 1]\n\t */\n\toutput = this._norm;\n\n\t/**\n\t *  clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._norm.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { connect, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { GainToAudio } from \"../../signal/GainToAudio\";\nimport { Signal } from \"../../signal/Signal\";\n\ninterface CrossFadeOptions extends ToneAudioNodeOptions {\n\tfade: NormalRange;\n}\n\n/**\n * Tone.Crossfade provides equal power fading between two inputs.\n * More on crossfading technique [here](https://en.wikipedia.org/wiki/Fade_(audio_engineering)#Crossfading).\n * ```\n *                                             +---------+\n *                                            +> input a +>--+\n * +-----------+   +---------------------+     |         |   |\n * | 1s signal +>--> stereoPannerNode  L +>----> gain    |   |\n * +-----------+   |                     |     +---------+   |\n *               +-> pan               R +>-+                |   +--------+\n *               | +---------------------+  |                +---> output +>\n *  +------+     |                          |  +---------+   |   +--------+\n *  | fade +>----+                          | +> input b +>--+\n *  +------+                                |  |         |\n *                                          +--> gain    |\n *                                             +---------+\n * ```\n * @example\n * var crossFade = new CrossFade(0.5);\n * //connect effect A to crossfade from\n * //effect output 0 to crossfade input 0\n * effectA.connect(crossFade.a);\n * //connect effect B to crossfade from\n * //effect output 0 to crossfade input 1\n * effectB.connect(crossFade.b);\n * crossFade.fade.value = 0;\n * // ^ only effectA is output\n * crossFade.fade.value = 1;\n * // ^ only effectB is output\n * crossFade.fade.value = 0.5;\n * // ^ the two signals are mixed equally.\n */\nexport class CrossFade extends ToneAudioNode<CrossFadeOptions> {\n\n\tname = \"CrossFade\";\n\n\t/**\n\t * The crossfading is done by a StereoPannerNode\n\t */\n\tprivate _panner: StereoPannerNode = this.context.createStereoPanner();\n\n\t/**\n\t * Split the output of the panner node into two values used to control the gains.\n\t */\n\tprivate _split: ChannelSplitterNode = this.context.createChannelSplitter(2);\n\n\t/**\n\t * Convert the fade value into an audio range value so it can be connected\n\t * to the panner.pan AudioParam\n\t */\n\tprivate _g2a: GainToAudio = new GainToAudio({ context : this.context });\n\n\t/**\n\t * The input which is at full level when fade = 0\n\t */\n\ta: Gain = new Gain({\n\t\tcontext : this.context,\n\t\tgain: 0,\n\t});\n\n\t/**\n\t * The input which is at full level when fade = 1\n\t */\n\tb: Gain = new Gain({\n\t\tcontext : this.context,\n\t\tgain: 0,\n\t});\n\n\t/**\n\t * The output is a mix between `a` and `b` at the ratio of `fade`\n\t */\n\toutput: Gain = new Gain({ context : this.context });\n\n\t/**\n\t * CrossFade has no input, you must choose either `a` or `b`\n\t */\n\tinput: undefined;\n\n\t/**\n\t * \tThe mix between the two inputs. A fade value of 0\n\t * \twill output 100% crossFade.a and\n\t * \ta value of 1 will output 100% crossFade.b.\n\t */\n\treadonly fade: Signal<NormalRange>;\n\n\tprotected _internalChannels = [this.a, this.b];\n\n\tconstructor(options?: Partial<CrossFadeOptions>);\n\t// tslint:disable-next-line: unified-signatures\n\tconstructor(fade?: NormalRange);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(CrossFade.getDefaults(), arguments, [\"fade\"])));\n\t\tconst options = optionsFromArguments(CrossFade.getDefaults(), arguments, [\"fade\"]);\n\n\t\tthis.fade = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"normalRange\",\n\t\t\tvalue: options.fade,\n\t\t});\n\t\treadOnly(this, \"fade\");\n\n\t\tthis.context.getConstant(1).connect(this._panner);\n\t\tthis._panner.connect(this._split);\n\t\tconnect(this._split, this.a.gain, 0);\n\t\tconnect(this._split, this.b.gain, 1);\n\n\t\tthis.fade.chain(this._g2a, this._panner.pan);\n\n\t\tthis.a.connect(this.output);\n\t\tthis.b.connect(this.output);\n\t}\n\n\tstatic getDefaults(): CrossFadeOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tfade: 0.5,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.a.dispose();\n\t\tthis.b.dispose();\n\t\tthis.output.dispose();\n\t\tthis.fade.dispose();\n\t\tthis._g2a.dispose();\n\t\tthis._panner.disconnect();\n\t\tthis._split.disconnect();\n\t\treturn this;\n\t}\n}\n","import { CrossFade } from \"../component/channel/CrossFade\";\nimport { Gain } from \"../core/context/Gain\";\nimport { InputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Signal } from \"../signal/Signal\";\n\nexport interface EffectOptions extends ToneAudioNodeOptions {\n\twet: NormalRange;\n}\n/**\n * \t@class  Effect is the base class for effects. Connect the effect between\n * \t        the effectSend and effectReturn GainNodes, then control the amount of\n * \t        effect which goes to the output using the wet control.\n *\n *  @constructor\n *  @extends {Tone.AudioNode}\n *  @param {NormalRange|Object} [wet] The starting wet value.\n */\nexport abstract class Effect<Options extends EffectOptions>\nextends ToneAudioNode<Options> {\n\n\tname = \"Effect\";\n\n\t/**\n\t *  the drywet knob to control the amount of effect\n\t */\n\tprivate _dryWet: CrossFade = new CrossFade({ context : this.context });\n\n\t/**\n\t *  The wet control is how much of the effected\n\t *  will pass through to the output. 1 = 100% effected\n\t *  signal, 0 = 100% dry signal.\n\t */\n\twet: Signal<NormalRange> = this._dryWet.fade;\n\n\t/**\n\t *  connect the effectSend to the input of hte effect\n\t */\n\tprotected effectSend: Gain = new Gain({ context : this.context });\n\n\t/**\n\t *  connect the output of the effect to the effectReturn\n\t */\n\tprotected effectReturn: Gain = new Gain({ context : this.context });\n\n\t/**\n\t * The effect input node\n\t */\n\tinput: Gain = new Gain({ context : this.context });\n\n\t/**\n\t * The effect output\n\t */\n\toutput = this._dryWet;\n\n\tprotected _internalChannels: ToneAudioNode[] = [this.input, this.output, this.effectReturn, this.effectSend];\n\n\tconstructor(options: EffectOptions) {\n\t\tsuper(options);\n\n\t\t// connections\n\t\tthis.input.fan(this._dryWet.a, this.effectSend);\n\t\tthis.effectReturn.connect(this._dryWet.b);\n\t\tthis.wet.setValueAtTime(options.wet, 0);\n\t\treadOnly(this, \"wet\");\n\t}\n\n\tstatic getDefaults(): EffectOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\twet : 1,\n\t\t});\n\t}\n\n\t/**\n\t *  chains the effect in between the effectSend and effectReturn\n\t */\n\tprotected connectEffect(effect: InputNode): this {\n\t\tthis.effectSend.chain(effect, this.effectReturn);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._dryWet.dispose();\n\t\tthis.effectSend.dispose();\n\t\tthis.effectReturn.dispose();\n\t\tthis.wet.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../core/context/Gain\";\nimport { Param } from \"../core/context/Param\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Effect, EffectOptions } from \"./Effect\";\n\nexport interface FeedbackEffectOptions extends EffectOptions {\n\t/**\n\t * The feedback from the output back to the input\n\t * ```\n\t * +---<--------<---+\n\t * |                |\n\t * |  +----------+  |\n\t * +--> feedback +>-+\n\t *    +----------+\n\t * ```\n\t */\n\tfeedback: NormalRange;\n}\n\n/**\n * FeedbackEffect provides a loop between an audio source and its own output.\n * This is a base-class for feedback effects.\n */\nexport abstract class FeedbackEffect<Options extends FeedbackEffectOptions> extends Effect<Options> {\n\n\tname = \"FeedbackEffect\";\n\n\t/**\n\t *  the gain which controls the feedback\n\t */\n\tprivate _feedbackGain: Gain<NormalRange>;\n\n\t/**\n\t *  The amount of signal which is fed back into the effect input.\n\t */\n\tfeedback: Param<NormalRange>;\n\n\tconstructor(options: FeedbackEffectOptions) {\n\n\t\tsuper(options);\n\n\t\tthis._feedbackGain = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: options.feedback,\n\t\t\tunits: \"normalRange\",\n\t\t});\n\n\t\tthis.feedback = this._feedbackGain.gain;\n\t\treadOnly(this, \"feedback\");\n\n\t\t// the feedback loop\n\t\tthis.effectReturn.chain(this._feedbackGain, this.effectSend);\n\t}\n\n\tstatic getDefaults(): FeedbackEffectOptions {\n\t\treturn Object.assign(Effect.getDefaults(), {\n\t\t\tfeedback: 0.125,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._feedbackGain.dispose();\n\t\tthis.feedback.dispose();\n\t\treturn this;\n\t}\n}\n","import { Delay } from \"../core/context/Delay\";\nimport { Param } from \"../core/context/Param\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { FeedbackEffect,  FeedbackEffectOptions } from \"./FeedbackEffect\";\n\ninterface FeedbackDelayOptions extends FeedbackEffectOptions {\n\tdelayTime: Time;\n\tmaxDelay: Time;\n}\n\n/**\n * FeedbackDelay is a DelayNode in which part of output signal is fed back into the delay.\n *\n * @param delayTime The delay applied to the incoming signal.\n * @param feedback The amount of the effected signal which is fed back through the delay.\n * @example\n * var feedbackDelay = new FeedbackDelay(\"8n\", 0.5).toDestination();\n * var tom = new Tone.MembraneSynth({\n * \t\"octaves\" : 4,\n * \t\"pitchDecay\" : 0.1\n * }).connect(feedbackDelay);\n * tom.triggerAttackRelease(\"A2\",\"32n\");\n */\nexport class FeedbackDelay extends FeedbackEffect<FeedbackDelayOptions> {\n\n\t/**\n\t *  the delay node\n\t */\n\tprivate _delayNode: Delay;\n\n\t/**\n\t *  The delayTime of the FeedbackDelay.\n\t */\n\treadonly delayTime: Param<Time>;\n\n\tconstructor(delayTime?: Time, feedback?: NormalRange);\n\tconstructor(options?: Partial<FeedbackDelayOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(FeedbackDelay.getDefaults(), arguments, [\"delayTime\", \"feedback\"]));\n\t\tconst options = optionsFromArguments(FeedbackDelay.getDefaults(), arguments, [\"delayTime\", \"feedback\"]);\n\n\t\tthis._delayNode = new Delay({\n\t\t\tcontext: this.context,\n\t\t\tdelayTime: options.delayTime,\n\t\t\tmaxDelay: options.maxDelay,\n\t\t});\n\t\tthis.delayTime = this._delayNode.delayTime;\n\t\tthis._internalChannels.push(this._delayNode);\n\n\t\t// connect it up\n\t\tthis.connectEffect(this._delayNode);\n\t\treadOnly(this, \"delayTime\");\n\t}\n\n\tstatic getDefaults(): FeedbackDelayOptions {\n\t\treturn Object.assign(FeedbackEffect.getDefaults(), {\n\t\t\tdelayTime: 0.25,\n\t\t\tmaxDelay: 1,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._delayNode.dispose();\n\t\tthis.delayTime.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioBuffer } from \"../core/context/ToneAudioBuffer\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { Effect, EffectOptions } from \"./Effect\";\n\ninterface ToneConvolverOptions extends EffectOptions {\n\tonload: () => void;\n\tnormalize: boolean;\n\turl?: string | AudioBuffer | ToneAudioBuffer;\n}\n\n/**\n * Convolver is a wrapper around the Native Web Audio\n * [ConvolverNode](http://webaudio.github.io/web-audio-api/#the-convolvernode-interface).\n * Convolution is useful for reverb and filter emulation. Read more about convolution reverb on\n * [Wikipedia](https://en.wikipedia.org/wiki/Convolution_reverb).\n *\n * @param url The URL of the impulse response or the Tone.Buffer contianing the impulse response.\n * @param onload The callback to invoke when the url is loaded.\n * @example\n * //initializing the convolver with an impulse response\n * var convolver = new Convolver(\"./path/to/ir.wav\").toDestination();\n */\nexport class Convolver extends Effect<ToneConvolverOptions> {\n\n\tname = \"Convolver\";\n\n\t/**\n\t *  The native ConvolverNode\n\t */\n\tprivate _convolver: ConvolverNode = this.context.createConvolver();\n\n\t/**\n\t *  The Buffer belonging to the convolver\n\t */\n\tprivate _buffer: ToneAudioBuffer;\n\n\tconstructor(url?: string | AudioBuffer | ToneAudioBuffer, onload?: () => void);\n\tconstructor(options?: Partial<ToneConvolverOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Convolver.getDefaults(), arguments, [\"url\", \"onload\"]));\n\t\tconst options = optionsFromArguments(Convolver.getDefaults(), arguments, [\"url\", \"onload\"]);\n\n\t\tthis._buffer = new ToneAudioBuffer(options.url, buffer => {\n\t\t\tthis.buffer = buffer;\n\t\t\toptions.onload();\n\t\t});\n\n\t\t// set if it's already loaded\n\t\tif (this._buffer.loaded) {\n\t\t\tthis.buffer = this._buffer;\n\t\t}\n\n\t\t// initially set normalization\n\t\tthis.normalize = options.normalize;\n\n\t\t// connect it up\n\t\tthis.connectEffect(this._convolver);\n\t}\n\n\tstatic getDefaults(): ToneConvolverOptions {\n\t\treturn Object.assign(Effect.getDefaults(), {\n\t\t\tnormalize : true,\n\t\t\tonload : noOp,\n\t\t});\n\t}\n\n\t/**\n\t * Load an impulse response url as an audio buffer.\n\t * Decodes the audio asynchronously and invokes\n\t * the callback once the audio buffer loads.\n\t * @param url The url of the buffer to load. filetype support depends on the browser.\n\t */\n\tasync load(url: string): Promise<void> {\n\t\tthis.buffer = await this._buffer.load(url);\n\t}\n\n\t/**\n\t *  The convolver's buffer\n\t */\n\tget buffer(): ToneAudioBuffer | null {\n\t\tif (this._buffer.length) {\n\t\t\treturn this._buffer;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\tset buffer(buffer) {\n\t\tif (buffer) {\n\t\t\tthis._buffer.set(buffer);\n\t\t}\n\t\t// if it's already got a buffer, create a new one\n\t\tif (this._convolver.buffer) {\n\t\t\t// disconnect the old one\n\t\t\tthis.effectSend.disconnect();\n\t\t\tthis._convolver.disconnect();\n\t\t\t// create and connect a new one\n\t\t\tthis._convolver = this.context.createConvolver();\n\t\t\tthis.connectEffect(this._convolver);\n\t\t}\n\t\tconst buff = this._buffer.get();\n\t\tthis._convolver.buffer = buff ? buff : null;\n\t}\n\n\t/**\n\t * The normalize property of the ConvolverNode interface is a boolean that\n\t * controls whether the impulse response from the buffer will be scaled by\n\t * an equal-power normalization when the buffer attribute is set, or not.\n\t */\n\tget normalize(): boolean {\n\t\treturn this._convolver.normalize;\n\t}\n\tset normalize(norm) {\n\t\tthis._convolver.normalize = norm;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._buffer.dispose();\n\t\tthis._convolver.disconnect();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n\ntype AnalyserType = \"fft\" | \"waveform\";\n\ninterface AnalyserOptions extends ToneAudioNodeOptions {\n\tsize: PowerOfTwo;\n\ttype: AnalyserType;\n\tsmoothing: NormalRange;\n}\n\n/**\n *  Wrapper around the native Web Audio's [AnalyserNode](http://webaudio.github.io/web-audio-api/#idl-def-AnalyserNode).\n *  Extracts FFT or Waveform data from the incoming signal.\n *  @param type The return type of the analysis, either \"fft\", or \"waveform\".\n *  @param size The size of the FFT. This must be a power of two in the range 16 to 16384.\n */\nexport class Analyser extends ToneAudioNode<AnalyserOptions> {\n\n\tname = \"Analyser\";\n\n\tinput: AnalyserNode;\n\toutput: AnalyserNode;\n\n\t/**\n\t *  The analyser node.\n\t */\n\tprivate _analyser = this.context.createAnalyser();\n\tprotected _internalChannels = [this._analyser];\n\n\t/**\n\t *  The analysis type\n\t */\n\tprivate _type!: AnalyserType;\n\n\t/**\n\t *  The buffer that the FFT data is written to\n\t */\n\tprivate _buffer!: Float32Array;\n\n\tconstructor(type?: AnalyserType, size?: number);\n\tconstructor(options?: Partial<AnalyserOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Analyser.getDefaults(), arguments, [\"type\", \"size\"]));\n\t\tconst options = optionsFromArguments(Analyser.getDefaults(), arguments, [\"type\", \"size\"]);\n\t\t// set the values initially\n\t\tthis.size = options.size;\n\t\tthis.type = options.type;\n\t\tthis.input = this.output = this._analyser;\n\t}\n\n\tstatic getDefaults(): AnalyserOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tnumberOfInputs: 1,\n\t\t\tnumberOfOutputs: 1,\n\t\t\tsize: 1024,\n\t\t\tsmoothing: 0.8,\n\t\t\ttype: \"fft\" as AnalyserType,\n\t\t});\n\t}\n\n\t/**\n\t *  Run the analysis given the current settings and return the\n\t */\n\tgetValue(): Float32Array {\n\t\tif (this._type === \"fft\") {\n\t\t\tthis._analyser.getFloatFrequencyData(this._buffer);\n\t\t} else if (this._type === \"waveform\") {\n\t\t\tthis._analyser.getFloatTimeDomainData(this._buffer);\n\t\t}\n\t\treturn this._buffer;\n\t}\n\n\t/**\n\t *  The size of analysis. This must be a power of two in the range 16 to 16384.\n\t */\n\tget size(): PowerOfTwo {\n\t\treturn this._analyser.frequencyBinCount;\n\t}\n\tset size(size: PowerOfTwo) {\n\t\tthis._analyser.fftSize = size * 2;\n\t\tthis._buffer = new Float32Array(size);\n\t}\n\n\t/**\n\t *  The analysis function returned by analyser.getValue(), either \"fft\" or \"waveform\".\n\t */\n\tget type(): AnalyserType {\n\t\treturn this._type;\n\t}\n\tset type(type: AnalyserType) {\n\t\tthis.assert(type === \"waveform\" || type === \"fft\", `Analyser: invalid type: ${type}`);\n\t\tthis._type = type;\n\t}\n\n\t/**\n\t *  0 represents no time averaging with the last analysis frame.\n\t */\n\tget smoothing(): NormalRange {\n\t\treturn this._analyser.smoothingTimeConstant;\n\t}\n\n\tset smoothing(val: NormalRange) {\n\t\tthis._analyser.smoothingTimeConstant = val;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._analyser.disconnect();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n\ninterface MergeOptions extends ToneAudioNodeOptions {\n\tchannels: Positive;\n}\n\n/**\n * Merge brings multiple mono input channels into a single multichannel output channel.\n *\n * @param channels The number of channels to merge.\n * @example\n * var merge = new Merge().toDestination();\n * //routing a sine tone in the left channel\n * //and noise in the right channel\n * var osc = new Tone.Oscillator().connect(merge.left);\n * var noise = new Tone.Noise().connect(merge.right);\n * //starting our oscillators\n * noise.start();\n * osc.start();\n */\nexport class Merge extends ToneAudioNode<MergeOptions> {\n\n\tname = \"Merge\";\n\n\t/**\n\t *  The merger node for the two channels.\n\t */\n\tprivate _merger: ChannelMergerNode;\n\n\t/**\n\t * The output is the input channels combined into a sigle (multichannel) output\n\t */\n\toutput: AudioNode;\n\n\t/**\n\t * Multiple input connections combine into a single output.\n\t */\n\tinput: AudioNode;\n\n\tprotected _internalChannels = [];\n\n\tconstructor(channels?: Positive);\n\t// tslint:disable-next-line: unified-signatures\n\tconstructor(options?: Partial<MergeOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Merge.getDefaults(), arguments, [\"channels\"]));\n\t\tconst options = optionsFromArguments(Merge.getDefaults(), arguments, [\"channels\"]);\n\n\t\tthis._merger = this.output = this.input = this.context.createChannelMerger(options.channels);\n\n\t\t// @ts-ignore\n\t\tthis.numberOfInputs = options.channels;\n\t\t// @ts-ignore\n\t\tthis.numberOfOutputs = 1;\n\t}\n\n\tstatic getDefaults(): MergeOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tchannels: 2,\n\t\t\tnumberOfOutputs : 1,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._merger.disconnect();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { connectSeries, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { isNumber } from \"../../core/util/TypeCheck\";\nimport { Signal } from \"../../signal/Signal\";\n\ninterface FilterOptions extends ToneAudioNodeOptions {\n\ttype: BiquadFilterType;\n\tfrequency: Frequency;\n\trolloff: number;\n\tQ: Positive;\n\tdetune: Cents;\n\tgain: GainFactor;\n}\n\n/**\n *  @class  Tone.Filter is a filter which allows for all of the same native methods\n *          as the [BiquadFilterNode](http://webaudio.github.io/web-audio-api/#the-biquadfilternode-interface).\n *          Tone.Filter has the added ability to set the filter rolloff at -12\n *          (default), -24 and -48.\n *\n *  @constructor\n *  @extends {Tone.AudioNode}\n *  @param frequency The cutoff frequency of the filter.\n *  @param type The type of filter.\n *  @param rolloff The drop in decibels per octave after the cutoff frequency\n *  @example\n *  var filter = new Filter(200, \"highpass\");\n */\nexport class Filter extends ToneAudioNode<FilterOptions> {\n\n\tname = \"Filter\";\n\n\treadonly input = new Gain({ context: this.context });\n\treadonly output = new Gain({ context: this.context });\n\tprivate _filters: BiquadFilterNode[] = [];\n\n\t/**\n\t * The internal channels for channel routing changes\n\t */\n\tprotected _internalChannels = [this.input, ...this._filters, this.output];\n\n\t/**\n\t *  the rolloff value of the filter\n\t */\n\tprivate _rolloff!: number;\n\tprivate _type: BiquadFilterType;\n\n\t/**\n\t *  The Q or Quality of the filter\n\t */\n\treadonly Q: Signal<Positive>;\n\n\t/**\n\t *  The cutoff frequency of the filter.\n\t */\n\treadonly frequency: Signal<Frequency>;\n\n\t/**\n\t *  The detune parameter\n\t */\n\treadonly detune: Signal<Cents>;\n\n\t/**\n\t *  The gain of the filter, only used in certain filter types\n\t */\n\treadonly gain: Signal<Decibels>;\n\n\tconstructor(frequency?: Frequency, type?: BiquadFilterType, rolloff?: number);\n\tconstructor(options?: Partial<FilterOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Filter.getDefaults(), arguments, [\"frequency\", \"type\", \"rolloff\"]));\n\t\tconst options = optionsFromArguments(Filter.getDefaults(), arguments, [\"frequency\", \"type\", \"rolloff\"]);\n\n\t\tthis._filters = [];\n\n\t\tthis.Q = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.Q,\n\t\t});\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t});\n\t\tthis.detune = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune,\n\t\t});\n\t\tthis.gain = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"decibels\",\n\t\t\tvalue: options.gain,\n\t\t});\n\t\tthis._type = options.type;\n\t\tthis.rolloff = options.rolloff;\n\t\treadOnly(this, [\"detune\", \"frequency\", \"gain\", \"Q\"]);\n\t}\n\n\tstatic getDefaults(): FilterOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tQ: 1,\n\t\t\tdetune: 0,\n\t\t\tfrequency: 350,\n\t\t\tgain: 0,\n\t\t\trolloff: -12,\n\t\t\ttype: \"lowpass\" as BiquadFilterType,\n\t\t});\n\t}\n\n\t/**\n\t * The type of the filter. Types: \"lowpass\", \"highpass\",\n\t * \"bandpass\", \"lowshelf\", \"highshelf\", \"notch\", \"allpass\", or \"peaking\".\n\t */\n\tget type(): BiquadFilterType {\n\t\treturn this._type;\n\t}\n\tset type(type: BiquadFilterType) {\n\t\tconst types: BiquadFilterType[] = [\"lowpass\", \"highpass\", \"bandpass\",\n\t\t\t\"lowshelf\", \"highshelf\", \"notch\", \"allpass\", \"peaking\"];\n\t\tthis.assert(types.indexOf(type) !== -1, `Invalid filter type: ${type}`);\n\t\tthis._type = type;\n\t\tthis._filters.forEach(filter => filter.type = type);\n\t}\n\n\t/**\n\t * The rolloff of the filter which is the drop in db\n\t * per octave. Implemented internally by cascading filters.\n\t * Only accepts the values -12, -24, -48 and -96.\n\t */\n\tget rolloff(): number | string {\n\t\treturn this._rolloff;\n\t}\n\tset rolloff(rolloff: number | string) {\n\t\tconst rolloffNum = isNumber(rolloff) ? rolloff : parseInt(rolloff, 10);\n\t\tconst possibilities = [-12, -24, -48, -96];\n\t\tlet cascadingCount = possibilities.indexOf(rolloffNum);\n\t\t// check the rolloff is valid\n\t\tthis.assert(cascadingCount !== -1, `rolloff can only be ${possibilities.join(\", \")}`);\n\t\tcascadingCount += 1;\n\n\t\tthis._rolloff = rolloffNum;\n\t\tthis.input.disconnect();\n\t\tthis._filters.forEach(filter => filter.disconnect());\n\n\t\tthis._filters = new Array(cascadingCount);\n\t\tfor (let count = 0; count < cascadingCount; count++) {\n\t\t\tconst filter = this.context.createBiquadFilter();\n\t\t\tfilter.type = this._type;\n\t\t\tthis.frequency.connect(filter.frequency);\n\t\t\tthis.detune.connect(filter.detune);\n\t\t\tthis.Q.connect(filter.Q);\n\t\t\tthis.gain.connect(filter.gain);\n\t\t\tthis._filters[count] = filter;\n\t\t}\n\t\tthis._internalChannels = [this.input, ...this._filters, this.output];\n\t\tconnectSeries(...this._internalChannels);\n\t}\n\n\t/**\n\t * Get the frequency response curve. This curve represents how the filter\n\t * responses to frequencies between 20hz-20khz.\n\t * @param  len The number of values to return\n\t * @return The frequency response curve between 20-20kHz\n\t */\n\tgetFrequencyResponse(len: number = 128): Float32Array {\n\t\t// start with all 1s\n\t\tconst totalResponse = new Float32Array(len).map(() => 1);\n\t\tconst freqValues = new Float32Array(len);\n\t\tfor (let i = 0; i < len; i++) {\n\t\t\tconst norm = Math.pow(i / len, 2);\n\t\t\tconst freq = norm * (20000 - 20) + 20;\n\t\t\tfreqValues[i] = freq;\n\t\t}\n\t\tconst magValues = new Float32Array(len);\n\t\tconst phaseValues = new Float32Array(len);\n\t\tthis._filters.forEach(() => {\n\t\t\tconst filterClone = this.context.createBiquadFilter();\n\t\t\tfilterClone.type = this._type;\n\t\t\tfilterClone.Q.value = this.Q.value;\n\t\t\tfilterClone.frequency.value = this.frequency.value as number;\n\t\t\tfilterClone.gain.value = this.gain.value as number;\n\t\t\tfilterClone.getFrequencyResponse(freqValues, magValues, phaseValues);\n\t\t\tmagValues.forEach((val, i) => {\n\t\t\t\ttotalResponse[i] *= val;\n\t\t\t});\n\t\t});\n\t\treturn totalResponse;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._filters.forEach(filter => {\n\t\t\tfilter.disconnect();\n\t\t});\n\t\twritable(this, [\"detune\", \"frequency\", \"gain\", \"Q\"]);\n\t\tthis.frequency.dispose();\n\t\tthis.Q.dispose();\n\t\tthis.detune.dispose();\n\t\tthis.gain.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Filter } from \"../filter/Filter\";\n\ninterface MultibandSplitOptions extends ToneAudioNodeOptions {\n\tQ: Positive;\n\tlowFrequency: Frequency;\n\thighFrequency: Frequency;\n}\n\n/**\n *  Split the incoming signal into three bands (low, mid, high)\n *  with two crossover frequency controls.\n * ```\n *            +----------------------+\n *          +-> input < lowFrequency +>------------------> low\n *          | +----------------------+\n *          |\n *          | +--------------------------------------+\n * input +>-+-> lowFrequency < input < highFrequency +>--> mid\n *          | +--------------------------------------+\n *          |\n *          | +-----------------------+\n *          +-> highFrequency < input +>-----------------> high\n *            +-----------------------+\n * ```\n *\n *  @param lowFrequency the low/mid crossover frequency\n *  @param highFrequency the mid/high crossover frequency\n */\nexport class MultibandSplit extends ToneAudioNode<MultibandSplitOptions> {\n\n\tname = \"MultibandSplit\";\n\n\t/**\n\t *  the input\n\t */\n\treadonly input = new Gain({ context: this.context });\n\n\t/**\n\t *  The low band.\n\t */\n\treadonly low = new Filter({\n\t\tcontext: this.context,\n\t\tfrequency: 0,\n\t\ttype: \"lowpass\",\n\t});\n\n\t/**\n\t *  the lower filter of the mid band\n\t */\n\tprivate _lowMidFilter = new Filter({\n\t\tcontext: this.context,\n\t\tfrequency: 0,\n\t\ttype: \"highpass\",\n\t});\n\n\t/**\n\t *  The mid band output.\n\t */\n\treadonly mid = new Filter({\n\t\tcontext: this.context,\n\t\tfrequency: 0,\n\t\ttype: \"lowpass\",\n\t});\n\n\t/**\n\t *  The high band output.\n\t */\n\treadonly high = new Filter({\n\t\tcontext: this.context,\n\t\tfrequency: 0,\n\t\ttype: \"highpass\",\n\t});\n\n\t/**\n\t * No output node. use either low/mid/high\n\t */\n\toutput = undefined;\n\n\t/**\n\t *  The low/mid crossover frequency.\n\t */\n\treadonly lowFrequency: Signal<Frequency>;\n\n\t/**\n\t *  The mid/high crossover frequency.\n\t */\n\treadonly highFrequency: Signal<Frequency>;\n\n\tprotected _internalChannels = [this.input, this.low, this.mid, this.high];\n\n\t/**\n\t *  The Q or Quality of the filter\n\t */\n\treadonly Q: Signal<Positive>;\n\n\tconstructor(lowFrequency?: Frequency, highFrequency?: Frequency);\n\tconstructor(options?: Partial<MultibandSplitOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(MultibandSplit.getDefaults(), arguments, [\"lowFrequency\", \"highFrequency\"]));\n\t\tconst options = optionsFromArguments(MultibandSplit.getDefaults(), arguments, [\"lowFrequency\", \"highFrequency\"]);\n\n\t\tthis.lowFrequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.lowFrequency,\n\t\t});\n\n\t\tthis.highFrequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.highFrequency,\n\t\t});\n\n\t\tthis.Q = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.Q,\n\t\t});\n\n\t\tthis.input.fan(this.low, this.high);\n\t\tthis.input.chain(this._lowMidFilter, this.mid);\n\t\t// the frequency control signal\n\t\tthis.lowFrequency.fan(this.low.frequency, this._lowMidFilter.frequency);\n\t\tthis.highFrequency.fan(this.mid.frequency, this.high.frequency);\n\t\t// the Q value\n\t\tthis.Q.connect(this.low.Q);\n\t\tthis.Q.connect(this._lowMidFilter.Q);\n\t\tthis.Q.connect(this.mid.Q);\n\t\tthis.Q.connect(this.high.Q);\n\n\t\treadOnly(this, [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n\t}\n\n\tstatic getDefaults(): MultibandSplitOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tQ: 1,\n\t\t\thighFrequency: 2500,\n\t\t\tlowFrequency: 400,\n\t\t});\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\twritable(this, [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n\t\tthis.low.dispose();\n\t\tthis._lowMidFilter.dispose();\n\t\tthis.mid.dispose();\n\t\tthis.high.dispose();\n\t\tthis.lowFrequency.dispose();\n\t\tthis.highFrequency.dispose();\n\t\tthis.Q.dispose();\n\t\treturn this;\n\t}\n\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { MultibandSplit } from \"../channel/MultibandSplit\";\n\ninterface EQ3Options extends ToneAudioNodeOptions {\n\tlow: Decibels;\n\tmid: Decibels;\n\thigh: Decibels;\n\tlowFrequency: Frequency;\n\thighFrequency: Frequency;\n}\n\nexport class EQ3 extends ToneAudioNode<EQ3Options> {\n\tname = \"EQ3\";\n\n\t/**\n\t *  the input\n\t */\n\treadonly input: MultibandSplit;\n\n\t/**\n\t *  the output\n\t */\n\treadonly output = new Gain({ context: this.context });\n\n\tprivate _multibandSplit: MultibandSplit;\n\n\t/**\n\t *  The gain for the lower signals\n\t */\n\tprivate _lowGain: Gain<Decibels>;\n\n\t/**\n\t *  The gain for the mid signals\n\t */\n\tprivate _midGain: Gain<Decibels>;\n\n\t/**\n\t *  The gain for the high signals\n\t */\n\tprivate _highGain: Gain<Decibels>;\n\n\t/**\n\t * The gain in decibels of the low part\n\t */\n\treadonly low: Param<Decibels>;\n\n\t/**\n\t * The gain in decibels of the mid part\n\t */\n\treadonly mid: Param<Decibels>;\n\n\t/**\n\t * The gain in decibels of the high part\n\t */\n\treadonly high: Param<Decibels>;\n\n\t/**\n\t *  The Q value for all of the filters.\n\t */\n\treadonly Q: Signal<Positive>;\n\n\t/**\n\t *  The low/mid crossover frequency.\n\t */\n\treadonly lowFrequency: Signal<Frequency>;\n\n\t/**\n\t *  The mid/high crossover frequency.\n\t */\n\treadonly highFrequency: Signal<Frequency>;\n\n\tprotected _internalChannels: ToneAudioNode[] = [];\n\n\tconstructor(lowLevel?: Decibels, midLevel?: Decibels, highLevel?: Decibels);\n\tconstructor(options: Partial<EQ3Options>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(EQ3.getDefaults(), arguments, [\"low\", \"mid\", \"high\"]));\n\t\tconst options = optionsFromArguments(EQ3.getDefaults(), arguments, [\"low\", \"mid\", \"high\"]);\n\n\t\tthis.input = this._multibandSplit = new MultibandSplit({\n\t\t\tcontext: this.context,\n\t\t\thighFrequency: options.highFrequency,\n\t\t\tlowFrequency: options.lowFrequency,\n\t\t});\n\n\t\tthis._lowGain = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: options.low,\n\t\t\tunits: \"decibels\",\n\t\t});\n\n\t\tthis._midGain = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: options.mid,\n\t\t\tunits: \"decibels\",\n\t\t});\n\n\t\tthis._highGain = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: options.high,\n\t\t\tunits: \"decibels\",\n\t\t});\n\n\t\tthis.low = this._lowGain.gain;\n\t\tthis.mid = this._midGain.gain;\n\t\tthis.high = this._highGain.gain;\n\t\tthis.Q = this._multibandSplit.Q;\n\t\tthis.lowFrequency = this._multibandSplit.lowFrequency;\n\t\tthis.highFrequency\t= this._multibandSplit.highFrequency;\n\n\t\t// the frequency bands\n\t\tthis._multibandSplit.low.chain(this._lowGain, this.output);\n\t\tthis._multibandSplit.mid.chain(this._midGain, this.output);\n\t\tthis._multibandSplit.high.chain(this._highGain, this.output);\n\n\t\treadOnly(this, [\"low\", \"mid\", \"high\", \"lowFrequency\", \"highFrequency\"]);\n\t\tthis._internalChannels = [this._multibandSplit, this.output];\n\t}\n\n\tstatic getDefaults(): EQ3Options {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\thigh : 0,\n\t\t\thighFrequency : 2500,\n\t\t\tlow : 0,\n\t\t\tlowFrequency : 400,\n\t\t\tmid : 0,\n\t\t});\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\twritable(this, [\"low\", \"mid\", \"high\", \"lowFrequency\", \"highFrequency\"]);\n\t\tthis._multibandSplit.dispose();\n\t\tthis.lowFrequency.dispose();\n\t\tthis.highFrequency.dispose();\n\t\tthis._lowGain.dispose();\n\t\tthis._midGain.dispose();\n\t\tthis._highGain.dispose();\n\t\tthis.low.dispose();\n\t\tthis.mid.dispose();\n\t\tthis.high.dispose();\n\t\tthis.Q.dispose();\n\t\treturn this;\n\t}\n\n}\n","export { getContext, setContext } from \"./core/Global\";\nexport * from \"./core/index\";\nexport * from \"./source/index\";\nexport * from \"./instrument/index\";\nexport * from \"./event/index\";\nexport * from \"./effect/index\";\nexport * from \"./component/index\";\n\nimport { getContext } from \"./core/Global\";\n/**\n *  The current audio context time\n */\nexport function now(): Seconds {\n\treturn getContext().now();\n}\n\n/**\n * The Transport object belonging to the global Tone.js Context\n */\n// tslint:disable-next-line: variable-name\nexport const Transport = getContext().transport;\n\n/**\n * The Destination (output) belonging to the global Tone.js Context\n */\n// tslint:disable-next-line: variable-name\nexport const Destination = getContext().destination;\n","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n"],"sourceRoot":""}