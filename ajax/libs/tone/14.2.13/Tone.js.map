{"version":3,"sources":["webpack://Tone/webpack/universalModuleDefinition","webpack://Tone/webpack/bootstrap","webpack://Tone/./Tone/version.ts","webpack://Tone/./Tone/core/context/AudioContext.ts","webpack://Tone/./Tone/core/clock/Ticker.ts","webpack://Tone/./Tone/core/util/TypeCheck.ts","webpack://Tone/./Tone/core/util/Defaults.ts","webpack://Tone/./Tone/core/util/Debug.ts","webpack://Tone/./Tone/core/Tone.ts","webpack://Tone/./Tone/core/util/Emitter.ts","webpack://Tone/./Tone/core/util/Timeline.ts","webpack://Tone/./Tone/core/context/ContextInitialization.ts","webpack://Tone/./Tone/core/context/Context.ts","webpack://Tone/./Tone/core/Global.ts","webpack://Tone/./Tone/core/context/OfflineContext.ts","webpack://Tone/./Tone/core/type/Conversions.ts","webpack://Tone/./Tone/core/type/TimeBase.ts","webpack://Tone/./Tone/core/type/Time.ts","webpack://Tone/./Tone/core/type/Frequency.ts","webpack://Tone/./Tone/core/type/TransportTime.ts","webpack://Tone/./Tone/core/context/ToneWithContext.ts","webpack://Tone/./Tone/core/context/Param.ts","webpack://Tone/./Tone/core/context/ToneAudioNode.ts","webpack://Tone/./Tone/core/util/Interface.ts","webpack://Tone/./Tone/core/context/Gain.ts","webpack://Tone/./Tone/core/context/ToneAudioBuffer.ts","webpack://Tone/./Tone/core/context/Offline.ts","webpack://Tone/./Tone/core/context/ToneAudioBuffers.ts","webpack://Tone/./Tone/core/context/Delay.ts","webpack://Tone/./Tone/core/util/StateTimeline.ts","webpack://Tone/./Tone/core/clock/TickSignal.ts","webpack://Tone/./Tone/core/clock/TickSource.ts","webpack://Tone/./Tone/core/clock/Clock.ts","webpack://Tone/./Tone/core/type/Ticks.ts","webpack://Tone/./Tone/core/type/Midi.ts","webpack://Tone/./Tone/core/util/Draw.ts","webpack://Tone/./Tone/core/util/IntervalTimeline.ts","webpack://Tone/./Tone/component/channel/Volume.ts","webpack://Tone/./Tone/core/context/Destination.ts","webpack://Tone/./Tone/core/clock/TransportEvent.ts","webpack://Tone/./Tone/core/clock/TransportRepeatEvent.ts","webpack://Tone/./Tone/core/clock/Transport.ts","webpack://Tone/./Tone/source/Source.ts","webpack://Tone/./Tone/source/OneShotSource.ts","webpack://Tone/./Tone/source/buffer/BufferSource.ts","webpack://Tone/./Tone/source/Noise.ts","webpack://Tone/./Tone/signal/Signal.ts","webpack://Tone/./Tone/source/oscillator/OscillatorNode.ts","webpack://Tone/./Tone/source/oscillator/Oscillator.ts","webpack://Tone/./Tone/signal/SignalOperator.ts","webpack://Tone/./Tone/signal/WaveShaper.ts","webpack://Tone/./Tone/signal/AudioToGain.ts","webpack://Tone/./Tone/signal/Multiply.ts","webpack://Tone/./Tone/source/oscillator/AMOscillator.ts","webpack://Tone/./Tone/source/oscillator/FMOscillator.ts","webpack://Tone/./Tone/source/oscillator/PulseOscillator.ts","webpack://Tone/./Tone/source/oscillator/FatOscillator.ts","webpack://Tone/./Tone/source/oscillator/PWMOscillator.ts","webpack://Tone/./Tone/source/oscillator/OmniOscillator.ts","webpack://Tone/./Tone/source/buffer/Player.ts","webpack://Tone/./Tone/signal/Add.ts","webpack://Tone/./Tone/signal/Abs.ts","webpack://Tone/./Tone/signal/GainToAudio.ts","webpack://Tone/./Tone/signal/Negate.ts","webpack://Tone/./Tone/signal/Subtract.ts","webpack://Tone/./Tone/signal/Zero.ts","webpack://Tone/./Tone/component/envelope/Envelope.ts","webpack://Tone/./Tone/component/envelope/AmplitudeEnvelope.ts","webpack://Tone/./Tone/instrument/Instrument.ts","webpack://Tone/./Tone/instrument/Monophonic.ts","webpack://Tone/./Tone/instrument/Synth.ts","webpack://Tone/./Tone/instrument/Sampler.ts","webpack://Tone/./Tone/instrument/PolySynth.ts","webpack://Tone/./Tone/instrument/MembraneSynth.ts","webpack://Tone/./Tone/event/ToneEvent.ts","webpack://Tone/./Tone/event/Part.ts","webpack://Tone/./Tone/event/Sequence.ts","webpack://Tone/./Tone/component/channel/CrossFade.ts","webpack://Tone/./Tone/effect/Effect.ts","webpack://Tone/./Tone/effect/FeedbackEffect.ts","webpack://Tone/./Tone/effect/FeedbackDelay.ts","webpack://Tone/./Tone/effect/Convolver.ts","webpack://Tone/./Tone/component/analysis/Analyser.ts","webpack://Tone/./Tone/component/channel/Merge.ts","webpack://Tone/./Tone/component/filter/Filter.ts","webpack://Tone/./Tone/component/channel/MultibandSplit.ts","webpack://Tone/./Tone/component/filter/EQ3.ts","webpack://Tone/./Tone/component/dynamics/Compressor.ts","webpack://Tone/./Tone/index.ts"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","globalContext","theWindow","hasAudioContext","getAudioContext","context","AudioContext","TONE_AUDIO_CONTEXT","Ticker","callback","type","updateInterval","_callback","_type","_updateInterval","_createClock","_createWorker","blob","Blob","toFixed","blobUrl","URL","createObjectURL","worker","Worker","onmessage","bind","_worker","_createTimeout","_this","_timeout","setTimeout","e","_disposeClock","clearTimeout","terminate","interval","Math","max","postMessage","dispose","isUndef","arg","isDefined","isFunction","isNumber","isObject","toString","constructor","isBoolean","isArray","Array","isString","isNote","test","deepMerge","target","sources","_i","arguments","length","source","shift","key","assign","_a","_b","apply","concat","optionsFromArguments","defaults","argsArray","keys","objKey","opts","args","from","Reflect","has","some","splice","indexOf","defaultArg","given","fallback","omitFromObject","obj","omit","forEach","prop","assert","statement","error","Error","Tone_Tone","Tone","debug","_wasDisposed","getDefaults","log","TONE_DEBUG_CLASS","unshift","console","version","Emitter_Emitter","_super","Emitter","__extends","on","event","split","eventName","_events","push","once","boundCallback","off","eventList","emit","slice","len","mixin","constr","getOwnPropertyDescriptor","undefined","Timeline_Timeline","Timeline","_timeline","options","memory","Timeline_extends","Infinity","add","time","valueOf","index","_search","diff","remove","param","peek","getAfter","getBefore","cancel","after","cancelBefore","previousEvent","beginning","end","midPoint","floor","event_1","nextEvent","_iterate","lowerBound","upperBound","forEachBefore","forEachAfter","forEachBetween","startTime","endTime","forEachFrom","forEachAtTime","notifyNewContext","onContextInit","cb","notifyCloseContext","onContextClose","Context_Context","Context","_constants","Map","_timeouts","_timeoutIds","_initialized","_context","_latencyHint","latencyHint","lookAhead","_ticker","clockSource","_timeoutLoop","addEventListener","state","Context_extends","initialize","ctx","createAnalyser","createOscillator","createBufferSource","createBiquadFilter","createBuffer","numberOfChannels","sampleRate","createChannelMerger","numberOfInputs","createChannelSplitter","numberOfOutputs","createConstantSource","createConvolver","createDelay","maxDelayTime","createDynamicsCompressor","createGain","createIIRFilter","feedforward","feedback","createPanner","createPeriodicWave","real","imag","constraints","createStereoPanner","createWaveShaper","decodeAudioData","audioData","currentTime","listener","_transport","t","_destination","hint","lookAheadValue","now","resume","isAudioContext","Promise","resolve","close","sent","getConstant","val","buffer","arr","getChannelData","constant","channelCount","channelCountMode","loop","start","set","map","disconnect","firstEvent","fn","timeout","id","dummyContext","destination","transport","Global_globalContext","getContext","setContext","Global_start","TONE_SILENCE_LOGGING","prefix","printString","OfflineContext","channels","duration","isOfflineAudioContext","OfflineAudioContext","_currentTime","_duration","OfflineContext_extends","render","startRendering","dbToGain","db","pow","gainToDb","gain","LN10","intervalToFrequencyRatio","A4","ftom","frequency","round","log2","ftomf","mtof","midi","TimeBase_TimeBaseClass","TimeBaseClass","units","defaultUnits","_val","_units","_expressions","_getExpressions","TimeBase_extends","hz","method","_frequencyToUnits","parseFloat","regexp","_ticksToUnits","parseInt","_beatsToUnits","_getTimeSignature","dot","numericValue","scalar","number","_secondsToUnits","samples","tr","q","total","fromType","_noArg","trim","typeName","quantity","expr","matching","match","freq","beats","_getBpm","seconds","ticks","_getPPQ","_now","bpm","timeSignature","PPQ","toSeconds","toTicks","toFrequency","toMidi","toSamples","toMilliseconds","Time_TimeClass","TimeClass","Time_extends","capture","quantize","quantTo","nextSubdivision","subdiv","percent","subdivision","toNotation","testNotations","power","closest","closestSeconds","notation","notationSeconds","abs","toBarsBeatsSixteenths","quarterTime","quarters","measures","sixteenths","sixteenthString","join","Time","Frequency_FrequencyClass","FrequencyClass","Frequency_extends","setA4","note","pitch","octave","noteNumber","noteToScaleIndex","toLowerCase","transpose","harmonize","intervals","toNote","scaleIndexToNote","cbb","c#","cx","dbb","d#","dx","ebb","eb","e#","ex","fbb","fb","f","f#","fx","gbb","gb","g","g#","gx","abb","ab","a","a#","ax","bbb","bb","b","b#","bx","Frequency","TransportTimeClass","TransportTime_extends","TransportTime","ToneWithContext_ToneWithContext","ToneWithContext","defaultContext","ToneWithContext_extends","immediate","attribute","member","setValueAtTime","props","Param_Param","Param","overridden","_minOutput","isAudioParam","_param","input","_initialValue","defaultValue","convert","_toType","Param_extends","getValueAtTime","_fromType","cancelScheduledValues","minValue","maxValue","_is","min","computedTime","isFinite","JSON","stringify","before","beforeValue","previous","_linearInterpolate","_exponentialInterpolate","previousVal","_exponentialApproach","setRampPoint","currentVal","cancelAndHoldAtTime","linearRampToValueAtTime","exponentialRampToValueAtTime","exponentialRampTo","rampTime","linearRampTo","targetRampTo","exponentialApproachValueAtTime","timeConstant","setTargetAtTime","setValueCurveAtTime","values","scaling","startingValue","segTime","valueAtTime","sampleTime","rampTo","t0","v0","v1","exp","t1","ToneAudioNode_ToneAudioNode","ToneAudioNode","_internalChannels","ToneAudioNode_extends","output","_isAudioNode","node","isAudioNode","_getInternalNodes","nodeList","_setChannelProperties","channelInterpretation","_getChannelProperties","connect","outputNum","inputNum","toDestination","toMaster","warn","chain","nodes","connectSeries","fan","first","reduce","prev","current","srcNode","dstNode","outputNumber","inputNumber","readOnly","str","writable","noOp","Gain_Gain","Gain","_gainNode","Gain_extends","ToneAudioBuffer_ToneAudioBuffer","ToneAudioBuffer","onload","reverse","url","isAudioBuffer","load","catch","onerror","ToneAudioBuffer_extends","_buffer","loaded","_reversed","_reverse","promise","downloads","audioBuffer","e_1","fromArray","array","isMultidimensional","multiChannelArray","copyToChannel","toMono","chanNum","toArray","outputArray","Float32Array","numChannels_1","channel","channelArray","sample","ret","startSamples","endSamples","retBuffer","subarray","rev","fromUrl","matches","extensions","extension","extensions_1","ext","supportsType","replace","fetch","baseUrl","response","ok","arrayBuffer","document","createElement","canPlayType","Offline","originalContext","bufferPromise","ToneAudioBuffers_ToneAudioBuffers","ToneAudioBuffers","_buffers","_loadingCount","urls","_bufferLoaded","ToneAudioBuffers_extends","every","clear","Delay_Delay","Delay","maxDelayInSeconds","maxDelay","delayTime","_delayNode","Delay_extends","StateTimeline","initial","_initial","StateTimeline_extends","setStateAtTime","getLastState","getNextState","event_2","TickSignal_TickSignal","TickSignal","_sig","offset","_multiplier","multiplier","TickSignal_extends","computedValue","prevEvent","segments","rampVal","ticksUntilTime","_getTicksUntilEvent","computedVal","segmentDur","val0","val1","onTheLineEvent","getTicksAtTime","getDurationOfTicks","currentTick","getTimeOfTick","tick","delta","k","sqrt","sol1","ticksToTime","when","timeToTicks","computedDuration","startTicks","TickSource_TickSource","TickSource","_state","_tickOffset","setTicksAtTime","TickSource_extends","stop","pause","stopEvent","tmpEvent","lastState","elapsedTicks","periodStartTime","offsetEvent","getSecondsAtTime","elapsedSeconds","getStateAtTime","absoluteTicks","forEachTickBetween","computedStartTime","computedEndTime","lastStateEvent","maxStartTime","nextTickTime","Clock_Clock","Clock","_lastUpdate","_boundLoop","_loop","_tickSource","Clock_extends","ceil","TicksClass","Ticks_extends","Ticks","Midi_MidiClass","MidiClass","Midi_extends","Midi","Draw_Draw","Draw","expiration","anticipation","_boundDrawLoop","_drawLoop","_animationFrame","Draw_extends","schedule","requestAnimationFrame","cancelAnimationFrame","IntervalTimeline_IntervalTimeline","IntervalTimeline","_root","_length","IntervalTimeline_extends","IntervalNode","insert","updateHeight","updateMax","_rebalance","parent","results","search","results_1","_removeNode","_setRoot","_replaceNodeInParent","replacement","isLeftChild","left","right","temp","getBalance","_rotateLeft","pivotNode","_rotateRight","balance","low","allNodes_1","traverse","searchAfter","high","_left","_right","height","point","Volume_Volume","Volume","volume","_unmutedVolume","mute","Volume_extends","Destination_Destination","Destination","rawContext","Destination_extends","TransportEvent_TransportEvent","TransportEvent","_eventId","_once","invoke","TransportRepeatEvent_TransportRepeatEvent","TransportRepeatEvent","_currentId","_nextId","_nextTick","_boundRestart","_restart","_interval","TransportRepeatEvent_extends","_createEvents","scheduleOnce","Transport_Transport","Transport","_loopStart","_loopEnd","_scheduledEvents","_repeatedEvents","_syncedSignals","_swingAmount","_ppq","ppq","_clock","_processTick","_bindClockEvents","_timeSignature","_swingTicks","Transport_extends","loopEnd","loopStart","swing","swingSubdivision","tickTime","progress","amount","sin","PI","_addEvent","scheduleRepeat","eventId","item","timeline","computedAfter","offsetTicks","toggle","timeSig","startPosition","endPosition","setLoopPoints","remainingTicks","syncSignal","signal","ratio","computedFreq","ratioSignal","unsyncSignal","syncedSignal","Source_Source","Source","_synced","_scheduled","_syncedStart","_syncedStop","_volume","onstop","Source_extends","_clampToCurrentTime","restart","sched","_start","_stop","sync","stateEvent","startOffset","unsync","OneShotSource_OneShotSource","OneShotSource","onended","_startTime","_stopTime","_fadeIn","fadeIn","_fadeOut","fadeOut","_curve","curve","OneShotSource_extends","_startGain","fadeInTime","_stopGain","cancelStop","fadeOutTime","additionalTail","_stopSource","_onended","BufferSource_ToneBufferSource","ToneBufferSource","_source","_sourceStarted","_sourceStopped","playbackRate","BufferSource_extends","computedOffset","computedDur","Noise_Noise","Noise","_playbackRate","Noise_extends","_noiseBuffers","rate","random","_noiseCache","brown","pink","white","channelNum","lastOut","b0","b1","b2","b3","b4","b5","b6","Signal_Signal","Signal","override","_constantSource","Signal_extends","connectSignal","OscillatorNode_ToneOscillatorNode","ToneOscillatorNode","_oscillator","detune","OscillatorNode_extends","setPeriodicWave","periodicWave","Oscillator_Oscillator","Oscillator","_partials","partials","_partialCount","partialCount","baseType","phase","Oscillator_extends","oscillator","_wave","syncFrequency","unsyncFrequency","_getCachedPeriodicWave","oscProps","_periodicWaveCache","find","description","_phase","arrayA","arrayB","element","isBasicType","cache","_getRealImaginary","partial","exec","periodicWaveSize","fftSize","piFactor","TypeError","cos","_inverseFFT","sum","_getInitialValue","twoPi","SignalOperator_SignalOperator","SignalOperator","SignalOperator_extends","WaveShaper_WaveShaper","WaveShaper","_shaper","mapping","setMap","WaveShaper_extends","normalized","oversample","oversampling","isOverSampleType","includes","AudioToGain_AudioToGain","AudioToGain","_norm","x","AudioToGain_extends","Multiply_Multiply","Multiply","_mult","factor","Multiply_extends","AMOscillator_AMOscillator","AMOscillator","_modulationScale","_modulationNode","_carrier","_modulator","modulationType","harmonicity","AMOscillator_extends","FMOscillator_FMOscillator","FMOscillator","modulationIndex","FMOscillator_extends","PulseOscillator_PulseOscillator","PulseOscillator","_widthGate","_thresh","width","_sawtooth","PulseOscillator_extends","FatOscillator_FatOscillator","FatOscillator","_oscillators","_spread","spread","count","FatOscillator_extends","_forEach","osc","iterator","start_1","step_1","PWMOscillator_PWMOscillator","PWMOscillator","sourceType","_scale","_pulse","modulationFrequency","PWMOscillator_extends","OmniOscillatorSourceMap","am","fat","fm","pulse","pwm","OmniOscillator_OmniOscillator","OmniOscillator","OmniOscillator_extends","_sourceType","substr","_createNewOscillator","_getOscType","oscType","OscConstructor","oldOsc_1","blockTime","sType","mType","Player_Player","Player","_activeSources","Set","_onload","autostart","Player_extends","_onSourceEnd","delete","size","comptuedOffset","origDuration","implicitEnd","seek","Add_Add","Add","_sum","addend","Add_extends","Abs_Abs","Abs","_abs","Abs_extends","GainToAudio_GainToAudio","GainToAudio","GainToAudio_extends","Negate_Negate","Negate","_multiply","Negate_extends","Subtract_Subtract","Subtract","_neg","subtrahend","Subtract_extends","Zero_Zero","Zero","_gain","Zero_extends","Envelope_Envelope","Envelope","attack","decay","sustain","release","attackCurve","releaseCurve","decayCurve","Envelope_extends","_getCurve","direction","curveName","EnvelopeCurves","_setCurve","curveDef","_attackCurve","_releaseCurve","_decayCurve","triggerAttack","velocity","currentValue","decayValue","decayStart","triggerRelease","triggerAttackRelease","cosineCurve","rippleCurve","curveLen","sineWave","stairsCurve","sineCurve","bounceCurve","invertCurve","out","j","bounce","In","Out","cosine","exponential","linear","ripple","sine","step","AmplitudeEnvelope_AmplitudeEnvelope","AmplitudeEnvelope","AmplitudeEnvelope_extends","Instrument_Instrument","Instrument","_original_triggerAttack","_original_triggerRelease","Instrument_extends","_syncMethod","timePosition","originalMethod","Monophonic_Monophonic","Monophonic","portamento","onsilence","Monophonic_extends","_triggerEnvelopeAttack","setNote","_triggerEnvelopeRelease","getLevelAtTime","envelope","computedFrequency","portTime","Synth_Synth","Synth","Synth_extends","computedAttack","computedDecay","Sampler_Sampler","Sampler","urlMap","mid","Sampler_extends","_findClosest","notes","difference","closestNote","releaseAll","PolySynth_PolySynth","PolySynth","_availableVoices","_activeVoices","_voices","voice","polyphony","PolySynth_extends","_getActiveVoice","_makeVoiceAvailable","activeVoiceIndex","findIndex","_getNextAvailableVoice","_triggerAttack","midiNote","_triggerRelease","_scheduleEvent","disposed","durationSeconds","v","MembraneSynth_MembraneSynth","MembraneSynth","pitchDecay","octaves","MembraneSynth_extends","hertz","maxNote","ToneEvent_ToneEvent","ToneEvent","_startOffset","_probability","probability","_humanize","humanize","ToneEvent_extends","_rescheduleEvents","startTick","_getLoopDuration","_tick","prob","variation","reschedulTime","lastEvent","loopDuration","Part_Part","Part","events","Part_extends","computedOffset_1","_startNote","at","timeInTicks","result","next","done","_restartEvent","_setAll","attr","_testLoopBoundries","Sequence_Sequence","Sequence","_part","_seqCallback","_eventsArray","_subdivision","Sequence_extends","_createSequence","_eventsUpdated","_indexTime","Proxy","_rescheduleSequence","sequence","eventOffset","CrossFade_CrossFade","CrossFade","_panner","_split","_g2a","fade","pan","CrossFade_extends","Effect_Effect","Effect","_dryWet","wet","effectSend","effectReturn","Effect_extends","connectEffect","effect","FeedbackEffect_FeedbackEffect","FeedbackEffect","_feedbackGain","FeedbackEffect_extends","FeedbackDelay_FeedbackDelay","FeedbackDelay","FeedbackDelay_extends","Convolver_Convolver","Convolver","_convolver","normalize","Convolver_extends","buff","norm","Analyser_Analyser","Analyser","_analyser","Analyser_extends","smoothing","getValue","getFloatFrequencyData","getFloatTimeDomainData","frequencyBinCount","smoothingTimeConstant","Merge_Merge","Merge","_merger","Merge_extends","Filter_Filter","Filter","_filters","Q","rolloff","Filter_extends","filter","_rolloff","rolloffNum","possibilities","cascadingCount","getFrequencyResponse","totalResponse","freqValues","magValues","phaseValues","filterClone","MultibandSplit_MultibandSplit","MultibandSplit","_lowMidFilter","lowFrequency","highFrequency","MultibandSplit_extends","EQ3_EQ3","EQ3","_multibandSplit","_lowGain","_midGain","_highGain","EQ3_extends","Compressor_Compressor","Compressor","_compressor","threshold","knee","Compressor_extends","reduction","Tone_now","Tone_Transport","Tone_Destination"],"mappings":"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","file":"Tone.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Tone\"] = factory();\n\telse\n\t\troot[\"Tone\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","export const version: string = \"14.2.13\";\n","/**\n * Either the online or offline audio context\n */\nexport type AnyAudioContext = AudioContext | OfflineAudioContext;\n\n/**\n * Interface for things that Tone.js adds to the window\n */\ninterface ToneWindow extends Window {\n\tTONE_AUDIO_CONTEXT?: AnyAudioContext;\n\tTONE_SILENCE_LOGGING?: boolean;\n\tTONE_DEBUG_CLASS?: string;\n}\n\n/**\n * A reference to the window object\n */\nexport const theWindow: ToneWindow | null = typeof self === \"object\" ? self : null;\n\n/**\n * If the browser has a window object which has an AudioContext\n */\nexport const hasAudioContext = theWindow &&\n\t(theWindow.hasOwnProperty(\"AudioContext\") || theWindow.hasOwnProperty(\"webkitAudioContext\"));\n\n/**\n * The global audio context which is getable and assignable through\n * getAudioContext and setAudioContext\n */\nlet globalContext: AnyAudioContext;\n\n// if it was created already, use that one\n// this enables multiple versions of Tone.js to run on the same page.\nif (theWindow && theWindow.TONE_AUDIO_CONTEXT) {\n\tglobalContext = theWindow.TONE_AUDIO_CONTEXT;\n}\n\n/**\n * Returns the default system-wide AudioContext\n */\nexport function getAudioContext(): AnyAudioContext {\n\tif (!globalContext && hasAudioContext) {\n\t\tsetAudioContext(new AudioContext());\n\t}\n\treturn globalContext;\n}\n\n/**\n * Set the default audio context\n */\nexport function setAudioContext(context: AnyAudioContext): void {\n\tglobalContext = context;\n\tif (theWindow) {\n\t\ttheWindow.TONE_AUDIO_CONTEXT = globalContext;\n\t}\n}\n","import { Seconds } from \"../type/Units\";\n\nexport type TickerClockSource = \"worker\" | \"timeout\" | \"offline\";\n\n/**\n * A class which provides a reliable callback using either\n * a Web Worker, or if that isn't supported, falls back to setTimeout.\n */\nexport class Ticker {\n\n\t/**\n\t * Either \"worker\" or \"timeout\" or \"offline\"\n\t */\n\tprivate _type: TickerClockSource;\n\n\t/**\n\t * The update interval of the worker\n\t */\n\tprivate _updateInterval: Seconds;\n\n\t/**\n\t * The callback to invoke at regular intervals\n\t */\n\tprivate _callback: () => void;\n\n\t/**\n\t * track the callback interval\n\t */\n\tprivate _timeout!: number;\n\n\t/**\n\t * private reference to the worker\n\t */\n\tprivate _worker!: Worker;\n\n\tconstructor(callback: () => void, type: TickerClockSource, updateInterval: Seconds) {\n\n\t\tthis._callback = callback;\n\t\tthis._type = type;\n\t\tthis._updateInterval = updateInterval;\n\n\t\t// create the clock source for the first time\n\t\tthis._createClock();\n\t}\n\n\t/**\n\t *  Generate a web worker\n\t */\n\tprivate _createWorker(): void {\n\n\t\tconst blob = new Blob([\n\t\t\t// the initial timeout time\n\t\t\t`var timeoutTime =  ${(this._updateInterval * 1000).toFixed(1)};\n\t\t\t// onmessage callback\n\t\t\tself.onmessage = function(msg){\n\t\t\t\ttimeoutTime = parseInt(msg.data);\n\t\t\t};\n\t\t\t// the tick function which posts a message\n\t\t\t// and schedules a new tick\n\t\t\tfunction tick(){\n\t\t\t\tsetTimeout(tick, timeoutTime);\n\t\t\t\tself.postMessage('tick');\n\t\t\t}\n\t\t\t// call tick initially\n\t\t\ttick();`,\n\t\t]);\n\t\tconst blobUrl = URL.createObjectURL(blob);\n\t\tconst worker = new Worker(blobUrl);\n\n\t\tworker.onmessage = this._callback.bind(this);\n\n\t\tthis._worker = worker;\n\t}\n\n\t/**\n\t * Create a timeout loop\n\t */\n\tprivate _createTimeout(): void {\n\t\tthis._timeout = setTimeout(()  => {\n\t\t\tthis._createTimeout();\n\t\t\tthis._callback();\n\t\t}, this._updateInterval * 1000);\n\t}\n\n\t/**\n\t * Create the clock source.\n\t */\n\tprivate _createClock(): void {\n\t\tif (this._type === \"worker\") {\n\t\t\ttry {\n\t\t\t\tthis._createWorker();\n\t\t\t} catch (e) {\n\t\t\t\t// workers not supported, fallback to timeout\n\t\t\t\tthis._type = \"timeout\";\n\t\t\t\tthis._createClock();\n\t\t\t}\n\t\t} else if (this._type === \"timeout\") {\n\t\t\tthis._createTimeout();\n\t\t}\n\t}\n\n\t/**\n\t * Clean up the current clock source\n\t */\n\tprivate _disposeClock(): void {\n\t\tif (this._timeout) {\n\t\t\tclearTimeout(this._timeout);\n\t\t\tthis._timeout = 0;\n\t\t}\n\t\tif (this._worker) {\n\t\t\tthis._worker.terminate();\n\t\t\tthis._worker.onmessage = null;\n\t\t}\n\t}\n\n\t/**\n\t * The rate in seconds the ticker will update\n\t */\n\tget updateInterval(): Seconds {\n\t\treturn this._updateInterval;\n\t}\n\tset updateInterval(interval: Seconds) {\n\t\tthis._updateInterval = Math.max(interval, 128 / 44100);\n\t\tif (this._type === \"worker\") {\n\t\t\tthis._worker.postMessage(Math.max(interval * 1000, 1));\n\t\t}\n\t}\n\n\t/**\n\t * The type of the ticker, either a worker or a timeout\n\t */\n\tget type(): TickerClockSource {\n\t\treturn this._type;\n\t}\n\tset type(type: TickerClockSource) {\n\t\tthis._disposeClock();\n\t\tthis._type = type;\n\t\tthis._createClock();\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): void {\n\t\tthis._disposeClock();\n\t}\n}\n","import { Note } from \"../type/Units\";\n\n/**\n *  Test if the arg is undefined\n */\nexport function isUndef(arg: any): arg is undefined {\n\treturn typeof arg === \"undefined\";\n}\n\n/**\n *  Test if the arg is not undefined\n */\nexport function isDefined<T>(arg: T | undefined): arg is T {\n\treturn !isUndef(arg);\n}\n\n/**\n *  Test if the arg is a function\n */\nexport function isFunction(arg: any): arg is (a: any) => any {\n\treturn typeof arg === \"function\";\n}\n\n/**\n *  Test if the argument is a number.\n */\nexport function isNumber(arg: any): arg is number {\n\treturn (typeof arg === \"number\");\n}\n\n/**\n *  Test if the given argument is an object literal (i.e. `{}`);\n */\nexport function isObject(arg: any): arg is object {\n\treturn (Object.prototype.toString.call(arg) === \"[object Object]\" && arg.constructor === Object);\n}\n\n/**\n *  Test if the argument is a boolean.\n */\nexport function isBoolean(arg: any): arg is boolean {\n\treturn (typeof arg === \"boolean\");\n}\n\n/**\n *  Test if the argument is an Array\n */\nexport function isArray(arg: any): arg is any[] {\n\treturn (Array.isArray(arg));\n}\n\n/**\n *  Test if the argument is a string.\n */\nexport function isString(arg: any): arg is string {\n\treturn (typeof arg === \"string\");\n}\n\n/**\n *  Test if the argument is in the form of a note in scientific pitch notation.\n *  e.g. \"C4\"\n */\nexport function isNote(arg: any): arg is Note {\n\treturn isString(arg) && /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i.test(arg);\n}\n","import { RecursivePartial } from \"./Interface\";\nimport { isDefined, isObject, isUndef } from \"./TypeCheck\";\n\ntype BaseToneOptions = import(\"../Tone\").BaseToneOptions;\n\n/**\n * Recursively merge an object\n * @param target the object to merge into\n * @param sources the source objects to merge\n */\nexport function deepMerge<T>(target: T): T;\nexport function deepMerge<T, U>(target: T, source1: U): T & U;\nexport function deepMerge<T, U, V>(target: T, source1: U, source2: V): T & U & V;\nexport function deepMerge<T, U, V, W>(target: T, source1: U, source2: V, source3: W): T & U & V & W;\nexport function deepMerge(target: any, ...sources: any[]): any {\n\tif (!sources.length) { return target; }\n\tconst source = sources.shift();\n\n\tif (isObject(target) && isObject(source)) {\n\t\tfor (const key in source) {\n\t\t\t// values with the key 'value' are an exception\n\t\t\t// they don't get deep merged\n\t\t\tif (key === \"value\") {\n\t\t\t\ttarget[key] = source[key];\n\t\t\t} else if (isObject(source[key])) {\n\t\t\t\tif (!target[key]) { Object.assign(target, { [key]: {} }); }\n\t\t\t\tdeepMerge(target[key], source[key] as any);\n\t\t\t} else {\n\t\t\t\tObject.assign(target, { [key]: source[key] as any });\n\t\t\t}\n\t\t}\n\t}\n\t// @ts-ignore\n\treturn deepMerge(target, ...sources);\n}\n\n/**\n * Returns true if the two arrays have the same value for each of the elements\n */\nexport function deepEquals(arrayA: number[] | string[], arrayB: number[] | string[]): boolean {\n\treturn arrayA.length === arrayB.length && arrayA.every((element, index) => arrayB[index] === element);\n}\n\n/**\n * Convert an args array into an object.\n */\nexport function optionsFromArguments<T extends object>(\n\tdefaults: T,\n\targsArray: IArguments,\n\tkeys: string[] = [],\n\tobjKey?: string,\n): T {\n\tconst opts: any = {};\n\tconst args = Array.from(argsArray);\n\t// if the first argument is an object and has an object key\n\tif (isObject(args[0]) && objKey && !Reflect.has(args[0], objKey)) {\n\t\t// if it's not part of the defaults\n\t\tconst partOfDefaults = Object.keys(args[0]).some(key => Reflect.has(defaults, key));\n\t\tif (!partOfDefaults) {\n\t\t\t// merge that key\n\t\t\tdeepMerge(opts, {[objKey] : args[0]});\n\t\t\t// remove the obj key from the keys\n\t\t\tkeys.splice(keys.indexOf(objKey), 1);\n\t\t\t// shift the first argument off\n\t\t\targs.shift();\n\t\t}\n\t}\n\tif (args.length === 1 && isObject(args[0])) {\n\t\tdeepMerge(opts, args[0]);\n\t} else {\n\t\tfor (let i = 0; i < keys.length; i++) {\n\t\t\tif (isDefined(args[i])) {\n\t\t\t\topts[keys[i]] = args[i];\n\t\t\t}\n\t\t}\n\t}\n\treturn deepMerge(defaults, opts);\n}\n\n/**\n * Return this instances default values by calling Constructor.getDefaults()\n */\nexport function getDefaultsFromInstance<T>(instance: T): BaseToneOptions {\n\ttype ToneClass = {\n\t\tconstructor: ToneClass;\n\t\tgetDefaults: () => BaseToneOptions;\n\t} & T;\n\n\treturn (instance as ToneClass).constructor.getDefaults();\n}\n\n/**\n * Returns the fallback if the given object is undefined.\n * Take an array of arguments and return a formatted options object.\n */\nexport function defaultArg<T>(given: T, fallback: T): T {\n\tif (isUndef(given)) {\n\t\treturn fallback;\n\t} else {\n\t\treturn given;\n\t}\n}\n\n/**\n * Remove all of the properties belonging to omit from obj.\n */\nexport function omitFromObject<T extends object, O extends string[]>(obj: T, omit: O): Omit<T, keyof O> {\n\tomit.forEach(prop => {\n\t\tif (Reflect.has(obj, prop)) {\n\t\t\tdelete obj[prop];\n\t\t}\n\t});\n\treturn obj;\n}\n","/**\n *  Assert that the statement is true, otherwise invoke an error with the given message.\n */\nexport function assert(statement: boolean, error: string): void {\n\tif (!statement) {\n\t\tthrow new Error(error);\n\t}\n}\n\nexport function log(...args: any[]): void {\n\t// tslint:disable-next-line: no-console\n\tconsole.log(...args);\n}\n","/**\n *  Tone.js\n *  @author Yotam Mann\n *  @license http://opensource.org/licenses/MIT MIT License\n *  @copyright 2014-2019 Yotam Mann\n */\nimport { version } from \"../version\";\nimport { theWindow } from \"./context/AudioContext\";\nimport { assert, log } from \"./util/Debug\";\n\n///////////////////////////////////////////////////////////////////////////\n// \tTONE\n///////////////////////////////////////////////////////////////////////////\n\n// tslint:disable-next-line: no-empty-interface\nexport interface BaseToneOptions {}\n\n/**\n *  @class  Tone is the base class of all other classes.\n *  @constructor\n */\nexport abstract class Tone {\n\n\t/**\n\t * The version number semver\n\t */\n\tstatic version: string = version;\n\n\t/**\n\t * The name of the class\n\t */\n\tprotected abstract name: string;\n\n\t/**\n\t * Takes a partial options an returns the completed options by filling in the defaults\n\t */\n\tstatic getDefaults(): BaseToneOptions {\n\t\treturn {};\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tDEBUGGING\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Set this debug flag to log all events that happen in this class.\n\t */\n\tdebug: boolean = false;\n\n\t/**\n\t * Prints the outputs to the console log for debugging purposes.\n\t * Prints the contents only if either the object has a property\n\t * called `debug` set to true, or a variable called TONE_DEBUG_CLASS\n\t * is set to the name of the class.\n\t * @example\n\t * //prints all logs originating from Tone.OscillatorNode\n\t * Tone.global.TONE_DEBUG_CLASS = \"OscillatorNode\"\n\t */\n\tprotected log(...args: any[]): void {\n\t\t// if the object is either set to debug = true\n\t\t// or if there is a string on the Tone.global.with the class name\n\t\tif (this.debug || (theWindow && this.toString() === theWindow.TONE_DEBUG_CLASS)) {\n\t\t\targs.unshift(this.toString() + \":\");\n\t\t\tlog(...args);\n\t\t}\n\t}\n\n\t/**\n\t *  Assert that the statement is true, otherwise invoke the error.\n\t *  @param {Boolean} statement\n\t *  @param {String} error The message which is passed into an Error\n\t *  @private\n\t */\n\tprotected assert(statement: boolean, error: string): void {\n\t\tassert(statement, error);\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tDISPOSING\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Indicates if the instance was disposed\n\t */\n\tprivate _wasDisposed: boolean = false;\n\n\t/**\n\t *  disconnect and dispose.\n\t */\n\tdispose(): this {\n\t\tthis._wasDisposed = true;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Indicates if the instance was disposed. 'Disposing' an\n\t * instance means that all of the Web Audio nodes that were\n\t * created for the instance are disconnected and freed for garbage collection.\n\t */\n\tget disposed(): boolean {\n\t\treturn this._wasDisposed;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tDEFAULTS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  If the `given` parameter is undefined, use the `fallback`.\n\t *  If both `given` and `fallback` are object literals, it will\n\t *  return a deep copy which includes all of the parameters from both\n\t *  objects. If a parameter is undefined in given, it will return\n\t *  the fallback property.\n\t *  <br><br>\n\t *  WARNING: if object is self referential, it will go into an an\n\t *  infinite recursive loop.\n\t *  @memberOf Tone\n\t *  @param  {*} given\n\t *  @param  {*} fallback\n\t *  @return {*}\n\t */\n\t// static defaultArg(given, fallback) {\n\t\t// if (isObject(given) && isObject(fallback)) {\n\t\t// \tconst ret = {};\n\t\t// \t// make a deep copy of the given object\n\t\t// \tfor (const givenProp in given) {\n\t\t// \t\tret[givenProp] = Tone.defaultArg(fallback[givenProp], given[givenProp]);\n\t\t// \t}\n\t\t// \tfor (const fallbackProp in fallback) {\n\t\t// \t\tret[fallbackProp] = Tone.defaultArg(given[fallbackProp], fallback[fallbackProp]);\n\t\t// \t}\n\t\t// \treturn ret;\n\t\t// } else {\n\t\t// \treturn isUndef(given) ? fallback : given;\n\t\t// }\n\t// }\n\n\t// protected options(argsArray: IArguments, keys: string[]): object {\n\t// \tlet options: any = {};\n\t// \tconst args = Array.from(argsArray);\n\t// \tif (args[0] instanceof BaseAudioContext) {\n\t// \t\toptions.context = args.shift();\n\t// \t}\n\t// \tif (args.length === 1 && isObject(args[0])) {\n\t// \t\toptions = Object.assign(options, args[0]);\n\t// \t} else {\n\t// \t\tfor (let i = 0; i < keys.length; i++) {\n\t// \t\t\tif (isDefined(args[i])) {\n\t// \t\t\t\toptions[keys[i]] = args[i];\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\t// \treturn deepMerge(this.getDefaults(), options);\n\t// }\n\n\t/**\n\t * Convert the class to a string\n\t * @example\n\t * const osc = new Oscillator()\n\t * osc.toString() // \"Oscillator\"\n\t */\n\ttoString(): string {\n\t\treturn this.name;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tSTATIC\n\t///////////////////////////////////////////////////////////////////////////\n\n\t// static get context(): import(\"./context/Context\").Context {\n\t// \treturn getContext();\n\t// }\n\n\t// static now(): Seconds {\n\t// \treturn Tone.context.now();\n\t// }\n}\n","import { Tone } from \"../Tone\";\nimport { isUndef } from \"./TypeCheck\";\n\nexport interface EmitterEventObject {\n\t[event: string]: Array<(...args: any[]) => void>;\n}\n\n/**\n * Emitter gives classes which extend it\n * the ability to listen for and emit events.\n * Inspiration and reference from Jerome Etienne's [MicroEvent](https://github.com/jeromeetienne/microevent.js).\n * MIT (c) 2011 Jerome Etienne.\n */\nexport class Emitter<EventType extends string = string> extends Tone {\n\n\tname = \"Emitter\";\n\n\t/**\n\t * Private container for the events\n\t */\n\tprivate _events?: EmitterEventObject;\n\n\t/**\n\t *  Bind a callback to a specific event.\n\t *  @param  event     The name of the event to listen for.\n\t *  @param  callback  The callback to invoke when the event is emitted\n\t */\n\ton(event: EventType, callback: (...args: any[]) => void): this {\n\t\t// split the event\n\t\tconst events = event.split(/\\W+/);\n\t\tevents.forEach(eventName => {\n\t\t\tif (isUndef(this._events)) {\n\t\t\t\tthis._events = {};\n\t\t\t}\n\t\t\tif (!this._events.hasOwnProperty(eventName)) {\n\t\t\t\tthis._events[eventName] = [];\n\t\t\t}\n\t\t\tthis._events[eventName].push(callback);\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Bind a callback which is only invoked once\n\t *  @param  event     The name of the event to listen for.\n\t *  @param  callback  The callback to invoke when the event is emitted\n\t */\n\tonce(event: EventType, callback: (...args: any[]) => void): this {\n\t\tconst boundCallback = (...args: any[])  => {\n\t\t\t// invoke the callback\n\t\t\tcallback(...args);\n\t\t\t// remove the event\n\t\t\tthis.off(event, boundCallback);\n\t\t};\n\t\tthis.on(event, boundCallback);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Remove the event listener.\n\t *  @param  event     The event to stop listening to.\n\t *  @param  callback  The callback which was bound to the event with Emitter.on.\n\t *                    If no callback is given, all callbacks events are removed.\n\t */\n\toff(event: EventType, callback?: (...args: any[]) => void): this {\n\t\tconst events = event.split(/\\W+/);\n\t\tevents.forEach(eventName => {\n\t\t\tif (isUndef(this._events)) {\n\t\t\t\tthis._events = {};\n\t\t\t}\n\t\t\tif (this._events.hasOwnProperty(event)) {\n\t\t\t\tif (isUndef(callback)) {\n\t\t\t\t\tthis._events[event] = [];\n\t\t\t\t} else {\n\t\t\t\t\tconst eventList = this._events[event];\n\t\t\t\t\tfor (let i = 0; i < eventList.length; i++) {\n\t\t\t\t\t\tif (eventList[i] === callback) {\n\t\t\t\t\t\t\teventList.splice(i, 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Invoke all of the callbacks bound to the event\n\t *  with any arguments passed in.\n\t *  @param  event  The name of the event.\n\t *  @param args The arguments to pass to the functions listening.\n\t */\n\temit(event, ...args: any[]): this {\n\t\tif (this._events) {\n\t\t\tif (this._events.hasOwnProperty(event)) {\n\t\t\t\tconst eventList = this._events[event].slice(0);\n\t\t\t\tfor (let i = 0, len = eventList.length; i < len; i++) {\n\t\t\t\t\teventList[i].apply(this, args);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Add Emitter functions (on/off/emit) to the object\n\t */\n\tstatic mixin(constr: any): void {\n\t\t// instance._events = {};\n\t\t[\"on\", \"once\", \"off\", \"emit\"].forEach(name => {\n\t\t\tconst property = Object.getOwnPropertyDescriptor(Emitter.prototype, name) as PropertyDescriptor;\n\t\t\tObject.defineProperty(constr.prototype, name, property);\n\t\t});\n\t}\n\n\t/**\n\t *  Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._events = undefined;\n\t\treturn this;\n\t}\n}\n","import { Tone } from \"../Tone\";\nimport { optionsFromArguments } from \"./Defaults\";\n\ntype TimelineSearchParam = \"ticks\" | \"time\";\n\n/**\n * The options object for Timeline\n */\ninterface TimelineOptions {\n\tmemory: number;\n}\n\n/**\n * An event must have a time number\n */\nexport interface TimelineEvent {\n\ttime: number;\n}\n\n/**\n *  @class A Timeline class for scheduling and maintaining state\n *         along a timeline. All events must have a \"time\" property.\n *         Internally, events are stored in time order for fast\n *         retrieval.\n *  @param memory The number of previous events that are retained.\n */\nexport class Timeline<GenericEvent extends TimelineEvent> extends Tone {\n\n\tname = \"Timeline\";\n\n\t/**\n\t *  The memory of the timeline, i.e.\n\t *  how many events in the past it will retain\n\t */\n\tmemory: number;\n\n\t/**\n\t * The array of scheduled timeline events\n\t */\n\tprotected _timeline: GenericEvent[] = [];\n\n\tconstructor(options?: Partial<TimelineOptions>);\n\t// tslint:disable-next-line: unified-signatures\n\tconstructor(memory?: number);\n\tconstructor() {\n\t\tsuper();\n\t\tconst options = optionsFromArguments(Timeline.getDefaults(), arguments, [\"memory\"]);\n\n\t\tthis.memory = options.memory;\n\t}\n\n\tstatic getDefaults(): TimelineOptions {\n\t\treturn {\n\t\t\tmemory: Infinity,\n\t\t};\n\t}\n\n\t/**\n\t *  The number of items in the timeline.\n\t */\n\tget length(): number {\n\t\treturn this._timeline.length;\n\t}\n\n\t/**\n\t *  Insert an event object onto the timeline. Events must have a \"time\" attribute.\n\t *  @param event  The event object to insert into the timeline.\n\t */\n\tadd(event: GenericEvent): Timeline<GenericEvent> {\n\t\t// the event needs to have a time attribute\n\t\tthis.assert(Reflect.has(event, \"time\"), \"Timeline: events must have a time attribute\");\n\t\tevent.time = event.time.valueOf();\n\t\tconst index = this._search(event.time);\n\t\tthis._timeline.splice(index + 1, 0, event);\n\t\t// if the length is more than the memory, remove the previous ones\n\t\tif (this.length > this.memory) {\n\t\t\tconst diff = this.length - this.memory;\n\t\t\tthis._timeline.splice(0, diff);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Remove an event from the timeline.\n\t *  @param  {Object}  event  The event object to remove from the list.\n\t *  @returns {Timeline} this\n\t */\n\tremove(event: GenericEvent): Timeline<GenericEvent> {\n\t\tconst index = this._timeline.indexOf(event);\n\t\tif (index !== -1) {\n\t\t\tthis._timeline.splice(index, 1);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Get the nearest event whose time is less than or equal to the given time.\n\t *  @param  time  The time to query.\n\t */\n\tget(time: number, param: TimelineSearchParam = \"time\"): GenericEvent | null {\n\t\tconst index = this._search(time, param);\n\t\tif (index !== -1) {\n\t\t\treturn this._timeline[index];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t *  Return the first event in the timeline without removing it\n\t *  @returns {Object} The first event object\n\t */\n\tpeek(): GenericEvent | undefined {\n\t\treturn this._timeline[0];\n\t}\n\n\t/**\n\t *  Return the first event in the timeline and remove it\n\t */\n\tshift(): GenericEvent | undefined {\n\t\treturn this._timeline.shift();\n\t}\n\n\t/**\n\t *  Get the event which is scheduled after the given time.\n\t *  @param  time  The time to query.\n\t */\n\tgetAfter(time: number, param: TimelineSearchParam = \"time\"): GenericEvent | null {\n\t\tconst index = this._search(time, param);\n\t\tif (index + 1 < this._timeline.length) {\n\t\t\treturn this._timeline[index + 1];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t *  Get the event before the event at the given time.\n\t *  @param  time  The time to query.\n\t */\n\tgetBefore(time: number): GenericEvent | null {\n\t\tconst len = this._timeline.length;\n\t\t// if it's after the last item, return the last item\n\t\tif (len > 0 && this._timeline[len - 1].time < time) {\n\t\t\treturn this._timeline[len - 1];\n\t\t}\n\t\tconst index = this._search(time);\n\t\tif (index - 1 >= 0) {\n\t\t\treturn this._timeline[index - 1];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t *  Cancel events at and after the given time\n\t *  @param  time  The time to query.\n\t */\n\tcancel(after: number): Timeline<GenericEvent> {\n\t\tif (this._timeline.length > 1) {\n\t\t\tlet index = this._search(after);\n\t\t\tif (index >= 0) {\n\t\t\t\tif (this._timeline[index].time === after) {\n\t\t\t\t\t// get the first item with that time\n\t\t\t\t\tfor (let i = index; i >= 0; i--) {\n\t\t\t\t\t\tif (this._timeline[i].time === after) {\n\t\t\t\t\t\t\tindex = i;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis._timeline = this._timeline.slice(0, index);\n\t\t\t\t} else {\n\t\t\t\t\tthis._timeline = this._timeline.slice(0, index + 1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._timeline = [];\n\t\t\t}\n\t\t} else if (this._timeline.length === 1) {\n\t\t\t// the first item's time\n\t\t\tif (this._timeline[0].time >= after) {\n\t\t\t\tthis._timeline = [];\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Cancel events before or equal to the given time.\n\t *  @param  {Number}  time  The time to cancel before.\n\t *  @returns {Timeline} this\n\t */\n\tcancelBefore(time): Timeline<GenericEvent> {\n\t\tconst index = this._search(time);\n\t\tif (index >= 0) {\n\t\t\tthis._timeline = this._timeline.slice(index + 1);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the previous event if there is one. null otherwise\n\t * @param  {Object} event The event to find the previous one of\n\t * @return {Object}       The event right before the given event\n\t */\n\tpreviousEvent(event): GenericEvent | null {\n\t\tconst index = this._timeline.indexOf(event);\n\t\tif (index > 0) {\n\t\t\treturn this._timeline[index - 1];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t *  Does a binary search on the timeline array and returns the\n\t *  nearest event index whose time is after or equal to the given time.\n\t *  If a time is searched before the first index in the timeline, -1 is returned.\n\t *  If the time is after the end, the index of the last item is returned.\n\t *  @param  time\n\t */\n\tprotected _search(time: number, param: TimelineSearchParam = \"time\"): number {\n\t\tif (this._timeline.length === 0) {\n\t\t\treturn -1;\n\t\t}\n\t\tlet beginning = 0;\n\t\tconst len = this._timeline.length;\n\t\tlet end = len;\n\t\tif (len > 0 && this._timeline[len - 1][param] <= time) {\n\t\t\treturn len - 1;\n\t\t}\n\t\twhile (beginning < end) {\n\t\t\t// calculate the midpoint for roughly equal partition\n\t\t\tlet midPoint = Math.floor(beginning + (end - beginning) / 2);\n\t\t\tconst event = this._timeline[midPoint];\n\t\t\tconst nextEvent = this._timeline[midPoint + 1];\n\t\t\tif (event[param] === time) {\n\t\t\t\t// choose the last one that has the same time\n\t\t\t\tfor (let i = midPoint; i < this._timeline.length; i++) {\n\t\t\t\t\tconst testEvent = this._timeline[i];\n\t\t\t\t\tif (testEvent[param] === time) {\n\t\t\t\t\t\tmidPoint = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn midPoint;\n\t\t\t} else if (event[param] < time && nextEvent[param] > time) {\n\t\t\t\treturn midPoint;\n\t\t\t} else if (event[param] > time) {\n\t\t\t\t// search lower\n\t\t\t\tend = midPoint;\n\t\t\t} else {\n\t\t\t\t// search upper\n\t\t\t\tbeginning = midPoint + 1;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\n\t/**\n\t *  Internal iterator. Applies extra safety checks for\n\t *  removing items from the array.\n\t */\n\tprivate _iterate(\n\t\tcallback: (event: GenericEvent) => void,\n\t\tlowerBound = 0, upperBound = this._timeline.length - 1,\n\t): void {\n\t\tthis._timeline.slice(lowerBound, upperBound + 1).forEach(callback);\n\t}\n\n\t/**\n\t *  Iterate over everything in the array\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEach(callback: (event: GenericEvent) => void): Timeline<GenericEvent> {\n\t\tthis._iterate(callback);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array at or before the given time.\n\t *  @param  time The time to check if items are before\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachBefore(time, callback: (event: GenericEvent) => void): Timeline<GenericEvent> {\n\t\t// iterate over the items in reverse so that removing an item doesn't break things\n\t\tconst upperBound = this._search(time);\n\t\tif (upperBound !== -1) {\n\t\t\tthis._iterate(callback, 0, upperBound);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array after the given time.\n\t *  @param  time The time to check if items are before\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachAfter(time, callback: (event: GenericEvent) => void): Timeline<GenericEvent> {\n\t\t// iterate over the items in reverse so that removing an item doesn't break things\n\t\tconst lowerBound = this._search(time);\n\t\tthis._iterate(callback, lowerBound + 1);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array between the startTime and endTime.\n\t *  The timerange is inclusive of the startTime, but exclusive of the endTime.\n\t *  range = [startTime, endTime).\n\t *  @param  startTime The time to check if items are before\n\t *  @param  endTime The end of the test interval.\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachBetween(startTime: number, endTime: number, callback: (event: GenericEvent) => void): Timeline<GenericEvent> {\n\t\tlet lowerBound = this._search(startTime);\n\t\tlet upperBound = this._search(endTime);\n\t\tif (lowerBound !== -1 && upperBound !== -1) {\n\t\t\tif (this._timeline[lowerBound].time !== startTime) {\n\t\t\t\tlowerBound += 1;\n\t\t\t}\n\t\t\t// exclusive of the end time\n\t\t\tif (this._timeline[upperBound].time === endTime) {\n\t\t\t\tupperBound -= 1;\n\t\t\t}\n\t\t\tthis._iterate(callback, lowerBound, upperBound);\n\t\t} else if (lowerBound === -1) {\n\t\t\tthis._iterate(callback, 0, upperBound);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array at or after the given time. Similar to\n\t *  forEachAfter, but includes the item(s) at the given time.\n\t *  @param  time The time to check if items are before\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachFrom(time: number, callback: (event: GenericEvent) => void): Timeline<GenericEvent> {\n\t\t// iterate over the items in reverse so that removing an item doesn't break things\n\t\tlet lowerBound = this._search(time);\n\t\t// work backwards until the event time is less than time\n\t\twhile (lowerBound >= 0 && this._timeline[lowerBound].time >= time) {\n\t\t\tlowerBound--;\n\t\t}\n\t\tthis._iterate(callback, lowerBound + 1);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array at the given time\n\t *  @param  time The time to check if items are before\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachAtTime(time: number, callback: (event: GenericEvent) => void): Timeline<GenericEvent> {\n\t\t// iterate over the items in reverse so that removing an item doesn't break things\n\t\tconst upperBound = this._search(time);\n\t\tif (upperBound !== -1) {\n\t\t\tthis._iterate(event => {\n\t\t\t\tif (event.time === time) {\n\t\t\t\t\tcallback(event);\n\t\t\t\t}\n\t\t\t}, 0, upperBound);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._timeline = [];\n\t\treturn this;\n\t}\n}\n","///////////////////////////////////////////////////////////////////////////\n// INITIALIZING NEW CONTEXT\n///////////////////////////////////////////////////////////////////////////\n\ntype Context = import(\"./Context\").Context;\n\n/**\n * Array of callbacks to invoke when a new context is created\n */\nconst notifyNewContext: Array<(ctx: Context) => void> = [];\n\n/**\n * Used internally to setup a new Context\n */\nexport function onContextInit(cb: (ctx: Context) => void): void {\n\tnotifyNewContext.push(cb);\n}\n\n/**\n * Invoke any classes which need to also be initialized when a new context is created.\n */\nexport function initializeContext(ctx: Context): void {\n\t// add any additional modules\n\tnotifyNewContext.forEach(cb => cb(ctx));\n}\n\n/**\n * Array of callbacks to invoke when a new context is created\n */\nconst notifyCloseContext: Array<(ctx: Context) => void> = [];\n\n/**\n * Used internally to tear down a Context\n */\nexport function onContextClose(cb: (ctx: Context) => void): void {\n\tnotifyCloseContext.push(cb);\n}\n\nexport function closeContext(ctx: Context): void {\n\t// add any additional modules\n\tnotifyCloseContext.forEach(cb => cb(ctx));\n}\n","import { Ticker, TickerClockSource } from \"../clock/Ticker\";\nimport { Seconds } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Emitter } from \"../util/Emitter\";\nimport { Omit } from \"../util/Interface\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isFunction, isString } from \"../util/TypeCheck\";\nimport { AnyAudioContext, getAudioContext } from \"./AudioContext\";\nimport { closeContext, initializeContext } from \"./ContextInitialization\";\n\ntype Transport = import(\"../clock/Transport\").Transport;\ntype Destination = import(\"./Destination\").Destination;\n\nexport type ContextLatencyHint = AudioContextLatencyCategory | \"fastest\";\n\n// these are either not used in Tone.js or deprecated and not implemented.\nexport type ExcludedFromBaseAudioContext = \"onstatechange\" | \"addEventListener\" |\n\t\"removeEventListener\" | \"listener\" | \"dispatchEvent\" | \"audioWorklet\" | \"destination\" | \"createScriptProcessor\";\n\t// \"createMediaStreamSource\" | \"createMediaElementSource\" | \"createMediaStreamTrackSource\" |\n\t// \"baseLatency\" | \"suspend\" |\n\n// the subset of the BaseAudioContext which Tone.Context implements.\nexport type BaseAudioContextSubset = Omit<BaseAudioContext, ExcludedFromBaseAudioContext>;\n\nexport interface ContextOptions {\n\tclockSource: TickerClockSource;\n\tlatencyHint: ContextLatencyHint;\n\tlookAhead: Seconds;\n\tupdateInterval: Seconds;\n\tcontext: AnyAudioContext;\n}\n\nexport interface ContextTimeoutEvent {\n\tcallback: (...args: any[]) => void;\n\tid: number;\n\ttime: Seconds;\n}\n\n/**\n * Wrapper around the native AudioContext.\n */\nexport class Context extends Emitter<\"statechange\" | \"tick\"> implements BaseAudioContextSubset {\n\n\tname = \"Context\";\n\n\t/**\n\t * The amount of time into the future events are scheduled. Giving Web Audio\n\t * a short amount of time into the future to schedule events can reduce clicks and\n\t * improve performance. This value can be set to 0 to get the lowest latency.\n\t */\n\tlookAhead: Seconds;\n\n\t/**\n\t * private reference to the BaseAudioContext\n\t */\n\tprotected readonly _context: AnyAudioContext;\n\n\t/**\n\t * A reliable callback method\n\t */\n\tprivate readonly _ticker: Ticker;\n\n\t/**\n\t *  The default latency hint\n\t */\n\tprivate _latencyHint: ContextLatencyHint | Seconds;\n\n\t/**\n\t *  An object containing all of the constants AudioBufferSourceNodes\n\t */\n\tprivate _constants = new Map<number, AudioBufferSourceNode>();\n\n\t/**\n\t *  All of the setTimeout events.\n\t */\n\tprivate _timeouts: Timeline<ContextTimeoutEvent> = new Timeline();\n\n\t/**\n\t *  The timeout id counter\n\t */\n\tprivate _timeoutIds = 0;\n\n\t/**\n\t * A reference the Transport singleton belonging to this context\n\t */\n\tprivate _transport!: Transport;\n\n\t/**\n\t * A reference the Destination singleton belonging to this context\n\t */\n\tprivate _destination!: Destination;\n\n\t/**\n\t * Private indicator if the context has been initialized\n\t */\n\tprivate _initialized: boolean = false;\n\n\tconstructor(context?: AnyAudioContext);\n\t// tslint:disable-next-line: unified-signatures\n\tconstructor(options?: Partial<ContextOptions>);\n\tconstructor() {\n\t\tsuper();\n\t\tconst options = optionsFromArguments(Context.getDefaults(), arguments, [\"context\"]);\n\n\t\tthis._context = options.context;\n\n\t\tthis._latencyHint = options.latencyHint;\n\t\tthis.lookAhead = options.lookAhead;\n\n\t\tthis._ticker = new Ticker(this.emit.bind(this, \"tick\"), options.clockSource, options.updateInterval);\n\t\tthis.on(\"tick\", this._timeoutLoop.bind(this));\n\n\t\t// fwd events from the context\n\t\tthis._context.addEventListener(\"statechange\", () => {\n\t\t\tthis.emit(\"statechange\", this.state);\n\t\t});\n\t}\n\n\tstatic getDefaults(): ContextOptions {\n\t\treturn {\n\t\t\tclockSource: \"worker\",\n\t\t\tcontext: getAudioContext(),\n\t\t\tlatencyHint: \"interactive\",\n\t\t\tlookAhead: 0.1,\n\t\t\tupdateInterval: 0.03,\n\t\t};\n\t}\n\n\t/**\n\t * Finish setting up the context. **You usually do not need to do this manually.**\n\t */\n\tinitialize(): this {\n\t\tif (!this._initialized) {\n\t\t\t// add any additional modules\n\t\t\tinitializeContext(this);\n\t\t\tthis._initialized = true;\n\t\t}\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////\n\t// BASE AUDIO CONTEXT METHODS\n\t///////////////////////////////////////////////////////////////////////\n\n\tcreateAnalyser(): AnalyserNode {\n\t\treturn this._context.createAnalyser();\n\t}\n\tcreateOscillator(): OscillatorNode {\n\t\treturn this._context.createOscillator();\n\t}\n\tcreateBufferSource(): AudioBufferSourceNode {\n\t\treturn this._context.createBufferSource();\n\t}\n\tcreateBiquadFilter(): BiquadFilterNode {\n\t\treturn this._context.createBiquadFilter();\n\t}\n\tcreateBuffer(numberOfChannels: number, length: number, sampleRate: number): AudioBuffer {\n\t\treturn this._context.createBuffer(numberOfChannels, length, sampleRate);\n\t}\n\tcreateChannelMerger(numberOfInputs?: number | undefined): ChannelMergerNode {\n\t\treturn this._context.createChannelMerger(numberOfInputs);\n\t}\n\tcreateChannelSplitter(numberOfOutputs?: number | undefined): ChannelSplitterNode {\n\t\treturn this._context.createChannelSplitter(numberOfOutputs);\n\t}\n\tcreateConstantSource(): ConstantSourceNode {\n\t\treturn this._context.createConstantSource();\n\t}\n\tcreateConvolver(): ConvolverNode {\n\t\treturn this._context.createConvolver();\n\t}\n\tcreateDelay(maxDelayTime?: number | undefined): DelayNode {\n\t\treturn this._context.createDelay(maxDelayTime);\n\t}\n\tcreateDynamicsCompressor(): DynamicsCompressorNode {\n\t\treturn this._context.createDynamicsCompressor();\n\t}\n\tcreateGain(): GainNode {\n\t\treturn this._context.createGain();\n\t}\n\tcreateIIRFilter(feedforward: number[], feedback: number[]): IIRFilterNode {\n\t\treturn this._context.createIIRFilter(feedforward, feedback);\n\t}\n\tcreatePanner(): PannerNode {\n\t\treturn this._context.createPanner();\n\t}\n\tcreatePeriodicWave(\n\t\treal: number[] | Float32Array,\n\t\timag: number[] | Float32Array,\n\t\tconstraints?: PeriodicWaveConstraints | undefined,\n\t): PeriodicWave {\n\t\treturn this._context.createPeriodicWave(real, imag, constraints);\n\t}\n\tcreateStereoPanner(): StereoPannerNode {\n\t\treturn this._context.createStereoPanner();\n\t}\n\tcreateWaveShaper(): WaveShaperNode {\n\t\treturn this._context.createWaveShaper();\n\t}\n\tdecodeAudioData(audioData: ArrayBuffer): Promise<AudioBuffer> {\n\t\treturn this._context.decodeAudioData(audioData);\n\t}\n\n\t/**\n\t *  The current time in seconds of the AudioContext.\n\t */\n\tget currentTime(): Seconds {\n\t\treturn this._context.currentTime;\n\t}\n\t/**\n\t *  The current time in seconds of the AudioContext.\n\t */\n\tget state(): AudioContextState {\n\t\treturn this._context.state;\n\t}\n\t/**\n\t *  The current time in seconds of the AudioContext.\n\t */\n\tget sampleRate(): number {\n\t\treturn this._context.sampleRate;\n\t}\n\t/**\n\t *  The listener\n\t */\n\tget listener(): AudioListener {\n\t\treturn this._context.listener;\n\t}\n\n\t/**\n\t *  There is only one Transport per Context. It is created on initialization.\n\t */\n\tget transport(): Transport {\n\t\tthis.assert(this._initialized, \"The context must be initialized before being used by invoking context.initialize()\");\n\t\treturn this._transport;\n\t}\n\tset transport(t: Transport) {\n\t\tthis.assert(!this._initialized, \"The transport cannot be set after initialization.\");\n\t\tthis._transport = t;\n\t}\n\n\t/**\n\t *  A reference to the Context's destination node.\n\t */\n\tget destination(): Destination {\n\t\tthis.assert(this._initialized, \"The context must be initialized before being used by invoking context.initialize()\");\n\t\treturn this._destination;\n\t}\n\tset destination(d: Destination) {\n\t\tthis.assert(!this._initialized, \"The transport cannot be set after initialization.\");\n\t\tthis._destination = d;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////\n\t// TICKER\n\t///////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  How often the interval callback is invoked.\n\t *  This number corresponds to how responsive the scheduling\n\t *  can be. context.updateInterval + context.lookAhead gives you the\n\t *  total latency between scheduling an event and hearing it.\n\t */\n\tget updateInterval(): Seconds {\n\t\treturn this._ticker.updateInterval;\n\t}\n\tset updateInterval(interval: Seconds) {\n\t\tthis._ticker.updateInterval = interval;\n\t}\n\n\t/**\n\t *  What the source of the clock is, either \"worker\" (default),\n\t *  \"timeout\", or \"offline\" (none).\n\t */\n\tget clockSource(): TickerClockSource {\n\t\treturn this._ticker.type;\n\t}\n\tset clockSource(type: TickerClockSource) {\n\t\tthis._ticker.type = type;\n\t}\n\n\t/**\n\t * The type of playback, which affects tradeoffs between audio\n\t * output latency and responsiveness.\n\t * In addition to setting the value in seconds, the latencyHint also\n\t * accepts the strings \"interactive\" (prioritizes low latency),\n\t * \"playback\" (prioritizes sustained playback), \"balanced\" (balances\n\t * latency and performance), and \"fastest\" (lowest latency, might glitch more often).\n\t * @example\n\t * //set the lookAhead to 0.3 seconds\n\t * Tone.context.latencyHint = 0.3;\n\t */\n\tget latencyHint(): ContextLatencyHint | Seconds {\n\t\treturn this._latencyHint;\n\t}\n\tset latencyHint(hint: ContextLatencyHint | Seconds) {\n\t\tlet lookAheadValue = 0;\n\t\tthis._latencyHint = hint;\n\t\tif (isString(hint)) {\n\t\t\tswitch (hint) {\n\t\t\t\tcase \"interactive\":\n\t\t\t\t\tlookAheadValue = 0.1;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"playback\":\n\t\t\t\t\tlookAheadValue = 0.8;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"balanced\":\n\t\t\t\t\tlookAheadValue = 0.25;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"fastest\":\n\t\t\t\t\tlookAheadValue = 0.01;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tthis.lookAhead = lookAheadValue;\n\t\tthis.updateInterval = lookAheadValue / 3;\n\t}\n\n\t/**\n\t *  The unwrapped AudioContext.\n\t */\n\tget rawContext(): AnyAudioContext {\n\t\treturn this._context;\n\t}\n\n\t/**\n\t * The current audio context time plus a short {@link lookAhead}.\n\t */\n\tnow(): Seconds {\n\t\treturn this._context.currentTime + this.lookAhead;\n\t}\n\n\t/**\n\t *  Starts the audio context from a suspended state. This is required\n\t *  to initially start the AudioContext.\n\t */\n\tresume(): Promise<void> {\n\t\tif (this._context.state === \"suspended\" && isAudioContext(this._context)) {\n\t\t\treturn this._context.resume();\n\t\t} else {\n\t\t\treturn Promise.resolve();\n\t\t}\n\t}\n\n\t/**\n\t *  Promise which is invoked when the context is running.\n\t *  Tries to resume the context if it's not started.\n\t */\n\tasync close(): Promise<void> {\n\t\tif (isAudioContext(this._context)) {\n\t\t\tawait this._context.close();\n\t\t}\n\t\tif (this._initialized) {\n\t\t\tcloseContext(this);\n\t\t}\n\t}\n\n\t/**\n\t *  Generate a looped buffer at some constant value.\n\t */\n\tgetConstant(val: number): AudioBufferSourceNode {\n\t\tif (this._constants.has(val)) {\n\t\t\treturn this._constants.get(val) as AudioBufferSourceNode;\n\t\t} else {\n\t\t\tconst buffer = this._context.createBuffer(1, 128, this._context.sampleRate);\n\t\t\tconst arr = buffer.getChannelData(0);\n\t\t\tfor (let i = 0; i < arr.length; i++) {\n\t\t\t\tarr[i] = val;\n\t\t\t}\n\t\t\tconst constant = this._context.createBufferSource();\n\t\t\tconstant.channelCount = 1;\n\t\t\tconstant.channelCountMode = \"explicit\";\n\t\t\tconstant.buffer = buffer;\n\t\t\tconstant.loop = true;\n\t\t\tconstant.start(0);\n\t\t\tthis._constants.set(val, constant);\n\t\t\treturn constant;\n\t\t}\n\t}\n\n\t/**\n\t *  Clean up. Also closes the audio context.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._ticker.dispose();\n\t\tthis._timeouts.dispose();\n\t\tObject.keys(this._constants).map(val => this._constants[val].disconnect());\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////\n\t// TIMEOUTS\n\t///////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  The private loop which keeps track of the context scheduled timeouts\n\t *  Is invoked from the clock source\n\t */\n\tprivate _timeoutLoop(): void  {\n\t\tconst now = this.now();\n\t\tlet firstEvent = this._timeouts.peek();\n\t\twhile (this._timeouts.length && firstEvent && firstEvent.time <= now) {\n\t\t\t// invoke the callback\n\t\t\tfirstEvent.callback();\n\t\t\t// shift the first event off\n\t\t\tthis._timeouts.shift();\n\t\t\t// get the next one\n\t\t\tfirstEvent = this._timeouts.peek();\n\t\t}\n\t}\n\n\t/**\n\t *  A setTimeout which is guarented by the clock source.\n\t *  Also runs in the offline context.\n\t *  @param  fn       The callback to invoke\n\t *  @param  timeout  The timeout in seconds\n\t *  @returns ID to use when invoking Context.clearTimeout\n\t */\n\tsetTimeout(fn: (...args: any[]) => void, timeout: Seconds): number {\n\t\tthis._timeoutIds++;\n\t\tconst now = this.now();\n\t\tthis._timeouts.add({\n\t\t\tcallback : fn,\n\t\t\tid : this._timeoutIds,\n\t\t\ttime : now + timeout,\n\t\t});\n\t\treturn this._timeoutIds;\n\t}\n\n\t/**\n\t *  Clears a previously scheduled timeout with Tone.context.setTimeout\n\t *  @param  id  The ID returned from setTimeout\n\t */\n\tclearTimeout(id: number): Context {\n\t\tthis._timeouts.forEach(event => {\n\t\t\tif (event.id === id) {\n\t\t\t\tthis._timeouts.remove(event);\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n}\n\n/**\n * Test if the arg is an instanceof AudioContext\n */\nexport function isAudioContext(arg: any): arg is AudioContext {\n\treturn arg instanceof Object &&  Reflect.has(arg, \"destination\") &&\n\t\tisFunction(arg.close) && isFunction(arg.resume) && !(arg instanceof Context);\n}\n","import { version } from \"../version\";\nimport { hasAudioContext, theWindow } from \"./context/AudioContext\";\nimport { Context } from \"./context/Context\";\n\n/**\n * This dummy context is used to avoid throwing immediate errors when importing in Node.js\n */\nconst dummyContext: Context = {\n\tdestination: {},\n\ttransport: {},\n} as Context;\n\n/**\n * The global audio context which is getable and assignable through\n * getContext and setContext\n */\nlet globalContext: Context = dummyContext;\n\n/**\n * Returns the default system-wide AudioContext\n */\nexport function getContext(): Context {\n\tif (globalContext === dummyContext && hasAudioContext) {\n\t\tsetContext(new Context());\n\t}\n\treturn globalContext;\n}\n\n/**\n * Set the default audio context\n */\nexport function setContext(context: Context): void {\n\tglobalContext = context;\n\tcontext.initialize();\n}\n\n/**\n * Most browsers will not play _any_ audio until a user\n * clicks something (like a play button). Invoke this method\n * on a click or keypress event handler to start the audio context.\n * More about the Autoplay policy\n * [here](https://developers.google.com/web/updates/2017/09/autoplay-policy-changes#webaudio)\n * @example\n * document.querySelector('#playbutton').addEventListener('click', () => Tone.start())\n */\nexport function start(): Promise <void> {\n\treturn globalContext.resume();\n}\n\n/**\n * Log Tone.js + version in the console.\n */\nif (theWindow && !theWindow.TONE_SILENCE_LOGGING) {\n\tlet prefix = \"v\";\n\tif (version === \"dev\") {\n\t\tprefix = \"\";\n\t}\n\tconst printString = ` * Tone.js ${prefix}${version} * `;\n\t// tslint:disable-next-line: no-console\n\tconsole.log(`%c${printString}`, \"background: #000; color: #fff\");\n}\n","import { Context } from \"../context/Context\";\nimport { Seconds } from \"../type/Units\";\nimport { isFunction } from \"../util/TypeCheck\";\n\n/**\n *  Wrapper around the OfflineAudioContext\n *  @param  channels  The number of channels to render\n *  @param  duration  The duration to render in samples\n *  @param sampleRate the sample rate to render at\n */\nexport class OfflineContext extends Context {\n\n\tname = \"OfflineContext\";\n\n\t/**\n\t *  A private reference to the duration\n\t */\n\tprivate readonly _duration: Seconds;\n\n\t/**\n\t *  An artificial clock source\n\t */\n\tprivate _currentTime: Seconds = 0;\n\n\t/**\n\t * Private reference to the OfflineAudioContext.\n\t */\n\tprotected _context!: OfflineAudioContext;\n\n\tconstructor(\n\t\tchannels: number | OfflineAudioContext,\n\t\tduration: Seconds, sampleRate: number,\n\t) {\n\n\t\tsuper({\n\t\t\tclockSource: \"offline\",\n\t\t\tcontext: isOfflineAudioContext(channels) ?\n\t\t\t\tchannels : new OfflineAudioContext(channels, duration * sampleRate, sampleRate),\n\t\t\tlookAhead: 0,\n\t\t\tupdateInterval: isOfflineAudioContext(channels) ?\n\t\t\t\t\t128 / channels.sampleRate : 128 / sampleRate,\n\t\t});\n\n\t\tthis._duration = isOfflineAudioContext(channels) ?\n\t\t\tchannels.length / channels.sampleRate : duration;\n\t}\n\n\t/**\n\t *  Override the now method to point to the internal clock time\n\t */\n\tnow(): Seconds {\n\t\treturn this._currentTime;\n\t}\n\n\t/**\n\t * Same as this.now()\n\t */\n\tget currentTime(): Seconds {\n\t\treturn this._currentTime;\n\t}\n\n\t/**\n\t *  Render the output of the OfflineContext\n\t */\n\trender(): Promise<AudioBuffer> {\n\t\twhile (this._duration - this._currentTime >= 0) {\n\t\t\t// invoke all the callbacks on that time\n\t\t\tthis.emit(\"tick\");\n\t\t\t// increment the clock in 5ms chunks\n\t\t\tthis._currentTime += 0.005;\n\t\t}\n\n\t\treturn this._context.startRendering();\n\t}\n\n\t/**\n\t *  Close the context\n\t */\n\tclose(): Promise<void> {\n\t\treturn Promise.resolve();\n\t}\n}\n\n/**\n * Test if the arg is instanceof an OfflineAudioContext\n */\nexport function isOfflineAudioContext(arg: any): arg is OfflineAudioContext {\n\treturn arg instanceof Object &&  Reflect.has(arg, \"destination\") &&\n\t\tisFunction(arg.startRendering) && !(arg instanceof OfflineContext);\n}\n","import { Decibels, GainFactor, Hertz, Interval, MidiNote, NormalRange } from \"./Units\";\n\n/**\n *  Equal power gain scale. Good for cross-fading.\n *  @param  percent (0-1)\n */\nexport function equalPowerScale(percent: NormalRange): number {\n\tconst piFactor = 0.5 * Math.PI;\n\treturn Math.sin(percent * piFactor);\n}\n\n/**\n *  Convert decibels into gain.\n */\nexport function dbToGain(db: Decibels): GainFactor {\n\treturn Math.pow(10, db / 20);\n}\n\n/**\n *  Convert gain to decibels.\n */\nexport function gainToDb(gain: GainFactor): Decibels {\n\treturn 20 * (Math.log(gain) / Math.LN10);\n}\n\n/**\n * Convert an interval (in semitones) to a frequency ratio.\n * @param interval the number of semitones above the base note\n * @example\n * tone.intervalToFrequencyRatio(0); // 1\n * tone.intervalToFrequencyRatio(12); // 2\n * tone.intervalToFrequencyRatio(-12); // 0.5\n */\nexport function intervalToFrequencyRatio(interval: Interval): number {\n\treturn Math.pow(2, (interval / 12));\n}\n\n/**\n * The Global [concert tuning pitch](https://en.wikipedia.org/wiki/Concert_pitch) which is used\n * to generate all the other pitch values from notes. A4's values in Hertz.\n */\nlet A4: Hertz = 440;\n\nexport function getA4(): Hertz {\n\treturn A4;\n}\n\nexport function setA4(freq: Hertz): void {\n\tA4 = freq;\n}\n\n/**\n * Convert a frequency value to a MIDI note.\n * @param frequency The value to frequency value to convert.\n * @example\n * ftom(440); // returns 69\n */\nexport function ftom(frequency: Hertz): MidiNote {\n\treturn Math.round(ftomf(frequency)) as MidiNote;\n}\n\n/**\n * Convert a frequency to a floating point midi value\n */\nexport function ftomf(frequency: Hertz): number {\n\treturn 69 + 12 * Math.log2(frequency / A4);\n}\n\n/**\n * Convert a MIDI note to frequency value.\n * @param  midi The midi number to convert.\n * @return The corresponding frequency value\n * @example\n */\nexport function mtof(midi: MidiNote): Hertz {\n\treturn A4 * Math.pow(2, (midi - 69) / 12);\n}\n","import { Context } from \"../context/Context\";\nimport { Tone } from \"../Tone\";\nimport { isDefined, isObject , isString, isUndef } from \"../util/TypeCheck\";\nimport { BPM, Hertz, MidiNote, Milliseconds, Samples, Seconds, Ticks, Time } from \"./Units\";\n\nexport type TimeValue = Time | TimeBaseClass<any, any>;\n\n/**\n * The units that the TimeBase can accept. extended by other classes\n */\nexport type TimeBaseUnit = \"s\" | \"n\" | \"t\" | \"m\" | \"i\" | \"hz\" | \"tr\" | \"samples\" | \"number\";\n\nexport interface TypeFunction {\n\tregexp: RegExp;\n\tmethod: (value: string, ...args: string[]) => number;\n}\n\nexport interface TimeExpression<Type extends number> {\n\t[key: string]: {\n\t\tregexp: RegExp;\n\t\tmethod: (value: string, ...args: string[]) => Type;\n\t};\n}\n\n/**\n * TimeBase is a flexible encoding of time which can be evaluated to and from a string.\n * @param  val    The time value as a number, string or object\n * @param  units  Unit values\n * @example\n * new TimeBase(4, \"n\")\n * new TimeBase(2, \"t\")\n * new TimeBase(\"2t\")\n * new TimeBase({\"2t\" : 2})\n * new TimeBase(\"2t\") + new TimeBase(\"4n\");\n */\nexport abstract class TimeBaseClass<Type extends number, Unit extends string> extends Tone {\n\n\treadonly context: Context;\n\n\t/**\n\t * The value of the units\n\t */\n\tprotected _val?: TimeValue;\n\n\t/**\n\t * The units of time\n\t */\n\tprotected _units?: Unit;\n\n\t/**\n\t * All of the conversion expressions\n\t */\n\tprotected _expressions: TimeExpression<Type>;\n\n\t/**\n\t * The default units\n\t */\n\treadonly defaultUnits: Unit = \"s\" as Unit;\n\n\tconstructor(context: Context, value?: TimeValue, units?: Unit) {\n\t\tsuper();\n\n\t\tthis._val = value;\n\t\tthis._units = units;\n\t\tthis.context = context;\n\t\tthis._expressions = this._getExpressions();\n\t}\n\n\t/**\n\t * All of the time encoding expressions\n\t */\n\tprotected _getExpressions(): TimeExpression<Type> {\n\t\treturn {\n\t\t\thz: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._frequencyToUnits(parseFloat(value));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?)hz$/i,\n\t\t\t},\n\t\t\ti: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._ticksToUnits(parseInt(value, 10));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)i$/i,\n\t\t\t},\n\t\t\tm: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._beatsToUnits(parseInt(value, 10) * this._getTimeSignature());\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)m$/i,\n\t\t\t},\n\t\t\tn: {\n\t\t\t\tmethod: (value, dot) => {\n\t\t\t\t\tconst numericValue = parseInt(value, 10);\n\t\t\t\t\tconst scalar = dot === \".\" ? 1.5 : 1;\n\t\t\t\t\tif (numericValue === 1) {\n\t\t\t\t\t\treturn this._beatsToUnits(this._getTimeSignature()) * scalar as Type;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn this._beatsToUnits(4 / numericValue) * scalar as Type;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)n(\\.?)$/i,\n\t\t\t},\n\t\t\tnumber: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._expressions[this.defaultUnits].method.call(this, value);\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?)$/,\n\t\t\t},\n\t\t\ts: {\n\t\t\t\tmethod: (value): Type => {\n\t\t\t\t\treturn this._secondsToUnits(parseFloat(value));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?)s$/,\n\t\t\t},\n\t\t\tsamples: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn parseInt(value, 10) / this.context.sampleRate as Type;\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)samples$/,\n\t\t\t},\n\t\t\tt: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\tconst numericValue = parseInt(value, 10);\n\t\t\t\t\treturn this._beatsToUnits(8 / (Math.floor(numericValue) * 3));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)t$/i,\n\t\t\t},\n\t\t\ttr: {\n\t\t\t\tmethod: (m, q, s) => {\n\t\t\t\t\tlet total = 0;\n\t\t\t\t\tif (m && m !== \"0\") {\n\t\t\t\t\t\ttotal += this._beatsToUnits(this._getTimeSignature() * parseFloat(m));\n\t\t\t\t\t}\n\t\t\t\t\tif (q && q !== \"0\") {\n\t\t\t\t\t\ttotal += this._beatsToUnits(parseFloat(q));\n\t\t\t\t\t}\n\t\t\t\t\tif (s && s !== \"0\") {\n\t\t\t\t\t\ttotal += this._beatsToUnits(parseFloat(s) / 4);\n\t\t\t\t\t}\n\t\t\t\t\treturn total as Type;\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?$/,\n\t\t\t},\n\t\t};\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tVALUE OF\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Evaluate the time value. Returns the time in seconds.\n\t */\n\tvalueOf(): Type {\n\t\tif (this._val instanceof TimeBaseClass) {\n\t\t\tthis.fromType(this._val);\n\t\t}\n\t\tif (isUndef(this._val)) {\n\t\t\treturn this._noArg();\n\t\t} else if (isString(this._val) && isUndef(this._units)) {\n\t\t\tfor (const units in this._expressions) {\n\t\t\t\tif (this._expressions[units].regexp.test(this._val.trim())) {\n\t\t\t\t\tthis._units = units as Unit;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (isObject(this._val)) {\n\t\t\tlet total = 0;\n\t\t\tfor (const typeName in this._val) {\n\t\t\t\tif (isDefined(this._val[typeName])) {\n\t\t\t\t\tconst quantity = this._val[typeName];\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tconst time = (new this.constructor(this.context, typeName)).valueOf() * quantity;\n\t\t\t\t\ttotal += time;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn total as Type;\n\t\t}\n\t\tif (isDefined(this._units)) {\n\t\t\tconst expr = this._expressions[this._units];\n\t\t\tconst matching = this._val.toString().trim().match(expr.regexp);\n\t\t\tif (matching) {\n\t\t\t\treturn expr.method.apply(this, matching.slice(1));\n\t\t\t} else {\n\t\t\t\treturn expr.method.call(this, this._val);\n\t\t\t}\n\t\t} else if (isString(this._val)) {\n\t\t\treturn parseFloat(this._val) as Type;\n\t\t} else {\n\t\t\treturn this._val as Type;\n\t\t}\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tUNIT CONVERSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Returns the value of a frequency in the current units\n\t */\n\tprotected _frequencyToUnits(freq: Hertz): Type {\n\t\treturn 1 / freq as Type;\n\t}\n\n\t/**\n\t *  Return the value of the beats in the current units\n\t */\n\tprotected _beatsToUnits(beats: number): Type {\n\t\treturn (60 / this._getBpm()) * beats as Type;\n\t}\n\n\t/**\n\t *  Returns the value of a second in the current units\n\t */\n\tprotected _secondsToUnits(seconds: Seconds): Type {\n\t\treturn seconds as Type;\n\t}\n\n\t/**\n\t *  Returns the value of a tick in the current time units\n\t *  @private\n\t */\n\tprotected _ticksToUnits(ticks: Ticks): Type {\n\t\treturn (ticks * (this._beatsToUnits(1)) / this._getPPQ()) as Type;\n\t}\n\n\t/**\n\t *  With no arguments, return 'now'\n\t */\n\tprotected _noArg(): Type {\n\t\treturn this._now();\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tTEMPO CONVERSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Return the bpm\n\t */\n\tprotected _getBpm(): BPM {\n\t\treturn this.context.transport.bpm.value;\n\t}\n\n\t/**\n\t * Return the timeSignature\n\t */\n\tprotected _getTimeSignature(): number {\n\t\treturn this.context.transport.timeSignature as number;\n\t}\n\n\t/**\n\t * Return the PPQ or 192 if Transport is not available\n\t */\n\tprotected _getPPQ(): number {\n\t\treturn this.context.transport.PPQ;\n\t}\n\n\t/**\n\t * Return the current time in whichever context is relevant\n\t */\n\tprotected abstract _now(): Type;\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tCONVERSION INTERFACE\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Coerce a time type into this units type.\n\t * @param type Any time type units\n\t */\n\tfromType(type: TimeBaseClass<any, any>): this {\n\t\tthis._units = undefined;\n\t\tswitch (this.defaultUnits) {\n\t\t\tcase \"s\":\n\t\t\t\tthis._val = type.toSeconds();\n\t\t\t\tbreak;\n\t\t\tcase \"i\":\n\t\t\t\tthis._val = type.toTicks();\n\t\t\t\tbreak;\n\t\t\tcase \"hz\":\n\t\t\t\tthis._val = type.toFrequency();\n\t\t\t\tbreak;\n\t\t\tcase \"midi\":\n\t\t\t\tthis._val = type.toMidi();\n\t\t\t\tbreak;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Return the value in seconds\n\t */\n\tabstract toSeconds(): Seconds;\n\n\t/**\n\t *  Return the value as a Midi note\n\t */\n\tabstract toMidi(): MidiNote;\n\n\t/**\n\t * Convert the value into ticks\n\t */\n\tabstract toTicks(): Ticks;\n\n\t/**\n\t *  Return the value in hertz\n\t */\n\ttoFrequency(): Hertz {\n\t\treturn 1 / this.toSeconds();\n\t}\n\n\t/**\n\t *  Return the time in samples\n\t */\n\ttoSamples(): Samples {\n\t\treturn this.toSeconds() * this.context.sampleRate;\n\t}\n\n\t/**\n\t *  Return the time in milliseconds.\n\t */\n\ttoMilliseconds(): Milliseconds {\n\t\treturn this.toSeconds() * 1000;\n\t}\n}\n","import { getContext } from \"../Global\";\nimport { ftom } from \"./Conversions\";\nimport { TimeBaseClass, TimeBaseUnit, TimeExpression, TimeValue } from \"./TimeBase\";\nimport { BarsBeatsSixteenths, MidiNote, Seconds, Subdivision, Ticks, Time } from \"./Units\";\n\n/**\n * TimeClass is a primitive type for encoding and decoding Time values.\n * TimeClass can be passed into the parameter of any method which takes time as an argument.\n * @param  val    The time value.\n * @param  units  The units of the value.\n * @example\n * var t = Time(\"4n\");//a quarter note\n */\nexport class TimeClass<Type extends Seconds | Ticks = Seconds, Unit extends string = TimeBaseUnit>\nextends TimeBaseClass<Type, Unit> {\n\n\tname = \"Time\";\n\n\tprotected _getExpressions(): TimeExpression<Type> {\n\t\treturn Object.assign(super._getExpressions(), {\n\t\t\tnow: {\n\t\t\t\tmethod: (capture: string): Type => {\n\t\t\t\t\treturn this._now() + new (this.constructor as typeof TimeClass)(this.context, capture).valueOf() as Type;\n\t\t\t\t},\n\t\t\t\tregexp: /^\\+(.+)/,\n\t\t\t},\n\t\t\tquantize: {\n\t\t\t\tmethod: (capture: string): Type => {\n\t\t\t\t\tconst quantTo = new TimeClass(this.context, capture).valueOf();\n\t\t\t\t\treturn this._secondsToUnits(this.context.transport.nextSubdivision(quantTo));\n\t\t\t\t},\n\t\t\t\tregexp: /^@(.+)/,\n\t\t\t},\n\t\t});\n\t}\n\n\t/**\n\t * Quantize the time by the given subdivision. Optionally add a\n\t * percentage which will move the time value towards the ideal\n\t * quantized value by that percentage.\n\t * @param  val    The subdivision to quantize to\n\t * @param  percent  Move the time value towards the quantized value by a percentage.\n\t * @example\n\t * Time(21).quantize(2) //returns 22\n\t * Time(0.6).quantize(\"4n\", 0.5) //returns 0.55\n\t */\n\tquantize(subdiv: Time, percent = 1): Type {\n\t\tconst subdivision = new (this.constructor as typeof TimeClass)(this.context, subdiv).valueOf();\n\t\tconst value = this.valueOf();\n\t\tconst multiple = Math.round(value / subdivision);\n\t\tconst ideal = multiple * subdivision;\n\t\tconst diff = ideal - value;\n\t\treturn value + diff * percent as Type;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// CONVERSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\t/**\n\t *  Convert a Time to Notation. The notation values are will be the\n\t *  closest representation between 1m to 128th note.\n\t *  @return {Notation}\n\t *  @example\n\t * //if the Transport is at 120bpm:\n\t * Time(2).toNotation();//returns \"1m\"\n\t */\n\ttoNotation(): Subdivision {\n\t\tconst time = this.toSeconds();\n\t\tconst testNotations: Subdivision[] = [\"1m\"];\n\t\tfor (let power = 1; power < 9; power++) {\n\t\t\tconst subdiv = Math.pow(2, power);\n\t\t\ttestNotations.push(subdiv + \"n.\" as Subdivision);\n\t\t\ttestNotations.push(subdiv + \"n\" as Subdivision);\n\t\t\ttestNotations.push(subdiv + \"t\" as Subdivision);\n\t\t}\n\t\ttestNotations.push(\"0\");\n\t\t// find the closets notation representation\n\t\tlet closest = testNotations[0];\n\t\tlet closestSeconds = new TimeClass(this.context, testNotations[0]).toSeconds();\n\t\ttestNotations.forEach(notation => {\n\t\t\tconst notationSeconds = new TimeClass(this.context, notation).toSeconds();\n\t\t\tif (Math.abs(notationSeconds - time) < Math.abs(closestSeconds - time)) {\n\t\t\t\tclosest = notation;\n\t\t\t\tclosestSeconds = notationSeconds;\n\t\t\t}\n\t\t});\n\t\treturn closest;\n\t}\n\n\t/**\n\t *  Return the time encoded as Bars:Beats:Sixteenths.\n\t */\n\ttoBarsBeatsSixteenths(): BarsBeatsSixteenths {\n\t\tconst quarterTime = this._beatsToUnits(1);\n\t\tlet quarters = this.valueOf() / quarterTime;\n\t\tquarters = parseFloat(quarters.toFixed(4));\n\t\tconst measures = Math.floor(quarters / this._getTimeSignature());\n\t\tlet sixteenths = (quarters % 1) * 4;\n\t\tquarters = Math.floor(quarters) % this._getTimeSignature();\n\t\tconst sixteenthString = sixteenths.toString();\n\t\tif (sixteenthString.length > 3) {\n\t\t\t// the additional parseFloat removes insignificant trailing zeroes\n\t\t\tsixteenths = parseFloat(parseFloat(sixteenthString).toFixed(3));\n\t\t}\n\t\tconst progress = [measures, quarters, sixteenths];\n\t\treturn progress.join(\":\");\n\t}\n\n\t/**\n\t *  Return the time in ticks.\n\t */\n\ttoTicks(): Ticks {\n\t\tconst quarterTime = this._beatsToUnits(1);\n\t\tconst quarters = this.valueOf() / quarterTime;\n\t\treturn Math.round(quarters * this._getPPQ());\n\t}\n\n\t/**\n\t *  Return the time in seconds.\n\t */\n\ttoSeconds(): Seconds {\n\t\treturn this.valueOf();\n\t}\n\n\t/**\n\t *  Return the value as a midi note.\n\t */\n\ttoMidi(): MidiNote {\n\t\treturn ftom(this.toFrequency());\n\t}\n\n\tprotected _now(): Type {\n\t\treturn this.context.now() as Type;\n\t}\n}\n\n/**\n * Create a TimeClass from a time string or number.\n * @param value A value which reprsents time\n * @param units The value's units if they can't be inferred by the value.\n */\nexport function Time(value?: TimeValue, units?: TimeBaseUnit): TimeClass<Seconds> {\n\treturn new TimeClass(getContext(), value, units);\n}\n","import { getContext } from \"../Global\";\nimport { intervalToFrequencyRatio, mtof } from \"./Conversions\";\nimport { ftom, getA4, setA4 } from \"./Conversions\";\nimport { TimeClass } from \"./Time\";\nimport { TimeBaseClass, TimeBaseUnit, TimeExpression, TimeValue } from \"./TimeBase\";\nimport { Frequency, Hertz, Interval, MidiNote, Note, Seconds, Ticks } from \"./Units\";\n\nexport type FrequencyUnit = TimeBaseUnit | \"midi\";\n\n/**\n * Frequency is a primitive type for encoding Frequency values.\n * Eventually all time values are evaluated to hertz using the `eval` method.\n * @example\n * Frequency(\"C3\") // 261\n * Frequency(38, \"midi\") //\n * Frequency(\"C3\").transpose(4);\n */\nexport class FrequencyClass<Type extends number = Hertz> extends TimeClass<Type, FrequencyUnit> {\n\n\tname = \"Frequency\";\n\n\treadonly defaultUnits: FrequencyUnit = \"hz\";\n\n\t/**\n\t * The [concert tuning pitch](https://en.wikipedia.org/wiki/Concert_pitch) which is used\n\t * to generate all the other pitch values from notes. A4's values in Hertz.\n\t */\n\tstatic get A4(): Hertz {\n\t\treturn getA4();\n\t}\n\tstatic set A4(freq: Hertz) {\n\t\tsetA4(freq);\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tAUGMENT BASE EXPRESSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\tprotected _getExpressions(): TimeExpression<Type> {\n\t\treturn Object.assign({}, super._getExpressions(), {\n\t\t\tmidi : {\n\t\t\t\tregexp : /^(\\d+(?:\\.\\d+)?midi)/,\n\t\t\t\tmethod(value): number {\n\t\t\t\t\tif (this.defaultUnits === \"midi\") {\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn FrequencyClass.mtof(value);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\tnote : {\n\t\t\t\tregexp : /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i,\n\t\t\t\tmethod(pitch, octave): number {\n\t\t\t\t\tconst index = noteToScaleIndex[pitch.toLowerCase()];\n\t\t\t\t\tconst noteNumber = index + (parseInt(octave, 10) + 1) * 12;\n\t\t\t\t\tif (this.defaultUnits === \"midi\") {\n\t\t\t\t\t\treturn noteNumber;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn FrequencyClass.mtof(noteNumber);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\ttr : {\n\t\t\t\tregexp : /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?/,\n\t\t\t\tmethod(m, q, s): number {\n\t\t\t\t\tlet total = 1;\n\t\t\t\t\tif (m && m !== \"0\") {\n\t\t\t\t\t\ttotal *= this._beatsToUnits(this._getTimeSignature() * parseFloat(m));\n\t\t\t\t\t}\n\t\t\t\t\tif (q && q !== \"0\") {\n\t\t\t\t\t\ttotal *= this._beatsToUnits(parseFloat(q));\n\t\t\t\t\t}\n\t\t\t\t\tif (s && s !== \"0\") {\n\t\t\t\t\t\ttotal *= this._beatsToUnits(parseFloat(s) / 4);\n\t\t\t\t\t}\n\t\t\t\t\treturn total;\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tEXPRESSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Transposes the frequency by the given number of semitones.\n\t *  @return  A new transposed frequency\n\t *  @example\n\t * Frequency(\"A4\").transpose(3); //\"C5\"\n\t */\n\ttranspose(interval: Interval): FrequencyClass {\n\t\treturn new FrequencyClass(this.context, this.valueOf() * intervalToFrequencyRatio(interval));\n\t}\n\n\t/**\n\t *  Takes an array of semitone intervals and returns\n\t *  an array of frequencies transposed by those intervals.\n\t *  @return  Returns an array of Frequencies\n\t *  @example\n\t * Frequency(\"A4\").harmonize([0, 3, 7]); //[\"A4\", \"C5\", \"E5\"]\n\t */\n\tharmonize(intervals: Interval[]): FrequencyClass[] {\n\t\treturn intervals.map(interval => {\n\t\t\treturn this.transpose(interval);\n\t\t});\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tUNIT CONVERSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Return the value of the frequency as a MIDI note\n\t * @example\n\t * Frequency(\"C4\").toMidi(); //60\n\t */\n\ttoMidi(): MidiNote {\n\t\treturn ftom(this.valueOf());\n\t}\n\n\t/**\n\t * Return the value of the frequency in Scientific Pitch Notation\n\t * @example\n\t * Frequency(69, \"midi\").toNote(); //\"A4\"\n\t */\n\ttoNote(): Note {\n\t\tconst freq = this.toFrequency();\n\t\tconst log = Math.log2(freq / FrequencyClass.A4);\n\t\tlet noteNumber = Math.round(12 * log) + 57;\n\t\tconst octave = Math.floor(noteNumber / 12);\n\t\tif (octave < 0) {\n\t\t\tnoteNumber += -12 * octave;\n\t\t}\n\t\tconst noteName = scaleIndexToNote[noteNumber % 12];\n\t\treturn noteName + octave.toString() as Note;\n\t}\n\n\t/**\n\t *  Return the duration of one cycle in seconds.\n\t */\n\ttoSeconds(): Seconds {\n\t\treturn 1 / super.toSeconds();\n\t}\n\n\t/**\n\t *  Return the duration of one cycle in ticks\n\t */\n\ttoTicks(): Ticks {\n\t\tconst quarterTime = this._beatsToUnits(1);\n\t\tconst quarters = this.valueOf() / quarterTime;\n\t\treturn Math.floor(quarters * this._getPPQ());\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tUNIT CONVERSIONS HELPERS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  With no arguments, return 0\n\t */\n\tprotected _noArg(): Type {\n\t\treturn 0 as Type;\n\t}\n\n\t/**\n\t *  Returns the value of a frequency in the current units\n\t */\n\tprotected _frequencyToUnits(freq: Hertz): Type {\n\t\treturn freq as Type;\n\t}\n\n\t/**\n\t *  Returns the value of a tick in the current time units\n\t */\n\tprotected _ticksToUnits(ticks: Ticks): Type {\n\t\treturn 1 / ((ticks * 60) / (this._getBpm() * this._getPPQ())) as Type;\n\t}\n\n\t/**\n\t *  Return the value of the beats in the current units\n\t */\n\tprotected _beatsToUnits(beats: number): Type {\n\t\treturn 1 / super._beatsToUnits(beats) as Type;\n\t}\n\n\t/**\n\t *  Returns the value of a second in the current units\n\t */\n\tprotected _secondsToUnits(seconds: Seconds): Type {\n\t\treturn 1 / seconds as Type;\n\t}\n\n\t/**\n\t * Convert a MIDI note to frequency value.\n\t * @param  midi The midi number to convert.\n\t * @return The corresponding frequency value\n\t * @example\n\t * FrequencyClass.mtof(69); // returns 440\n\t */\n\tstatic mtof(midi: MidiNote): Hertz {\n\t\treturn mtof(midi);\n\t}\n\n\t/**\n\t * Convert a frequency value to a MIDI note.\n\t * @param frequency The value to frequency value to convert.\n\t * @example\n\t * Frequency.ftom(440); // returns 69\n\t */\n\tstatic ftom(frequency: Hertz): MidiNote {\n\t\treturn ftom(frequency);\n\t}\n}\n\n///////////////////////////////////////////////////////////////////////////\n// \tFREQUENCY CONVERSIONS\n///////////////////////////////////////////////////////////////////////////\n\n/**\n *  Note to scale index\n *  @type  {Object}\n *  @private\n */\nconst noteToScaleIndex = {\n\t// tslint:disable-next-line\n\t\"cbb\" : -2, \"cb\" : -1, \"c\" : 0, \"c#\" : 1, \"cx\" : 2,\n\t\"dbb\" : 0, \"db\" : 1, \"d\" : 2, \"d#\" : 3, \"dx\" : 4,\n\t\"ebb\" : 2, \"eb\" : 3, \"e\" : 4, \"e#\" : 5, \"ex\" : 6,\n\t\"fbb\" : 3, \"fb\" : 4, \"f\" : 5, \"f#\" : 6, \"fx\" : 7,\n\t\"gbb\" : 5, \"gb\" : 6, \"g\" : 7, \"g#\" : 8, \"gx\" : 9,\n\t\"abb\" : 7, \"ab\" : 8, \"a\" : 9, \"a#\" : 10, \"ax\" : 11,\n\t\"bbb\" : 9, \"bb\" : 10, \"b\" : 11, \"b#\" : 12, \"bx\" : 13,\n};\n\n/**\n *  scale index to note (sharps)\n *  @type  {Array}\n *  @private\n */\nconst scaleIndexToNote = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n\n/**\n * Convert a value into a FrequencyClass object.\n */\nexport function Frequency(value?: TimeValue | Frequency, units?: FrequencyUnit): FrequencyClass {\n\treturn new FrequencyClass(getContext(), value, units);\n}\n","import { getContext } from \"../Global\";\nimport { Seconds, Ticks } from \"../type/Units\";\nimport { TimeClass } from \"./Time\";\nimport { TimeBaseUnit, TimeValue } from \"./TimeBase\";\n\n/**\n * TransportTime is a the time along the Transport's\n * timeline. It is similar to Tone.Time, but instead of evaluating\n * against the AudioContext's clock, it is evaluated against\n * the Transport's position. See [TransportTime wiki](https://github.com/Tonejs/Tone.js/wiki/TransportTime).\n */\nexport class TransportTimeClass<Type extends Seconds | Ticks = Seconds> extends TimeClass<Type> {\n\n\tname = \"TransportTime\";\n\n\t/**\n\t * Return the current time in whichever context is relevant\n\t */\n\tprotected _now(): Type {\n\t\treturn this.context.transport.seconds as Type;\n\t}\n}\n\n/**\n * TransportTime is a the time along the Transport's\n * timeline. It is similar to Tone.Time, but instead of evaluating\n * against the AudioContext's clock, it is evaluated against\n * the Transport's position. See [TransportTime wiki](https://github.com/Tonejs/Tone.js/wiki/TransportTime).\n */\nexport function TransportTime(value?: TimeValue, units?: TimeBaseUnit): TransportTimeClass {\n\treturn new TransportTimeClass(getContext(), value, units);\n}\n","import { getContext } from \"../Global\";\nimport { Tone } from \"../Tone\";\nimport { FrequencyClass } from \"../type/Frequency\";\nimport { TimeClass } from \"../type/Time\";\nimport { TransportTimeClass } from \"../type/TransportTime\";\nimport { Frequency, Hertz, Seconds, Ticks, Time } from \"../type/Units\";\nimport { getDefaultsFromInstance, omitFromObject, optionsFromArguments } from \"../util/Defaults\";\nimport { RecursivePartial } from \"../util/Interface\";\nimport { isArray, isBoolean, isDefined, isNumber, isString, isUndef } from \"../util/TypeCheck\";\nimport { Context } from \"./Context\";\n\n/**\n * A unit which process audio\n */\nexport interface ToneWithContextOptions {\n\tcontext: Context;\n}\n\n/**\n * The Base class for all nodes that have an AudioContext.\n */\nexport abstract class ToneWithContext<Options extends ToneWithContextOptions> extends Tone {\n\n\t/**\n\t * The context belonging to the node.\n\t */\n\treadonly context: Context;\n\n\t/**\n\t * The default context to use if no AudioContext is passed in to the constructor\n\t */\n\treadonly defaultContext?: Context;\n\n\tconstructor(context?: Context | Partial<ToneWithContextOptions>) {\n\t\tconst options = optionsFromArguments(ToneWithContext.getDefaults(), arguments, [\"context\"]);\n\t\tsuper();\n\t\tif (this.defaultContext) {\n\t\t\tthis.context = this.defaultContext;\n\t\t} else {\n\t\t\tthis.context = options.context;\n\t\t}\n\t}\n\n\tstatic getDefaults(): ToneWithContextOptions {\n\t\treturn {\n\t\t\tcontext: getContext(),\n\t\t};\n\t}\n\n\t/**\n\t * Return the current time of the Context clock plus the lookAhead.\n\t */\n\tnow(): Seconds {\n\t\treturn this.context.currentTime + this.context.lookAhead;\n\t}\n\n\t/**\n\t * Return the current time of the Context clock without any lookAhead.\n\t */\n\timmediate(): Seconds {\n\t\treturn this.context.currentTime;\n\t}\n\n\t/**\n\t * The duration in seconds of one sample.\n\t */\n\tget sampleTime(): Seconds {\n\t\treturn 1 / this.context.sampleRate;\n\t}\n\n\t/**\n\t * The number of seconds of 1 processing block (128 samples)\n\t */\n\tget blockTime(): Seconds {\n\t\treturn 128 / this.context.sampleRate;\n\t}\n\n\t/**\n\t * Convert the incoming time to seconds\n\t */\n\ttoSeconds(time?: Time): Seconds {\n\t\treturn new TimeClass(this.context, time).toSeconds();\n\t}\n\n\t/**\n\t * Convert the input to a frequency number\n\t */\n\ttoFrequency(freq: Frequency): Hertz {\n\t\treturn new FrequencyClass(this.context, freq).toFrequency();\n\t}\n\n\t/**\n\t * Convert the input time into ticks\n\t */\n\ttoTicks(time?: Time | TimeClass): Ticks {\n\t\treturn new TransportTimeClass(this.context, time).toTicks();\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tGET/SET\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Get the object's attributes.\n\t * @example\n\t * osc.get();\n\t * //returns {\"type\" : \"sine\", \"frequency\" : 440, ...etc}\n\t */\n\tget(): Options {\n\t\tconst defaults = getDefaultsFromInstance(this) as Options;\n\t\tObject.keys(defaults).forEach(attribute => {\n\t\t\tif (Reflect.has(this, attribute)) {\n\t\t\t\tconst member = this[attribute];\n\t\t\t\tif (isDefined(member) && isDefined(member.value) && isDefined(member.setValueAtTime)) {\n\t\t\t\t\tdefaults[attribute] = member.value;\n\t\t\t\t} else if (member instanceof ToneWithContext) {\n\t\t\t\t\tdefaults[attribute] = member.get();\n\t\t\t\t// otherwise make sure it's a serializable type\n\t\t\t\t} else if (isArray(member) || isNumber(member) || isString(member) || isBoolean(member)) {\n\t\t\t\t\tdefaults[attribute] = member;\n\t\t\t\t} else {\n\t\t\t\t\t// remove all undefined and unserializable attributes\n\t\t\t\t\tdelete defaults[attribute];\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn defaults;\n\t}\n\n\t/**\n\t * Set the parameters at once. Either pass in an\n\t * object mapping parameters to values, or to set a\n\t * single parameter, by passing in a string and value.\n\t * The last argument is an optional ramp time which\n\t * will ramp any signal values to their destination value\n\t * over the duration of the rampTime.\n\t * @param  params\n\t * @example\n\t * //set values using an object\n\t * filter.set({\n\t * \t\"frequency\" : 300,\n\t * \t\"type\" : \"highpass\"\n\t * });\n\t */\n\tset(props: RecursivePartial<Options>): this {\n\t\tObject.keys(props).forEach(attribute => {\n\t\t\tif (Reflect.has(this, attribute) && isDefined(this[attribute])) {\n\t\t\t\tif (this[attribute] && isDefined(this[attribute].value) && isDefined(this[attribute].setValueAtTime)) {\n\t\t\t\t\t// small optimization\n\t\t\t\t\tif (this[attribute].value !== props[attribute]) {\n\t\t\t\t\t\tthis[attribute].value = props[attribute];\n\t\t\t\t\t}\n\t\t\t\t} else if (this[attribute] instanceof ToneWithContext) {\n\t\t\t\t\tthis[attribute].set(props[attribute]);\n\t\t\t\t} else {\n\t\t\t\t\tthis[attribute] = props[attribute];\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n}\n","import { AbstractParam } from \"../context/AbstractParam\";\nimport { dbToGain, gainToDb } from \"../type/Conversions\";\nimport { AudioRange, Decibels, Frequency, NormalRange, Positive, Time, Unit, UnitName } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isDefined, isFunction } from \"../util/TypeCheck\";\nimport { ToneWithContext, ToneWithContextOptions } from \"./ToneWithContext\";\n\nexport interface ParamOptions extends ToneWithContextOptions {\n\tunits: UnitName;\n\tvalue?: any;\n\tparam: AudioParam;\n\tconvert: boolean;\n}\n\n/**\n * the possible automation types\n */\ntype AutomationType = \"linear\" | \"exponential\" | \"setValue\" | \"setTarget\" | \"cancel\";\n\n/**\n * The events on the automation\n */\nexport interface AutomationEvent {\n\ttype: AutomationType;\n\ttime: number;\n\tvalue: number;\n\tconstant?: number;\n}\n\n/**\n *  Param wraps the native Web Audio's AudioParam to provide\n * additional unit conversion functionality. It also\n * serves as a base-class for classes which have a single,\n * automatable parameter.\n */\nexport class Param<Type extends Unit = number>\nextends ToneWithContext<ParamOptions>\nimplements AbstractParam<Type> {\n\n\tname = \"Param\";\n\n\tstatic getDefaults(): ParamOptions {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tconvert: true,\n\t\t\tunits: \"number\" as UnitName,\n\t\t} as ParamOptions);\n\t}\n\n\t/**\n\t * The input connection\n\t */\n\treadonly input: AudioParam;\n\treadonly units: UnitName;\n\tconvert: boolean;\n\toverridden: boolean = false;\n\n\t/**\n\t * The timeline which tracks all of the automations.\n\t */\n\tprotected _events: Timeline<AutomationEvent>;\n\n\t/**\n\t *  The native parameter to control\n\t */\n\tprotected _param: AudioParam;\n\n\t/**\n\t *  The default value before anything is assigned\n\t */\n\tprotected _initialValue: number;\n\n\t/**\n\t *  The minimum output value\n\t */\n\tprivate _minOutput = 1e-5;\n\n\tconstructor(param: AudioParam, units?: Unit, convert?: boolean);\n\tconstructor(options: Partial<ParamOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Param.getDefaults(), arguments, [\"param\", \"units\", \"convert\"]));\n\n\t\tconst options = optionsFromArguments(Param.getDefaults(), arguments, [\"param\", \"units\", \"convert\"]);\n\n\t\tthis.assert(isDefined(options.param) && isAudioParam(options.param), \"param must be an AudioParam\");\n\n\t\t// initialize\n\t\tthis._param = this.input = options.param;\n\t\tthis._events = new Timeline<AutomationEvent>(1000);\n\t\tthis._initialValue = this._param.defaultValue;\n\t\tthis.units = options.units;\n\t\tthis.convert = options.convert;\n\n\t\t// if the value is defined, set it immediately\n\t\tif (isDefined(options.value) && options.value !== this._toType(this._initialValue)) {\n\t\t\tthis.setValueAtTime(options.value, 0);\n\t\t}\n\t}\n\n\tget value(): Type {\n\t\tconst now = this.now();\n\t\treturn this.getValueAtTime(now);\n\t}\n\tset value(value: Type) {\n\t\tthis._initialValue = this._fromType(value);\n\t\tthis.cancelScheduledValues(this.now());\n\t\tthis.setValueAtTime(value, this.now());\n\t}\n\n\tget minValue(): number {\n\t\tif (this.units === \"time\" || this.units === \"frequency\" ||\n\t\t\tthis.units === \"normalRange\" || this.units === \"positive\" ||\n\t\t\tthis.units === \"transportTime\" || this.units === \"ticks\" ||\n\t\t\tthis.units === \"bpm\" || this.units === \"hertz\" || this.units === \"samples\") {\n\t\t\treturn 0;\n\t\t} else if (this.units === \"audioRange\") {\n\t\t\treturn -1;\n\t\t} else if (this.units === \"decibels\") {\n\t\t\treturn -Infinity;\n\t\t} else {\n\t\t\treturn this._param.minValue;\n\t\t}\n\t}\n\n\tget maxValue(): number {\n\t\tif (this.units === \"normalRange\" ||\n\t\t\tthis.units === \"audioRange\") {\n\t\t\treturn 1;\n\t\t} else {\n\t\t\treturn this._param.maxValue;\n\t\t}\n\t}\n\n\t/**\n\t * Type guard based on the unit name\n\t */\n\tprivate _is<T>(arg: any, type: UnitName): arg is T {\n\t\treturn this.units === type;\n\t}\n\n\t/**\n\t *  Convert the given value from the type specified by Param.units\n\t *  into the destination value (such as Gain or Frequency).\n\t */\n\tprotected _fromType(val: Type): number {\n\t\tif (this.convert && !this.overridden) {\n\t\t\tif (this._is<Time>(val, \"time\")) {\n\t\t\t\treturn this.toSeconds(val);\n\t\t\t} else if (this._is<Decibels>(val, \"decibels\")) {\n\t\t\t\treturn dbToGain(val);\n\t\t\t} else if (this._is<Frequency>(val, \"frequency\")) {\n\t\t\t\treturn this.toFrequency(val);\n\t\t\t} else if (this._is<NormalRange>(val, \"normalRange\")) {\n\t\t\t\treturn Math.min(Math.max(val, 0), 1);\n\t\t\t} else if (this._is<AudioRange>(val, \"audioRange\")) {\n\t\t\t\treturn Math.min(Math.max(val, -1), 1);\n\t\t\t} else if (this._is<Positive>(val, \"positive\")) {\n\t\t\t\treturn Math.max(val, 0);\n\t\t\t} else if (this._is<number>(val, \"number\")) {\n\t\t\t\treturn val;\n\t\t\t} else {\n\t\t\t\treturn val as number;\n\t\t\t}\n\t\t} else {\n\t\t\treturn val as number;\n\t\t}\n\t}\n\n\t/**\n\t * Convert the parameters value into the units specified by Param.units.\n\t */\n\tprotected _toType(val: number): Type {\n\t\tif (this.convert && this.units === \"decibels\") {\n\t\t\treturn gainToDb(val) as Type;\n\t\t} else {\n\t\t\treturn val as Type;\n\t\t}\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// ABSTRACT PARAM INTERFACE\n\t// all docs are generated from ParamInterface.ts\n\t///////////////////////////////////////////////////////////////////////////\n\n\tsetValueAtTime(value: Type, time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst numericValue = this._fromType(value);\n\t\tthis.assert(isFinite(numericValue) && isFinite(computedTime),\n\t\t\t`Invalid argument(s) to setValueAtTime: ${JSON.stringify(value)}, ${JSON.stringify(time)}`);\n\n\t\tthis.log(this.units, \"setValue\", value, computedTime);\n\t\tthis._events.add({\n\t\t\ttime: computedTime,\n\t\t\ttype: \"setValue\",\n\t\t\tvalue: numericValue,\n\t\t});\n\t\tthis._param.setValueAtTime(numericValue, computedTime);\n\t\treturn this;\n\t}\n\n\tgetValueAtTime(time: Time): Type {\n\t\tconst computedTime = Math.max(this.toSeconds(time), 0);\n\t\tconst after = this._events.getAfter(computedTime);\n\t\tconst before = this._events.get(computedTime);\n\t\tlet value = this._initialValue;\n\t\t// if it was set by\n\t\tif (before === null) {\n\t\t\tvalue = this._initialValue;\n\t\t} else if (before.type === \"setTarget\" && (after === null || after.type === \"setValue\")) {\n\t\t\tconst previous = this._events.getBefore(before.time);\n\t\t\tlet previousVal;\n\t\t\tif (previous === null) {\n\t\t\t\tpreviousVal = this._initialValue;\n\t\t\t} else {\n\t\t\t\tpreviousVal = previous.value;\n\t\t\t}\n\t\t\tif (isDefined(before.constant)) {\n\t\t\t\tvalue = this._exponentialApproach(before.time, previousVal, before.value, before.constant, computedTime);\n\t\t\t}\n\t\t} else if (after === null) {\n\t\t\tvalue = before.value;\n\t\t} else if (after.type === \"linear\" || after.type === \"exponential\") {\n\t\t\tlet beforeValue = before.value;\n\t\t\tif (before.type === \"setTarget\") {\n\t\t\t\tconst previous = this._events.getBefore(before.time);\n\t\t\t\tif (previous === null) {\n\t\t\t\t\tbeforeValue = this._initialValue;\n\t\t\t\t} else {\n\t\t\t\t\tbeforeValue = previous.value;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (after.type === \"linear\") {\n\t\t\t\tvalue = this._linearInterpolate(before.time, beforeValue, after.time, after.value, computedTime);\n\t\t\t} else {\n\t\t\t\tvalue = this._exponentialInterpolate(before.time, beforeValue, after.time, after.value, computedTime);\n\t\t\t}\n\t\t} else {\n\t\t\tvalue = before.value;\n\t\t}\n\t\treturn this._toType(value);\n\t}\n\n\tsetRampPoint(time: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tlet currentVal = this.getValueAtTime(time);\n\t\tthis.cancelAndHoldAtTime(time);\n\t\tif (this._fromType(currentVal) === 0) {\n\t\t\tcurrentVal = this._toType(this._minOutput);\n\t\t}\n\t\tthis.setValueAtTime(currentVal, time);\n\t\treturn this;\n\t}\n\n\tlinearRampToValueAtTime(value: Type, endTime: Time): this {\n\t\tconst numericValue = this._fromType(value);\n\t\tconst computedTime = this.toSeconds(endTime);\n\t\tthis.assert(isFinite(numericValue) && isFinite(computedTime),\n\t\t\t`Invalid argument(s) to linearRampToValueAtTime: ${JSON.stringify(value)}, ${JSON.stringify(endTime)}`);\n\t\tthis._events.add({\n\t\t\ttime: computedTime,\n\t\t\ttype: \"linear\",\n\t\t\tvalue : numericValue,\n\t\t});\n\t\tthis.log(this.units, \"linear\", value, computedTime);\n\t\tthis._param.linearRampToValueAtTime(numericValue, computedTime);\n\t\treturn this;\n\t}\n\n\texponentialRampToValueAtTime(value: Type, endTime: Time): this {\n\t\tlet numericValue = this._fromType(value);\n\t\tnumericValue = Math.max(this._minOutput, numericValue);\n\t\tconst computedTime = this.toSeconds(endTime);\n\t\tthis.assert(isFinite(numericValue) && isFinite(computedTime),\n\t\t\t`Invalid argument(s) to exponentialRampToValueAtTime: ${JSON.stringify(value)}, ${JSON.stringify(endTime)}`);\n\t\t// store the event\n\t\tthis._events.add({\n\t\t\ttime: computedTime,\n\t\t\ttype: \"exponential\",\n\t\t\tvalue : numericValue,\n\t\t});\n\t\tthis.log(this.units, \"exponential\", value, computedTime);\n\t\tthis._param.exponentialRampToValueAtTime(numericValue, computedTime);\n\t\treturn this;\n\t}\n\n\texponentialRampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tstartTime = this.toSeconds(startTime);\n\t\tthis.setRampPoint(startTime);\n\t\tthis.exponentialRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n\t\treturn this;\n\t}\n\n\tlinearRampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tstartTime = this.toSeconds(startTime);\n\t\tthis.setRampPoint(startTime);\n\t\tthis.linearRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n\t\treturn this;\n\t}\n\n\ttargetRampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tstartTime = this.toSeconds(startTime);\n\t\tthis.setRampPoint(startTime);\n\t\tthis.exponentialApproachValueAtTime(value, startTime, rampTime);\n\t\treturn this;\n\t}\n\n\texponentialApproachValueAtTime(value: Type, time: Time, rampTime: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\trampTime = this.toSeconds(rampTime);\n\t\tconst timeConstant = Math.log(rampTime + 1) / Math.log(200);\n\t\tthis.setTargetAtTime(value, time, timeConstant);\n\t\t// at 90% start a linear ramp to the final value\n\t\tthis.cancelAndHoldAtTime(time + rampTime * 0.9);\n\t\tthis.linearRampToValueAtTime(value, time + rampTime);\n\t\treturn this;\n\t}\n\n\tsetTargetAtTime(value: Type, startTime: Time, timeConstant: Positive): this {\n\t\tconst numericValue = this._fromType(value);\n\t\t// The value will never be able to approach without timeConstant > 0.\n\t\tthis.assert(isFinite(timeConstant) && timeConstant > 0, \"timeConstant must be a number greater than 0\");\n\t\tconst computedTime = this.toSeconds(startTime);\n\t\tthis.assert(isFinite(numericValue) && isFinite(computedTime),\n\t\t\t`Invalid argument(s) to setTargetAtTime: ${JSON.stringify(value)}, ${JSON.stringify(startTime)}`);\n\t\tthis._events.add({\n\t\t\tconstant: timeConstant,\n\t\t\ttime: computedTime,\n\t\t\ttype: \"setTarget\",\n\t\t\tvalue: numericValue,\n\t\t});\n\t\tthis.log(this.units, \"setTarget\", value, computedTime, timeConstant);\n\t\tthis._param.setTargetAtTime(numericValue, computedTime, timeConstant);\n\t\treturn this;\n\t}\n\n\tsetValueCurveAtTime(values: Type[], startTime: Time, duration: Time, scaling: number = 1): this {\n\t\tduration = this.toSeconds(duration);\n\t\tstartTime = this.toSeconds(startTime);\n\t\tconst startingValue = this._fromType(values[0]) * scaling;\n\t\tthis.setValueAtTime(this._toType(startingValue), startTime);\n\t\tconst segTime = duration / (values.length - 1);\n\t\tfor (let i = 1; i < values.length; i++) {\n\t\t\tconst numericValue = this._fromType(values[i]) * scaling;\n\t\t\tthis.linearRampToValueAtTime(this._toType(numericValue), startTime + i * segTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\tcancelScheduledValues(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis.assert(isFinite(computedTime), `Invalid argument to cancelScheduledValues: ${JSON.stringify(time)}`);\n\t\tthis._events.cancel(computedTime);\n\t\tthis._param.cancelScheduledValues(computedTime);\n\t\tthis.log(this.units, \"cancel\", computedTime);\n\t\treturn this;\n\t}\n\n\tcancelAndHoldAtTime(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst valueAtTime = this._fromType(this.getValueAtTime(computedTime));\n\t\t// remove the schedule events\n\t\tthis.assert(isFinite(computedTime), `Invalid argument to cancelAndHoldAtTime: ${JSON.stringify(time)}`);\n\n\t\tthis.log(this.units, \"cancelAndHoldAtTime\", computedTime, \"value=\" + valueAtTime);\n\n\t\tthis._param.cancelScheduledValues(computedTime);\n\n\t\t// if there is an event at the given computedTime\n\t\t// and that even is not a \"set\"\n\t\tconst before = this._events.get(computedTime);\n\t\tconst after = this._events.getAfter(computedTime);\n\t\tif (before && before.time === computedTime) {\n\t\t\t// remove everything after\n\t\t\tif (after) {\n\t\t\t\tthis._events.cancel(after.time);\n\t\t\t} else {\n\t\t\t\tthis._events.cancel(computedTime + this.sampleTime);\n\t\t\t}\n\t\t} else if (after) {\n\t\t\t// cancel the next event(s)\n\t\t\tthis._events.cancel(after.time);\n\t\t\tif (after.type === \"linear\") {\n\t\t\t\tthis.linearRampToValueAtTime(this._toType(valueAtTime), computedTime);\n\t\t\t} else if (after.type === \"exponential\") {\n\t\t\t\tthis.exponentialRampToValueAtTime(this._toType(valueAtTime), computedTime);\n\t\t\t}\n\t\t}\n\n\t\t// set the value at the given time\n\t\tthis._events.add({\n\t\t\ttime: computedTime,\n\t\t\ttype: \"setValue\",\n\t\t\tvalue: valueAtTime,\n\t\t});\n\t\tthis._param.setValueAtTime(valueAtTime, computedTime);\n\t\treturn this;\n\t}\n\n\trampTo(value: Type, rampTime: Time = 0.1, startTime?: Time): this {\n\t\tif (this.units === \"frequency\" || this.units === \"bpm\" || this.units === \"decibels\") {\n\t\t\tthis.exponentialRampTo(value, rampTime, startTime);\n\t\t} else {\n\t\t\tthis.linearRampTo(value, rampTime, startTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._events.dispose();\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tAUTOMATION CURVE CALCULATIONS\n\t// \tMIT License, copyright (c) 2014 Jordan Santell\n\t///////////////////////////////////////////////////////////////////////////\n\n\t// Calculates the the value along the curve produced by setTargetAtTime\n\tprotected _exponentialApproach(t0: number, v0: number, v1: number, timeConstant: number, t: number): number {\n\t\treturn v1 + (v0 - v1) * Math.exp(-(t - t0) / timeConstant);\n\t}\n\n\t// Calculates the the value along the curve produced by linearRampToValueAtTime\n\tprotected _linearInterpolate(t0: number, v0: number, t1: number, v1: number, t: number): number {\n\t\treturn v0 + (v1 - v0) * ((t - t0) / (t1 - t0));\n\t}\n\n\t// Calculates the the value along the curve produced by exponentialRampToValueAtTime\n\tprotected _exponentialInterpolate(t0: number, v0: number, t1: number, v1: number, t: number): number {\n\t\treturn v0 * Math.pow(v1 / v0, (t - t0) / (t1 - t0));\n\t}\n}\n\n/**\n * Test if the given value is an instanceof AudioParam\n */\nexport function isAudioParam(arg: any): arg is AudioParam {\n\treturn arg instanceof Object &&  Reflect.has(arg, \"value\") &&\n\t\t!Reflect.has(arg, \"input\") &&\n\t\tisFunction(arg.setValueAtTime);\n}\n","import { Unit } from \"../type/Units\";\nimport { assert } from \"../util/Debug\";\nimport { isDefined } from \"../util/TypeCheck\";\nimport { isAudioContext } from \"./Context\";\nimport { isOfflineAudioContext } from \"./OfflineContext\";\nimport { isAudioParam, Param } from \"./Param\";\nimport { ToneWithContext, ToneWithContextOptions } from \"./ToneWithContext\";\n\nexport type InputNode = ToneAudioNode | AudioNode |  Param<Unit> | AudioParam;\nexport type OutputNode = ToneAudioNode | AudioNode;\n\ninterface ChannelProperties {\n\tchannelCount: number;\n\tchannelCountMode: ChannelCountMode;\n\tchannelInterpretation: ChannelInterpretation;\n}\n\n/**\n * The possible options for this node\n */\nexport type ToneAudioNodeOptions = ToneWithContextOptions;\n\n/**\n *  ToneAudioNode is the base class for classes which process audio.\n */\nexport abstract class ToneAudioNode<Options extends ToneAudioNodeOptions = ToneAudioNodeOptions>\nextends ToneWithContext<Options> {\n\n\tabstract name = \"AudioNode\";\n\n\t/**\n\t * The input node or nodes. If the object is a source,\n\t * it does not have any input and this.input is undefined.\n\t */\n\tabstract input: InputNode | undefined;\n\n\t/**\n\t * The output nodes. If the object is a sink,\n\t * it does not have any output and this.output is undefined.\n\t */\n\tabstract output: OutputNode | undefined;\n\n\t/**\n\t *  The number of inputs feeding into the AudioNode.\n\t *  For source nodes, this will be 0.\n\t */\n\tget numberOfInputs(): number {\n\t\tif (isDefined(this.input)) {\n\t\t\tif (isAudioParam(this.input) || this.input instanceof Param) {\n\t\t\t\treturn 1;\n\t\t\t} else {\n\t\t\t\treturn this.input.numberOfInputs;\n\t\t\t}\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t *  The number of outputs of the AudioNode.\n\t */\n\tget numberOfOutputs(): number {\n\t\tif (isDefined(this.output)) {\n\t\t\treturn this.output.numberOfOutputs;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * List all of the node that must be set to match the ChannelProperties\n\t */\n\tprotected _internalChannels: OutputNode[] = [];\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// AUDIO PROPERTIES\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Used to decide which nodes to get/set properties on\n\t */\n\tprivate _isAudioNode(node: any): node is AudioNode | ToneAudioNode {\n\t\treturn isDefined(node) && (node instanceof ToneAudioNode || isAudioNode(node));\n\t}\n\n\t/**\n\t * Get all of the audio nodes (either internal or input/output) which together\n\t * make up how the class node responds to channel input/output\n\t */\n\tprivate _getInternalNodes(): OutputNode[] {\n\t\tconst nodeList = this._internalChannels.slice(0);\n\t\tif (this._isAudioNode(this.input)) {\n\t\t\tnodeList.push(this.input);\n\t\t}\n\t\tif (this._isAudioNode(this.output)) {\n\t\t\tif (this.input !== this.output) {\n\t\t\t\tnodeList.push(this.output);\n\t\t\t}\n\t\t}\n\t\treturn nodeList;\n\t}\n\n\t/**\n\t * Set the audio options for this node such as channelInterpretation\n\t * channelCount, etc.\n\t * @param options\n\t */\n\tprivate _setChannelProperties(options: ChannelProperties): void {\n\t\tconst nodeList = this._getInternalNodes();\n\t\tnodeList.forEach(node => {\n\t\t\tnode.channelCount = options.channelCount;\n\t\t\tnode.channelCountMode = options.channelCountMode;\n\t\t\tnode.channelInterpretation = options.channelInterpretation;\n\t\t});\n\t}\n\n\t/**\n\t * Get the current audio options for this node such as channelInterpretation\n\t * channelCount, etc.\n\t */\n\tprivate _getChannelProperties(): ChannelProperties {\n\t\tconst nodeList = this._getInternalNodes();\n\t\tthis.assert(nodeList.length > 0, \"ToneAudioNode does not have any internal nodes\");\n\t\t// use the first node to get properties\n\t\t// they should all be the same\n\t\tconst node = nodeList[0];\n\t\treturn {\n\t\t\tchannelCount: node.channelCount,\n\t\t\tchannelCountMode: node.channelCountMode,\n\t\t\tchannelInterpretation: node.channelInterpretation,\n\t\t};\n\t}\n\n\t/**\n\t *  channelCount is the number of channels used when up-mixing and down-mixing\n\t *  connections to any inputs to the node. The default value is 2 except for\n\t *  specific nodes where its value is specially determined.\n\t */\n\tget channelCount(): number {\n\t\treturn this._getChannelProperties().channelCount;\n\t}\n\tset channelCount(channelCount) {\n\t\tconst props = this._getChannelProperties();\n\t\t// merge it with the other properties\n\t\tthis._setChannelProperties(Object.assign(props, { channelCount }));\n\t}\n\n\t/**\n\t *  channelCountMode determines how channels will be counted when up-mixing and\n\t *  down-mixing connections to any inputs to the node.\n\t *  The default value is \"max\". This attribute has no effect for nodes with no inputs.\n\t * * \"max\" - computedNumberOfChannels is the maximum of the number of channels of all\n\t * \t\tconnections to an input. In this mode channelCount is ignored.\n\t * * \"clamped-max\" - computedNumberOfChannels is determined as for \"max\" and then clamped\n\t * \t\tto a maximum value of the given channelCount.\n\t * * \"explicit\" - computedNumberOfChannels is the exact value as specified by the channelCount.\n\t */\n\tget channelCountMode(): ChannelCountMode {\n\t\treturn this._getChannelProperties().channelCountMode;\n\t}\n\tset channelCountMode(channelCountMode) {\n\t\tconst props = this._getChannelProperties();\n\t\t// merge it with the other properties\n\t\tthis._setChannelProperties(Object.assign(props, { channelCountMode }));\n\t}\n\n\t/**\n\t *  channelInterpretation determines how individual channels will be treated\n\t *  when up-mixing and down-mixing connections to any inputs to the node.\n\t *  The default value is \"speakers\".\n\t */\n\tget channelInterpretation(): ChannelInterpretation {\n\t\treturn this._getChannelProperties().channelInterpretation;\n\t}\n\tset channelInterpretation(channelInterpretation) {\n\t\tconst props = this._getChannelProperties();\n\t\t// merge it with the other properties\n\t\tthis._setChannelProperties(Object.assign(props, { channelInterpretation }));\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// CONNECTIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * connect the output of a ToneAudioNode to an AudioParam, AudioNode, or ToneAudioNode\n\t * @param unit The output to connect to\n\t * @param outputNum The output to connect from\n\t * @param inputNum The input to connect to\n\t */\n\tconnect(destination: InputNode, outputNum = 0, inputNum = 0): this {\n\t\tconnect(this, destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Connect the output to the context's destination node.\n\t */\n\ttoDestination(): this {\n\t\tthis.connect(this.context.destination);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Connect the output to the context's destination node.\n\t * alias for {@link toDestination}\n\t * @deprecated\n\t */\n\ttoMaster(): this {\n\t\tconsole.warn(\"toMaster() has been renamed toDestination()\");\n\t\treturn this.toDestination();\n\t}\n\n\t/**\n\t *  disconnect the output\n\t *  @param output Either the output index to disconnect if the output is an array, or the node to disconnect from.\n\t */\n\tdisconnect(destination?: InputNode, outputNum = 0, inputNum = 0): this {\n\t\tdisconnect(this, destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Connect the output of this node to the rest of the nodes in series.\n\t *  @example\n\t *  //connect a node to an effect, panVol and then to the master output\n\t *  node.chain(effect, panVol, Tone.Destination);\n\t */\n\tchain(...nodes: InputNode[]): this {\n\t\tconnectSeries(this, ...nodes);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  connect the output of this node to the rest of the nodes in parallel.\n\t */\n\tfan(...nodes: InputNode[]): this {\n\t\tnodes.forEach(node => this.connect(node));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Dispose and disconnect\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (isDefined(this.input)) {\n\t\t\tif (this.input instanceof ToneAudioNode) {\n\t\t\t\tthis.input.dispose();\n\t\t\t} else if (isAudioNode(this.input)) {\n\t\t\t\tthis.input.disconnect();\n\t\t\t}\n\t\t}\n\t\tif (isDefined(this.output)) {\n\t\t\tif (this.output instanceof ToneAudioNode) {\n\t\t\t\tthis.output.dispose();\n\t\t\t} else if (isAudioNode(this.output)) {\n\t\t\t\tthis.output.disconnect();\n\t\t\t}\n\t\t}\n\t\tthis._internalChannels = [];\n\t\treturn this;\n\t}\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// CONNECTIONS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n *  connect together all of the arguments in series\n *  @param nodes\n */\nexport function connectSeries(...nodes: InputNode[]): void {\n\tconst first = nodes.shift();\n\tnodes.reduce((prev, current) => {\n\t\tif (prev instanceof ToneAudioNode) {\n\t\t\tprev.connect(current);\n\t\t} else if (isAudioNode(prev)) {\n\t\t\tconnect(prev, current);\n\t\t}\n\t\treturn current;\n\t}, first);\n}\n\n/**\n * Connect two nodes together so that signal flows from the\n * first node to the second. Optionally specify the input and output channels.\n * @param srcNode The source node\n * @param dstNode The destination node\n * @param outputNumber The output channel of the srcNode\n * @param inputNumber The input channel of the dstNode\n */\nexport function connect(srcNode: OutputNode, dstNode: InputNode, outputNumber = 0, inputNumber = 0): void {\n\n\tassert(isDefined(srcNode), \"Cannot connect from undefined node\");\n\tassert(isDefined(dstNode), \"Cannot connect to undefined node\");\n\n\tif (dstNode instanceof ToneAudioNode || isAudioNode(dstNode)) {\n\t\tassert(dstNode.numberOfInputs > 0, \"Cannot connect to node with no inputs\");\n\t}\n\tassert(srcNode.numberOfOutputs > 0, \"Cannot connect from node with no outputs\");\n\n\t// resolve the input of the dstNode\n\twhile (dstNode instanceof ToneAudioNode || dstNode instanceof Param) {\n\t\tif (isDefined(dstNode.input)) {\n\t\t\tdstNode = dstNode.input;\n\t\t}\n\t}\n\n\twhile (srcNode instanceof ToneAudioNode) {\n\t\tif (isDefined(srcNode.output)) {\n\t\t\tsrcNode = srcNode.output;\n\t\t}\n\t}\n\n\t// make the connection\n\tif (isAudioParam(dstNode)) {\n\t\tsrcNode.connect(dstNode as AudioParam, outputNumber);\n\t} else {\n\t\tsrcNode.connect(dstNode, outputNumber, inputNumber);\n\t}\n}\n\n/**\n * Disconnect a node from all nodes or optionally include a destination node and input/output channels.\n * @param srcNode The source node\n * @param dstNode The destination node\n * @param outputNumber The output channel of the srcNode\n * @param inputNumber The input channel of the dstNode\n */\nexport function disconnect(\n\tsrcNode: OutputNode,\n\tdstNode?: InputNode,\n\toutputNumber = 0,\n\tinputNumber = 0,\n): void {\n\n\t// resolve the destination node\n\tif (isDefined(dstNode)) {\n\t\twhile (dstNode instanceof ToneAudioNode) {\n\t\t\tif (dstNode.input) {\n\t\t\t\tdstNode = dstNode.input;\n\t\t\t}\n\t\t}\n\t}\n\n\t// resolve the src node\n\twhile (!(isAudioNode(srcNode))) {\n\t\tif (isDefined(srcNode.output)) {\n\t\t\tsrcNode = srcNode.output;\n\t\t}\n\t}\n\n\tif (isAudioParam(dstNode)) {\n\t\tsrcNode.disconnect(dstNode as AudioParam, outputNumber);\n\t} else if (isAudioNode(dstNode)) {\n\t\tsrcNode.disconnect(dstNode, outputNumber, inputNumber);\n\t} else {\n\t\tsrcNode.disconnect();\n\t}\n}\n\n/**\n * Test if the given value is an instanceof AudioNode\n */\nexport function isAudioNode(arg: any): arg is AudioNode {\n\treturn arg instanceof Object && Reflect.has(arg, \"context\") &&\n\t\t(isAudioContext(arg.context) || isOfflineAudioContext(arg.context));\n}\n","import { isArray } from \"./TypeCheck\";\n\n// return an interface which excludes certain keys\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n\n/**\n *  Make the property not writable using `defineProperty`. Internal use only.\n */\nexport function readOnly(target: object, property: string | string[]): void {\n\tif (isArray(property)) {\n\t\tproperty.forEach(str => readOnly(target, str));\n\t} else {\n\t\tObject.defineProperty(target, property, {\n\t\t\tenumerable: true,\n\t\t\twritable: false,\n\t\t});\n\t}\n}\n\n/**\n *  Make an attribute writeable. Internal use only.\n */\nexport function writable(target: object, property: string | string[]): void {\n\tif (isArray(property)) {\n\t\tproperty.forEach(str => writable(target, str));\n\t} else {\n\t\tObject.defineProperty(target, property, {\n\t\t\twritable: true,\n\t\t});\n\t}\n}\n\nexport const noOp: (...args: any[]) => any = () => {\n\t// no op!\n};\n\n/**\n * Recursive Partial taken from here: https://stackoverflow.com/a/51365037\n */\nexport type RecursivePartial<T> = {\n\t[P in keyof T]?:\n\tT[P] extends Array<infer U> ? Array<RecursivePartial<U>> :\n\tT[P] extends object ? RecursivePartial<T[P]> :\n\tT[P];\n};\n","import { Param } from \"../context/Param\";\nimport { GainFactor, Unit, UnitName } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"./ToneAudioNode\";\n\ninterface GainOptions extends ToneAudioNodeOptions {\n\tgain: number;\n\tunits: UnitName;\n\tconvert: boolean;\n}\n\n/**\n * A thin wrapper around the Native Web Audio GainNode.\n * The GainNode is a basic building block of the Web Audio\n * API and is useful for routing audio and adjusting gains.\n * @param  gain The initial gain of the GainNode\n * @param units The units of the gain parameter.\n */\nexport class Gain<Type extends Unit = GainFactor> extends ToneAudioNode<GainOptions> {\n\n\treadonly name = \"Gain\";\n\n\t/**\n\t *  The gain parameter of the gain node.\n\t */\n\treadonly gain: Param<Type>;\n\n\t/**\n\t * The wrapped GainNode.\n\t */\n\tprivate _gainNode: GainNode = this.context.createGain();\n\n\t// input = output\n\treadonly input: GainNode = this._gainNode;\n\treadonly output: GainNode = this._gainNode;\n\n\tconstructor(gain?: GainFactor, units?: Unit);\n\tconstructor(options?: Partial<GainOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Gain.getDefaults(), arguments, [\"gain\", \"units\"]));\n\t\tconst options = optionsFromArguments(Gain.getDefaults(), arguments, [\"gain\", \"units\"]);\n\n\t\tthis.gain = new Param({\n\t\t\tcontext : this.context,\n\t\t\tconvert : options.convert,\n\t\t\tparam : this._gainNode.gain,\n\t\t\tunits : options.units,\n\t\t\tvalue : options.gain,\n\t\t});\n\t\treadOnly(this, \"gain\");\n\t}\n\n\tstatic getDefaults(): GainOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tconvert : true,\n\t\t\tgain : 1,\n\t\t\tunits : \"gain\" as UnitName,\n\t\t});\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._gainNode.disconnect();\n\t\tthis.gain.dispose();\n\t\treturn this;\n\t}\n}\n","import { getContext } from \"../Global\";\nimport { Tone } from \"../Tone\";\nimport { Samples, Seconds, Time } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { noOp } from \"../util/Interface\";\nimport { isArray, isNumber, isString } from \"../util/TypeCheck\";\n\ninterface ToneAudioBufferOptions {\n\turl?: string | AudioBuffer | ToneAudioBuffer;\n\treverse: boolean;\n\tonload: (buffer?: ToneAudioBuffer) => void;\n\tonerror: (error: Error) => void;\n}\n\n/**\n * AudioBuffer loading and storage. ToneAudioBuffer is used internally by all\n * classes that make requests for audio files such as Tone.Player,\n * Tone.Sampler and Tone.Convolver.\n *\n * Aside from load callbacks from individual buffers, ToneAudioBuffer\n * provides events which keep track of the loading progress\n * of _all_ of the buffers. These are ToneAudioBuffer.on(\"load\" / \"progress\" / \"error\")\n *\n * @param url The url to load, or the audio buffer to set.\n * @param onload A callback which is invoked after the buffer is loaded.\n *                            It's recommended to use `ToneAudioBuffer.on('load', callback)` instead\n *                            since it will give you a callback when _all_ buffers are loaded.\n * @param onerror The callback to invoke if there is an error\n * @example\n * var buffer = new ToneAudioBuffer(\"path/to/sound.mp3\", function(){\n * \t//the buffer is now available.\n * \tvar buff = buffer.get();\n * });\n * @example\n * //can load provide fallback extension types if the first type is not supported.\n * var buffer = new ToneAudioBuffer(\"path/to/sound.[mp3|ogg|wav]\");\n */\nexport class ToneAudioBuffer extends Tone {\n\n\tname = \"ToneAudioBuffer\";\n\n\t/**\n\t *  stores the loaded AudioBuffer\n\t */\n\tprivate _buffer?: AudioBuffer;\n\n\t/**\n\t *  indicates if the buffer should be reversed or not\n\t */\n\tprivate _reversed!: boolean;\n\n\t/**\n\t * Callback when the buffer is loaded.\n\t */\n\tonload: (buffer: ToneAudioBuffer) => void = noOp;\n\n\tconstructor(options?: Partial<ToneAudioBufferOptions>);\n\tconstructor(\n\t\turl?: string | ToneAudioBuffer | AudioBuffer,\n\t\tonload?: (buffer: ToneAudioBuffer) => void,\n\t\tonerror?: (error: Error) => void,\n\t);\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tconst options = optionsFromArguments(ToneAudioBuffer.getDefaults(), arguments, [\"url\", \"onload\", \"onerror\"]);\n\n\t\tthis.reverse = options.reverse;\n\t\tthis.onload = options.onload;\n\n\t\tif (options.url && isAudioBuffer(options.url) || options.url instanceof ToneAudioBuffer) {\n\t\t\tthis.set(options.url);\n\t\t} else if (isString(options.url)) {\n\t\t\t// initiate the download\n\t\t\tthis.load(options.url).catch(options.onerror);\n\t\t}\n\t}\n\n\tstatic getDefaults(): ToneAudioBufferOptions {\n\t\treturn {\n\t\t\tonerror: noOp,\n\t\t\tonload: noOp,\n\t\t\treverse: false,\n\t\t};\n\t}\n\n\t/**\n\t * The sample rate of the AudioBuffer\n\t */\n\tget sampleRate(): number {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.sampleRate;\n\t\t} else {\n\t\t\treturn getContext().sampleRate;\n\t\t}\n\t}\n\n\t/**\n\t *  Pass in an AudioBuffer or ToneAudioBuffer to set the value of this buffer.\n\t */\n\tset(buffer: AudioBuffer | ToneAudioBuffer): this {\n\t\tif (buffer instanceof ToneAudioBuffer) {\n\t\t\t// if it's loaded, set it\n\t\t\tif (buffer.loaded) {\n\t\t\t\tthis._buffer = buffer.get();\n\t\t\t} else {\n\t\t\t\t// otherwise when it's loaded, invoke it's callback\n\t\t\t\tbuffer.onload = () => {\n\t\t\t\t\tthis.set(buffer);\n\t\t\t\t\tthis.onload(this);\n\t\t\t\t};\n\t\t\t}\n\t\t} else {\n\t\t\tthis._buffer = buffer;\n\t\t}\n\t\t// reverse it initially\n\t\tif (this._reversed) {\n\t\t\tthis._reverse();\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  The audio buffer stored in the object.\n\t */\n\tget(): AudioBuffer | undefined {\n\t\treturn this._buffer;\n\t}\n\n\t/**\n\t *  Makes an fetch request for the selected url then decodes the file as an audio buffer.\n\t * \tInvokes the callback once the audio buffer loads.\n\t *  @param url The url of the buffer to load. filetype support depends on the browser.\n\t *  @returns A Promise which resolves with this ToneAudioBuffer\n\t */\n\tasync load(url: string): Promise<this> {\n\t\tconst promise = ToneAudioBuffer.load(url);\n\t\tToneAudioBuffer.downloads.push(promise);\n\t\ttry {\n\t\t\tconst audioBuffer = await promise;\n\t\t\tthis.set(audioBuffer);\n\t\t\t// invoke the onload method\n\t\t\tthis.onload(this);\n\t\t} catch (e) {\n\t\t\t// remove the failed file before throwing error\n\t\t\tconst index = ToneAudioBuffer.downloads.indexOf(promise);\n\t\t\tToneAudioBuffer.downloads.splice(index, 1);\n\t\t\tthrow e;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._buffer = undefined;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set the audio buffer from the array.\n\t * To create a multichannel AudioBuffer, pass in a multidimensional array.\n\t * @param array The array to fill the audio buffer\n\t */\n\tfromArray(array: Float32Array | Float32Array[]): this {\n\t\tconst isMultidimensional = isArray(array) && array[0].length > 0;\n\t\tconst channels = isMultidimensional ? array.length : 1;\n\t\tconst len = isMultidimensional ? (array[0] as Float32Array).length : array.length;\n\t\tconst context = getContext();\n\t\tconst buffer = context.createBuffer(channels, len, context.sampleRate);\n\t\tconst multiChannelArray: Float32Array[] = !isMultidimensional && channels === 1 ?\n\t\t\t[array as Float32Array] : array as Float32Array[];\n\n\t\tfor (let c = 0; c < channels; c++) {\n\t\t\tbuffer.copyToChannel(multiChannelArray[c], c);\n\t\t}\n\t\tthis._buffer = buffer;\n\t\treturn this;\n\t}\n\n\t/**\n\t * \tSums multiple channels into 1 channel\n\t *  @param channel Optionally only copy a single channel from the array.\n\t */\n\ttoMono(chanNum?: number): this {\n\t\tif (isNumber(chanNum)) {\n\t\t\tthis.fromArray(this.toArray(chanNum));\n\t\t} else {\n\t\t\tlet outputArray = new Float32Array(this.length as number);\n\t\t\tconst numChannels = this.numberOfChannels;\n\t\t\tfor (let channel = 0; channel < numChannels; channel++) {\n\t\t\t\tconst channelArray = this.toArray(channel) as Float32Array;\n\t\t\t\tfor (let i = 0; i < channelArray.length; i++) {\n\t\t\t\t\toutputArray[i] += channelArray[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\t// divide by the number of channels\n\t\t\toutputArray = outputArray.map(sample => sample / numChannels);\n\t\t\tthis.fromArray(outputArray);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * \tGet the buffer as an array. Single channel buffers will return a 1-dimensional\n\t * \tFloat32Array, and multichannel buffers will return multidimensional arrays.\n\t *  @param channel Optionally only copy a single channel from the array.\n\t */\n\ttoArray(channel?: number): Float32Array | Float32Array[] {\n\t\tif (isNumber(channel)) {\n\t\t\treturn this.getChannelData(channel);\n\t\t} else if (this.numberOfChannels === 1) {\n\t\t\treturn this.toArray(0);\n\t\t} else {\n\t\t\tconst ret: Float32Array[] = [];\n\t\t\tfor (let c = 0; c < this.numberOfChannels; c++) {\n\t\t\t\tret[c] = this.getChannelData(c);\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\t}\n\n\t/**\n\t *  Returns the Float32Array representing the PCM audio data for the specific channel.\n\t *  @param  channel  The channel number to return\n\t *  @return The audio as a TypedArray\n\t */\n\tgetChannelData(channel: number): Float32Array {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.getChannelData(channel);\n\t\t} else {\n\t\t\treturn new Float32Array(0);\n\t\t}\n\t}\n\n\t/**\n\t *  Cut a subsection of the array and return a buffer of the\n\t *  subsection. Does not modify the original buffer\n\t *  @param start The time to start the slice\n\t *  @param end The end time to slice. If none is given will default to the end of the buffer\n\t */\n\tslice(start: Seconds, end: Seconds = this.duration): ToneAudioBuffer {\n\t\tconst startSamples = Math.floor(start * this.sampleRate);\n\t\tconst endSamples = Math.floor(end * this.sampleRate);\n\t\tthis.assert(startSamples < endSamples, \"The start time must be less than the end time\");\n\t\tconst length = endSamples - startSamples;\n\t\tconst retBuffer = getContext().createBuffer(this.numberOfChannels, length, this.sampleRate);\n\t\tfor (let channel = 0; channel < this.numberOfChannels; channel++) {\n\t\t\tretBuffer.copyToChannel(this.getChannelData(channel).subarray(startSamples, endSamples), channel);\n\t\t}\n\t\treturn new ToneAudioBuffer(retBuffer);\n\t}\n\n\t/**\n\t *  Reverse the buffer.\n\t */\n\tprivate _reverse(): this {\n\t\tif (this.loaded) {\n\t\t\tfor (let i = 0; i < this.numberOfChannels; i++) {\n\t\t\t\tthis.getChannelData(i).reverse();\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * If the buffer is loaded or not\n\t */\n\tget loaded(): boolean {\n\t\treturn this.length > 0;\n\t}\n\n\t/**\n\t * The duration of the buffer in seconds.\n\t */\n\tget duration(): Seconds {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.duration;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * The length of the buffer in samples\n\t */\n\tget length(): Samples {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.length;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * The number of discrete audio channels. Returns 0 if no buffer is loaded.\n\t */\n\tget numberOfChannels(): number {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.numberOfChannels;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * Reverse the buffer.\n\t */\n\tget reverse(): boolean {\n\t\treturn this._reversed;\n\t}\n\tset reverse(rev: boolean) {\n\t\tif (this._reversed !== rev) {\n\t\t\tthis._reversed = rev;\n\t\t\tthis._reverse();\n\t\t}\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// STATIC METHODS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  A path which is prefixed before every url.\n\t */\n\tstatic baseUrl = \"\";\n\n\t/**\n\t *  Create a ToneAudioBuffer from the array. To create a multichannel AudioBuffer,\n\t *  pass in a multidimensional array.\n\t *  @param array The array to fill the audio buffer\n\t *  @return A ToneAudioBuffer created from the array\n\t */\n\tstatic fromArray(array: Float32Array | Float32Array[]): ToneAudioBuffer {\n\t\treturn (new ToneAudioBuffer()).fromArray(array);\n\t}\n\n\t/**\n\t * Creates a ToneAudioBuffer from a URL, returns a promise which resolves to a ToneAudioBuffer\n\t * @param  url The url to load.\n\t * @return A promise which resolves to a ToneAudioBuffer\n\t */\n\tstatic async fromUrl(url: string): Promise<ToneAudioBuffer> {\n\t\tconst buffer = new ToneAudioBuffer();\n\t\treturn await buffer.load(url);\n\t}\n\n\t/**\n\t * All of the downloads\n\t */\n\tstatic downloads: Array<Promise<AudioBuffer>> = [];\n\n\t/**\n\t *  Loads a url using fetch and returns the AudioBuffer.\n\t */\n\tstatic async load(url: string): Promise<AudioBuffer> {\n\n\t\t// test if the url contains multiple extensions\n\t\tconst matches = url.match(/\\[(.+\\|?)+\\]$/);\n\t\tif (matches) {\n\t\t\tconst extensions = matches[1].split(\"|\");\n\t\t\tlet extension = extensions[0];\n\t\t\tfor (const ext of extensions) {\n\t\t\t\tif (ToneAudioBuffer.supportsType(ext)) {\n\t\t\t\t\textension = ext;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\turl = url.replace(matches[0], extension);\n\t\t}\n\n\t\tconst response = await fetch(ToneAudioBuffer.baseUrl + url);\n\t\tif (!response.ok) {\n\t\t\tthrow new Error(`could not load url: ${url}`);\n\t\t}\n\t\tconst arrayBuffer = await response.arrayBuffer();\n\n\t\tconst audioBuffer = await getContext().decodeAudioData(arrayBuffer);\n\n\t\treturn audioBuffer;\n\t}\n\n\t/**\n\t *  Checks a url's extension to see if the current browser can play that file type.\n\t *  @param url The url/extension to test\n\t *  @return If the file extension can be played\n\t *  @static\n\t *  @example\n\t * ToneAudioBuffer.supportsType(\"wav\"); //returns true\n\t * ToneAudioBuffer.supportsType(\"path/to/file.wav\"); //returns true\n\t */\n\tstatic supportsType(url: string): boolean {\n\t\tconst extensions = url.split(\".\");\n\t\tconst extension = extensions[extensions.length - 1];\n\t\tconst response = document.createElement(\"audio\").canPlayType(\"audio/\" + extension);\n\t\treturn response !== \"\";\n\t}\n\n\t/**\n\t *  Returns a Promise which resolves when all of the buffers have loaded\n\t */\n\tstatic async loaded(): Promise<void> {\n\t\tfor (const promise of ToneAudioBuffer.downloads) {\n\t\t\tawait promise;\n\t\t}\n\t}\n}\n\n/**\n * Test if the arg is instanceof an AudioBuffer\n */\nexport function isAudioBuffer(arg: any): arg is AudioBuffer {\n\treturn arg instanceof Object &&  Reflect.has(arg, \"sampleRate\")\n\t\t&& Reflect.has(arg, \"duration\") && !(arg instanceof ToneAudioBuffer);\n}\n","import { getContext, setContext } from \"../Global\";\nimport { Seconds } from \"../type/Units\";\nimport { OfflineContext } from \"./OfflineContext\";\nimport { ToneAudioBuffer } from \"./ToneAudioBuffer\";\n\n/**\n * Generate a buffer by rendering all of the Tone.js code within the callback using the OfflineAudioContext.\n * The OfflineAudioContext is capable of rendering much faster than real time in many cases.\n * The callback function also passes in an offline instance of Tone.Transport which can be used\n * to schedule events along the Transport. **NOTE** OfflineAudioContext has the same restrictions\n * as the AudioContext in that on certain platforms (like iOS) it must be invoked by an explicit\n * user action like a click or tap.\n * @param  callback  All Tone.js nodes which are created and scheduled\n * \t\t\t\t\twithin this callback are recorded into the output Buffer.\n * @param  duration     the amount of time to record for.\n * @return  The promise which is invoked with the Tone.Buffer of the recorded output.\n * @example\n * //render 2 seconds of the oscillator\n * Tone.Offline(function(){\n * \t//only nodes created in this callback will be recorded\n * \tvar oscillator = new Tone.Oscillator().toDestination().start(0)\n * \t//schedule their events\n * }, 2).then(function(buffer){\n * \t//do something with the output buffer\n * })\n * @example\n * //can also schedule events along the Transport\n * //using the passed in Offline Transport\n * Tone.Offline(function(Transport){\n * \tvar osc = new Tone.Oscillator().toDestination()\n * \tTransport.schedule(function(time){\n * \t\tosc.start(time).stop(time + 0.1)\n * \t}, 1)\n * \tTransport.start(0.2)\n * }, 4).then(function(buffer){\n * \t//do something with the output buffer\n * })\n */\nexport async function Offline(\n\tcallback: (context: OfflineContext) => Promise<void> | void,\n\tduration: Seconds,\n\tchannels: number = 2,\n\tsampleRate: number = getContext().sampleRate,\n): Promise<ToneAudioBuffer> {\n\t// set the OfflineAudioContext based on the current context\n\tconst originalContext = getContext();\n\n\tconst context = new OfflineContext(channels, duration, sampleRate);\n\tsetContext(context);\n\n\t// invoke the callback/scheduling\n\tawait callback(context);\n\n\t// then render the audio\n\tconst bufferPromise = context.render();\n\n\t// return the original AudioContext\n\tsetContext(originalContext);\n\n\t// await the rendering\n\tconst buffer = await bufferPromise;\n\n\t// return the audio\n\treturn new ToneAudioBuffer(buffer);\n}\n","import { Tone } from \"../Tone\";\nimport { isAudioBuffer } from \"../util/AdvancedTypeCheck\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { noOp } from \"../util/Interface\";\nimport { isString } from \"../util/TypeCheck\";\nimport { ToneAudioBuffer } from \"./ToneAudioBuffer\";\n\ninterface ToneAudioBuffersUrlMap {\n\t[name: string]: string | AudioBuffer | ToneAudioBuffer;\n\t[name: number]: string | AudioBuffer | ToneAudioBuffer;\n}\n\ninterface ToneAudioBuffersOptions {\n\turls: ToneAudioBuffersUrlMap;\n\tonload: () => void;\n\tonerror?: (error: Error) => void;\n\tbaseUrl: string;\n}\n\n/**\n * A data structure for holding multiple buffers in a Map-like datastructure.\n *\n * @param  urls      An object literal or array of urls to load.\n * @param onload  The callback to invoke when the buffers are loaded.\n * @example\n * //load a whole bank of piano samples\n * var pianoSamples = new ToneAudioBuffers({\n * \t\"C4\" : \"path/to/C4.mp3\"\n * \t\"C#4\" : \"path/to/C#4.mp3\"\n * \t\"D4\" : \"path/to/D4.mp3\"\n * \t\"D#4\" : \"path/to/D#4.mp3\"\n * }, function(){\n * \t//play one of the samples when they all load\n * \tplayer.buffer = pianoSamples.get(\"C4\");\n * \tplayer.start();\n * });\n * @example\n * //To pass in additional parameters in the second parameter\n * var buffers = new ToneAudioBuffers(urls, {\n * \t\"onload\" : callback,\n * \t\"baseUrl\" : \"../path/to/audio/\"\n * })\n */\nexport class ToneAudioBuffers extends Tone {\n\n\tname = \"ToneAudioBuffers\";\n\n\t/**\n\t *  All of the buffers\n\t */\n\tprivate _buffers: Map<string, ToneAudioBuffer> = new Map();\n\n\t/**\n\t *  A path which is prefixed before every url.\n\t */\n\tbaseUrl: string;\n\n\t/**\n\t * Keep track of the number of loaded buffers\n\t */\n\tprivate _loadingCount: number = 0;\n\n\tconstructor(\n\t\turls?: ToneAudioBuffersUrlMap,\n\t\tonload?: () => void,\n\t\tbaseUrl?: string,\n\t);\n\tconstructor(options?: Partial<ToneAudioBuffersOptions>);\n\tconstructor() {\n\n\t\tsuper();\n\t\tconst options = optionsFromArguments(\n\t\t\tToneAudioBuffers.getDefaults(), arguments, [\"urls\", \"onload\", \"baseUrl\"], \"urls\",\n\t\t);\n\n\t\tthis.baseUrl = options.baseUrl;\n\t\tconst urlMap: ToneAudioBuffersUrlMap = {};\n\t\t// add each one\n\t\tObject.keys(options.urls).forEach(name => {\n\t\t\tthis._loadingCount++;\n\t\t\tconst url = options.urls[name];\n\t\t\tthis.add(name, url, this._bufferLoaded.bind(this, options.onload));\n\t\t});\n\n\t}\n\n\tstatic getDefaults(): ToneAudioBuffersOptions {\n\t\treturn {\n\t\t\tbaseUrl: \"\",\n\t\t\tonerror: noOp,\n\t\t\tonload: noOp,\n\t\t\turls: {},\n\t\t};\n\t}\n\n\t/**\n\t *  True if the buffers object has a buffer by that name.\n\t *  @param  name  The key or index of the buffer.\n\t */\n\thas(name: string | number): boolean {\n\t\treturn this._buffers.has(name.toString());\n\t}\n\n\t/**\n\t *  Get a buffer by name. If an array was loaded,\n\t *  then use the array index.\n\t *  @param  name  The key or index of the buffer.\n\t */\n\tget(name: string | number): ToneAudioBuffer {\n\t\tthis.assert(this.has(name), `ToneAudioBuffers has no buffer named: ${name}`);\n\t\treturn this._buffers.get(name.toString()) as ToneAudioBuffer;\n\t}\n\n\t/**\n\t *  A buffer was loaded. decrement the counter.\n\t */\n\tprivate _bufferLoaded(callback: () => void): void {\n\t\tthis._loadingCount--;\n\t\tif (this._loadingCount === 0 && callback) {\n\t\t\tcallback();\n\t\t}\n\t}\n\n\t/**\n\t * If the buffers are loaded or not\n\t */\n\tget loaded(): boolean {\n\t\treturn Array.from(this._buffers).every(([name, buffer]) => buffer.loaded);\n\t}\n\n\t/**\n\t *  Add a buffer by name and url to the Buffers\n\t *  @param  name      A unique name to give the buffer\n\t *  @param  url  Either the url of the bufer, or a buffer which will be added with the given name.\n\t *  @param  callback  The callback to invoke when the url is loaded.\n\t */\n\tadd(\n\t\tname: string | number,\n\t\turl: string | AudioBuffer | ToneAudioBuffer,\n\t\tcallback: () => void = noOp,\n\t): this {\n\t\tif (url instanceof ToneAudioBuffer) {\n\t\t\tthis._buffers.set(name.toString(), url);\n\t\t\tcallback();\n\t\t} else if (isAudioBuffer(url)) {\n\t\t\tthis._buffers.set(name.toString(), new ToneAudioBuffer(url));\n\t\t\tcallback();\n\t\t} else if (isString(url)) {\n\t\t\tthis._buffers.set(name.toString(), new ToneAudioBuffer(this.baseUrl + url, callback));\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._buffers.forEach(buffer => buffer.dispose());\n\t\tthis._buffers.clear();\n\t\treturn this;\n\t}\n}\n","import { Param } from \"../context/Param\";\nimport { Time } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"./ToneAudioNode\";\n\nexport interface DelayOptions extends ToneAudioNodeOptions {\n\tdelayTime: Time;\n\tmaxDelay: Time;\n}\n\n/**\n *  Wrapper around Web Audio's native [DelayNode](http://webaudio.github.io/web-audio-api/#the-delaynode-interface).\n *  @param delayTime The delay applied to the incoming signal.\n *  @param maxDelay The maximum delay time.\n */\nexport class Delay extends ToneAudioNode<DelayOptions> {\n\n\treadonly name = \"Delay\";\n\n\t/**\n\t * The maximum delay time. This cannot be changed after\n\t * the value is passed into the constructor.\n\t */\n\treadonly maxDelay: Time;\n\n\t/**\n\t *  The amount of time the incoming signal is delayed.\n\t */\n\treadonly delayTime: Param<Time>;\n\n\t/**\n\t * Private reference to the internal DelayNode\n\t */\n\tprivate _delayNode: DelayNode;\n\treadonly input: DelayNode;\n\treadonly output: DelayNode;\n\n\tconstructor(options?: Partial<DelayOptions>)\n\tconstructor(delayTime?: Time, maxDelay?: Time)\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Delay.getDefaults(), arguments, [\"delayTime\", \"maxDelay\"]));\n\n\t\tconst options = optionsFromArguments(Delay.getDefaults(), arguments, [\"delayTime\", \"maxDelay\"]);\n\n\t\tconst maxDelayInSeconds = this.toSeconds(options.maxDelay);\n\t\tthis.maxDelay = Math.max(maxDelayInSeconds, this.toSeconds(options.delayTime));\n\n\t\tthis._delayNode = this.input = this.output = this.context.createDelay(maxDelayInSeconds);\n\n\t\tthis.delayTime = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam : this._delayNode.delayTime,\n\t\t\tunits : \"time\",\n\t\t\tvalue : options.delayTime,\n\t\t});\n\n\t\treadOnly(this, \"delayTime\");\n\t}\n\n\tstatic getDefaults(): DelayOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tdelayTime : 0,\n\t\t\tmaxDelay: 1,\n\t\t});\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._delayNode.disconnect();\n\t\tthis.delayTime.dispose();\n\t\treturn this;\n\t}\n}\n","import { Seconds } from \"../type/Units\";\nimport { Timeline, TimelineEvent } from \"./Timeline\";\n\nexport type BasicPlaybackState = \"started\" | \"stopped\";\nexport type PlaybackState = BasicPlaybackState | \"paused\";\n\nexport interface StateTimelineEvent extends TimelineEvent {\n\tstate: PlaybackState;\n}\n\n/**\n *  A Timeline State. Provides the methods: `setStateAtTime(\"state\", time)` and `getValueAtTime(time)`\n *  @param initial The initial state of the StateTimeline.  Defaults to `undefined`\n */\nexport class StateTimeline<AdditionalOptions extends {} = {}> extends Timeline<StateTimelineEvent & AdditionalOptions> {\n\n\t/**\n\t *  The initial state\n\t */\n\tprivate _initial: PlaybackState;\n\n\tconstructor(initial: PlaybackState = \"stopped\") {\n\t\tsuper();\n\t\tthis._initial = initial;\n\t}\n\n\t/**\n\t *  Returns the scheduled state scheduled before or at\n\t *  the given time.\n\t *  @param  time  The time to query.\n\t *  @return  The name of the state input in setStateAtTime.\n\t */\n\tgetValueAtTime(time: Seconds): PlaybackState {\n\t\tconst event = this.get(time);\n\t\tif (event !== null) {\n\t\t\treturn event.state;\n\t\t} else {\n\t\t\treturn this._initial;\n\t\t}\n\t}\n\n\t/**\n\t *  Add a state to the timeline.\n\t * @param  state The name of the state to set.\n\t * @param  time  The time to query.\n\t * @param options Any additional options that are needed in the timeline.\n\t */\n\tsetStateAtTime(state: PlaybackState, time: Seconds, options?: AdditionalOptions): this {\n\t\t// all state changes need to be >= the previous state time\n\t\t// TODO throw error if time < the previous event time\n\t\tthis.add(Object.assign({}, options, {\n\t\t\tstate,\n\t\t\ttime,\n\t\t}));\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Return the event before the time with the given state\n\t *  @param  state The state to look for\n\t *  @param  time  When to check before\n\t *  @return  The event with the given state before the time\n\t */\n\tgetLastState(state: PlaybackState, time: number): StateTimelineEvent & AdditionalOptions | undefined {\n\t\t// time = this.toSeconds(time);\n\t\tconst index = this._search(time);\n\t\tfor (let i = index; i >= 0; i--) {\n\t\t\tconst event = this._timeline[i];\n\t\t\tif (event.state === state) {\n\t\t\t\treturn event;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *  Return the event after the time with the given state\n\t *  @param  state The state to look for\n\t *  @param  time  When to check from\n\t *  @return  The event with the given state after the time\n\t */\n\tgetNextState(state: PlaybackState, time: number): StateTimelineEvent & AdditionalOptions | undefined {\n\t\t// time = this.toSeconds(time);\n\t\tconst index = this._search(time);\n\t\tif (index !== -1) {\n\t\t\tfor (let i = index; i < this._timeline.length; i++) {\n\t\t\t\tconst event = this._timeline[i];\n\t\t\t\tif (event.state === state) {\n\t\t\t\t\treturn event;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","import { connect } from \"../Connect\";\nimport { AutomationEvent, Param, ParamOptions } from \"../context/Param\";\nimport { InputNode } from \"../context/ToneAudioNode\";\nimport { getContext } from \"../Global\";\nimport { BPM, Hertz, Seconds, Ticks, Time } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isUndef } from \"../util/TypeCheck\";\n\ninterface TickAutomationEvent extends AutomationEvent {\n\tticks: number;\n}\n\ninterface TickSignalOptions extends ParamOptions {\n\tvalue: Hertz | BPM;\n\tmultiplier: number;\n}\n\n/**\n * TickSignal extends Tone.Signal, but adds the capability\n * to calculate the number of elapsed ticks. exponential and target curves\n * are approximated with multiple linear ramps.\n *\n * Thank you Bruno Dias, H. Sofia Pinto, and David M. Matos,\n * for your [WAC paper](https://smartech.gatech.edu/bitstream/handle/1853/54588/WAC2016-49.pdf)\n * describing integrating timing functions for tempo calculations.\n *\n * @param value The initial value of the signal\n */\nexport class TickSignal<Type extends Hertz | BPM> extends Param<Type> {\n\n\tname = \"TickSignal\";\n\n\tprotected _events: Timeline<TickAutomationEvent> = new Timeline(Infinity);\n\n\tprivate _sig: ConstantSourceNode = this.context.createConstantSource();\n\n\tprotected _param = this._sig.offset;\n\n\tprivate _multiplier: number = 1;\n\n\tconstructor(options: Partial<TickSignalOptions>);\n\tconstructor(value?: number);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(TickSignal.getDefaults(), arguments, [\"value\"]));\n\t\tconst options = optionsFromArguments(TickSignal.getDefaults(), arguments, [\"value\"]);\n\n\t\tthis._sig = this.context.createConstantSource();\n\t\tthis._sig.start(0);\n\t\tthis._param = this._sig.offset;\n\n\t\t// set the multiplier\n\t\tthis._multiplier = options.multiplier;\n\n\t\t// clear the ticks from the beginning\n\t\tthis._events.cancel(0);\n\t\t// set an initial event\n\t\tthis._events.add({\n\t\t\tticks: 0,\n\t\t\ttime : 0,\n\t\t\ttype : \"setValue\",\n\t\t\tvalue: this._fromType(options.value as Type),\n\t\t});\n\t\tthis.setValueAtTime(options.value as Type, 0);\n\t}\n\n\tstatic getDefaults(): TickSignalOptions {\n\t\treturn Object.assign(Param.getDefaults(), {\n\t\t\tmultiplier: 1,\n\t\t\tparam: getContext().createConstantSource().offset,\n\t\t\tunits: \"hertz\",\n\t\t\tvalue: 1,\n\t\t});\n\t}\n\n\tsetTargetAtTime(value: Type, time: Time, constant: number): this {\n\t\t// approximate it with multiple linear ramps\n\t\ttime = this.toSeconds(time);\n\t\tthis.setRampPoint(time);\n\t\tconst computedValue = this._fromType(value);\n\n\t\t// start from previously scheduled value\n\t\tconst prevEvent = this._events.get(time) as TickAutomationEvent;\n\t\tconst segments = Math.round(Math.max(1 / constant, 1));\n\t\tfor (let i = 0; i <= segments; i++) {\n\t\t\tconst segTime = constant * i + time;\n\t\t\tconst rampVal = this._exponentialApproach(prevEvent.time, prevEvent.value, computedValue, constant, segTime);\n\t\t\tthis.linearRampToValueAtTime(this._toType(rampVal), segTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\tsetValueAtTime(value: Type, time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tsuper.setValueAtTime(value, time);\n\t\tconst event = this._events.get(computedTime) as TickAutomationEvent;\n\t\tconst previousEvent = this._events.previousEvent(event);\n\t\tconst ticksUntilTime = this._getTicksUntilEvent(previousEvent, computedTime);\n\t\tevent.ticks = Math.max(ticksUntilTime, 0);\n\t\treturn this;\n\t}\n\n\tlinearRampToValueAtTime(value: Type, time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tsuper.linearRampToValueAtTime(value, time);\n\t\tconst event = this._events.get(computedTime) as TickAutomationEvent;\n\t\tconst previousEvent = this._events.previousEvent(event);\n\t\tconst ticksUntilTime = this._getTicksUntilEvent(previousEvent, computedTime);\n\t\tevent.ticks = Math.max(ticksUntilTime, 0);\n\t\treturn this;\n\t}\n\n\texponentialRampToValueAtTime(value: Type, time: Time): this {\n\t\t// aproximate it with multiple linear ramps\n\t\ttime = this.toSeconds(time);\n\t\tconst computedVal = this._fromType(value);\n\n\t\t// start from previously scheduled value\n\t\tconst prevEvent = this._events.get(time) as TickAutomationEvent;\n\t\t// approx 10 segments per second\n\t\tconst segments = Math.round(Math.max((time - prevEvent.time) * 10, 1));\n\t\tconst segmentDur = ((time - prevEvent.time) / segments);\n\t\tfor (let i = 0; i <= segments; i++) {\n\t\t\tconst segTime = segmentDur * i + prevEvent.time;\n\t\t\tconst rampVal = this._exponentialInterpolate(prevEvent.time, prevEvent.value, time, computedVal, segTime);\n\t\t\tthis.linearRampToValueAtTime(this._toType(rampVal), segTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the tick value at the time. Takes into account\n\t * any automation curves scheduled on the signal.\n\t * @param  time The time to get the tick count at\n\t * @return The number of ticks which have elapsed at the time given any automations.\n\t */\n\tprivate _getTicksUntilEvent(event: TickAutomationEvent | null, time: number): Ticks {\n\t\tif (event === null) {\n\t\t\tevent = {\n\t\t\t\tticks : 0,\n\t\t\t\ttime : 0,\n\t\t\t\ttype: \"setValue\",\n\t\t\t\tvalue: 0,\n\t\t\t};\n\t\t} else if (isUndef(event.ticks)) {\n\t\t\tconst previousEvent = this._events.previousEvent(event);\n\t\t\tevent.ticks = this._getTicksUntilEvent(previousEvent, event.time);\n\t\t}\n\t\tconst val0 = this._fromType(this.getValueAtTime(event.time));\n\t\tlet val1 = this._fromType(this.getValueAtTime(time));\n\t\t// if it's right on the line, take the previous value\n\t\tconst onTheLineEvent = this._events.get(time);\n\t\tif (onTheLineEvent && onTheLineEvent.time === time && onTheLineEvent.type === \"setValue\") {\n\t\t\tval1 = this._fromType(this.getValueAtTime(time - this.sampleTime));\n\t\t}\n\t\treturn 0.5 * (time - event.time) * (val0 + val1) + event.ticks;\n\t}\n\n\t/**\n\t * Returns the tick value at the time. Takes into account\n\t * any automation curves scheduled on the signal.\n\t * @param  time The time to get the tick count at\n\t * @return The number of ticks which have elapsed at the time given any automations.\n\t */\n\tgetTicksAtTime(time: Time): Ticks {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst event = this._events.get(computedTime);\n\t\treturn Math.max(this._getTicksUntilEvent(event, computedTime), 0);\n\t}\n\n\t/**\n\t * Return the elapsed time of the number of ticks from the given time\n\t * @param ticks The number of ticks to calculate\n\t * @param  time The time to get the next tick from\n\t * @return The duration of the number of ticks from the given time in seconds\n\t */\n\tgetDurationOfTicks(ticks: Ticks, time: Time): Seconds {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst currentTick = this.getTicksAtTime(time);\n\t\treturn this.getTimeOfTick(currentTick + ticks) - computedTime;\n\t}\n\n\t/**\n\t * Given a tick, returns the time that tick occurs at.\n\t * @return The time that the tick occurs.\n\t */\n\tgetTimeOfTick(tick: Ticks): Seconds {\n\t\tconst before = this._events.get(tick, \"ticks\");\n\t\tconst after = this._events.getAfter(tick, \"ticks\");\n\t\tif (before && before.ticks === tick) {\n\t\t\treturn before.time;\n\t\t} else if (before && after &&\n\t\t\tafter.type === \"linear\" &&\n\t\t\tbefore.value !== after.value) {\n\t\t\tconst val0 = this._fromType(this.getValueAtTime(before.time));\n\t\t\tconst val1 = this._fromType(this.getValueAtTime(after.time));\n\t\t\tconst delta = (val1 - val0) / (after.time - before.time);\n\t\t\tconst k = Math.sqrt(Math.pow(val0, 2) - 2 * delta * (before.ticks - tick));\n\t\t\tconst sol1 = (-val0 + k) / delta;\n\t\t\tconst sol2 = (-val0 - k) / delta;\n\t\t\treturn (sol1 > 0 ? sol1 : sol2) + before.time;\n\t\t} else if (before) {\n\t\t\tif (before.value === 0) {\n\t\t\t\treturn Infinity;\n\t\t\t} else {\n\t\t\t\treturn before.time + (tick - before.ticks) / before.value;\n\t\t\t}\n\t\t} else {\n\t\t\treturn tick / this._initialValue;\n\t\t}\n\t}\n\n\t/**\n\t * Convert some number of ticks their the duration in seconds accounting\n\t * for any automation curves starting at the given time.\n\t * @param  ticks The number of ticks to convert to seconds.\n\t * @param  when  When along the automation timeline to convert the ticks.\n\t * @return The duration in seconds of the ticks.\n\t */\n\tticksToTime(ticks: Ticks, when: Time): Seconds {\n\t\treturn this.getDurationOfTicks(ticks, when);\n\t}\n\n\t/**\n\t * The inverse of [ticksToTime](#tickstotime). Convert a duration in\n\t * seconds to the corresponding number of ticks accounting for any\n\t * automation curves starting at the given time.\n\t * @param  duration The time interval to convert to ticks.\n\t * @param  when When along the automation timeline to convert the ticks.\n\t * @return The duration in ticks.\n\t */\n\ttimeToTicks(duration: Time, when: Time): Ticks {\n\t\tconst computedTime = this.toSeconds(when);\n\t\tconst computedDuration = this.toSeconds(duration);\n\t\tconst startTicks = this.getTicksAtTime(computedTime);\n\t\tconst endTicks = this.getTicksAtTime(computedTime + computedDuration);\n\t\treturn endTicks - startTicks;\n\t}\n\n\t/**\n\t * Convert from the type when the unit value is BPM\n\t */\n\tprotected _fromType(val: Type): number {\n\t\tif (this.units === \"bpm\" && this.multiplier) {\n\t\t\treturn 1 / (60 / val / this.multiplier);\n\t\t} else {\n\t\t\treturn super._fromType(val);\n\t\t}\n\t}\n\n\t/**\n\t * Special case of type conversion where the units === \"bpm\"\n\t */\n\tprotected _toType(val: number): Type {\n\t\tif (this.units === \"bpm\" && this.multiplier) {\n\t\t\treturn (val / this.multiplier) * 60 as Type;\n\t\t} else {\n\t\t\treturn super._toType(val);\n\t\t}\n\t}\n\t/**\n\t * A multiplier on the bpm value. Useful for setting a PPQ relative to the base frequency value.\n\t */\n\tget multiplier(): number {\n\t\treturn this._multiplier;\n\t}\n\tset multiplier(m: number) {\n\t\t// get and reset the current value with the new multipler\n\t\t// might be necessary to clear all the previous values\n\t\tconst currentVal = this.value;\n\t\tthis._multiplier = m;\n\t\tthis.value = currentVal;\n\t}\n\n\t/**\n\t * Connect the output signal\n\t */\n\tconnect(dstNode: InputNode, outputNumber = 0, inputNumber = 0): this {\n\t\tconnect(this._sig, dstNode, outputNumber, inputNumber);\n\t\treturn this;\n\t}\n}\n","import { ToneWithContext, ToneWithContextOptions } from \"../context/ToneWithContext\";\nimport { BPM, Frequency, Hertz, Seconds, Ticks, Time } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { PlaybackState, StateTimeline, StateTimelineEvent } from \"../util/StateTimeline\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isDefined } from \"../util/TypeCheck\";\nimport { TickSignal } from \"./TickSignal\";\n\ninterface TickSourceOptions extends ToneWithContextOptions {\n\tfrequency: Frequency;\n\tunits: \"hertz\" | \"bpm\";\n}\n\ninterface TickSourceOffsetEvent {\n\tticks: number;\n\ttime: number;\n\tseconds: number;\n}\n\n/**\n *  Uses [TickSignal](TickSignal) to track elapsed ticks with complex automation curves.\n *\n *  @param frequency The initial frequency that the signal ticks at\n */\nexport class TickSource<Type extends BPM | Hertz> extends ToneWithContext<TickSourceOptions> {\n\n\tname = \"TickSource\";\n\n\t/**\n\t *  The frequency the callback function should be invoked.\n\t */\n\tfrequency: TickSignal<Type>;\n\n\t/**\n\t *  The state timeline\n\t */\n\tprivate _state: StateTimeline = new StateTimeline();\n\n\t/**\n\t * The offset values of the ticks\n\t */\n\tprivate _tickOffset: Timeline<TickSourceOffsetEvent> = new Timeline();\n\n\tconstructor(frequency?: Frequency);\n\t// tslint:disable-next-line: unified-signatures\n\tconstructor(options?: Partial<TickSourceOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(TickSource.getDefaults(), arguments, [\"frequency\"]));\n\t\tconst options = optionsFromArguments(TickSource.getDefaults(), arguments, [\"frequency\"]);\n\n\t\tthis.frequency = new TickSignal({\n\t\t\tcontext: this.context,\n\t\t\tunits: options.units,\n\t\t\tvalue: this.toFrequency(options.frequency),\n\t\t});\n\t\treadOnly(this, \"frequency\");\n\n\t\t// set the inital state\n\t\tthis._state.setStateAtTime(\"stopped\", 0);\n\t\t// add the first event\n\t\tthis.setTicksAtTime(0, 0);\n\t}\n\n\tstatic getDefaults(): TickSourceOptions {\n\t\treturn Object.assign({\n\t\t\tfrequency: 1,\n\t\t\tunits: \"hertz\" as \"hertz\",\n\t\t}, ToneWithContext.getDefaults());\n\t}\n\n\t/**\n\t *  Returns the playback state of the source, either \"started\", \"stopped\" or \"paused\".\n\t */\n\tget state(): PlaybackState {\n\t\treturn this._state.getValueAtTime(this.now());\n\t}\n\n\t/**\n\t *  Start the clock at the given time. Optionally pass in an offset\n\t *  of where to start the tick counter from.\n\t *  @param  time    The time the clock should start\n\t *  @param offset The number of ticks to start the source at\n\t */\n\tstart(time: Time, offset?: Ticks): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(computedTime) !== \"started\") {\n\t\t\tthis._state.setStateAtTime(\"started\", computedTime);\n\t\t\tif (isDefined(offset)) {\n\t\t\t\tthis.setTicksAtTime(offset, computedTime);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the clock. Stopping the clock resets the tick counter to 0.\n\t * @param time The time when the clock should stop.\n\t */\n\tstop(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\t// cancel the previous stop\n\t\tif (this._state.getValueAtTime(computedTime) === \"stopped\") {\n\t\t\tconst event = this._state.get(computedTime);\n\t\t\tif (event && event.time > 0) {\n\t\t\t\tthis._tickOffset.cancel(event.time);\n\t\t\t\tthis._state.cancel(event.time);\n\t\t\t}\n\t\t}\n\t\tthis._state.cancel(computedTime);\n\t\tthis._state.setStateAtTime(\"stopped\", computedTime);\n\t\tthis.setTicksAtTime(0, computedTime);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Pause the clock. Pausing does not reset the tick counter.\n\t *  @param time The time when the clock should stop.\n\t */\n\tpause(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(computedTime) === \"started\") {\n\t\t\tthis._state.setStateAtTime(\"paused\", computedTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Cancel start/stop/pause and setTickAtTime events scheduled after the given time.\n\t *  @param time When to clear the events after\n\t */\n\tcancel(time: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis._state.cancel(time);\n\t\tthis._tickOffset.cancel(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the elapsed ticks at the given time\n\t * @param  time  When to get the tick value\n\t * @return The number of ticks\n\t */\n\tgetTicksAtTime(time?: Time): Ticks {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst stopEvent = this._state.getLastState(\"stopped\", computedTime);\n\t\tif (!stopEvent) {\n\t\t\treturn 0;\n\t\t}\n\t\t// this event allows forEachBetween to iterate until the current time\n\t\tconst tmpEvent: StateTimelineEvent = { state: \"paused\", time: computedTime};\n\t\tthis._state.add(tmpEvent);\n\n\t\t// keep track of the previous offset event\n\t\tlet lastState = stopEvent;\n\t\tlet elapsedTicks = 0;\n\n\t\t// iterate through all the events since the last stop\n\t\tthis._state.forEachBetween(stopEvent.time, computedTime + this.sampleTime, e => {\n\t\t\tlet periodStartTime = lastState.time;\n\t\t\t// if there is an offset event in this period use that\n\t\t\tconst offsetEvent = this._tickOffset.get(e.time);\n\t\t\tif (offsetEvent && offsetEvent.time >= lastState.time) {\n\t\t\t\telapsedTicks = offsetEvent.ticks;\n\t\t\t\tperiodStartTime = offsetEvent.time;\n\t\t\t}\n\t\t\tif (lastState.state === \"started\" && e.state !== \"started\") {\n\t\t\t\telapsedTicks += this.frequency.getTicksAtTime(e.time) - this.frequency.getTicksAtTime(periodStartTime);\n\t\t\t}\n\t\t\tlastState = e;\n\t\t});\n\n\t\t// remove the temporary event\n\t\tthis._state.remove(tmpEvent);\n\n\t\t// return the ticks\n\t\treturn elapsedTicks;\n\t}\n\n\t/**\n\t *  The number of times the callback was invoked. Starts counting at 0\n\t *  and increments after the callback was invoked. Returns -1 when stopped.\n\t */\n\tget ticks(): Ticks {\n\t\treturn this.getTicksAtTime(this.now());\n\t}\n\n\tset ticks(t: Ticks) {\n\t\tthis.setTicksAtTime(t, this.now());\n\t}\n\n\t/**\n\t *  The time since ticks=0 that the TickSource has been running. Accounts\n\t *  for tempo curves\n\t */\n\tget seconds(): Seconds {\n\t\treturn this.getSecondsAtTime(this.now());\n\t}\n\n\tset seconds(s: Seconds) {\n\t\tconst now = this.now();\n\t\tconst ticks = this.frequency.timeToTicks(s, now);\n\t\tthis.setTicksAtTime(ticks, now);\n\t}\n\n\t/**\n\t *  Return the elapsed seconds at the given time.\n\t *  @param  time  When to get the elapsed seconds\n\t *  @return  The number of elapsed seconds\n\t */\n\tgetSecondsAtTime(time: Time): Seconds {\n\t\ttime = this.toSeconds(time);\n\t\tconst stopEvent = this._state.getLastState(\"stopped\", time);\n\t\tif (!stopEvent) {\n\t\t\treturn 0;\n\t\t}\n\t\t// this event allows forEachBetween to iterate until the current time\n\t\tconst tmpEvent: StateTimelineEvent = { state : \"paused\", time };\n\t\tthis._state.add(tmpEvent);\n\n\t\t// keep track of the previous offset event\n\t\tlet lastState = stopEvent;\n\t\tlet elapsedSeconds = 0;\n\n\t\t// iterate through all the events since the last stop\n\t\tthis._state.forEachBetween(stopEvent.time, time + this.sampleTime, e => {\n\t\t\tlet periodStartTime = lastState.time;\n\t\t\t// if there is an offset event in this period use that\n\t\t\tconst offsetEvent = this._tickOffset.get(e.time);\n\t\t\tif (offsetEvent && offsetEvent.time >= lastState.time) {\n\t\t\t\telapsedSeconds = offsetEvent.seconds;\n\t\t\t\tperiodStartTime = offsetEvent.time;\n\t\t\t}\n\t\t\tif (lastState.state === \"started\" && e.state !== \"started\") {\n\t\t\t\telapsedSeconds += e.time - periodStartTime;\n\t\t\t}\n\t\t\tlastState = e;\n\t\t});\n\n\t\t// remove the temporary event\n\t\tthis._state.remove(tmpEvent);\n\n\t\t// return the ticks\n\t\treturn elapsedSeconds;\n\t}\n\n\t/**\n\t * Set the clock's ticks at the given time.\n\t * @param  ticks The tick value to set\n\t * @param  time  When to set the tick value\n\t */\n\tsetTicksAtTime(ticks: Ticks, time: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis._tickOffset.cancel(time);\n\t\tthis._tickOffset.add({\n\t\t\tseconds : this.frequency.getDurationOfTicks(ticks, time),\n\t\t\tticks,\n\t\t\ttime,\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Returns the scheduled state at the given time.\n\t *  @param  time  The time to query.\n\t *  @example\n\t * source.start(\"+0.1\");\n\t * source.getStateAtTime(\"+0.1\"); //returns \"started\"\n\t */\n\tgetStateAtTime(time): PlaybackState {\n\t\ttime = this.toSeconds(time);\n\t\treturn this._state.getValueAtTime(time);\n\t}\n\n\t/**\n\t * Get the time of the given tick. The second argument\n\t * is when to test before. Since ticks can be set (with setTicksAtTime)\n\t * there may be multiple times for a given tick value.\n\t * @param  ticks The tick number.\n\t * @param  before When to measure the tick value from.\n\t * @return The time of the tick\n\t */\n\tgetTimeOfTick(tick: Ticks, before = this.now()): Seconds {\n\t\tconst offset = this._tickOffset.get(before) as TickSourceOffsetEvent;\n\t\tconst event = this._state.get(before) as StateTimelineEvent;\n\t\tconst startTime = Math.max(offset.time, event.time);\n\t\tconst absoluteTicks = this.frequency.getTicksAtTime(startTime) + tick - offset.ticks;\n\t\treturn this.frequency.getTimeOfTick(absoluteTicks);\n\t}\n\n\t/**\n\t *  Invoke the callback event at all scheduled ticks between the\n\t *  start time and the end time\n\t *  @param  startTime  The beginning of the search range\n\t *  @param  endTime    The end of the search range\n\t *  @param  callback   The callback to invoke with each tick\n\t */\n\tforEachTickBetween(startTime: Time, endTime: Time, callback: (when: Seconds, ticks: Ticks) => void): this {\n\t\tconst computedStartTime = this.toSeconds(startTime);\n\t\tconst computedEndTime = this.toSeconds(endTime);\n\t\t// only iterate through the sections where it is \"started\"\n\t\tlet lastStateEvent = this._state.get(computedStartTime);\n\t\tthis._state.forEachBetween(computedStartTime, computedEndTime, event => {\n\t\t\tif (lastStateEvent && lastStateEvent.state === \"started\" && event.state !== \"started\") {\n\t\t\t\tthis.forEachTickBetween(Math.max(lastStateEvent.time, computedStartTime), event.time - this.sampleTime, callback);\n\t\t\t}\n\t\t\tlastStateEvent = event;\n\t\t});\n\n\t\tlet error = null;\n\n\t\tif (lastStateEvent && lastStateEvent.state === \"started\" && this._state) {\n\t\t\tconst maxStartTime = Math.max(lastStateEvent.time, computedStartTime);\n\t\t\t// figure out the difference between the frequency ticks and the\n\t\t\tconst startTicks = this.frequency.getTicksAtTime(maxStartTime);\n\t\t\tconst ticksAtStart = this.frequency.getTicksAtTime(lastStateEvent.time);\n\t\t\tconst diff = startTicks - ticksAtStart;\n\t\t\tlet offset = diff % 1;\n\t\t\tif (offset !== 0) {\n\t\t\t\toffset = 1 - offset;\n\t\t\t}\n\t\t\tlet nextTickTime = this.frequency.getTimeOfTick(startTicks + offset);\n\t\t\twhile (nextTickTime < computedEndTime && this._state) {\n\t\t\t\ttry {\n\t\t\t\t\tcallback(nextTickTime, Math.round(this.getTicksAtTime(nextTickTime)));\n\t\t\t\t} catch (e) {\n\t\t\t\t\terror = e;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (this._state) {\n\t\t\t\t\tnextTickTime += this.frequency.getDurationOfTicks(1, nextTickTime);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (error) {\n\t\t\tthrow error;\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._state.dispose();\n\t\tthis._tickOffset.dispose();\n\t\tthis.frequency.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneWithContext, ToneWithContextOptions } from \"../context/ToneWithContext\";\nimport { BPM, Frequency, Hertz, Seconds, Ticks, Time } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Emitter, EmitterEventObject } from \"../util/Emitter\";\nimport { noOp, readOnly } from \"../util/Interface\";\nimport { PlaybackState, StateTimeline } from \"../util/StateTimeline\";\nimport { TickSignal } from \"./TickSignal\";\nimport { TickSource } from \"./TickSource\";\n\ntype ClockCallback = (time: Time, ticks?: Ticks) => void;\n\ninterface ClockOptions extends ToneWithContextOptions {\n\tfrequency: number;\n\tcallback: ClockCallback;\n\tunits: \"hertz\" | \"bpm\";\n}\n\ntype ClockEvent = \"start\" | \"stop\" | \"pause\";\n\n/**\n * A sample accurate clock which provides a callback at the given rate.\n * While the callback is not sample-accurate (it is still susceptible to\n * loose JS timing), the time passed in as the argument to the callback\n * is precise. For most applications, it is better to use Tone.Transport\n * instead of the Clock by itself since you can synchronize multiple callbacks.\n *\n * @param callback The callback to be invoked with the time of the audio event\n * @param frequency The rate of the callback\n * @example\n * //the callback will be invoked approximately once a second\n * //and will print the time exactly once a second apart.\n * const clock = new Clock(time => {\n * \tconsole.log(time);\n * }, 1);\n */\nexport class Clock<Type extends BPM | Hertz = Hertz>\nextends ToneWithContext<ClockOptions> implements Emitter<ClockEvent> {\n\n\tname = \"Clock\";\n\n\t/**\n\t *  The callback function to invoke at the scheduled tick.\n\t */\n\tcallback: ClockCallback = noOp;\n\n\t/**\n\t *  The tick counter\n\t */\n\tprivate _tickSource: TickSource<Type>;\n\n\t/**\n\t *  The last time the loop callback was invoked\n\t */\n\tprivate _lastUpdate: number = 0;\n\n\t/**\n\t *  Keep track of the playback state\n\t */\n\tprivate _state: StateTimeline = new StateTimeline(\"stopped\");\n\n\t/**\n\t * Context bound reference to the _loop method\n\t * This is necessary to remove the event in the end.\n\t */\n\tprivate _boundLoop: () => void = this._loop.bind(this);\n\n\t/**\n\t *  The rate the callback function should be invoked.\n\t */\n\tfrequency: TickSignal<Type>;\n\n\tconstructor(options: Partial<ClockOptions>);\n\tconstructor(callback?: ClockCallback, frequency?: Frequency);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Clock.getDefaults(), arguments, [\"callback\", \"frequency\"]));\n\t\tconst options = optionsFromArguments(Clock.getDefaults(), arguments, [\"callback\", \"frequency\"]);\n\n\t\tthis.callback = options.callback;\n\t\tthis._tickSource = new TickSource({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.frequency,\n\t\t\tunits: options.units,\n\t\t});\n\t\tthis._lastUpdate = 0;\n\t\tthis.frequency = this._tickSource.frequency;\n\t\treadOnly(this, \"frequency\");\n\n\t\t// add an initial state\n\t\tthis._state.setStateAtTime(\"stopped\", 0);\n\n\t\t// bind a callback to the worker thread\n\t\tthis.context.on(\"tick\", this._boundLoop);\n\t}\n\n\tstatic getDefaults(): ClockOptions {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tcallback: noOp as ClockCallback,\n\t\t\tfrequency: 1,\n\t\t\tunits: \"hertz\",\n\t\t}) as ClockOptions;\n\t}\n\n\t/**\n\t *  Returns the playback state of the source, either \"started\", \"stopped\" or \"paused\".\n\t */\n\tget state(): PlaybackState {\n\t\treturn this._state.getValueAtTime(this.now());\n\t}\n\n\t/**\n\t *  Start the clock at the given time. Optionally pass in an offset\n\t *  of where to start the tick counter from.\n\t *  @param  time    The time the clock should start\n\t *  @param offset  Where the tick counter starts counting from.\n\t */\n\tstart(time?: Time, offset?: Ticks): this {\n\t\t// make sure the context is started\n\t\tthis.context.resume();\n\t\t// start the loop\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(computedTime) !== \"started\") {\n\t\t\tthis._state.setStateAtTime(\"started\", computedTime);\n\t\t\tthis._tickSource.start(computedTime, offset);\n\t\t\tif (computedTime < this._lastUpdate) {\n\t\t\t\tthis.emit(\"start\", computedTime, offset);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Stop the clock. Stopping the clock resets the tick counter to 0.\n\t *  @param time The time when the clock should stop.\n\t *  @example\n\t * clock.stop();\n\t */\n\tstop(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._state.cancel(computedTime);\n\t\tthis._state.setStateAtTime(\"stopped\", computedTime);\n\t\tthis._tickSource.stop(computedTime);\n\t\tif (computedTime < this._lastUpdate) {\n\t\t\tthis.emit(\"stop\", computedTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Pause the clock. Pausing does not reset the tick counter.\n\t *  @param time The time when the clock should stop.\n\t */\n\tpause(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(computedTime) === \"started\") {\n\t\t\tthis._state.setStateAtTime(\"paused\", computedTime);\n\t\t\tthis._tickSource.pause(computedTime);\n\t\t\tif (computedTime < this._lastUpdate) {\n\t\t\t\tthis.emit(\"pause\", computedTime);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  The number of times the callback was invoked. Starts counting at 0\n\t *  and increments after the callback was invoked.\n\t */\n\tget ticks(): Ticks {\n\t\treturn Math.ceil(this.getTicksAtTime(this.now()));\n\t}\n\tset ticks(t: Ticks) {\n\t\tthis._tickSource.ticks = t;\n\t}\n\n\t/**\n\t *  The time since ticks=0 that the Clock has been running. Accounts for tempo curves\n\t */\n\tget seconds(): Seconds {\n\t\treturn this._tickSource.seconds;\n\t}\n\tset seconds(s: Seconds) {\n\t\tthis._tickSource.seconds = s;\n\t}\n\n\t/**\n\t *  Return the elapsed seconds at the given time.\n\t *  @param  time  When to get the elapsed seconds\n\t *  @return  The number of elapsed seconds\n\t */\n\tgetSecondsAtTime(time: Time): Seconds {\n\t\treturn this._tickSource.getSecondsAtTime(time);\n\t}\n\n\t/**\n\t * Set the clock's ticks at the given time.\n\t * @param  ticks The tick value to set\n\t * @param  time  When to set the tick value\n\t */\n\tsetTicksAtTime(ticks: Ticks, time: Time): this {\n\t\tthis._tickSource.setTicksAtTime(ticks, time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the clock's ticks at the given time.\n\t * @param  time  When to get the tick value\n\t * @return The tick value at the given time.\n\t */\n\tgetTicksAtTime(time?: Time): Ticks {\n\t\treturn this._tickSource.getTicksAtTime(time);\n\t}\n\n\t/**\n\t * Get the time of the next tick\n\t * @param  ticks The tick number.\n\t */\n\tnextTickTime(offset: Ticks, when: Time): Seconds {\n\t\tconst computedTime = this.toSeconds(when);\n\t\tconst currentTick = this.getTicksAtTime(computedTime);\n\t\treturn this._tickSource.getTimeOfTick(currentTick + offset, computedTime);\n\t}\n\n\t/**\n\t *  The scheduling loop.\n\t */\n\tprivate _loop(): void {\n\n\t\tconst startTime = this._lastUpdate;\n\t\tconst endTime = this.now();\n\t\tthis._lastUpdate = endTime;\n\n\t\tif (startTime !== endTime) {\n\t\t\t// the state change events\n\t\t\tthis._state.forEachBetween(startTime, endTime, e => {\n\t\t\t\tswitch (e.state) {\n\t\t\t\t\tcase \"started\" :\n\t\t\t\t\t\tconst offset = this._tickSource.getTicksAtTime(e.time);\n\t\t\t\t\t\tthis.emit(\"start\", e.time, offset);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"stopped\" :\n\t\t\t\t\t\tif (e.time !== 0) {\n\t\t\t\t\t\t\tthis.emit(\"stop\", e.time);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"paused\" :\n\t\t\t\t\t\tthis.emit(\"pause\", e.time);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t});\n\t\t\t// the tick callbacks\n\t\t\tthis._tickSource.forEachTickBetween(startTime, endTime, (time, ticks) => {\n\t\t\t\tthis.callback(time, ticks);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Returns the scheduled state at the given time.\n\t * @param  time  The time to query.\n\t * @return  The name of the state input in setStateAtTime.\n\t * @example\n\t * clock.start(\"+0.1\");\n\t * clock.getStateAtTime(\"+0.1\"); //returns \"started\"\n\t */\n\tgetStateAtTime(time: Time): PlaybackState {\n\t\tconst computedTime = this.toSeconds(time);\n\t\treturn this._state.getValueAtTime(computedTime);\n\t}\n\n\t/**\n\t *  Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.context.off(\"tick\", this._boundLoop);\n\t\tthis._tickSource.dispose();\n\t\tthis._state.dispose();\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////\n\t// EMITTER MIXIN TO SATISFY COMPILER\n\t///////////////////////////////////////////////////////////////////////\n\n\ton!: (event: ClockEvent, callback: (...args: any[]) => void) => this;\n\tonce!: (event: ClockEvent, callback: (...args: any[]) => void) => this;\n\toff!: (event: ClockEvent, callback?: ((...args: any[]) => void) | undefined) => this;\n\temit!: (event: any, ...args: any[]) => this;\n}\n\nEmitter.mixin(Clock);\n","import { getContext } from \"../Global\";\nimport { TimeBaseUnit, TimeValue } from \"./TimeBase\";\nimport { TransportTimeClass } from \"./TransportTime\";\nimport { Seconds, Ticks } from \"./Units\";\n\n/**\n * Ticks is a primitive type for encoding Time values.\n * Ticks can be constructed with or without the `new` keyword. Ticks can be passed\n * into the parameter of any method which takes time as an argument.\n * @example\n * const t = Ticks(\"4n\"); //a quarter note as ticks\n */\nexport class TicksClass extends TransportTimeClass<Ticks> {\n\n\tname = \"Ticks\";\n\n\treadonly defaultUnits: TimeBaseUnit = \"i\";\n\n\t/**\n\t * Get the current time in the given units\n\t */\n\tprotected _now(): Ticks {\n\t\treturn this.context.transport.ticks;\n\t}\n\n\t/**\n\t *  Return the value of the beats in the current units\n\t */\n\tprotected _beatsToUnits(beats: number): Ticks {\n\t\treturn this._getPPQ() * beats;\n\t}\n\n\t/**\n\t *  Returns the value of a second in the current units\n\t */\n\tprotected _secondsToUnits(seconds: Seconds): Ticks {\n\t\treturn Math.floor(seconds / (60 / this._getBpm()) * this._getPPQ());\n\t}\n\n\t/**\n\t *  Returns the value of a tick in the current time units\n\t */\n\tprotected _ticksToUnits(ticks: Ticks): Ticks {\n\t\treturn ticks;\n\t}\n\n\t/**\n\t *  Return the time in ticks\n\t */\n\ttoTicks(): Ticks {\n\t\treturn this.valueOf() as Ticks;\n\t}\n\n\t/**\n\t *  Return the time in seconds\n\t */\n\ttoSeconds(): Seconds {\n\t\treturn (this.valueOf() / this._getPPQ()) * (60 / this._getBpm());\n\t}\n}\n\nexport function Ticks(value?: TimeValue, units?: TimeBaseUnit): TicksClass {\n\treturn new TicksClass(getContext(), value, units);\n}\n","import { getContext } from \"../Global\";\nimport { ftom, mtof } from \"./Conversions\";\nimport { FrequencyClass, FrequencyUnit } from \"./Frequency\";\nimport { TimeValue } from \"./TimeBase\";\nimport { Hertz, Interval, MidiNote, Seconds, Ticks } from \"./Units\";\n\n/**\n *  @class Midi is a primitive type for encoding Time values.\n *         Midi can be constructed with or without the `new` keyword. Midi can be passed\n *         into the parameter of any method which takes time as an argument.\n *  @constructor\n *  @extends {Tone.Frequency}\n *  @param  {String|Number}  val    The time value.\n *  @param  {String=}  units  The units of the value.\n *  @example\n * var t = Midi(\"4n\");//a quarter note\n */\nexport class MidiClass extends FrequencyClass<MidiNote> {\n\n\tname = \"Midi\";\n\n\treadonly defaultUnits = \"midi\";\n\n\t/**\n\t *  Returns the value of a frequency in the current units\n\t */\n\tprotected _frequencyToUnits(freq: Hertz): MidiNote {\n\t\treturn ftom(super._frequencyToUnits(freq));\n\t}\n\n\t/**\n\t *  Returns the value of a tick in the current time units\n\t */\n\tprotected _ticksToUnits(ticks: Ticks): MidiNote {\n\t\treturn ftom(super._ticksToUnits(ticks));\n\t}\n\n\t/**\n\t *  Return the value of the beats in the current units\n\t */\n\tprotected _beatsToUnits(beats: number): MidiNote {\n\t\treturn ftom(super._beatsToUnits(beats));\n\t}\n\n\t/**\n\t *  Returns the value of a second in the current units\n\t */\n\tprotected _secondsToUnits(seconds: Seconds): MidiNote {\n\t\treturn ftom(super._secondsToUnits(seconds));\n\t}\n\n\t/**\n\t *  Return the value of the frequency as a MIDI note\n\t *  @return  {MIDI}\n\t *  @example\n\t * Midi(60).toMidi(); //60\n\t */\n\ttoMidi(): MidiNote {\n\t\treturn this.valueOf();\n\t}\n\n\t/**\n\t *  Return the value of the frequency as a MIDI note\n\t *  @return  {MIDI}\n\t *  @example\n\t * Midi(60).toFrequency(); //261.6255653005986\n\t */\n\ttoFrequency(): Hertz {\n\t\treturn mtof(this.toMidi());\n\t}\n\n\t/**\n\t *  Transposes the frequency by the given number of semitones.\n\t *  @return A new transposed MidiClass\n\t *  @example\n\t * Midi(\"A4\").transpose(3); //\"C5\"\n\t */\n\ttranspose(interval: Interval): MidiClass {\n\t\treturn new MidiClass(this.context, this.toMidi() + interval);\n\t}\n}\n\n/**\n * Convert a value into a FrequencyClass object.\n */\nexport function Midi(value?: TimeValue, units?: FrequencyUnit): MidiClass {\n\treturn new MidiClass(getContext(), value, units);\n}\n","import { ToneWithContext, ToneWithContextOptions } from \"../context/ToneWithContext\";\nimport { Seconds, Time } from \"../type/Units\";\nimport { Timeline, TimelineEvent } from \"./Timeline\";\n\ninterface DrawEvent extends TimelineEvent {\n\tcallback: () => void;\n}\n\n/**\n * Draw is useful for synchronizing visuals and audio events.\n * Callbacks from Tone.Transport or any of the Tone.Event classes\n * always happen _before_ the scheduled time and are not synchronized\n * to the animation frame so they are not good for triggering tightly\n * synchronized visuals and sound. Draw makes it easy to schedule\n * callbacks using the AudioContext time and uses requestAnimationFrame.\n * @example\n * Tone.Transport.schedule(function(time){\n * \t//use the time argument to schedule a callback with Draw\n * \tDraw.schedule(function(){\n * \t\t//do drawing or DOM manipulation here\n * \t}, time)\n * }, \"+0.5\")\n */\nexport class Draw extends ToneWithContext<ToneWithContextOptions> {\n\n\tname = \"Draw\";\n\n\t/**\n\t *  The duration after which events are not invoked.\n\t */\n\texpiration: Seconds = 0.25;\n\n\t/**\n\t *  The amount of time before the scheduled time\n\t *  that the callback can be invoked. Default is\n\t *  half the time of an animation frame (0.008 seconds).\n\t */\n\tanticipation: Seconds = 0.008;\n\n\t/**\n\t *  All of the events.\n\t */\n\tprivate _events: Timeline<DrawEvent> = new Timeline();\n\n\t/**\n\t *  The draw loop\n\t */\n\tprivate _boundDrawLoop = this._drawLoop.bind(this);\n\n\t/**\n\t * The animation frame id\n\t */\n\tprivate _animationFrame: number = -1;\n\n\t/**\n\t *  Schedule a function at the given time to be invoked\n\t *  on the nearest animation frame.\n\t *  @param  callback  Callback is invoked at the given time.\n\t *  @param  time      The time relative to the AudioContext time to invoke the callback.\n\t */\n\tschedule(callback: () => void, time: Time): this {\n\t\tthis._events.add({\n\t\t\tcallback,\n\t\t\ttime : this.toSeconds(time),\n\t\t});\n\t\t// start the draw loop on the first event\n\t\tif (this._events.length === 1) {\n\t\t\tthis._animationFrame = requestAnimationFrame(this._boundDrawLoop);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Cancel events scheduled after the given time\n\t *  @param  after  Time after which scheduled events will be removed from the scheduling timeline.\n\t */\n\tcancel(after?: Time): this {\n\t\tthis._events.cancel(this.toSeconds(after));\n\t\treturn this;\n\t}\n\n\t/**\n\t *  The draw loop\n\t */\n\tprivate _drawLoop(): void {\n\t\tconst now = this.context.currentTime;\n\t\twhile (this._events.length && (this._events.peek() as DrawEvent).time - this.anticipation <= now) {\n\t\t\tconst event = this._events.shift();\n\t\t\tif (event && now - event.time <= this.expiration) {\n\t\t\t\tevent.callback();\n\t\t\t}\n\t\t}\n\t\tif (this._events.length > 0) {\n\t\t\tthis._animationFrame = requestAnimationFrame(this._boundDrawLoop);\n\t\t}\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._events.dispose();\n\t\tcancelAnimationFrame(this._animationFrame);\n\t\treturn this;\n\t}\n}\n","import { Tone } from \"../Tone\";\nimport { isDefined } from \"./TypeCheck\";\n\n/**\n * An IntervalTimeline event must have a time and duration\n */\nexport interface IntervalTimelineEvent {\n\ttime: number;\n\tduration: number;\n\t[propName: string]: any;\n}\n\ntype IteratorCallback = (event: IntervalTimelineEvent) => void;\n\n/**\n * Similar to Tone.Timeline, but all events represent\n * intervals with both \"time\" and \"duration\" times. The\n * events are placed in a tree structure optimized\n * for querying an intersection point with the timeline\n * events. Internally uses an [Interval Tree](https://en.wikipedia.org/wiki/Interval_tree)\n * to represent the data.\n */\nexport class IntervalTimeline extends Tone {\n\n\tname = \"IntervalTimeline\";\n\n\t/**\n\t *  The root node of the inteval tree\n\t */\n\tprivate _root: IntervalNode | null = null;\n\n\t/**\n\t *  Keep track of the length of the timeline.\n\t */\n\tprivate _length: number = 0;\n\n\t/**\n\t *  The event to add to the timeline. All events must\n\t *  have a time and duration value\n\t *  @param  event  The event to add to the timeline\n\t */\n\tadd(event: IntervalTimelineEvent): this {\n\t\tthis.assert(isDefined(event.time), \"Events must have a time property\");\n\t\tthis.assert(isDefined(event.duration), \"Events must have a duration parameter\");\n\n\t\tevent.time = event.time.valueOf();\n\t\tlet node: IntervalNode | null = new IntervalNode(event.time, event.time + event.duration, event);\n\t\tif (this._root === null) {\n\t\t\tthis._root = node;\n\t\t} else {\n\t\t\tthis._root.insert(node);\n\t\t}\n\t\tthis._length++;\n\t\t// Restructure tree to be balanced\n\t\twhile (node !== null) {\n\t\t\tnode.updateHeight();\n\t\t\tnode.updateMax();\n\t\t\tthis._rebalance(node);\n\t\t\tnode = node.parent;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Remove an event from the timeline.\n\t *  @param  event  The event to remove from the timeline\n\t */\n\tremove(event: IntervalTimelineEvent): this {\n\t\tif (this._root !== null) {\n\t\t\tconst results: IntervalNode[] = [];\n\t\t\tthis._root.search(event.time, results);\n\t\t\tfor (const node of results) {\n\t\t\t\tif (node.event === event) {\n\t\t\t\t\tthis._removeNode(node);\n\t\t\t\t\tthis._length--;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  The number of items in the timeline.\n\t *  @readOnly\n\t */\n\tget length(): number {\n\t\treturn this._length;\n\t}\n\n\t/**\n\t *  Remove events whose time time is after the given time\n\t *  @param  time  The time to query.\n\t */\n\tcancel(after: number): this {\n\t\tthis.forEachFrom(after, event => this.remove(event));\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Set the root node as the given node\n\t */\n\tprivate _setRoot(node: IntervalNode | null): void {\n\t\tthis._root = node;\n\t\tif (this._root !== null) {\n\t\t\tthis._root.parent = null;\n\t\t}\n\t}\n\n\t/**\n\t *  Replace the references to the node in the node's parent\n\t *  with the replacement node.\n\t */\n\tprivate _replaceNodeInParent(node: IntervalNode, replacement: IntervalNode | null): void {\n\t\tif (node.parent !== null) {\n\t\t\tif (node.isLeftChild()) {\n\t\t\t\tnode.parent.left = replacement;\n\t\t\t} else {\n\t\t\t\tnode.parent.right = replacement;\n\t\t\t}\n\t\t\tthis._rebalance(node.parent);\n\t\t} else {\n\t\t\tthis._setRoot(replacement);\n\t\t}\n\t}\n\n\t/**\n\t *  Remove the node from the tree and replace it with\n\t *  a successor which follows the schema.\n\t */\n\tprivate _removeNode(node: IntervalNode): void {\n\t\tif (node.left === null && node.right === null) {\n\t\t\tthis._replaceNodeInParent(node, null);\n\t\t} else if (node.right === null) {\n\t\t\tthis._replaceNodeInParent(node, node.left);\n\t\t} else if (node.left === null) {\n\t\t\tthis._replaceNodeInParent(node, node.right);\n\t\t} else {\n\t\t\tconst balance = node.getBalance();\n\t\t\tlet replacement: IntervalNode;\n\t\t\tlet temp: IntervalNode | null = null;\n\t\t\tif (balance > 0) {\n\t\t\t\tif (node.left.right === null) {\n\t\t\t\t\treplacement = node.left;\n\t\t\t\t\treplacement.right = node.right;\n\t\t\t\t\ttemp = replacement;\n\t\t\t\t} else {\n\t\t\t\t\treplacement = node.left.right;\n\t\t\t\t\twhile (replacement.right !== null) {\n\t\t\t\t\t\treplacement = replacement.right;\n\t\t\t\t\t}\n\t\t\t\t\tif (replacement.parent) {\n\t\t\t\t\t\treplacement.parent.right = replacement.left;\n\t\t\t\t\t\ttemp = replacement.parent;\n\t\t\t\t\t\treplacement.left = node.left;\n\t\t\t\t\t\treplacement.right = node.right;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (node.right.left === null) {\n\t\t\t\treplacement = node.right;\n\t\t\t\treplacement.left = node.left;\n\t\t\t\ttemp = replacement;\n\t\t\t} else {\n\t\t\t\treplacement = node.right.left;\n\t\t\t\twhile (replacement.left !== null) {\n\t\t\t\t\treplacement = replacement.left;\n\t\t\t\t}\n\t\t\t\tif (replacement.parent) {\n\t\t\t\t\treplacement.parent.left = replacement.right;\n\t\t\t\t\ttemp = replacement.parent;\n\t\t\t\t\treplacement.left = node.left;\n\t\t\t\t\treplacement.right = node.right;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (node.parent !== null) {\n\t\t\t\tif (node.isLeftChild()) {\n\t\t\t\t\tnode.parent.left = replacement;\n\t\t\t\t} else {\n\t\t\t\t\tnode.parent.right = replacement;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._setRoot(replacement);\n\t\t\t}\n\t\t\tif (temp) {\n\t\t\t\tthis._rebalance(temp);\n\t\t\t}\n\t\t}\n\t\tnode.dispose();\n\t}\n\n\t/**\n\t *  Rotate the tree to the left\n\t */\n\tprivate _rotateLeft(node: IntervalNode): void {\n\t\tconst parent = node.parent;\n\t\tconst isLeftChild = node.isLeftChild();\n\n\t\t// Make node.right the new root of this sub tree (instead of node)\n\t\tconst pivotNode = node.right;\n\t\tif (pivotNode) {\n\t\t\tnode.right = pivotNode.left;\n\t\t\tpivotNode.left = node;\n\t\t}\n\n\t\tif (parent !== null) {\n\t\t\tif (isLeftChild) {\n\t\t\t\tparent.left = pivotNode;\n\t\t\t} else {\n\t\t\t\tparent.right = pivotNode;\n\t\t\t}\n\t\t} else {\n\t\t\tthis._setRoot(pivotNode);\n\t\t}\n\t}\n\n\t/**\n\t *  Rotate the tree to the right\n\t */\n\tprivate _rotateRight(node: IntervalNode): void {\n\t\tconst parent = node.parent;\n\t\tconst isLeftChild = node.isLeftChild();\n\n\t\t// Make node.left the new root of this sub tree (instead of node)\n\t\tconst pivotNode = node.left;\n\t\tif (pivotNode) {\n\t\t\tnode.left = pivotNode.right;\n\t\t\tpivotNode.right = node;\n\t\t}\n\n\t\tif (parent !== null) {\n\t\t\tif (isLeftChild) {\n\t\t\t\tparent.left = pivotNode;\n\t\t\t} else {\n\t\t\t\tparent.right = pivotNode;\n\t\t\t}\n\t\t} else {\n\t\t\tthis._setRoot(pivotNode);\n\t\t}\n\t}\n\n\t/**\n\t *  Balance the BST\n\t */\n\tprivate _rebalance(node: IntervalNode): void {\n\t\tconst balance = node.getBalance();\n\t\tif (balance > 1 && node.left) {\n\t\t\tif (node.left.getBalance() < 0) {\n\t\t\t\tthis._rotateLeft(node.left);\n\t\t\t} else {\n\t\t\t\tthis._rotateRight(node);\n\t\t\t}\n\t\t} else if (balance < -1 && node.right) {\n\t\t\tif (node.right.getBalance() > 0) {\n\t\t\t\tthis._rotateRight(node.right);\n\t\t\t} else {\n\t\t\t\tthis._rotateLeft(node);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *  Get an event whose time and duration span the give time. Will\n\t *  return the match whose \"time\" value is closest to the given time.\n\t *  @return  The event which spans the desired time\n\t */\n\tget(time: number): IntervalTimelineEvent | null {\n\t\tif (this._root !== null) {\n\t\t\tconst results: IntervalNode[] = [];\n\t\t\tthis._root.search(time, results);\n\t\t\tif (results.length > 0) {\n\t\t\t\tlet max = results[0];\n\t\t\t\tfor (let i = 1; i < results.length; i++) {\n\t\t\t\t\tif (results[i].low > max.low) {\n\t\t\t\t\t\tmax = results[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn max.event;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t *  Iterate over everything in the timeline.\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEach(callback: IteratorCallback): this {\n\t\tif (this._root !== null) {\n\t\t\tconst allNodes: IntervalNode[] = [];\n\t\t\tthis._root.traverse(node => allNodes.push(node));\n\t\t\tallNodes.forEach(node => {\n\t\t\t\tif (node.event) {\n\t\t\t\t\tcallback(node.event);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array in which the given time\n\t *  overlaps with the time and duration time of the event.\n\t *  @param  time The time to check if items are overlapping\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachAtTime(time: number, callback: IteratorCallback): this {\n\t\tif (this._root !== null) {\n\t\t\tconst results: IntervalNode[] = [];\n\t\t\tthis._root.search(time, results);\n\t\t\tresults.forEach(node => {\n\t\t\t\tif (node.event) {\n\t\t\t\t\tcallback(node.event);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array in which the time is greater\n\t *  than or equal to the given time.\n\t *  @param  time The time to check if items are before\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachFrom(time: number, callback: IteratorCallback): this {\n\t\tif (this._root !== null) {\n\t\t\tconst results: IntervalNode[] = [];\n\t\t\tthis._root.searchAfter(time, results);\n\t\t\tresults.forEach(node => {\n\t\t\t\tif (node.event) {\n\t\t\t\t\tcallback(node.event);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (this._root !== null) {\n\t\t\tthis._root.traverse(node => node.dispose());\n\t\t}\n\t\tthis._root = null;\n\t\treturn this;\n\t}\n}\n\n///////////////////////////////////////////////////////////////////////////\n// \tINTERVAL NODE HELPER\n///////////////////////////////////////////////////////////////////////////\n\n/**\n *  Represents a node in the binary search tree, with the addition\n *  of a \"high\" value which keeps track of the highest value of\n *  its children.\n *  References:\n *  https://brooknovak.wordpress.com/2013/12/07/augmented-interval-tree-in-c/\n *  http://www.mif.vu.lt/~valdas/ALGORITMAI/LITERATURA/Cormen/Cormen.pdf\n *  @param low\n *  @param high\n */\n// tslint:disable-next-line: max-classes-per-file\nclass IntervalNode {\n\n\t// the event container\n\tevent: IntervalTimelineEvent | null;\n\t// the low value\n\tlow: number;\n\t// the high value\n\thigh: number;\n\t// the high value for this and all child nodes\n\tmax: number;\n\t// the nodes to the left\n\tprivate _left: IntervalNode | null = null;\n\t// the nodes to the right\n\tprivate _right: IntervalNode | null = null;\n\t// the parent node\n\tparent: IntervalNode | null = null;\n\t// the number of child nodes\n\theight: number = 0;\n\n\tconstructor(low: number, high: number, event: IntervalTimelineEvent) {\n\t\tthis.event = event;\n\t\t// the low value\n\t\tthis.low = low;\n\t\t// the high value\n\t\tthis.high = high;\n\t\t// the high value for this and all child nodes\n\t\tthis.max = this.high;\n\t}\n\n\t/**\n\t *  Insert a node into the correct spot in the tree\n\t */\n\tinsert(node: IntervalNode): void {\n\t\tif (node.low <= this.low) {\n\t\t\tif (this.left === null) {\n\t\t\t\tthis.left = node;\n\t\t\t} else {\n\t\t\t\tthis.left.insert(node);\n\t\t\t}\n\t\t} else if (this.right === null) {\n\t\t\tthis.right = node;\n\t\t} else {\n\t\t\tthis.right.insert(node);\n\t\t}\n\t}\n\n\t/**\n\t *  Search the tree for nodes which overlap\n\t *  with the given point\n\t *  @param  point  The point to query\n\t *  @param  results  The array to put the results\n\t */\n\tsearch(point: number, results: IntervalNode[]): void {\n\t\t// If p is to the right of the rightmost point of any interval\n\t\t// in this node and all children, there won't be any matches.\n\t\tif (point > this.max) {\n\t\t\treturn;\n\t\t}\n\t\t// Search left children\n\t\tif (this.left !== null) {\n\t\t\tthis.left.search(point, results);\n\t\t}\n\t\t// Check this node\n\t\tif (this.low <= point && this.high > point) {\n\t\t\tresults.push(this);\n\t\t}\n\t\t// If p is to the left of the time of this interval,\n\t\t// then it can't be in any child to the right.\n\t\tif (this.low > point) {\n\t\t\treturn;\n\t\t}\n\t\t// Search right children\n\t\tif (this.right !== null) {\n\t\t\tthis.right.search(point, results);\n\t\t}\n\t}\n\n\t/**\n\t *  Search the tree for nodes which are less\n\t *  than the given point\n\t *  @param  point  The point to query\n\t *  @param  results  The array to put the results\n\t */\n\tsearchAfter(point: number, results: IntervalNode[]): void {\n\t\t// Check this node\n\t\tif (this.low >= point) {\n\t\t\tresults.push(this);\n\t\t\tif (this.left !== null) {\n\t\t\t\tthis.left.searchAfter(point, results);\n\t\t\t}\n\t\t}\n\t\t// search the right side\n\t\tif (this.right !== null) {\n\t\t\tthis.right.searchAfter(point, results);\n\t\t}\n\t}\n\n\t/**\n\t *  Invoke the callback on this element and both it's branches\n\t *  @param  {Function}  callback\n\t */\n\ttraverse(callback: (self: IntervalNode) => void): void {\n\t\tcallback(this);\n\t\tif (this.left !== null) {\n\t\t\tthis.left.traverse(callback);\n\t\t}\n\t\tif (this.right !== null) {\n\t\t\tthis.right.traverse(callback);\n\t\t}\n\t}\n\n\t/**\n\t *  Update the height of the node\n\t */\n\tupdateHeight(): void {\n\t\tif (this.left !== null && this.right !== null) {\n\t\t\tthis.height = Math.max(this.left.height, this.right.height) + 1;\n\t\t} else if (this.right !== null) {\n\t\t\tthis.height = this.right.height + 1;\n\t\t} else if (this.left !== null) {\n\t\t\tthis.height = this.left.height + 1;\n\t\t} else {\n\t\t\tthis.height = 0;\n\t\t}\n\t}\n\n\t/**\n\t *  Update the height of the node\n\t */\n\tupdateMax(): void {\n\t\tthis.max = this.high;\n\t\tif (this.left !== null) {\n\t\t\tthis.max = Math.max(this.max, this.left.max);\n\t\t}\n\t\tif (this.right !== null) {\n\t\t\tthis.max = Math.max(this.max, this.right.max);\n\t\t}\n\t}\n\n\t/**\n\t *  The balance is how the leafs are distributed on the node\n\t *  @return  Negative numbers are balanced to the right\n\t */\n\tgetBalance(): number {\n\t\tlet balance = 0;\n\t\tif (this.left !== null && this.right !== null) {\n\t\t\tbalance = this.left.height - this.right.height;\n\t\t} else if (this.left !== null) {\n\t\t\tbalance = this.left.height + 1;\n\t\t} else if (this.right !== null) {\n\t\t\tbalance = -(this.right.height + 1);\n\t\t}\n\t\treturn balance;\n\t}\n\n\t/**\n\t *  @returns true if this node is the left child of its parent\n\t */\n\tisLeftChild(): boolean {\n\t\treturn this.parent !== null && this.parent.left === this;\n\t}\n\n\t/**\n\t *  get/set the left node\n\t */\n\tget left(): IntervalNode | null {\n\t\treturn this._left;\n\t}\n\n\tset left(node: IntervalNode | null) {\n\t\tthis._left = node;\n\t\tif (node !== null) {\n\t\t\tnode.parent = this;\n\t\t}\n\t\tthis.updateHeight();\n\t\tthis.updateMax();\n\t}\n\n\t/**\n\t *  get/set the right node\n\t */\n\tget right(): IntervalNode | null {\n\t\treturn this._right;\n\t}\n\n\tset right(node: IntervalNode | null) {\n\t\tthis._right = node;\n\t\tif (node !== null) {\n\t\t\tnode.parent = this;\n\t\t}\n\t\tthis.updateHeight();\n\t\tthis.updateMax();\n\t}\n\n\t/**\n\t *  null out references.\n\t */\n\tdispose(): void {\n\t\tthis.parent = null;\n\t\tthis._left = null;\n\t\tthis._right = null;\n\t\tthis.event = null;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { Param } from \"../../core/context/Param\";\nimport { InputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Decibels } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\n\ninterface VolumeOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n\tmute: boolean;\n}\n\n/**\n *  @class Volume is a simple volume node, useful for creating a volume fader.\n *\n *  @extends {Tone.AudioNode}\n *  @constructor\n *  @param {Decibels} [volume=0] the initial volume\n *  @example\n * var vol = new Volume(-12);\n * instrument.chain(vol, Tone.Master);\n */\nexport class Volume extends ToneAudioNode<VolumeOptions> {\n\n\treadonly name = \"Volume\";\n\n\t/**\n\t * the output node\n\t */\n\toutput: Gain<Decibels>;\n\n\t/**\n\t * Input and output are the same\n\t */\n\tinput: Gain;\n\n\t/**\n\t * The unmuted volume\n\t */\n\tprivate _unmutedVolume: Decibels;\n\n\t/**\n\t *  The volume control in decibels.\n\t */\n\tvolume: Param<Decibels>;\n\n\tconstructor(options?: Decibels | Partial<VolumeOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Volume.getDefaults(), arguments, [\"volume\"]));\n\t\tconst options = optionsFromArguments(Volume.getDefaults(), arguments, [\"volume\"]);\n\n\t\tthis.input = this.output = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: options.volume,\n\t\t\tunits: \"decibels\",\n\t\t});\n\t\tthis.volume = this.output.gain;\n\t\treadOnly(this, \"volume\");\n\t\tthis._unmutedVolume = options.volume;\n\n\t\t// set the mute initially\n\t\tthis.mute = options.mute;\n\t}\n\n\tstatic getDefaults(): VolumeOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmute: false,\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Mute the output.\n\t * @example\n\t * //mute the output\n\t * volume.mute = true;\n\t */\n\tget mute(): boolean {\n\t\treturn this.volume.value === -Infinity;\n\t}\n\tset mute(mute: boolean) {\n\t\tif (!this.mute && mute) {\n\t\t\tthis._unmutedVolume = this.volume.value;\n\t\t\t// maybe it should ramp here?\n\t\t\tthis.volume.value = -Infinity;\n\t\t} else if (this.mute && !mute) {\n\t\t\tthis.volume.value = this._unmutedVolume;\n\t\t}\n\t}\n\n\t/**\n\t *  clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.input.dispose();\n\t\tthis.volume.dispose();\n\t\treturn this;\n\t}\n}\n","import { Volume } from \"../../component/channel/Volume\";\nimport { connectSeries } from \"../Connect\";\nimport { Decibels } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { onContextClose, onContextInit } from \"./ContextInitialization\";\nimport { Gain } from \"./Gain\";\nimport { Param } from \"./Param\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"./ToneAudioNode\";\n\ninterface DestinationOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n\tmute: boolean;\n}\n\n/**\n *  A single master output which is connected to the\n *  AudioDestinationNode (aka your speakers).\n *  It provides useful conveniences such as the ability\n *  to set the volume and mute the entire application.\n *  It also gives you the ability to apply master effects to your application.\n *\n *  @example\n * //the audio will go from the oscillator to the speakers\n * oscillator.connect(Destination);\n * //a convenience for connecting to the master output is also provided:\n * oscillator.toDestination();\n * //the above two examples are equivalent.\n */\nexport class Destination extends ToneAudioNode<DestinationOptions> {\n\n\treadonly name = \"Destination\";\n\n\tinput: Volume = new Volume({ context: this.context });\n\toutput: Gain = new Gain({ context : this.context });\n\n\t/**\n\t * The volume of the master output.\n\t */\n\tvolume: Param<Decibels> = this.input.volume;\n\n\tconstructor(options: Partial<DestinationOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Destination.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Destination.getDefaults(), arguments);\n\n\t\tconnectSeries(this.input, this.output, this.context.rawContext.destination);\n\n\t\tthis.mute = options.mute;\n\t}\n\n\tstatic getDefaults(): DestinationOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmute: false,\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Mute the output.\n\t * @example\n\t * //mute the output\n\t * Destination.mute = true;\n\t */\n\tget mute(): boolean {\n\t\treturn this.input.mute;\n\t}\n\n\tset mute(mute: boolean) {\n\t\tthis.input.mute = mute;\n\t}\n\n\t/**\n\t *  Add a master effects chain. NOTE: this will disconnect any nodes which were previously\n\t *  chained in the master effects chain.\n\t *  @param nodes All arguments will be connected in a row and the Master will be routed through it.\n\t *  @return  {Destination}  this\n\t *  @example\n\t * //some overall compression to keep the levels in check\n\t * var masterCompressor = new Tone.Compressor({\n\t * \t\"threshold\" : -6,\n\t * \t\"ratio\" : 3,\n\t * \t\"attack\" : 0.5,\n\t * \t\"release\" : 0.1\n\t * });\n\t * //give a little boost to the lows\n\t * var lowBump = new Tone.Filter(200, \"lowshelf\");\n\t * //route everything through the filter\n\t * //and compressor before going to the speakers\n\t * Destination.chain(lowBump, masterCompressor);\n\t */\n\tchain(...args: Array<AudioNode | ToneAudioNode>): this {\n\t\tthis.input.disconnect();\n\t\targs.unshift(this.input);\n\t\targs.push(this.output);\n\t\tconnectSeries(...args);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.volume.dispose();\n\t\treturn this;\n\t}\n}\n\n///////////////////////////////////////////////////////////////////////////\n// \tINITIALIZATION\n///////////////////////////////////////////////////////////////////////////\n\nonContextInit(context => {\n\tcontext.destination = new Destination({ context });\n});\n\nonContextClose(context => {\n\tcontext.destination.dispose();\n});\n","import { Seconds, Ticks } from \"../type/Units\";\nimport { noOp } from \"../util/Interface\";\n\ntype Transport = import(\"../clock/Transport\").Transport;\n\nexport interface TransportEventOptions {\n\tcallback: (time: number) => void;\n\tonce: boolean;\n\ttime: Ticks;\n}\n\n/**\n * TransportEvent is an internal class used by (Tone.Transport)[Transport]\n * to schedule events. Do no invoke this class directly, it is\n * handled from within Tone.Transport.\n * @param Transport The transport object which the event belongs to\n */\nexport class TransportEvent {\n\n\t/**\n\t * Reference to the Transport that created it\n\t */\n\tprotected transport: Transport;\n\n\t/**\n\t * The unique id of the event\n\t */\n\tid: number = TransportEvent._eventId++;\n\n\t/**\n\t * The time the event starts\n\t */\n\ttime: Ticks;\n\n\t/**\n\t * The callback to invoke\n\t */\n\tprivate callback?: (time: Seconds) => void;\n\n\t/**\n\t * If the event should be removed after being invoked.\n\t */\n\tprivate _once: boolean;\n\n\tconstructor(transport: Transport, opts: Partial<TransportEventOptions>) {\n\n\t\tconst options: TransportEventOptions = Object.assign(TransportEvent.getDefaults(), opts);\n\n\t\tthis.transport = transport;\n\t\tthis.callback = options.callback;\n\t\tthis._once = options.once;\n\t\tthis.time = options.time;\n\t}\n\n\tstatic getDefaults(): TransportEventOptions {\n\t\treturn {\n\t\t\tcallback: noOp,\n\t\t\tonce: false,\n\t\t\ttime: 0,\n\t\t};\n\t}\n\n\t/**\n\t * Current ID counter\n\t */\n\tprivate static _eventId: number = 0;\n\n\t/**\n\t * Invoke the event callback.\n\t * @param  time  The AudioContext time in seconds of the event\n\t */\n\tinvoke(time: Seconds): void {\n\t\tif (this.callback) {\n\t\t\tthis.callback(time);\n\t\t\tif (this._once) {\n\t\t\t\tthis.transport.clear(this.id);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tthis.callback = undefined;\n\t\treturn this;\n\t}\n}\n","import { Context } from \"../context/Context\";\nimport { TicksClass } from \"../type/Ticks\";\nimport { Seconds, Ticks, Time } from \"../type/Units\";\nimport { TransportEvent, TransportEventOptions } from \"./TransportEvent\";\n\ntype Transport = import(\"../clock/Transport\").Transport;\n\ninterface TransportRepeatEventOptions extends TransportEventOptions {\n\tinterval: Ticks;\n\tduration: Ticks;\n}\n\n/**\n * TransportRepeatEvent is an internal class used by Tone.Transport\n * to schedule repeat events. This class should not be instantiated directly.\n */\nexport class TransportRepeatEvent extends TransportEvent {\n\n\t/**\n\t * When the event should stop repeating\n\t */\n\tprivate duration: Ticks;\n\n\t/**\n\t * The interval of the repeated event\n\t */\n\tprivate _interval: Ticks;\n\n\t/**\n\t * The ID of the current timeline event\n\t */\n\tprivate _currentId: number = -1;\n\n\t/**\n\t * The ID of the next timeline event\n\t */\n\tprivate _nextId: number = -1;\n\n\t/**\n\t * The time of the next event\n\t */\n\tprivate _nextTick = this.time;\n\n\t/**\n\t * a reference to the bound start method\n\t */\n\tprivate _boundRestart = this._restart.bind(this);\n\n\t/**\n\t * The audio context belonging to this event\n\t */\n\tprotected context: Context;\n\n\tconstructor(transport: Transport, opts: Partial<TransportRepeatEventOptions>) {\n\n\t\tsuper(transport, opts);\n\n\t\tconst options = Object.assign(TransportRepeatEvent.getDefaults(), opts);\n\n\t\tthis.duration =  new TicksClass(transport.context, options.duration).valueOf();\n\t\tthis._interval = new  TicksClass(transport.context, options.interval).valueOf();\n\t\tthis._nextTick = options.time;\n\t\tthis.transport.on(\"start\", this._boundRestart);\n\t\tthis.transport.on(\"loopStart\", this._boundRestart);\n\t\tthis.context = this.transport.context;\n\t\tthis._restart();\n\t}\n\n\tstatic getDefaults(): TransportRepeatEventOptions {\n\t\treturn Object.assign({}, TransportEvent.getDefaults(), {\n\t\t\tduration: Infinity,\n\t\t\tinterval: 1,\n\t\t\tonce: false,\n\t\t});\n\t}\n\n\t/**\n\t * Invoke the callback. Returns the tick time which\n\t * the next event should be scheduled at.\n\t * @param  time  The AudioContext time in seconds of the event\n\t */\n\tinvoke(time: Seconds): void {\n\t\t// create more events if necessary\n\t\tthis._createEvents(time);\n\t\t// call the super class\n\t\tsuper.invoke(time);\n\t}\n\n\t/**\n\t * Push more events onto the timeline to keep up with the position of the timeline\n\t */\n\tprivate _createEvents(time: Seconds): void {\n\t\t// schedule the next event\n\t\tconst ticks = this.transport.getTicksAtTime(time);\n\t\tif (ticks >= this.time && ticks >= this._nextTick && this._nextTick + this._interval < this.time + this.duration) {\n\t\t\tthis._nextTick += this._interval;\n\t\t\tthis._currentId = this._nextId;\n\t\t\tthis._nextId = this.transport.scheduleOnce(this.invoke.bind(this),\n\t\t\t\tnew TicksClass(this.context, this._nextTick).toSeconds());\n\t\t}\n\t}\n\n\t/**\n\t * Push more events onto the timeline to keep up with the position of the timeline\n\t */\n\tprivate _restart(time?: Time): void {\n\t\tthis.transport.clear(this._currentId);\n\t\tthis.transport.clear(this._nextId);\n\t\tthis._nextTick = this.time;\n\t\tconst ticks = this.transport.getTicksAtTime(time);\n\t\tif (ticks > this.time) {\n\t\t\tthis._nextTick = this.time + Math.ceil((ticks - this.time) / this._interval) * this._interval;\n\t\t}\n\t\tthis._currentId = this.transport.scheduleOnce(this.invoke.bind(this),\n\t\t\tnew TicksClass(this.context, this._nextTick).toSeconds());\n\t\tthis._nextTick += this._interval;\n\t\tthis._nextId = this.transport.scheduleOnce(this.invoke.bind(this),\n\t\t\tnew TicksClass(this.context, this._nextTick).toSeconds());\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.transport.clear(this._currentId);\n\t\tthis.transport.clear(this._nextId);\n\t\tthis.transport.off(\"start\", this._boundRestart);\n\t\tthis.transport.off(\"loopStart\", this._boundRestart);\n\t\treturn this;\n\t}\n}\n","import { TimeClass } from \"../../core/type/Time\";\nimport { PlaybackState } from \"../../core/util/StateTimeline\";\nimport { Signal } from \"../../signal/Signal\";\nimport { onContextClose, onContextInit } from \"../context/ContextInitialization\";\nimport { Gain } from \"../context/Gain\";\nimport { Param } from \"../context/Param\";\nimport { ToneWithContext, ToneWithContextOptions } from \"../context/ToneWithContext\";\nimport { TicksClass } from \"../type/Ticks\";\nimport { TransportTimeClass } from \"../type/TransportTime\";\nimport { BarsBeatsSixteenths, BPM, NormalRange, Seconds,\n\tSubdivision, Ticks, Time, TimeSignature, TransportTime } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Emitter } from \"../util/Emitter\";\nimport { readOnly, writable } from \"../util/Interface\";\nimport { IntervalTimeline } from \"../util/IntervalTimeline\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isArray, isDefined } from \"../util/TypeCheck\";\nimport { Clock } from \"./Clock\";\nimport { TransportEvent } from \"./TransportEvent\";\nimport { TransportRepeatEvent } from \"./TransportRepeatEvent\";\n\ninterface TransportOptions extends ToneWithContextOptions {\n\tbpm: BPM;\n\tswing: NormalRange;\n\tswingSubdivision: Subdivision;\n\ttimeSignature: number;\n\tloopStart: Time;\n\tloopEnd: Time;\n\tppq: number;\n}\n\ntype TransportEventNames = \"start\" | \"stop\" | \"pause\" | \"loop\" | \"loopEnd\" | \"loopStart\";\n\ninterface SyncedSignalEvent {\n\tsignal: Signal;\n\tinitial: number;\n\tratio: Gain;\n}\n\ntype TransportCallback = (time: Seconds) => void;\n\n/**\n * Transport for timing musical events.\n * Supports tempo curves and time changes. Unlike browser-based timing (setInterval, requestAnimationFrame)\n * Transport timing events pass in the exact time of the scheduled event\n * in the argument of the callback function. Pass that time value to the object\n * you're scheduling. <br><br>\n * A single transport is created for you when the library is initialized.\n * <br><br>\n * The transport emits the events: \"start\", \"stop\", \"pause\", and \"loop\" which are\n * called with the time of that event as the argument.\n *\n * @example\n * //repeated event every 8th note\n * Transport.scheduleRepeat(function(time){\n * \t//do something with the time\n * }, \"8n\");\n * @example\n * //schedule an event on the 16th measure\n * Transport.schedule(function(time){\n * \t//do something with the time\n * }, \"16:0:0\");\n */\nexport class Transport extends ToneWithContext<TransportOptions> implements Emitter<TransportEventNames> {\n\n\tname = \"Transport\";\n\n\t///////////////////////////////////////////////////////////////////////\n\t// \tLOOPING\n\t//////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * \tIf the transport loops or not.\n\t */\n\tloop: boolean = false;\n\n\t/**\n\t * \tThe loop start position in ticks\n\t */\n\tprivate _loopStart: Ticks = 0;\n\n\t/**\n\t * \tThe loop end position in ticks\n\t */\n\tprivate _loopEnd: Ticks = 0;\n\n\t///////////////////////////////////////////////////////////////////////\n\t// \tCLOCK/TEMPO\n\t//////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Pulses per quarter is the number of ticks per quarter note.\n\t */\n\tprivate _ppq: number;\n\n\t/**\n\t *  watches the main oscillator for timing ticks\n\t *  initially starts at 120bpm\n\t */\n\tprivate _clock: Clock<BPM>;\n\n\t/**\n\t * The Beats Per Minute of the Transport.\n\t * @example\n\t * Transport.bpm.value = 80;\n\t * //ramp the bpm to 120 over 10 seconds\n\t * Transport.bpm.rampTo(120, 10);\n\t */\n\tbpm: Param<BPM>;\n\n\t/**\n\t *  The time signature, or more accurately the numerator\n\t *  of the time signature over a denominator of 4.\n\t */\n\tprivate _timeSignature: number;\n\n\t///////////////////////////////////////////////////////////////////////\n\t// \tTIMELINE EVENTS\n\t//////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  All the events in an object to keep track by ID\n\t */\n\tprivate _scheduledEvents = {};\n\n\t/**\n\t * \tThe scheduled events.\n\t */\n\tprivate _timeline: Timeline<TransportEvent> = new Timeline();\n\n\t/**\n\t *  Repeated events\n\t */\n\tprivate _repeatedEvents: IntervalTimeline = new IntervalTimeline();\n\n\t/**\n\t *  All of the synced Signals\n\t */\n\tprivate _syncedSignals: SyncedSignalEvent[] = [];\n\n\t///////////////////////////////////////////////////////////////////////\n\t// \tSWING\n\t//////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  The subdivision of the swing\n\t */\n\tprivate _swingTicks: Ticks;\n\n\t/**\n\t *  The swing amount\n\t */\n\tprivate _swingAmount: NormalRange = 0;\n\n\tconstructor(options?: Partial<TransportOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Transport.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Transport.getDefaults(), arguments);\n\n\t\t// CLOCK/TEMPO\n\t\tthis._ppq = options.ppq;\n\t\tthis._clock = new Clock({\n\t\t\tcallback : this._processTick.bind(this),\n\t\t\tcontext: this.context,\n\t\t\tfrequency : 0,\n\t\t\tunits: \"bpm\",\n\t\t});\n\t\tthis._bindClockEvents();\n\t\tthis.bpm = this._clock.frequency;\n\t\tthis._clock.frequency.multiplier = options.ppq;\n\t\tthis.bpm.value = options.bpm;\n\t\treadOnly(this, \"bpm\");\n\t\tthis._timeSignature = options.timeSignature;\n\n\t\t// SWING\n\t\tthis._swingTicks = options.ppq / 2; // 8n\n\t}\n\n\tstatic getDefaults(): TransportOptions {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tbpm: 120,\n\t\t\tloopEnd: \"4m\" as Subdivision,\n\t\t\tloopStart: 0,\n\t\t\tppq: 192,\n\t\t\tswing: 0,\n\t\t\tswingSubdivision: \"8n\" as Subdivision,\n\t\t\ttimeSignature: 4,\n\t\t});\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////////\n\t// \tTICKS\n\t///////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  called on every tick\n\t *  @param  tickTime clock relative tick time\n\t *  @private\n\t */\n\tprivate _processTick(tickTime: Seconds, ticks: Ticks): void {\n\t\t// handle swing\n\t\tif (this._swingAmount > 0 &&\n\t\t\tticks % this._ppq !== 0 && // not on a downbeat\n\t\t\tticks % (this._swingTicks * 2) !== 0) {\n\t\t\t// add some swing\n\t\t\tconst progress = (ticks % (this._swingTicks * 2)) / (this._swingTicks * 2);\n\t\t\tconst amount = Math.sin((progress) * Math.PI) * this._swingAmount;\n\t\t\ttickTime += new TicksClass(this.context, this._swingTicks * 2 / 3).toSeconds() * amount;\n\t\t}\n\t\t// do the loop test\n\t\tif (this.loop) {\n\t\t\tif (ticks >= this._loopEnd) {\n\t\t\t\tthis.emit(\"loopEnd\", tickTime);\n\t\t\t\tthis._clock.setTicksAtTime(this._loopStart, tickTime);\n\t\t\t\tticks = this._loopStart;\n\t\t\t\tthis.emit(\"loopStart\", tickTime, this._clock.getSecondsAtTime(tickTime));\n\t\t\t\tthis.emit(\"loop\", tickTime);\n\t\t\t}\n\t\t}\n\t\t// invoke the timeline events scheduled on this tick\n\t\tthis._timeline.forEachAtTime(ticks, event => event.invoke(tickTime));\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////////\n\t// \tSCHEDULABLE EVENTS\n\t///////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Schedule an event along the timeline.\n\t * @param callback The callback to be invoked at the time.\n\t * @param time The time to invoke the callback at.\n\t * @return The id of the event which can be used for canceling the event.\n\t * @example\n\t * //trigger the callback when the Transport reaches the desired time\n\t * Transport.schedule(function(time){\n\t * \tenvelope.triggerAttack(time);\n\t * }, \"128i\");\n\t */\n\tschedule(callback: TransportCallback, time: TransportTime | TransportTimeClass): number {\n\t\tconst event = new TransportEvent(this, {\n\t\t\tcallback,\n\t\t\ttime : new TransportTimeClass(this.context, time).toTicks(),\n\t\t});\n\t\treturn this._addEvent(event, this._timeline);\n\t}\n\n\t/**\n\t * Schedule a repeated event along the timeline. The event will fire\n\t * at the `interval` starting at the `startTime` and for the specified\n\t * `duration`.\n\t * @param  callback   The callback to invoke.\n\t * @param  interval   The duration between successive callbacks. Must be a positive number.\n\t * @param  startTime  When along the timeline the events should start being invoked.\n\t * @param  duration How long the event should repeat.\n\t * @return  The ID of the scheduled event. Use this to cancel the event.\n\t * @example\n\t * //a callback invoked every eighth note after the first measure\n\t * Transport.scheduleRepeat(callback, \"8n\", \"1m\");\n\t */\n\tscheduleRepeat(\n\t\tcallback: TransportCallback,\n\t\tinterval: Time | TimeClass,\n\t\tstartTime?: TransportTime | TransportTimeClass,\n\t\tduration: Time = Infinity,\n\t): number {\n\t\tconst event = new TransportRepeatEvent(this, {\n\t\t\tcallback,\n\t\t\tduration : new TimeClass(this.context, duration).toTicks(),\n\t\t\tinterval: new TimeClass(this.context, interval).toTicks(),\n\t\t\ttime : new TransportTimeClass(this.context, startTime).toTicks(),\n\t\t});\n\t\t// kick it off if the Transport is started\n\t\t// @ts-ignore\n\t\treturn this._addEvent(event, this._repeatedEvents);\n\t}\n\n\t/**\n\t *  Schedule an event that will be removed after it is invoked.\n\t *  @param callback The callback to invoke once.\n\t *  @param time The time the callback should be invoked.\n\t *  @returns The ID of the scheduled event.\n\t */\n\tscheduleOnce(callback: TransportCallback, time: TransportTime | TransportTimeClass): number {\n\t\tconst event = new TransportEvent(this, {\n\t\t\tcallback,\n\t\t\tonce : true,\n\t\t\ttime : new TransportTimeClass(this.context, time).toTicks(),\n\t\t});\n\t\treturn this._addEvent(event, this._timeline);\n\t}\n\n\t/**\n\t * Clear the passed in event id from the timeline\n\t * @param eventId The id of the event.\n\t */\n\tclear(eventId: number): this {\n\t\tif (this._scheduledEvents.hasOwnProperty(eventId)) {\n\t\t\tconst item = this._scheduledEvents[eventId.toString()];\n\t\t\titem.timeline.remove(item.event);\n\t\t\titem.event.dispose();\n\t\t\tdelete this._scheduledEvents[eventId.toString()];\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add an event to the correct timeline. Keep track of the\n\t * timeline it was added to.\n\t * @returns the event id which was just added\n\t */\n\tprivate _addEvent(event: TransportEvent, timeline: Timeline<TransportEvent>): number {\n\t\tthis._scheduledEvents[event.id.toString()] = {\n\t\t\tevent,\n\t\t\ttimeline,\n\t\t};\n\t\ttimeline.add(event);\n\t\treturn event.id;\n\t}\n\n\t/**\n\t * Remove scheduled events from the timeline after\n\t * the given time. Repeated events will be removed\n\t * if their startTime is after the given time\n\t * @param after Clear all events after this time.\n\t */\n\tcancel(after: TransportTime = 0): this {\n\t\tconst computedAfter = this.toTicks(after);\n\t\tthis._timeline.forEachFrom(computedAfter, event => this.clear(event.id));\n\t\tthis._repeatedEvents.forEachFrom(computedAfter, event => this.clear(event.id));\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////////\n\t// \tSTART/STOP/PAUSE\n\t///////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Bind start/stop/pause events from the clock and emit them.\n\t */\n\tprivate _bindClockEvents(): void {\n\t\tthis._clock.on(\"start\", (time, offset) => {\n\t\t\toffset = new TicksClass(this.context, offset).toSeconds();\n\t\t\tthis.emit(\"start\", time, offset);\n\t\t});\n\n\t\tthis._clock.on(\"stop\", (time) => {\n\t\t\tthis.emit(\"stop\", time);\n\t\t});\n\n\t\tthis._clock.on(\"pause\", (time) => {\n\t\t\tthis.emit(\"pause\", time);\n\t\t});\n\t}\n\n\t/**\n\t *  Returns the playback state of the source, either \"started\", \"stopped\", or \"paused\"\n\t */\n\tget state(): PlaybackState {\n\t\treturn this._clock.getStateAtTime(this.now());\n\t}\n\n\t/**\n\t * Start the transport and all sources synced to the transport.\n\t * @param  time The time when the transport should start.\n\t * @param  offset The timeline offset to start the transport.\n\t * @example\n\t * //start the transport in one second starting at beginning of the 5th measure.\n\t * Transport.start(\"+1\", \"4:0:0\");\n\t */\n\tstart(time?: Time, offset?: TransportTime): this {\n\t\tlet offsetTicks;\n\t\tif (isDefined(offset)) {\n\t\t\toffsetTicks = this.toTicks(offset);\n\t\t}\n\t\t// start the clock\n\t\tthis._clock.start(time, offsetTicks);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the transport and all sources synced to the transport.\n\t * @param time The time when the transport should stop.\n\t * @example\n\t * Transport.stop();\n\t */\n\tstop(time?: Time): this {\n\t\tthis._clock.stop(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Pause the transport and all sources synced to the transport.\n\t */\n\tpause(time?: Time): this {\n\t\tthis._clock.pause(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Toggle the current state of the transport. If it is\n\t * started, it will stop it, otherwise it will start the Transport.\n\t * @param  time The time of the event\n\t */\n\ttoggle(time?: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tif (this._clock.getStateAtTime(time) !== \"started\") {\n\t\t\tthis.start(time);\n\t\t} else {\n\t\t\tthis.stop(time);\n\t\t}\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////////\n\t// \tSETTERS/GETTERS\n\t///////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * The time signature as just the numerator over 4.\n\t * For example 4/4 would be just 4 and 6/8 would be 3.\n\t * @example\n\t * //common time\n\t * Transport.timeSignature = 4;\n\t * // 7/8\n\t * Transport.timeSignature = [7, 8];\n\t * //this will be reduced to a single number\n\t * Transport.timeSignature; //returns 3.5\n\t */\n\tget timeSignature(): TimeSignature {\n\t\treturn this._timeSignature;\n\t}\n\tset timeSignature(timeSig: TimeSignature) {\n\t\tif (isArray(timeSig)) {\n\t\t\ttimeSig = (timeSig[0] / timeSig[1]) * 4;\n\t\t}\n\t\tthis._timeSignature = timeSig;\n\t}\n\n\t/**\n\t * When the Transport.loop = true, this is the starting position of the loop.\n\t */\n\tget loopStart(): Time {\n\t\treturn new TimeClass(this.context, this._loopStart, \"i\").toSeconds();\n\t}\n\tset loopStart(startPosition: Time) {\n\t\tthis._loopStart = this.toTicks(startPosition);\n\t}\n\n\t/**\n\t * When the Transport.loop = true, this is the ending position of the loop.\n\t */\n\tget loopEnd(): Time {\n\t\treturn new TimeClass(this.context, this._loopEnd, \"i\").toSeconds();\n\t}\n\tset loopEnd(endPosition: Time) {\n\t\tthis._loopEnd = this.toTicks(endPosition);\n\t}\n\n\t/**\n\t * Set the loop start and stop at the same time.\n\t * @example\n\t * //loop over the first measure\n\t * Transport.setLoopPoints(0, \"1m\");\n\t * Transport.loop = true;\n\t */\n\tsetLoopPoints(startPosition: TransportTime, endPosition: TransportTime): this {\n\t\tthis.loopStart = startPosition;\n\t\tthis.loopEnd = endPosition;\n\t\treturn this;\n\t}\n\n\t/**\n\t * The swing value. Between 0-1 where 1 equal to the note + half the subdivision.\n\t */\n\tget swing(): NormalRange {\n\t\treturn this._swingAmount;\n\t}\n\tset swing(amount: NormalRange) {\n\t\t// scale the values to a normal range\n\t\tthis._swingAmount = amount;\n\t}\n\n\t/**\n\t * Set the subdivision which the swing will be applied to.\n\t * The default value is an 8th note. Value must be less\n\t * than a quarter note.\n\t */\n\tget swingSubdivision(): Subdivision {\n\t\treturn new TicksClass(this.context, this._swingTicks).toNotation();\n\t}\n\tset swingSubdivision(subdivision: Subdivision) {\n\t\tthis._swingTicks = this.toTicks(subdivision);\n\t}\n\n\t/**\n\t *  The Transport's position in Bars:Beats:Sixteenths.\n\t *  Setting the value will jump to that position right away.\n\t */\n\tget position(): BarsBeatsSixteenths | Time {\n\t\tconst now = this.now();\n\t\tconst ticks = this._clock.getTicksAtTime(now);\n\t\treturn new TicksClass(this.context, ticks).toBarsBeatsSixteenths();\n\t}\n\tset position(progress: Time) {\n\t\tconst ticks = this.toTicks(progress);\n\t\tthis.ticks = ticks;\n\t}\n\n\t/**\n\t *  The Transport's position in seconds\n\t *  Setting the value will jump to that position right away.\n\t */\n\tget seconds(): Seconds {\n\t\treturn this._clock.seconds;\n\t}\n\n\tset seconds(s: Seconds) {\n\t\tconst now = this.now();\n\t\tconst ticks = this._clock.frequency.timeToTicks(s, now);\n\t\tthis.ticks = ticks;\n\t}\n\n\t/**\n\t *  The Transport's loop position as a normalized value. Always\n\t *  returns 0 if the transport if loop is not true.\n\t */\n\tget progress(): NormalRange {\n\t\tif (this.loop) {\n\t\t\tconst now = this.now();\n\t\t\tconst ticks = this._clock.getTicksAtTime(now);\n\t\t\treturn (ticks - this._loopStart) / (this._loopEnd - this._loopStart);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t *  The transports current tick position.\n\t */\n\tget ticks(): Ticks {\n\t\treturn this._clock.ticks;\n\t}\n\tset ticks(t: Ticks) {\n\t\tif (this._clock.ticks !== t) {\n\t\t\tconst now = this.now();\n\t\t\t// stop everything synced to the transport\n\t\t\tif (this.state === \"started\") {\n\t\t\t\tthis.emit(\"stop\", now);\n\t\t\t\tthis._clock.setTicksAtTime(t, now);\n\t\t\t\t// restart it with the new time\n\t\t\t\tthis.emit(\"start\", now, this.seconds);\n\t\t\t} else {\n\t\t\t\tthis._clock.setTicksAtTime(t, now);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Get the clock's ticks at the given time.\n\t * @param  time  When to get the tick value\n\t * @return The tick value at the given time.\n\t */\n\tgetTicksAtTime(time?: Time): Ticks {\n\t\treturn Math.round(this._clock.getTicksAtTime(time));\n\t}\n\n\t/**\n\t *  Return the elapsed seconds at the given time.\n\t *  @param  time  When to get the elapsed seconds\n\t *  @return  The number of elapsed seconds\n\t */\n\tgetSecondsAtTime(time: Time): Seconds {\n\t\treturn this._clock.getSecondsAtTime(time);\n\t}\n\n\t/**\n\t *  Pulses Per Quarter note. This is the smallest resolution\n\t *  the Transport timing supports. This should be set once\n\t *  on initialization and not set again. Changing this value\n\t *  after other objects have been created can cause problems.\n\t */\n\tget PPQ(): number {\n\t\treturn this._clock.frequency.multiplier;\n\t}\n\tset PPQ(ppq: number) {\n\t\tthis._clock.frequency.multiplier = ppq;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////////\n\t// \tSYNCING\n\t///////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Returns the time aligned to the next subdivision\n\t * of the Transport. If the Transport is not started,\n\t * it will return 0.\n\t * Note: this will not work precisely during tempo ramps.\n\t * @param  subdivision  The subdivision to quantize to\n\t * @return  The context time of the next subdivision.\n\t * @example\n\t * Transport.start(); //the transport must be started\n\t * Transport.nextSubdivision(\"4n\");\n\t */\n\tnextSubdivision(subdivision?: Time): Seconds {\n\t\tsubdivision = this.toTicks(subdivision);\n\t\tif (this.state !== \"started\") {\n\t\t\t// if the transport's not started, return 0\n\t\t\treturn 0;\n\t\t} else {\n\t\t\tconst now = this.now();\n\t\t\t// the remainder of the current ticks and the subdivision\n\t\t\tconst transportPos = this.getTicksAtTime(now);\n\t\t\tconst remainingTicks = subdivision - transportPos % subdivision;\n\t\t\treturn this._clock.nextTickTime(remainingTicks, now);\n\t\t}\n\t}\n\n\t/**\n\t *  Attaches the signal to the tempo control signal so that\n\t *  any changes in the tempo will change the signal in the same\n\t *  ratio.\n\t *\n\t *  @param signal\n\t *  @param ratio Optionally pass in the ratio between the two signals.\n\t * \t\t\t\tOtherwise it will be computed based on their current values.\n\t */\n\tsyncSignal(signal: Signal<any>, ratio?: number): this {\n\t\tif (!ratio) {\n\t\t\t// get the sync ratio\n\t\t\tconst now = this.now();\n\t\t\tif (signal.getValueAtTime(now) !== 0) {\n\t\t\t\tconst bpm = this.bpm.getValueAtTime(now);\n\t\t\t\tconst computedFreq = 1 / (60 / bpm / this.PPQ);\n\t\t\t\tratio = signal.getValueAtTime(now) / computedFreq;\n\t\t\t} else {\n\t\t\t\tratio = 0;\n\t\t\t}\n\t\t}\n\t\tconst ratioSignal = new Gain(ratio);\n\t\t// @ts-ignore\n\t\tthis.bpm.connect(ratioSignal);\n\t\t// @ts-ignore\n\t\tratioSignal.connect(signal._param);\n\t\tthis._syncedSignals.push({\n\t\t\tinitial : signal.value,\n\t\t\tratio : ratioSignal,\n\t\t\tsignal,\n\t\t});\n\t\tsignal.value = 0;\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Unsyncs a previously synced signal from the transport's control.\n\t *  See Transport.syncSignal.\n\t */\n\tunsyncSignal(signal: Signal<any>): this {\n\t\tfor (let i = this._syncedSignals.length - 1; i >= 0; i--) {\n\t\t\tconst syncedSignal = this._syncedSignals[i];\n\t\t\tif (syncedSignal.signal === signal) {\n\t\t\t\tsyncedSignal.ratio.dispose();\n\t\t\t\tsyncedSignal.signal.value = syncedSignal.initial;\n\t\t\t\tthis._syncedSignals.splice(i, 1);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._clock.dispose();\n\t\twritable(this, \"bpm\");\n\t\tthis._timeline.dispose();\n\t\tthis._repeatedEvents.dispose();\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////\n\t// EMITTER MIXIN TO SATISFY COMPILER\n\t///////////////////////////////////////////////////////////////////////\n\n\ton!: (event: TransportEventNames, callback: (...args: any[]) => void) => this;\n\tonce!: (event: TransportEventNames, callback: (...args: any[]) => void) => this;\n\toff!: (event: TransportEventNames, callback?: ((...args: any[]) => void) | undefined) => this;\n\temit!: (event: any, ...args: any[]) => this;\n}\n\nEmitter.mixin(Transport);\n\n///////////////////////////////////////////////////////////////////////////////\n// \tINITIALIZATION\n///////////////////////////////////////////////////////////////////////////////\n\nonContextInit(context => {\n\tcontext.transport = new Transport({ context });\n});\n\nonContextClose(context => {\n\tcontext.transport.dispose();\n});\n","import { Volume } from \"../component/channel/Volume\";\nimport \"../core/context/Destination\";\nimport { Param } from \"../core/context/Param\";\nimport { OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { Decibels, Seconds, Time } from \"../core/type/Units\";\nimport { defaultArg } from \"../core/util/Defaults\";\nimport { noOp, readOnly } from \"../core/util/Interface\";\nimport { BasicPlaybackState, StateTimeline } from \"../core/util/StateTimeline\";\nimport { isUndef } from \"../core/util/TypeCheck\";\n\ntype onStopCallback = (source: Source<any>) => void;\n\nexport interface SourceOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n\tmute: boolean;\n\tonstop: onStopCallback;\n}\n\n/**\n *  @class  Base class for sources. Sources have start/stop methods\n *          and the ability to be synced to the\n *          start/stop of this.context.transport.\n *\n *  @constructor\n *  @extends {Tone.AudioNode}\n *  @example\n * //Multiple state change events can be chained together,\n * //but must be set in the correct order and with ascending times\n *\n * // OK\n * state.start().stop(\"+0.2\");\n * // AND\n * state.start().stop(\"+0.2\").start(\"+0.4\").stop(\"+0.7\")\n *\n * // BAD\n * state.stop(\"+0.2\").start();\n * // OR\n * state.start(\"+0.3\").stop(\"+0.2\");\n *\n */\nexport abstract class Source<Options extends SourceOptions> extends ToneAudioNode<Options> {\n\n\t/**\n\t *  The output volume node\n\t */\n\tprivate _volume: Volume;\n\n\t/**\n\t * The output note\n\t */\n\toutput: OutputNode;\n\n\t/**\n\t * Sources have no inputs\n\t */\n\tinput = undefined;\n\n\t/**\n\t * The volume of the output in decibels.\n\t * @example\n\t * source.volume.value = -6;\n\t */\n\tvolume: Param<Decibels>;\n\n\t/**\n\t * The callback to invoke when the source is stopped.\n\t */\n\tonstop: onStopCallback;\n\n\t/**\n\t * \tKeep track of the scheduled state.\n\t */\n\tprotected _state: StateTimeline<{\n\t\tduration?: Seconds;\n\t\toffset?: Seconds;\n\t\t/**\n\t\t * Either the buffer is explicitly scheduled to end using the stop method,\n\t\t * or it's implicitly ended when the buffer is over.\n\t\t */\n\t\timplicitEnd?: boolean;\n\t}> = new StateTimeline(\"stopped\");\n\n\t/**\n\t *  The synced `start` callback function from the transport\n\t *  @type {Function}\n\t *  @private\n\t */\n\tprotected _synced = false;\n\n\t/**\n\t *  Keep track of all of the scheduled event ids\n\t */\n\tprivate _scheduled: number[] = [];\n\n\t/**\n\t * Placeholder functions for syncing/unsyncing to transport\n\t */\n\tprivate _syncedStart: (time: Seconds, offset: Seconds) => void = noOp;\n\tprivate _syncedStop: (time: Seconds) => void = noOp;\n\n\tconstructor(options: SourceOptions) {\n\t\tsuper(options);\n\t\tthis._state.memory = 100;\n\n\t\tthis._volume = this.output = new Volume({\n\t\t\tcontext: this.context,\n\t\t\tmute: options.mute,\n\t\t\tvolume: options.volume,\n\t\t});\n\t\tthis.volume = this._volume.volume;\n\t\treadOnly(this, \"volume\");\n\t\tthis.onstop = options.onstop;\n\t}\n\n\tstatic getDefaults(): SourceOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmute: false,\n\t\t\tonstop: noOp,\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t *  Returns the playback state of the source, either \"started\" or \"stopped\".\n\t */\n\tget state(): BasicPlaybackState {\n\t\tif (this._synced) {\n\t\t\tif (this.context.transport.state === \"started\") {\n\t\t\t\treturn this._state.getValueAtTime(this.context.transport.seconds) as BasicPlaybackState;\n\t\t\t} else {\n\t\t\t\treturn \"stopped\";\n\t\t\t}\n\t\t} else {\n\t\t\treturn this._state.getValueAtTime(this.now()) as BasicPlaybackState;\n\t\t}\n\t}\n\n\t/**\n\t * Mute the output.\n\t * @example\n\t * //mute the output\n\t * source.mute = true;\n\t */\n\tget mute(): boolean {\n\t\treturn this._volume.mute;\n\t}\n\tset mute(mute: boolean) {\n\t\tthis._volume.mute = mute;\n\t}\n\n\t// overwrite these functions\n\tprotected abstract _start(time: Time, offset?: Time, duration?: Time): void;\n\tprotected abstract _stop(time: Time): void;\n\tabstract restart(time: Time, offset?: Time, duration?: Time): this;\n\n\t/**\n\t * Ensure that the scheduled time is not before the current time.\n\t * Should only be used when scheduled unsynced.\n\t */\n\tprivate _clampToCurrentTime(time: Seconds): Seconds {\n\t\tif (this._synced) {\n\t\t\treturn time;\n\t\t} else {\n\t\t\treturn Math.max(time, this.context.currentTime);\n\t\t}\n\t}\n\n\t/**\n\t *  Start the source at the specified time. If no time is given,\n\t *  start the source now.\n\t *  @param  time When the source should be started.\n\t *  @example\n\t * source.start(\"+0.5\"); //starts the source 0.5 seconds from now\n\t */\n\tstart(time?: Time, offset?: Time, duration?: Time): this {\n\t\tlet computedTime = isUndef(time) && this._synced ? this.context.transport.seconds : this.toSeconds(time);\n\t\tcomputedTime = this._clampToCurrentTime(computedTime);\n\t\tthis.log(\"start\", computedTime);\n\t\t// if it's started, stop it and restart it\n\t\tif (this._state.getValueAtTime(computedTime) === \"started\") {\n\t\t\tthis._state.cancel(computedTime);\n\t\t\tthis._state.setStateAtTime(\"started\", computedTime);\n\t\t\tthis.restart(computedTime, offset, duration);\n\t\t} else {\n\t\t\tthis._state.setStateAtTime(\"started\", computedTime);\n\t\t\tif (this._synced) {\n\t\t\t\t// add the offset time to the event\n\t\t\t\tconst event = this._state.get(computedTime);\n\t\t\t\tif (event) {\n\t\t\t\t\tevent.offset = this.toSeconds(defaultArg(offset, 0));\n\t\t\t\t\tevent.duration = duration ? this.toSeconds(duration) : undefined;\n\t\t\t\t}\n\t\t\t\tconst sched = this.context.transport.schedule(t => {\n\t\t\t\t\tthis._start(t, offset, duration);\n\t\t\t\t}, computedTime);\n\t\t\t\tthis._scheduled.push(sched);\n\n\t\t\t\t// if it's already started\n\t\t\t\tif (this.context.transport.state === \"started\") {\n\t\t\t\t\tthis._syncedStart(this.now(), this.context.transport.seconds);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._start(computedTime, offset, duration);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Stop the source at the specified time. If no time is given,\n\t *  stop the source now.\n\t *  @param  time When the source should be stopped.\n\t *  @example\n\t * source.stop(); // stops the source immediately\n\t */\n\tstop(time?: Time): this {\n\t\tlet computedTime = isUndef(time) && this._synced ? this.context.transport.seconds : this.toSeconds(time);\n\t\tcomputedTime = this._clampToCurrentTime(computedTime);\n\t\tthis.log(\"stop\", computedTime);\n\t\tif (!this._synced) {\n\t\t\tthis._stop(computedTime);\n\t\t} else {\n\t\t\tconst sched = this.context.transport.schedule(this._stop.bind(this), computedTime);\n\t\t\tthis._scheduled.push(sched);\n\t\t}\n\t\tthis._state.cancel(computedTime);\n\t\tthis._state.setStateAtTime(\"stopped\", computedTime);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Sync the source to the Transport so that all subsequent\n\t *  calls to `start` and `stop` are synced to the TransportTime\n\t *  instead of the AudioContext time.\n\t *\n\t * @example\n\t * //sync the source so that it plays between 0 and 0.3 on the Transport's timeline\n\t * source.sync().start(0).stop(0.3);\n\t * //start the transport.\n\t * this.context.transport.start();\n\t *\n\t * @example\n\t * //start the transport with an offset and the sync'ed sources\n\t * //will start in the correct position\n\t * source.sync().start(0.1);\n\t * //the source will be invoked with an offset of 0.4 = (0.5 - 0.1)\n\t * this.context.transport.start(\"+0.5\", 0.5);\n\t */\n\tsync(): this {\n\t\tif (!this._synced) {\n\t\t\tthis._synced = true;\n\t\t\tthis._syncedStart = (time, offset) => {\n\t\t\t\tif (offset > 0) {\n\t\t\t\t\t// get the playback state at that time\n\t\t\t\t\tconst stateEvent = this._state.get(offset);\n\t\t\t\t\t// listen for start events which may occur in the middle of the sync'ed time\n\t\t\t\t\tif (stateEvent && stateEvent.state === \"started\" && stateEvent.time !== offset) {\n\t\t\t\t\t\t// get the offset\n\t\t\t\t\t\tconst startOffset = offset - this.toSeconds(stateEvent.time);\n\t\t\t\t\t\tlet duration;\n\t\t\t\t\t\tif (stateEvent.duration) {\n\t\t\t\t\t\t\tduration = this.toSeconds(stateEvent.duration) - startOffset;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._start(time, this.toSeconds(stateEvent.offset) + startOffset, duration);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis._syncedStop = time => {\n\t\t\t\tconst seconds = this.context.transport.getSecondsAtTime(Math.max(time - this.sampleTime, 0));\n\t\t\t\tif (this._state.getValueAtTime(seconds) === \"started\") {\n\t\t\t\t\tthis._stop(time);\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis.context.transport.on(\"start\", this._syncedStart);\n\t\t\tthis.context.transport.on(\"loopStart\", this._syncedStart);\n\t\t\tthis.context.transport.on(\"stop\", this._syncedStop);\n\t\t\tthis.context.transport.on(\"pause\", this._syncedStop);\n\t\t\tthis.context.transport.on(\"loopEnd\", this._syncedStop);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Unsync the source to the Transport. See Source.sync\n\t */\n\tunsync(): this {\n\t\tif (this._synced) {\n\t\t\tthis.context.transport.off(\"stop\", this._syncedStop);\n\t\t\tthis.context.transport.off(\"pause\", this._syncedStop);\n\t\t\tthis.context.transport.off(\"loopEnd\", this._syncedStop);\n\t\t\tthis.context.transport.off(\"start\", this._syncedStart);\n\t\t\tthis.context.transport.off(\"loopStart\", this._syncedStart);\n\t\t}\n\t\tthis._synced = false;\n\t\t// clear all of the scheduled ids\n\t\tthis._scheduled.forEach(id => this.context.transport.clear(id));\n\t\tthis._scheduled = [];\n\t\tthis._state.cancel(0);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.onstop = noOp;\n\t\tthis.unsync();\n\t\tthis._volume.dispose();\n\t\tthis._state.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../core/context/Gain\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { GainFactor, Seconds, Time } from \"../core/type/Units\";\nimport { noOp } from \"../core/util/Interface\";\nimport { BasicPlaybackState } from \"../core/util/StateTimeline\";\n\nexport type OneShotSourceCurve = \"linear\" | \"exponential\";\n\ntype onEndedCallback = (source: OneShotSource<any>) => void;\n\nexport interface OneShotSourceOptions extends ToneAudioNodeOptions {\n\tonended: onEndedCallback;\n\tfadeIn: Time;\n\tfadeOut: Time;\n\tcurve: OneShotSourceCurve;\n}\n\nexport abstract class OneShotSource<Options extends ToneAudioNodeOptions> extends ToneAudioNode<Options> {\n\n\t/**\n\t *  The callback to invoke after the\n\t *  source is done playing.\n\t */\n\tonended: onEndedCallback = noOp;\n\n\t/**\n\t * Sources do not have input nodes\n\t */\n\tinput: undefined;\n\n\t/**\n\t *  The start time\n\t */\n\tprotected _startTime: number = -1;\n\n\t/**\n\t *  The stop time\n\t */\n\tprotected _stopTime: number = -1;\n\n\t/**\n\t * The id of the timeout\n\t */\n\tprivate _timeout: number = -1;\n\n\t/**\n\t * The public output node\n\t */\n\toutput: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain : 0,\n\t});\n\n\t/**\n\t *  The output gain node.\n\t */\n\tprotected _gainNode = this.output;\n\n\t/**\n\t *  The fadeIn time of the amplitude envelope.\n\t */\n\tprotected _fadeIn: Time;\n\n\t/**\n\t *  The fadeOut time of the amplitude envelope.\n\t */\n\tprotected _fadeOut: Time;\n\n\t/**\n\t * The curve applied to the fades, either \"linear\" or \"exponential\"\n\t */\n\tprotected _curve: OneShotSourceCurve;\n\n\tconstructor(options: OneShotSourceOptions) {\n\t\tsuper(options);\n\n\t\tthis._fadeIn = options.fadeIn;\n\t\tthis._fadeOut = options.fadeOut;\n\t\tthis._curve = options.curve;\n\t\tthis.onended = options.onended;\n\t}\n\n\tstatic getDefaults(): OneShotSourceOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tcurve: \"linear\" as OneShotSourceCurve,\n\t\t\tfadeIn : 0,\n\t\t\tfadeOut: 0,\n\t\t\tonended : noOp,\n\t\t});\n\t}\n\n\t/**\n\t * Stop the source node\n\t */\n\tprotected abstract _stopSource(time: Seconds): void;\n\n\t/**\n\t * Start the source node at the given time\n\t * @param  time When to start the node\n\t */\n\tprotected abstract start(time?: Time): this;\n\t/**\n\t * Start the source at the given time\n\t * @param  time When to start the source\n\t */\n\tprotected _startGain(time: Seconds, gain: GainFactor = 1): this {\n\t\tthis.assert(this._startTime === -1, \"Source cannot be started more than once\");\n\t\t// apply a fade in envelope\n\t\tconst fadeInTime = this.toSeconds(this._fadeIn);\n\n\t\t// record the start time\n\t\tthis._startTime = time + fadeInTime;\n\t\tthis._startTime = Math.max(this._startTime, this.context.currentTime);\n\n\t\t// schedule the envelope\n\t\tif (fadeInTime > 0) {\n\t\t\tthis._gainNode.gain.setValueAtTime(0, time);\n\t\t\tif (this._curve === \"linear\") {\n\t\t\t\tthis._gainNode.gain.linearRampToValueAtTime(gain, time + fadeInTime);\n\t\t\t} else {\n\t\t\t\tthis._gainNode.gain.exponentialApproachValueAtTime(gain, time, fadeInTime);\n\t\t\t}\n\t\t} else {\n\t\t\tthis._gainNode.gain.setValueAtTime(gain, time);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the source node at the given time.\n\t * @param time When to stop the source\n\t */\n\tstop(time?: Time): this {\n\t\tthis.log(\"stop\", time);\n\t\tthis._stopGain(this.toSeconds(time));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the source at the given time\n\t * @param  time When to stop the source\n\t */\n\tprotected _stopGain(time: Seconds): this {\n\t\tthis.assert(this._startTime !== -1, \"'start' must be called before 'stop'\");\n\t\t// cancel the previous stop\n\t\tthis.cancelStop();\n\n\t\t// the fadeOut time\n\t\tconst fadeOutTime = this.toSeconds(this._fadeOut);\n\n\t\t// schedule the stop callback\n\t\tthis._stopTime = this.toSeconds(time) + fadeOutTime;\n\t\tthis._stopTime = Math.max(this._stopTime, this.context.currentTime);\n\t\tif (fadeOutTime > 0) {\n\t\t\t// start the fade out curve at the given time\n\t\t\tif (this._curve === \"linear\") {\n\t\t\t\tthis._gainNode.gain.linearRampTo(0, fadeOutTime, time);\n\t\t\t} else {\n\t\t\t\tthis._gainNode.gain.targetRampTo(0, fadeOutTime, time);\n\t\t\t}\n\t\t} else {\n\t\t\t// stop any ongoing ramps, and set the value to 0\n\t\t\tthis._gainNode.gain.cancelAndHoldAtTime(time);\n\t\t\tthis._gainNode.gain.setValueAtTime(0, time);\n\t\t}\n\t\tthis.context.clearTimeout(this._timeout);\n\t\tthis._timeout = this.context.setTimeout(() => {\n\t\t\t// allow additional time for the exponential curve to fully decay\n\t\t\tconst additionalTail = this._curve === \"exponential\" ? fadeOutTime * 2 : 0;\n\t\t\tthis._stopSource(this.now() + additionalTail);\n\t\t\tthis._onended();\n\t\t}, this._stopTime - this.context.now());\n\t\treturn this;\n\t}\n\n\t/**\n\t * Invoke the onended callback\n\t */\n\tprotected _onended(): void {\n\t\tif (this.onended !== noOp) {\n\t\t\tthis.onended(this);\n\t\t\t// overwrite onended to make sure it only is called once\n\t\t\tthis.onended = noOp;\n\t\t\t// dispose when it's ended to free up for garbage collection\n\t\t\tsetTimeout(() => this.dispose(), 1000);\n\t\t}\n\t}\n\n\t/**\n\t *  Get the playback state at the given time\n\t */\n\tgetStateAtTime = function(time: Time): BasicPlaybackState {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._startTime !== -1 && computedTime >= this._startTime &&\n\t\t\t(this._stopTime === -1 || computedTime <= this._stopTime)) {\n\t\t\treturn \"started\";\n\t\t} else {\n\t\t\treturn \"stopped\";\n\t\t}\n\t};\n\n\t/**\n\t * Get the playback state at the current time\n\t */\n\tget state(): BasicPlaybackState {\n\t\treturn this.getStateAtTime(this.now());\n\t}\n\n\t/**\n\t *  Cancel a scheduled stop event\n\t */\n\tcancelStop(): this {\n\t\tthis.log(\"cancelStop\");\n\t\tthis.assert(this._startTime !== -1, \"Source is not started\");\n\t\t// cancel the stop envelope\n\t\tthis._gainNode.gain.cancelScheduledValues(this._startTime + this.sampleTime);\n\t\tthis.context.clearTimeout(this._timeout);\n\t\tthis._stopTime = -1;\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._gainNode.disconnect();\n\t\treturn this;\n\t}\n}\n","import { connect } from \"../../core/Connect\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { GainFactor, Positive, Seconds, Time } from \"../../core/type/Units\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp } from \"../../core/util/Interface\";\nimport { isDefined } from \"../../core/util/TypeCheck\";\nimport { OneShotSource, OneShotSourceCurve, OneShotSourceOptions } from \"../OneShotSource\";\n\nexport type ToneBufferSourceCurve = OneShotSourceCurve;\n\ninterface ToneBufferSourceOptions extends OneShotSourceOptions {\n\tbuffer: ToneAudioBuffer;\n\tcurve: ToneBufferSourceCurve;\n\tplaybackRate: Positive;\n\tfadeIn: Time;\n\tfadeOut: Time;\n\tloopStart: Time;\n\tloopEnd: Time;\n\tloop: boolean;\n\tonload: () => void;\n}\n\n/**\n *  Wrapper around the native BufferSourceNode.\n *  @param  buffer   The buffer to play\n *  @param  onended  The callback to invoke when the buffer is done playing.\n */\nexport class ToneBufferSource extends OneShotSource<ToneBufferSourceOptions> {\n\n\tname = \"ToneBufferSource\";\n\n\t/**\n\t *  The oscillator\n\t */\n\tprivate _source = this.context.createBufferSource();\n\tprotected _internalChannels = [this._source];\n\n\t/**\n\t *  The frequency of the oscillator\n\t */\n\treadonly playbackRate: Param<Positive>;\n\n\t/**\n\t * The private instance of the buffer object\n\t */\n\tprivate _buffer: ToneAudioBuffer;\n\n\t/**\n\t * indicators if the source has started/stopped\n\t */\n\tprivate _sourceStarted: boolean = false;\n\tprivate _sourceStopped: boolean = false;\n\n\tconstructor(buffer?: ToneAudioBuffer | AudioBuffer | string, onload?: () => void);\n\tconstructor(options?: Partial<ToneBufferSourceOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(ToneBufferSource.getDefaults(), arguments, [\"buffer\", \"onload\"]));\n\t\tconst options = optionsFromArguments(ToneBufferSource.getDefaults(), arguments, [\"buffer\", \"onload\"]);\n\n\t\tconnect(this._source, this._gainNode);\n\t\tthis._source.onended = () => this._stopSource();\n\n\t\t/**\n\t\t *  The playbackRate of the buffer\n\t\t */\n\t\tthis.playbackRate = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam : this._source.playbackRate,\n\t\t\tunits : \"positive\",\n\t\t\tvalue : options.playbackRate,\n\t\t});\n\n\t\t// set some values initially\n\t\tthis.loop = options.loop;\n\t\tthis.loopStart = options.loopStart;\n\t\tthis.loopEnd = options.loopEnd;\n\t\tthis._buffer = new ToneAudioBuffer(options.buffer, options.onload);\n\n\t\tthis._internalChannels.push(this._source);\n\t}\n\n\tstatic getDefaults(): ToneBufferSourceOptions {\n\t\treturn Object.assign(OneShotSource.getDefaults(), {\n\t\t\tbuffer: new ToneAudioBuffer(),\n\t\t\tloop: false,\n\t\t\tloopEnd : 0,\n\t\t\tloopStart : 0,\n\t\t\tonload: noOp,\n\t\t\tplaybackRate : 1,\n\t\t});\n\t}\n\n\t/**\n\t *  The fadeIn time of the amplitude envelope.\n\t */\n\tget fadeIn(): Time {\n\t\treturn this._fadeIn;\n\t}\n\tset fadeIn(t: Time) {\n\t\tthis._fadeIn = t;\n\t}\n\n\t/**\n\t *  The fadeOut time of the amplitude envelope.\n\t */\n\tget fadeOut(): Time {\n\t\treturn this._fadeOut;\n\t}\n\tset fadeOut(t: Time) {\n\t\tthis._fadeOut = t;\n\t}\n\n\t/**\n\t * The curve applied to the fades, either \"linear\" or \"exponential\"\n\t */\n\tget curve(): ToneBufferSourceCurve {\n\t\treturn this._curve;\n\t}\n\tset curve(t) {\n\t\tthis._curve = t;\n\t}\n\n\t/**\n\t *  Start the buffer\n\t *  @param  time When the player should start.\n\t *  @param  offset The offset from the beginning of the sample to start at.\n\t *  @param  duration How long the sample should play. If no duration\n\t *                   is given, it will default to the full length\n\t *                   of the sample (minus any offset)\n\t *  @param  gain  The gain to play the buffer back at.\n\t */\n\tstart(time?: Time, offset?: Time, duration?: Time, gain: GainFactor = 1): this {\n\t\tthis.assert(this.buffer.loaded, \"buffer is either not set or not loaded\");\n\t\tconst computedTime = this.toSeconds(time);\n\n\t\t// apply the gain envelope\n\t\tthis._startGain(computedTime, gain);\n\n\t\t// if it's a loop the default offset is the loopstart point\n\t\tif (this.loop) {\n\t\t\toffset = defaultArg(offset, this.loopStart);\n\t\t} else {\n\t\t\t// otherwise the default offset is 0\n\t\t\toffset = defaultArg(offset, 0);\n\t\t}\n\t\t// make sure the offset is not less than 0\n\t\tlet computedOffset = Math.max(this.toSeconds(offset), 0);\n\n\t\t// start the buffer source\n\t\tif (this.loop) {\n\t\t\t// modify the offset if it's greater than the loop time\n\t\t\tconst loopEnd = this.toSeconds(this.loopEnd) || this.buffer.duration;\n\t\t\tconst loopStart = this.toSeconds(this.loopStart);\n\t\t\tconst loopDuration = loopEnd - loopStart;\n\t\t\t// move the offset back\n\t\t\tif (computedOffset >= loopEnd) {\n\t\t\t\tcomputedOffset = ((computedOffset - loopStart) % loopDuration) + loopStart;\n\t\t\t}\n\t\t}\n\n\t\t// this.buffer.loaded would have return false if the AudioBuffer was undefined\n\t\tthis._source.buffer = this.buffer.get() as AudioBuffer;\n\t\tthis._source.loopEnd = this.toSeconds(this.loopEnd) || this.buffer.duration;\n\t\tif (computedOffset < this.buffer.duration) {\n\t\t\tthis._sourceStarted = true;\n\t\t\tthis._source.start(computedTime, computedOffset);\n\t\t}\n\n\t\t// if a duration is given, schedule a stop\n\t\tif (isDefined(duration)) {\n\t\t\tlet computedDur = this.toSeconds(duration);\n\t\t\t// make sure it's never negative\n\t\t\tcomputedDur = Math.max(computedDur, 0);\n\t\t\tthis.stop(computedTime + computedDur);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\tprotected _stopSource(time?: Seconds): void {\n\t\tif (!this._sourceStopped) {\n\t\t\tthis._sourceStopped = true;\n\t\t\tthis._source.stop(this.toSeconds(time));\n\t\t\tthis._onended();\n\t\t}\n\t}\n\n\t/**\n\t * If loop is true, the loop will start at this position.\n\t */\n\tget loopStart(): Time {\n\t\treturn this._source.loopStart;\n\t}\n\tset loopStart(loopStart: Time) {\n\t\tthis._source.loopStart = this.toSeconds(loopStart);\n\t}\n\n\t/**\n\t * If loop is true, the loop will end at this position.\n\t */\n\tget loopEnd(): Time {\n\t\treturn this._source.loopEnd;\n\t}\n\tset loopEnd(loopEnd: Time) {\n\t\tthis._source.loopEnd = this.toSeconds(loopEnd);\n\t}\n\n\t/**\n\t * The audio buffer belonging to the player.\n\t */\n\tget buffer(): ToneAudioBuffer {\n\t\treturn this._buffer;\n\t}\n\tset buffer(buffer: ToneAudioBuffer) {\n\t\tthis._buffer.set(buffer);\n\t}\n\n\t/**\n\t * If the buffer should loop once it's over.\n\t */\n\tget loop(): boolean {\n\t\treturn this._source.loop;\n\t}\n\tset loop(loop: boolean) {\n\t\tthis._source.loop = loop;\n\t\tif (this._sourceStarted) {\n\t\t\tthis.cancelStop();\n\t\t}\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._source.onended = null;\n\t\tthis._source.disconnect();\n\t\tthis._buffer.dispose();\n\t\tthis.playbackRate.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioBuffer } from \"../core/context/ToneAudioBuffer\";\nimport { Positive, Time } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Source, SourceOptions } from \"../source/Source\";\nimport { ToneBufferSource } from \"./buffer/BufferSource\";\n\ntype NoiseType = \"white\" | \"brown\" | \"pink\";\n\ninterface NoiseOptions extends SourceOptions {\n\ttype: NoiseType;\n\tplaybackRate: Positive;\n}\n\n/**\n * Noise is a noise generator. It uses looped noise buffers to save on performance.\n * Noise supports the noise types: \"pink\", \"white\", and \"brown\". Read more about\n * colors of noise on [Wikipedia](https://en.wikipedia.org/wiki/Colors_of_noise).\n *\n * @param type the noise type (white|pink|brown)\n * @example\n * //initialize the noise and start\n * var noise = new Noise(\"pink\").start();\n *\n * //make an autofilter to shape the noise\n * var autoFilter = new Tone.AutoFilter({\n * \t\"frequency\" : \"8m\",\n * \t\"min\" : 800,\n * \t\"max\" : 15000\n * }).connect(Tone.Master);\n *\n * //connect the noise\n * noise.connect(autoFilter);\n * //start the autofilter LFO\n * autoFilter.start()\n */\nexport class Noise extends Source<NoiseOptions> {\n\n\tname = \"Noise\";\n\n\t/**\n\t * Private reference to the source\n\t */\n\tprivate _source: ToneBufferSource | null = null;\n\n\t/**\n\t * private reference to the type\n\t */\n\tprivate _type!: NoiseType;\n\n\t/**\n\t *  The playback rate of the noise. Affects\n\t *  the \"frequency\" of the noise.\n\t */\n\tprivate _playbackRate: Positive;\n\n\tconstructor(options?: NoiseType | Partial<NoiseOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Noise.getDefaults(), arguments, [\"type\"]));\n\t\tconst options = optionsFromArguments(Noise.getDefaults(), arguments, [\"type\"]);\n\n\t\tthis._playbackRate = options.playbackRate;\n\t\tthis.type = options.type;\n\t}\n\n\tstatic getDefaults(): NoiseOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tplaybackRate: 1,\n\t\t\ttype: \"white\" as NoiseType,\n\t\t});\n\t}\n\n\t/**\n\t * The type of the noise. Can be \"white\", \"brown\", or \"pink\".\n\t * @example\n\t * noise.type = \"white\";\n\t */\n\tget type(): NoiseType {\n\t\treturn this._type;\n\t}\n\tset type(type: NoiseType) {\n\t\tthis.assert(type in _noiseBuffers, \"Noise: invalid type: \" + type);\n\t\tif (this._type !== type) {\n\t\t\tthis._type = type;\n\t\t\t// if it's playing, stop and restart it\n\t\t\tif (this.state === \"started\") {\n\t\t\t\tconst now = this.now();\n\t\t\t\tthis._stop(now);\n\t\t\t\tthis._start(now);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *  The playback rate of the noise. Affects\n\t *  the \"frequency\" of the noise.\n\t */\n\tget playbackRate(): Positive {\n\t\treturn this._playbackRate;\n\t}\n\tset playbackRate(rate: Positive) {\n\t\tthis._playbackRate = rate;\n\t\tif (this._source) {\n\t\t\tthis._source.playbackRate.value = rate;\n\t\t}\n\t}\n\n\t/**\n\t *  internal start method\n\t */\n\tprotected _start(time?: Time): void {\n\t\tconst buffer = _noiseBuffers[this._type];\n\t\tthis._source = new ToneBufferSource({\n\t\t\tbuffer,\n\t\t\tcontext: this.context,\n\t\t\tloop: true,\n\t\t\tonended: () => this.onstop(this),\n\t\t\tplaybackRate: this._playbackRate,\n\t\t}).connect(this.output);\n\t\tthis._source.start(this.toSeconds(time), Math.random() * (buffer.duration - 0.001));\n\t}\n\n\t/**\n\t *  internal stop method\n\t *\n\t *  @param {Time} time\n\t *  @private\n\t */\n\tprotected _stop(time?: Time): void {\n\t\tif (this._source) {\n\t\t\tthis._source.stop(this.toSeconds(time));\n\t\t\tthis._source = null;\n\t\t}\n\t}\n\n\t/**\n\t * Restarts the noise.\n\t * @param  time When to restart the noise.\n\t */\n\trestart(time?: Time): this {\n\t\t// TODO could be optimized by cancelling the buffer source 'stop'\n\t\t// stop and restart\n\t\tthis._stop(time);\n\t\tthis._start(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (this._source) {\n\t\t\tthis._source.disconnect();\n\t\t}\n\t\treturn this;\n\t}\n}\n\n///////////////////////////////////////////////////////////////////////////\n// THE NOISE BUFFERS\n///////////////////////////////////////////////////////////////////////////\n\n// Noise buffer stats\nconst BUFFER_LENGTH = 44100 * 5;\nconst NUM_CHANNELS = 2;\n\n/**\n * The cached noise buffers\n */\ninterface NoiseCache {\n\t[key: string]: ToneAudioBuffer | null;\n}\n\n/**\n * Cache the noise buffers\n */\nconst _noiseCache: NoiseCache = {\n\tbrown: null,\n\tpink: null,\n\twhite: null,\n};\n\n/**\n * The noise arrays. Generated on initialization.\n * borrowed heavily from https://github.com/zacharydenton/noise.js\n * (c) 2013 Zach Denton (MIT)\n */\nconst _noiseBuffers = {\n\tget brown(): ToneAudioBuffer {\n\t\tif (!_noiseCache.brown) {\n\t\t\tconst buffer: Float32Array[] = [];\n\t\t\tfor (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {\n\t\t\t\tconst channel = new Float32Array(BUFFER_LENGTH);\n\t\t\t\tbuffer[channelNum] = channel;\n\t\t\t\tlet lastOut = 0.0;\n\t\t\t\tfor (let i = 0; i < BUFFER_LENGTH; i++) {\n\t\t\t\t\tconst white = Math.random() * 2 - 1;\n\t\t\t\t\tchannel[i] = (lastOut + (0.02 * white)) / 1.02;\n\t\t\t\t\tlastOut = channel[i];\n\t\t\t\t\tchannel[i] *= 3.5; // (roughly) compensate for gain\n\t\t\t\t}\n\t\t\t}\n\t\t\t_noiseCache.brown = new ToneAudioBuffer().fromArray(buffer);\n\t\t}\n\t\treturn _noiseCache.brown;\n\t},\n\n\tget pink(): ToneAudioBuffer {\n\t\tif (!_noiseCache.pink) {\n\t\t\tconst buffer: Float32Array[] = [];\n\t\t\tfor (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {\n\t\t\t\tconst channel = new Float32Array(BUFFER_LENGTH);\n\t\t\t\tbuffer[channelNum] = channel;\n\t\t\t\t// tslint:disable-next-line: one-variable-per-declaration\n\t\t\t\tlet b0, b1, b2, b3, b4, b5, b6;\n\t\t\t\tb0 = b1 = b2 = b3 = b4 = b5 = b6 = 0.0;\n\t\t\t\tfor (let i = 0; i < BUFFER_LENGTH; i++) {\n\t\t\t\t\tconst white = Math.random() * 2 - 1;\n\t\t\t\t\tb0 = 0.99886 * b0 + white * 0.0555179;\n\t\t\t\t\tb1 = 0.99332 * b1 + white * 0.0750759;\n\t\t\t\t\tb2 = 0.96900 * b2 + white * 0.1538520;\n\t\t\t\t\tb3 = 0.86650 * b3 + white * 0.3104856;\n\t\t\t\t\tb4 = 0.55000 * b4 + white * 0.5329522;\n\t\t\t\t\tb5 = -0.7616 * b5 - white * 0.0168980;\n\t\t\t\t\tchannel[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;\n\t\t\t\t\tchannel[i] *= 0.11; // (roughly) compensate for gain\n\t\t\t\t\tb6 = white * 0.115926;\n\t\t\t\t}\n\t\t\t}\n\t\t\t_noiseCache.pink = new ToneAudioBuffer().fromArray(buffer);\n\t\t}\n\t\treturn _noiseCache.pink;\n\t},\n\n\tget white(): ToneAudioBuffer {\n\t\tif (!_noiseCache.white) {\n\t\t\tconst buffer: Float32Array[] = [];\n\t\t\tfor (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {\n\t\t\t\tconst channel = new Float32Array(BUFFER_LENGTH);\n\t\t\t\tbuffer[channelNum] = channel;\n\t\t\t\tfor (let i = 0; i < BUFFER_LENGTH; i++) {\n\t\t\t\t\tchannel[i] = Math.random() * 2 - 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t_noiseCache.white = new ToneAudioBuffer().fromArray(buffer);\n\t\t}\n\t\treturn _noiseCache.white;\n\t},\n};\n","import { AbstractParam } from \"../core/context/AbstractParam\";\nimport { Param } from \"../core/context/Param\";\nimport { InputNode, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { connect } from \"../core/context/ToneAudioNode\";\nimport { Time, Unit, UnitName } from \"../core/type/Units\";\nimport { isAudioParam } from \"../core/util/AdvancedTypeCheck\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\n\nexport interface SignalOptions<Type> extends ToneAudioNodeOptions {\n\tvalue: Type;\n\tunits: UnitName;\n\tconvert: boolean;\n}\n\n/**\n * A signal is an audio-rate value. Tone.Signal is a core component of the library.\n * Unlike a number, Signals can be scheduled with sample-level accuracy. Tone.Signal\n * has all of the methods available to native Web Audio\n * [AudioParam](http://webaudio.github.io/web-audio-api/#the-audioparam-interface)\n * as well as additional conveniences. Read more about working with signals\n * [here](https://github.com/Tonejs/Tone.js/wiki/Signals).\n *  @param value Initial value of the signal\n *  @param units unit The units the signal is in.\n * @example\n * const signal = new Tone.Signal(10);\n */\nexport class Signal<Type extends Unit = number> extends ToneAudioNode<SignalOptions<any>>\nimplements AbstractParam<Type> {\n\n\treadonly name: string = \"Signal\";\n\n\t/**\n\t * Indicates if the value should be overridden on connection.\n\t */\n\treadonly override: boolean = true;\n\n\t/**\n\t * The constant source node which generates the signal\n\t */\n\tprotected _constantSource: ConstantSourceNode = this.context.createConstantSource();\n\treadonly output: OutputNode = this._constantSource;\n\tprotected _param: Param<Type>;\n\treadonly input: InputNode;\n\n\tconstructor(value?: Type, units?: UnitName);\n\tconstructor(options?: Partial<SignalOptions<Type>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]));\n\n\t\tconst options = optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]) as SignalOptions<Type>;\n\n\t\tthis._constantSource.start(0);\n\t\tthis.input = this._param = new Param({\n\t\t\tcontext: this.context,\n\t\t\tconvert: options.convert,\n\t\t\tparam: this._constantSource.offset,\n\t\t\tunits: options.units,\n\t\t\tvalue: options.value,\n\t\t});\n\t}\n\n\tstatic getDefaults(): SignalOptions<any> {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tchannelCount: 1,\n\t\t\tchannelCountMode: \"explicit\",\n\t\t\tchannelInterpretation: \"discrete\",\n\t\t\tconvert: true,\n\t\t\tunits: \"number\" as UnitName,\n\t\t\tvalue: 0,\n\t\t}) as SignalOptions<any>;\n\t}\n\n\tconnect(destination: InputNode, outputNum: number = 0, inputNum: number = 0): this {\n\t\tconnectSignal(this, destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._param.dispose();\n\t\tthis._constantSource.stop(this.now());\n\t\tthis._constantSource.disconnect();\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// ABSTRACT PARAM INTERFACE\n\t// just a proxy for the ConstantSourceNode's offset AudioParam\n\t// all docs are generated from AbstractParam.ts\n\t///////////////////////////////////////////////////////////////////////////\n\n\tsetValueAtTime(value: Type, time: Time): this {\n\t\tthis._param.setValueAtTime(value, time);\n\t\treturn this;\n\t}\n\tgetValueAtTime(time: Time): Type {\n\t\treturn this._param.getValueAtTime(time);\n\t}\n\tsetRampPoint(time: Time): this {\n\t\tthis._param.setRampPoint(time);\n\t\treturn this;\n\t}\n\tlinearRampToValueAtTime(value: Type, time: Time): this {\n\t\tthis._param.linearRampToValueAtTime(value, time);\n\t\treturn this;\n\t}\n\texponentialRampToValueAtTime(value: Type, time: Time): this {\n\t\tthis._param.exponentialRampToValueAtTime(value, time);\n\t\treturn this;\n\t}\n\texponentialRampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tthis._param.exponentialRampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\tlinearRampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tthis._param.linearRampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\ttargetRampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tthis._param.targetRampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\texponentialApproachValueAtTime(value: Type, time: Time, rampTime: Time): this {\n\t\tthis._param.exponentialApproachValueAtTime(value, time, rampTime);\n\t\treturn this;\n\t}\n\tsetTargetAtTime(value: Type, startTime: Time, timeConstant: number): this {\n\t\tthis._param.setTargetAtTime(value, startTime, timeConstant);\n\t\treturn this;\n\t}\n\tsetValueCurveAtTime(values: Type[], startTime: Time, duration: Time, scaling?: number): this {\n\t\tthis._param.setValueCurveAtTime(values, startTime, duration, scaling);\n\t\treturn this;\n\t}\n\tcancelScheduledValues(time: Time): this {\n\t\tthis._param.cancelScheduledValues(time);\n\t\treturn this;\n\t}\n\tcancelAndHoldAtTime(time: Time): this {\n\t\tthis._param.cancelAndHoldAtTime(time);\n\t\treturn this;\n\t}\n\trampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tthis._param.rampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\n\tget value(): Type {\n\t\treturn this._param.value;\n\t}\n\tset value(value: Type) {\n\t\tthis._param.value = value;\n\t}\n\n\tget convert(): boolean {\n\t\treturn this._param.convert;\n\t}\n\tset convert(convert: boolean) {\n\t\tthis._param.convert = convert;\n\t}\n\n\tget units(): UnitName {\n\t\treturn this._param.units;\n\t}\n\n\tget overridden(): boolean {\n\t\treturn this._param.overridden;\n\t}\n\tset overridden(overridden: boolean) {\n\t\tthis._param.overridden = overridden;\n\t}\n\n\tget maxValue(): number {\n\t\treturn this._param.maxValue;\n\t}\n\tget minValue(): number {\n\t\treturn this._param.minValue;\n\t}\n}\n\n/**\n * When connecting from a signal, it's necessary to zero out the node destination\n * node if that node is also a signal. If the destination is not 0, then the values\n * will be summed. This method insures that the output of the destination signal will\n * be the same as the source signal, making the destination signal a pass through node.\n * @param signal The output signal to connect from\n * @param destination the destination to connect to\n * @param outputNum the optional output number\n * @param inputNum the input number\n */\nexport function connectSignal(signal: OutputNode, destination: InputNode, outputNum?: number, inputNum?: number): void {\n\tif (destination instanceof Param || isAudioParam(destination) ||\n\t\t(destination instanceof Signal && destination.override)) {\n\t\t// cancel changes\n\t\tdestination.cancelScheduledValues(0);\n\t\t// reset the value\n\t\tdestination.setValueAtTime(0, 0);\n\t\t// mark the value as overridden\n\t\tif (destination instanceof Signal) {\n\t\t\tdestination.overridden = true;\n\t\t}\n\t}\n\tconnect(signal, destination, outputNum, inputNum);\n}\n","import { connect } from \"../../core/Connect\";\nimport { Param } from \"../../core/context/Param\";\nimport { Cents, Frequency, Seconds, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { OneShotSource, OneShotSourceOptions } from \"../OneShotSource\";\n\ninterface ToneOscillatorNodeOptions extends OneShotSourceOptions {\n\tfrequency: Frequency;\n\tdetune: Cents;\n\ttype: OscillatorType;\n}\n\n/**\n * Wrapper around the native fire-and-forget OscillatorNode.\n * Adds the ability to reschedule the stop method.\n * ***[Tone.Oscillator](Oscillator) is better for most use-cases***\n *  @extends {Tone.AudioNode}\n *  @param  {AudioBuffer|Tone.Buffer}  buffer   The buffer to play\n *  @param  {Function}  onload  The callback to invoke when the\n *                               buffer is done playing.\n */\nexport class ToneOscillatorNode extends OneShotSource<ToneOscillatorNodeOptions> {\n\n\treadonly name = \"ToneOscillatorNode\";\n\n\t/**\n\t *  The oscillator\n\t */\n\tprivate _oscillator = this.context.createOscillator();\n\tprotected _internalChannels = [this._oscillator];\n\n\t/**\n\t *  The frequency of the oscillator\n\t */\n\treadonly frequency: Param<Frequency>;\n\n\t/**\n\t *  The detune of the oscillator\n\t */\n\treadonly detune: Param<Cents>;\n\n\tconstructor(options?: Partial<ToneOscillatorNodeOptions>);\n\tconstructor(\n\t\tfrequency: Frequency,\n\t\ttype: OscillatorType,\n\t);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(ToneOscillatorNode.getDefaults(), arguments, [\"frequency\", \"type\"]));\n\t\tconst options = optionsFromArguments(ToneOscillatorNode.getDefaults(), arguments, [\"frequency\", \"type\"]);\n\n\t\tconnect(this._oscillator, this._gainNode);\n\n\t\tthis.type = options.type;\n\n\t\tthis.frequency = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam : this._oscillator.frequency,\n\t\t\tunits : \"frequency\",\n\t\t\tvalue : options.frequency,\n\t\t});\n\n\t\tthis.detune = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam : this._oscillator.detune,\n\t\t\tunits : \"cents\",\n\t\t\tvalue : options.detune,\n\t\t});\n\t}\n\n\tstatic getDefaults(): ToneOscillatorNodeOptions {\n\t\treturn Object.assign(OneShotSource.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tfrequency: 440,\n\t\t\ttype: \"sine\" as OscillatorType,\n\t\t});\n\t}\n\n\t/**\n\t * Start the oscillator node at the given time\n\t * @param  time When to start the oscillator\n\t */\n\tstart(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis.log(\"start\", computedTime);\n\t\tthis._startGain(computedTime);\n\t\tthis._oscillator.start(computedTime);\n\t\treturn this;\n\t}\n\n\tprotected _stopSource(time?: Seconds): void {\n\t\tthis._oscillator.stop(time);\n\t}\n\n\t/**\n\t * Sets an arbitrary custom periodic waveform given a PeriodicWave.\n\t * @param  periodicWave PeriodicWave should be created with context.createPeriodicWave\n\t */\n\tsetPeriodicWave(periodicWave: PeriodicWave): this {\n\t\tthis._oscillator.setPeriodicWave(periodicWave);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The oscillator type. Either 'sine', 'sawtooth', 'square', or 'triangle'\n\t */\n\tget type(): OscillatorType {\n\t\treturn this._oscillator.type;\n\t}\n\tset type(type: OscillatorType) {\n\t\tthis._oscillator.type = type;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (this.state === \"started\") {\n\t\t\tthis.stop();\n\t\t}\n\t\tthis._oscillator.disconnect();\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\treturn this;\n\t}\n}\n","import { AudioRange, Cents, Degrees, Frequency, Radians, Time } from \"../../core/type/Units\";\nimport { deepEquals, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp, readOnly } from \"../../core/util/Interface\";\nimport { isDefined } from \"../../core/util/TypeCheck\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { ToneOscillatorConstructorOptions, ToneOscillatorInterface,\n\tToneOscillatorOptions, ToneOscillatorType } from \"./OscillatorInterface\";\nimport { ToneOscillatorNode } from \"./OscillatorNode\";\n\n/**\n *  Oscillator supports a number of features including\n *  phase rotation, multiple oscillator types (see Oscillator.type),\n *  and Transport syncing (see Oscillator.syncFrequency).\n *\n *  @param frequency Starting frequency\n *  @param type The oscillator type. Read more about type below.\n *  @example\n * //make and start a 440hz sine tone\n * var osc = new Oscillator(440, \"sine\").toDestination().start();\n */\nexport class Oscillator extends Source<ToneOscillatorOptions> implements ToneOscillatorInterface {\n\n\tname = \"Oscillator\";\n\n\t/**\n\t *  the main oscillator\n\t */\n\tprivate _oscillator: ToneOscillatorNode | null = null;\n\n\t/**\n\t *  The frequency control.\n\t */\n\tfrequency: Signal<Frequency>;\n\n\t/**\n\t *  The detune control signal.\n\t */\n\tdetune: Signal<Cents>;\n\n\t/**\n\t *  the periodic wave\n\t */\n\tprivate _wave?: PeriodicWave;\n\n\t/**\n\t *  The partials of the oscillator\n\t */\n\tprivate _partials: number[];\n\n\t/**\n\t *  The number of partials to limit or extend the periodic wave by\n\t */\n\tprivate _partialCount: number;\n\n\t/**\n\t *  the phase of the oscillator between 0 - 360\n\t */\n\tprivate _phase!: Radians;\n\n\t/**\n\t *  the type of the oscillator\n\t *  @type {string}\n\t *  @private\n\t */\n\tprivate _type;\n\n\tconstructor(options?: Partial<ToneOscillatorConstructorOptions>)\n\tconstructor(frequency?: Frequency, type?: ToneOscillatorType);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Oscillator.getDefaults(), arguments, [\"frequency\", \"type\"]));\n\t\tconst options = optionsFromArguments(Oscillator.getDefaults(), arguments, [\"frequency\", \"type\"]);\n\n\t\tthis.frequency = new Signal<Frequency>({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t});\n\t\treadOnly(this, \"frequency\");\n\n\t\tthis.detune = new Signal<Cents>({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune,\n\t\t});\n\t\treadOnly(this, \"detune\");\n\n\t\tthis._partials = options.partials;\n\t\tthis._partialCount = options.partialCount;\n\t\tthis._type = options.type;\n\n\t\tif (options.partialCount && options.type !== \"custom\") {\n\t\t\tthis._type = this.baseType + options.partialCount.toString();\n\t\t}\n\t\tthis.phase = options.phase;\n\t}\n\n\tstatic getDefaults(): ToneOscillatorOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tfrequency: 440,\n\t\t\tpartialCount: 0,\n\t\t\tpartials: [],\n\t\t\tphase: 0,\n\t\t\ttype: \"sine\",\n\t\t}) as ToneOscillatorOptions;\n\t}\n\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _start(time?: Time): void {\n\t\tconst computedTime = this.toSeconds(time);\n\t\t// new oscillator with previous values\n\t\tconst oscillator = new ToneOscillatorNode({\n\t\t\tcontext: this.context,\n\t\t\tonended: () => this.onstop(this),\n\t\t});\n\t\tthis._oscillator = oscillator;\n\t\tif (this._wave) {\n\t\t\tthis._oscillator.setPeriodicWave(this._wave);\n\t\t} else {\n\t\t\tthis._oscillator.type = this._type;\n\t\t}\n\t\t// connect the control signal to the oscillator frequency & detune\n\t\tthis._oscillator.connect(this.output);\n\t\tthis.frequency.connect(this._oscillator.frequency);\n\t\tthis.detune.connect(this._oscillator.detune);\n\n\t\t// start the oscillator\n\t\tthis._oscillator.start(computedTime);\n\t}\n\n\t/**\n\t *  stop the oscillator\n\t */\n\tprotected _stop(time?: Time): void {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._oscillator) {\n\t\t\tthis._oscillator.stop(computedTime);\n\t\t}\n\t}\n\n\t/**\n\t * Restart the oscillator. Does not stop the oscillator, but instead\n\t * just cancels any scheduled 'stop' from being invoked.\n\t */\n\trestart(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis.log(\"restart\", computedTime);\n\t\tif (this._oscillator) {\n\t\t\tthis._oscillator.cancelStop();\n\t\t}\n\t\tthis._state.cancel(computedTime);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Sync the signal to the Transport's bpm. Any changes to the transports bpm,\n\t *  will also affect the oscillators frequency.\n\t *  @example\n\t * Tone.Transport.bpm.value = 120;\n\t * osc.frequency.value = 440;\n\t * //the ration between the bpm and the frequency will be maintained\n\t * osc.syncFrequency();\n\t * Tone.Transport.bpm.value = 240;\n\t * // the frequency of the oscillator is doubled to 880\n\t */\n\tsyncFrequency(): this {\n\t\tthis.context.transport.syncSignal(this.frequency);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Unsync the oscillator's frequency from the Transport.\n\t *  See Oscillator.syncFrequency\n\t */\n\tunsyncFrequency(): this {\n\t\tthis.context.transport.unsyncSignal(this.frequency);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Cache the periodic waves to avoid having to redo computations\n\t */\n\tprivate static _periodicWaveCache: Array<{\n\t\tpartials: number[];\n\t\tphase: number;\n\t\ttype: string;\n\t\tpartialCount: number;\n\t\treal: Float32Array,\n\t\timag: Float32Array,\n\t}> = [];\n\n\t/**\n\t * Get a cached periodic wave. Avoids having to recompute\n\t * the oscillator values when they have already been computed\n\t * with the same values.\n\t */\n\tprivate _getCachedPeriodicWave(): [Float32Array, Float32Array] | undefined {\n\t\tif (this._type === \"custom\") {\n\t\t\tconst oscProps = Oscillator._periodicWaveCache.find(description => {\n\t\t\t\treturn  description.phase === this._phase &&\n\t\t\t\t\tdeepEquals(description.partials, this._partials);\n\t\t\t});\n\t\t\treturn oscProps && [oscProps.real, oscProps.imag];\n\t\t} else {\n\t\t\tconst oscProps = Oscillator._periodicWaveCache.find(description => {\n\t\t\t\treturn  description.type === this._type &&\n\t\t\t\t\tdescription.phase === this._phase;\n\t\t\t});\n\t\t\tthis._partialCount = oscProps ? oscProps.partialCount : this._partialCount;\n\t\t\treturn oscProps && [oscProps.real, oscProps.imag];\n\t\t}\n\t}\n\n\t/* tslint:disable */\n\t/**\n\t * The type of the oscillator: either sine, square, triangle, or sawtooth. Also capable of\n\t * setting the first x number of partials of the oscillator. For example: \"sine4\" would\n\t * set be the first 4 partials of the sine wave and \"triangle8\" would set the first\n\t * 8 partials of the triangle wave.\n\t * <br><br>\n\t * Uses PeriodicWave internally even for native types so that it can set the phase.\n\t * PeriodicWave equations are from the\n\t * [Webkit Web Audio implementation](https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/modules/webaudio/PeriodicWave.cpp&sq=package:chromium).\n\t *\n\t * @memberOf Oscillator#\n\t * @type {string}\n\t * @name type\n\t * @example\n\t * //set it to a square wave\n\t * osc.type = \"square\";\n\t * @example\n\t * //set the first 6 partials of a sawtooth wave\n\t * osc.type = \"sawtooth6\";\n\t */\n\t/* tslint:enable */\n\tget type(): ToneOscillatorType {\n\t\treturn this._type;\n\t}\n\tset type(type: ToneOscillatorType) {\n\t\tthis._type = type;\n\t\tconst isBasicType = [\"sine\", \"square\", \"sawtooth\", \"triangle\"].indexOf(type) !== -1;\n\t\tif (this._phase === 0 && isBasicType) {\n\t\t\tthis._wave = undefined;\n\t\t\tthis._partialCount = 0;\n\t\t\t// just go with the basic approach\n\t\t\tif (this._oscillator !== null) {\n\t\t\t\t// already tested that it's a basic type\n\t\t\t\tthis._oscillator.type = type as OscillatorType;\n\t\t\t}\n\t\t} else {\n\t\t\t// first check if the value is cached\n\t\t\tconst cache = this._getCachedPeriodicWave();\n\t\t\tif (isDefined(cache)) {\n\t\t\t\tconst [real, imag] = cache;\n\t\t\t\tthis._wave = this.context.createPeriodicWave(real, imag);\n\t\t\t\tif (this._oscillator !== null) {\n\t\t\t\t\tthis._oscillator.setPeriodicWave(this._wave);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst [real, imag] = this._getRealImaginary(type, this._phase);\n\t\t\t\tconst periodicWave = this.context.createPeriodicWave(real, imag);\n\t\t\t\tthis._wave = periodicWave;\n\t\t\t\tif (this._oscillator !== null) {\n\t\t\t\t\tthis._oscillator.setPeriodicWave(this._wave);\n\t\t\t\t}\n\t\t\t\t// set the cache\n\t\t\t\tOscillator._periodicWaveCache.push({\n\t\t\t\t\timag,\n\t\t\t\t\tpartialCount: this._partialCount,\n\t\t\t\t\tpartials: this._partials,\n\t\t\t\t\tphase: this._phase,\n\t\t\t\t\treal,\n\t\t\t\t\ttype: this._type,\n\t\t\t\t});\n\t\t\t\tif (Oscillator._periodicWaveCache.length > 100) {\n\t\t\t\t\tOscillator._periodicWaveCache.shift();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * The oscillator type without the partialsCount appended to the end\n\t * @example\n\t * osc.type = 'sine2'\n\t * osc.baseType //'sine'\n\t * osc.partialCount = 2\n\t */\n\tget baseType(): OscillatorType {\n\t\treturn this._type.replace(this.partialCount, \"\");\n\t}\n\tset baseType(baseType: OscillatorType) {\n\t\tif (this.partialCount && this._type !== \"custom\" && baseType !== \"custom\") {\n\t\t\tthis.type = baseType + this.partialCount as ToneOscillatorType;\n\t\t} else {\n\t\t\tthis.type = baseType;\n\t\t}\n\t}\n\n\t/**\n\t * 'partialCount' offers an alternative way to set the number of used partials.\n\t * When partialCount is 0, the maximum number of partials are used when representing\n\t * the waveform using the periodicWave. When 'partials' is set, this value is\n\t * not settable, but equals the length of the partials array.\n\t * @example\n\t * osc.type = 'sine'\n\t * osc.partialCount = 3\n\t * //is equivalent to\n\t * osc.type = 'sine3'\n\t */\n\tget partialCount(): number {\n\t\treturn this._partialCount;\n\t}\n\tset partialCount(p: number) {\n\t\tlet type = this._type;\n\t\tconst partial = /^(sine|triangle|square|sawtooth)(\\d+)$/.exec(this._type);\n\t\tif (partial) {\n\t\t\ttype = partial[1];\n\t\t}\n\t\tif (this._type !== \"custom\") {\n\t\t\tif (p === 0) {\n\t\t\t\tthis.type = type;\n\t\t\t} else {\n\t\t\t\tthis.type = type + p.toString() as ToneOscillatorType;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *  Get the object's attributes. Given no arguments get\n\t *  will return all available object properties and their corresponding\n\t *  values.\n\t */\n\tget(): ToneOscillatorOptions {\n\t\tconst values = super.get();\n\t\tif (values.type !== \"custom\") {\n\t\t\tdelete values.partials;\n\t\t}\n\t\treturn values;\n\t}\n\n\t/**\n\t *  Returns the real and imaginary components based\n\t *  on the oscillator type.\n\t *  @returns [real: Float32Array, imaginary: Float32Array]\n\t *  @private\n\t */\n\tprivate _getRealImaginary(type: ToneOscillatorType, phase: Radians): Float32Array[] {\n\t\tconst fftSize = 4096;\n\t\tlet periodicWaveSize = fftSize / 2;\n\n\t\tconst real = new Float32Array(periodicWaveSize);\n\t\tconst imag = new Float32Array(periodicWaveSize);\n\n\t\tlet partialCount = 1;\n\t\tif (type === \"custom\") {\n\t\t\tpartialCount = this._partials.length + 1;\n\t\t\tthis._partialCount = this._partials.length;\n\t\t\tperiodicWaveSize = partialCount;\n\t\t\t// if the partial count is 0, don't bother doing any computation\n\t\t\tif (this._partials.length === 0 ) {\n\t\t\t\treturn [real, imag];\n\t\t\t}\n\t\t} else {\n\t\t\tconst partial = /^(sine|triangle|square|sawtooth)(\\d+)$/.exec(type);\n\t\t\tif (partial) {\n\t\t\t\tpartialCount = parseInt(partial[2], 10) + 1;\n\t\t\t\tthis._partialCount = parseInt(partial[2], 10);\n\t\t\t\ttype = partial[1] as ToneOscillatorType;\n\t\t\t\tpartialCount = Math.max(partialCount, 2);\n\t\t\t\tperiodicWaveSize = partialCount;\n\t\t\t} else {\n\t\t\t\tthis._partialCount = 0;\n\t\t\t}\n\t\t\tthis._partials = [];\n\t\t}\n\n\t\t// tslint:disable: no-bitwise\n\t\tfor (let n = 1; n < periodicWaveSize; ++n) {\n\t\t\tconst piFactor = 2 / (n * Math.PI);\n\t\t\tlet b;\n\t\t\tswitch (type) {\n\t\t\t\tcase \"sine\":\n\t\t\t\t\tb = (n <= partialCount) ? 1 : 0;\n\t\t\t\t\tthis._partials[n - 1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"square\":\n\t\t\t\t\tb = (n & 1) ? 2 * piFactor : 0;\n\t\t\t\t\tthis._partials[n - 1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"sawtooth\":\n\t\t\t\t\tb = piFactor * ((n & 1) ? 1 : -1);\n\t\t\t\t\tthis._partials[n - 1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"triangle\":\n\t\t\t\t\tif (n & 1) {\n\t\t\t\t\t\tb = 2 * (piFactor * piFactor) * ((((n - 1) >> 1) & 1) ? -1 : 1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tb = 0;\n\t\t\t\t\t}\n\t\t\t\t\tthis._partials[n - 1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"custom\":\n\t\t\t\t\tb = this._partials[n - 1];\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new TypeError(\"Oscillator: invalid type: \" + type);\n\t\t\t}\n\t\t\tif (b !== 0) {\n\t\t\t\treal[n] = -b * Math.sin(phase * n);\n\t\t\t\timag[n] = b * Math.cos(phase * n);\n\t\t\t} else {\n\t\t\t\treal[n] = 0;\n\t\t\t\timag[n] = 0;\n\t\t\t}\n\t\t}\n\t\treturn [real, imag];\n\t}\n\n\t/**\n\t *  Compute the inverse FFT for a given phase.\n\t */\n\tprivate _inverseFFT(real: Float32Array, imag: Float32Array, phase: Radians): number {\n\t\tlet sum = 0;\n\t\tconst len = real.length;\n\t\tfor (let i = 0; i < len; i++) {\n\t\t\tsum += real[i] * Math.cos(i * phase) + imag[i] * Math.sin(i * phase);\n\t\t}\n\t\treturn sum;\n\t}\n\n\t/**\n\t *  Returns the initial value of the oscillator.\n\t */\n\tprotected _getInitialValue(): AudioRange {\n\t\tconst [real, imag] = this._getRealImaginary(this._type, 0);\n\t\tlet maxValue = 0;\n\t\tconst twoPi = Math.PI * 2;\n\t\t// check for peaks in 8 places\n\t\tfor (let i = 0; i < 8; i++) {\n\t\t\tmaxValue = Math.max(this._inverseFFT(real, imag, (i / 8) * twoPi), maxValue);\n\t\t}\n\t\treturn -this._inverseFFT(real, imag, this._phase) / maxValue;\n\t}\n\n\t/**\n\t * The partials of the waveform. A partial represents\n\t * the amplitude at a harmonic. The first harmonic is the\n\t * fundamental frequency, the second is the octave and so on\n\t * following the harmonic series.\n\t * Setting this value will automatically set the type to \"custom\".\n\t * The value is an empty array when the type is not \"custom\".\n\t * @example\n\t * osc.partials = [1, 0.2, 0.01];\n\t */\n\tget partials(): number[] {\n\t\treturn this._partials;\n\t}\n\tset partials(partials: number[]) {\n\t\tthis._partials = partials;\n\t\tif (partials.length) {\n\t\t\tthis.type = \"custom\";\n\t\t}\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t * @example\n\t * osc.phase = 180; //flips the phase of the oscillator\n\t */\n\tget phase(): Degrees {\n\t\treturn this._phase * (180 / Math.PI);\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._phase = phase * Math.PI / 180;\n\t\t// reset the type\n\t\tthis.type = this._type;\n\t}\n\n\t/**\n\t *  Dispose and disconnect.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (this._oscillator !== null) {\n\t\t\tthis._oscillator.dispose();\n\t\t}\n\t\tthis._wave = undefined;\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\treturn this;\n\t}\n}\n","import { optionsFromArguments } from \"..//core/util/Defaults\";\nimport { InputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { connectSignal } from \"./Signal\";\n/**\n * A signal operator has an input and output and modifies the signal.\n */\nexport abstract class SignalOperator<Options extends ToneAudioNodeOptions> extends ToneAudioNode<Options> {\n\n\tconstructor(options?: Partial<Options>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(SignalOperator.getDefaults(), arguments, [\"context\"])));\n\t}\n\n\tconnect(destination: InputNode, outputNum: number = 0, inputNum: number = 0): this {\n\t\tconnectSignal(this, destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { isArray, isFunction, isUndef } from \"../core/util/TypeCheck\";\nimport { Signal, SignalOptions } from \"./Signal\";\nimport { SignalOperator } from \"./SignalOperator\";\n\ntype WaveShaperMappingFn = (value: number, index?: number) => number;\n\ntype WaveShaperMapping =  WaveShaperMappingFn | number[] | Float32Array;\n\ninterface WaveShaperOptions extends ToneAudioNodeOptions {\n\tmapping?: WaveShaperMapping;\n\tlength: number;\n\tcurve?: number[] | Float32Array;\n}\n\n/**\n * Wraps the native Web Audio API\n * [WaveShaperNode](http://webaudio.github.io/web-audio-api/#the-waveshapernode-interface).\n *\n *  @param mapping The function used to define the values.\n *                 The mapping function should take two arguments:\n *                 the first is the value at the current position\n *                 and the second is the array position.\n *                 If the argument is an array, that array will be\n *                 set as the wave shaping function. The input\n *                 signal is an AudioRange [-1, 1] value and the output\n *                 signal can take on any numerical values.\n *\n *  @param bufferLen The length of the WaveShaperNode buffer.\n *  @example\n * var timesTwo = new WaveShaper(function(val){\n * \treturn val * 2;\n * }, 2048);\n *  @example\n * //a waveshaper can also be constructed with an array of values\n * var invert = new WaveShaper([1, -1]);\n */\nexport class WaveShaper extends SignalOperator<WaveShaperOptions> {\n\n\tname = \"WaveShaper\";\n\n\t/**\n\t *  the waveshaper node\n\t */\n\tprivate _shaper: WaveShaperNode = this.context.createWaveShaper();\n\n\t/**\n\t * The input to the waveshaper node.\n\t */\n\tinput = this._shaper;\n\n\t/**\n\t * The output from the waveshaper node\n\t */\n\toutput = this._shaper;\n\n\tconstructor(options?: Partial<WaveShaperOptions>);\n\tconstructor(mapping?: WaveShaperMapping , length?: number);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(WaveShaper.getDefaults(), arguments, [\"mapping\", \"length\"])));\n\t\tconst options = optionsFromArguments(WaveShaper.getDefaults(), arguments, [\"mapping\", \"length\"]);\n\n\t\tif (isArray(options.mapping) || options.mapping instanceof Float32Array) {\n\t\t\tthis.curve = Float32Array.from(options.mapping);\n\t\t} else if (isFunction(options.mapping)) {\n\t\t\tthis.setMap(options.mapping, options.length);\n\t\t}\n\t}\n\n\tstatic getDefaults(): WaveShaperOptions {\n\t\treturn Object.assign(Signal.getDefaults(), {\n\t\t\tlength: 1024,\n\t\t});\n\t}\n\n\t/**\n\t *  Uses a mapping function to set the value of the curve.\n\t *  @param mapping The function used to define the values.\n\t *                 The mapping function take two arguments:\n\t *                 the first is the value at the current position\n\t *                 which goes from -1 to 1 over the number of elements\n\t *                 in the curve array. The second argument is the array position.\n\t * @example\n\t * //map the input signal from [-1, 1] to [0, 10]\n\t * shaper.setMap(function(val, index){\n\t * \treturn (val + 1) * 5;\n\t * })\n\t */\n\tsetMap(mapping: WaveShaperMappingFn, length: number = 1024): this {\n\t\tconst array = new Float32Array(length);\n\t\tfor (let i = 0, len = length; i < len; i++) {\n\t\t\tconst normalized = (i / (len - 1)) * 2 - 1;\n\t\t\tarray[i] = mapping(normalized, i);\n\t\t}\n\t\tthis.curve = array;\n\t\treturn this;\n\t}\n\n\t/**\n\t * The array to set as the waveshaper curve. For linear curves\n\t * array length does not make much difference, but for complex curves\n\t * longer arrays will provide smoother interpolation.\n\t */\n\tget curve(): Float32Array | null {\n\t\treturn this._shaper.curve;\n\t}\n\n\tset curve(mapping: Float32Array | null) {\n\t\tthis._shaper.curve = mapping;\n\t}\n\n\t/**\n\t * Specifies what type of oversampling (if any) should be used when\n\t * applying the shaping curve. Can either be \"none\", \"2x\" or \"4x\".\n\t */\n\tget oversample(): OverSampleType {\n\t\treturn this._shaper.oversample;\n\t}\n\n\tset oversample(oversampling: OverSampleType) {\n\t\tconst isOverSampleType = [\"none\", \"2x\", \"4x\"].some(str => str.includes(oversampling));\n\t\tthis.assert(isOverSampleType, \"oversampling must be either 'none', '2x', or '4x'\");\n\t\tthis._shaper.oversample = oversampling;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._shaper.disconnect();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { SignalOperator } from \"./SignalOperator\";\nimport { WaveShaper } from \"./WaveShaper\";\n\n/**\n * AudioToGain converts an input in AudioRange [-1,1] to NormalRange [0,1].\n * See {@link GainToAudio}.\n *\n * @example\n * var a2g = new AudioToGain();\n */\nexport class AudioToGain extends SignalOperator<ToneAudioNodeOptions> {\n\n\tname = \"AudioToGain\";\n\n\t/**\n\t * The node which converts the audio ranges\n\t */\n\tprivate _norm = new WaveShaper({\n\t\tcontext: this.context,\n\t\tmapping: x => (x + 1) / 2,\n\t});\n\n\t/**\n\t * The AudioRange input [-1, 1]\n\t */\n\tinput = this._norm;\n\n\t/**\n\t * The GainRange output [0, 1]\n\t */\n\toutput = this._norm;\n\n\t/**\n\t *  clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._norm.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../core/context/Gain\";\nimport { Param } from \"../core/context/Param\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Signal, SignalOptions } from \"./Signal\";\n\n/**\n * Multiply two incoming signals. Or, if a number is given in the constructor,\n * multiplies the incoming signal by that value.\n *\n * @param {number=} value Constant value to multiple\n * @example\n * const mult = new Multiply();\n * const sigA = new Tone.Signal(3);\n * const sigB = new Tone.Signal(4);\n * sigA.connect(mult);\n * sigB.connect(mult.factor);\n * //output of mult is 12.\n *  @example\n * const mult = new Multiply(10);\n * const sig = new Tone.Signal(2).connect(mult);\n * //the output of mult is 20.\n */\nexport class Multiply extends Signal<number> {\n\n\tname = \"Multiply\";\n\n\t/**\n\t * Indicates if the value should be overridden on connection\n\t */\n\treadonly override = false;\n\n\t/**\n\t * the input gain node\n\t */\n\tprivate _mult: Gain = new Gain({ context : this.context });\n\n\t/**\n\t * The multiplcant input.\n\t */\n\tinput = this._mult;\n\n\t/**\n\t * The product of the input and {@link factor}\n\t */\n\toutput = this._mult;\n\n\t/**\n\t * The multiplication factor. Can be set directly or a signal can be connected to it.\n\t */\n\tfactor: Param<number>;\n\n\tconstructor(options?: Partial<SignalOptions<number>>);\n\t// tslint:disable-next-line: unified-signatures\n\tconstructor(value?: number);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Multiply.getDefaults(), arguments, [\"value\"])));\n\t\tconst options = optionsFromArguments(Multiply.getDefaults(), arguments, [\"value\"]);\n\n\t\tthis.factor = this._param = this._mult.gain as unknown as Param<number>;\n\t\tthis.factor.setValueAtTime(options.value, 0);\n\t}\n\n\tstatic getDefaults(): SignalOptions<number> {\n\t\treturn Object.assign(Signal.getDefaults(), {\n\t\t\tvalue: 0,\n\t\t});\n\t}\n\n\t/**\n\t *  clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._mult.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { Cents, Degrees, Frequency, Positive, Seconds, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { AudioToGain } from \"../../signal/AudioToGain\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { AMConstructorOptions, AMOscillatorOptions,\n\tNonCustomOscillatorType, ToneOscillatorInterface,\n\tToneOscillatorType } from \"./OscillatorInterface\";\n\n/**\n * An amplitude modulated oscillator node. It is implemented with\n * two oscillators, one which modulators the other's amplitude\n * through a gain node.\n * ```\n *    +-------------+       +----------+\n *    | Carrier Osc +>------> GainNode |\n *    +-------------+       |          +--->Output\n *                      +---> gain     |\n * +---------------+    |   +----------+\n * | Modulator Osc +>---+\n * +---------------+\n * ```\n *\n * @param frequency The starting frequency of the oscillator.\n * @param type The type of the carrier oscillator.\n * @param modulationType The type of the modulator oscillator.\n * @example\n * //a sine oscillator frequency-modulated by a square wave\n * var fmOsc = new AMOscillator(\"Ab3\", \"sine\", \"square\").toDestination().start();\n */\nexport class AMOscillator extends Source<AMOscillatorOptions> implements ToneOscillatorInterface {\n\n\tname = \"AMOscillator\";\n\n\t/**\n\t *  The carrier oscillator\n\t */\n\tprivate _carrier: Oscillator;\n\n\t/**\n\t *  The oscillator's frequency\n\t */\n\treadonly frequency: Signal<Frequency>;\n\n\t/**\n\t *  The detune control signal.\n\t */\n\treadonly detune: Signal<Cents>;\n\n\t/**\n\t *  The modulating oscillator\n\t */\n\tprivate _modulator: Oscillator;\n\n\t/**\n\t *  convert the -1,1 output to 0,1\n\t */\n\tprivate _modulationScale = new AudioToGain({ context: this.context });\n\n\t/**\n\t *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators.\n\t *  A harmonicity of 1 gives both oscillators the same frequency.\n\t *  Harmonicity = 2 means a change of an octave.\n\t *  @example\n\t * //pitch the modulator an octave below carrier\n\t * synth.harmonicity.value = 0.5;\n\t */\n\treadonly harmonicity: Signal<Positive>;\n\n\t/**\n\t *  the node where the modulation happens\n\t */\n\tprivate _modulationNode = new Gain({\n\t\tcontext: this.context,\n\t});\n\n\tconstructor(options?: Partial<AMConstructorOptions>);\n\tconstructor(frequency?: Frequency, type?: ToneOscillatorType, modulationType?: ToneOscillatorType);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(AMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]));\n\t\tconst options = optionsFromArguments(AMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]);\n\n\t\tthis._carrier  = new Oscillator({\n\t\t\tcontext : this.context,\n\t\t\tdetune: options.detune,\n\t\t\tfrequency: options.frequency,\n\t\t\tonstop: () => this.onstop(this),\n\t\t\tphase: options.phase,\n\t\t\ttype: options.type,\n\t\t} as OscillatorOptions);\n\t\tthis.frequency = this._carrier.frequency,\n\t\tthis.detune = this._carrier.detune;\n\n\t\tthis._modulator = new Oscillator({\n\t\t\tcontext : this.context,\n\t\t\tphase: options.phase,\n\t\t\ttype: options.modulationType,\n\t\t} as OscillatorOptions);\n\n\t\tthis.harmonicity = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.harmonicity,\n\t\t});\n\n\t\t// connections\n\t\tthis.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t\tthis._modulator.chain(this._modulationScale, this._modulationNode.gain);\n\t\tthis._carrier.chain(this._modulationNode, this.output);\n\n\t\treadOnly(this, [\"frequency\", \"detune\", \"harmonicity\"]);\n\t}\n\n\tstatic getDefaults(): AMOscillatorOptions {\n\t\treturn Object.assign(Oscillator.getDefaults(), {\n\t\t\tharmonicity: 1,\n\t\t\tmodulationType: \"square\" as NonCustomOscillatorType,\n\t\t});\n\t}\n\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _start(time: Seconds): void {\n\t\tthis._modulator.start(time);\n\t\tthis._carrier.start(time);\n\t}\n\n\t/**\n\t *  stop the oscillator\n\t */\n\tprotected _stop(time: Seconds): void {\n\t\tthis._modulator.stop(time);\n\t\tthis._carrier.stop(time);\n\t}\n\n\t/**\n\t *  restart the oscillator\n\t */\n\trestart(time?: Time): this {\n\t\tthis._modulator.restart(time);\n\t\tthis._carrier.restart(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The type of the carrier oscillator\n\t */\n\tget type(): ToneOscillatorType {\n\t\treturn this._carrier.type;\n\t}\n\tset type(type: ToneOscillatorType) {\n\t\tthis._carrier.type = type;\n\t}\n\n\t/**\n\t * The oscillator type without the partialsCount appended to the end\n\t * @example\n\t * osc.type = 'sine2'\n\t * osc.baseType //'sine'\n\t * osc.partialCount = 2\n\t */\n\tget baseType(): OscillatorType {\n\t\treturn this._carrier.baseType;\n\t}\n\tset baseType(baseType: OscillatorType) {\n\t\tthis._carrier.baseType = baseType;\n\t}\n\n\t/**\n\t * 'partialCount' offers an alternative way to set the number of used partials.\n\t * When partialCount is 0, the maximum number of partials are used when representing\n\t * the waveform using the periodicWave. When 'partials' is set, this value is\n\t * not settable, but equals the length of the partials array.\n\t */\n\tget partialCount(): number {\n\t\treturn this._carrier.partialCount;\n\t}\n\n\tset partialCount(partialCount: number) {\n\t\tthis._carrier.partialCount = partialCount;\n\t}\n\n\t/**\n\t * The type of the modulator oscillator\n\t */\n\tget modulationType(): ToneOscillatorType {\n\t\treturn this._modulator.type;\n\t}\n\n\tset modulationType(type: ToneOscillatorType) {\n\t\tthis._modulator.type = type;\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._carrier.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._carrier.phase = phase;\n\t\tthis._modulator.phase = phase;\n\t}\n\n\t/**\n\t * The partials of the carrier waveform. A partial represents\n\t * the amplitude at a harmonic. The first harmonic is the\n\t * fundamental frequency, the second is the octave and so on\n\t * following the harmonic series.\n\t * Setting this value will automatically set the type to \"custom\".\n\t * The value is an empty array when the type is not \"custom\".\n\t * @example\n\t * osc.partials = [1, 0.2, 0.01];\n\t */\n\tget partials(): number[] {\n\t\treturn this._carrier.partials;\n\t}\n\tset partials(partials: number[]) {\n\t\tthis._carrier.partials = partials;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\tthis.harmonicity.dispose();\n\t\tthis._carrier.dispose();\n\t\tthis._modulator.dispose();\n\t\tthis._modulationNode.dispose();\n\t\tthis._modulationScale.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { AudioRange, Cents, Degrees, Frequency, Positive, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { FMConstructorOptions, FMOscillatorOptions,\n\tNonCustomOscillatorType, ToneOscillatorInterface, ToneOscillatorType } from \"./OscillatorInterface\";\n\n/**\n * FMOscillator implements a frequency modulation synthesis\n * ```\n *                                              +-------------+\n * +---------------+        +-------------+     | Carrier Osc |\n * | Modulator Osc +>-------> GainNode    |     |             +--->Output\n * +---------------+        |             +>----> frequency   |\n *                       +--> gain        |     +-------------+\n *                       |  +-------------+\n * +-----------------+   |\n * | modulationIndex +>--+\n * +-----------------+\n * ```\n *\n * @param frequency The starting frequency of the oscillator.\n * @param type The type of the carrier oscillator.\n * @param modulationType The type of the modulator oscillator.\n * @example\n * //a sine oscillator frequency-modulated by a square wave\n * var fmOsc = new FMOscillator(\"Ab3\", \"sine\", \"square\").toDestination().start();\n */\nexport class FMOscillator extends Source<FMOscillatorOptions> implements ToneOscillatorInterface {\n\n\tname = \"FMOscillator\";\n\n\t/**\n\t *  The carrier oscillator\n\t */\n\tprivate _carrier: Oscillator;\n\n\t/**\n\t *  The oscillator's frequency\n\t */\n\treadonly frequency: Signal<Frequency>;\n\n\t/**\n\t *  The detune control signal.\n\t */\n\treadonly detune: Signal<Cents>;\n\n\t/**\n\t *  The modulating oscillator\n\t */\n\tprivate _modulator: Oscillator;\n\n\t/**\n\t *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators.\n\t *  A harmonicity of 1 gives both oscillators the same frequency.\n\t *  Harmonicity = 2 means a change of an octave.\n\t *  @example\n\t * //pitch the modulator an octave below carrier\n\t * synth.harmonicity.value = 0.5;\n\t */\n\treadonly harmonicity: Signal<Positive>;\n\n\t/**\n\t *  The modulation index which is in essence the depth or amount of the modulation. In other terms it is the\n\t *  ratio of the frequency of the modulating signal (mf) to the amplitude of the\n\t *  modulating signal (ma) -- as in ma/mf.\n\t */\n\treadonly modulationIndex: Signal<Positive>;\n\n\t/**\n\t *  the node where the modulation happens\n\t */\n\tprivate _modulationNode: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\n\tconstructor(options?: Partial<FMConstructorOptions>);\n\tconstructor(frequency?: Frequency, type?: ToneOscillatorType, modulationType?: ToneOscillatorType);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(FMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]));\n\t\tconst options = optionsFromArguments(FMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]);\n\n\t\tthis._carrier = new Oscillator({\n\t\t\tcontext : this.context,\n\t\t\tdetune: options.detune,\n\t\t\tfrequency: 0,\n\t\t\tonstop: () => this.onstop(this),\n\t\t\tphase: options.phase,\n\t\t\ttype: options.type,\n\t\t} as OscillatorOptions);\n\n\t\tthis.detune = this._carrier.detune;\n\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t});\n\n\t\tthis._modulator = new Oscillator({\n\t\t\tcontext : this.context,\n\t\t\tphase: options.phase,\n\t\t\ttype: options.modulationType,\n\t\t} as OscillatorOptions);\n\n\t\tthis.harmonicity = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.harmonicity,\n\t\t});\n\n\t\tthis.modulationIndex = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.modulationIndex,\n\t\t});\n\n\t\t// connections\n\t\tthis.frequency.connect(this._carrier.frequency);\n\t\tthis.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t\tthis.frequency.chain(this.modulationIndex, this._modulationNode);\n\t\tthis._modulator.connect(this._modulationNode.gain);\n\t\tthis._modulationNode.connect(this._carrier.frequency);\n\t\tthis._carrier.connect(this.output);\n\t\tthis.detune.connect(this._modulator.detune);\n\n\t\treadOnly(this, [\"modulationIndex\", \"frequency\", \"detune\", \"harmonicity\"]);\n\t}\n\n\tstatic getDefaults(): FMOscillatorOptions {\n\t\treturn Object.assign(Oscillator.getDefaults(), {\n\t\t\tharmonicity: 1,\n\t\t\tmodulationIndex: 2,\n\t\t\tmodulationType: \"square\" as NonCustomOscillatorType,\n\t\t});\n\t}\n\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\tthis._modulator.start(time);\n\t\tthis._carrier.start(time);\n\t}\n\n\t/**\n\t *  stop the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\tthis._modulator.stop(time);\n\t\tthis._carrier.stop(time);\n\t}\n\n\t/**\n\t *  stop and restart the oscillator\n\t */\n\trestart(time?: Time): this {\n\t\tthis._modulator.restart(time);\n\t\tthis._carrier.restart(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The type of the carrier oscillator\n\t */\n\tget type(): ToneOscillatorType {\n\t\treturn this._carrier.type;\n\t}\n\tset type(type: ToneOscillatorType) {\n\t\tthis._carrier.type = type;\n\t}\n\n\t/**\n\t * The oscillator type without the partialsCount appended to the end\n\t * @example\n\t * osc.type = 'sine2'\n\t * osc.baseType //'sine'\n\t * osc.partialCount = 2\n\t */\n\tget baseType(): OscillatorType {\n\t\treturn this._carrier.baseType;\n\t}\n\tset baseType(baseType: OscillatorType) {\n\t\tthis._carrier.baseType = baseType;\n\t}\n\n\t/**\n\t * 'partialCount' offers an alternative way to set the number of used partials.\n\t * When partialCount is 0, the maximum number of partials are used when representing\n\t * the waveform using the periodicWave. When 'partials' is set, this value is\n\t * not settable, but equals the length of the partials array.\n\t */\n\tget partialCount(): number {\n\t\treturn this._carrier.partialCount;\n\t}\n\tset partialCount(partialCount: number) {\n\t\tthis._carrier.partialCount = partialCount;\n\t}\n\n\t/**\n\t * The type of the modulator oscillator\n\t */\n\tget modulationType(): ToneOscillatorType {\n\t\treturn this._modulator.type;\n\t}\n\tset modulationType(type: ToneOscillatorType) {\n\t\tthis._modulator.type = type;\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._carrier.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._carrier.phase = phase;\n\t\tthis._modulator.phase = phase;\n\t}\n\n\t/**\n\t * The partials of the carrier waveform. A partial represents\n\t * the amplitude at a harmonic. The first harmonic is the\n\t * fundamental frequency, the second is the octave and so on\n\t * following the harmonic series.\n\t * Setting this value will automatically set the type to \"custom\".\n\t * The value is an empty array when the type is not \"custom\".\n\t * @example\n\t * osc.partials = [1, 0.2, 0.01];\n\t */\n\tget partials(): number[] {\n\t\treturn this._carrier.partials;\n\t}\n\tset partials(partials: number[]) {\n\t\tthis._carrier.partials = partials;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.harmonicity.dispose();\n\t\tthis._carrier.dispose();\n\t\tthis._modulator.dispose();\n\t\tthis._modulationNode.dispose();\n\t\tthis.modulationIndex.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { AudioRange, Cents, Degrees, Frequency, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { WaveShaper } from \"../../signal/WaveShaper\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { PulseOscillatorOptions, ToneOscillatorInterface } from \"./OscillatorInterface\";\n\n/**\n * PulseOscillator is an oscillator with control over pulse width,\n * also known as the duty cycle. At 50% duty cycle (width = 0) the wave is\n * a square wave.\n * [Read more](https://wigglewave.wordpress.com/2014/08/16/pulse-waveforms-and-harmonics/).\n * ```\n *    width = -0.25        width = 0.0          width = 0.25\n *\n *   +-----+            +-------+       +    +-------+     +-+\n *   |     |            |       |       |            |     |\n *   |     |            |       |       |            |     |\n * +-+     +-------+    +       +-------+            +-----+\n *\n *\n *    width = -0.5                              width = 0.5\n *\n *     +---+                                 +-------+   +---+\n *     |   |                                         |   |\n *     |   |                                         |   |\n * +---+   +-------+                                 +---+\n *\n *\n *    width = -0.75                             width = 0.75\n *\n *       +-+                                 +-------+ +-----+\n *       | |                                         | |\n *       | |                                         | |\n * +-----+ +-------+                                 +-+\n * ```\n * @param frequency The frequency of the oscillator\n * @param width The width of the pulse\n * @example\n * var pulse = new PulseOscillator(\"E5\", 0.4).toDestination().start();\n */\nexport class PulseOscillator extends Source<PulseOscillatorOptions> implements ToneOscillatorInterface {\n\n\tname = \"PulseOscillator\";\n\n\t/**\n\t *  The width of the pulse.\n\t */\n\twidth: Signal<AudioRange>;\n\n\t/**\n\t *  gate the width amount\n\t */\n\tprivate _widthGate: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\n\t/**\n\t *  the sawtooth oscillator\n\t */\n\tprivate _sawtooth: Oscillator;\n\n\t/**\n\t *  The frequency control.\n\t */\n\tfrequency: Signal<Frequency>;\n\n\t/**\n\t *  The detune in cents.\n\t */\n\tdetune: Signal<Cents>;\n\n\t/**\n\t *  Threshold the signal to turn it into a square\n\t */\n\tprivate _thresh = new WaveShaper({\n\t\tcontext: this.context,\n\t\tmapping: val => val <= 0 ? -1 : 1,\n\t});\n\n\tconstructor(options?: Partial<PulseOscillatorOptions>);\n\tconstructor(frequency?: Frequency, width?: AudioRange);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(PulseOscillator.getDefaults(), arguments, [\"frequency\", \"width\"]));\n\t\tconst options = optionsFromArguments(PulseOscillator.getDefaults(), arguments, [\"frequency\", \"width\"]);\n\n\t\tthis.width = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"audioRange\",\n\t\t\tvalue: options.width,\n\t\t});\n\n\t\tthis._sawtooth = new Oscillator({\n\t\t\tcontext: this.context,\n\t\t\tdetune: options.detune,\n\t\t\tfrequency: options.frequency,\n\t\t\tonstop: () => this.onstop(this),\n\t\t\tphase: options.phase,\n\t\t\ttype : \"sawtooth\",\n\t\t});\n\t\tthis.frequency = this._sawtooth.frequency;\n\t\tthis.detune = this._sawtooth.detune;\n\n\t\t// connections\n\t\tthis._sawtooth.chain(this._thresh, this.output);\n\t\tthis.width.chain(this._widthGate, this._thresh);\n\t\treadOnly(this, [\"width\", \"frequency\", \"detune\"]);\n\t}\n\n\tstatic getDefaults(): PulseOscillatorOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tfrequency: 440,\n\t\t\tphase: 0,\n\t\t\ttype: \"pulse\" as \"pulse\",\n\t\t\twidth: 0.2,\n\t\t});\n\t}\n\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._sawtooth.start(time);\n\t\tthis._widthGate.gain.setValueAtTime(1, time);\n\t}\n\n\t/**\n\t *  stop the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._sawtooth.stop(time);\n\t\t// the width is still connected to the output.\n\t\t// that needs to be stopped also\n\t\tthis._widthGate.gain.cancelScheduledValues(time);\n\t\tthis._widthGate.gain.setValueAtTime(0, time);\n\t}\n\n\t/**\n\t *  Restart the oscillator\n\t */\n\trestart(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._sawtooth.restart(computedTime);\n\t\tthis._widthGate.gain.cancelScheduledValues(computedTime);\n\t\tthis._widthGate.gain.setValueAtTime(1, computedTime);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._sawtooth.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._sawtooth.phase = phase;\n\t}\n\n\t/**\n\t * The type of the oscillator. Always returns \"pulse\".\n\t */\n\tget type(): \"pulse\" {\n\t\treturn \"pulse\";\n\t}\n\n\t/**\n\t * The baseType of the oscillator. Always returns \"pulse\".\n\t */\n\tget baseType(): \"pulse\" {\n\t\treturn \"pulse\";\n\t}\n\n\t/**\n\t * The partials of the waveform. Cannot set partials for this waveform type\n\t */\n\tget partials(): number[] {\n\t\treturn [];\n\t}\n\n\t/**\n\t * No partials for this waveform type.\n\t */\n\tget partialCount(): number {\n\t\treturn 0;\n\t}\n\n\t/**\n\t *  Clean up method.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._sawtooth.dispose();\n\t\tthis.width.dispose();\n\t\tthis._widthGate.dispose();\n\t\tthis._thresh.dispose();\n\t\treturn this;\n\t}\n}\n","import { AudioRange, Cents, Degrees, Frequency, Positive, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp, readOnly } from \"../../core/util/Interface\";\nimport { AudioToGain } from \"../../signal/AudioToGain\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { FatConstructorOptions, FatOscillatorOptions,\n\tToneOscillatorInterface, ToneOscillatorType } from \"./OscillatorInterface\";\n\n/**\n *  FatOscillator is an array of oscillators with detune spread between the oscillators\n *  @param frequency The oscillator's frequency.\n *  @param type The type of the oscillator.\n *  @param spread The detune spread between the oscillators.\n *  @example\n * var fatOsc = new FatOscillator(\"Ab3\", \"sine\", 40).toDestination().start();\n */\nexport class FatOscillator extends Source<FatOscillatorOptions> implements ToneOscillatorInterface {\n\n\tname = \"FatOscillator\";\n\n\t/**\n\t *  The oscillator's frequency\n\t */\n\treadonly frequency: Signal<Frequency>;\n\n\t/**\n\t *  The detune control signal.\n\t */\n\treadonly detune: Signal<Cents>;\n\n\t/**\n\t *  The array of oscillators\n\t */\n\tprivate _oscillators: Oscillator[] = [];\n\n\t/**\n\t *  The total spread of the oscillators\n\t */\n\tprivate _spread: Cents;\n\n\t/**\n\t *  The type of the oscillator\n\t */\n\tprivate _type: ToneOscillatorType;\n\n\t/**\n\t *  The phase of the oscillators\n\t */\n\tprivate _phase: Degrees;\n\n\t/**\n\t *  The partials array\n\t */\n\tprivate _partials: number[];\n\n\t/**\n\t *  The number of partials to use\n\t */\n\tprivate _partialCount: number;\n\n\tconstructor(options?: Partial<FatConstructorOptions>);\n\tconstructor(frequency?: Frequency, type?: ToneOscillatorType, modulationType?: ToneOscillatorType);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(FatOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"spread\"]));\n\t\tconst options = optionsFromArguments(FatOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"spread\"]);\n\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t});\n\t\tthis.detune = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune,\n\t\t});\n\n\t\tthis._spread = options.spread;\n\t\tthis._type = options.type;\n\t\tthis._phase = options.phase;\n\t\tthis._partials = options.partials;\n\t\tthis._partialCount = options.partialCount;\n\n\t\t// set the count initially\n\t\tthis.count = options.count;\n\n\t\treadOnly(this, [\"frequency\", \"detune\"]);\n\t}\n\n\tstatic getDefaults(): FatOscillatorOptions {\n\t\treturn Object.assign(Oscillator.getDefaults(), {\n\t\t\tcount : 3,\n\t\t\tspread : 20,\n\t\t\ttype : \"sawtooth\",\n\t\t});\n\t}\n\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._forEach(osc => osc.start(time));\n\t}\n\n\t/**\n\t *  stop the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._forEach(osc => osc.stop(time));\n\t}\n\n\t/**\n\t *  restart the oscillator\n\t */\n\trestart(time): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis._forEach(osc => osc.restart(time));\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over all of the oscillators\n\t */\n\tprivate _forEach(iterator: (osc: Oscillator, index: number) => void): void {\n\t\tfor (let i = 0; i < this._oscillators.length; i++) {\n\t\t\titerator(this._oscillators[i], i);\n\t\t}\n\t}\n\n\t/**\n\t * The type of the oscillator\n\t */\n\tget type(): ToneOscillatorType {\n\t\treturn this._type;\n\t}\n\n\tset type(type: ToneOscillatorType) {\n\t\tthis._type = type;\n\t\tthis._forEach(osc => osc.type = type);\n\t}\n\n\t/**\n\t * The detune spread between the oscillators. If \"count\" is\n\t * set to 3 oscillators and the \"spread\" is set to 40,\n\t * the three oscillators would be detuned like this: [-20, 0, 20]\n\t * for a total detune spread of 40 cents.\n\t */\n\tget spread(): Cents {\n\t\treturn this._spread;\n\t}\n\n\tset spread(spread: Cents) {\n\t\tthis._spread = spread;\n\t\tif (this._oscillators.length > 1) {\n\t\t\tconst start = -spread / 2;\n\t\t\tconst step = spread / (this._oscillators.length - 1);\n\t\t\tthis._forEach((osc, i) => osc.detune.value = start + step * i);\n\t\t}\n\t}\n\n\t/**\n\t * The number of detuned oscillators. Should be an integer greater than 1.\n\t */\n\tget count(): number {\n\t\treturn this._oscillators.length;\n\t}\n\tset count(count: number) {\n\t\tcount = Math.max(count, 1);\n\t\tif (this._oscillators.length !== count) {\n\t\t\t// dispose the previous oscillators\n\t\t\tthis._forEach(osc => osc.dispose());\n\t\t\tthis._oscillators = [];\n\t\t\tfor (let i = 0; i < count; i++) {\n\t\t\t\tconst osc = new Oscillator({\n\t\t\t\t\tcontext : this.context,\n\t\t\t\t\tonstop: i === 0 ? () => this.onstop(this) : noOp,\n\t\t\t\t});\n\t\t\t\tif (this.type === \"custom\") {\n\t\t\t\t\tosc.partials = this._partials;\n\t\t\t\t} else {\n\t\t\t\t\tosc.type = this._type;\n\t\t\t\t}\n\t\t\t\tosc.partialCount = this._partialCount;\n\t\t\t\tosc.phase = this._phase + (i / count) * 360;\n\t\t\t\tosc.volume.value = -6 - count * 1.1;\n\t\t\t\tthis.frequency.connect(osc.frequency);\n\t\t\t\tthis.detune.connect(osc.detune);\n\t\t\t\tosc.connect(this.output);\n\t\t\t\tthis._oscillators[i] = osc;\n\t\t\t}\n\t\t\t// set the spread\n\t\t\tthis.spread = this._spread;\n\t\t\tif (this.state === \"started\") {\n\t\t\t\tthis._forEach(osc => osc.start());\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._phase = phase;\n\t\tthis._forEach(osc => osc.phase = phase);\n\t}\n\n\t/**\n\t * The oscillator type without the partialsCount appended to the end\n\t * @example\n\t * osc.type = 'sine2'\n\t * osc.baseType //'sine'\n\t * osc.partialCount = 2\n\t */\n\tget baseType(): OscillatorType {\n\t\treturn this._oscillators[0].baseType;\n\t}\n\tset baseType(baseType: OscillatorType) {\n\t\tthis._forEach(osc => osc.baseType = baseType);\n\t\tthis._type = this._oscillators[0].type;\n\t}\n\n\t/**\n\t * The partials of the carrier waveform. A partial represents\n\t * the amplitude at a harmonic. The first harmonic is the\n\t * fundamental frequency, the second is the octave and so on\n\t * following the harmonic series.\n\t * Setting this value will automatically set the type to \"custom\".\n\t * The value is an empty array when the type is not \"custom\".\n\t * @memberOf FatOscillator#\n\t * @type {Array}\n\t * @name partials\n\t * @example\n\t * osc.partials = [1, 0.2, 0.01];\n\t */\n\tget partials(): number[] {\n\t\treturn this._oscillators[0].partials;\n\t}\n\tset partials(partials: number[]) {\n\t\tthis._partials = partials;\n\t\tif (partials.length) {\n\t\t\tthis._type = \"custom\";\n\t\t\tthis._forEach(osc => osc.partials = partials);\n\t\t}\n\t}\n\n\t/**\n\t * 'partialCount' offers an alternative way to set the number of used partials.\n\t * When partialCount is 0, the maximum number of partials are used when representing\n\t * the waveform using the periodicWave. When 'partials' is set, this value is\n\t * not settable, but equals the length of the partials array.\n\t * @memberOf FatOscillator#\n\t * @type {Number}\n\t * @name partialCount\n\t */\n\tget partialCount(): number {\n\t\treturn this._oscillators[0].partialCount;\n\t}\n\tset partialCount(partialCount: number) {\n\t\tthis._partialCount = partialCount;\n\t\tthis._forEach(osc => osc.partialCount = partialCount);\n\t\tthis._type = this._oscillators[0].type;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\tthis._forEach(osc => osc.dispose());\n\t\treturn this;\n\t}\n}\n","import { Cents, Degrees, Frequency, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { PWMOscillatorOptions, ToneOscillatorInterface } from \"./OscillatorInterface\";\nimport { PulseOscillator } from \"./PulseOscillator\";\n\n/**\n * PWMOscillator modulates the width of a Tone.PulseOscillator\n * at the modulationFrequency. This has the effect of continuously\n * changing the timbre of the oscillator by altering the harmonics\n * generated.\n *\n * @param {Frequency} frequency The starting frequency of the oscillator.\n * @param {Frequency} modulationFrequency The modulation frequency of the width of the pulse.\n * @example\n *  var pwm = new PWMOscillator(\"Ab3\", 0.3).toDestination().start();\n */\nexport class PWMOscillator extends Source<PWMOscillatorOptions> implements ToneOscillatorInterface {\n\n\treadonly name = \"PWMOscillator\";\n\n\treadonly sourceType = \"pwm\";\n\n\t/**\n\t *  the pulse oscillator\n\t */\n\tprivate _pulse: PulseOscillator;\n\t/**\n\t *  the modulator\n\t */\n\tprivate _modulator: Oscillator;\n\n\t/**\n\t *  Scale the oscillator so it doesn't go silent\n\t *  at the extreme values.\n\t */\n\tprivate _scale: Multiply = new Multiply({\n\t\tcontext: this.context,\n\t\tvalue: 2,\n\t});\n\n\t/**\n\t *  The frequency control.\n\t */\n\treadonly frequency: Signal<Frequency>;\n\n\t/**\n\t *  The detune of the oscillator.\n\t */\n\treadonly detune: Signal<Cents>;\n\n\t/**\n\t *  The modulation rate of the oscillator.\n\t */\n\treadonly modulationFrequency: Signal<Frequency>;\n\n\tconstructor(options?: Partial<PWMOscillatorOptions>);\n\tconstructor(frequency?: Frequency, modulationFrequency?: Frequency);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(PWMOscillator.getDefaults(), arguments, [\"frequency\", \"modulationFrequency\"]));\n\t\tconst options = optionsFromArguments(PWMOscillator.getDefaults(), arguments, [\"frequency\", \"modulationFrequency\"]);\n\n\t\tthis._pulse = new PulseOscillator({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.modulationFrequency,\n\t\t});\n\t\t// change the pulse oscillator type\n\t\t// @ts-ignore\n\t\tthis._pulse._sawtooth.type = \"sine\";\n\n\t\tthis.modulationFrequency  = this._pulse.frequency;\n\n\t\tthis._modulator = new Oscillator({\n\t\t\tcontext: this.context,\n\t\t\tdetune: options.detune,\n\t\t\tfrequency: options.frequency,\n\t\t\tonstop: () => this.onstop(this),\n\t\t\tphase: options.phase,\n\t\t});\n\n\t\tthis.frequency = this._modulator.frequency;\n\t\tthis.detune = this._modulator.detune;\n\n\t\t// connections\n\t\tthis._modulator.chain(this._scale, this._pulse.width);\n\t\tthis._pulse.connect(this.output);\n\t\treadOnly(this, [\"modulationFrequency\", \"frequency\", \"detune\"]);\n\t}\n\n\tstatic getDefaults(): PWMOscillatorOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tfrequency: 440,\n\t\t\tmodulationFrequency: 0.4,\n\t\t\tphase: 0,\n\t\t\ttype: \"pwm\" as \"pwm\",\n\t\t});\n\t}\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._modulator.start(time);\n\t\tthis._pulse.start(time);\n\t}\n\n\t/**\n\t *  stop the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._modulator.stop(time);\n\t\tthis._pulse.stop(time);\n\t}\n\n\t/**\n\t *  restart the oscillator\n\t */\n\trestart(time?: Time): this {\n\t\tthis._modulator.restart(time);\n\t\tthis._pulse.restart(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The type of the oscillator. Always returns \"pwm\".\n\t */\n\tget type(): \"pwm\" {\n\t\treturn \"pwm\";\n\t}\n\n\t/**\n\t * The baseType of the oscillator. Always returns \"pwm\".\n\t */\n\tget baseType(): \"pwm\" {\n\t\treturn \"pwm\";\n\t}\n\n\t/**\n\t * The partials of the waveform. Cannot set partials for this waveform type\n\t */\n\tget partials(): number[] {\n\t\treturn [];\n\t}\n\n\t/**\n\t * No partials for this waveform type.\n\t */\n\tget partialCount(): number {\n\t\treturn 0;\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._modulator.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._modulator.phase = phase;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._pulse.dispose();\n\t\tthis._scale.dispose();\n\t\tthis._modulator.dispose();\n\t\treturn this;\n\t}\n}\n","import { AudioRange, Cents, Degrees, Frequency, Positive, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments  } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { isNumber, isString } from \"../../core/util/TypeCheck\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { AMOscillator } from \"./AMOscillator\";\nimport { FatOscillator } from \"./FatOscillator\";\nimport { FMOscillator } from \"./FMOscillator\";\nimport { Oscillator } from \"./Oscillator\";\nimport { OmniOscillatorConstructorOptions,\n\tOmniOscillatorOptions, OmniOscillatorType,\n\tToneOscillatorInterface, ToneOscillatorType } from \"./OscillatorInterface\";\nimport { PulseOscillator } from \"./PulseOscillator\";\nimport { PWMOscillator } from \"./PWMOscillator\";\n\n/**\n * All of the oscillator types that OmniOscillator can take on\n */\ntype AnyOscillator = Oscillator | PWMOscillator | PulseOscillator | FatOscillator | AMOscillator | FMOscillator;\n\n/**\n * The constructor of each of the OmniOscillator types\n */\ntype TypeofAnyOscillator = typeof Oscillator | typeof PWMOscillator |\n\ttypeof PulseOscillator | typeof FatOscillator |\n\ttypeof AMOscillator | typeof FMOscillator;\n\n/**\n * All of the Oscillator constructor types mapped to their name.\n */\ninterface OmniOscillatorSource {\n\t\"fm\": FMOscillator;\n\t\"am\": AMOscillator;\n\t\"pwm\": PWMOscillator;\n\t\"pulse\": PulseOscillator;\n\t\"oscillator\": Oscillator;\n\t\"fat\": FatOscillator;\n}\n\n/**\n * The available oscillator types.\n */\nexport type OmniOscSourceType = keyof OmniOscillatorSource;\n\n// Conditional Types\ntype IsAmOrFmOscillator<Osc, Ret> = Osc extends AMOscillator ? Ret : Osc extends FMOscillator ? Ret : undefined;\ntype IsFatOscillator<Osc, Ret> = Osc extends FatOscillator ? Ret : undefined;\ntype IsPWMOscillator<Osc, Ret> = Osc extends PWMOscillator ? Ret : undefined;\ntype IsPulseOscillator<Osc, Ret> = Osc extends PulseOscillator ? Ret : undefined;\ntype IsFMOscillator<Osc, Ret> = Osc extends FMOscillator ? Ret : undefined;\n\ntype AnyOscillatorConstructor = new (...args: any[]) => AnyOscillator;\n\n// tslint:disable-next-line: variable-name\nconst OmniOscillatorSourceMap: {\n\t[key in OmniOscSourceType] : AnyOscillatorConstructor\n} = {\n\tam: AMOscillator,\n\tfat: FatOscillator,\n\tfm: FMOscillator,\n\toscillator: Oscillator,\n\tpulse: PulseOscillator,\n\tpwm: PWMOscillator,\n};\n\n/**\n * OmniOscillator aggregates Tone.Oscillator, Tone.PulseOscillator,\n * Tone.PWMOscillator, Tone.FMOscillator, Tone.AMOscillator, and Tone.FatOscillator\n * into one class. The oscillator class can be changed by setting the `type`.\n * `omniOsc.type = \"pwm\"` will set it to the Tone.PWMOscillator. Prefixing\n * any of the basic types (\"sine\", \"square4\", etc.) with \"fm\", \"am\", or \"fat\"\n * will use the FMOscillator, AMOscillator or FatOscillator respectively.\n * For example: `omniOsc.type = \"fatsawtooth\"` will create set the oscillator\n * to a FatOscillator of type \"sawtooth\".\n *\n * @param frequency The initial frequency of the oscillator.\n * @param type The type of the oscillator.\n * @example\n * var omniOsc = new OmniOscillator(\"C#4\", \"pwm\");\n */\nexport class OmniOscillator<OscType extends AnyOscillator>\nextends Source<OmniOscillatorConstructorOptions>\nimplements Omit<ToneOscillatorInterface, \"type\"> {\n\n\tname = \"OmniOscillator\";\n\n\t/**\n\t *  The frequency control.\n\t */\n\treadonly frequency: Signal<Frequency>;\n\n\t/**\n\t *  The detune control.\n\t */\n\treadonly detune: Signal<Cents>;\n\n\t/**\n\t * The oscillator that can switch types\n\t */\n\tprivate _oscillator!: AnyOscillator;\n\n\t/**\n\t *  the type of the oscillator source\n\t */\n\tprivate _sourceType!: OmniOscSourceType;\n\n\tconstructor(options?: Partial<OmniOscillatorConstructorOptions>);\n\tconstructor(frequency?: Frequency, type?: OmniOscillatorType);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(OmniOscillator.getDefaults(), arguments, [\"frequency\", \"type\"]));\n\t\tconst options = optionsFromArguments(OmniOscillator.getDefaults(), arguments, [\"frequency\", \"type\"]);\n\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t});\n\t\tthis.detune = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune,\n\t\t});\n\t\treadOnly(this, [\"frequency\", \"detune\"]);\n\n\t\t// set the options\n\t\tthis.set(options);\n\t}\n\n\tstatic getDefaults(): OmniOscillatorOptions {\n\t\treturn Object.assign(\n\t\t\tOscillator.getDefaults(),\n\t\t\tFMOscillator.getDefaults(),\n\t\t\tAMOscillator.getDefaults(),\n\t\t\tFatOscillator.getDefaults(),\n\t\t\tPulseOscillator.getDefaults(),\n\t\t\tPWMOscillator.getDefaults(),\n\t\t);\n\t}\n\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\tthis._oscillator.start(time);\n\t}\n\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\tthis._oscillator.stop(time);\n\t}\n\n\trestart(time?: Time): this {\n\t\tthis._oscillator.restart(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The type of the oscillator. Can be any of the basic types: sine, square, triangle, sawtooth. Or\n\t * prefix the basic types with \"fm\", \"am\", or \"fat\" to use the FMOscillator, AMOscillator or FatOscillator\n\t * types. The oscillator could also be set to \"pwm\" or \"pulse\". All of the parameters of the\n\t * oscillator's class are accessible when the oscillator is set to that type, but throws an error\n\t * when it's not.\n\t * @example\n\t * omniOsc.type = \"pwm\";\n\t * //modulationFrequency is parameter which is available\n\t * //only when the type is \"pwm\".\n\t * omniOsc.modulationFrequency.value = 0.5;\n\t * @example\n\t * //an square wave frequency modulated by a sawtooth\n\t * omniOsc.type = \"fmsquare\";\n\t * omniOsc.modulationType = \"sawtooth\";\n\t */\n\tget type(): OmniOscillatorType {\n\t\tlet prefix = \"\";\n\t\tif ([\"am\", \"fm\", \"fat\"].some(p => this._sourceType === p)) {\n\t\t\tprefix = this._sourceType;\n\t\t}\n\t\treturn prefix + this._oscillator.type as OmniOscillatorType;\n\t}\n\tset type(type) {\n\t\tif (type.substr(0, 2) === \"fm\") {\n\t\t\tthis._createNewOscillator(\"fm\");\n\t\t\tthis._oscillator = this._oscillator as FMOscillator;\n\t\t\tthis._oscillator.type = type.substr(2) as ToneOscillatorType;\n\t\t} else if (type.substr(0, 2) === \"am\") {\n\t\t\tthis._createNewOscillator(\"am\");\n\t\t\tthis._oscillator = this._oscillator as AMOscillator;\n\t\t\tthis._oscillator.type = type.substr(2)  as ToneOscillatorType;\n\t\t} else if (type.substr(0, 3) === \"fat\") {\n\t\t\tthis._createNewOscillator(\"fat\");\n\t\t\tthis._oscillator = this._oscillator as FatOscillator;\n\t\t\tthis._oscillator.type = type.substr(3)  as ToneOscillatorType;\n\t\t} else if (type === \"pwm\") {\n\t\t\tthis._createNewOscillator(\"pwm\");\n\t\t\tthis._oscillator = this._oscillator as PWMOscillator;\n\t\t} else if (type === \"pulse\") {\n\t\t\tthis._createNewOscillator(\"pulse\");\n\t\t} else {\n\t\t\tthis._createNewOscillator(\"oscillator\");\n\t\t\tthis._oscillator = this._oscillator as Oscillator;\n\t\t\tthis._oscillator.type = (type as ToneOscillatorType);\n\t\t}\n\t}\n\n\t/**\n\t * The partials of the waveform. A partial represents\n\t * the amplitude at a harmonic. The first harmonic is the\n\t * fundamental frequency, the second is the octave and so on\n\t * following the harmonic series.\n\t * Setting this value will automatically set the type to \"custom\".\n\t * The value is an empty array when the type is not \"custom\".\n\t * This is not available on \"pwm\" and \"pulse\" oscillator types.\n\t * @example\n\t * osc.partials = [1, 0.2, 0.01];\n\t */\n\tget partials(): number[] {\n\t\treturn this._oscillator.partials;\n\t}\n\tset partials(partials) {\n\t\tif (!this._getOscType(this._oscillator, \"pulse\") && !this._getOscType(this._oscillator, \"pwm\")) {\n\t\t\tthis._oscillator.partials = partials;\n\t\t}\n\t}\n\n\t/**\n\t * The partial count of the oscillator. This is not available on \"pwm\" and \"pulse\" oscillator types.\n\t * @example\n\t * //set the maximum number of partials\n\t * osc.partialCount = 0;\n\t */\n\tget partialCount(): number {\n\t\treturn this._oscillator.partialCount;\n\t}\n\tset partialCount(partialCount) {\n\t\tif (!this._getOscType(this._oscillator, \"pulse\") && !this._getOscType(this._oscillator, \"pwm\")) {\n\t\t\tthis._oscillator.partialCount = partialCount;\n\t\t}\n\t}\n\n\t/**\n\t * Set the parameters at once. Either pass in an\n\t * object mapping parameters to values, or to set a\n\t * single parameter, by passing in a string and value.\n\t * The last argument is an optional ramp time which\n\t * will ramp any signal values to their destination value\n\t * over the duration of the rampTime.\n\t * @param  params\n\t * @example\n\t * //set values using an object\n\t * filter.set({\n\t * \t\"frequency\" : 300,\n\t * \t\"type\" : \"highpass\"\n\t * });\n\t */\n\tset(props: Partial<OmniOscillatorConstructorOptions>): this {\n\t\t// make sure the type is set first\n\t\tif (Reflect.has(props, \"type\") && props.type) {\n\t\t\tthis.type = props.type;\n\t\t\t// delete props.type;\n\t\t}\n\t\t// then set the rest\n\t\tsuper.set(props);\n\t\treturn this;\n\t}\n\n\tget(): OmniOscillatorConstructorOptions {\n\t\tconst options = this._oscillator.get();\n\t\t// @ts-ignore\n\t\toptions.type = this.type;\n\t\treturn options as OmniOscillatorOptions;\n\t}\n\n\t/**\n\t *  connect the oscillator to the frequency and detune signals\n\t */\n\tprivate _createNewOscillator(oscType: OmniOscSourceType): void {\n\t\tif (oscType !== this._sourceType) {\n\t\t\tthis._sourceType = oscType;\n\t\t\t// tslint:disable-next-line: variable-name\n\t\t\tconst OscConstructor = OmniOscillatorSourceMap[oscType];\n\t\t\t// short delay to avoid clicks on the change\n\t\t\tconst now = this.now();\n\t\t\tif (this._oscillator) {\n\t\t\t\tconst oldOsc = this._oscillator;\n\t\t\t\toldOsc.stop(now);\n\t\t\t\t// dispose the old one\n\t\t\t\tthis.context.setTimeout(() => oldOsc.dispose(), this.blockTime);\n\t\t\t}\n\t\t\tthis._oscillator = new OscConstructor({\n\t\t\t\tcontext : this.context,\n\t\t\t});\n\t\t\tthis.frequency.connect(this._oscillator.frequency);\n\t\t\tthis.detune.connect(this._oscillator.detune);\n\t\t\tthis._oscillator.connect(this.output);\n\t\t\tthis._oscillator.onstop = () => this.onstop(this);\n\t\t\tif (this.state === \"started\") {\n\t\t\t\tthis._oscillator.start(now);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._oscillator.phase;\n\t}\n\tset phase(phase) {\n\t\tthis._oscillator.phase = phase;\n\t}\n\n\t/**\n\t * The source type of the oscillator.\n\t * @example\n\t * var omniOsc = new OmniOscillator(440, \"fmsquare\");\n\t * omniOsc.sourceType // 'fm'\n\t */\n\tget sourceType(): OmniOscSourceType {\n\t\treturn this._sourceType;\n\t}\n\tset sourceType(sType) {\n\t\t// the basetype defaults to sine\n\t\tlet baseType = \"sine\";\n\t\tif (this._oscillator.type !== \"pwm\" && this._oscillator.type !== \"pulse\") {\n\t\t\tbaseType = this._oscillator.type;\n\t\t}\n\n\t\t// set the type\n\t\tif (sType === \"fm\") {\n\t\t\tthis.type = \"fm\" + baseType as OmniOscillatorType;\n\t\t} else if (sType === \"am\") {\n\t\t\tthis.type = \"am\" + baseType as OmniOscillatorType;\n\t\t} else if (sType === \"fat\") {\n\t\t\tthis.type = \"fat\" + baseType as OmniOscillatorType;\n\t\t} else if (sType === \"oscillator\") {\n\t\t\tthis.type = baseType as OmniOscillatorType;\n\t\t} else if (sType === \"pulse\") {\n\t\t\tthis.type = \"pulse\";\n\t\t} else if (sType === \"pwm\") {\n\t\t\tthis.type = \"pwm\";\n\t\t}\n\t}\n\n\tprivate _getOscType<SourceType extends OmniOscSourceType>(\n\t\tosc: AnyOscillator,\n\t\tsourceType: SourceType,\n\t): osc is OmniOscillatorSource[SourceType] {\n\t\treturn osc instanceof OmniOscillatorSourceMap[sourceType];\n\t}\n\n\t/**\n\t * The base type of the oscillator.\n\t * @example\n\t * var omniOsc = new OmniOscillator(440, \"fmsquare4\");\n\t * omniOsc.sourceType // 'fm'\n\t * omniOsc.baseType //'square'\n\t * omniOsc.partialCount //4\n\t */\n\tget baseType(): OscillatorType | \"pwm\" | \"pulse\" {\n\t\treturn this._oscillator.baseType;\n\t}\n\tset baseType(baseType) {\n\t\tif (!this._getOscType(this._oscillator, \"pulse\") &&\n\t\t\t!this._getOscType(this._oscillator, \"pwm\") &&\n\t\t\tbaseType !== \"pulse\" && baseType !== \"pwm\") {\n\t\t\tthis._oscillator.baseType = baseType;\n\t\t}\n\t}\n\n\t/**\n\t * The width of the oscillator when sourceType === \"pulse\".\n\t * @example\n\t * var omniOsc = new OmniOscillator(440, \"pulse\");\n\t * //can access the width attribute only if type === \"pulse\"\n\t * omniOsc.width.value = 0.2;\n\t */\n\tget width(): IsPulseOscillator<OscType, Signal<AudioRange>> {\n\t\tif (this._getOscType(this._oscillator, \"pulse\")) {\n\t\t\treturn this._oscillator.width as IsPulseOscillator<OscType, Signal<AudioRange>> ;\n\t\t} else {\n\t\t\treturn undefined as IsPulseOscillator<OscType, Signal<AudioRange>> ;\n\t\t}\n\t}\n\n\t/**\n\t * The number of detuned oscillators, when sourceType === \"fat\".\n\t */\n\tget count(): IsFatOscillator<OscType, number> {\n\t\tif (this._getOscType(this._oscillator, \"fat\")) {\n\t\t\treturn this._oscillator.count as IsFatOscillator<OscType, number>;\n\t\t} else {\n\t\t\treturn undefined as IsFatOscillator<OscType, number>;\n\t\t}\n\t}\n\tset count(count) {\n\t\tif (this._getOscType(this._oscillator, \"fat\") && isNumber(count)) {\n\t\t\tthis._oscillator.count = count;\n\t\t}\n\t}\n\n\t/**\n\t * The detune spread between the oscillators. If \"count\" is\n\t * set to 3 oscillators and the \"spread\" is set to 40,\n\t * the three oscillators would be detuned like this: [-20, 0, 20]\n\t * for a total detune spread of 40 cents. See Tone.FatOscillator\n\t * for more info.\n\t */\n\tget spread(): IsFatOscillator<OscType, Cents> {\n\t\tif (this._getOscType(this._oscillator, \"fat\")) {\n\t\t\treturn this._oscillator.spread as IsFatOscillator<OscType, Cents>;\n\t\t} else {\n\t\t\treturn undefined as IsFatOscillator<OscType, Cents>;\n\t\t}\n\t}\n\tset spread(spread) {\n\t\tif (this._getOscType(this._oscillator, \"fat\") && isNumber(spread)) {\n\t\t\tthis._oscillator.spread = spread;\n\t\t}\n\t}\n\n\t/**\n\t * The type of the modulator oscillator. Only if the oscillator\n\t * is set to \"am\" or \"fm\" types. see. Tone.AMOscillator or Tone.FMOscillator\n\t * for more info.\n\t */\n\tget modulationType(): IsAmOrFmOscillator<OscType, ToneOscillatorType> {\n\t\tif (this._getOscType(this._oscillator, \"fm\") || this._getOscType(this._oscillator, \"am\")) {\n\t\t\treturn this._oscillator.modulationType as IsAmOrFmOscillator<OscType, ToneOscillatorType>;\n\t\t} else {\n\t\t\treturn undefined as IsAmOrFmOscillator<OscType, ToneOscillatorType>;\n\t\t}\n\t}\n\tset modulationType(mType) {\n\t\tif ((this._getOscType(this._oscillator, \"fm\") || this._getOscType(this._oscillator, \"am\")) && isString(mType)) {\n\t\t\tthis._oscillator.modulationType = mType;\n\t\t}\n\t}\n\n\t/**\n\t * The modulation index which is in essence the depth or amount of the modulation. In other terms it is the\n\t * ratio of the frequency of the modulating signal (mf) to the amplitude of the\n\t * modulating signal (ma) -- as in ma/mf.\n\t * See Tone.FMOscillator for more info.\n\t */\n\tget modulationIndex(): IsFMOscillator<OscType, Signal<Positive>> {\n\t\tif (this._getOscType(this._oscillator, \"fm\")) {\n\t\t\treturn this._oscillator.modulationIndex as IsFMOscillator<OscType, Signal<Positive>>;\n\t\t} else {\n\t\t\treturn undefined as IsFMOscillator<OscType, Signal<Positive>>;\n\t\t}\n\t}\n\n\t/**\n\t *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators.\n\t *  A harmonicity of 1 gives both oscillators the same frequency.\n\t *  Harmonicity = 2 means a change of an octave. See Tone.AMOscillator or Tone.FMOscillator\n\t *  for more info.\n\t */\n\tget harmonicity(): IsAmOrFmOscillator<OscType, Signal<Positive>> {\n\t\tif (this._getOscType(this._oscillator, \"fm\") || this._getOscType(this._oscillator, \"am\")) {\n\t\t\treturn this._oscillator.harmonicity as IsAmOrFmOscillator<OscType, Signal<Positive>>;\n\t\t} else {\n\t\t\treturn undefined as IsAmOrFmOscillator<OscType, Signal<Positive>>;\n\t\t}\n\t}\n\n\t/**\n\t * The modulationFrequency Signal of the oscillator\n\t * (only if the oscillator type is set to pwm). See\n\t * Tone.PWMOscillator for more info.\n\t * @example\n\t * var omniOsc = new OmniOscillator(440, \"pwm\");\n\t * //can access the modulationFrequency attribute only if type === \"pwm\"\n\t * omniOsc.modulationFrequency.value = 0.2;\n\t */\n\tget modulationFrequency(): IsPWMOscillator<OscType, Signal<Frequency>> {\n\t\tif (this._getOscType(this._oscillator, \"pwm\")) {\n\t\t\treturn this._oscillator.modulationFrequency as IsPWMOscillator<OscType, Signal<Frequency>>;\n\t\t} else {\n\t\t\treturn undefined as IsPWMOscillator<OscType, Signal<Frequency>>;\n\t\t}\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.detune.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis._oscillator.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { Positive, Time } from \"../../core/type/Units\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp } from \"../../core/util/Interface\";\nimport { isUndef } from \"../../core/util/TypeCheck\";\nimport { Source, SourceOptions } from \"../Source\";\nimport { ToneBufferSource } from \"./BufferSource\";\n\ninterface PlayerOptions extends SourceOptions {\n\tonload: () => void;\n\tplaybackRate: Positive;\n\tloop: boolean;\n\tautostart: boolean;\n\tloopStart: Time;\n\tloopEnd: Time;\n\treverse: boolean;\n\tfadeIn: Time;\n\tfadeOut: Time;\n\turl?: ToneAudioBuffer | string | AudioBuffer;\n}\n\n/**\n * Player is an audio file player with start, loop, and stop functions.\n *\n * @param url Either the AudioBuffer or the url from which to load the AudioBuffer\n * @param onload The function to invoke when the buffer is loaded.\n *                            Recommended to use Tone.Buffer.on('load') instead.\n * @example\n * var player = new Player(\"./path/to/sample.mp3\").toDestination();\n * //play as soon as the buffer is loaded\n * player.autostart = true;\n */\nexport class Player extends Source<PlayerOptions> {\n\n\tname = \"Player\";\n\n\t/**\n\t * If the file should play as soon\n\t * as the buffer is loaded.\n\t * @example\n\t * //will play as soon as it's loaded\n\t * var player = new Player({\n\t * \t\"url\" : \"./path/to/sample.mp3\",\n\t * \t\"autostart\" : true,\n\t * }).toDestination();\n\t */\n\tautostart: boolean;\n\n\t/**\n\t *  The buffer\n\t */\n\tprivate _buffer: ToneAudioBuffer;\n\n\t/**\n\t *  if the buffer should loop once it's over\n\t */\n\tprivate _loop: boolean;\n\n\t/**\n\t *  if 'loop' is true, the loop will start at this position\n\t */\n\tprivate _loopStart: Time;\n\n\t/**\n\t *  if 'loop' is true, the loop will end at this position\n\t */\n\tprivate _loopEnd: Time;\n\n\t/**\n\t *  the playback rate\n\t */\n\tprivate _playbackRate: Positive;\n\n\t/**\n\t *  All of the active buffer source nodes\n\t */\n\tprivate _activeSources: Set<ToneBufferSource> = new Set();\n\n\t/**\n\t *  The fadeIn time of the amplitude envelope.\n\t */\n\tfadeIn: Time;\n\n\t/**\n\t *  The fadeOut time of the amplitude envelope.\n\t */\n\tfadeOut: Time;\n\n\tconstructor(options?: Partial<PlayerOptions>);\n\tconstructor(url?: string | AudioBuffer | ToneAudioBuffer, onload?: () => void);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Player.getDefaults(), arguments, [\"url\", \"onload\"]));\n\t\tconst options = optionsFromArguments(Player.getDefaults(), arguments, [\"url\", \"onload\"]);\n\n\t\tthis._buffer = new ToneAudioBuffer({\n\t\t\tonload: this._onload.bind(this, options.onload),\n\t\t\treverse: options.reverse,\n\t\t\turl: options.url,\n\t\t});\n\t\tthis.autostart = options.autostart;\n\t\tthis._loop = options.loop;\n\t\tthis._loopStart = options.loopStart;\n\t\tthis._loopEnd = options.loopEnd;\n\t\tthis._playbackRate = options.playbackRate;\n\t\tthis.fadeIn = options.fadeIn;\n\t\tthis.fadeOut = options.fadeOut;\n\t}\n\n\tstatic getDefaults(): PlayerOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tautostart : false,\n\t\t\tfadeIn : 0,\n\t\t\tfadeOut : 0,\n\t\t\tloop : false,\n\t\t\tloopEnd : 0,\n\t\t\tloopStart : 0,\n\t\t\tonload : noOp,\n\t\t\tplaybackRate : 1,\n\t\t\treverse : false,\n\t\t});\n\t}\n\n\t/**\n\t * Load the audio file as an audio buffer.\n\t * Decodes the audio asynchronously and invokes\n\t * the callback once the audio buffer loads.\n\t * Note: this does not need to be called if a url\n\t * was passed in to the constructor. Only use this\n\t * if you want to manually load a new url.\n\t * @param url The url of the buffer to load. Filetype support depends on the browser.\n\t */\n\tasync load(url: string): Promise<this> {\n\t\tawait this._buffer.load(url);\n\t\tthis._onload();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Internal callback when the buffer is loaded.\n\t */\n\tprivate _onload(callback: () => void = noOp): void {\n\t\tcallback();\n\t\tif (this.autostart) {\n\t\t\tthis.start();\n\t\t}\n\t}\n\n\t/**\n\t * Internal callback when the buffer is done playing.\n\t */\n\tprivate _onSourceEnd(source: ToneBufferSource): void {\n\t\t// invoke the onstop function\n\t\tthis.onstop(this);\n\n\t\t// delete the source from the active sources\n\t\tthis._activeSources.delete(source);\n\t\tif (this._activeSources.size === 0 && !this._synced) {\n\t\t\tthis._state.setStateAtTime(\"stopped\", this.now());\n\t\t}\n\t}\n\n\t/**\n\t *  Play the buffer at the given startTime. Optionally add an offset\n\t *  and/or duration which will play the buffer from a position\n\t *  within the buffer for the given duration.\n\t *\n\t *  @param  time When the player should start.\n\t *  @param  offset The offset from the beginning of the sample\n\t *                                 to start at.\n\t *  @param  duration How long the sample should play. If no duration is given, it will default to the full length\n\t *                   of the sample (minus any offset)\n\t */\n\tstart(time?: Time, offset?: Time, duration?: Time): this {\n\t\tsuper.start(time, offset, duration);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Internal start method\n\t */\n\tprotected _start(startTime?: Time, offset?: Time, duration?: Time): void {\n\t\t// if it's a loop the default offset is the loopstart point\n\t\tif (this._loop) {\n\t\t\toffset = defaultArg(offset, this._loopStart);\n\t\t} else {\n\t\t\t// otherwise the default offset is 0\n\t\t\toffset = defaultArg(offset, 0);\n\t\t}\n\n\t\t// compute the values in seconds\n\t\tlet comptuedOffset = this.toSeconds(offset);\n\n\t\t// if it's synced, it should factor in the playback rate for computing the offset\n\t\tif (this._synced) {\n\t\t\tcomptuedOffset *= this._playbackRate;\n\t\t}\n\n\t\t// compute the duration which is either the passed in duration of the buffer.duration - offset\n\t\tconst origDuration = duration;\n\t\tduration = defaultArg(duration, Math.max(this._buffer.duration - comptuedOffset, 0));\n\t\tlet computedDuration = this.toSeconds(duration);\n\n\t\t// scale it by the playback rate\n\t\tcomputedDuration = computedDuration / this._playbackRate;\n\n\t\t// get the start time\n\t\tstartTime = this.toSeconds(startTime);\n\n\t\t// make the source\n\t\tconst source = new ToneBufferSource({\n\t\t\tbuffer : this._buffer,\n\t\t\tcontext: this.context,\n\t\t\tfadeIn : this.fadeIn,\n\t\t\tfadeOut : this.fadeOut,\n\t\t\tloop : this._loop,\n\t\t\tloopEnd : this._loopEnd,\n\t\t\tloopStart : this._loopStart,\n\t\t\tonended : this._onSourceEnd.bind(this),\n\t\t\tplaybackRate : this._playbackRate,\n\t\t}).connect(this.output);\n\n\t\t// set the looping properties\n\t\tif (!this._loop && !this._synced) {\n\t\t\t// if it's not looping, set the state change at the end of the sample\n\t\t\tthis._state.setStateAtTime(\"stopped\", startTime + computedDuration, {\n\t\t\t\timplicitEnd: true,\n\t\t\t});\n\t\t}\n\n\t\t// add it to the array of active sources\n\t\tthis._activeSources.add(source);\n\n\t\t// start it\n\t\tif (this._loop && isUndef(origDuration)) {\n\t\t\tsource.start(startTime, comptuedOffset);\n\t\t} else {\n\t\t\t// subtract the fade out time\n\t\t\tsource.start(startTime, comptuedOffset, computedDuration - this.toSeconds(this.fadeOut));\n\t\t}\n\t}\n\n\t/**\n\t *  Stop playback.\n\t */\n\tprotected _stop(time?: Time): void {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._activeSources.forEach(source => source.stop(computedTime));\n\t}\n\n\t/**\n\t * Stop and then restart the player from the beginning (or offset)\n\t * @param  time When the player should start.\n\t * @param  offset The offset from the beginning of the sample to start at.\n\t * @param  duration How long the sample should play. If no duration is given,\n\t * \t\t\t\t\tit will default to the full length of the sample (minus any offset)\n\t */\n\trestart(time?: Time, offset?: Time, duration?: Time): this {\n\t\tthis._stop(time);\n\t\tthis._start(time, offset, duration);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Seek to a specific time in the player's buffer. If the\n\t *  source is no longer playing at that time, it will stop.\n\t *  If you seek to a time that\n\t *  @param {Time} offset The time to seek to.\n\t *  @param {Time=} time The time for the seek event to occur.\n\t *  @return {Player} this\n\t *  @example\n\t * source.start(0.2);\n\t * source.stop(0.4);\n\t */\n\tseek(offset: Time, when?: Time): this {\n\t\tconst computedTime = this.toSeconds(when);\n\t\tif (this._state.getValueAtTime(computedTime) === \"started\") {\n\t\t\tconst comptuedOffset = this.toSeconds(offset);\n\t\t\t// if it's currently playing, stop it\n\t\t\tthis._stop(computedTime);\n\t\t\t// restart it at the given time\n\t\t\tthis._start(computedTime, comptuedOffset);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set the loop start and end. Will only loop if loop is set to true.\n\t * @param loopStart The loop end time\n\t * @param loopEnd The loop end time\n\t * @example\n\t * //loop 0.1 seconds of the file.\n\t * player.setLoopPoints(0.2, 0.3);\n\t * player.loop = true;\n\t */\n\tsetLoopPoints(loopStart: Time, loopEnd: Time): this {\n\t\tthis.loopStart = loopStart;\n\t\tthis.loopEnd = loopEnd;\n\t\treturn this;\n\t}\n\n\t/**\n\t * If loop is true, the loop will start at this position.\n\t */\n\tget loopStart(): Time {\n\t\treturn this._loopStart;\n\t}\n\tset loopStart(loopStart) {\n\t\tthis._loopStart = loopStart;\n\t\t// get the current source\n\t\tthis._activeSources.forEach(source => {\n\t\t\tsource.loopStart = loopStart;\n\t\t});\n\t}\n\n\t/**\n\t * If loop is true, the loop will end at this position.\n\t */\n\tget loopEnd(): Time {\n\t\treturn this._loopEnd;\n\t}\n\tset loopEnd(loopEnd) {\n\t\tthis._loopEnd = loopEnd;\n\t\t// get the current source\n\t\tthis._activeSources.forEach(source => {\n\t\t\tsource.loopEnd = loopEnd;\n\t\t});\n\t}\n\n\t/**\n\t * The audio buffer belonging to the player.\n\t */\n\tget buffer(): ToneAudioBuffer {\n\t\treturn this._buffer;\n\t}\n\tset buffer(buffer) {\n\t\tthis._buffer.set(buffer);\n\t}\n\n\t/**\n\t * If the buffer should loop once it's over.\n\t */\n\tget loop(): boolean {\n\t\treturn this._loop;\n\t}\n\tset loop(loop) {\n\t\t// if no change, do nothing\n\t\tif (this._loop === loop) {\n\t\t\treturn;\n\t\t}\n\t\tthis._loop = loop;\n\t\t// set the loop of all of the sources\n\t\tthis._activeSources.forEach(source => {\n\t\t\tsource.loop = loop;\n\t\t});\n\t\tif (loop) {\n\t\t\t// remove the next stopEvent\n\t\t\tconst stopEvent = this._state.getNextState(\"stopped\", this.now());\n\t\t\tif (stopEvent) {\n\t\t\t\tthis._state.cancel(stopEvent.time);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * The playback speed. 1 is normal speed. This is not a signal because\n\t * Safari and iOS currently don't support playbackRate as a signal.\n\t */\n\tget playbackRate(): Positive {\n\t\treturn this._playbackRate;\n\t}\n\tset playbackRate(rate) {\n\t\tthis._playbackRate = rate;\n\t\tconst now = this.now();\n\n\t\t// cancel the stop event since it's at a different time now\n\t\tconst stopEvent = this._state.getNextState(\"stopped\", now);\n\t\tif (stopEvent && stopEvent.implicitEnd) {\n\t\t\tthis._state.cancel(stopEvent.time);\n\t\t\tthis._activeSources.forEach(source => source.cancelStop());\n\t\t}\n\n\t\t// set all the sources\n\t\tthis._activeSources.forEach(source => {\n\t\t\tsource.playbackRate.setValueAtTime(rate, now);\n\t\t});\n\t}\n\n\t/**\n\t * The direction the buffer should play in\n\t */\n\tget reverse(): boolean {\n\t\treturn this._buffer.reverse;\n\t}\n\tset reverse(rev) {\n\t\tthis._buffer.reverse = rev;\n\t}\n\n\t/**\n\t * If the buffer is loaded\n\t */\n\tget loaded(): boolean {\n\t\treturn this._buffer.loaded;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\t// disconnect all of the players\n\t\tthis._activeSources.forEach(source => source.dispose());\n\t\tthis._activeSources.clear();\n\t\tthis._buffer.dispose();\n\t\treturn this;\n\t}\n}\n","import { connectSeries } from \"../core/Connect\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Param } from \"../core/context/Param\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Signal, SignalOptions } from \"./Signal\";\n\n/**\n * Add a signal and a number or two signals. When no value is\n * passed into the constructor, Tone.Add will sum input and `addend`\n * If a value is passed into the constructor, the it will be added to the input.\n *\n * @param value If no value is provided, Tone.Add will sum the first  and second inputs.\n * @example\n * var signal = new Signal(2);\n * var add = new Add(2);\n * signal.connect(add);\n * //the output of add equals 4\n * @example\n * //if constructed with no arguments\n * //it will add the first and second inputs\n * var add = new Add();\n * var sig0 = new Signal(3).connect(add);\n * var sig1 = new Signal(4).connect(add.addend);\n * //the output of add equals 7.\n */\nexport class Add extends Signal {\n\n\toverride = false;\n\n\treadonly name = \"Add\";\n\n\t/**\n\t *  the summing node\n\t */\n\tprivate _sum: Gain = new Gain({ context: this.context });\n\treadonly input = this._sum;\n\treadonly output = this._sum;\n\n\t/**\n\t * The value which is added to the input signal\n\t */\n\treadonly addend: Param<number> = this._param;\n\n\tconstructor(options?: Partial<SignalOptions<number>>);\n\t// tslint:disable-next-line: unified-signatures\n\tconstructor(value?: number);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Add.getDefaults(), arguments, [\"value\"])));\n\n\t\tconnectSeries(this._constantSource, this._sum);\n\t}\n\n\tstatic getDefaults(): SignalOptions<number> {\n\t\treturn Object.assign(Signal.getDefaults(), {\n\t\t\tvalue: 0,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._sum.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { SignalOperator } from \"./SignalOperator\";\nimport { WaveShaper } from \"./WaveShaper\";\n\n/**\n *  Return the absolute value of an incoming signal.\n *\n *  @example\n * var signal = new Tone.Signal(-1);\n * var abs = new Tone.Abs();\n * signal.connect(abs);\n * //the output of abs is 1.\n */\nexport class Abs extends SignalOperator<ToneAudioNodeOptions> {\n\n\tname = \"Abs\";\n\n\t/**\n\t * The node which converts the audio ranges\n\t */\n\tprivate _abs = new WaveShaper({\n\t\tcontext: this.context,\n\t\tmapping: val => {\n\t\t\tif (Math.abs(val) < 0.001) {\n\t\t\t\treturn 0;\n\t\t\t} else {\n\t\t\t\treturn Math.abs(val);\n\t\t\t}\n\t\t},\n\t});\n\n\t/**\n\t * The AudioRange input [-1, 1]\n\t */\n\tinput = this._abs;\n\n\t/**\n\t * The output range [0, 1]\n\t */\n\toutput = this._abs;\n\n\t/**\n\t *  clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._abs.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { SignalOperator } from \"./SignalOperator\";\nimport { WaveShaper } from \"./WaveShaper\";\n\n/**\n * GainToAudio converts an input in NormalRange [0,1] to AudioRange [-1,1].\n * See {@link AudioToGain}.\n *\n * @example\n * var a2g = new GainToAudio();\n */\nexport class GainToAudio extends SignalOperator<ToneAudioNodeOptions> {\n\n\tname = \"GainToAudio\";\n\n\t/**\n\t * The node which converts the audio ranges\n\t */\n\tprivate _norm = new WaveShaper({\n\t\tcontext: this.context,\n\t\tmapping: x => Math.abs(x) * 2 - 1,\n\t});\n\n\t/**\n\t * The NormalRange input [0, 1]\n\t */\n\tinput = this._norm;\n\n\t/**\n\t * The AudioRange output [-1, 1]\n\t */\n\toutput = this._norm;\n\n\t/**\n\t *  clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._norm.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Multiply } from \"./Multiply\";\nimport { SignalOperator } from \"./SignalOperator\";\n\n/**\n *  @class Negate the incoming signal. i.e. an input signal of 10 will output -10\n *\n *  @constructor\n *  @extends {Tone.SignalBase}\n *  @example\n * var neg = new Negate();\n * var sig = new Signal(-2).connect(neg);\n * //output of neg is positive 2.\n */\nexport class Negate extends SignalOperator<ToneAudioNodeOptions> {\n\n\tname = \"Negate\";\n\n\t/**\n\t *  negation is done by multiplying by -1\n\t */\n\tprivate _multiply: Multiply = new Multiply({\n\t\tcontext: this.context,\n\t\tvalue: -1,\n\t});\n\n\t/**\n\t * The input and output are equal to the multiply node\n\t */\n\tinput = this._multiply;\n\toutput = this._multiply;\n\n\t/**\n\t *  clean up\n\t *  @returns {Negate} this\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._multiply.dispose();\n\t\treturn this;\n\t}\n}\n","import { connectSeries } from \"../core/Connect\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Param } from \"../core/context/Param\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Negate } from \"../signal/Negate\";\nimport { Signal, SignalOptions } from \"../signal/Signal\";\n\n/**\n * Subtract the signal connected to the input is subtracted from the signal connected\n * The subtrahend.\n *\n * @param value The value to subtract from the incoming signal. If the value\n *                         is omitted, it will subtract the second signal from the first.\n * @example\n * var sub = new Subtract(1);\n * var sig = new Tone.Signal(4).connect(sub);\n * //the output of sub is 3.\n * @example\n * var sub = new Subtract();\n * var sigA = new Tone.Signal(10);\n * var sigB = new Tone.Signal(2.5);\n * sigA.connect(sub);\n * sigB.connect(sub.subtrahend);\n * //output of sub is 7.5\n */\nexport class Subtract extends Signal {\n\n\toverride = false;\n\n\treadonly name = \"Subtract\";\n\n\t/**\n\t *  the summing node\n\t */\n\tprivate _sum: Gain = new Gain({ context: this.context });\n\tinput = this._sum;\n\toutput = this._sum;\n\n\t/**\n\t *  Negate the input of the second input before connecting it to the summing node.\n\t */\n\tprivate _neg: Negate = new Negate({ context : this.context });\n\n\t/**\n\t * The value which is subtracted from the main signal\n\t */\n\tsubtrahend: Param<number> = this._param;\n\n\tconstructor(options?: Partial<SignalOptions<number>>);\n\t// tslint:disable-next-line: unified-signatures\n\tconstructor(value?: number);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Subtract.getDefaults(), arguments, [\"value\"])));\n\n\t\tconnectSeries(this._constantSource, this._neg, this._sum);\n\t}\n\n\tstatic getDefaults(): SignalOptions<number> {\n\t\treturn Object.assign(Signal.getDefaults(), {\n\t\t\tvalue: 0,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._neg.dispose();\n\t\tthis._sum.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../core/context/Gain\";\nimport { connect, disconnect, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { SignalOperator } from \"./SignalOperator\";\n\n/**\n *  Tone.Zero outputs 0's at audio-rate. The reason this has to be\n *  it's own class is that many browsers optimize out Tone.Signal\n *  with a value of 0 and will not process nodes further down the graph.\n */\nexport class Zero extends SignalOperator<ToneAudioNodeOptions> {\n\n\treadonly name = \"Zero\";\n\n\t/**\n\t * The gain node which connects the constant source to the output\n\t */\n\tprivate _gain = new Gain({ context : this.context });\n\n\t/**\n\t * Only outputs 0\n\t */\n\toutput = this._gain;\n\n\t/**\n\t * no input node\n\t */\n\tinput = undefined;\n\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Zero.getDefaults(), arguments)));\n\t\tconnect(this.context.getConstant(0), this._gain);\n\t}\n\n\t/**\n\t * clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tdisconnect(this.context.getConstant(0), this._gain);\n\t\treturn this;\n\t}\n}\n","import { InputNode, OutputNode } from \"../../core/context/ToneAudioNode\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { NormalRange, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { isArray, isObject, isString } from \"../../core/util/TypeCheck\";\nimport { connectSignal, Signal } from \"../../signal/Signal\";\n\ntype BasicEnvelopeCurve = \"linear\" | \"exponential\";\ntype InternalEnvelopeCurve = BasicEnvelopeCurve | number[];\nexport type EnvelopeCurve = EnvelopeCurveName | number[];\n\nexport interface EnvelopeOptions extends ToneAudioNodeOptions {\n\tattack: Time;\n\tdecay: Time;\n\tsustain: NormalRange;\n\trelease: Time;\n\tattackCurve: EnvelopeCurve;\n\treleaseCurve: EnvelopeCurve;\n\tdecayCurve: BasicEnvelopeCurve;\n}\n\n/**\n *  Envelope is an [ADSR](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope)\n *  envelope generator. Envelope outputs a signal which\n *  can be connected to an AudioParam or Tone.Signal.\n * ```\n *           /\\\n *          /  \\\n *         /    \\\n *        /      \\\n *       /        \\___________\n *      /                     \\\n *     /                       \\\n *    /                         \\\n *   /                           \\\n * ```\n *\n *  @param attack The amount of time it takes for the envelope to go from\n *                         0 to it's maximum value.\n *  @param decay\tThe period of time after the attack that it takes for the envelope\n *                       \tto fall to the sustain value. Value must be greater than 0.\n *  @param sustain\tThe percent of the maximum value that the envelope rests at until\n *                                \tthe release is triggered.\n *  @param release\tThe amount of time after the release is triggered it takes to reach 0.\n *                         \tValue must be greater than 0.\n *  @example\n * //an amplitude envelope\n * var gainNode = Tone.context.createGain();\n * var env = new Envelope({\n * \t\"attack\" : 0.1,\n * \t\"decay\" : 0.2,\n * \t\"sustain\" : 1,\n * \t\"release\" : 0.8,\n * });\n * env.connect(gainNode.gain);\n */\nexport class Envelope extends ToneAudioNode<EnvelopeOptions> {\n\n\treadonly name: string = \"Envelope\";\n\n\t/**\n\t * When triggerAttack is called, the attack time is the amount of\n\t * time it takes for the envelope to reach it's maximum value.\n\t * ```\n\t *           /\\\n\t *          /X \\\n\t *         /XX  \\\n\t *        /XXX   \\\n\t *       /XXXX    \\___________\n\t *      /XXXXX                \\\n\t *     /XXXXXX                 \\\n\t *    /XXXXXXX                  \\\n\t *   /XXXXXXXX                   \\\n\t * ```\n\t */\n\tattack: Time;\n\n\t/**\n\t * After the attack portion of the envelope, the value will fall\n\t * over the duration of the decay time to it's sustain value.\n\t * ```\n\t *           /\\\n\t *          / X\\\n\t *         /  XX\\\n\t *        /   XXX\\\n\t *       /    XXXX\\___________\n\t *      /     XXXXX           \\\n\t *     /      XXXXX            \\\n\t *    /       XXXXX             \\\n\t *   /        XXXXX              \\\n\t * ```\n\t */\n\tdecay: Time;\n\n\t/**\n\t * \tThe sustain value is the value\n\t * \twhich the envelope rests at after triggerAttack is\n\t * \tcalled, but before triggerRelease is invoked.\n\t * ```\n\t *           /\\\n\t *          /  \\\n\t *         /    \\\n\t *        /      \\\n\t *       /        \\___________\n\t *      /          XXXXXXXXXXX\\\n\t *     /           XXXXXXXXXXX \\\n\t *    /            XXXXXXXXXXX  \\\n\t *   /             XXXXXXXXXXX   \\\n\t * ```\n\t */\n\tsustain: NormalRange;\n\n\t/**\n\t *  After triggerRelease is called, the envelope's\n\t *  value will fall to it's miminum value over the\n\t *  duration of the release time.\n\t * ```\n\t *           /\\\n\t *          /  \\\n\t *         /    \\\n\t *        /      \\\n\t *       /        \\___________\n\t *      /                    X\\\n\t *     /                     XX\\\n\t *    /                      XXX\\\n\t *   /                       XXXX\\\n\t * ```\n\t */\n\trelease: Time;\n\n\t/**\n\t *  The automation curve type for the attack\n\t */\n\tprivate _attackCurve!: InternalEnvelopeCurve;\n\n\t/**\n\t *  The automation curve type for the decay\n\t */\n\tprivate _decayCurve!: BasicEnvelopeCurve;\n\n\t/**\n\t *  The automation curve type for the release\n\t */\n\tprivate _releaseCurve!: InternalEnvelopeCurve;\n\n\t/**\n\t *  the signal which is output.\n\t */\n\tprotected _sig: Signal<NormalRange> = new Signal({\n\t\tcontext: this.context,\n\t\tvalue: 0,\n\t});\n\n\t/**\n\t * The output signal of the envelope\n\t */\n\toutput: OutputNode = this._sig;\n\n\t/**\n\t * Envelope has no input\n\t */\n\tinput: InputNode | undefined = undefined;\n\n\tconstructor(attack?: Time, decay?: Time, sustain?: NormalRange, release?: Time);\n\tconstructor(options?: Partial<EnvelopeOptions>)\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Envelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]));\n\t\tconst options = optionsFromArguments(Envelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]);\n\n\t\tthis.attack = options.attack;\n\t\tthis.decay = options.decay;\n\t\tthis.sustain = options.sustain;\n\t\tthis.release = options.release;\n\t\tthis.attackCurve = options.attackCurve;\n\t\tthis.releaseCurve = options.releaseCurve;\n\t\tthis.decayCurve = options.decayCurve;\n\t}\n\n\tstatic getDefaults(): EnvelopeOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tattack : 0.01,\n\t\t\tattackCurve : \"linear\" as EnvelopeCurveName,\n\t\t\tdecay : 0.1,\n\t\t\tdecayCurve : \"exponential\" as BasicEnvelopeCurve,\n\t\t\trelease : 1,\n\t\t\treleaseCurve : \"exponential\" as EnvelopeCurveName,\n\t\t\tsustain : 0.5,\n\t\t});\n\t}\n\n\t/**\n\t * Read the current value of the envelope. Useful for\n\t * syncronizing visual output to the envelope.\n\t */\n\tget value(): NormalRange {\n\t\treturn this.getValueAtTime(this.now());\n\t}\n\n\t/**\n\t *  Get the curve\n\t *  @param  curve\n\t *  @param  direction  In/Out\n\t *  @return  {String}  The curve name\n\t *  @private\n\t */\n\tprivate _getCurve(curve: InternalEnvelopeCurve, direction: EnvelopeDirection): EnvelopeCurve {\n\t\tif (isString(curve)) {\n\t\t\treturn curve;\n\t\t} else {\n\t\t\t// look up the name in the curves array\n\t\t\tlet curveName: EnvelopeCurveName;\n\t\t\tfor (curveName in EnvelopeCurves) {\n\t\t\t\tif (EnvelopeCurves[curveName][direction] === curve) {\n\t\t\t\t\treturn curveName;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// return the custom curve\n\t\t\treturn curve;\n\t\t}\n\t}\n\n\t/**\n\t *  Assign a the curve to the given name using the direction\n\t *  @param  name\n\t *  @param  direction In/Out\n\t *  @param  curve\n\t */\n\tprivate _setCurve(\n\t\tname: \"_attackCurve\" | \"_decayCurve\" | \"_releaseCurve\",\n\t\tdirection: EnvelopeDirection,\n\t\tcurve: EnvelopeCurve,\n\t): void {\n\t\t// check if it's a valid type\n\t\tif (isString(curve) && Reflect.has(EnvelopeCurves, curve)) {\n\t\t\tconst curveDef = EnvelopeCurves[curve];\n\t\t\tif (isObject(curveDef)) {\n\t\t\t\tif (name !== \"_decayCurve\") {\n\t\t\t\t\tthis[name] = curveDef[direction];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis[name] = curveDef;\n\t\t\t}\n\t\t} else if (isArray(curve) && name !== \"_decayCurve\") {\n\t\t\tthis[name] = curve;\n\t\t} else {\n\t\t\tthrow new Error(\"Envelope: invalid curve: \" + curve);\n\t\t}\n\t}\n\n\t/**\n\t * The shape of the attack.\n\t * Can be any of these strings:\n\t * * \"linear\"\n\t * * \"exponential\"\n\t * * \"sine\"\n\t * * \"cosine\"\n\t * * \"bounce\"\n\t * * \"ripple\"\n\t * * \"step\"\n\t *\n\t * Can also be an array which describes the curve. Values\n\t * in the array are evenly subdivided and linearly\n\t * interpolated over the duration of the attack.\n\t * @example\n\t * env.attackCurve = \"linear\";\n\t * @example\n\t * //can also be an array\n\t * env.attackCurve = [0, 0.2, 0.3, 0.4, 1]\n\t */\n\tget attackCurve(): EnvelopeCurve {\n\t\treturn this._getCurve(this._attackCurve, \"In\");\n\t}\n\tset attackCurve(curve) {\n\t\tthis._setCurve(\"_attackCurve\", \"In\", curve);\n\t}\n\n\t/**\n\t * The shape of the release. See the attack curve types.\n\t * @example\n\t * env.releaseCurve = \"linear\";\n\t */\n\tget releaseCurve(): EnvelopeCurve {\n\t\treturn this._getCurve(this._releaseCurve, \"Out\");\n\t}\n\tset releaseCurve(curve) {\n\t\tthis._setCurve(\"_releaseCurve\", \"Out\", curve);\n\t}\n\n\t/**\n\t * The shape of the decay either \"linear\" or \"exponential\"\n\t * @example\n\t * env.decayCurve = \"linear\";\n\t */\n\tget decayCurve(): BasicEnvelopeCurve {\n\t\treturn this._decayCurve;\n\t}\n\tset decayCurve(curve) {\n\t\tthis.assert([\"linear\", \"exponential\"].some(c => c === curve), `Invalid envelope curve: ${curve}`);\n\t\tthis._decayCurve = curve;\n\t}\n\n\t/**\n\t * Trigger the attack/decay portion of the ADSR envelope.\n\t * @param  time When the attack should start.\n\t * @param velocity The velocity of the envelope scales the vales.\n\t *                              number between 0-1\n\t * @example\n\t * //trigger the attack 0.5 seconds from now with a velocity of 0.2\n\t * env.triggerAttack(\"+0.5\", 0.2);\n\t */\n\ttriggerAttack(time?: Time, velocity: NormalRange = 1): this {\n\t\tthis.log(\"triggerAttack\", time, velocity);\n\t\ttime = this.toSeconds(time);\n\t\tconst originalAttack = this.toSeconds(this.attack);\n\t\tlet attack = originalAttack;\n\t\tconst decay = this.toSeconds(this.decay);\n\t\t// check if it's not a complete attack\n\t\tconst currentValue = this.getValueAtTime(time);\n\t\tif (currentValue > 0) {\n\t\t\t// subtract the current value from the attack time\n\t\t\tconst attackRate = 1 / attack;\n\t\t\tconst remainingDistance = 1 - currentValue;\n\t\t\t// the attack is now the remaining time\n\t\t\tattack = remainingDistance / attackRate;\n\t\t}\n\t\t// attack\n\t\tif (attack === 0) {\n\t\t\t// case where the attack time is 0 should set instantly\n\t\t\tthis._sig.setValueAtTime(velocity, time);\n\t\t} else if (this._attackCurve === \"linear\") {\n\t\t\tthis._sig.linearRampTo(velocity, attack, time);\n\t\t} else if (this._attackCurve === \"exponential\") {\n\t\t\tthis._sig.targetRampTo(velocity, attack, time);\n\t\t} else {\n\t\t\tthis._sig.cancelAndHoldAtTime(time);\n\t\t\tlet curve = this._attackCurve;\n\t\t\t// find the starting position in the curve\n\t\t\tfor (let i = 1; i < curve.length; i++) {\n\t\t\t\t// the starting index is between the two values\n\t\t\t\tif (curve[i - 1] <= currentValue && currentValue <= curve[i]) {\n\t\t\t\t\tcurve = this._attackCurve.slice(i);\n\t\t\t\t\t// the first index is the current value\n\t\t\t\t\tcurve[0] = currentValue;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._sig.setValueCurveAtTime(curve, time, attack, velocity);\n\t\t}\n\t\t// decay\n\t\tif (decay) {\n\t\t\tconst decayValue = velocity * this.sustain;\n\t\t\tconst decayStart = time + attack;\n\t\t\tthis.log(\"decay\", decayStart);\n\t\t\tif (this._decayCurve === \"linear\") {\n\t\t\t\tthis._sig.linearRampTo(decayValue, decay, decayStart + this.sampleTime);\n\t\t\t} else {\n\t\t\t\tthis.assert(this._decayCurve === \"exponential\",\n\t\t\t\t\t`decayCurve can only be \"linear\" or \"exponential\", got ${this._decayCurve}`);\n\t\t\t\tthis._sig.exponentialApproachValueAtTime(decayValue, decayStart, decay);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Triggers the release of the envelope.\n\t *  @param  time When the release portion of the envelope should start.\n\t *  @example\n\t *  //trigger release immediately\n\t *  env.triggerRelease();\n\t */\n\ttriggerRelease(time?: Time): this {\n\t\tthis.log(\"triggerRelease\", time);\n\t\ttime = this.toSeconds(time);\n\t\tconst currentValue = this.getValueAtTime(time);\n\t\tif (currentValue > 0) {\n\t\t\tconst release = this.toSeconds(this.release);\n\t\t\tif (this._releaseCurve === \"linear\") {\n\t\t\t\tthis._sig.linearRampTo(0, release, time);\n\t\t\t} else if (this._releaseCurve === \"exponential\") {\n\t\t\t\tthis._sig.targetRampTo(0, release, time);\n\t\t\t} else {\n\t\t\t\tthis.assert(isArray(this._releaseCurve), \"releaseCurve must be either 'linear', 'exponential' or an array\");\n\t\t\t\tthis._sig.cancelAndHoldAtTime(time);\n\t\t\t\tthis._sig.setValueCurveAtTime(this._releaseCurve, time, release, currentValue);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Get the scheduled value at the given time. This will\n\t *  return the unconverted (raw) value.\n\t */\n\tgetValueAtTime(time: Time): NormalRange {\n\t\treturn this._sig.getValueAtTime(time);\n\t}\n\n\t/**\n\t *  triggerAttackRelease is shorthand for triggerAttack, then waiting\n\t *  some duration, then triggerRelease.\n\t *  @param duration The duration of the sustain.\n\t *  @param time When the attack should be triggered.\n\t *  @param velocity The velocity of the envelope.\n\t *  @example\n\t * //trigger the attack and then the release after 0.6 seconds.\n\t * env.triggerAttackRelease(0.6);\n\t */\n\ttriggerAttackRelease(duration: Time, time?: Time, velocity: NormalRange = 1): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis.triggerAttack(time, velocity);\n\t\tthis.triggerRelease(time + this.toSeconds(duration));\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Cancels all scheduled envelope changes after the given time.\n\t */\n\tcancel(after?: Time): this {\n\t\tthis._sig.cancelScheduledValues(this.toSeconds(after));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Connect the envelope to a destination node.\n\t */\n\tconnect(destination: InputNode, outputNumber: number = 0, inputNumber: number = 0): this {\n\t\tconnectSignal(this, destination, outputNumber, inputNumber);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._sig.dispose();\n\t\treturn this;\n\t}\n}\n\ninterface EnvelopeCurveObject {\n\tIn: number[];\n\tOut: number[];\n}\n\ntype EnvelopeDirection = keyof EnvelopeCurveObject;\n\ninterface EnvelopeCurveMap {\n\tlinear: \"linear\";\n\texponential: \"exponential\";\n\tbounce: EnvelopeCurveObject;\n\tcosine: EnvelopeCurveObject;\n\tsine: EnvelopeCurveObject;\n\tripple: EnvelopeCurveObject;\n\tstep: EnvelopeCurveObject;\n}\n\ntype EnvelopeCurveName =  keyof EnvelopeCurveMap;\n\n/**\n *  Generate some complex envelope curves.\n */\n// tslint:disable-next-line: variable-name\nconst EnvelopeCurves: EnvelopeCurveMap = (() => {\n\n\tconst curveLen = 128;\n\n\tlet i: number;\n\tlet k: number;\n\n\t// cosine curve\n\tconst cosineCurve: number[] = [];\n\tfor (i = 0; i < curveLen; i++) {\n\t\tcosineCurve[i] = Math.sin((i / (curveLen - 1)) * (Math.PI / 2));\n\t}\n\n\t// ripple curve\n\tconst rippleCurve: number[] = [];\n\tconst rippleCurveFreq = 6.4;\n\tfor (i = 0; i < curveLen - 1; i++) {\n\t\tk = (i / (curveLen - 1));\n\t\tconst sineWave = Math.sin(k * (Math.PI * 2) * rippleCurveFreq - Math.PI / 2) + 1;\n\t\trippleCurve[i] = sineWave / 10 + k * 0.83;\n\t}\n\trippleCurve[curveLen - 1] = 1;\n\n\t// stairs curve\n\tconst stairsCurve: number[] = [];\n\tconst steps = 5;\n\tfor (i = 0; i < curveLen; i++) {\n\t\tstairsCurve[i] = Math.ceil((i / (curveLen - 1)) * steps) / steps;\n\t}\n\n\t// in-out easing curve\n\tconst sineCurve: number[] = [];\n\tfor (i = 0; i < curveLen; i++) {\n\t\tk = i / (curveLen - 1);\n\t\tsineCurve[i] = 0.5 * (1 - Math.cos(Math.PI * k));\n\t}\n\n\t// a bounce curve\n\tconst bounceCurve: number[] = [];\n\tfor (i = 0; i < curveLen; i++) {\n\t\tk = i / (curveLen - 1);\n\t\tconst freq = Math.pow(k, 3) * 4 + 0.2;\n\t\tconst val = Math.cos(freq * Math.PI * 2 * k);\n\t\tbounceCurve[i] = Math.abs(val * (1 - k));\n\t}\n\n\t/**\n\t *  Invert a value curve to make it work for the release\n\t */\n\tfunction invertCurve(curve: number[]): number[] {\n\t\tconst out = new Array(curve.length);\n\t\tfor (let j = 0; j < curve.length; j++) {\n\t\t\tout[j] = 1 - curve[j];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t *  reverse the curve\n\t */\n\tfunction reverseCurve(curve: number[]): number[] {\n\t\treturn curve.slice(0).reverse();\n\t}\n\n\t/**\n\t *  attack and release curve arrays\n\t */\n\treturn {\n\t\tbounce : {\n\t\t\tIn : invertCurve(bounceCurve),\n\t\t\tOut : bounceCurve,\n\t\t},\n\t\tcosine : {\n\t\t\tIn : cosineCurve,\n\t\t\tOut : reverseCurve(cosineCurve),\n\t\t},\n\t\texponential : \"exponential\" as \"exponential\",\n\t\tlinear : \"linear\" as \"linear\",\n\t\tripple : {\n\t\t\tIn : rippleCurve,\n\t\t\tOut : invertCurve(rippleCurve),\n\t\t},\n\t\tsine : {\n\t\t\tIn : sineCurve,\n\t\t\tOut : invertCurve(sineCurve),\n\t\t},\n\t\tstep : {\n\t\t\tIn : stairsCurve,\n\t\t\tOut : invertCurve(stairsCurve),\n\t\t},\n\t};\n})();\n","import { Gain } from \"../../core/context/Gain\";\nimport { NormalRange, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Envelope, EnvelopeOptions } from \"./Envelope\";\n\n/**\n * AmplitudeEnvelope is a Tone.Envelope connected to a gain node.\n * Unlike Tone.Envelope, which outputs the envelope's value, AmplitudeEnvelope accepts\n * an audio signal as the input and will apply the envelope to the amplitude\n * of the signal.\n * Read more about ADSR Envelopes on [Wikipedia](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope).\n *\n * @param attack The amount of time it takes for the envelope to go from 0 to it's maximum value.\n * @param decay\tThe period of time after the attack that it takes for the envelope\n *                       \tto fall to the sustain value. Value must be greater than 0.\n * @param sustain\tThe percent of the maximum value that the envelope rests at until\n *                                \tthe release is triggered.\n * @param release\tThe amount of time after the release is triggered it takes to reach 0.\n *                         \tValue must be greater than 0.\n *  @example\n * var ampEnv = new AmplitudeEnvelope({\n * \t\"attack\": 0.1,\n * \t\"decay\": 0.2,\n * \t\"sustain\": 1.0,\n * \t\"release\": 0.8\n * }).toDestination();\n * //create an oscillator and connect it\n * var osc = new Tone.Oscillator().connect(ampEnv).start();\n * //trigger the envelopes attack and release \"8t\" apart\n * ampEnv.triggerAttackRelease(\"8t\");\n */\nexport class AmplitudeEnvelope extends Envelope {\n\n\tname = \"AmplitudeEnvelope\";\n\n\tprivate _gainNode: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\toutput: Gain = this._gainNode;\n\tinput: Gain = this._gainNode;\n\n\tconstructor(attack?: Time, decay?: Time, sustain?: NormalRange, release?: Time);\n\tconstructor(options?: Partial<EnvelopeOptions>)\n\tconstructor() {\n\t\tsuper(optionsFromArguments(AmplitudeEnvelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]));\n\t\tthis._sig.connect(this._gainNode.gain);\n\t\tthis.output = this._gainNode;\n\t\tthis.input = this._gainNode;\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._gainNode.dispose();\n\t\treturn this;\n\t}\n}\n","import { Volume } from \"../component/channel/Volume\";\nimport { Param } from \"../core/context/Param\";\nimport { OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { Decibels, Frequency, NormalRange, Time } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\n\nexport interface InstrumentOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n}\n\n/**\n *  Base-class for all instruments\n */\nexport abstract class Instrument<Options extends InstrumentOptions> extends ToneAudioNode<Options> {\n\n\t/**\n\t *  The output and volume triming node\n\t */\n\tprivate _volume: Volume;\n\toutput: OutputNode;\n\n\t/**\n\t * The instrument only has an output\n\t */\n\tinput: undefined;\n\n\t/**\n\t * The volume of the output in decibels.\n\t * @example\n\t * source.volume.value = -6;\n\t */\n\tvolume: Param<Decibels>;\n\n\t/**\n\t * Keep track of all events scheduled to the transport\n\t * when the instrument is 'synced'\n\t */\n\tprivate _scheduledEvents: number[] = [];\n\n\t/**\n\t * If the instrument is currently synced\n\t */\n\tprivate _synced: boolean = false;\n\n\tconstructor(options?: Partial<InstrumentOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Instrument.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Instrument.getDefaults(), arguments);\n\n\t\tthis._volume = this.output = new Volume({\n\t\t\tcontext: this.context,\n\t\t\tvolume: options.volume,\n\t\t});\n\t\tthis.volume = this._volume.volume;\n\t\treadOnly(this, \"volume\");\n\t}\n\n\tstatic getDefaults(): InstrumentOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Sync the instrument to the Transport. All subsequent calls of\n\t * [triggerAttack](#triggerattack) and [triggerRelease](#triggerrelease)\n\t * will be scheduled along the transport.\n\t * @example\n\t * instrument.sync()\n\t * //schedule 3 notes when the transport first starts\n\t * instrument.triggerAttackRelease('C4', '8n', 0)\n\t * instrument.triggerAttackRelease('E4', '8n', '8n')\n\t * instrument.triggerAttackRelease('G4', '8n', '4n')\n\t * //start the transport to hear the notes\n\t * Transport.start()\n\t * @returns {Instrument} this\n\t */\n\tsync(): this {\n\t\tif (!this._synced) {\n\t\t\tthis._synced = true;\n\t\t\tthis._syncMethod(\"triggerAttack\", 1);\n\t\t\tthis._syncMethod(\"triggerRelease\", 0);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Wrap the given method so that it can be synchronized\n\t * @param method Which method to wrap and sync\n\t * @param  timePosition What position the time argument appears in\n\t */\n\tprotected _syncMethod(method: string, timePosition: number): void {\n\t\tconst originalMethod = this[\"_original_\" + method] = this[method];\n\t\tthis[method] = (...args: any[]) => {\n\t\t\tconst time = args[timePosition];\n\t\t\tconst id = this.context.transport.schedule((t) => {\n\t\t\t\targs[timePosition] = t;\n\t\t\t\toriginalMethod.apply(this, args);\n\t\t\t}, time);\n\t\t\tthis._scheduledEvents.push(id);\n\t\t};\n\t}\n\n\t/**\n\t * Unsync the instrument from the Transport\n\t */\n\tunsync(): this {\n\t\tthis._scheduledEvents.forEach(id => this.context.transport.clear(id));\n\t\tthis._scheduledEvents = [];\n\t\tif (this._synced) {\n\t\t\tthis._synced = false;\n\t\t\tthis.triggerAttack = this._original_triggerAttack;\n\t\t\tthis.triggerRelease = this._original_triggerRelease;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Trigger the attack and then the release after the duration.\n\t *  @param  note     The note to trigger.\n\t *  @param  duration How long the note should be held for before\n\t *                          triggering the release. This value must be greater than 0.\n\t *  @param time  When the note should be triggered.\n\t *  @param  velocity The velocity the note should be triggered at.\n\t *  @example\n\t * //trigger \"C4\" for the duration of an 8th note\n\t * synth.triggerAttackRelease(\"C4\", \"8n\");\n\t */\n\ttriggerAttackRelease(note: Frequency, duration: Time, time?: Time, velocity?: NormalRange): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst computedDuration = this.toSeconds(duration);\n\t\tthis.triggerAttack(note, computedTime, velocity);\n\t\tthis.triggerRelease(computedTime + computedDuration);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Start the instrument's note.\n\t * @param note the note to trigger\n\t * @param time the time to trigger the ntoe\n\t * @param velocity the velocity to trigger the note (betwee 0-1)\n\t */\n\tabstract triggerAttack(note: Frequency, time?: Time, velocity?: NormalRange): this;\n\t// tslint:disable-next-line: variable-name\n\tprivate _original_triggerAttack = this.triggerAttack;\n\n\t/**\n\t * Trigger the release phase of the current note.\n\t *  @param time when to trigger the release\n\t */\n\tabstract triggerRelease(...args: any[]): this;\n\t// tslint:disable-next-line: variable-name\n\tprivate _original_triggerRelease = this.triggerRelease;\n\n\t/**\n\t *  clean up\n\t *  @returns {Instrument} this\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._volume.dispose();\n\t\tthis.unsync();\n\t\tthis._scheduledEvents = [];\n\t\treturn this;\n\t}\n}\n","import { Envelope } from \"../component/envelope/Envelope\";\nimport { FrequencyClass } from \"../core/type/Frequency\";\nimport { Cents, Frequency, NormalRange, Seconds, Time } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { Instrument, InstrumentOptions } from \"../instrument/Instrument\";\nimport { Signal } from \"../signal/Signal\";\n\ntype onSilenceCallback = (instrument: Monophonic<any>) => void;\n\nexport interface MonophonicOptions extends InstrumentOptions {\n\tportamento: Seconds;\n\tonsilence: onSilenceCallback;\n}\n\n/**\n * Abstract base class for other monophonic instruments to extend.\n */\nexport abstract class Monophonic<Options extends MonophonicOptions> extends Instrument<Options> {\n\n\t/**\n\t *  The glide time between notes.\n\t */\n\tportamento: Seconds;\n\n\t/**\n\t * Invoked when the release has finished and the output is silent.\n\t */\n\tonsilence: onSilenceCallback;\n\n\t/**\n\t * The instrument's envelope\n\t */\n\tabstract envelope: Envelope;\n\n\t/**\n\t * The instrument's frequency signal.\n\t */\n\tabstract readonly frequency: Signal<Frequency>;\n\n\t/**\n\t * The instrument's detune control signal.\n\t */\n\tabstract readonly detune: Signal<Cents>;\n\n\tconstructor(options?: Partial<MonophonicOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Monophonic.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Monophonic.getDefaults(), arguments);\n\n\t\tthis.portamento = options.portamento;\n\t\tthis.onsilence = options.onsilence;\n\t}\n\n\tstatic getDefaults(): MonophonicOptions {\n\t\treturn Object.assign(Instrument.getDefaults(), {\n\t\t\tonsilence: noOp,\n\t\t\tportamento: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Trigger the attack of the note optionally with a given velocity.\n\t * @param  note The note to trigger.\n\t * @param  time When the note should start.\n\t * @param  velocity The velocity scaler determines how \"loud\" the note will be triggered.\n\t * @example\n\t * synth.triggerAttack(\"C4\");\n\t * @example\n\t * //trigger the note a half second from now at half velocity\n\t * synth.triggerAttack(\"C4\", \"+0.5\", 0.5);\n\t */\n\ttriggerAttack(note: Frequency | FrequencyClass, time?: Time, velocity: NormalRange = 1): this {\n\t\tthis.log(\"triggerAttack\", note, time, velocity);\n\t\tconst seconds = this.toSeconds(time);\n\t\tthis._triggerEnvelopeAttack(seconds, velocity);\n\t\tthis.setNote(note, seconds);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Trigger the release portion of the envelope\n\t * @param  time If no time is given, the release happens immediatly\n\t * @example\n\t * synth.triggerRelease();\n\t */\n\ttriggerRelease(time?: Time): this {\n\t\tthis.log(\"triggerRelease\", time);\n\t\tconst seconds = this.toSeconds(time);\n\t\tthis._triggerEnvelopeRelease(seconds);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Internal method which starts the envelope attack\n\t */\n\tprotected abstract _triggerEnvelopeAttack(time: Seconds, velocity: NormalRange): void;\n\n\t/**\n\t * Internal method which starts the envelope release\n\t */\n\tprotected abstract _triggerEnvelopeRelease(time: Seconds): void;\n\n\t/**\n\t * Get the level of the output at the given time. Measures\n\t * the envelope(s) value at the time.\n\t * @param time The time to query the envelope value\n\t * @return The output level between 0-1\n\t */\n\tgetLevelAtTime(time: Time): NormalRange {\n\t\ttime = this.toSeconds(time);\n\t\treturn this.envelope.getValueAtTime(time);\n\t}\n\n\t/**\n\t * Set the note at the given time. If no time is given, the note\n\t * will set immediately.\n\t * @param note The note to change to.\n\t * @param  time The time when the note should be set.\n\t * @example\n\t * //change to F#6 in one quarter note from now.\n\t * synth.setNote(\"F#6\", \"+4n\");\n\t * @example\n\t * //change to Bb4 right now\n\t * synth.setNote(\"Bb4\");\n\t */\n\tsetNote(note: Frequency | FrequencyClass, time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst computedFrequency = note instanceof FrequencyClass ? note.toFrequency() : note;\n\t\tif (this.portamento > 0 && this.getLevelAtTime(computedTime) > 0.05) {\n\t\t\tconst portTime = this.toSeconds(this.portamento);\n\t\t\tthis.frequency.exponentialRampTo(computedFrequency, portTime, computedTime);\n\t\t} else {\n\t\t\tthis.frequency.setValueAtTime(computedFrequency, computedTime);\n\t\t}\n\t\treturn this;\n\t}\n}\n","import { AmplitudeEnvelope } from \"../component/envelope/AmplitudeEnvelope\";\nimport { Envelope, EnvelopeOptions } from \"../component/envelope/Envelope\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { Cents, Frequency, Seconds } from \"../core/type/Units\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { RecursivePartial } from \"../core/util/Interface\";\nimport { Signal } from \"../signal/Signal\";\nimport { OmniOscillator } from \"../source/oscillator/OmniOscillator\";\nimport { OmniOscillatorConstructorOptions, OmniOscillatorSynthOptions } from \"../source/oscillator/OscillatorInterface\";\nimport { Source, SourceOptions } from \"../source/Source\";\nimport { Monophonic, MonophonicOptions } from \"./Monophonic\";\n\nexport interface SynthOptions extends MonophonicOptions {\n\toscillator: OmniOscillatorSynthOptions;\n\tenvelope: Omit<EnvelopeOptions, keyof ToneAudioNodeOptions>;\n}\n\n/**\n * Synth is composed simply of a {@link OmniOscillator} routed through an {@link AmplitudeEnvelope}.\n * ```\n * +----------------+   +-------------------+\n * | OmniOscillator +>--> AmplitudeEnvelope +>--> Output\n * +----------------+   +-------------------+\n * ```\n * @param options the options available for the synth.\n * @example\n * var synth = new Synth().toDestination();\n * synth.triggerAttackRelease(\"C4\", \"8n\");\n */\nexport class Synth<Options extends SynthOptions = SynthOptions> extends Monophonic<Options> {\n\n\treadonly name: string = \"Synth\";\n\n\t/**\n\t *  The oscillator.\n\t */\n\treadonly oscillator: OmniOscillator<any>;\n\n\t/**\n\t * The frequency signal\n\t */\n\treadonly frequency: Signal<Frequency>;\n\n\t/**\n\t * The detune signal\n\t */\n\treadonly detune: Signal<Cents>;\n\n\t/**\n\t * The envelope\n\t */\n\treadonly envelope: AmplitudeEnvelope;\n\n\tconstructor(options?: RecursivePartial<SynthOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Synth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Synth.getDefaults(), arguments);\n\n\t\tthis.oscillator = new OmniOscillator(Object.assign({\n\t\t\tcontext: this.context,\n\t\t\tonstop: () => this.onsilence(this),\n\t\t}, options.oscillator));\n\n\t\tthis.frequency = this.oscillator.frequency;\n\t\tthis.detune = this.oscillator.detune;\n\n\t\tthis.envelope = new AmplitudeEnvelope(Object.assign({\n\t\t\tcontext: this.context,\n\t\t}, options.envelope));\n\n\t\t// connect the oscillators to the output\n\t\tthis.oscillator.chain(this.envelope, this.output);\n\t\treadOnly(this, [\"oscillator\", \"frequency\", \"detune\", \"envelope\"]);\n\t}\n\n\tstatic getDefaults(): SynthOptions {\n\t\treturn Object.assign(Monophonic.getDefaults(), {\n\t\t\tenvelope: Object.assign(\n\t\t\t\tomitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())),\n\t\t\t\t{\n\t\t\t\t\tattack : 0.005,\n\t\t\t\t\tdecay : 0.1,\n\t\t\t\t\trelease : 1,\n\t\t\t\t\tsustain : 0.3,\n\t\t\t\t},\n\t\t\t),\n\t\t\toscillator: Object.assign(\n\t\t\t\tomitFromObject(OmniOscillator.getDefaults(), [...Object.keys(Source.getDefaults()), \"frequency\", \"detune\"]),\n\t\t\t\t{\n\t\t\t\t\ttype: \"triangle\",\n\t\t\t\t},\n\t\t\t),\n\t\t});\n\t}\n\n\t/**\n\t *  start the attack portion of the envelope\n\t *  @param time the time the attack should start\n\t *  @param velocity the velocity of the note (0-1)\n\t */\n\tprotected _triggerEnvelopeAttack(time: Seconds, velocity: number): void {\n\t\t// the envelopes\n\t\tthis.envelope.triggerAttack(time, velocity);\n\t\tthis.oscillator.start(time);\n\t\t// if there is no release portion, stop the oscillator\n\t\tif (this.envelope.sustain === 0) {\n\t\t\tconst computedAttack = this.toSeconds(this.envelope.attack);\n\t\t\tconst computedDecay = this.toSeconds(this.envelope.decay);\n\t\t\tthis.oscillator.stop(time + computedAttack + computedDecay);\n\t\t}\n\t}\n\n\t/**\n\t *  start the release portion of the envelope\n\t *  @param time the time the release should start\n\t */\n\tprotected _triggerEnvelopeRelease(time: Seconds): void {\n\t\tthis.envelope.triggerRelease(time);\n\t\tthis.oscillator.stop(time + this.toSeconds(this.envelope.release));\n\t}\n\n\t/**\n\t *  clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.oscillator.dispose();\n\t\tthis.envelope.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioBuffer } from \"../core/context/ToneAudioBuffer\";\nimport { ToneAudioBuffers } from \"../core/context/ToneAudioBuffers\";\nimport { intervalToFrequencyRatio } from \"../core/type/Conversions\";\nimport { FrequencyClass } from \"../core/type/Frequency\";\nimport { Frequency, Interval, MidiNote, NormalRange, Note, Time } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { isArray, isNote, isNumber, isString } from \"../core/util/TypeCheck\";\nimport { Instrument, InstrumentOptions } from \"../instrument/Instrument\";\nimport { ToneBufferSource, ToneBufferSourceCurve } from \"../source/buffer/BufferSource\";\n\ninterface SamplesMap {\n\t[note: string]: ToneAudioBuffer | AudioBuffer | string;\n\t[midi: number]: ToneAudioBuffer | AudioBuffer | string;\n}\n\ninterface SamplerOptions extends InstrumentOptions {\n\tattack: Time;\n\trelease: Time;\n\tonload: () => void;\n\tbaseUrl: string;\n\tcurve: ToneBufferSourceCurve;\n\turls: SamplesMap;\n}\n\n/**\n * Pass in an object which maps the note's pitch or midi value to the url,\n * then you can trigger the attack and release of that note like other instruments.\n * By automatically repitching the samples, it is possible to play pitches which\n * were not explicitly included which can save loading time.\n *\n * For sample or buffer playback where repitching is not necessary,\n * use {@link Player}.\n * @param samples An object of samples mapping either Midi\n *                         Note Numbers or Scientific Pitch Notation\n *                         to the url of that sample.\n * @param onload The callback to invoke when all of the samples are loaded.\n * @param baseUrl The root URL of all of the samples, which is prepended to all the URLs.\n * @example\n * var sampler = new Sampler({\n * \t\"C3\" : \"path/to/C3.mp3\",\n * \t\"D#3\" : \"path/to/Dsharp3.mp3\",\n * \t\"F#3\" : \"path/to/Fsharp3.mp3\",\n * \t\"A3\" : \"path/to/A3.mp3\",\n * }, function(){\n * \t//sampler will repitch the closest sample\n * \tsampler.triggerAttack(\"D3\")\n * })\n */\nexport class Sampler extends Instrument<SamplerOptions> {\n\n\tname = \"Sampler\";\n\n\t/**\n\t * The stored and loaded buffers\n\t * @type {Tone.Buffers}\n\t * @private\n\t */\n\tprivate _buffers: ToneAudioBuffers;\n\n\t/**\n\t * The object of all currently playing BufferSources\n\t */\n\tprivate _activeSources: Map<MidiNote, ToneBufferSource[]> = new Map();\n\n\t/**\n\t * The envelope applied to the beginning of the sample.\n\t */\n\tattack: Time;\n\n\t/**\n\t * The envelope applied to the end of the envelope.\n\t */\n\trelease: Time;\n\n\t/**\n\t *  The shape of the attack/release curve.\n\t *  Either \"linear\" or \"exponential\"\n\t */\n\tcurve: ToneBufferSourceCurve;\n\n\tconstructor(options?: Partial<SamplerOptions>);\n\tconstructor(samples?: SamplesMap, options?: Partial<Omit<SamplerOptions, \"urls\">>);\n\tconstructor(samples?: SamplesMap, onload?: () => void, baseUrl?: string);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Sampler.getDefaults(), arguments, [\"urls\", \"onload\", \"baseUrl\"], \"urls\"));\n\t\tconst options = optionsFromArguments(Sampler.getDefaults(), arguments, [\"urls\", \"onload\", \"baseUrl\"], \"urls\");\n\n\t\tconst urlMap = {};\n\t\tObject.keys(options.urls).forEach((note) => {\n\t\t\tconst noteNumber = parseInt(note, 10);\n\t\t\tthis.assert(isNote(note)\n\t\t\t\t|| (isNumber(noteNumber) && isFinite(noteNumber)), `url key is neither a note or midi pitch: ${note}`);\n\t\t\tif (isNote(note)) {\n\t\t\t\t// convert the note name to MIDI\n\t\t\t\tconst mid = new FrequencyClass(this.context, note).toMidi();\n\t\t\t\turlMap[mid] = options.urls[note];\n\t\t\t} else if (isNumber(noteNumber) && isFinite(noteNumber)) {\n\t\t\t\t// otherwise if it's numbers assume it's midi\n\t\t\t\turlMap[noteNumber] = options.urls[noteNumber];\n\t\t\t}\n\t\t});\n\n\t\tthis._buffers = new ToneAudioBuffers(urlMap, options.onload, options.baseUrl);\n\t\tthis.attack = options.attack;\n\t\tthis.release = options.release;\n\t\tthis.curve = options.curve;\n\t}\n\n\tstatic getDefaults(): SamplerOptions {\n\t\treturn Object.assign(Instrument.getDefaults(), {\n\t\t\tattack : 0,\n\t\t\tbaseUrl : \"\",\n\t\t\tcurve : \"exponential\" as \"exponential\",\n\t\t\tonload : noOp,\n\t\t\trelease : 0.1,\n\t\t\turls: {},\n\t\t});\n\t}\n\n\t/**\n\t * Returns the difference in steps between the given midi note at the closets sample.\n\t */\n\tprivate _findClosest(midi: MidiNote): Interval {\n\t\t// searches within 8 octaves of the given midi note\n\t\tconst MAX_INTERVAL = 96;\n\t\tlet interval = 0;\n\t\twhile (interval < MAX_INTERVAL) {\n\t\t\t// check above and below\n\t\t\tif (this._buffers.has(midi + interval)) {\n\t\t\t\treturn -interval;\n\t\t\t} else if (this._buffers.has(midi - interval)) {\n\t\t\t\treturn interval;\n\t\t\t}\n\t\t\tinterval++;\n\t\t}\n\t\tthrow new Error(`No available buffers for note: ${midi}`);\n\t}\n\n\t/**\n\t * @param  notes\tThe note to play, or an array of notes.\n\t * @param  time     When to play the note\n\t * @param  velocity The velocity to play the sample back.\n\t */\n\ttriggerAttack(notes: Frequency | Frequency[], time?: Time, velocity: NormalRange = 1): this {\n\t\tthis.log(\"triggerAttack\", notes, time, velocity);\n\t\tif (!Array.isArray(notes)) {\n\t\t\tnotes = [notes];\n\t\t}\n\t\tnotes.forEach(note => {\n\t\t\tconst midi = new FrequencyClass(this.context, note).toMidi();\n\t\t\t// find the closest note pitch\n\t\t\tconst difference = this._findClosest(midi);\n\t\t\tconst closestNote = midi - difference;\n\t\t\tconst buffer = this._buffers.get(closestNote);\n\t\t\tconst playbackRate = intervalToFrequencyRatio(difference);\n\t\t\t// play that note\n\t\t\tconst source = new ToneBufferSource({\n\t\t\t\tbuffer,\n\t\t\t\tcontext: this.context,\n\t\t\t\tcurve : this.curve,\n\t\t\t\tfadeIn : this.attack,\n\t\t\t\tfadeOut : this.release,\n\t\t\t\tplaybackRate,\n\t\t\t}).connect(this.output);\n\t\t\tsource.start(time, 0, buffer.duration / playbackRate, velocity);\n\t\t\t// add it to the active sources\n\t\t\tif (!isArray(this._activeSources.get(midi))) {\n\t\t\t\tthis._activeSources.set(midi, []);\n\t\t\t}\n\t\t\t(this._activeSources.get(midi) as ToneBufferSource[]).push(source);\n\n\t\t\t// remove it when it's done\n\t\t\tsource.onended = () => {\n\t\t\t\tif (this._activeSources && this._activeSources.has(midi)) {\n\t\t\t\t\tconst sources = this._activeSources.get(midi) as ToneBufferSource[];\n\t\t\t\t\tconst index = sources.indexOf(source);\n\t\t\t\t\tif (index !== -1) {\n\t\t\t\t\t\tsources.splice(index, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * @param  notes\tThe note to release, or an array of notes.\n\t * @param  time     \tWhen to release the note.\n\t */\n\ttriggerRelease(notes: Frequency | Frequency[], time?: Time): this {\n\t\tthis.log(\"triggerRelease\", notes, time);\n\t\tif (!Array.isArray(notes)) {\n\t\t\tnotes = [notes];\n\t\t}\n\t\tnotes.forEach(note => {\n\t\t\tconst midi = new FrequencyClass(this.context, note).toMidi();\n\t\t\t// find the note\n\t\t\tif (this._activeSources.has(midi) && (this._activeSources.get(midi) as ToneBufferSource[]).length) {\n\t\t\t\tconst sources = this._activeSources.get(midi) as ToneBufferSource[];\n\t\t\t\ttime = this.toSeconds(time);\n\t\t\t\tsources.forEach(source => {\n\t\t\t\t\tsource.stop(time);\n\t\t\t\t});\n\t\t\t\tthis._activeSources.set(midi, []);\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Release all currently active notes.\n\t * @param  time     \tWhen to release the notes.\n\t */\n\treleaseAll(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._activeSources.forEach(sources => {\n\t\t\twhile (sources.length) {\n\t\t\t\tconst source = sources.shift() as ToneBufferSource;\n\t\t\t\tsource.stop(computedTime);\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sync the instrument to the Transport. All subsequent calls of\n\t * [triggerAttack](#triggerattack) and [triggerRelease](#triggerrelease)\n\t * will be scheduled along the transport.\n\t * @example\n\t * synth.sync()\n\t * //schedule 3 notes when the transport first starts\n\t * synth.triggerAttackRelease('8n', 0)\n\t * synth.triggerAttackRelease('8n', '8n')\n\t * synth.triggerAttackRelease('8n', '4n')\n\t * //start the transport to hear the notes\n\t * Transport.start()\n\t * @returns {Tone.Instrument} this\n\t */\n\tsync(): this {\n\t\tthis._syncMethod(\"triggerAttack\", 1);\n\t\tthis._syncMethod(\"triggerRelease\", 1);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Invoke the attack phase, then after the duration, invoke the release.\n\t * @param  notes\tThe note to play and release, or an array of notes.\n\t * @param  duration The time the note should be held\n\t * @param  time     When to start the attack\n\t * @param  velocity The velocity of the attack\n\t */\n\ttriggerAttackRelease(\n\t\tnotes: Frequency[] | Frequency,\n\t\tduration: Time | Time[],\n\t\ttime?: Time,\n\t\tvelocity: NormalRange = 1,\n\t): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis.triggerAttack(notes, computedTime, velocity);\n\t\tif (isArray(duration)) {\n\t\t\tthis.assert(isArray(notes), \"notes must be an array when duration is array\");\n\t\t\t(notes as Frequency[]).forEach((note, index) => {\n\t\t\t\tconst d = duration[Math.min(index, duration.length - 1)];\n\t\t\t\tthis.triggerRelease(note, computedTime + this.toSeconds(d));\n\t\t\t});\n\t\t} else {\n\t\t\tthis.triggerRelease(notes, computedTime + this.toSeconds(duration));\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a note to the sampler.\n\t * @param  note      The buffer's pitch.\n\t * @param  url  Either the url of the bufer, or a buffer which will be added with the given name.\n\t * @param  callback  The callback to invoke when the url is loaded.\n\t */\n\tadd(note: Note | MidiNote, url: string | ToneAudioBuffer | AudioBuffer, callback?: () => void): this {\n\t\tthis.assert(isNote(note) || isFinite(note), `note must be a pitch or midi: ${note}`);\n\t\tif (isNote(note)) {\n\t\t\t// convert the note name to MIDI\n\t\t\tconst mid = new FrequencyClass(this.context, note).toMidi();\n\t\t\tthis._buffers.add(mid, url, callback);\n\t\t} else {\n\t\t\t// otherwise if it's numbers assume it's midi\n\t\t\tthis._buffers.add(note, url, callback);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * If the buffers are loaded or not\n\t */\n\tget loaded(): boolean {\n\t\treturn this._buffers.loaded;\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._buffers.dispose();\n\t\tthis._activeSources.forEach(sources => {\n\t\t\tsources.forEach(source => source.dispose());\n\t\t});\n\t\tthis._activeSources.clear();\n\t\treturn this;\n\t}\n}\n","import { MidiClass } from \"../core/type/Midi\";\nimport { Frequency, MidiNote, NormalRange, Seconds, Time } from \"../core/type/Units\";\nimport { deepMerge, optionsFromArguments } from \"../core/util/Defaults\";\nimport { RecursivePartial } from \"../core/util/Interface\";\nimport { isArray } from \"../core/util/TypeCheck\";\nimport { Instrument, InstrumentOptions } from \"./Instrument\";\nimport { MembraneSynth, MembraneSynthOptions } from \"./MembraneSynth\";\nimport { Monophonic } from \"./Monophonic\";\nimport { Synth, SynthOptions } from \"./Synth\";\n\ntype VoiceConstructor<V> = {\n\tgetDefaults: () => VoiceOptions<V>,\n} & (new (...args: any[]) => V);\n\ntype OmitMonophonicOptions<T> = Omit<T, \"context\" | \"onsilence\">;\n\ntype VoiceOptions<T> =\n\tT extends Synth ? SynthOptions :\n\tT extends MembraneSynth ? MembraneSynthOptions :\n\tnever;\n\n/**\n * The settable synth options. excludes monophonic options.\n */\ntype PartialVoiceOptions<T> = RecursivePartial<\n\tOmitMonophonicOptions<\n\t\tVoiceOptions<T>\n\t>\n>;\n\ninterface PolySynthOptions<Voice> extends InstrumentOptions {\n\tpolyphony: number;\n\tvoice: VoiceConstructor<Voice>;\n\toptions: PartialVoiceOptions<Voice>;\n}\n\n/**\n * PolySynth handles voice creation and allocation for any\n * instruments passed in as the second paramter. PolySynth is\n * not a synthesizer by itself, it merely manages voices of\n * one of the other types of synths, allowing any of the\n * monophonic synthesizers to be polyphonic.\n *\n *  @param polyphony The maximum polyphony of the synth\n *  @param voice The constructor of the voices\n *  @param options\tThe options object to set the synth voice\n *  @example\n * //a polysynth composed of 6 Voices of Synth\n * var synth = new PolySynth(6, Tone.Synth, {\n *   oscillator : {\n * \t\ttype : \"square\"\n * \t}\n * }).toMaster();\n * //set the attributes using the set interface\n * synth.set(\"detune\", -1200);\n * //play a chord\n * synth.triggerAttackRelease([\"C4\", \"E4\", \"A4\"], \"4n\");\n */\nexport class PolySynth<Voice extends Monophonic<any> = Synth> extends Instrument<VoiceOptions<Voice>> {\n\n\treadonly name = \"PolySynth\";\n\n\t/**\n\t * The voices which are not currently in use\n\t */\n\tprivate _availableVoices: Voice[] = [];\n\n\t/**\n\t * The currently active voices\n\t */\n\tprivate _activeVoices: Array<{midi: MidiNote, voice: Voice}> = [];\n\n\t/**\n\t * All of the allocated voices for this synth.\n\t */\n\tprivate _voices: Voice[] = [];\n\n\t/**\n\t * The options that are set on the synth.\n\t */\n\tprivate options: VoiceOptions<Voice>;\n\n\t/**\n\t * The polyphony limit.\n\t */\n\tpolyphony: number;\n\n\tprivate readonly voice: VoiceConstructor<Voice>;\n\n\tconstructor(\n\t\tpolyphony?: number,\n\t\tvoice?: VoiceConstructor<Voice>,\n\t\toptions?: PartialVoiceOptions<Voice>,\n\t);\n\tconstructor(options?: Partial<PolySynthOptions<Voice>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(PolySynth.getDefaults(), arguments, [\"polyphony\", \"voice\", \"options\"]));\n\t\tconst options = optionsFromArguments(PolySynth.getDefaults(), arguments, [\"polyphony\", \"voice\", \"options\"]);\n\n\t\tconst defaults = options.voice.getDefaults();\n\t\tthis.options = Object.assign(defaults, options.options) as VoiceOptions<Voice>;\n\t\tthis.voice = options.voice as unknown as VoiceConstructor<Voice>;\n\t\tthis.polyphony = options.polyphony;\n\t}\n\n\tstatic getDefaults(): PolySynthOptions<Synth> {\n\t\treturn Object.assign(Instrument.getDefaults(), {\n\t\t\toptions: {},\n\t\t\tpolyphony: 4,\n\t\t\tvoice: Synth,\n\t\t});\n\t}\n\n\t/**\n\t * The number of active voices.\n\t */\n\tget activeVoices(): number {\n\t\treturn this._activeVoices.length;\n\t}\n\n\t/**\n\t * If there is a voice active on that note, return it\n\t */\n\tprivate _getActiveVoice(note: MidiNote): Voice | undefined {\n\t\tconst event = this._activeVoices.find(({midi}) => midi === note);\n\t\tif (event) {\n\t\t\treturn event.voice;\n\t\t}\n\t}\n\n\t/**\n\t * Invoked when the source is done making sound, so that it can be\n\t * readded to the pool of available voices\n\t */\n\tprivate _makeVoiceAvailable(voice: Voice): void {\n\t\tthis._availableVoices.push(voice);\n\t\t// remove the midi note from 'active voices'\n\t\tconst activeVoiceIndex = this._activeVoices.findIndex((e) => e.voice === voice);\n\t\tthis._activeVoices.splice(activeVoiceIndex, 1);\n\t}\n\n\t/**\n\t * Get an available voice from the pool of available voices.\n\t * If one is not available and the polyphony limit is reached,\n\t * steal a voice, otherwise return null.\n\t */\n\tprivate _getNextAvailableVoice(): Voice | undefined {\n\t\t// if there are available voices, return the first one\n\t\tif (this._availableVoices.length) {\n\t\t\treturn this._availableVoices.shift();\n\t\t} else if (this._voices.length < this.polyphony) {\n\t\t\t// otherwise if there is still more polyphony, make a new voice\n\t\t\tconst voice = new this.voice(Object.assign(this.options, {\n\t\t\t\tcontext: this.context,\n\t\t\t\tonsilence: this._makeVoiceAvailable.bind(this),\n\t\t\t}));\n\t\t\tvoice.connect(this.output);\n\t\t\tthis._voices.push(voice);\n\t\t\treturn voice;\n\t\t} else {\n\t\t\tconsole.warn(\"Max polyphony exceeded. Note dropped.\");\n\t\t}\n\t}\n\n\t/**\n\t * Internal method which triggers the attack\n\t */\n\tprivate _triggerAttack(notes: Frequency[], time: Seconds, velocity?: NormalRange): void {\n\t\tnotes.forEach(note => {\n\t\t\tconst midiNote = new MidiClass(this.context, note).toMidi();\n\t\t\t// let voice: Voice | undefined;\n\t\t\t// if there's already a note at that voice, reuse it\n\t\t\tlet voice = this._getActiveVoice(midiNote);\n\t\t\t// if it has a note, and that note is still active\n\t\t\tif (voice && voice.getLevelAtTime(time) > 0) {\n\t\t\t\tconst activeVoiceIndex = this._activeVoices.findIndex((e) => e.voice === voice);\n\t\t\t\tthis._activeVoices.splice(activeVoiceIndex, 1);\n\t\t\t} else {\n\t\t\t\t// otherwise get the next available voice\n\t\t\t\tvoice = this._getNextAvailableVoice();\n\t\t\t}\n\t\t\tif (voice) {\n\t\t\t\tvoice.triggerAttack(note, time, velocity);\n\t\t\t\tthis._activeVoices.unshift({\n\t\t\t\t\tmidi: midiNote, voice,\n\t\t\t\t});\n\t\t\t\tthis.log(\"triggerAttack\", note, time);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Internal method which triggers the release\n\t */\n\tprivate _triggerRelease(notes: Frequency[], time: Seconds): void {\n\t\tnotes.forEach(note => {\n\t\t\tconst midiNote = new MidiClass(this.context, note).toMidi();\n\t\t\tconst voice = this._getActiveVoice(midiNote);\n\t\t\tif (voice) {\n\t\t\t\t// trigger release on that note\n\t\t\t\tvoice.triggerRelease(time);\n\t\t\t\tthis.log(\"triggerRelease\", note, time);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Schedule the attack/release events. If the time is in the future, then it should set a timeout\n\t * to wait for just-in-time scheduling\n\t */\n\tprivate _scheduleEvent(type: \"attack\" | \"release\", notes: Frequency[], time: Seconds, velocity?: NormalRange): void {\n\t\tthis.assert(!this.disposed, \"Synth was already disposed\");\n\t\t// if the notes are greater than this amount of time in the future, they should be scheduled with setTimeout\n\t\tif (time <= this.now()) {\n\t\t\t// do it immediately\n\t\t\tif (type === \"attack\") {\n\t\t\t\tthis._triggerAttack(notes, time, velocity);\n\t\t\t} else {\n\t\t\t\tthis._triggerRelease(notes, time);\n\t\t\t}\n\t\t} else {\n\t\t\t// schedule it to start in the future\n\t\t\tthis.context.setTimeout(() => {\n\t\t\t\tthis._scheduleEvent(type, notes, time, velocity);\n\t\t\t}, time - this.now());\n\t\t}\n\t}\n\n\t/**\n\t * Trigger the attack portion of the note\n\t * @param  notes The notes to play. Accepts a single Frequency or an array of frequencies.\n\t * @param  time  The start time of the note.\n\t * @param velocity The velocity of the note.\n\t * @example\n\t * //trigger a chord immediately with a velocity of 0.2\n\t * poly.triggerAttack([\"Ab3\", \"C4\", \"F5\"], undefined, 0.2);\n\t */\n\ttriggerAttack(notes: Frequency | Frequency[], time?: Time, velocity?: NormalRange): this {\n\n\t\tif (!Array.isArray(notes)) {\n\t\t\tnotes = [notes];\n\t\t}\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._scheduleEvent(\"attack\", notes, computedTime, velocity);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Trigger the release of the note. Unlike monophonic instruments,\n\t * a note (or array of notes) needs to be passed in as the first argument.\n\t * @param  notes The notes to play. Accepts a single Frequency or an array of frequencies.\n\t * @param  time  When the release will be triggered.\n\t * @example\n\t * poly.triggerRelease([\"Ab3\", \"C4\", \"F5\"], \"+2n\");\n\t */\n\ttriggerRelease(notes: Frequency | Frequency[], time?: Time): this {\n\t\tif (!Array.isArray(notes)) {\n\t\t\tnotes = [notes];\n\t\t}\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._scheduleEvent(\"release\", notes, computedTime);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Trigger the attack and release after the specified duration\n\t * @param  notes The notes to play. Accepts a single  Frequency or an array of frequencies.\n\t * @param  duration the duration of the note\n\t * @param  time  if no time is given, defaults to now\n\t * @param  velocity the velocity of the attack (0-1)\n\t * @example\n\t * //trigger a chord for a duration of a half note\n\t * poly.triggerAttackRelease([\"Eb3\", \"G4\", \"C5\"], \"2n\");\n\t * @example\n\t * //can pass in an array of durations as well\n\t * poly.triggerAttackRelease([\"Eb3\", \"G4\", \"C5\"], [\"2n\", \"4n\", \"4n\"]);\n\t */\n\ttriggerAttackRelease(\n\t\tnotes: Frequency | Frequency[],\n\t\tduration: Time | Time[],\n\t\ttime?: Time,\n\t\tvelocity?: NormalRange,\n\t): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis.triggerAttack(notes, computedTime, velocity);\n\t\tif (isArray(duration)) {\n\t\t\tthis.assert(isArray(notes), \"If the duration is an array, the notes must also be an array\");\n\t\t\tnotes = notes as Frequency[];\n\t\t\tfor (let i = 0; i < notes.length; i++) {\n\t\t\t\tconst d = duration[Math.min(i, duration.length - 1)];\n\t\t\t\tconst durationSeconds = this.toSeconds(d);\n\t\t\t\tthis.assert(durationSeconds > 0, \"The duration must be greater than 0\");\n\t\t\t\tthis.triggerRelease(notes[i], computedTime + durationSeconds);\n\t\t\t}\n\t\t} else {\n\t\t\tconst durationSeconds = this.toSeconds(duration);\n\t\t\tthis.assert(durationSeconds > 0, \"The duration must be greater than 0\");\n\t\t\tthis.triggerRelease(notes, computedTime + durationSeconds);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sync the instrument to the Transport. All subsequent calls of\n\t * {@link triggerAttack} and {@link triggerRelease} will be scheduled along the transport.\n\t * @example\n\t * synth.sync()\n\t * //schedule 3 notes when the transport first starts\n\t * synth.triggerAttackRelease('8n', 0)\n\t * synth.triggerAttackRelease('8n', '8n')\n\t * synth.triggerAttackRelease('8n', '4n')\n\t * //start the transport to hear the notes\n\t * Transport.start()\n\t */\n\tsync(): this {\n\t\tthis._syncMethod(\"triggerAttack\", 1);\n\t\tthis._syncMethod(\"triggerRelease\", 1);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set a member/attribute of the voices\n\t * @example\n\t * poly.set({\n\t * \t\"filter\" : {\n\t * \t\t\"type\" : \"highpass\"\n\t * \t},\n\t * \t\"envelope\" : {\n\t * \t\t\"attack\" : 0.25\n\t * \t}\n\t * });\n\t */\n\tset(options: RecursivePartial<VoiceOptions<Voice>>): this {\n\t\tthis.options = deepMerge(this.options, options);\n\t\tthis._voices.forEach(voice => voice.set(this.options));\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Get the synth's attributes.\n\t */\n\tget(): VoiceOptions<Voice> {\n\t\treturn this.options;\n\t}\n\n\t/**\n\t * Trigger the release portion of all the currently active voices immediately.\n\t * Useful for silencing the synth.\n\t */\n\treleaseAll(): this {\n\t\tconst now = this.now();\n\t\tthis._activeVoices.forEach(({voice}) => {\n\t\t\tvoice.triggerRelease(now);\n\t\t});\n\t\tthis._activeVoices = [];\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._voices.forEach(v => v.dispose());\n\t\tthis._activeVoices = [];\n\t\tthis._availableVoices = [];\n\t\treturn this;\n\t}\n}\n","import { FrequencyClass } from \"../core/type/Frequency\";\nimport { Frequency, Positive, Time } from \"../core/type/Units\";\nimport { deepMerge, optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly, RecursivePartial } from \"../core/util/Interface\";\nimport { Monophonic } from \"./Monophonic\";\nimport { Synth, SynthOptions } from \"./Synth\";\n\nexport interface MembraneSynthOptions extends SynthOptions {\n\tpitchDecay: Time;\n\toctaves: Positive;\n}\n\n/**\n * MembraneSynth makes kick and tom sounds using a single oscillator\n * with an amplitude envelope and frequency ramp. A Tone.OmniOscillator\n * is routed through a Tone.AmplitudeEnvelope to the output. The drum\n * quality of the sound comes from the frequency envelope applied\n * during MembraneSynth.triggerAttack(note). The frequency envelope\n * starts at <code>note * .octaves</code> and ramps to <code>note</code>\n * over the duration of <code>.pitchDecay</code>.\n * @param options the options available for the synth see defaults below\n * @example\n * var synth = new MembraneSynth().toMaster();\n * synth.triggerAttackRelease(\"C2\", \"8n\");\n */\nexport class MembraneSynth extends Synth<MembraneSynthOptions> {\n\n\treadonly name = \"MembraneSynth\";\n\n\t/**\n\t *  The number of octaves the pitch envelope ramps.\n\t */\n\toctaves: Positive;\n\n\t/**\n\t *  The amount of time the frequency envelope takes.\n\t */\n\tpitchDecay: Time;\n\n\t/**\n\t * Portamento is ignored in this synth. use pitch decay instead.\n\t */\n\treadonly portamento = 0;\n\n\tconstructor(options?: RecursivePartial<MembraneSynthOptions>)\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(MembraneSynth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(MembraneSynth.getDefaults(), arguments);\n\n\t\tthis.pitchDecay = options.pitchDecay;\n\t\tthis.octaves = options.octaves;\n\t\treadOnly(this, [\"oscillator\", \"envelope\"]);\n\t}\n\n\tstatic getDefaults(): MembraneSynthOptions {\n\t\treturn deepMerge(Monophonic.getDefaults(), Synth.getDefaults(), {\n\t\t\tenvelope : {\n\t\t\t\tattack : 0.001,\n\t\t\t\tattackCurve : \"exponential\",\n\t\t\t\tdecay : 0.4,\n\t\t\t\trelease : 1.4,\n\t\t\t\tsustain : 0.01,\n\t\t\t},\n\t\t\toctaves: 10,\n\t\t\toscillator: {\n\t\t\t\ttype: \"sine\",\n\t\t\t},\n\t\t\tpitchDecay: 0.05,\n\t\t});\n\t}\n\n\tsetNote(note: Frequency | FrequencyClass, time?: Time): this {\n\t\tconst seconds = this.toSeconds(time);\n\t\tconst hertz = this.toFrequency(note instanceof FrequencyClass ? note.toFrequency() : note);\n\t\tconst maxNote = hertz * this.octaves;\n\t\tthis.oscillator.frequency.setValueAtTime(maxNote, seconds);\n\t\tthis.oscillator.frequency.exponentialRampToValueAtTime(hertz, seconds + this.toSeconds(this.pitchDecay));\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\treturn this;\n\t}\n}\n","import \"../core/clock/Transport\";\nimport { ToneWithContext, ToneWithContextOptions } from \"../core/context/ToneWithContext\";\nimport { TicksClass } from \"../core/type/Ticks\";\nimport { TransportTimeClass } from \"../core/type/TransportTime\";\nimport { NormalRange, Positive, Seconds, Ticks, Time, TransportTime } from \"../core/type/Units\";\nimport { defaultArg, optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { BasicPlaybackState, StateTimeline } from \"../core/util/StateTimeline\";\nimport { isBoolean, isNumber } from \"../core/util/TypeCheck\";\n\nexport type ToneEventCallback<T> = (time: Seconds, value: T) => void;\n\nexport interface ToneEventOptions<T> extends ToneWithContextOptions {\n\tcallback: ToneEventCallback<T>;\n\tloop: boolean | number;\n\tloopEnd: Time;\n\tloopStart: Time;\n\tplaybackRate: Positive;\n\tvalue?: T;\n\tprobability: NormalRange;\n\tmute: boolean;\n\thumanize: boolean | Time;\n}\n\n/**\n * ToneEvent abstracts away this.context.transport.schedule and provides a schedulable\n * callback for a single or repeatable events along the timeline.\n *\n * @param callback The callback to invoke at the time.\n * @param value The value or values which should be passed to the callback function on invocation.\n * @example\n * var chord = new ToneEvent(function(time, chord){\n * \t//the chord as well as the exact time of the event\n * \t//are passed in as arguments to the callback function\n * }, [\"D4\", \"E4\", \"F4\"]);\n * //start the chord at the beginning of the transport timeline\n * chord.start();\n * //loop it every measure for 8 measures\n * chord.loop = 8;\n * chord.loopEnd = \"1m\";\n */\nexport class ToneEvent<ValueType = any> extends ToneWithContext<ToneEventOptions<ValueType>> {\n\n\tname = \"ToneEvent\";\n\n\t/**\n\t *  Loop value\n\t */\n\tprotected _loop: boolean | number;\n\n\t/**\n\t *  The callback to invoke.\n\t */\n\tcallback: ToneEventCallback<ValueType>;\n\n\t/**\n\t *  The value which is passed to the\n\t *  callback function.\n\t */\n\tvalue: ValueType;\n\n\t/**\n\t *  When the note is scheduled to start.\n\t */\n\tprotected _loopStart: Ticks;\n\n\t/**\n\t *  When the note is scheduled to start.\n\t */\n\tprotected _loopEnd: Ticks;\n\n\t/**\n\t *  Tracks the scheduled events\n\t */\n\tprotected _state: StateTimeline<{\n\t\tid: number,\n\t}> = new StateTimeline(\"stopped\");\n\n\t/**\n\t *  The playback speed of the note. A speed of 1\n\t *  is no change.\n\t */\n\tprotected _playbackRate: Positive;\n\n\t/**\n\t *  A delay time from when the event is scheduled to start\n\t */\n\tprotected _startOffset: Ticks = 0;\n\n\t/**\n\t *  private holder of probability value\n\t */\n\tprotected _probability: NormalRange;\n\n\t/**\n\t *  the amount of variation from the given time.\n\t */\n\tprotected _humanize: boolean | Time;\n\n\t/**\n\t *  If mute is true, the callback won't be invoked.\n\t */\n\tmute: boolean;\n\n\tconstructor(callback?: ToneEventCallback<ValueType>, value?: ValueType);\n\tconstructor(options?: Partial<ToneEventOptions<ValueType>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(ToneEvent.getDefaults(), arguments, [\"callback\", \"value\"]));\n\t\tconst options = optionsFromArguments(ToneEvent.getDefaults(), arguments, [\"callback\", \"value\"]);\n\n\t\tthis._loop = options.loop;\n\t\tthis.callback = options.callback;\n\t\tthis.value = options.value;\n\t\tthis._loopStart = this.toTicks(options.loopStart);\n\t\tthis._loopEnd = this.toTicks(options.loopEnd);\n\t\tthis._playbackRate = options.playbackRate;\n\t\tthis._probability = options.probability;\n\t\tthis._humanize = options.humanize;\n\t\tthis.mute = options.mute;\n\t\tthis.playbackRate = options.playbackRate;\n\t}\n\n\tstatic getDefaults(): ToneEventOptions<any> {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tcallback : noOp,\n\t\t\thumanize : false,\n\t\t\tloop : false,\n\t\t\tloopEnd : \"1m\",\n\t\t\tloopStart : 0,\n\t\t\tmute : false,\n\t\t\tplaybackRate : 1,\n\t\t\tprobability : 1,\n\t\t\tvalue : null,\n\t\t});\n\t}\n\n\t/**\n\t *  Reschedule all of the events along the timeline\n\t *  with the updated values.\n\t *  @param after Only reschedules events after the given time.\n\t *  @private\n\t */\n\tprivate _rescheduleEvents(after: Ticks = -1): void {\n\t\t// if no argument is given, schedules all of the events\n\t\tthis._state.forEachFrom(after, event => {\n\t\t\tlet duration;\n\t\t\tif (event.state === \"started\") {\n\t\t\t\tif (event.id !== -1) {\n\t\t\t\t\tthis.context.transport.clear(event.id);\n\t\t\t\t}\n\t\t\t\tconst startTick = event.time + Math.round(this.startOffset / this._playbackRate);\n\t\t\t\tif (this._loop === true || isNumber(this._loop) && this._loop > 1) {\n\t\t\t\t\tduration = Infinity;\n\t\t\t\t\tif (isNumber(this._loop)) {\n\t\t\t\t\t\tduration = (this._loop) * this._getLoopDuration();\n\t\t\t\t\t}\n\t\t\t\t\tconst nextEvent = this._state.getAfter(startTick);\n\t\t\t\t\tif (nextEvent !== null) {\n\t\t\t\t\t\tduration = Math.min(duration, nextEvent.time - startTick);\n\t\t\t\t\t}\n\t\t\t\t\tif (duration !== Infinity) {\n\t\t\t\t\t\t// schedule a stop since it's finite duration\n\t\t\t\t\t\tthis._state.setStateAtTime(\"stopped\", startTick + duration + 1, { id : -1 });\n\t\t\t\t\t\tduration = new TicksClass(this.context, duration);\n\t\t\t\t\t}\n\t\t\t\t\tconst interval = new TicksClass(this.context, this._getLoopDuration());\n\t\t\t\t\tevent.id = this.context.transport.scheduleRepeat(\n\t\t\t\t\t\tthis._tick.bind(this), interval, new TicksClass(this.context, startTick), duration);\n\t\t\t\t} else {\n\t\t\t\t\tevent.id = this.context.transport.schedule(this._tick.bind(this), new TicksClass(this.context, startTick));\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t *  Returns the playback state of the note, either \"started\" or \"stopped\".\n\t */\n\tget state(): BasicPlaybackState {\n\t\treturn this._state.getValueAtTime(this.context.transport.ticks) as BasicPlaybackState;\n\t}\n\n\t/**\n\t * The start from the scheduled start time.\n\t */\n\tget startOffset(): Ticks {\n\t\treturn this._startOffset;\n\t}\n\tset startOffset(offset) {\n\t\tthis._startOffset = offset;\n\t}\n\n\t/**\n\t *  The probability of the notes being triggered.\n\t */\n\tget probability(): NormalRange {\n\t\treturn this._probability;\n\t}\n\tset probability(prob) {\n\t\tthis._probability = prob;\n\t}\n\n\t/**\n\t *  If set to true, will apply small random variation\n\t *  to the callback time. If the value is given as a time, it will randomize\n\t *  by that amount.\n\t * @example\n\t * event.humanize = true;\n\t */\n\tget humanize(): Time | boolean {\n\t\treturn this._humanize;\n\t}\n\n\tset humanize(variation) {\n\t\tthis._humanize = variation;\n\t}\n\n\t/**\n\t *  Start the note at the given time.\n\t *  @param  time  When the event should start.\n\t */\n\tstart(time?: TransportTime | TransportTimeClass): this {\n\t\tconst ticks = this.toTicks(time);\n\t\tif (this._state.getValueAtTime(ticks) === \"stopped\") {\n\t\t\tthis._state.add({\n\t\t\t\tid : -1,\n\t\t\t\tstate : \"started\",\n\t\t\t\ttime: ticks,\n\t\t\t});\n\t\t\tthis._rescheduleEvents(ticks);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Stop the Event at the given time.\n\t *  @param  time  When the event should stop.\n\t */\n\tstop(time?: TransportTime | TransportTimeClass): this {\n\t\tthis.cancel(time);\n\t\tconst ticks = this.toTicks(time);\n\t\tif (this._state.getValueAtTime(ticks) === \"started\") {\n\t\t\tthis._state.setStateAtTime(\"stopped\", ticks, { id: -1 });\n\t\t\tconst previousEvent = this._state.getBefore(ticks);\n\t\t\tlet reschedulTime = ticks;\n\t\t\tif (previousEvent !== null) {\n\t\t\t\treschedulTime = previousEvent.time;\n\t\t\t}\n\t\t\tthis._rescheduleEvents(reschedulTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Cancel all scheduled events greater than or equal to the given time\n\t *  @param  time  The time after which events will be cancel.\n\t */\n\tcancel(time?: TransportTime | TransportTimeClass): this {\n\t\ttime = defaultArg(time, -Infinity);\n\t\tconst ticks = this.toTicks(time);\n\t\tthis._state.forEachFrom(ticks, event => {\n\t\t\tthis.context.transport.clear(event.id);\n\t\t});\n\t\tthis._state.cancel(ticks);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  The callback function invoker. Also\n\t *  checks if the Event is done playing\n\t *  @param  time  The time of the event in seconds\n\t */\n\tprotected _tick(time: Seconds): void {\n\t\tconst ticks = this.context.transport.getTicksAtTime(time);\n\t\tif (!this.mute && this._state.getValueAtTime(ticks) === \"started\") {\n\t\t\tif (this.probability < 1 && Math.random() > this.probability) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (this.humanize) {\n\t\t\t\tlet variation = 0.02;\n\t\t\t\tif (!isBoolean(this.humanize)) {\n\t\t\t\t\tvariation = this.toSeconds(this.humanize);\n\t\t\t\t}\n\t\t\t\ttime += (Math.random() * 2 - 1) * variation;\n\t\t\t}\n\t\t\tthis.callback(time, this.value);\n\t\t}\n\t}\n\n\t/**\n\t *  Get the duration of the loop.\n\t */\n\tprotected _getLoopDuration(): Ticks {\n\t\treturn Math.round((this._loopEnd - this._loopStart) / this._playbackRate);\n\t}\n\n\t/**\n\t *  If the note should loop or not\n\t *  between ToneEvent.loopStart and\n\t *  ToneEvent.loopEnd. If set to true,\n\t *  the event will loop indefinitely,\n\t *  if set to a number greater than 1\n\t *  it will play a specific number of\n\t *  times, if set to false, 0 or 1, the\n\t *  part will only play once.\n\t */\n\tget loop(): boolean | number {\n\t\treturn this._loop;\n\t}\n\tset loop(loop) {\n\t\tthis._loop = loop;\n\t\tthis._rescheduleEvents();\n\t}\n\n\t/**\n\t * \tThe playback rate of the note. Defaults to 1.\n\t *  @example\n\t * note.loop = true;\n\t * //repeat the note twice as fast\n\t * note.playbackRate = 2;\n\t */\n\tget playbackRate(): Positive {\n\t\treturn this._playbackRate;\n\t}\n\tset playbackRate(rate) {\n\t\tthis._playbackRate = rate;\n\t\tthis._rescheduleEvents();\n\t}\n\n\t/**\n\t *  The loopEnd point is the time the event will loop\n\t *  if ToneEvent.loop is true.\n\t */\n\tget loopEnd(): Time {\n\t\treturn new TicksClass(this.context, this._loopEnd).toSeconds();\n\t}\n\tset loopEnd(loopEnd) {\n\t\tthis._loopEnd = this.toTicks(loopEnd);\n\t\tif (this._loop) {\n\t\t\tthis._rescheduleEvents();\n\t\t}\n\t}\n\n\t/**\n\t *  The time when the loop should start.\n\t */\n\tget loopStart(): Time {\n\t\treturn new TicksClass(this.context, this._loopStart).toSeconds();\n\t}\n\tset loopStart(loopStart) {\n\t\tthis._loopStart = this.toTicks(loopStart);\n\t\tif (this._loop) {\n\t\t\tthis._rescheduleEvents();\n\t\t}\n\t}\n\n\t/**\n\t *  The current progress of the loop interval.\n\t *  Returns 0 if the event is not started yet or\n\t *  it is not set to loop.\n\t */\n\tget progress(): NormalRange {\n\t\tif (this._loop) {\n\t\t\tconst ticks = this.context.transport.ticks;\n\t\t\tconst lastEvent = this._state.get(ticks);\n\t\t\tif (lastEvent !== null && lastEvent.state === \"started\") {\n\t\t\t\tconst loopDuration = this._getLoopDuration();\n\t\t\t\tconst progress = (ticks - lastEvent.time) % loopDuration;\n\t\t\t\treturn progress / loopDuration;\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.cancel();\n\t\tthis._state.dispose();\n\t\treturn this;\n\t}\n}\n","import { TicksClass } from \"../core/type/Ticks\";\nimport { TransportTimeClass } from \"../core/type/TransportTime\";\nimport { NormalRange, Positive, Seconds, Ticks, Time, TransportTime } from \"../core/type/Units\";\nimport { defaultArg, optionsFromArguments } from \"../core/util/Defaults\";\nimport { StateTimeline } from \"../core/util/StateTimeline\";\nimport { isArray, isDefined, isObject, isUndef } from \"../core/util/TypeCheck\";\nimport { ToneEvent, ToneEventCallback, ToneEventOptions } from \"./ToneEvent\";\n\ntype CallbackType<T> =\n\tT extends {\n\t\ttime: Time;\n\t\t[key: string]: any,\n\t} ? T :\n\tT extends ArrayLike<any> ? T[1] :\n\tT extends Time ? null : never;\n\ninterface PartOptions<T> extends Omit<ToneEventOptions<CallbackType<T>>, \"value\"> {\n\tevents: T[];\n}\n\n/**\n *  Part is a collection ToneEvents which can be started/stopped and looped as a single unit.\n *\n *  @param callback The callback to invoke on each event\n *  @param events the array of events\n *  @example\n * var part = new Part(function(time, note){\n * \t//the notes given as the second element in the array\n * \t//will be passed in as the second argument\n * \tsynth.triggerAttackRelease(note, \"8n\", time);\n * }, [[0, \"C2\"], [\"0:2\", \"C3\"], [\"0:3:2\", \"G2\"]]);\n *  @example\n * //use an array of objects as long as the object has a \"time\" attribute\n * var part = new Part(function(time, value){\n * \t//the value is an object which contains both the note and the velocity\n * \tsynth.triggerAttackRelease(value.note, \"8n\", time, value.velocity);\n * }, [{\"time\" : 0, \"note\" : \"C3\", \"velocity\": 0.9},\n * \t   {\"time\" : \"0:2\", \"note\" : \"C4\", \"velocity\": 0.5}\n * ]).start(0);\n */\nexport class Part<ValueType = any> extends ToneEvent<ValueType> {\n\n\tname = \"Part\";\n\n\t/**\n\t *  Tracks the scheduled events\n\t */\n\tprotected _state: StateTimeline<{\n\t\tid: number,\n\t\toffset: number,\n\t}> = new StateTimeline(\"stopped\");\n\n\t/**\n\t * The events that belong to this part\n\t */\n\tprivate _events: Set<ToneEvent> = new Set();\n\n\tconstructor(options?: Partial<PartOptions<ValueType>>);\n\tconstructor(callback?: ToneEventCallback<CallbackType<ValueType>>, value?: ValueType[]);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Part.getDefaults(), arguments, [\"callback\", \"events\"]));\n\t\tconst options = optionsFromArguments(Part.getDefaults(), arguments, [\"callback\", \"events\"]);\n\n\t\t// add the events\n\t\toptions.events.forEach(event => {\n\t\t\tif (isArray(event)) {\n\t\t\t\tthis.add(event[0], event[1]);\n\t\t\t} else {\n\t\t\t\tthis.add(event);\n\t\t\t}\n\t\t});\n\t}\n\n\tstatic getDefaults(): PartOptions<any> {\n\t\treturn Object.assign(ToneEvent.getDefaults(), {\n\t\t\tevents: [],\n\t\t});\n\t}\n\n\t/**\n\t *  Start the part at the given time.\n\t *  @param  time    When to start the part.\n\t *  @param  offset  The offset from the start of the part to begin playing at.\n\t */\n\tstart(time?: TransportTime, offset?: Time): this {\n\t\tconst ticks = this.toTicks(time);\n\t\tif (this._state.getValueAtTime(ticks) !== \"started\") {\n\t\t\toffset = defaultArg(offset, this._loop ? this._loopStart : 0);\n\t\t\tif (this._loop) {\n\t\t\t\toffset = defaultArg(offset, this._loopStart);\n\t\t\t} else {\n\t\t\t\toffset = defaultArg(offset, 0);\n\t\t\t}\n\t\t\tconst computedOffset = this.toTicks(offset);\n\t\t\tthis._state.add({\n\t\t\t\tid : -1,\n\t\t\t\toffset: computedOffset,\n\t\t\t\tstate : \"started\",\n\t\t\t\ttime : ticks,\n\t\t\t});\n\t\t\tthis._forEach(event => {\n\t\t\t\tthis._startNote(event, ticks, computedOffset);\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Start the event in the given event at the correct time given\n\t *  the ticks and offset and looping.\n\t *  @param  event\n\t *  @param  ticks\n\t *  @param  offset\n\t */\n\tprivate _startNote(event: ToneEvent, ticks: Ticks, offset: Ticks): void {\n\t\tticks -= offset;\n\t\tif (this._loop) {\n\t\t\tif (event.startOffset >= this._loopStart && event.startOffset < this._loopEnd) {\n\t\t\t\tif (event.startOffset < offset) {\n\t\t\t\t\t// start it on the next loop\n\t\t\t\t\tticks += this._getLoopDuration();\n\t\t\t\t}\n\t\t\t\tevent.start(new TicksClass(this.context, ticks));\n\t\t\t} else if (event.startOffset < this._loopStart && event.startOffset >= offset) {\n\t\t\t\tevent.loop = false;\n\t\t\t\tevent.start(new TicksClass(this.context, ticks));\n\t\t\t}\n\t\t} else if (event.startOffset >= offset) {\n\t\t\tevent.start(new TicksClass(this.context, ticks));\n\t\t}\n\t}\n\n\tget startOffset(): Ticks {\n\t\treturn this._startOffset;\n\t}\n\tset startOffset(offset) {\n\t\tthis._startOffset = offset;\n\t\tthis._forEach(event => {\n\t\t\tevent.startOffset += this._startOffset;\n\t\t});\n\t}\n\n\t/**\n\t *  Stop the part at the given time.\n\t *  @param  time  When to stop the part.\n\t */\n\tstop(time?: TransportTime): this {\n\t\tconst ticks = this.toTicks(time);\n\t\tthis._state.cancel(ticks);\n\t\tthis._state.setStateAtTime(\"stopped\", ticks);\n\t\tthis._forEach(event => {\n\t\t\tevent.stop(time);\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get/Set an Event's value at the given time.\n\t * If a value is passed in and no event exists at\n\t * the given time, one will be created with that value.\n\t * If two events are at the same time, the first one will\n\t * be returned.\n\t * @example\n\t * part.at(\"1m\"); //returns the part at the first measure\n\t * part.at(\"2m\", \"C2\"); //set the value at \"2m\" to C2.\n\t * //if an event didn't exist at that time, it will be created.\n\t * @param time The time of the event to get or set.\n\t * @param value If a value is passed in, the value of the event at the given time will be set to it.\n\t */\n\tat(time: Time, value?: any): ToneEvent | null {\n\t\tconst timeInTicks = new TransportTimeClass(this.context, time).toTicks();\n\t\tconst tickTime = new TicksClass(this.context, 1).toSeconds();\n\n\t\tconst iterator = this._events.values();\n\t\tlet result = iterator.next();\n\t\twhile (!result.done) {\n\t\t\tconst event = result.value;\n\t\t\tif (Math.abs(timeInTicks - event.startOffset) < tickTime) {\n\t\t\t\tif (isDefined(value)) {\n\t\t\t\t\tevent.value = value;\n\t\t\t\t}\n\t\t\t\treturn event;\n\t\t\t}\n\t\t\tresult = iterator.next();\n\t\t}\n\t\t// if there was no event at that time, create one\n\t\tif (isDefined(value)) {\n\t\t\tthis.add(time, value);\n\t\t\t// return the new event\n\t\t\treturn this.at(time);\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t *  Add a an event to the part.\n\t *  @param time The time the note should start. If an object is passed in, it should\n\t *  \t\t\thave a 'time' attribute and the rest of the object will be used as the 'value'.\n\t *  @param  value\n\t * @example\n\t * part.add(\"1m\", \"C#+11\");\n\t * @example\n\t * part.add({\n\t * \ttime: \"1m\",\n\t * \tnote: \"C#11\"\n\t * });\n\t */\n\tadd(obj: {\n\t\ttime: Time,\n\t\t[key: string]: any;\n\t}): this;\n\tadd(time: Time, value?: any): this;\n\tadd(time: Time | object, value?: any): this {\n\t\t// extract the parameters\n\t\tif (time instanceof Object && Reflect.has(time, \"time\")) {\n\t\t\tvalue = time;\n\t\t\ttime = value.time;\n\t\t}\n\t\tconst ticks = this.toTicks(time);\n\t\tlet event: ToneEvent;\n\t\tif (value instanceof ToneEvent) {\n\t\t\tevent = value;\n\t\t\tevent.callback = this._tick.bind(this);\n\t\t} else {\n\t\t\tevent = new ToneEvent({\n\t\t\t\tcallback : this._tick.bind(this),\n\t\t\t\tcontext: this.context,\n\t\t\t\tvalue,\n\t\t\t});\n\t\t}\n\t\t// the start offset\n\t\tevent.startOffset = ticks;\n\n\t\t// initialize the values\n\t\tevent.set({\n\t\t\thumanize : this.humanize,\n\t\t\tloop : this.loop,\n\t\t\tloopEnd : this.loopEnd,\n\t\t\tloopStart : this.loopStart,\n\t\t\tplaybackRate : this.playbackRate,\n\t\t\tprobability : this.probability,\n\t\t});\n\n\t\tthis._events.add(event);\n\n\t\t// start the note if it should be played right now\n\t\tthis._restartEvent(event);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Restart the given event\n\t */\n\tprivate _restartEvent(event: ToneEvent): void {\n\t\tthis._state.forEach((stateEvent) => {\n\t\t\tif (stateEvent.state === \"started\") {\n\t\t\t\tthis._startNote(event, stateEvent.time, stateEvent.offset);\n\t\t\t} else {\n\t\t\t\t// stop the note\n\t\t\t\tevent.stop(new TicksClass(this.context, stateEvent.time));\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t *  Remove an event from the part. If the event at that time is a Part,\n\t *  it will remove the entire part.\n\t *  @param time The time of the event\n\t *  @param value Optionally select only a specific event value\n\t */\n\tremove(obj: {\n\t\ttime: Time,\n\t\t[key: string]: any;\n\t}): this;\n\tremove(time: Time, value?: any): this;\n\tremove(time: Time | object, value?: any): this {\n\t\t// extract the parameters\n\t\tif (isObject(time) && time.hasOwnProperty(\"time\")) {\n\t\t\tvalue = time;\n\t\t\ttime = value.time;\n\t\t}\n\t\ttime = this.toTicks(time);\n\t\tthis._events.forEach(event => {\n\t\t\tif (event.startOffset === time) {\n\t\t\t\tif (isUndef(value) || (isDefined(value) && event.value === value)) {\n\t\t\t\t\tthis._events.delete(event);\n\t\t\t\t\tevent.dispose();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Remove all of the notes from the group.\n\t */\n\tclear(): this {\n\t\tthis._forEach(event => event.dispose());\n\t\tthis._events.clear();\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Cancel scheduled state change events: i.e. \"start\" and \"stop\".\n\t *  @param after The time after which to cancel the scheduled events.\n\t */\n\tcancel(after?: TransportTime | TransportTimeClass): this {\n\t\tthis._forEach(event => event.cancel(after));\n\t\tthis._state.cancel(this.toTicks(after));\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over all of the events\n\t */\n\tprivate _forEach(callback: (event: ToneEvent) => void): this {\n\t\tif (this._events) {\n\t\t\tthis._events.forEach(event => {\n\t\t\t\tif (event instanceof Part) {\n\t\t\t\t\tevent._forEach(callback);\n\t\t\t\t} else {\n\t\t\t\t\tcallback(event);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Set the attribute of all of the events\n\t *  @param  attr  the attribute to set\n\t *  @param  value      The value to set it to\n\t */\n\tprivate _setAll(attr: string, value: any): void {\n\t\tthis._forEach(event => {\n\t\t\tevent[attr] = value;\n\t\t});\n\t}\n\n\t/**\n\t *  Internal tick method\n\t *  @param  time  The time of the event in seconds\n\t */\n\tprotected _tick(time: Seconds, value?: any): void {\n\t\tif (!this.mute) {\n\t\t\tthis.callback(time, value);\n\t\t}\n\t}\n\n\t/**\n\t *  Determine if the event should be currently looping\n\t *  given the loop boundries of this Part.\n\t *  @param  event  The event to test\n\t */\n\tprivate _testLoopBoundries(event: ToneEvent): void {\n\t\tif (this._loop && (event.startOffset < this._loopStart || event.startOffset >= this._loopEnd)) {\n\t\t\tevent.cancel(0);\n\t\t} else if (event.state === \"stopped\") {\n\t\t\t// reschedule it if it's stopped\n\t\t\tthis._restartEvent(event);\n\t\t}\n\t}\n\n\t/**\n\t *  The probability of the notes being triggered.\n\t */\n\tget probability(): NormalRange {\n\t\treturn this._probability;\n\t}\n\tset probability(prob) {\n\t\tthis._probability = prob;\n\t\tthis._setAll(\"probability\", prob);\n\t}\n\n\t/**\n\t * If set to true, will apply small random variation\n\t * to the callback time. If the value is given as a time, it will randomize\n\t * by that amount.\n\t * @example\n\t * event.humanize = true;\n\t */\n\tget humanize(): boolean | Time {\n\t\treturn this._humanize;\n\t}\n\tset humanize(variation) {\n\t\tthis._humanize = variation;\n\t\tthis._setAll(\"humanize\", variation);\n\t}\n\n\t/**\n\t * If the part should loop or not\n\t * between Part.loopStart and\n\t * Part.loopEnd. If set to true,\n\t * the part will loop indefinitely,\n\t * if set to a number greater than 1\n\t * it will play a specific number of\n\t * times, if set to false, 0 or 1, the\n\t * part will only play once.\n\t * @example\n\t * //loop the part 8 times\n\t * part.loop = 8;\n\t */\n\tget loop(): boolean | number {\n\t\treturn this._loop;\n\t}\n\tset loop(loop) {\n\t\tthis._loop = loop;\n\t\tthis._forEach(event => {\n\t\t\tevent.loopStart = this.loopStart;\n\t\t\tevent.loopEnd = this.loopEnd;\n\t\t\tevent.loop = loop;\n\t\t\tthis._testLoopBoundries(event);\n\t\t});\n\t}\n\n\t/**\n\t *  The loopEnd point determines when it will\n\t *  loop if Part.loop is true.\n\t *  @memberOf Part#\n\t *  @type {Time}\n\t *  @name loopEnd\n\t */\n\tget loopEnd(): Time {\n\t\treturn new TicksClass(this.context, this._loopEnd).toSeconds();\n\t}\n\tset loopEnd(loopEnd) {\n\t\tthis._loopEnd = this.toTicks(loopEnd);\n\t\tif (this._loop) {\n\t\t\tthis._forEach(event => {\n\t\t\t\tevent.loopEnd = loopEnd;\n\t\t\t\tthis._testLoopBoundries(event);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t *  The loopStart point determines when it will\n\t *  loop if Part.loop is true.\n\t */\n\tget loopStart(): Time {\n\t\treturn new TicksClass(this.context, this._loopStart).toSeconds();\n\t}\n\tset loopStart(loopStart) {\n\t\tthis._loopStart = this.toTicks(loopStart);\n\t\tif (this._loop) {\n\t\t\tthis._forEach(event => {\n\t\t\t\tevent.loopStart = this.loopStart;\n\t\t\t\tthis._testLoopBoundries(event);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * \tThe playback rate of the part\n\t */\n\tget playbackRate(): Positive {\n\t\treturn this._playbackRate;\n\t}\n\tset playbackRate(rate) {\n\t\tthis._playbackRate = rate;\n\t\tthis._setAll(\"playbackRate\", rate);\n\t}\n\n\t/**\n\t * \tThe number of scheduled notes in the part.\n\t */\n\tget length(): number {\n\t\treturn this._events.size;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.clear();\n\t\treturn this;\n\t}\n}\n","import { TicksClass } from \"../core/type/Ticks\";\nimport { NormalRange, Positive, Seconds, Ticks, Time, TransportTime } from \"../core/type/Units\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { isArray, isString } from \"../core/util/TypeCheck\";\nimport { Part } from \"./Part\";\nimport { ToneEvent, ToneEventCallback, ToneEventOptions } from \"./ToneEvent\";\n\ntype SequenceEventDescription<T> = Array<T | T[]>;\n\ninterface SequenceOptions<T> extends Omit<ToneEventOptions<T>, \"value\"> {\n\tloopStart: number;\n\tloopEnd: number;\n\tsubdivision: Time;\n\tevents: SequenceEventDescription<T>;\n}\n\n/**\n * A sequence is an alternate notation of a part. Instead\n * of passing in an array of [time, event] pairs, pass\n * in an array of events which will be spaced at the\n * given subdivision. Sub-arrays will subdivide that beat\n * by the number of items are in the array.\n * Sequence notation inspiration from [Tidal](http://yaxu.org/tidal/)\n * @param  callback  The callback to invoke with every note\n * @param  sequence  The sequence\n * @param  subdivision  The subdivision between which events are placed.\n * @example\n * var seq = new Sequence(function(time, note){\n * \tconsole.log(note);\n * //straight quater notes\n * }, [\"C4\", \"E4\", \"G4\", \"A4\"], \"4n\");\n * @example\n * var seq = new Sequence(function(time, note){\n * \tconsole.log(note);\n * //subdivisions are given as subarrays\n * }, [\"C4\", [\"E4\", \"D4\", \"E4\"], \"G4\", [\"A4\", \"G4\"]]);\n */\nexport class Sequence<ValueType = any> extends ToneEvent<ValueType> {\n\n\tname = \"Sequence\";\n\n\t/**\n\t *  The subdivison of each note\n\t */\n\tprivate _subdivision: Ticks;\n\n\t/**\n\t * The object responsible for scheduling all of the events\n\t */\n\tprivate _part: Part = new Part({\n\t\tcallback: this._seqCallback.bind(this),\n\t\tcontext: this.context,\n\t});\n\n\t/**\n\t * private reference to all of the sequence proxies\n\t */\n\tprivate _events: ValueType[] = [];\n\n\t/**\n\t * The proxied array\n\t */\n\tprivate _eventsArray: ValueType[] = [];\n\n\tconstructor(\n\t\tcallback?: ToneEventCallback<ValueType>,\n\t\tevents?: SequenceEventDescription<ValueType>,\n\t\tsubdivision?: Time,\n\t);\n\tconstructor(options?: Partial<SequenceOptions<ValueType>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Sequence.getDefaults(), arguments, [\"callback\", \"events\", \"subdivision\"]));\n\t\tconst options = optionsFromArguments(Sequence.getDefaults(), arguments, [\"callback\", \"events\", \"subdivision\"]);\n\n\t\tthis._subdivision = this.toTicks(options.subdivision);\n\n\t\tthis.events = options.events;\n\n\t\t// set all of the values\n\t\tthis.loop = options.loop;\n\t\tthis.loopStart = options.loopStart;\n\t\tthis.loopEnd = options.loopEnd;\n\t\tthis.playbackRate = options.playbackRate;\n\t\tthis.probability = options.probability;\n\t\tthis.humanize = options.humanize;\n\t\tthis.mute = options.mute;\n\t\tthis.playbackRate = options.playbackRate;\n\t}\n\n\tstatic getDefaults(): SequenceOptions<any> {\n\t\treturn Object.assign( omitFromObject(ToneEvent.getDefaults(), [\"value\"]), {\n\t\t\tevents: [],\n\t\t\tloop: true,\n\t\t\tloopEnd : 0,\n\t\t\tloopStart: 0,\n\t\t\tsubdivision: \"8n\",\n\t\t});\n\t}\n\n\t/**\n\t * The internal callback for when an event is invoked\n\t */\n\tprivate _seqCallback(time: Seconds, value: any): void {\n\t\tif (value !== null) {\n\t\t\tthis.callback(time, value);\n\t\t}\n\t}\n\n\t/**\n\t * The sequence\n\t */\n\tget events(): any[] {\n\t\treturn this._events;\n\t}\n\tset events(s) {\n\t\tthis.clear();\n\t\tthis._eventsArray = s;\n\t\tthis._events = this._createSequence(this._eventsArray);\n\t\tthis._eventsUpdated();\n\t}\n\n\t/**\n\t *  Start the part at the given time.\n\t *  @param  time    When to start the part.\n\t *  @param  offset  The offset index to start at\n\t */\n\tstart(time?: TransportTime, offset?: number): this {\n\t\tthis._part.start(time, offset ? this._indexTime(offset) : offset);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Stop the part at the given time.\n\t *  @param  time  When to stop the part.\n\t */\n\tstop(time?: TransportTime): this {\n\t\tthis._part.stop(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  The subdivision of the sequence. This can only be\n\t *  set in the constructor. The subdivision is the\n\t *  interval between successive steps.\n\t */\n\tget subdivision(): Seconds {\n\t\treturn new TicksClass(this.context, this._subdivision).toSeconds();\n\t}\n\n\t/**\n\t * Create a sequence proxy which can be monitored to create subsequences\n\t */\n\tprivate _createSequence(array: any[]): any[] {\n\t\treturn new Proxy(array, {\n\t\t\tget: (target: any[], property: PropertyKey): any => {\n\t\t\t\t// property is index in this case\n\t\t\t\treturn target[property];\n\t\t\t},\n\t\t\tset: (target: any[], property: PropertyKey, value: any): boolean => {\n\t\t\t\tif (isString(property) && isFinite(parseInt(property, 10))) {\n\t\t\t\t\tconst index = parseInt(property, 10);\n\t\t\t\t\tif (isArray(value)) {\n\t\t\t\t\t\ttarget[property] = this._createSequence(value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttarget[property] = value;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttarget[property] = value;\n\t\t\t\t}\n\t\t\t\tthis._eventsUpdated();\n\t\t\t\t// return true to accept the changes\n\t\t\t\treturn true;\n\t\t\t},\n\t\t});\n\t}\n\n\t/**\n\t * When the sequence has changed, all of the events need to be recreated\n\t */\n\tprivate _eventsUpdated(): void {\n\t\tthis._part.clear();\n\t\tthis._rescheduleSequence(this._eventsArray, this._subdivision, this.startOffset);\n\t\t// update the loopEnd\n\t\tthis.loopEnd = this.loopEnd;\n\t}\n\n\t/**\n\t * reschedule all of the events that need to be rescheduled\n\t */\n\tprivate _rescheduleSequence(sequence: any[], subdivision: Ticks, startOffset: Ticks): void {\n\t\tsequence.forEach((value, index) => {\n\t\t\tconst eventOffset = index * (subdivision) + startOffset;\n\t\t\tif (isArray(value)) {\n\t\t\t\tthis._rescheduleSequence(value, subdivision / value.length, eventOffset);\n\t\t\t} else {\n\t\t\t\tconst startTime = new TicksClass(this.context, eventOffset, \"i\").toSeconds();\n\t\t\t\tthis._part.add(startTime, value);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t *  Get the time of the index given the Sequence's subdivision\n\t *  @param  index\n\t *  @return The time of that index\n\t *  @private\n\t */\n\tprivate _indexTime(index: number): Seconds {\n\t\treturn new TicksClass(this.context, index * (this._subdivision) + this.startOffset).toSeconds();\n\t}\n\n\t/**\n\t * Clear all of the events\n\t */\n\tclear(): this {\n\t\tthis._part.clear();\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._part.dispose();\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// PROXY CALLS\n\t///////////////////////////////////////////////////////////////////////////\n\n\tget loop(): boolean | number {\n\t\treturn this._part.loop;\n\t}\n\tset loop(l) {\n\t\tif (this._part) {\n\t\t\tthis._part.loop = l;\n\t\t}\n\t}\n\n\t/**\n\t * The index at which the sequence should start looping\n\t */\n\tget loopStart(): number {\n\t\treturn this._loopStart;\n\t}\n\tset loopStart(index) {\n\t\tthis._loopStart = index;\n\t\tif (this._part) {\n\t\t\tthis._part.loopStart = this._indexTime(index);\n\t\t}\n\t}\n\n\t/**\n\t * The index at which the sequence should end looping\n\t */\n\tget loopEnd(): number {\n\t\treturn this._loopEnd;\n\t}\n\tset loopEnd(index) {\n\t\tthis._loopEnd = index;\n\t\tif (this._part) {\n\t\t\tif (index === 0) {\n\t\t\t\tthis._part.loopEnd = this._indexTime(this._eventsArray.length);\n\t\t\t} else {\n\t\t\t\tthis._part.loopEnd = this._indexTime(index);\n\t\t\t}\n\t\t}\n\t}\n\n\tget startOffset(): Ticks {\n\t\treturn this._part.startOffset;\n\t}\n\tset startOffset(start) {\n\t\tif (this._part) {\n\t\t\tthis._part.startOffset = start;\n\t\t}\n\t}\n\n\tget playbackRate(): Positive {\n\t\treturn this._part.playbackRate;\n\t}\n\tset playbackRate(rate) {\n\t\tif (this._part) {\n\t\t\tthis._part.playbackRate = rate;\n\t\t}\n\t}\n\n\tget probability(): NormalRange {\n\t\treturn this._part.probability;\n\t}\n\tset probability(prob) {\n\t\tif (this._part) {\n\t\t\tthis._part.probability = prob;\n\t\t}\n\t}\n\n\tget humanize(): boolean | Time {\n\t\treturn this._part.humanize;\n\t}\n\tset humanize(variation) {\n\t\tif (this._part) {\n\t\t\tthis._part.humanize = variation;\n\t\t}\n\t}\n\n\t/**\n\t * The number of scheduled events\n\t */\n\tget length(): number {\n\t\treturn this._part.length;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { connect, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { NormalRange } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { GainToAudio } from \"../../signal/GainToAudio\";\nimport { Signal } from \"../../signal/Signal\";\n\ninterface CrossFadeOptions extends ToneAudioNodeOptions {\n\tfade: NormalRange;\n}\n\n/**\n * Tone.Crossfade provides equal power fading between two inputs.\n * More on crossfading technique [here](https://en.wikipedia.org/wiki/Fade_(audio_engineering)#Crossfading).\n * ```\n *                                             +---------+\n *                                            +> input a +>--+\n * +-----------+   +---------------------+     |         |   |\n * | 1s signal +>--> stereoPannerNode  L +>----> gain    |   |\n * +-----------+   |                     |     +---------+   |\n *               +-> pan               R +>-+                |   +--------+\n *               | +---------------------+  |                +---> output +>\n *  +------+     |                          |  +---------+   |   +--------+\n *  | fade +>----+                          | +> input b +>--+\n *  +------+                                |  |         |\n *                                          +--> gain    |\n *                                             +---------+\n * ```\n * @example\n * var crossFade = new CrossFade(0.5);\n * //connect effect A to crossfade from\n * //effect output 0 to crossfade input 0\n * effectA.connect(crossFade.a);\n * //connect effect B to crossfade from\n * //effect output 0 to crossfade input 1\n * effectB.connect(crossFade.b);\n * crossFade.fade.value = 0;\n * // ^ only effectA is output\n * crossFade.fade.value = 1;\n * // ^ only effectB is output\n * crossFade.fade.value = 0.5;\n * // ^ the two signals are mixed equally.\n */\nexport class CrossFade extends ToneAudioNode<CrossFadeOptions> {\n\n\treadonly name = \"CrossFade\";\n\n\t/**\n\t * The crossfading is done by a StereoPannerNode\n\t */\n\tprivate _panner: StereoPannerNode = this.context.createStereoPanner();\n\n\t/**\n\t * Split the output of the panner node into two values used to control the gains.\n\t */\n\tprivate _split: ChannelSplitterNode = this.context.createChannelSplitter(2);\n\n\t/**\n\t * Convert the fade value into an audio range value so it can be connected\n\t * to the panner.pan AudioParam\n\t */\n\tprivate _g2a: GainToAudio = new GainToAudio({ context : this.context });\n\n\t/**\n\t * The input which is at full level when fade = 0\n\t */\n\ta: Gain = new Gain({\n\t\tcontext : this.context,\n\t\tgain: 0,\n\t});\n\n\t/**\n\t * The input which is at full level when fade = 1\n\t */\n\tb: Gain = new Gain({\n\t\tcontext : this.context,\n\t\tgain: 0,\n\t});\n\n\t/**\n\t * The output is a mix between `a` and `b` at the ratio of `fade`\n\t */\n\toutput: Gain = new Gain({ context : this.context });\n\n\t/**\n\t * CrossFade has no input, you must choose either `a` or `b`\n\t */\n\tinput: undefined;\n\n\t/**\n\t * \tThe mix between the two inputs. A fade value of 0\n\t * \twill output 100% crossFade.a and\n\t * \ta value of 1 will output 100% crossFade.b.\n\t */\n\treadonly fade: Signal<NormalRange>;\n\n\tprotected _internalChannels = [this.a, this.b];\n\n\tconstructor(options?: Partial<CrossFadeOptions>);\n\t// tslint:disable-next-line: unified-signatures\n\tconstructor(fade?: NormalRange);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(CrossFade.getDefaults(), arguments, [\"fade\"])));\n\t\tconst options = optionsFromArguments(CrossFade.getDefaults(), arguments, [\"fade\"]);\n\n\t\tthis.fade = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"normalRange\",\n\t\t\tvalue: options.fade,\n\t\t});\n\t\treadOnly(this, \"fade\");\n\n\t\tthis.context.getConstant(1).connect(this._panner);\n\t\tthis._panner.connect(this._split);\n\t\tconnect(this._split, this.a.gain, 0);\n\t\tconnect(this._split, this.b.gain, 1);\n\n\t\tthis.fade.chain(this._g2a, this._panner.pan);\n\n\t\tthis.a.connect(this.output);\n\t\tthis.b.connect(this.output);\n\t}\n\n\tstatic getDefaults(): CrossFadeOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tfade: 0.5,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.a.dispose();\n\t\tthis.b.dispose();\n\t\tthis.output.dispose();\n\t\tthis.fade.dispose();\n\t\tthis._g2a.dispose();\n\t\tthis._panner.disconnect();\n\t\tthis._split.disconnect();\n\t\treturn this;\n\t}\n}\n","import { CrossFade } from \"../component/channel/CrossFade\";\nimport { Gain } from \"../core/context/Gain\";\nimport { InputNode, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { NormalRange } from \"../core/type/Units\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Signal } from \"../signal/Signal\";\n\nexport interface EffectOptions extends ToneAudioNodeOptions {\n\twet: NormalRange;\n}\n/**\n * \t@class  Effect is the base class for effects. Connect the effect between\n * \t        the effectSend and effectReturn GainNodes, then control the amount of\n * \t        effect which goes to the output using the wet control.\n *\n *  @constructor\n *  @extends {Tone.AudioNode}\n *  @param {NormalRange|Object} [wet] The starting wet value.\n */\nexport abstract class Effect<Options extends EffectOptions>\nextends ToneAudioNode<Options> {\n\n\treadonly name: string = \"Effect\";\n\n\t/**\n\t *  the drywet knob to control the amount of effect\n\t */\n\tprivate _dryWet: CrossFade = new CrossFade({ context : this.context });\n\n\t/**\n\t *  The wet control is how much of the effected\n\t *  will pass through to the output. 1 = 100% effected\n\t *  signal, 0 = 100% dry signal.\n\t */\n\twet: Signal<NormalRange> = this._dryWet.fade;\n\n\t/**\n\t *  connect the effectSend to the input of hte effect\n\t */\n\tprotected effectSend: Gain = new Gain({ context : this.context });\n\n\t/**\n\t *  connect the output of the effect to the effectReturn\n\t */\n\tprotected effectReturn: Gain = new Gain({ context : this.context });\n\n\t/**\n\t * The effect input node\n\t */\n\tinput: Gain = new Gain({ context : this.context });\n\n\t/**\n\t * The effect output\n\t */\n\toutput = this._dryWet;\n\n\tconstructor(options: EffectOptions) {\n\t\tsuper(options);\n\n\t\t// connections\n\t\tthis.input.fan(this._dryWet.a, this.effectSend);\n\t\tthis.effectReturn.connect(this._dryWet.b);\n\t\tthis.wet.setValueAtTime(options.wet, 0);\n\t\tthis._internalChannels = [this.effectReturn, this.effectSend];\n\t\treadOnly(this, \"wet\");\n\t}\n\n\tstatic getDefaults(): EffectOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\twet : 1,\n\t\t});\n\t}\n\n\t/**\n\t *  chains the effect in between the effectSend and effectReturn\n\t */\n\tprotected connectEffect(effect: ToneAudioNode | AudioNode): this {\n\t\t// add it to the internal channels\n\t\tthis._internalChannels.push(effect);\n\t\tthis.effectSend.chain(effect, this.effectReturn);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._dryWet.dispose();\n\t\tthis.effectSend.dispose();\n\t\tthis.effectReturn.dispose();\n\t\tthis.wet.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../core/context/Gain\";\nimport { Param } from \"../core/context/Param\";\nimport { NormalRange } from \"../core/type/Units\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Effect, EffectOptions } from \"./Effect\";\n\nexport interface FeedbackEffectOptions extends EffectOptions {\n\t/**\n\t * The feedback from the output back to the input\n\t * ```\n\t * +---<--------<---+\n\t * |                |\n\t * |  +----------+  |\n\t * +--> feedback +>-+\n\t *    +----------+\n\t * ```\n\t */\n\tfeedback: NormalRange;\n}\n\n/**\n * FeedbackEffect provides a loop between an audio source and its own output.\n * This is a base-class for feedback effects.\n */\nexport abstract class FeedbackEffect<Options extends FeedbackEffectOptions> extends Effect<Options> {\n\n\tname = \"FeedbackEffect\";\n\n\t/**\n\t *  the gain which controls the feedback\n\t */\n\tprivate _feedbackGain: Gain<NormalRange>;\n\n\t/**\n\t *  The amount of signal which is fed back into the effect input.\n\t */\n\tfeedback: Param<NormalRange>;\n\n\tconstructor(options: FeedbackEffectOptions) {\n\n\t\tsuper(options);\n\n\t\tthis._feedbackGain = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: options.feedback,\n\t\t\tunits: \"normalRange\",\n\t\t});\n\n\t\tthis.feedback = this._feedbackGain.gain;\n\t\treadOnly(this, \"feedback\");\n\n\t\t// the feedback loop\n\t\tthis.effectReturn.chain(this._feedbackGain, this.effectSend);\n\t}\n\n\tstatic getDefaults(): FeedbackEffectOptions {\n\t\treturn Object.assign(Effect.getDefaults(), {\n\t\t\tfeedback: 0.125,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._feedbackGain.dispose();\n\t\tthis.feedback.dispose();\n\t\treturn this;\n\t}\n}\n","import { Delay } from \"../core/context/Delay\";\nimport { Param } from \"../core/context/Param\";\nimport { NormalRange, Time } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { FeedbackEffect,  FeedbackEffectOptions } from \"./FeedbackEffect\";\n\ninterface FeedbackDelayOptions extends FeedbackEffectOptions {\n\tdelayTime: Time;\n\tmaxDelay: Time;\n}\n\n/**\n * FeedbackDelay is a DelayNode in which part of output signal is fed back into the delay.\n *\n * @param delayTime The delay applied to the incoming signal.\n * @param feedback The amount of the effected signal which is fed back through the delay.\n * @example\n * var feedbackDelay = new FeedbackDelay(\"8n\", 0.5).toDestination();\n * var tom = new Tone.MembraneSynth({\n * \t\"octaves\" : 4,\n * \t\"pitchDecay\" : 0.1\n * }).connect(feedbackDelay);\n * tom.triggerAttackRelease(\"A2\",\"32n\");\n */\nexport class FeedbackDelay extends FeedbackEffect<FeedbackDelayOptions> {\n\n\tname = \"FeedbackDelay\";\n\n\t/**\n\t *  the delay node\n\t */\n\tprivate _delayNode: Delay;\n\n\t/**\n\t *  The delayTime of the FeedbackDelay.\n\t */\n\treadonly delayTime: Param<Time>;\n\n\tconstructor(delayTime?: Time, feedback?: NormalRange);\n\tconstructor(options?: Partial<FeedbackDelayOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(FeedbackDelay.getDefaults(), arguments, [\"delayTime\", \"feedback\"]));\n\t\tconst options = optionsFromArguments(FeedbackDelay.getDefaults(), arguments, [\"delayTime\", \"feedback\"]);\n\n\t\tthis._delayNode = new Delay({\n\t\t\tcontext: this.context,\n\t\t\tdelayTime: options.delayTime,\n\t\t\tmaxDelay: options.maxDelay,\n\t\t});\n\t\tthis.delayTime = this._delayNode.delayTime;\n\n\t\t// connect it up\n\t\tthis.connectEffect(this._delayNode);\n\t\treadOnly(this, \"delayTime\");\n\t}\n\n\tstatic getDefaults(): FeedbackDelayOptions {\n\t\treturn Object.assign(FeedbackEffect.getDefaults(), {\n\t\t\tdelayTime: 0.25,\n\t\t\tmaxDelay: 1,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._delayNode.dispose();\n\t\tthis.delayTime.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioBuffer } from \"../core/context/ToneAudioBuffer\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { Effect, EffectOptions } from \"./Effect\";\n\ninterface ToneConvolverOptions extends EffectOptions {\n\tonload: () => void;\n\tnormalize: boolean;\n\turl?: string | AudioBuffer | ToneAudioBuffer;\n}\n\n/**\n * Convolver is a wrapper around the Native Web Audio\n * [ConvolverNode](http://webaudio.github.io/web-audio-api/#the-convolvernode-interface).\n * Convolution is useful for reverb and filter emulation. Read more about convolution reverb on\n * [Wikipedia](https://en.wikipedia.org/wiki/Convolution_reverb).\n *\n * @param url The URL of the impulse response or the Tone.Buffer contianing the impulse response.\n * @param onload The callback to invoke when the url is loaded.\n * @example\n * //initializing the convolver with an impulse response\n * var convolver = new Convolver(\"./path/to/ir.wav\").toDestination();\n */\nexport class Convolver extends Effect<ToneConvolverOptions> {\n\n\tname = \"Convolver\";\n\n\t/**\n\t *  The native ConvolverNode\n\t */\n\tprivate _convolver: ConvolverNode = this.context.createConvolver();\n\n\t/**\n\t *  The Buffer belonging to the convolver\n\t */\n\tprivate _buffer: ToneAudioBuffer;\n\n\tconstructor(url?: string | AudioBuffer | ToneAudioBuffer, onload?: () => void);\n\tconstructor(options?: Partial<ToneConvolverOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Convolver.getDefaults(), arguments, [\"url\", \"onload\"]));\n\t\tconst options = optionsFromArguments(Convolver.getDefaults(), arguments, [\"url\", \"onload\"]);\n\n\t\tthis._buffer = new ToneAudioBuffer(options.url, buffer => {\n\t\t\tthis.buffer = buffer;\n\t\t\toptions.onload();\n\t\t});\n\n\t\t// set if it's already loaded\n\t\tif (this._buffer.loaded) {\n\t\t\tthis.buffer = this._buffer;\n\t\t}\n\n\t\t// initially set normalization\n\t\tthis.normalize = options.normalize;\n\n\t\t// connect it up\n\t\tthis.connectEffect(this._convolver);\n\t}\n\n\tstatic getDefaults(): ToneConvolverOptions {\n\t\treturn Object.assign(Effect.getDefaults(), {\n\t\t\tnormalize : true,\n\t\t\tonload : noOp,\n\t\t});\n\t}\n\n\t/**\n\t * Load an impulse response url as an audio buffer.\n\t * Decodes the audio asynchronously and invokes\n\t * the callback once the audio buffer loads.\n\t * @param url The url of the buffer to load. filetype support depends on the browser.\n\t */\n\tasync load(url: string): Promise<void> {\n\t\tthis.buffer = await this._buffer.load(url);\n\t}\n\n\t/**\n\t *  The convolver's buffer\n\t */\n\tget buffer(): ToneAudioBuffer | null {\n\t\tif (this._buffer.length) {\n\t\t\treturn this._buffer;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\tset buffer(buffer) {\n\t\tif (buffer) {\n\t\t\tthis._buffer.set(buffer);\n\t\t}\n\t\t// if it's already got a buffer, create a new one\n\t\tif (this._convolver.buffer) {\n\t\t\t// disconnect the old one\n\t\t\tthis.effectSend.disconnect();\n\t\t\tthis._convolver.disconnect();\n\t\t\t// create and connect a new one\n\t\t\tthis._convolver = this.context.createConvolver();\n\t\t\tthis.connectEffect(this._convolver);\n\t\t}\n\t\tconst buff = this._buffer.get();\n\t\tthis._convolver.buffer = buff ? buff : null;\n\t}\n\n\t/**\n\t * The normalize property of the ConvolverNode interface is a boolean that\n\t * controls whether the impulse response from the buffer will be scaled by\n\t * an equal-power normalization when the buffer attribute is set, or not.\n\t */\n\tget normalize(): boolean {\n\t\treturn this._convolver.normalize;\n\t}\n\tset normalize(norm) {\n\t\tthis._convolver.normalize = norm;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._buffer.dispose();\n\t\tthis._convolver.disconnect();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { NormalRange, PowerOfTwo } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n\ntype AnalyserType = \"fft\" | \"waveform\";\n\ninterface AnalyserOptions extends ToneAudioNodeOptions {\n\tsize: PowerOfTwo;\n\ttype: AnalyserType;\n\tsmoothing: NormalRange;\n}\n\n/**\n *  Wrapper around the native Web Audio's [AnalyserNode](http://webaudio.github.io/web-audio-api/#idl-def-AnalyserNode).\n *  Extracts FFT or Waveform data from the incoming signal.\n *  @param type The return type of the analysis, either \"fft\", or \"waveform\".\n *  @param size The size of the FFT. This must be a power of two in the range 16 to 16384.\n */\nexport class Analyser extends ToneAudioNode<AnalyserOptions> {\n\n\treadonly name = \"Analyser\";\n\n\tinput: AnalyserNode;\n\toutput: AnalyserNode;\n\n\t/**\n\t *  The analyser node.\n\t */\n\tprivate _analyser = this.context.createAnalyser();\n\n\t/**\n\t *  The analysis type\n\t */\n\tprivate _type!: AnalyserType;\n\n\t/**\n\t *  The buffer that the FFT data is written to\n\t */\n\tprivate _buffer!: Float32Array;\n\n\tconstructor(type?: AnalyserType, size?: number);\n\tconstructor(options?: Partial<AnalyserOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Analyser.getDefaults(), arguments, [\"type\", \"size\"]));\n\t\tconst options = optionsFromArguments(Analyser.getDefaults(), arguments, [\"type\", \"size\"]);\n\t\t// set the values initially\n\t\tthis.size = options.size;\n\t\tthis.type = options.type;\n\t\tthis.input = this.output = this._analyser;\n\t}\n\n\tstatic getDefaults(): AnalyserOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tsize: 1024,\n\t\t\tsmoothing: 0.8,\n\t\t\ttype: \"fft\" as AnalyserType,\n\t\t});\n\t}\n\n\t/**\n\t *  Run the analysis given the current settings and return the\n\t */\n\tgetValue(): Float32Array {\n\t\tif (this._type === \"fft\") {\n\t\t\tthis._analyser.getFloatFrequencyData(this._buffer);\n\t\t} else if (this._type === \"waveform\") {\n\t\t\tthis._analyser.getFloatTimeDomainData(this._buffer);\n\t\t}\n\t\treturn this._buffer;\n\t}\n\n\t/**\n\t *  The size of analysis. This must be a power of two in the range 16 to 16384.\n\t */\n\tget size(): PowerOfTwo {\n\t\treturn this._analyser.frequencyBinCount;\n\t}\n\tset size(size: PowerOfTwo) {\n\t\tthis._analyser.fftSize = size * 2;\n\t\tthis._buffer = new Float32Array(size);\n\t}\n\n\t/**\n\t *  The analysis function returned by analyser.getValue(), either \"fft\" or \"waveform\".\n\t */\n\tget type(): AnalyserType {\n\t\treturn this._type;\n\t}\n\tset type(type: AnalyserType) {\n\t\tthis.assert(type === \"waveform\" || type === \"fft\", `Analyser: invalid type: ${type}`);\n\t\tthis._type = type;\n\t}\n\n\t/**\n\t *  0 represents no time averaging with the last analysis frame.\n\t */\n\tget smoothing(): NormalRange {\n\t\treturn this._analyser.smoothingTimeConstant;\n\t}\n\n\tset smoothing(val: NormalRange) {\n\t\tthis._analyser.smoothingTimeConstant = val;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._analyser.disconnect();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Positive } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n\ninterface MergeOptions extends ToneAudioNodeOptions {\n\tchannels: Positive;\n}\n\n/**\n * Merge brings multiple mono input channels into a single multichannel output channel.\n *\n * @param channels The number of channels to merge.\n * @example\n * var merge = new Merge().toDestination();\n * //routing a sine tone in the left channel\n * //and noise in the right channel\n * var osc = new Tone.Oscillator().connect(merge.left);\n * var noise = new Tone.Noise().connect(merge.right);\n * //starting our oscillators\n * noise.start();\n * osc.start();\n */\nexport class Merge extends ToneAudioNode<MergeOptions> {\n\n\treadonly name = \"Merge\";\n\n\t/**\n\t *  The merger node for the two channels.\n\t */\n\tprivate _merger: ChannelMergerNode;\n\n\t/**\n\t * The output is the input channels combined into a sigle (multichannel) output\n\t */\n\treadonly output: ChannelMergerNode;\n\n\t/**\n\t * Multiple input connections combine into a single output.\n\t */\n\treadonly input: ChannelMergerNode;\n\n\tconstructor(channels?: Positive);\n\t// tslint:disable-next-line: unified-signatures\n\tconstructor(options?: Partial<MergeOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Merge.getDefaults(), arguments, [\"channels\"]));\n\t\tconst options = optionsFromArguments(Merge.getDefaults(), arguments, [\"channels\"]);\n\n\t\tthis._merger = this.output = this.input = this.context.createChannelMerger(options.channels);\n\t}\n\n\tstatic getDefaults(): MergeOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tchannels: 2,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._merger.disconnect();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { connectSeries, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Cents, Decibels, Frequency, GainFactor, Positive } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { isNumber } from \"../../core/util/TypeCheck\";\nimport { Signal } from \"../../signal/Signal\";\n\ninterface FilterOptions extends ToneAudioNodeOptions {\n\ttype: BiquadFilterType;\n\tfrequency: Frequency;\n\trolloff: number;\n\tQ: Positive;\n\tdetune: Cents;\n\tgain: GainFactor;\n}\n\n/**\n *  @class  Tone.Filter is a filter which allows for all of the same native methods\n *          as the [BiquadFilterNode](http://webaudio.github.io/web-audio-api/#the-biquadfilternode-interface).\n *          Tone.Filter has the added ability to set the filter rolloff at -12\n *          (default), -24 and -48.\n *\n *  @constructor\n *  @extends {Tone.AudioNode}\n *  @param frequency The cutoff frequency of the filter.\n *  @param type The type of filter.\n *  @param rolloff The drop in decibels per octave after the cutoff frequency\n *  @example\n *  var filter = new Filter(200, \"highpass\");\n */\nexport class Filter extends ToneAudioNode<FilterOptions> {\n\n\treadonly name = \"Filter\";\n\n\treadonly input = new Gain({ context: this.context });\n\treadonly output = new Gain({ context: this.context });\n\tprivate _filters: BiquadFilterNode[] = [];\n\n\t/**\n\t *  the rolloff value of the filter\n\t */\n\tprivate _rolloff!: number;\n\tprivate _type: BiquadFilterType;\n\n\t/**\n\t *  The Q or Quality of the filter\n\t */\n\treadonly Q: Signal<Positive>;\n\n\t/**\n\t *  The cutoff frequency of the filter.\n\t */\n\treadonly frequency: Signal<Frequency>;\n\n\t/**\n\t *  The detune parameter\n\t */\n\treadonly detune: Signal<Cents>;\n\n\t/**\n\t *  The gain of the filter, only used in certain filter types\n\t */\n\treadonly gain: Signal<Decibels>;\n\n\tconstructor(frequency?: Frequency, type?: BiquadFilterType, rolloff?: number);\n\tconstructor(options?: Partial<FilterOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Filter.getDefaults(), arguments, [\"frequency\", \"type\", \"rolloff\"]));\n\t\tconst options = optionsFromArguments(Filter.getDefaults(), arguments, [\"frequency\", \"type\", \"rolloff\"]);\n\n\t\tthis._filters = [];\n\n\t\tthis.Q = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.Q,\n\t\t});\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t});\n\t\tthis.detune = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune,\n\t\t});\n\t\tthis.gain = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"decibels\",\n\t\t\tvalue: options.gain,\n\t\t});\n\t\tthis._type = options.type;\n\t\tthis.rolloff = options.rolloff;\n\t\treadOnly(this, [\"detune\", \"frequency\", \"gain\", \"Q\"]);\n\t}\n\n\tstatic getDefaults(): FilterOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tQ: 1,\n\t\t\tdetune: 0,\n\t\t\tfrequency: 350,\n\t\t\tgain: 0,\n\t\t\trolloff: -12,\n\t\t\ttype: \"lowpass\" as BiquadFilterType,\n\t\t});\n\t}\n\n\t/**\n\t * The type of the filter. Types: \"lowpass\", \"highpass\",\n\t * \"bandpass\", \"lowshelf\", \"highshelf\", \"notch\", \"allpass\", or \"peaking\".\n\t */\n\tget type(): BiquadFilterType {\n\t\treturn this._type;\n\t}\n\tset type(type: BiquadFilterType) {\n\t\tconst types: BiquadFilterType[] = [\"lowpass\", \"highpass\", \"bandpass\",\n\t\t\t\"lowshelf\", \"highshelf\", \"notch\", \"allpass\", \"peaking\"];\n\t\tthis.assert(types.indexOf(type) !== -1, `Invalid filter type: ${type}`);\n\t\tthis._type = type;\n\t\tthis._filters.forEach(filter => filter.type = type);\n\t}\n\n\t/**\n\t * The rolloff of the filter which is the drop in db\n\t * per octave. Implemented internally by cascading filters.\n\t * Only accepts the values -12, -24, -48 and -96.\n\t */\n\tget rolloff(): number | string {\n\t\treturn this._rolloff;\n\t}\n\tset rolloff(rolloff: number | string) {\n\t\tconst rolloffNum = isNumber(rolloff) ? rolloff : parseInt(rolloff, 10);\n\t\tconst possibilities = [-12, -24, -48, -96];\n\t\tlet cascadingCount = possibilities.indexOf(rolloffNum);\n\t\t// check the rolloff is valid\n\t\tthis.assert(cascadingCount !== -1, `rolloff can only be ${possibilities.join(\", \")}`);\n\t\tcascadingCount += 1;\n\n\t\tthis._rolloff = rolloffNum;\n\t\tthis.input.disconnect();\n\t\tthis._filters.forEach(filter => filter.disconnect());\n\n\t\tthis._filters = new Array(cascadingCount);\n\t\tfor (let count = 0; count < cascadingCount; count++) {\n\t\t\tconst filter = this.context.createBiquadFilter();\n\t\t\tfilter.type = this._type;\n\t\t\tthis.frequency.connect(filter.frequency);\n\t\t\tthis.detune.connect(filter.detune);\n\t\t\tthis.Q.connect(filter.Q);\n\t\t\tthis.gain.connect(filter.gain);\n\t\t\tthis._filters[count] = filter;\n\t\t}\n\t\tthis._internalChannels = this._filters;\n\t\tconnectSeries(this.input, ...this._internalChannels, this.output);\n\t}\n\n\t/**\n\t * Get the frequency response curve. This curve represents how the filter\n\t * responses to frequencies between 20hz-20khz.\n\t * @param  len The number of values to return\n\t * @return The frequency response curve between 20-20kHz\n\t */\n\tgetFrequencyResponse(len: number = 128): Float32Array {\n\t\t// start with all 1s\n\t\tconst totalResponse = new Float32Array(len).map(() => 1);\n\t\tconst freqValues = new Float32Array(len);\n\t\tfor (let i = 0; i < len; i++) {\n\t\t\tconst norm = Math.pow(i / len, 2);\n\t\t\tconst freq = norm * (20000 - 20) + 20;\n\t\t\tfreqValues[i] = freq;\n\t\t}\n\t\tconst magValues = new Float32Array(len);\n\t\tconst phaseValues = new Float32Array(len);\n\t\tthis._filters.forEach(() => {\n\t\t\tconst filterClone = this.context.createBiquadFilter();\n\t\t\tfilterClone.type = this._type;\n\t\t\tfilterClone.Q.value = this.Q.value;\n\t\t\tfilterClone.frequency.value = this.frequency.value as number;\n\t\t\tfilterClone.gain.value = this.gain.value as number;\n\t\t\tfilterClone.getFrequencyResponse(freqValues, magValues, phaseValues);\n\t\t\tmagValues.forEach((val, i) => {\n\t\t\t\ttotalResponse[i] *= val;\n\t\t\t});\n\t\t});\n\t\treturn totalResponse;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._filters.forEach(filter => {\n\t\t\tfilter.disconnect();\n\t\t});\n\t\twritable(this, [\"detune\", \"frequency\", \"gain\", \"Q\"]);\n\t\tthis.frequency.dispose();\n\t\tthis.Q.dispose();\n\t\tthis.detune.dispose();\n\t\tthis.gain.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Frequency, Positive } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Filter } from \"../filter/Filter\";\n\ninterface MultibandSplitOptions extends ToneAudioNodeOptions {\n\tQ: Positive;\n\tlowFrequency: Frequency;\n\thighFrequency: Frequency;\n}\n\n/**\n *  Split the incoming signal into three bands (low, mid, high)\n *  with two crossover frequency controls.\n * ```\n *            +----------------------+\n *          +-> input < lowFrequency +------------------> low\n *          | +----------------------+\n *          |\n *          | +--------------------------------------+\n * input ---+-> lowFrequency < input < highFrequency +--> mid\n *          | +--------------------------------------+\n *          |\n *          | +-----------------------+\n *          +-> highFrequency < input +-----------------> high\n *            +-----------------------+\n * ```\n *\n *  @param lowFrequency the low/mid crossover frequency\n *  @param highFrequency the mid/high crossover frequency\n */\nexport class MultibandSplit extends ToneAudioNode<MultibandSplitOptions> {\n\n\treadonly name = \"MultibandSplit\";\n\n\t/**\n\t *  the input\n\t */\n\treadonly input = new Gain({ context: this.context });\n\n\t/**\n\t * no output node, use either low, mid or high outputs\n\t */\n\treadonly output = undefined;\n\n\t/**\n\t *  The low band.\n\t */\n\treadonly low = new Filter({\n\t\tcontext: this.context,\n\t\tfrequency: 0,\n\t\ttype: \"lowpass\",\n\t});\n\n\t/**\n\t *  the lower filter of the mid band\n\t */\n\tprivate _lowMidFilter = new Filter({\n\t\tcontext: this.context,\n\t\tfrequency: 0,\n\t\ttype: \"highpass\",\n\t});\n\n\t/**\n\t *  The mid band output.\n\t */\n\treadonly mid = new Filter({\n\t\tcontext: this.context,\n\t\tfrequency: 0,\n\t\ttype: \"lowpass\",\n\t});\n\n\t/**\n\t *  The high band output.\n\t */\n\treadonly high = new Filter({\n\t\tcontext: this.context,\n\t\tfrequency: 0,\n\t\ttype: \"highpass\",\n\t});\n\n\t/**\n\t *  The low/mid crossover frequency.\n\t */\n\treadonly lowFrequency: Signal<Frequency>;\n\n\t/**\n\t *  The mid/high crossover frequency.\n\t */\n\treadonly highFrequency: Signal<Frequency>;\n\n\tprotected _internalChannels = [this.low, this.mid, this.high];\n\n\t/**\n\t *  The Q or Quality of the filter\n\t */\n\treadonly Q: Signal<Positive>;\n\n\tconstructor(lowFrequency?: Frequency, highFrequency?: Frequency);\n\tconstructor(options?: Partial<MultibandSplitOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(MultibandSplit.getDefaults(), arguments, [\"lowFrequency\", \"highFrequency\"]));\n\t\tconst options = optionsFromArguments(MultibandSplit.getDefaults(), arguments, [\"lowFrequency\", \"highFrequency\"]);\n\n\t\tthis.lowFrequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.lowFrequency,\n\t\t});\n\n\t\tthis.highFrequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.highFrequency,\n\t\t});\n\n\t\tthis.Q = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.Q,\n\t\t});\n\n\t\tthis.input.fan(this.low, this.high);\n\t\tthis.input.chain(this._lowMidFilter, this.mid);\n\t\t// the frequency control signal\n\t\tthis.lowFrequency.fan(this.low.frequency, this._lowMidFilter.frequency);\n\t\tthis.highFrequency.fan(this.mid.frequency, this.high.frequency);\n\t\t// the Q value\n\t\tthis.Q.connect(this.low.Q);\n\t\tthis.Q.connect(this._lowMidFilter.Q);\n\t\tthis.Q.connect(this.mid.Q);\n\t\tthis.Q.connect(this.high.Q);\n\n\t\treadOnly(this, [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n\t}\n\n\tstatic getDefaults(): MultibandSplitOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tQ: 1,\n\t\t\thighFrequency: 2500,\n\t\t\tlowFrequency: 400,\n\t\t});\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\twritable(this, [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n\t\tthis.low.dispose();\n\t\tthis._lowMidFilter.dispose();\n\t\tthis.mid.dispose();\n\t\tthis.high.dispose();\n\t\tthis.lowFrequency.dispose();\n\t\tthis.highFrequency.dispose();\n\t\tthis.Q.dispose();\n\t\treturn this;\n\t}\n\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Cents, Decibels, Frequency, GainFactor, Positive } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { MultibandSplit } from \"../channel/MultibandSplit\";\n\ninterface EQ3Options extends ToneAudioNodeOptions {\n\tlow: Decibels;\n\tmid: Decibels;\n\thigh: Decibels;\n\tlowFrequency: Frequency;\n\thighFrequency: Frequency;\n}\n\nexport class EQ3 extends ToneAudioNode<EQ3Options> {\n\n\treadonly name = \"EQ3\";\n\n\t/**\n\t *  the input\n\t */\n\treadonly input: MultibandSplit;\n\n\t/**\n\t *  the output\n\t */\n\treadonly output = new Gain({ context: this.context });\n\n\tprivate _multibandSplit: MultibandSplit;\n\n\t/**\n\t *  The gain for the lower signals\n\t */\n\tprivate _lowGain: Gain<Decibels>;\n\n\t/**\n\t *  The gain for the mid signals\n\t */\n\tprivate _midGain: Gain<Decibels>;\n\n\t/**\n\t *  The gain for the high signals\n\t */\n\tprivate _highGain: Gain<Decibels>;\n\n\t/**\n\t * The gain in decibels of the low part\n\t */\n\treadonly low: Param<Decibels>;\n\n\t/**\n\t * The gain in decibels of the mid part\n\t */\n\treadonly mid: Param<Decibels>;\n\n\t/**\n\t * The gain in decibels of the high part\n\t */\n\treadonly high: Param<Decibels>;\n\n\t/**\n\t *  The Q value for all of the filters.\n\t */\n\treadonly Q: Signal<Positive>;\n\n\t/**\n\t *  The low/mid crossover frequency.\n\t */\n\treadonly lowFrequency: Signal<Frequency>;\n\n\t/**\n\t *  The mid/high crossover frequency.\n\t */\n\treadonly highFrequency: Signal<Frequency>;\n\n\tprotected _internalChannels: ToneAudioNode[] = [];\n\n\tconstructor(lowLevel?: Decibels, midLevel?: Decibels, highLevel?: Decibels);\n\tconstructor(options: Partial<EQ3Options>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(EQ3.getDefaults(), arguments, [\"low\", \"mid\", \"high\"]));\n\t\tconst options = optionsFromArguments(EQ3.getDefaults(), arguments, [\"low\", \"mid\", \"high\"]);\n\n\t\tthis.input = this._multibandSplit = new MultibandSplit({\n\t\t\tcontext: this.context,\n\t\t\thighFrequency: options.highFrequency,\n\t\t\tlowFrequency: options.lowFrequency,\n\t\t});\n\n\t\tthis._lowGain = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: options.low,\n\t\t\tunits: \"decibels\",\n\t\t});\n\n\t\tthis._midGain = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: options.mid,\n\t\t\tunits: \"decibels\",\n\t\t});\n\n\t\tthis._highGain = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: options.high,\n\t\t\tunits: \"decibels\",\n\t\t});\n\n\t\tthis.low = this._lowGain.gain;\n\t\tthis.mid = this._midGain.gain;\n\t\tthis.high = this._highGain.gain;\n\t\tthis.Q = this._multibandSplit.Q;\n\t\tthis.lowFrequency = this._multibandSplit.lowFrequency;\n\t\tthis.highFrequency\t= this._multibandSplit.highFrequency;\n\n\t\t// the frequency bands\n\t\tthis._multibandSplit.low.chain(this._lowGain, this.output);\n\t\tthis._multibandSplit.mid.chain(this._midGain, this.output);\n\t\tthis._multibandSplit.high.chain(this._highGain, this.output);\n\n\t\treadOnly(this, [\"low\", \"mid\", \"high\", \"lowFrequency\", \"highFrequency\"]);\n\t\tthis._internalChannels = [this._multibandSplit];\n\t}\n\n\tstatic getDefaults(): EQ3Options {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\thigh : 0,\n\t\t\thighFrequency : 2500,\n\t\t\tlow : 0,\n\t\t\tlowFrequency : 400,\n\t\t\tmid : 0,\n\t\t});\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\twritable(this, [\"low\", \"mid\", \"high\", \"lowFrequency\", \"highFrequency\"]);\n\t\tthis._multibandSplit.dispose();\n\t\tthis.lowFrequency.dispose();\n\t\tthis.highFrequency.dispose();\n\t\tthis._lowGain.dispose();\n\t\tthis._midGain.dispose();\n\t\tthis._highGain.dispose();\n\t\tthis.low.dispose();\n\t\tthis.mid.dispose();\n\t\tthis.high.dispose();\n\t\tthis.Q.dispose();\n\t\treturn this;\n\t}\n\n}\n","import { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Decibels, Positive, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\n\ninterface CompressorOptions extends ToneAudioNodeOptions {\n\tattack: Time;\n\tknee: Decibels;\n\tratio: Positive;\n\trelease: Time;\n\tthreshold: Decibels;\n}\n\n/**\n * Compressor is a thin wrapper around the Web Audio\n * [DynamicsCompressorNode](http://webaudio.github.io/web-audio-api/#the-dynamicscompressornode-interface).\n * Compression reduces the volume of loud sounds or amplifies quiet sounds\n * by narrowing or \"compressing\" an audio signal's dynamic range.\n * Read more on [Wikipedia](https://en.wikipedia.org/wiki/Dynamic_range_compression).\n *\n * @param threshold The value above which the compression starts to be applied.\n * @param ratio The gain reduction ratio.\n * @example\n * var comp = new Compressor(-30, 3);\n */\nexport class Compressor extends ToneAudioNode<CompressorOptions> {\n\n\treadonly name = \"Compressor\";\n\n\t/**\n\t *  the compressor node\n\t */\n\tprivate _compressor: DynamicsCompressorNode = this.context.createDynamicsCompressor();\n\tinput = this._compressor;\n\toutput = this._compressor;\n\n\t/**\n\t *  The decibel value above which the compression will start taking effect.\n\t */\n\treadonly threshold: Param<Decibels>;\n\n\t/**\n\t *  The amount of time (in seconds) to reduce the gain by 10dB.\n\t */\n\treadonly attack: Param<Time>;\n\n\t/**\n\t * The amount of time (in seconds) to increase the gain by 10dB.\n\t */\n\treadonly release: Param<Time>;\n\n\t/**\n\t * A decibel value representing the range above the threshold where the\n\t * curve smoothly transitions to the \"ratio\" portion.\n\t */\n\treadonly knee: Param<Decibels>;\n\n\t/**\n\t * The amount of dB change in input for a 1 dB change in output.\n\t */\n\treadonly ratio: Param<Decibels>;\n\n\tconstructor(threshold?: Decibels, ratio?: Positive);\n\tconstructor(options?: Partial<CompressorOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Compressor.getDefaults(), arguments, [\"treshold\", \"ratio\"]));\n\t\tconst options = optionsFromArguments(Compressor.getDefaults(), arguments, [\"treshold\", \"ratio\"]);\n\n\t\tthis.threshold = new Param({\n\t\t\tcontext: this.context,\n\t\t\tconvert : false,\n\t\t\tparam : this._compressor.threshold,\n\t\t\tunits : \"decibels\",\n\t\t\tvalue: options.threshold,\n\t\t});\n\n\t\tthis.attack = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._compressor.attack,\n\t\t\tunits: \"time\",\n\t\t\tvalue: options.attack,\n\t\t});\n\n\t\tthis.release = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._compressor.release,\n\t\t\tunits: \"time\",\n\t\t\tvalue: options.release,\n\t\t});\n\n\t\tthis.knee = new Param({\n\t\t\tcontext: this.context,\n\t\t\tconvert : false,\n\t\t\tparam : this._compressor.knee,\n\t\t\tunits : \"decibels\",\n\t\t\tvalue: options.knee,\n\t\t});\n\n\t\tthis.ratio = new Param({\n\t\t\tcontext: this.context,\n\t\t\tconvert : false,\n\t\t\tparam : this._compressor.ratio,\n\t\t\tunits : \"positive\",\n\t\t\tvalue: options.ratio,\n\t\t});\n\n\t\t// set the defaults\n\t\treadOnly(this, [\"knee\", \"release\", \"attack\", \"ratio\", \"threshold\"]);\n\t}\n\n\tstatic getDefaults(): CompressorOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tattack : 0.003,\n\t\t\tknee : 30,\n\t\t\tratio : 12,\n\t\t\trelease : 0.25,\n\t\t\tthreshold : -24,\n\t\t});\n\t}\n\n\t/**\n\t * A read-only decibel value for metering purposes, representing the current amount of gain\n\t * reduction that the compressor is applying to the signal. If fed no signal the value will be 0 (no gain reduction).\n\t */\n\tget reduction(): number {\n\t\treturn this._compressor.reduction;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._compressor.disconnect();\n\t\tthis.attack.dispose();\n\t\tthis.release.dispose();\n\t\tthis.threshold.dispose();\n\t\tthis.ratio.dispose();\n\t\tthis.knee.dispose();\n\t\treturn this;\n\t}\n}\n","export { getContext, setContext } from \"./core/Global\";\nexport * from \"./core/index\";\nexport * from \"./source/index\";\nexport * from \"./signal/index\";\nexport * from \"./instrument/index\";\nexport * from \"./event/index\";\nexport * from \"./effect/index\";\nexport * from \"./component/index\";\nimport { Seconds } from \"./core/type/Units\";\n\nimport { getContext } from \"./core/Global\";\nexport { start } from \"./core/Global\";\n/**\n *  The current audio context time\n */\nexport function now(): Seconds {\n\treturn getContext().now();\n}\n\n/**\n * The Transport object belonging to the global Tone.js Context\n */\n// tslint:disable-next-line: variable-name\nexport const Transport = getContext().transport;\n\n/**\n * The Destination (output) belonging to the global Tone.js Context\n */\n// tslint:disable-next-line: variable-name\nexport const Destination = getContext().destination;\n"],"sourceRoot":""}