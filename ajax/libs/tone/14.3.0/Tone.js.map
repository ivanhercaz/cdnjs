{"version":3,"sources":["webpack://Tone/webpack/universalModuleDefinition","webpack://Tone/webpack/bootstrap","webpack://Tone/./node_modules/automation-events/build/es5/bundle.js","webpack://Tone/./Tone/version.ts","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/abort-error.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/globals.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/invalid-state-error.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/get-native-context.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/is-constructible.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/split-import-statements.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/add-audio-worklet-module.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/analyser-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/get-value-for-key.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/get-native-audio-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/is-owned-by-context.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/get-audio-graph.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/get-audio-node-connections.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/get-audio-node-renderer.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/render-inputs-of-audio-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/test-audio-buffer-copy-channel-methods-subarray-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/index-size-error.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/wrap-audio-buffer-get-channel-data-method.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/audio-buffer-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/get-event-listeners-of-audio-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/set-internal-state.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/wrap-event-listener.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/audio-buffer-source-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/get-native-audio-param.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/get-audio-param-connections.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/render-inputs-of-audio-param.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/connect-audio-param.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/render-automation.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/get-audio-param-renderer.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/is-valid-latency-hint.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/event-target.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/guards/audio-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/guards/audio-node-output-connection.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/guards/audio-worklet-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/connect-native-audio-node-to-native-audio-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/delete-event-listeners-of-audio-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/disconnect-native-audio-node-from-native-audio-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/insert-element-in-set.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/is-active-audio-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/is-passive-audio-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/pick-element-from-set.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/set-internal-state-to-passive-when-necessary.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/test-audio-node-disconnect-method-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/guards/native-audio-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/audio-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/audio-param-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/read-only-map.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/audio-worklet-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/copy-from-channel.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/copy-to-channel.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/create-nested-arrays.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/audio-worklet-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/get-audio-worklet-processor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/biquad-filter-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/channel-merger-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/channel-splitter-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/constant-source-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/convolver-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/delay-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/disconnect-multiple-outputs.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/dynamics-compressor-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/gain-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/invalid-access-error.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/iir-filter-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/filter-buffer.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/test-promise-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/minimal-offline-audio-context-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/assign-native-audio-node-option.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/assign-native-audio-node-options.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/test-analyser-node-get-float-time-domain-data-method-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/wrap-analyser-node-get-float-time-domain-data-method.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-audio-buffer-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/assign-native-audio-node-audio-param-value.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/wrap-audio-buffer-source-node-start-method-consecutive-calls.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-audio-context-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/compute-buffer-size.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/create-audio-worklet-processor-promise.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/clone-audio-worklet-node-options.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/intercept-connections.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-iir-filter-node-faker-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/not-supported-error.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/offline-audio-context-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/oscillator-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/panner-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/periodic-wave-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/stereo-panner-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/unknown-error.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/wave-shaper-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/module.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/cache-test-result.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/window.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-offline-audio-context-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/is-native-offline-audio-context.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/get-backup-native-context.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-audio-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-analyser-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/analyser-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/wrap-audio-node-disconnect-method.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/detect-cycles.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/guards/delay-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/none-audio-destination-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/convert-number-to-unsigned-long.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/wrap-audio-buffer-copy-channel-methods.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/wrap-audio-buffer-copy-channel-methods-out-of-bounds.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/wrap-audio-buffer-copy-channel-methods-subarray.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/test-audio-buffer-constructor-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/test-audio-scheduled-source-node-start-method-negative-parameters-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/test-audio-scheduled-source-node-stop-method-consecutive-calls-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/test-audio-scheduled-source-node-stop-method-negative-parameters-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/wrap-audio-scheduled-source-node-stop-method-consecutive-calls.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-audio-buffer-source-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/wrap-audio-buffer-source-node-start-method-duration-parameter.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/test-audio-buffer-source-node-start-method-consecutive-calls-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/test-audio-buffer-source-node-start-method-duration-parameter-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/test-audio-buffer-source-node-start-method-offset-clamping-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/wrap-audio-buffer-source-node-start-method-offset-clamping.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/audio-buffer-source-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/audio-param-renderer.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/constants.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/audio-destination-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/audio-destination-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-audio-destination-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-biquad-filter-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/biquad-filter-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/wrap-channel-merger-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-channel-merger-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/channel-merger-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-channel-splitter-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/wrap-channel-splitter-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/channel-splitter-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-gain-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-constant-source-node-faker-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-constant-source-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/constant-source-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-convolver-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/convolver-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-delay-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/delay-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-dynamics-compressor-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/dynamics-compressor-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/gain-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-script-processor-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/render-native-offline-audio-context.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/test-offline-audio-context-current-time-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/iir-filter-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/wrap-iir-filter-node-get-frequency-response-method.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-iir-filter-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/minimal-base-audio-context-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/audio-listener-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-oscillator-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/oscillator-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-wave-shaper-node-faker-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-wave-shaper-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-panner-node-faker-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-panner-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/panner-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-periodic-wave-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-stereo-panner-node-faker-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-stereo-panner-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/stereo-panner-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/wave-shaper-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/is-secure-context.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/expose-current-frame-and-current-time.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/evaluate-source.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/fetch-source.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/is-native-context.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/base-audio-context-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/decode-audio-data.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/detach-array-buffer.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/data-clone-error.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/encoding-error.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/media-element-audio-source-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-media-element-audio-source-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/media-stream-audio-source-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-media-stream-audio-source-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/media-stream-track-audio-source-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-media-stream-track-audio-source-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/audio-context-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/connect-multiple-outputs.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-audio-worklet-node-faker-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/create-audio-worklet-processor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-audio-worklet-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/test-clonability-of-audio-worklet-node-options.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-audio-worklet-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/minimal-audio-context-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/create-native-offline-audio-context.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/start-rendering.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/is-any-audio-node.js","webpack://Tone/./Tone/core/context/AudioContext.ts","webpack://Tone/./Tone/core/clock/Ticker.ts","webpack://Tone/./Tone/core/util/TypeCheck.ts","webpack://Tone/./Tone/core/util/AdvancedTypeCheck.ts","webpack://Tone/./Tone/core/util/Defaults.ts","webpack://Tone/./Tone/core/util/Debug.ts","webpack://Tone/./Tone/core/Tone.ts","webpack://Tone/./Tone/core/util/Emitter.ts","webpack://Tone/./Tone/core/util/Timeline.ts","webpack://Tone/./Tone/core/context/ContextInitialization.ts","webpack://Tone/./Tone/core/context/Context.ts","webpack://Tone/./Tone/core/context/OfflineContext.ts","webpack://Tone/./Tone/core/Global.ts","webpack://Tone/./Tone/core/type/Conversions.ts","webpack://Tone/./Tone/core/type/TimeBase.ts","webpack://Tone/./Tone/core/type/Time.ts","webpack://Tone/./Tone/core/type/Frequency.ts","webpack://Tone/./Tone/core/type/TransportTime.ts","webpack://Tone/./Tone/core/context/ToneWithContext.ts","webpack://Tone/./Tone/core/context/Param.ts","webpack://Tone/./Tone/core/context/ToneAudioNode.ts","webpack://Tone/./Tone/core/util/Interface.ts","webpack://Tone/./Tone/core/context/Gain.ts","webpack://Tone/./Tone/core/context/ToneAudioBuffer.ts","webpack://Tone/./Tone/core/context/Offline.ts","webpack://Tone/./Tone/core/context/ToneAudioBuffers.ts","webpack://Tone/./Tone/core/context/Delay.ts","webpack://Tone/./Tone/core/util/StateTimeline.ts","webpack://Tone/./Tone/core/clock/TickSignal.ts","webpack://Tone/./Tone/core/clock/TickSource.ts","webpack://Tone/./Tone/core/clock/Clock.ts","webpack://Tone/./Tone/core/type/Ticks.ts","webpack://Tone/./Tone/core/type/Midi.ts","webpack://Tone/./Tone/core/util/Draw.ts","webpack://Tone/./Tone/core/util/IntervalTimeline.ts","webpack://Tone/./Tone/component/channel/Volume.ts","webpack://Tone/./Tone/core/context/Destination.ts","webpack://Tone/./Tone/core/clock/TransportEvent.ts","webpack://Tone/./Tone/core/clock/TransportRepeatEvent.ts","webpack://Tone/./Tone/core/clock/Transport.ts","webpack://Tone/./Tone/source/Source.ts","webpack://Tone/./Tone/source/OneShotSource.ts","webpack://Tone/./Tone/source/buffer/BufferSource.ts","webpack://Tone/./Tone/source/Noise.ts","webpack://Tone/./Tone/signal/Signal.ts","webpack://Tone/./Tone/source/oscillator/OscillatorNode.ts","webpack://Tone/./Tone/source/oscillator/Oscillator.ts","webpack://Tone/./Tone/signal/SignalOperator.ts","webpack://Tone/./Tone/signal/WaveShaper.ts","webpack://Tone/./Tone/signal/AudioToGain.ts","webpack://Tone/./Tone/signal/Multiply.ts","webpack://Tone/./Tone/source/oscillator/AMOscillator.ts","webpack://Tone/./Tone/source/oscillator/FMOscillator.ts","webpack://Tone/./Tone/source/oscillator/PulseOscillator.ts","webpack://Tone/./Tone/source/oscillator/FatOscillator.ts","webpack://Tone/./Tone/source/oscillator/PWMOscillator.ts","webpack://Tone/./Tone/source/oscillator/OmniOscillator.ts","webpack://Tone/./Tone/source/buffer/Player.ts","webpack://Tone/./Tone/signal/Add.ts","webpack://Tone/./Tone/signal/Abs.ts","webpack://Tone/./Tone/signal/GainToAudio.ts","webpack://Tone/./Tone/signal/Negate.ts","webpack://Tone/./Tone/signal/Subtract.ts","webpack://Tone/./Tone/signal/Zero.ts","webpack://Tone/./Tone/component/envelope/Envelope.ts","webpack://Tone/./Tone/component/envelope/AmplitudeEnvelope.ts","webpack://Tone/./Tone/instrument/Instrument.ts","webpack://Tone/./Tone/instrument/Monophonic.ts","webpack://Tone/./Tone/instrument/Synth.ts","webpack://Tone/./Tone/instrument/Sampler.ts","webpack://Tone/./Tone/instrument/PolySynth.ts","webpack://Tone/./Tone/instrument/MembraneSynth.ts","webpack://Tone/./Tone/event/ToneEvent.ts","webpack://Tone/./Tone/event/Part.ts","webpack://Tone/./Tone/event/Sequence.ts","webpack://Tone/./Tone/component/channel/CrossFade.ts","webpack://Tone/./Tone/effect/Effect.ts","webpack://Tone/./Tone/effect/FeedbackEffect.ts","webpack://Tone/./Tone/effect/FeedbackDelay.ts","webpack://Tone/./Tone/effect/Convolver.ts","webpack://Tone/./Tone/component/channel/Merge.ts","webpack://Tone/./Tone/effect/Reverb.ts","webpack://Tone/./Tone/component/analysis/Analyser.ts","webpack://Tone/./Tone/component/filter/Filter.ts","webpack://Tone/./Tone/component/channel/MultibandSplit.ts","webpack://Tone/./Tone/component/filter/EQ3.ts","webpack://Tone/./Tone/component/dynamics/Compressor.ts","webpack://Tone/./Tone/index.ts","webpack://Tone/./node_modules/@babel/runtime/helpers/createClass.js","webpack://Tone/./node_modules/@babel/runtime/helpers/classCallCheck.js","webpack://Tone/./node_modules/@babel/runtime/helpers/nonIterableRest.js","webpack://Tone/./node_modules/@babel/runtime/helpers/iterableToArrayLimit.js","webpack://Tone/./node_modules/@babel/runtime/helpers/arrayWithHoles.js","webpack://Tone/./node_modules/@babel/runtime/helpers/slicedToArray.js"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","_slicedToArray","_classCallCheck","_createClass","createExtendedExponentialRampToValueAutomationEvent","endTime","insertTime","type","createExtendedLinearRampToValueAutomationEvent","createSetValueAutomationEvent","startTime","createSetValueCurveAutomationEvent","values","duration","getTargetValueAtTime","time","valueAtStartTime","_ref","target","timeConstant","Math","exp","isExponentialRampToValueAutomationEvent","automationEvent","isLinearRampToValueAutomationEvent","isAnyRampToValueAutomationEvent","isSetValueAutomationEvent","isSetValueCurveAutomationEvent","getValueOfAutomationEventAtIndexAtTime","automationEvents","index","defaultValue","undefined","length","getEndTimeAndValueOfPreviousAutomationEvent","currentAutomationEvent","nextAutomationEvent","isCancelAndHoldAutomationEvent","isCancelScheduledValuesAutomationEvent","getEventTime","cancelTime","getExponentialRampValueAtTime","pow","getLinearRampValueAtTime","getValueCurveValueAtTime","theoreticIndex","lowerIndex","floor","upperIndex","ceil","interpolateValue","isSetTargetAutomationEvent","AutomationEventList","_automationEvents","_currenTime","_defaultValue","key","Symbol","iterator","eventTime","findIndex","removedAutomationEvent","slice","lastAutomationEvent","Error","startValue","truncatedAutomationEvent","push","getValue","Float32Array","_index","previousAutomationEvent","persistentAutomationEvent","splice","remainingAutomationEvents","firstRemainingAutomationEvent","unshift","_getEndTimeAndValueOf","_getEndTimeAndValueOf2","_getEndTimeAndValueOf3","_getEndTimeAndValueOf4","_startTime","_value","createCancelAndHoldAutomationEvent","createCancelScheduledValuesAutomationEvent","createExponentialRampToValueAutomationEvent","createLinearRampToValueAutomationEvent","createSetTargetAutomationEvent","abort_error_createAbortError","DOMException","err","code","ACTIVE_AUDIO_NODE_STORE","WeakSet","AUDIO_NODE_STORE","WeakMap","AUDIO_GRAPHS","AUDIO_PARAM_STORE","AUDIO_PARAM_AUDIO_NODE_STORE","AUXILIARY_GAIN_NODE_STORE","BACKUP_NATIVE_CONTEXT_STORE","CONTEXT_STORE","DETACHED_ARRAY_BUFFERS","EVENT_LISTENERS","NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS","NODE_TO_PROCESSOR_MAPS","TEST_RESULTS","invalid_state_error_createInvalidStateError","getNativeContext","context","nativeContext","handler","construct","IMPORT_STATEMENT_REGEX","splitImportStatements","source","url","importStatements","sourceWithoutImportStatements","replace","result","match","unresolvedUrl","importStatementWithResolvedUrl","URL","toString","join","verifyParameterDescriptors","parameterDescriptors","Array","isArray","TypeError","verifyProcessorCtor","processorCtor","constructible","Proxy","_a","isConstructible","process","DEFAULT_OPTIONS","channelCount","channelCountMode","channelInterpretation","fftSize","maxDecibels","minDecibels","smoothingTimeConstant","get_value_for_key_getValueForKey","map","getNativeAudioNode","audioNode","isOwnedByContext","nativeAudioNode","getAudioGraph","get_audio_node_connections_getAudioNodeConnections","audioGraph","nodes","getAudioNodeRenderer","audioNodeConnections","renderer","renderInputsOfAudioNode","nativeOfflineAudioContext","Promise","all","activeInputs","connections","input","from","output","render","then","node","connect","reduce","allRenderingPromises","renderingPromises","test_audio_buffer_copy_channel_methods_out_of_bounds_support_testAudioBufferCopyChannelMethodsOutOfBoundsSupport","nativeAudioBuffer","copyToChannel","test_audio_buffer_copy_channel_methods_subarray_support_testAudioBufferCopyChannelMethodsSubarraySupport","copyFromChannel","index_size_error_createIndexSizeError","wrapAudioBufferGetChannelDataMethod","audioBuffer","getChannelData","channel","audio_buffer_constructor_DEFAULT_OPTIONS","numberOfChannels","getEventListenersOfAudioNode","setInternalState","internalState","has","add","delete","forEach","eventListener","wrapEventListener","event","descriptor","defineProperties","currentTarget","audio_buffer_source_node_constructor_DEFAULT_OPTIONS","buffer","loop","loopEnd","loopStart","playbackRate","getNativeAudioParam","audioParam","getAudioParamConnections","params","renderInputsOfAudioParam","nativeAudioParam","audioParamConnections","connectAudioParam","renderAutomation","getAudioParamRenderer","replay","isValidLatencyHint","latencyHint","event_target_EventTarget","[object Object]","_nativeEventTarget","_listeners","listener","options","wrappedEventListener","set","addEventListener","dispatchEvent","removeEventListener","isAudioNode","audioNodeOrAudioParam","isAudioNodeOutputConnection","outputConnection","isAudioWorkletNode","connectNativeAudioNodeToNativeAudioNode","nativeSourceAudioNode","nativeDestinationAudioNode","inputs","deleteEventListenerOfAudioNode","disconnectNativeAudioNodeFromNativeAudioNode","disconnect","insertElementInSet","element","predicate","ignoreDuplicates","lmnt","isActiveAudioNode","isPassiveAudioNode","pickElementFromSet","matchingElements","filter","matchingElement","setInternalStateToPassiveWhenNecessary","every","size","testAudioNodeDisconnectMethodSupport","nativeAudioContext","resolve","analyzer","createScriptProcessor","dummy","createGain","ones","createBuffer","channelData","createBufferSource","destination","onaudioprocess","chnnlDt","inputBuffer","some","sample","stop","start","isNativeAudioNode","nativeAudioNodeOrAudioParam","addActiveInputConnectionToAudioNode","activeInputConnection","addActiveInputConnectionToAudioParam","addPassiveInputConnectionToAudioNode","passiveInputs","passiveInputConnections","Set","passiveInputConnection","addPassiveInputConnectionToAudioParam","deletePassiveInputConnectionToAudioNode","matchingConnection","deletePassiveInputConnectionToAudioParam","addConnectionToAudioNodeOfAudioContext","outputs","eventListeners","partialConnection","deleteActiveInputConnectionToAudioNode","addConnectionToAudioParamOfAudioContext","deleteActiveInputConnectionToAudioParam","deleteActiveInputConnection","activeInputConnections","deleteInputsOfAudioNode","deleteInputConnectionOfAudioNode","deleteInputsOfAudioParam","deleteInputConnectionOfAudioParam","audioParamRenderer","ReadOnlyMap","parameters","_map","Map","entries","callback","thisArg","keys","audio_worklet_node_constructor_DEFAULT_OPTIONS","numberOfInputs","numberOfOutputs","outputChannelCount","parameterData","processorOptions","parent","channelNumber","bufferOffset","byteLength","slicedInput","BYTES_PER_ELEMENT","createNestedArrays","x","y","arrays","array","j","processBuffer","async","proxy","renderedBuffer","processorConstructor","numberOfInputChannels","numberOfOutputChannels","sum","processedBuffer","sampleRate","audioWorkletProcessor","nodeToProcessorMap","nativeAudioWorkletNode","getAudioWorkletProcessor","prmtrs","k","potentiallyEmptyInputs","activeSourceFlag","outputChannelSplitterNodeOutput","error","ErrorEvent","biquad_filter_node_constructor_DEFAULT_OPTIONS","Q","detune","frequency","gain","channel_merger_node_constructor_DEFAULT_OPTIONS","channel_splitter_node_constructor_DEFAULT_OPTIONS","constant_source_node_constructor_DEFAULT_OPTIONS","offset","convolver_node_constructor_DEFAULT_OPTIONS","disableNormalization","delay_node_constructor_DEFAULT_OPTIONS","delayTime","maxDelayTime","getOutputAudioNodeAtIndex","createIndexSizeError","outputAudioNodes","outputAudioNode","dynamics_compressor_node_constructor_DEFAULT_OPTIONS","attack","knee","ratio","release","threshold","gain_node_constructor_DEFAULT_OPTIONS","invalid_access_error_createInvalidAccessError","iir_filter_node_constructor_DEFAULT_OPTIONS","filterBuffer","feedback","feedbackLength","feedforward","feedforwardLength","minLength","xBuffer","yBuffer","bufferIndex","bufferLength","inputLength","test_promise_support_testPromiseSupport","uint32Array","Uint32Array","promise","decodeAudioData","catch","minimal_offline_audio_context_constructor_DEFAULT_OPTIONS","assignNativeAudioNodeOption","option","assignNativeAudioNodeOptions","testAnalyserNodeGetFloatTimeDomainDataMethodSupport","nativeAnalyserNode","getFloatTimeDomainData","assignNativeAudioNodeAudioParamValue","wrapAudioScheduledSourceNodeStartMethodNegativeParameters","nativeAudioScheduledSourceNode","when","RangeError","wrapAudioScheduledSourceNodeStopMethodNegativeParameters","nativeAudioBufferSourceNode","computeBufferSize","baseLatency","max","min","round","log2","createAudioWorkletProcessorPromise","audioWorkletNodeOptions","reject","port1","port2","MessageChannel","onmessage","data","close","onmessageerror","postMessage","cloneAudioWorkletNodeOptions","interceptConnections","original","interceptor","apply","arguments","divide","a","b","denominator","evaluatePolynomial","coefficient","z","not_supported_error_createNotSupportedError","offline_audio_context_constructor_DEFAULT_OPTIONS","oscillator_node_constructor_DEFAULT_OPTIONS","panner_node_constructor_DEFAULT_OPTIONS","coneInnerAngle","coneOuterAngle","coneOuterGain","distanceModel","maxDistance","orientationX","orientationY","orientationZ","panningModel","positionX","positionY","positionZ","refDistance","rolloffFactor","periodic_wave_constructor_DEFAULT_OPTIONS","stereo_panner_node_constructor_DEFAULT_OPTIONS","pan","unknown_error_createUnknownError","wave_shaper_node_constructor_DEFAULT_OPTIONS","curve","oversample","module_cacheTestResult","ongoingTests","tester","test","cachedTestResult","ongoingTest","synchronousTestResult","finalTestResult","createCacheTestResult","module_window","window","createWindow","module_nativeOfflineAudioContextConstructor","OfflineAudioContext","webkitOfflineAudioContext","createNativeOfflineAudioContextConstructor","module_isNativeOfflineAudioContext","nativeOfflineAudioContextConstructor","anyContext","createIsNativeOfflineAudioContext","module_nativeAudioContextConstructor","AudioContext","webkitAudioContext","createNativeAudioContextConstructor","module_getBackupNativeContext","isNativeOfflineAudioContext","nativeAudioContextConstructor","state","backupNativeContext","bckpNtveCntxt","createGetBackupNativeContext","module_createNativeAudioNode","getBackupNativeContext","factoryFunction","createNativeAudioNodeFactory","module_createNativeAnalyserNode","cacheTestResult","createNativeAudioNode","ntvCntxt","createAnalyser","byteTimeDomainData","Uint8Array","getByteTimeDomainData","createNativeAnalyserNodeFactory","module_createAnalyserNodeRenderer","createNativeAnalyserNode","renderedNativeAnalyserNodes","renderedNativeAnalyserNode","createAnalyserNode","createAnalyserNodeRendererFactory","module_audioNodeConstructor","createInvalidAccessError","createNotSupportedError","detectCycles","audioNodeRenderer","super","_context","_nativeAudioNode","returnValue","connectionsToDestination","connection","bind","destinationOrOutput","clear","filteredConnections","wrapAudioNodeDisconnectMethod","audioNoderRender","addAudioNode","isOffline","auxiliaryGainNodes","nativeGainNode","addConnectionToAudioNodeOfOfflineAudioContext","addConnectionToAudioParamOfOfflineAudioContext","audioNodeConnectionsOfSource","deleteAnyConnection","deleteConnectionAtOutput","numberOfDeletedConnections","deleteConnectionToDestination","createAudioNodeConstructor","audioParamAudioNodeStore","getAudioNodeConnections","getValueForKey","audioNodeOfDestination","isDelayNode","createDetectCycles","module_noneAudioDestinationNodeConstructor","audioNodeConstructor","createNoneAudioDestinationNodeConstructor","analyserNodeConstructor","createAnalyserNodeRenderer","noneAudioDestinationNodeConstructor","mergedOptions","_nativeAnalyserNode","frequencyBinCount","getByteFrequencyData","getFloatFrequencyData","createAnalyserNodeConstructor","module_nativeAudioBufferConstructor","AudioBuffer","createNativeAudioBufferConstructor","convertNumberToUnsignedLong","unit32Array","createConvertNumberToUnsignedLong","module_wrapAudioBufferCopyChannelMethods","channelNumberAsNumber","bufferOffsetAsNumber","audioBufferLength","destinationLength","sourceLength","createWrapAudioBufferCopyChannelMethods","module_wrapAudioBufferCopyChannelMethodsOutOfBounds","createWrapAudioBufferCopyChannelMethodsOutOfBounds","module_wrapAudioBufferCopyChannelMethodsSubarray","subarray","createWrapAudioBufferCopyChannelMethodsSubarray","audioBufferConstructor","nativeAudioBufferConstructor","testNativeAudioBufferConstructorSupport","wrapAudioBufferCopyChannelMethods","wrapAudioBufferCopyChannelMethodsOutOfBounds","wrapAudioBufferCopyChannelMethodsSubarray","_1","_2","_3","_","createAudioBufferConstructor","createTestAudioBufferConstructorSupport","module_testAudioScheduledSourceNodeStartMethodNegativeParametersSupport","createOscillator","createTestAudioScheduledSourceNodeStartMethodNegativeParametersSupport","module_testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport","createTestAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport","module_testAudioScheduledSourceNodeStopMethodNegativeParametersSupport","createTestAudioScheduledSourceNodeStopMethodNegativeParametersSupport","module_wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls","disconnectGainNode","isStopped","setValueAtTime","createWrapAudioScheduledSourceNodeStopMethodConsecutiveCalls","module_createNativeAudioBufferSourceNode","testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport","testAudioBufferSourceNodeStartMethodDurationParameterSupport","testAudioBufferSourceNodeStartMethodOffsetClampingSupport","testAudioScheduledSourceNodeStartMethodNegativeParametersSupport","testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport","testAudioScheduledSourceNodeStopMethodNegativeParametersSupport","wrapAudioBufferSourceNodeStartMethodOffsetClampling","wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls","isScheduled","Number","POSITIVE_INFINITY","stopTime","actualStartTime","currentTime","durationInBufferTime","wrapAudioBufferSourceNodeStartMethodDurationParameter","createNativeAudioBufferSourceNodeFactory","createTestAudioBufferSourceNodeStartMethodConsecutiveCallsSupport","offlineAudioContext","audioBufferSourceNode","oncomplete","startRendering","createTestAudioBufferSourceNodeStartMethodDurationParameterSupport","createTestAudioBufferSourceNodeStartMethodOffsetClampingSupport","clampedOffset","module_createAudioBufferSourceNodeRenderer","createNativeAudioBufferSourceNode","renderedNativeAudioBufferSourceNodes","renderedNativeAudioBufferSourceNode","nativeAudioBufferSourceNodeIsOwnedByContext","createAudioBufferSourceNode","createAudioBufferSourceNodeRendererFactory","module_createAudioParam","createAudioParamRenderer","isAudioParamOfOfflineAudioContext","maxValue","minValue","automationEventList","bundle","cancelAndHoldAtTime","flush","previousLastEvent","pop","currentLastEvent","cancelScheduledValues","exponentialRampToValueAtTime","linearRampToValueAtTime","setValueCurveAtTime","setTargetAtTime","firstSample","lastSample","numberOfInterpolatedValues","interpolatedValues","timeOfLastSample","createAudioParamFactory","audioBufferSourceNodeConstructor","createAudioBufferSourceNodeRenderer","createAudioParam","createInvalidStateError","audioBufferSourceNodeRenderer","_audioBufferSourceNodeRenderer","_isBufferNullified","_isBufferSet","_nativeAudioBufferSourceNode","_onended","_playbackRate","fill","onended","wrappedListener","nativeOnEnded","setInternalStateToInactive","setTimeout","createAudioBufferSourceNodeConstructor","module_audioDestinationNodeConstructor","createAudioDestinationNodeRenderer","createNativeAudioDestinationNode","nativeAudioDestinationNode","audioDestinationNodeRenderer","audioWorkletGlobalScope","_isNodeOfNativeOfflineAudioContext","_nativeAudioDestinationNode","maxChannelCount","createAudioDestinationNodeConstructor","nativeAudioDestinationNodePromise","createAudioDestinationNode","isNodeOfNativeOfflineAudioContext","module_createNativeBiquadFilterNode","nativeBiquadFilterNode","createBiquadFilter","createNativeBiquadFilterNodeFactory","biquadFilterNodeConstructor","createBiquadFilterNodeRenderer","createNativeBiquadFilterNode","_Q","_detune","_frequency","_gain","_nativeBiquadFilterNode","frequencyHz","magResponse","phaseResponse","getFrequencyResponse","createBiquadFilterNodeConstructor","renderedNativeBiquadFilterNodes","renderedNativeBiquadFilterNode","nativeBiquadFilterNodeIsOwnedByContext","createBiquadFilterNode","createBiquadFilterNodeRendererFactory","module_wrapChannelMergerNode","channelMergerNode","createWrapChannelMergerNode","module_createNativeChannelMergerNode","wrapChannelMergerNode","nativeChannelMergerNode","createChannelMerger","createNativeChannelMergerNodeFactory","channelMergerNodeConstructor","createChannelMergerNodeRenderer","createNativeChannelMergerNode","createChannelMergerNodeConstructor","renderedNativeAudioNodes","renderedNativeAudioNode","createAudioNode","createChannelMergerNodeRendererFactory","module_createNativeChannelSplitterNode","nativeChannelSplitterNode","createChannelSplitter","channelSplitterNode","wrapChannelSplitterNode","createNativeChannelSplitterNodeFactory","channelSplitterNodeConstructor","createChannelSplitterNodeRenderer","createNativeChannelSplitterNode","channel_splitter_node_constructor_sanitizedOptions","createChannelSplitterNodeConstructor","createChannelSplitterNodeRendererFactory","module_createNativeGainNode","createNativeGainNodeFactory","module_createNativeConstantSourceNodeFaker","createNativeGainNode","audioNodeOptions","gainNode","bufferSize","args","createNativeConstantSourceNodeFakerFactory","module_createNativeConstantSourceNode","createNativeConstantSourceNodeFaker","createConstantSource","nativeConstantSourceNode","createNativeConstantSourceNodeFactory","constantSourceNodeConstructor","createConstantSourceNodeRendererFactory","createNativeConstantSourceNode","constantSourceNodeRenderer","_constantSourceNodeRenderer","_nativeConstantSourceNode","_offset","createConstantSourceNodeConstructor","renderedNativeConstantSourceNodes","renderedNativeConstantSourceNode","nativeConstantSourceNodeIsOwnedByContext","createConstantSourceNode","constant_source_node_renderer_factory_createConstantSourceNodeRendererFactory","module_createNativeConvolverNode","nativeConvolverNode","createConvolver","normalize","createNativeConvolverNodeFactory","convolverNodeConstructor","createConvolverNodeRenderer","createNativeConvolverNode","_nativeConvolverNode","createConvolverNodeConstructor","renderedNativeConvolverNodes","renderedNativeConvolverNode","createConvolverNode","createConvolverNodeRendererFactory","module_createNativeDelayNode","nativeDelayNode","createDelay","createNativeDelayNodeFactory","delayNodeConstructor","createDelayNodeRenderer","createNativeDelayNode","_delayTime","createDelayNodeConstructor","renderedNativeDelayNodes","renderedNativeDelayNode","nativeDelayNodeIsOwnedByContext","createDelayNode","createDelayNodeRendererFactory","module_createNativeDynamicsCompressorNode","nativeDynamicsCompressorNode","createDynamicsCompressor","createNativeDynamicsCompressorNodeFactory","dynamicsCompressorNodeConstructor","createDynamicsCompressorNodeRenderer","createNativeDynamicsCompressorNode","_attack","_knee","_nativeDynamicsCompressorNode","_ratio","_release","_threshold","previousChannelCount","reduction","createDynamicsCompressorNodeConstructor","renderedNativeDynamicsCompressorNodes","renderedNativeDynamicsCompressorNode","nativeDynamicsCompressorNodeIsOwnedByContext","createDynamicsCompressorNode","createDynamicsCompressorNodeRendererFactory","module_gainNodeConstructor","createGainNodeRenderer","createGainNodeConstructor","renderedNativeGainNodes","renderedNativeGainNode","nativeGainNodeIsOwnedByContext","createGainNode","createGainNodeRendererFactory","module_createNativeScriptProcessorNode","createNativeScriptProcessorNodeFactory","module_createNativeIIRFilterNodeFaker","createNativeScriptProcessorNode","scriptProcessorNode","bufferIndexes","xBuffers","yBuffers","outputBuffer","nyquist","omega","PI","cos","sin","response","sqrt","atan2","createNativeIIRFilterNodeFakerFactory","module_renderNativeOfflineAudioContext","testOfflineAudioContextCurrentTimeSupport","isOfflineAudioContextCurrentTimeSupported","createRenderNativeOfflineAudioContext","createTestOfflineAudioContextCurrentTimeSupport","module_createIIRFilterNodeRenderer","renderNativeOfflineAudioContext","nativeIIRFilterNode","nativeIIRFilterNodeIsOwnedByContext","createIIRFilter","partialOfflineAudioContext","filteredBuffer","filterFullBuffer","createIIRFilterNodeRendererFactory","iIRFilterNodeConstructor","createNativeIIRFilterNode","createIIRFilterNodeRenderer","wrapIIRFilterNodeGetFrequencyResponseMethod","_nativeIIRFilterNode","createIIRFilterNodeConstructor","createNativeIIRFilterNodeFaker","createNativeIIRFilterNodeFactory","module_minimalBaseAudioContextConstructor","audioDestinationNodeConstructor","createAudioListener","_nativeContext","_destination","_listener","_onstatechange","onstatechange","nativeOnStateChange","createMinimalBaseAudioContextConstructor","nativeListener","forwardX","forwardY","forwardZ","upX","upY","upZ","createFakeAudioParam","constantSourceNode","lastOrientation","lastPosition","orientation","setOrientation","positon","setPosition","createFakeAudioParams","createAudioListenerFactory","module_createNativeOscillatorNode","nativeOscillatorNode","periodicWave","setPeriodicWave","createNativeOscillatorNodeFactory","module_createOscillatorNodeRenderer","createNativeOscillatorNode","renderedNativeOscillatorNodes","renderedNativeOscillatorNode","nativeOscillatorNodeIsOwnedByContext","createOscillatorNode","createOscillatorNodeRendererFactory","oscillatorNodeConstructor","createOscillatorNodeRenderer","oscillatorNodeRenderer","_nativeOscillatorNode","_oscillatorNodeRenderer","createOscillatorNodeConstructor","module_createNativeWaveShaperNodeFaker","negativeWaveShaperNode","createWaveShaper","positiveWaveShaperNode","inputGainNode","invertGainNode","outputGainNode","revertGainNode","unmodifiedCurve","nativeWaveShaperNodeFaker","curveLength","negativeCurve","positiveCurve","centerIndex","createNativeWaveShaperNodeFakerFactory","module_createNativeWaveShaperNode","createNativeWaveShaperNodeFaker","nativeWaveShaperNode","createNativeWaveShaperNodeFactory","module_createNativePannerNodeFaker","createNativeWaveShaperNode","pannerNode","createPanner","SINGLE_CHANNEL_OPTIONS","orientationXGainNode","orientationYGainNode","orientationZGainNode","positionXGainNode","positionYGainNode","positionZGainNode","waveShaperNode","nativePannerNodeFaker","createNativePannerNodeFakerFactory","module_createNativePannerNode","createNativePannerNodeFaker","nativePannerNode","createNativePannerNodeFactory","pannerNodeConstructor","createNativePannerNode","createPannerNodeRenderer","_nativePannerNode","_orientationX","_orientationY","_orientationZ","_positionX","_positionY","_positionZ","createPannerNodeConstructor","renderedNativePannerNodes","renderedNativePannerNode","nativePannerNodeIsOwnedByContext","createPannerNode","createPannerNodeRendererFactory","periodicWaveConstructor","createNativePeriodicWave","createPeriodicWaveConstructor","imag","real","wrappedImag","wrappedReal","createPeriodicWave","createNativePeriodicWaveFactory","module_nativeStereoPannerNodeFakerFactory","DC_CURVE","HALF_PI","SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS","buildInternalGraph","panGainNode","leftWaveShaperCurve","rightWaveShaperCurve","leftGainNode","leftWaveShaperNode","panWaveShaperNode","rightGainNode","rightWaveShaperNode","buildInternalGraphForMono","leftInputForLeftOutputWaveShaperCurve","leftInputForRightOutputWaveShaperCurve","rightInputForLeftOutputWaveShaperCurve","rightInputForRightOutputWaveShaperCurve","CURVE_SIZE","leftInputForLeftOutputGainNode","leftInputForLeftOutputWaveShaperNode","leftInputForRightOutputGainNode","leftInputForRightOutputWaveShaperNode","rightInputForLeftOutputGainNode","rightInputForLeftOutputWaveShaperNode","rightInputForRightOutputGainNode","rightInputForRightOutputWaveShaperNode","buildInternalGraphForStereo","outputNodes","outputNode","createNativeStereoPannerNodeFakerFactory","module_createNativeStereoPannerNode","createNativeStereoPannerNodeFaker","createStereoPanner","nativeStereoPannerNode","createNativeStereoPannerNodeFactory","stereoPannerNodeConstructor","createNativeStereoPannerNode","createStereoPannerNodeRenderer","_pan","createStereoPannerNodeConstructor","renderedNativeStereoPannerNodes","renderedNativeStereoPannerNode","nativeStereoPannerNodeIsOwnedByContext","createStereoPannerNode","createStereoPannerNodeRendererFactory","module_createWaveShaperNodeRenderer","renderedNativeWaveShaperNodes","renderedNativeWaveShaperNode","createWaveShaperNode","createWaveShaperNodeRendererFactory","waveShaperNodeConstructor","createWaveShaperNodeRenderer","_isCurveNullified","_nativeWaveShaperNode","createWaveShaperNodeConstructor","isSecureContext","createIsSecureContext","module_exposeCurrentFrameAndCurrentTime","fn","currentFrame","createExposeCurrentFrameAndCurrentTime","addAudioWorkletModule","createAbortError","exposeCurrentFrameAndCurrentTime","fetchSource","ongoingRequests","resolvedRequests","moduleURL","credentials","absoluteUrl","location","href","audioWorklet","wrappedSource","blob","Blob","createObjectURL","addModule","revokeObjectURL","resolvedRequestsOfContext","ongoingRequestsOfContext","promiseOfOngoingRequest","head","document","SyntaxError","script","createElement","originalOnErrorHandler","onerror","removeErrorEventListenerAndRevokeUrl","message","src","lineno","colno","onload","appendChild","evaluateSource","evaluateAudioWorkletGlobalScope","_AWGS","trim","nodeNameToProcessorConstructorMap","rslvdRqstsFCntxt","ngngRqstsFCntxt","createAddAudioWorkletModule","fetch","ok","text","createFetchSource","module_isNativeContext","createIsNativeContext","module_baseAudioContextConstructor","gainNodeConstructor","minimalBaseAudioContextConstructor","_audioWorklet","constraints","audioData","successCallback","errorCallback","createBaseAudioContextConstructor","createDataCloneError","createEncodingError","isNativeContext","testAudioBufferCopyChannelMethodsOutOfBoundsSupport","testAudioBufferCopyChannelMethodsSubarraySupport","testPromiseSupport","complete","arrayBuffer","detachArrayBuffer","fail","createDecodeAudioData","module_mediaElementAudioSourceNodeConstructor","createNativeMediaElementAudioSourceNode","nativeMediaElementAudioSourceNode","_mediaElement","mediaElement","_nativeMediaElementAudioSourceNode","createMediaElementAudioSourceNodeConstructor","ntvDCntxt","createMediaElementSource","createNativeMediaElementAudioSourceNodeFactory","module_mediaStreamAudioSourceNodeConstructor","createNativeMediaStreamAudioSourceNode","nativeMediaStreamAudioSourceNode","_nativeMediaStreamAudioSourceNode","mediaStream","createMediaStreamAudioSourceNodeConstructor","audioStreamTracks","getAudioTracks","filteredAudioStreamTracks","sort","id","createMediaStreamSource","MediaStream","createNativeMediaStreamAudioSourceNodeFactory","module_mediaStreamTrackAudioSourceNodeConstructor","createNativeMediaStreamTrackAudioSourceNode","createMediaStreamTrackAudioSourceNodeConstructor","mediaStreamTrack","createMediaStreamTrackSource","kind","createNativeMediaStreamTrackAudioSourceNodeFactory","audioContextConstructor","baseAudioContextConstructor","createUnknownError","mediaElementAudioSourceNodeConstructor","mediaStreamAudioSourceNodeConstructor","mediaStreamTrackAudioSourceNodeConstructor","_baseLatency","_nativeAudioContext","_state","revokeState","resolvePromise","resume","suspend","createAudioContextConstructor","module_connectMultipleOutputs","createConnectMultipleOutputs","module_disconnectMultipleOutputs","createDisconnectMultipleOutputs","module_createNativeAudioWorkletNodeFaker","connectMultipleOutputs","disconnectMultipleOutputs","numberOfParameters","messageChannel","gainNodes","inputChannelSplitterNodes","constantSourceNodes","inputChannelMergerNode","outputChannelSplitterNode","outputChannelMergerNodes","parameterMap","outputChannelMergerNode","onprocessorerror","nativeAudioWorkletNodeFaker","port","patchedEventListeners","unpatchedEventListener","handleEvent","patchedEventListener","audioWorkletProcessorPromise","createAudioWorkletProcessor","dWrkltPrcssr","isActive","createNativeAudioWorkletNodeFakerFactory","module_createNativeAudioWorkletNode","createNativeAudioWorkletNodeFaker","nativeAudioWorkletNodeConstructor","hasNoOutput","testClonabilityOfAudioWorkletNodeOptions","createNativeAudioWorkletNodeFactory","module_nativeAudioWorkletNodeConstructor","AudioWorkletNode","createNativeAudioWorkletNodeConstructor","module_createAudioWorkletNodeRenderer","renderedNativeAudioWorkletNodeOrOutputNodes","renderedNativeAudioWorkletNodeOrGainNode","nativeOutputNodes","nativeAudioWorkletNodeIsOwnedByContext","nm","createAudioWorkletNodeRendererFactory","module_createNativeOfflineAudioContext","createAudioWorkletNodeRenderer","createNativeAudioWorkletNode","createChannelCount","sanitizedOptions","_nativeAudioWorkletNode","_numberOfOutputs","_onprocessorerror","_parameters","nativeOnProcessorError","createAudioWorkletNodeConstructor","createMinimalAudioContextConstructor","createCreateNativeOfflineAudioContext","module_startRendering","createStartRendering","offlineAudioContextConstructor","createNativeOfflineAudioContext","delayStateChangeEvent","stopImmediatePropagation","_waitForThePromiseToSettle","_length","_nativeOfflineAudioContext","createMinimalOfflineAudioContextConstructor","createOfflineAudioContextConstructor","isAnyAudioNode","audioNodeStore","anything","AudioNode","createIsAnyAudioNode","globalContext","theWindow","hasAudioContext","getAudioContext","TONE_AUDIO_CONTEXT","Ticker","updateInterval","_callback","_type","_updateInterval","_createClock","_createWorker","toFixed","blobUrl","worker","Worker","_worker","_createTimeout","_this","_timeout","e","_disposeClock","clearTimeout","terminate","interval","dispose","isUndef","arg","isDefined","isFunction","isNumber","isObject","constructor","isBoolean","isString","isNote","isAudioParam","Reflect","AdvancedTypeCheck_isAudioNode","isOfflineAudioContext","isAudioContext","isAudioBuffer","load","noCopy","deepMerge","sources","_i","shift","assign","_b","concat","optionsFromArguments","defaults","argsArray","objKey","opts","indexOf","defaultArg","given","fallback","omitFromObject","obj","omit","prop","assert","statement","Tone_Tone","Tone","debug","_wasDisposed","getDefaults","log","TONE_DEBUG_CLASS","console","version","Emitter_Emitter","_super","Emitter","__extends","on","split","eventName","_events","once","boundCallback","off","eventList","emit","len","mixin","constr","getOwnPropertyDescriptor","Timeline_Timeline","Timeline","_timeline","memory","Timeline_extends","Infinity","valueOf","_search","diff","remove","param","peek","getAfter","getBefore","cancel","after","cancelBefore","previousEvent","beginning","end","midPoint","event_1","nextEvent","_iterate","lowerBound","upperBound","forEachBefore","forEachAfter","forEachBetween","forEachFrom","forEachAtTime","notifyNewContext","onContextInit","cb","notifyCloseContext","onContextClose","Context_Context","Context","_constants","_timeouts","_timeoutIds","_initialized","_latencyHint","lookAhead","_ticker","clockSource","_timeoutLoop","Context_extends","initialize","ctx","_transport","t","hint","lookAheadValue","now","sent","getConstant","val","arr","constant","firstEvent","timeout","OfflineContext_OfflineContext","OfflineContext","channels","_currentTime","_duration","OfflineContext_extends","dummyContext","transport","Global_globalContext","getContext","setContext","Global_start","TONE_SILENCE_LOGGING","prefix","printString","dbToGain","db","gainToDb","LN10","intervalToFrequencyRatio","A4","ftom","ftomf","mtof","midi","TimeBase_TimeBaseClass","TimeBaseClass","units","defaultUnits","_val","_units","_expressions","_getExpressions","TimeBase_extends","hz","method","_frequencyToUnits","parseFloat","regexp","_ticksToUnits","parseInt","_beatsToUnits","_getTimeSignature","dot","numericValue","scalar","number","_secondsToUnits","samples","tr","q","total","fromType","_noArg","typeName","quantity","expr","matching","freq","beats","_getBpm","seconds","ticks","_getPPQ","_now","bpm","timeSignature","PPQ","toSeconds","toTicks","toFrequency","toMidi","toSamples","toMilliseconds","Time_TimeClass","TimeClass","Time_extends","capture","quantize","quantTo","nextSubdivision","subdiv","percent","subdivision","toNotation","testNotations","power","closest","closestSeconds","notation","notationSeconds","abs","toBarsBeatsSixteenths","quarterTime","quarters","measures","sixteenths","sixteenthString","Time","Frequency_FrequencyClass","FrequencyClass","Frequency_extends","setA4","note","pitch","octave","noteNumber","noteToScaleIndex","toLowerCase","transpose","harmonize","intervals","toNote","scaleIndexToNote","cbb","c#","cx","dbb","d#","dx","ebb","eb","e#","ex","fbb","fb","f","f#","fx","gbb","gb","g","g#","gx","abb","ab","a#","ax","bbb","bb","b#","bx","Frequency","TransportTimeClass","TransportTime_extends","TransportTime","ToneWithContext_ToneWithContext","ToneWithContext","defaultContext","ToneWithContext_extends","immediate","attribute","member","props","Param_Param","Param","overridden","_minOutput","_param","_initialValue","convert","_toType","Param_extends","getValueAtTime","_fromType","_is","computedTime","isFinite","JSON","stringify","before","beforeValue","previous","_linearInterpolate","_exponentialInterpolate","previousVal","_exponentialApproach","setRampPoint","currentVal","exponentialRampTo","rampTime","linearRampTo","targetRampTo","exponentialApproachValueAtTime","scaling","startingValue","segTime","valueAtTime","sampleTime","rampTo","t0","v0","v1","t1","ToneAudioNode_ToneAudioNode","ToneAudioNode","_internalChannels","ToneAudioNode_extends","_isAudioNode","_getInternalNodes","nodeList","_setChannelProperties","_getChannelProperties","outputNum","inputNum","ToneAudioNode_connect","toDestination","toMaster","warn","ToneAudioNode_disconnect","chain","connectSeries","fan","first","prev","current","srcNode","dstNode","outputNumber","inputNumber","readOnly","str","writable","noOp","Gain_Gain","Gain","_gainNode","Gain_extends","ToneAudioBuffer_ToneAudioBuffer","ToneAudioBuffer","reverse","ToneAudioBuffer_extends","_buffer","loaded","_reversed","_reverse","downloads","e_1","fromArray","isMultidimensional","multiChannelArray","toMono","chanNum","toArray","outputArray","numChannels_1","channelArray","ret","startSamples","endSamples","retBuffer","rev","fromUrl","matches","extensions","extension","extensions_1","ext","supportsType","baseUrl","canPlayType","Offline","originalContext","bufferPromise","ToneAudioBuffers_ToneAudioBuffers","ToneAudioBuffers","_buffers","_loadingCount","urls","_bufferLoaded","ToneAudioBuffers_extends","Delay_Delay","Delay","maxDelayInSeconds","maxDelay","_delayNode","Delay_extends","StateTimeline","initial","_initial","StateTimeline_extends","setStateAtTime","getLastState","getNextState","event_2","TickSignal_TickSignal","TickSignal","_sig","_multiplier","multiplier","TickSignal_extends","computedValue","prevEvent","segments","rampVal","ticksUntilTime","_getTicksUntilEvent","computedVal","segmentDur","val0","val1","onTheLineEvent","getTicksAtTime","getDurationOfTicks","currentTick","getTimeOfTick","tick","delta","sol1","ticksToTime","timeToTicks","computedDuration","startTicks","TickSource_TickSource","TickSource","_tickOffset","setTicksAtTime","TickSource_extends","pause","stopEvent","tmpEvent","lastState","elapsedTicks","periodStartTime","offsetEvent","getSecondsAtTime","elapsedSeconds","getStateAtTime","absoluteTicks","forEachTickBetween","computedStartTime","computedEndTime","lastStateEvent","maxStartTime","nextTickTime","Clock_Clock","Clock","_lastUpdate","_boundLoop","_loop","_tickSource","Clock_extends","TicksClass","Ticks_extends","Ticks","Midi_MidiClass","MidiClass","Midi_extends","Midi","Draw_Draw","Draw","expiration","anticipation","_boundDrawLoop","_drawLoop","_animationFrame","Draw_extends","schedule","requestAnimationFrame","cancelAnimationFrame","IntervalTimeline_IntervalTimeline","IntervalTimeline","_root","IntervalTimeline_extends","IntervalNode","insert","updateHeight","updateMax","_rebalance","results","search","results_1","_removeNode","_setRoot","_replaceNodeInParent","replacement","isLeftChild","left","right","temp","getBalance","_rotateLeft","pivotNode","_rotateRight","balance","low","allNodes_1","traverse","searchAfter","high","_left","_right","height","point","Volume_Volume","Volume","volume","_unmutedVolume","mute","Volume_extends","Destination_Destination","Destination","rawContext","Destination_extends","TransportEvent_TransportEvent","TransportEvent","_eventId","_once","invoke","TransportRepeatEvent_TransportRepeatEvent","TransportRepeatEvent","_currentId","_nextId","_nextTick","_boundRestart","_restart","_interval","TransportRepeatEvent_extends","_createEvents","scheduleOnce","Transport_Transport","Transport","_loopStart","_loopEnd","_scheduledEvents","_repeatedEvents","_syncedSignals","_swingAmount","_ppq","ppq","_clock","_processTick","_bindClockEvents","_timeSignature","_swingTicks","Transport_extends","swing","swingSubdivision","tickTime","progress","amount","_addEvent","scheduleRepeat","eventId","item","timeline","computedAfter","offsetTicks","toggle","timeSig","startPosition","endPosition","setLoopPoints","remainingTicks","syncSignal","signal","computedFreq","ratioSignal","unsyncSignal","syncedSignal","Source_Source","Source","_synced","_scheduled","_syncedStart","_syncedStop","_volume","onstop","Source_extends","_clampToCurrentTime","restart","sched","_start","_stop","sync","stateEvent","startOffset","unsync","OneShotSource_OneShotSource","OneShotSource","_stopTime","_fadeIn","fadeIn","_fadeOut","fadeOut","_curve","OneShotSource_extends","_startGain","fadeInTime","_stopGain","cancelStop","fadeOutTime","additionalTail","_stopSource","BufferSource_ToneBufferSource","ToneBufferSource","_source","_sourceStarted","_sourceStopped","BufferSource_extends","computedOffset","computedDur","Noise_Noise","Noise","Noise_extends","_noiseBuffers","rate","random","_noiseCache","brown","pink","white","channelNum","lastOut","b0","b1","b2","b3","b4","b5","b6","Signal_Signal","Signal","override","_constantSource","Signal_extends","connectSignal","OscillatorNode_ToneOscillatorNode","ToneOscillatorNode","_oscillator","OscillatorNode_extends","Oscillator_Oscillator","Oscillator","_partials","partials","_partialCount","partialCount","baseType","phase","Oscillator_extends","oscillator","_wave","syncFrequency","unsyncFrequency","_getCachedPeriodicWave","oscProps","_periodicWaveCache","find","description","_phase","arrayA","arrayB","isBasicType","cache","_getRealImaginary","partial","exec","periodicWaveSize","piFactor","_inverseFFT","_getInitialValue","twoPi","SignalOperator_SignalOperator","SignalOperator","SignalOperator_extends","WaveShaper_WaveShaper","WaveShaper","_shaper","mapping","setMap","WaveShaper_extends","normalized","oversampling","isOverSampleType","includes","AudioToGain_AudioToGain","AudioToGain","_norm","AudioToGain_extends","Multiply_Multiply","Multiply","_mult","factor","Multiply_extends","AMOscillator_AMOscillator","AMOscillator","_modulationScale","_modulationNode","_carrier","_modulator","modulationType","harmonicity","AMOscillator_extends","FMOscillator_FMOscillator","FMOscillator","modulationIndex","FMOscillator_extends","PulseOscillator_PulseOscillator","PulseOscillator","_widthGate","_thresh","width","_sawtooth","PulseOscillator_extends","FatOscillator_FatOscillator","FatOscillator","_oscillators","_spread","spread","count","FatOscillator_extends","_forEach","osc","start_1","step_1","PWMOscillator_PWMOscillator","PWMOscillator","sourceType","_scale","_pulse","modulationFrequency","PWMOscillator_extends","OmniOscillatorSourceMap","am","fat","fm","pulse","pwm","OmniOscillator_OmniOscillator","OmniOscillator","OmniOscillator_extends","_sourceType","substr","_createNewOscillator","_getOscType","oscType","OscConstructor","oldOsc_1","blockTime","sType","mType","Player_Player","Player","_activeSources","_onload","autostart","Player_extends","_onSourceEnd","comptuedOffset","origDuration","implicitEnd","seek","Add_Add","Add","_sum","addend","Add_extends","Abs_Abs","Abs","_abs","Abs_extends","GainToAudio_GainToAudio","GainToAudio","GainToAudio_extends","Negate_Negate","Negate","_multiply","Negate_extends","Subtract_Subtract","Subtract","_neg","subtrahend","Subtract_extends","Zero_Zero","Zero","Zero_extends","Envelope_Envelope","Envelope","decay","sustain","attackCurve","releaseCurve","decayCurve","Envelope_extends","_getCurve","direction","curveName","EnvelopeCurves","_setCurve","curveDef","_attackCurve","_releaseCurve","_decayCurve","triggerAttack","velocity","currentValue","decayValue","decayStart","triggerRelease","triggerAttackRelease","cosineCurve","rippleCurve","curveLen","sineWave","stairsCurve","sineCurve","bounceCurve","invertCurve","out","bounce","In","Out","cosine","exponential","linear","ripple","sine","step","AmplitudeEnvelope_AmplitudeEnvelope","AmplitudeEnvelope","AmplitudeEnvelope_extends","Instrument_Instrument","Instrument","_original_triggerAttack","_original_triggerRelease","Instrument_extends","_syncMethod","timePosition","originalMethod","Monophonic_Monophonic","Monophonic","portamento","onsilence","Monophonic_extends","_triggerEnvelopeAttack","setNote","_triggerEnvelopeRelease","getLevelAtTime","envelope","computedFrequency","portTime","Synth_Synth","Synth","Synth_extends","computedAttack","computedDecay","Sampler_Sampler","Sampler","urlMap","mid","Sampler_extends","_findClosest","notes","difference","closestNote","releaseAll","PolySynth_PolySynth","PolySynth","_availableVoices","_activeVoices","_voices","voice","polyphony","PolySynth_extends","_getActiveVoice","_makeVoiceAvailable","activeVoiceIndex","_getNextAvailableVoice","_triggerAttack","midiNote","_triggerRelease","_scheduleEvent","disposed","durationSeconds","v","MembraneSynth_MembraneSynth","MembraneSynth","pitchDecay","octaves","MembraneSynth_extends","hertz","maxNote","ToneEvent_ToneEvent","ToneEvent","_startOffset","_probability","probability","_humanize","humanize","ToneEvent_extends","_rescheduleEvents","startTick","_getLoopDuration","_tick","prob","variation","reschedulTime","lastEvent","loopDuration","Part_Part","Part","events","Part_extends","computedOffset_1","_startNote","at","timeInTicks","next","done","_restartEvent","_setAll","attr","_testLoopBoundries","Sequence_Sequence","Sequence","_part","_seqCallback","_eventsArray","_subdivision","Sequence_extends","_createSequence","_eventsUpdated","_indexTime","_rescheduleSequence","sequence","eventOffset","CrossFade_CrossFade","CrossFade","_panner","_split","_g2a","fade","CrossFade_extends","Effect_Effect","Effect","_dryWet","wet","effectSend","effectReturn","Effect_extends","connectEffect","effect","FeedbackEffect_FeedbackEffect","FeedbackEffect","_feedbackGain","FeedbackEffect_extends","FeedbackDelay_FeedbackDelay","FeedbackDelay","FeedbackDelay_extends","Convolver_Convolver","Convolver","_convolver","Convolver_extends","buff","norm","Merge_Merge","Merge","_merger","Merge_extends","Reverb_Reverb","Reverb","preDelay","Reverb_extends","generate","noiseL","noiseR","merge","Analyser_Analyser","Analyser","_analyser","Analyser_extends","smoothing","Filter_Filter","Filter","_filters","rolloff","Filter_extends","_rolloff","rolloffNum","possibilities","cascadingCount","totalResponse","freqValues","magValues","phaseValues","filterClone","MultibandSplit_MultibandSplit","MultibandSplit","_lowMidFilter","lowFrequency","highFrequency","MultibandSplit_extends","EQ3_EQ3","EQ3","_multibandSplit","_lowGain","_midGain","_highGain","EQ3_extends","Compressor_Compressor","Compressor","_compressor","Compressor_extends","Tone_now","Tone_Transport","Tone_Destination","_defineProperties","Constructor","protoProps","staticProps","instance","_arr","_n","_d","_e","_s","arrayWithHoles","iterableToArrayLimit","nonIterableRest"],"mappings":"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","file":"Tone.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Tone\"] = factory();\n\telse\n\t\troot[\"Tone\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@babel/runtime/helpers/slicedToArray'), require('@babel/runtime/helpers/classCallCheck'), require('@babel/runtime/helpers/createClass')) :\n    typeof define === 'function' && define.amd ? define(['exports', '@babel/runtime/helpers/slicedToArray', '@babel/runtime/helpers/classCallCheck', '@babel/runtime/helpers/createClass'], factory) :\n    (global = global || self, factory(global.automationEvents = {}, global._slicedToArray, global._classCallCheck, global._createClass));\n}(this, function (exports, _slicedToArray, _classCallCheck, _createClass) { 'use strict';\n\n    _slicedToArray = _slicedToArray && _slicedToArray.hasOwnProperty('default') ? _slicedToArray['default'] : _slicedToArray;\n    _classCallCheck = _classCallCheck && _classCallCheck.hasOwnProperty('default') ? _classCallCheck['default'] : _classCallCheck;\n    _createClass = _createClass && _createClass.hasOwnProperty('default') ? _createClass['default'] : _createClass;\n\n    var createExtendedExponentialRampToValueAutomationEvent = function createExtendedExponentialRampToValueAutomationEvent(value, endTime, insertTime) {\n      return {\n        endTime: endTime,\n        insertTime: insertTime,\n        type: 'exponentialRampToValue',\n        value: value\n      };\n    };\n\n    var createExtendedLinearRampToValueAutomationEvent = function createExtendedLinearRampToValueAutomationEvent(value, endTime, insertTime) {\n      return {\n        endTime: endTime,\n        insertTime: insertTime,\n        type: 'linearRampToValue',\n        value: value\n      };\n    };\n\n    var createSetValueAutomationEvent = function createSetValueAutomationEvent(value, startTime) {\n      return {\n        startTime: startTime,\n        type: 'setValue',\n        value: value\n      };\n    };\n\n    var createSetValueCurveAutomationEvent = function createSetValueCurveAutomationEvent(values, startTime, duration) {\n      return {\n        duration: duration,\n        startTime: startTime,\n        type: 'setValueCurve',\n        values: values\n      };\n    };\n\n    var getTargetValueAtTime = function getTargetValueAtTime(time, valueAtStartTime, _ref) {\n      var startTime = _ref.startTime,\n          target = _ref.target,\n          timeConstant = _ref.timeConstant;\n      return target + (valueAtStartTime - target) * Math.exp((startTime - time) / timeConstant);\n    };\n\n    var isExponentialRampToValueAutomationEvent = function isExponentialRampToValueAutomationEvent(automationEvent) {\n      return automationEvent.type === 'exponentialRampToValue';\n    };\n\n    var isLinearRampToValueAutomationEvent = function isLinearRampToValueAutomationEvent(automationEvent) {\n      return automationEvent.type === 'linearRampToValue';\n    };\n\n    var isAnyRampToValueAutomationEvent = function isAnyRampToValueAutomationEvent(automationEvent) {\n      return isExponentialRampToValueAutomationEvent(automationEvent) || isLinearRampToValueAutomationEvent(automationEvent);\n    };\n\n    var isSetValueAutomationEvent = function isSetValueAutomationEvent(automationEvent) {\n      return automationEvent.type === 'setValue';\n    };\n\n    var isSetValueCurveAutomationEvent = function isSetValueCurveAutomationEvent(automationEvent) {\n      return automationEvent.type === 'setValueCurve';\n    };\n\n    var getValueOfAutomationEventAtIndexAtTime = function getValueOfAutomationEventAtIndexAtTime(automationEvents, index, time, defaultValue) {\n      var automationEvent = automationEvents[index];\n      return automationEvent === undefined ? defaultValue : isAnyRampToValueAutomationEvent(automationEvent) || isSetValueAutomationEvent(automationEvent) ? automationEvent.value : isSetValueCurveAutomationEvent(automationEvent) ? automationEvent.values[automationEvent.values.length - 1] : getTargetValueAtTime(time, getValueOfAutomationEventAtIndexAtTime(automationEvents, index - 1, automationEvent.startTime, defaultValue), automationEvent);\n    };\n\n    var getEndTimeAndValueOfPreviousAutomationEvent = function getEndTimeAndValueOfPreviousAutomationEvent(automationEvents, index, currentAutomationEvent, nextAutomationEvent, defaultValue) {\n      return currentAutomationEvent === undefined ? [nextAutomationEvent.insertTime, defaultValue] : isAnyRampToValueAutomationEvent(currentAutomationEvent) ? [currentAutomationEvent.endTime, currentAutomationEvent.value] : isSetValueAutomationEvent(currentAutomationEvent) ? [currentAutomationEvent.startTime, currentAutomationEvent.value] : isSetValueCurveAutomationEvent(currentAutomationEvent) ? [currentAutomationEvent.startTime + currentAutomationEvent.duration, currentAutomationEvent.values[currentAutomationEvent.values.length - 1]] : [currentAutomationEvent.startTime, getValueOfAutomationEventAtIndexAtTime(automationEvents, index - 1, currentAutomationEvent.startTime, defaultValue)];\n    };\n\n    var isCancelAndHoldAutomationEvent = function isCancelAndHoldAutomationEvent(automationEvent) {\n      return automationEvent.type === 'cancelAndHold';\n    };\n\n    var isCancelScheduledValuesAutomationEvent = function isCancelScheduledValuesAutomationEvent(automationEvent) {\n      return automationEvent.type === 'cancelScheduledValues';\n    };\n\n    var getEventTime = function getEventTime(automationEvent) {\n      if (isCancelAndHoldAutomationEvent(automationEvent) || isCancelScheduledValuesAutomationEvent(automationEvent)) {\n        return automationEvent.cancelTime;\n      }\n\n      if (isExponentialRampToValueAutomationEvent(automationEvent) || isLinearRampToValueAutomationEvent(automationEvent)) {\n        return automationEvent.endTime;\n      }\n\n      return automationEvent.startTime;\n    };\n\n    var getExponentialRampValueAtTime = function getExponentialRampValueAtTime(time, startTime, valueAtStartTime, _ref) {\n      var endTime = _ref.endTime,\n          value = _ref.value;\n\n      if (valueAtStartTime === value) {\n        return value;\n      }\n\n      if (0 < valueAtStartTime && 0 < value || valueAtStartTime < 0 && value < 0) {\n        return valueAtStartTime * Math.pow(value / valueAtStartTime, (time - startTime) / (endTime - startTime));\n      }\n\n      return 0;\n    };\n\n    var getLinearRampValueAtTime = function getLinearRampValueAtTime(time, startTime, valueAtStartTime, _ref) {\n      var endTime = _ref.endTime,\n          value = _ref.value;\n      return valueAtStartTime + (time - startTime) / (endTime - startTime) * (value - valueAtStartTime);\n    };\n\n    var interpolateValue = function interpolateValue(values, theoreticIndex) {\n      var lowerIndex = Math.floor(theoreticIndex);\n      var upperIndex = Math.ceil(theoreticIndex);\n\n      if (lowerIndex === upperIndex) {\n        return values[lowerIndex];\n      }\n\n      return (1 - (theoreticIndex - lowerIndex)) * values[lowerIndex] + (1 - (upperIndex - theoreticIndex)) * values[upperIndex];\n    };\n\n    var getValueCurveValueAtTime = function getValueCurveValueAtTime(time, _ref) {\n      var duration = _ref.duration,\n          startTime = _ref.startTime,\n          values = _ref.values;\n      var theoreticIndex = (time - startTime) / duration * (values.length - 1);\n      return interpolateValue(values, theoreticIndex);\n    };\n\n    var isSetTargetAutomationEvent = function isSetTargetAutomationEvent(automationEvent) {\n      return automationEvent.type === 'setTarget';\n    };\n\n    var AutomationEventList =\n    /*#__PURE__*/\n    function () {\n      function AutomationEventList(defaultValue) {\n        _classCallCheck(this, AutomationEventList);\n\n        this._automationEvents = [];\n        this._currenTime = 0;\n        this._defaultValue = defaultValue;\n      }\n\n      _createClass(AutomationEventList, [{\n        key: Symbol.iterator,\n        value: function value() {\n          return this._automationEvents[Symbol.iterator]();\n        }\n      }, {\n        key: \"add\",\n        value: function add(automationEvent) {\n          var eventTime = getEventTime(automationEvent);\n\n          if (isCancelAndHoldAutomationEvent(automationEvent) || isCancelScheduledValuesAutomationEvent(automationEvent)) {\n            var index = this._automationEvents.findIndex(function (currentAutomationEvent) {\n              return getEventTime(currentAutomationEvent) >= eventTime;\n            });\n\n            var removedAutomationEvent = this._automationEvents[index];\n\n            if (index !== -1) {\n              this._automationEvents = this._automationEvents.slice(0, index);\n            }\n\n            if (isCancelAndHoldAutomationEvent(automationEvent)) {\n              var lastAutomationEvent = this._automationEvents[this._automationEvents.length - 1];\n\n              if (removedAutomationEvent !== undefined && isAnyRampToValueAutomationEvent(removedAutomationEvent)) {\n                if (isSetTargetAutomationEvent(lastAutomationEvent)) {\n                  throw new Error('The internal list is malformed.');\n                }\n\n                var startTime = isSetValueCurveAutomationEvent(lastAutomationEvent) ? lastAutomationEvent.startTime + lastAutomationEvent.duration : getEventTime(lastAutomationEvent);\n                var startValue = isSetValueCurveAutomationEvent(lastAutomationEvent) ? lastAutomationEvent.values[lastAutomationEvent.values.length - 1] : lastAutomationEvent.value;\n                var value = isExponentialRampToValueAutomationEvent(removedAutomationEvent) ? getExponentialRampValueAtTime(eventTime, startTime, startValue, removedAutomationEvent) : getLinearRampValueAtTime(eventTime, startTime, startValue, removedAutomationEvent);\n                var truncatedAutomationEvent = isExponentialRampToValueAutomationEvent(removedAutomationEvent) ? createExtendedExponentialRampToValueAutomationEvent(value, eventTime, this._currenTime) : createExtendedLinearRampToValueAutomationEvent(value, eventTime, this._currenTime);\n\n                this._automationEvents.push(truncatedAutomationEvent);\n              }\n\n              if (lastAutomationEvent !== undefined && isSetTargetAutomationEvent(lastAutomationEvent)) {\n                this._automationEvents.push(createSetValueAutomationEvent(this.getValue(eventTime), eventTime));\n              }\n\n              if (lastAutomationEvent !== undefined && isSetValueCurveAutomationEvent(lastAutomationEvent) && lastAutomationEvent.startTime + lastAutomationEvent.duration > eventTime) {\n                this._automationEvents[this._automationEvents.length - 1] = createSetValueCurveAutomationEvent(new Float32Array([6, 7]), lastAutomationEvent.startTime, eventTime - lastAutomationEvent.startTime);\n              }\n            }\n          } else {\n            var _index = this._automationEvents.findIndex(function (currentAutomationEvent) {\n              return getEventTime(currentAutomationEvent) > eventTime;\n            });\n\n            var previousAutomationEvent = _index === -1 ? this._automationEvents[this._automationEvents.length - 1] : this._automationEvents[_index - 1];\n\n            if (previousAutomationEvent !== undefined && isSetValueCurveAutomationEvent(previousAutomationEvent) && getEventTime(previousAutomationEvent) + previousAutomationEvent.duration > eventTime) {\n              return false;\n            }\n\n            var persistentAutomationEvent = isExponentialRampToValueAutomationEvent(automationEvent) ? createExtendedExponentialRampToValueAutomationEvent(automationEvent.value, automationEvent.endTime, this._currenTime) : isLinearRampToValueAutomationEvent(automationEvent) ? createExtendedLinearRampToValueAutomationEvent(automationEvent.value, eventTime, this._currenTime) : automationEvent;\n\n            if (_index === -1) {\n              this._automationEvents.push(persistentAutomationEvent);\n            } else {\n              if (isSetValueCurveAutomationEvent(automationEvent) && eventTime + automationEvent.duration > getEventTime(this._automationEvents[_index])) {\n                return false;\n              }\n\n              this._automationEvents.splice(_index, 0, persistentAutomationEvent);\n            }\n          }\n\n          return true;\n        }\n      }, {\n        key: \"flush\",\n        value: function flush(time) {\n          var index = this._automationEvents.findIndex(function (currentAutomationEvent) {\n            return getEventTime(currentAutomationEvent) > time;\n          });\n\n          if (index > 1) {\n            var remainingAutomationEvents = this._automationEvents.slice(index - 1);\n\n            var firstRemainingAutomationEvent = remainingAutomationEvents[0];\n\n            if (isSetTargetAutomationEvent(firstRemainingAutomationEvent)) {\n              remainingAutomationEvents.unshift(createSetValueAutomationEvent(getValueOfAutomationEventAtIndexAtTime(this._automationEvents, index - 2, firstRemainingAutomationEvent.startTime, this._defaultValue), firstRemainingAutomationEvent.startTime));\n            }\n\n            this._automationEvents = remainingAutomationEvents;\n          }\n        }\n      }, {\n        key: \"getValue\",\n        value: function getValue(time) {\n          if (this._automationEvents.length === 0) {\n            return this._defaultValue;\n          }\n\n          var lastAutomationEvent = this._automationEvents[this._automationEvents.length - 1];\n\n          var index = this._automationEvents.findIndex(function (automationEvent) {\n            return getEventTime(automationEvent) > time;\n          });\n\n          var nextAutomationEvent = this._automationEvents[index];\n          var currentAutomationEvent = getEventTime(lastAutomationEvent) <= time ? lastAutomationEvent : this._automationEvents[index - 1];\n\n          if (currentAutomationEvent !== undefined && isSetTargetAutomationEvent(currentAutomationEvent) && (nextAutomationEvent === undefined || !isAnyRampToValueAutomationEvent(nextAutomationEvent) || nextAutomationEvent.insertTime > time)) {\n            return getTargetValueAtTime(time, getValueOfAutomationEventAtIndexAtTime(this._automationEvents, index - 2, currentAutomationEvent.startTime, this._defaultValue), currentAutomationEvent);\n          }\n\n          if (currentAutomationEvent !== undefined && isSetValueAutomationEvent(currentAutomationEvent) && (nextAutomationEvent === undefined || !isAnyRampToValueAutomationEvent(nextAutomationEvent))) {\n            return currentAutomationEvent.value;\n          }\n\n          if (currentAutomationEvent !== undefined && isSetValueCurveAutomationEvent(currentAutomationEvent) && (nextAutomationEvent === undefined || !isAnyRampToValueAutomationEvent(nextAutomationEvent) || currentAutomationEvent.startTime + currentAutomationEvent.duration > time)) {\n            if (time < currentAutomationEvent.startTime + currentAutomationEvent.duration) {\n              return getValueCurveValueAtTime(time, currentAutomationEvent);\n            }\n\n            return currentAutomationEvent.values[currentAutomationEvent.values.length - 1];\n          }\n\n          if (currentAutomationEvent !== undefined && isAnyRampToValueAutomationEvent(currentAutomationEvent) && (nextAutomationEvent === undefined || !isAnyRampToValueAutomationEvent(nextAutomationEvent))) {\n            return currentAutomationEvent.value;\n          }\n\n          if (nextAutomationEvent !== undefined && isExponentialRampToValueAutomationEvent(nextAutomationEvent)) {\n            var _getEndTimeAndValueOf = getEndTimeAndValueOfPreviousAutomationEvent(this._automationEvents, index - 1, currentAutomationEvent, nextAutomationEvent, this._defaultValue),\n                _getEndTimeAndValueOf2 = _slicedToArray(_getEndTimeAndValueOf, 2),\n                startTime = _getEndTimeAndValueOf2[0],\n                value = _getEndTimeAndValueOf2[1];\n\n            return getExponentialRampValueAtTime(time, startTime, value, nextAutomationEvent);\n          }\n\n          if (nextAutomationEvent !== undefined && isLinearRampToValueAutomationEvent(nextAutomationEvent)) {\n            var _getEndTimeAndValueOf3 = getEndTimeAndValueOfPreviousAutomationEvent(this._automationEvents, index - 1, currentAutomationEvent, nextAutomationEvent, this._defaultValue),\n                _getEndTimeAndValueOf4 = _slicedToArray(_getEndTimeAndValueOf3, 2),\n                _startTime = _getEndTimeAndValueOf4[0],\n                _value = _getEndTimeAndValueOf4[1];\n\n            return getLinearRampValueAtTime(time, _startTime, _value, nextAutomationEvent);\n          }\n\n          return this._defaultValue;\n        }\n      }]);\n\n      return AutomationEventList;\n    }();\n\n    var createCancelAndHoldAutomationEvent = function createCancelAndHoldAutomationEvent(cancelTime) {\n      return {\n        cancelTime: cancelTime,\n        type: 'cancelAndHold'\n      };\n    };\n\n    var createCancelScheduledValuesAutomationEvent = function createCancelScheduledValuesAutomationEvent(cancelTime) {\n      return {\n        cancelTime: cancelTime,\n        type: 'cancelScheduledValues'\n      };\n    };\n\n    var createExponentialRampToValueAutomationEvent = function createExponentialRampToValueAutomationEvent(value, endTime) {\n      return {\n        endTime: endTime,\n        type: 'exponentialRampToValue',\n        value: value\n      };\n    };\n\n    var createLinearRampToValueAutomationEvent = function createLinearRampToValueAutomationEvent(value, endTime) {\n      return {\n        endTime: endTime,\n        type: 'linearRampToValue',\n        value: value\n      };\n    };\n\n    var createSetTargetAutomationEvent = function createSetTargetAutomationEvent(target, startTime, timeConstant) {\n      return {\n        startTime: startTime,\n        target: target,\n        timeConstant: timeConstant,\n        type: 'setTarget'\n      };\n    };\n\n    exports.AutomationEventList = AutomationEventList;\n    exports.createCancelAndHoldAutomationEvent = createCancelAndHoldAutomationEvent;\n    exports.createCancelScheduledValuesAutomationEvent = createCancelScheduledValuesAutomationEvent;\n    exports.createExponentialRampToValueAutomationEvent = createExponentialRampToValueAutomationEvent;\n    exports.createLinearRampToValueAutomationEvent = createLinearRampToValueAutomationEvent;\n    exports.createSetTargetAutomationEvent = createSetTargetAutomationEvent;\n    exports.createSetValueAutomationEvent = createSetValueAutomationEvent;\n    exports.createSetValueCurveAutomationEvent = createSetValueCurveAutomationEvent;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n","export const version: string = \"14.3.0\";\n","export const createAbortError = () => {\n    try {\n        return new DOMException('', 'AbortError');\n    }\n    catch (err) {\n        // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.\n        err.code = 20;\n        err.name = 'AbortError';\n        return err;\n    }\n};\n//# sourceMappingURL=/build/es2018/factories/abort-error.js.map","export const ACTIVE_AUDIO_NODE_STORE = new WeakSet();\nexport const AUDIO_NODE_STORE = new WeakMap();\nexport const AUDIO_GRAPHS = new WeakMap();\nexport const AUDIO_PARAM_STORE = new WeakMap();\nexport const AUDIO_PARAM_AUDIO_NODE_STORE = new WeakMap();\nexport const AUXILIARY_GAIN_NODE_STORE = new WeakMap();\nexport const BACKUP_NATIVE_CONTEXT_STORE = new WeakMap();\nexport const CONTEXT_STORE = new WeakMap();\nexport const DETACHED_ARRAY_BUFFERS = new WeakSet();\nexport const EVENT_LISTENERS = new WeakMap();\n// This clunky name is borrowed from the spec. :-)\nexport const NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS = new WeakMap();\nexport const NODE_TO_PROCESSOR_MAPS = new WeakMap();\nexport const TEST_RESULTS = new WeakMap();\n//# sourceMappingURL=/build/es2018/globals.js.map","export const createInvalidStateError = () => {\n    try {\n        return new DOMException('', 'InvalidStateError');\n    }\n    catch (err) {\n        // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.\n        err.code = 11;\n        err.name = 'InvalidStateError';\n        return err;\n    }\n};\n//# sourceMappingURL=/build/es2018/factories/invalid-state-error.js.map","import { createInvalidStateError } from '../factories/invalid-state-error';\nimport { CONTEXT_STORE } from '../globals';\nexport const getNativeContext = (context) => {\n    const nativeContext = CONTEXT_STORE.get(context);\n    if (nativeContext === undefined) {\n        throw createInvalidStateError();\n    }\n    return nativeContext;\n};\n//# sourceMappingURL=/build/es2018/helpers/get-native-context.js.map","const handler = {\n    construct() {\n        return handler;\n    }\n};\nexport const isConstructible = (constructible) => {\n    try {\n        const proxy = new Proxy(constructible, handler);\n        new proxy(); // tslint:disable-line:no-unused-expression\n    }\n    catch (_a) {\n        return false;\n    }\n    return true;\n};\n//# sourceMappingURL=/build/es2018/helpers/is-constructible.js.map","/*\n * This massive regex tries to cover all the following cases.\n *\n * import './path';\n * import defaultImport from './path';\n * import { namedImport } from './path';\n * import { namedImport as renamendImport } from './path';\n * import * as namespaceImport from './path';\n * import defaultImport, { namedImport } from './path';\n * import defaultImport, { namedImport as renamendImport } from './path';\n * import defaultImport, * as namespaceImport from './path';\n */\nconst IMPORT_STATEMENT_REGEX = /^import(?:(?:[\\s]+[\\w]+|(?:[\\s]+[\\w]+[\\s]*,)?[\\s]*\\{[\\s]*[\\w]+(?:[\\s]+as[\\s]+[\\w]+)?(?:[\\s]*,[\\s]*[\\w]+(?:[\\s]+as[\\s]+[\\w]+)?)*[\\s]*}|(?:[\\s]+[\\w]+[\\s]*,)?[\\s]*\\*[\\s]+as[\\s]+[\\w]+)[\\s]+from)?(?:[\\s]*)(\"([^\"\\\\]|\\\\.)+\"|'([^'\\\\]|\\\\.)+')(?:[\\s]*);?/; // tslint:disable-line:max-line-length\nexport const splitImportStatements = (source, url) => {\n    const importStatements = [];\n    let sourceWithoutImportStatements = source.replace(/^[\\s]+/, '');\n    let result = sourceWithoutImportStatements.match(IMPORT_STATEMENT_REGEX);\n    while (result !== null) {\n        const unresolvedUrl = result[1].slice(1, -1);\n        const importStatementWithResolvedUrl = result[0]\n            .replace(/([\\s]+)?;?$/, '')\n            .replace(unresolvedUrl, (new URL(unresolvedUrl, url)).toString());\n        importStatements.push(importStatementWithResolvedUrl);\n        sourceWithoutImportStatements = sourceWithoutImportStatements\n            .slice(result[0].length)\n            .replace(/^[\\s]+/, '');\n        result = sourceWithoutImportStatements.match(IMPORT_STATEMENT_REGEX);\n    }\n    return [importStatements.join(';'), sourceWithoutImportStatements];\n};\n//# sourceMappingURL=/build/es2018/helpers/split-import-statements.js.map","import { NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS } from '../globals';\nimport { evaluateSource } from '../helpers/evaluate-source';\nimport { getNativeContext } from '../helpers/get-native-context';\nimport { isConstructible } from '../helpers/is-constructible';\nimport { splitImportStatements } from '../helpers/split-import-statements';\nconst verifyParameterDescriptors = (parameterDescriptors) => {\n    if (parameterDescriptors !== undefined && !Array.isArray(parameterDescriptors)) {\n        throw new TypeError('The parameterDescriptors property of given value for processorCtor is not an array.');\n    }\n};\nconst verifyProcessorCtor = (processorCtor) => {\n    if (!isConstructible(processorCtor)) {\n        throw new TypeError('The given value for processorCtor should be a constructor.');\n    }\n    if (processorCtor.prototype === null || typeof processorCtor.prototype !== 'object') {\n        throw new TypeError('The given value for processorCtor should have a prototype.');\n    }\n    if (typeof processorCtor.prototype.process !== 'function') {\n        throw new TypeError('The given value for processorCtor should have a callable process() function.');\n    }\n};\nexport const createAddAudioWorkletModule = (createAbortError, createNotSupportedError, exposeCurrentFrameAndCurrentTime, fetchSource, getBackupNativeContext, ongoingRequests, resolvedRequests) => {\n    return (context, moduleURL, options = { credentials: 'omit' }) => {\n        const nativeContext = getNativeContext(context);\n        const absoluteUrl = (new URL(moduleURL, location.href)).toString();\n        // Bug #59: Only Chrome & Opera do implement the audioWorklet property.\n        if (nativeContext.audioWorklet !== undefined) {\n            return fetchSource(moduleURL)\n                .then((source) => {\n                const [importStatements, sourceWithoutImportStatements] = splitImportStatements(source, absoluteUrl);\n                /*\n                 * Bug #86: Chrome Canary does not invoke the process() function if the corresponding AudioWorkletNode has no output.\n                 *\n                 * This is the unminified version of the code used below:\n                 *\n                 * ```js\n                 * `${ importStatements };\n                 * ((registerProcessor) => {${ sourceWithoutImportStatements }\n                 * })((name, processorCtor) => registerProcessor(name, class extends processorCtor {\n                 *\n                 *     constructor (options) {\n                 *         const { hasNoOutput, ...otherParameterData } = options.parameterData;\n                 *\n                 *         if (hasNoOutput === 1) {\n                 *             super({ ...options, numberOfOutputs: 0, outputChannelCount: [ ], parameterData: otherParameterData });\n                 *\n                 *             this._hasNoOutput = true;\n                 *         } else {\n                 *             super(options);\n                 *\n                 *             this._hasNoOutput = false;\n                 *         }\n                 *     }\n                 *\n                 *     process (inputs, outputs, parameters) {\n                 *         return super.process(inputs, (this._hasNoOutput) ? [ ] : outputs, parameters);\n                 *     }\n                 *\n                 * }))`\n                 * ```\n                 */\n                const wrappedSource = `${importStatements};(registerProcessor=>{${sourceWithoutImportStatements}\n})((n,p)=>registerProcessor(n,class extends p{constructor(o){const{hasNoOutput,...q}=o.parameterData;if(hasNoOutput===1){super({...o,numberOfOutputs:0,outputChannelCount:[],parameterData:q});this._h=true}else{super(o);this._h=false}}process(i,o,p){return super.process(i,(this._h)?[]:o,p)}}))`; // tslint:disable-line:max-line-length\n                const blob = new Blob([wrappedSource], { type: 'application/javascript; charset=utf-8' });\n                const url = URL.createObjectURL(blob);\n                const backupNativeContext = getBackupNativeContext(nativeContext);\n                const nativeContextOrBackupNativeContext = (backupNativeContext !== null) ? backupNativeContext : nativeContext;\n                return nativeContextOrBackupNativeContext.audioWorklet\n                    .addModule(url, options)\n                    .then(() => URL.revokeObjectURL(url))\n                    // @todo This could be written more elegantly when Promise.finally() becomes avalaible.\n                    .catch((err) => {\n                    URL.revokeObjectURL(url);\n                    throw err; // tslint:disable-line:rxjs-throw-error\n                });\n            });\n        }\n        const resolvedRequestsOfContext = resolvedRequests.get(context);\n        if (resolvedRequestsOfContext !== undefined && resolvedRequestsOfContext.has(moduleURL)) {\n            return Promise.resolve();\n        }\n        const ongoingRequestsOfContext = ongoingRequests.get(context);\n        if (ongoingRequestsOfContext !== undefined) {\n            const promiseOfOngoingRequest = ongoingRequestsOfContext.get(moduleURL);\n            if (promiseOfOngoingRequest !== undefined) {\n                return promiseOfOngoingRequest;\n            }\n        }\n        const promise = fetchSource(moduleURL)\n            .then((source) => {\n            const [importStatements, sourceWithoutImportStatements] = splitImportStatements(source, absoluteUrl);\n            /*\n             * This is the unminified version of the code used below:\n             *\n             * ```js\n             * ${ importStatements };\n             * ((a, b) => {\n             *     (a[b] = a[b] || [ ]).push(\n             *         (AudioWorkletProcessor, global, registerProcessor, sampleRate, self, window) => {\n             *             ${ sourceWithoutImportStatements }\n             *         }\n             *     );\n             * })(window, '_AWGS');\n             * ```\n             */\n            // tslint:disable-next-line:max-line-length\n            const wrappedSource = `${importStatements};((a,b)=>{(a[b]=a[b]||[]).push((AudioWorkletProcessor,global,registerProcessor,sampleRate,self,window)=>{${sourceWithoutImportStatements}\n})})(window,'_AWGS')`;\n            // @todo Evaluating the given source code is a possible security problem.\n            return evaluateSource(wrappedSource);\n        })\n            .then(() => {\n            const evaluateAudioWorkletGlobalScope = window._AWGS.pop();\n            if (evaluateAudioWorkletGlobalScope === undefined) {\n                throw new SyntaxError();\n            }\n            exposeCurrentFrameAndCurrentTime(nativeContext, () => evaluateAudioWorkletGlobalScope(class AudioWorkletProcessor {\n            }, undefined, (name, processorCtor) => {\n                if (name.trim() === '') {\n                    throw createNotSupportedError();\n                }\n                const nodeNameToProcessorConstructorMap = NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.get(nativeContext);\n                if (nodeNameToProcessorConstructorMap !== undefined) {\n                    if (nodeNameToProcessorConstructorMap.has(name)) {\n                        throw createNotSupportedError();\n                    }\n                    verifyProcessorCtor(processorCtor);\n                    verifyParameterDescriptors(processorCtor.parameterDescriptors);\n                    nodeNameToProcessorConstructorMap.set(name, processorCtor);\n                }\n                else {\n                    verifyProcessorCtor(processorCtor);\n                    verifyParameterDescriptors(processorCtor.parameterDescriptors);\n                    NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.set(nativeContext, new Map([[name, processorCtor]]));\n                }\n            }, nativeContext.sampleRate, undefined, undefined));\n        })\n            .catch((err) => {\n            if (err.name === 'SyntaxError') {\n                throw createAbortError();\n            }\n            throw err; // tslint:disable-line:rxjs-throw-error\n        });\n        if (ongoingRequestsOfContext === undefined) {\n            ongoingRequests.set(context, new Map([[moduleURL, promise]]));\n        }\n        else {\n            ongoingRequestsOfContext.set(moduleURL, promise);\n        }\n        promise\n            .then(() => {\n            const rslvdRqstsFCntxt = resolvedRequests.get(context);\n            if (rslvdRqstsFCntxt === undefined) {\n                resolvedRequests.set(context, new Set([moduleURL]));\n            }\n            else {\n                rslvdRqstsFCntxt.add(moduleURL);\n            }\n        })\n            .catch(() => { }) // tslint:disable-line:no-empty\n            // @todo Use finally when it becomes available in all supported browsers.\n            .then(() => {\n            const ngngRqstsFCntxt = ongoingRequests.get(context);\n            if (ngngRqstsFCntxt !== undefined) {\n                ngngRqstsFCntxt.delete(moduleURL);\n            }\n        });\n        return promise;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/add-audio-worklet-module.js.map","import { getNativeContext } from '../helpers/get-native-context';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    fftSize: 2048,\n    maxDecibels: -30,\n    minDecibels: -100,\n    smoothingTimeConstant: 0.8\n};\nexport const createAnalyserNodeConstructor = (createAnalyserNodeRenderer, createIndexSizeError, createNativeAnalyserNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class AnalyserNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeAnalyserNode = createNativeAnalyserNode(nativeContext, mergedOptions);\n            const analyserNodeRenderer = ((isNativeOfflineAudioContext(nativeContext))\n                ? createAnalyserNodeRenderer()\n                : null);\n            super(context, 'passive', nativeAnalyserNode, analyserNodeRenderer);\n            this._nativeAnalyserNode = nativeAnalyserNode;\n        }\n        get fftSize() {\n            return this._nativeAnalyserNode.fftSize;\n        }\n        set fftSize(value) {\n            this._nativeAnalyserNode.fftSize = value;\n        }\n        get frequencyBinCount() {\n            return this._nativeAnalyserNode.frequencyBinCount;\n        }\n        get maxDecibels() {\n            return this._nativeAnalyserNode.maxDecibels;\n        }\n        set maxDecibels(value) {\n            // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.\n            const maxDecibels = this._nativeAnalyserNode.maxDecibels;\n            this._nativeAnalyserNode.maxDecibels = value;\n            if (!(value > this._nativeAnalyserNode.minDecibels)) {\n                this._nativeAnalyserNode.maxDecibels = maxDecibels;\n                throw createIndexSizeError();\n            }\n        }\n        get minDecibels() {\n            return this._nativeAnalyserNode.minDecibels;\n        }\n        set minDecibels(value) {\n            // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.\n            const minDecibels = this._nativeAnalyserNode.minDecibels;\n            this._nativeAnalyserNode.minDecibels = value;\n            if (!(this._nativeAnalyserNode.maxDecibels > value)) {\n                this._nativeAnalyserNode.minDecibels = minDecibels;\n                throw createIndexSizeError();\n            }\n        }\n        get smoothingTimeConstant() {\n            return this._nativeAnalyserNode.smoothingTimeConstant;\n        }\n        set smoothingTimeConstant(value) {\n            this._nativeAnalyserNode.smoothingTimeConstant = value;\n        }\n        getByteFrequencyData(array) {\n            this._nativeAnalyserNode.getByteFrequencyData(array);\n        }\n        getByteTimeDomainData(array) {\n            this._nativeAnalyserNode.getByteTimeDomainData(array);\n        }\n        getFloatFrequencyData(array) {\n            this._nativeAnalyserNode.getFloatFrequencyData(array);\n        }\n        getFloatTimeDomainData(array) {\n            this._nativeAnalyserNode.getFloatTimeDomainData(array);\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/analyser-node-constructor.js.map","export const getValueForKey = (map, key) => {\n    const value = map.get(key);\n    if (value === undefined) {\n        throw new Error('A value with the given key could not be found.');\n    }\n    return value;\n};\n//# sourceMappingURL=/build/es2018/helpers/get-value-for-key.js.map","import { AUDIO_NODE_STORE } from '../globals';\nimport { getValueForKey } from './get-value-for-key';\nexport const getNativeAudioNode = (audioNode) => {\n    return getValueForKey(AUDIO_NODE_STORE, audioNode);\n};\n//# sourceMappingURL=/build/es2018/helpers/get-native-audio-node.js.map","export const isOwnedByContext = (nativeAudioNode, nativeContext) => {\n    return nativeAudioNode.context === nativeContext;\n};\n//# sourceMappingURL=/build/es2018/helpers/is-owned-by-context.js.map","import { AUDIO_GRAPHS } from '../globals';\nimport { getValueForKey } from './get-value-for-key';\nexport function getAudioGraph(context) {\n    return getValueForKey(AUDIO_GRAPHS, context);\n}\n//# sourceMappingURL=/build/es2018/helpers/get-audio-graph.js.map","import { getAudioGraph } from './get-audio-graph';\nimport { getValueForKey } from './get-value-for-key';\nexport const getAudioNodeConnections = (audioNode) => {\n    const audioGraph = getAudioGraph(audioNode.context);\n    return getValueForKey(audioGraph.nodes, audioNode);\n};\n//# sourceMappingURL=/build/es2018/helpers/get-audio-node-connections.js.map","import { getAudioNodeConnections } from './get-audio-node-connections';\nexport const getAudioNodeRenderer = (audioNode) => {\n    const audioNodeConnections = getAudioNodeConnections(audioNode);\n    if (audioNodeConnections.renderer === null) {\n        throw new Error('Missing the renderer of the given AudioNode in the audio graph.');\n    }\n    return audioNodeConnections.renderer;\n};\n//# sourceMappingURL=/build/es2018/helpers/get-audio-node-renderer.js.map","import { getAudioNodeConnections } from './get-audio-node-connections';\nimport { getAudioNodeRenderer } from './get-audio-node-renderer';\nexport const renderInputsOfAudioNode = (audioNode, nativeOfflineAudioContext, nativeAudioNode) => {\n    const audioNodeConnections = getAudioNodeConnections(audioNode);\n    return Promise\n        .all(audioNodeConnections.activeInputs\n        .map((connections, input) => Array\n        .from(connections)\n        .map(([source, output]) => {\n        return getAudioNodeRenderer(source)\n            .render(source, nativeOfflineAudioContext)\n            .then((node) => node.connect(nativeAudioNode, output, input));\n    }))\n        .reduce((allRenderingPromises, renderingPromises) => [...allRenderingPromises, ...renderingPromises], []));\n};\n//# sourceMappingURL=/build/es2018/helpers/render-inputs-of-audio-node.js.map","export const testAudioBufferCopyChannelMethodsOutOfBoundsSupport = (nativeAudioBuffer) => {\n    try {\n        nativeAudioBuffer.copyToChannel(new Float32Array(1), 0, -1);\n    }\n    catch (_a) {\n        return false;\n    }\n    return true;\n};\n//# sourceMappingURL=/build/es2018/helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support.js.map","export const testAudioBufferCopyChannelMethodsSubarraySupport = (nativeAudioBuffer) => {\n    const source = new Float32Array(2);\n    try {\n        /*\n         * Firefox up to version 67 didn't fully support the copyFromChannel() and copyToChannel() methods. Therefore testing one of those\n         * methods is enough to know if the other one it supported as well.\n         */\n        nativeAudioBuffer.copyFromChannel(source, 0, nativeAudioBuffer.length - 1);\n    }\n    catch (_a) {\n        return false;\n    }\n    return true;\n};\n//# sourceMappingURL=/build/es2018/helpers/test-audio-buffer-copy-channel-methods-subarray-support.js.map","export const createIndexSizeError = () => {\n    try {\n        return new DOMException('', 'IndexSizeError');\n    }\n    catch (err) {\n        // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.\n        err.code = 1;\n        err.name = 'IndexSizeError';\n        return err;\n    }\n};\n//# sourceMappingURL=/build/es2018/factories/index-size-error.js.map","import { createIndexSizeError } from '../factories/index-size-error';\nexport const wrapAudioBufferGetChannelDataMethod = (audioBuffer) => {\n    audioBuffer.getChannelData = ((getChannelData) => {\n        return (channel) => {\n            try {\n                return getChannelData.call(audioBuffer, channel);\n            }\n            catch (err) {\n                if (err.code === 12) {\n                    throw createIndexSizeError();\n                }\n                throw err; // tslint:disable-line:rxjs-throw-error\n            }\n        };\n    })(audioBuffer.getChannelData);\n};\n//# sourceMappingURL=/build/es2018/helpers/wrap-audio-buffer-get-channel-data-method.js.map","import { testAudioBufferCopyChannelMethodsOutOfBoundsSupport } from '../helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support';\nimport { testAudioBufferCopyChannelMethodsSubarraySupport } from '../helpers/test-audio-buffer-copy-channel-methods-subarray-support';\nimport { wrapAudioBufferGetChannelDataMethod } from '../helpers/wrap-audio-buffer-get-channel-data-method';\nconst DEFAULT_OPTIONS = {\n    numberOfChannels: 1\n};\nexport const createAudioBufferConstructor = (cacheTestResult, createNotSupportedError, nativeAudioBufferConstructor, nativeOfflineAudioContextConstructor, testNativeAudioBufferConstructorSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds, wrapAudioBufferCopyChannelMethodsSubarray) => {\n    let nativeOfflineAudioContext = null;\n    return class AudioBuffer {\n        constructor(options) {\n            if (nativeOfflineAudioContextConstructor === null) {\n                throw new Error('Missing the native OfflineAudioContext constructor.');\n            }\n            const { length, numberOfChannels, sampleRate } = { ...DEFAULT_OPTIONS, ...options };\n            if (nativeOfflineAudioContext === null) {\n                nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n            }\n            /*\n             * Bug #99: Firefox does not throw a NotSupportedError when the numberOfChannels is zero. But it only does it when using the\n             * factory function. But since Firefox also supports the constructor everything should be fine.\n             */\n            const audioBuffer = (nativeAudioBufferConstructor !== null &&\n                cacheTestResult(testNativeAudioBufferConstructorSupport, testNativeAudioBufferConstructorSupport)) ?\n                new nativeAudioBufferConstructor({ length, numberOfChannels, sampleRate }) :\n                nativeOfflineAudioContext.createBuffer(numberOfChannels, length, sampleRate);\n            // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n            // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.\n            if (typeof audioBuffer.copyFromChannel !== 'function') {\n                wrapAudioBufferCopyChannelMethods(audioBuffer);\n                wrapAudioBufferGetChannelDataMethod(audioBuffer);\n                // Bug #42: Firefox does not yet fully support copyFromChannel() and copyToChannel().\n            }\n            else if (!cacheTestResult(testAudioBufferCopyChannelMethodsSubarraySupport, () => testAudioBufferCopyChannelMethodsSubarraySupport(audioBuffer))) {\n                wrapAudioBufferCopyChannelMethodsSubarray(audioBuffer);\n                wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n                // Bug #157: No browser does allow the bufferOffset to be out-of-bounds.\n            }\n            else if (!cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, () => testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer))) {\n                wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n            }\n            // Bug #99: Safari does not throw an error when the numberOfChannels is zero.\n            if (audioBuffer.numberOfChannels === 0) {\n                throw createNotSupportedError();\n            }\n            /*\n             * This does violate all good pratices but it is necessary to allow this AudioBuffer to be used with native\n             * (Offline)AudioContexts.\n             */\n            return audioBuffer;\n        }\n        // This method needs to be defined to convince TypeScript that the IAudioBuffer will be implemented.\n        copyFromChannel(_1, _2, _3 = 0) { } // tslint:disable-line:no-empty\n        // This method needs to be defined to convince TypeScript that the IAudioBuffer will be implemented.\n        copyToChannel(_1, _2, _3 = 0) { } // tslint:disable-line:no-empty\n        // This method needs to be defined to convince TypeScript that the IAudioBuffer will be implemented.\n        getChannelData(_) {\n            return new Float32Array(0);\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-buffer-constructor.js.map","import { EVENT_LISTENERS } from '../globals';\nimport { getValueForKey } from './get-value-for-key';\nexport const getEventListenersOfAudioNode = (audioNode) => {\n    return getValueForKey(EVENT_LISTENERS, audioNode);\n};\n//# sourceMappingURL=/build/es2018/helpers/get-event-listeners-of-audio-node.js.map","import { ACTIVE_AUDIO_NODE_STORE } from '../globals';\nimport { getEventListenersOfAudioNode } from './get-event-listeners-of-audio-node';\nexport const setInternalState = (audioNode, internalState) => {\n    if (internalState === 'active') {\n        if (ACTIVE_AUDIO_NODE_STORE.has(audioNode)) {\n            throw new Error('The AudioNode is already stored.');\n        }\n        ACTIVE_AUDIO_NODE_STORE.add(audioNode);\n    }\n    else {\n        if (!ACTIVE_AUDIO_NODE_STORE.has(audioNode)) {\n            throw new Error('The AudioNode is not stored.');\n        }\n        ACTIVE_AUDIO_NODE_STORE.delete(audioNode);\n    }\n    getEventListenersOfAudioNode(audioNode)\n        .forEach((eventListener) => eventListener(internalState));\n};\n//# sourceMappingURL=/build/es2018/helpers/set-internal-state.js.map","export const wrapEventListener = (target, eventListener) => {\n    if (typeof eventListener === 'function') {\n        return (event) => {\n            const descriptor = { value: target };\n            Object.defineProperties(event, {\n                currentTarget: descriptor,\n                target: descriptor\n            });\n            return eventListener.call(target, event);\n        };\n    }\n    return eventListener;\n};\n//# sourceMappingURL=/build/es2018/helpers/wrap-event-listener.js.map","import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { getNativeContext } from '../helpers/get-native-context';\nimport { setInternalState } from '../helpers/set-internal-state';\nimport { wrapEventListener } from '../helpers/wrap-event-listener';\nconst DEFAULT_OPTIONS = {\n    buffer: null,\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    // Bug #149: Safari does not yet support the detune AudioParam.\n    loop: false,\n    loopEnd: 0,\n    loopStart: 0,\n    playbackRate: 1\n};\nexport const createAudioBufferSourceNodeConstructor = (createAudioBufferSourceNodeRenderer, createAudioParam, createInvalidStateError, createNativeAudioBufferSourceNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class AudioBufferSourceNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const audioBufferSourceNodeRenderer = ((isOffline)\n                ? createAudioBufferSourceNodeRenderer()\n                : null);\n            super(context, 'passive', nativeAudioBufferSourceNode, audioBufferSourceNodeRenderer);\n            this._audioBufferSourceNodeRenderer = audioBufferSourceNodeRenderer;\n            this._isBufferNullified = false;\n            this._isBufferSet = false;\n            this._nativeAudioBufferSourceNode = nativeAudioBufferSourceNode;\n            this._onended = null;\n            // Bug #73: Edge & Safari do not export the correct values for maxValue and minValue.\n            this._playbackRate = createAudioParam(this, isOffline, nativeAudioBufferSourceNode.playbackRate, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n        }\n        get buffer() {\n            if (this._isBufferNullified) {\n                return null;\n            }\n            return this._nativeAudioBufferSourceNode.buffer;\n        }\n        set buffer(value) {\n            // Bug #71: Edge does not allow to set the buffer to null.\n            try {\n                this._nativeAudioBufferSourceNode.buffer = value;\n            }\n            catch (err) {\n                if (value !== null || err.code !== 17) {\n                    throw err; // tslint:disable-line:rxjs-throw-error\n                }\n                // This will modify the buffer in place. Luckily that works in Edge and has the same effect as setting the buffer to null.\n                if (this._nativeAudioBufferSourceNode.buffer !== null) {\n                    const buffer = this._nativeAudioBufferSourceNode.buffer;\n                    const numberOfChannels = buffer.numberOfChannels;\n                    for (let i = 0; i < numberOfChannels; i += 1) {\n                        buffer\n                            .getChannelData(i)\n                            .fill(0);\n                    }\n                    this._isBufferNullified = true;\n                }\n            }\n            // Bug #72: Only Chrome, Edge & Opera do not allow to reassign the buffer yet.\n            if (value !== null) {\n                if (this._isBufferSet) {\n                    throw createInvalidStateError();\n                }\n                this._isBufferSet = true;\n            }\n        }\n        get onended() {\n            return this._onended;\n        }\n        set onended(value) {\n            const wrappedListener = wrapEventListener(this, value);\n            this._nativeAudioBufferSourceNode.onended = wrappedListener;\n            const nativeOnEnded = this._nativeAudioBufferSourceNode.onended;\n            this._onended = (nativeOnEnded === wrappedListener) ? value : nativeOnEnded;\n        }\n        get loop() {\n            return this._nativeAudioBufferSourceNode.loop;\n        }\n        set loop(value) {\n            this._nativeAudioBufferSourceNode.loop = value;\n        }\n        get loopEnd() {\n            return this._nativeAudioBufferSourceNode.loopEnd;\n        }\n        set loopEnd(value) {\n            this._nativeAudioBufferSourceNode.loopEnd = value;\n        }\n        get loopStart() {\n            return this._nativeAudioBufferSourceNode.loopStart;\n        }\n        set loopStart(value) {\n            this._nativeAudioBufferSourceNode.loopStart = value;\n        }\n        get playbackRate() {\n            return this._playbackRate;\n        }\n        start(when = 0, offset = 0, duration) {\n            this._nativeAudioBufferSourceNode.start(when, offset, duration);\n            if (this._audioBufferSourceNodeRenderer !== null) {\n                this._audioBufferSourceNodeRenderer.start = (duration === undefined) ? [when, offset] : [when, offset, duration];\n            }\n            else {\n                setInternalState(this, 'active');\n                const setInternalStateToInactive = () => {\n                    this._nativeAudioBufferSourceNode.removeEventListener('ended', setInternalStateToInactive);\n                    // @todo Determine a meaningful delay instead of just using one second.\n                    setTimeout(() => setInternalState(this, 'passive'), 1000);\n                };\n                this._nativeAudioBufferSourceNode.addEventListener('ended', setInternalStateToInactive);\n            }\n        }\n        stop(when = 0) {\n            this._nativeAudioBufferSourceNode.stop(when);\n            if (this._audioBufferSourceNodeRenderer !== null) {\n                this._audioBufferSourceNodeRenderer.stop = when;\n            }\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-buffer-source-node-constructor.js.map","import { AUDIO_PARAM_STORE } from '../globals';\nimport { getValueForKey } from './get-value-for-key';\nexport const getNativeAudioParam = (audioParam) => {\n    return getValueForKey(AUDIO_PARAM_STORE, audioParam);\n};\n//# sourceMappingURL=/build/es2018/helpers/get-native-audio-param.js.map","import { getAudioGraph } from './get-audio-graph';\nimport { getValueForKey } from './get-value-for-key';\nexport function getAudioParamConnections(context, audioParam) {\n    const audioGraph = getAudioGraph(context);\n    return getValueForKey(audioGraph.params, audioParam);\n}\n//# sourceMappingURL=/build/es2018/helpers/get-audio-param-connections.js.map","import { getAudioNodeRenderer } from './get-audio-node-renderer';\nimport { getAudioParamConnections } from './get-audio-param-connections';\nexport const renderInputsOfAudioParam = (context, audioParam, nativeOfflineAudioContext, nativeAudioParam) => {\n    const audioParamConnections = getAudioParamConnections(context, audioParam);\n    return Promise\n        .all(Array\n        .from(audioParamConnections.activeInputs)\n        .map(([source, output]) => {\n        return getAudioNodeRenderer(source)\n            .render(source, nativeOfflineAudioContext)\n            .then((node) => node.connect(nativeAudioParam, output));\n    }));\n};\n//# sourceMappingURL=/build/es2018/helpers/render-inputs-of-audio-param.js.map","import { getNativeAudioParam } from './get-native-audio-param';\nimport { renderInputsOfAudioParam } from './render-inputs-of-audio-param';\nexport const connectAudioParam = (context, nativeOfflineAudioContext, audioParam, nativeAudioParam = getNativeAudioParam(audioParam)) => {\n    return renderInputsOfAudioParam(context, audioParam, nativeOfflineAudioContext, nativeAudioParam);\n};\n//# sourceMappingURL=/build/es2018/helpers/connect-audio-param.js.map","import { getAudioParamRenderer } from './get-audio-param-renderer';\nimport { renderInputsOfAudioParam } from './render-inputs-of-audio-param';\nexport const renderAutomation = (context, nativeOfflineAudioContext, audioParam, nativeAudioParam) => {\n    const audioParamRenderer = getAudioParamRenderer(context, audioParam);\n    audioParamRenderer.replay(nativeAudioParam);\n    return renderInputsOfAudioParam(context, audioParam, nativeOfflineAudioContext, nativeAudioParam);\n};\n//# sourceMappingURL=/build/es2018/helpers/render-automation.js.map","import { getAudioParamConnections } from './get-audio-param-connections';\nexport function getAudioParamRenderer(context, audioParam) {\n    const audioParamConnections = getAudioParamConnections(context, audioParam);\n    if (audioParamConnections.renderer === null) {\n        throw new Error('Missing the renderer of the given AudioParam in the audio graph.');\n    }\n    return audioParamConnections.renderer;\n}\n//# sourceMappingURL=/build/es2018/helpers/get-audio-param-renderer.js.map","export const isValidLatencyHint = (latencyHint) => {\n    return latencyHint === undefined ||\n        typeof latencyHint === 'number' ||\n        (typeof latencyHint === 'string' && (latencyHint === 'balanced' || latencyHint === 'interactive' || latencyHint === 'playback'));\n};\n//# sourceMappingURL=/build/es2018/helpers/is-valid-latency-hint.js.map","import { wrapEventListener } from './helpers/wrap-event-listener';\nexport class EventTarget {\n    constructor(_nativeEventTarget) {\n        this._nativeEventTarget = _nativeEventTarget;\n        this._listeners = new WeakMap();\n    }\n    addEventListener(type, listener, // @todo EventListenerOrEventListenerObject | null = null,\n    options) {\n        let wrappedEventListener = this._listeners.get(listener);\n        if (wrappedEventListener === undefined) {\n            wrappedEventListener = wrapEventListener(this, listener);\n            if (typeof listener === 'function') {\n                this._listeners.set(listener, wrappedEventListener);\n            }\n        }\n        return this._nativeEventTarget.addEventListener(type, wrappedEventListener, options);\n    }\n    dispatchEvent(event) {\n        return this._nativeEventTarget.dispatchEvent(event);\n    }\n    removeEventListener(type, listener, // @todo EventListenerOrEventListenerObject | null = null,\n    options) {\n        const wrappedEventListener = this._listeners.get(listener);\n        return this._nativeEventTarget.removeEventListener(type, (wrappedEventListener === undefined) ? null : wrappedEventListener, options);\n    }\n}\n//# sourceMappingURL=/build/es2018/event-target.js.map","export const isAudioNode = (audioNodeOrAudioParam) => {\n    return 'context' in audioNodeOrAudioParam;\n};\n//# sourceMappingURL=/build/es2018/guards/audio-node.js.map","import { isAudioNode } from './audio-node';\nexport const isAudioNodeOutputConnection = (outputConnection) => {\n    return isAudioNode(outputConnection[0]);\n};\n//# sourceMappingURL=/build/es2018/guards/audio-node-output-connection.js.map","export const isAudioWorkletNode = (audioNode) => {\n    return 'port' in audioNode;\n};\n//# sourceMappingURL=/build/es2018/guards/audio-worklet-node.js.map","export const connectNativeAudioNodeToNativeAudioNode = (nativeSourceAudioNode, nativeDestinationAudioNode, output, input) => {\n    const inputs = nativeDestinationAudioNode.inputs;\n    if (inputs !== undefined) {\n        nativeSourceAudioNode.connect(inputs[input], output, 0);\n        return [inputs[input], output, 0];\n    }\n    nativeSourceAudioNode.connect(nativeDestinationAudioNode, output, input);\n    return [nativeDestinationAudioNode, output, input];\n};\n//# sourceMappingURL=/build/es2018/helpers/connect-native-audio-node-to-native-audio-node.js.map","import { getEventListenersOfAudioNode } from './get-event-listeners-of-audio-node';\nexport const deleteEventListenerOfAudioNode = (audioNode, eventListener) => {\n    const eventListeners = getEventListenersOfAudioNode(audioNode);\n    if (!eventListeners.delete(eventListener)) {\n        throw new Error('Missing the expected event listener');\n    }\n};\n//# sourceMappingURL=/build/es2018/helpers/delete-event-listeners-of-audio-node.js.map","export const disconnectNativeAudioNodeFromNativeAudioNode = (nativeSourceAudioNode, nativeDestinationAudioNode, output, input) => {\n    const inputs = nativeDestinationAudioNode.inputs;\n    if (input === undefined || output === undefined) {\n        nativeSourceAudioNode.disconnect(nativeDestinationAudioNode);\n    }\n    else if (inputs !== undefined) {\n        nativeSourceAudioNode.disconnect(inputs[input], output, 0);\n    }\n    else {\n        nativeSourceAudioNode.disconnect(nativeDestinationAudioNode, output, input);\n    }\n};\n//# sourceMappingURL=/build/es2018/helpers/disconnect-native-audio-node-from-native-audio-node.js.map","export const insertElementInSet = (set, element, predicate, ignoreDuplicates) => {\n    for (const lmnt of set) {\n        if (predicate(lmnt)) {\n            if (ignoreDuplicates) {\n                return false;\n            }\n            throw Error('The set contains at least one similar element.');\n        }\n    }\n    set.add(element);\n    return true;\n};\n//# sourceMappingURL=/build/es2018/helpers/insert-element-in-set.js.map","import { ACTIVE_AUDIO_NODE_STORE } from '../globals';\nexport const isActiveAudioNode = (audioNode) => {\n    return ACTIVE_AUDIO_NODE_STORE.has(audioNode);\n};\n//# sourceMappingURL=/build/es2018/helpers/is-active-audio-node.js.map","import { ACTIVE_AUDIO_NODE_STORE } from '../globals';\nexport const isPassiveAudioNode = (audioNode) => {\n    return !ACTIVE_AUDIO_NODE_STORE.has(audioNode);\n};\n//# sourceMappingURL=/build/es2018/helpers/is-passive-audio-node.js.map","export const pickElementFromSet = (set, predicate) => {\n    const matchingElements = Array\n        .from(set)\n        .filter(predicate);\n    if (matchingElements.length > 1) {\n        throw Error('More than one element was found.');\n    }\n    if (matchingElements.length === 0) {\n        throw Error('No element was found.');\n    }\n    const [matchingElement] = matchingElements;\n    set.delete(matchingElement);\n    return matchingElement;\n};\n//# sourceMappingURL=/build/es2018/helpers/pick-element-from-set.js.map","import { isAudioWorkletNode } from '../guards/audio-worklet-node';\nimport { setInternalState } from './set-internal-state';\n// Set the internalState of the audioNode to 'passive' if it is not an AudioWorkletNode and if it has no 'active' input connections.\nexport const setInternalStateToPassiveWhenNecessary = (audioNode, activeInputs) => {\n    if (!isAudioWorkletNode(audioNode) && activeInputs.every((connections) => (connections.size === 0))) {\n        setInternalState(audioNode, 'passive');\n    }\n};\n//# sourceMappingURL=/build/es2018/helpers/set-internal-state-to-passive-when-necessary.js.map","export const testAudioNodeDisconnectMethodSupport = (nativeAudioContext) => {\n    return new Promise((resolve) => {\n        const analyzer = nativeAudioContext.createScriptProcessor(256, 1, 1);\n        const dummy = nativeAudioContext.createGain();\n        // Bug #95: Safari does not play one sample buffers.\n        const ones = nativeAudioContext.createBuffer(1, 2, 44100);\n        const channelData = ones.getChannelData(0);\n        channelData[0] = 1;\n        channelData[1] = 1;\n        const source = nativeAudioContext.createBufferSource();\n        source.buffer = ones;\n        source.loop = true;\n        source.connect(analyzer);\n        analyzer.connect(nativeAudioContext.destination);\n        source.connect(dummy);\n        source.disconnect(dummy);\n        analyzer.onaudioprocess = (event) => {\n            const chnnlDt = event.inputBuffer.getChannelData(0);\n            if (Array.prototype.some.call(chnnlDt, (sample) => sample === 1)) {\n                resolve(true);\n            }\n            else {\n                resolve(false);\n            }\n            source.stop();\n            analyzer.onaudioprocess = null; // tslint:disable-line:deprecation\n            source.disconnect(analyzer);\n            analyzer.disconnect(nativeAudioContext.destination);\n        };\n        source.start();\n    });\n};\n//# sourceMappingURL=/build/es2018/helpers/test-audio-node-disconnect-method-support.js.map","export const isNativeAudioNode = (nativeAudioNodeOrAudioParam) => {\n    return 'context' in nativeAudioNodeOrAudioParam;\n};\n//# sourceMappingURL=/build/es2018/guards/native-audio-node.js.map","import { EventTarget } from '../event-target';\nimport { ACTIVE_AUDIO_NODE_STORE, AUDIO_NODE_STORE, AUXILIARY_GAIN_NODE_STORE, EVENT_LISTENERS } from '../globals';\nimport { isAudioNode } from '../guards/audio-node';\nimport { isAudioNodeOutputConnection } from '../guards/audio-node-output-connection';\nimport { isAudioWorkletNode } from '../guards/audio-worklet-node';\nimport { connectNativeAudioNodeToNativeAudioNode } from '../helpers/connect-native-audio-node-to-native-audio-node';\nimport { deleteEventListenerOfAudioNode } from '../helpers/delete-event-listeners-of-audio-node';\nimport { disconnectNativeAudioNodeFromNativeAudioNode } from '../helpers/disconnect-native-audio-node-from-native-audio-node';\nimport { getAudioGraph } from '../helpers/get-audio-graph';\nimport { getAudioNodeConnections } from '../helpers/get-audio-node-connections';\nimport { getAudioParamConnections } from '../helpers/get-audio-param-connections';\nimport { getEventListenersOfAudioNode } from '../helpers/get-event-listeners-of-audio-node';\nimport { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { getNativeAudioParam } from '../helpers/get-native-audio-param';\nimport { getNativeContext } from '../helpers/get-native-context';\nimport { getValueForKey } from '../helpers/get-value-for-key';\nimport { insertElementInSet } from '../helpers/insert-element-in-set';\nimport { isActiveAudioNode } from '../helpers/is-active-audio-node';\nimport { isPassiveAudioNode } from '../helpers/is-passive-audio-node';\nimport { pickElementFromSet } from '../helpers/pick-element-from-set';\nimport { setInternalState } from '../helpers/set-internal-state';\nimport { setInternalStateToPassiveWhenNecessary } from '../helpers/set-internal-state-to-passive-when-necessary';\nimport { testAudioNodeDisconnectMethodSupport } from '../helpers/test-audio-node-disconnect-method-support';\nimport { wrapAudioNodeDisconnectMethod } from '../helpers/wrap-audio-node-disconnect-method';\nconst addAudioNode = (context, audioNode, audioNoderRender, nativeAudioNode) => {\n    const activeInputs = [];\n    for (let i = 0; i < nativeAudioNode.numberOfInputs; i += 1) {\n        activeInputs.push(new Set());\n    }\n    const { nodes } = getAudioGraph(context);\n    nodes.set(audioNode, {\n        activeInputs,\n        outputs: new Set(),\n        passiveInputs: new WeakMap(),\n        renderer: audioNoderRender\n    });\n};\nconst addActiveInputConnectionToAudioNode = (activeInputs, source, [output, input, eventListener], ignoreDuplicates) => {\n    insertElementInSet(activeInputs[input], [source, output, eventListener], (activeInputConnection) => (activeInputConnection[0] === source && activeInputConnection[1] === output), ignoreDuplicates);\n};\nconst addActiveInputConnectionToAudioParam = (activeInputs, source, [output, eventListener], ignoreDuplicates) => {\n    insertElementInSet(activeInputs, [source, output, eventListener], (activeInputConnection) => (activeInputConnection[0] === source && activeInputConnection[1] === output), ignoreDuplicates);\n};\nconst deleteActiveInputConnectionToAudioNode = (activeInputs, source, output, input) => {\n    return pickElementFromSet(activeInputs[input], (activeInputConnection) => (activeInputConnection[0] === source && activeInputConnection[1] === output));\n};\nconst deleteActiveInputConnectionToAudioParam = (activeInputs, source, output) => {\n    return pickElementFromSet(activeInputs, (activeInputConnection) => (activeInputConnection[0] === source && activeInputConnection[1] === output));\n};\nconst addPassiveInputConnectionToAudioNode = (passiveInputs, input, [source, output, eventListener], ignoreDuplicates) => {\n    const passiveInputConnections = passiveInputs.get(source);\n    if (passiveInputConnections === undefined) {\n        passiveInputs.set(source, new Set([[output, input, eventListener]]));\n    }\n    else {\n        insertElementInSet(passiveInputConnections, [output, input, eventListener], (passiveInputConnection) => (passiveInputConnection[0] === output && passiveInputConnection[1] === input), ignoreDuplicates);\n    }\n};\nconst addPassiveInputConnectionToAudioParam = (passiveInputs, [source, output, eventListener], ignoreDuplicates) => {\n    const passiveInputConnections = passiveInputs.get(source);\n    if (passiveInputConnections === undefined) {\n        passiveInputs.set(source, new Set([[output, eventListener]]));\n    }\n    else {\n        insertElementInSet(passiveInputConnections, [output, eventListener], (passiveInputConnection) => (passiveInputConnection[0] === output), ignoreDuplicates);\n    }\n};\nconst deletePassiveInputConnectionToAudioNode = (passiveInputs, source, output, input) => {\n    const passiveInputConnections = getValueForKey(passiveInputs, source);\n    const matchingConnection = pickElementFromSet(passiveInputConnections, (passiveInputConnection) => (passiveInputConnection[0] === output && passiveInputConnection[1] === input));\n    if (passiveInputConnections.size === 0) {\n        passiveInputs.delete(source);\n    }\n    return matchingConnection;\n};\nconst deletePassiveInputConnectionToAudioParam = (passiveInputs, source, output) => {\n    const passiveInputConnections = getValueForKey(passiveInputs, source);\n    const matchingConnection = pickElementFromSet(passiveInputConnections, (passiveInputConnection) => (passiveInputConnection[0] === output));\n    if (passiveInputConnections.size === 0) {\n        passiveInputs.delete(source);\n    }\n    return matchingConnection;\n};\nconst addConnectionToAudioNodeOfAudioContext = (source, destination, output, input) => {\n    const { activeInputs, passiveInputs } = getAudioNodeConnections(destination);\n    const { outputs } = getAudioNodeConnections(source);\n    const eventListeners = getEventListenersOfAudioNode(source);\n    const eventListener = ((type) => {\n        const nativeDestinationAudioNode = getNativeAudioNode(destination);\n        const nativeSourceAudioNode = getNativeAudioNode(source);\n        if (type === 'active') {\n            const partialConnection = deletePassiveInputConnectionToAudioNode(passiveInputs, source, output, input);\n            addActiveInputConnectionToAudioNode(activeInputs, source, partialConnection, false);\n            connectNativeAudioNodeToNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output, input);\n            if (isPassiveAudioNode(destination)) {\n                setInternalState(destination, 'active');\n            }\n        }\n        else if (type === 'passive') {\n            const partialConnection = deleteActiveInputConnectionToAudioNode(activeInputs, source, output, input);\n            addPassiveInputConnectionToAudioNode(passiveInputs, input, partialConnection, false);\n            disconnectNativeAudioNodeFromNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output, input);\n            if (isActiveAudioNode(destination)) {\n                setInternalStateToPassiveWhenNecessary(destination, activeInputs);\n            }\n        }\n    });\n    if (insertElementInSet(outputs, [destination, output, input], (outputConnection) => (outputConnection[0] === destination && outputConnection[1] === output && outputConnection[2] === input), true)) {\n        eventListeners.add(eventListener);\n        if (isActiveAudioNode(source)) {\n            addActiveInputConnectionToAudioNode(activeInputs, source, [output, input, eventListener], true);\n        }\n        else {\n            addPassiveInputConnectionToAudioNode(passiveInputs, input, [source, output, eventListener], true);\n        }\n    }\n};\nconst addConnectionToAudioNodeOfOfflineAudioContext = (source, destination, output, input) => {\n    const { activeInputs } = getAudioNodeConnections(destination);\n    const { outputs } = getAudioNodeConnections(source);\n    if (insertElementInSet(outputs, [destination, output, input], (outputConnection) => (outputConnection[0] === destination && outputConnection[1] === output && outputConnection[2] === input), true)) {\n        addActiveInputConnectionToAudioNode(activeInputs, source, [output, input, null], true);\n    }\n};\nconst addConnectionToAudioParamOfAudioContext = (source, destination, output) => {\n    const { activeInputs, passiveInputs } = getAudioParamConnections(source.context, destination);\n    const { outputs } = getAudioNodeConnections(source);\n    const eventListeners = getEventListenersOfAudioNode(source);\n    const eventListener = ((type) => {\n        const nativeAudioNode = getNativeAudioNode(source);\n        const nativeAudioParam = getNativeAudioParam(destination);\n        if (type === 'active') {\n            const partialConnection = deletePassiveInputConnectionToAudioParam(passiveInputs, source, output);\n            addActiveInputConnectionToAudioParam(activeInputs, source, partialConnection, false);\n            nativeAudioNode.connect(nativeAudioParam, output);\n        }\n        else if (type === 'passive') {\n            const partialConnection = deleteActiveInputConnectionToAudioParam(activeInputs, source, output);\n            addPassiveInputConnectionToAudioParam(passiveInputs, partialConnection, false);\n            nativeAudioNode.disconnect(nativeAudioParam, output);\n        }\n    });\n    if (insertElementInSet(outputs, [destination, output], (outputConnection) => (outputConnection[0] === destination && outputConnection[1] === output), true)) {\n        eventListeners.add(eventListener);\n        if (isActiveAudioNode(source)) {\n            addActiveInputConnectionToAudioParam(activeInputs, source, [output, eventListener], true);\n        }\n        else {\n            addPassiveInputConnectionToAudioParam(passiveInputs, [source, output, eventListener], true);\n        }\n    }\n};\nconst addConnectionToAudioParamOfOfflineAudioContext = (source, destination, output) => {\n    const { activeInputs } = getAudioParamConnections(source.context, destination);\n    const { outputs } = getAudioNodeConnections(source);\n    if (insertElementInSet(outputs, [destination, output], (outputConnection) => (outputConnection[0] === destination && outputConnection[1] === output), true)) {\n        addActiveInputConnectionToAudioParam(activeInputs, source, [output, null], true);\n    }\n};\nconst deleteActiveInputConnection = (activeInputConnections, source, output) => {\n    for (const activeInputConnection of activeInputConnections) {\n        if (activeInputConnection[0] === source && activeInputConnection[1] === output) {\n            activeInputConnections.delete(activeInputConnection);\n            return activeInputConnection;\n        }\n    }\n    return null;\n};\nconst deleteInputConnectionOfAudioNode = (source, destination, output, input) => {\n    const { activeInputs, passiveInputs } = getAudioNodeConnections(destination);\n    const activeInputConnection = deleteActiveInputConnection(activeInputs[input], source, output);\n    if (activeInputConnection === null) {\n        const passiveInputConnection = deletePassiveInputConnectionToAudioNode(passiveInputs, source, output, input);\n        return [passiveInputConnection[2], 'passive'];\n    }\n    return [activeInputConnection[2], 'active'];\n};\nconst deleteInputConnectionOfAudioParam = (source, destination, output) => {\n    const { activeInputs, passiveInputs } = getAudioParamConnections(source.context, destination);\n    const activeInputConnection = deleteActiveInputConnection(activeInputs, source, output);\n    if (activeInputConnection === null) {\n        const passiveInputConnection = deletePassiveInputConnectionToAudioParam(passiveInputs, source, output);\n        return [passiveInputConnection[1], 'passive'];\n    }\n    return [activeInputConnection[2], 'active'];\n};\nconst deleteInputsOfAudioNode = (source, destination, output, input) => {\n    const [listener, internalState] = deleteInputConnectionOfAudioNode(source, destination, output, input);\n    if (listener !== null) {\n        deleteEventListenerOfAudioNode(source, listener);\n        if (internalState === 'active') {\n            disconnectNativeAudioNodeFromNativeAudioNode(getNativeAudioNode(source), getNativeAudioNode(destination), output, input);\n        }\n    }\n    if (isActiveAudioNode(destination)) {\n        const { activeInputs } = getAudioNodeConnections(destination);\n        setInternalStateToPassiveWhenNecessary(destination, activeInputs);\n    }\n};\nconst deleteInputsOfAudioParam = (source, destination, output) => {\n    const [listener, internalState] = deleteInputConnectionOfAudioParam(source, destination, output);\n    if (listener !== null) {\n        deleteEventListenerOfAudioNode(source, listener);\n        if (internalState === 'active') {\n            getNativeAudioNode(source)\n                .disconnect(getNativeAudioParam(destination), output);\n        }\n    }\n};\nconst deleteAnyConnection = (source) => {\n    const audioNodeConnectionsOfSource = getAudioNodeConnections(source);\n    for (const outputConnection of audioNodeConnectionsOfSource.outputs) {\n        if (isAudioNodeOutputConnection(outputConnection)) {\n            deleteInputsOfAudioNode(source, ...outputConnection);\n        }\n        else {\n            deleteInputsOfAudioParam(source, ...outputConnection);\n        }\n    }\n    audioNodeConnectionsOfSource.outputs.clear();\n};\nconst deleteConnectionAtOutput = (source, output) => {\n    const audioNodeConnectionsOfSource = getAudioNodeConnections(source);\n    for (const outputConnection of audioNodeConnectionsOfSource.outputs) {\n        if (outputConnection[1] === output) {\n            if (isAudioNodeOutputConnection(outputConnection)) {\n                deleteInputsOfAudioNode(source, ...outputConnection);\n            }\n            else {\n                deleteInputsOfAudioParam(source, ...outputConnection);\n            }\n            audioNodeConnectionsOfSource.outputs.delete(outputConnection);\n        }\n    }\n};\nconst deleteConnectionToDestination = (source, destination, output, input) => {\n    const audioNodeConnectionsOfSource = getAudioNodeConnections(source);\n    return Array\n        .from(audioNodeConnectionsOfSource.outputs)\n        .filter((outputConnection) => (outputConnection[0] === destination\n        && (output === undefined || outputConnection[1] === output)\n        && (input === undefined || outputConnection[2] === input)))\n        .reduce((numberOfDeletedConnections, outputConnection) => {\n        if (isAudioNodeOutputConnection(outputConnection)) {\n            deleteInputsOfAudioNode(source, ...outputConnection);\n        }\n        else {\n            deleteInputsOfAudioParam(source, ...outputConnection);\n        }\n        audioNodeConnectionsOfSource.outputs.delete(outputConnection);\n        return numberOfDeletedConnections + 1;\n    }, 0);\n};\nexport const createAudioNodeConstructor = (cacheTestResult, createIndexSizeError, createInvalidAccessError, createNotSupportedError, detectCycles, isNativeOfflineAudioContext) => {\n    return class AudioNode extends EventTarget {\n        constructor(context, internalState, nativeAudioNode, audioNodeRenderer) {\n            super(nativeAudioNode);\n            this._context = context;\n            this._nativeAudioNode = nativeAudioNode;\n            const nativeContext = getNativeContext(context);\n            // Bug #12: Safari does not support to disconnect a specific destination.\n            // @todo Make sure this is not used with an OfflineAudioContext.\n            if (!isNativeOfflineAudioContext(nativeContext) && true !== cacheTestResult(testAudioNodeDisconnectMethodSupport, () => {\n                return testAudioNodeDisconnectMethodSupport(nativeContext);\n            })) {\n                wrapAudioNodeDisconnectMethod(nativeAudioNode);\n            }\n            if (internalState === 'active') {\n                ACTIVE_AUDIO_NODE_STORE.add(this);\n            }\n            AUDIO_NODE_STORE.set(this, nativeAudioNode);\n            EVENT_LISTENERS.set(this, new Set());\n            addAudioNode(context, this, audioNodeRenderer, nativeAudioNode);\n        }\n        get channelCount() {\n            return this._nativeAudioNode.channelCount;\n        }\n        set channelCount(value) {\n            this._nativeAudioNode.channelCount = value;\n        }\n        get channelCountMode() {\n            return this._nativeAudioNode.channelCountMode;\n        }\n        set channelCountMode(value) {\n            this._nativeAudioNode.channelCountMode = value;\n        }\n        get channelInterpretation() {\n            return this._nativeAudioNode.channelInterpretation;\n        }\n        set channelInterpretation(value) {\n            this._nativeAudioNode.channelInterpretation = value;\n        }\n        get context() {\n            return this._context;\n        }\n        get numberOfInputs() {\n            return this._nativeAudioNode.numberOfInputs;\n        }\n        get numberOfOutputs() {\n            return this._nativeAudioNode.numberOfOutputs;\n        }\n        connect(destination, output = 0, input = 0) {\n            const nativeContext = getNativeContext(this._context);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            if (isAudioNode(destination)) {\n                const nativeDestinationAudioNode = getNativeAudioNode(destination);\n                try {\n                    const connection = connectNativeAudioNodeToNativeAudioNode(this._nativeAudioNode, nativeDestinationAudioNode, output, input);\n                    if (isOffline || isPassiveAudioNode(this)) {\n                        this._nativeAudioNode.disconnect(...connection);\n                    }\n                    else if (isPassiveAudioNode(destination)) {\n                        setInternalState(destination, 'active');\n                    }\n                    // An AudioWorklet needs a connection because it otherwise may truncate the input array.\n                    // @todo Count the number of connections which depend on this auxiliary GainNode to know when it can be removed again.\n                    if (isAudioWorkletNode(destination)) {\n                        const auxiliaryGainNodes = AUXILIARY_GAIN_NODE_STORE.get(nativeDestinationAudioNode);\n                        if (auxiliaryGainNodes === undefined) {\n                            const nativeGainNode = nativeContext.createGain();\n                            nativeGainNode.connect(connection[0], 0, connection[2]);\n                            AUXILIARY_GAIN_NODE_STORE.set(nativeDestinationAudioNode, new Map([[input, nativeGainNode]]));\n                        }\n                        else if (auxiliaryGainNodes.get(input) === undefined) {\n                            const nativeGainNode = nativeContext.createGain();\n                            nativeGainNode.connect(connection[0], 0, connection[2]);\n                            auxiliaryGainNodes.set(input, nativeGainNode);\n                        }\n                    }\n                }\n                catch (err) {\n                    // Bug #41: Only Chrome, Firefox and Opera throw the correct exception by now.\n                    if (err.code === 12) {\n                        throw createInvalidAccessError();\n                    }\n                    throw err; // tslint:disable-line:rxjs-throw-error\n                }\n                detectCycles(this, destination);\n                if (isOffline) {\n                    addConnectionToAudioNodeOfOfflineAudioContext(this, destination, output, input);\n                }\n                else {\n                    addConnectionToAudioNodeOfAudioContext(this, destination, output, input);\n                }\n                return destination;\n            }\n            const nativeAudioParam = getNativeAudioParam(destination);\n            /*\n             * Bug #147 & #153: Safari does not support to connect an input signal to the playbackRate AudioParam of an\n             * AudioBufferSourceNode. This can't be easily detected and that's why the outdated name property is used here to identify\n             * Safari.\n             */\n            if (nativeAudioParam.name === 'playbackRate') {\n                throw createNotSupportedError();\n            }\n            try {\n                this._nativeAudioNode.connect(nativeAudioParam, output);\n                if (isOffline || isPassiveAudioNode(this)) {\n                    this._nativeAudioNode.disconnect(nativeAudioParam, output);\n                }\n            }\n            catch (err) {\n                // Bug #58: Only Firefox does throw an InvalidStateError yet.\n                if (err.code === 12) {\n                    throw createInvalidAccessError();\n                }\n                throw err; // tslint:disable-line:rxjs-throw-error\n            }\n            detectCycles(this, destination);\n            if (isOffline) {\n                addConnectionToAudioParamOfOfflineAudioContext(this, destination, output);\n            }\n            else {\n                addConnectionToAudioParamOfAudioContext(this, destination, output);\n            }\n        }\n        disconnect(destinationOrOutput, output, input) {\n            if (destinationOrOutput === undefined) {\n                deleteAnyConnection(this);\n            }\n            else if (typeof destinationOrOutput === 'number') {\n                if (destinationOrOutput < 0 || destinationOrOutput >= this.numberOfOutputs) {\n                    throw createIndexSizeError();\n                }\n                deleteConnectionAtOutput(this, destinationOrOutput);\n            }\n            else {\n                if (output !== undefined && (output < 0 || output >= this.numberOfOutputs)) {\n                    throw createIndexSizeError();\n                }\n                if (isAudioNode(destinationOrOutput)\n                    && input !== undefined\n                    && (input < 0 || input >= destinationOrOutput.numberOfInputs)) {\n                    throw createIndexSizeError();\n                }\n                if (deleteConnectionToDestination(this, destinationOrOutput, output, input) === 0) {\n                    throw createInvalidAccessError();\n                }\n            }\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-node-constructor.js.map","import { AutomationEventList } from 'automation-events';\nimport { AUDIO_PARAM_AUDIO_NODE_STORE, AUDIO_PARAM_STORE } from '../globals';\nimport { getAudioGraph } from '../helpers/get-audio-graph';\nconst addAudioParam = (context, audioParam, audioParamRenderer) => {\n    const audioGraph = getAudioGraph(context);\n    audioGraph.params.set(audioParam, { activeInputs: new Set(), passiveInputs: new WeakMap(), renderer: audioParamRenderer });\n};\nexport const createAudioParamFactory = (createAudioParamRenderer, createCancelAndHoldAutomationEvent, createCancelScheduledValuesAutomationEvent, createExponentialRampToValueAutomationEvent, createLinearRampToValueAutomationEvent, createSetTargetAutomationEvent, createSetValueAutomationEvent, createSetValueCurveAutomationEvent, nativeAudioContextConstructor) => {\n    return (audioNode, isAudioParamOfOfflineAudioContext, nativeAudioParam, maxValue = null, minValue = null) => {\n        const automationEventList = new AutomationEventList(nativeAudioParam.defaultValue);\n        const audioParamRenderer = (isAudioParamOfOfflineAudioContext) ? createAudioParamRenderer(automationEventList) : null;\n        const audioParam = {\n            get defaultValue() {\n                return nativeAudioParam.defaultValue;\n            },\n            get maxValue() {\n                return (maxValue === null) ? nativeAudioParam.maxValue : maxValue;\n            },\n            get minValue() {\n                return (minValue === null) ? nativeAudioParam.minValue : minValue;\n            },\n            get value() {\n                return nativeAudioParam.value;\n            },\n            set value(value) {\n                nativeAudioParam.value = value;\n                // Bug #98: Edge, Firefox & Safari do not yet treat the value setter like a call to setValueAtTime().\n                audioParam.setValueAtTime(value, audioNode.context.currentTime);\n            },\n            cancelAndHoldAtTime(cancelTime) {\n                // Bug #28: Edge, Firefox & Safari do not yet implement cancelAndHoldAtTime().\n                if (typeof nativeAudioParam.cancelAndHoldAtTime === 'function') {\n                    if (audioParamRenderer === null) {\n                        automationEventList.flush(audioNode.context.currentTime);\n                    }\n                    automationEventList.add(createCancelAndHoldAutomationEvent(cancelTime));\n                    nativeAudioParam.cancelAndHoldAtTime(cancelTime);\n                }\n                else {\n                    const previousLastEvent = Array\n                        .from(automationEventList)\n                        .pop();\n                    if (audioParamRenderer === null) {\n                        automationEventList.flush(audioNode.context.currentTime);\n                    }\n                    automationEventList.add(createCancelAndHoldAutomationEvent(cancelTime));\n                    const currentLastEvent = Array\n                        .from(automationEventList)\n                        .pop();\n                    nativeAudioParam.cancelScheduledValues(cancelTime);\n                    if (previousLastEvent !== currentLastEvent && currentLastEvent !== undefined) {\n                        if (currentLastEvent.type === 'exponentialRampToValue') {\n                            nativeAudioParam.exponentialRampToValueAtTime(currentLastEvent.value, currentLastEvent.endTime);\n                        }\n                        else if (currentLastEvent.type === 'linearRampToValue') {\n                            nativeAudioParam.linearRampToValueAtTime(currentLastEvent.value, currentLastEvent.endTime);\n                        }\n                        else if (currentLastEvent.type === 'setValue') {\n                            nativeAudioParam.setValueAtTime(currentLastEvent.value, currentLastEvent.startTime);\n                        }\n                        else if (currentLastEvent.type === 'setValueCurve') {\n                            nativeAudioParam.setValueCurveAtTime(currentLastEvent.values, currentLastEvent.startTime, currentLastEvent.duration);\n                        }\n                    }\n                }\n                return audioParam;\n            },\n            cancelScheduledValues(cancelTime) {\n                if (audioParamRenderer === null) {\n                    automationEventList.flush(audioNode.context.currentTime);\n                }\n                automationEventList.add(createCancelScheduledValuesAutomationEvent(cancelTime));\n                nativeAudioParam.cancelScheduledValues(cancelTime);\n                return audioParam;\n            },\n            exponentialRampToValueAtTime(value, endTime) {\n                if (audioParamRenderer === null) {\n                    automationEventList.flush(audioNode.context.currentTime);\n                }\n                automationEventList.add(createExponentialRampToValueAutomationEvent(value, endTime));\n                nativeAudioParam.exponentialRampToValueAtTime(value, endTime);\n                return audioParam;\n            },\n            linearRampToValueAtTime(value, endTime) {\n                if (audioParamRenderer === null) {\n                    automationEventList.flush(audioNode.context.currentTime);\n                }\n                automationEventList.add(createLinearRampToValueAutomationEvent(value, endTime));\n                nativeAudioParam.linearRampToValueAtTime(value, endTime);\n                return audioParam;\n            },\n            setTargetAtTime(target, startTime, timeConstant) {\n                if (audioParamRenderer === null) {\n                    automationEventList.flush(audioNode.context.currentTime);\n                }\n                automationEventList.add(createSetTargetAutomationEvent(target, startTime, timeConstant));\n                nativeAudioParam.setTargetAtTime(target, startTime, timeConstant);\n                return audioParam;\n            },\n            setValueAtTime(value, startTime) {\n                if (audioParamRenderer === null) {\n                    automationEventList.flush(audioNode.context.currentTime);\n                }\n                automationEventList.add(createSetValueAutomationEvent(value, startTime));\n                nativeAudioParam.setValueAtTime(value, startTime);\n                return audioParam;\n            },\n            setValueCurveAtTime(values, startTime, duration) {\n                /*\n                 * Bug #152: Safari does not correctly interpolate the values of the curve.\n                 * @todo Unfortunately there is no way to test for this behavior in synchronous fashion which is why testing for the\n                 * existence of the webkitAudioContext is used as a workaround here.\n                 */\n                if (nativeAudioContextConstructor !== null && nativeAudioContextConstructor.name === 'webkitAudioContext') {\n                    const endTime = startTime + duration;\n                    const sampleRate = audioNode.context.sampleRate;\n                    const firstSample = Math.ceil(startTime * sampleRate);\n                    const lastSample = Math.floor((endTime) * sampleRate);\n                    const numberOfInterpolatedValues = lastSample - firstSample;\n                    const interpolatedValues = new Float32Array(numberOfInterpolatedValues);\n                    for (let i = 0; i < numberOfInterpolatedValues; i += 1) {\n                        const theoreticIndex = ((values.length - 1) / duration) * (((firstSample + i) / sampleRate) - startTime);\n                        const lowerIndex = Math.floor(theoreticIndex);\n                        const upperIndex = Math.ceil(theoreticIndex);\n                        interpolatedValues[i] = (lowerIndex === upperIndex)\n                            ? values[lowerIndex]\n                            : ((1 - (theoreticIndex - lowerIndex)) * values[lowerIndex])\n                                + ((1 - (upperIndex - theoreticIndex)) * values[upperIndex]);\n                    }\n                    if (audioParamRenderer === null) {\n                        automationEventList.flush(audioNode.context.currentTime);\n                    }\n                    automationEventList.add(createSetValueCurveAutomationEvent(interpolatedValues, startTime, duration));\n                    nativeAudioParam.setValueCurveAtTime(interpolatedValues, startTime, duration);\n                    const timeOfLastSample = lastSample / sampleRate;\n                    if (timeOfLastSample < endTime) {\n                        audioParam.setValueAtTime(interpolatedValues[interpolatedValues.length - 1], timeOfLastSample);\n                    }\n                    audioParam.setValueAtTime(values[values.length - 1], endTime);\n                }\n                else {\n                    if (audioParamRenderer === null) {\n                        automationEventList.flush(audioNode.context.currentTime);\n                    }\n                    automationEventList.add(createSetValueCurveAutomationEvent(values, startTime, duration));\n                    nativeAudioParam.setValueCurveAtTime(values, startTime, duration);\n                }\n                return audioParam;\n            }\n        };\n        AUDIO_PARAM_STORE.set(audioParam, nativeAudioParam);\n        AUDIO_PARAM_AUDIO_NODE_STORE.set(audioParam, audioNode);\n        addAudioParam(audioNode.context, audioParam, audioParamRenderer);\n        return audioParam;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-param-factory.js.map","export class ReadOnlyMap {\n    constructor(parameters) {\n        this._map = new Map(parameters);\n    }\n    get size() {\n        return this._map.size;\n    }\n    entries() {\n        return this._map.entries();\n    }\n    forEach(callback, thisArg = null) {\n        return this._map.forEach((value, key) => callback.call(thisArg, value, key, this));\n    }\n    get(name) {\n        return this._map.get(name);\n    }\n    has(name) {\n        return this._map.has(name);\n    }\n    keys() {\n        return this._map.keys();\n    }\n    values() {\n        return this._map.values();\n    }\n}\n//# sourceMappingURL=/build/es2018/read-only-map.js.map","import { NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS } from '../globals';\nimport { getNativeContext } from '../helpers/get-native-context';\nimport { wrapEventListener } from '../helpers/wrap-event-listener';\nimport { ReadOnlyMap } from '../read-only-map';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    // Bug #61: The channelCountMode should be 'max' according to the spec but is set to 'explicit' to achieve consistent behavior.\n    channelCountMode: 'explicit',\n    channelInterpretation: 'speakers',\n    numberOfInputs: 1,\n    numberOfOutputs: 1,\n    outputChannelCount: undefined,\n    parameterData: {},\n    processorOptions: {}\n};\nconst createChannelCount = (length) => {\n    const channelCount = [];\n    for (let i = 0; i < length; i += 1) {\n        channelCount.push(1);\n    }\n    return channelCount;\n};\nconst sanitizedOptions = (options) => {\n    return {\n        ...options,\n        outputChannelCount: (options.outputChannelCount !== undefined) ?\n            options.outputChannelCount :\n            (options.numberOfInputs === 1 && options.numberOfOutputs === 1) ?\n                /*\n                 * Bug #61: This should be the computedNumberOfChannels, but unfortunately that is almost impossible to fake. That's why\n                 * the channelCountMode is required to be 'explicit' as long as there is not a native implementation in every browser. That\n                 * makes sure the computedNumberOfChannels is equivilant to the channelCount which makes it much easier to compute.\n                 */\n                [options.channelCount] :\n                createChannelCount(options.numberOfOutputs)\n    };\n};\nexport const createAudioWorkletNodeConstructor = (createAudioParam, createAudioWorkletNodeRenderer, createNativeAudioWorkletNode, gainNodeConstructor, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor, noneAudioDestinationNodeConstructor) => {\n    return class AudioWorkletNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, name, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const mergedOptions = sanitizedOptions({ ...DEFAULT_OPTIONS, ...options });\n            const nodeNameToProcessorConstructorMap = NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.get(nativeContext);\n            const processorConstructor = (nodeNameToProcessorConstructorMap === undefined) ?\n                undefined :\n                nodeNameToProcessorConstructorMap.get(name);\n            const nativeAudioWorkletNode = createNativeAudioWorkletNode(nativeContext, isOffline ? null : context.baseLatency, nativeAudioWorkletNodeConstructor, name, processorConstructor, mergedOptions);\n            const audioWorkletNodeRenderer = ((isOffline)\n                ? createAudioWorkletNodeRenderer(name, mergedOptions, processorConstructor)\n                : null);\n            /*\n             * @todo Add a mechanism to switch an AudioWorkletNode to passive once the process() function of the AudioWorkletProcessor\n             * returns false.\n             */\n            super(context, 'active', nativeAudioWorkletNode, audioWorkletNodeRenderer);\n            const parameters = [];\n            nativeAudioWorkletNode.parameters.forEach((nativeAudioParam, nm) => {\n                const audioParam = createAudioParam(this, isOffline, nativeAudioParam);\n                parameters.push([nm, audioParam]);\n            });\n            this._nativeAudioWorkletNode = nativeAudioWorkletNode;\n            // Bug #86 & #87: Every browser but Firefox needs to get an unused output which should not be exposed.\n            this._numberOfOutputs = (options.numberOfOutputs === 0) ? 0 : this._nativeAudioWorkletNode.numberOfOutputs;\n            this._onprocessorerror = null;\n            this._parameters = new ReadOnlyMap(parameters);\n            /*\n             * Bug #86 & #87: Every browser but Firefox needs an output to be connected.\n             *\n             * Bug #50: Only Edge does not yet allow to create AudioNodes on a closed AudioContext. Therefore this is currently faked by\n             * using another AudioContext. And that is the reason why this will fail in case of a closed AudioContext.\n             */\n            if (context.state !== 'closed') {\n                const gainNode = new gainNodeConstructor(context, { gain: 0 });\n                try {\n                    this\n                        .connect(gainNode)\n                        .connect(context.destination);\n                }\n                catch (err) {\n                    if (err.name !== 'IndexSizeError') {\n                        throw err; // tslint:disable-line:rxjs-throw-error\n                    }\n                }\n            }\n        }\n        get numberOfOutputs() {\n            return this._numberOfOutputs;\n        }\n        get onprocessorerror() {\n            return this._onprocessorerror;\n        }\n        set onprocessorerror(value) {\n            const wrappedListener = wrapEventListener(this, value);\n            this._nativeAudioWorkletNode.onprocessorerror = wrappedListener;\n            const nativeOnProcessorError = this._nativeAudioWorkletNode.onprocessorerror;\n            this._onprocessorerror = (nativeOnProcessorError === wrappedListener) ? value : nativeOnProcessorError;\n        }\n        get parameters() {\n            if (this._parameters === null) {\n                // @todo The definition that TypeScript uses of the AudioParamMap is lacking many methods.\n                return this._nativeAudioWorkletNode.parameters;\n            }\n            return this._parameters;\n        }\n        get port() {\n            return this._nativeAudioWorkletNode.port;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-worklet-node-constructor.js.map","export function copyFromChannel(audioBuffer, \n// @todo There is currently no way to define something like { [ key: number | string ]: Float32Array }\nparent, key, channelNumber, bufferOffset) {\n    if (typeof audioBuffer.copyFromChannel === 'function') {\n        // The byteLength will be 0 when the ArrayBuffer was transferred.\n        if (parent[key].byteLength === 0) {\n            parent[key] = new Float32Array(128);\n        }\n        audioBuffer.copyFromChannel(parent[key], channelNumber, bufferOffset);\n        // Bug #5: Safari does not support copyFromChannel().\n    }\n    else {\n        const channelData = audioBuffer.getChannelData(channelNumber);\n        // The byteLength will be 0 when the ArrayBuffer was transferred.\n        if (parent[key].byteLength === 0) {\n            parent[key] = channelData.slice(bufferOffset, bufferOffset + 128);\n        }\n        else {\n            const slicedInput = new Float32Array(channelData.buffer, bufferOffset * Float32Array.BYTES_PER_ELEMENT, 128);\n            parent[key].set(slicedInput);\n        }\n    }\n}\n//# sourceMappingURL=/build/es2018/helpers/copy-from-channel.js.map","export const copyToChannel = (audioBuffer, parent, key, channelNumber, bufferOffset) => {\n    if (typeof audioBuffer.copyToChannel === 'function') {\n        // The byteLength will be 0 when the ArrayBuffer was transferred.\n        if (parent[key].byteLength !== 0) {\n            audioBuffer.copyToChannel(parent[key], channelNumber, bufferOffset);\n        }\n        // Bug #5: Safari does not support copyToChannel().\n    }\n    else {\n        // The byteLength will be 0 when the ArrayBuffer was transferred.\n        if (parent[key].byteLength !== 0) {\n            audioBuffer\n                .getChannelData(channelNumber)\n                .set(parent[key], bufferOffset);\n        }\n    }\n};\n//# sourceMappingURL=/build/es2018/helpers/copy-to-channel.js.map","export const createNestedArrays = (x, y) => {\n    const arrays = [];\n    for (let i = 0; i < x; i += 1) {\n        const array = [];\n        const length = (typeof y === 'number') ? y : y[i];\n        for (let j = 0; j < length; j += 1) {\n            array.push(new Float32Array(128));\n        }\n        arrays.push(array);\n    }\n    return arrays;\n};\n//# sourceMappingURL=/build/es2018/helpers/create-nested-arrays.js.map","import { connectAudioParam } from '../helpers/connect-audio-param';\nimport { copyFromChannel } from '../helpers/copy-from-channel';\nimport { copyToChannel } from '../helpers/copy-to-channel';\nimport { createNestedArrays } from '../helpers/create-nested-arrays';\nimport { getAudioNodeConnections } from '../helpers/get-audio-node-connections';\nimport { getAudioWorkletProcessor } from '../helpers/get-audio-worklet-processor';\nimport { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { renderAutomation } from '../helpers/render-automation';\nimport { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nconst processBuffer = async (proxy, renderedBuffer, nativeOfflineAudioContext, options, processorConstructor) => {\n    const { length } = renderedBuffer;\n    const numberOfInputChannels = options.channelCount * options.numberOfInputs;\n    const numberOfOutputChannels = options.outputChannelCount.reduce((sum, value) => sum + value, 0);\n    const processedBuffer = (numberOfOutputChannels === 0) ? null : nativeOfflineAudioContext.createBuffer(numberOfOutputChannels, length, renderedBuffer.sampleRate);\n    if (processorConstructor === undefined) {\n        throw new Error('Missing the processor constructor.');\n    }\n    const audioNodeConnections = getAudioNodeConnections(proxy);\n    const audioWorkletProcessor = await getAudioWorkletProcessor(nativeOfflineAudioContext, proxy);\n    const inputs = createNestedArrays(options.numberOfInputs, options.channelCount);\n    const outputs = createNestedArrays(options.numberOfOutputs, options.outputChannelCount);\n    const parameters = Array\n        .from(proxy.parameters.keys())\n        .reduce((prmtrs, name) => ({ ...prmtrs, [name]: new Float32Array(128) }), {});\n    for (let i = 0; i < length; i += 128) {\n        for (let j = 0; j < options.numberOfInputs; j += 1) {\n            for (let k = 0; k < options.channelCount; k += 1) {\n                copyFromChannel(renderedBuffer, inputs[j], k, k, i);\n            }\n        }\n        if (processorConstructor.parameterDescriptors !== undefined) {\n            processorConstructor.parameterDescriptors.forEach(({ name }, index) => {\n                copyFromChannel(renderedBuffer, parameters, name, numberOfInputChannels + index, i);\n            });\n        }\n        for (let j = 0; j < options.numberOfInputs; j += 1) {\n            for (let k = 0; k < options.outputChannelCount[j]; k += 1) {\n                // The byteLength will be 0 when the ArrayBuffer was transferred.\n                if (outputs[j][k].byteLength === 0) {\n                    outputs[j][k] = new Float32Array(128);\n                }\n            }\n        }\n        try {\n            const potentiallyEmptyInputs = inputs\n                .map((input, index) => {\n                if (audioNodeConnections.activeInputs[index].size === 0) {\n                    return [new Float32Array(0)];\n                }\n                return input;\n            });\n            const activeSourceFlag = audioWorkletProcessor.process(potentiallyEmptyInputs, outputs, parameters);\n            if (processedBuffer !== null) {\n                for (let j = 0, outputChannelSplitterNodeOutput = 0; j < options.numberOfOutputs; j += 1) {\n                    for (let k = 0; k < options.outputChannelCount[j]; k += 1) {\n                        copyToChannel(processedBuffer, outputs[j], k, outputChannelSplitterNodeOutput + k, i);\n                    }\n                    outputChannelSplitterNodeOutput += options.outputChannelCount[j];\n                }\n            }\n            if (!activeSourceFlag) {\n                break;\n            }\n        }\n        catch (error) {\n            proxy.dispatchEvent(new ErrorEvent('processorerror', { error }));\n            break;\n        }\n    }\n    return processedBuffer;\n};\nexport const createAudioWorkletNodeRendererFactory = (connectMultipleOutputs, createNativeAudioBufferSourceNode, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, disconnectMultipleOutputs, nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor, renderNativeOfflineAudioContext) => {\n    return (name, options, processorConstructor) => {\n        const renderedNativeAudioNodes = new WeakMap();\n        const createAudioNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeAudioWorkletNode = getNativeAudioNode(proxy);\n            let nativeOutputNodes = null;\n            const nativeAudioWorkletNodeIsOwnedByContext = isOwnedByContext(nativeAudioWorkletNode, nativeOfflineAudioContext);\n            // Bug #61: Only Chrome & Opera have an implementation of the AudioWorkletNode yet.\n            if (nativeAudioWorkletNodeConstructor === null) {\n                const numberOfOutputChannels = options.outputChannelCount.reduce((sum, value) => sum + value, 0);\n                const outputChannelSplitterNode = createNativeChannelSplitterNode(nativeOfflineAudioContext, {\n                    channelCount: Math.max(1, numberOfOutputChannels),\n                    channelCountMode: 'explicit',\n                    channelInterpretation: 'discrete',\n                    numberOfOutputs: Math.max(1, numberOfOutputChannels)\n                });\n                const outputChannelMergerNodes = [];\n                for (let i = 0; i < proxy.numberOfOutputs; i += 1) {\n                    outputChannelMergerNodes.push(createNativeChannelMergerNode(nativeOfflineAudioContext, {\n                        channelCount: 1,\n                        channelCountMode: 'explicit',\n                        channelInterpretation: 'speakers',\n                        numberOfInputs: options.outputChannelCount[i]\n                    }));\n                }\n                // Bug #87: Expose at least one output to make this node connectable.\n                const outputAudioNodes = (options.numberOfOutputs === 0) ?\n                    [outputChannelSplitterNode] :\n                    outputChannelMergerNodes;\n                const outputGainNode = createNativeGainNode(nativeOfflineAudioContext, {\n                    channelCount: options.channelCount,\n                    channelCountMode: options.channelCountMode,\n                    channelInterpretation: options.channelInterpretation,\n                    gain: 1\n                });\n                outputGainNode.connect = connectMultipleOutputs.bind(null, outputAudioNodes);\n                outputGainNode.disconnect = disconnectMultipleOutputs.bind(null, outputAudioNodes);\n                nativeOutputNodes = [outputChannelSplitterNode, outputChannelMergerNodes, outputGainNode];\n            }\n            else if (!nativeAudioWorkletNodeIsOwnedByContext) {\n                nativeAudioWorkletNode = new nativeAudioWorkletNodeConstructor(nativeOfflineAudioContext, name);\n            }\n            renderedNativeAudioNodes.set(nativeOfflineAudioContext, (nativeOutputNodes === null) ? nativeAudioWorkletNode : nativeOutputNodes);\n            if (nativeOutputNodes !== null) {\n                const [outputChannelSplitterNode, outputChannelMergerNodes, outputGainNode] = nativeOutputNodes;\n                if (processorConstructor === undefined) {\n                    throw new Error('Missing the processor constructor.');\n                }\n                if (nativeOfflineAudioContextConstructor === null) {\n                    throw new Error('Missing the native OfflineAudioContext constructor.');\n                }\n                // Bug #47: The AudioDestinationNode in Edge and Safari gets not initialized correctly.\n                const numberOfInputChannels = proxy.channelCount * proxy.numberOfInputs;\n                const numberOfParameters = (processorConstructor.parameterDescriptors === undefined)\n                    ? 0\n                    : processorConstructor.parameterDescriptors.length;\n                const partialOfflineAudioContext = new nativeOfflineAudioContextConstructor(numberOfInputChannels + numberOfParameters, \n                // Ceil the length to the next full render quantum.\n                // Bug #17: Safari does not yet expose the length.\n                Math.ceil(proxy.context.length / 128) * 128, nativeOfflineAudioContext.sampleRate);\n                const gainNodes = [];\n                const inputChannelSplitterNodes = [];\n                for (let i = 0; i < options.numberOfInputs; i += 1) {\n                    gainNodes.push(createNativeGainNode(partialOfflineAudioContext, {\n                        channelCount: options.channelCount,\n                        channelCountMode: options.channelCountMode,\n                        channelInterpretation: options.channelInterpretation,\n                        gain: 1\n                    }));\n                    inputChannelSplitterNodes.push(createNativeChannelSplitterNode(partialOfflineAudioContext, {\n                        channelCount: options.channelCount,\n                        channelCountMode: 'explicit',\n                        channelInterpretation: 'discrete',\n                        numberOfOutputs: options.channelCount\n                    }));\n                }\n                const constantSourceNodes = await Promise\n                    .all(Array\n                    .from(proxy.parameters.values())\n                    .map(async (audioParam) => {\n                    const constantSourceNode = createNativeConstantSourceNode(partialOfflineAudioContext, {\n                        channelCount: 1,\n                        channelCountMode: 'explicit',\n                        channelInterpretation: 'discrete',\n                        offset: audioParam.value\n                    });\n                    await renderAutomation(proxy.context, partialOfflineAudioContext, audioParam, constantSourceNode.offset);\n                    return constantSourceNode;\n                }));\n                const inputChannelMergerNode = createNativeChannelMergerNode(partialOfflineAudioContext, {\n                    channelCount: 1,\n                    channelCountMode: 'explicit',\n                    channelInterpretation: 'speakers',\n                    numberOfInputs: Math.max(1, numberOfInputChannels + numberOfParameters)\n                });\n                for (let i = 0; i < options.numberOfInputs; i += 1) {\n                    gainNodes[i].connect(inputChannelSplitterNodes[i]);\n                    for (let j = 0; j < options.channelCount; j += 1) {\n                        inputChannelSplitterNodes[i].connect(inputChannelMergerNode, j, (i * options.channelCount) + j);\n                    }\n                }\n                for (const [index, constantSourceNode] of constantSourceNodes.entries()) {\n                    constantSourceNode.connect(inputChannelMergerNode, 0, numberOfInputChannels + index);\n                    constantSourceNode.start(0);\n                }\n                inputChannelMergerNode.connect(partialOfflineAudioContext.destination);\n                return Promise\n                    .all(gainNodes\n                    .map((gainNode) => renderInputsOfAudioNode(proxy, partialOfflineAudioContext, gainNode)))\n                    .then(() => renderNativeOfflineAudioContext(partialOfflineAudioContext))\n                    .then(async (renderedBuffer) => {\n                    const audioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext);\n                    const processedBuffer = await processBuffer(proxy, renderedBuffer, nativeOfflineAudioContext, options, processorConstructor);\n                    if (processedBuffer !== null) {\n                        audioBufferSourceNode.buffer = processedBuffer;\n                        audioBufferSourceNode.start(0);\n                    }\n                    audioBufferSourceNode.connect(outputChannelSplitterNode);\n                    for (let i = 0, outputChannelSplitterNodeOutput = 0; i < proxy.numberOfOutputs; i += 1) {\n                        const outputChannelMergerNode = outputChannelMergerNodes[i];\n                        for (let j = 0; j < options.outputChannelCount[i]; j += 1) {\n                            outputChannelSplitterNode.connect(outputChannelMergerNode, outputChannelSplitterNodeOutput + j, j);\n                        }\n                        outputChannelSplitterNodeOutput += options.outputChannelCount[i];\n                    }\n                    return outputGainNode;\n                });\n            }\n            if (!nativeAudioWorkletNodeIsOwnedByContext) {\n                for (const [nm, audioParam] of proxy.parameters.entries()) {\n                    await renderAutomation(proxy.context, nativeOfflineAudioContext, audioParam, \n                    // @todo The definition that TypeScript uses of the AudioParamMap is lacking many methods.\n                    nativeAudioWorkletNode.parameters.get(nm));\n                }\n            }\n            else {\n                for (const [nm, audioParam] of proxy.parameters.entries()) {\n                    await connectAudioParam(proxy.context, nativeOfflineAudioContext, audioParam, \n                    // @todo The definition that TypeScript uses of the AudioParamMap is lacking many methods.\n                    nativeAudioWorkletNode.parameters.get(nm));\n                }\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioWorkletNode);\n            return nativeAudioWorkletNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeAudioWorkletNodeOrOutputNodes = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeAudioWorkletNodeOrOutputNodes !== undefined) {\n                    const renderedNativeAudioWorkletNodeOrGainNode = Array.isArray(renderedNativeAudioWorkletNodeOrOutputNodes)\n                        ? renderedNativeAudioWorkletNodeOrOutputNodes[2]\n                        : renderedNativeAudioWorkletNodeOrOutputNodes;\n                    return Promise.resolve(renderedNativeAudioWorkletNodeOrGainNode);\n                }\n                return createAudioNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-worklet-node-renderer-factory.js.map","import { NODE_TO_PROCESSOR_MAPS } from '../globals';\nimport { getNativeAudioNode } from './get-native-audio-node';\nimport { getValueForKey } from './get-value-for-key';\nexport const getAudioWorkletProcessor = (nativeOfflineAudioContext, proxy) => {\n    const nodeToProcessorMap = getValueForKey(NODE_TO_PROCESSOR_MAPS, nativeOfflineAudioContext);\n    const nativeAudioWorkletNode = getNativeAudioNode(proxy);\n    return getValueForKey(nodeToProcessorMap, nativeAudioWorkletNode);\n};\n//# sourceMappingURL=/build/es2018/helpers/get-audio-worklet-processor.js.map","import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { getNativeContext } from '../helpers/get-native-context';\nconst DEFAULT_OPTIONS = {\n    Q: 1,\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    detune: 0,\n    frequency: 350,\n    gain: 0,\n    type: 'lowpass'\n};\nexport const createBiquadFilterNodeConstructor = (createAudioParam, createBiquadFilterNodeRenderer, createInvalidAccessError, createNativeBiquadFilterNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class BiquadFilterNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const biquadFilterNodeRenderer = ((isOffline) ? createBiquadFilterNodeRenderer() : null);\n            super(context, 'passive', nativeBiquadFilterNode, biquadFilterNodeRenderer);\n            // Bug #80: Edge & Safari do not export the correct values for maxValue and minValue.\n            this._Q = createAudioParam(this, isOffline, nativeBiquadFilterNode.Q, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            // Bug #78: Edge & Safari do not export the correct values for maxValue and minValue.\n            this._detune = createAudioParam(this, isOffline, nativeBiquadFilterNode.detune, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            // Bug #77: Chrome, Edge, Firefox, Opera & Safari do not export the correct values for maxValue and minValue.\n            this._frequency = createAudioParam(this, isOffline, nativeBiquadFilterNode.frequency, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            // Bug #79: Edge & Safari do not export the correct values for maxValue and minValue.\n            this._gain = createAudioParam(this, isOffline, nativeBiquadFilterNode.gain, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            this._nativeBiquadFilterNode = nativeBiquadFilterNode;\n        }\n        get Q() {\n            return this._Q;\n        }\n        get detune() {\n            return this._detune;\n        }\n        get frequency() {\n            return this._frequency;\n        }\n        get gain() {\n            return this._gain;\n        }\n        get type() {\n            return this._nativeBiquadFilterNode.type;\n        }\n        set type(value) {\n            this._nativeBiquadFilterNode.type = value;\n        }\n        getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {\n            this._nativeBiquadFilterNode.getFrequencyResponse(frequencyHz, magResponse, phaseResponse);\n            // Bug #68: Only Chrome & Opera do throw an error if the parameters differ in their length.\n            if ((frequencyHz.length !== magResponse.length) || (magResponse.length !== phaseResponse.length)) {\n                throw createInvalidAccessError();\n            }\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/biquad-filter-node-constructor.js.map","import { getNativeContext } from '../helpers/get-native-context';\nconst DEFAULT_OPTIONS = {\n    channelCount: 1,\n    channelCountMode: 'explicit',\n    channelInterpretation: 'speakers',\n    numberOfInputs: 6\n};\nexport const createChannelMergerNodeConstructor = (createChannelMergerNodeRenderer, createNativeChannelMergerNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class ChannelMergerNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeChannelMergerNode = createNativeChannelMergerNode(nativeContext, mergedOptions);\n            const channelMergerNodeRenderer = ((isNativeOfflineAudioContext(nativeContext))\n                ? createChannelMergerNodeRenderer()\n                : null);\n            super(context, 'passive', nativeChannelMergerNode, channelMergerNodeRenderer);\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/channel-merger-node-constructor.js.map","import { getNativeContext } from '../helpers/get-native-context';\nconst DEFAULT_OPTIONS = {\n    channelCount: 6,\n    channelCountMode: 'explicit',\n    channelInterpretation: 'discrete',\n    numberOfOutputs: 6\n};\nconst sanitizedOptions = (options) => {\n    return { ...options, channelCount: options.numberOfOutputs };\n};\nexport const createChannelSplitterNodeConstructor = (createChannelSplitterNodeRenderer, createNativeChannelSplitterNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class ChannelSplitterNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = sanitizedOptions({ ...DEFAULT_OPTIONS, ...options });\n            const nativeChannelSplitterNode = createNativeChannelSplitterNode(nativeContext, mergedOptions);\n            const channelSplitterNodeRenderer = ((isNativeOfflineAudioContext(nativeContext))\n                ? createChannelSplitterNodeRenderer()\n                : null);\n            super(context, 'passive', nativeChannelSplitterNode, channelSplitterNodeRenderer);\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/channel-splitter-node-constructor.js.map","import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { getNativeContext } from '../helpers/get-native-context';\nimport { setInternalState } from '../helpers/set-internal-state';\nimport { wrapEventListener } from '../helpers/wrap-event-listener';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    offset: 1\n};\nexport const createConstantSourceNodeConstructor = (createAudioParam, createConstantSourceNodeRendererFactory, createNativeConstantSourceNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class ConstantSourceNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeConstantSourceNode = createNativeConstantSourceNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const constantSourceNodeRenderer = ((isOffline)\n                ? createConstantSourceNodeRendererFactory()\n                : null);\n            super(context, 'passive', nativeConstantSourceNode, constantSourceNodeRenderer);\n            this._constantSourceNodeRenderer = constantSourceNodeRenderer;\n            this._nativeConstantSourceNode = nativeConstantSourceNode;\n            /*\n             * Bug #62 & #74: Edge & Safari do not support ConstantSourceNodes and do not export the correct values for maxValue and\n             * minValue for GainNodes.\n             */\n            this._offset = createAudioParam(this, isOffline, nativeConstantSourceNode.offset, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            this._onended = null;\n        }\n        get offset() {\n            return this._offset;\n        }\n        get onended() {\n            return this._onended;\n        }\n        set onended(value) {\n            const wrappedListener = wrapEventListener(this, value);\n            this._nativeConstantSourceNode.onended = wrappedListener;\n            const nativeOnEnded = this._nativeConstantSourceNode.onended;\n            this._onended = (nativeOnEnded === wrappedListener) ? value : nativeOnEnded;\n        }\n        start(when = 0) {\n            this._nativeConstantSourceNode.start(when);\n            if (this._constantSourceNodeRenderer !== null) {\n                this._constantSourceNodeRenderer.start = when;\n            }\n            else {\n                setInternalState(this, 'active');\n                const setInternalStateToInactive = () => {\n                    this._nativeConstantSourceNode.removeEventListener('ended', setInternalStateToInactive);\n                    // @todo Determine a meaningful delay instead of just using one second.\n                    setTimeout(() => setInternalState(this, 'passive'), 1000);\n                };\n                this._nativeConstantSourceNode.addEventListener('ended', setInternalStateToInactive);\n            }\n        }\n        stop(when = 0) {\n            this._nativeConstantSourceNode.stop(when);\n            if (this._constantSourceNodeRenderer !== null) {\n                this._constantSourceNodeRenderer.stop = when;\n            }\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/constant-source-node-constructor.js.map","import { getNativeContext } from '../helpers/get-native-context';\nconst DEFAULT_OPTIONS = {\n    buffer: null,\n    channelCount: 2,\n    channelCountMode: 'clamped-max',\n    channelInterpretation: 'speakers',\n    disableNormalization: false\n};\nexport const createConvolverNodeConstructor = (createConvolverNodeRenderer, createNativeConvolverNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class ConvolverNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeConvolverNode = createNativeConvolverNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const convolverNodeRenderer = ((isOffline) ? createConvolverNodeRenderer() : null);\n            super(context, 'passive', nativeConvolverNode, convolverNodeRenderer);\n            this._isBufferNullified = false;\n            this._nativeConvolverNode = nativeConvolverNode;\n        }\n        get buffer() {\n            if (this._isBufferNullified) {\n                return null;\n            }\n            return this._nativeConvolverNode.buffer;\n        }\n        set buffer(value) {\n            this._nativeConvolverNode.buffer = value;\n            // Bug #115: Safari does not allow to set the buffer to null.\n            if (value === null && this._nativeConvolverNode.buffer !== null) {\n                const nativeContext = this._nativeConvolverNode.context;\n                this._nativeConvolverNode.buffer = nativeContext.createBuffer(1, 1, nativeContext.sampleRate);\n                this._isBufferNullified = true;\n            }\n            else {\n                this._isBufferNullified = false;\n            }\n        }\n        get normalize() {\n            return this._nativeConvolverNode.normalize;\n        }\n        set normalize(value) {\n            this._nativeConvolverNode.normalize = value;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/convolver-node-constructor.js.map","import { getNativeContext } from '../helpers/get-native-context';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    delayTime: 0,\n    maxDelayTime: 1\n};\nexport const createDelayNodeConstructor = (createAudioParam, createDelayNodeRenderer, createNativeDelayNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class DelayNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeDelayNode = createNativeDelayNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const delayNodeRenderer = ((isOffline)\n                ? createDelayNodeRenderer(mergedOptions.maxDelayTime)\n                : null);\n            super(context, 'passive', nativeDelayNode, delayNodeRenderer);\n            // @todo Edge does not export the correct values for maxValue and minValue.\n            this._delayTime = createAudioParam(this, isOffline, nativeDelayNode.delayTime, mergedOptions.maxDelayTime, 0);\n        }\n        get delayTime() {\n            return this._delayTime;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/delay-node-constructor.js.map","import { isNativeAudioNode } from '../guards/native-audio-node';\nconst getOutputAudioNodeAtIndex = (createIndexSizeError, outputAudioNodes, output) => {\n    const outputAudioNode = outputAudioNodes[output];\n    if (outputAudioNode === undefined) {\n        throw createIndexSizeError();\n    }\n    return outputAudioNode;\n};\nexport const createDisconnectMultipleOutputs = (createIndexSizeError) => {\n    return (outputAudioNodes, destinationOrOutput = undefined, output = undefined, input = 0) => {\n        if (destinationOrOutput === undefined) {\n            return outputAudioNodes\n                .forEach((outputAudioNode) => outputAudioNode.disconnect());\n        }\n        if (typeof destinationOrOutput === 'number') {\n            return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, destinationOrOutput)\n                .disconnect();\n        }\n        if (isNativeAudioNode(destinationOrOutput)) {\n            if (output === undefined) {\n                return outputAudioNodes\n                    .forEach((outputAudioNode) => outputAudioNode.disconnect(destinationOrOutput));\n            }\n            if (input === undefined) {\n                return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output)\n                    .disconnect(destinationOrOutput, 0);\n            }\n            return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output)\n                .disconnect(destinationOrOutput, 0, input);\n        }\n        if (output === undefined) {\n            return outputAudioNodes\n                .forEach((outputAudioNode) => outputAudioNode.disconnect(destinationOrOutput));\n        }\n        return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output)\n            .disconnect(destinationOrOutput, 0);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/disconnect-multiple-outputs.js.map","import { getNativeContext } from '../helpers/get-native-context';\nconst DEFAULT_OPTIONS = {\n    attack: 0.003,\n    channelCount: 2,\n    channelCountMode: 'clamped-max',\n    channelInterpretation: 'speakers',\n    knee: 30,\n    ratio: 12,\n    release: 0.25,\n    threshold: -24\n};\nexport const createDynamicsCompressorNodeConstructor = (createAudioParam, createDynamicsCompressorNodeRenderer, createNativeDynamicsCompressorNode, createNotSupportedError, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class DynamicsCompressorNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const dynamicsCompressorNodeRenderer = ((isOffline)\n                ? createDynamicsCompressorNodeRenderer()\n                : null);\n            super(context, 'passive', nativeDynamicsCompressorNode, dynamicsCompressorNodeRenderer);\n            // Bug #110: Edge does not export the correct values for maxValue and minValue.\n            this._attack = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.attack, 1, 0);\n            this._knee = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.knee, 40, 0);\n            this._nativeDynamicsCompressorNode = nativeDynamicsCompressorNode;\n            this._ratio = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.ratio, 20, 1);\n            this._release = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.release, 1, 0);\n            this._threshold = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.threshold, 0, -100);\n        }\n        get attack() {\n            return this._attack;\n        }\n        /*\n         * Bug #108: Only Chrome, Firefox and Opera disallow a channelCount of three and above yet which is why the getter and setter needs\n         * to be overwritten here.\n         */\n        get channelCount() {\n            return this._nativeDynamicsCompressorNode.channelCount;\n        }\n        set channelCount(value) {\n            const previousChannelCount = this._nativeDynamicsCompressorNode.channelCount;\n            this._nativeDynamicsCompressorNode.channelCount = value;\n            if (value > 2) {\n                this._nativeDynamicsCompressorNode.channelCount = previousChannelCount;\n                throw createNotSupportedError();\n            }\n        }\n        /*\n         * Bug #109: Only Chrome, Firefox and Opera disallow a channelCountMode of 'max' yet which is why the getter and setter needs to be\n         * overwritten here.\n         */\n        get channelCountMode() {\n            return this._nativeDynamicsCompressorNode.channelCountMode;\n        }\n        set channelCountMode(value) {\n            const previousChannelCount = this._nativeDynamicsCompressorNode.channelCountMode;\n            this._nativeDynamicsCompressorNode.channelCountMode = value;\n            if (value === 'max') {\n                this._nativeDynamicsCompressorNode.channelCountMode = previousChannelCount;\n                throw createNotSupportedError();\n            }\n        }\n        get knee() {\n            return this._knee;\n        }\n        get ratio() {\n            return this._ratio;\n        }\n        get reduction() {\n            // Bug #111: Safari returns an AudioParam instead of a number.\n            if (typeof this._nativeDynamicsCompressorNode.reduction.value === 'number') {\n                return this._nativeDynamicsCompressorNode.reduction.value;\n            }\n            return this._nativeDynamicsCompressorNode.reduction;\n        }\n        get release() {\n            return this._release;\n        }\n        get threshold() {\n            return this._threshold;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/dynamics-compressor-node-constructor.js.map","import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { getNativeContext } from '../helpers/get-native-context';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    gain: 1\n};\nexport const createGainNodeConstructor = (createAudioParam, createGainNodeRenderer, createNativeGainNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class GainNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeGainNode = createNativeGainNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const gainNodeRenderer = ((isOffline) ? createGainNodeRenderer() : null);\n            super(context, 'passive', nativeGainNode, gainNodeRenderer);\n            // Bug #74: Edge & Safari do not export the correct values for maxValue and minValue.\n            this._gain = createAudioParam(this, isOffline, nativeGainNode.gain, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n        }\n        get gain() {\n            return this._gain;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/gain-node-constructor.js.map","export const createInvalidAccessError = () => {\n    try {\n        return new DOMException('', 'InvalidAccessError');\n    }\n    catch (err) {\n        // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.\n        err.code = 15;\n        err.name = 'InvalidAccessError';\n        return err;\n    }\n};\n//# sourceMappingURL=/build/es2018/factories/invalid-access-error.js.map","import { getNativeContext } from '../helpers/get-native-context';\nimport { wrapIIRFilterNodeGetFrequencyResponseMethod } from '../helpers/wrap-iir-filter-node-get-frequency-response-method';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers'\n};\nexport const createIIRFilterNodeConstructor = (createNativeIIRFilterNode, createIIRFilterNodeRenderer, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class IIRFilterNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options) {\n            const nativeContext = getNativeContext(context);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeIIRFilterNode = createNativeIIRFilterNode(nativeContext, isOffline ? null : context.baseLatency, mergedOptions);\n            const iirFilterNodeRenderer = ((isOffline)\n                ? createIIRFilterNodeRenderer(mergedOptions.feedback, mergedOptions.feedforward)\n                : null);\n            super(context, 'passive', nativeIIRFilterNode, iirFilterNodeRenderer);\n            // Bug #23 & #24: FirefoxDeveloper does not throw an InvalidAccessError.\n            // @todo Write a test which allows other browsers to remain unpatched.\n            wrapIIRFilterNodeGetFrequencyResponseMethod(nativeIIRFilterNode);\n            this._nativeIIRFilterNode = nativeIIRFilterNode;\n        }\n        getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {\n            return this._nativeIIRFilterNode.getFrequencyResponse(frequencyHz, magResponse, phaseResponse);\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/iir-filter-node-constructor.js.map","// This implementation as shamelessly inspired by source code of\n// tslint:disable-next-line:max-line-length\n// {@link https://chromium.googlesource.com/chromium/src.git/+/master/third_party/WebKit/Source/platform/audio/IIRFilter.cpp|Chromium's IIRFilter}.\nexport const filterBuffer = (feedback, feedbackLength, feedforward, feedforwardLength, minLength, xBuffer, yBuffer, bufferIndex, bufferLength, input, output) => {\n    const inputLength = input.length;\n    let i = bufferIndex;\n    for (let j = 0; j < inputLength; j += 1) {\n        let y = feedforward[0] * input[j];\n        for (let k = 1; k < minLength; k += 1) {\n            const x = (i - k) & (bufferLength - 1); // tslint:disable-line:no-bitwise\n            y += feedforward[k] * xBuffer[x];\n            y -= feedback[k] * yBuffer[x];\n        }\n        for (let k = minLength; k < feedforwardLength; k += 1) {\n            y += feedforward[k] * xBuffer[(i - k) & (bufferLength - 1)]; // tslint:disable-line:no-bitwise\n        }\n        for (let k = minLength; k < feedbackLength; k += 1) {\n            y -= feedback[k] * yBuffer[(i - k) & (bufferLength - 1)]; // tslint:disable-line:no-bitwise\n        }\n        xBuffer[i] = input[j];\n        yBuffer[i] = y;\n        i = (i + 1) & (bufferLength - 1); // tslint:disable-line:no-bitwise\n        output[j] = y;\n    }\n    return i;\n};\n//# sourceMappingURL=/build/es2018/helpers/filter-buffer.js.map","export const testPromiseSupport = (nativeContext) => {\n    // This 12 numbers represent the 48 bytes of an empty WAVE file with a single sample.\n    const uint32Array = new Uint32Array([\n        1179011410,\n        40,\n        1163280727,\n        544501094,\n        16,\n        131073,\n        44100,\n        176400,\n        1048580,\n        1635017060,\n        4,\n        0\n    ]);\n    try {\n        // Bug #1: Safari requires a successCallback.\n        const promise = nativeContext.decodeAudioData(uint32Array.buffer, () => {\n            // Ignore the success callback.\n        });\n        if (promise === undefined) {\n            return false;\n        }\n        promise.catch(() => {\n            // Ignore rejected errors.\n        });\n        return true;\n    }\n    catch (_a) {\n        // Ignore errors.\n    }\n    return false;\n};\n//# sourceMappingURL=/build/es2018/helpers/test-promise-support.js.map","import { testPromiseSupport } from '../helpers/test-promise-support';\nconst DEFAULT_OPTIONS = {\n    numberOfChannels: 1\n};\nexport const createMinimalOfflineAudioContextConstructor = (cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, minimalBaseAudioContextConstructor, startRendering) => {\n    return class MinimalOfflineAudioContext extends minimalBaseAudioContextConstructor {\n        constructor(options) {\n            const { length, numberOfChannels, sampleRate } = { ...DEFAULT_OPTIONS, ...options };\n            const nativeOfflineAudioContext = createNativeOfflineAudioContext(numberOfChannels, length, sampleRate);\n            // #21 Safari does not support promises and therefore would fire the statechange event before the promise can be resolved.\n            if (!cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeOfflineAudioContext))) {\n                nativeOfflineAudioContext.addEventListener('statechange', (() => {\n                    let i = 0;\n                    const delayStateChangeEvent = (event) => {\n                        if (this._state === 'running') {\n                            if (i > 0) {\n                                nativeOfflineAudioContext.removeEventListener('statechange', delayStateChangeEvent);\n                                event.stopImmediatePropagation();\n                                this._waitForThePromiseToSettle(event);\n                            }\n                            else {\n                                i += 1;\n                            }\n                        }\n                    };\n                    return delayStateChangeEvent;\n                })());\n            }\n            super(nativeOfflineAudioContext, numberOfChannels);\n            this._length = length;\n            this._nativeOfflineAudioContext = nativeOfflineAudioContext;\n            this._state = null;\n        }\n        get length() {\n            // Bug #17: Safari does not yet expose the length.\n            if (this._nativeOfflineAudioContext.length === undefined) {\n                return this._length;\n            }\n            return this._nativeOfflineAudioContext.length;\n        }\n        get state() {\n            return (this._state === null) ? this._nativeOfflineAudioContext.state : this._state;\n        }\n        startRendering() {\n            /*\n             * Bug #9 & #59: It is theoretically possible that startRendering() will first render a partialOfflineAudioContext. Therefore\n             * the state of the nativeOfflineAudioContext might no transition to running immediately.\n             */\n            if (this._state === 'running') {\n                return Promise.reject(createInvalidStateError());\n            }\n            this._state = 'running';\n            return startRendering(this.destination, this._nativeOfflineAudioContext)\n                .then((audioBuffer) => {\n                this._state = null;\n                /*\n                 * Bug #50: Deleting the AudioGraph is currently not possible anymore.\n                 * deleteAudioGraph(this, this._nativeOfflineAudioContext);\n                 */\n                return audioBuffer;\n            })\n                // @todo This could be written more elegantly when Promise.finally() becomes avalaible.\n                .catch((err) => {\n                this._state = null;\n                /*\n                 * Bug #50: Deleting the AudioGraph is currently not possible anymore.\n                 * deleteAudioGraph(this, this._nativeOfflineAudioContext);\n                 */\n                throw err; // tslint:disable-line:rxjs-throw-error\n            });\n        }\n        _waitForThePromiseToSettle(event) {\n            if (this._state === null) {\n                this._nativeOfflineAudioContext.dispatchEvent(event);\n            }\n            else {\n                setTimeout(() => this._waitForThePromiseToSettle(event));\n            }\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/minimal-offline-audio-context-constructor.js.map","export const assignNativeAudioNodeOption = (nativeAudioNode, options, option) => {\n    const value = options[option];\n    if (value !== undefined && value !== nativeAudioNode[option]) {\n        nativeAudioNode[option] = value;\n    }\n};\n//# sourceMappingURL=/build/es2018/helpers/assign-native-audio-node-option.js.map","import { assignNativeAudioNodeOption } from './assign-native-audio-node-option';\nexport const assignNativeAudioNodeOptions = (nativeAudioNode, options) => {\n    assignNativeAudioNodeOption(nativeAudioNode, options, 'channelCount');\n    assignNativeAudioNodeOption(nativeAudioNode, options, 'channelCountMode');\n    assignNativeAudioNodeOption(nativeAudioNode, options, 'channelInterpretation');\n};\n//# sourceMappingURL=/build/es2018/helpers/assign-native-audio-node-options.js.map","export const testAnalyserNodeGetFloatTimeDomainDataMethodSupport = (nativeAnalyserNode) => {\n    return typeof nativeAnalyserNode.getFloatTimeDomainData === 'function';\n};\n//# sourceMappingURL=/build/es2018/helpers/test-analyser-node-get-float-time-domain-data-method-support.js.map","export const wrapAnalyserNodeGetFloatTimeDomainDataMethod = (nativeAnalyserNode) => {\n    nativeAnalyserNode.getFloatTimeDomainData = (array) => {\n        const byteTimeDomainData = new Uint8Array(array.length);\n        nativeAnalyserNode.getByteTimeDomainData(byteTimeDomainData);\n        const length = Math.max(byteTimeDomainData.length, nativeAnalyserNode.fftSize);\n        for (let i = 0; i < length; i += 1) {\n            array[i] = (byteTimeDomainData[i] - 128) * 0.0078125;\n        }\n        return array;\n    };\n};\n//# sourceMappingURL=/build/es2018/helpers/wrap-analyser-node-get-float-time-domain-data-method.js.map","export const createNativeAudioBufferConstructor = (window) => {\n    if (window === null) {\n        return null;\n    }\n    if (window.hasOwnProperty('AudioBuffer')) {\n        return window.AudioBuffer;\n    }\n    return null;\n};\n//# sourceMappingURL=/build/es2018/factories/native-audio-buffer-constructor.js.map","export const assignNativeAudioNodeAudioParamValue = (nativeAudioNode, options, audioParam) => {\n    const value = options[audioParam];\n    if (value !== undefined && value !== nativeAudioNode[audioParam].value) {\n        nativeAudioNode[audioParam].value = value;\n    }\n};\n//# sourceMappingURL=/build/es2018/helpers/assign-native-audio-node-audio-param-value.js.map","export const wrapAudioScheduledSourceNodeStartMethodNegativeParameters = (nativeAudioScheduledSourceNode) => {\n    nativeAudioScheduledSourceNode.start = ((start) => {\n        return (when = 0, offset = 0, duration) => {\n            if ((typeof duration === 'number' && duration < 0) || offset < 0 || when < 0) {\n                throw new RangeError(\"The parameters can't be negative.\");\n            }\n            // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.\n            start.call(nativeAudioScheduledSourceNode, when, offset, duration);\n        };\n    })(nativeAudioScheduledSourceNode.start);\n};\n//# sourceMappingURL=/build/es2018/helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters.js.map","export const wrapAudioScheduledSourceNodeStopMethodNegativeParameters = (nativeAudioScheduledSourceNode) => {\n    nativeAudioScheduledSourceNode.stop = ((stop) => {\n        return (when = 0) => {\n            if (when < 0) {\n                throw new RangeError(\"The parameter can't be negative.\");\n            }\n            stop.call(nativeAudioScheduledSourceNode, when);\n        };\n    })(nativeAudioScheduledSourceNode.stop);\n};\n//# sourceMappingURL=/build/es2018/helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters.js.map","import { createInvalidStateError } from '../factories/invalid-state-error';\nexport const wrapAudioBufferSourceNodeStartMethodConsecutiveCalls = (nativeAudioBufferSourceNode) => {\n    nativeAudioBufferSourceNode.start = ((start) => {\n        let isScheduled = false;\n        return (when = 0, offset = 0, duration) => {\n            if (isScheduled) {\n                throw createInvalidStateError();\n            }\n            start.call(nativeAudioBufferSourceNode, when, offset, duration);\n            isScheduled = true;\n        };\n    })(nativeAudioBufferSourceNode.start);\n};\n//# sourceMappingURL=/build/es2018/helpers/wrap-audio-buffer-source-node-start-method-consecutive-calls.js.map","export const createNativeAudioContextConstructor = (window) => {\n    if (window === null) {\n        return null;\n    }\n    if (window.hasOwnProperty('AudioContext')) {\n        return window.AudioContext;\n    }\n    return (window.hasOwnProperty('webkitAudioContext')) ? window.webkitAudioContext : null;\n};\n//# sourceMappingURL=/build/es2018/factories/native-audio-context-constructor.js.map","export const computeBufferSize = (baseLatency, sampleRate) => {\n    if (baseLatency === null) {\n        return 512;\n    }\n    return Math.max(512, Math.min(16384, Math.pow(2, Math.round(Math.log2(baseLatency * sampleRate)))));\n};\n//# sourceMappingURL=/build/es2018/helpers/compute-buffer-size.js.map","import { cloneAudioWorkletNodeOptions } from './clone-audio-worklet-node-options';\nexport const createAudioWorkletProcessorPromise = async (processorConstructor, audioWorkletNodeOptions) => {\n    const clonedAudioWorkletNodeOptions = await cloneAudioWorkletNodeOptions(audioWorkletNodeOptions);\n    return new processorConstructor(clonedAudioWorkletNodeOptions);\n};\n//# sourceMappingURL=/build/es2018/helpers/create-audio-worklet-processor-promise.js.map","export const cloneAudioWorkletNodeOptions = (audioWorkletNodeOptions) => {\n    return new Promise((resolve, reject) => {\n        const { port1, port2 } = new MessageChannel();\n        port1.onmessage = ({ data }) => {\n            port1.close();\n            port2.close();\n            resolve(data);\n        };\n        port1.onmessageerror = ({ data }) => {\n            port1.close();\n            port2.close();\n            reject(data);\n        };\n        // This will throw an error if the audioWorkletNodeOptions are not clonable.\n        port2.postMessage(audioWorkletNodeOptions);\n    });\n};\n//# sourceMappingURL=/build/es2018/helpers/clone-audio-worklet-node-options.js.map","import { isNativeAudioNode } from '../guards/native-audio-node';\nexport const interceptConnections = (original, interceptor) => {\n    original.connect = ((destination, \n    // @todo TypeScript can't infer the type for the parameters output and input in this case.\n    output = 0, // tslint:disable-line:no-inferrable-types\n    input = 0 // tslint:disable-line:no-inferrable-types\n    ) => {\n        if (isNativeAudioNode(destination)) {\n            // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.\n            interceptor.connect.call(interceptor, destination, output, input);\n            // Bug #11: Safari does not support chaining yet.\n            return destination;\n        }\n        // @todo TypeScript does still assume that connect() returns void.\n        return interceptor.connect.call(interceptor, destination, output);\n    });\n    original.disconnect = function () {\n        // @todo TypeScript cannot infer all the signatures yet.\n        interceptor.disconnect.apply(interceptor, arguments);\n    };\n    return original;\n};\n//# sourceMappingURL=/build/es2018/helpers/intercept-connections.js.map","import { computeBufferSize } from '../helpers/compute-buffer-size';\nimport { filterBuffer } from '../helpers/filter-buffer';\nimport { interceptConnections } from '../helpers/intercept-connections';\nfunction divide(a, b) {\n    const denominator = (b[0] * b[0]) + (b[1] * b[1]);\n    return [(((a[0] * b[0]) + (a[1] * b[1])) / denominator), (((a[1] * b[0]) - (a[0] * b[1])) / denominator)];\n}\nfunction multiply(a, b) {\n    return [((a[0] * b[0]) - (a[1] * b[1])), ((a[0] * b[1]) + (a[1] * b[0]))];\n}\nfunction evaluatePolynomial(coefficient, z) {\n    let result = [0, 0];\n    for (let i = coefficient.length - 1; i >= 0; i -= 1) {\n        result = multiply(result, z);\n        result[0] += coefficient[i];\n    }\n    return result;\n}\nexport const createNativeIIRFilterNodeFakerFactory = (createInvalidAccessError, createInvalidStateError, createNativeScriptProcessorNode, createNotSupportedError) => {\n    return (nativeContext, baseLatency, { channelCount, channelCountMode, channelInterpretation, feedback, feedforward }) => {\n        const bufferSize = computeBufferSize(baseLatency, nativeContext.sampleRate);\n        const feedbackLength = feedback.length;\n        const feedforwardLength = feedforward.length;\n        const minLength = Math.min(feedbackLength, feedforwardLength);\n        if (feedback.length === 0 || feedback.length > 20) {\n            throw createNotSupportedError();\n        }\n        if (feedback[0] === 0) {\n            throw createInvalidStateError();\n        }\n        if (feedforward.length === 0 || feedforward.length > 20) {\n            throw createNotSupportedError();\n        }\n        if (feedforward[0] === 0) {\n            throw createInvalidStateError();\n        }\n        if (feedback[0] !== 1) {\n            for (let i = 0; i < feedforwardLength; i += 1) {\n                feedforward[i] /= feedback[0];\n            }\n            for (let i = 1; i < feedbackLength; i += 1) {\n                feedback[i] /= feedback[0];\n            }\n        }\n        const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, bufferSize, channelCount, channelCount);\n        scriptProcessorNode.channelCount = channelCount;\n        scriptProcessorNode.channelCountMode = channelCountMode;\n        scriptProcessorNode.channelInterpretation = channelInterpretation;\n        const bufferLength = 32;\n        const bufferIndexes = [];\n        const xBuffers = [];\n        const yBuffers = [];\n        for (let i = 0; i < channelCount; i += 1) {\n            bufferIndexes.push(0);\n            const xBuffer = new Float32Array(bufferLength);\n            const yBuffer = new Float32Array(bufferLength);\n            // @todo Add a test which checks support for TypedArray.prototype.fill().\n            xBuffer.fill(0);\n            yBuffer.fill(0);\n            xBuffers.push(xBuffer);\n            yBuffers.push(yBuffer);\n        }\n        scriptProcessorNode.onaudioprocess = (event) => {\n            const inputBuffer = event.inputBuffer;\n            const outputBuffer = event.outputBuffer;\n            const numberOfChannels = inputBuffer.numberOfChannels;\n            for (let i = 0; i < numberOfChannels; i += 1) {\n                const input = inputBuffer.getChannelData(i);\n                const output = outputBuffer.getChannelData(i);\n                bufferIndexes[i] = filterBuffer(feedback, feedbackLength, feedforward, feedforwardLength, minLength, xBuffers[i], yBuffers[i], bufferIndexes[i], bufferLength, input, output);\n            }\n        };\n        const nyquist = nativeContext.sampleRate / 2;\n        const nativeIIRFilterNodeFaker = {\n            get bufferSize() {\n                return bufferSize;\n            },\n            get channelCount() {\n                return scriptProcessorNode.channelCount;\n            },\n            set channelCount(value) {\n                scriptProcessorNode.channelCount = value;\n            },\n            get channelCountMode() {\n                return scriptProcessorNode.channelCountMode;\n            },\n            set channelCountMode(value) {\n                scriptProcessorNode.channelCountMode = value;\n            },\n            get channelInterpretation() {\n                return scriptProcessorNode.channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                scriptProcessorNode.channelInterpretation = value;\n            },\n            get context() {\n                return scriptProcessorNode.context;\n            },\n            get inputs() {\n                return [scriptProcessorNode];\n            },\n            get numberOfInputs() {\n                return scriptProcessorNode.numberOfInputs;\n            },\n            get numberOfOutputs() {\n                return scriptProcessorNode.numberOfOutputs;\n            },\n            addEventListener(...args) {\n                // @todo Dissallow adding an audioprocess listener.\n                return scriptProcessorNode.addEventListener(args[0], args[1], args[2]);\n            },\n            dispatchEvent(...args) {\n                return scriptProcessorNode.dispatchEvent(args[0]);\n            },\n            getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {\n                if ((frequencyHz.length !== magResponse.length) || (magResponse.length !== phaseResponse.length)) {\n                    throw createInvalidAccessError();\n                }\n                const length = frequencyHz.length;\n                for (let i = 0; i < length; i += 1) {\n                    const omega = -Math.PI * (frequencyHz[i] / nyquist);\n                    const z = [Math.cos(omega), Math.sin(omega)];\n                    const numerator = evaluatePolynomial(feedforward, z);\n                    const denominator = evaluatePolynomial(feedback, z);\n                    const response = divide(numerator, denominator);\n                    magResponse[i] = Math.sqrt((response[0] * response[0]) + (response[1] * response[1]));\n                    phaseResponse[i] = Math.atan2(response[1], response[0]);\n                }\n            },\n            removeEventListener(...args) {\n                return scriptProcessorNode.removeEventListener(args[0], args[1], args[2]);\n            }\n        };\n        return interceptConnections(nativeIIRFilterNodeFaker, scriptProcessorNode);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-iir-filter-node-faker-factory.js.map","export const createNotSupportedError = () => {\n    try {\n        return new DOMException('', 'NotSupportedError');\n    }\n    catch (err) {\n        // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.\n        err.code = 9;\n        err.name = 'NotSupportedError';\n        return err;\n    }\n};\n//# sourceMappingURL=/build/es2018/factories/not-supported-error.js.map","import { testPromiseSupport } from '../helpers/test-promise-support';\nconst DEFAULT_OPTIONS = {\n    numberOfChannels: 1\n};\nexport const createOfflineAudioContextConstructor = (baseAudioContextConstructor, cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, startRendering) => {\n    return class OfflineAudioContext extends baseAudioContextConstructor {\n        constructor(a, b, c) {\n            let options;\n            if (typeof a === 'number' && b !== undefined && c !== undefined) {\n                options = { length: b, numberOfChannels: a, sampleRate: c };\n            }\n            else if (typeof a === 'object') {\n                options = a;\n            }\n            else {\n                throw new Error('The given parameters are not valid.');\n            }\n            const { length, numberOfChannels, sampleRate } = { ...DEFAULT_OPTIONS, ...options };\n            const nativeOfflineAudioContext = createNativeOfflineAudioContext(numberOfChannels, length, sampleRate);\n            // #21 Safari does not support promises and therefore would fire the statechange event before the promise can be resolved.\n            if (!cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeOfflineAudioContext))) {\n                nativeOfflineAudioContext.addEventListener('statechange', (() => {\n                    let i = 0;\n                    const delayStateChangeEvent = (event) => {\n                        if (this._state === 'running') {\n                            if (i > 0) {\n                                nativeOfflineAudioContext.removeEventListener('statechange', delayStateChangeEvent);\n                                event.stopImmediatePropagation();\n                                this._waitForThePromiseToSettle(event);\n                            }\n                            else {\n                                i += 1;\n                            }\n                        }\n                    };\n                    return delayStateChangeEvent;\n                })());\n            }\n            super(nativeOfflineAudioContext, numberOfChannels);\n            this._length = length;\n            this._nativeOfflineAudioContext = nativeOfflineAudioContext;\n            this._state = null;\n        }\n        get length() {\n            // Bug #17: Safari does not yet expose the length.\n            if (this._nativeOfflineAudioContext.length === undefined) {\n                return this._length;\n            }\n            return this._nativeOfflineAudioContext.length;\n        }\n        get state() {\n            return (this._state === null) ? this._nativeOfflineAudioContext.state : this._state;\n        }\n        startRendering() {\n            /*\n             * Bug #9 & #59: It is theoretically possible that startRendering() will first render a partialOfflineAudioContext. Therefore\n             * the state of the nativeOfflineAudioContext might no transition to running immediately.\n             */\n            if (this._state === 'running') {\n                return Promise.reject(createInvalidStateError());\n            }\n            this._state = 'running';\n            return startRendering(this.destination, this._nativeOfflineAudioContext)\n                .then((audioBuffer) => {\n                this._state = null;\n                /*\n                 * Bug #50: Deleting the AudioGraph is currently not possible anymore.\n                 * deleteAudioGraph(this, this._nativeOfflineAudioContext);\n                 */\n                return audioBuffer;\n            })\n                // @todo This could be written more elegantly when Promise.finally() becomes avalaible.\n                .catch((err) => {\n                this._state = null;\n                /*\n                 * Bug #50: Deleting the AudioGraph is currently not possible anymore.\n                 * deleteAudioGraph(this, this._nativeOfflineAudioContext);\n                 */\n                throw err; // tslint:disable-line:rxjs-throw-error\n            });\n        }\n        _waitForThePromiseToSettle(event) {\n            if (this._state === null) {\n                this._nativeOfflineAudioContext.dispatchEvent(event);\n            }\n            else {\n                setTimeout(() => this._waitForThePromiseToSettle(event));\n            }\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/offline-audio-context-constructor.js.map","import { getNativeContext } from '../helpers/get-native-context';\nimport { setInternalState } from '../helpers/set-internal-state';\nimport { wrapEventListener } from '../helpers/wrap-event-listener';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    detune: 0,\n    frequency: 440,\n    type: 'sine'\n};\nexport const createOscillatorNodeConstructor = (createAudioParam, createInvalidStateError, createNativeOscillatorNode, createOscillatorNodeRenderer, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class OscillatorNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeOscillatorNode = createNativeOscillatorNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const oscillatorNodeRenderer = ((isOffline) ? createOscillatorNodeRenderer() : null);\n            const nyquist = context.sampleRate / 2;\n            super(context, 'passive', nativeOscillatorNode, oscillatorNodeRenderer);\n            // Bug #81: Edge, Firefox & Safari do not export the correct values for maxValue and minValue.\n            this._detune = createAudioParam(this, isOffline, nativeOscillatorNode.detune, 153600, -153600);\n            // Bug #76: Edge & Safari do not export the correct values for maxValue and minValue.\n            this._frequency = createAudioParam(this, isOffline, nativeOscillatorNode.frequency, nyquist, -nyquist);\n            this._nativeOscillatorNode = nativeOscillatorNode;\n            this._onended = null;\n            this._oscillatorNodeRenderer = oscillatorNodeRenderer;\n            if (this._oscillatorNodeRenderer !== null && mergedOptions.periodicWave !== undefined) {\n                this._oscillatorNodeRenderer.periodicWave =\n                    mergedOptions.periodicWave;\n            }\n        }\n        get detune() {\n            return this._detune;\n        }\n        get frequency() {\n            return this._frequency;\n        }\n        get onended() {\n            return this._onended;\n        }\n        set onended(value) {\n            const wrappedListener = wrapEventListener(this, value);\n            this._nativeOscillatorNode.onended = wrappedListener;\n            const nativeOnEnded = this._nativeOscillatorNode.onended;\n            this._onended = (nativeOnEnded === wrappedListener) ? value : nativeOnEnded;\n        }\n        get type() {\n            return this._nativeOscillatorNode.type;\n        }\n        set type(value) {\n            this._nativeOscillatorNode.type = value;\n            // Bug #57: Edge will not throw an error when assigning the type to 'custom'. But it still will change the value.\n            if (value === 'custom') {\n                throw createInvalidStateError();\n            }\n            if (this._oscillatorNodeRenderer !== null) {\n                this._oscillatorNodeRenderer.periodicWave = null;\n            }\n        }\n        setPeriodicWave(periodicWave) {\n            this._nativeOscillatorNode.setPeriodicWave(periodicWave);\n            if (this._oscillatorNodeRenderer !== null) {\n                this._oscillatorNodeRenderer.periodicWave = periodicWave;\n            }\n        }\n        start(when = 0) {\n            this._nativeOscillatorNode.start(when);\n            if (this._oscillatorNodeRenderer !== null) {\n                this._oscillatorNodeRenderer.start = when;\n            }\n            else {\n                setInternalState(this, 'active');\n                const setInternalStateToInactive = () => {\n                    this._nativeOscillatorNode.removeEventListener('ended', setInternalStateToInactive);\n                    // @todo Determine a meaningful delay instead of just using one second.\n                    setTimeout(() => setInternalState(this, 'passive'), 1000);\n                };\n                this._nativeOscillatorNode.addEventListener('ended', setInternalStateToInactive);\n            }\n        }\n        stop(when = 0) {\n            this._nativeOscillatorNode.stop(when);\n            if (this._oscillatorNodeRenderer !== null) {\n                this._oscillatorNodeRenderer.stop = when;\n            }\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/oscillator-node-constructor.js.map","import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { getNativeContext } from '../helpers/get-native-context';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'clamped-max',\n    channelInterpretation: 'speakers',\n    coneInnerAngle: 360,\n    coneOuterAngle: 360,\n    coneOuterGain: 0,\n    distanceModel: 'inverse',\n    maxDistance: 10000,\n    orientationX: 1,\n    orientationY: 0,\n    orientationZ: 0,\n    panningModel: 'equalpower',\n    positionX: 0,\n    positionY: 0,\n    positionZ: 0,\n    refDistance: 1,\n    rolloffFactor: 1\n};\nexport const createPannerNodeConstructor = (createAudioParam, createNativePannerNode, createPannerNodeRenderer, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class PannerNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativePannerNode = createNativePannerNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const pannerNodeRenderer = ((isOffline) ? createPannerNodeRenderer() : null);\n            super(context, 'passive', nativePannerNode, pannerNodeRenderer);\n            this._nativePannerNode = nativePannerNode;\n            // Bug #74: Edge & Safari do not export the correct values for maxValue and minValue for GainNodes.\n            this._orientationX = createAudioParam(this, isOffline, nativePannerNode.orientationX, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            this._orientationY = createAudioParam(this, isOffline, nativePannerNode.orientationY, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            this._orientationZ = createAudioParam(this, isOffline, nativePannerNode.orientationZ, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            this._positionX = createAudioParam(this, isOffline, nativePannerNode.positionX, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            this._positionY = createAudioParam(this, isOffline, nativePannerNode.positionY, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            this._positionZ = createAudioParam(this, isOffline, nativePannerNode.positionZ, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n        }\n        get coneInnerAngle() {\n            return this._nativePannerNode.coneInnerAngle;\n        }\n        set coneInnerAngle(value) {\n            this._nativePannerNode.coneInnerAngle = value;\n        }\n        get coneOuterAngle() {\n            return this._nativePannerNode.coneOuterAngle;\n        }\n        set coneOuterAngle(value) {\n            this._nativePannerNode.coneOuterAngle = value;\n        }\n        get coneOuterGain() {\n            return this._nativePannerNode.coneOuterGain;\n        }\n        set coneOuterGain(value) {\n            this._nativePannerNode.coneOuterGain = value;\n        }\n        get distanceModel() {\n            return this._nativePannerNode.distanceModel;\n        }\n        set distanceModel(value) {\n            this._nativePannerNode.distanceModel = value;\n        }\n        get maxDistance() {\n            return this._nativePannerNode.maxDistance;\n        }\n        set maxDistance(value) {\n            this._nativePannerNode.maxDistance = value;\n        }\n        get orientationX() {\n            return this._orientationX;\n        }\n        get orientationY() {\n            return this._orientationY;\n        }\n        get orientationZ() {\n            return this._orientationZ;\n        }\n        get panningModel() {\n            return this._nativePannerNode.panningModel;\n        }\n        set panningModel(value) {\n            this._nativePannerNode.panningModel = value;\n        }\n        get positionX() {\n            return this._positionX;\n        }\n        get positionY() {\n            return this._positionY;\n        }\n        get positionZ() {\n            return this._positionZ;\n        }\n        get refDistance() {\n            return this._nativePannerNode.refDistance;\n        }\n        set refDistance(value) {\n            this._nativePannerNode.refDistance = value;\n        }\n        get rolloffFactor() {\n            return this._nativePannerNode.rolloffFactor;\n        }\n        set rolloffFactor(value) {\n            this._nativePannerNode.rolloffFactor = value;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/panner-node-constructor.js.map","import { getNativeContext } from '../helpers/get-native-context';\nconst DEFAULT_OPTIONS = {\n    disableNormalization: false\n};\nexport const createPeriodicWaveConstructor = (createNativePeriodicWave) => {\n    return class PeriodicWave {\n        constructor(context, options) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            // This does violate all good pratices but it is used here to simplify the handling of periodic waves.\n            return createNativePeriodicWave(nativeContext, mergedOptions);\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/periodic-wave-constructor.js.map","import { getNativeContext } from '../helpers/get-native-context';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    /*\n     * Bug #105: The channelCountMode should be 'clamped-max' according to the spec but is set to 'explicit' to achieve consistent\n     * behavior.\n     */\n    channelCountMode: 'explicit',\n    channelInterpretation: 'speakers',\n    pan: 0\n};\nexport const createStereoPannerNodeConstructor = (createAudioParam, createNativeStereoPannerNode, createStereoPannerNodeRenderer, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class StereoPannerNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeStereoPannerNode = createNativeStereoPannerNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const stereoPannerNodeRenderer = ((isOffline) ? createStereoPannerNodeRenderer() : null);\n            super(context, 'passive', nativeStereoPannerNode, stereoPannerNodeRenderer);\n            // Bug #106: Edge does not export a maxValue and minValue property.\n            this._pan = createAudioParam(this, isOffline, nativeStereoPannerNode.pan, 1, -1);\n        }\n        get pan() {\n            return this._pan;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/stereo-panner-node-constructor.js.map","export const createUnknownError = () => {\n    try {\n        return new DOMException('', 'UnknownError');\n    }\n    catch (err) {\n        // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.\n        err.name = 'UnknownError';\n        return err;\n    }\n};\n//# sourceMappingURL=/build/es2018/factories/unknown-error.js.map","import { getNativeContext } from '../helpers/get-native-context';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    curve: null,\n    oversample: 'none'\n};\nexport const createWaveShaperNodeConstructor = (createInvalidStateError, createNativeWaveShaperNode, createWaveShaperNodeRenderer, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class WaveShaperNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeWaveShaperNode = createNativeWaveShaperNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const waveShaperNodeRenderer = ((isOffline) ? createWaveShaperNodeRenderer() : null);\n            super(context, 'passive', nativeWaveShaperNode, waveShaperNodeRenderer);\n            this._isCurveNullified = false;\n            this._nativeWaveShaperNode = nativeWaveShaperNode;\n        }\n        get curve() {\n            if (this._isCurveNullified) {\n                return null;\n            }\n            return this._nativeWaveShaperNode.curve;\n        }\n        set curve(value) {\n            // Bug #103: Safari does not allow to set the curve to null.\n            if (value === null) {\n                this._isCurveNullified = true;\n                this._nativeWaveShaperNode.curve = new Float32Array([0, 0]);\n            }\n            else {\n                // Bug #102: Safari does not throw an InvalidStateError when the curve has less than two samples.\n                // Bug #104: Chrome will throw an InvalidAccessError when the curve has less than two samples.\n                if (value.length < 2) {\n                    throw createInvalidStateError();\n                }\n                this._isCurveNullified = false;\n                this._nativeWaveShaperNode.curve = value;\n            }\n        }\n        get oversample() {\n            return this._nativeWaveShaperNode.oversample;\n        }\n        set oversample(value) {\n            this._nativeWaveShaperNode.oversample = value;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/wave-shaper-node-constructor.js.map","import { createCancelAndHoldAutomationEvent, createCancelScheduledValuesAutomationEvent, createExponentialRampToValueAutomationEvent, createLinearRampToValueAutomationEvent, createSetTargetAutomationEvent, createSetValueAutomationEvent, createSetValueCurveAutomationEvent } from 'automation-events';\nimport { createAbortError } from './factories/abort-error';\nimport { createAddAudioWorkletModule } from './factories/add-audio-worklet-module';\nimport { createAnalyserNodeConstructor } from './factories/analyser-node-constructor';\nimport { createAnalyserNodeRendererFactory } from './factories/analyser-node-renderer-factory';\nimport { createAudioBufferConstructor } from './factories/audio-buffer-constructor';\nimport { createAudioBufferSourceNodeConstructor } from './factories/audio-buffer-source-node-constructor';\nimport { createAudioBufferSourceNodeRendererFactory } from './factories/audio-buffer-source-node-renderer-factory';\nimport { createAudioContextConstructor } from './factories/audio-context-constructor';\nimport { createAudioDestinationNodeConstructor } from './factories/audio-destination-node-constructor';\nimport { createAudioDestinationNodeRenderer } from './factories/audio-destination-node-renderer-factory';\nimport { createAudioListenerFactory } from './factories/audio-listener-factory';\nimport { createAudioNodeConstructor } from './factories/audio-node-constructor';\nimport { createAudioParamFactory } from './factories/audio-param-factory';\nimport { createAudioParamRenderer } from './factories/audio-param-renderer';\nimport { createAudioWorkletNodeConstructor } from './factories/audio-worklet-node-constructor';\nimport { createAudioWorkletNodeRendererFactory } from './factories/audio-worklet-node-renderer-factory';\nimport { createBaseAudioContextConstructor } from './factories/base-audio-context-constructor';\nimport { createBiquadFilterNodeConstructor } from './factories/biquad-filter-node-constructor';\nimport { createBiquadFilterNodeRendererFactory } from './factories/biquad-filter-node-renderer-factory';\nimport { createCacheTestResult } from './factories/cache-test-result';\nimport { createChannelMergerNodeConstructor } from './factories/channel-merger-node-constructor';\nimport { createChannelMergerNodeRendererFactory } from './factories/channel-merger-node-renderer-factory';\nimport { createChannelSplitterNodeConstructor } from './factories/channel-splitter-node-constructor';\nimport { createChannelSplitterNodeRendererFactory } from './factories/channel-splitter-node-renderer-factory';\nimport { createConnectMultipleOutputs } from './factories/connect-multiple-outputs';\nimport { createConstantSourceNodeConstructor } from './factories/constant-source-node-constructor';\nimport { createConstantSourceNodeRendererFactory } from './factories/constant-source-node-renderer-factory';\nimport { createConvertNumberToUnsignedLong } from './factories/convert-number-to-unsigned-long';\nimport { createConvolverNodeConstructor } from './factories/convolver-node-constructor';\nimport { createConvolverNodeRendererFactory } from './factories/convolver-node-renderer-factory';\nimport { createCreateNativeOfflineAudioContext } from './factories/create-native-offline-audio-context';\nimport { createDataCloneError } from './factories/data-clone-error';\nimport { createDecodeAudioData } from './factories/decode-audio-data';\nimport { createDelayNodeConstructor } from './factories/delay-node-constructor';\nimport { createDelayNodeRendererFactory } from './factories/delay-node-renderer-factory';\nimport { createDetectCycles } from './factories/detect-cycles';\nimport { createDisconnectMultipleOutputs } from './factories/disconnect-multiple-outputs';\nimport { createDynamicsCompressorNodeConstructor } from './factories/dynamics-compressor-node-constructor';\nimport { createDynamicsCompressorNodeRendererFactory } from './factories/dynamics-compressor-node-renderer-factory';\nimport { createEncodingError } from './factories/encoding-error';\nimport { createExposeCurrentFrameAndCurrentTime } from './factories/expose-current-frame-and-current-time';\nimport { createFetchSource } from './factories/fetch-source';\nimport { createGainNodeConstructor } from './factories/gain-node-constructor';\nimport { createGainNodeRendererFactory } from './factories/gain-node-renderer-factory';\nimport { createGetBackupNativeContext } from './factories/get-backup-native-context';\nimport { createIIRFilterNodeConstructor } from './factories/iir-filter-node-constructor';\nimport { createIIRFilterNodeRendererFactory } from './factories/iir-filter-node-renderer-factory';\nimport { createIndexSizeError } from './factories/index-size-error';\nimport { createInvalidAccessError } from './factories/invalid-access-error';\nimport { createInvalidStateError } from './factories/invalid-state-error';\nimport { createIsAnyAudioNode } from './factories/is-any-audio-node';\nimport { createIsNativeContext } from './factories/is-native-context';\nimport { createIsNativeOfflineAudioContext } from './factories/is-native-offline-audio-context';\nimport { createIsSecureContext } from './factories/is-secure-context';\nimport { createIsSupportedPromise } from './factories/is-supported-promise';\nimport { createMediaElementAudioSourceNodeConstructor } from './factories/media-element-audio-source-node-constructor';\nimport { createMediaStreamAudioSourceNodeConstructor } from './factories/media-stream-audio-source-node-constructor';\nimport { createMediaStreamTrackAudioSourceNodeConstructor } from './factories/media-stream-track-audio-source-node-constructor';\nimport { createMinimalAudioContextConstructor } from './factories/minimal-audio-context-constructor';\nimport { createMinimalBaseAudioContextConstructor } from './factories/minimal-base-audio-context-constructor';\nimport { createMinimalOfflineAudioContextConstructor } from './factories/minimal-offline-audio-context-constructor';\nimport { createNativeAnalyserNodeFactory } from './factories/native-analyser-node-factory';\nimport { createNativeAudioBufferConstructor } from './factories/native-audio-buffer-constructor';\nimport { createNativeAudioBufferSourceNodeFactory } from './factories/native-audio-buffer-source-node-factory';\nimport { createNativeAudioContextConstructor } from './factories/native-audio-context-constructor';\nimport { createNativeAudioDestinationNode } from './factories/native-audio-destination-node';\nimport { createNativeAudioNodeFactory } from './factories/native-audio-node-factory';\nimport { createNativeAudioWorkletNodeConstructor } from './factories/native-audio-worklet-node-constructor';\nimport { createNativeAudioWorkletNodeFactory } from './factories/native-audio-worklet-node-factory';\nimport { createNativeAudioWorkletNodeFakerFactory } from './factories/native-audio-worklet-node-faker-factory';\nimport { createNativeBiquadFilterNodeFactory } from './factories/native-biquad-filter-node-factory';\nimport { createNativeChannelMergerNodeFactory } from './factories/native-channel-merger-node-factory';\nimport { createNativeChannelSplitterNodeFactory } from './factories/native-channel-splitter-node-factory';\nimport { createNativeConstantSourceNodeFactory } from './factories/native-constant-source-node-factory';\nimport { createNativeConstantSourceNodeFakerFactory } from './factories/native-constant-source-node-faker-factory';\nimport { createNativeConvolverNodeFactory } from './factories/native-convolver-node-factory';\nimport { createNativeDelayNodeFactory } from './factories/native-delay-node-factory';\nimport { createNativeDynamicsCompressorNodeFactory } from './factories/native-dynamics-compressor-node-factory';\nimport { createNativeGainNodeFactory } from './factories/native-gain-node-factory';\nimport { createNativeIIRFilterNodeFactory } from './factories/native-iir-filter-node-factory';\nimport { createNativeIIRFilterNodeFakerFactory } from './factories/native-iir-filter-node-faker-factory';\nimport { createNativeMediaElementAudioSourceNodeFactory } from './factories/native-media-element-audio-source-node-factory';\nimport { createNativeMediaStreamAudioSourceNodeFactory } from './factories/native-media-stream-audio-source-node-factory';\nimport { createNativeMediaStreamTrackAudioSourceNodeFactory } from './factories/native-media-stream-track-audio-source-node-factory';\nimport { createNativeOfflineAudioContextConstructor } from './factories/native-offline-audio-context-constructor';\nimport { createNativeOscillatorNodeFactory } from './factories/native-oscillator-node-factory';\nimport { createNativePannerNodeFactory } from './factories/native-panner-node-factory';\nimport { createNativePannerNodeFakerFactory } from './factories/native-panner-node-faker-factory';\nimport { createNativePeriodicWaveFactory } from './factories/native-periodic-wave-factory';\nimport { createNativeScriptProcessorNodeFactory } from './factories/native-script-processor-node-factory';\nimport { createNativeStereoPannerNodeFactory } from './factories/native-stereo-panner-node-factory';\nimport { createNativeStereoPannerNodeFakerFactory } from './factories/native-stereo-panner-node-faker-factory';\nimport { createNativeWaveShaperNodeFactory } from './factories/native-wave-shaper-node-factory';\nimport { createNativeWaveShaperNodeFakerFactory } from './factories/native-wave-shaper-node-faker-factory';\nimport { createNoneAudioDestinationNodeConstructor } from './factories/none-audio-destination-node-constructor';\nimport { createNotSupportedError } from './factories/not-supported-error';\nimport { createOfflineAudioContextConstructor } from './factories/offline-audio-context-constructor';\nimport { createOscillatorNodeConstructor } from './factories/oscillator-node-constructor';\nimport { createOscillatorNodeRendererFactory } from './factories/oscillator-node-renderer-factory';\nimport { createPannerNodeConstructor } from './factories/panner-node-constructor';\nimport { createPannerNodeRendererFactory } from './factories/panner-node-renderer-factory';\nimport { createPeriodicWaveConstructor } from './factories/periodic-wave-constructor';\nimport { createRenderNativeOfflineAudioContext } from './factories/render-native-offline-audio-context';\nimport { createStartRendering } from './factories/start-rendering';\nimport { createStereoPannerNodeConstructor } from './factories/stereo-panner-node-constructor';\nimport { createStereoPannerNodeRendererFactory } from './factories/stereo-panner-node-renderer-factory';\nimport { createTestAudioBufferConstructorSupport } from './factories/test-audio-buffer-constructor-support';\nimport { createTestAudioBufferSourceNodeStartMethodConsecutiveCallsSupport } from './factories/test-audio-buffer-source-node-start-method-consecutive-calls-support';\nimport { createTestAudioBufferSourceNodeStartMethodDurationParameterSupport } from './factories/test-audio-buffer-source-node-start-method-duration-parameter-support';\nimport { createTestAudioBufferSourceNodeStartMethodOffsetClampingSupport } from './factories/test-audio-buffer-source-node-start-method-offset-clamping-support';\nimport { createTestAudioContextCloseMethodSupport } from './factories/test-audio-context-close-method-support';\nimport { createTestAudioContextDecodeAudioDataMethodTypeErrorSupport } from './factories/test-audio-context-decode-audio-data-method-type-error-support';\nimport { createTestAudioContextOptionsSupport } from './factories/test-audio-context-options-support';\nimport { createTestAudioScheduledSourceNodeStartMethodNegativeParametersSupport } from './factories/test-audio-scheduled-source-node-start-method-negative-parameters-support';\nimport { createTestAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport } from './factories/test-audio-scheduled-source-node-stop-method-consecutive-calls-support';\nimport { createTestAudioScheduledSourceNodeStopMethodNegativeParametersSupport } from './factories/test-audio-scheduled-source-node-stop-method-negative-parameters-support';\nimport { createTestAudioWorkletProcessorNoOutputsSupport } from './factories/test-audio-worklet-processor-no-outputs-support';\nimport { createTestChannelSplitterNodeChannelCountSupport } from './factories/test-channel-splitter-node-channel-count-support';\nimport { createTestConstantSourceNodeAccurateSchedulingSupport } from './factories/test-constant-source-node-accurate-scheduling-support';\nimport { createTestConvolverNodeBufferReassignabilitySupport } from './factories/test-convolver-node-buffer-reassignability-support';\nimport { createTestIsSecureContextSupport } from './factories/test-is-secure-context-support';\nimport { createTestOfflineAudioContextCurrentTimeSupport } from './factories/test-offline-audio-context-current-time-support';\nimport { createTestStereoPannerNodeDefaultValueSupport } from './factories/test-stereo-panner-node-default-value-support';\nimport { createUnknownError } from './factories/unknown-error';\nimport { createWaveShaperNodeConstructor } from './factories/wave-shaper-node-constructor';\nimport { createWaveShaperNodeRendererFactory } from './factories/wave-shaper-node-renderer-factory';\nimport { createWindow } from './factories/window';\nimport { createWrapAudioBufferCopyChannelMethods } from './factories/wrap-audio-buffer-copy-channel-methods';\nimport { createWrapAudioBufferCopyChannelMethodsOutOfBounds } from './factories/wrap-audio-buffer-copy-channel-methods-out-of-bounds';\nimport { createWrapAudioBufferCopyChannelMethodsSubarray } from './factories/wrap-audio-buffer-copy-channel-methods-subarray';\nimport { createWrapAudioScheduledSourceNodeStopMethodConsecutiveCalls } from './factories/wrap-audio-scheduled-source-node-stop-method-consecutive-calls';\nimport { createWrapChannelMergerNode } from './factories/wrap-channel-merger-node';\nimport { AUDIO_NODE_STORE, AUDIO_PARAM_AUDIO_NODE_STORE } from './globals';\nimport { getAudioNodeConnections } from './helpers/get-audio-node-connections';\nimport { getValueForKey } from './helpers/get-value-for-key';\nimport { testAudioBufferCopyChannelMethodsOutOfBoundsSupport } from './helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support';\nimport { testAudioBufferCopyChannelMethodsSubarraySupport } from './helpers/test-audio-buffer-copy-channel-methods-subarray-support';\nimport { testPromiseSupport } from './helpers/test-promise-support';\nimport { testTransferablesSupport } from './helpers/test-transferables-support';\nimport { wrapAudioBufferSourceNodeStartMethodOffsetClamping } from './helpers/wrap-audio-buffer-source-node-start-method-offset-clamping';\nconst cacheTestResult = createCacheTestResult(new Map());\nconst window = createWindow();\nconst nativeOfflineAudioContextConstructor = createNativeOfflineAudioContextConstructor(window);\nconst isNativeOfflineAudioContext = createIsNativeOfflineAudioContext(nativeOfflineAudioContextConstructor);\nconst nativeAudioContextConstructor = createNativeAudioContextConstructor(window);\nconst getBackupNativeContext = createGetBackupNativeContext(isNativeOfflineAudioContext, nativeAudioContextConstructor, nativeOfflineAudioContextConstructor);\nconst createNativeAudioNode = createNativeAudioNodeFactory(getBackupNativeContext);\nconst createNativeAnalyserNode = createNativeAnalyserNodeFactory(cacheTestResult, createIndexSizeError, createNativeAudioNode);\nconst createAnalyserNodeRenderer = createAnalyserNodeRendererFactory(createNativeAnalyserNode);\nconst audioNodeConstructor = createAudioNodeConstructor(cacheTestResult, createIndexSizeError, createInvalidAccessError, createNotSupportedError, createDetectCycles(AUDIO_PARAM_AUDIO_NODE_STORE, createNotSupportedError, getAudioNodeConnections, getValueForKey), isNativeOfflineAudioContext);\nconst noneAudioDestinationNodeConstructor = createNoneAudioDestinationNodeConstructor(audioNodeConstructor);\nconst analyserNodeConstructor = createAnalyserNodeConstructor(createAnalyserNodeRenderer, createIndexSizeError, createNativeAnalyserNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nexport { analyserNodeConstructor as AnalyserNode };\nconst nativeAudioBufferConstructor = createNativeAudioBufferConstructor(window);\nconst convertNumberToUnsignedLong = createConvertNumberToUnsignedLong(new Uint32Array(1));\nconst wrapAudioBufferCopyChannelMethods = createWrapAudioBufferCopyChannelMethods(convertNumberToUnsignedLong, createIndexSizeError);\nconst wrapAudioBufferCopyChannelMethodsOutOfBounds = createWrapAudioBufferCopyChannelMethodsOutOfBounds(convertNumberToUnsignedLong);\nconst wrapAudioBufferCopyChannelMethodsSubarray = createWrapAudioBufferCopyChannelMethodsSubarray(convertNumberToUnsignedLong, createIndexSizeError);\nconst audioBufferConstructor = createAudioBufferConstructor(cacheTestResult, createNotSupportedError, nativeAudioBufferConstructor, nativeOfflineAudioContextConstructor, createTestAudioBufferConstructorSupport(nativeAudioBufferConstructor), wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds, wrapAudioBufferCopyChannelMethodsSubarray);\nexport { audioBufferConstructor as AudioBuffer };\nconst testAudioScheduledSourceNodeStartMethodNegativeParametersSupport = createTestAudioScheduledSourceNodeStartMethodNegativeParametersSupport(createNativeAudioNode);\nconst testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport = createTestAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport(createNativeAudioNode);\nconst testAudioScheduledSourceNodeStopMethodNegativeParametersSupport = createTestAudioScheduledSourceNodeStopMethodNegativeParametersSupport(createNativeAudioNode);\nconst wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls = createWrapAudioScheduledSourceNodeStopMethodConsecutiveCalls(createNativeAudioNode);\nconst createNativeAudioBufferSourceNode = createNativeAudioBufferSourceNodeFactory(cacheTestResult, createNativeAudioNode, createTestAudioBufferSourceNodeStartMethodConsecutiveCallsSupport(createNativeAudioNode), createTestAudioBufferSourceNodeStartMethodDurationParameterSupport(nativeOfflineAudioContextConstructor), createTestAudioBufferSourceNodeStartMethodOffsetClampingSupport(createNativeAudioNode), testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioBufferSourceNodeStartMethodOffsetClamping, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls);\nconst createAudioBufferSourceNodeRenderer = createAudioBufferSourceNodeRendererFactory(createNativeAudioBufferSourceNode);\nconst createAudioParam = createAudioParamFactory(createAudioParamRenderer, createCancelAndHoldAutomationEvent, createCancelScheduledValuesAutomationEvent, createExponentialRampToValueAutomationEvent, createLinearRampToValueAutomationEvent, createSetTargetAutomationEvent, createSetValueAutomationEvent, createSetValueCurveAutomationEvent, nativeAudioContextConstructor);\nconst audioBufferSourceNodeConstructor = createAudioBufferSourceNodeConstructor(createAudioBufferSourceNodeRenderer, createAudioParam, createInvalidStateError, createNativeAudioBufferSourceNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nexport { audioBufferSourceNodeConstructor as AudioBufferSourceNode };\nconst audioDestinationNodeConstructor = createAudioDestinationNodeConstructor(audioNodeConstructor, createAudioDestinationNodeRenderer, createIndexSizeError, createInvalidStateError, createNativeAudioDestinationNode, isNativeOfflineAudioContext);\nconst createNativeBiquadFilterNode = createNativeBiquadFilterNodeFactory(createNativeAudioNode);\nconst createBiquadFilterNodeRenderer = createBiquadFilterNodeRendererFactory(createNativeBiquadFilterNode);\nconst biquadFilterNodeConstructor = createBiquadFilterNodeConstructor(createAudioParam, createBiquadFilterNodeRenderer, createInvalidAccessError, createNativeBiquadFilterNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nconst wrapChannelMergerNode = createWrapChannelMergerNode(createInvalidStateError, createNativeAudioNode);\nconst createNativeChannelMergerNode = createNativeChannelMergerNodeFactory(createNativeAudioNode, wrapChannelMergerNode);\nconst createChannelMergerNodeRenderer = createChannelMergerNodeRendererFactory(createNativeChannelMergerNode);\nconst channelMergerNodeConstructor = createChannelMergerNodeConstructor(createChannelMergerNodeRenderer, createNativeChannelMergerNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nconst createNativeChannelSplitterNode = createNativeChannelSplitterNodeFactory(createNativeAudioNode);\nconst createChannelSplitterNodeRenderer = createChannelSplitterNodeRendererFactory(createNativeChannelSplitterNode);\nconst channelSplitterNodeConstructor = createChannelSplitterNodeConstructor(createChannelSplitterNodeRenderer, createNativeChannelSplitterNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nconst createNativeGainNode = createNativeGainNodeFactory(createNativeAudioNode);\nconst createNativeConstantSourceNodeFaker = createNativeConstantSourceNodeFakerFactory(createNativeAudioBufferSourceNode, createNativeGainNode);\nconst createNativeConstantSourceNode = createNativeConstantSourceNodeFactory(cacheTestResult, createNativeAudioNode, createNativeConstantSourceNodeFaker, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport);\nconst createConstantSourceNodeRenderer = createConstantSourceNodeRendererFactory(createNativeConstantSourceNode);\nconst constantSourceNodeConstructor = createConstantSourceNodeConstructor(createAudioParam, createConstantSourceNodeRenderer, createNativeConstantSourceNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nconst createNativeConvolverNode = createNativeConvolverNodeFactory(createNativeAudioNode, createNotSupportedError);\nconst createConvolverNodeRenderer = createConvolverNodeRendererFactory(createNativeConvolverNode);\nconst convolverNodeConstructor = createConvolverNodeConstructor(createConvolverNodeRenderer, createNativeConvolverNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nconst createNativeDelayNode = createNativeDelayNodeFactory(createNativeAudioNode);\nconst createDelayNodeRenderer = createDelayNodeRendererFactory(createNativeDelayNode);\nconst delayNodeConstructor = createDelayNodeConstructor(createAudioParam, createDelayNodeRenderer, createNativeDelayNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nconst createNativeDynamicsCompressorNode = createNativeDynamicsCompressorNodeFactory(createNativeAudioNode, createNotSupportedError);\nconst createDynamicsCompressorNodeRenderer = createDynamicsCompressorNodeRendererFactory(createNativeDynamicsCompressorNode);\nconst dynamicsCompressorNodeConstructor = createDynamicsCompressorNodeConstructor(createAudioParam, createDynamicsCompressorNodeRenderer, createNativeDynamicsCompressorNode, createNotSupportedError, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nconst createGainNodeRenderer = createGainNodeRendererFactory(createNativeGainNode);\nconst gainNodeConstructor = createGainNodeConstructor(createAudioParam, createGainNodeRenderer, createNativeGainNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nconst createNativeScriptProcessorNode = createNativeScriptProcessorNodeFactory(createNativeAudioNode);\nconst createNativeIIRFilterNodeFaker = createNativeIIRFilterNodeFakerFactory(createInvalidAccessError, createInvalidStateError, createNativeScriptProcessorNode, createNotSupportedError);\nconst renderNativeOfflineAudioContext = createRenderNativeOfflineAudioContext(cacheTestResult, createNativeGainNode, createNativeScriptProcessorNode, createTestOfflineAudioContextCurrentTimeSupport(createNativeGainNode, nativeOfflineAudioContextConstructor));\nconst createIIRFilterNodeRenderer = createIIRFilterNodeRendererFactory(createNativeAudioBufferSourceNode, createNativeAudioNode, nativeOfflineAudioContextConstructor, renderNativeOfflineAudioContext);\nconst createNativeIIRFilterNode = createNativeIIRFilterNodeFactory(createNativeAudioNode, createNativeIIRFilterNodeFaker);\nconst iIRFilterNodeConstructor = createIIRFilterNodeConstructor(createNativeIIRFilterNode, createIIRFilterNodeRenderer, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nconst createAudioListener = createAudioListenerFactory(createAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeScriptProcessorNode, isNativeOfflineAudioContext);\nconst minimalBaseAudioContextConstructor = createMinimalBaseAudioContextConstructor(audioDestinationNodeConstructor, createAudioListener);\nconst createNativeOscillatorNode = createNativeOscillatorNodeFactory(cacheTestResult, createNativeAudioNode, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls);\nconst createOscillatorNodeRenderer = createOscillatorNodeRendererFactory(createNativeOscillatorNode);\nconst oscillatorNodeConstructor = createOscillatorNodeConstructor(createAudioParam, createInvalidStateError, createNativeOscillatorNode, createOscillatorNodeRenderer, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nconst createNativeWaveShaperNodeFaker = createNativeWaveShaperNodeFakerFactory(createInvalidStateError, createNativeAudioNode, createNativeGainNode);\nconst createNativeWaveShaperNode = createNativeWaveShaperNodeFactory(createInvalidStateError, createNativeAudioNode, createNativeWaveShaperNodeFaker);\nconst createNativePannerNodeFaker = createNativePannerNodeFakerFactory(createInvalidStateError, createNativeAudioNode, createNativeChannelMergerNode, createNativeGainNode, createNativeScriptProcessorNode, createNativeWaveShaperNode, createNotSupportedError);\nconst createNativePannerNode = createNativePannerNodeFactory(createNativeAudioNode, createNativePannerNodeFaker);\nconst createPannerNodeRenderer = createPannerNodeRendererFactory(createNativePannerNode);\nconst pannerNodeConstructor = createPannerNodeConstructor(createAudioParam, createNativePannerNode, createPannerNodeRenderer, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nconst createNativePeriodicWave = createNativePeriodicWaveFactory(getBackupNativeContext);\nconst periodicWaveConstructor = createPeriodicWaveConstructor(createNativePeriodicWave);\nconst nativeStereoPannerNodeFakerFactory = createNativeStereoPannerNodeFakerFactory(createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeGainNode, createNativeWaveShaperNode, createNotSupportedError);\nconst createNativeStereoPannerNode = createNativeStereoPannerNodeFactory(createNativeAudioNode, nativeStereoPannerNodeFakerFactory, createNotSupportedError);\nconst createStereoPannerNodeRenderer = createStereoPannerNodeRendererFactory(createNativeStereoPannerNode);\nconst stereoPannerNodeConstructor = createStereoPannerNodeConstructor(createAudioParam, createNativeStereoPannerNode, createStereoPannerNodeRenderer, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nconst createWaveShaperNodeRenderer = createWaveShaperNodeRendererFactory(createNativeWaveShaperNode);\nconst waveShaperNodeConstructor = createWaveShaperNodeConstructor(createInvalidStateError, createNativeWaveShaperNode, createWaveShaperNodeRenderer, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nconst isSecureContext = createIsSecureContext(window);\nconst exposeCurrentFrameAndCurrentTime = createExposeCurrentFrameAndCurrentTime(window);\n// The addAudioWorkletModule() function is only available in a SecureContext.\nexport const addAudioWorkletModule = (isSecureContext) ?\n    createAddAudioWorkletModule(createAbortError, createNotSupportedError, exposeCurrentFrameAndCurrentTime, createFetchSource(createAbortError), getBackupNativeContext, new WeakMap(), new WeakMap()) :\n    undefined;\nconst isNativeContext = createIsNativeContext(isNativeOfflineAudioContext, nativeAudioContextConstructor);\nexport const decodeAudioData = createDecodeAudioData(cacheTestResult, createDataCloneError, createEncodingError, nativeOfflineAudioContextConstructor, isNativeContext, isNativeOfflineAudioContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, testAudioBufferCopyChannelMethodsSubarraySupport, testPromiseSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds, wrapAudioBufferCopyChannelMethodsSubarray);\nconst baseAudioContextConstructor = createBaseAudioContextConstructor(addAudioWorkletModule, analyserNodeConstructor, audioBufferConstructor, audioBufferSourceNodeConstructor, biquadFilterNodeConstructor, channelMergerNodeConstructor, channelSplitterNodeConstructor, constantSourceNodeConstructor, convolverNodeConstructor, decodeAudioData, delayNodeConstructor, dynamicsCompressorNodeConstructor, gainNodeConstructor, iIRFilterNodeConstructor, minimalBaseAudioContextConstructor, oscillatorNodeConstructor, pannerNodeConstructor, periodicWaveConstructor, stereoPannerNodeConstructor, waveShaperNodeConstructor);\nconst createNativeMediaElementAudioSourceNode = createNativeMediaElementAudioSourceNodeFactory(createNativeAudioNode);\nconst mediaElementAudioSourceNodeConstructor = createMediaElementAudioSourceNodeConstructor(createNativeMediaElementAudioSourceNode, createNotSupportedError, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nconst createNativeMediaStreamAudioSourceNode = createNativeMediaStreamAudioSourceNodeFactory(createInvalidStateError, createNativeAudioNode);\nconst mediaStreamAudioSourceNodeConstructor = createMediaStreamAudioSourceNodeConstructor(createNativeMediaStreamAudioSourceNode, createNotSupportedError, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nconst createNativeMediaStreamTrackAudioSourceNode = createNativeMediaStreamTrackAudioSourceNodeFactory(createInvalidStateError, createNativeAudioNode);\nconst mediaStreamTrackAudioSourceNodeConstructor = createMediaStreamTrackAudioSourceNodeConstructor(createNativeMediaStreamTrackAudioSourceNode, createNotSupportedError, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nconst audioContextConstructor = createAudioContextConstructor(baseAudioContextConstructor, createInvalidStateError, createNotSupportedError, createUnknownError, mediaElementAudioSourceNodeConstructor, mediaStreamAudioSourceNodeConstructor, mediaStreamTrackAudioSourceNodeConstructor, nativeAudioContextConstructor);\nexport { audioContextConstructor as AudioContext };\nconst connectMultipleOutputs = createConnectMultipleOutputs(createIndexSizeError);\nconst disconnectMultipleOutputs = createDisconnectMultipleOutputs(createIndexSizeError);\nconst createNativeAudioWorkletNodeFaker = createNativeAudioWorkletNodeFakerFactory(connectMultipleOutputs, createIndexSizeError, createInvalidStateError, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, createNativeScriptProcessorNode, createNotSupportedError, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime);\nconst createNativeAudioWorkletNode = createNativeAudioWorkletNodeFactory(createInvalidStateError, createNativeAudioNode, createNativeAudioWorkletNodeFaker, createNotSupportedError, isNativeOfflineAudioContext);\nconst nativeAudioWorkletNodeConstructor = createNativeAudioWorkletNodeConstructor(window);\nconst createAudioWorkletNodeRenderer = createAudioWorkletNodeRendererFactory(connectMultipleOutputs, createNativeAudioBufferSourceNode, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, disconnectMultipleOutputs, nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor, renderNativeOfflineAudioContext);\n// The AudioWorkletNode constructor is only available in a SecureContext.\nconst audioWorkletNodeConstructor = (isSecureContext) ?\n    createAudioWorkletNodeConstructor(createAudioParam, createAudioWorkletNodeRenderer, createNativeAudioWorkletNode, gainNodeConstructor, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor, noneAudioDestinationNodeConstructor) :\n    undefined;\nexport { audioWorkletNodeConstructor as AudioWorkletNode };\nexport { biquadFilterNodeConstructor as BiquadFilterNode };\nexport { channelMergerNodeConstructor as ChannelMergerNode };\nexport { channelSplitterNodeConstructor as ChannelSplitterNode };\nexport { convolverNodeConstructor as ConvolverNode };\nexport { constantSourceNodeConstructor as ConstantSourceNode };\nexport { delayNodeConstructor as DelayNode };\nexport { dynamicsCompressorNodeConstructor as DynamicsCompressorNode };\nexport { gainNodeConstructor as GainNode };\nexport { iIRFilterNodeConstructor as IIRFilterNode };\nexport { mediaElementAudioSourceNodeConstructor as MediaElementAudioSourceNode };\nexport { mediaStreamAudioSourceNodeConstructor as MediaStreamAudioSourceNode };\nexport { mediaStreamTrackAudioSourceNodeConstructor as MediaStreamTrackAudioSourceNode };\nconst minimalAudioContextConstructor = createMinimalAudioContextConstructor(createInvalidStateError, createNotSupportedError, createUnknownError, minimalBaseAudioContextConstructor, nativeAudioContextConstructor);\nexport { minimalAudioContextConstructor as MinimalAudioContext };\nconst createNativeOfflineAudioContext = createCreateNativeOfflineAudioContext(createNotSupportedError, nativeOfflineAudioContextConstructor);\nconst startRendering = createStartRendering(cacheTestResult, renderNativeOfflineAudioContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, testAudioBufferCopyChannelMethodsSubarraySupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds, wrapAudioBufferCopyChannelMethodsSubarray);\nconst minimalOfflineAudioContextConstructor = createMinimalOfflineAudioContextConstructor(cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, minimalBaseAudioContextConstructor, startRendering);\nexport { minimalOfflineAudioContextConstructor as MinimalOfflineAudioContext };\nconst offlineAudioContextConstructor = createOfflineAudioContextConstructor(baseAudioContextConstructor, cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, startRendering);\nexport { offlineAudioContextConstructor as OfflineAudioContext };\nexport { oscillatorNodeConstructor as OscillatorNode };\nexport { pannerNodeConstructor as PannerNode };\nexport { periodicWaveConstructor as PeriodicWave };\nexport { stereoPannerNodeConstructor as StereoPannerNode };\nexport { waveShaperNodeConstructor as WaveShaperNode };\nexport const isAnyAudioNode = createIsAnyAudioNode(AUDIO_NODE_STORE, window);\nexport const isSupported = () => createIsSupportedPromise(cacheTestResult, createTestAudioContextCloseMethodSupport(nativeAudioContextConstructor), createTestAudioContextDecodeAudioDataMethodTypeErrorSupport(nativeOfflineAudioContextConstructor), createTestAudioContextOptionsSupport(nativeAudioContextConstructor), createTestAudioWorkletProcessorNoOutputsSupport(nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor), createTestChannelSplitterNodeChannelCountSupport(nativeOfflineAudioContextConstructor), createTestConstantSourceNodeAccurateSchedulingSupport(createNativeAudioNode, nativeOfflineAudioContextConstructor), createTestConvolverNodeBufferReassignabilitySupport(nativeOfflineAudioContextConstructor), createTestIsSecureContextSupport(window), createTestStereoPannerNodeDefaultValueSupport(nativeOfflineAudioContextConstructor), testTransferablesSupport);\n//# sourceMappingURL=/build/es2018/module.js.map","import { TEST_RESULTS } from '../globals';\nexport const createCacheTestResult = (ongoingTests) => {\n    return (tester, test) => {\n        const cachedTestResult = TEST_RESULTS.get(tester);\n        if (cachedTestResult !== undefined) {\n            return cachedTestResult;\n        }\n        const ongoingTest = ongoingTests.get(tester);\n        if (ongoingTest !== undefined) {\n            return ongoingTest;\n        }\n        const synchronousTestResult = test();\n        if (synchronousTestResult instanceof Promise) {\n            ongoingTests.set(tester, synchronousTestResult);\n            return synchronousTestResult\n                .then((finalTestResult) => {\n                ongoingTests.delete(tester);\n                TEST_RESULTS.set(tester, finalTestResult);\n                return finalTestResult;\n            });\n        }\n        TEST_RESULTS.set(tester, synchronousTestResult);\n        return synchronousTestResult;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/cache-test-result.js.map","export const createWindow = () => (typeof window === 'undefined') ? null : window;\n//# sourceMappingURL=/build/es2018/factories/window.js.map","export const createNativeOfflineAudioContextConstructor = (window) => {\n    if (window === null) {\n        return null;\n    }\n    if (window.hasOwnProperty('OfflineAudioContext')) {\n        return window.OfflineAudioContext;\n    }\n    return (window.hasOwnProperty('webkitOfflineAudioContext')) ? window.webkitOfflineAudioContext : null;\n};\n//# sourceMappingURL=/build/es2018/factories/native-offline-audio-context-constructor.js.map","export const createIsNativeOfflineAudioContext = (nativeOfflineAudioContextConstructor) => {\n    return (anyContext) => {\n        if (nativeOfflineAudioContextConstructor === null) {\n            throw new Error('The native OfflineAudioContext constructor is missing.');\n        }\n        return anyContext instanceof nativeOfflineAudioContextConstructor;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/is-native-offline-audio-context.js.map","import { BACKUP_NATIVE_CONTEXT_STORE } from '../globals';\nexport const createGetBackupNativeContext = (isNativeOfflineAudioContext, nativeAudioContextConstructor, nativeOfflineAudioContextConstructor) => {\n    return (nativeContext) => {\n        /*\n         * Bug #50: Only Edge does currently not allow to create AudioNodes on a closed context yet which is why there needs to be no\n         * backupNativeContext in that case.\n         */\n        if (nativeContext.state === 'closed'\n            && nativeAudioContextConstructor !== null\n            && nativeAudioContextConstructor.name !== 'webkitAudioContext') {\n            if (isNativeOfflineAudioContext(nativeContext)) {\n                const backupNativeContext = BACKUP_NATIVE_CONTEXT_STORE.get(nativeContext);\n                if (backupNativeContext !== undefined) {\n                    return backupNativeContext;\n                }\n                if (nativeOfflineAudioContextConstructor !== null) {\n                    // @todo Copy the attached AudioWorkletProcessors and other settings.\n                    const bckpNtveCntxt = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n                    BACKUP_NATIVE_CONTEXT_STORE.set(nativeContext, bckpNtveCntxt);\n                    return bckpNtveCntxt;\n                }\n            }\n            else {\n                const backupNativeContext = BACKUP_NATIVE_CONTEXT_STORE.get(nativeContext);\n                if (backupNativeContext !== undefined) {\n                    return backupNativeContext;\n                }\n                // @todo Copy the attached AudioWorkletProcessors and other settings.\n                const bckpNtveCntxt = new nativeAudioContextConstructor();\n                BACKUP_NATIVE_CONTEXT_STORE.set(nativeContext, bckpNtveCntxt);\n                return bckpNtveCntxt;\n            }\n        }\n        return null;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/get-backup-native-context.js.map","export const createNativeAudioNodeFactory = (getBackupNativeContext) => {\n    return (nativeContext, factoryFunction) => {\n        // Bug #50: Only Edge does currently not allow to create AudioNodes on a closed context yet.\n        const backupNativeContext = getBackupNativeContext(nativeContext);\n        if (backupNativeContext !== null) {\n            return factoryFunction(backupNativeContext);\n        }\n        return factoryFunction(nativeContext);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-audio-node-factory.js.map","import { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { testAnalyserNodeGetFloatTimeDomainDataMethodSupport } from '../helpers/test-analyser-node-get-float-time-domain-data-method-support';\nimport { wrapAnalyserNodeGetFloatTimeDomainDataMethod } from '../helpers/wrap-analyser-node-get-float-time-domain-data-method';\nexport const createNativeAnalyserNodeFactory = (cacheTestResult, createIndexSizeError, createNativeAudioNode) => {\n    return (nativeContext, options) => {\n        const nativeAnalyserNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createAnalyser());\n        // Bug #37: Firefox does not create an AnalyserNode with the default properties.\n        assignNativeAudioNodeOptions(nativeAnalyserNode, options);\n        // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.\n        if (!(options.maxDecibels > options.minDecibels)) {\n            throw createIndexSizeError();\n        }\n        assignNativeAudioNodeOption(nativeAnalyserNode, options, 'fftSize');\n        assignNativeAudioNodeOption(nativeAnalyserNode, options, 'maxDecibels');\n        assignNativeAudioNodeOption(nativeAnalyserNode, options, 'minDecibels');\n        assignNativeAudioNodeOption(nativeAnalyserNode, options, 'smoothingTimeConstant');\n        // Bug #36: Safari does not support getFloatTimeDomainData() yet.\n        if (!cacheTestResult(testAnalyserNodeGetFloatTimeDomainDataMethodSupport, () => testAnalyserNodeGetFloatTimeDomainDataMethodSupport(nativeAnalyserNode))) {\n            wrapAnalyserNodeGetFloatTimeDomainDataMethod(nativeAnalyserNode);\n        }\n        return nativeAnalyserNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-analyser-node-factory.js.map","import { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nexport const createAnalyserNodeRendererFactory = (createNativeAnalyserNode) => {\n    return () => {\n        const renderedNativeAnalyserNodes = new WeakMap();\n        const createAnalyserNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeAnalyserNode = getNativeAudioNode(proxy);\n            // If the initially used nativeAnalyserNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeAnalyserNodeIsOwnedByContext = isOwnedByContext(nativeAnalyserNode, nativeOfflineAudioContext);\n            if (!nativeAnalyserNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeAnalyserNode.channelCount,\n                    channelCountMode: nativeAnalyserNode.channelCountMode,\n                    channelInterpretation: nativeAnalyserNode.channelInterpretation,\n                    fftSize: nativeAnalyserNode.fftSize,\n                    maxDecibels: nativeAnalyserNode.maxDecibels,\n                    minDecibels: nativeAnalyserNode.minDecibels,\n                    smoothingTimeConstant: nativeAnalyserNode.smoothingTimeConstant\n                };\n                nativeAnalyserNode = createNativeAnalyserNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeAnalyserNodes.set(nativeOfflineAudioContext, nativeAnalyserNode);\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAnalyserNode);\n            return nativeAnalyserNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeAnalyserNode = renderedNativeAnalyserNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeAnalyserNode !== undefined) {\n                    return Promise.resolve(renderedNativeAnalyserNode);\n                }\n                return createAnalyserNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/analyser-node-renderer-factory.js.map","import { isNativeAudioNode } from '../guards/native-audio-node';\nexport const wrapAudioNodeDisconnectMethod = (nativeAudioNode) => {\n    const connections = new Map();\n    nativeAudioNode.connect = ((connect) => {\n        return (destination, output = 0, input = 0) => {\n            const returnValue = (isNativeAudioNode(destination))\n                ? connect(destination, output, input)\n                : connect(destination, output);\n            // Save the new connection only if the calls to connect above didn't throw an error.\n            const connectionsToDestination = connections.get(destination);\n            if (connectionsToDestination === undefined) {\n                connections.set(destination, [{ input, output }]);\n            }\n            else {\n                if (connectionsToDestination.every((connection) => (connection.input !== input || connection.output !== output))) {\n                    connectionsToDestination.push({ input, output });\n                }\n            }\n            return returnValue;\n        };\n    })(nativeAudioNode.connect.bind(nativeAudioNode));\n    nativeAudioNode.disconnect = ((disconnect) => {\n        return (destinationOrOutput, output, input) => {\n            disconnect.apply(nativeAudioNode);\n            if (destinationOrOutput === undefined) {\n                connections.clear();\n            }\n            else if (typeof destinationOrOutput === 'number') {\n                for (const [destination, connectionsToDestination] of connections) {\n                    const filteredConnections = connectionsToDestination\n                        .filter((connection) => (connection.output !== destinationOrOutput));\n                    if (filteredConnections.length === 0) {\n                        connections.delete(destination);\n                    }\n                    else {\n                        connections.set(destination, filteredConnections);\n                    }\n                }\n            }\n            else if (connections.has(destinationOrOutput)) {\n                if (output === undefined) {\n                    connections.delete(destinationOrOutput);\n                }\n                else {\n                    const connectionsToDestination = connections.get(destinationOrOutput);\n                    if (connectionsToDestination !== undefined) {\n                        const filteredConnections = connectionsToDestination\n                            .filter((connection) => (connection.output !== output && (connection.input !== input || input === undefined)));\n                        if (filteredConnections.length === 0) {\n                            connections.delete(destinationOrOutput);\n                        }\n                        else {\n                            connections.set(destinationOrOutput, filteredConnections);\n                        }\n                    }\n                }\n            }\n            for (const [destination, connectionsToDestination] of connections) {\n                connectionsToDestination\n                    .forEach((connection) => {\n                    if (isNativeAudioNode(destination)) {\n                        nativeAudioNode.connect(destination, connection.output, connection.input);\n                    }\n                    else {\n                        nativeAudioNode.connect(destination, connection.output);\n                    }\n                });\n            }\n        };\n    })(nativeAudioNode.disconnect);\n};\n//# sourceMappingURL=/build/es2018/helpers/wrap-audio-node-disconnect-method.js.map","import { isAudioNode } from '../guards/audio-node';\nimport { isDelayNode } from '../guards/delay-node';\nexport const createDetectCycles = (audioParamAudioNodeStore, createNotSupportedError, getAudioNodeConnections, getValueForKey) => {\n    return function detectCycles(source, destination) {\n        const audioNodeOfDestination = (isAudioNode(destination))\n            ? destination\n            : getValueForKey(audioParamAudioNodeStore, destination);\n        if (isDelayNode(audioNodeOfDestination)) {\n            return true;\n        }\n        if (source === audioNodeOfDestination) {\n            throw createNotSupportedError();\n        }\n        const { outputs } = getAudioNodeConnections(audioNodeOfDestination);\n        for (const outputConnection of outputs) {\n            if (detectCycles(source, outputConnection[0])) {\n                return true;\n            }\n        }\n        return false;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/detect-cycles.js.map","export const isDelayNode = (audioNode) => {\n    return 'delayTime' in audioNode;\n};\n//# sourceMappingURL=/build/es2018/guards/delay-node.js.map","export const createNoneAudioDestinationNodeConstructor = (audioNodeConstructor) => {\n    return class NoneAudioDestinationNode extends audioNodeConstructor {\n        constructor(context, internalState, nativeAudioNode, audioNodeRenderer) {\n            super(context, internalState, nativeAudioNode, audioNodeRenderer);\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/none-audio-destination-node-constructor.js.map","export const createConvertNumberToUnsignedLong = (unit32Array) => {\n    return (value) => {\n        unit32Array[0] = value;\n        return unit32Array[0];\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/convert-number-to-unsigned-long.js.map","export const createWrapAudioBufferCopyChannelMethods = (convertNumberToUnsignedLong, createIndexSizeError) => {\n    return (audioBuffer) => {\n        audioBuffer.copyFromChannel = (destination, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {\n            const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n            const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n            if (channelNumber >= audioBuffer.numberOfChannels) {\n                throw createIndexSizeError();\n            }\n            const audioBufferLength = audioBuffer.length;\n            const channelData = audioBuffer.getChannelData(channelNumber);\n            const destinationLength = destination.length;\n            for (let i = (bufferOffset < 0) ? -bufferOffset : 0; i + bufferOffset < audioBufferLength && i < destinationLength; i += 1) {\n                destination[i] = channelData[i + bufferOffset];\n            }\n        };\n        audioBuffer.copyToChannel = (source, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {\n            const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n            const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n            if (channelNumber >= audioBuffer.numberOfChannels) {\n                throw createIndexSizeError();\n            }\n            const audioBufferLength = audioBuffer.length;\n            const channelData = audioBuffer.getChannelData(channelNumber);\n            const sourceLength = source.length;\n            for (let i = (bufferOffset < 0) ? -bufferOffset : 0; i + bufferOffset < audioBufferLength && i < sourceLength; i += 1) {\n                channelData[i + bufferOffset] = source[i];\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/wrap-audio-buffer-copy-channel-methods.js.map","export const createWrapAudioBufferCopyChannelMethodsOutOfBounds = (convertNumberToUnsignedLong) => {\n    return (audioBuffer) => {\n        audioBuffer.copyFromChannel = ((copyFromChannel) => {\n            return (destination, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {\n                const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n                const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n                if (bufferOffset < audioBuffer.length) {\n                    return copyFromChannel.call(audioBuffer, destination, channelNumber, bufferOffset);\n                }\n            };\n        })(audioBuffer.copyFromChannel);\n        audioBuffer.copyToChannel = ((copyToChannel) => {\n            return (source, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {\n                const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n                const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n                if (bufferOffset < audioBuffer.length) {\n                    return copyToChannel.call(audioBuffer, source, channelNumber, bufferOffset);\n                }\n            };\n        })(audioBuffer.copyToChannel);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/wrap-audio-buffer-copy-channel-methods-out-of-bounds.js.map","export const createWrapAudioBufferCopyChannelMethodsSubarray = (convertNumberToUnsignedLong, createIndexSizeError) => {\n    return (audioBuffer) => {\n        audioBuffer.copyFromChannel = ((copyFromChannel) => {\n            return (destination, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {\n                const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n                const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n                if (channelNumber >= audioBuffer.numberOfChannels) {\n                    throw createIndexSizeError();\n                }\n                if (bufferOffset < audioBuffer.length && audioBuffer.length - bufferOffset < destination.length) {\n                    return copyFromChannel.call(audioBuffer, destination.subarray(0, audioBuffer.length - bufferOffset), channelNumber, bufferOffset);\n                }\n                return copyFromChannel.call(audioBuffer, destination, channelNumber, bufferOffset);\n            };\n        })(audioBuffer.copyFromChannel);\n        audioBuffer.copyToChannel = ((copyToChannel) => {\n            return (source, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {\n                const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n                const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n                if (channelNumber >= audioBuffer.numberOfChannels) {\n                    throw createIndexSizeError();\n                }\n                if (bufferOffset < audioBuffer.length && audioBuffer.length - bufferOffset < source.length) {\n                    return copyToChannel.call(audioBuffer, source.subarray(0, audioBuffer.length - bufferOffset), channelNumber, bufferOffset);\n                }\n                return copyToChannel.call(audioBuffer, source, channelNumber, bufferOffset);\n            };\n        })(audioBuffer.copyToChannel);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/wrap-audio-buffer-copy-channel-methods-subarray.js.map","// Bug #33: Edge & Safari expose an AudioBuffer but it can't be used as a constructor.\nexport const createTestAudioBufferConstructorSupport = (nativeAudioBufferConstructor) => {\n    return () => {\n        if (nativeAudioBufferConstructor === null) {\n            return false;\n        }\n        try {\n            new nativeAudioBufferConstructor({ length: 1, sampleRate: 44100 }); // tslint:disable-line:no-unused-expression\n        }\n        catch (_a) {\n            return false;\n        }\n        return true;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/test-audio-buffer-constructor-support.js.map","export const createTestAudioScheduledSourceNodeStartMethodNegativeParametersSupport = (createNativeAudioNode) => {\n    return (nativeContext) => {\n        const nativeAudioBufferSourceNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createOscillator());\n        try {\n            nativeAudioBufferSourceNode.start(-1);\n        }\n        catch (err) {\n            return (err instanceof RangeError);\n        }\n        return false;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/test-audio-scheduled-source-node-start-method-negative-parameters-support.js.map","export const createTestAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport = (createNativeAudioNode) => {\n    return (nativeContext) => {\n        const nativeAudioBuffer = nativeContext.createBuffer(1, 1, 44100);\n        const nativeAudioBufferSourceNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createBufferSource());\n        nativeAudioBufferSourceNode.buffer = nativeAudioBuffer;\n        nativeAudioBufferSourceNode.start();\n        nativeAudioBufferSourceNode.stop();\n        try {\n            nativeAudioBufferSourceNode.stop();\n            return true;\n        }\n        catch (_a) {\n            return false;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/test-audio-scheduled-source-node-stop-method-consecutive-calls-support.js.map","export const createTestAudioScheduledSourceNodeStopMethodNegativeParametersSupport = (createNativeAudioNode) => {\n    return (nativeContext) => {\n        const nativeAudioBufferSourceNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createOscillator());\n        try {\n            nativeAudioBufferSourceNode.stop(-1);\n        }\n        catch (err) {\n            return (err instanceof RangeError);\n        }\n        return false;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/test-audio-scheduled-source-node-stop-method-negative-parameters-support.js.map","import { interceptConnections } from '../helpers/intercept-connections';\nexport const createWrapAudioScheduledSourceNodeStopMethodConsecutiveCalls = (createNativeAudioNode) => {\n    return (nativeAudioScheduledSourceNode, nativeContext) => {\n        const nativeGainNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createGain());\n        nativeAudioScheduledSourceNode.connect(nativeGainNode);\n        const disconnectGainNode = ((disconnect) => {\n            return () => {\n                // @todo TypeScript cannot infer the overloaded signature with 1 argument yet.\n                disconnect.call(nativeAudioScheduledSourceNode, nativeGainNode);\n                nativeAudioScheduledSourceNode.removeEventListener('ended', disconnectGainNode);\n            };\n        })(nativeAudioScheduledSourceNode.disconnect);\n        nativeAudioScheduledSourceNode.addEventListener('ended', disconnectGainNode);\n        interceptConnections(nativeAudioScheduledSourceNode, nativeGainNode);\n        nativeAudioScheduledSourceNode.stop = ((stop) => {\n            let isStopped = false;\n            return (when = 0) => {\n                if (isStopped) {\n                    try {\n                        stop.call(nativeAudioScheduledSourceNode, when);\n                    }\n                    catch (_a) {\n                        nativeGainNode.gain.setValueAtTime(0, when);\n                    }\n                }\n                else {\n                    stop.call(nativeAudioScheduledSourceNode, when);\n                    isStopped = true;\n                }\n            };\n        })(nativeAudioScheduledSourceNode.stop);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/wrap-audio-scheduled-source-node-stop-method-consecutive-calls.js.map","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { wrapAudioBufferSourceNodeStartMethodConsecutiveCalls } from '../helpers/wrap-audio-buffer-source-node-start-method-consecutive-calls';\nimport { wrapAudioBufferSourceNodeStartMethodDurationParameter } from '../helpers/wrap-audio-buffer-source-node-start-method-duration-parameter';\nimport { wrapAudioScheduledSourceNodeStartMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters';\nimport { wrapAudioScheduledSourceNodeStopMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters';\nexport const createNativeAudioBufferSourceNodeFactory = (cacheTestResult, createNativeAudioNode, testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport, testAudioBufferSourceNodeStartMethodDurationParameterSupport, testAudioBufferSourceNodeStartMethodOffsetClampingSupport, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioBufferSourceNodeStartMethodOffsetClampling, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls) => {\n    return (nativeContext, options = {}) => {\n        const nativeAudioBufferSourceNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createBufferSource());\n        assignNativeAudioNodeOptions(nativeAudioBufferSourceNode, options);\n        assignNativeAudioNodeAudioParamValue(nativeAudioBufferSourceNode, options, 'playbackRate');\n        // Bug #71: Edge does not allow to set the buffer to null.\n        assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'buffer');\n        // Bug #149: Safari does not yet support the detune AudioParam.\n        assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'loop');\n        assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'loopEnd');\n        assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'loopStart');\n        // Bug #69: Safari does allow calls to start() of an already scheduled AudioBufferSourceNode.\n        if (!cacheTestResult(testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport, () => testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport(nativeContext))) {\n            wrapAudioBufferSourceNodeStartMethodConsecutiveCalls(nativeAudioBufferSourceNode);\n        }\n        // Bug #92: Edge does not respect the duration parameter yet.\n        if (!cacheTestResult(testAudioBufferSourceNodeStartMethodDurationParameterSupport, testAudioBufferSourceNodeStartMethodDurationParameterSupport)) {\n            wrapAudioBufferSourceNodeStartMethodDurationParameter(nativeAudioBufferSourceNode, nativeContext);\n        }\n        // Bug #154 & #155: Safari does not handle offsets which are equal to or greater than the duration of the buffer.\n        if (!cacheTestResult(testAudioBufferSourceNodeStartMethodOffsetClampingSupport, () => testAudioBufferSourceNodeStartMethodOffsetClampingSupport(nativeContext))) {\n            wrapAudioBufferSourceNodeStartMethodOffsetClampling(nativeAudioBufferSourceNode);\n        }\n        // Bug #44: Only Chrome, Firefox & Opera throw a RangeError yet.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(nativeContext))) {\n            wrapAudioScheduledSourceNodeStartMethodNegativeParameters(nativeAudioBufferSourceNode);\n        }\n        // Bug #19: Safari does not ignore calls to stop() of an already stopped AudioBufferSourceNode.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, () => testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport(nativeContext))) {\n            wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls(nativeAudioBufferSourceNode, nativeContext);\n        }\n        // Bug #44: Only Firefox does throw a RangeError yet.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(nativeContext))) {\n            wrapAudioScheduledSourceNodeStopMethodNegativeParameters(nativeAudioBufferSourceNode);\n        }\n        return nativeAudioBufferSourceNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-audio-buffer-source-node-factory.js.map","export const wrapAudioBufferSourceNodeStartMethodDurationParameter = (nativeAudioScheduledSourceNode, nativeContext) => {\n    let endTime = Number.POSITIVE_INFINITY;\n    let stopTime = Number.POSITIVE_INFINITY;\n    nativeAudioScheduledSourceNode.start = ((start, stop) => {\n        return (when = 0, offset = 0, duration = Number.POSITIVE_INFINITY) => {\n            start.call(nativeAudioScheduledSourceNode, when, offset);\n            if (duration >= 0 && duration < Number.POSITIVE_INFINITY) {\n                const actualStartTime = Math.max(when, nativeContext.currentTime);\n                // @todo The playbackRate could of course also have been automated and is not always fixed.\n                const durationInBufferTime = (duration / nativeAudioScheduledSourceNode.playbackRate.value);\n                endTime = actualStartTime + durationInBufferTime;\n                stop.call(nativeAudioScheduledSourceNode, Math.min(endTime, stopTime));\n            }\n        };\n    })(nativeAudioScheduledSourceNode.start, nativeAudioScheduledSourceNode.stop);\n    nativeAudioScheduledSourceNode.stop = ((stop) => {\n        return (when = 0) => {\n            stopTime = Math.max(when, nativeContext.currentTime);\n            stop.call(nativeAudioScheduledSourceNode, Math.min(endTime, stopTime));\n        };\n    })(nativeAudioScheduledSourceNode.stop);\n};\n//# sourceMappingURL=/build/es2018/helpers/wrap-audio-buffer-source-node-start-method-duration-parameter.js.map","export const createTestAudioBufferSourceNodeStartMethodConsecutiveCallsSupport = (createNativeAudioNode) => {\n    return (nativeContext) => {\n        const nativeAudioBufferSourceNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createBufferSource());\n        nativeAudioBufferSourceNode.start();\n        try {\n            nativeAudioBufferSourceNode.start();\n        }\n        catch (_a) {\n            return true;\n        }\n        return false;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/test-audio-buffer-source-node-start-method-consecutive-calls-support.js.map","// Bug #92: Edge does not respect the duration parameter yet.\nexport const createTestAudioBufferSourceNodeStartMethodDurationParameterSupport = (nativeOfflineAudioContextConstructor) => {\n    return () => {\n        if (nativeOfflineAudioContextConstructor === null) {\n            return Promise.resolve(false);\n        }\n        const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n        const audioBuffer = offlineAudioContext.createBuffer(1, 1, offlineAudioContext.sampleRate);\n        const audioBufferSourceNode = offlineAudioContext.createBufferSource();\n        audioBuffer.getChannelData(0)[0] = 1;\n        audioBufferSourceNode.buffer = audioBuffer;\n        audioBufferSourceNode.start(0, 0, 0);\n        audioBufferSourceNode.connect(offlineAudioContext.destination);\n        // Bug #21: Safari does not support promises yet.\n        return new Promise((resolve) => {\n            offlineAudioContext.oncomplete = ({ renderedBuffer }) => {\n                // Bug #5: Safari does not support copyFromChannel().\n                resolve(renderedBuffer.getChannelData(0)[0] === 0);\n            };\n            offlineAudioContext.startRendering();\n        });\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/test-audio-buffer-source-node-start-method-duration-parameter-support.js.map","export const createTestAudioBufferSourceNodeStartMethodOffsetClampingSupport = (createNativeAudioNode) => {\n    return (nativeContext) => {\n        const nativeAudioBufferSourceNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createBufferSource());\n        const nativeAudioBuffer = nativeContext.createBuffer(1, 1, 44100);\n        nativeAudioBufferSourceNode.buffer = nativeAudioBuffer;\n        try {\n            nativeAudioBufferSourceNode.start(0, 1);\n        }\n        catch (_a) {\n            return false;\n        }\n        return true;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/test-audio-buffer-source-node-start-method-offset-clamping-support.js.map","export const wrapAudioBufferSourceNodeStartMethodOffsetClamping = (nativeAudioBufferSourceNode) => {\n    nativeAudioBufferSourceNode.start = ((start) => {\n        return (when = 0, offset = 0, duration) => {\n            const buffer = nativeAudioBufferSourceNode.buffer;\n            // Bug #154: Safari does not clamp the offset if it is equal to or greater than the duration of the buffer.\n            const clampedOffset = (buffer === null) ? offset : Math.min(buffer.duration, offset);\n            // Bug #155: Safari does not handle the offset correctly if it would cause the buffer to be not be played at all.\n            if (buffer !== null && clampedOffset > buffer.duration - (0.5 / nativeAudioBufferSourceNode.context.sampleRate)) {\n                start.call(nativeAudioBufferSourceNode, when, 0, 0);\n            }\n            else {\n                start.call(nativeAudioBufferSourceNode, when, clampedOffset, duration);\n            }\n        };\n    })(nativeAudioBufferSourceNode.start);\n};\n//# sourceMappingURL=/build/es2018/helpers/wrap-audio-buffer-source-node-start-method-offset-clamping.js.map","import { connectAudioParam } from '../helpers/connect-audio-param';\nimport { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { renderAutomation } from '../helpers/render-automation';\nimport { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nexport const createAudioBufferSourceNodeRendererFactory = (createNativeAudioBufferSourceNode) => {\n    return () => {\n        const renderedNativeAudioBufferSourceNodes = new WeakMap();\n        let start = null;\n        let stop = null;\n        const createAudioBufferSourceNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeAudioBufferSourceNode = getNativeAudioNode(proxy);\n            /*\n             * If the initially used nativeAudioBufferSourceNode was not constructed on the same OfflineAudioContext it needs to be created\n             * again.\n             */\n            const nativeAudioBufferSourceNodeIsOwnedByContext = isOwnedByContext(nativeAudioBufferSourceNode, nativeOfflineAudioContext);\n            if (!nativeAudioBufferSourceNodeIsOwnedByContext) {\n                const options = {\n                    buffer: nativeAudioBufferSourceNode.buffer,\n                    channelCount: nativeAudioBufferSourceNode.channelCount,\n                    channelCountMode: nativeAudioBufferSourceNode.channelCountMode,\n                    channelInterpretation: nativeAudioBufferSourceNode.channelInterpretation,\n                    // Bug #149: Safari does not yet support the detune AudioParam.\n                    loop: nativeAudioBufferSourceNode.loop,\n                    loopEnd: nativeAudioBufferSourceNode.loopEnd,\n                    loopStart: nativeAudioBufferSourceNode.loopStart,\n                    playbackRate: nativeAudioBufferSourceNode.playbackRate.value\n                };\n                nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext, options);\n                if (start !== null) {\n                    nativeAudioBufferSourceNode.start(...start);\n                }\n                if (stop !== null) {\n                    nativeAudioBufferSourceNode.stop(stop);\n                }\n            }\n            renderedNativeAudioBufferSourceNodes.set(nativeOfflineAudioContext, nativeAudioBufferSourceNode);\n            if (!nativeAudioBufferSourceNodeIsOwnedByContext) {\n                // Bug #149: Safari does not yet support the detune AudioParam.\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.playbackRate, nativeAudioBufferSourceNode.playbackRate);\n            }\n            else {\n                // Bug #149: Safari does not yet support the detune AudioParam.\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.playbackRate);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioBufferSourceNode);\n            return nativeAudioBufferSourceNode;\n        };\n        return {\n            set start(value) {\n                start = value;\n            },\n            set stop(value) {\n                stop = value;\n            },\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeAudioBufferSourceNode = renderedNativeAudioBufferSourceNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeAudioBufferSourceNode !== undefined) {\n                    return Promise.resolve(renderedNativeAudioBufferSourceNode);\n                }\n                return createAudioBufferSourceNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-buffer-source-node-renderer-factory.js.map","export const createAudioParamRenderer = (automationEventList) => {\n    return {\n        replay(audioParam) {\n            for (const automationEvent of automationEventList) {\n                if (automationEvent.type === 'exponentialRampToValue') {\n                    const { endTime, value } = automationEvent;\n                    audioParam.exponentialRampToValueAtTime(value, endTime);\n                }\n                else if (automationEvent.type === 'linearRampToValue') {\n                    const { endTime, value } = automationEvent;\n                    audioParam.linearRampToValueAtTime(value, endTime);\n                }\n                else if (automationEvent.type === 'setTarget') {\n                    const { startTime, target, timeConstant } = automationEvent;\n                    audioParam.setTargetAtTime(target, startTime, timeConstant);\n                }\n                else if (automationEvent.type === 'setValue') {\n                    const { startTime, value } = automationEvent;\n                    audioParam.setValueAtTime(value, startTime);\n                }\n                else if (automationEvent.type === 'setValueCurve') {\n                    const { duration, startTime, values } = automationEvent;\n                    audioParam.setValueCurveAtTime(values, startTime, duration);\n                }\n                else {\n                    throw new Error(\"Can't apply an unknown automation.\");\n                }\n            }\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-param-renderer.js.map","export const MOST_NEGATIVE_SINGLE_FLOAT = -3.4028234663852886e38;\nexport const MOST_POSITIVE_SINGLE_FLOAT = -MOST_NEGATIVE_SINGLE_FLOAT;\n//# sourceMappingURL=/build/es2018/constants.js.map","import { AUDIO_GRAPHS } from '../globals';\nimport { getNativeContext } from '../helpers/get-native-context';\nexport const createAudioDestinationNodeConstructor = (audioNodeConstructor, createAudioDestinationNodeRenderer, createIndexSizeError, createInvalidStateError, createNativeAudioDestinationNode, isNativeOfflineAudioContext) => {\n    return class AudioDestinationNode extends audioNodeConstructor {\n        constructor(context, channelCount) {\n            const nativeContext = getNativeContext(context);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const nativeAudioDestinationNode = createNativeAudioDestinationNode(nativeContext, channelCount, isOffline);\n            const audioDestinationNodeRenderer = ((isOffline) ? createAudioDestinationNodeRenderer() : null);\n            const audioGraph = { audioWorkletGlobalScope: null, nodes: new WeakMap(), params: new WeakMap() };\n            AUDIO_GRAPHS.set(context, audioGraph);\n            super(context, 'passive', nativeAudioDestinationNode, audioDestinationNodeRenderer);\n            this._isNodeOfNativeOfflineAudioContext = isOffline;\n            this._nativeAudioDestinationNode = nativeAudioDestinationNode;\n        }\n        get channelCount() {\n            return this._nativeAudioDestinationNode.channelCount;\n        }\n        set channelCount(value) {\n            // Bug #52: Chrome, Edge, Opera & Safari do not throw an exception at all.\n            // Bug #54: Firefox does throw an IndexSizeError.\n            if (this._isNodeOfNativeOfflineAudioContext) {\n                throw createInvalidStateError();\n            }\n            // Bug #47: The AudioDestinationNode in Edge and Safari do not initialize the maxChannelCount property correctly.\n            if (value > this._nativeAudioDestinationNode.maxChannelCount) {\n                throw createIndexSizeError();\n            }\n            this._nativeAudioDestinationNode.channelCount = value;\n        }\n        get channelCountMode() {\n            return this._nativeAudioDestinationNode.channelCountMode;\n        }\n        set channelCountMode(value) {\n            // Bug #53: No browser does throw an exception yet.\n            if (this._isNodeOfNativeOfflineAudioContext) {\n                throw createInvalidStateError();\n            }\n            this._nativeAudioDestinationNode.channelCountMode = value;\n        }\n        get maxChannelCount() {\n            return this._nativeAudioDestinationNode.maxChannelCount;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-destination-node-constructor.js.map","import { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nexport const createAudioDestinationNodeRenderer = () => {\n    let nativeAudioDestinationNodePromise = null;\n    const createAudioDestinationNode = async (proxy, nativeOfflineAudioContext) => {\n        const nativeAudioDestinationNode = nativeOfflineAudioContext.destination;\n        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioDestinationNode);\n        return nativeAudioDestinationNode;\n    };\n    return {\n        render(proxy, nativeOfflineAudioContext) {\n            if (nativeAudioDestinationNodePromise === null) {\n                nativeAudioDestinationNodePromise = createAudioDestinationNode(proxy, nativeOfflineAudioContext);\n            }\n            return nativeAudioDestinationNodePromise;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-destination-node-renderer-factory.js.map","export const createNativeAudioDestinationNode = (nativeContext, channelCount, isNodeOfNativeOfflineAudioContext) => {\n    const nativeAudioDestinationNode = nativeContext.destination;\n    // Bug #132: Edge & Safari do not have the correct channelCount.\n    if (nativeAudioDestinationNode.channelCount !== channelCount) {\n        nativeAudioDestinationNode.channelCount = channelCount;\n    }\n    // Bug #83: Edge & Safari do not have the correct channelCountMode.\n    if (isNodeOfNativeOfflineAudioContext && nativeAudioDestinationNode.channelCountMode !== 'explicit') {\n        nativeAudioDestinationNode.channelCountMode = 'explicit';\n    }\n    // Bug #47: The AudioDestinationNode in Edge and Safari does not initialize the maxChannelCount property correctly.\n    if (nativeAudioDestinationNode.maxChannelCount === 0) {\n        Object.defineProperty(nativeAudioDestinationNode, 'maxChannelCount', {\n            get: () => nativeAudioDestinationNode.channelCount\n        });\n    }\n    return nativeAudioDestinationNode;\n};\n//# sourceMappingURL=/build/es2018/factories/native-audio-destination-node.js.map","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeBiquadFilterNodeFactory = (createNativeAudioNode) => {\n    return (nativeContext, options) => {\n        const nativeBiquadFilterNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createBiquadFilter());\n        assignNativeAudioNodeOptions(nativeBiquadFilterNode, options);\n        assignNativeAudioNodeAudioParamValue(nativeBiquadFilterNode, options, 'Q');\n        assignNativeAudioNodeAudioParamValue(nativeBiquadFilterNode, options, 'detune');\n        assignNativeAudioNodeAudioParamValue(nativeBiquadFilterNode, options, 'frequency');\n        assignNativeAudioNodeAudioParamValue(nativeBiquadFilterNode, options, 'gain');\n        assignNativeAudioNodeOption(nativeBiquadFilterNode, options, 'type');\n        return nativeBiquadFilterNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-biquad-filter-node-factory.js.map","import { connectAudioParam } from '../helpers/connect-audio-param';\nimport { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { renderAutomation } from '../helpers/render-automation';\nimport { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nexport const createBiquadFilterNodeRendererFactory = (createNativeBiquadFilterNode) => {\n    return () => {\n        const renderedNativeBiquadFilterNodes = new WeakMap();\n        const createBiquadFilterNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeBiquadFilterNode = getNativeAudioNode(proxy);\n            /*\n             * If the initially used nativeBiquadFilterNode was not constructed on the same OfflineAudioContext it needs to be created\n             * again.\n             */\n            const nativeBiquadFilterNodeIsOwnedByContext = isOwnedByContext(nativeBiquadFilterNode, nativeOfflineAudioContext);\n            if (!nativeBiquadFilterNodeIsOwnedByContext) {\n                const options = {\n                    Q: nativeBiquadFilterNode.Q.value,\n                    channelCount: nativeBiquadFilterNode.channelCount,\n                    channelCountMode: nativeBiquadFilterNode.channelCountMode,\n                    channelInterpretation: nativeBiquadFilterNode.channelInterpretation,\n                    detune: nativeBiquadFilterNode.detune.value,\n                    frequency: nativeBiquadFilterNode.frequency.value,\n                    gain: nativeBiquadFilterNode.gain.value,\n                    type: nativeBiquadFilterNode.type\n                };\n                nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeBiquadFilterNodes.set(nativeOfflineAudioContext, nativeBiquadFilterNode);\n            if (!nativeBiquadFilterNodeIsOwnedByContext) {\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q);\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune);\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency);\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain);\n            }\n            else {\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.Q);\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.detune);\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.frequency);\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.gain);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeBiquadFilterNode);\n            return nativeBiquadFilterNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeBiquadFilterNode = renderedNativeBiquadFilterNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeBiquadFilterNode !== undefined) {\n                    return Promise.resolve(renderedNativeBiquadFilterNode);\n                }\n                return createBiquadFilterNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/biquad-filter-node-renderer-factory.js.map","export const createWrapChannelMergerNode = (createInvalidStateError, createNativeAudioNode) => {\n    return (nativeContext, channelMergerNode) => {\n        const audioBufferSourceNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createBufferSource());\n        channelMergerNode.channelCount = 1;\n        channelMergerNode.channelCountMode = 'explicit';\n        // Bug #20: Safari requires a connection of any kind to treat the input signal correctly.\n        const length = channelMergerNode.numberOfInputs;\n        for (let i = 0; i < length; i += 1) {\n            audioBufferSourceNode.connect(channelMergerNode, 0, i);\n        }\n        Object.defineProperty(channelMergerNode, 'channelCount', {\n            get: () => 1,\n            set: () => {\n                throw createInvalidStateError();\n            }\n        });\n        Object.defineProperty(channelMergerNode, 'channelCountMode', {\n            get: () => 'explicit',\n            set: () => {\n                throw createInvalidStateError();\n            }\n        });\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/wrap-channel-merger-node.js.map","import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeChannelMergerNodeFactory = (createNativeAudioNode, wrapChannelMergerNode) => {\n    return (nativeContext, options) => {\n        const nativeChannelMergerNode = createNativeAudioNode(nativeContext, (ntvCntxt) => {\n            return ntvCntxt.createChannelMerger(options.numberOfInputs);\n        });\n        assignNativeAudioNodeOptions(nativeChannelMergerNode, options);\n        // Bug #15: Safari does not return the default properties.\n        if (nativeChannelMergerNode.channelCount !== 1 &&\n            nativeChannelMergerNode.channelCountMode !== 'explicit') {\n            wrapChannelMergerNode(nativeContext, nativeChannelMergerNode);\n        }\n        // Bug #16: Firefox does not throw an error when setting a different channelCount or channelCountMode.\n        try {\n            nativeChannelMergerNode.channelCount = (options.numberOfInputs === undefined) ? 6 : options.numberOfInputs;\n            wrapChannelMergerNode(nativeContext, nativeChannelMergerNode);\n        }\n        catch ( /* Ignore errors. */_a) { /* Ignore errors. */ } // tslint:disable-line:no-empty\n        return nativeChannelMergerNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-channel-merger-node-factory.js.map","import { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nexport const createChannelMergerNodeRendererFactory = (createNativeChannelMergerNode) => {\n    return () => {\n        const renderedNativeAudioNodes = new WeakMap();\n        const createAudioNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeAudioNode = getNativeAudioNode(proxy);\n            // If the initially used nativeAudioNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeAudioNodeIsOwnedByContext = isOwnedByContext(nativeAudioNode, nativeOfflineAudioContext);\n            if (!nativeAudioNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeAudioNode.channelCount,\n                    channelCountMode: nativeAudioNode.channelCountMode,\n                    channelInterpretation: nativeAudioNode.channelInterpretation,\n                    numberOfInputs: nativeAudioNode.numberOfInputs\n                };\n                nativeAudioNode = createNativeChannelMergerNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioNode);\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioNode);\n            return nativeAudioNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeAudioNode !== undefined) {\n                    return Promise.resolve(renderedNativeAudioNode);\n                }\n                return createAudioNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/channel-merger-node-renderer-factory.js.map","import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { wrapChannelSplitterNode } from '../helpers/wrap-channel-splitter-node';\nexport const createNativeChannelSplitterNodeFactory = (createNativeAudioNode) => {\n    return (nativeContext, options) => {\n        const nativeChannelSplitterNode = createNativeAudioNode(nativeContext, (ntvCntxt) => {\n            return ntvCntxt.createChannelSplitter(options.numberOfOutputs);\n        });\n        // Bug #96: Safari does not have the correct channelCount.\n        // Bug #29: Edge & Safari do not have the correct channelCountMode.\n        // Bug #31: Edge & Safari do not have the correct channelInterpretation.\n        assignNativeAudioNodeOptions(nativeChannelSplitterNode, options);\n        // Bug #29, #30, #31, #32, #96 & #97: Only Chrome, Firefox & Opera partially support the spec yet.\n        wrapChannelSplitterNode(nativeChannelSplitterNode);\n        return nativeChannelSplitterNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-channel-splitter-node-factory.js.map","import { createInvalidStateError } from '../factories/invalid-state-error';\nexport const wrapChannelSplitterNode = (channelSplitterNode) => {\n    const channelCount = channelSplitterNode.numberOfOutputs;\n    // Bug #97: Safari does not throw an error when attempting to change the channelCount to something other than its initial value.\n    Object.defineProperty(channelSplitterNode, 'channelCount', {\n        get: () => channelCount,\n        set: (value) => {\n            if (value !== channelCount) {\n                throw createInvalidStateError();\n            }\n        }\n    });\n    /*\n     * Bug #30: Only Chrome, Firefox & Opera throw an error when attempting to change the channelCountMode to something other than\n     * explicit.\n     */\n    Object.defineProperty(channelSplitterNode, 'channelCountMode', {\n        get: () => 'explicit',\n        set: (value) => {\n            if (value !== 'explicit') {\n                throw createInvalidStateError();\n            }\n        }\n    });\n    /*\n     * Bug #32: Only Chrome, Firefox & Opera throws an error when attempting to change the channelInterpretation to something other than\n     * discrete.\n     */\n    Object.defineProperty(channelSplitterNode, 'channelInterpretation', {\n        get: () => 'discrete',\n        set: (value) => {\n            if (value !== 'discrete') {\n                throw createInvalidStateError();\n            }\n        }\n    });\n};\n//# sourceMappingURL=/build/es2018/helpers/wrap-channel-splitter-node.js.map","import { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nexport const createChannelSplitterNodeRendererFactory = (createNativeChannelSplitterNode) => {\n    return () => {\n        const renderedNativeAudioNodes = new WeakMap();\n        const createAudioNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeAudioNode = getNativeAudioNode(proxy);\n            // If the initially used nativeAudioNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeAudioNodeIsOwnedByContext = isOwnedByContext(nativeAudioNode, nativeOfflineAudioContext);\n            if (!nativeAudioNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeAudioNode.channelCount,\n                    channelCountMode: nativeAudioNode.channelCountMode,\n                    channelInterpretation: nativeAudioNode.channelInterpretation,\n                    numberOfOutputs: nativeAudioNode.numberOfOutputs\n                };\n                nativeAudioNode = createNativeChannelSplitterNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioNode);\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioNode);\n            return nativeAudioNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeAudioNode !== undefined) {\n                    return Promise.resolve(renderedNativeAudioNode);\n                }\n                return createAudioNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/channel-splitter-node-renderer-factory.js.map","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeGainNodeFactory = (createNativeAudioNode) => {\n    return (nativeContext, options) => {\n        const nativeGainNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createGain());\n        assignNativeAudioNodeOptions(nativeGainNode, options);\n        assignNativeAudioNodeAudioParamValue(nativeGainNode, options, 'gain');\n        return nativeGainNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-gain-node-factory.js.map","import { interceptConnections } from '../helpers/intercept-connections';\nexport const createNativeConstantSourceNodeFakerFactory = (createNativeAudioBufferSourceNode, createNativeGainNode) => {\n    return (nativeContext, { offset, ...audioNodeOptions }) => {\n        const audioBufferSourceNode = createNativeAudioBufferSourceNode(nativeContext);\n        /*\n         * @todo Edge will throw a NotSupportedError when calling createBuffer() on a closed context. That's why the audioBuffer is created\n         * after the audioBufferSourceNode in this case. If the context is closed createNativeAudioBufferSourceNode() will throw the\n         * expected error and createBuffer() never gets called.\n         */\n        const audioBuffer = nativeContext.createBuffer(1, 2, nativeContext.sampleRate);\n        const gainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, gain: offset });\n        // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n        const channelData = audioBuffer.getChannelData(0);\n        // Bug #95: Safari does not play or loop one sample buffers.\n        channelData[0] = 1;\n        channelData[1] = 1;\n        audioBufferSourceNode.buffer = audioBuffer;\n        audioBufferSourceNode.loop = true;\n        audioBufferSourceNode.connect(gainNode);\n        const nativeConstantSourceNodeFaker = {\n            get bufferSize() {\n                return undefined;\n            },\n            get channelCount() {\n                return gainNode.channelCount;\n            },\n            set channelCount(value) {\n                gainNode.channelCount = value;\n            },\n            get channelCountMode() {\n                return gainNode.channelCountMode;\n            },\n            set channelCountMode(value) {\n                gainNode.channelCountMode = value;\n            },\n            get channelInterpretation() {\n                return gainNode.channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                gainNode.channelInterpretation = value;\n            },\n            get context() {\n                return gainNode.context;\n            },\n            get inputs() {\n                return undefined;\n            },\n            get numberOfInputs() {\n                return audioBufferSourceNode.numberOfInputs;\n            },\n            get numberOfOutputs() {\n                return gainNode.numberOfOutputs;\n            },\n            get offset() {\n                return gainNode.gain;\n            },\n            get onended() {\n                return audioBufferSourceNode.onended;\n            },\n            set onended(value) {\n                audioBufferSourceNode.onended = value;\n            },\n            addEventListener(...args) {\n                return audioBufferSourceNode.addEventListener(args[0], args[1], args[2]);\n            },\n            dispatchEvent(...args) {\n                return audioBufferSourceNode.dispatchEvent(args[0]);\n            },\n            removeEventListener(...args) {\n                return audioBufferSourceNode.removeEventListener(args[0], args[1], args[2]);\n            },\n            start(when = 0) {\n                audioBufferSourceNode.start.call(audioBufferSourceNode, when);\n            },\n            stop(when = 0) {\n                audioBufferSourceNode.stop.call(audioBufferSourceNode, when);\n            }\n        };\n        return interceptConnections(nativeConstantSourceNodeFaker, gainNode);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-constant-source-node-faker-factory.js.map","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { wrapAudioScheduledSourceNodeStartMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters';\nimport { wrapAudioScheduledSourceNodeStopMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters';\nexport const createNativeConstantSourceNodeFactory = (cacheTestResult, createNativeAudioNode, createNativeConstantSourceNodeFaker, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport) => {\n    return (nativeContext, options) => {\n        // Bug #62: Edge & Safari do not support ConstantSourceNodes.\n        if (nativeContext.createConstantSource === undefined) {\n            return createNativeConstantSourceNodeFaker(nativeContext, options);\n        }\n        const nativeConstantSourceNode = createNativeAudioNode(nativeContext, (ntvCntxt) => {\n            return ntvCntxt.createConstantSource();\n        });\n        assignNativeAudioNodeOptions(nativeConstantSourceNode, options);\n        assignNativeAudioNodeAudioParamValue(nativeConstantSourceNode, options, 'offset');\n        // Bug #44: Only Chrome, Firefox & Opera throw a RangeError yet.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(nativeContext))) {\n            wrapAudioScheduledSourceNodeStartMethodNegativeParameters(nativeConstantSourceNode);\n        }\n        // Bug #44: Only Firefox does throw a RangeError yet.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(nativeContext))) {\n            wrapAudioScheduledSourceNodeStopMethodNegativeParameters(nativeConstantSourceNode);\n        }\n        return nativeConstantSourceNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-constant-source-node-factory.js.map","import { connectAudioParam } from '../helpers/connect-audio-param';\nimport { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { renderAutomation } from '../helpers/render-automation';\nimport { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nexport const createConstantSourceNodeRendererFactory = (createNativeConstantSourceNode) => {\n    return () => {\n        const renderedNativeConstantSourceNodes = new WeakMap();\n        let start = null;\n        let stop = null;\n        const createConstantSourceNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeConstantSourceNode = getNativeAudioNode(proxy);\n            /*\n             * If the initially used nativeConstantSourceNode was not constructed on the same OfflineAudioContext it needs to be created\n             * again.\n             */\n            const nativeConstantSourceNodeIsOwnedByContext = isOwnedByContext(nativeConstantSourceNode, nativeOfflineAudioContext);\n            if (!nativeConstantSourceNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeConstantSourceNode.channelCount,\n                    channelCountMode: nativeConstantSourceNode.channelCountMode,\n                    channelInterpretation: nativeConstantSourceNode.channelInterpretation,\n                    offset: nativeConstantSourceNode.offset.value\n                };\n                nativeConstantSourceNode = createNativeConstantSourceNode(nativeOfflineAudioContext, options);\n                if (start !== null) {\n                    nativeConstantSourceNode.start(start);\n                }\n                if (stop !== null) {\n                    nativeConstantSourceNode.stop(stop);\n                }\n            }\n            renderedNativeConstantSourceNodes.set(nativeOfflineAudioContext, nativeConstantSourceNode);\n            if (!nativeConstantSourceNodeIsOwnedByContext) {\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset);\n            }\n            else {\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.offset);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConstantSourceNode);\n            return nativeConstantSourceNode;\n        };\n        return {\n            set start(value) {\n                start = value;\n            },\n            set stop(value) {\n                stop = value;\n            },\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeConstantSourceNode = renderedNativeConstantSourceNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeConstantSourceNode !== undefined) {\n                    return Promise.resolve(renderedNativeConstantSourceNode);\n                }\n                return createConstantSourceNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/constant-source-node-renderer-factory.js.map","import { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeConvolverNodeFactory = (createNativeAudioNode, createNotSupportedError) => {\n    return (nativeContext, options) => {\n        const nativeConvolverNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createConvolver());\n        assignNativeAudioNodeOptions(nativeConvolverNode, options);\n        // The normalize property needs to be set before setting the buffer.\n        if (options.disableNormalization === nativeConvolverNode.normalize) {\n            nativeConvolverNode.normalize = !options.disableNormalization;\n        }\n        assignNativeAudioNodeOption(nativeConvolverNode, options, 'buffer');\n        // Bug #113: Edge & Safari allow to change the channelCount\n        if (options.channelCount !== 2) {\n            throw createNotSupportedError();\n        }\n        Object.defineProperty(nativeConvolverNode, 'channelCount', {\n            get: () => options.channelCount,\n            set: (value) => {\n                if (value !== options.channelCount) {\n                    throw createNotSupportedError();\n                }\n            }\n        });\n        // Bug #114: Edge & Safari allow to change the channelCountMode\n        if (options.channelCountMode !== 'clamped-max') {\n            throw createNotSupportedError();\n        }\n        Object.defineProperty(nativeConvolverNode, 'channelCountMode', {\n            get: () => options.channelCountMode,\n            set: (value) => {\n                if (value !== options.channelCountMode) {\n                    throw createNotSupportedError();\n                }\n            }\n        });\n        return nativeConvolverNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-convolver-node-factory.js.map","import { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nexport const createConvolverNodeRendererFactory = (createNativeConvolverNode) => {\n    return () => {\n        const renderedNativeConvolverNodes = new WeakMap();\n        const createConvolverNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeConvolverNode = getNativeAudioNode(proxy);\n            // If the initially used nativeConvolverNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeConvolverNodeIsOwnedByContext = isOwnedByContext(nativeConvolverNode, nativeOfflineAudioContext);\n            if (!nativeConvolverNodeIsOwnedByContext) {\n                const options = {\n                    buffer: nativeConvolverNode.buffer,\n                    channelCount: nativeConvolverNode.channelCount,\n                    channelCountMode: nativeConvolverNode.channelCountMode,\n                    channelInterpretation: nativeConvolverNode.channelInterpretation,\n                    disableNormalization: !nativeConvolverNode.normalize\n                };\n                nativeConvolverNode = createNativeConvolverNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeConvolverNodes.set(nativeOfflineAudioContext, nativeConvolverNode);\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode);\n            return nativeConvolverNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeConvolverNode = renderedNativeConvolverNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeConvolverNode !== undefined) {\n                    return Promise.resolve(renderedNativeConvolverNode);\n                }\n                return createConvolverNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/convolver-node-renderer-factory.js.map","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeDelayNodeFactory = (createNativeAudioNode) => {\n    return (nativeContext, options) => {\n        const nativeDelayNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createDelay(options.maxDelayTime));\n        assignNativeAudioNodeOptions(nativeDelayNode, options);\n        assignNativeAudioNodeAudioParamValue(nativeDelayNode, options, 'delayTime');\n        return nativeDelayNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-delay-node-factory.js.map","import { connectAudioParam } from '../helpers/connect-audio-param';\nimport { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { renderAutomation } from '../helpers/render-automation';\nimport { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nexport const createDelayNodeRendererFactory = (createNativeDelayNode) => {\n    return (maxDelayTime) => {\n        const renderedNativeDelayNodes = new WeakMap();\n        const createDelayNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeDelayNode = getNativeAudioNode(proxy);\n            // If the initially used nativeDelayNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeDelayNodeIsOwnedByContext = isOwnedByContext(nativeDelayNode, nativeOfflineAudioContext);\n            if (!nativeDelayNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeDelayNode.channelCount,\n                    channelCountMode: nativeDelayNode.channelCountMode,\n                    channelInterpretation: nativeDelayNode.channelInterpretation,\n                    delayTime: nativeDelayNode.delayTime.value,\n                    maxDelayTime\n                };\n                nativeDelayNode = createNativeDelayNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeDelayNodes.set(nativeOfflineAudioContext, nativeDelayNode);\n            if (!nativeDelayNodeIsOwnedByContext) {\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime);\n            }\n            else {\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.delayTime);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDelayNode);\n            return nativeDelayNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeDelayNode = renderedNativeDelayNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeDelayNode !== undefined) {\n                    return Promise.resolve(renderedNativeDelayNode);\n                }\n                return createDelayNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/delay-node-renderer-factory.js.map","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeDynamicsCompressorNodeFactory = (createNativeAudioNode, createNotSupportedError) => {\n    return (nativeContext, options) => {\n        const nativeDynamicsCompressorNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createDynamicsCompressor());\n        assignNativeAudioNodeOptions(nativeDynamicsCompressorNode, options);\n        // Bug #108: Only Chrome, Firefox and Opera disallow a channelCount of three and above yet.\n        if (options.channelCount > 2) {\n            throw createNotSupportedError();\n        }\n        // Bug #109: Only Chrome, Firefox and Opera disallow a channelCountMode of 'max'.\n        if (options.channelCountMode === 'max') {\n            throw createNotSupportedError();\n        }\n        assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode, options, 'attack');\n        assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode, options, 'knee');\n        assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode, options, 'ratio');\n        assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode, options, 'release');\n        assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode, options, 'threshold');\n        return nativeDynamicsCompressorNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-dynamics-compressor-node-factory.js.map","import { connectAudioParam } from '../helpers/connect-audio-param';\nimport { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { renderAutomation } from '../helpers/render-automation';\nimport { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nexport const createDynamicsCompressorNodeRendererFactory = (createNativeDynamicsCompressorNode) => {\n    return () => {\n        const renderedNativeDynamicsCompressorNodes = new WeakMap();\n        const createDynamicsCompressorNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeDynamicsCompressorNode = getNativeAudioNode(proxy);\n            /*\n             * If the initially used nativeDynamicsCompressorNode was not constructed on the same OfflineAudioContext it needs to be\n             * created again.\n             */\n            const nativeDynamicsCompressorNodeIsOwnedByContext = isOwnedByContext(nativeDynamicsCompressorNode, nativeOfflineAudioContext);\n            if (!nativeDynamicsCompressorNodeIsOwnedByContext) {\n                const options = {\n                    attack: nativeDynamicsCompressorNode.attack.value,\n                    channelCount: nativeDynamicsCompressorNode.channelCount,\n                    channelCountMode: nativeDynamicsCompressorNode.channelCountMode,\n                    channelInterpretation: nativeDynamicsCompressorNode.channelInterpretation,\n                    knee: nativeDynamicsCompressorNode.knee.value,\n                    ratio: nativeDynamicsCompressorNode.ratio.value,\n                    release: nativeDynamicsCompressorNode.release.value,\n                    threshold: nativeDynamicsCompressorNode.threshold.value\n                };\n                nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeDynamicsCompressorNodes.set(nativeOfflineAudioContext, nativeDynamicsCompressorNode);\n            if (!nativeDynamicsCompressorNodeIsOwnedByContext) {\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack);\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee);\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio);\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release);\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold);\n            }\n            else {\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.attack);\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.knee);\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.ratio);\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.release);\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.threshold);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDynamicsCompressorNode);\n            return nativeDynamicsCompressorNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeDynamicsCompressorNode = renderedNativeDynamicsCompressorNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeDynamicsCompressorNode !== undefined) {\n                    return Promise.resolve(renderedNativeDynamicsCompressorNode);\n                }\n                return createDynamicsCompressorNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/dynamics-compressor-node-renderer-factory.js.map","import { connectAudioParam } from '../helpers/connect-audio-param';\nimport { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { renderAutomation } from '../helpers/render-automation';\nimport { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nexport const createGainNodeRendererFactory = (createNativeGainNode) => {\n    return () => {\n        const renderedNativeGainNodes = new WeakMap();\n        const createGainNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeGainNode = getNativeAudioNode(proxy);\n            // If the initially used nativeGainNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeGainNodeIsOwnedByContext = isOwnedByContext(nativeGainNode, nativeOfflineAudioContext);\n            if (!nativeGainNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeGainNode.channelCount,\n                    channelCountMode: nativeGainNode.channelCountMode,\n                    channelInterpretation: nativeGainNode.channelInterpretation,\n                    gain: nativeGainNode.gain.value\n                };\n                nativeGainNode = createNativeGainNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeGainNodes.set(nativeOfflineAudioContext, nativeGainNode);\n            if (!nativeGainNodeIsOwnedByContext) {\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain);\n            }\n            else {\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.gain);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeGainNode);\n            return nativeGainNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeGainNode = renderedNativeGainNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeGainNode !== undefined) {\n                    return Promise.resolve(renderedNativeGainNode);\n                }\n                return createGainNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/gain-node-renderer-factory.js.map","export const createNativeScriptProcessorNodeFactory = (createNativeAudioNode) => {\n    return (nativeContext, bufferSize, numberOfInputChannels, numberOfOutputChannels) => {\n        return createNativeAudioNode(nativeContext, (ntvCntxt) => {\n            return ntvCntxt.createScriptProcessor(bufferSize, numberOfInputChannels, numberOfOutputChannels);\n        });\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-script-processor-node-factory.js.map","import { testPromiseSupport } from '../helpers/test-promise-support';\nexport const createRenderNativeOfflineAudioContext = (cacheTestResult, createNativeGainNode, createNativeScriptProcessorNode, testOfflineAudioContextCurrentTimeSupport) => {\n    return (nativeOfflineAudioContext) => {\n        // Bug #21: Safari does not support promises yet.\n        if (cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeOfflineAudioContext))) {\n            // Bug #158: Edge does not advance currentTime if it is not accessed while rendering the audio.\n            return Promise\n                .resolve(cacheTestResult(testOfflineAudioContextCurrentTimeSupport, testOfflineAudioContextCurrentTimeSupport))\n                .then((isOfflineAudioContextCurrentTimeSupported) => {\n                if (!isOfflineAudioContextCurrentTimeSupported) {\n                    const scriptProcessorNode = createNativeScriptProcessorNode(nativeOfflineAudioContext, 512, 0, 1);\n                    nativeOfflineAudioContext.oncomplete = () => {\n                        scriptProcessorNode.onaudioprocess = null; // tslint:disable-line:deprecation\n                        scriptProcessorNode.disconnect();\n                    };\n                    scriptProcessorNode.onaudioprocess = () => nativeOfflineAudioContext.currentTime; // tslint:disable-line:deprecation\n                    scriptProcessorNode.connect(nativeOfflineAudioContext.destination);\n                }\n                return nativeOfflineAudioContext.startRendering();\n            });\n        }\n        return new Promise((resolve) => {\n            // Bug #48: Safari does not render an OfflineAudioContext without any connected node.\n            const gainNode = createNativeGainNode(nativeOfflineAudioContext, {\n                channelCount: 1,\n                channelCountMode: 'explicit',\n                channelInterpretation: 'discrete',\n                gain: 0\n            });\n            nativeOfflineAudioContext.oncomplete = (event) => {\n                gainNode.disconnect();\n                resolve(event.renderedBuffer);\n            };\n            gainNode.connect(nativeOfflineAudioContext.destination);\n            nativeOfflineAudioContext.startRendering();\n        });\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/render-native-offline-audio-context.js.map","export const createTestOfflineAudioContextCurrentTimeSupport = (createNativeGainNode, nativeOfflineAudioContextConstructor) => {\n    return () => {\n        if (nativeOfflineAudioContextConstructor === null) {\n            return Promise.resolve(false);\n        }\n        const nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n        // Bug #48: Safari does not render an OfflineAudioContext without any connected node.\n        const gainNode = createNativeGainNode(nativeOfflineAudioContext, {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete',\n            gain: 0\n        });\n        // Bug #21: Safari does not support promises yet.\n        return new Promise((resolve) => {\n            nativeOfflineAudioContext.oncomplete = () => {\n                gainNode.disconnect();\n                resolve(nativeOfflineAudioContext.currentTime !== 0);\n            };\n            nativeOfflineAudioContext.startRendering();\n        });\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/test-offline-audio-context-current-time-support.js.map","import { filterBuffer } from '../helpers/filter-buffer';\nimport { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nconst filterFullBuffer = (renderedBuffer, nativeOfflineAudioContext, feedback, feedforward) => {\n    const feedbackLength = feedback.length;\n    const feedforwardLength = feedforward.length;\n    const minLength = Math.min(feedbackLength, feedforwardLength);\n    if (feedback[0] !== 1) {\n        for (let i = 0; i < feedbackLength; i += 1) {\n            feedforward[i] /= feedback[0];\n        }\n        for (let i = 1; i < feedforwardLength; i += 1) {\n            feedback[i] /= feedback[0];\n        }\n    }\n    const bufferLength = 32;\n    const xBuffer = new Float32Array(bufferLength);\n    const yBuffer = new Float32Array(bufferLength);\n    const filteredBuffer = nativeOfflineAudioContext.createBuffer(renderedBuffer.numberOfChannels, renderedBuffer.length, renderedBuffer.sampleRate);\n    const numberOfChannels = renderedBuffer.numberOfChannels;\n    for (let i = 0; i < numberOfChannels; i += 1) {\n        const input = renderedBuffer.getChannelData(i);\n        const output = filteredBuffer.getChannelData(i);\n        // @todo Add a test which checks support for TypedArray.prototype.fill().\n        xBuffer.fill(0);\n        yBuffer.fill(0);\n        filterBuffer(feedback, feedbackLength, feedforward, feedforwardLength, minLength, xBuffer, yBuffer, 0, bufferLength, input, output);\n    }\n    return filteredBuffer;\n};\nexport const createIIRFilterNodeRendererFactory = (createNativeAudioBufferSourceNode, createNativeAudioNode, nativeOfflineAudioContextConstructor, renderNativeOfflineAudioContext) => {\n    return (feedback, feedforward) => {\n        const renderedNativeAudioNodes = new WeakMap();\n        const createAudioNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeIIRFilterNode = getNativeAudioNode(proxy);\n            let nativeAudioBufferSourceNode = null;\n            // If the initially used nativeIIRFilterNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeIIRFilterNodeIsOwnedByContext = isOwnedByContext(nativeIIRFilterNode, nativeOfflineAudioContext);\n            // Bug #9: Safari does not support IIRFilterNodes.\n            if (nativeOfflineAudioContext.createIIRFilter === undefined) {\n                nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext);\n            }\n            else if (!nativeIIRFilterNodeIsOwnedByContext) {\n                nativeIIRFilterNode = createNativeAudioNode(nativeOfflineAudioContext, (ntvCntxt) => {\n                    return ntvCntxt.createIIRFilter(feedforward, feedback);\n                });\n            }\n            renderedNativeAudioNodes.set(nativeOfflineAudioContext, (nativeAudioBufferSourceNode === null) ? nativeIIRFilterNode : nativeAudioBufferSourceNode);\n            if (nativeAudioBufferSourceNode !== null) {\n                if (nativeOfflineAudioContextConstructor === null) {\n                    throw new Error('Missing the native OfflineAudioContext constructor.');\n                }\n                const partialOfflineAudioContext = new nativeOfflineAudioContextConstructor(\n                // Bug #47: The AudioDestinationNode in Edge and Safari gets not initialized correctly.\n                proxy.context.destination.channelCount, \n                // Bug #17: Safari does not yet expose the length.\n                proxy.context.length, nativeOfflineAudioContext.sampleRate);\n                await renderInputsOfAudioNode(proxy, partialOfflineAudioContext, partialOfflineAudioContext.destination);\n                const renderedBuffer = await renderNativeOfflineAudioContext(partialOfflineAudioContext);\n                nativeAudioBufferSourceNode.buffer = filterFullBuffer(renderedBuffer, nativeOfflineAudioContext, feedback, feedforward);\n                nativeAudioBufferSourceNode.start(0);\n                return nativeAudioBufferSourceNode;\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeIIRFilterNode);\n            return nativeIIRFilterNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeAudioNode !== undefined) {\n                    return Promise.resolve(renderedNativeAudioNode);\n                }\n                return createAudioNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/iir-filter-node-renderer-factory.js.map","import { createInvalidAccessError } from '../factories/invalid-access-error';\nexport const wrapIIRFilterNodeGetFrequencyResponseMethod = (nativeIIRFilterNode) => {\n    nativeIIRFilterNode.getFrequencyResponse = ((getFrequencyResponse) => {\n        return (frequencyHz, magResponse, phaseResponse) => {\n            if ((frequencyHz.length !== magResponse.length) || (magResponse.length !== phaseResponse.length)) {\n                throw createInvalidAccessError();\n            }\n            return getFrequencyResponse.call(nativeIIRFilterNode, frequencyHz, magResponse, phaseResponse);\n        };\n    })(nativeIIRFilterNode.getFrequencyResponse);\n};\n//# sourceMappingURL=/build/es2018/helpers/wrap-iir-filter-node-get-frequency-response-method.js.map","import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeIIRFilterNodeFactory = (createNativeAudioNode, createNativeIIRFilterNodeFaker) => {\n    return (nativeContext, baseLatency, options) => {\n        // Bug #9: Safari does not support IIRFilterNodes.\n        if (nativeContext.createIIRFilter === undefined) {\n            return createNativeIIRFilterNodeFaker(nativeContext, baseLatency, options);\n        }\n        const nativeIIRFilterNode = createNativeAudioNode(nativeContext, (ntvCntxt) => {\n            return ntvCntxt.createIIRFilter(options.feedforward, options.feedback);\n        });\n        assignNativeAudioNodeOptions(nativeIIRFilterNode, options);\n        return nativeIIRFilterNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-iir-filter-node-factory.js.map","import { EventTarget } from '../event-target';\nimport { CONTEXT_STORE } from '../globals';\nimport { wrapEventListener } from '../helpers/wrap-event-listener';\nexport const createMinimalBaseAudioContextConstructor = (audioDestinationNodeConstructor, createAudioListener) => {\n    return class MinimalBaseAudioContext extends EventTarget {\n        constructor(_nativeContext, numberOfChannels) {\n            super(_nativeContext);\n            this._nativeContext = _nativeContext;\n            CONTEXT_STORE.set(this, _nativeContext);\n            // Bug #93: Edge will set the sampleRate of an AudioContext to zero when it is closed.\n            const sampleRate = _nativeContext.sampleRate;\n            Object.defineProperty(_nativeContext, 'sampleRate', {\n                get: () => sampleRate\n            });\n            this._destination = new audioDestinationNodeConstructor(this, numberOfChannels);\n            this._listener = createAudioListener(this, _nativeContext);\n            this._onstatechange = null;\n        }\n        get currentTime() {\n            return this._nativeContext.currentTime;\n        }\n        get destination() {\n            return this._destination;\n        }\n        get listener() {\n            return this._listener;\n        }\n        get onstatechange() {\n            return this._onstatechange;\n        }\n        set onstatechange(value) {\n            const wrappedListener = wrapEventListener(this, value);\n            this._nativeContext.onstatechange = wrappedListener;\n            const nativeOnStateChange = this._nativeContext.onstatechange;\n            this._onstatechange = (nativeOnStateChange === wrappedListener) ? value : nativeOnStateChange;\n        }\n        get sampleRate() {\n            return this._nativeContext.sampleRate;\n        }\n        get state() {\n            return this._nativeContext.state;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/minimal-base-audio-context-constructor.js.map","import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nexport const createAudioListenerFactory = (createAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeScriptProcessorNode, isNativeOfflineAudioContext) => {\n    return (context, nativeContext) => {\n        const nativeListener = nativeContext.listener;\n        // Bug #117: Only Chrome & Opera support the new interface already.\n        const createFakeAudioParams = () => {\n            const channelMergerNode = createNativeChannelMergerNode(nativeContext, { channelCount: 1, channelCountMode: 'explicit', channelInterpretation: 'speakers', numberOfInputs: 9 });\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, 256, 9, 0);\n            const createFakeAudioParam = (input, value) => {\n                const constantSourceNode = createNativeConstantSourceNode(nativeContext, { channelCount: 1, channelCountMode: 'explicit', channelInterpretation: 'discrete', offset: value });\n                constantSourceNode.connect(channelMergerNode, 0, input);\n                // @todo This should be stopped when the context is closed.\n                constantSourceNode.start();\n                Object.defineProperty(constantSourceNode.offset, 'defaultValue', {\n                    get() {\n                        return value;\n                    }\n                });\n                /*\n                 * Bug #62 & #74: Edge & Safari do not support ConstantSourceNodes and do not export the correct values for maxValue and\n                 * minValue for GainNodes.\n                 */\n                return createAudioParam({ context }, isOffline, constantSourceNode.offset, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            };\n            let lastOrientation = [0, 0, -1, 0, 1, 0];\n            let lastPosition = [0, 0, 0];\n            scriptProcessorNode.onaudioprocess = ({ inputBuffer }) => {\n                const orientation = [\n                    inputBuffer.getChannelData(0)[0],\n                    inputBuffer.getChannelData(1)[0],\n                    inputBuffer.getChannelData(2)[0],\n                    inputBuffer.getChannelData(3)[0],\n                    inputBuffer.getChannelData(4)[0],\n                    inputBuffer.getChannelData(5)[0]\n                ];\n                if (orientation.some((value, index) => (value !== lastOrientation[index]))) {\n                    nativeListener.setOrientation(...orientation); // tslint:disable-line:deprecation\n                    lastOrientation = orientation;\n                }\n                const positon = [\n                    inputBuffer.getChannelData(6)[0],\n                    inputBuffer.getChannelData(7)[0],\n                    inputBuffer.getChannelData(8)[0]\n                ];\n                if (positon.some((value, index) => (value !== lastPosition[index]))) {\n                    nativeListener.setPosition(...positon); // tslint:disable-line:deprecation\n                    lastPosition = positon;\n                }\n            };\n            channelMergerNode.connect(scriptProcessorNode);\n            return {\n                forwardX: createFakeAudioParam(0, 0),\n                forwardY: createFakeAudioParam(1, 0),\n                forwardZ: createFakeAudioParam(2, -1),\n                positionX: createFakeAudioParam(6, 0),\n                positionY: createFakeAudioParam(7, 0),\n                positionZ: createFakeAudioParam(8, 0),\n                upX: createFakeAudioParam(3, 0),\n                upY: createFakeAudioParam(4, 1),\n                upZ: createFakeAudioParam(5, 0)\n            };\n        };\n        const { forwardX, forwardY, forwardZ, positionX, positionY, positionZ, upX, upY, upZ } = (nativeListener.forwardX === undefined)\n            ? createFakeAudioParams()\n            : nativeListener;\n        return {\n            get forwardX() {\n                return forwardX;\n            },\n            get forwardY() {\n                return forwardY;\n            },\n            get forwardZ() {\n                return forwardZ;\n            },\n            get positionX() {\n                return positionX;\n            },\n            get positionY() {\n                return positionY;\n            },\n            get positionZ() {\n                return positionZ;\n            },\n            get upX() {\n                return upX;\n            },\n            get upY() {\n                return upY;\n            },\n            get upZ() {\n                return upZ;\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-listener-factory.js.map","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { wrapAudioScheduledSourceNodeStartMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters';\nimport { wrapAudioScheduledSourceNodeStopMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters';\nexport const createNativeOscillatorNodeFactory = (cacheTestResult, createNativeAudioNode, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls) => {\n    return (nativeContext, options) => {\n        const nativeOscillatorNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createOscillator());\n        assignNativeAudioNodeOptions(nativeOscillatorNode, options);\n        assignNativeAudioNodeAudioParamValue(nativeOscillatorNode, options, 'detune');\n        assignNativeAudioNodeAudioParamValue(nativeOscillatorNode, options, 'frequency');\n        if (options.periodicWave !== undefined) {\n            nativeOscillatorNode.setPeriodicWave(options.periodicWave);\n        }\n        else {\n            assignNativeAudioNodeOption(nativeOscillatorNode, options, 'type');\n        }\n        // Bug #44: Only Chrome & Opera throw a RangeError yet.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(nativeContext))) {\n            wrapAudioScheduledSourceNodeStartMethodNegativeParameters(nativeOscillatorNode);\n        }\n        // Bug #19: Safari does not ignore calls to stop() of an already stopped AudioBufferSourceNode.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, () => testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport(nativeContext))) {\n            wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls(nativeOscillatorNode, nativeContext);\n        }\n        // Bug #44: No browser does throw a RangeError yet.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(nativeContext))) {\n            wrapAudioScheduledSourceNodeStopMethodNegativeParameters(nativeOscillatorNode);\n        }\n        return nativeOscillatorNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-oscillator-node-factory.js.map","import { connectAudioParam } from '../helpers/connect-audio-param';\nimport { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { renderAutomation } from '../helpers/render-automation';\nimport { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nexport const createOscillatorNodeRendererFactory = (createNativeOscillatorNode) => {\n    return () => {\n        const renderedNativeOscillatorNodes = new WeakMap();\n        let periodicWave = null;\n        let start = null;\n        let stop = null;\n        const createOscillatorNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeOscillatorNode = getNativeAudioNode(proxy);\n            // If the initially used nativeOscillatorNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeOscillatorNodeIsOwnedByContext = isOwnedByContext(nativeOscillatorNode, nativeOfflineAudioContext);\n            if (!nativeOscillatorNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeOscillatorNode.channelCount,\n                    channelCountMode: nativeOscillatorNode.channelCountMode,\n                    channelInterpretation: nativeOscillatorNode.channelInterpretation,\n                    detune: nativeOscillatorNode.detune.value,\n                    frequency: nativeOscillatorNode.frequency.value,\n                    periodicWave: (periodicWave === null) ? undefined : periodicWave,\n                    type: nativeOscillatorNode.type\n                };\n                nativeOscillatorNode = createNativeOscillatorNode(nativeOfflineAudioContext, options);\n                if (start !== null) {\n                    nativeOscillatorNode.start(start);\n                }\n                if (stop !== null) {\n                    nativeOscillatorNode.stop(stop);\n                }\n            }\n            renderedNativeOscillatorNodes.set(nativeOfflineAudioContext, nativeOscillatorNode);\n            if (!nativeOscillatorNodeIsOwnedByContext) {\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune);\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency);\n            }\n            else {\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.detune);\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.frequency);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeOscillatorNode);\n            return nativeOscillatorNode;\n        };\n        return {\n            set periodicWave(value) {\n                periodicWave = value;\n            },\n            set start(value) {\n                start = value;\n            },\n            set stop(value) {\n                stop = value;\n            },\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeOscillatorNode = renderedNativeOscillatorNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeOscillatorNode !== undefined) {\n                    return Promise.resolve(renderedNativeOscillatorNode);\n                }\n                return createOscillatorNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/oscillator-node-renderer-factory.js.map","import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { interceptConnections } from '../helpers/intercept-connections';\nexport const createNativeWaveShaperNodeFakerFactory = (createInvalidStateError, createNativeAudioNode, createNativeGainNode) => {\n    return (nativeContext, { curve, oversample, ...audioNodeOptions }) => {\n        const negativeWaveShaperNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createWaveShaper());\n        const positiveWaveShaperNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createWaveShaper());\n        assignNativeAudioNodeOptions(negativeWaveShaperNode, audioNodeOptions);\n        assignNativeAudioNodeOptions(positiveWaveShaperNode, audioNodeOptions);\n        const inputGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, gain: 1 });\n        const invertGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, gain: -1 });\n        const outputGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, gain: 1 });\n        const revertGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, gain: -1 });\n        inputGainNode.connect(negativeWaveShaperNode);\n        negativeWaveShaperNode.connect(outputGainNode);\n        inputGainNode.connect(invertGainNode);\n        invertGainNode.connect(positiveWaveShaperNode);\n        positiveWaveShaperNode.connect(revertGainNode);\n        revertGainNode.connect(outputGainNode);\n        let unmodifiedCurve = null;\n        const nativeWaveShaperNodeFaker = {\n            get bufferSize() {\n                return undefined;\n            },\n            get channelCount() {\n                return negativeWaveShaperNode.channelCount;\n            },\n            set channelCount(value) {\n                inputGainNode.channelCount = value;\n                invertGainNode.channelCount = value;\n                negativeWaveShaperNode.channelCount = value;\n                outputGainNode.channelCount = value;\n                positiveWaveShaperNode.channelCount = value;\n                revertGainNode.channelCount = value;\n            },\n            get channelCountMode() {\n                return negativeWaveShaperNode.channelCountMode;\n            },\n            set channelCountMode(value) {\n                inputGainNode.channelCountMode = value;\n                invertGainNode.channelCountMode = value;\n                negativeWaveShaperNode.channelCountMode = value;\n                outputGainNode.channelCountMode = value;\n                positiveWaveShaperNode.channelCountMode = value;\n                revertGainNode.channelCountMode = value;\n            },\n            get channelInterpretation() {\n                return negativeWaveShaperNode.channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                inputGainNode.channelInterpretation = value;\n                invertGainNode.channelInterpretation = value;\n                negativeWaveShaperNode.channelInterpretation = value;\n                outputGainNode.channelInterpretation = value;\n                positiveWaveShaperNode.channelInterpretation = value;\n                revertGainNode.channelInterpretation = value;\n            },\n            get context() {\n                return negativeWaveShaperNode.context;\n            },\n            get curve() {\n                return unmodifiedCurve;\n            },\n            set curve(value) {\n                // Bug #102: Safari does not throw an InvalidStateError when the curve has less than two samples.\n                if (curve !== null && curve.length < 2) {\n                    throw createInvalidStateError();\n                }\n                if (value === null) {\n                    negativeWaveShaperNode.curve = value;\n                    positiveWaveShaperNode.curve = value;\n                }\n                else {\n                    const curveLength = value.length;\n                    const negativeCurve = new Float32Array(curveLength + 2 - (curveLength % 2));\n                    const positiveCurve = new Float32Array(curveLength + 2 - (curveLength % 2));\n                    negativeCurve[0] = value[0];\n                    positiveCurve[0] = -value[curveLength - 1];\n                    const length = Math.ceil((curveLength + 1) / 2);\n                    const centerIndex = ((curveLength + 1) / 2) - 1;\n                    for (let i = 1; i < length; i += 1) {\n                        const theoreticIndex = (i / length) * centerIndex;\n                        const lowerIndex = Math.floor(theoreticIndex);\n                        const upperIndex = Math.ceil(theoreticIndex);\n                        negativeCurve[i] = (lowerIndex === upperIndex)\n                            ? value[lowerIndex]\n                            : ((1 - (theoreticIndex - lowerIndex)) * value[lowerIndex])\n                                + ((1 - (upperIndex - theoreticIndex)) * value[upperIndex]);\n                        positiveCurve[i] = (lowerIndex === upperIndex)\n                            ? -value[curveLength - 1 - lowerIndex]\n                            : -((1 - (theoreticIndex - lowerIndex)) * value[curveLength - 1 - lowerIndex])\n                                - ((1 - (upperIndex - theoreticIndex)) * value[curveLength - 1 - upperIndex]);\n                    }\n                    negativeCurve[length] = (curveLength % 2 === 1) ? value[length - 1] : (value[length - 2] + value[length - 1]) / 2;\n                    negativeWaveShaperNode.curve = negativeCurve;\n                    positiveWaveShaperNode.curve = positiveCurve;\n                }\n                unmodifiedCurve = value;\n            },\n            get inputs() {\n                return [inputGainNode];\n            },\n            get numberOfInputs() {\n                return negativeWaveShaperNode.numberOfInputs;\n            },\n            get numberOfOutputs() {\n                return negativeWaveShaperNode.numberOfOutputs;\n            },\n            get oversample() {\n                return negativeWaveShaperNode.oversample;\n            },\n            set oversample(value) {\n                negativeWaveShaperNode.oversample = value;\n                positiveWaveShaperNode.oversample = value;\n            },\n            addEventListener(...args) {\n                return inputGainNode.addEventListener(args[0], args[1], args[2]);\n            },\n            dispatchEvent(...args) {\n                return inputGainNode.dispatchEvent(args[0]);\n            },\n            removeEventListener(...args) {\n                return inputGainNode.removeEventListener(args[0], args[1], args[2]);\n            }\n        };\n        if (curve !== nativeWaveShaperNodeFaker.curve) {\n            nativeWaveShaperNodeFaker.curve = curve;\n        }\n        if (oversample !== nativeWaveShaperNodeFaker.oversample) {\n            nativeWaveShaperNodeFaker.oversample = oversample;\n        }\n        return interceptConnections(nativeWaveShaperNodeFaker, outputGainNode);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-wave-shaper-node-faker-factory.js.map","import { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeWaveShaperNodeFactory = (createInvalidStateError, createNativeAudioNode, createNativeWaveShaperNodeFaker) => {\n    return (nativeContext, options) => {\n        const nativeWaveShaperNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createWaveShaper());\n        try {\n            // Bug #102: Safari does not throw an InvalidStateError when the curve has less than two samples.\n            // Bug #119: Safari does not correctly map the values. Bug #102 is only used to detect Safari in this case.\n            nativeWaveShaperNode.curve = new Float32Array([1]);\n            return createNativeWaveShaperNodeFaker(nativeContext, options);\n        }\n        catch ( /* Ignore errors. */_a) { /* Ignore errors. */ }\n        assignNativeAudioNodeOptions(nativeWaveShaperNode, options);\n        const curve = options.curve;\n        // Bug #104: Chrome will throw an InvalidAccessError when the curve has less than two samples.\n        if (curve !== null && curve.length < 2) {\n            throw createInvalidStateError();\n        }\n        assignNativeAudioNodeOption(nativeWaveShaperNode, options, 'curve');\n        assignNativeAudioNodeOption(nativeWaveShaperNode, options, 'oversample');\n        return nativeWaveShaperNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-wave-shaper-node-factory.js.map","import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { connectNativeAudioNodeToNativeAudioNode } from '../helpers/connect-native-audio-node-to-native-audio-node';\nimport { interceptConnections } from '../helpers/intercept-connections';\nexport const createNativePannerNodeFakerFactory = (createInvalidStateError, createNativeAudioNode, createNativeChannelMergerNode, createNativeGainNode, createNativeScriptProcessorNode, createNativeWaveShaperNode, createNotSupportedError) => {\n    return (nativeContext, { coneInnerAngle, coneOuterAngle, coneOuterGain, distanceModel, maxDistance, orientationX, orientationY, orientationZ, panningModel, positionX, positionY, positionZ, refDistance, rolloffFactor, ...audioNodeOptions }) => {\n        const pannerNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createPanner());\n        // Bug #125: Safari does not throw an error yet.\n        if (audioNodeOptions.channelCount > 2) {\n            throw createNotSupportedError();\n        }\n        // Bug #126: Safari does not throw an error yet.\n        if (audioNodeOptions.channelCountMode === 'max') {\n            throw createNotSupportedError();\n        }\n        assignNativeAudioNodeOptions(pannerNode, audioNodeOptions);\n        const SINGLE_CHANNEL_OPTIONS = {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete'\n        };\n        const channelMergerNode = createNativeChannelMergerNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, channelInterpretation: 'speakers', numberOfInputs: 6 });\n        const inputGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, gain: 1 });\n        const orientationXGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 1 });\n        const orientationYGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        const orientationZGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        const positionXGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        const positionYGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        const positionZGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, 256, 6, 0);\n        const waveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, curve: new Float32Array([1, 1]), oversample: 'none' });\n        let lastOrientation = [1, 0, 0];\n        let lastPosition = [0, 0, 0];\n        scriptProcessorNode.onaudioprocess = ({ inputBuffer }) => {\n            const orientation = [\n                inputBuffer.getChannelData(0)[0],\n                inputBuffer.getChannelData(1)[0],\n                inputBuffer.getChannelData(2)[0]\n            ];\n            if (orientation.some((value, index) => (value !== lastOrientation[index]))) {\n                pannerNode.setOrientation(...orientation); // tslint:disable-line:deprecation\n                lastOrientation = orientation;\n            }\n            const positon = [\n                inputBuffer.getChannelData(6)[0],\n                inputBuffer.getChannelData(7)[0],\n                inputBuffer.getChannelData(8)[0]\n            ];\n            if (positon.some((value, index) => (value !== lastPosition[index]))) {\n                pannerNode.setPosition(...positon); // tslint:disable-line:deprecation\n                lastPosition = positon;\n            }\n        };\n        inputGainNode.connect(pannerNode);\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        connectNativeAudioNodeToNativeAudioNode(inputGainNode, waveShaperNode, 0, 0);\n        waveShaperNode.connect(orientationXGainNode);\n        waveShaperNode.connect(orientationYGainNode);\n        waveShaperNode.connect(orientationZGainNode);\n        waveShaperNode.connect(positionXGainNode);\n        waveShaperNode.connect(positionYGainNode);\n        waveShaperNode.connect(positionZGainNode);\n        orientationXGainNode.connect(channelMergerNode);\n        orientationYGainNode.connect(channelMergerNode);\n        orientationZGainNode.connect(channelMergerNode);\n        positionXGainNode.connect(channelMergerNode);\n        positionYGainNode.connect(channelMergerNode);\n        positionZGainNode.connect(channelMergerNode);\n        channelMergerNode.connect(scriptProcessorNode);\n        Object.defineProperty(orientationYGainNode.gain, 'defaultValue', { get: () => 0 });\n        Object.defineProperty(orientationZGainNode.gain, 'defaultValue', { get: () => 0 });\n        Object.defineProperty(positionXGainNode.gain, 'defaultValue', { get: () => 0 });\n        Object.defineProperty(positionYGainNode.gain, 'defaultValue', { get: () => 0 });\n        Object.defineProperty(positionZGainNode.gain, 'defaultValue', { get: () => 0 });\n        const nativePannerNodeFaker = {\n            get bufferSize() {\n                return undefined;\n            },\n            get channelCount() {\n                return pannerNode.channelCount;\n            },\n            set channelCount(value) {\n                // Bug #125: Safari does not throw an error yet.\n                if (value > 2) {\n                    throw createNotSupportedError();\n                }\n                inputGainNode.channelCount = value;\n                pannerNode.channelCount = value;\n            },\n            get channelCountMode() {\n                return pannerNode.channelCountMode;\n            },\n            set channelCountMode(value) {\n                // Bug #126: Safari does not throw an error yet.\n                if (value === 'max') {\n                    throw createNotSupportedError();\n                }\n                inputGainNode.channelCountMode = value;\n                pannerNode.channelCountMode = value;\n            },\n            get channelInterpretation() {\n                return pannerNode.channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                inputGainNode.channelInterpretation = value;\n                pannerNode.channelInterpretation = value;\n            },\n            get coneInnerAngle() {\n                return pannerNode.coneInnerAngle;\n            },\n            set coneInnerAngle(value) {\n                pannerNode.coneInnerAngle = value;\n            },\n            get coneOuterAngle() {\n                return pannerNode.coneOuterAngle;\n            },\n            set coneOuterAngle(value) {\n                pannerNode.coneOuterAngle = value;\n            },\n            get coneOuterGain() {\n                return pannerNode.coneOuterGain;\n            },\n            set coneOuterGain(value) {\n                // Bug #127: Edge & Safari do not throw an InvalidStateError yet.\n                if (value < 0 || value > 1) {\n                    throw createInvalidStateError();\n                }\n                pannerNode.coneOuterGain = value;\n            },\n            get context() {\n                return pannerNode.context;\n            },\n            get distanceModel() {\n                return pannerNode.distanceModel;\n            },\n            set distanceModel(value) {\n                pannerNode.distanceModel = value;\n            },\n            get inputs() {\n                return [inputGainNode];\n            },\n            get maxDistance() {\n                return pannerNode.maxDistance;\n            },\n            set maxDistance(value) {\n                // Bug #128: Edge & Safari do not throw an error yet.\n                if (value < 0) {\n                    throw new RangeError();\n                }\n                pannerNode.maxDistance = value;\n            },\n            get numberOfInputs() {\n                return pannerNode.numberOfInputs;\n            },\n            get numberOfOutputs() {\n                return pannerNode.numberOfOutputs;\n            },\n            get orientationX() {\n                return orientationXGainNode.gain;\n            },\n            get orientationY() {\n                return orientationYGainNode.gain;\n            },\n            get orientationZ() {\n                return orientationZGainNode.gain;\n            },\n            get panningModel() {\n                return pannerNode.panningModel;\n            },\n            set panningModel(value) {\n                pannerNode.panningModel = value;\n                // Bug #123: Edge does not support HRTF as panningModel.\n                if (pannerNode.panningModel !== value && value === 'HRTF') {\n                    throw createNotSupportedError();\n                }\n            },\n            get positionX() {\n                return positionXGainNode.gain;\n            },\n            get positionY() {\n                return positionYGainNode.gain;\n            },\n            get positionZ() {\n                return positionZGainNode.gain;\n            },\n            get refDistance() {\n                return pannerNode.refDistance;\n            },\n            set refDistance(value) {\n                // Bug #129: Edge & Safari do not throw an error yet.\n                if (value < 0) {\n                    throw new RangeError();\n                }\n                pannerNode.refDistance = value;\n            },\n            get rolloffFactor() {\n                return pannerNode.rolloffFactor;\n            },\n            set rolloffFactor(value) {\n                // Bug #130: Edge & Safari do not throw an error yet.\n                if (value < 0) {\n                    throw new RangeError();\n                }\n                pannerNode.rolloffFactor = value;\n            },\n            addEventListener(...args) {\n                return inputGainNode.addEventListener(args[0], args[1], args[2]);\n            },\n            dispatchEvent(...args) {\n                return inputGainNode.dispatchEvent(args[0]);\n            },\n            removeEventListener(...args) {\n                return inputGainNode.removeEventListener(args[0], args[1], args[2]);\n            }\n        };\n        if (coneInnerAngle !== nativePannerNodeFaker.coneInnerAngle) {\n            nativePannerNodeFaker.coneInnerAngle = coneInnerAngle;\n        }\n        if (coneOuterAngle !== nativePannerNodeFaker.coneOuterAngle) {\n            nativePannerNodeFaker.coneOuterAngle = coneOuterAngle;\n        }\n        if (coneOuterGain !== nativePannerNodeFaker.coneOuterGain) {\n            nativePannerNodeFaker.coneOuterGain = coneOuterGain;\n        }\n        if (distanceModel !== nativePannerNodeFaker.distanceModel) {\n            nativePannerNodeFaker.distanceModel = distanceModel;\n        }\n        if (maxDistance !== nativePannerNodeFaker.maxDistance) {\n            nativePannerNodeFaker.maxDistance = maxDistance;\n        }\n        if (orientationX !== nativePannerNodeFaker.orientationX.value) {\n            nativePannerNodeFaker.orientationX.value = orientationX;\n        }\n        if (orientationY !== nativePannerNodeFaker.orientationY.value) {\n            nativePannerNodeFaker.orientationY.value = orientationY;\n        }\n        if (orientationZ !== nativePannerNodeFaker.orientationZ.value) {\n            nativePannerNodeFaker.orientationZ.value = orientationZ;\n        }\n        if (panningModel !== nativePannerNodeFaker.panningModel) {\n            nativePannerNodeFaker.panningModel = panningModel;\n        }\n        if (positionX !== nativePannerNodeFaker.positionX.value) {\n            nativePannerNodeFaker.positionX.value = positionX;\n        }\n        if (positionY !== nativePannerNodeFaker.positionY.value) {\n            nativePannerNodeFaker.positionY.value = positionY;\n        }\n        if (positionZ !== nativePannerNodeFaker.positionZ.value) {\n            nativePannerNodeFaker.positionZ.value = positionZ;\n        }\n        if (refDistance !== nativePannerNodeFaker.refDistance) {\n            nativePannerNodeFaker.refDistance = refDistance;\n        }\n        if (rolloffFactor !== nativePannerNodeFaker.rolloffFactor) {\n            nativePannerNodeFaker.rolloffFactor = rolloffFactor;\n        }\n        return interceptConnections(nativePannerNodeFaker, pannerNode);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-panner-node-faker-factory.js.map","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativePannerNodeFactory = (createNativeAudioNode, createNativePannerNodeFaker) => {\n    return (nativeContext, options) => {\n        const nativePannerNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createPanner());\n        // Bug #124: Edge & Safari do not support modifying the orientation and the position with AudioParams.\n        if (nativePannerNode.orientationX === undefined) {\n            return createNativePannerNodeFaker(nativeContext, options);\n        }\n        assignNativeAudioNodeOptions(nativePannerNode, options);\n        assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'orientationX');\n        assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'orientationY');\n        assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'orientationZ');\n        assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'positionX');\n        assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'positionY');\n        assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'positionZ');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'coneInnerAngle');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'coneOuterAngle');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'coneOuterGain');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'distanceModel');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'maxDistance');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'panningModel');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'refDistance');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'rolloffFactor');\n        return nativePannerNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-panner-node-factory.js.map","import { connectAudioParam } from '../helpers/connect-audio-param';\nimport { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { renderAutomation } from '../helpers/render-automation';\nimport { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nexport const createPannerNodeRendererFactory = (createNativePannerNode) => {\n    return () => {\n        const renderedNativePannerNodes = new WeakMap();\n        const createPannerNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativePannerNode = getNativeAudioNode(proxy);\n            // If the initially used nativePannerNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativePannerNodeIsOwnedByContext = isOwnedByContext(nativePannerNode, nativeOfflineAudioContext);\n            if (!nativePannerNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativePannerNode.channelCount,\n                    channelCountMode: nativePannerNode.channelCountMode,\n                    channelInterpretation: nativePannerNode.channelInterpretation,\n                    coneInnerAngle: nativePannerNode.coneInnerAngle,\n                    coneOuterAngle: nativePannerNode.coneOuterAngle,\n                    coneOuterGain: nativePannerNode.coneOuterGain,\n                    distanceModel: nativePannerNode.distanceModel,\n                    maxDistance: nativePannerNode.maxDistance,\n                    orientationX: nativePannerNode.orientationX.value,\n                    orientationY: nativePannerNode.orientationY.value,\n                    orientationZ: nativePannerNode.orientationZ.value,\n                    panningModel: nativePannerNode.panningModel,\n                    positionX: nativePannerNode.positionX.value,\n                    positionY: nativePannerNode.positionY.value,\n                    positionZ: nativePannerNode.positionZ.value,\n                    refDistance: nativePannerNode.refDistance,\n                    rolloffFactor: nativePannerNode.rolloffFactor\n                };\n                nativePannerNode = createNativePannerNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativePannerNodes.set(nativeOfflineAudioContext, nativePannerNode);\n            if (!nativePannerNodeIsOwnedByContext) {\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.orientationX, nativePannerNode.orientationX);\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.orientationY, nativePannerNode.orientationY);\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.orientationZ, nativePannerNode.orientationZ);\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.positionX, nativePannerNode.positionX);\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.positionY, nativePannerNode.positionY);\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.positionZ, nativePannerNode.positionZ);\n            }\n            else {\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.orientationX);\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.orientationY);\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.orientationZ);\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.positionX);\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.positionY);\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.positionZ);\n            }\n            if (nativePannerNode.inputs !== undefined) {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativePannerNode.inputs[0]);\n            }\n            else {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativePannerNode);\n            }\n            return nativePannerNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativePannerNode = renderedNativePannerNodes.get(nativeOfflineAudioContext);\n                if (renderedNativePannerNode !== undefined) {\n                    return Promise.resolve(renderedNativePannerNode);\n                }\n                return createPannerNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/panner-node-renderer-factory.js.map","export const createNativePeriodicWaveFactory = (getBackupNativeContext) => {\n    return (nativeContext, { disableNormalization, imag, real }) => {\n        // Bug #50: Only Edge does currently not allow to create AudioNodes (and other objects) on a closed context yet.\n        const backupNativeContext = getBackupNativeContext(nativeContext);\n        // @todo Edge, Firefox & Safari do only accept Float32Arrays.\n        const wrappedImag = new Float32Array(imag);\n        const wrappedReal = new Float32Array(real);\n        if (backupNativeContext !== null) {\n            return backupNativeContext.createPeriodicWave(wrappedReal, wrappedImag, { disableNormalization });\n        }\n        return nativeContext.createPeriodicWave(wrappedReal, wrappedImag, { disableNormalization });\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-periodic-wave-factory.js.map","import { interceptConnections } from '../helpers/intercept-connections';\nexport const createNativeStereoPannerNodeFakerFactory = (createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeGainNode, createNativeWaveShaperNode, createNotSupportedError) => {\n    // The curve has a size of 14bit plus 1 value to have an exact representation for zero. This value has been determined experimentally.\n    const CURVE_SIZE = 16385;\n    const DC_CURVE = new Float32Array([1, 1]);\n    const HALF_PI = Math.PI / 2;\n    const SINGLE_CHANNEL_OPTIONS = { channelCount: 1, channelCountMode: 'explicit', channelInterpretation: 'discrete' };\n    const SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS = { ...SINGLE_CHANNEL_OPTIONS, oversample: 'none' };\n    const buildInternalGraphForMono = (nativeContext, inputGainNode, panGainNode, channelMergerNode) => {\n        const leftWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        const rightWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        for (let i = 0; i < CURVE_SIZE; i += 1) {\n            const x = (i / (CURVE_SIZE - 1)) * HALF_PI;\n            leftWaveShaperCurve[i] = Math.cos(x);\n            rightWaveShaperCurve[i] = Math.sin(x);\n        }\n        const leftGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const leftWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: leftWaveShaperCurve });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const panWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: DC_CURVE });\n        const rightGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const rightWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: rightWaveShaperCurve });\n        inputGainNode.connect(leftGainNode);\n        inputGainNode.connect(panWaveShaperNode.inputs[0]);\n        inputGainNode.connect(rightGainNode);\n        panWaveShaperNode.connect(panGainNode);\n        panGainNode.connect(leftWaveShaperNode.inputs[0]);\n        panGainNode.connect(rightWaveShaperNode.inputs[0]);\n        leftWaveShaperNode.connect(leftGainNode.gain);\n        rightWaveShaperNode.connect(rightGainNode.gain);\n        leftGainNode.connect(channelMergerNode, 0, 0);\n        rightGainNode.connect(channelMergerNode, 0, 1);\n        return [leftGainNode, rightGainNode];\n    };\n    const buildInternalGraphForStereo = (nativeContext, inputGainNode, panGainNode, channelMergerNode) => {\n        const leftInputForLeftOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        const leftInputForRightOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        const rightInputForLeftOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        const rightInputForRightOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        const centerIndex = Math.floor(CURVE_SIZE / 2);\n        for (let i = 0; i < CURVE_SIZE; i += 1) {\n            if (i > centerIndex) {\n                const x = ((i - centerIndex) / (CURVE_SIZE - 1 - centerIndex)) * HALF_PI;\n                leftInputForLeftOutputWaveShaperCurve[i] = Math.cos(x);\n                leftInputForRightOutputWaveShaperCurve[i] = Math.sin(x);\n                rightInputForLeftOutputWaveShaperCurve[i] = 0;\n                rightInputForRightOutputWaveShaperCurve[i] = 1;\n            }\n            else {\n                const x = (i / (CURVE_SIZE - 1 - centerIndex)) * HALF_PI;\n                leftInputForLeftOutputWaveShaperCurve[i] = 1;\n                leftInputForRightOutputWaveShaperCurve[i] = 0;\n                rightInputForLeftOutputWaveShaperCurve[i] = Math.cos(x);\n                rightInputForRightOutputWaveShaperCurve[i] = Math.sin(x);\n            }\n        }\n        const channelSplitterNode = createNativeChannelSplitterNode(nativeContext, {\n            channelCount: 2,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete',\n            numberOfOutputs: 2\n        });\n        const leftInputForLeftOutputGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const leftInputForLeftOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: leftInputForLeftOutputWaveShaperCurve });\n        const leftInputForRightOutputGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const leftInputForRightOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: leftInputForRightOutputWaveShaperCurve });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const panWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: DC_CURVE });\n        const rightInputForLeftOutputGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const rightInputForLeftOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: rightInputForLeftOutputWaveShaperCurve });\n        const rightInputForRightOutputGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const rightInputForRightOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: rightInputForRightOutputWaveShaperCurve });\n        inputGainNode.connect(channelSplitterNode);\n        inputGainNode.connect(panWaveShaperNode.inputs[0]);\n        channelSplitterNode.connect(leftInputForLeftOutputGainNode, 1);\n        channelSplitterNode.connect(leftInputForRightOutputGainNode, 1);\n        channelSplitterNode.connect(rightInputForLeftOutputGainNode, 1);\n        channelSplitterNode.connect(rightInputForRightOutputGainNode, 1);\n        panWaveShaperNode.connect(panGainNode);\n        panGainNode.connect(leftInputForLeftOutputWaveShaperNode.inputs[0]);\n        panGainNode.connect(leftInputForRightOutputWaveShaperNode.inputs[0]);\n        panGainNode.connect(rightInputForLeftOutputWaveShaperNode.inputs[0]);\n        panGainNode.connect(rightInputForRightOutputWaveShaperNode.inputs[0]);\n        leftInputForLeftOutputWaveShaperNode.connect(leftInputForLeftOutputGainNode.gain);\n        leftInputForRightOutputWaveShaperNode.connect(leftInputForRightOutputGainNode.gain);\n        rightInputForLeftOutputWaveShaperNode.connect(rightInputForLeftOutputGainNode.gain);\n        rightInputForRightOutputWaveShaperNode.connect(rightInputForRightOutputGainNode.gain);\n        leftInputForLeftOutputGainNode.connect(channelMergerNode, 0, 0);\n        rightInputForLeftOutputGainNode.connect(channelMergerNode, 0, 0);\n        leftInputForRightOutputGainNode.connect(channelMergerNode, 0, 1);\n        rightInputForRightOutputGainNode.connect(channelMergerNode, 0, 1);\n        return [\n            leftInputForLeftOutputGainNode,\n            rightInputForLeftOutputGainNode,\n            leftInputForRightOutputGainNode,\n            rightInputForRightOutputGainNode\n        ];\n    };\n    const buildInternalGraph = (nativeContext, channelCount, inputGainNode, panGainNode, channelMergerNode) => {\n        if (channelCount === 1) {\n            return buildInternalGraphForMono(nativeContext, inputGainNode, panGainNode, channelMergerNode);\n        }\n        if (channelCount === 2) {\n            return buildInternalGraphForStereo(nativeContext, inputGainNode, panGainNode, channelMergerNode);\n        }\n        throw createNotSupportedError();\n    };\n    return (nativeContext, { channelCount, channelCountMode, pan, ...audioNodeOptions }) => {\n        if (channelCountMode === 'max') {\n            throw createNotSupportedError();\n        }\n        const channelMergerNode = createNativeChannelMergerNode(nativeContext, {\n            ...audioNodeOptions,\n            channelCount: 1,\n            channelCountMode,\n            numberOfInputs: 2\n        });\n        const inputGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, channelCount, channelCountMode, gain: 1 });\n        const panGainNode = createNativeGainNode(nativeContext, {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete',\n            gain: pan\n        });\n        let outputNodes = buildInternalGraph(nativeContext, channelCount, inputGainNode, panGainNode, channelMergerNode);\n        Object.defineProperty(panGainNode.gain, 'defaultValue', { get: () => 0 });\n        const nativeStereoPannerNodeFakerFactory = {\n            get bufferSize() {\n                return undefined;\n            },\n            get channelCount() {\n                return inputGainNode.channelCount;\n            },\n            set channelCount(value) {\n                if (inputGainNode.channelCount !== value) {\n                    inputGainNode.disconnect();\n                    outputNodes.forEach((outputNode) => outputNode.disconnect());\n                    outputNodes = buildInternalGraph(nativeContext, value, inputGainNode, panGainNode, channelMergerNode);\n                }\n                inputGainNode.channelCount = value;\n            },\n            get channelCountMode() {\n                return inputGainNode.channelCountMode;\n            },\n            set channelCountMode(value) {\n                if (value === 'clamped-max' || value === 'max') {\n                    throw createNotSupportedError();\n                }\n                inputGainNode.channelCountMode = value;\n            },\n            get channelInterpretation() {\n                return inputGainNode.channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                inputGainNode.channelInterpretation = value;\n            },\n            get context() {\n                return inputGainNode.context;\n            },\n            get inputs() {\n                return [inputGainNode];\n            },\n            get numberOfInputs() {\n                return inputGainNode.numberOfInputs;\n            },\n            get numberOfOutputs() {\n                return inputGainNode.numberOfOutputs;\n            },\n            get pan() {\n                return panGainNode.gain;\n            },\n            addEventListener(...args) {\n                return inputGainNode.addEventListener(args[0], args[1], args[2]);\n            },\n            dispatchEvent(...args) {\n                return inputGainNode.dispatchEvent(args[0]);\n            },\n            removeEventListener(...args) {\n                return inputGainNode.removeEventListener(args[0], args[1], args[2]);\n            }\n        };\n        return interceptConnections(nativeStereoPannerNodeFakerFactory, channelMergerNode);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-stereo-panner-node-faker-factory.js.map","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeStereoPannerNodeFactory = (createNativeAudioNode, createNativeStereoPannerNodeFaker, createNotSupportedError) => {\n    return (nativeContext, options) => createNativeAudioNode(nativeContext, (ntvCntxt) => {\n        const channelCountMode = options.channelCountMode;\n        /*\n         * Bug #105: The channelCountMode of 'clamped-max' should be supported. However it is not possible to write a polyfill for Safari\n         * which supports it and therefore it can't be supported at all.\n         */\n        if (channelCountMode === 'clamped-max') {\n            throw createNotSupportedError();\n        }\n        // Bug #105: Safari does not support the StereoPannerNode.\n        if (nativeContext.createStereoPanner === undefined) {\n            return createNativeStereoPannerNodeFaker(nativeContext, options);\n        }\n        const nativeStereoPannerNode = ntvCntxt.createStereoPanner();\n        assignNativeAudioNodeOptions(nativeStereoPannerNode, options);\n        assignNativeAudioNodeAudioParamValue(nativeStereoPannerNode, options, 'pan');\n        /*\n         * Bug #105: The channelCountMode of 'clamped-max' should be supported. However it is not possible to write a polyfill for Safari\n         * which supports it and therefore it can't be supported at all.\n         */\n        Object.defineProperty(nativeStereoPannerNode, 'channelCountMode', {\n            get: () => channelCountMode,\n            set: (value) => {\n                if (value !== channelCountMode) {\n                    throw createNotSupportedError();\n                }\n            }\n        });\n        return nativeStereoPannerNode;\n    });\n};\n//# sourceMappingURL=/build/es2018/factories/native-stereo-panner-node-factory.js.map","import { connectAudioParam } from '../helpers/connect-audio-param';\nimport { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { renderAutomation } from '../helpers/render-automation';\nimport { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nexport const createStereoPannerNodeRendererFactory = (createNativeStereoPannerNode) => {\n    return () => {\n        const renderedNativeStereoPannerNodes = new WeakMap();\n        const createStereoPannerNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeStereoPannerNode = getNativeAudioNode(proxy);\n            /*\n             * If the initially used nativeStereoPannerNode was not constructed on the same OfflineAudioContext it needs to be created\n             * again.\n             */\n            const nativeStereoPannerNodeIsOwnedByContext = isOwnedByContext(nativeStereoPannerNode, nativeOfflineAudioContext);\n            if (!nativeStereoPannerNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeStereoPannerNode.channelCount,\n                    channelCountMode: nativeStereoPannerNode.channelCountMode,\n                    channelInterpretation: nativeStereoPannerNode.channelInterpretation,\n                    pan: nativeStereoPannerNode.pan.value\n                };\n                nativeStereoPannerNode = createNativeStereoPannerNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeStereoPannerNodes.set(nativeOfflineAudioContext, nativeStereoPannerNode);\n            if (!nativeStereoPannerNodeIsOwnedByContext) {\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan);\n            }\n            else {\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.pan);\n            }\n            if (nativeStereoPannerNode.inputs !== undefined) {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode.inputs[0]);\n            }\n            else {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode);\n            }\n            return nativeStereoPannerNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeStereoPannerNode = renderedNativeStereoPannerNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeStereoPannerNode !== undefined) {\n                    return Promise.resolve(renderedNativeStereoPannerNode);\n                }\n                return createStereoPannerNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/stereo-panner-node-renderer-factory.js.map","import { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nexport const createWaveShaperNodeRendererFactory = (createNativeWaveShaperNode) => {\n    return () => {\n        const renderedNativeWaveShaperNodes = new WeakMap();\n        const createWaveShaperNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeWaveShaperNode = getNativeAudioNode(proxy);\n            // If the initially used nativeWaveShaperNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeWaveShaperNodeIsOwnedByContext = isOwnedByContext(nativeWaveShaperNode, nativeOfflineAudioContext);\n            if (!nativeWaveShaperNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeWaveShaperNode.channelCount,\n                    channelCountMode: nativeWaveShaperNode.channelCountMode,\n                    channelInterpretation: nativeWaveShaperNode.channelInterpretation,\n                    curve: nativeWaveShaperNode.curve,\n                    oversample: nativeWaveShaperNode.oversample\n                };\n                nativeWaveShaperNode = createNativeWaveShaperNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeWaveShaperNodes.set(nativeOfflineAudioContext, nativeWaveShaperNode);\n            if (nativeWaveShaperNode.inputs !== undefined) {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeWaveShaperNode.inputs[0]);\n            }\n            else {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeWaveShaperNode);\n            }\n            return nativeWaveShaperNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeWaveShaperNode = renderedNativeWaveShaperNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeWaveShaperNode !== undefined) {\n                    return Promise.resolve(renderedNativeWaveShaperNode);\n                }\n                return createWaveShaperNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/wave-shaper-node-renderer-factory.js.map","export const createIsSecureContext = (window) => (window !== null && window.isSecureContext);\n//# sourceMappingURL=/build/es2018/factories/is-secure-context.js.map","export const createExposeCurrentFrameAndCurrentTime = (window) => {\n    return (nativeContext, fn) => {\n        Object.defineProperties(window, {\n            currentFrame: {\n                configurable: true,\n                get() {\n                    return Math.round(nativeContext.currentTime * nativeContext.sampleRate);\n                }\n            },\n            currentTime: {\n                configurable: true,\n                get() {\n                    return nativeContext.currentTime;\n                }\n            }\n        });\n        try {\n            return fn();\n        }\n        finally {\n            if (window !== null) {\n                delete window.currentFrame;\n                delete window.currentTime;\n            }\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/expose-current-frame-and-current-time.js.map","export const evaluateSource = (source) => {\n    return new Promise((resolve, reject) => {\n        const head = document.head;\n        if (head === null) {\n            reject(new SyntaxError());\n        }\n        else {\n            const script = document.createElement('script');\n            // @todo Safari doesn't like URLs with a type of 'application/javascript; charset=utf-8'.\n            const blob = new Blob([source], { type: 'application/javascript' });\n            const url = URL.createObjectURL(blob);\n            const originalOnErrorHandler = window.onerror;\n            const removeErrorEventListenerAndRevokeUrl = () => {\n                window.onerror = originalOnErrorHandler;\n                URL.revokeObjectURL(url);\n            };\n            window.onerror = (message, src, lineno, colno, error) => {\n                // @todo Edge thinks the source is the one of the html document.\n                if (src === url || (src === location.href && lineno === 1 && colno === 1)) {\n                    removeErrorEventListenerAndRevokeUrl();\n                    reject(error);\n                    return false;\n                }\n                if (originalOnErrorHandler !== null) {\n                    return originalOnErrorHandler(message, src, lineno, colno, error);\n                }\n            };\n            script.onerror = () => {\n                removeErrorEventListenerAndRevokeUrl();\n                reject(new SyntaxError());\n            };\n            script.onload = () => {\n                removeErrorEventListenerAndRevokeUrl();\n                resolve();\n            };\n            script.src = url;\n            script.type = 'module';\n            head.appendChild(script);\n        }\n    });\n};\n//# sourceMappingURL=/build/es2018/helpers/evaluate-source.js.map","export const createFetchSource = (createAbortError) => {\n    return async (url) => {\n        try {\n            const response = await fetch(url);\n            if (response.ok) {\n                return response.text();\n            }\n        }\n        catch ( /* Ignore errors. */_a) { /* Ignore errors. */ } // tslint:disable-line:no-empty\n        throw createAbortError();\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/fetch-source.js.map","export const createIsNativeContext = (isNativeOfflineAudioContext, nativeAudioContextConstructor) => {\n    return (anyContext) => {\n        if (nativeAudioContextConstructor === null) {\n            throw new Error('The native AudioContext constructor is missing.');\n        }\n        return (anyContext instanceof nativeAudioContextConstructor || isNativeOfflineAudioContext(anyContext));\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/is-native-context.js.map","export const createBaseAudioContextConstructor = (addAudioWorkletModule, analyserNodeConstructor, audioBufferConstructor, audioBufferSourceNodeConstructor, biquadFilterNodeConstructor, channelMergerNodeConstructor, channelSplitterNodeConstructor, constantSourceNodeConstructor, convolverNodeConstructor, decodeAudioData, delayNodeConstructor, dynamicsCompressorNodeConstructor, gainNodeConstructor, iIRFilterNodeConstructor, minimalBaseAudioContextConstructor, oscillatorNodeConstructor, pannerNodeConstructor, periodicWaveConstructor, stereoPannerNodeConstructor, waveShaperNodeConstructor) => {\n    return class BaseAudioContext extends minimalBaseAudioContextConstructor {\n        constructor(_nativeContext, numberOfChannels) {\n            super(_nativeContext, numberOfChannels);\n            this._nativeContext = _nativeContext;\n            this._audioWorklet = (addAudioWorkletModule === undefined) ?\n                undefined :\n                { addModule: (moduleURL, options) => addAudioWorkletModule(this, moduleURL, options) };\n        }\n        get audioWorklet() {\n            return this._audioWorklet;\n        }\n        createAnalyser() {\n            return new analyserNodeConstructor(this);\n        }\n        createBiquadFilter() {\n            return new biquadFilterNodeConstructor(this);\n        }\n        createBuffer(numberOfChannels, length, sampleRate) {\n            return new audioBufferConstructor({ length, numberOfChannels, sampleRate });\n        }\n        createBufferSource() {\n            return new audioBufferSourceNodeConstructor(this);\n        }\n        createChannelMerger(numberOfInputs = 6) {\n            return new channelMergerNodeConstructor(this, { numberOfInputs });\n        }\n        createChannelSplitter(numberOfOutputs = 6) {\n            return new channelSplitterNodeConstructor(this, { numberOfOutputs });\n        }\n        createConstantSource() {\n            return new constantSourceNodeConstructor(this);\n        }\n        createConvolver() {\n            return new convolverNodeConstructor(this);\n        }\n        createDelay(maxDelayTime = 1) {\n            return new delayNodeConstructor(this, { maxDelayTime });\n        }\n        createDynamicsCompressor() {\n            return new dynamicsCompressorNodeConstructor(this);\n        }\n        createGain() {\n            return new gainNodeConstructor(this);\n        }\n        createIIRFilter(feedforward, feedback) {\n            return new iIRFilterNodeConstructor(this, { feedback, feedforward });\n        }\n        createOscillator() {\n            return new oscillatorNodeConstructor(this);\n        }\n        createPanner() {\n            return new pannerNodeConstructor(this);\n        }\n        createPeriodicWave(real, imag, constraints = { disableNormalization: false }) {\n            return new periodicWaveConstructor(this, { ...constraints, imag, real });\n        }\n        createStereoPanner() {\n            return new stereoPannerNodeConstructor(this);\n        }\n        createWaveShaper() {\n            return new waveShaperNodeConstructor(this);\n        }\n        decodeAudioData(audioData, successCallback, errorCallback) {\n            return decodeAudioData(this._nativeContext, audioData)\n                .then((audioBuffer) => {\n                if (typeof successCallback === 'function') {\n                    successCallback(audioBuffer);\n                }\n                return audioBuffer;\n            })\n                .catch((err) => {\n                if (typeof errorCallback === 'function') {\n                    errorCallback(err);\n                }\n                throw err; // tslint:disable-line:rxjs-throw-error\n            });\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/base-audio-context-constructor.js.map","import { DETACHED_ARRAY_BUFFERS } from '../globals';\nimport { detachArrayBuffer } from '../helpers/detach-array-buffer';\nimport { getNativeContext } from '../helpers/get-native-context';\nimport { wrapAudioBufferGetChannelDataMethod } from '../helpers/wrap-audio-buffer-get-channel-data-method';\nexport const createDecodeAudioData = (cacheTestResult, createDataCloneError, createEncodingError, nativeOfflineAudioContextConstructor, isNativeContext, isNativeOfflineAudioContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, testAudioBufferCopyChannelMethodsSubarraySupport, testPromiseSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds, wrapAudioBufferCopyChannelMethodsSubarray) => {\n    return (anyContext, audioData) => {\n        const nativeContext = isNativeContext(anyContext) ? anyContext : getNativeContext(anyContext);\n        // Bug #43: Only Chrome and Opera do throw a DataCloneError.\n        if (DETACHED_ARRAY_BUFFERS.has(audioData)) {\n            const err = createDataCloneError();\n            return Promise.reject(err);\n        }\n        // The audioData parameter maybe of a type which can't be added to a WeakSet.\n        try {\n            DETACHED_ARRAY_BUFFERS.add(audioData);\n        }\n        catch (_a) {\n            // Ignore errors.\n        }\n        // Bug #21: Safari does not support promises yet.\n        if (cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeContext))) {\n            // Bug #101: Edge does not decode something on a closed OfflineAudioContext.\n            const nativeContextOrBackupNativeContext = (nativeContext.state === 'closed' &&\n                nativeOfflineAudioContextConstructor !== null &&\n                isNativeOfflineAudioContext(nativeContext)) ?\n                new nativeOfflineAudioContextConstructor(1, 1, nativeContext.sampleRate) :\n                nativeContext;\n            const promise = nativeContextOrBackupNativeContext\n                .decodeAudioData(audioData)\n                .catch((err) => {\n                // Bug #27: Edge is rejecting invalid arrayBuffers with a DOMException.\n                if (err instanceof DOMException && err.name === 'NotSupportedError') {\n                    throw new TypeError();\n                }\n                throw err;\n            });\n            return promise\n                .then((audioBuffer) => {\n                // Bug #42: Firefox does not yet fully support copyFromChannel() and copyToChannel().\n                if (!cacheTestResult(testAudioBufferCopyChannelMethodsSubarraySupport, () => testAudioBufferCopyChannelMethodsSubarraySupport(audioBuffer))) {\n                    wrapAudioBufferCopyChannelMethodsSubarray(audioBuffer);\n                    wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n                    // Bug #157: No browser does allow the bufferOffset to be out-of-bounds.\n                }\n                else if (!cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, () => testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer))) {\n                    wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n                }\n                return audioBuffer;\n            });\n        }\n        // Bug #21: Safari does not return a Promise yet.\n        return new Promise((resolve, reject) => {\n            const complete = () => {\n                // Bug #133: Safari does neuter the ArrayBuffer.\n                try {\n                    detachArrayBuffer(audioData);\n                }\n                catch ( /* Ignore errors. */_a) { /* Ignore errors. */ }\n            };\n            const fail = (err) => {\n                reject(err);\n                complete();\n            };\n            // Bug #26: Safari throws a synchronous error.\n            try {\n                // Bug #1: Safari requires a successCallback.\n                nativeContext.decodeAudioData(audioData, (audioBuffer) => {\n                    // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n                    // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.\n                    if (typeof audioBuffer.copyFromChannel !== 'function') {\n                        wrapAudioBufferCopyChannelMethods(audioBuffer);\n                        wrapAudioBufferGetChannelDataMethod(audioBuffer);\n                    }\n                    complete();\n                    resolve(audioBuffer);\n                }, (err) => {\n                    // Bug #4: Safari returns null instead of an error.\n                    if (err === null) {\n                        fail(createEncodingError());\n                    }\n                    else {\n                        fail(err);\n                    }\n                });\n            }\n            catch (err) {\n                fail(err);\n            }\n        });\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/decode-audio-data.js.map","export const detachArrayBuffer = (arrayBuffer) => {\n    const { port1 } = new MessageChannel();\n    port1.postMessage(arrayBuffer, [arrayBuffer]);\n};\n//# sourceMappingURL=/build/es2018/helpers/detach-array-buffer.js.map","export const createDataCloneError = () => {\n    try {\n        return new DOMException('', 'DataCloneError');\n    }\n    catch (err) {\n        // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.\n        err.code = 25;\n        err.name = 'DataCloneError';\n        return err;\n    }\n};\n//# sourceMappingURL=/build/es2018/factories/data-clone-error.js.map","export const createEncodingError = () => {\n    try {\n        return new DOMException('', 'EncodingError');\n    }\n    catch (err) {\n        // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.\n        err.code = 0;\n        err.name = 'EncodingError';\n        return err;\n    }\n};\n//# sourceMappingURL=/build/es2018/factories/encoding-error.js.map","import { getNativeContext } from '../helpers/get-native-context';\nexport const createMediaElementAudioSourceNodeConstructor = (createNativeMediaElementAudioSourceNode, createNotSupportedError, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class MediaElementAudioSourceNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options) {\n            const nativeContext = getNativeContext(context);\n            if (isNativeOfflineAudioContext(nativeContext)) {\n                throw createNotSupportedError();\n            }\n            const nativeMediaElementAudioSourceNode = createNativeMediaElementAudioSourceNode(nativeContext, options);\n            super(context, 'active', nativeMediaElementAudioSourceNode, null);\n            // Bug #63: Edge & Firefox do not expose the mediaElement yet.\n            this._mediaElement = options.mediaElement;\n            this._nativeMediaElementAudioSourceNode = nativeMediaElementAudioSourceNode;\n        }\n        get mediaElement() {\n            return (this._nativeMediaElementAudioSourceNode.mediaElement === undefined) ?\n                this._mediaElement :\n                this._nativeMediaElementAudioSourceNode.mediaElement;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/media-element-audio-source-node-constructor.js.map","export const createNativeMediaElementAudioSourceNodeFactory = (createNativeAudioNode) => {\n    return (nativeAudioContext, options) => createNativeAudioNode(nativeAudioContext, (ntvDCntxt) => {\n        return ntvDCntxt.createMediaElementSource(options.mediaElement);\n    });\n};\n//# sourceMappingURL=/build/es2018/factories/native-media-element-audio-source-node-factory.js.map","import { getNativeContext } from '../helpers/get-native-context';\nexport const createMediaStreamAudioSourceNodeConstructor = (createNativeMediaStreamAudioSourceNode, createNotSupportedError, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class MediaStreamAudioSourceNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options) {\n            const nativeContext = getNativeContext(context);\n            if (isNativeOfflineAudioContext(nativeContext)) {\n                throw createNotSupportedError();\n            }\n            const nativeMediaStreamAudioSourceNode = createNativeMediaStreamAudioSourceNode(nativeContext, options);\n            super(context, 'active', nativeMediaStreamAudioSourceNode, null);\n            this._nativeMediaStreamAudioSourceNode = nativeMediaStreamAudioSourceNode;\n        }\n        get mediaStream() {\n            return this._nativeMediaStreamAudioSourceNode.mediaStream;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/media-stream-audio-source-node-constructor.js.map","export const createNativeMediaStreamAudioSourceNodeFactory = (createInvalidStateError, createNativeAudioNode) => {\n    return (nativeAudioContext, { mediaStream }) => {\n        const audioStreamTracks = mediaStream.getAudioTracks();\n        const nativeMediaStreamAudioSourceNode = createNativeAudioNode(nativeAudioContext, (ntvDCntxt) => {\n            /*\n             * Bug #151: Firefox does not use the audio track as input anymore if it gets removed from the mediaStream after construction.\n             * Bug #159: Chrome and Firefox pick the first audio track if the MediaStream has more than one audio track.\n             */\n            const filteredAudioStreamTracks = audioStreamTracks\n                .sort((a, b) => ((a.id < b.id) ? -1 : (a.id > b.id) ? 1 : 0))\n                .slice(0, 1);\n            return ntvDCntxt.createMediaStreamSource(new MediaStream(filteredAudioStreamTracks));\n        });\n        // Bug #120: Firefox does not throw an error if the mediaStream has no audio track.\n        if (audioStreamTracks.length === 0) {\n            throw createInvalidStateError();\n        }\n        // Bug #63: Edge & Firefox do not expose the mediaStream yet.\n        Object.defineProperty(nativeMediaStreamAudioSourceNode, 'mediaStream', { value: mediaStream });\n        return nativeMediaStreamAudioSourceNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-media-stream-audio-source-node-factory.js.map","import { getNativeContext } from '../helpers/get-native-context';\nexport const createMediaStreamTrackAudioSourceNodeConstructor = (createNativeMediaStreamTrackAudioSourceNode, createNotSupportedError, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class MediaStreamTrackAudioSourceNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options) {\n            const nativeContext = getNativeContext(context);\n            if (isNativeOfflineAudioContext(nativeContext)) {\n                throw createNotSupportedError();\n            }\n            const nativeMediaStreamTrackAudioSourceNode = createNativeMediaStreamTrackAudioSourceNode(nativeContext, options);\n            super(context, 'active', nativeMediaStreamTrackAudioSourceNode, null);\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/media-stream-track-audio-source-node-constructor.js.map","export const createNativeMediaStreamTrackAudioSourceNodeFactory = (createInvalidStateError, createNativeAudioNode) => {\n    return (nativeAudioContext, { mediaStreamTrack }) => {\n        if (typeof nativeAudioContext.createMediaStreamTrackSource === 'function') {\n            return createNativeAudioNode(nativeAudioContext, (ntvDCntxt) => ntvDCntxt.createMediaStreamTrackSource(mediaStreamTrack));\n        }\n        // Bug #121: Only Firefox does yet support the MediaStreamTrackAudioSourceNode.\n        return createNativeAudioNode(nativeAudioContext, (ntvDCntxt) => {\n            const mediaStream = new MediaStream([mediaStreamTrack]);\n            const nativeMediaStreamAudioSourceNode = ntvDCntxt.createMediaStreamSource(mediaStream);\n            // Bug #120: Firefox does not throw an error if the mediaStream has no audio track.\n            if (mediaStreamTrack.kind !== 'audio') {\n                throw createInvalidStateError();\n            }\n            return nativeMediaStreamAudioSourceNode;\n        });\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-media-stream-track-audio-source-node-factory.js.map","import { isValidLatencyHint } from '../helpers/is-valid-latency-hint';\nexport const createAudioContextConstructor = (baseAudioContextConstructor, createInvalidStateError, createNotSupportedError, createUnknownError, mediaElementAudioSourceNodeConstructor, mediaStreamAudioSourceNodeConstructor, mediaStreamTrackAudioSourceNodeConstructor, nativeAudioContextConstructor) => {\n    return class AudioContext extends baseAudioContextConstructor {\n        constructor(options = {}) {\n            if (nativeAudioContextConstructor === null) {\n                throw new Error('Missing the native AudioContext constructor.');\n            }\n            const nativeAudioContext = new nativeAudioContextConstructor(options);\n            // Bug #131 Safari returns null when there are four other AudioContexts running already.\n            if (nativeAudioContext === null) {\n                throw createUnknownError();\n            }\n            // Bug #51 Only Chrome and Opera throw an error if the given latencyHint is invalid.\n            if (!isValidLatencyHint(options.latencyHint)) {\n                throw new TypeError(`The provided value '${options.latencyHint}' is not a valid enum value of type AudioContextLatencyCategory.`);\n            }\n            // Bug #150 Only Chrome, Firefox and Opera support setting the sampleRate.\n            if (options.sampleRate !== undefined && nativeAudioContext.sampleRate !== options.sampleRate) {\n                throw createNotSupportedError();\n            }\n            super(nativeAudioContext, nativeAudioContext.destination.channelCount);\n            const { latencyHint } = options;\n            const { sampleRate } = nativeAudioContext;\n            // @todo The values for 'balanced', 'interactive' and 'playback' are just copied from Chrome's implementation.\n            this._baseLatency = (typeof nativeAudioContext.baseLatency === 'number')\n                ? nativeAudioContext.baseLatency\n                : (latencyHint === 'balanced')\n                    ? (512 / sampleRate)\n                    : (latencyHint === 'interactive' || latencyHint === undefined)\n                        ? (256 / sampleRate)\n                        : (latencyHint === 'playback')\n                            ? (1024 / sampleRate)\n                            /*\n                             * @todo The min (256) and max (16384) values are taken from the allowed bufferSize values of a\n                             * ScriptProcessorNode.\n                             */\n                            : ((Math.max(2, Math.min(128, Math.round((latencyHint * sampleRate) / 128))) * 128) / sampleRate);\n            this._nativeAudioContext = nativeAudioContext;\n            this._state = null;\n            /*\n             * Bug #34: Chrome and Opera pretend to be running right away, but fire an onstatechange event when the state actually changes\n             * to 'running'.\n             */\n            if (nativeAudioContext.state === 'running') {\n                this._state = 'suspended';\n                const revokeState = () => {\n                    if (this._state === 'suspended') {\n                        this._state = null;\n                    }\n                    nativeAudioContext.removeEventListener('statechange', revokeState);\n                };\n                nativeAudioContext.addEventListener('statechange', revokeState);\n            }\n        }\n        get baseLatency() {\n            return this._baseLatency;\n        }\n        get state() {\n            return (this._state !== null) ? this._state : this._nativeAudioContext.state;\n        }\n        close() {\n            // Bug #35: Firefox does not throw an error if the AudioContext was closed before.\n            if (this.state === 'closed') {\n                return this._nativeAudioContext\n                    .close()\n                    .then(() => {\n                    throw createInvalidStateError();\n                });\n            }\n            // Bug #34: If the state was set to suspended before it should be revoked now.\n            if (this._state === 'suspended') {\n                this._state = null;\n            }\n            return this._nativeAudioContext.close();\n            /*\n             * Bug #50: Deleting the AudioGraph is currently not possible anymore.\n             * ...then(() => deleteAudioGraph(this, this._nativeAudioContext));\n             */\n        }\n        createMediaElementSource(mediaElement) {\n            return new mediaElementAudioSourceNodeConstructor(this, { mediaElement });\n        }\n        createMediaStreamSource(mediaStream) {\n            return new mediaStreamAudioSourceNodeConstructor(this, { mediaStream });\n        }\n        createMediaStreamTrackSource(mediaStreamTrack) {\n            return new mediaStreamTrackAudioSourceNodeConstructor(this, { mediaStreamTrack });\n        }\n        resume() {\n            if (this._state === 'suspended') {\n                return new Promise((resolve, reject) => {\n                    const resolvePromise = () => {\n                        this._nativeAudioContext.removeEventListener('statechange', resolvePromise);\n                        if (this._nativeAudioContext.state === 'running') {\n                            resolve();\n                        }\n                        else {\n                            this\n                                .resume()\n                                .then(resolve, reject);\n                        }\n                    };\n                    this._nativeAudioContext.addEventListener('statechange', resolvePromise);\n                });\n            }\n            return this._nativeAudioContext\n                .resume()\n                .catch((err) => {\n                // Bug #55: Chrome, Edge and Opera do throw an InvalidAccessError instead of an InvalidStateError.\n                // Bug #56: Safari invokes the catch handler but without an error.\n                if (err === undefined || err.code === 15) {\n                    throw createInvalidStateError();\n                }\n                throw err; // tslint:disable-line:rxjs-throw-error\n            });\n        }\n        suspend() {\n            return this._nativeAudioContext\n                .suspend()\n                .catch((err) => {\n                // Bug #56: Safari invokes the catch handler but without an error.\n                if (err === undefined) {\n                    throw createInvalidStateError();\n                }\n                throw err; // tslint:disable-line:rxjs-throw-error\n            });\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-context-constructor.js.map","import { isNativeAudioNode } from '../guards/native-audio-node';\nexport const createConnectMultipleOutputs = (createIndexSizeError) => {\n    return (outputAudioNodes, destination, output = 0, input = 0) => {\n        const outputAudioNode = outputAudioNodes[output];\n        if (outputAudioNode === undefined) {\n            throw createIndexSizeError();\n        }\n        if (isNativeAudioNode(destination)) {\n            return outputAudioNode.connect(destination, 0, input);\n        }\n        return outputAudioNode.connect(destination, 0);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/connect-multiple-outputs.js.map","import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { AUXILIARY_GAIN_NODE_STORE } from '../globals';\nimport { computeBufferSize } from '../helpers/compute-buffer-size';\nimport { copyFromChannel } from '../helpers/copy-from-channel';\nimport { copyToChannel } from '../helpers/copy-to-channel';\nimport { createAudioWorkletProcessor } from '../helpers/create-audio-worklet-processor';\nimport { createNestedArrays } from '../helpers/create-nested-arrays';\nimport { ReadOnlyMap } from '../read-only-map';\nexport const createNativeAudioWorkletNodeFakerFactory = (connectMultipleOutputs, createIndexSizeError, createInvalidStateError, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, createNativeScriptProcessorNode, createNotSupportedError, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime) => {\n    return (nativeContext, baseLatency, processorConstructor, options) => {\n        if (options.numberOfInputs === 0 && options.numberOfOutputs === 0) {\n            throw createNotSupportedError();\n        }\n        if (options.outputChannelCount !== undefined) {\n            if (options.outputChannelCount.length !== options.numberOfOutputs) {\n                throw createIndexSizeError();\n            }\n            // @todo Check if any of the channelCount values is greater than the implementation's maximum number of channels.\n            if (options.outputChannelCount.some((channelCount) => (channelCount < 1))) {\n                throw createNotSupportedError();\n            }\n        }\n        // Bug #61: This is not part of the standard but required for the faker to work.\n        if (options.channelCountMode !== 'explicit') {\n            throw createNotSupportedError();\n        }\n        const numberOfInputChannels = options.channelCount * options.numberOfInputs;\n        const numberOfOutputChannels = options.outputChannelCount.reduce((sum, value) => sum + value, 0);\n        const numberOfParameters = (processorConstructor.parameterDescriptors === undefined)\n            ? 0\n            : processorConstructor.parameterDescriptors.length;\n        // Bug #61: This is not part of the standard but required for the faker to work.\n        if (numberOfInputChannels + numberOfParameters > 6 || numberOfOutputChannels > 6) {\n            throw createNotSupportedError();\n        }\n        const messageChannel = new MessageChannel();\n        const gainNodes = [];\n        const inputChannelSplitterNodes = [];\n        for (let i = 0; i < options.numberOfInputs; i += 1) {\n            gainNodes.push(createNativeGainNode(nativeContext, {\n                channelCount: options.channelCount,\n                channelCountMode: options.channelCountMode,\n                channelInterpretation: options.channelInterpretation,\n                gain: 1\n            }));\n            inputChannelSplitterNodes.push(createNativeChannelSplitterNode(nativeContext, {\n                channelCount: options.channelCount,\n                channelCountMode: 'explicit',\n                channelInterpretation: 'discrete',\n                numberOfOutputs: options.channelCount\n            }));\n        }\n        const constantSourceNodes = [];\n        if (processorConstructor.parameterDescriptors !== undefined) {\n            for (const { defaultValue, maxValue, minValue, name } of processorConstructor.parameterDescriptors) {\n                const constantSourceNode = createNativeConstantSourceNode(nativeContext, {\n                    channelCount: 1,\n                    channelCountMode: 'explicit',\n                    channelInterpretation: 'discrete',\n                    offset: (options.parameterData[name] !== undefined)\n                        ? options.parameterData[name]\n                        : (defaultValue === undefined)\n                            ? 0\n                            : defaultValue\n                });\n                Object.defineProperties(constantSourceNode.offset, {\n                    defaultValue: {\n                        get: () => (defaultValue === undefined) ? 0 : defaultValue\n                    },\n                    maxValue: {\n                        get: () => (maxValue === undefined) ? MOST_POSITIVE_SINGLE_FLOAT : maxValue\n                    },\n                    minValue: {\n                        get: () => (minValue === undefined) ? MOST_NEGATIVE_SINGLE_FLOAT : minValue\n                    }\n                });\n                constantSourceNodes.push(constantSourceNode);\n            }\n        }\n        const inputChannelMergerNode = createNativeChannelMergerNode(nativeContext, {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'speakers',\n            numberOfInputs: Math.max(1, numberOfInputChannels + numberOfParameters)\n        });\n        const bufferSize = computeBufferSize(baseLatency, nativeContext.sampleRate);\n        const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, bufferSize, numberOfInputChannels + numberOfParameters, \n        // Bug #87: Only Firefox will fire an AudioProcessingEvent if there is no connected output.\n        Math.max(1, numberOfOutputChannels));\n        const outputChannelSplitterNode = createNativeChannelSplitterNode(nativeContext, {\n            channelCount: Math.max(1, numberOfOutputChannels),\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete',\n            numberOfOutputs: Math.max(1, numberOfOutputChannels)\n        });\n        const outputChannelMergerNodes = [];\n        for (let i = 0; i < options.numberOfOutputs; i += 1) {\n            outputChannelMergerNodes.push(createNativeChannelMergerNode(nativeContext, {\n                channelCount: 1,\n                channelCountMode: 'explicit',\n                channelInterpretation: 'speakers',\n                numberOfInputs: options.outputChannelCount[i]\n            }));\n        }\n        for (let i = 0; i < options.numberOfInputs; i += 1) {\n            gainNodes[i].connect(inputChannelSplitterNodes[i]);\n            for (let j = 0; j < options.channelCount; j += 1) {\n                inputChannelSplitterNodes[i].connect(inputChannelMergerNode, j, (i * options.channelCount) + j);\n            }\n        }\n        const parameterMap = new ReadOnlyMap((processorConstructor.parameterDescriptors === undefined)\n            ? []\n            : processorConstructor.parameterDescriptors\n                .map(({ name }, index) => {\n                const constantSourceNode = constantSourceNodes[index];\n                constantSourceNode.connect(inputChannelMergerNode, 0, numberOfInputChannels + index);\n                constantSourceNode.start(0);\n                return [name, constantSourceNode.offset];\n            }));\n        inputChannelMergerNode.connect(scriptProcessorNode);\n        if (options.numberOfOutputs > 0) {\n            scriptProcessorNode.connect(outputChannelSplitterNode);\n        }\n        for (let i = 0, outputChannelSplitterNodeOutput = 0; i < options.numberOfOutputs; i += 1) {\n            const outputChannelMergerNode = outputChannelMergerNodes[i];\n            for (let j = 0; j < options.outputChannelCount[i]; j += 1) {\n                outputChannelSplitterNode.connect(outputChannelMergerNode, outputChannelSplitterNodeOutput + j, j);\n            }\n            outputChannelSplitterNodeOutput += options.outputChannelCount[i];\n        }\n        let channelInterpretation = options.channelInterpretation;\n        let onprocessorerror = null;\n        // Bug #87: Expose at least one output to make this node connectable.\n        const outputAudioNodes = (options.numberOfOutputs === 0) ? [scriptProcessorNode] : outputChannelMergerNodes;\n        const nativeAudioWorkletNodeFaker = {\n            get bufferSize() {\n                return bufferSize;\n            },\n            get channelCount() {\n                return options.channelCount;\n            },\n            set channelCount(_) {\n                // Bug #61: This is not part of the standard but required for the faker to work.\n                throw createInvalidStateError();\n            },\n            get channelCountMode() {\n                return options.channelCountMode;\n            },\n            set channelCountMode(_) {\n                // Bug #61: This is not part of the standard but required for the faker to work.\n                throw createInvalidStateError();\n            },\n            get channelInterpretation() {\n                return channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                for (const gainNode of gainNodes) {\n                    gainNode.channelInterpretation = value;\n                }\n                channelInterpretation = value;\n            },\n            get context() {\n                return scriptProcessorNode.context;\n            },\n            get inputs() {\n                return gainNodes;\n            },\n            get numberOfInputs() {\n                return options.numberOfInputs;\n            },\n            get numberOfOutputs() {\n                return options.numberOfOutputs;\n            },\n            get onprocessorerror() {\n                return onprocessorerror;\n            },\n            set onprocessorerror(value) {\n                if (typeof onprocessorerror === 'function') {\n                    nativeAudioWorkletNodeFaker.removeEventListener('processorerror', onprocessorerror);\n                }\n                onprocessorerror = (typeof value === 'function') ? value : null;\n                if (typeof onprocessorerror === 'function') {\n                    nativeAudioWorkletNodeFaker.addEventListener('processorerror', onprocessorerror);\n                }\n            },\n            get parameters() {\n                return parameterMap;\n            },\n            get port() {\n                return messageChannel.port2;\n            },\n            addEventListener(...args) {\n                return scriptProcessorNode.addEventListener(args[0], args[1], args[2]);\n            },\n            connect: connectMultipleOutputs.bind(null, outputAudioNodes),\n            disconnect: disconnectMultipleOutputs.bind(null, outputAudioNodes),\n            dispatchEvent(...args) {\n                return scriptProcessorNode.dispatchEvent(args[0]);\n            },\n            removeEventListener(...args) {\n                return scriptProcessorNode.removeEventListener(args[0], args[1], args[2]);\n            }\n        };\n        const patchedEventListeners = new Map(); // tslint:disable-line:max-line-length\n        messageChannel.port1.addEventListener = ((addEventListener) => {\n            return (...args) => {\n                if (args[0] === 'message') {\n                    const unpatchedEventListener = (typeof args[1] === 'function')\n                        ? args[1]\n                        : (typeof args[1] === 'object' && args[1] !== null && typeof args[1].handleEvent === 'function')\n                            ? args[1].handleEvent\n                            : null;\n                    if (unpatchedEventListener !== null) {\n                        const patchedEventListener = patchedEventListeners.get(args[1]);\n                        if (patchedEventListener !== undefined) {\n                            args[1] = patchedEventListener;\n                        }\n                        else {\n                            args[1] = (event) => {\n                                exposeCurrentFrameAndCurrentTime(nativeContext, () => unpatchedEventListener(event));\n                            };\n                            patchedEventListeners.set(unpatchedEventListener, args[1]);\n                        }\n                    }\n                }\n                return addEventListener.call(messageChannel.port1, args[0], args[1], args[2]);\n            };\n        })(messageChannel.port1.addEventListener);\n        messageChannel.port1.removeEventListener = ((removeEventListener) => {\n            return (...args) => {\n                if (args[0] === 'message') {\n                    const patchedEventListener = patchedEventListeners.get(args[1]);\n                    if (patchedEventListener !== undefined) {\n                        patchedEventListeners.delete(args[1]);\n                        args[1] = patchedEventListener;\n                    }\n                }\n                return removeEventListener.call(messageChannel.port1, args[0], args[1], args[2]);\n            };\n        })(messageChannel.port1.removeEventListener);\n        let onmessage = null;\n        Object.defineProperty(messageChannel.port1, 'onmessage', {\n            get: () => onmessage,\n            set: (value) => {\n                if (typeof onmessage === 'function') {\n                    messageChannel.port1.removeEventListener('message', onmessage);\n                }\n                onmessage = (typeof value === 'function') ? value : null;\n                if (typeof onmessage === 'function') {\n                    messageChannel.port1.addEventListener('message', onmessage);\n                    messageChannel.port1.start();\n                }\n            }\n        });\n        processorConstructor.prototype.port = messageChannel.port1;\n        let audioWorkletProcessor = null;\n        const audioWorkletProcessorPromise = createAudioWorkletProcessor(nativeContext, nativeAudioWorkletNodeFaker, processorConstructor, options);\n        audioWorkletProcessorPromise\n            .then((dWrkltPrcssr) => audioWorkletProcessor = dWrkltPrcssr);\n        const inputs = createNestedArrays(options.numberOfInputs, options.channelCount);\n        const outputs = createNestedArrays(options.numberOfOutputs, options.outputChannelCount);\n        const parameters = (processorConstructor.parameterDescriptors === undefined) ?\n            [] :\n            processorConstructor.parameterDescriptors\n                .reduce((prmtrs, { name }) => ({ ...prmtrs, [name]: new Float32Array(128) }), {});\n        let isActive = true;\n        scriptProcessorNode.onaudioprocess = ({ inputBuffer, outputBuffer }) => {\n            if (audioWorkletProcessor !== null) {\n                for (let i = 0; i < bufferSize; i += 128) {\n                    for (let j = 0; j < options.numberOfInputs; j += 1) {\n                        for (let k = 0; k < options.channelCount; k += 1) {\n                            copyFromChannel(inputBuffer, inputs[j], k, k, i);\n                        }\n                    }\n                    if (processorConstructor.parameterDescriptors !== undefined) {\n                        processorConstructor.parameterDescriptors.forEach(({ name }, index) => {\n                            copyFromChannel(inputBuffer, parameters, name, numberOfInputChannels + index, i);\n                        });\n                    }\n                    for (let j = 0; j < options.numberOfInputs; j += 1) {\n                        for (let k = 0; k < options.outputChannelCount[j]; k += 1) {\n                            // The byteLength will be 0 when the ArrayBuffer was transferred.\n                            if (outputs[j][k].byteLength === 0) {\n                                outputs[j][k] = new Float32Array(128);\n                            }\n                        }\n                    }\n                    try {\n                        const potentiallyEmptyInputs = inputs\n                            .map((input, index) => {\n                            const auxiliaryGainNodes = AUXILIARY_GAIN_NODE_STORE.get(nativeAudioWorkletNodeFaker);\n                            if (auxiliaryGainNodes === undefined || auxiliaryGainNodes.get(index) === undefined) {\n                                return [new Float32Array(0)];\n                            }\n                            return input;\n                        });\n                        const activeSourceFlag = exposeCurrentFrameAndCurrentTime(nativeContext, () => audioWorkletProcessor.process(potentiallyEmptyInputs, outputs, parameters));\n                        isActive = activeSourceFlag;\n                        for (let j = 0, outputChannelSplitterNodeOutput = 0; j < options.numberOfOutputs; j += 1) {\n                            for (let k = 0; k < options.outputChannelCount[j]; k += 1) {\n                                copyToChannel(outputBuffer, outputs[j], k, outputChannelSplitterNodeOutput + k, i);\n                            }\n                            outputChannelSplitterNodeOutput += options.outputChannelCount[j];\n                        }\n                    }\n                    catch (error) {\n                        isActive = false;\n                        nativeAudioWorkletNodeFaker.dispatchEvent(new ErrorEvent('processorerror', { error }));\n                    }\n                    if (!isActive) {\n                        scriptProcessorNode.onaudioprocess = null; // tslint:disable-line:deprecation\n                        break;\n                    }\n                }\n            }\n        };\n        return nativeAudioWorkletNodeFaker;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-audio-worklet-node-faker-factory.js.map","import { NODE_TO_PROCESSOR_MAPS } from '../globals';\nimport { createAudioWorkletProcessorPromise } from './create-audio-worklet-processor-promise';\nexport const createAudioWorkletProcessor = (nativeContext, nativeAudioWorkletNode, processorConstructor, audioWorkletNodeOptions) => {\n    let nodeToProcessorMap = NODE_TO_PROCESSOR_MAPS.get(nativeContext);\n    if (nodeToProcessorMap === undefined) {\n        nodeToProcessorMap = new WeakMap();\n        NODE_TO_PROCESSOR_MAPS.set(nativeContext, nodeToProcessorMap);\n    }\n    const audioWorkletProcessorPromise = createAudioWorkletProcessorPromise(processorConstructor, audioWorkletNodeOptions);\n    nodeToProcessorMap.set(nativeAudioWorkletNode, audioWorkletProcessorPromise);\n    return audioWorkletProcessorPromise;\n};\n//# sourceMappingURL=/build/es2018/helpers/create-audio-worklet-processor.js.map","import { testClonabilityOfAudioWorkletNodeOptions } from '../helpers/test-clonability-of-audio-worklet-node-options';\nexport const createNativeAudioWorkletNodeFactory = (createInvalidStateError, createNativeAudioNode, createNativeAudioWorkletNodeFaker, createNotSupportedError, isNativeOfflineAudioContext) => {\n    return (nativeContext, baseLatency, nativeAudioWorkletNodeConstructor, name, processorConstructor, options) => {\n        if (nativeAudioWorkletNodeConstructor !== null) {\n            try {\n                // Bug #86: Chrome Canary does not invoke the process() function if the corresponding AudioWorkletNode has no output.\n                const nativeAudioWorkletNode = createNativeAudioNode(nativeContext, (ntvCntxt) => {\n                    return (isNativeOfflineAudioContext(ntvCntxt) && options.numberOfInputs !== 0 && options.numberOfOutputs === 0) ?\n                        new nativeAudioWorkletNodeConstructor(ntvCntxt, name, {\n                            ...options,\n                            numberOfOutputs: 1,\n                            outputChannelCount: [1],\n                            parameterData: { ...options.parameterData, hasNoOutput: 1 }\n                        }) :\n                        new nativeAudioWorkletNodeConstructor(ntvCntxt, name, options);\n                });\n                const patchedEventListeners = new Map(); // tslint:disable-line:max-line-length\n                let onprocessorerror = null;\n                Object.defineProperties(nativeAudioWorkletNode, {\n                    /*\n                     * Bug #61: Overwriting the property accessors for channelCount and channelCountMode is necessary as long as some\n                     * browsers have no native implementation to achieve a consistent behavior.\n                     */\n                    channelCount: {\n                        get: () => options.channelCount,\n                        set: () => {\n                            throw createInvalidStateError();\n                        }\n                    },\n                    channelCountMode: {\n                        get: () => 'explicit',\n                        set: () => {\n                            throw createInvalidStateError();\n                        }\n                    },\n                    // Bug #156: Chrome does not yet fire an ErrorEvent.\n                    onprocessorerror: {\n                        get: () => onprocessorerror,\n                        set: (value) => {\n                            if (typeof onprocessorerror === 'function') {\n                                nativeAudioWorkletNode.removeEventListener('processorerror', onprocessorerror);\n                            }\n                            onprocessorerror = (typeof value === 'function') ? value : null;\n                            if (typeof onprocessorerror === 'function') {\n                                nativeAudioWorkletNode.addEventListener('processorerror', onprocessorerror);\n                            }\n                        }\n                    }\n                });\n                nativeAudioWorkletNode.addEventListener = ((addEventListener) => {\n                    return (...args) => {\n                        if (args[0] === 'processorerror') {\n                            const unpatchedEventListener = (typeof args[1] === 'function')\n                                ? args[1]\n                                : (typeof args[1] === 'object' && args[1] !== null && typeof args[1].handleEvent === 'function')\n                                    ? args[1].handleEvent\n                                    : null;\n                            if (unpatchedEventListener !== null) {\n                                const patchedEventListener = patchedEventListeners.get(args[1]);\n                                if (patchedEventListener !== undefined) {\n                                    args[1] = patchedEventListener;\n                                }\n                                else {\n                                    args[1] = (event) => {\n                                        unpatchedEventListener(new ErrorEvent(args[0], { ...event, error: new Error( /* @todo */) }));\n                                    };\n                                    patchedEventListeners.set(unpatchedEventListener, args[1]);\n                                }\n                            }\n                        }\n                        return addEventListener.call(nativeAudioWorkletNode, args[0], args[1], args[2]);\n                    };\n                })(nativeAudioWorkletNode.addEventListener);\n                nativeAudioWorkletNode.removeEventListener = ((removeEventListener) => {\n                    return (...args) => {\n                        if (args[0] === 'processorerror') {\n                            const patchedEventListener = patchedEventListeners.get(args[1]);\n                            if (patchedEventListener !== undefined) {\n                                patchedEventListeners.delete(args[1]);\n                                args[1] = patchedEventListener;\n                            }\n                        }\n                        return removeEventListener.call(nativeAudioWorkletNode, args[0], args[1], args[2]);\n                    };\n                })(nativeAudioWorkletNode.removeEventListener);\n                return nativeAudioWorkletNode;\n            }\n            catch (err) {\n                // Bug #60: Chrome Canary throws an InvalidStateError instead of a NotSupportedError.\n                if (err.code === 11) {\n                    throw createNotSupportedError();\n                }\n                throw err; // tslint:disable-line:rxjs-throw-error\n            }\n        }\n        // Bug #61: Only Chrome & Opera have an implementation of the AudioWorkletNode yet.\n        if (processorConstructor === undefined) {\n            throw createNotSupportedError();\n        }\n        testClonabilityOfAudioWorkletNodeOptions(options);\n        return createNativeAudioWorkletNodeFaker(nativeContext, baseLatency, processorConstructor, options);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-audio-worklet-node-factory.js.map","export const testClonabilityOfAudioWorkletNodeOptions = (audioWorkletNodeOptions) => {\n    const { port1 } = new MessageChannel();\n    try {\n        // This will throw an error if the audioWorkletNodeOptions are not clonable.\n        port1.postMessage(audioWorkletNodeOptions);\n    }\n    finally {\n        port1.close();\n    }\n};\n//# sourceMappingURL=/build/es2018/helpers/test-clonability-of-audio-worklet-node-options.js.map","export const createNativeAudioWorkletNodeConstructor = (window) => {\n    if (window === null) {\n        return null;\n    }\n    return (window.hasOwnProperty('AudioWorkletNode')) ? window.AudioWorkletNode : null;\n};\n//# sourceMappingURL=/build/es2018/factories/native-audio-worklet-node-constructor.js.map","import { isValidLatencyHint } from '../helpers/is-valid-latency-hint';\nexport const createMinimalAudioContextConstructor = (createInvalidStateError, createNotSupportedError, createUnknownError, minimalBaseAudioContextConstructor, nativeAudioContextConstructor) => {\n    return class MinimalAudioContext extends minimalBaseAudioContextConstructor {\n        constructor(options = {}) {\n            if (nativeAudioContextConstructor === null) {\n                throw new Error('Missing the native AudioContext constructor.');\n            }\n            const nativeAudioContext = new nativeAudioContextConstructor(options);\n            // Bug #131 Safari returns null when there are four other AudioContexts running already.\n            if (nativeAudioContext === null) {\n                throw createUnknownError();\n            }\n            // Bug #51 Only Chrome and Opera throw an error if the given latencyHint is invalid.\n            if (!isValidLatencyHint(options.latencyHint)) {\n                throw new TypeError(`The provided value '${options.latencyHint}' is not a valid enum value of type AudioContextLatencyCategory.`);\n            }\n            // Bug #150 Only Chrome, Firefox and Opera support setting the sampleRate.\n            if (options.sampleRate !== undefined && nativeAudioContext.sampleRate !== options.sampleRate) {\n                throw createNotSupportedError();\n            }\n            super(nativeAudioContext, nativeAudioContext.destination.channelCount);\n            const { latencyHint } = options;\n            const { sampleRate } = nativeAudioContext;\n            // @todo The values for 'balanced', 'interactive' and 'playback' are just copied from Chrome's implementation.\n            this._baseLatency = (typeof nativeAudioContext.baseLatency === 'number')\n                ? nativeAudioContext.baseLatency\n                : (latencyHint === 'balanced')\n                    ? (512 / sampleRate)\n                    : (latencyHint === 'interactive' || latencyHint === undefined)\n                        ? (256 / sampleRate)\n                        : (latencyHint === 'playback')\n                            ? (1024 / sampleRate)\n                            /*\n                             * @todo The min (256) and max (16384) values are taken from the allowed bufferSize values of a\n                             * ScriptProcessorNode.\n                             */\n                            : ((Math.max(2, Math.min(128, Math.round((latencyHint * sampleRate) / 128))) * 128) / sampleRate);\n            this._nativeAudioContext = nativeAudioContext;\n            this._state = null;\n            /*\n             * Bug #34: Chrome and Opera pretend to be running right away, but fire an onstatechange event when the state actually\n             * changes to 'running'.\n             */\n            if (nativeAudioContext.state === 'running') {\n                this._state = 'suspended';\n                const revokeState = () => {\n                    if (this._state === 'suspended') {\n                        this._state = null;\n                    }\n                    nativeAudioContext.removeEventListener('statechange', revokeState);\n                };\n                nativeAudioContext.addEventListener('statechange', revokeState);\n            }\n        }\n        get baseLatency() {\n            return this._baseLatency;\n        }\n        get state() {\n            return (this._state !== null) ? this._state : this._nativeAudioContext.state;\n        }\n        close() {\n            // Bug #35: Firefox does not throw an error if the AudioContext was closed before.\n            if (this.state === 'closed') {\n                return this._nativeAudioContext\n                    .close()\n                    .then(() => {\n                    throw createInvalidStateError();\n                });\n            }\n            // Bug #34: If the state was set to suspended before it should be revoked now.\n            if (this._state === 'suspended') {\n                this._state = null;\n            }\n            return this._nativeAudioContext.close();\n            /*\n             * Bug #50: Deleting the AudioGraph is currently not possible anymore.\n             * ...then(() => deleteAudioGraph(this, this._nativeAudioContext));\n             */\n        }\n        resume() {\n            if (this._state === 'suspended') {\n                return new Promise((resolve, reject) => {\n                    const resolvePromise = () => {\n                        this._nativeAudioContext.removeEventListener('statechange', resolvePromise);\n                        if (this._nativeAudioContext.state === 'running') {\n                            resolve();\n                        }\n                        else {\n                            this\n                                .resume()\n                                .then(resolve, reject);\n                        }\n                    };\n                    this._nativeAudioContext.addEventListener('statechange', resolvePromise);\n                });\n            }\n            return this._nativeAudioContext\n                .resume()\n                .catch((err) => {\n                // Bug #55: Chrome, Edge and Opera do throw an InvalidAccessError instead of an InvalidStateError.\n                // Bug #56: Safari invokes the catch handler but without an error.\n                if (err === undefined || err.code === 15) {\n                    throw createInvalidStateError();\n                }\n                throw err; // tslint:disable-line:rxjs-throw-error\n            });\n        }\n        suspend() {\n            return this._nativeAudioContext\n                .suspend()\n                .catch((err) => {\n                // Bug #56: Safari invokes the catch handler but without an error.\n                if (err === undefined) {\n                    throw createInvalidStateError();\n                }\n                throw err; // tslint:disable-line:rxjs-throw-error\n            });\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/minimal-audio-context-constructor.js.map","export const createCreateNativeOfflineAudioContext = (createNotSupportedError, nativeOfflineAudioContextConstructor) => {\n    return (numberOfChannels, length, sampleRate) => {\n        if (nativeOfflineAudioContextConstructor === null) {\n            throw new Error('Missing the native OfflineAudioContext constructor.');\n        }\n        try {\n            return new nativeOfflineAudioContextConstructor(numberOfChannels, length, sampleRate);\n        }\n        catch (err) {\n            // Bug #143, #144 & #146: Safari throws a SyntaxError when numberOfChannels, length or sampleRate are invalid.\n            // Bug #143: Edge throws a SyntaxError when numberOfChannels or length are invalid.\n            // Bug #145: Edge throws an IndexSizeError when sampleRate is zero.\n            if (err.name === 'IndexSizeError' || err.name === 'SyntaxError') {\n                throw createNotSupportedError();\n            }\n            throw err; // tslint:disable-line:rxjs-throw-error\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/create-native-offline-audio-context.js.map","import { getAudioNodeRenderer } from '../helpers/get-audio-node-renderer';\nimport { wrapAudioBufferGetChannelDataMethod } from '../helpers/wrap-audio-buffer-get-channel-data-method';\nexport const createStartRendering = (cacheTestResult, renderNativeOfflineAudioContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, testAudioBufferCopyChannelMethodsSubarraySupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds, wrapAudioBufferCopyChannelMethodsSubarray) => {\n    return (destination, nativeOfflineAudioContext) => getAudioNodeRenderer(destination)\n        .render(destination, nativeOfflineAudioContext)\n        .then(() => renderNativeOfflineAudioContext(nativeOfflineAudioContext))\n        .then((audioBuffer) => {\n        // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n        // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.\n        if (typeof audioBuffer.copyFromChannel !== 'function') {\n            wrapAudioBufferCopyChannelMethods(audioBuffer);\n            wrapAudioBufferGetChannelDataMethod(audioBuffer);\n            // Bug #42: Firefox does not yet fully support copyFromChannel() and copyToChannel().\n        }\n        else if (!cacheTestResult(testAudioBufferCopyChannelMethodsSubarraySupport, () => testAudioBufferCopyChannelMethodsSubarraySupport(audioBuffer))) {\n            wrapAudioBufferCopyChannelMethodsSubarray(audioBuffer);\n            wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n            // Bug #157: No browser does allow the bufferOffset to be out-of-bounds.\n        }\n        else if (!cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, () => testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer))) {\n            wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n        }\n        return audioBuffer;\n    });\n};\n//# sourceMappingURL=/build/es2018/factories/start-rendering.js.map","export const createIsAnyAudioNode = (audioNodeStore, window) => {\n    return (anything) => {\n        return audioNodeStore.has(anything)\n            || (window !== null && typeof window.AudioNode === 'function' && anything instanceof window.AudioNode);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/is-any-audio-node.js.map","import {\n\tAudioContext as stdAudioContext,\n\tOfflineAudioContext as stdOfflineAudioContext,\n} from \"standardized-audio-context\";\n\n/**\n * Create a new AudioContext\n */\nfunction createAudioContext(): AudioContext {\n\treturn new stdAudioContext() as unknown as AudioContext;\n}\n\n/**\n * Create a new OfflineAudioContext\n */\nexport function createOfflineAudioContext(channels: number, length: number, sampleRate: number): OfflineAudioContext {\n\treturn new stdOfflineAudioContext(channels, length, sampleRate)  as unknown as OfflineAudioContext;\n}\n\n/**\n * Either the online or offline audio context\n */\nexport type AnyAudioContext = AudioContext | OfflineAudioContext;\n\n/**\n * Interface for things that Tone.js adds to the window\n */\ninterface ToneWindow extends Window {\n\tTONE_AUDIO_CONTEXT?: AnyAudioContext;\n\tTONE_SILENCE_LOGGING?: boolean;\n\tTONE_DEBUG_CLASS?: string;\n}\n\n/**\n * A reference to the window object\n * @hidden\n */\nexport const theWindow: ToneWindow | null = typeof self === \"object\" ? self : null;\n\n/**\n * If the browser has a window object which has an AudioContext\n * @hidden\n */\nexport const hasAudioContext = theWindow &&\n\t(theWindow.hasOwnProperty(\"AudioContext\") || theWindow.hasOwnProperty(\"webkitAudioContext\"));\n\n/**\n * The global audio context which is getable and assignable through\n * getAudioContext and setAudioContext\n */\nlet globalContext: AnyAudioContext;\n\n// if it was created already, use that one\n// this enables multiple versions of Tone.js to run on the same page.\nif (theWindow && theWindow.TONE_AUDIO_CONTEXT) {\n\tglobalContext = theWindow.TONE_AUDIO_CONTEXT;\n}\n\n/**\n * Returns the default system-wide AudioContext\n */\nexport function getAudioContext(): AnyAudioContext {\n\tif (!globalContext && hasAudioContext) {\n\t\tsetAudioContext(createAudioContext());\n\t}\n\treturn globalContext;\n}\n\n/**\n * Set the default audio context\n */\nexport function setAudioContext(context: AnyAudioContext): void {\n\tglobalContext = context;\n\tif (theWindow) {\n\t\ttheWindow.TONE_AUDIO_CONTEXT = globalContext;\n\t}\n}\n","import { Seconds } from \"../type/Units\";\n\nexport type TickerClockSource = \"worker\" | \"timeout\" | \"offline\";\n\n/**\n * A class which provides a reliable callback using either\n * a Web Worker, or if that isn't supported, falls back to setTimeout.\n * @category Core\n */\nexport class Ticker {\n\n\t/**\n\t * Either \"worker\" or \"timeout\" or \"offline\"\n\t */\n\tprivate _type: TickerClockSource;\n\n\t/**\n\t * The update interval of the worker\n\t */\n\tprivate _updateInterval: Seconds;\n\n\t/**\n\t * The callback to invoke at regular intervals\n\t */\n\tprivate _callback: () => void;\n\n\t/**\n\t * track the callback interval\n\t */\n\tprivate _timeout!: number;\n\n\t/**\n\t * private reference to the worker\n\t */\n\tprivate _worker!: Worker;\n\n\tconstructor(callback: () => void, type: TickerClockSource, updateInterval: Seconds) {\n\n\t\tthis._callback = callback;\n\t\tthis._type = type;\n\t\tthis._updateInterval = updateInterval;\n\n\t\t// create the clock source for the first time\n\t\tthis._createClock();\n\t}\n\n\t/**\n\t *  Generate a web worker\n\t */\n\tprivate _createWorker(): void {\n\n\t\tconst blob = new Blob([\n\t\t\t// the initial timeout time\n\t\t\t`var timeoutTime =  ${(this._updateInterval * 1000).toFixed(1)};\n\t\t\t// onmessage callback\n\t\t\tself.onmessage = function(msg){\n\t\t\t\ttimeoutTime = parseInt(msg.data);\n\t\t\t};\n\t\t\t// the tick function which posts a message\n\t\t\t// and schedules a new tick\n\t\t\tfunction tick(){\n\t\t\t\tsetTimeout(tick, timeoutTime);\n\t\t\t\tself.postMessage('tick');\n\t\t\t}\n\t\t\t// call tick initially\n\t\t\ttick();`,\n\t\t]);\n\t\tconst blobUrl = URL.createObjectURL(blob);\n\t\tconst worker = new Worker(blobUrl);\n\n\t\tworker.onmessage = this._callback.bind(this);\n\n\t\tthis._worker = worker;\n\t}\n\n\t/**\n\t * Create a timeout loop\n\t */\n\tprivate _createTimeout(): void {\n\t\tthis._timeout = setTimeout(()  => {\n\t\t\tthis._createTimeout();\n\t\t\tthis._callback();\n\t\t}, this._updateInterval * 1000);\n\t}\n\n\t/**\n\t * Create the clock source.\n\t */\n\tprivate _createClock(): void {\n\t\tif (this._type === \"worker\") {\n\t\t\ttry {\n\t\t\t\tthis._createWorker();\n\t\t\t} catch (e) {\n\t\t\t\t// workers not supported, fallback to timeout\n\t\t\t\tthis._type = \"timeout\";\n\t\t\t\tthis._createClock();\n\t\t\t}\n\t\t} else if (this._type === \"timeout\") {\n\t\t\tthis._createTimeout();\n\t\t}\n\t}\n\n\t/**\n\t * Clean up the current clock source\n\t */\n\tprivate _disposeClock(): void {\n\t\tif (this._timeout) {\n\t\t\tclearTimeout(this._timeout);\n\t\t\tthis._timeout = 0;\n\t\t}\n\t\tif (this._worker) {\n\t\t\tthis._worker.terminate();\n\t\t\tthis._worker.onmessage = null;\n\t\t}\n\t}\n\n\t/**\n\t * The rate in seconds the ticker will update\n\t */\n\tget updateInterval(): Seconds {\n\t\treturn this._updateInterval;\n\t}\n\tset updateInterval(interval: Seconds) {\n\t\tthis._updateInterval = Math.max(interval, 128 / 44100);\n\t\tif (this._type === \"worker\") {\n\t\t\tthis._worker.postMessage(Math.max(interval * 1000, 1));\n\t\t}\n\t}\n\n\t/**\n\t * The type of the ticker, either a worker or a timeout\n\t */\n\tget type(): TickerClockSource {\n\t\treturn this._type;\n\t}\n\tset type(type: TickerClockSource) {\n\t\tthis._disposeClock();\n\t\tthis._type = type;\n\t\tthis._createClock();\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): void {\n\t\tthis._disposeClock();\n\t}\n}\n","import { Note } from \"../type/Units\";\n\n/**\n *  Test if the arg is undefined\n */\nexport function isUndef(arg: any): arg is undefined {\n\treturn typeof arg === \"undefined\";\n}\n\n/**\n *  Test if the arg is not undefined\n */\nexport function isDefined<T>(arg: T | undefined): arg is T {\n\treturn !isUndef(arg);\n}\n\n/**\n *  Test if the arg is a function\n */\nexport function isFunction(arg: any): arg is (a: any) => any {\n\treturn typeof arg === \"function\";\n}\n\n/**\n *  Test if the argument is a number.\n */\nexport function isNumber(arg: any): arg is number {\n\treturn (typeof arg === \"number\");\n}\n\n/**\n *  Test if the given argument is an object literal (i.e. `{}`);\n */\nexport function isObject(arg: any): arg is object {\n\treturn (Object.prototype.toString.call(arg) === \"[object Object]\" && arg.constructor === Object);\n}\n\n/**\n *  Test if the argument is a boolean.\n */\nexport function isBoolean(arg: any): arg is boolean {\n\treturn (typeof arg === \"boolean\");\n}\n\n/**\n *  Test if the argument is an Array\n */\nexport function isArray(arg: any): arg is any[] {\n\treturn (Array.isArray(arg));\n}\n\n/**\n *  Test if the argument is a string.\n */\nexport function isString(arg: any): arg is string {\n\treturn (typeof arg === \"string\");\n}\n\n/**\n *  Test if the argument is in the form of a note in scientific pitch notation.\n *  e.g. \"C4\"\n */\nexport function isNote(arg: any): arg is Note {\n\treturn isString(arg) && /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i.test(arg);\n}\n","import { isAnyAudioNode } from \"standardized-audio-context\";\nimport { isFunction } from \"./TypeCheck\";\n\n/**\n * Test if the given value is an instanceof AudioParam\n */\nexport function isAudioParam(arg: any): arg is AudioParam {\n\treturn arg instanceof Object &&  Reflect.has(arg, \"value\") &&\n\t\t!Reflect.has(arg, \"input\") &&\n\t\tisFunction(arg.setValueAtTime);\n}\n\n/**\n * Test if the given value is an instanceof AudioNode\n */\nexport function isAudioNode(arg: any): arg is AudioNode {\n\treturn isAnyAudioNode(arg);\n}\n\n/**\n * Test if the arg is instanceof an OfflineAudioContext\n */\nexport function isOfflineAudioContext(arg: any): arg is OfflineAudioContext {\n\treturn arg instanceof Object &&  Reflect.has(arg, \"destination\") &&\n\t\tisFunction(arg.startRendering) && !Reflect.has(arg, \"rawContext\");\n}\n\n/**\n * Test if the arg is an instanceof AudioContext\n */\nexport function isAudioContext(arg: any): arg is AudioContext {\n\treturn arg instanceof Object &&  Reflect.has(arg, \"destination\") &&\n\t\tisFunction(arg.close) && isFunction(arg.resume) && !Reflect.has(arg, \"rawContext\");\n}\n\n/**\n * Test if the arg is instanceof an AudioBuffer\n */\nexport function isAudioBuffer(arg: any): arg is AudioBuffer {\n\treturn arg instanceof Object &&  Reflect.has(arg, \"sampleRate\")\n\t\t&& Reflect.has(arg, \"duration\") && !isFunction(arg.load);\n}\n","import { isAudioBuffer, isAudioNode, isAudioParam } from \"./AdvancedTypeCheck\";\nimport { isDefined, isObject, isUndef } from \"./TypeCheck\";\n\ntype BaseToneOptions = import(\"../Tone\").BaseToneOptions;\n\n/**\n * Some objects should not be merged\n */\nfunction noCopy(key: string, arg: any): boolean {\n\treturn key === \"value\" || isAudioParam(arg) || isAudioNode(arg) || isAudioBuffer(arg);\n}\n\n/**\n * Recursively merge an object\n * @param target the object to merge into\n * @param sources the source objects to merge\n */\nexport function deepMerge<T>(target: T): T;\nexport function deepMerge<T, U>(target: T, source1: U): T & U;\nexport function deepMerge<T, U, V>(target: T, source1: U, source2: V): T & U & V;\nexport function deepMerge<T, U, V, W>(target: T, source1: U, source2: V, source3: W): T & U & V & W;\nexport function deepMerge(target: any, ...sources: any[]): any {\n\tif (!sources.length) { return target; }\n\tconst source = sources.shift();\n\n\tif (isObject(target) && isObject(source)) {\n\t\tfor (const key in source) {\n\t\t\tif (noCopy(key, source[key])) {\n\t\t\t\ttarget[key] = source[key];\n\t\t\t} else if (isObject(source[key])) {\n\t\t\t\tif (!target[key]) { Object.assign(target, { [key]: {} }); }\n\t\t\t\tdeepMerge(target[key], source[key] as any);\n\t\t\t} else {\n\t\t\t\tObject.assign(target, { [key]: source[key] as any });\n\t\t\t}\n\t\t}\n\t}\n\t// @ts-ignore\n\treturn deepMerge(target, ...sources);\n}\n\n/**\n * Returns true if the two arrays have the same value for each of the elements\n */\nexport function deepEquals(arrayA: number[] | string[], arrayB: number[] | string[]): boolean {\n\treturn arrayA.length === arrayB.length && arrayA.every((element, index) => arrayB[index] === element);\n}\n\n/**\n * Convert an args array into an object.\n */\nexport function optionsFromArguments<T extends object>(\n\tdefaults: T,\n\targsArray: IArguments,\n\tkeys: string[] = [],\n\tobjKey?: string,\n): T {\n\tconst opts: any = {};\n\tconst args = Array.from(argsArray);\n\t// if the first argument is an object and has an object key\n\tif (isObject(args[0]) && objKey && !Reflect.has(args[0], objKey)) {\n\t\t// if it's not part of the defaults\n\t\tconst partOfDefaults = Object.keys(args[0]).some(key => Reflect.has(defaults, key));\n\t\tif (!partOfDefaults) {\n\t\t\t// merge that key\n\t\t\tdeepMerge(opts, {[objKey] : args[0]});\n\t\t\t// remove the obj key from the keys\n\t\t\tkeys.splice(keys.indexOf(objKey), 1);\n\t\t\t// shift the first argument off\n\t\t\targs.shift();\n\t\t}\n\t}\n\tif (args.length === 1 && isObject(args[0])) {\n\t\tdeepMerge(opts, args[0]);\n\t} else {\n\t\tfor (let i = 0; i < keys.length; i++) {\n\t\t\tif (isDefined(args[i])) {\n\t\t\t\topts[keys[i]] = args[i];\n\t\t\t}\n\t\t}\n\t}\n\treturn deepMerge(defaults, opts);\n}\n\n/**\n * Return this instances default values by calling Constructor.getDefaults()\n */\nexport function getDefaultsFromInstance<T>(instance: T): BaseToneOptions {\n\ttype ToneClass = {\n\t\tconstructor: ToneClass;\n\t\tgetDefaults: () => BaseToneOptions;\n\t} & T;\n\n\treturn (instance as ToneClass).constructor.getDefaults();\n}\n\n/**\n * Returns the fallback if the given object is undefined.\n * Take an array of arguments and return a formatted options object.\n */\nexport function defaultArg<T>(given: T, fallback: T): T {\n\tif (isUndef(given)) {\n\t\treturn fallback;\n\t} else {\n\t\treturn given;\n\t}\n}\n\n/**\n * Remove all of the properties belonging to omit from obj.\n */\nexport function omitFromObject<T extends object, O extends string[]>(obj: T, omit: O): Omit<T, keyof O> {\n\tomit.forEach(prop => {\n\t\tif (Reflect.has(obj, prop)) {\n\t\t\tdelete obj[prop];\n\t\t}\n\t});\n\treturn obj;\n}\n","/**\n *  Assert that the statement is true, otherwise invoke an error with the given message.\n */\nexport function assert(statement: boolean, error: string): void {\n\tif (!statement) {\n\t\tthrow new Error(error);\n\t}\n}\n\nexport function log(...args: any[]): void {\n\t// tslint:disable-next-line: no-console\n\tconsole.log(...args);\n}\n","/**\n *  Tone.js\n *  @author Yotam Mann\n *  @license http://opensource.org/licenses/MIT MIT License\n *  @copyright 2014-2019 Yotam Mann\n */\nimport { version } from \"../version\";\nimport { theWindow } from \"./context/AudioContext\";\nimport { assert, log } from \"./util/Debug\";\n\n///////////////////////////////////////////////////////////////////////////\n// \tTONE\n///////////////////////////////////////////////////////////////////////////\n\n// tslint:disable-next-line: no-empty-interface\nexport interface BaseToneOptions {}\n\n/**\n *  @class  Tone is the base class of all other classes.\n *  @constructor\n */\nexport abstract class Tone {\n\n\t/**\n\t * The version number semver\n\t */\n\tstatic version: string = version;\n\n\t/**\n\t * The name of the class\n\t */\n\tprotected abstract name: string;\n\n\t/**\n\t * Takes a partial options an returns the completed options by filling in the defaults\n\t */\n\tstatic getDefaults(): BaseToneOptions {\n\t\treturn {};\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tDEBUGGING\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Set this debug flag to log all events that happen in this class.\n\t */\n\tdebug: boolean = false;\n\n\t/**\n\t * Prints the outputs to the console log for debugging purposes.\n\t * Prints the contents only if either the object has a property\n\t * called `debug` set to true, or a variable called TONE_DEBUG_CLASS\n\t * is set to the name of the class.\n\t * @example\n\t * //prints all logs originating from Tone.OscillatorNode\n\t * Tone.global.TONE_DEBUG_CLASS = \"OscillatorNode\"\n\t */\n\tprotected log(...args: any[]): void {\n\t\t// if the object is either set to debug = true\n\t\t// or if there is a string on the Tone.global.with the class name\n\t\tif (this.debug || (theWindow && this.toString() === theWindow.TONE_DEBUG_CLASS)) {\n\t\t\targs.unshift(this.toString() + \":\");\n\t\t\tlog(...args);\n\t\t}\n\t}\n\n\t/**\n\t *  Assert that the statement is true, otherwise invoke the error.\n\t *  @param {Boolean} statement\n\t *  @param {String} error The message which is passed into an Error\n\t *  @private\n\t */\n\tprotected assert(statement: boolean, error: string): void {\n\t\tassert(statement, error);\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tDISPOSING\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Indicates if the instance was disposed\n\t */\n\tprivate _wasDisposed: boolean = false;\n\n\t/**\n\t *  disconnect and dispose.\n\t */\n\tdispose(): this {\n\t\tthis._wasDisposed = true;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Indicates if the instance was disposed. 'Disposing' an\n\t * instance means that all of the Web Audio nodes that were\n\t * created for the instance are disconnected and freed for garbage collection.\n\t */\n\tget disposed(): boolean {\n\t\treturn this._wasDisposed;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tDEFAULTS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  If the `given` parameter is undefined, use the `fallback`.\n\t *  If both `given` and `fallback` are object literals, it will\n\t *  return a deep copy which includes all of the parameters from both\n\t *  objects. If a parameter is undefined in given, it will return\n\t *  the fallback property.\n\t *  <br><br>\n\t *  WARNING: if object is self referential, it will go into an an\n\t *  infinite recursive loop.\n\t *  @memberOf Tone\n\t *  @param  {*} given\n\t *  @param  {*} fallback\n\t *  @return {*}\n\t */\n\t// static defaultArg(given, fallback) {\n\t\t// if (isObject(given) && isObject(fallback)) {\n\t\t// \tconst ret = {};\n\t\t// \t// make a deep copy of the given object\n\t\t// \tfor (const givenProp in given) {\n\t\t// \t\tret[givenProp] = Tone.defaultArg(fallback[givenProp], given[givenProp]);\n\t\t// \t}\n\t\t// \tfor (const fallbackProp in fallback) {\n\t\t// \t\tret[fallbackProp] = Tone.defaultArg(given[fallbackProp], fallback[fallbackProp]);\n\t\t// \t}\n\t\t// \treturn ret;\n\t\t// } else {\n\t\t// \treturn isUndef(given) ? fallback : given;\n\t\t// }\n\t// }\n\n\t// protected options(argsArray: IArguments, keys: string[]): object {\n\t// \tlet options: any = {};\n\t// \tconst args = Array.from(argsArray);\n\t// \tif (args[0] instanceof BaseAudioContext) {\n\t// \t\toptions.context = args.shift();\n\t// \t}\n\t// \tif (args.length === 1 && isObject(args[0])) {\n\t// \t\toptions = Object.assign(options, args[0]);\n\t// \t} else {\n\t// \t\tfor (let i = 0; i < keys.length; i++) {\n\t// \t\t\tif (isDefined(args[i])) {\n\t// \t\t\t\toptions[keys[i]] = args[i];\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\t// \treturn deepMerge(this.getDefaults(), options);\n\t// }\n\n\t/**\n\t * Convert the class to a string\n\t * @example\n\t * const osc = new Oscillator()\n\t * osc.toString() // \"Oscillator\"\n\t */\n\ttoString(): string {\n\t\treturn this.name;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tSTATIC\n\t///////////////////////////////////////////////////////////////////////////\n\n\t// static get context(): import(\"./context/Context\").Context {\n\t// \treturn getContext();\n\t// }\n\n\t// static now(): Seconds {\n\t// \treturn Tone.context.now();\n\t// }\n}\n","import { Tone } from \"../Tone\";\nimport { isUndef } from \"./TypeCheck\";\n\nexport interface EmitterEventObject {\n\t[event: string]: Array<(...args: any[]) => void>;\n}\n\n/**\n * Emitter gives classes which extend it\n * the ability to listen for and emit events.\n * Inspiration and reference from Jerome Etienne's [MicroEvent](https://github.com/jeromeetienne/microevent.js).\n * MIT (c) 2011 Jerome Etienne.\n *@category Core\n */\nexport class Emitter<EventType extends string = string> extends Tone {\n\n\tname = \"Emitter\";\n\n\t/**\n\t * Private container for the events\n\t */\n\tprivate _events?: EmitterEventObject;\n\n\t/**\n\t *  Bind a callback to a specific event.\n\t *  @param  event     The name of the event to listen for.\n\t *  @param  callback  The callback to invoke when the event is emitted\n\t */\n\ton(event: EventType, callback: (...args: any[]) => void): this {\n\t\t// split the event\n\t\tconst events = event.split(/\\W+/);\n\t\tevents.forEach(eventName => {\n\t\t\tif (isUndef(this._events)) {\n\t\t\t\tthis._events = {};\n\t\t\t}\n\t\t\tif (!this._events.hasOwnProperty(eventName)) {\n\t\t\t\tthis._events[eventName] = [];\n\t\t\t}\n\t\t\tthis._events[eventName].push(callback);\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Bind a callback which is only invoked once\n\t *  @param  event     The name of the event to listen for.\n\t *  @param  callback  The callback to invoke when the event is emitted\n\t */\n\tonce(event: EventType, callback: (...args: any[]) => void): this {\n\t\tconst boundCallback = (...args: any[])  => {\n\t\t\t// invoke the callback\n\t\t\tcallback(...args);\n\t\t\t// remove the event\n\t\t\tthis.off(event, boundCallback);\n\t\t};\n\t\tthis.on(event, boundCallback);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Remove the event listener.\n\t *  @param  event     The event to stop listening to.\n\t *  @param  callback  The callback which was bound to the event with Emitter.on.\n\t *                    If no callback is given, all callbacks events are removed.\n\t */\n\toff(event: EventType, callback?: (...args: any[]) => void): this {\n\t\tconst events = event.split(/\\W+/);\n\t\tevents.forEach(eventName => {\n\t\t\tif (isUndef(this._events)) {\n\t\t\t\tthis._events = {};\n\t\t\t}\n\t\t\tif (this._events.hasOwnProperty(event)) {\n\t\t\t\tif (isUndef(callback)) {\n\t\t\t\t\tthis._events[event] = [];\n\t\t\t\t} else {\n\t\t\t\t\tconst eventList = this._events[event];\n\t\t\t\t\tfor (let i = 0; i < eventList.length; i++) {\n\t\t\t\t\t\tif (eventList[i] === callback) {\n\t\t\t\t\t\t\teventList.splice(i, 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Invoke all of the callbacks bound to the event\n\t *  with any arguments passed in.\n\t *  @param  event  The name of the event.\n\t *  @param args The arguments to pass to the functions listening.\n\t */\n\temit(event, ...args: any[]): this {\n\t\tif (this._events) {\n\t\t\tif (this._events.hasOwnProperty(event)) {\n\t\t\t\tconst eventList = this._events[event].slice(0);\n\t\t\t\tfor (let i = 0, len = eventList.length; i < len; i++) {\n\t\t\t\t\teventList[i].apply(this, args);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Add Emitter functions (on/off/emit) to the object\n\t */\n\tstatic mixin(constr: any): void {\n\t\t// instance._events = {};\n\t\t[\"on\", \"once\", \"off\", \"emit\"].forEach(name => {\n\t\t\tconst property = Object.getOwnPropertyDescriptor(Emitter.prototype, name) as PropertyDescriptor;\n\t\t\tObject.defineProperty(constr.prototype, name, property);\n\t\t});\n\t}\n\n\t/**\n\t *  Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._events = undefined;\n\t\treturn this;\n\t}\n}\n","import { Tone } from \"../Tone\";\nimport { optionsFromArguments } from \"./Defaults\";\n\ntype TimelineSearchParam = \"ticks\" | \"time\";\n\n/**\n * The options object for Timeline\n */\ninterface TimelineOptions {\n\tmemory: number;\n}\n\n/**\n * An event must have a time number\n */\nexport interface TimelineEvent {\n\ttime: number;\n}\n\n/**\n *  @class A Timeline class for scheduling and maintaining state\n *         along a timeline. All events must have a \"time\" property.\n *         Internally, events are stored in time order for fast\n *         retrieval.\n *  @param memory The number of previous events that are retained.\n * @category Core\n */\nexport class Timeline<GenericEvent extends TimelineEvent> extends Tone {\n\n\tname = \"Timeline\";\n\n\t/**\n\t *  The memory of the timeline, i.e.\n\t *  how many events in the past it will retain\n\t */\n\tmemory: number;\n\n\t/**\n\t * The array of scheduled timeline events\n\t */\n\tprotected _timeline: GenericEvent[] = [];\n\n\tconstructor(options?: Partial<TimelineOptions>);\n\t// tslint:disable-next-line: unified-signatures\n\tconstructor(memory?: number);\n\tconstructor() {\n\t\tsuper();\n\t\tconst options = optionsFromArguments(Timeline.getDefaults(), arguments, [\"memory\"]);\n\n\t\tthis.memory = options.memory;\n\t}\n\n\tstatic getDefaults(): TimelineOptions {\n\t\treturn {\n\t\t\tmemory: Infinity,\n\t\t};\n\t}\n\n\t/**\n\t *  The number of items in the timeline.\n\t */\n\tget length(): number {\n\t\treturn this._timeline.length;\n\t}\n\n\t/**\n\t *  Insert an event object onto the timeline. Events must have a \"time\" attribute.\n\t *  @param event  The event object to insert into the timeline.\n\t */\n\tadd(event: GenericEvent): Timeline<GenericEvent> {\n\t\t// the event needs to have a time attribute\n\t\tthis.assert(Reflect.has(event, \"time\"), \"Timeline: events must have a time attribute\");\n\t\tevent.time = event.time.valueOf();\n\t\tconst index = this._search(event.time);\n\t\tthis._timeline.splice(index + 1, 0, event);\n\t\t// if the length is more than the memory, remove the previous ones\n\t\tif (this.length > this.memory) {\n\t\t\tconst diff = this.length - this.memory;\n\t\t\tthis._timeline.splice(0, diff);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Remove an event from the timeline.\n\t *  @param  {Object}  event  The event object to remove from the list.\n\t *  @returns {Timeline} this\n\t */\n\tremove(event: GenericEvent): Timeline<GenericEvent> {\n\t\tconst index = this._timeline.indexOf(event);\n\t\tif (index !== -1) {\n\t\t\tthis._timeline.splice(index, 1);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Get the nearest event whose time is less than or equal to the given time.\n\t *  @param  time  The time to query.\n\t */\n\tget(time: number, param: TimelineSearchParam = \"time\"): GenericEvent | null {\n\t\tconst index = this._search(time, param);\n\t\tif (index !== -1) {\n\t\t\treturn this._timeline[index];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t *  Return the first event in the timeline without removing it\n\t *  @returns {Object} The first event object\n\t */\n\tpeek(): GenericEvent | undefined {\n\t\treturn this._timeline[0];\n\t}\n\n\t/**\n\t *  Return the first event in the timeline and remove it\n\t */\n\tshift(): GenericEvent | undefined {\n\t\treturn this._timeline.shift();\n\t}\n\n\t/**\n\t *  Get the event which is scheduled after the given time.\n\t *  @param  time  The time to query.\n\t */\n\tgetAfter(time: number, param: TimelineSearchParam = \"time\"): GenericEvent | null {\n\t\tconst index = this._search(time, param);\n\t\tif (index + 1 < this._timeline.length) {\n\t\t\treturn this._timeline[index + 1];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t *  Get the event before the event at the given time.\n\t *  @param  time  The time to query.\n\t */\n\tgetBefore(time: number): GenericEvent | null {\n\t\tconst len = this._timeline.length;\n\t\t// if it's after the last item, return the last item\n\t\tif (len > 0 && this._timeline[len - 1].time < time) {\n\t\t\treturn this._timeline[len - 1];\n\t\t}\n\t\tconst index = this._search(time);\n\t\tif (index - 1 >= 0) {\n\t\t\treturn this._timeline[index - 1];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t *  Cancel events at and after the given time\n\t *  @param  time  The time to query.\n\t */\n\tcancel(after: number): Timeline<GenericEvent> {\n\t\tif (this._timeline.length > 1) {\n\t\t\tlet index = this._search(after);\n\t\t\tif (index >= 0) {\n\t\t\t\tif (this._timeline[index].time === after) {\n\t\t\t\t\t// get the first item with that time\n\t\t\t\t\tfor (let i = index; i >= 0; i--) {\n\t\t\t\t\t\tif (this._timeline[i].time === after) {\n\t\t\t\t\t\t\tindex = i;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis._timeline = this._timeline.slice(0, index);\n\t\t\t\t} else {\n\t\t\t\t\tthis._timeline = this._timeline.slice(0, index + 1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._timeline = [];\n\t\t\t}\n\t\t} else if (this._timeline.length === 1) {\n\t\t\t// the first item's time\n\t\t\tif (this._timeline[0].time >= after) {\n\t\t\t\tthis._timeline = [];\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Cancel events before or equal to the given time.\n\t *  @param  {Number}  time  The time to cancel before.\n\t *  @returns {Timeline} this\n\t */\n\tcancelBefore(time): Timeline<GenericEvent> {\n\t\tconst index = this._search(time);\n\t\tif (index >= 0) {\n\t\t\tthis._timeline = this._timeline.slice(index + 1);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the previous event if there is one. null otherwise\n\t * @param  {Object} event The event to find the previous one of\n\t * @return {Object}       The event right before the given event\n\t */\n\tpreviousEvent(event): GenericEvent | null {\n\t\tconst index = this._timeline.indexOf(event);\n\t\tif (index > 0) {\n\t\t\treturn this._timeline[index - 1];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t *  Does a binary search on the timeline array and returns the\n\t *  nearest event index whose time is after or equal to the given time.\n\t *  If a time is searched before the first index in the timeline, -1 is returned.\n\t *  If the time is after the end, the index of the last item is returned.\n\t *  @param  time\n\t */\n\tprotected _search(time: number, param: TimelineSearchParam = \"time\"): number {\n\t\tif (this._timeline.length === 0) {\n\t\t\treturn -1;\n\t\t}\n\t\tlet beginning = 0;\n\t\tconst len = this._timeline.length;\n\t\tlet end = len;\n\t\tif (len > 0 && this._timeline[len - 1][param] <= time) {\n\t\t\treturn len - 1;\n\t\t}\n\t\twhile (beginning < end) {\n\t\t\t// calculate the midpoint for roughly equal partition\n\t\t\tlet midPoint = Math.floor(beginning + (end - beginning) / 2);\n\t\t\tconst event = this._timeline[midPoint];\n\t\t\tconst nextEvent = this._timeline[midPoint + 1];\n\t\t\tif (event[param] === time) {\n\t\t\t\t// choose the last one that has the same time\n\t\t\t\tfor (let i = midPoint; i < this._timeline.length; i++) {\n\t\t\t\t\tconst testEvent = this._timeline[i];\n\t\t\t\t\tif (testEvent[param] === time) {\n\t\t\t\t\t\tmidPoint = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn midPoint;\n\t\t\t} else if (event[param] < time && nextEvent[param] > time) {\n\t\t\t\treturn midPoint;\n\t\t\t} else if (event[param] > time) {\n\t\t\t\t// search lower\n\t\t\t\tend = midPoint;\n\t\t\t} else {\n\t\t\t\t// search upper\n\t\t\t\tbeginning = midPoint + 1;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\n\t/**\n\t *  Internal iterator. Applies extra safety checks for\n\t *  removing items from the array.\n\t */\n\tprivate _iterate(\n\t\tcallback: (event: GenericEvent) => void,\n\t\tlowerBound = 0, upperBound = this._timeline.length - 1,\n\t): void {\n\t\tthis._timeline.slice(lowerBound, upperBound + 1).forEach(callback);\n\t}\n\n\t/**\n\t *  Iterate over everything in the array\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEach(callback: (event: GenericEvent) => void): Timeline<GenericEvent> {\n\t\tthis._iterate(callback);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array at or before the given time.\n\t *  @param  time The time to check if items are before\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachBefore(time, callback: (event: GenericEvent) => void): Timeline<GenericEvent> {\n\t\t// iterate over the items in reverse so that removing an item doesn't break things\n\t\tconst upperBound = this._search(time);\n\t\tif (upperBound !== -1) {\n\t\t\tthis._iterate(callback, 0, upperBound);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array after the given time.\n\t *  @param  time The time to check if items are before\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachAfter(time, callback: (event: GenericEvent) => void): Timeline<GenericEvent> {\n\t\t// iterate over the items in reverse so that removing an item doesn't break things\n\t\tconst lowerBound = this._search(time);\n\t\tthis._iterate(callback, lowerBound + 1);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array between the startTime and endTime.\n\t *  The timerange is inclusive of the startTime, but exclusive of the endTime.\n\t *  range = [startTime, endTime).\n\t *  @param  startTime The time to check if items are before\n\t *  @param  endTime The end of the test interval.\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachBetween(startTime: number, endTime: number, callback: (event: GenericEvent) => void): Timeline<GenericEvent> {\n\t\tlet lowerBound = this._search(startTime);\n\t\tlet upperBound = this._search(endTime);\n\t\tif (lowerBound !== -1 && upperBound !== -1) {\n\t\t\tif (this._timeline[lowerBound].time !== startTime) {\n\t\t\t\tlowerBound += 1;\n\t\t\t}\n\t\t\t// exclusive of the end time\n\t\t\tif (this._timeline[upperBound].time === endTime) {\n\t\t\t\tupperBound -= 1;\n\t\t\t}\n\t\t\tthis._iterate(callback, lowerBound, upperBound);\n\t\t} else if (lowerBound === -1) {\n\t\t\tthis._iterate(callback, 0, upperBound);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array at or after the given time. Similar to\n\t *  forEachAfter, but includes the item(s) at the given time.\n\t *  @param  time The time to check if items are before\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachFrom(time: number, callback: (event: GenericEvent) => void): Timeline<GenericEvent> {\n\t\t// iterate over the items in reverse so that removing an item doesn't break things\n\t\tlet lowerBound = this._search(time);\n\t\t// work backwards until the event time is less than time\n\t\twhile (lowerBound >= 0 && this._timeline[lowerBound].time >= time) {\n\t\t\tlowerBound--;\n\t\t}\n\t\tthis._iterate(callback, lowerBound + 1);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array at the given time\n\t *  @param  time The time to check if items are before\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachAtTime(time: number, callback: (event: GenericEvent) => void): Timeline<GenericEvent> {\n\t\t// iterate over the items in reverse so that removing an item doesn't break things\n\t\tconst upperBound = this._search(time);\n\t\tif (upperBound !== -1) {\n\t\t\tthis._iterate(event => {\n\t\t\t\tif (event.time === time) {\n\t\t\t\t\tcallback(event);\n\t\t\t\t}\n\t\t\t}, 0, upperBound);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._timeline = [];\n\t\treturn this;\n\t}\n}\n","///////////////////////////////////////////////////////////////////////////\n// INITIALIZING NEW CONTEXT\n///////////////////////////////////////////////////////////////////////////\n\ntype Context = import(\"./Context\").Context;\n\n/**\n * Array of callbacks to invoke when a new context is created\n */\nconst notifyNewContext: Array<(ctx: Context) => void> = [];\n\n/**\n * Used internally to setup a new Context\n */\nexport function onContextInit(cb: (ctx: Context) => void): void {\n\tnotifyNewContext.push(cb);\n}\n\n/**\n * Invoke any classes which need to also be initialized when a new context is created.\n */\nexport function initializeContext(ctx: Context): void {\n\t// add any additional modules\n\tnotifyNewContext.forEach(cb => cb(ctx));\n}\n\n/**\n * Array of callbacks to invoke when a new context is created\n */\nconst notifyCloseContext: Array<(ctx: Context) => void> = [];\n\n/**\n * Used internally to tear down a Context\n */\nexport function onContextClose(cb: (ctx: Context) => void): void {\n\tnotifyCloseContext.push(cb);\n}\n\nexport function closeContext(ctx: Context): void {\n\t// add any additional modules\n\tnotifyCloseContext.forEach(cb => cb(ctx));\n}\n","import { Ticker, TickerClockSource } from \"../clock/Ticker\";\nimport { Seconds } from \"../type/Units\";\nimport { isAudioContext } from \"../util/AdvancedTypeCheck\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Emitter } from \"../util/Emitter\";\nimport { Omit } from \"../util/Interface\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isString } from \"../util/TypeCheck\";\nimport { AnyAudioContext, getAudioContext } from \"./AudioContext\";\nimport { closeContext, initializeContext } from \"./ContextInitialization\";\n\ntype Transport = import(\"../clock/Transport\").Transport;\ntype Destination = import(\"./Destination\").Destination;\n\nexport type ContextLatencyHint = AudioContextLatencyCategory | \"fastest\";\n\n// these are either not used in Tone.js or deprecated and not implemented.\nexport type ExcludedFromBaseAudioContext = \"onstatechange\" | \"addEventListener\" |\n\t\"removeEventListener\" | \"listener\" | \"dispatchEvent\" | \"audioWorklet\" | \"destination\" | \"createScriptProcessor\";\n\t// \"createMediaStreamSource\" | \"createMediaElementSource\" | \"createMediaStreamTrackSource\" |\n\t// \"baseLatency\" | \"suspend\" |\n\n// the subset of the BaseAudioContext which Tone.Context implements.\nexport type BaseAudioContextSubset = Omit<BaseAudioContext, ExcludedFromBaseAudioContext>;\n\nexport interface ContextOptions {\n\tclockSource: TickerClockSource;\n\tlatencyHint: ContextLatencyHint;\n\tlookAhead: Seconds;\n\tupdateInterval: Seconds;\n\tcontext: AnyAudioContext;\n}\n\nexport interface ContextTimeoutEvent {\n\tcallback: (...args: any[]) => void;\n\tid: number;\n\ttime: Seconds;\n}\n\n/**\n * Wrapper around the native AudioContext.\n * @category Core\n */\nexport class Context extends Emitter<\"statechange\" | \"tick\"> implements BaseAudioContextSubset {\n\n\tname = \"Context\";\n\n\t/**\n\t * The amount of time into the future events are scheduled. Giving Web Audio\n\t * a short amount of time into the future to schedule events can reduce clicks and\n\t * improve performance. This value can be set to 0 to get the lowest latency.\n\t */\n\tlookAhead: Seconds;\n\n\t/**\n\t * private reference to the BaseAudioContext\n\t */\n\tprotected readonly _context: AnyAudioContext;\n\n\t/**\n\t * A reliable callback method\n\t */\n\tprivate readonly _ticker: Ticker;\n\n\t/**\n\t *  The default latency hint\n\t */\n\tprivate _latencyHint: ContextLatencyHint | Seconds;\n\n\t/**\n\t *  An object containing all of the constants AudioBufferSourceNodes\n\t */\n\tprivate _constants = new Map<number, AudioBufferSourceNode>();\n\n\t/**\n\t *  All of the setTimeout events.\n\t */\n\tprivate _timeouts: Timeline<ContextTimeoutEvent> = new Timeline();\n\n\t/**\n\t *  The timeout id counter\n\t */\n\tprivate _timeoutIds = 0;\n\n\t/**\n\t * A reference the Transport singleton belonging to this context\n\t */\n\tprivate _transport!: Transport;\n\n\t/**\n\t * A reference the Destination singleton belonging to this context\n\t */\n\tprivate _destination!: Destination;\n\n\t/**\n\t * Private indicator if the context has been initialized\n\t */\n\tprivate _initialized: boolean = false;\n\n\tconstructor(context?: AnyAudioContext);\n\t// tslint:disable-next-line: unified-signatures\n\tconstructor(options?: Partial<ContextOptions>);\n\tconstructor() {\n\t\tsuper();\n\t\tconst options = optionsFromArguments(Context.getDefaults(), arguments, [\"context\"]);\n\n\t\tthis._context = options.context;\n\n\t\tthis._latencyHint = options.latencyHint;\n\t\tthis.lookAhead = options.lookAhead;\n\n\t\tthis._ticker = new Ticker(this.emit.bind(this, \"tick\"), options.clockSource, options.updateInterval);\n\t\tthis.on(\"tick\", this._timeoutLoop.bind(this));\n\n\t\t// fwd events from the context\n\t\tthis._context.addEventListener(\"statechange\", () => {\n\t\t\tthis.emit(\"statechange\", this.state);\n\t\t});\n\t}\n\n\tstatic getDefaults(): ContextOptions {\n\t\treturn {\n\t\t\tclockSource: \"worker\",\n\t\t\tcontext: getAudioContext(),\n\t\t\tlatencyHint: \"interactive\",\n\t\t\tlookAhead: 0.1,\n\t\t\tupdateInterval: 0.03,\n\t\t};\n\t}\n\n\t/**\n\t * Finish setting up the context. **You usually do not need to do this manually.**\n\t */\n\tinitialize(): this {\n\t\tif (!this._initialized) {\n\t\t\t// add any additional modules\n\t\t\tinitializeContext(this);\n\t\t\tthis._initialized = true;\n\t\t}\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////\n\t// BASE AUDIO CONTEXT METHODS\n\t///////////////////////////////////////////////////////////////////////\n\n\tcreateAnalyser(): AnalyserNode {\n\t\treturn this._context.createAnalyser();\n\t}\n\tcreateOscillator(): OscillatorNode {\n\t\treturn this._context.createOscillator();\n\t}\n\tcreateBufferSource(): AudioBufferSourceNode {\n\t\treturn this._context.createBufferSource();\n\t}\n\tcreateBiquadFilter(): BiquadFilterNode {\n\t\treturn this._context.createBiquadFilter();\n\t}\n\tcreateBuffer(numberOfChannels: number, length: number, sampleRate: number): AudioBuffer {\n\t\treturn this._context.createBuffer(numberOfChannels, length, sampleRate);\n\t}\n\tcreateChannelMerger(numberOfInputs?: number | undefined): ChannelMergerNode {\n\t\treturn this._context.createChannelMerger(numberOfInputs);\n\t}\n\tcreateChannelSplitter(numberOfOutputs?: number | undefined): ChannelSplitterNode {\n\t\treturn this._context.createChannelSplitter(numberOfOutputs);\n\t}\n\tcreateConstantSource(): ConstantSourceNode {\n\t\treturn this._context.createConstantSource();\n\t}\n\tcreateConvolver(): ConvolverNode {\n\t\treturn this._context.createConvolver();\n\t}\n\tcreateDelay(maxDelayTime?: number | undefined): DelayNode {\n\t\treturn this._context.createDelay(maxDelayTime);\n\t}\n\tcreateDynamicsCompressor(): DynamicsCompressorNode {\n\t\treturn this._context.createDynamicsCompressor();\n\t}\n\tcreateGain(): GainNode {\n\t\treturn this._context.createGain();\n\t}\n\tcreateIIRFilter(feedforward: number[], feedback: number[]): IIRFilterNode {\n\t\treturn this._context.createIIRFilter(feedforward, feedback);\n\t}\n\tcreatePanner(): PannerNode {\n\t\treturn this._context.createPanner();\n\t}\n\tcreatePeriodicWave(\n\t\treal: number[] | Float32Array,\n\t\timag: number[] | Float32Array,\n\t\tconstraints?: PeriodicWaveConstraints | undefined,\n\t): PeriodicWave {\n\t\treturn this._context.createPeriodicWave(real, imag, constraints);\n\t}\n\tcreateStereoPanner(): StereoPannerNode {\n\t\treturn this._context.createStereoPanner();\n\t}\n\tcreateWaveShaper(): WaveShaperNode {\n\t\treturn this._context.createWaveShaper();\n\t}\n\tdecodeAudioData(audioData: ArrayBuffer): Promise<AudioBuffer> {\n\t\treturn this._context.decodeAudioData(audioData);\n\t}\n\n\t/**\n\t *  The current time in seconds of the AudioContext.\n\t */\n\tget currentTime(): Seconds {\n\t\treturn this._context.currentTime;\n\t}\n\t/**\n\t *  The current time in seconds of the AudioContext.\n\t */\n\tget state(): AudioContextState {\n\t\treturn this._context.state;\n\t}\n\t/**\n\t *  The current time in seconds of the AudioContext.\n\t */\n\tget sampleRate(): number {\n\t\treturn this._context.sampleRate;\n\t}\n\t/**\n\t *  The listener\n\t */\n\tget listener(): AudioListener {\n\t\treturn this._context.listener;\n\t}\n\n\t/**\n\t *  There is only one Transport per Context. It is created on initialization.\n\t */\n\tget transport(): Transport {\n\t\tthis.assert(this._initialized, \"The context must be initialized before being used by invoking context.initialize()\");\n\t\treturn this._transport;\n\t}\n\tset transport(t: Transport) {\n\t\tthis.assert(!this._initialized, \"The transport cannot be set after initialization.\");\n\t\tthis._transport = t;\n\t}\n\n\t/**\n\t *  A reference to the Context's destination node.\n\t */\n\tget destination(): Destination {\n\t\tthis.assert(this._initialized, \"The context must be initialized before being used by invoking context.initialize()\");\n\t\treturn this._destination;\n\t}\n\tset destination(d: Destination) {\n\t\tthis.assert(!this._initialized, \"The transport cannot be set after initialization.\");\n\t\tthis._destination = d;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////\n\t// TICKER\n\t///////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  How often the interval callback is invoked.\n\t *  This number corresponds to how responsive the scheduling\n\t *  can be. context.updateInterval + context.lookAhead gives you the\n\t *  total latency between scheduling an event and hearing it.\n\t */\n\tget updateInterval(): Seconds {\n\t\treturn this._ticker.updateInterval;\n\t}\n\tset updateInterval(interval: Seconds) {\n\t\tthis._ticker.updateInterval = interval;\n\t}\n\n\t/**\n\t *  What the source of the clock is, either \"worker\" (default),\n\t *  \"timeout\", or \"offline\" (none).\n\t */\n\tget clockSource(): TickerClockSource {\n\t\treturn this._ticker.type;\n\t}\n\tset clockSource(type: TickerClockSource) {\n\t\tthis._ticker.type = type;\n\t}\n\n\t/**\n\t * The type of playback, which affects tradeoffs between audio\n\t * output latency and responsiveness.\n\t * In addition to setting the value in seconds, the latencyHint also\n\t * accepts the strings \"interactive\" (prioritizes low latency),\n\t * \"playback\" (prioritizes sustained playback), \"balanced\" (balances\n\t * latency and performance), and \"fastest\" (lowest latency, might glitch more often).\n\t * @example\n\t * //set the lookAhead to 0.3 seconds\n\t * Tone.context.latencyHint = 0.3;\n\t */\n\tget latencyHint(): ContextLatencyHint | Seconds {\n\t\treturn this._latencyHint;\n\t}\n\tset latencyHint(hint: ContextLatencyHint | Seconds) {\n\t\tlet lookAheadValue = 0;\n\t\tthis._latencyHint = hint;\n\t\tif (isString(hint)) {\n\t\t\tswitch (hint) {\n\t\t\t\tcase \"interactive\":\n\t\t\t\t\tlookAheadValue = 0.1;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"playback\":\n\t\t\t\t\tlookAheadValue = 0.8;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"balanced\":\n\t\t\t\t\tlookAheadValue = 0.25;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"fastest\":\n\t\t\t\t\tlookAheadValue = 0.01;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tthis.lookAhead = lookAheadValue;\n\t\tthis.updateInterval = lookAheadValue / 3;\n\t}\n\n\t/**\n\t *  The unwrapped AudioContext.\n\t */\n\tget rawContext(): AnyAudioContext {\n\t\treturn this._context;\n\t}\n\n\t/**\n\t * The current audio context time plus a short {@link lookAhead}.\n\t */\n\tnow(): Seconds {\n\t\treturn this._context.currentTime + this.lookAhead;\n\t}\n\n\t/**\n\t *  Starts the audio context from a suspended state. This is required\n\t *  to initially start the AudioContext.\n\t */\n\tresume(): Promise<void> {\n\t\tif (this._context.state === \"suspended\" && isAudioContext(this._context)) {\n\t\t\treturn this._context.resume();\n\t\t} else {\n\t\t\treturn Promise.resolve();\n\t\t}\n\t}\n\n\t/**\n\t *  Promise which is invoked when the context is running.\n\t *  Tries to resume the context if it's not started.\n\t */\n\tasync close(): Promise<void> {\n\t\tif (isAudioContext(this._context)) {\n\t\t\tawait this._context.close();\n\t\t}\n\t\tif (this._initialized) {\n\t\t\tcloseContext(this);\n\t\t}\n\t}\n\n\t/**\n\t *  Generate a looped buffer at some constant value.\n\t */\n\tgetConstant(val: number): AudioBufferSourceNode {\n\t\tif (this._constants.has(val)) {\n\t\t\treturn this._constants.get(val) as AudioBufferSourceNode;\n\t\t} else {\n\t\t\tconst buffer = this._context.createBuffer(1, 128, this._context.sampleRate);\n\t\t\tconst arr = buffer.getChannelData(0);\n\t\t\tfor (let i = 0; i < arr.length; i++) {\n\t\t\t\tarr[i] = val;\n\t\t\t}\n\t\t\tconst constant = this._context.createBufferSource();\n\t\t\tconstant.channelCount = 1;\n\t\t\tconstant.channelCountMode = \"explicit\";\n\t\t\tconstant.buffer = buffer;\n\t\t\tconstant.loop = true;\n\t\t\tconstant.start(0);\n\t\t\tthis._constants.set(val, constant);\n\t\t\treturn constant;\n\t\t}\n\t}\n\n\t/**\n\t *  Clean up. Also closes the audio context.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._ticker.dispose();\n\t\tthis._timeouts.dispose();\n\t\tObject.keys(this._constants).map(val => this._constants[val].disconnect());\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////\n\t// TIMEOUTS\n\t///////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  The private loop which keeps track of the context scheduled timeouts\n\t *  Is invoked from the clock source\n\t */\n\tprivate _timeoutLoop(): void  {\n\t\tconst now = this.now();\n\t\tlet firstEvent = this._timeouts.peek();\n\t\twhile (this._timeouts.length && firstEvent && firstEvent.time <= now) {\n\t\t\t// invoke the callback\n\t\t\tfirstEvent.callback();\n\t\t\t// shift the first event off\n\t\t\tthis._timeouts.shift();\n\t\t\t// get the next one\n\t\t\tfirstEvent = this._timeouts.peek();\n\t\t}\n\t}\n\n\t/**\n\t *  A setTimeout which is guarented by the clock source.\n\t *  Also runs in the offline context.\n\t *  @param  fn       The callback to invoke\n\t *  @param  timeout  The timeout in seconds\n\t *  @returns ID to use when invoking Context.clearTimeout\n\t */\n\tsetTimeout(fn: (...args: any[]) => void, timeout: Seconds): number {\n\t\tthis._timeoutIds++;\n\t\tconst now = this.now();\n\t\tthis._timeouts.add({\n\t\t\tcallback : fn,\n\t\t\tid : this._timeoutIds,\n\t\t\ttime : now + timeout,\n\t\t});\n\t\treturn this._timeoutIds;\n\t}\n\n\t/**\n\t *  Clears a previously scheduled timeout with Tone.context.setTimeout\n\t *  @param  id  The ID returned from setTimeout\n\t */\n\tclearTimeout(id: number): Context {\n\t\tthis._timeouts.forEach(event => {\n\t\t\tif (event.id === id) {\n\t\t\t\tthis._timeouts.remove(event);\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n}\n","import { createOfflineAudioContext } from \"../context/AudioContext\";\nimport { Context } from \"../context/Context\";\nimport { Seconds } from \"../type/Units\";\nimport { isOfflineAudioContext } from \"../util/AdvancedTypeCheck\";\n\n/**\n *  Wrapper around the OfflineAudioContext\n * @category Core\n */\nexport class OfflineContext extends Context {\n\n\tname = \"OfflineContext\";\n\n\t/**\n\t *  A private reference to the duration\n\t */\n\tprivate readonly _duration: Seconds;\n\n\t/**\n\t *  An artificial clock source\n\t */\n\tprivate _currentTime: Seconds = 0;\n\n\t/**\n\t * Private reference to the OfflineAudioContext.\n\t */\n\tprotected _context!: OfflineAudioContext;\n\n\tconstructor(context: OfflineAudioContext);\n\t/**\n\t *  @param  channels  The number of channels to render\n\t *  @param  duration  The duration to render in samples\n\t *  @param sampleRate the sample rate to render at\n\t */\n\tconstructor(\n\t\tchannels: number,\n\t\tduration: Seconds, sampleRate: number,\n\t);\n\tconstructor() {\n\n\t\tsuper({\n\t\t\tclockSource: \"offline\",\n\t\t\tcontext: isOfflineAudioContext(arguments[0]) ?\n\t\t\t\targuments[0] : createOfflineAudioContext(arguments[0], arguments[1] * arguments[2], arguments[2]),\n\t\t\tlookAhead: 0,\n\t\t\tupdateInterval: isOfflineAudioContext(arguments[0]) ?\n\t\t\t\t\t128 / arguments[0].sampleRate : 128 / arguments[2],\n\t\t});\n\n\t\tthis._duration = isOfflineAudioContext(arguments[0]) ?\n\t\t\targuments[0].length / arguments[0].sampleRate : arguments[1];\n\t}\n\n\t/**\n\t *  Override the now method to point to the internal clock time\n\t */\n\tnow(): Seconds {\n\t\treturn this._currentTime;\n\t}\n\n\t/**\n\t * Same as this.now()\n\t */\n\tget currentTime(): Seconds {\n\t\treturn this._currentTime;\n\t}\n\n\t/**\n\t *  Render the output of the OfflineContext\n\t */\n\trender(): Promise<AudioBuffer> {\n\t\twhile (this._duration - this._currentTime >= 0) {\n\t\t\t// invoke all the callbacks on that time\n\t\t\tthis.emit(\"tick\");\n\t\t\t// increment the clock in 5ms chunks\n\t\t\tthis._currentTime += 128 / this.sampleRate;\n\t\t}\n\n\t\treturn this._context.startRendering();\n\t}\n\n\t/**\n\t *  Close the context\n\t */\n\tclose(): Promise<void> {\n\t\treturn Promise.resolve();\n\t}\n}\n","import { version } from \"../version\";\nimport { hasAudioContext, theWindow } from \"./context/AudioContext\";\nimport { Context } from \"./context/Context\";\nimport { OfflineContext } from \"./context/OfflineContext\";\nimport { isAudioContext, isOfflineAudioContext } from \"./util/AdvancedTypeCheck\";\n\n/**\n * This dummy context is used to avoid throwing immediate errors when importing in Node.js\n */\nconst dummyContext: Context = {\n\tdestination: {},\n\ttransport: {},\n} as Context;\n\n/**\n * The global audio context which is getable and assignable through\n * getContext and setContext\n */\nlet globalContext: Context = dummyContext;\n\n/**\n * Returns the default system-wide AudioContext\n */\nexport function getContext(): Context {\n\tif (globalContext === dummyContext && hasAudioContext) {\n\t\tsetContext(new Context());\n\t}\n\treturn globalContext;\n}\n\n/**\n * Set the default audio context\n */\nexport function setContext(context: Context | AudioContext | OfflineAudioContext): void {\n\tif (isAudioContext(context)) {\n\t\tglobalContext = new Context(context);\n\t} else if (isOfflineAudioContext(context)) {\n\t\tglobalContext = new OfflineContext(context);\n\t} else {\n\t\tglobalContext = context;\n\t}\n\tglobalContext.initialize();\n}\n\n/**\n * Most browsers will not play _any_ audio until a user\n * clicks something (like a play button). Invoke this method\n * on a click or keypress event handler to start the audio context.\n * More about the Autoplay policy\n * [here](https://developers.google.com/web/updates/2017/09/autoplay-policy-changes#webaudio)\n * @example\n * document.querySelector('#playbutton').addEventListener('click', () => Tone.start())\n */\nexport function start(): Promise <void> {\n\treturn globalContext.resume();\n}\n\n/**\n * Log Tone.js + version in the console.\n */\nif (theWindow && !theWindow.TONE_SILENCE_LOGGING) {\n\tlet prefix = \"v\";\n\tif (version === \"dev\") {\n\t\tprefix = \"\";\n\t}\n\tconst printString = ` * Tone.js ${prefix}${version} * `;\n\t// tslint:disable-next-line: no-console\n\tconsole.log(`%c${printString}`, \"background: #000; color: #fff\");\n}\n","import { Decibels, GainFactor, Hertz, Interval, MidiNote, NormalRange } from \"./Units\";\n\n/**\n *  Equal power gain scale. Good for cross-fading.\n *  @param  percent (0-1)\n */\nexport function equalPowerScale(percent: NormalRange): number {\n\tconst piFactor = 0.5 * Math.PI;\n\treturn Math.sin(percent * piFactor);\n}\n\n/**\n *  Convert decibels into gain.\n */\nexport function dbToGain(db: Decibels): GainFactor {\n\treturn Math.pow(10, db / 20);\n}\n\n/**\n *  Convert gain to decibels.\n */\nexport function gainToDb(gain: GainFactor): Decibels {\n\treturn 20 * (Math.log(gain) / Math.LN10);\n}\n\n/**\n * Convert an interval (in semitones) to a frequency ratio.\n * @param interval the number of semitones above the base note\n * @example\n * tone.intervalToFrequencyRatio(0); // 1\n * tone.intervalToFrequencyRatio(12); // 2\n * tone.intervalToFrequencyRatio(-12); // 0.5\n */\nexport function intervalToFrequencyRatio(interval: Interval): number {\n\treturn Math.pow(2, (interval / 12));\n}\n\n/**\n * The Global [concert tuning pitch](https://en.wikipedia.org/wiki/Concert_pitch) which is used\n * to generate all the other pitch values from notes. A4's values in Hertz.\n */\nlet A4: Hertz = 440;\n\nexport function getA4(): Hertz {\n\treturn A4;\n}\n\nexport function setA4(freq: Hertz): void {\n\tA4 = freq;\n}\n\n/**\n * Convert a frequency value to a MIDI note.\n * @param frequency The value to frequency value to convert.\n * @example\n * ftom(440); // returns 69\n */\nexport function ftom(frequency: Hertz): MidiNote {\n\treturn Math.round(ftomf(frequency)) as MidiNote;\n}\n\n/**\n * Convert a frequency to a floating point midi value\n */\nexport function ftomf(frequency: Hertz): number {\n\treturn 69 + 12 * Math.log2(frequency / A4);\n}\n\n/**\n * Convert a MIDI note to frequency value.\n * @param  midi The midi number to convert.\n * @return The corresponding frequency value\n * @example\n */\nexport function mtof(midi: MidiNote): Hertz {\n\treturn A4 * Math.pow(2, (midi - 69) / 12);\n}\n","import { Context } from \"../context/Context\";\nimport { Tone } from \"../Tone\";\nimport { isDefined, isObject , isString, isUndef } from \"../util/TypeCheck\";\nimport { BPM, Hertz, MidiNote, Milliseconds, Samples, Seconds, Ticks, Time } from \"./Units\";\n\nexport type TimeValue = Time | TimeBaseClass<any, any>;\n\n/**\n * The units that the TimeBase can accept. extended by other classes\n */\nexport type TimeBaseUnit = \"s\" | \"n\" | \"t\" | \"m\" | \"i\" | \"hz\" | \"tr\" | \"samples\" | \"number\";\n\nexport interface TypeFunction {\n\tregexp: RegExp;\n\tmethod: (value: string, ...args: string[]) => number;\n}\n\nexport interface TimeExpression<Type extends number> {\n\t[key: string]: {\n\t\tregexp: RegExp;\n\t\tmethod: (value: string, ...args: string[]) => Type;\n\t};\n}\n\n/**\n * TimeBase is a flexible encoding of time which can be evaluated to and from a string.\n * @param  val    The time value as a number, string or object\n * @param  units  Unit values\n * @example\n * new TimeBase(4, \"n\")\n * new TimeBase(2, \"t\")\n * new TimeBase(\"2t\")\n * new TimeBase({\"2t\" : 2})\n * new TimeBase(\"2t\") + new TimeBase(\"4n\");\n * @category Unit\n */\nexport abstract class TimeBaseClass<Type extends number, Unit extends string> extends Tone {\n\n\treadonly context: Context;\n\n\t/**\n\t * The value of the units\n\t */\n\tprotected _val?: TimeValue;\n\n\t/**\n\t * The units of time\n\t */\n\tprotected _units?: Unit;\n\n\t/**\n\t * All of the conversion expressions\n\t */\n\tprotected _expressions: TimeExpression<Type>;\n\n\t/**\n\t * The default units\n\t */\n\treadonly defaultUnits: Unit = \"s\" as Unit;\n\n\tconstructor(context: Context, value?: TimeValue, units?: Unit) {\n\t\tsuper();\n\n\t\tthis._val = value;\n\t\tthis._units = units;\n\t\tthis.context = context;\n\t\tthis._expressions = this._getExpressions();\n\t}\n\n\t/**\n\t * All of the time encoding expressions\n\t */\n\tprotected _getExpressions(): TimeExpression<Type> {\n\t\treturn {\n\t\t\thz: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._frequencyToUnits(parseFloat(value));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?)hz$/i,\n\t\t\t},\n\t\t\ti: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._ticksToUnits(parseInt(value, 10));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)i$/i,\n\t\t\t},\n\t\t\tm: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._beatsToUnits(parseInt(value, 10) * this._getTimeSignature());\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)m$/i,\n\t\t\t},\n\t\t\tn: {\n\t\t\t\tmethod: (value, dot) => {\n\t\t\t\t\tconst numericValue = parseInt(value, 10);\n\t\t\t\t\tconst scalar = dot === \".\" ? 1.5 : 1;\n\t\t\t\t\tif (numericValue === 1) {\n\t\t\t\t\t\treturn this._beatsToUnits(this._getTimeSignature()) * scalar as Type;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn this._beatsToUnits(4 / numericValue) * scalar as Type;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)n(\\.?)$/i,\n\t\t\t},\n\t\t\tnumber: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._expressions[this.defaultUnits].method.call(this, value);\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?)$/,\n\t\t\t},\n\t\t\ts: {\n\t\t\t\tmethod: (value): Type => {\n\t\t\t\t\treturn this._secondsToUnits(parseFloat(value));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?)s$/,\n\t\t\t},\n\t\t\tsamples: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn parseInt(value, 10) / this.context.sampleRate as Type;\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)samples$/,\n\t\t\t},\n\t\t\tt: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\tconst numericValue = parseInt(value, 10);\n\t\t\t\t\treturn this._beatsToUnits(8 / (Math.floor(numericValue) * 3));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)t$/i,\n\t\t\t},\n\t\t\ttr: {\n\t\t\t\tmethod: (m, q, s) => {\n\t\t\t\t\tlet total = 0;\n\t\t\t\t\tif (m && m !== \"0\") {\n\t\t\t\t\t\ttotal += this._beatsToUnits(this._getTimeSignature() * parseFloat(m));\n\t\t\t\t\t}\n\t\t\t\t\tif (q && q !== \"0\") {\n\t\t\t\t\t\ttotal += this._beatsToUnits(parseFloat(q));\n\t\t\t\t\t}\n\t\t\t\t\tif (s && s !== \"0\") {\n\t\t\t\t\t\ttotal += this._beatsToUnits(parseFloat(s) / 4);\n\t\t\t\t\t}\n\t\t\t\t\treturn total as Type;\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?$/,\n\t\t\t},\n\t\t};\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tVALUE OF\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Evaluate the time value. Returns the time in seconds.\n\t */\n\tvalueOf(): Type {\n\t\tif (this._val instanceof TimeBaseClass) {\n\t\t\tthis.fromType(this._val);\n\t\t}\n\t\tif (isUndef(this._val)) {\n\t\t\treturn this._noArg();\n\t\t} else if (isString(this._val) && isUndef(this._units)) {\n\t\t\tfor (const units in this._expressions) {\n\t\t\t\tif (this._expressions[units].regexp.test(this._val.trim())) {\n\t\t\t\t\tthis._units = units as Unit;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (isObject(this._val)) {\n\t\t\tlet total = 0;\n\t\t\tfor (const typeName in this._val) {\n\t\t\t\tif (isDefined(this._val[typeName])) {\n\t\t\t\t\tconst quantity = this._val[typeName];\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tconst time = (new this.constructor(this.context, typeName)).valueOf() * quantity;\n\t\t\t\t\ttotal += time;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn total as Type;\n\t\t}\n\t\tif (isDefined(this._units)) {\n\t\t\tconst expr = this._expressions[this._units];\n\t\t\tconst matching = this._val.toString().trim().match(expr.regexp);\n\t\t\tif (matching) {\n\t\t\t\treturn expr.method.apply(this, matching.slice(1));\n\t\t\t} else {\n\t\t\t\treturn expr.method.call(this, this._val);\n\t\t\t}\n\t\t} else if (isString(this._val)) {\n\t\t\treturn parseFloat(this._val) as Type;\n\t\t} else {\n\t\t\treturn this._val as Type;\n\t\t}\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tUNIT CONVERSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Returns the value of a frequency in the current units\n\t */\n\tprotected _frequencyToUnits(freq: Hertz): Type {\n\t\treturn 1 / freq as Type;\n\t}\n\n\t/**\n\t *  Return the value of the beats in the current units\n\t */\n\tprotected _beatsToUnits(beats: number): Type {\n\t\treturn (60 / this._getBpm()) * beats as Type;\n\t}\n\n\t/**\n\t *  Returns the value of a second in the current units\n\t */\n\tprotected _secondsToUnits(seconds: Seconds): Type {\n\t\treturn seconds as Type;\n\t}\n\n\t/**\n\t *  Returns the value of a tick in the current time units\n\t *  @private\n\t */\n\tprotected _ticksToUnits(ticks: Ticks): Type {\n\t\treturn (ticks * (this._beatsToUnits(1)) / this._getPPQ()) as Type;\n\t}\n\n\t/**\n\t *  With no arguments, return 'now'\n\t */\n\tprotected _noArg(): Type {\n\t\treturn this._now();\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tTEMPO CONVERSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Return the bpm\n\t */\n\tprotected _getBpm(): BPM {\n\t\treturn this.context.transport.bpm.value;\n\t}\n\n\t/**\n\t * Return the timeSignature\n\t */\n\tprotected _getTimeSignature(): number {\n\t\treturn this.context.transport.timeSignature as number;\n\t}\n\n\t/**\n\t * Return the PPQ or 192 if Transport is not available\n\t */\n\tprotected _getPPQ(): number {\n\t\treturn this.context.transport.PPQ;\n\t}\n\n\t/**\n\t * Return the current time in whichever context is relevant\n\t */\n\tprotected abstract _now(): Type;\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tCONVERSION INTERFACE\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Coerce a time type into this units type.\n\t * @param type Any time type units\n\t */\n\tfromType(type: TimeBaseClass<any, any>): this {\n\t\tthis._units = undefined;\n\t\tswitch (this.defaultUnits) {\n\t\t\tcase \"s\":\n\t\t\t\tthis._val = type.toSeconds();\n\t\t\t\tbreak;\n\t\t\tcase \"i\":\n\t\t\t\tthis._val = type.toTicks();\n\t\t\t\tbreak;\n\t\t\tcase \"hz\":\n\t\t\t\tthis._val = type.toFrequency();\n\t\t\t\tbreak;\n\t\t\tcase \"midi\":\n\t\t\t\tthis._val = type.toMidi();\n\t\t\t\tbreak;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Return the value in seconds\n\t */\n\tabstract toSeconds(): Seconds;\n\n\t/**\n\t *  Return the value as a Midi note\n\t */\n\tabstract toMidi(): MidiNote;\n\n\t/**\n\t * Convert the value into ticks\n\t */\n\tabstract toTicks(): Ticks;\n\n\t/**\n\t *  Return the value in hertz\n\t */\n\ttoFrequency(): Hertz {\n\t\treturn 1 / this.toSeconds();\n\t}\n\n\t/**\n\t *  Return the time in samples\n\t */\n\ttoSamples(): Samples {\n\t\treturn this.toSeconds() * this.context.sampleRate;\n\t}\n\n\t/**\n\t *  Return the time in milliseconds.\n\t */\n\ttoMilliseconds(): Milliseconds {\n\t\treturn this.toSeconds() * 1000;\n\t}\n}\n","import { getContext } from \"../Global\";\nimport { ftom } from \"./Conversions\";\nimport { TimeBaseClass, TimeBaseUnit, TimeExpression, TimeValue } from \"./TimeBase\";\nimport { BarsBeatsSixteenths, MidiNote, Seconds, Subdivision, Ticks, Time } from \"./Units\";\n\n/**\n * TimeClass is a primitive type for encoding and decoding Time values.\n * TimeClass can be passed into the parameter of any method which takes time as an argument.\n * @param  val    The time value.\n * @param  units  The units of the value.\n * @example\n * var t = Time(\"4n\");//a quarter note\n * @category Unit\n */\nexport class TimeClass<Type extends Seconds | Ticks = Seconds, Unit extends string = TimeBaseUnit>\nextends TimeBaseClass<Type, Unit> {\n\n\tname = \"Time\";\n\n\tprotected _getExpressions(): TimeExpression<Type> {\n\t\treturn Object.assign(super._getExpressions(), {\n\t\t\tnow: {\n\t\t\t\tmethod: (capture: string): Type => {\n\t\t\t\t\treturn this._now() + new (this.constructor as typeof TimeClass)(this.context, capture).valueOf() as Type;\n\t\t\t\t},\n\t\t\t\tregexp: /^\\+(.+)/,\n\t\t\t},\n\t\t\tquantize: {\n\t\t\t\tmethod: (capture: string): Type => {\n\t\t\t\t\tconst quantTo = new TimeClass(this.context, capture).valueOf();\n\t\t\t\t\treturn this._secondsToUnits(this.context.transport.nextSubdivision(quantTo));\n\t\t\t\t},\n\t\t\t\tregexp: /^@(.+)/,\n\t\t\t},\n\t\t});\n\t}\n\n\t/**\n\t * Quantize the time by the given subdivision. Optionally add a\n\t * percentage which will move the time value towards the ideal\n\t * quantized value by that percentage.\n\t * @param  val    The subdivision to quantize to\n\t * @param  percent  Move the time value towards the quantized value by a percentage.\n\t * @example\n\t * Time(21).quantize(2) //returns 22\n\t * Time(0.6).quantize(\"4n\", 0.5) //returns 0.55\n\t */\n\tquantize(subdiv: Time, percent = 1): Type {\n\t\tconst subdivision = new (this.constructor as typeof TimeClass)(this.context, subdiv).valueOf();\n\t\tconst value = this.valueOf();\n\t\tconst multiple = Math.round(value / subdivision);\n\t\tconst ideal = multiple * subdivision;\n\t\tconst diff = ideal - value;\n\t\treturn value + diff * percent as Type;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// CONVERSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\t/**\n\t *  Convert a Time to Notation. The notation values are will be the\n\t *  closest representation between 1m to 128th note.\n\t *  @return {Notation}\n\t *  @example\n\t * //if the Transport is at 120bpm:\n\t * Time(2).toNotation();//returns \"1m\"\n\t */\n\ttoNotation(): Subdivision {\n\t\tconst time = this.toSeconds();\n\t\tconst testNotations: Subdivision[] = [\"1m\"];\n\t\tfor (let power = 1; power < 9; power++) {\n\t\t\tconst subdiv = Math.pow(2, power);\n\t\t\ttestNotations.push(subdiv + \"n.\" as Subdivision);\n\t\t\ttestNotations.push(subdiv + \"n\" as Subdivision);\n\t\t\ttestNotations.push(subdiv + \"t\" as Subdivision);\n\t\t}\n\t\ttestNotations.push(\"0\");\n\t\t// find the closets notation representation\n\t\tlet closest = testNotations[0];\n\t\tlet closestSeconds = new TimeClass(this.context, testNotations[0]).toSeconds();\n\t\ttestNotations.forEach(notation => {\n\t\t\tconst notationSeconds = new TimeClass(this.context, notation).toSeconds();\n\t\t\tif (Math.abs(notationSeconds - time) < Math.abs(closestSeconds - time)) {\n\t\t\t\tclosest = notation;\n\t\t\t\tclosestSeconds = notationSeconds;\n\t\t\t}\n\t\t});\n\t\treturn closest;\n\t}\n\n\t/**\n\t *  Return the time encoded as Bars:Beats:Sixteenths.\n\t */\n\ttoBarsBeatsSixteenths(): BarsBeatsSixteenths {\n\t\tconst quarterTime = this._beatsToUnits(1);\n\t\tlet quarters = this.valueOf() / quarterTime;\n\t\tquarters = parseFloat(quarters.toFixed(4));\n\t\tconst measures = Math.floor(quarters / this._getTimeSignature());\n\t\tlet sixteenths = (quarters % 1) * 4;\n\t\tquarters = Math.floor(quarters) % this._getTimeSignature();\n\t\tconst sixteenthString = sixteenths.toString();\n\t\tif (sixteenthString.length > 3) {\n\t\t\t// the additional parseFloat removes insignificant trailing zeroes\n\t\t\tsixteenths = parseFloat(parseFloat(sixteenthString).toFixed(3));\n\t\t}\n\t\tconst progress = [measures, quarters, sixteenths];\n\t\treturn progress.join(\":\");\n\t}\n\n\t/**\n\t *  Return the time in ticks.\n\t */\n\ttoTicks(): Ticks {\n\t\tconst quarterTime = this._beatsToUnits(1);\n\t\tconst quarters = this.valueOf() / quarterTime;\n\t\treturn Math.round(quarters * this._getPPQ());\n\t}\n\n\t/**\n\t *  Return the time in seconds.\n\t */\n\ttoSeconds(): Seconds {\n\t\treturn this.valueOf();\n\t}\n\n\t/**\n\t *  Return the value as a midi note.\n\t */\n\ttoMidi(): MidiNote {\n\t\treturn ftom(this.toFrequency());\n\t}\n\n\tprotected _now(): Type {\n\t\treturn this.context.now() as Type;\n\t}\n}\n\n/**\n * Create a TimeClass from a time string or number.\n * @param value A value which reprsents time\n * @param units The value's units if they can't be inferred by the value.\n * @category Unit\n */\nexport function Time(value?: TimeValue, units?: TimeBaseUnit): TimeClass<Seconds> {\n\treturn new TimeClass(getContext(), value, units);\n}\n","import { getContext } from \"../Global\";\nimport { intervalToFrequencyRatio, mtof } from \"./Conversions\";\nimport { ftom, getA4, setA4 } from \"./Conversions\";\nimport { TimeClass } from \"./Time\";\nimport { TimeBaseClass, TimeBaseUnit, TimeExpression, TimeValue } from \"./TimeBase\";\nimport { Frequency, Hertz, Interval, MidiNote, Note, Seconds, Ticks } from \"./Units\";\n\nexport type FrequencyUnit = TimeBaseUnit | \"midi\";\n\n/**\n * Frequency is a primitive type for encoding Frequency values.\n * Eventually all time values are evaluated to hertz using the `eval` method.\n * @example\n * Frequency(\"C3\") // 261\n * Frequency(38, \"midi\") //\n * Frequency(\"C3\").transpose(4);\n * @category Unit\n */\nexport class FrequencyClass<Type extends number = Hertz> extends TimeClass<Type, FrequencyUnit> {\n\n\tname = \"Frequency\";\n\n\treadonly defaultUnits: FrequencyUnit = \"hz\";\n\n\t/**\n\t * The [concert tuning pitch](https://en.wikipedia.org/wiki/Concert_pitch) which is used\n\t * to generate all the other pitch values from notes. A4's values in Hertz.\n\t */\n\tstatic get A4(): Hertz {\n\t\treturn getA4();\n\t}\n\tstatic set A4(freq: Hertz) {\n\t\tsetA4(freq);\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tAUGMENT BASE EXPRESSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\tprotected _getExpressions(): TimeExpression<Type> {\n\t\treturn Object.assign({}, super._getExpressions(), {\n\t\t\tmidi : {\n\t\t\t\tregexp : /^(\\d+(?:\\.\\d+)?midi)/,\n\t\t\t\tmethod(value): number {\n\t\t\t\t\tif (this.defaultUnits === \"midi\") {\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn FrequencyClass.mtof(value);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\tnote : {\n\t\t\t\tregexp : /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i,\n\t\t\t\tmethod(pitch, octave): number {\n\t\t\t\t\tconst index = noteToScaleIndex[pitch.toLowerCase()];\n\t\t\t\t\tconst noteNumber = index + (parseInt(octave, 10) + 1) * 12;\n\t\t\t\t\tif (this.defaultUnits === \"midi\") {\n\t\t\t\t\t\treturn noteNumber;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn FrequencyClass.mtof(noteNumber);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\ttr : {\n\t\t\t\tregexp : /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?/,\n\t\t\t\tmethod(m, q, s): number {\n\t\t\t\t\tlet total = 1;\n\t\t\t\t\tif (m && m !== \"0\") {\n\t\t\t\t\t\ttotal *= this._beatsToUnits(this._getTimeSignature() * parseFloat(m));\n\t\t\t\t\t}\n\t\t\t\t\tif (q && q !== \"0\") {\n\t\t\t\t\t\ttotal *= this._beatsToUnits(parseFloat(q));\n\t\t\t\t\t}\n\t\t\t\t\tif (s && s !== \"0\") {\n\t\t\t\t\t\ttotal *= this._beatsToUnits(parseFloat(s) / 4);\n\t\t\t\t\t}\n\t\t\t\t\treturn total;\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tEXPRESSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Transposes the frequency by the given number of semitones.\n\t *  @return  A new transposed frequency\n\t *  @example\n\t * Frequency(\"A4\").transpose(3); //\"C5\"\n\t */\n\ttranspose(interval: Interval): FrequencyClass {\n\t\treturn new FrequencyClass(this.context, this.valueOf() * intervalToFrequencyRatio(interval));\n\t}\n\n\t/**\n\t *  Takes an array of semitone intervals and returns\n\t *  an array of frequencies transposed by those intervals.\n\t *  @return  Returns an array of Frequencies\n\t *  @example\n\t * Frequency(\"A4\").harmonize([0, 3, 7]); //[\"A4\", \"C5\", \"E5\"]\n\t */\n\tharmonize(intervals: Interval[]): FrequencyClass[] {\n\t\treturn intervals.map(interval => {\n\t\t\treturn this.transpose(interval);\n\t\t});\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tUNIT CONVERSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Return the value of the frequency as a MIDI note\n\t * @example\n\t * Frequency(\"C4\").toMidi(); //60\n\t */\n\ttoMidi(): MidiNote {\n\t\treturn ftom(this.valueOf());\n\t}\n\n\t/**\n\t * Return the value of the frequency in Scientific Pitch Notation\n\t * @example\n\t * Frequency(69, \"midi\").toNote(); //\"A4\"\n\t */\n\ttoNote(): Note {\n\t\tconst freq = this.toFrequency();\n\t\tconst log = Math.log2(freq / FrequencyClass.A4);\n\t\tlet noteNumber = Math.round(12 * log) + 57;\n\t\tconst octave = Math.floor(noteNumber / 12);\n\t\tif (octave < 0) {\n\t\t\tnoteNumber += -12 * octave;\n\t\t}\n\t\tconst noteName = scaleIndexToNote[noteNumber % 12];\n\t\treturn noteName + octave.toString() as Note;\n\t}\n\n\t/**\n\t *  Return the duration of one cycle in seconds.\n\t */\n\ttoSeconds(): Seconds {\n\t\treturn 1 / super.toSeconds();\n\t}\n\n\t/**\n\t *  Return the duration of one cycle in ticks\n\t */\n\ttoTicks(): Ticks {\n\t\tconst quarterTime = this._beatsToUnits(1);\n\t\tconst quarters = this.valueOf() / quarterTime;\n\t\treturn Math.floor(quarters * this._getPPQ());\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tUNIT CONVERSIONS HELPERS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  With no arguments, return 0\n\t */\n\tprotected _noArg(): Type {\n\t\treturn 0 as Type;\n\t}\n\n\t/**\n\t *  Returns the value of a frequency in the current units\n\t */\n\tprotected _frequencyToUnits(freq: Hertz): Type {\n\t\treturn freq as Type;\n\t}\n\n\t/**\n\t *  Returns the value of a tick in the current time units\n\t */\n\tprotected _ticksToUnits(ticks: Ticks): Type {\n\t\treturn 1 / ((ticks * 60) / (this._getBpm() * this._getPPQ())) as Type;\n\t}\n\n\t/**\n\t *  Return the value of the beats in the current units\n\t */\n\tprotected _beatsToUnits(beats: number): Type {\n\t\treturn 1 / super._beatsToUnits(beats) as Type;\n\t}\n\n\t/**\n\t *  Returns the value of a second in the current units\n\t */\n\tprotected _secondsToUnits(seconds: Seconds): Type {\n\t\treturn 1 / seconds as Type;\n\t}\n\n\t/**\n\t * Convert a MIDI note to frequency value.\n\t * @param  midi The midi number to convert.\n\t * @return The corresponding frequency value\n\t * @example\n\t * FrequencyClass.mtof(69); // returns 440\n\t */\n\tstatic mtof(midi: MidiNote): Hertz {\n\t\treturn mtof(midi);\n\t}\n\n\t/**\n\t * Convert a frequency value to a MIDI note.\n\t * @param frequency The value to frequency value to convert.\n\t * @example\n\t * Frequency.ftom(440); // returns 69\n\t */\n\tstatic ftom(frequency: Hertz): MidiNote {\n\t\treturn ftom(frequency);\n\t}\n}\n\n///////////////////////////////////////////////////////////////////////////\n// \tFREQUENCY CONVERSIONS\n///////////////////////////////////////////////////////////////////////////\n\n/**\n *  Note to scale index\n *  @type  {Object}\n *  @private\n */\nconst noteToScaleIndex = {\n\t// tslint:disable-next-line\n\t\"cbb\" : -2, \"cb\" : -1, \"c\" : 0, \"c#\" : 1, \"cx\" : 2,\n\t\"dbb\" : 0, \"db\" : 1, \"d\" : 2, \"d#\" : 3, \"dx\" : 4,\n\t\"ebb\" : 2, \"eb\" : 3, \"e\" : 4, \"e#\" : 5, \"ex\" : 6,\n\t\"fbb\" : 3, \"fb\" : 4, \"f\" : 5, \"f#\" : 6, \"fx\" : 7,\n\t\"gbb\" : 5, \"gb\" : 6, \"g\" : 7, \"g#\" : 8, \"gx\" : 9,\n\t\"abb\" : 7, \"ab\" : 8, \"a\" : 9, \"a#\" : 10, \"ax\" : 11,\n\t\"bbb\" : 9, \"bb\" : 10, \"b\" : 11, \"b#\" : 12, \"bx\" : 13,\n};\n\n/**\n *  scale index to note (sharps)\n *  @type  {Array}\n *  @private\n */\nconst scaleIndexToNote = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n\n/**\n * Convert a value into a FrequencyClass object.\n * @category Unit\n */\nexport function Frequency(value?: TimeValue | Frequency, units?: FrequencyUnit): FrequencyClass {\n\treturn new FrequencyClass(getContext(), value, units);\n}\n","import { getContext } from \"../Global\";\nimport { Seconds, Ticks } from \"../type/Units\";\nimport { TimeClass } from \"./Time\";\nimport { TimeBaseUnit, TimeValue } from \"./TimeBase\";\n\n/**\n * TransportTime is a the time along the Transport's\n * timeline. It is similar to Tone.Time, but instead of evaluating\n * against the AudioContext's clock, it is evaluated against\n * the Transport's position. See [TransportTime wiki](https://github.com/Tonejs/Tone.js/wiki/TransportTime).\n * @category Unit\n */\nexport class TransportTimeClass<Type extends Seconds | Ticks = Seconds> extends TimeClass<Type> {\n\n\tname = \"TransportTime\";\n\n\t/**\n\t * Return the current time in whichever context is relevant\n\t */\n\tprotected _now(): Type {\n\t\treturn this.context.transport.seconds as Type;\n\t}\n}\n\n/**\n * TransportTime is a the time along the Transport's\n * timeline. It is similar to [[Time]], but instead of evaluating\n * against the AudioContext's clock, it is evaluated against\n * the Transport's position. See [TransportTime wiki](https://github.com/Tonejs/Tone.js/wiki/TransportTime).\n * @category Unit\n */\nexport function TransportTime(value?: TimeValue, units?: TimeBaseUnit): TransportTimeClass {\n\treturn new TransportTimeClass(getContext(), value, units);\n}\n","import { getContext } from \"../Global\";\nimport { Tone } from \"../Tone\";\nimport { FrequencyClass } from \"../type/Frequency\";\nimport { TimeClass } from \"../type/Time\";\nimport { TransportTimeClass } from \"../type/TransportTime\";\nimport { Frequency, Hertz, Seconds, Ticks, Time } from \"../type/Units\";\nimport { getDefaultsFromInstance, omitFromObject, optionsFromArguments } from \"../util/Defaults\";\nimport { RecursivePartial } from \"../util/Interface\";\nimport { isArray, isBoolean, isDefined, isNumber, isString, isUndef } from \"../util/TypeCheck\";\nimport { Context } from \"./Context\";\n\n/**\n * A unit which process audio\n */\nexport interface ToneWithContextOptions {\n\tcontext: Context;\n}\n\n/**\n * The Base class for all nodes that have an AudioContext.\n * @category Core\n */\nexport abstract class ToneWithContext<Options extends ToneWithContextOptions> extends Tone {\n\n\t/**\n\t * The context belonging to the node.\n\t */\n\treadonly context: Context;\n\n\t/**\n\t * The default context to use if no AudioContext is passed in to the constructor\n\t */\n\treadonly defaultContext?: Context;\n\n\tconstructor(context?: Context | Partial<ToneWithContextOptions>) {\n\t\tconst options = optionsFromArguments(ToneWithContext.getDefaults(), arguments, [\"context\"]);\n\t\tsuper();\n\t\tif (this.defaultContext) {\n\t\t\tthis.context = this.defaultContext;\n\t\t} else {\n\t\t\tthis.context = options.context;\n\t\t}\n\t}\n\n\tstatic getDefaults(): ToneWithContextOptions {\n\t\treturn {\n\t\t\tcontext: getContext(),\n\t\t};\n\t}\n\n\t/**\n\t * Return the current time of the Context clock plus the lookAhead.\n\t */\n\tnow(): Seconds {\n\t\treturn this.context.currentTime + this.context.lookAhead;\n\t}\n\n\t/**\n\t * Return the current time of the Context clock without any lookAhead.\n\t */\n\timmediate(): Seconds {\n\t\treturn this.context.currentTime;\n\t}\n\n\t/**\n\t * The duration in seconds of one sample.\n\t */\n\tget sampleTime(): Seconds {\n\t\treturn 1 / this.context.sampleRate;\n\t}\n\n\t/**\n\t * The number of seconds of 1 processing block (128 samples)\n\t */\n\tget blockTime(): Seconds {\n\t\treturn 128 / this.context.sampleRate;\n\t}\n\n\t/**\n\t * Convert the incoming time to seconds\n\t */\n\ttoSeconds(time?: Time): Seconds {\n\t\treturn new TimeClass(this.context, time).toSeconds();\n\t}\n\n\t/**\n\t * Convert the input to a frequency number\n\t */\n\ttoFrequency(freq: Frequency): Hertz {\n\t\treturn new FrequencyClass(this.context, freq).toFrequency();\n\t}\n\n\t/**\n\t * Convert the input time into ticks\n\t */\n\ttoTicks(time?: Time | TimeClass): Ticks {\n\t\treturn new TransportTimeClass(this.context, time).toTicks();\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tGET/SET\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Get the object's attributes.\n\t * @example\n\t * osc.get();\n\t * //returns {\"type\" : \"sine\", \"frequency\" : 440, ...etc}\n\t */\n\tget(): Options {\n\t\tconst defaults = getDefaultsFromInstance(this) as Options;\n\t\tObject.keys(defaults).forEach(attribute => {\n\t\t\tif (Reflect.has(this, attribute)) {\n\t\t\t\tconst member = this[attribute];\n\t\t\t\tif (isDefined(member) && isDefined(member.value) && isDefined(member.setValueAtTime)) {\n\t\t\t\t\tdefaults[attribute] = member.value;\n\t\t\t\t} else if (member instanceof ToneWithContext) {\n\t\t\t\t\tdefaults[attribute] = member.get();\n\t\t\t\t// otherwise make sure it's a serializable type\n\t\t\t\t} else if (isArray(member) || isNumber(member) || isString(member) || isBoolean(member)) {\n\t\t\t\t\tdefaults[attribute] = member;\n\t\t\t\t} else {\n\t\t\t\t\t// remove all undefined and unserializable attributes\n\t\t\t\t\tdelete defaults[attribute];\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn defaults;\n\t}\n\n\t/**\n\t * Set the parameters at once. Either pass in an\n\t * object mapping parameters to values, or to set a\n\t * single parameter, by passing in a string and value.\n\t * The last argument is an optional ramp time which\n\t * will ramp any signal values to their destination value\n\t * over the duration of the rampTime.\n\t * @param  params\n\t * @example\n\t * //set values using an object\n\t * filter.set({\n\t * \t\"frequency\" : 300,\n\t * \t\"type\" : \"highpass\"\n\t * });\n\t */\n\tset(props: RecursivePartial<Options>): this {\n\t\tObject.keys(props).forEach(attribute => {\n\t\t\tif (Reflect.has(this, attribute) && isDefined(this[attribute])) {\n\t\t\t\tif (this[attribute] && isDefined(this[attribute].value) && isDefined(this[attribute].setValueAtTime)) {\n\t\t\t\t\t// small optimization\n\t\t\t\t\tif (this[attribute].value !== props[attribute]) {\n\t\t\t\t\t\tthis[attribute].value = props[attribute];\n\t\t\t\t\t}\n\t\t\t\t} else if (this[attribute] instanceof ToneWithContext) {\n\t\t\t\t\tthis[attribute].set(props[attribute]);\n\t\t\t\t} else {\n\t\t\t\t\tthis[attribute] = props[attribute];\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n}\n","import { AbstractParam } from \"../context/AbstractParam\";\nimport { dbToGain, gainToDb } from \"../type/Conversions\";\nimport { AudioRange, Decibels, Frequency, NormalRange, Positive, Time, Unit, UnitName } from \"../type/Units\";\nimport { isAudioParam } from \"../util/AdvancedTypeCheck\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isDefined } from \"../util/TypeCheck\";\nimport { ToneWithContext, ToneWithContextOptions } from \"./ToneWithContext\";\n\nexport interface ParamOptions extends ToneWithContextOptions {\n\tunits: UnitName;\n\tvalue?: any;\n\tparam: AudioParam;\n\tconvert: boolean;\n}\n\n/**\n * the possible automation types\n */\ntype AutomationType = \"linear\" | \"exponential\" | \"setValue\" | \"setTarget\" | \"cancel\";\n\n/**\n * The events on the automation\n */\nexport interface AutomationEvent {\n\ttype: AutomationType;\n\ttime: number;\n\tvalue: number;\n\tconstant?: number;\n}\n\n/**\n * Param wraps the native Web Audio's AudioParam to provide\n * additional unit conversion functionality. It also\n * serves as a base-class for classes which have a single,\n * automatable parameter.\n * @category Core\n */\nexport class Param<Type extends Unit = number>\nextends ToneWithContext<ParamOptions>\nimplements AbstractParam<Type> {\n\n\treadonly name: string = \"Param\";\n\n\tstatic getDefaults(): ParamOptions {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tconvert: true,\n\t\t\tunits: \"number\" as UnitName,\n\t\t} as ParamOptions);\n\t}\n\n\t/**\n\t * The input connection\n\t */\n\treadonly input: AudioParam;\n\treadonly units: UnitName;\n\tconvert: boolean;\n\toverridden: boolean = false;\n\n\t/**\n\t * The timeline which tracks all of the automations.\n\t */\n\tprotected _events: Timeline<AutomationEvent>;\n\n\t/**\n\t *  The native parameter to control\n\t */\n\tprotected _param: AudioParam;\n\n\t/**\n\t *  The default value before anything is assigned\n\t */\n\tprotected _initialValue: number;\n\n\t/**\n\t *  The minimum output value\n\t */\n\tprivate _minOutput = 1e-7;\n\n\tconstructor(param: AudioParam, units?: Unit, convert?: boolean);\n\tconstructor(options: Partial<ParamOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Param.getDefaults(), arguments, [\"param\", \"units\", \"convert\"]));\n\n\t\tconst options = optionsFromArguments(Param.getDefaults(), arguments, [\"param\", \"units\", \"convert\"]);\n\n\t\tthis.assert(isDefined(options.param) && isAudioParam(options.param), \"param must be an AudioParam\");\n\n\t\t// initialize\n\t\tthis._param = this.input = options.param;\n\t\tthis._events = new Timeline<AutomationEvent>(1000);\n\t\tthis._initialValue = this._param.defaultValue;\n\t\tthis.units = options.units;\n\t\tthis.convert = options.convert;\n\n\t\t// if the value is defined, set it immediately\n\t\tif (isDefined(options.value) && options.value !== this._toType(this._initialValue)) {\n\t\t\tthis.setValueAtTime(options.value, 0);\n\t\t}\n\t}\n\n\tget value(): Type {\n\t\tconst now = this.now();\n\t\treturn this.getValueAtTime(now);\n\t}\n\tset value(value: Type) {\n\t\tthis._initialValue = this._fromType(value);\n\t\tthis.cancelScheduledValues(this.now());\n\t\tthis.setValueAtTime(value, this.now());\n\t}\n\n\tget minValue(): number {\n\t\tif (this.units === \"time\" || this.units === \"frequency\" ||\n\t\t\tthis.units === \"normalRange\" || this.units === \"positive\" ||\n\t\t\tthis.units === \"transportTime\" || this.units === \"ticks\" ||\n\t\t\tthis.units === \"bpm\" || this.units === \"hertz\" || this.units === \"samples\") {\n\t\t\treturn 0;\n\t\t} else if (this.units === \"audioRange\") {\n\t\t\treturn -1;\n\t\t} else if (this.units === \"decibels\") {\n\t\t\treturn -Infinity;\n\t\t} else {\n\t\t\treturn this._param.minValue;\n\t\t}\n\t}\n\n\tget maxValue(): number {\n\t\tif (this.units === \"normalRange\" ||\n\t\t\tthis.units === \"audioRange\") {\n\t\t\treturn 1;\n\t\t} else {\n\t\t\treturn this._param.maxValue;\n\t\t}\n\t}\n\n\t/**\n\t * Type guard based on the unit name\n\t */\n\tprivate _is<T>(arg: any, type: UnitName): arg is T {\n\t\treturn this.units === type;\n\t}\n\n\t/**\n\t *  Convert the given value from the type specified by Param.units\n\t *  into the destination value (such as Gain or Frequency).\n\t */\n\tprotected _fromType(val: Type): number {\n\t\tif (this.convert && !this.overridden) {\n\t\t\tif (this._is<Time>(val, \"time\")) {\n\t\t\t\treturn this.toSeconds(val);\n\t\t\t} else if (this._is<Decibels>(val, \"decibels\")) {\n\t\t\t\treturn dbToGain(val);\n\t\t\t} else if (this._is<Frequency>(val, \"frequency\")) {\n\t\t\t\treturn this.toFrequency(val);\n\t\t\t} else if (this._is<NormalRange>(val, \"normalRange\")) {\n\t\t\t\treturn Math.min(Math.max(val, 0), 1);\n\t\t\t} else if (this._is<AudioRange>(val, \"audioRange\")) {\n\t\t\t\treturn Math.min(Math.max(val, -1), 1);\n\t\t\t} else if (this._is<Positive>(val, \"positive\")) {\n\t\t\t\treturn Math.max(val, 0);\n\t\t\t} else if (this._is<number>(val, \"number\")) {\n\t\t\t\treturn val;\n\t\t\t} else {\n\t\t\t\treturn val as number;\n\t\t\t}\n\t\t} else {\n\t\t\treturn val as number;\n\t\t}\n\t}\n\n\t/**\n\t * Convert the parameters value into the units specified by Param.units.\n\t */\n\tprotected _toType(val: number): Type {\n\t\tif (this.convert && this.units === \"decibels\") {\n\t\t\treturn gainToDb(val) as Type;\n\t\t} else {\n\t\t\treturn val as Type;\n\t\t}\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// ABSTRACT PARAM INTERFACE\n\t// all docs are generated from ParamInterface.ts\n\t///////////////////////////////////////////////////////////////////////////\n\n\tsetValueAtTime(value: Type, time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst numericValue = this._fromType(value);\n\t\tthis.assert(isFinite(numericValue) && isFinite(computedTime),\n\t\t\t`Invalid argument(s) to setValueAtTime: ${JSON.stringify(value)}, ${JSON.stringify(time)}`);\n\n\t\tthis.log(this.units, \"setValue\", value, computedTime);\n\t\tthis._events.add({\n\t\t\ttime: computedTime,\n\t\t\ttype: \"setValue\",\n\t\t\tvalue: numericValue,\n\t\t});\n\t\tthis._param.setValueAtTime(numericValue, computedTime);\n\t\treturn this;\n\t}\n\n\tgetValueAtTime(time: Time): Type {\n\t\tconst computedTime = Math.max(this.toSeconds(time), 0);\n\t\tconst after = this._events.getAfter(computedTime);\n\t\tconst before = this._events.get(computedTime);\n\t\tlet value = this._initialValue;\n\t\t// if it was set by\n\t\tif (before === null) {\n\t\t\tvalue = this._initialValue;\n\t\t} else if (before.type === \"setTarget\" && (after === null || after.type === \"setValue\")) {\n\t\t\tconst previous = this._events.getBefore(before.time);\n\t\t\tlet previousVal;\n\t\t\tif (previous === null) {\n\t\t\t\tpreviousVal = this._initialValue;\n\t\t\t} else {\n\t\t\t\tpreviousVal = previous.value;\n\t\t\t}\n\t\t\tif (isDefined(before.constant)) {\n\t\t\t\tvalue = this._exponentialApproach(before.time, previousVal, before.value, before.constant, computedTime);\n\t\t\t}\n\t\t} else if (after === null) {\n\t\t\tvalue = before.value;\n\t\t} else if (after.type === \"linear\" || after.type === \"exponential\") {\n\t\t\tlet beforeValue = before.value;\n\t\t\tif (before.type === \"setTarget\") {\n\t\t\t\tconst previous = this._events.getBefore(before.time);\n\t\t\t\tif (previous === null) {\n\t\t\t\t\tbeforeValue = this._initialValue;\n\t\t\t\t} else {\n\t\t\t\t\tbeforeValue = previous.value;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (after.type === \"linear\") {\n\t\t\t\tvalue = this._linearInterpolate(before.time, beforeValue, after.time, after.value, computedTime);\n\t\t\t} else {\n\t\t\t\tvalue = this._exponentialInterpolate(before.time, beforeValue, after.time, after.value, computedTime);\n\t\t\t}\n\t\t} else {\n\t\t\tvalue = before.value;\n\t\t}\n\t\treturn this._toType(value);\n\t}\n\n\tsetRampPoint(time: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tlet currentVal = this.getValueAtTime(time);\n\t\tthis.cancelAndHoldAtTime(time);\n\t\tif (this._fromType(currentVal) === 0) {\n\t\t\tcurrentVal = this._toType(this._minOutput);\n\t\t}\n\t\tthis.setValueAtTime(currentVal, time);\n\t\treturn this;\n\t}\n\n\tlinearRampToValueAtTime(value: Type, endTime: Time): this {\n\t\tconst numericValue = this._fromType(value);\n\t\tconst computedTime = this.toSeconds(endTime);\n\t\tthis.assert(isFinite(numericValue) && isFinite(computedTime),\n\t\t\t`Invalid argument(s) to linearRampToValueAtTime: ${JSON.stringify(value)}, ${JSON.stringify(endTime)}`);\n\t\tthis._events.add({\n\t\t\ttime: computedTime,\n\t\t\ttype: \"linear\",\n\t\t\tvalue : numericValue,\n\t\t});\n\t\tthis.log(this.units, \"linear\", value, computedTime);\n\t\tthis._param.linearRampToValueAtTime(numericValue, computedTime);\n\t\treturn this;\n\t}\n\n\texponentialRampToValueAtTime(value: Type, endTime: Time): this {\n\t\tlet numericValue = this._fromType(value);\n\t\tnumericValue = Math.max(this._minOutput, numericValue);\n\t\tconst computedTime = this.toSeconds(endTime);\n\t\tthis.assert(isFinite(numericValue) && isFinite(computedTime),\n\t\t\t`Invalid argument(s) to exponentialRampToValueAtTime: ${JSON.stringify(value)}, ${JSON.stringify(endTime)}`);\n\t\t// store the event\n\t\tthis._events.add({\n\t\t\ttime: computedTime,\n\t\t\ttype: \"exponential\",\n\t\t\tvalue : numericValue,\n\t\t});\n\t\tthis.log(this.units, \"exponential\", value, computedTime);\n\t\tthis._param.exponentialRampToValueAtTime(numericValue, computedTime);\n\t\treturn this;\n\t}\n\n\texponentialRampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tstartTime = this.toSeconds(startTime);\n\t\tthis.setRampPoint(startTime);\n\t\tthis.exponentialRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n\t\treturn this;\n\t}\n\n\tlinearRampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tstartTime = this.toSeconds(startTime);\n\t\tthis.setRampPoint(startTime);\n\t\tthis.linearRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n\t\treturn this;\n\t}\n\n\ttargetRampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tstartTime = this.toSeconds(startTime);\n\t\tthis.setRampPoint(startTime);\n\t\tthis.exponentialApproachValueAtTime(value, startTime, rampTime);\n\t\treturn this;\n\t}\n\n\texponentialApproachValueAtTime(value: Type, time: Time, rampTime: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\trampTime = this.toSeconds(rampTime);\n\t\tconst timeConstant = Math.log(rampTime + 1) / Math.log(200);\n\t\tthis.setTargetAtTime(value, time, timeConstant);\n\t\t// at 90% start a linear ramp to the final value\n\t\tthis.cancelAndHoldAtTime(time + rampTime * 0.9);\n\t\tthis.linearRampToValueAtTime(value, time + rampTime);\n\t\treturn this;\n\t}\n\n\tsetTargetAtTime(value: Type, startTime: Time, timeConstant: Positive): this {\n\t\tconst numericValue = this._fromType(value);\n\t\t// The value will never be able to approach without timeConstant > 0.\n\t\tthis.assert(isFinite(timeConstant) && timeConstant > 0, \"timeConstant must be a number greater than 0\");\n\t\tconst computedTime = this.toSeconds(startTime);\n\t\tthis.assert(isFinite(numericValue) && isFinite(computedTime),\n\t\t\t`Invalid argument(s) to setTargetAtTime: ${JSON.stringify(value)}, ${JSON.stringify(startTime)}`);\n\t\tthis._events.add({\n\t\t\tconstant: timeConstant,\n\t\t\ttime: computedTime,\n\t\t\ttype: \"setTarget\",\n\t\t\tvalue: numericValue,\n\t\t});\n\t\tthis.log(this.units, \"setTarget\", value, computedTime, timeConstant);\n\t\tthis._param.setTargetAtTime(numericValue, computedTime, timeConstant);\n\t\treturn this;\n\t}\n\n\tsetValueCurveAtTime(values: Type[], startTime: Time, duration: Time, scaling: number = 1): this {\n\t\tduration = this.toSeconds(duration);\n\t\tstartTime = this.toSeconds(startTime);\n\t\tconst startingValue = this._fromType(values[0]) * scaling;\n\t\tthis.setValueAtTime(this._toType(startingValue), startTime);\n\t\tconst segTime = duration / (values.length - 1);\n\t\tfor (let i = 1; i < values.length; i++) {\n\t\t\tconst numericValue = this._fromType(values[i]) * scaling;\n\t\t\tthis.linearRampToValueAtTime(this._toType(numericValue), startTime + i * segTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\tcancelScheduledValues(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis.assert(isFinite(computedTime), `Invalid argument to cancelScheduledValues: ${JSON.stringify(time)}`);\n\t\tthis._events.cancel(computedTime);\n\t\tthis._param.cancelScheduledValues(computedTime);\n\t\tthis.log(this.units, \"cancel\", computedTime);\n\t\treturn this;\n\t}\n\n\tcancelAndHoldAtTime(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst valueAtTime = this._fromType(this.getValueAtTime(computedTime));\n\t\t// remove the schedule events\n\t\tthis.assert(isFinite(computedTime), `Invalid argument to cancelAndHoldAtTime: ${JSON.stringify(time)}`);\n\n\t\tthis.log(this.units, \"cancelAndHoldAtTime\", computedTime, \"value=\" + valueAtTime);\n\n\t\tthis._param.cancelScheduledValues(computedTime);\n\n\t\t// if there is an event at the given computedTime\n\t\t// and that even is not a \"set\"\n\t\tconst before = this._events.get(computedTime);\n\t\tconst after = this._events.getAfter(computedTime);\n\t\tif (before && before.time === computedTime) {\n\t\t\t// remove everything after\n\t\t\tif (after) {\n\t\t\t\tthis._events.cancel(after.time);\n\t\t\t} else {\n\t\t\t\tthis._events.cancel(computedTime + this.sampleTime);\n\t\t\t}\n\t\t} else if (after) {\n\t\t\t// cancel the next event(s)\n\t\t\tthis._events.cancel(after.time);\n\t\t\tif (after.type === \"linear\") {\n\t\t\t\tthis.linearRampToValueAtTime(this._toType(valueAtTime), computedTime);\n\t\t\t} else if (after.type === \"exponential\") {\n\t\t\t\tthis.exponentialRampToValueAtTime(this._toType(valueAtTime), computedTime);\n\t\t\t}\n\t\t}\n\n\t\t// set the value at the given time\n\t\tthis._events.add({\n\t\t\ttime: computedTime,\n\t\t\ttype: \"setValue\",\n\t\t\tvalue: valueAtTime,\n\t\t});\n\t\tthis._param.setValueAtTime(valueAtTime, computedTime);\n\t\treturn this;\n\t}\n\n\trampTo(value: Type, rampTime: Time = 0.1, startTime?: Time): this {\n\t\tif (this.units === \"frequency\" || this.units === \"bpm\" || this.units === \"decibels\") {\n\t\t\tthis.exponentialRampTo(value, rampTime, startTime);\n\t\t} else {\n\t\t\tthis.linearRampTo(value, rampTime, startTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._events.dispose();\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tAUTOMATION CURVE CALCULATIONS\n\t// \tMIT License, copyright (c) 2014 Jordan Santell\n\t///////////////////////////////////////////////////////////////////////////\n\n\t// Calculates the the value along the curve produced by setTargetAtTime\n\tprotected _exponentialApproach(t0: number, v0: number, v1: number, timeConstant: number, t: number): number {\n\t\treturn v1 + (v0 - v1) * Math.exp(-(t - t0) / timeConstant);\n\t}\n\n\t// Calculates the the value along the curve produced by linearRampToValueAtTime\n\tprotected _linearInterpolate(t0: number, v0: number, t1: number, v1: number, t: number): number {\n\t\treturn v0 + (v1 - v0) * ((t - t0) / (t1 - t0));\n\t}\n\n\t// Calculates the the value along the curve produced by exponentialRampToValueAtTime\n\tprotected _exponentialInterpolate(t0: number, v0: number, t1: number, v1: number, t: number): number {\n\t\treturn v0 * Math.pow(v1 / v0, (t - t0) / (t1 - t0));\n\t}\n}\n","import { Unit } from \"../type/Units\";\nimport { isAudioNode, isAudioParam } from \"../util/AdvancedTypeCheck\";\nimport { assert } from \"../util/Debug\";\nimport { isDefined } from \"../util/TypeCheck\";\nimport { Param } from \"./Param\";\nimport { ToneWithContext, ToneWithContextOptions } from \"./ToneWithContext\";\n\nexport type InputNode = ToneAudioNode | AudioNode |  Param<Unit> | AudioParam;\nexport type OutputNode = ToneAudioNode | AudioNode;\n\ninterface ChannelProperties {\n\tchannelCount: number;\n\tchannelCountMode: ChannelCountMode;\n\tchannelInterpretation: ChannelInterpretation;\n}\n\n/**\n * The possible options for this node\n */\nexport type ToneAudioNodeOptions = ToneWithContextOptions;\n\n/**\n * ToneAudioNode is the base class for classes which process audio.\n * @category Core\n */\nexport abstract class ToneAudioNode<Options extends ToneAudioNodeOptions = ToneAudioNodeOptions>\nextends ToneWithContext<Options> {\n\n\tabstract name = \"AudioNode\";\n\n\t/**\n\t * The input node or nodes. If the object is a source,\n\t * it does not have any input and this.input is undefined.\n\t */\n\tabstract input: InputNode | undefined;\n\n\t/**\n\t * The output nodes. If the object is a sink,\n\t * it does not have any output and this.output is undefined.\n\t */\n\tabstract output: OutputNode | undefined;\n\n\t/**\n\t *  The number of inputs feeding into the AudioNode.\n\t *  For source nodes, this will be 0.\n\t */\n\tget numberOfInputs(): number {\n\t\tif (isDefined(this.input)) {\n\t\t\tif (isAudioParam(this.input) || this.input instanceof Param) {\n\t\t\t\treturn 1;\n\t\t\t} else {\n\t\t\t\treturn this.input.numberOfInputs;\n\t\t\t}\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t *  The number of outputs of the AudioNode.\n\t */\n\tget numberOfOutputs(): number {\n\t\tif (isDefined(this.output)) {\n\t\t\treturn this.output.numberOfOutputs;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * List all of the node that must be set to match the ChannelProperties\n\t */\n\tprotected _internalChannels: OutputNode[] = [];\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// AUDIO PROPERTIES\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Used to decide which nodes to get/set properties on\n\t */\n\tprivate _isAudioNode(node: any): node is AudioNode | ToneAudioNode {\n\t\treturn isDefined(node) && (node instanceof ToneAudioNode || isAudioNode(node));\n\t}\n\n\t/**\n\t * Get all of the audio nodes (either internal or input/output) which together\n\t * make up how the class node responds to channel input/output\n\t */\n\tprivate _getInternalNodes(): OutputNode[] {\n\t\tconst nodeList = this._internalChannels.slice(0);\n\t\tif (this._isAudioNode(this.input)) {\n\t\t\tnodeList.push(this.input);\n\t\t}\n\t\tif (this._isAudioNode(this.output)) {\n\t\t\tif (this.input !== this.output) {\n\t\t\t\tnodeList.push(this.output);\n\t\t\t}\n\t\t}\n\t\treturn nodeList;\n\t}\n\n\t/**\n\t * Set the audio options for this node such as channelInterpretation\n\t * channelCount, etc.\n\t * @param options\n\t */\n\tprivate _setChannelProperties(options: ChannelProperties): void {\n\t\tconst nodeList = this._getInternalNodes();\n\t\tnodeList.forEach(node => {\n\t\t\tnode.channelCount = options.channelCount;\n\t\t\tnode.channelCountMode = options.channelCountMode;\n\t\t\tnode.channelInterpretation = options.channelInterpretation;\n\t\t});\n\t}\n\n\t/**\n\t * Get the current audio options for this node such as channelInterpretation\n\t * channelCount, etc.\n\t */\n\tprivate _getChannelProperties(): ChannelProperties {\n\t\tconst nodeList = this._getInternalNodes();\n\t\tthis.assert(nodeList.length > 0, \"ToneAudioNode does not have any internal nodes\");\n\t\t// use the first node to get properties\n\t\t// they should all be the same\n\t\tconst node = nodeList[0];\n\t\treturn {\n\t\t\tchannelCount: node.channelCount,\n\t\t\tchannelCountMode: node.channelCountMode,\n\t\t\tchannelInterpretation: node.channelInterpretation,\n\t\t};\n\t}\n\n\t/**\n\t *  channelCount is the number of channels used when up-mixing and down-mixing\n\t *  connections to any inputs to the node. The default value is 2 except for\n\t *  specific nodes where its value is specially determined.\n\t */\n\tget channelCount(): number {\n\t\treturn this._getChannelProperties().channelCount;\n\t}\n\tset channelCount(channelCount) {\n\t\tconst props = this._getChannelProperties();\n\t\t// merge it with the other properties\n\t\tthis._setChannelProperties(Object.assign(props, { channelCount }));\n\t}\n\n\t// tslint:disable: max-line-length\n\t/**\n\t *  channelCountMode determines how channels will be counted when up-mixing and\n\t *  down-mixing connections to any inputs to the node.\n\t *  The default value is \"max\". This attribute has no effect for nodes with no inputs.\n\t * * \"max\" - computedNumberOfChannels is the maximum of the number of channels of all connections to an input. In this mode channelCount is ignored.\n\t * * \"clamped-max\" - computedNumberOfChannels is determined as for \"max\" and then clamped to a maximum value of the given channelCount.\n\t * * \"explicit\" - computedNumberOfChannels is the exact value as specified by the channelCount.\n\t */\n\t// tslint:enable: max-line-length\n\tget channelCountMode(): ChannelCountMode {\n\t\treturn this._getChannelProperties().channelCountMode;\n\t}\n\tset channelCountMode(channelCountMode) {\n\t\tconst props = this._getChannelProperties();\n\t\t// merge it with the other properties\n\t\tthis._setChannelProperties(Object.assign(props, { channelCountMode }));\n\t}\n\n\t/**\n\t *  channelInterpretation determines how individual channels will be treated\n\t *  when up-mixing and down-mixing connections to any inputs to the node.\n\t *  The default value is \"speakers\".\n\t */\n\tget channelInterpretation(): ChannelInterpretation {\n\t\treturn this._getChannelProperties().channelInterpretation;\n\t}\n\tset channelInterpretation(channelInterpretation) {\n\t\tconst props = this._getChannelProperties();\n\t\t// merge it with the other properties\n\t\tthis._setChannelProperties(Object.assign(props, { channelInterpretation }));\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// CONNECTIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * connect the output of a ToneAudioNode to an AudioParam, AudioNode, or ToneAudioNode\n\t * @param unit The output to connect to\n\t * @param outputNum The output to connect from\n\t * @param inputNum The input to connect to\n\t */\n\tconnect(destination: InputNode, outputNum = 0, inputNum = 0): this {\n\t\tconnect(this, destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Connect the output to the context's destination node.\n\t */\n\ttoDestination(): this {\n\t\tthis.connect(this.context.destination);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Connect the output to the context's destination node.\n\t * alias for {@link toDestination}\n\t * @deprecated\n\t */\n\ttoMaster(): this {\n\t\tconsole.warn(\"toMaster() has been renamed toDestination()\");\n\t\treturn this.toDestination();\n\t}\n\n\t/**\n\t *  disconnect the output\n\t *  @param output Either the output index to disconnect if the output is an array, or the node to disconnect from.\n\t */\n\tdisconnect(destination?: InputNode, outputNum = 0, inputNum = 0): this {\n\t\tdisconnect(this, destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Connect the output of this node to the rest of the nodes in series.\n\t *  @example\n\t *  //connect a node to an effect, panVol and then to the master output\n\t *  node.chain(effect, panVol, Tone.Destination);\n\t */\n\tchain(...nodes: InputNode[]): this {\n\t\tconnectSeries(this, ...nodes);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  connect the output of this node to the rest of the nodes in parallel.\n\t */\n\tfan(...nodes: InputNode[]): this {\n\t\tnodes.forEach(node => this.connect(node));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Dispose and disconnect\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (isDefined(this.input)) {\n\t\t\tif (this.input instanceof ToneAudioNode) {\n\t\t\t\tthis.input.dispose();\n\t\t\t} else if (isAudioNode(this.input)) {\n\t\t\t\tthis.input.disconnect();\n\t\t\t}\n\t\t}\n\t\tif (isDefined(this.output)) {\n\t\t\tif (this.output instanceof ToneAudioNode) {\n\t\t\t\tthis.output.dispose();\n\t\t\t} else if (isAudioNode(this.output)) {\n\t\t\t\tthis.output.disconnect();\n\t\t\t}\n\t\t}\n\t\tthis._internalChannels = [];\n\t\treturn this;\n\t}\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// CONNECTIONS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n *  connect together all of the arguments in series\n *  @param nodes\n */\nexport function connectSeries(...nodes: InputNode[]): void {\n\tconst first = nodes.shift();\n\tnodes.reduce((prev, current) => {\n\t\tif (prev instanceof ToneAudioNode) {\n\t\t\tprev.connect(current);\n\t\t} else if (isAudioNode(prev)) {\n\t\t\tconnect(prev, current);\n\t\t}\n\t\treturn current;\n\t}, first);\n}\n\n/**\n * Connect two nodes together so that signal flows from the\n * first node to the second. Optionally specify the input and output channels.\n * @param srcNode The source node\n * @param dstNode The destination node\n * @param outputNumber The output channel of the srcNode\n * @param inputNumber The input channel of the dstNode\n */\nexport function connect(srcNode: OutputNode, dstNode: InputNode, outputNumber = 0, inputNumber = 0): void {\n\n\tassert(isDefined(srcNode), \"Cannot connect from undefined node\");\n\tassert(isDefined(dstNode), \"Cannot connect to undefined node\");\n\n\tif (dstNode instanceof ToneAudioNode || isAudioNode(dstNode)) {\n\t\tassert(dstNode.numberOfInputs > 0, \"Cannot connect to node with no inputs\");\n\t}\n\tassert(srcNode.numberOfOutputs > 0, \"Cannot connect from node with no outputs\");\n\n\t// resolve the input of the dstNode\n\twhile (dstNode instanceof ToneAudioNode || dstNode instanceof Param) {\n\t\tif (isDefined(dstNode.input)) {\n\t\t\tdstNode = dstNode.input;\n\t\t}\n\t}\n\n\twhile (srcNode instanceof ToneAudioNode) {\n\t\tif (isDefined(srcNode.output)) {\n\t\t\tsrcNode = srcNode.output;\n\t\t}\n\t}\n\n\t// make the connection\n\tif (isAudioParam(dstNode)) {\n\t\tsrcNode.connect(dstNode as AudioParam, outputNumber);\n\t} else {\n\t\tsrcNode.connect(dstNode, outputNumber, inputNumber);\n\t}\n}\n\n/**\n * Disconnect a node from all nodes or optionally include a destination node and input/output channels.\n * @param srcNode The source node\n * @param dstNode The destination node\n * @param outputNumber The output channel of the srcNode\n * @param inputNumber The input channel of the dstNode\n */\nexport function disconnect(\n\tsrcNode: OutputNode,\n\tdstNode?: InputNode,\n\toutputNumber = 0,\n\tinputNumber = 0,\n): void {\n\n\t// resolve the destination node\n\tif (isDefined(dstNode)) {\n\t\twhile (dstNode instanceof ToneAudioNode) {\n\t\t\tif (dstNode.input) {\n\t\t\t\tdstNode = dstNode.input;\n\t\t\t}\n\t\t}\n\t}\n\n\t// resolve the src node\n\twhile (!(isAudioNode(srcNode))) {\n\t\tif (isDefined(srcNode.output)) {\n\t\t\tsrcNode = srcNode.output;\n\t\t}\n\t}\n\n\tif (isAudioParam(dstNode)) {\n\t\tsrcNode.disconnect(dstNode as AudioParam, outputNumber);\n\t} else if (isAudioNode(dstNode)) {\n\t\tsrcNode.disconnect(dstNode, outputNumber, inputNumber);\n\t} else {\n\t\tsrcNode.disconnect();\n\t}\n}\n","import { isArray } from \"./TypeCheck\";\n\n// return an interface which excludes certain keys\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n\n/**\n *  Make the property not writable using `defineProperty`. Internal use only.\n */\nexport function readOnly(target: object, property: string | string[]): void {\n\tif (isArray(property)) {\n\t\tproperty.forEach(str => readOnly(target, str));\n\t} else {\n\t\tObject.defineProperty(target, property, {\n\t\t\tenumerable: true,\n\t\t\twritable: false,\n\t\t});\n\t}\n}\n\n/**\n *  Make an attribute writeable. Internal use only.\n */\nexport function writable(target: object, property: string | string[]): void {\n\tif (isArray(property)) {\n\t\tproperty.forEach(str => writable(target, str));\n\t} else {\n\t\tObject.defineProperty(target, property, {\n\t\t\twritable: true,\n\t\t});\n\t}\n}\n\nexport const noOp: (...args: any[]) => any = () => {\n\t// no op!\n};\n\n/**\n * Recursive Partial taken from here: https://stackoverflow.com/a/51365037\n */\nexport type RecursivePartial<T> = {\n\t[P in keyof T]?:\n\tT[P] extends Array<infer U> ? Array<RecursivePartial<U>> :\n\tT[P] extends object ? RecursivePartial<T[P]> :\n\tT[P];\n};\n","import { Param } from \"../context/Param\";\nimport { GainFactor, Unit, UnitName } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"./ToneAudioNode\";\n\ninterface GainOptions extends ToneAudioNodeOptions {\n\tgain: number;\n\tunits: UnitName;\n\tconvert: boolean;\n}\n\n/**\n * A thin wrapper around the Native Web Audio GainNode.\n * The GainNode is a basic building block of the Web Audio\n * API and is useful for routing audio and adjusting gains.\n * @param  gain The initial gain of the GainNode\n * @param units The units of the gain parameter.\n * @category Core\n */\nexport class Gain<Type extends Unit = GainFactor> extends ToneAudioNode<GainOptions> {\n\n\treadonly name = \"Gain\";\n\n\t/**\n\t *  The gain parameter of the gain node.\n\t */\n\treadonly gain: Param<Type>;\n\n\t/**\n\t * The wrapped GainNode.\n\t */\n\tprivate _gainNode: GainNode = this.context.createGain();\n\n\t// input = output\n\treadonly input: GainNode = this._gainNode;\n\treadonly output: GainNode = this._gainNode;\n\n\tconstructor(gain?: GainFactor, units?: Unit);\n\tconstructor(options?: Partial<GainOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Gain.getDefaults(), arguments, [\"gain\", \"units\"]));\n\t\tconst options = optionsFromArguments(Gain.getDefaults(), arguments, [\"gain\", \"units\"]);\n\n\t\tthis.gain = new Param({\n\t\t\tcontext : this.context,\n\t\t\tconvert : options.convert,\n\t\t\tparam : this._gainNode.gain,\n\t\t\tunits : options.units,\n\t\t\tvalue : options.gain,\n\t\t});\n\t\treadOnly(this, \"gain\");\n\t}\n\n\tstatic getDefaults(): GainOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tconvert : true,\n\t\t\tgain : 1,\n\t\t\tunits : \"gain\" as UnitName,\n\t\t});\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._gainNode.disconnect();\n\t\tthis.gain.dispose();\n\t\treturn this;\n\t}\n}\n","import { getContext } from \"../Global\";\nimport { Tone } from \"../Tone\";\nimport { Samples, Seconds, Time } from \"../type/Units\";\nimport { isAudioBuffer } from \"../util/AdvancedTypeCheck\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { noOp } from \"../util/Interface\";\nimport { isArray, isNumber, isString } from \"../util/TypeCheck\";\n\ninterface ToneAudioBufferOptions {\n\turl?: string | AudioBuffer | ToneAudioBuffer;\n\treverse: boolean;\n\tonload: (buffer?: ToneAudioBuffer) => void;\n\tonerror: (error: Error) => void;\n}\n\n/**\n * AudioBuffer loading and storage. ToneAudioBuffer is used internally by all\n * classes that make requests for audio files such as Tone.Player,\n * Tone.Sampler and Tone.Convolver.\n *\n * Aside from load callbacks from individual buffers, ToneAudioBuffer\n * provides events which keep track of the loading progress\n * of _all_ of the buffers. These are ToneAudioBuffer.on(\"load\" / \"progress\" / \"error\")\n *\n * @param url The url to load, or the audio buffer to set.\n * @param onload A callback which is invoked after the buffer is loaded.\n *                            It's recommended to use `ToneAudioBuffer.on('load', callback)` instead\n *                            since it will give you a callback when _all_ buffers are loaded.\n * @param onerror The callback to invoke if there is an error\n * @example\n * var buffer = new ToneAudioBuffer(\"path/to/sound.mp3\", function(){\n * \t//the buffer is now available.\n * \tvar buff = buffer.get();\n * });\n * @example\n * //can load provide fallback extension types if the first type is not supported.\n * var buffer = new ToneAudioBuffer(\"path/to/sound.[mp3|ogg|wav]\");\n * @category Core\n */\nexport class ToneAudioBuffer extends Tone {\n\n\tname = \"ToneAudioBuffer\";\n\n\t/**\n\t *  stores the loaded AudioBuffer\n\t */\n\tprivate _buffer?: AudioBuffer;\n\n\t/**\n\t *  indicates if the buffer should be reversed or not\n\t */\n\tprivate _reversed!: boolean;\n\n\t/**\n\t * Callback when the buffer is loaded.\n\t */\n\tonload: (buffer: ToneAudioBuffer) => void = noOp;\n\n\tconstructor(options?: Partial<ToneAudioBufferOptions>);\n\tconstructor(\n\t\turl?: string | ToneAudioBuffer | AudioBuffer,\n\t\tonload?: (buffer: ToneAudioBuffer) => void,\n\t\tonerror?: (error: Error) => void,\n\t);\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tconst options = optionsFromArguments(ToneAudioBuffer.getDefaults(), arguments, [\"url\", \"onload\", \"onerror\"]);\n\n\t\tthis.reverse = options.reverse;\n\t\tthis.onload = options.onload;\n\n\t\tif (options.url && isAudioBuffer(options.url) || options.url instanceof ToneAudioBuffer) {\n\t\t\tthis.set(options.url);\n\t\t} else if (isString(options.url)) {\n\t\t\t// initiate the download\n\t\t\tthis.load(options.url).catch(options.onerror);\n\t\t}\n\t}\n\n\tstatic getDefaults(): ToneAudioBufferOptions {\n\t\treturn {\n\t\t\tonerror: noOp,\n\t\t\tonload: noOp,\n\t\t\treverse: false,\n\t\t};\n\t}\n\n\t/**\n\t * The sample rate of the AudioBuffer\n\t */\n\tget sampleRate(): number {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.sampleRate;\n\t\t} else {\n\t\t\treturn getContext().sampleRate;\n\t\t}\n\t}\n\n\t/**\n\t *  Pass in an AudioBuffer or ToneAudioBuffer to set the value of this buffer.\n\t */\n\tset(buffer: AudioBuffer | ToneAudioBuffer): this {\n\t\tif (buffer instanceof ToneAudioBuffer) {\n\t\t\t// if it's loaded, set it\n\t\t\tif (buffer.loaded) {\n\t\t\t\tthis._buffer = buffer.get();\n\t\t\t} else {\n\t\t\t\t// otherwise when it's loaded, invoke it's callback\n\t\t\t\tbuffer.onload = () => {\n\t\t\t\t\tthis.set(buffer);\n\t\t\t\t\tthis.onload(this);\n\t\t\t\t};\n\t\t\t}\n\t\t} else {\n\t\t\tthis._buffer = buffer;\n\t\t}\n\t\t// reverse it initially\n\t\tif (this._reversed) {\n\t\t\tthis._reverse();\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  The audio buffer stored in the object.\n\t */\n\tget(): AudioBuffer | undefined {\n\t\treturn this._buffer;\n\t}\n\n\t/**\n\t *  Makes an fetch request for the selected url then decodes the file as an audio buffer.\n\t * \tInvokes the callback once the audio buffer loads.\n\t *  @param url The url of the buffer to load. filetype support depends on the browser.\n\t *  @returns A Promise which resolves with this ToneAudioBuffer\n\t */\n\tasync load(url: string): Promise<this> {\n\t\tconst promise = ToneAudioBuffer.load(url);\n\t\tToneAudioBuffer.downloads.push(promise);\n\t\ttry {\n\t\t\tconst audioBuffer = await promise;\n\t\t\tthis.set(audioBuffer);\n\t\t\t// invoke the onload method\n\t\t\tthis.onload(this);\n\t\t} catch (e) {\n\t\t\t// remove the failed file before throwing error\n\t\t\tconst index = ToneAudioBuffer.downloads.indexOf(promise);\n\t\t\tToneAudioBuffer.downloads.splice(index, 1);\n\t\t\tthrow e;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._buffer = undefined;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set the audio buffer from the array.\n\t * To create a multichannel AudioBuffer, pass in a multidimensional array.\n\t * @param array The array to fill the audio buffer\n\t */\n\tfromArray(array: Float32Array | Float32Array[]): this {\n\t\tconst isMultidimensional = isArray(array) && array[0].length > 0;\n\t\tconst channels = isMultidimensional ? array.length : 1;\n\t\tconst len = isMultidimensional ? (array[0] as Float32Array).length : array.length;\n\t\tconst context = getContext();\n\t\tconst buffer = context.createBuffer(channels, len, context.sampleRate);\n\t\tconst multiChannelArray: Float32Array[] = !isMultidimensional && channels === 1 ?\n\t\t\t[array as Float32Array] : array as Float32Array[];\n\n\t\tfor (let c = 0; c < channels; c++) {\n\t\t\tbuffer.copyToChannel(multiChannelArray[c], c);\n\t\t}\n\t\tthis._buffer = buffer;\n\t\treturn this;\n\t}\n\n\t/**\n\t * \tSums multiple channels into 1 channel\n\t *  @param channel Optionally only copy a single channel from the array.\n\t */\n\ttoMono(chanNum?: number): this {\n\t\tif (isNumber(chanNum)) {\n\t\t\tthis.fromArray(this.toArray(chanNum));\n\t\t} else {\n\t\t\tlet outputArray = new Float32Array(this.length as number);\n\t\t\tconst numChannels = this.numberOfChannels;\n\t\t\tfor (let channel = 0; channel < numChannels; channel++) {\n\t\t\t\tconst channelArray = this.toArray(channel) as Float32Array;\n\t\t\t\tfor (let i = 0; i < channelArray.length; i++) {\n\t\t\t\t\toutputArray[i] += channelArray[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\t// divide by the number of channels\n\t\t\toutputArray = outputArray.map(sample => sample / numChannels);\n\t\t\tthis.fromArray(outputArray);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * \tGet the buffer as an array. Single channel buffers will return a 1-dimensional\n\t * \tFloat32Array, and multichannel buffers will return multidimensional arrays.\n\t *  @param channel Optionally only copy a single channel from the array.\n\t */\n\ttoArray(channel?: number): Float32Array | Float32Array[] {\n\t\tif (isNumber(channel)) {\n\t\t\treturn this.getChannelData(channel);\n\t\t} else if (this.numberOfChannels === 1) {\n\t\t\treturn this.toArray(0);\n\t\t} else {\n\t\t\tconst ret: Float32Array[] = [];\n\t\t\tfor (let c = 0; c < this.numberOfChannels; c++) {\n\t\t\t\tret[c] = this.getChannelData(c);\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\t}\n\n\t/**\n\t *  Returns the Float32Array representing the PCM audio data for the specific channel.\n\t *  @param  channel  The channel number to return\n\t *  @return The audio as a TypedArray\n\t */\n\tgetChannelData(channel: number): Float32Array {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.getChannelData(channel);\n\t\t} else {\n\t\t\treturn new Float32Array(0);\n\t\t}\n\t}\n\n\t/**\n\t *  Cut a subsection of the array and return a buffer of the\n\t *  subsection. Does not modify the original buffer\n\t *  @param start The time to start the slice\n\t *  @param end The end time to slice. If none is given will default to the end of the buffer\n\t */\n\tslice(start: Seconds, end: Seconds = this.duration): ToneAudioBuffer {\n\t\tconst startSamples = Math.floor(start * this.sampleRate);\n\t\tconst endSamples = Math.floor(end * this.sampleRate);\n\t\tthis.assert(startSamples < endSamples, \"The start time must be less than the end time\");\n\t\tconst length = endSamples - startSamples;\n\t\tconst retBuffer = getContext().createBuffer(this.numberOfChannels, length, this.sampleRate);\n\t\tfor (let channel = 0; channel < this.numberOfChannels; channel++) {\n\t\t\tretBuffer.copyToChannel(this.getChannelData(channel).subarray(startSamples, endSamples), channel);\n\t\t}\n\t\treturn new ToneAudioBuffer(retBuffer);\n\t}\n\n\t/**\n\t *  Reverse the buffer.\n\t */\n\tprivate _reverse(): this {\n\t\tif (this.loaded) {\n\t\t\tfor (let i = 0; i < this.numberOfChannels; i++) {\n\t\t\t\tthis.getChannelData(i).reverse();\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * If the buffer is loaded or not\n\t */\n\tget loaded(): boolean {\n\t\treturn this.length > 0;\n\t}\n\n\t/**\n\t * The duration of the buffer in seconds.\n\t */\n\tget duration(): Seconds {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.duration;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * The length of the buffer in samples\n\t */\n\tget length(): Samples {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.length;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * The number of discrete audio channels. Returns 0 if no buffer is loaded.\n\t */\n\tget numberOfChannels(): number {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.numberOfChannels;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * Reverse the buffer.\n\t */\n\tget reverse(): boolean {\n\t\treturn this._reversed;\n\t}\n\tset reverse(rev: boolean) {\n\t\tif (this._reversed !== rev) {\n\t\t\tthis._reversed = rev;\n\t\t\tthis._reverse();\n\t\t}\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// STATIC METHODS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  A path which is prefixed before every url.\n\t */\n\tstatic baseUrl = \"\";\n\n\t/**\n\t *  Create a ToneAudioBuffer from the array. To create a multichannel AudioBuffer,\n\t *  pass in a multidimensional array.\n\t *  @param array The array to fill the audio buffer\n\t *  @return A ToneAudioBuffer created from the array\n\t */\n\tstatic fromArray(array: Float32Array | Float32Array[]): ToneAudioBuffer {\n\t\treturn (new ToneAudioBuffer()).fromArray(array);\n\t}\n\n\t/**\n\t * Creates a ToneAudioBuffer from a URL, returns a promise which resolves to a ToneAudioBuffer\n\t * @param  url The url to load.\n\t * @return A promise which resolves to a ToneAudioBuffer\n\t */\n\tstatic async fromUrl(url: string): Promise<ToneAudioBuffer> {\n\t\tconst buffer = new ToneAudioBuffer();\n\t\treturn await buffer.load(url);\n\t}\n\n\t/**\n\t * All of the downloads\n\t */\n\tstatic downloads: Array<Promise<AudioBuffer>> = [];\n\n\t/**\n\t *  Loads a url using fetch and returns the AudioBuffer.\n\t */\n\tstatic async load(url: string): Promise<AudioBuffer> {\n\n\t\t// test if the url contains multiple extensions\n\t\tconst matches = url.match(/\\[(.+\\|?)+\\]$/);\n\t\tif (matches) {\n\t\t\tconst extensions = matches[1].split(\"|\");\n\t\t\tlet extension = extensions[0];\n\t\t\tfor (const ext of extensions) {\n\t\t\t\tif (ToneAudioBuffer.supportsType(ext)) {\n\t\t\t\t\textension = ext;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\turl = url.replace(matches[0], extension);\n\t\t}\n\n\t\tconst response = await fetch(ToneAudioBuffer.baseUrl + url);\n\t\tif (!response.ok) {\n\t\t\tthrow new Error(`could not load url: ${url}`);\n\t\t}\n\t\tconst arrayBuffer = await response.arrayBuffer();\n\n\t\tconst audioBuffer = await getContext().decodeAudioData(arrayBuffer);\n\n\t\treturn audioBuffer;\n\t}\n\n\t/**\n\t *  Checks a url's extension to see if the current browser can play that file type.\n\t *  @param url The url/extension to test\n\t *  @return If the file extension can be played\n\t *  @static\n\t *  @example\n\t * ToneAudioBuffer.supportsType(\"wav\"); //returns true\n\t * ToneAudioBuffer.supportsType(\"path/to/file.wav\"); //returns true\n\t */\n\tstatic supportsType(url: string): boolean {\n\t\tconst extensions = url.split(\".\");\n\t\tconst extension = extensions[extensions.length - 1];\n\t\tconst response = document.createElement(\"audio\").canPlayType(\"audio/\" + extension);\n\t\treturn response !== \"\";\n\t}\n\n\t/**\n\t *  Returns a Promise which resolves when all of the buffers have loaded\n\t */\n\tstatic async loaded(): Promise<void> {\n\t\tfor (const promise of ToneAudioBuffer.downloads) {\n\t\t\tawait promise;\n\t\t}\n\t}\n}\n","import { getContext, setContext } from \"../Global\";\nimport { Seconds } from \"../type/Units\";\nimport { OfflineContext } from \"./OfflineContext\";\nimport { ToneAudioBuffer } from \"./ToneAudioBuffer\";\n\n/**\n * Generate a buffer by rendering all of the Tone.js code within the callback using the OfflineAudioContext.\n * The OfflineAudioContext is capable of rendering much faster than real time in many cases.\n * The callback function also passes in an offline instance of Tone.Transport which can be used\n * to schedule events along the Transport. **NOTE** OfflineAudioContext has the same restrictions\n * as the AudioContext in that on certain platforms (like iOS) it must be invoked by an explicit\n * user action like a click or tap.\n * @param  callback  All Tone.js nodes which are created and scheduled\n * \t\t\t\t\twithin this callback are recorded into the output Buffer.\n * @param  duration     the amount of time to record for.\n * @return  The promise which is invoked with the Tone.Buffer of the recorded output.\n * @example\n * //render 2 seconds of the oscillator\n * Tone.Offline(function(){\n * \t//only nodes created in this callback will be recorded\n * \tvar oscillator = new Tone.Oscillator().toDestination().start(0)\n * \t//schedule their events\n * }, 2).then(function(buffer){\n * \t//do something with the output buffer\n * })\n * @example\n * //can also schedule events along the Transport\n * //using the passed in Offline Transport\n * Tone.Offline(function(Transport){\n * \tvar osc = new Tone.Oscillator().toDestination()\n * \tTransport.schedule(function(time){\n * \t\tosc.start(time).stop(time + 0.1)\n * \t}, 1)\n * \tTransport.start(0.2)\n * }, 4).then(function(buffer){\n * \t//do something with the output buffer\n * })\n * @category Core\n */\nexport async function Offline(\n\tcallback: (context: OfflineContext) => Promise<void> | void,\n\tduration: Seconds,\n\tchannels: number = 2,\n\tsampleRate: number = getContext().sampleRate,\n): Promise<ToneAudioBuffer> {\n\t// set the OfflineAudioContext based on the current context\n\tconst originalContext = getContext();\n\n\tconst context = new OfflineContext(channels, duration, sampleRate);\n\tsetContext(context);\n\n\t// invoke the callback/scheduling\n\tawait callback(context);\n\n\t// then render the audio\n\tconst bufferPromise = context.render();\n\n\t// return the original AudioContext\n\tsetContext(originalContext);\n\n\t// await the rendering\n\tconst buffer = await bufferPromise;\n\n\t// return the audio\n\treturn new ToneAudioBuffer(buffer);\n}\n","import { Tone } from \"../Tone\";\nimport { isAudioBuffer } from \"../util/AdvancedTypeCheck\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { noOp } from \"../util/Interface\";\nimport { isString } from \"../util/TypeCheck\";\nimport { ToneAudioBuffer } from \"./ToneAudioBuffer\";\n\ninterface ToneAudioBuffersUrlMap {\n\t[name: string]: string | AudioBuffer | ToneAudioBuffer;\n\t[name: number]: string | AudioBuffer | ToneAudioBuffer;\n}\n\ninterface ToneAudioBuffersOptions {\n\turls: ToneAudioBuffersUrlMap;\n\tonload: () => void;\n\tonerror?: (error: Error) => void;\n\tbaseUrl: string;\n}\n\n/**\n * A data structure for holding multiple buffers in a Map-like datastructure.\n *\n * @param  urls      An object literal or array of urls to load.\n * @param onload  The callback to invoke when the buffers are loaded.\n * @example\n * //load a whole bank of piano samples\n * var pianoSamples = new ToneAudioBuffers({\n * \t\"C4\" : \"path/to/C4.mp3\"\n * \t\"C#4\" : \"path/to/C#4.mp3\"\n * \t\"D4\" : \"path/to/D4.mp3\"\n * \t\"D#4\" : \"path/to/D#4.mp3\"\n * }, function(){\n * \t//play one of the samples when they all load\n * \tplayer.buffer = pianoSamples.get(\"C4\");\n * \tplayer.start();\n * });\n * @example\n * //To pass in additional parameters in the second parameter\n * var buffers = new ToneAudioBuffers(urls, {\n * \t\"onload\" : callback,\n * \t\"baseUrl\" : \"../path/to/audio/\"\n * })\n * @category Core\n */\nexport class ToneAudioBuffers extends Tone {\n\n\tname = \"ToneAudioBuffers\";\n\n\t/**\n\t *  All of the buffers\n\t */\n\tprivate _buffers: Map<string, ToneAudioBuffer> = new Map();\n\n\t/**\n\t *  A path which is prefixed before every url.\n\t */\n\tbaseUrl: string;\n\n\t/**\n\t * Keep track of the number of loaded buffers\n\t */\n\tprivate _loadingCount: number = 0;\n\n\tconstructor(\n\t\turls?: ToneAudioBuffersUrlMap,\n\t\tonload?: () => void,\n\t\tbaseUrl?: string,\n\t);\n\tconstructor(options?: Partial<ToneAudioBuffersOptions>);\n\tconstructor() {\n\n\t\tsuper();\n\t\tconst options = optionsFromArguments(\n\t\t\tToneAudioBuffers.getDefaults(), arguments, [\"urls\", \"onload\", \"baseUrl\"], \"urls\",\n\t\t);\n\n\t\tthis.baseUrl = options.baseUrl;\n\t\tconst urlMap: ToneAudioBuffersUrlMap = {};\n\t\t// add each one\n\t\tObject.keys(options.urls).forEach(name => {\n\t\t\tthis._loadingCount++;\n\t\t\tconst url = options.urls[name];\n\t\t\tthis.add(name, url, this._bufferLoaded.bind(this, options.onload));\n\t\t});\n\n\t}\n\n\tstatic getDefaults(): ToneAudioBuffersOptions {\n\t\treturn {\n\t\t\tbaseUrl: \"\",\n\t\t\tonerror: noOp,\n\t\t\tonload: noOp,\n\t\t\turls: {},\n\t\t};\n\t}\n\n\t/**\n\t *  True if the buffers object has a buffer by that name.\n\t *  @param  name  The key or index of the buffer.\n\t */\n\thas(name: string | number): boolean {\n\t\treturn this._buffers.has(name.toString());\n\t}\n\n\t/**\n\t *  Get a buffer by name. If an array was loaded,\n\t *  then use the array index.\n\t *  @param  name  The key or index of the buffer.\n\t */\n\tget(name: string | number): ToneAudioBuffer {\n\t\tthis.assert(this.has(name), `ToneAudioBuffers has no buffer named: ${name}`);\n\t\treturn this._buffers.get(name.toString()) as ToneAudioBuffer;\n\t}\n\n\t/**\n\t *  A buffer was loaded. decrement the counter.\n\t */\n\tprivate _bufferLoaded(callback: () => void): void {\n\t\tthis._loadingCount--;\n\t\tif (this._loadingCount === 0 && callback) {\n\t\t\tcallback();\n\t\t}\n\t}\n\n\t/**\n\t * If the buffers are loaded or not\n\t */\n\tget loaded(): boolean {\n\t\treturn Array.from(this._buffers).every(([name, buffer]) => buffer.loaded);\n\t}\n\n\t/**\n\t *  Add a buffer by name and url to the Buffers\n\t *  @param  name      A unique name to give the buffer\n\t *  @param  url  Either the url of the bufer, or a buffer which will be added with the given name.\n\t *  @param  callback  The callback to invoke when the url is loaded.\n\t */\n\tadd(\n\t\tname: string | number,\n\t\turl: string | AudioBuffer | ToneAudioBuffer,\n\t\tcallback: () => void = noOp,\n\t): this {\n\t\tif (url instanceof ToneAudioBuffer) {\n\t\t\tthis._buffers.set(name.toString(), url);\n\t\t\tcallback();\n\t\t} else if (isAudioBuffer(url)) {\n\t\t\tthis._buffers.set(name.toString(), new ToneAudioBuffer(url));\n\t\t\tcallback();\n\t\t} else if (isString(url)) {\n\t\t\tthis._buffers.set(name.toString(), new ToneAudioBuffer(this.baseUrl + url, callback));\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._buffers.forEach(buffer => buffer.dispose());\n\t\tthis._buffers.clear();\n\t\treturn this;\n\t}\n}\n","import { Param } from \"../context/Param\";\nimport { Time } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"./ToneAudioNode\";\n\nexport interface DelayOptions extends ToneAudioNodeOptions {\n\tdelayTime: Time;\n\tmaxDelay: Time;\n}\n\n/**\n *  Wrapper around Web Audio's native [DelayNode](http://webaudio.github.io/web-audio-api/#the-delaynode-interface).\n *  @param delayTime The delay applied to the incoming signal.\n *  @param maxDelay The maximum delay time.\n * @category Core\n */\nexport class Delay extends ToneAudioNode<DelayOptions> {\n\n\treadonly name = \"Delay\";\n\n\t/**\n\t * The maximum delay time. This cannot be changed after\n\t * the value is passed into the constructor.\n\t */\n\treadonly maxDelay: Time;\n\n\t/**\n\t *  The amount of time the incoming signal is delayed.\n\t */\n\treadonly delayTime: Param<Time>;\n\n\t/**\n\t * Private reference to the internal DelayNode\n\t */\n\tprivate _delayNode: DelayNode;\n\treadonly input: DelayNode;\n\treadonly output: DelayNode;\n\n\tconstructor(options?: Partial<DelayOptions>)\n\tconstructor(delayTime?: Time, maxDelay?: Time)\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Delay.getDefaults(), arguments, [\"delayTime\", \"maxDelay\"]));\n\n\t\tconst options = optionsFromArguments(Delay.getDefaults(), arguments, [\"delayTime\", \"maxDelay\"]);\n\n\t\tconst maxDelayInSeconds = this.toSeconds(options.maxDelay);\n\t\tthis.maxDelay = Math.max(maxDelayInSeconds, this.toSeconds(options.delayTime));\n\n\t\tthis._delayNode = this.input = this.output = this.context.createDelay(maxDelayInSeconds);\n\n\t\tthis.delayTime = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam : this._delayNode.delayTime,\n\t\t\tunits : \"time\",\n\t\t\tvalue : options.delayTime,\n\t\t});\n\n\t\treadOnly(this, \"delayTime\");\n\t}\n\n\tstatic getDefaults(): DelayOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tdelayTime : 0,\n\t\t\tmaxDelay: 1,\n\t\t});\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._delayNode.disconnect();\n\t\tthis.delayTime.dispose();\n\t\treturn this;\n\t}\n}\n","import { Seconds } from \"../type/Units\";\nimport { Timeline, TimelineEvent } from \"./Timeline\";\n\nexport type BasicPlaybackState = \"started\" | \"stopped\";\nexport type PlaybackState = BasicPlaybackState | \"paused\";\n\nexport interface StateTimelineEvent extends TimelineEvent {\n\tstate: PlaybackState;\n}\n\n/**\n *  A Timeline State. Provides the methods: `setStateAtTime(\"state\", time)` and `getValueAtTime(time)`\n *  @param initial The initial state of the StateTimeline.  Defaults to `undefined`\n * @category Core\n */\nexport class StateTimeline<AdditionalOptions extends {} = {}> extends Timeline<StateTimelineEvent & AdditionalOptions> {\n\n\t/**\n\t *  The initial state\n\t */\n\tprivate _initial: PlaybackState;\n\n\tconstructor(initial: PlaybackState = \"stopped\") {\n\t\tsuper();\n\t\tthis._initial = initial;\n\t}\n\n\t/**\n\t *  Returns the scheduled state scheduled before or at\n\t *  the given time.\n\t *  @param  time  The time to query.\n\t *  @return  The name of the state input in setStateAtTime.\n\t */\n\tgetValueAtTime(time: Seconds): PlaybackState {\n\t\tconst event = this.get(time);\n\t\tif (event !== null) {\n\t\t\treturn event.state;\n\t\t} else {\n\t\t\treturn this._initial;\n\t\t}\n\t}\n\n\t/**\n\t *  Add a state to the timeline.\n\t * @param  state The name of the state to set.\n\t * @param  time  The time to query.\n\t * @param options Any additional options that are needed in the timeline.\n\t */\n\tsetStateAtTime(state: PlaybackState, time: Seconds, options?: AdditionalOptions): this {\n\t\t// all state changes need to be >= the previous state time\n\t\t// TODO throw error if time < the previous event time\n\t\tthis.add(Object.assign({}, options, {\n\t\t\tstate,\n\t\t\ttime,\n\t\t}));\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Return the event before the time with the given state\n\t *  @param  state The state to look for\n\t *  @param  time  When to check before\n\t *  @return  The event with the given state before the time\n\t */\n\tgetLastState(state: PlaybackState, time: number): StateTimelineEvent & AdditionalOptions | undefined {\n\t\t// time = this.toSeconds(time);\n\t\tconst index = this._search(time);\n\t\tfor (let i = index; i >= 0; i--) {\n\t\t\tconst event = this._timeline[i];\n\t\t\tif (event.state === state) {\n\t\t\t\treturn event;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *  Return the event after the time with the given state\n\t *  @param  state The state to look for\n\t *  @param  time  When to check from\n\t *  @return  The event with the given state after the time\n\t */\n\tgetNextState(state: PlaybackState, time: number): StateTimelineEvent & AdditionalOptions | undefined {\n\t\t// time = this.toSeconds(time);\n\t\tconst index = this._search(time);\n\t\tif (index !== -1) {\n\t\t\tfor (let i = index; i < this._timeline.length; i++) {\n\t\t\t\tconst event = this._timeline[i];\n\t\t\t\tif (event.state === state) {\n\t\t\t\t\treturn event;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","import { connect } from \"../Connect\";\nimport { AutomationEvent, Param, ParamOptions } from \"../context/Param\";\nimport { InputNode } from \"../context/ToneAudioNode\";\nimport { getContext } from \"../Global\";\nimport { BPM, Hertz, Seconds, Ticks, Time } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isUndef } from \"../util/TypeCheck\";\n\ninterface TickAutomationEvent extends AutomationEvent {\n\tticks: number;\n}\n\ninterface TickSignalOptions extends ParamOptions {\n\tvalue: Hertz | BPM;\n\tmultiplier: number;\n}\n\n/**\n * TickSignal extends Tone.Signal, but adds the capability\n * to calculate the number of elapsed ticks. exponential and target curves\n * are approximated with multiple linear ramps.\n *\n * Thank you Bruno Dias, H. Sofia Pinto, and David M. Matos,\n * for your [WAC paper](https://smartech.gatech.edu/bitstream/handle/1853/54588/WAC2016-49.pdf)\n * describing integrating timing functions for tempo calculations.\n * @category Core\n */\nexport class TickSignal<Type extends Hertz | BPM> extends Param<Type> {\n\n\treadonly name = \"TickSignal\";\n\n\tprotected _events: Timeline<TickAutomationEvent> = new Timeline(Infinity);\n\n\tprivate _sig: ConstantSourceNode = this.context.createConstantSource();\n\n\tprotected _param = this._sig.offset;\n\n\tprivate _multiplier: number = 1;\n\n\tconstructor(options: Partial<TickSignalOptions>);\n\t/**\n\t * @param value The initial value of the signal\n\t */\n\tconstructor(value?: number);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(TickSignal.getDefaults(), arguments, [\"value\"]));\n\t\tconst options = optionsFromArguments(TickSignal.getDefaults(), arguments, [\"value\"]);\n\n\t\tthis._sig = this.context.createConstantSource();\n\t\tthis._sig.start(0);\n\t\tthis._param = this._sig.offset;\n\n\t\t// set the multiplier\n\t\tthis._multiplier = options.multiplier;\n\n\t\t// clear the ticks from the beginning\n\t\tthis._events.cancel(0);\n\t\t// set an initial event\n\t\tthis._events.add({\n\t\t\tticks: 0,\n\t\t\ttime : 0,\n\t\t\ttype : \"setValue\",\n\t\t\tvalue: this._fromType(options.value as Type),\n\t\t});\n\t\tthis.setValueAtTime(options.value as Type, 0);\n\t}\n\n\tstatic getDefaults(): TickSignalOptions {\n\t\treturn Object.assign(Param.getDefaults(), {\n\t\t\tmultiplier: 1,\n\t\t\tparam: getContext().createConstantSource().offset,\n\t\t\tunits: \"hertz\",\n\t\t\tvalue: 1,\n\t\t});\n\t}\n\n\tsetTargetAtTime(value: Type, time: Time, constant: number): this {\n\t\t// approximate it with multiple linear ramps\n\t\ttime = this.toSeconds(time);\n\t\tthis.setRampPoint(time);\n\t\tconst computedValue = this._fromType(value);\n\n\t\t// start from previously scheduled value\n\t\tconst prevEvent = this._events.get(time) as TickAutomationEvent;\n\t\tconst segments = Math.round(Math.max(1 / constant, 1));\n\t\tfor (let i = 0; i <= segments; i++) {\n\t\t\tconst segTime = constant * i + time;\n\t\t\tconst rampVal = this._exponentialApproach(prevEvent.time, prevEvent.value, computedValue, constant, segTime);\n\t\t\tthis.linearRampToValueAtTime(this._toType(rampVal), segTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\tsetValueAtTime(value: Type, time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tsuper.setValueAtTime(value, time);\n\t\tconst event = this._events.get(computedTime) as TickAutomationEvent;\n\t\tconst previousEvent = this._events.previousEvent(event);\n\t\tconst ticksUntilTime = this._getTicksUntilEvent(previousEvent, computedTime);\n\t\tevent.ticks = Math.max(ticksUntilTime, 0);\n\t\treturn this;\n\t}\n\n\tlinearRampToValueAtTime(value: Type, time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tsuper.linearRampToValueAtTime(value, time);\n\t\tconst event = this._events.get(computedTime) as TickAutomationEvent;\n\t\tconst previousEvent = this._events.previousEvent(event);\n\t\tconst ticksUntilTime = this._getTicksUntilEvent(previousEvent, computedTime);\n\t\tevent.ticks = Math.max(ticksUntilTime, 0);\n\t\treturn this;\n\t}\n\n\texponentialRampToValueAtTime(value: Type, time: Time): this {\n\t\t// aproximate it with multiple linear ramps\n\t\ttime = this.toSeconds(time);\n\t\tconst computedVal = this._fromType(value);\n\n\t\t// start from previously scheduled value\n\t\tconst prevEvent = this._events.get(time) as TickAutomationEvent;\n\t\t// approx 10 segments per second\n\t\tconst segments = Math.round(Math.max((time - prevEvent.time) * 10, 1));\n\t\tconst segmentDur = ((time - prevEvent.time) / segments);\n\t\tfor (let i = 0; i <= segments; i++) {\n\t\t\tconst segTime = segmentDur * i + prevEvent.time;\n\t\t\tconst rampVal = this._exponentialInterpolate(prevEvent.time, prevEvent.value, time, computedVal, segTime);\n\t\t\tthis.linearRampToValueAtTime(this._toType(rampVal), segTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the tick value at the time. Takes into account\n\t * any automation curves scheduled on the signal.\n\t * @param  time The time to get the tick count at\n\t * @return The number of ticks which have elapsed at the time given any automations.\n\t */\n\tprivate _getTicksUntilEvent(event: TickAutomationEvent | null, time: number): Ticks {\n\t\tif (event === null) {\n\t\t\tevent = {\n\t\t\t\tticks : 0,\n\t\t\t\ttime : 0,\n\t\t\t\ttype: \"setValue\",\n\t\t\t\tvalue: 0,\n\t\t\t};\n\t\t} else if (isUndef(event.ticks)) {\n\t\t\tconst previousEvent = this._events.previousEvent(event);\n\t\t\tevent.ticks = this._getTicksUntilEvent(previousEvent, event.time);\n\t\t}\n\t\tconst val0 = this._fromType(this.getValueAtTime(event.time));\n\t\tlet val1 = this._fromType(this.getValueAtTime(time));\n\t\t// if it's right on the line, take the previous value\n\t\tconst onTheLineEvent = this._events.get(time);\n\t\tif (onTheLineEvent && onTheLineEvent.time === time && onTheLineEvent.type === \"setValue\") {\n\t\t\tval1 = this._fromType(this.getValueAtTime(time - this.sampleTime));\n\t\t}\n\t\treturn 0.5 * (time - event.time) * (val0 + val1) + event.ticks;\n\t}\n\n\t/**\n\t * Returns the tick value at the time. Takes into account\n\t * any automation curves scheduled on the signal.\n\t * @param  time The time to get the tick count at\n\t * @return The number of ticks which have elapsed at the time given any automations.\n\t */\n\tgetTicksAtTime(time: Time): Ticks {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst event = this._events.get(computedTime);\n\t\treturn Math.max(this._getTicksUntilEvent(event, computedTime), 0);\n\t}\n\n\t/**\n\t * Return the elapsed time of the number of ticks from the given time\n\t * @param ticks The number of ticks to calculate\n\t * @param  time The time to get the next tick from\n\t * @return The duration of the number of ticks from the given time in seconds\n\t */\n\tgetDurationOfTicks(ticks: Ticks, time: Time): Seconds {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst currentTick = this.getTicksAtTime(time);\n\t\treturn this.getTimeOfTick(currentTick + ticks) - computedTime;\n\t}\n\n\t/**\n\t * Given a tick, returns the time that tick occurs at.\n\t * @return The time that the tick occurs.\n\t */\n\tgetTimeOfTick(tick: Ticks): Seconds {\n\t\tconst before = this._events.get(tick, \"ticks\");\n\t\tconst after = this._events.getAfter(tick, \"ticks\");\n\t\tif (before && before.ticks === tick) {\n\t\t\treturn before.time;\n\t\t} else if (before && after &&\n\t\t\tafter.type === \"linear\" &&\n\t\t\tbefore.value !== after.value) {\n\t\t\tconst val0 = this._fromType(this.getValueAtTime(before.time));\n\t\t\tconst val1 = this._fromType(this.getValueAtTime(after.time));\n\t\t\tconst delta = (val1 - val0) / (after.time - before.time);\n\t\t\tconst k = Math.sqrt(Math.pow(val0, 2) - 2 * delta * (before.ticks - tick));\n\t\t\tconst sol1 = (-val0 + k) / delta;\n\t\t\tconst sol2 = (-val0 - k) / delta;\n\t\t\treturn (sol1 > 0 ? sol1 : sol2) + before.time;\n\t\t} else if (before) {\n\t\t\tif (before.value === 0) {\n\t\t\t\treturn Infinity;\n\t\t\t} else {\n\t\t\t\treturn before.time + (tick - before.ticks) / before.value;\n\t\t\t}\n\t\t} else {\n\t\t\treturn tick / this._initialValue;\n\t\t}\n\t}\n\n\t/**\n\t * Convert some number of ticks their the duration in seconds accounting\n\t * for any automation curves starting at the given time.\n\t * @param  ticks The number of ticks to convert to seconds.\n\t * @param  when  When along the automation timeline to convert the ticks.\n\t * @return The duration in seconds of the ticks.\n\t */\n\tticksToTime(ticks: Ticks, when: Time): Seconds {\n\t\treturn this.getDurationOfTicks(ticks, when);\n\t}\n\n\t/**\n\t * The inverse of [ticksToTime](#tickstotime). Convert a duration in\n\t * seconds to the corresponding number of ticks accounting for any\n\t * automation curves starting at the given time.\n\t * @param  duration The time interval to convert to ticks.\n\t * @param  when When along the automation timeline to convert the ticks.\n\t * @return The duration in ticks.\n\t */\n\ttimeToTicks(duration: Time, when: Time): Ticks {\n\t\tconst computedTime = this.toSeconds(when);\n\t\tconst computedDuration = this.toSeconds(duration);\n\t\tconst startTicks = this.getTicksAtTime(computedTime);\n\t\tconst endTicks = this.getTicksAtTime(computedTime + computedDuration);\n\t\treturn endTicks - startTicks;\n\t}\n\n\t/**\n\t * Convert from the type when the unit value is BPM\n\t */\n\tprotected _fromType(val: Type): number {\n\t\tif (this.units === \"bpm\" && this.multiplier) {\n\t\t\treturn 1 / (60 / val / this.multiplier);\n\t\t} else {\n\t\t\treturn super._fromType(val);\n\t\t}\n\t}\n\n\t/**\n\t * Special case of type conversion where the units === \"bpm\"\n\t */\n\tprotected _toType(val: number): Type {\n\t\tif (this.units === \"bpm\" && this.multiplier) {\n\t\t\treturn (val / this.multiplier) * 60 as Type;\n\t\t} else {\n\t\t\treturn super._toType(val);\n\t\t}\n\t}\n\t/**\n\t * A multiplier on the bpm value. Useful for setting a PPQ relative to the base frequency value.\n\t */\n\tget multiplier(): number {\n\t\treturn this._multiplier;\n\t}\n\tset multiplier(m: number) {\n\t\t// get and reset the current value with the new multipler\n\t\t// might be necessary to clear all the previous values\n\t\tconst currentVal = this.value;\n\t\tthis._multiplier = m;\n\t\tthis.value = currentVal;\n\t}\n\n\t/**\n\t * Connect the output signal\n\t */\n\tconnect(dstNode: InputNode, outputNumber = 0, inputNumber = 0): this {\n\t\tconnect(this._sig, dstNode, outputNumber, inputNumber);\n\t\treturn this;\n\t}\n}\n","import { ToneWithContext, ToneWithContextOptions } from \"../context/ToneWithContext\";\nimport { BPM, Frequency, Hertz, Seconds, Ticks, Time } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { PlaybackState, StateTimeline, StateTimelineEvent } from \"../util/StateTimeline\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isDefined } from \"../util/TypeCheck\";\nimport { TickSignal } from \"./TickSignal\";\n\ninterface TickSourceOptions extends ToneWithContextOptions {\n\tfrequency: Frequency;\n\tunits: \"hertz\" | \"bpm\";\n}\n\ninterface TickSourceOffsetEvent {\n\tticks: number;\n\ttime: number;\n\tseconds: number;\n}\n\n/**\n * Uses [TickSignal](TickSignal) to track elapsed ticks with complex automation curves.\n * @category Core\n */\nexport class TickSource<Type extends BPM | Hertz> extends ToneWithContext<TickSourceOptions> {\n\n\tname = \"TickSource\";\n\n\t/**\n\t *  The frequency the callback function should be invoked.\n\t */\n\tfrequency: TickSignal<Type>;\n\n\t/**\n\t *  The state timeline\n\t */\n\tprivate _state: StateTimeline = new StateTimeline();\n\n\t/**\n\t * The offset values of the ticks\n\t */\n\tprivate _tickOffset: Timeline<TickSourceOffsetEvent> = new Timeline();\n\n\t/**\n\t * @param frequency The initial frequency that the signal ticks at\n\t */\n\tconstructor(frequency?: Frequency);\n\t// tslint:disable-next-line: unified-signatures\n\tconstructor(options?: Partial<TickSourceOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(TickSource.getDefaults(), arguments, [\"frequency\"]));\n\t\tconst options = optionsFromArguments(TickSource.getDefaults(), arguments, [\"frequency\"]);\n\n\t\tthis.frequency = new TickSignal({\n\t\t\tcontext: this.context,\n\t\t\tunits: options.units,\n\t\t\tvalue: this.toFrequency(options.frequency),\n\t\t});\n\t\treadOnly(this, \"frequency\");\n\n\t\t// set the inital state\n\t\tthis._state.setStateAtTime(\"stopped\", 0);\n\t\t// add the first event\n\t\tthis.setTicksAtTime(0, 0);\n\t}\n\n\tstatic getDefaults(): TickSourceOptions {\n\t\treturn Object.assign({\n\t\t\tfrequency: 1,\n\t\t\tunits: \"hertz\" as \"hertz\",\n\t\t}, ToneWithContext.getDefaults());\n\t}\n\n\t/**\n\t *  Returns the playback state of the source, either \"started\", \"stopped\" or \"paused\".\n\t */\n\tget state(): PlaybackState {\n\t\treturn this._state.getValueAtTime(this.now());\n\t}\n\n\t/**\n\t *  Start the clock at the given time. Optionally pass in an offset\n\t *  of where to start the tick counter from.\n\t *  @param  time    The time the clock should start\n\t *  @param offset The number of ticks to start the source at\n\t */\n\tstart(time: Time, offset?: Ticks): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(computedTime) !== \"started\") {\n\t\t\tthis._state.setStateAtTime(\"started\", computedTime);\n\t\t\tif (isDefined(offset)) {\n\t\t\t\tthis.setTicksAtTime(offset, computedTime);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the clock. Stopping the clock resets the tick counter to 0.\n\t * @param time The time when the clock should stop.\n\t */\n\tstop(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\t// cancel the previous stop\n\t\tif (this._state.getValueAtTime(computedTime) === \"stopped\") {\n\t\t\tconst event = this._state.get(computedTime);\n\t\t\tif (event && event.time > 0) {\n\t\t\t\tthis._tickOffset.cancel(event.time);\n\t\t\t\tthis._state.cancel(event.time);\n\t\t\t}\n\t\t}\n\t\tthis._state.cancel(computedTime);\n\t\tthis._state.setStateAtTime(\"stopped\", computedTime);\n\t\tthis.setTicksAtTime(0, computedTime);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Pause the clock. Pausing does not reset the tick counter.\n\t *  @param time The time when the clock should stop.\n\t */\n\tpause(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(computedTime) === \"started\") {\n\t\t\tthis._state.setStateAtTime(\"paused\", computedTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Cancel start/stop/pause and setTickAtTime events scheduled after the given time.\n\t *  @param time When to clear the events after\n\t */\n\tcancel(time: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis._state.cancel(time);\n\t\tthis._tickOffset.cancel(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the elapsed ticks at the given time\n\t * @param  time  When to get the tick value\n\t * @return The number of ticks\n\t */\n\tgetTicksAtTime(time?: Time): Ticks {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst stopEvent = this._state.getLastState(\"stopped\", computedTime);\n\t\tif (!stopEvent) {\n\t\t\treturn 0;\n\t\t}\n\t\t// this event allows forEachBetween to iterate until the current time\n\t\tconst tmpEvent: StateTimelineEvent = { state: \"paused\", time: computedTime};\n\t\tthis._state.add(tmpEvent);\n\n\t\t// keep track of the previous offset event\n\t\tlet lastState = stopEvent;\n\t\tlet elapsedTicks = 0;\n\n\t\t// iterate through all the events since the last stop\n\t\tthis._state.forEachBetween(stopEvent.time, computedTime + this.sampleTime, e => {\n\t\t\tlet periodStartTime = lastState.time;\n\t\t\t// if there is an offset event in this period use that\n\t\t\tconst offsetEvent = this._tickOffset.get(e.time);\n\t\t\tif (offsetEvent && offsetEvent.time >= lastState.time) {\n\t\t\t\telapsedTicks = offsetEvent.ticks;\n\t\t\t\tperiodStartTime = offsetEvent.time;\n\t\t\t}\n\t\t\tif (lastState.state === \"started\" && e.state !== \"started\") {\n\t\t\t\telapsedTicks += this.frequency.getTicksAtTime(e.time) - this.frequency.getTicksAtTime(periodStartTime);\n\t\t\t}\n\t\t\tlastState = e;\n\t\t});\n\n\t\t// remove the temporary event\n\t\tthis._state.remove(tmpEvent);\n\n\t\t// return the ticks\n\t\treturn elapsedTicks;\n\t}\n\n\t/**\n\t *  The number of times the callback was invoked. Starts counting at 0\n\t *  and increments after the callback was invoked. Returns -1 when stopped.\n\t */\n\tget ticks(): Ticks {\n\t\treturn this.getTicksAtTime(this.now());\n\t}\n\n\tset ticks(t: Ticks) {\n\t\tthis.setTicksAtTime(t, this.now());\n\t}\n\n\t/**\n\t *  The time since ticks=0 that the TickSource has been running. Accounts\n\t *  for tempo curves\n\t */\n\tget seconds(): Seconds {\n\t\treturn this.getSecondsAtTime(this.now());\n\t}\n\n\tset seconds(s: Seconds) {\n\t\tconst now = this.now();\n\t\tconst ticks = this.frequency.timeToTicks(s, now);\n\t\tthis.setTicksAtTime(ticks, now);\n\t}\n\n\t/**\n\t *  Return the elapsed seconds at the given time.\n\t *  @param  time  When to get the elapsed seconds\n\t *  @return  The number of elapsed seconds\n\t */\n\tgetSecondsAtTime(time: Time): Seconds {\n\t\ttime = this.toSeconds(time);\n\t\tconst stopEvent = this._state.getLastState(\"stopped\", time);\n\t\tif (!stopEvent) {\n\t\t\treturn 0;\n\t\t}\n\t\t// this event allows forEachBetween to iterate until the current time\n\t\tconst tmpEvent: StateTimelineEvent = { state : \"paused\", time };\n\t\tthis._state.add(tmpEvent);\n\n\t\t// keep track of the previous offset event\n\t\tlet lastState = stopEvent;\n\t\tlet elapsedSeconds = 0;\n\n\t\t// iterate through all the events since the last stop\n\t\tthis._state.forEachBetween(stopEvent.time, time + this.sampleTime, e => {\n\t\t\tlet periodStartTime = lastState.time;\n\t\t\t// if there is an offset event in this period use that\n\t\t\tconst offsetEvent = this._tickOffset.get(e.time);\n\t\t\tif (offsetEvent && offsetEvent.time >= lastState.time) {\n\t\t\t\telapsedSeconds = offsetEvent.seconds;\n\t\t\t\tperiodStartTime = offsetEvent.time;\n\t\t\t}\n\t\t\tif (lastState.state === \"started\" && e.state !== \"started\") {\n\t\t\t\telapsedSeconds += e.time - periodStartTime;\n\t\t\t}\n\t\t\tlastState = e;\n\t\t});\n\n\t\t// remove the temporary event\n\t\tthis._state.remove(tmpEvent);\n\n\t\t// return the ticks\n\t\treturn elapsedSeconds;\n\t}\n\n\t/**\n\t * Set the clock's ticks at the given time.\n\t * @param  ticks The tick value to set\n\t * @param  time  When to set the tick value\n\t */\n\tsetTicksAtTime(ticks: Ticks, time: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis._tickOffset.cancel(time);\n\t\tthis._tickOffset.add({\n\t\t\tseconds : this.frequency.getDurationOfTicks(ticks, time),\n\t\t\tticks,\n\t\t\ttime,\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Returns the scheduled state at the given time.\n\t *  @param  time  The time to query.\n\t *  @example\n\t * source.start(\"+0.1\");\n\t * source.getStateAtTime(\"+0.1\"); //returns \"started\"\n\t */\n\tgetStateAtTime(time: Time): PlaybackState {\n\t\ttime = this.toSeconds(time);\n\t\treturn this._state.getValueAtTime(time);\n\t}\n\n\t/**\n\t * Get the time of the given tick. The second argument\n\t * is when to test before. Since ticks can be set (with setTicksAtTime)\n\t * there may be multiple times for a given tick value.\n\t * @param  ticks The tick number.\n\t * @param  before When to measure the tick value from.\n\t * @return The time of the tick\n\t */\n\tgetTimeOfTick(tick: Ticks, before = this.now()): Seconds {\n\t\tconst offset = this._tickOffset.get(before) as TickSourceOffsetEvent;\n\t\tconst event = this._state.get(before) as StateTimelineEvent;\n\t\tconst startTime = Math.max(offset.time, event.time);\n\t\tconst absoluteTicks = this.frequency.getTicksAtTime(startTime) + tick - offset.ticks;\n\t\treturn this.frequency.getTimeOfTick(absoluteTicks);\n\t}\n\n\t/**\n\t *  Invoke the callback event at all scheduled ticks between the\n\t *  start time and the end time\n\t *  @param  startTime  The beginning of the search range\n\t *  @param  endTime    The end of the search range\n\t *  @param  callback   The callback to invoke with each tick\n\t */\n\tforEachTickBetween(startTime: Time, endTime: Time, callback: (when: Seconds, ticks: Ticks) => void): this {\n\t\tconst computedStartTime = this.toSeconds(startTime);\n\t\tconst computedEndTime = this.toSeconds(endTime);\n\t\t// only iterate through the sections where it is \"started\"\n\t\tlet lastStateEvent = this._state.get(computedStartTime);\n\t\tthis._state.forEachBetween(computedStartTime, computedEndTime, event => {\n\t\t\tif (lastStateEvent && lastStateEvent.state === \"started\" && event.state !== \"started\") {\n\t\t\t\tthis.forEachTickBetween(Math.max(lastStateEvent.time, computedStartTime), event.time - this.sampleTime, callback);\n\t\t\t}\n\t\t\tlastStateEvent = event;\n\t\t});\n\n\t\tlet error = null;\n\n\t\tif (lastStateEvent && lastStateEvent.state === \"started\" && this._state) {\n\t\t\tconst maxStartTime = Math.max(lastStateEvent.time, computedStartTime);\n\t\t\t// figure out the difference between the frequency ticks and the\n\t\t\tconst startTicks = this.frequency.getTicksAtTime(maxStartTime);\n\t\t\tconst ticksAtStart = this.frequency.getTicksAtTime(lastStateEvent.time);\n\t\t\tconst diff = startTicks - ticksAtStart;\n\t\t\tlet offset = diff % 1;\n\t\t\tif (offset !== 0) {\n\t\t\t\toffset = 1 - offset;\n\t\t\t}\n\t\t\tlet nextTickTime = this.frequency.getTimeOfTick(startTicks + offset);\n\t\t\twhile (nextTickTime < computedEndTime && this._state) {\n\t\t\t\ttry {\n\t\t\t\t\tcallback(nextTickTime, Math.round(this.getTicksAtTime(nextTickTime)));\n\t\t\t\t} catch (e) {\n\t\t\t\t\terror = e;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (this._state) {\n\t\t\t\t\tnextTickTime += this.frequency.getDurationOfTicks(1, nextTickTime);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (error) {\n\t\t\tthrow error;\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._state.dispose();\n\t\tthis._tickOffset.dispose();\n\t\tthis.frequency.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneWithContext, ToneWithContextOptions } from \"../context/ToneWithContext\";\nimport { BPM, Frequency, Hertz, Seconds, Ticks, Time } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Emitter, EmitterEventObject } from \"../util/Emitter\";\nimport { noOp, readOnly } from \"../util/Interface\";\nimport { PlaybackState, StateTimeline } from \"../util/StateTimeline\";\nimport { TickSignal } from \"./TickSignal\";\nimport { TickSource } from \"./TickSource\";\n\ntype ClockCallback = (time: Time, ticks?: Ticks) => void;\n\ninterface ClockOptions extends ToneWithContextOptions {\n\tfrequency: number;\n\tcallback: ClockCallback;\n\tunits: \"hertz\" | \"bpm\";\n}\n\ntype ClockEvent = \"start\" | \"stop\" | \"pause\";\n\n/**\n * A sample accurate clock which provides a callback at the given rate.\n * While the callback is not sample-accurate (it is still susceptible to\n * loose JS timing), the time passed in as the argument to the callback\n * is precise. For most applications, it is better to use Tone.Transport\n * instead of the Clock by itself since you can synchronize multiple callbacks.\n * @example\n * //the callback will be invoked approximately once a second\n * //and will print the time exactly once a second apart.\n * const clock = new Clock(time => {\n * \tconsole.log(time);\n * }, 1);\n * @category Core\n */\nexport class Clock<Type extends BPM | Hertz = Hertz>\nextends ToneWithContext<ClockOptions> implements Emitter<ClockEvent> {\n\n\tname = \"Clock\";\n\n\t/**\n\t *  The callback function to invoke at the scheduled tick.\n\t */\n\tcallback: ClockCallback = noOp;\n\n\t/**\n\t *  The tick counter\n\t */\n\tprivate _tickSource: TickSource<Type>;\n\n\t/**\n\t *  The last time the loop callback was invoked\n\t */\n\tprivate _lastUpdate: number = 0;\n\n\t/**\n\t *  Keep track of the playback state\n\t */\n\tprivate _state: StateTimeline = new StateTimeline(\"stopped\");\n\n\t/**\n\t * Context bound reference to the _loop method\n\t * This is necessary to remove the event in the end.\n\t */\n\tprivate _boundLoop: () => void = this._loop.bind(this);\n\n\t/**\n\t *  The rate the callback function should be invoked.\n\t */\n\tfrequency: TickSignal<Type>;\n\n\t/**\n\t * @param callback The callback to be invoked with the time of the audio event\n\t * @param frequency The rate of the callback\n\t */\n\tconstructor(callback?: ClockCallback, frequency?: Frequency);\n\tconstructor(options: Partial<ClockOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Clock.getDefaults(), arguments, [\"callback\", \"frequency\"]));\n\t\tconst options = optionsFromArguments(Clock.getDefaults(), arguments, [\"callback\", \"frequency\"]);\n\n\t\tthis.callback = options.callback;\n\t\tthis._tickSource = new TickSource({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.frequency,\n\t\t\tunits: options.units,\n\t\t});\n\t\tthis._lastUpdate = 0;\n\t\tthis.frequency = this._tickSource.frequency;\n\t\treadOnly(this, \"frequency\");\n\n\t\t// add an initial state\n\t\tthis._state.setStateAtTime(\"stopped\", 0);\n\n\t\t// bind a callback to the worker thread\n\t\tthis.context.on(\"tick\", this._boundLoop);\n\t}\n\n\tstatic getDefaults(): ClockOptions {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tcallback: noOp as ClockCallback,\n\t\t\tfrequency: 1,\n\t\t\tunits: \"hertz\",\n\t\t}) as ClockOptions;\n\t}\n\n\t/**\n\t *  Returns the playback state of the source, either \"started\", \"stopped\" or \"paused\".\n\t */\n\tget state(): PlaybackState {\n\t\treturn this._state.getValueAtTime(this.now());\n\t}\n\n\t/**\n\t *  Start the clock at the given time. Optionally pass in an offset\n\t *  of where to start the tick counter from.\n\t *  @param  time    The time the clock should start\n\t *  @param offset  Where the tick counter starts counting from.\n\t */\n\tstart(time?: Time, offset?: Ticks): this {\n\t\t// make sure the context is started\n\t\tthis.context.resume();\n\t\t// start the loop\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(computedTime) !== \"started\") {\n\t\t\tthis._state.setStateAtTime(\"started\", computedTime);\n\t\t\tthis._tickSource.start(computedTime, offset);\n\t\t\tif (computedTime < this._lastUpdate) {\n\t\t\t\tthis.emit(\"start\", computedTime, offset);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Stop the clock. Stopping the clock resets the tick counter to 0.\n\t *  @param time The time when the clock should stop.\n\t *  @example\n\t * clock.stop();\n\t */\n\tstop(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._state.cancel(computedTime);\n\t\tthis._state.setStateAtTime(\"stopped\", computedTime);\n\t\tthis._tickSource.stop(computedTime);\n\t\tif (computedTime < this._lastUpdate) {\n\t\t\tthis.emit(\"stop\", computedTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Pause the clock. Pausing does not reset the tick counter.\n\t *  @param time The time when the clock should stop.\n\t */\n\tpause(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(computedTime) === \"started\") {\n\t\t\tthis._state.setStateAtTime(\"paused\", computedTime);\n\t\t\tthis._tickSource.pause(computedTime);\n\t\t\tif (computedTime < this._lastUpdate) {\n\t\t\t\tthis.emit(\"pause\", computedTime);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  The number of times the callback was invoked. Starts counting at 0\n\t *  and increments after the callback was invoked.\n\t */\n\tget ticks(): Ticks {\n\t\treturn Math.ceil(this.getTicksAtTime(this.now()));\n\t}\n\tset ticks(t: Ticks) {\n\t\tthis._tickSource.ticks = t;\n\t}\n\n\t/**\n\t *  The time since ticks=0 that the Clock has been running. Accounts for tempo curves\n\t */\n\tget seconds(): Seconds {\n\t\treturn this._tickSource.seconds;\n\t}\n\tset seconds(s: Seconds) {\n\t\tthis._tickSource.seconds = s;\n\t}\n\n\t/**\n\t *  Return the elapsed seconds at the given time.\n\t *  @param  time  When to get the elapsed seconds\n\t *  @return  The number of elapsed seconds\n\t */\n\tgetSecondsAtTime(time: Time): Seconds {\n\t\treturn this._tickSource.getSecondsAtTime(time);\n\t}\n\n\t/**\n\t * Set the clock's ticks at the given time.\n\t * @param  ticks The tick value to set\n\t * @param  time  When to set the tick value\n\t */\n\tsetTicksAtTime(ticks: Ticks, time: Time): this {\n\t\tthis._tickSource.setTicksAtTime(ticks, time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the clock's ticks at the given time.\n\t * @param  time  When to get the tick value\n\t * @return The tick value at the given time.\n\t */\n\tgetTicksAtTime(time?: Time): Ticks {\n\t\treturn this._tickSource.getTicksAtTime(time);\n\t}\n\n\t/**\n\t * Get the time of the next tick\n\t * @param  ticks The tick number.\n\t */\n\tnextTickTime(offset: Ticks, when: Time): Seconds {\n\t\tconst computedTime = this.toSeconds(when);\n\t\tconst currentTick = this.getTicksAtTime(computedTime);\n\t\treturn this._tickSource.getTimeOfTick(currentTick + offset, computedTime);\n\t}\n\n\t/**\n\t *  The scheduling loop.\n\t */\n\tprivate _loop(): void {\n\n\t\tconst startTime = this._lastUpdate;\n\t\tconst endTime = this.now();\n\t\tthis._lastUpdate = endTime;\n\n\t\tif (startTime !== endTime) {\n\t\t\t// the state change events\n\t\t\tthis._state.forEachBetween(startTime, endTime, e => {\n\t\t\t\tswitch (e.state) {\n\t\t\t\t\tcase \"started\" :\n\t\t\t\t\t\tconst offset = this._tickSource.getTicksAtTime(e.time);\n\t\t\t\t\t\tthis.emit(\"start\", e.time, offset);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"stopped\" :\n\t\t\t\t\t\tif (e.time !== 0) {\n\t\t\t\t\t\t\tthis.emit(\"stop\", e.time);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"paused\" :\n\t\t\t\t\t\tthis.emit(\"pause\", e.time);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t});\n\t\t\t// the tick callbacks\n\t\t\tthis._tickSource.forEachTickBetween(startTime, endTime, (time, ticks) => {\n\t\t\t\tthis.callback(time, ticks);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Returns the scheduled state at the given time.\n\t * @param  time  The time to query.\n\t * @return  The name of the state input in setStateAtTime.\n\t * @example\n\t * clock.start(\"+0.1\");\n\t * clock.getStateAtTime(\"+0.1\"); //returns \"started\"\n\t */\n\tgetStateAtTime(time: Time): PlaybackState {\n\t\tconst computedTime = this.toSeconds(time);\n\t\treturn this._state.getValueAtTime(computedTime);\n\t}\n\n\t/**\n\t *  Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.context.off(\"tick\", this._boundLoop);\n\t\tthis._tickSource.dispose();\n\t\tthis._state.dispose();\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////\n\t// EMITTER MIXIN TO SATISFY COMPILER\n\t///////////////////////////////////////////////////////////////////////\n\n\ton!: (event: ClockEvent, callback: (...args: any[]) => void) => this;\n\tonce!: (event: ClockEvent, callback: (...args: any[]) => void) => this;\n\toff!: (event: ClockEvent, callback?: ((...args: any[]) => void) | undefined) => this;\n\temit!: (event: any, ...args: any[]) => this;\n}\n\nEmitter.mixin(Clock);\n","import { getContext } from \"../Global\";\nimport { TimeBaseUnit, TimeValue } from \"./TimeBase\";\nimport { TransportTimeClass } from \"./TransportTime\";\nimport { Seconds, Ticks } from \"./Units\";\n\n/**\n * Ticks is a primitive type for encoding Time values.\n * Ticks can be constructed with or without the `new` keyword. Ticks can be passed\n * into the parameter of any method which takes time as an argument.\n * @example\n * const t = Ticks(\"4n\"); //a quarter note as ticks\n * @category Unit\n */\nexport class TicksClass extends TransportTimeClass<Ticks> {\n\n\tname = \"Ticks\";\n\n\treadonly defaultUnits: TimeBaseUnit = \"i\";\n\n\t/**\n\t * Get the current time in the given units\n\t */\n\tprotected _now(): Ticks {\n\t\treturn this.context.transport.ticks;\n\t}\n\n\t/**\n\t *  Return the value of the beats in the current units\n\t */\n\tprotected _beatsToUnits(beats: number): Ticks {\n\t\treturn this._getPPQ() * beats;\n\t}\n\n\t/**\n\t *  Returns the value of a second in the current units\n\t */\n\tprotected _secondsToUnits(seconds: Seconds): Ticks {\n\t\treturn Math.floor(seconds / (60 / this._getBpm()) * this._getPPQ());\n\t}\n\n\t/**\n\t *  Returns the value of a tick in the current time units\n\t */\n\tprotected _ticksToUnits(ticks: Ticks): Ticks {\n\t\treturn ticks;\n\t}\n\n\t/**\n\t *  Return the time in ticks\n\t */\n\ttoTicks(): Ticks {\n\t\treturn this.valueOf() as Ticks;\n\t}\n\n\t/**\n\t *  Return the time in seconds\n\t */\n\ttoSeconds(): Seconds {\n\t\treturn (this.valueOf() / this._getPPQ()) * (60 / this._getBpm());\n\t}\n}\n\n/**\n * Convert a time representation to ticks\n * @category Unit\n */\nexport function Ticks(value?: TimeValue, units?: TimeBaseUnit): TicksClass {\n\treturn new TicksClass(getContext(), value, units);\n}\n","import { getContext } from \"../Global\";\nimport { ftom, mtof } from \"./Conversions\";\nimport { FrequencyClass, FrequencyUnit } from \"./Frequency\";\nimport { TimeValue } from \"./TimeBase\";\nimport { Hertz, Interval, MidiNote, Seconds, Ticks } from \"./Units\";\n\n/**\n *  @class Midi is a primitive type for encoding Time values.\n *         Midi can be constructed with or without the `new` keyword. Midi can be passed\n *         into the parameter of any method which takes time as an argument.\n *  @constructor\n *  @extends {Tone.Frequency}\n *  @param  {String|Number}  val    The time value.\n *  @param  {String=}  units  The units of the value.\n *  @example\n * var t = Midi(\"4n\");//a quarter note\n * @category Unit\n */\nexport class MidiClass extends FrequencyClass<MidiNote> {\n\n\tname = \"Midi\";\n\n\treadonly defaultUnits = \"midi\";\n\n\t/**\n\t *  Returns the value of a frequency in the current units\n\t */\n\tprotected _frequencyToUnits(freq: Hertz): MidiNote {\n\t\treturn ftom(super._frequencyToUnits(freq));\n\t}\n\n\t/**\n\t *  Returns the value of a tick in the current time units\n\t */\n\tprotected _ticksToUnits(ticks: Ticks): MidiNote {\n\t\treturn ftom(super._ticksToUnits(ticks));\n\t}\n\n\t/**\n\t *  Return the value of the beats in the current units\n\t */\n\tprotected _beatsToUnits(beats: number): MidiNote {\n\t\treturn ftom(super._beatsToUnits(beats));\n\t}\n\n\t/**\n\t *  Returns the value of a second in the current units\n\t */\n\tprotected _secondsToUnits(seconds: Seconds): MidiNote {\n\t\treturn ftom(super._secondsToUnits(seconds));\n\t}\n\n\t/**\n\t *  Return the value of the frequency as a MIDI note\n\t *  @return  {MIDI}\n\t *  @example\n\t * Midi(60).toMidi(); //60\n\t */\n\ttoMidi(): MidiNote {\n\t\treturn this.valueOf();\n\t}\n\n\t/**\n\t *  Return the value of the frequency as a MIDI note\n\t *  @return  {MIDI}\n\t *  @example\n\t * Midi(60).toFrequency(); //261.6255653005986\n\t */\n\ttoFrequency(): Hertz {\n\t\treturn mtof(this.toMidi());\n\t}\n\n\t/**\n\t *  Transposes the frequency by the given number of semitones.\n\t *  @return A new transposed MidiClass\n\t *  @example\n\t * Midi(\"A4\").transpose(3); //\"C5\"\n\t */\n\ttranspose(interval: Interval): MidiClass {\n\t\treturn new MidiClass(this.context, this.toMidi() + interval);\n\t}\n}\n\n/**\n * Convert a value into a FrequencyClass object.\n * @category Unit\n */\nexport function Midi(value?: TimeValue, units?: FrequencyUnit): MidiClass {\n\treturn new MidiClass(getContext(), value, units);\n}\n","import { ToneWithContext, ToneWithContextOptions } from \"../context/ToneWithContext\";\nimport { Seconds, Time } from \"../type/Units\";\nimport { Timeline, TimelineEvent } from \"./Timeline\";\n\ninterface DrawEvent extends TimelineEvent {\n\tcallback: () => void;\n}\n\n/**\n * Draw is useful for synchronizing visuals and audio events.\n * Callbacks from Tone.Transport or any of the Tone.Event classes\n * always happen _before_ the scheduled time and are not synchronized\n * to the animation frame so they are not good for triggering tightly\n * synchronized visuals and sound. Draw makes it easy to schedule\n * callbacks using the AudioContext time and uses requestAnimationFrame.\n * @example\n * Tone.Transport.schedule(function(time){\n * \t//use the time argument to schedule a callback with Draw\n * \tDraw.schedule(function(){\n * \t\t//do drawing or DOM manipulation here\n * \t}, time)\n * }, \"+0.5\")\n * @category Core\n */\nexport class Draw extends ToneWithContext<ToneWithContextOptions> {\n\n\tname = \"Draw\";\n\n\t/**\n\t *  The duration after which events are not invoked.\n\t */\n\texpiration: Seconds = 0.25;\n\n\t/**\n\t *  The amount of time before the scheduled time\n\t *  that the callback can be invoked. Default is\n\t *  half the time of an animation frame (0.008 seconds).\n\t */\n\tanticipation: Seconds = 0.008;\n\n\t/**\n\t *  All of the events.\n\t */\n\tprivate _events: Timeline<DrawEvent> = new Timeline();\n\n\t/**\n\t *  The draw loop\n\t */\n\tprivate _boundDrawLoop = this._drawLoop.bind(this);\n\n\t/**\n\t * The animation frame id\n\t */\n\tprivate _animationFrame: number = -1;\n\n\t/**\n\t *  Schedule a function at the given time to be invoked\n\t *  on the nearest animation frame.\n\t *  @param  callback  Callback is invoked at the given time.\n\t *  @param  time      The time relative to the AudioContext time to invoke the callback.\n\t */\n\tschedule(callback: () => void, time: Time): this {\n\t\tthis._events.add({\n\t\t\tcallback,\n\t\t\ttime : this.toSeconds(time),\n\t\t});\n\t\t// start the draw loop on the first event\n\t\tif (this._events.length === 1) {\n\t\t\tthis._animationFrame = requestAnimationFrame(this._boundDrawLoop);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Cancel events scheduled after the given time\n\t *  @param  after  Time after which scheduled events will be removed from the scheduling timeline.\n\t */\n\tcancel(after?: Time): this {\n\t\tthis._events.cancel(this.toSeconds(after));\n\t\treturn this;\n\t}\n\n\t/**\n\t *  The draw loop\n\t */\n\tprivate _drawLoop(): void {\n\t\tconst now = this.context.currentTime;\n\t\twhile (this._events.length && (this._events.peek() as DrawEvent).time - this.anticipation <= now) {\n\t\t\tconst event = this._events.shift();\n\t\t\tif (event && now - event.time <= this.expiration) {\n\t\t\t\tevent.callback();\n\t\t\t}\n\t\t}\n\t\tif (this._events.length > 0) {\n\t\t\tthis._animationFrame = requestAnimationFrame(this._boundDrawLoop);\n\t\t}\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._events.dispose();\n\t\tcancelAnimationFrame(this._animationFrame);\n\t\treturn this;\n\t}\n}\n","import { Tone } from \"../Tone\";\nimport { isDefined } from \"./TypeCheck\";\n\n/**\n * An IntervalTimeline event must have a time and duration\n */\nexport interface IntervalTimelineEvent {\n\ttime: number;\n\tduration: number;\n\t[propName: string]: any;\n}\n\ntype IteratorCallback = (event: IntervalTimelineEvent) => void;\n\n/**\n * Similar to Tone.Timeline, but all events represent\n * intervals with both \"time\" and \"duration\" times. The\n * events are placed in a tree structure optimized\n * for querying an intersection point with the timeline\n * events. Internally uses an [Interval Tree](https://en.wikipedia.org/wiki/Interval_tree)\n * to represent the data.\n * @category Core\n */\nexport class IntervalTimeline extends Tone {\n\n\tname = \"IntervalTimeline\";\n\n\t/**\n\t *  The root node of the inteval tree\n\t */\n\tprivate _root: IntervalNode | null = null;\n\n\t/**\n\t *  Keep track of the length of the timeline.\n\t */\n\tprivate _length: number = 0;\n\n\t/**\n\t *  The event to add to the timeline. All events must\n\t *  have a time and duration value\n\t *  @param  event  The event to add to the timeline\n\t */\n\tadd(event: IntervalTimelineEvent): this {\n\t\tthis.assert(isDefined(event.time), \"Events must have a time property\");\n\t\tthis.assert(isDefined(event.duration), \"Events must have a duration parameter\");\n\n\t\tevent.time = event.time.valueOf();\n\t\tlet node: IntervalNode | null = new IntervalNode(event.time, event.time + event.duration, event);\n\t\tif (this._root === null) {\n\t\t\tthis._root = node;\n\t\t} else {\n\t\t\tthis._root.insert(node);\n\t\t}\n\t\tthis._length++;\n\t\t// Restructure tree to be balanced\n\t\twhile (node !== null) {\n\t\t\tnode.updateHeight();\n\t\t\tnode.updateMax();\n\t\t\tthis._rebalance(node);\n\t\t\tnode = node.parent;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Remove an event from the timeline.\n\t *  @param  event  The event to remove from the timeline\n\t */\n\tremove(event: IntervalTimelineEvent): this {\n\t\tif (this._root !== null) {\n\t\t\tconst results: IntervalNode[] = [];\n\t\t\tthis._root.search(event.time, results);\n\t\t\tfor (const node of results) {\n\t\t\t\tif (node.event === event) {\n\t\t\t\t\tthis._removeNode(node);\n\t\t\t\t\tthis._length--;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  The number of items in the timeline.\n\t *  @readOnly\n\t */\n\tget length(): number {\n\t\treturn this._length;\n\t}\n\n\t/**\n\t *  Remove events whose time time is after the given time\n\t *  @param  time  The time to query.\n\t */\n\tcancel(after: number): this {\n\t\tthis.forEachFrom(after, event => this.remove(event));\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Set the root node as the given node\n\t */\n\tprivate _setRoot(node: IntervalNode | null): void {\n\t\tthis._root = node;\n\t\tif (this._root !== null) {\n\t\t\tthis._root.parent = null;\n\t\t}\n\t}\n\n\t/**\n\t *  Replace the references to the node in the node's parent\n\t *  with the replacement node.\n\t */\n\tprivate _replaceNodeInParent(node: IntervalNode, replacement: IntervalNode | null): void {\n\t\tif (node.parent !== null) {\n\t\t\tif (node.isLeftChild()) {\n\t\t\t\tnode.parent.left = replacement;\n\t\t\t} else {\n\t\t\t\tnode.parent.right = replacement;\n\t\t\t}\n\t\t\tthis._rebalance(node.parent);\n\t\t} else {\n\t\t\tthis._setRoot(replacement);\n\t\t}\n\t}\n\n\t/**\n\t *  Remove the node from the tree and replace it with\n\t *  a successor which follows the schema.\n\t */\n\tprivate _removeNode(node: IntervalNode): void {\n\t\tif (node.left === null && node.right === null) {\n\t\t\tthis._replaceNodeInParent(node, null);\n\t\t} else if (node.right === null) {\n\t\t\tthis._replaceNodeInParent(node, node.left);\n\t\t} else if (node.left === null) {\n\t\t\tthis._replaceNodeInParent(node, node.right);\n\t\t} else {\n\t\t\tconst balance = node.getBalance();\n\t\t\tlet replacement: IntervalNode;\n\t\t\tlet temp: IntervalNode | null = null;\n\t\t\tif (balance > 0) {\n\t\t\t\tif (node.left.right === null) {\n\t\t\t\t\treplacement = node.left;\n\t\t\t\t\treplacement.right = node.right;\n\t\t\t\t\ttemp = replacement;\n\t\t\t\t} else {\n\t\t\t\t\treplacement = node.left.right;\n\t\t\t\t\twhile (replacement.right !== null) {\n\t\t\t\t\t\treplacement = replacement.right;\n\t\t\t\t\t}\n\t\t\t\t\tif (replacement.parent) {\n\t\t\t\t\t\treplacement.parent.right = replacement.left;\n\t\t\t\t\t\ttemp = replacement.parent;\n\t\t\t\t\t\treplacement.left = node.left;\n\t\t\t\t\t\treplacement.right = node.right;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (node.right.left === null) {\n\t\t\t\treplacement = node.right;\n\t\t\t\treplacement.left = node.left;\n\t\t\t\ttemp = replacement;\n\t\t\t} else {\n\t\t\t\treplacement = node.right.left;\n\t\t\t\twhile (replacement.left !== null) {\n\t\t\t\t\treplacement = replacement.left;\n\t\t\t\t}\n\t\t\t\tif (replacement.parent) {\n\t\t\t\t\treplacement.parent.left = replacement.right;\n\t\t\t\t\ttemp = replacement.parent;\n\t\t\t\t\treplacement.left = node.left;\n\t\t\t\t\treplacement.right = node.right;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (node.parent !== null) {\n\t\t\t\tif (node.isLeftChild()) {\n\t\t\t\t\tnode.parent.left = replacement;\n\t\t\t\t} else {\n\t\t\t\t\tnode.parent.right = replacement;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._setRoot(replacement);\n\t\t\t}\n\t\t\tif (temp) {\n\t\t\t\tthis._rebalance(temp);\n\t\t\t}\n\t\t}\n\t\tnode.dispose();\n\t}\n\n\t/**\n\t *  Rotate the tree to the left\n\t */\n\tprivate _rotateLeft(node: IntervalNode): void {\n\t\tconst parent = node.parent;\n\t\tconst isLeftChild = node.isLeftChild();\n\n\t\t// Make node.right the new root of this sub tree (instead of node)\n\t\tconst pivotNode = node.right;\n\t\tif (pivotNode) {\n\t\t\tnode.right = pivotNode.left;\n\t\t\tpivotNode.left = node;\n\t\t}\n\n\t\tif (parent !== null) {\n\t\t\tif (isLeftChild) {\n\t\t\t\tparent.left = pivotNode;\n\t\t\t} else {\n\t\t\t\tparent.right = pivotNode;\n\t\t\t}\n\t\t} else {\n\t\t\tthis._setRoot(pivotNode);\n\t\t}\n\t}\n\n\t/**\n\t *  Rotate the tree to the right\n\t */\n\tprivate _rotateRight(node: IntervalNode): void {\n\t\tconst parent = node.parent;\n\t\tconst isLeftChild = node.isLeftChild();\n\n\t\t// Make node.left the new root of this sub tree (instead of node)\n\t\tconst pivotNode = node.left;\n\t\tif (pivotNode) {\n\t\t\tnode.left = pivotNode.right;\n\t\t\tpivotNode.right = node;\n\t\t}\n\n\t\tif (parent !== null) {\n\t\t\tif (isLeftChild) {\n\t\t\t\tparent.left = pivotNode;\n\t\t\t} else {\n\t\t\t\tparent.right = pivotNode;\n\t\t\t}\n\t\t} else {\n\t\t\tthis._setRoot(pivotNode);\n\t\t}\n\t}\n\n\t/**\n\t *  Balance the BST\n\t */\n\tprivate _rebalance(node: IntervalNode): void {\n\t\tconst balance = node.getBalance();\n\t\tif (balance > 1 && node.left) {\n\t\t\tif (node.left.getBalance() < 0) {\n\t\t\t\tthis._rotateLeft(node.left);\n\t\t\t} else {\n\t\t\t\tthis._rotateRight(node);\n\t\t\t}\n\t\t} else if (balance < -1 && node.right) {\n\t\t\tif (node.right.getBalance() > 0) {\n\t\t\t\tthis._rotateRight(node.right);\n\t\t\t} else {\n\t\t\t\tthis._rotateLeft(node);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *  Get an event whose time and duration span the give time. Will\n\t *  return the match whose \"time\" value is closest to the given time.\n\t *  @return  The event which spans the desired time\n\t */\n\tget(time: number): IntervalTimelineEvent | null {\n\t\tif (this._root !== null) {\n\t\t\tconst results: IntervalNode[] = [];\n\t\t\tthis._root.search(time, results);\n\t\t\tif (results.length > 0) {\n\t\t\t\tlet max = results[0];\n\t\t\t\tfor (let i = 1; i < results.length; i++) {\n\t\t\t\t\tif (results[i].low > max.low) {\n\t\t\t\t\t\tmax = results[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn max.event;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t *  Iterate over everything in the timeline.\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEach(callback: IteratorCallback): this {\n\t\tif (this._root !== null) {\n\t\t\tconst allNodes: IntervalNode[] = [];\n\t\t\tthis._root.traverse(node => allNodes.push(node));\n\t\t\tallNodes.forEach(node => {\n\t\t\t\tif (node.event) {\n\t\t\t\t\tcallback(node.event);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array in which the given time\n\t *  overlaps with the time and duration time of the event.\n\t *  @param  time The time to check if items are overlapping\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachAtTime(time: number, callback: IteratorCallback): this {\n\t\tif (this._root !== null) {\n\t\t\tconst results: IntervalNode[] = [];\n\t\t\tthis._root.search(time, results);\n\t\t\tresults.forEach(node => {\n\t\t\t\tif (node.event) {\n\t\t\t\t\tcallback(node.event);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array in which the time is greater\n\t *  than or equal to the given time.\n\t *  @param  time The time to check if items are before\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachFrom(time: number, callback: IteratorCallback): this {\n\t\tif (this._root !== null) {\n\t\t\tconst results: IntervalNode[] = [];\n\t\t\tthis._root.searchAfter(time, results);\n\t\t\tresults.forEach(node => {\n\t\t\t\tif (node.event) {\n\t\t\t\t\tcallback(node.event);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (this._root !== null) {\n\t\t\tthis._root.traverse(node => node.dispose());\n\t\t}\n\t\tthis._root = null;\n\t\treturn this;\n\t}\n}\n\n///////////////////////////////////////////////////////////////////////////\n// \tINTERVAL NODE HELPER\n///////////////////////////////////////////////////////////////////////////\n\n/**\n *  Represents a node in the binary search tree, with the addition\n *  of a \"high\" value which keeps track of the highest value of\n *  its children.\n *  References:\n *  https://brooknovak.wordpress.com/2013/12/07/augmented-interval-tree-in-c/\n *  http://www.mif.vu.lt/~valdas/ALGORITMAI/LITERATURA/Cormen/Cormen.pdf\n *  @param low\n *  @param high\n */\n// tslint:disable-next-line: max-classes-per-file\nclass IntervalNode {\n\n\t// the event container\n\tevent: IntervalTimelineEvent | null;\n\t// the low value\n\tlow: number;\n\t// the high value\n\thigh: number;\n\t// the high value for this and all child nodes\n\tmax: number;\n\t// the nodes to the left\n\tprivate _left: IntervalNode | null = null;\n\t// the nodes to the right\n\tprivate _right: IntervalNode | null = null;\n\t// the parent node\n\tparent: IntervalNode | null = null;\n\t// the number of child nodes\n\theight: number = 0;\n\n\tconstructor(low: number, high: number, event: IntervalTimelineEvent) {\n\t\tthis.event = event;\n\t\t// the low value\n\t\tthis.low = low;\n\t\t// the high value\n\t\tthis.high = high;\n\t\t// the high value for this and all child nodes\n\t\tthis.max = this.high;\n\t}\n\n\t/**\n\t *  Insert a node into the correct spot in the tree\n\t */\n\tinsert(node: IntervalNode): void {\n\t\tif (node.low <= this.low) {\n\t\t\tif (this.left === null) {\n\t\t\t\tthis.left = node;\n\t\t\t} else {\n\t\t\t\tthis.left.insert(node);\n\t\t\t}\n\t\t} else if (this.right === null) {\n\t\t\tthis.right = node;\n\t\t} else {\n\t\t\tthis.right.insert(node);\n\t\t}\n\t}\n\n\t/**\n\t *  Search the tree for nodes which overlap\n\t *  with the given point\n\t *  @param  point  The point to query\n\t *  @param  results  The array to put the results\n\t */\n\tsearch(point: number, results: IntervalNode[]): void {\n\t\t// If p is to the right of the rightmost point of any interval\n\t\t// in this node and all children, there won't be any matches.\n\t\tif (point > this.max) {\n\t\t\treturn;\n\t\t}\n\t\t// Search left children\n\t\tif (this.left !== null) {\n\t\t\tthis.left.search(point, results);\n\t\t}\n\t\t// Check this node\n\t\tif (this.low <= point && this.high > point) {\n\t\t\tresults.push(this);\n\t\t}\n\t\t// If p is to the left of the time of this interval,\n\t\t// then it can't be in any child to the right.\n\t\tif (this.low > point) {\n\t\t\treturn;\n\t\t}\n\t\t// Search right children\n\t\tif (this.right !== null) {\n\t\t\tthis.right.search(point, results);\n\t\t}\n\t}\n\n\t/**\n\t *  Search the tree for nodes which are less\n\t *  than the given point\n\t *  @param  point  The point to query\n\t *  @param  results  The array to put the results\n\t */\n\tsearchAfter(point: number, results: IntervalNode[]): void {\n\t\t// Check this node\n\t\tif (this.low >= point) {\n\t\t\tresults.push(this);\n\t\t\tif (this.left !== null) {\n\t\t\t\tthis.left.searchAfter(point, results);\n\t\t\t}\n\t\t}\n\t\t// search the right side\n\t\tif (this.right !== null) {\n\t\t\tthis.right.searchAfter(point, results);\n\t\t}\n\t}\n\n\t/**\n\t *  Invoke the callback on this element and both it's branches\n\t *  @param  {Function}  callback\n\t */\n\ttraverse(callback: (self: IntervalNode) => void): void {\n\t\tcallback(this);\n\t\tif (this.left !== null) {\n\t\t\tthis.left.traverse(callback);\n\t\t}\n\t\tif (this.right !== null) {\n\t\t\tthis.right.traverse(callback);\n\t\t}\n\t}\n\n\t/**\n\t *  Update the height of the node\n\t */\n\tupdateHeight(): void {\n\t\tif (this.left !== null && this.right !== null) {\n\t\t\tthis.height = Math.max(this.left.height, this.right.height) + 1;\n\t\t} else if (this.right !== null) {\n\t\t\tthis.height = this.right.height + 1;\n\t\t} else if (this.left !== null) {\n\t\t\tthis.height = this.left.height + 1;\n\t\t} else {\n\t\t\tthis.height = 0;\n\t\t}\n\t}\n\n\t/**\n\t *  Update the height of the node\n\t */\n\tupdateMax(): void {\n\t\tthis.max = this.high;\n\t\tif (this.left !== null) {\n\t\t\tthis.max = Math.max(this.max, this.left.max);\n\t\t}\n\t\tif (this.right !== null) {\n\t\t\tthis.max = Math.max(this.max, this.right.max);\n\t\t}\n\t}\n\n\t/**\n\t *  The balance is how the leafs are distributed on the node\n\t *  @return  Negative numbers are balanced to the right\n\t */\n\tgetBalance(): number {\n\t\tlet balance = 0;\n\t\tif (this.left !== null && this.right !== null) {\n\t\t\tbalance = this.left.height - this.right.height;\n\t\t} else if (this.left !== null) {\n\t\t\tbalance = this.left.height + 1;\n\t\t} else if (this.right !== null) {\n\t\t\tbalance = -(this.right.height + 1);\n\t\t}\n\t\treturn balance;\n\t}\n\n\t/**\n\t *  @returns true if this node is the left child of its parent\n\t */\n\tisLeftChild(): boolean {\n\t\treturn this.parent !== null && this.parent.left === this;\n\t}\n\n\t/**\n\t *  get/set the left node\n\t */\n\tget left(): IntervalNode | null {\n\t\treturn this._left;\n\t}\n\n\tset left(node: IntervalNode | null) {\n\t\tthis._left = node;\n\t\tif (node !== null) {\n\t\t\tnode.parent = this;\n\t\t}\n\t\tthis.updateHeight();\n\t\tthis.updateMax();\n\t}\n\n\t/**\n\t *  get/set the right node\n\t */\n\tget right(): IntervalNode | null {\n\t\treturn this._right;\n\t}\n\n\tset right(node: IntervalNode | null) {\n\t\tthis._right = node;\n\t\tif (node !== null) {\n\t\t\tnode.parent = this;\n\t\t}\n\t\tthis.updateHeight();\n\t\tthis.updateMax();\n\t}\n\n\t/**\n\t *  null out references.\n\t */\n\tdispose(): void {\n\t\tthis.parent = null;\n\t\tthis._left = null;\n\t\tthis._right = null;\n\t\tthis.event = null;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { Param } from \"../../core/context/Param\";\nimport { InputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Decibels } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\n\ninterface VolumeOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n\tmute: boolean;\n}\n\n/**\n *  @class Volume is a simple volume node, useful for creating a volume fader.\n *\n *  @extends {Tone.AudioNode}\n *  @constructor\n *  @param {Decibels} [volume=0] the initial volume\n *  @example\n * var vol = new Volume(-12);\n * instrument.chain(vol, Tone.Master);\n */\nexport class Volume extends ToneAudioNode<VolumeOptions> {\n\n\treadonly name = \"Volume\";\n\n\t/**\n\t * the output node\n\t */\n\toutput: Gain<Decibels>;\n\n\t/**\n\t * Input and output are the same\n\t */\n\tinput: Gain;\n\n\t/**\n\t * The unmuted volume\n\t */\n\tprivate _unmutedVolume: Decibels;\n\n\t/**\n\t *  The volume control in decibels.\n\t */\n\tvolume: Param<Decibels>;\n\n\tconstructor(options?: Decibels | Partial<VolumeOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Volume.getDefaults(), arguments, [\"volume\"]));\n\t\tconst options = optionsFromArguments(Volume.getDefaults(), arguments, [\"volume\"]);\n\n\t\tthis.input = this.output = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: options.volume,\n\t\t\tunits: \"decibels\",\n\t\t});\n\t\tthis.volume = this.output.gain;\n\t\treadOnly(this, \"volume\");\n\t\tthis._unmutedVolume = options.volume;\n\n\t\t// set the mute initially\n\t\tthis.mute = options.mute;\n\t}\n\n\tstatic getDefaults(): VolumeOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmute: false,\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Mute the output.\n\t * @example\n\t * //mute the output\n\t * volume.mute = true;\n\t */\n\tget mute(): boolean {\n\t\treturn this.volume.value === -Infinity;\n\t}\n\tset mute(mute: boolean) {\n\t\tif (!this.mute && mute) {\n\t\t\tthis._unmutedVolume = this.volume.value;\n\t\t\t// maybe it should ramp here?\n\t\t\tthis.volume.value = -Infinity;\n\t\t} else if (this.mute && !mute) {\n\t\t\tthis.volume.value = this._unmutedVolume;\n\t\t}\n\t}\n\n\t/**\n\t *  clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.input.dispose();\n\t\tthis.volume.dispose();\n\t\treturn this;\n\t}\n}\n","import { Volume } from \"../../component/channel/Volume\";\nimport { connectSeries } from \"../Connect\";\nimport { Decibels } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { onContextClose, onContextInit } from \"./ContextInitialization\";\nimport { Gain } from \"./Gain\";\nimport { Param } from \"./Param\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"./ToneAudioNode\";\n\ninterface DestinationOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n\tmute: boolean;\n}\n\n/**\n *  A single master output which is connected to the\n *  AudioDestinationNode (aka your speakers).\n *  It provides useful conveniences such as the ability\n *  to set the volume and mute the entire application.\n *  It also gives you the ability to apply master effects to your application.\n *\n *  @example\n * //the audio will go from the oscillator to the speakers\n * oscillator.connect(Destination);\n * //a convenience for connecting to the master output is also provided:\n * oscillator.toDestination();\n * //the above two examples are equivalent.\n * @category Core\n */\nexport class Destination extends ToneAudioNode<DestinationOptions> {\n\n\treadonly name = \"Destination\";\n\n\tinput: Volume = new Volume({ context: this.context });\n\toutput: Gain = new Gain({ context : this.context });\n\n\t/**\n\t * The volume of the master output.\n\t */\n\tvolume: Param<Decibels> = this.input.volume;\n\n\tconstructor(options: Partial<DestinationOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Destination.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Destination.getDefaults(), arguments);\n\n\t\tconnectSeries(this.input, this.output, this.context.rawContext.destination);\n\n\t\tthis.mute = options.mute;\n\t}\n\n\tstatic getDefaults(): DestinationOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmute: false,\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Mute the output.\n\t * @example\n\t * //mute the output\n\t * Destination.mute = true;\n\t */\n\tget mute(): boolean {\n\t\treturn this.input.mute;\n\t}\n\n\tset mute(mute: boolean) {\n\t\tthis.input.mute = mute;\n\t}\n\n\t/**\n\t *  Add a master effects chain. NOTE: this will disconnect any nodes which were previously\n\t *  chained in the master effects chain.\n\t *  @param nodes All arguments will be connected in a row and the Master will be routed through it.\n\t *  @return  {Destination}  this\n\t *  @example\n\t * //some overall compression to keep the levels in check\n\t * var masterCompressor = new Tone.Compressor({\n\t * \t\"threshold\" : -6,\n\t * \t\"ratio\" : 3,\n\t * \t\"attack\" : 0.5,\n\t * \t\"release\" : 0.1\n\t * });\n\t * //give a little boost to the lows\n\t * var lowBump = new Tone.Filter(200, \"lowshelf\");\n\t * //route everything through the filter\n\t * //and compressor before going to the speakers\n\t * Destination.chain(lowBump, masterCompressor);\n\t */\n\tchain(...args: Array<AudioNode | ToneAudioNode>): this {\n\t\tthis.input.disconnect();\n\t\targs.unshift(this.input);\n\t\targs.push(this.output);\n\t\tconnectSeries(...args);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.volume.dispose();\n\t\treturn this;\n\t}\n}\n\n///////////////////////////////////////////////////////////////////////////\n// \tINITIALIZATION\n///////////////////////////////////////////////////////////////////////////\n\nonContextInit(context => {\n\tcontext.destination = new Destination({ context });\n});\n\nonContextClose(context => {\n\tcontext.destination.dispose();\n});\n","import { Seconds, Ticks } from \"../type/Units\";\nimport { noOp } from \"../util/Interface\";\n\ntype Transport = import(\"../clock/Transport\").Transport;\n\nexport interface TransportEventOptions {\n\tcallback: (time: number) => void;\n\tonce: boolean;\n\ttime: Ticks;\n}\n\n/**\n * TransportEvent is an internal class used by (Tone.Transport)[Transport]\n * to schedule events. Do no invoke this class directly, it is\n * handled from within Tone.Transport.\n * @category Core\n */\nexport class TransportEvent {\n\n\t/**\n\t * Reference to the Transport that created it\n\t */\n\tprotected transport: Transport;\n\n\t/**\n\t * The unique id of the event\n\t */\n\tid: number = TransportEvent._eventId++;\n\n\t/**\n\t * The time the event starts\n\t */\n\ttime: Ticks;\n\n\t/**\n\t * The callback to invoke\n\t */\n\tprivate callback?: (time: Seconds) => void;\n\n\t/**\n\t * If the event should be removed after being invoked.\n\t */\n\tprivate _once: boolean;\n\n\t/**\n\t * @param Transport The transport object which the event belongs to\n\t */\n\tconstructor(transport: Transport, opts: Partial<TransportEventOptions>) {\n\n\t\tconst options: TransportEventOptions = Object.assign(TransportEvent.getDefaults(), opts);\n\n\t\tthis.transport = transport;\n\t\tthis.callback = options.callback;\n\t\tthis._once = options.once;\n\t\tthis.time = options.time;\n\t}\n\n\tstatic getDefaults(): TransportEventOptions {\n\t\treturn {\n\t\t\tcallback: noOp,\n\t\t\tonce: false,\n\t\t\ttime: 0,\n\t\t};\n\t}\n\n\t/**\n\t * Current ID counter\n\t */\n\tprivate static _eventId: number = 0;\n\n\t/**\n\t * Invoke the event callback.\n\t * @param  time  The AudioContext time in seconds of the event\n\t */\n\tinvoke(time: Seconds): void {\n\t\tif (this.callback) {\n\t\t\tthis.callback(time);\n\t\t\tif (this._once) {\n\t\t\t\tthis.transport.clear(this.id);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tthis.callback = undefined;\n\t\treturn this;\n\t}\n}\n","import { Context } from \"../context/Context\";\nimport { TicksClass } from \"../type/Ticks\";\nimport { Seconds, Ticks, Time } from \"../type/Units\";\nimport { TransportEvent, TransportEventOptions } from \"./TransportEvent\";\n\ntype Transport = import(\"../clock/Transport\").Transport;\n\ninterface TransportRepeatEventOptions extends TransportEventOptions {\n\tinterval: Ticks;\n\tduration: Ticks;\n}\n\n/**\n * TransportRepeatEvent is an internal class used by Tone.Transport\n * to schedule repeat events. This class should not be instantiated directly.\n * @category Core\n */\nexport class TransportRepeatEvent extends TransportEvent {\n\n\t/**\n\t * When the event should stop repeating\n\t */\n\tprivate duration: Ticks;\n\n\t/**\n\t * The interval of the repeated event\n\t */\n\tprivate _interval: Ticks;\n\n\t/**\n\t * The ID of the current timeline event\n\t */\n\tprivate _currentId: number = -1;\n\n\t/**\n\t * The ID of the next timeline event\n\t */\n\tprivate _nextId: number = -1;\n\n\t/**\n\t * The time of the next event\n\t */\n\tprivate _nextTick = this.time;\n\n\t/**\n\t * a reference to the bound start method\n\t */\n\tprivate _boundRestart = this._restart.bind(this);\n\n\t/**\n\t * The audio context belonging to this event\n\t */\n\tprotected context: Context;\n\n\t/**\n\t * @param Transport The transport object which the event belongs to\n\t */\n\tconstructor(transport: Transport, opts: Partial<TransportRepeatEventOptions>) {\n\n\t\tsuper(transport, opts);\n\n\t\tconst options = Object.assign(TransportRepeatEvent.getDefaults(), opts);\n\n\t\tthis.duration =  new TicksClass(transport.context, options.duration).valueOf();\n\t\tthis._interval = new  TicksClass(transport.context, options.interval).valueOf();\n\t\tthis._nextTick = options.time;\n\t\tthis.transport.on(\"start\", this._boundRestart);\n\t\tthis.transport.on(\"loopStart\", this._boundRestart);\n\t\tthis.context = this.transport.context;\n\t\tthis._restart();\n\t}\n\n\tstatic getDefaults(): TransportRepeatEventOptions {\n\t\treturn Object.assign({}, TransportEvent.getDefaults(), {\n\t\t\tduration: Infinity,\n\t\t\tinterval: 1,\n\t\t\tonce: false,\n\t\t});\n\t}\n\n\t/**\n\t * Invoke the callback. Returns the tick time which\n\t * the next event should be scheduled at.\n\t * @param  time  The AudioContext time in seconds of the event\n\t */\n\tinvoke(time: Seconds): void {\n\t\t// create more events if necessary\n\t\tthis._createEvents(time);\n\t\t// call the super class\n\t\tsuper.invoke(time);\n\t}\n\n\t/**\n\t * Push more events onto the timeline to keep up with the position of the timeline\n\t */\n\tprivate _createEvents(time: Seconds): void {\n\t\t// schedule the next event\n\t\tconst ticks = this.transport.getTicksAtTime(time);\n\t\tif (ticks >= this.time && ticks >= this._nextTick && this._nextTick + this._interval < this.time + this.duration) {\n\t\t\tthis._nextTick += this._interval;\n\t\t\tthis._currentId = this._nextId;\n\t\t\tthis._nextId = this.transport.scheduleOnce(this.invoke.bind(this),\n\t\t\t\tnew TicksClass(this.context, this._nextTick).toSeconds());\n\t\t}\n\t}\n\n\t/**\n\t * Push more events onto the timeline to keep up with the position of the timeline\n\t */\n\tprivate _restart(time?: Time): void {\n\t\tthis.transport.clear(this._currentId);\n\t\tthis.transport.clear(this._nextId);\n\t\tthis._nextTick = this.time;\n\t\tconst ticks = this.transport.getTicksAtTime(time);\n\t\tif (ticks > this.time) {\n\t\t\tthis._nextTick = this.time + Math.ceil((ticks - this.time) / this._interval) * this._interval;\n\t\t}\n\t\tthis._currentId = this.transport.scheduleOnce(this.invoke.bind(this),\n\t\t\tnew TicksClass(this.context, this._nextTick).toSeconds());\n\t\tthis._nextTick += this._interval;\n\t\tthis._nextId = this.transport.scheduleOnce(this.invoke.bind(this),\n\t\t\tnew TicksClass(this.context, this._nextTick).toSeconds());\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.transport.clear(this._currentId);\n\t\tthis.transport.clear(this._nextId);\n\t\tthis.transport.off(\"start\", this._boundRestart);\n\t\tthis.transport.off(\"loopStart\", this._boundRestart);\n\t\treturn this;\n\t}\n}\n","import { TimeClass } from \"../../core/type/Time\";\nimport { PlaybackState } from \"../../core/util/StateTimeline\";\nimport { Signal } from \"../../signal/Signal\";\nimport { onContextClose, onContextInit } from \"../context/ContextInitialization\";\nimport { Gain } from \"../context/Gain\";\nimport { Param } from \"../context/Param\";\nimport { ToneWithContext, ToneWithContextOptions } from \"../context/ToneWithContext\";\nimport { TicksClass } from \"../type/Ticks\";\nimport { TransportTimeClass } from \"../type/TransportTime\";\nimport { BarsBeatsSixteenths, BPM, NormalRange, Seconds,\n\tSubdivision, Ticks, Time, TimeSignature, TransportTime } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Emitter } from \"../util/Emitter\";\nimport { readOnly, writable } from \"../util/Interface\";\nimport { IntervalTimeline } from \"../util/IntervalTimeline\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isArray, isDefined } from \"../util/TypeCheck\";\nimport { Clock } from \"./Clock\";\nimport { TransportEvent } from \"./TransportEvent\";\nimport { TransportRepeatEvent } from \"./TransportRepeatEvent\";\n\ninterface TransportOptions extends ToneWithContextOptions {\n\tbpm: BPM;\n\tswing: NormalRange;\n\tswingSubdivision: Subdivision;\n\ttimeSignature: number;\n\tloopStart: Time;\n\tloopEnd: Time;\n\tppq: number;\n}\n\ntype TransportEventNames = \"start\" | \"stop\" | \"pause\" | \"loop\" | \"loopEnd\" | \"loopStart\";\n\ninterface SyncedSignalEvent {\n\tsignal: Signal;\n\tinitial: number;\n\tratio: Gain;\n}\n\ntype TransportCallback = (time: Seconds) => void;\n\n/**\n * Transport for timing musical events.\n * Supports tempo curves and time changes. Unlike browser-based timing (setInterval, requestAnimationFrame)\n * Transport timing events pass in the exact time of the scheduled event\n * in the argument of the callback function. Pass that time value to the object\n * you're scheduling. <br><br>\n * A single transport is created for you when the library is initialized.\n * <br><br>\n * The transport emits the events: \"start\", \"stop\", \"pause\", and \"loop\" which are\n * called with the time of that event as the argument.\n *\n * @example\n * //repeated event every 8th note\n * Transport.scheduleRepeat(function(time){\n * \t//do something with the time\n * }, \"8n\");\n * @example\n * //schedule an event on the 16th measure\n * Transport.schedule(function(time){\n * \t//do something with the time\n * }, \"16:0:0\");\n * @category Core\n */\nexport class Transport extends ToneWithContext<TransportOptions> implements Emitter<TransportEventNames> {\n\n\tname = \"Transport\";\n\n\t///////////////////////////////////////////////////////////////////////\n\t// \tLOOPING\n\t//////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * \tIf the transport loops or not.\n\t */\n\tloop: boolean = false;\n\n\t/**\n\t * \tThe loop start position in ticks\n\t */\n\tprivate _loopStart: Ticks = 0;\n\n\t/**\n\t * \tThe loop end position in ticks\n\t */\n\tprivate _loopEnd: Ticks = 0;\n\n\t///////////////////////////////////////////////////////////////////////\n\t// \tCLOCK/TEMPO\n\t//////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Pulses per quarter is the number of ticks per quarter note.\n\t */\n\tprivate _ppq: number;\n\n\t/**\n\t *  watches the main oscillator for timing ticks\n\t *  initially starts at 120bpm\n\t */\n\tprivate _clock: Clock<BPM>;\n\n\t/**\n\t * The Beats Per Minute of the Transport.\n\t * @example\n\t * Transport.bpm.value = 80;\n\t * //ramp the bpm to 120 over 10 seconds\n\t * Transport.bpm.rampTo(120, 10);\n\t */\n\tbpm: Param<BPM>;\n\n\t/**\n\t *  The time signature, or more accurately the numerator\n\t *  of the time signature over a denominator of 4.\n\t */\n\tprivate _timeSignature: number;\n\n\t///////////////////////////////////////////////////////////////////////\n\t// \tTIMELINE EVENTS\n\t//////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  All the events in an object to keep track by ID\n\t */\n\tprivate _scheduledEvents = {};\n\n\t/**\n\t * \tThe scheduled events.\n\t */\n\tprivate _timeline: Timeline<TransportEvent> = new Timeline();\n\n\t/**\n\t *  Repeated events\n\t */\n\tprivate _repeatedEvents: IntervalTimeline = new IntervalTimeline();\n\n\t/**\n\t *  All of the synced Signals\n\t */\n\tprivate _syncedSignals: SyncedSignalEvent[] = [];\n\n\t///////////////////////////////////////////////////////////////////////\n\t// \tSWING\n\t//////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  The subdivision of the swing\n\t */\n\tprivate _swingTicks: Ticks;\n\n\t/**\n\t *  The swing amount\n\t */\n\tprivate _swingAmount: NormalRange = 0;\n\n\tconstructor(options?: Partial<TransportOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Transport.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Transport.getDefaults(), arguments);\n\n\t\t// CLOCK/TEMPO\n\t\tthis._ppq = options.ppq;\n\t\tthis._clock = new Clock({\n\t\t\tcallback : this._processTick.bind(this),\n\t\t\tcontext: this.context,\n\t\t\tfrequency : 0,\n\t\t\tunits: \"bpm\",\n\t\t});\n\t\tthis._bindClockEvents();\n\t\tthis.bpm = this._clock.frequency;\n\t\tthis._clock.frequency.multiplier = options.ppq;\n\t\tthis.bpm.value = options.bpm;\n\t\treadOnly(this, \"bpm\");\n\t\tthis._timeSignature = options.timeSignature;\n\n\t\t// SWING\n\t\tthis._swingTicks = options.ppq / 2; // 8n\n\t}\n\n\tstatic getDefaults(): TransportOptions {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tbpm: 120,\n\t\t\tloopEnd: \"4m\" as Subdivision,\n\t\t\tloopStart: 0,\n\t\t\tppq: 192,\n\t\t\tswing: 0,\n\t\t\tswingSubdivision: \"8n\" as Subdivision,\n\t\t\ttimeSignature: 4,\n\t\t});\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////////\n\t// \tTICKS\n\t///////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  called on every tick\n\t *  @param  tickTime clock relative tick time\n\t *  @private\n\t */\n\tprivate _processTick(tickTime: Seconds, ticks: Ticks): void {\n\t\t// handle swing\n\t\tif (this._swingAmount > 0 &&\n\t\t\tticks % this._ppq !== 0 && // not on a downbeat\n\t\t\tticks % (this._swingTicks * 2) !== 0) {\n\t\t\t// add some swing\n\t\t\tconst progress = (ticks % (this._swingTicks * 2)) / (this._swingTicks * 2);\n\t\t\tconst amount = Math.sin((progress) * Math.PI) * this._swingAmount;\n\t\t\ttickTime += new TicksClass(this.context, this._swingTicks * 2 / 3).toSeconds() * amount;\n\t\t}\n\t\t// do the loop test\n\t\tif (this.loop) {\n\t\t\tif (ticks >= this._loopEnd) {\n\t\t\t\tthis.emit(\"loopEnd\", tickTime);\n\t\t\t\tthis._clock.setTicksAtTime(this._loopStart, tickTime);\n\t\t\t\tticks = this._loopStart;\n\t\t\t\tthis.emit(\"loopStart\", tickTime, this._clock.getSecondsAtTime(tickTime));\n\t\t\t\tthis.emit(\"loop\", tickTime);\n\t\t\t}\n\t\t}\n\t\t// invoke the timeline events scheduled on this tick\n\t\tthis._timeline.forEachAtTime(ticks, event => event.invoke(tickTime));\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////////\n\t// \tSCHEDULABLE EVENTS\n\t///////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Schedule an event along the timeline.\n\t * @param callback The callback to be invoked at the time.\n\t * @param time The time to invoke the callback at.\n\t * @return The id of the event which can be used for canceling the event.\n\t * @example\n\t * //trigger the callback when the Transport reaches the desired time\n\t * Transport.schedule(function(time){\n\t * \tenvelope.triggerAttack(time);\n\t * }, \"128i\");\n\t */\n\tschedule(callback: TransportCallback, time: TransportTime | TransportTimeClass): number {\n\t\tconst event = new TransportEvent(this, {\n\t\t\tcallback,\n\t\t\ttime : new TransportTimeClass(this.context, time).toTicks(),\n\t\t});\n\t\treturn this._addEvent(event, this._timeline);\n\t}\n\n\t/**\n\t * Schedule a repeated event along the timeline. The event will fire\n\t * at the `interval` starting at the `startTime` and for the specified\n\t * `duration`.\n\t * @param  callback   The callback to invoke.\n\t * @param  interval   The duration between successive callbacks. Must be a positive number.\n\t * @param  startTime  When along the timeline the events should start being invoked.\n\t * @param  duration How long the event should repeat.\n\t * @return  The ID of the scheduled event. Use this to cancel the event.\n\t * @example\n\t * //a callback invoked every eighth note after the first measure\n\t * Transport.scheduleRepeat(callback, \"8n\", \"1m\");\n\t */\n\tscheduleRepeat(\n\t\tcallback: TransportCallback,\n\t\tinterval: Time | TimeClass,\n\t\tstartTime?: TransportTime | TransportTimeClass,\n\t\tduration: Time = Infinity,\n\t): number {\n\t\tconst event = new TransportRepeatEvent(this, {\n\t\t\tcallback,\n\t\t\tduration : new TimeClass(this.context, duration).toTicks(),\n\t\t\tinterval: new TimeClass(this.context, interval).toTicks(),\n\t\t\ttime : new TransportTimeClass(this.context, startTime).toTicks(),\n\t\t});\n\t\t// kick it off if the Transport is started\n\t\t// @ts-ignore\n\t\treturn this._addEvent(event, this._repeatedEvents);\n\t}\n\n\t/**\n\t *  Schedule an event that will be removed after it is invoked.\n\t *  @param callback The callback to invoke once.\n\t *  @param time The time the callback should be invoked.\n\t *  @returns The ID of the scheduled event.\n\t */\n\tscheduleOnce(callback: TransportCallback, time: TransportTime | TransportTimeClass): number {\n\t\tconst event = new TransportEvent(this, {\n\t\t\tcallback,\n\t\t\tonce : true,\n\t\t\ttime : new TransportTimeClass(this.context, time).toTicks(),\n\t\t});\n\t\treturn this._addEvent(event, this._timeline);\n\t}\n\n\t/**\n\t * Clear the passed in event id from the timeline\n\t * @param eventId The id of the event.\n\t */\n\tclear(eventId: number): this {\n\t\tif (this._scheduledEvents.hasOwnProperty(eventId)) {\n\t\t\tconst item = this._scheduledEvents[eventId.toString()];\n\t\t\titem.timeline.remove(item.event);\n\t\t\titem.event.dispose();\n\t\t\tdelete this._scheduledEvents[eventId.toString()];\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add an event to the correct timeline. Keep track of the\n\t * timeline it was added to.\n\t * @returns the event id which was just added\n\t */\n\tprivate _addEvent(event: TransportEvent, timeline: Timeline<TransportEvent>): number {\n\t\tthis._scheduledEvents[event.id.toString()] = {\n\t\t\tevent,\n\t\t\ttimeline,\n\t\t};\n\t\ttimeline.add(event);\n\t\treturn event.id;\n\t}\n\n\t/**\n\t * Remove scheduled events from the timeline after\n\t * the given time. Repeated events will be removed\n\t * if their startTime is after the given time\n\t * @param after Clear all events after this time.\n\t */\n\tcancel(after: TransportTime = 0): this {\n\t\tconst computedAfter = this.toTicks(after);\n\t\tthis._timeline.forEachFrom(computedAfter, event => this.clear(event.id));\n\t\tthis._repeatedEvents.forEachFrom(computedAfter, event => this.clear(event.id));\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////////\n\t// \tSTART/STOP/PAUSE\n\t///////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Bind start/stop/pause events from the clock and emit them.\n\t */\n\tprivate _bindClockEvents(): void {\n\t\tthis._clock.on(\"start\", (time, offset) => {\n\t\t\toffset = new TicksClass(this.context, offset).toSeconds();\n\t\t\tthis.emit(\"start\", time, offset);\n\t\t});\n\n\t\tthis._clock.on(\"stop\", (time) => {\n\t\t\tthis.emit(\"stop\", time);\n\t\t});\n\n\t\tthis._clock.on(\"pause\", (time) => {\n\t\t\tthis.emit(\"pause\", time);\n\t\t});\n\t}\n\n\t/**\n\t *  Returns the playback state of the source, either \"started\", \"stopped\", or \"paused\"\n\t */\n\tget state(): PlaybackState {\n\t\treturn this._clock.getStateAtTime(this.now());\n\t}\n\n\t/**\n\t * Start the transport and all sources synced to the transport.\n\t * @param  time The time when the transport should start.\n\t * @param  offset The timeline offset to start the transport.\n\t * @example\n\t * //start the transport in one second starting at beginning of the 5th measure.\n\t * Transport.start(\"+1\", \"4:0:0\");\n\t */\n\tstart(time?: Time, offset?: TransportTime): this {\n\t\tlet offsetTicks;\n\t\tif (isDefined(offset)) {\n\t\t\toffsetTicks = this.toTicks(offset);\n\t\t}\n\t\t// start the clock\n\t\tthis._clock.start(time, offsetTicks);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the transport and all sources synced to the transport.\n\t * @param time The time when the transport should stop.\n\t * @example\n\t * Transport.stop();\n\t */\n\tstop(time?: Time): this {\n\t\tthis._clock.stop(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Pause the transport and all sources synced to the transport.\n\t */\n\tpause(time?: Time): this {\n\t\tthis._clock.pause(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Toggle the current state of the transport. If it is\n\t * started, it will stop it, otherwise it will start the Transport.\n\t * @param  time The time of the event\n\t */\n\ttoggle(time?: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tif (this._clock.getStateAtTime(time) !== \"started\") {\n\t\t\tthis.start(time);\n\t\t} else {\n\t\t\tthis.stop(time);\n\t\t}\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////////\n\t// \tSETTERS/GETTERS\n\t///////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * The time signature as just the numerator over 4.\n\t * For example 4/4 would be just 4 and 6/8 would be 3.\n\t * @example\n\t * //common time\n\t * Transport.timeSignature = 4;\n\t * // 7/8\n\t * Transport.timeSignature = [7, 8];\n\t * //this will be reduced to a single number\n\t * Transport.timeSignature; //returns 3.5\n\t */\n\tget timeSignature(): TimeSignature {\n\t\treturn this._timeSignature;\n\t}\n\tset timeSignature(timeSig: TimeSignature) {\n\t\tif (isArray(timeSig)) {\n\t\t\ttimeSig = (timeSig[0] / timeSig[1]) * 4;\n\t\t}\n\t\tthis._timeSignature = timeSig;\n\t}\n\n\t/**\n\t * When the Transport.loop = true, this is the starting position of the loop.\n\t */\n\tget loopStart(): Time {\n\t\treturn new TimeClass(this.context, this._loopStart, \"i\").toSeconds();\n\t}\n\tset loopStart(startPosition: Time) {\n\t\tthis._loopStart = this.toTicks(startPosition);\n\t}\n\n\t/**\n\t * When the Transport.loop = true, this is the ending position of the loop.\n\t */\n\tget loopEnd(): Time {\n\t\treturn new TimeClass(this.context, this._loopEnd, \"i\").toSeconds();\n\t}\n\tset loopEnd(endPosition: Time) {\n\t\tthis._loopEnd = this.toTicks(endPosition);\n\t}\n\n\t/**\n\t * Set the loop start and stop at the same time.\n\t * @example\n\t * //loop over the first measure\n\t * Transport.setLoopPoints(0, \"1m\");\n\t * Transport.loop = true;\n\t */\n\tsetLoopPoints(startPosition: TransportTime, endPosition: TransportTime): this {\n\t\tthis.loopStart = startPosition;\n\t\tthis.loopEnd = endPosition;\n\t\treturn this;\n\t}\n\n\t/**\n\t * The swing value. Between 0-1 where 1 equal to the note + half the subdivision.\n\t */\n\tget swing(): NormalRange {\n\t\treturn this._swingAmount;\n\t}\n\tset swing(amount: NormalRange) {\n\t\t// scale the values to a normal range\n\t\tthis._swingAmount = amount;\n\t}\n\n\t/**\n\t * Set the subdivision which the swing will be applied to.\n\t * The default value is an 8th note. Value must be less\n\t * than a quarter note.\n\t */\n\tget swingSubdivision(): Subdivision {\n\t\treturn new TicksClass(this.context, this._swingTicks).toNotation();\n\t}\n\tset swingSubdivision(subdivision: Subdivision) {\n\t\tthis._swingTicks = this.toTicks(subdivision);\n\t}\n\n\t/**\n\t *  The Transport's position in Bars:Beats:Sixteenths.\n\t *  Setting the value will jump to that position right away.\n\t */\n\tget position(): BarsBeatsSixteenths | Time {\n\t\tconst now = this.now();\n\t\tconst ticks = this._clock.getTicksAtTime(now);\n\t\treturn new TicksClass(this.context, ticks).toBarsBeatsSixteenths();\n\t}\n\tset position(progress: Time) {\n\t\tconst ticks = this.toTicks(progress);\n\t\tthis.ticks = ticks;\n\t}\n\n\t/**\n\t *  The Transport's position in seconds\n\t *  Setting the value will jump to that position right away.\n\t */\n\tget seconds(): Seconds {\n\t\treturn this._clock.seconds;\n\t}\n\n\tset seconds(s: Seconds) {\n\t\tconst now = this.now();\n\t\tconst ticks = this._clock.frequency.timeToTicks(s, now);\n\t\tthis.ticks = ticks;\n\t}\n\n\t/**\n\t *  The Transport's loop position as a normalized value. Always\n\t *  returns 0 if the transport if loop is not true.\n\t */\n\tget progress(): NormalRange {\n\t\tif (this.loop) {\n\t\t\tconst now = this.now();\n\t\t\tconst ticks = this._clock.getTicksAtTime(now);\n\t\t\treturn (ticks - this._loopStart) / (this._loopEnd - this._loopStart);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t *  The transports current tick position.\n\t */\n\tget ticks(): Ticks {\n\t\treturn this._clock.ticks;\n\t}\n\tset ticks(t: Ticks) {\n\t\tif (this._clock.ticks !== t) {\n\t\t\tconst now = this.now();\n\t\t\t// stop everything synced to the transport\n\t\t\tif (this.state === \"started\") {\n\t\t\t\tthis.emit(\"stop\", now);\n\t\t\t\tthis._clock.setTicksAtTime(t, now);\n\t\t\t\t// restart it with the new time\n\t\t\t\tthis.emit(\"start\", now, this.seconds);\n\t\t\t} else {\n\t\t\t\tthis._clock.setTicksAtTime(t, now);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Get the clock's ticks at the given time.\n\t * @param  time  When to get the tick value\n\t * @return The tick value at the given time.\n\t */\n\tgetTicksAtTime(time?: Time): Ticks {\n\t\treturn Math.round(this._clock.getTicksAtTime(time));\n\t}\n\n\t/**\n\t *  Return the elapsed seconds at the given time.\n\t *  @param  time  When to get the elapsed seconds\n\t *  @return  The number of elapsed seconds\n\t */\n\tgetSecondsAtTime(time: Time): Seconds {\n\t\treturn this._clock.getSecondsAtTime(time);\n\t}\n\n\t/**\n\t *  Pulses Per Quarter note. This is the smallest resolution\n\t *  the Transport timing supports. This should be set once\n\t *  on initialization and not set again. Changing this value\n\t *  after other objects have been created can cause problems.\n\t */\n\tget PPQ(): number {\n\t\treturn this._clock.frequency.multiplier;\n\t}\n\tset PPQ(ppq: number) {\n\t\tthis._clock.frequency.multiplier = ppq;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////////\n\t// \tSYNCING\n\t///////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Returns the time aligned to the next subdivision\n\t * of the Transport. If the Transport is not started,\n\t * it will return 0.\n\t * Note: this will not work precisely during tempo ramps.\n\t * @param  subdivision  The subdivision to quantize to\n\t * @return  The context time of the next subdivision.\n\t * @example\n\t * Transport.start(); //the transport must be started\n\t * Transport.nextSubdivision(\"4n\");\n\t */\n\tnextSubdivision(subdivision?: Time): Seconds {\n\t\tsubdivision = this.toTicks(subdivision);\n\t\tif (this.state !== \"started\") {\n\t\t\t// if the transport's not started, return 0\n\t\t\treturn 0;\n\t\t} else {\n\t\t\tconst now = this.now();\n\t\t\t// the remainder of the current ticks and the subdivision\n\t\t\tconst transportPos = this.getTicksAtTime(now);\n\t\t\tconst remainingTicks = subdivision - transportPos % subdivision;\n\t\t\treturn this._clock.nextTickTime(remainingTicks, now);\n\t\t}\n\t}\n\n\t/**\n\t *  Attaches the signal to the tempo control signal so that\n\t *  any changes in the tempo will change the signal in the same\n\t *  ratio.\n\t *\n\t *  @param signal\n\t *  @param ratio Optionally pass in the ratio between the two signals.\n\t * \t\t\t\tOtherwise it will be computed based on their current values.\n\t */\n\tsyncSignal(signal: Signal<any>, ratio?: number): this {\n\t\tif (!ratio) {\n\t\t\t// get the sync ratio\n\t\t\tconst now = this.now();\n\t\t\tif (signal.getValueAtTime(now) !== 0) {\n\t\t\t\tconst bpm = this.bpm.getValueAtTime(now);\n\t\t\t\tconst computedFreq = 1 / (60 / bpm / this.PPQ);\n\t\t\t\tratio = signal.getValueAtTime(now) / computedFreq;\n\t\t\t} else {\n\t\t\t\tratio = 0;\n\t\t\t}\n\t\t}\n\t\tconst ratioSignal = new Gain(ratio);\n\t\t// @ts-ignore\n\t\tthis.bpm.connect(ratioSignal);\n\t\t// @ts-ignore\n\t\tratioSignal.connect(signal._param);\n\t\tthis._syncedSignals.push({\n\t\t\tinitial : signal.value,\n\t\t\tratio : ratioSignal,\n\t\t\tsignal,\n\t\t});\n\t\tsignal.value = 0;\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Unsyncs a previously synced signal from the transport's control.\n\t *  See Transport.syncSignal.\n\t */\n\tunsyncSignal(signal: Signal<any>): this {\n\t\tfor (let i = this._syncedSignals.length - 1; i >= 0; i--) {\n\t\t\tconst syncedSignal = this._syncedSignals[i];\n\t\t\tif (syncedSignal.signal === signal) {\n\t\t\t\tsyncedSignal.ratio.dispose();\n\t\t\t\tsyncedSignal.signal.value = syncedSignal.initial;\n\t\t\t\tthis._syncedSignals.splice(i, 1);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._clock.dispose();\n\t\twritable(this, \"bpm\");\n\t\tthis._timeline.dispose();\n\t\tthis._repeatedEvents.dispose();\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////\n\t// EMITTER MIXIN TO SATISFY COMPILER\n\t///////////////////////////////////////////////////////////////////////\n\n\ton!: (event: TransportEventNames, callback: (...args: any[]) => void) => this;\n\tonce!: (event: TransportEventNames, callback: (...args: any[]) => void) => this;\n\toff!: (event: TransportEventNames, callback?: ((...args: any[]) => void) | undefined) => this;\n\temit!: (event: any, ...args: any[]) => this;\n}\n\nEmitter.mixin(Transport);\n\n///////////////////////////////////////////////////////////////////////////////\n// \tINITIALIZATION\n///////////////////////////////////////////////////////////////////////////////\n\nonContextInit(context => {\n\tcontext.transport = new Transport({ context });\n});\n\nonContextClose(context => {\n\tcontext.transport.dispose();\n});\n","import { Volume } from \"../component/channel/Volume\";\nimport \"../core/context/Destination\";\nimport { Param } from \"../core/context/Param\";\nimport { OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { Decibels, Seconds, Time } from \"../core/type/Units\";\nimport { defaultArg } from \"../core/util/Defaults\";\nimport { noOp, readOnly } from \"../core/util/Interface\";\nimport { BasicPlaybackState, StateTimeline } from \"../core/util/StateTimeline\";\nimport { isUndef } from \"../core/util/TypeCheck\";\n\ntype onStopCallback = (source: Source<any>) => void;\n\nexport interface SourceOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n\tmute: boolean;\n\tonstop: onStopCallback;\n}\n\n/**\n *  @class  Base class for sources. Sources have start/stop methods\n *          and the ability to be synced to the\n *          start/stop of this.context.transport.\n *\n *  @constructor\n *  @extends {Tone.AudioNode}\n *  @example\n * //Multiple state change events can be chained together,\n * //but must be set in the correct order and with ascending times\n *\n * // OK\n * state.start().stop(\"+0.2\");\n * // AND\n * state.start().stop(\"+0.2\").start(\"+0.4\").stop(\"+0.7\")\n *\n * // BAD\n * state.stop(\"+0.2\").start();\n * // OR\n * state.start(\"+0.3\").stop(\"+0.2\");\n *\n */\nexport abstract class Source<Options extends SourceOptions> extends ToneAudioNode<Options> {\n\n\t/**\n\t *  The output volume node\n\t */\n\tprivate _volume: Volume;\n\n\t/**\n\t * The output note\n\t */\n\toutput: OutputNode;\n\n\t/**\n\t * Sources have no inputs\n\t */\n\tinput = undefined;\n\n\t/**\n\t * The volume of the output in decibels.\n\t * @example\n\t * source.volume.value = -6;\n\t */\n\tvolume: Param<Decibels>;\n\n\t/**\n\t * The callback to invoke when the source is stopped.\n\t */\n\tonstop: onStopCallback;\n\n\t/**\n\t * \tKeep track of the scheduled state.\n\t */\n\tprotected _state: StateTimeline<{\n\t\tduration?: Seconds;\n\t\toffset?: Seconds;\n\t\t/**\n\t\t * Either the buffer is explicitly scheduled to end using the stop method,\n\t\t * or it's implicitly ended when the buffer is over.\n\t\t */\n\t\timplicitEnd?: boolean;\n\t}> = new StateTimeline(\"stopped\");\n\n\t/**\n\t *  The synced `start` callback function from the transport\n\t *  @type {Function}\n\t *  @private\n\t */\n\tprotected _synced = false;\n\n\t/**\n\t *  Keep track of all of the scheduled event ids\n\t */\n\tprivate _scheduled: number[] = [];\n\n\t/**\n\t * Placeholder functions for syncing/unsyncing to transport\n\t */\n\tprivate _syncedStart: (time: Seconds, offset: Seconds) => void = noOp;\n\tprivate _syncedStop: (time: Seconds) => void = noOp;\n\n\tconstructor(options: SourceOptions) {\n\t\tsuper(options);\n\t\tthis._state.memory = 100;\n\n\t\tthis._volume = this.output = new Volume({\n\t\t\tcontext: this.context,\n\t\t\tmute: options.mute,\n\t\t\tvolume: options.volume,\n\t\t});\n\t\tthis.volume = this._volume.volume;\n\t\treadOnly(this, \"volume\");\n\t\tthis.onstop = options.onstop;\n\t}\n\n\tstatic getDefaults(): SourceOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmute: false,\n\t\t\tonstop: noOp,\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t *  Returns the playback state of the source, either \"started\" or \"stopped\".\n\t */\n\tget state(): BasicPlaybackState {\n\t\tif (this._synced) {\n\t\t\tif (this.context.transport.state === \"started\") {\n\t\t\t\treturn this._state.getValueAtTime(this.context.transport.seconds) as BasicPlaybackState;\n\t\t\t} else {\n\t\t\t\treturn \"stopped\";\n\t\t\t}\n\t\t} else {\n\t\t\treturn this._state.getValueAtTime(this.now()) as BasicPlaybackState;\n\t\t}\n\t}\n\n\t/**\n\t * Mute the output.\n\t * @example\n\t * //mute the output\n\t * source.mute = true;\n\t */\n\tget mute(): boolean {\n\t\treturn this._volume.mute;\n\t}\n\tset mute(mute: boolean) {\n\t\tthis._volume.mute = mute;\n\t}\n\n\t// overwrite these functions\n\tprotected abstract _start(time: Time, offset?: Time, duration?: Time): void;\n\tprotected abstract _stop(time: Time): void;\n\tabstract restart(time: Time, offset?: Time, duration?: Time): this;\n\n\t/**\n\t * Ensure that the scheduled time is not before the current time.\n\t * Should only be used when scheduled unsynced.\n\t */\n\tprivate _clampToCurrentTime(time: Seconds): Seconds {\n\t\tif (this._synced) {\n\t\t\treturn time;\n\t\t} else {\n\t\t\treturn Math.max(time, this.context.currentTime);\n\t\t}\n\t}\n\n\t/**\n\t *  Start the source at the specified time. If no time is given,\n\t *  start the source now.\n\t *  @param  time When the source should be started.\n\t *  @example\n\t * source.start(\"+0.5\"); //starts the source 0.5 seconds from now\n\t */\n\tstart(time?: Time, offset?: Time, duration?: Time): this {\n\t\tlet computedTime = isUndef(time) && this._synced ? this.context.transport.seconds : this.toSeconds(time);\n\t\tcomputedTime = this._clampToCurrentTime(computedTime);\n\t\tthis.log(\"start\", computedTime);\n\t\t// if it's started, stop it and restart it\n\t\tif (this._state.getValueAtTime(computedTime) === \"started\") {\n\t\t\tthis._state.cancel(computedTime);\n\t\t\tthis._state.setStateAtTime(\"started\", computedTime);\n\t\t\tthis.restart(computedTime, offset, duration);\n\t\t} else {\n\t\t\tthis._state.setStateAtTime(\"started\", computedTime);\n\t\t\tif (this._synced) {\n\t\t\t\t// add the offset time to the event\n\t\t\t\tconst event = this._state.get(computedTime);\n\t\t\t\tif (event) {\n\t\t\t\t\tevent.offset = this.toSeconds(defaultArg(offset, 0));\n\t\t\t\t\tevent.duration = duration ? this.toSeconds(duration) : undefined;\n\t\t\t\t}\n\t\t\t\tconst sched = this.context.transport.schedule(t => {\n\t\t\t\t\tthis._start(t, offset, duration);\n\t\t\t\t}, computedTime);\n\t\t\t\tthis._scheduled.push(sched);\n\n\t\t\t\t// if it's already started\n\t\t\t\tif (this.context.transport.state === \"started\") {\n\t\t\t\t\tthis._syncedStart(this.now(), this.context.transport.seconds);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._start(computedTime, offset, duration);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Stop the source at the specified time. If no time is given,\n\t *  stop the source now.\n\t *  @param  time When the source should be stopped.\n\t *  @example\n\t * source.stop(); // stops the source immediately\n\t */\n\tstop(time?: Time): this {\n\t\tlet computedTime = isUndef(time) && this._synced ? this.context.transport.seconds : this.toSeconds(time);\n\t\tcomputedTime = this._clampToCurrentTime(computedTime);\n\t\tthis.log(\"stop\", computedTime);\n\t\tif (!this._synced) {\n\t\t\tthis._stop(computedTime);\n\t\t} else {\n\t\t\tconst sched = this.context.transport.schedule(this._stop.bind(this), computedTime);\n\t\t\tthis._scheduled.push(sched);\n\t\t}\n\t\tthis._state.cancel(computedTime);\n\t\tthis._state.setStateAtTime(\"stopped\", computedTime);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Sync the source to the Transport so that all subsequent\n\t *  calls to `start` and `stop` are synced to the TransportTime\n\t *  instead of the AudioContext time.\n\t *\n\t * @example\n\t * //sync the source so that it plays between 0 and 0.3 on the Transport's timeline\n\t * source.sync().start(0).stop(0.3);\n\t * //start the transport.\n\t * this.context.transport.start();\n\t *\n\t * @example\n\t * //start the transport with an offset and the sync'ed sources\n\t * //will start in the correct position\n\t * source.sync().start(0.1);\n\t * //the source will be invoked with an offset of 0.4 = (0.5 - 0.1)\n\t * this.context.transport.start(\"+0.5\", 0.5);\n\t */\n\tsync(): this {\n\t\tif (!this._synced) {\n\t\t\tthis._synced = true;\n\t\t\tthis._syncedStart = (time, offset) => {\n\t\t\t\tif (offset > 0) {\n\t\t\t\t\t// get the playback state at that time\n\t\t\t\t\tconst stateEvent = this._state.get(offset);\n\t\t\t\t\t// listen for start events which may occur in the middle of the sync'ed time\n\t\t\t\t\tif (stateEvent && stateEvent.state === \"started\" && stateEvent.time !== offset) {\n\t\t\t\t\t\t// get the offset\n\t\t\t\t\t\tconst startOffset = offset - this.toSeconds(stateEvent.time);\n\t\t\t\t\t\tlet duration;\n\t\t\t\t\t\tif (stateEvent.duration) {\n\t\t\t\t\t\t\tduration = this.toSeconds(stateEvent.duration) - startOffset;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._start(time, this.toSeconds(stateEvent.offset) + startOffset, duration);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis._syncedStop = time => {\n\t\t\t\tconst seconds = this.context.transport.getSecondsAtTime(Math.max(time - this.sampleTime, 0));\n\t\t\t\tif (this._state.getValueAtTime(seconds) === \"started\") {\n\t\t\t\t\tthis._stop(time);\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis.context.transport.on(\"start\", this._syncedStart);\n\t\t\tthis.context.transport.on(\"loopStart\", this._syncedStart);\n\t\t\tthis.context.transport.on(\"stop\", this._syncedStop);\n\t\t\tthis.context.transport.on(\"pause\", this._syncedStop);\n\t\t\tthis.context.transport.on(\"loopEnd\", this._syncedStop);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Unsync the source to the Transport. See Source.sync\n\t */\n\tunsync(): this {\n\t\tif (this._synced) {\n\t\t\tthis.context.transport.off(\"stop\", this._syncedStop);\n\t\t\tthis.context.transport.off(\"pause\", this._syncedStop);\n\t\t\tthis.context.transport.off(\"loopEnd\", this._syncedStop);\n\t\t\tthis.context.transport.off(\"start\", this._syncedStart);\n\t\t\tthis.context.transport.off(\"loopStart\", this._syncedStart);\n\t\t}\n\t\tthis._synced = false;\n\t\t// clear all of the scheduled ids\n\t\tthis._scheduled.forEach(id => this.context.transport.clear(id));\n\t\tthis._scheduled = [];\n\t\tthis._state.cancel(0);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.onstop = noOp;\n\t\tthis.unsync();\n\t\tthis._volume.dispose();\n\t\tthis._state.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../core/context/Gain\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { GainFactor, Seconds, Time } from \"../core/type/Units\";\nimport { noOp } from \"../core/util/Interface\";\nimport { BasicPlaybackState } from \"../core/util/StateTimeline\";\n\nexport type OneShotSourceCurve = \"linear\" | \"exponential\";\n\ntype onEndedCallback = (source: OneShotSource<any>) => void;\n\nexport interface OneShotSourceOptions extends ToneAudioNodeOptions {\n\tonended: onEndedCallback;\n\tfadeIn: Time;\n\tfadeOut: Time;\n\tcurve: OneShotSourceCurve;\n}\n\nexport abstract class OneShotSource<Options extends ToneAudioNodeOptions> extends ToneAudioNode<Options> {\n\n\t/**\n\t *  The callback to invoke after the\n\t *  source is done playing.\n\t */\n\tonended: onEndedCallback = noOp;\n\n\t/**\n\t * Sources do not have input nodes\n\t */\n\tinput: undefined;\n\n\t/**\n\t *  The start time\n\t */\n\tprotected _startTime: number = -1;\n\n\t/**\n\t *  The stop time\n\t */\n\tprotected _stopTime: number = -1;\n\n\t/**\n\t * The id of the timeout\n\t */\n\tprivate _timeout: number = -1;\n\n\t/**\n\t * The public output node\n\t */\n\toutput: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain : 0,\n\t});\n\n\t/**\n\t *  The output gain node.\n\t */\n\tprotected _gainNode = this.output;\n\n\t/**\n\t *  The fadeIn time of the amplitude envelope.\n\t */\n\tprotected _fadeIn: Time;\n\n\t/**\n\t *  The fadeOut time of the amplitude envelope.\n\t */\n\tprotected _fadeOut: Time;\n\n\t/**\n\t * The curve applied to the fades, either \"linear\" or \"exponential\"\n\t */\n\tprotected _curve: OneShotSourceCurve;\n\n\tconstructor(options: OneShotSourceOptions) {\n\t\tsuper(options);\n\n\t\tthis._fadeIn = options.fadeIn;\n\t\tthis._fadeOut = options.fadeOut;\n\t\tthis._curve = options.curve;\n\t\tthis.onended = options.onended;\n\t}\n\n\tstatic getDefaults(): OneShotSourceOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tcurve: \"linear\" as OneShotSourceCurve,\n\t\t\tfadeIn : 0,\n\t\t\tfadeOut: 0,\n\t\t\tonended : noOp,\n\t\t});\n\t}\n\n\t/**\n\t * Stop the source node\n\t */\n\tprotected abstract _stopSource(time: Seconds): void;\n\n\t/**\n\t * Start the source node at the given time\n\t * @param  time When to start the node\n\t */\n\tprotected abstract start(time?: Time): this;\n\t/**\n\t * Start the source at the given time\n\t * @param  time When to start the source\n\t */\n\tprotected _startGain(time: Seconds, gain: GainFactor = 1): this {\n\t\tthis.assert(this._startTime === -1, \"Source cannot be started more than once\");\n\t\t// apply a fade in envelope\n\t\tconst fadeInTime = this.toSeconds(this._fadeIn);\n\n\t\t// record the start time\n\t\tthis._startTime = time + fadeInTime;\n\t\tthis._startTime = Math.max(this._startTime, this.context.currentTime);\n\n\t\t// schedule the envelope\n\t\tif (fadeInTime > 0) {\n\t\t\tthis._gainNode.gain.setValueAtTime(0, time);\n\t\t\tif (this._curve === \"linear\") {\n\t\t\t\tthis._gainNode.gain.linearRampToValueAtTime(gain, time + fadeInTime);\n\t\t\t} else {\n\t\t\t\tthis._gainNode.gain.exponentialApproachValueAtTime(gain, time, fadeInTime);\n\t\t\t}\n\t\t} else {\n\t\t\tthis._gainNode.gain.setValueAtTime(gain, time);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the source node at the given time.\n\t * @param time When to stop the source\n\t */\n\tstop(time?: Time): this {\n\t\tthis.log(\"stop\", time);\n\t\tthis._stopGain(this.toSeconds(time));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the source at the given time\n\t * @param  time When to stop the source\n\t */\n\tprotected _stopGain(time: Seconds): this {\n\t\tthis.assert(this._startTime !== -1, \"'start' must be called before 'stop'\");\n\t\t// cancel the previous stop\n\t\tthis.cancelStop();\n\n\t\t// the fadeOut time\n\t\tconst fadeOutTime = this.toSeconds(this._fadeOut);\n\n\t\t// schedule the stop callback\n\t\tthis._stopTime = this.toSeconds(time) + fadeOutTime;\n\t\tthis._stopTime = Math.max(this._stopTime, this.context.currentTime);\n\t\tif (fadeOutTime > 0) {\n\t\t\t// start the fade out curve at the given time\n\t\t\tif (this._curve === \"linear\") {\n\t\t\t\tthis._gainNode.gain.linearRampTo(0, fadeOutTime, time);\n\t\t\t} else {\n\t\t\t\tthis._gainNode.gain.targetRampTo(0, fadeOutTime, time);\n\t\t\t}\n\t\t} else {\n\t\t\t// stop any ongoing ramps, and set the value to 0\n\t\t\tthis._gainNode.gain.cancelAndHoldAtTime(time);\n\t\t\tthis._gainNode.gain.setValueAtTime(0, time);\n\t\t}\n\t\tthis.context.clearTimeout(this._timeout);\n\t\tthis._timeout = this.context.setTimeout(() => {\n\t\t\t// allow additional time for the exponential curve to fully decay\n\t\t\tconst additionalTail = this._curve === \"exponential\" ? fadeOutTime * 2 : 0;\n\t\t\tthis._stopSource(this.now() + additionalTail);\n\t\t\tthis._onended();\n\t\t}, this._stopTime - this.context.now());\n\t\treturn this;\n\t}\n\n\t/**\n\t * Invoke the onended callback\n\t */\n\tprotected _onended(): void {\n\t\tif (this.onended !== noOp) {\n\t\t\tthis.onended(this);\n\t\t\t// overwrite onended to make sure it only is called once\n\t\t\tthis.onended = noOp;\n\t\t\t// dispose when it's ended to free up for garbage collection\n\t\t\tsetTimeout(() => this.dispose(), 1000);\n\t\t}\n\t}\n\n\t/**\n\t *  Get the playback state at the given time\n\t */\n\tgetStateAtTime = function(time: Time): BasicPlaybackState {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._startTime !== -1 && computedTime >= this._startTime &&\n\t\t\t(this._stopTime === -1 || computedTime <= this._stopTime)) {\n\t\t\treturn \"started\";\n\t\t} else {\n\t\t\treturn \"stopped\";\n\t\t}\n\t};\n\n\t/**\n\t * Get the playback state at the current time\n\t */\n\tget state(): BasicPlaybackState {\n\t\treturn this.getStateAtTime(this.now());\n\t}\n\n\t/**\n\t *  Cancel a scheduled stop event\n\t */\n\tcancelStop(): this {\n\t\tthis.log(\"cancelStop\");\n\t\tthis.assert(this._startTime !== -1, \"Source is not started\");\n\t\t// cancel the stop envelope\n\t\tthis._gainNode.gain.cancelScheduledValues(this._startTime + this.sampleTime);\n\t\tthis.context.clearTimeout(this._timeout);\n\t\tthis._stopTime = -1;\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._gainNode.disconnect();\n\t\treturn this;\n\t}\n}\n","import { connect } from \"../../core/Connect\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { GainFactor, Positive, Seconds, Time } from \"../../core/type/Units\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp } from \"../../core/util/Interface\";\nimport { isDefined } from \"../../core/util/TypeCheck\";\nimport { OneShotSource, OneShotSourceCurve, OneShotSourceOptions } from \"../OneShotSource\";\n\nexport type ToneBufferSourceCurve = OneShotSourceCurve;\n\ninterface ToneBufferSourceOptions extends OneShotSourceOptions {\n\tbuffer: ToneAudioBuffer;\n\tcurve: ToneBufferSourceCurve;\n\tplaybackRate: Positive;\n\tfadeIn: Time;\n\tfadeOut: Time;\n\tloopStart: Time;\n\tloopEnd: Time;\n\tloop: boolean;\n\tonload: () => void;\n}\n\n/**\n *  Wrapper around the native BufferSourceNode.\n *  @param  buffer   The buffer to play\n *  @param  onended  The callback to invoke when the buffer is done playing.\n */\nexport class ToneBufferSource extends OneShotSource<ToneBufferSourceOptions> {\n\n\tname = \"ToneBufferSource\";\n\n\t/**\n\t *  The oscillator\n\t */\n\tprivate _source = this.context.createBufferSource();\n\tprotected _internalChannels = [this._source];\n\n\t/**\n\t *  The frequency of the oscillator\n\t */\n\treadonly playbackRate: Param<Positive>;\n\n\t/**\n\t * The private instance of the buffer object\n\t */\n\tprivate _buffer: ToneAudioBuffer;\n\n\t/**\n\t * indicators if the source has started/stopped\n\t */\n\tprivate _sourceStarted: boolean = false;\n\tprivate _sourceStopped: boolean = false;\n\n\tconstructor(buffer?: ToneAudioBuffer | AudioBuffer | string, onload?: () => void);\n\tconstructor(options?: Partial<ToneBufferSourceOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(ToneBufferSource.getDefaults(), arguments, [\"buffer\", \"onload\"]));\n\t\tconst options = optionsFromArguments(ToneBufferSource.getDefaults(), arguments, [\"buffer\", \"onload\"]);\n\n\t\tconnect(this._source, this._gainNode);\n\t\tthis._source.onended = () => this._stopSource();\n\n\t\t/**\n\t\t *  The playbackRate of the buffer\n\t\t */\n\t\tthis.playbackRate = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam : this._source.playbackRate,\n\t\t\tunits : \"positive\",\n\t\t\tvalue : options.playbackRate,\n\t\t});\n\n\t\t// set some values initially\n\t\tthis.loop = options.loop;\n\t\tthis.loopStart = options.loopStart;\n\t\tthis.loopEnd = options.loopEnd;\n\t\tthis._buffer = new ToneAudioBuffer(options.buffer, options.onload);\n\n\t\tthis._internalChannels.push(this._source);\n\t}\n\n\tstatic getDefaults(): ToneBufferSourceOptions {\n\t\treturn Object.assign(OneShotSource.getDefaults(), {\n\t\t\tbuffer: new ToneAudioBuffer(),\n\t\t\tloop: false,\n\t\t\tloopEnd : 0,\n\t\t\tloopStart : 0,\n\t\t\tonload: noOp,\n\t\t\tplaybackRate : 1,\n\t\t});\n\t}\n\n\t/**\n\t *  The fadeIn time of the amplitude envelope.\n\t */\n\tget fadeIn(): Time {\n\t\treturn this._fadeIn;\n\t}\n\tset fadeIn(t: Time) {\n\t\tthis._fadeIn = t;\n\t}\n\n\t/**\n\t *  The fadeOut time of the amplitude envelope.\n\t */\n\tget fadeOut(): Time {\n\t\treturn this._fadeOut;\n\t}\n\tset fadeOut(t: Time) {\n\t\tthis._fadeOut = t;\n\t}\n\n\t/**\n\t * The curve applied to the fades, either \"linear\" or \"exponential\"\n\t */\n\tget curve(): ToneBufferSourceCurve {\n\t\treturn this._curve;\n\t}\n\tset curve(t) {\n\t\tthis._curve = t;\n\t}\n\n\t/**\n\t *  Start the buffer\n\t *  @param  time When the player should start.\n\t *  @param  offset The offset from the beginning of the sample to start at.\n\t *  @param  duration How long the sample should play. If no duration\n\t *                   is given, it will default to the full length\n\t *                   of the sample (minus any offset)\n\t *  @param  gain  The gain to play the buffer back at.\n\t */\n\tstart(time?: Time, offset?: Time, duration?: Time, gain: GainFactor = 1): this {\n\t\tthis.assert(this.buffer.loaded, \"buffer is either not set or not loaded\");\n\t\tconst computedTime = this.toSeconds(time);\n\n\t\t// apply the gain envelope\n\t\tthis._startGain(computedTime, gain);\n\n\t\t// if it's a loop the default offset is the loopstart point\n\t\tif (this.loop) {\n\t\t\toffset = defaultArg(offset, this.loopStart);\n\t\t} else {\n\t\t\t// otherwise the default offset is 0\n\t\t\toffset = defaultArg(offset, 0);\n\t\t}\n\t\t// make sure the offset is not less than 0\n\t\tlet computedOffset = Math.max(this.toSeconds(offset), 0);\n\n\t\t// start the buffer source\n\t\tif (this.loop) {\n\t\t\t// modify the offset if it's greater than the loop time\n\t\t\tconst loopEnd = this.toSeconds(this.loopEnd) || this.buffer.duration;\n\t\t\tconst loopStart = this.toSeconds(this.loopStart);\n\t\t\tconst loopDuration = loopEnd - loopStart;\n\t\t\t// move the offset back\n\t\t\tif (computedOffset >= loopEnd) {\n\t\t\t\tcomputedOffset = ((computedOffset - loopStart) % loopDuration) + loopStart;\n\t\t\t}\n\t\t}\n\n\t\t// this.buffer.loaded would have return false if the AudioBuffer was undefined\n\t\tthis._source.buffer = this.buffer.get() as AudioBuffer;\n\t\tthis._source.loopEnd = this.toSeconds(this.loopEnd) || this.buffer.duration;\n\t\tif (computedOffset < this.buffer.duration) {\n\t\t\tthis._sourceStarted = true;\n\t\t\tthis._source.start(computedTime, computedOffset);\n\t\t}\n\n\t\t// if a duration is given, schedule a stop\n\t\tif (isDefined(duration)) {\n\t\t\tlet computedDur = this.toSeconds(duration);\n\t\t\t// make sure it's never negative\n\t\t\tcomputedDur = Math.max(computedDur, 0);\n\t\t\tthis.stop(computedTime + computedDur);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\tprotected _stopSource(time?: Seconds): void {\n\t\tif (!this._sourceStopped) {\n\t\t\tthis._sourceStopped = true;\n\t\t\tthis._source.stop(this.toSeconds(time));\n\t\t\tthis._onended();\n\t\t}\n\t}\n\n\t/**\n\t * If loop is true, the loop will start at this position.\n\t */\n\tget loopStart(): Time {\n\t\treturn this._source.loopStart;\n\t}\n\tset loopStart(loopStart: Time) {\n\t\tthis._source.loopStart = this.toSeconds(loopStart);\n\t}\n\n\t/**\n\t * If loop is true, the loop will end at this position.\n\t */\n\tget loopEnd(): Time {\n\t\treturn this._source.loopEnd;\n\t}\n\tset loopEnd(loopEnd: Time) {\n\t\tthis._source.loopEnd = this.toSeconds(loopEnd);\n\t}\n\n\t/**\n\t * The audio buffer belonging to the player.\n\t */\n\tget buffer(): ToneAudioBuffer {\n\t\treturn this._buffer;\n\t}\n\tset buffer(buffer: ToneAudioBuffer) {\n\t\tthis._buffer.set(buffer);\n\t}\n\n\t/**\n\t * If the buffer should loop once it's over.\n\t */\n\tget loop(): boolean {\n\t\treturn this._source.loop;\n\t}\n\tset loop(loop: boolean) {\n\t\tthis._source.loop = loop;\n\t\tif (this._sourceStarted) {\n\t\t\tthis.cancelStop();\n\t\t}\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._source.onended = null;\n\t\tthis._source.disconnect();\n\t\tthis._buffer.dispose();\n\t\tthis.playbackRate.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioBuffer } from \"../core/context/ToneAudioBuffer\";\nimport { Positive, Time } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Source, SourceOptions } from \"../source/Source\";\nimport { ToneBufferSource } from \"./buffer/BufferSource\";\nimport { OneShotSourceCurve } from \"./OneShotSource\";\n\ntype NoiseType = \"white\" | \"brown\" | \"pink\";\n\ninterface NoiseOptions extends SourceOptions {\n\ttype: NoiseType;\n\tplaybackRate: Positive;\n\tfadeIn: Time;\n\tfadeOut: Time;\n}\n\n/**\n * Noise is a noise generator. It uses looped noise buffers to save on performance.\n * Noise supports the noise types: \"pink\", \"white\", and \"brown\". Read more about\n * colors of noise on [Wikipedia](https://en.wikipedia.org/wiki/Colors_of_noise).\n *\n * @param type the noise type (white|pink|brown)\n * @example\n * //initialize the noise and start\n * var noise = new Noise(\"pink\").start();\n *\n * //make an autofilter to shape the noise\n * var autoFilter = new Tone.AutoFilter({\n * \t\"frequency\" : \"8m\",\n * \t\"min\" : 800,\n * \t\"max\" : 15000\n * }).connect(Tone.Master);\n *\n * //connect the noise\n * noise.connect(autoFilter);\n * //start the autofilter LFO\n * autoFilter.start()\n */\nexport class Noise extends Source<NoiseOptions> {\n\n\treadonly name = \"Noise\";\n\n\t/**\n\t * Private reference to the source\n\t */\n\tprivate _source: ToneBufferSource | null = null;\n\n\t/**\n\t * private reference to the type\n\t */\n\tprivate _type!: NoiseType;\n\n\t/**\n\t *  The playback rate of the noise. Affects\n\t *  the \"frequency\" of the noise.\n\t */\n\tprivate _playbackRate: Positive;\n\n\t/**\n\t *  The fadeIn time of the amplitude envelope.\n\t */\n\tprotected _fadeIn: Time;\n\n\t/**\n\t *  The fadeOut time of the amplitude envelope.\n\t */\n\tprotected _fadeOut: Time;\n\n\tconstructor(type?: NoiseType);\n\t// tslint:disable-next-line: unified-signatures\n\tconstructor(options?: Partial<NoiseOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Noise.getDefaults(), arguments, [\"type\"]));\n\t\tconst options = optionsFromArguments(Noise.getDefaults(), arguments, [\"type\"]);\n\n\t\tthis._playbackRate = options.playbackRate;\n\t\tthis.type = options.type;\n\t\tthis._fadeIn = options.fadeIn;\n\t\tthis._fadeOut = options.fadeOut;\n\t}\n\n\tstatic getDefaults(): NoiseOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tfadeIn: 0,\n\t\t\tfadeOut: 0,\n\t\t\tplaybackRate: 1,\n\t\t\ttype: \"white\" as NoiseType,\n\t\t});\n\t}\n\n\t/**\n\t * The type of the noise. Can be \"white\", \"brown\", or \"pink\".\n\t * @example\n\t * noise.type = \"white\";\n\t */\n\tget type(): NoiseType {\n\t\treturn this._type;\n\t}\n\tset type(type: NoiseType) {\n\t\tthis.assert(type in _noiseBuffers, \"Noise: invalid type: \" + type);\n\t\tif (this._type !== type) {\n\t\t\tthis._type = type;\n\t\t\t// if it's playing, stop and restart it\n\t\t\tif (this.state === \"started\") {\n\t\t\t\tconst now = this.now();\n\t\t\t\tthis._stop(now);\n\t\t\t\tthis._start(now);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *  The playback rate of the noise. Affects\n\t *  the \"frequency\" of the noise.\n\t */\n\tget playbackRate(): Positive {\n\t\treturn this._playbackRate;\n\t}\n\tset playbackRate(rate: Positive) {\n\t\tthis._playbackRate = rate;\n\t\tif (this._source) {\n\t\t\tthis._source.playbackRate.value = rate;\n\t\t}\n\t}\n\n\t/**\n\t *  internal start method\n\t */\n\tprotected _start(time?: Time): void {\n\t\tconst buffer = _noiseBuffers[this._type];\n\t\tthis._source = new ToneBufferSource({\n\t\t\tbuffer,\n\t\t\tcontext: this.context,\n\t\t\tfadeIn: this._fadeIn,\n\t\t\tfadeOut: this._fadeOut,\n\t\t\tloop: true,\n\t\t\tonended: () => this.onstop(this),\n\t\t\tplaybackRate: this._playbackRate,\n\t\t}).connect(this.output);\n\t\tthis._source.start(this.toSeconds(time), Math.random() * (buffer.duration - 0.001));\n\t}\n\n\t/**\n\t *  internal stop method\n\t *\n\t *  @param {Time} time\n\t *  @private\n\t */\n\tprotected _stop(time?: Time): void {\n\t\tif (this._source) {\n\t\t\tthis._source.stop(this.toSeconds(time));\n\t\t\tthis._source = null;\n\t\t}\n\t}\n\n\t/**\n\t *  The fadeIn time of the amplitude envelope.\n\t */\n\tget fadeIn(): Time {\n\t\treturn this._fadeIn;\n\t}\n\tset fadeIn(time) {\n\t\tthis._fadeIn = time;\n\t\tif (this._source) {\n\t\t\tthis._source.fadeIn = this._fadeIn;\n\t\t}\n\t}\n\n\t/**\n\t *  The fadeOut time of the amplitude envelope.\n\t */\n\tget fadeOut(): Time {\n\t\treturn this._fadeOut;\n\t}\n\tset fadeOut(time) {\n\t\tthis._fadeOut = time;\n\t\tif (this._source) {\n\t\t\tthis._source.fadeOut = this._fadeOut;\n\t\t}\n\t}\n\n\t/**\n\t * Restarts the noise.\n\t * @param  time When to restart the noise.\n\t */\n\trestart(time?: Time): this {\n\t\t// TODO could be optimized by cancelling the buffer source 'stop'\n\t\t// stop and restart\n\t\tthis._stop(time);\n\t\tthis._start(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (this._source) {\n\t\t\tthis._source.disconnect();\n\t\t}\n\t\treturn this;\n\t}\n}\n\n///////////////////////////////////////////////////////////////////////////\n// THE NOISE BUFFERS\n///////////////////////////////////////////////////////////////////////////\n\n// Noise buffer stats\nconst BUFFER_LENGTH = 44100 * 5;\nconst NUM_CHANNELS = 2;\n\n/**\n * The cached noise buffers\n */\ninterface NoiseCache {\n\t[key: string]: ToneAudioBuffer | null;\n}\n\n/**\n * Cache the noise buffers\n */\nconst _noiseCache: NoiseCache = {\n\tbrown: null,\n\tpink: null,\n\twhite: null,\n};\n\n/**\n * The noise arrays. Generated on initialization.\n * borrowed heavily from https://github.com/zacharydenton/noise.js\n * (c) 2013 Zach Denton (MIT)\n */\nconst _noiseBuffers = {\n\tget brown(): ToneAudioBuffer {\n\t\tif (!_noiseCache.brown) {\n\t\t\tconst buffer: Float32Array[] = [];\n\t\t\tfor (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {\n\t\t\t\tconst channel = new Float32Array(BUFFER_LENGTH);\n\t\t\t\tbuffer[channelNum] = channel;\n\t\t\t\tlet lastOut = 0.0;\n\t\t\t\tfor (let i = 0; i < BUFFER_LENGTH; i++) {\n\t\t\t\t\tconst white = Math.random() * 2 - 1;\n\t\t\t\t\tchannel[i] = (lastOut + (0.02 * white)) / 1.02;\n\t\t\t\t\tlastOut = channel[i];\n\t\t\t\t\tchannel[i] *= 3.5; // (roughly) compensate for gain\n\t\t\t\t}\n\t\t\t}\n\t\t\t_noiseCache.brown = new ToneAudioBuffer().fromArray(buffer);\n\t\t}\n\t\treturn _noiseCache.brown;\n\t},\n\n\tget pink(): ToneAudioBuffer {\n\t\tif (!_noiseCache.pink) {\n\t\t\tconst buffer: Float32Array[] = [];\n\t\t\tfor (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {\n\t\t\t\tconst channel = new Float32Array(BUFFER_LENGTH);\n\t\t\t\tbuffer[channelNum] = channel;\n\t\t\t\t// tslint:disable-next-line: one-variable-per-declaration\n\t\t\t\tlet b0, b1, b2, b3, b4, b5, b6;\n\t\t\t\tb0 = b1 = b2 = b3 = b4 = b5 = b6 = 0.0;\n\t\t\t\tfor (let i = 0; i < BUFFER_LENGTH; i++) {\n\t\t\t\t\tconst white = Math.random() * 2 - 1;\n\t\t\t\t\tb0 = 0.99886 * b0 + white * 0.0555179;\n\t\t\t\t\tb1 = 0.99332 * b1 + white * 0.0750759;\n\t\t\t\t\tb2 = 0.96900 * b2 + white * 0.1538520;\n\t\t\t\t\tb3 = 0.86650 * b3 + white * 0.3104856;\n\t\t\t\t\tb4 = 0.55000 * b4 + white * 0.5329522;\n\t\t\t\t\tb5 = -0.7616 * b5 - white * 0.0168980;\n\t\t\t\t\tchannel[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;\n\t\t\t\t\tchannel[i] *= 0.11; // (roughly) compensate for gain\n\t\t\t\t\tb6 = white * 0.115926;\n\t\t\t\t}\n\t\t\t}\n\t\t\t_noiseCache.pink = new ToneAudioBuffer().fromArray(buffer);\n\t\t}\n\t\treturn _noiseCache.pink;\n\t},\n\n\tget white(): ToneAudioBuffer {\n\t\tif (!_noiseCache.white) {\n\t\t\tconst buffer: Float32Array[] = [];\n\t\t\tfor (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {\n\t\t\t\tconst channel = new Float32Array(BUFFER_LENGTH);\n\t\t\t\tbuffer[channelNum] = channel;\n\t\t\t\tfor (let i = 0; i < BUFFER_LENGTH; i++) {\n\t\t\t\t\tchannel[i] = Math.random() * 2 - 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t_noiseCache.white = new ToneAudioBuffer().fromArray(buffer);\n\t\t}\n\t\treturn _noiseCache.white;\n\t},\n};\n","import { AbstractParam } from \"../core/context/AbstractParam\";\nimport { Param } from \"../core/context/Param\";\nimport { InputNode, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { connect } from \"../core/context/ToneAudioNode\";\nimport { Time, Unit, UnitName } from \"../core/type/Units\";\nimport { isAudioParam } from \"../core/util/AdvancedTypeCheck\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\n\nexport interface SignalOptions<Type> extends ToneAudioNodeOptions {\n\tvalue: Type;\n\tunits: UnitName;\n\tconvert: boolean;\n}\n\n/**\n * A signal is an audio-rate value. Tone.Signal is a core component of the library.\n * Unlike a number, Signals can be scheduled with sample-level accuracy. Tone.Signal\n * has all of the methods available to native Web Audio\n * [AudioParam](http://webaudio.github.io/web-audio-api/#the-audioparam-interface)\n * as well as additional conveniences. Read more about working with signals\n * [here](https://github.com/Tonejs/Tone.js/wiki/Signals).\n *  @param value Initial value of the signal\n *  @param units unit The units the signal is in.\n * @example\n * const signal = new Tone.Signal(10);\n */\nexport class Signal<Type extends Unit = number> extends ToneAudioNode<SignalOptions<any>>\nimplements AbstractParam<Type> {\n\n\treadonly name: string = \"Signal\";\n\n\t/**\n\t * Indicates if the value should be overridden on connection.\n\t */\n\treadonly override: boolean = true;\n\n\t/**\n\t * The constant source node which generates the signal\n\t */\n\tprotected _constantSource: ConstantSourceNode = this.context.createConstantSource();\n\treadonly output: OutputNode = this._constantSource;\n\tprotected _param: Param<Type>;\n\treadonly input: InputNode;\n\n\tconstructor(value?: Type, units?: UnitName);\n\tconstructor(options?: Partial<SignalOptions<Type>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]));\n\n\t\tconst options = optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]) as SignalOptions<Type>;\n\n\t\tthis._constantSource.start(0);\n\t\tthis.input = this._param = new Param({\n\t\t\tcontext: this.context,\n\t\t\tconvert: options.convert,\n\t\t\tparam: this._constantSource.offset,\n\t\t\tunits: options.units,\n\t\t\tvalue: options.value,\n\t\t});\n\t}\n\n\tstatic getDefaults(): SignalOptions<any> {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tchannelCount: 1,\n\t\t\tchannelCountMode: \"explicit\",\n\t\t\tchannelInterpretation: \"discrete\",\n\t\t\tconvert: true,\n\t\t\tunits: \"number\" as UnitName,\n\t\t\tvalue: 0,\n\t\t}) as SignalOptions<any>;\n\t}\n\n\tconnect(destination: InputNode, outputNum: number = 0, inputNum: number = 0): this {\n\t\tconnectSignal(this, destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._param.dispose();\n\t\tthis._constantSource.stop(this.now());\n\t\tthis._constantSource.disconnect();\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// ABSTRACT PARAM INTERFACE\n\t// just a proxy for the ConstantSourceNode's offset AudioParam\n\t// all docs are generated from AbstractParam.ts\n\t///////////////////////////////////////////////////////////////////////////\n\n\tsetValueAtTime(value: Type, time: Time): this {\n\t\tthis._param.setValueAtTime(value, time);\n\t\treturn this;\n\t}\n\tgetValueAtTime(time: Time): Type {\n\t\treturn this._param.getValueAtTime(time);\n\t}\n\tsetRampPoint(time: Time): this {\n\t\tthis._param.setRampPoint(time);\n\t\treturn this;\n\t}\n\tlinearRampToValueAtTime(value: Type, time: Time): this {\n\t\tthis._param.linearRampToValueAtTime(value, time);\n\t\treturn this;\n\t}\n\texponentialRampToValueAtTime(value: Type, time: Time): this {\n\t\tthis._param.exponentialRampToValueAtTime(value, time);\n\t\treturn this;\n\t}\n\texponentialRampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tthis._param.exponentialRampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\tlinearRampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tthis._param.linearRampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\ttargetRampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tthis._param.targetRampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\texponentialApproachValueAtTime(value: Type, time: Time, rampTime: Time): this {\n\t\tthis._param.exponentialApproachValueAtTime(value, time, rampTime);\n\t\treturn this;\n\t}\n\tsetTargetAtTime(value: Type, startTime: Time, timeConstant: number): this {\n\t\tthis._param.setTargetAtTime(value, startTime, timeConstant);\n\t\treturn this;\n\t}\n\tsetValueCurveAtTime(values: Type[], startTime: Time, duration: Time, scaling?: number): this {\n\t\tthis._param.setValueCurveAtTime(values, startTime, duration, scaling);\n\t\treturn this;\n\t}\n\tcancelScheduledValues(time: Time): this {\n\t\tthis._param.cancelScheduledValues(time);\n\t\treturn this;\n\t}\n\tcancelAndHoldAtTime(time: Time): this {\n\t\tthis._param.cancelAndHoldAtTime(time);\n\t\treturn this;\n\t}\n\trampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tthis._param.rampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\n\tget value(): Type {\n\t\treturn this._param.value;\n\t}\n\tset value(value: Type) {\n\t\tthis._param.value = value;\n\t}\n\n\tget convert(): boolean {\n\t\treturn this._param.convert;\n\t}\n\tset convert(convert: boolean) {\n\t\tthis._param.convert = convert;\n\t}\n\n\tget units(): UnitName {\n\t\treturn this._param.units;\n\t}\n\n\tget overridden(): boolean {\n\t\treturn this._param.overridden;\n\t}\n\tset overridden(overridden: boolean) {\n\t\tthis._param.overridden = overridden;\n\t}\n\n\tget maxValue(): number {\n\t\treturn this._param.maxValue;\n\t}\n\tget minValue(): number {\n\t\treturn this._param.minValue;\n\t}\n}\n\n/**\n * When connecting from a signal, it's necessary to zero out the node destination\n * node if that node is also a signal. If the destination is not 0, then the values\n * will be summed. This method insures that the output of the destination signal will\n * be the same as the source signal, making the destination signal a pass through node.\n * @param signal The output signal to connect from\n * @param destination the destination to connect to\n * @param outputNum the optional output number\n * @param inputNum the input number\n */\nexport function connectSignal(signal: OutputNode, destination: InputNode, outputNum?: number, inputNum?: number): void {\n\tif (destination instanceof Param || isAudioParam(destination) ||\n\t\t(destination instanceof Signal && destination.override)) {\n\t\t// cancel changes\n\t\tdestination.cancelScheduledValues(0);\n\t\t// reset the value\n\t\tdestination.setValueAtTime(0, 0);\n\t\t// mark the value as overridden\n\t\tif (destination instanceof Signal) {\n\t\t\tdestination.overridden = true;\n\t\t}\n\t}\n\tconnect(signal, destination, outputNum, inputNum);\n}\n","import { connect } from \"../../core/Connect\";\nimport { Param } from \"../../core/context/Param\";\nimport { Cents, Frequency, Seconds, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { OneShotSource, OneShotSourceOptions } from \"../OneShotSource\";\n\ninterface ToneOscillatorNodeOptions extends OneShotSourceOptions {\n\tfrequency: Frequency;\n\tdetune: Cents;\n\ttype: OscillatorType;\n}\n\n/**\n * Wrapper around the native fire-and-forget OscillatorNode.\n * Adds the ability to reschedule the stop method.\n * ***[Tone.Oscillator](Oscillator) is better for most use-cases***\n *  @extends {Tone.AudioNode}\n *  @param  {AudioBuffer|Tone.Buffer}  buffer   The buffer to play\n *  @param  {Function}  onload  The callback to invoke when the\n *                               buffer is done playing.\n */\nexport class ToneOscillatorNode extends OneShotSource<ToneOscillatorNodeOptions> {\n\n\treadonly name = \"ToneOscillatorNode\";\n\n\t/**\n\t *  The oscillator\n\t */\n\tprivate _oscillator = this.context.createOscillator();\n\tprotected _internalChannels = [this._oscillator];\n\n\t/**\n\t *  The frequency of the oscillator\n\t */\n\treadonly frequency: Param<Frequency>;\n\n\t/**\n\t *  The detune of the oscillator\n\t */\n\treadonly detune: Param<Cents>;\n\n\tconstructor(options?: Partial<ToneOscillatorNodeOptions>);\n\tconstructor(\n\t\tfrequency: Frequency,\n\t\ttype: OscillatorType,\n\t);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(ToneOscillatorNode.getDefaults(), arguments, [\"frequency\", \"type\"]));\n\t\tconst options = optionsFromArguments(ToneOscillatorNode.getDefaults(), arguments, [\"frequency\", \"type\"]);\n\n\t\tconnect(this._oscillator, this._gainNode);\n\n\t\tthis.type = options.type;\n\n\t\tthis.frequency = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam : this._oscillator.frequency,\n\t\t\tunits : \"frequency\",\n\t\t\tvalue : options.frequency,\n\t\t});\n\n\t\tthis.detune = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam : this._oscillator.detune,\n\t\t\tunits : \"cents\",\n\t\t\tvalue : options.detune,\n\t\t});\n\t}\n\n\tstatic getDefaults(): ToneOscillatorNodeOptions {\n\t\treturn Object.assign(OneShotSource.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tfrequency: 440,\n\t\t\ttype: \"sine\" as OscillatorType,\n\t\t});\n\t}\n\n\t/**\n\t * Start the oscillator node at the given time\n\t * @param  time When to start the oscillator\n\t */\n\tstart(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis.log(\"start\", computedTime);\n\t\tthis._startGain(computedTime);\n\t\tthis._oscillator.start(computedTime);\n\t\treturn this;\n\t}\n\n\tprotected _stopSource(time?: Seconds): void {\n\t\tthis._oscillator.stop(time);\n\t}\n\n\t/**\n\t * Sets an arbitrary custom periodic waveform given a PeriodicWave.\n\t * @param  periodicWave PeriodicWave should be created with context.createPeriodicWave\n\t */\n\tsetPeriodicWave(periodicWave: PeriodicWave): this {\n\t\tthis._oscillator.setPeriodicWave(periodicWave);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The oscillator type. Either 'sine', 'sawtooth', 'square', or 'triangle'\n\t */\n\tget type(): OscillatorType {\n\t\treturn this._oscillator.type;\n\t}\n\tset type(type: OscillatorType) {\n\t\tthis._oscillator.type = type;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (this.state === \"started\") {\n\t\t\tthis.stop();\n\t\t}\n\t\tthis._oscillator.disconnect();\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\treturn this;\n\t}\n}\n","import { AudioRange, Cents, Degrees, Frequency, Radians, Time } from \"../../core/type/Units\";\nimport { deepEquals, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp, readOnly } from \"../../core/util/Interface\";\nimport { isDefined } from \"../../core/util/TypeCheck\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { ToneOscillatorConstructorOptions, ToneOscillatorInterface,\n\tToneOscillatorOptions, ToneOscillatorType } from \"./OscillatorInterface\";\nimport { ToneOscillatorNode } from \"./OscillatorNode\";\n\n/**\n *  Oscillator supports a number of features including\n *  phase rotation, multiple oscillator types (see Oscillator.type),\n *  and Transport syncing (see Oscillator.syncFrequency).\n *\n *  @param frequency Starting frequency\n *  @param type The oscillator type. Read more about type below.\n *  @example\n * //make and start a 440hz sine tone\n * var osc = new Oscillator(440, \"sine\").toDestination().start();\n */\nexport class Oscillator extends Source<ToneOscillatorOptions> implements ToneOscillatorInterface {\n\n\tname = \"Oscillator\";\n\n\t/**\n\t *  the main oscillator\n\t */\n\tprivate _oscillator: ToneOscillatorNode | null = null;\n\n\t/**\n\t *  The frequency control.\n\t */\n\tfrequency: Signal<Frequency>;\n\n\t/**\n\t *  The detune control signal.\n\t */\n\tdetune: Signal<Cents>;\n\n\t/**\n\t *  the periodic wave\n\t */\n\tprivate _wave?: PeriodicWave;\n\n\t/**\n\t *  The partials of the oscillator\n\t */\n\tprivate _partials: number[];\n\n\t/**\n\t *  The number of partials to limit or extend the periodic wave by\n\t */\n\tprivate _partialCount: number;\n\n\t/**\n\t *  the phase of the oscillator between 0 - 360\n\t */\n\tprivate _phase!: Radians;\n\n\t/**\n\t *  the type of the oscillator\n\t *  @type {string}\n\t *  @private\n\t */\n\tprivate _type;\n\n\tconstructor(options?: Partial<ToneOscillatorConstructorOptions>)\n\tconstructor(frequency?: Frequency, type?: ToneOscillatorType);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Oscillator.getDefaults(), arguments, [\"frequency\", \"type\"]));\n\t\tconst options = optionsFromArguments(Oscillator.getDefaults(), arguments, [\"frequency\", \"type\"]);\n\n\t\tthis.frequency = new Signal<Frequency>({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t});\n\t\treadOnly(this, \"frequency\");\n\n\t\tthis.detune = new Signal<Cents>({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune,\n\t\t});\n\t\treadOnly(this, \"detune\");\n\n\t\tthis._partials = options.partials;\n\t\tthis._partialCount = options.partialCount;\n\t\tthis._type = options.type;\n\n\t\tif (options.partialCount && options.type !== \"custom\") {\n\t\t\tthis._type = this.baseType + options.partialCount.toString();\n\t\t}\n\t\tthis.phase = options.phase;\n\t}\n\n\tstatic getDefaults(): ToneOscillatorOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tfrequency: 440,\n\t\t\tpartialCount: 0,\n\t\t\tpartials: [],\n\t\t\tphase: 0,\n\t\t\ttype: \"sine\",\n\t\t}) as ToneOscillatorOptions;\n\t}\n\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _start(time?: Time): void {\n\t\tconst computedTime = this.toSeconds(time);\n\t\t// new oscillator with previous values\n\t\tconst oscillator = new ToneOscillatorNode({\n\t\t\tcontext: this.context,\n\t\t\tonended: () => this.onstop(this),\n\t\t});\n\t\tthis._oscillator = oscillator;\n\t\tif (this._wave) {\n\t\t\tthis._oscillator.setPeriodicWave(this._wave);\n\t\t} else {\n\t\t\tthis._oscillator.type = this._type;\n\t\t}\n\t\t// connect the control signal to the oscillator frequency & detune\n\t\tthis._oscillator.connect(this.output);\n\t\tthis.frequency.connect(this._oscillator.frequency);\n\t\tthis.detune.connect(this._oscillator.detune);\n\n\t\t// start the oscillator\n\t\tthis._oscillator.start(computedTime);\n\t}\n\n\t/**\n\t *  stop the oscillator\n\t */\n\tprotected _stop(time?: Time): void {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._oscillator) {\n\t\t\tthis._oscillator.stop(computedTime);\n\t\t}\n\t}\n\n\t/**\n\t * Restart the oscillator. Does not stop the oscillator, but instead\n\t * just cancels any scheduled 'stop' from being invoked.\n\t */\n\trestart(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis.log(\"restart\", computedTime);\n\t\tif (this._oscillator) {\n\t\t\tthis._oscillator.cancelStop();\n\t\t}\n\t\tthis._state.cancel(computedTime);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Sync the signal to the Transport's bpm. Any changes to the transports bpm,\n\t *  will also affect the oscillators frequency.\n\t *  @example\n\t * Tone.Transport.bpm.value = 120;\n\t * osc.frequency.value = 440;\n\t * //the ration between the bpm and the frequency will be maintained\n\t * osc.syncFrequency();\n\t * Tone.Transport.bpm.value = 240;\n\t * // the frequency of the oscillator is doubled to 880\n\t */\n\tsyncFrequency(): this {\n\t\tthis.context.transport.syncSignal(this.frequency);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Unsync the oscillator's frequency from the Transport.\n\t *  See Oscillator.syncFrequency\n\t */\n\tunsyncFrequency(): this {\n\t\tthis.context.transport.unsyncSignal(this.frequency);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Cache the periodic waves to avoid having to redo computations\n\t */\n\tprivate static _periodicWaveCache: Array<{\n\t\tpartials: number[];\n\t\tphase: number;\n\t\ttype: string;\n\t\tpartialCount: number;\n\t\treal: Float32Array,\n\t\timag: Float32Array,\n\t}> = [];\n\n\t/**\n\t * Get a cached periodic wave. Avoids having to recompute\n\t * the oscillator values when they have already been computed\n\t * with the same values.\n\t */\n\tprivate _getCachedPeriodicWave(): [Float32Array, Float32Array] | undefined {\n\t\tif (this._type === \"custom\") {\n\t\t\tconst oscProps = Oscillator._periodicWaveCache.find(description => {\n\t\t\t\treturn  description.phase === this._phase &&\n\t\t\t\t\tdeepEquals(description.partials, this._partials);\n\t\t\t});\n\t\t\treturn oscProps && [oscProps.real, oscProps.imag];\n\t\t} else {\n\t\t\tconst oscProps = Oscillator._periodicWaveCache.find(description => {\n\t\t\t\treturn  description.type === this._type &&\n\t\t\t\t\tdescription.phase === this._phase;\n\t\t\t});\n\t\t\tthis._partialCount = oscProps ? oscProps.partialCount : this._partialCount;\n\t\t\treturn oscProps && [oscProps.real, oscProps.imag];\n\t\t}\n\t}\n\n\t/* tslint:disable */\n\t/**\n\t * The type of the oscillator: either sine, square, triangle, or sawtooth. Also capable of\n\t * setting the first x number of partials of the oscillator. For example: \"sine4\" would\n\t * set be the first 4 partials of the sine wave and \"triangle8\" would set the first\n\t * 8 partials of the triangle wave.\n\t * <br><br>\n\t * Uses PeriodicWave internally even for native types so that it can set the phase.\n\t * PeriodicWave equations are from the\n\t * [Webkit Web Audio implementation](https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/modules/webaudio/PeriodicWave.cpp&sq=package:chromium).\n\t *\n\t * @memberOf Oscillator#\n\t * @type {string}\n\t * @name type\n\t * @example\n\t * //set it to a square wave\n\t * osc.type = \"square\";\n\t * @example\n\t * //set the first 6 partials of a sawtooth wave\n\t * osc.type = \"sawtooth6\";\n\t */\n\t/* tslint:enable */\n\tget type(): ToneOscillatorType {\n\t\treturn this._type;\n\t}\n\tset type(type: ToneOscillatorType) {\n\t\tthis._type = type;\n\t\tconst isBasicType = [\"sine\", \"square\", \"sawtooth\", \"triangle\"].indexOf(type) !== -1;\n\t\tif (this._phase === 0 && isBasicType) {\n\t\t\tthis._wave = undefined;\n\t\t\tthis._partialCount = 0;\n\t\t\t// just go with the basic approach\n\t\t\tif (this._oscillator !== null) {\n\t\t\t\t// already tested that it's a basic type\n\t\t\t\tthis._oscillator.type = type as OscillatorType;\n\t\t\t}\n\t\t} else {\n\t\t\t// first check if the value is cached\n\t\t\tconst cache = this._getCachedPeriodicWave();\n\t\t\tif (isDefined(cache)) {\n\t\t\t\tconst [real, imag] = cache;\n\t\t\t\tthis._wave = this.context.createPeriodicWave(real, imag);\n\t\t\t\tif (this._oscillator !== null) {\n\t\t\t\t\tthis._oscillator.setPeriodicWave(this._wave);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst [real, imag] = this._getRealImaginary(type, this._phase);\n\t\t\t\tconst periodicWave = this.context.createPeriodicWave(real, imag);\n\t\t\t\tthis._wave = periodicWave;\n\t\t\t\tif (this._oscillator !== null) {\n\t\t\t\t\tthis._oscillator.setPeriodicWave(this._wave);\n\t\t\t\t}\n\t\t\t\t// set the cache\n\t\t\t\tOscillator._periodicWaveCache.push({\n\t\t\t\t\timag,\n\t\t\t\t\tpartialCount: this._partialCount,\n\t\t\t\t\tpartials: this._partials,\n\t\t\t\t\tphase: this._phase,\n\t\t\t\t\treal,\n\t\t\t\t\ttype: this._type,\n\t\t\t\t});\n\t\t\t\tif (Oscillator._periodicWaveCache.length > 100) {\n\t\t\t\t\tOscillator._periodicWaveCache.shift();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * The oscillator type without the partialsCount appended to the end\n\t * @example\n\t * osc.type = 'sine2'\n\t * osc.baseType //'sine'\n\t * osc.partialCount = 2\n\t */\n\tget baseType(): OscillatorType {\n\t\treturn this._type.replace(this.partialCount, \"\");\n\t}\n\tset baseType(baseType: OscillatorType) {\n\t\tif (this.partialCount && this._type !== \"custom\" && baseType !== \"custom\") {\n\t\t\tthis.type = baseType + this.partialCount as ToneOscillatorType;\n\t\t} else {\n\t\t\tthis.type = baseType;\n\t\t}\n\t}\n\n\t/**\n\t * 'partialCount' offers an alternative way to set the number of used partials.\n\t * When partialCount is 0, the maximum number of partials are used when representing\n\t * the waveform using the periodicWave. When 'partials' is set, this value is\n\t * not settable, but equals the length of the partials array.\n\t * @example\n\t * osc.type = 'sine'\n\t * osc.partialCount = 3\n\t * //is equivalent to\n\t * osc.type = 'sine3'\n\t */\n\tget partialCount(): number {\n\t\treturn this._partialCount;\n\t}\n\tset partialCount(p: number) {\n\t\tlet type = this._type;\n\t\tconst partial = /^(sine|triangle|square|sawtooth)(\\d+)$/.exec(this._type);\n\t\tif (partial) {\n\t\t\ttype = partial[1];\n\t\t}\n\t\tif (this._type !== \"custom\") {\n\t\t\tif (p === 0) {\n\t\t\t\tthis.type = type;\n\t\t\t} else {\n\t\t\t\tthis.type = type + p.toString() as ToneOscillatorType;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *  Get the object's attributes. Given no arguments get\n\t *  will return all available object properties and their corresponding\n\t *  values.\n\t */\n\tget(): ToneOscillatorOptions {\n\t\tconst values = super.get();\n\t\tif (values.type !== \"custom\") {\n\t\t\tdelete values.partials;\n\t\t}\n\t\treturn values;\n\t}\n\n\t/**\n\t *  Returns the real and imaginary components based\n\t *  on the oscillator type.\n\t *  @returns [real: Float32Array, imaginary: Float32Array]\n\t *  @private\n\t */\n\tprivate _getRealImaginary(type: ToneOscillatorType, phase: Radians): Float32Array[] {\n\t\tconst fftSize = 4096;\n\t\tlet periodicWaveSize = fftSize / 2;\n\n\t\tconst real = new Float32Array(periodicWaveSize);\n\t\tconst imag = new Float32Array(periodicWaveSize);\n\n\t\tlet partialCount = 1;\n\t\tif (type === \"custom\") {\n\t\t\tpartialCount = this._partials.length + 1;\n\t\t\tthis._partialCount = this._partials.length;\n\t\t\tperiodicWaveSize = partialCount;\n\t\t\t// if the partial count is 0, don't bother doing any computation\n\t\t\tif (this._partials.length === 0 ) {\n\t\t\t\treturn [real, imag];\n\t\t\t}\n\t\t} else {\n\t\t\tconst partial = /^(sine|triangle|square|sawtooth)(\\d+)$/.exec(type);\n\t\t\tif (partial) {\n\t\t\t\tpartialCount = parseInt(partial[2], 10) + 1;\n\t\t\t\tthis._partialCount = parseInt(partial[2], 10);\n\t\t\t\ttype = partial[1] as ToneOscillatorType;\n\t\t\t\tpartialCount = Math.max(partialCount, 2);\n\t\t\t\tperiodicWaveSize = partialCount;\n\t\t\t} else {\n\t\t\t\tthis._partialCount = 0;\n\t\t\t}\n\t\t\tthis._partials = [];\n\t\t}\n\n\t\t// tslint:disable: no-bitwise\n\t\tfor (let n = 1; n < periodicWaveSize; ++n) {\n\t\t\tconst piFactor = 2 / (n * Math.PI);\n\t\t\tlet b;\n\t\t\tswitch (type) {\n\t\t\t\tcase \"sine\":\n\t\t\t\t\tb = (n <= partialCount) ? 1 : 0;\n\t\t\t\t\tthis._partials[n - 1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"square\":\n\t\t\t\t\tb = (n & 1) ? 2 * piFactor : 0;\n\t\t\t\t\tthis._partials[n - 1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"sawtooth\":\n\t\t\t\t\tb = piFactor * ((n & 1) ? 1 : -1);\n\t\t\t\t\tthis._partials[n - 1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"triangle\":\n\t\t\t\t\tif (n & 1) {\n\t\t\t\t\t\tb = 2 * (piFactor * piFactor) * ((((n - 1) >> 1) & 1) ? -1 : 1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tb = 0;\n\t\t\t\t\t}\n\t\t\t\t\tthis._partials[n - 1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"custom\":\n\t\t\t\t\tb = this._partials[n - 1];\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new TypeError(\"Oscillator: invalid type: \" + type);\n\t\t\t}\n\t\t\tif (b !== 0) {\n\t\t\t\treal[n] = -b * Math.sin(phase * n);\n\t\t\t\timag[n] = b * Math.cos(phase * n);\n\t\t\t} else {\n\t\t\t\treal[n] = 0;\n\t\t\t\timag[n] = 0;\n\t\t\t}\n\t\t}\n\t\treturn [real, imag];\n\t}\n\n\t/**\n\t *  Compute the inverse FFT for a given phase.\n\t */\n\tprivate _inverseFFT(real: Float32Array, imag: Float32Array, phase: Radians): number {\n\t\tlet sum = 0;\n\t\tconst len = real.length;\n\t\tfor (let i = 0; i < len; i++) {\n\t\t\tsum += real[i] * Math.cos(i * phase) + imag[i] * Math.sin(i * phase);\n\t\t}\n\t\treturn sum;\n\t}\n\n\t/**\n\t *  Returns the initial value of the oscillator.\n\t */\n\tprotected _getInitialValue(): AudioRange {\n\t\tconst [real, imag] = this._getRealImaginary(this._type, 0);\n\t\tlet maxValue = 0;\n\t\tconst twoPi = Math.PI * 2;\n\t\t// check for peaks in 8 places\n\t\tfor (let i = 0; i < 8; i++) {\n\t\t\tmaxValue = Math.max(this._inverseFFT(real, imag, (i / 8) * twoPi), maxValue);\n\t\t}\n\t\treturn -this._inverseFFT(real, imag, this._phase) / maxValue;\n\t}\n\n\t/**\n\t * The partials of the waveform. A partial represents\n\t * the amplitude at a harmonic. The first harmonic is the\n\t * fundamental frequency, the second is the octave and so on\n\t * following the harmonic series.\n\t * Setting this value will automatically set the type to \"custom\".\n\t * The value is an empty array when the type is not \"custom\".\n\t * @example\n\t * osc.partials = [1, 0.2, 0.01];\n\t */\n\tget partials(): number[] {\n\t\treturn this._partials;\n\t}\n\tset partials(partials: number[]) {\n\t\tthis._partials = partials;\n\t\tif (partials.length) {\n\t\t\tthis.type = \"custom\";\n\t\t}\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t * @example\n\t * osc.phase = 180; //flips the phase of the oscillator\n\t */\n\tget phase(): Degrees {\n\t\treturn this._phase * (180 / Math.PI);\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._phase = phase * Math.PI / 180;\n\t\t// reset the type\n\t\tthis.type = this._type;\n\t}\n\n\t/**\n\t *  Dispose and disconnect.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (this._oscillator !== null) {\n\t\t\tthis._oscillator.dispose();\n\t\t}\n\t\tthis._wave = undefined;\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\treturn this;\n\t}\n}\n","import { optionsFromArguments } from \"..//core/util/Defaults\";\nimport { InputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { connectSignal } from \"./Signal\";\n/**\n * A signal operator has an input and output and modifies the signal.\n */\nexport abstract class SignalOperator<Options extends ToneAudioNodeOptions> extends ToneAudioNode<Options> {\n\n\tconstructor(options?: Partial<Options>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(SignalOperator.getDefaults(), arguments, [\"context\"])));\n\t}\n\n\tconnect(destination: InputNode, outputNum: number = 0, inputNum: number = 0): this {\n\t\tconnectSignal(this, destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { isArray, isFunction, isUndef } from \"../core/util/TypeCheck\";\nimport { Signal, SignalOptions } from \"./Signal\";\nimport { SignalOperator } from \"./SignalOperator\";\n\ntype WaveShaperMappingFn = (value: number, index?: number) => number;\n\ntype WaveShaperMapping =  WaveShaperMappingFn | number[] | Float32Array;\n\ninterface WaveShaperOptions extends ToneAudioNodeOptions {\n\tmapping?: WaveShaperMapping;\n\tlength: number;\n\tcurve?: number[] | Float32Array;\n}\n\n/**\n * Wraps the native Web Audio API\n * [WaveShaperNode](http://webaudio.github.io/web-audio-api/#the-waveshapernode-interface).\n *\n *  @param mapping The function used to define the values.\n *                 The mapping function should take two arguments:\n *                 the first is the value at the current position\n *                 and the second is the array position.\n *                 If the argument is an array, that array will be\n *                 set as the wave shaping function. The input\n *                 signal is an AudioRange [-1, 1] value and the output\n *                 signal can take on any numerical values.\n *\n *  @param bufferLen The length of the WaveShaperNode buffer.\n *  @example\n * var timesTwo = new WaveShaper(function(val){\n * \treturn val * 2;\n * }, 2048);\n *  @example\n * //a waveshaper can also be constructed with an array of values\n * var invert = new WaveShaper([1, -1]);\n */\nexport class WaveShaper extends SignalOperator<WaveShaperOptions> {\n\n\tname = \"WaveShaper\";\n\n\t/**\n\t *  the waveshaper node\n\t */\n\tprivate _shaper: WaveShaperNode = this.context.createWaveShaper();\n\n\t/**\n\t * The input to the waveshaper node.\n\t */\n\tinput = this._shaper;\n\n\t/**\n\t * The output from the waveshaper node\n\t */\n\toutput = this._shaper;\n\n\tconstructor(options?: Partial<WaveShaperOptions>);\n\tconstructor(mapping?: WaveShaperMapping , length?: number);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(WaveShaper.getDefaults(), arguments, [\"mapping\", \"length\"])));\n\t\tconst options = optionsFromArguments(WaveShaper.getDefaults(), arguments, [\"mapping\", \"length\"]);\n\n\t\tif (isArray(options.mapping) || options.mapping instanceof Float32Array) {\n\t\t\tthis.curve = Float32Array.from(options.mapping);\n\t\t} else if (isFunction(options.mapping)) {\n\t\t\tthis.setMap(options.mapping, options.length);\n\t\t}\n\t}\n\n\tstatic getDefaults(): WaveShaperOptions {\n\t\treturn Object.assign(Signal.getDefaults(), {\n\t\t\tlength: 1024,\n\t\t});\n\t}\n\n\t/**\n\t *  Uses a mapping function to set the value of the curve.\n\t *  @param mapping The function used to define the values.\n\t *                 The mapping function take two arguments:\n\t *                 the first is the value at the current position\n\t *                 which goes from -1 to 1 over the number of elements\n\t *                 in the curve array. The second argument is the array position.\n\t * @example\n\t * //map the input signal from [-1, 1] to [0, 10]\n\t * shaper.setMap(function(val, index){\n\t * \treturn (val + 1) * 5;\n\t * })\n\t */\n\tsetMap(mapping: WaveShaperMappingFn, length: number = 1024): this {\n\t\tconst array = new Float32Array(length);\n\t\tfor (let i = 0, len = length; i < len; i++) {\n\t\t\tconst normalized = (i / (len - 1)) * 2 - 1;\n\t\t\tarray[i] = mapping(normalized, i);\n\t\t}\n\t\tthis.curve = array;\n\t\treturn this;\n\t}\n\n\t/**\n\t * The array to set as the waveshaper curve. For linear curves\n\t * array length does not make much difference, but for complex curves\n\t * longer arrays will provide smoother interpolation.\n\t */\n\tget curve(): Float32Array | null {\n\t\treturn this._shaper.curve;\n\t}\n\n\tset curve(mapping: Float32Array | null) {\n\t\tthis._shaper.curve = mapping;\n\t}\n\n\t/**\n\t * Specifies what type of oversampling (if any) should be used when\n\t * applying the shaping curve. Can either be \"none\", \"2x\" or \"4x\".\n\t */\n\tget oversample(): OverSampleType {\n\t\treturn this._shaper.oversample;\n\t}\n\n\tset oversample(oversampling: OverSampleType) {\n\t\tconst isOverSampleType = [\"none\", \"2x\", \"4x\"].some(str => str.includes(oversampling));\n\t\tthis.assert(isOverSampleType, \"oversampling must be either 'none', '2x', or '4x'\");\n\t\tthis._shaper.oversample = oversampling;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._shaper.disconnect();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { SignalOperator } from \"./SignalOperator\";\nimport { WaveShaper } from \"./WaveShaper\";\n\n/**\n * AudioToGain converts an input in AudioRange [-1,1] to NormalRange [0,1].\n * See {@link GainToAudio}.\n *\n * @example\n * var a2g = new AudioToGain();\n */\nexport class AudioToGain extends SignalOperator<ToneAudioNodeOptions> {\n\n\tname = \"AudioToGain\";\n\n\t/**\n\t * The node which converts the audio ranges\n\t */\n\tprivate _norm = new WaveShaper({\n\t\tcontext: this.context,\n\t\tmapping: x => (x + 1) / 2,\n\t});\n\n\t/**\n\t * The AudioRange input [-1, 1]\n\t */\n\tinput = this._norm;\n\n\t/**\n\t * The GainRange output [0, 1]\n\t */\n\toutput = this._norm;\n\n\t/**\n\t *  clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._norm.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../core/context/Gain\";\nimport { Param } from \"../core/context/Param\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Signal, SignalOptions } from \"./Signal\";\n\n/**\n * Multiply two incoming signals. Or, if a number is given in the constructor,\n * multiplies the incoming signal by that value.\n *\n * @param {number=} value Constant value to multiple\n * @example\n * const mult = new Multiply();\n * const sigA = new Tone.Signal(3);\n * const sigB = new Tone.Signal(4);\n * sigA.connect(mult);\n * sigB.connect(mult.factor);\n * //output of mult is 12.\n *  @example\n * const mult = new Multiply(10);\n * const sig = new Tone.Signal(2).connect(mult);\n * //the output of mult is 20.\n */\nexport class Multiply extends Signal<number> {\n\n\tname = \"Multiply\";\n\n\t/**\n\t * Indicates if the value should be overridden on connection\n\t */\n\treadonly override = false;\n\n\t/**\n\t * the input gain node\n\t */\n\tprivate _mult: Gain = new Gain({ context : this.context });\n\n\t/**\n\t * The multiplcant input.\n\t */\n\tinput = this._mult;\n\n\t/**\n\t * The product of the input and {@link factor}\n\t */\n\toutput = this._mult;\n\n\t/**\n\t * The multiplication factor. Can be set directly or a signal can be connected to it.\n\t */\n\tfactor: Param<number>;\n\n\tconstructor(options?: Partial<SignalOptions<number>>);\n\t// tslint:disable-next-line: unified-signatures\n\tconstructor(value?: number);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Multiply.getDefaults(), arguments, [\"value\"])));\n\t\tconst options = optionsFromArguments(Multiply.getDefaults(), arguments, [\"value\"]);\n\n\t\tthis.factor = this._param = this._mult.gain as unknown as Param<number>;\n\t\tthis.factor.setValueAtTime(options.value, 0);\n\t}\n\n\tstatic getDefaults(): SignalOptions<number> {\n\t\treturn Object.assign(Signal.getDefaults(), {\n\t\t\tvalue: 0,\n\t\t});\n\t}\n\n\t/**\n\t *  clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._mult.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { Cents, Degrees, Frequency, Positive, Seconds, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { AudioToGain } from \"../../signal/AudioToGain\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { AMConstructorOptions, AMOscillatorOptions,\n\tNonCustomOscillatorType, ToneOscillatorInterface,\n\tToneOscillatorType } from \"./OscillatorInterface\";\n\n/**\n * An amplitude modulated oscillator node. It is implemented with\n * two oscillators, one which modulators the other's amplitude\n * through a gain node.\n * ```\n *    +-------------+       +----------+\n *    | Carrier Osc +>------> GainNode |\n *    +-------------+       |          +--->Output\n *                      +---> gain     |\n * +---------------+    |   +----------+\n * | Modulator Osc +>---+\n * +---------------+\n * ```\n *\n * @param frequency The starting frequency of the oscillator.\n * @param type The type of the carrier oscillator.\n * @param modulationType The type of the modulator oscillator.\n * @example\n * //a sine oscillator frequency-modulated by a square wave\n * var fmOsc = new AMOscillator(\"Ab3\", \"sine\", \"square\").toDestination().start();\n */\nexport class AMOscillator extends Source<AMOscillatorOptions> implements ToneOscillatorInterface {\n\n\tname = \"AMOscillator\";\n\n\t/**\n\t *  The carrier oscillator\n\t */\n\tprivate _carrier: Oscillator;\n\n\t/**\n\t *  The oscillator's frequency\n\t */\n\treadonly frequency: Signal<Frequency>;\n\n\t/**\n\t *  The detune control signal.\n\t */\n\treadonly detune: Signal<Cents>;\n\n\t/**\n\t *  The modulating oscillator\n\t */\n\tprivate _modulator: Oscillator;\n\n\t/**\n\t *  convert the -1,1 output to 0,1\n\t */\n\tprivate _modulationScale = new AudioToGain({ context: this.context });\n\n\t/**\n\t *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators.\n\t *  A harmonicity of 1 gives both oscillators the same frequency.\n\t *  Harmonicity = 2 means a change of an octave.\n\t *  @example\n\t * //pitch the modulator an octave below carrier\n\t * synth.harmonicity.value = 0.5;\n\t */\n\treadonly harmonicity: Signal<Positive>;\n\n\t/**\n\t *  the node where the modulation happens\n\t */\n\tprivate _modulationNode = new Gain({\n\t\tcontext: this.context,\n\t});\n\n\tconstructor(options?: Partial<AMConstructorOptions>);\n\tconstructor(frequency?: Frequency, type?: ToneOscillatorType, modulationType?: ToneOscillatorType);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(AMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]));\n\t\tconst options = optionsFromArguments(AMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]);\n\n\t\tthis._carrier  = new Oscillator({\n\t\t\tcontext : this.context,\n\t\t\tdetune: options.detune,\n\t\t\tfrequency: options.frequency,\n\t\t\tonstop: () => this.onstop(this),\n\t\t\tphase: options.phase,\n\t\t\ttype: options.type,\n\t\t} as OscillatorOptions);\n\t\tthis.frequency = this._carrier.frequency,\n\t\tthis.detune = this._carrier.detune;\n\n\t\tthis._modulator = new Oscillator({\n\t\t\tcontext : this.context,\n\t\t\tphase: options.phase,\n\t\t\ttype: options.modulationType,\n\t\t} as OscillatorOptions);\n\n\t\tthis.harmonicity = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.harmonicity,\n\t\t});\n\n\t\t// connections\n\t\tthis.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t\tthis._modulator.chain(this._modulationScale, this._modulationNode.gain);\n\t\tthis._carrier.chain(this._modulationNode, this.output);\n\n\t\treadOnly(this, [\"frequency\", \"detune\", \"harmonicity\"]);\n\t}\n\n\tstatic getDefaults(): AMOscillatorOptions {\n\t\treturn Object.assign(Oscillator.getDefaults(), {\n\t\t\tharmonicity: 1,\n\t\t\tmodulationType: \"square\" as NonCustomOscillatorType,\n\t\t});\n\t}\n\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _start(time: Seconds): void {\n\t\tthis._modulator.start(time);\n\t\tthis._carrier.start(time);\n\t}\n\n\t/**\n\t *  stop the oscillator\n\t */\n\tprotected _stop(time: Seconds): void {\n\t\tthis._modulator.stop(time);\n\t\tthis._carrier.stop(time);\n\t}\n\n\t/**\n\t *  restart the oscillator\n\t */\n\trestart(time?: Time): this {\n\t\tthis._modulator.restart(time);\n\t\tthis._carrier.restart(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The type of the carrier oscillator\n\t */\n\tget type(): ToneOscillatorType {\n\t\treturn this._carrier.type;\n\t}\n\tset type(type: ToneOscillatorType) {\n\t\tthis._carrier.type = type;\n\t}\n\n\t/**\n\t * The oscillator type without the partialsCount appended to the end\n\t * @example\n\t * osc.type = 'sine2'\n\t * osc.baseType //'sine'\n\t * osc.partialCount = 2\n\t */\n\tget baseType(): OscillatorType {\n\t\treturn this._carrier.baseType;\n\t}\n\tset baseType(baseType: OscillatorType) {\n\t\tthis._carrier.baseType = baseType;\n\t}\n\n\t/**\n\t * 'partialCount' offers an alternative way to set the number of used partials.\n\t * When partialCount is 0, the maximum number of partials are used when representing\n\t * the waveform using the periodicWave. When 'partials' is set, this value is\n\t * not settable, but equals the length of the partials array.\n\t */\n\tget partialCount(): number {\n\t\treturn this._carrier.partialCount;\n\t}\n\n\tset partialCount(partialCount: number) {\n\t\tthis._carrier.partialCount = partialCount;\n\t}\n\n\t/**\n\t * The type of the modulator oscillator\n\t */\n\tget modulationType(): ToneOscillatorType {\n\t\treturn this._modulator.type;\n\t}\n\n\tset modulationType(type: ToneOscillatorType) {\n\t\tthis._modulator.type = type;\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._carrier.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._carrier.phase = phase;\n\t\tthis._modulator.phase = phase;\n\t}\n\n\t/**\n\t * The partials of the carrier waveform. A partial represents\n\t * the amplitude at a harmonic. The first harmonic is the\n\t * fundamental frequency, the second is the octave and so on\n\t * following the harmonic series.\n\t * Setting this value will automatically set the type to \"custom\".\n\t * The value is an empty array when the type is not \"custom\".\n\t * @example\n\t * osc.partials = [1, 0.2, 0.01];\n\t */\n\tget partials(): number[] {\n\t\treturn this._carrier.partials;\n\t}\n\tset partials(partials: number[]) {\n\t\tthis._carrier.partials = partials;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\tthis.harmonicity.dispose();\n\t\tthis._carrier.dispose();\n\t\tthis._modulator.dispose();\n\t\tthis._modulationNode.dispose();\n\t\tthis._modulationScale.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { AudioRange, Cents, Degrees, Frequency, Positive, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { FMConstructorOptions, FMOscillatorOptions,\n\tNonCustomOscillatorType, ToneOscillatorInterface, ToneOscillatorType } from \"./OscillatorInterface\";\n\n/**\n * FMOscillator implements a frequency modulation synthesis\n * ```\n *                                              +-------------+\n * +---------------+        +-------------+     | Carrier Osc |\n * | Modulator Osc +>-------> GainNode    |     |             +--->Output\n * +---------------+        |             +>----> frequency   |\n *                       +--> gain        |     +-------------+\n *                       |  +-------------+\n * +-----------------+   |\n * | modulationIndex +>--+\n * +-----------------+\n * ```\n *\n * @param frequency The starting frequency of the oscillator.\n * @param type The type of the carrier oscillator.\n * @param modulationType The type of the modulator oscillator.\n * @example\n * //a sine oscillator frequency-modulated by a square wave\n * var fmOsc = new FMOscillator(\"Ab3\", \"sine\", \"square\").toDestination().start();\n */\nexport class FMOscillator extends Source<FMOscillatorOptions> implements ToneOscillatorInterface {\n\n\tname = \"FMOscillator\";\n\n\t/**\n\t *  The carrier oscillator\n\t */\n\tprivate _carrier: Oscillator;\n\n\t/**\n\t *  The oscillator's frequency\n\t */\n\treadonly frequency: Signal<Frequency>;\n\n\t/**\n\t *  The detune control signal.\n\t */\n\treadonly detune: Signal<Cents>;\n\n\t/**\n\t *  The modulating oscillator\n\t */\n\tprivate _modulator: Oscillator;\n\n\t/**\n\t *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators.\n\t *  A harmonicity of 1 gives both oscillators the same frequency.\n\t *  Harmonicity = 2 means a change of an octave.\n\t *  @example\n\t * //pitch the modulator an octave below carrier\n\t * synth.harmonicity.value = 0.5;\n\t */\n\treadonly harmonicity: Signal<Positive>;\n\n\t/**\n\t *  The modulation index which is in essence the depth or amount of the modulation. In other terms it is the\n\t *  ratio of the frequency of the modulating signal (mf) to the amplitude of the\n\t *  modulating signal (ma) -- as in ma/mf.\n\t */\n\treadonly modulationIndex: Signal<Positive>;\n\n\t/**\n\t *  the node where the modulation happens\n\t */\n\tprivate _modulationNode: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\n\tconstructor(options?: Partial<FMConstructorOptions>);\n\tconstructor(frequency?: Frequency, type?: ToneOscillatorType, modulationType?: ToneOscillatorType);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(FMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]));\n\t\tconst options = optionsFromArguments(FMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]);\n\n\t\tthis._carrier = new Oscillator({\n\t\t\tcontext : this.context,\n\t\t\tdetune: options.detune,\n\t\t\tfrequency: 0,\n\t\t\tonstop: () => this.onstop(this),\n\t\t\tphase: options.phase,\n\t\t\ttype: options.type,\n\t\t} as OscillatorOptions);\n\n\t\tthis.detune = this._carrier.detune;\n\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t});\n\n\t\tthis._modulator = new Oscillator({\n\t\t\tcontext : this.context,\n\t\t\tphase: options.phase,\n\t\t\ttype: options.modulationType,\n\t\t} as OscillatorOptions);\n\n\t\tthis.harmonicity = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.harmonicity,\n\t\t});\n\n\t\tthis.modulationIndex = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.modulationIndex,\n\t\t});\n\n\t\t// connections\n\t\tthis.frequency.connect(this._carrier.frequency);\n\t\tthis.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t\tthis.frequency.chain(this.modulationIndex, this._modulationNode);\n\t\tthis._modulator.connect(this._modulationNode.gain);\n\t\tthis._modulationNode.connect(this._carrier.frequency);\n\t\tthis._carrier.connect(this.output);\n\t\tthis.detune.connect(this._modulator.detune);\n\n\t\treadOnly(this, [\"modulationIndex\", \"frequency\", \"detune\", \"harmonicity\"]);\n\t}\n\n\tstatic getDefaults(): FMOscillatorOptions {\n\t\treturn Object.assign(Oscillator.getDefaults(), {\n\t\t\tharmonicity: 1,\n\t\t\tmodulationIndex: 2,\n\t\t\tmodulationType: \"square\" as NonCustomOscillatorType,\n\t\t});\n\t}\n\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\tthis._modulator.start(time);\n\t\tthis._carrier.start(time);\n\t}\n\n\t/**\n\t *  stop the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\tthis._modulator.stop(time);\n\t\tthis._carrier.stop(time);\n\t}\n\n\t/**\n\t *  stop and restart the oscillator\n\t */\n\trestart(time?: Time): this {\n\t\tthis._modulator.restart(time);\n\t\tthis._carrier.restart(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The type of the carrier oscillator\n\t */\n\tget type(): ToneOscillatorType {\n\t\treturn this._carrier.type;\n\t}\n\tset type(type: ToneOscillatorType) {\n\t\tthis._carrier.type = type;\n\t}\n\n\t/**\n\t * The oscillator type without the partialsCount appended to the end\n\t * @example\n\t * osc.type = 'sine2'\n\t * osc.baseType //'sine'\n\t * osc.partialCount = 2\n\t */\n\tget baseType(): OscillatorType {\n\t\treturn this._carrier.baseType;\n\t}\n\tset baseType(baseType: OscillatorType) {\n\t\tthis._carrier.baseType = baseType;\n\t}\n\n\t/**\n\t * 'partialCount' offers an alternative way to set the number of used partials.\n\t * When partialCount is 0, the maximum number of partials are used when representing\n\t * the waveform using the periodicWave. When 'partials' is set, this value is\n\t * not settable, but equals the length of the partials array.\n\t */\n\tget partialCount(): number {\n\t\treturn this._carrier.partialCount;\n\t}\n\tset partialCount(partialCount: number) {\n\t\tthis._carrier.partialCount = partialCount;\n\t}\n\n\t/**\n\t * The type of the modulator oscillator\n\t */\n\tget modulationType(): ToneOscillatorType {\n\t\treturn this._modulator.type;\n\t}\n\tset modulationType(type: ToneOscillatorType) {\n\t\tthis._modulator.type = type;\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._carrier.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._carrier.phase = phase;\n\t\tthis._modulator.phase = phase;\n\t}\n\n\t/**\n\t * The partials of the carrier waveform. A partial represents\n\t * the amplitude at a harmonic. The first harmonic is the\n\t * fundamental frequency, the second is the octave and so on\n\t * following the harmonic series.\n\t * Setting this value will automatically set the type to \"custom\".\n\t * The value is an empty array when the type is not \"custom\".\n\t * @example\n\t * osc.partials = [1, 0.2, 0.01];\n\t */\n\tget partials(): number[] {\n\t\treturn this._carrier.partials;\n\t}\n\tset partials(partials: number[]) {\n\t\tthis._carrier.partials = partials;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.harmonicity.dispose();\n\t\tthis._carrier.dispose();\n\t\tthis._modulator.dispose();\n\t\tthis._modulationNode.dispose();\n\t\tthis.modulationIndex.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { AudioRange, Cents, Degrees, Frequency, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { WaveShaper } from \"../../signal/WaveShaper\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { PulseOscillatorOptions, ToneOscillatorInterface } from \"./OscillatorInterface\";\n\n/**\n * PulseOscillator is an oscillator with control over pulse width,\n * also known as the duty cycle. At 50% duty cycle (width = 0) the wave is\n * a square wave.\n * [Read more](https://wigglewave.wordpress.com/2014/08/16/pulse-waveforms-and-harmonics/).\n * ```\n *    width = -0.25        width = 0.0          width = 0.25\n *\n *   +-----+            +-------+       +    +-------+     +-+\n *   |     |            |       |       |            |     |\n *   |     |            |       |       |            |     |\n * +-+     +-------+    +       +-------+            +-----+\n *\n *\n *    width = -0.5                              width = 0.5\n *\n *     +---+                                 +-------+   +---+\n *     |   |                                         |   |\n *     |   |                                         |   |\n * +---+   +-------+                                 +---+\n *\n *\n *    width = -0.75                             width = 0.75\n *\n *       +-+                                 +-------+ +-----+\n *       | |                                         | |\n *       | |                                         | |\n * +-----+ +-------+                                 +-+\n * ```\n * @param frequency The frequency of the oscillator\n * @param width The width of the pulse\n * @example\n * var pulse = new PulseOscillator(\"E5\", 0.4).toDestination().start();\n */\nexport class PulseOscillator extends Source<PulseOscillatorOptions> implements ToneOscillatorInterface {\n\n\tname = \"PulseOscillator\";\n\n\t/**\n\t *  The width of the pulse.\n\t */\n\twidth: Signal<AudioRange>;\n\n\t/**\n\t *  gate the width amount\n\t */\n\tprivate _widthGate: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\n\t/**\n\t *  the sawtooth oscillator\n\t */\n\tprivate _sawtooth: Oscillator;\n\n\t/**\n\t *  The frequency control.\n\t */\n\tfrequency: Signal<Frequency>;\n\n\t/**\n\t *  The detune in cents.\n\t */\n\tdetune: Signal<Cents>;\n\n\t/**\n\t *  Threshold the signal to turn it into a square\n\t */\n\tprivate _thresh = new WaveShaper({\n\t\tcontext: this.context,\n\t\tmapping: val => val <= 0 ? -1 : 1,\n\t});\n\n\tconstructor(options?: Partial<PulseOscillatorOptions>);\n\tconstructor(frequency?: Frequency, width?: AudioRange);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(PulseOscillator.getDefaults(), arguments, [\"frequency\", \"width\"]));\n\t\tconst options = optionsFromArguments(PulseOscillator.getDefaults(), arguments, [\"frequency\", \"width\"]);\n\n\t\tthis.width = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"audioRange\",\n\t\t\tvalue: options.width,\n\t\t});\n\n\t\tthis._sawtooth = new Oscillator({\n\t\t\tcontext: this.context,\n\t\t\tdetune: options.detune,\n\t\t\tfrequency: options.frequency,\n\t\t\tonstop: () => this.onstop(this),\n\t\t\tphase: options.phase,\n\t\t\ttype : \"sawtooth\",\n\t\t});\n\t\tthis.frequency = this._sawtooth.frequency;\n\t\tthis.detune = this._sawtooth.detune;\n\n\t\t// connections\n\t\tthis._sawtooth.chain(this._thresh, this.output);\n\t\tthis.width.chain(this._widthGate, this._thresh);\n\t\treadOnly(this, [\"width\", \"frequency\", \"detune\"]);\n\t}\n\n\tstatic getDefaults(): PulseOscillatorOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tfrequency: 440,\n\t\t\tphase: 0,\n\t\t\ttype: \"pulse\" as \"pulse\",\n\t\t\twidth: 0.2,\n\t\t});\n\t}\n\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._sawtooth.start(time);\n\t\tthis._widthGate.gain.setValueAtTime(1, time);\n\t}\n\n\t/**\n\t *  stop the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._sawtooth.stop(time);\n\t\t// the width is still connected to the output.\n\t\t// that needs to be stopped also\n\t\tthis._widthGate.gain.cancelScheduledValues(time);\n\t\tthis._widthGate.gain.setValueAtTime(0, time);\n\t}\n\n\t/**\n\t *  Restart the oscillator\n\t */\n\trestart(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._sawtooth.restart(computedTime);\n\t\tthis._widthGate.gain.cancelScheduledValues(computedTime);\n\t\tthis._widthGate.gain.setValueAtTime(1, computedTime);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._sawtooth.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._sawtooth.phase = phase;\n\t}\n\n\t/**\n\t * The type of the oscillator. Always returns \"pulse\".\n\t */\n\tget type(): \"pulse\" {\n\t\treturn \"pulse\";\n\t}\n\n\t/**\n\t * The baseType of the oscillator. Always returns \"pulse\".\n\t */\n\tget baseType(): \"pulse\" {\n\t\treturn \"pulse\";\n\t}\n\n\t/**\n\t * The partials of the waveform. Cannot set partials for this waveform type\n\t */\n\tget partials(): number[] {\n\t\treturn [];\n\t}\n\n\t/**\n\t * No partials for this waveform type.\n\t */\n\tget partialCount(): number {\n\t\treturn 0;\n\t}\n\n\t/**\n\t *  Clean up method.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._sawtooth.dispose();\n\t\tthis.width.dispose();\n\t\tthis._widthGate.dispose();\n\t\tthis._thresh.dispose();\n\t\treturn this;\n\t}\n}\n","import { AudioRange, Cents, Degrees, Frequency, Positive, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp, readOnly } from \"../../core/util/Interface\";\nimport { AudioToGain } from \"../../signal/AudioToGain\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { FatConstructorOptions, FatOscillatorOptions,\n\tToneOscillatorInterface, ToneOscillatorType } from \"./OscillatorInterface\";\n\n/**\n *  FatOscillator is an array of oscillators with detune spread between the oscillators\n *  @param frequency The oscillator's frequency.\n *  @param type The type of the oscillator.\n *  @param spread The detune spread between the oscillators.\n *  @example\n * var fatOsc = new FatOscillator(\"Ab3\", \"sine\", 40).toDestination().start();\n */\nexport class FatOscillator extends Source<FatOscillatorOptions> implements ToneOscillatorInterface {\n\n\tname = \"FatOscillator\";\n\n\t/**\n\t *  The oscillator's frequency\n\t */\n\treadonly frequency: Signal<Frequency>;\n\n\t/**\n\t *  The detune control signal.\n\t */\n\treadonly detune: Signal<Cents>;\n\n\t/**\n\t *  The array of oscillators\n\t */\n\tprivate _oscillators: Oscillator[] = [];\n\n\t/**\n\t *  The total spread of the oscillators\n\t */\n\tprivate _spread: Cents;\n\n\t/**\n\t *  The type of the oscillator\n\t */\n\tprivate _type: ToneOscillatorType;\n\n\t/**\n\t *  The phase of the oscillators\n\t */\n\tprivate _phase: Degrees;\n\n\t/**\n\t *  The partials array\n\t */\n\tprivate _partials: number[];\n\n\t/**\n\t *  The number of partials to use\n\t */\n\tprivate _partialCount: number;\n\n\tconstructor(options?: Partial<FatConstructorOptions>);\n\tconstructor(frequency?: Frequency, type?: ToneOscillatorType, modulationType?: ToneOscillatorType);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(FatOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"spread\"]));\n\t\tconst options = optionsFromArguments(FatOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"spread\"]);\n\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t});\n\t\tthis.detune = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune,\n\t\t});\n\n\t\tthis._spread = options.spread;\n\t\tthis._type = options.type;\n\t\tthis._phase = options.phase;\n\t\tthis._partials = options.partials;\n\t\tthis._partialCount = options.partialCount;\n\n\t\t// set the count initially\n\t\tthis.count = options.count;\n\n\t\treadOnly(this, [\"frequency\", \"detune\"]);\n\t}\n\n\tstatic getDefaults(): FatOscillatorOptions {\n\t\treturn Object.assign(Oscillator.getDefaults(), {\n\t\t\tcount : 3,\n\t\t\tspread : 20,\n\t\t\ttype : \"sawtooth\",\n\t\t});\n\t}\n\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._forEach(osc => osc.start(time));\n\t}\n\n\t/**\n\t *  stop the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._forEach(osc => osc.stop(time));\n\t}\n\n\t/**\n\t *  restart the oscillator\n\t */\n\trestart(time): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis._forEach(osc => osc.restart(time));\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over all of the oscillators\n\t */\n\tprivate _forEach(iterator: (osc: Oscillator, index: number) => void): void {\n\t\tfor (let i = 0; i < this._oscillators.length; i++) {\n\t\t\titerator(this._oscillators[i], i);\n\t\t}\n\t}\n\n\t/**\n\t * The type of the oscillator\n\t */\n\tget type(): ToneOscillatorType {\n\t\treturn this._type;\n\t}\n\n\tset type(type: ToneOscillatorType) {\n\t\tthis._type = type;\n\t\tthis._forEach(osc => osc.type = type);\n\t}\n\n\t/**\n\t * The detune spread between the oscillators. If \"count\" is\n\t * set to 3 oscillators and the \"spread\" is set to 40,\n\t * the three oscillators would be detuned like this: [-20, 0, 20]\n\t * for a total detune spread of 40 cents.\n\t */\n\tget spread(): Cents {\n\t\treturn this._spread;\n\t}\n\n\tset spread(spread: Cents) {\n\t\tthis._spread = spread;\n\t\tif (this._oscillators.length > 1) {\n\t\t\tconst start = -spread / 2;\n\t\t\tconst step = spread / (this._oscillators.length - 1);\n\t\t\tthis._forEach((osc, i) => osc.detune.value = start + step * i);\n\t\t}\n\t}\n\n\t/**\n\t * The number of detuned oscillators. Should be an integer greater than 1.\n\t */\n\tget count(): number {\n\t\treturn this._oscillators.length;\n\t}\n\tset count(count: number) {\n\t\tcount = Math.max(count, 1);\n\t\tif (this._oscillators.length !== count) {\n\t\t\t// dispose the previous oscillators\n\t\t\tthis._forEach(osc => osc.dispose());\n\t\t\tthis._oscillators = [];\n\t\t\tfor (let i = 0; i < count; i++) {\n\t\t\t\tconst osc = new Oscillator({\n\t\t\t\t\tcontext : this.context,\n\t\t\t\t\tonstop: i === 0 ? () => this.onstop(this) : noOp,\n\t\t\t\t});\n\t\t\t\tif (this.type === \"custom\") {\n\t\t\t\t\tosc.partials = this._partials;\n\t\t\t\t} else {\n\t\t\t\t\tosc.type = this._type;\n\t\t\t\t}\n\t\t\t\tosc.partialCount = this._partialCount;\n\t\t\t\tosc.phase = this._phase + (i / count) * 360;\n\t\t\t\tosc.volume.value = -6 - count * 1.1;\n\t\t\t\tthis.frequency.connect(osc.frequency);\n\t\t\t\tthis.detune.connect(osc.detune);\n\t\t\t\tosc.connect(this.output);\n\t\t\t\tthis._oscillators[i] = osc;\n\t\t\t}\n\t\t\t// set the spread\n\t\t\tthis.spread = this._spread;\n\t\t\tif (this.state === \"started\") {\n\t\t\t\tthis._forEach(osc => osc.start());\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._phase = phase;\n\t\tthis._forEach(osc => osc.phase = phase);\n\t}\n\n\t/**\n\t * The oscillator type without the partialsCount appended to the end\n\t * @example\n\t * osc.type = 'sine2'\n\t * osc.baseType //'sine'\n\t * osc.partialCount = 2\n\t */\n\tget baseType(): OscillatorType {\n\t\treturn this._oscillators[0].baseType;\n\t}\n\tset baseType(baseType: OscillatorType) {\n\t\tthis._forEach(osc => osc.baseType = baseType);\n\t\tthis._type = this._oscillators[0].type;\n\t}\n\n\t/**\n\t * The partials of the carrier waveform. A partial represents\n\t * the amplitude at a harmonic. The first harmonic is the\n\t * fundamental frequency, the second is the octave and so on\n\t * following the harmonic series.\n\t * Setting this value will automatically set the type to \"custom\".\n\t * The value is an empty array when the type is not \"custom\".\n\t * @memberOf FatOscillator#\n\t * @type {Array}\n\t * @name partials\n\t * @example\n\t * osc.partials = [1, 0.2, 0.01];\n\t */\n\tget partials(): number[] {\n\t\treturn this._oscillators[0].partials;\n\t}\n\tset partials(partials: number[]) {\n\t\tthis._partials = partials;\n\t\tif (partials.length) {\n\t\t\tthis._type = \"custom\";\n\t\t\tthis._forEach(osc => osc.partials = partials);\n\t\t}\n\t}\n\n\t/**\n\t * 'partialCount' offers an alternative way to set the number of used partials.\n\t * When partialCount is 0, the maximum number of partials are used when representing\n\t * the waveform using the periodicWave. When 'partials' is set, this value is\n\t * not settable, but equals the length of the partials array.\n\t * @memberOf FatOscillator#\n\t * @type {Number}\n\t * @name partialCount\n\t */\n\tget partialCount(): number {\n\t\treturn this._oscillators[0].partialCount;\n\t}\n\tset partialCount(partialCount: number) {\n\t\tthis._partialCount = partialCount;\n\t\tthis._forEach(osc => osc.partialCount = partialCount);\n\t\tthis._type = this._oscillators[0].type;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\tthis._forEach(osc => osc.dispose());\n\t\treturn this;\n\t}\n}\n","import { Cents, Degrees, Frequency, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { PWMOscillatorOptions, ToneOscillatorInterface } from \"./OscillatorInterface\";\nimport { PulseOscillator } from \"./PulseOscillator\";\n\n/**\n * PWMOscillator modulates the width of a Tone.PulseOscillator\n * at the modulationFrequency. This has the effect of continuously\n * changing the timbre of the oscillator by altering the harmonics\n * generated.\n *\n * @param {Frequency} frequency The starting frequency of the oscillator.\n * @param {Frequency} modulationFrequency The modulation frequency of the width of the pulse.\n * @example\n *  var pwm = new PWMOscillator(\"Ab3\", 0.3).toDestination().start();\n */\nexport class PWMOscillator extends Source<PWMOscillatorOptions> implements ToneOscillatorInterface {\n\n\treadonly name = \"PWMOscillator\";\n\n\treadonly sourceType = \"pwm\";\n\n\t/**\n\t *  the pulse oscillator\n\t */\n\tprivate _pulse: PulseOscillator;\n\t/**\n\t *  the modulator\n\t */\n\tprivate _modulator: Oscillator;\n\n\t/**\n\t *  Scale the oscillator so it doesn't go silent\n\t *  at the extreme values.\n\t */\n\tprivate _scale: Multiply = new Multiply({\n\t\tcontext: this.context,\n\t\tvalue: 2,\n\t});\n\n\t/**\n\t *  The frequency control.\n\t */\n\treadonly frequency: Signal<Frequency>;\n\n\t/**\n\t *  The detune of the oscillator.\n\t */\n\treadonly detune: Signal<Cents>;\n\n\t/**\n\t *  The modulation rate of the oscillator.\n\t */\n\treadonly modulationFrequency: Signal<Frequency>;\n\n\tconstructor(options?: Partial<PWMOscillatorOptions>);\n\tconstructor(frequency?: Frequency, modulationFrequency?: Frequency);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(PWMOscillator.getDefaults(), arguments, [\"frequency\", \"modulationFrequency\"]));\n\t\tconst options = optionsFromArguments(PWMOscillator.getDefaults(), arguments, [\"frequency\", \"modulationFrequency\"]);\n\n\t\tthis._pulse = new PulseOscillator({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.modulationFrequency,\n\t\t});\n\t\t// change the pulse oscillator type\n\t\t// @ts-ignore\n\t\tthis._pulse._sawtooth.type = \"sine\";\n\n\t\tthis.modulationFrequency  = this._pulse.frequency;\n\n\t\tthis._modulator = new Oscillator({\n\t\t\tcontext: this.context,\n\t\t\tdetune: options.detune,\n\t\t\tfrequency: options.frequency,\n\t\t\tonstop: () => this.onstop(this),\n\t\t\tphase: options.phase,\n\t\t});\n\n\t\tthis.frequency = this._modulator.frequency;\n\t\tthis.detune = this._modulator.detune;\n\n\t\t// connections\n\t\tthis._modulator.chain(this._scale, this._pulse.width);\n\t\tthis._pulse.connect(this.output);\n\t\treadOnly(this, [\"modulationFrequency\", \"frequency\", \"detune\"]);\n\t}\n\n\tstatic getDefaults(): PWMOscillatorOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tfrequency: 440,\n\t\t\tmodulationFrequency: 0.4,\n\t\t\tphase: 0,\n\t\t\ttype: \"pwm\" as \"pwm\",\n\t\t});\n\t}\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._modulator.start(time);\n\t\tthis._pulse.start(time);\n\t}\n\n\t/**\n\t *  stop the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._modulator.stop(time);\n\t\tthis._pulse.stop(time);\n\t}\n\n\t/**\n\t *  restart the oscillator\n\t */\n\trestart(time?: Time): this {\n\t\tthis._modulator.restart(time);\n\t\tthis._pulse.restart(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The type of the oscillator. Always returns \"pwm\".\n\t */\n\tget type(): \"pwm\" {\n\t\treturn \"pwm\";\n\t}\n\n\t/**\n\t * The baseType of the oscillator. Always returns \"pwm\".\n\t */\n\tget baseType(): \"pwm\" {\n\t\treturn \"pwm\";\n\t}\n\n\t/**\n\t * The partials of the waveform. Cannot set partials for this waveform type\n\t */\n\tget partials(): number[] {\n\t\treturn [];\n\t}\n\n\t/**\n\t * No partials for this waveform type.\n\t */\n\tget partialCount(): number {\n\t\treturn 0;\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._modulator.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._modulator.phase = phase;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._pulse.dispose();\n\t\tthis._scale.dispose();\n\t\tthis._modulator.dispose();\n\t\treturn this;\n\t}\n}\n","import { AudioRange, Cents, Degrees, Frequency, Positive, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments  } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { isNumber, isString } from \"../../core/util/TypeCheck\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { AMOscillator } from \"./AMOscillator\";\nimport { FatOscillator } from \"./FatOscillator\";\nimport { FMOscillator } from \"./FMOscillator\";\nimport { Oscillator } from \"./Oscillator\";\nimport { OmniOscillatorConstructorOptions,\n\tOmniOscillatorOptions, OmniOscillatorType,\n\tToneOscillatorInterface, ToneOscillatorType } from \"./OscillatorInterface\";\nimport { PulseOscillator } from \"./PulseOscillator\";\nimport { PWMOscillator } from \"./PWMOscillator\";\n\n/**\n * All of the oscillator types that OmniOscillator can take on\n */\ntype AnyOscillator = Oscillator | PWMOscillator | PulseOscillator | FatOscillator | AMOscillator | FMOscillator;\n\n/**\n * The constructor of each of the OmniOscillator types\n */\ntype TypeofAnyOscillator = typeof Oscillator | typeof PWMOscillator |\n\ttypeof PulseOscillator | typeof FatOscillator |\n\ttypeof AMOscillator | typeof FMOscillator;\n\n/**\n * All of the Oscillator constructor types mapped to their name.\n */\ninterface OmniOscillatorSource {\n\t\"fm\": FMOscillator;\n\t\"am\": AMOscillator;\n\t\"pwm\": PWMOscillator;\n\t\"pulse\": PulseOscillator;\n\t\"oscillator\": Oscillator;\n\t\"fat\": FatOscillator;\n}\n\n/**\n * The available oscillator types.\n */\nexport type OmniOscSourceType = keyof OmniOscillatorSource;\n\n// Conditional Types\ntype IsAmOrFmOscillator<Osc, Ret> = Osc extends AMOscillator ? Ret : Osc extends FMOscillator ? Ret : undefined;\ntype IsFatOscillator<Osc, Ret> = Osc extends FatOscillator ? Ret : undefined;\ntype IsPWMOscillator<Osc, Ret> = Osc extends PWMOscillator ? Ret : undefined;\ntype IsPulseOscillator<Osc, Ret> = Osc extends PulseOscillator ? Ret : undefined;\ntype IsFMOscillator<Osc, Ret> = Osc extends FMOscillator ? Ret : undefined;\n\ntype AnyOscillatorConstructor = new (...args: any[]) => AnyOscillator;\n\n// tslint:disable-next-line: variable-name\nconst OmniOscillatorSourceMap: {\n\t[key in OmniOscSourceType] : AnyOscillatorConstructor\n} = {\n\tam: AMOscillator,\n\tfat: FatOscillator,\n\tfm: FMOscillator,\n\toscillator: Oscillator,\n\tpulse: PulseOscillator,\n\tpwm: PWMOscillator,\n};\n\n/**\n * OmniOscillator aggregates Tone.Oscillator, Tone.PulseOscillator,\n * Tone.PWMOscillator, Tone.FMOscillator, Tone.AMOscillator, and Tone.FatOscillator\n * into one class. The oscillator class can be changed by setting the `type`.\n * `omniOsc.type = \"pwm\"` will set it to the Tone.PWMOscillator. Prefixing\n * any of the basic types (\"sine\", \"square4\", etc.) with \"fm\", \"am\", or \"fat\"\n * will use the FMOscillator, AMOscillator or FatOscillator respectively.\n * For example: `omniOsc.type = \"fatsawtooth\"` will create set the oscillator\n * to a FatOscillator of type \"sawtooth\".\n *\n * @param frequency The initial frequency of the oscillator.\n * @param type The type of the oscillator.\n * @example\n * var omniOsc = new OmniOscillator(\"C#4\", \"pwm\");\n */\nexport class OmniOscillator<OscType extends AnyOscillator>\nextends Source<OmniOscillatorConstructorOptions>\nimplements Omit<ToneOscillatorInterface, \"type\"> {\n\n\tname = \"OmniOscillator\";\n\n\t/**\n\t *  The frequency control.\n\t */\n\treadonly frequency: Signal<Frequency>;\n\n\t/**\n\t *  The detune control.\n\t */\n\treadonly detune: Signal<Cents>;\n\n\t/**\n\t * The oscillator that can switch types\n\t */\n\tprivate _oscillator!: AnyOscillator;\n\n\t/**\n\t *  the type of the oscillator source\n\t */\n\tprivate _sourceType!: OmniOscSourceType;\n\n\tconstructor(options?: Partial<OmniOscillatorConstructorOptions>);\n\tconstructor(frequency?: Frequency, type?: OmniOscillatorType);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(OmniOscillator.getDefaults(), arguments, [\"frequency\", \"type\"]));\n\t\tconst options = optionsFromArguments(OmniOscillator.getDefaults(), arguments, [\"frequency\", \"type\"]);\n\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t});\n\t\tthis.detune = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune,\n\t\t});\n\t\treadOnly(this, [\"frequency\", \"detune\"]);\n\n\t\t// set the options\n\t\tthis.set(options);\n\t}\n\n\tstatic getDefaults(): OmniOscillatorOptions {\n\t\treturn Object.assign(\n\t\t\tOscillator.getDefaults(),\n\t\t\tFMOscillator.getDefaults(),\n\t\t\tAMOscillator.getDefaults(),\n\t\t\tFatOscillator.getDefaults(),\n\t\t\tPulseOscillator.getDefaults(),\n\t\t\tPWMOscillator.getDefaults(),\n\t\t);\n\t}\n\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\tthis._oscillator.start(time);\n\t}\n\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\tthis._oscillator.stop(time);\n\t}\n\n\trestart(time?: Time): this {\n\t\tthis._oscillator.restart(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The type of the oscillator. Can be any of the basic types: sine, square, triangle, sawtooth. Or\n\t * prefix the basic types with \"fm\", \"am\", or \"fat\" to use the FMOscillator, AMOscillator or FatOscillator\n\t * types. The oscillator could also be set to \"pwm\" or \"pulse\". All of the parameters of the\n\t * oscillator's class are accessible when the oscillator is set to that type, but throws an error\n\t * when it's not.\n\t * @example\n\t * omniOsc.type = \"pwm\";\n\t * //modulationFrequency is parameter which is available\n\t * //only when the type is \"pwm\".\n\t * omniOsc.modulationFrequency.value = 0.5;\n\t * @example\n\t * //an square wave frequency modulated by a sawtooth\n\t * omniOsc.type = \"fmsquare\";\n\t * omniOsc.modulationType = \"sawtooth\";\n\t */\n\tget type(): OmniOscillatorType {\n\t\tlet prefix = \"\";\n\t\tif ([\"am\", \"fm\", \"fat\"].some(p => this._sourceType === p)) {\n\t\t\tprefix = this._sourceType;\n\t\t}\n\t\treturn prefix + this._oscillator.type as OmniOscillatorType;\n\t}\n\tset type(type) {\n\t\tif (type.substr(0, 2) === \"fm\") {\n\t\t\tthis._createNewOscillator(\"fm\");\n\t\t\tthis._oscillator = this._oscillator as FMOscillator;\n\t\t\tthis._oscillator.type = type.substr(2) as ToneOscillatorType;\n\t\t} else if (type.substr(0, 2) === \"am\") {\n\t\t\tthis._createNewOscillator(\"am\");\n\t\t\tthis._oscillator = this._oscillator as AMOscillator;\n\t\t\tthis._oscillator.type = type.substr(2)  as ToneOscillatorType;\n\t\t} else if (type.substr(0, 3) === \"fat\") {\n\t\t\tthis._createNewOscillator(\"fat\");\n\t\t\tthis._oscillator = this._oscillator as FatOscillator;\n\t\t\tthis._oscillator.type = type.substr(3)  as ToneOscillatorType;\n\t\t} else if (type === \"pwm\") {\n\t\t\tthis._createNewOscillator(\"pwm\");\n\t\t\tthis._oscillator = this._oscillator as PWMOscillator;\n\t\t} else if (type === \"pulse\") {\n\t\t\tthis._createNewOscillator(\"pulse\");\n\t\t} else {\n\t\t\tthis._createNewOscillator(\"oscillator\");\n\t\t\tthis._oscillator = this._oscillator as Oscillator;\n\t\t\tthis._oscillator.type = (type as ToneOscillatorType);\n\t\t}\n\t}\n\n\t/**\n\t * The partials of the waveform. A partial represents\n\t * the amplitude at a harmonic. The first harmonic is the\n\t * fundamental frequency, the second is the octave and so on\n\t * following the harmonic series.\n\t * Setting this value will automatically set the type to \"custom\".\n\t * The value is an empty array when the type is not \"custom\".\n\t * This is not available on \"pwm\" and \"pulse\" oscillator types.\n\t * @example\n\t * osc.partials = [1, 0.2, 0.01];\n\t */\n\tget partials(): number[] {\n\t\treturn this._oscillator.partials;\n\t}\n\tset partials(partials) {\n\t\tif (!this._getOscType(this._oscillator, \"pulse\") && !this._getOscType(this._oscillator, \"pwm\")) {\n\t\t\tthis._oscillator.partials = partials;\n\t\t}\n\t}\n\n\t/**\n\t * The partial count of the oscillator. This is not available on \"pwm\" and \"pulse\" oscillator types.\n\t * @example\n\t * //set the maximum number of partials\n\t * osc.partialCount = 0;\n\t */\n\tget partialCount(): number {\n\t\treturn this._oscillator.partialCount;\n\t}\n\tset partialCount(partialCount) {\n\t\tif (!this._getOscType(this._oscillator, \"pulse\") && !this._getOscType(this._oscillator, \"pwm\")) {\n\t\t\tthis._oscillator.partialCount = partialCount;\n\t\t}\n\t}\n\n\t/**\n\t * Set the parameters at once. Either pass in an\n\t * object mapping parameters to values, or to set a\n\t * single parameter, by passing in a string and value.\n\t * The last argument is an optional ramp time which\n\t * will ramp any signal values to their destination value\n\t * over the duration of the rampTime.\n\t * @param  params\n\t * @example\n\t * //set values using an object\n\t * filter.set({\n\t * \t\"frequency\" : 300,\n\t * \t\"type\" : \"highpass\"\n\t * });\n\t */\n\tset(props: Partial<OmniOscillatorConstructorOptions>): this {\n\t\t// make sure the type is set first\n\t\tif (Reflect.has(props, \"type\") && props.type) {\n\t\t\tthis.type = props.type;\n\t\t\t// delete props.type;\n\t\t}\n\t\t// then set the rest\n\t\tsuper.set(props);\n\t\treturn this;\n\t}\n\n\tget(): OmniOscillatorConstructorOptions {\n\t\tconst options = this._oscillator.get();\n\t\t// @ts-ignore\n\t\toptions.type = this.type;\n\t\treturn options as OmniOscillatorOptions;\n\t}\n\n\t/**\n\t *  connect the oscillator to the frequency and detune signals\n\t */\n\tprivate _createNewOscillator(oscType: OmniOscSourceType): void {\n\t\tif (oscType !== this._sourceType) {\n\t\t\tthis._sourceType = oscType;\n\t\t\t// tslint:disable-next-line: variable-name\n\t\t\tconst OscConstructor = OmniOscillatorSourceMap[oscType];\n\t\t\t// short delay to avoid clicks on the change\n\t\t\tconst now = this.now();\n\t\t\tif (this._oscillator) {\n\t\t\t\tconst oldOsc = this._oscillator;\n\t\t\t\toldOsc.stop(now);\n\t\t\t\t// dispose the old one\n\t\t\t\tthis.context.setTimeout(() => oldOsc.dispose(), this.blockTime);\n\t\t\t}\n\t\t\tthis._oscillator = new OscConstructor({\n\t\t\t\tcontext : this.context,\n\t\t\t});\n\t\t\tthis.frequency.connect(this._oscillator.frequency);\n\t\t\tthis.detune.connect(this._oscillator.detune);\n\t\t\tthis._oscillator.connect(this.output);\n\t\t\tthis._oscillator.onstop = () => this.onstop(this);\n\t\t\tif (this.state === \"started\") {\n\t\t\t\tthis._oscillator.start(now);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._oscillator.phase;\n\t}\n\tset phase(phase) {\n\t\tthis._oscillator.phase = phase;\n\t}\n\n\t/**\n\t * The source type of the oscillator.\n\t * @example\n\t * var omniOsc = new OmniOscillator(440, \"fmsquare\");\n\t * omniOsc.sourceType // 'fm'\n\t */\n\tget sourceType(): OmniOscSourceType {\n\t\treturn this._sourceType;\n\t}\n\tset sourceType(sType) {\n\t\t// the basetype defaults to sine\n\t\tlet baseType = \"sine\";\n\t\tif (this._oscillator.type !== \"pwm\" && this._oscillator.type !== \"pulse\") {\n\t\t\tbaseType = this._oscillator.type;\n\t\t}\n\n\t\t// set the type\n\t\tif (sType === \"fm\") {\n\t\t\tthis.type = \"fm\" + baseType as OmniOscillatorType;\n\t\t} else if (sType === \"am\") {\n\t\t\tthis.type = \"am\" + baseType as OmniOscillatorType;\n\t\t} else if (sType === \"fat\") {\n\t\t\tthis.type = \"fat\" + baseType as OmniOscillatorType;\n\t\t} else if (sType === \"oscillator\") {\n\t\t\tthis.type = baseType as OmniOscillatorType;\n\t\t} else if (sType === \"pulse\") {\n\t\t\tthis.type = \"pulse\";\n\t\t} else if (sType === \"pwm\") {\n\t\t\tthis.type = \"pwm\";\n\t\t}\n\t}\n\n\tprivate _getOscType<SourceType extends OmniOscSourceType>(\n\t\tosc: AnyOscillator,\n\t\tsourceType: SourceType,\n\t): osc is OmniOscillatorSource[SourceType] {\n\t\treturn osc instanceof OmniOscillatorSourceMap[sourceType];\n\t}\n\n\t/**\n\t * The base type of the oscillator.\n\t * @example\n\t * var omniOsc = new OmniOscillator(440, \"fmsquare4\");\n\t * omniOsc.sourceType // 'fm'\n\t * omniOsc.baseType //'square'\n\t * omniOsc.partialCount //4\n\t */\n\tget baseType(): OscillatorType | \"pwm\" | \"pulse\" {\n\t\treturn this._oscillator.baseType;\n\t}\n\tset baseType(baseType) {\n\t\tif (!this._getOscType(this._oscillator, \"pulse\") &&\n\t\t\t!this._getOscType(this._oscillator, \"pwm\") &&\n\t\t\tbaseType !== \"pulse\" && baseType !== \"pwm\") {\n\t\t\tthis._oscillator.baseType = baseType;\n\t\t}\n\t}\n\n\t/**\n\t * The width of the oscillator when sourceType === \"pulse\".\n\t * @example\n\t * var omniOsc = new OmniOscillator(440, \"pulse\");\n\t * //can access the width attribute only if type === \"pulse\"\n\t * omniOsc.width.value = 0.2;\n\t */\n\tget width(): IsPulseOscillator<OscType, Signal<AudioRange>> {\n\t\tif (this._getOscType(this._oscillator, \"pulse\")) {\n\t\t\treturn this._oscillator.width as IsPulseOscillator<OscType, Signal<AudioRange>> ;\n\t\t} else {\n\t\t\treturn undefined as IsPulseOscillator<OscType, Signal<AudioRange>> ;\n\t\t}\n\t}\n\n\t/**\n\t * The number of detuned oscillators, when sourceType === \"fat\".\n\t */\n\tget count(): IsFatOscillator<OscType, number> {\n\t\tif (this._getOscType(this._oscillator, \"fat\")) {\n\t\t\treturn this._oscillator.count as IsFatOscillator<OscType, number>;\n\t\t} else {\n\t\t\treturn undefined as IsFatOscillator<OscType, number>;\n\t\t}\n\t}\n\tset count(count) {\n\t\tif (this._getOscType(this._oscillator, \"fat\") && isNumber(count)) {\n\t\t\tthis._oscillator.count = count;\n\t\t}\n\t}\n\n\t/**\n\t * The detune spread between the oscillators. If \"count\" is\n\t * set to 3 oscillators and the \"spread\" is set to 40,\n\t * the three oscillators would be detuned like this: [-20, 0, 20]\n\t * for a total detune spread of 40 cents. See Tone.FatOscillator\n\t * for more info.\n\t */\n\tget spread(): IsFatOscillator<OscType, Cents> {\n\t\tif (this._getOscType(this._oscillator, \"fat\")) {\n\t\t\treturn this._oscillator.spread as IsFatOscillator<OscType, Cents>;\n\t\t} else {\n\t\t\treturn undefined as IsFatOscillator<OscType, Cents>;\n\t\t}\n\t}\n\tset spread(spread) {\n\t\tif (this._getOscType(this._oscillator, \"fat\") && isNumber(spread)) {\n\t\t\tthis._oscillator.spread = spread;\n\t\t}\n\t}\n\n\t/**\n\t * The type of the modulator oscillator. Only if the oscillator\n\t * is set to \"am\" or \"fm\" types. see. Tone.AMOscillator or Tone.FMOscillator\n\t * for more info.\n\t */\n\tget modulationType(): IsAmOrFmOscillator<OscType, ToneOscillatorType> {\n\t\tif (this._getOscType(this._oscillator, \"fm\") || this._getOscType(this._oscillator, \"am\")) {\n\t\t\treturn this._oscillator.modulationType as IsAmOrFmOscillator<OscType, ToneOscillatorType>;\n\t\t} else {\n\t\t\treturn undefined as IsAmOrFmOscillator<OscType, ToneOscillatorType>;\n\t\t}\n\t}\n\tset modulationType(mType) {\n\t\tif ((this._getOscType(this._oscillator, \"fm\") || this._getOscType(this._oscillator, \"am\")) && isString(mType)) {\n\t\t\tthis._oscillator.modulationType = mType;\n\t\t}\n\t}\n\n\t/**\n\t * The modulation index which is in essence the depth or amount of the modulation. In other terms it is the\n\t * ratio of the frequency of the modulating signal (mf) to the amplitude of the\n\t * modulating signal (ma) -- as in ma/mf.\n\t * See Tone.FMOscillator for more info.\n\t */\n\tget modulationIndex(): IsFMOscillator<OscType, Signal<Positive>> {\n\t\tif (this._getOscType(this._oscillator, \"fm\")) {\n\t\t\treturn this._oscillator.modulationIndex as IsFMOscillator<OscType, Signal<Positive>>;\n\t\t} else {\n\t\t\treturn undefined as IsFMOscillator<OscType, Signal<Positive>>;\n\t\t}\n\t}\n\n\t/**\n\t *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators.\n\t *  A harmonicity of 1 gives both oscillators the same frequency.\n\t *  Harmonicity = 2 means a change of an octave. See Tone.AMOscillator or Tone.FMOscillator\n\t *  for more info.\n\t */\n\tget harmonicity(): IsAmOrFmOscillator<OscType, Signal<Positive>> {\n\t\tif (this._getOscType(this._oscillator, \"fm\") || this._getOscType(this._oscillator, \"am\")) {\n\t\t\treturn this._oscillator.harmonicity as IsAmOrFmOscillator<OscType, Signal<Positive>>;\n\t\t} else {\n\t\t\treturn undefined as IsAmOrFmOscillator<OscType, Signal<Positive>>;\n\t\t}\n\t}\n\n\t/**\n\t * The modulationFrequency Signal of the oscillator\n\t * (only if the oscillator type is set to pwm). See\n\t * Tone.PWMOscillator for more info.\n\t * @example\n\t * var omniOsc = new OmniOscillator(440, \"pwm\");\n\t * //can access the modulationFrequency attribute only if type === \"pwm\"\n\t * omniOsc.modulationFrequency.value = 0.2;\n\t */\n\tget modulationFrequency(): IsPWMOscillator<OscType, Signal<Frequency>> {\n\t\tif (this._getOscType(this._oscillator, \"pwm\")) {\n\t\t\treturn this._oscillator.modulationFrequency as IsPWMOscillator<OscType, Signal<Frequency>>;\n\t\t} else {\n\t\t\treturn undefined as IsPWMOscillator<OscType, Signal<Frequency>>;\n\t\t}\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.detune.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis._oscillator.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { Positive, Time } from \"../../core/type/Units\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp } from \"../../core/util/Interface\";\nimport { isUndef } from \"../../core/util/TypeCheck\";\nimport { Source, SourceOptions } from \"../Source\";\nimport { ToneBufferSource } from \"./BufferSource\";\n\ninterface PlayerOptions extends SourceOptions {\n\tonload: () => void;\n\tplaybackRate: Positive;\n\tloop: boolean;\n\tautostart: boolean;\n\tloopStart: Time;\n\tloopEnd: Time;\n\treverse: boolean;\n\tfadeIn: Time;\n\tfadeOut: Time;\n\turl?: ToneAudioBuffer | string | AudioBuffer;\n}\n\n/**\n * Player is an audio file player with start, loop, and stop functions.\n *\n * @param url Either the AudioBuffer or the url from which to load the AudioBuffer\n * @param onload The function to invoke when the buffer is loaded.\n *                            Recommended to use Tone.Buffer.on('load') instead.\n * @example\n * var player = new Player(\"./path/to/sample.mp3\").toDestination();\n * //play as soon as the buffer is loaded\n * player.autostart = true;\n */\nexport class Player extends Source<PlayerOptions> {\n\n\tname = \"Player\";\n\n\t/**\n\t * If the file should play as soon\n\t * as the buffer is loaded.\n\t * @example\n\t * //will play as soon as it's loaded\n\t * var player = new Player({\n\t * \t\"url\" : \"./path/to/sample.mp3\",\n\t * \t\"autostart\" : true,\n\t * }).toDestination();\n\t */\n\tautostart: boolean;\n\n\t/**\n\t *  The buffer\n\t */\n\tprivate _buffer: ToneAudioBuffer;\n\n\t/**\n\t *  if the buffer should loop once it's over\n\t */\n\tprivate _loop: boolean;\n\n\t/**\n\t *  if 'loop' is true, the loop will start at this position\n\t */\n\tprivate _loopStart: Time;\n\n\t/**\n\t *  if 'loop' is true, the loop will end at this position\n\t */\n\tprivate _loopEnd: Time;\n\n\t/**\n\t *  the playback rate\n\t */\n\tprivate _playbackRate: Positive;\n\n\t/**\n\t *  All of the active buffer source nodes\n\t */\n\tprivate _activeSources: Set<ToneBufferSource> = new Set();\n\n\t/**\n\t *  The fadeIn time of the amplitude envelope.\n\t */\n\tfadeIn: Time;\n\n\t/**\n\t *  The fadeOut time of the amplitude envelope.\n\t */\n\tfadeOut: Time;\n\n\tconstructor(options?: Partial<PlayerOptions>);\n\tconstructor(url?: string | AudioBuffer | ToneAudioBuffer, onload?: () => void);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Player.getDefaults(), arguments, [\"url\", \"onload\"]));\n\t\tconst options = optionsFromArguments(Player.getDefaults(), arguments, [\"url\", \"onload\"]);\n\n\t\tthis._buffer = new ToneAudioBuffer({\n\t\t\tonload: this._onload.bind(this, options.onload),\n\t\t\treverse: options.reverse,\n\t\t\turl: options.url,\n\t\t});\n\t\tthis.autostart = options.autostart;\n\t\tthis._loop = options.loop;\n\t\tthis._loopStart = options.loopStart;\n\t\tthis._loopEnd = options.loopEnd;\n\t\tthis._playbackRate = options.playbackRate;\n\t\tthis.fadeIn = options.fadeIn;\n\t\tthis.fadeOut = options.fadeOut;\n\t}\n\n\tstatic getDefaults(): PlayerOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tautostart : false,\n\t\t\tfadeIn : 0,\n\t\t\tfadeOut : 0,\n\t\t\tloop : false,\n\t\t\tloopEnd : 0,\n\t\t\tloopStart : 0,\n\t\t\tonload : noOp,\n\t\t\tplaybackRate : 1,\n\t\t\treverse : false,\n\t\t});\n\t}\n\n\t/**\n\t * Load the audio file as an audio buffer.\n\t * Decodes the audio asynchronously and invokes\n\t * the callback once the audio buffer loads.\n\t * Note: this does not need to be called if a url\n\t * was passed in to the constructor. Only use this\n\t * if you want to manually load a new url.\n\t * @param url The url of the buffer to load. Filetype support depends on the browser.\n\t */\n\tasync load(url: string): Promise<this> {\n\t\tawait this._buffer.load(url);\n\t\tthis._onload();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Internal callback when the buffer is loaded.\n\t */\n\tprivate _onload(callback: () => void = noOp): void {\n\t\tcallback();\n\t\tif (this.autostart) {\n\t\t\tthis.start();\n\t\t}\n\t}\n\n\t/**\n\t * Internal callback when the buffer is done playing.\n\t */\n\tprivate _onSourceEnd(source: ToneBufferSource): void {\n\t\t// invoke the onstop function\n\t\tthis.onstop(this);\n\n\t\t// delete the source from the active sources\n\t\tthis._activeSources.delete(source);\n\t\tif (this._activeSources.size === 0 && !this._synced) {\n\t\t\tthis._state.setStateAtTime(\"stopped\", this.now());\n\t\t}\n\t}\n\n\t/**\n\t *  Play the buffer at the given startTime. Optionally add an offset\n\t *  and/or duration which will play the buffer from a position\n\t *  within the buffer for the given duration.\n\t *\n\t *  @param  time When the player should start.\n\t *  @param  offset The offset from the beginning of the sample\n\t *                                 to start at.\n\t *  @param  duration How long the sample should play. If no duration is given, it will default to the full length\n\t *                   of the sample (minus any offset)\n\t */\n\tstart(time?: Time, offset?: Time, duration?: Time): this {\n\t\tsuper.start(time, offset, duration);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Internal start method\n\t */\n\tprotected _start(startTime?: Time, offset?: Time, duration?: Time): void {\n\t\t// if it's a loop the default offset is the loopstart point\n\t\tif (this._loop) {\n\t\t\toffset = defaultArg(offset, this._loopStart);\n\t\t} else {\n\t\t\t// otherwise the default offset is 0\n\t\t\toffset = defaultArg(offset, 0);\n\t\t}\n\n\t\t// compute the values in seconds\n\t\tlet comptuedOffset = this.toSeconds(offset);\n\n\t\t// if it's synced, it should factor in the playback rate for computing the offset\n\t\tif (this._synced) {\n\t\t\tcomptuedOffset *= this._playbackRate;\n\t\t}\n\n\t\t// compute the duration which is either the passed in duration of the buffer.duration - offset\n\t\tconst origDuration = duration;\n\t\tduration = defaultArg(duration, Math.max(this._buffer.duration - comptuedOffset, 0));\n\t\tlet computedDuration = this.toSeconds(duration);\n\n\t\t// scale it by the playback rate\n\t\tcomputedDuration = computedDuration / this._playbackRate;\n\n\t\t// get the start time\n\t\tstartTime = this.toSeconds(startTime);\n\n\t\t// make the source\n\t\tconst source = new ToneBufferSource({\n\t\t\tbuffer : this._buffer,\n\t\t\tcontext: this.context,\n\t\t\tfadeIn : this.fadeIn,\n\t\t\tfadeOut : this.fadeOut,\n\t\t\tloop : this._loop,\n\t\t\tloopEnd : this._loopEnd,\n\t\t\tloopStart : this._loopStart,\n\t\t\tonended : this._onSourceEnd.bind(this),\n\t\t\tplaybackRate : this._playbackRate,\n\t\t}).connect(this.output);\n\n\t\t// set the looping properties\n\t\tif (!this._loop && !this._synced) {\n\t\t\t// if it's not looping, set the state change at the end of the sample\n\t\t\tthis._state.setStateAtTime(\"stopped\", startTime + computedDuration, {\n\t\t\t\timplicitEnd: true,\n\t\t\t});\n\t\t}\n\n\t\t// add it to the array of active sources\n\t\tthis._activeSources.add(source);\n\n\t\t// start it\n\t\tif (this._loop && isUndef(origDuration)) {\n\t\t\tsource.start(startTime, comptuedOffset);\n\t\t} else {\n\t\t\t// subtract the fade out time\n\t\t\tsource.start(startTime, comptuedOffset, computedDuration - this.toSeconds(this.fadeOut));\n\t\t}\n\t}\n\n\t/**\n\t *  Stop playback.\n\t */\n\tprotected _stop(time?: Time): void {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._activeSources.forEach(source => source.stop(computedTime));\n\t}\n\n\t/**\n\t * Stop and then restart the player from the beginning (or offset)\n\t * @param  time When the player should start.\n\t * @param  offset The offset from the beginning of the sample to start at.\n\t * @param  duration How long the sample should play. If no duration is given,\n\t * \t\t\t\t\tit will default to the full length of the sample (minus any offset)\n\t */\n\trestart(time?: Time, offset?: Time, duration?: Time): this {\n\t\tthis._stop(time);\n\t\tthis._start(time, offset, duration);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Seek to a specific time in the player's buffer. If the\n\t *  source is no longer playing at that time, it will stop.\n\t *  If you seek to a time that\n\t *  @param {Time} offset The time to seek to.\n\t *  @param {Time=} time The time for the seek event to occur.\n\t *  @return {Player} this\n\t *  @example\n\t * source.start(0.2);\n\t * source.stop(0.4);\n\t */\n\tseek(offset: Time, when?: Time): this {\n\t\tconst computedTime = this.toSeconds(when);\n\t\tif (this._state.getValueAtTime(computedTime) === \"started\") {\n\t\t\tconst comptuedOffset = this.toSeconds(offset);\n\t\t\t// if it's currently playing, stop it\n\t\t\tthis._stop(computedTime);\n\t\t\t// restart it at the given time\n\t\t\tthis._start(computedTime, comptuedOffset);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set the loop start and end. Will only loop if loop is set to true.\n\t * @param loopStart The loop end time\n\t * @param loopEnd The loop end time\n\t * @example\n\t * //loop 0.1 seconds of the file.\n\t * player.setLoopPoints(0.2, 0.3);\n\t * player.loop = true;\n\t */\n\tsetLoopPoints(loopStart: Time, loopEnd: Time): this {\n\t\tthis.loopStart = loopStart;\n\t\tthis.loopEnd = loopEnd;\n\t\treturn this;\n\t}\n\n\t/**\n\t * If loop is true, the loop will start at this position.\n\t */\n\tget loopStart(): Time {\n\t\treturn this._loopStart;\n\t}\n\tset loopStart(loopStart) {\n\t\tthis._loopStart = loopStart;\n\t\t// get the current source\n\t\tthis._activeSources.forEach(source => {\n\t\t\tsource.loopStart = loopStart;\n\t\t});\n\t}\n\n\t/**\n\t * If loop is true, the loop will end at this position.\n\t */\n\tget loopEnd(): Time {\n\t\treturn this._loopEnd;\n\t}\n\tset loopEnd(loopEnd) {\n\t\tthis._loopEnd = loopEnd;\n\t\t// get the current source\n\t\tthis._activeSources.forEach(source => {\n\t\t\tsource.loopEnd = loopEnd;\n\t\t});\n\t}\n\n\t/**\n\t * The audio buffer belonging to the player.\n\t */\n\tget buffer(): ToneAudioBuffer {\n\t\treturn this._buffer;\n\t}\n\tset buffer(buffer) {\n\t\tthis._buffer.set(buffer);\n\t}\n\n\t/**\n\t * If the buffer should loop once it's over.\n\t */\n\tget loop(): boolean {\n\t\treturn this._loop;\n\t}\n\tset loop(loop) {\n\t\t// if no change, do nothing\n\t\tif (this._loop === loop) {\n\t\t\treturn;\n\t\t}\n\t\tthis._loop = loop;\n\t\t// set the loop of all of the sources\n\t\tthis._activeSources.forEach(source => {\n\t\t\tsource.loop = loop;\n\t\t});\n\t\tif (loop) {\n\t\t\t// remove the next stopEvent\n\t\t\tconst stopEvent = this._state.getNextState(\"stopped\", this.now());\n\t\t\tif (stopEvent) {\n\t\t\t\tthis._state.cancel(stopEvent.time);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * The playback speed. 1 is normal speed. This is not a signal because\n\t * Safari and iOS currently don't support playbackRate as a signal.\n\t */\n\tget playbackRate(): Positive {\n\t\treturn this._playbackRate;\n\t}\n\tset playbackRate(rate) {\n\t\tthis._playbackRate = rate;\n\t\tconst now = this.now();\n\n\t\t// cancel the stop event since it's at a different time now\n\t\tconst stopEvent = this._state.getNextState(\"stopped\", now);\n\t\tif (stopEvent && stopEvent.implicitEnd) {\n\t\t\tthis._state.cancel(stopEvent.time);\n\t\t\tthis._activeSources.forEach(source => source.cancelStop());\n\t\t}\n\n\t\t// set all the sources\n\t\tthis._activeSources.forEach(source => {\n\t\t\tsource.playbackRate.setValueAtTime(rate, now);\n\t\t});\n\t}\n\n\t/**\n\t * The direction the buffer should play in\n\t */\n\tget reverse(): boolean {\n\t\treturn this._buffer.reverse;\n\t}\n\tset reverse(rev) {\n\t\tthis._buffer.reverse = rev;\n\t}\n\n\t/**\n\t * If the buffer is loaded\n\t */\n\tget loaded(): boolean {\n\t\treturn this._buffer.loaded;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\t// disconnect all of the players\n\t\tthis._activeSources.forEach(source => source.dispose());\n\t\tthis._activeSources.clear();\n\t\tthis._buffer.dispose();\n\t\treturn this;\n\t}\n}\n","import { connectSeries } from \"../core/Connect\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Param } from \"../core/context/Param\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Signal, SignalOptions } from \"./Signal\";\n\n/**\n * Add a signal and a number or two signals. When no value is\n * passed into the constructor, Tone.Add will sum input and `addend`\n * If a value is passed into the constructor, the it will be added to the input.\n *\n * @param value If no value is provided, Tone.Add will sum the first  and second inputs.\n * @example\n * var signal = new Signal(2);\n * var add = new Add(2);\n * signal.connect(add);\n * //the output of add equals 4\n * @example\n * //if constructed with no arguments\n * //it will add the first and second inputs\n * var add = new Add();\n * var sig0 = new Signal(3).connect(add);\n * var sig1 = new Signal(4).connect(add.addend);\n * //the output of add equals 7.\n */\nexport class Add extends Signal {\n\n\toverride = false;\n\n\treadonly name = \"Add\";\n\n\t/**\n\t *  the summing node\n\t */\n\tprivate _sum: Gain = new Gain({ context: this.context });\n\treadonly input = this._sum;\n\treadonly output = this._sum;\n\n\t/**\n\t * The value which is added to the input signal\n\t */\n\treadonly addend: Param<number> = this._param;\n\n\tconstructor(options?: Partial<SignalOptions<number>>);\n\t// tslint:disable-next-line: unified-signatures\n\tconstructor(value?: number);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Add.getDefaults(), arguments, [\"value\"])));\n\n\t\tconnectSeries(this._constantSource, this._sum);\n\t}\n\n\tstatic getDefaults(): SignalOptions<number> {\n\t\treturn Object.assign(Signal.getDefaults(), {\n\t\t\tvalue: 0,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._sum.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { SignalOperator } from \"./SignalOperator\";\nimport { WaveShaper } from \"./WaveShaper\";\n\n/**\n *  Return the absolute value of an incoming signal.\n *\n *  @example\n * var signal = new Tone.Signal(-1);\n * var abs = new Tone.Abs();\n * signal.connect(abs);\n * //the output of abs is 1.\n */\nexport class Abs extends SignalOperator<ToneAudioNodeOptions> {\n\n\tname = \"Abs\";\n\n\t/**\n\t * The node which converts the audio ranges\n\t */\n\tprivate _abs = new WaveShaper({\n\t\tcontext: this.context,\n\t\tmapping: val => {\n\t\t\tif (Math.abs(val) < 0.001) {\n\t\t\t\treturn 0;\n\t\t\t} else {\n\t\t\t\treturn Math.abs(val);\n\t\t\t}\n\t\t},\n\t});\n\n\t/**\n\t * The AudioRange input [-1, 1]\n\t */\n\tinput = this._abs;\n\n\t/**\n\t * The output range [0, 1]\n\t */\n\toutput = this._abs;\n\n\t/**\n\t *  clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._abs.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { SignalOperator } from \"./SignalOperator\";\nimport { WaveShaper } from \"./WaveShaper\";\n\n/**\n * GainToAudio converts an input in NormalRange [0,1] to AudioRange [-1,1].\n * See {@link AudioToGain}.\n *\n * @example\n * var a2g = new GainToAudio();\n */\nexport class GainToAudio extends SignalOperator<ToneAudioNodeOptions> {\n\n\tname = \"GainToAudio\";\n\n\t/**\n\t * The node which converts the audio ranges\n\t */\n\tprivate _norm = new WaveShaper({\n\t\tcontext: this.context,\n\t\tmapping: x => Math.abs(x) * 2 - 1,\n\t});\n\n\t/**\n\t * The NormalRange input [0, 1]\n\t */\n\tinput = this._norm;\n\n\t/**\n\t * The AudioRange output [-1, 1]\n\t */\n\toutput = this._norm;\n\n\t/**\n\t *  clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._norm.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Multiply } from \"./Multiply\";\nimport { SignalOperator } from \"./SignalOperator\";\n\n/**\n *  @class Negate the incoming signal. i.e. an input signal of 10 will output -10\n *\n *  @constructor\n *  @extends {Tone.SignalBase}\n *  @example\n * var neg = new Negate();\n * var sig = new Signal(-2).connect(neg);\n * //output of neg is positive 2.\n */\nexport class Negate extends SignalOperator<ToneAudioNodeOptions> {\n\n\tname = \"Negate\";\n\n\t/**\n\t *  negation is done by multiplying by -1\n\t */\n\tprivate _multiply: Multiply = new Multiply({\n\t\tcontext: this.context,\n\t\tvalue: -1,\n\t});\n\n\t/**\n\t * The input and output are equal to the multiply node\n\t */\n\tinput = this._multiply;\n\toutput = this._multiply;\n\n\t/**\n\t *  clean up\n\t *  @returns {Negate} this\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._multiply.dispose();\n\t\treturn this;\n\t}\n}\n","import { connectSeries } from \"../core/Connect\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Param } from \"../core/context/Param\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Negate } from \"../signal/Negate\";\nimport { Signal, SignalOptions } from \"../signal/Signal\";\n\n/**\n * Subtract the signal connected to the input is subtracted from the signal connected\n * The subtrahend.\n *\n * @param value The value to subtract from the incoming signal. If the value\n *                         is omitted, it will subtract the second signal from the first.\n * @example\n * var sub = new Subtract(1);\n * var sig = new Tone.Signal(4).connect(sub);\n * //the output of sub is 3.\n * @example\n * var sub = new Subtract();\n * var sigA = new Tone.Signal(10);\n * var sigB = new Tone.Signal(2.5);\n * sigA.connect(sub);\n * sigB.connect(sub.subtrahend);\n * //output of sub is 7.5\n */\nexport class Subtract extends Signal {\n\n\toverride = false;\n\n\treadonly name = \"Subtract\";\n\n\t/**\n\t *  the summing node\n\t */\n\tprivate _sum: Gain = new Gain({ context: this.context });\n\tinput = this._sum;\n\toutput = this._sum;\n\n\t/**\n\t *  Negate the input of the second input before connecting it to the summing node.\n\t */\n\tprivate _neg: Negate = new Negate({ context : this.context });\n\n\t/**\n\t * The value which is subtracted from the main signal\n\t */\n\tsubtrahend: Param<number> = this._param;\n\n\tconstructor(options?: Partial<SignalOptions<number>>);\n\t// tslint:disable-next-line: unified-signatures\n\tconstructor(value?: number);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Subtract.getDefaults(), arguments, [\"value\"])));\n\n\t\tconnectSeries(this._constantSource, this._neg, this._sum);\n\t}\n\n\tstatic getDefaults(): SignalOptions<number> {\n\t\treturn Object.assign(Signal.getDefaults(), {\n\t\t\tvalue: 0,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._neg.dispose();\n\t\tthis._sum.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../core/context/Gain\";\nimport { connect, disconnect, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { SignalOperator } from \"./SignalOperator\";\n\n/**\n *  Tone.Zero outputs 0's at audio-rate. The reason this has to be\n *  it's own class is that many browsers optimize out Tone.Signal\n *  with a value of 0 and will not process nodes further down the graph.\n */\nexport class Zero extends SignalOperator<ToneAudioNodeOptions> {\n\n\treadonly name = \"Zero\";\n\n\t/**\n\t * The gain node which connects the constant source to the output\n\t */\n\tprivate _gain = new Gain({ context : this.context });\n\n\t/**\n\t * Only outputs 0\n\t */\n\toutput = this._gain;\n\n\t/**\n\t * no input node\n\t */\n\tinput = undefined;\n\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Zero.getDefaults(), arguments)));\n\t\tconnect(this.context.getConstant(0), this._gain);\n\t}\n\n\t/**\n\t * clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tdisconnect(this.context.getConstant(0), this._gain);\n\t\treturn this;\n\t}\n}\n","import { InputNode, OutputNode } from \"../../core/context/ToneAudioNode\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { NormalRange, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { isArray, isObject, isString } from \"../../core/util/TypeCheck\";\nimport { connectSignal, Signal } from \"../../signal/Signal\";\n\ntype BasicEnvelopeCurve = \"linear\" | \"exponential\";\ntype InternalEnvelopeCurve = BasicEnvelopeCurve | number[];\nexport type EnvelopeCurve = EnvelopeCurveName | number[];\n\nexport interface EnvelopeOptions extends ToneAudioNodeOptions {\n\tattack: Time;\n\tdecay: Time;\n\tsustain: NormalRange;\n\trelease: Time;\n\tattackCurve: EnvelopeCurve;\n\treleaseCurve: EnvelopeCurve;\n\tdecayCurve: BasicEnvelopeCurve;\n}\n\n/**\n *  Envelope is an [ADSR](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope)\n *  envelope generator. Envelope outputs a signal which\n *  can be connected to an AudioParam or Tone.Signal.\n * ```\n *           /\\\n *          /  \\\n *         /    \\\n *        /      \\\n *       /        \\___________\n *      /                     \\\n *     /                       \\\n *    /                         \\\n *   /                           \\\n * ```\n *\n *  @param attack The amount of time it takes for the envelope to go from\n *                         0 to it's maximum value.\n *  @param decay\tThe period of time after the attack that it takes for the envelope\n *                       \tto fall to the sustain value. Value must be greater than 0.\n *  @param sustain\tThe percent of the maximum value that the envelope rests at until\n *                                \tthe release is triggered.\n *  @param release\tThe amount of time after the release is triggered it takes to reach 0.\n *                         \tValue must be greater than 0.\n *  @example\n * //an amplitude envelope\n * var gainNode = Tone.context.createGain();\n * var env = new Envelope({\n * \t\"attack\" : 0.1,\n * \t\"decay\" : 0.2,\n * \t\"sustain\" : 1,\n * \t\"release\" : 0.8,\n * });\n * env.connect(gainNode.gain);\n */\nexport class Envelope extends ToneAudioNode<EnvelopeOptions> {\n\n\treadonly name: string = \"Envelope\";\n\n\t/**\n\t * When triggerAttack is called, the attack time is the amount of\n\t * time it takes for the envelope to reach it's maximum value.\n\t * ```\n\t *           /\\\n\t *          /X \\\n\t *         /XX  \\\n\t *        /XXX   \\\n\t *       /XXXX    \\___________\n\t *      /XXXXX                \\\n\t *     /XXXXXX                 \\\n\t *    /XXXXXXX                  \\\n\t *   /XXXXXXXX                   \\\n\t * ```\n\t */\n\tattack: Time;\n\n\t/**\n\t * After the attack portion of the envelope, the value will fall\n\t * over the duration of the decay time to it's sustain value.\n\t * ```\n\t *           /\\\n\t *          / X\\\n\t *         /  XX\\\n\t *        /   XXX\\\n\t *       /    XXXX\\___________\n\t *      /     XXXXX           \\\n\t *     /      XXXXX            \\\n\t *    /       XXXXX             \\\n\t *   /        XXXXX              \\\n\t * ```\n\t */\n\tdecay: Time;\n\n\t/**\n\t * \tThe sustain value is the value\n\t * \twhich the envelope rests at after triggerAttack is\n\t * \tcalled, but before triggerRelease is invoked.\n\t * ```\n\t *           /\\\n\t *          /  \\\n\t *         /    \\\n\t *        /      \\\n\t *       /        \\___________\n\t *      /          XXXXXXXXXXX\\\n\t *     /           XXXXXXXXXXX \\\n\t *    /            XXXXXXXXXXX  \\\n\t *   /             XXXXXXXXXXX   \\\n\t * ```\n\t */\n\tsustain: NormalRange;\n\n\t/**\n\t *  After triggerRelease is called, the envelope's\n\t *  value will fall to it's miminum value over the\n\t *  duration of the release time.\n\t * ```\n\t *           /\\\n\t *          /  \\\n\t *         /    \\\n\t *        /      \\\n\t *       /        \\___________\n\t *      /                    X\\\n\t *     /                     XX\\\n\t *    /                      XXX\\\n\t *   /                       XXXX\\\n\t * ```\n\t */\n\trelease: Time;\n\n\t/**\n\t *  The automation curve type for the attack\n\t */\n\tprivate _attackCurve!: InternalEnvelopeCurve;\n\n\t/**\n\t *  The automation curve type for the decay\n\t */\n\tprivate _decayCurve!: BasicEnvelopeCurve;\n\n\t/**\n\t *  The automation curve type for the release\n\t */\n\tprivate _releaseCurve!: InternalEnvelopeCurve;\n\n\t/**\n\t *  the signal which is output.\n\t */\n\tprotected _sig: Signal<NormalRange> = new Signal({\n\t\tcontext: this.context,\n\t\tvalue: 0,\n\t});\n\n\t/**\n\t * The output signal of the envelope\n\t */\n\toutput: OutputNode = this._sig;\n\n\t/**\n\t * Envelope has no input\n\t */\n\tinput: InputNode | undefined = undefined;\n\n\tconstructor(attack?: Time, decay?: Time, sustain?: NormalRange, release?: Time);\n\tconstructor(options?: Partial<EnvelopeOptions>)\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Envelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]));\n\t\tconst options = optionsFromArguments(Envelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]);\n\n\t\tthis.attack = options.attack;\n\t\tthis.decay = options.decay;\n\t\tthis.sustain = options.sustain;\n\t\tthis.release = options.release;\n\t\tthis.attackCurve = options.attackCurve;\n\t\tthis.releaseCurve = options.releaseCurve;\n\t\tthis.decayCurve = options.decayCurve;\n\t}\n\n\tstatic getDefaults(): EnvelopeOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tattack : 0.01,\n\t\t\tattackCurve : \"linear\" as EnvelopeCurveName,\n\t\t\tdecay : 0.1,\n\t\t\tdecayCurve : \"exponential\" as BasicEnvelopeCurve,\n\t\t\trelease : 1,\n\t\t\treleaseCurve : \"exponential\" as EnvelopeCurveName,\n\t\t\tsustain : 0.5,\n\t\t});\n\t}\n\n\t/**\n\t * Read the current value of the envelope. Useful for\n\t * syncronizing visual output to the envelope.\n\t */\n\tget value(): NormalRange {\n\t\treturn this.getValueAtTime(this.now());\n\t}\n\n\t/**\n\t *  Get the curve\n\t *  @param  curve\n\t *  @param  direction  In/Out\n\t *  @return  {String}  The curve name\n\t *  @private\n\t */\n\tprivate _getCurve(curve: InternalEnvelopeCurve, direction: EnvelopeDirection): EnvelopeCurve {\n\t\tif (isString(curve)) {\n\t\t\treturn curve;\n\t\t} else {\n\t\t\t// look up the name in the curves array\n\t\t\tlet curveName: EnvelopeCurveName;\n\t\t\tfor (curveName in EnvelopeCurves) {\n\t\t\t\tif (EnvelopeCurves[curveName][direction] === curve) {\n\t\t\t\t\treturn curveName;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// return the custom curve\n\t\t\treturn curve;\n\t\t}\n\t}\n\n\t/**\n\t *  Assign a the curve to the given name using the direction\n\t *  @param  name\n\t *  @param  direction In/Out\n\t *  @param  curve\n\t */\n\tprivate _setCurve(\n\t\tname: \"_attackCurve\" | \"_decayCurve\" | \"_releaseCurve\",\n\t\tdirection: EnvelopeDirection,\n\t\tcurve: EnvelopeCurve,\n\t): void {\n\t\t// check if it's a valid type\n\t\tif (isString(curve) && Reflect.has(EnvelopeCurves, curve)) {\n\t\t\tconst curveDef = EnvelopeCurves[curve];\n\t\t\tif (isObject(curveDef)) {\n\t\t\t\tif (name !== \"_decayCurve\") {\n\t\t\t\t\tthis[name] = curveDef[direction];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis[name] = curveDef;\n\t\t\t}\n\t\t} else if (isArray(curve) && name !== \"_decayCurve\") {\n\t\t\tthis[name] = curve;\n\t\t} else {\n\t\t\tthrow new Error(\"Envelope: invalid curve: \" + curve);\n\t\t}\n\t}\n\n\t/**\n\t * The shape of the attack.\n\t * Can be any of these strings:\n\t * * \"linear\"\n\t * * \"exponential\"\n\t * * \"sine\"\n\t * * \"cosine\"\n\t * * \"bounce\"\n\t * * \"ripple\"\n\t * * \"step\"\n\t *\n\t * Can also be an array which describes the curve. Values\n\t * in the array are evenly subdivided and linearly\n\t * interpolated over the duration of the attack.\n\t * @example\n\t * env.attackCurve = \"linear\";\n\t * @example\n\t * //can also be an array\n\t * env.attackCurve = [0, 0.2, 0.3, 0.4, 1]\n\t */\n\tget attackCurve(): EnvelopeCurve {\n\t\treturn this._getCurve(this._attackCurve, \"In\");\n\t}\n\tset attackCurve(curve) {\n\t\tthis._setCurve(\"_attackCurve\", \"In\", curve);\n\t}\n\n\t/**\n\t * The shape of the release. See the attack curve types.\n\t * @example\n\t * env.releaseCurve = \"linear\";\n\t */\n\tget releaseCurve(): EnvelopeCurve {\n\t\treturn this._getCurve(this._releaseCurve, \"Out\");\n\t}\n\tset releaseCurve(curve) {\n\t\tthis._setCurve(\"_releaseCurve\", \"Out\", curve);\n\t}\n\n\t/**\n\t * The shape of the decay either \"linear\" or \"exponential\"\n\t * @example\n\t * env.decayCurve = \"linear\";\n\t */\n\tget decayCurve(): BasicEnvelopeCurve {\n\t\treturn this._decayCurve;\n\t}\n\tset decayCurve(curve) {\n\t\tthis.assert([\"linear\", \"exponential\"].some(c => c === curve), `Invalid envelope curve: ${curve}`);\n\t\tthis._decayCurve = curve;\n\t}\n\n\t/**\n\t * Trigger the attack/decay portion of the ADSR envelope.\n\t * @param  time When the attack should start.\n\t * @param velocity The velocity of the envelope scales the vales.\n\t *                              number between 0-1\n\t * @example\n\t * //trigger the attack 0.5 seconds from now with a velocity of 0.2\n\t * env.triggerAttack(\"+0.5\", 0.2);\n\t */\n\ttriggerAttack(time?: Time, velocity: NormalRange = 1): this {\n\t\tthis.log(\"triggerAttack\", time, velocity);\n\t\ttime = this.toSeconds(time);\n\t\tconst originalAttack = this.toSeconds(this.attack);\n\t\tlet attack = originalAttack;\n\t\tconst decay = this.toSeconds(this.decay);\n\t\t// check if it's not a complete attack\n\t\tconst currentValue = this.getValueAtTime(time);\n\t\tif (currentValue > 0) {\n\t\t\t// subtract the current value from the attack time\n\t\t\tconst attackRate = 1 / attack;\n\t\t\tconst remainingDistance = 1 - currentValue;\n\t\t\t// the attack is now the remaining time\n\t\t\tattack = remainingDistance / attackRate;\n\t\t}\n\t\t// attack\n\t\tif (attack === 0) {\n\t\t\t// case where the attack time is 0 should set instantly\n\t\t\tthis._sig.setValueAtTime(velocity, time);\n\t\t} else if (this._attackCurve === \"linear\") {\n\t\t\tthis._sig.linearRampTo(velocity, attack, time);\n\t\t} else if (this._attackCurve === \"exponential\") {\n\t\t\tthis._sig.targetRampTo(velocity, attack, time);\n\t\t} else {\n\t\t\tthis._sig.cancelAndHoldAtTime(time);\n\t\t\tlet curve = this._attackCurve;\n\t\t\t// find the starting position in the curve\n\t\t\tfor (let i = 1; i < curve.length; i++) {\n\t\t\t\t// the starting index is between the two values\n\t\t\t\tif (curve[i - 1] <= currentValue && currentValue <= curve[i]) {\n\t\t\t\t\tcurve = this._attackCurve.slice(i);\n\t\t\t\t\t// the first index is the current value\n\t\t\t\t\tcurve[0] = currentValue;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._sig.setValueCurveAtTime(curve, time, attack, velocity);\n\t\t}\n\t\t// decay\n\t\tif (decay) {\n\t\t\tconst decayValue = velocity * this.sustain;\n\t\t\tconst decayStart = time + attack;\n\t\t\tthis.log(\"decay\", decayStart);\n\t\t\tif (this._decayCurve === \"linear\") {\n\t\t\t\tthis._sig.linearRampTo(decayValue, decay, decayStart + this.sampleTime);\n\t\t\t} else {\n\t\t\t\tthis.assert(this._decayCurve === \"exponential\",\n\t\t\t\t\t`decayCurve can only be \"linear\" or \"exponential\", got ${this._decayCurve}`);\n\t\t\t\tthis._sig.exponentialApproachValueAtTime(decayValue, decayStart, decay);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Triggers the release of the envelope.\n\t *  @param  time When the release portion of the envelope should start.\n\t *  @example\n\t *  //trigger release immediately\n\t *  env.triggerRelease();\n\t */\n\ttriggerRelease(time?: Time): this {\n\t\tthis.log(\"triggerRelease\", time);\n\t\ttime = this.toSeconds(time);\n\t\tconst currentValue = this.getValueAtTime(time);\n\t\tif (currentValue > 0) {\n\t\t\tconst release = this.toSeconds(this.release);\n\t\t\tif (this._releaseCurve === \"linear\") {\n\t\t\t\tthis._sig.linearRampTo(0, release, time);\n\t\t\t} else if (this._releaseCurve === \"exponential\") {\n\t\t\t\tthis._sig.targetRampTo(0, release, time);\n\t\t\t} else {\n\t\t\t\tthis.assert(isArray(this._releaseCurve), \"releaseCurve must be either 'linear', 'exponential' or an array\");\n\t\t\t\tthis._sig.cancelAndHoldAtTime(time);\n\t\t\t\tthis._sig.setValueCurveAtTime(this._releaseCurve, time, release, currentValue);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Get the scheduled value at the given time. This will\n\t *  return the unconverted (raw) value.\n\t */\n\tgetValueAtTime(time: Time): NormalRange {\n\t\treturn this._sig.getValueAtTime(time);\n\t}\n\n\t/**\n\t *  triggerAttackRelease is shorthand for triggerAttack, then waiting\n\t *  some duration, then triggerRelease.\n\t *  @param duration The duration of the sustain.\n\t *  @param time When the attack should be triggered.\n\t *  @param velocity The velocity of the envelope.\n\t *  @example\n\t * //trigger the attack and then the release after 0.6 seconds.\n\t * env.triggerAttackRelease(0.6);\n\t */\n\ttriggerAttackRelease(duration: Time, time?: Time, velocity: NormalRange = 1): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis.triggerAttack(time, velocity);\n\t\tthis.triggerRelease(time + this.toSeconds(duration));\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Cancels all scheduled envelope changes after the given time.\n\t */\n\tcancel(after?: Time): this {\n\t\tthis._sig.cancelScheduledValues(this.toSeconds(after));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Connect the envelope to a destination node.\n\t */\n\tconnect(destination: InputNode, outputNumber: number = 0, inputNumber: number = 0): this {\n\t\tconnectSignal(this, destination, outputNumber, inputNumber);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._sig.dispose();\n\t\treturn this;\n\t}\n}\n\ninterface EnvelopeCurveObject {\n\tIn: number[];\n\tOut: number[];\n}\n\ntype EnvelopeDirection = keyof EnvelopeCurveObject;\n\ninterface EnvelopeCurveMap {\n\tlinear: \"linear\";\n\texponential: \"exponential\";\n\tbounce: EnvelopeCurveObject;\n\tcosine: EnvelopeCurveObject;\n\tsine: EnvelopeCurveObject;\n\tripple: EnvelopeCurveObject;\n\tstep: EnvelopeCurveObject;\n}\n\ntype EnvelopeCurveName =  keyof EnvelopeCurveMap;\n\n/**\n *  Generate some complex envelope curves.\n */\n// tslint:disable-next-line: variable-name\nconst EnvelopeCurves: EnvelopeCurveMap = (() => {\n\n\tconst curveLen = 128;\n\n\tlet i: number;\n\tlet k: number;\n\n\t// cosine curve\n\tconst cosineCurve: number[] = [];\n\tfor (i = 0; i < curveLen; i++) {\n\t\tcosineCurve[i] = Math.sin((i / (curveLen - 1)) * (Math.PI / 2));\n\t}\n\n\t// ripple curve\n\tconst rippleCurve: number[] = [];\n\tconst rippleCurveFreq = 6.4;\n\tfor (i = 0; i < curveLen - 1; i++) {\n\t\tk = (i / (curveLen - 1));\n\t\tconst sineWave = Math.sin(k * (Math.PI * 2) * rippleCurveFreq - Math.PI / 2) + 1;\n\t\trippleCurve[i] = sineWave / 10 + k * 0.83;\n\t}\n\trippleCurve[curveLen - 1] = 1;\n\n\t// stairs curve\n\tconst stairsCurve: number[] = [];\n\tconst steps = 5;\n\tfor (i = 0; i < curveLen; i++) {\n\t\tstairsCurve[i] = Math.ceil((i / (curveLen - 1)) * steps) / steps;\n\t}\n\n\t// in-out easing curve\n\tconst sineCurve: number[] = [];\n\tfor (i = 0; i < curveLen; i++) {\n\t\tk = i / (curveLen - 1);\n\t\tsineCurve[i] = 0.5 * (1 - Math.cos(Math.PI * k));\n\t}\n\n\t// a bounce curve\n\tconst bounceCurve: number[] = [];\n\tfor (i = 0; i < curveLen; i++) {\n\t\tk = i / (curveLen - 1);\n\t\tconst freq = Math.pow(k, 3) * 4 + 0.2;\n\t\tconst val = Math.cos(freq * Math.PI * 2 * k);\n\t\tbounceCurve[i] = Math.abs(val * (1 - k));\n\t}\n\n\t/**\n\t *  Invert a value curve to make it work for the release\n\t */\n\tfunction invertCurve(curve: number[]): number[] {\n\t\tconst out = new Array(curve.length);\n\t\tfor (let j = 0; j < curve.length; j++) {\n\t\t\tout[j] = 1 - curve[j];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t *  reverse the curve\n\t */\n\tfunction reverseCurve(curve: number[]): number[] {\n\t\treturn curve.slice(0).reverse();\n\t}\n\n\t/**\n\t *  attack and release curve arrays\n\t */\n\treturn {\n\t\tbounce : {\n\t\t\tIn : invertCurve(bounceCurve),\n\t\t\tOut : bounceCurve,\n\t\t},\n\t\tcosine : {\n\t\t\tIn : cosineCurve,\n\t\t\tOut : reverseCurve(cosineCurve),\n\t\t},\n\t\texponential : \"exponential\" as \"exponential\",\n\t\tlinear : \"linear\" as \"linear\",\n\t\tripple : {\n\t\t\tIn : rippleCurve,\n\t\t\tOut : invertCurve(rippleCurve),\n\t\t},\n\t\tsine : {\n\t\t\tIn : sineCurve,\n\t\t\tOut : invertCurve(sineCurve),\n\t\t},\n\t\tstep : {\n\t\t\tIn : stairsCurve,\n\t\t\tOut : invertCurve(stairsCurve),\n\t\t},\n\t};\n})();\n","import { Gain } from \"../../core/context/Gain\";\nimport { NormalRange, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Envelope, EnvelopeOptions } from \"./Envelope\";\n\n/**\n * AmplitudeEnvelope is a Tone.Envelope connected to a gain node.\n * Unlike Tone.Envelope, which outputs the envelope's value, AmplitudeEnvelope accepts\n * an audio signal as the input and will apply the envelope to the amplitude\n * of the signal.\n * Read more about ADSR Envelopes on [Wikipedia](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope).\n *\n * @param attack The amount of time it takes for the envelope to go from 0 to it's maximum value.\n * @param decay\tThe period of time after the attack that it takes for the envelope\n *                       \tto fall to the sustain value. Value must be greater than 0.\n * @param sustain\tThe percent of the maximum value that the envelope rests at until\n *                                \tthe release is triggered.\n * @param release\tThe amount of time after the release is triggered it takes to reach 0.\n *                         \tValue must be greater than 0.\n *  @example\n * var ampEnv = new AmplitudeEnvelope({\n * \t\"attack\": 0.1,\n * \t\"decay\": 0.2,\n * \t\"sustain\": 1.0,\n * \t\"release\": 0.8\n * }).toDestination();\n * //create an oscillator and connect it\n * var osc = new Tone.Oscillator().connect(ampEnv).start();\n * //trigger the envelopes attack and release \"8t\" apart\n * ampEnv.triggerAttackRelease(\"8t\");\n */\nexport class AmplitudeEnvelope extends Envelope {\n\n\tname = \"AmplitudeEnvelope\";\n\n\tprivate _gainNode: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\toutput: Gain = this._gainNode;\n\tinput: Gain = this._gainNode;\n\n\tconstructor(attack?: Time, decay?: Time, sustain?: NormalRange, release?: Time);\n\tconstructor(options?: Partial<EnvelopeOptions>)\n\tconstructor() {\n\t\tsuper(optionsFromArguments(AmplitudeEnvelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]));\n\t\tthis._sig.connect(this._gainNode.gain);\n\t\tthis.output = this._gainNode;\n\t\tthis.input = this._gainNode;\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._gainNode.dispose();\n\t\treturn this;\n\t}\n}\n","import { Volume } from \"../component/channel/Volume\";\nimport { Param } from \"../core/context/Param\";\nimport { OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { Decibels, Frequency, NormalRange, Time } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\n\nexport interface InstrumentOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n}\n\n/**\n *  Base-class for all instruments\n */\nexport abstract class Instrument<Options extends InstrumentOptions> extends ToneAudioNode<Options> {\n\n\t/**\n\t *  The output and volume triming node\n\t */\n\tprivate _volume: Volume;\n\toutput: OutputNode;\n\n\t/**\n\t * The instrument only has an output\n\t */\n\tinput: undefined;\n\n\t/**\n\t * The volume of the output in decibels.\n\t * @example\n\t * source.volume.value = -6;\n\t */\n\tvolume: Param<Decibels>;\n\n\t/**\n\t * Keep track of all events scheduled to the transport\n\t * when the instrument is 'synced'\n\t */\n\tprivate _scheduledEvents: number[] = [];\n\n\t/**\n\t * If the instrument is currently synced\n\t */\n\tprivate _synced: boolean = false;\n\n\tconstructor(options?: Partial<InstrumentOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Instrument.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Instrument.getDefaults(), arguments);\n\n\t\tthis._volume = this.output = new Volume({\n\t\t\tcontext: this.context,\n\t\t\tvolume: options.volume,\n\t\t});\n\t\tthis.volume = this._volume.volume;\n\t\treadOnly(this, \"volume\");\n\t}\n\n\tstatic getDefaults(): InstrumentOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Sync the instrument to the Transport. All subsequent calls of\n\t * [triggerAttack](#triggerattack) and [triggerRelease](#triggerrelease)\n\t * will be scheduled along the transport.\n\t * @example\n\t * instrument.sync()\n\t * //schedule 3 notes when the transport first starts\n\t * instrument.triggerAttackRelease('C4', '8n', 0)\n\t * instrument.triggerAttackRelease('E4', '8n', '8n')\n\t * instrument.triggerAttackRelease('G4', '8n', '4n')\n\t * //start the transport to hear the notes\n\t * Transport.start()\n\t * @returns {Instrument} this\n\t */\n\tsync(): this {\n\t\tif (!this._synced) {\n\t\t\tthis._synced = true;\n\t\t\tthis._syncMethod(\"triggerAttack\", 1);\n\t\t\tthis._syncMethod(\"triggerRelease\", 0);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Wrap the given method so that it can be synchronized\n\t * @param method Which method to wrap and sync\n\t * @param  timePosition What position the time argument appears in\n\t */\n\tprotected _syncMethod(method: string, timePosition: number): void {\n\t\tconst originalMethod = this[\"_original_\" + method] = this[method];\n\t\tthis[method] = (...args: any[]) => {\n\t\t\tconst time = args[timePosition];\n\t\t\tconst id = this.context.transport.schedule((t) => {\n\t\t\t\targs[timePosition] = t;\n\t\t\t\toriginalMethod.apply(this, args);\n\t\t\t}, time);\n\t\t\tthis._scheduledEvents.push(id);\n\t\t};\n\t}\n\n\t/**\n\t * Unsync the instrument from the Transport\n\t */\n\tunsync(): this {\n\t\tthis._scheduledEvents.forEach(id => this.context.transport.clear(id));\n\t\tthis._scheduledEvents = [];\n\t\tif (this._synced) {\n\t\t\tthis._synced = false;\n\t\t\tthis.triggerAttack = this._original_triggerAttack;\n\t\t\tthis.triggerRelease = this._original_triggerRelease;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Trigger the attack and then the release after the duration.\n\t *  @param  note     The note to trigger.\n\t *  @param  duration How long the note should be held for before\n\t *                          triggering the release. This value must be greater than 0.\n\t *  @param time  When the note should be triggered.\n\t *  @param  velocity The velocity the note should be triggered at.\n\t *  @example\n\t * //trigger \"C4\" for the duration of an 8th note\n\t * synth.triggerAttackRelease(\"C4\", \"8n\");\n\t */\n\ttriggerAttackRelease(note: Frequency, duration: Time, time?: Time, velocity?: NormalRange): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst computedDuration = this.toSeconds(duration);\n\t\tthis.triggerAttack(note, computedTime, velocity);\n\t\tthis.triggerRelease(computedTime + computedDuration);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Start the instrument's note.\n\t * @param note the note to trigger\n\t * @param time the time to trigger the ntoe\n\t * @param velocity the velocity to trigger the note (betwee 0-1)\n\t */\n\tabstract triggerAttack(note: Frequency, time?: Time, velocity?: NormalRange): this;\n\t// tslint:disable-next-line: variable-name\n\tprivate _original_triggerAttack = this.triggerAttack;\n\n\t/**\n\t * Trigger the release phase of the current note.\n\t *  @param time when to trigger the release\n\t */\n\tabstract triggerRelease(...args: any[]): this;\n\t// tslint:disable-next-line: variable-name\n\tprivate _original_triggerRelease = this.triggerRelease;\n\n\t/**\n\t *  clean up\n\t *  @returns {Instrument} this\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._volume.dispose();\n\t\tthis.unsync();\n\t\tthis._scheduledEvents = [];\n\t\treturn this;\n\t}\n}\n","import { Envelope } from \"../component/envelope/Envelope\";\nimport { FrequencyClass } from \"../core/type/Frequency\";\nimport { Cents, Frequency, NormalRange, Seconds, Time } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { Instrument, InstrumentOptions } from \"../instrument/Instrument\";\nimport { Signal } from \"../signal/Signal\";\n\ntype onSilenceCallback = (instrument: Monophonic<any>) => void;\n\nexport interface MonophonicOptions extends InstrumentOptions {\n\tportamento: Seconds;\n\tonsilence: onSilenceCallback;\n}\n\n/**\n * Abstract base class for other monophonic instruments to extend.\n */\nexport abstract class Monophonic<Options extends MonophonicOptions> extends Instrument<Options> {\n\n\t/**\n\t *  The glide time between notes.\n\t */\n\tportamento: Seconds;\n\n\t/**\n\t * Invoked when the release has finished and the output is silent.\n\t */\n\tonsilence: onSilenceCallback;\n\n\t/**\n\t * The instrument's envelope\n\t */\n\tabstract envelope: Envelope;\n\n\t/**\n\t * The instrument's frequency signal.\n\t */\n\tabstract readonly frequency: Signal<Frequency>;\n\n\t/**\n\t * The instrument's detune control signal.\n\t */\n\tabstract readonly detune: Signal<Cents>;\n\n\tconstructor(options?: Partial<MonophonicOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Monophonic.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Monophonic.getDefaults(), arguments);\n\n\t\tthis.portamento = options.portamento;\n\t\tthis.onsilence = options.onsilence;\n\t}\n\n\tstatic getDefaults(): MonophonicOptions {\n\t\treturn Object.assign(Instrument.getDefaults(), {\n\t\t\tonsilence: noOp,\n\t\t\tportamento: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Trigger the attack of the note optionally with a given velocity.\n\t * @param  note The note to trigger.\n\t * @param  time When the note should start.\n\t * @param  velocity The velocity scaler determines how \"loud\" the note will be triggered.\n\t * @example\n\t * synth.triggerAttack(\"C4\");\n\t * @example\n\t * //trigger the note a half second from now at half velocity\n\t * synth.triggerAttack(\"C4\", \"+0.5\", 0.5);\n\t */\n\ttriggerAttack(note: Frequency | FrequencyClass, time?: Time, velocity: NormalRange = 1): this {\n\t\tthis.log(\"triggerAttack\", note, time, velocity);\n\t\tconst seconds = this.toSeconds(time);\n\t\tthis._triggerEnvelopeAttack(seconds, velocity);\n\t\tthis.setNote(note, seconds);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Trigger the release portion of the envelope\n\t * @param  time If no time is given, the release happens immediatly\n\t * @example\n\t * synth.triggerRelease();\n\t */\n\ttriggerRelease(time?: Time): this {\n\t\tthis.log(\"triggerRelease\", time);\n\t\tconst seconds = this.toSeconds(time);\n\t\tthis._triggerEnvelopeRelease(seconds);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Internal method which starts the envelope attack\n\t */\n\tprotected abstract _triggerEnvelopeAttack(time: Seconds, velocity: NormalRange): void;\n\n\t/**\n\t * Internal method which starts the envelope release\n\t */\n\tprotected abstract _triggerEnvelopeRelease(time: Seconds): void;\n\n\t/**\n\t * Get the level of the output at the given time. Measures\n\t * the envelope(s) value at the time.\n\t * @param time The time to query the envelope value\n\t * @return The output level between 0-1\n\t */\n\tgetLevelAtTime(time: Time): NormalRange {\n\t\ttime = this.toSeconds(time);\n\t\treturn this.envelope.getValueAtTime(time);\n\t}\n\n\t/**\n\t * Set the note at the given time. If no time is given, the note\n\t * will set immediately.\n\t * @param note The note to change to.\n\t * @param  time The time when the note should be set.\n\t * @example\n\t * //change to F#6 in one quarter note from now.\n\t * synth.setNote(\"F#6\", \"+4n\");\n\t * @example\n\t * //change to Bb4 right now\n\t * synth.setNote(\"Bb4\");\n\t */\n\tsetNote(note: Frequency | FrequencyClass, time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst computedFrequency = note instanceof FrequencyClass ? note.toFrequency() : note;\n\t\tif (this.portamento > 0 && this.getLevelAtTime(computedTime) > 0.05) {\n\t\t\tconst portTime = this.toSeconds(this.portamento);\n\t\t\tthis.frequency.exponentialRampTo(computedFrequency, portTime, computedTime);\n\t\t} else {\n\t\t\tthis.frequency.setValueAtTime(computedFrequency, computedTime);\n\t\t}\n\t\treturn this;\n\t}\n}\n","import { AmplitudeEnvelope } from \"../component/envelope/AmplitudeEnvelope\";\nimport { Envelope, EnvelopeOptions } from \"../component/envelope/Envelope\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { Cents, Frequency, Seconds } from \"../core/type/Units\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { RecursivePartial } from \"../core/util/Interface\";\nimport { Signal } from \"../signal/Signal\";\nimport { OmniOscillator } from \"../source/oscillator/OmniOscillator\";\nimport { OmniOscillatorConstructorOptions, OmniOscillatorSynthOptions } from \"../source/oscillator/OscillatorInterface\";\nimport { Source, SourceOptions } from \"../source/Source\";\nimport { Monophonic, MonophonicOptions } from \"./Monophonic\";\n\nexport interface SynthOptions extends MonophonicOptions {\n\toscillator: OmniOscillatorSynthOptions;\n\tenvelope: Omit<EnvelopeOptions, keyof ToneAudioNodeOptions>;\n}\n\n/**\n * Synth is composed simply of a {@link OmniOscillator} routed through an {@link AmplitudeEnvelope}.\n * ```\n * +----------------+   +-------------------+\n * | OmniOscillator +>--> AmplitudeEnvelope +>--> Output\n * +----------------+   +-------------------+\n * ```\n * @param options the options available for the synth.\n * @example\n * var synth = new Synth().toDestination();\n * synth.triggerAttackRelease(\"C4\", \"8n\");\n */\nexport class Synth<Options extends SynthOptions = SynthOptions> extends Monophonic<Options> {\n\n\treadonly name: string = \"Synth\";\n\n\t/**\n\t *  The oscillator.\n\t */\n\treadonly oscillator: OmniOscillator<any>;\n\n\t/**\n\t * The frequency signal\n\t */\n\treadonly frequency: Signal<Frequency>;\n\n\t/**\n\t * The detune signal\n\t */\n\treadonly detune: Signal<Cents>;\n\n\t/**\n\t * The envelope\n\t */\n\treadonly envelope: AmplitudeEnvelope;\n\n\tconstructor(options?: RecursivePartial<SynthOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Synth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Synth.getDefaults(), arguments);\n\n\t\tthis.oscillator = new OmniOscillator(Object.assign({\n\t\t\tcontext: this.context,\n\t\t\tonstop: () => this.onsilence(this),\n\t\t}, options.oscillator));\n\n\t\tthis.frequency = this.oscillator.frequency;\n\t\tthis.detune = this.oscillator.detune;\n\n\t\tthis.envelope = new AmplitudeEnvelope(Object.assign({\n\t\t\tcontext: this.context,\n\t\t}, options.envelope));\n\n\t\t// connect the oscillators to the output\n\t\tthis.oscillator.chain(this.envelope, this.output);\n\t\treadOnly(this, [\"oscillator\", \"frequency\", \"detune\", \"envelope\"]);\n\t}\n\n\tstatic getDefaults(): SynthOptions {\n\t\treturn Object.assign(Monophonic.getDefaults(), {\n\t\t\tenvelope: Object.assign(\n\t\t\t\tomitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())),\n\t\t\t\t{\n\t\t\t\t\tattack : 0.005,\n\t\t\t\t\tdecay : 0.1,\n\t\t\t\t\trelease : 1,\n\t\t\t\t\tsustain : 0.3,\n\t\t\t\t},\n\t\t\t),\n\t\t\toscillator: Object.assign(\n\t\t\t\tomitFromObject(OmniOscillator.getDefaults(), [...Object.keys(Source.getDefaults()), \"frequency\", \"detune\"]),\n\t\t\t\t{\n\t\t\t\t\ttype: \"triangle\",\n\t\t\t\t},\n\t\t\t),\n\t\t});\n\t}\n\n\t/**\n\t *  start the attack portion of the envelope\n\t *  @param time the time the attack should start\n\t *  @param velocity the velocity of the note (0-1)\n\t */\n\tprotected _triggerEnvelopeAttack(time: Seconds, velocity: number): void {\n\t\t// the envelopes\n\t\tthis.envelope.triggerAttack(time, velocity);\n\t\tthis.oscillator.start(time);\n\t\t// if there is no release portion, stop the oscillator\n\t\tif (this.envelope.sustain === 0) {\n\t\t\tconst computedAttack = this.toSeconds(this.envelope.attack);\n\t\t\tconst computedDecay = this.toSeconds(this.envelope.decay);\n\t\t\tthis.oscillator.stop(time + computedAttack + computedDecay);\n\t\t}\n\t}\n\n\t/**\n\t *  start the release portion of the envelope\n\t *  @param time the time the release should start\n\t */\n\tprotected _triggerEnvelopeRelease(time: Seconds): void {\n\t\tthis.envelope.triggerRelease(time);\n\t\tthis.oscillator.stop(time + this.toSeconds(this.envelope.release));\n\t}\n\n\t/**\n\t *  clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.oscillator.dispose();\n\t\tthis.envelope.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioBuffer } from \"../core/context/ToneAudioBuffer\";\nimport { ToneAudioBuffers } from \"../core/context/ToneAudioBuffers\";\nimport { intervalToFrequencyRatio } from \"../core/type/Conversions\";\nimport { FrequencyClass } from \"../core/type/Frequency\";\nimport { Frequency, Interval, MidiNote, NormalRange, Note, Time } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { isArray, isNote, isNumber, isString } from \"../core/util/TypeCheck\";\nimport { Instrument, InstrumentOptions } from \"../instrument/Instrument\";\nimport { ToneBufferSource, ToneBufferSourceCurve } from \"../source/buffer/BufferSource\";\n\ninterface SamplesMap {\n\t[note: string]: ToneAudioBuffer | AudioBuffer | string;\n\t[midi: number]: ToneAudioBuffer | AudioBuffer | string;\n}\n\ninterface SamplerOptions extends InstrumentOptions {\n\tattack: Time;\n\trelease: Time;\n\tonload: () => void;\n\tbaseUrl: string;\n\tcurve: ToneBufferSourceCurve;\n\turls: SamplesMap;\n}\n\n/**\n * Pass in an object which maps the note's pitch or midi value to the url,\n * then you can trigger the attack and release of that note like other instruments.\n * By automatically repitching the samples, it is possible to play pitches which\n * were not explicitly included which can save loading time.\n *\n * For sample or buffer playback where repitching is not necessary,\n * use {@link Player}.\n * @param samples An object of samples mapping either Midi\n *                         Note Numbers or Scientific Pitch Notation\n *                         to the url of that sample.\n * @param onload The callback to invoke when all of the samples are loaded.\n * @param baseUrl The root URL of all of the samples, which is prepended to all the URLs.\n * @example\n * var sampler = new Sampler({\n * \t\"C3\" : \"path/to/C3.mp3\",\n * \t\"D#3\" : \"path/to/Dsharp3.mp3\",\n * \t\"F#3\" : \"path/to/Fsharp3.mp3\",\n * \t\"A3\" : \"path/to/A3.mp3\",\n * }, function(){\n * \t//sampler will repitch the closest sample\n * \tsampler.triggerAttack(\"D3\")\n * })\n */\nexport class Sampler extends Instrument<SamplerOptions> {\n\n\tname = \"Sampler\";\n\n\t/**\n\t * The stored and loaded buffers\n\t * @type {Tone.Buffers}\n\t * @private\n\t */\n\tprivate _buffers: ToneAudioBuffers;\n\n\t/**\n\t * The object of all currently playing BufferSources\n\t */\n\tprivate _activeSources: Map<MidiNote, ToneBufferSource[]> = new Map();\n\n\t/**\n\t * The envelope applied to the beginning of the sample.\n\t */\n\tattack: Time;\n\n\t/**\n\t * The envelope applied to the end of the envelope.\n\t */\n\trelease: Time;\n\n\t/**\n\t *  The shape of the attack/release curve.\n\t *  Either \"linear\" or \"exponential\"\n\t */\n\tcurve: ToneBufferSourceCurve;\n\n\tconstructor(options?: Partial<SamplerOptions>);\n\tconstructor(samples?: SamplesMap, options?: Partial<Omit<SamplerOptions, \"urls\">>);\n\tconstructor(samples?: SamplesMap, onload?: () => void, baseUrl?: string);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Sampler.getDefaults(), arguments, [\"urls\", \"onload\", \"baseUrl\"], \"urls\"));\n\t\tconst options = optionsFromArguments(Sampler.getDefaults(), arguments, [\"urls\", \"onload\", \"baseUrl\"], \"urls\");\n\n\t\tconst urlMap = {};\n\t\tObject.keys(options.urls).forEach((note) => {\n\t\t\tconst noteNumber = parseInt(note, 10);\n\t\t\tthis.assert(isNote(note)\n\t\t\t\t|| (isNumber(noteNumber) && isFinite(noteNumber)), `url key is neither a note or midi pitch: ${note}`);\n\t\t\tif (isNote(note)) {\n\t\t\t\t// convert the note name to MIDI\n\t\t\t\tconst mid = new FrequencyClass(this.context, note).toMidi();\n\t\t\t\turlMap[mid] = options.urls[note];\n\t\t\t} else if (isNumber(noteNumber) && isFinite(noteNumber)) {\n\t\t\t\t// otherwise if it's numbers assume it's midi\n\t\t\t\turlMap[noteNumber] = options.urls[noteNumber];\n\t\t\t}\n\t\t});\n\n\t\tthis._buffers = new ToneAudioBuffers(urlMap, options.onload, options.baseUrl);\n\t\tthis.attack = options.attack;\n\t\tthis.release = options.release;\n\t\tthis.curve = options.curve;\n\t}\n\n\tstatic getDefaults(): SamplerOptions {\n\t\treturn Object.assign(Instrument.getDefaults(), {\n\t\t\tattack : 0,\n\t\t\tbaseUrl : \"\",\n\t\t\tcurve : \"exponential\" as \"exponential\",\n\t\t\tonload : noOp,\n\t\t\trelease : 0.1,\n\t\t\turls: {},\n\t\t});\n\t}\n\n\t/**\n\t * Returns the difference in steps between the given midi note at the closets sample.\n\t */\n\tprivate _findClosest(midi: MidiNote): Interval {\n\t\t// searches within 8 octaves of the given midi note\n\t\tconst MAX_INTERVAL = 96;\n\t\tlet interval = 0;\n\t\twhile (interval < MAX_INTERVAL) {\n\t\t\t// check above and below\n\t\t\tif (this._buffers.has(midi + interval)) {\n\t\t\t\treturn -interval;\n\t\t\t} else if (this._buffers.has(midi - interval)) {\n\t\t\t\treturn interval;\n\t\t\t}\n\t\t\tinterval++;\n\t\t}\n\t\tthrow new Error(`No available buffers for note: ${midi}`);\n\t}\n\n\t/**\n\t * @param  notes\tThe note to play, or an array of notes.\n\t * @param  time     When to play the note\n\t * @param  velocity The velocity to play the sample back.\n\t */\n\ttriggerAttack(notes: Frequency | Frequency[], time?: Time, velocity: NormalRange = 1): this {\n\t\tthis.log(\"triggerAttack\", notes, time, velocity);\n\t\tif (!Array.isArray(notes)) {\n\t\t\tnotes = [notes];\n\t\t}\n\t\tnotes.forEach(note => {\n\t\t\tconst midi = new FrequencyClass(this.context, note).toMidi();\n\t\t\t// find the closest note pitch\n\t\t\tconst difference = this._findClosest(midi);\n\t\t\tconst closestNote = midi - difference;\n\t\t\tconst buffer = this._buffers.get(closestNote);\n\t\t\tconst playbackRate = intervalToFrequencyRatio(difference);\n\t\t\t// play that note\n\t\t\tconst source = new ToneBufferSource({\n\t\t\t\tbuffer,\n\t\t\t\tcontext: this.context,\n\t\t\t\tcurve : this.curve,\n\t\t\t\tfadeIn : this.attack,\n\t\t\t\tfadeOut : this.release,\n\t\t\t\tplaybackRate,\n\t\t\t}).connect(this.output);\n\t\t\tsource.start(time, 0, buffer.duration / playbackRate, velocity);\n\t\t\t// add it to the active sources\n\t\t\tif (!isArray(this._activeSources.get(midi))) {\n\t\t\t\tthis._activeSources.set(midi, []);\n\t\t\t}\n\t\t\t(this._activeSources.get(midi) as ToneBufferSource[]).push(source);\n\n\t\t\t// remove it when it's done\n\t\t\tsource.onended = () => {\n\t\t\t\tif (this._activeSources && this._activeSources.has(midi)) {\n\t\t\t\t\tconst sources = this._activeSources.get(midi) as ToneBufferSource[];\n\t\t\t\t\tconst index = sources.indexOf(source);\n\t\t\t\t\tif (index !== -1) {\n\t\t\t\t\t\tsources.splice(index, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * @param  notes\tThe note to release, or an array of notes.\n\t * @param  time     \tWhen to release the note.\n\t */\n\ttriggerRelease(notes: Frequency | Frequency[], time?: Time): this {\n\t\tthis.log(\"triggerRelease\", notes, time);\n\t\tif (!Array.isArray(notes)) {\n\t\t\tnotes = [notes];\n\t\t}\n\t\tnotes.forEach(note => {\n\t\t\tconst midi = new FrequencyClass(this.context, note).toMidi();\n\t\t\t// find the note\n\t\t\tif (this._activeSources.has(midi) && (this._activeSources.get(midi) as ToneBufferSource[]).length) {\n\t\t\t\tconst sources = this._activeSources.get(midi) as ToneBufferSource[];\n\t\t\t\ttime = this.toSeconds(time);\n\t\t\t\tsources.forEach(source => {\n\t\t\t\t\tsource.stop(time);\n\t\t\t\t});\n\t\t\t\tthis._activeSources.set(midi, []);\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Release all currently active notes.\n\t * @param  time     \tWhen to release the notes.\n\t */\n\treleaseAll(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._activeSources.forEach(sources => {\n\t\t\twhile (sources.length) {\n\t\t\t\tconst source = sources.shift() as ToneBufferSource;\n\t\t\t\tsource.stop(computedTime);\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sync the instrument to the Transport. All subsequent calls of\n\t * [triggerAttack](#triggerattack) and [triggerRelease](#triggerrelease)\n\t * will be scheduled along the transport.\n\t * @example\n\t * synth.sync()\n\t * //schedule 3 notes when the transport first starts\n\t * synth.triggerAttackRelease('8n', 0)\n\t * synth.triggerAttackRelease('8n', '8n')\n\t * synth.triggerAttackRelease('8n', '4n')\n\t * //start the transport to hear the notes\n\t * Transport.start()\n\t * @returns {Tone.Instrument} this\n\t */\n\tsync(): this {\n\t\tthis._syncMethod(\"triggerAttack\", 1);\n\t\tthis._syncMethod(\"triggerRelease\", 1);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Invoke the attack phase, then after the duration, invoke the release.\n\t * @param  notes\tThe note to play and release, or an array of notes.\n\t * @param  duration The time the note should be held\n\t * @param  time     When to start the attack\n\t * @param  velocity The velocity of the attack\n\t */\n\ttriggerAttackRelease(\n\t\tnotes: Frequency[] | Frequency,\n\t\tduration: Time | Time[],\n\t\ttime?: Time,\n\t\tvelocity: NormalRange = 1,\n\t): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis.triggerAttack(notes, computedTime, velocity);\n\t\tif (isArray(duration)) {\n\t\t\tthis.assert(isArray(notes), \"notes must be an array when duration is array\");\n\t\t\t(notes as Frequency[]).forEach((note, index) => {\n\t\t\t\tconst d = duration[Math.min(index, duration.length - 1)];\n\t\t\t\tthis.triggerRelease(note, computedTime + this.toSeconds(d));\n\t\t\t});\n\t\t} else {\n\t\t\tthis.triggerRelease(notes, computedTime + this.toSeconds(duration));\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a note to the sampler.\n\t * @param  note      The buffer's pitch.\n\t * @param  url  Either the url of the bufer, or a buffer which will be added with the given name.\n\t * @param  callback  The callback to invoke when the url is loaded.\n\t */\n\tadd(note: Note | MidiNote, url: string | ToneAudioBuffer | AudioBuffer, callback?: () => void): this {\n\t\tthis.assert(isNote(note) || isFinite(note), `note must be a pitch or midi: ${note}`);\n\t\tif (isNote(note)) {\n\t\t\t// convert the note name to MIDI\n\t\t\tconst mid = new FrequencyClass(this.context, note).toMidi();\n\t\t\tthis._buffers.add(mid, url, callback);\n\t\t} else {\n\t\t\t// otherwise if it's numbers assume it's midi\n\t\t\tthis._buffers.add(note, url, callback);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * If the buffers are loaded or not\n\t */\n\tget loaded(): boolean {\n\t\treturn this._buffers.loaded;\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._buffers.dispose();\n\t\tthis._activeSources.forEach(sources => {\n\t\t\tsources.forEach(source => source.dispose());\n\t\t});\n\t\tthis._activeSources.clear();\n\t\treturn this;\n\t}\n}\n","import { MidiClass } from \"../core/type/Midi\";\nimport { Frequency, MidiNote, NormalRange, Seconds, Time } from \"../core/type/Units\";\nimport { deepMerge, optionsFromArguments } from \"../core/util/Defaults\";\nimport { RecursivePartial } from \"../core/util/Interface\";\nimport { isArray } from \"../core/util/TypeCheck\";\nimport { Instrument, InstrumentOptions } from \"./Instrument\";\nimport { MembraneSynth, MembraneSynthOptions } from \"./MembraneSynth\";\nimport { Monophonic } from \"./Monophonic\";\nimport { Synth, SynthOptions } from \"./Synth\";\n\ntype VoiceConstructor<V> = {\n\tgetDefaults: () => VoiceOptions<V>,\n} & (new (...args: any[]) => V);\n\ntype OmitMonophonicOptions<T> = Omit<T, \"context\" | \"onsilence\">;\n\ntype VoiceOptions<T> =\n\tT extends MembraneSynth ? MembraneSynthOptions :\n\tT extends Synth ? SynthOptions :\n\tnever;\n\n/**\n * The settable synth options. excludes monophonic options.\n */\ntype PartialVoiceOptions<T> = RecursivePartial<\n\tOmitMonophonicOptions<\n\t\tVoiceOptions<T>\n\t>\n>;\n\ninterface PolySynthOptions<Voice> extends InstrumentOptions {\n\tpolyphony: number;\n\tvoice: VoiceConstructor<Voice>;\n\toptions: PartialVoiceOptions<Voice>;\n}\n\n/**\n * PolySynth handles voice creation and allocation for any\n * instruments passed in as the second paramter. PolySynth is\n * not a synthesizer by itself, it merely manages voices of\n * one of the other types of synths, allowing any of the\n * monophonic synthesizers to be polyphonic.\n *\n *  @param polyphony The maximum polyphony of the synth\n *  @param voice The constructor of the voices\n *  @param options\tThe options object to set the synth voice\n *  @example\n * //a polysynth composed of 6 Voices of Synth\n * var synth = new PolySynth(6, Tone.Synth, {\n *   oscillator : {\n * \t\ttype : \"square\"\n * \t}\n * }).toMaster();\n * //set the attributes using the set interface\n * synth.set(\"detune\", -1200);\n * //play a chord\n * synth.triggerAttackRelease([\"C4\", \"E4\", \"A4\"], \"4n\");\n */\nexport class PolySynth<Voice extends Monophonic<any> = Synth> extends Instrument<VoiceOptions<Voice>> {\n\n\treadonly name = \"PolySynth\";\n\n\t/**\n\t * The voices which are not currently in use\n\t */\n\tprivate _availableVoices: Voice[] = [];\n\n\t/**\n\t * The currently active voices\n\t */\n\tprivate _activeVoices: Array<{midi: MidiNote, voice: Voice}> = [];\n\n\t/**\n\t * All of the allocated voices for this synth.\n\t */\n\tprivate _voices: Voice[] = [];\n\n\t/**\n\t * The options that are set on the synth.\n\t */\n\tprivate options: VoiceOptions<Voice>;\n\n\t/**\n\t * The polyphony limit.\n\t */\n\tpolyphony: number;\n\n\tprivate readonly voice: VoiceConstructor<Voice>;\n\n\tconstructor(\n\t\tpolyphony?: number,\n\t\tvoice?: VoiceConstructor<Voice>,\n\t\toptions?: PartialVoiceOptions<Voice>,\n\t);\n\tconstructor(options?: Partial<PolySynthOptions<Voice>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(PolySynth.getDefaults(), arguments, [\"polyphony\", \"voice\", \"options\"]));\n\t\tconst options = optionsFromArguments(PolySynth.getDefaults(), arguments, [\"polyphony\", \"voice\", \"options\"]);\n\n\t\tconst defaults = options.voice.getDefaults();\n\t\tthis.options = Object.assign(defaults, options.options) as VoiceOptions<Voice>;\n\t\tthis.voice = options.voice as unknown as VoiceConstructor<Voice>;\n\t\tthis.polyphony = options.polyphony;\n\t}\n\n\tstatic getDefaults(): PolySynthOptions<Synth> {\n\t\treturn Object.assign(Instrument.getDefaults(), {\n\t\t\toptions: {},\n\t\t\tpolyphony: 4,\n\t\t\tvoice: Synth,\n\t\t});\n\t}\n\n\t/**\n\t * The number of active voices.\n\t */\n\tget activeVoices(): number {\n\t\treturn this._activeVoices.length;\n\t}\n\n\t/**\n\t * If there is a voice active on that note, return it\n\t */\n\tprivate _getActiveVoice(note: MidiNote): Voice | undefined {\n\t\tconst event = this._activeVoices.find(({midi}) => midi === note);\n\t\tif (event) {\n\t\t\treturn event.voice;\n\t\t}\n\t}\n\n\t/**\n\t * Invoked when the source is done making sound, so that it can be\n\t * readded to the pool of available voices\n\t */\n\tprivate _makeVoiceAvailable(voice: Voice): void {\n\t\tthis._availableVoices.push(voice);\n\t\t// remove the midi note from 'active voices'\n\t\tconst activeVoiceIndex = this._activeVoices.findIndex((e) => e.voice === voice);\n\t\tthis._activeVoices.splice(activeVoiceIndex, 1);\n\t}\n\n\t/**\n\t * Get an available voice from the pool of available voices.\n\t * If one is not available and the polyphony limit is reached,\n\t * steal a voice, otherwise return null.\n\t */\n\tprivate _getNextAvailableVoice(): Voice | undefined {\n\t\t// if there are available voices, return the first one\n\t\tif (this._availableVoices.length) {\n\t\t\treturn this._availableVoices.shift();\n\t\t} else if (this._voices.length < this.polyphony) {\n\t\t\t// otherwise if there is still more polyphony, make a new voice\n\t\t\tconst voice = new this.voice(Object.assign(this.options, {\n\t\t\t\tcontext: this.context,\n\t\t\t\tonsilence: this._makeVoiceAvailable.bind(this),\n\t\t\t}));\n\t\t\tvoice.connect(this.output);\n\t\t\tthis._voices.push(voice);\n\t\t\treturn voice;\n\t\t} else {\n\t\t\tconsole.warn(\"Max polyphony exceeded. Note dropped.\");\n\t\t}\n\t}\n\n\t/**\n\t * Internal method which triggers the attack\n\t */\n\tprivate _triggerAttack(notes: Frequency[], time: Seconds, velocity?: NormalRange): void {\n\t\tnotes.forEach(note => {\n\t\t\tconst midiNote = new MidiClass(this.context, note).toMidi();\n\t\t\t// let voice: Voice | undefined;\n\t\t\t// if there's already a note at that voice, reuse it\n\t\t\tlet voice = this._getActiveVoice(midiNote);\n\t\t\t// if it has a note, and that note is still active\n\t\t\tif (voice && voice.getLevelAtTime(time) > 0) {\n\t\t\t\tconst activeVoiceIndex = this._activeVoices.findIndex((e) => e.voice === voice);\n\t\t\t\tthis._activeVoices.splice(activeVoiceIndex, 1);\n\t\t\t} else {\n\t\t\t\t// otherwise get the next available voice\n\t\t\t\tvoice = this._getNextAvailableVoice();\n\t\t\t}\n\t\t\tif (voice) {\n\t\t\t\tvoice.triggerAttack(note, time, velocity);\n\t\t\t\tthis._activeVoices.unshift({\n\t\t\t\t\tmidi: midiNote, voice,\n\t\t\t\t});\n\t\t\t\tthis.log(\"triggerAttack\", note, time);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Internal method which triggers the release\n\t */\n\tprivate _triggerRelease(notes: Frequency[], time: Seconds): void {\n\t\tnotes.forEach(note => {\n\t\t\tconst midiNote = new MidiClass(this.context, note).toMidi();\n\t\t\tconst voice = this._getActiveVoice(midiNote);\n\t\t\tif (voice) {\n\t\t\t\t// trigger release on that note\n\t\t\t\tvoice.triggerRelease(time);\n\t\t\t\tthis.log(\"triggerRelease\", note, time);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Schedule the attack/release events. If the time is in the future, then it should set a timeout\n\t * to wait for just-in-time scheduling\n\t */\n\tprivate _scheduleEvent(type: \"attack\" | \"release\", notes: Frequency[], time: Seconds, velocity?: NormalRange): void {\n\t\tthis.assert(!this.disposed, \"Synth was already disposed\");\n\t\t// if the notes are greater than this amount of time in the future, they should be scheduled with setTimeout\n\t\tif (time <= this.now()) {\n\t\t\t// do it immediately\n\t\t\tif (type === \"attack\") {\n\t\t\t\tthis._triggerAttack(notes, time, velocity);\n\t\t\t} else {\n\t\t\t\tthis._triggerRelease(notes, time);\n\t\t\t}\n\t\t} else {\n\t\t\t// schedule it to start in the future\n\t\t\tthis.context.setTimeout(() => {\n\t\t\t\tthis._scheduleEvent(type, notes, time, velocity);\n\t\t\t}, time - this.now());\n\t\t}\n\t}\n\n\t/**\n\t * Trigger the attack portion of the note\n\t * @param  notes The notes to play. Accepts a single Frequency or an array of frequencies.\n\t * @param  time  The start time of the note.\n\t * @param velocity The velocity of the note.\n\t * @example\n\t * //trigger a chord immediately with a velocity of 0.2\n\t * poly.triggerAttack([\"Ab3\", \"C4\", \"F5\"], undefined, 0.2);\n\t */\n\ttriggerAttack(notes: Frequency | Frequency[], time?: Time, velocity?: NormalRange): this {\n\n\t\tif (!Array.isArray(notes)) {\n\t\t\tnotes = [notes];\n\t\t}\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._scheduleEvent(\"attack\", notes, computedTime, velocity);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Trigger the release of the note. Unlike monophonic instruments,\n\t * a note (or array of notes) needs to be passed in as the first argument.\n\t * @param  notes The notes to play. Accepts a single Frequency or an array of frequencies.\n\t * @param  time  When the release will be triggered.\n\t * @example\n\t * poly.triggerRelease([\"Ab3\", \"C4\", \"F5\"], \"+2n\");\n\t */\n\ttriggerRelease(notes: Frequency | Frequency[], time?: Time): this {\n\t\tif (!Array.isArray(notes)) {\n\t\t\tnotes = [notes];\n\t\t}\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._scheduleEvent(\"release\", notes, computedTime);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Trigger the attack and release after the specified duration\n\t * @param  notes The notes to play. Accepts a single  Frequency or an array of frequencies.\n\t * @param  duration the duration of the note\n\t * @param  time  if no time is given, defaults to now\n\t * @param  velocity the velocity of the attack (0-1)\n\t * @example\n\t * //trigger a chord for a duration of a half note\n\t * poly.triggerAttackRelease([\"Eb3\", \"G4\", \"C5\"], \"2n\");\n\t * @example\n\t * //can pass in an array of durations as well\n\t * poly.triggerAttackRelease([\"Eb3\", \"G4\", \"C5\"], [\"2n\", \"4n\", \"4n\"]);\n\t */\n\ttriggerAttackRelease(\n\t\tnotes: Frequency | Frequency[],\n\t\tduration: Time | Time[],\n\t\ttime?: Time,\n\t\tvelocity?: NormalRange,\n\t): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis.triggerAttack(notes, computedTime, velocity);\n\t\tif (isArray(duration)) {\n\t\t\tthis.assert(isArray(notes), \"If the duration is an array, the notes must also be an array\");\n\t\t\tnotes = notes as Frequency[];\n\t\t\tfor (let i = 0; i < notes.length; i++) {\n\t\t\t\tconst d = duration[Math.min(i, duration.length - 1)];\n\t\t\t\tconst durationSeconds = this.toSeconds(d);\n\t\t\t\tthis.assert(durationSeconds > 0, \"The duration must be greater than 0\");\n\t\t\t\tthis.triggerRelease(notes[i], computedTime + durationSeconds);\n\t\t\t}\n\t\t} else {\n\t\t\tconst durationSeconds = this.toSeconds(duration);\n\t\t\tthis.assert(durationSeconds > 0, \"The duration must be greater than 0\");\n\t\t\tthis.triggerRelease(notes, computedTime + durationSeconds);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sync the instrument to the Transport. All subsequent calls of\n\t * {@link triggerAttack} and {@link triggerRelease} will be scheduled along the transport.\n\t * @example\n\t * synth.sync()\n\t * //schedule 3 notes when the transport first starts\n\t * synth.triggerAttackRelease('8n', 0)\n\t * synth.triggerAttackRelease('8n', '8n')\n\t * synth.triggerAttackRelease('8n', '4n')\n\t * //start the transport to hear the notes\n\t * Transport.start()\n\t */\n\tsync(): this {\n\t\tthis._syncMethod(\"triggerAttack\", 1);\n\t\tthis._syncMethod(\"triggerRelease\", 1);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set a member/attribute of the voices\n\t * @example\n\t * poly.set({\n\t * \t\"filter\" : {\n\t * \t\t\"type\" : \"highpass\"\n\t * \t},\n\t * \t\"envelope\" : {\n\t * \t\t\"attack\" : 0.25\n\t * \t}\n\t * });\n\t */\n\tset(options: RecursivePartial<VoiceOptions<Voice>>): this {\n\t\tthis.options = deepMerge(this.options, options);\n\t\tthis._voices.forEach(voice => voice.set(this.options));\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Get the synth's attributes.\n\t */\n\tget(): VoiceOptions<Voice> {\n\t\treturn this.options;\n\t}\n\n\t/**\n\t * Trigger the release portion of all the currently active voices immediately.\n\t * Useful for silencing the synth.\n\t */\n\treleaseAll(): this {\n\t\tconst now = this.now();\n\t\tthis._activeVoices.forEach(({voice}) => {\n\t\t\tvoice.triggerRelease(now);\n\t\t});\n\t\tthis._activeVoices = [];\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._voices.forEach(v => v.dispose());\n\t\tthis._activeVoices = [];\n\t\tthis._availableVoices = [];\n\t\treturn this;\n\t}\n}\n","import { FrequencyClass } from \"../core/type/Frequency\";\nimport { Frequency, Positive, Time } from \"../core/type/Units\";\nimport { deepMerge, optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly, RecursivePartial } from \"../core/util/Interface\";\nimport { Monophonic } from \"./Monophonic\";\nimport { Synth, SynthOptions } from \"./Synth\";\n\nexport interface MembraneSynthOptions extends SynthOptions {\n\tpitchDecay: Time;\n\toctaves: Positive;\n}\n\n/**\n * MembraneSynth makes kick and tom sounds using a single oscillator\n * with an amplitude envelope and frequency ramp. A Tone.OmniOscillator\n * is routed through a Tone.AmplitudeEnvelope to the output. The drum\n * quality of the sound comes from the frequency envelope applied\n * during MembraneSynth.triggerAttack(note). The frequency envelope\n * starts at <code>note * .octaves</code> and ramps to <code>note</code>\n * over the duration of <code>.pitchDecay</code>.\n * @param options the options available for the synth see defaults below\n * @example\n * var synth = new MembraneSynth().toMaster();\n * synth.triggerAttackRelease(\"C2\", \"8n\");\n */\nexport class MembraneSynth extends Synth<MembraneSynthOptions> {\n\n\treadonly name = \"MembraneSynth\";\n\n\t/**\n\t *  The number of octaves the pitch envelope ramps.\n\t */\n\toctaves: Positive;\n\n\t/**\n\t *  The amount of time the frequency envelope takes.\n\t */\n\tpitchDecay: Time;\n\n\t/**\n\t * Portamento is ignored in this synth. use pitch decay instead.\n\t */\n\treadonly portamento = 0;\n\n\tconstructor(options?: RecursivePartial<MembraneSynthOptions>)\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(MembraneSynth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(MembraneSynth.getDefaults(), arguments);\n\n\t\tthis.pitchDecay = options.pitchDecay;\n\t\tthis.octaves = options.octaves;\n\t\treadOnly(this, [\"oscillator\", \"envelope\"]);\n\t}\n\n\tstatic getDefaults(): MembraneSynthOptions {\n\t\treturn deepMerge(Monophonic.getDefaults(), Synth.getDefaults(), {\n\t\t\tenvelope : {\n\t\t\t\tattack : 0.001,\n\t\t\t\tattackCurve : \"exponential\",\n\t\t\t\tdecay : 0.4,\n\t\t\t\trelease : 1.4,\n\t\t\t\tsustain : 0.01,\n\t\t\t},\n\t\t\toctaves: 10,\n\t\t\toscillator: {\n\t\t\t\ttype: \"sine\",\n\t\t\t},\n\t\t\tpitchDecay: 0.05,\n\t\t});\n\t}\n\n\tsetNote(note: Frequency | FrequencyClass, time?: Time): this {\n\t\tconst seconds = this.toSeconds(time);\n\t\tconst hertz = this.toFrequency(note instanceof FrequencyClass ? note.toFrequency() : note);\n\t\tconst maxNote = hertz * this.octaves;\n\t\tthis.oscillator.frequency.setValueAtTime(maxNote, seconds);\n\t\tthis.oscillator.frequency.exponentialRampToValueAtTime(hertz, seconds + this.toSeconds(this.pitchDecay));\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\treturn this;\n\t}\n}\n","import \"../core/clock/Transport\";\nimport { ToneWithContext, ToneWithContextOptions } from \"../core/context/ToneWithContext\";\nimport { TicksClass } from \"../core/type/Ticks\";\nimport { TransportTimeClass } from \"../core/type/TransportTime\";\nimport { NormalRange, Positive, Seconds, Ticks, Time, TransportTime } from \"../core/type/Units\";\nimport { defaultArg, optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { BasicPlaybackState, StateTimeline } from \"../core/util/StateTimeline\";\nimport { isBoolean, isNumber } from \"../core/util/TypeCheck\";\n\nexport type ToneEventCallback<T> = (time: Seconds, value: T) => void;\n\nexport interface ToneEventOptions<T> extends ToneWithContextOptions {\n\tcallback: ToneEventCallback<T>;\n\tloop: boolean | number;\n\tloopEnd: Time;\n\tloopStart: Time;\n\tplaybackRate: Positive;\n\tvalue?: T;\n\tprobability: NormalRange;\n\tmute: boolean;\n\thumanize: boolean | Time;\n}\n\n/**\n * ToneEvent abstracts away this.context.transport.schedule and provides a schedulable\n * callback for a single or repeatable events along the timeline.\n *\n * @param callback The callback to invoke at the time.\n * @param value The value or values which should be passed to the callback function on invocation.\n * @example\n * var chord = new ToneEvent(function(time, chord){\n * \t//the chord as well as the exact time of the event\n * \t//are passed in as arguments to the callback function\n * }, [\"D4\", \"E4\", \"F4\"]);\n * //start the chord at the beginning of the transport timeline\n * chord.start();\n * //loop it every measure for 8 measures\n * chord.loop = 8;\n * chord.loopEnd = \"1m\";\n */\nexport class ToneEvent<ValueType = any> extends ToneWithContext<ToneEventOptions<ValueType>> {\n\n\tname = \"ToneEvent\";\n\n\t/**\n\t *  Loop value\n\t */\n\tprotected _loop: boolean | number;\n\n\t/**\n\t *  The callback to invoke.\n\t */\n\tcallback: ToneEventCallback<ValueType>;\n\n\t/**\n\t *  The value which is passed to the\n\t *  callback function.\n\t */\n\tvalue: ValueType;\n\n\t/**\n\t *  When the note is scheduled to start.\n\t */\n\tprotected _loopStart: Ticks;\n\n\t/**\n\t *  When the note is scheduled to start.\n\t */\n\tprotected _loopEnd: Ticks;\n\n\t/**\n\t *  Tracks the scheduled events\n\t */\n\tprotected _state: StateTimeline<{\n\t\tid: number,\n\t}> = new StateTimeline(\"stopped\");\n\n\t/**\n\t *  The playback speed of the note. A speed of 1\n\t *  is no change.\n\t */\n\tprotected _playbackRate: Positive;\n\n\t/**\n\t *  A delay time from when the event is scheduled to start\n\t */\n\tprotected _startOffset: Ticks = 0;\n\n\t/**\n\t *  private holder of probability value\n\t */\n\tprotected _probability: NormalRange;\n\n\t/**\n\t *  the amount of variation from the given time.\n\t */\n\tprotected _humanize: boolean | Time;\n\n\t/**\n\t *  If mute is true, the callback won't be invoked.\n\t */\n\tmute: boolean;\n\n\tconstructor(callback?: ToneEventCallback<ValueType>, value?: ValueType);\n\tconstructor(options?: Partial<ToneEventOptions<ValueType>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(ToneEvent.getDefaults(), arguments, [\"callback\", \"value\"]));\n\t\tconst options = optionsFromArguments(ToneEvent.getDefaults(), arguments, [\"callback\", \"value\"]);\n\n\t\tthis._loop = options.loop;\n\t\tthis.callback = options.callback;\n\t\tthis.value = options.value;\n\t\tthis._loopStart = this.toTicks(options.loopStart);\n\t\tthis._loopEnd = this.toTicks(options.loopEnd);\n\t\tthis._playbackRate = options.playbackRate;\n\t\tthis._probability = options.probability;\n\t\tthis._humanize = options.humanize;\n\t\tthis.mute = options.mute;\n\t\tthis.playbackRate = options.playbackRate;\n\t}\n\n\tstatic getDefaults(): ToneEventOptions<any> {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tcallback : noOp,\n\t\t\thumanize : false,\n\t\t\tloop : false,\n\t\t\tloopEnd : \"1m\",\n\t\t\tloopStart : 0,\n\t\t\tmute : false,\n\t\t\tplaybackRate : 1,\n\t\t\tprobability : 1,\n\t\t\tvalue : null,\n\t\t});\n\t}\n\n\t/**\n\t *  Reschedule all of the events along the timeline\n\t *  with the updated values.\n\t *  @param after Only reschedules events after the given time.\n\t *  @private\n\t */\n\tprivate _rescheduleEvents(after: Ticks = -1): void {\n\t\t// if no argument is given, schedules all of the events\n\t\tthis._state.forEachFrom(after, event => {\n\t\t\tlet duration;\n\t\t\tif (event.state === \"started\") {\n\t\t\t\tif (event.id !== -1) {\n\t\t\t\t\tthis.context.transport.clear(event.id);\n\t\t\t\t}\n\t\t\t\tconst startTick = event.time + Math.round(this.startOffset / this._playbackRate);\n\t\t\t\tif (this._loop === true || isNumber(this._loop) && this._loop > 1) {\n\t\t\t\t\tduration = Infinity;\n\t\t\t\t\tif (isNumber(this._loop)) {\n\t\t\t\t\t\tduration = (this._loop) * this._getLoopDuration();\n\t\t\t\t\t}\n\t\t\t\t\tconst nextEvent = this._state.getAfter(startTick);\n\t\t\t\t\tif (nextEvent !== null) {\n\t\t\t\t\t\tduration = Math.min(duration, nextEvent.time - startTick);\n\t\t\t\t\t}\n\t\t\t\t\tif (duration !== Infinity) {\n\t\t\t\t\t\t// schedule a stop since it's finite duration\n\t\t\t\t\t\tthis._state.setStateAtTime(\"stopped\", startTick + duration + 1, { id : -1 });\n\t\t\t\t\t\tduration = new TicksClass(this.context, duration);\n\t\t\t\t\t}\n\t\t\t\t\tconst interval = new TicksClass(this.context, this._getLoopDuration());\n\t\t\t\t\tevent.id = this.context.transport.scheduleRepeat(\n\t\t\t\t\t\tthis._tick.bind(this), interval, new TicksClass(this.context, startTick), duration);\n\t\t\t\t} else {\n\t\t\t\t\tevent.id = this.context.transport.schedule(this._tick.bind(this), new TicksClass(this.context, startTick));\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t *  Returns the playback state of the note, either \"started\" or \"stopped\".\n\t */\n\tget state(): BasicPlaybackState {\n\t\treturn this._state.getValueAtTime(this.context.transport.ticks) as BasicPlaybackState;\n\t}\n\n\t/**\n\t * The start from the scheduled start time.\n\t */\n\tget startOffset(): Ticks {\n\t\treturn this._startOffset;\n\t}\n\tset startOffset(offset) {\n\t\tthis._startOffset = offset;\n\t}\n\n\t/**\n\t *  The probability of the notes being triggered.\n\t */\n\tget probability(): NormalRange {\n\t\treturn this._probability;\n\t}\n\tset probability(prob) {\n\t\tthis._probability = prob;\n\t}\n\n\t/**\n\t *  If set to true, will apply small random variation\n\t *  to the callback time. If the value is given as a time, it will randomize\n\t *  by that amount.\n\t * @example\n\t * event.humanize = true;\n\t */\n\tget humanize(): Time | boolean {\n\t\treturn this._humanize;\n\t}\n\n\tset humanize(variation) {\n\t\tthis._humanize = variation;\n\t}\n\n\t/**\n\t *  Start the note at the given time.\n\t *  @param  time  When the event should start.\n\t */\n\tstart(time?: TransportTime | TransportTimeClass): this {\n\t\tconst ticks = this.toTicks(time);\n\t\tif (this._state.getValueAtTime(ticks) === \"stopped\") {\n\t\t\tthis._state.add({\n\t\t\t\tid : -1,\n\t\t\t\tstate : \"started\",\n\t\t\t\ttime: ticks,\n\t\t\t});\n\t\t\tthis._rescheduleEvents(ticks);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Stop the Event at the given time.\n\t *  @param  time  When the event should stop.\n\t */\n\tstop(time?: TransportTime | TransportTimeClass): this {\n\t\tthis.cancel(time);\n\t\tconst ticks = this.toTicks(time);\n\t\tif (this._state.getValueAtTime(ticks) === \"started\") {\n\t\t\tthis._state.setStateAtTime(\"stopped\", ticks, { id: -1 });\n\t\t\tconst previousEvent = this._state.getBefore(ticks);\n\t\t\tlet reschedulTime = ticks;\n\t\t\tif (previousEvent !== null) {\n\t\t\t\treschedulTime = previousEvent.time;\n\t\t\t}\n\t\t\tthis._rescheduleEvents(reschedulTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Cancel all scheduled events greater than or equal to the given time\n\t *  @param  time  The time after which events will be cancel.\n\t */\n\tcancel(time?: TransportTime | TransportTimeClass): this {\n\t\ttime = defaultArg(time, -Infinity);\n\t\tconst ticks = this.toTicks(time);\n\t\tthis._state.forEachFrom(ticks, event => {\n\t\t\tthis.context.transport.clear(event.id);\n\t\t});\n\t\tthis._state.cancel(ticks);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  The callback function invoker. Also\n\t *  checks if the Event is done playing\n\t *  @param  time  The time of the event in seconds\n\t */\n\tprotected _tick(time: Seconds): void {\n\t\tconst ticks = this.context.transport.getTicksAtTime(time);\n\t\tif (!this.mute && this._state.getValueAtTime(ticks) === \"started\") {\n\t\t\tif (this.probability < 1 && Math.random() > this.probability) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (this.humanize) {\n\t\t\t\tlet variation = 0.02;\n\t\t\t\tif (!isBoolean(this.humanize)) {\n\t\t\t\t\tvariation = this.toSeconds(this.humanize);\n\t\t\t\t}\n\t\t\t\ttime += (Math.random() * 2 - 1) * variation;\n\t\t\t}\n\t\t\tthis.callback(time, this.value);\n\t\t}\n\t}\n\n\t/**\n\t *  Get the duration of the loop.\n\t */\n\tprotected _getLoopDuration(): Ticks {\n\t\treturn Math.round((this._loopEnd - this._loopStart) / this._playbackRate);\n\t}\n\n\t/**\n\t *  If the note should loop or not\n\t *  between ToneEvent.loopStart and\n\t *  ToneEvent.loopEnd. If set to true,\n\t *  the event will loop indefinitely,\n\t *  if set to a number greater than 1\n\t *  it will play a specific number of\n\t *  times, if set to false, 0 or 1, the\n\t *  part will only play once.\n\t */\n\tget loop(): boolean | number {\n\t\treturn this._loop;\n\t}\n\tset loop(loop) {\n\t\tthis._loop = loop;\n\t\tthis._rescheduleEvents();\n\t}\n\n\t/**\n\t * \tThe playback rate of the note. Defaults to 1.\n\t *  @example\n\t * note.loop = true;\n\t * //repeat the note twice as fast\n\t * note.playbackRate = 2;\n\t */\n\tget playbackRate(): Positive {\n\t\treturn this._playbackRate;\n\t}\n\tset playbackRate(rate) {\n\t\tthis._playbackRate = rate;\n\t\tthis._rescheduleEvents();\n\t}\n\n\t/**\n\t *  The loopEnd point is the time the event will loop\n\t *  if ToneEvent.loop is true.\n\t */\n\tget loopEnd(): Time {\n\t\treturn new TicksClass(this.context, this._loopEnd).toSeconds();\n\t}\n\tset loopEnd(loopEnd) {\n\t\tthis._loopEnd = this.toTicks(loopEnd);\n\t\tif (this._loop) {\n\t\t\tthis._rescheduleEvents();\n\t\t}\n\t}\n\n\t/**\n\t *  The time when the loop should start.\n\t */\n\tget loopStart(): Time {\n\t\treturn new TicksClass(this.context, this._loopStart).toSeconds();\n\t}\n\tset loopStart(loopStart) {\n\t\tthis._loopStart = this.toTicks(loopStart);\n\t\tif (this._loop) {\n\t\t\tthis._rescheduleEvents();\n\t\t}\n\t}\n\n\t/**\n\t *  The current progress of the loop interval.\n\t *  Returns 0 if the event is not started yet or\n\t *  it is not set to loop.\n\t */\n\tget progress(): NormalRange {\n\t\tif (this._loop) {\n\t\t\tconst ticks = this.context.transport.ticks;\n\t\t\tconst lastEvent = this._state.get(ticks);\n\t\t\tif (lastEvent !== null && lastEvent.state === \"started\") {\n\t\t\t\tconst loopDuration = this._getLoopDuration();\n\t\t\t\tconst progress = (ticks - lastEvent.time) % loopDuration;\n\t\t\t\treturn progress / loopDuration;\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.cancel();\n\t\tthis._state.dispose();\n\t\treturn this;\n\t}\n}\n","import { TicksClass } from \"../core/type/Ticks\";\nimport { TransportTimeClass } from \"../core/type/TransportTime\";\nimport { NormalRange, Positive, Seconds, Ticks, Time, TransportTime } from \"../core/type/Units\";\nimport { defaultArg, optionsFromArguments } from \"../core/util/Defaults\";\nimport { StateTimeline } from \"../core/util/StateTimeline\";\nimport { isArray, isDefined, isObject, isUndef } from \"../core/util/TypeCheck\";\nimport { ToneEvent, ToneEventCallback, ToneEventOptions } from \"./ToneEvent\";\n\ntype CallbackType<T> =\n\tT extends {\n\t\ttime: Time;\n\t\t[key: string]: any,\n\t} ? T :\n\tT extends ArrayLike<any> ? T[1] :\n\tT extends Time ? null : never;\n\ninterface PartOptions<T> extends Omit<ToneEventOptions<CallbackType<T>>, \"value\"> {\n\tevents: T[];\n}\n\n/**\n *  Part is a collection ToneEvents which can be started/stopped and looped as a single unit.\n *\n *  @param callback The callback to invoke on each event\n *  @param events the array of events\n *  @example\n * var part = new Part(function(time, note){\n * \t//the notes given as the second element in the array\n * \t//will be passed in as the second argument\n * \tsynth.triggerAttackRelease(note, \"8n\", time);\n * }, [[0, \"C2\"], [\"0:2\", \"C3\"], [\"0:3:2\", \"G2\"]]);\n *  @example\n * //use an array of objects as long as the object has a \"time\" attribute\n * var part = new Part(function(time, value){\n * \t//the value is an object which contains both the note and the velocity\n * \tsynth.triggerAttackRelease(value.note, \"8n\", time, value.velocity);\n * }, [{\"time\" : 0, \"note\" : \"C3\", \"velocity\": 0.9},\n * \t   {\"time\" : \"0:2\", \"note\" : \"C4\", \"velocity\": 0.5}\n * ]).start(0);\n */\nexport class Part<ValueType = any> extends ToneEvent<ValueType> {\n\n\tname = \"Part\";\n\n\t/**\n\t *  Tracks the scheduled events\n\t */\n\tprotected _state: StateTimeline<{\n\t\tid: number,\n\t\toffset: number,\n\t}> = new StateTimeline(\"stopped\");\n\n\t/**\n\t * The events that belong to this part\n\t */\n\tprivate _events: Set<ToneEvent> = new Set();\n\n\tconstructor(options?: Partial<PartOptions<ValueType>>);\n\tconstructor(callback?: ToneEventCallback<CallbackType<ValueType>>, value?: ValueType[]);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Part.getDefaults(), arguments, [\"callback\", \"events\"]));\n\t\tconst options = optionsFromArguments(Part.getDefaults(), arguments, [\"callback\", \"events\"]);\n\n\t\t// add the events\n\t\toptions.events.forEach(event => {\n\t\t\tif (isArray(event)) {\n\t\t\t\tthis.add(event[0], event[1]);\n\t\t\t} else {\n\t\t\t\tthis.add(event);\n\t\t\t}\n\t\t});\n\t}\n\n\tstatic getDefaults(): PartOptions<any> {\n\t\treturn Object.assign(ToneEvent.getDefaults(), {\n\t\t\tevents: [],\n\t\t});\n\t}\n\n\t/**\n\t *  Start the part at the given time.\n\t *  @param  time    When to start the part.\n\t *  @param  offset  The offset from the start of the part to begin playing at.\n\t */\n\tstart(time?: TransportTime, offset?: Time): this {\n\t\tconst ticks = this.toTicks(time);\n\t\tif (this._state.getValueAtTime(ticks) !== \"started\") {\n\t\t\toffset = defaultArg(offset, this._loop ? this._loopStart : 0);\n\t\t\tif (this._loop) {\n\t\t\t\toffset = defaultArg(offset, this._loopStart);\n\t\t\t} else {\n\t\t\t\toffset = defaultArg(offset, 0);\n\t\t\t}\n\t\t\tconst computedOffset = this.toTicks(offset);\n\t\t\tthis._state.add({\n\t\t\t\tid : -1,\n\t\t\t\toffset: computedOffset,\n\t\t\t\tstate : \"started\",\n\t\t\t\ttime : ticks,\n\t\t\t});\n\t\t\tthis._forEach(event => {\n\t\t\t\tthis._startNote(event, ticks, computedOffset);\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Start the event in the given event at the correct time given\n\t *  the ticks and offset and looping.\n\t *  @param  event\n\t *  @param  ticks\n\t *  @param  offset\n\t */\n\tprivate _startNote(event: ToneEvent, ticks: Ticks, offset: Ticks): void {\n\t\tticks -= offset;\n\t\tif (this._loop) {\n\t\t\tif (event.startOffset >= this._loopStart && event.startOffset < this._loopEnd) {\n\t\t\t\tif (event.startOffset < offset) {\n\t\t\t\t\t// start it on the next loop\n\t\t\t\t\tticks += this._getLoopDuration();\n\t\t\t\t}\n\t\t\t\tevent.start(new TicksClass(this.context, ticks));\n\t\t\t} else if (event.startOffset < this._loopStart && event.startOffset >= offset) {\n\t\t\t\tevent.loop = false;\n\t\t\t\tevent.start(new TicksClass(this.context, ticks));\n\t\t\t}\n\t\t} else if (event.startOffset >= offset) {\n\t\t\tevent.start(new TicksClass(this.context, ticks));\n\t\t}\n\t}\n\n\tget startOffset(): Ticks {\n\t\treturn this._startOffset;\n\t}\n\tset startOffset(offset) {\n\t\tthis._startOffset = offset;\n\t\tthis._forEach(event => {\n\t\t\tevent.startOffset += this._startOffset;\n\t\t});\n\t}\n\n\t/**\n\t *  Stop the part at the given time.\n\t *  @param  time  When to stop the part.\n\t */\n\tstop(time?: TransportTime): this {\n\t\tconst ticks = this.toTicks(time);\n\t\tthis._state.cancel(ticks);\n\t\tthis._state.setStateAtTime(\"stopped\", ticks);\n\t\tthis._forEach(event => {\n\t\t\tevent.stop(time);\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get/Set an Event's value at the given time.\n\t * If a value is passed in and no event exists at\n\t * the given time, one will be created with that value.\n\t * If two events are at the same time, the first one will\n\t * be returned.\n\t * @example\n\t * part.at(\"1m\"); //returns the part at the first measure\n\t * part.at(\"2m\", \"C2\"); //set the value at \"2m\" to C2.\n\t * //if an event didn't exist at that time, it will be created.\n\t * @param time The time of the event to get or set.\n\t * @param value If a value is passed in, the value of the event at the given time will be set to it.\n\t */\n\tat(time: Time, value?: any): ToneEvent | null {\n\t\tconst timeInTicks = new TransportTimeClass(this.context, time).toTicks();\n\t\tconst tickTime = new TicksClass(this.context, 1).toSeconds();\n\n\t\tconst iterator = this._events.values();\n\t\tlet result = iterator.next();\n\t\twhile (!result.done) {\n\t\t\tconst event = result.value;\n\t\t\tif (Math.abs(timeInTicks - event.startOffset) < tickTime) {\n\t\t\t\tif (isDefined(value)) {\n\t\t\t\t\tevent.value = value;\n\t\t\t\t}\n\t\t\t\treturn event;\n\t\t\t}\n\t\t\tresult = iterator.next();\n\t\t}\n\t\t// if there was no event at that time, create one\n\t\tif (isDefined(value)) {\n\t\t\tthis.add(time, value);\n\t\t\t// return the new event\n\t\t\treturn this.at(time);\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t *  Add a an event to the part.\n\t *  @param time The time the note should start. If an object is passed in, it should\n\t *  \t\t\thave a 'time' attribute and the rest of the object will be used as the 'value'.\n\t *  @param  value\n\t * @example\n\t * part.add(\"1m\", \"C#+11\");\n\t * @example\n\t * part.add({\n\t * \ttime: \"1m\",\n\t * \tnote: \"C#11\"\n\t * });\n\t */\n\tadd(obj: {\n\t\ttime: Time,\n\t\t[key: string]: any;\n\t}): this;\n\tadd(time: Time, value?: any): this;\n\tadd(time: Time | object, value?: any): this {\n\t\t// extract the parameters\n\t\tif (time instanceof Object && Reflect.has(time, \"time\")) {\n\t\t\tvalue = time;\n\t\t\ttime = value.time;\n\t\t}\n\t\tconst ticks = this.toTicks(time);\n\t\tlet event: ToneEvent;\n\t\tif (value instanceof ToneEvent) {\n\t\t\tevent = value;\n\t\t\tevent.callback = this._tick.bind(this);\n\t\t} else {\n\t\t\tevent = new ToneEvent({\n\t\t\t\tcallback : this._tick.bind(this),\n\t\t\t\tcontext: this.context,\n\t\t\t\tvalue,\n\t\t\t});\n\t\t}\n\t\t// the start offset\n\t\tevent.startOffset = ticks;\n\n\t\t// initialize the values\n\t\tevent.set({\n\t\t\thumanize : this.humanize,\n\t\t\tloop : this.loop,\n\t\t\tloopEnd : this.loopEnd,\n\t\t\tloopStart : this.loopStart,\n\t\t\tplaybackRate : this.playbackRate,\n\t\t\tprobability : this.probability,\n\t\t});\n\n\t\tthis._events.add(event);\n\n\t\t// start the note if it should be played right now\n\t\tthis._restartEvent(event);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Restart the given event\n\t */\n\tprivate _restartEvent(event: ToneEvent): void {\n\t\tthis._state.forEach((stateEvent) => {\n\t\t\tif (stateEvent.state === \"started\") {\n\t\t\t\tthis._startNote(event, stateEvent.time, stateEvent.offset);\n\t\t\t} else {\n\t\t\t\t// stop the note\n\t\t\t\tevent.stop(new TicksClass(this.context, stateEvent.time));\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t *  Remove an event from the part. If the event at that time is a Part,\n\t *  it will remove the entire part.\n\t *  @param time The time of the event\n\t *  @param value Optionally select only a specific event value\n\t */\n\tremove(obj: {\n\t\ttime: Time,\n\t\t[key: string]: any;\n\t}): this;\n\tremove(time: Time, value?: any): this;\n\tremove(time: Time | object, value?: any): this {\n\t\t// extract the parameters\n\t\tif (isObject(time) && time.hasOwnProperty(\"time\")) {\n\t\t\tvalue = time;\n\t\t\ttime = value.time;\n\t\t}\n\t\ttime = this.toTicks(time);\n\t\tthis._events.forEach(event => {\n\t\t\tif (event.startOffset === time) {\n\t\t\t\tif (isUndef(value) || (isDefined(value) && event.value === value)) {\n\t\t\t\t\tthis._events.delete(event);\n\t\t\t\t\tevent.dispose();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Remove all of the notes from the group.\n\t */\n\tclear(): this {\n\t\tthis._forEach(event => event.dispose());\n\t\tthis._events.clear();\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Cancel scheduled state change events: i.e. \"start\" and \"stop\".\n\t *  @param after The time after which to cancel the scheduled events.\n\t */\n\tcancel(after?: TransportTime | TransportTimeClass): this {\n\t\tthis._forEach(event => event.cancel(after));\n\t\tthis._state.cancel(this.toTicks(after));\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over all of the events\n\t */\n\tprivate _forEach(callback: (event: ToneEvent) => void): this {\n\t\tif (this._events) {\n\t\t\tthis._events.forEach(event => {\n\t\t\t\tif (event instanceof Part) {\n\t\t\t\t\tevent._forEach(callback);\n\t\t\t\t} else {\n\t\t\t\t\tcallback(event);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Set the attribute of all of the events\n\t *  @param  attr  the attribute to set\n\t *  @param  value      The value to set it to\n\t */\n\tprivate _setAll(attr: string, value: any): void {\n\t\tthis._forEach(event => {\n\t\t\tevent[attr] = value;\n\t\t});\n\t}\n\n\t/**\n\t *  Internal tick method\n\t *  @param  time  The time of the event in seconds\n\t */\n\tprotected _tick(time: Seconds, value?: any): void {\n\t\tif (!this.mute) {\n\t\t\tthis.callback(time, value);\n\t\t}\n\t}\n\n\t/**\n\t *  Determine if the event should be currently looping\n\t *  given the loop boundries of this Part.\n\t *  @param  event  The event to test\n\t */\n\tprivate _testLoopBoundries(event: ToneEvent): void {\n\t\tif (this._loop && (event.startOffset < this._loopStart || event.startOffset >= this._loopEnd)) {\n\t\t\tevent.cancel(0);\n\t\t} else if (event.state === \"stopped\") {\n\t\t\t// reschedule it if it's stopped\n\t\t\tthis._restartEvent(event);\n\t\t}\n\t}\n\n\t/**\n\t *  The probability of the notes being triggered.\n\t */\n\tget probability(): NormalRange {\n\t\treturn this._probability;\n\t}\n\tset probability(prob) {\n\t\tthis._probability = prob;\n\t\tthis._setAll(\"probability\", prob);\n\t}\n\n\t/**\n\t * If set to true, will apply small random variation\n\t * to the callback time. If the value is given as a time, it will randomize\n\t * by that amount.\n\t * @example\n\t * event.humanize = true;\n\t */\n\tget humanize(): boolean | Time {\n\t\treturn this._humanize;\n\t}\n\tset humanize(variation) {\n\t\tthis._humanize = variation;\n\t\tthis._setAll(\"humanize\", variation);\n\t}\n\n\t/**\n\t * If the part should loop or not\n\t * between Part.loopStart and\n\t * Part.loopEnd. If set to true,\n\t * the part will loop indefinitely,\n\t * if set to a number greater than 1\n\t * it will play a specific number of\n\t * times, if set to false, 0 or 1, the\n\t * part will only play once.\n\t * @example\n\t * //loop the part 8 times\n\t * part.loop = 8;\n\t */\n\tget loop(): boolean | number {\n\t\treturn this._loop;\n\t}\n\tset loop(loop) {\n\t\tthis._loop = loop;\n\t\tthis._forEach(event => {\n\t\t\tevent.loopStart = this.loopStart;\n\t\t\tevent.loopEnd = this.loopEnd;\n\t\t\tevent.loop = loop;\n\t\t\tthis._testLoopBoundries(event);\n\t\t});\n\t}\n\n\t/**\n\t *  The loopEnd point determines when it will\n\t *  loop if Part.loop is true.\n\t *  @memberOf Part#\n\t *  @type {Time}\n\t *  @name loopEnd\n\t */\n\tget loopEnd(): Time {\n\t\treturn new TicksClass(this.context, this._loopEnd).toSeconds();\n\t}\n\tset loopEnd(loopEnd) {\n\t\tthis._loopEnd = this.toTicks(loopEnd);\n\t\tif (this._loop) {\n\t\t\tthis._forEach(event => {\n\t\t\t\tevent.loopEnd = loopEnd;\n\t\t\t\tthis._testLoopBoundries(event);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t *  The loopStart point determines when it will\n\t *  loop if Part.loop is true.\n\t */\n\tget loopStart(): Time {\n\t\treturn new TicksClass(this.context, this._loopStart).toSeconds();\n\t}\n\tset loopStart(loopStart) {\n\t\tthis._loopStart = this.toTicks(loopStart);\n\t\tif (this._loop) {\n\t\t\tthis._forEach(event => {\n\t\t\t\tevent.loopStart = this.loopStart;\n\t\t\t\tthis._testLoopBoundries(event);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * \tThe playback rate of the part\n\t */\n\tget playbackRate(): Positive {\n\t\treturn this._playbackRate;\n\t}\n\tset playbackRate(rate) {\n\t\tthis._playbackRate = rate;\n\t\tthis._setAll(\"playbackRate\", rate);\n\t}\n\n\t/**\n\t * \tThe number of scheduled notes in the part.\n\t */\n\tget length(): number {\n\t\treturn this._events.size;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.clear();\n\t\treturn this;\n\t}\n}\n","import { TicksClass } from \"../core/type/Ticks\";\nimport { NormalRange, Positive, Seconds, Ticks, Time, TransportTime } from \"../core/type/Units\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { isArray, isString } from \"../core/util/TypeCheck\";\nimport { Part } from \"./Part\";\nimport { ToneEvent, ToneEventCallback, ToneEventOptions } from \"./ToneEvent\";\n\ntype SequenceEventDescription<T> = Array<T | T[]>;\n\ninterface SequenceOptions<T> extends Omit<ToneEventOptions<T>, \"value\"> {\n\tloopStart: number;\n\tloopEnd: number;\n\tsubdivision: Time;\n\tevents: SequenceEventDescription<T>;\n}\n\n/**\n * A sequence is an alternate notation of a part. Instead\n * of passing in an array of [time, event] pairs, pass\n * in an array of events which will be spaced at the\n * given subdivision. Sub-arrays will subdivide that beat\n * by the number of items are in the array.\n * Sequence notation inspiration from [Tidal](http://yaxu.org/tidal/)\n * @param  callback  The callback to invoke with every note\n * @param  sequence  The sequence\n * @param  subdivision  The subdivision between which events are placed.\n * @example\n * var seq = new Sequence(function(time, note){\n * \tconsole.log(note);\n * //straight quater notes\n * }, [\"C4\", \"E4\", \"G4\", \"A4\"], \"4n\");\n * @example\n * var seq = new Sequence(function(time, note){\n * \tconsole.log(note);\n * //subdivisions are given as subarrays\n * }, [\"C4\", [\"E4\", \"D4\", \"E4\"], \"G4\", [\"A4\", \"G4\"]]);\n */\nexport class Sequence<ValueType = any> extends ToneEvent<ValueType> {\n\n\tname = \"Sequence\";\n\n\t/**\n\t *  The subdivison of each note\n\t */\n\tprivate _subdivision: Ticks;\n\n\t/**\n\t * The object responsible for scheduling all of the events\n\t */\n\tprivate _part: Part = new Part({\n\t\tcallback: this._seqCallback.bind(this),\n\t\tcontext: this.context,\n\t});\n\n\t/**\n\t * private reference to all of the sequence proxies\n\t */\n\tprivate _events: ValueType[] = [];\n\n\t/**\n\t * The proxied array\n\t */\n\tprivate _eventsArray: ValueType[] = [];\n\n\tconstructor(\n\t\tcallback?: ToneEventCallback<ValueType>,\n\t\tevents?: SequenceEventDescription<ValueType>,\n\t\tsubdivision?: Time,\n\t);\n\tconstructor(options?: Partial<SequenceOptions<ValueType>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Sequence.getDefaults(), arguments, [\"callback\", \"events\", \"subdivision\"]));\n\t\tconst options = optionsFromArguments(Sequence.getDefaults(), arguments, [\"callback\", \"events\", \"subdivision\"]);\n\n\t\tthis._subdivision = this.toTicks(options.subdivision);\n\n\t\tthis.events = options.events;\n\n\t\t// set all of the values\n\t\tthis.loop = options.loop;\n\t\tthis.loopStart = options.loopStart;\n\t\tthis.loopEnd = options.loopEnd;\n\t\tthis.playbackRate = options.playbackRate;\n\t\tthis.probability = options.probability;\n\t\tthis.humanize = options.humanize;\n\t\tthis.mute = options.mute;\n\t\tthis.playbackRate = options.playbackRate;\n\t}\n\n\tstatic getDefaults(): SequenceOptions<any> {\n\t\treturn Object.assign( omitFromObject(ToneEvent.getDefaults(), [\"value\"]), {\n\t\t\tevents: [],\n\t\t\tloop: true,\n\t\t\tloopEnd : 0,\n\t\t\tloopStart: 0,\n\t\t\tsubdivision: \"8n\",\n\t\t});\n\t}\n\n\t/**\n\t * The internal callback for when an event is invoked\n\t */\n\tprivate _seqCallback(time: Seconds, value: any): void {\n\t\tif (value !== null) {\n\t\t\tthis.callback(time, value);\n\t\t}\n\t}\n\n\t/**\n\t * The sequence\n\t */\n\tget events(): any[] {\n\t\treturn this._events;\n\t}\n\tset events(s) {\n\t\tthis.clear();\n\t\tthis._eventsArray = s;\n\t\tthis._events = this._createSequence(this._eventsArray);\n\t\tthis._eventsUpdated();\n\t}\n\n\t/**\n\t *  Start the part at the given time.\n\t *  @param  time    When to start the part.\n\t *  @param  offset  The offset index to start at\n\t */\n\tstart(time?: TransportTime, offset?: number): this {\n\t\tthis._part.start(time, offset ? this._indexTime(offset) : offset);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Stop the part at the given time.\n\t *  @param  time  When to stop the part.\n\t */\n\tstop(time?: TransportTime): this {\n\t\tthis._part.stop(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  The subdivision of the sequence. This can only be\n\t *  set in the constructor. The subdivision is the\n\t *  interval between successive steps.\n\t */\n\tget subdivision(): Seconds {\n\t\treturn new TicksClass(this.context, this._subdivision).toSeconds();\n\t}\n\n\t/**\n\t * Create a sequence proxy which can be monitored to create subsequences\n\t */\n\tprivate _createSequence(array: any[]): any[] {\n\t\treturn new Proxy(array, {\n\t\t\tget: (target: any[], property: PropertyKey): any => {\n\t\t\t\t// property is index in this case\n\t\t\t\treturn target[property];\n\t\t\t},\n\t\t\tset: (target: any[], property: PropertyKey, value: any): boolean => {\n\t\t\t\tif (isString(property) && isFinite(parseInt(property, 10))) {\n\t\t\t\t\tconst index = parseInt(property, 10);\n\t\t\t\t\tif (isArray(value)) {\n\t\t\t\t\t\ttarget[property] = this._createSequence(value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttarget[property] = value;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttarget[property] = value;\n\t\t\t\t}\n\t\t\t\tthis._eventsUpdated();\n\t\t\t\t// return true to accept the changes\n\t\t\t\treturn true;\n\t\t\t},\n\t\t});\n\t}\n\n\t/**\n\t * When the sequence has changed, all of the events need to be recreated\n\t */\n\tprivate _eventsUpdated(): void {\n\t\tthis._part.clear();\n\t\tthis._rescheduleSequence(this._eventsArray, this._subdivision, this.startOffset);\n\t\t// update the loopEnd\n\t\tthis.loopEnd = this.loopEnd;\n\t}\n\n\t/**\n\t * reschedule all of the events that need to be rescheduled\n\t */\n\tprivate _rescheduleSequence(sequence: any[], subdivision: Ticks, startOffset: Ticks): void {\n\t\tsequence.forEach((value, index) => {\n\t\t\tconst eventOffset = index * (subdivision) + startOffset;\n\t\t\tif (isArray(value)) {\n\t\t\t\tthis._rescheduleSequence(value, subdivision / value.length, eventOffset);\n\t\t\t} else {\n\t\t\t\tconst startTime = new TicksClass(this.context, eventOffset, \"i\").toSeconds();\n\t\t\t\tthis._part.add(startTime, value);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t *  Get the time of the index given the Sequence's subdivision\n\t *  @param  index\n\t *  @return The time of that index\n\t *  @private\n\t */\n\tprivate _indexTime(index: number): Seconds {\n\t\treturn new TicksClass(this.context, index * (this._subdivision) + this.startOffset).toSeconds();\n\t}\n\n\t/**\n\t * Clear all of the events\n\t */\n\tclear(): this {\n\t\tthis._part.clear();\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._part.dispose();\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// PROXY CALLS\n\t///////////////////////////////////////////////////////////////////////////\n\n\tget loop(): boolean | number {\n\t\treturn this._part.loop;\n\t}\n\tset loop(l) {\n\t\tif (this._part) {\n\t\t\tthis._part.loop = l;\n\t\t}\n\t}\n\n\t/**\n\t * The index at which the sequence should start looping\n\t */\n\tget loopStart(): number {\n\t\treturn this._loopStart;\n\t}\n\tset loopStart(index) {\n\t\tthis._loopStart = index;\n\t\tif (this._part) {\n\t\t\tthis._part.loopStart = this._indexTime(index);\n\t\t}\n\t}\n\n\t/**\n\t * The index at which the sequence should end looping\n\t */\n\tget loopEnd(): number {\n\t\treturn this._loopEnd;\n\t}\n\tset loopEnd(index) {\n\t\tthis._loopEnd = index;\n\t\tif (this._part) {\n\t\t\tif (index === 0) {\n\t\t\t\tthis._part.loopEnd = this._indexTime(this._eventsArray.length);\n\t\t\t} else {\n\t\t\t\tthis._part.loopEnd = this._indexTime(index);\n\t\t\t}\n\t\t}\n\t}\n\n\tget startOffset(): Ticks {\n\t\treturn this._part.startOffset;\n\t}\n\tset startOffset(start) {\n\t\tif (this._part) {\n\t\t\tthis._part.startOffset = start;\n\t\t}\n\t}\n\n\tget playbackRate(): Positive {\n\t\treturn this._part.playbackRate;\n\t}\n\tset playbackRate(rate) {\n\t\tif (this._part) {\n\t\t\tthis._part.playbackRate = rate;\n\t\t}\n\t}\n\n\tget probability(): NormalRange {\n\t\treturn this._part.probability;\n\t}\n\tset probability(prob) {\n\t\tif (this._part) {\n\t\t\tthis._part.probability = prob;\n\t\t}\n\t}\n\n\tget humanize(): boolean | Time {\n\t\treturn this._part.humanize;\n\t}\n\tset humanize(variation) {\n\t\tif (this._part) {\n\t\t\tthis._part.humanize = variation;\n\t\t}\n\t}\n\n\t/**\n\t * The number of scheduled events\n\t */\n\tget length(): number {\n\t\treturn this._part.length;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { connect, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { NormalRange } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { GainToAudio } from \"../../signal/GainToAudio\";\nimport { Signal } from \"../../signal/Signal\";\n\ninterface CrossFadeOptions extends ToneAudioNodeOptions {\n\tfade: NormalRange;\n}\n\n/**\n * Tone.Crossfade provides equal power fading between two inputs.\n * More on crossfading technique [here](https://en.wikipedia.org/wiki/Fade_(audio_engineering)#Crossfading).\n * ```\n *                                             +---------+\n *                                            +> input a +>--+\n * +-----------+   +---------------------+     |         |   |\n * | 1s signal +>--> stereoPannerNode  L +>----> gain    |   |\n * +-----------+   |                     |     +---------+   |\n *               +-> pan               R +>-+                |   +--------+\n *               | +---------------------+  |                +---> output +>\n *  +------+     |                          |  +---------+   |   +--------+\n *  | fade +>----+                          | +> input b +>--+\n *  +------+                                |  |         |\n *                                          +--> gain    |\n *                                             +---------+\n * ```\n * @example\n * var crossFade = new CrossFade(0.5);\n * //connect effect A to crossfade from\n * //effect output 0 to crossfade input 0\n * effectA.connect(crossFade.a);\n * //connect effect B to crossfade from\n * //effect output 0 to crossfade input 1\n * effectB.connect(crossFade.b);\n * crossFade.fade.value = 0;\n * // ^ only effectA is output\n * crossFade.fade.value = 1;\n * // ^ only effectB is output\n * crossFade.fade.value = 0.5;\n * // ^ the two signals are mixed equally.\n */\nexport class CrossFade extends ToneAudioNode<CrossFadeOptions> {\n\n\treadonly name = \"CrossFade\";\n\n\t/**\n\t * The crossfading is done by a StereoPannerNode\n\t */\n\tprivate _panner: StereoPannerNode = this.context.createStereoPanner();\n\n\t/**\n\t * Split the output of the panner node into two values used to control the gains.\n\t */\n\tprivate _split: ChannelSplitterNode = this.context.createChannelSplitter(2);\n\n\t/**\n\t * Convert the fade value into an audio range value so it can be connected\n\t * to the panner.pan AudioParam\n\t */\n\tprivate _g2a: GainToAudio = new GainToAudio({ context : this.context });\n\n\t/**\n\t * The input which is at full level when fade = 0\n\t */\n\ta: Gain = new Gain({\n\t\tcontext : this.context,\n\t\tgain: 0,\n\t});\n\n\t/**\n\t * The input which is at full level when fade = 1\n\t */\n\tb: Gain = new Gain({\n\t\tcontext : this.context,\n\t\tgain: 0,\n\t});\n\n\t/**\n\t * The output is a mix between `a` and `b` at the ratio of `fade`\n\t */\n\toutput: Gain = new Gain({ context : this.context });\n\n\t/**\n\t * CrossFade has no input, you must choose either `a` or `b`\n\t */\n\tinput: undefined;\n\n\t/**\n\t * \tThe mix between the two inputs. A fade value of 0\n\t * \twill output 100% crossFade.a and\n\t * \ta value of 1 will output 100% crossFade.b.\n\t */\n\treadonly fade: Signal<NormalRange>;\n\n\tprotected _internalChannels = [this.a, this.b];\n\n\tconstructor(options?: Partial<CrossFadeOptions>);\n\t// tslint:disable-next-line: unified-signatures\n\tconstructor(fade?: NormalRange);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(CrossFade.getDefaults(), arguments, [\"fade\"])));\n\t\tconst options = optionsFromArguments(CrossFade.getDefaults(), arguments, [\"fade\"]);\n\n\t\tthis.fade = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"normalRange\",\n\t\t\tvalue: options.fade,\n\t\t});\n\t\treadOnly(this, \"fade\");\n\n\t\tthis.context.getConstant(1).connect(this._panner);\n\t\tthis._panner.connect(this._split);\n\t\t// this is necessary for standardized-audio-context\n\t\t// doesn't make any difference for the native AudioContext\n\t\t// https://github.com/chrisguttandin/standardized-audio-context/issues/647\n\t\tthis._panner.channelCount = 1;\n\t\tthis._panner.channelCountMode = \"explicit\";\n\t\tconnect(this._split, this.a.gain, 0);\n\t\tconnect(this._split, this.b.gain, 1);\n\n\t\tthis.fade.chain(this._g2a, this._panner.pan);\n\n\t\tthis.a.connect(this.output);\n\t\tthis.b.connect(this.output);\n\t}\n\n\tstatic getDefaults(): CrossFadeOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tfade: 0.5,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.a.dispose();\n\t\tthis.b.dispose();\n\t\tthis.output.dispose();\n\t\tthis.fade.dispose();\n\t\tthis._g2a.dispose();\n\t\tthis._panner.disconnect();\n\t\tthis._split.disconnect();\n\t\treturn this;\n\t}\n}\n","import { CrossFade } from \"../component/channel/CrossFade\";\nimport { Gain } from \"../core/context/Gain\";\nimport { InputNode, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { NormalRange } from \"../core/type/Units\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Signal } from \"../signal/Signal\";\n\nexport interface EffectOptions extends ToneAudioNodeOptions {\n\twet: NormalRange;\n}\n/**\n * \t@class  Effect is the base class for effects. Connect the effect between\n * \t        the effectSend and effectReturn GainNodes, then control the amount of\n * \t        effect which goes to the output using the wet control.\n *\n *  @constructor\n *  @extends {Tone.AudioNode}\n *  @param {NormalRange|Object} [wet] The starting wet value.\n */\nexport abstract class Effect<Options extends EffectOptions>\nextends ToneAudioNode<Options> {\n\n\treadonly name: string = \"Effect\";\n\n\t/**\n\t *  the drywet knob to control the amount of effect\n\t */\n\tprivate _dryWet: CrossFade = new CrossFade({ context : this.context });\n\n\t/**\n\t *  The wet control is how much of the effected\n\t *  will pass through to the output. 1 = 100% effected\n\t *  signal, 0 = 100% dry signal.\n\t */\n\twet: Signal<NormalRange> = this._dryWet.fade;\n\n\t/**\n\t *  connect the effectSend to the input of hte effect\n\t */\n\tprotected effectSend: Gain = new Gain({ context : this.context });\n\n\t/**\n\t *  connect the output of the effect to the effectReturn\n\t */\n\tprotected effectReturn: Gain = new Gain({ context : this.context });\n\n\t/**\n\t * The effect input node\n\t */\n\tinput: Gain = new Gain({ context : this.context });\n\n\t/**\n\t * The effect output\n\t */\n\toutput = this._dryWet;\n\n\tconstructor(options: EffectOptions) {\n\t\tsuper(options);\n\n\t\t// connections\n\t\tthis.input.fan(this._dryWet.a, this.effectSend);\n\t\tthis.effectReturn.connect(this._dryWet.b);\n\t\tthis.wet.setValueAtTime(options.wet, 0);\n\t\tthis._internalChannels = [this.effectReturn, this.effectSend];\n\t\treadOnly(this, \"wet\");\n\t}\n\n\tstatic getDefaults(): EffectOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\twet : 1,\n\t\t});\n\t}\n\n\t/**\n\t *  chains the effect in between the effectSend and effectReturn\n\t */\n\tprotected connectEffect(effect: ToneAudioNode | AudioNode): this {\n\t\t// add it to the internal channels\n\t\tthis._internalChannels.push(effect);\n\t\tthis.effectSend.chain(effect, this.effectReturn);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._dryWet.dispose();\n\t\tthis.effectSend.dispose();\n\t\tthis.effectReturn.dispose();\n\t\tthis.wet.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../core/context/Gain\";\nimport { Param } from \"../core/context/Param\";\nimport { NormalRange } from \"../core/type/Units\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Effect, EffectOptions } from \"./Effect\";\n\nexport interface FeedbackEffectOptions extends EffectOptions {\n\t/**\n\t * The feedback from the output back to the input\n\t * ```\n\t * +---<--------<---+\n\t * |                |\n\t * |  +----------+  |\n\t * +--> feedback +>-+\n\t *    +----------+\n\t * ```\n\t */\n\tfeedback: NormalRange;\n}\n\n/**\n * FeedbackEffect provides a loop between an audio source and its own output.\n * This is a base-class for feedback effects.\n */\nexport abstract class FeedbackEffect<Options extends FeedbackEffectOptions> extends Effect<Options> {\n\n\tname = \"FeedbackEffect\";\n\n\t/**\n\t *  the gain which controls the feedback\n\t */\n\tprivate _feedbackGain: Gain<NormalRange>;\n\n\t/**\n\t *  The amount of signal which is fed back into the effect input.\n\t */\n\tfeedback: Param<NormalRange>;\n\n\tconstructor(options: FeedbackEffectOptions) {\n\n\t\tsuper(options);\n\n\t\tthis._feedbackGain = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: options.feedback,\n\t\t\tunits: \"normalRange\",\n\t\t});\n\n\t\tthis.feedback = this._feedbackGain.gain;\n\t\treadOnly(this, \"feedback\");\n\n\t\t// the feedback loop\n\t\tthis.effectReturn.chain(this._feedbackGain, this.effectSend);\n\t}\n\n\tstatic getDefaults(): FeedbackEffectOptions {\n\t\treturn Object.assign(Effect.getDefaults(), {\n\t\t\tfeedback: 0.125,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._feedbackGain.dispose();\n\t\tthis.feedback.dispose();\n\t\treturn this;\n\t}\n}\n","import { Delay } from \"../core/context/Delay\";\nimport { Param } from \"../core/context/Param\";\nimport { NormalRange, Time } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { FeedbackEffect,  FeedbackEffectOptions } from \"./FeedbackEffect\";\n\ninterface FeedbackDelayOptions extends FeedbackEffectOptions {\n\tdelayTime: Time;\n\tmaxDelay: Time;\n}\n\n/**\n * FeedbackDelay is a DelayNode in which part of output signal is fed back into the delay.\n *\n * @param delayTime The delay applied to the incoming signal.\n * @param feedback The amount of the effected signal which is fed back through the delay.\n * @example\n * var feedbackDelay = new FeedbackDelay(\"8n\", 0.5).toDestination();\n * var tom = new Tone.MembraneSynth({\n * \t\"octaves\" : 4,\n * \t\"pitchDecay\" : 0.1\n * }).connect(feedbackDelay);\n * tom.triggerAttackRelease(\"A2\",\"32n\");\n */\nexport class FeedbackDelay extends FeedbackEffect<FeedbackDelayOptions> {\n\n\tname = \"FeedbackDelay\";\n\n\t/**\n\t *  the delay node\n\t */\n\tprivate _delayNode: Delay;\n\n\t/**\n\t *  The delayTime of the FeedbackDelay.\n\t */\n\treadonly delayTime: Param<Time>;\n\n\tconstructor(delayTime?: Time, feedback?: NormalRange);\n\tconstructor(options?: Partial<FeedbackDelayOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(FeedbackDelay.getDefaults(), arguments, [\"delayTime\", \"feedback\"]));\n\t\tconst options = optionsFromArguments(FeedbackDelay.getDefaults(), arguments, [\"delayTime\", \"feedback\"]);\n\n\t\tthis._delayNode = new Delay({\n\t\t\tcontext: this.context,\n\t\t\tdelayTime: options.delayTime,\n\t\t\tmaxDelay: options.maxDelay,\n\t\t});\n\t\tthis.delayTime = this._delayNode.delayTime;\n\n\t\t// connect it up\n\t\tthis.connectEffect(this._delayNode);\n\t\treadOnly(this, \"delayTime\");\n\t}\n\n\tstatic getDefaults(): FeedbackDelayOptions {\n\t\treturn Object.assign(FeedbackEffect.getDefaults(), {\n\t\t\tdelayTime: 0.25,\n\t\t\tmaxDelay: 1,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._delayNode.dispose();\n\t\tthis.delayTime.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioBuffer } from \"../core/context/ToneAudioBuffer\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { Effect, EffectOptions } from \"./Effect\";\n\ninterface ToneConvolverOptions extends EffectOptions {\n\tonload: () => void;\n\tnormalize: boolean;\n\turl?: string | AudioBuffer | ToneAudioBuffer;\n}\n\n/**\n * Convolver is a wrapper around the Native Web Audio\n * [ConvolverNode](http://webaudio.github.io/web-audio-api/#the-convolvernode-interface).\n * Convolution is useful for reverb and filter emulation. Read more about convolution reverb on\n * [Wikipedia](https://en.wikipedia.org/wiki/Convolution_reverb).\n *\n * @param url The URL of the impulse response or the Tone.Buffer contianing the impulse response.\n * @param onload The callback to invoke when the url is loaded.\n * @example\n * //initializing the convolver with an impulse response\n * var convolver = new Convolver(\"./path/to/ir.wav\").toDestination();\n */\nexport class Convolver extends Effect<ToneConvolverOptions> {\n\n\tname = \"Convolver\";\n\n\t/**\n\t *  The native ConvolverNode\n\t */\n\tprivate _convolver: ConvolverNode = this.context.createConvolver();\n\n\t/**\n\t *  The Buffer belonging to the convolver\n\t */\n\tprivate _buffer: ToneAudioBuffer;\n\n\tconstructor(url?: string | AudioBuffer | ToneAudioBuffer, onload?: () => void);\n\tconstructor(options?: Partial<ToneConvolverOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Convolver.getDefaults(), arguments, [\"url\", \"onload\"]));\n\t\tconst options = optionsFromArguments(Convolver.getDefaults(), arguments, [\"url\", \"onload\"]);\n\n\t\tthis._buffer = new ToneAudioBuffer(options.url, buffer => {\n\t\t\tthis.buffer = buffer;\n\t\t\toptions.onload();\n\t\t});\n\n\t\t// set if it's already loaded\n\t\tif (this._buffer.loaded) {\n\t\t\tthis.buffer = this._buffer;\n\t\t}\n\n\t\t// initially set normalization\n\t\tthis.normalize = options.normalize;\n\n\t\t// connect it up\n\t\tthis.connectEffect(this._convolver);\n\t}\n\n\tstatic getDefaults(): ToneConvolverOptions {\n\t\treturn Object.assign(Effect.getDefaults(), {\n\t\t\tnormalize : true,\n\t\t\tonload : noOp,\n\t\t});\n\t}\n\n\t/**\n\t * Load an impulse response url as an audio buffer.\n\t * Decodes the audio asynchronously and invokes\n\t * the callback once the audio buffer loads.\n\t * @param url The url of the buffer to load. filetype support depends on the browser.\n\t */\n\tasync load(url: string): Promise<void> {\n\t\tthis.buffer = await this._buffer.load(url);\n\t}\n\n\t/**\n\t *  The convolver's buffer\n\t */\n\tget buffer(): ToneAudioBuffer | null {\n\t\tif (this._buffer.length) {\n\t\t\treturn this._buffer;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\tset buffer(buffer) {\n\t\tif (buffer) {\n\t\t\tthis._buffer.set(buffer);\n\t\t}\n\t\t// if it's already got a buffer, create a new one\n\t\tif (this._convolver.buffer) {\n\t\t\t// disconnect the old one\n\t\t\tthis.effectSend.disconnect();\n\t\t\tthis._convolver.disconnect();\n\t\t\t// create and connect a new one\n\t\t\tthis._convolver = this.context.createConvolver();\n\t\t\tthis.connectEffect(this._convolver);\n\t\t}\n\t\tconst buff = this._buffer.get();\n\t\tthis._convolver.buffer = buff ? buff : null;\n\t}\n\n\t/**\n\t * The normalize property of the ConvolverNode interface is a boolean that\n\t * controls whether the impulse response from the buffer will be scaled by\n\t * an equal-power normalization when the buffer attribute is set, or not.\n\t */\n\tget normalize(): boolean {\n\t\treturn this._convolver.normalize;\n\t}\n\tset normalize(norm) {\n\t\tthis._convolver.normalize = norm;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._buffer.dispose();\n\t\tthis._convolver.disconnect();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Positive } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n\ninterface MergeOptions extends ToneAudioNodeOptions {\n\tchannels: Positive;\n}\n\n/**\n * Merge brings multiple mono input channels into a single multichannel output channel.\n *\n * @param channels The number of channels to merge.\n * @example\n * var merge = new Merge().toDestination();\n * //routing a sine tone in the left channel\n * //and noise in the right channel\n * var osc = new Tone.Oscillator().connect(merge.left);\n * var noise = new Tone.Noise().connect(merge.right);\n * //starting our oscillators\n * noise.start();\n * osc.start();\n */\nexport class Merge extends ToneAudioNode<MergeOptions> {\n\n\treadonly name = \"Merge\";\n\n\t/**\n\t *  The merger node for the two channels.\n\t */\n\tprivate _merger: ChannelMergerNode;\n\n\t/**\n\t * The output is the input channels combined into a sigle (multichannel) output\n\t */\n\treadonly output: ChannelMergerNode;\n\n\t/**\n\t * Multiple input connections combine into a single output.\n\t */\n\treadonly input: ChannelMergerNode;\n\n\tconstructor(channels?: Positive);\n\t// tslint:disable-next-line: unified-signatures\n\tconstructor(options?: Partial<MergeOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Merge.getDefaults(), arguments, [\"channels\"]));\n\t\tconst options = optionsFromArguments(Merge.getDefaults(), arguments, [\"channels\"]);\n\n\t\tthis._merger = this.output = this.input = this.context.createChannelMerger(options.channels);\n\t}\n\n\tstatic getDefaults(): MergeOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tchannels: 2,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._merger.disconnect();\n\t\treturn this;\n\t}\n}\n","import { Merge } from \"../component/channel/Merge\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Offline } from \"../core/context/Offline\";\nimport { Seconds } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Noise } from \"../source/Noise\";\nimport { Effect, EffectOptions } from \"./Effect\";\n\ninterface ReverbOptions extends EffectOptions {\n\tdecay: Seconds;\n\tpreDelay: Seconds;\n}\n\n/**\n *  Simple convolution created with decaying noise.\n *  Generates an Impulse Response Buffer\n * \twith Tone.Offline then feeds the IR into ConvolverNode.\n * \tNote: the Reverb will not make any sound until [generate](#generate)\n * \thas been invoked and resolved.\n *\n * \tInspiration from [ReverbGen](https://github.com/adelespinasse/reverbGen).\n * \tCopyright (c) 2014 Alan deLespinasse Apache 2.0 License.\n *\n *  @param decay The amount of time it will reverberate for.\n */\nexport class Reverb extends Effect<ReverbOptions> {\n\n\treadonly name = \"Reverb\";\n\n\t/**\n\t *  Convolver node\n\t */\n\tprivate _convolver: ConvolverNode = this.context.createConvolver();\n\n\t/**\n\t * The duration of the reverb\n\t */\n\tdecay: Seconds;\n\n\t/**\n\t * The amount of time before the reverb is fully ramped in.\n\t */\n\tpreDelay: Seconds;\n\n\tconstructor(decay?: Seconds);\n\t// tslint:disable-next-line: unified-signatures\n\tconstructor(options?: Partial<ReverbOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Reverb.getDefaults(), arguments, [\"decay\"]));\n\t\tconst options = optionsFromArguments(Reverb.getDefaults(), arguments, [\"decay\"]);\n\n\t\tthis.decay = options.decay;\n\t\tthis.preDelay = options.preDelay;\n\n\t\tthis.connectEffect(this._convolver);\n\t}\n\n\tstatic getDefaults(): ReverbOptions {\n\t\treturn Object.assign(Effect.getDefaults(), {\n\t\t\tdecay : 1.5,\n\t\t\tpreDelay : 0.01,\n\t\t});\n\t}\n\n\t/**\n\t * Generate the Impulse Response. Returns a promise while the IR is being generated.\n\t * @return Promise which returns this object.\n\t */\n\tasync generate(): Promise<this> {\n\t\tconst buffer = await Offline((context) => {\n\t\t\t// create a noise burst which decays over the duration\n\t\t\tconst noiseL = new Noise({ context });\n\t\t\tconst noiseR = new Noise({ context });\n\t\t\tconst merge = new Merge({ context });\n\t\t\tnoiseL.connect(merge, 0, 0);\n\t\t\tnoiseR.connect(merge, 0, 1);\n\t\t\tconst gainNode = new Gain({ context }).toDestination();\n\t\t\tmerge.connect(gainNode);\n\t\t\tnoiseL.start(0);\n\t\t\tnoiseR.start(0);\n\t\t\t// predelay\n\t\t\tgainNode.gain.setValueAtTime(0, 0);\n\t\t\tgainNode.gain.setValueAtTime(1, this.preDelay);\n\t\t\t// decay\n\t\t\tgainNode.gain.exponentialApproachValueAtTime(0, this.preDelay, this.decay);\n\t\t}, this.decay + this.preDelay);\n\t\tthis._convolver.buffer = buffer.get() as AudioBuffer;\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._convolver.disconnect();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { NormalRange, PowerOfTwo } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n\ntype AnalyserType = \"fft\" | \"waveform\";\n\ninterface AnalyserOptions extends ToneAudioNodeOptions {\n\tsize: PowerOfTwo;\n\ttype: AnalyserType;\n\tsmoothing: NormalRange;\n}\n\n/**\n * Wrapper around the native Web Audio's [AnalyserNode](http://webaudio.github.io/web-audio-api/#idl-def-AnalyserNode).\n * Extracts FFT or Waveform data from the incoming signal.\n * @category Component\n */\nexport class Analyser extends ToneAudioNode<AnalyserOptions> {\n\n\treadonly name = \"Analyser\";\n\n\tinput: AnalyserNode;\n\toutput: AnalyserNode;\n\n\t/**\n\t *  The analyser node.\n\t */\n\tprivate _analyser = this.context.createAnalyser();\n\n\t/**\n\t *  The analysis type\n\t */\n\tprivate _type!: AnalyserType;\n\n\t/**\n\t *  The buffer that the FFT data is written to\n\t */\n\tprivate _buffer!: Float32Array;\n\n\t/**\n\t * @param type The return type of the analysis, either \"fft\", or \"waveform\".\n\t * @param size The size of the FFT. This must be a power of two in the range 16 to 16384.\n\t */\n\tconstructor(type?: AnalyserType, size?: number);\n\tconstructor(options?: Partial<AnalyserOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Analyser.getDefaults(), arguments, [\"type\", \"size\"]));\n\t\tconst options = optionsFromArguments(Analyser.getDefaults(), arguments, [\"type\", \"size\"]);\n\t\t// set the values initially\n\t\tthis.size = options.size;\n\t\tthis.type = options.type;\n\t\tthis.input = this.output = this._analyser;\n\t}\n\n\tstatic getDefaults(): AnalyserOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tsize: 1024,\n\t\t\tsmoothing: 0.8,\n\t\t\ttype: \"fft\" as AnalyserType,\n\t\t});\n\t}\n\n\t/**\n\t *  Run the analysis given the current settings and return the\n\t */\n\tgetValue(): Float32Array {\n\t\tif (this._type === \"fft\") {\n\t\t\tthis._analyser.getFloatFrequencyData(this._buffer);\n\t\t} else if (this._type === \"waveform\") {\n\t\t\tthis._analyser.getFloatTimeDomainData(this._buffer);\n\t\t}\n\t\treturn this._buffer;\n\t}\n\n\t/**\n\t *  The size of analysis. This must be a power of two in the range 16 to 16384.\n\t */\n\tget size(): PowerOfTwo {\n\t\treturn this._analyser.frequencyBinCount;\n\t}\n\tset size(size: PowerOfTwo) {\n\t\tthis._analyser.fftSize = size * 2;\n\t\tthis._buffer = new Float32Array(size);\n\t}\n\n\t/**\n\t *  The analysis function returned by analyser.getValue(), either \"fft\" or \"waveform\".\n\t */\n\tget type(): AnalyserType {\n\t\treturn this._type;\n\t}\n\tset type(type: AnalyserType) {\n\t\tthis.assert(type === \"waveform\" || type === \"fft\", `Analyser: invalid type: ${type}`);\n\t\tthis._type = type;\n\t}\n\n\t/**\n\t *  0 represents no time averaging with the last analysis frame.\n\t */\n\tget smoothing(): NormalRange {\n\t\treturn this._analyser.smoothingTimeConstant;\n\t}\n\n\tset smoothing(val: NormalRange) {\n\t\tthis._analyser.smoothingTimeConstant = val;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._analyser.disconnect();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { connectSeries, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Cents, Decibels, Frequency, GainFactor, Positive } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { isNumber } from \"../../core/util/TypeCheck\";\nimport { Signal } from \"../../signal/Signal\";\n\ninterface FilterOptions extends ToneAudioNodeOptions {\n\ttype: BiquadFilterType;\n\tfrequency: Frequency;\n\trolloff: number;\n\tQ: Positive;\n\tdetune: Cents;\n\tgain: GainFactor;\n}\n\n/**\n *  @class  Tone.Filter is a filter which allows for all of the same native methods\n *          as the [BiquadFilterNode](http://webaudio.github.io/web-audio-api/#the-biquadfilternode-interface).\n *          Tone.Filter has the added ability to set the filter rolloff at -12\n *          (default), -24 and -48.\n *\n *  @constructor\n *  @extends {Tone.AudioNode}\n *  @param frequency The cutoff frequency of the filter.\n *  @param type The type of filter.\n *  @param rolloff The drop in decibels per octave after the cutoff frequency\n *  @example\n *  var filter = new Filter(200, \"highpass\");\n */\nexport class Filter extends ToneAudioNode<FilterOptions> {\n\n\treadonly name = \"Filter\";\n\n\treadonly input = new Gain({ context: this.context });\n\treadonly output = new Gain({ context: this.context });\n\tprivate _filters: BiquadFilterNode[] = [];\n\n\t/**\n\t *  the rolloff value of the filter\n\t */\n\tprivate _rolloff!: number;\n\tprivate _type: BiquadFilterType;\n\n\t/**\n\t *  The Q or Quality of the filter\n\t */\n\treadonly Q: Signal<Positive>;\n\n\t/**\n\t *  The cutoff frequency of the filter.\n\t */\n\treadonly frequency: Signal<Frequency>;\n\n\t/**\n\t *  The detune parameter\n\t */\n\treadonly detune: Signal<Cents>;\n\n\t/**\n\t *  The gain of the filter, only used in certain filter types\n\t */\n\treadonly gain: Signal<Decibels>;\n\n\tconstructor(frequency?: Frequency, type?: BiquadFilterType, rolloff?: number);\n\tconstructor(options?: Partial<FilterOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Filter.getDefaults(), arguments, [\"frequency\", \"type\", \"rolloff\"]));\n\t\tconst options = optionsFromArguments(Filter.getDefaults(), arguments, [\"frequency\", \"type\", \"rolloff\"]);\n\n\t\tthis._filters = [];\n\n\t\tthis.Q = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.Q,\n\t\t});\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t});\n\t\tthis.detune = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune,\n\t\t});\n\t\tthis.gain = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"decibels\",\n\t\t\tvalue: options.gain,\n\t\t});\n\t\tthis._type = options.type;\n\t\tthis.rolloff = options.rolloff;\n\t\treadOnly(this, [\"detune\", \"frequency\", \"gain\", \"Q\"]);\n\t}\n\n\tstatic getDefaults(): FilterOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tQ: 1,\n\t\t\tdetune: 0,\n\t\t\tfrequency: 350,\n\t\t\tgain: 0,\n\t\t\trolloff: -12,\n\t\t\ttype: \"lowpass\" as BiquadFilterType,\n\t\t});\n\t}\n\n\t/**\n\t * The type of the filter. Types: \"lowpass\", \"highpass\",\n\t * \"bandpass\", \"lowshelf\", \"highshelf\", \"notch\", \"allpass\", or \"peaking\".\n\t */\n\tget type(): BiquadFilterType {\n\t\treturn this._type;\n\t}\n\tset type(type: BiquadFilterType) {\n\t\tconst types: BiquadFilterType[] = [\"lowpass\", \"highpass\", \"bandpass\",\n\t\t\t\"lowshelf\", \"highshelf\", \"notch\", \"allpass\", \"peaking\"];\n\t\tthis.assert(types.indexOf(type) !== -1, `Invalid filter type: ${type}`);\n\t\tthis._type = type;\n\t\tthis._filters.forEach(filter => filter.type = type);\n\t}\n\n\t/**\n\t * The rolloff of the filter which is the drop in db\n\t * per octave. Implemented internally by cascading filters.\n\t * Only accepts the values -12, -24, -48 and -96.\n\t */\n\tget rolloff(): number | string {\n\t\treturn this._rolloff;\n\t}\n\tset rolloff(rolloff: number | string) {\n\t\tconst rolloffNum = isNumber(rolloff) ? rolloff : parseInt(rolloff, 10);\n\t\tconst possibilities = [-12, -24, -48, -96];\n\t\tlet cascadingCount = possibilities.indexOf(rolloffNum);\n\t\t// check the rolloff is valid\n\t\tthis.assert(cascadingCount !== -1, `rolloff can only be ${possibilities.join(\", \")}`);\n\t\tcascadingCount += 1;\n\n\t\tthis._rolloff = rolloffNum;\n\t\tthis.input.disconnect();\n\t\tthis._filters.forEach(filter => filter.disconnect());\n\n\t\tthis._filters = new Array(cascadingCount);\n\t\tfor (let count = 0; count < cascadingCount; count++) {\n\t\t\tconst filter = this.context.createBiquadFilter();\n\t\t\tfilter.type = this._type;\n\t\t\tthis.frequency.connect(filter.frequency);\n\t\t\tthis.detune.connect(filter.detune);\n\t\t\tthis.Q.connect(filter.Q);\n\t\t\tthis.gain.connect(filter.gain);\n\t\t\tthis._filters[count] = filter;\n\t\t}\n\t\tthis._internalChannels = this._filters;\n\t\tconnectSeries(this.input, ...this._internalChannels, this.output);\n\t}\n\n\t/**\n\t * Get the frequency response curve. This curve represents how the filter\n\t * responses to frequencies between 20hz-20khz.\n\t * @param  len The number of values to return\n\t * @return The frequency response curve between 20-20kHz\n\t */\n\tgetFrequencyResponse(len: number = 128): Float32Array {\n\t\t// start with all 1s\n\t\tconst totalResponse = new Float32Array(len).map(() => 1);\n\t\tconst freqValues = new Float32Array(len);\n\t\tfor (let i = 0; i < len; i++) {\n\t\t\tconst norm = Math.pow(i / len, 2);\n\t\t\tconst freq = norm * (20000 - 20) + 20;\n\t\t\tfreqValues[i] = freq;\n\t\t}\n\t\tconst magValues = new Float32Array(len);\n\t\tconst phaseValues = new Float32Array(len);\n\t\tthis._filters.forEach(() => {\n\t\t\tconst filterClone = this.context.createBiquadFilter();\n\t\t\tfilterClone.type = this._type;\n\t\t\tfilterClone.Q.value = this.Q.value;\n\t\t\tfilterClone.frequency.value = this.frequency.value as number;\n\t\t\tfilterClone.gain.value = this.gain.value as number;\n\t\t\tfilterClone.getFrequencyResponse(freqValues, magValues, phaseValues);\n\t\t\tmagValues.forEach((val, i) => {\n\t\t\t\ttotalResponse[i] *= val;\n\t\t\t});\n\t\t});\n\t\treturn totalResponse;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._filters.forEach(filter => {\n\t\t\tfilter.disconnect();\n\t\t});\n\t\twritable(this, [\"detune\", \"frequency\", \"gain\", \"Q\"]);\n\t\tthis.frequency.dispose();\n\t\tthis.Q.dispose();\n\t\tthis.detune.dispose();\n\t\tthis.gain.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Frequency, Positive } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Filter } from \"../filter/Filter\";\n\ninterface MultibandSplitOptions extends ToneAudioNodeOptions {\n\tQ: Positive;\n\tlowFrequency: Frequency;\n\thighFrequency: Frequency;\n}\n\n/**\n *  Split the incoming signal into three bands (low, mid, high)\n *  with two crossover frequency controls.\n * ```\n *            +----------------------+\n *          +-> input < lowFrequency +------------------> low\n *          | +----------------------+\n *          |\n *          | +--------------------------------------+\n * input ---+-> lowFrequency < input < highFrequency +--> mid\n *          | +--------------------------------------+\n *          |\n *          | +-----------------------+\n *          +-> highFrequency < input +-----------------> high\n *            +-----------------------+\n * ```\n *\n *  @param lowFrequency the low/mid crossover frequency\n *  @param highFrequency the mid/high crossover frequency\n */\nexport class MultibandSplit extends ToneAudioNode<MultibandSplitOptions> {\n\n\treadonly name = \"MultibandSplit\";\n\n\t/**\n\t *  the input\n\t */\n\treadonly input = new Gain({ context: this.context });\n\n\t/**\n\t * no output node, use either low, mid or high outputs\n\t */\n\treadonly output = undefined;\n\n\t/**\n\t *  The low band.\n\t */\n\treadonly low = new Filter({\n\t\tcontext: this.context,\n\t\tfrequency: 0,\n\t\ttype: \"lowpass\",\n\t});\n\n\t/**\n\t *  the lower filter of the mid band\n\t */\n\tprivate _lowMidFilter = new Filter({\n\t\tcontext: this.context,\n\t\tfrequency: 0,\n\t\ttype: \"highpass\",\n\t});\n\n\t/**\n\t *  The mid band output.\n\t */\n\treadonly mid = new Filter({\n\t\tcontext: this.context,\n\t\tfrequency: 0,\n\t\ttype: \"lowpass\",\n\t});\n\n\t/**\n\t *  The high band output.\n\t */\n\treadonly high = new Filter({\n\t\tcontext: this.context,\n\t\tfrequency: 0,\n\t\ttype: \"highpass\",\n\t});\n\n\t/**\n\t *  The low/mid crossover frequency.\n\t */\n\treadonly lowFrequency: Signal<Frequency>;\n\n\t/**\n\t *  The mid/high crossover frequency.\n\t */\n\treadonly highFrequency: Signal<Frequency>;\n\n\tprotected _internalChannels = [this.low, this.mid, this.high];\n\n\t/**\n\t *  The Q or Quality of the filter\n\t */\n\treadonly Q: Signal<Positive>;\n\n\tconstructor(lowFrequency?: Frequency, highFrequency?: Frequency);\n\tconstructor(options?: Partial<MultibandSplitOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(MultibandSplit.getDefaults(), arguments, [\"lowFrequency\", \"highFrequency\"]));\n\t\tconst options = optionsFromArguments(MultibandSplit.getDefaults(), arguments, [\"lowFrequency\", \"highFrequency\"]);\n\n\t\tthis.lowFrequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.lowFrequency,\n\t\t});\n\n\t\tthis.highFrequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.highFrequency,\n\t\t});\n\n\t\tthis.Q = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.Q,\n\t\t});\n\n\t\tthis.input.fan(this.low, this.high);\n\t\tthis.input.chain(this._lowMidFilter, this.mid);\n\t\t// the frequency control signal\n\t\tthis.lowFrequency.fan(this.low.frequency, this._lowMidFilter.frequency);\n\t\tthis.highFrequency.fan(this.mid.frequency, this.high.frequency);\n\t\t// the Q value\n\t\tthis.Q.connect(this.low.Q);\n\t\tthis.Q.connect(this._lowMidFilter.Q);\n\t\tthis.Q.connect(this.mid.Q);\n\t\tthis.Q.connect(this.high.Q);\n\n\t\treadOnly(this, [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n\t}\n\n\tstatic getDefaults(): MultibandSplitOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tQ: 1,\n\t\t\thighFrequency: 2500,\n\t\t\tlowFrequency: 400,\n\t\t});\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\twritable(this, [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n\t\tthis.low.dispose();\n\t\tthis._lowMidFilter.dispose();\n\t\tthis.mid.dispose();\n\t\tthis.high.dispose();\n\t\tthis.lowFrequency.dispose();\n\t\tthis.highFrequency.dispose();\n\t\tthis.Q.dispose();\n\t\treturn this;\n\t}\n\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Cents, Decibels, Frequency, GainFactor, Positive } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { MultibandSplit } from \"../channel/MultibandSplit\";\n\ninterface EQ3Options extends ToneAudioNodeOptions {\n\tlow: Decibels;\n\tmid: Decibels;\n\thigh: Decibels;\n\tlowFrequency: Frequency;\n\thighFrequency: Frequency;\n}\n\nexport class EQ3 extends ToneAudioNode<EQ3Options> {\n\n\treadonly name = \"EQ3\";\n\n\t/**\n\t *  the input\n\t */\n\treadonly input: MultibandSplit;\n\n\t/**\n\t *  the output\n\t */\n\treadonly output = new Gain({ context: this.context });\n\n\tprivate _multibandSplit: MultibandSplit;\n\n\t/**\n\t *  The gain for the lower signals\n\t */\n\tprivate _lowGain: Gain<Decibels>;\n\n\t/**\n\t *  The gain for the mid signals\n\t */\n\tprivate _midGain: Gain<Decibels>;\n\n\t/**\n\t *  The gain for the high signals\n\t */\n\tprivate _highGain: Gain<Decibels>;\n\n\t/**\n\t * The gain in decibels of the low part\n\t */\n\treadonly low: Param<Decibels>;\n\n\t/**\n\t * The gain in decibels of the mid part\n\t */\n\treadonly mid: Param<Decibels>;\n\n\t/**\n\t * The gain in decibels of the high part\n\t */\n\treadonly high: Param<Decibels>;\n\n\t/**\n\t *  The Q value for all of the filters.\n\t */\n\treadonly Q: Signal<Positive>;\n\n\t/**\n\t *  The low/mid crossover frequency.\n\t */\n\treadonly lowFrequency: Signal<Frequency>;\n\n\t/**\n\t *  The mid/high crossover frequency.\n\t */\n\treadonly highFrequency: Signal<Frequency>;\n\n\tprotected _internalChannels: ToneAudioNode[] = [];\n\n\tconstructor(lowLevel?: Decibels, midLevel?: Decibels, highLevel?: Decibels);\n\tconstructor(options: Partial<EQ3Options>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(EQ3.getDefaults(), arguments, [\"low\", \"mid\", \"high\"]));\n\t\tconst options = optionsFromArguments(EQ3.getDefaults(), arguments, [\"low\", \"mid\", \"high\"]);\n\n\t\tthis.input = this._multibandSplit = new MultibandSplit({\n\t\t\tcontext: this.context,\n\t\t\thighFrequency: options.highFrequency,\n\t\t\tlowFrequency: options.lowFrequency,\n\t\t});\n\n\t\tthis._lowGain = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: options.low,\n\t\t\tunits: \"decibels\",\n\t\t});\n\n\t\tthis._midGain = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: options.mid,\n\t\t\tunits: \"decibels\",\n\t\t});\n\n\t\tthis._highGain = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: options.high,\n\t\t\tunits: \"decibels\",\n\t\t});\n\n\t\tthis.low = this._lowGain.gain;\n\t\tthis.mid = this._midGain.gain;\n\t\tthis.high = this._highGain.gain;\n\t\tthis.Q = this._multibandSplit.Q;\n\t\tthis.lowFrequency = this._multibandSplit.lowFrequency;\n\t\tthis.highFrequency\t= this._multibandSplit.highFrequency;\n\n\t\t// the frequency bands\n\t\tthis._multibandSplit.low.chain(this._lowGain, this.output);\n\t\tthis._multibandSplit.mid.chain(this._midGain, this.output);\n\t\tthis._multibandSplit.high.chain(this._highGain, this.output);\n\n\t\treadOnly(this, [\"low\", \"mid\", \"high\", \"lowFrequency\", \"highFrequency\"]);\n\t\tthis._internalChannels = [this._multibandSplit];\n\t}\n\n\tstatic getDefaults(): EQ3Options {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\thigh : 0,\n\t\t\thighFrequency : 2500,\n\t\t\tlow : 0,\n\t\t\tlowFrequency : 400,\n\t\t\tmid : 0,\n\t\t});\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\twritable(this, [\"low\", \"mid\", \"high\", \"lowFrequency\", \"highFrequency\"]);\n\t\tthis._multibandSplit.dispose();\n\t\tthis.lowFrequency.dispose();\n\t\tthis.highFrequency.dispose();\n\t\tthis._lowGain.dispose();\n\t\tthis._midGain.dispose();\n\t\tthis._highGain.dispose();\n\t\tthis.low.dispose();\n\t\tthis.mid.dispose();\n\t\tthis.high.dispose();\n\t\tthis.Q.dispose();\n\t\treturn this;\n\t}\n\n}\n","import { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Decibels, Positive, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\n\ninterface CompressorOptions extends ToneAudioNodeOptions {\n\tattack: Time;\n\tknee: Decibels;\n\tratio: Positive;\n\trelease: Time;\n\tthreshold: Decibels;\n}\n\n/**\n * Compressor is a thin wrapper around the Web Audio\n * [DynamicsCompressorNode](http://webaudio.github.io/web-audio-api/#the-dynamicscompressornode-interface).\n * Compression reduces the volume of loud sounds or amplifies quiet sounds\n * by narrowing or \"compressing\" an audio signal's dynamic range.\n * Read more on [Wikipedia](https://en.wikipedia.org/wiki/Dynamic_range_compression).\n *\n * @param threshold The value above which the compression starts to be applied.\n * @param ratio The gain reduction ratio.\n * @example\n * var comp = new Compressor(-30, 3);\n */\nexport class Compressor extends ToneAudioNode<CompressorOptions> {\n\n\treadonly name = \"Compressor\";\n\n\t/**\n\t *  the compressor node\n\t */\n\tprivate _compressor: DynamicsCompressorNode = this.context.createDynamicsCompressor();\n\tinput = this._compressor;\n\toutput = this._compressor;\n\n\t/**\n\t *  The decibel value above which the compression will start taking effect.\n\t */\n\treadonly threshold: Param<Decibels>;\n\n\t/**\n\t *  The amount of time (in seconds) to reduce the gain by 10dB.\n\t */\n\treadonly attack: Param<Time>;\n\n\t/**\n\t * The amount of time (in seconds) to increase the gain by 10dB.\n\t */\n\treadonly release: Param<Time>;\n\n\t/**\n\t * A decibel value representing the range above the threshold where the\n\t * curve smoothly transitions to the \"ratio\" portion.\n\t */\n\treadonly knee: Param<Decibels>;\n\n\t/**\n\t * The amount of dB change in input for a 1 dB change in output.\n\t */\n\treadonly ratio: Param<Decibels>;\n\n\tconstructor(threshold?: Decibels, ratio?: Positive);\n\tconstructor(options?: Partial<CompressorOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Compressor.getDefaults(), arguments, [\"treshold\", \"ratio\"]));\n\t\tconst options = optionsFromArguments(Compressor.getDefaults(), arguments, [\"treshold\", \"ratio\"]);\n\n\t\tthis.threshold = new Param({\n\t\t\tcontext: this.context,\n\t\t\tconvert : false,\n\t\t\tparam : this._compressor.threshold,\n\t\t\tunits : \"decibels\",\n\t\t\tvalue: options.threshold,\n\t\t});\n\n\t\tthis.attack = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._compressor.attack,\n\t\t\tunits: \"time\",\n\t\t\tvalue: options.attack,\n\t\t});\n\n\t\tthis.release = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._compressor.release,\n\t\t\tunits: \"time\",\n\t\t\tvalue: options.release,\n\t\t});\n\n\t\tthis.knee = new Param({\n\t\t\tcontext: this.context,\n\t\t\tconvert : false,\n\t\t\tparam : this._compressor.knee,\n\t\t\tunits : \"decibels\",\n\t\t\tvalue: options.knee,\n\t\t});\n\n\t\tthis.ratio = new Param({\n\t\t\tcontext: this.context,\n\t\t\tconvert : false,\n\t\t\tparam : this._compressor.ratio,\n\t\t\tunits : \"positive\",\n\t\t\tvalue: options.ratio,\n\t\t});\n\n\t\t// set the defaults\n\t\treadOnly(this, [\"knee\", \"release\", \"attack\", \"ratio\", \"threshold\"]);\n\t}\n\n\tstatic getDefaults(): CompressorOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tattack : 0.003,\n\t\t\tknee : 30,\n\t\t\tratio : 12,\n\t\t\trelease : 0.25,\n\t\t\tthreshold : -24,\n\t\t});\n\t}\n\n\t/**\n\t * A read-only decibel value for metering purposes, representing the current amount of gain\n\t * reduction that the compressor is applying to the signal. If fed no signal the value will be 0 (no gain reduction).\n\t */\n\tget reduction(): number {\n\t\treturn this._compressor.reduction;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._compressor.disconnect();\n\t\tthis.attack.dispose();\n\t\tthis.release.dispose();\n\t\tthis.threshold.dispose();\n\t\tthis.ratio.dispose();\n\t\tthis.knee.dispose();\n\t\treturn this;\n\t}\n}\n","export { getContext, setContext } from \"./core/Global\";\nexport * from \"./core/index\";\nexport * from \"./source/index\";\nexport * from \"./signal/index\";\nexport * from \"./instrument/index\";\nexport * from \"./event/index\";\nexport * from \"./effect/index\";\nexport * from \"./component/index\";\nimport { Seconds } from \"./core/type/Units\";\n\nimport { getContext } from \"./core/Global\";\nexport { start } from \"./core/Global\";\n/**\n *  The current audio context time\n */\nexport function now(): Seconds {\n\treturn getContext().now();\n}\n\n/**\n * The Transport object belonging to the global Tone.js Context\n */\n// tslint:disable-next-line: variable-name\nexport const Transport = getContext().transport;\n\n/**\n * The Destination (output) belonging to the global Tone.js Context\n */\n// tslint:disable-next-line: variable-name\nexport const Destination = getContext().destination;\n","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck;","function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nmodule.exports = _nonIterableRest;","function _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nmodule.exports = _iterableToArrayLimit;","function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nmodule.exports = _arrayWithHoles;","var arrayWithHoles = require(\"./arrayWithHoles\");\n\nvar iterableToArrayLimit = require(\"./iterableToArrayLimit\");\n\nvar nonIterableRest = require(\"./nonIterableRest\");\n\nfunction _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n}\n\nmodule.exports = _slicedToArray;"],"sourceRoot":""}