{"version":3,"sources":["webpack://Tone/webpack/universalModuleDefinition","webpack://Tone/webpack/bootstrap","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/globals.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/constants.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-option.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-audio-param-value.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/helpers/get-native-audio-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/invalid-state-error.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/helpers/get-audio-node-connections.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/helpers/get-value-for-key.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/not-supported-error.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/helpers/intercept-connections.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/guards/native-audio-node-faker.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/helpers/test-promise-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/index-size-error.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/helpers/insert-element-in-set.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-active.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/module.js","webpack://Tone/./node_modules/automation-events/build/es5/bundle.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/helpers/is-part-of-a-cycle.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/helpers/get-event-listeners-of-audio-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-passive.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/guards/audio-node-output-connection.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/helpers/is-active-audio-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/guards/audio-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/guards/native-audio-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/helpers/get-audio-param-connections.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/helpers/get-native-audio-param.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/helpers/wrap-event-listener.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-buffer-get-channel-data-method.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/helpers/connect-native-audio-node-to-native-audio-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/helpers/disconnect-native-audio-node-from-native-audio-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/helpers/copy-from-channel.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/helpers/create-nested-arrays.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/invalid-access-error.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/helpers/overwrite-accessors.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/helpers/is-valid-latency-hint.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/read-only-map.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/helpers/copy-to-channel.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/helpers/filter-buffer.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/helpers/compute-buffer-size.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/unknown-error.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/helpers/is-dc-curve.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/interfaces/index.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/types/index.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/abort-error.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/add-audio-node-connections.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/add-audio-param-connections.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/add-unrendered-audio-worklet-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/analyser-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/analyser-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/audio-buffer-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/audio-buffer-source-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/audio-buffer-source-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/audio-context-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/audio-destination-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/audio-destination-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/audio-listener-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/audio-param-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/audio-param-renderer.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/audio-worklet-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/base-audio-context-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/biquad-filter-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/biquad-filter-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/cache-test-result.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/channel-merger-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/channel-merger-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/channel-splitter-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/channel-splitter-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/connect-audio-param.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/connect-multiple-outputs.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/connected-native-audio-buffer-source-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/constant-source-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/constant-source-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/convert-number-to-unsigned-long.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/convolver-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/convolver-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/create-native-offline-audio-context.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/data-clone-error.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/decrement-cycle-counter.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/delay-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/delay-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/delete-unrendered-audio-worklet-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/disconnect-multiple-outputs.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/dynamics-compressor-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/dynamics-compressor-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/encoding-error.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/evaluate-source.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/event-target-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/expose-current-frame-and-current-time.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/fetch-source.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/gain-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/gain-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/get-audio-node-renderer.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/get-audio-param-renderer.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/get-backup-native-context.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/get-native-context.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/get-unrendered-audio-worklet-nodes.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/iir-filter-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/increment-cycle-counter-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/is-any-audio-context.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/is-any-audio-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/is-any-audio-param.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/is-any-offline-audio-context.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/is-native-audio-context.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/is-native-audio-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/is-native-audio-param.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/is-native-context.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/is-native-offline-audio-context.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/is-secure-context.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/is-supported-promise.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/media-element-audio-source-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/media-stream-audio-destination-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/media-stream-audio-source-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/media-stream-track-audio-source-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/minimal-audio-context-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/minimal-base-audio-context-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/minimal-offline-audio-context-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/monitor-connections.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/native-audio-buffer-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/native-audio-context-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/native-audio-destination-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/native-audio-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/native-audio-worklet-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/native-biquad-filter-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/native-channel-merger-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/native-constant-source-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/native-constant-source-node-faker-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/native-convolver-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/native-convolver-node-faker-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/native-delay-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/native-dynamics-compressor-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/native-gain-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/native-iir-filter-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/native-iir-filter-node-faker-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/native-media-element-audio-source-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/native-media-stream-audio-destination-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/native-media-stream-audio-source-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/native-media-stream-track-audio-source-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/native-offline-audio-context-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/native-oscillator-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/native-panner-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/native-panner-node-faker-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/native-periodic-wave-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/native-script-processor-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/native-stereo-panner-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/native-stereo-panner-node-faker-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/native-wave-shaper-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/native-wave-shaper-node-faker-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/offline-audio-context-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/oscillator-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/oscillator-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/panner-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/panner-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/periodic-wave-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/render-automation.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/render-inputs-of-audio-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/render-inputs-of-audio-param.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/render-native-offline-audio-context.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/start-rendering.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/stereo-panner-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/stereo-panner-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/test-audio-buffer-constructor-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/test-audio-buffer-copy-channel-methods-subarray-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/test-audio-buffer-source-node-start-method-consecutive-calls-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/test-audio-buffer-source-node-start-method-duration-parameter-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/test-audio-buffer-source-node-start-method-offset-clamping-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/test-audio-buffer-source-node-stop-method-nullified-buffer-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/test-audio-context-close-method-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/test-audio-context-decode-audio-data-method-type-error-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/test-audio-context-options-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/test-audio-node-connect-method-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/test-audio-scheduled-source-node-start-method-negative-parameters-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/test-audio-scheduled-source-node-stop-method-consecutive-calls-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/test-audio-scheduled-source-node-stop-method-negative-parameters-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/test-audio-worklet-processor-no-outputs-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/test-channel-merger-node-channel-count-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/test-constant-source-node-accurate-scheduling-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/test-convolver-node-buffer-reassignability-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/test-is-secure-context-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/test-media-stream-audio-source-node-media-stream-without-audio-track-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/test-offline-audio-context-current-time-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/test-stereo-panner-node-default-value-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/wave-shaper-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/wave-shaper-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/window.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/wrap-audio-buffer-copy-channel-methods.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/wrap-audio-buffer-copy-channel-methods-out-of-bounds.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/wrap-audio-buffer-source-node-stop-method-nullified-buffer.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/wrap-audio-scheduled-source-node-stop-method-consecutive-calls.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/wrap-channel-merger-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/helpers/test-transferables-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-buffer-source-node-start-method-offset-clamping.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/guards/audio-worklet-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/helpers/delete-event-listeners-of-audio-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/helpers/is-passive-audio-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/helpers/pick-element-from-set.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-passive-when-necessary.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/helpers/test-audio-node-disconnect-method-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/helpers/visit-each-audio-node-once.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-node-disconnect-method.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/audio-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/helpers/clone-audio-worklet-node-options.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/helpers/create-audio-worklet-processor-promise.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/native-audio-worklet-node-faker-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/helpers/create-audio-worklet-processor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/helpers/is-constructible.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/helpers/split-import-statements.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/add-audio-worklet-module.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/helpers/test-analyser-node-get-float-time-domain-data-method-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/native-analyser-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/helpers/wrap-analyser-node-get-float-time-domain-data-method.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/native-audio-buffer-source-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-buffer-source-node-start-method-consecutive-calls.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-buffer-source-node-start-method-duration-parameter.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/audio-worklet-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/helpers/get-audio-worklet-processor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/decode-audio-data.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/helpers/detach-array-buffer.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/guards/delay-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/detect-cycles.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/helpers/wrap-iir-filter-node-get-frequency-response-method.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/iir-filter-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/helpers/test-clonability-of-audio-worklet-node-options.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/native-audio-worklet-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/helpers/wrap-channel-splitter-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2019/factories/native-channel-splitter-node-factory.js","webpack://Tone/./node_modules/@babel/runtime/helpers/slicedToArray.js","webpack://Tone/./node_modules/@babel/runtime/helpers/arrayWithHoles.js","webpack://Tone/./node_modules/@babel/runtime/helpers/iterableToArrayLimit.js","webpack://Tone/./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js","webpack://Tone/./node_modules/@babel/runtime/helpers/arrayLikeToArray.js","webpack://Tone/./node_modules/@babel/runtime/helpers/nonIterableRest.js","webpack://Tone/./node_modules/@babel/runtime/helpers/classCallCheck.js","webpack://Tone/./node_modules/@babel/runtime/helpers/createClass.js","webpack://Tone/./Tone/version.ts","webpack://Tone/./node_modules/tslib/tslib.es6.js","webpack://Tone/./Tone/core/util/Debug.ts","webpack://Tone/./Tone/core/util/TypeCheck.ts","webpack://Tone/./Tone/core/context/AudioContext.ts","webpack://Tone/./Tone/core/clock/Ticker.ts","webpack://Tone/./Tone/core/util/AdvancedTypeCheck.ts","webpack://Tone/./Tone/core/util/Defaults.ts","webpack://Tone/./Tone/core/Tone.ts","webpack://Tone/./Tone/core/util/Math.ts","webpack://Tone/./Tone/core/util/Timeline.ts","webpack://Tone/./Tone/core/context/ContextInitialization.ts","webpack://Tone/./Tone/core/util/Emitter.ts","webpack://Tone/./Tone/core/context/BaseContext.ts","webpack://Tone/./Tone/core/context/Context.ts","webpack://Tone/./Tone/core/context/DummyContext.ts","webpack://Tone/./Tone/core/util/Interface.ts","webpack://Tone/./Tone/core/context/ToneAudioBuffer.ts","webpack://Tone/./Tone/core/context/OfflineContext.ts","webpack://Tone/./Tone/core/Global.ts","webpack://Tone/./Tone/core/type/Conversions.ts","webpack://Tone/./Tone/core/type/TimeBase.ts","webpack://Tone/./Tone/core/type/Time.ts","webpack://Tone/./Tone/core/type/Frequency.ts","webpack://Tone/./Tone/core/type/TransportTime.ts","webpack://Tone/./Tone/core/context/ToneWithContext.ts","webpack://Tone/./Tone/core/util/StateTimeline.ts","webpack://Tone/./Tone/core/context/Param.ts","webpack://Tone/./Tone/core/context/ToneAudioNode.ts","webpack://Tone/./Tone/core/context/Gain.ts","webpack://Tone/./Tone/source/OneShotSource.ts","webpack://Tone/./Tone/signal/ToneConstantSource.ts","webpack://Tone/./Tone/signal/Signal.ts","webpack://Tone/./Tone/core/clock/TickParam.ts","webpack://Tone/./Tone/core/clock/TickSignal.ts","webpack://Tone/./Tone/core/clock/TickSource.ts","webpack://Tone/./Tone/core/clock/Clock.ts","webpack://Tone/./Tone/core/util/TimelineValue.ts","webpack://Tone/./Tone/core/type/Ticks.ts","webpack://Tone/./Tone/core/util/IntervalTimeline.ts","webpack://Tone/./Tone/core/clock/TransportEvent.ts","webpack://Tone/./Tone/core/clock/TransportRepeatEvent.ts","webpack://Tone/./Tone/core/clock/Transport.ts","webpack://Tone/./Tone/core/context/Delay.ts","webpack://Tone/./Tone/component/channel/Volume.ts","webpack://Tone/./Tone/core/context/Destination.ts","webpack://Tone/./Tone/core/context/Offline.ts","webpack://Tone/./Tone/core/context/ToneAudioBuffers.ts","webpack://Tone/./Tone/core/type/Midi.ts","webpack://Tone/./Tone/core/util/Draw.ts","webpack://Tone/./Tone/source/Source.ts","webpack://Tone/./Tone/source/buffer/ToneBufferSource.ts","webpack://Tone/./Tone/source/Noise.ts","webpack://Tone/./Tone/source/UserMedia.ts","webpack://Tone/./Tone/source/oscillator/OscillatorInterface.ts","webpack://Tone/./Tone/source/oscillator/ToneOscillatorNode.ts","webpack://Tone/./Tone/source/oscillator/Oscillator.ts","webpack://Tone/./Tone/signal/SignalOperator.ts","webpack://Tone/./Tone/signal/WaveShaper.ts","webpack://Tone/./Tone/signal/AudioToGain.ts","webpack://Tone/./Tone/signal/Multiply.ts","webpack://Tone/./Tone/source/oscillator/AMOscillator.ts","webpack://Tone/./Tone/source/oscillator/FMOscillator.ts","webpack://Tone/./Tone/source/oscillator/PulseOscillator.ts","webpack://Tone/./Tone/source/oscillator/FatOscillator.ts","webpack://Tone/./Tone/source/oscillator/PWMOscillator.ts","webpack://Tone/./Tone/source/oscillator/OmniOscillator.ts","webpack://Tone/./Tone/signal/Add.ts","webpack://Tone/./Tone/signal/Scale.ts","webpack://Tone/./Tone/signal/Zero.ts","webpack://Tone/./Tone/source/oscillator/LFO.ts","webpack://Tone/./Tone/core/util/Decorator.ts","webpack://Tone/./Tone/source/buffer/Player.ts","webpack://Tone/./Tone/source/buffer/Players.ts","webpack://Tone/./Tone/source/buffer/GrainPlayer.ts","webpack://Tone/./Tone/signal/Abs.ts","webpack://Tone/./Tone/signal/GainToAudio.ts","webpack://Tone/./Tone/signal/Negate.ts","webpack://Tone/./Tone/signal/Subtract.ts","webpack://Tone/./Tone/signal/GreaterThanZero.ts","webpack://Tone/./Tone/signal/GreaterThan.ts","webpack://Tone/./Tone/signal/Pow.ts","webpack://Tone/./Tone/signal/ScaleExp.ts","webpack://Tone/./Tone/signal/SyncedSignal.ts","webpack://Tone/./Tone/component/envelope/Envelope.ts","webpack://Tone/./Tone/instrument/Instrument.ts","webpack://Tone/./Tone/instrument/Monophonic.ts","webpack://Tone/./Tone/component/envelope/AmplitudeEnvelope.ts","webpack://Tone/./Tone/instrument/Synth.ts","webpack://Tone/./Tone/instrument/ModulationSynth.ts","webpack://Tone/./Tone/instrument/AMSynth.ts","webpack://Tone/./Tone/component/filter/Filter.ts","webpack://Tone/./Tone/component/envelope/FrequencyEnvelope.ts","webpack://Tone/./Tone/instrument/MonoSynth.ts","webpack://Tone/./Tone/instrument/DuoSynth.ts","webpack://Tone/./Tone/instrument/FMSynth.ts","webpack://Tone/./Tone/instrument/MetalSynth.ts","webpack://Tone/./Tone/instrument/MembraneSynth.ts","webpack://Tone/./Tone/instrument/NoiseSynth.ts","webpack://Tone/./Tone/core/context/ToneAudioWorklet.ts","webpack://Tone/./Tone/component/filter/FeedbackCombFilter.ts","webpack://Tone/./Tone/component/filter/OnePoleFilter.ts","webpack://Tone/./Tone/component/filter/LowpassCombFilter.ts","webpack://Tone/./Tone/instrument/PluckSynth.ts","webpack://Tone/./Tone/instrument/PolySynth.ts","webpack://Tone/./Tone/instrument/Sampler.ts","webpack://Tone/./Tone/event/ToneEvent.ts","webpack://Tone/./Tone/event/Loop.ts","webpack://Tone/./Tone/event/Part.ts","webpack://Tone/./Tone/event/PatternGenerator.ts","webpack://Tone/./Tone/event/Pattern.ts","webpack://Tone/./Tone/event/Sequence.ts","webpack://Tone/./Tone/component/channel/CrossFade.ts","webpack://Tone/./Tone/effect/Effect.ts","webpack://Tone/./Tone/effect/LFOEffect.ts","webpack://Tone/./Tone/effect/AutoFilter.ts","webpack://Tone/./Tone/component/channel/Panner.ts","webpack://Tone/./Tone/effect/AutoPanner.ts","webpack://Tone/./Tone/component/analysis/Follower.ts","webpack://Tone/./Tone/effect/AutoWah.ts","webpack://Tone/./Tone/effect/BitCrusher.ts","webpack://Tone/./Tone/effect/Chebyshev.ts","webpack://Tone/./Tone/component/channel/Split.ts","webpack://Tone/./Tone/component/channel/Merge.ts","webpack://Tone/./Tone/effect/StereoEffect.ts","webpack://Tone/./Tone/effect/StereoFeedbackEffect.ts","webpack://Tone/./Tone/effect/Chorus.ts","webpack://Tone/./Tone/effect/Distortion.ts","webpack://Tone/./Tone/effect/FeedbackEffect.ts","webpack://Tone/./Tone/effect/FeedbackDelay.ts","webpack://Tone/./Tone/component/filter/PhaseShiftAllpass.ts","webpack://Tone/./Tone/effect/FrequencyShifter.ts","webpack://Tone/./Tone/effect/Freeverb.ts","webpack://Tone/./Tone/effect/JCReverb.ts","webpack://Tone/./Tone/effect/StereoXFeedbackEffect.ts","webpack://Tone/./Tone/effect/PingPongDelay.ts","webpack://Tone/./Tone/effect/PitchShift.ts","webpack://Tone/./Tone/effect/Phaser.ts","webpack://Tone/./Tone/effect/Reverb.ts","webpack://Tone/./Tone/component/channel/MidSideSplit.ts","webpack://Tone/./Tone/component/channel/MidSideMerge.ts","webpack://Tone/./Tone/effect/MidSideEffect.ts","webpack://Tone/./Tone/effect/StereoWidener.ts","webpack://Tone/./Tone/effect/Tremolo.ts","webpack://Tone/./Tone/effect/Vibrato.ts","webpack://Tone/./Tone/component/analysis/Analyser.ts","webpack://Tone/./Tone/component/analysis/MeterBase.ts","webpack://Tone/./Tone/component/analysis/Meter.ts","webpack://Tone/./Tone/component/analysis/FFT.ts","webpack://Tone/./Tone/component/analysis/DCMeter.ts","webpack://Tone/./Tone/component/analysis/Waveform.ts","webpack://Tone/./Tone/component/channel/Solo.ts","webpack://Tone/./Tone/component/channel/PanVol.ts","webpack://Tone/./Tone/component/channel/Channel.ts","webpack://Tone/./Tone/component/channel/MultibandSplit.ts","webpack://Tone/./Tone/core/context/Listener.ts","webpack://Tone/./Tone/component/channel/Panner3D.ts","webpack://Tone/./Tone/component/dynamics/Compressor.ts","webpack://Tone/./Tone/component/dynamics/Gate.ts","webpack://Tone/./Tone/component/dynamics/Limiter.ts","webpack://Tone/./Tone/component/dynamics/MidSideCompressor.ts","webpack://Tone/./Tone/component/dynamics/MultibandCompressor.ts","webpack://Tone/./Tone/component/filter/EQ3.ts","webpack://Tone/./Tone/component/filter/Convolver.ts","webpack://Tone/./Tone/index.ts"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","ACTIVE_AUDIO_NODE_STORE","WeakSet","AUDIO_NODE_CONNECTIONS_STORE","WeakMap","AUDIO_NODE_STORE","AUDIO_PARAM_CONNECTIONS_STORE","AUDIO_PARAM_STORE","BACKUP_NATIVE_CONTEXT_STORE","CONTEXT_STORE","EVENT_LISTENERS","CYCLE_COUNTERS","NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS","NODE_TO_PROCESSOR_MAPS","assignNativeAudioNodeOptions","nativeAudioNode","options","MOST_NEGATIVE_SINGLE_FLOAT","MOST_POSITIVE_SINGLE_FLOAT","isOwnedByContext","nativeContext","context","assignNativeAudioNodeOption","option","undefined","assignNativeAudioNodeAudioParamValue","audioParam","getNativeAudioNode","audioNode","createInvalidStateError","DOMException","err","code","getAudioNodeConnections","getValueForKey","map","Error","createNotSupportedError","interceptConnections","original","interceptor","connect","disconnect","isNativeAudioNodeFaker","nativeAudioNodeOrNativeAudioNodeFaker","testPromiseSupport","uint32Array","Uint32Array","promise","decodeAudioData","buffer","catch","createIndexSizeError","insertElementInSet","set","element","predicate","ignoreDuplicates","lmnt","add","setInternalStateToActive","has","forEach","eventListener","cacheTestResult","Map","window","nativeOfflineAudioContextConstructor","isNativeOfflineAudioContext","nativeAudioContextConstructor","getBackupNativeContext","createNativeAudioNode","createNativeAnalyserNode","getAudioNodeRenderer","renderInputsOfAudioNode","createAnalyserNodeRenderer","auxiliaryGainNodeStore","getNativeContext","audioParamAudioNodeStore","eventTargetConstructor","isNativeAudioContext","isNativeAudioNode","isNativeAudioParam","audioNodeConstructor","analyserNodeConstructor","audioBufferStore","nativeAudioBufferConstructor","convertNumberToUnsignedLong","wrapAudioBufferCopyChannelMethods","wrapAudioBufferCopyChannelMethodsOutOfBounds","audioBufferConstructor","testAudioScheduledSourceNodeStartMethodNegativeParametersSupport","testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport","testAudioScheduledSourceNodeStopMethodNegativeParametersSupport","wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls","renderInputsOfAudioParam","connectAudioParam","createNativeAudioBufferSourceNode","renderAutomation","createAudioBufferSourceNodeRenderer","createAudioParam","audioBufferSourceNodeConstructor","createNativeGainNode","audioDestinationNodeConstructor","createNativeBiquadFilterNode","createBiquadFilterNodeRenderer","biquadFilterNodeConstructor","monitorConnections","wrapChannelMergerNode","createNativeChannelMergerNode","createChannelMergerNodeRenderer","channelMergerNodeConstructor","createNativeChannelSplitterNode","createChannelSplitterNodeRenderer","channelSplitterNodeConstructor","createNativeConstantSourceNodeFaker","createNativeConstantSourceNode","createConstantSourceNodeRenderer","constantSourceNodeConstructor","createNativeConvolverNodeFaker","createNativeConvolverNode","createConvolverNodeRenderer","convolverNodeConstructor","createNativeDelayNode","createDelayNodeRenderer","delayNodeConstructor","createNativeDynamicsCompressorNode","createDynamicsCompressorNodeRenderer","dynamicsCompressorNodeConstructor","createGainNodeRenderer","gainNodeConstructor","createNativeScriptProcessorNode","createNativeIIRFilterNodeFaker","renderNativeOfflineAudioContext","createIIRFilterNodeRenderer","createNativeIIRFilterNode","iIRFilterNodeConstructor","createAudioListener","unrenderedAudioWorkletNodeStore","minimalBaseAudioContextConstructor","createNativeOscillatorNode","createOscillatorNodeRenderer","oscillatorNodeConstructor","createConnectedNativeAudioBufferSourceNode","createNativeWaveShaperNodeFaker","createNativeWaveShaperNode","createNativePannerNodeFaker","createNativePannerNode","createPannerNodeRenderer","pannerNodeConstructor","createNativePeriodicWave","periodicWaveConstructor","nativeStereoPannerNodeFakerFactory","createNativeStereoPannerNode","createStereoPannerNodeRenderer","stereoPannerNodeConstructor","createWaveShaperNodeRenderer","waveShaperNodeConstructor","isSecureContext","exposeCurrentFrameAndCurrentTime","addAudioWorkletModule","isNativeContext","baseAudioContextConstructor","createNativeMediaElementAudioSourceNode","mediaElementAudioSourceNodeConstructor","createNativeMediaStreamAudioDestinationNode","mediaStreamAudioDestinationNodeConstructor","createNativeMediaStreamAudioSourceNode","mediaStreamAudioSourceNodeConstructor","createNativeMediaStreamTrackAudioSourceNode","mediaStreamTrackAudioSourceNodeConstructor","audioContextConstructor","getUnrenderedAudioWorkletNodes","addUnrenderedAudioWorkletNode","connectMultipleOutputs","deleteUnrenderedAudioWorkletNode","disconnectMultipleOutputs","createNativeAudioWorkletNodeFaker","createNativeAudioWorkletNode","nativeAudioWorkletNodeConstructor","createAudioWorkletNodeRenderer","audioWorkletNodeConstructor","createNativeOfflineAudioContext","startRendering","offlineAudioContextConstructor","isAnyAudioContext","isAnyAudioNode","isAnyAudioParam","isAnyOfflineAudioContext","_slicedToArray","_classCallCheck","_createClass","createExtendedExponentialRampToValueAutomationEvent","endTime","insertTime","type","createExtendedLinearRampToValueAutomationEvent","createSetValueAutomationEvent","startTime","createSetValueCurveAutomationEvent","values","duration","getTargetValueAtTime","time","valueAtStartTime","_ref","target","timeConstant","Math","exp","isExponentialRampToValueAutomationEvent","automationEvent","isLinearRampToValueAutomationEvent","isAnyRampToValueAutomationEvent","isSetValueAutomationEvent","isSetValueCurveAutomationEvent","getValueOfAutomationEventAtIndexAtTime","automationEvents","index","defaultValue","length","getEndTimeAndValueOfPreviousAutomationEvent","currentAutomationEvent","nextAutomationEvent","isCancelAndHoldAutomationEvent","isCancelScheduledValuesAutomationEvent","getEventTime","cancelTime","getExponentialRampValueAtTime","pow","getLinearRampValueAtTime","getValueCurveValueAtTime","theoreticIndex","lowerIndex","floor","upperIndex","ceil","interpolateValue","isSetTargetAutomationEvent","AutomationEventList","_automationEvents","_currenTime","_defaultValue","iterator","eventTime","findIndex","removedAutomationEvent","slice","lastAutomationEvent","startValue","truncatedAutomationEvent","push","getValue","Float32Array","_index","previousAutomationEvent","persistentAutomationEvent","splice","remainingAutomationEvents","firstRemainingAutomationEvent","unshift","_getEndTimeAndValueOf","_getEndTimeAndValueOf2","_getEndTimeAndValueOf3","_getEndTimeAndValueOf4","_startTime","_value","createCancelAndHoldAutomationEvent","createCancelScheduledValuesAutomationEvent","createExponentialRampToValueAutomationEvent","createLinearRampToValueAutomationEvent","createSetTargetAutomationEvent","isPartOfACycle","getEventListenersOfAudioNode","setInternalStateToPassive","delete","isAudioNodeOutputConnection","outputConnection","isActiveAudioNode","isAudioNode","audioNodeOrAudioParam","nativeAudioNodeOrAudioParam","getAudioParamConnections","getNativeAudioParam","wrapEventListener","event","descriptor","defineProperties","currentTarget","handleEvent","wrapAudioBufferGetChannelDataMethod","audioBuffer","getChannelData","channel","wrapAudioScheduledSourceNodeStartMethodNegativeParameters","nativeAudioScheduledSourceNode","start","when","offset","RangeError","wrapAudioScheduledSourceNodeStopMethodNegativeParameters","stop","testAudioBufferCopyChannelMethodsOutOfBoundsSupport","nativeAudioBuffer","copyToChannel","connectNativeAudioNodeToNativeAudioNode","nativeSourceAudioNode","nativeDestinationAudioNode","output","input","fakeNativeDestinationAudioNode","inputs","disconnectNativeAudioNodeFromNativeAudioNode","copyFromChannel","parent","channelNumber","bufferOffset","byteLength","channelData","slicedInput","BYTES_PER_ELEMENT","createNestedArrays","x","y","arrays","array","j","createInvalidAccessError","overwriteAccessors","createGetter","createSetter","getPrototypeOf","getOwnPropertyDescriptor","isValidLatencyHint","latencyHint","ReadOnlyMap","parameters","_map","size","entries","callback","thisArg","keys","filterBuffer","feedback","feedbackLength","feedforward","feedforwardLength","minLength","xBuffer","yBuffer","bufferIndex","bufferLength","inputLength","k","computeBufferSize","baseLatency","sampleRate","max","min","round","log2","createUnknownError","isDCCurve","curve","createAbortError","createAddAudioNodeConnections","audioNodeConnectionsStore","audioNodeRenderer","activeInputs","numberOfInputs","Set","outputs","passiveInputs","renderer","createAddAudioParamConnections","audioParamConnectionsStore","audioParamRenderer","createAddUnrenderedAudioWorkletNode","audioWorkletNode","DEFAULT_OPTIONS","channelCount","channelCountMode","channelInterpretation","fftSize","maxDecibels","minDecibels","smoothingTimeConstant","createAnalyserNodeConstructor","audionNodeConstructor","mergedOptions","nativeAnalyserNode","super","_nativeAnalyserNode","frequencyBinCount","getByteFrequencyData","getByteTimeDomainData","getFloatFrequencyData","getFloatTimeDomainData","createAnalyserNodeRendererFactory","renderedNativeAnalyserNodes","proxy","nativeOfflineAudioContext","trace","renderedNativeAnalyserNode","Promise","resolve","async","createAnalyserNode","numberOfChannels","createAudioBufferConstructor","testNativeAudioBufferConstructorSupport","AudioBuffer","createBuffer","hasInstance","instance","loop","loopEnd","loopStart","playbackRate","createAudioBufferSourceNodeConstructor","nativeAudioBufferSourceNode","isOffline","audioBufferSourceNodeRenderer","_audioBufferSourceNodeRenderer","_isBufferNullified","_isBufferSet","_nativeAudioBufferSourceNode","_onended","_playbackRate","fill","wrappedListener","onended","nativeOnEnded","resetInternalStateToPassive","removeEventListener","setTimeout","addEventListener","createAudioBufferSourceNodeRendererFactory","renderedNativeAudioBufferSourceNodes","renderedNativeAudioBufferSourceNode","nativeAudioBufferSourceNodeIsOwnedByContext","createAudioBufferSourceNode","createAudioContextConstructor","nativeAudioContext","TypeError","_baseLatency","_nativeAudioContext","_state","state","revokeState","close","then","mediaElement","mediaStream","mediaStreamTrack","reject","resolvePromise","resume","suspend","createAudioDestinationNodeConstructor","createAudioDestinationNodeRenderer","createNativeAudioDestinationNode","nativeAudioDestinationNode","_isNodeOfNativeOfflineAudioContext","_nativeAudioDestinationNode","maxChannelCount","nativeAudioDestinationNodePromise","render","destination","createAudioDestinationNode","createAudioListenerFactory","nativeListener","listener","forwardX","forwardY","forwardZ","positionX","positionY","positionZ","upX","upY","upZ","channelMergerNode","scriptProcessorNode","createFakeAudioParam","constantSourceNode","lastOrientation","lastPosition","onaudioprocess","inputBuffer","orientation","some","setOrientation","positon","setPosition","createFakeAudioParams","createAudioParamFactory","addAudioParamConnections","audioParamStore","createAudioParamRenderer","isAudioParamOfOfflineAudioContext","nativeAudioParam","maxValue","minValue","automationEventList","setValueAtTime","currentTime","cancelAndHoldAtTime","flush","previousLastEvent","Array","from","pop","currentLastEvent","cancelScheduledValues","exponentialRampToValueAtTime","linearRampToValueAtTime","setValueCurveAtTime","setTargetAtTime","firstSample","lastSample","numberOfInterpolatedValues","interpolatedValues","timeOfLastSample","numberOfOutputs","outputChannelCount","parameterData","processorOptions","createChannelCount","createAudioWorkletNodeConstructor","sanitizedOptions","nodeNameToProcessorConstructorMap","processorConstructor","nativeAudioWorkletNode","nm","_nativeAudioWorkletNode","_onprocessorerror","_parameters","onprocessorerror","nativeOnProcessorError","port","createBaseAudioContextConstructor","_nativeContext","_audioWorklet","addModule","moduleURL","maxDelayTime","real","imag","constraints","disableNormalization","audioData","successCallback","errorCallback","Q","detune","frequency","gain","createBiquadFilterNodeConstructor","nativeBiquadFilterNode","_Q","_detune","_frequency","_gain","log10","_nativeBiquadFilterNode","frequencyHz","magResponse","phaseResponse","getFrequencyResponse","createBiquadFilterNodeRendererFactory","renderedNativeBiquadFilterNodes","renderedNativeBiquadFilterNode","nativeBiquadFilterNodeIsOwnedByContext","createBiquadFilterNode","createCacheTestResult","ongoingTests","testResults","tester","test","cachedTestResult","ongoingTest","synchronousTestResult","finalTestResult","createChannelMergerNodeConstructor","createChannelMergerNodeRendererFactory","renderedNativeAudioNodes","renderedNativeAudioNode","createAudioNode","createChannelSplitterNodeConstructor","createChannelSplitterNodeRendererFactory","createConnectAudioParam","createConnectMultipleOutputs","outputAudioNodes","outputAudioNode","createConnectedNativeAudioBufferSourceNodeFactory","createConstantSourceNodeConstructor","createConstantSourceNodeRendererFactory","nativeConstantSourceNode","constantSourceNodeRenderer","_constantSourceNodeRenderer","_nativeConstantSourceNode","_offset","renderedNativeConstantSourceNodes","renderedNativeConstantSourceNode","nativeConstantSourceNodeIsOwnedByContext","createConstantSourceNode","createConvertNumberToUnsignedLong","unit32Array","createConvolverNodeConstructor","nativeConvolverNode","_nativeConvolverNode","normalize","createConvolverNodeRendererFactory","renderedNativeConvolverNodes","renderedNativeConvolverNode","createConvolverNode","createCreateNativeOfflineAudioContext","createDataCloneError","createDecrementCycleCounter","cycleCounters","count","cycleCounter","nativeDestinationAudioParam","delayTime","createDelayNodeConstructor","nativeDelayNode","_delayTime","createDelayNodeRendererFactory","renderedNativeDelayNodes","renderedNativeDelayNode","nativeDelayNodeIsOwnedByContext","createDelayNode","createDeleteUnrenderedAudioWorkletNode","getOutputAudioNodeAtIndex","createDisconnectMultipleOutputs","destinationOrOutput","attack","knee","ratio","release","threshold","createDynamicsCompressorNodeConstructor","nativeDynamicsCompressorNode","_attack","_knee","_nativeDynamicsCompressorNode","_ratio","_release","_threshold","previousChannelCount","reduction","createDynamicsCompressorNodeRendererFactory","renderedNativeDynamicsCompressorNodes","renderedNativeDynamicsCompressorNode","nativeDynamicsCompressorNodeIsOwnedByContext","createDynamicsCompressorNode","createEncodingError","createEvaluateSource","source","SyntaxError","head","document","script","createElement","blob","Blob","url","URL","createObjectURL","originalOnErrorHandler","onerror","removeErrorEventListenerAndRevokeUrl","revokeObjectURL","message","src","lineno","colno","error","location","href","onload","appendChild","createEventTargetConstructor","_nativeEventTarget","_listeners","wrappedEventListener","dispatchEvent","createExposeCurrentFrameAndCurrentTime","fn","currentFrame","configurable","createFetchSource","response","fetch","ok","text","createGainNodeConstructor","nativeGainNode","createGainNodeRendererFactory","renderedNativeGainNodes","renderedNativeGainNode","nativeGainNodeIsOwnedByContext","createGainNode","createGetAudioNodeRenderer","audioNodeConnections","createGetAudioParamRenderer","audioParamConnections","createGetBackupNativeContext","backupNativeContext","bckpNtveCntxt","createGetNativeContext","contextStore","createGetUnrenderedAudioWorkletNodes","unrenderedAudioWorkletNodes","createIIRFilterNodeRendererFactory","filteredBufferPromise","nativeIIRFilterNode","nativeIIRFilterNodeIsOwnedByContext","createIIRFilter","ntvCntxt","partialOfflineAudioContext","renderedBuffer","filteredBuffer","filterFullBuffer","createIncrementCycleCounterFactory","createIsAnyAudioContext","anything","createIsAnyAudioNode","audioNodeStore","createIsAnyAudioParam","createIsAnyOfflineAudioContext","createIsNativeAudioContext","createIsNativeAudioNode","AudioNode","createIsNativeAudioParam","AudioParam","createIsNativeContext","createIsNativeOfflineAudioContext","createIsSecureContext","createIsSupportedPromise","testAudioBufferCopyChannelMethodsSubarraySupport","testAudioContextCloseMethodSupport","testAudioContextDecodeAudioDataMethodTypeErrorSupport","testAudioContextOptionsSupport","testAudioNodeConnectMethodSupport","testAudioWorkletProcessorNoOutputsSupport","testChannelMergerNodeChannelCountSupport","testConstantSourceNodeAccurateSchedulingSupport","testConvolverNodeBufferReassignabilitySupport","testIsSecureContextSupport","testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport","testStereoPannerNodeDefaultValueSupport","testTransferablesSupport","all","every","result","createMediaElementAudioSourceNodeConstructor","nativeMediaElementAudioSourceNode","_mediaElement","_nativeMediaElementAudioSourceNode","createMediaStreamAudioDestinationNodeConstructor","nativeMediaStreamAudioDestinationNode","_nativeMediaStreamAudioDestinationNode","stream","createMediaStreamAudioSourceNodeConstructor","nativeMediaStreamAudioSourceNode","_nativeMediaStreamAudioSourceNode","createMediaStreamTrackAudioSourceNodeConstructor","createMinimalAudioContextConstructor","createMinimalBaseAudioContextConstructor","_destination","_listener","_onstatechange","onstatechange","nativeOnStateChange","createMinimalOfflineAudioContextConstructor","delayStateChangeEvent","stopImmediatePropagation","_waitForThePromiseToSettle","_length","_nativeOfflineAudioContext","createMonitorConnections","whenConnected","whenDisconnected","connections","wasDisconnected","connection","wasConnected","apply","clear","isDisconnected","createNativeAudioBufferConstructor","createNativeAudioContextConstructor","AudioContext","webkitAudioContext","createNativeAudioDestinationNodeFactory","isNodeOfNativeOfflineAudioContext","gainNode","createNativeAudioNodeFactory","factoryFunction","createNativeAudioWorkletNodeConstructor","AudioWorkletNode","createNativeBiquadFilterNodeFactory","createBiquadFilter","createNativeChannelMergerNodeFactory","nativeChannelMergerNode","createChannelMerger","createNativeConstantSourceNodeFactory","createConstantSource","createNativeConstantSourceNodeFakerFactory","audioNodeOptions","audioBufferSourceNode","nativeConstantSourceNodeFaker","args","createNativeConvolverNodeFactory","createConvolver","createNativeConvolverNodeFakerFactory","convolverNode","nativeConvolverNodeFaker","createNativeDelayNodeFactory","createDelay","createNativeDynamicsCompressorNodeFactory","createDynamicsCompressor","createNativeGainNodeFactory","createGain","createNativeIIRFilterNodeFactory","divide","a","b","denominator","evaluatePolynomial","coefficient","z","createNativeIIRFilterNodeFakerFactory","bufferSize","bufferIndexes","xBuffers","yBuffers","outputBuffer","nyquist","nativeIIRFilterNodeFaker","omega","PI","cos","sin","sqrt","atan2","createNativeMediaElementAudioSourceNodeFactory","ntvDCntxt","createMediaElementSource","createNativeMediaStreamAudioDestinationNodeFactory","createMediaStreamDestination","createNativeMediaStreamAudioSourceNodeFactory","audioStreamTracks","getAudioTracks","filteredAudioStreamTracks","sort","id","createMediaStreamSource","MediaStream","createNativeMediaStreamTrackAudioSourceNodeFactory","createMediaStreamTrackSource","kind","createNativeOfflineAudioContextConstructor","OfflineAudioContext","webkitOfflineAudioContext","createNativeOscillatorNodeFactory","nativeOscillatorNode","createOscillator","periodicWave","setPeriodicWave","createNativePannerNodeFactory","nativePannerNode","createPanner","orientationX","createNativePannerNodeFakerFactory","coneInnerAngle","coneOuterAngle","coneOuterGain","distanceModel","maxDistance","orientationY","orientationZ","panningModel","refDistance","rolloffFactor","pannerNode","SINGLE_CHANNEL_OPTIONS","inputGainNode","orientationXGainNode","orientationYGainNode","orientationZGainNode","positionXGainNode","positionYGainNode","positionZGainNode","waveShaperNode","oversample","nativePannerNodeFaker","createNativePeriodicWaveFactory","wrappedImag","wrappedReal","createPeriodicWave","createNativeScriptProcessorNodeFactory","numberOfInputChannels","numberOfOutputChannels","createScriptProcessor","createNativeStereoPannerNodeFactory","createNativeStereoPannerNodeFaker","createStereoPanner","nativeStereoPannerNode","createNativeStereoPannerNodeFakerFactory","DC_CURVE","HALF_PI","SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS","buildInternalGraph","panGainNode","leftWaveShaperCurve","rightWaveShaperCurve","leftGainNode","leftWaveShaperNode","panWaveShaperNode","rightGainNode","rightWaveShaperNode","buildInternalGraphForMono","leftInputForLeftOutputWaveShaperCurve","leftInputForRightOutputWaveShaperCurve","rightInputForLeftOutputWaveShaperCurve","rightInputForRightOutputWaveShaperCurve","centerIndex","CURVE_SIZE","channelSplitterNode","leftInputForLeftOutputGainNode","leftInputForLeftOutputWaveShaperNode","leftInputForRightOutputGainNode","leftInputForRightOutputWaveShaperNode","rightInputForLeftOutputGainNode","rightInputForLeftOutputWaveShaperNode","rightInputForRightOutputGainNode","rightInputForRightOutputWaveShaperNode","buildInternalGraphForStereo","pan","connectGraph","disconnectGraph","isConnected","createNativeWaveShaperNodeFactory","nativeWaveShaperNode","createWaveShaper","disconnectNativeAudioBufferSourceNode","createNativeWaveShaperNodeFakerFactory","negativeWaveShaperNode","positiveWaveShaperNode","invertGainNode","outputGainNode","revertGainNode","unmodifiedCurve","nativeWaveShaperNodeFaker","curveLength","negativeCurve","positiveCurve","createOfflineAudioContextConstructor","createOscillatorNodeConstructor","oscillatorNodeRenderer","_nativeOscillatorNode","_oscillatorNodeRenderer","createOscillatorNodeRendererFactory","renderedNativeOscillatorNodes","renderedNativeOscillatorNode","nativeOscillatorNodeIsOwnedByContext","createOscillatorNode","createPannerNodeConstructor","_nativePannerNode","_orientationX","_orientationY","_orientationZ","_positionX","_positionY","_positionZ","createPannerNodeRendererFactory","renderedBufferPromise","renderedNativeGainNodeOrNativePannerNode","commonAudioNodeOptions","commonNativePannerNodeOptions","nativePannerNodeIsOwnedByContext","nativeConstantSourceNodes","channelDatas","gateGainNode","partialPannerNode","createPeriodicWaveConstructor","periodicWaveStore","PeriodicWave","createRenderAutomation","getAudioParamRenderer","replay","createRenderInputsOfAudioNode","nextTrace","filter","includes","reduce","allRenderingPromises","renderingPromises","createRenderInputsOfAudioParam","createRenderNativeOfflineAudioContext","testOfflineAudioContextCurrentTimeSupport","isOfflineAudioContextCurrentTimeSupported","oncomplete","createStartRendering","createStereoPannerNodeConstructor","_pan","createStereoPannerNodeRendererFactory","renderedNativeStereoPannerNodes","renderedNativeStereoPannerNode","nativeStereoPannerNodeIsOwnedByContext","createStereoPannerNode","createTestAudioBufferConstructorSupport","createTestAudioBufferCopyChannelMethodsSubarraySupport","createTestAudioBufferSourceNodeStartMethodConsecutiveCallsSupport","createBufferSource","createTestAudioBufferSourceNodeStartMethodDurationParameterSupport","offlineAudioContext","createTestAudioBufferSourceNodeStartMethodOffsetClampingSupport","createTestAudioBufferSourceNodeStopMethodNullifiedBufferSupport","createTestAudioContextCloseMethodSupport","audioContext","isAudioContextClosable","createTestAudioContextDecodeAudioDataMethodTypeErrorSupport","isPending","createTestAudioContextOptionsSupport","createTestAudioNodeConnectMethodSupport","isSupported","createTestAudioScheduledSourceNodeStartMethodNegativeParametersSupport","createTestAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport","createTestAudioScheduledSourceNodeStopMethodNegativeParametersSupport","createTestAudioWorkletProcessorNoOutputsSupport","isCallingProcess","audioWorklet","onmessage","createTestChannelMergerNodeChannelCountSupport","createTestConstantSourceNodeAccurateSchedulingSupport","Number","POSITIVE_INFINITY","createTestConvolverNodeBufferReassignabilitySupport","createTestIsSecureContextSupport","createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport","createTestOfflineAudioContextCurrentTimeSupport","createTestStereoPannerNodeDefaultValueSupport","stereoPanner","createWaveShaperNodeConstructor","_isCurveNullified","_nativeWaveShaperNode","createWaveShaperNodeRendererFactory","renderedNativeWaveShaperNodes","renderedNativeWaveShaperNode","createWaveShaperNode","createWindow","createWrapAudioBufferCopyChannelMethods","channelNumberAsNumber","bufferOffsetAsNumber","audioBufferLength","destinationLength","sourceLength","createWrapAudioBufferCopyChannelMethodsOutOfBounds","createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer","nullifiedBuffer","createWrapAudioScheduledSourceNodeStopMethodConsecutiveCalls","disconnectGainNode","isStopped","createWrapChannelMergerNode","monitorConnectionsFunction","arrayBuffer","ArrayBuffer","port1","port2","MessageChannel","data","postMessage","wrapAudioBufferSourceNodeStartMethodOffsetClamping","clampedOffset","isAudioWorkletNode","deleteEventListenerOfAudioNode","isPassiveAudioNode","pickElementFromSet","matchingElements","matchingElement","setInternalStateToPassiveWhenNecessary","testAudioNodeDisconnectMethodSupport","analyzer","dummy","ones","chnnlDt","sample","visitEachAudioNodeOnce","cycles","visitor","counts","cycle","addActiveInputConnectionToAudioNode","activeInputConnection","addActiveInputConnectionToAudioParam","addPassiveInputConnectionToAudioNode","passiveInputConnections","passiveInputConnection","addPassiveInputConnectionToAudioParam","deletePassiveInputConnectionToAudioNode","matchingConnection","deletePassiveInputConnectionToAudioParam","addConnectionToAudioNodeOfAudioContext","eventListeners","isActive","partialConnection","deleteActiveInputConnectionToAudioNode","addConnectionToAudioParamOfAudioContext","deleteActiveInputConnectionToAudioParam","deleteActiveInputConnection","activeInputConnections","deleteInputsOfAudioNode","deleteInputConnectionOfAudioNode","deleteInputsOfAudioParam","deleteInputConnectionOfAudioParam","createAudioNodeConstructor","addAudioNodeConnections","createIncrementCycleCounter","decrementCycleCounter","detectCycles","_context","_nativeAudioNode","returnValue","connectionsToDestination","filteredConnections","wrapAudioNodeDisconnectMethod","auxiliaryGainNodes","addConnectionToAudioNodeOfOfflineAudioContext","addConnectionToAudioParamOfOfflineAudioContext","destinations","audioNodeConnectionsOfSource","deleteAnyConnection","deleteConnectionAtOutput","deleteConnectionToDestination","createAudioWorkletProcessorPromise","audioWorkletNodeOptions","onmessageerror","cloneAudioWorkletNodeOptions","createNativeAudioWorkletNodeFakerFactory","sum","numberOfParameters","parameterDescriptors","messageChannel","gainNodes","inputChannelSplitterNodes","constantSourceNodes","inputChannelMergerNode","outputChannelSplitterNode","outputChannelMergerNodes","parameterMap","nativeAudioWorkletNodeFaker","_","patchedEventListeners","unpatchedEventListener","patchedEventListener","audioWorkletProcessor","nodeToProcessorMap","audioWorkletProcessorPromise","createAudioWorkletProcessor","dWrkltPrcssr","prmtrs","disconnectOutputsGraph","outputChannelSplitterNodeOutput","outputChannelMergerNode","potentiallyEmptyInputs","activeSourceFlag","process","ErrorEvent","disconnectFakeGraph","connectFakeGraph","handler","construct","IMPORT_STATEMENT_REGEX","splitImportStatements","importStatements","sourceWithoutImportStatements","replace","match","unresolvedUrl","importStatementWithResolvedUrl","toString","join","verifyParameterDescriptors","isArray","verifyProcessorCtor","processorCtor","constructible","Proxy","isConstructible","createAddAudioWorkletModule","evaluateSource","fetchSource","ongoingRequests","resolvedRequests","credentials","absoluteUrl","resolvedRequestsOfContext","ongoingRequestsOfContext","promiseOfOngoingRequest","evaluateAudioWorkletGlobalScope","_AWGS","trim","rslvdRqstsFCntxt","ngngRqstsFCntxt","testAnalyserNodeGetFloatTimeDomainDataMethodSupport","createNativeAnalyserNodeFactory","createAnalyser","byteTimeDomainData","Uint8Array","wrapAnalyserNodeGetFloatTimeDomainDataMethod","createNativeAudioBufferSourceNodeFactory","testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport","testAudioBufferSourceNodeStartMethodDurationParameterSupport","testAudioBufferSourceNodeStartMethodOffsetClampingSupport","testAudioBufferSourceNodeStopMethodNullifiedBufferSupport","wrapAudioBufferSourceNodeStartMethodOffsetClampling","wrapAudioBufferSourceNodeStopMethodNullifiedBuffer","isScheduled","wrapAudioBufferSourceNodeStartMethodConsecutiveCalls","stopTime","actualStartTime","durationInBufferTime","wrapAudioBufferSourceNodeStartMethodDurationParameter","processBuffer","processedBuffer","getAudioWorkletProcessor","createAudioWorkletNodeRendererFactory","processedBufferPromise","renderedNativeAudioWorkletNodeOrGainNode","nativeOutputNodes","nativeAudioWorkletNodeIsOwnedByContext","renderBuffer","createDecodeAudioData","detachedArrayBuffers","anyContext","complete","detachArrayBuffer","fail","createDetectCycles","chain","nextLink","isDelayNode","mergedCycles","nestedCycles","concat","createIIRFilterNodeConstructor","wrapIIRFilterNodeGetFrequencyResponseMethod","_nativeIIRFilterNode","createNativeAudioWorkletNodeFactory","testClonabilityOfAudioWorkletNodeOptions","createNativeChannelSplitterNodeFactory","nativeChannelSplitterNode","createChannelSplitter","wrapChannelSplitterNode","arrayWithHoles","iterableToArrayLimit","unsupportedIterableToArray","nonIterableRest","arr","_arr","_n","_d","_e","_s","_i","next","done","arrayLikeToArray","minLen","constructor","len","arr2","Constructor","_defineProperties","props","writable","protoProps","staticProps","version","extendStatics","setPrototypeOf","__proto__","__extends","__","__decorate","decorators","desc","arguments","Reflect","decorate","__awaiter","_arguments","P","generator","fulfilled","step","e","rejected","__generator","body","f","g","label","sent","trys","ops","verb","v","op","__values","__read","ar","__spread","assert","statement","assertRange","gte","lte","assertContextRunning","warn","defaultLogger","console","setLogger","logger","log","isUndef","arg","isDefined","isFunction","isNumber","isObject","isBoolean","isString","isNote","createAudioContext","createOfflineAudioContext","channels","theWindow","hasAudioContext","updateInterval","_callback","_type","_updateInterval","_createClock","_createWorker","toFixed","blobUrl","worker","Worker","_worker","_createTimeout","_timeout","_disposeClock","clearTimeout","terminate","interval","dispose","isAudioParam","isOfflineAudioContext","isAudioContext","isAudioBuffer","noCopy","deepMerge","sources","shift","assign","optionsFromArguments","defaults","argsArray","objKey","opts","indexOf","defaultArg","given","fallback","omitFromObject","obj","omit","prop","debug","_wasDisposed","getDefaults","TONE_DEBUG_CLASS","GT","GTE","EQ","LT","abs","clamp","_timeline","Timeline","memory","increasing","Infinity","valueOf","lastValue","_search","diff","remove","param","peek","getAfter","getBefore","cancel","after","cancelBefore","previousEvent","beginning","end","midPoint","nextEvent","_iterate","lowerBound","upperBound","forEachBefore","forEachAfter","forEachBetween","forEachFrom","forEachAtTime","notifyNewContext","onContextInit","cb","notifyCloseContext","onContextClose","on","split","eventName","_events","once","boundCallback","off","eventList","emit","mixin","constr","Emitter","_constants","_timeouts","_timeoutIds","_initialized","_workletModules","Context","_latencyHint","lookAhead","_ticker","Ticker","clockSource","_timeoutLoop","initialize","ctx","feedForward","_transport","_draw","createAudioWorkletNode","rawContext","workletsAreReady","promises","hint","lookAheadValue","now","immediate","getConstant","val","constant","firstEvent","timeout","clearInterval","setInterval","intervalFn","_numberOfChannels","_sampleRate","_numberOfInputs","_numberOfOutputs","_maxDelayTime","_feedForward","_feedback","_real","_imag","_constraints","_stream","_audioData","_name","_options","_url","_fn","_id","_interval","_val","readOnly","str","noOp","ToneAudioBuffer","reverse","load","_buffer","getContext","loaded","_reversed","_reverse","doneLoading","downloads","fromArray","isMultidimensional","multiChannelArray","toMono","chanNum","toArray","outputArray","channelArray","ret","startSamples","endSamples","retBuffer","subarray","rev","fromUrl","matches","extensions","extension","ext","supportsType","baseUrl","endsWith","canPlayType","_currentTime","_duration","_renderClock","asynchronous","yieldEvery","dummyContext","globalContext","setContext","TONE_SILENCE_LOGGING","prefix","printString","dbToGain","db","gainToDb","LN10","intervalToFrequencyRatio","A4","ftom","ftomf","mtof","midi","_getExpressions","method","capture","_now","regexp","quantize","quantTo","TimeClass","_secondsToUnits","transport","nextSubdivision","subdiv","percent","subdivision","toNotation","toSeconds","testNotations","power","closest","closestSeconds","notation","notationSeconds","toBarsBeatsSixteenths","quarterTime","_beatsToUnits","quarters","parseFloat","measures","_getTimeSignature","sixteenths","sixteenthString","toTicks","_getPPQ","toMidi","toFrequency","units","defaultUnits","_units","_expressions","hz","_frequencyToUnits","_ticksToUnits","parseInt","dot","numericValue","scalar","number","samples","tr","q","total","TimeBaseClass","fromType","_noArg","typeName","quantity","expr","matching","freq","beats","_getBpm","seconds","ticks","bpm","timeSignature","PPQ","toSamples","toMilliseconds","Time","setA4","FrequencyClass","note","pitch","octave","noteNumber","noteToScaleIndex","toLowerCase","transpose","harmonize","intervals","toNote","scaleIndexToNote","cbb","cx","dbb","dx","ebb","eb","ex","fbb","fb","fx","gbb","gb","gx","abb","ab","ax","bbb","bb","bx","Frequency","TransportTime","ToneWithContext","defaultContext","_getPartialProperties","attribute","member","initial","_initial","setStateAtTime","getValueAtTime","getLastState","getNextState","Param","overridden","_minOutput","_param","_swappable","swappable","_initialValue","convert","_minValue","_maxValue","_toType","_is","_assertRange","_fromType","computedTime","isFinite","JSON","stringify","before","beforeValue","previous","_linearInterpolate","_exponentialInterpolate","previousVal","_exponentialApproach","setRampPoint","currentVal","exponentialRampTo","rampTime","linearRampTo","targetRampTo","exponentialApproachValueAtTime","scaling","startingValue","segTime","valueAtTime","sampleTime","rampTo","subdivisions","setParam","t0","v0","v1","t1","_internalChannels","_isAudioNode","node","ToneAudioNode","_getInternalNodes","nodeList","_setChannelProperties","_getChannelProperties","outputNum","inputNum","toDestination","toMaster","connectSeries","nodes","fan","first","prev","current","srcNode","dstNode","outputNumber","inputNumber","Gain","_gainNode","_stopTime","getStateAtTime","_fadeIn","fadeIn","_fadeOut","fadeOut","_curve","_startGain","fadeInTime","_stopGain","cancelStop","fadeOutTime","additionalTail","_stopSource","ToneConstantSource","_source","Signal","override","_constantSource","connectSignal","signal","TickParam","_multiplier","multiplier","computedValue","prevEvent","segments","rampVal","ticksUntilTime","_getTicksUntilEvent","computedVal","segmentDur","val0","val1","onTheLineEvent","getTicksAtTime","getDurationOfTicks","currentTick","getTimeOfTick","tick","delta","sol1","ticksToTime","timeToTicks","computedDuration","startTicks","TickSignal","TickSource","_tickOffset","setTicksAtTime","pause","stopEvent","tmpEvent","lastState","elapsedTicks","periodStartTime","offsetEvent","getSecondsAtTime","elapsedSeconds","absoluteTicks","forEachTickBetween","lastStateEvent","maxStartTime","nextTickTime","Clock","_lastUpdate","_boundLoop","_loop","_tickSource","initialValue","Ticks","_root","IntervalNode","insert","updateHeight","updateMax","_rebalance","results","search","_removeNode","_setRoot","_replaceNodeInParent","replacement","isLeftChild","left","right","temp","getBalance","_rotateLeft","pivotNode","_rotateRight","balance","low","traverse","searchAfter","high","_left","_right","height","point","TransportEvent","_eventId","_once","invoke","_currentId","_nextId","_nextTick","_boundRestart","_restart","TransportRepeatEvent","_createEvents","scheduleOnce","Transport","_loopStart","_loopEnd","_scheduledEvents","_repeatedEvents","_syncedSignals","_swingAmount","_ppq","ppq","_clock","_processTick","_bindClockEvents","_timeSignature","_swingTicks","swing","swingSubdivision","tickTime","progress","amount","schedule","_addEvent","scheduleRepeat","eventId","item","timeline","computedAfter","offsetTicks","toggle","timeSig","startPosition","endPosition","setLoopPoints","remainingTicks","syncSignal","computedFreq","ratioSignal","unsyncSignal","syncedSignal","Delay","maxDelayInSeconds","maxDelay","_maxDelay","_delayNode","Volume","volume","_unmutedVolume","mute","Destination","Offline","originalContext","bufferPromise","_buffers","_loadingCount","ToneAudioBuffers","urls","_bufferLoaded","MidiClass","Midi","expiration","anticipation","_boundDrawLoop","_drawLoop","_animationFrame","requestAnimationFrame","cancelAnimationFrame","draw","_synced","_scheduled","_syncedStart","_syncedStop","_volume","onstop","_clampToCurrentTime","restart","sched","_start","_stop","sync","stateEvent","startOffset","unsync","ToneBufferSource","_sourceStarted","_sourceStopped","computedOffset","loopDuration","computedDur","Noise","_noiseBuffers","rate","random","_noiseCache","brown","pink","white","channelNum","lastOut","b0","b1","b2","b3","b4","b5","b6","UserMedia","open","labelOrId","supported","enumerateDevices","devices","_device","find","device","deviceId","audio","echoCancellation","noiseSuppression","mozNoiseSuppression","navigator","mediaDevices","getUserMedia","mediaStreamNode","_mediaStream","track","active","groupId","generateWaveform","ToneOscillatorNode","_oscillator","Oscillator","_partials","partials","_partialCount","partialCount","baseType","phase","oscillator","_wave","syncFrequency","unsyncFrequency","_getCachedPeriodicWave","oscProps","_periodicWaveCache","description","_phase","arrayA","arrayB","isBasicType","cache","wave","partial","exec","_getRealImaginary","periodicWaveSize","piFactor","_inverseFFT","getInitialValue","twoPi","asArray","SignalOperator","WaveShaper","_shaper","mapping","setMap","normalized","oversampling","_norm","Multiply","_mult","factor","AMOscillator","_modulationScale","_modulationNode","_carrier","_modulator","modulationType","harmonicity","FMOscillator","modulationIndex","PulseOscillator","_widthGate","_thresh","width","_triangle","FatOscillator","_oscillators","_spread","spread","_forEach","osc","PWMOscillator","sourceType","_scale","_pulse","modulationFrequency","carrierType","OmniOscillatorSourceMap","am","fat","fm","pulse","pwm","OmniOscillator","_sourceType","substr","_createNewOscillator","_getOscType","oscType","OscConstructor","blockTime","sType","mType","Add","_sum","addend","Scale","_add","_min","_max","_setRange","Zero","LFO","_stoppedValue","_clampValue","_amplitudeGain","amplitude","_stoppedSignal","_zeros","_a2g","_scaler","currentMin","currentMax","range","valueMap","propertyKey","newValue","timeRange","Player","_activeSources","_onload","autostart","_onSourceEnd","origDuration","implicitEnd","seek","Players","_players","player","stopAll","GrainPlayer","_tick","grainSize","_grainSize","_overlap","overlap","_onstop","_abs","_multiply","Subtract","_neg","subtrahend","GreaterThanZero","GreaterThan","_subtract","_gtz","comparator","Pow","_exponentScaler","_expFunc","_exponent","exponent","ScaleExp","_exp","_lastVal","_onTick","_syncedCallback","_anchorValue","Envelope","_sig","decay","sustain","attackCurve","releaseCurve","decayCurve","_getCurve","direction","curveName","EnvelopeCurves","_setCurve","curveDef","_attackCurve","_releaseCurve","_decayCurve","triggerAttack","velocity","currentValue","decayValue","decayStart","triggerRelease","triggerAttackRelease","attackPortion","envelopeDuration","totalDuration","sustainTime","clone","cosineCurve","rippleCurve","curveLen","sineWave","stairsCurve","sineCurve","bounceCurve","invertCurve","out","bounce","In","Out","cosine","exponential","linear","ripple","sine","Instrument","_original_triggerAttack","_original_triggerRelease","_syncMethod","timePosition","originalMethod","Monophonic","portamento","onsilence","_triggerEnvelopeAttack","setNote","_triggerEnvelopeRelease","computedFrequency","getLevelAtTime","portTime","AmplitudeEnvelope","Synth","envelope","computedAttack","computedDecay","ModulationSynth","modulation","modulationEnvelope","AMSynth","Filter","_filters","rolloff","_rolloff","rolloffNum","possibilities","cascadingCount","totalResponse","freqValues","magValues","phaseValues","filterClone","FrequencyEnvelope","_octaves","octaves","_baseFrequency","baseFrequency","MonoSynth","filterEnvelope","DuoSynth","voice0","voice1","_vibrato","vibratoRate","_vibratoGain","vibratoAmount","FMSynth","inharmRatios","MetalSynth","_freqMultipliers","_amplitude","_highpass","mult","_filterFreqScaler","resonance","freqMult","MembraneSynth","pitchDecay","hertz","maxNote","NoiseSynth","noise","workletOptions","_audioWorkletName","disposed","_worklet","onReady","FeedbackCombFilter","dummyGain","OnePoleFilter","_createFilter","oldFilter","_filter","a0","fq","LowpassCombFilter","_combFilter","_lowpass","dampening","PluckSynth","_noise","attackNoise","_lfcf","delayAmount","PolySynth","_availableVoices","_activeVoices","_voices","_gcTimeout","_averageActiveVoices","voice","maxPolyphony","_dummyVoice","_getNextAvailableVoice","_collectGarbage","_makeVoiceAvailable","activeVoiceIndex","activeVoices","firstAvail","_triggerAttack","notes","midiNote","released","_triggerRelease","_scheduleEvent","durationSeconds","releaseAll","Sampler","urlMap","mid","_findClosest","difference","closestNote","ToneEvent","_startOffset","_probability","probability","_humanize","humanize","_rescheduleEvents","startTick","_getLoopDuration","prob","variation","reschedulTime","lastEvent","Loop","_event","iterations","iters","Part","events","_startNote","at","timeInTicks","_restartEvent","_setAll","attr","_testLoopBoundries","upPatternGen","clampToArraySize","downPatternGen","infiniteGen","gen","alternatingGenerator","directionUp","jumpUp","stepIndex","jumpDown","randomGen","randomIndex","randomOnce","copy","randVal","randomWalk","PatternGenerator","pattern","Pattern","_values","_pattern","Sequence","_part","_seqCallback","_eventsArray","_subdivision","_createSequence","_eventsUpdated","_indexTime","_rescheduleSequence","sequence","eventOffset","CrossFade","_panner","_split","_g2a","fade","_dryWet","wet","effectSend","effectReturn","connectEffect","effect","_lfo","depth","AutoFilter","oct","Panner","AutoPanner","Follower","smoothing","_smoothing","AutoWah","_follower","follower","_sweepRange","_inputBoost","_bandpass","_peaking","_setSweepRange","sensitivity","baseFreq","BitCrusher","_bitCrusherWorklet","bits","frequencyReduction","BitCrusherWorklet","Chebyshev","_order","order","_getCoefficient","degree","memo","Split","_splitter","Merge","_merger","_merge","connectEffectLeft","connectEffectRight","_feedbackL","_feedbackR","_feedbackSplit","_feedbackMerge","Chorus","_depth","_lfoL","_lfoR","_delayNodeL","_delayNodeR","deviation","Distortion","_distortion","distortion","deg","_feedbackGain","FeedbackDelay","offset90","_bank0","_createAllPassFilterBank","_bank1","_oneSampleDelay","bankValues","coefficients","FrequencyShifter","_sine","_cosine","_sineMultiply","_cosineMultiply","_negate","_phaseShifter","combFilterTunings","allpassFilterFrequencies","Freeverb","_combFilters","_allpassFiltersL","_allpassFiltersR","roomSize","allpassL","allpassR","lfpf","al","cf","combFilterDelayTimes","combFilterResonances","allpassFilterFreqs","JCReverb","_allpassFilters","_feedbackCombFilters","_scaleRoomSize","allpass","fbcf","apf","PingPongDelay","_leftDelay","_rightDelay","_rightPreDelay","PitchShift","_delayA","_lfoA","_delayB","_lfoB","_crossFade","_crossFadeLFO","_feedbackDelay","_pitch","_windowSize","windowSize","Phaser","_filtersL","_makeFilters","stages","_filtersR","connectToFreq","filters","Reverb","_convolver","ready","_decay","_preDelay","preDelay","generate","previousReady","noiseL","noiseR","merge","renderPromise","MidSideSplit","_midAdd","SQRT1_2","_sideSubtract","side","MidSideMerge","_leftMult","_rightMult","_midSideMerge","_midSideSplit","_midSend","_sideSend","_midReturn","_sideReturn","connectEffectMid","connectEffectSide","StereoWidener","_twoTimesWidthMid","_twoTimesWidthSide","_midMult","_oneMinusWidth","_sideMult","Tremolo","_amplitudeL","_amplitudeR","Vibrato","Analyser","_analysers","analyser","MeterBase","_analyser","Meter","_rms","normalRange","getLevel","aValues","vals","totalSquared","rms","FFT","DCMeter","Waveform","Solo","_allSolos","solo","_isSoloed","_addSolo","_removeSolo","_updateSolo","_soloed","_noSolos","PanVol","Channel","_solo","_panVol","muted","_getBus","buses","send","bus","sendKnob","receive","MultibandSplit","_lowMidFilter","lowFrequency","highFrequency","Panner3D","Compressor","_compressor","Gate","_gt","_gate","thresh","smoothingTime","Limiter","MidSideCompressor","MultibandCompressor","EQ3","_multibandSplit","_lowGain","_midGain","_highGain","Convolver","buff","norm","Buffer","Buffers","BufferSource"],"mappings":"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","file":"Tone.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Tone\"] = factory();\n\telse\n\t\troot[\"Tone\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 681);\n","export const ACTIVE_AUDIO_NODE_STORE = new WeakSet();\nexport const AUDIO_NODE_CONNECTIONS_STORE = new WeakMap();\nexport const AUDIO_NODE_STORE = new WeakMap();\nexport const AUDIO_PARAM_CONNECTIONS_STORE = new WeakMap();\nexport const AUDIO_PARAM_STORE = new WeakMap();\nexport const BACKUP_NATIVE_CONTEXT_STORE = new WeakMap();\nexport const CONTEXT_STORE = new WeakMap();\nexport const EVENT_LISTENERS = new WeakMap();\nexport const CYCLE_COUNTERS = new WeakMap();\n// This clunky name is borrowed from the spec. :-)\nexport const NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS = new WeakMap();\nexport const NODE_TO_PROCESSOR_MAPS = new WeakMap();\n//# sourceMappingURL=/build/es2019/globals.js.map","import { assignNativeAudioNodeOption } from './assign-native-audio-node-option';\nexport const assignNativeAudioNodeOptions = (nativeAudioNode, options) => {\n    assignNativeAudioNodeOption(nativeAudioNode, options, 'channelCount');\n    assignNativeAudioNodeOption(nativeAudioNode, options, 'channelCountMode');\n    assignNativeAudioNodeOption(nativeAudioNode, options, 'channelInterpretation');\n};\n//# sourceMappingURL=/build/es2019/helpers/assign-native-audio-node-options.js.map","export const MOST_NEGATIVE_SINGLE_FLOAT = -3.4028234663852886e38;\nexport const MOST_POSITIVE_SINGLE_FLOAT = -MOST_NEGATIVE_SINGLE_FLOAT;\n//# sourceMappingURL=/build/es2019/constants.js.map","export const isOwnedByContext = (nativeAudioNode, nativeContext) => {\n    return nativeAudioNode.context === nativeContext;\n};\n//# sourceMappingURL=/build/es2019/helpers/is-owned-by-context.js.map","export const assignNativeAudioNodeOption = (nativeAudioNode, options, option) => {\n    const value = options[option];\n    if (value !== undefined && value !== nativeAudioNode[option]) {\n        nativeAudioNode[option] = value;\n    }\n};\n//# sourceMappingURL=/build/es2019/helpers/assign-native-audio-node-option.js.map","export const assignNativeAudioNodeAudioParamValue = (nativeAudioNode, options, audioParam) => {\n    const value = options[audioParam];\n    if (value !== undefined && value !== nativeAudioNode[audioParam].value) {\n        nativeAudioNode[audioParam].value = value;\n    }\n};\n//# sourceMappingURL=/build/es2019/helpers/assign-native-audio-node-audio-param-value.js.map","import { AUDIO_NODE_STORE } from '../globals';\nimport { getValueForKey } from './get-value-for-key';\nexport const getNativeAudioNode = (audioNode) => {\n    return getValueForKey(AUDIO_NODE_STORE, audioNode);\n};\n//# sourceMappingURL=/build/es2019/helpers/get-native-audio-node.js.map","export const createInvalidStateError = () => {\n    try {\n        return new DOMException('', 'InvalidStateError');\n    }\n    catch (err) {\n        // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.\n        err.code = 11;\n        err.name = 'InvalidStateError';\n        return err;\n    }\n};\n//# sourceMappingURL=/build/es2019/factories/invalid-state-error.js.map","import { AUDIO_NODE_CONNECTIONS_STORE } from '../globals';\nimport { getValueForKey } from './get-value-for-key';\nexport const getAudioNodeConnections = (audioNode) => {\n    return getValueForKey(AUDIO_NODE_CONNECTIONS_STORE, audioNode);\n};\n//# sourceMappingURL=/build/es2019/helpers/get-audio-node-connections.js.map","export const getValueForKey = (map, key) => {\n    const value = map.get(key);\n    if (value === undefined) {\n        throw new Error('A value with the given key could not be found.');\n    }\n    return value;\n};\n//# sourceMappingURL=/build/es2019/helpers/get-value-for-key.js.map","export const createNotSupportedError = () => {\n    try {\n        return new DOMException('', 'NotSupportedError');\n    }\n    catch (err) {\n        // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.\n        err.code = 9;\n        err.name = 'NotSupportedError';\n        return err;\n    }\n};\n//# sourceMappingURL=/build/es2019/factories/not-supported-error.js.map","export const interceptConnections = (original, interceptor) => {\n    original.connect = interceptor.connect.bind(interceptor);\n    original.disconnect = interceptor.disconnect.bind(interceptor);\n    return original;\n};\n//# sourceMappingURL=/build/es2019/helpers/intercept-connections.js.map","export const isNativeAudioNodeFaker = (nativeAudioNodeOrNativeAudioNodeFaker) => {\n    return 'inputs' in nativeAudioNodeOrNativeAudioNodeFaker;\n};\n//# sourceMappingURL=/build/es2019/guards/native-audio-node-faker.js.map","export const testPromiseSupport = (nativeContext) => {\n    // This 12 numbers represent the 48 bytes of an empty WAVE file with a single sample.\n    const uint32Array = new Uint32Array([\n        1179011410,\n        40,\n        1163280727,\n        544501094,\n        16,\n        131073,\n        44100,\n        176400,\n        1048580,\n        1635017060,\n        4,\n        0\n    ]);\n    try {\n        // Bug #1: Safari requires a successCallback.\n        const promise = nativeContext.decodeAudioData(uint32Array.buffer, () => {\n            // Ignore the success callback.\n        });\n        if (promise === undefined) {\n            return false;\n        }\n        promise.catch(() => {\n            // Ignore rejected errors.\n        });\n        return true;\n    }\n    catch {\n        // Ignore errors.\n    }\n    return false;\n};\n//# sourceMappingURL=/build/es2019/helpers/test-promise-support.js.map","export const createIndexSizeError = () => {\n    try {\n        return new DOMException('', 'IndexSizeError');\n    }\n    catch (err) {\n        // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.\n        err.code = 1;\n        err.name = 'IndexSizeError';\n        return err;\n    }\n};\n//# sourceMappingURL=/build/es2019/factories/index-size-error.js.map","export const insertElementInSet = (set, element, predicate, ignoreDuplicates) => {\n    for (const lmnt of set) {\n        if (predicate(lmnt)) {\n            if (ignoreDuplicates) {\n                return false;\n            }\n            throw Error('The set contains at least one similar element.');\n        }\n    }\n    set.add(element);\n    return true;\n};\n//# sourceMappingURL=/build/es2019/helpers/insert-element-in-set.js.map","import { ACTIVE_AUDIO_NODE_STORE } from '../globals';\nimport { getEventListenersOfAudioNode } from './get-event-listeners-of-audio-node';\nexport const setInternalStateToActive = (audioNode) => {\n    if (ACTIVE_AUDIO_NODE_STORE.has(audioNode)) {\n        throw new Error('The AudioNode is already stored.');\n    }\n    ACTIVE_AUDIO_NODE_STORE.add(audioNode);\n    getEventListenersOfAudioNode(audioNode)\n        .forEach((eventListener) => eventListener(true));\n};\n//# sourceMappingURL=/build/es2019/helpers/set-internal-state-to-active.js.map","import { createCancelAndHoldAutomationEvent, createCancelScheduledValuesAutomationEvent, createExponentialRampToValueAutomationEvent, createLinearRampToValueAutomationEvent, createSetTargetAutomationEvent, createSetValueAutomationEvent, createSetValueCurveAutomationEvent } from 'automation-events';\nimport { createAbortError } from './factories/abort-error';\nimport { createAddAudioNodeConnections } from './factories/add-audio-node-connections';\nimport { createAddAudioParamConnections } from './factories/add-audio-param-connections';\nimport { createAddAudioWorkletModule } from './factories/add-audio-worklet-module';\nimport { createAddUnrenderedAudioWorkletNode } from './factories/add-unrendered-audio-worklet-node';\nimport { createAnalyserNodeConstructor } from './factories/analyser-node-constructor';\nimport { createAnalyserNodeRendererFactory } from './factories/analyser-node-renderer-factory';\nimport { createAudioBufferConstructor } from './factories/audio-buffer-constructor';\nimport { createAudioBufferSourceNodeConstructor } from './factories/audio-buffer-source-node-constructor';\nimport { createAudioBufferSourceNodeRendererFactory } from './factories/audio-buffer-source-node-renderer-factory';\nimport { createAudioContextConstructor } from './factories/audio-context-constructor';\nimport { createAudioDestinationNodeConstructor } from './factories/audio-destination-node-constructor';\nimport { createAudioDestinationNodeRenderer } from './factories/audio-destination-node-renderer-factory';\nimport { createAudioListenerFactory } from './factories/audio-listener-factory';\nimport { createAudioNodeConstructor } from './factories/audio-node-constructor';\nimport { createAudioParamFactory } from './factories/audio-param-factory';\nimport { createAudioParamRenderer } from './factories/audio-param-renderer';\nimport { createAudioWorkletNodeConstructor } from './factories/audio-worklet-node-constructor';\nimport { createAudioWorkletNodeRendererFactory } from './factories/audio-worklet-node-renderer-factory';\nimport { createBaseAudioContextConstructor } from './factories/base-audio-context-constructor';\nimport { createBiquadFilterNodeConstructor } from './factories/biquad-filter-node-constructor';\nimport { createBiquadFilterNodeRendererFactory } from './factories/biquad-filter-node-renderer-factory';\nimport { createCacheTestResult } from './factories/cache-test-result';\nimport { createChannelMergerNodeConstructor } from './factories/channel-merger-node-constructor';\nimport { createChannelMergerNodeRendererFactory } from './factories/channel-merger-node-renderer-factory';\nimport { createChannelSplitterNodeConstructor } from './factories/channel-splitter-node-constructor';\nimport { createChannelSplitterNodeRendererFactory } from './factories/channel-splitter-node-renderer-factory';\nimport { createConnectAudioParam } from './factories/connect-audio-param';\nimport { createConnectMultipleOutputs } from './factories/connect-multiple-outputs';\nimport { createConnectedNativeAudioBufferSourceNodeFactory } from './factories/connected-native-audio-buffer-source-node-factory';\nimport { createConstantSourceNodeConstructor } from './factories/constant-source-node-constructor';\nimport { createConstantSourceNodeRendererFactory } from './factories/constant-source-node-renderer-factory';\nimport { createConvertNumberToUnsignedLong } from './factories/convert-number-to-unsigned-long';\nimport { createConvolverNodeConstructor } from './factories/convolver-node-constructor';\nimport { createConvolverNodeRendererFactory } from './factories/convolver-node-renderer-factory';\nimport { createCreateNativeOfflineAudioContext } from './factories/create-native-offline-audio-context';\nimport { createDataCloneError } from './factories/data-clone-error';\nimport { createDecodeAudioData } from './factories/decode-audio-data';\nimport { createDecrementCycleCounter } from './factories/decrement-cycle-counter';\nimport { createDelayNodeConstructor } from './factories/delay-node-constructor';\nimport { createDelayNodeRendererFactory } from './factories/delay-node-renderer-factory';\nimport { createDeleteUnrenderedAudioWorkletNode } from './factories/delete-unrendered-audio-worklet-node';\nimport { createDetectCycles } from './factories/detect-cycles';\nimport { createDisconnectMultipleOutputs } from './factories/disconnect-multiple-outputs';\nimport { createDynamicsCompressorNodeConstructor } from './factories/dynamics-compressor-node-constructor';\nimport { createDynamicsCompressorNodeRendererFactory } from './factories/dynamics-compressor-node-renderer-factory';\nimport { createEncodingError } from './factories/encoding-error';\nimport { createEvaluateSource } from './factories/evaluate-source';\nimport { createEventTargetConstructor } from './factories/event-target-constructor';\nimport { createExposeCurrentFrameAndCurrentTime } from './factories/expose-current-frame-and-current-time';\nimport { createFetchSource } from './factories/fetch-source';\nimport { createGainNodeConstructor } from './factories/gain-node-constructor';\nimport { createGainNodeRendererFactory } from './factories/gain-node-renderer-factory';\nimport { createGetAudioNodeRenderer } from './factories/get-audio-node-renderer';\nimport { createGetAudioParamRenderer } from './factories/get-audio-param-renderer';\nimport { createGetBackupNativeContext } from './factories/get-backup-native-context';\nimport { createGetNativeContext } from './factories/get-native-context';\nimport { createGetUnrenderedAudioWorkletNodes } from './factories/get-unrendered-audio-worklet-nodes';\nimport { createIIRFilterNodeConstructor } from './factories/iir-filter-node-constructor';\nimport { createIIRFilterNodeRendererFactory } from './factories/iir-filter-node-renderer-factory';\nimport { createIncrementCycleCounterFactory } from './factories/increment-cycle-counter-factory';\nimport { createIndexSizeError } from './factories/index-size-error';\nimport { createInvalidAccessError } from './factories/invalid-access-error';\nimport { createInvalidStateError } from './factories/invalid-state-error';\nimport { createIsAnyAudioContext } from './factories/is-any-audio-context';\nimport { createIsAnyAudioNode } from './factories/is-any-audio-node';\nimport { createIsAnyAudioParam } from './factories/is-any-audio-param';\nimport { createIsAnyOfflineAudioContext } from './factories/is-any-offline-audio-context';\nimport { createIsNativeAudioContext } from './factories/is-native-audio-context';\nimport { createIsNativeAudioNode } from './factories/is-native-audio-node';\nimport { createIsNativeAudioParam } from './factories/is-native-audio-param';\nimport { createIsNativeContext } from './factories/is-native-context';\nimport { createIsNativeOfflineAudioContext } from './factories/is-native-offline-audio-context';\nimport { createIsSecureContext } from './factories/is-secure-context';\nimport { createIsSupportedPromise } from './factories/is-supported-promise';\nimport { createMediaElementAudioSourceNodeConstructor } from './factories/media-element-audio-source-node-constructor';\nimport { createMediaStreamAudioDestinationNodeConstructor } from './factories/media-stream-audio-destination-node-constructor';\nimport { createMediaStreamAudioSourceNodeConstructor } from './factories/media-stream-audio-source-node-constructor';\nimport { createMediaStreamTrackAudioSourceNodeConstructor } from './factories/media-stream-track-audio-source-node-constructor';\nimport { createMinimalAudioContextConstructor } from './factories/minimal-audio-context-constructor';\nimport { createMinimalBaseAudioContextConstructor } from './factories/minimal-base-audio-context-constructor';\nimport { createMinimalOfflineAudioContextConstructor } from './factories/minimal-offline-audio-context-constructor';\nimport { createMonitorConnections } from './factories/monitor-connections';\nimport { createNativeAnalyserNodeFactory } from './factories/native-analyser-node-factory';\nimport { createNativeAudioBufferConstructor } from './factories/native-audio-buffer-constructor';\nimport { createNativeAudioBufferSourceNodeFactory } from './factories/native-audio-buffer-source-node-factory';\nimport { createNativeAudioContextConstructor } from './factories/native-audio-context-constructor';\nimport { createNativeAudioDestinationNodeFactory } from './factories/native-audio-destination-node';\nimport { createNativeAudioNodeFactory } from './factories/native-audio-node-factory';\nimport { createNativeAudioWorkletNodeConstructor } from './factories/native-audio-worklet-node-constructor';\nimport { createNativeAudioWorkletNodeFactory } from './factories/native-audio-worklet-node-factory';\nimport { createNativeAudioWorkletNodeFakerFactory } from './factories/native-audio-worklet-node-faker-factory';\nimport { createNativeBiquadFilterNodeFactory } from './factories/native-biquad-filter-node-factory';\nimport { createNativeChannelMergerNodeFactory } from './factories/native-channel-merger-node-factory';\nimport { createNativeChannelSplitterNodeFactory } from './factories/native-channel-splitter-node-factory';\nimport { createNativeConstantSourceNodeFactory } from './factories/native-constant-source-node-factory';\nimport { createNativeConstantSourceNodeFakerFactory } from './factories/native-constant-source-node-faker-factory';\nimport { createNativeConvolverNodeFactory } from './factories/native-convolver-node-factory';\nimport { createNativeConvolverNodeFakerFactory } from './factories/native-convolver-node-faker-factory';\nimport { createNativeDelayNodeFactory } from './factories/native-delay-node-factory';\nimport { createNativeDynamicsCompressorNodeFactory } from './factories/native-dynamics-compressor-node-factory';\nimport { createNativeGainNodeFactory } from './factories/native-gain-node-factory';\nimport { createNativeIIRFilterNodeFactory } from './factories/native-iir-filter-node-factory';\nimport { createNativeIIRFilterNodeFakerFactory } from './factories/native-iir-filter-node-faker-factory';\nimport { createNativeMediaElementAudioSourceNodeFactory } from './factories/native-media-element-audio-source-node-factory';\nimport { createNativeMediaStreamAudioDestinationNodeFactory } from './factories/native-media-stream-audio-destination-node-factory';\nimport { createNativeMediaStreamAudioSourceNodeFactory } from './factories/native-media-stream-audio-source-node-factory';\nimport { createNativeMediaStreamTrackAudioSourceNodeFactory } from './factories/native-media-stream-track-audio-source-node-factory';\nimport { createNativeOfflineAudioContextConstructor } from './factories/native-offline-audio-context-constructor';\nimport { createNativeOscillatorNodeFactory } from './factories/native-oscillator-node-factory';\nimport { createNativePannerNodeFactory } from './factories/native-panner-node-factory';\nimport { createNativePannerNodeFakerFactory } from './factories/native-panner-node-faker-factory';\nimport { createNativePeriodicWaveFactory } from './factories/native-periodic-wave-factory';\nimport { createNativeScriptProcessorNodeFactory } from './factories/native-script-processor-node-factory';\nimport { createNativeStereoPannerNodeFactory } from './factories/native-stereo-panner-node-factory';\nimport { createNativeStereoPannerNodeFakerFactory } from './factories/native-stereo-panner-node-faker-factory';\nimport { createNativeWaveShaperNodeFactory } from './factories/native-wave-shaper-node-factory';\nimport { createNativeWaveShaperNodeFakerFactory } from './factories/native-wave-shaper-node-faker-factory';\nimport { createNotSupportedError } from './factories/not-supported-error';\nimport { createOfflineAudioContextConstructor } from './factories/offline-audio-context-constructor';\nimport { createOscillatorNodeConstructor } from './factories/oscillator-node-constructor';\nimport { createOscillatorNodeRendererFactory } from './factories/oscillator-node-renderer-factory';\nimport { createPannerNodeConstructor } from './factories/panner-node-constructor';\nimport { createPannerNodeRendererFactory } from './factories/panner-node-renderer-factory';\nimport { createPeriodicWaveConstructor } from './factories/periodic-wave-constructor';\nimport { createRenderAutomation } from './factories/render-automation';\nimport { createRenderInputsOfAudioNode } from './factories/render-inputs-of-audio-node';\nimport { createRenderInputsOfAudioParam } from './factories/render-inputs-of-audio-param';\nimport { createRenderNativeOfflineAudioContext } from './factories/render-native-offline-audio-context';\nimport { createStartRendering } from './factories/start-rendering';\nimport { createStereoPannerNodeConstructor } from './factories/stereo-panner-node-constructor';\nimport { createStereoPannerNodeRendererFactory } from './factories/stereo-panner-node-renderer-factory';\nimport { createTestAudioBufferConstructorSupport } from './factories/test-audio-buffer-constructor-support';\nimport { createTestAudioBufferCopyChannelMethodsSubarraySupport } from './factories/test-audio-buffer-copy-channel-methods-subarray-support';\nimport { createTestAudioBufferSourceNodeStartMethodConsecutiveCallsSupport } from './factories/test-audio-buffer-source-node-start-method-consecutive-calls-support';\nimport { createTestAudioBufferSourceNodeStartMethodDurationParameterSupport } from './factories/test-audio-buffer-source-node-start-method-duration-parameter-support';\nimport { createTestAudioBufferSourceNodeStartMethodOffsetClampingSupport } from './factories/test-audio-buffer-source-node-start-method-offset-clamping-support';\nimport { createTestAudioBufferSourceNodeStopMethodNullifiedBufferSupport } from './factories/test-audio-buffer-source-node-stop-method-nullified-buffer-support';\nimport { createTestAudioContextCloseMethodSupport } from './factories/test-audio-context-close-method-support';\nimport { createTestAudioContextDecodeAudioDataMethodTypeErrorSupport } from './factories/test-audio-context-decode-audio-data-method-type-error-support';\nimport { createTestAudioContextOptionsSupport } from './factories/test-audio-context-options-support';\nimport { createTestAudioNodeConnectMethodSupport } from './factories/test-audio-node-connect-method-support';\nimport { createTestAudioScheduledSourceNodeStartMethodNegativeParametersSupport } from './factories/test-audio-scheduled-source-node-start-method-negative-parameters-support';\nimport { createTestAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport } from './factories/test-audio-scheduled-source-node-stop-method-consecutive-calls-support';\nimport { createTestAudioScheduledSourceNodeStopMethodNegativeParametersSupport } from './factories/test-audio-scheduled-source-node-stop-method-negative-parameters-support';\nimport { createTestAudioWorkletProcessorNoOutputsSupport } from './factories/test-audio-worklet-processor-no-outputs-support';\nimport { createTestChannelMergerNodeChannelCountSupport } from './factories/test-channel-merger-node-channel-count-support';\nimport { createTestConstantSourceNodeAccurateSchedulingSupport } from './factories/test-constant-source-node-accurate-scheduling-support';\nimport { createTestConvolverNodeBufferReassignabilitySupport } from './factories/test-convolver-node-buffer-reassignability-support';\nimport { createTestIsSecureContextSupport } from './factories/test-is-secure-context-support';\nimport { createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport } from './factories/test-media-stream-audio-source-node-media-stream-without-audio-track-support';\nimport { createTestOfflineAudioContextCurrentTimeSupport } from './factories/test-offline-audio-context-current-time-support';\nimport { createTestStereoPannerNodeDefaultValueSupport } from './factories/test-stereo-panner-node-default-value-support';\nimport { createUnknownError } from './factories/unknown-error';\nimport { createWaveShaperNodeConstructor } from './factories/wave-shaper-node-constructor';\nimport { createWaveShaperNodeRendererFactory } from './factories/wave-shaper-node-renderer-factory';\nimport { createWindow } from './factories/window';\nimport { createWrapAudioBufferCopyChannelMethods } from './factories/wrap-audio-buffer-copy-channel-methods';\nimport { createWrapAudioBufferCopyChannelMethodsOutOfBounds } from './factories/wrap-audio-buffer-copy-channel-methods-out-of-bounds';\nimport { createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer } from './factories/wrap-audio-buffer-source-node-stop-method-nullified-buffer';\nimport { createWrapAudioScheduledSourceNodeStopMethodConsecutiveCalls } from './factories/wrap-audio-scheduled-source-node-stop-method-consecutive-calls';\nimport { createWrapChannelMergerNode } from './factories/wrap-channel-merger-node';\nimport { AUDIO_NODE_CONNECTIONS_STORE, AUDIO_NODE_STORE, AUDIO_PARAM_CONNECTIONS_STORE, AUDIO_PARAM_STORE, CONTEXT_STORE, CYCLE_COUNTERS } from './globals';\nimport { connectNativeAudioNodeToNativeAudioNode } from './helpers/connect-native-audio-node-to-native-audio-node';\nimport { disconnectNativeAudioNodeFromNativeAudioNode } from './helpers/disconnect-native-audio-node-from-native-audio-node';\nimport { getAudioNodeConnections } from './helpers/get-audio-node-connections';\nimport { getAudioParamConnections } from './helpers/get-audio-param-connections';\nimport { getNativeAudioNode } from './helpers/get-native-audio-node';\nimport { getNativeAudioParam } from './helpers/get-native-audio-param';\nimport { getValueForKey } from './helpers/get-value-for-key';\nimport { insertElementInSet } from './helpers/insert-element-in-set';\nimport { isActiveAudioNode } from './helpers/is-active-audio-node';\nimport { isDCCurve } from './helpers/is-dc-curve';\nimport { isPartOfACycle } from './helpers/is-part-of-a-cycle';\nimport { overwriteAccessors } from './helpers/overwrite-accessors';\nimport { testAudioBufferCopyChannelMethodsOutOfBoundsSupport } from './helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support';\nimport { testPromiseSupport } from './helpers/test-promise-support';\nimport { testTransferablesSupport } from './helpers/test-transferables-support';\nimport { wrapAudioBufferSourceNodeStartMethodOffsetClamping } from './helpers/wrap-audio-buffer-source-node-start-method-offset-clamping';\nimport { wrapEventListener } from './helpers/wrap-event-listener';\n/*\n * @todo Explicitly referencing the barrel file seems to be necessary when enabling the\n * isolatedModules compiler option.\n */\nexport * from './interfaces/index';\nexport * from './types/index';\nconst cacheTestResult = createCacheTestResult(new Map(), new WeakMap());\nconst window = createWindow();\nconst nativeOfflineAudioContextConstructor = createNativeOfflineAudioContextConstructor(window);\nconst isNativeOfflineAudioContext = createIsNativeOfflineAudioContext(nativeOfflineAudioContextConstructor);\nconst nativeAudioContextConstructor = createNativeAudioContextConstructor(window);\nconst getBackupNativeContext = createGetBackupNativeContext(isNativeOfflineAudioContext, nativeAudioContextConstructor, nativeOfflineAudioContextConstructor);\nconst createNativeAudioNode = createNativeAudioNodeFactory(getBackupNativeContext);\nconst createNativeAnalyserNode = createNativeAnalyserNodeFactory(cacheTestResult, createIndexSizeError, createNativeAudioNode);\nconst getAudioNodeRenderer = createGetAudioNodeRenderer(getAudioNodeConnections);\nconst renderInputsOfAudioNode = createRenderInputsOfAudioNode(getAudioNodeConnections, getAudioNodeRenderer, isPartOfACycle);\nconst createAnalyserNodeRenderer = createAnalyserNodeRendererFactory(createNativeAnalyserNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst auxiliaryGainNodeStore = new WeakMap();\nconst getNativeContext = createGetNativeContext(CONTEXT_STORE);\nconst audioParamAudioNodeStore = new WeakMap();\nconst eventTargetConstructor = createEventTargetConstructor(wrapEventListener);\nconst isNativeAudioContext = createIsNativeAudioContext(nativeAudioContextConstructor);\nconst isNativeAudioNode = createIsNativeAudioNode(window);\nconst isNativeAudioParam = createIsNativeAudioParam(window);\nconst audioNodeConstructor = createAudioNodeConstructor(createAddAudioNodeConnections(AUDIO_NODE_CONNECTIONS_STORE), auxiliaryGainNodeStore, cacheTestResult, createIncrementCycleCounterFactory(CYCLE_COUNTERS, disconnectNativeAudioNodeFromNativeAudioNode, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, isActiveAudioNode), createIndexSizeError, createInvalidAccessError, createNotSupportedError, createDecrementCycleCounter(connectNativeAudioNodeToNativeAudioNode, CYCLE_COUNTERS, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, getNativeContext, isActiveAudioNode, isNativeOfflineAudioContext), createDetectCycles(audioParamAudioNodeStore, getAudioNodeConnections, getValueForKey), eventTargetConstructor, getNativeContext, isNativeAudioContext, isNativeAudioNode, isNativeAudioParam, isNativeOfflineAudioContext);\nconst analyserNodeConstructor = createAnalyserNodeConstructor(audioNodeConstructor, createAnalyserNodeRenderer, createIndexSizeError, createNativeAnalyserNode, getNativeContext, isNativeOfflineAudioContext);\nexport { analyserNodeConstructor as AnalyserNode };\nconst audioBufferStore = new WeakSet();\nconst nativeAudioBufferConstructor = createNativeAudioBufferConstructor(window);\nconst convertNumberToUnsignedLong = createConvertNumberToUnsignedLong(new Uint32Array(1));\nconst wrapAudioBufferCopyChannelMethods = createWrapAudioBufferCopyChannelMethods(convertNumberToUnsignedLong, createIndexSizeError);\nconst wrapAudioBufferCopyChannelMethodsOutOfBounds = createWrapAudioBufferCopyChannelMethodsOutOfBounds(convertNumberToUnsignedLong);\nconst audioBufferConstructor = createAudioBufferConstructor(audioBufferStore, cacheTestResult, createNotSupportedError, nativeAudioBufferConstructor, nativeOfflineAudioContextConstructor, createTestAudioBufferConstructorSupport(nativeAudioBufferConstructor), wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);\nexport { audioBufferConstructor as AudioBuffer };\nconst testAudioScheduledSourceNodeStartMethodNegativeParametersSupport = createTestAudioScheduledSourceNodeStartMethodNegativeParametersSupport(createNativeAudioNode);\nconst testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport = createTestAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport(createNativeAudioNode);\nconst testAudioScheduledSourceNodeStopMethodNegativeParametersSupport = createTestAudioScheduledSourceNodeStopMethodNegativeParametersSupport(createNativeAudioNode);\nconst wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls = createWrapAudioScheduledSourceNodeStopMethodConsecutiveCalls(createNativeAudioNode);\nconst renderInputsOfAudioParam = createRenderInputsOfAudioParam(getAudioNodeRenderer, getAudioParamConnections, isPartOfACycle);\nconst connectAudioParam = createConnectAudioParam(renderInputsOfAudioParam);\nconst createNativeAudioBufferSourceNode = createNativeAudioBufferSourceNodeFactory(cacheTestResult, createNativeAudioNode, createTestAudioBufferSourceNodeStartMethodConsecutiveCallsSupport(createNativeAudioNode), createTestAudioBufferSourceNodeStartMethodDurationParameterSupport(nativeOfflineAudioContextConstructor), createTestAudioBufferSourceNodeStartMethodOffsetClampingSupport(createNativeAudioNode), createTestAudioBufferSourceNodeStopMethodNullifiedBufferSupport(createNativeAudioNode), testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioBufferSourceNodeStartMethodOffsetClamping, createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer(overwriteAccessors), wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls);\nconst renderAutomation = createRenderAutomation(createGetAudioParamRenderer(getAudioParamConnections), renderInputsOfAudioParam);\nconst createAudioBufferSourceNodeRenderer = createAudioBufferSourceNodeRendererFactory(connectAudioParam, createNativeAudioBufferSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst createAudioParam = createAudioParamFactory(createAddAudioParamConnections(AUDIO_PARAM_CONNECTIONS_STORE), audioParamAudioNodeStore, AUDIO_PARAM_STORE, createAudioParamRenderer, createCancelAndHoldAutomationEvent, createCancelScheduledValuesAutomationEvent, createExponentialRampToValueAutomationEvent, createLinearRampToValueAutomationEvent, createSetTargetAutomationEvent, createSetValueAutomationEvent, createSetValueCurveAutomationEvent, nativeAudioContextConstructor);\nconst audioBufferSourceNodeConstructor = createAudioBufferSourceNodeConstructor(audioNodeConstructor, createAudioBufferSourceNodeRenderer, createAudioParam, createInvalidStateError, createNativeAudioBufferSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener);\nexport { audioBufferSourceNodeConstructor as AudioBufferSourceNode };\nconst createNativeGainNode = createNativeGainNodeFactory(createNativeAudioNode);\nconst audioDestinationNodeConstructor = createAudioDestinationNodeConstructor(audioNodeConstructor, createAudioDestinationNodeRenderer, createIndexSizeError, createInvalidStateError, createNativeAudioDestinationNodeFactory(createNativeGainNode, overwriteAccessors), getNativeContext, isNativeOfflineAudioContext, renderInputsOfAudioNode);\nconst createNativeBiquadFilterNode = createNativeBiquadFilterNodeFactory(createNativeAudioNode);\nconst createBiquadFilterNodeRenderer = createBiquadFilterNodeRendererFactory(connectAudioParam, createNativeBiquadFilterNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst biquadFilterNodeConstructor = createBiquadFilterNodeConstructor(audioNodeConstructor, createAudioParam, createBiquadFilterNodeRenderer, createInvalidAccessError, createNativeBiquadFilterNode, getNativeContext, isNativeOfflineAudioContext);\nconst monitorConnections = createMonitorConnections(insertElementInSet, isNativeAudioNode);\nconst wrapChannelMergerNode = createWrapChannelMergerNode(createInvalidStateError, createNativeAudioNode, monitorConnections);\nconst createNativeChannelMergerNode = createNativeChannelMergerNodeFactory(createNativeAudioNode, wrapChannelMergerNode);\nconst createChannelMergerNodeRenderer = createChannelMergerNodeRendererFactory(createNativeChannelMergerNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst channelMergerNodeConstructor = createChannelMergerNodeConstructor(audioNodeConstructor, createChannelMergerNodeRenderer, createNativeChannelMergerNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeChannelSplitterNode = createNativeChannelSplitterNodeFactory(createNativeAudioNode);\nconst createChannelSplitterNodeRenderer = createChannelSplitterNodeRendererFactory(createNativeChannelSplitterNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst channelSplitterNodeConstructor = createChannelSplitterNodeConstructor(audioNodeConstructor, createChannelSplitterNodeRenderer, createNativeChannelSplitterNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeConstantSourceNodeFaker = createNativeConstantSourceNodeFakerFactory(createNativeAudioBufferSourceNode, createNativeGainNode, monitorConnections);\nconst createNativeConstantSourceNode = createNativeConstantSourceNodeFactory(cacheTestResult, createNativeAudioNode, createNativeConstantSourceNodeFaker, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport);\nconst createConstantSourceNodeRenderer = createConstantSourceNodeRendererFactory(connectAudioParam, createNativeConstantSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst constantSourceNodeConstructor = createConstantSourceNodeConstructor(audioNodeConstructor, createAudioParam, createConstantSourceNodeRenderer, createNativeConstantSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener);\nconst createNativeConvolverNodeFaker = createNativeConvolverNodeFakerFactory(createNativeAudioNode, createNativeGainNode, monitorConnections);\nconst createNativeConvolverNode = createNativeConvolverNodeFactory(createNativeAudioNode, createNativeConvolverNodeFaker, createNotSupportedError, overwriteAccessors);\nconst createConvolverNodeRenderer = createConvolverNodeRendererFactory(createNativeConvolverNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst convolverNodeConstructor = createConvolverNodeConstructor(audioNodeConstructor, createConvolverNodeRenderer, createNativeConvolverNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeDelayNode = createNativeDelayNodeFactory(createNativeAudioNode);\nconst createDelayNodeRenderer = createDelayNodeRendererFactory(connectAudioParam, createNativeDelayNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst delayNodeConstructor = createDelayNodeConstructor(audioNodeConstructor, createAudioParam, createDelayNodeRenderer, createNativeDelayNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeDynamicsCompressorNode = createNativeDynamicsCompressorNodeFactory(createNativeAudioNode, createNotSupportedError);\nconst createDynamicsCompressorNodeRenderer = createDynamicsCompressorNodeRendererFactory(connectAudioParam, createNativeDynamicsCompressorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst dynamicsCompressorNodeConstructor = createDynamicsCompressorNodeConstructor(audioNodeConstructor, createAudioParam, createDynamicsCompressorNodeRenderer, createNativeDynamicsCompressorNode, createNotSupportedError, getNativeContext, isNativeOfflineAudioContext);\nconst createGainNodeRenderer = createGainNodeRendererFactory(connectAudioParam, createNativeGainNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst gainNodeConstructor = createGainNodeConstructor(audioNodeConstructor, createAudioParam, createGainNodeRenderer, createNativeGainNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeScriptProcessorNode = createNativeScriptProcessorNodeFactory(createNativeAudioNode);\nconst createNativeIIRFilterNodeFaker = createNativeIIRFilterNodeFakerFactory(createInvalidAccessError, createInvalidStateError, createNativeScriptProcessorNode, createNotSupportedError);\nconst renderNativeOfflineAudioContext = createRenderNativeOfflineAudioContext(cacheTestResult, createNativeGainNode, createNativeScriptProcessorNode, createTestOfflineAudioContextCurrentTimeSupport(createNativeGainNode, nativeOfflineAudioContextConstructor));\nconst createIIRFilterNodeRenderer = createIIRFilterNodeRendererFactory(createNativeAudioBufferSourceNode, createNativeAudioNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderInputsOfAudioNode, renderNativeOfflineAudioContext);\nconst createNativeIIRFilterNode = createNativeIIRFilterNodeFactory(createNativeAudioNode, createNativeIIRFilterNodeFaker);\nconst iIRFilterNodeConstructor = createIIRFilterNodeConstructor(audioNodeConstructor, createNativeIIRFilterNode, createIIRFilterNodeRenderer, getNativeContext, isNativeOfflineAudioContext);\nconst createAudioListener = createAudioListenerFactory(createAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeScriptProcessorNode, isNativeOfflineAudioContext);\nconst unrenderedAudioWorkletNodeStore = new WeakMap();\nconst minimalBaseAudioContextConstructor = createMinimalBaseAudioContextConstructor(audioDestinationNodeConstructor, createAudioListener, eventTargetConstructor, isNativeOfflineAudioContext, unrenderedAudioWorkletNodeStore, wrapEventListener);\nconst createNativeOscillatorNode = createNativeOscillatorNodeFactory(cacheTestResult, createNativeAudioNode, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls);\nconst createOscillatorNodeRenderer = createOscillatorNodeRendererFactory(connectAudioParam, createNativeOscillatorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst oscillatorNodeConstructor = createOscillatorNodeConstructor(audioNodeConstructor, createAudioParam, createInvalidStateError, createNativeOscillatorNode, createOscillatorNodeRenderer, getNativeContext, isNativeOfflineAudioContext, wrapEventListener);\nconst createConnectedNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNodeFactory(createNativeAudioBufferSourceNode);\nconst createNativeWaveShaperNodeFaker = createNativeWaveShaperNodeFakerFactory(createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeAudioNode, createNativeGainNode, isDCCurve, monitorConnections);\nconst createNativeWaveShaperNode = createNativeWaveShaperNodeFactory(createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeAudioNode, createNativeWaveShaperNodeFaker, isDCCurve, monitorConnections, overwriteAccessors);\nconst createNativePannerNodeFaker = createNativePannerNodeFakerFactory(connectNativeAudioNodeToNativeAudioNode, createInvalidStateError, createNativeAudioNode, createNativeChannelMergerNode, createNativeGainNode, createNativeScriptProcessorNode, createNativeWaveShaperNode, createNotSupportedError, disconnectNativeAudioNodeFromNativeAudioNode, monitorConnections);\nconst createNativePannerNode = createNativePannerNodeFactory(createNativeAudioNode, createNativePannerNodeFaker);\nconst createPannerNodeRenderer = createPannerNodeRendererFactory(connectAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeGainNode, createNativePannerNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext);\nconst pannerNodeConstructor = createPannerNodeConstructor(audioNodeConstructor, createAudioParam, createNativePannerNode, createPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext);\nconst createNativePeriodicWave = createNativePeriodicWaveFactory(getBackupNativeContext);\nconst periodicWaveConstructor = createPeriodicWaveConstructor(createNativePeriodicWave, getNativeContext, new WeakSet());\nconst nativeStereoPannerNodeFakerFactory = createNativeStereoPannerNodeFakerFactory(createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeGainNode, createNativeWaveShaperNode, createNotSupportedError, monitorConnections);\nconst createNativeStereoPannerNode = createNativeStereoPannerNodeFactory(createNativeAudioNode, nativeStereoPannerNodeFakerFactory, createNotSupportedError);\nconst createStereoPannerNodeRenderer = createStereoPannerNodeRendererFactory(connectAudioParam, createNativeStereoPannerNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst stereoPannerNodeConstructor = createStereoPannerNodeConstructor(audioNodeConstructor, createAudioParam, createNativeStereoPannerNode, createStereoPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext);\nconst createWaveShaperNodeRenderer = createWaveShaperNodeRendererFactory(createNativeWaveShaperNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst waveShaperNodeConstructor = createWaveShaperNodeConstructor(audioNodeConstructor, createInvalidStateError, createNativeWaveShaperNode, createWaveShaperNodeRenderer, getNativeContext, isNativeOfflineAudioContext);\nconst isSecureContext = createIsSecureContext(window);\nconst exposeCurrentFrameAndCurrentTime = createExposeCurrentFrameAndCurrentTime(window);\n// The addAudioWorkletModule() function is only available in a SecureContext.\nexport const addAudioWorkletModule = (isSecureContext) ?\n    createAddAudioWorkletModule(createNotSupportedError, createEvaluateSource(window), exposeCurrentFrameAndCurrentTime, createFetchSource(createAbortError), getBackupNativeContext, getNativeContext, new WeakMap(), new WeakMap(), \n    // @todo window is guaranteed to be defined because isSecureContext checks that as well.\n    window) :\n    undefined;\nconst isNativeContext = createIsNativeContext(isNativeAudioContext, isNativeOfflineAudioContext);\nexport const decodeAudioData = createDecodeAudioData(audioBufferStore, cacheTestResult, createDataCloneError, createEncodingError, new WeakSet(), getNativeContext, isNativeContext, isNativeOfflineAudioContext, nativeOfflineAudioContextConstructor, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, testPromiseSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);\nconst baseAudioContextConstructor = createBaseAudioContextConstructor(addAudioWorkletModule, analyserNodeConstructor, audioBufferConstructor, audioBufferSourceNodeConstructor, biquadFilterNodeConstructor, channelMergerNodeConstructor, channelSplitterNodeConstructor, constantSourceNodeConstructor, convolverNodeConstructor, decodeAudioData, delayNodeConstructor, dynamicsCompressorNodeConstructor, gainNodeConstructor, iIRFilterNodeConstructor, minimalBaseAudioContextConstructor, oscillatorNodeConstructor, pannerNodeConstructor, periodicWaveConstructor, stereoPannerNodeConstructor, waveShaperNodeConstructor);\nconst createNativeMediaElementAudioSourceNode = createNativeMediaElementAudioSourceNodeFactory(createNativeAudioNode);\nconst mediaElementAudioSourceNodeConstructor = createMediaElementAudioSourceNodeConstructor(audioNodeConstructor, createNativeMediaElementAudioSourceNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeMediaStreamAudioDestinationNode = createNativeMediaStreamAudioDestinationNodeFactory(createNativeAudioNode, createNotSupportedError);\nconst mediaStreamAudioDestinationNodeConstructor = createMediaStreamAudioDestinationNodeConstructor(audioNodeConstructor, createNativeMediaStreamAudioDestinationNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeMediaStreamAudioSourceNode = createNativeMediaStreamAudioSourceNodeFactory(createNativeAudioNode);\nconst mediaStreamAudioSourceNodeConstructor = createMediaStreamAudioSourceNodeConstructor(audioNodeConstructor, createNativeMediaStreamAudioSourceNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeMediaStreamTrackAudioSourceNode = createNativeMediaStreamTrackAudioSourceNodeFactory(createInvalidStateError, createNativeAudioNode, isNativeOfflineAudioContext);\nconst mediaStreamTrackAudioSourceNodeConstructor = createMediaStreamTrackAudioSourceNodeConstructor(audioNodeConstructor, createNativeMediaStreamTrackAudioSourceNode, getNativeContext);\nconst audioContextConstructor = createAudioContextConstructor(baseAudioContextConstructor, createInvalidStateError, createNotSupportedError, createUnknownError, mediaElementAudioSourceNodeConstructor, mediaStreamAudioDestinationNodeConstructor, mediaStreamAudioSourceNodeConstructor, mediaStreamTrackAudioSourceNodeConstructor, nativeAudioContextConstructor);\nexport { audioContextConstructor as AudioContext };\nconst getUnrenderedAudioWorkletNodes = createGetUnrenderedAudioWorkletNodes(unrenderedAudioWorkletNodeStore);\nconst addUnrenderedAudioWorkletNode = createAddUnrenderedAudioWorkletNode(getUnrenderedAudioWorkletNodes);\nconst connectMultipleOutputs = createConnectMultipleOutputs(createIndexSizeError);\nconst deleteUnrenderedAudioWorkletNode = createDeleteUnrenderedAudioWorkletNode(getUnrenderedAudioWorkletNodes);\nconst disconnectMultipleOutputs = createDisconnectMultipleOutputs(createIndexSizeError);\nconst createNativeAudioWorkletNodeFaker = createNativeAudioWorkletNodeFakerFactory(auxiliaryGainNodeStore, connectMultipleOutputs, createIndexSizeError, createInvalidStateError, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, createNativeScriptProcessorNode, createNotSupportedError, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, monitorConnections);\nconst createNativeAudioWorkletNode = createNativeAudioWorkletNodeFactory(createInvalidStateError, createNativeAudioNode, createNativeAudioWorkletNodeFaker, createNativeGainNode, createNotSupportedError, monitorConnections);\nconst nativeAudioWorkletNodeConstructor = createNativeAudioWorkletNodeConstructor(window);\nconst createAudioWorkletNodeRenderer = createAudioWorkletNodeRendererFactory(connectAudioParam, connectMultipleOutputs, createNativeAudioBufferSourceNode, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, deleteUnrenderedAudioWorkletNode, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, getNativeAudioNode, nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext);\n// The AudioWorkletNode constructor is only available in a SecureContext.\nconst audioWorkletNodeConstructor = (isSecureContext) ?\n    createAudioWorkletNodeConstructor(addUnrenderedAudioWorkletNode, audioNodeConstructor, createAudioParam, createAudioWorkletNodeRenderer, createNativeAudioWorkletNode, getNativeContext, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor, wrapEventListener) :\n    undefined;\nexport { audioWorkletNodeConstructor as AudioWorkletNode };\nexport { biquadFilterNodeConstructor as BiquadFilterNode };\nexport { channelMergerNodeConstructor as ChannelMergerNode };\nexport { channelSplitterNodeConstructor as ChannelSplitterNode };\nexport { convolverNodeConstructor as ConvolverNode };\nexport { constantSourceNodeConstructor as ConstantSourceNode };\nexport { delayNodeConstructor as DelayNode };\nexport { dynamicsCompressorNodeConstructor as DynamicsCompressorNode };\nexport { gainNodeConstructor as GainNode };\nexport { iIRFilterNodeConstructor as IIRFilterNode };\nexport { mediaElementAudioSourceNodeConstructor as MediaElementAudioSourceNode };\nexport { mediaStreamAudioDestinationNodeConstructor as MediaStreamAudioDestinationNode };\nexport { mediaStreamAudioSourceNodeConstructor as MediaStreamAudioSourceNode };\nexport { mediaStreamTrackAudioSourceNodeConstructor as MediaStreamTrackAudioSourceNode };\nconst minimalAudioContextConstructor = createMinimalAudioContextConstructor(createInvalidStateError, createNotSupportedError, createUnknownError, minimalBaseAudioContextConstructor, nativeAudioContextConstructor);\nexport { minimalAudioContextConstructor as MinimalAudioContext };\nconst createNativeOfflineAudioContext = createCreateNativeOfflineAudioContext(createNotSupportedError, nativeOfflineAudioContextConstructor);\nconst startRendering = createStartRendering(audioBufferStore, cacheTestResult, getAudioNodeRenderer, getUnrenderedAudioWorkletNodes, renderNativeOfflineAudioContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);\nconst minimalOfflineAudioContextConstructor = createMinimalOfflineAudioContextConstructor(cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, minimalBaseAudioContextConstructor, startRendering);\nexport { minimalOfflineAudioContextConstructor as MinimalOfflineAudioContext };\nconst offlineAudioContextConstructor = createOfflineAudioContextConstructor(baseAudioContextConstructor, cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, startRendering);\nexport { offlineAudioContextConstructor as OfflineAudioContext };\nexport { oscillatorNodeConstructor as OscillatorNode };\nexport { pannerNodeConstructor as PannerNode };\nexport { periodicWaveConstructor as PeriodicWave };\nexport { stereoPannerNodeConstructor as StereoPannerNode };\nexport { waveShaperNodeConstructor as WaveShaperNode };\nexport const isAnyAudioContext = createIsAnyAudioContext(CONTEXT_STORE, isNativeAudioContext);\nexport const isAnyAudioNode = createIsAnyAudioNode(AUDIO_NODE_STORE, isNativeAudioNode);\nexport const isAnyAudioParam = createIsAnyAudioParam(AUDIO_PARAM_STORE, isNativeAudioParam);\nexport const isAnyOfflineAudioContext = createIsAnyOfflineAudioContext(CONTEXT_STORE, isNativeOfflineAudioContext);\nexport const isSupported = () => createIsSupportedPromise(cacheTestResult, createTestAudioBufferCopyChannelMethodsSubarraySupport(nativeOfflineAudioContextConstructor), createTestAudioContextCloseMethodSupport(nativeAudioContextConstructor), createTestAudioContextDecodeAudioDataMethodTypeErrorSupport(nativeOfflineAudioContextConstructor), createTestAudioContextOptionsSupport(nativeAudioContextConstructor), createTestAudioNodeConnectMethodSupport(nativeOfflineAudioContextConstructor), createTestAudioWorkletProcessorNoOutputsSupport(nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor), createTestChannelMergerNodeChannelCountSupport(createNativeAudioNode, nativeOfflineAudioContextConstructor), createTestConstantSourceNodeAccurateSchedulingSupport(createNativeAudioNode, nativeOfflineAudioContextConstructor), createTestConvolverNodeBufferReassignabilitySupport(nativeOfflineAudioContextConstructor), createTestIsSecureContextSupport(window), createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport(nativeAudioContextConstructor), createTestStereoPannerNodeDefaultValueSupport(nativeOfflineAudioContextConstructor), testTransferablesSupport);\n//# sourceMappingURL=/build/es2019/module.js.map","(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@babel/runtime/helpers/slicedToArray'), require('@babel/runtime/helpers/classCallCheck'), require('@babel/runtime/helpers/createClass')) :\n    typeof define === 'function' && define.amd ? define(['exports', '@babel/runtime/helpers/slicedToArray', '@babel/runtime/helpers/classCallCheck', '@babel/runtime/helpers/createClass'], factory) :\n    (global = global || self, factory(global.automationEvents = {}, global._slicedToArray, global._classCallCheck, global._createClass));\n}(this, (function (exports, _slicedToArray, _classCallCheck, _createClass) { 'use strict';\n\n    _slicedToArray = _slicedToArray && Object.prototype.hasOwnProperty.call(_slicedToArray, 'default') ? _slicedToArray['default'] : _slicedToArray;\n    _classCallCheck = _classCallCheck && Object.prototype.hasOwnProperty.call(_classCallCheck, 'default') ? _classCallCheck['default'] : _classCallCheck;\n    _createClass = _createClass && Object.prototype.hasOwnProperty.call(_createClass, 'default') ? _createClass['default'] : _createClass;\n\n    var createExtendedExponentialRampToValueAutomationEvent = function createExtendedExponentialRampToValueAutomationEvent(value, endTime, insertTime) {\n      return {\n        endTime: endTime,\n        insertTime: insertTime,\n        type: 'exponentialRampToValue',\n        value: value\n      };\n    };\n\n    var createExtendedLinearRampToValueAutomationEvent = function createExtendedLinearRampToValueAutomationEvent(value, endTime, insertTime) {\n      return {\n        endTime: endTime,\n        insertTime: insertTime,\n        type: 'linearRampToValue',\n        value: value\n      };\n    };\n\n    var createSetValueAutomationEvent = function createSetValueAutomationEvent(value, startTime) {\n      return {\n        startTime: startTime,\n        type: 'setValue',\n        value: value\n      };\n    };\n\n    var createSetValueCurveAutomationEvent = function createSetValueCurveAutomationEvent(values, startTime, duration) {\n      return {\n        duration: duration,\n        startTime: startTime,\n        type: 'setValueCurve',\n        values: values\n      };\n    };\n\n    var getTargetValueAtTime = function getTargetValueAtTime(time, valueAtStartTime, _ref) {\n      var startTime = _ref.startTime,\n          target = _ref.target,\n          timeConstant = _ref.timeConstant;\n      return target + (valueAtStartTime - target) * Math.exp((startTime - time) / timeConstant);\n    };\n\n    var isExponentialRampToValueAutomationEvent = function isExponentialRampToValueAutomationEvent(automationEvent) {\n      return automationEvent.type === 'exponentialRampToValue';\n    };\n\n    var isLinearRampToValueAutomationEvent = function isLinearRampToValueAutomationEvent(automationEvent) {\n      return automationEvent.type === 'linearRampToValue';\n    };\n\n    var isAnyRampToValueAutomationEvent = function isAnyRampToValueAutomationEvent(automationEvent) {\n      return isExponentialRampToValueAutomationEvent(automationEvent) || isLinearRampToValueAutomationEvent(automationEvent);\n    };\n\n    var isSetValueAutomationEvent = function isSetValueAutomationEvent(automationEvent) {\n      return automationEvent.type === 'setValue';\n    };\n\n    var isSetValueCurveAutomationEvent = function isSetValueCurveAutomationEvent(automationEvent) {\n      return automationEvent.type === 'setValueCurve';\n    };\n\n    var getValueOfAutomationEventAtIndexAtTime = function getValueOfAutomationEventAtIndexAtTime(automationEvents, index, time, defaultValue) {\n      var automationEvent = automationEvents[index];\n      return automationEvent === undefined ? defaultValue : isAnyRampToValueAutomationEvent(automationEvent) || isSetValueAutomationEvent(automationEvent) ? automationEvent.value : isSetValueCurveAutomationEvent(automationEvent) ? automationEvent.values[automationEvent.values.length - 1] : getTargetValueAtTime(time, getValueOfAutomationEventAtIndexAtTime(automationEvents, index - 1, automationEvent.startTime, defaultValue), automationEvent);\n    };\n\n    var getEndTimeAndValueOfPreviousAutomationEvent = function getEndTimeAndValueOfPreviousAutomationEvent(automationEvents, index, currentAutomationEvent, nextAutomationEvent, defaultValue) {\n      return currentAutomationEvent === undefined ? [nextAutomationEvent.insertTime, defaultValue] : isAnyRampToValueAutomationEvent(currentAutomationEvent) ? [currentAutomationEvent.endTime, currentAutomationEvent.value] : isSetValueAutomationEvent(currentAutomationEvent) ? [currentAutomationEvent.startTime, currentAutomationEvent.value] : isSetValueCurveAutomationEvent(currentAutomationEvent) ? [currentAutomationEvent.startTime + currentAutomationEvent.duration, currentAutomationEvent.values[currentAutomationEvent.values.length - 1]] : [currentAutomationEvent.startTime, getValueOfAutomationEventAtIndexAtTime(automationEvents, index - 1, currentAutomationEvent.startTime, defaultValue)];\n    };\n\n    var isCancelAndHoldAutomationEvent = function isCancelAndHoldAutomationEvent(automationEvent) {\n      return automationEvent.type === 'cancelAndHold';\n    };\n\n    var isCancelScheduledValuesAutomationEvent = function isCancelScheduledValuesAutomationEvent(automationEvent) {\n      return automationEvent.type === 'cancelScheduledValues';\n    };\n\n    var getEventTime = function getEventTime(automationEvent) {\n      if (isCancelAndHoldAutomationEvent(automationEvent) || isCancelScheduledValuesAutomationEvent(automationEvent)) {\n        return automationEvent.cancelTime;\n      }\n\n      if (isExponentialRampToValueAutomationEvent(automationEvent) || isLinearRampToValueAutomationEvent(automationEvent)) {\n        return automationEvent.endTime;\n      }\n\n      return automationEvent.startTime;\n    };\n\n    var getExponentialRampValueAtTime = function getExponentialRampValueAtTime(time, startTime, valueAtStartTime, _ref) {\n      var endTime = _ref.endTime,\n          value = _ref.value;\n\n      if (valueAtStartTime === value) {\n        return value;\n      }\n\n      if (0 < valueAtStartTime && 0 < value || valueAtStartTime < 0 && value < 0) {\n        return valueAtStartTime * Math.pow(value / valueAtStartTime, (time - startTime) / (endTime - startTime));\n      }\n\n      return 0;\n    };\n\n    var getLinearRampValueAtTime = function getLinearRampValueAtTime(time, startTime, valueAtStartTime, _ref) {\n      var endTime = _ref.endTime,\n          value = _ref.value;\n      return valueAtStartTime + (time - startTime) / (endTime - startTime) * (value - valueAtStartTime);\n    };\n\n    var interpolateValue = function interpolateValue(values, theoreticIndex) {\n      var lowerIndex = Math.floor(theoreticIndex);\n      var upperIndex = Math.ceil(theoreticIndex);\n\n      if (lowerIndex === upperIndex) {\n        return values[lowerIndex];\n      }\n\n      return (1 - (theoreticIndex - lowerIndex)) * values[lowerIndex] + (1 - (upperIndex - theoreticIndex)) * values[upperIndex];\n    };\n\n    var getValueCurveValueAtTime = function getValueCurveValueAtTime(time, _ref) {\n      var duration = _ref.duration,\n          startTime = _ref.startTime,\n          values = _ref.values;\n      var theoreticIndex = (time - startTime) / duration * (values.length - 1);\n      return interpolateValue(values, theoreticIndex);\n    };\n\n    var isSetTargetAutomationEvent = function isSetTargetAutomationEvent(automationEvent) {\n      return automationEvent.type === 'setTarget';\n    };\n\n    var AutomationEventList = /*#__PURE__*/function () {\n      function AutomationEventList(defaultValue) {\n        _classCallCheck(this, AutomationEventList);\n\n        this._automationEvents = [];\n        this._currenTime = 0;\n        this._defaultValue = defaultValue;\n      }\n\n      _createClass(AutomationEventList, [{\n        key: Symbol.iterator,\n        value: function value() {\n          return this._automationEvents[Symbol.iterator]();\n        }\n      }, {\n        key: \"add\",\n        value: function add(automationEvent) {\n          var eventTime = getEventTime(automationEvent);\n\n          if (isCancelAndHoldAutomationEvent(automationEvent) || isCancelScheduledValuesAutomationEvent(automationEvent)) {\n            var index = this._automationEvents.findIndex(function (currentAutomationEvent) {\n              return getEventTime(currentAutomationEvent) >= eventTime;\n            });\n\n            var removedAutomationEvent = this._automationEvents[index];\n\n            if (index !== -1) {\n              this._automationEvents = this._automationEvents.slice(0, index);\n            }\n\n            if (isCancelAndHoldAutomationEvent(automationEvent)) {\n              var lastAutomationEvent = this._automationEvents[this._automationEvents.length - 1];\n\n              if (removedAutomationEvent !== undefined && isAnyRampToValueAutomationEvent(removedAutomationEvent)) {\n                if (isSetTargetAutomationEvent(lastAutomationEvent)) {\n                  throw new Error('The internal list is malformed.');\n                }\n\n                var startTime = isSetValueCurveAutomationEvent(lastAutomationEvent) ? lastAutomationEvent.startTime + lastAutomationEvent.duration : getEventTime(lastAutomationEvent);\n                var startValue = isSetValueCurveAutomationEvent(lastAutomationEvent) ? lastAutomationEvent.values[lastAutomationEvent.values.length - 1] : lastAutomationEvent.value;\n                var value = isExponentialRampToValueAutomationEvent(removedAutomationEvent) ? getExponentialRampValueAtTime(eventTime, startTime, startValue, removedAutomationEvent) : getLinearRampValueAtTime(eventTime, startTime, startValue, removedAutomationEvent);\n                var truncatedAutomationEvent = isExponentialRampToValueAutomationEvent(removedAutomationEvent) ? createExtendedExponentialRampToValueAutomationEvent(value, eventTime, this._currenTime) : createExtendedLinearRampToValueAutomationEvent(value, eventTime, this._currenTime);\n\n                this._automationEvents.push(truncatedAutomationEvent);\n              }\n\n              if (lastAutomationEvent !== undefined && isSetTargetAutomationEvent(lastAutomationEvent)) {\n                this._automationEvents.push(createSetValueAutomationEvent(this.getValue(eventTime), eventTime));\n              }\n\n              if (lastAutomationEvent !== undefined && isSetValueCurveAutomationEvent(lastAutomationEvent) && lastAutomationEvent.startTime + lastAutomationEvent.duration > eventTime) {\n                this._automationEvents[this._automationEvents.length - 1] = createSetValueCurveAutomationEvent(new Float32Array([6, 7]), lastAutomationEvent.startTime, eventTime - lastAutomationEvent.startTime);\n              }\n            }\n          } else {\n            var _index = this._automationEvents.findIndex(function (currentAutomationEvent) {\n              return getEventTime(currentAutomationEvent) > eventTime;\n            });\n\n            var previousAutomationEvent = _index === -1 ? this._automationEvents[this._automationEvents.length - 1] : this._automationEvents[_index - 1];\n\n            if (previousAutomationEvent !== undefined && isSetValueCurveAutomationEvent(previousAutomationEvent) && getEventTime(previousAutomationEvent) + previousAutomationEvent.duration > eventTime) {\n              return false;\n            }\n\n            var persistentAutomationEvent = isExponentialRampToValueAutomationEvent(automationEvent) ? createExtendedExponentialRampToValueAutomationEvent(automationEvent.value, automationEvent.endTime, this._currenTime) : isLinearRampToValueAutomationEvent(automationEvent) ? createExtendedLinearRampToValueAutomationEvent(automationEvent.value, eventTime, this._currenTime) : automationEvent;\n\n            if (_index === -1) {\n              this._automationEvents.push(persistentAutomationEvent);\n            } else {\n              if (isSetValueCurveAutomationEvent(automationEvent) && eventTime + automationEvent.duration > getEventTime(this._automationEvents[_index])) {\n                return false;\n              }\n\n              this._automationEvents.splice(_index, 0, persistentAutomationEvent);\n            }\n          }\n\n          return true;\n        }\n      }, {\n        key: \"flush\",\n        value: function flush(time) {\n          var index = this._automationEvents.findIndex(function (currentAutomationEvent) {\n            return getEventTime(currentAutomationEvent) > time;\n          });\n\n          if (index > 1) {\n            var remainingAutomationEvents = this._automationEvents.slice(index - 1);\n\n            var firstRemainingAutomationEvent = remainingAutomationEvents[0];\n\n            if (isSetTargetAutomationEvent(firstRemainingAutomationEvent)) {\n              remainingAutomationEvents.unshift(createSetValueAutomationEvent(getValueOfAutomationEventAtIndexAtTime(this._automationEvents, index - 2, firstRemainingAutomationEvent.startTime, this._defaultValue), firstRemainingAutomationEvent.startTime));\n            }\n\n            this._automationEvents = remainingAutomationEvents;\n          }\n        }\n      }, {\n        key: \"getValue\",\n        value: function getValue(time) {\n          if (this._automationEvents.length === 0) {\n            return this._defaultValue;\n          }\n\n          var lastAutomationEvent = this._automationEvents[this._automationEvents.length - 1];\n\n          var index = this._automationEvents.findIndex(function (automationEvent) {\n            return getEventTime(automationEvent) > time;\n          });\n\n          var nextAutomationEvent = this._automationEvents[index];\n          var currentAutomationEvent = getEventTime(lastAutomationEvent) <= time ? lastAutomationEvent : this._automationEvents[index - 1];\n\n          if (currentAutomationEvent !== undefined && isSetTargetAutomationEvent(currentAutomationEvent) && (nextAutomationEvent === undefined || !isAnyRampToValueAutomationEvent(nextAutomationEvent) || nextAutomationEvent.insertTime > time)) {\n            return getTargetValueAtTime(time, getValueOfAutomationEventAtIndexAtTime(this._automationEvents, index - 2, currentAutomationEvent.startTime, this._defaultValue), currentAutomationEvent);\n          }\n\n          if (currentAutomationEvent !== undefined && isSetValueAutomationEvent(currentAutomationEvent) && (nextAutomationEvent === undefined || !isAnyRampToValueAutomationEvent(nextAutomationEvent))) {\n            return currentAutomationEvent.value;\n          }\n\n          if (currentAutomationEvent !== undefined && isSetValueCurveAutomationEvent(currentAutomationEvent) && (nextAutomationEvent === undefined || !isAnyRampToValueAutomationEvent(nextAutomationEvent) || currentAutomationEvent.startTime + currentAutomationEvent.duration > time)) {\n            if (time < currentAutomationEvent.startTime + currentAutomationEvent.duration) {\n              return getValueCurveValueAtTime(time, currentAutomationEvent);\n            }\n\n            return currentAutomationEvent.values[currentAutomationEvent.values.length - 1];\n          }\n\n          if (currentAutomationEvent !== undefined && isAnyRampToValueAutomationEvent(currentAutomationEvent) && (nextAutomationEvent === undefined || !isAnyRampToValueAutomationEvent(nextAutomationEvent))) {\n            return currentAutomationEvent.value;\n          }\n\n          if (nextAutomationEvent !== undefined && isExponentialRampToValueAutomationEvent(nextAutomationEvent)) {\n            var _getEndTimeAndValueOf = getEndTimeAndValueOfPreviousAutomationEvent(this._automationEvents, index - 1, currentAutomationEvent, nextAutomationEvent, this._defaultValue),\n                _getEndTimeAndValueOf2 = _slicedToArray(_getEndTimeAndValueOf, 2),\n                startTime = _getEndTimeAndValueOf2[0],\n                value = _getEndTimeAndValueOf2[1];\n\n            return getExponentialRampValueAtTime(time, startTime, value, nextAutomationEvent);\n          }\n\n          if (nextAutomationEvent !== undefined && isLinearRampToValueAutomationEvent(nextAutomationEvent)) {\n            var _getEndTimeAndValueOf3 = getEndTimeAndValueOfPreviousAutomationEvent(this._automationEvents, index - 1, currentAutomationEvent, nextAutomationEvent, this._defaultValue),\n                _getEndTimeAndValueOf4 = _slicedToArray(_getEndTimeAndValueOf3, 2),\n                _startTime = _getEndTimeAndValueOf4[0],\n                _value = _getEndTimeAndValueOf4[1];\n\n            return getLinearRampValueAtTime(time, _startTime, _value, nextAutomationEvent);\n          }\n\n          return this._defaultValue;\n        }\n      }]);\n\n      return AutomationEventList;\n    }();\n\n    var createCancelAndHoldAutomationEvent = function createCancelAndHoldAutomationEvent(cancelTime) {\n      return {\n        cancelTime: cancelTime,\n        type: 'cancelAndHold'\n      };\n    };\n\n    var createCancelScheduledValuesAutomationEvent = function createCancelScheduledValuesAutomationEvent(cancelTime) {\n      return {\n        cancelTime: cancelTime,\n        type: 'cancelScheduledValues'\n      };\n    };\n\n    var createExponentialRampToValueAutomationEvent = function createExponentialRampToValueAutomationEvent(value, endTime) {\n      return {\n        endTime: endTime,\n        type: 'exponentialRampToValue',\n        value: value\n      };\n    };\n\n    var createLinearRampToValueAutomationEvent = function createLinearRampToValueAutomationEvent(value, endTime) {\n      return {\n        endTime: endTime,\n        type: 'linearRampToValue',\n        value: value\n      };\n    };\n\n    var createSetTargetAutomationEvent = function createSetTargetAutomationEvent(target, startTime, timeConstant) {\n      return {\n        startTime: startTime,\n        target: target,\n        timeConstant: timeConstant,\n        type: 'setTarget'\n      };\n    };\n\n    exports.AutomationEventList = AutomationEventList;\n    exports.createCancelAndHoldAutomationEvent = createCancelAndHoldAutomationEvent;\n    exports.createCancelScheduledValuesAutomationEvent = createCancelScheduledValuesAutomationEvent;\n    exports.createExponentialRampToValueAutomationEvent = createExponentialRampToValueAutomationEvent;\n    exports.createLinearRampToValueAutomationEvent = createLinearRampToValueAutomationEvent;\n    exports.createSetTargetAutomationEvent = createSetTargetAutomationEvent;\n    exports.createSetValueAutomationEvent = createSetValueAutomationEvent;\n    exports.createSetValueCurveAutomationEvent = createSetValueCurveAutomationEvent;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n","import { CYCLE_COUNTERS } from '../globals';\nexport const isPartOfACycle = (audioNode) => {\n    return CYCLE_COUNTERS.has(audioNode);\n};\n//# sourceMappingURL=/build/es2019/helpers/is-part-of-a-cycle.js.map","import { EVENT_LISTENERS } from '../globals';\nimport { getValueForKey } from './get-value-for-key';\nexport const getEventListenersOfAudioNode = (audioNode) => {\n    return getValueForKey(EVENT_LISTENERS, audioNode);\n};\n//# sourceMappingURL=/build/es2019/helpers/get-event-listeners-of-audio-node.js.map","import { ACTIVE_AUDIO_NODE_STORE } from '../globals';\nimport { getEventListenersOfAudioNode } from './get-event-listeners-of-audio-node';\nexport const setInternalStateToPassive = (audioNode) => {\n    if (!ACTIVE_AUDIO_NODE_STORE.has(audioNode)) {\n        throw new Error('The AudioNode is not stored.');\n    }\n    ACTIVE_AUDIO_NODE_STORE.delete(audioNode);\n    getEventListenersOfAudioNode(audioNode)\n        .forEach((eventListener) => eventListener(false));\n};\n//# sourceMappingURL=/build/es2019/helpers/set-internal-state-to-passive.js.map","import { isAudioNode } from './audio-node';\nexport const isAudioNodeOutputConnection = (outputConnection) => {\n    return isAudioNode(outputConnection[0]);\n};\n//# sourceMappingURL=/build/es2019/guards/audio-node-output-connection.js.map","import { ACTIVE_AUDIO_NODE_STORE } from '../globals';\nexport const isActiveAudioNode = (audioNode) => ACTIVE_AUDIO_NODE_STORE.has(audioNode);\n//# sourceMappingURL=/build/es2019/helpers/is-active-audio-node.js.map","export const isAudioNode = (audioNodeOrAudioParam) => {\n    return 'context' in audioNodeOrAudioParam;\n};\n//# sourceMappingURL=/build/es2019/guards/audio-node.js.map","export const isNativeAudioNode = (nativeAudioNodeOrAudioParam) => {\n    return 'context' in nativeAudioNodeOrAudioParam;\n};\n//# sourceMappingURL=/build/es2019/guards/native-audio-node.js.map","import { AUDIO_PARAM_CONNECTIONS_STORE } from '../globals';\nimport { getValueForKey } from './get-value-for-key';\nexport const getAudioParamConnections = (audioParam) => {\n    return getValueForKey(AUDIO_PARAM_CONNECTIONS_STORE, audioParam);\n};\n//# sourceMappingURL=/build/es2019/helpers/get-audio-param-connections.js.map","import { AUDIO_PARAM_STORE } from '../globals';\nimport { getValueForKey } from './get-value-for-key';\nexport const getNativeAudioParam = (audioParam) => {\n    return getValueForKey(AUDIO_PARAM_STORE, audioParam);\n};\n//# sourceMappingURL=/build/es2019/helpers/get-native-audio-param.js.map","export const wrapEventListener = (target, eventListener) => {\n    return (event) => {\n        const descriptor = { value: target };\n        Object.defineProperties(event, {\n            currentTarget: descriptor,\n            target: descriptor\n        });\n        if (typeof eventListener === 'function') {\n            return eventListener.call(target, event);\n        }\n        return eventListener.handleEvent.call(target, event);\n    };\n};\n//# sourceMappingURL=/build/es2019/helpers/wrap-event-listener.js.map","import { createIndexSizeError } from '../factories/index-size-error';\nexport const wrapAudioBufferGetChannelDataMethod = (audioBuffer) => {\n    audioBuffer.getChannelData = ((getChannelData) => {\n        return (channel) => {\n            try {\n                return getChannelData.call(audioBuffer, channel);\n            }\n            catch (err) {\n                if (err.code === 12) {\n                    throw createIndexSizeError();\n                }\n                throw err;\n            }\n        };\n    })(audioBuffer.getChannelData);\n};\n//# sourceMappingURL=/build/es2019/helpers/wrap-audio-buffer-get-channel-data-method.js.map","export const wrapAudioScheduledSourceNodeStartMethodNegativeParameters = (nativeAudioScheduledSourceNode) => {\n    nativeAudioScheduledSourceNode.start = ((start) => {\n        return (when = 0, offset = 0, duration) => {\n            if ((typeof duration === 'number' && duration < 0) || offset < 0 || when < 0) {\n                throw new RangeError(\"The parameters can't be negative.\");\n            }\n            // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.\n            start.call(nativeAudioScheduledSourceNode, when, offset, duration);\n        };\n    })(nativeAudioScheduledSourceNode.start);\n};\n//# sourceMappingURL=/build/es2019/helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters.js.map","export const wrapAudioScheduledSourceNodeStopMethodNegativeParameters = (nativeAudioScheduledSourceNode) => {\n    nativeAudioScheduledSourceNode.stop = ((stop) => {\n        return (when = 0) => {\n            if (when < 0) {\n                throw new RangeError(\"The parameter can't be negative.\");\n            }\n            stop.call(nativeAudioScheduledSourceNode, when);\n        };\n    })(nativeAudioScheduledSourceNode.stop);\n};\n//# sourceMappingURL=/build/es2019/helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters.js.map","export const testAudioBufferCopyChannelMethodsOutOfBoundsSupport = (nativeAudioBuffer) => {\n    try {\n        nativeAudioBuffer.copyToChannel(new Float32Array(1), 0, -1);\n    }\n    catch {\n        return false;\n    }\n    return true;\n};\n//# sourceMappingURL=/build/es2019/helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support.js.map","import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nexport const connectNativeAudioNodeToNativeAudioNode = (nativeSourceAudioNode, nativeDestinationAudioNode, output, input) => {\n    if (isNativeAudioNodeFaker(nativeDestinationAudioNode)) {\n        const fakeNativeDestinationAudioNode = nativeDestinationAudioNode.inputs[input];\n        nativeSourceAudioNode.connect(fakeNativeDestinationAudioNode, output, 0);\n        return [fakeNativeDestinationAudioNode, output, 0];\n    }\n    nativeSourceAudioNode.connect(nativeDestinationAudioNode, output, input);\n    return [nativeDestinationAudioNode, output, input];\n};\n//# sourceMappingURL=/build/es2019/helpers/connect-native-audio-node-to-native-audio-node.js.map","import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nexport const disconnectNativeAudioNodeFromNativeAudioNode = (nativeSourceAudioNode, nativeDestinationAudioNode, output, input) => {\n    if (isNativeAudioNodeFaker(nativeDestinationAudioNode)) {\n        nativeSourceAudioNode.disconnect(nativeDestinationAudioNode.inputs[input], output, 0);\n    }\n    else {\n        nativeSourceAudioNode.disconnect(nativeDestinationAudioNode, output, input);\n    }\n};\n//# sourceMappingURL=/build/es2019/helpers/disconnect-native-audio-node-from-native-audio-node.js.map","export function copyFromChannel(audioBuffer, \n// @todo There is currently no way to define something like { [ key: number | string ]: Float32Array }\nparent, key, channelNumber, bufferOffset) {\n    if (typeof audioBuffer.copyFromChannel === 'function') {\n        // The byteLength will be 0 when the ArrayBuffer was transferred.\n        if (parent[key].byteLength === 0) {\n            parent[key] = new Float32Array(128);\n        }\n        audioBuffer.copyFromChannel(parent[key], channelNumber, bufferOffset);\n        // Bug #5: Safari does not support copyFromChannel().\n    }\n    else {\n        const channelData = audioBuffer.getChannelData(channelNumber);\n        // The byteLength will be 0 when the ArrayBuffer was transferred.\n        if (parent[key].byteLength === 0) {\n            parent[key] = channelData.slice(bufferOffset, bufferOffset + 128);\n        }\n        else {\n            const slicedInput = new Float32Array(channelData.buffer, bufferOffset * Float32Array.BYTES_PER_ELEMENT, 128);\n            parent[key].set(slicedInput);\n        }\n    }\n}\n//# sourceMappingURL=/build/es2019/helpers/copy-from-channel.js.map","export const createNestedArrays = (x, y) => {\n    const arrays = [];\n    for (let i = 0; i < x; i += 1) {\n        const array = [];\n        const length = (typeof y === 'number') ? y : y[i];\n        for (let j = 0; j < length; j += 1) {\n            array.push(new Float32Array(128));\n        }\n        arrays.push(array);\n    }\n    return arrays;\n};\n//# sourceMappingURL=/build/es2019/helpers/create-nested-arrays.js.map","export const createInvalidAccessError = () => {\n    try {\n        return new DOMException('', 'InvalidAccessError');\n    }\n    catch (err) {\n        // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.\n        err.code = 15;\n        err.name = 'InvalidAccessError';\n        return err;\n    }\n};\n//# sourceMappingURL=/build/es2019/factories/invalid-access-error.js.map","export const overwriteAccessors = (object, property, createGetter, createSetter) => {\n    let prototype = Object.getPrototypeOf(object);\n    while (!prototype.hasOwnProperty(property)) {\n        prototype = Object.getPrototypeOf(prototype);\n    }\n    const { get, set } = Object.getOwnPropertyDescriptor(prototype, property);\n    Object.defineProperty(object, property, { get: createGetter(get), set: createSetter(set) });\n};\n//# sourceMappingURL=/build/es2019/helpers/overwrite-accessors.js.map","export const isValidLatencyHint = (latencyHint) => {\n    return latencyHint === undefined ||\n        typeof latencyHint === 'number' ||\n        (typeof latencyHint === 'string' && (latencyHint === 'balanced' || latencyHint === 'interactive' || latencyHint === 'playback'));\n};\n//# sourceMappingURL=/build/es2019/helpers/is-valid-latency-hint.js.map","export class ReadOnlyMap {\n    constructor(parameters) {\n        this._map = new Map(parameters);\n    }\n    get size() {\n        return this._map.size;\n    }\n    entries() {\n        return this._map.entries();\n    }\n    forEach(callback, thisArg = null) {\n        return this._map.forEach((value, key) => callback.call(thisArg, value, key, this));\n    }\n    get(name) {\n        return this._map.get(name);\n    }\n    has(name) {\n        return this._map.has(name);\n    }\n    keys() {\n        return this._map.keys();\n    }\n    values() {\n        return this._map.values();\n    }\n}\n//# sourceMappingURL=/build/es2019/read-only-map.js.map","export const copyToChannel = (audioBuffer, parent, key, channelNumber, bufferOffset) => {\n    if (typeof audioBuffer.copyToChannel === 'function') {\n        // The byteLength will be 0 when the ArrayBuffer was transferred.\n        if (parent[key].byteLength !== 0) {\n            audioBuffer.copyToChannel(parent[key], channelNumber, bufferOffset);\n        }\n        // Bug #5: Safari does not support copyToChannel().\n    }\n    else {\n        // The byteLength will be 0 when the ArrayBuffer was transferred.\n        if (parent[key].byteLength !== 0) {\n            audioBuffer\n                .getChannelData(channelNumber)\n                .set(parent[key], bufferOffset);\n        }\n    }\n};\n//# sourceMappingURL=/build/es2019/helpers/copy-to-channel.js.map","// This implementation as shamelessly inspired by source code of\n// tslint:disable-next-line:max-line-length\n// {@link https://chromium.googlesource.com/chromium/src.git/+/master/third_party/WebKit/Source/platform/audio/IIRFilter.cpp|Chromium's IIRFilter}.\nexport const filterBuffer = (feedback, feedbackLength, feedforward, feedforwardLength, minLength, xBuffer, yBuffer, bufferIndex, bufferLength, input, output) => {\n    const inputLength = input.length;\n    let i = bufferIndex;\n    for (let j = 0; j < inputLength; j += 1) {\n        let y = feedforward[0] * input[j];\n        for (let k = 1; k < minLength; k += 1) {\n            const x = (i - k) & (bufferLength - 1); // tslint:disable-line:no-bitwise\n            y += feedforward[k] * xBuffer[x];\n            y -= feedback[k] * yBuffer[x];\n        }\n        for (let k = minLength; k < feedforwardLength; k += 1) {\n            y += feedforward[k] * xBuffer[(i - k) & (bufferLength - 1)]; // tslint:disable-line:no-bitwise\n        }\n        for (let k = minLength; k < feedbackLength; k += 1) {\n            y -= feedback[k] * yBuffer[(i - k) & (bufferLength - 1)]; // tslint:disable-line:no-bitwise\n        }\n        xBuffer[i] = input[j];\n        yBuffer[i] = y;\n        i = (i + 1) & (bufferLength - 1); // tslint:disable-line:no-bitwise\n        output[j] = y;\n    }\n    return i;\n};\n//# sourceMappingURL=/build/es2019/helpers/filter-buffer.js.map","export const computeBufferSize = (baseLatency, sampleRate) => {\n    if (baseLatency === null) {\n        return 512;\n    }\n    return Math.max(512, Math.min(16384, Math.pow(2, Math.round(Math.log2(baseLatency * sampleRate)))));\n};\n//# sourceMappingURL=/build/es2019/helpers/compute-buffer-size.js.map","export const createUnknownError = () => {\n    try {\n        return new DOMException('', 'UnknownError');\n    }\n    catch (err) {\n        // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.\n        err.name = 'UnknownError';\n        return err;\n    }\n};\n//# sourceMappingURL=/build/es2019/factories/unknown-error.js.map","export const isDCCurve = (curve) => {\n    if (curve === null) {\n        return false;\n    }\n    const length = curve.length;\n    if (length % 2 !== 0) {\n        return (curve[Math.floor(length / 2)] !== 0);\n    }\n    return (curve[(length / 2) - 1] + curve[length / 2] !== 0);\n};\n//# sourceMappingURL=/build/es2019/helpers/is-dc-curve.js.map","export * from './analyser-node';\nexport * from './analyser-options';\nexport * from './audio-buffer';\nexport * from './audio-buffer-options';\nexport * from './audio-buffer-source-node';\nexport * from './audio-buffer-source-node-renderer';\nexport * from './audio-buffer-source-options';\nexport * from './audio-context';\nexport * from './audio-context-options';\nexport * from './audio-destination-node';\nexport * from './audio-listener';\nexport * from './audio-node';\nexport * from './audio-node-options';\nexport * from './audio-node-renderer';\nexport * from './audio-param';\nexport * from './audio-param-descriptor';\nexport * from './audio-param-renderer';\nexport * from './audio-scheduled-source-node';\nexport * from './audio-scheduled-source-node-event-map';\nexport * from './audio-worklet';\nexport * from './audio-worklet-node';\nexport * from './audio-worklet-node-event-map';\nexport * from './audio-worklet-node-options';\nexport * from './audio-worklet-processor';\nexport * from './audio-worklet-processor-constructor';\nexport * from './automation';\nexport * from './base-audio-context';\nexport * from './biquad-filter-node';\nexport * from './biquad-filter-options';\nexport * from './channel-merger-options';\nexport * from './channel-splitter-options';\nexport * from './common-audio-context';\nexport * from './common-offline-audio-context';\nexport * from './constant-source-node';\nexport * from './constant-source-node-renderer';\nexport * from './constant-source-options';\nexport * from './convolver-node';\nexport * from './convolver-options';\nexport * from './delay-node';\nexport * from './delay-options';\nexport * from './dynamics-compressor-node';\nexport * from './dynamics-compressor-options';\nexport * from './gain-node';\nexport * from './gain-options';\nexport * from './iir-filter-node';\nexport * from './iir-filter-options';\nexport * from './media-element-audio-source-node';\nexport * from './media-element-audio-source-options';\nexport * from './media-stream-audio-destination-node';\nexport * from './media-stream-audio-source-node';\nexport * from './media-stream-audio-source-options';\nexport * from './media-stream-track-audio-source-node';\nexport * from './media-stream-track-audio-source-options';\nexport * from './minimal-audio-context';\nexport * from './minimal-base-audio-context';\nexport * from './minimal-base-audio-context-event-map';\nexport * from './minimal-offline-audio-context';\nexport * from './native-audio-node-faker';\nexport * from './native-audio-worklet-node-faker';\nexport * from './native-constant-source-node-faker';\nexport * from './native-convolver-node-faker';\nexport * from './native-iir-filter-node-faker';\nexport * from './native-panner-node-faker';\nexport * from './native-stereo-panner-node-faker';\nexport * from './native-wave-shaper-node-faker';\nexport * from './offline-audio-completion-event';\nexport * from './offline-audio-context';\nexport * from './offline-audio-context-constructor';\nexport * from './offline-audio-context-options';\nexport * from './oscillator-node';\nexport * from './oscillator-node-renderer';\nexport * from './oscillator-options';\nexport * from './panner-node';\nexport * from './panner-options';\nexport * from './periodic-wave';\nexport * from './periodic-wave-constraints';\nexport * from './periodic-wave-options';\nexport * from './read-only-map';\nexport * from './stereo-panner-node';\nexport * from './stereo-panner-options';\nexport * from './wave-shaper-node';\nexport * from './wave-shaper-options';\nexport * from './worklet-options';\n//# sourceMappingURL=/build/es2019/interfaces/index.js.map","export * from './abort-error-factory';\nexport * from './active-input-connection';\nexport * from './add-audio-node-connections-factory';\nexport * from './add-audio-node-connections-function';\nexport * from './add-audio-param-connections-factory';\nexport * from './add-audio-param-connections-function';\nexport * from './add-audio-worklet-module-factory';\nexport * from './add-audio-worklet-module-function';\nexport * from './add-unrendered-audio-worklet-node-factory';\nexport * from './add-unrendered-audio-worklet-node-function';\nexport * from './analyser-node-constructor';\nexport * from './analyser-node-constructor-factory';\nexport * from './analyser-node-renderer-factory';\nexport * from './analyser-node-renderer-factory-factory';\nexport * from './any-audio-buffer';\nexport * from './any-context';\nexport * from './audio-buffer-constructor';\nexport * from './audio-buffer-constructor-factory';\nexport * from './audio-buffer-source-node-constructor';\nexport * from './audio-buffer-source-node-constructor-factory';\nexport * from './audio-buffer-source-node-renderer';\nexport * from './audio-buffer-source-node-renderer-factory';\nexport * from './audio-buffer-source-node-renderer-factory-factory';\nexport * from './audio-buffer-store';\nexport * from './audio-context-constructor';\nexport * from './audio-context-constructor-factory';\nexport * from './audio-context-latency-category';\nexport * from './audio-context-state';\nexport * from './audio-destination-node-constructor';\nexport * from './audio-destination-node-constructor-factory';\nexport * from './audio-destination-node-renderer-factory';\nexport * from './audio-listener-factory';\nexport * from './audio-listener-factory-factory';\nexport * from './audio-node-connections';\nexport * from './audio-node-connections-store';\nexport * from './audio-node-constructor';\nexport * from './audio-node-constructor-factory';\nexport * from './audio-node-output-connection';\nexport * from './audio-node-renderer';\nexport * from './audio-node-store';\nexport * from './audio-param-audio-node-store';\nexport * from './audio-param-connections';\nexport * from './audio-param-connections-store';\nexport * from './audio-param-factory';\nexport * from './audio-param-factory-factory';\nexport * from './audio-param-map';\nexport * from './audio-param-output-connection';\nexport * from './audio-param-renderer-factory';\nexport * from './audio-param-store';\nexport * from './audio-worklet-node-constructor';\nexport * from './audio-worklet-node-constructor-factory';\nexport * from './audio-worklet-node-renderer-factory';\nexport * from './audio-worklet-node-renderer-factory-factory';\nexport * from './auxiliary-gain-node-store';\nexport * from './base-audio-context-constructor';\nexport * from './base-audio-context-constructor-factory';\nexport * from './biquad-filter-node-constructor';\nexport * from './biquad-filter-node-constructor-factory';\nexport * from './biquad-filter-node-renderer-factory';\nexport * from './biquad-filter-node-renderer-factory-factory';\nexport * from './biquad-filter-type';\nexport * from './channel-count-mode';\nexport * from './channel-interpretation';\nexport * from './channel-merger-node-constructor';\nexport * from './channel-merger-node-constructor-factory';\nexport * from './channel-merger-node-renderer-factory';\nexport * from './channel-merger-node-renderer-factory-factory';\nexport * from './channel-splitter-node-constructor';\nexport * from './channel-splitter-node-constructor-factory';\nexport * from './channel-splitter-node-renderer-factory';\nexport * from './channel-splitter-node-renderer-factory-factory';\nexport * from './cache-test-result-factory';\nexport * from './cache-test-result-function';\nexport * from './connect-audio-param-factory';\nexport * from './connect-audio-param-function';\nexport * from './connect-multiple-outputs-factory';\nexport * from './connect-multiple-outputs-function';\nexport * from './connect-native-audio-node-to-native-audio-node-function';\nexport * from './connected-native-audio-buffer-source-node-factory';\nexport * from './connected-native-audio-buffer-source-node-factory-factory';\nexport * from './constant-source-node-constructor';\nexport * from './constant-source-node-constructor-factory';\nexport * from './constant-source-node-renderer';\nexport * from './constant-source-node-renderer-factory';\nexport * from './constant-source-node-renderer-factory-factory';\nexport * from './constructor';\nexport * from './context';\nexport * from './context-store';\nexport * from './convert-number-to-unsigned-long-factory';\nexport * from './convert-number-to-unsigned-long-function';\nexport * from './convolver-node-constructor';\nexport * from './convolver-node-constructor-factory';\nexport * from './convolver-node-renderer-factory';\nexport * from './convolver-node-renderer-factory-factory';\nexport * from './create-native-offline-audio-context-factory';\nexport * from './create-native-offline-audio-context-function';\nexport * from './cycle-counters';\nexport * from './data-clone-error-factory';\nexport * from './decode-audio-data-factory';\nexport * from './decode-audio-data-function';\nexport * from './decode-error-callback';\nexport * from './decode-success-callback';\nexport * from './decrement-cycle-counter-factory';\nexport * from './decrement-cycle-counter-function';\nexport * from './delay-node-constructor';\nexport * from './delay-node-constructor-factory';\nexport * from './delay-node-renderer-factory';\nexport * from './delay-node-renderer-factory-factory';\nexport * from './delete-unrendered-audio-worklet-node-factory';\nexport * from './delete-unrendered-audio-worklet-node-function';\nexport * from './detect-cycles-factory';\nexport * from './detect-cycles-function';\nexport * from './disconnect-multiple-outputs-factory';\nexport * from './disconnect-multiple-outputs-function';\nexport * from './disconnect-native-audio-node-from-native-audio-node-function';\nexport * from './distance-model-type';\nexport * from './dynamics-compressor-node-constructor';\nexport * from './dynamics-compressor-node-constructor-factory';\nexport * from './dynamics-compressor-node-renderer-factory';\nexport * from './dynamics-compressor-node-renderer-factory-factory';\nexport * from './encoding-error-factory';\nexport * from './error-event-handler';\nexport * from './evaluate-audio-worklet-global-scope-function';\nexport * from './evaluate-source-factory';\nexport * from './evaluate-source-function';\nexport * from './event-handler';\nexport * from './event-target-constructor';\nexport * from './event-target-constructor-factory';\nexport * from './expose-current-frame-and-current-time-factory';\nexport * from './expose-current-frame-and-current-time-function';\nexport * from './fetch-source-factory';\nexport * from './fetch-source-function';\nexport * from './gain-node-constructor';\nexport * from './gain-node-constructor-factory';\nexport * from './gain-node-renderer-factory';\nexport * from './gain-node-renderer-factory-factory';\nexport * from './get-audio-node-connections-function';\nexport * from './get-audio-node-renderer-factory';\nexport * from './get-audio-node-renderer-function';\nexport * from './get-audio-param-connections-function';\nexport * from './get-audio-param-renderer-factory';\nexport * from './get-audio-param-renderer-function';\nexport * from './get-backup-native-context-factory';\nexport * from './get-backup-native-context-function';\nexport * from './get-native-audio-node-function';\nexport * from './get-native-audio-param-function';\nexport * from './get-native-context-function';\nexport * from './get-native-context-factory';\nexport * from './get-unrendered-audio-worklet-nodes-factory';\nexport * from './get-unrendered-audio-worklet-nodes-function';\nexport * from './get-value-for-key-function';\nexport * from './iir-filter-node-constructor';\nexport * from './iir-filter-node-constructor-factory';\nexport * from './iir-filter-node-renderer-factory';\nexport * from './iir-filter-node-renderer-factory-factory';\nexport * from './increment-cycle-counter-factory';\nexport * from './increment-cycle-counter-factory-factory';\nexport * from './increment-cycle-counter-function';\nexport * from './index-size-error-factory';\nexport * from './insert-element-in-set-function';\nexport * from './internal-state-event-listener';\nexport * from './invalid-access-error-factory';\nexport * from './invalid-state-error-factory';\nexport * from './is-active-audio-node-function';\nexport * from './is-any-audio-context-factory';\nexport * from './is-any-audio-context-function';\nexport * from './is-any-audio-node-factory';\nexport * from './is-any-audio-node-function';\nexport * from './is-any-audio-param-factory';\nexport * from './is-any-audio-param-function';\nexport * from './is-any-offline-audio-context-factory';\nexport * from './is-any-offline-audio-context-function';\nexport * from './is-dc-curve-function';\nexport * from './is-native-audio-context-factory';\nexport * from './is-native-audio-context-function';\nexport * from './is-native-audio-node-factory';\nexport * from './is-native-audio-node-function';\nexport * from './is-native-audio-param-factory';\nexport * from './is-native-audio-param-function';\nexport * from './is-native-context-factory';\nexport * from './is-native-context-function';\nexport * from './is-native-offline-audio-context-factory';\nexport * from './is-native-offline-audio-context-function';\nexport * from './is-part-of-a-cycle-function';\nexport * from './is-secure-context-factory';\nexport * from './is-supported-promise-factory';\nexport * from './media-element-audio-source-node-constructor';\nexport * from './media-element-audio-source-node-constructor-factory';\nexport * from './media-stream-audio-destination-node-constructor';\nexport * from './media-stream-audio-destination-node-constructor-factory';\nexport * from './media-stream-audio-source-node-constructor';\nexport * from './media-stream-audio-source-node-constructor-factory';\nexport * from './media-stream-track-audio-source-node-constructor';\nexport * from './media-stream-track-audio-source-node-constructor-factory';\nexport * from './minimal-audio-context-constructor';\nexport * from './minimal-audio-context-constructor-factory';\nexport * from './minimal-base-audio-context-constructor';\nexport * from './minimal-base-audio-context-constructor-factory';\nexport * from './minimal-offline-audio-context-constructor';\nexport * from './minimal-offline-audio-context-constructor-factory';\nexport * from './monitor-connections-factory';\nexport * from './monitor-connections-function';\nexport * from './native-analyser-node';\nexport * from './native-analyser-node-factory';\nexport * from './native-analyser-node-factory-factory';\nexport * from './native-audio-buffer';\nexport * from './native-audio-buffer-constructor';\nexport * from './native-audio-buffer-constructor-factory';\nexport * from './native-audio-buffer-source-node';\nexport * from './native-audio-buffer-source-node-factory';\nexport * from './native-audio-buffer-source-node-factory-factory';\nexport * from './native-audio-context';\nexport * from './native-audio-context-constructor';\nexport * from './native-audio-context-constructor-factory';\nexport * from './native-audio-destination-node';\nexport * from './native-audio-destination-node-factory';\nexport * from './native-audio-destination-node-factory-factory';\nexport * from './native-audio-listener';\nexport * from './native-audio-node';\nexport * from './native-audio-node-factory';\nexport * from './native-audio-node-factory-factory';\nexport * from './native-audio-param';\nexport * from './native-audio-param-map';\nexport * from './native-audio-worklet';\nexport * from './native-audio-worklet-node';\nexport * from './native-audio-worklet-node-constructor';\nexport * from './native-audio-worklet-node-constructor-factory';\nexport * from './native-audio-worklet-node-factory';\nexport * from './native-audio-worklet-node-factory-factory';\nexport * from './native-audio-worklet-node-faker-factory';\nexport * from './native-audio-worklet-node-faker-factory-factory';\nexport * from './native-audio-worklet-node-options';\nexport * from './native-biquad-filter-node';\nexport * from './native-biquad-filter-node-factory';\nexport * from './native-biquad-filter-node-factory-factory';\nexport * from './native-channel-merger-node';\nexport * from './native-channel-merger-node-factory';\nexport * from './native-channel-merger-node-factory-factory';\nexport * from './native-channel-splitter-node';\nexport * from './native-channel-splitter-node-factory';\nexport * from './native-channel-splitter-node-factory-factory';\nexport * from './native-constant-source-node';\nexport * from './native-constant-source-node-factory';\nexport * from './native-constant-source-node-factory-factory';\nexport * from './native-constant-source-node-faker-factory';\nexport * from './native-constant-source-node-faker-factory-factory';\nexport * from './native-context';\nexport * from './native-convolver-node';\nexport * from './native-convolver-node-factory';\nexport * from './native-convolver-node-factory-factory';\nexport * from './native-convolver-node-faker-factory';\nexport * from './native-convolver-node-faker-factory-factory';\nexport * from './native-delay-node-factory';\nexport * from './native-delay-node-factory-factory';\nexport * from './native-delay-node';\nexport * from './native-dynamics-compressor-node';\nexport * from './native-dynamics-compressor-node-factory';\nexport * from './native-dynamics-compressor-node-factory-factory';\nexport * from './native-event-target';\nexport * from './native-gain-node';\nexport * from './native-gain-node-factory';\nexport * from './native-gain-node-factory-factory';\nexport * from './native-iir-filter-node';\nexport * from './native-iir-filter-node-factory';\nexport * from './native-iir-filter-node-factory-factory';\nexport * from './native-iir-filter-node-faker-factory';\nexport * from './native-iir-filter-node-faker-factory-factory';\nexport * from './native-media-element-audio-source-node';\nexport * from './native-media-element-audio-source-node-factory';\nexport * from './native-media-element-audio-source-node-factory-factory';\nexport * from './native-media-stream-audio-destination-node';\nexport * from './native-media-stream-audio-destination-node-factory';\nexport * from './native-media-stream-audio-destination-node-factory-factory';\nexport * from './native-media-stream-audio-source-node';\nexport * from './native-media-stream-audio-source-node-factory';\nexport * from './native-media-stream-audio-source-node-factory-factory';\nexport * from './native-media-stream-track-audio-source-node';\nexport * from './native-media-stream-track-audio-source-node-factory';\nexport * from './native-media-stream-track-audio-source-node-factory-factory';\nexport * from './native-offline-audio-context';\nexport * from './native-offline-audio-context-constructor';\nexport * from './native-offline-audio-context-constructor-factory';\nexport * from './native-oscillator-node';\nexport * from './native-oscillator-node-factory';\nexport * from './native-oscillator-node-factory-factory';\nexport * from './native-panner-node';\nexport * from './native-panner-node-factory';\nexport * from './native-panner-node-factory-factory';\nexport * from './native-panner-node-faker-factory';\nexport * from './native-panner-node-faker-factory-factory';\nexport * from './native-periodic-wave';\nexport * from './native-periodic-wave-factory';\nexport * from './native-periodic-wave-factory-factory';\nexport * from './native-script-processor-node';\nexport * from './native-script-processor-node-factory';\nexport * from './native-script-processor-node-factory-factory';\nexport * from './native-stereo-panner-node';\nexport * from './native-stereo-panner-node-factory';\nexport * from './native-stereo-panner-node-factory-factory';\nexport * from './native-stereo-panner-node-faker-factory';\nexport * from './native-stereo-panner-node-faker-factory-factory';\nexport * from './native-wave-shaper-node';\nexport * from './native-wave-shaper-node-factory';\nexport * from './native-wave-shaper-node-factory-factory';\nexport * from './native-wave-shaper-node-faker-factory';\nexport * from './native-wave-shaper-node-faker-factory-factory';\nexport * from './not-supported-error-factory';\nexport * from './offline-audio-context-constructor-factory';\nexport * from './oscillator-node-constructor';\nexport * from './oscillator-node-constructor-factory';\nexport * from './oscillator-node-renderer';\nexport * from './oscillator-node-renderer-factory';\nexport * from './oscillator-node-renderer-factory-factory';\nexport * from './oscillator-type';\nexport * from './output-connection';\nexport * from './over-sample-type';\nexport * from './overwrite-accessors-function';\nexport * from './panner-node-constructor';\nexport * from './panner-node-constructor-factory';\nexport * from './panner-node-renderer-factory';\nexport * from './panner-node-renderer-factory-factory';\nexport * from './panning-model-type';\nexport * from './passive-audio-node-input-connection';\nexport * from './passive-audio-param-input-connection';\nexport * from './periodic-wave-constructor';\nexport * from './periodic-wave-constructor-factory';\nexport * from './render-automation-factory';\nexport * from './render-automation-function';\nexport * from './render-inputs-of-audio-node-factory';\nexport * from './render-inputs-of-audio-node-function';\nexport * from './render-inputs-of-audio-param-factory';\nexport * from './render-inputs-of-audio-param-function';\nexport * from './render-native-offline-audio-context-factory';\nexport * from './render-native-offline-audio-context-function';\nexport * from './start-rendering-factory';\nexport * from './start-rendering-function';\nexport * from './stereo-panner-node-constructor';\nexport * from './stereo-panner-node-constructor-factory';\nexport * from './stereo-panner-node-renderer-factory-factory';\nexport * from './stereo-panner-node-renderer-factory';\nexport * from './test-audio-buffer-copy-channel-methods-subarray-support-factory';\nexport * from './test-audio-buffer-constructor-support-factory';\nexport * from './test-audio-buffer-source-node-start-method-consecutive-calls-support-factory';\nexport * from './test-audio-buffer-source-node-start-method-duration-parameter-support-factory';\nexport * from './test-audio-buffer-source-node-start-method-offset-clamping-support-factory';\nexport * from './test-audio-buffer-source-node-stop-method-nullified-buffer-support-factory';\nexport * from './test-audio-context-close-method-support-factory';\nexport * from './test-audio-context-decode-audio-data-method-type-error-support-factory';\nexport * from './test-audio-context-options-support-factory';\nexport * from './test-audio-node-connect-method-support-factory';\nexport * from './test-audio-scheduled-source-node-start-method-consecutive-calls-support-factory';\nexport * from './test-audio-scheduled-source-node-stop-method-consecutive-calls-support-factory';\nexport * from './test-audio-scheduled-source-node-stop-method-negative-parameters-support-factory';\nexport * from './test-audio-worklet-processor-no-outputs-support-factory';\nexport * from './test-channel-merger-node-channel-count-support-factory';\nexport * from './test-constant-source-node-accurate-scheduling-support-factory';\nexport * from './test-convolver-node-buffer-reassignability-support-factory';\nexport * from './test-is-secure-context-support-factory';\nexport * from './test-media-stream-audio-source-node-media-stream-without-audio-track-support';\nexport * from './test-offline-audio-context-current-time-support-factory';\nexport * from './test-stereo-panner-node-default-value-support-factory';\nexport * from './typed-array';\nexport * from './unknown-error-factory';\nexport * from './unrendered-audio-worklet-node-store';\nexport * from './unrendered-audio-worklet-nodes';\nexport * from './wave-shaper-node-constructor';\nexport * from './wave-shaper-node-constructor-factory';\nexport * from './wave-shaper-node-renderer-factory-factory';\nexport * from './wave-shaper-node-renderer-factory';\nexport * from './window-factory';\nexport * from './wrap-audio-buffer-copy-channel-methods-factory';\nexport * from './wrap-audio-buffer-copy-channel-methods-function';\nexport * from './wrap-audio-buffer-copy-channel-methods-out-of-bounds-factory';\nexport * from './wrap-audio-buffer-copy-channel-methods-out-of-bounds-function';\nexport * from './wrap-audio-buffer-source-node-start-method-offset-clamping-function';\nexport * from './wrap-audio-buffer-source-node-stop-method-nullified-buffer-factory';\nexport * from './wrap-audio-buffer-source-node-stop-method-nullified-buffer-function';\nexport * from './wrap-audio-scheduled-source-node-stop-method-consecutive-calls-factory';\nexport * from './wrap-audio-scheduled-source-node-stop-method-consecutive-calls-function';\nexport * from './wrap-channel-merger-node-factory';\nexport * from './wrap-channel-merger-node-function';\nexport * from './wrap-event-listener-function';\n//# sourceMappingURL=/build/es2019/types/index.js.map","export const createAbortError = () => {\n    try {\n        return new DOMException('', 'AbortError');\n    }\n    catch (err) {\n        // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.\n        err.code = 20;\n        err.name = 'AbortError';\n        return err;\n    }\n};\n//# sourceMappingURL=/build/es2019/factories/abort-error.js.map","export const createAddAudioNodeConnections = (audioNodeConnectionsStore) => {\n    return (audioNode, audioNodeRenderer, nativeAudioNode) => {\n        const activeInputs = [];\n        for (let i = 0; i < nativeAudioNode.numberOfInputs; i += 1) {\n            activeInputs.push(new Set());\n        }\n        audioNodeConnectionsStore.set(audioNode, {\n            activeInputs,\n            outputs: new Set(),\n            passiveInputs: new WeakMap(),\n            renderer: audioNodeRenderer\n        });\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/add-audio-node-connections.js.map","export const createAddAudioParamConnections = (audioParamConnectionsStore) => {\n    return (audioParam, audioParamRenderer) => {\n        audioParamConnectionsStore.set(audioParam, { activeInputs: new Set(), passiveInputs: new WeakMap(), renderer: audioParamRenderer });\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/add-audio-param-connections.js.map","export const createAddUnrenderedAudioWorkletNode = (getUnrenderedAudioWorkletNodes) => {\n    return (nativeContext, audioWorkletNode) => {\n        getUnrenderedAudioWorkletNodes(nativeContext)\n            .add(audioWorkletNode);\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/add-unrendered-audio-worklet-node.js.map","const DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    fftSize: 2048,\n    maxDecibels: -30,\n    minDecibels: -100,\n    smoothingTimeConstant: 0.8\n};\nexport const createAnalyserNodeConstructor = (audionNodeConstructor, createAnalyserNodeRenderer, createIndexSizeError, createNativeAnalyserNode, getNativeContext, isNativeOfflineAudioContext) => {\n    return class AnalyserNode extends audionNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeAnalyserNode = createNativeAnalyserNode(nativeContext, mergedOptions);\n            const analyserNodeRenderer = ((isNativeOfflineAudioContext(nativeContext))\n                ? createAnalyserNodeRenderer()\n                : null);\n            super(context, false, nativeAnalyserNode, analyserNodeRenderer);\n            this._nativeAnalyserNode = nativeAnalyserNode;\n        }\n        get fftSize() {\n            return this._nativeAnalyserNode.fftSize;\n        }\n        set fftSize(value) {\n            this._nativeAnalyserNode.fftSize = value;\n        }\n        get frequencyBinCount() {\n            return this._nativeAnalyserNode.frequencyBinCount;\n        }\n        get maxDecibels() {\n            return this._nativeAnalyserNode.maxDecibels;\n        }\n        set maxDecibels(value) {\n            // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.\n            const maxDecibels = this._nativeAnalyserNode.maxDecibels;\n            this._nativeAnalyserNode.maxDecibels = value;\n            if (!(value > this._nativeAnalyserNode.minDecibels)) {\n                this._nativeAnalyserNode.maxDecibels = maxDecibels;\n                throw createIndexSizeError();\n            }\n        }\n        get minDecibels() {\n            return this._nativeAnalyserNode.minDecibels;\n        }\n        set minDecibels(value) {\n            // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.\n            const minDecibels = this._nativeAnalyserNode.minDecibels;\n            this._nativeAnalyserNode.minDecibels = value;\n            if (!(this._nativeAnalyserNode.maxDecibels > value)) {\n                this._nativeAnalyserNode.minDecibels = minDecibels;\n                throw createIndexSizeError();\n            }\n        }\n        get smoothingTimeConstant() {\n            return this._nativeAnalyserNode.smoothingTimeConstant;\n        }\n        set smoothingTimeConstant(value) {\n            this._nativeAnalyserNode.smoothingTimeConstant = value;\n        }\n        getByteFrequencyData(array) {\n            this._nativeAnalyserNode.getByteFrequencyData(array);\n        }\n        getByteTimeDomainData(array) {\n            this._nativeAnalyserNode.getByteTimeDomainData(array);\n        }\n        getFloatFrequencyData(array) {\n            this._nativeAnalyserNode.getFloatFrequencyData(array);\n        }\n        getFloatTimeDomainData(array) {\n            this._nativeAnalyserNode.getFloatTimeDomainData(array);\n        }\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/analyser-node-constructor.js.map","import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createAnalyserNodeRendererFactory = (createNativeAnalyserNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeAnalyserNodes = new WeakMap();\n        const createAnalyserNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeAnalyserNode = getNativeAudioNode(proxy);\n            // If the initially used nativeAnalyserNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeAnalyserNodeIsOwnedByContext = isOwnedByContext(nativeAnalyserNode, nativeOfflineAudioContext);\n            if (!nativeAnalyserNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeAnalyserNode.channelCount,\n                    channelCountMode: nativeAnalyserNode.channelCountMode,\n                    channelInterpretation: nativeAnalyserNode.channelInterpretation,\n                    fftSize: nativeAnalyserNode.fftSize,\n                    maxDecibels: nativeAnalyserNode.maxDecibels,\n                    minDecibels: nativeAnalyserNode.minDecibels,\n                    smoothingTimeConstant: nativeAnalyserNode.smoothingTimeConstant\n                };\n                nativeAnalyserNode = createNativeAnalyserNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeAnalyserNodes.set(nativeOfflineAudioContext, nativeAnalyserNode);\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAnalyserNode, trace);\n            return nativeAnalyserNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeAnalyserNode = renderedNativeAnalyserNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeAnalyserNode !== undefined) {\n                    return Promise.resolve(renderedNativeAnalyserNode);\n                }\n                return createAnalyserNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/analyser-node-renderer-factory.js.map","import { testAudioBufferCopyChannelMethodsOutOfBoundsSupport } from '../helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support';\nimport { wrapAudioBufferGetChannelDataMethod } from '../helpers/wrap-audio-buffer-get-channel-data-method';\nconst DEFAULT_OPTIONS = {\n    numberOfChannels: 1\n};\nexport const createAudioBufferConstructor = (audioBufferStore, cacheTestResult, createNotSupportedError, nativeAudioBufferConstructor, nativeOfflineAudioContextConstructor, testNativeAudioBufferConstructorSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds) => {\n    let nativeOfflineAudioContext = null;\n    return class AudioBuffer {\n        constructor(options) {\n            if (nativeOfflineAudioContextConstructor === null) {\n                throw new Error('Missing the native OfflineAudioContext constructor.');\n            }\n            const { length, numberOfChannels, sampleRate } = { ...DEFAULT_OPTIONS, ...options };\n            if (nativeOfflineAudioContext === null) {\n                nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n            }\n            /*\n             * Bug #99: Firefox does not throw a NotSupportedError when the numberOfChannels is zero. But it only does it when using the\n             * factory function. But since Firefox also supports the constructor everything should be fine.\n             */\n            const audioBuffer = (nativeAudioBufferConstructor !== null &&\n                cacheTestResult(testNativeAudioBufferConstructorSupport, testNativeAudioBufferConstructorSupport)) ?\n                new nativeAudioBufferConstructor({ length, numberOfChannels, sampleRate }) :\n                nativeOfflineAudioContext.createBuffer(numberOfChannels, length, sampleRate);\n            // Bug #99: Safari does not throw an error when the numberOfChannels is zero.\n            if (audioBuffer.numberOfChannels === 0) {\n                throw createNotSupportedError();\n            }\n            // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n            // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.\n            if (typeof audioBuffer.copyFromChannel !== 'function') {\n                wrapAudioBufferCopyChannelMethods(audioBuffer);\n                wrapAudioBufferGetChannelDataMethod(audioBuffer);\n                // Bug #157: Only Chrome & Opera do allow the bufferOffset to be out-of-bounds.\n            }\n            else if (!cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, () => testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer))) {\n                wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n            }\n            audioBufferStore.add(audioBuffer);\n            /*\n             * This does violate all good pratices but it is necessary to allow this AudioBuffer to be used with native\n             * (Offline)AudioContexts.\n             */\n            return audioBuffer;\n        }\n        static [Symbol.hasInstance](instance) {\n            return (instance !== null && typeof instance === 'object' && Object.getPrototypeOf(instance) === AudioBuffer.prototype)\n                || (audioBufferStore.has(instance));\n        }\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/audio-buffer-constructor.js.map","import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassive } from '../helpers/set-internal-state-to-passive';\nconst DEFAULT_OPTIONS = {\n    buffer: null,\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    // Bug #149: Safari does not yet support the detune AudioParam.\n    loop: false,\n    loopEnd: 0,\n    loopStart: 0,\n    playbackRate: 1\n};\nexport const createAudioBufferSourceNodeConstructor = (audioNodeConstructor, createAudioBufferSourceNodeRenderer, createAudioParam, createInvalidStateError, createNativeAudioBufferSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener) => {\n    return class AudioBufferSourceNode extends audioNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const audioBufferSourceNodeRenderer = ((isOffline)\n                ? createAudioBufferSourceNodeRenderer()\n                : null);\n            super(context, false, nativeAudioBufferSourceNode, audioBufferSourceNodeRenderer);\n            this._audioBufferSourceNodeRenderer = audioBufferSourceNodeRenderer;\n            this._isBufferNullified = false;\n            this._isBufferSet = (options.buffer !== null && options.buffer !== undefined);\n            this._nativeAudioBufferSourceNode = nativeAudioBufferSourceNode;\n            this._onended = null;\n            // Bug #73: Edge & Safari do not export the correct values for maxValue and minValue.\n            this._playbackRate = createAudioParam(this, isOffline, nativeAudioBufferSourceNode.playbackRate, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n        }\n        get buffer() {\n            if (this._isBufferNullified) {\n                return null;\n            }\n            return this._nativeAudioBufferSourceNode.buffer;\n        }\n        set buffer(value) {\n            // Bug #71: Edge does not allow to set the buffer to null.\n            try {\n                this._nativeAudioBufferSourceNode.buffer = value;\n            }\n            catch (err) {\n                if (value !== null || err.code !== 17) {\n                    throw err;\n                }\n                // This will modify the buffer in place. Luckily that works in Edge and has the same effect as setting the buffer to null.\n                if (this._nativeAudioBufferSourceNode.buffer !== null) {\n                    const buffer = this._nativeAudioBufferSourceNode.buffer;\n                    const numberOfChannels = buffer.numberOfChannels;\n                    for (let i = 0; i < numberOfChannels; i += 1) {\n                        buffer\n                            .getChannelData(i)\n                            .fill(0);\n                    }\n                    this._isBufferNullified = true;\n                }\n            }\n            // Bug #72: Only Chrome, Edge & Opera do not allow to reassign the buffer yet.\n            if (value !== null) {\n                if (this._isBufferSet) {\n                    throw createInvalidStateError();\n                }\n                this._isBufferSet = true;\n            }\n        }\n        get loop() {\n            return this._nativeAudioBufferSourceNode.loop;\n        }\n        set loop(value) {\n            this._nativeAudioBufferSourceNode.loop = value;\n        }\n        get loopEnd() {\n            return this._nativeAudioBufferSourceNode.loopEnd;\n        }\n        set loopEnd(value) {\n            this._nativeAudioBufferSourceNode.loopEnd = value;\n        }\n        get loopStart() {\n            return this._nativeAudioBufferSourceNode.loopStart;\n        }\n        set loopStart(value) {\n            this._nativeAudioBufferSourceNode.loopStart = value;\n        }\n        get onended() {\n            return this._onended;\n        }\n        set onended(value) {\n            const wrappedListener = (typeof value === 'function') ? wrapEventListener(this, value) : null;\n            this._nativeAudioBufferSourceNode.onended = wrappedListener;\n            const nativeOnEnded = this._nativeAudioBufferSourceNode.onended;\n            this._onended = (nativeOnEnded !== null && nativeOnEnded === wrappedListener)\n                ? value\n                : nativeOnEnded;\n        }\n        get playbackRate() {\n            return this._playbackRate;\n        }\n        start(when = 0, offset = 0, duration) {\n            this._nativeAudioBufferSourceNode.start(when, offset, duration);\n            if (this._audioBufferSourceNodeRenderer !== null) {\n                this._audioBufferSourceNodeRenderer.start = (duration === undefined) ? [when, offset] : [when, offset, duration];\n            }\n            else {\n                setInternalStateToActive(this);\n                const resetInternalStateToPassive = () => {\n                    this._nativeAudioBufferSourceNode.removeEventListener('ended', resetInternalStateToPassive);\n                    // @todo Determine a meaningful delay instead of just using one second.\n                    setTimeout(() => setInternalStateToPassive(this), 1000);\n                };\n                this._nativeAudioBufferSourceNode.addEventListener('ended', resetInternalStateToPassive);\n            }\n        }\n        stop(when = 0) {\n            this._nativeAudioBufferSourceNode.stop(when);\n            if (this._audioBufferSourceNodeRenderer !== null) {\n                this._audioBufferSourceNodeRenderer.stop = when;\n            }\n        }\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/audio-buffer-source-node-constructor.js.map","import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createAudioBufferSourceNodeRendererFactory = (connectAudioParam, createNativeAudioBufferSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeAudioBufferSourceNodes = new WeakMap();\n        let start = null;\n        let stop = null;\n        const createAudioBufferSourceNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeAudioBufferSourceNode = getNativeAudioNode(proxy);\n            /*\n             * If the initially used nativeAudioBufferSourceNode was not constructed on the same OfflineAudioContext it needs to be created\n             * again.\n             */\n            const nativeAudioBufferSourceNodeIsOwnedByContext = isOwnedByContext(nativeAudioBufferSourceNode, nativeOfflineAudioContext);\n            if (!nativeAudioBufferSourceNodeIsOwnedByContext) {\n                const options = {\n                    buffer: nativeAudioBufferSourceNode.buffer,\n                    channelCount: nativeAudioBufferSourceNode.channelCount,\n                    channelCountMode: nativeAudioBufferSourceNode.channelCountMode,\n                    channelInterpretation: nativeAudioBufferSourceNode.channelInterpretation,\n                    // Bug #149: Safari does not yet support the detune AudioParam.\n                    loop: nativeAudioBufferSourceNode.loop,\n                    loopEnd: nativeAudioBufferSourceNode.loopEnd,\n                    loopStart: nativeAudioBufferSourceNode.loopStart,\n                    playbackRate: nativeAudioBufferSourceNode.playbackRate.value\n                };\n                nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext, options);\n                if (start !== null) {\n                    nativeAudioBufferSourceNode.start(...start);\n                }\n                if (stop !== null) {\n                    nativeAudioBufferSourceNode.stop(stop);\n                }\n            }\n            renderedNativeAudioBufferSourceNodes.set(nativeOfflineAudioContext, nativeAudioBufferSourceNode);\n            if (!nativeAudioBufferSourceNodeIsOwnedByContext) {\n                // Bug #149: Safari does not yet support the detune AudioParam.\n                await renderAutomation(nativeOfflineAudioContext, proxy.playbackRate, nativeAudioBufferSourceNode.playbackRate, trace);\n            }\n            else {\n                // Bug #149: Safari does not yet support the detune AudioParam.\n                await connectAudioParam(nativeOfflineAudioContext, proxy.playbackRate, nativeAudioBufferSourceNode.playbackRate, trace);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioBufferSourceNode, trace);\n            return nativeAudioBufferSourceNode;\n        };\n        return {\n            set start(value) {\n                start = value;\n            },\n            set stop(value) {\n                stop = value;\n            },\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeAudioBufferSourceNode = renderedNativeAudioBufferSourceNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeAudioBufferSourceNode !== undefined) {\n                    return Promise.resolve(renderedNativeAudioBufferSourceNode);\n                }\n                return createAudioBufferSourceNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/audio-buffer-source-node-renderer-factory.js.map","import { isValidLatencyHint } from '../helpers/is-valid-latency-hint';\nexport const createAudioContextConstructor = (baseAudioContextConstructor, createInvalidStateError, createNotSupportedError, createUnknownError, mediaElementAudioSourceNodeConstructor, mediaStreamAudioDestinationNodeConstructor, mediaStreamAudioSourceNodeConstructor, mediaStreamTrackAudioSourceNodeConstructor, nativeAudioContextConstructor) => {\n    return class AudioContext extends baseAudioContextConstructor {\n        constructor(options = {}) {\n            if (nativeAudioContextConstructor === null) {\n                throw new Error('Missing the native AudioContext constructor.');\n            }\n            const nativeAudioContext = new nativeAudioContextConstructor(options);\n            // Bug #131 Safari returns null when there are four other AudioContexts running already.\n            if (nativeAudioContext === null) {\n                throw createUnknownError();\n            }\n            // Bug #51 Only Chrome and Opera throw an error if the given latencyHint is invalid.\n            if (!isValidLatencyHint(options.latencyHint)) {\n                throw new TypeError(`The provided value '${options.latencyHint}' is not a valid enum value of type AudioContextLatencyCategory.`);\n            }\n            // Bug #150 Only Chrome, Firefox and Opera support setting the sampleRate.\n            if (options.sampleRate !== undefined && nativeAudioContext.sampleRate !== options.sampleRate) {\n                throw createNotSupportedError();\n            }\n            super(nativeAudioContext, 2);\n            const { latencyHint } = options;\n            const { sampleRate } = nativeAudioContext;\n            // @todo The values for 'balanced', 'interactive' and 'playback' are just copied from Chrome's implementation.\n            this._baseLatency = (typeof nativeAudioContext.baseLatency === 'number')\n                ? nativeAudioContext.baseLatency\n                : (latencyHint === 'balanced')\n                    ? (512 / sampleRate)\n                    : (latencyHint === 'interactive' || latencyHint === undefined)\n                        ? (256 / sampleRate)\n                        : (latencyHint === 'playback')\n                            ? (1024 / sampleRate)\n                            /*\n                             * @todo The min (256) and max (16384) values are taken from the allowed bufferSize values of a\n                             * ScriptProcessorNode.\n                             */\n                            : ((Math.max(2, Math.min(128, Math.round((latencyHint * sampleRate) / 128))) * 128) / sampleRate);\n            this._nativeAudioContext = nativeAudioContext;\n            this._state = null;\n            /*\n             * Bug #34: Chrome and Opera pretend to be running right away, but fire an onstatechange event when the state actually changes\n             * to 'running'.\n             */\n            if (nativeAudioContext.state === 'running') {\n                this._state = 'suspended';\n                const revokeState = () => {\n                    if (this._state === 'suspended') {\n                        this._state = null;\n                    }\n                    nativeAudioContext.removeEventListener('statechange', revokeState);\n                };\n                nativeAudioContext.addEventListener('statechange', revokeState);\n            }\n        }\n        get baseLatency() {\n            return this._baseLatency;\n        }\n        get state() {\n            return (this._state !== null) ? this._state : this._nativeAudioContext.state;\n        }\n        close() {\n            // Bug #35: Firefox does not throw an error if the AudioContext was closed before.\n            if (this.state === 'closed') {\n                return this._nativeAudioContext\n                    .close()\n                    .then(() => {\n                    throw createInvalidStateError();\n                });\n            }\n            // Bug #34: If the state was set to suspended before it should be revoked now.\n            if (this._state === 'suspended') {\n                this._state = null;\n            }\n            return this._nativeAudioContext.close();\n            /*\n             * Bug #50: Deleting the AudioGraph is currently not possible anymore.\n             * ...then(() => deleteAudioGraph(this, this._nativeAudioContext));\n             */\n        }\n        createMediaElementSource(mediaElement) {\n            return new mediaElementAudioSourceNodeConstructor(this, { mediaElement });\n        }\n        createMediaStreamDestination() {\n            return new mediaStreamAudioDestinationNodeConstructor(this);\n        }\n        createMediaStreamSource(mediaStream) {\n            return new mediaStreamAudioSourceNodeConstructor(this, { mediaStream });\n        }\n        createMediaStreamTrackSource(mediaStreamTrack) {\n            return new mediaStreamTrackAudioSourceNodeConstructor(this, { mediaStreamTrack });\n        }\n        resume() {\n            if (this._state === 'suspended') {\n                return new Promise((resolve, reject) => {\n                    const resolvePromise = () => {\n                        this._nativeAudioContext.removeEventListener('statechange', resolvePromise);\n                        if (this._nativeAudioContext.state === 'running') {\n                            resolve();\n                        }\n                        else {\n                            this\n                                .resume()\n                                .then(resolve, reject);\n                        }\n                    };\n                    this._nativeAudioContext.addEventListener('statechange', resolvePromise);\n                });\n            }\n            return this._nativeAudioContext\n                .resume()\n                .catch((err) => {\n                // Bug #55: Chrome, Edge and Opera do throw an InvalidAccessError instead of an InvalidStateError.\n                // Bug #56: Safari invokes the catch handler but without an error.\n                if (err === undefined || err.code === 15) {\n                    throw createInvalidStateError();\n                }\n                throw err;\n            });\n        }\n        suspend() {\n            return this._nativeAudioContext\n                .suspend()\n                .catch((err) => {\n                // Bug #56: Safari invokes the catch handler but without an error.\n                if (err === undefined) {\n                    throw createInvalidStateError();\n                }\n                throw err;\n            });\n        }\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/audio-context-constructor.js.map","export const createAudioDestinationNodeConstructor = (audioNodeConstructor, createAudioDestinationNodeRenderer, createIndexSizeError, createInvalidStateError, createNativeAudioDestinationNode, getNativeContext, isNativeOfflineAudioContext, renderInputsOfAudioNode) => {\n    return class AudioDestinationNode extends audioNodeConstructor {\n        constructor(context, channelCount) {\n            const nativeContext = getNativeContext(context);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const nativeAudioDestinationNode = createNativeAudioDestinationNode(nativeContext, channelCount, isOffline);\n            const audioDestinationNodeRenderer = ((isOffline)\n                ? createAudioDestinationNodeRenderer(renderInputsOfAudioNode)\n                : null);\n            super(context, false, nativeAudioDestinationNode, audioDestinationNodeRenderer);\n            this._isNodeOfNativeOfflineAudioContext = isOffline;\n            this._nativeAudioDestinationNode = nativeAudioDestinationNode;\n        }\n        get channelCount() {\n            return this._nativeAudioDestinationNode.channelCount;\n        }\n        set channelCount(value) {\n            // Bug #52: Chrome, Edge, Opera & Safari do not throw an exception at all.\n            // Bug #54: Firefox does throw an IndexSizeError.\n            if (this._isNodeOfNativeOfflineAudioContext) {\n                throw createInvalidStateError();\n            }\n            // Bug #47: The AudioDestinationNode in Edge and Safari do not initialize the maxChannelCount property correctly.\n            if (value > this._nativeAudioDestinationNode.maxChannelCount) {\n                throw createIndexSizeError();\n            }\n            this._nativeAudioDestinationNode.channelCount = value;\n        }\n        get channelCountMode() {\n            return this._nativeAudioDestinationNode.channelCountMode;\n        }\n        set channelCountMode(value) {\n            // Bug #53: No browser does throw an exception yet.\n            if (this._isNodeOfNativeOfflineAudioContext) {\n                throw createInvalidStateError();\n            }\n            this._nativeAudioDestinationNode.channelCountMode = value;\n        }\n        get maxChannelCount() {\n            return this._nativeAudioDestinationNode.maxChannelCount;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/audio-destination-node-constructor.js.map","export const createAudioDestinationNodeRenderer = (renderInputsOfAudioNode) => {\n    let nativeAudioDestinationNodePromise = null;\n    const createAudioDestinationNode = async (proxy, nativeOfflineAudioContext, trace) => {\n        const nativeAudioDestinationNode = nativeOfflineAudioContext.destination;\n        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioDestinationNode, trace);\n        return nativeAudioDestinationNode;\n    };\n    return {\n        render(proxy, nativeOfflineAudioContext, trace) {\n            if (nativeAudioDestinationNodePromise === null) {\n                nativeAudioDestinationNodePromise = createAudioDestinationNode(proxy, nativeOfflineAudioContext, trace);\n            }\n            return nativeAudioDestinationNodePromise;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/audio-destination-node-renderer-factory.js.map","import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nexport const createAudioListenerFactory = (createAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeScriptProcessorNode, isNativeOfflineAudioContext) => {\n    return (context, nativeContext) => {\n        const nativeListener = nativeContext.listener;\n        // Bug #117: Only Chrome & Opera support the new interface already.\n        const createFakeAudioParams = () => {\n            const channelMergerNode = createNativeChannelMergerNode(nativeContext, { channelCount: 1, channelCountMode: 'explicit', channelInterpretation: 'speakers', numberOfInputs: 9 });\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, 256, 9, 0);\n            const createFakeAudioParam = (input, value) => {\n                const constantSourceNode = createNativeConstantSourceNode(nativeContext, { channelCount: 1, channelCountMode: 'explicit', channelInterpretation: 'discrete', offset: value });\n                constantSourceNode.connect(channelMergerNode, 0, input);\n                // @todo This should be stopped when the context is closed.\n                constantSourceNode.start();\n                Object.defineProperty(constantSourceNode.offset, 'defaultValue', {\n                    get() {\n                        return value;\n                    }\n                });\n                /*\n                 * Bug #62 & #74: Edge & Safari do not support ConstantSourceNodes and do not export the correct values for maxValue and\n                 * minValue for GainNodes.\n                 */\n                return createAudioParam({ context }, isOffline, constantSourceNode.offset, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            };\n            let lastOrientation = [0, 0, -1, 0, 1, 0];\n            let lastPosition = [0, 0, 0];\n            scriptProcessorNode.onaudioprocess = ({ inputBuffer }) => {\n                const orientation = [\n                    inputBuffer.getChannelData(0)[0],\n                    inputBuffer.getChannelData(1)[0],\n                    inputBuffer.getChannelData(2)[0],\n                    inputBuffer.getChannelData(3)[0],\n                    inputBuffer.getChannelData(4)[0],\n                    inputBuffer.getChannelData(5)[0]\n                ];\n                if (orientation.some((value, index) => (value !== lastOrientation[index]))) {\n                    nativeListener.setOrientation(...orientation); // tslint:disable-line:deprecation\n                    lastOrientation = orientation;\n                }\n                const positon = [\n                    inputBuffer.getChannelData(6)[0],\n                    inputBuffer.getChannelData(7)[0],\n                    inputBuffer.getChannelData(8)[0]\n                ];\n                if (positon.some((value, index) => (value !== lastPosition[index]))) {\n                    nativeListener.setPosition(...positon); // tslint:disable-line:deprecation\n                    lastPosition = positon;\n                }\n            };\n            channelMergerNode.connect(scriptProcessorNode);\n            return {\n                forwardX: createFakeAudioParam(0, 0),\n                forwardY: createFakeAudioParam(1, 0),\n                forwardZ: createFakeAudioParam(2, -1),\n                positionX: createFakeAudioParam(6, 0),\n                positionY: createFakeAudioParam(7, 0),\n                positionZ: createFakeAudioParam(8, 0),\n                upX: createFakeAudioParam(3, 0),\n                upY: createFakeAudioParam(4, 1),\n                upZ: createFakeAudioParam(5, 0)\n            };\n        };\n        const { forwardX, forwardY, forwardZ, positionX, positionY, positionZ, upX, upY, upZ } = (nativeListener.forwardX === undefined)\n            ? createFakeAudioParams()\n            : nativeListener;\n        return {\n            get forwardX() {\n                return forwardX;\n            },\n            get forwardY() {\n                return forwardY;\n            },\n            get forwardZ() {\n                return forwardZ;\n            },\n            get positionX() {\n                return positionX;\n            },\n            get positionY() {\n                return positionY;\n            },\n            get positionZ() {\n                return positionZ;\n            },\n            get upX() {\n                return upX;\n            },\n            get upY() {\n                return upY;\n            },\n            get upZ() {\n                return upZ;\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/audio-listener-factory.js.map","import { AutomationEventList } from 'automation-events';\nexport const createAudioParamFactory = (addAudioParamConnections, audioParamAudioNodeStore, audioParamStore, createAudioParamRenderer, createCancelAndHoldAutomationEvent, createCancelScheduledValuesAutomationEvent, createExponentialRampToValueAutomationEvent, createLinearRampToValueAutomationEvent, createSetTargetAutomationEvent, createSetValueAutomationEvent, createSetValueCurveAutomationEvent, nativeAudioContextConstructor) => {\n    return (audioNode, isAudioParamOfOfflineAudioContext, nativeAudioParam, maxValue = null, minValue = null) => {\n        const automationEventList = new AutomationEventList(nativeAudioParam.defaultValue);\n        const audioParamRenderer = (isAudioParamOfOfflineAudioContext) ? createAudioParamRenderer(automationEventList) : null;\n        const audioParam = {\n            get defaultValue() {\n                return nativeAudioParam.defaultValue;\n            },\n            get maxValue() {\n                return (maxValue === null) ? nativeAudioParam.maxValue : maxValue;\n            },\n            get minValue() {\n                return (minValue === null) ? nativeAudioParam.minValue : minValue;\n            },\n            get value() {\n                return nativeAudioParam.value;\n            },\n            set value(value) {\n                nativeAudioParam.value = value;\n                // Bug #98: Edge, Firefox & Safari do not yet treat the value setter like a call to setValueAtTime().\n                audioParam.setValueAtTime(value, audioNode.context.currentTime);\n            },\n            cancelAndHoldAtTime(cancelTime) {\n                // Bug #28: Edge, Firefox & Safari do not yet implement cancelAndHoldAtTime().\n                if (typeof nativeAudioParam.cancelAndHoldAtTime === 'function') {\n                    if (audioParamRenderer === null) {\n                        automationEventList.flush(audioNode.context.currentTime);\n                    }\n                    automationEventList.add(createCancelAndHoldAutomationEvent(cancelTime));\n                    nativeAudioParam.cancelAndHoldAtTime(cancelTime);\n                }\n                else {\n                    const previousLastEvent = Array\n                        .from(automationEventList)\n                        .pop();\n                    if (audioParamRenderer === null) {\n                        automationEventList.flush(audioNode.context.currentTime);\n                    }\n                    automationEventList.add(createCancelAndHoldAutomationEvent(cancelTime));\n                    const currentLastEvent = Array\n                        .from(automationEventList)\n                        .pop();\n                    nativeAudioParam.cancelScheduledValues(cancelTime);\n                    if (previousLastEvent !== currentLastEvent && currentLastEvent !== undefined) {\n                        if (currentLastEvent.type === 'exponentialRampToValue') {\n                            nativeAudioParam.exponentialRampToValueAtTime(currentLastEvent.value, currentLastEvent.endTime);\n                        }\n                        else if (currentLastEvent.type === 'linearRampToValue') {\n                            nativeAudioParam.linearRampToValueAtTime(currentLastEvent.value, currentLastEvent.endTime);\n                        }\n                        else if (currentLastEvent.type === 'setValue') {\n                            nativeAudioParam.setValueAtTime(currentLastEvent.value, currentLastEvent.startTime);\n                        }\n                        else if (currentLastEvent.type === 'setValueCurve') {\n                            nativeAudioParam.setValueCurveAtTime(currentLastEvent.values, currentLastEvent.startTime, currentLastEvent.duration);\n                        }\n                    }\n                }\n                return audioParam;\n            },\n            cancelScheduledValues(cancelTime) {\n                if (audioParamRenderer === null) {\n                    automationEventList.flush(audioNode.context.currentTime);\n                }\n                automationEventList.add(createCancelScheduledValuesAutomationEvent(cancelTime));\n                nativeAudioParam.cancelScheduledValues(cancelTime);\n                return audioParam;\n            },\n            exponentialRampToValueAtTime(value, endTime) {\n                if (audioParamRenderer === null) {\n                    automationEventList.flush(audioNode.context.currentTime);\n                }\n                automationEventList.add(createExponentialRampToValueAutomationEvent(value, endTime));\n                nativeAudioParam.exponentialRampToValueAtTime(value, endTime);\n                return audioParam;\n            },\n            linearRampToValueAtTime(value, endTime) {\n                if (audioParamRenderer === null) {\n                    automationEventList.flush(audioNode.context.currentTime);\n                }\n                automationEventList.add(createLinearRampToValueAutomationEvent(value, endTime));\n                nativeAudioParam.linearRampToValueAtTime(value, endTime);\n                return audioParam;\n            },\n            setTargetAtTime(target, startTime, timeConstant) {\n                if (audioParamRenderer === null) {\n                    automationEventList.flush(audioNode.context.currentTime);\n                }\n                automationEventList.add(createSetTargetAutomationEvent(target, startTime, timeConstant));\n                nativeAudioParam.setTargetAtTime(target, startTime, timeConstant);\n                return audioParam;\n            },\n            setValueAtTime(value, startTime) {\n                if (audioParamRenderer === null) {\n                    automationEventList.flush(audioNode.context.currentTime);\n                }\n                automationEventList.add(createSetValueAutomationEvent(value, startTime));\n                nativeAudioParam.setValueAtTime(value, startTime);\n                return audioParam;\n            },\n            setValueCurveAtTime(values, startTime, duration) {\n                /*\n                 * Bug #152: Safari does not correctly interpolate the values of the curve.\n                 * @todo Unfortunately there is no way to test for this behavior in synchronous fashion which is why testing for the\n                 * existence of the webkitAudioContext is used as a workaround here.\n                 */\n                if (nativeAudioContextConstructor !== null && nativeAudioContextConstructor.name === 'webkitAudioContext') {\n                    const endTime = startTime + duration;\n                    const sampleRate = audioNode.context.sampleRate;\n                    const firstSample = Math.ceil(startTime * sampleRate);\n                    const lastSample = Math.floor((endTime) * sampleRate);\n                    const numberOfInterpolatedValues = lastSample - firstSample;\n                    const interpolatedValues = new Float32Array(numberOfInterpolatedValues);\n                    for (let i = 0; i < numberOfInterpolatedValues; i += 1) {\n                        const theoreticIndex = ((values.length - 1) / duration) * (((firstSample + i) / sampleRate) - startTime);\n                        const lowerIndex = Math.floor(theoreticIndex);\n                        const upperIndex = Math.ceil(theoreticIndex);\n                        interpolatedValues[i] = (lowerIndex === upperIndex)\n                            ? values[lowerIndex]\n                            : ((1 - (theoreticIndex - lowerIndex)) * values[lowerIndex])\n                                + ((1 - (upperIndex - theoreticIndex)) * values[upperIndex]);\n                    }\n                    if (audioParamRenderer === null) {\n                        automationEventList.flush(audioNode.context.currentTime);\n                    }\n                    automationEventList.add(createSetValueCurveAutomationEvent(interpolatedValues, startTime, duration));\n                    nativeAudioParam.setValueCurveAtTime(interpolatedValues, startTime, duration);\n                    const timeOfLastSample = lastSample / sampleRate;\n                    if (timeOfLastSample < endTime) {\n                        audioParam.setValueAtTime(interpolatedValues[interpolatedValues.length - 1], timeOfLastSample);\n                    }\n                    audioParam.setValueAtTime(values[values.length - 1], endTime);\n                }\n                else {\n                    if (audioParamRenderer === null) {\n                        automationEventList.flush(audioNode.context.currentTime);\n                    }\n                    automationEventList.add(createSetValueCurveAutomationEvent(values, startTime, duration));\n                    nativeAudioParam.setValueCurveAtTime(values, startTime, duration);\n                }\n                return audioParam;\n            }\n        };\n        audioParamStore.set(audioParam, nativeAudioParam);\n        audioParamAudioNodeStore.set(audioParam, audioNode);\n        addAudioParamConnections(audioParam, audioParamRenderer);\n        return audioParam;\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/audio-param-factory.js.map","export const createAudioParamRenderer = (automationEventList) => {\n    return {\n        replay(audioParam) {\n            for (const automationEvent of automationEventList) {\n                if (automationEvent.type === 'exponentialRampToValue') {\n                    const { endTime, value } = automationEvent;\n                    audioParam.exponentialRampToValueAtTime(value, endTime);\n                }\n                else if (automationEvent.type === 'linearRampToValue') {\n                    const { endTime, value } = automationEvent;\n                    audioParam.linearRampToValueAtTime(value, endTime);\n                }\n                else if (automationEvent.type === 'setTarget') {\n                    const { startTime, target, timeConstant } = automationEvent;\n                    audioParam.setTargetAtTime(target, startTime, timeConstant);\n                }\n                else if (automationEvent.type === 'setValue') {\n                    const { startTime, value } = automationEvent;\n                    audioParam.setValueAtTime(value, startTime);\n                }\n                else if (automationEvent.type === 'setValueCurve') {\n                    const { duration, startTime, values } = automationEvent;\n                    audioParam.setValueCurveAtTime(values, startTime, duration);\n                }\n                else {\n                    throw new Error(\"Can't apply an unknown automation.\");\n                }\n            }\n        }\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/audio-param-renderer.js.map","import { NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS } from '../globals';\nimport { ReadOnlyMap } from '../read-only-map';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    // Bug #61: The channelCountMode should be 'max' according to the spec but is set to 'explicit' to achieve consistent behavior.\n    channelCountMode: 'explicit',\n    channelInterpretation: 'speakers',\n    numberOfInputs: 1,\n    numberOfOutputs: 1,\n    outputChannelCount: undefined,\n    parameterData: {},\n    processorOptions: {}\n};\nconst createChannelCount = (length) => {\n    const channelCount = [];\n    for (let i = 0; i < length; i += 1) {\n        channelCount.push(1);\n    }\n    return channelCount;\n};\nconst sanitizedOptions = (options) => {\n    return {\n        ...options,\n        outputChannelCount: (options.outputChannelCount !== undefined) ?\n            options.outputChannelCount :\n            (options.numberOfInputs === 1 && options.numberOfOutputs === 1) ?\n                /*\n                 * Bug #61: This should be the computedNumberOfChannels, but unfortunately that is almost impossible to fake. That's why\n                 * the channelCountMode is required to be 'explicit' as long as there is not a native implementation in every browser. That\n                 * makes sure the computedNumberOfChannels is equivilant to the channelCount which makes it much easier to compute.\n                 */\n                [options.channelCount] :\n                createChannelCount(options.numberOfOutputs)\n    };\n};\nexport const createAudioWorkletNodeConstructor = (addUnrenderedAudioWorkletNode, audioNodeConstructor, createAudioParam, createAudioWorkletNodeRenderer, createNativeAudioWorkletNode, getNativeContext, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor, wrapEventListener) => {\n    return class AudioWorkletNode extends audioNodeConstructor {\n        constructor(context, name, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const mergedOptions = sanitizedOptions({ ...DEFAULT_OPTIONS, ...options });\n            const nodeNameToProcessorConstructorMap = NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.get(nativeContext);\n            const processorConstructor = (nodeNameToProcessorConstructorMap === undefined) ?\n                undefined :\n                nodeNameToProcessorConstructorMap.get(name);\n            const nativeAudioWorkletNode = createNativeAudioWorkletNode(nativeContext, isOffline ? null : context.baseLatency, nativeAudioWorkletNodeConstructor, name, processorConstructor, mergedOptions);\n            const audioWorkletNodeRenderer = ((isOffline)\n                ? createAudioWorkletNodeRenderer(name, mergedOptions, processorConstructor)\n                : null);\n            /*\n             * @todo Add a mechanism to switch an AudioWorkletNode to passive once the process() function of the AudioWorkletProcessor\n             * returns false.\n             */\n            super(context, true, nativeAudioWorkletNode, audioWorkletNodeRenderer);\n            const parameters = [];\n            nativeAudioWorkletNode.parameters.forEach((nativeAudioParam, nm) => {\n                const audioParam = createAudioParam(this, isOffline, nativeAudioParam);\n                parameters.push([nm, audioParam]);\n            });\n            this._nativeAudioWorkletNode = nativeAudioWorkletNode;\n            this._onprocessorerror = null;\n            this._parameters = new ReadOnlyMap(parameters);\n            /*\n             * Bug #86 & #87: Invoking the renderer of an AudioWorkletNode might be necessary if it has no direct or indirect connection to\n             * the destination.\n             */\n            if (isOffline) {\n                addUnrenderedAudioWorkletNode(nativeContext, this);\n            }\n        }\n        get onprocessorerror() {\n            return this._onprocessorerror;\n        }\n        set onprocessorerror(value) {\n            const wrappedListener = (typeof value === 'function')\n                ? wrapEventListener(this, value)\n                : null;\n            this._nativeAudioWorkletNode.onprocessorerror = wrappedListener;\n            const nativeOnProcessorError = this._nativeAudioWorkletNode.onprocessorerror;\n            this._onprocessorerror = (nativeOnProcessorError !== null && nativeOnProcessorError === wrappedListener)\n                ? value\n                : nativeOnProcessorError;\n        }\n        get parameters() {\n            if (this._parameters === null) {\n                // @todo The definition that TypeScript uses of the AudioParamMap is lacking many methods.\n                return this._nativeAudioWorkletNode.parameters;\n            }\n            return this._parameters;\n        }\n        get port() {\n            return this._nativeAudioWorkletNode.port;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/audio-worklet-node-constructor.js.map","export const createBaseAudioContextConstructor = (addAudioWorkletModule, analyserNodeConstructor, audioBufferConstructor, audioBufferSourceNodeConstructor, biquadFilterNodeConstructor, channelMergerNodeConstructor, channelSplitterNodeConstructor, constantSourceNodeConstructor, convolverNodeConstructor, decodeAudioData, delayNodeConstructor, dynamicsCompressorNodeConstructor, gainNodeConstructor, iIRFilterNodeConstructor, minimalBaseAudioContextConstructor, oscillatorNodeConstructor, pannerNodeConstructor, periodicWaveConstructor, stereoPannerNodeConstructor, waveShaperNodeConstructor) => {\n    return class BaseAudioContext extends minimalBaseAudioContextConstructor {\n        constructor(_nativeContext, numberOfChannels) {\n            super(_nativeContext, numberOfChannels);\n            this._nativeContext = _nativeContext;\n            this._audioWorklet = (addAudioWorkletModule === undefined) ?\n                undefined :\n                {\n                    addModule: (moduleURL, options) => {\n                        return addAudioWorkletModule(this, moduleURL, options);\n                    }\n                };\n        }\n        get audioWorklet() {\n            return this._audioWorklet;\n        }\n        createAnalyser() {\n            return new analyserNodeConstructor(this);\n        }\n        createBiquadFilter() {\n            return new biquadFilterNodeConstructor(this);\n        }\n        createBuffer(numberOfChannels, length, sampleRate) {\n            return new audioBufferConstructor({ length, numberOfChannels, sampleRate });\n        }\n        createBufferSource() {\n            return new audioBufferSourceNodeConstructor(this);\n        }\n        createChannelMerger(numberOfInputs = 6) {\n            return new channelMergerNodeConstructor(this, { numberOfInputs });\n        }\n        createChannelSplitter(numberOfOutputs = 6) {\n            return new channelSplitterNodeConstructor(this, { numberOfOutputs });\n        }\n        createConstantSource() {\n            return new constantSourceNodeConstructor(this);\n        }\n        createConvolver() {\n            return new convolverNodeConstructor(this);\n        }\n        createDelay(maxDelayTime = 1) {\n            return new delayNodeConstructor(this, { maxDelayTime });\n        }\n        createDynamicsCompressor() {\n            return new dynamicsCompressorNodeConstructor(this);\n        }\n        createGain() {\n            return new gainNodeConstructor(this);\n        }\n        createIIRFilter(feedforward, feedback) {\n            return new iIRFilterNodeConstructor(this, { feedback, feedforward });\n        }\n        createOscillator() {\n            return new oscillatorNodeConstructor(this);\n        }\n        createPanner() {\n            return new pannerNodeConstructor(this);\n        }\n        createPeriodicWave(real, imag, constraints = { disableNormalization: false }) {\n            return new periodicWaveConstructor(this, { ...constraints, imag, real });\n        }\n        createStereoPanner() {\n            return new stereoPannerNodeConstructor(this);\n        }\n        createWaveShaper() {\n            return new waveShaperNodeConstructor(this);\n        }\n        decodeAudioData(audioData, successCallback, errorCallback) {\n            return decodeAudioData(this._nativeContext, audioData)\n                .then((audioBuffer) => {\n                if (typeof successCallback === 'function') {\n                    successCallback(audioBuffer);\n                }\n                return audioBuffer;\n            })\n                .catch((err) => {\n                if (typeof errorCallback === 'function') {\n                    errorCallback(err);\n                }\n                throw err;\n            });\n        }\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/base-audio-context-constructor.js.map","import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nconst DEFAULT_OPTIONS = {\n    Q: 1,\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    detune: 0,\n    frequency: 350,\n    gain: 0,\n    type: 'lowpass'\n};\nexport const createBiquadFilterNodeConstructor = (audioNodeConstructor, createAudioParam, createBiquadFilterNodeRenderer, createInvalidAccessError, createNativeBiquadFilterNode, getNativeContext, isNativeOfflineAudioContext) => {\n    return class BiquadFilterNode extends audioNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const biquadFilterNodeRenderer = ((isOffline) ? createBiquadFilterNodeRenderer() : null);\n            super(context, false, nativeBiquadFilterNode, biquadFilterNodeRenderer);\n            // Bug #80: Edge & Safari do not export the correct values for maxValue and minValue.\n            this._Q = createAudioParam(this, isOffline, nativeBiquadFilterNode.Q, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            // Bug #78: Chrome, Edge, Firefox, Opera & Safari do not export the correct values for maxValue and minValue.\n            this._detune = createAudioParam(this, isOffline, nativeBiquadFilterNode.detune, 1200 * Math.log2(MOST_POSITIVE_SINGLE_FLOAT), -1200 * Math.log2(MOST_POSITIVE_SINGLE_FLOAT));\n            /*\n             * Bug #77: Edge does not export the correct values for maxValue and minValue. Firefox & Safari do not export the correct value\n             * for minValue.\n             */\n            this._frequency = createAudioParam(this, isOffline, nativeBiquadFilterNode.frequency, context.sampleRate / 2, 0);\n            // Bug #79: Chrome, Edge, Firefox, Opera & Safari do not export the correct values for maxValue and minValue.\n            this._gain = createAudioParam(this, isOffline, nativeBiquadFilterNode.gain, 40 * Math.log10(MOST_POSITIVE_SINGLE_FLOAT), MOST_NEGATIVE_SINGLE_FLOAT);\n            this._nativeBiquadFilterNode = nativeBiquadFilterNode;\n        }\n        get detune() {\n            return this._detune;\n        }\n        get frequency() {\n            return this._frequency;\n        }\n        get gain() {\n            return this._gain;\n        }\n        get Q() {\n            return this._Q;\n        }\n        get type() {\n            return this._nativeBiquadFilterNode.type;\n        }\n        set type(value) {\n            this._nativeBiquadFilterNode.type = value;\n        }\n        getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {\n            this._nativeBiquadFilterNode.getFrequencyResponse(frequencyHz, magResponse, phaseResponse);\n            // Bug #68: Only Chrome, Firefox & Opera do throw an error if the parameters differ in their length.\n            if ((frequencyHz.length !== magResponse.length) || (magResponse.length !== phaseResponse.length)) {\n                throw createInvalidAccessError();\n            }\n        }\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/biquad-filter-node-constructor.js.map","import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createBiquadFilterNodeRendererFactory = (connectAudioParam, createNativeBiquadFilterNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeBiquadFilterNodes = new WeakMap();\n        const createBiquadFilterNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeBiquadFilterNode = getNativeAudioNode(proxy);\n            /*\n             * If the initially used nativeBiquadFilterNode was not constructed on the same OfflineAudioContext it needs to be created\n             * again.\n             */\n            const nativeBiquadFilterNodeIsOwnedByContext = isOwnedByContext(nativeBiquadFilterNode, nativeOfflineAudioContext);\n            if (!nativeBiquadFilterNodeIsOwnedByContext) {\n                const options = {\n                    Q: nativeBiquadFilterNode.Q.value,\n                    channelCount: nativeBiquadFilterNode.channelCount,\n                    channelCountMode: nativeBiquadFilterNode.channelCountMode,\n                    channelInterpretation: nativeBiquadFilterNode.channelInterpretation,\n                    detune: nativeBiquadFilterNode.detune.value,\n                    frequency: nativeBiquadFilterNode.frequency.value,\n                    gain: nativeBiquadFilterNode.gain.value,\n                    type: nativeBiquadFilterNode.type\n                };\n                nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeBiquadFilterNodes.set(nativeOfflineAudioContext, nativeBiquadFilterNode);\n            if (!nativeBiquadFilterNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain, trace);\n            }\n            else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain, trace);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeBiquadFilterNode, trace);\n            return nativeBiquadFilterNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeBiquadFilterNode = renderedNativeBiquadFilterNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeBiquadFilterNode !== undefined) {\n                    return Promise.resolve(renderedNativeBiquadFilterNode);\n                }\n                return createBiquadFilterNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/biquad-filter-node-renderer-factory.js.map","export const createCacheTestResult = (ongoingTests, testResults) => {\n    return (tester, test) => {\n        const cachedTestResult = testResults.get(tester);\n        if (cachedTestResult !== undefined) {\n            return cachedTestResult;\n        }\n        const ongoingTest = ongoingTests.get(tester);\n        if (ongoingTest !== undefined) {\n            return ongoingTest;\n        }\n        try {\n            const synchronousTestResult = test();\n            if (synchronousTestResult instanceof Promise) {\n                ongoingTests.set(tester, synchronousTestResult);\n                return synchronousTestResult\n                    .catch(() => false)\n                    .then((finalTestResult) => {\n                    ongoingTests.delete(tester);\n                    testResults.set(tester, finalTestResult);\n                    return finalTestResult;\n                });\n            }\n            testResults.set(tester, synchronousTestResult);\n            return synchronousTestResult;\n        }\n        catch {\n            testResults.set(tester, false);\n            return false;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/cache-test-result.js.map","const DEFAULT_OPTIONS = {\n    channelCount: 1,\n    channelCountMode: 'explicit',\n    channelInterpretation: 'speakers',\n    numberOfInputs: 6\n};\nexport const createChannelMergerNodeConstructor = (audioNodeConstructor, createChannelMergerNodeRenderer, createNativeChannelMergerNode, getNativeContext, isNativeOfflineAudioContext) => {\n    return class ChannelMergerNode extends audioNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeChannelMergerNode = createNativeChannelMergerNode(nativeContext, mergedOptions);\n            const channelMergerNodeRenderer = ((isNativeOfflineAudioContext(nativeContext))\n                ? createChannelMergerNodeRenderer()\n                : null);\n            super(context, false, nativeChannelMergerNode, channelMergerNodeRenderer);\n        }\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/channel-merger-node-constructor.js.map","import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createChannelMergerNodeRendererFactory = (createNativeChannelMergerNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeAudioNodes = new WeakMap();\n        const createAudioNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeAudioNode = getNativeAudioNode(proxy);\n            // If the initially used nativeAudioNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeAudioNodeIsOwnedByContext = isOwnedByContext(nativeAudioNode, nativeOfflineAudioContext);\n            if (!nativeAudioNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeAudioNode.channelCount,\n                    channelCountMode: nativeAudioNode.channelCountMode,\n                    channelInterpretation: nativeAudioNode.channelInterpretation,\n                    numberOfInputs: nativeAudioNode.numberOfInputs\n                };\n                nativeAudioNode = createNativeChannelMergerNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioNode);\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioNode, trace);\n            return nativeAudioNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeAudioNode !== undefined) {\n                    return Promise.resolve(renderedNativeAudioNode);\n                }\n                return createAudioNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/channel-merger-node-renderer-factory.js.map","const DEFAULT_OPTIONS = {\n    channelCount: 6,\n    channelCountMode: 'explicit',\n    channelInterpretation: 'discrete',\n    numberOfOutputs: 6\n};\nconst sanitizedOptions = (options) => {\n    return { ...options, channelCount: options.numberOfOutputs };\n};\nexport const createChannelSplitterNodeConstructor = (audioNodeConstructor, createChannelSplitterNodeRenderer, createNativeChannelSplitterNode, getNativeContext, isNativeOfflineAudioContext) => {\n    return class ChannelSplitterNode extends audioNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = sanitizedOptions({ ...DEFAULT_OPTIONS, ...options });\n            const nativeChannelSplitterNode = createNativeChannelSplitterNode(nativeContext, mergedOptions);\n            const channelSplitterNodeRenderer = ((isNativeOfflineAudioContext(nativeContext))\n                ? createChannelSplitterNodeRenderer()\n                : null);\n            super(context, false, nativeChannelSplitterNode, channelSplitterNodeRenderer);\n        }\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/channel-splitter-node-constructor.js.map","import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createChannelSplitterNodeRendererFactory = (createNativeChannelSplitterNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeAudioNodes = new WeakMap();\n        const createAudioNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeAudioNode = getNativeAudioNode(proxy);\n            // If the initially used nativeAudioNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeAudioNodeIsOwnedByContext = isOwnedByContext(nativeAudioNode, nativeOfflineAudioContext);\n            if (!nativeAudioNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeAudioNode.channelCount,\n                    channelCountMode: nativeAudioNode.channelCountMode,\n                    channelInterpretation: nativeAudioNode.channelInterpretation,\n                    numberOfOutputs: nativeAudioNode.numberOfOutputs\n                };\n                nativeAudioNode = createNativeChannelSplitterNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioNode);\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioNode, trace);\n            return nativeAudioNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeAudioNode !== undefined) {\n                    return Promise.resolve(renderedNativeAudioNode);\n                }\n                return createAudioNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/channel-splitter-node-renderer-factory.js.map","export const createConnectAudioParam = (renderInputsOfAudioParam) => {\n    return (nativeOfflineAudioContext, audioParam, nativeAudioParam, trace) => {\n        return renderInputsOfAudioParam(audioParam, nativeOfflineAudioContext, nativeAudioParam, trace);\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/connect-audio-param.js.map","import { isNativeAudioNode } from '../guards/native-audio-node';\nexport const createConnectMultipleOutputs = (createIndexSizeError) => {\n    return (outputAudioNodes, destination, output = 0, input = 0) => {\n        const outputAudioNode = outputAudioNodes[output];\n        if (outputAudioNode === undefined) {\n            throw createIndexSizeError();\n        }\n        if (isNativeAudioNode(destination)) {\n            return outputAudioNode.connect(destination, 0, input);\n        }\n        return outputAudioNode.connect(destination, 0);\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/connect-multiple-outputs.js.map","export const createConnectedNativeAudioBufferSourceNodeFactory = (createNativeAudioBufferSourceNode) => {\n    return (nativeContext, nativeAudioNode) => {\n        const nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeContext);\n        const nativeAudioBuffer = nativeContext.createBuffer(1, 2, nativeContext.sampleRate);\n        nativeAudioBufferSourceNode.buffer = nativeAudioBuffer;\n        nativeAudioBufferSourceNode.loop = true;\n        nativeAudioBufferSourceNode.connect(nativeAudioNode);\n        nativeAudioBufferSourceNode.start();\n        return () => {\n            nativeAudioBufferSourceNode.stop();\n            nativeAudioBufferSourceNode.disconnect(nativeAudioNode);\n        };\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/connected-native-audio-buffer-source-node-factory.js.map","import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassive } from '../helpers/set-internal-state-to-passive';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    offset: 1\n};\nexport const createConstantSourceNodeConstructor = (audioNodeConstructor, createAudioParam, createConstantSourceNodeRendererFactory, createNativeConstantSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener) => {\n    return class ConstantSourceNode extends audioNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeConstantSourceNode = createNativeConstantSourceNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const constantSourceNodeRenderer = ((isOffline)\n                ? createConstantSourceNodeRendererFactory()\n                : null);\n            super(context, false, nativeConstantSourceNode, constantSourceNodeRenderer);\n            this._constantSourceNodeRenderer = constantSourceNodeRenderer;\n            this._nativeConstantSourceNode = nativeConstantSourceNode;\n            /*\n             * Bug #62 & #74: Edge & Safari do not support ConstantSourceNodes and do not export the correct values for maxValue and\n             * minValue for GainNodes.\n             */\n            this._offset = createAudioParam(this, isOffline, nativeConstantSourceNode.offset, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            this._onended = null;\n        }\n        get offset() {\n            return this._offset;\n        }\n        get onended() {\n            return this._onended;\n        }\n        set onended(value) {\n            const wrappedListener = (typeof value === 'function') ? wrapEventListener(this, value) : null;\n            this._nativeConstantSourceNode.onended = wrappedListener;\n            const nativeOnEnded = this._nativeConstantSourceNode.onended;\n            this._onended = (nativeOnEnded !== null && nativeOnEnded === wrappedListener)\n                ? value\n                : nativeOnEnded;\n        }\n        start(when = 0) {\n            this._nativeConstantSourceNode.start(when);\n            if (this._constantSourceNodeRenderer !== null) {\n                this._constantSourceNodeRenderer.start = when;\n            }\n            else {\n                setInternalStateToActive(this);\n                const resetInternalStateToPassive = () => {\n                    this._nativeConstantSourceNode.removeEventListener('ended', resetInternalStateToPassive);\n                    // @todo Determine a meaningful delay instead of just using one second.\n                    setTimeout(() => setInternalStateToPassive(this), 1000);\n                };\n                this._nativeConstantSourceNode.addEventListener('ended', resetInternalStateToPassive);\n            }\n        }\n        stop(when = 0) {\n            this._nativeConstantSourceNode.stop(when);\n            if (this._constantSourceNodeRenderer !== null) {\n                this._constantSourceNodeRenderer.stop = when;\n            }\n        }\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/constant-source-node-constructor.js.map","import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createConstantSourceNodeRendererFactory = (connectAudioParam, createNativeConstantSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeConstantSourceNodes = new WeakMap();\n        let start = null;\n        let stop = null;\n        const createConstantSourceNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeConstantSourceNode = getNativeAudioNode(proxy);\n            /*\n             * If the initially used nativeConstantSourceNode was not constructed on the same OfflineAudioContext it needs to be created\n             * again.\n             */\n            const nativeConstantSourceNodeIsOwnedByContext = isOwnedByContext(nativeConstantSourceNode, nativeOfflineAudioContext);\n            if (!nativeConstantSourceNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeConstantSourceNode.channelCount,\n                    channelCountMode: nativeConstantSourceNode.channelCountMode,\n                    channelInterpretation: nativeConstantSourceNode.channelInterpretation,\n                    offset: nativeConstantSourceNode.offset.value\n                };\n                nativeConstantSourceNode = createNativeConstantSourceNode(nativeOfflineAudioContext, options);\n                if (start !== null) {\n                    nativeConstantSourceNode.start(start);\n                }\n                if (stop !== null) {\n                    nativeConstantSourceNode.stop(stop);\n                }\n            }\n            renderedNativeConstantSourceNodes.set(nativeOfflineAudioContext, nativeConstantSourceNode);\n            if (!nativeConstantSourceNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset, trace);\n            }\n            else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset, trace);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConstantSourceNode, trace);\n            return nativeConstantSourceNode;\n        };\n        return {\n            set start(value) {\n                start = value;\n            },\n            set stop(value) {\n                stop = value;\n            },\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeConstantSourceNode = renderedNativeConstantSourceNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeConstantSourceNode !== undefined) {\n                    return Promise.resolve(renderedNativeConstantSourceNode);\n                }\n                return createConstantSourceNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/constant-source-node-renderer-factory.js.map","export const createConvertNumberToUnsignedLong = (unit32Array) => {\n    return (value) => {\n        unit32Array[0] = value;\n        return unit32Array[0];\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/convert-number-to-unsigned-long.js.map","const DEFAULT_OPTIONS = {\n    buffer: null,\n    channelCount: 2,\n    channelCountMode: 'clamped-max',\n    channelInterpretation: 'speakers',\n    disableNormalization: false\n};\nexport const createConvolverNodeConstructor = (audioNodeConstructor, createConvolverNodeRenderer, createNativeConvolverNode, getNativeContext, isNativeOfflineAudioContext) => {\n    return class ConvolverNode extends audioNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeConvolverNode = createNativeConvolverNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const convolverNodeRenderer = ((isOffline) ? createConvolverNodeRenderer() : null);\n            super(context, false, nativeConvolverNode, convolverNodeRenderer);\n            this._isBufferNullified = false;\n            this._nativeConvolverNode = nativeConvolverNode;\n        }\n        get buffer() {\n            if (this._isBufferNullified) {\n                return null;\n            }\n            return this._nativeConvolverNode.buffer;\n        }\n        set buffer(value) {\n            this._nativeConvolverNode.buffer = value;\n            // Bug #115: Safari does not allow to set the buffer to null.\n            if (value === null && this._nativeConvolverNode.buffer !== null) {\n                const nativeContext = this._nativeConvolverNode.context;\n                this._nativeConvolverNode.buffer = nativeContext.createBuffer(1, 1, nativeContext.sampleRate);\n                this._isBufferNullified = true;\n            }\n            else {\n                this._isBufferNullified = false;\n            }\n        }\n        get normalize() {\n            return this._nativeConvolverNode.normalize;\n        }\n        set normalize(value) {\n            this._nativeConvolverNode.normalize = value;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/convolver-node-constructor.js.map","import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createConvolverNodeRendererFactory = (createNativeConvolverNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeConvolverNodes = new WeakMap();\n        const createConvolverNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeConvolverNode = getNativeAudioNode(proxy);\n            // If the initially used nativeConvolverNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeConvolverNodeIsOwnedByContext = isOwnedByContext(nativeConvolverNode, nativeOfflineAudioContext);\n            if (!nativeConvolverNodeIsOwnedByContext) {\n                const options = {\n                    buffer: nativeConvolverNode.buffer,\n                    channelCount: nativeConvolverNode.channelCount,\n                    channelCountMode: nativeConvolverNode.channelCountMode,\n                    channelInterpretation: nativeConvolverNode.channelInterpretation,\n                    disableNormalization: !nativeConvolverNode.normalize\n                };\n                nativeConvolverNode = createNativeConvolverNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeConvolverNodes.set(nativeOfflineAudioContext, nativeConvolverNode);\n            if (isNativeAudioNodeFaker(nativeConvolverNode)) {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode.inputs[0], trace);\n            }\n            else {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode, trace);\n            }\n            return nativeConvolverNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeConvolverNode = renderedNativeConvolverNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeConvolverNode !== undefined) {\n                    return Promise.resolve(renderedNativeConvolverNode);\n                }\n                return createConvolverNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/convolver-node-renderer-factory.js.map","export const createCreateNativeOfflineAudioContext = (createNotSupportedError, nativeOfflineAudioContextConstructor) => {\n    return (numberOfChannels, length, sampleRate) => {\n        if (nativeOfflineAudioContextConstructor === null) {\n            throw new Error('Missing the native OfflineAudioContext constructor.');\n        }\n        try {\n            return new nativeOfflineAudioContextConstructor(numberOfChannels, length, sampleRate);\n        }\n        catch (err) {\n            // Bug #143, #144 & #146: Safari throws a SyntaxError when numberOfChannels, length or sampleRate are invalid.\n            // Bug #143: Edge throws a SyntaxError when numberOfChannels or length are invalid.\n            // Bug #145: Edge throws an IndexSizeError when sampleRate is zero.\n            if (err.name === 'IndexSizeError' || err.name === 'SyntaxError') {\n                throw createNotSupportedError();\n            }\n            throw err;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/create-native-offline-audio-context.js.map","export const createDataCloneError = () => {\n    try {\n        return new DOMException('', 'DataCloneError');\n    }\n    catch (err) {\n        // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.\n        err.code = 25;\n        err.name = 'DataCloneError';\n        return err;\n    }\n};\n//# sourceMappingURL=/build/es2019/factories/data-clone-error.js.map","import { isAudioNodeOutputConnection } from '../guards/audio-node-output-connection';\nexport const createDecrementCycleCounter = (connectNativeAudioNodeToNativeAudioNode, cycleCounters, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, getNativeContext, isActiveAudioNode, isNativeOfflineAudioContext) => {\n    return (audioNode, count) => {\n        const cycleCounter = cycleCounters.get(audioNode);\n        if (cycleCounter === undefined) {\n            throw new Error('Missing the expected cycle count.');\n        }\n        const nativeContext = getNativeContext(audioNode.context);\n        const isOffline = isNativeOfflineAudioContext(nativeContext);\n        if (cycleCounter === count) {\n            cycleCounters.delete(audioNode);\n            if (!isOffline && isActiveAudioNode(audioNode)) {\n                const nativeSourceAudioNode = getNativeAudioNode(audioNode);\n                const { outputs } = getAudioNodeConnections(audioNode);\n                for (const output of outputs) {\n                    if (isAudioNodeOutputConnection(output)) {\n                        const nativeDestinationAudioNode = getNativeAudioNode(output[0]);\n                        connectNativeAudioNodeToNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output[1], output[2]);\n                    }\n                    else {\n                        const nativeDestinationAudioParam = getNativeAudioParam(output[0]);\n                        nativeSourceAudioNode.connect(nativeDestinationAudioParam, output[1]);\n                    }\n                }\n            }\n        }\n        else {\n            cycleCounters.set(audioNode, cycleCounter - count);\n        }\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/decrement-cycle-counter.js.map","const DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    delayTime: 0,\n    maxDelayTime: 1\n};\nexport const createDelayNodeConstructor = (audioNodeConstructor, createAudioParam, createDelayNodeRenderer, createNativeDelayNode, getNativeContext, isNativeOfflineAudioContext) => {\n    return class DelayNode extends audioNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeDelayNode = createNativeDelayNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const delayNodeRenderer = ((isOffline)\n                ? createDelayNodeRenderer(mergedOptions.maxDelayTime)\n                : null);\n            super(context, false, nativeDelayNode, delayNodeRenderer);\n            // Bug #161: Edge does not export the correct values for maxValue and minValue.\n            this._delayTime = createAudioParam(this, isOffline, nativeDelayNode.delayTime, mergedOptions.maxDelayTime, 0);\n        }\n        get delayTime() {\n            return this._delayTime;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/delay-node-constructor.js.map","import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createDelayNodeRendererFactory = (connectAudioParam, createNativeDelayNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return (maxDelayTime) => {\n        const renderedNativeDelayNodes = new WeakMap();\n        const createDelayNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeDelayNode = getNativeAudioNode(proxy);\n            // If the initially used nativeDelayNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeDelayNodeIsOwnedByContext = isOwnedByContext(nativeDelayNode, nativeOfflineAudioContext);\n            if (!nativeDelayNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeDelayNode.channelCount,\n                    channelCountMode: nativeDelayNode.channelCountMode,\n                    channelInterpretation: nativeDelayNode.channelInterpretation,\n                    delayTime: nativeDelayNode.delayTime.value,\n                    maxDelayTime\n                };\n                nativeDelayNode = createNativeDelayNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeDelayNodes.set(nativeOfflineAudioContext, nativeDelayNode);\n            if (!nativeDelayNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime, trace);\n            }\n            else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime, trace);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDelayNode, trace);\n            return nativeDelayNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeDelayNode = renderedNativeDelayNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeDelayNode !== undefined) {\n                    return Promise.resolve(renderedNativeDelayNode);\n                }\n                return createDelayNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/delay-node-renderer-factory.js.map","export const createDeleteUnrenderedAudioWorkletNode = (getUnrenderedAudioWorkletNodes) => {\n    return (nativeContext, audioWorkletNode) => {\n        getUnrenderedAudioWorkletNodes(nativeContext)\n            .delete(audioWorkletNode);\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/delete-unrendered-audio-worklet-node.js.map","import { isNativeAudioNode } from '../guards/native-audio-node';\nconst getOutputAudioNodeAtIndex = (createIndexSizeError, outputAudioNodes, output) => {\n    const outputAudioNode = outputAudioNodes[output];\n    if (outputAudioNode === undefined) {\n        throw createIndexSizeError();\n    }\n    return outputAudioNode;\n};\nexport const createDisconnectMultipleOutputs = (createIndexSizeError) => {\n    return (outputAudioNodes, destinationOrOutput = undefined, output = undefined, input = 0) => {\n        if (destinationOrOutput === undefined) {\n            return outputAudioNodes\n                .forEach((outputAudioNode) => outputAudioNode.disconnect());\n        }\n        if (typeof destinationOrOutput === 'number') {\n            return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, destinationOrOutput)\n                .disconnect();\n        }\n        if (isNativeAudioNode(destinationOrOutput)) {\n            if (output === undefined) {\n                return outputAudioNodes\n                    .forEach((outputAudioNode) => outputAudioNode.disconnect(destinationOrOutput));\n            }\n            if (input === undefined) {\n                return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output)\n                    .disconnect(destinationOrOutput, 0);\n            }\n            return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output)\n                .disconnect(destinationOrOutput, 0, input);\n        }\n        if (output === undefined) {\n            return outputAudioNodes\n                .forEach((outputAudioNode) => outputAudioNode.disconnect(destinationOrOutput));\n        }\n        return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output)\n            .disconnect(destinationOrOutput, 0);\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/disconnect-multiple-outputs.js.map","const DEFAULT_OPTIONS = {\n    attack: 0.003,\n    channelCount: 2,\n    channelCountMode: 'clamped-max',\n    channelInterpretation: 'speakers',\n    knee: 30,\n    ratio: 12,\n    release: 0.25,\n    threshold: -24\n};\nexport const createDynamicsCompressorNodeConstructor = (audioNodeConstructor, createAudioParam, createDynamicsCompressorNodeRenderer, createNativeDynamicsCompressorNode, createNotSupportedError, getNativeContext, isNativeOfflineAudioContext) => {\n    return class DynamicsCompressorNode extends audioNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const dynamicsCompressorNodeRenderer = ((isOffline)\n                ? createDynamicsCompressorNodeRenderer()\n                : null);\n            super(context, false, nativeDynamicsCompressorNode, dynamicsCompressorNodeRenderer);\n            // Bug #110: Edge does not export the correct values for maxValue and minValue.\n            this._attack = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.attack, 1, 0);\n            this._knee = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.knee, 40, 0);\n            this._nativeDynamicsCompressorNode = nativeDynamicsCompressorNode;\n            this._ratio = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.ratio, 20, 1);\n            this._release = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.release, 1, 0);\n            this._threshold = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.threshold, 0, -100);\n        }\n        get attack() {\n            return this._attack;\n        }\n        /*\n         * Bug #108: Only Chrome, Firefox and Opera disallow a channelCount of three and above yet which is why the getter and setter needs\n         * to be overwritten here.\n         */\n        get channelCount() {\n            return this._nativeDynamicsCompressorNode.channelCount;\n        }\n        set channelCount(value) {\n            const previousChannelCount = this._nativeDynamicsCompressorNode.channelCount;\n            this._nativeDynamicsCompressorNode.channelCount = value;\n            if (value > 2) {\n                this._nativeDynamicsCompressorNode.channelCount = previousChannelCount;\n                throw createNotSupportedError();\n            }\n        }\n        /*\n         * Bug #109: Only Chrome, Firefox and Opera disallow a channelCountMode of 'max' yet which is why the getter and setter needs to be\n         * overwritten here.\n         */\n        get channelCountMode() {\n            return this._nativeDynamicsCompressorNode.channelCountMode;\n        }\n        set channelCountMode(value) {\n            const previousChannelCount = this._nativeDynamicsCompressorNode.channelCountMode;\n            this._nativeDynamicsCompressorNode.channelCountMode = value;\n            if (value === 'max') {\n                this._nativeDynamicsCompressorNode.channelCountMode = previousChannelCount;\n                throw createNotSupportedError();\n            }\n        }\n        get knee() {\n            return this._knee;\n        }\n        get ratio() {\n            return this._ratio;\n        }\n        get reduction() {\n            // Bug #111: Safari returns an AudioParam instead of a number.\n            if (typeof this._nativeDynamicsCompressorNode.reduction.value === 'number') {\n                return this._nativeDynamicsCompressorNode.reduction.value;\n            }\n            return this._nativeDynamicsCompressorNode.reduction;\n        }\n        get release() {\n            return this._release;\n        }\n        get threshold() {\n            return this._threshold;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/dynamics-compressor-node-constructor.js.map","import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createDynamicsCompressorNodeRendererFactory = (connectAudioParam, createNativeDynamicsCompressorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeDynamicsCompressorNodes = new WeakMap();\n        const createDynamicsCompressorNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeDynamicsCompressorNode = getNativeAudioNode(proxy);\n            /*\n             * If the initially used nativeDynamicsCompressorNode was not constructed on the same OfflineAudioContext it needs to be\n             * created again.\n             */\n            const nativeDynamicsCompressorNodeIsOwnedByContext = isOwnedByContext(nativeDynamicsCompressorNode, nativeOfflineAudioContext);\n            if (!nativeDynamicsCompressorNodeIsOwnedByContext) {\n                const options = {\n                    attack: nativeDynamicsCompressorNode.attack.value,\n                    channelCount: nativeDynamicsCompressorNode.channelCount,\n                    channelCountMode: nativeDynamicsCompressorNode.channelCountMode,\n                    channelInterpretation: nativeDynamicsCompressorNode.channelInterpretation,\n                    knee: nativeDynamicsCompressorNode.knee.value,\n                    ratio: nativeDynamicsCompressorNode.ratio.value,\n                    release: nativeDynamicsCompressorNode.release.value,\n                    threshold: nativeDynamicsCompressorNode.threshold.value\n                };\n                nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeDynamicsCompressorNodes.set(nativeOfflineAudioContext, nativeDynamicsCompressorNode);\n            if (!nativeDynamicsCompressorNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold, trace);\n            }\n            else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold, trace);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDynamicsCompressorNode, trace);\n            return nativeDynamicsCompressorNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeDynamicsCompressorNode = renderedNativeDynamicsCompressorNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeDynamicsCompressorNode !== undefined) {\n                    return Promise.resolve(renderedNativeDynamicsCompressorNode);\n                }\n                return createDynamicsCompressorNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/dynamics-compressor-node-renderer-factory.js.map","export const createEncodingError = () => {\n    try {\n        return new DOMException('', 'EncodingError');\n    }\n    catch (err) {\n        // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.\n        err.code = 0;\n        err.name = 'EncodingError';\n        return err;\n    }\n};\n//# sourceMappingURL=/build/es2019/factories/encoding-error.js.map","export const createEvaluateSource = (window) => {\n    return (source) => new Promise((resolve, reject) => {\n        if (window === null) {\n            reject(new SyntaxError());\n            return;\n        }\n        const head = window.document.head;\n        if (head === null) {\n            reject(new SyntaxError());\n        }\n        else {\n            const script = window.document.createElement('script');\n            // @todo Safari doesn't like URLs with a type of 'application/javascript; charset=utf-8'.\n            const blob = new Blob([source], { type: 'application/javascript' });\n            const url = URL.createObjectURL(blob);\n            const originalOnErrorHandler = window.onerror;\n            const removeErrorEventListenerAndRevokeUrl = () => {\n                window.onerror = originalOnErrorHandler;\n                URL.revokeObjectURL(url);\n            };\n            window.onerror = (message, src, lineno, colno, error) => {\n                // @todo Edge thinks the source is the one of the html document.\n                if (src === url || (src === window.location.href && lineno === 1 && colno === 1)) {\n                    removeErrorEventListenerAndRevokeUrl();\n                    reject(error);\n                    return false;\n                }\n                if (originalOnErrorHandler !== null) {\n                    return originalOnErrorHandler(message, src, lineno, colno, error);\n                }\n            };\n            script.onerror = () => {\n                removeErrorEventListenerAndRevokeUrl();\n                reject(new SyntaxError());\n            };\n            script.onload = () => {\n                removeErrorEventListenerAndRevokeUrl();\n                resolve();\n            };\n            script.src = url;\n            script.type = 'module';\n            head.appendChild(script);\n        }\n    });\n};\n//# sourceMappingURL=/build/es2019/factories/evaluate-source.js.map","export const createEventTargetConstructor = (wrapEventListener) => {\n    return class EventTarget {\n        constructor(_nativeEventTarget) {\n            this._nativeEventTarget = _nativeEventTarget;\n            this._listeners = new WeakMap();\n        }\n        addEventListener(type, listener, options) {\n            if (listener !== null) {\n                let wrappedEventListener = this._listeners.get(listener);\n                if (wrappedEventListener === undefined) {\n                    wrappedEventListener = wrapEventListener(this, listener);\n                    if (typeof listener === 'function') {\n                        this._listeners.set(listener, wrappedEventListener);\n                    }\n                }\n                this._nativeEventTarget.addEventListener(type, wrappedEventListener, options);\n            }\n        }\n        dispatchEvent(event) {\n            return this._nativeEventTarget.dispatchEvent(event);\n        }\n        removeEventListener(type, listener, options) {\n            const wrappedEventListener = (listener === null) ? undefined : this._listeners.get(listener);\n            this._nativeEventTarget.removeEventListener(type, (wrappedEventListener === undefined) ? null : wrappedEventListener, options);\n        }\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/event-target-constructor.js.map","export const createExposeCurrentFrameAndCurrentTime = (window) => {\n    return (currentTime, sampleRate, fn) => {\n        Object.defineProperties(window, {\n            currentFrame: {\n                configurable: true,\n                get() {\n                    return Math.round(currentTime * sampleRate);\n                }\n            },\n            currentTime: {\n                configurable: true,\n                get() {\n                    return currentTime;\n                }\n            }\n        });\n        try {\n            return fn();\n        }\n        finally {\n            if (window !== null) {\n                delete window.currentFrame;\n                delete window.currentTime;\n            }\n        }\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/expose-current-frame-and-current-time.js.map","export const createFetchSource = (createAbortError) => {\n    return async (url) => {\n        try {\n            const response = await fetch(url);\n            if (response.ok) {\n                return response.text();\n            }\n        }\n        catch { /* Ignore errors. */ } // tslint:disable-line:no-empty\n        throw createAbortError();\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/fetch-source.js.map","import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    gain: 1\n};\nexport const createGainNodeConstructor = (audioNodeConstructor, createAudioParam, createGainNodeRenderer, createNativeGainNode, getNativeContext, isNativeOfflineAudioContext) => {\n    return class GainNode extends audioNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeGainNode = createNativeGainNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const gainNodeRenderer = ((isOffline) ? createGainNodeRenderer() : null);\n            super(context, false, nativeGainNode, gainNodeRenderer);\n            // Bug #74: Edge & Safari do not export the correct values for maxValue and minValue.\n            this._gain = createAudioParam(this, isOffline, nativeGainNode.gain, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n        }\n        get gain() {\n            return this._gain;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/gain-node-constructor.js.map","import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createGainNodeRendererFactory = (connectAudioParam, createNativeGainNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeGainNodes = new WeakMap();\n        const createGainNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeGainNode = getNativeAudioNode(proxy);\n            // If the initially used nativeGainNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeGainNodeIsOwnedByContext = isOwnedByContext(nativeGainNode, nativeOfflineAudioContext);\n            if (!nativeGainNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeGainNode.channelCount,\n                    channelCountMode: nativeGainNode.channelCountMode,\n                    channelInterpretation: nativeGainNode.channelInterpretation,\n                    gain: nativeGainNode.gain.value\n                };\n                nativeGainNode = createNativeGainNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeGainNodes.set(nativeOfflineAudioContext, nativeGainNode);\n            if (!nativeGainNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain, trace);\n            }\n            else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain, trace);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeGainNode, trace);\n            return nativeGainNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeGainNode = renderedNativeGainNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeGainNode !== undefined) {\n                    return Promise.resolve(renderedNativeGainNode);\n                }\n                return createGainNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/gain-node-renderer-factory.js.map","export const createGetAudioNodeRenderer = (getAudioNodeConnections) => {\n    return (audioNode) => {\n        const audioNodeConnections = getAudioNodeConnections(audioNode);\n        if (audioNodeConnections.renderer === null) {\n            throw new Error('Missing the renderer of the given AudioNode in the audio graph.');\n        }\n        return audioNodeConnections.renderer;\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/get-audio-node-renderer.js.map","export const createGetAudioParamRenderer = (getAudioParamConnections) => {\n    return (audioParam) => {\n        const audioParamConnections = getAudioParamConnections(audioParam);\n        if (audioParamConnections.renderer === null) {\n            throw new Error('Missing the renderer of the given AudioParam in the audio graph.');\n        }\n        return audioParamConnections.renderer;\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/get-audio-param-renderer.js.map","import { BACKUP_NATIVE_CONTEXT_STORE } from '../globals';\nexport const createGetBackupNativeContext = (isNativeOfflineAudioContext, nativeAudioContextConstructor, nativeOfflineAudioContextConstructor) => {\n    return (nativeContext) => {\n        /*\n         * Bug #50: Only Edge does currently not allow to create AudioNodes on a closed context yet which is why there needs to be no\n         * backupNativeContext in that case.\n         */\n        if (nativeContext.state === 'closed'\n            && nativeAudioContextConstructor !== null\n            && nativeAudioContextConstructor.name !== 'webkitAudioContext') {\n            if (isNativeOfflineAudioContext(nativeContext)) {\n                const backupNativeContext = BACKUP_NATIVE_CONTEXT_STORE.get(nativeContext);\n                if (backupNativeContext !== undefined) {\n                    return backupNativeContext;\n                }\n                if (nativeOfflineAudioContextConstructor !== null) {\n                    // @todo Copy the attached AudioWorkletProcessors and other settings.\n                    const bckpNtveCntxt = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n                    BACKUP_NATIVE_CONTEXT_STORE.set(nativeContext, bckpNtveCntxt);\n                    return bckpNtveCntxt;\n                }\n            }\n            else {\n                const backupNativeContext = BACKUP_NATIVE_CONTEXT_STORE.get(nativeContext);\n                if (backupNativeContext !== undefined) {\n                    return backupNativeContext;\n                }\n                // @todo Copy the attached AudioWorkletProcessors and other settings.\n                const bckpNtveCntxt = new nativeAudioContextConstructor();\n                BACKUP_NATIVE_CONTEXT_STORE.set(nativeContext, bckpNtveCntxt);\n                return bckpNtveCntxt;\n            }\n        }\n        return null;\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/get-backup-native-context.js.map","import { createInvalidStateError } from './invalid-state-error';\nexport const createGetNativeContext = (contextStore) => {\n    return (context) => {\n        const nativeContext = contextStore.get(context);\n        if (nativeContext === undefined) {\n            throw createInvalidStateError();\n        }\n        return nativeContext;\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/get-native-context.js.map","export const createGetUnrenderedAudioWorkletNodes = (unrenderedAudioWorkletNodeStore) => {\n    return (nativeContext) => {\n        const unrenderedAudioWorkletNodes = unrenderedAudioWorkletNodeStore.get(nativeContext);\n        if (unrenderedAudioWorkletNodes === undefined) {\n            throw new Error('The context has no set of AudioWorkletNodes.');\n        }\n        return unrenderedAudioWorkletNodes;\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/get-unrendered-audio-worklet-nodes.js.map","import { filterBuffer } from '../helpers/filter-buffer';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nconst filterFullBuffer = (renderedBuffer, nativeOfflineAudioContext, feedback, feedforward) => {\n    const feedbackLength = feedback.length;\n    const feedforwardLength = feedforward.length;\n    const minLength = Math.min(feedbackLength, feedforwardLength);\n    if (feedback[0] !== 1) {\n        for (let i = 0; i < feedbackLength; i += 1) {\n            feedforward[i] /= feedback[0];\n        }\n        for (let i = 1; i < feedforwardLength; i += 1) {\n            feedback[i] /= feedback[0];\n        }\n    }\n    const bufferLength = 32;\n    const xBuffer = new Float32Array(bufferLength);\n    const yBuffer = new Float32Array(bufferLength);\n    const filteredBuffer = nativeOfflineAudioContext.createBuffer(renderedBuffer.numberOfChannels, renderedBuffer.length, renderedBuffer.sampleRate);\n    const numberOfChannels = renderedBuffer.numberOfChannels;\n    for (let i = 0; i < numberOfChannels; i += 1) {\n        const input = renderedBuffer.getChannelData(i);\n        const output = filteredBuffer.getChannelData(i);\n        xBuffer.fill(0);\n        yBuffer.fill(0);\n        filterBuffer(feedback, feedbackLength, feedforward, feedforwardLength, minLength, xBuffer, yBuffer, 0, bufferLength, input, output);\n    }\n    return filteredBuffer;\n};\nexport const createIIRFilterNodeRendererFactory = (createNativeAudioBufferSourceNode, createNativeAudioNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderInputsOfAudioNode, renderNativeOfflineAudioContext) => {\n    return (feedback, feedforward) => {\n        const renderedNativeAudioNodes = new WeakMap();\n        let filteredBufferPromise = null;\n        const createAudioNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeAudioBufferSourceNode = null;\n            let nativeIIRFilterNode = getNativeAudioNode(proxy);\n            // If the initially used nativeIIRFilterNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeIIRFilterNodeIsOwnedByContext = isOwnedByContext(nativeIIRFilterNode, nativeOfflineAudioContext);\n            // Bug #9: Safari does not support IIRFilterNodes.\n            if (nativeOfflineAudioContext.createIIRFilter === undefined) {\n                nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext);\n            }\n            else if (!nativeIIRFilterNodeIsOwnedByContext) {\n                nativeIIRFilterNode = createNativeAudioNode(nativeOfflineAudioContext, (ntvCntxt) => {\n                    return ntvCntxt.createIIRFilter(feedforward, feedback);\n                });\n            }\n            renderedNativeAudioNodes.set(nativeOfflineAudioContext, (nativeAudioBufferSourceNode === null) ? nativeIIRFilterNode : nativeAudioBufferSourceNode);\n            if (nativeAudioBufferSourceNode !== null) {\n                if (filteredBufferPromise === null) {\n                    if (nativeOfflineAudioContextConstructor === null) {\n                        throw new Error('Missing the native OfflineAudioContext constructor.');\n                    }\n                    const partialOfflineAudioContext = new nativeOfflineAudioContextConstructor(\n                    // Bug #47: The AudioDestinationNode in Edge and Safari gets not initialized correctly.\n                    proxy.context.destination.channelCount, \n                    // Bug #17: Safari does not yet expose the length.\n                    proxy.context.length, nativeOfflineAudioContext.sampleRate);\n                    filteredBufferPromise = (async () => {\n                        await renderInputsOfAudioNode(proxy, partialOfflineAudioContext, partialOfflineAudioContext.destination, trace);\n                        const renderedBuffer = await renderNativeOfflineAudioContext(partialOfflineAudioContext);\n                        return filterFullBuffer(renderedBuffer, nativeOfflineAudioContext, feedback, feedforward);\n                    })();\n                }\n                const filteredBuffer = await filteredBufferPromise;\n                nativeAudioBufferSourceNode.buffer = filteredBuffer;\n                nativeAudioBufferSourceNode.start(0);\n                return nativeAudioBufferSourceNode;\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeIIRFilterNode, trace);\n            return nativeIIRFilterNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeAudioNode !== undefined) {\n                    return Promise.resolve(renderedNativeAudioNode);\n                }\n                return createAudioNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/iir-filter-node-renderer-factory.js.map","import { isAudioNodeOutputConnection } from '../guards/audio-node-output-connection';\nexport const createIncrementCycleCounterFactory = (cycleCounters, disconnectNativeAudioNodeFromNativeAudioNode, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, isActiveAudioNode) => {\n    return (isOffline) => {\n        return (audioNode, count) => {\n            const cycleCounter = cycleCounters.get(audioNode);\n            if (cycleCounter === undefined) {\n                if (!isOffline && isActiveAudioNode(audioNode)) {\n                    const nativeSourceAudioNode = getNativeAudioNode(audioNode);\n                    const { outputs } = getAudioNodeConnections(audioNode);\n                    for (const output of outputs) {\n                        if (isAudioNodeOutputConnection(output)) {\n                            const nativeDestinationAudioNode = getNativeAudioNode(output[0]);\n                            disconnectNativeAudioNodeFromNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output[1], output[2]);\n                        }\n                        else {\n                            const nativeDestinationAudioParam = getNativeAudioParam(output[0]);\n                            nativeSourceAudioNode.disconnect(nativeDestinationAudioParam, output[1]);\n                        }\n                    }\n                }\n                cycleCounters.set(audioNode, count);\n            }\n            else {\n                cycleCounters.set(audioNode, cycleCounter + count);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/increment-cycle-counter-factory.js.map","export const createIsAnyAudioContext = (contextStore, isNativeAudioContext) => {\n    return (anything) => {\n        const nativeContext = contextStore.get(anything);\n        return isNativeAudioContext(nativeContext) || isNativeAudioContext(anything);\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/is-any-audio-context.js.map","export const createIsAnyAudioNode = (audioNodeStore, isNativeAudioNode) => {\n    return (anything) => audioNodeStore.has(anything) || isNativeAudioNode(anything);\n};\n//# sourceMappingURL=/build/es2019/factories/is-any-audio-node.js.map","export const createIsAnyAudioParam = (audioParamStore, isNativeAudioParam) => {\n    return (anything) => audioParamStore.has(anything) || isNativeAudioParam(anything);\n};\n//# sourceMappingURL=/build/es2019/factories/is-any-audio-param.js.map","export const createIsAnyOfflineAudioContext = (contextStore, isNativeOfflineAudioContext) => {\n    return (anything) => {\n        const nativeContext = contextStore.get(anything);\n        return isNativeOfflineAudioContext(nativeContext) || isNativeOfflineAudioContext(anything);\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/is-any-offline-audio-context.js.map","export const createIsNativeAudioContext = (nativeAudioContextConstructor) => {\n    return (anything) => {\n        return (nativeAudioContextConstructor !== null && anything instanceof nativeAudioContextConstructor);\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/is-native-audio-context.js.map","export const createIsNativeAudioNode = (window) => {\n    return (anything) => {\n        return (window !== null && typeof window.AudioNode === 'function' && anything instanceof window.AudioNode);\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/is-native-audio-node.js.map","export const createIsNativeAudioParam = (window) => {\n    return (anything) => {\n        return (window !== null && typeof window.AudioParam === 'function' && anything instanceof window.AudioParam);\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/is-native-audio-param.js.map","export const createIsNativeContext = (isNativeAudioContext, isNativeOfflineAudioContext) => {\n    return (anything) => {\n        return (isNativeAudioContext(anything) || isNativeOfflineAudioContext(anything));\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/is-native-context.js.map","export const createIsNativeOfflineAudioContext = (nativeOfflineAudioContextConstructor) => {\n    return (anything) => {\n        return (nativeOfflineAudioContextConstructor !== null && anything instanceof nativeOfflineAudioContextConstructor);\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/is-native-offline-audio-context.js.map","export const createIsSecureContext = (window) => (window !== null && window.isSecureContext);\n//# sourceMappingURL=/build/es2019/factories/is-secure-context.js.map","export const createIsSupportedPromise = async (cacheTestResult, testAudioBufferCopyChannelMethodsSubarraySupport, testAudioContextCloseMethodSupport, testAudioContextDecodeAudioDataMethodTypeErrorSupport, testAudioContextOptionsSupport, testAudioNodeConnectMethodSupport, testAudioWorkletProcessorNoOutputsSupport, testChannelMergerNodeChannelCountSupport, testConstantSourceNodeAccurateSchedulingSupport, testConvolverNodeBufferReassignabilitySupport, testIsSecureContextSupport, testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport, testStereoPannerNodeDefaultValueSupport, testTransferablesSupport) => {\n    if (cacheTestResult(testAudioBufferCopyChannelMethodsSubarraySupport, testAudioBufferCopyChannelMethodsSubarraySupport)\n        && cacheTestResult(testAudioContextCloseMethodSupport, testAudioContextCloseMethodSupport)\n        && cacheTestResult(testAudioContextOptionsSupport, testAudioContextOptionsSupport)\n        && cacheTestResult(testAudioNodeConnectMethodSupport, testAudioNodeConnectMethodSupport)\n        && cacheTestResult(testChannelMergerNodeChannelCountSupport, testChannelMergerNodeChannelCountSupport)\n        && cacheTestResult(testConstantSourceNodeAccurateSchedulingSupport, testConstantSourceNodeAccurateSchedulingSupport)\n        && cacheTestResult(testConvolverNodeBufferReassignabilitySupport, testConvolverNodeBufferReassignabilitySupport)\n        && cacheTestResult(testIsSecureContextSupport, testIsSecureContextSupport)\n        && cacheTestResult(testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport, testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport)) {\n        const results = await Promise\n            .all([\n            cacheTestResult(testAudioContextDecodeAudioDataMethodTypeErrorSupport, testAudioContextDecodeAudioDataMethodTypeErrorSupport),\n            cacheTestResult(testAudioWorkletProcessorNoOutputsSupport, testAudioWorkletProcessorNoOutputsSupport),\n            cacheTestResult(testStereoPannerNodeDefaultValueSupport, testStereoPannerNodeDefaultValueSupport),\n            cacheTestResult(testTransferablesSupport, testTransferablesSupport)\n        ]);\n        return results.every((result) => result);\n    }\n    return false;\n};\n//# sourceMappingURL=/build/es2019/factories/is-supported-promise.js.map","export const createMediaElementAudioSourceNodeConstructor = (audioNodeConstructor, createNativeMediaElementAudioSourceNode, getNativeContext, isNativeOfflineAudioContext) => {\n    return class MediaElementAudioSourceNode extends audioNodeConstructor {\n        constructor(context, options) {\n            const nativeContext = getNativeContext(context);\n            const nativeMediaElementAudioSourceNode = createNativeMediaElementAudioSourceNode(nativeContext, options);\n            // Bug #171: Safari allows to create a MediaElementAudioSourceNode with an OfflineAudioContext.\n            if (isNativeOfflineAudioContext(nativeContext)) {\n                throw TypeError();\n            }\n            super(context, true, nativeMediaElementAudioSourceNode, null);\n            // Bug #63: Edge does not expose the mediaElement yet.\n            this._mediaElement = options.mediaElement;\n            this._nativeMediaElementAudioSourceNode = nativeMediaElementAudioSourceNode;\n        }\n        get mediaElement() {\n            return (this._nativeMediaElementAudioSourceNode.mediaElement === undefined) ?\n                this._mediaElement :\n                this._nativeMediaElementAudioSourceNode.mediaElement;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/media-element-audio-source-node-constructor.js.map","const DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'explicit',\n    channelInterpretation: 'speakers'\n};\nexport const createMediaStreamAudioDestinationNodeConstructor = (audioNodeConstructor, createNativeMediaStreamAudioDestinationNode, getNativeContext, isNativeOfflineAudioContext) => {\n    return class MediaStreamAudioDestinationNode extends audioNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            // Bug #173: Safari allows to create a MediaStreamAudioDestinationNode with an OfflineAudioContext.\n            if (isNativeOfflineAudioContext(nativeContext)) {\n                throw new TypeError();\n            }\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeMediaStreamAudioDestinationNode = createNativeMediaStreamAudioDestinationNode(nativeContext, mergedOptions);\n            super(context, false, nativeMediaStreamAudioDestinationNode, null);\n            this._nativeMediaStreamAudioDestinationNode = nativeMediaStreamAudioDestinationNode;\n        }\n        get stream() {\n            return this._nativeMediaStreamAudioDestinationNode.stream;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/media-stream-audio-destination-node-constructor.js.map","export const createMediaStreamAudioSourceNodeConstructor = (audioNodeConstructor, createNativeMediaStreamAudioSourceNode, getNativeContext, isNativeOfflineAudioContext) => {\n    return class MediaStreamAudioSourceNode extends audioNodeConstructor {\n        constructor(context, options) {\n            const nativeContext = getNativeContext(context);\n            const nativeMediaStreamAudioSourceNode = createNativeMediaStreamAudioSourceNode(nativeContext, options);\n            // Bug #172: Safari allows to create a MediaStreamAudioSourceNode with an OfflineAudioContext.\n            if (isNativeOfflineAudioContext(nativeContext)) {\n                throw new TypeError();\n            }\n            super(context, true, nativeMediaStreamAudioSourceNode, null);\n            this._nativeMediaStreamAudioSourceNode = nativeMediaStreamAudioSourceNode;\n        }\n        get mediaStream() {\n            return this._nativeMediaStreamAudioSourceNode.mediaStream;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/media-stream-audio-source-node-constructor.js.map","export const createMediaStreamTrackAudioSourceNodeConstructor = (audioNodeConstructor, createNativeMediaStreamTrackAudioSourceNode, getNativeContext) => {\n    return class MediaStreamTrackAudioSourceNode extends audioNodeConstructor {\n        constructor(context, options) {\n            const nativeContext = getNativeContext(context);\n            const nativeMediaStreamTrackAudioSourceNode = createNativeMediaStreamTrackAudioSourceNode(nativeContext, options);\n            super(context, true, nativeMediaStreamTrackAudioSourceNode, null);\n        }\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/media-stream-track-audio-source-node-constructor.js.map","import { isValidLatencyHint } from '../helpers/is-valid-latency-hint';\nexport const createMinimalAudioContextConstructor = (createInvalidStateError, createNotSupportedError, createUnknownError, minimalBaseAudioContextConstructor, nativeAudioContextConstructor) => {\n    return class MinimalAudioContext extends minimalBaseAudioContextConstructor {\n        constructor(options = {}) {\n            if (nativeAudioContextConstructor === null) {\n                throw new Error('Missing the native AudioContext constructor.');\n            }\n            const nativeAudioContext = new nativeAudioContextConstructor(options);\n            // Bug #131 Safari returns null when there are four other AudioContexts running already.\n            if (nativeAudioContext === null) {\n                throw createUnknownError();\n            }\n            // Bug #51 Only Chrome and Opera throw an error if the given latencyHint is invalid.\n            if (!isValidLatencyHint(options.latencyHint)) {\n                throw new TypeError(`The provided value '${options.latencyHint}' is not a valid enum value of type AudioContextLatencyCategory.`);\n            }\n            // Bug #150 Only Chrome, Firefox and Opera support setting the sampleRate.\n            if (options.sampleRate !== undefined && nativeAudioContext.sampleRate !== options.sampleRate) {\n                throw createNotSupportedError();\n            }\n            super(nativeAudioContext, 2);\n            const { latencyHint } = options;\n            const { sampleRate } = nativeAudioContext;\n            // @todo The values for 'balanced', 'interactive' and 'playback' are just copied from Chrome's implementation.\n            this._baseLatency = (typeof nativeAudioContext.baseLatency === 'number')\n                ? nativeAudioContext.baseLatency\n                : (latencyHint === 'balanced')\n                    ? (512 / sampleRate)\n                    : (latencyHint === 'interactive' || latencyHint === undefined)\n                        ? (256 / sampleRate)\n                        : (latencyHint === 'playback')\n                            ? (1024 / sampleRate)\n                            /*\n                             * @todo The min (256) and max (16384) values are taken from the allowed bufferSize values of a\n                             * ScriptProcessorNode.\n                             */\n                            : ((Math.max(2, Math.min(128, Math.round((latencyHint * sampleRate) / 128))) * 128) / sampleRate);\n            this._nativeAudioContext = nativeAudioContext;\n            this._state = null;\n            /*\n             * Bug #34: Chrome and Opera pretend to be running right away, but fire an onstatechange event when the state actually\n             * changes to 'running'.\n             */\n            if (nativeAudioContext.state === 'running') {\n                this._state = 'suspended';\n                const revokeState = () => {\n                    if (this._state === 'suspended') {\n                        this._state = null;\n                    }\n                    nativeAudioContext.removeEventListener('statechange', revokeState);\n                };\n                nativeAudioContext.addEventListener('statechange', revokeState);\n            }\n        }\n        get baseLatency() {\n            return this._baseLatency;\n        }\n        get state() {\n            return (this._state !== null) ? this._state : this._nativeAudioContext.state;\n        }\n        close() {\n            // Bug #35: Firefox does not throw an error if the AudioContext was closed before.\n            if (this.state === 'closed') {\n                return this._nativeAudioContext\n                    .close()\n                    .then(() => {\n                    throw createInvalidStateError();\n                });\n            }\n            // Bug #34: If the state was set to suspended before it should be revoked now.\n            if (this._state === 'suspended') {\n                this._state = null;\n            }\n            return this._nativeAudioContext.close();\n            /*\n             * Bug #50: Deleting the AudioGraph is currently not possible anymore.\n             * ...then(() => deleteAudioGraph(this, this._nativeAudioContext));\n             */\n        }\n        resume() {\n            if (this._state === 'suspended') {\n                return new Promise((resolve, reject) => {\n                    const resolvePromise = () => {\n                        this._nativeAudioContext.removeEventListener('statechange', resolvePromise);\n                        if (this._nativeAudioContext.state === 'running') {\n                            resolve();\n                        }\n                        else {\n                            this\n                                .resume()\n                                .then(resolve, reject);\n                        }\n                    };\n                    this._nativeAudioContext.addEventListener('statechange', resolvePromise);\n                });\n            }\n            return this._nativeAudioContext\n                .resume()\n                .catch((err) => {\n                // Bug #55: Chrome, Edge and Opera do throw an InvalidAccessError instead of an InvalidStateError.\n                // Bug #56: Safari invokes the catch handler but without an error.\n                if (err === undefined || err.code === 15) {\n                    throw createInvalidStateError();\n                }\n                throw err;\n            });\n        }\n        suspend() {\n            return this._nativeAudioContext\n                .suspend()\n                .catch((err) => {\n                // Bug #56: Safari invokes the catch handler but without an error.\n                if (err === undefined) {\n                    throw createInvalidStateError();\n                }\n                throw err;\n            });\n        }\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/minimal-audio-context-constructor.js.map","import { CONTEXT_STORE } from '../globals';\nexport const createMinimalBaseAudioContextConstructor = (audioDestinationNodeConstructor, createAudioListener, eventTargetConstructor, isNativeOfflineAudioContext, unrenderedAudioWorkletNodeStore, wrapEventListener) => {\n    return class MinimalBaseAudioContext extends eventTargetConstructor {\n        constructor(_nativeContext, numberOfChannels) {\n            super(_nativeContext);\n            this._nativeContext = _nativeContext;\n            CONTEXT_STORE.set(this, _nativeContext);\n            // Bug #93: Edge will set the sampleRate of an AudioContext to zero when it is closed.\n            const sampleRate = _nativeContext.sampleRate;\n            Object.defineProperty(_nativeContext, 'sampleRate', {\n                get: () => sampleRate\n            });\n            if (isNativeOfflineAudioContext(_nativeContext)) {\n                unrenderedAudioWorkletNodeStore.set(_nativeContext, new Set());\n            }\n            this._destination = new audioDestinationNodeConstructor(this, numberOfChannels);\n            this._listener = createAudioListener(this, _nativeContext);\n            this._onstatechange = null;\n        }\n        get currentTime() {\n            return this._nativeContext.currentTime;\n        }\n        get destination() {\n            return this._destination;\n        }\n        get listener() {\n            return this._listener;\n        }\n        get onstatechange() {\n            return this._onstatechange;\n        }\n        set onstatechange(value) {\n            const wrappedListener = (typeof value === 'function') ? wrapEventListener(this, value) : null;\n            this._nativeContext.onstatechange = wrappedListener;\n            const nativeOnStateChange = this._nativeContext.onstatechange;\n            this._onstatechange = (nativeOnStateChange !== null && nativeOnStateChange === wrappedListener)\n                ? value\n                : nativeOnStateChange;\n        }\n        get sampleRate() {\n            return this._nativeContext.sampleRate;\n        }\n        get state() {\n            return this._nativeContext.state;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/minimal-base-audio-context-constructor.js.map","import { testPromiseSupport } from '../helpers/test-promise-support';\nconst DEFAULT_OPTIONS = {\n    numberOfChannels: 1\n};\nexport const createMinimalOfflineAudioContextConstructor = (cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, minimalBaseAudioContextConstructor, startRendering) => {\n    return class MinimalOfflineAudioContext extends minimalBaseAudioContextConstructor {\n        constructor(options) {\n            const { length, numberOfChannels, sampleRate } = { ...DEFAULT_OPTIONS, ...options };\n            const nativeOfflineAudioContext = createNativeOfflineAudioContext(numberOfChannels, length, sampleRate);\n            // #21 Safari does not support promises and therefore would fire the statechange event before the promise can be resolved.\n            if (!cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeOfflineAudioContext))) {\n                nativeOfflineAudioContext.addEventListener('statechange', (() => {\n                    let i = 0;\n                    const delayStateChangeEvent = (event) => {\n                        if (this._state === 'running') {\n                            if (i > 0) {\n                                nativeOfflineAudioContext.removeEventListener('statechange', delayStateChangeEvent);\n                                event.stopImmediatePropagation();\n                                this._waitForThePromiseToSettle(event);\n                            }\n                            else {\n                                i += 1;\n                            }\n                        }\n                    };\n                    return delayStateChangeEvent;\n                })());\n            }\n            super(nativeOfflineAudioContext, numberOfChannels);\n            this._length = length;\n            this._nativeOfflineAudioContext = nativeOfflineAudioContext;\n            this._state = null;\n        }\n        get length() {\n            // Bug #17: Safari does not yet expose the length.\n            if (this._nativeOfflineAudioContext.length === undefined) {\n                return this._length;\n            }\n            return this._nativeOfflineAudioContext.length;\n        }\n        get state() {\n            return (this._state === null) ? this._nativeOfflineAudioContext.state : this._state;\n        }\n        startRendering() {\n            /*\n             * Bug #9 & #59: It is theoretically possible that startRendering() will first render a partialOfflineAudioContext. Therefore\n             * the state of the nativeOfflineAudioContext might no transition to running immediately.\n             */\n            if (this._state === 'running') {\n                return Promise.reject(createInvalidStateError());\n            }\n            this._state = 'running';\n            return startRendering(this.destination, this._nativeOfflineAudioContext)\n                .then((audioBuffer) => {\n                this._state = null;\n                /*\n                 * Bug #50: Deleting the AudioGraph is currently not possible anymore.\n                 * deleteAudioGraph(this, this._nativeOfflineAudioContext);\n                 */\n                return audioBuffer;\n            })\n                // @todo This could be written more elegantly when Promise.finally() becomes avalaible.\n                .catch((err) => {\n                this._state = null;\n                /*\n                 * Bug #50: Deleting the AudioGraph is currently not possible anymore.\n                 * deleteAudioGraph(this, this._nativeOfflineAudioContext);\n                 */\n                throw err;\n            });\n        }\n        _waitForThePromiseToSettle(event) {\n            if (this._state === null) {\n                this._nativeOfflineAudioContext.dispatchEvent(event);\n            }\n            else {\n                setTimeout(() => this._waitForThePromiseToSettle(event));\n            }\n        }\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/minimal-offline-audio-context-constructor.js.map","export const createMonitorConnections = (insertElementInSet, isNativeAudioNode) => {\n    return (nativeAudioNode, whenConnected, whenDisconnected) => {\n        const connections = new Set();\n        nativeAudioNode.connect = ((connect) => {\n            return (destination, output = 0, input = 0) => {\n                const wasDisconnected = connections.size === 0;\n                if (isNativeAudioNode(destination)) {\n                    // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.\n                    connect.call(nativeAudioNode, destination, output, input);\n                    insertElementInSet(connections, [destination, output, input], (connection) => (connection[0] === destination && connection[1] === output && connection[2] === input), true);\n                    if (wasDisconnected) {\n                        whenConnected();\n                    }\n                    return destination;\n                }\n                connect.call(nativeAudioNode, destination, output);\n                insertElementInSet(connections, [destination, output], (connection) => (connection[0] === destination && connection[1] === output), true);\n                if (wasDisconnected) {\n                    whenConnected();\n                }\n                return;\n            };\n        })(nativeAudioNode.connect);\n        nativeAudioNode.disconnect = ((disconnect) => {\n            return (destinationOrOutput, output, input) => {\n                const wasConnected = connections.size > 0;\n                if (destinationOrOutput === undefined) {\n                    disconnect.apply(nativeAudioNode);\n                    connections.clear();\n                }\n                else if (typeof destinationOrOutput === 'number') {\n                    // @todo TypeScript cannot infer the overloaded signature with 1 argument yet.\n                    disconnect.call(nativeAudioNode, destinationOrOutput);\n                    for (const connection of connections) {\n                        if (connection[1] === destinationOrOutput) {\n                            connections.delete(connection);\n                        }\n                    }\n                }\n                else {\n                    if (isNativeAudioNode(destinationOrOutput)) {\n                        // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.\n                        disconnect.call(nativeAudioNode, destinationOrOutput, output, input);\n                    }\n                    else {\n                        // @todo TypeScript cannot infer the overloaded signature with 2 arguments yet.\n                        disconnect.call(nativeAudioNode, destinationOrOutput, output);\n                    }\n                    for (const connection of connections) {\n                        if (connection[0] === destinationOrOutput\n                            && (output === undefined || connection[1] === output)\n                            && (input === undefined || connection[2] === input)) {\n                            connections.delete(connection);\n                        }\n                    }\n                }\n                const isDisconnected = connections.size === 0;\n                if (wasConnected && isDisconnected) {\n                    whenDisconnected();\n                }\n            };\n        })(nativeAudioNode.disconnect);\n        return nativeAudioNode;\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/monitor-connections.js.map","export const createNativeAudioBufferConstructor = (window) => {\n    if (window === null) {\n        return null;\n    }\n    if (window.hasOwnProperty('AudioBuffer')) {\n        return window.AudioBuffer;\n    }\n    return null;\n};\n//# sourceMappingURL=/build/es2019/factories/native-audio-buffer-constructor.js.map","export const createNativeAudioContextConstructor = (window) => {\n    if (window === null) {\n        return null;\n    }\n    if (window.hasOwnProperty('AudioContext')) {\n        return window.AudioContext;\n    }\n    return (window.hasOwnProperty('webkitAudioContext')) ? window.webkitAudioContext : null;\n};\n//# sourceMappingURL=/build/es2019/factories/native-audio-context-constructor.js.map","export const createNativeAudioDestinationNodeFactory = (createNativeGainNode, overwriteAccessors) => {\n    return (nativeContext, channelCount, isNodeOfNativeOfflineAudioContext) => {\n        const nativeAudioDestinationNode = nativeContext.destination;\n        // Bug #132: Edge & Safari do not have the correct channelCount.\n        if (nativeAudioDestinationNode.channelCount !== channelCount) {\n            try {\n                nativeAudioDestinationNode.channelCount = channelCount;\n            }\n            catch {\n                // Bug #169: Safari throws an error on each attempt to change the channelCount.\n            }\n        }\n        // Bug #83: Edge & Safari do not have the correct channelCountMode.\n        if (isNodeOfNativeOfflineAudioContext && nativeAudioDestinationNode.channelCountMode !== 'explicit') {\n            nativeAudioDestinationNode.channelCountMode = 'explicit';\n        }\n        // Bug #47: The AudioDestinationNode in Edge and Safari does not initialize the maxChannelCount property correctly.\n        if (nativeAudioDestinationNode.maxChannelCount === 0) {\n            Object.defineProperty(nativeAudioDestinationNode, 'maxChannelCount', {\n                value: channelCount\n            });\n        }\n        // Bug #168: No browser does yet have an AudioDestinationNode with an output.\n        const gainNode = createNativeGainNode(nativeContext, {\n            channelCount,\n            channelCountMode: nativeAudioDestinationNode.channelCountMode,\n            channelInterpretation: nativeAudioDestinationNode.channelInterpretation,\n            gain: 1\n        });\n        overwriteAccessors(gainNode, 'channelCount', (get) => () => get.call(gainNode), (set) => (value) => {\n            set.call(gainNode, value);\n            try {\n                nativeAudioDestinationNode.channelCount = value;\n            }\n            catch (err) {\n                // Bug #169: Safari throws an error on each attempt to change the channelCount.\n                if (value > nativeAudioDestinationNode.maxChannelCount) {\n                    throw err;\n                }\n            }\n        });\n        overwriteAccessors(gainNode, 'channelCountMode', (get) => () => get.call(gainNode), (set) => (value) => {\n            set.call(gainNode, value);\n            nativeAudioDestinationNode.channelCountMode = value;\n        });\n        overwriteAccessors(gainNode, 'channelInterpretation', (get) => () => get.call(gainNode), (set) => (value) => {\n            set.call(gainNode, value);\n            nativeAudioDestinationNode.channelInterpretation = value;\n        });\n        Object.defineProperty(gainNode, 'maxChannelCount', {\n            get: () => nativeAudioDestinationNode.maxChannelCount\n        });\n        // @todo This should be disconnected when the context is closed.\n        gainNode.connect(nativeAudioDestinationNode);\n        return gainNode;\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/native-audio-destination-node.js.map","export const createNativeAudioNodeFactory = (getBackupNativeContext) => {\n    return (nativeContext, factoryFunction) => {\n        // Bug #50: Only Edge does currently not allow to create AudioNodes on a closed context yet.\n        const backupNativeContext = getBackupNativeContext(nativeContext);\n        if (backupNativeContext !== null) {\n            return factoryFunction(backupNativeContext);\n        }\n        return factoryFunction(nativeContext);\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/native-audio-node-factory.js.map","export const createNativeAudioWorkletNodeConstructor = (window) => {\n    if (window === null) {\n        return null;\n    }\n    return (window.hasOwnProperty('AudioWorkletNode')) ? window.AudioWorkletNode : null;\n};\n//# sourceMappingURL=/build/es2019/factories/native-audio-worklet-node-constructor.js.map","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeBiquadFilterNodeFactory = (createNativeAudioNode) => {\n    return (nativeContext, options) => {\n        const nativeBiquadFilterNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createBiquadFilter());\n        assignNativeAudioNodeOptions(nativeBiquadFilterNode, options);\n        assignNativeAudioNodeAudioParamValue(nativeBiquadFilterNode, options, 'Q');\n        assignNativeAudioNodeAudioParamValue(nativeBiquadFilterNode, options, 'detune');\n        assignNativeAudioNodeAudioParamValue(nativeBiquadFilterNode, options, 'frequency');\n        assignNativeAudioNodeAudioParamValue(nativeBiquadFilterNode, options, 'gain');\n        assignNativeAudioNodeOption(nativeBiquadFilterNode, options, 'type');\n        return nativeBiquadFilterNode;\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/native-biquad-filter-node-factory.js.map","import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeChannelMergerNodeFactory = (createNativeAudioNode, wrapChannelMergerNode) => {\n    return (nativeContext, options) => {\n        const nativeChannelMergerNode = createNativeAudioNode(nativeContext, (ntvCntxt) => {\n            return ntvCntxt.createChannelMerger(options.numberOfInputs);\n        });\n        // Bug #15: Safari does not return the default properties.\n        if (nativeChannelMergerNode.channelCount !== 1 &&\n            nativeChannelMergerNode.channelCountMode !== 'explicit') {\n            wrapChannelMergerNode(nativeContext, nativeChannelMergerNode);\n        }\n        assignNativeAudioNodeOptions(nativeChannelMergerNode, options);\n        return nativeChannelMergerNode;\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/native-channel-merger-node-factory.js.map","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { wrapAudioScheduledSourceNodeStartMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters';\nimport { wrapAudioScheduledSourceNodeStopMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters';\nexport const createNativeConstantSourceNodeFactory = (cacheTestResult, createNativeAudioNode, createNativeConstantSourceNodeFaker, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport) => {\n    return (nativeContext, options) => {\n        // Bug #62: Edge & Safari do not support ConstantSourceNodes.\n        if (nativeContext.createConstantSource === undefined) {\n            return createNativeConstantSourceNodeFaker(nativeContext, options);\n        }\n        const nativeConstantSourceNode = createNativeAudioNode(nativeContext, (ntvCntxt) => {\n            return ntvCntxt.createConstantSource();\n        });\n        assignNativeAudioNodeOptions(nativeConstantSourceNode, options);\n        assignNativeAudioNodeAudioParamValue(nativeConstantSourceNode, options, 'offset');\n        // Bug #44: Only Chrome, Firefox & Opera throw a RangeError yet.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(nativeContext))) {\n            wrapAudioScheduledSourceNodeStartMethodNegativeParameters(nativeConstantSourceNode);\n        }\n        // Bug #44: Only Firefox does not throw a RangeError yet.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(nativeContext))) {\n            wrapAudioScheduledSourceNodeStopMethodNegativeParameters(nativeConstantSourceNode);\n        }\n        return nativeConstantSourceNode;\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/native-constant-source-node-factory.js.map","import { interceptConnections } from '../helpers/intercept-connections';\nexport const createNativeConstantSourceNodeFakerFactory = (createNativeAudioBufferSourceNode, createNativeGainNode, monitorConnections) => {\n    return (nativeContext, { offset, ...audioNodeOptions }) => {\n        const audioBuffer = nativeContext.createBuffer(1, 2, nativeContext.sampleRate);\n        const audioBufferSourceNode = createNativeAudioBufferSourceNode(nativeContext);\n        const gainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, gain: offset });\n        // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n        const channelData = audioBuffer.getChannelData(0);\n        // Bug #95: Safari does not play or loop one sample buffers.\n        channelData[0] = 1;\n        channelData[1] = 1;\n        audioBufferSourceNode.buffer = audioBuffer;\n        audioBufferSourceNode.loop = true;\n        const nativeConstantSourceNodeFaker = {\n            get bufferSize() {\n                return undefined;\n            },\n            get channelCount() {\n                return gainNode.channelCount;\n            },\n            set channelCount(value) {\n                gainNode.channelCount = value;\n            },\n            get channelCountMode() {\n                return gainNode.channelCountMode;\n            },\n            set channelCountMode(value) {\n                gainNode.channelCountMode = value;\n            },\n            get channelInterpretation() {\n                return gainNode.channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                gainNode.channelInterpretation = value;\n            },\n            get context() {\n                return gainNode.context;\n            },\n            get inputs() {\n                return [];\n            },\n            get numberOfInputs() {\n                return audioBufferSourceNode.numberOfInputs;\n            },\n            get numberOfOutputs() {\n                return gainNode.numberOfOutputs;\n            },\n            get offset() {\n                return gainNode.gain;\n            },\n            get onended() {\n                return audioBufferSourceNode.onended;\n            },\n            set onended(value) {\n                audioBufferSourceNode.onended = value;\n            },\n            addEventListener(...args) {\n                return audioBufferSourceNode.addEventListener(args[0], args[1], args[2]);\n            },\n            dispatchEvent(...args) {\n                return audioBufferSourceNode.dispatchEvent(args[0]);\n            },\n            removeEventListener(...args) {\n                return audioBufferSourceNode.removeEventListener(args[0], args[1], args[2]);\n            },\n            start(when = 0) {\n                audioBufferSourceNode.start.call(audioBufferSourceNode, when);\n            },\n            stop(when = 0) {\n                audioBufferSourceNode.stop.call(audioBufferSourceNode, when);\n            }\n        };\n        const whenConnected = () => audioBufferSourceNode.connect(gainNode);\n        const whenDisconnected = () => audioBufferSourceNode.disconnect(gainNode);\n        return monitorConnections(interceptConnections(nativeConstantSourceNodeFaker, gainNode), whenConnected, whenDisconnected);\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/native-constant-source-node-faker-factory.js.map","import { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeConvolverNodeFactory = (createNativeAudioNode, createNativeConvolverNodeFaker, createNotSupportedError, overwriteAccessors) => {\n    return (nativeContext, options) => {\n        const nativeConvolverNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createConvolver());\n        try {\n            // Bug #166: Chrome & Opera do not allow yet to set the channelCount to 1.\n            nativeConvolverNode.channelCount = 1;\n        }\n        catch (err) {\n            return createNativeConvolverNodeFaker(nativeContext, options);\n        }\n        assignNativeAudioNodeOptions(nativeConvolverNode, options);\n        // The normalize property needs to be set before setting the buffer.\n        if (options.disableNormalization === nativeConvolverNode.normalize) {\n            nativeConvolverNode.normalize = !options.disableNormalization;\n        }\n        assignNativeAudioNodeOption(nativeConvolverNode, options, 'buffer');\n        // Bug #113: Edge & Safari allow to set the channelCount to a value larger than 2.\n        if (options.channelCount > 2) {\n            throw createNotSupportedError();\n        }\n        overwriteAccessors(nativeConvolverNode, 'channelCount', (get) => () => get.call(nativeConvolverNode), (set) => (value) => {\n            if (value > 2) {\n                throw createNotSupportedError();\n            }\n            return set.call(nativeConvolverNode, value);\n        });\n        // Bug #114: Edge & Safari allow to set the channelCountMode to 'max'.\n        if (options.channelCountMode === 'max') {\n            throw createNotSupportedError();\n        }\n        overwriteAccessors(nativeConvolverNode, 'channelCountMode', (get) => () => get.call(nativeConvolverNode), (set) => (value) => {\n            if (value === 'max') {\n                throw createNotSupportedError();\n            }\n            return set.call(nativeConvolverNode, value);\n        });\n        return nativeConvolverNode;\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/native-convolver-node-factory.js.map","import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { interceptConnections } from '../helpers/intercept-connections';\nexport const createNativeConvolverNodeFakerFactory = (createNativeAudioNode, createNativeGainNode, monitorConnections) => {\n    return (nativeContext, { buffer, channelCount, channelCountMode, channelInterpretation, disableNormalization }) => {\n        const convolverNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createConvolver());\n        assignNativeAudioNodeOptions(convolverNode, {\n            // Bug #166: Chrome & Opera do not allow yet to set the channelCount to 1.\n            channelCount: Math.max(channelCount, 2),\n            // Bug #167: Chrome & Opera do not allow yet to set the channelCountMode to 'explicit'.\n            channelCountMode: (channelCountMode === 'max') ? channelCountMode : 'clamped-max',\n            channelInterpretation\n        });\n        const gainNode = createNativeGainNode(nativeContext, { channelCount, channelCountMode, channelInterpretation, gain: 1 });\n        const nativeConvolverNodeFaker = {\n            get buffer() {\n                return convolverNode.buffer;\n            },\n            set buffer(value) {\n                convolverNode.buffer = value;\n            },\n            get bufferSize() {\n                return undefined;\n            },\n            get channelCount() {\n                return gainNode.channelCount;\n            },\n            set channelCount(value) {\n                // Bug #166: Chrome & Opera do not allow yet to set the channelCount to 1.\n                if (value > 2) {\n                    convolverNode.channelCount = value;\n                }\n                gainNode.channelCount = value;\n            },\n            get channelCountMode() {\n                return gainNode.channelCountMode;\n            },\n            set channelCountMode(value) {\n                // Bug #167: Chrome & Opera do not allow yet to set the channelCountMode to 'explicit'.\n                if (value === 'max') {\n                    convolverNode.channelCountMode = value;\n                }\n                gainNode.channelCountMode = value;\n            },\n            get channelInterpretation() {\n                return convolverNode.channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                convolverNode.channelInterpretation = value;\n                gainNode.channelInterpretation = value;\n            },\n            get context() {\n                return convolverNode.context;\n            },\n            get inputs() {\n                return [convolverNode];\n            },\n            get numberOfInputs() {\n                return convolverNode.numberOfInputs;\n            },\n            get numberOfOutputs() {\n                return convolverNode.numberOfOutputs;\n            },\n            get normalize() {\n                return convolverNode.normalize;\n            },\n            set normalize(value) {\n                convolverNode.normalize = value;\n            },\n            addEventListener(...args) {\n                return convolverNode.addEventListener(args[0], args[1], args[2]);\n            },\n            dispatchEvent(...args) {\n                return convolverNode.dispatchEvent(args[0]);\n            },\n            removeEventListener(...args) {\n                return convolverNode.removeEventListener(args[0], args[1], args[2]);\n            }\n        };\n        // The normalize property needs to be set before setting the buffer.\n        if (disableNormalization === nativeConvolverNodeFaker.normalize) {\n            nativeConvolverNodeFaker.normalize = !disableNormalization;\n        }\n        if (buffer !== nativeConvolverNodeFaker.buffer) {\n            nativeConvolverNodeFaker.buffer = buffer;\n        }\n        const whenConnected = () => convolverNode.connect(gainNode);\n        const whenDisconnected = () => convolverNode.disconnect(gainNode);\n        return monitorConnections(interceptConnections(nativeConvolverNodeFaker, gainNode), whenConnected, whenDisconnected);\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/native-convolver-node-faker-factory.js.map","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeDelayNodeFactory = (createNativeAudioNode) => {\n    return (nativeContext, options) => {\n        const nativeDelayNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createDelay(options.maxDelayTime));\n        assignNativeAudioNodeOptions(nativeDelayNode, options);\n        assignNativeAudioNodeAudioParamValue(nativeDelayNode, options, 'delayTime');\n        return nativeDelayNode;\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/native-delay-node-factory.js.map","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeDynamicsCompressorNodeFactory = (createNativeAudioNode, createNotSupportedError) => {\n    return (nativeContext, options) => {\n        const nativeDynamicsCompressorNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createDynamicsCompressor());\n        assignNativeAudioNodeOptions(nativeDynamicsCompressorNode, options);\n        // Bug #108: Only Chrome, Firefox and Opera disallow a channelCount of three and above yet.\n        if (options.channelCount > 2) {\n            throw createNotSupportedError();\n        }\n        // Bug #109: Only Chrome, Firefox and Opera disallow a channelCountMode of 'max'.\n        if (options.channelCountMode === 'max') {\n            throw createNotSupportedError();\n        }\n        assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode, options, 'attack');\n        assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode, options, 'knee');\n        assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode, options, 'ratio');\n        assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode, options, 'release');\n        assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode, options, 'threshold');\n        return nativeDynamicsCompressorNode;\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/native-dynamics-compressor-node-factory.js.map","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeGainNodeFactory = (createNativeAudioNode) => {\n    return (nativeContext, options) => {\n        const nativeGainNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createGain());\n        assignNativeAudioNodeOptions(nativeGainNode, options);\n        assignNativeAudioNodeAudioParamValue(nativeGainNode, options, 'gain');\n        return nativeGainNode;\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/native-gain-node-factory.js.map","import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeIIRFilterNodeFactory = (createNativeAudioNode, createNativeIIRFilterNodeFaker) => {\n    return (nativeContext, baseLatency, options) => {\n        // Bug #9: Safari does not support IIRFilterNodes.\n        if (nativeContext.createIIRFilter === undefined) {\n            return createNativeIIRFilterNodeFaker(nativeContext, baseLatency, options);\n        }\n        const nativeIIRFilterNode = createNativeAudioNode(nativeContext, (ntvCntxt) => {\n            return ntvCntxt.createIIRFilter(options.feedforward, options.feedback);\n        });\n        assignNativeAudioNodeOptions(nativeIIRFilterNode, options);\n        return nativeIIRFilterNode;\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/native-iir-filter-node-factory.js.map","import { computeBufferSize } from '../helpers/compute-buffer-size';\nimport { filterBuffer } from '../helpers/filter-buffer';\nimport { interceptConnections } from '../helpers/intercept-connections';\nfunction divide(a, b) {\n    const denominator = (b[0] * b[0]) + (b[1] * b[1]);\n    return [(((a[0] * b[0]) + (a[1] * b[1])) / denominator), (((a[1] * b[0]) - (a[0] * b[1])) / denominator)];\n}\nfunction multiply(a, b) {\n    return [((a[0] * b[0]) - (a[1] * b[1])), ((a[0] * b[1]) + (a[1] * b[0]))];\n}\nfunction evaluatePolynomial(coefficient, z) {\n    let result = [0, 0];\n    for (let i = coefficient.length - 1; i >= 0; i -= 1) {\n        result = multiply(result, z);\n        result[0] += coefficient[i];\n    }\n    return result;\n}\nexport const createNativeIIRFilterNodeFakerFactory = (createInvalidAccessError, createInvalidStateError, createNativeScriptProcessorNode, createNotSupportedError) => {\n    return (nativeContext, baseLatency, { channelCount, channelCountMode, channelInterpretation, feedback, feedforward }) => {\n        const bufferSize = computeBufferSize(baseLatency, nativeContext.sampleRate);\n        const feedbackLength = feedback.length;\n        const feedforwardLength = feedforward.length;\n        const minLength = Math.min(feedbackLength, feedforwardLength);\n        if (feedback.length === 0 || feedback.length > 20) {\n            throw createNotSupportedError();\n        }\n        if (feedback[0] === 0) {\n            throw createInvalidStateError();\n        }\n        if (feedforward.length === 0 || feedforward.length > 20) {\n            throw createNotSupportedError();\n        }\n        if (feedforward[0] === 0) {\n            throw createInvalidStateError();\n        }\n        if (feedback[0] !== 1) {\n            for (let i = 0; i < feedforwardLength; i += 1) {\n                feedforward[i] /= feedback[0];\n            }\n            for (let i = 1; i < feedbackLength; i += 1) {\n                feedback[i] /= feedback[0];\n            }\n        }\n        const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, bufferSize, channelCount, channelCount);\n        scriptProcessorNode.channelCount = channelCount;\n        scriptProcessorNode.channelCountMode = channelCountMode;\n        scriptProcessorNode.channelInterpretation = channelInterpretation;\n        const bufferLength = 32;\n        const bufferIndexes = [];\n        const xBuffers = [];\n        const yBuffers = [];\n        for (let i = 0; i < channelCount; i += 1) {\n            bufferIndexes.push(0);\n            const xBuffer = new Float32Array(bufferLength);\n            const yBuffer = new Float32Array(bufferLength);\n            xBuffer.fill(0);\n            yBuffer.fill(0);\n            xBuffers.push(xBuffer);\n            yBuffers.push(yBuffer);\n        }\n        scriptProcessorNode.onaudioprocess = (event) => {\n            const inputBuffer = event.inputBuffer;\n            const outputBuffer = event.outputBuffer;\n            const numberOfChannels = inputBuffer.numberOfChannels;\n            for (let i = 0; i < numberOfChannels; i += 1) {\n                const input = inputBuffer.getChannelData(i);\n                const output = outputBuffer.getChannelData(i);\n                bufferIndexes[i] = filterBuffer(feedback, feedbackLength, feedforward, feedforwardLength, minLength, xBuffers[i], yBuffers[i], bufferIndexes[i], bufferLength, input, output);\n            }\n        };\n        const nyquist = nativeContext.sampleRate / 2;\n        const nativeIIRFilterNodeFaker = {\n            get bufferSize() {\n                return bufferSize;\n            },\n            get channelCount() {\n                return scriptProcessorNode.channelCount;\n            },\n            set channelCount(value) {\n                scriptProcessorNode.channelCount = value;\n            },\n            get channelCountMode() {\n                return scriptProcessorNode.channelCountMode;\n            },\n            set channelCountMode(value) {\n                scriptProcessorNode.channelCountMode = value;\n            },\n            get channelInterpretation() {\n                return scriptProcessorNode.channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                scriptProcessorNode.channelInterpretation = value;\n            },\n            get context() {\n                return scriptProcessorNode.context;\n            },\n            get inputs() {\n                return [scriptProcessorNode];\n            },\n            get numberOfInputs() {\n                return scriptProcessorNode.numberOfInputs;\n            },\n            get numberOfOutputs() {\n                return scriptProcessorNode.numberOfOutputs;\n            },\n            addEventListener(...args) {\n                // @todo Dissallow adding an audioprocess listener.\n                return scriptProcessorNode.addEventListener(args[0], args[1], args[2]);\n            },\n            dispatchEvent(...args) {\n                return scriptProcessorNode.dispatchEvent(args[0]);\n            },\n            getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {\n                if ((frequencyHz.length !== magResponse.length) || (magResponse.length !== phaseResponse.length)) {\n                    throw createInvalidAccessError();\n                }\n                const length = frequencyHz.length;\n                for (let i = 0; i < length; i += 1) {\n                    const omega = -Math.PI * (frequencyHz[i] / nyquist);\n                    const z = [Math.cos(omega), Math.sin(omega)];\n                    const numerator = evaluatePolynomial(feedforward, z);\n                    const denominator = evaluatePolynomial(feedback, z);\n                    const response = divide(numerator, denominator);\n                    magResponse[i] = Math.sqrt((response[0] * response[0]) + (response[1] * response[1]));\n                    phaseResponse[i] = Math.atan2(response[1], response[0]);\n                }\n            },\n            removeEventListener(...args) {\n                return scriptProcessorNode.removeEventListener(args[0], args[1], args[2]);\n            }\n        };\n        return interceptConnections(nativeIIRFilterNodeFaker, scriptProcessorNode);\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/native-iir-filter-node-faker-factory.js.map","export const createNativeMediaElementAudioSourceNodeFactory = (createNativeAudioNode) => {\n    return (nativeAudioContext, options) => createNativeAudioNode(nativeAudioContext, (ntvDCntxt) => {\n        return ntvDCntxt.createMediaElementSource(options.mediaElement);\n    });\n};\n//# sourceMappingURL=/build/es2019/factories/native-media-element-audio-source-node-factory.js.map","import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeMediaStreamAudioDestinationNodeFactory = (createNativeAudioNode, createNotSupportedError) => {\n    return (nativeAudioContext, options) => {\n        // Bug #64: Edge does not support MediaStreamAudioDestinationNodes.\n        if (nativeAudioContext.createMediaStreamDestination === undefined) {\n            throw createNotSupportedError();\n        }\n        const nativeMediaStreamAudioDestinationNode = createNativeAudioNode(nativeAudioContext, (ntvDCntxt) => {\n            return ntvDCntxt.createMediaStreamDestination();\n        });\n        assignNativeAudioNodeOptions(nativeMediaStreamAudioDestinationNode, options);\n        // Bug #174: Safari does expose a wrong numberOfOutputs.\n        if (nativeMediaStreamAudioDestinationNode.numberOfOutputs === 1) {\n            Object.defineProperty(nativeMediaStreamAudioDestinationNode, 'numberOfOutputs', { get: () => 0 });\n        }\n        return nativeMediaStreamAudioDestinationNode;\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/native-media-stream-audio-destination-node-factory.js.map","export const createNativeMediaStreamAudioSourceNodeFactory = (createNativeAudioNode) => {\n    return (nativeAudioContext, { mediaStream }) => {\n        const audioStreamTracks = mediaStream.getAudioTracks();\n        const nativeMediaStreamAudioSourceNode = createNativeAudioNode(nativeAudioContext, (ntvDCntxt) => {\n            /*\n             * Bug #151: Safari does not use the audio track as input anymore if it gets removed from the mediaStream after construction.\n             * Bug #159: Safari picks the first audio track if the MediaStream has more than one audio track.\n             */\n            const filteredAudioStreamTracks = audioStreamTracks\n                .sort((a, b) => ((a.id < b.id) ? -1 : (a.id > b.id) ? 1 : 0))\n                .slice(0, 1);\n            return ntvDCntxt.createMediaStreamSource(new MediaStream(filteredAudioStreamTracks));\n        });\n        // Bug #63: Edge does not expose the mediaStream yet.\n        Object.defineProperty(nativeMediaStreamAudioSourceNode, 'mediaStream', { value: mediaStream });\n        return nativeMediaStreamAudioSourceNode;\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/native-media-stream-audio-source-node-factory.js.map","export const createNativeMediaStreamTrackAudioSourceNodeFactory = (createInvalidStateError, createNativeAudioNode, isNativeOfflineAudioContext) => {\n    return (nativeAudioContext, { mediaStreamTrack }) => {\n        if (typeof nativeAudioContext.createMediaStreamTrackSource === 'function') {\n            return createNativeAudioNode(nativeAudioContext, (ntvDCntxt) => ntvDCntxt.createMediaStreamTrackSource(mediaStreamTrack));\n        }\n        // Bug #121: Only Firefox does yet support the MediaStreamTrackAudioSourceNode.\n        return createNativeAudioNode(nativeAudioContext, (ntvDCntxt) => {\n            const mediaStream = new MediaStream([mediaStreamTrack]);\n            const nativeMediaStreamAudioSourceNode = ntvDCntxt.createMediaStreamSource(mediaStream);\n            // Bug #120: Firefox does not throw an error if the mediaStream has no audio track.\n            if (mediaStreamTrack.kind !== 'audio') {\n                throw createInvalidStateError();\n            }\n            // Bug #172: Safari allows to create a MediaStreamAudioSourceNode with an OfflineAudioContext.\n            if (isNativeOfflineAudioContext(ntvDCntxt)) {\n                throw new TypeError();\n            }\n            return nativeMediaStreamAudioSourceNode;\n        });\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/native-media-stream-track-audio-source-node-factory.js.map","export const createNativeOfflineAudioContextConstructor = (window) => {\n    if (window === null) {\n        return null;\n    }\n    if (window.hasOwnProperty('OfflineAudioContext')) {\n        return window.OfflineAudioContext;\n    }\n    return (window.hasOwnProperty('webkitOfflineAudioContext')) ? window.webkitOfflineAudioContext : null;\n};\n//# sourceMappingURL=/build/es2019/factories/native-offline-audio-context-constructor.js.map","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { wrapAudioScheduledSourceNodeStartMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters';\nimport { wrapAudioScheduledSourceNodeStopMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters';\nexport const createNativeOscillatorNodeFactory = (cacheTestResult, createNativeAudioNode, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls) => {\n    return (nativeContext, options) => {\n        const nativeOscillatorNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createOscillator());\n        assignNativeAudioNodeOptions(nativeOscillatorNode, options);\n        assignNativeAudioNodeAudioParamValue(nativeOscillatorNode, options, 'detune');\n        assignNativeAudioNodeAudioParamValue(nativeOscillatorNode, options, 'frequency');\n        if (options.periodicWave !== undefined) {\n            nativeOscillatorNode.setPeriodicWave(options.periodicWave);\n        }\n        else {\n            assignNativeAudioNodeOption(nativeOscillatorNode, options, 'type');\n        }\n        // Bug #44: Only Chrome & Opera throw a RangeError yet.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(nativeContext))) {\n            wrapAudioScheduledSourceNodeStartMethodNegativeParameters(nativeOscillatorNode);\n        }\n        // Bug #19: Safari does not ignore calls to stop() of an already stopped AudioBufferSourceNode.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, () => testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport(nativeContext))) {\n            wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls(nativeOscillatorNode, nativeContext);\n        }\n        // Bug #44: Only Firefox does not throw a RangeError yet.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(nativeContext))) {\n            wrapAudioScheduledSourceNodeStopMethodNegativeParameters(nativeOscillatorNode);\n        }\n        return nativeOscillatorNode;\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/native-oscillator-node-factory.js.map","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativePannerNodeFactory = (createNativeAudioNode, createNativePannerNodeFaker) => {\n    return (nativeContext, options) => {\n        const nativePannerNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createPanner());\n        // Bug #124: Edge & Safari do not support modifying the orientation and the position with AudioParams.\n        if (nativePannerNode.orientationX === undefined) {\n            return createNativePannerNodeFaker(nativeContext, options);\n        }\n        assignNativeAudioNodeOptions(nativePannerNode, options);\n        assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'orientationX');\n        assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'orientationY');\n        assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'orientationZ');\n        assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'positionX');\n        assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'positionY');\n        assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'positionZ');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'coneInnerAngle');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'coneOuterAngle');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'coneOuterGain');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'distanceModel');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'maxDistance');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'panningModel');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'refDistance');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'rolloffFactor');\n        return nativePannerNode;\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/native-panner-node-factory.js.map","import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { interceptConnections } from '../helpers/intercept-connections';\nexport const createNativePannerNodeFakerFactory = (connectNativeAudioNodeToNativeAudioNode, createInvalidStateError, createNativeAudioNode, createNativeChannelMergerNode, createNativeGainNode, createNativeScriptProcessorNode, createNativeWaveShaperNode, createNotSupportedError, disconnectNativeAudioNodeFromNativeAudioNode, monitorConnections) => {\n    return (nativeContext, { coneInnerAngle, coneOuterAngle, coneOuterGain, distanceModel, maxDistance, orientationX, orientationY, orientationZ, panningModel, positionX, positionY, positionZ, refDistance, rolloffFactor, ...audioNodeOptions }) => {\n        const pannerNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createPanner());\n        // Bug #125: Safari does not throw an error yet.\n        if (audioNodeOptions.channelCount > 2) {\n            throw createNotSupportedError();\n        }\n        // Bug #126: Safari does not throw an error yet.\n        if (audioNodeOptions.channelCountMode === 'max') {\n            throw createNotSupportedError();\n        }\n        assignNativeAudioNodeOptions(pannerNode, audioNodeOptions);\n        const SINGLE_CHANNEL_OPTIONS = {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete'\n        };\n        const channelMergerNode = createNativeChannelMergerNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, channelInterpretation: 'speakers', numberOfInputs: 6 });\n        const inputGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, gain: 1 });\n        const orientationXGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 1 });\n        const orientationYGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        const orientationZGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        const positionXGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        const positionYGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        const positionZGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, 256, 6, 1);\n        const waveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, curve: new Float32Array([1, 1]), oversample: 'none' });\n        let lastOrientation = [orientationX, orientationY, orientationZ];\n        let lastPosition = [positionX, positionY, positionZ];\n        scriptProcessorNode.onaudioprocess = ({ inputBuffer }) => {\n            const orientation = [\n                inputBuffer.getChannelData(0)[0],\n                inputBuffer.getChannelData(1)[0],\n                inputBuffer.getChannelData(2)[0]\n            ];\n            if (orientation.some((value, index) => (value !== lastOrientation[index]))) {\n                pannerNode.setOrientation(...orientation); // tslint:disable-line:deprecation\n                lastOrientation = orientation;\n            }\n            const positon = [\n                inputBuffer.getChannelData(3)[0],\n                inputBuffer.getChannelData(4)[0],\n                inputBuffer.getChannelData(5)[0]\n            ];\n            if (positon.some((value, index) => (value !== lastPosition[index]))) {\n                pannerNode.setPosition(...positon); // tslint:disable-line:deprecation\n                lastPosition = positon;\n            }\n        };\n        Object.defineProperty(orientationYGainNode.gain, 'defaultValue', { get: () => 0 });\n        Object.defineProperty(orientationZGainNode.gain, 'defaultValue', { get: () => 0 });\n        Object.defineProperty(positionXGainNode.gain, 'defaultValue', { get: () => 0 });\n        Object.defineProperty(positionYGainNode.gain, 'defaultValue', { get: () => 0 });\n        Object.defineProperty(positionZGainNode.gain, 'defaultValue', { get: () => 0 });\n        const nativePannerNodeFaker = {\n            get bufferSize() {\n                return undefined;\n            },\n            get channelCount() {\n                return pannerNode.channelCount;\n            },\n            set channelCount(value) {\n                // Bug #125: Safari does not throw an error yet.\n                if (value > 2) {\n                    throw createNotSupportedError();\n                }\n                inputGainNode.channelCount = value;\n                pannerNode.channelCount = value;\n            },\n            get channelCountMode() {\n                return pannerNode.channelCountMode;\n            },\n            set channelCountMode(value) {\n                // Bug #126: Safari does not throw an error yet.\n                if (value === 'max') {\n                    throw createNotSupportedError();\n                }\n                inputGainNode.channelCountMode = value;\n                pannerNode.channelCountMode = value;\n            },\n            get channelInterpretation() {\n                return pannerNode.channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                inputGainNode.channelInterpretation = value;\n                pannerNode.channelInterpretation = value;\n            },\n            get coneInnerAngle() {\n                return pannerNode.coneInnerAngle;\n            },\n            set coneInnerAngle(value) {\n                pannerNode.coneInnerAngle = value;\n            },\n            get coneOuterAngle() {\n                return pannerNode.coneOuterAngle;\n            },\n            set coneOuterAngle(value) {\n                pannerNode.coneOuterAngle = value;\n            },\n            get coneOuterGain() {\n                return pannerNode.coneOuterGain;\n            },\n            set coneOuterGain(value) {\n                // Bug #127: Edge & Safari do not throw an InvalidStateError yet.\n                if (value < 0 || value > 1) {\n                    throw createInvalidStateError();\n                }\n                pannerNode.coneOuterGain = value;\n            },\n            get context() {\n                return pannerNode.context;\n            },\n            get distanceModel() {\n                return pannerNode.distanceModel;\n            },\n            set distanceModel(value) {\n                pannerNode.distanceModel = value;\n            },\n            get inputs() {\n                return [inputGainNode];\n            },\n            get maxDistance() {\n                return pannerNode.maxDistance;\n            },\n            set maxDistance(value) {\n                // Bug #128: Edge & Safari do not throw an error yet.\n                if (value < 0) {\n                    throw new RangeError();\n                }\n                pannerNode.maxDistance = value;\n            },\n            get numberOfInputs() {\n                return pannerNode.numberOfInputs;\n            },\n            get numberOfOutputs() {\n                return pannerNode.numberOfOutputs;\n            },\n            get orientationX() {\n                return orientationXGainNode.gain;\n            },\n            get orientationY() {\n                return orientationYGainNode.gain;\n            },\n            get orientationZ() {\n                return orientationZGainNode.gain;\n            },\n            get panningModel() {\n                return pannerNode.panningModel;\n            },\n            set panningModel(value) {\n                pannerNode.panningModel = value;\n                // Bug #123: Edge does not support HRTF as panningModel.\n                if (pannerNode.panningModel !== value && value === 'HRTF') {\n                    throw createNotSupportedError();\n                }\n            },\n            get positionX() {\n                return positionXGainNode.gain;\n            },\n            get positionY() {\n                return positionYGainNode.gain;\n            },\n            get positionZ() {\n                return positionZGainNode.gain;\n            },\n            get refDistance() {\n                return pannerNode.refDistance;\n            },\n            set refDistance(value) {\n                // Bug #129: Edge & Safari do not throw an error yet.\n                if (value < 0) {\n                    throw new RangeError();\n                }\n                pannerNode.refDistance = value;\n            },\n            get rolloffFactor() {\n                return pannerNode.rolloffFactor;\n            },\n            set rolloffFactor(value) {\n                // Bug #130: Edge & Safari do not throw an error yet.\n                if (value < 0) {\n                    throw new RangeError();\n                }\n                pannerNode.rolloffFactor = value;\n            },\n            addEventListener(...args) {\n                return inputGainNode.addEventListener(args[0], args[1], args[2]);\n            },\n            dispatchEvent(...args) {\n                return inputGainNode.dispatchEvent(args[0]);\n            },\n            removeEventListener(...args) {\n                return inputGainNode.removeEventListener(args[0], args[1], args[2]);\n            }\n        };\n        if (coneInnerAngle !== nativePannerNodeFaker.coneInnerAngle) {\n            nativePannerNodeFaker.coneInnerAngle = coneInnerAngle;\n        }\n        if (coneOuterAngle !== nativePannerNodeFaker.coneOuterAngle) {\n            nativePannerNodeFaker.coneOuterAngle = coneOuterAngle;\n        }\n        if (coneOuterGain !== nativePannerNodeFaker.coneOuterGain) {\n            nativePannerNodeFaker.coneOuterGain = coneOuterGain;\n        }\n        if (distanceModel !== nativePannerNodeFaker.distanceModel) {\n            nativePannerNodeFaker.distanceModel = distanceModel;\n        }\n        if (maxDistance !== nativePannerNodeFaker.maxDistance) {\n            nativePannerNodeFaker.maxDistance = maxDistance;\n        }\n        if (orientationX !== nativePannerNodeFaker.orientationX.value) {\n            nativePannerNodeFaker.orientationX.value = orientationX;\n        }\n        if (orientationY !== nativePannerNodeFaker.orientationY.value) {\n            nativePannerNodeFaker.orientationY.value = orientationY;\n        }\n        if (orientationZ !== nativePannerNodeFaker.orientationZ.value) {\n            nativePannerNodeFaker.orientationZ.value = orientationZ;\n        }\n        if (panningModel !== nativePannerNodeFaker.panningModel) {\n            nativePannerNodeFaker.panningModel = panningModel;\n        }\n        if (positionX !== nativePannerNodeFaker.positionX.value) {\n            nativePannerNodeFaker.positionX.value = positionX;\n        }\n        if (positionY !== nativePannerNodeFaker.positionY.value) {\n            nativePannerNodeFaker.positionY.value = positionY;\n        }\n        if (positionZ !== nativePannerNodeFaker.positionZ.value) {\n            nativePannerNodeFaker.positionZ.value = positionZ;\n        }\n        if (refDistance !== nativePannerNodeFaker.refDistance) {\n            nativePannerNodeFaker.refDistance = refDistance;\n        }\n        if (rolloffFactor !== nativePannerNodeFaker.rolloffFactor) {\n            nativePannerNodeFaker.rolloffFactor = rolloffFactor;\n        }\n        if (lastOrientation[0] !== 1 || lastOrientation[1] !== 0 || lastOrientation[2] !== 0) {\n            pannerNode.setOrientation(...lastOrientation); // tslint:disable-line:deprecation\n        }\n        if (lastPosition[0] !== 0 || lastPosition[1] !== 0 || lastPosition[2] !== 0) {\n            pannerNode.setPosition(...lastPosition); // tslint:disable-line:deprecation\n        }\n        const whenConnected = () => {\n            inputGainNode.connect(pannerNode);\n            // Bug #119: Safari does not fully support the WaveShaperNode.\n            connectNativeAudioNodeToNativeAudioNode(inputGainNode, waveShaperNode, 0, 0);\n            waveShaperNode\n                .connect(orientationXGainNode)\n                .connect(channelMergerNode, 0, 0);\n            waveShaperNode\n                .connect(orientationYGainNode)\n                .connect(channelMergerNode, 0, 1);\n            waveShaperNode\n                .connect(orientationZGainNode)\n                .connect(channelMergerNode, 0, 2);\n            waveShaperNode\n                .connect(positionXGainNode)\n                .connect(channelMergerNode, 0, 3);\n            waveShaperNode\n                .connect(positionYGainNode)\n                .connect(channelMergerNode, 0, 4);\n            waveShaperNode\n                .connect(positionZGainNode)\n                .connect(channelMergerNode, 0, 5);\n            channelMergerNode\n                .connect(scriptProcessorNode)\n                .connect(nativeContext.destination);\n        };\n        const whenDisconnected = () => {\n            inputGainNode.disconnect(pannerNode);\n            // Bug #119: Safari does not fully support the WaveShaperNode.\n            disconnectNativeAudioNodeFromNativeAudioNode(inputGainNode, waveShaperNode, 0, 0);\n            waveShaperNode.disconnect(orientationXGainNode);\n            orientationXGainNode.disconnect(channelMergerNode);\n            waveShaperNode.disconnect(orientationYGainNode);\n            orientationYGainNode.disconnect(channelMergerNode);\n            waveShaperNode.disconnect(orientationZGainNode);\n            orientationZGainNode.disconnect(channelMergerNode);\n            waveShaperNode.disconnect(positionXGainNode);\n            positionXGainNode.disconnect(channelMergerNode);\n            waveShaperNode.disconnect(positionYGainNode);\n            positionYGainNode.disconnect(channelMergerNode);\n            waveShaperNode.disconnect(positionZGainNode);\n            positionZGainNode.disconnect(channelMergerNode);\n            channelMergerNode.disconnect(scriptProcessorNode);\n            scriptProcessorNode.disconnect(nativeContext.destination);\n        };\n        return monitorConnections(interceptConnections(nativePannerNodeFaker, pannerNode), whenConnected, whenDisconnected);\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/native-panner-node-faker-factory.js.map","export const createNativePeriodicWaveFactory = (getBackupNativeContext) => {\n    return (nativeContext, { disableNormalization, imag, real }) => {\n        // Bug #50: Only Edge does currently not allow to create AudioNodes (and other objects) on a closed context yet.\n        const backupNativeContext = getBackupNativeContext(nativeContext);\n        // @todo Edge, Firefox & Safari do only accept Float32Arrays.\n        const wrappedImag = new Float32Array(imag);\n        const wrappedReal = new Float32Array(real);\n        if (backupNativeContext !== null) {\n            return backupNativeContext.createPeriodicWave(wrappedReal, wrappedImag, { disableNormalization });\n        }\n        return nativeContext.createPeriodicWave(wrappedReal, wrappedImag, { disableNormalization });\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/native-periodic-wave-factory.js.map","export const createNativeScriptProcessorNodeFactory = (createNativeAudioNode) => {\n    return (nativeContext, bufferSize, numberOfInputChannels, numberOfOutputChannels) => {\n        return createNativeAudioNode(nativeContext, (ntvCntxt) => {\n            return ntvCntxt.createScriptProcessor(bufferSize, numberOfInputChannels, numberOfOutputChannels);\n        });\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/native-script-processor-node-factory.js.map","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeStereoPannerNodeFactory = (createNativeAudioNode, createNativeStereoPannerNodeFaker, createNotSupportedError) => {\n    return (nativeContext, options) => createNativeAudioNode(nativeContext, (ntvCntxt) => {\n        const channelCountMode = options.channelCountMode;\n        /*\n         * Bug #105: The channelCountMode of 'clamped-max' should be supported. However it is not possible to write a polyfill for Safari\n         * which supports it and therefore it can't be supported at all.\n         */\n        if (channelCountMode === 'clamped-max') {\n            throw createNotSupportedError();\n        }\n        // Bug #105: Safari does not support the StereoPannerNode.\n        if (nativeContext.createStereoPanner === undefined) {\n            return createNativeStereoPannerNodeFaker(nativeContext, options);\n        }\n        const nativeStereoPannerNode = ntvCntxt.createStereoPanner();\n        assignNativeAudioNodeOptions(nativeStereoPannerNode, options);\n        assignNativeAudioNodeAudioParamValue(nativeStereoPannerNode, options, 'pan');\n        /*\n         * Bug #105: The channelCountMode of 'clamped-max' should be supported. However it is not possible to write a polyfill for Safari\n         * which supports it and therefore it can't be supported at all.\n         */\n        Object.defineProperty(nativeStereoPannerNode, 'channelCountMode', {\n            get: () => channelCountMode,\n            set: (value) => {\n                if (value !== channelCountMode) {\n                    throw createNotSupportedError();\n                }\n            }\n        });\n        return nativeStereoPannerNode;\n    });\n};\n//# sourceMappingURL=/build/es2019/factories/native-stereo-panner-node-factory.js.map","import { interceptConnections } from '../helpers/intercept-connections';\nexport const createNativeStereoPannerNodeFakerFactory = (createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeGainNode, createNativeWaveShaperNode, createNotSupportedError, monitorConnections) => {\n    // The curve has a size of 14bit plus 1 value to have an exact representation for zero. This value has been determined experimentally.\n    const CURVE_SIZE = 16385;\n    const DC_CURVE = new Float32Array([1, 1]);\n    const HALF_PI = Math.PI / 2;\n    const SINGLE_CHANNEL_OPTIONS = { channelCount: 1, channelCountMode: 'explicit', channelInterpretation: 'discrete' };\n    const SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS = { ...SINGLE_CHANNEL_OPTIONS, oversample: 'none' };\n    const buildInternalGraphForMono = (nativeContext, inputGainNode, panGainNode, channelMergerNode) => {\n        const leftWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        const rightWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        for (let i = 0; i < CURVE_SIZE; i += 1) {\n            const x = (i / (CURVE_SIZE - 1)) * HALF_PI;\n            leftWaveShaperCurve[i] = Math.cos(x);\n            rightWaveShaperCurve[i] = Math.sin(x);\n        }\n        const leftGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const leftWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: leftWaveShaperCurve });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const panWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: DC_CURVE });\n        const rightGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const rightWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: rightWaveShaperCurve });\n        return {\n            connectGraph() {\n                inputGainNode.connect(leftGainNode);\n                inputGainNode.connect(panWaveShaperNode.inputs[0]);\n                inputGainNode.connect(rightGainNode);\n                panWaveShaperNode.connect(panGainNode);\n                panGainNode.connect(leftWaveShaperNode.inputs[0]);\n                panGainNode.connect(rightWaveShaperNode.inputs[0]);\n                leftWaveShaperNode.connect(leftGainNode.gain);\n                rightWaveShaperNode.connect(rightGainNode.gain);\n                leftGainNode.connect(channelMergerNode, 0, 0);\n                rightGainNode.connect(channelMergerNode, 0, 1);\n            },\n            disconnectGraph() {\n                inputGainNode.disconnect(leftGainNode);\n                inputGainNode.disconnect(panWaveShaperNode.inputs[0]);\n                inputGainNode.disconnect(rightGainNode);\n                panWaveShaperNode.disconnect(panGainNode);\n                panGainNode.disconnect(leftWaveShaperNode.inputs[0]);\n                panGainNode.disconnect(rightWaveShaperNode.inputs[0]);\n                leftWaveShaperNode.disconnect(leftGainNode.gain);\n                rightWaveShaperNode.disconnect(rightGainNode.gain);\n                leftGainNode.disconnect(channelMergerNode, 0, 0);\n                rightGainNode.disconnect(channelMergerNode, 0, 1);\n            }\n        };\n    };\n    const buildInternalGraphForStereo = (nativeContext, inputGainNode, panGainNode, channelMergerNode) => {\n        const leftInputForLeftOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        const leftInputForRightOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        const rightInputForLeftOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        const rightInputForRightOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        const centerIndex = Math.floor(CURVE_SIZE / 2);\n        for (let i = 0; i < CURVE_SIZE; i += 1) {\n            if (i > centerIndex) {\n                const x = ((i - centerIndex) / (CURVE_SIZE - 1 - centerIndex)) * HALF_PI;\n                leftInputForLeftOutputWaveShaperCurve[i] = Math.cos(x);\n                leftInputForRightOutputWaveShaperCurve[i] = Math.sin(x);\n                rightInputForLeftOutputWaveShaperCurve[i] = 0;\n                rightInputForRightOutputWaveShaperCurve[i] = 1;\n            }\n            else {\n                const x = (i / (CURVE_SIZE - 1 - centerIndex)) * HALF_PI;\n                leftInputForLeftOutputWaveShaperCurve[i] = 1;\n                leftInputForRightOutputWaveShaperCurve[i] = 0;\n                rightInputForLeftOutputWaveShaperCurve[i] = Math.cos(x);\n                rightInputForRightOutputWaveShaperCurve[i] = Math.sin(x);\n            }\n        }\n        const channelSplitterNode = createNativeChannelSplitterNode(nativeContext, {\n            channelCount: 2,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete',\n            numberOfOutputs: 2\n        });\n        const leftInputForLeftOutputGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const leftInputForLeftOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: leftInputForLeftOutputWaveShaperCurve });\n        const leftInputForRightOutputGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const leftInputForRightOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: leftInputForRightOutputWaveShaperCurve });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const panWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: DC_CURVE });\n        const rightInputForLeftOutputGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const rightInputForLeftOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: rightInputForLeftOutputWaveShaperCurve });\n        const rightInputForRightOutputGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const rightInputForRightOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: rightInputForRightOutputWaveShaperCurve });\n        return {\n            connectGraph() {\n                inputGainNode.connect(channelSplitterNode);\n                inputGainNode.connect(panWaveShaperNode.inputs[0]);\n                channelSplitterNode.connect(leftInputForLeftOutputGainNode, 1);\n                channelSplitterNode.connect(leftInputForRightOutputGainNode, 1);\n                channelSplitterNode.connect(rightInputForLeftOutputGainNode, 1);\n                channelSplitterNode.connect(rightInputForRightOutputGainNode, 1);\n                panWaveShaperNode.connect(panGainNode);\n                panGainNode.connect(leftInputForLeftOutputWaveShaperNode.inputs[0]);\n                panGainNode.connect(leftInputForRightOutputWaveShaperNode.inputs[0]);\n                panGainNode.connect(rightInputForLeftOutputWaveShaperNode.inputs[0]);\n                panGainNode.connect(rightInputForRightOutputWaveShaperNode.inputs[0]);\n                leftInputForLeftOutputWaveShaperNode.connect(leftInputForLeftOutputGainNode.gain);\n                leftInputForRightOutputWaveShaperNode.connect(leftInputForRightOutputGainNode.gain);\n                rightInputForLeftOutputWaveShaperNode.connect(rightInputForLeftOutputGainNode.gain);\n                rightInputForRightOutputWaveShaperNode.connect(rightInputForRightOutputGainNode.gain);\n                leftInputForLeftOutputGainNode.connect(channelMergerNode, 0, 0);\n                rightInputForLeftOutputGainNode.connect(channelMergerNode, 0, 0);\n                leftInputForRightOutputGainNode.connect(channelMergerNode, 0, 1);\n                rightInputForRightOutputGainNode.connect(channelMergerNode, 0, 1);\n            },\n            disconnectGraph() {\n                inputGainNode.disconnect(channelSplitterNode);\n                inputGainNode.disconnect(panWaveShaperNode.inputs[0]);\n                channelSplitterNode.disconnect(leftInputForLeftOutputGainNode, 1);\n                channelSplitterNode.disconnect(leftInputForRightOutputGainNode, 1);\n                channelSplitterNode.disconnect(rightInputForLeftOutputGainNode, 1);\n                channelSplitterNode.disconnect(rightInputForRightOutputGainNode, 1);\n                panWaveShaperNode.disconnect(panGainNode);\n                panGainNode.disconnect(leftInputForLeftOutputWaveShaperNode.inputs[0]);\n                panGainNode.disconnect(leftInputForRightOutputWaveShaperNode.inputs[0]);\n                panGainNode.disconnect(rightInputForLeftOutputWaveShaperNode.inputs[0]);\n                panGainNode.disconnect(rightInputForRightOutputWaveShaperNode.inputs[0]);\n                leftInputForLeftOutputWaveShaperNode.disconnect(leftInputForLeftOutputGainNode.gain);\n                leftInputForRightOutputWaveShaperNode.disconnect(leftInputForRightOutputGainNode.gain);\n                rightInputForLeftOutputWaveShaperNode.disconnect(rightInputForLeftOutputGainNode.gain);\n                rightInputForRightOutputWaveShaperNode.disconnect(rightInputForRightOutputGainNode.gain);\n                leftInputForLeftOutputGainNode.disconnect(channelMergerNode, 0, 0);\n                rightInputForLeftOutputGainNode.disconnect(channelMergerNode, 0, 0);\n                leftInputForRightOutputGainNode.disconnect(channelMergerNode, 0, 1);\n                rightInputForRightOutputGainNode.disconnect(channelMergerNode, 0, 1);\n            }\n        };\n    };\n    const buildInternalGraph = (nativeContext, channelCount, inputGainNode, panGainNode, channelMergerNode) => {\n        if (channelCount === 1) {\n            return buildInternalGraphForMono(nativeContext, inputGainNode, panGainNode, channelMergerNode);\n        }\n        if (channelCount === 2) {\n            return buildInternalGraphForStereo(nativeContext, inputGainNode, panGainNode, channelMergerNode);\n        }\n        throw createNotSupportedError();\n    };\n    return (nativeContext, { channelCount, channelCountMode, pan, ...audioNodeOptions }) => {\n        if (channelCountMode === 'max') {\n            throw createNotSupportedError();\n        }\n        const channelMergerNode = createNativeChannelMergerNode(nativeContext, {\n            ...audioNodeOptions,\n            channelCount: 1,\n            channelCountMode,\n            numberOfInputs: 2\n        });\n        const inputGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, channelCount, channelCountMode, gain: 1 });\n        const panGainNode = createNativeGainNode(nativeContext, {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete',\n            gain: pan\n        });\n        let { connectGraph, disconnectGraph } = buildInternalGraph(nativeContext, channelCount, inputGainNode, panGainNode, channelMergerNode);\n        Object.defineProperty(panGainNode.gain, 'defaultValue', { get: () => 0 });\n        const nativeStereoPannerNodeFakerFactory = {\n            get bufferSize() {\n                return undefined;\n            },\n            get channelCount() {\n                return inputGainNode.channelCount;\n            },\n            set channelCount(value) {\n                if (inputGainNode.channelCount !== value) {\n                    if (isConnected) {\n                        disconnectGraph();\n                    }\n                    ({ connectGraph, disconnectGraph } = buildInternalGraph(nativeContext, value, inputGainNode, panGainNode, channelMergerNode));\n                    if (isConnected) {\n                        connectGraph();\n                    }\n                }\n                inputGainNode.channelCount = value;\n            },\n            get channelCountMode() {\n                return inputGainNode.channelCountMode;\n            },\n            set channelCountMode(value) {\n                if (value === 'clamped-max' || value === 'max') {\n                    throw createNotSupportedError();\n                }\n                inputGainNode.channelCountMode = value;\n            },\n            get channelInterpretation() {\n                return inputGainNode.channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                inputGainNode.channelInterpretation = value;\n            },\n            get context() {\n                return inputGainNode.context;\n            },\n            get inputs() {\n                return [inputGainNode];\n            },\n            get numberOfInputs() {\n                return inputGainNode.numberOfInputs;\n            },\n            get numberOfOutputs() {\n                return inputGainNode.numberOfOutputs;\n            },\n            get pan() {\n                return panGainNode.gain;\n            },\n            addEventListener(...args) {\n                return inputGainNode.addEventListener(args[0], args[1], args[2]);\n            },\n            dispatchEvent(...args) {\n                return inputGainNode.dispatchEvent(args[0]);\n            },\n            removeEventListener(...args) {\n                return inputGainNode.removeEventListener(args[0], args[1], args[2]);\n            }\n        };\n        let isConnected = false;\n        const whenConnected = () => {\n            connectGraph();\n            isConnected = true;\n        };\n        const whenDisconnected = () => {\n            disconnectGraph();\n            isConnected = false;\n        };\n        return monitorConnections(interceptConnections(nativeStereoPannerNodeFakerFactory, channelMergerNode), whenConnected, whenDisconnected);\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/native-stereo-panner-node-faker-factory.js.map","import { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeWaveShaperNodeFactory = (createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeAudioNode, createNativeWaveShaperNodeFaker, isDCCurve, monitorConnections, overwriteAccessors) => {\n    return (nativeContext, options) => {\n        const nativeWaveShaperNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createWaveShaper());\n        try {\n            // Bug #102: Safari does not throw an InvalidStateError when the curve has less than two samples.\n            // Bug #119: Safari does not correctly map the values. Bug #102 is only used to detect Safari in this case.\n            nativeWaveShaperNode.curve = new Float32Array([1]);\n            return createNativeWaveShaperNodeFaker(nativeContext, options);\n        }\n        catch { /* Ignore errors. */ }\n        assignNativeAudioNodeOptions(nativeWaveShaperNode, options);\n        const curve = options.curve;\n        // Bug #104: Chrome will throw an InvalidAccessError when the curve has less than two samples.\n        if (curve !== null && curve.length < 2) {\n            throw createInvalidStateError();\n        }\n        assignNativeAudioNodeOption(nativeWaveShaperNode, options, 'curve');\n        assignNativeAudioNodeOption(nativeWaveShaperNode, options, 'oversample');\n        let disconnectNativeAudioBufferSourceNode = null;\n        let isConnected = false;\n        overwriteAccessors(nativeWaveShaperNode, 'curve', (get) => () => get.call(nativeWaveShaperNode), (set) => (value) => {\n            set.call(nativeWaveShaperNode, value);\n            if (isConnected) {\n                if (isDCCurve(value) && disconnectNativeAudioBufferSourceNode === null) {\n                    disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, nativeWaveShaperNode);\n                }\n                else if (!isDCCurve(value) && disconnectNativeAudioBufferSourceNode !== null) {\n                    disconnectNativeAudioBufferSourceNode();\n                    disconnectNativeAudioBufferSourceNode = null;\n                }\n            }\n            return value;\n        });\n        const whenConnected = () => {\n            isConnected = true;\n            if (isDCCurve(nativeWaveShaperNode.curve)) {\n                disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, nativeWaveShaperNode);\n            }\n        };\n        const whenDisconnected = () => {\n            isConnected = false;\n            if (disconnectNativeAudioBufferSourceNode !== null) {\n                disconnectNativeAudioBufferSourceNode();\n                disconnectNativeAudioBufferSourceNode = null;\n            }\n        };\n        return monitorConnections(nativeWaveShaperNode, whenConnected, whenDisconnected);\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/native-wave-shaper-node-factory.js.map","import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { interceptConnections } from '../helpers/intercept-connections';\nexport const createNativeWaveShaperNodeFakerFactory = (createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeAudioNode, createNativeGainNode, isDCCurve, monitorConnections) => {\n    return (nativeContext, { curve, oversample, ...audioNodeOptions }) => {\n        const negativeWaveShaperNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createWaveShaper());\n        const positiveWaveShaperNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createWaveShaper());\n        assignNativeAudioNodeOptions(negativeWaveShaperNode, audioNodeOptions);\n        assignNativeAudioNodeOptions(positiveWaveShaperNode, audioNodeOptions);\n        const inputGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, gain: 1 });\n        const invertGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, gain: -1 });\n        const outputGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, gain: 1 });\n        const revertGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, gain: -1 });\n        let disconnectNativeAudioBufferSourceNode = null;\n        let isConnected = false;\n        let unmodifiedCurve = null;\n        const nativeWaveShaperNodeFaker = {\n            get bufferSize() {\n                return undefined;\n            },\n            get channelCount() {\n                return negativeWaveShaperNode.channelCount;\n            },\n            set channelCount(value) {\n                inputGainNode.channelCount = value;\n                invertGainNode.channelCount = value;\n                negativeWaveShaperNode.channelCount = value;\n                outputGainNode.channelCount = value;\n                positiveWaveShaperNode.channelCount = value;\n                revertGainNode.channelCount = value;\n            },\n            get channelCountMode() {\n                return negativeWaveShaperNode.channelCountMode;\n            },\n            set channelCountMode(value) {\n                inputGainNode.channelCountMode = value;\n                invertGainNode.channelCountMode = value;\n                negativeWaveShaperNode.channelCountMode = value;\n                outputGainNode.channelCountMode = value;\n                positiveWaveShaperNode.channelCountMode = value;\n                revertGainNode.channelCountMode = value;\n            },\n            get channelInterpretation() {\n                return negativeWaveShaperNode.channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                inputGainNode.channelInterpretation = value;\n                invertGainNode.channelInterpretation = value;\n                negativeWaveShaperNode.channelInterpretation = value;\n                outputGainNode.channelInterpretation = value;\n                positiveWaveShaperNode.channelInterpretation = value;\n                revertGainNode.channelInterpretation = value;\n            },\n            get context() {\n                return negativeWaveShaperNode.context;\n            },\n            get curve() {\n                return unmodifiedCurve;\n            },\n            set curve(value) {\n                // Bug #102: Safari does not throw an InvalidStateError when the curve has less than two samples.\n                if (curve !== null && curve.length < 2) {\n                    throw createInvalidStateError();\n                }\n                if (value === null) {\n                    negativeWaveShaperNode.curve = value;\n                    positiveWaveShaperNode.curve = value;\n                }\n                else {\n                    const curveLength = value.length;\n                    const negativeCurve = new Float32Array(curveLength + 2 - (curveLength % 2));\n                    const positiveCurve = new Float32Array(curveLength + 2 - (curveLength % 2));\n                    negativeCurve[0] = value[0];\n                    positiveCurve[0] = -value[curveLength - 1];\n                    const length = Math.ceil((curveLength + 1) / 2);\n                    const centerIndex = ((curveLength + 1) / 2) - 1;\n                    for (let i = 1; i < length; i += 1) {\n                        const theoreticIndex = (i / length) * centerIndex;\n                        const lowerIndex = Math.floor(theoreticIndex);\n                        const upperIndex = Math.ceil(theoreticIndex);\n                        negativeCurve[i] = (lowerIndex === upperIndex)\n                            ? value[lowerIndex]\n                            : ((1 - (theoreticIndex - lowerIndex)) * value[lowerIndex])\n                                + ((1 - (upperIndex - theoreticIndex)) * value[upperIndex]);\n                        positiveCurve[i] = (lowerIndex === upperIndex)\n                            ? -value[curveLength - 1 - lowerIndex]\n                            : -((1 - (theoreticIndex - lowerIndex)) * value[curveLength - 1 - lowerIndex])\n                                - ((1 - (upperIndex - theoreticIndex)) * value[curveLength - 1 - upperIndex]);\n                    }\n                    negativeCurve[length] = (curveLength % 2 === 1) ? value[length - 1] : (value[length - 2] + value[length - 1]) / 2;\n                    negativeWaveShaperNode.curve = negativeCurve;\n                    positiveWaveShaperNode.curve = positiveCurve;\n                }\n                unmodifiedCurve = value;\n                if (isConnected) {\n                    if (isDCCurve(unmodifiedCurve) && disconnectNativeAudioBufferSourceNode === null) {\n                        disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, inputGainNode);\n                    }\n                    else if (disconnectNativeAudioBufferSourceNode !== null) {\n                        disconnectNativeAudioBufferSourceNode();\n                        disconnectNativeAudioBufferSourceNode = null;\n                    }\n                }\n            },\n            get inputs() {\n                return [inputGainNode];\n            },\n            get numberOfInputs() {\n                return negativeWaveShaperNode.numberOfInputs;\n            },\n            get numberOfOutputs() {\n                return negativeWaveShaperNode.numberOfOutputs;\n            },\n            get oversample() {\n                return negativeWaveShaperNode.oversample;\n            },\n            set oversample(value) {\n                negativeWaveShaperNode.oversample = value;\n                positiveWaveShaperNode.oversample = value;\n            },\n            addEventListener(...args) {\n                return inputGainNode.addEventListener(args[0], args[1], args[2]);\n            },\n            dispatchEvent(...args) {\n                return inputGainNode.dispatchEvent(args[0]);\n            },\n            removeEventListener(...args) {\n                return inputGainNode.removeEventListener(args[0], args[1], args[2]);\n            }\n        };\n        if (curve !== nativeWaveShaperNodeFaker.curve) {\n            nativeWaveShaperNodeFaker.curve = curve;\n        }\n        if (oversample !== nativeWaveShaperNodeFaker.oversample) {\n            nativeWaveShaperNodeFaker.oversample = oversample;\n        }\n        const whenConnected = () => {\n            inputGainNode\n                .connect(negativeWaveShaperNode)\n                .connect(outputGainNode);\n            inputGainNode\n                .connect(invertGainNode)\n                .connect(positiveWaveShaperNode)\n                .connect(revertGainNode)\n                .connect(outputGainNode);\n            isConnected = true;\n            if (isDCCurve(unmodifiedCurve)) {\n                disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, inputGainNode);\n            }\n        };\n        const whenDisconnected = () => {\n            inputGainNode.disconnect(negativeWaveShaperNode);\n            negativeWaveShaperNode.disconnect(outputGainNode);\n            inputGainNode.disconnect(invertGainNode);\n            invertGainNode.disconnect(positiveWaveShaperNode);\n            positiveWaveShaperNode.disconnect(revertGainNode);\n            revertGainNode.disconnect(outputGainNode);\n            isConnected = false;\n            if (disconnectNativeAudioBufferSourceNode !== null) {\n                disconnectNativeAudioBufferSourceNode();\n                disconnectNativeAudioBufferSourceNode = null;\n            }\n        };\n        return monitorConnections(interceptConnections(nativeWaveShaperNodeFaker, outputGainNode), whenConnected, whenDisconnected);\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/native-wave-shaper-node-faker-factory.js.map","import { testPromiseSupport } from '../helpers/test-promise-support';\nconst DEFAULT_OPTIONS = {\n    numberOfChannels: 1\n};\nexport const createOfflineAudioContextConstructor = (baseAudioContextConstructor, cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, startRendering) => {\n    return class OfflineAudioContext extends baseAudioContextConstructor {\n        constructor(a, b, c) {\n            let options;\n            if (typeof a === 'number' && b !== undefined && c !== undefined) {\n                options = { length: b, numberOfChannels: a, sampleRate: c };\n            }\n            else if (typeof a === 'object') {\n                options = a;\n            }\n            else {\n                throw new Error('The given parameters are not valid.');\n            }\n            const { length, numberOfChannels, sampleRate } = { ...DEFAULT_OPTIONS, ...options };\n            const nativeOfflineAudioContext = createNativeOfflineAudioContext(numberOfChannels, length, sampleRate);\n            // #21 Safari does not support promises and therefore would fire the statechange event before the promise can be resolved.\n            if (!cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeOfflineAudioContext))) {\n                nativeOfflineAudioContext.addEventListener('statechange', (() => {\n                    let i = 0;\n                    const delayStateChangeEvent = (event) => {\n                        if (this._state === 'running') {\n                            if (i > 0) {\n                                nativeOfflineAudioContext.removeEventListener('statechange', delayStateChangeEvent);\n                                event.stopImmediatePropagation();\n                                this._waitForThePromiseToSettle(event);\n                            }\n                            else {\n                                i += 1;\n                            }\n                        }\n                    };\n                    return delayStateChangeEvent;\n                })());\n            }\n            super(nativeOfflineAudioContext, numberOfChannels);\n            this._length = length;\n            this._nativeOfflineAudioContext = nativeOfflineAudioContext;\n            this._state = null;\n        }\n        get length() {\n            // Bug #17: Safari does not yet expose the length.\n            if (this._nativeOfflineAudioContext.length === undefined) {\n                return this._length;\n            }\n            return this._nativeOfflineAudioContext.length;\n        }\n        get state() {\n            return (this._state === null) ? this._nativeOfflineAudioContext.state : this._state;\n        }\n        startRendering() {\n            /*\n             * Bug #9 & #59: It is theoretically possible that startRendering() will first render a partialOfflineAudioContext. Therefore\n             * the state of the nativeOfflineAudioContext might no transition to running immediately.\n             */\n            if (this._state === 'running') {\n                return Promise.reject(createInvalidStateError());\n            }\n            this._state = 'running';\n            return startRendering(this.destination, this._nativeOfflineAudioContext)\n                .then((audioBuffer) => {\n                this._state = null;\n                /*\n                 * Bug #50: Deleting the AudioGraph is currently not possible anymore.\n                 * deleteAudioGraph(this, this._nativeOfflineAudioContext);\n                 */\n                return audioBuffer;\n            })\n                // @todo This could be written more elegantly when Promise.finally() becomes avalaible.\n                .catch((err) => {\n                this._state = null;\n                /*\n                 * Bug #50: Deleting the AudioGraph is currently not possible anymore.\n                 * deleteAudioGraph(this, this._nativeOfflineAudioContext);\n                 */\n                throw err;\n            });\n        }\n        _waitForThePromiseToSettle(event) {\n            if (this._state === null) {\n                this._nativeOfflineAudioContext.dispatchEvent(event);\n            }\n            else {\n                setTimeout(() => this._waitForThePromiseToSettle(event));\n            }\n        }\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/offline-audio-context-constructor.js.map","import { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassive } from '../helpers/set-internal-state-to-passive';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    detune: 0,\n    frequency: 440,\n    type: 'sine'\n};\nexport const createOscillatorNodeConstructor = (audioNodeConstructor, createAudioParam, createInvalidStateError, createNativeOscillatorNode, createOscillatorNodeRenderer, getNativeContext, isNativeOfflineAudioContext, wrapEventListener) => {\n    return class OscillatorNode extends audioNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeOscillatorNode = createNativeOscillatorNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const oscillatorNodeRenderer = ((isOffline) ? createOscillatorNodeRenderer() : null);\n            const nyquist = context.sampleRate / 2;\n            super(context, false, nativeOscillatorNode, oscillatorNodeRenderer);\n            // Bug #81: Edge, Firefox & Safari do not export the correct values for maxValue and minValue.\n            this._detune = createAudioParam(this, isOffline, nativeOscillatorNode.detune, 153600, -153600);\n            // Bug #76: Edge & Safari do not export the correct values for maxValue and minValue.\n            this._frequency = createAudioParam(this, isOffline, nativeOscillatorNode.frequency, nyquist, -nyquist);\n            this._nativeOscillatorNode = nativeOscillatorNode;\n            this._onended = null;\n            this._oscillatorNodeRenderer = oscillatorNodeRenderer;\n            if (this._oscillatorNodeRenderer !== null && mergedOptions.periodicWave !== undefined) {\n                this._oscillatorNodeRenderer.periodicWave =\n                    mergedOptions.periodicWave;\n            }\n        }\n        get detune() {\n            return this._detune;\n        }\n        get frequency() {\n            return this._frequency;\n        }\n        get onended() {\n            return this._onended;\n        }\n        set onended(value) {\n            const wrappedListener = (typeof value === 'function') ? wrapEventListener(this, value) : null;\n            this._nativeOscillatorNode.onended = wrappedListener;\n            const nativeOnEnded = this._nativeOscillatorNode.onended;\n            this._onended = (nativeOnEnded !== null && nativeOnEnded === wrappedListener)\n                ? value\n                : nativeOnEnded;\n        }\n        get type() {\n            return this._nativeOscillatorNode.type;\n        }\n        set type(value) {\n            this._nativeOscillatorNode.type = value;\n            // Bug #57: Edge will not throw an error when assigning the type to 'custom'. But it still will change the value.\n            if (value === 'custom') {\n                throw createInvalidStateError();\n            }\n            if (this._oscillatorNodeRenderer !== null) {\n                this._oscillatorNodeRenderer.periodicWave = null;\n            }\n        }\n        setPeriodicWave(periodicWave) {\n            this._nativeOscillatorNode.setPeriodicWave(periodicWave);\n            if (this._oscillatorNodeRenderer !== null) {\n                this._oscillatorNodeRenderer.periodicWave = periodicWave;\n            }\n        }\n        start(when = 0) {\n            this._nativeOscillatorNode.start(when);\n            if (this._oscillatorNodeRenderer !== null) {\n                this._oscillatorNodeRenderer.start = when;\n            }\n            else {\n                setInternalStateToActive(this);\n                const resetInternalStateToPassive = () => {\n                    this._nativeOscillatorNode.removeEventListener('ended', resetInternalStateToPassive);\n                    // @todo Determine a meaningful delay instead of just using one second.\n                    setTimeout(() => setInternalStateToPassive(this), 1000);\n                };\n                this._nativeOscillatorNode.addEventListener('ended', resetInternalStateToPassive);\n            }\n        }\n        stop(when = 0) {\n            this._nativeOscillatorNode.stop(when);\n            if (this._oscillatorNodeRenderer !== null) {\n                this._oscillatorNodeRenderer.stop = when;\n            }\n        }\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/oscillator-node-constructor.js.map","import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createOscillatorNodeRendererFactory = (connectAudioParam, createNativeOscillatorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeOscillatorNodes = new WeakMap();\n        let periodicWave = null;\n        let start = null;\n        let stop = null;\n        const createOscillatorNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeOscillatorNode = getNativeAudioNode(proxy);\n            // If the initially used nativeOscillatorNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeOscillatorNodeIsOwnedByContext = isOwnedByContext(nativeOscillatorNode, nativeOfflineAudioContext);\n            if (!nativeOscillatorNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeOscillatorNode.channelCount,\n                    channelCountMode: nativeOscillatorNode.channelCountMode,\n                    channelInterpretation: nativeOscillatorNode.channelInterpretation,\n                    detune: nativeOscillatorNode.detune.value,\n                    frequency: nativeOscillatorNode.frequency.value,\n                    periodicWave: (periodicWave === null) ? undefined : periodicWave,\n                    type: nativeOscillatorNode.type\n                };\n                nativeOscillatorNode = createNativeOscillatorNode(nativeOfflineAudioContext, options);\n                if (start !== null) {\n                    nativeOscillatorNode.start(start);\n                }\n                if (stop !== null) {\n                    nativeOscillatorNode.stop(stop);\n                }\n            }\n            renderedNativeOscillatorNodes.set(nativeOfflineAudioContext, nativeOscillatorNode);\n            if (!nativeOscillatorNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency, trace);\n            }\n            else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency, trace);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeOscillatorNode, trace);\n            return nativeOscillatorNode;\n        };\n        return {\n            set periodicWave(value) {\n                periodicWave = value;\n            },\n            set start(value) {\n                start = value;\n            },\n            set stop(value) {\n                stop = value;\n            },\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeOscillatorNode = renderedNativeOscillatorNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeOscillatorNode !== undefined) {\n                    return Promise.resolve(renderedNativeOscillatorNode);\n                }\n                return createOscillatorNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/oscillator-node-renderer-factory.js.map","import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'clamped-max',\n    channelInterpretation: 'speakers',\n    coneInnerAngle: 360,\n    coneOuterAngle: 360,\n    coneOuterGain: 0,\n    distanceModel: 'inverse',\n    maxDistance: 10000,\n    orientationX: 1,\n    orientationY: 0,\n    orientationZ: 0,\n    panningModel: 'equalpower',\n    positionX: 0,\n    positionY: 0,\n    positionZ: 0,\n    refDistance: 1,\n    rolloffFactor: 1\n};\nexport const createPannerNodeConstructor = (audioNodeConstructor, createAudioParam, createNativePannerNode, createPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext) => {\n    return class PannerNode extends audioNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativePannerNode = createNativePannerNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const pannerNodeRenderer = ((isOffline) ? createPannerNodeRenderer() : null);\n            super(context, false, nativePannerNode, pannerNodeRenderer);\n            this._nativePannerNode = nativePannerNode;\n            // Bug #74: Edge & Safari do not export the correct values for maxValue and minValue for GainNodes.\n            this._orientationX = createAudioParam(this, isOffline, nativePannerNode.orientationX, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            this._orientationY = createAudioParam(this, isOffline, nativePannerNode.orientationY, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            this._orientationZ = createAudioParam(this, isOffline, nativePannerNode.orientationZ, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            this._positionX = createAudioParam(this, isOffline, nativePannerNode.positionX, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            this._positionY = createAudioParam(this, isOffline, nativePannerNode.positionY, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            this._positionZ = createAudioParam(this, isOffline, nativePannerNode.positionZ, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n        }\n        get coneInnerAngle() {\n            return this._nativePannerNode.coneInnerAngle;\n        }\n        set coneInnerAngle(value) {\n            this._nativePannerNode.coneInnerAngle = value;\n        }\n        get coneOuterAngle() {\n            return this._nativePannerNode.coneOuterAngle;\n        }\n        set coneOuterAngle(value) {\n            this._nativePannerNode.coneOuterAngle = value;\n        }\n        get coneOuterGain() {\n            return this._nativePannerNode.coneOuterGain;\n        }\n        set coneOuterGain(value) {\n            this._nativePannerNode.coneOuterGain = value;\n        }\n        get distanceModel() {\n            return this._nativePannerNode.distanceModel;\n        }\n        set distanceModel(value) {\n            this._nativePannerNode.distanceModel = value;\n        }\n        get maxDistance() {\n            return this._nativePannerNode.maxDistance;\n        }\n        set maxDistance(value) {\n            this._nativePannerNode.maxDistance = value;\n        }\n        get orientationX() {\n            return this._orientationX;\n        }\n        get orientationY() {\n            return this._orientationY;\n        }\n        get orientationZ() {\n            return this._orientationZ;\n        }\n        get panningModel() {\n            return this._nativePannerNode.panningModel;\n        }\n        set panningModel(value) {\n            this._nativePannerNode.panningModel = value;\n        }\n        get positionX() {\n            return this._positionX;\n        }\n        get positionY() {\n            return this._positionY;\n        }\n        get positionZ() {\n            return this._positionZ;\n        }\n        get refDistance() {\n            return this._nativePannerNode.refDistance;\n        }\n        set refDistance(value) {\n            this._nativePannerNode.refDistance = value;\n        }\n        get rolloffFactor() {\n            return this._nativePannerNode.rolloffFactor;\n        }\n        set rolloffFactor(value) {\n            this._nativePannerNode.rolloffFactor = value;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/panner-node-constructor.js.map","import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createPannerNodeRendererFactory = (connectAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeGainNode, createNativePannerNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext) => {\n    return () => {\n        const renderedNativeAudioNodes = new WeakMap();\n        let renderedBufferPromise = null;\n        const createAudioNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeGainNode = null;\n            let nativePannerNode = getNativeAudioNode(proxy);\n            const commonAudioNodeOptions = {\n                channelCount: nativePannerNode.channelCount,\n                channelCountMode: nativePannerNode.channelCountMode,\n                channelInterpretation: nativePannerNode.channelInterpretation\n            };\n            const commonNativePannerNodeOptions = {\n                ...commonAudioNodeOptions,\n                coneInnerAngle: nativePannerNode.coneInnerAngle,\n                coneOuterAngle: nativePannerNode.coneOuterAngle,\n                coneOuterGain: nativePannerNode.coneOuterGain,\n                distanceModel: nativePannerNode.distanceModel,\n                maxDistance: nativePannerNode.maxDistance,\n                panningModel: nativePannerNode.panningModel,\n                refDistance: nativePannerNode.refDistance,\n                rolloffFactor: nativePannerNode.rolloffFactor\n            };\n            // If the initially used nativePannerNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativePannerNodeIsOwnedByContext = isOwnedByContext(nativePannerNode, nativeOfflineAudioContext);\n            // Bug #124: Edge & Safari do not support modifying the orientation and the position with AudioParams.\n            if ('bufferSize' in nativePannerNode) {\n                nativeGainNode = createNativeGainNode(nativeOfflineAudioContext, { ...commonAudioNodeOptions, gain: 1 });\n            }\n            else if (!nativePannerNodeIsOwnedByContext) {\n                const options = {\n                    ...commonNativePannerNodeOptions,\n                    orientationX: nativePannerNode.orientationX.value,\n                    orientationY: nativePannerNode.orientationY.value,\n                    orientationZ: nativePannerNode.orientationZ.value,\n                    positionX: nativePannerNode.positionX.value,\n                    positionY: nativePannerNode.positionY.value,\n                    positionZ: nativePannerNode.positionZ.value\n                };\n                nativePannerNode = createNativePannerNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeAudioNodes.set(nativeOfflineAudioContext, (nativeGainNode === null) ? nativePannerNode : nativeGainNode);\n            if (nativeGainNode !== null) {\n                if (renderedBufferPromise === null) {\n                    if (nativeOfflineAudioContextConstructor === null) {\n                        throw new Error('Missing the native OfflineAudioContext constructor.');\n                    }\n                    const partialOfflineAudioContext = new nativeOfflineAudioContextConstructor(6, \n                    // Bug #17: Safari does not yet expose the length.\n                    proxy.context.length, nativeOfflineAudioContext.sampleRate);\n                    const nativeChannelMergerNode = createNativeChannelMergerNode(partialOfflineAudioContext, {\n                        channelCount: 1,\n                        channelCountMode: 'explicit',\n                        channelInterpretation: 'speakers',\n                        numberOfInputs: 6\n                    });\n                    nativeChannelMergerNode.connect(partialOfflineAudioContext.destination);\n                    renderedBufferPromise = (async () => {\n                        const nativeConstantSourceNodes = await Promise\n                            .all([\n                            proxy.orientationX,\n                            proxy.orientationY,\n                            proxy.orientationZ,\n                            proxy.positionX,\n                            proxy.positionY,\n                            proxy.positionZ\n                        ]\n                            .map(async (audioParam, index) => {\n                            const nativeConstantSourceNode = createNativeConstantSourceNode(partialOfflineAudioContext, {\n                                channelCount: 1,\n                                channelCountMode: 'explicit',\n                                channelInterpretation: 'discrete',\n                                offset: (index === 0) ? 1 : 0\n                            });\n                            await renderAutomation(partialOfflineAudioContext, audioParam, nativeConstantSourceNode.offset, trace);\n                            return nativeConstantSourceNode;\n                        }));\n                        for (let i = 0; i < 6; i += 1) {\n                            nativeConstantSourceNodes[i].connect(nativeChannelMergerNode, 0, i);\n                            nativeConstantSourceNodes[i].start(0);\n                        }\n                        return renderNativeOfflineAudioContext(partialOfflineAudioContext);\n                    })();\n                }\n                const renderedBuffer = await renderedBufferPromise;\n                const inputGainNode = createNativeGainNode(nativeOfflineAudioContext, { ...commonAudioNodeOptions, gain: 1 });\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, inputGainNode, trace);\n                const channelDatas = [];\n                for (let i = 0; i < renderedBuffer.numberOfChannels; i += 1) {\n                    channelDatas.push(renderedBuffer.getChannelData(i));\n                }\n                let lastOrientation = [channelDatas[0][0], channelDatas[1][0], channelDatas[2][0]];\n                let lastPosition = [channelDatas[3][0], channelDatas[4][0], channelDatas[5][0]];\n                let gateGainNode = createNativeGainNode(nativeOfflineAudioContext, { ...commonAudioNodeOptions, gain: 1 });\n                let partialPannerNode = createNativePannerNode(nativeOfflineAudioContext, {\n                    ...commonNativePannerNodeOptions,\n                    orientationX: lastOrientation[0],\n                    orientationY: lastOrientation[1],\n                    orientationZ: lastOrientation[2],\n                    positionX: lastPosition[0],\n                    positionY: lastPosition[1],\n                    positionZ: lastPosition[2]\n                });\n                inputGainNode\n                    .connect(gateGainNode)\n                    .connect(partialPannerNode.inputs[0]);\n                partialPannerNode.connect(nativeGainNode);\n                for (let i = 128; i < renderedBuffer.length; i += 128) {\n                    const orientation = [channelDatas[0][i], channelDatas[1][i], channelDatas[2][i]];\n                    const positon = [channelDatas[3][i], channelDatas[4][i], channelDatas[5][i]];\n                    if (orientation.some((value, index) => (value !== lastOrientation[index]))\n                        || positon.some((value, index) => (value !== lastPosition[index]))) {\n                        lastOrientation = orientation;\n                        lastPosition = positon;\n                        const currentTime = i / nativeOfflineAudioContext.sampleRate;\n                        gateGainNode.gain.setValueAtTime(0, currentTime);\n                        gateGainNode = createNativeGainNode(nativeOfflineAudioContext, { ...commonAudioNodeOptions, gain: 0 });\n                        partialPannerNode = createNativePannerNode(nativeOfflineAudioContext, {\n                            ...commonNativePannerNodeOptions,\n                            orientationX: lastOrientation[0],\n                            orientationY: lastOrientation[1],\n                            orientationZ: lastOrientation[2],\n                            positionX: lastPosition[0],\n                            positionY: lastPosition[1],\n                            positionZ: lastPosition[2]\n                        });\n                        gateGainNode.gain.setValueAtTime(1, currentTime);\n                        inputGainNode\n                            .connect(gateGainNode)\n                            .connect(partialPannerNode.inputs[0]);\n                        partialPannerNode.connect(nativeGainNode);\n                    }\n                }\n                return nativeGainNode;\n            }\n            if (!nativePannerNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.orientationX, nativePannerNode.orientationX, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.orientationY, nativePannerNode.orientationY, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.orientationZ, nativePannerNode.orientationZ, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.positionX, nativePannerNode.positionX, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.positionY, nativePannerNode.positionY, trace);\n                await renderAutomation(nativeOfflineAudioContext, proxy.positionZ, nativePannerNode.positionZ, trace);\n            }\n            else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.orientationX, nativePannerNode.orientationX, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.orientationY, nativePannerNode.orientationY, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.orientationZ, nativePannerNode.orientationZ, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.positionX, nativePannerNode.positionX, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.positionY, nativePannerNode.positionY, trace);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.positionZ, nativePannerNode.positionZ, trace);\n            }\n            if (isNativeAudioNodeFaker(nativePannerNode)) {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativePannerNode.inputs[0], trace);\n            }\n            else {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativePannerNode, trace);\n            }\n            return nativePannerNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeGainNodeOrNativePannerNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeGainNodeOrNativePannerNode !== undefined) {\n                    return Promise.resolve(renderedNativeGainNodeOrNativePannerNode);\n                }\n                return createAudioNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/panner-node-renderer-factory.js.map","const DEFAULT_OPTIONS = {\n    disableNormalization: false\n};\nexport const createPeriodicWaveConstructor = (createNativePeriodicWave, getNativeContext, periodicWaveStore) => {\n    return class PeriodicWave {\n        constructor(context, options) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const periodicWave = createNativePeriodicWave(nativeContext, mergedOptions);\n            periodicWaveStore.add(periodicWave);\n            // This does violate all good pratices but it is used here to simplify the handling of periodic waves.\n            return periodicWave;\n        }\n        static [Symbol.hasInstance](instance) {\n            return (instance !== null && typeof instance === 'object' && Object.getPrototypeOf(instance) === PeriodicWave.prototype)\n                || (periodicWaveStore.has(instance));\n        }\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/periodic-wave-constructor.js.map","export const createRenderAutomation = (getAudioParamRenderer, renderInputsOfAudioParam) => {\n    return (nativeOfflineAudioContext, audioParam, nativeAudioParam, trace) => {\n        const audioParamRenderer = getAudioParamRenderer(audioParam);\n        audioParamRenderer.replay(nativeAudioParam);\n        return renderInputsOfAudioParam(audioParam, nativeOfflineAudioContext, nativeAudioParam, trace);\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/render-automation.js.map","export const createRenderInputsOfAudioNode = (getAudioNodeConnections, getAudioNodeRenderer, isPartOfACycle) => {\n    return async (audioNode, nativeOfflineAudioContext, nativeAudioNode, trace) => {\n        const audioNodeConnections = getAudioNodeConnections(audioNode);\n        const nextTrace = [...trace, audioNode];\n        await Promise\n            .all(audioNodeConnections.activeInputs\n            .map((connections, input) => Array\n            .from(connections)\n            .filter(([source]) => !nextTrace.includes(source))\n            .map(async ([source, output]) => {\n            const audioNodeRenderer = getAudioNodeRenderer(source);\n            const renderedNativeAudioNode = await audioNodeRenderer.render(source, nativeOfflineAudioContext, nextTrace);\n            const destination = audioNode.context.destination;\n            if (!isPartOfACycle(source) && ((audioNode !== destination) || !isPartOfACycle(audioNode))) {\n                renderedNativeAudioNode.connect(nativeAudioNode, output, input);\n            }\n        }))\n            .reduce((allRenderingPromises, renderingPromises) => [...allRenderingPromises, ...renderingPromises], []));\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/render-inputs-of-audio-node.js.map","export const createRenderInputsOfAudioParam = (getAudioNodeRenderer, getAudioParamConnections, isPartOfACycle) => {\n    return async (audioParam, nativeOfflineAudioContext, nativeAudioParam, trace) => {\n        const audioParamConnections = getAudioParamConnections(audioParam);\n        await Promise\n            .all(Array\n            .from(audioParamConnections.activeInputs)\n            .map(async ([source, output]) => {\n            const audioNodeRenderer = getAudioNodeRenderer(source);\n            const renderedNativeAudioNode = await audioNodeRenderer.render(source, nativeOfflineAudioContext, trace);\n            if (!isPartOfACycle(source)) {\n                renderedNativeAudioNode.connect(nativeAudioParam, output);\n            }\n        }));\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/render-inputs-of-audio-param.js.map","import { testPromiseSupport } from '../helpers/test-promise-support';\nexport const createRenderNativeOfflineAudioContext = (cacheTestResult, createNativeGainNode, createNativeScriptProcessorNode, testOfflineAudioContextCurrentTimeSupport) => {\n    return (nativeOfflineAudioContext) => {\n        // Bug #21: Safari does not support promises yet.\n        if (cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeOfflineAudioContext))) {\n            // Bug #158: Edge does not advance currentTime if it is not accessed while rendering the audio.\n            return Promise\n                .resolve(cacheTestResult(testOfflineAudioContextCurrentTimeSupport, testOfflineAudioContextCurrentTimeSupport))\n                .then((isOfflineAudioContextCurrentTimeSupported) => {\n                if (!isOfflineAudioContextCurrentTimeSupported) {\n                    const scriptProcessorNode = createNativeScriptProcessorNode(nativeOfflineAudioContext, 512, 0, 1);\n                    nativeOfflineAudioContext.oncomplete = () => {\n                        scriptProcessorNode.onaudioprocess = null; // tslint:disable-line:deprecation\n                        scriptProcessorNode.disconnect();\n                    };\n                    scriptProcessorNode.onaudioprocess = () => nativeOfflineAudioContext.currentTime; // tslint:disable-line:deprecation\n                    scriptProcessorNode.connect(nativeOfflineAudioContext.destination);\n                }\n                return nativeOfflineAudioContext.startRendering();\n            });\n        }\n        return new Promise((resolve) => {\n            // Bug #48: Safari does not render an OfflineAudioContext without any connected node.\n            const gainNode = createNativeGainNode(nativeOfflineAudioContext, {\n                channelCount: 1,\n                channelCountMode: 'explicit',\n                channelInterpretation: 'discrete',\n                gain: 0\n            });\n            nativeOfflineAudioContext.oncomplete = (event) => {\n                gainNode.disconnect();\n                resolve(event.renderedBuffer);\n            };\n            gainNode.connect(nativeOfflineAudioContext.destination);\n            nativeOfflineAudioContext.startRendering();\n        });\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/render-native-offline-audio-context.js.map","import { wrapAudioBufferGetChannelDataMethod } from '../helpers/wrap-audio-buffer-get-channel-data-method';\nexport const createStartRendering = (audioBufferStore, cacheTestResult, getAudioNodeRenderer, getUnrenderedAudioWorkletNodes, renderNativeOfflineAudioContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds) => {\n    const trace = [];\n    return (destination, nativeOfflineAudioContext) => getAudioNodeRenderer(destination)\n        .render(destination, nativeOfflineAudioContext, trace)\n        /*\n         * Bug #86 & #87: Invoking the renderer of an AudioWorkletNode might be necessary if it has no direct or indirect connection to the\n         * destination.\n         */\n        .then(() => Promise\n        .all(Array\n        .from(getUnrenderedAudioWorkletNodes(nativeOfflineAudioContext))\n        .map((audioWorkletNode) => getAudioNodeRenderer(audioWorkletNode)\n        .render(audioWorkletNode, nativeOfflineAudioContext, trace))))\n        .then(() => renderNativeOfflineAudioContext(nativeOfflineAudioContext))\n        .then((audioBuffer) => {\n        // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n        // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.\n        if (typeof audioBuffer.copyFromChannel !== 'function') {\n            wrapAudioBufferCopyChannelMethods(audioBuffer);\n            wrapAudioBufferGetChannelDataMethod(audioBuffer);\n            // Bug #157: Only Chrome & Opera do allow the bufferOffset to be out-of-bounds.\n        }\n        else if (!cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, () => testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer))) {\n            wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n        }\n        audioBufferStore.add(audioBuffer);\n        return audioBuffer;\n    });\n};\n//# sourceMappingURL=/build/es2019/factories/start-rendering.js.map","const DEFAULT_OPTIONS = {\n    channelCount: 2,\n    /*\n     * Bug #105: The channelCountMode should be 'clamped-max' according to the spec but is set to 'explicit' to achieve consistent\n     * behavior.\n     */\n    channelCountMode: 'explicit',\n    channelInterpretation: 'speakers',\n    pan: 0\n};\nexport const createStereoPannerNodeConstructor = (audioNodeConstructor, createAudioParam, createNativeStereoPannerNode, createStereoPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext) => {\n    return class StereoPannerNode extends audioNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeStereoPannerNode = createNativeStereoPannerNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const stereoPannerNodeRenderer = ((isOffline) ? createStereoPannerNodeRenderer() : null);\n            super(context, false, nativeStereoPannerNode, stereoPannerNodeRenderer);\n            // Bug #106: Edge does not export a maxValue and minValue property.\n            this._pan = createAudioParam(this, isOffline, nativeStereoPannerNode.pan, 1, -1);\n        }\n        get pan() {\n            return this._pan;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/stereo-panner-node-constructor.js.map","import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createStereoPannerNodeRendererFactory = (connectAudioParam, createNativeStereoPannerNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeStereoPannerNodes = new WeakMap();\n        const createStereoPannerNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeStereoPannerNode = getNativeAudioNode(proxy);\n            /*\n             * If the initially used nativeStereoPannerNode was not constructed on the same OfflineAudioContext it needs to be created\n             * again.\n             */\n            const nativeStereoPannerNodeIsOwnedByContext = isOwnedByContext(nativeStereoPannerNode, nativeOfflineAudioContext);\n            if (!nativeStereoPannerNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeStereoPannerNode.channelCount,\n                    channelCountMode: nativeStereoPannerNode.channelCountMode,\n                    channelInterpretation: nativeStereoPannerNode.channelInterpretation,\n                    pan: nativeStereoPannerNode.pan.value\n                };\n                nativeStereoPannerNode = createNativeStereoPannerNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeStereoPannerNodes.set(nativeOfflineAudioContext, nativeStereoPannerNode);\n            if (!nativeStereoPannerNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan, trace);\n            }\n            else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan, trace);\n            }\n            if (isNativeAudioNodeFaker(nativeStereoPannerNode)) {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode.inputs[0], trace);\n            }\n            else {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode, trace);\n            }\n            return nativeStereoPannerNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeStereoPannerNode = renderedNativeStereoPannerNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeStereoPannerNode !== undefined) {\n                    return Promise.resolve(renderedNativeStereoPannerNode);\n                }\n                return createStereoPannerNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/stereo-panner-node-renderer-factory.js.map","// Bug #33: Edge & Safari expose an AudioBuffer but it can't be used as a constructor.\nexport const createTestAudioBufferConstructorSupport = (nativeAudioBufferConstructor) => {\n    return () => {\n        if (nativeAudioBufferConstructor === null) {\n            return false;\n        }\n        try {\n            new nativeAudioBufferConstructor({ length: 1, sampleRate: 44100 }); // tslint:disable-line:no-unused-expression\n        }\n        catch {\n            return false;\n        }\n        return true;\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/test-audio-buffer-constructor-support.js.map","/*\n * Firefox up to version 67 didn't fully support the copyFromChannel() and copyToChannel() methods. Therefore testing one of those methods\n * is enough to know if the other one is supported as well.\n */\nexport const createTestAudioBufferCopyChannelMethodsSubarraySupport = (nativeOfflineAudioContextConstructor) => {\n    return () => {\n        if (nativeOfflineAudioContextConstructor === null) {\n            return false;\n        }\n        const nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n        const nativeAudioBuffer = nativeOfflineAudioContext.createBuffer(1, 1, 44100);\n        // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n        if (nativeAudioBuffer.copyToChannel === undefined) {\n            return true;\n        }\n        const source = new Float32Array(2);\n        try {\n            nativeAudioBuffer.copyFromChannel(source, 0, 0);\n        }\n        catch {\n            return false;\n        }\n        return true;\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/test-audio-buffer-copy-channel-methods-subarray-support.js.map","export const createTestAudioBufferSourceNodeStartMethodConsecutiveCallsSupport = (createNativeAudioNode) => {\n    return (nativeContext) => {\n        const nativeAudioBufferSourceNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createBufferSource());\n        nativeAudioBufferSourceNode.start();\n        try {\n            nativeAudioBufferSourceNode.start();\n        }\n        catch {\n            return true;\n        }\n        return false;\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/test-audio-buffer-source-node-start-method-consecutive-calls-support.js.map","// Bug #92: Edge does not respect the duration parameter yet.\nexport const createTestAudioBufferSourceNodeStartMethodDurationParameterSupport = (nativeOfflineAudioContextConstructor) => {\n    return () => {\n        if (nativeOfflineAudioContextConstructor === null) {\n            return Promise.resolve(false);\n        }\n        const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n        const audioBuffer = offlineAudioContext.createBuffer(1, 1, offlineAudioContext.sampleRate);\n        const audioBufferSourceNode = offlineAudioContext.createBufferSource();\n        audioBuffer.getChannelData(0)[0] = 1;\n        audioBufferSourceNode.buffer = audioBuffer;\n        audioBufferSourceNode.start(0, 0, 0);\n        audioBufferSourceNode.connect(offlineAudioContext.destination);\n        // Bug #21: Safari does not support promises yet.\n        return new Promise((resolve) => {\n            offlineAudioContext.oncomplete = ({ renderedBuffer }) => {\n                // Bug #5: Safari does not support copyFromChannel().\n                resolve(renderedBuffer.getChannelData(0)[0] === 0);\n            };\n            offlineAudioContext.startRendering();\n        });\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/test-audio-buffer-source-node-start-method-duration-parameter-support.js.map","export const createTestAudioBufferSourceNodeStartMethodOffsetClampingSupport = (createNativeAudioNode) => {\n    return (nativeContext) => {\n        const nativeAudioBufferSourceNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createBufferSource());\n        const nativeAudioBuffer = nativeContext.createBuffer(1, 1, 44100);\n        nativeAudioBufferSourceNode.buffer = nativeAudioBuffer;\n        try {\n            nativeAudioBufferSourceNode.start(0, 1);\n        }\n        catch {\n            return false;\n        }\n        return true;\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/test-audio-buffer-source-node-start-method-offset-clamping-support.js.map","export const createTestAudioBufferSourceNodeStopMethodNullifiedBufferSupport = (createNativeAudioNode) => {\n    return (nativeContext) => {\n        const nativeAudioBufferSourceNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createBufferSource());\n        nativeAudioBufferSourceNode.start();\n        try {\n            nativeAudioBufferSourceNode.stop();\n        }\n        catch {\n            return false;\n        }\n        return true;\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/test-audio-buffer-source-node-stop-method-nullified-buffer-support.js.map","export const createTestAudioContextCloseMethodSupport = (nativeAudioContextConstructor) => {\n    return () => {\n        if (nativeAudioContextConstructor === null) {\n            return false;\n        }\n        // Try to check the prototype before constructing the AudioContext.\n        if (nativeAudioContextConstructor.prototype !== undefined &&\n            nativeAudioContextConstructor.prototype.close !== undefined) {\n            return true;\n        }\n        const audioContext = new nativeAudioContextConstructor();\n        const isAudioContextClosable = (audioContext.close !== undefined);\n        try {\n            audioContext.close();\n        }\n        catch {\n            // Ignore errors.\n        }\n        return isAudioContextClosable;\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/test-audio-context-close-method-support.js.map","/**\n * Edge up to version 14, Firefox up to version 52, Safari up to version 9 and maybe other browsers\n * did not refuse to decode invalid parameters with a TypeError.\n */\nexport const createTestAudioContextDecodeAudioDataMethodTypeErrorSupport = (nativeOfflineAudioContextConstructor) => {\n    return () => {\n        if (nativeOfflineAudioContextConstructor === null) {\n            return Promise.resolve(false);\n        }\n        const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n        // Bug #21: Safari does not support promises yet.\n        return new Promise((resolve) => {\n            let isPending = true;\n            const resolvePromise = (err) => {\n                if (isPending) {\n                    isPending = false;\n                    offlineAudioContext.startRendering();\n                    resolve(err instanceof TypeError);\n                }\n            };\n            let promise;\n            // Bug #26: Safari throws a synchronous error.\n            try {\n                promise = offlineAudioContext\n                    // Bug #1: Safari requires a successCallback.\n                    .decodeAudioData(null, () => {\n                    // Ignore the success callback.\n                }, resolvePromise);\n            }\n            catch (err) {\n                resolvePromise(err);\n            }\n            // Bug #21: Safari does not support promises yet.\n            if (promise !== undefined) {\n                // Bug #6 Chrome does not call the errorCallback\n                promise.catch(resolvePromise);\n            }\n        });\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/test-audio-context-decode-audio-data-method-type-error-support.js.map","export const createTestAudioContextOptionsSupport = (nativeAudioContextConstructor) => {\n    return () => {\n        if (nativeAudioContextConstructor === null) {\n            return false;\n        }\n        let audioContext;\n        try {\n            audioContext = new nativeAudioContextConstructor({ latencyHint: 'balanced' });\n        }\n        catch {\n            return false;\n        }\n        audioContext.close();\n        return true;\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/test-audio-context-options-support.js.map","// Safari up to version 12.0 (but not v12.1) didn't return the destination in case it was an AudioNode.\nexport const createTestAudioNodeConnectMethodSupport = (nativeOfflineAudioContextConstructor) => {\n    return () => {\n        if (nativeOfflineAudioContextConstructor === null) {\n            return false;\n        }\n        const nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n        const nativeGainNode = nativeOfflineAudioContext.createGain();\n        const isSupported = (nativeGainNode.connect(nativeGainNode) === nativeGainNode);\n        nativeGainNode.disconnect(nativeGainNode);\n        return isSupported;\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/test-audio-node-connect-method-support.js.map","export const createTestAudioScheduledSourceNodeStartMethodNegativeParametersSupport = (createNativeAudioNode) => {\n    return (nativeContext) => {\n        const nativeAudioBufferSourceNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createOscillator());\n        try {\n            nativeAudioBufferSourceNode.start(-1);\n        }\n        catch (err) {\n            return (err instanceof RangeError);\n        }\n        return false;\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/test-audio-scheduled-source-node-start-method-negative-parameters-support.js.map","export const createTestAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport = (createNativeAudioNode) => {\n    return (nativeContext) => {\n        const nativeAudioBuffer = nativeContext.createBuffer(1, 1, 44100);\n        const nativeAudioBufferSourceNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createBufferSource());\n        nativeAudioBufferSourceNode.buffer = nativeAudioBuffer;\n        nativeAudioBufferSourceNode.start();\n        nativeAudioBufferSourceNode.stop();\n        try {\n            nativeAudioBufferSourceNode.stop();\n            return true;\n        }\n        catch {\n            return false;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/test-audio-scheduled-source-node-stop-method-consecutive-calls-support.js.map","export const createTestAudioScheduledSourceNodeStopMethodNegativeParametersSupport = (createNativeAudioNode) => {\n    return (nativeContext) => {\n        const nativeAudioBufferSourceNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createOscillator());\n        try {\n            nativeAudioBufferSourceNode.stop(-1);\n        }\n        catch (err) {\n            return (err instanceof RangeError);\n        }\n        return false;\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/test-audio-scheduled-source-node-stop-method-negative-parameters-support.js.map","/**\n * Chrome version 66 and 67 did not call the process() function of an AudioWorkletProcessor if it had no outputs. AudioWorklet support was\n * enabled by default in version 66.\n */\nexport const createTestAudioWorkletProcessorNoOutputsSupport = (nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor) => {\n    return async () => {\n        // Bug #61: If there is no native AudioWorkletNode it gets faked and therefore it is no problem if the it doesn't exist.\n        if (nativeAudioWorkletNodeConstructor === null) {\n            return true;\n        }\n        if (nativeOfflineAudioContextConstructor === null) {\n            return false;\n        }\n        const blob = new Blob(['class A extends AudioWorkletProcessor{process(){this.port.postMessage(0)}}registerProcessor(\"a\",A)'], { type: 'application/javascript; charset=utf-8' });\n        const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 128, 3200);\n        const url = URL.createObjectURL(blob);\n        let isCallingProcess = false;\n        try {\n            await offlineAudioContext.audioWorklet.addModule(url);\n            const gainNode = offlineAudioContext.createGain();\n            const audioWorkletNode = new nativeAudioWorkletNodeConstructor(offlineAudioContext, 'a', { numberOfOutputs: 0 });\n            audioWorkletNode.port.onmessage = () => isCallingProcess = true;\n            gainNode.connect(audioWorkletNode);\n            await offlineAudioContext.startRendering();\n        }\n        catch {\n            // Ignore errors.\n        }\n        finally {\n            URL.revokeObjectURL(url);\n        }\n        return isCallingProcess;\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/test-audio-worklet-processor-no-outputs-support.js.map","/**\n * Firefox up to version 69 did not throw an error when setting a different channelCount or channelCountMode.\n */\nexport const createTestChannelMergerNodeChannelCountSupport = (createNativeAudioNode, nativeOfflineAudioContextConstructor) => {\n    return () => {\n        if (nativeOfflineAudioContextConstructor === null) {\n            return false;\n        }\n        const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n        const nativeChannelMergerNode = createNativeAudioNode(offlineAudioContext, (ntvCntxt) => ntvCntxt.createChannelMerger());\n        try {\n            nativeChannelMergerNode.channelCount = 2;\n        }\n        catch {\n            return true;\n        }\n        return false;\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/test-channel-merger-node-channel-count-support.js.map","export const createTestConstantSourceNodeAccurateSchedulingSupport = (createNativeAudioNode, nativeOfflineAudioContextConstructor) => {\n    return () => {\n        if (nativeOfflineAudioContextConstructor === null) {\n            return false;\n        }\n        const nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n        // Bug #62: Edge & Safari do not support ConstantSourceNodes.\n        if (nativeOfflineAudioContext.createConstantSource === undefined) {\n            return true;\n        }\n        const nativeConstantSourceNode = createNativeAudioNode(nativeOfflineAudioContext, (ntvCntxt) => ntvCntxt.createConstantSource());\n        /*\n         * @todo This is using bug #75 to detect bug #70. That works because both bugs were unique to\n         * the implementation of Firefox right now, but it could probably be done in a better way.\n         */\n        return (nativeConstantSourceNode.offset.maxValue !== Number.POSITIVE_INFINITY);\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/test-constant-source-node-accurate-scheduling-support.js.map","// Opera up to version 57 did not allow to reassign the buffer of a ConvolverNode.\nexport const createTestConvolverNodeBufferReassignabilitySupport = (nativeOfflineAudioContextConstructor) => {\n    return () => {\n        if (nativeOfflineAudioContextConstructor === null) {\n            return false;\n        }\n        const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n        const nativeConvolverNode = offlineAudioContext.createConvolver();\n        nativeConvolverNode.buffer = offlineAudioContext.createBuffer(1, 1, offlineAudioContext.sampleRate);\n        try {\n            nativeConvolverNode.buffer = offlineAudioContext.createBuffer(1, 1, offlineAudioContext.sampleRate);\n        }\n        catch {\n            return false;\n        }\n        return true;\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/test-convolver-node-buffer-reassignability-support.js.map","export const createTestIsSecureContextSupport = (window) => {\n    return () => (window !== null && window.hasOwnProperty('isSecureContext'));\n};\n//# sourceMappingURL=/build/es2019/factories/test-is-secure-context-support.js.map","// Firefox up to version 68 did not throw an error when creating a MediaStreamAudioSourceNode with a mediaStream that had no audio track.\nexport const createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport = (nativeAudioContextConstructor) => {\n    return () => {\n        if (nativeAudioContextConstructor === null) {\n            return false;\n        }\n        const audioContext = new nativeAudioContextConstructor();\n        try {\n            audioContext.createMediaStreamSource(new MediaStream());\n            return false;\n        }\n        catch (err) {\n            return true;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/test-media-stream-audio-source-node-media-stream-without-audio-track-support.js.map","export const createTestOfflineAudioContextCurrentTimeSupport = (createNativeGainNode, nativeOfflineAudioContextConstructor) => {\n    return () => {\n        if (nativeOfflineAudioContextConstructor === null) {\n            return Promise.resolve(false);\n        }\n        const nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n        // Bug #48: Safari does not render an OfflineAudioContext without any connected node.\n        const gainNode = createNativeGainNode(nativeOfflineAudioContext, {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete',\n            gain: 0\n        });\n        // Bug #21: Safari does not support promises yet.\n        return new Promise((resolve) => {\n            nativeOfflineAudioContext.oncomplete = () => {\n                gainNode.disconnect();\n                resolve(nativeOfflineAudioContext.currentTime !== 0);\n            };\n            nativeOfflineAudioContext.startRendering();\n        });\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/test-offline-audio-context-current-time-support.js.map","/**\n * Firefox up to version 62 did not kick off the processing of the StereoPannerNode if the value of pan was zero.\n */\nexport const createTestStereoPannerNodeDefaultValueSupport = (nativeOfflineAudioContextConstructor) => {\n    return () => {\n        if (nativeOfflineAudioContextConstructor === null) {\n            return Promise.resolve(false);\n        }\n        const nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n        /*\n         * Bug #105: Safari does not support the StereoPannerNode. Therefore the returned value should normally be false but the faker does\n         * support the tested behaviour.\n         */\n        if (nativeOfflineAudioContext.createStereoPanner === undefined) {\n            return Promise.resolve(true);\n        }\n        // Bug #62: Edge & Safari do not support ConstantSourceNodes.\n        if (nativeOfflineAudioContext.createConstantSource === undefined) {\n            return Promise.resolve(true);\n        }\n        const constantSourceNode = nativeOfflineAudioContext.createConstantSource();\n        const stereoPanner = nativeOfflineAudioContext.createStereoPanner();\n        constantSourceNode.channelCount = 1;\n        constantSourceNode.offset.value = 1;\n        stereoPanner.channelCount = 1;\n        constantSourceNode.start();\n        constantSourceNode\n            .connect(stereoPanner)\n            .connect(nativeOfflineAudioContext.destination);\n        return nativeOfflineAudioContext\n            .startRendering()\n            .then((buffer) => buffer.getChannelData(0)[0] !== 1);\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/test-stereo-panner-node-default-value-support.js.map","const DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    curve: null,\n    oversample: 'none'\n};\nexport const createWaveShaperNodeConstructor = (audioNodeConstructor, createInvalidStateError, createNativeWaveShaperNode, createWaveShaperNodeRenderer, getNativeContext, isNativeOfflineAudioContext) => {\n    return class WaveShaperNode extends audioNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeWaveShaperNode = createNativeWaveShaperNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const waveShaperNodeRenderer = ((isOffline) ? createWaveShaperNodeRenderer() : null);\n            // @todo Add a mechanism to only switch a WaveShaperNode to active while it is connected.\n            super(context, true, nativeWaveShaperNode, waveShaperNodeRenderer);\n            this._isCurveNullified = false;\n            this._nativeWaveShaperNode = nativeWaveShaperNode;\n        }\n        get curve() {\n            if (this._isCurveNullified) {\n                return null;\n            }\n            return this._nativeWaveShaperNode.curve;\n        }\n        set curve(value) {\n            // Bug #103: Safari does not allow to set the curve to null.\n            if (value === null) {\n                this._isCurveNullified = true;\n                this._nativeWaveShaperNode.curve = new Float32Array([0, 0]);\n            }\n            else {\n                // Bug #102: Safari does not throw an InvalidStateError when the curve has less than two samples.\n                // Bug #104: Chrome will throw an InvalidAccessError when the curve has less than two samples.\n                if (value.length < 2) {\n                    throw createInvalidStateError();\n                }\n                this._isCurveNullified = false;\n                this._nativeWaveShaperNode.curve = value;\n            }\n        }\n        get oversample() {\n            return this._nativeWaveShaperNode.oversample;\n        }\n        set oversample(value) {\n            this._nativeWaveShaperNode.oversample = value;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/wave-shaper-node-constructor.js.map","import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createWaveShaperNodeRendererFactory = (createNativeWaveShaperNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeWaveShaperNodes = new WeakMap();\n        const createWaveShaperNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeWaveShaperNode = getNativeAudioNode(proxy);\n            // If the initially used nativeWaveShaperNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeWaveShaperNodeIsOwnedByContext = isOwnedByContext(nativeWaveShaperNode, nativeOfflineAudioContext);\n            if (!nativeWaveShaperNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeWaveShaperNode.channelCount,\n                    channelCountMode: nativeWaveShaperNode.channelCountMode,\n                    channelInterpretation: nativeWaveShaperNode.channelInterpretation,\n                    curve: nativeWaveShaperNode.curve,\n                    oversample: nativeWaveShaperNode.oversample\n                };\n                nativeWaveShaperNode = createNativeWaveShaperNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeWaveShaperNodes.set(nativeOfflineAudioContext, nativeWaveShaperNode);\n            if (isNativeAudioNodeFaker(nativeWaveShaperNode)) {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeWaveShaperNode.inputs[0], trace);\n            }\n            else {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeWaveShaperNode, trace);\n            }\n            return nativeWaveShaperNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext, trace) {\n                const renderedNativeWaveShaperNode = renderedNativeWaveShaperNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeWaveShaperNode !== undefined) {\n                    return Promise.resolve(renderedNativeWaveShaperNode);\n                }\n                return createWaveShaperNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/wave-shaper-node-renderer-factory.js.map","export const createWindow = () => (typeof window === 'undefined') ? null : window;\n//# sourceMappingURL=/build/es2019/factories/window.js.map","export const createWrapAudioBufferCopyChannelMethods = (convertNumberToUnsignedLong, createIndexSizeError) => {\n    return (audioBuffer) => {\n        audioBuffer.copyFromChannel = (destination, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {\n            const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n            const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n            if (channelNumber >= audioBuffer.numberOfChannels) {\n                throw createIndexSizeError();\n            }\n            const audioBufferLength = audioBuffer.length;\n            const channelData = audioBuffer.getChannelData(channelNumber);\n            const destinationLength = destination.length;\n            for (let i = (bufferOffset < 0) ? -bufferOffset : 0; i + bufferOffset < audioBufferLength && i < destinationLength; i += 1) {\n                destination[i] = channelData[i + bufferOffset];\n            }\n        };\n        audioBuffer.copyToChannel = (source, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {\n            const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n            const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n            if (channelNumber >= audioBuffer.numberOfChannels) {\n                throw createIndexSizeError();\n            }\n            const audioBufferLength = audioBuffer.length;\n            const channelData = audioBuffer.getChannelData(channelNumber);\n            const sourceLength = source.length;\n            for (let i = (bufferOffset < 0) ? -bufferOffset : 0; i + bufferOffset < audioBufferLength && i < sourceLength; i += 1) {\n                channelData[i + bufferOffset] = source[i];\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/wrap-audio-buffer-copy-channel-methods.js.map","export const createWrapAudioBufferCopyChannelMethodsOutOfBounds = (convertNumberToUnsignedLong) => {\n    return (audioBuffer) => {\n        audioBuffer.copyFromChannel = ((copyFromChannel) => {\n            return (destination, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {\n                const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n                const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n                if (bufferOffset < audioBuffer.length) {\n                    return copyFromChannel.call(audioBuffer, destination, channelNumber, bufferOffset);\n                }\n            };\n        })(audioBuffer.copyFromChannel);\n        audioBuffer.copyToChannel = ((copyToChannel) => {\n            return (source, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {\n                const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n                const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n                if (bufferOffset < audioBuffer.length) {\n                    return copyToChannel.call(audioBuffer, source, channelNumber, bufferOffset);\n                }\n            };\n        })(audioBuffer.copyToChannel);\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/wrap-audio-buffer-copy-channel-methods-out-of-bounds.js.map","export const createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer = (overwriteAccessors) => {\n    return (nativeAudioBufferSourceNode, nativeContext) => {\n        const nullifiedBuffer = nativeContext.createBuffer(1, 1, nativeContext.sampleRate);\n        if (nativeAudioBufferSourceNode.buffer === null) {\n            nativeAudioBufferSourceNode.buffer = nullifiedBuffer;\n        }\n        overwriteAccessors(nativeAudioBufferSourceNode, 'buffer', (get) => () => {\n            const value = get.call(nativeAudioBufferSourceNode);\n            return (value === nullifiedBuffer) ? null : value;\n        }, (set) => (value) => {\n            return set.call(nativeAudioBufferSourceNode, (value === null) ? nullifiedBuffer : value);\n        });\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/wrap-audio-buffer-source-node-stop-method-nullified-buffer.js.map","import { interceptConnections } from '../helpers/intercept-connections';\nexport const createWrapAudioScheduledSourceNodeStopMethodConsecutiveCalls = (createNativeAudioNode) => {\n    return (nativeAudioScheduledSourceNode, nativeContext) => {\n        const nativeGainNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createGain());\n        nativeAudioScheduledSourceNode.connect(nativeGainNode);\n        const disconnectGainNode = ((disconnect) => {\n            return () => {\n                // @todo TypeScript cannot infer the overloaded signature with 1 argument yet.\n                disconnect.call(nativeAudioScheduledSourceNode, nativeGainNode);\n                nativeAudioScheduledSourceNode.removeEventListener('ended', disconnectGainNode);\n            };\n        })(nativeAudioScheduledSourceNode.disconnect);\n        nativeAudioScheduledSourceNode.addEventListener('ended', disconnectGainNode);\n        interceptConnections(nativeAudioScheduledSourceNode, nativeGainNode);\n        nativeAudioScheduledSourceNode.stop = ((stop) => {\n            let isStopped = false;\n            return (when = 0) => {\n                if (isStopped) {\n                    try {\n                        stop.call(nativeAudioScheduledSourceNode, when);\n                    }\n                    catch {\n                        nativeGainNode.gain.setValueAtTime(0, when);\n                    }\n                }\n                else {\n                    stop.call(nativeAudioScheduledSourceNode, when);\n                    isStopped = true;\n                }\n            };\n        })(nativeAudioScheduledSourceNode.stop);\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/wrap-audio-scheduled-source-node-stop-method-consecutive-calls.js.map","export const createWrapChannelMergerNode = (createInvalidStateError, createNativeAudioNode, monitorConnectionsFunction) => {\n    return (nativeContext, channelMergerNode) => {\n        channelMergerNode.channelCount = 1;\n        channelMergerNode.channelCountMode = 'explicit';\n        Object.defineProperty(channelMergerNode, 'channelCount', {\n            get: () => 1,\n            set: () => {\n                throw createInvalidStateError();\n            }\n        });\n        Object.defineProperty(channelMergerNode, 'channelCountMode', {\n            get: () => 'explicit',\n            set: () => {\n                throw createInvalidStateError();\n            }\n        });\n        // Bug #20: Safari requires a connection of any kind to treat the input signal correctly.\n        const audioBufferSourceNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createBufferSource());\n        const whenConnected = () => {\n            const length = channelMergerNode.numberOfInputs;\n            for (let i = 0; i < length; i += 1) {\n                audioBufferSourceNode.connect(channelMergerNode, 0, i);\n            }\n        };\n        const whenDisconnected = () => audioBufferSourceNode.disconnect(channelMergerNode);\n        monitorConnectionsFunction(channelMergerNode, whenConnected, whenDisconnected);\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/wrap-channel-merger-node.js.map","// Safari at version 11 did not support transferables.\nexport const testTransferablesSupport = () => new Promise((resolve) => {\n    const arrayBuffer = new ArrayBuffer(0);\n    const { port1, port2 } = new MessageChannel();\n    port1.onmessage = ({ data }) => resolve(data !== null);\n    port2.postMessage(arrayBuffer, [arrayBuffer]);\n});\n//# sourceMappingURL=/build/es2019/helpers/test-transferables-support.js.map","export const wrapAudioBufferSourceNodeStartMethodOffsetClamping = (nativeAudioBufferSourceNode) => {\n    nativeAudioBufferSourceNode.start = ((start) => {\n        return (when = 0, offset = 0, duration) => {\n            const buffer = nativeAudioBufferSourceNode.buffer;\n            // Bug #154: Safari does not clamp the offset if it is equal to or greater than the duration of the buffer.\n            const clampedOffset = (buffer === null) ? offset : Math.min(buffer.duration, offset);\n            // Bug #155: Safari does not handle the offset correctly if it would cause the buffer to be not be played at all.\n            if (buffer !== null && clampedOffset > buffer.duration - (0.5 / nativeAudioBufferSourceNode.context.sampleRate)) {\n                start.call(nativeAudioBufferSourceNode, when, 0, 0);\n            }\n            else {\n                start.call(nativeAudioBufferSourceNode, when, clampedOffset, duration);\n            }\n        };\n    })(nativeAudioBufferSourceNode.start);\n};\n//# sourceMappingURL=/build/es2019/helpers/wrap-audio-buffer-source-node-start-method-offset-clamping.js.map","export const isAudioWorkletNode = (audioNode) => {\n    return 'port' in audioNode;\n};\n//# sourceMappingURL=/build/es2019/guards/audio-worklet-node.js.map","import { getEventListenersOfAudioNode } from './get-event-listeners-of-audio-node';\nexport const deleteEventListenerOfAudioNode = (audioNode, eventListener) => {\n    const eventListeners = getEventListenersOfAudioNode(audioNode);\n    if (!eventListeners.delete(eventListener)) {\n        throw new Error('Missing the expected event listener.');\n    }\n};\n//# sourceMappingURL=/build/es2019/helpers/delete-event-listeners-of-audio-node.js.map","import { ACTIVE_AUDIO_NODE_STORE } from '../globals';\nexport const isPassiveAudioNode = (audioNode) => {\n    return !ACTIVE_AUDIO_NODE_STORE.has(audioNode);\n};\n//# sourceMappingURL=/build/es2019/helpers/is-passive-audio-node.js.map","export const pickElementFromSet = (set, predicate) => {\n    const matchingElements = Array\n        .from(set)\n        .filter(predicate);\n    if (matchingElements.length > 1) {\n        throw Error('More than one element was found.');\n    }\n    if (matchingElements.length === 0) {\n        throw Error('No element was found.');\n    }\n    const [matchingElement] = matchingElements;\n    set.delete(matchingElement);\n    return matchingElement;\n};\n//# sourceMappingURL=/build/es2019/helpers/pick-element-from-set.js.map","import { isAudioWorkletNode } from '../guards/audio-worklet-node';\nimport { setInternalStateToPassive } from './set-internal-state-to-passive';\n// Set the internalState of the audioNode to 'passive' if it is not an AudioWorkletNode and if it has no 'active' input connections.\nexport const setInternalStateToPassiveWhenNecessary = (audioNode, activeInputs) => {\n    if (!isAudioWorkletNode(audioNode) && activeInputs.every((connections) => (connections.size === 0))) {\n        setInternalStateToPassive(audioNode);\n    }\n};\n//# sourceMappingURL=/build/es2019/helpers/set-internal-state-to-passive-when-necessary.js.map","export const testAudioNodeDisconnectMethodSupport = (nativeAudioContext) => {\n    return new Promise((resolve) => {\n        const analyzer = nativeAudioContext.createScriptProcessor(256, 1, 1);\n        const dummy = nativeAudioContext.createGain();\n        // Bug #95: Safari does not play one sample buffers.\n        const ones = nativeAudioContext.createBuffer(1, 2, 44100);\n        const channelData = ones.getChannelData(0);\n        channelData[0] = 1;\n        channelData[1] = 1;\n        const source = nativeAudioContext.createBufferSource();\n        source.buffer = ones;\n        source.loop = true;\n        source\n            .connect(analyzer)\n            .connect(nativeAudioContext.destination);\n        source.connect(dummy);\n        source.disconnect(dummy);\n        analyzer.onaudioprocess = (event) => {\n            const chnnlDt = event.inputBuffer.getChannelData(0);\n            if (Array.prototype.some.call(chnnlDt, (sample) => sample === 1)) {\n                resolve(true);\n            }\n            else {\n                resolve(false);\n            }\n            source.stop();\n            analyzer.onaudioprocess = null; // tslint:disable-line:deprecation\n            source.disconnect(analyzer);\n            analyzer.disconnect(nativeAudioContext.destination);\n        };\n        source.start();\n    });\n};\n//# sourceMappingURL=/build/es2019/helpers/test-audio-node-disconnect-method-support.js.map","export const visitEachAudioNodeOnce = (cycles, visitor) => {\n    const counts = new Map();\n    for (const cycle of cycles) {\n        for (const audioNode of cycle) {\n            const count = counts.get(audioNode);\n            counts.set(audioNode, (count === undefined) ? 1 : count + 1);\n        }\n    }\n    counts.forEach((count, audioNode) => visitor(audioNode, count));\n};\n//# sourceMappingURL=/build/es2019/helpers/visit-each-audio-node-once.js.map","import { isNativeAudioNode } from '../guards/native-audio-node';\nexport const wrapAudioNodeDisconnectMethod = (nativeAudioNode) => {\n    const connections = new Map();\n    nativeAudioNode.connect = ((connect) => {\n        return (destination, output = 0, input = 0) => {\n            const returnValue = (isNativeAudioNode(destination))\n                ? connect(destination, output, input)\n                : connect(destination, output);\n            // Save the new connection only if the calls to connect above didn't throw an error.\n            const connectionsToDestination = connections.get(destination);\n            if (connectionsToDestination === undefined) {\n                connections.set(destination, [{ input, output }]);\n            }\n            else {\n                if (connectionsToDestination.every((connection) => (connection.input !== input || connection.output !== output))) {\n                    connectionsToDestination.push({ input, output });\n                }\n            }\n            return returnValue;\n        };\n    })(nativeAudioNode.connect.bind(nativeAudioNode));\n    nativeAudioNode.disconnect = ((disconnect) => {\n        return (destinationOrOutput, output, input) => {\n            disconnect.apply(nativeAudioNode);\n            if (destinationOrOutput === undefined) {\n                connections.clear();\n            }\n            else if (typeof destinationOrOutput === 'number') {\n                for (const [destination, connectionsToDestination] of connections) {\n                    const filteredConnections = connectionsToDestination\n                        .filter((connection) => (connection.output !== destinationOrOutput));\n                    if (filteredConnections.length === 0) {\n                        connections.delete(destination);\n                    }\n                    else {\n                        connections.set(destination, filteredConnections);\n                    }\n                }\n            }\n            else if (connections.has(destinationOrOutput)) {\n                if (output === undefined) {\n                    connections.delete(destinationOrOutput);\n                }\n                else {\n                    const connectionsToDestination = connections.get(destinationOrOutput);\n                    if (connectionsToDestination !== undefined) {\n                        const filteredConnections = connectionsToDestination\n                            .filter((connection) => (connection.output !== output && (connection.input !== input || input === undefined)));\n                        if (filteredConnections.length === 0) {\n                            connections.delete(destinationOrOutput);\n                        }\n                        else {\n                            connections.set(destinationOrOutput, filteredConnections);\n                        }\n                    }\n                }\n            }\n            for (const [destination, connectionsToDestination] of connections) {\n                connectionsToDestination\n                    .forEach((connection) => {\n                    if (isNativeAudioNode(destination)) {\n                        nativeAudioNode.connect(destination, connection.output, connection.input);\n                    }\n                    else {\n                        nativeAudioNode.connect(destination, connection.output);\n                    }\n                });\n            }\n        };\n    })(nativeAudioNode.disconnect);\n};\n//# sourceMappingURL=/build/es2019/helpers/wrap-audio-node-disconnect-method.js.map","import { AUDIO_NODE_STORE, EVENT_LISTENERS } from '../globals';\nimport { isAudioNode } from '../guards/audio-node';\nimport { isAudioNodeOutputConnection } from '../guards/audio-node-output-connection';\nimport { isAudioWorkletNode } from '../guards/audio-worklet-node';\nimport { connectNativeAudioNodeToNativeAudioNode } from '../helpers/connect-native-audio-node-to-native-audio-node';\nimport { deleteEventListenerOfAudioNode } from '../helpers/delete-event-listeners-of-audio-node';\nimport { disconnectNativeAudioNodeFromNativeAudioNode } from '../helpers/disconnect-native-audio-node-from-native-audio-node';\nimport { getAudioNodeConnections } from '../helpers/get-audio-node-connections';\nimport { getAudioParamConnections } from '../helpers/get-audio-param-connections';\nimport { getEventListenersOfAudioNode } from '../helpers/get-event-listeners-of-audio-node';\nimport { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { getNativeAudioParam } from '../helpers/get-native-audio-param';\nimport { getValueForKey } from '../helpers/get-value-for-key';\nimport { insertElementInSet } from '../helpers/insert-element-in-set';\nimport { isActiveAudioNode } from '../helpers/is-active-audio-node';\nimport { isPartOfACycle } from '../helpers/is-part-of-a-cycle';\nimport { isPassiveAudioNode } from '../helpers/is-passive-audio-node';\nimport { pickElementFromSet } from '../helpers/pick-element-from-set';\nimport { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassiveWhenNecessary } from '../helpers/set-internal-state-to-passive-when-necessary';\nimport { testAudioNodeDisconnectMethodSupport } from '../helpers/test-audio-node-disconnect-method-support';\nimport { visitEachAudioNodeOnce } from '../helpers/visit-each-audio-node-once';\nimport { wrapAudioNodeDisconnectMethod } from '../helpers/wrap-audio-node-disconnect-method';\nconst addActiveInputConnectionToAudioNode = (activeInputs, source, [output, input, eventListener], ignoreDuplicates) => {\n    insertElementInSet(activeInputs[input], [source, output, eventListener], (activeInputConnection) => (activeInputConnection[0] === source && activeInputConnection[1] === output), ignoreDuplicates);\n};\nconst addActiveInputConnectionToAudioParam = (activeInputs, source, [output, eventListener], ignoreDuplicates) => {\n    insertElementInSet(activeInputs, [source, output, eventListener], (activeInputConnection) => (activeInputConnection[0] === source && activeInputConnection[1] === output), ignoreDuplicates);\n};\nconst deleteActiveInputConnectionToAudioNode = (activeInputs, source, output, input) => {\n    return pickElementFromSet(activeInputs[input], (activeInputConnection) => (activeInputConnection[0] === source && activeInputConnection[1] === output));\n};\nconst deleteActiveInputConnectionToAudioParam = (activeInputs, source, output) => {\n    return pickElementFromSet(activeInputs, (activeInputConnection) => (activeInputConnection[0] === source && activeInputConnection[1] === output));\n};\nconst addPassiveInputConnectionToAudioNode = (passiveInputs, input, [source, output, eventListener], ignoreDuplicates) => {\n    const passiveInputConnections = passiveInputs.get(source);\n    if (passiveInputConnections === undefined) {\n        passiveInputs.set(source, new Set([[output, input, eventListener]]));\n    }\n    else {\n        insertElementInSet(passiveInputConnections, [output, input, eventListener], (passiveInputConnection) => (passiveInputConnection[0] === output && passiveInputConnection[1] === input), ignoreDuplicates);\n    }\n};\nconst addPassiveInputConnectionToAudioParam = (passiveInputs, [source, output, eventListener], ignoreDuplicates) => {\n    const passiveInputConnections = passiveInputs.get(source);\n    if (passiveInputConnections === undefined) {\n        passiveInputs.set(source, new Set([[output, eventListener]]));\n    }\n    else {\n        insertElementInSet(passiveInputConnections, [output, eventListener], (passiveInputConnection) => (passiveInputConnection[0] === output), ignoreDuplicates);\n    }\n};\nconst deletePassiveInputConnectionToAudioNode = (passiveInputs, source, output, input) => {\n    const passiveInputConnections = getValueForKey(passiveInputs, source);\n    const matchingConnection = pickElementFromSet(passiveInputConnections, (passiveInputConnection) => (passiveInputConnection[0] === output && passiveInputConnection[1] === input));\n    if (passiveInputConnections.size === 0) {\n        passiveInputs.delete(source);\n    }\n    return matchingConnection;\n};\nconst deletePassiveInputConnectionToAudioParam = (passiveInputs, source, output) => {\n    const passiveInputConnections = getValueForKey(passiveInputs, source);\n    const matchingConnection = pickElementFromSet(passiveInputConnections, (passiveInputConnection) => (passiveInputConnection[0] === output));\n    if (passiveInputConnections.size === 0) {\n        passiveInputs.delete(source);\n    }\n    return matchingConnection;\n};\nconst addConnectionToAudioNodeOfAudioContext = (source, destination, output, input) => {\n    const { activeInputs, passiveInputs } = getAudioNodeConnections(destination);\n    const { outputs } = getAudioNodeConnections(source);\n    const eventListeners = getEventListenersOfAudioNode(source);\n    const eventListener = ((isActive) => {\n        const nativeDestinationAudioNode = getNativeAudioNode(destination);\n        const nativeSourceAudioNode = getNativeAudioNode(source);\n        if (isActive) {\n            const partialConnection = deletePassiveInputConnectionToAudioNode(passiveInputs, source, output, input);\n            addActiveInputConnectionToAudioNode(activeInputs, source, partialConnection, false);\n            if (!isPartOfACycle(source)) {\n                connectNativeAudioNodeToNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output, input);\n            }\n            if (isPassiveAudioNode(destination)) {\n                setInternalStateToActive(destination);\n            }\n        }\n        else {\n            const partialConnection = deleteActiveInputConnectionToAudioNode(activeInputs, source, output, input);\n            addPassiveInputConnectionToAudioNode(passiveInputs, input, partialConnection, false);\n            if (!isPartOfACycle(source)) {\n                disconnectNativeAudioNodeFromNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output, input);\n            }\n            if (isActiveAudioNode(destination)) {\n                setInternalStateToPassiveWhenNecessary(destination, activeInputs);\n            }\n        }\n    });\n    if (insertElementInSet(outputs, [destination, output, input], (outputConnection) => (outputConnection[0] === destination && outputConnection[1] === output && outputConnection[2] === input), true)) {\n        eventListeners.add(eventListener);\n        if (isActiveAudioNode(source)) {\n            addActiveInputConnectionToAudioNode(activeInputs, source, [output, input, eventListener], true);\n        }\n        else {\n            addPassiveInputConnectionToAudioNode(passiveInputs, input, [source, output, eventListener], true);\n        }\n        return true;\n    }\n    return false;\n};\nconst addConnectionToAudioNodeOfOfflineAudioContext = (source, destination, output, input) => {\n    const { outputs } = getAudioNodeConnections(source);\n    if (insertElementInSet(outputs, [destination, output, input], (outputConnection) => (outputConnection[0] === destination && outputConnection[1] === output && outputConnection[2] === input), true)) {\n        const { activeInputs } = getAudioNodeConnections(destination);\n        addActiveInputConnectionToAudioNode(activeInputs, source, [output, input, null], true);\n        return true;\n    }\n    return false;\n};\nconst addConnectionToAudioParamOfAudioContext = (source, destination, output) => {\n    const { activeInputs, passiveInputs } = getAudioParamConnections(destination);\n    const { outputs } = getAudioNodeConnections(source);\n    const eventListeners = getEventListenersOfAudioNode(source);\n    const eventListener = ((isActive) => {\n        const nativeAudioNode = getNativeAudioNode(source);\n        const nativeAudioParam = getNativeAudioParam(destination);\n        if (isActive) {\n            const partialConnection = deletePassiveInputConnectionToAudioParam(passiveInputs, source, output);\n            addActiveInputConnectionToAudioParam(activeInputs, source, partialConnection, false);\n            if (!isPartOfACycle(source)) {\n                nativeAudioNode.connect(nativeAudioParam, output);\n            }\n        }\n        else {\n            const partialConnection = deleteActiveInputConnectionToAudioParam(activeInputs, source, output);\n            addPassiveInputConnectionToAudioParam(passiveInputs, partialConnection, false);\n            if (!isPartOfACycle(source)) {\n                nativeAudioNode.disconnect(nativeAudioParam, output);\n            }\n        }\n    });\n    if (insertElementInSet(outputs, [destination, output], (outputConnection) => (outputConnection[0] === destination && outputConnection[1] === output), true)) {\n        eventListeners.add(eventListener);\n        if (isActiveAudioNode(source)) {\n            addActiveInputConnectionToAudioParam(activeInputs, source, [output, eventListener], true);\n        }\n        else {\n            addPassiveInputConnectionToAudioParam(passiveInputs, [source, output, eventListener], true);\n        }\n        return true;\n    }\n    return false;\n};\nconst addConnectionToAudioParamOfOfflineAudioContext = (source, destination, output) => {\n    const { outputs } = getAudioNodeConnections(source);\n    if (insertElementInSet(outputs, [destination, output], (outputConnection) => (outputConnection[0] === destination && outputConnection[1] === output), true)) {\n        const { activeInputs } = getAudioParamConnections(destination);\n        addActiveInputConnectionToAudioParam(activeInputs, source, [output, null], true);\n        return true;\n    }\n    return false;\n};\nconst deleteActiveInputConnection = (activeInputConnections, source, output) => {\n    for (const activeInputConnection of activeInputConnections) {\n        if (activeInputConnection[0] === source && activeInputConnection[1] === output) {\n            activeInputConnections.delete(activeInputConnection);\n            return activeInputConnection;\n        }\n    }\n    return null;\n};\nconst deleteInputConnectionOfAudioNode = (source, destination, output, input) => {\n    const { activeInputs, passiveInputs } = getAudioNodeConnections(destination);\n    const activeInputConnection = deleteActiveInputConnection(activeInputs[input], source, output);\n    if (activeInputConnection === null) {\n        const passiveInputConnection = deletePassiveInputConnectionToAudioNode(passiveInputs, source, output, input);\n        return [passiveInputConnection[2], false];\n    }\n    return [activeInputConnection[2], true];\n};\nconst deleteInputConnectionOfAudioParam = (source, destination, output) => {\n    const { activeInputs, passiveInputs } = getAudioParamConnections(destination);\n    const activeInputConnection = deleteActiveInputConnection(activeInputs, source, output);\n    if (activeInputConnection === null) {\n        const passiveInputConnection = deletePassiveInputConnectionToAudioParam(passiveInputs, source, output);\n        return [passiveInputConnection[1], false];\n    }\n    return [activeInputConnection[2], true];\n};\nconst deleteInputsOfAudioNode = (source, destination, output, input) => {\n    const [listener, isActive] = deleteInputConnectionOfAudioNode(source, destination, output, input);\n    if (listener !== null) {\n        deleteEventListenerOfAudioNode(source, listener);\n        if (isActive && !isPartOfACycle(source)) {\n            disconnectNativeAudioNodeFromNativeAudioNode(getNativeAudioNode(source), getNativeAudioNode(destination), output, input);\n        }\n    }\n    if (isActiveAudioNode(destination)) {\n        const { activeInputs } = getAudioNodeConnections(destination);\n        setInternalStateToPassiveWhenNecessary(destination, activeInputs);\n    }\n};\nconst deleteInputsOfAudioParam = (source, destination, output) => {\n    const [listener, isActive] = deleteInputConnectionOfAudioParam(source, destination, output);\n    if (listener !== null) {\n        deleteEventListenerOfAudioNode(source, listener);\n        if (isActive && !isPartOfACycle(source)) {\n            getNativeAudioNode(source)\n                .disconnect(getNativeAudioParam(destination), output);\n        }\n    }\n};\nconst deleteAnyConnection = (source) => {\n    const audioNodeConnectionsOfSource = getAudioNodeConnections(source);\n    const destinations = [];\n    for (const outputConnection of audioNodeConnectionsOfSource.outputs) {\n        if (isAudioNodeOutputConnection(outputConnection)) {\n            deleteInputsOfAudioNode(source, ...outputConnection);\n        }\n        else {\n            deleteInputsOfAudioParam(source, ...outputConnection);\n        }\n        destinations.push(outputConnection[0]);\n    }\n    audioNodeConnectionsOfSource.outputs.clear();\n    return destinations;\n};\nconst deleteConnectionAtOutput = (source, output) => {\n    const audioNodeConnectionsOfSource = getAudioNodeConnections(source);\n    const destinations = [];\n    for (const outputConnection of audioNodeConnectionsOfSource.outputs) {\n        if (outputConnection[1] === output) {\n            if (isAudioNodeOutputConnection(outputConnection)) {\n                deleteInputsOfAudioNode(source, ...outputConnection);\n            }\n            else {\n                deleteInputsOfAudioParam(source, ...outputConnection);\n            }\n            destinations.push(outputConnection[0]);\n            audioNodeConnectionsOfSource.outputs.delete(outputConnection);\n        }\n    }\n    return destinations;\n};\nconst deleteConnectionToDestination = (source, destination, output, input) => {\n    const audioNodeConnectionsOfSource = getAudioNodeConnections(source);\n    return Array\n        .from(audioNodeConnectionsOfSource.outputs)\n        .filter((outputConnection) => (outputConnection[0] === destination\n        && (output === undefined || outputConnection[1] === output)\n        && (input === undefined || outputConnection[2] === input)))\n        .map((outputConnection) => {\n        if (isAudioNodeOutputConnection(outputConnection)) {\n            deleteInputsOfAudioNode(source, ...outputConnection);\n        }\n        else {\n            deleteInputsOfAudioParam(source, ...outputConnection);\n        }\n        audioNodeConnectionsOfSource.outputs.delete(outputConnection);\n        return outputConnection[0];\n    });\n};\nexport const createAudioNodeConstructor = (addAudioNodeConnections, auxiliaryGainNodeStore, cacheTestResult, createIncrementCycleCounter, createIndexSizeError, createInvalidAccessError, createNotSupportedError, decrementCycleCounter, detectCycles, eventTargetConstructor, getNativeContext, isNativeAudioContext, isNativeAudioNode, isNativeAudioParam, isNativeOfflineAudioContext) => {\n    return class AudioNode extends eventTargetConstructor {\n        constructor(context, isActive, nativeAudioNode, audioNodeRenderer) {\n            super(nativeAudioNode);\n            this._context = context;\n            this._nativeAudioNode = nativeAudioNode;\n            const nativeContext = getNativeContext(context);\n            // Bug #12: Safari does not support to disconnect a specific destination.\n            if (isNativeAudioContext(nativeContext) && true !== cacheTestResult(testAudioNodeDisconnectMethodSupport, () => {\n                return testAudioNodeDisconnectMethodSupport(nativeContext);\n            })) {\n                wrapAudioNodeDisconnectMethod(nativeAudioNode);\n            }\n            AUDIO_NODE_STORE.set(this, nativeAudioNode);\n            EVENT_LISTENERS.set(this, new Set());\n            if (isActive) {\n                setInternalStateToActive(this);\n            }\n            addAudioNodeConnections(this, audioNodeRenderer, nativeAudioNode);\n        }\n        get channelCount() {\n            return this._nativeAudioNode.channelCount;\n        }\n        set channelCount(value) {\n            this._nativeAudioNode.channelCount = value;\n        }\n        get channelCountMode() {\n            return this._nativeAudioNode.channelCountMode;\n        }\n        set channelCountMode(value) {\n            this._nativeAudioNode.channelCountMode = value;\n        }\n        get channelInterpretation() {\n            return this._nativeAudioNode.channelInterpretation;\n        }\n        set channelInterpretation(value) {\n            this._nativeAudioNode.channelInterpretation = value;\n        }\n        get context() {\n            return this._context;\n        }\n        get numberOfInputs() {\n            return this._nativeAudioNode.numberOfInputs;\n        }\n        get numberOfOutputs() {\n            return this._nativeAudioNode.numberOfOutputs;\n        }\n        connect(destination, output = 0, input = 0) {\n            // Bug #174: Safari does expose a wrong numberOfOutputs for MediaStreamAudioDestinationNodes.\n            if (output < 0 || output >= this._nativeAudioNode.numberOfOutputs) {\n                throw createIndexSizeError();\n            }\n            const nativeContext = getNativeContext(this._context);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            if (isNativeAudioNode(destination) || isNativeAudioParam(destination)) {\n                throw createInvalidAccessError();\n            }\n            if (isAudioNode(destination)) {\n                const nativeDestinationAudioNode = getNativeAudioNode(destination);\n                try {\n                    const connection = connectNativeAudioNodeToNativeAudioNode(this._nativeAudioNode, nativeDestinationAudioNode, output, input);\n                    if (isOffline || isPassiveAudioNode(this)) {\n                        this._nativeAudioNode.disconnect(...connection);\n                    }\n                    else if (isPassiveAudioNode(destination)) {\n                        setInternalStateToActive(destination);\n                    }\n                    // An AudioWorklet needs a connection because it otherwise may truncate the input array.\n                    // @todo Count the number of connections which depend on this auxiliary GainNode to know when it can be removed again.\n                    if (isAudioWorkletNode(destination)) {\n                        const auxiliaryGainNodes = auxiliaryGainNodeStore.get(nativeDestinationAudioNode);\n                        if (auxiliaryGainNodes === undefined) {\n                            const nativeGainNode = nativeContext.createGain();\n                            nativeGainNode.connect(connection[0], 0, connection[2]);\n                            auxiliaryGainNodeStore.set(nativeDestinationAudioNode, new Map([[input, nativeGainNode]]));\n                        }\n                        else if (auxiliaryGainNodes.get(input) === undefined) {\n                            const nativeGainNode = nativeContext.createGain();\n                            nativeGainNode.connect(connection[0], 0, connection[2]);\n                            auxiliaryGainNodes.set(input, nativeGainNode);\n                        }\n                    }\n                }\n                catch (err) {\n                    // Bug #41: Only Chrome, Firefox and Opera throw the correct exception by now.\n                    if (err.code === 12) {\n                        throw createInvalidAccessError();\n                    }\n                    throw err;\n                }\n                const isNewConnectionToAudioNode = isOffline\n                    ? addConnectionToAudioNodeOfOfflineAudioContext(this, destination, output, input)\n                    : addConnectionToAudioNodeOfAudioContext(this, destination, output, input);\n                // Bug #164: Only Firefox detects cycles so far.\n                if (isNewConnectionToAudioNode) {\n                    const cycles = detectCycles([this], destination);\n                    visitEachAudioNodeOnce(cycles, createIncrementCycleCounter(isOffline));\n                }\n                return destination;\n            }\n            const nativeAudioParam = getNativeAudioParam(destination);\n            /*\n             * Bug #147 & #153: Safari does not support to connect an input signal to the playbackRate AudioParam of an\n             * AudioBufferSourceNode. This can't be easily detected and that's why the outdated name property is used here to identify\n             * Safari.\n             */\n            if (nativeAudioParam.name === 'playbackRate') {\n                throw createNotSupportedError();\n            }\n            try {\n                this._nativeAudioNode.connect(nativeAudioParam, output);\n                if (isOffline || isPassiveAudioNode(this)) {\n                    this._nativeAudioNode.disconnect(nativeAudioParam, output);\n                }\n            }\n            catch (err) {\n                // Bug #58: Only Firefox does throw an InvalidStateError yet.\n                if (err.code === 12) {\n                    throw createInvalidAccessError();\n                }\n                throw err;\n            }\n            const isNewConnectionToAudioParam = isOffline\n                ? addConnectionToAudioParamOfOfflineAudioContext(this, destination, output)\n                : addConnectionToAudioParamOfAudioContext(this, destination, output);\n            // Bug #164: Only Firefox detects cycles so far.\n            if (isNewConnectionToAudioParam) {\n                const cycles = detectCycles([this], destination);\n                visitEachAudioNodeOnce(cycles, createIncrementCycleCounter(isOffline));\n            }\n        }\n        disconnect(destinationOrOutput, output, input) {\n            let destinations;\n            if (destinationOrOutput === undefined) {\n                destinations = deleteAnyConnection(this);\n            }\n            else if (typeof destinationOrOutput === 'number') {\n                if (destinationOrOutput < 0 || destinationOrOutput >= this.numberOfOutputs) {\n                    throw createIndexSizeError();\n                }\n                destinations = deleteConnectionAtOutput(this, destinationOrOutput);\n            }\n            else {\n                if (output !== undefined && (output < 0 || output >= this.numberOfOutputs)) {\n                    throw createIndexSizeError();\n                }\n                if (isAudioNode(destinationOrOutput)\n                    && input !== undefined\n                    && (input < 0 || input >= destinationOrOutput.numberOfInputs)) {\n                    throw createIndexSizeError();\n                }\n                destinations = deleteConnectionToDestination(this, destinationOrOutput, output, input);\n                if (destinations.length === 0) {\n                    throw createInvalidAccessError();\n                }\n            }\n            // Bug #164: Only Firefox detects cycles so far.\n            for (const destination of destinations) {\n                const cycles = detectCycles([this], destination);\n                visitEachAudioNodeOnce(cycles, decrementCycleCounter);\n            }\n        }\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/audio-node-constructor.js.map","export const cloneAudioWorkletNodeOptions = (audioWorkletNodeOptions) => {\n    return new Promise((resolve, reject) => {\n        const { port1, port2 } = new MessageChannel();\n        port1.onmessage = ({ data }) => {\n            port1.close();\n            port2.close();\n            resolve(data);\n        };\n        port1.onmessageerror = ({ data }) => {\n            port1.close();\n            port2.close();\n            reject(data);\n        };\n        // This will throw an error if the audioWorkletNodeOptions are not clonable.\n        port2.postMessage(audioWorkletNodeOptions);\n    });\n};\n//# sourceMappingURL=/build/es2019/helpers/clone-audio-worklet-node-options.js.map","import { cloneAudioWorkletNodeOptions } from './clone-audio-worklet-node-options';\nexport const createAudioWorkletProcessorPromise = async (processorConstructor, audioWorkletNodeOptions) => {\n    const clonedAudioWorkletNodeOptions = await cloneAudioWorkletNodeOptions(audioWorkletNodeOptions);\n    return new processorConstructor(clonedAudioWorkletNodeOptions);\n};\n//# sourceMappingURL=/build/es2019/helpers/create-audio-worklet-processor-promise.js.map","import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { computeBufferSize } from '../helpers/compute-buffer-size';\nimport { copyFromChannel } from '../helpers/copy-from-channel';\nimport { copyToChannel } from '../helpers/copy-to-channel';\nimport { createAudioWorkletProcessor } from '../helpers/create-audio-worklet-processor';\nimport { createNestedArrays } from '../helpers/create-nested-arrays';\nimport { ReadOnlyMap } from '../read-only-map';\nexport const createNativeAudioWorkletNodeFakerFactory = (auxiliaryGainNodeStore, connectMultipleOutputs, createIndexSizeError, createInvalidStateError, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, createNativeScriptProcessorNode, createNotSupportedError, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, monitorConnections) => {\n    return (nativeContext, baseLatency, processorConstructor, options) => {\n        if (options.numberOfInputs === 0 && options.numberOfOutputs === 0) {\n            throw createNotSupportedError();\n        }\n        if (options.outputChannelCount !== undefined) {\n            // @todo Check if any of the channelCount values is greater than the implementation's maximum number of channels.\n            if (options.outputChannelCount.some((channelCount) => (channelCount < 1))) {\n                throw createNotSupportedError();\n            }\n            if (options.outputChannelCount.length !== options.numberOfOutputs) {\n                throw createIndexSizeError();\n            }\n        }\n        // Bug #61: This is not part of the standard but required for the faker to work.\n        if (options.channelCountMode !== 'explicit') {\n            throw createNotSupportedError();\n        }\n        const numberOfInputChannels = options.channelCount * options.numberOfInputs;\n        const numberOfOutputChannels = options.outputChannelCount.reduce((sum, value) => sum + value, 0);\n        const numberOfParameters = (processorConstructor.parameterDescriptors === undefined)\n            ? 0\n            : processorConstructor.parameterDescriptors.length;\n        // Bug #61: This is not part of the standard but required for the faker to work.\n        if (numberOfInputChannels + numberOfParameters > 6 || numberOfOutputChannels > 6) {\n            throw createNotSupportedError();\n        }\n        const messageChannel = new MessageChannel();\n        const gainNodes = [];\n        const inputChannelSplitterNodes = [];\n        for (let i = 0; i < options.numberOfInputs; i += 1) {\n            gainNodes.push(createNativeGainNode(nativeContext, {\n                channelCount: options.channelCount,\n                channelCountMode: options.channelCountMode,\n                channelInterpretation: options.channelInterpretation,\n                gain: 1\n            }));\n            inputChannelSplitterNodes.push(createNativeChannelSplitterNode(nativeContext, {\n                channelCount: options.channelCount,\n                channelCountMode: 'explicit',\n                channelInterpretation: 'discrete',\n                numberOfOutputs: options.channelCount\n            }));\n        }\n        const constantSourceNodes = [];\n        if (processorConstructor.parameterDescriptors !== undefined) {\n            for (const { defaultValue, maxValue, minValue, name } of processorConstructor.parameterDescriptors) {\n                const constantSourceNode = createNativeConstantSourceNode(nativeContext, {\n                    channelCount: 1,\n                    channelCountMode: 'explicit',\n                    channelInterpretation: 'discrete',\n                    offset: (options.parameterData[name] !== undefined)\n                        ? options.parameterData[name]\n                        : (defaultValue === undefined)\n                            ? 0\n                            : defaultValue\n                });\n                Object.defineProperties(constantSourceNode.offset, {\n                    defaultValue: {\n                        get: () => (defaultValue === undefined) ? 0 : defaultValue\n                    },\n                    maxValue: {\n                        get: () => (maxValue === undefined) ? MOST_POSITIVE_SINGLE_FLOAT : maxValue\n                    },\n                    minValue: {\n                        get: () => (minValue === undefined) ? MOST_NEGATIVE_SINGLE_FLOAT : minValue\n                    }\n                });\n                constantSourceNodes.push(constantSourceNode);\n            }\n        }\n        const inputChannelMergerNode = createNativeChannelMergerNode(nativeContext, {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'speakers',\n            numberOfInputs: Math.max(1, numberOfInputChannels + numberOfParameters)\n        });\n        const bufferSize = computeBufferSize(baseLatency, nativeContext.sampleRate);\n        const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, bufferSize, numberOfInputChannels + numberOfParameters, \n        // Bug #87: Only Firefox will fire an AudioProcessingEvent if there is no connected output.\n        Math.max(1, numberOfOutputChannels));\n        const outputChannelSplitterNode = createNativeChannelSplitterNode(nativeContext, {\n            channelCount: Math.max(1, numberOfOutputChannels),\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete',\n            numberOfOutputs: Math.max(1, numberOfOutputChannels)\n        });\n        const outputChannelMergerNodes = [];\n        for (let i = 0; i < options.numberOfOutputs; i += 1) {\n            outputChannelMergerNodes.push(createNativeChannelMergerNode(nativeContext, {\n                channelCount: 1,\n                channelCountMode: 'explicit',\n                channelInterpretation: 'speakers',\n                numberOfInputs: options.outputChannelCount[i]\n            }));\n        }\n        for (let i = 0; i < options.numberOfInputs; i += 1) {\n            gainNodes[i].connect(inputChannelSplitterNodes[i]);\n            for (let j = 0; j < options.channelCount; j += 1) {\n                inputChannelSplitterNodes[i].connect(inputChannelMergerNode, j, (i * options.channelCount) + j);\n            }\n        }\n        const parameterMap = new ReadOnlyMap((processorConstructor.parameterDescriptors === undefined)\n            ? []\n            : processorConstructor.parameterDescriptors\n                .map(({ name }, index) => {\n                const constantSourceNode = constantSourceNodes[index];\n                constantSourceNode.connect(inputChannelMergerNode, 0, numberOfInputChannels + index);\n                constantSourceNode.start(0);\n                return [name, constantSourceNode.offset];\n            }));\n        inputChannelMergerNode.connect(scriptProcessorNode);\n        let channelInterpretation = options.channelInterpretation;\n        let onprocessorerror = null;\n        // Bug #87: Expose at least one output to make this node connectable.\n        const outputAudioNodes = (options.numberOfOutputs === 0) ? [scriptProcessorNode] : outputChannelMergerNodes;\n        const nativeAudioWorkletNodeFaker = {\n            get bufferSize() {\n                return bufferSize;\n            },\n            get channelCount() {\n                return options.channelCount;\n            },\n            set channelCount(_) {\n                // Bug #61: This is not part of the standard but required for the faker to work.\n                throw createInvalidStateError();\n            },\n            get channelCountMode() {\n                return options.channelCountMode;\n            },\n            set channelCountMode(_) {\n                // Bug #61: This is not part of the standard but required for the faker to work.\n                throw createInvalidStateError();\n            },\n            get channelInterpretation() {\n                return channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                for (const gainNode of gainNodes) {\n                    gainNode.channelInterpretation = value;\n                }\n                channelInterpretation = value;\n            },\n            get context() {\n                return scriptProcessorNode.context;\n            },\n            get inputs() {\n                return gainNodes;\n            },\n            get numberOfInputs() {\n                return options.numberOfInputs;\n            },\n            get numberOfOutputs() {\n                return options.numberOfOutputs;\n            },\n            get onprocessorerror() {\n                return onprocessorerror;\n            },\n            set onprocessorerror(value) {\n                if (typeof onprocessorerror === 'function') {\n                    nativeAudioWorkletNodeFaker.removeEventListener('processorerror', onprocessorerror);\n                }\n                onprocessorerror = (typeof value === 'function') ? value : null;\n                if (typeof onprocessorerror === 'function') {\n                    nativeAudioWorkletNodeFaker.addEventListener('processorerror', onprocessorerror);\n                }\n            },\n            get parameters() {\n                return parameterMap;\n            },\n            get port() {\n                return messageChannel.port2;\n            },\n            addEventListener(...args) {\n                return scriptProcessorNode.addEventListener(args[0], args[1], args[2]);\n            },\n            connect: connectMultipleOutputs.bind(null, outputAudioNodes),\n            disconnect: disconnectMultipleOutputs.bind(null, outputAudioNodes),\n            dispatchEvent(...args) {\n                return scriptProcessorNode.dispatchEvent(args[0]);\n            },\n            removeEventListener(...args) {\n                return scriptProcessorNode.removeEventListener(args[0], args[1], args[2]);\n            }\n        };\n        const patchedEventListeners = new Map(); // tslint:disable-line:max-line-length\n        messageChannel.port1.addEventListener = ((addEventListener) => {\n            return (...args) => {\n                if (args[0] === 'message') {\n                    const unpatchedEventListener = (typeof args[1] === 'function')\n                        ? args[1]\n                        : (typeof args[1] === 'object' && args[1] !== null && typeof args[1].handleEvent === 'function')\n                            ? args[1].handleEvent\n                            : null;\n                    if (unpatchedEventListener !== null) {\n                        const patchedEventListener = patchedEventListeners.get(args[1]);\n                        if (patchedEventListener !== undefined) {\n                            args[1] = patchedEventListener;\n                        }\n                        else {\n                            args[1] = (event) => {\n                                exposeCurrentFrameAndCurrentTime(nativeContext.currentTime, nativeContext.sampleRate, () => unpatchedEventListener(event));\n                            };\n                            patchedEventListeners.set(unpatchedEventListener, args[1]);\n                        }\n                    }\n                }\n                return addEventListener.call(messageChannel.port1, args[0], args[1], args[2]);\n            };\n        })(messageChannel.port1.addEventListener);\n        messageChannel.port1.removeEventListener = ((removeEventListener) => {\n            return (...args) => {\n                if (args[0] === 'message') {\n                    const patchedEventListener = patchedEventListeners.get(args[1]);\n                    if (patchedEventListener !== undefined) {\n                        patchedEventListeners.delete(args[1]);\n                        args[1] = patchedEventListener;\n                    }\n                }\n                return removeEventListener.call(messageChannel.port1, args[0], args[1], args[2]);\n            };\n        })(messageChannel.port1.removeEventListener);\n        let onmessage = null;\n        Object.defineProperty(messageChannel.port1, 'onmessage', {\n            get: () => onmessage,\n            set: (value) => {\n                if (typeof onmessage === 'function') {\n                    messageChannel.port1.removeEventListener('message', onmessage);\n                }\n                onmessage = (typeof value === 'function') ? value : null;\n                if (typeof onmessage === 'function') {\n                    messageChannel.port1.addEventListener('message', onmessage);\n                    messageChannel.port1.start();\n                }\n            }\n        });\n        processorConstructor.prototype.port = messageChannel.port1;\n        let audioWorkletProcessor = null;\n        const audioWorkletProcessorPromise = createAudioWorkletProcessor(nativeContext, nativeAudioWorkletNodeFaker, processorConstructor, options);\n        audioWorkletProcessorPromise\n            .then((dWrkltPrcssr) => audioWorkletProcessor = dWrkltPrcssr);\n        const inputs = createNestedArrays(options.numberOfInputs, options.channelCount);\n        const outputs = createNestedArrays(options.numberOfOutputs, options.outputChannelCount);\n        const parameters = (processorConstructor.parameterDescriptors === undefined) ?\n            [] :\n            processorConstructor.parameterDescriptors\n                .reduce((prmtrs, { name }) => ({ ...prmtrs, [name]: new Float32Array(128) }), {});\n        let isActive = true;\n        const disconnectOutputsGraph = () => {\n            if (options.numberOfOutputs > 0) {\n                scriptProcessorNode.disconnect(outputChannelSplitterNode);\n            }\n            for (let i = 0, outputChannelSplitterNodeOutput = 0; i < options.numberOfOutputs; i += 1) {\n                const outputChannelMergerNode = outputChannelMergerNodes[i];\n                for (let j = 0; j < options.outputChannelCount[i]; j += 1) {\n                    outputChannelSplitterNode.disconnect(outputChannelMergerNode, outputChannelSplitterNodeOutput + j, j);\n                }\n                outputChannelSplitterNodeOutput += options.outputChannelCount[i];\n            }\n        };\n        scriptProcessorNode.onaudioprocess = ({ inputBuffer, outputBuffer }) => {\n            if (audioWorkletProcessor !== null) {\n                for (let i = 0; i < bufferSize; i += 128) {\n                    for (let j = 0; j < options.numberOfInputs; j += 1) {\n                        for (let k = 0; k < options.channelCount; k += 1) {\n                            copyFromChannel(inputBuffer, inputs[j], k, k, i);\n                        }\n                    }\n                    if (processorConstructor.parameterDescriptors !== undefined) {\n                        processorConstructor.parameterDescriptors.forEach(({ name }, index) => {\n                            copyFromChannel(inputBuffer, parameters, name, numberOfInputChannels + index, i);\n                        });\n                    }\n                    for (let j = 0; j < options.numberOfInputs; j += 1) {\n                        for (let k = 0; k < options.outputChannelCount[j]; k += 1) {\n                            // The byteLength will be 0 when the ArrayBuffer was transferred.\n                            if (outputs[j][k].byteLength === 0) {\n                                outputs[j][k] = new Float32Array(128);\n                            }\n                        }\n                    }\n                    try {\n                        const potentiallyEmptyInputs = inputs\n                            .map((input, index) => {\n                            const auxiliaryGainNodes = auxiliaryGainNodeStore.get(nativeAudioWorkletNodeFaker);\n                            if (auxiliaryGainNodes === undefined || auxiliaryGainNodes.get(index) === undefined) {\n                                return [];\n                            }\n                            return input;\n                        });\n                        const activeSourceFlag = exposeCurrentFrameAndCurrentTime(nativeContext.currentTime + (i / nativeContext.sampleRate), nativeContext.sampleRate, () => audioWorkletProcessor.process(potentiallyEmptyInputs, outputs, parameters));\n                        isActive = activeSourceFlag;\n                        for (let j = 0, outputChannelSplitterNodeOutput = 0; j < options.numberOfOutputs; j += 1) {\n                            for (let k = 0; k < options.outputChannelCount[j]; k += 1) {\n                                copyToChannel(outputBuffer, outputs[j], k, outputChannelSplitterNodeOutput + k, i);\n                            }\n                            outputChannelSplitterNodeOutput += options.outputChannelCount[j];\n                        }\n                    }\n                    catch (error) {\n                        isActive = false;\n                        nativeAudioWorkletNodeFaker.dispatchEvent(new ErrorEvent('processorerror', { error }));\n                    }\n                    if (!isActive) {\n                        for (let j = 0; j < options.numberOfInputs; j += 1) {\n                            gainNodes[j].disconnect(inputChannelSplitterNodes[j]);\n                            for (let k = 0; k < options.channelCount; k += 1) {\n                                inputChannelSplitterNodes[i].disconnect(inputChannelMergerNode, k, (j * options.channelCount) + k);\n                            }\n                        }\n                        if (processorConstructor.parameterDescriptors !== undefined) {\n                            const length = processorConstructor.parameterDescriptors.length;\n                            for (let j = 0; j < length; j += 1) {\n                                const constantSourceNode = constantSourceNodes[j];\n                                constantSourceNode.disconnect(inputChannelMergerNode, 0, numberOfInputChannels + j);\n                                constantSourceNode.stop();\n                            }\n                        }\n                        inputChannelMergerNode.disconnect(scriptProcessorNode);\n                        scriptProcessorNode.onaudioprocess = null; // tslint:disable-line:deprecation\n                        if (isConnected) {\n                            disconnectOutputsGraph();\n                        }\n                        else {\n                            disconnectFakeGraph();\n                        }\n                        break;\n                    }\n                }\n            }\n        };\n        let isConnected = false;\n        // Bug #87: Only Firefox will fire an AudioProcessingEvent if there is no connected output.\n        const nativeGainNode = createNativeGainNode(nativeContext, { channelCount: 1, channelCountMode: 'explicit', channelInterpretation: 'discrete', gain: 0 });\n        const connectFakeGraph = () => scriptProcessorNode\n            .connect(nativeGainNode)\n            /*\n             * Bug #50: Edge does not yet allow to create AudioNodes on a closed AudioContext. Therefore the context property is used here\n             * to make sure to connect the right destination.\n             */\n            .connect(nativeGainNode.context.destination);\n        const disconnectFakeGraph = () => {\n            scriptProcessorNode.disconnect(nativeGainNode);\n            nativeGainNode.disconnect();\n        };\n        const whenConnected = () => {\n            if (isActive) {\n                disconnectFakeGraph();\n                if (options.numberOfOutputs > 0) {\n                    scriptProcessorNode.connect(outputChannelSplitterNode);\n                }\n                for (let i = 0, outputChannelSplitterNodeOutput = 0; i < options.numberOfOutputs; i += 1) {\n                    const outputChannelMergerNode = outputChannelMergerNodes[i];\n                    for (let j = 0; j < options.outputChannelCount[i]; j += 1) {\n                        outputChannelSplitterNode.connect(outputChannelMergerNode, outputChannelSplitterNodeOutput + j, j);\n                    }\n                    outputChannelSplitterNodeOutput += options.outputChannelCount[i];\n                }\n            }\n            isConnected = true;\n        };\n        const whenDisconnected = () => {\n            if (isActive) {\n                connectFakeGraph();\n                disconnectOutputsGraph();\n            }\n            isConnected = false;\n        };\n        connectFakeGraph();\n        return monitorConnections(nativeAudioWorkletNodeFaker, whenConnected, whenDisconnected);\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/native-audio-worklet-node-faker-factory.js.map","import { NODE_TO_PROCESSOR_MAPS } from '../globals';\nimport { createAudioWorkletProcessorPromise } from './create-audio-worklet-processor-promise';\nexport const createAudioWorkletProcessor = (nativeContext, nativeAudioWorkletNode, processorConstructor, audioWorkletNodeOptions) => {\n    let nodeToProcessorMap = NODE_TO_PROCESSOR_MAPS.get(nativeContext);\n    if (nodeToProcessorMap === undefined) {\n        nodeToProcessorMap = new WeakMap();\n        NODE_TO_PROCESSOR_MAPS.set(nativeContext, nodeToProcessorMap);\n    }\n    const audioWorkletProcessorPromise = createAudioWorkletProcessorPromise(processorConstructor, audioWorkletNodeOptions);\n    nodeToProcessorMap.set(nativeAudioWorkletNode, audioWorkletProcessorPromise);\n    return audioWorkletProcessorPromise;\n};\n//# sourceMappingURL=/build/es2019/helpers/create-audio-worklet-processor.js.map","const handler = {\n    construct() {\n        return handler;\n    }\n};\nexport const isConstructible = (constructible) => {\n    try {\n        const proxy = new Proxy(constructible, handler);\n        new proxy(); // tslint:disable-line:no-unused-expression\n    }\n    catch {\n        return false;\n    }\n    return true;\n};\n//# sourceMappingURL=/build/es2019/helpers/is-constructible.js.map","/*\n * This massive regex tries to cover all the following cases.\n *\n * import './path';\n * import defaultImport from './path';\n * import { namedImport } from './path';\n * import { namedImport as renamendImport } from './path';\n * import * as namespaceImport from './path';\n * import defaultImport, { namedImport } from './path';\n * import defaultImport, { namedImport as renamendImport } from './path';\n * import defaultImport, * as namespaceImport from './path';\n */\nconst IMPORT_STATEMENT_REGEX = /^import(?:(?:[\\s]+[\\w]+|(?:[\\s]+[\\w]+[\\s]*,)?[\\s]*\\{[\\s]*[\\w]+(?:[\\s]+as[\\s]+[\\w]+)?(?:[\\s]*,[\\s]*[\\w]+(?:[\\s]+as[\\s]+[\\w]+)?)*[\\s]*}|(?:[\\s]+[\\w]+[\\s]*,)?[\\s]*\\*[\\s]+as[\\s]+[\\w]+)[\\s]+from)?(?:[\\s]*)(\"([^\"\\\\]|\\\\.)+\"|'([^'\\\\]|\\\\.)+')(?:[\\s]*);?/; // tslint:disable-line:max-line-length\nexport const splitImportStatements = (source, url) => {\n    const importStatements = [];\n    let sourceWithoutImportStatements = source.replace(/^[\\s]+/, '');\n    let result = sourceWithoutImportStatements.match(IMPORT_STATEMENT_REGEX);\n    while (result !== null) {\n        const unresolvedUrl = result[1].slice(1, -1);\n        const importStatementWithResolvedUrl = result[0]\n            .replace(/([\\s]+)?;?$/, '')\n            .replace(unresolvedUrl, (new URL(unresolvedUrl, url)).toString());\n        importStatements.push(importStatementWithResolvedUrl);\n        sourceWithoutImportStatements = sourceWithoutImportStatements\n            .slice(result[0].length)\n            .replace(/^[\\s]+/, '');\n        result = sourceWithoutImportStatements.match(IMPORT_STATEMENT_REGEX);\n    }\n    return [importStatements.join(';'), sourceWithoutImportStatements];\n};\n//# sourceMappingURL=/build/es2019/helpers/split-import-statements.js.map","import { NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS } from '../globals';\nimport { isConstructible } from '../helpers/is-constructible';\nimport { splitImportStatements } from '../helpers/split-import-statements';\nconst verifyParameterDescriptors = (parameterDescriptors) => {\n    if (parameterDescriptors !== undefined && !Array.isArray(parameterDescriptors)) {\n        throw new TypeError('The parameterDescriptors property of given value for processorCtor is not an array.');\n    }\n};\nconst verifyProcessorCtor = (processorCtor) => {\n    if (!isConstructible(processorCtor)) {\n        throw new TypeError('The given value for processorCtor should be a constructor.');\n    }\n    if (processorCtor.prototype === null || typeof processorCtor.prototype !== 'object') {\n        throw new TypeError('The given value for processorCtor should have a prototype.');\n    }\n};\nexport const createAddAudioWorkletModule = (createNotSupportedError, evaluateSource, exposeCurrentFrameAndCurrentTime, fetchSource, getBackupNativeContext, getNativeContext, ongoingRequests, resolvedRequests, window) => {\n    return (context, moduleURL, options = { credentials: 'omit' }) => {\n        const nativeContext = getNativeContext(context);\n        const absoluteUrl = (new URL(moduleURL, window.location.href)).toString();\n        // Bug #59: Only Chrome & Opera do implement the audioWorklet property.\n        if (nativeContext.audioWorklet !== undefined) {\n            return fetchSource(moduleURL)\n                .then((source) => {\n                const [importStatements, sourceWithoutImportStatements] = splitImportStatements(source, absoluteUrl);\n                /*\n                 * Bug #170: Chrome and Opera do call process() with an array with empty channelData for each input if no input is\n                 * connected.\n                 *\n                 * This is the unminified version of the code used below:\n                 *\n                 * ```js\n                 * `${ importStatements };\n                 * ((registerProcessor) => {${ sourceWithoutImportStatements }\n                 * })((name, processorCtor) => registerProcessor(name, class extends processorCtor {\n                 *\n                 *     process (inputs, outputs, parameters) {\n                 *         return super.process(\n                 *             (inputs.map((input) => input.some((channelData) => channelData.length === 0)) ? [ ] : input),\n                 *             outputs,\n                 *             parameters\n                 *         );\n                 *     }\n                 *\n                 * }))`\n                 * ```\n                 */\n                const wrappedSource = `${importStatements};(registerProcessor=>{${sourceWithoutImportStatements}\n})((n,p)=>registerProcessor(n,class extends p{process(i,o,p){return super.process(i.map(j=>j.some(k=>k.length===0)?[]:j),o,p)}}))`; // tslint:disable-line:max-line-length\n                const blob = new Blob([wrappedSource], { type: 'application/javascript; charset=utf-8' });\n                const url = URL.createObjectURL(blob);\n                const backupNativeContext = getBackupNativeContext(nativeContext);\n                const nativeContextOrBackupNativeContext = (backupNativeContext !== null) ? backupNativeContext : nativeContext;\n                return nativeContextOrBackupNativeContext.audioWorklet\n                    .addModule(url, options)\n                    .then(() => URL.revokeObjectURL(url))\n                    // @todo This could be written more elegantly when Promise.finally() becomes avalaible.\n                    .catch((err) => {\n                    URL.revokeObjectURL(url);\n                    if (err.code === undefined || err.name === 'SyntaxError') {\n                        err.code = 12;\n                    }\n                    throw err;\n                });\n            });\n        }\n        const resolvedRequestsOfContext = resolvedRequests.get(context);\n        if (resolvedRequestsOfContext !== undefined && resolvedRequestsOfContext.has(moduleURL)) {\n            return Promise.resolve();\n        }\n        const ongoingRequestsOfContext = ongoingRequests.get(context);\n        if (ongoingRequestsOfContext !== undefined) {\n            const promiseOfOngoingRequest = ongoingRequestsOfContext.get(moduleURL);\n            if (promiseOfOngoingRequest !== undefined) {\n                return promiseOfOngoingRequest;\n            }\n        }\n        const promise = fetchSource(moduleURL)\n            .then((source) => {\n            const [importStatements, sourceWithoutImportStatements] = splitImportStatements(source, absoluteUrl);\n            /*\n             * This is the unminified version of the code used below:\n             *\n             * ```js\n             * ${ importStatements };\n             * ((a, b) => {\n             *     (a[b] = a[b] || [ ]).push(\n             *         (AudioWorkletProcessor, global, registerProcessor, sampleRate, self, window) => {\n             *             ${ sourceWithoutImportStatements }\n             *         }\n             *     );\n             * })(window, '_AWGS');\n             * ```\n             */\n            // tslint:disable-next-line:max-line-length\n            const wrappedSource = `${importStatements};((a,b)=>{(a[b]=a[b]||[]).push((AudioWorkletProcessor,global,registerProcessor,sampleRate,self,window)=>{${sourceWithoutImportStatements}\n})})(window,'_AWGS')`;\n            // @todo Evaluating the given source code is a possible security problem.\n            return evaluateSource(wrappedSource);\n        })\n            .then(() => {\n            const evaluateAudioWorkletGlobalScope = window._AWGS.pop();\n            if (evaluateAudioWorkletGlobalScope === undefined) {\n                throw new SyntaxError();\n            }\n            exposeCurrentFrameAndCurrentTime(nativeContext.currentTime, nativeContext.sampleRate, () => evaluateAudioWorkletGlobalScope(class AudioWorkletProcessor {\n            }, undefined, (name, processorCtor) => {\n                if (name.trim() === '') {\n                    throw createNotSupportedError();\n                }\n                const nodeNameToProcessorConstructorMap = NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.get(nativeContext);\n                if (nodeNameToProcessorConstructorMap !== undefined) {\n                    if (nodeNameToProcessorConstructorMap.has(name)) {\n                        throw createNotSupportedError();\n                    }\n                    verifyProcessorCtor(processorCtor);\n                    verifyParameterDescriptors(processorCtor.parameterDescriptors);\n                    nodeNameToProcessorConstructorMap.set(name, processorCtor);\n                }\n                else {\n                    verifyProcessorCtor(processorCtor);\n                    verifyParameterDescriptors(processorCtor.parameterDescriptors);\n                    NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.set(nativeContext, new Map([[name, processorCtor]]));\n                }\n            }, nativeContext.sampleRate, undefined, undefined));\n        })\n            .catch((err) => {\n            if (err.code === undefined || err.name === 'SyntaxError') {\n                err.code = 12;\n            }\n            throw err;\n        });\n        if (ongoingRequestsOfContext === undefined) {\n            ongoingRequests.set(context, new Map([[moduleURL, promise]]));\n        }\n        else {\n            ongoingRequestsOfContext.set(moduleURL, promise);\n        }\n        promise\n            .then(() => {\n            const rslvdRqstsFCntxt = resolvedRequests.get(context);\n            if (rslvdRqstsFCntxt === undefined) {\n                resolvedRequests.set(context, new Set([moduleURL]));\n            }\n            else {\n                rslvdRqstsFCntxt.add(moduleURL);\n            }\n        })\n            .catch(() => { }) // tslint:disable-line:no-empty\n            // @todo Use finally when it becomes available in all supported browsers.\n            .then(() => {\n            const ngngRqstsFCntxt = ongoingRequests.get(context);\n            if (ngngRqstsFCntxt !== undefined) {\n                ngngRqstsFCntxt.delete(moduleURL);\n            }\n        });\n        return promise;\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/add-audio-worklet-module.js.map","export const testAnalyserNodeGetFloatTimeDomainDataMethodSupport = (nativeAnalyserNode) => {\n    return typeof nativeAnalyserNode.getFloatTimeDomainData === 'function';\n};\n//# sourceMappingURL=/build/es2019/helpers/test-analyser-node-get-float-time-domain-data-method-support.js.map","import { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { testAnalyserNodeGetFloatTimeDomainDataMethodSupport } from '../helpers/test-analyser-node-get-float-time-domain-data-method-support';\nimport { wrapAnalyserNodeGetFloatTimeDomainDataMethod } from '../helpers/wrap-analyser-node-get-float-time-domain-data-method';\nexport const createNativeAnalyserNodeFactory = (cacheTestResult, createIndexSizeError, createNativeAudioNode) => {\n    return (nativeContext, options) => {\n        const nativeAnalyserNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createAnalyser());\n        // Bug #37: Firefox does not create an AnalyserNode with the default properties.\n        assignNativeAudioNodeOptions(nativeAnalyserNode, options);\n        // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.\n        if (!(options.maxDecibels > options.minDecibels)) {\n            throw createIndexSizeError();\n        }\n        assignNativeAudioNodeOption(nativeAnalyserNode, options, 'fftSize');\n        assignNativeAudioNodeOption(nativeAnalyserNode, options, 'maxDecibels');\n        assignNativeAudioNodeOption(nativeAnalyserNode, options, 'minDecibels');\n        assignNativeAudioNodeOption(nativeAnalyserNode, options, 'smoothingTimeConstant');\n        // Bug #36: Safari does not support getFloatTimeDomainData() yet.\n        if (!cacheTestResult(testAnalyserNodeGetFloatTimeDomainDataMethodSupport, () => testAnalyserNodeGetFloatTimeDomainDataMethodSupport(nativeAnalyserNode))) {\n            wrapAnalyserNodeGetFloatTimeDomainDataMethod(nativeAnalyserNode);\n        }\n        return nativeAnalyserNode;\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/native-analyser-node-factory.js.map","export const wrapAnalyserNodeGetFloatTimeDomainDataMethod = (nativeAnalyserNode) => {\n    nativeAnalyserNode.getFloatTimeDomainData = (array) => {\n        const byteTimeDomainData = new Uint8Array(array.length);\n        nativeAnalyserNode.getByteTimeDomainData(byteTimeDomainData);\n        const length = Math.max(byteTimeDomainData.length, nativeAnalyserNode.fftSize);\n        for (let i = 0; i < length; i += 1) {\n            array[i] = (byteTimeDomainData[i] - 128) * 0.0078125;\n        }\n        return array;\n    };\n};\n//# sourceMappingURL=/build/es2019/helpers/wrap-analyser-node-get-float-time-domain-data-method.js.map","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { wrapAudioBufferSourceNodeStartMethodConsecutiveCalls } from '../helpers/wrap-audio-buffer-source-node-start-method-consecutive-calls';\nimport { wrapAudioBufferSourceNodeStartMethodDurationParameter } from '../helpers/wrap-audio-buffer-source-node-start-method-duration-parameter';\nimport { wrapAudioScheduledSourceNodeStartMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters';\nimport { wrapAudioScheduledSourceNodeStopMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters';\nexport const createNativeAudioBufferSourceNodeFactory = (cacheTestResult, createNativeAudioNode, testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport, testAudioBufferSourceNodeStartMethodDurationParameterSupport, testAudioBufferSourceNodeStartMethodOffsetClampingSupport, testAudioBufferSourceNodeStopMethodNullifiedBufferSupport, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioBufferSourceNodeStartMethodOffsetClampling, wrapAudioBufferSourceNodeStopMethodNullifiedBuffer, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls) => {\n    return (nativeContext, options = {}) => {\n        const nativeAudioBufferSourceNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createBufferSource());\n        assignNativeAudioNodeOptions(nativeAudioBufferSourceNode, options);\n        assignNativeAudioNodeAudioParamValue(nativeAudioBufferSourceNode, options, 'playbackRate');\n        // Bug #71: Edge does not allow to set the buffer to null.\n        assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'buffer');\n        // Bug #149: Safari does not yet support the detune AudioParam.\n        assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'loop');\n        assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'loopEnd');\n        assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'loopStart');\n        // Bug #69: Safari does allow calls to start() of an already scheduled AudioBufferSourceNode.\n        if (!cacheTestResult(testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport, () => testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport(nativeContext))) {\n            wrapAudioBufferSourceNodeStartMethodConsecutiveCalls(nativeAudioBufferSourceNode);\n        }\n        // Bug #92: Edge does not respect the duration parameter yet.\n        if (!cacheTestResult(testAudioBufferSourceNodeStartMethodDurationParameterSupport, testAudioBufferSourceNodeStartMethodDurationParameterSupport)) {\n            wrapAudioBufferSourceNodeStartMethodDurationParameter(nativeAudioBufferSourceNode, nativeContext);\n        }\n        // Bug #154 & #155: Safari does not handle offsets which are equal to or greater than the duration of the buffer.\n        if (!cacheTestResult(testAudioBufferSourceNodeStartMethodOffsetClampingSupport, () => testAudioBufferSourceNodeStartMethodOffsetClampingSupport(nativeContext))) {\n            wrapAudioBufferSourceNodeStartMethodOffsetClampling(nativeAudioBufferSourceNode);\n        }\n        // Bug #162: Safari does throw an error when stop() is called on an AudioBufferSourceNode which has no buffer assigned to it.\n        if (!cacheTestResult(testAudioBufferSourceNodeStopMethodNullifiedBufferSupport, () => testAudioBufferSourceNodeStopMethodNullifiedBufferSupport(nativeContext))) {\n            wrapAudioBufferSourceNodeStopMethodNullifiedBuffer(nativeAudioBufferSourceNode, nativeContext);\n        }\n        // Bug #44: Only Chrome, Firefox & Opera throw a RangeError yet.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(nativeContext))) {\n            wrapAudioScheduledSourceNodeStartMethodNegativeParameters(nativeAudioBufferSourceNode);\n        }\n        // Bug #19: Safari does not ignore calls to stop() of an already stopped AudioBufferSourceNode.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, () => testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport(nativeContext))) {\n            wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls(nativeAudioBufferSourceNode, nativeContext);\n        }\n        // Bug #44: Only Firefox does not throw a RangeError yet.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(nativeContext))) {\n            wrapAudioScheduledSourceNodeStopMethodNegativeParameters(nativeAudioBufferSourceNode);\n        }\n        return nativeAudioBufferSourceNode;\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/native-audio-buffer-source-node-factory.js.map","import { createInvalidStateError } from '../factories/invalid-state-error';\nexport const wrapAudioBufferSourceNodeStartMethodConsecutiveCalls = (nativeAudioBufferSourceNode) => {\n    nativeAudioBufferSourceNode.start = ((start) => {\n        let isScheduled = false;\n        return (when = 0, offset = 0, duration) => {\n            if (isScheduled) {\n                throw createInvalidStateError();\n            }\n            start.call(nativeAudioBufferSourceNode, when, offset, duration);\n            isScheduled = true;\n        };\n    })(nativeAudioBufferSourceNode.start);\n};\n//# sourceMappingURL=/build/es2019/helpers/wrap-audio-buffer-source-node-start-method-consecutive-calls.js.map","export const wrapAudioBufferSourceNodeStartMethodDurationParameter = (nativeAudioScheduledSourceNode, nativeContext) => {\n    let endTime = Number.POSITIVE_INFINITY;\n    let stopTime = Number.POSITIVE_INFINITY;\n    nativeAudioScheduledSourceNode.start = ((start, stop) => {\n        return (when = 0, offset = 0, duration = Number.POSITIVE_INFINITY) => {\n            start.call(nativeAudioScheduledSourceNode, when, offset);\n            if (duration >= 0 && duration < Number.POSITIVE_INFINITY) {\n                const actualStartTime = Math.max(when, nativeContext.currentTime);\n                // @todo The playbackRate could of course also have been automated and is not always fixed.\n                const durationInBufferTime = (duration / nativeAudioScheduledSourceNode.playbackRate.value);\n                endTime = actualStartTime + durationInBufferTime;\n                stop.call(nativeAudioScheduledSourceNode, Math.min(endTime, stopTime));\n            }\n        };\n    })(nativeAudioScheduledSourceNode.start, nativeAudioScheduledSourceNode.stop);\n    nativeAudioScheduledSourceNode.stop = ((stop) => {\n        return (when = 0) => {\n            stopTime = Math.max(when, nativeContext.currentTime);\n            stop.call(nativeAudioScheduledSourceNode, Math.min(endTime, stopTime));\n        };\n    })(nativeAudioScheduledSourceNode.stop);\n};\n//# sourceMappingURL=/build/es2019/helpers/wrap-audio-buffer-source-node-start-method-duration-parameter.js.map","import { copyFromChannel } from '../helpers/copy-from-channel';\nimport { copyToChannel } from '../helpers/copy-to-channel';\nimport { createNestedArrays } from '../helpers/create-nested-arrays';\nimport { getAudioNodeConnections } from '../helpers/get-audio-node-connections';\nimport { getAudioWorkletProcessor } from '../helpers/get-audio-worklet-processor';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nconst processBuffer = async (proxy, renderedBuffer, nativeOfflineAudioContext, options, processorConstructor, exposeCurrentFrameAndCurrentTime) => {\n    // Ceil the length to the next full render quantum.\n    // Bug #17: Safari does not yet expose the length.\n    const length = (renderedBuffer === null) ? (Math.ceil(proxy.context.length / 128) * 128) : renderedBuffer.length;\n    const numberOfInputChannels = options.channelCount * options.numberOfInputs;\n    const numberOfOutputChannels = options.outputChannelCount.reduce((sum, value) => sum + value, 0);\n    const processedBuffer = (numberOfOutputChannels === 0) ? null : nativeOfflineAudioContext.createBuffer(numberOfOutputChannels, length, nativeOfflineAudioContext.sampleRate);\n    if (processorConstructor === undefined) {\n        throw new Error('Missing the processor constructor.');\n    }\n    const audioNodeConnections = getAudioNodeConnections(proxy);\n    const audioWorkletProcessor = await getAudioWorkletProcessor(nativeOfflineAudioContext, proxy);\n    const inputs = createNestedArrays(options.numberOfInputs, options.channelCount);\n    const outputs = createNestedArrays(options.numberOfOutputs, options.outputChannelCount);\n    const parameters = Array\n        .from(proxy.parameters.keys())\n        .reduce((prmtrs, name) => ({ ...prmtrs, [name]: new Float32Array(128) }), {});\n    for (let i = 0; i < length; i += 128) {\n        if (options.numberOfInputs > 0 && renderedBuffer !== null) {\n            for (let j = 0; j < options.numberOfInputs; j += 1) {\n                for (let k = 0; k < options.channelCount; k += 1) {\n                    copyFromChannel(renderedBuffer, inputs[j], k, k, i);\n                }\n            }\n        }\n        if (processorConstructor.parameterDescriptors !== undefined && renderedBuffer !== null) {\n            processorConstructor.parameterDescriptors.forEach(({ name }, index) => {\n                copyFromChannel(renderedBuffer, parameters, name, numberOfInputChannels + index, i);\n            });\n        }\n        for (let j = 0; j < options.numberOfInputs; j += 1) {\n            for (let k = 0; k < options.outputChannelCount[j]; k += 1) {\n                // The byteLength will be 0 when the ArrayBuffer was transferred.\n                if (outputs[j][k].byteLength === 0) {\n                    outputs[j][k] = new Float32Array(128);\n                }\n            }\n        }\n        try {\n            const potentiallyEmptyInputs = inputs\n                .map((input, index) => {\n                if (audioNodeConnections.activeInputs[index].size === 0) {\n                    return [];\n                }\n                return input;\n            });\n            const activeSourceFlag = exposeCurrentFrameAndCurrentTime(i / nativeOfflineAudioContext.sampleRate, nativeOfflineAudioContext.sampleRate, () => audioWorkletProcessor.process(potentiallyEmptyInputs, outputs, parameters));\n            if (processedBuffer !== null) {\n                for (let j = 0, outputChannelSplitterNodeOutput = 0; j < options.numberOfOutputs; j += 1) {\n                    for (let k = 0; k < options.outputChannelCount[j]; k += 1) {\n                        copyToChannel(processedBuffer, outputs[j], k, outputChannelSplitterNodeOutput + k, i);\n                    }\n                    outputChannelSplitterNodeOutput += options.outputChannelCount[j];\n                }\n            }\n            if (!activeSourceFlag) {\n                break;\n            }\n        }\n        catch (error) {\n            proxy.dispatchEvent(new ErrorEvent('processorerror', { error }));\n            break;\n        }\n    }\n    return processedBuffer;\n};\nexport const createAudioWorkletNodeRendererFactory = (connectAudioParam, connectMultipleOutputs, createNativeAudioBufferSourceNode, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, deleteUnrenderedAudioWorkletNode, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, getNativeAudioNode, nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext) => {\n    return (name, options, processorConstructor) => {\n        const renderedNativeAudioNodes = new WeakMap();\n        let processedBufferPromise = null;\n        const createAudioNode = async (proxy, nativeOfflineAudioContext, trace) => {\n            let nativeAudioWorkletNode = getNativeAudioNode(proxy);\n            let nativeOutputNodes = null;\n            const nativeAudioWorkletNodeIsOwnedByContext = isOwnedByContext(nativeAudioWorkletNode, nativeOfflineAudioContext);\n            // Bug #61: Only Chrome & Opera have an implementation of the AudioWorkletNode yet.\n            if (nativeAudioWorkletNodeConstructor === null) {\n                const numberOfOutputChannels = options.outputChannelCount.reduce((sum, value) => sum + value, 0);\n                const outputChannelSplitterNode = createNativeChannelSplitterNode(nativeOfflineAudioContext, {\n                    channelCount: Math.max(1, numberOfOutputChannels),\n                    channelCountMode: 'explicit',\n                    channelInterpretation: 'discrete',\n                    numberOfOutputs: Math.max(1, numberOfOutputChannels)\n                });\n                const outputChannelMergerNodes = [];\n                for (let i = 0; i < proxy.numberOfOutputs; i += 1) {\n                    outputChannelMergerNodes.push(createNativeChannelMergerNode(nativeOfflineAudioContext, {\n                        channelCount: 1,\n                        channelCountMode: 'explicit',\n                        channelInterpretation: 'speakers',\n                        numberOfInputs: options.outputChannelCount[i]\n                    }));\n                }\n                const outputGainNode = createNativeGainNode(nativeOfflineAudioContext, {\n                    channelCount: options.channelCount,\n                    channelCountMode: options.channelCountMode,\n                    channelInterpretation: options.channelInterpretation,\n                    gain: 1\n                });\n                outputGainNode.connect = connectMultipleOutputs.bind(null, outputChannelMergerNodes);\n                outputGainNode.disconnect = disconnectMultipleOutputs.bind(null, outputChannelMergerNodes);\n                nativeOutputNodes = [outputChannelSplitterNode, outputChannelMergerNodes, outputGainNode];\n            }\n            else if (!nativeAudioWorkletNodeIsOwnedByContext) {\n                nativeAudioWorkletNode = new nativeAudioWorkletNodeConstructor(nativeOfflineAudioContext, name);\n            }\n            renderedNativeAudioNodes.set(nativeOfflineAudioContext, (nativeOutputNodes === null) ? nativeAudioWorkletNode : nativeOutputNodes[2]);\n            if (nativeOutputNodes !== null) {\n                if (processedBufferPromise === null) {\n                    if (processorConstructor === undefined) {\n                        throw new Error('Missing the processor constructor.');\n                    }\n                    if (nativeOfflineAudioContextConstructor === null) {\n                        throw new Error('Missing the native OfflineAudioContext constructor.');\n                    }\n                    // Bug #47: The AudioDestinationNode in Edge and Safari gets not initialized correctly.\n                    const numberOfInputChannels = proxy.channelCount * proxy.numberOfInputs;\n                    const numberOfParameters = (processorConstructor.parameterDescriptors === undefined)\n                        ? 0\n                        : processorConstructor.parameterDescriptors.length;\n                    const numberOfChannels = numberOfInputChannels + numberOfParameters;\n                    const renderBuffer = async () => {\n                        const partialOfflineAudioContext = new nativeOfflineAudioContextConstructor(numberOfChannels, \n                        // Ceil the length to the next full render quantum.\n                        // Bug #17: Safari does not yet expose the length.\n                        Math.ceil(proxy.context.length / 128) * 128, nativeOfflineAudioContext.sampleRate);\n                        const gainNodes = [];\n                        const inputChannelSplitterNodes = [];\n                        for (let i = 0; i < options.numberOfInputs; i += 1) {\n                            gainNodes.push(createNativeGainNode(partialOfflineAudioContext, {\n                                channelCount: options.channelCount,\n                                channelCountMode: options.channelCountMode,\n                                channelInterpretation: options.channelInterpretation,\n                                gain: 1\n                            }));\n                            inputChannelSplitterNodes.push(createNativeChannelSplitterNode(partialOfflineAudioContext, {\n                                channelCount: options.channelCount,\n                                channelCountMode: 'explicit',\n                                channelInterpretation: 'discrete',\n                                numberOfOutputs: options.channelCount\n                            }));\n                        }\n                        const constantSourceNodes = await Promise\n                            .all(Array\n                            .from(proxy.parameters.values())\n                            .map(async (audioParam) => {\n                            const constantSourceNode = createNativeConstantSourceNode(partialOfflineAudioContext, {\n                                channelCount: 1,\n                                channelCountMode: 'explicit',\n                                channelInterpretation: 'discrete',\n                                offset: audioParam.value\n                            });\n                            await renderAutomation(partialOfflineAudioContext, audioParam, constantSourceNode.offset, trace);\n                            return constantSourceNode;\n                        }));\n                        const inputChannelMergerNode = createNativeChannelMergerNode(partialOfflineAudioContext, {\n                            channelCount: 1,\n                            channelCountMode: 'explicit',\n                            channelInterpretation: 'speakers',\n                            numberOfInputs: Math.max(1, numberOfInputChannels + numberOfParameters)\n                        });\n                        for (let i = 0; i < options.numberOfInputs; i += 1) {\n                            gainNodes[i].connect(inputChannelSplitterNodes[i]);\n                            for (let j = 0; j < options.channelCount; j += 1) {\n                                inputChannelSplitterNodes[i].connect(inputChannelMergerNode, j, (i * options.channelCount) + j);\n                            }\n                        }\n                        for (const [index, constantSourceNode] of constantSourceNodes.entries()) {\n                            constantSourceNode.connect(inputChannelMergerNode, 0, numberOfInputChannels + index);\n                            constantSourceNode.start(0);\n                        }\n                        inputChannelMergerNode.connect(partialOfflineAudioContext.destination);\n                        await Promise\n                            .all(gainNodes\n                            .map((gainNode) => renderInputsOfAudioNode(proxy, partialOfflineAudioContext, gainNode, trace)));\n                        return renderNativeOfflineAudioContext(partialOfflineAudioContext);\n                    };\n                    processedBufferPromise = processBuffer(proxy, (numberOfChannels === 0) ? null : await renderBuffer(), nativeOfflineAudioContext, options, processorConstructor, exposeCurrentFrameAndCurrentTime);\n                }\n                const processedBuffer = await processedBufferPromise;\n                const audioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext);\n                const [outputChannelSplitterNode, outputChannelMergerNodes, outputGainNode] = nativeOutputNodes;\n                if (processedBuffer !== null) {\n                    audioBufferSourceNode.buffer = processedBuffer;\n                    audioBufferSourceNode.start(0);\n                }\n                audioBufferSourceNode.connect(outputChannelSplitterNode);\n                for (let i = 0, outputChannelSplitterNodeOutput = 0; i < proxy.numberOfOutputs; i += 1) {\n                    const outputChannelMergerNode = outputChannelMergerNodes[i];\n                    for (let j = 0; j < options.outputChannelCount[i]; j += 1) {\n                        outputChannelSplitterNode.connect(outputChannelMergerNode, outputChannelSplitterNodeOutput + j, j);\n                    }\n                    outputChannelSplitterNodeOutput += options.outputChannelCount[i];\n                }\n                return outputGainNode;\n            }\n            if (!nativeAudioWorkletNodeIsOwnedByContext) {\n                for (const [nm, audioParam] of proxy.parameters.entries()) {\n                    await renderAutomation(nativeOfflineAudioContext, audioParam, \n                    // @todo The definition that TypeScript uses of the AudioParamMap is lacking many methods.\n                    nativeAudioWorkletNode.parameters.get(nm), trace);\n                }\n            }\n            else {\n                for (const [nm, audioParam] of proxy.parameters.entries()) {\n                    await connectAudioParam(nativeOfflineAudioContext, audioParam, \n                    // @todo The definition that TypeScript uses of the AudioParamMap is lacking many methods.\n                    nativeAudioWorkletNode.parameters.get(nm), trace);\n                }\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioWorkletNode, trace);\n            return nativeAudioWorkletNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext, trace) {\n                deleteUnrenderedAudioWorkletNode(nativeOfflineAudioContext, proxy);\n                const renderedNativeAudioWorkletNodeOrGainNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeAudioWorkletNodeOrGainNode !== undefined) {\n                    return Promise.resolve(renderedNativeAudioWorkletNodeOrGainNode);\n                }\n                return createAudioNode(proxy, nativeOfflineAudioContext, trace);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/audio-worklet-node-renderer-factory.js.map","import { NODE_TO_PROCESSOR_MAPS } from '../globals';\nimport { getNativeAudioNode } from './get-native-audio-node';\nimport { getValueForKey } from './get-value-for-key';\nexport const getAudioWorkletProcessor = (nativeOfflineAudioContext, proxy) => {\n    const nodeToProcessorMap = getValueForKey(NODE_TO_PROCESSOR_MAPS, nativeOfflineAudioContext);\n    const nativeAudioWorkletNode = getNativeAudioNode(proxy);\n    return getValueForKey(nodeToProcessorMap, nativeAudioWorkletNode);\n};\n//# sourceMappingURL=/build/es2019/helpers/get-audio-worklet-processor.js.map","import { detachArrayBuffer } from '../helpers/detach-array-buffer';\nimport { wrapAudioBufferGetChannelDataMethod } from '../helpers/wrap-audio-buffer-get-channel-data-method';\nexport const createDecodeAudioData = (audioBufferStore, cacheTestResult, createDataCloneError, createEncodingError, detachedArrayBuffers, getNativeContext, isNativeContext, isNativeOfflineAudioContext, nativeOfflineAudioContextConstructor, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, testPromiseSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds) => {\n    return (anyContext, audioData) => {\n        const nativeContext = isNativeContext(anyContext) ? anyContext : getNativeContext(anyContext);\n        // Bug #43: Only Chrome and Opera do throw a DataCloneError.\n        if (detachedArrayBuffers.has(audioData)) {\n            const err = createDataCloneError();\n            return Promise.reject(err);\n        }\n        // The audioData parameter maybe of a type which can't be added to a WeakSet.\n        try {\n            detachedArrayBuffers.add(audioData);\n        }\n        catch {\n            // Ignore errors.\n        }\n        // Bug #21: Safari does not support promises yet.\n        if (cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeContext))) {\n            // Bug #101: Edge does not decode something on a closed OfflineAudioContext.\n            const nativeContextOrBackupNativeContext = (nativeContext.state === 'closed' &&\n                nativeOfflineAudioContextConstructor !== null &&\n                isNativeOfflineAudioContext(nativeContext)) ?\n                new nativeOfflineAudioContextConstructor(1, 1, nativeContext.sampleRate) :\n                nativeContext;\n            const promise = nativeContextOrBackupNativeContext\n                .decodeAudioData(audioData)\n                .catch((err) => {\n                // Bug #27: Edge is rejecting invalid arrayBuffers with a DOMException.\n                if (err instanceof DOMException && err.name === 'NotSupportedError') {\n                    throw new TypeError();\n                }\n                throw err;\n            });\n            return promise\n                .then((audioBuffer) => {\n                // Bug #157: Only Chrome & Opera do allow the bufferOffset to be out-of-bounds.\n                if (!cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, () => testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer))) {\n                    wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n                }\n                audioBufferStore.add(audioBuffer);\n                return audioBuffer;\n            });\n        }\n        // Bug #21: Safari does not return a Promise yet.\n        return new Promise((resolve, reject) => {\n            const complete = () => {\n                // Bug #133: Safari does neuter the ArrayBuffer.\n                try {\n                    detachArrayBuffer(audioData);\n                }\n                catch { /* Ignore errors. */ }\n            };\n            const fail = (err) => {\n                reject(err);\n                complete();\n            };\n            // Bug #26: Safari throws a synchronous error.\n            try {\n                // Bug #1: Safari requires a successCallback.\n                nativeContext.decodeAudioData(audioData, (audioBuffer) => {\n                    // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n                    // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.\n                    if (typeof audioBuffer.copyFromChannel !== 'function') {\n                        wrapAudioBufferCopyChannelMethods(audioBuffer);\n                        wrapAudioBufferGetChannelDataMethod(audioBuffer);\n                    }\n                    audioBufferStore.add(audioBuffer);\n                    complete();\n                    resolve(audioBuffer);\n                }, (err) => {\n                    // Bug #4: Safari returns null instead of an error.\n                    if (err === null) {\n                        fail(createEncodingError());\n                    }\n                    else {\n                        fail(err);\n                    }\n                });\n            }\n            catch (err) {\n                fail(err);\n            }\n        });\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/decode-audio-data.js.map","export const detachArrayBuffer = (arrayBuffer) => {\n    const { port1 } = new MessageChannel();\n    port1.postMessage(arrayBuffer, [arrayBuffer]);\n};\n//# sourceMappingURL=/build/es2019/helpers/detach-array-buffer.js.map","export const isDelayNode = (audioNode) => {\n    return 'delayTime' in audioNode;\n};\n//# sourceMappingURL=/build/es2019/guards/delay-node.js.map","import { isAudioNode } from '../guards/audio-node';\nimport { isDelayNode } from '../guards/delay-node';\nexport const createDetectCycles = (audioParamAudioNodeStore, getAudioNodeConnections, getValueForKey) => {\n    return function detectCycles(chain, nextLink) {\n        const audioNode = (isAudioNode(nextLink))\n            ? nextLink\n            : getValueForKey(audioParamAudioNodeStore, nextLink);\n        if (isDelayNode(audioNode)) {\n            return [];\n        }\n        if (chain[0] === audioNode) {\n            return [chain];\n        }\n        if (chain.includes(audioNode)) {\n            return [];\n        }\n        const { outputs } = getAudioNodeConnections(audioNode);\n        return Array\n            .from(outputs)\n            .map((outputConnection) => detectCycles([...chain, audioNode], outputConnection[0]))\n            .reduce((mergedCycles, nestedCycles) => mergedCycles.concat(nestedCycles), []);\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/detect-cycles.js.map","import { createInvalidAccessError } from '../factories/invalid-access-error';\nexport const wrapIIRFilterNodeGetFrequencyResponseMethod = (nativeIIRFilterNode) => {\n    nativeIIRFilterNode.getFrequencyResponse = ((getFrequencyResponse) => {\n        return (frequencyHz, magResponse, phaseResponse) => {\n            if ((frequencyHz.length !== magResponse.length) || (magResponse.length !== phaseResponse.length)) {\n                throw createInvalidAccessError();\n            }\n            return getFrequencyResponse.call(nativeIIRFilterNode, frequencyHz, magResponse, phaseResponse);\n        };\n    })(nativeIIRFilterNode.getFrequencyResponse);\n};\n//# sourceMappingURL=/build/es2019/helpers/wrap-iir-filter-node-get-frequency-response-method.js.map","import { wrapIIRFilterNodeGetFrequencyResponseMethod } from '../helpers/wrap-iir-filter-node-get-frequency-response-method';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers'\n};\nexport const createIIRFilterNodeConstructor = (audioNodeConstructor, createNativeIIRFilterNode, createIIRFilterNodeRenderer, getNativeContext, isNativeOfflineAudioContext) => {\n    return class IIRFilterNode extends audioNodeConstructor {\n        constructor(context, options) {\n            const nativeContext = getNativeContext(context);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeIIRFilterNode = createNativeIIRFilterNode(nativeContext, isOffline ? null : context.baseLatency, mergedOptions);\n            const iirFilterNodeRenderer = ((isOffline)\n                ? createIIRFilterNodeRenderer(mergedOptions.feedback, mergedOptions.feedforward)\n                : null);\n            super(context, false, nativeIIRFilterNode, iirFilterNodeRenderer);\n            // Bug #23 & #24: FirefoxDeveloper does not throw an InvalidAccessError.\n            // @todo Write a test which allows other browsers to remain unpatched.\n            wrapIIRFilterNodeGetFrequencyResponseMethod(nativeIIRFilterNode);\n            this._nativeIIRFilterNode = nativeIIRFilterNode;\n        }\n        getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {\n            return this._nativeIIRFilterNode.getFrequencyResponse(frequencyHz, magResponse, phaseResponse);\n        }\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/iir-filter-node-constructor.js.map","export const testClonabilityOfAudioWorkletNodeOptions = (audioWorkletNodeOptions) => {\n    const { port1 } = new MessageChannel();\n    try {\n        // This will throw an error if the audioWorkletNodeOptions are not clonable.\n        port1.postMessage(audioWorkletNodeOptions);\n    }\n    finally {\n        port1.close();\n    }\n};\n//# sourceMappingURL=/build/es2019/helpers/test-clonability-of-audio-worklet-node-options.js.map","import { testClonabilityOfAudioWorkletNodeOptions } from '../helpers/test-clonability-of-audio-worklet-node-options';\nexport const createNativeAudioWorkletNodeFactory = (createInvalidStateError, createNativeAudioNode, createNativeAudioWorkletNodeFaker, createNativeGainNode, createNotSupportedError, monitorConnections) => {\n    return (nativeContext, baseLatency, nativeAudioWorkletNodeConstructor, name, processorConstructor, options) => {\n        if (nativeAudioWorkletNodeConstructor !== null) {\n            try {\n                const nativeAudioWorkletNode = createNativeAudioNode(nativeContext, (ntvCntxt) => {\n                    return new nativeAudioWorkletNodeConstructor(ntvCntxt, name, options);\n                });\n                const patchedEventListeners = new Map(); // tslint:disable-line:max-line-length\n                let onprocessorerror = null;\n                Object.defineProperties(nativeAudioWorkletNode, {\n                    /*\n                     * Bug #61: Overwriting the property accessors for channelCount and channelCountMode is necessary as long as some\n                     * browsers have no native implementation to achieve a consistent behavior.\n                     */\n                    channelCount: {\n                        get: () => options.channelCount,\n                        set: () => {\n                            throw createInvalidStateError();\n                        }\n                    },\n                    channelCountMode: {\n                        get: () => 'explicit',\n                        set: () => {\n                            throw createInvalidStateError();\n                        }\n                    },\n                    // Bug #156: Chrome & Opera do not yet fire an ErrorEvent.\n                    onprocessorerror: {\n                        get: () => onprocessorerror,\n                        set: (value) => {\n                            if (typeof onprocessorerror === 'function') {\n                                nativeAudioWorkletNode.removeEventListener('processorerror', onprocessorerror);\n                            }\n                            onprocessorerror = (typeof value === 'function') ? value : null;\n                            if (typeof onprocessorerror === 'function') {\n                                nativeAudioWorkletNode.addEventListener('processorerror', onprocessorerror);\n                            }\n                        }\n                    }\n                });\n                nativeAudioWorkletNode.addEventListener = ((addEventListener) => {\n                    return (...args) => {\n                        if (args[0] === 'processorerror') {\n                            const unpatchedEventListener = (typeof args[1] === 'function')\n                                ? args[1]\n                                : (typeof args[1] === 'object' && args[1] !== null && typeof args[1].handleEvent === 'function')\n                                    ? args[1].handleEvent\n                                    : null;\n                            if (unpatchedEventListener !== null) {\n                                const patchedEventListener = patchedEventListeners.get(args[1]);\n                                if (patchedEventListener !== undefined) {\n                                    args[1] = patchedEventListener;\n                                }\n                                else {\n                                    args[1] = (event) => {\n                                        unpatchedEventListener(new ErrorEvent(args[0], { ...event, error: new Error( /* @todo */) }));\n                                    };\n                                    patchedEventListeners.set(unpatchedEventListener, args[1]);\n                                }\n                            }\n                        }\n                        return addEventListener.call(nativeAudioWorkletNode, args[0], args[1], args[2]);\n                    };\n                })(nativeAudioWorkletNode.addEventListener);\n                nativeAudioWorkletNode.removeEventListener = ((removeEventListener) => {\n                    return (...args) => {\n                        if (args[0] === 'processorerror') {\n                            const patchedEventListener = patchedEventListeners.get(args[1]);\n                            if (patchedEventListener !== undefined) {\n                                patchedEventListeners.delete(args[1]);\n                                args[1] = patchedEventListener;\n                            }\n                        }\n                        return removeEventListener.call(nativeAudioWorkletNode, args[0], args[1], args[2]);\n                    };\n                })(nativeAudioWorkletNode.removeEventListener);\n                /*\n                 * Bug #86: Chrome & Opera do not invoke the process() function if the corresponding AudioWorkletNode is unconnected but has\n                 * an output.\n                 */\n                if (options.numberOfOutputs !== 0) {\n                    const nativeGainNode = createNativeGainNode(nativeContext, { channelCount: 1, channelCountMode: 'explicit', channelInterpretation: 'discrete', gain: 0 });\n                    nativeAudioWorkletNode\n                        .connect(nativeGainNode)\n                        /*\n                         * Bug #50: Edge does not yet allow to create AudioNodes on a closed AudioContext. Therefore the context property is\n                         * used here to make sure to connect the right destination.\n                         */\n                        .connect(nativeGainNode.context.destination);\n                    const whenConnected = () => nativeGainNode.disconnect();\n                    /*\n                     * Bug #50: Edge does not yet allow to create AudioNodes on a closed AudioContext. Therefore the context property is\n                     * used here to make sure to connect the right destination.\n                     */\n                    const whenDisconnected = () => nativeGainNode.connect(nativeGainNode.context.destination);\n                    // @todo Disconnect the connection when the process() function of the AudioWorkletNode returns false.\n                    return monitorConnections(nativeAudioWorkletNode, whenConnected, whenDisconnected);\n                }\n                return nativeAudioWorkletNode;\n            }\n            catch (err) {\n                // Bug #60: Chrome & Opera throw an InvalidStateError instead of a NotSupportedError.\n                if (err.code === 11) {\n                    throw createNotSupportedError();\n                }\n                throw err;\n            }\n        }\n        // Bug #61: Only Chrome & Opera have an implementation of the AudioWorkletNode yet.\n        if (processorConstructor === undefined) {\n            throw createNotSupportedError();\n        }\n        testClonabilityOfAudioWorkletNodeOptions(options);\n        return createNativeAudioWorkletNodeFaker(nativeContext, baseLatency, processorConstructor, options);\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/native-audio-worklet-node-factory.js.map","import { createInvalidStateError } from '../factories/invalid-state-error';\nexport const wrapChannelSplitterNode = (channelSplitterNode) => {\n    const channelCount = channelSplitterNode.numberOfOutputs;\n    // Bug #97: Safari does not throw an error when attempting to change the channelCount to something other than its initial value.\n    Object.defineProperty(channelSplitterNode, 'channelCount', {\n        get: () => channelCount,\n        set: (value) => {\n            if (value !== channelCount) {\n                throw createInvalidStateError();\n            }\n        }\n    });\n    /*\n     * Bug #30: Only Chrome, Firefox & Opera throw an error when attempting to change the channelCountMode to something other than\n     * explicit.\n     */\n    Object.defineProperty(channelSplitterNode, 'channelCountMode', {\n        get: () => 'explicit',\n        set: (value) => {\n            if (value !== 'explicit') {\n                throw createInvalidStateError();\n            }\n        }\n    });\n    /*\n     * Bug #32: Only Chrome, Firefox & Opera throws an error when attempting to change the channelInterpretation to something other than\n     * discrete.\n     */\n    Object.defineProperty(channelSplitterNode, 'channelInterpretation', {\n        get: () => 'discrete',\n        set: (value) => {\n            if (value !== 'discrete') {\n                throw createInvalidStateError();\n            }\n        }\n    });\n};\n//# sourceMappingURL=/build/es2019/helpers/wrap-channel-splitter-node.js.map","import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { wrapChannelSplitterNode } from '../helpers/wrap-channel-splitter-node';\nexport const createNativeChannelSplitterNodeFactory = (createNativeAudioNode) => {\n    return (nativeContext, options) => {\n        const nativeChannelSplitterNode = createNativeAudioNode(nativeContext, (ntvCntxt) => {\n            return ntvCntxt.createChannelSplitter(options.numberOfOutputs);\n        });\n        // Bug #96: Safari does not have the correct channelCount.\n        // Bug #29: Edge & Safari do not have the correct channelCountMode.\n        // Bug #31: Edge & Safari do not have the correct channelInterpretation.\n        assignNativeAudioNodeOptions(nativeChannelSplitterNode, options);\n        // Bug #29, #30, #31, #32, #96 & #97: Only Chrome, Firefox & Opera partially support the spec yet.\n        wrapChannelSplitterNode(nativeChannelSplitterNode);\n        return nativeChannelSplitterNode;\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/native-channel-splitter-node-factory.js.map","var arrayWithHoles = require(\"./arrayWithHoles\");\n\nvar iterableToArrayLimit = require(\"./iterableToArrayLimit\");\n\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray\");\n\nvar nonIterableRest = require(\"./nonIterableRest\");\n\nfunction _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}\n\nmodule.exports = _slicedToArray;","function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nmodule.exports = _arrayWithHoles;","function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nmodule.exports = _iterableToArrayLimit;","var arrayLikeToArray = require(\"./arrayLikeToArray\");\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}\n\nmodule.exports = _unsupportedIterableToArray;","function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nmodule.exports = _arrayLikeToArray;","function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nmodule.exports = _nonIterableRest;","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck;","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;","export const version: string = \"14.5.46\";\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * Assert that the statement is true, otherwise invoke the error.\n * @param statement\n * @param error The message which is passed into an Error\n */\nexport function assert(statement: boolean, error: string): void {\n\tif (!statement) {\n\t\tthrow new Error(error);\n\t}\n}\n\n/**\n * Make sure that the given value is within the range\n */\nexport function assertRange(value: number, gte: number, lte = Infinity): void {\n\tif (!(gte <= value && value <= lte)) {\n\t\tthrow new RangeError(`Value must be within [${gte}, ${lte}], got: ${value}`);\n\t}\n}\n\n/**\n * Make sure that the given value is within the range\n */\nexport function assertContextRunning(context: import(\"../context/BaseContext\").BaseContext): void {\n\t// add a warning if the context is not started\n\tif (!context.isOffline && context.state !== \"running\") {\n\t\twarn(\"The AudioContext is \\\"suspended\\\". Invoke Tone.start() from a user action to start the audio.\");\n\t}\n}\n\n/**\n * A basic logging interface\n */\ninterface Logger {\n\tlog: (args?: any[]) => void;\n\twarn: (args?: any[]) => void;\n}\n\n/**\n * The default logger is the console\n */\nlet defaultLogger: Logger = console;\n\n/**\n * Set the logging interface\n */\nexport function setLogger(logger: Logger): void {\n\tdefaultLogger = logger;\n}\n\n/**\n * Log anything\n */\nexport function log(...args: any[]): void {\n\tdefaultLogger.log(...args);\n}\n\n/**\n * Warn anything\n */\nexport function warn(...args: any[]): void {\n\tdefaultLogger.warn(...args);\n}\n","import { Note } from \"../type/Units\";\n\n/**\n * Test if the arg is undefined\n */\nexport function isUndef(arg: any): arg is undefined {\n\treturn typeof arg === \"undefined\";\n}\n\n/**\n * Test if the arg is not undefined\n */\nexport function isDefined<T>(arg: T | undefined): arg is T {\n\treturn !isUndef(arg);\n}\n\n/**\n * Test if the arg is a function\n */\nexport function isFunction(arg: any): arg is (a: any) => any {\n\treturn typeof arg === \"function\";\n}\n\n/**\n * Test if the argument is a number.\n */\nexport function isNumber(arg: any): arg is number {\n\treturn (typeof arg === \"number\");\n}\n\n/**\n * Test if the given argument is an object literal (i.e. `{}`);\n */\nexport function isObject(arg: any): arg is object {\n\treturn (Object.prototype.toString.call(arg) === \"[object Object]\" && arg.constructor === Object);\n}\n\n/**\n * Test if the argument is a boolean.\n */\nexport function isBoolean(arg: any): arg is boolean {\n\treturn (typeof arg === \"boolean\");\n}\n\n/**\n * Test if the argument is an Array\n */\nexport function isArray(arg: any): arg is any[] {\n\treturn (Array.isArray(arg));\n}\n\n/**\n * Test if the argument is a string.\n */\nexport function isString(arg: any): arg is string {\n\treturn (typeof arg === \"string\");\n}\n\n/**\n * Test if the argument is in the form of a note in scientific pitch notation.\n * e.g. \"C4\"\n */\nexport function isNote(arg: any): arg is Note {\n\treturn isString(arg) && /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i.test(arg);\n}\n","import {\n\tAudioContext as stdAudioContext,\n\tAudioWorkletNode as stdAudioWorkletNode,\n\tOfflineAudioContext as stdOfflineAudioContext,\n} from \"standardized-audio-context\";\nimport { assert } from \"../util/Debug\";\nimport { isDefined } from \"../util/TypeCheck\";\n\n/**\n * Create a new AudioContext\n */\nexport function createAudioContext(): AudioContext {\n\treturn new stdAudioContext() as unknown as AudioContext;\n}\n\n/**\n * Create a new OfflineAudioContext\n */\nexport function createOfflineAudioContext(channels: number, length: number, sampleRate: number): OfflineAudioContext {\n\treturn new stdOfflineAudioContext(channels, length, sampleRate) as unknown as OfflineAudioContext;\n}\n\n/**\n * Either the online or offline audio context\n */\nexport type AnyAudioContext = AudioContext | OfflineAudioContext;\n\n/**\n * Interface for things that Tone.js adds to the window\n */\ninterface ToneWindow extends Window {\n\tTONE_SILENCE_LOGGING?: boolean;\n\tTONE_DEBUG_CLASS?: string;\n}\n\n/**\n * A reference to the window object\n * @hidden\n */\nexport const theWindow: ToneWindow | null = typeof self === \"object\" ? self : null;\n\n/**\n * If the browser has a window object which has an AudioContext\n * @hidden\n */\nexport const hasAudioContext = theWindow &&\n\t(theWindow.hasOwnProperty(\"AudioContext\") || theWindow.hasOwnProperty(\"webkitAudioContext\"));\n\nexport function createAudioWorkletNode(context: AnyAudioContext, name: string, options?: Partial<AudioWorkletNodeOptions>): AudioWorkletNode {\n\tassert(isDefined(stdAudioWorkletNode), \"This node only works in a secure context (https or localhost)\");\n\t// @ts-ignore\n\treturn new stdAudioWorkletNode(context, name, options);\n}\n","import { Seconds } from \"../type/Units\";\n\nexport type TickerClockSource = \"worker\" | \"timeout\" | \"offline\";\n\n/**\n * A class which provides a reliable callback using either\n * a Web Worker, or if that isn't supported, falls back to setTimeout.\n */\nexport class Ticker {\n\n\t/**\n\t * Either \"worker\" or \"timeout\" or \"offline\"\n\t */\n\tprivate _type: TickerClockSource;\n\n\t/**\n\t * The update interval of the worker\n\t */\n\tprivate _updateInterval: Seconds;\n\n\t/**\n\t * The callback to invoke at regular intervals\n\t */\n\tprivate _callback: () => void;\n\n\t/**\n\t * track the callback interval\n\t */\n\tprivate _timeout!: number;\n\n\t/**\n\t * private reference to the worker\n\t */\n\tprivate _worker!: Worker;\n\n\tconstructor(callback: () => void, type: TickerClockSource, updateInterval: Seconds) {\n\n\t\tthis._callback = callback;\n\t\tthis._type = type;\n\t\tthis._updateInterval = updateInterval;\n\n\t\t// create the clock source for the first time\n\t\tthis._createClock();\n\t}\n\n\t/**\n\t * Generate a web worker\n\t */\n\tprivate _createWorker(): void {\n\n\t\tconst blob = new Blob([\n\t\t\t/* javascript */`\n\t\t\t// the initial timeout time\n\t\t\tlet timeoutTime =  ${(this._updateInterval * 1000).toFixed(1)};\n\t\t\t// onmessage callback\n\t\t\tself.onmessage = function(msg){\n\t\t\t\ttimeoutTime = parseInt(msg.data);\n\t\t\t};\n\t\t\t// the tick function which posts a message\n\t\t\t// and schedules a new tick\n\t\t\tfunction tick(){\n\t\t\t\tsetTimeout(tick, timeoutTime);\n\t\t\t\tself.postMessage('tick');\n\t\t\t}\n\t\t\t// call tick initially\n\t\t\ttick();\n\t\t\t`\n\t\t], { type: \"text/javascript\" });\n\t\tconst blobUrl = URL.createObjectURL(blob);\n\t\tconst worker = new Worker(blobUrl);\n\n\t\tworker.onmessage = this._callback.bind(this);\n\n\t\tthis._worker = worker;\n\t}\n\n\t/**\n\t * Create a timeout loop\n\t */\n\tprivate _createTimeout(): void {\n\t\tthis._timeout = setTimeout(() => {\n\t\t\tthis._createTimeout();\n\t\t\tthis._callback();\n\t\t}, this._updateInterval * 1000);\n\t}\n\n\t/**\n\t * Create the clock source.\n\t */\n\tprivate _createClock(): void {\n\t\tif (this._type === \"worker\") {\n\t\t\ttry {\n\t\t\t\tthis._createWorker();\n\t\t\t} catch (e) {\n\t\t\t\t// workers not supported, fallback to timeout\n\t\t\t\tthis._type = \"timeout\";\n\t\t\t\tthis._createClock();\n\t\t\t}\n\t\t} else if (this._type === \"timeout\") {\n\t\t\tthis._createTimeout();\n\t\t}\n\t}\n\n\t/**\n\t * Clean up the current clock source\n\t */\n\tprivate _disposeClock(): void {\n\t\tif (this._timeout) {\n\t\t\tclearTimeout(this._timeout);\n\t\t\tthis._timeout = 0;\n\t\t}\n\t\tif (this._worker) {\n\t\t\tthis._worker.terminate();\n\t\t\tthis._worker.onmessage = null;\n\t\t}\n\t}\n\n\t/**\n\t * The rate in seconds the ticker will update\n\t */\n\tget updateInterval(): Seconds {\n\t\treturn this._updateInterval;\n\t}\n\tset updateInterval(interval: Seconds) {\n\t\tthis._updateInterval = Math.max(interval, 128 / 44100);\n\t\tif (this._type === \"worker\") {\n\t\t\tthis._worker.postMessage(Math.max(interval * 1000, 1));\n\t\t}\n\t}\n\n\t/**\n\t * The type of the ticker, either a worker or a timeout\n\t */\n\tget type(): TickerClockSource {\n\t\treturn this._type;\n\t}\n\tset type(type: TickerClockSource) {\n\t\tthis._disposeClock();\n\t\tthis._type = type;\n\t\tthis._createClock();\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): void {\n\t\tthis._disposeClock();\n\t}\n}\n","import {\n\tisAnyAudioContext, isAnyAudioNode,\n\tisAnyAudioParam, isAnyOfflineAudioContext,\n} from \"standardized-audio-context\";\n\n/**\n * Test if the given value is an instanceof AudioParam\n */\nexport function isAudioParam(arg: any): arg is AudioParam {\n\treturn isAnyAudioParam(arg);\n}\n\n/**\n * Test if the given value is an instanceof AudioNode\n */\nexport function isAudioNode(arg: any): arg is AudioNode {\n\treturn isAnyAudioNode(arg);\n}\n\n/**\n * Test if the arg is instanceof an OfflineAudioContext\n */\nexport function isOfflineAudioContext(arg: any): arg is OfflineAudioContext {\n\treturn isAnyOfflineAudioContext(arg);\n}\n\n/**\n * Test if the arg is an instanceof AudioContext\n */\nexport function isAudioContext(arg: any): arg is AudioContext {\n\treturn isAnyAudioContext(arg);\n}\n\n/**\n * Test if the arg is instanceof an AudioBuffer\n */\nexport function isAudioBuffer(arg: any): arg is AudioBuffer {\n\treturn arg instanceof AudioBuffer;\n}\n","import { isAudioBuffer, isAudioNode, isAudioParam } from \"./AdvancedTypeCheck\";\nimport { isDefined, isObject, isUndef } from \"./TypeCheck\";\n\ntype BaseToneOptions = import(\"../Tone\").BaseToneOptions;\n\n/**\n * Some objects should not be merged\n */\nfunction noCopy(key: string, arg: any): boolean {\n\treturn key === \"value\" || isAudioParam(arg) || isAudioNode(arg) || isAudioBuffer(arg);\n}\n\n/**\n * Recursively merge an object\n * @param target the object to merge into\n * @param sources the source objects to merge\n */\nexport function deepMerge<T>(target: T): T;\nexport function deepMerge<T, U>(target: T, source1: U): T & U;\nexport function deepMerge<T, U, V>(target: T, source1: U, source2: V): T & U & V;\nexport function deepMerge<T, U, V, W>(target: T, source1: U, source2: V, source3: W): T & U & V & W;\nexport function deepMerge(target: any, ...sources: any[]): any {\n\tif (!sources.length) {\n\t\treturn target; \n\t}\n\tconst source = sources.shift();\n\n\tif (isObject(target) && isObject(source)) {\n\t\tfor (const key in source) {\n\t\t\tif (noCopy(key, source[key])) {\n\t\t\t\ttarget[key] = source[key];\n\t\t\t} else if (isObject(source[key])) {\n\t\t\t\tif (!target[key]) {\n\t\t\t\t\tObject.assign(target, { [key]: {} }); \n\t\t\t\t}\n\t\t\t\tdeepMerge(target[key], source[key] as any);\n\t\t\t} else {\n\t\t\t\tObject.assign(target, { [key]: source[key] as any });\n\t\t\t}\n\t\t}\n\t}\n\t// @ts-ignore\n\treturn deepMerge(target, ...sources);\n}\n\n/**\n * Returns true if the two arrays have the same value for each of the elements\n */\nexport function deepEquals(arrayA: number[] | string[], arrayB: number[] | string[]): boolean {\n\treturn arrayA.length === arrayB.length && arrayA.every((element, index) => arrayB[index] === element);\n}\n\n/**\n * Convert an args array into an object.\n */\nexport function optionsFromArguments<T extends object>(\n\tdefaults: T,\n\targsArray: IArguments,\n\tkeys: string[] = [],\n\tobjKey?: string,\n): T {\n\tconst opts: any = {};\n\tconst args = Array.from(argsArray);\n\t// if the first argument is an object and has an object key\n\tif (isObject(args[0]) && objKey && !Reflect.has(args[0], objKey)) {\n\t\t// if it's not part of the defaults\n\t\tconst partOfDefaults = Object.keys(args[0]).some(key => Reflect.has(defaults, key));\n\t\tif (!partOfDefaults) {\n\t\t\t// merge that key\n\t\t\tdeepMerge(opts, { [objKey]: args[0] });\n\t\t\t// remove the obj key from the keys\n\t\t\tkeys.splice(keys.indexOf(objKey), 1);\n\t\t\t// shift the first argument off\n\t\t\targs.shift();\n\t\t}\n\t}\n\tif (args.length === 1 && isObject(args[0])) {\n\t\tdeepMerge(opts, args[0]);\n\t} else {\n\t\tfor (let i = 0; i < keys.length; i++) {\n\t\t\tif (isDefined(args[i])) {\n\t\t\t\topts[keys[i]] = args[i];\n\t\t\t}\n\t\t}\n\t}\n\treturn deepMerge(defaults, opts);\n}\n\n/**\n * Return this instances default values by calling Constructor.getDefaults()\n */\nexport function getDefaultsFromInstance<T>(instance: T): BaseToneOptions {\n\ttype ToneClass = {\n\t\tconstructor: ToneClass;\n\t\tgetDefaults: () => BaseToneOptions;\n\t} & T;\n\n\treturn (instance as ToneClass).constructor.getDefaults();\n}\n\n/**\n * Returns the fallback if the given object is undefined.\n * Take an array of arguments and return a formatted options object.\n */\nexport function defaultArg<T>(given: T, fallback: T): T {\n\tif (isUndef(given)) {\n\t\treturn fallback;\n\t} else {\n\t\treturn given;\n\t}\n}\n\n/**\n * Remove all of the properties belonging to omit from obj.\n */\nexport function omitFromObject<T extends object, O extends string[]>(obj: T, omit: O): Omit<T, keyof O> {\n\tomit.forEach(prop => {\n\t\tif (Reflect.has(obj, prop)) {\n\t\t\tdelete obj[prop];\n\t\t}\n\t});\n\treturn obj;\n}\n","/**\n * Tone.js\n * @author Yotam Mann\n * @license http://opensource.org/licenses/MIT MIT License\n * @copyright 2014-2019 Yotam Mann\n */\nimport { version } from \"../version\";\nimport { theWindow } from \"./context/AudioContext\";\nimport { log } from \"./util/Debug\";\n\n//-------------------------------------\n// \tTONE\n//-------------------------------------\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface BaseToneOptions {}\n\n/**\n * @class  Tone is the base class of all other classes.\n * @constructor\n */\nexport abstract class Tone {\n\n\t/**\n\t * The version number semver\n\t */\n\tstatic version: string = version;\n\n\t/**\n\t * The name of the class\n\t */\n\tprotected abstract name: string;\n\n\t/**\n\t * Returns all of the default options belonging to the class.\n\t */\n\tstatic getDefaults(): BaseToneOptions {\n\t\treturn {};\n\t}\n\n\t//-------------------------------------\n\t// \tDEBUGGING\n\t//-------------------------------------\n\n\t/**\n\t * Set this debug flag to log all events that happen in this class.\n\t */\n\tdebug = false;\n\n\t/**\n\t * Prints the outputs to the console log for debugging purposes.\n\t * Prints the contents only if either the object has a property\n\t * called `debug` set to true, or a variable called TONE_DEBUG_CLASS\n\t * is set to the name of the class.\n\t * @example\n\t * import { Oscillator } from \"tone\";\n\t * const osc = new Oscillator();\n\t * // prints all logs originating from this oscillator\n\t * osc.debug = true;\n\t * // calls to start/stop will print in the console\n\t * osc.start();\n\t */\n\tprotected log(...args: any[]): void {\n\t\t// if the object is either set to debug = true\n\t\t// or if there is a string on the Tone.global.with the class name\n\t\tif (this.debug || (theWindow && this.toString() === theWindow.TONE_DEBUG_CLASS)) {\n\t\t\tlog(this, ...args);\n\t\t}\n\t}\n\n\t//-------------------------------------\n\t// \tDISPOSING\n\t//-------------------------------------\n\n\t/**\n\t * Indicates if the instance was disposed\n\t */\n\tprivate _wasDisposed = false;\n\n\t/**\n\t * disconnect and dispose.\n\t */\n\tdispose(): this {\n\t\tthis._wasDisposed = true;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Indicates if the instance was disposed. 'Disposing' an\n\t * instance means that all of the Web Audio nodes that were\n\t * created for the instance are disconnected and freed for garbage collection.\n\t */\n\tget disposed(): boolean {\n\t\treturn this._wasDisposed;\n\t}\n\n\t/**\n\t * Convert the class to a string\n\t * @example\n\t * import { Oscillator } from \"tone\";\n\t * const osc = new Oscillator();\n\t * console.log(osc.toString());\n\t */\n\ttoString(): string {\n\t\treturn this.name;\n\t}\n}\n","/**\n * The threshold for correctness for operators. Less than one sample even \n * at very high sampling rates (e.g. `1e-6 < 1 / 192000`).\n */\nconst EPSILON = 1e-6;\n\n/**\n * Test if A is greater than B\n */\nexport function GT(a: number, b: number): boolean {\n\treturn a > b + EPSILON;\n}\n\n/**\n * Test if A is greater than or equal to B\n */\nexport function GTE(a: number, b: number): boolean {\n\treturn GT(a, b) || EQ(a, b);\n}\n\n/**\n * Test if A is less than B\n */\nexport function LT(a: number, b: number): boolean {\n\treturn a + EPSILON < b;\n}\n\n/**\n * Test if A is less than B\n */\nexport function EQ(a: number, b: number): boolean {\n\treturn Math.abs(a - b) < EPSILON;\n}\n\n/**\n * Clamp the value within the given range\n */\nexport function clamp(value: number, min: number, max: number): number {\n\treturn Math.max(Math.min(value, max), min);\n}\n","import { Tone } from \"../Tone\";\nimport { Seconds } from \"../type/Units\";\nimport { optionsFromArguments } from \"./Defaults\";\nimport { assert } from \"./Debug\";\nimport { EQ, GT, GTE, LT } from \"./Math\";\n\ntype TimelineSearchParam = \"ticks\" | \"time\";\n\n/**\n * The options object for Timeline\n */\ninterface TimelineOptions {\n\tmemory: number;\n\tincreasing: boolean;\n}\n\n/**\n * An event must have a time number\n */\nexport interface TimelineEvent {\n\ttime: number;\n}\n\n/**\n * A Timeline class for scheduling and maintaining state\n * along a timeline. All events must have a \"time\" property.\n * Internally, events are stored in time order for fast\n * retrieval.\n */\nexport class Timeline<GenericEvent extends TimelineEvent> extends Tone {\n\n\treadonly name: string = \"Timeline\";\n\n\t/**\n\t * The memory of the timeline, i.e.\n\t * how many events in the past it will retain\n\t */\n\tmemory: number;\n\n\t/**\n\t * The array of scheduled timeline events\n\t */\n\tprotected _timeline: GenericEvent[] = [];\n\n\t/**\n\t * If the time value must always be greater than or equal to the last \n\t * element on the list. \n\t */\n\tincreasing: boolean;\n\n\t/**\n\t * @param memory The number of previous events that are retained.\n\t */\n\tconstructor(memory?: number);\n\tconstructor(options?: Partial<TimelineOptions>);\n\tconstructor() {\n\t\tsuper();\n\t\tconst options = optionsFromArguments(Timeline.getDefaults(), arguments, [\"memory\"]);\n\n\t\tthis.memory = options.memory;\n\t\tthis.increasing = options.increasing;\n\t}\n\n\tstatic getDefaults(): TimelineOptions {\n\t\treturn {\n\t\t\tmemory: Infinity,\n\t\t\tincreasing: false,\n\t\t};\n\t}\n\n\t/**\n\t * The number of items in the timeline.\n\t */\n\tget length(): number {\n\t\treturn this._timeline.length;\n\t}\n\n\t/**\n\t * Insert an event object onto the timeline. Events must have a \"time\" attribute.\n\t * @param event  The event object to insert into the timeline.\n\t */\n\tadd(event: GenericEvent): this {\n\t\t// the event needs to have a time attribute\n\t\tassert(Reflect.has(event, \"time\"), \"Timeline: events must have a time attribute\");\n\t\tevent.time = event.time.valueOf();\n\t\tif (this.increasing && this.length) {\n\t\t\tconst lastValue = this._timeline[this.length - 1] as GenericEvent;\n\t\t\tassert(GTE(event.time, lastValue.time), \"The time must be greater than or equal to the last scheduled time\");\n\t\t\tthis._timeline.push(event);\n\t\t} else {\n\t\t\tconst index = this._search(event.time);\n\t\t\tthis._timeline.splice(index + 1, 0, event);\n\t\t}\n\t\t// if the length is more than the memory, remove the previous ones\n\t\tif (this.length > this.memory) {\n\t\t\tconst diff = this.length - this.memory;\n\t\t\tthis._timeline.splice(0, diff);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Remove an event from the timeline.\n\t * @param  {Object}  event  The event object to remove from the list.\n\t * @returns {Timeline} this\n\t */\n\tremove(event: GenericEvent): this {\n\t\tconst index = this._timeline.indexOf(event);\n\t\tif (index !== -1) {\n\t\t\tthis._timeline.splice(index, 1);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the nearest event whose time is less than or equal to the given time.\n\t * @param  time  The time to query.\n\t */\n\tget(time: number, param: TimelineSearchParam = \"time\"): GenericEvent | null {\n\t\tconst index = this._search(time, param);\n\t\tif (index !== -1) {\n\t\t\treturn this._timeline[index];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * Return the first event in the timeline without removing it\n\t * @returns {Object} The first event object\n\t */\n\tpeek(): GenericEvent | undefined {\n\t\treturn this._timeline[0];\n\t}\n\n\t/**\n\t * Return the first event in the timeline and remove it\n\t */\n\tshift(): GenericEvent | undefined {\n\t\treturn this._timeline.shift();\n\t}\n\n\t/**\n\t * Get the event which is scheduled after the given time.\n\t * @param  time  The time to query.\n\t */\n\tgetAfter(time: number, param: TimelineSearchParam = \"time\"): GenericEvent | null {\n\t\tconst index = this._search(time, param);\n\t\tif (index + 1 < this._timeline.length) {\n\t\t\treturn this._timeline[index + 1];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * Get the event before the event at the given time.\n\t * @param  time  The time to query.\n\t */\n\tgetBefore(time: number): GenericEvent | null {\n\t\tconst len = this._timeline.length;\n\t\t// if it's after the last item, return the last item\n\t\tif (len > 0 && this._timeline[len - 1].time < time) {\n\t\t\treturn this._timeline[len - 1];\n\t\t}\n\t\tconst index = this._search(time);\n\t\tif (index - 1 >= 0) {\n\t\t\treturn this._timeline[index - 1];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * Cancel events at and after the given time\n\t * @param  after  The time to query.\n\t */\n\tcancel(after: number): this {\n\t\tif (this._timeline.length > 1) {\n\t\t\tlet index = this._search(after);\n\t\t\tif (index >= 0) {\n\t\t\t\tif (EQ(this._timeline[index].time, after)) {\n\t\t\t\t\t// get the first item with that time\n\t\t\t\t\tfor (let i = index; i >= 0; i--) {\n\t\t\t\t\t\tif (EQ(this._timeline[i].time, after)) {\n\t\t\t\t\t\t\tindex = i;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis._timeline = this._timeline.slice(0, index);\n\t\t\t\t} else {\n\t\t\t\t\tthis._timeline = this._timeline.slice(0, index + 1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._timeline = [];\n\t\t\t}\n\t\t} else if (this._timeline.length === 1) {\n\t\t\t// the first item's time\n\t\t\tif (GTE(this._timeline[0].time, after)) {\n\t\t\t\tthis._timeline = [];\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Cancel events before or equal to the given time.\n\t * @param  time  The time to cancel before.\n\t */\n\tcancelBefore(time: number): this {\n\t\tconst index = this._search(time);\n\t\tif (index >= 0) {\n\t\t\tthis._timeline = this._timeline.slice(index + 1);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the previous event if there is one. null otherwise\n\t * @param  event The event to find the previous one of\n\t * @return The event right before the given event\n\t */\n\tpreviousEvent(event: GenericEvent): GenericEvent | null {\n\t\tconst index = this._timeline.indexOf(event);\n\t\tif (index > 0) {\n\t\t\treturn this._timeline[index - 1];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * Does a binary search on the timeline array and returns the\n\t * nearest event index whose time is after or equal to the given time.\n\t * If a time is searched before the first index in the timeline, -1 is returned.\n\t * If the time is after the end, the index of the last item is returned.\n\t */\n\tprotected _search(time: number, param: TimelineSearchParam = \"time\"): number {\n\t\tif (this._timeline.length === 0) {\n\t\t\treturn -1;\n\t\t}\n\t\tlet beginning = 0;\n\t\tconst len = this._timeline.length;\n\t\tlet end = len;\n\t\tif (len > 0 && this._timeline[len - 1][param] <= time) {\n\t\t\treturn len - 1;\n\t\t}\n\t\twhile (beginning < end) {\n\t\t\t// calculate the midpoint for roughly equal partition\n\t\t\tlet midPoint = Math.floor(beginning + (end - beginning) / 2);\n\t\t\tconst event = this._timeline[midPoint];\n\t\t\tconst nextEvent = this._timeline[midPoint + 1];\n\t\t\tif (EQ(event[param], time)) {\n\t\t\t\t// choose the last one that has the same time\n\t\t\t\tfor (let i = midPoint; i < this._timeline.length; i++) {\n\t\t\t\t\tconst testEvent = this._timeline[i];\n\t\t\t\t\tif (EQ(testEvent[param], time)) {\n\t\t\t\t\t\tmidPoint = i;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn midPoint;\n\t\t\t} else if (LT(event[param], time) && GT(nextEvent[param], time)) {\n\t\t\t\treturn midPoint;\n\t\t\t} else if (GT(event[param], time)) {\n\t\t\t\t// search lower\n\t\t\t\tend = midPoint;\n\t\t\t} else {\n\t\t\t\t// search upper\n\t\t\t\tbeginning = midPoint + 1;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\n\t/**\n\t * Internal iterator. Applies extra safety checks for\n\t * removing items from the array.\n\t */\n\tprivate _iterate(\n\t\tcallback: (event: GenericEvent) => void,\n\t\tlowerBound = 0, upperBound = this._timeline.length - 1,\n\t): void {\n\t\tthis._timeline.slice(lowerBound, upperBound + 1).forEach(callback);\n\t}\n\n\t/**\n\t * Iterate over everything in the array\n\t * @param  callback The callback to invoke with every item\n\t */\n\tforEach(callback: (event: GenericEvent) => void): this {\n\t\tthis._iterate(callback);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Iterate over everything in the array at or before the given time.\n\t * @param  time The time to check if items are before\n\t * @param  callback The callback to invoke with every item\n\t */\n\tforEachBefore(time: Seconds, callback: (event: GenericEvent) => void): this {\n\t\t// iterate over the items in reverse so that removing an item doesn't break things\n\t\tconst upperBound = this._search(time);\n\t\tif (upperBound !== -1) {\n\t\t\tthis._iterate(callback, 0, upperBound);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Iterate over everything in the array after the given time.\n\t * @param  time The time to check if items are before\n\t * @param  callback The callback to invoke with every item\n\t */\n\tforEachAfter(time: Seconds, callback: (event: GenericEvent) => void): this {\n\t\t// iterate over the items in reverse so that removing an item doesn't break things\n\t\tconst lowerBound = this._search(time);\n\t\tthis._iterate(callback, lowerBound + 1);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Iterate over everything in the array between the startTime and endTime.\n\t * The timerange is inclusive of the startTime, but exclusive of the endTime.\n\t * range = [startTime, endTime).\n\t * @param  startTime The time to check if items are before\n\t * @param  endTime The end of the test interval.\n\t * @param  callback The callback to invoke with every item\n\t */\n\tforEachBetween(startTime: number, endTime: number, callback: (event: GenericEvent) => void): this {\n\t\tlet lowerBound = this._search(startTime);\n\t\tlet upperBound = this._search(endTime);\n\t\tif (lowerBound !== -1 && upperBound !== -1) {\n\t\t\tif (this._timeline[lowerBound].time !== startTime) {\n\t\t\t\tlowerBound += 1;\n\t\t\t}\n\t\t\t// exclusive of the end time\n\t\t\tif (this._timeline[upperBound].time === endTime) {\n\t\t\t\tupperBound -= 1;\n\t\t\t}\n\t\t\tthis._iterate(callback, lowerBound, upperBound);\n\t\t} else if (lowerBound === -1) {\n\t\t\tthis._iterate(callback, 0, upperBound);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Iterate over everything in the array at or after the given time. Similar to\n\t * forEachAfter, but includes the item(s) at the given time.\n\t * @param  time The time to check if items are before\n\t * @param  callback The callback to invoke with every item\n\t */\n\tforEachFrom(time: number, callback: (event: GenericEvent) => void): this {\n\t\t// iterate over the items in reverse so that removing an item doesn't break things\n\t\tlet lowerBound = this._search(time);\n\t\t// work backwards until the event time is less than time\n\t\twhile (lowerBound >= 0 && this._timeline[lowerBound].time >= time) {\n\t\t\tlowerBound--;\n\t\t}\n\t\tthis._iterate(callback, lowerBound + 1);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Iterate over everything in the array at the given time\n\t * @param  time The time to check if items are before\n\t * @param  callback The callback to invoke with every item\n\t */\n\tforEachAtTime(time: number, callback: (event: GenericEvent) => void): this {\n\t\t// iterate over the items in reverse so that removing an item doesn't break things\n\t\tconst upperBound = this._search(time);\n\t\tif (upperBound !== -1 && EQ(this._timeline[upperBound].time, time)) {\n\t\t\tlet lowerBound = upperBound;\n\t\t\tfor (let i = upperBound; i >= 0; i--) {\n\t\t\t\tif (EQ(this._timeline[i].time, time)) {\n\t\t\t\t\tlowerBound = i;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._iterate(event => {\n\t\t\t\tcallback(event);\n\t\t\t}, lowerBound, upperBound);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._timeline = [];\n\t\treturn this;\n\t}\n}\n","//-------------------------------------\n// INITIALIZING NEW CONTEXT\n//-------------------------------------\n\ntype Context = import(\"./Context\").Context;\n\n/**\n * Array of callbacks to invoke when a new context is created\n */\nconst notifyNewContext: Array<(ctx: Context) => void> = [];\n\n/**\n * Used internally to setup a new Context\n */\nexport function onContextInit(cb: (ctx: Context) => void): void {\n\tnotifyNewContext.push(cb);\n}\n\n/**\n * Invoke any classes which need to also be initialized when a new context is created.\n */\nexport function initializeContext(ctx: Context): void {\n\t// add any additional modules\n\tnotifyNewContext.forEach(cb => cb(ctx));\n}\n\n/**\n * Array of callbacks to invoke when a new context is created\n */\nconst notifyCloseContext: Array<(ctx: Context) => void> = [];\n\n/**\n * Used internally to tear down a Context\n */\nexport function onContextClose(cb: (ctx: Context) => void): void {\n\tnotifyCloseContext.push(cb);\n}\n\nexport function closeContext(ctx: Context): void {\n\t// add any additional modules\n\tnotifyCloseContext.forEach(cb => cb(ctx));\n}\n","import { Tone } from \"../Tone\";\nimport { isUndef } from \"./TypeCheck\";\n\nexport interface EmitterEventObject {\n\t[event: string]: Array<(...args: any[]) => void>;\n}\n\n/**\n * Emitter gives classes which extend it\n * the ability to listen for and emit events.\n * Inspiration and reference from Jerome Etienne's [MicroEvent](https://github.com/jeromeetienne/microevent.js).\n * MIT (c) 2011 Jerome Etienne.\n */\nexport class Emitter<EventType extends string = string> extends Tone {\n\n\treadonly name: string = \"Emitter\";\n\n\t/**\n\t * Private container for the events\n\t */\n\tprivate _events?: EmitterEventObject;\n\n\t/**\n\t * Bind a callback to a specific event.\n\t * @param  event     The name of the event to listen for.\n\t * @param  callback  The callback to invoke when the event is emitted\n\t */\n\ton(event: EventType, callback: (...args: any[]) => void): this {\n\t\t// split the event\n\t\tconst events = event.split(/\\W+/);\n\t\tevents.forEach(eventName => {\n\t\t\tif (isUndef(this._events)) {\n\t\t\t\tthis._events = {};\n\t\t\t}\n\t\t\tif (!this._events.hasOwnProperty(eventName)) {\n\t\t\t\tthis._events[eventName] = [];\n\t\t\t}\n\t\t\tthis._events[eventName].push(callback);\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Bind a callback which is only invoked once\n\t * @param  event     The name of the event to listen for.\n\t * @param  callback  The callback to invoke when the event is emitted\n\t */\n\tonce(event: EventType, callback: (...args: any[]) => void): this {\n\t\tconst boundCallback = (...args: any[]) => {\n\t\t\t// invoke the callback\n\t\t\tcallback(...args);\n\t\t\t// remove the event\n\t\t\tthis.off(event, boundCallback);\n\t\t};\n\t\tthis.on(event, boundCallback);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Remove the event listener.\n\t * @param  event     The event to stop listening to.\n\t * @param  callback  The callback which was bound to the event with Emitter.on.\n\t *                   If no callback is given, all callbacks events are removed.\n\t */\n\toff(event: EventType, callback?: (...args: any[]) => void): this {\n\t\tconst events = event.split(/\\W+/);\n\t\tevents.forEach(eventName => {\n\t\t\tif (isUndef(this._events)) {\n\t\t\t\tthis._events = {};\n\t\t\t}\n\t\t\tif (this._events.hasOwnProperty(event)) {\n\t\t\t\tif (isUndef(callback)) {\n\t\t\t\t\tthis._events[event] = [];\n\t\t\t\t} else {\n\t\t\t\t\tconst eventList = this._events[event];\n\t\t\t\t\tfor (let i = 0; i < eventList.length; i++) {\n\t\t\t\t\t\tif (eventList[i] === callback) {\n\t\t\t\t\t\t\teventList.splice(i, 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Invoke all of the callbacks bound to the event\n\t * with any arguments passed in.\n\t * @param  event  The name of the event.\n\t * @param args The arguments to pass to the functions listening.\n\t */\n\temit(event, ...args: any[]): this {\n\t\tif (this._events) {\n\t\t\tif (this._events.hasOwnProperty(event)) {\n\t\t\t\tconst eventList = this._events[event].slice(0);\n\t\t\t\tfor (let i = 0, len = eventList.length; i < len; i++) {\n\t\t\t\t\teventList[i].apply(this, args);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add Emitter functions (on/off/emit) to the object\n\t */\n\tstatic mixin(constr: any): void {\n\t\t// instance._events = {};\n\t\t[\"on\", \"once\", \"off\", \"emit\"].forEach(name => {\n\t\t\tconst property = Object.getOwnPropertyDescriptor(Emitter.prototype, name) as PropertyDescriptor;\n\t\t\tObject.defineProperty(constr.prototype, name, property);\n\t\t});\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._events = undefined;\n\t\treturn this;\n\t}\n}\n","import { Seconds } from \"../type/Units\";\nimport { Emitter } from \"../util/Emitter\";\nimport { AnyAudioContext } from \"./AudioContext\";\n\ntype Draw = import(\"../util/Draw\").Draw;\ntype Destination = import(\"./Destination\").Destination;\ntype Transport = import(\"../clock/Transport\").Transport;\ntype Listener = import(\"./Listener\").Listener;\ntype BaseAudioContextSubset = import(\"./Context\").BaseAudioContextSubset;\n\nexport type ContextLatencyHint = AudioContextLatencyCategory | \"fastest\";\n\nexport abstract class BaseContext extends Emitter<\"statechange\" | \"tick\"> implements BaseAudioContextSubset {\n\n\t//---------------------------\n\t// BASE AUDIO CONTEXT METHODS\n\t//---------------------------\n\tabstract createAnalyser(): AnalyserNode\n\n\tabstract createOscillator(): OscillatorNode\n\n\tabstract createBufferSource(): AudioBufferSourceNode\n\n\tabstract createBiquadFilter(): BiquadFilterNode\n\n\tabstract createBuffer(_numberOfChannels: number, _length: number, _sampleRate: number): AudioBuffer\n\n\tabstract createChannelMerger(_numberOfInputs?: number | undefined): ChannelMergerNode\n\n\tabstract createChannelSplitter(_numberOfOutputs?: number | undefined): ChannelSplitterNode\n\n\tabstract createConstantSource(): ConstantSourceNode\n\n\tabstract createConvolver(): ConvolverNode\n\n\tabstract createDelay(_maxDelayTime?: number | undefined): DelayNode\n\n\tabstract createDynamicsCompressor(): DynamicsCompressorNode\n\n\tabstract createGain(): GainNode\n\n\tabstract createIIRFilter(_feedForward: number[] | Float32Array, _feedback: number[] | Float32Array): IIRFilterNode\n\n\tabstract createPanner(): PannerNode\n\n\tabstract createPeriodicWave(\n\t\t_real: number[] | Float32Array,\n\t\t_imag: number[] | Float32Array,\n\t\t_constraints?: PeriodicWaveConstraints | undefined,\n\t): PeriodicWave\n\n\tabstract createStereoPanner(): StereoPannerNode\n\n\tabstract createWaveShaper(): WaveShaperNode\n\n\tabstract createMediaStreamSource(_stream: MediaStream): MediaStreamAudioSourceNode\n\n\tabstract decodeAudioData(_audioData: ArrayBuffer): Promise<AudioBuffer>\n\n\t//---------------------------\n\t// TONE AUDIO CONTEXT METHODS\n\t//---------------------------\n\n\tabstract createAudioWorkletNode(\n\t\t_name: string, \n\t\t_options?: Partial<AudioWorkletNodeOptions>\n\t): AudioWorkletNode\n\n\tabstract get rawContext(): AnyAudioContext\n\n\tabstract async addAudioWorkletModule(_url: string, _name: string): Promise<void>\n\n\tabstract lookAhead: number;\n\n\tabstract latencyHint: ContextLatencyHint | Seconds;\n\n\tabstract resume(): Promise<void>\n\n\tabstract setTimeout(_fn: (...args: any[]) => void, _timeout: Seconds): number\n\n\tabstract clearTimeout(_id: number): this\n\n\tabstract setInterval(_fn: (...args: any[]) => void, _interval: Seconds): number\n\n\tabstract clearInterval(_id: number): this\n\n\tabstract getConstant(_val: number): AudioBufferSourceNode\n\n\tabstract get currentTime(): Seconds\n\n\tabstract get state(): AudioContextState\n\n\tabstract get sampleRate(): number\n\n\tabstract get listener(): Listener\n\n\tabstract get transport(): Transport\n\n\tabstract get draw(): Draw\n\n\tabstract get destination(): Destination\n\n\tabstract now(): Seconds\n\n\tabstract immediate(): Seconds\n\n\treadonly isOffline: boolean = false;\n}\n","import { Ticker, TickerClockSource } from \"../clock/Ticker\";\nimport { Seconds } from \"../type/Units\";\nimport { isAudioContext } from \"../util/AdvancedTypeCheck\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Omit } from \"../util/Interface\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isDefined, isString } from \"../util/TypeCheck\";\nimport { AnyAudioContext, createAudioContext, createAudioWorkletNode } from \"./AudioContext\";\nimport { closeContext, initializeContext } from \"./ContextInitialization\";\nimport { BaseContext, ContextLatencyHint } from \"./BaseContext\";\nimport { assert } from \"../util/Debug\";\n\ntype Transport = import(\"../clock/Transport\").Transport;\ntype Destination = import(\"./Destination\").Destination;\ntype Listener = import(\"./Listener\").Listener;\ntype Draw = import(\"../util/Draw\").Draw;\n\n// these are either not used in Tone.js or deprecated and not implemented.\nexport type ExcludedFromBaseAudioContext = \"onstatechange\" | \"addEventListener\" |\n\"removeEventListener\" | \"listener\" | \"dispatchEvent\" | \"audioWorklet\" | \"destination\" | \"createScriptProcessor\";\n// \"createMediaStreamSource\" | \"createMediaElementSource\" | \"createMediaStreamTrackSource\" |\n// \"baseLatency\" | \"suspend\" |\n\n// the subset of the BaseAudioContext which Tone.Context implements.\nexport type BaseAudioContextSubset = Omit<BaseAudioContext, ExcludedFromBaseAudioContext>;\n\nexport interface ContextOptions {\n\tclockSource: TickerClockSource;\n\tlatencyHint: ContextLatencyHint;\n\tlookAhead: Seconds;\n\tupdateInterval: Seconds;\n\tcontext: AnyAudioContext;\n}\n\nexport interface ContextTimeoutEvent {\n\tcallback: (...args: any[]) => void;\n\tid: number;\n\ttime: Seconds;\n}\n\n/**\n * Wrapper around the native AudioContext.\n * @category Core\n */\nexport class Context extends BaseContext {\n\n\treadonly name: string = \"Context\";\n\n\t/**\n\t * The amount of time into the future events are scheduled. Giving Web Audio\n\t * a short amount of time into the future to schedule events can reduce clicks and\n\t * improve performance. This value can be set to 0 to get the lowest latency.\n\t */\n\tlookAhead: Seconds;\n\n\t/**\n\t * private reference to the BaseAudioContext\n\t */\n\tprotected readonly _context: AnyAudioContext;\n\n\t/**\n\t * A reliable callback method\n\t */\n\tprivate readonly _ticker: Ticker;\n\n\t/**\n\t * The default latency hint\n\t */\n\tprivate _latencyHint: ContextLatencyHint | Seconds;\n\n\t/**\n\t * An object containing all of the constants AudioBufferSourceNodes\n\t */\n\tprivate _constants = new Map<number, AudioBufferSourceNode>();\n\n\t/**\n\t * All of the setTimeout events.\n\t */\n\tprivate _timeouts: Timeline<ContextTimeoutEvent> = new Timeline();\n\n\t/**\n\t * The timeout id counter\n\t */\n\tprivate _timeoutIds = 0;\n\n\t/**\n\t * A reference the Transport singleton belonging to this context\n\t */\n\tprivate _transport!: Transport;\n\n\t/**\n\t * A reference the Listener singleton belonging to this context\n\t */\n\tprivate _listener!: Listener;\n\t\n\t/**\n\t * A reference the Destination singleton belonging to this context\n\t */\n\tprivate _destination!: Destination;\n\n\t/**\n\t * A reference the Transport singleton belonging to this context\n\t */\n\tprivate _draw!: Draw;\n\n\t/**\n\t * Private indicator if the context has been initialized\n\t */\n\tprivate _initialized = false;\n\n\t/**\n\t * Indicates if the context is an OfflineAudioContext or an AudioContext\n\t */\n\treadonly isOffline: boolean = false;\n\n\tconstructor(context?: AnyAudioContext);\n\tconstructor(options?: Partial<ContextOptions>);\n\tconstructor() {\n\t\tsuper();\n\t\tconst options = optionsFromArguments(Context.getDefaults(), arguments, [\"context\"]);\n\n\t\tif (options.context) {\n\t\t\tthis._context = options.context;\n\t\t} else {\n\t\t\tthis._context = createAudioContext();\n\t\t}\n\t\tthis._latencyHint = options.latencyHint;\n\t\tthis.lookAhead = options.lookAhead;\n\n\t\tthis._ticker = new Ticker(this.emit.bind(this, \"tick\"), options.clockSource, options.updateInterval);\n\t\tthis.on(\"tick\", this._timeoutLoop.bind(this));\n\n\t\t// fwd events from the context\n\t\tthis._context.onstatechange = () => {\n\t\t\tthis.emit(\"statechange\", this.state);\n\t\t};\n\t}\n\n\tstatic getDefaults(): ContextOptions {\n\t\treturn {\n\t\t\tclockSource: \"worker\",\n\t\t\tlatencyHint: \"interactive\",\n\t\t\tlookAhead: 0.1,\n\t\t\tupdateInterval: 0.05,\n\t\t} as ContextOptions;\n\t}\n\n\t/**\n\t * Finish setting up the context. **You usually do not need to do this manually.**\n\t */\n\tprivate initialize(): this {\n\t\tif (!this._initialized) {\n\t\t\t// add any additional modules\n\t\t\tinitializeContext(this);\n\t\t\tthis._initialized = true;\n\t\t}\n\t\treturn this;\n\t}\n\n\t//---------------------------\n\t// BASE AUDIO CONTEXT METHODS\n\t//---------------------------\n\n\tcreateAnalyser(): AnalyserNode {\n\t\treturn this._context.createAnalyser();\n\t}\n\tcreateOscillator(): OscillatorNode {\n\t\treturn this._context.createOscillator();\n\t}\n\tcreateBufferSource(): AudioBufferSourceNode {\n\t\treturn this._context.createBufferSource();\n\t}\n\tcreateBiquadFilter(): BiquadFilterNode {\n\t\treturn this._context.createBiquadFilter();\n\t}\n\tcreateBuffer(numberOfChannels: number, length: number, sampleRate: number): AudioBuffer {\n\t\treturn this._context.createBuffer(numberOfChannels, length, sampleRate);\n\t}\n\tcreateChannelMerger(numberOfInputs?: number | undefined): ChannelMergerNode {\n\t\treturn this._context.createChannelMerger(numberOfInputs);\n\t}\n\tcreateChannelSplitter(numberOfOutputs?: number | undefined): ChannelSplitterNode {\n\t\treturn this._context.createChannelSplitter(numberOfOutputs);\n\t}\n\tcreateConstantSource(): ConstantSourceNode {\n\t\treturn this._context.createConstantSource();\n\t}\n\tcreateConvolver(): ConvolverNode {\n\t\treturn this._context.createConvolver();\n\t}\n\tcreateDelay(maxDelayTime?: number | undefined): DelayNode {\n\t\treturn this._context.createDelay(maxDelayTime);\n\t}\n\tcreateDynamicsCompressor(): DynamicsCompressorNode {\n\t\treturn this._context.createDynamicsCompressor();\n\t}\n\tcreateGain(): GainNode {\n\t\treturn this._context.createGain();\n\t}\n\tcreateIIRFilter(feedForward: number[] | Float32Array, feedback: number[] | Float32Array): IIRFilterNode {\n\t\t// @ts-ignore\n\t\treturn this._context.createIIRFilter(feedForward, feedback);\n\t}\n\tcreatePanner(): PannerNode {\n\t\treturn this._context.createPanner();\n\t}\n\tcreatePeriodicWave(\n\t\treal: number[] | Float32Array,\n\t\timag: number[] | Float32Array,\n\t\tconstraints?: PeriodicWaveConstraints | undefined,\n\t): PeriodicWave {\n\t\treturn this._context.createPeriodicWave(real, imag, constraints);\n\t}\n\tcreateStereoPanner(): StereoPannerNode {\n\t\treturn this._context.createStereoPanner();\n\t}\n\tcreateWaveShaper(): WaveShaperNode {\n\t\treturn this._context.createWaveShaper();\n\t}\n\tcreateMediaStreamSource(stream: MediaStream): MediaStreamAudioSourceNode {\n\t\tif (isAudioContext(this._context)) {\n\t\t\treturn this._context.createMediaStreamSource(stream);\n\t\t} else {\n\t\t\tthrow new Error(\"Only available on online audio context\");\n\t\t}\n\t}\n\tdecodeAudioData(audioData: ArrayBuffer): Promise<AudioBuffer> {\n\t\treturn this._context.decodeAudioData(audioData);\n\t}\n\n\t/**\n\t * The current time in seconds of the AudioContext.\n\t */\n\tget currentTime(): Seconds {\n\t\treturn this._context.currentTime;\n\t}\n\t/**\n\t * The current time in seconds of the AudioContext.\n\t */\n\tget state(): AudioContextState {\n\t\treturn this._context.state;\n\t}\n\t/**\n\t * The current time in seconds of the AudioContext.\n\t */\n\tget sampleRate(): number {\n\t\treturn this._context.sampleRate;\n\t}\n\n\t/**\n\t * The listener\n\t */\n\tget listener(): Listener {\n\t\tthis.initialize();\n\t\treturn this._listener;\n\t}\n\tset listener(l) {\n\t\tassert(!this._initialized, \"The listener cannot be set after initialization.\");\n\t\tthis._listener = l;\n\t}\n\n\t/**\n\t * There is only one Transport per Context. It is created on initialization.\n\t */\n\tget transport(): Transport {\n\t\tthis.initialize();\n\t\treturn this._transport;\n\t}\n\tset transport(t: Transport) {\n\t\tassert(!this._initialized, \"The transport cannot be set after initialization.\");\n\t\tthis._transport = t;\n\t}\n\n\t/**\n\t * This is the Draw object for the context which is useful for synchronizing the draw frame with the Tone.js clock.\n\t */\n\tget draw(): Draw {\n\t\tthis.initialize();\n\t\treturn this._draw;\n\t}\n\tset draw(d) {\n\t\tassert(!this._initialized, \"Draw cannot be set after initialization.\");\n\t\tthis._draw = d;\n\t}\n\n\t/**\n\t * A reference to the Context's destination node.\n\t */\n\tget destination(): Destination {\n\t\tthis.initialize();\n\t\treturn this._destination;\n\t}\n\tset destination(d: Destination) {\n\t\tassert(!this._initialized, \"The destination cannot be set after initialization.\");\n\t\tthis._destination = d;\n\t}\n\n\t//--------------------------------------------\n\t// AUDIO WORKLET\n\t//--------------------------------------------\n\n\t/**\n\t * Maps a module name to promise of the addModule method\n\t */\n\tprivate _workletModules: Map<string, Promise<void>> = new Map()\n\n\t/**\n\t * Create an audio worklet node from a name and options. The module\n\t * must first be loaded using [[addAudioWorkletModule]]. \n\t */\n\tcreateAudioWorkletNode(\n\t\tname: string, \n\t\toptions?: Partial<AudioWorkletNodeOptions>\n\t): AudioWorkletNode {\n\t\treturn createAudioWorkletNode(this.rawContext, name, options);\n\t}\n\t\n\t/**\n\t * Add an AudioWorkletProcessor module\n\t * @param url The url of the module\n\t * @param name The name of the module\n\t */\n\tasync addAudioWorkletModule(url: string, name: string): Promise<void> {\n\t\tassert(isDefined(this.rawContext.audioWorklet), \"AudioWorkletNode is only available in a secure context (https or localhost)\");\n\t\tif (!this._workletModules.has(name)) {\n\t\t\tthis._workletModules.set(name, this.rawContext.audioWorklet.addModule(url));\n\t\t}\n\t\tawait this._workletModules.get(name);\n\t}\n\n\t/**\n\t * Returns a promise which resolves when all of the worklets have been loaded on this context\n\t */\n\tprotected async workletsAreReady(): Promise<void> {\n\t\tconst promises: Promise<void>[] = [];\n\t\tthis._workletModules.forEach(promise => promises.push(promise));\n\t\tawait Promise.all(promises);\n\t}\n\n\t//---------------------------\n\t// TICKER\n\t//---------------------------\n\n\t/**\n\t * How often the interval callback is invoked.\n\t * This number corresponds to how responsive the scheduling\n\t * can be. context.updateInterval + context.lookAhead gives you the\n\t * total latency between scheduling an event and hearing it.\n\t */\n\tget updateInterval(): Seconds {\n\t\treturn this._ticker.updateInterval;\n\t}\n\tset updateInterval(interval: Seconds) {\n\t\tthis._ticker.updateInterval = interval;\n\t}\n\n\t/**\n\t * What the source of the clock is, either \"worker\" (default),\n\t * \"timeout\", or \"offline\" (none).\n\t */\n\tget clockSource(): TickerClockSource {\n\t\treturn this._ticker.type;\n\t}\n\tset clockSource(type: TickerClockSource) {\n\t\tthis._ticker.type = type;\n\t}\n\n\t/**\n\t * The type of playback, which affects tradeoffs between audio\n\t * output latency and responsiveness.\n\t * In addition to setting the value in seconds, the latencyHint also\n\t * accepts the strings \"interactive\" (prioritizes low latency),\n\t * \"playback\" (prioritizes sustained playback), \"balanced\" (balances\n\t * latency and performance), and \"fastest\" (lowest latency, might glitch more often).\n\t * @example\n\t * import * as Tone from \"tone\";\n\t * // set the latencyHint to prioritize smooth playback at the expensive of latency\n\t * Tone.context.latencyHint = \"playback\";\n\t */\n\tget latencyHint(): ContextLatencyHint | Seconds {\n\t\treturn this._latencyHint;\n\t}\n\tset latencyHint(hint: ContextLatencyHint | Seconds) {\n\t\tlet lookAheadValue = 0;\n\t\tthis._latencyHint = hint;\n\t\tif (isString(hint)) {\n\t\t\tswitch (hint) {\n\t\t\t\tcase \"interactive\":\n\t\t\t\t\tlookAheadValue = 0.1;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"playback\":\n\t\t\t\t\tlookAheadValue = 0.8;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"balanced\":\n\t\t\t\t\tlookAheadValue = 0.25;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"fastest\":\n\t\t\t\t\tlookAheadValue = 0.01;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tthis.lookAhead = lookAheadValue;\n\t\tthis.updateInterval = lookAheadValue / 2;\n\t}\n\n\t/**\n\t * The unwrapped AudioContext.\n\t */\n\tget rawContext(): AnyAudioContext {\n\t\treturn this._context;\n\t}\n\n\t/**\n\t * The current audio context time plus a short [[lookAhead]].\n\t */\n\tnow(): Seconds {\n\t\treturn this._context.currentTime + this.lookAhead;\n\t}\n\n\t/**\n\t * The current audio context time without the [[lookAhead]]. \n\t * In most cases it is better to use [[now]] instead of [[immediate]] since\n\t * with [[now]] the [[lookAhead]] is applied equally to _all_ components including internal components,\n\t * to making sure that everything is scheduled in sync. Mixing [[now]] and [[immediate]]\n\t * can cause some timing issues. If no lookAhead is desired, you can set the [[lookAhead]] to `0`.\n\t */\n\timmediate(): Seconds {\n\t\treturn this._context.currentTime;\n\t}\n\n\t/**\n\t * Starts the audio context from a suspended state. This is required\n\t * to initially start the AudioContext.\n\t */\n\tresume(): Promise<void> {\n\t\tif (this._context.state === \"suspended\" && isAudioContext(this._context)) {\n\t\t\treturn this._context.resume();\n\t\t} else {\n\t\t\treturn Promise.resolve();\n\t\t}\n\t}\n\n\t/**\n\t * Promise which is invoked when the context is running.\n\t * Tries to resume the context if it's not started.\n\t */\n\tasync close(): Promise<void> {\n\t\tif (isAudioContext(this._context)) {\n\t\t\tawait this._context.close();\n\t\t}\n\t\tif (this._initialized) {\n\t\t\tcloseContext(this);\n\t\t}\n\t}\n\n\t/**\n\t * Generate a looped buffer at some constant value.\n\t */\n\tgetConstant(val: number): AudioBufferSourceNode {\n\t\tif (this._constants.has(val)) {\n\t\t\treturn this._constants.get(val) as AudioBufferSourceNode;\n\t\t} else {\n\t\t\tconst buffer = this._context.createBuffer(1, 128, this._context.sampleRate);\n\t\t\tconst arr = buffer.getChannelData(0);\n\t\t\tfor (let i = 0; i < arr.length; i++) {\n\t\t\t\tarr[i] = val;\n\t\t\t}\n\t\t\tconst constant = this._context.createBufferSource();\n\t\t\tconstant.channelCount = 1;\n\t\t\tconstant.channelCountMode = \"explicit\";\n\t\t\tconstant.buffer = buffer;\n\t\t\tconstant.loop = true;\n\t\t\tconstant.start(0);\n\t\t\tthis._constants.set(val, constant);\n\t\t\treturn constant;\n\t\t}\n\t}\n\n\t/**\n\t * Clean up. Also closes the audio context.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._ticker.dispose();\n\t\tthis._timeouts.dispose();\n\t\tObject.keys(this._constants).map(val => this._constants[val].disconnect());\n\t\treturn this;\n\t}\n\n\t//---------------------------\n\t// TIMEOUTS\n\t//---------------------------\n\n\t/**\n\t * The private loop which keeps track of the context scheduled timeouts\n\t * Is invoked from the clock source\n\t */\n\tprivate _timeoutLoop(): void {\n\t\tconst now = this.now();\n\t\tlet firstEvent = this._timeouts.peek();\n\t\twhile (this._timeouts.length && firstEvent && firstEvent.time <= now) {\n\t\t\t// invoke the callback\n\t\t\tfirstEvent.callback();\n\t\t\t// shift the first event off\n\t\t\tthis._timeouts.shift();\n\t\t\t// get the next one\n\t\t\tfirstEvent = this._timeouts.peek();\n\t\t}\n\t}\n\n\t/**\n\t * A setTimeout which is guaranteed by the clock source.\n\t * Also runs in the offline context.\n\t * @param  fn       The callback to invoke\n\t * @param  timeout  The timeout in seconds\n\t * @returns ID to use when invoking Context.clearTimeout\n\t */\n\tsetTimeout(fn: (...args: any[]) => void, timeout: Seconds): number {\n\t\tthis._timeoutIds++;\n\t\tconst now = this.now();\n\t\tthis._timeouts.add({\n\t\t\tcallback: fn,\n\t\t\tid: this._timeoutIds,\n\t\t\ttime: now + timeout,\n\t\t});\n\t\treturn this._timeoutIds;\n\t}\n\n\t/**\n\t * Clears a previously scheduled timeout with Tone.context.setTimeout\n\t * @param  id  The ID returned from setTimeout\n\t */\n\tclearTimeout(id: number): this {\n\t\tthis._timeouts.forEach(event => {\n\t\t\tif (event.id === id) {\n\t\t\t\tthis._timeouts.remove(event);\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clear the function scheduled by [[setInterval]]\n\t */\n\tclearInterval(id: number): this {\n\t\treturn this.clearTimeout(id);\n\t}\n\n\t/**\n\t * Adds a repeating event to the context's callback clock\n\t */\n\tsetInterval(fn: (...args: any[]) => void, interval: Seconds): number {\n\t\tconst id = ++this._timeoutIds;\n\t\tconst intervalFn = () => {\n\t\t\tconst now = this.now();\n\t\t\tthis._timeouts.add({\n\t\t\t\tcallback: () => {\n\t\t\t\t\t// invoke the callback\n\t\t\t\t\tfn();\n\t\t\t\t\t// invoke the event to repeat it\n\t\t\t\t\tintervalFn();\n\t\t\t\t},\n\t\t\t\tid,\n\t\t\t\ttime: now + interval,\n\t\t\t});\n\t\t};\n\t\t// kick it off\n\t\tintervalFn();\n\t\treturn id;\n\t}\n}\n","import { BaseContext } from \"./BaseContext\";\nimport { Seconds } from \"../type/Units\";\nimport { AnyAudioContext } from \"./AudioContext\";\n\ntype Draw = import(\"../util/Draw\").Draw;\ntype Destination = import(\"./Destination\").Destination;\ntype Transport = import(\"../clock/Transport\").Transport;\ntype Listener = import(\"./Listener\").Listener;\n\nexport class DummyContext extends BaseContext {\n\t//---------------------------\n\t// BASE AUDIO CONTEXT METHODS\n\t//---------------------------\n\tcreateAnalyser(): AnalyserNode {\n\t\treturn {} as AnalyserNode;\n\t}\n\n\tcreateOscillator(): OscillatorNode {\n\t\treturn {} as OscillatorNode;\n\t}\n\n\tcreateBufferSource() {\n\t\treturn {} as AudioBufferSourceNode;\n\t}\n\n\tcreateBiquadFilter(): BiquadFilterNode {\n\t\treturn {} as BiquadFilterNode;\n\t}\n\n\tcreateBuffer(_numberOfChannels: number, _length: number, _sampleRate: number): AudioBuffer {\n\t\treturn {} as AudioBuffer;\n\t}\n\n\tcreateChannelMerger(_numberOfInputs?: number | undefined): ChannelMergerNode {\n\t\treturn {} as ChannelMergerNode;\n\t}\n\n\tcreateChannelSplitter(_numberOfOutputs?: number | undefined): ChannelSplitterNode {\n\t\treturn {} as ChannelSplitterNode;\n\t}\n\n\tcreateConstantSource(): ConstantSourceNode {\n\t\treturn {} as ConstantSourceNode;\n\t}\n\n\tcreateConvolver(): ConvolverNode {\n\t\treturn {} as ConvolverNode;\n\t}\n\n\tcreateDelay(_maxDelayTime?: number | undefined): DelayNode {\n\t\treturn {} as DelayNode;\n\t}\n\n\tcreateDynamicsCompressor(): DynamicsCompressorNode {\n\t\treturn {} as DynamicsCompressorNode;\n\t}\n\n\tcreateGain(): GainNode {\n\t\treturn {} as GainNode;\n\t}\n\n\tcreateIIRFilter(_feedForward: number[] | Float32Array, _feedback: number[] | Float32Array): IIRFilterNode {\n\t\treturn {} as IIRFilterNode;\n\t}\n\n\tcreatePanner(): PannerNode {\n\t\treturn {} as PannerNode;\n\t}\n\n\tcreatePeriodicWave(\n\t\t_real: number[] | Float32Array,\n\t\t_imag: number[] | Float32Array,\n\t\t_constraints?: PeriodicWaveConstraints | undefined,\n\t): PeriodicWave {\n\t\treturn {} as PeriodicWave;\n\t}\n\n\tcreateStereoPanner(): StereoPannerNode {\n\t\treturn {} as StereoPannerNode;\n\t}\n\n\tcreateWaveShaper(): WaveShaperNode {\n\t\treturn {} as WaveShaperNode;\n\t}\n\n\tcreateMediaStreamSource(_stream: MediaStream): MediaStreamAudioSourceNode {\n\t\treturn {} as MediaStreamAudioSourceNode;\n\t}\n\n\tdecodeAudioData(_audioData: ArrayBuffer): Promise<AudioBuffer> {\n\t\treturn Promise.resolve({} as AudioBuffer);\n\t}\n\n\t//---------------------------\n\t// TONE AUDIO CONTEXT METHODS\n\t//---------------------------\n\n\tcreateAudioWorkletNode(\n\t\t_name: string, \n\t\t_options?: Partial<AudioWorkletNodeOptions>\n\t): AudioWorkletNode {\n\t\treturn {} as AudioWorkletNode;\n\t}\n\n\tget rawContext(): AnyAudioContext {\n\t\treturn {} as AnyAudioContext;\n\t}\n\n\tasync addAudioWorkletModule(_url: string, _name: string): Promise<void> {\n\t\treturn Promise.resolve();\n\t}\n\n\tlookAhead = 0;\n\t\n\tlatencyHint = 0;\n\n\tresume(): Promise<void> {\n\t\treturn Promise.resolve();\n\t}\n\n\tsetTimeout(_fn: (...args: any[]) => void, _timeout: Seconds): number {\n\t\treturn 0;\n\t}\n\n\tclearTimeout(_id: number): this {\n\t\treturn this;\n\t}\n\n\tsetInterval(_fn: (...args: any[]) => void, _interval: Seconds): number {\n\t\treturn 0;\n\t}\n\n\tclearInterval(_id: number): this {\n\t\treturn this;\n\t}\n\n\tgetConstant(_val: number): AudioBufferSourceNode {\n\t\treturn {} as AudioBufferSourceNode;\n\t}\n\n\tget currentTime(): Seconds {\n\t\treturn 0;\n\t}\n\n\tget state(): AudioContextState {\n\t\treturn {} as AudioContextState;\n\t}\n\n\tget sampleRate(): number {\n\t\treturn 0;\n\t}\n\n\tget listener(): Listener {\n\t\treturn {} as Listener;\n\t}\n\n\tget transport(): Transport {\n\t\treturn {} as Transport;\n\t}\n\n\tget draw(): Draw {\n\t\treturn {} as Draw;\n\t}\n\tset draw(_d) { }\n\n\tget destination(): Destination {\n\t\treturn {} as Destination;\n\t}\n\tset destination(_d: Destination) { }\n\n\tnow() {\n\t\treturn 0;\n\t}\n\n\timmediate() {\n\t\treturn 0;\n\t}\n\n\treadonly isOffline: boolean = false;\n}\n","import { isArray } from \"./TypeCheck\";\n\n// return an interface which excludes certain keys\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n\n/**\n * Make the property not writable using `defineProperty`. Internal use only.\n */\nexport function readOnly(target: object, property: string | string[]): void {\n\tif (isArray(property)) {\n\t\tproperty.forEach(str => readOnly(target, str));\n\t} else {\n\t\tObject.defineProperty(target, property, {\n\t\t\tenumerable: true,\n\t\t\twritable: false,\n\t\t});\n\t}\n}\n\n/**\n * Make an attribute writeable. Internal use only.\n */\nexport function writable(target: object, property: string | string[]): void {\n\tif (isArray(property)) {\n\t\tproperty.forEach(str => writable(target, str));\n\t} else {\n\t\tObject.defineProperty(target, property, {\n\t\t\twritable: true,\n\t\t});\n\t}\n}\n\nexport const noOp: (...args: any[]) => any = () => {\n\t// no operation here!\n};\n\n/**\n * Recursive Partial taken from here: https://stackoverflow.com/a/51365037\n */\nexport type RecursivePartial<T> = {\n\t[P in keyof T]?:\n\tT[P] extends Array<infer U> ? Array<RecursivePartial<U>> :\n\t\tT[P] extends object ? RecursivePartial<T[P]> :\n\t\t\tT[P];\n};\n\n/**\n * Recursive Omit modified from here: https://stackoverflow.com/a/54487392/1146428\n */\ntype OmitDistributive<T, K extends string | number> = T extends any ? (T extends object ? Id<RecursiveOmit<T, K>> : T) : never;\ntype Id<T> = {} & { [P in keyof T]: T[P]} // Cosmetic use only makes the tooltips expand the type can be removed \nexport type RecursiveOmit<T extends any, K extends string | number> = Omit<{ [P in keyof T]: OmitDistributive<T[P], K> }, K>;\n","import { getContext } from \"../Global\";\nimport { Tone } from \"../Tone\";\nimport { Samples, Seconds } from \"../type/Units\";\nimport { isAudioBuffer } from \"../util/AdvancedTypeCheck\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { noOp } from \"../util/Interface\";\nimport { isArray, isNumber, isString } from \"../util/TypeCheck\";\nimport { assert } from \"../util/Debug\";\n\ninterface ToneAudioBufferOptions {\n\turl?: string | AudioBuffer | ToneAudioBuffer;\n\treverse: boolean;\n\tonload: (buffer?: ToneAudioBuffer) => void;\n\tonerror: (error: Error) => void;\n}\n\n/**\n * AudioBuffer loading and storage. ToneAudioBuffer is used internally by all\n * classes that make requests for audio files such as Tone.Player,\n * Tone.Sampler and Tone.Convolver.\n * Aside from load callbacks from individual buffers, ToneAudioBuffer\n * provides events which keep track of the loading progress\n * of _all_ of the buffers. These are ToneAudioBuffer.on(\"load\" / \"progress\" / \"error\")\n * @example\n * import { ToneAudioBuffer } from \"tone\";\n * const buffer = new ToneAudioBuffer(\"https://tonejs.github.io/examples/audio/FWDL.mp3\", () => {\n * \tconsole.log(\"loaded\");\n * });\n * @category Core\n */\nexport class ToneAudioBuffer extends Tone {\n\n\treadonly name: string = \"ToneAudioBuffer\";\n\n\t/**\n\t * stores the loaded AudioBuffer\n\t */\n\tprivate _buffer?: AudioBuffer;\n\n\t/**\n\t * indicates if the buffer should be reversed or not\n\t */\n\tprivate _reversed!: boolean;\n\n\t/**\n\t * Callback when the buffer is loaded.\n\t */\n\tonload: (buffer: ToneAudioBuffer) => void = noOp;\n\n\t/**\n\t *\n\t * @param url The url to load, or the audio buffer to set.\n\t * @param onload A callback which is invoked after the buffer is loaded.\n\t *                           It's recommended to use `ToneAudioBuffer.on('load', callback)` instead\n\t *                           since it will give you a callback when _all_ buffers are loaded.\n\t * @param onerror The callback to invoke if there is an error\n\t */\n\tconstructor(\n\t\turl?: string | ToneAudioBuffer | AudioBuffer,\n\t\tonload?: (buffer: ToneAudioBuffer) => void,\n\t\tonerror?: (error: Error) => void,\n\t);\n\tconstructor(options?: Partial<ToneAudioBufferOptions>);\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tconst options = optionsFromArguments(ToneAudioBuffer.getDefaults(), arguments, [\"url\", \"onload\", \"onerror\"]);\n\n\t\tthis.reverse = options.reverse;\n\t\tthis.onload = options.onload;\n\n\t\tif (options.url && isAudioBuffer(options.url) || options.url instanceof ToneAudioBuffer) {\n\t\t\tthis.set(options.url);\n\t\t} else if (isString(options.url)) {\n\t\t\t// initiate the download\n\t\t\tthis.load(options.url).catch(options.onerror);\n\t\t}\n\t}\n\n\tstatic getDefaults(): ToneAudioBufferOptions {\n\t\treturn {\n\t\t\tonerror: noOp,\n\t\t\tonload: noOp,\n\t\t\treverse: false,\n\t\t};\n\t}\n\n\t/**\n\t * The sample rate of the AudioBuffer\n\t */\n\tget sampleRate(): number {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.sampleRate;\n\t\t} else {\n\t\t\treturn getContext().sampleRate;\n\t\t}\n\t}\n\n\t/**\n\t * Pass in an AudioBuffer or ToneAudioBuffer to set the value of this buffer.\n\t */\n\tset(buffer: AudioBuffer | ToneAudioBuffer): this {\n\t\tif (buffer instanceof ToneAudioBuffer) {\n\t\t\t// if it's loaded, set it\n\t\t\tif (buffer.loaded) {\n\t\t\t\tthis._buffer = buffer.get();\n\t\t\t} else {\n\t\t\t\t// otherwise when it's loaded, invoke it's callback\n\t\t\t\tbuffer.onload = () => {\n\t\t\t\t\tthis.set(buffer);\n\t\t\t\t\tthis.onload(this);\n\t\t\t\t};\n\t\t\t}\n\t\t} else {\n\t\t\tthis._buffer = buffer;\n\t\t}\n\t\t// reverse it initially\n\t\tif (this._reversed) {\n\t\t\tthis._reverse();\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * The audio buffer stored in the object.\n\t */\n\tget(): AudioBuffer | undefined {\n\t\treturn this._buffer;\n\t}\n\n\t/**\n\t * Makes an fetch request for the selected url then decodes the file as an audio buffer.\n\t * Invokes the callback once the audio buffer loads.\n\t * @param url The url of the buffer to load. filetype support depends on the browser.\n\t * @returns A Promise which resolves with this ToneAudioBuffer\n\t */\n\tasync load(url: string): Promise<this> {\n\t\tconst doneLoading: Promise<void> = ToneAudioBuffer.load(url).then(audioBuffer => {\n\t\t\tthis.set(audioBuffer);\n\t\t\t// invoke the onload method\n\t\t\tthis.onload(this);\n\t\t});\n\t\tToneAudioBuffer.downloads.push(doneLoading);\n\t\ttry {\n\t\t\tawait doneLoading;\n\t\t} finally {\n\t\t\t// remove the downloaded file\n\t\t\tconst index = ToneAudioBuffer.downloads.indexOf(doneLoading);\n\t\t\tToneAudioBuffer.downloads.splice(index, 1);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._buffer = undefined;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set the audio buffer from the array.\n\t * To create a multichannel AudioBuffer, pass in a multidimensional array.\n\t * @param array The array to fill the audio buffer\n\t */\n\tfromArray(array: Float32Array | Float32Array[]): this {\n\t\tconst isMultidimensional = isArray(array) && array[0].length > 0;\n\t\tconst channels = isMultidimensional ? array.length : 1;\n\t\tconst len = isMultidimensional ? (array[0] as Float32Array).length : array.length;\n\t\tconst context = getContext();\n\t\tconst buffer = context.createBuffer(channels, len, context.sampleRate);\n\t\tconst multiChannelArray: Float32Array[] = !isMultidimensional && channels === 1 ?\n\t\t\t[array as Float32Array] : array as Float32Array[];\n\n\t\tfor (let c = 0; c < channels; c++) {\n\t\t\tbuffer.copyToChannel(multiChannelArray[c], c);\n\t\t}\n\t\tthis._buffer = buffer;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sums multiple channels into 1 channel\n\t * @param chanNum Optionally only copy a single channel from the array.\n\t */\n\ttoMono(chanNum?: number): this {\n\t\tif (isNumber(chanNum)) {\n\t\t\tthis.fromArray(this.toArray(chanNum));\n\t\t} else {\n\t\t\tlet outputArray = new Float32Array(this.length as number);\n\t\t\tconst numChannels = this.numberOfChannels;\n\t\t\tfor (let channel = 0; channel < numChannels; channel++) {\n\t\t\t\tconst channelArray = this.toArray(channel) as Float32Array;\n\t\t\t\tfor (let i = 0; i < channelArray.length; i++) {\n\t\t\t\t\toutputArray[i] += channelArray[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\t// divide by the number of channels\n\t\t\toutputArray = outputArray.map(sample => sample / numChannels);\n\t\t\tthis.fromArray(outputArray);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the buffer as an array. Single channel buffers will return a 1-dimensional\n\t * Float32Array, and multichannel buffers will return multidimensional arrays.\n\t * @param channel Optionally only copy a single channel from the array.\n\t */\n\ttoArray(channel?: number): Float32Array | Float32Array[] {\n\t\tif (isNumber(channel)) {\n\t\t\treturn this.getChannelData(channel);\n\t\t} else if (this.numberOfChannels === 1) {\n\t\t\treturn this.toArray(0);\n\t\t} else {\n\t\t\tconst ret: Float32Array[] = [];\n\t\t\tfor (let c = 0; c < this.numberOfChannels; c++) {\n\t\t\t\tret[c] = this.getChannelData(c);\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\t}\n\n\t/**\n\t * Returns the Float32Array representing the PCM audio data for the specific channel.\n\t * @param  channel  The channel number to return\n\t * @return The audio as a TypedArray\n\t */\n\tgetChannelData(channel: number): Float32Array {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.getChannelData(channel);\n\t\t} else {\n\t\t\treturn new Float32Array(0);\n\t\t}\n\t}\n\n\t/**\n\t * Cut a subsection of the array and return a buffer of the\n\t * subsection. Does not modify the original buffer\n\t * @param start The time to start the slice\n\t * @param end The end time to slice. If none is given will default to the end of the buffer\n\t */\n\tslice(start: Seconds, end: Seconds = this.duration): ToneAudioBuffer {\n\t\tconst startSamples = Math.floor(start * this.sampleRate);\n\t\tconst endSamples = Math.floor(end * this.sampleRate);\n\t\tassert(startSamples < endSamples, \"The start time must be less than the end time\");\n\t\tconst length = endSamples - startSamples;\n\t\tconst retBuffer = getContext().createBuffer(this.numberOfChannels, length, this.sampleRate);\n\t\tfor (let channel = 0; channel < this.numberOfChannels; channel++) {\n\t\t\tretBuffer.copyToChannel(this.getChannelData(channel).subarray(startSamples, endSamples), channel);\n\t\t}\n\t\treturn new ToneAudioBuffer(retBuffer);\n\t}\n\n\t/**\n\t * Reverse the buffer.\n\t */\n\tprivate _reverse(): this {\n\t\tif (this.loaded) {\n\t\t\tfor (let i = 0; i < this.numberOfChannels; i++) {\n\t\t\t\tthis.getChannelData(i).reverse();\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * If the buffer is loaded or not\n\t */\n\tget loaded(): boolean {\n\t\treturn this.length > 0;\n\t}\n\n\t/**\n\t * The duration of the buffer in seconds.\n\t */\n\tget duration(): Seconds {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.duration;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * The length of the buffer in samples\n\t */\n\tget length(): Samples {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.length;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * The number of discrete audio channels. Returns 0 if no buffer is loaded.\n\t */\n\tget numberOfChannels(): number {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.numberOfChannels;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * Reverse the buffer.\n\t */\n\tget reverse(): boolean {\n\t\treturn this._reversed;\n\t}\n\tset reverse(rev: boolean) {\n\t\tif (this._reversed !== rev) {\n\t\t\tthis._reversed = rev;\n\t\t\tthis._reverse();\n\t\t}\n\t}\n\n\t//-------------------------------------\n\t// STATIC METHODS\n\t//-------------------------------------\n\n\t/**\n\t * A path which is prefixed before every url.\n\t */\n\tstatic baseUrl = \"\";\n\n\t/**\n\t * Create a ToneAudioBuffer from the array. To create a multichannel AudioBuffer,\n\t * pass in a multidimensional array.\n\t * @param array The array to fill the audio buffer\n\t * @return A ToneAudioBuffer created from the array\n\t */\n\tstatic fromArray(array: Float32Array | Float32Array[]): ToneAudioBuffer {\n\t\treturn (new ToneAudioBuffer()).fromArray(array);\n\t}\n\n\t/**\n\t * Creates a ToneAudioBuffer from a URL, returns a promise which resolves to a ToneAudioBuffer\n\t * @param  url The url to load.\n\t * @return A promise which resolves to a ToneAudioBuffer\n\t */\n\tstatic async fromUrl(url: string): Promise<ToneAudioBuffer> {\n\t\tconst buffer = new ToneAudioBuffer();\n\t\treturn await buffer.load(url);\n\t}\n\n\t/**\n\t * All of the downloads\n\t */\n\tstatic downloads: Array<Promise<void>> = [];\n\n\t/**\n\t * Loads a url using fetch and returns the AudioBuffer.\n\t */\n\tstatic async load(url: string): Promise<AudioBuffer> {\n\n\t\t// test if the url contains multiple extensions\n\t\tconst matches = url.match(/\\[(.+\\|?)+\\]$/);\n\t\tif (matches) {\n\t\t\tconst extensions = matches[1].split(\"|\");\n\t\t\tlet extension = extensions[0];\n\t\t\tfor (const ext of extensions) {\n\t\t\t\tif (ToneAudioBuffer.supportsType(ext)) {\n\t\t\t\t\textension = ext;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\turl = url.replace(matches[0], extension);\n\t\t}\n\n\t\t// make sure there is a slash between the baseUrl and the url\n\t\tconst baseUrl = ToneAudioBuffer.baseUrl === \"\" || ToneAudioBuffer.baseUrl.endsWith(\"/\") ? ToneAudioBuffer.baseUrl : ToneAudioBuffer.baseUrl + \"/\";\n\t\tconst response = await fetch(baseUrl + url);\n\t\tif (!response.ok) {\n\t\t\tthrow new Error(`could not load url: ${url}`);\n\t\t}\n\t\tconst arrayBuffer = await response.arrayBuffer();\n\n\t\tconst audioBuffer = await getContext().decodeAudioData(arrayBuffer);\n\n\t\treturn audioBuffer;\n\t}\n\n\t/**\n\t * Checks a url's extension to see if the current browser can play that file type.\n\t * @param url The url/extension to test\n\t * @return If the file extension can be played\n\t * @static\n\t * @example\n\t * import { ToneAudioBuffer } from \"tone\";\n\t * ToneAudioBuffer.supportsType(\"wav\"); // returns true\n\t * ToneAudioBuffer.supportsType(\"path/to/file.wav\"); // returns true\n\t */\n\tstatic supportsType(url: string): boolean {\n\t\tconst extensions = url.split(\".\");\n\t\tconst extension = extensions[extensions.length - 1];\n\t\tconst response = document.createElement(\"audio\").canPlayType(\"audio/\" + extension);\n\t\treturn response !== \"\";\n\t}\n\n\t/**\n\t * Returns a Promise which resolves when all of the buffers have loaded\n\t */\n\tstatic async loaded(): Promise<void> {\n\t\t// this makes sure that the function is always async\n\t\tawait Promise.resolve();\n\t\twhile (ToneAudioBuffer.downloads.length) {\n\t\t\tawait ToneAudioBuffer.downloads[0];\n\t\t}\n\t}\n}\n","import { createOfflineAudioContext } from \"../context/AudioContext\";\nimport { Context } from \"../context/Context\";\nimport { Seconds } from \"../type/Units\";\nimport { isOfflineAudioContext } from \"../util/AdvancedTypeCheck\";\nimport { ToneAudioBuffer } from \"./ToneAudioBuffer\";\n\n/**\n * Wrapper around the OfflineAudioContext\n * @category Core\n */\nexport class OfflineContext extends Context {\n\n\treadonly name: string = \"OfflineContext\";\n\n\t/**\n\t * A private reference to the duration\n\t */\n\tprivate readonly _duration: Seconds;\n\n\t/**\n\t * An artificial clock source\n\t */\n\tprivate _currentTime: Seconds = 0;\n\n\t/**\n\t * Private reference to the OfflineAudioContext.\n\t */\n\tprotected _context!: OfflineAudioContext;\n\n\treadonly isOffline: boolean = true;\n\n\t/**\n\t * @param  channels  The number of channels to render\n\t * @param  duration  The duration to render in seconds\n\t * @param sampleRate the sample rate to render at\n\t */\n\tconstructor(\n\t\tchannels: number,\n\t\tduration: Seconds, sampleRate: number,\n\t);\n\tconstructor(context: OfflineAudioContext);\n\tconstructor() {\n\n\t\tsuper({\n\t\t\tclockSource: \"offline\",\n\t\t\tcontext: isOfflineAudioContext(arguments[0]) ?\n\t\t\t\targuments[0] : createOfflineAudioContext(arguments[0], arguments[1] * arguments[2], arguments[2]),\n\t\t\tlookAhead: 0,\n\t\t\tupdateInterval: isOfflineAudioContext(arguments[0]) ?\n\t\t\t\t128 / arguments[0].sampleRate : 128 / arguments[2],\n\t\t});\n\n\t\tthis._duration = isOfflineAudioContext(arguments[0]) ?\n\t\t\targuments[0].length / arguments[0].sampleRate : arguments[1];\n\t}\n\n\t/**\n\t * Override the now method to point to the internal clock time\n\t */\n\tnow(): Seconds {\n\t\treturn this._currentTime;\n\t}\n\n\t/**\n\t * Same as this.now()\n\t */\n\tget currentTime(): Seconds {\n\t\treturn this._currentTime;\n\t}\n\n\t/**\n\t * Render just the clock portion of the audio context.\n\t */\n\tprivate async _renderClock(asynchronous: boolean): Promise<void> {\n\t\tlet index = 0;\n\t\twhile (this._duration - this._currentTime >= 0) {\n\t\t\t\n\t\t\t// invoke all the callbacks on that time\n\t\t\tthis.emit(\"tick\");\n\t\t\t\n\t\t\t// increment the clock in block-sized chunks\n\t\t\tthis._currentTime += 128 / this.sampleRate;\n\t\t\t\n\t\t\t// yield once a second of audio\n\t\t\tindex++;\n\t\t\tconst yieldEvery = Math.floor(this.sampleRate / 128);\n\t\t\tif (asynchronous && index % yieldEvery === 0) {\n\t\t\t\tawait new Promise(done => setTimeout(done, 1));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Render the output of the OfflineContext\n\t * @param asynchronous If the clock should be rendered asynchronously, which will not block the main thread, but be slightly slower.\n\t */\n\tasync render(asynchronous = true): Promise<ToneAudioBuffer> {\n\t\tawait this.workletsAreReady();\n\t\tawait this._renderClock(asynchronous);\n\t\tconst buffer = await this._context.startRendering();\n\t\treturn new ToneAudioBuffer(buffer);\n\t}\n\n\t/**\n\t * Close the context\n\t */\n\tclose(): Promise<void> {\n\t\treturn Promise.resolve();\n\t}\n}\n","import { version } from \"../version\";\nimport { AnyAudioContext, hasAudioContext, theWindow } from \"./context/AudioContext\";\nimport { Context } from \"./context/Context\";\nimport { DummyContext } from \"./context/DummyContext\";\nimport { BaseContext } from \"./context/BaseContext\";\nimport { OfflineContext } from \"./context/OfflineContext\";\nimport { isAudioContext, isOfflineAudioContext } from \"./util/AdvancedTypeCheck\";\n\n/**\n * This dummy context is used to avoid throwing immediate errors when importing in Node.js\n */\nconst dummyContext = new DummyContext();\n\n/**\n * The global audio context which is getable and assignable through\n * getContext and setContext\n */\nlet globalContext: BaseContext = dummyContext;\n\n/**\n * Returns the default system-wide [[Context]]\n * @category Core\n */\nexport function getContext(): BaseContext {\n\tif (globalContext === dummyContext && hasAudioContext) {\n\t\tsetContext(new Context());\n\t}\n\treturn globalContext;\n}\n\n/**\n * Set the default audio context\n * @category Core\n */\nexport function setContext(context: BaseContext | AnyAudioContext): void {\n\tif (isAudioContext(context)) {\n\t\tglobalContext = new Context(context);\n\t} else if (isOfflineAudioContext(context)) {\n\t\tglobalContext = new OfflineContext(context);\n\t} else {\n\t\tglobalContext = context;\n\t}\n}\n\n/**\n * Most browsers will not play _any_ audio until a user\n * clicks something (like a play button). Invoke this method\n * on a click or keypress event handler to start the audio context.\n * More about the Autoplay policy\n * [here](https://developers.google.com/web/updates/2017/09/autoplay-policy-changes#webaudio)\n * @example\n * import * as Tone from \"tone\";\n * document.querySelector(\"button\").addEventListener(\"click\", async () => {\n * \tawait Tone.start();\n * \tconsole.log(\"context started\");\n * });\n * @category Core\n */\nexport function start(): Promise <void> {\n\treturn globalContext.resume();\n}\n\n/**\n * Log Tone.js + version in the console.\n */\nif (theWindow && !theWindow.TONE_SILENCE_LOGGING) {\n\tlet prefix = \"v\";\n\tif (version === \"dev\") {\n\t\tprefix = \"\";\n\t}\n\tconst printString = ` * Tone.js ${prefix}${version} * `;\n\t// eslint-disable-next-line no-console\n\tconsole.log(`%c${printString}`, \"background: #000; color: #fff\");\n}\n","import { Decibels, GainFactor, Hertz, Interval, MidiNote, NormalRange } from \"./Units\";\n\n/**\n * Equal power gain scale. Good for cross-fading.\n * @param  percent (0-1)\n */\nexport function equalPowerScale(percent: NormalRange): number {\n\tconst piFactor = 0.5 * Math.PI;\n\treturn Math.sin(percent * piFactor);\n}\n\n/**\n * Convert decibels into gain.\n */\nexport function dbToGain(db: Decibels): GainFactor {\n\treturn Math.pow(10, db / 20);\n}\n\n/**\n * Convert gain to decibels.\n */\nexport function gainToDb(gain: GainFactor): Decibels {\n\treturn 20 * (Math.log(gain) / Math.LN10);\n}\n\n/**\n * Convert an interval (in semitones) to a frequency ratio.\n * @param interval the number of semitones above the base note\n * @example\n * import { intervalToFrequencyRatio } from \"tone\";\n * intervalToFrequencyRatio(0); // 1\n * intervalToFrequencyRatio(12); // 2\n * intervalToFrequencyRatio(-12); // 0.5\n */\nexport function intervalToFrequencyRatio(interval: Interval): number {\n\treturn Math.pow(2, (interval / 12));\n}\n\n/**\n * The Global [concert tuning pitch](https://en.wikipedia.org/wiki/Concert_pitch) which is used\n * to generate all the other pitch values from notes. A4's values in Hertz.\n */\nlet A4: Hertz = 440;\n\nexport function getA4(): Hertz {\n\treturn A4;\n}\n\nexport function setA4(freq: Hertz): void {\n\tA4 = freq;\n}\n\n/**\n * Convert a frequency value to a MIDI note.\n * @param frequency The value to frequency value to convert.\n * @example\n * import { ftom } from \"tone\";\n * ftom(440); // returns 69\n */\nexport function ftom(frequency: Hertz): MidiNote {\n\treturn Math.round(ftomf(frequency)) as MidiNote;\n}\n\n/**\n * Convert a frequency to a floating point midi value\n */\nexport function ftomf(frequency: Hertz): number {\n\treturn 69 + 12 * Math.log2(frequency / A4);\n}\n\n/**\n * Convert a MIDI note to frequency value.\n * @param  midi The midi number to convert.\n * @return The corresponding frequency value\n * @example\n * import { mtof } from \"tone\";\n * mtof(69); // 440\n */\nexport function mtof(midi: MidiNote): Hertz {\n\treturn A4 * Math.pow(2, (midi - 69) / 12);\n}\n","import { BaseContext } from \"../context/BaseContext\";\nimport { Tone } from \"../Tone\";\nimport { isDefined, isObject, isString, isUndef } from \"../util/TypeCheck\";\nimport { BPM, Hertz, MidiNote, Milliseconds, Samples, Seconds, Ticks, Time } from \"./Units\";\n\nexport type TimeValue = Time | TimeBaseClass<any, any>;\n\n/**\n * The units that the TimeBase can accept. extended by other classes\n */\nexport type TimeBaseUnit = \"s\" | \"n\" | \"t\" | \"m\" | \"i\" | \"hz\" | \"tr\" | \"samples\" | \"number\";\n\nexport interface TypeFunction {\n\tregexp: RegExp;\n\tmethod: (value: string, ...args: string[]) => number;\n}\n\nexport interface TimeExpression<Type extends number> {\n\t[key: string]: {\n\t\tregexp: RegExp;\n\t\tmethod: (value: string, ...args: string[]) => Type;\n\t};\n}\n\n/**\n * TimeBase is a flexible encoding of time which can be evaluated to and from a string.\n */\nexport abstract class TimeBaseClass<Type extends number, Unit extends string> extends Tone {\n\n\treadonly context: BaseContext;\n\n\t/**\n\t * The value of the units\n\t */\n\tprotected _val?: TimeValue;\n\n\t/**\n\t * The units of time\n\t */\n\tprotected _units?: Unit;\n\n\t/**\n\t * All of the conversion expressions\n\t */\n\tprotected _expressions: TimeExpression<Type>;\n\n\t/**\n\t * The default units\n\t */\n\treadonly defaultUnits: Unit = \"s\" as Unit;\n\n\t/**\n\t * @param context The context associated with the time value. Used to compute\n\t * Transport and context-relative timing.\n\t * @param  value  The time value as a number, string or object\n\t * @param  units  Unit values\n\t */\n\tconstructor(context: BaseContext, value?: TimeValue, units?: Unit) {\n\t\tsuper();\n\n\t\tthis._val = value;\n\t\tthis._units = units;\n\t\tthis.context = context;\n\t\tthis._expressions = this._getExpressions();\n\t}\n\n\t/**\n\t * All of the time encoding expressions\n\t */\n\tprotected _getExpressions(): TimeExpression<Type> {\n\t\treturn {\n\t\t\thz: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._frequencyToUnits(parseFloat(value));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?)hz$/i,\n\t\t\t},\n\t\t\ti: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._ticksToUnits(parseInt(value, 10));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)i$/i,\n\t\t\t},\n\t\t\tm: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._beatsToUnits(parseInt(value, 10) * this._getTimeSignature());\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)m$/i,\n\t\t\t},\n\t\t\tn: {\n\t\t\t\tmethod: (value, dot) => {\n\t\t\t\t\tconst numericValue = parseInt(value, 10);\n\t\t\t\t\tconst scalar = dot === \".\" ? 1.5 : 1;\n\t\t\t\t\tif (numericValue === 1) {\n\t\t\t\t\t\treturn this._beatsToUnits(this._getTimeSignature()) * scalar as Type;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn this._beatsToUnits(4 / numericValue) * scalar as Type;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)n(\\.?)$/i,\n\t\t\t},\n\t\t\tnumber: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._expressions[this.defaultUnits].method.call(this, value);\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?)$/,\n\t\t\t},\n\t\t\ts: {\n\t\t\t\tmethod: (value): Type => {\n\t\t\t\t\treturn this._secondsToUnits(parseFloat(value));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?)s$/,\n\t\t\t},\n\t\t\tsamples: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn parseInt(value, 10) / this.context.sampleRate as Type;\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)samples$/,\n\t\t\t},\n\t\t\tt: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\tconst numericValue = parseInt(value, 10);\n\t\t\t\t\treturn this._beatsToUnits(8 / (Math.floor(numericValue) * 3));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)t$/i,\n\t\t\t},\n\t\t\ttr: {\n\t\t\t\tmethod: (m, q, s) => {\n\t\t\t\t\tlet total = 0;\n\t\t\t\t\tif (m && m !== \"0\") {\n\t\t\t\t\t\ttotal += this._beatsToUnits(this._getTimeSignature() * parseFloat(m));\n\t\t\t\t\t}\n\t\t\t\t\tif (q && q !== \"0\") {\n\t\t\t\t\t\ttotal += this._beatsToUnits(parseFloat(q));\n\t\t\t\t\t}\n\t\t\t\t\tif (s && s !== \"0\") {\n\t\t\t\t\t\ttotal += this._beatsToUnits(parseFloat(s) / 4);\n\t\t\t\t\t}\n\t\t\t\t\treturn total as Type;\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?$/,\n\t\t\t},\n\t\t};\n\t}\n\n\t//-------------------------------------\n\t// \tVALUE OF\n\t//-------------------------------------\n\n\t/**\n\t * Evaluate the time value. Returns the time in seconds.\n\t */\n\tvalueOf(): Type {\n\t\tif (this._val instanceof TimeBaseClass) {\n\t\t\tthis.fromType(this._val);\n\t\t}\n\t\tif (isUndef(this._val)) {\n\t\t\treturn this._noArg();\n\t\t} else if (isString(this._val) && isUndef(this._units)) {\n\t\t\tfor (const units in this._expressions) {\n\t\t\t\tif (this._expressions[units].regexp.test(this._val.trim())) {\n\t\t\t\t\tthis._units = units as Unit;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (isObject(this._val)) {\n\t\t\tlet total = 0;\n\t\t\tfor (const typeName in this._val) {\n\t\t\t\tif (isDefined(this._val[typeName])) {\n\t\t\t\t\tconst quantity = this._val[typeName];\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tconst time = (new this.constructor(this.context, typeName)).valueOf() * quantity;\n\t\t\t\t\ttotal += time;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn total as Type;\n\t\t}\n\t\tif (isDefined(this._units)) {\n\t\t\tconst expr = this._expressions[this._units];\n\t\t\tconst matching = this._val.toString().trim().match(expr.regexp);\n\t\t\tif (matching) {\n\t\t\t\treturn expr.method.apply(this, matching.slice(1));\n\t\t\t} else {\n\t\t\t\treturn expr.method.call(this, this._val);\n\t\t\t}\n\t\t} else if (isString(this._val)) {\n\t\t\treturn parseFloat(this._val) as Type;\n\t\t} else {\n\t\t\treturn this._val as Type;\n\t\t}\n\t}\n\n\t//-------------------------------------\n\t// \tUNIT CONVERSIONS\n\t//-------------------------------------\n\n\t/**\n\t * Returns the value of a frequency in the current units\n\t */\n\tprotected _frequencyToUnits(freq: Hertz): Type {\n\t\treturn 1 / freq as Type;\n\t}\n\n\t/**\n\t * Return the value of the beats in the current units\n\t */\n\tprotected _beatsToUnits(beats: number): Type {\n\t\treturn (60 / this._getBpm()) * beats as Type;\n\t}\n\n\t/**\n\t * Returns the value of a second in the current units\n\t */\n\tprotected _secondsToUnits(seconds: Seconds): Type {\n\t\treturn seconds as Type;\n\t}\n\n\t/**\n\t * Returns the value of a tick in the current time units\n\t */\n\tprotected _ticksToUnits(ticks: Ticks): Type {\n\t\treturn (ticks * (this._beatsToUnits(1)) / this._getPPQ()) as Type;\n\t}\n\n\t/**\n\t * With no arguments, return 'now'\n\t */\n\tprotected _noArg(): Type {\n\t\treturn this._now();\n\t}\n\n\t//-------------------------------------\n\t// \tTEMPO CONVERSIONS\n\t//-------------------------------------\n\n\t/**\n\t * Return the bpm\n\t */\n\tprotected _getBpm(): BPM {\n\t\treturn this.context.transport.bpm.value;\n\t}\n\n\t/**\n\t * Return the timeSignature\n\t */\n\tprotected _getTimeSignature(): number {\n\t\treturn this.context.transport.timeSignature as number;\n\t}\n\n\t/**\n\t * Return the PPQ or 192 if Transport is not available\n\t */\n\tprotected _getPPQ(): number {\n\t\treturn this.context.transport.PPQ;\n\t}\n\n\t/**\n\t * Return the current time in whichever context is relevant\n\t */\n\tprotected abstract _now(): Type;\n\n\t//-------------------------------------\n\t// \tCONVERSION INTERFACE\n\t//-------------------------------------\n\n\t/**\n\t * Coerce a time type into this units type.\n\t * @param type Any time type units\n\t */\n\tfromType(type: TimeBaseClass<any, any>): this {\n\t\tthis._units = undefined;\n\t\tswitch (this.defaultUnits) {\n\t\t\tcase \"s\":\n\t\t\t\tthis._val = type.toSeconds();\n\t\t\t\tbreak;\n\t\t\tcase \"i\":\n\t\t\t\tthis._val = type.toTicks();\n\t\t\t\tbreak;\n\t\t\tcase \"hz\":\n\t\t\t\tthis._val = type.toFrequency();\n\t\t\t\tbreak;\n\t\t\tcase \"midi\":\n\t\t\t\tthis._val = type.toMidi();\n\t\t\t\tbreak;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Return the value in seconds\n\t */\n\tabstract toSeconds(): Seconds;\n\n\t/**\n\t * Return the value as a Midi note\n\t */\n\tabstract toMidi(): MidiNote;\n\n\t/**\n\t * Convert the value into ticks\n\t */\n\tabstract toTicks(): Ticks;\n\n\t/**\n\t * Return the value in hertz\n\t */\n\ttoFrequency(): Hertz {\n\t\treturn 1 / this.toSeconds();\n\t}\n\n\t/**\n\t * Return the time in samples\n\t */\n\ttoSamples(): Samples {\n\t\treturn this.toSeconds() * this.context.sampleRate;\n\t}\n\n\t/**\n\t * Return the time in milliseconds.\n\t */\n\ttoMilliseconds(): Milliseconds {\n\t\treturn this.toSeconds() * 1000;\n\t}\n}\n","import { getContext } from \"../Global\";\nimport { ftom } from \"./Conversions\";\nimport { TimeBaseClass, TimeBaseUnit, TimeExpression, TimeValue } from \"./TimeBase\";\nimport { BarsBeatsSixteenths, MidiNote, Seconds, Subdivision, Ticks, Time } from \"./Units\";\n\n/**\n * TimeClass is a primitive type for encoding and decoding Time values.\n * TimeClass can be passed into the parameter of any method which takes time as an argument.\n * @param  val    The time value.\n * @param  units  The units of the value.\n * @example\n * import { Time } from \"tone\";\n * const time = Time(\"4n\"); // a quarter note\n * @category Unit\n */\nexport class TimeClass<Type extends Seconds | Ticks = Seconds, Unit extends string = TimeBaseUnit>\n\textends TimeBaseClass<Type, Unit> {\n\n\treadonly name: string = \"TimeClass\";\n\n\tprotected _getExpressions(): TimeExpression<Type> {\n\t\treturn Object.assign(super._getExpressions(), {\n\t\t\tnow: {\n\t\t\t\tmethod: (capture: string): Type => {\n\t\t\t\t\treturn this._now() + new (this.constructor as typeof TimeClass)(this.context, capture).valueOf() as Type;\n\t\t\t\t},\n\t\t\t\tregexp: /^\\+(.+)/,\n\t\t\t},\n\t\t\tquantize: {\n\t\t\t\tmethod: (capture: string): Type => {\n\t\t\t\t\tconst quantTo = new TimeClass(this.context, capture).valueOf();\n\t\t\t\t\treturn this._secondsToUnits(this.context.transport.nextSubdivision(quantTo));\n\t\t\t\t},\n\t\t\t\tregexp: /^@(.+)/,\n\t\t\t},\n\t\t});\n\t}\n\n\t/**\n\t * Quantize the time by the given subdivision. Optionally add a\n\t * percentage which will move the time value towards the ideal\n\t * quantized value by that percentage.\n\t * @param  subdiv    The subdivision to quantize to\n\t * @param  percent  Move the time value towards the quantized value by a percentage.\n\t * @example\n\t * import { Time } from \"tone\";\n\t * Time(21).quantize(2); // returns 22\n\t * Time(0.6).quantize(\"4n\", 0.5); // returns 0.55\n\t */\n\tquantize(subdiv: Time, percent = 1): Type {\n\t\tconst subdivision = new (this.constructor as typeof TimeClass)(this.context, subdiv).valueOf();\n\t\tconst value = this.valueOf();\n\t\tconst multiple = Math.round(value / subdivision);\n\t\tconst ideal = multiple * subdivision;\n\t\tconst diff = ideal - value;\n\t\treturn value + diff * percent as Type;\n\t}\n\n\t//-------------------------------------\n\t// CONVERSIONS\n\t//-------------------------------------\n\t/**\n\t * Convert a Time to Notation. The notation values are will be the\n\t * closest representation between 1m to 128th note.\n\t * @return {Notation}\n\t * @example\n\t * import { Time } from \"tone\";\n\t * // if the Transport is at 120bpm:\n\t * Time(2).toNotation(); // returns \"1m\"\n\t */\n\ttoNotation(): Subdivision {\n\t\tconst time = this.toSeconds();\n\t\tconst testNotations: Subdivision[] = [\"1m\"];\n\t\tfor (let power = 1; power < 9; power++) {\n\t\t\tconst subdiv = Math.pow(2, power);\n\t\t\ttestNotations.push(subdiv + \"n.\" as Subdivision);\n\t\t\ttestNotations.push(subdiv + \"n\" as Subdivision);\n\t\t\ttestNotations.push(subdiv + \"t\" as Subdivision);\n\t\t}\n\t\ttestNotations.push(\"0\");\n\t\t// find the closets notation representation\n\t\tlet closest = testNotations[0];\n\t\tlet closestSeconds = new TimeClass(this.context, testNotations[0]).toSeconds();\n\t\ttestNotations.forEach(notation => {\n\t\t\tconst notationSeconds = new TimeClass(this.context, notation).toSeconds();\n\t\t\tif (Math.abs(notationSeconds - time) < Math.abs(closestSeconds - time)) {\n\t\t\t\tclosest = notation;\n\t\t\t\tclosestSeconds = notationSeconds;\n\t\t\t}\n\t\t});\n\t\treturn closest;\n\t}\n\n\t/**\n\t * Return the time encoded as Bars:Beats:Sixteenths.\n\t */\n\ttoBarsBeatsSixteenths(): BarsBeatsSixteenths {\n\t\tconst quarterTime = this._beatsToUnits(1);\n\t\tlet quarters = this.valueOf() / quarterTime;\n\t\tquarters = parseFloat(quarters.toFixed(4));\n\t\tconst measures = Math.floor(quarters / this._getTimeSignature());\n\t\tlet sixteenths = (quarters % 1) * 4;\n\t\tquarters = Math.floor(quarters) % this._getTimeSignature();\n\t\tconst sixteenthString = sixteenths.toString();\n\t\tif (sixteenthString.length > 3) {\n\t\t\t// the additional parseFloat removes insignificant trailing zeroes\n\t\t\tsixteenths = parseFloat(parseFloat(sixteenthString).toFixed(3));\n\t\t}\n\t\tconst progress = [measures, quarters, sixteenths];\n\t\treturn progress.join(\":\");\n\t}\n\n\t/**\n\t * Return the time in ticks.\n\t */\n\ttoTicks(): Ticks {\n\t\tconst quarterTime = this._beatsToUnits(1);\n\t\tconst quarters = this.valueOf() / quarterTime;\n\t\treturn Math.round(quarters * this._getPPQ());\n\t}\n\n\t/**\n\t * Return the time in seconds.\n\t */\n\ttoSeconds(): Seconds {\n\t\treturn this.valueOf();\n\t}\n\n\t/**\n\t * Return the value as a midi note.\n\t */\n\ttoMidi(): MidiNote {\n\t\treturn ftom(this.toFrequency());\n\t}\n\n\tprotected _now(): Type {\n\t\treturn this.context.now() as Type;\n\t}\n}\n\n/**\n * Create a TimeClass from a time string or number.\n * @param value A value which reprsents time\n * @param units The value's units if they can't be inferred by the value.\n * @category Unit\n */\nexport function Time(value?: TimeValue, units?: TimeBaseUnit): TimeClass<Seconds> {\n\treturn new TimeClass(getContext(), value, units);\n}\n","import { getContext } from \"../Global\";\nimport { intervalToFrequencyRatio, mtof } from \"./Conversions\";\nimport { ftom, getA4, setA4 } from \"./Conversions\";\nimport { TimeClass } from \"./Time\";\nimport { TimeBaseUnit, TimeExpression, TimeValue } from \"./TimeBase\";\nimport { Frequency, Hertz, Interval, MidiNote, Note, Seconds, Ticks } from \"./Units\";\n\nexport type FrequencyUnit = TimeBaseUnit | \"midi\";\n\n/**\n * Frequency is a primitive type for encoding Frequency values.\n * Eventually all time values are evaluated to hertz using the `eval` method.\n * @example\n * import { Frequency } from \"tone\";\n * Frequency(\"C3\"); // 261\n * Frequency(38, \"midi\");\n * Frequency(\"C3\").transpose(4);\n * @category Unit\n */\nexport class FrequencyClass<Type extends number = Hertz> extends TimeClass<Type, FrequencyUnit> {\n\n\treadonly name: string = \"Frequency\";\n\n\treadonly defaultUnits: FrequencyUnit = \"hz\";\n\n\t/**\n\t * The [concert tuning pitch](https://en.wikipedia.org/wiki/Concert_pitch) which is used\n\t * to generate all the other pitch values from notes. A4's values in Hertz.\n\t */\n\tstatic get A4(): Hertz {\n\t\treturn getA4();\n\t}\n\tstatic set A4(freq: Hertz) {\n\t\tsetA4(freq);\n\t}\n\n\t//-------------------------------------\n\t// \tAUGMENT BASE EXPRESSIONS\n\t//-------------------------------------\n\n\tprotected _getExpressions(): TimeExpression<Type> {\n\t\treturn Object.assign({}, super._getExpressions(), {\n\t\t\tmidi: {\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?midi)/,\n\t\t\t\tmethod(value): number {\n\t\t\t\t\tif (this.defaultUnits === \"midi\") {\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn FrequencyClass.mtof(value);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\tnote: {\n\t\t\t\tregexp: /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i,\n\t\t\t\tmethod(pitch, octave): number {\n\t\t\t\t\tconst index = noteToScaleIndex[pitch.toLowerCase()];\n\t\t\t\t\tconst noteNumber = index + (parseInt(octave, 10) + 1) * 12;\n\t\t\t\t\tif (this.defaultUnits === \"midi\") {\n\t\t\t\t\t\treturn noteNumber;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn FrequencyClass.mtof(noteNumber);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\ttr: {\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?/,\n\t\t\t\tmethod(m, q, s): number {\n\t\t\t\t\tlet total = 1;\n\t\t\t\t\tif (m && m !== \"0\") {\n\t\t\t\t\t\ttotal *= this._beatsToUnits(this._getTimeSignature() * parseFloat(m));\n\t\t\t\t\t}\n\t\t\t\t\tif (q && q !== \"0\") {\n\t\t\t\t\t\ttotal *= this._beatsToUnits(parseFloat(q));\n\t\t\t\t\t}\n\t\t\t\t\tif (s && s !== \"0\") {\n\t\t\t\t\t\ttotal *= this._beatsToUnits(parseFloat(s) / 4);\n\t\t\t\t\t}\n\t\t\t\t\treturn total;\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t}\n\n\t//-------------------------------------\n\t// \tEXPRESSIONS\n\t//-------------------------------------\n\n\t/**\n\t * Transposes the frequency by the given number of semitones.\n\t * @return  A new transposed frequency\n\t * @example\n\t * import { Frequency } from \"tone\";\n\t * Frequency(\"A4\").transpose(3); // \"C5\"\n\t */\n\ttranspose(interval: Interval): FrequencyClass {\n\t\treturn new FrequencyClass(this.context, this.valueOf() * intervalToFrequencyRatio(interval));\n\t}\n\n\t/**\n\t * Takes an array of semitone intervals and returns\n\t * an array of frequencies transposed by those intervals.\n\t * @return  Returns an array of Frequencies\n\t * @example\n\t * import { Frequency } from \"tone\";\n\t * Frequency(\"A4\").harmonize([0, 3, 7]); // [\"A4\", \"C5\", \"E5\"]\n\t */\n\tharmonize(intervals: Interval[]): FrequencyClass[] {\n\t\treturn intervals.map(interval => {\n\t\t\treturn this.transpose(interval);\n\t\t});\n\t}\n\n\t//-------------------------------------\n\t// \tUNIT CONVERSIONS\n\t//-------------------------------------\n\n\t/**\n\t * Return the value of the frequency as a MIDI note\n\t * @example\n\t * import { Frequency } from \"tone\";\n\t * Frequency(\"C4\").toMidi(); // 60\n\t */\n\ttoMidi(): MidiNote {\n\t\treturn ftom(this.valueOf());\n\t}\n\n\t/**\n\t * Return the value of the frequency in Scientific Pitch Notation\n\t * @example\n\t * import { Frequency } from \"tone\";\n\t * Frequency(69, \"midi\").toNote(); // \"A4\"\n\t */\n\ttoNote(): Note {\n\t\tconst freq = this.toFrequency();\n\t\tconst log = Math.log2(freq / FrequencyClass.A4);\n\t\tlet noteNumber = Math.round(12 * log) + 57;\n\t\tconst octave = Math.floor(noteNumber / 12);\n\t\tif (octave < 0) {\n\t\t\tnoteNumber += -12 * octave;\n\t\t}\n\t\tconst noteName = scaleIndexToNote[noteNumber % 12];\n\t\treturn noteName + octave.toString() as Note;\n\t}\n\n\t/**\n\t * Return the duration of one cycle in seconds.\n\t */\n\ttoSeconds(): Seconds {\n\t\treturn 1 / super.toSeconds();\n\t}\n\n\t/**\n\t * Return the duration of one cycle in ticks\n\t */\n\ttoTicks(): Ticks {\n\t\tconst quarterTime = this._beatsToUnits(1);\n\t\tconst quarters = this.valueOf() / quarterTime;\n\t\treturn Math.floor(quarters * this._getPPQ());\n\t}\n\n\t//-------------------------------------\n\t// \tUNIT CONVERSIONS HELPERS\n\t//-------------------------------------\n\n\t/**\n\t * With no arguments, return 0\n\t */\n\tprotected _noArg(): Type {\n\t\treturn 0 as Type;\n\t}\n\n\t/**\n\t * Returns the value of a frequency in the current units\n\t */\n\tprotected _frequencyToUnits(freq: Hertz): Type {\n\t\treturn freq as Type;\n\t}\n\n\t/**\n\t * Returns the value of a tick in the current time units\n\t */\n\tprotected _ticksToUnits(ticks: Ticks): Type {\n\t\treturn 1 / ((ticks * 60) / (this._getBpm() * this._getPPQ())) as Type;\n\t}\n\n\t/**\n\t * Return the value of the beats in the current units\n\t */\n\tprotected _beatsToUnits(beats: number): Type {\n\t\treturn 1 / super._beatsToUnits(beats) as Type;\n\t}\n\n\t/**\n\t * Returns the value of a second in the current units\n\t */\n\tprotected _secondsToUnits(seconds: Seconds): Type {\n\t\treturn 1 / seconds as Type;\n\t}\n\n\t/**\n\t * Convert a MIDI note to frequency value.\n\t * @param  midi The midi number to convert.\n\t * @return The corresponding frequency value\n\t */\n\tstatic mtof(midi: MidiNote): Hertz {\n\t\treturn mtof(midi);\n\t}\n\n\t/**\n\t * Convert a frequency value to a MIDI note.\n\t * @param frequency The value to frequency value to convert.\n\t */\n\tstatic ftom(frequency: Hertz): MidiNote {\n\t\treturn ftom(frequency);\n\t}\n}\n\n//-------------------------------------\n// \tFREQUENCY CONVERSIONS\n//-------------------------------------\n\n/**\n * Note to scale index. \n * @hidden\n */\nconst noteToScaleIndex = {\n\tcbb: -2, cb: -1, c: 0, \"c#\": 1, cx: 2,\n\tdbb: 0, db: 1, d: 2, \"d#\": 3, dx: 4,\n\tebb: 2, eb: 3, e: 4, \"e#\": 5, ex: 6,\n\tfbb: 3, fb: 4, f: 5, \"f#\": 6, fx: 7,\n\tgbb: 5, gb: 6, g: 7, \"g#\": 8, gx: 9,\n\tabb: 7, ab: 8, a: 9, \"a#\": 10, ax: 11,\n\tbbb: 9, bb: 10, b: 11, \"b#\": 12, bx: 13,\n};\n\n/**\n * scale index to note (sharps)\n * @hidden\n */\nconst scaleIndexToNote = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n\n/**\n * Convert a value into a FrequencyClass object.\n * @category Unit\n */\nexport function Frequency(value?: TimeValue | Frequency, units?: FrequencyUnit): FrequencyClass {\n\treturn new FrequencyClass(getContext(), value, units);\n}\n","import { getContext } from \"../Global\";\nimport { Seconds, Ticks } from \"../type/Units\";\nimport { TimeClass } from \"./Time\";\nimport { TimeBaseUnit, TimeValue } from \"./TimeBase\";\n\n/**\n * TransportTime is a the time along the Transport's\n * timeline. It is similar to Tone.Time, but instead of evaluating\n * against the AudioContext's clock, it is evaluated against\n * the Transport's position. See [TransportTime wiki](https://github.com/Tonejs/Tone.js/wiki/TransportTime).\n * @category Unit\n */\nexport class TransportTimeClass<Type extends Seconds | Ticks = Seconds> extends TimeClass<Type> {\n\n\treadonly name: string = \"TransportTime\";\n\n\t/**\n\t * Return the current time in whichever context is relevant\n\t */\n\tprotected _now(): Type {\n\t\treturn this.context.transport.seconds as Type;\n\t}\n}\n\n/**\n * TransportTime is a the time along the Transport's\n * timeline. It is similar to [[Time]], but instead of evaluating\n * against the AudioContext's clock, it is evaluated against\n * the Transport's position. See [TransportTime wiki](https://github.com/Tonejs/Tone.js/wiki/TransportTime).\n * @category Unit\n */\nexport function TransportTime(value?: TimeValue, units?: TimeBaseUnit): TransportTimeClass {\n\treturn new TransportTimeClass(getContext(), value, units);\n}\n","import { getContext } from \"../Global\";\nimport { Tone } from \"../Tone\";\nimport { FrequencyClass } from \"../type/Frequency\";\nimport { TimeClass } from \"../type/Time\";\nimport { TransportTimeClass } from \"../type/TransportTime\";\nimport { Frequency, Hertz, Seconds, Ticks, Time } from \"../type/Units\";\nimport { getDefaultsFromInstance, optionsFromArguments } from \"../util/Defaults\";\nimport { RecursivePartial } from \"../util/Interface\";\nimport { isArray, isBoolean, isDefined, isNumber, isString, isUndef } from \"../util/TypeCheck\";\nimport { BaseContext } from \"./BaseContext\";\n\n/**\n * A unit which process audio\n */\nexport interface ToneWithContextOptions {\n\tcontext: BaseContext;\n}\n\n/**\n * The Base class for all nodes that have an AudioContext.\n */\nexport abstract class ToneWithContext<Options extends ToneWithContextOptions> extends Tone {\n\n\t/**\n\t * The context belonging to the node.\n\t */\n\treadonly context: BaseContext;\n\n\t/**\n\t * The default context to use if no AudioContext is passed in to the constructor.\n\t * Probably should not be set manually. Used internally.\n\t * @hidden\n\t */\n\treadonly defaultContext?: BaseContext;\n\n\t/**\n\t * Pass in a constructor as the first argument\n\t */\n\tconstructor(context?: BaseContext)\n\tconstructor(options?: Partial<ToneWithContextOptions>);\n\tconstructor() {\n\t\tsuper();\n\t\tconst options = optionsFromArguments(ToneWithContext.getDefaults(), arguments, [\"context\"]);\n\t\tif (this.defaultContext) {\n\t\t\tthis.context = this.defaultContext;\n\t\t} else {\n\t\t\tthis.context = options.context;\n\t\t}\n\t}\n\n\tstatic getDefaults(): ToneWithContextOptions {\n\t\treturn {\n\t\t\tcontext: getContext(),\n\t\t};\n\t}\n\n\t/**\n\t * Return the current time of the Context clock plus the lookAhead.\n\t * @example\n\t * import { Transport } from \"tone\";\n\t * console.log(Transport.now());\n\t */\n\tnow(): Seconds {\n\t\treturn this.context.currentTime + this.context.lookAhead;\n\t}\n\n\t/**\n\t * Return the current time of the Context clock without any lookAhead.\n\t * @example\n\t * import { Transport } from \"tone\";\n\t * console.log(Transport.immediate());\n\t */\n\timmediate(): Seconds {\n\t\treturn this.context.currentTime;\n\t}\n\n\t/**\n\t * The duration in seconds of one sample.\n\t * @example\n\t * import { Transport } from \"tone\";\n\t * console.log(Transport.sampleTime);\n\t */\n\tget sampleTime(): Seconds {\n\t\treturn 1 / this.context.sampleRate;\n\t}\n\n\t/**\n\t * The number of seconds of 1 processing block (128 samples)\n\t * @example\n\t * import { Destination } from \"tone\";\n\t * console.log(Destination.blockTime);\n\t */\n\tget blockTime(): Seconds {\n\t\treturn 128 / this.context.sampleRate;\n\t}\n\n\t/**\n\t * Convert the incoming time to seconds\n\t */\n\ttoSeconds(time?: Time): Seconds {\n\t\treturn new TimeClass(this.context, time).toSeconds();\n\t}\n\n\t/**\n\t * Convert the input to a frequency number\n\t */\n\ttoFrequency(freq: Frequency): Hertz {\n\t\treturn new FrequencyClass(this.context, freq).toFrequency();\n\t}\n\n\t/**\n\t * Convert the input time into ticks\n\t */\n\ttoTicks(time?: Time | TimeClass): Ticks {\n\t\treturn new TransportTimeClass(this.context, time).toTicks();\n\t}\n\n\t//-------------------------------------\n\t// \tGET/SET\n\t//-------------------------------------\n\n\t/**\n\t * Get a subset of the properties which are in the partial props\n\t */\n\tprotected _getPartialProperties(props: Options): Partial<Options> {\n\t\tconst options = this.get();\n\t\t// remove attributes from the prop that are not in the partial\n\t\tObject.keys(options).forEach(name => {\n\t\t\tif (isUndef(props[name])) {\n\t\t\t\tdelete options[name];\n\t\t\t}\n\t\t});\n\t\treturn options;\n\t}\n\n\t/**\n\t * Get the object's attributes.\n\t * @example\n\t * import { Oscillator } from \"tone\";\n\t * const osc = new Oscillator();\n\t * console.log(osc.get());\n\t * // returns {\"type\" : \"sine\", \"frequency\" : 440, ...etc}\n\t */\n\tget(): Options {\n\t\tconst defaults = getDefaultsFromInstance(this) as Options;\n\t\tObject.keys(defaults).forEach(attribute => {\n\t\t\tif (Reflect.has(this, attribute)) {\n\t\t\t\tconst member = this[attribute];\n\t\t\t\tif (isDefined(member) && isDefined(member.value) && isDefined(member.setValueAtTime)) {\n\t\t\t\t\tdefaults[attribute] = member.value;\n\t\t\t\t} else if (member instanceof ToneWithContext) {\n\t\t\t\t\tdefaults[attribute] = member._getPartialProperties(defaults[attribute]);\n\t\t\t\t\t// otherwise make sure it's a serializable type\n\t\t\t\t} else if (isArray(member) || isNumber(member) || isString(member) || isBoolean(member)) {\n\t\t\t\t\tdefaults[attribute] = member;\n\t\t\t\t} else {\n\t\t\t\t\t// remove all undefined and unserializable attributes\n\t\t\t\t\tdelete defaults[attribute];\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn defaults;\n\t}\n\n\t/**\n\t * Set multiple properties at once with an object.\n\t * @example\n\t * import { Filter } from \"tone\";\n\t * const filter = new Filter();\n\t * // set values using an object\n\t * filter.set({\n\t * \tfrequency: 300,\n\t * \ttype: \"highpass\"\n\t * });\n\t */\n\tset(props: RecursivePartial<Options>): this {\n\t\tObject.keys(props).forEach(attribute => {\n\t\t\tif (Reflect.has(this, attribute) && isDefined(this[attribute])) {\n\t\t\t\tif (this[attribute] && isDefined(this[attribute].value) && isDefined(this[attribute].setValueAtTime)) {\n\t\t\t\t\t// small optimization\n\t\t\t\t\tif (this[attribute].value !== props[attribute]) {\n\t\t\t\t\t\tthis[attribute].value = props[attribute];\n\t\t\t\t\t}\n\t\t\t\t} else if (this[attribute] instanceof ToneWithContext) {\n\t\t\t\t\tthis[attribute].set(props[attribute]);\n\t\t\t\t} else {\n\t\t\t\t\tthis[attribute] = props[attribute];\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n}\n","import { Seconds } from \"../type/Units\";\nimport { Timeline, TimelineEvent } from \"./Timeline\";\nimport { assertRange } from \"./Debug\";\n\nexport type BasicPlaybackState = \"started\" | \"stopped\";\nexport type PlaybackState = BasicPlaybackState | \"paused\";\n\nexport interface StateTimelineEvent extends TimelineEvent {\n\tstate: PlaybackState;\n}\n\n/**\n * A Timeline State. Provides the methods: `setStateAtTime(\"state\", time)` and `getValueAtTime(time)`\n * @param initial The initial state of the StateTimeline.  Defaults to `undefined`\n */\nexport class StateTimeline<AdditionalOptions extends {} = {}> extends Timeline<StateTimelineEvent & AdditionalOptions> {\n\n\treadonly name: string = \"StateTimeline\";\n\n\t/**\n\t * The initial state\n\t */\n\tprivate _initial: PlaybackState;\n\n\tconstructor(initial: PlaybackState = \"stopped\") {\n\t\tsuper();\n\t\tthis._initial = initial;\n\t\tthis.setStateAtTime(this._initial, 0);\n\t}\n\n\t/**\n\t * Returns the scheduled state scheduled before or at\n\t * the given time.\n\t * @param  time  The time to query.\n\t * @return  The name of the state input in setStateAtTime.\n\t */\n\tgetValueAtTime(time: Seconds): PlaybackState {\n\t\tconst event = this.get(time);\n\t\tif (event !== null) {\n\t\t\treturn event.state;\n\t\t} else {\n\t\t\treturn this._initial;\n\t\t}\n\t}\n\n\t/**\n\t * Add a state to the timeline.\n\t * @param  state The name of the state to set.\n\t * @param  time  The time to query.\n\t * @param options Any additional options that are needed in the timeline.\n\t */\n\tsetStateAtTime(state: PlaybackState, time: Seconds, options?: AdditionalOptions): this {\n\t\tassertRange(time, 0);\n\t\tthis.add(Object.assign({}, options, {\n\t\t\tstate,\n\t\t\ttime,\n\t\t}));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Return the event before the time with the given state\n\t * @param  state The state to look for\n\t * @param  time  When to check before\n\t * @return  The event with the given state before the time\n\t */\n\tgetLastState(state: PlaybackState, time: number): StateTimelineEvent & AdditionalOptions | undefined {\n\t\t// time = this.toSeconds(time);\n\t\tconst index = this._search(time);\n\t\tfor (let i = index; i >= 0; i--) {\n\t\t\tconst event = this._timeline[i];\n\t\t\tif (event.state === state) {\n\t\t\t\treturn event;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Return the event after the time with the given state\n\t * @param  state The state to look for\n\t * @param  time  When to check from\n\t * @return  The event with the given state after the time\n\t */\n\tgetNextState(state: PlaybackState, time: number): StateTimelineEvent & AdditionalOptions | undefined {\n\t\t// time = this.toSeconds(time);\n\t\tconst index = this._search(time);\n\t\tif (index !== -1) {\n\t\t\tfor (let i = index; i < this._timeline.length; i++) {\n\t\t\t\tconst event = this._timeline[i];\n\t\t\t\tif (event.state === state) {\n\t\t\t\t\treturn event;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","import { AbstractParam } from \"../context/AbstractParam\";\nimport { dbToGain, gainToDb } from \"../type/Conversions\";\nimport { Decibels, Frequency, Positive, Time, UnitMap, UnitName } from \"../type/Units\";\nimport { isAudioParam } from \"../util/AdvancedTypeCheck\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isDefined } from \"../util/TypeCheck\";\nimport { ToneWithContext, ToneWithContextOptions } from \"./ToneWithContext\";\nimport { EQ } from \"../util/Math\";\nimport { assert, assertRange } from \"../util/Debug\";\n\nexport interface ParamOptions<TypeName extends UnitName> extends ToneWithContextOptions {\n\tunits: TypeName;\n\tvalue?: UnitMap[TypeName];\n\tparam: AudioParam | Param<TypeName>;\n\tconvert: boolean;\n\tminValue?: number;\n\tmaxValue?: number;\n\tswappable?: boolean;\n}\n\n/**\n * the possible automation types\n */\ntype AutomationType = \"linearRampToValueAtTime\" | \"exponentialRampToValueAtTime\" | \"setValueAtTime\" | \"setTargetAtTime\" | \"cancelScheduledValues\";\n\ninterface TargetAutomationEvent {\n\ttype: \"setTargetAtTime\";\n\ttime: number;\n\tvalue: number;\n\tconstant: number;\n}\n\ninterface NormalAutomationEvent {\n\ttype: Exclude<AutomationType, \"setTargetAtTime\">;\n\ttime: number;\n\tvalue: number;\n}\n/**\n * The events on the automation\n */\nexport type AutomationEvent = NormalAutomationEvent | TargetAutomationEvent;\n\n/**\n * Param wraps the native Web Audio's AudioParam to provide\n * additional unit conversion functionality. It also\n * serves as a base-class for classes which have a single,\n * automatable parameter.\n */\nexport class Param<TypeName extends UnitName = \"number\">\n\textends ToneWithContext<ParamOptions<TypeName>>\n\timplements AbstractParam<TypeName> {\n\n\treadonly name: string = \"Param\";\n\n\treadonly input: GainNode | AudioParam;\n\n\treadonly units: UnitName;\n\tconvert: boolean;\n\toverridden = false;\n\n\t/**\n\t * The timeline which tracks all of the automations.\n\t */\n\tprotected _events: Timeline<AutomationEvent>;\n\n\t/**\n\t * The native parameter to control\n\t */\n\tprotected _param: AudioParam;\n\n\t/**\n\t * The default value before anything is assigned\n\t */\n\tprotected _initialValue: number;\n\n\t/**\n\t * The minimum output value\n\t */\n\tprivate _minOutput = 1e-7;\n\n\t/**\n\t * Private reference to the min and max values if passed into the constructor\n\t */\n\tprivate readonly _minValue?: number;\n\tprivate readonly _maxValue?: number;\n\n\t/**\n\t * If the underlying AudioParam can be swapped out\n\t * using the setParam method. \n\t */\n\tprotected readonly _swappable: boolean;\n\n\t/**\n\t * @param param The AudioParam to wrap\n\t * @param units The unit name\n\t * @param convert Whether or not to convert the value to the target units\n\t */\n\tconstructor(param: AudioParam, units?: TypeName, convert?: boolean);\n\tconstructor(options: Partial<ParamOptions<TypeName>>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Param.getDefaults(), arguments, [\"param\", \"units\", \"convert\"]));\n\n\t\tconst options = optionsFromArguments(Param.getDefaults(), arguments, [\"param\", \"units\", \"convert\"]);\n\n\t\tassert(isDefined(options.param) &&\n\t\t\t(isAudioParam(options.param) || options.param instanceof Param), \"param must be an AudioParam\");\n\n\t\twhile (!isAudioParam(options.param)) {\n\t\t\toptions.param = options.param._param;\n\t\t}\n\n\t\tthis._swappable = isDefined(options.swappable) ? options.swappable : false;\n\t\tif (this._swappable) {\n\t\t\tthis.input = this.context.createGain();\n\t\t\t// initialize\n\t\t\tthis._param = options.param;\n\t\t\tthis.input.connect(this._param);\n\t\t} else {\n\t\t\tthis._param = this.input = options.param;\n\t\t}\n\t\tthis._events = new Timeline<AutomationEvent>(1000);\n\t\tthis._initialValue = this._param.defaultValue;\n\t\tthis.units = options.units;\n\t\tthis.convert = options.convert;\n\t\tthis._minValue = options.minValue;\n\t\tthis._maxValue = options.maxValue;\n\n\t\t// if the value is defined, set it immediately\n\t\tif (isDefined(options.value) && options.value !== this._toType(this._initialValue)) {\n\t\t\tthis.setValueAtTime(options.value, 0);\n\t\t}\n\t}\n\n\tstatic getDefaults(): ParamOptions<any> {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tconvert: true,\n\t\t\tunits: \"number\" as UnitName,\n\t\t} as ParamOptions<any>);\n\t}\n\n\tget value(): UnitMap[TypeName] {\n\t\tconst now = this.now();\n\t\treturn this.getValueAtTime(now);\n\t}\n\tset value(value) {\n\t\tthis.cancelScheduledValues(this.now());\n\t\tthis.setValueAtTime(value, this.now());\n\t}\n\n\tget minValue(): number {\n\t\t// if it's not the default minValue, return it\n\t\tif (isDefined(this._minValue)) {\n\t\t\treturn this._minValue;\n\t\t} else if (this.units === \"time\" || this.units === \"frequency\" ||\n\t\t\tthis.units === \"normalRange\" || this.units === \"positive\" ||\n\t\t\tthis.units === \"transportTime\" || this.units === \"ticks\" ||\n\t\t\tthis.units === \"bpm\" || this.units === \"hertz\" || this.units === \"samples\") {\n\t\t\treturn 0;\n\t\t} else if (this.units === \"audioRange\") {\n\t\t\treturn -1;\n\t\t} else if (this.units === \"decibels\") {\n\t\t\treturn -Infinity;\n\t\t} else {\n\t\t\treturn this._param.minValue;\n\t\t}\n\t}\n\n\tget maxValue(): number {\n\t\tif (isDefined(this._maxValue)) {\n\t\t\treturn this._maxValue;\n\t\t} else if (this.units === \"normalRange\" ||\n\t\t\tthis.units === \"audioRange\") {\n\t\t\treturn 1;\n\t\t} else {\n\t\t\treturn this._param.maxValue;\n\t\t}\n\t}\n\n\t/**\n\t * Type guard based on the unit name\n\t */\n\tprivate _is<T>(arg: any, type: UnitName): arg is T {\n\t\treturn this.units === type;\n\t}\n\n\t/**\n\t * Make sure the value is always in the defined range\n\t */\n\tprivate _assertRange(value: number): number {\n\t\tif (isDefined(this.maxValue) && isDefined(this.minValue)) {\n\t\t\tassertRange(value, this._fromType(this.minValue), this._fromType(this.maxValue));\n\t\t}\n\t\treturn value;\n\t}\n\n\t/**\n\t * Convert the given value from the type specified by Param.units\n\t * into the destination value (such as Gain or Frequency).\n\t */\n\tprotected _fromType(val: UnitMap[TypeName]): number {\n\t\tif (this.convert && !this.overridden) {\n\t\t\tif (this._is<Time>(val, \"time\")) {\n\t\t\t\treturn this.toSeconds(val);\n\t\t\t} else if (this._is<Decibels>(val, \"decibels\")) {\n\t\t\t\treturn dbToGain(val);\n\t\t\t} else if (this._is<Frequency>(val, \"frequency\")) {\n\t\t\t\treturn this.toFrequency(val);\n\t\t\t} else {\n\t\t\t\treturn val as number;\n\t\t\t}\n\t\t} else if (this.overridden) {\n\t\t\t// if it's overridden, should only schedule 0s\n\t\t\treturn 0;\n\t\t} else {\n\t\t\treturn val as number;\n\t\t}\n\t}\n\n\t/**\n\t * Convert the parameters value into the units specified by Param.units.\n\t */\n\tprotected _toType(val: number): UnitMap[TypeName] {\n\t\tif (this.convert && this.units === \"decibels\") {\n\t\t\treturn gainToDb(val) as UnitMap[TypeName];\n\t\t} else {\n\t\t\treturn val as UnitMap[TypeName];\n\t\t}\n\t}\n\n\t//-------------------------------------\n\t// ABSTRACT PARAM INTERFACE\n\t// all docs are generated from ParamInterface.ts\n\t//-------------------------------------\n\n\tsetValueAtTime(value: UnitMap[TypeName], time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst numericValue = this._fromType(value);\n\t\tassert(isFinite(numericValue) && isFinite(computedTime),\n\t\t\t`Invalid argument(s) to setValueAtTime: ${JSON.stringify(value)}, ${JSON.stringify(time)}`);\n\t\tthis._assertRange(numericValue);\n\t\tthis.log(this.units, \"setValueAtTime\", value, computedTime);\n\t\tthis._events.add({\n\t\t\ttime: computedTime,\n\t\t\ttype: \"setValueAtTime\",\n\t\t\tvalue: numericValue,\n\t\t});\n\t\tthis._param.setValueAtTime(numericValue, computedTime);\n\t\treturn this;\n\t}\n\n\tgetValueAtTime(time: Time): UnitMap[TypeName] {\n\t\tconst computedTime = Math.max(this.toSeconds(time), 0);\n\t\tconst after = this._events.getAfter(computedTime);\n\t\tconst before = this._events.get(computedTime);\n\t\tlet value = this._initialValue;\n\t\t// if it was set by\n\t\tif (before === null) {\n\t\t\tvalue = this._initialValue;\n\t\t} else if (before.type === \"setTargetAtTime\" && (after === null || after.type === \"setValueAtTime\")) {\n\t\t\tconst previous = this._events.getBefore(before.time);\n\t\t\tlet previousVal;\n\t\t\tif (previous === null) {\n\t\t\t\tpreviousVal = this._initialValue;\n\t\t\t} else {\n\t\t\t\tpreviousVal = previous.value;\n\t\t\t}\n\t\t\tif (before.type === \"setTargetAtTime\") {\n\t\t\t\tvalue = this._exponentialApproach(before.time, previousVal, before.value, before.constant, computedTime);\n\t\t\t}\n\t\t} else if (after === null) {\n\t\t\tvalue = before.value;\n\t\t} else if (after.type === \"linearRampToValueAtTime\" || after.type === \"exponentialRampToValueAtTime\") {\n\t\t\tlet beforeValue = before.value;\n\t\t\tif (before.type === \"setTargetAtTime\") {\n\t\t\t\tconst previous = this._events.getBefore(before.time);\n\t\t\t\tif (previous === null) {\n\t\t\t\t\tbeforeValue = this._initialValue;\n\t\t\t\t} else {\n\t\t\t\t\tbeforeValue = previous.value;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (after.type === \"linearRampToValueAtTime\") {\n\t\t\t\tvalue = this._linearInterpolate(before.time, beforeValue, after.time, after.value, computedTime);\n\t\t\t} else {\n\t\t\t\tvalue = this._exponentialInterpolate(before.time, beforeValue, after.time, after.value, computedTime);\n\t\t\t}\n\t\t} else {\n\t\t\tvalue = before.value;\n\t\t}\n\t\treturn this._toType(value);\n\t}\n\n\tsetRampPoint(time: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tlet currentVal = this.getValueAtTime(time);\n\t\tthis.cancelAndHoldAtTime(time);\n\t\tif (this._fromType(currentVal) === 0) {\n\t\t\tcurrentVal = this._toType(this._minOutput);\n\t\t}\n\t\tthis.setValueAtTime(currentVal, time);\n\t\treturn this;\n\t}\n\n\tlinearRampToValueAtTime(value: UnitMap[TypeName], endTime: Time): this {\n\t\tconst numericValue = this._fromType(value);\n\t\tconst computedTime = this.toSeconds(endTime);\n\t\tassert(isFinite(numericValue) && isFinite(computedTime),\n\t\t\t`Invalid argument(s) to linearRampToValueAtTime: ${JSON.stringify(value)}, ${JSON.stringify(endTime)}`);\n\t\tthis._assertRange(numericValue);\n\t\tthis._events.add({\n\t\t\ttime: computedTime,\n\t\t\ttype: \"linearRampToValueAtTime\",\n\t\t\tvalue: numericValue,\n\t\t});\n\t\tthis.log(this.units, \"linearRampToValueAtTime\", value, computedTime);\n\t\tthis._param.linearRampToValueAtTime(numericValue, computedTime);\n\t\treturn this;\n\t}\n\n\texponentialRampToValueAtTime(value: UnitMap[TypeName], endTime: Time): this {\n\t\tlet numericValue = this._fromType(value);\n\t\tnumericValue = Math.max(this._minOutput, numericValue);\n\t\tthis._assertRange(numericValue);\n\t\tconst computedTime = this.toSeconds(endTime);\n\t\tassert(isFinite(numericValue) && isFinite(computedTime),\n\t\t\t`Invalid argument(s) to exponentialRampToValueAtTime: ${JSON.stringify(value)}, ${JSON.stringify(endTime)}`);\n\t\t// store the event\n\t\tthis._events.add({\n\t\t\ttime: computedTime,\n\t\t\ttype: \"exponentialRampToValueAtTime\",\n\t\t\tvalue: numericValue,\n\t\t});\n\t\tthis.log(this.units, \"exponentialRampToValueAtTime\", value, computedTime);\n\t\tthis._param.exponentialRampToValueAtTime(numericValue, computedTime);\n\t\treturn this;\n\t}\n\n\texponentialRampTo(value: UnitMap[TypeName], rampTime: Time, startTime?: Time): this {\n\t\tstartTime = this.toSeconds(startTime);\n\t\tthis.setRampPoint(startTime);\n\t\tthis.exponentialRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n\t\treturn this;\n\t}\n\n\tlinearRampTo(value: UnitMap[TypeName], rampTime: Time, startTime?: Time): this {\n\t\tstartTime = this.toSeconds(startTime);\n\t\tthis.setRampPoint(startTime);\n\t\tthis.linearRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n\t\treturn this;\n\t}\n\n\ttargetRampTo(value: UnitMap[TypeName], rampTime: Time, startTime?: Time): this {\n\t\tstartTime = this.toSeconds(startTime);\n\t\tthis.setRampPoint(startTime);\n\t\tthis.exponentialApproachValueAtTime(value, startTime, rampTime);\n\t\treturn this;\n\t}\n\n\texponentialApproachValueAtTime(value: UnitMap[TypeName], time: Time, rampTime: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\trampTime = this.toSeconds(rampTime);\n\t\tconst timeConstant = Math.log(rampTime + 1) / Math.log(200);\n\t\tthis.setTargetAtTime(value, time, timeConstant);\n\t\t// at 90% start a linear ramp to the final value\n\t\tthis.cancelAndHoldAtTime(time + rampTime * 0.9);\n\t\tthis.linearRampToValueAtTime(value, time + rampTime);\n\t\treturn this;\n\t}\n\n\tsetTargetAtTime(value: UnitMap[TypeName], startTime: Time, timeConstant: Positive): this {\n\t\tconst numericValue = this._fromType(value);\n\t\t// The value will never be able to approach without timeConstant > 0.\n\t\tassert(isFinite(timeConstant) && timeConstant > 0, \"timeConstant must be a number greater than 0\");\n\t\tconst computedTime = this.toSeconds(startTime);\n\t\tthis._assertRange(numericValue);\n\t\tassert(isFinite(numericValue) && isFinite(computedTime),\n\t\t\t`Invalid argument(s) to setTargetAtTime: ${JSON.stringify(value)}, ${JSON.stringify(startTime)}`);\n\t\tthis._events.add({\n\t\t\tconstant: timeConstant,\n\t\t\ttime: computedTime,\n\t\t\ttype: \"setTargetAtTime\",\n\t\t\tvalue: numericValue,\n\t\t});\n\t\tthis.log(this.units, \"setTargetAtTime\", value, computedTime, timeConstant);\n\t\tthis._param.setTargetAtTime(numericValue, computedTime, timeConstant);\n\t\treturn this;\n\t}\n\n\tsetValueCurveAtTime(values: UnitMap[TypeName][], startTime: Time, duration: Time, scaling = 1): this {\n\t\tduration = this.toSeconds(duration);\n\t\tstartTime = this.toSeconds(startTime);\n\t\tconst startingValue = this._fromType(values[0]) * scaling;\n\t\tthis.setValueAtTime(this._toType(startingValue), startTime);\n\t\tconst segTime = duration / (values.length - 1);\n\t\tfor (let i = 1; i < values.length; i++) {\n\t\t\tconst numericValue = this._fromType(values[i]) * scaling;\n\t\t\tthis.linearRampToValueAtTime(this._toType(numericValue), startTime + i * segTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\tcancelScheduledValues(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tassert(isFinite(computedTime), `Invalid argument to cancelScheduledValues: ${JSON.stringify(time)}`);\n\t\tthis._events.cancel(computedTime);\n\t\tthis._param.cancelScheduledValues(computedTime);\n\t\tthis.log(this.units, \"cancelScheduledValues\", computedTime);\n\t\treturn this;\n\t}\n\n\tcancelAndHoldAtTime(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst valueAtTime = this._fromType(this.getValueAtTime(computedTime));\n\t\t// remove the schedule events\n\t\tassert(isFinite(computedTime), `Invalid argument to cancelAndHoldAtTime: ${JSON.stringify(time)}`);\n\n\t\tthis.log(this.units, \"cancelAndHoldAtTime\", computedTime, \"value=\" + valueAtTime);\n\t\t\n\t\t// if there is an event at the given computedTime\n\t\t// and that even is not a \"set\"\n\t\tconst before = this._events.get(computedTime);\n\t\tconst after = this._events.getAfter(computedTime);\n\t\tif (before && EQ(before.time, computedTime)) {\n\t\t\t// remove everything after\n\t\t\tif (after) {\n\t\t\t\tthis._param.cancelScheduledValues(after.time);\n\t\t\t\tthis._events.cancel(after.time);\n\t\t\t} else {\n\t\t\t\tthis._param.cancelAndHoldAtTime(computedTime);\n\t\t\t\tthis._events.cancel(computedTime + this.sampleTime);\n\t\t\t}\n\t\t} else if (after) {\n\t\t\tthis._param.cancelScheduledValues(after.time);\n\t\t\t// cancel the next event(s)\n\t\t\tthis._events.cancel(after.time);\n\t\t\tif (after.type === \"linearRampToValueAtTime\") {\n\t\t\t\tthis.linearRampToValueAtTime(this._toType(valueAtTime), computedTime);\n\t\t\t} else if (after.type === \"exponentialRampToValueAtTime\") {\n\t\t\t\tthis.exponentialRampToValueAtTime(this._toType(valueAtTime), computedTime);\n\t\t\t}\n\t\t}\n\n\t\t// set the value at the given time\n\t\tthis._events.add({\n\t\t\ttime: computedTime,\n\t\t\ttype: \"setValueAtTime\",\n\t\t\tvalue: valueAtTime,\n\t\t});\n\t\tthis._param.setValueAtTime(valueAtTime, computedTime);\n\t\treturn this;\n\t}\n\n\trampTo(value: UnitMap[TypeName], rampTime: Time = 0.1, startTime?: Time): this {\n\t\tif (this.units === \"frequency\" || this.units === \"bpm\" || this.units === \"decibels\") {\n\t\t\tthis.exponentialRampTo(value, rampTime, startTime);\n\t\t} else {\n\t\t\tthis.linearRampTo(value, rampTime, startTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Apply all of the previously scheduled events to the passed in Param or AudioParam.\n\t * The applied values will start at the context's current time and schedule\n\t * all of the events which are scheduled on this Param onto the passed in param.\n\t */\n\tapply(param: Param | AudioParam): this {\n\t\tconst now = this.context.currentTime;\n\t\t// set the param's value at the current time and schedule everything else\n\t\tparam.setValueAtTime(this.getValueAtTime(now) as number, now);\n\t\t// if the previous event was a curve, then set the rest of it\n\t\tconst previousEvent = this._events.get(now);\n\t\tif (previousEvent && previousEvent.type === \"setTargetAtTime\") {\n\t\t\t// approx it until the next event with linear ramps\n\t\t\tconst nextEvent = this._events.getAfter(previousEvent.time);\n\t\t\t// or for 2 seconds if there is no event\n\t\t\tconst endTime = nextEvent ? nextEvent.time : now + 2;\n\t\t\tconst subdivisions = (endTime - now) / 10;\n\t\t\tfor (let i = now; i < endTime; i += subdivisions) {\n\t\t\t\tparam.linearRampToValueAtTime(this.getValueAtTime(i) as number, i);\n\t\t\t}\n\t\t}\n\t\tthis._events.forEachAfter(this.context.currentTime, event => {\n\t\t\tif (event.type === \"cancelScheduledValues\") {\n\t\t\t\tparam.cancelScheduledValues(event.time);\n\t\t\t} else if (event.type === \"setTargetAtTime\") {\n\t\t\t\tparam.setTargetAtTime(event.value, event.time, event.constant);\n\t\t\t} else {\n\t\t\t\tparam[event.type](event.value, event.time);\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Replace the Param's internal AudioParam. Will apply scheduled curves \n\t * onto the parameter and replace the connections.\n\t */\n\tsetParam(param: AudioParam): this {\n\t\tassert(this._swappable, \"The Param must be assigned as 'swappable' in the constructor\");\n\t\tconst input = this.input as GainNode;\n\t\tinput.disconnect(this._param);\n\t\tthis.apply(param);\n\t\tthis._param = param;\n\t\tinput.connect(this._param);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._events.dispose();\n\t\treturn this;\n\t}\n\n\tget defaultValue(): UnitMap[TypeName] {\n\t\treturn this._toType(this._param.defaultValue);\n\t}\n\n\t//-------------------------------------\n\t// \tAUTOMATION CURVE CALCULATIONS\n\t// \tMIT License, copyright (c) 2014 Jordan Santell\n\t//-------------------------------------\n\n\t// Calculates the the value along the curve produced by setTargetAtTime\n\tprotected _exponentialApproach(t0: number, v0: number, v1: number, timeConstant: number, t: number): number {\n\t\treturn v1 + (v0 - v1) * Math.exp(-(t - t0) / timeConstant);\n\t}\n\n\t// Calculates the the value along the curve produced by linearRampToValueAtTime\n\tprotected _linearInterpolate(t0: number, v0: number, t1: number, v1: number, t: number): number {\n\t\treturn v0 + (v1 - v0) * ((t - t0) / (t1 - t0));\n\t}\n\n\t// Calculates the the value along the curve produced by exponentialRampToValueAtTime\n\tprotected _exponentialInterpolate(t0: number, v0: number, t1: number, v1: number, t: number): number {\n\t\treturn v0 * Math.pow(v1 / v0, (t - t0) / (t1 - t0));\n\t}\n}\n","import { isAudioNode, isAudioParam } from \"../util/AdvancedTypeCheck\";\nimport { isDefined } from \"../util/TypeCheck\";\nimport { Param } from \"./Param\";\nimport { ToneWithContext, ToneWithContextOptions } from \"./ToneWithContext\";\nimport { assert, warn } from \"../util/Debug\";\n\nexport type InputNode = ToneAudioNode | AudioNode | Param<any> | AudioParam;\nexport type OutputNode = ToneAudioNode | AudioNode;\n\ninterface ChannelProperties {\n\tchannelCount: number;\n\tchannelCountMode: ChannelCountMode;\n\tchannelInterpretation: ChannelInterpretation;\n}\n\n/**\n * The possible options for this node\n */\nexport type ToneAudioNodeOptions = ToneWithContextOptions;\n\n/**\n * ToneAudioNode is the base class for classes which process audio.\n */\nexport abstract class ToneAudioNode<Options extends ToneAudioNodeOptions = ToneAudioNodeOptions>\n\textends ToneWithContext<Options> {\n\n\t/**\n\t * The name of the class\n\t */\n\tabstract readonly name: string = \"ToneAudioNode\";\n\n\t/**\n\t * The input node or nodes. If the object is a source,\n\t * it does not have any input and this.input is undefined.\n\t */\n\tabstract input: InputNode | undefined;\n\n\t/**\n\t * The output nodes. If the object is a sink,\n\t * it does not have any output and this.output is undefined.\n\t */\n\tabstract output: OutputNode | undefined;\n\n\t/**\n\t * The number of inputs feeding into the AudioNode.\n\t * For source nodes, this will be 0.\n\t * @example\n\t * import { Gain } from \"tone\";\n\t * const node = new Gain();\n\t * console.log(node.numberOfInputs);\n\t */\n\tget numberOfInputs(): number {\n\t\tif (isDefined(this.input)) {\n\t\t\tif (isAudioParam(this.input) || this.input instanceof Param) {\n\t\t\t\treturn 1;\n\t\t\t} else {\n\t\t\t\treturn this.input.numberOfInputs;\n\t\t\t}\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * The number of outputs of the AudioNode.\n\t * * @example\n\t * import { Gain } from \"tone\";\n\t * const node = new Gain();\n\t * console.log(node.numberOfOutputs);\n\t */\n\tget numberOfOutputs(): number {\n\t\tif (isDefined(this.output)) {\n\t\t\treturn this.output.numberOfOutputs;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * List all of the node that must be set to match the ChannelProperties\n\t */\n\tprotected _internalChannels: OutputNode[] = [];\n\n\t//-------------------------------------\n\t// AUDIO PROPERTIES\n\t//-------------------------------------\n\n\t/**\n\t * Used to decide which nodes to get/set properties on\n\t */\n\tprivate _isAudioNode(node: any): node is AudioNode | ToneAudioNode {\n\t\treturn isDefined(node) && (node instanceof ToneAudioNode || isAudioNode(node));\n\t}\n\n\t/**\n\t * Get all of the audio nodes (either internal or input/output) which together\n\t * make up how the class node responds to channel input/output\n\t */\n\tprivate _getInternalNodes(): OutputNode[] {\n\t\tconst nodeList = this._internalChannels.slice(0);\n\t\tif (this._isAudioNode(this.input)) {\n\t\t\tnodeList.push(this.input);\n\t\t}\n\t\tif (this._isAudioNode(this.output)) {\n\t\t\tif (this.input !== this.output) {\n\t\t\t\tnodeList.push(this.output);\n\t\t\t}\n\t\t}\n\t\treturn nodeList;\n\t}\n\n\t/**\n\t * Set the audio options for this node such as channelInterpretation\n\t * channelCount, etc.\n\t * @param options\n\t */\n\tprivate _setChannelProperties(options: ChannelProperties): void {\n\t\tconst nodeList = this._getInternalNodes();\n\t\tnodeList.forEach(node => {\n\t\t\tnode.channelCount = options.channelCount;\n\t\t\tnode.channelCountMode = options.channelCountMode;\n\t\t\tnode.channelInterpretation = options.channelInterpretation;\n\t\t});\n\t}\n\n\t/**\n\t * Get the current audio options for this node such as channelInterpretation\n\t * channelCount, etc.\n\t */\n\tprivate _getChannelProperties(): ChannelProperties {\n\t\tconst nodeList = this._getInternalNodes();\n\t\tassert(nodeList.length > 0, \"ToneAudioNode does not have any internal nodes\");\n\t\t// use the first node to get properties\n\t\t// they should all be the same\n\t\tconst node = nodeList[0];\n\t\treturn {\n\t\t\tchannelCount: node.channelCount,\n\t\t\tchannelCountMode: node.channelCountMode,\n\t\t\tchannelInterpretation: node.channelInterpretation,\n\t\t};\n\t}\n\n\t/**\n\t * channelCount is the number of channels used when up-mixing and down-mixing\n\t * connections to any inputs to the node. The default value is 2 except for\n\t * specific nodes where its value is specially determined.\n\t */\n\tget channelCount(): number {\n\t\treturn this._getChannelProperties().channelCount;\n\t}\n\tset channelCount(channelCount) {\n\t\tconst props = this._getChannelProperties();\n\t\t// merge it with the other properties\n\t\tthis._setChannelProperties(Object.assign(props, { channelCount }));\n\t}\n\n\t/**\n\t * channelCountMode determines how channels will be counted when up-mixing and\n\t * down-mixing connections to any inputs to the node.\n\t * The default value is \"max\". This attribute has no effect for nodes with no inputs.\n\t * * \"max\" - computedNumberOfChannels is the maximum of the number of channels of all connections to an input. In this mode channelCount is ignored.\n\t * * \"clamped-max\" - computedNumberOfChannels is determined as for \"max\" and then clamped to a maximum value of the given channelCount.\n\t * * \"explicit\" - computedNumberOfChannels is the exact value as specified by the channelCount.\n\t */\n\tget channelCountMode(): ChannelCountMode {\n\t\treturn this._getChannelProperties().channelCountMode;\n\t}\n\tset channelCountMode(channelCountMode) {\n\t\tconst props = this._getChannelProperties();\n\t\t// merge it with the other properties\n\t\tthis._setChannelProperties(Object.assign(props, { channelCountMode }));\n\t}\n\n\t/**\n\t * channelInterpretation determines how individual channels will be treated\n\t * when up-mixing and down-mixing connections to any inputs to the node.\n\t * The default value is \"speakers\".\n\t */\n\tget channelInterpretation(): ChannelInterpretation {\n\t\treturn this._getChannelProperties().channelInterpretation;\n\t}\n\tset channelInterpretation(channelInterpretation) {\n\t\tconst props = this._getChannelProperties();\n\t\t// merge it with the other properties\n\t\tthis._setChannelProperties(Object.assign(props, { channelInterpretation }));\n\t}\n\n\t//-------------------------------------\n\t// CONNECTIONS\n\t//-------------------------------------\n\n\t/**\n\t * connect the output of a ToneAudioNode to an AudioParam, AudioNode, or ToneAudioNode\n\t * @param destination The output to connect to\n\t * @param outputNum The output to connect from\n\t * @param inputNum The input to connect to\n\t */\n\tconnect(destination: InputNode, outputNum = 0, inputNum = 0): this {\n\t\tconnect(this, destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Connect the output to the context's destination node.\n\t * @example\n\t * import { Oscillator } from \"tone\";\n\t * const osc = new Oscillator().start();\n\t * osc.toDestination();\n\t */\n\ttoDestination(): this {\n\t\tthis.connect(this.context.destination);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Connect the output to the context's destination node.\n\t * See [[toDestination]]\n\t * @deprecated\n\t */\n\ttoMaster(): this {\n\t\twarn(\"toMaster() has been renamed toDestination()\");\n\t\treturn this.toDestination();\n\t}\n\n\t/**\n\t * disconnect the output\n\t */\n\tdisconnect(destination?: InputNode, outputNum = 0, inputNum = 0): this {\n\t\tdisconnect(this, destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Connect the output of this node to the rest of the nodes in series.\n\t * @example\n\t * import { Destination, Filter, Oscillator, Volume } from \"tone\";\n\t * const osc = new Oscillator().start();\n\t * const filter = new Filter();\n\t * const volume = new Volume(-8);\n\t * // connect a node to the filter, volume and then to the master output\n\t * osc.chain(filter, volume, Destination);\n\t */\n\tchain(...nodes: InputNode[]): this {\n\t\tconnectSeries(this, ...nodes);\n\t\treturn this;\n\t}\n\n\t/**\n\t * connect the output of this node to the rest of the nodes in parallel.\n\t */\n\tfan(...nodes: InputNode[]): this {\n\t\tnodes.forEach(node => this.connect(node));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Dispose and disconnect\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (isDefined(this.input)) {\n\t\t\tif (this.input instanceof ToneAudioNode) {\n\t\t\t\tthis.input.dispose();\n\t\t\t} else if (isAudioNode(this.input)) {\n\t\t\t\tthis.input.disconnect();\n\t\t\t}\n\t\t}\n\t\tif (isDefined(this.output)) {\n\t\t\tif (this.output instanceof ToneAudioNode) {\n\t\t\t\tthis.output.dispose();\n\t\t\t} else if (isAudioNode(this.output)) {\n\t\t\t\tthis.output.disconnect();\n\t\t\t}\n\t\t}\n\t\tthis._internalChannels = [];\n\t\treturn this;\n\t}\n}\n\n//-------------------------------------\n// CONNECTIONS\n//-------------------------------------\n\n/**\n * connect together all of the arguments in series\n * @param nodes\n */\nexport function connectSeries(...nodes: InputNode[]): void {\n\tconst first = nodes.shift();\n\tnodes.reduce((prev, current) => {\n\t\tif (prev instanceof ToneAudioNode) {\n\t\t\tprev.connect(current);\n\t\t} else if (isAudioNode(prev)) {\n\t\t\tconnect(prev, current);\n\t\t}\n\t\treturn current;\n\t}, first);\n}\n\n/**\n * Connect two nodes together so that signal flows from the\n * first node to the second. Optionally specify the input and output channels.\n * @param srcNode The source node\n * @param dstNode The destination node\n * @param outputNumber The output channel of the srcNode\n * @param inputNumber The input channel of the dstNode\n */\nexport function connect(srcNode: OutputNode, dstNode: InputNode, outputNumber = 0, inputNumber = 0): void {\n\n\tassert(isDefined(srcNode), \"Cannot connect from undefined node\");\n\tassert(isDefined(dstNode), \"Cannot connect to undefined node\");\n\n\tif (dstNode instanceof ToneAudioNode || isAudioNode(dstNode)) {\n\t\tassert(dstNode.numberOfInputs > 0, \"Cannot connect to node with no inputs\");\n\t}\n\tassert(srcNode.numberOfOutputs > 0, \"Cannot connect from node with no outputs\");\n\n\t// resolve the input of the dstNode\n\twhile ((dstNode instanceof ToneAudioNode || dstNode instanceof Param)) {\n\t\tif (isDefined(dstNode.input)) {\n\t\t\tdstNode = dstNode.input;\n\t\t}\n\t}\n\n\twhile (srcNode instanceof ToneAudioNode) {\n\t\tif (isDefined(srcNode.output)) {\n\t\t\tsrcNode = srcNode.output;\n\t\t}\n\t}\n\n\t// make the connection\n\tif (isAudioParam(dstNode)) {\n\t\tsrcNode.connect(dstNode as AudioParam, outputNumber);\n\t} else {\n\t\tsrcNode.connect(dstNode, outputNumber, inputNumber);\n\t}\n}\n\n/**\n * Disconnect a node from all nodes or optionally include a destination node and input/output channels.\n * @param srcNode The source node\n * @param dstNode The destination node\n * @param outputNumber The output channel of the srcNode\n * @param inputNumber The input channel of the dstNode\n */\nexport function disconnect(\n\tsrcNode: OutputNode,\n\tdstNode?: InputNode,\n\toutputNumber = 0,\n\tinputNumber = 0,\n): void {\n\n\t// resolve the destination node\n\tif (isDefined(dstNode)) {\n\t\twhile (dstNode instanceof ToneAudioNode) {\n\t\t\tdstNode = dstNode.input;\n\t\t}\n\t}\n\n\t// resolve the src node\n\twhile (!(isAudioNode(srcNode))) {\n\t\tif (isDefined(srcNode.output)) {\n\t\t\tsrcNode = srcNode.output;\n\t\t}\n\t}\n\n\tif (isAudioParam(dstNode)) {\n\t\tsrcNode.disconnect(dstNode, outputNumber);\n\t} else if (isAudioNode(dstNode)) {\n\t\tsrcNode.disconnect(dstNode, outputNumber, inputNumber);\n\t} else {\n\t\tsrcNode.disconnect();\n\t}\n}\n","import { Param } from \"../context/Param\";\nimport { UnitMap, UnitName } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"./ToneAudioNode\";\n\ninterface GainOptions<TypeName extends UnitName> extends ToneAudioNodeOptions {\n\tgain: UnitMap[TypeName];\n\tunits: TypeName;\n\tconvert: boolean;\n\tminValue?: number;\n\tmaxValue?: number;\n}\n\n/**\n * A thin wrapper around the Native Web Audio GainNode.\n * The GainNode is a basic building block of the Web Audio\n * API and is useful for routing audio and adjusting gains.\n * @category Core\n */\nexport class Gain<TypeName extends \"gain\" | \"decibels\" | \"normalRange\" = \"gain\"> extends ToneAudioNode<GainOptions<TypeName>> {\n\n\treadonly name: string = \"Gain\";\n\n\t/**\n\t * The gain parameter of the gain node.\n\t */\n\treadonly gain: Param<TypeName>;\n\n\t/**\n\t * The wrapped GainNode.\n\t */\n\tprivate _gainNode: GainNode = this.context.createGain();\n\n\t// input = output\n\treadonly input: GainNode = this._gainNode;\n\treadonly output: GainNode = this._gainNode;\n\n\t/**\n\t * @param  gain The initial gain of the GainNode\n\t * @param units The units of the gain parameter.\n\t */\n\tconstructor(gain?: UnitMap[TypeName], units?: TypeName);\n\tconstructor(options?: Partial<GainOptions<TypeName>>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Gain.getDefaults(), arguments, [\"gain\", \"units\"]));\n\t\tconst options = optionsFromArguments(Gain.getDefaults(), arguments, [\"gain\", \"units\"]);\n\n\t\tthis.gain = new Param({\n\t\t\tcontext: this.context,\n\t\t\tconvert: options.convert,\n\t\t\tparam: this._gainNode.gain,\n\t\t\tunits: options.units,\n\t\t\tvalue: options.gain,\n\t\t\tminValue: options.minValue,\n\t\t\tmaxValue: options.maxValue,\n\t\t});\n\t\treadOnly(this, \"gain\");\n\t}\n\n\tstatic getDefaults(): GainOptions<any> {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tconvert: true,\n\t\t\tgain: 1,\n\t\t\tunits: \"gain\",\n\t\t});\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._gainNode.disconnect();\n\t\tthis.gain.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../core/context/Gain\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { GainFactor, Seconds, Time } from \"../core/type/Units\";\nimport { noOp } from \"../core/util/Interface\";\nimport { assert } from \"../core/util/Debug\";\nimport { BasicPlaybackState } from \"../core/util/StateTimeline\";\n\nexport type OneShotSourceCurve = \"linear\" | \"exponential\";\n\ntype onEndedCallback = (source: OneShotSource<any>) => void;\n\nexport interface OneShotSourceOptions extends ToneAudioNodeOptions {\n\tonended: onEndedCallback;\n\tfadeIn: Time;\n\tfadeOut: Time;\n\tcurve: OneShotSourceCurve;\n}\n\n/**\n * Base class for fire-and-forget nodes\n */\nexport abstract class OneShotSource<Options extends ToneAudioNodeOptions> extends ToneAudioNode<Options> {\n\n\t/**\n\t * The callback to invoke after the\n\t * source is done playing.\n\t */\n\tonended: onEndedCallback = noOp;\n\n\t/**\n\t * Sources do not have input nodes\n\t */\n\tinput: undefined;\n\n\t/**\n\t * The start time\n\t */\n\tprotected _startTime = -1;\n\n\t/**\n\t * The stop time\n\t */\n\tprotected _stopTime = -1;\n\n\t/**\n\t * The id of the timeout\n\t */\n\tprivate _timeout = -1;\n\n\t/**\n\t * The public output node\n\t */\n\toutput: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\n\t/**\n\t * The output gain node.\n\t */\n\tprotected _gainNode = this.output;\n\n\t/**\n\t * The fadeIn time of the amplitude envelope.\n\t */\n\tprotected _fadeIn: Time;\n\n\t/**\n\t * The fadeOut time of the amplitude envelope.\n\t */\n\tprotected _fadeOut: Time;\n\n\t/**\n\t * The curve applied to the fades, either \"linear\" or \"exponential\"\n\t */\n\tprotected _curve: OneShotSourceCurve;\n\n\tconstructor(options: OneShotSourceOptions) {\n\t\tsuper(options);\n\n\t\tthis._fadeIn = options.fadeIn;\n\t\tthis._fadeOut = options.fadeOut;\n\t\tthis._curve = options.curve;\n\t\tthis.onended = options.onended;\n\t}\n\n\tstatic getDefaults(): OneShotSourceOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tcurve: \"linear\" as OneShotSourceCurve,\n\t\t\tfadeIn: 0,\n\t\t\tfadeOut: 0,\n\t\t\tonended: noOp,\n\t\t});\n\t}\n\n\t/**\n\t * Stop the source node\n\t */\n\tprotected abstract _stopSource(time: Seconds): void;\n\n\t/**\n\t * Start the source node at the given time\n\t * @param  time When to start the node\n\t */\n\tprotected abstract start(time?: Time): this;\n\t/**\n\t * Start the source at the given time\n\t * @param  time When to start the source\n\t */\n\tprotected _startGain(time: Seconds, gain: GainFactor = 1): this {\n\t\tassert(this._startTime === -1, \"Source cannot be started more than once\");\n\t\t// apply a fade in envelope\n\t\tconst fadeInTime = this.toSeconds(this._fadeIn);\n\n\t\t// record the start time\n\t\tthis._startTime = time + fadeInTime;\n\t\tthis._startTime = Math.max(this._startTime, this.context.currentTime);\n\n\t\t// schedule the envelope\n\t\tif (fadeInTime > 0) {\n\t\t\tthis._gainNode.gain.setValueAtTime(0, time);\n\t\t\tif (this._curve === \"linear\") {\n\t\t\t\tthis._gainNode.gain.linearRampToValueAtTime(gain, time + fadeInTime);\n\t\t\t} else {\n\t\t\t\tthis._gainNode.gain.exponentialApproachValueAtTime(gain, time, fadeInTime);\n\t\t\t}\n\t\t} else {\n\t\t\tthis._gainNode.gain.setValueAtTime(gain, time);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the source node at the given time.\n\t * @param time When to stop the source\n\t */\n\tstop(time?: Time): this {\n\t\tthis.log(\"stop\", time);\n\t\tthis._stopGain(this.toSeconds(time));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the source at the given time\n\t * @param  time When to stop the source\n\t */\n\tprotected _stopGain(time: Seconds): this {\n\t\tassert(this._startTime !== -1, \"'start' must be called before 'stop'\");\n\t\t// cancel the previous stop\n\t\tthis.cancelStop();\n\n\t\t// the fadeOut time\n\t\tconst fadeOutTime = this.toSeconds(this._fadeOut);\n\n\t\t// schedule the stop callback\n\t\tthis._stopTime = this.toSeconds(time) + fadeOutTime;\n\t\tthis._stopTime = Math.max(this._stopTime, this.context.currentTime);\n\t\tif (fadeOutTime > 0) {\n\t\t\t// start the fade out curve at the given time\n\t\t\tif (this._curve === \"linear\") {\n\t\t\t\tthis._gainNode.gain.linearRampTo(0, fadeOutTime, time);\n\t\t\t} else {\n\t\t\t\tthis._gainNode.gain.targetRampTo(0, fadeOutTime, time);\n\t\t\t}\n\t\t} else {\n\t\t\t// stop any ongoing ramps, and set the value to 0\n\t\t\tthis._gainNode.gain.cancelAndHoldAtTime(time);\n\t\t\tthis._gainNode.gain.setValueAtTime(0, time);\n\t\t}\n\t\tthis.context.clearTimeout(this._timeout);\n\t\tthis._timeout = this.context.setTimeout(() => {\n\t\t\t// allow additional time for the exponential curve to fully decay\n\t\t\tconst additionalTail = this._curve === \"exponential\" ? fadeOutTime * 2 : 0;\n\t\t\tthis._stopSource(this.now() + additionalTail);\n\t\t\tthis._onended();\n\t\t}, this._stopTime - this.context.currentTime);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Invoke the onended callback\n\t */\n\tprotected _onended(): void {\n\t\tif (this.onended !== noOp) {\n\t\t\tthis.onended(this);\n\t\t\t// overwrite onended to make sure it only is called once\n\t\t\tthis.onended = noOp;\n\t\t\t// dispose when it's ended to free up for garbage collection only in the online context\n\t\t\tif (!this.context.isOffline) {\n\t\t\t\tsetTimeout(() => this.dispose(), 1000);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Get the playback state at the given time\n\t */\n\tgetStateAtTime = function(time: Time): BasicPlaybackState {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._startTime !== -1 && computedTime >= this._startTime &&\n\t\t\t(this._stopTime === -1 || computedTime <= this._stopTime)) {\n\t\t\treturn \"started\";\n\t\t} else {\n\t\t\treturn \"stopped\";\n\t\t}\n\t};\n\n\t/**\n\t * Get the playback state at the current time\n\t */\n\tget state(): BasicPlaybackState {\n\t\treturn this.getStateAtTime(this.now());\n\t}\n\n\t/**\n\t * Cancel a scheduled stop event\n\t */\n\tcancelStop(): this {\n\t\tthis.log(\"cancelStop\");\n\t\tassert(this._startTime !== -1, \"Source is not started\");\n\t\t// cancel the stop envelope\n\t\tthis._gainNode.gain.cancelScheduledValues(this._startTime + this.sampleTime);\n\t\tthis.context.clearTimeout(this._timeout);\n\t\tthis._stopTime = -1;\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._gainNode.disconnect();\n\t\treturn this;\n\t}\n}\n","import { connect } from \"../core/context/ToneAudioNode\";\nimport { Param } from \"../core/context/Param\";\nimport { Seconds, Time, UnitMap, UnitName } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { OneShotSource, OneShotSourceOptions } from \"../source/OneShotSource\";\n\nexport interface ToneConstantSourceOptions<TypeName extends UnitName> extends OneShotSourceOptions {\n\tconvert: boolean;\n\toffset: UnitMap[TypeName];\n\tunits: TypeName;\n\tminValue?: number;\n\tmaxValue?: number;\n}\n\n/**\n * Wrapper around the native fire-and-forget ConstantSource.\n * Adds the ability to reschedule the stop method.\n * @category Signal\n */\nexport class ToneConstantSource<TypeName extends UnitName = \"number\"> extends OneShotSource<ToneConstantSourceOptions<TypeName>> {\n\n\treadonly name: string = \"ToneConstantSource\";\n\n\t/**\n\t * The signal generator\n\t */\n\tprivate _source = this.context.createConstantSource();\n\n\t/**\n\t * The offset of the signal generator\n\t */\n\treadonly offset: Param<TypeName>;\n\n\t/**\n\t * @param  offset   The offset value\n\t */\n\tconstructor(offset: UnitMap[TypeName]);\n\tconstructor(options?: Partial<ToneConstantSourceOptions<TypeName>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(ToneConstantSource.getDefaults(), arguments, [\"offset\"]));\n\t\tconst options = optionsFromArguments(ToneConstantSource.getDefaults(), arguments, [\"offset\"]);\n\n\t\tconnect(this._source, this._gainNode);\n\n\t\tthis.offset = new Param({\n\t\t\tcontext: this.context,\n\t\t\tconvert: options.convert,\n\t\t\tparam: this._source.offset,\n\t\t\tunits: options.units,\n\t\t\tvalue: options.offset,\n\t\t\tminValue: options.minValue,\n\t\t\tmaxValue: options.maxValue,\n\t\t});\n\t}\n\n\tstatic getDefaults(): ToneConstantSourceOptions<any> {\n\t\treturn Object.assign(OneShotSource.getDefaults(), {\n\t\t\tconvert: true,\n\t\t\toffset: 1,\n\t\t\tunits: \"number\" as UnitName,\n\t\t});\n\t}\n\n\t/**\n\t * Start the source node at the given time\n\t * @param  time When to start the source\n\t */\n\tstart(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis.log(\"start\", computedTime);\n\t\tthis._startGain(computedTime);\n\t\tthis._source.start(computedTime);\n\t\treturn this;\n\t}\n\n\tprotected _stopSource(time?: Seconds): void {\n\t\tthis._source.stop(time);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (this.state === \"started\") {\n\t\t\tthis.stop();\n\t\t}\n\t\tthis._source.disconnect();\n\t\tthis.offset.dispose();\n\t\treturn this;\n\t}\n}\n","import { AbstractParam } from \"../core/context/AbstractParam\";\nimport { Param } from \"../core/context/Param\";\nimport { InputNode, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { connect } from \"../core/context/ToneAudioNode\";\nimport { Time, UnitMap, UnitName } from \"../core/type/Units\";\nimport { isAudioParam } from \"../core/util/AdvancedTypeCheck\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { ToneConstantSource } from \"./ToneConstantSource\";\n\nexport interface SignalOptions<TypeName extends UnitName> extends ToneAudioNodeOptions {\n\tvalue: UnitMap[TypeName];\n\tunits: TypeName;\n\tconvert: boolean;\n\tminValue?: number;\n\tmaxValue?: number;\n}\n\n/**\n * A signal is an audio-rate value. Tone.Signal is a core component of the library.\n * Unlike a number, Signals can be scheduled with sample-level accuracy. Tone.Signal\n * has all of the methods available to native Web Audio\n * [AudioParam](http://webaudio.github.io/web-audio-api/#the-audioparam-interface)\n * as well as additional conveniences. Read more about working with signals\n * [here](https://github.com/Tonejs/Tone.js/wiki/Signals).\n *\n * @example\n * import { Oscillator, Signal } from \"tone\";\n * const osc = new Oscillator().toDestination().start();\n * // a scheduleable signal which can be connected to control an AudioParam or another Signal\n * const signal = new Signal({\n * \tvalue: \"C4\",\n * \tunits: \"frequency\"\n * }).connect(osc.frequency);\n * // the scheduled ramp controls the connected signal\n * signal.rampTo(\"C2\", 4, \"+0.5\");\n * @category Signal\n */\nexport class Signal<TypeName extends UnitName = \"number\"> extends ToneAudioNode<SignalOptions<any>>\n\timplements AbstractParam<TypeName> {\n\n\treadonly name: string = \"Signal\";\n\n\t/**\n\t * Indicates if the value should be overridden on connection.\n\t */\n\treadonly override: boolean = true;\n\n\t/**\n\t * The constant source node which generates the signal\n\t */\n\tprotected _constantSource: ToneConstantSource<TypeName>;\n\treadonly output: OutputNode;\n\tprotected _param: Param<TypeName>;\n\treadonly input: InputNode;\n\n\t/**\n\t * @param value Initial value of the signal\n\t * @param units The unit name, e.g. \"frequency\"\n\t */\n\tconstructor(value?: UnitMap[TypeName], units?: TypeName);\n\tconstructor(options?: Partial<SignalOptions<TypeName>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]));\n\n\t\tconst options = optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]) as SignalOptions<TypeName>;\n\n\t\tthis.output = this._constantSource = new ToneConstantSource({\n\t\t\tcontext: this.context,\n\t\t\tconvert: options.convert,\n\t\t\toffset: options.value,\n\t\t\tunits: options.units,\n\t\t\tminValue: options.minValue,\n\t\t\tmaxValue: options.maxValue,\n\t\t});\n\t\tthis._constantSource.start(0);\n\t\tthis.input = this._param = this._constantSource.offset;\n\t}\n\n\tstatic getDefaults(): SignalOptions<any> {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tconvert: true,\n\t\t\tunits: \"number\" as UnitName,\n\t\t\tvalue: 0,\n\t\t});\n\t}\n\n\tconnect(destination: InputNode, outputNum = 0, inputNum = 0): this {\n\t\t// start it only when connected to something\n\t\tconnectSignal(this, destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._param.dispose();\n\t\tthis._constantSource.dispose();\n\t\treturn this;\n\t}\n\n\t//-------------------------------------\n\t// ABSTRACT PARAM INTERFACE\n\t// just a proxy for the ConstantSourceNode's offset AudioParam\n\t// all docs are generated from AbstractParam.ts\n\t//-------------------------------------\n\n\tsetValueAtTime(value: UnitMap[TypeName], time: Time): this {\n\t\tthis._param.setValueAtTime(value, time);\n\t\treturn this;\n\t}\n\tgetValueAtTime(time: Time): UnitMap[TypeName] {\n\t\treturn this._param.getValueAtTime(time);\n\t}\n\tsetRampPoint(time: Time): this {\n\t\tthis._param.setRampPoint(time);\n\t\treturn this;\n\t}\n\tlinearRampToValueAtTime(value: UnitMap[TypeName], time: Time): this {\n\t\tthis._param.linearRampToValueAtTime(value, time);\n\t\treturn this;\n\t}\n\texponentialRampToValueAtTime(value: UnitMap[TypeName], time: Time): this {\n\t\tthis._param.exponentialRampToValueAtTime(value, time);\n\t\treturn this;\n\t}\n\texponentialRampTo(value: UnitMap[TypeName], rampTime: Time, startTime?: Time): this {\n\t\tthis._param.exponentialRampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\tlinearRampTo(value: UnitMap[TypeName], rampTime: Time, startTime?: Time): this {\n\t\tthis._param.linearRampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\ttargetRampTo(value: UnitMap[TypeName], rampTime: Time, startTime?: Time): this {\n\t\tthis._param.targetRampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\texponentialApproachValueAtTime(value: UnitMap[TypeName], time: Time, rampTime: Time): this {\n\t\tthis._param.exponentialApproachValueAtTime(value, time, rampTime);\n\t\treturn this;\n\t}\n\tsetTargetAtTime(value: UnitMap[TypeName], startTime: Time, timeConstant: number): this {\n\t\tthis._param.setTargetAtTime(value, startTime, timeConstant);\n\t\treturn this;\n\t}\n\tsetValueCurveAtTime(values: UnitMap[TypeName][], startTime: Time, duration: Time, scaling?: number): this {\n\t\tthis._param.setValueCurveAtTime(values, startTime, duration, scaling);\n\t\treturn this;\n\t}\n\tcancelScheduledValues(time: Time): this {\n\t\tthis._param.cancelScheduledValues(time);\n\t\treturn this;\n\t}\n\tcancelAndHoldAtTime(time: Time): this {\n\t\tthis._param.cancelAndHoldAtTime(time);\n\t\treturn this;\n\t}\n\trampTo(value: UnitMap[TypeName], rampTime: Time, startTime?: Time): this {\n\t\tthis._param.rampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\n\tget value(): UnitMap[TypeName] {\n\t\treturn this._param.value;\n\t}\n\tset value(value: UnitMap[TypeName]) {\n\t\tthis._param.value = value;\n\t}\n\n\tget convert(): boolean {\n\t\treturn this._param.convert;\n\t}\n\tset convert(convert: boolean) {\n\t\tthis._param.convert = convert;\n\t}\n\n\tget units(): UnitName {\n\t\treturn this._param.units;\n\t}\n\n\tget overridden(): boolean {\n\t\treturn this._param.overridden;\n\t}\n\tset overridden(overridden: boolean) {\n\t\tthis._param.overridden = overridden;\n\t}\n\n\tget maxValue(): number {\n\t\treturn this._param.maxValue;\n\t}\n\tget minValue(): number {\n\t\treturn this._param.minValue;\n\t}\n\n\t/**\n\t * See [[Param.apply]].\n\t */\n\tapply(param: Param | AudioParam): this {\n\t\tthis._param.apply(param);\n\t\treturn this;\n\t}\n}\n\n/**\n * When connecting from a signal, it's necessary to zero out the node destination\n * node if that node is also a signal. If the destination is not 0, then the values\n * will be summed. This method insures that the output of the destination signal will\n * be the same as the source signal, making the destination signal a pass through node.\n * @param signal The output signal to connect from\n * @param destination the destination to connect to\n * @param outputNum the optional output number\n * @param inputNum the input number\n */\nexport function connectSignal(signal: OutputNode, destination: InputNode, outputNum?: number, inputNum?: number): void {\n\tif (destination instanceof Param || isAudioParam(destination) ||\n\t\t(destination instanceof Signal && destination.override)) {\n\t\t// cancel changes\n\t\tdestination.cancelScheduledValues(0);\n\t\t// reset the value\n\t\tdestination.setValueAtTime(0, 0);\n\t\t// mark the value as overridden\n\t\tif (destination instanceof Signal) {\n\t\t\tdestination.overridden = true;\n\t\t}\n\t}\n\tconnect(signal, destination, outputNum, inputNum);\n}\n","import { AutomationEvent, Param, ParamOptions } from \"../context/Param\";\nimport { Seconds, Ticks, Time, UnitMap, UnitName } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isUndef } from \"../util/TypeCheck\";\n\ntype TickAutomationEvent = AutomationEvent & {\n\tticks: number;\n};\n\ninterface TickParamOptions<TypeName extends UnitName> extends ParamOptions<TypeName> {\n\tmultiplier: number;\n}\n\n/**\n * A Param class just for computing ticks. Similar to the [[Param]] class,\n * but offers conversion to BPM values as well as ability to compute tick\n * duration and elapsed ticks\n */\nexport class TickParam<TypeName extends \"hertz\" | \"bpm\"> extends Param<TypeName> {\n\n\treadonly name: string = \"TickParam\";\n\n\t/**\n\t * The timeline which tracks all of the automations.\n\t */\n\tprotected _events: Timeline<TickAutomationEvent> = new Timeline(Infinity);\n\n\t/**\n\t * The internal holder for the multiplier value\n\t */\n\tprivate _multiplier = 1;\n\n\t/**\n\t * @param param The AudioParam to wrap\n\t * @param units The unit name\n\t * @param convert Whether or not to convert the value to the target units\n\t */\n\t/**\n\t * @param value The initial value of the signal\n\t */\n\tconstructor(value?: number);\n\tconstructor(options: Partial<TickParamOptions<TypeName>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(TickParam.getDefaults(), arguments, [\"value\"]));\n\t\tconst options = optionsFromArguments(TickParam.getDefaults(), arguments, [\"value\"]);\n\n\t\t// set the multiplier\n\t\tthis._multiplier = options.multiplier;\n\n\t\t// clear the ticks from the beginning\n\t\tthis._events.cancel(0);\n\t\t// set an initial event\n\t\tthis._events.add({\n\t\t\tticks: 0,\n\t\t\ttime: 0,\n\t\t\ttype: \"setValueAtTime\",\n\t\t\tvalue: this._fromType(options.value),\n\t\t});\n\t\tthis.setValueAtTime(options.value, 0);\n\t}\n\n\tstatic getDefaults(): TickParamOptions<any> {\n\t\treturn Object.assign(Param.getDefaults(), {\n\t\t\tmultiplier: 1,\n\t\t\tunits: \"hertz\",\n\t\t\tvalue: 1,\n\t\t});\n\t}\n\n\tsetTargetAtTime(value: UnitMap[TypeName], time: Time, constant: number): this {\n\t\t// approximate it with multiple linear ramps\n\t\ttime = this.toSeconds(time);\n\t\tthis.setRampPoint(time);\n\t\tconst computedValue = this._fromType(value);\n\n\t\t// start from previously scheduled value\n\t\tconst prevEvent = this._events.get(time) as TickAutomationEvent;\n\t\tconst segments = Math.round(Math.max(1 / constant, 1));\n\t\tfor (let i = 0; i <= segments; i++) {\n\t\t\tconst segTime = constant * i + time;\n\t\t\tconst rampVal = this._exponentialApproach(prevEvent.time, prevEvent.value, computedValue, constant, segTime);\n\t\t\tthis.linearRampToValueAtTime(this._toType(rampVal), segTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\tsetValueAtTime(value: UnitMap[TypeName], time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tsuper.setValueAtTime(value, time);\n\t\tconst event = this._events.get(computedTime) as TickAutomationEvent;\n\t\tconst previousEvent = this._events.previousEvent(event);\n\t\tconst ticksUntilTime = this._getTicksUntilEvent(previousEvent, computedTime);\n\t\tevent.ticks = Math.max(ticksUntilTime, 0);\n\t\treturn this;\n\t}\n\n\tlinearRampToValueAtTime(value: UnitMap[TypeName], time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tsuper.linearRampToValueAtTime(value, time);\n\t\tconst event = this._events.get(computedTime) as TickAutomationEvent;\n\t\tconst previousEvent = this._events.previousEvent(event);\n\t\tconst ticksUntilTime = this._getTicksUntilEvent(previousEvent, computedTime);\n\t\tevent.ticks = Math.max(ticksUntilTime, 0);\n\t\treturn this;\n\t}\n\n\texponentialRampToValueAtTime(value: UnitMap[TypeName], time: Time): this {\n\t\t// aproximate it with multiple linear ramps\n\t\ttime = this.toSeconds(time);\n\t\tconst computedVal = this._fromType(value);\n\n\t\t// start from previously scheduled value\n\t\tconst prevEvent = this._events.get(time) as TickAutomationEvent;\n\t\t// approx 10 segments per second\n\t\tconst segments = Math.round(Math.max((time - prevEvent.time) * 10, 1));\n\t\tconst segmentDur = ((time - prevEvent.time) / segments);\n\t\tfor (let i = 0; i <= segments; i++) {\n\t\t\tconst segTime = segmentDur * i + prevEvent.time;\n\t\t\tconst rampVal = this._exponentialInterpolate(prevEvent.time, prevEvent.value, time, computedVal, segTime);\n\t\t\tthis.linearRampToValueAtTime(this._toType(rampVal), segTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the tick value at the time. Takes into account\n\t * any automation curves scheduled on the signal.\n\t * @param  event The time to get the tick count at\n\t * @return The number of ticks which have elapsed at the time given any automations.\n\t */\n\tprivate _getTicksUntilEvent(event: TickAutomationEvent | null, time: number): Ticks {\n\t\tif (event === null) {\n\t\t\tevent = {\n\t\t\t\tticks: 0,\n\t\t\t\ttime: 0,\n\t\t\t\ttype: \"setValueAtTime\",\n\t\t\t\tvalue: 0,\n\t\t\t};\n\t\t} else if (isUndef(event.ticks)) {\n\t\t\tconst previousEvent = this._events.previousEvent(event);\n\t\t\tevent.ticks = this._getTicksUntilEvent(previousEvent, event.time);\n\t\t}\n\t\tconst val0 = this._fromType(this.getValueAtTime(event.time));\n\t\tlet val1 = this._fromType(this.getValueAtTime(time));\n\t\t// if it's right on the line, take the previous value\n\t\tconst onTheLineEvent = this._events.get(time);\n\t\tif (onTheLineEvent && onTheLineEvent.time === time && onTheLineEvent.type === \"setValueAtTime\") {\n\t\t\tval1 = this._fromType(this.getValueAtTime(time - this.sampleTime));\n\t\t}\n\t\treturn 0.5 * (time - event.time) * (val0 + val1) + event.ticks;\n\t}\n\n\t/**\n\t * Returns the tick value at the time. Takes into account\n\t * any automation curves scheduled on the signal.\n\t * @param  time The time to get the tick count at\n\t * @return The number of ticks which have elapsed at the time given any automations.\n\t */\n\tgetTicksAtTime(time: Time): Ticks {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst event = this._events.get(computedTime);\n\t\treturn Math.max(this._getTicksUntilEvent(event, computedTime), 0);\n\t}\n\n\t/**\n\t * Return the elapsed time of the number of ticks from the given time\n\t * @param ticks The number of ticks to calculate\n\t * @param  time The time to get the next tick from\n\t * @return The duration of the number of ticks from the given time in seconds\n\t */\n\tgetDurationOfTicks(ticks: Ticks, time: Time): Seconds {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst currentTick = this.getTicksAtTime(time);\n\t\treturn this.getTimeOfTick(currentTick + ticks) - computedTime;\n\t}\n\n\t/**\n\t * Given a tick, returns the time that tick occurs at.\n\t * @return The time that the tick occurs.\n\t */\n\tgetTimeOfTick(tick: Ticks): Seconds {\n\t\tconst before = this._events.get(tick, \"ticks\");\n\t\tconst after = this._events.getAfter(tick, \"ticks\");\n\t\tif (before && before.ticks === tick) {\n\t\t\treturn before.time;\n\t\t} else if (before && after &&\n\t\t\tafter.type === \"linearRampToValueAtTime\" &&\n\t\t\tbefore.value !== after.value) {\n\t\t\tconst val0 = this._fromType(this.getValueAtTime(before.time));\n\t\t\tconst val1 = this._fromType(this.getValueAtTime(after.time));\n\t\t\tconst delta = (val1 - val0) / (after.time - before.time);\n\t\t\tconst k = Math.sqrt(Math.pow(val0, 2) - 2 * delta * (before.ticks - tick));\n\t\t\tconst sol1 = (-val0 + k) / delta;\n\t\t\tconst sol2 = (-val0 - k) / delta;\n\t\t\treturn (sol1 > 0 ? sol1 : sol2) + before.time;\n\t\t} else if (before) {\n\t\t\tif (before.value === 0) {\n\t\t\t\treturn Infinity;\n\t\t\t} else {\n\t\t\t\treturn before.time + (tick - before.ticks) / before.value;\n\t\t\t}\n\t\t} else {\n\t\t\treturn tick / this._initialValue;\n\t\t}\n\t}\n\n\t/**\n\t * Convert some number of ticks their the duration in seconds accounting\n\t * for any automation curves starting at the given time.\n\t * @param  ticks The number of ticks to convert to seconds.\n\t * @param  when  When along the automation timeline to convert the ticks.\n\t * @return The duration in seconds of the ticks.\n\t */\n\tticksToTime(ticks: Ticks, when: Time): Seconds {\n\t\treturn this.getDurationOfTicks(ticks, when);\n\t}\n\n\t/**\n\t * The inverse of [[ticksToTime]]. Convert a duration in\n\t * seconds to the corresponding number of ticks accounting for any\n\t * automation curves starting at the given time.\n\t * @param  duration The time interval to convert to ticks.\n\t * @param  when When along the automation timeline to convert the ticks.\n\t * @return The duration in ticks.\n\t */\n\ttimeToTicks(duration: Time, when: Time): Ticks {\n\t\tconst computedTime = this.toSeconds(when);\n\t\tconst computedDuration = this.toSeconds(duration);\n\t\tconst startTicks = this.getTicksAtTime(computedTime);\n\t\tconst endTicks = this.getTicksAtTime(computedTime + computedDuration);\n\t\treturn endTicks - startTicks;\n\t}\n\n\t/**\n\t * Convert from the type when the unit value is BPM\n\t */\n\tprotected _fromType(val: UnitMap[TypeName]): number {\n\t\tif (this.units === \"bpm\" && this.multiplier) {\n\t\t\treturn 1 / (60 / val / this.multiplier);\n\t\t} else {\n\t\t\treturn super._fromType(val);\n\t\t}\n\t}\n\n\t/**\n\t * Special case of type conversion where the units === \"bpm\"\n\t */\n\tprotected _toType(val: number): UnitMap[TypeName] {\n\t\tif (this.units === \"bpm\" && this.multiplier) {\n\t\t\treturn (val / this.multiplier) * 60 as UnitMap[TypeName];\n\t\t} else {\n\t\t\treturn super._toType(val);\n\t\t}\n\t}\n\t/**\n\t * A multiplier on the bpm value. Useful for setting a PPQ relative to the base frequency value.\n\t */\n\tget multiplier(): number {\n\t\treturn this._multiplier;\n\t}\n\tset multiplier(m: number) {\n\t\t// get and reset the current value with the new multiplier\n\t\t// might be necessary to clear all the previous values\n\t\tconst currentVal = this.value;\n\t\tthis._multiplier = m;\n\t\tthis.cancelScheduledValues(0);\n\t\tthis.setValueAtTime(currentVal, 0);\n\t}\n}\n","import { Signal, SignalOptions } from \"../../signal/Signal\";\nimport { InputNode } from \"../context/ToneAudioNode\";\nimport { Seconds, Ticks, Time, UnitMap, UnitName } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { TickParam } from \"./TickParam\";\n\ninterface TickSignalOptions<TypeName extends UnitName> extends SignalOptions<TypeName> {\n\tvalue: UnitMap[TypeName];\n\tmultiplier: number;\n}\n\n/**\n * TickSignal extends Tone.Signal, but adds the capability\n * to calculate the number of elapsed ticks. exponential and target curves\n * are approximated with multiple linear ramps.\n *\n * Thank you Bruno Dias, H. Sofia Pinto, and David M. Matos,\n * for your [WAC paper](https://smartech.gatech.edu/bitstream/handle/1853/54588/WAC2016-49.pdf)\n * describing integrating timing functions for tempo calculations.\n */\nexport class TickSignal<TypeName extends \"hertz\" | \"bpm\"> extends Signal<TypeName> {\n\n\treadonly name: string = \"TickSignal\";\n\n\t/**\n\t * The param which controls the output signal value\n\t */\n\tprotected _param: TickParam<TypeName>;\n\treadonly input: InputNode;\n\n\t/**\n\t * @param value The initial value of the signal\n\t */\n\tconstructor(value?: UnitMap[TypeName]);\n\tconstructor(options: Partial<TickSignalOptions<TypeName>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(TickSignal.getDefaults(), arguments, [\"value\"]));\n\t\tconst options = optionsFromArguments(TickSignal.getDefaults(), arguments, [\"value\"]);\n\n\t\tthis.input = this._param = new TickParam({\n\t\t\tcontext: this.context,\n\t\t\tconvert: options.convert,\n\t\t\tmultiplier: options.multiplier,\n\t\t\tparam: this._constantSource.offset,\n\t\t\tunits: options.units,\n\t\t\tvalue: options.value,\n\t\t});\n\t}\n\n\tstatic getDefaults(): TickSignalOptions<any> {\n\t\treturn Object.assign(Signal.getDefaults(), {\n\t\t\tmultiplier: 1,\n\t\t\tunits: \"hertz\",\n\t\t\tvalue: 1,\n\t\t});\n\t}\n\n\tticksToTime(ticks: Ticks, when: Time): Seconds {\n\t\treturn this._param.ticksToTime(ticks, when);\n\t}\n\n\ttimeToTicks(duration: Time, when: Time): Ticks {\n\t\treturn this._param.timeToTicks(duration, when);\n\t}\n\n\tgetTimeOfTick(tick: Ticks): Seconds {\n\t\treturn this._param.getTimeOfTick(tick);\n\t}\n\n\tgetDurationOfTicks(ticks: Ticks, time: Time): Seconds {\n\t\treturn this._param.getDurationOfTicks(ticks, time);\n\t}\n\n\tgetTicksAtTime(time: Time): Ticks {\n\t\treturn this._param.getTicksAtTime(time);\n\t}\n\n\t/**\n\t * A multiplier on the bpm value. Useful for setting a PPQ relative to the base frequency value.\n\t */\n\tget multiplier(): number {\n\t\treturn this._param.multiplier;\n\t}\n\tset multiplier(m: number) {\n\t\tthis._param.multiplier = m;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._param.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneWithContext, ToneWithContextOptions } from \"../context/ToneWithContext\";\nimport { Seconds, Ticks, Time } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { PlaybackState, StateTimeline, StateTimelineEvent } from \"../util/StateTimeline\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isDefined } from \"../util/TypeCheck\";\nimport { TickSignal } from \"./TickSignal\";\n\ninterface TickSourceOptions extends ToneWithContextOptions {\n\tfrequency: number;\n\tunits: \"bpm\" | \"hertz\";\n}\n\ninterface TickSourceOffsetEvent {\n\tticks: number;\n\ttime: number;\n\tseconds: number;\n}\n\n/**\n * Uses [TickSignal](TickSignal) to track elapsed ticks with complex automation curves.\n */\nexport class TickSource<TypeName extends \"bpm\" | \"hertz\"> extends ToneWithContext<TickSourceOptions> {\n\n\treadonly name: string = \"TickSource\";\n\n\t/**\n\t * The frequency the callback function should be invoked.\n\t */\n\treadonly frequency: TickSignal<TypeName>;\n\n\t/**\n\t * The state timeline\n\t */\n\tprivate _state: StateTimeline = new StateTimeline();\n\n\t/**\n\t * The offset values of the ticks\n\t */\n\tprivate _tickOffset: Timeline<TickSourceOffsetEvent> = new Timeline();\n\n\t/**\n\t * @param frequency The initial frequency that the signal ticks at\n\t */\n\tconstructor(frequency?: number);\n\tconstructor(options?: Partial<TickSourceOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(TickSource.getDefaults(), arguments, [\"frequency\"]));\n\t\tconst options = optionsFromArguments(TickSource.getDefaults(), arguments, [\"frequency\"]);\n\n\t\tthis.frequency = new TickSignal({\n\t\t\tcontext: this.context,\n\t\t\tunits: options.units as TypeName,\n\t\t\tvalue: options.frequency,\n\t\t});\n\t\treadOnly(this, \"frequency\");\n\n\t\t// set the initial state\n\t\tthis._state.setStateAtTime(\"stopped\", 0);\n\t\t// add the first event\n\t\tthis.setTicksAtTime(0, 0);\n\t}\n\n\tstatic getDefaults(): TickSourceOptions {\n\t\treturn Object.assign({\n\t\t\tfrequency: 1,\n\t\t\tunits: \"hertz\" as \"hertz\",\n\t\t}, ToneWithContext.getDefaults());\n\t}\n\n\t/**\n\t * Returns the playback state of the source, either \"started\", \"stopped\" or \"paused\".\n\t */\n\tget state(): PlaybackState {\n\t\treturn this.getStateAtTime(this.now());\n\t}\n\n\t/**\n\t * Start the clock at the given time. Optionally pass in an offset\n\t * of where to start the tick counter from.\n\t * @param  time    The time the clock should start\n\t * @param offset The number of ticks to start the source at\n\t */\n\tstart(time: Time, offset?: Ticks): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(computedTime) !== \"started\") {\n\t\t\tthis._state.setStateAtTime(\"started\", computedTime);\n\t\t\tif (isDefined(offset)) {\n\t\t\t\tthis.setTicksAtTime(offset, computedTime);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the clock. Stopping the clock resets the tick counter to 0.\n\t * @param time The time when the clock should stop.\n\t */\n\tstop(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\t// cancel the previous stop\n\t\tif (this._state.getValueAtTime(computedTime) === \"stopped\") {\n\t\t\tconst event = this._state.get(computedTime);\n\t\t\tif (event && event.time > 0) {\n\t\t\t\tthis._tickOffset.cancel(event.time);\n\t\t\t\tthis._state.cancel(event.time);\n\t\t\t}\n\t\t}\n\t\tthis._state.cancel(computedTime);\n\t\tthis._state.setStateAtTime(\"stopped\", computedTime);\n\t\tthis.setTicksAtTime(0, computedTime);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Pause the clock. Pausing does not reset the tick counter.\n\t * @param time The time when the clock should stop.\n\t */\n\tpause(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(computedTime) === \"started\") {\n\t\t\tthis._state.setStateAtTime(\"paused\", computedTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Cancel start/stop/pause and setTickAtTime events scheduled after the given time.\n\t * @param time When to clear the events after\n\t */\n\tcancel(time: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis._state.cancel(time);\n\t\tthis._tickOffset.cancel(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the elapsed ticks at the given time\n\t * @param  time  When to get the tick value\n\t * @return The number of ticks\n\t */\n\tgetTicksAtTime(time?: Time): Ticks {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst stopEvent = this._state.getLastState(\"stopped\", computedTime) as StateTimelineEvent;\n\t\t// this event allows forEachBetween to iterate until the current time\n\t\tconst tmpEvent: StateTimelineEvent = { state: \"paused\", time: computedTime };\n\t\tthis._state.add(tmpEvent);\n\n\t\t// keep track of the previous offset event\n\t\tlet lastState = stopEvent;\n\t\tlet elapsedTicks = 0;\n\n\t\t// iterate through all the events since the last stop\n\t\tthis._state.forEachBetween(stopEvent.time, computedTime + this.sampleTime, e => {\n\t\t\tlet periodStartTime = lastState.time;\n\t\t\t// if there is an offset event in this period use that\n\t\t\tconst offsetEvent = this._tickOffset.get(e.time);\n\t\t\tif (offsetEvent && offsetEvent.time >= lastState.time) {\n\t\t\t\telapsedTicks = offsetEvent.ticks;\n\t\t\t\tperiodStartTime = offsetEvent.time;\n\t\t\t}\n\t\t\tif (lastState.state === \"started\" && e.state !== \"started\") {\n\t\t\t\telapsedTicks += this.frequency.getTicksAtTime(e.time) - this.frequency.getTicksAtTime(periodStartTime);\n\t\t\t}\n\t\t\tlastState = e;\n\t\t});\n\n\t\t// remove the temporary event\n\t\tthis._state.remove(tmpEvent);\n\n\t\t// return the ticks\n\t\treturn elapsedTicks;\n\t}\n\n\t/**\n\t * The number of times the callback was invoked. Starts counting at 0\n\t * and increments after the callback was invoked. Returns -1 when stopped.\n\t */\n\tget ticks(): Ticks {\n\t\treturn this.getTicksAtTime(this.now());\n\t}\n\tset ticks(t: Ticks) {\n\t\tthis.setTicksAtTime(t, this.now());\n\t}\n\n\t/**\n\t * The time since ticks=0 that the TickSource has been running. Accounts\n\t * for tempo curves\n\t */\n\tget seconds(): Seconds {\n\t\treturn this.getSecondsAtTime(this.now());\n\t}\n\tset seconds(s: Seconds) {\n\t\tconst now = this.now();\n\t\tconst ticks = this.frequency.timeToTicks(s, now);\n\t\tthis.setTicksAtTime(ticks, now);\n\t}\n\n\t/**\n\t * Return the elapsed seconds at the given time.\n\t * @param  time  When to get the elapsed seconds\n\t * @return  The number of elapsed seconds\n\t */\n\tgetSecondsAtTime(time: Time): Seconds {\n\t\ttime = this.toSeconds(time);\n\t\tconst stopEvent = this._state.getLastState(\"stopped\", time) as StateTimelineEvent;\n\t\t// this event allows forEachBetween to iterate until the current time\n\t\tconst tmpEvent: StateTimelineEvent = { state: \"paused\", time };\n\t\tthis._state.add(tmpEvent);\n\n\t\t// keep track of the previous offset event\n\t\tlet lastState = stopEvent;\n\t\tlet elapsedSeconds = 0;\n\n\t\t// iterate through all the events since the last stop\n\t\tthis._state.forEachBetween(stopEvent.time, time + this.sampleTime, e => {\n\t\t\tlet periodStartTime = lastState.time;\n\t\t\t// if there is an offset event in this period use that\n\t\t\tconst offsetEvent = this._tickOffset.get(e.time);\n\t\t\tif (offsetEvent && offsetEvent.time >= lastState.time) {\n\t\t\t\telapsedSeconds = offsetEvent.seconds;\n\t\t\t\tperiodStartTime = offsetEvent.time;\n\t\t\t}\n\t\t\tif (lastState.state === \"started\" && e.state !== \"started\") {\n\t\t\t\telapsedSeconds += e.time - periodStartTime;\n\t\t\t}\n\t\t\tlastState = e;\n\t\t});\n\n\t\t// remove the temporary event\n\t\tthis._state.remove(tmpEvent);\n\n\t\t// return the ticks\n\t\treturn elapsedSeconds;\n\t}\n\n\t/**\n\t * Set the clock's ticks at the given time.\n\t * @param  ticks The tick value to set\n\t * @param  time  When to set the tick value\n\t */\n\tsetTicksAtTime(ticks: Ticks, time: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis._tickOffset.cancel(time);\n\t\tthis._tickOffset.add({\n\t\t\tseconds: this.frequency.getDurationOfTicks(ticks, time),\n\t\t\tticks,\n\t\t\ttime,\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the scheduled state at the given time.\n\t * @param  time  The time to query.\n\t */\n\tgetStateAtTime(time: Time): PlaybackState {\n\t\ttime = this.toSeconds(time);\n\t\treturn this._state.getValueAtTime(time);\n\t}\n\n\t/**\n\t * Get the time of the given tick. The second argument\n\t * is when to test before. Since ticks can be set (with setTicksAtTime)\n\t * there may be multiple times for a given tick value.\n\t * @param  tick The tick number.\n\t * @param  before When to measure the tick value from.\n\t * @return The time of the tick\n\t */\n\tgetTimeOfTick(tick: Ticks, before = this.now()): Seconds {\n\t\tconst offset = this._tickOffset.get(before) as TickSourceOffsetEvent;\n\t\tconst event = this._state.get(before) as StateTimelineEvent;\n\t\tconst startTime = Math.max(offset.time, event.time);\n\t\tconst absoluteTicks = this.frequency.getTicksAtTime(startTime) + tick - offset.ticks;\n\t\treturn this.frequency.getTimeOfTick(absoluteTicks);\n\t}\n\n\t/**\n\t * Invoke the callback event at all scheduled ticks between the\n\t * start time and the end time\n\t * @param  startTime  The beginning of the search range\n\t * @param  endTime    The end of the search range\n\t * @param  callback   The callback to invoke with each tick\n\t */\n\tforEachTickBetween(startTime: number, endTime: number, callback: (when: Seconds, ticks: Ticks) => void): this {\n\t\t// only iterate through the sections where it is \"started\"\n\t\tlet lastStateEvent = this._state.get(startTime);\n\t\tthis._state.forEachBetween(startTime, endTime, event => {\n\t\t\tif (lastStateEvent && lastStateEvent.state === \"started\" && event.state !== \"started\") {\n\t\t\t\tthis.forEachTickBetween(Math.max(lastStateEvent.time, startTime), event.time - this.sampleTime, callback);\n\t\t\t}\n\t\t\tlastStateEvent = event;\n\t\t});\n\n\t\tlet error: Error | null = null;\n\n\t\tif (lastStateEvent && lastStateEvent.state === \"started\") {\n\t\t\tconst maxStartTime = Math.max(lastStateEvent.time, startTime);\n\t\t\t// figure out the difference between the frequency ticks and the\n\t\t\tconst startTicks = this.frequency.getTicksAtTime(maxStartTime);\n\t\t\tconst ticksAtStart = this.frequency.getTicksAtTime(lastStateEvent.time);\n\t\t\tconst diff = startTicks - ticksAtStart;\n\t\t\tconst offset = Math.ceil(diff) - diff;\n\t\t\tlet nextTickTime = this.frequency.getTimeOfTick(startTicks + offset);\n\t\t\twhile (nextTickTime < endTime) {\n\t\t\t\ttry {\n\t\t\t\t\tcallback(nextTickTime, Math.round(this.getTicksAtTime(nextTickTime)));\n\t\t\t\t} catch (e) {\n\t\t\t\t\terror = e;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tnextTickTime += this.frequency.getDurationOfTicks(1, nextTickTime);\n\t\t\t}\n\t\t}\n\n\t\tif (error) {\n\t\t\tthrow error;\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._state.dispose();\n\t\tthis._tickOffset.dispose();\n\t\tthis.frequency.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneWithContext, ToneWithContextOptions } from \"../context/ToneWithContext\";\nimport { Frequency, Hertz, Seconds, Ticks, Time } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Emitter } from \"../util/Emitter\";\nimport { noOp, readOnly } from \"../util/Interface\";\nimport { PlaybackState, StateTimeline } from \"../util/StateTimeline\";\nimport { TickSignal } from \"./TickSignal\";\nimport { TickSource } from \"./TickSource\";\nimport { assertContextRunning } from \"../util/Debug\";\n\ntype ClockCallback = (time: Seconds, ticks?: Ticks) => void;\n\ninterface ClockOptions extends ToneWithContextOptions {\n\tfrequency: Hertz;\n\tcallback: ClockCallback;\n\tunits: \"hertz\" | \"bpm\";\n}\n\ntype ClockEvent = \"start\" | \"stop\" | \"pause\";\n\n/**\n * A sample accurate clock which provides a callback at the given rate.\n * While the callback is not sample-accurate (it is still susceptible to\n * loose JS timing), the time passed in as the argument to the callback\n * is precise. For most applications, it is better to use Tone.Transport\n * instead of the Clock by itself since you can synchronize multiple callbacks.\n * @example\n * import { Clock } from \"tone\";\n * // the callback will be invoked approximately once a second\n * // and will print the time exactly once a second apart.\n * const clock = new Clock(time => {\n * \tconsole.log(time);\n * }, 1);\n * clock.start();\n * @category Core\n */\nexport class Clock<TypeName extends \"bpm\" | \"hertz\" = \"hertz\">\n\textends ToneWithContext<ClockOptions> implements Emitter<ClockEvent> {\n\n\treadonly name: string = \"Clock\";\n\n\t/**\n\t * The callback function to invoke at the scheduled tick.\n\t */\n\tcallback: ClockCallback = noOp;\n\n\t/**\n\t * The tick counter\n\t */\n\tprivate _tickSource: TickSource<TypeName>;\n\n\t/**\n\t * The last time the loop callback was invoked\n\t */\n\tprivate _lastUpdate = 0;\n\n\t/**\n\t * Keep track of the playback state\n\t */\n\tprivate _state: StateTimeline = new StateTimeline(\"stopped\");\n\n\t/**\n\t * Context bound reference to the _loop method\n\t * This is necessary to remove the event in the end.\n\t */\n\tprivate _boundLoop: () => void = this._loop.bind(this);\n\n\t/**\n\t * The rate the callback function should be invoked.\n\t */\n\tfrequency: TickSignal<TypeName>;\n\n\t/**\n\t * @param callback The callback to be invoked with the time of the audio event\n\t * @param frequency The rate of the callback\n\t */\n\tconstructor(callback?: ClockCallback, frequency?: Frequency);\n\tconstructor(options: Partial<ClockOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Clock.getDefaults(), arguments, [\"callback\", \"frequency\"]));\n\t\tconst options = optionsFromArguments(Clock.getDefaults(), arguments, [\"callback\", \"frequency\"]);\n\n\t\tthis.callback = options.callback;\n\t\tthis._tickSource = new TickSource({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.frequency,\n\t\t\tunits: options.units,\n\t\t});\n\t\tthis._lastUpdate = 0;\n\t\tthis.frequency = this._tickSource.frequency;\n\t\treadOnly(this, \"frequency\");\n\n\t\t// add an initial state\n\t\tthis._state.setStateAtTime(\"stopped\", 0);\n\n\t\t// bind a callback to the worker thread\n\t\tthis.context.on(\"tick\", this._boundLoop);\n\t}\n\n\tstatic getDefaults(): ClockOptions {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tcallback: noOp as ClockCallback,\n\t\t\tfrequency: 1,\n\t\t\tunits: \"hertz\",\n\t\t}) as ClockOptions;\n\t}\n\n\t/**\n\t * Returns the playback state of the source, either \"started\", \"stopped\" or \"paused\".\n\t */\n\tget state(): PlaybackState {\n\t\treturn this._state.getValueAtTime(this.now());\n\t}\n\n\t/**\n\t * Start the clock at the given time. Optionally pass in an offset\n\t * of where to start the tick counter from.\n\t * @param  time    The time the clock should start\n\t * @param offset  Where the tick counter starts counting from.\n\t */\n\tstart(time?: Time, offset?: Ticks): this {\n\t\t// make sure the context is running\n\t\tassertContextRunning(this.context);\n\t\t// start the loop\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis.log(\"start\", computedTime);\n\t\tif (this._state.getValueAtTime(computedTime) !== \"started\") {\n\t\t\tthis._state.setStateAtTime(\"started\", computedTime);\n\t\t\tthis._tickSource.start(computedTime, offset);\n\t\t\tif (computedTime < this._lastUpdate) {\n\t\t\t\tthis.emit(\"start\", computedTime, offset);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the clock. Stopping the clock resets the tick counter to 0.\n\t * @param time The time when the clock should stop.\n\t * @example\n\t * import { Clock } from \"tone\";\n\t * const clock = new Clock(time => {\n\t * \tconsole.log(time);\n\t * }, 1);\n\t * clock.start();\n\t * // stop the clock after 10 seconds\n\t * clock.stop(\"+10\");\n\t */\n\tstop(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis.log(\"stop\", computedTime);\n\t\tthis._state.cancel(computedTime);\n\t\tthis._state.setStateAtTime(\"stopped\", computedTime);\n\t\tthis._tickSource.stop(computedTime);\n\t\tif (computedTime < this._lastUpdate) {\n\t\t\tthis.emit(\"stop\", computedTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Pause the clock. Pausing does not reset the tick counter.\n\t * @param time The time when the clock should stop.\n\t */\n\tpause(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(computedTime) === \"started\") {\n\t\t\tthis._state.setStateAtTime(\"paused\", computedTime);\n\t\t\tthis._tickSource.pause(computedTime);\n\t\t\tif (computedTime < this._lastUpdate) {\n\t\t\t\tthis.emit(\"pause\", computedTime);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * The number of times the callback was invoked. Starts counting at 0\n\t * and increments after the callback was invoked.\n\t */\n\tget ticks(): Ticks {\n\t\treturn Math.ceil(this.getTicksAtTime(this.now()));\n\t}\n\tset ticks(t: Ticks) {\n\t\tthis._tickSource.ticks = t;\n\t}\n\n\t/**\n\t * The time since ticks=0 that the Clock has been running. Accounts for tempo curves\n\t */\n\tget seconds(): Seconds {\n\t\treturn this._tickSource.seconds;\n\t}\n\tset seconds(s: Seconds) {\n\t\tthis._tickSource.seconds = s;\n\t}\n\n\t/**\n\t * Return the elapsed seconds at the given time.\n\t * @param  time  When to get the elapsed seconds\n\t * @return  The number of elapsed seconds\n\t */\n\tgetSecondsAtTime(time: Time): Seconds {\n\t\treturn this._tickSource.getSecondsAtTime(time);\n\t}\n\n\t/**\n\t * Set the clock's ticks at the given time.\n\t * @param  ticks The tick value to set\n\t * @param  time  When to set the tick value\n\t */\n\tsetTicksAtTime(ticks: Ticks, time: Time): this {\n\t\tthis._tickSource.setTicksAtTime(ticks, time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the time of the given tick. The second argument\n\t * is when to test before. Since ticks can be set (with setTicksAtTime)\n\t * there may be multiple times for a given tick value.\n\t * @param  tick The tick number.\n\t * @param  before When to measure the tick value from.\n\t * @return The time of the tick\n\t */\n\tgetTimeOfTick(tick: Ticks, before = this.now()): Seconds {\n\t\treturn this._tickSource.getTimeOfTick(tick, before);\n\t}\n\n\t/**\n\t * Get the clock's ticks at the given time.\n\t * @param  time  When to get the tick value\n\t * @return The tick value at the given time.\n\t */\n\tgetTicksAtTime(time?: Time): Ticks {\n\t\treturn this._tickSource.getTicksAtTime(time);\n\t}\n\n\t/**\n\t * Get the time of the next tick\n\t * @param  offset The tick number.\n\t */\n\tnextTickTime(offset: Ticks, when: Time): Seconds {\n\t\tconst computedTime = this.toSeconds(when);\n\t\tconst currentTick = this.getTicksAtTime(computedTime);\n\t\treturn this._tickSource.getTimeOfTick(currentTick + offset, computedTime);\n\t}\n\n\t/**\n\t * The scheduling loop.\n\t */\n\tprivate _loop(): void {\n\n\t\tconst startTime = this._lastUpdate;\n\t\tconst endTime = this.now();\n\t\tthis._lastUpdate = endTime;\n\t\tthis.log(\"loop\", startTime, endTime);\n\n\t\tif (startTime !== endTime) {\n\t\t\t// the state change events\n\t\t\tthis._state.forEachBetween(startTime, endTime, e => {\n\t\t\t\tswitch (e.state) {\n\t\t\t\t\tcase \"started\":\n\t\t\t\t\t\tconst offset = this._tickSource.getTicksAtTime(e.time);\n\t\t\t\t\t\tthis.emit(\"start\", e.time, offset);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"stopped\":\n\t\t\t\t\t\tif (e.time !== 0) {\n\t\t\t\t\t\t\tthis.emit(\"stop\", e.time);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"paused\":\n\t\t\t\t\t\tthis.emit(\"pause\", e.time);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t});\n\t\t\t// the tick callbacks\n\t\t\tthis._tickSource.forEachTickBetween(startTime, endTime, (time, ticks) => {\n\t\t\t\tthis.callback(time, ticks);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Returns the scheduled state at the given time.\n\t * @param  time  The time to query.\n\t * @return  The name of the state input in setStateAtTime.\n\t * @example\n\t * import { Clock } from \"tone\";\n\t * const clock = new Clock();\n\t * clock.start(\"+0.1\");\n\t * clock.getStateAtTime(\"+0.1\"); // returns \"started\"\n\t */\n\tgetStateAtTime(time: Time): PlaybackState {\n\t\tconst computedTime = this.toSeconds(time);\n\t\treturn this._state.getValueAtTime(computedTime);\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.context.off(\"tick\", this._boundLoop);\n\t\tthis._tickSource.dispose();\n\t\tthis._state.dispose();\n\t\treturn this;\n\t}\n\n\t//-------------------------------------\n\t// EMITTER MIXIN TO SATISFY COMPILER\n\t//-------------------------------------\n\n\ton!: (event: ClockEvent, callback: (...args: any[]) => void) => this;\n\tonce!: (event: ClockEvent, callback: (...args: any[]) => void) => this;\n\toff!: (event: ClockEvent, callback?: ((...args: any[]) => void) | undefined) => this;\n\temit!: (event: any, ...args: any[]) => this;\n}\n\nEmitter.mixin(Clock);\n","import { Timeline, TimelineEvent } from \"./Timeline\";\nimport { Tone } from \"../Tone\";\nimport { Seconds } from \"../type/Units\";\n\ninterface TimelineValueEvent<T> extends TimelineEvent {\n\tvalue: T;\n}\n\n/**\n * Represents a single value which is gettable and settable in a timed way\n */\nexport class TimelineValue<Type> extends Tone {\n\n\treadonly name: string = \"TimelineValue\";\n\n\t/**\n\t * The timeline which stores the values\n\t */\n\tprivate _timeline: Timeline<TimelineValueEvent<Type>> = new Timeline({ memory: 10 })\n\n\t/**\n\t * Hold the value to return if there is no scheduled values\n\t */\n\tprivate _initialValue: Type;\n\n\t/**\n\t * @param initialValue The value to return if there is no scheduled values\n\t */\n\tconstructor(initialValue: Type) {\n\n\t\tsuper();\n\t\tthis._initialValue = initialValue;\n\t}\n\n\t/**\n\t * Set the value at the given time\n\t */\n\tset(value: Type, time: Seconds): this {\n\t\tthis._timeline.add({\n\t\t\tvalue, time\n\t\t});\n\t\treturn this;\n\t}\n\t\n\t/**\n\t * Get the value at the given time\n\t */\n\tget(time: Seconds): Type {\n\t\tconst event = this._timeline.get(time);\n\t\tif (event) {\n\t\t\treturn event.value;\n\t\t} else {\n\t\t\treturn this._initialValue;\n\t\t}\n\t}\n}\n","import { getContext } from \"../Global\";\nimport { TimeBaseUnit, TimeValue } from \"./TimeBase\";\nimport { TransportTimeClass } from \"./TransportTime\";\nimport { Seconds, Ticks } from \"./Units\";\n\n/**\n * Ticks is a primitive type for encoding Time values.\n * Ticks can be constructed with or without the `new` keyword. Ticks can be passed\n * into the parameter of any method which takes time as an argument.\n * @example\n * import { Ticks } from \"tone\";\n * const t = Ticks(\"4n\"); // a quarter note as ticks\n * @category Unit\n */\nexport class TicksClass extends TransportTimeClass<Ticks> {\n\n\treadonly name: string = \"Ticks\";\n\n\treadonly defaultUnits: TimeBaseUnit = \"i\";\n\n\t/**\n\t * Get the current time in the given units\n\t */\n\tprotected _now(): Ticks {\n\t\treturn this.context.transport.ticks;\n\t}\n\n\t/**\n\t * Return the value of the beats in the current units\n\t */\n\tprotected _beatsToUnits(beats: number): Ticks {\n\t\treturn this._getPPQ() * beats;\n\t}\n\n\t/**\n\t * Returns the value of a second in the current units\n\t */\n\tprotected _secondsToUnits(seconds: Seconds): Ticks {\n\t\treturn Math.floor(seconds / (60 / this._getBpm()) * this._getPPQ());\n\t}\n\n\t/**\n\t * Returns the value of a tick in the current time units\n\t */\n\tprotected _ticksToUnits(ticks: Ticks): Ticks {\n\t\treturn ticks;\n\t}\n\n\t/**\n\t * Return the time in ticks\n\t */\n\ttoTicks(): Ticks {\n\t\treturn this.valueOf() as Ticks;\n\t}\n\n\t/**\n\t * Return the time in seconds\n\t */\n\ttoSeconds(): Seconds {\n\t\treturn (this.valueOf() / this._getPPQ()) * (60 / this._getBpm());\n\t}\n}\n\n/**\n * Convert a time representation to ticks\n * @category Unit\n */\nexport function Ticks(value?: TimeValue, units?: TimeBaseUnit): TicksClass {\n\treturn new TicksClass(getContext(), value, units);\n}\n","import { Tone } from \"../Tone\";\nimport { isDefined } from \"./TypeCheck\";\nimport { assert } from \"./Debug\";\n\n/**\n * An IntervalTimeline event must have a time and duration\n */\nexport interface IntervalTimelineEvent {\n\ttime: number;\n\tduration: number;\n\t[propName: string]: any;\n}\n\ntype IteratorCallback = (event: IntervalTimelineEvent) => void;\n\n/**\n * Similar to Tone.Timeline, but all events represent\n * intervals with both \"time\" and \"duration\" times. The\n * events are placed in a tree structure optimized\n * for querying an intersection point with the timeline\n * events. Internally uses an [Interval Tree](https://en.wikipedia.org/wiki/Interval_tree)\n * to represent the data.\n */\nexport class IntervalTimeline extends Tone {\n\n\treadonly name: string = \"IntervalTimeline\";\n\n\t/**\n\t * The root node of the inteval tree\n\t */\n\tprivate _root: IntervalNode | null = null;\n\n\t/**\n\t * Keep track of the length of the timeline.\n\t */\n\tprivate _length = 0;\n\n\t/**\n\t * The event to add to the timeline. All events must\n\t * have a time and duration value\n\t * @param  event  The event to add to the timeline\n\t */\n\tadd(event: IntervalTimelineEvent): this {\n\t\tassert(isDefined(event.time), \"Events must have a time property\");\n\t\tassert(isDefined(event.duration), \"Events must have a duration parameter\");\n\n\t\tevent.time = event.time.valueOf();\n\t\tlet node: IntervalNode | null = new IntervalNode(event.time, event.time + event.duration, event);\n\t\tif (this._root === null) {\n\t\t\tthis._root = node;\n\t\t} else {\n\t\t\tthis._root.insert(node);\n\t\t}\n\t\tthis._length++;\n\t\t// Restructure tree to be balanced\n\t\twhile (node !== null) {\n\t\t\tnode.updateHeight();\n\t\t\tnode.updateMax();\n\t\t\tthis._rebalance(node);\n\t\t\tnode = node.parent;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Remove an event from the timeline.\n\t * @param  event  The event to remove from the timeline\n\t */\n\tremove(event: IntervalTimelineEvent): this {\n\t\tif (this._root !== null) {\n\t\t\tconst results: IntervalNode[] = [];\n\t\t\tthis._root.search(event.time, results);\n\t\t\tfor (const node of results) {\n\t\t\t\tif (node.event === event) {\n\t\t\t\t\tthis._removeNode(node);\n\t\t\t\t\tthis._length--;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * The number of items in the timeline.\n\t * @readOnly\n\t */\n\tget length(): number {\n\t\treturn this._length;\n\t}\n\n\t/**\n\t * Remove events whose time time is after the given time\n\t * @param  after  The time to query.\n\t */\n\tcancel(after: number): this {\n\t\tthis.forEachFrom(after, event => this.remove(event));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set the root node as the given node\n\t */\n\tprivate _setRoot(node: IntervalNode | null): void {\n\t\tthis._root = node;\n\t\tif (this._root !== null) {\n\t\t\tthis._root.parent = null;\n\t\t}\n\t}\n\n\t/**\n\t * Replace the references to the node in the node's parent\n\t * with the replacement node.\n\t */\n\tprivate _replaceNodeInParent(node: IntervalNode, replacement: IntervalNode | null): void {\n\t\tif (node.parent !== null) {\n\t\t\tif (node.isLeftChild()) {\n\t\t\t\tnode.parent.left = replacement;\n\t\t\t} else {\n\t\t\t\tnode.parent.right = replacement;\n\t\t\t}\n\t\t\tthis._rebalance(node.parent);\n\t\t} else {\n\t\t\tthis._setRoot(replacement);\n\t\t}\n\t}\n\n\t/**\n\t * Remove the node from the tree and replace it with\n\t * a successor which follows the schema.\n\t */\n\tprivate _removeNode(node: IntervalNode): void {\n\t\tif (node.left === null && node.right === null) {\n\t\t\tthis._replaceNodeInParent(node, null);\n\t\t} else if (node.right === null) {\n\t\t\tthis._replaceNodeInParent(node, node.left);\n\t\t} else if (node.left === null) {\n\t\t\tthis._replaceNodeInParent(node, node.right);\n\t\t} else {\n\t\t\tconst balance = node.getBalance();\n\t\t\tlet replacement: IntervalNode;\n\t\t\tlet temp: IntervalNode | null = null;\n\t\t\tif (balance > 0) {\n\t\t\t\tif (node.left.right === null) {\n\t\t\t\t\treplacement = node.left;\n\t\t\t\t\treplacement.right = node.right;\n\t\t\t\t\ttemp = replacement;\n\t\t\t\t} else {\n\t\t\t\t\treplacement = node.left.right;\n\t\t\t\t\twhile (replacement.right !== null) {\n\t\t\t\t\t\treplacement = replacement.right;\n\t\t\t\t\t}\n\t\t\t\t\tif (replacement.parent) {\n\t\t\t\t\t\treplacement.parent.right = replacement.left;\n\t\t\t\t\t\ttemp = replacement.parent;\n\t\t\t\t\t\treplacement.left = node.left;\n\t\t\t\t\t\treplacement.right = node.right;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (node.right.left === null) {\n\t\t\t\treplacement = node.right;\n\t\t\t\treplacement.left = node.left;\n\t\t\t\ttemp = replacement;\n\t\t\t} else {\n\t\t\t\treplacement = node.right.left;\n\t\t\t\twhile (replacement.left !== null) {\n\t\t\t\t\treplacement = replacement.left;\n\t\t\t\t}\n\t\t\t\tif (replacement.parent) {\n\t\t\t\t\treplacement.parent.left = replacement.right;\n\t\t\t\t\ttemp = replacement.parent;\n\t\t\t\t\treplacement.left = node.left;\n\t\t\t\t\treplacement.right = node.right;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (node.parent !== null) {\n\t\t\t\tif (node.isLeftChild()) {\n\t\t\t\t\tnode.parent.left = replacement;\n\t\t\t\t} else {\n\t\t\t\t\tnode.parent.right = replacement;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._setRoot(replacement);\n\t\t\t}\n\t\t\tif (temp) {\n\t\t\t\tthis._rebalance(temp);\n\t\t\t}\n\t\t}\n\t\tnode.dispose();\n\t}\n\n\t/**\n\t * Rotate the tree to the left\n\t */\n\tprivate _rotateLeft(node: IntervalNode): void {\n\t\tconst parent = node.parent;\n\t\tconst isLeftChild = node.isLeftChild();\n\n\t\t// Make node.right the new root of this sub tree (instead of node)\n\t\tconst pivotNode = node.right;\n\t\tif (pivotNode) {\n\t\t\tnode.right = pivotNode.left;\n\t\t\tpivotNode.left = node;\n\t\t}\n\n\t\tif (parent !== null) {\n\t\t\tif (isLeftChild) {\n\t\t\t\tparent.left = pivotNode;\n\t\t\t} else {\n\t\t\t\tparent.right = pivotNode;\n\t\t\t}\n\t\t} else {\n\t\t\tthis._setRoot(pivotNode);\n\t\t}\n\t}\n\n\t/**\n\t * Rotate the tree to the right\n\t */\n\tprivate _rotateRight(node: IntervalNode): void {\n\t\tconst parent = node.parent;\n\t\tconst isLeftChild = node.isLeftChild();\n\n\t\t// Make node.left the new root of this sub tree (instead of node)\n\t\tconst pivotNode = node.left;\n\t\tif (pivotNode) {\n\t\t\tnode.left = pivotNode.right;\n\t\t\tpivotNode.right = node;\n\t\t}\n\n\t\tif (parent !== null) {\n\t\t\tif (isLeftChild) {\n\t\t\t\tparent.left = pivotNode;\n\t\t\t} else {\n\t\t\t\tparent.right = pivotNode;\n\t\t\t}\n\t\t} else {\n\t\t\tthis._setRoot(pivotNode);\n\t\t}\n\t}\n\n\t/**\n\t * Balance the BST\n\t */\n\tprivate _rebalance(node: IntervalNode): void {\n\t\tconst balance = node.getBalance();\n\t\tif (balance > 1 && node.left) {\n\t\t\tif (node.left.getBalance() < 0) {\n\t\t\t\tthis._rotateLeft(node.left);\n\t\t\t} else {\n\t\t\t\tthis._rotateRight(node);\n\t\t\t}\n\t\t} else if (balance < -1 && node.right) {\n\t\t\tif (node.right.getBalance() > 0) {\n\t\t\t\tthis._rotateRight(node.right);\n\t\t\t} else {\n\t\t\t\tthis._rotateLeft(node);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Get an event whose time and duration span the give time. Will\n\t * return the match whose \"time\" value is closest to the given time.\n\t * @return  The event which spans the desired time\n\t */\n\tget(time: number): IntervalTimelineEvent | null {\n\t\tif (this._root !== null) {\n\t\t\tconst results: IntervalNode[] = [];\n\t\t\tthis._root.search(time, results);\n\t\t\tif (results.length > 0) {\n\t\t\t\tlet max = results[0];\n\t\t\t\tfor (let i = 1; i < results.length; i++) {\n\t\t\t\t\tif (results[i].low > max.low) {\n\t\t\t\t\t\tmax = results[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn max.event;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Iterate over everything in the timeline.\n\t * @param  callback The callback to invoke with every item\n\t */\n\tforEach(callback: IteratorCallback): this {\n\t\tif (this._root !== null) {\n\t\t\tconst allNodes: IntervalNode[] = [];\n\t\t\tthis._root.traverse(node => allNodes.push(node));\n\t\t\tallNodes.forEach(node => {\n\t\t\t\tif (node.event) {\n\t\t\t\t\tcallback(node.event);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Iterate over everything in the array in which the given time\n\t * overlaps with the time and duration time of the event.\n\t * @param  time The time to check if items are overlapping\n\t * @param  callback The callback to invoke with every item\n\t */\n\tforEachAtTime(time: number, callback: IteratorCallback): this {\n\t\tif (this._root !== null) {\n\t\t\tconst results: IntervalNode[] = [];\n\t\t\tthis._root.search(time, results);\n\t\t\tresults.forEach(node => {\n\t\t\t\tif (node.event) {\n\t\t\t\t\tcallback(node.event);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Iterate over everything in the array in which the time is greater\n\t * than or equal to the given time.\n\t * @param  time The time to check if items are before\n\t * @param  callback The callback to invoke with every item\n\t */\n\tforEachFrom(time: number, callback: IteratorCallback): this {\n\t\tif (this._root !== null) {\n\t\t\tconst results: IntervalNode[] = [];\n\t\t\tthis._root.searchAfter(time, results);\n\t\t\tresults.forEach(node => {\n\t\t\t\tif (node.event) {\n\t\t\t\t\tcallback(node.event);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (this._root !== null) {\n\t\t\tthis._root.traverse(node => node.dispose());\n\t\t}\n\t\tthis._root = null;\n\t\treturn this;\n\t}\n}\n\n//-------------------------------------\n// \tINTERVAL NODE HELPER\n//-------------------------------------\n\n/**\n * Represents a node in the binary search tree, with the addition\n * of a \"high\" value which keeps track of the highest value of\n * its children.\n * References:\n * https://brooknovak.wordpress.com/2013/12/07/augmented-interval-tree-in-c/\n * http://www.mif.vu.lt/~valdas/ALGORITMAI/LITERATURA/Cormen/Cormen.pdf\n * @param low\n * @param high\n */\nclass IntervalNode {\n\n\t// the event container\n\tevent: IntervalTimelineEvent | null;\n\t// the low value\n\tlow: number;\n\t// the high value\n\thigh: number;\n\t// the high value for this and all child nodes\n\tmax: number;\n\t// the nodes to the left\n\tprivate _left: IntervalNode | null = null;\n\t// the nodes to the right\n\tprivate _right: IntervalNode | null = null;\n\t// the parent node\n\tparent: IntervalNode | null = null;\n\t// the number of child nodes\n\theight = 0;\n\n\tconstructor(low: number, high: number, event: IntervalTimelineEvent) {\n\t\tthis.event = event;\n\t\t// the low value\n\t\tthis.low = low;\n\t\t// the high value\n\t\tthis.high = high;\n\t\t// the high value for this and all child nodes\n\t\tthis.max = this.high;\n\t}\n\n\t/**\n\t * Insert a node into the correct spot in the tree\n\t */\n\tinsert(node: IntervalNode): void {\n\t\tif (node.low <= this.low) {\n\t\t\tif (this.left === null) {\n\t\t\t\tthis.left = node;\n\t\t\t} else {\n\t\t\t\tthis.left.insert(node);\n\t\t\t}\n\t\t} else if (this.right === null) {\n\t\t\tthis.right = node;\n\t\t} else {\n\t\t\tthis.right.insert(node);\n\t\t}\n\t}\n\n\t/**\n\t * Search the tree for nodes which overlap\n\t * with the given point\n\t * @param  point  The point to query\n\t * @param  results  The array to put the results\n\t */\n\tsearch(point: number, results: IntervalNode[]): void {\n\t\t// If p is to the right of the rightmost point of any interval\n\t\t// in this node and all children, there won't be any matches.\n\t\tif (point > this.max) {\n\t\t\treturn;\n\t\t}\n\t\t// Search left children\n\t\tif (this.left !== null) {\n\t\t\tthis.left.search(point, results);\n\t\t}\n\t\t// Check this node\n\t\tif (this.low <= point && this.high > point) {\n\t\t\tresults.push(this);\n\t\t}\n\t\t// If p is to the left of the time of this interval,\n\t\t// then it can't be in any child to the right.\n\t\tif (this.low > point) {\n\t\t\treturn;\n\t\t}\n\t\t// Search right children\n\t\tif (this.right !== null) {\n\t\t\tthis.right.search(point, results);\n\t\t}\n\t}\n\n\t/**\n\t * Search the tree for nodes which are less\n\t * than the given point\n\t * @param  point  The point to query\n\t * @param  results  The array to put the results\n\t */\n\tsearchAfter(point: number, results: IntervalNode[]): void {\n\t\t// Check this node\n\t\tif (this.low >= point) {\n\t\t\tresults.push(this);\n\t\t\tif (this.left !== null) {\n\t\t\t\tthis.left.searchAfter(point, results);\n\t\t\t}\n\t\t}\n\t\t// search the right side\n\t\tif (this.right !== null) {\n\t\t\tthis.right.searchAfter(point, results);\n\t\t}\n\t}\n\n\t/**\n\t * Invoke the callback on this element and both it's branches\n\t * @param  {Function}  callback\n\t */\n\ttraverse(callback: (self: IntervalNode) => void): void {\n\t\tcallback(this);\n\t\tif (this.left !== null) {\n\t\t\tthis.left.traverse(callback);\n\t\t}\n\t\tif (this.right !== null) {\n\t\t\tthis.right.traverse(callback);\n\t\t}\n\t}\n\n\t/**\n\t * Update the height of the node\n\t */\n\tupdateHeight(): void {\n\t\tif (this.left !== null && this.right !== null) {\n\t\t\tthis.height = Math.max(this.left.height, this.right.height) + 1;\n\t\t} else if (this.right !== null) {\n\t\t\tthis.height = this.right.height + 1;\n\t\t} else if (this.left !== null) {\n\t\t\tthis.height = this.left.height + 1;\n\t\t} else {\n\t\t\tthis.height = 0;\n\t\t}\n\t}\n\n\t/**\n\t * Update the height of the node\n\t */\n\tupdateMax(): void {\n\t\tthis.max = this.high;\n\t\tif (this.left !== null) {\n\t\t\tthis.max = Math.max(this.max, this.left.max);\n\t\t}\n\t\tif (this.right !== null) {\n\t\t\tthis.max = Math.max(this.max, this.right.max);\n\t\t}\n\t}\n\n\t/**\n\t * The balance is how the leafs are distributed on the node\n\t * @return  Negative numbers are balanced to the right\n\t */\n\tgetBalance(): number {\n\t\tlet balance = 0;\n\t\tif (this.left !== null && this.right !== null) {\n\t\t\tbalance = this.left.height - this.right.height;\n\t\t} else if (this.left !== null) {\n\t\t\tbalance = this.left.height + 1;\n\t\t} else if (this.right !== null) {\n\t\t\tbalance = -(this.right.height + 1);\n\t\t}\n\t\treturn balance;\n\t}\n\n\t/**\n\t * @returns true if this node is the left child of its parent\n\t */\n\tisLeftChild(): boolean {\n\t\treturn this.parent !== null && this.parent.left === this;\n\t}\n\n\t/**\n\t * get/set the left node\n\t */\n\tget left(): IntervalNode | null {\n\t\treturn this._left;\n\t}\n\n\tset left(node: IntervalNode | null) {\n\t\tthis._left = node;\n\t\tif (node !== null) {\n\t\t\tnode.parent = this;\n\t\t}\n\t\tthis.updateHeight();\n\t\tthis.updateMax();\n\t}\n\n\t/**\n\t * get/set the right node\n\t */\n\tget right(): IntervalNode | null {\n\t\treturn this._right;\n\t}\n\n\tset right(node: IntervalNode | null) {\n\t\tthis._right = node;\n\t\tif (node !== null) {\n\t\t\tnode.parent = this;\n\t\t}\n\t\tthis.updateHeight();\n\t\tthis.updateMax();\n\t}\n\n\t/**\n\t * null out references.\n\t */\n\tdispose(): void {\n\t\tthis.parent = null;\n\t\tthis._left = null;\n\t\tthis._right = null;\n\t\tthis.event = null;\n\t}\n}\n","import { Seconds, Ticks } from \"../type/Units\";\nimport { noOp } from \"../util/Interface\";\n\ntype Transport = import(\"../clock/Transport\").Transport;\n\nexport interface TransportEventOptions {\n\tcallback: (time: number) => void;\n\tonce: boolean;\n\ttime: Ticks;\n}\n\n/**\n * TransportEvent is an internal class used by [[Transport]]\n * to schedule events. Do no invoke this class directly, it is\n * handled from within Tone.Transport.\n */\nexport class TransportEvent {\n\n\t/**\n\t * Reference to the Transport that created it\n\t */\n\tprotected transport: Transport;\n\n\t/**\n\t * The unique id of the event\n\t */\n\tid: number = TransportEvent._eventId++;\n\n\t/**\n\t * The time the event starts\n\t */\n\ttime: Ticks;\n\n\t/**\n\t * The callback to invoke\n\t */\n\tprivate callback?: (time: Seconds) => void;\n\n\t/**\n\t * If the event should be removed after being invoked.\n\t */\n\tprivate _once: boolean;\n\n\t/**\n\t * @param transport The transport object which the event belongs to\n\t */\n\tconstructor(transport: Transport, opts: Partial<TransportEventOptions>) {\n\n\t\tconst options: TransportEventOptions = Object.assign(TransportEvent.getDefaults(), opts);\n\n\t\tthis.transport = transport;\n\t\tthis.callback = options.callback;\n\t\tthis._once = options.once;\n\t\tthis.time = options.time;\n\t}\n\n\tstatic getDefaults(): TransportEventOptions {\n\t\treturn {\n\t\t\tcallback: noOp,\n\t\t\tonce: false,\n\t\t\ttime: 0,\n\t\t};\n\t}\n\n\t/**\n\t * Current ID counter\n\t */\n\tprivate static _eventId = 0;\n\n\t/**\n\t * Invoke the event callback.\n\t * @param  time  The AudioContext time in seconds of the event\n\t */\n\tinvoke(time: Seconds): void {\n\t\tif (this.callback) {\n\t\t\tthis.callback(time);\n\t\t\tif (this._once) {\n\t\t\t\tthis.transport.clear(this.id);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tthis.callback = undefined;\n\t\treturn this;\n\t}\n}\n","import { BaseContext } from \"../context/BaseContext\";\nimport { TicksClass } from \"../type/Ticks\";\nimport { Seconds, Ticks, Time } from \"../type/Units\";\nimport { TransportEvent, TransportEventOptions } from \"./TransportEvent\";\n\ntype Transport = import(\"../clock/Transport\").Transport;\n\ninterface TransportRepeatEventOptions extends TransportEventOptions {\n\tinterval: Ticks;\n\tduration: Ticks;\n}\n\n/**\n * TransportRepeatEvent is an internal class used by Tone.Transport\n * to schedule repeat events. This class should not be instantiated directly.\n */\nexport class TransportRepeatEvent extends TransportEvent {\n\n\t/**\n\t * When the event should stop repeating\n\t */\n\tprivate duration: Ticks;\n\n\t/**\n\t * The interval of the repeated event\n\t */\n\tprivate _interval: Ticks;\n\n\t/**\n\t * The ID of the current timeline event\n\t */\n\tprivate _currentId = -1;\n\n\t/**\n\t * The ID of the next timeline event\n\t */\n\tprivate _nextId = -1;\n\n\t/**\n\t * The time of the next event\n\t */\n\tprivate _nextTick = this.time;\n\n\t/**\n\t * a reference to the bound start method\n\t */\n\tprivate _boundRestart = this._restart.bind(this);\n\n\t/**\n\t * The audio context belonging to this event\n\t */\n\tprotected context: BaseContext;\n\n\t/**\n\t * @param transport The transport object which the event belongs to\n\t */\n\tconstructor(transport: Transport, opts: Partial<TransportRepeatEventOptions>) {\n\n\t\tsuper(transport, opts);\n\n\t\tconst options = Object.assign(TransportRepeatEvent.getDefaults(), opts);\n\n\t\tthis.duration = new TicksClass(transport.context, options.duration).valueOf();\n\t\tthis._interval = new TicksClass(transport.context, options.interval).valueOf();\n\t\tthis._nextTick = options.time;\n\t\tthis.transport.on(\"start\", this._boundRestart);\n\t\tthis.transport.on(\"loopStart\", this._boundRestart);\n\t\tthis.context = this.transport.context;\n\t\tthis._restart();\n\t}\n\n\tstatic getDefaults(): TransportRepeatEventOptions {\n\t\treturn Object.assign({}, TransportEvent.getDefaults(), {\n\t\t\tduration: Infinity,\n\t\t\tinterval: 1,\n\t\t\tonce: false,\n\t\t});\n\t}\n\n\t/**\n\t * Invoke the callback. Returns the tick time which\n\t * the next event should be scheduled at.\n\t * @param  time  The AudioContext time in seconds of the event\n\t */\n\tinvoke(time: Seconds): void {\n\t\t// create more events if necessary\n\t\tthis._createEvents(time);\n\t\t// call the super class\n\t\tsuper.invoke(time);\n\t}\n\n\t/**\n\t * Push more events onto the timeline to keep up with the position of the timeline\n\t */\n\tprivate _createEvents(time: Seconds): void {\n\t\t// schedule the next event\n\t\tconst ticks = this.transport.getTicksAtTime(time);\n\t\tif (ticks >= this.time && ticks >= this._nextTick && this._nextTick + this._interval < this.time + this.duration) {\n\t\t\tthis._nextTick += this._interval;\n\t\t\tthis._currentId = this._nextId;\n\t\t\tthis._nextId = this.transport.scheduleOnce(this.invoke.bind(this),\n\t\t\t\tnew TicksClass(this.context, this._nextTick).toSeconds());\n\t\t}\n\t}\n\n\t/**\n\t * Push more events onto the timeline to keep up with the position of the timeline\n\t */\n\tprivate _restart(time?: Time): void {\n\t\tthis.transport.clear(this._currentId);\n\t\tthis.transport.clear(this._nextId);\n\t\tthis._nextTick = this.time;\n\t\tconst ticks = this.transport.getTicksAtTime(time);\n\t\tif (ticks > this.time) {\n\t\t\tthis._nextTick = this.time + Math.ceil((ticks - this.time) / this._interval) * this._interval;\n\t\t}\n\t\tthis._currentId = this.transport.scheduleOnce(this.invoke.bind(this),\n\t\t\tnew TicksClass(this.context, this._nextTick).toSeconds());\n\t\tthis._nextTick += this._interval;\n\t\tthis._nextId = this.transport.scheduleOnce(this.invoke.bind(this),\n\t\t\tnew TicksClass(this.context, this._nextTick).toSeconds());\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.transport.clear(this._currentId);\n\t\tthis.transport.clear(this._nextId);\n\t\tthis.transport.off(\"start\", this._boundRestart);\n\t\tthis.transport.off(\"loopStart\", this._boundRestart);\n\t\treturn this;\n\t}\n}\n","import { TimeClass } from \"../../core/type/Time\";\nimport { PlaybackState } from \"../../core/util/StateTimeline\";\nimport { TimelineValue } from \"../../core/util/TimelineValue\";\nimport { Signal } from \"../../signal/Signal\";\nimport { onContextClose, onContextInit } from \"../context/ContextInitialization\";\nimport { Gain } from \"../context/Gain\";\nimport { ToneWithContext, ToneWithContextOptions } from \"../context/ToneWithContext\";\nimport { TicksClass } from \"../type/Ticks\";\nimport { TransportTimeClass } from \"../type/TransportTime\";\nimport { BarsBeatsSixteenths, BPM, NormalRange, Seconds,\n\tSubdivision, Ticks, Time, TimeSignature, TransportTime } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Emitter } from \"../util/Emitter\";\nimport { readOnly, writable } from \"../util/Interface\";\nimport { IntervalTimeline } from \"../util/IntervalTimeline\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isArray, isDefined } from \"../util/TypeCheck\";\nimport { Clock } from \"./Clock\";\nimport { TickParam } from \"./TickParam\";\nimport { TransportEvent } from \"./TransportEvent\";\nimport { TransportRepeatEvent } from \"./TransportRepeatEvent\";\n\ninterface TransportOptions extends ToneWithContextOptions {\n\tbpm: BPM;\n\tswing: NormalRange;\n\tswingSubdivision: Subdivision;\n\ttimeSignature: number;\n\tloopStart: Time;\n\tloopEnd: Time;\n\tppq: number;\n}\n\ntype TransportEventNames = \"start\" | \"stop\" | \"pause\" | \"loop\" | \"loopEnd\" | \"loopStart\";\n\ninterface SyncedSignalEvent {\n\tsignal: Signal;\n\tinitial: number;\n\tratio: Gain;\n}\n\ntype TransportCallback = (time: Seconds) => void;\n\n/**\n * Transport for timing musical events.\n * Supports tempo curves and time changes. Unlike browser-based timing (setInterval, requestAnimationFrame)\n * Transport timing events pass in the exact time of the scheduled event\n * in the argument of the callback function. Pass that time value to the object\n * you're scheduling. <br><br>\n * A single transport is created for you when the library is initialized.\n * <br><br>\n * The transport emits the events: \"start\", \"stop\", \"pause\", and \"loop\" which are\n * called with the time of that event as the argument.\n *\n * @example\n * import { Oscillator, Transport } from \"tone\";\n * const osc = new Oscillator().toDestination();\n * // repeated event every 8th note\n * Transport.scheduleRepeat((time) => {\n * \t// use the callback time to schedule events\n * \tosc.start(time).stop(time + 0.1);\n * }, \"8n\");\n * // transport must be started before it starts invoking events\n * Transport.start();\n * @category Core\n */\nexport class Transport extends ToneWithContext<TransportOptions> implements Emitter<TransportEventNames> {\n\n\treadonly name: string = \"Transport\";\n\n\t//-------------------------------------\n\t// \tLOOPING\n\t//-------------------------------------\n\n\t/**\n\t * If the transport loops or not.\n\t */\n\tprivate _loop: TimelineValue<boolean> = new TimelineValue(false);\n\n\t/**\n\t * The loop start position in ticks\n\t */\n\tprivate _loopStart: Ticks = 0;\n\n\t/**\n\t * The loop end position in ticks\n\t */\n\tprivate _loopEnd: Ticks = 0;\n\n\t//-------------------------------------\n\t// \tCLOCK/TEMPO\n\t//-------------------------------------\n\n\t/**\n\t * Pulses per quarter is the number of ticks per quarter note.\n\t */\n\tprivate _ppq: number;\n\n\t/**\n\t * watches the main oscillator for timing ticks\n\t * initially starts at 120bpm\n\t */\n\tprivate _clock: Clock<\"bpm\">;\n\n\t/**\n\t * The Beats Per Minute of the Transport.\n\t * @example\n\t * import { Oscillator, Transport } from \"tone\";\n\t * const osc = new Oscillator().toDestination();\n\t * Transport.bpm.value = 80;\n\t * // start/stop the oscillator every quarter note\n\t * Transport.scheduleRepeat(time => {\n\t * \tosc.start(time).stop(time + 0.1);\n\t * }, \"4n\");\n\t * Transport.start();\n\t * // ramp the bpm to 120 over 10 seconds\n\t * Transport.bpm.rampTo(120, 10);\n\t */\n\tbpm: TickParam<\"bpm\">;\n\n\t/**\n\t * The time signature, or more accurately the numerator\n\t * of the time signature over a denominator of 4.\n\t */\n\tprivate _timeSignature: number;\n\n\t//-------------------------------------\n\t// \tTIMELINE EVENTS\n\t//-------------------------------------\n\n\t/**\n\t * All the events in an object to keep track by ID\n\t */\n\tprivate _scheduledEvents = {};\n\n\t/**\n\t * The scheduled events.\n\t */\n\tprivate _timeline: Timeline<TransportEvent> = new Timeline();\n\n\t/**\n\t * Repeated events\n\t */\n\tprivate _repeatedEvents: IntervalTimeline = new IntervalTimeline();\n\n\t/**\n\t * All of the synced Signals\n\t */\n\tprivate _syncedSignals: SyncedSignalEvent[] = [];\n\n\t//-------------------------------------\n\t// \tSWING\n\t//-------------------------------------\n\n\t/**\n\t * The subdivision of the swing\n\t */\n\tprivate _swingTicks: Ticks;\n\n\t/**\n\t * The swing amount\n\t */\n\tprivate _swingAmount: NormalRange = 0;\n\n\tconstructor(options?: Partial<TransportOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Transport.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Transport.getDefaults(), arguments);\n\n\t\t// CLOCK/TEMPO\n\t\tthis._ppq = options.ppq;\n\t\tthis._clock = new Clock({\n\t\t\tcallback: this._processTick.bind(this),\n\t\t\tcontext: this.context,\n\t\t\tfrequency: 0,\n\t\t\tunits: \"bpm\",\n\t\t});\n\t\tthis._bindClockEvents();\n\t\tthis.bpm = this._clock.frequency as unknown as TickParam<\"bpm\">;\n\t\tthis._clock.frequency.multiplier = options.ppq;\n\t\tthis.bpm.setValueAtTime(options.bpm, 0);\n\t\treadOnly(this, \"bpm\");\n\t\tthis._timeSignature = options.timeSignature;\n\n\t\t// SWING\n\t\tthis._swingTicks = options.ppq / 2; // 8n\n\t}\n\n\tstatic getDefaults(): TransportOptions {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tbpm: 120,\n\t\t\tloopEnd: \"4m\" as Subdivision,\n\t\t\tloopStart: 0,\n\t\t\tppq: 192,\n\t\t\tswing: 0,\n\t\t\tswingSubdivision: \"8n\" as Subdivision,\n\t\t\ttimeSignature: 4,\n\t\t});\n\t}\n\n\t//-------------------------------------\n\t// \tTICKS\n\t//-------------------------------------\n\n\t/**\n\t * called on every tick\n\t * @param  tickTime clock relative tick time\n\t */\n\tprivate _processTick(tickTime: Seconds, ticks: Ticks): void {\n\t\t// handle swing\n\t\tif (this._swingAmount > 0 &&\n\t\t\tticks % this._ppq !== 0 && // not on a downbeat\n\t\t\tticks % (this._swingTicks * 2) !== 0) {\n\t\t\t// add some swing\n\t\t\tconst progress = (ticks % (this._swingTicks * 2)) / (this._swingTicks * 2);\n\t\t\tconst amount = Math.sin((progress) * Math.PI) * this._swingAmount;\n\t\t\ttickTime += new TicksClass(this.context, this._swingTicks * 2 / 3).toSeconds() * amount;\n\t\t}\n\t\t// do the loop test\n\t\tif (this._loop.get(tickTime)) {\n\t\t\tif (ticks >= this._loopEnd) {\n\t\t\t\tthis.emit(\"loopEnd\", tickTime);\n\t\t\t\tthis._clock.setTicksAtTime(this._loopStart, tickTime);\n\t\t\t\tticks = this._loopStart;\n\t\t\t\tthis.emit(\"loopStart\", tickTime, this._clock.getSecondsAtTime(tickTime));\n\t\t\t\tthis.emit(\"loop\", tickTime);\n\t\t\t}\n\t\t}\n\t\t// invoke the timeline events scheduled on this tick\n\t\tthis._timeline.forEachAtTime(ticks, event => event.invoke(tickTime));\n\t}\n\n\t//-------------------------------------\n\t// \tSCHEDULABLE EVENTS\n\t//-------------------------------------\n\n\t/**\n\t * Schedule an event along the timeline.\n\t * @param callback The callback to be invoked at the time.\n\t * @param time The time to invoke the callback at.\n\t * @return The id of the event which can be used for canceling the event.\n\t * @example\n\t * import { Transport } from \"tone\";\n\t * // schedule an event on the 16th measure\n\t * Transport.schedule((time) => {\n\t * \t// invoked on measure 16\n\t * \tconsole.log(\"measure 16!\");\n\t * }, \"16:0:0\");\n\t */\n\tschedule(callback: TransportCallback, time: TransportTime | TransportTimeClass): number {\n\t\tconst event = new TransportEvent(this, {\n\t\t\tcallback,\n\t\t\ttime: new TransportTimeClass(this.context, time).toTicks(),\n\t\t});\n\t\treturn this._addEvent(event, this._timeline);\n\t}\n\n\t/**\n\t * Schedule a repeated event along the timeline. The event will fire\n\t * at the `interval` starting at the `startTime` and for the specified\n\t * `duration`.\n\t * @param  callback   The callback to invoke.\n\t * @param  interval   The duration between successive callbacks. Must be a positive number.\n\t * @param  startTime  When along the timeline the events should start being invoked.\n\t * @param  duration How long the event should repeat.\n\t * @return  The ID of the scheduled event. Use this to cancel the event.\n\t * @example\n\t * import { Oscillator, Transport } from \"tone\";\n\t * const osc = new Oscillator().toDestination().start();\n\t * // a callback invoked every eighth note after the first measure\n\t * Transport.scheduleRepeat((time) => {\n\t * \tosc.start(time).stop(time + 0.1);\n\t * }, \"8n\", \"1m\");\n\t */\n\tscheduleRepeat(\n\t\tcallback: TransportCallback,\n\t\tinterval: Time | TimeClass,\n\t\tstartTime?: TransportTime | TransportTimeClass,\n\t\tduration: Time = Infinity,\n\t): number {\n\t\tconst event = new TransportRepeatEvent(this, {\n\t\t\tcallback,\n\t\t\tduration: new TimeClass(this.context, duration).toTicks(),\n\t\t\tinterval: new TimeClass(this.context, interval).toTicks(),\n\t\t\ttime: new TransportTimeClass(this.context, startTime).toTicks(),\n\t\t});\n\t\t// kick it off if the Transport is started\n\t\t// @ts-ignore\n\t\treturn this._addEvent(event, this._repeatedEvents);\n\t}\n\n\t/**\n\t * Schedule an event that will be removed after it is invoked.\n\t * @param callback The callback to invoke once.\n\t * @param time The time the callback should be invoked.\n\t * @returns The ID of the scheduled event.\n\t */\n\tscheduleOnce(callback: TransportCallback, time: TransportTime | TransportTimeClass): number {\n\t\tconst event = new TransportEvent(this, {\n\t\t\tcallback,\n\t\t\tonce: true,\n\t\t\ttime: new TransportTimeClass(this.context, time).toTicks(),\n\t\t});\n\t\treturn this._addEvent(event, this._timeline);\n\t}\n\n\t/**\n\t * Clear the passed in event id from the timeline\n\t * @param eventId The id of the event.\n\t */\n\tclear(eventId: number): this {\n\t\tif (this._scheduledEvents.hasOwnProperty(eventId)) {\n\t\t\tconst item = this._scheduledEvents[eventId.toString()];\n\t\t\titem.timeline.remove(item.event);\n\t\t\titem.event.dispose();\n\t\t\tdelete this._scheduledEvents[eventId.toString()];\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add an event to the correct timeline. Keep track of the\n\t * timeline it was added to.\n\t * @returns the event id which was just added\n\t */\n\tprivate _addEvent(event: TransportEvent, timeline: Timeline<TransportEvent>): number {\n\t\tthis._scheduledEvents[event.id.toString()] = {\n\t\t\tevent,\n\t\t\ttimeline,\n\t\t};\n\t\ttimeline.add(event);\n\t\treturn event.id;\n\t}\n\n\t/**\n\t * Remove scheduled events from the timeline after\n\t * the given time. Repeated events will be removed\n\t * if their startTime is after the given time\n\t * @param after Clear all events after this time.\n\t */\n\tcancel(after: TransportTime = 0): this {\n\t\tconst computedAfter = this.toTicks(after);\n\t\tthis._timeline.forEachFrom(computedAfter, event => this.clear(event.id));\n\t\tthis._repeatedEvents.forEachFrom(computedAfter, event => this.clear(event.id));\n\t\treturn this;\n\t}\n\n\t//-------------------------------------\n\t// \tSTART/STOP/PAUSE\n\t//-------------------------------------\n\n\t/**\n\t * Bind start/stop/pause events from the clock and emit them.\n\t */\n\tprivate _bindClockEvents(): void {\n\t\tthis._clock.on(\"start\", (time, offset) => {\n\t\t\toffset = new TicksClass(this.context, offset).toSeconds();\n\t\t\tthis.emit(\"start\", time, offset);\n\t\t});\n\n\t\tthis._clock.on(\"stop\", (time) => {\n\t\t\tthis.emit(\"stop\", time);\n\t\t});\n\n\t\tthis._clock.on(\"pause\", (time) => {\n\t\t\tthis.emit(\"pause\", time);\n\t\t});\n\t}\n\n\t/**\n\t * Returns the playback state of the source, either \"started\", \"stopped\", or \"paused\"\n\t */\n\tget state(): PlaybackState {\n\t\treturn this._clock.getStateAtTime(this.now());\n\t}\n\n\t/**\n\t * Start the transport and all sources synced to the transport.\n\t * @param  time The time when the transport should start.\n\t * @param  offset The timeline offset to start the transport.\n\t * @example\n\t * import { Transport } from \"tone\";\n\t * // start the transport in one second starting at beginning of the 5th measure.\n\t * Transport.start(\"+1\", \"4:0:0\");\n\t */\n\tstart(time?: Time, offset?: TransportTime): this {\n\t\tlet offsetTicks;\n\t\tif (isDefined(offset)) {\n\t\t\toffsetTicks = this.toTicks(offset);\n\t\t}\n\t\t// start the clock\n\t\tthis._clock.start(time, offsetTicks);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the transport and all sources synced to the transport.\n\t * @param time The time when the transport should stop.\n\t * @example\n\t * import { Transport } from \"tone\";\n\t * Transport.stop();\n\t */\n\tstop(time?: Time): this {\n\t\tthis._clock.stop(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Pause the transport and all sources synced to the transport.\n\t */\n\tpause(time?: Time): this {\n\t\tthis._clock.pause(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Toggle the current state of the transport. If it is\n\t * started, it will stop it, otherwise it will start the Transport.\n\t * @param  time The time of the event\n\t */\n\ttoggle(time?: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tif (this._clock.getStateAtTime(time) !== \"started\") {\n\t\t\tthis.start(time);\n\t\t} else {\n\t\t\tthis.stop(time);\n\t\t}\n\t\treturn this;\n\t}\n\n\t//-------------------------------------\n\t// \tSETTERS/GETTERS\n\t//-------------------------------------\n\n\t/**\n\t * The time signature as just the numerator over 4.\n\t * For example 4/4 would be just 4 and 6/8 would be 3.\n\t * @example\n\t * import { Transport } from \"tone\";\n\t * // common time\n\t * Transport.timeSignature = 4;\n\t * // 7/8\n\t * Transport.timeSignature = [7, 8];\n\t * // this will be reduced to a single number\n\t * Transport.timeSignature; // returns 3.5\n\t */\n\tget timeSignature(): TimeSignature {\n\t\treturn this._timeSignature;\n\t}\n\tset timeSignature(timeSig: TimeSignature) {\n\t\tif (isArray(timeSig)) {\n\t\t\ttimeSig = (timeSig[0] / timeSig[1]) * 4;\n\t\t}\n\t\tthis._timeSignature = timeSig;\n\t}\n\n\t/**\n\t * When the Transport.loop = true, this is the starting position of the loop.\n\t */\n\tget loopStart(): Time {\n\t\treturn new TimeClass(this.context, this._loopStart, \"i\").toSeconds();\n\t}\n\tset loopStart(startPosition: Time) {\n\t\tthis._loopStart = this.toTicks(startPosition);\n\t}\n\n\t/**\n\t * When the Transport.loop = true, this is the ending position of the loop.\n\t */\n\tget loopEnd(): Time {\n\t\treturn new TimeClass(this.context, this._loopEnd, \"i\").toSeconds();\n\t}\n\tset loopEnd(endPosition: Time) {\n\t\tthis._loopEnd = this.toTicks(endPosition);\n\t}\n\t\n\t/**\n\t * If the transport loops or not.\n\t */\n\tget loop(): boolean {\n\t\treturn this._loop.get(this.now());\n\t}\n\tset loop(loop) {\n\t\tthis._loop.set(loop, this.now());\n\t}\n\n\t/**\n\t * Set the loop start and stop at the same time.\n\t * @example\n\t * import { Transport } from \"tone\";\n\t * // loop over the first measure\n\t * Transport.setLoopPoints(0, \"1m\");\n\t * Transport.loop = true;\n\t */\n\tsetLoopPoints(startPosition: TransportTime, endPosition: TransportTime): this {\n\t\tthis.loopStart = startPosition;\n\t\tthis.loopEnd = endPosition;\n\t\treturn this;\n\t}\n\n\t/**\n\t * The swing value. Between 0-1 where 1 equal to the note + half the subdivision.\n\t */\n\tget swing(): NormalRange {\n\t\treturn this._swingAmount;\n\t}\n\tset swing(amount: NormalRange) {\n\t\t// scale the values to a normal range\n\t\tthis._swingAmount = amount;\n\t}\n\n\t/**\n\t * Set the subdivision which the swing will be applied to.\n\t * The default value is an 8th note. Value must be less\n\t * than a quarter note.\n\t */\n\tget swingSubdivision(): Subdivision {\n\t\treturn new TicksClass(this.context, this._swingTicks).toNotation();\n\t}\n\tset swingSubdivision(subdivision: Subdivision) {\n\t\tthis._swingTicks = this.toTicks(subdivision);\n\t}\n\n\t/**\n\t * The Transport's position in Bars:Beats:Sixteenths.\n\t * Setting the value will jump to that position right away.\n\t */\n\tget position(): BarsBeatsSixteenths | Time {\n\t\tconst now = this.now();\n\t\tconst ticks = this._clock.getTicksAtTime(now);\n\t\treturn new TicksClass(this.context, ticks).toBarsBeatsSixteenths();\n\t}\n\tset position(progress: Time) {\n\t\tconst ticks = this.toTicks(progress);\n\t\tthis.ticks = ticks;\n\t}\n\n\t/**\n\t * The Transport's position in seconds\n\t * Setting the value will jump to that position right away.\n\t */\n\tget seconds(): Seconds {\n\t\treturn this._clock.seconds;\n\t}\n\tset seconds(s: Seconds) {\n\t\tconst now = this.now();\n\t\tconst ticks = this._clock.frequency.timeToTicks(s, now);\n\t\tthis.ticks = ticks;\n\t}\n\n\t/**\n\t * The Transport's loop position as a normalized value. Always\n\t * returns 0 if the transport if loop is not true.\n\t */\n\tget progress(): NormalRange {\n\t\tif (this.loop) {\n\t\t\tconst now = this.now();\n\t\t\tconst ticks = this._clock.getTicksAtTime(now);\n\t\t\treturn (ticks - this._loopStart) / (this._loopEnd - this._loopStart);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * The transports current tick position.\n\t */\n\tget ticks(): Ticks {\n\t\treturn this._clock.ticks;\n\t}\n\tset ticks(t: Ticks) {\n\t\tif (this._clock.ticks !== t) {\n\t\t\tconst now = this.now();\n\t\t\t// stop everything synced to the transport\n\t\t\tif (this.state === \"started\") {\n\t\t\t\tconst ticks = this._clock.getTicksAtTime(now);\n\t\t\t\t// schedule to start on the next tick, #573\n\t\t\t\tconst time = this._clock.getTimeOfTick(Math.ceil(ticks));\n\t\t\t\tthis.emit(\"stop\", time);\n\t\t\t\tthis._clock.setTicksAtTime(t, time);\n\t\t\t\t// restart it with the new time\n\t\t\t\tthis.emit(\"start\", time, this._clock.getSecondsAtTime(time));\n\t\t\t} else {\n\t\t\t\tthis._clock.setTicksAtTime(t, now);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Get the clock's ticks at the given time.\n\t * @param  time  When to get the tick value\n\t * @return The tick value at the given time.\n\t */\n\tgetTicksAtTime(time?: Time): Ticks {\n\t\treturn Math.round(this._clock.getTicksAtTime(time));\n\t}\n\n\t/**\n\t * Return the elapsed seconds at the given time.\n\t * @param  time  When to get the elapsed seconds\n\t * @return  The number of elapsed seconds\n\t */\n\tgetSecondsAtTime(time: Time): Seconds {\n\t\treturn this._clock.getSecondsAtTime(time);\n\t}\n\n\t/**\n\t * Pulses Per Quarter note. This is the smallest resolution\n\t * the Transport timing supports. This should be set once\n\t * on initialization and not set again. Changing this value\n\t * after other objects have been created can cause problems.\n\t */\n\tget PPQ(): number {\n\t\treturn this._clock.frequency.multiplier;\n\t}\n\tset PPQ(ppq: number) {\n\t\tthis._clock.frequency.multiplier = ppq;\n\t}\n\n\t//-------------------------------------\n\t// \tSYNCING\n\t//-------------------------------------\n\n\t/**\n\t * Returns the time aligned to the next subdivision\n\t * of the Transport. If the Transport is not started,\n\t * it will return 0.\n\t * Note: this will not work precisely during tempo ramps.\n\t * @param  subdivision  The subdivision to quantize to\n\t * @return  The context time of the next subdivision.\n\t * @example\n\t * import { Transport } from \"tone\";\n\t * // the transport must be started, otherwise returns 0\n\t * Transport.start(); \n\t * Transport.nextSubdivision(\"4n\");\n\t */\n\tnextSubdivision(subdivision?: Time): Seconds {\n\t\tsubdivision = this.toTicks(subdivision);\n\t\tif (this.state !== \"started\") {\n\t\t\t// if the transport's not started, return 0\n\t\t\treturn 0;\n\t\t} else {\n\t\t\tconst now = this.now();\n\t\t\t// the remainder of the current ticks and the subdivision\n\t\t\tconst transportPos = this.getTicksAtTime(now);\n\t\t\tconst remainingTicks = subdivision - transportPos % subdivision;\n\t\t\treturn this._clock.nextTickTime(remainingTicks, now);\n\t\t}\n\t}\n\n\t/**\n\t * Attaches the signal to the tempo control signal so that\n\t * any changes in the tempo will change the signal in the same\n\t * ratio.\n\t *\n\t * @param signal\n\t * @param ratio Optionally pass in the ratio between the two signals.\n\t * \t\t\tOtherwise it will be computed based on their current values.\n\t */\n\tsyncSignal(signal: Signal<any>, ratio?: number): this {\n\t\tif (!ratio) {\n\t\t\t// get the sync ratio\n\t\t\tconst now = this.now();\n\t\t\tif (signal.getValueAtTime(now) !== 0) {\n\t\t\t\tconst bpm = this.bpm.getValueAtTime(now);\n\t\t\t\tconst computedFreq = 1 / (60 / bpm / this.PPQ);\n\t\t\t\tratio = signal.getValueAtTime(now) / computedFreq;\n\t\t\t} else {\n\t\t\t\tratio = 0;\n\t\t\t}\n\t\t}\n\t\tconst ratioSignal = new Gain(ratio);\n\t\t// @ts-ignore\n\t\tthis.bpm.connect(ratioSignal);\n\t\t// @ts-ignore\n\t\tratioSignal.connect(signal._param);\n\t\tthis._syncedSignals.push({\n\t\t\tinitial: signal.value,\n\t\t\tratio: ratioSignal,\n\t\t\tsignal,\n\t\t});\n\t\tsignal.value = 0;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unsyncs a previously synced signal from the transport's control.\n\t * See Transport.syncSignal.\n\t */\n\tunsyncSignal(signal: Signal<any>): this {\n\t\tfor (let i = this._syncedSignals.length - 1; i >= 0; i--) {\n\t\t\tconst syncedSignal = this._syncedSignals[i];\n\t\t\tif (syncedSignal.signal === signal) {\n\t\t\t\tsyncedSignal.ratio.dispose();\n\t\t\t\tsyncedSignal.signal.value = syncedSignal.initial;\n\t\t\t\tthis._syncedSignals.splice(i, 1);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._clock.dispose();\n\t\twritable(this, \"bpm\");\n\t\tthis._timeline.dispose();\n\t\tthis._repeatedEvents.dispose();\n\t\treturn this;\n\t}\n\n\t//-------------------------------------\n\t// EMITTER MIXIN TO SATISFY COMPILER\n\t//-------------------------------------\n\n\ton!: (event: TransportEventNames, callback: (...args: any[]) => void) => this;\n\tonce!: (event: TransportEventNames, callback: (...args: any[]) => void) => this;\n\toff!: (event: TransportEventNames, callback?: ((...args: any[]) => void) | undefined) => this;\n\temit!: (event: any, ...args: any[]) => this;\n}\n\nEmitter.mixin(Transport);\n\n//-------------------------------------\n// \tINITIALIZATION\n//-------------------------------------\n\nonContextInit(context => {\n\tcontext.transport = new Transport({ context });\n});\n\nonContextClose(context => {\n\tcontext.transport.dispose();\n});\n","import { Param } from \"../context/Param\";\nimport { Seconds, Time } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"./ToneAudioNode\";\n\nexport interface DelayOptions extends ToneAudioNodeOptions {\n\tdelayTime: Time;\n\tmaxDelay: Time;\n}\n\n/**\n * Wrapper around Web Audio's native [DelayNode](http://webaudio.github.io/web-audio-api/#the-delaynode-interface).\n * @category Core\n */\nexport class Delay extends ToneAudioNode<DelayOptions> {\n\n\treadonly name: string = \"Delay\";\n\n\t/**\n\t * Private holder of the max delay time\n\t */\n\tprivate _maxDelay: Seconds;\n\n\t/**\n\t * The amount of time the incoming signal is delayed.\n\t */\n\treadonly delayTime: Param<\"time\">;\n\n\t/**\n\t * Private reference to the internal DelayNode\n\t */\n\tprivate _delayNode: DelayNode;\n\treadonly input: DelayNode;\n\treadonly output: DelayNode;\n\n\t/**\n\t * @param delayTime The delay applied to the incoming signal.\n\t * @param maxDelay The maximum delay time.\n\t */\n\tconstructor(delayTime?: Time, maxDelay?: Time);\n\tconstructor(options?: Partial<DelayOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Delay.getDefaults(), arguments, [\"delayTime\", \"maxDelay\"]));\n\n\t\tconst options = optionsFromArguments(Delay.getDefaults(), arguments, [\"delayTime\", \"maxDelay\"]);\n\n\t\tconst maxDelayInSeconds = this.toSeconds(options.maxDelay);\n\t\tthis._maxDelay = Math.max(maxDelayInSeconds, this.toSeconds(options.delayTime));\n\n\t\tthis._delayNode = this.input = this.output = this.context.createDelay(maxDelayInSeconds);\n\n\t\tthis.delayTime = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._delayNode.delayTime,\n\t\t\tunits: \"time\",\n\t\t\tvalue: options.delayTime,\n\t\t\tminValue: 0,\n\t\t\tmaxValue: this.maxDelay,\n\t\t});\n\n\t\treadOnly(this, \"delayTime\");\n\t}\n\n\tstatic getDefaults(): DelayOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tdelayTime: 0,\n\t\t\tmaxDelay: 1,\n\t\t});\n\t}\n\n\t/**\n\t * The maximum delay time. This cannot be changed after\n\t * the value is passed into the constructor.\n\t */\n\tget maxDelay(): Seconds {\n\t\treturn this._maxDelay;\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._delayNode.disconnect();\n\t\tthis.delayTime.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Decibels } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\n\ninterface VolumeOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n\tmute: boolean;\n}\n\n/**\n * Volume is a simple volume node, useful for creating a volume fader.\n *\n * @example\n * import { Oscillator, Volume } from \"tone\";\n * const vol = new Volume(-12).toDestination();\n * const osc = new Oscillator().connect(vol).start();\n * @category Component\n */\nexport class Volume extends ToneAudioNode<VolumeOptions> {\n\n\treadonly name: string = \"Volume\";\n\n\t/**\n\t * the output node\n\t */\n\toutput: Gain<\"decibels\">;\n\n\t/**\n\t * Input and output are the same\n\t */\n\tinput: Gain<\"decibels\">;\n\n\t/**\n\t * The unmuted volume\n\t */\n\tprivate _unmutedVolume: Decibels;\n\n\t/**\n\t * The volume control in decibels.\n\t * @example\n\t * import { Oscillator, Volume } from \"tone\";\n\t * const vol = new Volume().toDestination();\n\t * const osc = new Oscillator().connect(vol).start();\n\t * vol.volume.value = -20;\n\t */\n\tvolume: Param<\"decibels\">;\n\n\t/**\n\t * @param volume the initial volume in decibels\n\t */\n\tconstructor(volume?: Decibels);\n\tconstructor(options?: Partial<VolumeOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Volume.getDefaults(), arguments, [\"volume\"]));\n\t\tconst options = optionsFromArguments(Volume.getDefaults(), arguments, [\"volume\"]);\n\n\t\tthis.input = this.output = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: options.volume,\n\t\t\tunits: \"decibels\",\n\t\t});\n\t\tthis.volume = this.output.gain;\n\t\treadOnly(this, \"volume\");\n\t\tthis._unmutedVolume = options.volume;\n\n\t\t// set the mute initially\n\t\tthis.mute = options.mute;\n\t}\n\n\tstatic getDefaults(): VolumeOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmute: false,\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Mute the output.\n\t * @example\n\t * import { Oscillator, Volume } from \"tone\";\n\t * const vol = new Volume(-12).toDestination();\n\t * const osc = new Oscillator().connect(vol).start();\n\t * // mute the output\n\t * vol.mute = true;\n\t */\n\tget mute(): boolean {\n\t\treturn this.volume.value === -Infinity;\n\t}\n\tset mute(mute: boolean) {\n\t\tif (!this.mute && mute) {\n\t\t\tthis._unmutedVolume = this.volume.value;\n\t\t\t// maybe it should ramp here?\n\t\t\tthis.volume.value = -Infinity;\n\t\t} else if (this.mute && !mute) {\n\t\t\tthis.volume.value = this._unmutedVolume;\n\t\t}\n\t}\n\n\t/**\n\t * clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.input.dispose();\n\t\tthis.volume.dispose();\n\t\treturn this;\n\t}\n}\n","import { Volume } from \"../../component/channel/Volume\";\nimport { Decibels } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { onContextClose, onContextInit } from \"./ContextInitialization\";\nimport { Gain } from \"./Gain\";\nimport { Param } from \"./Param\";\nimport { connectSeries, ToneAudioNode, ToneAudioNodeOptions } from \"./ToneAudioNode\";\n\ninterface DestinationOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n\tmute: boolean;\n}\n\n/**\n * A single master output which is connected to the\n * AudioDestinationNode (aka your speakers).\n * It provides useful conveniences such as the ability\n * to set the volume and mute the entire application.\n * It also gives you the ability to apply master effects to your application.\n *\n * @example\n * import { Destination, Oscillator } from \"tone\";\n * const oscillator = new Oscillator().start();\n * // the audio will go from the oscillator to the speakers\n * oscillator.connect(Destination);\n * // a convenience for connecting to the master output is also provided:\n * oscillator.toDestination();\n * // these two are equivalent.\n * @category Core\n */\nexport class Destination extends ToneAudioNode<DestinationOptions> {\n\n\treadonly name: string = \"Destination\";\n\n\tinput: Volume = new Volume({ context: this.context });\n\toutput: Gain = new Gain({ context: this.context });\n\n\t/**\n\t * The volume of the master output.\n\t */\n\tvolume: Param<\"decibels\"> = this.input.volume;\n\n\tconstructor(options: Partial<DestinationOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Destination.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Destination.getDefaults(), arguments);\n\n\t\tconnectSeries(this.input, this.output, this.context.rawContext.destination);\n\n\t\tthis.mute = options.mute;\n\t\tthis._internalChannels = [this.input, this.context.rawContext.destination, this.output];\n\t}\n\n\tstatic getDefaults(): DestinationOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmute: false,\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Mute the output.\n\t * @example\n\t * import { Destination, Oscillator } from \"tone\";\n\t * const oscillator = new Oscillator().start().toDestination();\n\t * // mute the output\n\t * Destination.mute = true;\n\t */\n\tget mute(): boolean {\n\t\treturn this.input.mute;\n\t}\n\n\tset mute(mute: boolean) {\n\t\tthis.input.mute = mute;\n\t}\n\n\t/**\n\t * Add a master effects chain. NOTE: this will disconnect any nodes which were previously\n\t * chained in the master effects chain.\n\t * @param args All arguments will be connected in a row and the Master will be routed through it.\n\t * @return  {Destination}  this\n\t * @example\n\t * import { Compressor, Destination, Filter } from \"tone\";\n\t * // some overall compression to keep the levels in check\n\t * const masterCompressor = new Compressor({\n\t * \tthreshold: -6,\n\t * \tratio: 3,\n\t * \tattack: 0.5,\n\t * \trelease: 0.1\n\t * });\n\t * // give a little boost to the lows\n\t * const lowBump = new Filter(200, \"lowshelf\");\n\t * // route everything through the filter and compressor before going to the speakers\n\t * Destination.chain(lowBump, masterCompressor);\n\t */\n\tchain(...args: Array<AudioNode | ToneAudioNode>): this {\n\t\tthis.input.disconnect();\n\t\targs.unshift(this.input);\n\t\targs.push(this.output);\n\t\tconnectSeries(...args);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The maximum number of channels the system can output\n\t */\n\tget maxChannelCount(): number {\n\t\treturn this.context.rawContext.destination.maxChannelCount;\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.volume.dispose();\n\t\treturn this;\n\t}\n}\n\n//-------------------------------------\n// \tINITIALIZATION\n//-------------------------------------\n\nonContextInit(context => {\n\tcontext.destination = new Destination({ context });\n});\n\nonContextClose(context => {\n\tcontext.destination.dispose();\n});\n","import { getContext, setContext } from \"../Global\";\nimport { Seconds } from \"../type/Units\";\nimport { OfflineContext } from \"./OfflineContext\";\nimport { ToneAudioBuffer } from \"./ToneAudioBuffer\";\n\n/**\n * Generate a buffer by rendering all of the Tone.js code within the callback using the OfflineAudioContext.\n * The OfflineAudioContext is capable of rendering much faster than real time in many cases.\n * The callback function also passes in an offline instance of [[Context]] which can be used\n * to schedule events along the Transport. \n * @param  callback  All Tone.js nodes which are created and scheduled within this callback are recorded into the output Buffer.\n * @param  duration     the amount of time to record for.\n * @return  The promise which is invoked with the ToneAudioBuffer of the recorded output.\n * @example\n * import { Offline, Oscillator } from \"tone\";\n * // render 2 seconds of the oscillator\n * Offline(() => {\n * \t// only nodes created in this callback will be recorded\n * \tconst oscillator = new Oscillator().toDestination().start(0);\n * }, 2).then((buffer) => {\n * \t// do something with the output buffer\n * \tconsole.log(buffer);\n * });\n * @example\n * import { Offline, Oscillator } from \"tone\";\n * // can also schedule events along the Transport\n * // using the passed in Offline Transport\n * Offline(({ transport }) => {\n * \tconst osc = new Oscillator().toDestination();\n * \ttransport.schedule(time => {\n * \t\tosc.start(time).stop(time + 0.1);\n * \t}, 1);\n * \t// make sure to start the transport\n * \ttransport.start(0.2);\n * }, 4).then((buffer) => {\n * \t// do something with the output buffer\n * \tconsole.log(buffer);\n * });\n * @category Core\n */\nexport async function Offline(\n\tcallback: (context: OfflineContext) => Promise<void> | void,\n\tduration: Seconds,\n\tchannels = 2,\n\tsampleRate: number = getContext().sampleRate,\n): Promise<ToneAudioBuffer> {\n\t// set the OfflineAudioContext based on the current context\n\tconst originalContext = getContext();\n\n\tconst context = new OfflineContext(channels, duration, sampleRate);\n\tsetContext(context);\n\n\t// invoke the callback/scheduling\n\tawait callback(context);\n\n\t// then render the audio\n\tconst bufferPromise = context.render();\n\n\t// return the original AudioContext\n\tsetContext(originalContext);\n\n\t// await the rendering\n\tconst buffer = await bufferPromise;\n\n\t// return the audio\n\treturn new ToneAudioBuffer(buffer);\n}\n","import { Tone } from \"../Tone\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { noOp } from \"../util/Interface\";\nimport { isString } from \"../util/TypeCheck\";\nimport { ToneAudioBuffer } from \"./ToneAudioBuffer\";\nimport { assert } from \"../util/Debug\";\n\nexport interface ToneAudioBuffersUrlMap {\n\t[name: string]: string | AudioBuffer | ToneAudioBuffer;\n\t[name: number]: string | AudioBuffer | ToneAudioBuffer;\n}\n\ninterface ToneAudioBuffersOptions {\n\turls: ToneAudioBuffersUrlMap;\n\tonload: () => void;\n\tonerror?: (error: Error) => void;\n\tbaseUrl: string;\n}\n\n/**\n * A data structure for holding multiple buffers in a Map-like datastructure.\n *\n * @example\n * import { Player, ToneAudioBuffers } from \"tone\";\n * const pianoSamples = new ToneAudioBuffers({\n * \tC1: \"https://tonejs.github.io/examples/audio/casio/C1.mp3\",\n * \tC2: \"https://tonejs.github.io/examples/audio/casio/C2.mp3\",\n * }, () => {\n * \tconst player = new Player().toDestination();\n * \t// play one of the samples when they all load\n * \tplayer.buffer = pianoSamples.get(\"C2\");\n * \tplayer.start();\n * });\n * @example\n * import { ToneAudioBuffers } from \"tone\";\n * // To pass in additional parameters in the second parameter\n * const buffers = new ToneAudioBuffers({\n * \t urls: {\n * \t\t C1: \"C1.mp3\",\n * \t\t C2: \"C2.mp3\",\n * \t },\n * \t onload: () => console.log(\"loaded\"),\n * \t baseUrl: \"https://tonejs.github.io/examples/audio/casio/\"\n * });\n * @category Core\n */\nexport class ToneAudioBuffers extends Tone {\n\n\treadonly name: string = \"ToneAudioBuffers\";\n\n\t/**\n\t * All of the buffers\n\t */\n\tprivate _buffers: Map<string, ToneAudioBuffer> = new Map();\n\n\t/**\n\t * A path which is prefixed before every url.\n\t */\n\tbaseUrl: string;\n\n\t/**\n\t * Keep track of the number of loaded buffers\n\t */\n\tprivate _loadingCount = 0;\n\n\t/**\n\t * @param  urls  An object literal or array of urls to load.\n\t * @param onload  The callback to invoke when the buffers are loaded.\n\t * @param baseUrl A prefix url to add before all the urls\n\t */\n\tconstructor(\n\t\turls?: ToneAudioBuffersUrlMap,\n\t\tonload?: () => void,\n\t\tbaseUrl?: string,\n\t);\n\tconstructor(options?: Partial<ToneAudioBuffersOptions>);\n\tconstructor() {\n\n\t\tsuper();\n\t\tconst options = optionsFromArguments(\n\t\t\tToneAudioBuffers.getDefaults(), arguments, [\"urls\", \"onload\", \"baseUrl\"], \"urls\",\n\t\t);\n\n\t\tthis.baseUrl = options.baseUrl;\n\t\t// add each one\n\t\tObject.keys(options.urls).forEach(name => {\n\t\t\tthis._loadingCount++;\n\t\t\tconst url = options.urls[name];\n\t\t\tthis.add(name, url, this._bufferLoaded.bind(this, options.onload), options.onerror);\n\t\t});\n\n\t}\n\n\tstatic getDefaults(): ToneAudioBuffersOptions {\n\t\treturn {\n\t\t\tbaseUrl: \"\",\n\t\t\tonerror: noOp,\n\t\t\tonload: noOp,\n\t\t\turls: {},\n\t\t};\n\t}\n\n\t/**\n\t * True if the buffers object has a buffer by that name.\n\t * @param  name  The key or index of the buffer.\n\t */\n\thas(name: string | number): boolean {\n\t\treturn this._buffers.has(name.toString());\n\t}\n\n\t/**\n\t * Get a buffer by name. If an array was loaded,\n\t * then use the array index.\n\t * @param  name  The key or index of the buffer.\n\t */\n\tget(name: string | number): ToneAudioBuffer {\n\t\tassert(this.has(name), `ToneAudioBuffers has no buffer named: ${name}`);\n\t\treturn this._buffers.get(name.toString()) as ToneAudioBuffer;\n\t}\n\n\t/**\n\t * A buffer was loaded. decrement the counter.\n\t */\n\tprivate _bufferLoaded(callback: () => void): void {\n\t\tthis._loadingCount--;\n\t\tif (this._loadingCount === 0 && callback) {\n\t\t\tcallback();\n\t\t}\n\t}\n\n\t/**\n\t * If the buffers are loaded or not\n\t */\n\tget loaded(): boolean {\n\t\treturn Array.from(this._buffers).every(([_, buffer]) => buffer.loaded);\n\t}\n\n\t/**\n\t * Add a buffer by name and url to the Buffers\n\t * @param  name      A unique name to give the buffer\n\t * @param  url  Either the url of the bufer, or a buffer which will be added with the given name.\n\t * @param  callback  The callback to invoke when the url is loaded.\n\t * @param  onerror  Invoked if the buffer can't be loaded\n\t */\n\tadd(\n\t\tname: string | number,\n\t\turl: string | AudioBuffer | ToneAudioBuffer,\n\t\tcallback: () => void = noOp,\n\t\tonerror: (e: Error) => void = noOp,\n\t): this {\n\t\tif (isString(url)) {\n\t\t\tthis._buffers.set(name.toString(), new ToneAudioBuffer(this.baseUrl + url, callback, onerror));\n\t\t} else {\n\t\t\tthis._buffers.set(name.toString(), new ToneAudioBuffer(url, callback, onerror));\n\t\t}\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._buffers.forEach(buffer => buffer.dispose());\n\t\tthis._buffers.clear();\n\t\treturn this;\n\t}\n}\n","import { getContext } from \"../Global\";\nimport { ftom, mtof } from \"./Conversions\";\nimport { FrequencyClass, FrequencyUnit } from \"./Frequency\";\nimport { TimeValue } from \"./TimeBase\";\nimport { Hertz, Interval, MidiNote, Seconds, Ticks } from \"./Units\";\n\n/**\n * Midi is a primitive type for encoding Time values.\n * Midi can be constructed with or without the `new` keyword. Midi can be passed\n * into the parameter of any method which takes time as an argument.\n * @category Unit\n */\nexport class MidiClass extends FrequencyClass<MidiNote> {\n\n\treadonly name: string = \"MidiClass\";\n\n\treadonly defaultUnits = \"midi\";\n\n\t/**\n\t * Returns the value of a frequency in the current units\n\t */\n\tprotected _frequencyToUnits(freq: Hertz): MidiNote {\n\t\treturn ftom(super._frequencyToUnits(freq));\n\t}\n\n\t/**\n\t * Returns the value of a tick in the current time units\n\t */\n\tprotected _ticksToUnits(ticks: Ticks): MidiNote {\n\t\treturn ftom(super._ticksToUnits(ticks));\n\t}\n\n\t/**\n\t * Return the value of the beats in the current units\n\t */\n\tprotected _beatsToUnits(beats: number): MidiNote {\n\t\treturn ftom(super._beatsToUnits(beats));\n\t}\n\n\t/**\n\t * Returns the value of a second in the current units\n\t */\n\tprotected _secondsToUnits(seconds: Seconds): MidiNote {\n\t\treturn ftom(super._secondsToUnits(seconds));\n\t}\n\n\t/**\n\t * Return the value of the frequency as a MIDI note\n\t * @example\n\t * import { Midi } from \"tone\";\n\t * Midi(60).toMidi(); // 60\n\t */\n\ttoMidi(): MidiNote {\n\t\treturn this.valueOf();\n\t}\n\n\t/**\n\t * Return the value of the frequency as a MIDI note\n\t * @example\n\t * import { Midi } from \"tone\";\n\t * Midi(60).toFrequency(); // 261.6255653005986\n\t */\n\ttoFrequency(): Hertz {\n\t\treturn mtof(this.toMidi());\n\t}\n\n\t/**\n\t * Transposes the frequency by the given number of semitones.\n\t * @return A new transposed MidiClass\n\t * @example\n\t * import { Midi } from \"tone\";\n\t * Midi(\"A4\").transpose(3); // \"C5\"\n\t */\n\ttranspose(interval: Interval): MidiClass {\n\t\treturn new MidiClass(this.context, this.toMidi() + interval);\n\t}\n}\n\n/**\n * Convert a value into a FrequencyClass object.\n * @category Unit\n */\nexport function Midi(value?: TimeValue, units?: FrequencyUnit): MidiClass {\n\treturn new MidiClass(getContext(), value, units);\n}\n","import { ToneWithContext, ToneWithContextOptions } from \"../context/ToneWithContext\";\nimport { Seconds, Time } from \"../type/Units\";\nimport { Timeline, TimelineEvent } from \"./Timeline\";\nimport { onContextClose, onContextInit } from \"../context/ContextInitialization\";\n\ninterface DrawEvent extends TimelineEvent {\n\tcallback: () => void;\n}\n\n/**\n * Draw is useful for synchronizing visuals and audio events.\n * Callbacks from Tone.Transport or any of the Tone.Event classes\n * always happen _before_ the scheduled time and are not synchronized\n * to the animation frame so they are not good for triggering tightly\n * synchronized visuals and sound. Draw makes it easy to schedule\n * callbacks using the AudioContext time and uses requestAnimationFrame.\n * @example\n * import { Draw, Transport } from \"tone\";\n * Transport.schedule((time) => {\n *  \t// use the time argument to schedule a callback with Draw\n *  \tDraw.schedule(() => {\n *  \t\t// do drawing or DOM manipulation here\n *  \t}, time);\n * }, \"+0.5\");\n * @category Core\n */\nexport class Draw extends ToneWithContext<ToneWithContextOptions> {\n\n\treadonly name: string = \"Draw\";\n\n\t/**\n\t * The duration after which events are not invoked.\n\t */\n\texpiration: Seconds = 0.25;\n\n\t/**\n\t * The amount of time before the scheduled time\n\t * that the callback can be invoked. Default is\n\t * half the time of an animation frame (0.008 seconds).\n\t */\n\tanticipation: Seconds = 0.008;\n\n\t/**\n\t * All of the events.\n\t */\n\tprivate _events: Timeline<DrawEvent> = new Timeline();\n\n\t/**\n\t * The draw loop\n\t */\n\tprivate _boundDrawLoop = this._drawLoop.bind(this);\n\n\t/**\n\t * The animation frame id\n\t */\n\tprivate _animationFrame = -1;\n\n\t/**\n\t * Schedule a function at the given time to be invoked\n\t * on the nearest animation frame.\n\t * @param  callback  Callback is invoked at the given time.\n\t * @param  time      The time relative to the AudioContext time to invoke the callback.\n\t */\n\tschedule(callback: () => void, time: Time): this {\n\t\tthis._events.add({\n\t\t\tcallback,\n\t\t\ttime: this.toSeconds(time),\n\t\t});\n\t\t// start the draw loop on the first event\n\t\tif (this._events.length === 1) {\n\t\t\tthis._animationFrame = requestAnimationFrame(this._boundDrawLoop);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Cancel events scheduled after the given time\n\t * @param  after  Time after which scheduled events will be removed from the scheduling timeline.\n\t */\n\tcancel(after?: Time): this {\n\t\tthis._events.cancel(this.toSeconds(after));\n\t\treturn this;\n\t}\n\n\t/**\n\t * The draw loop\n\t */\n\tprivate _drawLoop(): void {\n\t\tconst now = this.context.currentTime;\n\t\twhile (this._events.length && (this._events.peek() as DrawEvent).time - this.anticipation <= now) {\n\t\t\tconst event = this._events.shift();\n\t\t\tif (event && now - event.time <= this.expiration) {\n\t\t\t\tevent.callback();\n\t\t\t}\n\t\t}\n\t\tif (this._events.length > 0) {\n\t\t\tthis._animationFrame = requestAnimationFrame(this._boundDrawLoop);\n\t\t}\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._events.dispose();\n\t\tcancelAnimationFrame(this._animationFrame);\n\t\treturn this;\n\t}\n}\n\n//-------------------------------------\n// \tINITIALIZATION\n//-------------------------------------\n\nonContextInit(context => {\n\tcontext.draw = new Draw({ context });\n});\n\nonContextClose(context => {\n\tcontext.draw.dispose();\n});\n","import { Volume } from \"../component/channel/Volume\";\nimport \"../core/context/Destination\";\nimport \"../core/clock/Transport\";\nimport { Param } from \"../core/context/Param\";\nimport { OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { Decibels, Seconds, Time } from \"../core/type/Units\";\nimport { defaultArg } from \"../core/util/Defaults\";\nimport { noOp, readOnly } from \"../core/util/Interface\";\nimport { BasicPlaybackState, StateTimeline, StateTimelineEvent } from \"../core/util/StateTimeline\";\nimport { isDefined, isUndef } from \"../core/util/TypeCheck\";\nimport { assert, assertContextRunning } from \"../core/util/Debug\";\nimport { GT } from \"../core/util/Math\";\n\ntype onStopCallback = (source: Source<any>) => void;\n\nexport interface SourceOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n\tmute: boolean;\n\tonstop: onStopCallback;\n}\n\n/**\n * Base class for sources. \n * start/stop of this.context.transport.\n * \n * ```\n * // Multiple state change events can be chained together,\n * // but must be set in the correct order and with ascending times\n * // OK\n * state.start().stop(\"+0.2\");\n * // OK\n * state.start().stop(\"+0.2\").start(\"+0.4\").stop(\"+0.7\")\n * // BAD\n * state.stop(\"+0.2\").start();\n * // BAD\n * state.start(\"+0.3\").stop(\"+0.2\");\n * ```\n */\nexport abstract class Source<Options extends SourceOptions> extends ToneAudioNode<Options> {\n\n\t/**\n\t * The output volume node\n\t */\n\tprivate _volume: Volume;\n\n\t/**\n\t * The output note\n\t */\n\toutput: OutputNode;\n\n\t/**\n\t * Sources have no inputs\n\t */\n\tinput = undefined;\n\n\t/**\n\t * The volume of the output in decibels.\n\t * @example\n\t * import { PWMOscillator } from \"tone\";\n\t * const source = new PWMOscillator().toDestination();\n\t * source.volume.value = -6;\n\t */\n\tvolume: Param<\"decibels\">;\n\n\t/**\n\t * The callback to invoke when the source is stopped.\n\t */\n\tonstop: onStopCallback;\n\n\t/**\n\t * Keep track of the scheduled state.\n\t */\n\tprotected _state: StateTimeline<{\n\t\tduration?: Seconds;\n\t\toffset?: Seconds;\n\t\t/**\n\t\t * Either the buffer is explicitly scheduled to end using the stop method,\n\t\t * or it's implicitly ended when the buffer is over.\n\t\t */\n\t\timplicitEnd?: boolean;\n\t}> = new StateTimeline(\"stopped\");\n\n\t/**\n\t * The synced `start` callback function from the transport\n\t */\n\tprotected _synced = false;\n\n\t/**\n\t * Keep track of all of the scheduled event ids\n\t */\n\tprivate _scheduled: number[] = [];\n\n\t/**\n\t * Placeholder functions for syncing/unsyncing to transport\n\t */\n\tprivate _syncedStart: (time: Seconds, offset: Seconds) => void = noOp;\n\tprivate _syncedStop: (time: Seconds) => void = noOp;\n\n\tconstructor(options: SourceOptions) {\n\t\tsuper(options);\n\t\tthis._state.memory = 100;\n\t\tthis._state.increasing = true;\n\n\t\tthis._volume = this.output = new Volume({\n\t\t\tcontext: this.context,\n\t\t\tmute: options.mute,\n\t\t\tvolume: options.volume,\n\t\t});\n\t\tthis.volume = this._volume.volume;\n\t\treadOnly(this, \"volume\");\n\t\tthis.onstop = options.onstop;\n\t}\n\n\tstatic getDefaults(): SourceOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmute: false,\n\t\t\tonstop: noOp,\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Returns the playback state of the source, either \"started\" or \"stopped\".\n\t * @example\n\t * import { Player } from \"tone\";\n\t * const player = new Player(\"https://tonejs.github.io/examples/audio/FWDL.mp3\", () => {\n\t * \tplayer.start();\n\t * \tconsole.log(player.state);\n\t * }).toDestination();\n\t */\n\tget state(): BasicPlaybackState {\n\t\tif (this._synced) {\n\t\t\tif (this.context.transport.state === \"started\") {\n\t\t\t\treturn this._state.getValueAtTime(this.context.transport.seconds) as BasicPlaybackState;\n\t\t\t} else {\n\t\t\t\treturn \"stopped\";\n\t\t\t}\n\t\t} else {\n\t\t\treturn this._state.getValueAtTime(this.now()) as BasicPlaybackState;\n\t\t}\n\t}\n\n\t/**\n\t * Mute the output.\n\t * @example\n\t * import { Oscillator } from \"tone\";\n\t * const osc = new Oscillator().toDestination().start();\n\t * // mute the output\n\t * osc.mute = true;\n\t */\n\tget mute(): boolean {\n\t\treturn this._volume.mute;\n\t}\n\tset mute(mute: boolean) {\n\t\tthis._volume.mute = mute;\n\t}\n\n\t// overwrite these functions\n\tprotected abstract _start(time: Time, offset?: Time, duration?: Time): void;\n\tprotected abstract _stop(time: Time): void;\n\tprotected abstract _restart(time: Seconds, offset?: Time, duration?: Time): void;\n\n\t/**\n\t * Ensure that the scheduled time is not before the current time.\n\t * Should only be used when scheduled unsynced.\n\t */\n\tprivate _clampToCurrentTime(time: Seconds): Seconds {\n\t\tif (this._synced) {\n\t\t\treturn time;\n\t\t} else {\n\t\t\treturn Math.max(time, this.context.currentTime);\n\t\t}\n\t}\n\n\t/**\n\t * Start the source at the specified time. If no time is given,\n\t * start the source now.\n\t * @param  time When the source should be started.\n\t * @example\n\t * import { Oscillator } from \"tone\";\n\t * const source = new Oscillator().toDestination();\n\t * source.start(\"+0.5\"); // starts the source 0.5 seconds from now\n\t */\n\tstart(time?: Time, offset?: Time, duration?: Time): this {\n\t\tlet computedTime = isUndef(time) && this._synced ? this.context.transport.seconds : this.toSeconds(time);\n\t\tcomputedTime = this._clampToCurrentTime(computedTime);\n\t\t// if it's started, stop it and restart it\n\t\tif (this._state.getValueAtTime(computedTime) === \"started\") {\n\t\t\t// time should be strictly greater than the previous start time\n\t\t\tassert(GT(computedTime, (this._state.get(computedTime) as StateTimelineEvent).time), \"Start time must be strictly greater than previous start time\");\n\t\t\tthis._state.cancel(computedTime);\n\t\t\tthis._state.setStateAtTime(\"started\", computedTime);\n\t\t\tthis.log(\"restart\", computedTime);\n\t\t\tthis.restart(computedTime, offset, duration);\n\t\t} else {\n\t\t\tthis.log(\"start\", computedTime);\n\t\t\tthis._state.setStateAtTime(\"started\", computedTime);\n\t\t\tif (this._synced) {\n\t\t\t\t// add the offset time to the event\n\t\t\t\tconst event = this._state.get(computedTime);\n\t\t\t\tif (event) {\n\t\t\t\t\tevent.offset = this.toSeconds(defaultArg(offset, 0));\n\t\t\t\t\tevent.duration = duration ? this.toSeconds(duration) : undefined;\n\t\t\t\t}\n\t\t\t\tconst sched = this.context.transport.schedule(t => {\n\t\t\t\t\tthis._start(t, offset, duration);\n\t\t\t\t}, computedTime);\n\t\t\t\tthis._scheduled.push(sched);\n\n\t\t\t\t// if it's already started\n\t\t\t\tif (this.context.transport.state === \"started\") {\n\t\t\t\t\tthis._syncedStart(this.now(), this.context.transport.seconds);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._start(computedTime, offset, duration);\n\t\t\t}\n\t\t\tassertContextRunning(this.context);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the source at the specified time. If no time is given,\n\t * stop the source now.\n\t * @param  time When the source should be stopped.\n\t * @example\n\t * import { Oscillator } from \"tone\";\n\t * const source = new Oscillator().toDestination();\n\t * source.start();\n\t * source.stop(\"+0.5\"); // stops the source 0.5 seconds from now\n\t */\n\tstop(time?: Time): this {\n\t\tlet computedTime = isUndef(time) && this._synced ? this.context.transport.seconds : this.toSeconds(time);\n\t\tcomputedTime = this._clampToCurrentTime(computedTime);\n\t\tif (this._state.getValueAtTime(computedTime) === \"started\" || isDefined(this._state.getNextState(\"started\", computedTime))) {\n\t\t\tthis.log(\"stop\", computedTime);\n\t\t\tif (!this._synced) {\n\t\t\t\tthis._stop(computedTime);\n\t\t\t} else {\n\t\t\t\tconst sched = this.context.transport.schedule(this._stop.bind(this), computedTime);\n\t\t\t\tthis._scheduled.push(sched);\n\t\t\t}\n\t\t\tthis._state.cancel(computedTime);\n\t\t\tthis._state.setStateAtTime(\"stopped\", computedTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Restart the source.\n\t */\n\trestart(time?: Time, offset?: Time, duration?: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(time) === \"started\") {\n\t\t\tthis._state.cancel(time);\n\t\t\tthis._restart(time, offset, duration);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sync the source to the Transport so that all subsequent\n\t * calls to `start` and `stop` are synced to the TransportTime\n\t * instead of the AudioContext time.\n\t *\n\t * @example\n\t * import { Oscillator, Transport } from \"tone\";\n\t * const osc = new Oscillator().toDestination();\n\t * // sync the source so that it plays between 0 and 0.3 on the Transport's timeline\n\t * osc.sync().start(0).stop(0.3);\n\t * // start the transport.\n\t * Transport.start();\n\t * // set it to loop once a second\n\t * Transport.loop = true;\n\t * Transport.loopEnd = 1;\n\t */\n\tsync(): this {\n\t\tif (!this._synced) {\n\t\t\tthis._synced = true;\n\t\t\tthis._syncedStart = (time, offset) => {\n\t\t\t\tif (offset > 0) {\n\t\t\t\t\t// get the playback state at that time\n\t\t\t\t\tconst stateEvent = this._state.get(offset);\n\t\t\t\t\t// listen for start events which may occur in the middle of the sync'ed time\n\t\t\t\t\tif (stateEvent && stateEvent.state === \"started\" && stateEvent.time !== offset) {\n\t\t\t\t\t\t// get the offset\n\t\t\t\t\t\tconst startOffset = offset - this.toSeconds(stateEvent.time);\n\t\t\t\t\t\tlet duration;\n\t\t\t\t\t\tif (stateEvent.duration) {\n\t\t\t\t\t\t\tduration = this.toSeconds(stateEvent.duration) - startOffset;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._start(time, this.toSeconds(stateEvent.offset) + startOffset, duration);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis._syncedStop = time => {\n\t\t\t\tconst seconds = this.context.transport.getSecondsAtTime(Math.max(time - this.sampleTime, 0));\n\t\t\t\tif (this._state.getValueAtTime(seconds) === \"started\") {\n\t\t\t\t\tthis._stop(time);\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis.context.transport.on(\"start\", this._syncedStart);\n\t\t\tthis.context.transport.on(\"loopStart\", this._syncedStart);\n\t\t\tthis.context.transport.on(\"stop\", this._syncedStop);\n\t\t\tthis.context.transport.on(\"pause\", this._syncedStop);\n\t\t\tthis.context.transport.on(\"loopEnd\", this._syncedStop);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unsync the source to the Transport. See Source.sync\n\t */\n\tunsync(): this {\n\t\tif (this._synced) {\n\t\t\tthis.context.transport.off(\"stop\", this._syncedStop);\n\t\t\tthis.context.transport.off(\"pause\", this._syncedStop);\n\t\t\tthis.context.transport.off(\"loopEnd\", this._syncedStop);\n\t\t\tthis.context.transport.off(\"start\", this._syncedStart);\n\t\t\tthis.context.transport.off(\"loopStart\", this._syncedStart);\n\t\t}\n\t\tthis._synced = false;\n\t\t// clear all of the scheduled ids\n\t\tthis._scheduled.forEach(id => this.context.transport.clear(id));\n\t\tthis._scheduled = [];\n\t\tthis._state.cancel(0);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.onstop = noOp;\n\t\tthis.unsync();\n\t\tthis._volume.dispose();\n\t\tthis._state.dispose();\n\t\treturn this;\n\t}\n}\n","import { connect } from \"../../core/context/ToneAudioNode\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { GainFactor, Positive, Seconds, Time } from \"../../core/type/Units\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp } from \"../../core/util/Interface\";\nimport { isDefined } from \"../../core/util/TypeCheck\";\nimport { assert } from \"../../core/util/Debug\";\nimport { OneShotSource, OneShotSourceCurve, OneShotSourceOptions } from \"../OneShotSource\";\nimport { EQ, GTE, LT } from \"../../core/util/Math\";\n\nexport type ToneBufferSourceCurve = OneShotSourceCurve;\n\nexport interface ToneBufferSourceOptions extends OneShotSourceOptions {\n\turl: string | AudioBuffer | ToneAudioBuffer;\n\tcurve: ToneBufferSourceCurve;\n\tplaybackRate: Positive;\n\tfadeIn: Time;\n\tfadeOut: Time;\n\tloopStart: Time;\n\tloopEnd: Time;\n\tloop: boolean;\n\tonload: () => void;\n\tonerror: (error: Error) => void;\n}\n\n/**\n * Wrapper around the native BufferSourceNode.\n * @category Source\n */\nexport class ToneBufferSource extends OneShotSource<ToneBufferSourceOptions> {\n\n\treadonly name: string = \"ToneBufferSource\";\n\n\t/**\n\t * The oscillator\n\t */\n\tprivate _source = this.context.createBufferSource();\n\tprotected _internalChannels = [this._source];\n\n\t/**\n\t * The frequency of the oscillator\n\t */\n\treadonly playbackRate: Param<\"positive\">;\n\n\t/**\n\t * The private instance of the buffer object\n\t */\n\tprivate _buffer: ToneAudioBuffer;\n\n\t/**\n\t * indicators if the source has started/stopped\n\t */\n\tprivate _sourceStarted = false;\n\tprivate _sourceStopped = false;\n\n\t/**\n\t * @param url The buffer to play or url to load\n\t * @param onload The callback to invoke when the buffer is done playing.\n\t */\n\tconstructor(url?: ToneAudioBuffer | AudioBuffer | string, onload?: () => void);\n\tconstructor(options?: Partial<ToneBufferSourceOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(ToneBufferSource.getDefaults(), arguments, [\"url\", \"onload\"]));\n\t\tconst options = optionsFromArguments(ToneBufferSource.getDefaults(), arguments, [\"url\", \"onload\"]);\n\n\t\tconnect(this._source, this._gainNode);\n\t\tthis._source.onended = () => this._stopSource();\n\n\t\t/**\n\t\t * The playbackRate of the buffer\n\t\t */\n\t\tthis.playbackRate = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._source.playbackRate,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.playbackRate,\n\t\t});\n\n\t\t// set some values initially\n\t\tthis.loop = options.loop;\n\t\tthis.loopStart = options.loopStart;\n\t\tthis.loopEnd = options.loopEnd;\n\t\tthis._buffer = new ToneAudioBuffer(options.url, options.onload, options.onerror);\n\n\t\tthis._internalChannels.push(this._source);\n\t}\n\n\tstatic getDefaults(): ToneBufferSourceOptions {\n\t\treturn Object.assign(OneShotSource.getDefaults(), {\n\t\t\turl: new ToneAudioBuffer(),\n\t\t\tloop: false,\n\t\t\tloopEnd: 0,\n\t\t\tloopStart: 0,\n\t\t\tonload: noOp,\n\t\t\tonerror: noOp,\n\t\t\tplaybackRate: 1,\n\t\t});\n\t}\n\n\t/**\n\t * The fadeIn time of the amplitude envelope.\n\t */\n\tget fadeIn(): Time {\n\t\treturn this._fadeIn;\n\t}\n\tset fadeIn(t: Time) {\n\t\tthis._fadeIn = t;\n\t}\n\n\t/**\n\t * The fadeOut time of the amplitude envelope.\n\t */\n\tget fadeOut(): Time {\n\t\treturn this._fadeOut;\n\t}\n\tset fadeOut(t: Time) {\n\t\tthis._fadeOut = t;\n\t}\n\n\t/**\n\t * The curve applied to the fades, either \"linear\" or \"exponential\"\n\t */\n\tget curve(): ToneBufferSourceCurve {\n\t\treturn this._curve;\n\t}\n\tset curve(t) {\n\t\tthis._curve = t;\n\t}\n\n\t/**\n\t * Start the buffer\n\t * @param  time When the player should start.\n\t * @param  offset The offset from the beginning of the sample to start at.\n\t * @param  duration How long the sample should play. If no duration is given, it will default to the full length of the sample (minus any offset)\n\t * @param  gain  The gain to play the buffer back at.\n\t */\n\tstart(time?: Time, offset?: Time, duration?: Time, gain: GainFactor = 1): this {\n\t\tassert(this.buffer.loaded, \"buffer is either not set or not loaded\");\n\t\tconst computedTime = this.toSeconds(time);\n\n\t\t// apply the gain envelope\n\t\tthis._startGain(computedTime, gain);\n\n\t\t// if it's a loop the default offset is the loopstart point\n\t\tif (this.loop) {\n\t\t\toffset = defaultArg(offset, this.loopStart);\n\t\t} else {\n\t\t\t// otherwise the default offset is 0\n\t\t\toffset = defaultArg(offset, 0);\n\t\t}\n\t\t// make sure the offset is not less than 0\n\t\tlet computedOffset = Math.max(this.toSeconds(offset), 0);\n\n\t\t// start the buffer source\n\t\tif (this.loop) {\n\t\t\t// modify the offset if it's greater than the loop time\n\t\t\tconst loopEnd = this.toSeconds(this.loopEnd) || this.buffer.duration;\n\t\t\tconst loopStart = this.toSeconds(this.loopStart);\n\t\t\tconst loopDuration = loopEnd - loopStart;\n\t\t\t// move the offset back\n\t\t\tif (GTE(computedOffset, loopEnd)) {\n\t\t\t\tcomputedOffset = ((computedOffset - loopStart) % loopDuration) + loopStart;\n\t\t\t}\n\t\t\t// when the offset is very close to the duration, set it to 0\n\t\t\tif (EQ(computedOffset, this.buffer.duration)) {\n\t\t\t\tcomputedOffset = 0;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// this.buffer.loaded would have return false if the AudioBuffer was undefined\n\t\tthis._source.buffer = this.buffer.get() as AudioBuffer;\n\t\tthis._source.loopEnd = this.toSeconds(this.loopEnd) || this.buffer.duration;\n\t\tif (LT(computedOffset, this.buffer.duration)) {\n\t\t\tthis._sourceStarted = true;\n\t\t\tthis._source.start(computedTime, computedOffset);\n\t\t}\n\n\t\t// if a duration is given, schedule a stop\n\t\tif (isDefined(duration)) {\n\t\t\tlet computedDur = this.toSeconds(duration);\n\t\t\t// make sure it's never negative\n\t\t\tcomputedDur = Math.max(computedDur, 0);\n\t\t\tthis.stop(computedTime + computedDur);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\tprotected _stopSource(time?: Seconds): void {\n\t\tif (!this._sourceStopped && this._sourceStarted) {\n\t\t\tthis._sourceStopped = true;\n\t\t\tthis._source.stop(this.toSeconds(time));\n\t\t\tthis._onended();\n\t\t}\n\t}\n\n\t/**\n\t * If loop is true, the loop will start at this position.\n\t */\n\tget loopStart(): Time {\n\t\treturn this._source.loopStart;\n\t}\n\tset loopStart(loopStart: Time) {\n\t\tthis._source.loopStart = this.toSeconds(loopStart);\n\t}\n\n\t/**\n\t * If loop is true, the loop will end at this position.\n\t */\n\tget loopEnd(): Time {\n\t\treturn this._source.loopEnd;\n\t}\n\tset loopEnd(loopEnd: Time) {\n\t\tthis._source.loopEnd = this.toSeconds(loopEnd);\n\t}\n\n\t/**\n\t * The audio buffer belonging to the player.\n\t */\n\tget buffer(): ToneAudioBuffer {\n\t\treturn this._buffer;\n\t}\n\tset buffer(buffer: ToneAudioBuffer) {\n\t\tthis._buffer.set(buffer);\n\t}\n\n\t/**\n\t * If the buffer should loop once it's over.\n\t */\n\tget loop(): boolean {\n\t\treturn this._source.loop;\n\t}\n\tset loop(loop: boolean) {\n\t\tthis._source.loop = loop;\n\t\tif (this._sourceStarted) {\n\t\t\tthis.cancelStop();\n\t\t}\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._source.onended = null;\n\t\tthis._source.disconnect();\n\t\tthis._buffer.dispose();\n\t\tthis.playbackRate.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioBuffer } from \"../core/context/ToneAudioBuffer\";\nimport { Positive, Time } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { assert } from \"../core/util/Debug\";\nimport { Source, SourceOptions } from \"../source/Source\";\nimport { ToneBufferSource } from \"./buffer/ToneBufferSource\";\n\nexport type NoiseType = \"white\" | \"brown\" | \"pink\";\n\nexport interface NoiseOptions extends SourceOptions {\n\ttype: NoiseType;\n\tplaybackRate: Positive;\n\tfadeIn: Time;\n\tfadeOut: Time;\n}\n\n/**\n * Noise is a noise generator. It uses looped noise buffers to save on performance.\n * Noise supports the noise types: \"pink\", \"white\", and \"brown\". Read more about\n * colors of noise on [Wikipedia](https://en.wikipedia.org/wiki/Colors_of_noise).\n *\n * @example\n * import { AutoFilter, Noise } from \"tone\";\n * // initialize the noise and start\n * const noise = new Noise(\"pink\").start();\n * // make an autofilter to shape the noise\n * const autoFilter = new AutoFilter({\n * \tfrequency: \"8n\",\n * \tbaseFrequency: 200,\n * \toctaves: 8\n * }).toDestination().start();\n * // connect the noise\n * noise.connect(autoFilter);\n * // start the autofilter LFO\n * autoFilter.start();\n * @category Source\n */\nexport class Noise extends Source<NoiseOptions> {\n\n\treadonly name: string = \"Noise\";\n\n\t/**\n\t * Private reference to the source\n\t */\n\tprivate _source: ToneBufferSource | null = null;\n\n\t/**\n\t * private reference to the type\n\t */\n\tprivate _type!: NoiseType;\n\n\t/**\n\t * The playback rate of the noise. Affects\n\t * the \"frequency\" of the noise.\n\t */\n\tprivate _playbackRate: Positive;\n\n\t/**\n\t * The fadeIn time of the amplitude envelope.\n\t */\n\tprotected _fadeIn: Time;\n\n\t/**\n\t * The fadeOut time of the amplitude envelope.\n\t */\n\tprotected _fadeOut: Time;\n\n\t/**\n\t * @param type the noise type (white|pink|brown)\n\t */\n\tconstructor(type?: NoiseType);\n\tconstructor(options?: Partial<NoiseOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Noise.getDefaults(), arguments, [\"type\"]));\n\t\tconst options = optionsFromArguments(Noise.getDefaults(), arguments, [\"type\"]);\n\n\t\tthis._playbackRate = options.playbackRate;\n\t\tthis.type = options.type;\n\t\tthis._fadeIn = options.fadeIn;\n\t\tthis._fadeOut = options.fadeOut;\n\t}\n\n\tstatic getDefaults(): NoiseOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tfadeIn: 0,\n\t\t\tfadeOut: 0,\n\t\t\tplaybackRate: 1,\n\t\t\ttype: \"white\" as NoiseType,\n\t\t});\n\t}\n\n\t/**\n\t * The type of the noise. Can be \"white\", \"brown\", or \"pink\".\n\t * @example\n\t * import { Noise } from \"tone\";\n\t * const noise = new Noise().toDestination().start();\n\t * noise.type = \"brown\";\n\t */\n\tget type(): NoiseType {\n\t\treturn this._type;\n\t}\n\tset type(type: NoiseType) {\n\t\tassert(type in _noiseBuffers, \"Noise: invalid type: \" + type);\n\t\tif (this._type !== type) {\n\t\t\tthis._type = type;\n\t\t\t// if it's playing, stop and restart it\n\t\t\tif (this.state === \"started\") {\n\t\t\t\tconst now = this.now();\n\t\t\t\tthis._stop(now);\n\t\t\t\tthis._start(now);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * The playback rate of the noise. Affects\n\t * the \"frequency\" of the noise.\n\t */\n\tget playbackRate(): Positive {\n\t\treturn this._playbackRate;\n\t}\n\tset playbackRate(rate: Positive) {\n\t\tthis._playbackRate = rate;\n\t\tif (this._source) {\n\t\t\tthis._source.playbackRate.value = rate;\n\t\t}\n\t}\n\n\t/**\n\t * internal start method\n\t */\n\tprotected _start(time?: Time): void {\n\t\tconst buffer = _noiseBuffers[this._type];\n\t\tthis._source = new ToneBufferSource({\n\t\t\turl: buffer,\n\t\t\tcontext: this.context,\n\t\t\tfadeIn: this._fadeIn,\n\t\t\tfadeOut: this._fadeOut,\n\t\t\tloop: true,\n\t\t\tonended: () => this.onstop(this),\n\t\t\tplaybackRate: this._playbackRate,\n\t\t}).connect(this.output);\n\t\tthis._source.start(this.toSeconds(time), Math.random() * (buffer.duration - 0.001));\n\t}\n\n\t/**\n\t * internal stop method\n\t */\n\tprotected _stop(time?: Time): void {\n\t\tif (this._source) {\n\t\t\tthis._source.stop(this.toSeconds(time));\n\t\t\tthis._source = null;\n\t\t}\n\t}\n\n\t/**\n\t * The fadeIn time of the amplitude envelope.\n\t */\n\tget fadeIn(): Time {\n\t\treturn this._fadeIn;\n\t}\n\tset fadeIn(time) {\n\t\tthis._fadeIn = time;\n\t\tif (this._source) {\n\t\t\tthis._source.fadeIn = this._fadeIn;\n\t\t}\n\t}\n\n\t/**\n\t * The fadeOut time of the amplitude envelope.\n\t */\n\tget fadeOut(): Time {\n\t\treturn this._fadeOut;\n\t}\n\tset fadeOut(time) {\n\t\tthis._fadeOut = time;\n\t\tif (this._source) {\n\t\t\tthis._source.fadeOut = this._fadeOut;\n\t\t}\n\t}\n\n\tprotected _restart(time?: Time): void {\n\t\t// TODO could be optimized by cancelling the buffer source 'stop'\n\t\tthis._stop(time);\n\t\tthis._start(time);\t\t\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (this._source) {\n\t\t\tthis._source.disconnect();\n\t\t}\n\t\treturn this;\n\t}\n}\n\n//--------------------\n// THE NOISE BUFFERS\n//--------------------\n\n// Noise buffer stats\nconst BUFFER_LENGTH = 44100 * 5;\nconst NUM_CHANNELS = 2;\n\n/**\n * The cached noise buffers\n */\ninterface NoiseCache {\n\t[key: string]: ToneAudioBuffer | null;\n}\n\n/**\n * Cache the noise buffers\n */\nconst _noiseCache: NoiseCache = {\n\tbrown: null,\n\tpink: null,\n\twhite: null,\n};\n\n/**\n * The noise arrays. Generated on initialization.\n * borrowed heavily from https://github.com/zacharydenton/noise.js\n * (c) 2013 Zach Denton (MIT)\n */\nconst _noiseBuffers = {\n\tget brown(): ToneAudioBuffer {\n\t\tif (!_noiseCache.brown) {\n\t\t\tconst buffer: Float32Array[] = [];\n\t\t\tfor (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {\n\t\t\t\tconst channel = new Float32Array(BUFFER_LENGTH);\n\t\t\t\tbuffer[channelNum] = channel;\n\t\t\t\tlet lastOut = 0.0;\n\t\t\t\tfor (let i = 0; i < BUFFER_LENGTH; i++) {\n\t\t\t\t\tconst white = Math.random() * 2 - 1;\n\t\t\t\t\tchannel[i] = (lastOut + (0.02 * white)) / 1.02;\n\t\t\t\t\tlastOut = channel[i];\n\t\t\t\t\tchannel[i] *= 3.5; // (roughly) compensate for gain\n\t\t\t\t}\n\t\t\t}\n\t\t\t_noiseCache.brown = new ToneAudioBuffer().fromArray(buffer);\n\t\t}\n\t\treturn _noiseCache.brown;\n\t},\n\n\tget pink(): ToneAudioBuffer {\n\t\tif (!_noiseCache.pink) {\n\t\t\tconst buffer: Float32Array[] = [];\n\t\t\tfor (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {\n\t\t\t\tconst channel = new Float32Array(BUFFER_LENGTH);\n\t\t\t\tbuffer[channelNum] = channel;\n\t\t\t\tlet b0, b1, b2, b3, b4, b5, b6;\n\t\t\t\tb0 = b1 = b2 = b3 = b4 = b5 = b6 = 0.0;\n\t\t\t\tfor (let i = 0; i < BUFFER_LENGTH; i++) {\n\t\t\t\t\tconst white = Math.random() * 2 - 1;\n\t\t\t\t\tb0 = 0.99886 * b0 + white * 0.0555179;\n\t\t\t\t\tb1 = 0.99332 * b1 + white * 0.0750759;\n\t\t\t\t\tb2 = 0.96900 * b2 + white * 0.1538520;\n\t\t\t\t\tb3 = 0.86650 * b3 + white * 0.3104856;\n\t\t\t\t\tb4 = 0.55000 * b4 + white * 0.5329522;\n\t\t\t\t\tb5 = -0.7616 * b5 - white * 0.0168980;\n\t\t\t\t\tchannel[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;\n\t\t\t\t\tchannel[i] *= 0.11; // (roughly) compensate for gain\n\t\t\t\t\tb6 = white * 0.115926;\n\t\t\t\t}\n\t\t\t}\n\t\t\t_noiseCache.pink = new ToneAudioBuffer().fromArray(buffer);\n\t\t}\n\t\treturn _noiseCache.pink;\n\t},\n\n\tget white(): ToneAudioBuffer {\n\t\tif (!_noiseCache.white) {\n\t\t\tconst buffer: Float32Array[] = [];\n\t\t\tfor (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {\n\t\t\t\tconst channel = new Float32Array(BUFFER_LENGTH);\n\t\t\t\tbuffer[channelNum] = channel;\n\t\t\t\tfor (let i = 0; i < BUFFER_LENGTH; i++) {\n\t\t\t\t\tchannel[i] = Math.random() * 2 - 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t_noiseCache.white = new ToneAudioBuffer().fromArray(buffer);\n\t\t}\n\t\treturn _noiseCache.white;\n\t},\n};\n","import { connect, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { Decibels } from \"../core/type/Units\";\nimport { Volume } from \"../component/channel/Volume\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { assert } from \"../core/util/Debug\";\nimport { Param } from \"../core/context/Param\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { isDefined, isNumber } from \"../core/util/TypeCheck\";\n\nexport interface UserMediaOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n\tmute: boolean;\n}\n/**\n * UserMedia uses MediaDevices.getUserMedia to open up and external microphone or audio input. \n * Check [MediaDevices API Support](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia)\n * to see which browsers are supported. Access to an external input\n * is limited to secure (HTTPS) connections.\n * @example\n * import { UserMedia } from \"tone\";\n * const mic = new UserMedia();\n * mic.open().then(() => {\n * \t// promise resolves when input is available\n * });\n * @category Source\n */\n\nexport class UserMedia extends ToneAudioNode<UserMediaOptions> {\n\n\treadonly name: string = \"UserMedia\";\n\n\treadonly input: undefined;\n\treadonly output: OutputNode;\n\n\t/**\n\t * The MediaStreamNode\n\t */\n\tprivate _mediaStream?: MediaStreamAudioSourceNode;\n\n\t/**\n\t * The media stream created by getUserMedia.\n\t */\n\tprivate _stream?: MediaStream;\n\n\t/**\n\t * The open device\n\t */\n\tprivate _device?: MediaDeviceInfo;\n\n\t/**\n\t * The output volume node\n\t */\n\tprivate _volume: Volume;\n\n\t/**\n\t * The volume of the output in decibels.\n\t */\n\treadonly volume: Param<\"decibels\">;\t\t\n\t\n\t/**\n\t * @param volume The level of the input in decibels\n\t */\n\tconstructor(volume?: Decibels);\n\tconstructor(options?: Partial<UserMediaOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(UserMedia.getDefaults(), arguments, [\"volume\"]));\n\t\tconst options = optionsFromArguments(UserMedia.getDefaults(), arguments, [\"volume\"]);\n\n\t\tthis._volume = this.output = new Volume({\n\t\t\tcontext: this.context,\n\t\t\tvolume: options.volume,\n\t\t});\n\t\tthis.volume = this._volume.volume;\n\t\treadOnly(this, \"volume\");\n\t\tthis.mute = options.mute;\n\t}\n\n\tstatic getDefaults(): UserMediaOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmute: false,\n\t\t\tvolume: 0\n\t\t});\n\t}\n\n\t/**\n\t * Open the media stream. If a string is passed in, it is assumed\n\t * to be the label or id of the stream, if a number is passed in,\n\t * it is the input number of the stream.\n\t * @param  labelOrId The label or id of the audio input media device.\n\t *                   With no argument, the default stream is opened.\n\t * @return The promise is resolved when the stream is open.\n\t */\n\tasync open(labelOrId?: string | number): Promise<this> {\n\t\tassert(UserMedia.supported, \"UserMedia is not supported\");\n\t\t// close the previous stream\n\t\tif (this.state === \"started\") {\n\t\t\tthis.close();\n\t\t}\n\t\tconst devices = await UserMedia.enumerateDevices();\n\t\tif (isNumber(labelOrId)) {\n\t\t\tthis._device = devices[labelOrId];\n\t\t} else {\n\t\t\tthis._device = devices.find((device) => {\n\t\t\t\treturn device.label === labelOrId || device.deviceId === labelOrId;\n\t\t\t});\n\t\t\t// didn't find a matching device\n\t\t\tif (!this._device && devices.length > 0) {\n\t\t\t\tthis._device = devices[0];\n\t\t\t}\n\t\t\tassert(isDefined(this._device), `No matching device ${labelOrId}`);\n\t\t}\n\t\t// do getUserMedia\n\t\tconst constraints = {\n\t\t\taudio: {\n\t\t\t\techoCancellation: false,\n\t\t\t\tsampleRate: this.context.sampleRate,\n\t\t\t\tnoiseSuppression: false,\n\t\t\t\tmozNoiseSuppression: false,\n\t\t\t}\n\t\t};\n\t\tif (this._device) {\n\t\t\t// @ts-ignore\n\t\t\tconstraints.audio.deviceId = this._device.deviceId;\t\t\t\t\n\t\t}\n\t\tconst stream = await navigator.mediaDevices.getUserMedia(constraints);\n\t\t// start a new source only if the previous one is closed\n\t\tif (!this._stream) {\n\t\t\tthis._stream = stream;\n\t\t\t// Wrap a MediaStreamSourceNode around the live input stream.\n\t\t\tconst mediaStreamNode = this.context.createMediaStreamSource(stream);\n\t\t\t// Connect the MediaStreamSourceNode to a gate gain node\n\t\t\tconnect(mediaStreamNode, this.output);\n\t\t\tthis._mediaStream = mediaStreamNode;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Close the media stream\n\t */\n\tclose(): this {\n\t\tif (this._stream && this._mediaStream) {\n\t\t\tthis._stream.getAudioTracks().forEach((track) => {\n\t\t\t\ttrack.stop();\n\t\t\t});\n\t\t\tthis._stream = undefined;\n\t\t\t// remove the old media stream\n\t\t\tthis._mediaStream.disconnect();\n\t\t\tthis._mediaStream = undefined;\n\t\t}\n\t\tthis._device = undefined;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns a promise which resolves with the list of audio input devices available.\n\t * @return The promise that is resolved with the devices\n\t * @example\n\t * import { UserMedia } from \"tone\";\n\t * UserMedia.enumerateDevices().then((devices) => {\n\t * \t// print the device labels\n\t * \tconsole.log(devices.map(device => device.label));\n\t * });\n\t */\n\tstatic async enumerateDevices(): Promise<MediaDeviceInfo[]> {\n\t\tconst allDevices = await navigator.mediaDevices.enumerateDevices();\n\t\treturn allDevices.filter(device => {\n\t\t\treturn device.kind === \"audioinput\";\n\t\t});\n\t}\n\n\t/**\n\t * Returns the playback state of the source, \"started\" when the microphone is open\n\t * and \"stopped\" when the mic is closed.\n\t */\n\tget state() {\n\t\treturn this._stream && this._stream.active ? \"started\" : \"stopped\";\n\t}\n\n\t/**\n\t * Returns an identifier for the represented device that is\n\t * persisted across sessions. It is un-guessable by other applications and\n\t * unique to the origin of the calling application. It is reset when the\n\t * user clears cookies (for Private Browsing, a different identifier is\n\t * used that is not persisted across sessions). Returns undefined when the\n\t * device is not open.\n\t */\n\tget deviceId(): string | undefined {\n\t\tif (this._device) {\n\t\t\treturn this._device.deviceId;\n\t\t} else {\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\t/**\n\t * Returns a group identifier. Two devices have the\n\t * same group identifier if they belong to the same physical device.\n\t * Returns null  when the device is not open.\n\t */\n\tget groupId(): string | undefined {\n\t\tif (this._device) {\n\t\t\treturn this._device.groupId;\n\t\t} else {\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\t/**\n\t * Returns a label describing this device (for example \"Built-in Microphone\").\n\t * Returns undefined when the device is not open or label is not available\n\t * because of permissions.\n\t */\n\tget label(): string | undefined {\n\t\tif (this._device) {\n\t\t\treturn this._device.label;\n\t\t} else {\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\t/**\n\t * Mute the output.\n\t * @example\n\t * import { UserMedia } from \"tone\";\n\t * const mic = new UserMedia();\n\t * mic.open().then(() => {\n\t * \t// promise resolves when input is available\n\t * });\n\t * // mute the output\n\t * mic.mute = true;\n\t */\n\tget mute(): boolean {\n\t\treturn this._volume.mute;\n\t}\n\tset mute(mute) {\n\t\tthis._volume.mute = mute;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.close();\n\t\tthis._volume.dispose();\n\t\tthis.volume.dispose();\n\t\treturn this;\n\t}\n\n\t/**\n\t * If getUserMedia is supported by the browser.\n\t */\n\tstatic get supported(): boolean {\n\t\treturn isDefined(navigator.mediaDevices) && \n\t\t\tisDefined(navigator.mediaDevices.getUserMedia);\n\t}\n}\n","import { AudioRange, Cents, Degrees, Frequency, Positive } from \"../../core/type/Units\";\nimport { Omit } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { SourceOptions } from \"../Source\";\nimport { OfflineContext } from \"../../core/context/OfflineContext\";\n\n/**\n * The common interface of all Oscillators\n */\nexport interface ToneOscillatorInterface {\n\n\t/**\n\t * The oscillator type without the partialsCount appended to the end\n\t * @example\n\t * import { Oscillator } from \"tone\";\n\t * const osc = new Oscillator();\n\t * osc.type = \"sine2\";\n\t * console.log(osc.baseType); // \"sine\"\n\t */\n\tbaseType: OscillatorType | \"pulse\" | \"pwm\";\n\n\t/**\n\t * The oscillator's type. Also capable of setting the first x number of partials of the oscillator. \n\t * For example: \"sine4\" would set be the first 4 partials of the sine wave and \"triangle8\" would \n\t * set the first 8 partials of the triangle wave.\n\t * @example\n\t * import { Oscillator } from \"tone\";\n\t * const osc = new Oscillator();\n\t * osc.type = \"sine2\";\n\t */\n\ttype: ExtendedToneOscillatorType;\n\t\n\t/**\n\t * The frequency value of the oscillator\n\t * @example\n\t * import { FMOscillator } from \"tone\";\n\t * const osc = new FMOscillator(\"Bb4\").toDestination().start();\n\t * osc.frequency.rampTo(\"D2\", 3);\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * The detune value in cents (100th of a semitone).\n\t * @example\n\t * import { now, PulseOscillator } from \"tone\";\n\t * const osc = new PulseOscillator(\"F3\").toDestination().start();\n\t * // pitch it 1 octave = 12 semitones = 1200 cents\n\t * osc.detune.setValueAtTime(-1200, now());\n\t * osc.detune.setValueAtTime(1200, now() + 0.5);\n\t * osc.detune.linearRampToValueAtTime(0, now() + 1);\n\t * osc.stop(now() + 1.5);\n\t */\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * The phase is the starting position within the oscillator's cycle. For example\n\t * a phase of 180 would start halfway through the oscillator's cycle. \n\t */\n\tphase: Degrees;\n\n\t/**\n\t * The partials describes the relative amplitude of each of the harmonics of the oscillator. \n\t * The first value in the array is the first harmonic (i.e. the fundamental frequency), the \n\t * second harmonic is an octave up, the third harmonic is an octave and a fifth, etc. The resulting\n\t * oscillator output is composed of a sine tone at the relative amplitude at each of the harmonic intervals. \n\t * \n\t * Setting this value will automatically set the type to \"custom\".\n\t * The value is an empty array when the type is not \"custom\".\n\t * @example\n\t * import { Oscillator } from \"tone\";\n\t * const osc = new Oscillator(\"F3\").toDestination().start();\n\t * osc.partials = [1, 0, 0.4, 1, 0.2];\n\t */\n\tpartials: number[];\n\t\n\t/**\n\t * 'partialCount' offers an alternative way to set the number of used partials.\n\t * When partialCount is 0, the maximum number of partials are used when representing\n\t * the waveform using the periodicWave. When 'partials' is set, this value is\n\t * not settable, but equals the length of the partials array. A square wave wave\n\t * is composed of only odd harmonics up through the harmonic series. Partial count\n\t * can limit the number of harmonics which are used to generate the waveform.\n\t * @example\n\t * import { Oscillator } from \"tone\";\n\t * const osc = new Oscillator(\"C3\", \"square\").toDestination().start();\n\t * osc.partialCount = 5;\n\t */\n\tpartialCount?: number;\n\n\t/**\n\t * Returns an array of values which represents the waveform.\n\t * @param length The length of the waveform to return\n\t */\n\tasArray(length: number): Promise<Float32Array>;\n}\n\n/**\n * Render a segment of the oscillator to an offline context and return the results as an array\n */\nexport async function generateWaveform(instance: any, length: number): Promise<Float32Array> {\n\tconst duration = length / instance.context.sampleRate;\n\tconst context = new OfflineContext(1, duration, instance.context.sampleRate);\n\tconst clone = new instance.constructor(Object.assign(instance.get(), { \n\t\t// should do 2 iterations\n\t\tfrequency: 2 / duration,\n\t\t// zero out the detune\n\t\tdetune: 0,\n\t\tcontext\n\t})).toDestination();\n\tclone.start(0);\n\tconst buffer = await context.render();\n\treturn buffer.getChannelData(0);\n}\n\n/**\n * Oscillators with partials\n */\ntype SineWithPartials =\n\t\"sine1\" | \"sine2\" | \"sine3\" | \"sine4\" | \"sine5\" | \"sine6\" | \"sine7\" | \"sine8\" | \"sine9\" |\n\t\"sine10\" | \"sine11\" | \"sine12\" | \"sine13\" | \"sine14\" | \"sine15\" | \"sine16\" | \"sine17\" | \"sine18\" | \"sine19\" |\n\t\"sine20\" | \"sine21\" | \"sine22\" | \"sine23\" | \"sine24\" | \"sine25\" | \"sine26\" | \"sine27\" | \"sine28\" | \"sine29\" |\n\t\"sine30\" | \"sine31\" | \"sine32\";\n\ntype SquareWithPartials =\n\t\"square1\" | \"square2\" | \"square3\" | \"square4\" | \"square5\" | \"square6\" | \"square7\" | \"square8\" | \"square9\" |\n\t\"square10\" | \"square11\" | \"square12\" | \"square13\" | \"square14\" | \"square15\" | \"square16\" | \"square17\" | \"square18\" | \"square19\" |\n\t\"square20\" | \"square21\" | \"square22\" | \"square23\" | \"square24\" | \"square25\" | \"square26\" | \"square27\" | \"square28\" | \"square29\" |\n\t\"square30\" | \"square31\" | \"square32\";\n\ntype SawtoothWithPartials =\n\t\"sawtooth1\" | \"sawtooth2\" | \"sawtooth3\" | \"sawtooth4\" | \"sawtooth5\" | \"sawtooth6\" | \"sawtooth7\" | \"sawtooth8\" | \"sawtooth9\" |\n\t\"sawtooth10\" | \"sawtooth11\" | \"sawtooth12\" | \"sawtooth13\" | \"sawtooth14\" | \"sawtooth15\" | \"sawtooth16\" | \"sawtooth17\" | \"sawtooth18\" | \"sawtooth19\" |\n\t\"sawtooth20\" | \"sawtooth21\" | \"sawtooth22\" | \"sawtooth23\" | \"sawtooth24\" | \"sawtooth25\" | \"sawtooth26\" | \"sawtooth27\" | \"sawtooth28\" | \"sawtooth29\" |\n\t\"sawtooth30\" | \"sawtooth31\" | \"sawtooth32\";\n\ntype TriangleWithPartials =\n\t\"triangle1\" | \"triangle2\" | \"triangle3\" | \"triangle4\" | \"triangle5\" | \"triangle6\" | \"triangle7\" | \"triangle8\" | \"triangle9\" |\n\t\"triangle10\" | \"triangle11\" | \"triangle12\" | \"triangle13\" | \"triangle14\" | \"triangle15\" | \"triangle16\" | \"triangle17\" | \"triangle18\" | \"triangle19\" |\n\t\"triangle20\" | \"triangle21\" | \"triangle22\" | \"triangle23\" | \"triangle24\" | \"triangle25\" | \"triangle26\" | \"triangle27\" | \"triangle28\" | \"triangle29\" |\n\t\"triangle30\" | \"triangle31\" | \"triangle32\";\n\ntype TypeWithPartials = SineWithPartials | SquareWithPartials | TriangleWithPartials | SawtoothWithPartials;\n\ninterface BaseOscillatorOptions extends SourceOptions {\n\tfrequency: Frequency;\n\tdetune: Cents;\n\tphase: Degrees;\n}\n\nexport type NonCustomOscillatorType = Exclude<OscillatorType, \"custom\">;\n\ntype AllNonCustomOscillatorType = NonCustomOscillatorType | TypeWithPartials;\n\nexport type ToneOscillatorType = AllNonCustomOscillatorType | \"custom\";\n\nexport type ExtendedToneOscillatorType = ToneOscillatorType | \"pwm\" | \"pulse\";\n\n/**\n * Oscillator Interfaces\n */\ninterface ToneCustomOscillatorOptions extends BaseOscillatorOptions {\n\ttype: \"custom\";\n\tpartials: number[];\n}\n\ninterface ToneTypeOscillatorOptions extends BaseOscillatorOptions {\n\ttype: NonCustomOscillatorType;\n\tpartialCount?: number;\n}\n\ninterface TonePartialOscillatorOptions extends BaseOscillatorOptions {\n\ttype: TypeWithPartials;\n}\n\nexport type ToneOscillatorConstructorOptions = ToneCustomOscillatorOptions | ToneTypeOscillatorOptions | TonePartialOscillatorOptions;\n\nexport interface ToneOscillatorOptions extends BaseOscillatorOptions {\n\ttype: ToneOscillatorType;\n\tpartialCount: number;\n\tpartials: number[];\n}\n\n/**\n * FMOscillator Interface\n */\ninterface FMBaseOscillatorOptions extends BaseOscillatorOptions {\n\tharmonicity: Positive;\n\tmodulationIndex: Positive;\n\tmodulationType: AllNonCustomOscillatorType;\n}\n\ninterface FMCustomOscillatorOptions extends FMBaseOscillatorOptions {\n\ttype: \"custom\";\n\tpartials: number[];\n}\n\ninterface FMTypeOscillatorOptions extends FMBaseOscillatorOptions {\n\ttype: NonCustomOscillatorType;\n\tpartialsCount?: number;\n}\n\ninterface FMPartialsOscillatorOptions extends FMBaseOscillatorOptions {\n\ttype: TypeWithPartials;\n}\n\nexport type FMConstructorOptions = FMTypeOscillatorOptions | FMCustomOscillatorOptions | FMPartialsOscillatorOptions;\n\nexport interface FMOscillatorOptions extends ToneOscillatorOptions {\n\tharmonicity: Positive;\n\tmodulationIndex: Positive;\n\tmodulationType: AllNonCustomOscillatorType;\n}\n\n/**\n * AMOscillator Interface\n */\ninterface AMBaseOscillatorOptions extends BaseOscillatorOptions {\n\tharmonicity: Positive;\n\tmodulationType: AllNonCustomOscillatorType;\n}\n\ninterface AMCustomOscillatorOptions extends AMBaseOscillatorOptions {\n\ttype: \"custom\";\n\tpartials: number[];\n}\n\ninterface AMTypeOscillatorOptions extends AMBaseOscillatorOptions {\n\ttype: NonCustomOscillatorType;\n\tpartialsCount?: number;\n}\n\ninterface AMPartialsOscillatorOptions extends AMBaseOscillatorOptions {\n\ttype: TypeWithPartials;\n}\n\nexport type AMConstructorOptions = AMCustomOscillatorOptions | AMTypeOscillatorOptions | AMPartialsOscillatorOptions;\n\nexport interface AMOscillatorOptions extends ToneOscillatorOptions {\n\tharmonicity: Positive;\n\tmodulationType: AllNonCustomOscillatorType;\n}\n/**\n * FatOscillator\n */\ninterface FatBaseOscillatorOptions extends BaseOscillatorOptions {\n\tspread: Cents;\n\tcount: Positive;\n}\n\ninterface FatCustomOscillatorOptions extends FatBaseOscillatorOptions {\n\ttype: \"custom\";\n\tpartials: number[];\n}\n\ninterface FatTypeOscillatorOptions extends FatBaseOscillatorOptions {\n\ttype: NonCustomOscillatorType;\n\tpartialCount?: number;\n}\n\ninterface FatPartialsOscillatorOptions extends FatBaseOscillatorOptions {\n\ttype: TypeWithPartials;\n}\n\nexport type FatConstructorOptions = FatCustomOscillatorOptions | FatTypeOscillatorOptions | FatPartialsOscillatorOptions;\n\nexport interface FatOscillatorOptions extends ToneOscillatorOptions {\n\tspread: Cents;\n\tcount: Positive;\n}\n\n/**\n * Pulse Oscillator\n */\nexport interface PulseOscillatorOptions extends BaseOscillatorOptions {\n\ttype: \"pulse\";\n\twidth: AudioRange;\n}\n\n/**\n * PWM Oscillator\n */\nexport interface PWMOscillatorOptions extends BaseOscillatorOptions {\n\ttype: \"pwm\";\n\tmodulationFrequency: Frequency;\n}\n\n/**\n * OMNI OSCILLATOR\n */\n\n/**\n * FM Oscillators with partials\n */\ntype FMSineWithPartials =\n\t\"fmsine1\" | \"fmsine2\" | \"fmsine3\" | \"fmsine4\" | \"fmsine5\" | \"fmsine6\" | \"fmsine7\" | \"fmsine8\" | \"fmsine9\" |\n\t\"fmsine10\" | \"fmsine11\" | \"fmsine12\" | \"fmsine13\" | \"fmsine14\" | \"fmsine15\" | \"fmsine16\" | \"fmsine17\" | \"fmsine18\" | \"fmsine19\" |\n\t\"fmsine20\" | \"fmsine21\" | \"fmsine22\" | \"fmsine23\" | \"fmsine24\" | \"fmsine25\" | \"fmsine26\" | \"fmsine27\" | \"fmsine28\" | \"fmsine29\" |\n\t\"fmsine30\" | \"fmsine31\" | \"fmsine32\";\n\ntype FMSquareWithPartials =\n\t\"fmsquare1\" | \"fmsquare2\" | \"fmsquare3\" | \"fmsquare4\" | \"fmsquare5\" | \"fmsquare6\" | \"fmsquare7\" | \"fmsquare8\" | \"fmsquare9\" |\n\t\"fmsquare10\" | \"fmsquare11\" | \"fmsquare12\" | \"fmsquare13\" | \"fmsquare14\" | \"fmsquare15\" | \"fmsquare16\" | \"fmsquare17\" | \"fmsquare18\" | \"fmsquare19\" |\n\t\"fmsquare20\" | \"fmsquare21\" | \"fmsquare22\" | \"fmsquare23\" | \"fmsquare24\" | \"fmsquare25\" | \"fmsquare26\" | \"fmsquare27\" | \"fmsquare28\" | \"fmsquare29\" |\n\t\"fmsquare30\" | \"fmsquare31\" | \"fmsquare32\";\n\ntype FMSawtoothWithPartials =\n\t\"fmsawtooth1\" | \"fmsawtooth2\" | \"fmsawtooth3\" | \"fmsawtooth4\" | \"fmsawtooth5\" | \"fmsawtooth6\" | \"fmsawtooth7\" | \"fmsawtooth8\" | \"fmsawtooth9\" |\n\t\"fmsawtooth10\" | \"fmsawtooth11\" | \"fmsawtooth12\" | \"fmsawtooth13\" | \"fmsawtooth14\" | \"fmsawtooth15\" | \"fmsawtooth16\" | \"fmsawtooth17\" | \"fmsawtooth18\" | \"fmsawtooth19\" |\n\t\"fmsawtooth20\" | \"fmsawtooth21\" | \"fmsawtooth22\" | \"fmsawtooth23\" | \"fmsawtooth24\" | \"fmsawtooth25\" | \"fmsawtooth26\" | \"fmsawtooth27\" | \"fmsawtooth28\" | \"fmsawtooth29\" |\n\t\"fmsawtooth30\" | \"fmsawtooth31\" | \"fmsawtooth32\";\n\ntype FMTriangleWithPartials =\n\t\"fmtriangle1\" | \"fmtriangle2\" | \"fmtriangle3\" | \"fmtriangle4\" | \"fmtriangle5\" | \"fmtriangle6\" | \"fmtriangle7\" | \"fmtriangle8\" | \"fmtriangle9\" |\n\t\"fmtriangle10\" | \"fmtriangle11\" | \"fmtriangle12\" | \"fmtriangle13\" | \"fmtriangle14\" | \"fmtriangle15\" | \"fmtriangle16\" | \"fmtriangle17\" | \"fmtriangle18\" | \"fmtriangle19\" |\n\t\"fmtriangle20\" | \"fmtriangle21\" | \"fmtriangle22\" | \"fmtriangle23\" | \"fmtriangle24\" | \"fmtriangle25\" | \"fmtriangle26\" | \"fmtriangle27\" | \"fmtriangle28\" | \"fmtriangle29\" |\n\t\"fmtriangle30\" | \"fmtriangle31\" | \"fmtriangle32\";\n\ntype FMTypeWithPartials = FMSineWithPartials | FMSquareWithPartials | FMSawtoothWithPartials | FMTriangleWithPartials;\n\n/**\n * AM Oscillators with partials\n */\ntype AMSineWithPartials =\n\t\"amsine1\" | \"amsine2\" | \"amsine3\" | \"amsine4\" | \"amsine5\" | \"amsine6\" | \"amsine7\" | \"amsine8\" | \"amsine9\" |\n\t\"amsine10\" | \"amsine11\" | \"amsine12\" | \"amsine13\" | \"amsine14\" | \"amsine15\" | \"amsine16\" | \"amsine17\" | \"amsine18\" | \"amsine19\" |\n\t\"amsine20\" | \"amsine21\" | \"amsine22\" | \"amsine23\" | \"amsine24\" | \"amsine25\" | \"amsine26\" | \"amsine27\" | \"amsine28\" | \"amsine29\" |\n\t\"amsine30\" | \"amsine31\" | \"amsine32\";\n\ntype AMSquareWithPartials =\n\t\"amsquare1\" | \"amsquare2\" | \"amsquare3\" | \"amsquare4\" | \"amsquare5\" | \"amsquare6\" | \"amsquare7\" | \"amsquare8\" | \"amsquare9\" |\n\t\"amsquare10\" | \"amsquare11\" | \"amsquare12\" | \"amsquare13\" | \"amsquare14\" | \"amsquare15\" | \"amsquare16\" | \"amsquare17\" | \"amsquare18\" | \"amsquare19\" |\n\t\"amsquare20\" | \"amsquare21\" | \"amsquare22\" | \"amsquare23\" | \"amsquare24\" | \"amsquare25\" | \"amsquare26\" | \"amsquare27\" | \"amsquare28\" | \"amsquare29\" |\n\t\"amsquare30\" | \"amsquare31\" | \"amsquare32\";\n\ntype AMSawtoothWithPartials =\n\t\"amsawtooth1\" | \"amsawtooth2\" | \"amsawtooth3\" | \"amsawtooth4\" | \"amsawtooth5\" | \"amsawtooth6\" | \"amsawtooth7\" | \"amsawtooth8\" | \"amsawtooth9\" |\n\t\"amsawtooth10\" | \"amsawtooth11\" | \"amsawtooth12\" | \"amsawtooth13\" | \"amsawtooth14\" | \"amsawtooth15\" | \"amsawtooth16\" | \"amsawtooth17\" | \"amsawtooth18\" | \"amsawtooth19\" |\n\t\"amsawtooth20\" | \"amsawtooth21\" | \"amsawtooth22\" | \"amsawtooth23\" | \"amsawtooth24\" | \"amsawtooth25\" | \"amsawtooth26\" | \"amsawtooth27\" | \"amsawtooth28\" | \"amsawtooth29\" |\n\t\"amsawtooth30\" | \"amsawtooth31\" | \"amsawtooth32\";\n\ntype AMTriangleWithPartials =\n\t\"amtriangle1\" | \"amtriangle2\" | \"amtriangle3\" | \"amtriangle4\" | \"amtriangle5\" | \"amtriangle6\" | \"amtriangle7\" | \"amtriangle8\" | \"amtriangle9\" |\n\t\"amtriangle10\" | \"amtriangle11\" | \"amtriangle12\" | \"amtriangle13\" | \"amtriangle14\" | \"amtriangle15\" | \"amtriangle16\" | \"amtriangle17\" | \"amtriangle18\" | \"amtriangle19\" |\n\t\"amtriangle20\" | \"amtriangle21\" | \"amtriangle22\" | \"amtriangle23\" | \"amtriangle24\" | \"amtriangle25\" | \"amtriangle26\" | \"amtriangle27\" | \"amtriangle28\" | \"amtriangle29\" |\n\t\"amtriangle30\" | \"amtriangle31\" | \"amtriangle32\";\n\ntype AMTypeWithPartials = AMSineWithPartials | AMSquareWithPartials | AMSawtoothWithPartials | AMTriangleWithPartials;\n\n/**\n * Fat Oscillators with partials\n */\ntype FatSineWithPartials =\n\t\"fatsine1\" | \"fatsine2\" | \"fatsine3\" | \"fatsine4\" | \"fatsine5\" | \"fatsine6\" | \"fatsine7\" | \"fatsine8\" | \"fatsine9\" |\n\t\"fatsine10\" | \"fatsine11\" | \"fatsine12\" | \"fatsine13\" | \"fatsine14\" | \"fatsine15\" | \"fatsine16\" | \"fatsine17\" | \"fatsine18\" | \"fatsine19\" |\n\t\"fatsine20\" | \"fatsine21\" | \"fatsine22\" | \"fatsine23\" | \"fatsine24\" | \"fatsine25\" | \"fatsine26\" | \"fatsine27\" | \"fatsine28\" | \"fatsine29\" |\n\t\"fatsine30\" | \"fatsine31\" | \"fatsine32\";\n\ntype FatSquareWithPartials =\n\t\"fatsquare1\" | \"fatsquare2\" | \"fatsquare3\" | \"fatsquare4\" | \"fatsquare5\" | \"fatsquare6\" | \"fatsquare7\" | \"fatsquare8\" | \"fatsquare9\" |\n\t\"fatsquare10\" | \"fatsquare11\" | \"fatsquare12\" | \"fatsquare13\" | \"fatsquare14\" | \"fatsquare15\" | \"fatsquare16\" | \"fatsquare17\" | \"fatsquare18\" | \"fatsquare19\" |\n\t\"fatsquare20\" | \"fatsquare21\" | \"fatsquare22\" | \"fatsquare23\" | \"fatsquare24\" | \"fatsquare25\" | \"fatsquare26\" | \"fatsquare27\" | \"fatsquare28\" | \"fatsquare29\" |\n\t\"fatsquare30\" | \"fatsquare31\" | \"fatsquare32\";\n\ntype FatSawtoothWithPartials =\n\t\"fatsawtooth1\" | \"fatsawtooth2\" | \"fatsawtooth3\" | \"fatsawtooth4\" | \"fatsawtooth5\" | \"fatsawtooth6\" | \"fatsawtooth7\" | \"fatsawtooth8\" | \"fatsawtooth9\" |\n\t\"fatsawtooth10\" | \"fatsawtooth11\" | \"fatsawtooth12\" | \"fatsawtooth13\" | \"fatsawtooth14\" | \"fatsawtooth15\" | \"fatsawtooth16\" | \"fatsawtooth17\" | \"fatsawtooth18\" | \"fatsawtooth19\" |\n\t\"fatsawtooth20\" | \"fatsawtooth21\" | \"fatsawtooth22\" | \"fatsawtooth23\" | \"fatsawtooth24\" | \"fatsawtooth25\" | \"fatsawtooth26\" | \"fatsawtooth27\" | \"fatsawtooth28\" | \"fatsawtooth29\" |\n\t\"fatsawtooth30\" | \"fatsawtooth31\" | \"fatsawtooth32\";\n\ntype FatTriangleWithPartials =\n\t\"fattriangle1\" | \"fattriangle2\" | \"fattriangle3\" | \"fattriangle4\" | \"fattriangle5\" | \"fattriangle6\" | \"fattriangle7\" | \"fattriangle8\" | \"fattriangle9\" |\n\t\"fattriangle10\" | \"fattriangle11\" | \"fattriangle12\" | \"fattriangle13\" | \"fattriangle14\" | \"fattriangle15\" | \"fattriangle16\" | \"fattriangle17\" | \"fattriangle18\" | \"fattriangle19\" |\n\t\"fattriangle20\" | \"fattriangle21\" | \"fattriangle22\" | \"fattriangle23\" | \"fattriangle24\" | \"fattriangle25\" | \"fattriangle26\" | \"fattriangle27\" | \"fattriangle28\" | \"fattriangle29\" |\n\t\"fattriangle30\" | \"fattriangle31\" | \"fattriangle32\";\n\ntype FatTypeWithPartials = FatSineWithPartials | FatSquareWithPartials | FatSawtoothWithPartials | FatTriangleWithPartials;\n\n/**\n * Omni FM\n */\ninterface OmniFMCustomOscillatorOptions extends FMBaseOscillatorOptions {\n\ttype: \"fmcustom\";\n\tpartials: number[];\n}\n\ninterface OmniFMTypeOscillatorOptions extends FMBaseOscillatorOptions {\n\ttype: \"fmsine\" | \"fmsquare\" | \"fmsawtooth\" | \"fmtriangle\";\n\tpartialsCount?: number;\n}\n\ninterface OmniFMPartialsOscillatorOptions extends FMBaseOscillatorOptions {\n\ttype: FMTypeWithPartials;\n}\n\n/**\n * Omni AM\n */\ninterface OmniAMCustomOscillatorOptions extends AMBaseOscillatorOptions {\n\ttype: \"amcustom\";\n\tpartials: number[];\n}\n\ninterface OmniAMTypeOscillatorOptions extends AMBaseOscillatorOptions {\n\ttype: \"amsine\" | \"amsquare\" | \"amsawtooth\" | \"amtriangle\";\n\tpartialsCount?: number;\n}\n\ninterface OmniAMPartialsOscillatorOptions extends AMBaseOscillatorOptions {\n\ttype: AMTypeWithPartials;\n}\n\n/**\n * Omni Fat\n */\ninterface OmniFatCustomOscillatorOptions extends FatBaseOscillatorOptions {\n\ttype: \"fatcustom\";\n\tpartials: number[];\n}\n\ninterface OmniFatTypeOscillatorOptions extends FatBaseOscillatorOptions {\n\ttype: \"fatsine\" | \"fatsquare\" | \"fatsawtooth\" | \"fattriangle\";\n\tpartialsCount?: number;\n}\n\ninterface OmniFatPartialsOscillatorOptions extends FatBaseOscillatorOptions {\n\ttype: FatTypeWithPartials;\n}\n\nexport type OmniOscillatorType =\n\t\"fatsine\" | \"fatsquare\" | \"fatsawtooth\" | \"fattriangle\" | \"fatcustom\" | FatTypeWithPartials |\n\t\"fmsine\" | \"fmsquare\" | \"fmsawtooth\" | \"fmtriangle\" | \"fmcustom\" | FMTypeWithPartials |\n\t\"amsine\" | \"amsquare\" | \"amsawtooth\" | \"amtriangle\" | \"amcustom\" | AMTypeWithPartials |\n\tTypeWithPartials | OscillatorType | \"pulse\" | \"pwm\";\n\nexport type OmniOscillatorConstructorOptions =\n\tPulseOscillatorOptions | PWMOscillatorOptions |\n\tOmniFatCustomOscillatorOptions | OmniFatTypeOscillatorOptions | OmniFatPartialsOscillatorOptions |\n\tOmniFMCustomOscillatorOptions | OmniFMTypeOscillatorOptions | OmniFMPartialsOscillatorOptions |\n\tOmniAMCustomOscillatorOptions | OmniAMTypeOscillatorOptions | OmniAMPartialsOscillatorOptions |\n\tToneOscillatorConstructorOptions;\n\n// export type OmniOscillatorSourceOptions = OmniOscillatorConstructorOptions & SourceOptions;\n\nexport type OmniOscillatorOptions =\n\tPulseOscillatorOptions & PWMOscillatorOptions &\n\tOmniFatCustomOscillatorOptions & OmniFatTypeOscillatorOptions & OmniFatPartialsOscillatorOptions &\n\tOmniFMCustomOscillatorOptions & OmniFMTypeOscillatorOptions & OmniFMPartialsOscillatorOptions &\n\tOmniAMCustomOscillatorOptions & OmniAMTypeOscillatorOptions & OmniAMPartialsOscillatorOptions &\n\tToneOscillatorConstructorOptions;\n\ntype OmitSourceOptions<T extends BaseOscillatorOptions> = Omit<T, \"frequency\" | \"detune\" | \"context\">;\n\n/**\n * The settable options for the omni oscillator inside of the source which excludes certain attributes that are defined by the parent class\n */\nexport type OmniOscillatorSynthOptions =\n\tOmitSourceOptions<PulseOscillatorOptions> | OmitSourceOptions<PWMOscillatorOptions> |\n\tOmitSourceOptions<OmniFatCustomOscillatorOptions> | OmitSourceOptions<OmniFatTypeOscillatorOptions> | OmitSourceOptions<OmniFatPartialsOscillatorOptions> |\n\tOmitSourceOptions<OmniFMCustomOscillatorOptions> | OmitSourceOptions<OmniFMTypeOscillatorOptions> | OmitSourceOptions<OmniFMPartialsOscillatorOptions> |\n\tOmitSourceOptions<OmniAMCustomOscillatorOptions> | OmitSourceOptions<OmniAMTypeOscillatorOptions> | OmitSourceOptions<OmniAMPartialsOscillatorOptions> |\n\tOmitSourceOptions<ToneCustomOscillatorOptions> | OmitSourceOptions<ToneTypeOscillatorOptions> | OmitSourceOptions<TonePartialOscillatorOptions>\n","import { connect } from \"../../core/context/ToneAudioNode\";\nimport { Param } from \"../../core/context/Param\";\nimport { Cents, Frequency, Seconds, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { OneShotSource, OneShotSourceOptions } from \"../OneShotSource\";\n\nexport interface ToneOscillatorNodeOptions extends OneShotSourceOptions {\n\tfrequency: Frequency;\n\tdetune: Cents;\n\ttype: OscillatorType;\n}\n\n/**\n * Wrapper around the native fire-and-forget OscillatorNode.\n * Adds the ability to reschedule the stop method.\n * ***[[Oscillator]] is better for most use-cases***\n * @category Source\n */\nexport class ToneOscillatorNode extends OneShotSource<ToneOscillatorNodeOptions> {\n\n\treadonly name: string = \"ToneOscillatorNode\";\n\n\t/**\n\t * The oscillator\n\t */\n\tprivate _oscillator = this.context.createOscillator();\n\tprotected _internalChannels = [this._oscillator];\n\n\t/**\n\t * The frequency of the oscillator\n\t */\n\treadonly frequency: Param<\"frequency\">;\n\n\t/**\n\t * The detune of the oscillator\n\t */\n\treadonly detune: Param<\"cents\">;\n\n\t/**\n\t * @param  frequency   The frequency value\n\t * @param  type  The basic oscillator type\n\t */\n\tconstructor(\n\t\tfrequency: Frequency,\n\t\ttype: OscillatorType,\n\t);\n\tconstructor(options?: Partial<ToneOscillatorNodeOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(ToneOscillatorNode.getDefaults(), arguments, [\"frequency\", \"type\"]));\n\t\tconst options = optionsFromArguments(ToneOscillatorNode.getDefaults(), arguments, [\"frequency\", \"type\"]);\n\n\t\tconnect(this._oscillator, this._gainNode);\n\n\t\tthis.type = options.type;\n\n\t\tthis.frequency = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._oscillator.frequency,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t});\n\n\t\tthis.detune = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._oscillator.detune,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune,\n\t\t});\n\t}\n\n\tstatic getDefaults(): ToneOscillatorNodeOptions {\n\t\treturn Object.assign(OneShotSource.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tfrequency: 440,\n\t\t\ttype: \"sine\" as OscillatorType,\n\t\t});\n\t}\n\n\t/**\n\t * Start the oscillator node at the given time\n\t * @param  time When to start the oscillator\n\t */\n\tstart(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis.log(\"start\", computedTime);\n\t\tthis._startGain(computedTime);\n\t\tthis._oscillator.start(computedTime);\n\t\treturn this;\n\t}\n\n\tprotected _stopSource(time?: Seconds): void {\n\t\tthis._oscillator.stop(time);\n\t}\n\n\t/**\n\t * Sets an arbitrary custom periodic waveform given a PeriodicWave.\n\t * @param  periodicWave PeriodicWave should be created with context.createPeriodicWave\n\t */\n\tsetPeriodicWave(periodicWave: PeriodicWave): this {\n\t\tthis._oscillator.setPeriodicWave(periodicWave);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The oscillator type. Either 'sine', 'sawtooth', 'square', or 'triangle'\n\t */\n\tget type(): OscillatorType {\n\t\treturn this._oscillator.type;\n\t}\n\tset type(type: OscillatorType) {\n\t\tthis._oscillator.type = type;\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (this.state === \"started\") {\n\t\t\tthis.stop();\n\t\t}\n\t\tthis._oscillator.disconnect();\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\treturn this;\n\t}\n}\n","import { AudioRange, Degrees, Frequency, Radians, Time } from \"../../core/type/Units\";\nimport { deepEquals, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { isDefined } from \"../../core/util/TypeCheck\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { generateWaveform, ToneOscillatorConstructorOptions, ToneOscillatorInterface,\n\tToneOscillatorOptions, ToneOscillatorType } from \"./OscillatorInterface\";\nimport { ToneOscillatorNode } from \"./ToneOscillatorNode\";\nimport { assertRange } from \"../../core/util/Debug\";\nimport { clamp } from \"../../core/util/Math\";\nexport { ToneOscillatorOptions, ToneOscillatorType } from \"./OscillatorInterface\";\n/**\n * Oscillator supports a number of features including\n * phase rotation, multiple oscillator types (see Oscillator.type),\n * and Transport syncing (see Oscillator.syncFrequency).\n *\n * @example\n * import { Oscillator } from \"tone\";\n * // make and start a 440hz sine tone\n * const osc = new Oscillator(440, \"sine\").toDestination().start();\n * @category Source\n */\nexport class Oscillator extends Source<ToneOscillatorOptions> implements ToneOscillatorInterface {\n\n\treadonly name: string = \"Oscillator\";\n\n\t/**\n\t * the main oscillator\n\t */\n\tprivate _oscillator: ToneOscillatorNode | null = null;\n\n\t/**\n\t * The frequency control.\n\t */\n\tfrequency: Signal<\"frequency\">;\n\n\t/**\n\t * The detune control signal.\n\t */\n\tdetune: Signal<\"cents\">;\n\n\t/**\n\t * the periodic wave\n\t */\n\tprivate _wave?: PeriodicWave;\n\n\t/**\n\t * The partials of the oscillator\n\t */\n\tprivate _partials: number[];\n\n\t/**\n\t * The number of partials to limit or extend the periodic wave by\n\t */\n\tprivate _partialCount: number;\n\n\t/**\n\t * the phase of the oscillator between 0 - 360\n\t */\n\tprivate _phase!: Radians;\n\n\t/**\n\t * the type of the oscillator\n\t */\n\tprivate _type: ToneOscillatorType;\n\n\t/**\n\t * @param frequency Starting frequency\n\t * @param type The oscillator type. Read more about type below.\n\t */\n\tconstructor(frequency?: Frequency, type?: ToneOscillatorType);\n\tconstructor(options?: Partial<ToneOscillatorConstructorOptions>)\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Oscillator.getDefaults(), arguments, [\"frequency\", \"type\"]));\n\t\tconst options = optionsFromArguments(Oscillator.getDefaults(), arguments, [\"frequency\", \"type\"]);\n\n\t\tthis.frequency = new Signal<\"frequency\">({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t});\n\t\treadOnly(this, \"frequency\");\n\n\t\tthis.detune = new Signal<\"cents\">({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune,\n\t\t});\n\t\treadOnly(this, \"detune\");\n\n\t\tthis._partials = options.partials;\n\t\tthis._partialCount = options.partialCount;\n\t\tthis._type = options.type;\n\n\t\tif (options.partialCount && options.type !== \"custom\") {\n\t\t\tthis._type = this.baseType + options.partialCount.toString() as ToneOscillatorType;\n\t\t}\n\t\tthis.phase = options.phase;\n\t}\n\n\tstatic getDefaults(): ToneOscillatorOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tfrequency: 440,\n\t\t\tpartialCount: 0,\n\t\t\tpartials: [],\n\t\t\tphase: 0,\n\t\t\ttype: \"sine\",\n\t\t}) as ToneOscillatorOptions;\n\t}\n\n\t/**\n\t * start the oscillator\n\t */\n\tprotected _start(time?: Time): void {\n\t\tconst computedTime = this.toSeconds(time);\n\t\t// new oscillator with previous values\n\t\tconst oscillator = new ToneOscillatorNode({\n\t\t\tcontext: this.context,\n\t\t\tonended: () => this.onstop(this),\n\t\t});\n\t\tthis._oscillator = oscillator;\n\t\tif (this._wave) {\n\t\t\tthis._oscillator.setPeriodicWave(this._wave);\n\t\t} else {\n\t\t\tthis._oscillator.type = this._type as OscillatorType;\n\t\t}\n\t\t// connect the control signal to the oscillator frequency & detune\n\t\tthis._oscillator.connect(this.output);\n\t\tthis.frequency.connect(this._oscillator.frequency);\n\t\tthis.detune.connect(this._oscillator.detune);\n\n\t\t// start the oscillator\n\t\tthis._oscillator.start(computedTime);\n\t}\n\n\t/**\n\t * stop the oscillator\n\t */\n\tprotected _stop(time?: Time): void {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._oscillator) {\n\t\t\tthis._oscillator.stop(computedTime);\n\t\t}\n\t}\n\n\t/**\n\t * Restart the oscillator. Does not stop the oscillator, but instead\n\t * just cancels any scheduled 'stop' from being invoked.\n\t */\n\tprotected _restart(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis.log(\"restart\", computedTime);\n\t\tif (this._oscillator) {\n\t\t\tthis._oscillator.cancelStop();\n\t\t}\n\t\tthis._state.cancel(computedTime);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sync the signal to the Transport's bpm. Any changes to the transports bpm,\n\t * will also affect the oscillators frequency.\n\t * @example\n\t * import { Oscillator, Transport } from \"tone\";\n\t * const osc = new Oscillator().toDestination().start();\n\t * osc.frequency.value = 440;\n\t * // the ratio between the bpm and the frequency will be maintained\n\t * osc.syncFrequency();\n\t * // double the tempo\n\t * Transport.bpm.value *= 2;\n\t * // the frequency of the oscillator is doubled to 880\n\t */\n\tsyncFrequency(): this {\n\t\tthis.context.transport.syncSignal(this.frequency);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unsync the oscillator's frequency from the Transport.\n\t * See Oscillator.syncFrequency\n\t */\n\tunsyncFrequency(): this {\n\t\tthis.context.transport.unsyncSignal(this.frequency);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Cache the periodic waves to avoid having to redo computations\n\t */\n\tprivate static _periodicWaveCache: Array<{\n\t\tpartials: number[];\n\t\tphase: number;\n\t\ttype: string;\n\t\tpartialCount: number;\n\t\treal: Float32Array;\n\t\timag: Float32Array;\n\t\twave: PeriodicWave;\n\t}> = [];\n\n\t/**\n\t * Get a cached periodic wave. Avoids having to recompute\n\t * the oscillator values when they have already been computed\n\t * with the same values.\n\t */\n\tprivate _getCachedPeriodicWave(): {real: Float32Array; imag: Float32Array; partials: number[]; wave: PeriodicWave} | undefined {\n\t\tif (this._type === \"custom\") {\n\t\t\tconst oscProps = Oscillator._periodicWaveCache.find(description => {\n\t\t\t\treturn description.phase === this._phase &&\n\t\t\t\t\tdeepEquals(description.partials, this._partials);\n\t\t\t});\n\t\t\treturn oscProps;\n\t\t} else {\n\t\t\tconst oscProps = Oscillator._periodicWaveCache.find(description => {\n\t\t\t\treturn description.type === this._type &&\n\t\t\t\t\tdescription.phase === this._phase;\n\t\t\t});\n\t\t\tthis._partialCount = oscProps ? oscProps.partialCount : this._partialCount;\n\t\t\treturn oscProps;\n\t\t}\n\t}\n\n\tget type(): ToneOscillatorType {\n\t\treturn this._type;\n\t}\n\tset type(type) {\n\t\tthis._type = type;\n\t\tconst isBasicType = [\"sine\", \"square\", \"sawtooth\", \"triangle\"].indexOf(type) !== -1;\n\t\tif (this._phase === 0 && isBasicType) {\n\t\t\tthis._wave = undefined;\n\t\t\tthis._partialCount = 0;\n\t\t\t// just go with the basic approach\n\t\t\tif (this._oscillator !== null) {\n\t\t\t\t// already tested that it's a basic type\n\t\t\t\tthis._oscillator.type = type as OscillatorType;\n\t\t\t}\n\t\t} else {\n\t\t\t// first check if the value is cached\n\t\t\tconst cache = this._getCachedPeriodicWave();\n\t\t\tif (isDefined(cache)) {\n\t\t\t\tconst { partials, wave } = cache;\n\t\t\t\tthis._wave = wave;\n\t\t\t\tthis._partials = partials;\n\t\t\t\tif (this._oscillator !== null) {\n\t\t\t\t\tthis._oscillator.setPeriodicWave(this._wave);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst [real, imag] = this._getRealImaginary(type, this._phase);\n\t\t\t\tconst periodicWave = this.context.createPeriodicWave(real, imag);\n\t\t\t\tthis._wave = periodicWave;\n\t\t\t\tif (this._oscillator !== null) {\n\t\t\t\t\tthis._oscillator.setPeriodicWave(this._wave);\n\t\t\t\t}\n\t\t\t\t// set the cache\n\t\t\t\tOscillator._periodicWaveCache.push({\n\t\t\t\t\timag,\n\t\t\t\t\tpartialCount: this._partialCount,\n\t\t\t\t\tpartials: this._partials,\n\t\t\t\t\tphase: this._phase,\n\t\t\t\t\treal,\n\t\t\t\t\ttype: this._type,\n\t\t\t\t\twave: this._wave,\n\t\t\t\t});\n\t\t\t\tif (Oscillator._periodicWaveCache.length > 100) {\n\t\t\t\t\tOscillator._periodicWaveCache.shift();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tget baseType(): OscillatorType {\n\t\treturn (this._type as string).replace(this.partialCount.toString(), \"\") as OscillatorType;\n\t}\n\tset baseType(baseType) {\n\t\tif (this.partialCount && this._type !== \"custom\" && baseType !== \"custom\") {\n\t\t\tthis.type = baseType + this.partialCount as ToneOscillatorType;\n\t\t} else {\n\t\t\tthis.type = baseType;\n\t\t}\n\t}\n\n\tget partialCount(): number {\n\t\treturn this._partialCount;\n\t}\n\tset partialCount(p) {\n\t\tassertRange(p, 0);\n\t\tlet type = this._type;\n\t\tconst partial = /^(sine|triangle|square|sawtooth)(\\d+)$/.exec(this._type);\n\t\tif (partial) {\n\t\t\ttype = partial[1] as OscillatorType;\n\t\t}\n\t\tif (this._type !== \"custom\") {\n\t\t\tif (p === 0) {\n\t\t\t\tthis.type = type;\n\t\t\t} else {\n\t\t\t\tthis.type = type + p.toString() as ToneOscillatorType;\n\t\t\t}\n\t\t} else {\n\t\t\t// extend or shorten the partials array\n\t\t\tconst fullPartials = new Float32Array(p);\n\t\t\t// copy over the partials array\n\t\t\tthis._partials.forEach((v, i) => fullPartials[i] = v);\n\t\t\tthis._partials = Array.from(fullPartials);\n\t\t\tthis.type = this._type;\n\t\t}\n\t}\n\n\t/**\n\t * Returns the real and imaginary components based\n\t * on the oscillator type.\n\t * @returns [real: Float32Array, imaginary: Float32Array]\n\t */\n\tprivate _getRealImaginary(type: ToneOscillatorType, phase: Radians): Float32Array[] {\n\t\tconst fftSize = 4096;\n\t\tlet periodicWaveSize = fftSize / 2;\n\n\t\tconst real = new Float32Array(periodicWaveSize);\n\t\tconst imag = new Float32Array(periodicWaveSize);\n\n\t\tlet partialCount = 1;\n\t\tif (type === \"custom\") {\n\t\t\tpartialCount = this._partials.length + 1;\n\t\t\tthis._partialCount = this._partials.length;\n\t\t\tperiodicWaveSize = partialCount;\n\t\t\t// if the partial count is 0, don't bother doing any computation\n\t\t\tif (this._partials.length === 0) {\n\t\t\t\treturn [real, imag];\n\t\t\t}\n\t\t} else {\n\t\t\tconst partial = /^(sine|triangle|square|sawtooth)(\\d+)$/.exec(type);\n\t\t\tif (partial) {\n\t\t\t\tpartialCount = parseInt(partial[2], 10) + 1;\n\t\t\t\tthis._partialCount = parseInt(partial[2], 10);\n\t\t\t\ttype = partial[1] as ToneOscillatorType;\n\t\t\t\tpartialCount = Math.max(partialCount, 2);\n\t\t\t\tperiodicWaveSize = partialCount;\n\t\t\t} else {\n\t\t\t\tthis._partialCount = 0;\n\t\t\t}\n\t\t\tthis._partials = [];\n\t\t}\n\n\t\tfor (let n = 1; n < periodicWaveSize; ++n) {\n\t\t\tconst piFactor = 2 / (n * Math.PI);\n\t\t\tlet b;\n\t\t\tswitch (type) {\n\t\t\t\tcase \"sine\":\n\t\t\t\t\tb = (n <= partialCount) ? 1 : 0;\n\t\t\t\t\tthis._partials[n - 1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"square\":\n\t\t\t\t\tb = (n & 1) ? 2 * piFactor : 0;\n\t\t\t\t\tthis._partials[n - 1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"sawtooth\":\n\t\t\t\t\tb = piFactor * ((n & 1) ? 1 : -1);\n\t\t\t\t\tthis._partials[n - 1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"triangle\":\n\t\t\t\t\tif (n & 1) {\n\t\t\t\t\t\tb = 2 * (piFactor * piFactor) * ((((n - 1) >> 1) & 1) ? -1 : 1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tb = 0;\n\t\t\t\t\t}\n\t\t\t\t\tthis._partials[n - 1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"custom\":\n\t\t\t\t\tb = this._partials[n - 1];\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new TypeError(\"Oscillator: invalid type: \" + type);\n\t\t\t}\n\t\t\tif (b !== 0) {\n\t\t\t\treal[n] = -b * Math.sin(phase * n);\n\t\t\t\timag[n] = b * Math.cos(phase * n);\n\t\t\t} else {\n\t\t\t\treal[n] = 0;\n\t\t\t\timag[n] = 0;\n\t\t\t}\n\t\t}\n\t\treturn [real, imag];\n\t}\n\n\t/**\n\t * Compute the inverse FFT for a given phase.\n\t */\n\tprivate _inverseFFT(real: Float32Array, imag: Float32Array, phase: Radians): number {\n\t\tlet sum = 0;\n\t\tconst len = real.length;\n\t\tfor (let i = 0; i < len; i++) {\n\t\t\tsum += real[i] * Math.cos(i * phase) + imag[i] * Math.sin(i * phase);\n\t\t}\n\t\treturn sum;\n\t}\n\n\t/**\n\t * Returns the initial value of the oscillator when stopped.\n\t * E.g. a \"sine\" oscillator with phase = 90 would return an initial value of -1.\n\t */\n\tgetInitialValue(): AudioRange {\n\t\tconst [real, imag] = this._getRealImaginary(this._type, 0);\n\t\tlet maxValue = 0;\n\t\tconst twoPi = Math.PI * 2;\n\t\tconst testPositions = 32;\n\t\t// check for peaks in 16 places\n\t\tfor (let i = 0; i < testPositions; i++) {\n\t\t\tmaxValue = Math.max(this._inverseFFT(real, imag, (i / testPositions) * twoPi), maxValue);\n\t\t}\n\t\treturn clamp(-this._inverseFFT(real, imag, this._phase) / maxValue, -1, 1);\n\t}\n\n\tget partials(): number[] {\n\t\treturn this._partials.slice(0, this.partialCount);\n\t}\n\tset partials(partials) {\n\t\tthis._partials = partials;\n\t\tthis._partialCount = this._partials.length;\n\t\tif (partials.length) {\n\t\t\tthis.type = \"custom\";\n\t\t}\n\t}\n\n\tget phase(): Degrees {\n\t\treturn this._phase * (180 / Math.PI);\n\t}\n\tset phase(phase) {\n\t\tthis._phase = phase * Math.PI / 180;\n\t\t// reset the type\n\t\tthis.type = this._type;\n\t}\n\n\tasync asArray(length = 1024): Promise<Float32Array> {\n\t\treturn generateWaveform(this, length);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (this._oscillator !== null) {\n\t\t\tthis._oscillator.dispose();\n\t\t}\n\t\tthis._wave = undefined;\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\treturn this;\n\t}\n}\n","import { optionsFromArguments } from \"../core/util/Defaults\";\nimport { InputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { connectSignal } from \"./Signal\";\n\nexport type SignalOperatorOptions = ToneAudioNodeOptions;\n\n/**\n * A signal operator has an input and output and modifies the signal.\n */\nexport abstract class SignalOperator<Options extends SignalOperatorOptions> extends ToneAudioNode<Options> {\n\n\tconstructor(options?: Partial<Options>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(SignalOperator.getDefaults(), arguments, [\"context\"])));\n\t}\n\n\tconnect(destination: InputNode, outputNum = 0, inputNum = 0): this {\n\t\tconnectSignal(this, destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { isArray, isFunction } from \"../core/util/TypeCheck\";\nimport { assert } from \"../core/util/Debug\";\nimport { Signal } from \"./Signal\";\nimport { SignalOperator } from \"./SignalOperator\";\n\nexport type WaveShaperMappingFn = (value: number, index?: number) => number;\n\ntype WaveShaperMapping = WaveShaperMappingFn | number[] | Float32Array;\n\ninterface WaveShaperOptions extends ToneAudioNodeOptions {\n\tmapping?: WaveShaperMapping;\n\tlength: number;\n\tcurve?: number[] | Float32Array;\n}\n\n/**\n * Wraps the native Web Audio API\n * [WaveShaperNode](http://webaudio.github.io/web-audio-api/#the-waveshapernode-interface).\n *\n * @example\n * import { Oscillator, Signal, WaveShaper } from \"tone\";\n * const osc = new Oscillator().toDestination().start();\n * // multiply the output of the signal by 2 using the waveshaper's function\n * const timesTwo = new WaveShaper((val) => val * 2, 2048).connect(osc.frequency);\n * const signal = new Signal(440).connect(timesTwo);\n * @category Signal\n */\nexport class WaveShaper extends SignalOperator<WaveShaperOptions> {\n\n\treadonly name: string = \"WaveShaper\";\n\n\t/**\n\t * the waveshaper node\n\t */\n\tprivate _shaper: WaveShaperNode = this.context.createWaveShaper();\n\n\t/**\n\t * The input to the waveshaper node.\n\t */\n\tinput = this._shaper;\n\n\t/**\n\t * The output from the waveshaper node\n\t */\n\toutput = this._shaper;\n\n\t/**\n\t * @param mapping The function used to define the values.\n\t *                The mapping function should take two arguments:\n\t *                the first is the value at the current position\n\t *                and the second is the array position.\n\t *                If the argument is an array, that array will be\n\t *                set as the wave shaping function. The input\n\t *                signal is an AudioRange [-1, 1] value and the output\n\t *                signal can take on any numerical values.\n\t *\n\t * @param bufferLen The length of the WaveShaperNode buffer.\n\t */\n\tconstructor(mapping?: WaveShaperMapping, length?: number);\n\tconstructor(options?: Partial<WaveShaperOptions>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(WaveShaper.getDefaults(), arguments, [\"mapping\", \"length\"])));\n\t\tconst options = optionsFromArguments(WaveShaper.getDefaults(), arguments, [\"mapping\", \"length\"]);\n\n\t\tif (isArray(options.mapping) || options.mapping instanceof Float32Array) {\n\t\t\tthis.curve = Float32Array.from(options.mapping);\n\t\t} else if (isFunction(options.mapping)) {\n\t\t\tthis.setMap(options.mapping, options.length);\n\t\t}\n\t}\n\n\tstatic getDefaults(): WaveShaperOptions {\n\t\treturn Object.assign(Signal.getDefaults(), {\n\t\t\tlength: 1024,\n\t\t});\n\t}\n\n\t/**\n\t * Uses a mapping function to set the value of the curve.\n\t * @param mapping The function used to define the values.\n\t *                The mapping function take two arguments:\n\t *                the first is the value at the current position\n\t *                which goes from -1 to 1 over the number of elements\n\t *                in the curve array. The second argument is the array position.\n\t * @example\n\t * import { WaveShaper } from \"tone\";\n\t * const shaper = new WaveShaper();\n\t * // map the input signal from [-1, 1] to [0, 10]\n\t * shaper.setMap((val, index) => (val + 1) * 5);\n\t */\n\tsetMap(mapping: WaveShaperMappingFn, length = 1024): this {\n\t\tconst array = new Float32Array(length);\n\t\tfor (let i = 0, len = length; i < len; i++) {\n\t\t\tconst normalized = (i / (len - 1)) * 2 - 1;\n\t\t\tarray[i] = mapping(normalized, i);\n\t\t}\n\t\tthis.curve = array;\n\t\treturn this;\n\t}\n\n\t/**\n\t * The array to set as the waveshaper curve. For linear curves\n\t * array length does not make much difference, but for complex curves\n\t * longer arrays will provide smoother interpolation.\n\t */\n\tget curve(): Float32Array | null {\n\t\treturn this._shaper.curve;\n\t}\n\n\tset curve(mapping: Float32Array | null) {\n\t\tthis._shaper.curve = mapping;\n\t}\n\n\t/**\n\t * Specifies what type of oversampling (if any) should be used when\n\t * applying the shaping curve. Can either be \"none\", \"2x\" or \"4x\".\n\t */\n\tget oversample(): OverSampleType {\n\t\treturn this._shaper.oversample;\n\t}\n\n\tset oversample(oversampling: OverSampleType) {\n\t\tconst isOverSampleType = [\"none\", \"2x\", \"4x\"].some(str => str.includes(oversampling));\n\t\tassert(isOverSampleType, \"oversampling must be either 'none', '2x', or '4x'\");\n\t\tthis._shaper.oversample = oversampling;\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._shaper.disconnect();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { SignalOperator } from \"./SignalOperator\";\nimport { WaveShaper } from \"./WaveShaper\";\n\n/**\n * AudioToGain converts an input in AudioRange [-1,1] to NormalRange [0,1].\n * See {@link GainToAudio}.\n * @category Signal\n */\nexport class AudioToGain extends SignalOperator<ToneAudioNodeOptions> {\n\n\treadonly name: string = \"AudioToGain\";\n\n\t/**\n\t * The node which converts the audio ranges\n\t */\n\tprivate _norm = new WaveShaper({\n\t\tcontext: this.context,\n\t\tmapping: x => (x + 1) / 2,\n\t});\n\n\t/**\n\t * The AudioRange input [-1, 1]\n\t */\n\tinput = this._norm;\n\n\t/**\n\t * The GainRange output [0, 1]\n\t */\n\toutput = this._norm;\n\n\t/**\n\t * clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._norm.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../core/context/Gain\";\nimport { Param } from \"../core/context/Param\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Signal, SignalOptions } from \"./Signal\";\nimport { InputNode, OutputNode } from \"../core/context/ToneAudioNode\";\n\n/**\n * Multiply two incoming signals. Or, if a number is given in the constructor,\n * multiplies the incoming signal by that value.\n *\n * @example\n * import { Multiply, Signal } from \"tone\";\n * // multiply two signals\n * const mult = new Multiply();\n * const sigA = new Signal(3);\n * const sigB = new Signal(4);\n * sigA.connect(mult);\n * sigB.connect(mult.factor);\n * // output of mult is 12.\n * @example\n * import { Multiply, Signal } from \"tone\";\n * // multiply a signal and a number\n * const mult = new Multiply(10);\n * const sig = new Signal(2).connect(mult);\n * // the output of mult is 20.\n * @category Signal\n */\nexport class Multiply<TypeName extends \"number\" | \"positive\" = \"number\"> extends Signal<TypeName> {\n\n\treadonly name: string = \"Multiply\";\n\n\t/**\n\t * Indicates if the value should be overridden on connection\n\t */\n\treadonly override = false;\n\n\t/**\n\t * the input gain node\n\t */\n\tprivate _mult: Gain;\n\n\t/**\n\t * The multiplicand input.\n\t */\n\tinput: InputNode;\n\n\t/**\n\t * The product of the input and {@link factor}\n\t */\n\toutput: OutputNode;\n\n\t/**\n\t * The multiplication factor. Can be set directly or a signal can be connected to it.\n\t */\n\tfactor: Param<TypeName>;\n\n\t/**\n\t * @param value Constant value to multiple\n\t */\n\tconstructor(value?: number);\n\tconstructor(options?: Partial<SignalOptions<TypeName>>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Multiply.getDefaults(), arguments, [\"value\"])));\n\t\tconst options = optionsFromArguments(Multiply.getDefaults(), arguments, [\"value\"]);\n\n\t\tthis._mult = this.input = this.output = new Gain({ \n\t\t\tcontext: this.context,\n\t\t\tminValue: options.minValue,\n\t\t\tmaxValue: options.maxValue,\n\t\t});\n\n\t\tthis.factor = this._param = this._mult.gain as unknown as Param<TypeName>;\n\t\tthis.factor.setValueAtTime(options.value, 0);\n\t}\n\n\tstatic getDefaults(): SignalOptions<any> {\n\t\treturn Object.assign(Signal.getDefaults(), {\n\t\t\tvalue: 0,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._mult.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { Degrees, Frequency, Seconds } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { AudioToGain } from \"../../signal/AudioToGain\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { AMConstructorOptions, AMOscillatorOptions,\n\tgenerateWaveform, NonCustomOscillatorType,\n\tToneOscillatorInterface, \n\tToneOscillatorType } from \"./OscillatorInterface\";\n\nexport { AMOscillatorOptions } from \"./OscillatorInterface\";\n\n/**\n * An amplitude modulated oscillator node. It is implemented with\n * two oscillators, one which modulators the other's amplitude\n * through a gain node.\n * ```\n *    +-------------+       +----------+\n *    | Carrier Osc +>------> GainNode |\n *    +-------------+       |          +--->Output\n *                      +---> gain     |\n * +---------------+    |   +----------+\n * | Modulator Osc +>---+\n * +---------------+\n * ```\n *\n * @example\n * import { AMOscillator } from \"tone\";\n * // a sine oscillator amplitude-modulated by a square wave\n * const amOsc = new AMOscillator(\"Ab3\", \"sine\", \"square\").toDestination().start().stop(\"+5\");\n * // schedule a series of notes\n * amOsc.frequency.setValueAtTime(\"F3\", \"+0.25\");\n * amOsc.frequency.setValueAtTime(\"C4\", \"+0.5\");\n * amOsc.frequency.setValueAtTime(\"Bb3\", \"+1\");\n * // schedule harmonicity changes along with those notes\n * amOsc.harmonicity.setValueAtTime(0.5, \"+0.25\");\n * amOsc.harmonicity.setValueAtTime(1, \"+1\");\n * amOsc.harmonicity.linearRampTo(1.1, 2, \"+1\");\n * // fade it out all the way at the end\n * amOsc.volume.exponentialRampTo(-Infinity, 3, \"+2,\");\n * @category Source\n */\nexport class AMOscillator extends Source<AMOscillatorOptions> implements ToneOscillatorInterface {\n\n\treadonly name: string = \"AMOscillator\";\n\n\t/**\n\t * The carrier oscillator\n\t */\n\tprivate _carrier: Oscillator;\n\n\treadonly frequency: Signal<\"frequency\">;\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * The modulating oscillator\n\t */\n\tprivate _modulator: Oscillator;\n\n\t/**\n\t * convert the -1,1 output to 0,1\n\t */\n\tprivate _modulationScale = new AudioToGain({ context: this.context });\n\n\t/**\n\t * Harmonicity is the frequency ratio between the carrier and the modulator oscillators.\n\t * A harmonicity of 1 gives both oscillators the same frequency.\n\t * Harmonicity = 2 means a change of an octave.\n\t * @example\n\t * import { AMOscillator, Transport } from \"tone\";\n\t * const amOsc = new AMOscillator(\"D2\").toDestination().start();\n\t * Transport.scheduleRepeat(time => {\n\t * \tamOsc.harmonicity.setValueAtTime(1, time);\n\t * \tamOsc.harmonicity.setValueAtTime(0.5, time + 0.5);\n\t * \tamOsc.harmonicity.setValueAtTime(1.5, time + 1);\n\t * \tamOsc.harmonicity.setValueAtTime(1, time + 2);\n\t * \tamOsc.harmonicity.linearRampToValueAtTime(2, time + 4);\n\t * }, 4);\n\t * Transport.start();\n\t */\n\treadonly harmonicity: Signal<\"positive\">;\n\n\t/**\n\t * the node where the modulation happens\n\t */\n\tprivate _modulationNode = new Gain({\n\t\tcontext: this.context,\n\t});\n\n\t/**\n\t * @param frequency The starting frequency of the oscillator.\n\t * @param type The type of the carrier oscillator.\n\t * @param modulationType The type of the modulator oscillator.\n\t */\n\tconstructor(frequency?: Frequency, type?: ToneOscillatorType, modulationType?: ToneOscillatorType);\n\tconstructor(options?: Partial<AMConstructorOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(AMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]));\n\t\tconst options = optionsFromArguments(AMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]);\n\n\t\tthis._carrier = new Oscillator({\n\t\t\tcontext: this.context,\n\t\t\tdetune: options.detune,\n\t\t\tfrequency: options.frequency,\n\t\t\tonstop: () => this.onstop(this),\n\t\t\tphase: options.phase,\n\t\t\ttype: options.type,\n\t\t} as OscillatorOptions);\n\t\tthis.frequency = this._carrier.frequency,\n\t\tthis.detune = this._carrier.detune;\n\n\t\tthis._modulator = new Oscillator({\n\t\t\tcontext: this.context,\n\t\t\tphase: options.phase,\n\t\t\ttype: options.modulationType,\n\t\t} as OscillatorOptions);\n\n\t\tthis.harmonicity = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.harmonicity,\n\t\t});\n\n\t\t// connections\n\t\tthis.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t\tthis._modulator.chain(this._modulationScale, this._modulationNode.gain);\n\t\tthis._carrier.chain(this._modulationNode, this.output);\n\n\t\treadOnly(this, [\"frequency\", \"detune\", \"harmonicity\"]);\n\t}\n\n\tstatic getDefaults(): AMOscillatorOptions {\n\t\treturn Object.assign(Oscillator.getDefaults(), {\n\t\t\tharmonicity: 1,\n\t\t\tmodulationType: \"square\" as NonCustomOscillatorType,\n\t\t});\n\t}\n\n\t/**\n\t * start the oscillator\n\t */\n\tprotected _start(time: Seconds): void {\n\t\tthis._modulator.start(time);\n\t\tthis._carrier.start(time);\n\t}\n\n\t/**\n\t * stop the oscillator\n\t */\n\tprotected _stop(time: Seconds): void {\n\t\tthis._modulator.stop(time);\n\t\tthis._carrier.stop(time);\n\t}\n\n\tprotected _restart(time: Seconds): void {\n\t\tthis._modulator.restart(time);\n\t\tthis._carrier.restart(time);\n\t}\n\n\t/**\n\t * The type of the carrier oscillator\n\t */\n\tget type(): ToneOscillatorType {\n\t\treturn this._carrier.type;\n\t}\n\tset type(type: ToneOscillatorType) {\n\t\tthis._carrier.type = type;\n\t}\n\n\tget baseType(): OscillatorType {\n\t\treturn this._carrier.baseType;\n\t}\n\tset baseType(baseType: OscillatorType) {\n\t\tthis._carrier.baseType = baseType;\n\t}\n\n\tget partialCount(): number {\n\t\treturn this._carrier.partialCount;\n\t}\n\tset partialCount(partialCount: number) {\n\t\tthis._carrier.partialCount = partialCount;\n\t}\n\n\t/**\n\t * The type of the modulator oscillator\n\t */\n\tget modulationType(): ToneOscillatorType {\n\t\treturn this._modulator.type;\n\t}\n\tset modulationType(type: ToneOscillatorType) {\n\t\tthis._modulator.type = type;\n\t}\n\n\tget phase(): Degrees {\n\t\treturn this._carrier.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._carrier.phase = phase;\n\t\tthis._modulator.phase = phase;\n\t}\n\n\tget partials(): number[] {\n\t\treturn this._carrier.partials;\n\t}\n\tset partials(partials: number[]) {\n\t\tthis._carrier.partials = partials;\n\t}\n\n\tasync asArray(length = 1024): Promise<Float32Array> {\n\t\treturn generateWaveform(this, length);\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\tthis.harmonicity.dispose();\n\t\tthis._carrier.dispose();\n\t\tthis._modulator.dispose();\n\t\tthis._modulationNode.dispose();\n\t\tthis._modulationScale.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { Degrees, Frequency, Seconds, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { FMConstructorOptions, FMOscillatorOptions,\n\tgenerateWaveform, NonCustomOscillatorType, ToneOscillatorInterface, ToneOscillatorType } from \"./OscillatorInterface\";\n\nexport { FMOscillatorOptions } from \"./OscillatorInterface\";\n/**\n * FMOscillator implements a frequency modulation synthesis\n * ```\n *                                              +-------------+\n * +---------------+        +-------------+     | Carrier Osc |\n * | Modulator Osc +>-------> GainNode    |     |             +--->Output\n * +---------------+        |             +>----> frequency   |\n *                       +--> gain        |     +-------------+\n *                       |  +-------------+\n * +-----------------+   |\n * | modulationIndex +>--+\n * +-----------------+\n * ```\n *\n * @example\n * import { FMOscillator } from \"tone\";\n * // a sine oscillator frequency-modulated by a square wave\n * const fmOsc = new FMOscillator(\"Ab3\", \"sine\", \"square\").toDestination().start();\n * @category Source\n */\nexport class FMOscillator extends Source<FMOscillatorOptions> implements ToneOscillatorInterface {\n\n\treadonly name: string = \"FMOscillator\";\n\n\t/**\n\t * The carrier oscillator\n\t */\n\tprivate _carrier: Oscillator;\n\n\treadonly frequency: Signal<\"frequency\">;\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * The modulating oscillator\n\t */\n\tprivate _modulator: Oscillator;\n\n\t/**\n\t * Harmonicity is the frequency ratio between the carrier and the modulator oscillators.\n\t * A harmonicity of 1 gives both oscillators the same frequency.\n\t * Harmonicity = 2 means a change of an octave.\n\t * @example\n\t * import { FMOscillator } from \"tone\";\n\t * const fmOsc = new FMOscillator(\"D2\").toDestination().start();\n\t * // pitch the modulator an octave below carrier\n\t * fmOsc.harmonicity.value = 0.5;\n\t */\n\treadonly harmonicity: Signal<\"positive\">;\n\n\t/**\n\t * The modulation index which is in essence the depth or amount of the modulation. In other terms it is the\n\t * ratio of the frequency of the modulating signal (mf) to the amplitude of the\n\t * modulating signal (ma) -- as in ma/mf.\n\t */\n\treadonly modulationIndex: Signal<\"positive\">;\n\n\t/**\n\t * the node where the modulation happens\n\t */\n\tprivate _modulationNode: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\n\t/**\n\t * @param frequency The starting frequency of the oscillator.\n\t * @param type The type of the carrier oscillator.\n\t * @param modulationType The type of the modulator oscillator.\n\t */\n\tconstructor(frequency?: Frequency, type?: ToneOscillatorType, modulationType?: ToneOscillatorType);\n\tconstructor(options?: Partial<FMConstructorOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(FMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]));\n\t\tconst options = optionsFromArguments(FMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]);\n\n\t\tthis._carrier = new Oscillator({\n\t\t\tcontext: this.context,\n\t\t\tdetune: options.detune,\n\t\t\tfrequency: 0,\n\t\t\tonstop: () => this.onstop(this),\n\t\t\tphase: options.phase,\n\t\t\ttype: options.type,\n\t\t} as OscillatorOptions);\n\n\t\tthis.detune = this._carrier.detune;\n\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t});\n\n\t\tthis._modulator = new Oscillator({\n\t\t\tcontext: this.context,\n\t\t\tphase: options.phase,\n\t\t\ttype: options.modulationType,\n\t\t} as OscillatorOptions);\n\n\t\tthis.harmonicity = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.harmonicity,\n\t\t});\n\n\t\tthis.modulationIndex = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.modulationIndex,\n\t\t});\n\n\t\t// connections\n\t\tthis.frequency.connect(this._carrier.frequency);\n\t\tthis.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t\tthis.frequency.chain(this.modulationIndex, this._modulationNode);\n\t\tthis._modulator.connect(this._modulationNode.gain);\n\t\tthis._modulationNode.connect(this._carrier.frequency);\n\t\tthis._carrier.connect(this.output);\n\t\tthis.detune.connect(this._modulator.detune);\n\n\t\treadOnly(this, [\"modulationIndex\", \"frequency\", \"detune\", \"harmonicity\"]);\n\t}\n\n\tstatic getDefaults(): FMOscillatorOptions {\n\t\treturn Object.assign(Oscillator.getDefaults(), {\n\t\t\tharmonicity: 1,\n\t\t\tmodulationIndex: 2,\n\t\t\tmodulationType: \"square\" as NonCustomOscillatorType,\n\t\t});\n\t}\n\n\t/**\n\t * start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\tthis._modulator.start(time);\n\t\tthis._carrier.start(time);\n\t}\n\n\t/**\n\t * stop the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\tthis._modulator.stop(time);\n\t\tthis._carrier.stop(time);\n\t}\n\n\tprotected _restart(time: Seconds): this {\n\t\tthis._modulator.restart(time);\n\t\tthis._carrier.restart(time);\n\t\treturn this;\n\t}\n\n\tget type(): ToneOscillatorType {\n\t\treturn this._carrier.type;\n\t}\n\tset type(type: ToneOscillatorType) {\n\t\tthis._carrier.type = type;\n\t}\n\n\tget baseType(): OscillatorType {\n\t\treturn this._carrier.baseType;\n\t}\n\tset baseType(baseType: OscillatorType) {\n\t\tthis._carrier.baseType = baseType;\n\t}\n\n\tget partialCount(): number {\n\t\treturn this._carrier.partialCount;\n\t}\n\tset partialCount(partialCount: number) {\n\t\tthis._carrier.partialCount = partialCount;\n\t}\n\n\t/**\n\t * The type of the modulator oscillator\n\t */\n\tget modulationType(): ToneOscillatorType {\n\t\treturn this._modulator.type;\n\t}\n\tset modulationType(type: ToneOscillatorType) {\n\t\tthis._modulator.type = type;\n\t}\n\n\tget phase(): Degrees {\n\t\treturn this._carrier.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._carrier.phase = phase;\n\t\tthis._modulator.phase = phase;\n\t}\n\n\tget partials(): number[] {\n\t\treturn this._carrier.partials;\n\t}\n\tset partials(partials: number[]) {\n\t\tthis._carrier.partials = partials;\n\t}\n\n\tasync asArray(length = 1024): Promise<Float32Array> {\n\t\treturn generateWaveform(this, length);\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.harmonicity.dispose();\n\t\tthis._carrier.dispose();\n\t\tthis._modulator.dispose();\n\t\tthis._modulationNode.dispose();\n\t\tthis.modulationIndex.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { AudioRange, Degrees, Frequency, Seconds, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { WaveShaper } from \"../../signal/WaveShaper\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { generateWaveform, PulseOscillatorOptions, ToneOscillatorInterface } from \"./OscillatorInterface\";\n\nexport { PulseOscillatorOptions } from \"./OscillatorInterface\";\n\n/**\n * PulseOscillator is an oscillator with control over pulse width,\n * also known as the duty cycle. At 50% duty cycle (width = 0) the wave is\n * a square wave.\n * [Read more](https://wigglewave.wordpress.com/2014/08/16/pulse-waveforms-and-harmonics/).\n * ```\n *    width = -0.25        width = 0.0          width = 0.25\n *\n *   +-----+            +-------+       +    +-------+     +-+\n *   |     |            |       |       |            |     |\n *   |     |            |       |       |            |     |\n * +-+     +-------+    +       +-------+            +-----+\n *\n *\n *    width = -0.5                              width = 0.5\n *\n *     +---+                                 +-------+   +---+\n *     |   |                                         |   |\n *     |   |                                         |   |\n * +---+   +-------+                                 +---+\n *\n *\n *    width = -0.75                             width = 0.75\n *\n *       +-+                                 +-------+ +-----+\n *       | |                                         | |\n *       | |                                         | |\n * +-----+ +-------+                                 +-+\n * ```\n * @example\n * import { PulseOscillator } from \"tone\";\n * const pulse = new PulseOscillator(\"E5\", 0.4).toDestination().start();\n * @category Source\n */\nexport class PulseOscillator extends Source<PulseOscillatorOptions> implements ToneOscillatorInterface {\n\n\treadonly name: string = \"PulseOscillator\";\n\n\t/**\n\t * The width of the pulse.\n\t */\n\twidth: Signal<\"audioRange\">;\n\n\t/**\n\t * gate the width amount\n\t */\n\tprivate _widthGate: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\n\t/**\n\t * the sawtooth oscillator\n\t */\n\tprivate _triangle: Oscillator;\n\n\t/**\n\t * The frequency control.\n\t */\n\tfrequency: Signal<\"frequency\">;\n\n\t/**\n\t * The detune in cents.\n\t */\n\tdetune: Signal<\"cents\">;\n\n\t/**\n\t * Threshold the signal to turn it into a square\n\t */\n\tprivate _thresh = new WaveShaper({\n\t\tcontext: this.context,\n\t\tmapping: val => val <= 0 ? -1 : 1,\n\t});\n\n\t/**\n\t * @param frequency The frequency of the oscillator\n\t * @param width The width of the pulse\n\t */\n\tconstructor(frequency?: Frequency, width?: AudioRange);\n\tconstructor(options?: Partial<PulseOscillatorOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(PulseOscillator.getDefaults(), arguments, [\"frequency\", \"width\"]));\n\t\tconst options = optionsFromArguments(PulseOscillator.getDefaults(), arguments, [\"frequency\", \"width\"]);\n\n\t\tthis.width = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"audioRange\",\n\t\t\tvalue: options.width,\n\t\t});\n\n\t\tthis._triangle = new Oscillator({\n\t\t\tcontext: this.context,\n\t\t\tdetune: options.detune,\n\t\t\tfrequency: options.frequency,\n\t\t\tonstop: () => this.onstop(this),\n\t\t\tphase: options.phase,\n\t\t\ttype: \"triangle\",\n\t\t});\n\t\tthis.frequency = this._triangle.frequency;\n\t\tthis.detune = this._triangle.detune;\n\n\t\t// connections\n\t\tthis._triangle.chain(this._thresh, this.output);\n\t\tthis.width.chain(this._widthGate, this._thresh);\n\t\treadOnly(this, [\"width\", \"frequency\", \"detune\"]);\n\t}\n\n\tstatic getDefaults(): PulseOscillatorOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tfrequency: 440,\n\t\t\tphase: 0,\n\t\t\ttype: \"pulse\" as \"pulse\",\n\t\t\twidth: 0.2,\n\t\t});\n\t}\n\n\t/**\n\t * start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._triangle.start(time);\n\t\tthis._widthGate.gain.setValueAtTime(1, time);\n\t}\n\n\t/**\n\t * stop the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._triangle.stop(time);\n\t\t// the width is still connected to the output.\n\t\t// that needs to be stopped also\n\t\tthis._widthGate.gain.cancelScheduledValues(time);\n\t\tthis._widthGate.gain.setValueAtTime(0, time);\n\t}\n\n\tprotected _restart(time: Seconds): void {\n\t\tthis._triangle.restart(time);\n\t\tthis._widthGate.gain.cancelScheduledValues(time);\n\t\tthis._widthGate.gain.setValueAtTime(1, time);\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._triangle.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._triangle.phase = phase;\n\t}\n\n\t/**\n\t * The type of the oscillator. Always returns \"pulse\".\n\t */\n\tget type(): \"pulse\" {\n\t\treturn \"pulse\";\n\t}\n\n\t/**\n\t * The baseType of the oscillator. Always returns \"pulse\".\n\t */\n\tget baseType(): \"pulse\" {\n\t\treturn \"pulse\";\n\t}\n\n\t/**\n\t * The partials of the waveform. Cannot set partials for this waveform type\n\t */\n\tget partials(): number[] {\n\t\treturn [];\n\t}\n\n\t/**\n\t * No partials for this waveform type.\n\t */\n\tget partialCount(): number {\n\t\treturn 0;\n\t}\n\n\t/**\n\t * *Internal use* The carrier oscillator type is fed through the \n\t * waveshaper node to create the pulse. Using different carrier oscillators\n\t * changes oscillator's behavior. \n\t */\n\tset carrierType(type: \"triangle\" | \"sine\") {\n\t\tthis._triangle.type = type;\n\t}\n\n\tasync asArray(length = 1024): Promise<Float32Array> {\n\t\treturn generateWaveform(this, length);\n\t}\n\n\t/**\n\t * Clean up method.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._triangle.dispose();\n\t\tthis.width.dispose();\n\t\tthis._widthGate.dispose();\n\t\tthis._thresh.dispose();\n\t\treturn this;\n\t}\n}\n","import { Cents, Degrees, Frequency, Seconds, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp, readOnly } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { FatConstructorOptions, FatOscillatorOptions,\n\tgenerateWaveform, NonCustomOscillatorType, ToneOscillatorInterface, ToneOscillatorType } from \"./OscillatorInterface\";\nimport { assertRange } from \"../../core/util/Debug\";\n\nexport { FatOscillatorOptions } from \"./OscillatorInterface\";\n\n/**\n * FatOscillator is an array of oscillators with detune spread between the oscillators\n * @example\n * import { FatOscillator } from \"tone\";\n * const fatOsc = new FatOscillator(\"Ab3\", \"sawtooth\", 40).toDestination().start();\n * @category Source\n */\nexport class FatOscillator extends Source<FatOscillatorOptions> implements ToneOscillatorInterface {\n\n\treadonly name: string = \"FatOscillator\";\n\n\treadonly frequency: Signal<\"frequency\">;\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * The array of oscillators\n\t */\n\tprivate _oscillators: Oscillator[] = [];\n\n\t/**\n\t * The total spread of the oscillators\n\t */\n\tprivate _spread: Cents;\n\n\t/**\n\t * The type of the oscillator\n\t */\n\tprivate _type: ToneOscillatorType;\n\n\t/**\n\t * The phase of the oscillators\n\t */\n\tprivate _phase: Degrees;\n\n\t/**\n\t * The partials array\n\t */\n\tprivate _partials: number[];\n\n\t/**\n\t * The number of partials to use\n\t */\n\tprivate _partialCount: number;\n\n\t/**\n\t * @param frequency The oscillator's frequency.\n\t * @param type The type of the oscillator.\n\t * @param spread The detune spread between the oscillators.\n\t */\n\tconstructor(frequency?: Frequency, type?: ToneOscillatorType, spread?: Cents);\n\tconstructor(options?: Partial<FatConstructorOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(FatOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"spread\"]));\n\t\tconst options = optionsFromArguments(FatOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"spread\"]);\n\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t});\n\t\tthis.detune = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune,\n\t\t});\n\n\t\tthis._spread = options.spread;\n\t\tthis._type = options.type;\n\t\tthis._phase = options.phase;\n\t\tthis._partials = options.partials;\n\t\tthis._partialCount = options.partialCount;\n\n\t\t// set the count initially\n\t\tthis.count = options.count;\n\n\t\treadOnly(this, [\"frequency\", \"detune\"]);\n\t}\n\n\tstatic getDefaults(): FatOscillatorOptions {\n\t\treturn Object.assign(Oscillator.getDefaults(), {\n\t\t\tcount: 3,\n\t\t\tspread: 20,\n\t\t\ttype: \"sawtooth\",\n\t\t});\n\t}\n\n\t/**\n\t * start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._forEach(osc => osc.start(time));\n\t}\n\n\t/**\n\t * stop the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._forEach(osc => osc.stop(time));\n\t}\n\n\tprotected _restart(time: Seconds): void {\n\t\tthis._forEach(osc => osc.restart(time));\n\t}\n\n\t/**\n\t * Iterate over all of the oscillators\n\t */\n\tprivate _forEach(iterator: (osc: Oscillator, index: number) => void): void {\n\t\tfor (let i = 0; i < this._oscillators.length; i++) {\n\t\t\titerator(this._oscillators[i], i);\n\t\t}\n\t}\n\n\t/**\n\t * The type of the oscillator\n\t */\n\tget type(): ToneOscillatorType {\n\t\treturn this._type;\n\t}\n\tset type(type: ToneOscillatorType) {\n\t\tthis._type = type;\n\t\tthis._forEach(osc => osc.type = type);\n\t}\n\n\t/**\n\t * The detune spread between the oscillators. If \"count\" is\n\t * set to 3 oscillators and the \"spread\" is set to 40,\n\t * the three oscillators would be detuned like this: [-20, 0, 20]\n\t * for a total detune spread of 40 cents.\n\t * @example\n\t * import { FatOscillator } from \"tone\";\n\t * const fatOsc = new FatOscillator().toDestination().start();\n\t * fatOsc.spread = 70;\n\t */\n\tget spread(): Cents {\n\t\treturn this._spread;\n\t}\n\tset spread(spread: Cents) {\n\t\tthis._spread = spread;\n\t\tif (this._oscillators.length > 1) {\n\t\t\tconst start = -spread / 2;\n\t\t\tconst step = spread / (this._oscillators.length - 1);\n\t\t\tthis._forEach((osc, i) => osc.detune.value = start + step * i);\n\t\t}\n\t}\n\n\t/**\n\t * The number of detuned oscillators. Must be an integer greater than 1.\n\t * @example\n\t * import { FatOscillator } from \"tone\";\n\t * const fatOsc = new FatOscillator(\"C#3\", \"sawtooth\").toDestination().start();\n\t * // use 4 sawtooth oscillators\n\t * fatOsc.count = 4;\n\t */\n\tget count(): number {\n\t\treturn this._oscillators.length;\n\t}\n\tset count(count: number) {\n\t\tassertRange(count, 1);\n\t\tif (this._oscillators.length !== count) {\n\t\t\t// dispose the previous oscillators\n\t\t\tthis._forEach(osc => osc.dispose());\n\t\t\tthis._oscillators = [];\n\t\t\tfor (let i = 0; i < count; i++) {\n\t\t\t\tconst osc = new Oscillator({\n\t\t\t\t\tcontext: this.context,\n\t\t\t\t\tvolume: -6 - count * 1.1,\n\t\t\t\t\ttype: this._type as NonCustomOscillatorType,\n\t\t\t\t\tphase: this._phase + (i / count) * 360,\n\t\t\t\t\tpartialCount: this._partialCount,\n\t\t\t\t\tonstop: i === 0 ? () => this.onstop(this) : noOp,\n\t\t\t\t});\n\t\t\t\tif (this.type === \"custom\") {\n\t\t\t\t\tosc.partials = this._partials;\n\t\t\t\t}\n\t\t\t\tthis.frequency.connect(osc.frequency);\n\t\t\t\tthis.detune.connect(osc.detune);\n\t\t\t\tosc.detune.overridden = false;\n\t\t\t\tosc.connect(this.output);\n\t\t\t\tthis._oscillators[i] = osc;\n\t\t\t}\n\t\t\t// set the spread\n\t\t\tthis.spread = this._spread;\n\t\t\tif (this.state === \"started\") {\n\t\t\t\tthis._forEach(osc => osc.start());\n\t\t\t}\n\t\t}\n\t}\n\n\tget phase(): Degrees {\n\t\treturn this._phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._phase = phase;\n\t\tthis._forEach(osc => osc.phase = phase);\n\t}\n\n\tget baseType(): OscillatorType {\n\t\treturn this._oscillators[0].baseType;\n\t}\n\tset baseType(baseType: OscillatorType) {\n\t\tthis._forEach(osc => osc.baseType = baseType);\n\t\tthis._type = this._oscillators[0].type;\n\t}\n\n\tget partials(): number[] {\n\t\treturn this._oscillators[0].partials;\n\t}\n\tset partials(partials: number[]) {\n\t\tthis._partials = partials;\n\t\tthis._partialCount = this._partials.length;\n\t\tif (partials.length) {\n\t\t\tthis._type = \"custom\";\n\t\t\tthis._forEach(osc => osc.partials = partials);\n\t\t}\n\t}\n\n\tget partialCount(): number {\n\t\treturn this._oscillators[0].partialCount;\n\t}\n\tset partialCount(partialCount: number) {\n\t\tthis._partialCount = partialCount;\n\t\tthis._forEach(osc => osc.partialCount = partialCount);\n\t\tthis._type = this._oscillators[0].type;\n\t}\n\n\tasync asArray(length = 1024): Promise<Float32Array> {\n\t\treturn generateWaveform(this, length);\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\tthis._forEach(osc => osc.dispose());\n\t\treturn this;\n\t}\n}\n","import { Degrees, Frequency, Seconds, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { generateWaveform, PWMOscillatorOptions, ToneOscillatorInterface } from \"./OscillatorInterface\";\nimport { PulseOscillator } from \"./PulseOscillator\";\n\nexport { PWMOscillatorOptions } from \"./OscillatorInterface\";\n\n/**\n * PWMOscillator modulates the width of a Tone.PulseOscillator\n * at the modulationFrequency. This has the effect of continuously\n * changing the timbre of the oscillator by altering the harmonics\n * generated.\n * @example\n * import { PWMOscillator } from \"tone\";\n * const pwm = new PWMOscillator(\"Ab3\", 0.3).toDestination().start();\n * @category Source\n */\nexport class PWMOscillator extends Source<PWMOscillatorOptions> implements ToneOscillatorInterface {\n\n\treadonly name: string = \"PWMOscillator\";\n\n\treadonly sourceType = \"pwm\";\n\n\t/**\n\t * the pulse oscillator\n\t */\n\tprivate _pulse: PulseOscillator;\n\t/**\n\t * the modulator\n\t */\n\tprivate _modulator: Oscillator;\n\n\t/**\n\t * Scale the oscillator so it doesn't go silent\n\t * at the extreme values.\n\t */\n\tprivate _scale: Multiply = new Multiply({\n\t\tcontext: this.context,\n\t\tvalue: 2,\n\t});\n\n\t/**\n\t * The frequency control.\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * The detune of the oscillator.\n\t */\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * The modulation rate of the oscillator.\n\t */\n\treadonly modulationFrequency: Signal<\"frequency\">;\n\n\t/**\n\t * @param {Frequency} frequency The starting frequency of the oscillator.\n\t * @param {Frequency} modulationFrequency The modulation frequency of the width of the pulse.\n\t */\n\tconstructor(frequency?: Frequency, modulationFrequency?: Frequency);\n\tconstructor(options?: Partial<PWMOscillatorOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(PWMOscillator.getDefaults(), arguments, [\"frequency\", \"modulationFrequency\"]));\n\t\tconst options = optionsFromArguments(PWMOscillator.getDefaults(), arguments, [\"frequency\", \"modulationFrequency\"]);\n\n\t\tthis._pulse = new PulseOscillator({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.modulationFrequency,\n\t\t});\n\t\t// change the pulse oscillator type\n\t\tthis._pulse.carrierType = \"sine\";\n\n\t\tthis.modulationFrequency = this._pulse.frequency;\n\n\t\tthis._modulator = new Oscillator({\n\t\t\tcontext: this.context,\n\t\t\tdetune: options.detune,\n\t\t\tfrequency: options.frequency,\n\t\t\tonstop: () => this.onstop(this),\n\t\t\tphase: options.phase,\n\t\t});\n\n\t\tthis.frequency = this._modulator.frequency;\n\t\tthis.detune = this._modulator.detune;\n\n\t\t// connections\n\t\tthis._modulator.chain(this._scale, this._pulse.width);\n\t\tthis._pulse.connect(this.output);\n\t\treadOnly(this, [\"modulationFrequency\", \"frequency\", \"detune\"]);\n\t}\n\n\tstatic getDefaults(): PWMOscillatorOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tfrequency: 440,\n\t\t\tmodulationFrequency: 0.4,\n\t\t\tphase: 0,\n\t\t\ttype: \"pwm\" as \"pwm\",\n\t\t});\n\t}\n\t/**\n\t * start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._modulator.start(time);\n\t\tthis._pulse.start(time);\n\t}\n\n\t/**\n\t * stop the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._modulator.stop(time);\n\t\tthis._pulse.stop(time);\n\t}\n\n\t/**\n\t * restart the oscillator\n\t */\n\tprotected _restart(time: Seconds): void {\n\t\tthis._modulator.restart(time);\n\t\tthis._pulse.restart(time);\n\t}\n\n\t/**\n\t * The type of the oscillator. Always returns \"pwm\".\n\t */\n\tget type(): \"pwm\" {\n\t\treturn \"pwm\";\n\t}\n\n\t/**\n\t * The baseType of the oscillator. Always returns \"pwm\".\n\t */\n\tget baseType(): \"pwm\" {\n\t\treturn \"pwm\";\n\t}\n\n\t/**\n\t * The partials of the waveform. Cannot set partials for this waveform type\n\t */\n\tget partials(): number[] {\n\t\treturn [];\n\t}\n\n\t/**\n\t * No partials for this waveform type.\n\t */\n\tget partialCount(): number {\n\t\treturn 0;\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._modulator.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._modulator.phase = phase;\n\t}\n\n\tasync asArray(length = 1024): Promise<Float32Array> {\n\t\treturn generateWaveform(this, length);\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._pulse.dispose();\n\t\tthis._scale.dispose();\n\t\tthis._modulator.dispose();\n\t\treturn this;\n\t}\n}\n","import { Cents, Degrees, Frequency, Seconds, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { isNumber, isString } from \"../../core/util/TypeCheck\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { AMOscillator } from \"./AMOscillator\";\nimport { FatOscillator } from \"./FatOscillator\";\nimport { FMOscillator } from \"./FMOscillator\";\nimport { Oscillator } from \"./Oscillator\";\nimport { generateWaveform,\n\tOmniOscillatorConstructorOptions, OmniOscillatorOptions,\n\tOmniOscillatorType, ToneOscillatorInterface, ToneOscillatorType } from \"./OscillatorInterface\";\nimport { PulseOscillator } from \"./PulseOscillator\";\nimport { PWMOscillator } from \"./PWMOscillator\";\n\nexport { OmniOscillatorOptions } from \"./OscillatorInterface\";\n\n/**\n * All of the oscillator types that OmniOscillator can take on\n */\ntype AnyOscillator = Oscillator | PWMOscillator | PulseOscillator | FatOscillator | AMOscillator | FMOscillator;\n\n/**\n * All of the Oscillator constructor types mapped to their name.\n */\ninterface OmniOscillatorSource {\n\t\"fm\": FMOscillator;\n\t\"am\": AMOscillator;\n\t\"pwm\": PWMOscillator;\n\t\"pulse\": PulseOscillator;\n\t\"oscillator\": Oscillator;\n\t\"fat\": FatOscillator;\n}\n\n/**\n * The available oscillator types.\n */\nexport type OmniOscSourceType = keyof OmniOscillatorSource;\n\n// Conditional Types\ntype IsAmOrFmOscillator<Osc, Ret> = Osc extends AMOscillator ? Ret : Osc extends FMOscillator ? Ret : undefined;\ntype IsFatOscillator<Osc, Ret> = Osc extends FatOscillator ? Ret : undefined;\ntype IsPWMOscillator<Osc, Ret> = Osc extends PWMOscillator ? Ret : undefined;\ntype IsPulseOscillator<Osc, Ret> = Osc extends PulseOscillator ? Ret : undefined;\ntype IsFMOscillator<Osc, Ret> = Osc extends FMOscillator ? Ret : undefined;\n\ntype AnyOscillatorConstructor = new (...args: any[]) => AnyOscillator;\n\nconst OmniOscillatorSourceMap: {\n\t[key in OmniOscSourceType]: AnyOscillatorConstructor\n} = {\n\tam: AMOscillator,\n\tfat: FatOscillator,\n\tfm: FMOscillator,\n\toscillator: Oscillator,\n\tpulse: PulseOscillator,\n\tpwm: PWMOscillator,\n};\n\n/**\n * OmniOscillator aggregates Tone.Oscillator, Tone.PulseOscillator,\n * Tone.PWMOscillator, Tone.FMOscillator, Tone.AMOscillator, and Tone.FatOscillator\n * into one class. The oscillator class can be changed by setting the `type`.\n * `omniOsc.type = \"pwm\"` will set it to the Tone.PWMOscillator. Prefixing\n * any of the basic types (\"sine\", \"square4\", etc.) with \"fm\", \"am\", or \"fat\"\n * will use the FMOscillator, AMOscillator or FatOscillator respectively.\n * For example: `omniOsc.type = \"fatsawtooth\"` will create set the oscillator\n * to a FatOscillator of type \"sawtooth\".\n * @example\n * import { OmniOscillator } from \"tone\";\n * const omniOsc = new OmniOscillator(\"C#4\", \"pwm\");\n * @category Source\n */\nexport class OmniOscillator<OscType extends AnyOscillator>\n\textends Source<OmniOscillatorConstructorOptions>\n\timplements Omit<ToneOscillatorInterface, \"type\"> {\n\n\treadonly name: string = \"OmniOscillator\";\n\n\treadonly frequency: Signal<\"frequency\">;\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * The oscillator that can switch types\n\t */\n\tprivate _oscillator!: AnyOscillator;\n\n\t/**\n\t * the type of the oscillator source\n\t */\n\tprivate _sourceType!: OmniOscSourceType;\n\n\t/**\n\t * @param frequency The initial frequency of the oscillator.\n\t * @param type The type of the oscillator.\n\t */\n\tconstructor(frequency?: Frequency, type?: OmniOscillatorType);\n\tconstructor(options?: Partial<OmniOscillatorConstructorOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(OmniOscillator.getDefaults(), arguments, [\"frequency\", \"type\"]));\n\t\tconst options = optionsFromArguments(OmniOscillator.getDefaults(), arguments, [\"frequency\", \"type\"]);\n\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t});\n\t\tthis.detune = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune,\n\t\t});\n\t\treadOnly(this, [\"frequency\", \"detune\"]);\n\n\t\t// set the options\n\t\tthis.set(options);\n\t}\n\n\tstatic getDefaults(): OmniOscillatorOptions {\n\t\treturn Object.assign(\n\t\t\tOscillator.getDefaults(),\n\t\t\tFMOscillator.getDefaults(),\n\t\t\tAMOscillator.getDefaults(),\n\t\t\tFatOscillator.getDefaults(),\n\t\t\tPulseOscillator.getDefaults(),\n\t\t\tPWMOscillator.getDefaults(),\n\t\t);\n\t}\n\n\t/**\n\t * start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\tthis._oscillator.start(time);\n\t}\n\n\t/**\n\t * start the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\tthis._oscillator.stop(time);\n\t}\n\n\tprotected _restart(time: Seconds): this {\n\t\tthis._oscillator.restart(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The type of the oscillator. Can be any of the basic types: sine, square, triangle, sawtooth. Or\n\t * prefix the basic types with \"fm\", \"am\", or \"fat\" to use the FMOscillator, AMOscillator or FatOscillator\n\t * types. The oscillator could also be set to \"pwm\" or \"pulse\". All of the parameters of the\n\t * oscillator's class are accessible when the oscillator is set to that type, but throws an error\n\t * when it's not. \n\t * @example\n\t * import { OmniOscillator } from \"tone\";\n\t * const omniOsc = new OmniOscillator().toDestination().start();\n\t * omniOsc.type = \"pwm\";\n\t * // modulationFrequency is parameter which is available\n\t * // only when the type is \"pwm\".\n\t * omniOsc.modulationFrequency.value = 0.5;\n\t * @example\n\t * import { OmniOscillator } from \"tone\";\n\t * const omniOsc = new OmniOscillator().toDestination().start();\n\t * // an square wave frequency modulated by a sawtooth\n\t * omniOsc.type = \"fmsquare\";\n\t * omniOsc.modulationType = \"sawtooth\";\n\t */\n\tget type(): OmniOscillatorType {\n\t\tlet prefix = \"\";\n\t\tif ([\"am\", \"fm\", \"fat\"].some(p => this._sourceType === p)) {\n\t\t\tprefix = this._sourceType;\n\t\t}\n\t\treturn prefix + this._oscillator.type as OmniOscillatorType;\n\t}\n\tset type(type) {\n\t\tif (type.substr(0, 2) === \"fm\") {\n\t\t\tthis._createNewOscillator(\"fm\");\n\t\t\tthis._oscillator = this._oscillator as FMOscillator;\n\t\t\tthis._oscillator.type = type.substr(2) as ToneOscillatorType;\n\t\t} else if (type.substr(0, 2) === \"am\") {\n\t\t\tthis._createNewOscillator(\"am\");\n\t\t\tthis._oscillator = this._oscillator as AMOscillator;\n\t\t\tthis._oscillator.type = type.substr(2) as ToneOscillatorType;\n\t\t} else if (type.substr(0, 3) === \"fat\") {\n\t\t\tthis._createNewOscillator(\"fat\");\n\t\t\tthis._oscillator = this._oscillator as FatOscillator;\n\t\t\tthis._oscillator.type = type.substr(3) as ToneOscillatorType;\n\t\t} else if (type === \"pwm\") {\n\t\t\tthis._createNewOscillator(\"pwm\");\n\t\t\tthis._oscillator = this._oscillator as PWMOscillator;\n\t\t} else if (type === \"pulse\") {\n\t\t\tthis._createNewOscillator(\"pulse\");\n\t\t} else {\n\t\t\tthis._createNewOscillator(\"oscillator\");\n\t\t\tthis._oscillator = this._oscillator as Oscillator;\n\t\t\tthis._oscillator.type = (type as ToneOscillatorType);\n\t\t}\n\t}\n\n\t/**\n\t * The value is an empty array when the type is not \"custom\".\n\t * This is not available on \"pwm\" and \"pulse\" oscillator types.\n\t * See [[Oscillator.partials]]\n\t */\n\tget partials(): number[] {\n\t\treturn this._oscillator.partials;\n\t}\n\tset partials(partials) {\n\t\tif (!this._getOscType(this._oscillator, \"pulse\") && !this._getOscType(this._oscillator, \"pwm\")) {\n\t\t\tthis._oscillator.partials = partials;\n\t\t}\n\t}\n\n\tget partialCount(): number {\n\t\treturn this._oscillator.partialCount;\n\t}\n\tset partialCount(partialCount) {\n\t\tif (!this._getOscType(this._oscillator, \"pulse\") && !this._getOscType(this._oscillator, \"pwm\")) {\n\t\t\tthis._oscillator.partialCount = partialCount;\n\t\t}\n\t}\n\n\tset(props: Partial<OmniOscillatorConstructorOptions>): this {\n\t\t// make sure the type is set first\n\t\tif (Reflect.has(props, \"type\") && props.type) {\n\t\t\tthis.type = props.type;\n\t\t}\n\t\t// then set the rest\n\t\tsuper.set(props);\n\t\treturn this;\n\t}\n\n\t/**\n\t * connect the oscillator to the frequency and detune signals\n\t */\n\tprivate _createNewOscillator(oscType: OmniOscSourceType): void {\n\t\tif (oscType !== this._sourceType) {\n\t\t\tthis._sourceType = oscType;\n\t\t\tconst OscConstructor = OmniOscillatorSourceMap[oscType];\n\t\t\t// short delay to avoid clicks on the change\n\t\t\tconst now = this.now();\n\t\t\tif (this._oscillator) {\n\t\t\t\tconst oldOsc = this._oscillator;\n\t\t\t\toldOsc.stop(now);\n\t\t\t\t// dispose the old one\n\t\t\t\tthis.context.setTimeout(() => oldOsc.dispose(), this.blockTime);\n\t\t\t}\n\t\t\tthis._oscillator = new OscConstructor({\n\t\t\t\tcontext: this.context,\n\t\t\t});\n\t\t\tthis.frequency.connect(this._oscillator.frequency);\n\t\t\tthis.detune.connect(this._oscillator.detune);\n\t\t\tthis._oscillator.connect(this.output);\n\t\t\tthis._oscillator.onstop = () => this.onstop(this);\n\t\t\tif (this.state === \"started\") {\n\t\t\t\tthis._oscillator.start(now);\n\t\t\t}\n\t\t}\n\t}\n\n\tget phase(): Degrees {\n\t\treturn this._oscillator.phase;\n\t}\n\tset phase(phase) {\n\t\tthis._oscillator.phase = phase;\n\t}\n\n\t/**\n\t * The source type of the oscillator.\n\t * @example\n\t * import { OmniOscillator } from \"tone\";\n\t * const omniOsc = new OmniOscillator(440, \"fmsquare\");\n\t * console.log(omniOsc.sourceType); // 'fm'\n\t */\n\tget sourceType(): OmniOscSourceType {\n\t\treturn this._sourceType;\n\t}\n\tset sourceType(sType) {\n\t\t// the basetype defaults to sine\n\t\tlet baseType = \"sine\";\n\t\tif (this._oscillator.type !== \"pwm\" && this._oscillator.type !== \"pulse\") {\n\t\t\tbaseType = this._oscillator.type;\n\t\t}\n\n\t\t// set the type\n\t\tif (sType === \"fm\") {\n\t\t\tthis.type = \"fm\" + baseType as OmniOscillatorType;\n\t\t} else if (sType === \"am\") {\n\t\t\tthis.type = \"am\" + baseType as OmniOscillatorType;\n\t\t} else if (sType === \"fat\") {\n\t\t\tthis.type = \"fat\" + baseType as OmniOscillatorType;\n\t\t} else if (sType === \"oscillator\") {\n\t\t\tthis.type = baseType as OmniOscillatorType;\n\t\t} else if (sType === \"pulse\") {\n\t\t\tthis.type = \"pulse\";\n\t\t} else if (sType === \"pwm\") {\n\t\t\tthis.type = \"pwm\";\n\t\t}\n\t}\n\n\tprivate _getOscType<SourceType extends OmniOscSourceType>(\n\t\tosc: AnyOscillator,\n\t\tsourceType: SourceType,\n\t): osc is OmniOscillatorSource[SourceType] {\n\t\treturn osc instanceof OmniOscillatorSourceMap[sourceType];\n\t}\n\n\t/**\n\t * The base type of the oscillator. See [[Oscillator.baseType]]\n\t * @example\n\t * import { OmniOscillator } from \"tone\";\n\t * const omniOsc = new OmniOscillator(440, \"fmsquare4\");\n\t * omniOsc.sourceType; // 'fm'\n\t * omniOsc.baseType; // 'square'\n\t * omniOsc.partialCount; // 4\n\t */\n\tget baseType(): OscillatorType | \"pwm\" | \"pulse\" {\n\t\treturn this._oscillator.baseType;\n\t}\n\tset baseType(baseType) {\n\t\tif (!this._getOscType(this._oscillator, \"pulse\") &&\n\t\t\t!this._getOscType(this._oscillator, \"pwm\") &&\n\t\t\tbaseType !== \"pulse\" && baseType !== \"pwm\") {\n\t\t\tthis._oscillator.baseType = baseType;\n\t\t}\n\t}\n\n\t/**\n\t * The width of the oscillator when sourceType === \"pulse\".\n\t * See [[PWMOscillator.width]]\n\t * @example\n\t * import { OmniOscillator } from \"tone\";\n\t * const omniOsc = new OmniOscillator(440, \"pulse\");\n\t * // can access the width attribute only if type === \"pulse\"\n\t * omniOsc.width.value = 0.2;\n\t */\n\tget width(): IsPulseOscillator<OscType, Signal<\"audioRange\">> {\n\t\tif (this._getOscType(this._oscillator, \"pulse\")) {\n\t\t\treturn this._oscillator.width as IsPulseOscillator<OscType, Signal<\"audioRange\">> ;\n\t\t} else {\n\t\t\treturn undefined as IsPulseOscillator<OscType, Signal<\"audioRange\">> ;\n\t\t}\n\t}\n\n\t/**\n\t * The number of detuned oscillators when sourceType === \"fat\".\n\t * See [[FatOscillator.count]]\n\t */\n\tget count(): IsFatOscillator<OscType, number> {\n\t\tif (this._getOscType(this._oscillator, \"fat\")) {\n\t\t\treturn this._oscillator.count as IsFatOscillator<OscType, number>;\n\t\t} else {\n\t\t\treturn undefined as IsFatOscillator<OscType, number>;\n\t\t}\n\t}\n\tset count(count) {\n\t\tif (this._getOscType(this._oscillator, \"fat\") && isNumber(count)) {\n\t\t\tthis._oscillator.count = count;\n\t\t}\n\t}\n\n\t/**\n\t * The detune spread between the oscillators when sourceType === \"fat\".\n\t * See [[FatOscillator.count]]\n\t */\n\tget spread(): IsFatOscillator<OscType, Cents> {\n\t\tif (this._getOscType(this._oscillator, \"fat\")) {\n\t\t\treturn this._oscillator.spread as IsFatOscillator<OscType, Cents>;\n\t\t} else {\n\t\t\treturn undefined as IsFatOscillator<OscType, Cents>;\n\t\t}\n\t}\n\tset spread(spread) {\n\t\tif (this._getOscType(this._oscillator, \"fat\") && isNumber(spread)) {\n\t\t\tthis._oscillator.spread = spread;\n\t\t}\n\t}\n\n\t/**\n\t * The type of the modulator oscillator. Only if the oscillator is set to \"am\" or \"fm\" types. \n\t * See [[AMOscillator]] or [[FMOscillator]]\n\t */\n\tget modulationType(): IsAmOrFmOscillator<OscType, ToneOscillatorType> {\n\t\tif (this._getOscType(this._oscillator, \"fm\") || this._getOscType(this._oscillator, \"am\")) {\n\t\t\treturn this._oscillator.modulationType as IsAmOrFmOscillator<OscType, ToneOscillatorType>;\n\t\t} else {\n\t\t\treturn undefined as IsAmOrFmOscillator<OscType, ToneOscillatorType>;\n\t\t}\n\t}\n\tset modulationType(mType) {\n\t\tif ((this._getOscType(this._oscillator, \"fm\") || this._getOscType(this._oscillator, \"am\")) && isString(mType)) {\n\t\t\tthis._oscillator.modulationType = mType;\n\t\t}\n\t}\n\n\t/**\n\t * The modulation index when the sourceType === \"fm\"\n\t * See [[FMOscillator]].\n\t */\n\tget modulationIndex(): IsFMOscillator<OscType, Signal<\"positive\">> {\n\t\tif (this._getOscType(this._oscillator, \"fm\")) {\n\t\t\treturn this._oscillator.modulationIndex as IsFMOscillator<OscType, Signal<\"positive\">>;\n\t\t} else {\n\t\t\treturn undefined as IsFMOscillator<OscType, Signal<\"positive\">>;\n\t\t}\n\t}\n\n\t/**\n\t * Harmonicity is the frequency ratio between the carrier and the modulator oscillators.\n\t * See [[AMOscillator]] or [[FMOscillator]]\n\t */\n\tget harmonicity(): IsAmOrFmOscillator<OscType, Signal<\"positive\">> {\n\t\tif (this._getOscType(this._oscillator, \"fm\") || this._getOscType(this._oscillator, \"am\")) {\n\t\t\treturn this._oscillator.harmonicity as IsAmOrFmOscillator<OscType, Signal<\"positive\">>;\n\t\t} else {\n\t\t\treturn undefined as IsAmOrFmOscillator<OscType, Signal<\"positive\">>;\n\t\t}\n\t}\n\n\t/**\n\t * The modulationFrequency Signal of the oscillator when sourceType === \"pwm\"\n\t * see [[PWMOscillator]]\n\t * @min 0.1\n\t * @max 5\n\t */\n\tget modulationFrequency(): IsPWMOscillator<OscType, Signal<\"frequency\">> {\n\t\tif (this._getOscType(this._oscillator, \"pwm\")) {\n\t\t\treturn this._oscillator.modulationFrequency as IsPWMOscillator<OscType, Signal<\"frequency\">>;\n\t\t} else {\n\t\t\treturn undefined as IsPWMOscillator<OscType, Signal<\"frequency\">>;\n\t\t}\n\t}\n\n\tasync asArray(length = 1024): Promise<Float32Array> {\n\t\treturn generateWaveform(this, length);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.detune.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis._oscillator.dispose();\n\t\treturn this;\n\t}\n}\n","import { connectSeries } from \"../core/context/ToneAudioNode\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Param } from \"../core/context/Param\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Signal, SignalOptions } from \"./Signal\";\n\n/**\n * Add a signal and a number or two signals. When no value is\n * passed into the constructor, Tone.Add will sum input and `addend`\n * If a value is passed into the constructor, the it will be added to the input.\n *\n * @example\n * import { Add, Signal } from \"tone\";\n * const signal = new Signal(2);\n * // add a signal and a scalar\n * const add = new Add(2);\n * signal.connect(add);\n * // the output of add equals 4\n * @example\n * import { Add, Signal } from \"tone\";\n * // Add two signal inputs\n * const add = new Add();\n * const sig0 = new Signal(3).connect(add);\n * const sig1 = new Signal(4).connect(add.addend);\n * // the output of add equals 7.\n * @category Signal\n */\nexport class Add extends Signal {\n\n\toverride = false;\n\n\treadonly name: string = \"Add\";\n\n\t/**\n\t * the summing node\n\t */\n\tprivate _sum: Gain = new Gain({ context: this.context });\n\treadonly input = this._sum;\n\treadonly output = this._sum;\n\n\t/**\n\t * The value which is added to the input signal\n\t */\n\treadonly addend: Param<\"number\"> = this._param;\n\n\t/**\n\t * @param value If no value is provided, will sum the input and [[addend]].\n\t */\n\tconstructor(value?: number);\n\tconstructor(options?: Partial<SignalOptions<\"number\">>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Add.getDefaults(), arguments, [\"value\"])));\n\n\t\tconnectSeries(this._constantSource, this._sum);\n\t}\n\n\tstatic getDefaults(): SignalOptions<\"number\"> {\n\t\treturn Object.assign(Signal.getDefaults(), {\n\t\t\tvalue: 0,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._sum.dispose();\n\t\treturn this;\n\t}\n}\n","import { InputNode, OutputNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Add } from \"./Add\";\nimport { Multiply } from \"./Multiply\";\nimport { SignalOperator } from \"./SignalOperator\";\n\nexport interface ScaleOptions extends ToneAudioNodeOptions {\n\tmin: number;\n\tmax: number;\n}\n\n/**\n * Performs a linear scaling on an input signal.\n * Scales a NormalRange input to between\n * outputMin and outputMax.\n *\n * @example\n * import { Scale, Signal } from \"tone\";\n * const scale = new Scale(50, 100);\n * const signal = new Signal(0.5).connect(scale);\n * // the output of scale equals 75\n * @category Signal\n */\nexport class Scale<Options extends ScaleOptions = ScaleOptions> extends SignalOperator<Options> {\n\n\treadonly name: string = \"Scale\";\n\n\tinput: InputNode;\n\toutput: OutputNode;\n\n\t/**\n\t * Hold the multiple\n\t */\n\tprotected _mult: Multiply;\n\n\t/**\n\t * Hold the adder\n\t */\n\tprotected _add: Add;\n\n\t/**\n\t * Private reference to the min value\n\t */\n\tprivate _min: number;\n\n\t/**\n\t * Private reference to the max value\n\t */\n\tprivate _max: number;\n\n\t/**\n\t * @param min The output value when the input is 0.\n\t * @param max The output value when the input is 1.\n\t */\n\tconstructor(min?: number, max?: number);\n\tconstructor(options?: Partial<ScaleOptions>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Scale.getDefaults(), arguments, [\"min\", \"max\"])));\n\t\tconst options = optionsFromArguments(Scale.getDefaults(), arguments, [\"min\", \"max\"]);\n\n\t\tthis._mult = this.input = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.max - options.min,\n\t\t});\n\t\n\t\tthis._add = this.output = new Add({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.min,\n\t\t});\n\n\t\tthis._min = options.min;\n\t\tthis._max = options.max;\n\n\t\tthis.input.connect(this.output);\n\t}\n\n\tstatic getDefaults(): ScaleOptions {\n\t\treturn Object.assign(SignalOperator.getDefaults(), {\n\t\t\tmax: 1,\n\t\t\tmin: 0,\n\t\t});\n\t}\n\n\t/**\n\t * The minimum output value. This number is output when the value input value is 0.\n\t */\n\tget min(): number {\n\t\treturn this._min;\n\t}\n\tset min(min) {\n\t\tthis._min = min;\n\t\tthis._setRange();\n\t}\n\n\t/**\n\t * The maximum output value. This number is output when the value input value is 1.\n\t */\n\tget max(): number {\n\t\treturn this._max;\n\t}\n\tset max(max) {\n\t\tthis._max = max;\n\t\tthis._setRange();\n\t}\n\n\t/**\n\t * set the values\n\t */\n\tprivate _setRange(): void {\n\t\tthis._add.value = this._min;\n\t\tthis._mult.value = this._max - this._min;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._add.dispose();\n\t\tthis._mult.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../core/context/Gain\";\nimport { connect, disconnect, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { SignalOperator } from \"./SignalOperator\";\n\n/**\n * Tone.Zero outputs 0's at audio-rate. The reason this has to be\n * it's own class is that many browsers optimize out Tone.Signal\n * with a value of 0 and will not process nodes further down the graph.\n * @category Signal\n */\nexport class Zero extends SignalOperator<ToneAudioNodeOptions> {\n\n\treadonly name: string = \"Zero\";\n\n\t/**\n\t * The gain node which connects the constant source to the output\n\t */\n\tprivate _gain = new Gain({ context: this.context });\n\n\t/**\n\t * Only outputs 0\n\t */\n\toutput = this._gain;\n\n\t/**\n\t * no input node\n\t */\n\tinput = undefined;\n\n\tconstructor(options?: Partial<ToneAudioNodeOptions>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Zero.getDefaults(), arguments)));\n\t\tconnect(this.context.getConstant(0), this._gain);\n\t}\n\n\t/**\n\t * clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tdisconnect(this.context.getConstant(0), this._gain);\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { Param } from \"../../core/context/Param\";\nimport { InputNode, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Degrees, Frequency, NormalRange, Time, UnitName } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { BasicPlaybackState } from \"../../core/util/StateTimeline\";\nimport { AudioToGain } from \"../../signal/AudioToGain\";\nimport { Scale } from \"../../signal/Scale\";\nimport { connectSignal, Signal } from \"../../signal/Signal\";\nimport { Zero } from \"../../signal/Zero\";\nimport { Oscillator, ToneOscillatorType } from \"./Oscillator\";\n\nexport interface LFOOptions extends ToneAudioNodeOptions {\n\ttype: ToneOscillatorType;\n\tmin: number;\n\tmax: number;\n\tphase: Degrees;\n\tfrequency: Frequency;\n\tamplitude: NormalRange;\n\tunits: UnitName;\n}\n\n/**\n * LFO stands for low frequency oscillator. LFO produces an output signal\n * which can be attached to an AudioParam or Tone.Signal\n * in order to modulate that parameter with an oscillator. The LFO can\n * also be synced to the transport to start/stop and change when the tempo changes.\n *\n * @example\n * import { Filter, LFO, Noise } from \"tone\";\n * const filter = new Filter().toDestination();\n * const noise = new Noise().connect(filter).start();\n * const lfo = new LFO(\"4n\", 400, 4000).start();\n * // have it control the filters cutoff\n * lfo.connect(filter.frequency);\n * @category Source\n */\nexport class LFO extends ToneAudioNode<LFOOptions> {\n\n\treadonly name: string = \"LFO\";\n\n\t/**\n\t * The oscillator.\n\t */\n\tprivate _oscillator: Oscillator;\n\n\t/**\n\t * The gain of the output\n\t */\n\tprivate _amplitudeGain: Gain<\"normalRange\">;\n\n\t/**\n\t * The amplitude of the LFO, which controls the output range between\n\t * the min and max output. For example if the min is -10 and the max\n\t * is 10, setting the amplitude to 0.5 would make the LFO modulate\n\t * between -5 and 5.\n\t */\n\treadonly amplitude: Param<\"normalRange\">;\n\n\t/**\n\t * The signal which is output when the LFO is stopped\n\t */\n\tprivate _stoppedSignal: Signal<\"audioRange\">;\n\n\t/**\n\t * Just outputs zeros. This is used so that scaled signal is not\n\t * optimized to silence.\n\t */\n\tprivate _zeros: Zero;\n\n\t/**\n\t * The value that the LFO outputs when it's stopped\n\t */\n\tprivate _stoppedValue = 0;\n\n\t/**\n\t * Convert the oscillators audio range to an output between 0-1 so it can be scaled\n\t */\n\tprivate _a2g: AudioToGain;\n\n\t/**\n\t * Scales the final output to the min and max value\n\t */\n\tprivate _scaler: Scale;\n\n\t/**\n\t * The output of the LFO\n\t */\n\treadonly output: OutputNode;\n\n\t/**\n\t * There is no input node\n\t */\n\treadonly input: undefined;\n\n\t/**\n\t * A private placeholder for the units\n\t */\n\tprivate _units: UnitName = \"number\";\n\n\t/**\n\t * If the input value is converted using the [[units]]\n\t */\n\tconvert = true;\n\n\t/**\n\t * The frequency value of the LFO\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * @param frequency The frequency of the oscillation.\n\t * Typically, LFOs will be in the frequency range of 0.1 to 10 hertz.\n\t * @param min The minimum output value of the LFO.\n\t * @param max The maximum value of the LFO.\n\t */\n\tconstructor(frequency?: Frequency, min?: number, max?: number);\n\tconstructor(options?: Partial<LFOOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(LFO.getDefaults(), arguments, [\"frequency\", \"min\", \"max\"]));\n\t\tconst options = optionsFromArguments(LFO.getDefaults(), arguments, [\"frequency\", \"min\", \"max\"]);\n\n\t\t// @ts-ignore\n\t\tthis._oscillator = new Oscillator({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.frequency,\n\t\t\ttype: options.type,\n\t\t});\n\t\tthis.frequency = this._oscillator.frequency;\n\n\t\tthis._amplitudeGain = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: options.amplitude,\n\t\t\tunits: \"normalRange\",\n\t\t});\n\t\tthis.amplitude = this._amplitudeGain.gain;\n\t\tthis._stoppedSignal = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"audioRange\",\n\t\t\tvalue: 0,\n\t\t});\n\t\tthis._zeros = new Zero({ context: this.context });\n\t\tthis._a2g = new AudioToGain({ context: this.context });\n\t\tthis._scaler = this.output = new Scale({\n\t\t\tcontext: this.context,\n\t\t\tmax: options.max,\n\t\t\tmin: options.min,\n\t\t});\n\n\t\tthis.min = options.min;\n\t\tthis.max = options.max;\n\t\tthis.units = options.units;\n\n\t\t// connect it up\n\t\tthis._oscillator.chain(this._a2g, this._amplitudeGain, this._scaler);\n\t\tthis._zeros.connect(this._a2g);\n\t\tthis._stoppedSignal.connect(this._a2g);\n\t\treadOnly(this, [\"amplitude\", \"frequency\"]);\n\t\tthis.phase = options.phase;\n\t}\n\n\tstatic getDefaults(): LFOOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tamplitude: 1,\n\t\t\tfrequency: \"4n\",\n\t\t\tmax: 1,\n\t\t\tmin: 0,\n\t\t\tphase: 0,\n\t\t\ttype: \"sine\" as ToneOscillatorType,\n\t\t\tunits: \"number\" as UnitName,\n\t\t});\n\t}\n\n\t/**\n\t * Start the LFO.\n\t * @param time The time the LFO will start\n\t */\n\tstart(time?: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis._stoppedSignal.setValueAtTime(0, time);\n\t\tthis._oscillator.start(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the LFO.\n\t * @param  time The time the LFO will stop\n\t */\n\tstop(time?: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis._stoppedSignal.setValueAtTime(this._stoppedValue, time);\n\t\tthis._oscillator.stop(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sync the start/stop/pause to the transport\n\t * and the frequency to the bpm of the transport\n\t * @example\n\t * import { LFO } from \"tone\";\n\t * const lfo = new LFO(\"8n\");\n\t * lfo.sync().start(0);\n\t * // the rate of the LFO will always be an eighth note, even as the tempo changes\n\t */\n\tsync(): this {\n\t\tthis._oscillator.sync();\n\t\tthis._oscillator.syncFrequency();\n\t\treturn this;\n\t}\n\n\t/**\n\t * unsync the LFO from transport control\n\t */\n\tunsync(): this {\n\t\tthis._oscillator.unsync();\n\t\tthis._oscillator.unsyncFrequency();\n\t\treturn this;\n\t}\n\n\t/**\n\t * The minimum output of the LFO.\n\t */\n\tget min(): number {\n\t\treturn this._toType(this._scaler.min);\n\t}\n\tset min(min) {\n\t\tmin = this._fromType(min);\n\t\tthis._scaler.min = min;\n\t}\n\n\t/**\n\t * The maximum output of the LFO.\n\t */\n\tget max(): number {\n\t\treturn this._toType(this._scaler.max);\n\t}\n\tset max(max) {\n\t\tmax = this._fromType(max);\n\t\tthis._scaler.max = max;\n\t}\n\n\t/**\n\t * The type of the oscillator: See [[Oscillator.type]]\n\t */\n\tget type(): ToneOscillatorType {\n\t\treturn this._oscillator.type;\n\t}\n\tset type(type) {\n\t\tthis._oscillator.type = type;\n\t\tthis._stoppedValue = this._oscillator.getInitialValue();\n\t\tthis._stoppedSignal.value = this._stoppedValue;\n\t}\n\n\t/**\n\t * The phase of the LFO.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._oscillator.phase;\n\t}\n\tset phase(phase) {\n\t\tthis._oscillator.phase = phase;\n\t\tthis._stoppedValue = this._oscillator.getInitialValue();\n\t\tthis._stoppedSignal.value = this._stoppedValue;\n\t}\n\n\t/**\n\t * The output units of the LFO.\n\t */\n\tget units(): UnitName {\n\t\treturn this._units;\n\t}\n\tset units(val) {\n\t\tconst currentMin = this.min;\n\t\tconst currentMax = this.max;\n\t\t// convert the min and the max\n\t\tthis._units = val;\n\t\tthis.min = currentMin;\n\t\tthis.max = currentMax;\n\t}\n\n\t/**\n\t * Returns the playback state of the source, either \"started\" or \"stopped\".\n\t */\n\tget state(): BasicPlaybackState {\n\t\treturn this._oscillator.state;\n\t}\n\n\t/**\n\t * @param node the destination to connect to\n\t * @param outputNum the optional output number\n\t * @param inputNum the input number\n\t */\n\tconnect(node: InputNode, outputNum?: number, inputNum?: number): this {\n\t\tif (node instanceof Param || node instanceof Signal) {\n\t\t\tthis.convert = node.convert;\n\t\t\tthis.units = node.units;\n\t\t}\n\t\tconnectSignal(this, node, outputNum, inputNum);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Private methods borrowed from Param\n\t */\n\t// @ts-ignore\n\tprivate _fromType = Param.prototype._fromType;\n\t// @ts-ignore\n\tprivate _toType = Param.prototype._toType;\n\t// @ts-ignore\n\tprivate _is = Param.prototype._is;\n\t// @ts-ignore\n\tprivate _clampValue = Param.prototype._clampValue;\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._oscillator.dispose();\n\t\tthis._stoppedSignal.dispose();\n\t\tthis._zeros.dispose();\n\t\tthis._scaler.dispose();\n\t\tthis._a2g.dispose();\n\t\tthis._amplitudeGain.dispose();\n\t\tthis.amplitude.dispose();\n\t\treturn this;\n\t}\n}\n","import { assertRange } from \"./Debug\";\nimport { Time } from \"../type/Units\";\n\n/**\n * Assert that the number is in the given range.\n */\nexport function range(min: number, max = Infinity) {\n\tconst valueMap: WeakMap<any, number> = new WeakMap();\n\treturn function(target: any, propertyKey: string | symbol) {\n\t\tReflect.defineProperty(\n\t\t\ttarget,\n\t\t\tpropertyKey,\n\t\t\t{\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tget: function() {\n\t\t\t\t\treturn valueMap.get(this);\n\t\t\t\t},\n\t\t\t\tset: function(newValue: number) {\n\t\t\t\t\tassertRange(newValue, min, max);\n\t\t\t\t\tvalueMap.set(this, newValue);\n\t\t\t\t}\n\t\t\t},\n\t\t);\n\t};\n}\n\n/**\n * Convert the time to seconds and assert that the time is in between the two\n * values when being set.\n */\nexport function timeRange(min: number, max = Infinity) {\n\tconst valueMap: WeakMap<any, Time> = new WeakMap();\n\treturn function(target: any, propertyKey: string) {\n\t\tReflect.defineProperty(\n\t\t\ttarget,\n\t\t\tpropertyKey,\n\t\t\t{\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tget: function() {\n\t\t\t\t\treturn valueMap.get(this);\n\t\t\t\t},\n\t\t\t\tset: function(newValue: Time) {\n\t\t\t\t\tassertRange(this.toSeconds(newValue), min, max);\n\t\t\t\t\tvalueMap.set(this, newValue);\n\t\t\t\t}\n\t\t\t},\n\t\t);\n\t};\n}\n","import { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { Positive, Seconds, Time } from \"../../core/type/Units\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp } from \"../../core/util/Interface\";\nimport { isUndef } from \"../../core/util/TypeCheck\";\nimport { Source, SourceOptions } from \"../Source\";\nimport { ToneBufferSource } from \"./ToneBufferSource\";\nimport { assertRange } from \"../../core/util/Debug\";\nimport { timeRange } from \"../../core/util/Decorator\";\n\nexport interface PlayerOptions extends SourceOptions {\n\tonload: () => void;\n\tonerror: (error: Error) => void;\n\tplaybackRate: Positive;\n\tloop: boolean;\n\tautostart: boolean;\n\tloopStart: Time;\n\tloopEnd: Time;\n\treverse: boolean;\n\tfadeIn: Time;\n\tfadeOut: Time;\n\turl?: ToneAudioBuffer | string | AudioBuffer;\n}\n\n/**\n * Player is an audio file player with start, loop, and stop functions.\n * @example\n * import { Player } from \"tone\";\n * const player = new Player(\"https://tonejs.github.io/examples/audio/FWDL.mp3\").toDestination();\n * // play as soon as the buffer is loaded\n * player.autostart = true;\n * @category Source\n */\nexport class Player extends Source<PlayerOptions> {\n\n\treadonly name: string = \"Player\";\n\n\t/**\n\t * If the file should play as soon\n\t * as the buffer is loaded.\n\t */\n\tautostart: boolean;\n\n\t/**\n\t * The buffer\n\t */\n\tprivate _buffer: ToneAudioBuffer;\n\n\t/**\n\t * if the buffer should loop once it's over\n\t */\n\tprivate _loop: boolean;\n\n\t/**\n\t * if 'loop' is true, the loop will start at this position\n\t */\n\tprivate _loopStart: Time;\n\n\t/**\n\t * if 'loop' is true, the loop will end at this position\n\t */\n\tprivate _loopEnd: Time;\n\n\t/**\n\t * the playback rate\n\t */\n\tprivate _playbackRate: Positive;\n\n\t/**\n\t * All of the active buffer source nodes\n\t */\n\tprivate _activeSources: Set<ToneBufferSource> = new Set();\n\n\t/**\n\t * The fadeIn time of the amplitude envelope.\n\t */\n\t@timeRange(0)\n\tfadeIn: Time;\n\t\n\t/**\n\t * The fadeOut time of the amplitude envelope.\n\t */\n\t@timeRange(0)\n\tfadeOut: Time;\n\n\t/**\n\t * @param url Either the AudioBuffer or the url from which to load the AudioBuffer\n\t * @param onload The function to invoke when the buffer is loaded.\n\t */\n\tconstructor(url?: string | AudioBuffer | ToneAudioBuffer, onload?: () => void);\n\tconstructor(options?: Partial<PlayerOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Player.getDefaults(), arguments, [\"url\", \"onload\"]));\n\t\tconst options = optionsFromArguments(Player.getDefaults(), arguments, [\"url\", \"onload\"]);\n\n\t\tthis._buffer = new ToneAudioBuffer({\n\t\t\tonload: this._onload.bind(this, options.onload),\n\t\t\tonerror: options.onerror,\n\t\t\treverse: options.reverse,\n\t\t\turl: options.url,\n\t\t});\n\t\tthis.autostart = options.autostart;\n\t\tthis._loop = options.loop;\n\t\tthis._loopStart = options.loopStart;\n\t\tthis._loopEnd = options.loopEnd;\n\t\tthis._playbackRate = options.playbackRate;\n\t\tthis.fadeIn = options.fadeIn;\n\t\tthis.fadeOut = options.fadeOut;\n\t}\n\n\tstatic getDefaults(): PlayerOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tautostart: false,\n\t\t\tfadeIn: 0,\n\t\t\tfadeOut: 0,\n\t\t\tloop: false,\n\t\t\tloopEnd: 0,\n\t\t\tloopStart: 0,\n\t\t\tonload: noOp,\n\t\t\tonerror: noOp,\n\t\t\tplaybackRate: 1,\n\t\t\treverse: false,\n\t\t});\n\t}\n\n\t/**\n\t * Load the audio file as an audio buffer.\n\t * Decodes the audio asynchronously and invokes\n\t * the callback once the audio buffer loads.\n\t * Note: this does not need to be called if a url\n\t * was passed in to the constructor. Only use this\n\t * if you want to manually load a new url.\n\t * @param url The url of the buffer to load. Filetype support depends on the browser.\n\t */\n\tasync load(url: string): Promise<this> {\n\t\tawait this._buffer.load(url);\n\t\tthis._onload();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Internal callback when the buffer is loaded.\n\t */\n\tprivate _onload(callback: () => void = noOp): void {\n\t\tcallback();\n\t\tif (this.autostart) {\n\t\t\tthis.start();\n\t\t}\n\t}\n\n\t/**\n\t * Internal callback when the buffer is done playing.\n\t */\n\tprivate _onSourceEnd(source: ToneBufferSource): void {\n\t\t// invoke the onstop function\n\t\tthis.onstop(this);\n\n\t\t// delete the source from the active sources\n\t\tthis._activeSources.delete(source);\n\t\tif (this._activeSources.size === 0 && !this._synced && \n\t\tthis._state.getValueAtTime(this.now()) === \"started\") {\n\t\t\tthis._state.setStateAtTime(\"stopped\", this.now());\n\t\t}\n\t}\n\n\t/**\n\t * Play the buffer at the given startTime. Optionally add an offset\n\t * and/or duration which will play the buffer from a position\n\t * within the buffer for the given duration.\n\t *\n\t * @param  time When the player should start.\n\t * @param  offset The offset from the beginning of the sample to start at.\n\t * @param  duration How long the sample should play. If no duration is given, it will default to the full length of the sample (minus any offset)\n\t */\n\tstart(time?: Time, offset?: Time, duration?: Time): this {\n\t\tsuper.start(time, offset, duration);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Internal start method\n\t */\n\tprotected _start(startTime?: Time, offset?: Time, duration?: Time): void {\n\t\t// if it's a loop the default offset is the loopStart point\n\t\tif (this._loop) {\n\t\t\toffset = defaultArg(offset, this._loopStart);\n\t\t} else {\n\t\t\t// otherwise the default offset is 0\n\t\t\toffset = defaultArg(offset, 0);\n\t\t}\n\n\t\t// compute the values in seconds\n\t\tlet computedOffset = this.toSeconds(offset);\n\n\t\t// if it's synced, it should factor in the playback rate for computing the offset\n\t\tif (this._synced) {\n\t\t\tcomputedOffset *= this._playbackRate;\n\t\t}\n\n\t\t// compute the duration which is either the passed in duration of the buffer.duration - offset\n\t\tconst origDuration = duration;\n\t\tduration = defaultArg(duration, Math.max(this._buffer.duration - computedOffset, 0));\n\t\tlet computedDuration = this.toSeconds(duration);\n\n\t\t// scale it by the playback rate\n\t\tcomputedDuration = computedDuration / this._playbackRate;\n\n\t\t// get the start time\n\t\tstartTime = this.toSeconds(startTime);\n\n\t\t// make the source\n\t\tconst source = new ToneBufferSource({\n\t\t\turl: this._buffer,\n\t\t\tcontext: this.context,\n\t\t\tfadeIn: this.fadeIn,\n\t\t\tfadeOut: this.fadeOut,\n\t\t\tloop: this._loop,\n\t\t\tloopEnd: this._loopEnd,\n\t\t\tloopStart: this._loopStart,\n\t\t\tonended: this._onSourceEnd.bind(this),\n\t\t\tplaybackRate: this._playbackRate,\n\t\t}).connect(this.output);\n\n\t\t// set the looping properties\n\t\tif (!this._loop && !this._synced) {\n\t\t\t// cancel the previous stop\n\t\t\tthis._state.cancel(startTime + computedDuration);\n\t\t\t// if it's not looping, set the state change at the end of the sample\n\t\t\tthis._state.setStateAtTime(\"stopped\", startTime + computedDuration, {\n\t\t\t\timplicitEnd: true,\n\t\t\t});\n\t\t}\n\n\t\t// add it to the array of active sources\n\t\tthis._activeSources.add(source);\n\n\t\t// start it\n\t\tif (this._loop && isUndef(origDuration)) {\n\t\t\tsource.start(startTime, computedOffset);\n\t\t} else {\n\t\t\t// subtract the fade out time\n\t\t\tsource.start(startTime, computedOffset, computedDuration - this.toSeconds(this.fadeOut));\n\t\t}\n\t}\n\n\t/**\n\t * Stop playback.\n\t */\n\tprotected _stop(time?: Time): void {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._activeSources.forEach(source => source.stop(computedTime));\n\t}\n\n\t/**\n\t * Stop and then restart the player from the beginning (or offset)\n\t * @param  time When the player should start.\n\t * @param  offset The offset from the beginning of the sample to start at.\n\t * @param  duration How long the sample should play. If no duration is given, \n\t * \t\t\t\t\tit will default to the full length of the sample (minus any offset)\n\t */\n\trestart(time?: Seconds, offset?: Time, duration?: Time): this {\n\t\tsuper.restart(time, offset, duration);\n\t\treturn this;\n\t}\n\t\n\tprotected _restart(time?: Seconds, offset?: Time, duration?: Time): void {\n\t\tthis._stop(time);\n\t\tthis._start(time, offset, duration);\n\t}\n\n\t/**\n\t * Seek to a specific time in the player's buffer. If the\n\t * source is no longer playing at that time, it will stop.\n\t * @param offset The time to seek to.\n\t * @param when The time for the seek event to occur.\n\t * @example\n\t * import { Player } from \"tone\";\n\t * const player = new Player(\"https://tonejs.github.io/examples/audio/FWDL.mp3\", () => {\n\t * \tplayer.start();\n\t * \t// seek to the offset in 1 second from now\n\t * \tplayer.seek(0.4, \"+1\");\n\t * }).toDestination();\n\t */\n\tseek(offset: Time, when?: Time): this {\n\t\tconst computedTime = this.toSeconds(when);\n\t\tif (this._state.getValueAtTime(computedTime) === \"started\") {\n\t\t\tconst computedOffset = this.toSeconds(offset);\n\t\t\t// if it's currently playing, stop it\n\t\t\tthis._stop(computedTime);\n\t\t\t// restart it at the given time\n\t\t\tthis._start(computedTime, computedOffset);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set the loop start and end. Will only loop if loop is set to true.\n\t * @param loopStart The loop start time\n\t * @param loopEnd The loop end time\n\t * @example\n\t * import { Player } from \"tone\";\n\t * const player = new Player(\"https://tonejs.github.io/examples/audio/FWDL.mp3\").toDestination();\n\t * // loop between the given points\n\t * player.setLoopPoints(0.2, 0.3);\n\t * player.loop = true;\n\t * player.autostart = true;\n\t */\n\tsetLoopPoints(loopStart: Time, loopEnd: Time): this {\n\t\tthis.loopStart = loopStart;\n\t\tthis.loopEnd = loopEnd;\n\t\treturn this;\n\t}\n\n\t/**\n\t * If loop is true, the loop will start at this position.\n\t */\n\tget loopStart(): Time {\n\t\treturn this._loopStart;\n\t}\n\tset loopStart(loopStart) {\n\t\tthis._loopStart = loopStart;\n\t\tif (this.buffer.loaded) {\n\t\t\tassertRange(this.toSeconds(loopStart), 0, this.buffer.duration);\n\t\t}\n\t\t// get the current source\n\t\tthis._activeSources.forEach(source => {\n\t\t\tsource.loopStart = loopStart;\n\t\t});\n\t}\n\n\t/**\n\t * If loop is true, the loop will end at this position.\n\t */\n\tget loopEnd(): Time {\n\t\treturn this._loopEnd;\n\t}\n\tset loopEnd(loopEnd) {\n\t\tthis._loopEnd = loopEnd;\n\t\tif (this.buffer.loaded) {\n\t\t\tassertRange(this.toSeconds(loopEnd), 0, this.buffer.duration);\n\t\t}\n\t\t// get the current source\n\t\tthis._activeSources.forEach(source => {\n\t\t\tsource.loopEnd = loopEnd;\n\t\t});\n\t}\n\n\t/**\n\t * The audio buffer belonging to the player.\n\t */\n\tget buffer(): ToneAudioBuffer {\n\t\treturn this._buffer;\n\t}\n\tset buffer(buffer) {\n\t\tthis._buffer.set(buffer);\n\t}\n\n\t/**\n\t * If the buffer should loop once it's over.\n\t */\n\tget loop(): boolean {\n\t\treturn this._loop;\n\t}\n\tset loop(loop) {\n\t\t// if no change, do nothing\n\t\tif (this._loop === loop) {\n\t\t\treturn;\n\t\t}\n\t\tthis._loop = loop;\n\t\t// set the loop of all of the sources\n\t\tthis._activeSources.forEach(source => {\n\t\t\tsource.loop = loop;\n\t\t});\n\t\tif (loop) {\n\t\t\t// remove the next stopEvent\n\t\t\tconst stopEvent = this._state.getNextState(\"stopped\", this.now());\n\t\t\tif (stopEvent) {\n\t\t\t\tthis._state.cancel(stopEvent.time);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * The playback speed. 1 is normal speed. This is not a signal because\n\t * Safari and iOS currently don't support playbackRate as a signal.\n\t */\n\tget playbackRate(): Positive {\n\t\treturn this._playbackRate;\n\t}\n\tset playbackRate(rate) {\n\t\tthis._playbackRate = rate;\n\t\tconst now = this.now();\n\n\t\t// cancel the stop event since it's at a different time now\n\t\tconst stopEvent = this._state.getNextState(\"stopped\", now);\n\t\tif (stopEvent && stopEvent.implicitEnd) {\n\t\t\tthis._state.cancel(stopEvent.time);\n\t\t\tthis._activeSources.forEach(source => source.cancelStop());\n\t\t}\n\n\t\t// set all the sources\n\t\tthis._activeSources.forEach(source => {\n\t\t\tsource.playbackRate.setValueAtTime(rate, now);\n\t\t});\n\t}\n\n\t/**\n\t * The direction the buffer should play in\n\t */\n\tget reverse(): boolean {\n\t\treturn this._buffer.reverse;\n\t}\n\tset reverse(rev) {\n\t\tthis._buffer.reverse = rev;\n\t}\n\n\t/**\n\t * If the buffer is loaded\n\t */\n\tget loaded(): boolean {\n\t\treturn this._buffer.loaded;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\t// disconnect all of the players\n\t\tthis._activeSources.forEach(source => source.dispose());\n\t\tthis._activeSources.clear();\n\t\tthis._buffer.dispose();\n\t\treturn this;\n\t}\n}\n","import { Volume } from \"../../component/channel/Volume\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { ToneAudioBuffers, ToneAudioBuffersUrlMap } from \"../../core/context/ToneAudioBuffers\";\nimport { OutputNode, ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { Decibels, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { assert } from \"../../core/util/Debug\";\nimport { noOp, readOnly } from \"../../core/util/Interface\";\nimport { BasicPlaybackState } from \"../../core/util/StateTimeline\";\nimport { Source, SourceOptions } from \"../Source\";\nimport { Player } from \"./Player\";\n\nexport interface PlayersOptions extends SourceOptions {\n\turls: ToneAudioBuffersUrlMap;\n\tvolume: Decibels;\n\tmute: boolean;\n\tonload: () => void;\n\tonerror: (error: Error) => void;\n\tbaseUrl: string;\n\tfadeIn: Time;\n\tfadeOut: Time;\n}\n\n/**\n * Players combines multiple [[Player]] objects.\n * @category Source\n */\nexport class Players extends ToneAudioNode<PlayersOptions> {\n\n\treadonly name: string = \"Players\";\n\n\t/**\n\t * The output volume node\n\t */\n\tprivate _volume: Volume;\n\n\t/**\n\t * The volume of the output in decibels.\n\t */\n\treadonly volume: Param<\"decibels\">;\n\n\t/**\n\t * The combined output of all of the players\n\t */\n\treadonly output: OutputNode;\n\n\t/**\n\t * Players has no input.\n\t */\n\treadonly input = undefined;\n\n\t/**\n\t * The container of all of the players\n\t */\n\tprivate _players: Map<string, Player> = new Map();\n\n\t/**\n\t * The container of all the buffers\n\t */\n\tprivate _buffers: ToneAudioBuffers;\n\n\t/**\n\t * private holder of the fadeIn time\n\t */\n\tprivate _fadeIn: Time;\n\n\t/**\n\t * private holder of the fadeOut time\n\t */\n\tprivate _fadeOut: Time;\n\n\t/**\n\t * @param urls An object mapping a name to a url.\n\t * @param onload The function to invoke when all buffers are loaded.\n\t */\n\tconstructor(urls?: ToneAudioBuffersUrlMap, onload?: () => void);\n\t/**\n\t * @param urls An object mapping a name to a url.\n\t * @param options The remaining options associated with the players\n\t */\n\tconstructor(urls?: ToneAudioBuffersUrlMap, options?: Partial<Omit<PlayersOptions, \"urls\">>);\n\tconstructor(options?: Partial<PlayersOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Players.getDefaults(), arguments, [\"urls\", \"onload\"], \"urls\"));\n\t\tconst options = optionsFromArguments(Players.getDefaults(), arguments, [\"urls\", \"onload\"], \"urls\");\n\n\t\t/**\n\t\t * The output volume node\n\t\t */\n\t\tthis._volume = this.output = new Volume({\n\t\t\tcontext: this.context,\n\t\t\tvolume: options.volume,\n\t\t});\n\n\t\tthis.volume = this._volume.volume;\n\t\treadOnly(this, \"volume\");\n\t\tthis._buffers = new ToneAudioBuffers({\n\t\t\turls: options.urls, \n\t\t\tonload: options.onload, \n\t\t\tbaseUrl: options.baseUrl,\n\t\t\tonerror: options.onerror\n\t\t});\n\t\t// mute initially\n\t\tthis.mute = options.mute;\n\t\tthis._fadeIn = options.fadeIn;\n\t\tthis._fadeOut = options.fadeOut;\n\t}\n\n\tstatic getDefaults(): PlayersOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tbaseUrl: \"\",\n\t\t\tfadeIn: 0,\n\t\t\tfadeOut: 0,\n\t\t\tmute: false,\n\t\t\tonload: noOp,\n\t\t\tonerror: noOp,\n\t\t\turls: {},\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Mute the output.\n\t */\n\tget mute(): boolean {\n\t\treturn this._volume.mute;\n\t}\n\tset mute(mute) {\n\t\tthis._volume.mute = mute;\n\t}\n\n\t/**\n\t * The fadeIn time of the envelope applied to the source.\n\t */\n\tget fadeIn(): Time {\n\t\treturn this._fadeIn;\n\t}\n\tset fadeIn(fadeIn) {\n\t\tthis._fadeIn = fadeIn;\n\t\tthis._players.forEach(player => {\n\t\t\tplayer.fadeIn = fadeIn;\n\t\t});\n\t}\n\n\t/**\n\t * The fadeOut time of the each of the sources.\n\t */\n\tget fadeOut(): Time {\n\t\treturn this._fadeOut;\n\t}\n\tset fadeOut(fadeOut) {\n\t\tthis._fadeOut = fadeOut;\n\t\tthis._players.forEach(player => {\n\t\t\tplayer.fadeOut = fadeOut;\n\t\t});\n\t}\n\n\t/**\n\t * The state of the players object. Returns \"started\" if any of the players are playing.\n\t */\n\tget state(): BasicPlaybackState {\n\t\tconst playing = Array.from(this._players).some(([_, player]) => player.state === \"started\");\n\t\treturn playing ? \"started\" : \"stopped\";\n\t}\n\n\t/**\n\t * True if the buffers object has a buffer by that name.\n\t * @param name  The key or index of the buffer.\n\t */\n\thas(name: string): boolean {\n\t\treturn this._buffers.has(name);\n\t}\n\n\t/**\n\t * Get a player by name.\n\t * @param  name  The players name as defined in the constructor object or `add` method.\n\t */\n\tplayer(name: string): Player {\n\t\tassert(this.has(name), `No Player with the name ${name} exists on this object`);\n\t\tif (!this._players.has(name)) {\n\t\t\tconst player = new Player({\n\t\t\t\tcontext: this.context,\n\t\t\t\tfadeIn: this._fadeIn,\n\t\t\t\tfadeOut: this._fadeOut,\n\t\t\t\turl: this._buffers.get(name),\n\t\t\t}).connect(this.output);\n\t\t\tthis._players.set(name, player);\n\t\t}\n\t\treturn this._players.get(name) as Player;\n\t}\n\n\t/**\n\t * If all the buffers are loaded or not\n\t */\n\tget loaded(): boolean {\n\t\treturn this._buffers.loaded;\n\t}\n\n\t/**\n\t * Add a player by name and url to the Players\n\t * @param  name A unique name to give the player\n\t * @param  url  Either the url of the bufer or a buffer which will be added with the given name.\n\t * @param callback  The callback to invoke when the url is loaded.\n\t */\n\tadd(name: string, url: string | ToneAudioBuffer | AudioBuffer, callback?: () => void): this {\n\t\tassert(!this._buffers.has(name), \"A buffer with that name already exists on this object\");\n\t\tthis._buffers.add(name, url, callback);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop all of the players at the given time\n\t * @param time The time to stop all of the players.\n\t */\n\tstopAll(time?: Time): this {\n\t\tthis._players.forEach(player => player.stop(time));\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._volume.dispose();\n\t\tthis.volume.dispose();\n\t\tthis._players.forEach(player => player.dispose());\n\t\tthis._buffers.dispose();\n\t\treturn this;\n\t}\n}\n","import { Source, SourceOptions } from \"../Source\";\nimport { noOp } from \"../../core/util/Interface\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Clock } from \"../../core/clock/Clock\";\nimport { Cents, Positive, Seconds, Time } from \"../../core/type/Units\";\nimport { ToneBufferSource } from \"./ToneBufferSource\";\nimport { intervalToFrequencyRatio } from \"../../core/type/Conversions\";\nimport { assertRange } from \"../../core/util/Debug\";\n\ninterface GrainPlayerOptions extends SourceOptions {\n\tonload: () => void;\n\tonerror: (error: Error) => void;\n\treverse: boolean;\n\turl?: ToneAudioBuffer | string | AudioBuffer;\n\toverlap: Seconds;\n\tgrainSize: Seconds;\n\tplaybackRate: Positive;\n\tdetune: Cents;\n\tloop: boolean;\n\tloopStart: Time;\n\tloopEnd: Time;\n}\n\n/**\n * GrainPlayer implements [granular synthesis](https://en.wikipedia.org/wiki/Granular_synthesis).\n * Granular Synthesis enables you to adjust pitch and playback rate independently. The grainSize is the\n * amount of time each small chunk of audio is played for and the overlap is the\n * amount of crossfading transition time between successive grains.\n * @category Source\n */\nexport class GrainPlayer extends Source<GrainPlayerOptions> {\n\n\treadonly name: string = \"GrainPlayer\";\n\n\t/**\n\t * The audio buffer belonging to the player.\n\t */\n\tbuffer: ToneAudioBuffer;\n\n\t/**\n\t * Create a repeating tick to schedule the grains.\n\t */\n\tprivate _clock: Clock;\n\n\t/**\n\t * Internal loopStart value\n\t */\n\tprivate _loopStart = 0;\n\n\t/**\n\t * Internal loopStart value\n\t */\n\tprivate _loopEnd = 0;\n\n\t/**\n\t * All of the currently playing BufferSources\n\t */\n\tprivate _activeSources: ToneBufferSource[] = [];\n\n\t/**\n\t * Internal reference to the playback rate\n\t */\n\tprivate _playbackRate: Positive;\n\n\t/**\n\t * Internal grain size reference;\n\t */\n\tprivate _grainSize: Seconds; \n\n\t/**\n\t * Internal overlap reference;\n\t */\n\tprivate _overlap: Seconds; \n\n\t/**\n\t * Adjust the pitch independently of the playbackRate.\n\t */\n\tdetune: Cents;\n\n\t/**\n\t * If the buffer should loop back to the loopStart when completed\n\t */\n\tloop: boolean;\n\t\t\n\t/**\n\t * @param url Either the AudioBuffer or the url from which to load the AudioBuffer\n\t * @param onload The function to invoke when the buffer is loaded.\n\t */\n\tconstructor(url?: string | AudioBuffer | ToneAudioBuffer, onload?: () => void);\n\tconstructor(options?: Partial<GrainPlayerOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(GrainPlayer.getDefaults(), arguments, [\"url\", \"onload\"]));\n\t\tconst options = optionsFromArguments(GrainPlayer.getDefaults(), arguments, [\"url\", \"onload\"]);\n\n\t\tthis.buffer = new ToneAudioBuffer({\n\t\t\tonload: options.onload,\n\t\t\tonerror: options.onerror,\n\t\t\treverse: options.reverse,\n\t\t\turl: options.url,\n\t\t});\n\t\tthis._clock = new Clock({\n\t\t\tcontext: this.context,\n\t\t\tcallback: this._tick.bind(this), \n\t\t\tfrequency: 1 / options.grainSize\n\t\t});\n\t\tthis._playbackRate = options.playbackRate;\n\t\tthis._grainSize = options.grainSize;\n\t\tthis._overlap = options.overlap;\n\t\tthis.detune = options.detune;\n\n\t\t// setup\n\t\tthis.overlap = options.overlap;\n\t\tthis.loop = options.loop;\n\t\tthis.playbackRate = options.playbackRate;\n\t\tthis.grainSize = options.grainSize;\n\t\tthis.loopStart = options.loopStart;\n\t\tthis.loopEnd = options.loopEnd;\n\t\tthis.reverse = options.reverse;\n\t\tthis._clock.on(\"stop\", this._onstop.bind(this));\n\t}\n\n\tstatic getDefaults(): GrainPlayerOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tonload: noOp,\n\t\t\tonerror: noOp,\n\t\t\toverlap: 0.1,\n\t\t\tgrainSize: 0.2,\n\t\t\tplaybackRate: 1,\n\t\t\tdetune: 0,\n\t\t\tloop: false,\n\t\t\tloopStart: 0,\n\t\t\tloopEnd: 0,\n\t\t\treverse: false\n\t\t});\n\t}\n\n\t/**\n\t * Internal start method\n\t */\n\tprotected _start(time?: Time, offset?: Time, duration?: Time): void {\n\t\toffset = defaultArg(offset, 0);\n\t\toffset = this.toSeconds(offset);\n\t\ttime = this.toSeconds(time);\n\n\t\tconst grainSize = 1 / this._clock.frequency.getValueAtTime(time);\n\t\tthis._clock.start(time, offset / grainSize);\n\n\t\tif (duration) {\n\t\t\tthis.stop(time + this.toSeconds(duration));\n\t\t}\n\t}\n\t\n\t/**\n\t * Stop and then restart the player from the beginning (or offset)\n\t * @param  time When the player should start.\n\t * @param  offset The offset from the beginning of the sample to start at.\n\t * @param  duration How long the sample should play. If no duration is given, \n\t * \t\t\t\t\tit will default to the full length of the sample (minus any offset)\n\t */\n\trestart(time?: Seconds, offset?: Time, duration?: Time): this {\n\t\tsuper.restart(time, offset, duration);\n\t\treturn this;\n\t}\n\n\tprotected _restart(time?: Seconds, offset?: Time, duration?: Time): void {\n\t\tthis._stop(time);\n\t\tthis._start(time, offset, duration);\n\t}\n\n\t/**\n\t * Internal stop method\n\t */\n\tprotected _stop(time?: Time): void {\n\t\tthis._clock.stop(time);\n\t}\n\n\t/**\n\t * Invoked when the clock is stopped\n\t */\n\tprivate _onstop(time: Seconds): void {\n\t\t// stop the players\n\t\tthis._activeSources.forEach((source) => {\n\t\t\tsource.fadeOut = 0;\n\t\t\tsource.stop(time);\n\t\t});\n\t\tthis.onstop(this);\n\t}\n\n\t/**\n\t * Invoked on each clock tick. scheduled a new grain at this time.\n\t */\n\tprivate _tick(time: Seconds): void {\n\t\t// check if it should stop looping\n\t\tconst ticks = this._clock.getTicksAtTime(time);\n\t\tconst grainSize = 1 / this._clock.frequency.getValueAtTime(time);\n\t\tconst offset = ticks * grainSize;\n\t\tthis.log(\"offset\", offset);\n\n\t\tif (!this.loop && offset > this.buffer.duration) {\n\t\t\tthis.stop(time);\n\t\t\treturn;\n\t\t}\n\n\t\t// at the beginning of the file, the fade in should be 0\n\t\tconst fadeIn = offset < this._overlap ? 0 : this._overlap;\n\n\t\t// create a buffer source\n\t\tconst source = new ToneBufferSource({\n\t\t\tcontext: this.context,\n\t\t\turl: this.buffer,\n\t\t\tfadeIn: fadeIn,\n\t\t\tfadeOut: this._overlap,\n\t\t\tloop: this.loop,\n\t\t\tloopStart: this._loopStart,\n\t\t\tloopEnd: this._loopEnd,\n\t\t\t// compute the playbackRate based on the detune\n\t\t\tplaybackRate: intervalToFrequencyRatio(this.detune / 100)\n\t\t}).connect(this.output);\n\n\t\tsource.start(time, this._grainSize * ticks);\n\t\tsource.stop(time + this._grainSize / this.playbackRate);\n\n\t\t// add it to the active sources\n\t\tthis._activeSources.push(source);\n\t\t// remove it when it's done\n\t\tsource.onended = () => {\n\t\t\tconst index = this._activeSources.indexOf(source);\n\t\t\tif (index !== -1) {\n\t\t\t\tthis._activeSources.splice(index, 1);\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * The playback rate of the sample\n\t */\n\tget playbackRate(): Positive {\n\t\treturn this._playbackRate;\n\t}\n\tset playbackRate(rate) {\n\t\tassertRange(rate, 0.001);\n\t\tthis._playbackRate = rate;\n\t\tthis.grainSize = this._grainSize;\n\t}\n\n\t/**\n\t * The loop start time.\n\t */\n\tget loopStart(): Time {\n\t\treturn this._loopStart;\n\t}\n\tset loopStart(time) {\n\t\tif (this.buffer.loaded) {\n\t\t\tassertRange(this.toSeconds(time), 0, this.buffer.duration);\n\t\t}\n\t\tthis._loopStart = this.toSeconds(time);\n\t}\n\n\t/**\n\t * The loop end time.\n\t */\n\tget loopEnd(): Time {\n\t\treturn this._loopEnd;\n\t}\n\tset loopEnd(time) {\n\t\tif (this.buffer.loaded) {\n\t\t\tassertRange(this.toSeconds(time), 0, this.buffer.duration);\n\t\t}\n\t\tthis._loopEnd = this.toSeconds(time);\n\t}\n\n\t/**\n\t * The direction the buffer should play in\n\t */\n\tget reverse() {\n\t\treturn this.buffer.reverse;\n\t}\n\n\tset reverse(rev) {\n\t\tthis.buffer.reverse = rev;\n\t}\n\n\t/**\n\t * The size of each chunk of audio that the\n\t * buffer is chopped into and played back at.\n\t */\n\tget grainSize(): Time {\n\t\treturn this._grainSize;\n\t}\n\tset grainSize(size) {\n\t\tthis._grainSize = this.toSeconds(size);\n\t\tthis._clock.frequency.setValueAtTime(this._playbackRate / this._grainSize, this.now());\n\t}\n\n\t/**\n\t * The duration of the cross-fade between successive grains.\n\t */\n\tget overlap(): Time {\n\t\treturn this._overlap;\n\t}\n\tset overlap(time) {\n\t\tthis._overlap = this.toSeconds(time);\n\t}\n\n\t/**\n\t * If all the buffer is loaded\n\t */\n\tget loaded(): boolean {\n\t\treturn this.buffer.loaded;\n\t}\n\n\tdispose(): this{\n\t\tsuper.dispose();\n\t\tthis.buffer.dispose();\n\t\tthis._clock.dispose();\n\t\tthis._activeSources.forEach((source) => source.dispose());\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { SignalOperator } from \"./SignalOperator\";\nimport { WaveShaper } from \"./WaveShaper\";\n\n/**\n * Return the absolute value of an incoming signal.\n *\n * @example\n * import { Abs, Signal } from \"tone\";\n * const signal = new Signal(-1);\n * const abs = new Abs();\n * signal.connect(abs);\n * // the output of abs is 1.\n * @category Signal\n */\nexport class Abs extends SignalOperator<ToneAudioNodeOptions> {\n\n\treadonly name: string = \"Abs\";\n\n\t/**\n\t * The node which converts the audio ranges\n\t */\n\tprivate _abs = new WaveShaper({\n\t\tcontext: this.context,\n\t\tmapping: val => {\n\t\t\tif (Math.abs(val) < 0.001) {\n\t\t\t\treturn 0;\n\t\t\t} else {\n\t\t\t\treturn Math.abs(val);\n\t\t\t}\n\t\t},\n\t});\n\n\t/**\n\t * The AudioRange input [-1, 1]\n\t */\n\tinput = this._abs;\n\n\t/**\n\t * The output range [0, 1]\n\t */\n\toutput = this._abs;\n\n\t/**\n\t * clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._abs.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { SignalOperator } from \"./SignalOperator\";\nimport { WaveShaper } from \"./WaveShaper\";\n\n/**\n * GainToAudio converts an input in NormalRange [0,1] to AudioRange [-1,1].\n * See {@link AudioToGain}.\n * @category Signal\n */\nexport class GainToAudio extends SignalOperator<ToneAudioNodeOptions> {\n\n\treadonly name: string = \"GainToAudio\";\n\n\t/**\n\t * The node which converts the audio ranges\n\t */\n\tprivate _norm = new WaveShaper({\n\t\tcontext: this.context,\n\t\tmapping: x => Math.abs(x) * 2 - 1,\n\t});\n\n\t/**\n\t * The NormalRange input [0, 1]\n\t */\n\tinput = this._norm;\n\n\t/**\n\t * The AudioRange output [-1, 1]\n\t */\n\toutput = this._norm;\n\n\t/**\n\t * clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._norm.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { Multiply } from \"./Multiply\";\nimport { SignalOperator } from \"./SignalOperator\";\n\n/**\n * Negate the incoming signal. i.e. an input signal of 10 will output -10\n *\n * @example\n * import { Negate, Signal } from \"tone\";\n * const neg = new Negate();\n * const sig = new Signal(-2).connect(neg);\n * // output of neg is positive 2.\n * @category Signal\n */\nexport class Negate extends SignalOperator<ToneAudioNodeOptions> {\n\n\treadonly name: string = \"Negate\";\n\n\t/**\n\t * negation is done by multiplying by -1\n\t */\n\tprivate _multiply: Multiply = new Multiply({\n\t\tcontext: this.context,\n\t\tvalue: -1,\n\t});\n\n\t/**\n\t * The input and output are equal to the multiply node\n\t */\n\tinput = this._multiply;\n\toutput = this._multiply;\n\n\t/**\n\t * clean up\n\t * @returns {Negate} this\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._multiply.dispose();\n\t\treturn this;\n\t}\n}\n","import { connectSeries } from \"../core/context/ToneAudioNode\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Param } from \"../core/context/Param\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Negate } from \"../signal/Negate\";\nimport { Signal, SignalOptions } from \"../signal/Signal\";\n\n/**\n * Subtract the signal connected to the input is subtracted from the signal connected\n * The subtrahend.\n *\n * @example\n * import { Signal, Subtract } from \"tone\";\n * // subtract a scalar from a signal\n * const sub = new Subtract(1);\n * const sig = new Signal(4).connect(sub);\n * // the output of sub is 3.\n * @example\n * import { Signal, Subtract } from \"tone\";\n * // subtract two signals\n * const sub = new Subtract();\n * const sigA = new Signal(10);\n * const sigB = new Signal(2.5);\n * sigA.connect(sub);\n * sigB.connect(sub.subtrahend);\n * // output of sub is 7.5\n * @category Signal\n */\nexport class Subtract extends Signal {\n\n\toverride = false;\n\n\treadonly name: string = \"Subtract\";\n\n\t/**\n\t * the summing node\n\t */\n\tprivate _sum: Gain = new Gain({ context: this.context });\n\treadonly input: Gain = this._sum;\n\treadonly output: Gain = this._sum;\n\n\t/**\n\t * Negate the input of the second input before connecting it to the summing node.\n\t */\n\tprivate _neg: Negate = new Negate({ context: this.context });\n\n\t/**\n\t * The value which is subtracted from the main signal\n\t */\n\tsubtrahend: Param<\"number\"> = this._param;\n\n\t/**\n\t * @param value The value to subtract from the incoming signal. If the value\n\t *             is omitted, it will subtract the second signal from the first.\n\t */\n\tconstructor(value?: number);\n\tconstructor(options?: Partial<SignalOptions<\"number\">>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Subtract.getDefaults(), arguments, [\"value\"])));\n\n\t\tconnectSeries(this._constantSource, this._neg, this._sum);\n\t}\n\n\tstatic getDefaults(): SignalOptions<\"number\"> {\n\t\treturn Object.assign(Signal.getDefaults(), {\n\t\t\tvalue: 0,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._neg.dispose();\n\t\tthis._sum.dispose();\n\t\treturn this;\n\t}\n}\n","import { SignalOperator, SignalOperatorOptions } from \"./SignalOperator\";\nimport { Multiply } from \"./Multiply\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { WaveShaper } from \"./WaveShaper\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\n\nexport type GreaterThanZeroOptions = SignalOperatorOptions\n\n/**\n * GreaterThanZero outputs 1 when the input is strictly greater than zero\n * @example\n * import { GreaterThanZero, Signal } from \"tone\";\n * const gt0 = new GreaterThanZero();\n * const sig = new Signal(0.01).connect(gt0);\n * // the output of gt0 is 1.\n * sig.value = 0;\n * // the output of gt0 is 0.\n */\nexport class GreaterThanZero extends SignalOperator<GreaterThanZeroOptions> {\n\n\treadonly name: string = \"GreaterThanZero\";\n\n\t/**\n\t * The waveshaper\n\t */\n\tprivate _thresh: WaveShaper;\n\t\n\t/**\n\t * Scale the first thresholded signal by a large value.\n\t * this will help with values which are very close to 0\n\t */\n\tprivate _scale: Multiply;\n\n\treadonly output: ToneAudioNode;\n\treadonly input: ToneAudioNode;\n\n\tconstructor(options?: Partial<GreaterThanZeroOptions>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(GreaterThanZero.getDefaults(), arguments)));\n\n\t\tthis._thresh = this.output = new WaveShaper({\n\t\t\tcontext: this.context,\n\t\t\tlength: 127,\n\t\t\tmapping: (val) => {\n\t\t\t\tif (val <= 0) {\n\t\t\t\t\treturn 0;\n\t\t\t\t} else {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t},\n\t\t});\n\t\tthis._scale = this.input = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tvalue: 10000\n\t\t});\n\n\t\t// connections\n\t\tthis._scale.connect(this._thresh);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._scale.dispose();\n\t\tthis._thresh.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Subtract } from \"./Subtract\";\nimport { Signal, SignalOptions } from \"./Signal\";\nimport { GreaterThanZero } from \"./GreaterThanZero\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Param } from \"../core/context/Param\";\n\nexport type GreaterThanOptions = SignalOptions<\"number\">;\n\n/**\n * Output 1 if the signal is greater than the value, otherwise outputs 0.\n * can compare two signals or a signal and a number.\n * \n * @example\n * import { GreaterThan, Signal } from \"tone\";\n * const gt = new GreaterThan(2);\n * const sig = new Signal(4).connect(gt);\n * // output of gt is equal 1.\n */\nexport class GreaterThan extends Signal<\"number\"> {\n\n\treadonly name: string = \"GreaterThan\"\n\n\treadonly override: boolean = false;\n\n\treadonly input: ToneAudioNode;\n\treadonly output: ToneAudioNode;\n\n\t/**\n\t * compare that amount to zero after subtracting\n\t */\n\tprivate _gtz: GreaterThanZero;\n\n\t/**\n\t * Subtract the value from the input node\n\t */\n\tprivate _subtract: Subtract;\n\n\t/**\n\t * The signal to compare to 0. \n\t */\n\treadonly comparator: Param<\"number\">\n\t\t\n\t/**\n\t * @param value The value to compare to\n\t */\n\tconstructor(value?: number);\n\tconstructor(options?: Partial<GreaterThanOptions>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(GreaterThan.getDefaults(), arguments, [\"value\"])));\n\t\tconst options = optionsFromArguments(GreaterThan.getDefaults(), arguments, [\"value\"]);\n\n\t\tthis._subtract = this.input = new Subtract({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.value\n\t\t});\n\t\tthis._gtz = this.output = new GreaterThanZero({ context: this.context });\n\t\t\n\t\tthis.comparator = this._param = this._subtract.subtrahend;\n\t\treadOnly(this, \"comparator\");\n\n\t\t// connect\n\t\tthis._subtract.connect(this._gtz);\n\t}\n\n\tstatic getDefaults(): GreaterThanOptions {\n\t\treturn Object.assign(Signal.getDefaults(), {\n\t\t\tvalue: 0,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._gtz.dispose();\n\t\tthis._subtract.dispose();\n\t\tthis.comparator.dispose();\n\t\treturn this;\n\t}\n}\n","import { WaveShaper, WaveShaperMappingFn } from \"./WaveShaper\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { SignalOperator } from \"./SignalOperator\";\nimport { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\n\nexport interface PowOptions extends ToneAudioNodeOptions {\n\tvalue: number;\n}\n\n/**\n * Pow applies an exponent to the incoming signal. The incoming signal must be AudioRange [-1, 1]\n *\n * @example\n * import { Pow, Signal } from \"tone\";\n * const pow = new Pow(2);\n * const sig = new Signal(0.5).connect(pow);\n * // output of pow is 0.25. \n * @category Signal\n */\nexport class Pow extends SignalOperator<PowOptions> {\n\t\n\treadonly name: string = \"Pow\";\n\t\n\tprivate _exponent: number;\n\n\tprivate _exponentScaler: WaveShaper;\n\n\tinput: WaveShaper;\n\n\toutput: WaveShaper;\n\t\n\t/**\n\t * @param value Constant exponent value to use\n\t */\n\tconstructor(value?: number);\n\tconstructor(options?: Partial<PowOptions>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Pow.getDefaults(), arguments, [\"value\"])));\n\t\tconst options = optionsFromArguments(Pow.getDefaults(), arguments, [\"value\"]);\n\n\t\tthis._exponentScaler = this.input = this.output = new WaveShaper({\n\t\t\tcontext: this.context,\n\t\t\tmapping: this._expFunc(options.value),\n\t\t\tlength: 8192,\n\t\t});\n\n\t\tthis._exponent = options.value;\n\t}\n\n\tstatic getDefaults(): PowOptions {\n\t\treturn Object.assign(SignalOperator.getDefaults(), {\n\t\t\tvalue: 1,\n\t\t});\n\t}\n\n\t/**\n\t * the function which maps the waveshaper\n\t * @param exponent exponent value\n\t */\n\tprivate _expFunc(exponent: number): WaveShaperMappingFn {\n\t\treturn (val: number) => {\n\t\t\treturn Math.pow(Math.abs(val), exponent);\n\t\t};\n\t}\n\n\t/**\n\t * The value of the exponent.\n\t */\n\tget value(): number {\n\t\treturn this._exponent;\n\t}\n\tset value(exponent: number) {\n\t\tthis._exponent = exponent;\n\t\tthis._exponentScaler.setMap(this._expFunc(this._exponent));\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._exponentScaler.dispose();\n\t\treturn this;\n\t}\n}\n","import { Scale, ScaleOptions } from \"./Scale\";\nimport { Positive } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Pow } from \"./Pow\";\n\nexport interface ScaleExpOptions extends ScaleOptions {\n\texponent: Positive;\n}\n\n/**\n * Performs an exponential scaling on an input signal.\n * Scales a NormalRange value [0,1] exponentially\n * to the output range of outputMin to outputMax.\n * @example\n * import { ScaleExp, Signal } from \"tone\";\n * const scaleExp = new ScaleExp(0, 100, 2);\n * const signal = new Signal(0.5).connect(scaleExp);\n */\nexport class ScaleExp extends Scale<ScaleExpOptions> {\n\n\treadonly name: string = \"ScaleExp\";\n\n\t/**\n\t * The exponent scaler\n\t */\n\tprivate _exp: Pow;\n\n\t/**\n\t * @param min The output value when the input is 0.\n\t * @param max The output value when the input is 1.\n\t * @param exponent The exponent which scales the incoming signal.\n\t */\n\tconstructor(min?: number, max?: number, exponent?: number);\n\tconstructor(options?: Partial<ScaleExpOptions>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(ScaleExp.getDefaults(), arguments, [\"min\", \"max\", \"exponent\"])));\n\t\tconst options = optionsFromArguments(ScaleExp.getDefaults(), arguments, [\"min\", \"max\", \"exponent\"]);\n\n\t\tthis.input = this._exp = new Pow({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.exponent,\n\t\t});\n\t\tthis._exp.connect(this._mult);\n\t}\n\n\tstatic getDefaults(): ScaleExpOptions {\n\t\treturn Object.assign(Scale.getDefaults(), {\n\t\t\texponent: 1,\n\t\t});\n\t}\n\n\t/**\n\t * Instead of interpolating linearly between the [[min]] and\n\t * [[max]] values, setting the exponent will interpolate between\n\t * the two values with an exponential curve.\n\t */\n\tget exponent(): Positive {\n\t\treturn this._exp.value;\n\t}\n\tset exponent(exp) {\n\t\tthis._exp.value = exp;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._exp.dispose();\n\t\treturn this;\n\t}\n}\n","import { Signal, SignalOptions } from \"./Signal\";\nimport { NormalRange, Seconds, Time, TransportTime, UnitMap, UnitName } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { TransportTimeClass } from \"../core/type/TransportTime\";\nimport { ToneConstantSource } from \"./ToneConstantSource\";\nimport { OutputNode } from \"../core/context/ToneAudioNode\";\n\n/**\n * Adds the ability to synchronize the signal to the [[Transport]]\n */\nexport class SyncedSignal<TypeName extends UnitName = \"number\"> extends Signal<TypeName> {\n\n\treadonly name: string = \"SyncedSignal\";\n\t\n\t/**\n\t * Don't override when something is connected to the input\n\t */\n\treadonly override = false;\n\n\treadonly output: OutputNode;\n\n\t/**\n\t * Keep track of the last value as an optimization.\n\t */\n\tprivate _lastVal: UnitMap[TypeName];\n\n\t/**\n\t * The ID returned from scheduleRepeat\n\t */\n\tprivate _synced: number;\n\n\t/**\n\t * Remember the callback value\n\t */\n\tprivate _syncedCallback: () => void;\n\n\t/**\n\t * @param value Initial value of the signal\n\t * @param units The unit name, e.g. \"frequency\"\n\t */\n\tconstructor(value?: UnitMap[TypeName], units?: TypeName);\n\tconstructor(options?: Partial<SignalOptions<TypeName>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]));\n\t\tconst options = optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]) as SignalOptions<TypeName>;\n\n\t\tthis._lastVal = options.value;\n\t\tthis._synced = this.context.transport.scheduleRepeat(this._onTick.bind(this), \"1i\");\n\n\t\tthis._syncedCallback = this._anchorValue.bind(this);\n\t\tthis.context.transport.on(\"start\", this._syncedCallback);\n\t\tthis.context.transport.on(\"pause\", this._syncedCallback);\n\t\tthis.context.transport.on(\"stop\", this._syncedCallback);\n\n\t\t// disconnect the constant source from the output and replace it with another one\n\t\tthis._constantSource.disconnect();\n\t\tthis._constantSource.stop(0);\n\n\t\t// create a new one\n\t\tthis._constantSource = this.output = new ToneConstantSource<TypeName>({ \n\t\t\tcontext: this.context,\n\t\t\toffset: options.value,\n\t\t\tunits: options.units,\n\t\t}).start(0);\n\t\tthis.setValueAtTime(options.value, 0);\n\t}\n\n\t/**\n\t * Callback which is invoked every tick.\n\t */\n\tprivate _onTick(time: Seconds): void {\n\t\tconst val = super.getValueAtTime(this.context.transport.seconds);\n\t\t// approximate ramp curves with linear ramps\n\t\tif (this._lastVal !== val) {\n\t\t\tthis._lastVal = val;\n\t\t\tthis._constantSource.offset.setValueAtTime(val, time);\n\t\t}\n\t}\n\n\t/**\n\t * Anchor the value at the start and stop of the Transport\n\t */\n\tprivate _anchorValue(time: Seconds): void {\n\t\tconst val = super.getValueAtTime(this.context.transport.seconds);\n\t\tthis._lastVal = val;\n\t\tthis._constantSource.offset.cancelAndHoldAtTime(time);\n\t\tthis._constantSource.offset.setValueAtTime(val, time);\n\t}\n\n\tgetValueAtTime(time: TransportTime): UnitMap[TypeName] {\n\t\tconst computedTime = new TransportTimeClass(this.context, time).toSeconds();\n\t\treturn super.getValueAtTime(computedTime);\n\t}\n\t\n\tsetValueAtTime(value: UnitMap[TypeName], time: TransportTime) {\n\t\tconst computedTime = new TransportTimeClass(this.context, time).toSeconds();\n\t\tsuper.setValueAtTime(value, computedTime);\n\t\treturn this;\n\t}\n\n\tlinearRampToValueAtTime(value: UnitMap[TypeName], time: TransportTime) {\n\t\tconst computedTime = new TransportTimeClass(this.context, time).toSeconds();\n\t\tsuper.linearRampToValueAtTime(value, computedTime);\n\t\treturn this;\n\t}\n\n\texponentialRampToValueAtTime(value: UnitMap[TypeName], time: TransportTime) {\n\t\tconst computedTime = new TransportTimeClass(this.context, time).toSeconds();\n\t\tsuper.exponentialRampToValueAtTime(value, computedTime);\n\t\treturn this;\n\t}\n\n\tsetTargetAtTime(value, startTime: TransportTime, timeConstant: number): this {\n\t\tconst computedTime = new TransportTimeClass(this.context, startTime).toSeconds();\n\t\tsuper.setTargetAtTime(value, computedTime, timeConstant);\n\t\treturn this;\n\t}\n\n\tcancelScheduledValues(startTime: TransportTime): this {\n\t\tconst computedTime = new TransportTimeClass(this.context, startTime).toSeconds();\n\t\tsuper.cancelScheduledValues(computedTime);\n\t\treturn this;\n\t}\n\n\tsetValueCurveAtTime(values: UnitMap[TypeName][], startTime: TransportTime, duration: Time, scaling: NormalRange): this {\n\t\tconst computedTime = new TransportTimeClass(this.context, startTime).toSeconds();\n\t\tduration = this.toSeconds(duration);\n\t\tsuper.setValueCurveAtTime(values, computedTime, duration, scaling);\n\t\treturn this;\n\t}\n\n\tcancelAndHoldAtTime(time: TransportTime): this {\n\t\tconst computedTime = new TransportTimeClass(this.context, time).toSeconds();\n\t\tsuper.cancelAndHoldAtTime(computedTime);\n\t\treturn this;\n\t}\n\t\n\tsetRampPoint(time: TransportTime): this {\n\t\tconst computedTime = new TransportTimeClass(this.context, time).toSeconds();\n\t\tsuper.setRampPoint(computedTime);\n\t\treturn this;\n\t}\n\t\n\texponentialRampTo(value: UnitMap[TypeName], rampTime: Time, startTime?: TransportTime): this {\n\t\tconst computedTime = new TransportTimeClass(this.context, startTime).toSeconds();\n\t\tsuper.exponentialRampTo(value, rampTime, computedTime);\n\t\treturn this;\n\t}\n\t\n\tlinearRampTo(value: UnitMap[TypeName], rampTime: Time, startTime?: TransportTime): this {\n\t\tconst computedTime = new TransportTimeClass(this.context, startTime).toSeconds();\n\t\tsuper.linearRampTo(value, rampTime, computedTime);\n\t\treturn this;\n\t}\n\n\ttargetRampTo(value: UnitMap[TypeName], rampTime: Time, startTime?: TransportTime): this {\n\t\tconst computedTime = new TransportTimeClass(this.context, startTime).toSeconds();\n\t\tsuper.targetRampTo(value, rampTime, computedTime);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.context.transport.clear(this._synced);\n\t\tthis.context.transport.off(\"start\", this._syncedCallback);\n\t\tthis.context.transport.off(\"pause\", this._syncedCallback);\n\t\tthis.context.transport.off(\"stop\", this._syncedCallback);\n\t\tthis._constantSource.dispose();\n\t\treturn this;\n\t}\n}\n","import { InputNode, OutputNode } from \"../../core/context/ToneAudioNode\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { NormalRange, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { isArray, isObject, isString } from \"../../core/util/TypeCheck\";\nimport { connectSignal, Signal } from \"../../signal/Signal\";\nimport { OfflineContext } from \"../../core/context/OfflineContext\";\nimport { assert } from \"../../core/util/Debug\";\nimport { range, timeRange } from \"../../core/util/Decorator\";\n\ntype BasicEnvelopeCurve = \"linear\" | \"exponential\";\ntype InternalEnvelopeCurve = BasicEnvelopeCurve | number[];\nexport type EnvelopeCurve = EnvelopeCurveName | number[];\n\nexport interface EnvelopeOptions extends ToneAudioNodeOptions {\n\tattack: Time;\n\tdecay: Time;\n\tsustain: NormalRange;\n\trelease: Time;\n\tattackCurve: EnvelopeCurve;\n\treleaseCurve: EnvelopeCurve;\n\tdecayCurve: BasicEnvelopeCurve;\n}\n\n/**\n * Envelope is an [ADSR](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope)\n * envelope generator. Envelope outputs a signal which\n * can be connected to an AudioParam or Tone.Signal.\n * ```\n *           /\\\n *          /  \\\n *         /    \\\n *        /      \\\n *       /        \\___________\n *      /                     \\\n *     /                       \\\n *    /                         \\\n *   /                           \\\n * ```\n *\n * @example\n * import { Envelope, Gain } from \"tone\";\n * // an amplitude envelope\n * const gainNode = new Gain();\n * const env = new Envelope({\n * \tattack: 0.1,\n * \tdecay: 0.2,\n * \tsustain: 1,\n * \trelease: 0.8,\n * });\n * env.connect(gainNode.gain);\n * @category Component\n */\nexport class Envelope extends ToneAudioNode<EnvelopeOptions> {\n\n\treadonly name: string = \"Envelope\";\n\t\n\t/**\n\t * When triggerAttack is called, the attack time is the amount of\n\t * time it takes for the envelope to reach it's maximum value.\n\t * ```\n\t *           /\\\n\t *          /X \\\n\t *         /XX  \\\n\t *        /XXX   \\\n\t *       /XXXX    \\___________\n\t *      /XXXXX                \\\n\t *     /XXXXXX                 \\\n\t *    /XXXXXXX                  \\\n\t *   /XXXXXXXX                   \\\n\t * ```\n\t * @min 0\n\t * @max 2\n\t */\n\t@timeRange(0)\n\tattack: Time;\n\n\t/**\n\t * After the attack portion of the envelope, the value will fall\n\t * over the duration of the decay time to it's sustain value.\n\t * ```\n\t *           /\\\n\t *          / X\\\n\t *         /  XX\\\n\t *        /   XXX\\\n\t *       /    XXXX\\___________\n\t *      /     XXXXX           \\\n\t *     /      XXXXX            \\\n\t *    /       XXXXX             \\\n\t *   /        XXXXX              \\\n\t * ```\n\t * @min 0\n\t * @max 2\n\t */\n\t@timeRange(0)\n\tdecay: Time;\n\n\t/**\n\t * The sustain value is the value\n\t * which the envelope rests at after triggerAttack is\n\t * called, but before triggerRelease is invoked.\n\t * ```\n\t *           /\\\n\t *          /  \\\n\t *         /    \\\n\t *        /      \\\n\t *       /        \\___________\n\t *      /          XXXXXXXXXXX\\\n\t *     /           XXXXXXXXXXX \\\n\t *    /            XXXXXXXXXXX  \\\n\t *   /             XXXXXXXXXXX   \\\n\t * ```\n\t */\n\t@range(0, 1)\n\tsustain: NormalRange;\n\n\t/**\n\t * After triggerRelease is called, the envelope's\n\t * value will fall to it's miminum value over the\n\t * duration of the release time.\n\t * ```\n\t *           /\\\n\t *          /  \\\n\t *         /    \\\n\t *        /      \\\n\t *       /        \\___________\n\t *      /                    X\\\n\t *     /                     XX\\\n\t *    /                      XXX\\\n\t *   /                       XXXX\\\n\t * ```\n\t * @min 0\n\t * @max 5\n\t */\n\t@timeRange(0)\n\trelease: Time;\n\n\t/**\n\t * The automation curve type for the attack\n\t */\n\tprivate _attackCurve!: InternalEnvelopeCurve;\n\n\t/**\n\t * The automation curve type for the decay\n\t */\n\tprivate _decayCurve!: BasicEnvelopeCurve;\n\n\t/**\n\t * The automation curve type for the release\n\t */\n\tprivate _releaseCurve!: InternalEnvelopeCurve;\n\n\t/**\n\t * the signal which is output.\n\t */\n\tprotected _sig: Signal<\"normalRange\"> = new Signal({\n\t\tcontext: this.context,\n\t\tvalue: 0,\n\t});\n\n\t/**\n\t * The output signal of the envelope\n\t */\n\toutput: OutputNode = this._sig;\n\n\t/**\n\t * Envelope has no input\n\t */\n\tinput: InputNode | undefined = undefined;\n\n\t/**\n\t * @param attack The amount of time it takes for the envelope to go from\n\t *                        0 to it's maximum value.\n\t * @param decay\tThe period of time after the attack that it takes for the envelope\n\t *                      \tto fall to the sustain value. Value must be greater than 0.\n\t * @param sustain\tThe percent of the maximum value that the envelope rests at until\n\t *                               \tthe release is triggered.\n\t * @param release\tThe amount of time after the release is triggered it takes to reach 0.\n\t *                        \tValue must be greater than 0.\n\t */\n\tconstructor(attack?: Time, decay?: Time, sustain?: NormalRange, release?: Time);\n\tconstructor(options?: Partial<EnvelopeOptions>)\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Envelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]));\n\t\tconst options = optionsFromArguments(Envelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]);\n\n\t\tthis.attack = options.attack;\n\t\tthis.decay = options.decay;\n\t\tthis.sustain = options.sustain;\n\t\tthis.release = options.release;\n\t\tthis.attackCurve = options.attackCurve;\n\t\tthis.releaseCurve = options.releaseCurve;\n\t\tthis.decayCurve = options.decayCurve;\n\t}\n\n\tstatic getDefaults(): EnvelopeOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tattack: 0.01,\n\t\t\tattackCurve: \"linear\" as EnvelopeCurveName,\n\t\t\tdecay: 0.1,\n\t\t\tdecayCurve: \"exponential\" as BasicEnvelopeCurve,\n\t\t\trelease: 1,\n\t\t\treleaseCurve: \"exponential\" as EnvelopeCurveName,\n\t\t\tsustain: 0.5,\n\t\t});\n\t}\n\n\t/**\n\t * Read the current value of the envelope. Useful for\n\t * synchronizing visual output to the envelope.\n\t */\n\tget value(): NormalRange {\n\t\treturn this.getValueAtTime(this.now());\n\t}\n\n\t/**\n\t * Get the curve\n\t * @param  curve\n\t * @param  direction  In/Out\n\t * @return The curve name\n\t */\n\tprivate _getCurve(curve: InternalEnvelopeCurve, direction: EnvelopeDirection): EnvelopeCurve {\n\t\tif (isString(curve)) {\n\t\t\treturn curve;\n\t\t} else {\n\t\t\t// look up the name in the curves array\n\t\t\tlet curveName: EnvelopeCurveName;\n\t\t\tfor (curveName in EnvelopeCurves) {\n\t\t\t\tif (EnvelopeCurves[curveName][direction] === curve) {\n\t\t\t\t\treturn curveName;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// return the custom curve\n\t\t\treturn curve;\n\t\t}\n\t}\n\n\t/**\n\t * Assign a the curve to the given name using the direction\n\t * @param  name\n\t * @param  direction In/Out\n\t * @param  curve\n\t */\n\tprivate _setCurve(\n\t\tname: \"_attackCurve\" | \"_decayCurve\" | \"_releaseCurve\",\n\t\tdirection: EnvelopeDirection,\n\t\tcurve: EnvelopeCurve,\n\t): void {\n\t\t// check if it's a valid type\n\t\tif (isString(curve) && Reflect.has(EnvelopeCurves, curve)) {\n\t\t\tconst curveDef = EnvelopeCurves[curve];\n\t\t\tif (isObject(curveDef)) {\n\t\t\t\tif (name !== \"_decayCurve\") {\n\t\t\t\t\tthis[name] = curveDef[direction];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis[name] = curveDef;\n\t\t\t}\n\t\t} else if (isArray(curve) && name !== \"_decayCurve\") {\n\t\t\tthis[name] = curve;\n\t\t} else {\n\t\t\tthrow new Error(\"Envelope: invalid curve: \" + curve);\n\t\t}\n\t}\n\n\t/**\n\t * The shape of the attack.\n\t * Can be any of these strings:\n\t * * \"linear\"\n\t * * \"exponential\"\n\t * * \"sine\"\n\t * * \"cosine\"\n\t * * \"bounce\"\n\t * * \"ripple\"\n\t * * \"step\"\n\t *\n\t * Can also be an array which describes the curve. Values\n\t * in the array are evenly subdivided and linearly\n\t * interpolated over the duration of the attack.\n\t * @example\n\t * import { Envelope } from \"tone\";\n\t * const env = new Envelope();\n\t * env.attackCurve = \"linear\";\n\t * @example\n\t * import { Envelope } from \"tone\";\n\t * const env = new Envelope();\n\t * // can also be an array\n\t * env.attackCurve = [0, 0.2, 0.3, 0.4, 1];\n\t */\n\tget attackCurve(): EnvelopeCurve {\n\t\treturn this._getCurve(this._attackCurve, \"In\");\n\t}\n\tset attackCurve(curve) {\n\t\tthis._setCurve(\"_attackCurve\", \"In\", curve);\n\t}\n\n\t/**\n\t * The shape of the release. See the attack curve types.\n\t * @example\n\t * import { Envelope } from \"tone\";\n\t * const env = new Envelope();\n\t * env.releaseCurve = \"linear\";\n\t */\n\tget releaseCurve(): EnvelopeCurve {\n\t\treturn this._getCurve(this._releaseCurve, \"Out\");\n\t}\n\tset releaseCurve(curve) {\n\t\tthis._setCurve(\"_releaseCurve\", \"Out\", curve);\n\t}\n\n\t/**\n\t * The shape of the decay either \"linear\" or \"exponential\"\n\t * @example\n\t * import { Envelope } from \"tone\";\n\t * const env = new Envelope();\n\t * env.decayCurve = \"linear\";\n\t */\n\tget decayCurve(): BasicEnvelopeCurve {\n\t\treturn this._decayCurve;\n\t}\n\tset decayCurve(curve) {\n\t\tassert([\"linear\", \"exponential\"].some(c => c === curve), `Invalid envelope curve: ${curve}`);\n\t\tthis._decayCurve = curve;\n\t}\n\n\t/**\n\t * Trigger the attack/decay portion of the ADSR envelope.\n\t * @param  time When the attack should start.\n\t * @param velocity The velocity of the envelope scales the vales.\n\t *                             number between 0-1\n\t * @example\n\t * import { AmplitudeEnvelope, Oscillator } from \"tone\";\n\t * const env = new AmplitudeEnvelope().toDestination();\n\t * const osc = new Oscillator().connect(env).start();\n\t * // trigger the attack 0.5 seconds from now with a velocity of 0.2\n\t * env.triggerAttack(\"+0.5\", 0.2);\n\t */\n\ttriggerAttack(time?: Time, velocity: NormalRange = 1): this {\n\t\tthis.log(\"triggerAttack\", time, velocity);\n\t\ttime = this.toSeconds(time);\n\t\tconst originalAttack = this.toSeconds(this.attack);\n\t\tlet attack = originalAttack;\n\t\tconst decay = this.toSeconds(this.decay);\n\t\t// check if it's not a complete attack\n\t\tconst currentValue = this.getValueAtTime(time);\n\t\tif (currentValue > 0) {\n\t\t\t// subtract the current value from the attack time\n\t\t\tconst attackRate = 1 / attack;\n\t\t\tconst remainingDistance = 1 - currentValue;\n\t\t\t// the attack is now the remaining time\n\t\t\tattack = remainingDistance / attackRate;\n\t\t}\n\t\t// attack\n\t\tif (attack < this.sampleTime) {\n\t\t\tthis._sig.cancelScheduledValues(time);\n\t\t\t// case where the attack time is 0 should set instantly\n\t\t\tthis._sig.setValueAtTime(velocity, time);\n\t\t} else if (this._attackCurve === \"linear\") {\n\t\t\tthis._sig.linearRampTo(velocity, attack, time);\n\t\t} else if (this._attackCurve === \"exponential\") {\n\t\t\tthis._sig.targetRampTo(velocity, attack, time);\n\t\t} else {\n\t\t\tthis._sig.cancelAndHoldAtTime(time);\n\t\t\tlet curve = this._attackCurve;\n\t\t\t// find the starting position in the curve\n\t\t\tfor (let i = 1; i < curve.length; i++) {\n\t\t\t\t// the starting index is between the two values\n\t\t\t\tif (curve[i - 1] <= currentValue && currentValue <= curve[i]) {\n\t\t\t\t\tcurve = this._attackCurve.slice(i);\n\t\t\t\t\t// the first index is the current value\n\t\t\t\t\tcurve[0] = currentValue;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._sig.setValueCurveAtTime(curve, time, attack, velocity);\n\t\t}\n\t\t// decay\n\t\tif (decay && this.sustain < 1) {\n\t\t\tconst decayValue = velocity * this.sustain;\n\t\t\tconst decayStart = time + attack;\n\t\t\tthis.log(\"decay\", decayStart);\n\t\t\tif (this._decayCurve === \"linear\") {\n\t\t\t\tthis._sig.linearRampToValueAtTime(decayValue, decay + decayStart);\n\t\t\t} else {\n\t\t\t\tthis._sig.exponentialApproachValueAtTime(decayValue, decayStart, decay);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Triggers the release of the envelope.\n\t * @param  time When the release portion of the envelope should start.\n\t * @example\n\t * import { AmplitudeEnvelope, Oscillator } from \"tone\";\n\t * const env = new AmplitudeEnvelope().toDestination();\n\t * const osc = new Oscillator().connect(env).start();\n\t * env.triggerAttack();\n\t * // trigger the release half a second after the attack\n\t * env.triggerRelease(\"+0.5\");\n\t */\n\ttriggerRelease(time?: Time): this {\n\t\tthis.log(\"triggerRelease\", time);\n\t\ttime = this.toSeconds(time);\n\t\tconst currentValue = this.getValueAtTime(time);\n\t\tif (currentValue > 0) {\n\t\t\tconst release = this.toSeconds(this.release);\n\t\t\tif (release < this.sampleTime) {\n\t\t\t\tthis._sig.setValueAtTime(0, time);\n\t\t\t} else if (this._releaseCurve === \"linear\") {\n\t\t\t\tthis._sig.linearRampTo(0, release, time);\n\t\t\t} else if (this._releaseCurve === \"exponential\") {\n\t\t\t\tthis._sig.targetRampTo(0, release, time);\n\t\t\t} else {\n\t\t\t\tassert(isArray(this._releaseCurve), \"releaseCurve must be either 'linear', 'exponential' or an array\");\n\t\t\t\tthis._sig.cancelAndHoldAtTime(time);\n\t\t\t\tthis._sig.setValueCurveAtTime(this._releaseCurve, time, release, currentValue);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the scheduled value at the given time. This will\n\t * return the unconverted (raw) value.\n\t */\n\tgetValueAtTime(time: Time): NormalRange {\n\t\treturn this._sig.getValueAtTime(time);\n\t}\n\n\t/**\n\t * triggerAttackRelease is shorthand for triggerAttack, then waiting\n\t * some duration, then triggerRelease.\n\t * @param duration The duration of the sustain.\n\t * @param time When the attack should be triggered.\n\t * @param velocity The velocity of the envelope.\n\t * @example\n\t * import { AmplitudeEnvelope, Oscillator } from \"tone\";\n\t * const env = new AmplitudeEnvelope().toDestination();\n\t * const osc = new Oscillator().connect(env).start();\n\t * // trigger the release 0.5 seconds after the attack\n\t * env.triggerAttackRelease(0.5);\n\t */\n\ttriggerAttackRelease(duration: Time, time?: Time, velocity: NormalRange = 1): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis.triggerAttack(time, velocity);\n\t\tthis.triggerRelease(time + this.toSeconds(duration));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Cancels all scheduled envelope changes after the given time.\n\t */\n\tcancel(after?: Time): this {\n\t\tthis._sig.cancelScheduledValues(this.toSeconds(after));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Connect the envelope to a destination node.\n\t */\n\tconnect(destination: InputNode, outputNumber = 0, inputNumber = 0): this {\n\t\tconnectSignal(this, destination, outputNumber, inputNumber);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Render the envelope curve to an array of the given length. \n\t * Good for visualizing the envelope curve\n\t */\n\tasync asArray(length = 1024): Promise<Float32Array> {\n\t\tconst duration = length / this.context.sampleRate;\n\t\tconst context = new OfflineContext(1, duration, this.context.sampleRate);\n\t\t// normalize the ADSR for the given duration with 20% sustain time\n\t\tconst attackPortion = this.toSeconds(this.attack) + this.toSeconds(this.decay);\n\t\tconst envelopeDuration = attackPortion + this.toSeconds(this.release);\n\t\tconst sustainTime = envelopeDuration * 0.1;\n\t\tconst totalDuration = envelopeDuration + sustainTime;\n\t\t// @ts-ignore\n\t\tconst clone = new this.constructor(Object.assign(this.get(), { \n\t\t\tattack: duration * this.toSeconds(this.attack) / totalDuration,\n\t\t\tdecay: duration * this.toSeconds(this.decay) / totalDuration,\n\t\t\trelease: duration * this.toSeconds(this.release) / totalDuration,\n\t\t\tcontext\n\t\t})) as Envelope;\n\t\tclone._sig.toDestination();\n\t\tclone.triggerAttackRelease(duration * (attackPortion + sustainTime) / totalDuration, 0);\n\t\tconst buffer = await context.render();\n\t\treturn buffer.getChannelData(0);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._sig.dispose();\n\t\treturn this;\n\t}\n}\n\ninterface EnvelopeCurveObject {\n\tIn: number[];\n\tOut: number[];\n}\n\ntype EnvelopeDirection = keyof EnvelopeCurveObject;\n\ninterface EnvelopeCurveMap {\n\tlinear: \"linear\";\n\texponential: \"exponential\";\n\tbounce: EnvelopeCurveObject;\n\tcosine: EnvelopeCurveObject;\n\tsine: EnvelopeCurveObject;\n\tripple: EnvelopeCurveObject;\n\tstep: EnvelopeCurveObject;\n}\n\ntype EnvelopeCurveName = keyof EnvelopeCurveMap;\n\n/**\n * Generate some complex envelope curves.\n */\nconst EnvelopeCurves: EnvelopeCurveMap = (() => {\n\n\tconst curveLen = 128;\n\n\tlet i: number;\n\tlet k: number;\n\n\t// cosine curve\n\tconst cosineCurve: number[] = [];\n\tfor (i = 0; i < curveLen; i++) {\n\t\tcosineCurve[i] = Math.sin((i / (curveLen - 1)) * (Math.PI / 2));\n\t}\n\n\t// ripple curve\n\tconst rippleCurve: number[] = [];\n\tconst rippleCurveFreq = 6.4;\n\tfor (i = 0; i < curveLen - 1; i++) {\n\t\tk = (i / (curveLen - 1));\n\t\tconst sineWave = Math.sin(k * (Math.PI * 2) * rippleCurveFreq - Math.PI / 2) + 1;\n\t\trippleCurve[i] = sineWave / 10 + k * 0.83;\n\t}\n\trippleCurve[curveLen - 1] = 1;\n\n\t// stairs curve\n\tconst stairsCurve: number[] = [];\n\tconst steps = 5;\n\tfor (i = 0; i < curveLen; i++) {\n\t\tstairsCurve[i] = Math.ceil((i / (curveLen - 1)) * steps) / steps;\n\t}\n\n\t// in-out easing curve\n\tconst sineCurve: number[] = [];\n\tfor (i = 0; i < curveLen; i++) {\n\t\tk = i / (curveLen - 1);\n\t\tsineCurve[i] = 0.5 * (1 - Math.cos(Math.PI * k));\n\t}\n\n\t// a bounce curve\n\tconst bounceCurve: number[] = [];\n\tfor (i = 0; i < curveLen; i++) {\n\t\tk = i / (curveLen - 1);\n\t\tconst freq = Math.pow(k, 3) * 4 + 0.2;\n\t\tconst val = Math.cos(freq * Math.PI * 2 * k);\n\t\tbounceCurve[i] = Math.abs(val * (1 - k));\n\t}\n\n\t/**\n\t * Invert a value curve to make it work for the release\n\t */\n\tfunction invertCurve(curve: number[]): number[] {\n\t\tconst out = new Array(curve.length);\n\t\tfor (let j = 0; j < curve.length; j++) {\n\t\t\tout[j] = 1 - curve[j];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t * reverse the curve\n\t */\n\tfunction reverseCurve(curve: number[]): number[] {\n\t\treturn curve.slice(0).reverse();\n\t}\n\n\t/**\n\t * attack and release curve arrays\n\t */\n\treturn {\n\t\tbounce: {\n\t\t\tIn: invertCurve(bounceCurve),\n\t\t\tOut: bounceCurve,\n\t\t},\n\t\tcosine: {\n\t\t\tIn: cosineCurve,\n\t\t\tOut: reverseCurve(cosineCurve),\n\t\t},\n\t\texponential: \"exponential\" as \"exponential\",\n\t\tlinear: \"linear\" as \"linear\",\n\t\tripple: {\n\t\t\tIn: rippleCurve,\n\t\t\tOut: invertCurve(rippleCurve),\n\t\t},\n\t\tsine: {\n\t\t\tIn: sineCurve,\n\t\t\tOut: invertCurve(sineCurve),\n\t\t},\n\t\tstep: {\n\t\t\tIn: stairsCurve,\n\t\t\tOut: invertCurve(stairsCurve),\n\t\t},\n\t};\n})();\n","import { Volume } from \"../component/channel/Volume\";\nimport { Param } from \"../core/context/Param\";\nimport { OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { Decibels, Frequency, NormalRange, Time } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\n\nexport interface InstrumentOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n}\n\n/**\n * Base-class for all instruments\n */\nexport abstract class Instrument<Options extends InstrumentOptions> extends ToneAudioNode<Options> {\n\n\t/**\n\t * The output and volume triming node\n\t */\n\tprivate _volume: Volume;\n\toutput: OutputNode;\n\n\t/**\n\t * The instrument only has an output\n\t */\n\tinput: undefined;\n\n\t/**\n\t * The volume of the output in decibels.\n\t * @example\n\t * import { AMSynth } from \"tone\";\n\t * const amSynth = new AMSynth().toDestination();\n\t * amSynth.volume.value = -6;\n\t * amSynth.triggerAttackRelease(\"G#3\", 0.2);\n\t */\n\tvolume: Param<\"decibels\">;\n\n\t/**\n\t * Keep track of all events scheduled to the transport\n\t * when the instrument is 'synced'\n\t */\n\tprivate _scheduledEvents: number[] = [];\n\n\t/**\n\t * If the instrument is currently synced\n\t */\n\tprivate _synced = false;\n\n\tconstructor(options?: Partial<InstrumentOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Instrument.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Instrument.getDefaults(), arguments);\n\n\t\tthis._volume = this.output = new Volume({\n\t\t\tcontext: this.context,\n\t\t\tvolume: options.volume,\n\t\t});\n\t\tthis.volume = this._volume.volume;\n\t\treadOnly(this, \"volume\");\n\t}\n\n\tstatic getDefaults(): InstrumentOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Sync the instrument to the Transport. All subsequent calls of\n\t * [[triggerAttack]] and [[triggerRelease]] will be scheduled along the transport.\n\t * @example\n\t * import { FMSynth, Transport } from \"tone\";\n\t * const fmSynth = new FMSynth().toDestination();\n\t * fmSynth.volume.value = -6;\n\t * fmSynth.sync();\n\t * // schedule 3 notes when the transport first starts\n\t * fmSynth.triggerAttackRelease(\"C4\", \"8n\", 0);\n\t * fmSynth.triggerAttackRelease(\"E4\", \"8n\", \"8n\");\n\t * fmSynth.triggerAttackRelease(\"G4\", \"8n\", \"4n\");\n\t * // start the transport to hear the notes\n\t * Transport.start();\n\t */\n\tsync(): this {\n\t\tif (!this._synced) {\n\t\t\tthis._synced = true;\n\t\t\tthis._syncMethod(\"triggerAttack\", 1);\n\t\t\tthis._syncMethod(\"triggerRelease\", 0);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Wrap the given method so that it can be synchronized\n\t * @param method Which method to wrap and sync\n\t * @param  timePosition What position the time argument appears in\n\t */\n\tprotected _syncMethod(method: string, timePosition: number): void {\n\t\tconst originalMethod = this[\"_original_\" + method] = this[method];\n\t\tthis[method] = (...args: any[]) => {\n\t\t\tconst time = args[timePosition];\n\t\t\tconst id = this.context.transport.schedule((t) => {\n\t\t\t\targs[timePosition] = t;\n\t\t\t\toriginalMethod.apply(this, args);\n\t\t\t}, time);\n\t\t\tthis._scheduledEvents.push(id);\n\t\t};\n\t}\n\n\t/**\n\t * Unsync the instrument from the Transport\n\t */\n\tunsync(): this {\n\t\tthis._scheduledEvents.forEach(id => this.context.transport.clear(id));\n\t\tthis._scheduledEvents = [];\n\t\tif (this._synced) {\n\t\t\tthis._synced = false;\n\t\t\tthis.triggerAttack = this._original_triggerAttack;\n\t\t\tthis.triggerRelease = this._original_triggerRelease;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Trigger the attack and then the release after the duration.\n\t * @param  note     The note to trigger.\n\t * @param  duration How long the note should be held for before\n\t *                         triggering the release. This value must be greater than 0.\n\t * @param time  When the note should be triggered.\n\t * @param  velocity The velocity the note should be triggered at.\n\t * @example\n\t * import { Synth } from \"tone\";\n\t * const synth = new Synth().toDestination();\n\t * // trigger \"C4\" for the duration of an 8th note\n\t * synth.triggerAttackRelease(\"C4\", \"8n\");\n\t */\n\ttriggerAttackRelease(note: Frequency, duration: Time, time?: Time, velocity?: NormalRange): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst computedDuration = this.toSeconds(duration);\n\t\tthis.triggerAttack(note, computedTime, velocity);\n\t\tthis.triggerRelease(computedTime + computedDuration);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Start the instrument's note.\n\t * @param note the note to trigger\n\t * @param time the time to trigger the ntoe\n\t * @param velocity the velocity to trigger the note (betwee 0-1)\n\t */\n\tabstract triggerAttack(note: Frequency, time?: Time, velocity?: NormalRange): this;\n\tprivate _original_triggerAttack = this.triggerAttack;\n\n\t/**\n\t * Trigger the release phase of the current note.\n\t * @param time when to trigger the release\n\t */\n\tabstract triggerRelease(...args: any[]): this;\n\tprivate _original_triggerRelease = this.triggerRelease;\n\n\t/**\n\t * clean up\n\t * @returns {Instrument} this\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._volume.dispose();\n\t\tthis.unsync();\n\t\tthis._scheduledEvents = [];\n\t\treturn this;\n\t}\n}\n","import { FrequencyClass } from \"../core/type/Frequency\";\nimport { Cents, Frequency, NormalRange, Seconds, Time } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { Instrument, InstrumentOptions } from \"../instrument/Instrument\";\nimport { Signal } from \"../signal/Signal\";\nimport { timeRange } from \"../core/util/Decorator\";\n\ntype onSilenceCallback = (instrument: Monophonic<any>) => void;\n\nexport interface MonophonicOptions extends InstrumentOptions {\n\tportamento: Seconds;\n\tonsilence: onSilenceCallback;\n\tdetune: Cents;\n}\n\n/**\n * Abstract base class for other monophonic instruments to extend.\n */\nexport abstract class Monophonic<Options extends MonophonicOptions> extends Instrument<Options> {\n\n\t/**\n\t * The glide time between notes.\n\t */\n\t@timeRange(0)\n\tportamento: Seconds;\n\n\t/**\n\t * Invoked when the release has finished and the output is silent.\n\t */\n\tonsilence: onSilenceCallback;\n\n\t/**\n\t * The instrument's frequency signal.\n\t */\n\tabstract readonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * The instrument's detune control signal.\n\t */\n\tabstract readonly detune: Signal<\"cents\">;\n\n\tconstructor(options?: Partial<MonophonicOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Monophonic.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Monophonic.getDefaults(), arguments);\n\n\t\tthis.portamento = options.portamento;\n\t\tthis.onsilence = options.onsilence;\n\t}\n\n\tstatic getDefaults(): MonophonicOptions {\n\t\treturn Object.assign(Instrument.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tonsilence: noOp,\n\t\t\tportamento: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Trigger the attack of the note optionally with a given velocity.\n\t * @param  note The note to trigger.\n\t * @param  time When the note should start.\n\t * @param  velocity The velocity scaler determines how \"loud\" the note will be triggered.\n\t * @example\n\t * import { Synth } from \"tone\";\n\t * const synth = new Synth().toDestination();\n\t * // trigger the note a half second from now at half velocity\n\t * synth.triggerAttack(\"C4\", \"+0.5\", 0.5);\n\t */\n\ttriggerAttack(note: Frequency | FrequencyClass, time?: Time, velocity: NormalRange = 1): this {\n\t\tthis.log(\"triggerAttack\", note, time, velocity);\n\t\tconst seconds = this.toSeconds(time);\n\t\tthis._triggerEnvelopeAttack(seconds, velocity);\n\t\tthis.setNote(note, seconds);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Trigger the release portion of the envelope\n\t * @param  time If no time is given, the release happens immediatly\n\t * @example\n\t * import { Synth } from \"tone\";\n\t * const synth = new Synth().toDestination();\n\t * synth.triggerAttack(\"C4\");\n\t * // trigger the release a second from now\n\t * synth.triggerRelease(\"+1\");\n\t */\n\ttriggerRelease(time?: Time): this {\n\t\tthis.log(\"triggerRelease\", time);\n\t\tconst seconds = this.toSeconds(time);\n\t\tthis._triggerEnvelopeRelease(seconds);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Internal method which starts the envelope attack\n\t */\n\tprotected abstract _triggerEnvelopeAttack(time: Seconds, velocity: NormalRange): void;\n\n\t/**\n\t * Internal method which starts the envelope release\n\t */\n\tprotected abstract _triggerEnvelopeRelease(time: Seconds): void;\n\n\t/**\n\t * Get the level of the output at the given time. Measures\n\t * the envelope(s) value at the time.\n\t * @param time The time to query the envelope value\n\t * @return The output level between 0-1\n\t */\n\tabstract getLevelAtTime(time: Time): NormalRange;\n\n\t/**\n\t * Set the note at the given time. If no time is given, the note\n\t * will set immediately.\n\t * @param note The note to change to.\n\t * @param  time The time when the note should be set.\n\t * @example\n\t * import { Synth } from \"tone\";\n\t * const synth = new Synth().toDestination();\n\t * synth.triggerAttack(\"C4\");\n\t * // change to F#6 in one quarter note from now.\n\t * synth.setNote(\"F#6\", \"+4n\");\n\t */\n\tsetNote(note: Frequency | FrequencyClass, time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst computedFrequency = note instanceof FrequencyClass ? note.toFrequency() : note;\n\t\tif (this.portamento > 0 && this.getLevelAtTime(computedTime) > 0.05) {\n\t\t\tconst portTime = this.toSeconds(this.portamento);\n\t\t\tthis.frequency.exponentialRampTo(computedFrequency, portTime, computedTime);\n\t\t} else {\n\t\t\tthis.frequency.setValueAtTime(computedFrequency, computedTime);\n\t\t}\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { NormalRange, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Envelope, EnvelopeOptions } from \"./Envelope\";\n\n/**\n * AmplitudeEnvelope is a Tone.Envelope connected to a gain node.\n * Unlike Tone.Envelope, which outputs the envelope's value, AmplitudeEnvelope accepts\n * an audio signal as the input and will apply the envelope to the amplitude\n * of the signal.\n * Read more about ADSR Envelopes on [Wikipedia](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope).\n *\n * @example\n * import { AmplitudeEnvelope, Oscillator } from \"tone\";\n * const ampEnv = new AmplitudeEnvelope({\n * \tattack: 0.1,\n * \tdecay: 0.2,\n * \tsustain: 1.0,\n * \trelease: 0.8\n * }).toDestination();\n * // create an oscillator and connect it\n * const osc = new Oscillator().connect(ampEnv).start();\n * // trigger the envelopes attack and release \"8t\" apart\n * ampEnv.triggerAttackRelease(\"8t\");\n * @category Component\n */\nexport class AmplitudeEnvelope extends Envelope {\n\n\treadonly name: string = \"AmplitudeEnvelope\";\n\n\tprivate _gainNode: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\toutput: Gain = this._gainNode;\n\tinput: Gain = this._gainNode;\n\n\t/**\n\t * @param attack The amount of time it takes for the envelope to go from 0 to it's maximum value.\n\t * @param decay\tThe period of time after the attack that it takes for the envelope\n\t *                      \tto fall to the sustain value. Value must be greater than 0.\n\t * @param sustain\tThe percent of the maximum value that the envelope rests at until\n\t *                               \tthe release is triggered.\n\t * @param release\tThe amount of time after the release is triggered it takes to reach 0.\n\t *                        \tValue must be greater than 0.\n\t */\n\tconstructor(attack?: Time, decay?: Time, sustain?: NormalRange, release?: Time);\n\tconstructor(options?: Partial<EnvelopeOptions>)\n\tconstructor() {\n\t\tsuper(optionsFromArguments(AmplitudeEnvelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]));\n\t\tthis._sig.connect(this._gainNode.gain);\n\t\tthis.output = this._gainNode;\n\t\tthis.input = this._gainNode;\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._gainNode.dispose();\n\t\treturn this;\n\t}\n}\n","import { AmplitudeEnvelope } from \"../component/envelope/AmplitudeEnvelope\";\nimport { Envelope, EnvelopeOptions } from \"../component/envelope/Envelope\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { NormalRange, Seconds, Time } from \"../core/type/Units\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { RecursivePartial } from \"../core/util/Interface\";\nimport { Signal } from \"../signal/Signal\";\nimport { OmniOscillator } from \"../source/oscillator/OmniOscillator\";\nimport { OmniOscillatorSynthOptions } from \"../source/oscillator/OscillatorInterface\";\nimport { Source } from \"../source/Source\";\nimport { Monophonic, MonophonicOptions } from \"./Monophonic\";\n\nexport interface SynthOptions extends MonophonicOptions {\n\toscillator: OmniOscillatorSynthOptions;\n\tenvelope: Omit<EnvelopeOptions, keyof ToneAudioNodeOptions>;\n}\n\n/**\n * Synth is composed simply of a {@link OmniOscillator} routed through an {@link AmplitudeEnvelope}.\n * ```\n * +----------------+   +-------------------+\n * | OmniOscillator +>--> AmplitudeEnvelope +>--> Output\n * +----------------+   +-------------------+\n * ```\n * @example\n * import { Synth } from \"tone\";\n * const synth = new Synth().toDestination();\n * synth.triggerAttackRelease(\"C4\", \"8n\");\n * @category Instrument\n */\nexport class Synth<Options extends SynthOptions = SynthOptions> extends Monophonic<Options> {\n\n\treadonly name: string = \"Synth\";\n\n\t/**\n\t * The oscillator.\n\t */\n\treadonly oscillator: OmniOscillator<any>;\n\n\t/**\n\t * The frequency signal\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * The detune signal\n\t */\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * The envelope\n\t */\n\treadonly envelope: AmplitudeEnvelope;\n\n\t/**\n\t * @param options the options available for the synth.\n\t */\n\tconstructor(options?: RecursivePartial<SynthOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Synth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Synth.getDefaults(), arguments);\n\n\t\tthis.oscillator = new OmniOscillator(Object.assign({\n\t\t\tcontext: this.context,\n\t\t\tdetune: options.detune,\n\t\t\tonstop: () => this.onsilence(this),\n\t\t}, options.oscillator));\n\n\t\tthis.frequency = this.oscillator.frequency;\n\t\tthis.detune = this.oscillator.detune;\n\n\t\tthis.envelope = new AmplitudeEnvelope(Object.assign({\n\t\t\tcontext: this.context,\n\t\t}, options.envelope));\n\n\t\t// connect the oscillators to the output\n\t\tthis.oscillator.chain(this.envelope, this.output);\n\t\treadOnly(this, [\"oscillator\", \"frequency\", \"detune\", \"envelope\"]);\n\t}\n\n\tstatic getDefaults(): SynthOptions {\n\t\treturn Object.assign(Monophonic.getDefaults(), {\n\t\t\tenvelope: Object.assign(\n\t\t\t\tomitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())),\n\t\t\t\t{\n\t\t\t\t\tattack: 0.005,\n\t\t\t\t\tdecay: 0.1,\n\t\t\t\t\trelease: 1,\n\t\t\t\t\tsustain: 0.3,\n\t\t\t\t},\n\t\t\t),\n\t\t\toscillator: Object.assign(\n\t\t\t\tomitFromObject(OmniOscillator.getDefaults(), [...Object.keys(Source.getDefaults()), \"frequency\", \"detune\"]),\n\t\t\t\t{\n\t\t\t\t\ttype: \"triangle\",\n\t\t\t\t},\n\t\t\t),\n\t\t});\n\t}\n\n\t/**\n\t * start the attack portion of the envelope\n\t * @param time the time the attack should start\n\t * @param velocity the velocity of the note (0-1)\n\t */\n\tprotected _triggerEnvelopeAttack(time: Seconds, velocity: number): void {\n\t\t// the envelopes\n\t\tthis.envelope.triggerAttack(time, velocity);\n\t\tthis.oscillator.start(time);\n\t\t// if there is no release portion, stop the oscillator\n\t\tif (this.envelope.sustain === 0) {\n\t\t\tconst computedAttack = this.toSeconds(this.envelope.attack);\n\t\t\tconst computedDecay = this.toSeconds(this.envelope.decay);\n\t\t\tthis.oscillator.stop(time + computedAttack + computedDecay);\n\t\t}\n\t}\n\n\t/**\n\t * start the release portion of the envelope\n\t * @param time the time the release should start\n\t */\n\tprotected _triggerEnvelopeRelease(time: Seconds): void {\n\t\tthis.envelope.triggerRelease(time);\n\t\tthis.oscillator.stop(time + this.toSeconds(this.envelope.release));\n\t}\n\n\tgetLevelAtTime(time: Time): NormalRange {\n\t\ttime = this.toSeconds(time);\n\t\treturn this.envelope.getValueAtTime(time);\n\t}\n\n\t/**\n\t * clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.oscillator.dispose();\n\t\tthis.envelope.dispose();\n\t\treturn this;\n\t}\n}\n","import { Signal } from \"../signal/Signal\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Gain } from \"../core/context/Gain\";\nimport { NormalRange, Positive, Seconds, Time } from \"../core/type/Units\";\nimport { Envelope, EnvelopeOptions } from \"../component/envelope/Envelope\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { Monophonic } from \"./Monophonic\";\nimport { OmniOscillator } from \"../source/oscillator/OmniOscillator\";\nimport { OmniOscillatorSynthOptions } from \"../source/oscillator/OscillatorInterface\";\nimport { Source } from \"../source/Source\";\nimport { Synth, SynthOptions } from \"./Synth\";\nimport { AmplitudeEnvelope } from \"../component/envelope/AmplitudeEnvelope\";\nimport { readOnly, RecursivePartial } from \"../core/util/Interface\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\n\nexport interface ModulationSynthOptions extends SynthOptions {\n\tharmonicity: Positive;\n\tmodulationEnvelope: Omit<EnvelopeOptions, keyof ToneAudioNodeOptions>;\n\tmodulation: OmniOscillatorSynthOptions;\n}\n/**\n * Base class for both AM and FM synths\n */\nexport abstract class ModulationSynth<Options extends ModulationSynthOptions> extends Monophonic<Options> {\n\n\treadonly name: string = \"ModulationSynth\";\n\n\t/**\n\t * The carrier voice.\n\t */\n\tprotected _carrier: Synth;\n\n\t/**\n\t * The modulator voice.\n\t */\n\n\tprotected _modulator: Synth;\n\n\t/**\n\t * The carrier's oscillator\n\t */\n\treadonly oscillator: OmniOscillator<any>;\n\n\t/**\n\t * The carrier's envelope\n\t */\n\treadonly envelope: AmplitudeEnvelope;\n\n\t/**\n\t * The modulator's oscillator which is applied to the amplitude of the oscillator\n\t */\n\treadonly modulation: OmniOscillator<any>;\n\n\t/**\n\t * The modulator's envelope\n\t */\n\treadonly modulationEnvelope: AmplitudeEnvelope;\n\n\t/**\n\t * The frequency control\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * The detune in cents\n\t */\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * Harmonicity is the ratio between the two voices. A harmonicity of\n\t * 1 is no change. Harmonicity = 2 means a change of an octave.\n\t * @example\n\t * import { AMSynth } from \"tone\";\n\t * const amSynth = new AMSynth().toDestination();\n\t * // pitch the modulator an octave below oscillator\n\t * amSynth.harmonicity.value = 0.5;\n\t * amSynth.triggerAttackRelease(\"C5\", \"4n\");\n\t */\n\treadonly harmonicity: Multiply;\n\n\t/**\n\t * The node where the modulation happens\n\t */\n\tprotected _modulationNode: Gain;\n\n\tconstructor(options?: RecursivePartial<ModulationSynthOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(ModulationSynth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(ModulationSynth.getDefaults(), arguments);\n\n\t\tthis._carrier = new Synth({\n\t\t\tcontext: this.context,\n\t\t\toscillator: options.oscillator,\n\t\t\tenvelope: options.envelope,\n\t\t\tonsilence: () => this.onsilence(this),\n\t\t\tvolume: -10,\n\t\t});\n\t\tthis._modulator = new Synth({\n\t\t\tcontext: this.context,\n\t\t\toscillator: options.modulation,\n\t\t\tenvelope: options.modulationEnvelope,\n\t\t\tvolume: -10,\n\t\t});\n\n\t\tthis.oscillator = this._carrier.oscillator;\n\t\tthis.envelope = this._carrier.envelope;\n\t\tthis.modulation = this._modulator.oscillator;\n\t\tthis.modulationEnvelope = this._modulator.envelope;\n\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t});\n\t\tthis.detune = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.detune,\n\t\t\tunits: \"cents\"\n\t\t});\n\t\tthis.harmonicity = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.harmonicity,\n\t\t\tminValue: 0,\n\t\t});\n\t\tthis._modulationNode = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: 0,\n\t\t});\n\t\t\n\t\treadOnly(this, [\"frequency\", \"harmonicity\", \"oscillator\", \"envelope\", \"modulation\", \"modulationEnvelope\", \"detune\"]);\n\t}\n\n\tstatic getDefaults(): ModulationSynthOptions {\n\t\treturn Object.assign(Monophonic.getDefaults(), {\n\t\t\tharmonicity: 3,\n\t\t\toscillator: Object.assign(\n\t\t\t\tomitFromObject(OmniOscillator.getDefaults(), [\n\t\t\t\t\t...Object.keys(Source.getDefaults()),\n\t\t\t\t\t\"frequency\",\n\t\t\t\t\t\"detune\"\n\t\t\t\t]),\n\t\t\t\t{\n\t\t\t\t\ttype: \"sine\"\n\t\t\t\t}\n\t\t\t),\n\t\t\tenvelope: Object.assign(\n\t\t\t\tomitFromObject(\n\t\t\t\t\tEnvelope.getDefaults(),\n\t\t\t\t\tObject.keys(ToneAudioNode.getDefaults())\n\t\t\t\t),\n\t\t\t\t{\n\t\t\t\t\tattack: 0.01,\n\t\t\t\t\tdecay: 0.01,\n\t\t\t\t\tsustain: 1,\n\t\t\t\t\trelease: 0.5\n\t\t\t\t}\n\t\t\t),\n\t\t\tmodulation: Object.assign(\n\t\t\t\tomitFromObject(OmniOscillator.getDefaults(), [\n\t\t\t\t\t...Object.keys(Source.getDefaults()),\n\t\t\t\t\t\"frequency\",\n\t\t\t\t\t\"detune\"\n\t\t\t\t]),\n\t\t\t\t{\n\t\t\t\t\ttype: \"square\"\n\t\t\t\t}\n\t\t\t),\n\t\t\tmodulationEnvelope: Object.assign(\n\t\t\t\tomitFromObject(\n\t\t\t\t\tEnvelope.getDefaults(),\n\t\t\t\t\tObject.keys(ToneAudioNode.getDefaults())\n\t\t\t\t),\n\t\t\t\t{\n\t\t\t\t\tattack: 0.5,\n\t\t\t\t\tdecay: 0.0,\n\t\t\t\t\tsustain: 1,\n\t\t\t\t\trelease: 0.5\n\t\t\t\t}\n\t\t\t)\n\t\t});\n\t}\n\n\t/**\n\t * Trigger the attack portion of the note\n\t */\n\tprotected _triggerEnvelopeAttack(time: Seconds, velocity: number): void {\n\t\t// @ts-ignore\n\t\tthis._carrier._triggerEnvelopeAttack(time, velocity);\n\t\t// @ts-ignore\n\t\tthis._modulator._triggerEnvelopeAttack(time, velocity);\n\t}\n\t\n\t/**\n\t * Trigger the release portion of the note\n\t */\n\tprotected _triggerEnvelopeRelease(time: Seconds) {\n\t\t// @ts-ignore\n\t\tthis._carrier._triggerEnvelopeRelease(time);\n\t\t// @ts-ignore\n\t\tthis._modulator._triggerEnvelopeRelease(time);\n\t\treturn this;\n\t}\n\t\n\tgetLevelAtTime(time: Time): NormalRange {\n\t\ttime = this.toSeconds(time);\n\t\treturn this.envelope.getValueAtTime(time);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._carrier.dispose();\n\t\tthis._modulator.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\tthis.harmonicity.dispose();\n\t\tthis._modulationNode.dispose();\n\t\treturn this;\n\t}\n}\n","import { AudioToGain } from \"../signal/AudioToGain\";\nimport { RecursivePartial } from \"../core/util/Interface\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { ModulationSynth, ModulationSynthOptions } from \"./ModulationSynth\";\n\nexport type AMSynthOptions = ModulationSynthOptions;\n\n/**\n * AMSynth uses the output of one Tone.Synth to modulate the\n * amplitude of another Tone.Synth. The harmonicity (the ratio between\n * the two signals) affects the timbre of the output signal greatly.\n * Read more about Amplitude Modulation Synthesis on\n * [SoundOnSound](https://web.archive.org/web/20160404103653/http://www.soundonsound.com:80/sos/mar00/articles/synthsecrets.htm).\n *\n * @example\n * import { AMSynth } from \"tone\";\n * const synth = new AMSynth().toDestination();\n * synth.triggerAttackRelease(\"C4\", \"4n\");\n * \n * @category Instrument\n */\nexport class AMSynth extends ModulationSynth<AMSynthOptions> {\n\n\treadonly name: string = \"AMSynth\";\n\n\t/**\n\t * Scale the oscillator from -1,1 to 0-1\n\t */\n\tprivate _modulationScale: AudioToGain;\n\n\tconstructor(options?: RecursivePartial<AMSynthOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(AMSynth.getDefaults(), arguments));\n\n\t\tthis._modulationScale = new AudioToGain({\n\t\t\tcontext: this.context,\n\t\t});\n\n\t\t// control the two voices frequency\n\t\tthis.frequency.connect(this._carrier.frequency);\n\t\tthis.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t\tthis.detune.fan(this._carrier.detune, this._modulator.detune);\n\t\tthis._modulator.chain(this._modulationScale, this._modulationNode.gain);\n\t\tthis._carrier.chain(this._modulationNode, this.output);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._modulationScale.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { connectSeries, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Cents, Frequency, GainFactor, Positive } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { isNumber } from \"../../core/util/TypeCheck\";\nimport { Signal } from \"../../signal/Signal\";\nimport { assert } from \"../../core/util/Debug\";\n\nexport type FilterRollOff = -12 | -24 | -48 | -96;\n\nexport interface FilterOptions extends ToneAudioNodeOptions {\n\ttype: BiquadFilterType;\n\tfrequency: Frequency;\n\trolloff: FilterRollOff;\n\tQ: Positive;\n\tdetune: Cents;\n\tgain: GainFactor;\n}\n\n/**\n * Tone.Filter is a filter which allows for all of the same native methods\n * as the [BiquadFilterNode](http://webaudio.github.io/web-audio-api/#the-biquadfilternode-interface).\n * Tone.Filter has the added ability to set the filter rolloff at -12\n * (default), -24 and -48.\n * @example\n * import { Filter, Noise } from \"tone\";\n * \n * const filter = new Filter(1500, \"highpass\").toDestination();\n * filter.frequency.rampTo(20000, 10);\n * const noise = new Noise().connect(filter).start();\n * @category Component\n */\nexport class Filter extends ToneAudioNode<FilterOptions> {\n\n\treadonly name: string = \"Filter\";\n\n\treadonly input = new Gain({ context: this.context });\n\treadonly output = new Gain({ context: this.context });\n\tprivate _filters: BiquadFilterNode[] = [];\n\n\t/**\n\t * the rolloff value of the filter\n\t */\n\tprivate _rolloff!: FilterRollOff;\n\tprivate _type: BiquadFilterType;\n\n\t/**\n\t * The Q or Quality of the filter\n\t */\n\treadonly Q: Signal<\"positive\">;\n\n\t/**\n\t * The cutoff frequency of the filter.\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * The detune parameter\n\t */\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * The gain of the filter, only used in certain filter types\n\t */\n\treadonly gain: Signal<\"decibels\">;\n\n\t/**\n\t * @param frequency The cutoff frequency of the filter.\n\t * @param type The type of filter.\n\t * @param rolloff The drop in decibels per octave after the cutoff frequency\n\t */\n\tconstructor(frequency?: Frequency, type?: BiquadFilterType, rolloff?: FilterRollOff);\n\tconstructor(options?: Partial<FilterOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Filter.getDefaults(), arguments, [\"frequency\", \"type\", \"rolloff\"]));\n\t\tconst options = optionsFromArguments(Filter.getDefaults(), arguments, [\"frequency\", \"type\", \"rolloff\"]);\n\n\t\tthis._filters = [];\n\n\t\tthis.Q = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.Q,\n\t\t});\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t});\n\t\tthis.detune = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune,\n\t\t});\n\t\tthis.gain = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"decibels\",\n\t\t\tvalue: options.gain,\n\t\t});\n\t\tthis._type = options.type;\n\t\tthis.rolloff = options.rolloff;\n\t\treadOnly(this, [\"detune\", \"frequency\", \"gain\", \"Q\"]);\n\t}\n\n\tstatic getDefaults(): FilterOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tQ: 1,\n\t\t\tdetune: 0,\n\t\t\tfrequency: 350,\n\t\t\tgain: 0,\n\t\t\trolloff: -12 as FilterRollOff,\n\t\t\ttype: \"lowpass\" as BiquadFilterType,\n\t\t});\n\t}\n\n\t/**\n\t * The type of the filter. Types: \"lowpass\", \"highpass\",\n\t * \"bandpass\", \"lowshelf\", \"highshelf\", \"notch\", \"allpass\", or \"peaking\".\n\t */\n\tget type(): BiquadFilterType {\n\t\treturn this._type;\n\t}\n\tset type(type: BiquadFilterType) {\n\t\tconst types: BiquadFilterType[] = [\"lowpass\", \"highpass\", \"bandpass\",\n\t\t\t\"lowshelf\", \"highshelf\", \"notch\", \"allpass\", \"peaking\"];\n\t\tassert(types.indexOf(type) !== -1, `Invalid filter type: ${type}`);\n\t\tthis._type = type;\n\t\tthis._filters.forEach(filter => filter.type = type);\n\t}\n\n\t/**\n\t * The rolloff of the filter which is the drop in db\n\t * per octave. Implemented internally by cascading filters.\n\t * Only accepts the values -12, -24, -48 and -96.\n\t */\n\tget rolloff(): FilterRollOff {\n\t\treturn this._rolloff;\n\t}\n\tset rolloff(rolloff) {\n\t\tconst rolloffNum = isNumber(rolloff) ? rolloff : parseInt(rolloff, 10) as FilterRollOff;\n\t\tconst possibilities = [-12, -24, -48, -96];\n\t\tlet cascadingCount = possibilities.indexOf(rolloffNum);\n\t\t// check the rolloff is valid\n\t\tassert(cascadingCount !== -1, `rolloff can only be ${possibilities.join(\", \")}`);\n\t\tcascadingCount += 1;\n\n\t\tthis._rolloff = rolloffNum;\n\t\tthis.input.disconnect();\n\t\tthis._filters.forEach(filter => filter.disconnect());\n\n\t\tthis._filters = new Array(cascadingCount);\n\t\tfor (let count = 0; count < cascadingCount; count++) {\n\t\t\tconst filter = this.context.createBiquadFilter();\n\t\t\tfilter.type = this._type;\n\t\t\tthis.frequency.connect(filter.frequency);\n\t\t\tthis.detune.connect(filter.detune);\n\t\t\tthis.Q.connect(filter.Q);\n\t\t\tthis.gain.connect(filter.gain);\n\t\t\tthis._filters[count] = filter;\n\t\t}\n\t\tthis._internalChannels = this._filters;\n\t\tconnectSeries(this.input, ...this._internalChannels, this.output);\n\t}\n\n\t/**\n\t * Get the frequency response curve. This curve represents how the filter\n\t * responses to frequencies between 20hz-20khz.\n\t * @param  len The number of values to return\n\t * @return The frequency response curve between 20-20kHz\n\t */\n\tgetFrequencyResponse(len = 128): Float32Array {\n\t\t// start with all 1s\n\t\tconst totalResponse = new Float32Array(len).map(() => 1);\n\t\tconst freqValues = new Float32Array(len);\n\t\tfor (let i = 0; i < len; i++) {\n\t\t\tconst norm = Math.pow(i / len, 2);\n\t\t\tconst freq = norm * (20000 - 20) + 20;\n\t\t\tfreqValues[i] = freq;\n\t\t}\n\t\tconst magValues = new Float32Array(len);\n\t\tconst phaseValues = new Float32Array(len);\n\t\tthis._filters.forEach(() => {\n\t\t\tconst filterClone = this.context.createBiquadFilter();\n\t\t\tfilterClone.type = this._type;\n\t\t\tfilterClone.Q.value = this.Q.value;\n\t\t\tfilterClone.frequency.value = this.frequency.value as number;\n\t\t\tfilterClone.gain.value = this.gain.value as number;\n\t\t\tfilterClone.getFrequencyResponse(freqValues, magValues, phaseValues);\n\t\t\tmagValues.forEach((val, i) => {\n\t\t\t\ttotalResponse[i] *= val;\n\t\t\t});\n\t\t});\n\t\treturn totalResponse;\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._filters.forEach(filter => {\n\t\t\tfilter.disconnect();\n\t\t});\n\t\twritable(this, [\"detune\", \"frequency\", \"gain\", \"Q\"]);\n\t\tthis.frequency.dispose();\n\t\tthis.Q.dispose();\n\t\tthis.detune.dispose();\n\t\tthis.gain.dispose();\n\t\treturn this;\n\t}\n}\n","import { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Frequency, Hertz, NormalRange, Positive, Time } from \"../../core/type/Units\";\nimport { Envelope, EnvelopeOptions } from \"./Envelope\";\nimport { Scale } from \"../../signal/Scale\";\nimport { Pow } from \"../../signal/Pow\";\nimport { assertRange } from \"../../core/util/Debug\";\n\nexport interface FrequencyEnvelopeOptions extends EnvelopeOptions {\n\tbaseFrequency: Frequency;\n\toctaves: number;\n\texponent: number;\n}\n/**\n * FrequencyEnvelope is an [[Envelope]] which ramps between [[baseFrequency]]\n * and [[octaves]]. It can also have an optional [[exponent]] to adjust the curve\n * which it ramps. \n * @example\n * import { FrequencyEnvelope, Oscillator } from \"tone\";\n * const oscillator = new Oscillator().toDestination().start();\n * const freqEnv = new FrequencyEnvelope({\n * \tattack: 0.2,\n * \tbaseFrequency: \"C2\",\n * \toctaves: 4\n * });\n * freqEnv.connect(oscillator.frequency);\n * freqEnv.triggerAttack();\n */\nexport class FrequencyEnvelope extends Envelope {\n\n\treadonly name: string = \"FrequencyEnvelope\";\n\n\t/**\n\t * Private reference to the base frequency as a number\n\t */\n\tprivate _baseFrequency: Hertz;\n\n\t/**\n\t * The number of octaves\n\t */\n\tprivate _octaves: Positive;\n\n\t/**\n\t * Internal scaler from 0-1 to the final output range\n\t */\n\tprivate _scale: Scale;\n\n\t/**\n\t * Apply a power curve to the output\n\t */\n\tprivate _exponent: Pow;\n\n\t/**\n\t * @param attack\tthe attack time in seconds\n\t * @param decay\t\tthe decay time in seconds\n\t * @param sustain \ta percentage (0-1) of the full amplitude\n\t * @param release\tthe release time in seconds\n\t */\n\tconstructor(attack?: Time, decay?: Time, sustain?: NormalRange, release?: Time);\n\tconstructor(options?: Partial<FrequencyEnvelopeOptions>)\n\tconstructor() {\n\t\tsuper(optionsFromArguments(FrequencyEnvelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]));\n\t\tconst options = optionsFromArguments(FrequencyEnvelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]);\n\n\t\tthis._octaves = options.octaves;\n\t\tthis._baseFrequency = this.toFrequency(options.baseFrequency);\n\n\t\tthis._exponent = this.input = new Pow({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.exponent\n\t\t});\n\t\tthis._scale = this.output = new Scale({\n\t\t\tcontext: this.context,\n\t\t\tmin: this._baseFrequency,\n\t\t\tmax: this._baseFrequency * Math.pow(2, this._octaves),\n\t\t});\n\t\tthis._sig.chain(this._exponent, this._scale);\n\t}\n\n\tstatic getDefaults(): FrequencyEnvelopeOptions {\n\t\treturn Object.assign(Envelope.getDefaults(), {\n\t\t\tbaseFrequency: 200,\n\t\t\texponent: 1,\n\t\t\toctaves: 4,\n\t\t});\n\t}\n\n\t/**\n\t * The envelope's minimum output value. This is the value which it\n\t * starts at.\n\t */\n\tget baseFrequency(): Frequency {\n\t\treturn this._baseFrequency;\n\t}\n\tset baseFrequency(min) {\n\t\tconst freq = this.toFrequency(min);\n\t\tassertRange(freq, 0);\n\t\tthis._baseFrequency = freq;\n\t\tthis._scale.min = this._baseFrequency;\n\t\t// update the max value when the min changes\n\t\tthis.octaves = this._octaves;\n\t}\n\t\n\t/**\n\t * The number of octaves above the baseFrequency that the\n\t * envelope will scale to.\n\t */\n\tget octaves(): Positive {\n\t\treturn this._octaves;\n\t}\n\tset octaves(octaves: Positive) {\n\t\tassertRange(octaves, 0);\n\t\tthis._octaves = octaves;\n\t\tthis._scale.max = this._baseFrequency * Math.pow(2, octaves);\n\t}\n\n\t/**\n\t * The envelope's exponent value.\n\t */\n\tget exponent(): number {\n\t\treturn this._exponent.value;\n\t}\n\tset exponent(exponent) {\n\t\tthis._exponent.value = exponent;\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._exponent.dispose();\n\t\tthis._scale.dispose();\n\t\treturn this;\n\t}\n}\n","import { AmplitudeEnvelope } from \"../component/envelope/AmplitudeEnvelope\";\nimport { Envelope, EnvelopeOptions } from \"../component/envelope/Envelope\";\nimport { Filter, FilterOptions } from \"../component/filter/Filter\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly, RecursivePartial } from \"../core/util/Interface\";\nimport { Monophonic, MonophonicOptions } from \"../instrument/Monophonic\";\nimport { OmniOscillator } from \"../source/oscillator/OmniOscillator\";\nimport { Source } from \"../source/Source\";\nimport { FrequencyEnvelope, FrequencyEnvelopeOptions } from \"../component/envelope/FrequencyEnvelope\";\nimport { NormalRange, Seconds, Time } from \"../core/type/Units\";\nimport { Signal } from \"../signal/Signal\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { OmniOscillatorSynthOptions } from \"../source/oscillator/OscillatorInterface\";\n\nexport interface MonoSynthOptions extends MonophonicOptions {\n\toscillator: OmniOscillatorSynthOptions;\n\tenvelope: Omit<EnvelopeOptions, keyof ToneAudioNodeOptions>;\n\tfilterEnvelope: Omit<FrequencyEnvelopeOptions, keyof ToneAudioNodeOptions>;\n\tfilter: Omit<FilterOptions, keyof ToneAudioNodeOptions>;\n}\n\n/**\n * MonoSynth is composed of one `oscillator`, one `filter`, and two `envelopes`.\n * The amplitude of the Oscillator and the cutoff frequency of the\n * Filter are controlled by Envelopes.\n * <img src=\"https://docs.google.com/drawings/d/1gaY1DF9_Hzkodqf8JI1Cg2VZfwSElpFQfI94IQwad38/pub?w=924&h=240\">\n * @example\n * import { MonoSynth } from \"tone\";\n * const synth = new MonoSynth({\n * \toscillator: {\n * \t\ttype: \"square\"\n * \t},\n * \tenvelope: {\n * \t\tattack: 0.1\n * \t}\n * }).toDestination();\n * synth.triggerAttackRelease(\"C4\", \"8n\");\n * @category Instrument\n */\nexport class MonoSynth extends Monophonic<MonoSynthOptions> {\n\n\treadonly name = \"MonoSynth\";\n\n\t/**\n\t * The oscillator.\n\t */\n\treadonly oscillator: OmniOscillator<any>;\n\n\t/**\n\t * The frequency control.\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * The detune control.\n\t */\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * The filter.\n\t */\n\treadonly filter: Filter;\n\n\t/**\n\t * The filter envelope.\n\t */\n\treadonly filterEnvelope: FrequencyEnvelope;\n\n\t/**\n\t * The amplitude envelope.\n\t */\n\treadonly envelope: AmplitudeEnvelope;\n\n\tconstructor(options?: RecursivePartial<MonoSynthOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(MonoSynth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(MonoSynth.getDefaults(), arguments);\n\n\t\tthis.oscillator = new OmniOscillator(Object.assign(options.oscillator, { \n\t\t\tcontext: this.context,\n\t\t\tdetune: options.detune,\n\t\t\tonstop: () => this.onsilence(this),\n\t\t}));\n\t\tthis.frequency = this.oscillator.frequency;\n\t\tthis.detune = this.oscillator.detune;\n\t\tthis.filter = new Filter(Object.assign(options.filter, { context: this.context }));\n\t\tthis.filterEnvelope = new FrequencyEnvelope(Object.assign(options.filterEnvelope, { context: this.context }));\n\t\tthis.envelope = new AmplitudeEnvelope(Object.assign(options.envelope, { context: this.context }));\n\n\t\t// connect the oscillators to the output\n\t\tthis.oscillator.chain(this.filter, this.envelope, this.output);\n\n\t\t// connect the filter envelope\n\t\tthis.filterEnvelope.connect(this.filter.frequency);\n\t\t\n\t\treadOnly(this, [\"oscillator\", \"frequency\", \"detune\", \"filter\", \"filterEnvelope\", \"envelope\"]);\n\t}\n\n\tstatic getDefaults(): MonoSynthOptions {\n\t\treturn Object.assign(Monophonic.getDefaults(), {\n\t\t\tenvelope: Object.assign(\n\t\t\t\tomitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())),\n\t\t\t\t{\n\t\t\t\t\tattack: 0.005,\n\t\t\t\t\tdecay: 0.1,\n\t\t\t\t\trelease: 1,\n\t\t\t\t\tsustain: 0.9,\n\t\t\t\t},\n\t\t\t),\n\t\t\tfilter: Object.assign(\n\t\t\t\tomitFromObject(Filter.getDefaults(), Object.keys(ToneAudioNode.getDefaults())),\n\t\t\t\t{\n\t\t\t\t\tQ: 1,\n\t\t\t\t\trolloff: -12,\n\t\t\t\t\ttype: \"lowpass\",\n\t\t\t\t},\n\t\t\t),\n\t\t\tfilterEnvelope: Object.assign(\n\t\t\t\tomitFromObject(FrequencyEnvelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), \n\t\t\t\t{\n\t\t\t\t\tattack: 0.6,\n\t\t\t\t\tbaseFrequency: 200,\n\t\t\t\t\tdecay: 0.2,\n\t\t\t\t\texponent: 2,\n\t\t\t\t\toctaves: 3,\n\t\t\t\t\trelease: 2,\n\t\t\t\t\tsustain: 0.5,\n\t\t\t\t}\n\t\t\t),\n\t\t\toscillator: Object.assign(\n\t\t\t\tomitFromObject(OmniOscillator.getDefaults(), Object.keys(Source.getDefaults())),\n\t\t\t\t{\n\t\t\t\t\ttype: \"sawtooth\",\n\t\t\t\t},\n\t\t\t),\n\t\t});\n\t}\n\n\t/**\n\t * start the attack portion of the envelope\n\t * @param time the time the attack should start\n\t * @param velocity the velocity of the note (0-1)\n\t */\n\tprotected _triggerEnvelopeAttack(time: Seconds, velocity = 1): void {\n\t\tthis.envelope.triggerAttack(time, velocity);\n\t\tthis.filterEnvelope.triggerAttack(time);\n\t\tthis.oscillator.start(time);\n\t\tif (this.envelope.sustain === 0) {\n\t\t\tconst computedAttack = this.toSeconds(this.envelope.attack);\n\t\t\tconst computedDecay = this.toSeconds(this.envelope.decay);\n\t\t\tthis.oscillator.stop(time + computedAttack + computedDecay);\n\t\t}\n\t}\n\n\t/**\n\t * start the release portion of the envelope\n\t * @param time the time the release should start\n\t */\n\tprotected _triggerEnvelopeRelease(time: Seconds): void {\n\t\tthis.envelope.triggerRelease(time);\n\t\tthis.filterEnvelope.triggerRelease(time);\n\t\tthis.oscillator.stop(time + this.toSeconds(this.envelope.release));\n\t}\n\n\tgetLevelAtTime(time: Time): NormalRange {\n\t\ttime = this.toSeconds(time);\n\t\treturn this.envelope.getValueAtTime(time);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.oscillator.dispose();\n\t\tthis.envelope.dispose();\n\t\tthis.filterEnvelope.dispose();\n\t\tthis.filter.dispose();\n\t\treturn this;\n\t}\n}\n","import { Monophonic, MonophonicOptions } from \"./Monophonic\";\nimport { MonoSynth, MonoSynthOptions } from \"./MonoSynth\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly, RecursivePartial } from \"../core/util/Interface\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Gain, } from \"../core/context/Gain\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Frequency, NormalRange, Positive, Seconds, Time } from \"../core/type/Units\";\nimport { deepMerge, omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { Param } from \"../core/context/Param\";\n\nexport interface DuoSynthOptions extends MonophonicOptions {\n\tvoice0: Omit<MonoSynthOptions, keyof MonophonicOptions>;\n\tvoice1: Omit<MonoSynthOptions, keyof MonophonicOptions>;\n\tharmonicity: Positive;\n\tvibratoRate: Frequency;\n\tvibratoAmount: Positive;\n}\n\n/**\n * DuoSynth is a monophonic synth composed of two [[MonoSynths]] run in parallel with control over the\n * frequency ratio between the two voices and vibrato effect.\n * @example\n * import { DuoSynth } from \"tone\";\n * const duoSynth = new DuoSynth().toDestination();\n * duoSynth.triggerAttackRelease(\"C4\", \"2n\");\n * @category Instrument\n */\nexport class DuoSynth extends Monophonic<DuoSynthOptions> {\n\n\treadonly name: string = \"DuoSynth\";\n\n\treadonly frequency: Signal<\"frequency\">;\n\treadonly detune: Signal<\"cents\">;\n\t\t\n\t/**\n\t * the first voice\n\t */\n\treadonly voice0: MonoSynth;\n\n\t/**\n\t * the second voice\n\t */\n\treadonly voice1: MonoSynth;\n\t\n\t/**\n\t * The amount of vibrato\n\t */\n\tpublic vibratoAmount: Param<\"normalRange\">;\n\n\t/**\n\t * the vibrato frequency\n\t */\n\tpublic vibratoRate: Signal<\"frequency\">;\n\n\t/**\n\t * Harmonicity is the ratio between the two voices. A harmonicity of\n\t * 1 is no change. Harmonicity = 2 means a change of an octave.\n\t * @example\n\t * import { DuoSynth } from \"tone\";\n\t * const duoSynth = new DuoSynth().toDestination();\n\t * duoSynth.triggerAttackRelease(\"C4\", \"2n\");\n\t * // pitch voice1 an octave below voice0\n\t * duoSynth.harmonicity.value = 0.5;\n\t */\n\tpublic harmonicity: Signal<\"positive\">;\n\n\t/**\n\t * The vibrato LFO.\n\t */\n\tprivate _vibrato: LFO;\n\n\t/**\n\t * the vibrato gain\n\t */\n\tprivate _vibratoGain: Gain<\"normalRange\">;\n\n\tconstructor(options?: RecursivePartial<DuoSynthOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(DuoSynth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(DuoSynth.getDefaults(), arguments);\n\n\t\tthis.voice0 = new MonoSynth(Object.assign(options.voice0, { \n\t\t\tcontext: this.context, \n\t\t\tonsilence: () => this.onsilence(this)\n\t\t}));\n\t\tthis.voice1 = new MonoSynth(Object.assign(options.voice1, { \n\t\t\tcontext: this.context, \n\t\t}));\n\n\t\tthis.harmonicity = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.harmonicity,\n\t\t});\n\n\t\tthis._vibrato = new LFO({\n\t\t\tfrequency: options.vibratoRate,\n\t\t\tcontext: this.context,\n\t\t\tmin: -50,\n\t\t\tmax: 50\n\t\t});\n\t\t// start the vibrato immediately\n\t\tthis._vibrato.start();\n\t\tthis.vibratoRate = this._vibrato.frequency;\n\t\tthis._vibratoGain = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"normalRange\",\n\t\t\tgain: options.vibratoAmount\n\t\t});\n\t\tthis.vibratoAmount = this._vibratoGain.gain;\n\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: 440\n\t\t});\n\t\tthis.detune = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune\n\t\t});\n\t\t\n\t\t// control the two voices frequency\n\t\tthis.frequency.connect(this.voice0.frequency);\n\t\tthis.frequency.chain(this.harmonicity, this.voice1.frequency);\n\n\t\tthis._vibrato.connect(this._vibratoGain);\n\t\tthis._vibratoGain.fan(this.voice0.detune, this.voice1.detune);\n\n\t\tthis.detune.fan(this.voice0.detune, this.voice1.detune);\n\n\t\tthis.voice0.connect(this.output);\n\t\tthis.voice1.connect(this.output);\n\n\t\treadOnly(this, [\"voice0\", \"voice1\", \"frequency\", \"vibratoAmount\", \"vibratoRate\"]);\n\t}\n\n\tgetLevelAtTime(time: Time): NormalRange {\n\t\ttime = this.toSeconds(time);\n\t\treturn this.voice0.envelope.getValueAtTime(time) + this.voice1.envelope.getValueAtTime(time);\n\t}\n\n\tstatic getDefaults(): DuoSynthOptions {\n\t\treturn deepMerge(Monophonic.getDefaults(), {\n\t\t\tvibratoAmount: 0.5,\n\t\t\tvibratoRate: 5,\n\t\t\tharmonicity: 1.5,\n\t\t\tvoice0: deepMerge(\n\t\t\t\tomitFromObject(MonoSynth.getDefaults(), Object.keys(Monophonic.getDefaults())), \n\t\t\t\t{\n\t\t\t\t\tfilterEnvelope: {\n\t\t\t\t\t\tattack: 0.01,\n\t\t\t\t\t\tdecay: 0.0,\n\t\t\t\t\t\tsustain: 1,\n\t\t\t\t\t\trelease: 0.5\n\t\t\t\t\t},\n\t\t\t\t\tenvelope: {\n\t\t\t\t\t\tattack: 0.01,\n\t\t\t\t\t\tdecay: 0.0,\n\t\t\t\t\t\tsustain: 1,\n\t\t\t\t\t\trelease: 0.5\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\tvoice1: deepMerge(\n\t\t\t\tomitFromObject(MonoSynth.getDefaults(), Object.keys(Monophonic.getDefaults())), \n\t\t\t\t{\n\t\t\t\t\t\n\t\t\t\t\tfilterEnvelope: {\n\t\t\t\t\t\tattack: 0.01,\n\t\t\t\t\t\tdecay: 0.0,\n\t\t\t\t\t\tsustain: 1,\n\t\t\t\t\t\trelease: 0.5\n\t\t\t\t\t},\n\t\t\t\t\tenvelope: {\n\t\t\t\t\t\tattack: 0.01,\n\t\t\t\t\t\tdecay: 0.0,\n\t\t\t\t\t\tsustain: 1,\n\t\t\t\t\t\trelease: 0.5\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t}) as DuoSynthOptions;\n\t}\n\t/**\n\t * Trigger the attack portion of the note\n\t */\n\tprotected _triggerEnvelopeAttack(time: Seconds, velocity: number): void {\n\t\t// @ts-ignore\n\t\tthis.voice0._triggerEnvelopeAttack(time, velocity);\n\t\t// @ts-ignore\n\t\tthis.voice1._triggerEnvelopeAttack(time, velocity);\n\t}\n\t\n\t/**\n\t * Trigger the release portion of the note\n\t */\n\tprotected _triggerEnvelopeRelease(time: Seconds) {\n\t\t// @ts-ignore\n\t\tthis.voice0._triggerEnvelopeRelease(time);\n\t\t// @ts-ignore\n\t\tthis.voice1._triggerEnvelopeRelease(time);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.voice0.dispose();\n\t\tthis.voice1.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\tthis._vibrato.dispose();\n\t\tthis.vibratoRate.dispose();\n\t\tthis._vibratoGain.dispose();\n\t\tthis.harmonicity.dispose();\n\t\treturn this;\n\t}\n}\n\n","import { Positive } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { RecursivePartial } from \"../core/util/Interface\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { ModulationSynth, ModulationSynthOptions } from \"./ModulationSynth\";\n\nexport interface FMSynthOptions extends ModulationSynthOptions {\n\tmodulationIndex: Positive;\n}\n\n/**\n * FMSynth is composed of two Tone.Synths where one Tone.Synth modulates\n * the frequency of a second Tone.Synth. A lot of spectral content\n * can be explored using the modulationIndex parameter. Read more about\n * frequency modulation synthesis on Sound On Sound: [Part 1](https://web.archive.org/web/20160403123704/http://www.soundonsound.com/sos/apr00/articles/synthsecrets.htm), [Part 2](https://web.archive.org/web/20160403115835/http://www.soundonsound.com/sos/may00/articles/synth.htm).\n *\n * @example\n * import { FMSynth } from \"tone\";\n * const fmSynth = new FMSynth().toDestination();\n * fmSynth.triggerAttackRelease(\"C5\", \"4n\");\n * \n * @category Instrument\n */\n\nexport class FMSynth extends ModulationSynth<FMSynthOptions> {\n\treadonly name: string = \"FMSynth\";\n\n\t/**\n\t * The modulation index which essentially the depth or amount of the modulation. It is the\n\t * ratio of the frequency of the modulating signal (mf) to the amplitude of the\n\t * modulating signal (ma) -- as in ma/mf.\n\t */\n\treadonly modulationIndex: Multiply;\n\n\tconstructor(options?: RecursivePartial<FMSynthOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(FMSynth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(FMSynth.getDefaults(), arguments);\n\n\t\tthis.modulationIndex = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.modulationIndex,\n\t\t});\n\n\t\t// control the two voices frequency\n\t\tthis.frequency.connect(this._carrier.frequency);\n\t\tthis.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t\tthis.frequency.chain(this.modulationIndex, this._modulationNode);\n\t\tthis.detune.fan(this._carrier.detune, this._modulator.detune);\n\t\tthis._modulator.connect(this._modulationNode.gain);\n\t\tthis._modulationNode.connect(this._carrier.frequency);\n\t\tthis._carrier.connect(this.output);\n\t}\n\n\tstatic getDefaults(): FMSynthOptions {\n\t\treturn Object.assign(ModulationSynth.getDefaults(), {\n\t\t\tmodulationIndex: 10,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.modulationIndex.dispose();\n\t\treturn this;\n\t}\n}\n","import { Envelope, EnvelopeOptions } from \"../component/envelope/Envelope\";\nimport { Filter } from \"../component/filter/Filter\";\nimport { Gain } from \"../core/context/Gain\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { Frequency, NormalRange, Positive, Seconds, Time } from \"../core/type/Units\";\nimport { deepMerge, omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp, RecursivePartial } from \"../core/util/Interface\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Scale } from \"../signal/Scale\";\nimport { Signal } from \"../signal/Signal\";\nimport { FMOscillator } from \"../source/oscillator/FMOscillator\";\nimport { Monophonic, MonophonicOptions } from \"./Monophonic\";\n\nexport interface MetalSynthOptions extends MonophonicOptions {\n\tharmonicity: Positive;\n\tmodulationIndex: Positive;\n\toctaves: number;\n\tresonance: Frequency;\n\tenvelope: Omit<EnvelopeOptions, keyof ToneAudioNodeOptions>;\n}\n\n/**\n * Inharmonic ratio of frequencies based on the Roland TR-808\n * Taken from https://ccrma.stanford.edu/papers/tr-808-cymbal-physically-informed-circuit-bendable-digital-model\n */\nconst inharmRatios: number[] = [1.0, 1.483, 1.932, 2.546, 2.630, 3.897];\n\n/**\n * A highly inharmonic and spectrally complex source with a highpass filter\n * and amplitude envelope which is good for making metallophone sounds.\n * Based on CymbalSynth by [@polyrhythmatic](https://github.com/polyrhythmatic).\n * Inspiration from [Sound on Sound](https://shorturl.at/rSZ12).\n * @category Instrument\n */\nexport class MetalSynth extends Monophonic<MetalSynthOptions> {\n\n\treadonly name: string = \"MetalSynth\";\n\n\t/**\n\t * The frequency of the cymbal\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * The detune applied to the oscillators\n\t */\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * The array of FMOscillators\n\t */\n\tprivate _oscillators: FMOscillator[] = [];\n\n\t/**\n\t * The frequency multipliers\n\t */\n\tprivate _freqMultipliers: Multiply[] = [];\n\n\t/**\n\t * The gain node for the envelope.\n\t */\n\tprivate _amplitude: Gain;\n\n\t/**\n\t * Highpass the output\n\t */\n\tprivate _highpass: Filter;\n\n\t/**\n\t * The number of octaves the highpass\n\t * filter frequency ramps\n\t */\n\tprivate _octaves: number;\n\n\t/**\n\t * Scale the body envelope for the highpass filter\n\t */\n\tprivate _filterFreqScaler: Scale;\n\n\t/**\n\t * The envelope which is connected both to the\n\t * amplitude and a highpass filter's cutoff frequency.\n\t * The lower-limit of the filter is controlled by the [[resonance]]\n\t */\n\treadonly envelope: Envelope;\n\n\tconstructor(options?: RecursivePartial<MetalSynthOptions>)\n\tconstructor() {\n\t\tsuper(optionsFromArguments(MetalSynth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(MetalSynth.getDefaults(), arguments);\n\n\t\tthis.detune = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune,\n\t\t});\n\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t});\n\n\t\tthis._amplitude = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: 0,\n\t\t}).connect(this.output);\n\n\t\tthis._highpass = new Filter({\n\t\t\t// Q: -3.0102999566398125,\n\t\t\tQ: 0,\n\t\t\tcontext: this.context,\n\t\t\ttype: \"highpass\",\n\t\t}).connect(this._amplitude);\n\n\t\tfor (let i = 0; i < inharmRatios.length; i++) {\n\t\t\tconst osc = new FMOscillator({\n\t\t\t\tcontext: this.context,\n\t\t\t\tharmonicity: options.harmonicity,\n\t\t\t\tmodulationIndex: options.modulationIndex,\n\t\t\t\tmodulationType: \"square\",\n\t\t\t\tonstop: i === 0 ? () => this.onsilence(this) : noOp,\n\t\t\t\ttype: \"square\",\n\t\t\t});\n\t\t\tosc.connect(this._highpass);\n\t\t\tthis._oscillators[i] = osc;\n\n\t\t\tconst mult = new Multiply({\n\t\t\t\tcontext: this.context,\n\t\t\t\tvalue: inharmRatios[i],\n\t\t\t});\n\t\t\tthis._freqMultipliers[i] = mult;\n\t\t\tthis.frequency.chain(mult, osc.frequency);\n\t\t\tthis.detune.connect(osc.detune);\n\t\t}\n\n\t\tthis._filterFreqScaler = new Scale({\n\t\t\tcontext: this.context,\n\t\t\tmax: 7000,\n\t\t\tmin: this.toFrequency(options.resonance),\n\t\t});\n\n\t\tthis.envelope = new Envelope({\n\t\t\tattack: options.envelope.attack,\n\t\t\tattackCurve: \"linear\",\n\t\t\tcontext: this.context,\n\t\t\tdecay: options.envelope.decay,\n\t\t\trelease: options.envelope.release,\n\t\t\tsustain: 0,\n\t\t});\n\n\t\tthis.envelope.chain(this._filterFreqScaler, this._highpass.frequency);\n\t\tthis.envelope.connect(this._amplitude.gain);\n\t\t// set the octaves\n\t\tthis._octaves = options.octaves;\n\t\tthis.octaves = options.octaves;\n\t}\n\n\tstatic getDefaults(): MetalSynthOptions {\n\t\treturn deepMerge(Monophonic.getDefaults(), {\n\t\t\tenvelope: Object.assign(\n\t\t\t\tomitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())),\n\t\t\t\t{\n\t\t\t\t\tattack: 0.001,\n\t\t\t\t\tdecay: 1.4,\n\t\t\t\t\trelease: 0.2,\n\t\t\t\t},\n\t\t\t),\n\t\t\tharmonicity: 5.1,\n\t\t\tmodulationIndex: 32,\n\t\t\toctaves: 1.5,\n\t\t\tresonance: 4000,\n\t\t});\n\t}\n\n\t/**\n\t * Trigger the attack.\n\t * @param time When the attack should be triggered.\n\t * @param velocity The velocity that the envelope should be triggered at.\n\t */\n\tprotected _triggerEnvelopeAttack(time: Seconds, velocity: NormalRange = 1): this {\n\t\tthis.envelope.triggerAttack(time, velocity);\n\t\tthis._oscillators.forEach(osc => osc.start(time));\n\t\tif (this.envelope.sustain === 0) {\n\t\t\tthis._oscillators.forEach(osc => {\n\t\t\t\tosc.stop(time + this.toSeconds(this.envelope.attack) + this.toSeconds(this.envelope.decay));\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\t\n\t/**\n\t * Trigger the release of the envelope.\n\t * @param time When the release should be triggered.\n\t */\n\tprotected _triggerEnvelopeRelease(time: Seconds): this {\n\t\tthis.envelope.triggerRelease(time);\n\t\tthis._oscillators.forEach(osc => osc.stop(time + this.toSeconds(this.envelope.release)));\n\t\treturn this;\n\t}\n\n\tgetLevelAtTime(time: Time): NormalRange {\n\t\ttime = this.toSeconds(time);\n\t\treturn this.envelope.getValueAtTime(time);\n\t}\n\n\t/**\n\t * The modulationIndex of the oscillators which make up the source.\n\t * see [[FMOscillator.modulationIndex]]\n\t * @min 1\n\t * @max 100\n\t */\n\tget modulationIndex(): number {\n\t\treturn this._oscillators[0].modulationIndex.value;\n\t}\n\tset modulationIndex(val) {\n\t\tthis._oscillators.forEach(osc => (osc.modulationIndex.value = val));\n\t}\n\n\t/**\n\t * The harmonicity of the oscillators which make up the source.\n\t * see Tone.FMOscillator.harmonicity\n\t * @min 0.1\n\t * @max 10\n\t */\n\tget harmonicity(): number {\n\t\treturn this._oscillators[0].harmonicity.value;\n\t}\n\tset harmonicity(val) {\n\t\tthis._oscillators.forEach(osc => (osc.harmonicity.value = val));\n\t}\n\n\t/**\n\t * The lower level of the highpass filter which is attached to the envelope.\n\t * This value should be between [0, 7000]\n\t * @min 0\n\t * @max 7000\n\t */\n\tget resonance(): Frequency {\n\t\treturn this._filterFreqScaler.min;\n\t}\n\tset resonance(val) {\n\t\tthis._filterFreqScaler.min = this.toFrequency(val);\n\t\tthis.octaves = this._octaves;\n\t}\n\n\t/**\n\t * The number of octaves above the \"resonance\" frequency\n\t * that the filter ramps during the attack/decay envelope\n\t * @min 0\n\t * @max 8\n\t */\n\tget octaves(): number {\n\t\treturn this._octaves;\n\t}\n\tset octaves(val) {\n\t\tthis._octaves = val;\n\t\tthis._filterFreqScaler.max = this._filterFreqScaler.min * Math.pow(2, val);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._oscillators.forEach(osc => osc.dispose());\n\t\tthis._freqMultipliers.forEach(freqMult => freqMult.dispose());\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\tthis._filterFreqScaler.dispose();\n\t\tthis._amplitude.dispose();\n\t\tthis.envelope.dispose();\n\t\tthis._highpass.dispose();\n\t\treturn this;\n\t}\n}\n","import { FrequencyClass } from \"../core/type/Frequency\";\nimport { Frequency, Positive, Time } from \"../core/type/Units\";\nimport { deepMerge, optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly, RecursivePartial } from \"../core/util/Interface\";\nimport { Monophonic } from \"./Monophonic\";\nimport { Synth, SynthOptions } from \"./Synth\";\nimport { range, timeRange } from \"../core/util/Decorator\";\n\nexport interface MembraneSynthOptions extends SynthOptions {\n\tpitchDecay: Time;\n\toctaves: Positive;\n}\n\n/**\n * MembraneSynth makes kick and tom sounds using a single oscillator\n * with an amplitude envelope and frequency ramp. A Tone.OmniOscillator\n * is routed through a Tone.AmplitudeEnvelope to the output. The drum\n * quality of the sound comes from the frequency envelope applied\n * during MembraneSynth.triggerAttack(note). The frequency envelope\n * starts at <code>note * .octaves</code> and ramps to <code>note</code>\n * over the duration of <code>.pitchDecay</code>.\n * @example\n * import { MembraneSynth } from \"tone\";\n * const synth = new MembraneSynth().toDestination();\n * synth.triggerAttackRelease(\"C2\", \"8n\");\n * @category Instrument\n */\nexport class MembraneSynth extends Synth<MembraneSynthOptions> {\n\n\treadonly name: string = \"MembraneSynth\";\n\n\t/**\n\t * The number of octaves the pitch envelope ramps.\n\t * @min 0.5\n\t * @max 8\n\t */\n\t@range(0)\n\toctaves: Positive;\n\n\t/**\n\t * The amount of time the frequency envelope takes.\n\t * @min 0\n\t * @max 0.5\n\t */\n\t@timeRange(0)\n\tpitchDecay: Time;\n\t\n\t/**\n\t * Portamento is ignored in this synth. use pitch decay instead.\n\t */\n\treadonly portamento = 0;\n\n\t/**\n\t * @param options the options available for the synth see defaults\n\t */\n\tconstructor(options?: RecursivePartial<MembraneSynthOptions>)\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(MembraneSynth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(MembraneSynth.getDefaults(), arguments);\n\n\t\tthis.pitchDecay = options.pitchDecay;\n\t\tthis.octaves = options.octaves;\n\t\treadOnly(this, [\"oscillator\", \"envelope\"]);\n\t}\n\n\tstatic getDefaults(): MembraneSynthOptions {\n\t\treturn deepMerge(Monophonic.getDefaults(), Synth.getDefaults(), {\n\t\t\tenvelope: {\n\t\t\t\tattack: 0.001,\n\t\t\t\tattackCurve: \"exponential\",\n\t\t\t\tdecay: 0.4,\n\t\t\t\trelease: 1.4,\n\t\t\t\tsustain: 0.01,\n\t\t\t},\n\t\t\toctaves: 10,\n\t\t\toscillator: {\n\t\t\t\ttype: \"sine\",\n\t\t\t},\n\t\t\tpitchDecay: 0.05,\n\t\t});\n\t}\n\n\tsetNote(note: Frequency | FrequencyClass, time?: Time): this {\n\t\tconst seconds = this.toSeconds(time);\n\t\tconst hertz = this.toFrequency(note instanceof FrequencyClass ? note.toFrequency() : note);\n\t\tconst maxNote = hertz * this.octaves;\n\t\tthis.oscillator.frequency.setValueAtTime(maxNote, seconds);\n\t\tthis.oscillator.frequency.exponentialRampToValueAtTime(hertz, seconds + this.toSeconds(this.pitchDecay));\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\treturn this;\n\t}\n}\n","import { AmplitudeEnvelope } from \"../component/envelope/AmplitudeEnvelope\";\nimport { NormalRange, Time } from \"../core/type/Units\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { RecursivePartial } from \"../core/util/Interface\";\nimport { Noise, NoiseOptions } from \"../source/Noise\";\nimport { Instrument, InstrumentOptions } from \"./Instrument\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { Envelope, EnvelopeOptions } from \"../component/envelope/Envelope\";\nimport { Source } from \"../source/Source\";\n\nexport interface NoiseSynthOptions extends InstrumentOptions {\n\tenvelope: Omit<EnvelopeOptions, keyof ToneAudioNodeOptions>;\n\tnoise: Omit<NoiseOptions, keyof ToneAudioNodeOptions>;\n}\n\n/**\n * Tone.NoiseSynth is composed of [[Noise]] through an [[AmplitudeEnvelope]]. \n * ```\n * +-------+   +-------------------+\n * | Noise +>--> AmplitudeEnvelope +>--> Output\n * +-------+   +-------------------+\n * ```\n * @example\n * import { NoiseSynth } from \"tone\";\n * const noiseSynth = new NoiseSynth().toDestination();\n * noiseSynth.triggerAttackRelease(\"8n\", 0.05);\n * @category Instrument\n */\nexport class NoiseSynth extends Instrument<NoiseSynthOptions> {\n\n\treadonly name = \"NoiseSynth\";\n\n\t/**\n\t * The noise source.\n\t */\n\treadonly noise: Noise;\n\n\t/**\n\t * The amplitude envelope.\n\t */\n\treadonly envelope: AmplitudeEnvelope;\n\n\tconstructor(options?: RecursivePartial<NoiseSynthOptions>)\n\tconstructor() {\n\t\tsuper(optionsFromArguments(NoiseSynth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(NoiseSynth.getDefaults(), arguments);\n\t\tthis.noise = new Noise(Object.assign({\n\t\t\tcontext: this.context,\n\t\t}, options.noise));\n\n\t\tthis.envelope = new AmplitudeEnvelope(Object.assign({\n\t\t\tcontext: this.context,\n\t\t}, options.envelope));\n\n\t\t// connect the noise to the output\n\t\tthis.noise.chain(this.envelope, this.output);\n\t}\n\n\tstatic getDefaults(): NoiseSynthOptions {\n\t\treturn Object.assign(Instrument.getDefaults(), {\n\t\t\tenvelope: Object.assign(\n\t\t\t\tomitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())),\n\t\t\t\t{\n\t\t\t\t\tdecay: 0.1,\n\t\t\t\t\tsustain: 0.0,\n\t\t\t\t},\n\t\t\t),\n\t\t\tnoise: Object.assign(\n\t\t\t\tomitFromObject(Noise.getDefaults(), Object.keys(Source.getDefaults())),\n\t\t\t\t{\n\t\t\t\t\ttype: \"white\",\n\t\t\t\t},\n\t\t\t),\n\t\t});\n\t}\n\n\t/**\n\t * Start the attack portion of the envelopes. Unlike other\n\t * instruments, Tone.NoiseSynth doesn't have a note.\n\t * @example\n\t * import { NoiseSynth } from \"tone\";\n\t * const noiseSynth = new NoiseSynth().toDestination();\n\t * noiseSynth.triggerAttack();\n\t */\n\ttriggerAttack(time?: Time, velocity: NormalRange = 1): this {\n\t\ttime = this.toSeconds(time);\n\t\t// the envelopes\n\t\tthis.envelope.triggerAttack(time, velocity);\n\t\t// start the noise\n\t\tthis.noise.start(time);\n\t\tif (this.envelope.sustain === 0) {\n\t\t\tthis.noise.stop(time + this.toSeconds(this.envelope.attack) + this.toSeconds(this.envelope.decay));\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Start the release portion of the envelopes.\n\t */\n\ttriggerRelease(time?: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis.envelope.triggerRelease(time);\n\t\tthis.noise.stop(time + this.toSeconds(this.envelope.release));\n\t\treturn this;\n\t}\n\n\tsync(): this {\n\t\tthis._syncMethod(\"triggerAttack\", 0);\n\t\tthis._syncMethod(\"triggerRelease\", 0);\n\t\treturn this;\n\t}\n\n\ttriggerAttackRelease(duration: Time, time?: Time, velocity: NormalRange = 1): this {\n\t\ttime = this.toSeconds(time);\n\t\tduration = this.toSeconds(duration);\n\t\tthis.triggerAttack(time, velocity);\n\t\tthis.triggerRelease(time + duration);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.noise.dispose();\n\t\tthis.envelope.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNode, ToneAudioNodeOptions } from \"./ToneAudioNode\";\nimport { noOp } from \"../util/Interface\";\n\nexport type ToneAudioWorkletOptions = ToneAudioNodeOptions;\n\nexport abstract class ToneAudioWorklet<Options extends ToneAudioWorkletOptions> extends ToneAudioNode<Options> {\n\n\treadonly name: string = \"ToneAudioWorklet\";\n\n\t/**\n\t * The processing node\n\t */\n\tprotected _worklet!: AudioWorkletNode;\n\n\t/**\n\t * The constructor options for the node\n\t */\n\tprotected workletOptions: Partial<AudioWorkletNodeOptions> = {};\n\n\t/**\n\t * The code which is run in the worklet\n\t */\n\tprotected abstract _audioWorklet(): string;\n\n\t/**\n\t * Get the name of the audio worklet\n\t */\n\tprotected abstract _audioWorkletName(): string;\n\t\n\t/**\n\t * Invoked when the module is loaded and the node is created\n\t */\n\tprotected abstract onReady(node: AudioWorkletNode): void;\n\n\t/**\n\t * Callback which is invoked when there is an error in the processing\n\t */\n\tonprocessorerror: (e: string) => void = noOp;\n\t\n\tconstructor(options: Options) {\n\t\tsuper(options);\n\n\t\tconst blobUrl = URL.createObjectURL(new Blob([this._audioWorklet()], { type: \"text/javascript\" }));\n\t\tconst name = this._audioWorkletName();\n\n\t\t// Register the processor\n\t\tthis.context.addAudioWorkletModule(blobUrl, name).then(() => {\n\t\t\t// create the worklet when it's read\n\t\t\tif (!this.disposed) {\n\t\t\t\tthis._worklet = this.context.createAudioWorkletNode(name, this.workletOptions);\n\t\t\t\tthis._worklet.onprocessorerror = this.onprocessorerror.bind(this);\n\t\t\t\tthis.onReady(this._worklet);\n\t\t\t}\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (this._worklet) {\n\t\t\tthis._worklet.disconnect();\n\t\t}\n\t\treturn this;\n\t}\n\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { Param } from \"../../core/context/Param\";\nimport { connectSeries, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { NormalRange, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, RecursivePartial } from \"../../core/util/Interface\";\nimport { ToneAudioWorklet } from \"../../core/context/ToneAudioWorklet\";\n\nexport interface FeedbackCombFilterOptions extends ToneAudioNodeOptions {\n\tdelayTime: Time;\n\tresonance: NormalRange;\n}\n\n/**\n * Comb filters are basic building blocks for physical modeling. Read more\n * about comb filters on [CCRMA's website](https://ccrma.stanford.edu/~jos/pasp/Feedback_Comb_Filters.html).\n * \n * This comb filter is implemented with the AudioWorkletNode which allows it to have feedback delays less than the \n * Web Audio processing block of 128 samples. There is a polyfill for browsers that don't yet support the \n * AudioWorkletNode, but it will add some latency and have slower performance than the AudioWorkletNode. \n * @category Component\n */\nexport class FeedbackCombFilter extends ToneAudioWorklet<FeedbackCombFilterOptions> {\n\t\n\treadonly name = \"FeedbackCombFilter\";\n\t\n\t/**\n\t * The amount of delay of the comb filter.\n\t */\n\treadonly delayTime: Param<\"time\">;\n\t\n\t/**\n\t * The amount of feedback of the delayed signal.\n\t */\n\treadonly resonance: Param<\"normalRange\">;\n\t\n\treadonly input: Gain;\n\treadonly output: Gain;\n\n\t/**\n\t * Default constructor options for the filter\n\t */\n\tprotected workletOptions: Partial<AudioWorkletNodeOptions> = {\n\t\tnumberOfInputs: 1,\n\t\tnumberOfOutputs: 1,\n\t\tchannelCount: 1,\n\t}\n\t\n\t/**\n\t * @param delayTime The delay time of the filter.\n\t * @param resonance The amount of feedback the filter has.\n\t */\n\tconstructor(delayTime?: Time, resonance?: NormalRange);\n\tconstructor(options?: RecursivePartial<FeedbackCombFilterOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(FeedbackCombFilter.getDefaults(), arguments, [\"delayTime\", \"resonance\"]));\n\t\tconst options = optionsFromArguments(FeedbackCombFilter.getDefaults(), arguments, [\"delayTime\", \"resonance\"]);\n\n\t\tthis.input = new Gain({ context: this.context });\n\t\tthis.output = new Gain({ context: this.context });\n\n\t\tconst dummyGain = this.context.createGain();\n\n\t\tthis.delayTime = new Param<\"time\">({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.delayTime,\n\t\t\tunits: \"time\",\n\t\t\tminValue: 0,\n\t\t\tmaxValue: 1,\n\t\t\tparam: dummyGain.gain,\n\t\t\tswappable: true,\n\t\t});\n\t\t\n\t\tthis.resonance = new Param<\"normalRange\">({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.resonance,\n\t\t\tunits: \"normalRange\",\n\t\t\tparam: dummyGain.gain,\n\t\t\tswappable: true,\n\t\t});\n\n\t\treadOnly(this, [\"resonance\", \"delayTime\"]);\n\t}\n\n\tprotected _audioWorkletName(): string {\n\t\treturn \"feedback-comb-filter\";\n\t}\n\n\tprotected _audioWorklet(): string {\n\t\treturn /* javascript */` \n\t\t\tregisterProcessor(\"${this._audioWorkletName()}\", class extends AudioWorkletProcessor {\n\t\t\t\tstatic get parameterDescriptors() {\n\t\t\t\t\treturn [{\n\t\t\t\t\t\tname: \"delayTime\",\n\t\t\t\t\t\tdefaultValue: 0.1,\n\t\t\t\t\t\tminValue: 0,\n\t\t\t\t\t\tmaxValue: 1,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"feedback\",\n\t\t\t\t\t\tdefaultValue: 0.5,\n\t\t\t\t\t\tminValue: 0,\n\t\t\t\t\t\tmaxValue: 0.9999,\n\t\t\t\t\t}];\n\t\t\t\t}\n\t\t\t\n\t\t\t\tconstructor(options) {\n\t\t\t\t\tsuper(options);\n\t\t\t\t\tthis.delayBuffer = new Float32Array(sampleRate);\n\t\t\t\t}\n\t\t\t\n\t\t\t\tgetParameter(parameter, index) {\n\t\t\t\t\tif (parameter.length > 1) {\n\t\t\t\t\t\treturn parameter[index];\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn parameter[0];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\n\t\t\t\tprocess(inputs, outputs, parameters) {\n\t\t\t\t\tconst input = inputs[0];\n\t\t\t\t\tconst output = outputs[0];\n\t\t\t\t\tconst delayLength = this.delayBuffer.length;\n\t\t\t\t\tconst inputChannel = input[0];\n\t\t\t\t\tconst outputChannel = output[0];\n\t\t\t\t\tconst delayTimeParam = parameters.delayTime;\n\t\t\t\t\tconst feedbackParam = parameters.feedback;\n\t\t\t\t\tinputChannel.forEach((value, index) => {\n\t\t\t\t\t\tconst delayTime = this.getParameter(delayTimeParam, index);\n\t\t\t\t\t\tconst feedback = this.getParameter(feedbackParam, index);\n\t\t\t\t\t\tconst delaySamples = Math.floor(delayTime * sampleRate);\n\t\t\t\t\t\tconst currentIndex = (currentFrame + index) % delayLength;\n\t\t\t\t\t\tconst delayedIndex = (currentFrame + index + delaySamples) % delayLength;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// the current value to output\n\t\t\t\t\t\tconst currentValue = this.delayBuffer[currentIndex];\n\t\t\t\t\t\t\n\t\t\t\t\t\t// write the current value to the delayBuffer in the future\n\t\t\t\t\t\tthis.delayBuffer[delayedIndex] = value + currentValue * feedback;\n\n\t\t\t\t\t\t// set all of the output channels to the same value\n\t\t\t\t\t\toutputChannel[index] = delaySamples > 0 ? currentValue : value;\n\t\t\t\t\t});\n\t\t\t\t\t// keep the processing alive\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t});\n\t\t`;\n\t}\n\n\t/**\n\t * The default parameters\n\t */\n\tstatic getDefaults(): FeedbackCombFilterOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tdelayTime: 0.1,\n\t\t\tresonance: 0.5,\n\t\t});\n\t}\n\n\tonReady(node: AudioWorkletNode) {\n\t\tconnectSeries(this.input, node, this.output);\n\t\t// @ts-ignore\n\t\tconst delayTime = node.parameters.get(\"delayTime\");\n\t\tthis.delayTime.setParam(delayTime);\n\t\t// @ts-ignore\n\t\tconst feedback = node.parameters.get(\"feedback\");\n\t\tthis.resonance.setParam(feedback);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.input.dispose();\n\t\tthis.output.dispose();\n\t\tthis.delayTime.dispose();\n\t\tthis.resonance.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Frequency } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Gain } from \"../../core/context/Gain\";\n\nexport type OnePoleFilterType = \"highpass\" | \"lowpass\";\n\nexport interface OnePoleFilterOptions extends ToneAudioNodeOptions {\n\tfrequency: Frequency;\n\ttype: OnePoleFilterType;\n}\n\n/**\n * A one pole filter with 6db-per-octave rolloff. Either \"highpass\" or \"lowpass\". \n * Note that changing the type or frequency may result in a discontinuity which\n * can sound like a click or pop. \n * References: \n * * http://www.earlevel.com/main/2012/12/15/a-one-pole-filter/  \n * * http://www.dspguide.com/ch19/2.htm\n * * https://github.com/vitaliy-bobrov/js-rocks/blob/master/src/app/audio/effects/one-pole-filters.ts\n * @category Component\n */\nexport class OnePoleFilter extends ToneAudioNode<OnePoleFilterOptions> {\n\t\n\treadonly name: string = \"OnePoleFilter\";\n\n\t/**\n\t * Hold the current frequency\n\t */\n\tprivate _frequency: Frequency;\n\n\t/**\n\t * the current one pole type\n\t */\n\tprivate _type: OnePoleFilterType;\n\n\t/**\n\t * the current one pole filter\n\t */\n\tprivate _filter!: IIRFilterNode;\n\n\treadonly input: Gain;\n\treadonly output: Gain;\n\n\t/**\n\t * @param frequency The frequency\n\t * @param type The  filter type, either \"lowpass\" or \"highpass\"\n\t */\n\tconstructor(frequency?: Frequency, type?: OnePoleFilterType);\n\tconstructor(options?: Partial<OnePoleFilterOptions>)\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(OnePoleFilter.getDefaults(), arguments, [\"frequency\", \"type\"]));\n\t\tconst options = optionsFromArguments(OnePoleFilter.getDefaults(), arguments, [\"frequency\", \"type\"]);\n\n\t\tthis._frequency = options.frequency;\n\t\tthis._type = options.type;\n\t\tthis.input = new Gain({ context: this.context });\n\t\tthis.output = new Gain({ context: this.context });\n\t\tthis._createFilter();\n\t}\n\n\tstatic getDefaults(): OnePoleFilterOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tfrequency: 880,\n\t\t\ttype: \"lowpass\" as OnePoleFilterType\n\t\t});\n\t}\n\n\t/**\n\t * Create a filter and dispose the old one\n\t */\n\tprivate _createFilter() {\n\t\tconst oldFilter = this._filter;\n\t\tconst freq = this.toFrequency(this._frequency);\n\t\tconst t = 1 / (2 * Math.PI * freq);\n\t\tif (this._type === \"lowpass\") {\n\t\t\tconst a0 = 1 / (t * this.context.sampleRate);\n\t\t\tconst b1 = a0 - 1;\n\t\t\tthis._filter = this.context.createIIRFilter([a0, 0], [1, b1]);\n\t\t} else {\n\t\t\tconst b1 = 1 / (t * this.context.sampleRate) - 1;\n\t\t\tthis._filter = this.context.createIIRFilter([1, -1], [1, b1]);\n\t\t}\n\t\t\n\t\tthis.input.chain(this._filter, this.output);\n\t\tif (oldFilter) {\n\t\t\t// dispose it on the next block\n\t\t\tthis.context.setTimeout(() => {\n\t\t\t\tif (!this.disposed) {\n\t\t\t\t\tthis.input.disconnect(oldFilter);\n\t\t\t\t\toldFilter.disconnect();\n\t\t\t\t}\n\t\t\t}, this.blockTime);\n\t\t}\n\t}\n\n\t/**\n\t * The frequency value. \n\t */\n\tget frequency(): Frequency {\n\t\treturn this._frequency;\n\t}\n\tset frequency(fq) {\n\t\tthis._frequency = fq;\n\t\tthis._createFilter();\n\t}\n\t\n\t/**\n\t * The OnePole Filter type, either \"highpass\" or \"lowpass\"\n\t */\n\tget type(): OnePoleFilterType {\n\t\treturn this._type;\n\t}\n\tset type(t) {\n\t\tthis._type = t;\n\t\tthis._createFilter();\n\t}\n\n\t/**\n\t * Get the frequency response curve. This curve represents how the filter\n\t * responses to frequencies between 20hz-20khz.\n\t * @param  len The number of values to return\n\t * @return The frequency response curve between 20-20kHz\n\t */\n\tgetFrequencyResponse(len = 128): Float32Array {\n\t\tconst freqValues = new Float32Array(len);\n\t\tfor (let i = 0; i < len; i++) {\n\t\t\tconst norm = Math.pow(i / len, 2);\n\t\t\tconst freq = norm * (20000 - 20) + 20;\n\t\t\tfreqValues[i] = freq;\n\t\t}\n\t\tconst magValues = new Float32Array(len);\n\t\tconst phaseValues = new Float32Array(len);\n\t\tthis._filter.getFrequencyResponse(freqValues, magValues, phaseValues);\n\t\treturn magValues;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.input.dispose();\n\t\tthis.output.dispose();\n\t\tthis._filter.disconnect();\n\t\treturn this;\n\t}\n}\n","import { Param } from \"../../core/context/Param\";\nimport { InputNode, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Frequency, NormalRange, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { RecursivePartial } from \"../../core/util/Interface\";\nimport { FeedbackCombFilter } from \"./FeedbackCombFilter\";\nimport { OnePoleFilter } from \"./OnePoleFilter\";\n\ninterface LowpassCombFilterOptions extends ToneAudioNodeOptions {\n\tdelayTime: Time;\n\tresonance: NormalRange;\n\tdampening: Frequency;\n}\n\n/**\n * A lowpass feedback comb filter. It is similar to\n * [[FeedbackCombFilter]], but includes a lowpass filter.\n * @category Component\n */\nexport class LowpassCombFilter extends ToneAudioNode<LowpassCombFilterOptions> {\n\n\treadonly name = \"LowpassCombFilter\";\n\n\t/**\n\t * The delay node\n\t */\n\tprivate _combFilter: FeedbackCombFilter;\n\n\t/**\n\t * The lowpass filter\n\t */\n\tprivate _lowpass: OnePoleFilter;\n\n\t/**\n\t * The delayTime of the comb filter.\n\t */\n\treadonly delayTime: Param<\"time\">;\n\n\t/**\n\t * The amount of feedback of the delayed signal.\n\t */\n\treadonly resonance: Param<\"normalRange\">;\n\n\treadonly input: InputNode;\n\treadonly output: OutputNode;\n\n\t/**\n\t * @param delayTime The delay time of the comb filter\n\t * @param resonance The resonance (feedback) of the comb filter\n\t * @param dampening The cutoff of the lowpass filter dampens the signal as it is fedback.\n\t */\n\tconstructor(delayTime?: Time, resonance?: NormalRange, dampening?: Frequency);\n\tconstructor(options?: RecursivePartial<LowpassCombFilterOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(LowpassCombFilter.getDefaults(), arguments, [\"delayTime\", \"resonance\", \"dampening\"]));\n\t\tconst options = optionsFromArguments(LowpassCombFilter.getDefaults(), arguments, [\"delayTime\", \"resonance\", \"dampening\"]);\n\n\t\tthis._combFilter = this.output = new FeedbackCombFilter({\n\t\t\tcontext: this.context,\n\t\t\tdelayTime: options.delayTime,\n\t\t\tresonance: options.resonance,\n\t\t});\n\t\tthis.delayTime = this._combFilter.delayTime;\n\t\tthis.resonance = this._combFilter.resonance;\n\n\t\tthis._lowpass = this.input = new OnePoleFilter({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.dampening,\n\t\t\ttype: \"lowpass\",\n\t\t});\n\n\t\t// connections\n\t\tthis._lowpass.connect(this._combFilter);\n\t}\n\n\tstatic getDefaults(): LowpassCombFilterOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tdampening: 3000,\n\t\t\tdelayTime: 0.1,\n\t\t\tresonance: 0.5,\n\t\t});\n\t}\n\t\n\t/**\n\t * The dampening control of the feedback\n\t */\n\tget dampening(): Frequency {\n\t\treturn this._lowpass.frequency;\n\t}\n\tset dampening(fq) {\n\t\tthis._lowpass.frequency = fq;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._combFilter.dispose();\n\t\tthis._lowpass.dispose();\n\t\treturn this;\n\t}\n}\n","import { Frequency, NormalRange, Time } from \"../core/type/Units\";\nimport { LowpassCombFilter } from \"../component/filter/LowpassCombFilter\";\nimport { deepMerge } from \"../core/util/Defaults\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { RecursivePartial } from \"../core/util/Interface\";\nimport { Noise } from \"../source/Noise\";\nimport { Instrument, InstrumentOptions } from \"./Instrument\";\n\nexport interface PluckSynthOptions extends InstrumentOptions {\n\tattackNoise: number;\n\tdampening: Frequency;\n\tresonance: NormalRange;\n\trelease: Time;\n}\n\n/**\n * Karplus-String string synthesis.\n * @example\n * import { PluckSynth } from \"tone\";\n * const plucky = new PluckSynth().toDestination();\n * plucky.triggerAttack(\"C4\", \"+0.5\");\n * plucky.triggerAttack(\"C3\", \"+1\");\n * plucky.triggerAttack(\"C2\", \"+1.5\");\n * plucky.triggerAttack(\"C1\", \"+2\");\n * @category Instrument\n */\nexport class PluckSynth extends Instrument<PluckSynthOptions> {\n\n\treadonly name = \"PluckSynth\";\n\n\t/**\n\t * Noise burst at the beginning\n\t */\n\tprivate _noise: Noise;\n\tprivate _lfcf: LowpassCombFilter;\n\n\t/**\n\t * The amount of noise at the attack.\n\t * Nominal range of [0.1, 20]\n\t * @min 0.1\n\t * @max 20\n\t */\n\tattackNoise: number;\n\n\t/**\n\t * The amount of resonance of the pluck. Also correlates to the sustain duration.\n\t */\n\tresonance: NormalRange;\n\n\t/**\n\t * The release time which corresponds to a resonance ramp down to 0\n\t */\n\trelease: Time;\n\n\tconstructor(options?: RecursivePartial<PluckSynthOptions>)\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(PluckSynth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(PluckSynth.getDefaults(), arguments);\n\n\t\tthis._noise = new Noise({\n\t\t\tcontext: this.context,\n\t\t\ttype: \"pink\"\n\t\t});\n\n\t\tthis.attackNoise = options.attackNoise;\n\n\t\tthis._lfcf = new LowpassCombFilter({\n\t\t\tcontext: this.context,\n\t\t\tdampening: options.dampening,\n\t\t\tresonance: options.resonance,\n\t\t});\n\n\t\tthis.resonance = options.resonance;\n\t\tthis.release = options.release;\n\n\t\tthis._noise.connect(this._lfcf);\n\t\tthis._lfcf.connect(this.output);\n\t}\n\n\tstatic getDefaults(): PluckSynthOptions {\n\t\treturn deepMerge(Instrument.getDefaults(), {\n\t\t\tattackNoise: 1,\n\t\t\tdampening: 4000,\n\t\t\tresonance: 0.7,\n\t\t\trelease: 1,\n\t\t});\n\t}\n\n\t/**\n\t * The dampening control. i.e. the lowpass filter frequency of the comb filter\n\t * @min 0\n\t * @max 7000\n\t */\n\tget dampening(): Frequency {\n\t\treturn this._lfcf.dampening;\n\t}\n\tset dampening(fq) {\n\t\tthis._lfcf.dampening = fq;\n\t}\n\n\ttriggerAttack(note: Frequency, time?: Time): this {\n\t\tconst freq = this.toFrequency(note);\n\t\ttime = this.toSeconds(time);\n\t\tconst delayAmount = 1 / freq;\n\t\tthis._lfcf.delayTime.setValueAtTime(delayAmount, time);\n\t\tthis._noise.start(time);\n\t\tthis._noise.stop(time + delayAmount * this.attackNoise);\n\t\tthis._lfcf.resonance.cancelScheduledValues(time);\n\t\tthis._lfcf.resonance.setValueAtTime(this.resonance, time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Ramp down the [[resonance]] to 0 over the duration of the release time.\n\t */\n\ttriggerRelease(time?: Time): this{\n\t\tthis._lfcf.resonance.linearRampTo(0, this.release, time);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._noise.dispose();\n\t\tthis._lfcf.dispose();\n\t\treturn this;\n\t}\n}\n","import { MidiClass } from \"../core/type/Midi\";\nimport { Frequency, MidiNote, NormalRange, Seconds, Time } from \"../core/type/Units\";\nimport { deepMerge, omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { RecursivePartial } from \"../core/util/Interface\";\nimport { isArray, isNumber } from \"../core/util/TypeCheck\";\nimport { Instrument, InstrumentOptions } from \"./Instrument\";\nimport { MembraneSynth, MembraneSynthOptions } from \"./MembraneSynth\";\nimport { FMSynth, FMSynthOptions } from \"./FMSynth\";\nimport { AMSynth, AMSynthOptions } from \"./AMSynth\";\nimport { MetalSynth, MetalSynthOptions } from \"./MetalSynth\";\nimport { Monophonic } from \"./Monophonic\";\nimport { Synth, SynthOptions } from \"./Synth\";\nimport { assert, warn } from \"../core/util/Debug\";\n\ntype VoiceConstructor<V> = {\n\tgetDefaults: () => VoiceOptions<V>;\n} & (new (...args: any[]) => V);\n\ntype OmitMonophonicOptions<T> = Omit<T, \"context\" | \"onsilence\">;\n\ntype VoiceOptions<T> =\n\tT extends MembraneSynth ? MembraneSynthOptions :\n\t\tT extends MetalSynth ? MetalSynthOptions :\n\t\t\tT extends FMSynth ? FMSynthOptions :\n\t\t\t\tT extends AMSynth ? AMSynthOptions :\n\t\t\t\t\tT extends Synth ? SynthOptions :\n\t\t\t\t\t\tnever;\n\n/**\n * The settable synth options. excludes monophonic options.\n */\ntype PartialVoiceOptions<T> = RecursivePartial<OmitMonophonicOptions<VoiceOptions<T>>>;\n\nexport interface PolySynthOptions<Voice> extends InstrumentOptions {\n\tmaxPolyphony: number;\n\tvoice: VoiceConstructor<Voice>;\n\toptions: PartialVoiceOptions<Voice>;\n}\n\n/**\n * PolySynth handles voice creation and allocation for any\n * instruments passed in as the second paramter. PolySynth is\n * not a synthesizer by itself, it merely manages voices of\n * one of the other types of synths, allowing any of the\n * monophonic synthesizers to be polyphonic.\n *\n * @example\n * import { PolySynth } from \"tone\";\n * const synth = new PolySynth().toDestination();\n * // set the attributes across all the voices using 'set'\n * synth.set({ detune: -1200 });\n * // play a chord\n * synth.triggerAttackRelease([\"C4\", \"E4\", \"A4\"], 1);\n * @category Instrument\n */\nexport class PolySynth<Voice extends Monophonic<any> = Synth> extends Instrument<VoiceOptions<Voice>> {\n\n\treadonly name: string = \"PolySynth\";\n\n\t/**\n\t * The voices which are not currently in use\n\t */\n\tprivate _availableVoices: Voice[] = [];\n\n\t/**\n\t * The currently active voices\n\t */\n\tprivate _activeVoices: Array<{midi: MidiNote; voice: Voice; released: boolean}> = [];\n\n\t/**\n\t * All of the allocated voices for this synth.\n\t */\n\tprivate _voices: Voice[] = [];\n\n\t/**\n\t * The options that are set on the synth.\n\t */\n\tprivate options: VoiceOptions<Voice>;\n\n\t/**\n\t * The polyphony limit.\n\t */\n\tmaxPolyphony: number;\n\n\t/**\n\t * The voice constructor\n\t */\n\tprivate readonly voice: VoiceConstructor<Voice>;\n\n\t/**\n\t * A voice used for holding the get/set values\n\t */\n\tprivate _dummyVoice: Voice;\n\n\t/**\n\t * The GC timeout. Held so that it could be cancelled when the node is disposed.\n\t */\n\tprivate _gcTimeout = -1;\n\n\t/**\n\t * A moving average of the number of active voices\n\t */\n\tprivate _averageActiveVoices = 0;\n\n\t/**\n\t * @param voice The constructor of the voices\n\t * @param options\tThe options object to set the synth voice\n\t */\n\tconstructor(\n\t\tvoice?: VoiceConstructor<Voice>,\n\t\toptions?: PartialVoiceOptions<Voice>,\n\t);\n\tconstructor(options?: Partial<PolySynthOptions<Voice>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(PolySynth.getDefaults(), arguments, [\"voice\", \"options\"]));\n\t\tconst options = optionsFromArguments(PolySynth.getDefaults(), arguments, [\"voice\", \"options\"]);\n\n\t\t// check against the old API (pre 14.3.0)\n\t\tassert(!isNumber(options.voice), \"DEPRECATED: The polyphony count is no longer the first argument.\");\n\n\t\tconst defaults = options.voice.getDefaults();\n\t\tthis.options = Object.assign(defaults, options.options) as VoiceOptions<Voice>;\n\t\tthis.voice = options.voice as unknown as VoiceConstructor<Voice>;\n\t\tthis.maxPolyphony = options.maxPolyphony;\n\n\t\t// create the first voice\n\t\tthis._dummyVoice = this._getNextAvailableVoice() as Voice;\n\t\t// remove it from the voices list\n\t\tconst index = this._voices.indexOf(this._dummyVoice);\n\t\tthis._voices.splice(index, 1);\n\t\t// kick off the GC interval\n\t\tthis._gcTimeout = this.context.setInterval(this._collectGarbage.bind(this), 1);\n\t}\n\n\tstatic getDefaults(): PolySynthOptions<Synth> {\n\t\treturn Object.assign(Instrument.getDefaults(), {\n\t\t\tmaxPolyphony: 32,\n\t\t\toptions: {},\n\t\t\tvoice: Synth,\n\t\t});\n\t}\n\n\t/**\n\t * The number of active voices.\n\t */\n\tget activeVoices(): number {\n\t\treturn this._activeVoices.length;\n\t}\n\n\t/**\n\t * Invoked when the source is done making sound, so that it can be\n\t * readded to the pool of available voices\n\t */\n\tprivate _makeVoiceAvailable(voice: Voice): void {\n\t\tthis._availableVoices.push(voice);\n\t\t// remove the midi note from 'active voices'\n\t\tconst activeVoiceIndex = this._activeVoices.findIndex((e) => e.voice === voice);\n\t\tthis._activeVoices.splice(activeVoiceIndex, 1);\n\t}\n\n\t/**\n\t * Get an available voice from the pool of available voices.\n\t * If one is not available and the maxPolyphony limit is reached,\n\t * steal a voice, otherwise return null.\n\t */\n\tprivate _getNextAvailableVoice(): Voice | undefined {\n\t\t// if there are available voices, return the first one\n\t\tif (this._availableVoices.length) {\n\t\t\treturn this._availableVoices.shift();\n\t\t} else if (this._voices.length < this.maxPolyphony) {\n\t\t\t// otherwise if there is still more maxPolyphony, make a new voice\n\t\t\tconst voice = new this.voice(Object.assign(this.options, {\n\t\t\t\tcontext: this.context,\n\t\t\t\tonsilence: this._makeVoiceAvailable.bind(this),\n\t\t\t}));\n\t\t\tvoice.connect(this.output);\n\t\t\tthis._voices.push(voice);\n\t\t\treturn voice;\n\t\t} else {\n\t\t\twarn(\"Max polyphony exceeded. Note dropped.\");\n\t\t}\n\t}\n\n\t/**\n\t * Occasionally check if there are any allocated voices which can be cleaned up.\n\t */\n\tprivate _collectGarbage(): void {\n\t\tthis._averageActiveVoices = Math.max(this._averageActiveVoices * 0.95, this.activeVoices);\n\t\tif (this._availableVoices.length && this._voices.length > Math.ceil(this._averageActiveVoices + 1)) {\n\t\t\t// take off an available note\n\t\t\tconst firstAvail = this._availableVoices.shift() as Voice;\n\t\t\tconst index = this._voices.indexOf(firstAvail);\n\t\t\tthis._voices.splice(index, 1);\n\t\t\tif (!this.context.isOffline) {\n\t\t\t\tfirstAvail.dispose();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Internal method which triggers the attack\n\t */\n\tprivate _triggerAttack(notes: Frequency[], time: Seconds, velocity?: NormalRange): void {\n\t\tnotes.forEach(note => {\n\t\t\tconst midiNote = new MidiClass(this.context, note).toMidi();\n\t\t\tconst voice = this._getNextAvailableVoice();\n\t\t\tif (voice) {\n\t\t\t\tvoice.triggerAttack(note, time, velocity);\n\t\t\t\tthis._activeVoices.push({\n\t\t\t\t\tmidi: midiNote, voice, released: false,\n\t\t\t\t});\n\t\t\t\tthis.log(\"triggerAttack\", note, time);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Internal method which triggers the release\n\t */\n\tprivate _triggerRelease(notes: Frequency[], time: Seconds): void {\n\t\tnotes.forEach(note => {\n\t\t\tconst midiNote = new MidiClass(this.context, note).toMidi();\n\t\t\tconst event = this._activeVoices.find(({ midi, released }) => midi === midiNote && !released);\n\t\t\tif (event) {\n\t\t\t\t// trigger release on that note\n\t\t\t\tevent.voice.triggerRelease(time);\n\t\t\t\t// mark it as released\n\t\t\t\tevent.released = true;\n\t\t\t\tthis.log(\"triggerRelease\", note, time);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Schedule the attack/release events. If the time is in the future, then it should set a timeout\n\t * to wait for just-in-time scheduling\n\t */\n\tprivate _scheduleEvent(type: \"attack\" | \"release\", notes: Frequency[], time: Seconds, velocity?: NormalRange): void {\n\t\tassert(!this.disposed, \"Synth was already disposed\");\n\t\t// if the notes are greater than this amount of time in the future, they should be scheduled with setTimeout\n\t\tif (time <= this.now()) {\n\t\t\t// do it immediately\n\t\t\tif (type === \"attack\") {\n\t\t\t\tthis._triggerAttack(notes, time, velocity);\n\t\t\t} else {\n\t\t\t\tthis._triggerRelease(notes, time);\n\t\t\t}\n\t\t} else {\n\t\t\t// schedule it to start in the future\n\t\t\tthis.context.setTimeout(() => {\n\t\t\t\tthis._scheduleEvent(type, notes, time, velocity);\n\t\t\t}, time - this.now());\n\t\t}\n\t}\n\n\t/**\n\t * Trigger the attack portion of the note\n\t * @param  notes The notes to play. Accepts a single Frequency or an array of frequencies.\n\t * @param  time  The start time of the note.\n\t * @param velocity The velocity of the note.\n\t * @example\n\t * import { FMSynth, now, PolySynth } from \"tone\";\n\t * const synth = new PolySynth(FMSynth).toDestination();\n\t * // trigger a chord immediately with a velocity of 0.2\n\t * synth.triggerAttack([\"Ab3\", \"C4\", \"F5\"], now(), 0.2);\n\t */\n\ttriggerAttack(notes: Frequency | Frequency[], time?: Time, velocity?: NormalRange): this {\n\n\t\tif (!Array.isArray(notes)) {\n\t\t\tnotes = [notes];\n\t\t}\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._scheduleEvent(\"attack\", notes, computedTime, velocity);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Trigger the release of the note. Unlike monophonic instruments,\n\t * a note (or array of notes) needs to be passed in as the first argument.\n\t * @param  notes The notes to play. Accepts a single Frequency or an array of frequencies.\n\t * @param  time  When the release will be triggered.\n\t * @example\n\t * @example\n\t * import { AMSynth, PolySynth } from \"tone\";\n\t * const poly = new PolySynth(AMSynth).toDestination();\n\t * poly.triggerAttack([\"Ab3\", \"C4\", \"F5\"]);\n\t * // trigger the release of the given notes. \n\t * poly.triggerRelease([\"Ab3\", \"C4\"], \"+1\");\n\t * poly.triggerRelease(\"F5\", \"+3\");\n\t */\n\ttriggerRelease(notes: Frequency | Frequency[], time?: Time): this {\n\t\tif (!Array.isArray(notes)) {\n\t\t\tnotes = [notes];\n\t\t}\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._scheduleEvent(\"release\", notes, computedTime);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Trigger the attack and release after the specified duration\n\t * @param  notes The notes to play. Accepts a single  Frequency or an array of frequencies.\n\t * @param  duration the duration of the note\n\t * @param  time  if no time is given, defaults to now\n\t * @param  velocity the velocity of the attack (0-1)\n\t * @example\n\t * import { AMSynth, PolySynth } from \"tone\";\n\t * const poly = new PolySynth(AMSynth).toDestination();\n\t * // can pass in an array of durations as well\n\t * poly.triggerAttackRelease([\"Eb3\", \"G4\", \"Bb4\", \"D5\"], [4, 3, 2, 1]);\n\t */\n\ttriggerAttackRelease(\n\t\tnotes: Frequency | Frequency[],\n\t\tduration: Time | Time[],\n\t\ttime?: Time,\n\t\tvelocity?: NormalRange,\n\t): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis.triggerAttack(notes, computedTime, velocity);\n\t\tif (isArray(duration)) {\n\t\t\tassert(isArray(notes), \"If the duration is an array, the notes must also be an array\");\n\t\t\tnotes = notes as Frequency[];\n\t\t\tfor (let i = 0; i < notes.length; i++) {\n\t\t\t\tconst d = duration[Math.min(i, duration.length - 1)];\n\t\t\t\tconst durationSeconds = this.toSeconds(d);\n\t\t\t\tassert(durationSeconds > 0, \"The duration must be greater than 0\");\n\t\t\t\tthis.triggerRelease(notes[i], computedTime + durationSeconds);\n\t\t\t}\n\t\t} else {\n\t\t\tconst durationSeconds = this.toSeconds(duration);\n\t\t\tassert(durationSeconds > 0, \"The duration must be greater than 0\");\n\t\t\tthis.triggerRelease(notes, computedTime + durationSeconds);\n\t\t}\n\t\treturn this;\n\t}\n\n\tsync(): this {\n\t\tthis._syncMethod(\"triggerAttack\", 1);\n\t\tthis._syncMethod(\"triggerRelease\", 1);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set a member/attribute of the voices\n\t * @example\n\t * import { PolySynth } from \"tone\";\n\t * const poly = new PolySynth().toDestination();\n\t * // set all of the voices using an options object for the synth type\n\t * poly.set({\n\t * \tenvelope: {\n\t * \t\tattack: 0.25\n\t * \t}\n\t * });\n\t * poly.triggerAttackRelease(\"Bb3\", 0.2);\n\t */\n\tset(options: RecursivePartial<VoiceOptions<Voice>>): this {\n\t\t// remove options which are controlled by the PolySynth\n\t\tconst sanitizedOptions = omitFromObject(options, [\"onsilence\", \"context\"]);\n\t\t// store all of the options\n\t\tthis.options = deepMerge(this.options, sanitizedOptions);\n\t\tthis._voices.forEach(voice => voice.set(sanitizedOptions));\n\t\tthis._dummyVoice.set(sanitizedOptions);\n\t\treturn this;\n\t}\n\n\tget(): VoiceOptions<Voice> {\n\t\treturn this._dummyVoice.get();\n\t}\n\n\t/**\n\t * Trigger the release portion of all the currently active voices immediately.\n\t * Useful for silencing the synth.\n\t */\n\treleaseAll(): this {\n\t\tconst now = this.now();\n\t\tthis._activeVoices.forEach(({ voice }) => {\n\t\t\tvoice.triggerRelease(now);\n\t\t});\n\t\tthis._activeVoices = [];\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._dummyVoice.dispose();\n\t\tthis._voices.forEach(v => v.dispose());\n\t\tthis._activeVoices = [];\n\t\tthis._availableVoices = [];\n\t\tthis.context.clearInterval(this._gcTimeout);\n\t\treturn this;\n\t}\n}\n","import { ToneAudioBuffer } from \"../core/context/ToneAudioBuffer\";\nimport { ToneAudioBuffers } from \"../core/context/ToneAudioBuffers\";\nimport { intervalToFrequencyRatio } from \"../core/type/Conversions\";\nimport { FrequencyClass } from \"../core/type/Frequency\";\nimport { Frequency, Interval, MidiNote, NormalRange, Note, Time } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { isArray, isNote, isNumber } from \"../core/util/TypeCheck\";\nimport { Instrument, InstrumentOptions } from \"../instrument/Instrument\";\nimport { ToneBufferSource, ToneBufferSourceCurve } from \"../source/buffer/ToneBufferSource\";\nimport { timeRange } from \"../core/util/Decorator\";\nimport { assert } from \"../core/util/Debug\";\n\ninterface SamplesMap {\n\t[note: string]: ToneAudioBuffer | AudioBuffer | string;\n\t[midi: number]: ToneAudioBuffer | AudioBuffer | string;\n}\n\nexport interface SamplerOptions extends InstrumentOptions {\n\tattack: Time;\n\trelease: Time;\n\tonload: () => void;\n\tonerror: (error: Error) => void;\n\tbaseUrl: string;\n\tcurve: ToneBufferSourceCurve;\n\turls: SamplesMap;\n}\n\n/**\n * Pass in an object which maps the note's pitch or midi value to the url,\n * then you can trigger the attack and release of that note like other instruments.\n * By automatically repitching the samples, it is possible to play pitches which\n * were not explicitly included which can save loading time.\n *\n * For sample or buffer playback where repitching is not necessary,\n * use [[Player]].\n * @example\n * import { Sampler } from \"tone\";\n * const sampler = new Sampler({\n * \turls: {\n * \t\tC1: \"C1.mp3\",\n * \t\tC2: \"C2.mp3\",\n * \t},\n * \tbaseUrl: \"https://tonejs.github.io/examples/audio/casio/\",\n * \tonload: () => {\n * \t\tsampler.triggerAttackRelease([\"C1\", \"E1\", \"G1\", \"B1\"], 0.5);\n * \t},\n * });\n * @category Instrument\n */\nexport class Sampler extends Instrument<SamplerOptions> {\n\n\treadonly name: string = \"Sampler\";\n\n\t/**\n\t * The stored and loaded buffers\n\t */\n\tprivate _buffers: ToneAudioBuffers;\n\n\t/**\n\t * The object of all currently playing BufferSources\n\t */\n\tprivate _activeSources: Map<MidiNote, ToneBufferSource[]> = new Map();\n\n\t/**\n\t * The envelope applied to the beginning of the sample.\n\t * @min 0\n\t * @max 1\n\t */\n\t@timeRange(0)\n\tattack: Time;\n\t\n\t/**\n\t * The envelope applied to the end of the envelope.\n\t * @min 0\n\t * @max 1\n\t */\n\t@timeRange(0)\n\trelease: Time;\n\n\t/**\n\t * The shape of the attack/release curve.\n\t * Either \"linear\" or \"exponential\"\n\t */\n\tcurve: ToneBufferSourceCurve;\n\n\t/**\n\t * @param samples An object of samples mapping either Midi Note Numbers or\n\t * \t\t\tScientific Pitch Notation to the url of that sample.\n\t * @param onload The callback to invoke when all of the samples are loaded.\n\t * @param baseUrl The root URL of all of the samples, which is prepended to all the URLs.\n\t */\n\tconstructor(samples?: SamplesMap, onload?: () => void, baseUrl?: string);\n\t/**\n\t * @param samples An object of samples mapping either Midi Note Numbers or\n\t * \t\t\tScientific Pitch Notation to the url of that sample.\n\t * @param options The remaining options associated with the sampler\n\t */\n\tconstructor(samples?: SamplesMap, options?: Partial<Omit<SamplerOptions, \"urls\">>);\n\tconstructor(options?: Partial<SamplerOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Sampler.getDefaults(), arguments, [\"urls\", \"onload\", \"baseUrl\"], \"urls\"));\n\t\tconst options = optionsFromArguments(Sampler.getDefaults(), arguments, [\"urls\", \"onload\", \"baseUrl\"], \"urls\");\n\n\t\tconst urlMap = {};\n\t\tObject.keys(options.urls).forEach((note) => {\n\t\t\tconst noteNumber = parseInt(note, 10);\n\t\t\tassert(isNote(note)\n\t\t\t\t|| (isNumber(noteNumber) && isFinite(noteNumber)), `url key is neither a note or midi pitch: ${note}`);\n\t\t\tif (isNote(note)) {\n\t\t\t\t// convert the note name to MIDI\n\t\t\t\tconst mid = new FrequencyClass(this.context, note).toMidi();\n\t\t\t\turlMap[mid] = options.urls[note];\n\t\t\t} else if (isNumber(noteNumber) && isFinite(noteNumber)) {\n\t\t\t\t// otherwise if it's numbers assume it's midi\n\t\t\t\turlMap[noteNumber] = options.urls[noteNumber];\n\t\t\t}\n\t\t});\n\n\t\tthis._buffers = new ToneAudioBuffers({\n\t\t\turls: urlMap, \n\t\t\tonload: options.onload, \n\t\t\tbaseUrl: options.baseUrl,\n\t\t\tonerror: options.onerror,\n\t\t});\n\t\tthis.attack = options.attack;\n\t\tthis.release = options.release;\n\t\tthis.curve = options.curve;\n\n\t\t// invoke the callback if it's already loaded\n\t\tif (this._buffers.loaded) {\n\t\t\t// invoke onload deferred\n\t\t\tPromise.resolve().then(options.onload);\n\t\t}\n\t}\n\n\tstatic getDefaults(): SamplerOptions {\n\t\treturn Object.assign(Instrument.getDefaults(), {\n\t\t\tattack: 0,\n\t\t\tbaseUrl: \"\",\n\t\t\tcurve: \"exponential\" as \"exponential\",\n\t\t\tonload: noOp,\n\t\t\tonerror: noOp,\n\t\t\trelease: 0.1,\n\t\t\turls: {},\n\t\t});\n\t}\n\n\t/**\n\t * Returns the difference in steps between the given midi note at the closets sample.\n\t */\n\tprivate _findClosest(midi: MidiNote): Interval {\n\t\t// searches within 8 octaves of the given midi note\n\t\tconst MAX_INTERVAL = 96;\n\t\tlet interval = 0;\n\t\twhile (interval < MAX_INTERVAL) {\n\t\t\t// check above and below\n\t\t\tif (this._buffers.has(midi + interval)) {\n\t\t\t\treturn -interval;\n\t\t\t} else if (this._buffers.has(midi - interval)) {\n\t\t\t\treturn interval;\n\t\t\t}\n\t\t\tinterval++;\n\t\t}\n\t\tthrow new Error(`No available buffers for note: ${midi}`);\n\t}\n\n\t/**\n\t * @param  notes\tThe note to play, or an array of notes.\n\t * @param  time     When to play the note\n\t * @param  velocity The velocity to play the sample back.\n\t */\n\ttriggerAttack(notes: Frequency | Frequency[], time?: Time, velocity: NormalRange = 1): this {\n\t\tthis.log(\"triggerAttack\", notes, time, velocity);\n\t\tif (!Array.isArray(notes)) {\n\t\t\tnotes = [notes];\n\t\t}\n\t\tnotes.forEach(note => {\n\t\t\tconst midi = new FrequencyClass(this.context, note).toMidi();\n\t\t\t// find the closest note pitch\n\t\t\tconst difference = this._findClosest(midi);\n\t\t\tconst closestNote = midi - difference;\n\t\t\tconst buffer = this._buffers.get(closestNote);\n\t\t\tconst playbackRate = intervalToFrequencyRatio(difference);\n\t\t\t// play that note\n\t\t\tconst source = new ToneBufferSource({\n\t\t\t\turl: buffer,\n\t\t\t\tcontext: this.context,\n\t\t\t\tcurve: this.curve,\n\t\t\t\tfadeIn: this.attack,\n\t\t\t\tfadeOut: this.release,\n\t\t\t\tplaybackRate,\n\t\t\t}).connect(this.output);\n\t\t\tsource.start(time, 0, buffer.duration / playbackRate, velocity);\n\t\t\t// add it to the active sources\n\t\t\tif (!isArray(this._activeSources.get(midi))) {\n\t\t\t\tthis._activeSources.set(midi, []);\n\t\t\t}\n\t\t\t(this._activeSources.get(midi) as ToneBufferSource[]).push(source);\n\n\t\t\t// remove it when it's done\n\t\t\tsource.onended = () => {\n\t\t\t\tif (this._activeSources && this._activeSources.has(midi)) {\n\t\t\t\t\tconst sources = this._activeSources.get(midi) as ToneBufferSource[];\n\t\t\t\t\tconst index = sources.indexOf(source);\n\t\t\t\t\tif (index !== -1) {\n\t\t\t\t\t\tsources.splice(index, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * @param  notes\tThe note to release, or an array of notes.\n\t * @param  time     \tWhen to release the note.\n\t */\n\ttriggerRelease(notes: Frequency | Frequency[], time?: Time): this {\n\t\tthis.log(\"triggerRelease\", notes, time);\n\t\tif (!Array.isArray(notes)) {\n\t\t\tnotes = [notes];\n\t\t}\n\t\tnotes.forEach(note => {\n\t\t\tconst midi = new FrequencyClass(this.context, note).toMidi();\n\t\t\t// find the note\n\t\t\tif (this._activeSources.has(midi) && (this._activeSources.get(midi) as ToneBufferSource[]).length) {\n\t\t\t\tconst sources = this._activeSources.get(midi) as ToneBufferSource[];\n\t\t\t\ttime = this.toSeconds(time);\n\t\t\t\tsources.forEach(source => {\n\t\t\t\t\tsource.stop(time);\n\t\t\t\t});\n\t\t\t\tthis._activeSources.set(midi, []);\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Release all currently active notes.\n\t * @param  time     \tWhen to release the notes.\n\t */\n\treleaseAll(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._activeSources.forEach(sources => {\n\t\t\twhile (sources.length) {\n\t\t\t\tconst source = sources.shift() as ToneBufferSource;\n\t\t\t\tsource.stop(computedTime);\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\tsync(): this {\n\t\tthis._syncMethod(\"triggerAttack\", 1);\n\t\tthis._syncMethod(\"triggerRelease\", 1);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Invoke the attack phase, then after the duration, invoke the release.\n\t * @param  notes\tThe note to play and release, or an array of notes.\n\t * @param  duration The time the note should be held\n\t * @param  time     When to start the attack\n\t * @param  velocity The velocity of the attack\n\t */\n\ttriggerAttackRelease(\n\t\tnotes: Frequency[] | Frequency,\n\t\tduration: Time | Time[],\n\t\ttime?: Time,\n\t\tvelocity: NormalRange = 1,\n\t): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis.triggerAttack(notes, computedTime, velocity);\n\t\tif (isArray(duration)) {\n\t\t\tassert(isArray(notes), \"notes must be an array when duration is array\");\n\t\t\t(notes as Frequency[]).forEach((note, index) => {\n\t\t\t\tconst d = duration[Math.min(index, duration.length - 1)];\n\t\t\t\tthis.triggerRelease(note, computedTime + this.toSeconds(d));\n\t\t\t});\n\t\t} else {\n\t\t\tthis.triggerRelease(notes, computedTime + this.toSeconds(duration));\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a note to the sampler.\n\t * @param  note      The buffer's pitch.\n\t * @param  url  Either the url of the buffer, or a buffer which will be added with the given name.\n\t * @param  callback  The callback to invoke when the url is loaded.\n\t */\n\tadd(note: Note | MidiNote, url: string | ToneAudioBuffer | AudioBuffer, callback?: () => void): this {\n\t\tassert(isNote(note) || isFinite(note), `note must be a pitch or midi: ${note}`);\n\t\tif (isNote(note)) {\n\t\t\t// convert the note name to MIDI\n\t\t\tconst mid = new FrequencyClass(this.context, note).toMidi();\n\t\t\tthis._buffers.add(mid, url, callback);\n\t\t} else {\n\t\t\t// otherwise if it's numbers assume it's midi\n\t\t\tthis._buffers.add(note, url, callback);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * If the buffers are loaded or not\n\t */\n\tget loaded(): boolean {\n\t\treturn this._buffers.loaded;\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._buffers.dispose();\n\t\tthis._activeSources.forEach(sources => {\n\t\t\tsources.forEach(source => source.dispose());\n\t\t});\n\t\tthis._activeSources.clear();\n\t\treturn this;\n\t}\n}\n","import \"../core/clock/Transport\";\nimport { ToneWithContext, ToneWithContextOptions } from \"../core/context/ToneWithContext\";\nimport { TicksClass } from \"../core/type/Ticks\";\nimport { TransportTimeClass } from \"../core/type/TransportTime\";\nimport { NormalRange, Positive, Seconds, Ticks, Time, TransportTime } from \"../core/type/Units\";\nimport { defaultArg, optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { BasicPlaybackState, StateTimeline } from \"../core/util/StateTimeline\";\nimport { isBoolean, isNumber } from \"../core/util/TypeCheck\";\n\nexport type ToneEventCallback<T> = (time: Seconds, value: T) => void;\n\nexport interface ToneEventOptions<T> extends ToneWithContextOptions {\n\tcallback: ToneEventCallback<T>;\n\tloop: boolean | number;\n\tloopEnd: Time;\n\tloopStart: Time;\n\tplaybackRate: Positive;\n\tvalue?: T;\n\tprobability: NormalRange;\n\tmute: boolean;\n\thumanize: boolean | Time;\n}\n\n/**\n * ToneEvent abstracts away this.context.transport.schedule and provides a schedulable\n * callback for a single or repeatable events along the timeline.\n *\n * @example\n * import { PolySynth, Sequence, ToneEvent, Transport } from \"tone\";\n * \n * const synth = new PolySynth().toDestination();\n * const chordEvent = new ToneEvent(((time, chord) => {\n * \t// the chord as well as the exact time of the event\n * \t// are passed in as arguments to the callback function\n * \tsynth.triggerAttackRelease(chord, 0.5, time);\n * }), [\"D4\", \"E4\", \"F4\"]);\n * // start the chord at the beginning of the transport timeline\n * chordEvent.start();\n * // loop it every measure for 8 measures\n * chordEvent.loop = 8;\n * chordEvent.loopEnd = \"1m\";\n * @category Event\n */\nexport class ToneEvent<ValueType = any> extends ToneWithContext<ToneEventOptions<ValueType>> {\n\n\treadonly name: string = \"ToneEvent\";\n\n\t/**\n\t * Loop value\n\t */\n\tprotected _loop: boolean | number;\n\n\t/**\n\t * The callback to invoke.\n\t */\n\tcallback: ToneEventCallback<ValueType>;\n\n\t/**\n\t * The value which is passed to the\n\t * callback function.\n\t */\n\tvalue: ValueType;\n\n\t/**\n\t * When the note is scheduled to start.\n\t */\n\tprotected _loopStart: Ticks;\n\n\t/**\n\t * When the note is scheduled to start.\n\t */\n\tprotected _loopEnd: Ticks;\n\n\t/**\n\t * Tracks the scheduled events\n\t */\n\tprotected _state: StateTimeline<{\n\t\tid: number;\n\t}> = new StateTimeline(\"stopped\");\n\n\t/**\n\t * The playback speed of the note. A speed of 1\n\t * is no change.\n\t */\n\tprotected _playbackRate: Positive;\n\n\t/**\n\t * A delay time from when the event is scheduled to start\n\t */\n\tprotected _startOffset: Ticks = 0;\n\n\t/**\n\t * private holder of probability value\n\t */\n\tprotected _probability: NormalRange;\n\n\t/**\n\t * the amount of variation from the given time.\n\t */\n\tprotected _humanize: boolean | Time;\n\n\t/**\n\t * If mute is true, the callback won't be invoked.\n\t */\n\tmute: boolean;\n\n\t/**\n\t * @param callback The callback to invoke at the time.\n\t * @param value The value or values which should be passed to the callback function on invocation.\n\t */\n\tconstructor(callback?: ToneEventCallback<ValueType>, value?: ValueType);\n\tconstructor(options?: Partial<ToneEventOptions<ValueType>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(ToneEvent.getDefaults(), arguments, [\"callback\", \"value\"]));\n\t\tconst options = optionsFromArguments(ToneEvent.getDefaults(), arguments, [\"callback\", \"value\"]);\n\n\t\tthis._loop = options.loop;\n\t\tthis.callback = options.callback;\n\t\tthis.value = options.value;\n\t\tthis._loopStart = this.toTicks(options.loopStart);\n\t\tthis._loopEnd = this.toTicks(options.loopEnd);\n\t\tthis._playbackRate = options.playbackRate;\n\t\tthis._probability = options.probability;\n\t\tthis._humanize = options.humanize;\n\t\tthis.mute = options.mute;\n\t\tthis._playbackRate = options.playbackRate;\n\t\tthis._state.increasing = true;\n\t\t// schedule the events for the first time\n\t\tthis._rescheduleEvents();\n\t}\n\n\tstatic getDefaults(): ToneEventOptions<any> {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tcallback: noOp,\n\t\t\thumanize: false,\n\t\t\tloop: false,\n\t\t\tloopEnd: \"1m\",\n\t\t\tloopStart: 0,\n\t\t\tmute: false,\n\t\t\tplaybackRate: 1,\n\t\t\tprobability: 1,\n\t\t\tvalue: null,\n\t\t});\n\t}\n\n\t/**\n\t * Reschedule all of the events along the timeline\n\t * with the updated values.\n\t * @param after Only reschedules events after the given time.\n\t */\n\tprivate _rescheduleEvents(after: Ticks = -1): void {\n\t\t// if no argument is given, schedules all of the events\n\t\tthis._state.forEachFrom(after, event => {\n\t\t\tlet duration;\n\t\t\tif (event.state === \"started\") {\n\t\t\t\tif (event.id !== -1) {\n\t\t\t\t\tthis.context.transport.clear(event.id);\n\t\t\t\t}\n\t\t\t\tconst startTick = event.time + Math.round(this.startOffset / this._playbackRate);\n\t\t\t\tif (this._loop === true || isNumber(this._loop) && this._loop > 1) {\n\t\t\t\t\tduration = Infinity;\n\t\t\t\t\tif (isNumber(this._loop)) {\n\t\t\t\t\t\tduration = (this._loop) * this._getLoopDuration();\n\t\t\t\t\t}\n\t\t\t\t\tconst nextEvent = this._state.getAfter(startTick);\n\t\t\t\t\tif (nextEvent !== null) {\n\t\t\t\t\t\tduration = Math.min(duration, nextEvent.time - startTick);\n\t\t\t\t\t}\n\t\t\t\t\tif (duration !== Infinity) {\n\t\t\t\t\t\t// schedule a stop since it's finite duration\n\t\t\t\t\t\tthis._state.setStateAtTime(\"stopped\", startTick + duration + 1, { id: -1 });\n\t\t\t\t\t\tduration = new TicksClass(this.context, duration);\n\t\t\t\t\t}\n\t\t\t\t\tconst interval = new TicksClass(this.context, this._getLoopDuration());\n\t\t\t\t\tevent.id = this.context.transport.scheduleRepeat(\n\t\t\t\t\t\tthis._tick.bind(this), interval, new TicksClass(this.context, startTick), duration);\n\t\t\t\t} else {\n\t\t\t\t\tevent.id = this.context.transport.schedule(this._tick.bind(this), new TicksClass(this.context, startTick));\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Returns the playback state of the note, either \"started\" or \"stopped\".\n\t */\n\tget state(): BasicPlaybackState {\n\t\treturn this._state.getValueAtTime(this.context.transport.ticks) as BasicPlaybackState;\n\t}\n\n\t/**\n\t * The start from the scheduled start time.\n\t */\n\tget startOffset(): Ticks {\n\t\treturn this._startOffset;\n\t}\n\tset startOffset(offset) {\n\t\tthis._startOffset = offset;\n\t}\n\n\t/**\n\t * The probability of the notes being triggered.\n\t */\n\tget probability(): NormalRange {\n\t\treturn this._probability;\n\t}\n\tset probability(prob) {\n\t\tthis._probability = prob;\n\t}\n\n\t/**\n\t * If set to true, will apply small random variation\n\t * to the callback time. If the value is given as a time, it will randomize\n\t * by that amount.\n\t * @example\n\t * import { ToneEvent } from \"tone\";\n\t * const event = new ToneEvent();\n\t * event.humanize = true;\n\t */\n\tget humanize(): Time | boolean {\n\t\treturn this._humanize;\n\t}\n\n\tset humanize(variation) {\n\t\tthis._humanize = variation;\n\t}\n\n\t/**\n\t * Start the note at the given time.\n\t * @param  time  When the event should start.\n\t */\n\tstart(time?: TransportTime | TransportTimeClass): this {\n\t\tconst ticks = this.toTicks(time);\n\t\tif (this._state.getValueAtTime(ticks) === \"stopped\") {\n\t\t\tthis._state.add({\n\t\t\t\tid: -1,\n\t\t\t\tstate: \"started\",\n\t\t\t\ttime: ticks,\n\t\t\t});\n\t\t\tthis._rescheduleEvents(ticks);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the Event at the given time.\n\t * @param  time  When the event should stop.\n\t */\n\tstop(time?: TransportTime | TransportTimeClass): this {\n\t\tthis.cancel(time);\n\t\tconst ticks = this.toTicks(time);\n\t\tif (this._state.getValueAtTime(ticks) === \"started\") {\n\t\t\tthis._state.setStateAtTime(\"stopped\", ticks, { id: -1 });\n\t\t\tconst previousEvent = this._state.getBefore(ticks);\n\t\t\tlet reschedulTime = ticks;\n\t\t\tif (previousEvent !== null) {\n\t\t\t\treschedulTime = previousEvent.time;\n\t\t\t}\n\t\t\tthis._rescheduleEvents(reschedulTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Cancel all scheduled events greater than or equal to the given time\n\t * @param  time  The time after which events will be cancel.\n\t */\n\tcancel(time?: TransportTime | TransportTimeClass): this {\n\t\ttime = defaultArg(time, -Infinity);\n\t\tconst ticks = this.toTicks(time);\n\t\tthis._state.forEachFrom(ticks, event => {\n\t\t\tthis.context.transport.clear(event.id);\n\t\t});\n\t\tthis._state.cancel(ticks);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The callback function invoker. Also\n\t * checks if the Event is done playing\n\t * @param  time  The time of the event in seconds\n\t */\n\tprotected _tick(time: Seconds): void {\n\t\tconst ticks = this.context.transport.getTicksAtTime(time);\n\t\tif (!this.mute && this._state.getValueAtTime(ticks) === \"started\") {\n\t\t\tif (this.probability < 1 && Math.random() > this.probability) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (this.humanize) {\n\t\t\t\tlet variation = 0.02;\n\t\t\t\tif (!isBoolean(this.humanize)) {\n\t\t\t\t\tvariation = this.toSeconds(this.humanize);\n\t\t\t\t}\n\t\t\t\ttime += (Math.random() * 2 - 1) * variation;\n\t\t\t}\n\t\t\tthis.callback(time, this.value);\n\t\t}\n\t}\n\n\t/**\n\t * Get the duration of the loop.\n\t */\n\tprotected _getLoopDuration(): Ticks {\n\t\treturn Math.round((this._loopEnd - this._loopStart) / this._playbackRate);\n\t}\n\n\t/**\n\t * If the note should loop or not\n\t * between ToneEvent.loopStart and\n\t * ToneEvent.loopEnd. If set to true,\n\t * the event will loop indefinitely,\n\t * if set to a number greater than 1\n\t * it will play a specific number of\n\t * times, if set to false, 0 or 1, the\n\t * part will only play once.\n\t */\n\tget loop(): boolean | number {\n\t\treturn this._loop;\n\t}\n\tset loop(loop) {\n\t\tthis._loop = loop;\n\t\tthis._rescheduleEvents();\n\t}\n\n\t/**\n\t * The playback rate of the note. Defaults to 1.\n\t * @example\n\t * import { ToneEvent } from \"tone\";\n\t * const note = new ToneEvent();\n\t * note.loop = true;\n\t * // repeat the note twice as fast\n\t * note.playbackRate = 2;\n\t */\n\tget playbackRate(): Positive {\n\t\treturn this._playbackRate;\n\t}\n\tset playbackRate(rate) {\n\t\tthis._playbackRate = rate;\n\t\tthis._rescheduleEvents();\n\t}\n\n\t/**\n\t * The loopEnd point is the time the event will loop\n\t * if ToneEvent.loop is true.\n\t */\n\tget loopEnd(): Time {\n\t\treturn new TicksClass(this.context, this._loopEnd).toSeconds();\n\t}\n\tset loopEnd(loopEnd) {\n\t\tthis._loopEnd = this.toTicks(loopEnd);\n\t\tif (this._loop) {\n\t\t\tthis._rescheduleEvents();\n\t\t}\n\t}\n\n\t/**\n\t * The time when the loop should start.\n\t */\n\tget loopStart(): Time {\n\t\treturn new TicksClass(this.context, this._loopStart).toSeconds();\n\t}\n\tset loopStart(loopStart) {\n\t\tthis._loopStart = this.toTicks(loopStart);\n\t\tif (this._loop) {\n\t\t\tthis._rescheduleEvents();\n\t\t}\n\t}\n\n\t/**\n\t * The current progress of the loop interval.\n\t * Returns 0 if the event is not started yet or\n\t * it is not set to loop.\n\t */\n\tget progress(): NormalRange {\n\t\tif (this._loop) {\n\t\t\tconst ticks = this.context.transport.ticks;\n\t\t\tconst lastEvent = this._state.get(ticks);\n\t\t\tif (lastEvent !== null && lastEvent.state === \"started\") {\n\t\t\t\tconst loopDuration = this._getLoopDuration();\n\t\t\t\tconst progress = (ticks - lastEvent.time) % loopDuration;\n\t\t\t\treturn progress / loopDuration;\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.cancel();\n\t\tthis._state.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneEvent } from \"./ToneEvent\";\nimport { NormalRange, Positive, Seconds, Time, TransportTime } from \"../core/type/Units\";\nimport { ToneWithContext, ToneWithContextOptions } from \"../core/context/ToneWithContext\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { BasicPlaybackState } from \"../core/util/StateTimeline\";\n\nexport interface LoopOptions extends ToneWithContextOptions {\n\tcallback: (time: Seconds) => void;\n\tinterval: Time;\n\tplaybackRate: Positive;\n\titerations: number;\n\tprobability: NormalRange;\n\tmute: boolean;\n\thumanize: boolean | Time;\n}\n\n/**\n * Loop creates a looped callback at the \n * specified interval. The callback can be \n * started, stopped and scheduled along\n * the Transport's timeline. \n * @example\n * import { Loop, Transport } from \"tone\";\n * const loop = new Loop((time) => {\n * \t// triggered every eighth note. \n * \tconsole.log(time);\n * }, \"8n\").start(0);\n * Transport.start();\n * @category Event\n */\nexport class Loop<Options extends LoopOptions = LoopOptions> extends ToneWithContext<Options> {\n\n\treadonly name: string = \"Loop\";\n\n\t/**\n\t * The event which produces the callbacks\n\t */\n\tprivate _event: ToneEvent;\n\n\t/**\n\t * The callback to invoke with the next event in the pattern\n\t */\n\tcallback: (time: Seconds) => void\n\n\t/**\n\t * @param callback The callback to invoke at the time.\n\t * @param interval The time between successive callback calls. \n\t */\n\tconstructor(callback?: (time: Seconds) => void, interval?: Time);\n\tconstructor(options?: Partial<LoopOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Loop.getDefaults(), arguments, [\"callback\", \"interval\"]));\n\t\tconst options = optionsFromArguments(Loop.getDefaults(), arguments, [\"callback\", \"interval\"]);\n\n\t\tthis._event = new ToneEvent({\n\t\t\tcontext: this.context,\n\t\t\tcallback: this._tick.bind(this),\n\t\t\tloop: true,\n\t\t\tloopEnd: options.interval,\n\t\t\tplaybackRate: options.playbackRate,\n\t\t\tprobability: options.probability\n\t\t});\n\n\t\tthis.callback = options.callback;\n\t\t// set the iterations\n\t\tthis.iterations = options.iterations;\n\t}\n\n\tstatic getDefaults(): LoopOptions {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tinterval: \"4n\",\n\t\t\tcallback: noOp,\n\t\t\tplaybackRate: 1,\n\t\t\titerations: Infinity,\n\t\t\tprobability: 1,\n\t\t\tmute: false,\n\t\t\thumanize: false\n\t\t});\n\t}\n\n\t/**\n\t * Start the loop at the specified time along the Transport's timeline.\n\t * @param  time  When to start the Loop.\n\t */\n\tstart(time?: TransportTime): this {\n\t\tthis._event.start(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the loop at the given time.\n\t * @param  time  When to stop the Loop.\n\t */\n\tstop(time?: TransportTime): this{\n\t\tthis._event.stop(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Cancel all scheduled events greater than or equal to the given time\n\t * @param  time  The time after which events will be cancel.\n\t */\n\tcancel(time?: TransportTime): this{\n\t\tthis._event.cancel(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Internal function called when the notes should be called\n\t * @param time  The time the event occurs\n\t */\n\tprotected _tick(time: Seconds): void {\n\t\tthis.callback(time);\n\t}\n\n\t/**\n\t * The state of the Loop, either started or stopped.\n\t */\n\tget state(): BasicPlaybackState {\n\t\treturn this._event.state;\n\t}\n\n\t/**\n\t * The progress of the loop as a value between 0-1. 0, when the loop is stopped or done iterating. \n\t */\n\tget progress(): NormalRange {\n\t\treturn this._event.progress;\n\t}\n\n\t/**\n\t * The time between successive callbacks. \n\t * @example\n\t * import { Loop, Transport } from \"tone\";\n\t * const loop = new Loop();\n\t * loop.interval = \"8n\"; // loop every 8n\n\t */\n\tget interval(): Time {\n\t\treturn this._event.loopEnd;\n\t}\n\tset interval(interval) {\n\t\tthis._event.loopEnd = interval;\n\t}\n\n\t/**\n\t * The playback rate of the loop. The normal playback rate is 1 (no change). \n\t * A `playbackRate` of 2 would be twice as fast. \n\t */\n\tget playbackRate(): Positive {\n\t\treturn this._event.playbackRate;\n\t}\n\tset playbackRate(rate) {\n\t\tthis._event.playbackRate = rate;\n\t}\n\n\t/**\n\t * Random variation +/-0.01s to the scheduled time. \n\t * Or give it a time value which it will randomize by.\n\t */\n\tget humanize(): boolean | Time {\n\t\treturn this._event.humanize;\n\t}\n\tset humanize(variation) {\n\t\tthis._event.humanize = variation;\n\t}\n\n\t/**\n\t * The probably of the callback being invoked.\n\t */\n\tget probability(): NormalRange {\n\t\treturn this._event.probability;\n\t}\n\n\tset probability(prob) {\n\t\tthis._event.probability = prob;\n\t}\n\n\t/**\n\t * Muting the Loop means that no callbacks are invoked.\n\t */\n\tget mute(): boolean {\n\t\treturn this._event.mute;\n\t}\n\n\tset mute(mute) {\n\t\tthis._event.mute = mute;\n\t}\n\n\t/**\n\t * The number of iterations of the loop. The default value is `Infinity` (loop forever).\n\t */\n\tget iterations(): number {\n\t\tif (this._event.loop === true) {\n\t\t\treturn Infinity;\n\t\t} else {\n\t\t\treturn this._event.loop as number;\n\t\t}\n\t}\n\tset iterations(iters) {\n\t\tif (iters === Infinity) {\n\t\t\tthis._event.loop = true;\n\t\t} else {\n\t\t\tthis._event.loop = iters;\n\t\t}\n\t}\n\n\tdispose(): this{\n\t\tsuper.dispose();\n\t\tthis._event.dispose();\n\t\treturn this;\n\t}\n}\n","import { TicksClass } from \"../core/type/Ticks\";\nimport { TransportTimeClass } from \"../core/type/TransportTime\";\nimport { NormalRange, Positive, Seconds, Ticks, Time, TransportTime } from \"../core/type/Units\";\nimport { defaultArg, optionsFromArguments } from \"../core/util/Defaults\";\nimport { StateTimeline } from \"../core/util/StateTimeline\";\nimport { isArray, isDefined, isObject, isUndef } from \"../core/util/TypeCheck\";\nimport { ToneEvent, ToneEventCallback, ToneEventOptions } from \"./ToneEvent\";\n\ntype CallbackType<T> =\n\tT extends {\n\t\ttime: Time;\n\t\t[key: string]: any;\n\t} ? T :\n\t\tT extends ArrayLike<any> ? T[1] :\n\t\t\tT extends Time ? null : never;\n\ninterface PartOptions<T> extends Omit<ToneEventOptions<CallbackType<T>>, \"value\"> {\n\tevents: T[];\n}\n\n/**\n * Part is a collection ToneEvents which can be started/stopped and looped as a single unit.\n *\n * @example\n * import { Part, Synth } from \"tone\";\n * const synth = new Synth().toDestination();\n * const part = new Part(((time, note) => {\n * \t// the notes given as the second element in the array\n * \t// will be passed in as the second argument\n * \tsynth.triggerAttackRelease(note, \"8n\", time);\n * }), [[0, \"C2\"], [\"0:2\", \"C3\"], [\"0:3:2\", \"G2\"]]);\n * @example\n * import { Part, Synth } from \"tone\";\n * const synth = new Synth().toDestination();\n * // use an array of objects as long as the object has a \"time\" attribute\n * const part = new Part(((time, value) => {\n * \t// the value is an object which contains both the note and the velocity\n * \tsynth.triggerAttackRelease(value.note, \"8n\", time, value.velocity);\n * }), [{ time: 0, note: \"C3\", velocity: 0.9 },\n * \t{ time: \"0:2\", note: \"C4\", velocity: 0.5 }\n * ]).start(0);\n * @category Event\n */\nexport class Part<ValueType = any> extends ToneEvent<ValueType> {\n\n\treadonly name: string = \"Part\";\n\n\t/**\n\t * Tracks the scheduled events\n\t */\n\tprotected _state: StateTimeline<{\n\t\tid: number;\n\t\toffset: number;\n\t}> = new StateTimeline(\"stopped\");\n\n\t/**\n\t * The events that belong to this part\n\t */\n\tprivate _events: Set<ToneEvent> = new Set();\n\n\t/**\n\t * @param callback The callback to invoke on each event\n\t * @param events the array of events\n\t */\n\tconstructor(callback?: ToneEventCallback<CallbackType<ValueType>>, value?: ValueType[]);\n\tconstructor(options?: Partial<PartOptions<ValueType>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Part.getDefaults(), arguments, [\"callback\", \"events\"]));\n\t\tconst options = optionsFromArguments(Part.getDefaults(), arguments, [\"callback\", \"events\"]);\n\n\t\t// make sure things are assigned in the right order\n\t\tthis._state.increasing = true;\n\n\t\t// add the events\n\t\toptions.events.forEach(event => {\n\t\t\tif (isArray(event)) {\n\t\t\t\tthis.add(event[0], event[1]);\n\t\t\t} else {\n\t\t\t\tthis.add(event);\n\t\t\t}\n\t\t});\n\t}\n\n\tstatic getDefaults(): PartOptions<any> {\n\t\treturn Object.assign(ToneEvent.getDefaults(), {\n\t\t\tevents: [],\n\t\t});\n\t}\n\n\t/**\n\t * Start the part at the given time.\n\t * @param  time    When to start the part.\n\t * @param  offset  The offset from the start of the part to begin playing at.\n\t */\n\tstart(time?: TransportTime, offset?: Time): this {\n\t\tconst ticks = this.toTicks(time);\n\t\tif (this._state.getValueAtTime(ticks) !== \"started\") {\n\t\t\toffset = defaultArg(offset, this._loop ? this._loopStart : 0);\n\t\t\tif (this._loop) {\n\t\t\t\toffset = defaultArg(offset, this._loopStart);\n\t\t\t} else {\n\t\t\t\toffset = defaultArg(offset, 0);\n\t\t\t}\n\t\t\tconst computedOffset = this.toTicks(offset);\n\t\t\tthis._state.add({\n\t\t\t\tid: -1,\n\t\t\t\toffset: computedOffset,\n\t\t\t\tstate: \"started\",\n\t\t\t\ttime: ticks,\n\t\t\t});\n\t\t\tthis._forEach(event => {\n\t\t\t\tthis._startNote(event, ticks, computedOffset);\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Start the event in the given event at the correct time given\n\t * the ticks and offset and looping.\n\t * @param  event\n\t * @param  ticks\n\t * @param  offset\n\t */\n\tprivate _startNote(event: ToneEvent, ticks: Ticks, offset: Ticks): void {\n\t\tticks -= offset;\n\t\tif (this._loop) {\n\t\t\tif (event.startOffset >= this._loopStart && event.startOffset < this._loopEnd) {\n\t\t\t\tif (event.startOffset < offset) {\n\t\t\t\t\t// start it on the next loop\n\t\t\t\t\tticks += this._getLoopDuration();\n\t\t\t\t}\n\t\t\t\tevent.start(new TicksClass(this.context, ticks));\n\t\t\t} else if (event.startOffset < this._loopStart && event.startOffset >= offset) {\n\t\t\t\tevent.loop = false;\n\t\t\t\tevent.start(new TicksClass(this.context, ticks));\n\t\t\t}\n\t\t} else if (event.startOffset >= offset) {\n\t\t\tevent.start(new TicksClass(this.context, ticks));\n\t\t}\n\t}\n\n\tget startOffset(): Ticks {\n\t\treturn this._startOffset;\n\t}\n\tset startOffset(offset) {\n\t\tthis._startOffset = offset;\n\t\tthis._forEach(event => {\n\t\t\tevent.startOffset += this._startOffset;\n\t\t});\n\t}\n\n\t/**\n\t * Stop the part at the given time.\n\t * @param  time  When to stop the part.\n\t */\n\tstop(time?: TransportTime): this {\n\t\tconst ticks = this.toTicks(time);\n\t\tthis._state.cancel(ticks);\n\t\tthis._state.setStateAtTime(\"stopped\", ticks);\n\t\tthis._forEach(event => {\n\t\t\tevent.stop(time);\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get/Set an Event's value at the given time.\n\t * If a value is passed in and no event exists at\n\t * the given time, one will be created with that value.\n\t * If two events are at the same time, the first one will\n\t * be returned.\n\t * @example\n\t * import { Part } from \"tone\";\n\t * const part = new Part();\n\t * part.at(\"1m\"); // returns the part at the first measure\n\t * part.at(\"2m\", \"C2\"); // set the value at \"2m\" to C2.\n\t * // if an event didn't exist at that time, it will be created.\n\t * @param time The time of the event to get or set.\n\t * @param value If a value is passed in, the value of the event at the given time will be set to it.\n\t */\n\tat(time: Time, value?: any): ToneEvent | null {\n\t\tconst timeInTicks = new TransportTimeClass(this.context, time).toTicks();\n\t\tconst tickTime = new TicksClass(this.context, 1).toSeconds();\n\n\t\tconst iterator = this._events.values();\n\t\tlet result = iterator.next();\n\t\twhile (!result.done) {\n\t\t\tconst event = result.value;\n\t\t\tif (Math.abs(timeInTicks - event.startOffset) < tickTime) {\n\t\t\t\tif (isDefined(value)) {\n\t\t\t\t\tevent.value = value;\n\t\t\t\t}\n\t\t\t\treturn event;\n\t\t\t}\n\t\t\tresult = iterator.next();\n\t\t}\n\t\t// if there was no event at that time, create one\n\t\tif (isDefined(value)) {\n\t\t\tthis.add(time, value);\n\t\t\t// return the new event\n\t\t\treturn this.at(time);\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * Add a an event to the part.\n\t * @param time The time the note should start. If an object is passed in, it should\n\t * \t\thave a 'time' attribute and the rest of the object will be used as the 'value'.\n\t * @param  value\n\t * @example\n\t * import { Part } from \"tone\";\n\t * const part = new Part();\n\t * part.add(\"1m\", \"C#+11\");\n\t */\n\tadd(obj: {\n\t\ttime: Time;\n\t\t[key: string]: any;\n\t}): this;\n\tadd(time: Time, value?: any): this;\n\tadd(time: Time | object, value?: any): this {\n\t\t// extract the parameters\n\t\tif (time instanceof Object && Reflect.has(time, \"time\")) {\n\t\t\tvalue = time;\n\t\t\ttime = value.time;\n\t\t}\n\t\tconst ticks = this.toTicks(time);\n\t\tlet event: ToneEvent;\n\t\tif (value instanceof ToneEvent) {\n\t\t\tevent = value;\n\t\t\tevent.callback = this._tick.bind(this);\n\t\t} else {\n\t\t\tevent = new ToneEvent({\n\t\t\t\tcallback: this._tick.bind(this),\n\t\t\t\tcontext: this.context,\n\t\t\t\tvalue,\n\t\t\t});\n\t\t}\n\t\t// the start offset\n\t\tevent.startOffset = ticks;\n\n\t\t// initialize the values\n\t\tevent.set({\n\t\t\thumanize: this.humanize,\n\t\t\tloop: this.loop,\n\t\t\tloopEnd: this.loopEnd,\n\t\t\tloopStart: this.loopStart,\n\t\t\tplaybackRate: this.playbackRate,\n\t\t\tprobability: this.probability,\n\t\t});\n\n\t\tthis._events.add(event);\n\n\t\t// start the note if it should be played right now\n\t\tthis._restartEvent(event);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Restart the given event\n\t */\n\tprivate _restartEvent(event: ToneEvent): void {\n\t\tthis._state.forEach((stateEvent) => {\n\t\t\tif (stateEvent.state === \"started\") {\n\t\t\t\tthis._startNote(event, stateEvent.time, stateEvent.offset);\n\t\t\t} else {\n\t\t\t\t// stop the note\n\t\t\t\tevent.stop(new TicksClass(this.context, stateEvent.time));\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Remove an event from the part. If the event at that time is a Part,\n\t * it will remove the entire part.\n\t * @param time The time of the event\n\t * @param value Optionally select only a specific event value\n\t */\n\tremove(obj: {\n\t\ttime: Time;\n\t\t[key: string]: any;\n\t}): this;\n\tremove(time: Time, value?: any): this;\n\tremove(time: Time | object, value?: any): this {\n\t\t// extract the parameters\n\t\tif (isObject(time) && time.hasOwnProperty(\"time\")) {\n\t\t\tvalue = time;\n\t\t\ttime = value.time;\n\t\t}\n\t\ttime = this.toTicks(time);\n\t\tthis._events.forEach(event => {\n\t\t\tif (event.startOffset === time) {\n\t\t\t\tif (isUndef(value) || (isDefined(value) && event.value === value)) {\n\t\t\t\t\tthis._events.delete(event);\n\t\t\t\t\tevent.dispose();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Remove all of the notes from the group.\n\t */\n\tclear(): this {\n\t\tthis._forEach(event => event.dispose());\n\t\tthis._events.clear();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Cancel scheduled state change events: i.e. \"start\" and \"stop\".\n\t * @param after The time after which to cancel the scheduled events.\n\t */\n\tcancel(after?: TransportTime | TransportTimeClass): this {\n\t\tthis._forEach(event => event.cancel(after));\n\t\tthis._state.cancel(this.toTicks(after));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Iterate over all of the events\n\t */\n\tprivate _forEach(callback: (event: ToneEvent) => void): this {\n\t\tif (this._events) {\n\t\t\tthis._events.forEach(event => {\n\t\t\t\tif (event instanceof Part) {\n\t\t\t\t\tevent._forEach(callback);\n\t\t\t\t} else {\n\t\t\t\t\tcallback(event);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set the attribute of all of the events\n\t * @param  attr  the attribute to set\n\t * @param  value      The value to set it to\n\t */\n\tprivate _setAll(attr: string, value: any): void {\n\t\tthis._forEach(event => {\n\t\t\tevent[attr] = value;\n\t\t});\n\t}\n\n\t/**\n\t * Internal tick method\n\t * @param  time  The time of the event in seconds\n\t */\n\tprotected _tick(time: Seconds, value?: any): void {\n\t\tif (!this.mute) {\n\t\t\tthis.callback(time, value);\n\t\t}\n\t}\n\n\t/**\n\t * Determine if the event should be currently looping\n\t * given the loop boundries of this Part.\n\t * @param  event  The event to test\n\t */\n\tprivate _testLoopBoundries(event: ToneEvent): void {\n\t\tif (this._loop && (event.startOffset < this._loopStart || event.startOffset >= this._loopEnd)) {\n\t\t\tevent.cancel(0);\n\t\t} else if (event.state === \"stopped\") {\n\t\t\t// reschedule it if it's stopped\n\t\t\tthis._restartEvent(event);\n\t\t}\n\t}\n\n\tget probability(): NormalRange {\n\t\treturn this._probability;\n\t}\n\tset probability(prob) {\n\t\tthis._probability = prob;\n\t\tthis._setAll(\"probability\", prob);\n\t}\n\n\tget humanize(): boolean | Time {\n\t\treturn this._humanize;\n\t}\n\tset humanize(variation) {\n\t\tthis._humanize = variation;\n\t\tthis._setAll(\"humanize\", variation);\n\t}\n\n\t/**\n\t * If the part should loop or not\n\t * between Part.loopStart and\n\t * Part.loopEnd. If set to true,\n\t * the part will loop indefinitely,\n\t * if set to a number greater than 1\n\t * it will play a specific number of\n\t * times, if set to false, 0 or 1, the\n\t * part will only play once.\n\t * @example\n\t * import { Part } from \"tone\";\n\t * const part = new Part();\n\t * // loop the part 8 times\n\t * part.loop = 8;\n\t */\n\tget loop(): boolean | number {\n\t\treturn this._loop;\n\t}\n\tset loop(loop) {\n\t\tthis._loop = loop;\n\t\tthis._forEach(event => {\n\t\t\tevent.loopStart = this.loopStart;\n\t\t\tevent.loopEnd = this.loopEnd;\n\t\t\tevent.loop = loop;\n\t\t\tthis._testLoopBoundries(event);\n\t\t});\n\t}\n\n\t/**\n\t * The loopEnd point determines when it will\n\t * loop if Part.loop is true.\n\t */\n\tget loopEnd(): Time {\n\t\treturn new TicksClass(this.context, this._loopEnd).toSeconds();\n\t}\n\tset loopEnd(loopEnd) {\n\t\tthis._loopEnd = this.toTicks(loopEnd);\n\t\tif (this._loop) {\n\t\t\tthis._forEach(event => {\n\t\t\t\tevent.loopEnd = loopEnd;\n\t\t\t\tthis._testLoopBoundries(event);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * The loopStart point determines when it will\n\t * loop if Part.loop is true.\n\t */\n\tget loopStart(): Time {\n\t\treturn new TicksClass(this.context, this._loopStart).toSeconds();\n\t}\n\tset loopStart(loopStart) {\n\t\tthis._loopStart = this.toTicks(loopStart);\n\t\tif (this._loop) {\n\t\t\tthis._forEach(event => {\n\t\t\t\tevent.loopStart = this.loopStart;\n\t\t\t\tthis._testLoopBoundries(event);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * The playback rate of the part\n\t */\n\tget playbackRate(): Positive {\n\t\treturn this._playbackRate;\n\t}\n\tset playbackRate(rate) {\n\t\tthis._playbackRate = rate;\n\t\tthis._setAll(\"playbackRate\", rate);\n\t}\n\n\t/**\n\t * The number of scheduled notes in the part.\n\t */\n\tget length(): number {\n\t\treturn this._events.size;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.clear();\n\t\treturn this;\n\t}\n}\n","import { assert } from \"../core/util/Debug\";\nimport { clamp } from \"../core/util/Math\";\n\n/**\n * The name of the patterns\n */\nexport type PatternName = \"up\" | \"down\" | \"upDown\" | \"downUp\" | \"alternateUp\" | \"alternateDown\" | \"random\" | \"randomOnce\" | \"randomWalk\";\n\n/**\n * Start at the first value and go up to the last\n */\nfunction* upPatternGen<T>(values: T[]): IterableIterator<T> {\n\tlet index = 0;\n\twhile (index < values.length) {\n\t\tindex = clampToArraySize(index, values);\n\t\tyield values[index];\n\t\tindex++;\n\t}\n}\n\n/**\n * Start at the last value and go down to 0\n */\nfunction* downPatternGen<T>(values: T[]): IterableIterator<T> {\n\tlet index = values.length - 1;\n\twhile (index >= 0) {\n\t\tindex = clampToArraySize(index, values);\n\t\tyield values[index];\n\t\tindex--;\n\t}\n}\n\n/**\n * Infinitely yield the generator\n */\nfunction* infiniteGen<T>(values: T[], gen: typeof upPatternGen): IterableIterator<T> {\n\twhile (true) {\n\t\tyield* gen(values);\n\t}\n}\n\n/**\n * Make sure that the index is in the given range\n */\nfunction clampToArraySize(index: number, values: any[]): number {\n\treturn clamp(index, 0, values.length - 1);\n}\n\n/**\n * Alternate between two generators\n */\nfunction* alternatingGenerator<T>(values: T[], directionUp: boolean): IterableIterator<T> {\n\tlet index = directionUp ? 0 : values.length - 1;\n\twhile (true) {\n\t\tindex = clampToArraySize(index, values);\n\t\tyield values[index];\n\t\tif (directionUp) {\n\t\t\tindex++;\n\t\t\tif (index >= values.length - 1) {\n\t\t\t\tdirectionUp = false;\n\t\t\t}\n\t\t} else {\n\t\t\tindex--;\n\t\t\tif (index <= 0) {\n\t\t\t\tdirectionUp = true;\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Starting from the bottom move up 2, down 1\n */\nfunction* jumpUp<T>(values: T[]): IterableIterator<T> {\n\tlet index = 0;\n\tlet stepIndex = 0;\n\twhile (index < values.length) {\n\t\tindex = clampToArraySize(index, values);\n\t\tyield values[index];\n\t\tstepIndex++;\n\t\tindex += (stepIndex % 2 ? 2 : -1);\n\t}\n}\n\n/**\n * Starting from the top move down 2, up 1\n */\nfunction* jumpDown<T>(values: T[]): IterableIterator<T> {\n\tlet index = values.length - 1;\n\tlet stepIndex = 0;\n\twhile (index >= 0) {\n\t\tindex = clampToArraySize(index, values);\n\t\tyield values[index];\n\t\tstepIndex++;\n\t\tindex += (stepIndex % 2 ? -2 : 1);\n\t}\n}\n\n/**\n * Choose a random index each time\n */\nfunction* randomGen<T>(values: T[]): IterableIterator<T> {\n\twhile (true) {\n\t\tconst randomIndex = Math.floor(Math.random() * values.length);\n\t\tyield values[randomIndex];\n\t}\n}\n\n/**\n * Randomly go through all of the values once before choosing a new random order\n */\nfunction* randomOnce<T>(values: T[]): IterableIterator<T> {\n\t// create an array of indices\n\tconst copy: number[] = [];\n\tfor (let i = 0; i < values.length; i++) {\n\t\tcopy.push(i);\n\t}\n\twhile (copy.length > 0) {\n\t\t// random choose an index, and then remove it so it's not chosen again\n\t\tconst randVal = copy.splice(Math.floor(copy.length * Math.random()), 1);\n\t\tconst index = clampToArraySize(randVal[0], values);\n\t\tyield values[index];\n\t}\n}\n\n/**\n * Randomly choose to walk up or down 1 index in the values array\n */\nfunction* randomWalk<T>(values: T[]): IterableIterator<T> {\n\t// randomly choose a starting index in the values array\n\tlet index = Math.floor(Math.random() * values.length);\n\twhile (true) {\n\t\tif (index === 0) {\n\t\t\tindex++; // at bottom of array, so force upward step\n\t\t} else if (index === values.length - 1) {\n\t\t\tindex--; // at top of array, so force downward step\n\t\t} else if (Math.random() < 0.5) { // else choose random downward or upward step\n\t\t\tindex--;\n\t\t} else {\n\t\t\tindex++;\n\t\t}\n\t\tyield values[index];\n\t}\n}\n\n/**\n * PatternGenerator returns a generator which will iterate over the given array\n * of values and yield the items according to the passed in pattern\n * @param values An array of values to iterate over\n * @param pattern The name of the pattern use when iterating over\n * @param index Where to start in the offset of the values array\n */\nexport function* PatternGenerator<T>(values: T[], pattern: PatternName = \"up\", index = 0): Iterator<T> {\n\t// safeguards\n\tassert(values.length > 0, \"The array must have more than one value in it\");\n\tswitch (pattern) {\n\t\tcase \"up\" :\n\t\t\tyield* infiniteGen(values, upPatternGen);\n\t\tcase \"down\" :\n\t\t\tyield* infiniteGen(values, downPatternGen);\n\t\tcase \"upDown\" :\n\t\t\tyield* alternatingGenerator(values, true);\n\t\tcase \"downUp\" :\n\t\t\tyield* alternatingGenerator(values, false);\n\t\tcase \"alternateUp\":\n\t\t\tyield* infiniteGen(values, jumpUp);\n\t\tcase \"alternateDown\":\n\t\t\tyield* infiniteGen(values, jumpDown);\n\t\tcase \"random\":\n\t\t\tyield* randomGen(values);\n\t\tcase \"randomOnce\":\n\t\t\tyield* infiniteGen(values, randomOnce);\n\t\tcase \"randomWalk\":\n\t\t\tyield* randomWalk(values);\n\t}\n}\n","import { Loop, LoopOptions } from \"./Loop\";\nimport { PatternGenerator, PatternName } from \"./PatternGenerator\";\nimport { ToneEventCallback } from \"./ToneEvent\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Seconds } from \"../core/type/Units\";\nimport { noOp } from \"../core/util/Interface\";\n\nexport interface PatternOptions<ValueType> extends LoopOptions {\n\tpattern: PatternName;\n\tvalues: ValueType[];\n\tcallback: (time: Seconds, value?: ValueType) => void;\n}\n\n/**\n * Pattern arpeggiates between the given notes\n * in a number of patterns. \n * @example\n * import { Pattern } from \"tone\";\n * const pattern = new Pattern((time, note) => {\n * \t// the order of the notes passed in depends on the pattern\n * }, [\"C2\", \"D4\", \"E5\", \"A6\"], \"upDown\");\n * @category Event\n */\nexport class Pattern<ValueType> extends Loop<PatternOptions<ValueType>> {\n\n\treadonly name: string = \"Pattern\";\n\t\n\t/**\n\t * The pattern generator function\n\t */\n\tprivate _pattern: Iterator<ValueType>;\n\n\t/**\n\t * The current value\n\t */\n\tprivate _value?: ValueType;\n\n\t/**\n\t * Hold the pattern type\n\t */\n\tprivate _type: PatternName;\n\n\t/**\n\t * Hold the values\n\t */\n\tprivate _values: ValueType[];\n\n\t/**\n\t * The callback to be invoked at a regular interval\n\t */\n\tcallback: (time: Seconds, value?: ValueType) => void;\n\n\t/**\n\t * @param  callback The callback to invoke with the event.\n\t * @param  values The values to arpeggiate over.\n\t * @param  pattern  The name of the pattern\n\t */\n\tconstructor(\n\t\tcallback?: ToneEventCallback<ValueType>,\n\t\tvalues?: ValueType[],\n\t\tpattern?: PatternName,\n\t);\n\tconstructor(options?: Partial<PatternOptions<ValueType>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Pattern.getDefaults(), arguments, [\"callback\", \"values\", \"pattern\"]));\n\t\tconst options = optionsFromArguments(Pattern.getDefaults(), arguments, [\"callback\", \"values\", \"pattern\"]);\n\n\t\tthis.callback = options.callback;\n\t\tthis._values = options.values;\n\t\tthis._pattern = PatternGenerator(options.values, options.pattern);\n\t\tthis._type = options.pattern;\n\t}\n\n\tstatic getDefaults(): PatternOptions<any> {\n\t\treturn Object.assign(Loop.getDefaults(), {\n\t\t\tpattern: \"up\" as \"up\",\n\t\t\tvalues: [],\n\t\t\tcallback: noOp,\n\t\t});\n\t}\n\n\t/**\n\t * Internal function called when the notes should be called\n\t */\n\tprotected _tick(time: Seconds): void {\n\t\tconst value = this._pattern.next() as IteratorResult<ValueType>;\n\t\tthis._value = value.value;\n\t\tthis.callback(time, this._value);\n\t}\n\n\t/**\n\t * The array of events.\n\t */\n\tget values(): ValueType[] {\n\t\treturn this._values;\n\t}\n\tset values(val) {\n\t\tthis._values = val;\n\t\t// reset the pattern\n\t\tthis.pattern = this._type;\n\t}\n\n\t/**\n\t * The current value of the pattern.\n\t */\n\tget value(): ValueType | undefined {\n\t\treturn this._value;\n\t}\n\n\t/**\n\t * The pattern type. See Tone.CtrlPattern for the full list of patterns.\n\t */\n\tget pattern(): PatternName {\n\t\treturn this._type;\n\t}\n\tset pattern(pattern) {\n\t\tthis._type = pattern;\n\t\tthis._pattern = PatternGenerator(this._values, this._type);\n\t}\n}\n\n","import { TicksClass } from \"../core/type/Ticks\";\nimport { NormalRange, Positive, Seconds, Ticks, Time, TransportTime } from \"../core/type/Units\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { isArray, isString } from \"../core/util/TypeCheck\";\nimport { Part } from \"./Part\";\nimport { ToneEvent, ToneEventCallback, ToneEventOptions } from \"./ToneEvent\";\n\ntype SequenceEventDescription<T> = Array<T | Array<T | Array<T | Array<T | Array<T | T[]>>>>>;\n\ninterface SequenceOptions<T> extends Omit<ToneEventOptions<T>, \"value\"> {\n\tloopStart: number;\n\tloopEnd: number;\n\tsubdivision: Time;\n\tevents: SequenceEventDescription<T>;\n}\n\n/**\n * A sequence is an alternate notation of a part. Instead\n * of passing in an array of [time, event] pairs, pass\n * in an array of events which will be spaced at the\n * given subdivision. Sub-arrays will subdivide that beat\n * by the number of items are in the array.\n * Sequence notation inspiration from [Tidal](http://yaxu.org/tidal/)\n * @example\n * import { Sequence, Synth, Transport } from \"tone\";\n * const synth = new Synth().toDestination();\n * const seq = new Sequence((time, note) => {\n * \tsynth.triggerAttackRelease(note, 0.1, time);\n * \t// subdivisions are given as subarrays\n * }, [\"C4\", [\"E4\", \"D4\", \"E4\"], \"G4\", [\"A4\", \"G4\"]]).start(0);\n * Transport.start();\n * @category Event\n */\nexport class Sequence<ValueType = any> extends ToneEvent<ValueType> {\n\n\treadonly name: string = \"Sequence\";\n\n\t/**\n\t * The subdivison of each note\n\t */\n\tprivate _subdivision: Ticks;\n\n\t/**\n\t * The object responsible for scheduling all of the events\n\t */\n\tprivate _part: Part = new Part({\n\t\tcallback: this._seqCallback.bind(this),\n\t\tcontext: this.context,\n\t});\n\n\t/**\n\t * private reference to all of the sequence proxies\n\t */\n\tprivate _events: SequenceEventDescription<ValueType> = [];\n\n\t/**\n\t * The proxied array\n\t */\n\tprivate _eventsArray: SequenceEventDescription<ValueType> = [];\n\n\t/**\n\t * @param  callback  The callback to invoke with every note\n\t * @param  sequence  The sequence\n\t * @param  subdivision  The subdivision between which events are placed.\n\t */\n\tconstructor(\n\t\tcallback?: ToneEventCallback<ValueType>,\n\t\tevents?: SequenceEventDescription<ValueType>,\n\t\tsubdivision?: Time,\n\t);\n\tconstructor(options?: Partial<SequenceOptions<ValueType>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Sequence.getDefaults(), arguments, [\"callback\", \"events\", \"subdivision\"]));\n\t\tconst options = optionsFromArguments(Sequence.getDefaults(), arguments, [\"callback\", \"events\", \"subdivision\"]);\n\n\t\tthis._subdivision = this.toTicks(options.subdivision);\n\n\t\tthis.events = options.events;\n\n\t\t// set all of the values\n\t\tthis.loop = options.loop;\n\t\tthis.loopStart = options.loopStart;\n\t\tthis.loopEnd = options.loopEnd;\n\t\tthis.playbackRate = options.playbackRate;\n\t\tthis.probability = options.probability;\n\t\tthis.humanize = options.humanize;\n\t\tthis.mute = options.mute;\n\t\tthis.playbackRate = options.playbackRate;\n\t}\n\n\tstatic getDefaults(): SequenceOptions<any> {\n\t\treturn Object.assign(omitFromObject(ToneEvent.getDefaults(), [\"value\"]), {\n\t\t\tevents: [],\n\t\t\tloop: true,\n\t\t\tloopEnd: 0,\n\t\t\tloopStart: 0,\n\t\t\tsubdivision: \"8n\",\n\t\t});\n\t}\n\n\t/**\n\t * The internal callback for when an event is invoked\n\t */\n\tprivate _seqCallback(time: Seconds, value: any): void {\n\t\tif (value !== null) {\n\t\t\tthis.callback(time, value);\n\t\t}\n\t}\n\n\t/**\n\t * The sequence\n\t */\n\tget events(): any[] {\n\t\treturn this._events;\n\t}\n\tset events(s) {\n\t\tthis.clear();\n\t\tthis._eventsArray = s;\n\t\tthis._events = this._createSequence(this._eventsArray);\n\t\tthis._eventsUpdated();\n\t}\n\n\t/**\n\t * Start the part at the given time.\n\t * @param  time    When to start the part.\n\t * @param  offset  The offset index to start at\n\t */\n\tstart(time?: TransportTime, offset?: number): this {\n\t\tthis._part.start(time, offset ? this._indexTime(offset) : offset);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the part at the given time.\n\t * @param  time  When to stop the part.\n\t */\n\tstop(time?: TransportTime): this {\n\t\tthis._part.stop(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The subdivision of the sequence. This can only be\n\t * set in the constructor. The subdivision is the\n\t * interval between successive steps.\n\t */\n\tget subdivision(): Seconds {\n\t\treturn new TicksClass(this.context, this._subdivision).toSeconds();\n\t}\n\n\t/**\n\t * Create a sequence proxy which can be monitored to create subsequences\n\t */\n\tprivate _createSequence(array: any[]): any[] {\n\t\treturn new Proxy(array, {\n\t\t\tget: (target: any[], property: PropertyKey): any => {\n\t\t\t\t// property is index in this case\n\t\t\t\treturn target[property];\n\t\t\t},\n\t\t\tset: (target: any[], property: PropertyKey, value: any): boolean => {\n\t\t\t\tif (isString(property) && isFinite(parseInt(property, 10))) {\n\t\t\t\t\tif (isArray(value)) {\n\t\t\t\t\t\ttarget[property] = this._createSequence(value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttarget[property] = value;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttarget[property] = value;\n\t\t\t\t}\n\t\t\t\tthis._eventsUpdated();\n\t\t\t\t// return true to accept the changes\n\t\t\t\treturn true;\n\t\t\t},\n\t\t});\n\t}\n\n\t/**\n\t * When the sequence has changed, all of the events need to be recreated\n\t */\n\tprivate _eventsUpdated(): void {\n\t\tthis._part.clear();\n\t\tthis._rescheduleSequence(this._eventsArray, this._subdivision, this.startOffset);\n\t\t// update the loopEnd\n\t\tthis.loopEnd = this.loopEnd;\n\t}\n\n\t/**\n\t * reschedule all of the events that need to be rescheduled\n\t */\n\tprivate _rescheduleSequence(sequence: any[], subdivision: Ticks, startOffset: Ticks): void {\n\t\tsequence.forEach((value, index) => {\n\t\t\tconst eventOffset = index * (subdivision) + startOffset;\n\t\t\tif (isArray(value)) {\n\t\t\t\tthis._rescheduleSequence(value, subdivision / value.length, eventOffset);\n\t\t\t} else {\n\t\t\t\tconst startTime = new TicksClass(this.context, eventOffset, \"i\").toSeconds();\n\t\t\t\tthis._part.add(startTime, value);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Get the time of the index given the Sequence's subdivision\n\t * @param  index\n\t * @return The time of that index\n\t */\n\tprivate _indexTime(index: number): Seconds {\n\t\treturn new TicksClass(this.context, index * (this._subdivision) + this.startOffset).toSeconds();\n\t}\n\n\t/**\n\t * Clear all of the events\n\t */\n\tclear(): this {\n\t\tthis._part.clear();\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._part.dispose();\n\t\treturn this;\n\t}\n\n\t//-------------------------------------\n\t// PROXY CALLS\n\t//-------------------------------------\n\n\tget loop(): boolean | number {\n\t\treturn this._part.loop;\n\t}\n\tset loop(l) {\n\t\tthis._part.loop = l;\n\t}\n\n\t/**\n\t * The index at which the sequence should start looping\n\t */\n\tget loopStart(): number {\n\t\treturn this._loopStart;\n\t}\n\tset loopStart(index) {\n\t\tthis._loopStart = index;\n\t\tthis._part.loopStart = this._indexTime(index);\n\t}\n\n\t/**\n\t * The index at which the sequence should end looping\n\t */\n\tget loopEnd(): number {\n\t\treturn this._loopEnd;\n\t}\n\tset loopEnd(index) {\n\t\tthis._loopEnd = index;\n\t\tif (index === 0) {\n\t\t\tthis._part.loopEnd = this._indexTime(this._eventsArray.length);\n\t\t} else {\n\t\t\tthis._part.loopEnd = this._indexTime(index);\n\t\t}\n\t}\n\n\tget startOffset(): Ticks {\n\t\treturn this._part.startOffset;\n\t}\n\tset startOffset(start) {\n\t\tthis._part.startOffset = start;\n\t}\n\n\tget playbackRate(): Positive {\n\t\treturn this._part.playbackRate;\n\t}\n\tset playbackRate(rate) {\n\t\tthis._part.playbackRate = rate;\n\t}\n\n\tget probability(): NormalRange {\n\t\treturn this._part.probability;\n\t}\n\tset probability(prob) {\n\t\tthis._part.probability = prob;\n\t}\n\n\tget progress(): NormalRange {\n\t\treturn this._part.progress;\n\t}\n\n\tget humanize(): boolean | Time {\n\t\treturn this._part.humanize;\n\t}\n\tset humanize(variation) {\n\t\tthis._part.humanize = variation;\n\t}\n\n\t/**\n\t * The number of scheduled events\n\t */\n\tget length(): number {\n\t\treturn this._part.length;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { connect, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { NormalRange } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { GainToAudio } from \"../../signal/GainToAudio\";\nimport { Signal } from \"../../signal/Signal\";\n\ninterface CrossFadeOptions extends ToneAudioNodeOptions {\n\tfade: NormalRange;\n}\n\n/**\n * Tone.Crossfade provides equal power fading between two inputs.\n * More on crossfading technique [here](https://en.wikipedia.org/wiki/Fade_(audio_engineering)#Crossfading).\n * ```\n *                                             +---------+\n *                                            +> input a +>--+\n * +-----------+   +---------------------+     |         |   |\n * | 1s signal +>--> stereoPannerNode  L +>----> gain    |   |\n * +-----------+   |                     |     +---------+   |\n *               +-> pan               R +>-+                |   +--------+\n *               | +---------------------+  |                +---> output +>\n *  +------+     |                          |  +---------+   |   +--------+\n *  | fade +>----+                          | +> input b +>--+\n *  +------+                                |  |         |\n *                                          +--> gain    |\n *                                             +---------+\n * ```\n * @example\n * import { CrossFade, Oscillator } from \"tone\";\n * const crossFade = new CrossFade().toDestination();\n * // connect two inputs to a/b\n * const inputA = new Oscillator(440, \"square\").connect(crossFade.a).start();\n * const inputB = new Oscillator(440, \"sine\").connect(crossFade.b).start();\n * // use the fade to control the mix between the two\n * crossFade.fade.value = 0.5;\n * @category Component\n */\nexport class CrossFade extends ToneAudioNode<CrossFadeOptions> {\n\n\treadonly name: string = \"CrossFade\";\n\n\t/**\n\t * The crossfading is done by a StereoPannerNode\n\t */\n\tprivate _panner: StereoPannerNode = this.context.createStereoPanner();\n\n\t/**\n\t * Split the output of the panner node into two values used to control the gains.\n\t */\n\tprivate _split: ChannelSplitterNode = this.context.createChannelSplitter(2);\n\n\t/**\n\t * Convert the fade value into an audio range value so it can be connected\n\t * to the panner.pan AudioParam\n\t */\n\tprivate _g2a: GainToAudio = new GainToAudio({ context: this.context });\n\n\t/**\n\t * The input which is at full level when fade = 0\n\t */\n\treadonly a: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\n\t/**\n\t * The input which is at full level when fade = 1\n\t */\n\treadonly b: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\n\t/**\n\t * The output is a mix between `a` and `b` at the ratio of `fade`\n\t */\n\treadonly output: Gain = new Gain({ context: this.context });\n\n\t/**\n\t * CrossFade has no input, you must choose either `a` or `b`\n\t */\n\treadonly input: undefined;\n\n\t/**\n\t * The mix between the two inputs. A fade value of 0\n\t * will output 100% crossFade.a and\n\t * a value of 1 will output 100% crossFade.b.\n\t */\n\treadonly fade: Signal<\"normalRange\">;\n\n\tprotected _internalChannels = [this.a, this.b];\n\n\t/**\n\t * @param fade The initial fade value [0, 1].\n\t */\n\tconstructor(fade?: NormalRange);\n\tconstructor(options?: Partial<CrossFadeOptions>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(CrossFade.getDefaults(), arguments, [\"fade\"])));\n\t\tconst options = optionsFromArguments(CrossFade.getDefaults(), arguments, [\"fade\"]);\n\n\t\tthis.fade = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"normalRange\",\n\t\t\tvalue: options.fade,\n\t\t});\n\t\treadOnly(this, \"fade\");\n\n\t\tthis.context.getConstant(1).connect(this._panner);\n\t\tthis._panner.connect(this._split);\n\t\t// this is necessary for standardized-audio-context\n\t\t// doesn't make any difference for the native AudioContext\n\t\t// https://github.com/chrisguttandin/standardized-audio-context/issues/647\n\t\tthis._panner.channelCount = 1;\n\t\tthis._panner.channelCountMode = \"explicit\";\n\t\tconnect(this._split, this.a.gain, 0);\n\t\tconnect(this._split, this.b.gain, 1);\n\n\t\tthis.fade.chain(this._g2a, this._panner.pan);\n\n\t\tthis.a.connect(this.output);\n\t\tthis.b.connect(this.output);\n\t}\n\n\tstatic getDefaults(): CrossFadeOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tfade: 0.5,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.a.dispose();\n\t\tthis.b.dispose();\n\t\tthis.output.dispose();\n\t\tthis.fade.dispose();\n\t\tthis._g2a.dispose();\n\t\tthis._panner.disconnect();\n\t\tthis._split.disconnect();\n\t\treturn this;\n\t}\n}\n","import { CrossFade } from \"../component/channel/CrossFade\";\nimport { Gain } from \"../core/context/Gain\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { NormalRange } from \"../core/type/Units\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Signal } from \"../signal/Signal\";\n\nexport interface EffectOptions extends ToneAudioNodeOptions {\n\twet: NormalRange;\n}\n/**\n * Effect is the base class for effects. Connect the effect between\n * the effectSend and effectReturn GainNodes, then control the amount of\n * effect which goes to the output using the wet control.\n */\nexport abstract class Effect<Options extends EffectOptions>\n\textends ToneAudioNode<Options> {\n\n\treadonly name: string = \"Effect\";\n\n\t/**\n\t * the drywet knob to control the amount of effect\n\t */\n\tprivate _dryWet: CrossFade = new CrossFade({ context: this.context });\n\n\t/**\n\t * The wet control is how much of the effected\n\t * will pass through to the output. 1 = 100% effected\n\t * signal, 0 = 100% dry signal.\n\t */\n\twet: Signal<\"normalRange\"> = this._dryWet.fade;\n\n\t/**\n\t * connect the effectSend to the input of hte effect\n\t */\n\tprotected effectSend: Gain = new Gain({ context: this.context });\n\n\t/**\n\t * connect the output of the effect to the effectReturn\n\t */\n\tprotected effectReturn: Gain = new Gain({ context: this.context });\n\n\t/**\n\t * The effect input node\n\t */\n\tinput: Gain = new Gain({ context: this.context });\n\n\t/**\n\t * The effect output\n\t */\n\toutput = this._dryWet;\n\n\tconstructor(options: EffectOptions) {\n\t\tsuper(options);\n\n\t\t// connections\n\t\tthis.input.fan(this._dryWet.a, this.effectSend);\n\t\tthis.effectReturn.connect(this._dryWet.b);\n\t\tthis.wet.setValueAtTime(options.wet, 0);\n\t\tthis._internalChannels = [this.effectReturn, this.effectSend];\n\t\treadOnly(this, \"wet\");\n\t}\n\n\tstatic getDefaults(): EffectOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\twet: 1,\n\t\t});\n\t}\n\n\t/**\n\t * chains the effect in between the effectSend and effectReturn\n\t */\n\tprotected connectEffect(effect: ToneAudioNode | AudioNode): this {\n\t\t// add it to the internal channels\n\t\tthis._internalChannels.push(effect);\n\t\tthis.effectSend.chain(effect, this.effectReturn);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._dryWet.dispose();\n\t\tthis.effectSend.dispose();\n\t\tthis.effectReturn.dispose();\n\t\tthis.wet.dispose();\n\t\treturn this;\n\t}\n}\n","import { Effect, EffectOptions } from \"../effect/Effect\";\nimport { Frequency, NormalRange, Time } from \"../core/type/Units\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { ToneOscillatorType } from \"../source/oscillator/OscillatorInterface\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Param } from \"../core/context/Param\";\n\nexport interface LFOEffectOptions extends EffectOptions {\n\tfrequency: Frequency;\n\ttype: ToneOscillatorType;\n\tdepth: NormalRange;\n}\n\n/**\n * Base class for LFO-based effects.\n */\nexport abstract class LFOEffect<Options extends LFOEffectOptions> extends Effect<Options> {\n\n\treadonly name: string = \"LFOEffect\";\n\n\t/**\n\t * the lfo which drives the filter cutoff\n\t */\n\tprotected _lfo: LFO;\n\t\n\t/**\n\t * The range of the filter modulating between the min and max frequency. \n\t * 0 = no modulation. 1 = full modulation.\n\t */\n\treadonly depth: Param<\"normalRange\">;\n\t\n\t/**\n\t * How fast the filter modulates between min and max. \n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\tconstructor(options: LFOEffectOptions) {\n\n\t\tsuper(options);\n\n\t\tthis._lfo = new LFO({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.frequency,\n\t\t\tamplitude: options.depth,\n\t\t});\n\t\tthis.depth = this._lfo.amplitude;\n\t\tthis.frequency = this._lfo.frequency;\n\n\t\tthis.type = options.type;\n\t\treadOnly(this, [\"frequency\", \"depth\"]);\n\t}\n\n\tstatic getDefaults(): LFOEffectOptions {\n\t\treturn Object.assign(Effect.getDefaults(), {\n\t\t\tfrequency: 1,\n\t\t\ttype: \"sine\" as ToneOscillatorType,\n\t\t\tdepth: 1,\n\t\t});\n\t}\n\n\t/**\n\t * Start the effect.\n\t */\n\tstart(time?: Time): this {\n\t\tthis._lfo.start(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the lfo\n\t */\n\tstop(time?: Time): this {\n\t\tthis._lfo.stop(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sync the filter to the transport. See [[LFO.sync]]\n\t */\n\tsync(): this {\n\t\tthis._lfo.sync();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unsync the filter from the transport.\n\t */\n\tunsync(): this {\n\t\tthis._lfo.unsync();\n\t\treturn this;\n\t}\n\n\t/**\n\t * The type of the LFO's oscillator: See [[Oscillator.type]]\n\t * @example\n\t * import { AutoFilter, Noise } from \"tone\";\n\t * const autoFilter = new AutoFilter().start().toDestination();\n\t * const noise = new Noise().start().connect(autoFilter);\n\t * autoFilter.type = \"square\";\n\t */\n\tget type() {\n\t\treturn this._lfo.type;\n\t}\n\tset type(type) {\n\t\tthis._lfo.type = type;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._lfo.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.depth.dispose();\n\t\treturn this;\n\t}\n}\n","import { Frequency, Positive } from \"../core/type/Units\";\nimport { Filter, FilterOptions } from \"../component/filter/Filter\";\nimport { SourceOptions } from \"../source/Source\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFOEffect, LFOEffectOptions } from \"./LFOEffect\";\n\nexport interface AutoFilterOptions extends LFOEffectOptions {\n\tbaseFrequency: Frequency;\n\toctaves: Positive;\n\tfilter: Omit<FilterOptions, keyof SourceOptions | \"frequency\" | \"detune\" | \"gain\">;\n}\n\n/**\n * AutoFilter is a Tone.Filter with a Tone.LFO connected to the filter cutoff frequency.\n * Setting the LFO rate and depth allows for control over the filter modulation rate \n * and depth.\n *\n * @example\n * import { AutoFilter, Oscillator } from \"tone\";\n * // create an autofilter and start it's LFO\n * const autoFilter = new AutoFilter(\"4n\").toDestination().start();\n * // route an oscillator through the filter and start it\n * const oscillator = new Oscillator().connect(autoFilter).start();\n * @category Effect\n */\nexport class AutoFilter extends LFOEffect<AutoFilterOptions> {\n\n\treadonly name: string = \"AutoFilter\";\n\n\t/**\n\t * The filter node\n\t */\n\treadonly filter: Filter;\n\t\n\t/**\n\t * The octaves placeholder\n\t */\n\tprivate _octaves!: Positive;\n\n\t/**\n\t * @param frequency The rate of the LFO.\n\t * @param baseFrequency The lower value of the LFOs oscillation\n\t * @param octaves The number of octaves above the baseFrequency\n\t */\n\tconstructor(frequency?: Frequency, baseFrequency?: Frequency, octaves?: Positive);\n\tconstructor(options?: Partial<AutoFilterOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(AutoFilter.getDefaults(), arguments, [\"frequency\", \"baseFrequency\", \"octaves\"]));\n\t\tconst options = optionsFromArguments(AutoFilter.getDefaults(), arguments, [\"frequency\", \"baseFrequency\", \"octaves\"]);\n\n\t\tthis.filter = new Filter(Object.assign(options.filter, {\n\t\t\tcontext: this.context,\n\t\t}));\n\n\t\t// connections\n\t\tthis.connectEffect(this.filter);\n\t\tthis._lfo.connect(this.filter.frequency);\n\t\tthis.octaves = options.octaves;\n\t\tthis.baseFrequency = options.baseFrequency;\n\t}\n\n\tstatic getDefaults(): AutoFilterOptions {\n\t\treturn Object.assign(LFOEffect.getDefaults(), {\n\t\t\tbaseFrequency: 200,\n\t\t\toctaves: 2.6,\n\t\t\tfilter: {\n\t\t\t\ttype: \"lowpass\" as \"lowpass\",\n\t\t\t\trolloff: -12 as -12,\n\t\t\t\tQ: 1,\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * The minimum value of the filter's cutoff frequency.\n\t */\n\tget baseFrequency(): Frequency {\n\t\treturn this._lfo.min;\n\t}\n\tset baseFrequency(freq) {\n\t\tthis._lfo.min = this.toFrequency(freq);\n\t\t// and set the max\n\t\tthis.octaves = this._octaves;\n\t}\n\n\t/**\n\t * The maximum value of the filter's cutoff frequency. \n\t */\n\tget octaves(): Positive {\n\t\treturn this._octaves;\n\t}\n\tset octaves(oct) {\n\t\tthis._octaves = oct;\n\t\tthis._lfo.max = this._lfo.min * Math.pow(2, oct);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.filter.dispose();\n\t\treturn this;\n\t}\n}\n","import { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { AudioRange } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\n\ninterface TonePannerOptions extends ToneAudioNodeOptions {\n\tpan: AudioRange;\n\tchannelCount: number;\n}\n\n/**\n * Panner is an equal power Left/Right Panner. It is a wrapper around the StereoPannerNode.\n * @example\n * import { Oscillator, Panner } from \"tone\";\n * // pan the input signal hard right.\n * const panner = new Panner(1).toDestination();\n * const osc = new Oscillator().connect(panner).start();\n * @category Component\n */\nexport class Panner extends ToneAudioNode<TonePannerOptions> {\n\n\treadonly name: string = \"Panner\";\n\n\t/**\n\t * the panner node\n\t */\n\tprivate _panner: StereoPannerNode = this.context.createStereoPanner();\n\treadonly input: StereoPannerNode = this._panner;\n\treadonly output: StereoPannerNode = this._panner;\n\n\t/**\n\t * The pan control. -1 = hard left, 1 = hard right.\n\t * @min -1\n\t * @max 1\n\t */\n\treadonly pan: Param<\"audioRange\">;\n\n\tconstructor(options?: Partial<TonePannerOptions>);\n\t/**\n\t * @param pan The initial panner value (Defaults to 0 = \"center\").\n\t */\n\tconstructor(pan?: AudioRange);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Panner.getDefaults(), arguments, [\"pan\"])));\n\t\tconst options = optionsFromArguments(Panner.getDefaults(), arguments, [\"pan\"]);\n\n\t\tthis.pan = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._panner.pan,\n\t\t\tvalue: options.pan,\n\t\t\tminValue: -1,\n\t\t\tmaxValue: 1,\n\t\t});\n\n\t\t// this is necessary for standardized-audio-context\n\t\t// doesn't make any difference for the native AudioContext\n\t\t// https://github.com/chrisguttandin/standardized-audio-context/issues/647\n\t\tthis._panner.channelCount = options.channelCount;\n\t\tthis._panner.channelCountMode = \"explicit\";\n\n\t\t// initial value\n\t\treadOnly(this, \"pan\");\n\t}\n\n\tstatic getDefaults(): TonePannerOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tpan: 0,\n\t\t\tchannelCount: 1,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._panner.disconnect();\n\t\tthis.pan.dispose();\n\t\treturn this;\n\t}\n}\n","import { Panner } from \"../component/channel/Panner\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFOEffect, LFOEffectOptions } from \"./LFOEffect\";\nimport { Frequency } from \"../core/type/Units\";\n\nexport type AutoPannerOptions = LFOEffectOptions;\n\n/**\n * AutoPanner is a [[Panner]] with an [[LFO]] connected to the pan amount. \n * [Related Reading](https://www.ableton.com/en/blog/autopan-chopper-effect-and-more-liveschool/).\n *\n * @example\n * import { AutoPanner, Oscillator } from \"tone\";\n * // create an autopanner and start it\n * const autoPanner = new AutoPanner(\"4n\").toDestination().start();\n * // route an oscillator through the panner and start it\n * const oscillator = new Oscillator().connect(autoPanner).start();\n * @category Effect\n */\nexport class AutoPanner extends LFOEffect<AutoPannerOptions> {\n\t\n\treadonly name: string = \"AutoPanner\";\n\t\n\t/**\n\t * The filter node\n\t */\n\treadonly _panner: Panner;\n\t\n\t/**\n\t * @param frequency Rate of left-right oscillation. \n\t */\n\tconstructor(frequency?: Frequency);\n\tconstructor(options?: Partial<AutoPannerOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(AutoPanner.getDefaults(), arguments, [\"frequency\"]));\n\n\t\tthis._panner = new Panner({ context: this.context });\n\t\t// connections\n\t\tthis.connectEffect(this._panner);\n\t\tthis._lfo.connect(this._panner.pan);\n\t\tthis._lfo.min = -1;\n\t\tthis._lfo.max = 1;\n\t}\n\n\tdispose(): this{\n\t\tsuper.dispose();\n\t\tthis._panner.dispose();\n\t\treturn this;\n\t}\n}\n\n","import { Time } from \"../../core/type/Units\";\nimport { InputNode, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { OnePoleFilter } from \"../filter/OnePoleFilter\";\nimport { Abs } from \"../../signal/Abs\";\n\nexport interface FollowerOptions extends ToneAudioNodeOptions {\n\tsmoothing: Time;\n}\n\n/**\n * Follower is a simple envelope follower. \n * It's implemented by applying a lowpass filter to the absolute value of the incoming signal. \n * ```\n *          +-----+    +---------------+\n * Input +--> Abs +----> OnePoleFilter +--> Output\n *          +-----+    +---------------+\n * ```\n * @category Component\n */\nexport class Follower extends ToneAudioNode<FollowerOptions> {\n\n\treadonly name: string = \"Follower\";\n\n\treadonly input: InputNode;\n\treadonly output: OutputNode;\n\n\t/**\n\t * Private reference to the smoothing parameter\n\t */\n\tprivate _smoothing: Time;\n\n\t/**\n\t * The lowpass filter\n\t */\n\tprivate _lowpass: OnePoleFilter;\n\n\t/**\n\t * The absolute value\n\t */\n\tprivate _abs: Abs;\n\n\t/**\n\t * @param smoothing The rate of change of the follower.\n\t */\n\tconstructor(smoothing?: Time);\n\tconstructor(options?: Partial<FollowerOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Follower.getDefaults(), arguments, [\"smoothing\"]));\n\t\tconst options = optionsFromArguments(Follower.getDefaults(), arguments, [\"smoothing\"]);\n\n\t\tthis._abs = this.input = new Abs({ context: this.context });\n\t\tthis._lowpass = this.output = new OnePoleFilter({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: 1 / this.toSeconds(options.smoothing),\n\t\t\ttype: \"lowpass\"\n\t\t});\n\t\tthis._abs.connect(this._lowpass);\n\t\tthis._smoothing = options.smoothing;\n\t}\n\n\tstatic getDefaults(): FollowerOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tsmoothing: 0.05\n\t\t});\n\t}\n\n\t/**\n\t * The amount of time it takes a value change to arrive at the updated value. \n\t */\n\tget smoothing(): Time {\n\t\treturn this._smoothing;\n\t}\n\tset smoothing(smoothing) {\n\t\tthis._smoothing = smoothing;\n\t\tthis._lowpass.frequency = 1 / this.toSeconds(this.smoothing);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._abs.dispose();\n\t\tthis._lowpass.dispose();\n\t\treturn this;\n\t}\n}\n","import { Effect, EffectOptions } from \"./Effect\";\nimport { Filter } from \"../component/filter/Filter\";\nimport { Follower } from \"../component/analysis/Follower\";\nimport { Decibels, Frequency, GainFactor, Hertz, Positive, Time } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Gain } from \"../core/context/Gain\";\nimport { dbToGain, gainToDb } from \"../core/type/Conversions\";\nimport { ScaleExp } from \"../signal/ScaleExp\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\n\nexport interface AutoWahOptions extends EffectOptions {\n\tbaseFrequency: Frequency;\n\toctaves: Positive;\n\tsensitivity: Decibels;\n\tQ: Positive;\n\tgain: GainFactor;\n\tfollower: Time;\n}\n\n/**\n * AutoWah connects a [[Follower]] to a [[Filter]]. \n * The frequency of the filter, follows the input amplitude curve. \n * Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna).\n * \n * @example\n * import { AutoWah, Synth } from \"tone\";\n * const autoWah = new AutoWah(50, 6, -30).toDestination();\n * // initialize the synth and connect to autowah\n * const synth = new Synth().connect(autoWah);\n * // Q value influences the effect of the wah - default is 2\n * autoWah.Q.value = 6;\n * // more audible on higher notes\n * synth.triggerAttackRelease(\"C4\", \"8n\");\n * @category Effect\n */\nexport class AutoWah extends Effect<AutoWahOptions> {\n\n\treadonly name: string = \"AutoWah\";\n\t\n\t/**\n\t * The envelope follower. Set the attack/release\n\t * timing to adjust how the envelope is followed.\n\t */\n\tprivate _follower: Follower;\n\n\t/**\n\t * scales the follower value to the frequency domain\n\t */\n\tprivate _sweepRange: ScaleExp;\n\n\t/**\n\t * Hold the base frequency value\n\t */\n\tprivate _baseFrequency: Hertz;\n\n\t/**\n\t * Private holder for the octave count\n\t */\n\tprivate _octaves: Positive;\n\n\t/**\n\t * the input gain to adjust the sensitivity\n\t */\n\tprivate _inputBoost: Gain;\n\n\t/**\n\t * Private holder for the filter\n\t */\n\tprivate _bandpass: Filter;\n\n\t/**\n\t * The peaking fitler\n\t */\n\tprivate _peaking: Filter;\n\n\t/**\n\t * The gain of the filter.\n\t */\n\treadonly gain: Signal<\"decibels\">;\n\n\t/**\n\t * The quality of the filter.\n\t */\n\treadonly Q: Signal<\"positive\">;\n\n\t/**\n\t * @param baseFrequency The frequency the filter is set to at the low point of the wah\n\t * @param octaves The number of octaves above the baseFrequency the filter will sweep to when fully open. \n\t * @param sensitivity The decibel threshold sensitivity for the incoming signal. Normal range of -40 to 0.\n\t */\n\tconstructor(baseFrequency?: Frequency, octaves?: Positive, sensitivity?: Decibels);\n\tconstructor(options?: Partial<AutoWahOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(AutoWah.getDefaults(), arguments, [\"baseFrequency\", \"octaves\", \"sensitivity\"]));\n\t\tconst options = optionsFromArguments(AutoWah.getDefaults(), arguments, [\"baseFrequency\", \"octaves\", \"sensitivity\"]);\n\n\t\tthis._follower = new Follower({\n\t\t\tcontext: this.context,\n\t\t\tsmoothing: options.follower,\n\t\t});\n\t\tthis._sweepRange = new ScaleExp({\n\t\t\tcontext: this.context,\n\t\t\tmin: 0,\n\t\t\tmax: 1,\n\t\t\texponent: 0.5,\n\t\t});\n\t\tthis._baseFrequency = this.toFrequency(options.baseFrequency);\n\t\tthis._octaves = options.octaves;\n\t\tthis._inputBoost = new Gain({ context: this.context });\n\t\tthis._bandpass = new Filter({\n\t\t\tcontext: this.context,\n\t\t\trolloff: -48,\n\t\t\tfrequency: 0,\n\t\t\tQ: options.Q,\n\t\t});\n\t\tthis._peaking = new Filter({\n\t\t\tcontext: this.context,\n\t\t\ttype: \"peaking\"\n\t\t});\n\t\tthis._peaking.gain.value = options.gain;\n\t\tthis.gain = this._peaking.gain;\n\t\tthis.Q = this._bandpass.Q;\n\n\t\t// the control signal path\n\t\tthis.effectSend.chain(this._inputBoost, this._follower, this._sweepRange);\n\t\tthis._sweepRange.connect(this._bandpass.frequency);\n\t\tthis._sweepRange.connect(this._peaking.frequency);\n\t\t// the filtered path\n\t\tthis.effectSend.chain(this._bandpass, this._peaking, this.effectReturn);\n\t\t// set the initial value\n\t\tthis._setSweepRange();\n\t\tthis.sensitivity = options.sensitivity;\n\n\t\treadOnly(this, [\"gain\", \"Q\"]);\n\t}\n\n\tstatic getDefaults(): AutoWahOptions {\n\t\treturn Object.assign(Effect.getDefaults(), {\n\t\t\tbaseFrequency: 100,\n\t\t\toctaves: 6,\n\t\t\tsensitivity: 0,\n\t\t\tQ: 2,\n\t\t\tgain: 2,\n\t\t\tfollower: 0.2,\n\t\t});\n\t}\n\n\t/**\n\t * The number of octaves that the filter will sweep above the baseFrequency.\n\t */\n\tget octaves() {\n\t\treturn this._octaves;\n\t}\n\tset octaves(octaves) {\n\t\tthis._octaves = octaves;\n\t\tthis._setSweepRange();\n\t}\n\n\t/**\n\t * The follower's smoothing time\n\t */\n\tget follower(): Time {\n\t\treturn this._follower.smoothing;\n\t}\n\tset follower(follower) {\n\t\tthis._follower.smoothing = follower;\n\t}\n\n\t/**\n\t * The base frequency from which the sweep will start from.\n\t */\n\tget baseFrequency(): Frequency {\n\t\treturn this._baseFrequency;\n\t}\n\tset baseFrequency(baseFreq) {\n\t\tthis._baseFrequency = this.toFrequency(baseFreq);\n\t\tthis._setSweepRange();\n\t}\n\n\t/**\n\t * The sensitivity to control how responsive to the input signal the filter is.\n\t */\n\tget sensitivity(): Decibels {\n\t\treturn gainToDb(1 / this._inputBoost.gain.value);\n\t}\n\tset sensitivity(sensitivity) {\n\t\tthis._inputBoost.gain.value = 1 / dbToGain(sensitivity);\n\t}\n\n\t/**\n\t * sets the sweep range of the scaler\n\t */\n\tprivate _setSweepRange() {\n\t\tthis._sweepRange.min = this._baseFrequency;\n\t\tthis._sweepRange.max = Math.min(this._baseFrequency * Math.pow(2, this._octaves), this.context.sampleRate / 2);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._follower.dispose();\n\t\tthis._sweepRange.dispose();\n\t\tthis._bandpass.dispose();\n\t\tthis._peaking.dispose();\n\t\tthis._inputBoost.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioWorklet, ToneAudioWorkletOptions } from \"../core/context/ToneAudioWorklet\";\nimport { Effect, EffectOptions } from \"./Effect\";\nimport { NormalRange, Positive } from \"../core/type/Units\";\nimport { Gain } from \"../core/context/Gain\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { connectSeries } from \"../core/context/ToneAudioNode\";\nimport { Param } from \"../core/context/Param\";\n\nexport interface BitCrusherOptions extends EffectOptions {\n\tbits: Positive;\n}\n\n/**\n * BitCrusher down-samples the incoming signal to a different bit depth.\n * Lowering the bit depth of the signal creates distortion. Read more about BitCrushing\n * on [Wikipedia](https://en.wikipedia.org/wiki/Bitcrusher).\n * @example\n * import { BitCrusher, Synth } from \"tone\";\n * // initialize crusher and route a synth through it\n * const crusher = new BitCrusher(4).toDestination();\n * const synth = new Synth().connect(crusher);\n * synth.triggerAttackRelease(\"C2\", 2);\n * \n * @category Effect\n */\nexport class BitCrusher extends Effect<BitCrusherOptions> {\n\n\treadonly name: string = \"BitCrusher\";\n\n\t/**\n\t * The bit depth of the effect\n\t * @min 1\n\t * @max 16\n\t */\n\treadonly bits: Param<\"positive\">;\n\t\n\t/**\n\t * The node which does the bit crushing effect. Runs in an AudioWorklet when possible.\n\t */\n\tprivate _bitCrusherWorklet: BitCrusherWorklet;\n\t\n\tconstructor(bits?: Positive, frequencyReduction?: NormalRange);\n\tconstructor(options?: Partial<BitCrusherWorkletOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(BitCrusher.getDefaults(), arguments, [\"bits\"]));\n\t\tconst options = optionsFromArguments(BitCrusher.getDefaults(), arguments, [\"bits\"]);\n\t\t\n\t\tthis._bitCrusherWorklet = new BitCrusherWorklet({\n\t\t\tcontext: this.context,\n\t\t\tbits: options.bits,\n\t\t});\n\t\t// connect it up\n\t\tthis.connectEffect(this._bitCrusherWorklet);\n\n\t\tthis.bits = this._bitCrusherWorklet.bits;\n\t}\n\n\tstatic getDefaults(): BitCrusherOptions {\n\t\treturn Object.assign(Effect.getDefaults(), {\n\t\t\tbits: 4,\n\t\t\tfrequencyReduction: 0.5,\n\t\t});\n\t}\n\t\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._bitCrusherWorklet.dispose();\n\t\treturn this;\n\t}\n}\n\ninterface BitCrusherWorkletOptions extends ToneAudioWorkletOptions {\n\tbits: number;\n}\n\n/**\n * Internal class which creates an AudioWorklet to do the bit crushing\n */\nclass BitCrusherWorklet extends ToneAudioWorklet<BitCrusherWorkletOptions> {\n\t\n\treadonly name: string = \"BitCrusherWorklet\";\n\t\n\treadonly input: Gain;\n\treadonly output: Gain;\n\n\treadonly bits: Param<\"positive\">;\n\t\n\tprotected workletOptions: Partial<AudioWorkletNodeOptions> = {\n\t\tnumberOfInputs: 1,\n\t\tnumberOfOutputs: 1,\n\t}\n\t\n\tconstructor(options?: Partial<BitCrusherWorkletOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(BitCrusherWorklet.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(BitCrusherWorklet.getDefaults(), arguments);\n\t\t\n\t\tthis.input = new Gain({ context: this.context });\n\t\tthis.output = new Gain({ context: this.context });\n\n\t\tconst dummyGain = this.context.createGain();\n\n\t\tthis.bits = new Param<\"positive\">({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.bits,\n\t\t\tunits: \"positive\",\n\t\t\tminValue: 1,\n\t\t\tmaxValue: 16,\n\t\t\tparam: dummyGain.gain,\n\t\t\tswappable: true,\n\t\t});\n\t}\n\t\n\tstatic getDefaults(): BitCrusherWorkletOptions {\n\t\treturn Object.assign(ToneAudioWorklet.getDefaults(), {\n\t\t\tbits: 12,\n\t\t});\n\t}\n\t\n\tprotected _audioWorkletName(): string {\n\t\treturn \"bit-crusher\";\n\t}\n\t\n\tprotected _audioWorklet(): string {\n\t\treturn /* javascript */` \n\t\tregisterProcessor(\"${this._audioWorkletName()}\", class extends AudioWorkletProcessor {\n\t\t\tstatic get parameterDescriptors () {\n\t\t\t\treturn [{\n\t\t\t\t\tname: 'bits',\n\t\t\t\t\tdefaultValue: 12,\n\t\t\t\t\tminValue: 1,\n\t\t\t\t\tmaxValue: 16\n\t\t\t\t}];\n\t\t\t}\n\t\t\t\n\t\t\tprocess (inputs, outputs, parameters) {\n\t\t\t\tconst input = inputs[0];\n\t\t\t\tconst output = outputs[0];\n\t\t\t\tif (input && output && input.length === output.length) {\n\t\t\t\t\tconst bits = parameters.bits;\n\t\t\t\t\tfor (let channelNum = 0; channelNum < input.length; channelNum++) {\n\t\t\t\t\t\tconst inputChannel = input[channelNum];\n\t\t\t\t\t\tfor (let index = 0; index < inputChannel.length; index++) {\n\t\t\t\t\t\t\tconst value = inputChannel[index];\n\t\t\t\t\t\t\tconst step = bits.length > 1 ? Math.pow(0.5, bits[index]) : Math.pow(0.5, bits[0]);\n\t\t\t\t\t\t\tconst val = step * Math.floor(value / step + 0.5);\n\t\t\t\t\t\t\toutput[channelNum][index] = val;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\t\t`;\n\t}\n\t\n\tonReady(node: AudioWorkletNode) {\n\t\tconnectSeries(this.input, node, this.output);\n\t\t// @ts-ignore\n\t\tconst bits = node.parameters.get(\"bits\");\n\t\tthis.bits.setParam(bits);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.input.dispose();\n\t\tthis.output.dispose();\n\t\tthis.bits.dispose();\n\t\treturn this;\n\t}\n}\n","import { Effect, EffectOptions } from \"./Effect\";\nimport { Positive } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { WaveShaper } from \"../signal/WaveShaper\";\n\nexport interface ChebyshevOptions extends EffectOptions {\n\torder: Positive;\n\toversample: OverSampleType;\n}\n\n/**\n * Chebyshev is a waveshaper which is good \n * for making different types of distortion sounds.\n * Note that odd orders sound very different from even ones, \n * and order = 1 is no change. \n * Read more at [music.columbia.edu](http://music.columbia.edu/cmc/musicandcomputers/chapter4/04_06.php).\n * @example\n * import { Chebyshev, MonoSynth } from \"tone\";\n * // create a new cheby\n * const cheby = new Chebyshev(50).toDestination();\n * // create a monosynth connected to our cheby\n * const synth = new MonoSynth().connect(cheby);\n * synth.triggerAttackRelease(\"C2\", 0.4);\n * @category Effect\n */\nexport class Chebyshev extends Effect<ChebyshevOptions> {\n\n\treadonly name: string = \"Chebyshev\";\n\n\t/**\n\t * The private waveshaper node\n\t */\n\tprivate _shaper: WaveShaper;\n\n\t/**\n\t * holds onto the order of the filter\n\t */\n\tprivate _order: number;\n\t\n\t/**\n\t * @param order The order of the chebyshev polynomial. Normal range between 1-100. \n\t */\n\tconstructor(order?: Positive);\n\tconstructor(options?: Partial<ChebyshevOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Chebyshev.getDefaults(), arguments, [\"order\"]));\n\t\tconst options = optionsFromArguments(Chebyshev.getDefaults(), arguments, [\"order\"]);\n\n\t\tthis._shaper = new WaveShaper({\n\t\t\tcontext: this.context,\n\t\t\tlength: 4096\n\t\t});\n\t\tthis._order = options.order;\n\n\t\tthis.connectEffect(this._shaper);\n\t\tthis.order = options.order;\n\t\tthis.oversample = options.oversample;\n\t}\n\n\tstatic getDefaults(): ChebyshevOptions {\n\t\treturn Object.assign(Effect.getDefaults(), {\n\t\t\torder: 1,\n\t\t\toversample: \"none\" as \"none\"\n\t\t});\n\t}\n\n\t/**\n\t * get the coefficient for that degree\n\t * @param  x the x value\n\t * @param  degree \n\t * @param  memo memoize the computed value. this speeds up computation greatly. \n\t */\n\tprivate _getCoefficient(x: number, degree: number, memo: Map<number, number>): number {\n\t\tif (memo.has(degree)) {\n\t\t\treturn memo.get(degree) as number;\n\t\t} else if (degree === 0) {\n\t\t\tmemo.set(degree, 0);\n\t\t} else if (degree === 1) {\n\t\t\tmemo.set(degree, x);\n\t\t} else {\n\t\t\tmemo.set(degree, 2 * x * this._getCoefficient(x, degree - 1, memo) - this._getCoefficient(x, degree - 2, memo));\n\t\t}\n\t\treturn memo.get(degree) as number;\n\t}\n\n\t/**\n\t * The order of the Chebyshev polynomial which creates the equation which is applied to the incoming \n\t * signal through a Tone.WaveShaper. The equations are in the form:\n\t * ```\n\t * order 2: 2x^2 + 1\n\t * order 3: 4x^3 + 3x \n\t * ```\n\t * @min 1\n\t * @max 100\n\t */\n\tget order(): Positive {\n\t\treturn this._order;\n\t}\n\tset order(order) {\n\t\tthis._order = order;\n\t\tthis._shaper.setMap((x => {\n\t\t\treturn this._getCoefficient(x, order, new Map());\n\t\t}));\n\t}\n\n\t/**\n\t * The oversampling of the effect. Can either be \"none\", \"2x\" or \"4x\".\n\t */\n\tget oversample(): OverSampleType {\n\t\treturn this._shaper.oversample;\n\t}\n\tset oversample(oversampling) {\n\t\tthis._shaper.oversample = oversampling;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._shaper.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n\ninterface SplitOptions extends ToneAudioNodeOptions {\n\tchannels: number;\n}\n\n/**\n * Split splits an incoming signal into the number of given channels.\n *\n * @example\n * import { Split } from \"tone\";\n * \n * const split = new Split();\n * // stereoSignal.connect(split);\n * @category Component\n */\nexport class Split extends ToneAudioNode<SplitOptions> {\n\treadonly name: string = \"Split\";\n\n\t/**\n\t * The splitting node\n\t */\n\tprivate _splitter: ChannelSplitterNode;\n\n\treadonly input: ChannelSplitterNode;\n\treadonly output: ChannelSplitterNode;\n\n\t/**\n\t * @param channels The number of channels to merge.\n\t */\n\tconstructor(channels?: number);\n\tconstructor(options?: Partial<SplitOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Split.getDefaults(), arguments, [\"channels\"]));\n\t\tconst options = optionsFromArguments(Split.getDefaults(), arguments, [\"channels\"]);\n\n\t\tthis._splitter = this.input = this.output = this.context.createChannelSplitter(options.channels);\n\t\tthis._internalChannels = [this._splitter];\n\t}\n\n\tstatic getDefaults(): SplitOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tchannels: 2,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._splitter.disconnect();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Positive } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n\ninterface MergeOptions extends ToneAudioNodeOptions {\n\tchannels: Positive;\n}\n\n/**\n * Merge brings multiple mono input channels into a single multichannel output channel.\n *\n * @example\n * import { Merge, Noise, Oscillator } from \"tone\";\n * const merge = new Merge().toDestination();\n * // routing a sine tone in the left channel\n * const osc = new Oscillator().connect(merge, 0, 0).start();\n * // and noise in the right channel\n * const noise = new Noise().connect(merge, 0, 1).start();;\n * @category Component\n */\nexport class Merge extends ToneAudioNode<MergeOptions> {\n\n\treadonly name: string = \"Merge\";\n\n\t/**\n\t * The merger node for the channels.\n\t */\n\tprivate _merger: ChannelMergerNode;\n\n\t/**\n\t * The output is the input channels combined into a single (multichannel) output\n\t */\n\treadonly output: ChannelMergerNode;\n\n\t/**\n\t * Multiple input connections combine into a single output.\n\t */\n\treadonly input: ChannelMergerNode;\n\n\t/**\n\t * @param channels The number of channels to merge.\n\t */\n\tconstructor(channels?: Positive);\n\tconstructor(options?: Partial<MergeOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Merge.getDefaults(), arguments, [\"channels\"]));\n\t\tconst options = optionsFromArguments(Merge.getDefaults(), arguments, [\"channels\"]);\n\n\t\tthis._merger = this.output = this.input = this.context.createChannelMerger(options.channels);\n\t}\n\n\tstatic getDefaults(): MergeOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tchannels: 2,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._merger.disconnect();\n\t\treturn this;\n\t}\n}\n","import { EffectOptions } from \"./Effect\";\nimport { connect, connectSeries, OutputNode, ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { CrossFade } from \"../component/channel/CrossFade\";\nimport { Signal } from \"../signal/Signal\";\nimport { Split } from \"../component/channel/Split\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Merge } from \"../component/channel/Merge\";\nimport { readOnly } from \"../core/util/Interface\";\n\nexport type StereoEffectOptions = EffectOptions;\n\n/**\n * Base class for Stereo effects.\n */\nexport class StereoEffect<Options extends StereoEffectOptions> extends ToneAudioNode<Options> {\n\n\treadonly name: string = \"StereoEffect\";\n\n\treadonly input: Gain;\n\treadonly output: CrossFade;\n\n\t/**\n\t * the drywet knob to control the amount of effect\n\t */\n\tprivate _dryWet: CrossFade;\n\t\n\t/**\n\t * The wet control, i.e. how much of the effected\n\t * will pass through to the output.\n\t */\n\treadonly wet: Signal<\"normalRange\">;\n\t\n\t/**\n\t * Split it\n\t */\n\tprotected _split: Split;\n\t\n\t/**\n\t * the stereo effect merger\n\t */\n\tprotected _merge: Merge;\n\n\tconstructor(options: StereoEffectOptions) {\n\n\t\tsuper(options);\n\n\t\tthis.input = new Gain({ context: this.context });\n\t\t// force mono sources to be stereo\n\t\tthis.input.channelCount = 2;\n\t\tthis.input.channelCountMode = \"explicit\";\n\n\t\tthis._dryWet = this.output = new CrossFade({\n\t\t\tcontext: this.context,\n\t\t\tfade: options.wet\n\t\t});\n\t\tthis.wet = this._dryWet.fade;\n\t\tthis._split = new Split({ context: this.context, channels: 2 });\n\t\tthis._merge = new Merge({ context: this.context, channels: 2 });\n\n\t\t// connections\n\t\tthis.input.connect(this._split);\n\t\t// dry wet connections\n\t\tthis.input.connect(this._dryWet.a);\n\t\tthis._merge.connect(this._dryWet.b);\n\t\treadOnly(this, [\"wet\"]);\n\t}\n\t\n\t/**\n\t * Connect the left part of the effect\n\t */\n\tprotected connectEffectLeft(...nodes: OutputNode[]): void{\n\t\tthis._split.connect(nodes[0], 0, 0);\n\t\tconnectSeries(...nodes);\n\t\tconnect(nodes[nodes.length-1], this._merge, 0, 0);\n\t}\n\t\n\t/**\n\t * Connect the right part of the effect\n\t */\n\tprotected connectEffectRight(...nodes: OutputNode[]): void{\n\t\tthis._split.connect(nodes[0], 1, 0);\n\t\tconnectSeries(...nodes);\n\t\tconnect(nodes[nodes.length-1], this._merge, 0, 1);\n\t}\n\n\tstatic getDefaults(): StereoEffectOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\twet: 1,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._dryWet.dispose();\n\t\tthis._split.dispose();\n\t\tthis._merge.dispose();\n\t\treturn this;\n\t}\n}\n","import { StereoEffect, StereoEffectOptions } from \"./StereoEffect\";\nimport { NormalRange } from \"../core/type/Units\";\nimport { Signal } from \"../signal/Signal\";\nimport { Gain } from \"../core/context/Gain\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Split } from \"../component/channel/Split\";\nimport { Merge } from \"../component/channel/Merge\";\n\nexport interface StereoFeedbackEffectOptions extends StereoEffectOptions {\n\tfeedback: NormalRange;\n}\n\n/**\n * Just like a stereo feedback effect, but the feedback is routed from left to right\n * and right to left instead of on the same channel.\n * ```\n * +--------------------------------+ feedbackL <-----------------------------------+\n * |                                                                                |\n * +-->                          +----->        +---->                          +---+\n *      feedbackMerge +--> split        (EFFECT)       merge +--> feedbackSplit\n * +-->                          +----->        +---->                          +---+\n * |                                                                                |\n * +--------------------------------+ feedbackR <-----------------------------------+\n * ```\n */\nexport class StereoFeedbackEffect<Options extends StereoFeedbackEffectOptions> extends StereoEffect<Options> {\n\t\n\t/**\n\t * The amount of feedback from the output\n\t * back into the input of the effect (routed\n\t * across left and right channels).\n\t */\n\treadonly feedback: Signal<\"normalRange\">;\n\n\t/**\n\t * the left side feedback\n\t */\n\tprotected _feedbackL: Gain;\n\n\t/**\n\t * the right side feedback\n\t */\n\tprotected _feedbackR: Gain;\n\n\t/**\n\t * Split the channels for feedback\n\t */\n\tprotected _feedbackSplit: Split;\n\n\t/**\n\t * Merge the channels for feedback\n\t */\n\tprotected _feedbackMerge: Merge;\n\n\tconstructor(options: StereoFeedbackEffectOptions) {\n\n\t\tsuper(options);\n\n\t\tthis.feedback = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.feedback, \n\t\t\tunits: \"normalRange\"\n\t\t});\n\t\tthis._feedbackL = new Gain({ context: this.context });\n\t\tthis._feedbackR = new Gain({ context: this.context });\n\n\t\tthis._feedbackSplit = new Split({ context: this.context, channels: 2 });\n\t\tthis._feedbackMerge = new Merge({ context: this.context, channels: 2 });\n\n\t\tthis._merge.connect(this._feedbackSplit);\n\t\tthis._feedbackMerge.connect(this._split);\n\t\t\n\t\t// the left output connected to the left input\n\t\tthis._feedbackSplit.connect(this._feedbackL, 0, 0);\n\t\tthis._feedbackL.connect(this._feedbackMerge, 0, 0);\n\n\t\t// the right output connected to the right input\n\t\tthis._feedbackSplit.connect(this._feedbackR, 1, 0);\n\t\tthis._feedbackR.connect(this._feedbackMerge, 0, 1);\n\t\t\n\t\t// the feedback control\n\t\tthis.feedback.fan(this._feedbackL.gain, this._feedbackR.gain);\n\t\treadOnly(this, [\"feedback\"]);\n\t}\n\n\tstatic getDefaults(): StereoFeedbackEffectOptions {\n\t\treturn Object.assign(StereoEffect.getDefaults(), {\n\t\t\tfeedback: 0.5,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.feedback.dispose();\n\t\tthis._feedbackL.dispose();\n\t\tthis._feedbackR.dispose();\n\t\tthis._feedbackSplit.dispose();\n\t\tthis._feedbackMerge.dispose();\n\t\treturn this;\n\t}\n}\n","import { StereoFeedbackEffect, StereoFeedbackEffectOptions } from \"../effect/StereoFeedbackEffect\";\nimport { Degrees, Frequency, Milliseconds, NormalRange, Seconds, Time } from \"../core/type/Units\";\nimport { ToneOscillatorType } from \"../source/oscillator/OscillatorInterface\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Delay } from \"../core/context/Delay\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\n\nexport interface ChorusOptions extends StereoFeedbackEffectOptions {\n\tfrequency: Frequency;\n\tdelayTime: Milliseconds;\n\tdepth: NormalRange;\n\ttype: ToneOscillatorType;\n\tspread: Degrees;\t\n}\n\n/**\n * Chorus is a stereo chorus effect composed of a left and right delay with an [[LFO]] applied to the delayTime of each channel.\n * When [[feedback]] is set to a value larger than 0, you also get Flanger-type effects. \n * Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna/blob/master/tuna.js).\n * Read more on the chorus effect on [SoundOnSound](http://www.soundonsound.com/sos/jun04/articles/synthsecrets.htm).\n *\n * @example\n * import { Chorus, PolySynth } from \"tone\";\n * const chorus = new Chorus(4, 2.5, 0.5);\n * const synth = new PolySynth().connect(chorus);\n * synth.triggerAttackRelease([\"C3\", \"E3\", \"G3\"], \"8n\");\n * \n * @category Effect\n */\nexport class Chorus extends StereoFeedbackEffect<ChorusOptions> {\n\n\treadonly name: string = \"Chorus\";\n\n\t/**\n\t * the depth of the chorus\n\t */\n\tprivate _depth: NormalRange;\n\n\t/**\n\t * the delayTime in seconds.\n\t */\n\tprivate _delayTime: Seconds;\n\n\t/**\n\t * the lfo which controls the delayTime\n\t */\n\tprivate _lfoL: LFO\n\n\t/**\n\t * another LFO for the right side with a 180 degree phase diff\n\t */\n\tprivate _lfoR: LFO\n\n\t/**\n\t * delay for left\n\t */\n\tprivate _delayNodeL: Delay;\n\n\t/**\n\t * delay for right\n\t */\n\tprivate _delayNodeR: Delay;\n\n\t/**\n\t * The frequency of the LFO which modulates the delayTime.\n\t */\n\treadonly frequency: Signal<\"frequency\">\n\n\t/**\n\t * @param frequency The frequency of the LFO.\n\t * @param delayTime The delay of the chorus effect in ms.\n\t * @param depth The depth of the chorus.\n\t */\n\tconstructor(frequency?: Frequency, delayTime?: Milliseconds, depth?: NormalRange);\n\tconstructor(options?: Partial<ChorusOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Chorus.getDefaults(), arguments, [\"frequency\", \"delayTime\", \"depth\"]));\n\t\tconst options = optionsFromArguments(Chorus.getDefaults(), arguments, [\"frequency\", \"delayTime\", \"depth\"]);\n\n\t\tthis._depth = options.depth;\n\t\tthis._delayTime = options.delayTime / 1000;\n\t\tthis._lfoL = new LFO({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.frequency,\n\t\t\tmin: 0,\n\t\t\tmax: 1,\n\t\t});\n\t\tthis._lfoR = new LFO({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.frequency,\n\t\t\tmin: 0,\n\t\t\tmax: 1,\n\t\t\tphase: 180\n\t\t});\n\t\tthis._delayNodeL = new Delay({ context: this.context });\n\t\tthis._delayNodeR = new Delay({ context: this.context });\n\t\tthis.frequency = this._lfoL.frequency;\n\t\treadOnly(this, [\"frequency\"]);\n\t\t// have one LFO frequency control the other\n\t\tthis._lfoL.frequency.connect(this._lfoR.frequency);\n\n\t\t// connections\n\t\tthis.connectEffectLeft(this._delayNodeL);\n\t\tthis.connectEffectRight(this._delayNodeR);\n\t\t// lfo setup\n\t\tthis._lfoL.connect(this._delayNodeL.delayTime);\n\t\tthis._lfoR.connect(this._delayNodeR.delayTime);\n\t\t// set the initial values\n\t\tthis.depth = this._depth;\n\t\tthis.type = options.type;\n\t\tthis.spread = options.spread;\n\t}\n\n\tstatic getDefaults(): ChorusOptions {\n\t\treturn Object.assign(StereoFeedbackEffect.getDefaults(), {\n\t\t\tfrequency: 1.5,\n\t\t\tdelayTime: 3.5,\n\t\t\tdepth: 0.7,\n\t\t\ttype: \"sine\" as \"sine\",\n\t\t\tspread: 180,\n\t\t\tfeedback: 0,\n\t\t\twet: 0.5,\n\t\t});\n\t}\n\n\t/**\n\t * The depth of the effect. A depth of 1 makes the delayTime\n\t * modulate between 0 and 2*delayTime (centered around the delayTime).\n\t */\n\tget depth(): NormalRange {\n\t\treturn this._depth;\n\t}\n\tset depth(depth) {\n\t\tthis._depth = depth;\n\t\tconst deviation = this._delayTime * depth;\n\t\tthis._lfoL.min = Math.max(this._delayTime - deviation, 0);\n\t\tthis._lfoL.max = this._delayTime + deviation;\n\t\tthis._lfoR.min = Math.max(this._delayTime - deviation, 0);\n\t\tthis._lfoR.max = this._delayTime + deviation;\n\t}\n\n\t/**\n\t * The delayTime in milliseconds of the chorus. A larger delayTime\n\t * will give a more pronounced effect. Nominal range a delayTime\n\t * is between 2 and 20ms.\n\t */\n\tget delayTime(): Milliseconds {\n\t\treturn this._delayTime * 1000;\n\t}\n\tset delayTime(delayTime) {\n\t\tthis._delayTime = delayTime / 1000;\n\t\tthis.depth = this._depth;\n\t}\n\n\t/**\n\t * The oscillator type of the LFO.\n\t */\n\tget type(): ToneOscillatorType {\n\t\treturn this._lfoL.type;\n\t}\n\tset type(type) {\n\t\tthis._lfoL.type = type;\n\t\tthis._lfoR.type = type;\n\t}\n\n\t/**\n\t * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.\n\t * When set to 180, LFO's will be panned hard left and right respectively.\n\t */\n\tget spread(): Degrees {\n\t\treturn this._lfoR.phase - this._lfoL.phase;\n\t}\n\tset spread(spread) {\n\t\tthis._lfoL.phase = 90 - (spread/2);\n\t\tthis._lfoR.phase = (spread/2) + 90;\n\t}\n\n\t/**\n\t * Start the effect.\n\t */\n\tstart(time?: Time): this {\n\t\tthis._lfoL.start(time);\n\t\tthis._lfoR.start(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the lfo\n\t */\n\tstop(time?: Time): this {\n\t\tthis._lfoL.stop(time);\n\t\tthis._lfoR.stop(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sync the filter to the transport. See [[LFO.sync]]\n\t */\n\tsync(): this {\n\t\tthis._lfoL.sync();\n\t\tthis._lfoR.sync();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unsync the filter from the transport.\n\t */\n\tunsync(): this {\n\t\tthis._lfoL.unsync();\n\t\tthis._lfoR.unsync();\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._lfoL.dispose();\n\t\tthis._lfoR.dispose();\n\t\tthis._delayNodeL.dispose();\n\t\tthis._delayNodeR.dispose();\n\t\tthis.frequency.dispose();\n\t\treturn this;\n\t}\n}\n","import { optionsFromArguments } from \"../core/util/Defaults\";\nimport { WaveShaper } from \"../signal/WaveShaper\";\nimport { Effect, EffectOptions } from \"./Effect\";\n\nexport interface DistortionOptions extends EffectOptions {\n\tdistortion: number;\n\toversample: OverSampleType;\n}\n\n/**\n * A simple distortion effect using Tone.WaveShaper.\n * Algorithm from [this stackoverflow answer](http://stackoverflow.com/a/22313408).\n *\n * @example\n * import { Distortion, FMSynth } from \"tone\";\n * const dist = new Distortion(0.8).toDestination();\n * const fm = new FMSynth().connect(dist);\n * fm.triggerAttackRelease(\"A1\", \"8n\");\n * @category Effect\n */\nexport class Distortion extends Effect<DistortionOptions> {\n\n\treadonly name: string = \"Distortion\";\n\n\t/**\n\t * The waveshaper which does the distortion\n\t */\n\tprivate _shaper: WaveShaper;\n\n\t/**\n\t * Stores the distortion value\n\t */\n\tprivate _distortion: number;\n\n\t/**\n\t * @param distortion The amount of distortion (nominal range of 0-1)\n\t */\n\tconstructor(distortion?: number);\n\tconstructor(options?: Partial<DistortionOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Distortion.getDefaults(), arguments, [\"distortion\"]));\n\t\tconst options = optionsFromArguments(Distortion.getDefaults(), arguments, [\"distortion\"]);\n\n\t\tthis._shaper = new WaveShaper({\n\t\t\tcontext: this.context,\n\t\t\tlength: 4096,\n\t\t});\n\n\t\tthis._distortion = options.distortion;\n\n\t\tthis.connectEffect(this._shaper);\n\t\tthis.distortion = options.distortion;\n\t\tthis.oversample = options.oversample;\n\t}\n\n\tstatic getDefaults(): DistortionOptions {\n\t\treturn Object.assign(Effect.getDefaults(), {\n\t\t\tdistortion: 0.4,\n\t\t\toversample: \"none\" as OverSampleType,\n\t\t});\n\t}\n\n\t/**\n\t * The amount of distortion. Nominal range is between 0 and 1.\n\t */\n\tget distortion(): number {\n\t\treturn this._distortion;\n\t}\n\tset distortion(amount) {\n\t\tthis._distortion = amount;\n\t\tconst k = amount * 100;\n\t\tconst deg = Math.PI / 180;\n\t\tthis._shaper.setMap((x) => {\n\t\t\tif (Math.abs(x) < 0.001) {\n\t\t\t\t// should output 0 when input is 0\n\t\t\t\treturn 0;\n\t\t\t} else {\n\t\t\t\treturn (3 + k) * x * 20 * deg / (Math.PI + k * Math.abs(x));\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * The oversampling of the effect. Can either be \"none\", \"2x\" or \"4x\".\n\t */\n\tget oversample(): OverSampleType {\n\t\treturn this._shaper.oversample;\n\t}\n\tset oversample(oversampling) {\n\t\tthis._shaper.oversample = oversampling;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._shaper.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../core/context/Gain\";\nimport { Param } from \"../core/context/Param\";\nimport { NormalRange } from \"../core/type/Units\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Effect, EffectOptions } from \"./Effect\";\n\nexport interface FeedbackEffectOptions extends EffectOptions {\n\t/**\n\t * The feedback from the output back to the input\n\t * ```\n\t * +---<--------<---+\n\t * |                |\n\t * |  +----------+  |\n\t * +--> feedback +>-+\n\t *    +----------+\n\t * ```\n\t */\n\tfeedback: NormalRange;\n}\n\n/**\n * FeedbackEffect provides a loop between an audio source and its own output.\n * This is a base-class for feedback effects.\n */\nexport abstract class FeedbackEffect<Options extends FeedbackEffectOptions> extends Effect<Options> {\n\n\treadonly name: string = \"FeedbackEffect\";\n\n\t/**\n\t * the gain which controls the feedback\n\t */\n\tprivate _feedbackGain: Gain<\"normalRange\">;\n\n\t/**\n\t * The amount of signal which is fed back into the effect input.\n\t */\n\tfeedback: Param<\"normalRange\">;\n\n\tconstructor(options: FeedbackEffectOptions) {\n\n\t\tsuper(options);\n\n\t\tthis._feedbackGain = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: options.feedback,\n\t\t\tunits: \"normalRange\",\n\t\t});\n\n\t\tthis.feedback = this._feedbackGain.gain;\n\t\treadOnly(this, \"feedback\");\n\n\t\t// the feedback loop\n\t\tthis.effectReturn.chain(this._feedbackGain, this.effectSend);\n\t}\n\n\tstatic getDefaults(): FeedbackEffectOptions {\n\t\treturn Object.assign(Effect.getDefaults(), {\n\t\t\tfeedback: 0.125,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._feedbackGain.dispose();\n\t\tthis.feedback.dispose();\n\t\treturn this;\n\t}\n}\n","import { Delay } from \"../core/context/Delay\";\nimport { Param } from \"../core/context/Param\";\nimport { NormalRange, Time } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { FeedbackEffect, FeedbackEffectOptions } from \"./FeedbackEffect\";\n\ninterface FeedbackDelayOptions extends FeedbackEffectOptions {\n\tdelayTime: Time;\n\tmaxDelay: Time;\n}\n\n/**\n * FeedbackDelay is a DelayNode in which part of output signal is fed back into the delay.\n *\n * @param delayTime The delay applied to the incoming signal.\n * @param feedback The amount of the effected signal which is fed back through the delay.\n * @example\n * import { FeedbackDelay, MembraneSynth } from \"tone\";\n * const feedbackDelay = new FeedbackDelay(\"8n\", 0.5).toDestination();\n * const tom = new MembraneSynth({\n * \toctaves: 4,\n * \tpitchDecay: 0.1\n * }).connect(feedbackDelay);\n * tom.triggerAttackRelease(\"A2\", \"32n\");\n * @category Effect\n */\nexport class FeedbackDelay extends FeedbackEffect<FeedbackDelayOptions> {\n\n\treadonly name: string = \"FeedbackDelay\";\n\n\t/**\n\t * the delay node\n\t */\n\tprivate _delayNode: Delay;\n\n\t/**\n\t * The delayTime of the FeedbackDelay.\n\t */\n\treadonly delayTime: Param<\"time\">;\n\n\tconstructor(delayTime?: Time, feedback?: NormalRange);\n\tconstructor(options?: Partial<FeedbackDelayOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(FeedbackDelay.getDefaults(), arguments, [\"delayTime\", \"feedback\"]));\n\t\tconst options = optionsFromArguments(FeedbackDelay.getDefaults(), arguments, [\"delayTime\", \"feedback\"]);\n\n\t\tthis._delayNode = new Delay({\n\t\t\tcontext: this.context,\n\t\t\tdelayTime: options.delayTime,\n\t\t\tmaxDelay: options.maxDelay,\n\t\t});\n\t\tthis.delayTime = this._delayNode.delayTime;\n\n\t\t// connect it up\n\t\tthis.connectEffect(this._delayNode);\n\t\treadOnly(this, \"delayTime\");\n\t}\n\n\tstatic getDefaults(): FeedbackDelayOptions {\n\t\treturn Object.assign(FeedbackEffect.getDefaults(), {\n\t\t\tdelayTime: 0.25,\n\t\t\tmaxDelay: 1,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._delayNode.dispose();\n\t\tthis.delayTime.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { connectSeries, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\n\n/**\n * PhaseShiftAllpass is an very efficient implementation of a Hilbert Transform\n * using two Allpass filter banks whose outputs have a phase difference of 90°.\n * Here the `offset90` phase is offset by +90° in relation to `output`.\n * Coefficients and structure was developed by Olli Niemitalo.\n * For more details see: http://yehar.com/blog/?p=368\n * @category Component\n */\nexport class PhaseShiftAllpass extends ToneAudioNode<ToneAudioNodeOptions> {\n\n\treadonly name: string = \"PhaseShiftAllpass\";\n\n\treadonly input = new Gain({ context: this.context });\n\n\t/**\n\t * The Allpass filter in the first bank\n\t */\n\tprivate _bank0: IIRFilterNode[];\n\n\t/**\n\t * The Allpass filter in the seconds bank\n\t */\n\tprivate _bank1: IIRFilterNode[];\n\n\t/**\n\t * A IIR filter implementing a delay by one sample used by the first bank\n\t */\n\tprivate _oneSampleDelay: IIRFilterNode;\n\n\t/**\n\t * The phase shifted output\n\t */\n\treadonly output = new Gain({ context: this.context });\n\n\t/**\n\t * The PhaseShifted allpass output\n\t */\n\treadonly offset90 = new Gain({ context: this.context });\n\n\tconstructor(options?: Partial<ToneAudioNodeOptions>) {\n\n\t\tsuper(options);\n\n\t\tconst allpassBank1Values = [0.6923878, 0.9360654322959, 0.9882295226860, 0.9987488452737];\n\t\tconst allpassBank2Values = [0.4021921162426, 0.8561710882420, 0.9722909545651, 0.9952884791278];\n\n\t\tthis._bank0 = this._createAllPassFilterBank(allpassBank1Values);\n\t\tthis._bank1 = this._createAllPassFilterBank(allpassBank2Values);\n\t\tthis._oneSampleDelay = this.context.createIIRFilter([0.0, 1.0], [1.0, 0.0]);\n\n\t\t// connect Allpass filter banks\n\t\tconnectSeries(this.input, ...this._bank0, this._oneSampleDelay, this.output);\n\t\tconnectSeries(this.input, ...this._bank1, this.offset90);\n\t}\n\n\t/**\n\t * Create all of the IIR filters from an array of values using the coefficient calculation.\n\t */\n\tprivate _createAllPassFilterBank(bankValues: number[]): IIRFilterNode[] {\n\t\tconst nodes: IIRFilterNode[] = bankValues.map(value => {\n\t\t\tconst coefficients = [[value * value, 0, -1], [1, 0, -(value * value)]];\n\t\t\treturn this.context.createIIRFilter(coefficients[0], coefficients[1]);\n\t\t});\n\n\t\treturn nodes;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.input.dispose();\n\t\tthis.output.dispose();\n\t\tthis.offset90.dispose();\n\t\tthis._bank0.forEach(f => f.disconnect());\n\t\tthis._bank1.forEach(f => f.disconnect());\n\t\tthis._oneSampleDelay.disconnect();\n\t\treturn this;\n\t}\n}\n","import { PhaseShiftAllpass } from \"../component/filter/PhaseShiftAllpass\";\nimport { Frequency } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Effect, EffectOptions } from \"../effect/Effect\";\nimport { Add } from \"../signal/Add\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Negate } from \"../signal/Negate\";\nimport { Signal } from \"../signal/Signal\";\nimport { Oscillator } from \"../source/oscillator/Oscillator\";\nimport { ToneOscillatorNode } from \"../source/oscillator/ToneOscillatorNode\";\n\ninterface FrequencyShifterOptions extends EffectOptions {\n\tfrequency: Frequency;\n}\n\n/**\n * FrequencyShifter can be used to shift all frequencies of a signal by a fixed amount.\n * The amount can be changed at audio rate and the effect is applied in real time.\n * The frequency shifting is implemented with a technique called single side band modulation using a ring modulator.\n * Note: Contrary to pitch shifting, all frequencies are shifted by the same amount,\n * destroying the harmonic relationship between them. This leads to the classic ring modulator timbre distortion.\n * The algorithm will produces some aliasing towards the high end, especially if your source material\n * contains a lot of high frequencies. Unfortunatelly the webaudio API does not support resampling\n * buffers in real time, so it is not possible to fix it properly. Depending on the use case it might\n * be an option to low pass filter your input before frequency shifting it to get ride of the aliasing.\n * You can find a very detailed description of the algorithm here: https://larzeitlin.github.io/RMFS/\n *\n * @example\n * import { FrequencyShifter, Oscillator } from \"tone\";\n * const input = new Oscillator(230, \"sawtooth\").start();\n * const shift = new FrequencyShifter(42).toDestination();\n * input.connect(shift);\n * @category Effect\n */\nexport class FrequencyShifter extends Effect<FrequencyShifterOptions> {\n\n\treadonly name: string = \"FrequencyShifter\";\n\n\t/**\n\t * The ring modulators carrier frequency. This frequency determines\n\t * by how many Hertz the input signal will be shifted up or down. Default is 0.\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * The ring modulators sine carrier\n\t */\n\tprivate _sine: ToneOscillatorNode;\n\n\t/**\n\t * The ring modulators cosine carrier\n\t */\n\tprivate _cosine: Oscillator;\n\n\t/**\n\t * The sine multiply operator\n\t */\n\tprivate _sineMultiply: Multiply;\n\n\t/**\n\t * The cosine multiply operator\n\t */\n\tprivate _cosineMultiply: Multiply;\n\n\t/**\n\t * The negate operator\n\t */\n\tprivate _negate: Negate;\n\n\t/**\n\t * The final add operator\n\t */\n\tprivate _add: Add;\n\n\t/**\n\t * The phase shifter to create the initial 90° phase offset\n\t */\n\tprivate _phaseShifter: PhaseShiftAllpass;\n\n\t/**\n\t * @param frequency The incoming signal is shifted by this frequency value.\n\t */\n\tconstructor(frequency?: Frequency);\n\tconstructor(options?: Partial<FrequencyShifterOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(FrequencyShifter.getDefaults(), arguments, [\"frequency\"]));\n\t\tconst options = optionsFromArguments(FrequencyShifter.getDefaults(), arguments, [\"frequency\"]);\n\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t\tminValue: -this.context.sampleRate/2,\n\t\t\tmaxValue: this.context.sampleRate/2,\n\t\t});\n\n\t\tthis._sine = new ToneOscillatorNode({\n\t\t\tcontext: this.context,\n\t\t\ttype: \"sine\",\n\t\t});\n\n\t\tthis._cosine = new Oscillator({\n\t\t\tcontext: this.context,\n\t\t\tphase: -90,\n\t\t\ttype: \"sine\",\n\t\t});\n\n\t\tthis._sineMultiply = new Multiply({ context: this.context });\n\t\tthis._cosineMultiply = new Multiply({ context: this.context });\n\t\tthis._negate = new Negate({ context: this.context });\n\t\tthis._add = new Add({ context: this.context });\n\n\t\tthis._phaseShifter = new PhaseShiftAllpass({ context: this.context });\n\t\tthis.effectSend.connect(this._phaseShifter);\n\n\t\t// connect the carrier frequency signal to the two oscillators\n\t\tthis.frequency.fan(this._sine.frequency, this._cosine.frequency);\n\n\t\tthis._phaseShifter.offset90.connect(this._cosineMultiply);\n\t\tthis._cosine.connect(this._cosineMultiply.factor);\n\n\t\tthis._phaseShifter.connect(this._sineMultiply);\n\t\tthis._sine.connect(this._sineMultiply.factor);\n\t\tthis._sineMultiply.connect(this._negate);\n\n\t\tthis._cosineMultiply.connect(this._add);\n\t\tthis._negate.connect(this._add.addend);\n\n\t\tthis._add.connect(this.effectReturn);\n\n\t\t// start the oscillators at the same time\n\t\tconst now = this.immediate();\n\t\tthis._sine.start(now);\n\t\tthis._cosine.start(now);\n\t}\n\n\tstatic getDefaults(): FrequencyShifterOptions {\n\t\treturn Object.assign(Effect.getDefaults(), {\n\t\t\tfrequency: 0,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis._add.dispose();\n\t\tthis._cosine.dispose();\n\t\tthis._cosineMultiply.dispose();\n\t\tthis._negate.dispose();\n\t\tthis._phaseShifter.dispose();\n\t\tthis._sine.dispose();\n\t\tthis._sineMultiply.dispose();\n\t\treturn this;\n\t}\n}\n","import { StereoEffect, StereoEffectOptions } from \"./StereoEffect\";\nimport { Frequency, NormalRange } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Signal } from \"../signal/Signal\";\nimport { LowpassCombFilter } from \"../component/filter/LowpassCombFilter\";\n\nexport interface FreeverbOptions extends StereoEffectOptions {\n\tdampening: Frequency;\n\troomSize: NormalRange;\n}\n\n/**\n * An array of comb filter delay values from Freeverb implementation\n */\nconst combFilterTunings = [1557 / 44100, 1617 / 44100, 1491 / 44100, 1422 / 44100, 1277 / 44100, 1356 / 44100, 1188 / 44100, 1116 / 44100];\n\n/**\n * An array of allpass filter frequency values from Freeverb implementation\n */\nconst allpassFilterFrequencies = [225, 556, 441, 341];\n\n/**\n * Freeverb is a reverb based on [Freeverb](https://ccrma.stanford.edu/~jos/pasp/Freeverb.html).\n * Read more on reverb on [Sound On Sound](https://web.archive.org/web/20160404083902/http://www.soundonsound.com:80/sos/feb01/articles/synthsecrets.asp).\n * Freeverb is now implemented with an AudioWorkletNode which may result on performance degradation on some platforms\n * @example\n * import { Freeverb, NoiseSynth } from \"tone\";\n * const freeverb = new Freeverb().toDestination();\n * freeverb.dampening = 1000;\n * // routing synth through the reverb\n * const synth = new NoiseSynth().connect(freeverb);\n * synth.triggerAttackRelease(0.05);\n * @category Effect\n */\nexport class Freeverb extends StereoEffect<FreeverbOptions> {\n\n\treadonly name: string = \"Freeverb\";\n\n\t/**\n\t * The roomSize value between 0 and 1. A larger roomSize will result in a longer decay.\n\t */\n\treadonly roomSize: Signal<\"normalRange\">;\n\n\t/**\n\t * the comb filters\n\t */\n\tprivate _combFilters: LowpassCombFilter[] = [];\n\n\t/**\n\t * the allpass filters on the left\n\t */\n\tprivate _allpassFiltersL: BiquadFilterNode[] = [];\n\n\t/**\n\t * the allpass filters on the right\n\t */\n\tprivate _allpassFiltersR: BiquadFilterNode[]= [];\n\n\t/**\n\t * @param roomSize Correlated to the decay time.\n\t * @param dampening The cutoff frequency of a lowpass filter as part of the reverb.\n\t */\n\tconstructor(roomSize?: NormalRange, dampening?: Frequency);\n\tconstructor(options?: Partial<FreeverbOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Freeverb.getDefaults(), arguments, [\"roomSize\", \"dampening\"]));\n\t\tconst options = optionsFromArguments(Freeverb.getDefaults(), arguments, [\"roomSize\", \"dampening\"]);\n\t\n\t\tthis.roomSize = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.roomSize,\n\t\t\tunits: \"normalRange\",\n\t\t});\n\n\t\t// make the allpass filters on the right\n\t\tthis._allpassFiltersL = allpassFilterFrequencies.map(freq => {\n\t\t\tconst allpassL = this.context.createBiquadFilter();\n\t\t\tallpassL.type = \"allpass\";\n\t\t\tallpassL.frequency.value = freq;\n\t\t\treturn allpassL;\n\t\t});\n\t\t\n\t\t// make the allpass filters on the left\n\t\tthis._allpassFiltersR = allpassFilterFrequencies.map(freq => {\n\t\t\tconst allpassR = this.context.createBiquadFilter();\n\t\t\tallpassR.type = \"allpass\";\n\t\t\tallpassR.frequency.value = freq;\n\t\t\treturn allpassR;\n\t\t});\n\n\t\t// make the comb filters\n\t\tthis._combFilters = combFilterTunings.map((delayTime, index) => {\n\t\t\tconst lfpf = new LowpassCombFilter({\n\t\t\t\tcontext: this.context,\n\t\t\t\tdampening: options.dampening,\n\t\t\t\tdelayTime,\n\t\t\t});\n\t\t\tif (index < combFilterTunings.length / 2) {\n\t\t\t\tthis.connectEffectLeft(lfpf, ...this._allpassFiltersL);\n\t\t\t} else {\n\t\t\t\tthis.connectEffectRight(lfpf, ...this._allpassFiltersR);\n\t\t\t}\n\t\t\tthis.roomSize.connect(lfpf.resonance);\n\t\t\treturn lfpf;\n\t\t});\n\n\t\treadOnly(this, [\"roomSize\"]);\n\t}\n\n\tstatic getDefaults(): FreeverbOptions {\n\t\treturn Object.assign(StereoEffect.getDefaults(), {\n\t\t\troomSize: 0.7,\n\t\t\tdampening: 3000\n\t\t});\n\t}\n\n\t/**\n\t * The amount of dampening of the reverberant signal.\n\t */\n\t\n\tget dampening(): Frequency {\n\t\treturn this._combFilters[0].dampening;\n\t}\n\tset dampening(d) {\n\t\tthis._combFilters.forEach(c => c.dampening = d);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._allpassFiltersL.forEach(al => al.disconnect());\n\t\tthis._allpassFiltersR.forEach(ar => ar.disconnect());\n\t\tthis._combFilters.forEach(cf => cf.dispose());\n\t\tthis.roomSize.dispose();\n\t\treturn this;\n\t}\n}\n","import { NormalRange } from \"../core/type/Units\";\nimport { StereoEffect, StereoEffectOptions } from \"./StereoEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Scale } from \"../signal/Scale\";\nimport { Signal } from \"../signal/Signal\";\nimport { FeedbackCombFilter } from \"../component/filter/FeedbackCombFilter\";\nimport { readOnly } from \"../core/util/Interface\";\n\nexport interface JCReverbOptions extends StereoEffectOptions {\n\troomSize: NormalRange;\n}\n\n/**\n * an array of the comb filter delay time values\n */\nconst combFilterDelayTimes = [1687 / 25000, 1601 / 25000, 2053 / 25000, 2251 / 25000];\n\n/**\n * the resonances of each of the comb filters\n */\nconst combFilterResonances = [0.773, 0.802, 0.753, 0.733];\n\n/**\n * the allpass filter frequencies\n */\nconst allpassFilterFreqs = [347, 113, 37];\n\n/**\n * JCReverb is a simple [Schroeder Reverberator](https://ccrma.stanford.edu/~jos/pasp/Schroeder_Reverberators.html)\n * tuned by John Chowning in 1970.\n * It is made up of three allpass filters and four [[FeedbackCombFilter]].\n * JCReverb is now implemented with an AudioWorkletNode which may result on performance degradation on some platforms\n *\n * @example\n * import { DuoSynth, FeedbackDelay, JCReverb } from \"tone\";\n * const reverb = new JCReverb(0.4).toDestination();\n * const delay = new FeedbackDelay(0.5);\n * // connecting the synth to reverb through delay\n * const synth = new DuoSynth().chain(delay, reverb);\n * synth.triggerAttackRelease(\"A4\", \"8n\");\n * \n * @category Effect\n */\nexport class JCReverb extends StereoEffect<JCReverbOptions> {\n\n\treadonly name: string = \"JCReverb\";\n\t\n\t/**\n\t * Room size control values. \n\t */\n\treadonly roomSize: Signal<\"normalRange\">\n\n\t/**\n\t * Scale the room size\n\t */\n\tprivate _scaleRoomSize: Scale;\n\n\t/**\n\t * a series of allpass filters\n\t */\n\tprivate _allpassFilters: BiquadFilterNode[] = [];\n\n\t/**\n\t * parallel feedback comb filters\n\t */\n\tprivate _feedbackCombFilters: FeedbackCombFilter[] = [];\n\n\t/**\n\t * @param roomSize Correlated to the decay time.\n\t */\n\tconstructor(roomSize?: NormalRange);\n\tconstructor(options?: Partial<JCReverbOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(JCReverb.getDefaults(), arguments, [\"roomSize\"]));\n\t\tconst options = optionsFromArguments(JCReverb.getDefaults(), arguments, [\"roomSize\"]);\n\n\t\tthis.roomSize = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.roomSize,\n\t\t\tunits: \"normalRange\",\n\t\t});\n\t\tthis._scaleRoomSize = new Scale({\n\t\t\tcontext: this.context,\n\t\t\tmin: -0.733, \n\t\t\tmax: 0.197,\n\t\t});\n\n\t\t// make the allpass filters\n\t\tthis._allpassFilters = allpassFilterFreqs.map(freq => {\n\t\t\tconst allpass = this.context.createBiquadFilter();\n\t\t\tallpass.type = \"allpass\";\n\t\t\tallpass.frequency.value = freq;\n\t\t\treturn allpass;\n\t\t});\n\t\t\n\t\t// and the comb filters\n\t\tthis._feedbackCombFilters = combFilterDelayTimes.map((delayTime, index) => {\n\t\t\tconst fbcf = new FeedbackCombFilter({\n\t\t\t\tcontext: this.context,\n\t\t\t\tdelayTime, \n\t\t\t});\n\t\t\tthis._scaleRoomSize.connect(fbcf.resonance);\n\t\t\tfbcf.resonance.value = combFilterResonances[index];\n\t\t\tif (index < combFilterDelayTimes.length / 2) {\n\t\t\t\tthis.connectEffectLeft(...this._allpassFilters, fbcf);\n\t\t\t} else {\n\t\t\t\tthis.connectEffectRight(...this._allpassFilters, fbcf);\n\t\t\t}\n\t\t\treturn fbcf;\n\t\t});\n\n\t\t// chain the allpass filters together\n\t\tthis.roomSize.connect(this._scaleRoomSize);\n\t\treadOnly(this, [\"roomSize\"]);\n\t}\n\n\tstatic getDefaults(): JCReverbOptions {\n\t\treturn Object.assign(StereoEffect.getDefaults(), {\n\t\t\troomSize: 0.5,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._allpassFilters.forEach(apf => apf.disconnect());\n\t\tthis._feedbackCombFilters.forEach(fbcf => fbcf.dispose());\n\t\tthis.roomSize.dispose();\n\t\tthis._scaleRoomSize.dispose();\n\t\treturn this;\n\t}\n}\n","import { StereoFeedbackEffect, StereoFeedbackEffectOptions } from \"./StereoFeedbackEffect\";\nimport { NormalRange } from \"../core/type/Units\";\nimport { readOnly } from \"../core/util/Interface\";\n\nexport interface StereoXFeedbackEffectOptions extends StereoFeedbackEffectOptions {\n\tfeedback: NormalRange;\n}\n\n/**\n * Just like a [[StereoFeedbackEffect]], but the feedback is routed from left to right\n * and right to left instead of on the same channel.\n * ```\n * +--------------------------------+ feedbackL <-----------------------------------+\n * |                                                                                |\n * +-->                          +----->        +---->                          +-----+\n *      feedbackMerge +--> split        (EFFECT)       merge +--> feedbackSplit     | |\n * +-->                          +----->        +---->                          +---+ |\n * |                                                                                  |\n * +--------------------------------+ feedbackR <-------------------------------------+\n * ```\n */\nexport class StereoXFeedbackEffect<Options extends StereoXFeedbackEffectOptions> extends StereoFeedbackEffect<Options> {\n\t\n\tconstructor(options: StereoXFeedbackEffectOptions) {\n\n\t\tsuper(options);\n\t\t// the left output connected to the right input\n\t\tthis._feedbackL.disconnect();\n\t\tthis._feedbackL.connect(this._feedbackMerge, 0, 1);\n\n\t\t// the left output connected to the right input\n\t\tthis._feedbackR.disconnect();\n\t\tthis._feedbackR.connect(this._feedbackMerge, 0, 0);\n\t\t\n\t\treadOnly(this, [\"feedback\"]);\n\t}\n}\n","import { StereoXFeedbackEffect, StereoXFeedbackEffectOptions } from \"./StereoXFeedbackEffect\";\nimport { NormalRange, Seconds, Time } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Delay } from \"../core/context/Delay\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\n\nexport interface PingPongDelayOptions extends StereoXFeedbackEffectOptions {\n\tdelayTime: Time;\n\tmaxDelay: Seconds;\n}\n\n/**\n * PingPongDelay is a feedback delay effect where the echo is heard\n * first in one channel and next in the opposite channel. In a stereo\n * system these are the right and left channels.\n * PingPongDelay in more simplified terms is two Tone.FeedbackDelays\n * with independent delay values. Each delay is routed to one channel\n * (left or right), and the channel triggered second will always\n * trigger at the same interval after the first.\n * @example\n * import { MembraneSynth, PingPongDelay } from \"tone\";\n * const pingPong = new PingPongDelay(\"4n\", 0.2).toDestination();\n * const drum = new MembraneSynth().connect(pingPong);\n * drum.triggerAttackRelease(\"C4\", \"32n\");\n * @category Effect\n */\nexport class PingPongDelay extends StereoXFeedbackEffect<PingPongDelayOptions> {\n\n\treadonly name: string = \"PingPongDelay\";\n\t\n\t/**\n\t * the delay node on the left side\n\t */\n\tprivate _leftDelay: Delay;\n\n\t/**\n\t * the delay node on the right side\n\t */\n\tprivate _rightDelay: Delay;\n\n\t/**\n\t * the predelay on the right side\n\t */\n\tprivate _rightPreDelay: Delay;\n\n\t/**\n\t * the delay time signal\n\t */\n\treadonly delayTime: Signal<\"time\">;\n\t\n\t/**\n\t * @param delayTime The delayTime between consecutive echos.\n\t * @param feedback The amount of the effected signal which is fed back through the delay.\n\t */\n\tconstructor(delayTime?: Time, feedback?: NormalRange);\n\tconstructor(options?: Partial<PingPongDelayOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(PingPongDelay.getDefaults(), arguments, [\"delayTime\", \"feedback\"]));\n\t\tconst options = optionsFromArguments(PingPongDelay.getDefaults(), arguments, [\"delayTime\", \"feedback\"]);\n\n\t\tthis._leftDelay = new Delay({\n\t\t\tcontext: this.context,\n\t\t\tmaxDelay: options.maxDelay,\n\t\t});\n\t\tthis._rightDelay = new Delay({\n\t\t\tcontext: this.context,\n\t\t\tmaxDelay: options.maxDelay\n\t\t});\n\t\tthis._rightPreDelay = new Delay({\n\t\t\tcontext: this.context,\n\t\t\tmaxDelay: options.maxDelay\n\t\t});\n\t\tthis.delayTime = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"time\",\n\t\t\tvalue: options.delayTime,\n\t\t});\n\n\t\t// connect it up\n\t\tthis.connectEffectLeft(this._leftDelay);\n\t\tthis.connectEffectRight(this._rightPreDelay, this._rightDelay);\n\t\tthis.delayTime.fan(this._leftDelay.delayTime, this._rightDelay.delayTime, this._rightPreDelay.delayTime);\n\t\t// rearranged the feedback to be after the rightPreDelay\n\t\tthis._feedbackL.disconnect();\n\t\tthis._feedbackL.connect(this._rightDelay);\n\t\treadOnly(this, [\"delayTime\"]);\n\t}\n\n\tstatic getDefaults(): PingPongDelayOptions {\n\t\treturn Object.assign(StereoXFeedbackEffect.getDefaults(), {\n\t\t\tdelayTime: 0.25,\n\t\t\tmaxDelay: 1\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._leftDelay.dispose();\n\t\tthis._rightDelay.dispose();\n\t\tthis._rightPreDelay.dispose();\n\t\tthis.delayTime.dispose();\n\t\treturn this;\n\t}\n}\n","import { Interval, Seconds, Time } from \"../core/type/Units\";\nimport { FeedbackEffect, FeedbackEffectOptions } from \"./FeedbackEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Delay } from \"../core/context/Delay\";\nimport { CrossFade } from \"../component/channel/CrossFade\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Param } from \"../core/context/Param\";\nimport { intervalToFrequencyRatio } from \"../core/type/Conversions\";\n\nexport interface PitchShiftOptions extends FeedbackEffectOptions {\n\tpitch: Interval;\n\twindowSize: Seconds;\n\tdelayTime: Time;\n}\n\n/**\n * PitchShift does near-realtime pitch shifting to the incoming signal.\n * The effect is achieved by speeding up or slowing down the delayTime\n * of a DelayNode using a sawtooth wave.\n * Algorithm found in [this pdf](http://dsp-book.narod.ru/soundproc.pdf).\n * Additional reference by [Miller Pucket](http://msp.ucsd.edu/techniques/v0.11/book-html/node115.html).\n * @category Effect\n */\nexport class PitchShift extends FeedbackEffect<PitchShiftOptions> {\n\n\treadonly name: string = \"PitchShift\";\n\t\n\t/**\n\t * The pitch signal\n\t */\n\tprivate _frequency: Signal<\"frequency\">;\n\n\t/**\n\t * Uses two DelayNodes to cover up the jump in the sawtooth wave.\n\t */\n\tprivate _delayA: Delay;\n\n\t/**\n\t * The first LFO.\n\t */\n\tprivate _lfoA: LFO;\n\n\t/**\n\t * The second DelayNode\n\t */\n\tprivate _delayB: Delay;\n\n\t/**\n\t * The second LFO.\n\t */\n\tprivate _lfoB: LFO;\n\n\t/**\n\t * Cross fade quickly between the two delay lines to cover up the jump in the sawtooth wave\n\t */\n\tprivate _crossFade: CrossFade;\n\n\t/**\n\t * LFO which alternates between the two delay lines to cover up the disparity in the\n\t * sawtooth wave.\n\t */\n\tprivate _crossFadeLFO: LFO;\n\n\t/**\n\t * The delay node\n\t */\n\tprivate _feedbackDelay: Delay;\n\n\t/**\n\t * The amount of delay on the input signal\n\t */\n\treadonly delayTime: Param<\"time\">;\n\n\t/**\n\t * Hold the current pitch\n\t */\n\tprivate _pitch: Interval;\n\n\t/**\n\t * Hold the current windowSize\n\t */\n\tprivate _windowSize;\n\n\t/**\n\t * @param pitch The interval to transpose the incoming signal by.\n\t */\n\tconstructor(pitch?: Interval);\n\tconstructor(options?: Partial<PitchShiftOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(PitchShift.getDefaults(), arguments, [\"pitch\"]));\n\t\tconst options = optionsFromArguments(PitchShift.getDefaults(), arguments, [\"pitch\"]);\n\n\t\tthis._frequency = new Signal({ context: this.context });\n\t\tthis._delayA = new Delay({\n\t\t\tmaxDelay: 1,\n\t\t\tcontext: this.context\n\t\t});\n\t\tthis._lfoA = new LFO({\n\t\t\tcontext: this.context,\n\t\t\tmin: 0,\n\t\t\tmax: 0.1,\n\t\t\ttype: \"sawtooth\"\n\t\t}).connect(this._delayA.delayTime);\n\t\tthis._delayB = new Delay({\n\t\t\tmaxDelay: 1,\n\t\t\tcontext: this.context\n\t\t});\n\t\tthis._lfoB = new LFO({\n\t\t\tcontext: this.context,\n\t\t\tmin: 0,\n\t\t\tmax: 0.1,\n\t\t\ttype: \"sawtooth\",\n\t\t\tphase: 180\n\t\t}).connect(this._delayB.delayTime);\n\t\tthis._crossFade = new CrossFade({ context: this.context });\n\t\tthis._crossFadeLFO = new LFO({\n\t\t\tcontext: this.context,\n\t\t\tmin: 0,\n\t\t\tmax: 1,\n\t\t\ttype: \"triangle\",\n\t\t\tphase: 90\n\t\t}).connect(this._crossFade.fade);\n\t\tthis._feedbackDelay = new Delay({\n\t\t\tdelayTime: options.delayTime,\n\t\t\tcontext: this.context,\n\t\t});\n\t\tthis.delayTime = this._feedbackDelay.delayTime;\n\t\treadOnly(this, \"delayTime\");\n\t\tthis._pitch = options.pitch;\n\n\t\tthis._windowSize = options.windowSize;\n\n\t\t// connect the two delay lines up\n\t\tthis._delayA.connect(this._crossFade.a);\n\t\tthis._delayB.connect(this._crossFade.b);\n\t\t// connect the frequency\n\t\tthis._frequency.fan(this._lfoA.frequency, this._lfoB.frequency, this._crossFadeLFO.frequency);\n\t\t// route the input\n\t\tthis.effectSend.fan(this._delayA, this._delayB);\n\t\tthis._crossFade.chain(this._feedbackDelay, this.effectReturn);\n\t\t// start the LFOs at the same time\n\t\tconst now = this.now();\n\t\tthis._lfoA.start(now);\n\t\tthis._lfoB.start(now);\n\t\tthis._crossFadeLFO.start(now);\n\t\t// set the initial value\n\t\tthis.windowSize = this._windowSize;\n\t}\n\n\tstatic getDefaults(): PitchShiftOptions {\n\t\treturn Object.assign(FeedbackEffect.getDefaults(), {\n\t\t\tpitch: 0,\n\t\t\twindowSize: 0.1,\n\t\t\tdelayTime: 0,\n\t\t\tfeedback: 0\n\t\t});\n\t}\n\n\t/**\n\t * Repitch the incoming signal by some interval (measured in semi-tones).\n\t * @example\n\t * import { Oscillator, PitchShift } from \"tone\";\n\t * const pitchShift = new PitchShift().toDestination();\n\t * const osc = new Oscillator().connect(pitchShift).start().toDestination();\n\t * pitchShift.pitch = -12; // down one octave\n\t * pitchShift.pitch = 7; // up a fifth\n\t */\n\tget pitch() {\n\t\treturn this._pitch;\n\t}\n\tset pitch(interval) {\n\t\tthis._pitch = interval;\n\t\tlet factor = 0;\n\t\tif (interval < 0) {\n\t\t\tthis._lfoA.min = 0;\n\t\t\tthis._lfoA.max = this._windowSize;\n\t\t\tthis._lfoB.min = 0;\n\t\t\tthis._lfoB.max = this._windowSize;\n\t\t\tfactor = intervalToFrequencyRatio(interval - 1) + 1;\n\t\t} else {\n\t\t\tthis._lfoA.min = this._windowSize;\n\t\t\tthis._lfoA.max = 0;\n\t\t\tthis._lfoB.min = this._windowSize;\n\t\t\tthis._lfoB.max = 0;\n\t\t\tfactor = intervalToFrequencyRatio(interval) - 1;\n\t\t}\n\t\tthis._frequency.value = factor * (1.2 / this._windowSize);\n\t}\n\n\t/**\n\t * The window size corresponds roughly to the sample length in a looping sampler.\n\t * Smaller values are desirable for a less noticeable delay time of the pitch shifted\n\t * signal, but larger values will result in smoother pitch shifting for larger intervals.\n\t * A nominal range of 0.03 to 0.1 is recommended.\n\t */\n\tget windowSize() {\n\t\treturn this._windowSize;\n\t}\n\tset windowSize(size) {\n\t\tthis._windowSize = this.toSeconds(size);\n\t\tthis.pitch = this._pitch;\n\t}\n\n\tdispose(): this{\n\t\tsuper.dispose();\n\t\tthis._frequency.dispose();\n\t\tthis._delayA.dispose();\n\t\tthis._delayB.dispose();\n\t\tthis._lfoA.dispose();\n\t\tthis._lfoB.dispose();\n\t\tthis._crossFade.dispose();\n\t\tthis._crossFadeLFO.dispose();\n\t\tthis._feedbackDelay.dispose();\n\t\treturn this;\n\t}\n}\n","import { StereoEffect, StereoEffectOptions } from \"./StereoEffect\";\nimport { Frequency, Hertz, Positive } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\n\nexport interface PhaserOptions extends StereoEffectOptions {\n\tfrequency: Frequency;\n\toctaves: Positive;\n\tstages: Positive;\n\tQ: Positive;\n\tbaseFrequency: Frequency;\t\n}\n\n/**\n * Phaser is a phaser effect. Phasers work by changing the phase\n * of different frequency components of an incoming signal. Read more on\n * [Wikipedia](https://en.wikipedia.org/wiki/Phaser_(effect)).\n * Inspiration for this phaser comes from [Tuna.js](https://github.com/Dinahmoe/tuna/).\n * @example\n * import { FMSynth, Phaser } from \"tone\";\n * const phaser = new Phaser({\n * \tfrequency: 15,\n * \toctaves: 5,\n * \tbaseFrequency: 1000\n * }).toDestination();\n * const synth = new FMSynth().connect(phaser);\n * synth.triggerAttackRelease(\"E3\", \"2n\");\n * @category Effect\n */\nexport class Phaser extends StereoEffect<PhaserOptions> {\n\n\treadonly name: string = \"Phaser\";\n\n\t/**\n\t * the lfo which controls the frequency on the left side\n\t */\n\tprivate _lfoL: LFO;\n\n\t/**\n\t * the lfo which controls the frequency on the right side\n\t */\n\tprivate _lfoR: LFO;\n\n\t/**\n\t * the base modulation frequency\n\t */\n\tprivate _baseFrequency: Hertz;\n\n\t/**\n\t * the octaves of the phasing\n\t */\n\tprivate _octaves: Positive;\n\n\t/**\n\t * The quality factor of the filters\n\t */\n\treadonly Q: Signal<\"positive\">;\n\n\t/**\n\t * the array of filters for the left side\n\t */\n\tprivate _filtersL: BiquadFilterNode[];\n\n\t/**\n\t * the array of filters for the left side\n\t */\n\tprivate _filtersR: BiquadFilterNode[];\n\n\t/**\n\t * the frequency of the effect\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * @param frequency The speed of the phasing.\n\t * @param octaves The octaves of the effect.\n\t * @param baseFrequency The base frequency of the filters.\n\t */\n\tconstructor(frequency?: Frequency, octaves?: Positive, baseFrequency?: Frequency);\n\tconstructor(options?: Partial<PhaserOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Phaser.getDefaults(), arguments, [\"frequency\", \"octaves\", \"baseFrequency\"]));\n\t\tconst options = optionsFromArguments(Phaser.getDefaults(), arguments, [\"frequency\", \"octaves\", \"baseFrequency\"]);\n\n\t\tthis._lfoL = new LFO({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.frequency, \n\t\t\tmin: 0,\n\t\t\tmax: 1\n\t\t});\n\t\tthis._lfoR = new LFO({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.frequency, \n\t\t\tmin: 0,\n\t\t\tmax: 1,\n\t\t\tphase: 180,\n\t\t});\n\t\tthis._baseFrequency = this.toFrequency(options.baseFrequency);\n\t\tthis._octaves = options.octaves;\n\t\tthis.Q = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.Q,\n\t\t\tunits: \"positive\",\n\t\t});\n\t\tthis._filtersL = this._makeFilters(options.stages, this._lfoL);\n\t\tthis._filtersR = this._makeFilters(options.stages, this._lfoR);\n\n\t\tthis.frequency = this._lfoL.frequency;\n\t\tthis.frequency.value = options.frequency;\n\n\t\t// connect them up\n\t\tthis.connectEffectLeft(...this._filtersL);\n\t\tthis.connectEffectRight(...this._filtersR);\n\t\t// control the frequency with one LFO\n\t\tthis._lfoL.frequency.connect(this._lfoR.frequency);\n\t\t// set the options\n\t\tthis.baseFrequency = options.baseFrequency;\n\t\tthis.octaves = options.octaves;\n\t\t// start the lfo\n\t\tthis._lfoL.start();\n\t\tthis._lfoR.start();\n\t\treadOnly(this, [\"frequency\", \"Q\"]);\n\t}\n\n\tstatic getDefaults(): PhaserOptions {\n\t\treturn Object.assign(StereoEffect.getDefaults(), {\n\t\t\tfrequency: 0.5,\n\t\t\toctaves: 3,\n\t\t\tstages: 10,\n\t\t\tQ: 10,\n\t\t\tbaseFrequency: 350,\n\t\t});\n\t}\n\n\tprivate _makeFilters(stages: number, connectToFreq: LFO): BiquadFilterNode[] {\n\t\tconst filters: BiquadFilterNode[] = [];\n\t\t// make all the filters\n\t\tfor (let i = 0; i < stages; i++) {\n\t\t\tconst filter = this.context.createBiquadFilter();\n\t\t\tfilter.type = \"allpass\";\n\t\t\tthis.Q.connect(filter.Q);\n\t\t\tconnectToFreq.connect(filter.frequency);\n\t\t\tfilters.push(filter);\n\t\t}\n\t\treturn filters;\n\t}\n\n\t/**\n\t * The number of octaves the phase goes above the baseFrequency\n\t */\n\tget octaves() {\n\t\treturn this._octaves;\n\t}\n\tset octaves(octaves) {\n\t\tthis._octaves = octaves;\n\t\tconst max = this._baseFrequency * Math.pow(2, octaves);\n\t\tthis._lfoL.max = max;\n\t\tthis._lfoR.max = max;\n\t}\n\n\t/**\n\t * The the base frequency of the filters.\n\t */\n\tget baseFrequency(): Frequency {\n\t\treturn this._baseFrequency;\n\t}\n\tset baseFrequency(freq) {\n\t\tthis._baseFrequency = this.toFrequency(freq);\n\t\tthis._lfoL.min = this._baseFrequency;\n\t\tthis._lfoR.min = this._baseFrequency;\n\t\tthis.octaves = this._octaves;\n\t}\n\t\n\tdispose(): this{\n\t\tsuper.dispose();\n\t\tthis.Q.dispose();\n\t\tthis._lfoL.dispose();\n\t\tthis._lfoR.dispose();\n\t\tthis._filtersL.forEach(f => f.disconnect());\n\t\tthis._filtersR.forEach(f => f.disconnect());\n\t\tthis.frequency.dispose();\n\t\treturn this;\n\t}\n}\n\n","import { Merge } from \"../component/channel/Merge\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Seconds, Time } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Noise } from \"../source/Noise\";\nimport { Effect, EffectOptions } from \"./Effect\";\nimport { OfflineContext } from \"../core/context/OfflineContext\";\nimport { noOp } from \"../core/util/Interface\";\nimport { assertRange } from \"../core/util/Debug\";\n\ninterface ReverbOptions extends EffectOptions {\n\tdecay: Seconds;\n\tpreDelay: Seconds;\n}\n\n/**\n * Simple convolution created with decaying noise.\n * Generates an Impulse Response Buffer\n * with Tone.Offline then feeds the IR into ConvolverNode.\n * The impulse response generation is async, so you have\n * to wait until [[ready]] resolves before it will make a sound. \n *\n * Inspiration from [ReverbGen](https://github.com/adelespinasse/reverbGen).\n * Copyright (c) 2014 Alan deLespinasse Apache 2.0 License.\n * \n * @category Effect\n */\nexport class Reverb extends Effect<ReverbOptions> {\n\n\treadonly name: string = \"Reverb\";\n\n\t/**\n\t * Convolver node\n\t */\n\tprivate _convolver: ConvolverNode = this.context.createConvolver();\n\n\t/**\n\t * The duration of the reverb.\n\t */\n\tprivate _decay: Seconds;\n\t\n\t/**\n\t * The amount of time before the reverb is fully ramped in.\n\t */\n\tprivate _preDelay: Seconds;\n\n\t/**\n\t * Resolves when the reverb buffer is generated. Whenever either [[decay]]\n\t * or [[preDelay]] are set, you have to wait until [[ready]] resolves\n\t * before the IR is generated with the latest values. \n\t */\n\tready: Promise<void> = Promise.resolve();\n\n\t/**\n\t * @param decay The amount of time it will reverberate for.\n\t */\n\tconstructor(decay?: Seconds);\n\tconstructor(options?: Partial<ReverbOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Reverb.getDefaults(), arguments, [\"decay\"]));\n\t\tconst options = optionsFromArguments(Reverb.getDefaults(), arguments, [\"decay\"]);\n\n\t\tthis._decay = options.decay;\n\t\tthis._preDelay = options.preDelay;\n\t\tthis.generate();\n\n\t\tthis.connectEffect(this._convolver);\n\t}\n\n\tstatic getDefaults(): ReverbOptions {\n\t\treturn Object.assign(Effect.getDefaults(), {\n\t\t\tdecay: 1.5,\n\t\t\tpreDelay: 0.01,\n\t\t});\n\t}\n\n\t/**\n\t * The duration of the reverb.\n\t */\n\tget decay(): Time {\n\t\treturn this._decay;\n\t}\n\tset decay(time) {\n\t\ttime = this.toSeconds(time);\n\t\tassertRange(time, 0.001);\n\t\tthis._decay = time;\n\t\tthis.generate();\n\t}\n\n\t/**\n\t * The amount of time before the reverb is fully ramped in.\n\t */\n\tget preDelay(): Time {\n\t\treturn this._preDelay;\n\t}\n\tset preDelay(time) {\n\t\ttime = this.toSeconds(time);\n\t\tassertRange(time, 0);\n\t\tthis._preDelay = time;\n\t\tthis.generate();\n\t}\n\n\t/**\n\t * Generate the Impulse Response. Returns a promise while the IR is being generated.\n\t * @return Promise which returns this object.\n\t */\n\tasync generate(): Promise<this> {\n\t\tconst previousReady = this.ready;\n\n\t\t// create a noise burst which decays over the duration in each channel\n\t\tconst context = new OfflineContext(2, this._decay + this._preDelay, this.context.sampleRate);\n\t\tconst noiseL = new Noise({ context });\n\t\tconst noiseR = new Noise({ context });\n\t\tconst merge = new Merge({ context });\n\t\tnoiseL.connect(merge, 0, 0);\n\t\tnoiseR.connect(merge, 0, 1);\n\t\tconst gainNode = new Gain({ context }).toDestination();\n\t\tmerge.connect(gainNode);\n\t\tnoiseL.start(0);\n\t\tnoiseR.start(0);\n\t\t// predelay\n\t\tgainNode.gain.setValueAtTime(0, 0);\n\t\tgainNode.gain.setValueAtTime(1, this._preDelay);\n\t\t// decay\n\t\tgainNode.gain.exponentialApproachValueAtTime(0, this._preDelay, this.decay);\n\t\t\n\t\t// render the buffer\n\t\tconst renderPromise = context.render();\n\t\tthis.ready = renderPromise.then(noOp);\n\t\t\n\t\t// wait for the previous `ready` to resolve\n\t\tawait previousReady;\n\t\t// set the buffer\n\t\tthis._convolver.buffer = (await renderPromise).get() as AudioBuffer;\n\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._convolver.disconnect();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Split } from \"./Split\";\nimport { Add } from \"../../signal/Add\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Subtract } from \"../../signal/Subtract\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n\nexport type MidSideSplitOptions = ToneAudioNodeOptions;\n\n/**\n * Mid/Side processing separates the the 'mid' signal (which comes out of both the left and the right channel)\n * and the 'side' (which only comes out of the the side channels).\n * ```\n * Mid = (Left+Right)/sqrt(2);   // obtain mid-signal from left and right\n * Side = (Left-Right)/sqrt(2);   // obtain side-signal from left and right\n * ```\n */\nexport class MidSideSplit extends ToneAudioNode<MidSideSplitOptions> {\n\t\n\treadonly name: string = \"MidSideSplit\";\n\n\treadonly input: Split;\n\n\t/**\n\t * There is no output node, use either [[mid]] or [[side]] outputs.\n\t */\n\treadonly output: undefined;\n\t/**\n\t * Split the incoming signal into left and right channels\n\t */\n\tprivate _split: Split;\n\n\t/**\n\t * Sums the left and right channels\n\t */\n\tprivate _midAdd: Add;\n\n\t/**\n\t * Subtract left and right channels. \n\t */\n\tprivate _sideSubtract: Subtract;\n\n\t/**\n\t * The \"mid\" output. `(Left+Right)/sqrt(2)`\n\t */\n\treadonly mid: ToneAudioNode;\n\n\t/**\n\t * The \"side\" output. `(Left-Right)/sqrt(2)`\n\t */\n\treadonly side: ToneAudioNode;\n\t\n\tconstructor(options?: Partial<MidSideSplitOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(MidSideSplit.getDefaults(), arguments));\n\n\t\tthis._split = this.input = new Split({\n\t\t\tchannels: 2,\n\t\t\tcontext: this.context\n\t\t});\n\t\tthis._midAdd = new Add({ context: this.context });\n\t\tthis.mid = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tvalue: Math.SQRT1_2,\n\t\t});\n\t\tthis._sideSubtract = new Subtract({ context: this.context });\n\t\tthis.side = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tvalue: Math.SQRT1_2,\n\t\t});\n\n\t\tthis._split.connect(this._midAdd, 0);\n\t\tthis._split.connect(this._midAdd.addend, 1);\n\t\tthis._split.connect(this._sideSubtract, 0);\n\t\tthis._split.connect(this._sideSubtract.subtrahend, 1);\n\t\tthis._midAdd.connect(this.mid);\n\t\tthis._sideSubtract.connect(this.side);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.mid.dispose();\n\t\tthis.side.dispose();\n\t\tthis._midAdd.dispose();\n\t\tthis._sideSubtract.dispose();\n\t\tthis._split.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Merge } from \"./Merge\";\nimport { Add } from \"../../signal/Add\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Subtract } from \"../../signal/Subtract\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n\nexport type MidSideMergeOptions = ToneAudioNodeOptions;\n\n/**\n * MidSideMerge merges the mid and side signal after they've been separated by [[MidSideMerge]]\n * ```\n * Mid = (Left+Right)/sqrt(2);   // obtain mid-signal from left and right\n * Side = (Left-Right)/sqrt(2);   // obtain side-signal from left and righ\n * ```\n */\nexport class MidSideMerge extends ToneAudioNode<MidSideMergeOptions> {\n\t\n\treadonly name: string = \"MidSideMerge\";\n\n\t/**\n\t * There is no input, connect sources to either [[mid]] or [[side]] inputs.\n\t */\n\treadonly input: undefined;\n\n\t/**\n\t * The merged signal\n\t */\n\treadonly output: Merge;\n\n\t/**\n\t * Merge the incoming signal into left and right channels\n\t */\n\tprivate _merge: Merge;\n\n\t/**\n\t * The \"mid\" input.\n\t */\n\treadonly mid: ToneAudioNode;\n\n\t/**\n\t * The \"side\" input.\n\t */\n\treadonly side: ToneAudioNode;\n\n\t/**\n\t * Recombine the mid/side into Left\n\t */\n\tprivate _left: Add;\n\n\t/**\n\t * Recombine the mid/side into Right\n\t */\n\tprivate _right: Subtract;\n\n\t/**\n\t * Multiply the right by sqrt(1/2)\n\t */\n\tprivate _leftMult: Multiply;\n\n\t/**\n\t * Multiply the left by sqrt(1/2)\n\t */\n\tprivate _rightMult: Multiply;\n\t\n\tconstructor(options?: Partial<MidSideMergeOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(MidSideMerge.getDefaults(), arguments));\n\t\tthis.mid = new Gain({ context: this.context });\n\t\tthis.side = new Gain({ context: this.context });\n\t\tthis._left = new Add({ context: this.context });\n\t\tthis._leftMult = new Multiply({\n\t\t\tcontext: this.context, \n\t\t\tvalue: Math.SQRT1_2\n\t\t});\n\t\tthis._right = new Subtract({ context: this.context });\n\t\tthis._rightMult = new Multiply({\n\t\t\tcontext: this.context, \n\t\t\tvalue: Math.SQRT1_2\n\t\t});\n\t\tthis._merge = this.output = new Merge({ context: this.context });\n\n\t\tthis.mid.fan(this._left);\n\t\tthis.side.connect(this._left.addend);\n\t\tthis.mid.connect(this._right);\n\t\tthis.side.connect(this._right.subtrahend);\n\t\tthis._left.connect(this._leftMult);\n\t\tthis._right.connect(this._rightMult);\n\t\tthis._leftMult.connect(this._merge, 0, 0);\n\t\tthis._rightMult.connect(this._merge, 0, 1);\n\t}\n\t\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.mid.dispose();\n\t\tthis.side.dispose();\n\t\tthis._leftMult.dispose();\n\t\tthis._rightMult.dispose();\n\t\tthis._left.dispose();\n\t\tthis._right.dispose();\n\t\treturn this;\n\t}\n}\n","import { Effect, EffectOptions } from \"./Effect\";\nimport { MidSideSplit } from \"../component/channel/MidSideSplit\";\nimport { MidSideMerge } from \"../component/channel/MidSideMerge\";\nimport { OutputNode, ToneAudioNode } from \"../core/context/ToneAudioNode\";\n\nexport type MidSideEffectOptions = EffectOptions;\n\n/**\n * Mid/Side processing separates the the 'mid' signal\n * (which comes out of both the left and the right channel)\n * and the 'side' (which only comes out of the the side channels)\n * and effects them separately before being recombined.\n * Applies a Mid/Side seperation and recombination.\n * Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).\n * This is a base-class for Mid/Side Effects.\n */\nexport abstract class MidSideEffect<Options extends MidSideEffectOptions> extends Effect<Options> {\n\n\treadonly name: string = \"MidSideEffect\";\n\n\t/**\n\t * The mid/side split\n\t */\n\tprivate _midSideSplit: MidSideSplit;\n\t\n\t/**\n\t * The mid/side merge\n\t */\n\tprivate _midSideMerge: MidSideMerge;\n\t\n\t/**\n\t * The mid send. Connect to mid processing\n\t */\n\tprotected _midSend: ToneAudioNode;\n\t\n\t/**\n\t * The side send. Connect to side processing\n\t */\n\tprotected _sideSend: ToneAudioNode;\n\t\n\t/**\n\t * The mid return connection\n\t */\n\tprotected _midReturn: ToneAudioNode;\n\t\n\t/**\n\t * The side return connection\n\t */\n\tprotected _sideReturn: ToneAudioNode;\n\n\tconstructor(options: MidSideEffectOptions) {\n\n\t\tsuper(options);\n\n\t\tthis._midSideMerge = new MidSideMerge({ context: this.context });\n\t\tthis._midSideSplit = new MidSideSplit({ context: this.context });\n\t\tthis._midSend = this._midSideSplit.mid;\n\t\tthis._sideSend = this._midSideSplit.side;\n\t\tthis._midReturn = this._midSideMerge.mid;\n\t\tthis._sideReturn = this._midSideMerge.side;\n\n\t\t// the connections\n\t\tthis.effectSend.connect(this._midSideSplit);\n\t\tthis._midSideMerge.connect(this.effectReturn);\n\t}\n\n\t/**\n\t * Connect the mid chain of the effect\n\t */\n\tprotected connectEffectMid(...nodes: OutputNode[]): void{\n\t\tthis._midSend.chain(...nodes, this._midReturn);\n\t}\n\t\n\t/**\n\t * Connect the side chain of the effect\n\t */\n\tprotected connectEffectSide(...nodes: OutputNode[]): void{\n\t\tthis._sideSend.chain(...nodes, this._sideReturn);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._midSideSplit.dispose();\n\t\tthis._midSideMerge.dispose();\n\t\tthis._midSend.dispose();\n\t\tthis._sideSend.dispose();\n\t\tthis._midReturn.dispose();\n\t\tthis._sideReturn.dispose();\n\t\treturn this;\n\t}\n}\n\n","import { MidSideEffect, MidSideEffectOptions } from \"../effect/MidSideEffect\";\nimport { Signal } from \"../signal/Signal\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Subtract } from \"../signal/Subtract\";\nimport { NormalRange } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { connect } from \"../core/context/ToneAudioNode\";\n\nexport interface StereoWidenerOptions extends MidSideEffectOptions {\n\twidth: NormalRange;\n}\n\n/**\n * Applies a width factor to the mid/side seperation.\n * 0 is all mid and 1 is all side.\n * Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).\n * ```\n * Mid *= 2*(1-width)<br>\n * Side *= 2*width\n * ```\n * @category Effect\n */\nexport class StereoWidener extends MidSideEffect<StereoWidenerOptions> {\n\n\treadonly name: string = \"StereoWidener\";\n\n\t/**\n\t * The width control. 0 = 100% mid. 1 = 100% side. 0.5 = no change.\n\t */\n\treadonly width: Signal<\"normalRange\">;\n\t\n\t/**\n\t * Two times the (1-width) for the mid channel\n\t */\n\tprivate _twoTimesWidthMid: Multiply;\n\t\n\t/**\n\t * Two times the width for the side channel\n\t */\n\tprivate _twoTimesWidthSide: Multiply;\n\t\n\t/**\n\t * Mid multiplier\n\t */\n\tprivate _midMult: Multiply;\n\t\n\t/**\n\t * 1 - width\n\t */\n\tprivate _oneMinusWidth: Subtract;\n\t\n\t/**\n\t * Side multiplier\n\t */\n\tprivate _sideMult: Multiply;\n\n\t/**\n\t * @param width The stereo width. A width of 0 is mono and 1 is stereo. 0.5 is no change.\n\t */\n\tconstructor(width?: NormalRange);\n\tconstructor(options?: Partial<StereoWidenerOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(StereoWidener.getDefaults(), arguments, [\"width\"]));\n\t\tconst options = optionsFromArguments(StereoWidener.getDefaults(), arguments, [\"width\"]);\n\t\tthis.width = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.width,\n\t\t\tunits: \"normalRange\",\n\t\t});\n\t\treadOnly(this, [\"width\"]);\n\t\tthis._twoTimesWidthMid = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tvalue: 2,\n\t\t});\n\t\tthis._twoTimesWidthSide = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tvalue: 2,\n\t\t});\n\t\tthis._midMult = new Multiply({ context: this.context });\n\t\tthis._twoTimesWidthMid.connect(this._midMult.factor);\n\t\tthis.connectEffectMid(this._midMult);\n\n\t\tthis._oneMinusWidth = new Subtract({ context: this.context });\n\t\tthis._oneMinusWidth.connect(this._twoTimesWidthMid);\n\t\tconnect(this.context.getConstant(1), this._oneMinusWidth);\n\t\tthis.width.connect(this._oneMinusWidth.subtrahend);\n\n\t\tthis._sideMult = new Multiply({ context: this.context });\n\t\tthis.width.connect(this._twoTimesWidthSide);\n\t\tthis._twoTimesWidthSide.connect(this._sideMult.factor);\n\t\tthis.connectEffectSide(this._sideMult);\n\t}\n\n\tstatic getDefaults(): StereoWidenerOptions {\n\t\treturn Object.assign(MidSideEffect.getDefaults(), {\n\t\t\twidth: 0.5,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.width.dispose();\n\t\tthis._midMult.dispose();\n\t\tthis._sideMult.dispose();\n\t\tthis._twoTimesWidthMid.dispose();\n\t\tthis._twoTimesWidthSide.dispose();\n\t\tthis._oneMinusWidth.dispose();\n\t\treturn this;\n\t}\n}\n","import { StereoEffect, StereoEffectOptions } from \"./StereoEffect\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Signal } from \"../signal/Signal\";\nimport { Degrees, Frequency, NormalRange, Time } from \"../core/type/Units\";\nimport { ToneOscillatorType } from \"../source/oscillator/OscillatorInterface\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\n\nexport interface TremoloOptions extends StereoEffectOptions {\n\tfrequency: Frequency;\n\ttype: ToneOscillatorType;\n\tdepth: NormalRange;\n\tspread: Degrees;\n}\n\n/**\n * Tremolo modulates the amplitude of an incoming signal using an [[LFO]].\n * The effect is a stereo effect where the modulation phase is inverted in each channel.\n *\n * @example\n * import { Oscillator, Tremolo } from \"tone\";\n * // create a tremolo and start it's LFO\n * const tremolo = new Tremolo(9, 0.75).toDestination().start();\n * // route an oscillator through the tremolo and start it\n * const oscillator = new Oscillator().connect(tremolo).start();\n * \n * @category Effect\n */\nexport class Tremolo extends StereoEffect<TremoloOptions> {\n\n\treadonly name: string = \"Tremolo\";\n\t\n\t/**\n\t * The tremolo LFO in the left channel\n\t */\n\tprivate _lfoL: LFO;\n\t\n\t/**\n\t * The tremolo LFO in the left channel\n\t */\n\tprivate _lfoR: LFO;\n\n\t/**\n\t * Where the gain is multiplied\n\t */\n\tprivate _amplitudeL: Gain;\n\n\t/**\n\t * Where the gain is multiplied\n\t */\n\tprivate _amplitudeR: Gain;\n\n\t/**\n\t * The frequency of the tremolo.\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * The depth of the effect. A depth of 0, has no effect\n\t * on the amplitude, and a depth of 1 makes the amplitude\n\t * modulate fully between 0 and 1.\n\t */\n\treadonly depth: Signal<\"normalRange\">;\n\n\t/**\n\t * @param frequency The rate of the effect.\n\t * @param depth The depth of the effect.\n\t */\n\tconstructor(frequency?: Frequency, depth?: NormalRange);\n\tconstructor(options?: Partial<TremoloOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Tremolo.getDefaults(), arguments, [\"frequency\", \"depth\"]));\n\t\tconst options = optionsFromArguments(Tremolo.getDefaults(), arguments, [\"frequency\", \"depth\"]);\n\n\t\tthis._lfoL = new LFO({\n\t\t\tcontext: this.context,\n\t\t\ttype: options.type,\n\t\t\tmin: 1,\n\t\t\tmax: 0,\n\t\t});\n\t\tthis._lfoR = new LFO({\n\t\t\tcontext: this.context,\n\t\t\ttype: options.type,\n\t\t\tmin: 1,\n\t\t\tmax: 0,\n\t\t});\n\t\tthis._amplitudeL = new Gain({ context: this.context });\n\t\tthis._amplitudeR = new Gain({ context: this.context });\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.frequency, \n\t\t\tunits: \"frequency\",\n\t\t});\n\t\tthis.depth = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.depth, \n\t\t\tunits: \"normalRange\",\n\t\t});\n\n\t\treadOnly(this, [\"frequency\", \"depth\"]);\n\t\tthis.connectEffectLeft(this._amplitudeL);\n\t\tthis.connectEffectRight(this._amplitudeR);\n\t\tthis._lfoL.connect(this._amplitudeL.gain);\n\t\tthis._lfoR.connect(this._amplitudeR.gain);\n\t\tthis.frequency.fan(this._lfoL.frequency, this._lfoR.frequency);\n\t\tthis.depth.fan(this._lfoR.amplitude, this._lfoL.amplitude);\n\t\tthis.spread = options.spread;\n\t}\n\n\tstatic getDefaults(): TremoloOptions {\n\t\treturn Object.assign(StereoEffect.getDefaults(), {\n\t\t\tfrequency: 10,\n\t\t\ttype: \"sine\" as \"sine\",\n\t\t\tdepth: 0.5,\n\t\t\tspread: 180,\n\t\t});\n\t}\n\n\t/**\n\t * Start the tremolo.\n\t */\n\tstart(time?: Time): this {\n\t\tthis._lfoL.start(time);\n\t\tthis._lfoR.start(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the tremolo.\n\t */\n\tstop(time?: Time): this {\n\t\tthis._lfoL.stop(time);\n\t\tthis._lfoR.stop(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sync the effect to the transport.\n\t */\n\tsync(): this{\n\t\tthis._lfoL.sync();\n\t\tthis._lfoR.sync();\n\t\tthis.context.transport.syncSignal(this.frequency);\n\t\treturn this;\n\t}\n\t\n\t/**\n\t * Unsync the filter from the transport\n\t */\n\tunsync(): this {\n\t\tthis._lfoL.unsync();\n\t\tthis._lfoR.unsync();\n\t\tthis.context.transport.unsyncSignal(this.frequency);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The oscillator type.\n\t */\n\tget type(): ToneOscillatorType {\n\t\treturn this._lfoL.type;\n\t}\n\tset type(type) {\n\t\tthis._lfoL.type = type;\n\t\tthis._lfoR.type = type;\n\t}\n\n\t/**\n\t * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.\n\t * When set to 180, LFO's will be panned hard left and right respectively.\n\t */\n\tget spread(): Degrees {\n\t\treturn this._lfoR.phase - this._lfoL.phase; // 180\n\t}\n\tset spread(spread) {\n\t\tthis._lfoL.phase = 90 - (spread/2);\n\t\tthis._lfoR.phase = (spread/2) + 90;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._lfoL.dispose();\n\t\tthis._lfoR.dispose();\n\t\tthis._amplitudeL.dispose();\n\t\tthis._amplitudeR.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.depth.dispose();\n\t\treturn this;\n\t}\n}\n","import { Effect, EffectOptions } from \"./Effect\";\nimport { ToneOscillatorType } from \"../source/oscillator/OscillatorInterface\";\nimport { Frequency, NormalRange, Seconds } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Delay } from \"../core/context/Delay\";\nimport { Signal } from \"../signal/Signal\";\nimport { Param } from \"../core/context/Param\";\nimport { readOnly } from \"../core/util/Interface\";\n\nexport interface VibratoOptions extends EffectOptions {\n\tmaxDelay: Seconds;\n\tfrequency: Frequency;\n\tdepth: NormalRange;\n\ttype: ToneOscillatorType;\n}\n/**\n * A Vibrato effect composed of a Tone.Delay and a Tone.LFO. The LFO\n * modulates the delayTime of the delay, causing the pitch to rise and fall. \n * @category Effect\n */\nexport class Vibrato extends Effect<VibratoOptions> {\n\n\treadonly name: string = \"Vibrato\";\n\t/**\n\t * The delay node used for the vibrato effect\n\t */\n\tprivate _delayNode: Delay;\n\t\n\t/**\n\t * The LFO used to control the vibrato\n\t */\n\tprivate _lfo: LFO;\n\t\n\t/**\n\t * The frequency of the vibrato\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\t\n\t/**\n\t * The depth of the vibrato. \n\t */\n\treadonly depth: Param<\"normalRange\">;\n\n\t/**\n\t * @param frequency The frequency of the vibrato.\n\t * @param depth The amount the pitch is modulated.\n\t */\n\tconstructor(frequency?: Frequency, depth?: NormalRange);\n\tconstructor(options?: Partial<VibratoOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Vibrato.getDefaults(), arguments, [\"frequency\", \"depth\"]));\n\t\tconst options = optionsFromArguments(Vibrato.getDefaults(), arguments, [\"frequency\", \"depth\"]);\n\n\t\tthis._delayNode = new Delay({\n\t\t\tcontext: this.context,\n\t\t\tdelayTime: 0,\n\t\t\tmaxDelay: options.maxDelay,\n\t\t});\n\t\tthis._lfo = new LFO({\n\t\t\tcontext: this.context,\n\t\t\ttype: options.type,\n\t\t\tmin: 0,\n\t\t\tmax: options.maxDelay, \n\t\t\tfrequency: options.frequency,\n\t\t\tphase: -90 // offse the phase so the resting position is in the center\n\t\t}).start().connect(this._delayNode.delayTime);\n\t\tthis.frequency = this._lfo.frequency;\n\t\tthis.depth = this._lfo.amplitude;\n\n\t\tthis.depth.value = options.depth;\n\t\treadOnly(this, [\"frequency\", \"depth\"]);\n\t\tthis.effectSend.chain(this._delayNode, this.effectReturn);\n\t}\n\n\tstatic getDefaults(): VibratoOptions {\n\t\treturn Object.assign(Effect.getDefaults(), {\n\t\t\tmaxDelay: 0.005,\n\t\t\tfrequency: 5,\n\t\t\tdepth: 0.1,\n\t\t\ttype: \"sine\" as \"sine\"\n\t\t});\n\t}\n\n\t/**\n\t * Type of oscillator attached to the Vibrato.\n\t */\n\tget type(): ToneOscillatorType {\n\t\treturn this._lfo.type;\n\t}\n\tset type(type) {\n\t\tthis._lfo.type = type;\n\t}\n\t\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._delayNode.dispose();\n\t\tthis._lfo.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.depth.dispose();\n\t\treturn this;\n\t}\n}\n","import { InputNode, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { NormalRange, PowerOfTwo } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Split } from \"../channel/Split\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { assert, assertRange } from \"../../core/util/Debug\";\n\nexport type AnalyserType = \"fft\" | \"waveform\";\n\nexport interface AnalyserOptions extends ToneAudioNodeOptions {\n\tsize: PowerOfTwo;\n\ttype: AnalyserType;\n\tsmoothing: NormalRange;\n\tchannels: number;\n}\n\n/**\n * Wrapper around the native Web Audio's [AnalyserNode](http://webaudio.github.io/web-audio-api/#idl-def-AnalyserNode).\n * Extracts FFT or Waveform data from the incoming signal.\n * @category Component\n */\nexport class Analyser extends ToneAudioNode<AnalyserOptions> {\n\n\treadonly name: string = \"Analyser\";\n\n\treadonly input: InputNode;\n\treadonly output: OutputNode;\n\n\t/**\n\t * The analyser node.\n\t */\n\tprivate _analysers: AnalyserNode[] = [];\n\n\t/**\n\t * Input and output are a gain node\n\t */\n\tprivate _gain: Gain;\n\n\t/**\n\t * The channel splitter node\n\t */\n\tprivate _split: Split;\n\n\t/**\n\t * The analysis type\n\t */\n\tprivate _type!: AnalyserType;\n\n\t/**\n\t * The buffer that the FFT data is written to\n\t */\n\tprivate _buffers: Float32Array[] = [];\n\n\t/**\n\t * @param type The return type of the analysis, either \"fft\", or \"waveform\".\n\t * @param size The size of the FFT. This must be a power of two in the range 16 to 16384.\n\t */\n\tconstructor(type?: AnalyserType, size?: number);\n\tconstructor(options?: Partial<AnalyserOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Analyser.getDefaults(), arguments, [\"type\", \"size\"]));\n\t\tconst options = optionsFromArguments(Analyser.getDefaults(), arguments, [\"type\", \"size\"]);\n\n\t\tthis.input = this.output = this._gain = new Gain({ context: this.context });\n\t\tthis._split = new Split({\n\t\t\tcontext: this.context,\n\t\t\tchannels: options.channels,\n\t\t});\n\t\tthis.input.connect(this._split);\n\t\t\n\t\tassertRange(options.channels, 1);\n\t\t\n\t\t// create the analysers\n\t\tfor (let channel = 0; channel < options.channels; channel++) {\n\t\t\tthis._analysers[channel] = this.context.createAnalyser();\n\t\t\tthis._split.connect(this._analysers[channel], channel, 0);\n\t\t}\n\n\t\t// set the values initially\n\t\tthis.size = options.size;\n\t\tthis.type = options.type;\n\t}\n\n\tstatic getDefaults(): AnalyserOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tsize: 1024,\n\t\t\tsmoothing: 0.8,\n\t\t\ttype: \"fft\" as AnalyserType,\n\t\t\tchannels: 1,\n\t\t});\n\t}\n\n\t/**\n\t * Run the analysis given the current settings. If [[channels]] = 1,\n\t * it will return a Float32Array. If [[channels]] > 1, it will\n\t * return an array of Float32Arrays where each index in the array\n\t * represents the analysis done on a channel.\n\t */\n\tgetValue(): Float32Array | Float32Array[] {\n\t\tthis._analysers.forEach((analyser, index) => {\n\t\t\tconst buffer = this._buffers[index];\n\t\t\tif (this._type === \"fft\") {\n\t\t\t\tanalyser.getFloatFrequencyData(buffer);\n\t\t\t} else if (this._type === \"waveform\") {\n\t\t\t\tanalyser.getFloatTimeDomainData(buffer);\n\t\t\t}\n\t\t});\n\t\tif (this.channels === 1) {\n\t\t\treturn this._buffers[0];\n\t\t} else {\n\t\t\treturn this._buffers;\n\t\t}\n\t}\n\n\t/**\n\t * The size of analysis. This must be a power of two in the range 16 to 16384.\n\t */\n\tget size(): PowerOfTwo {\n\t\treturn this._analysers[0].frequencyBinCount;\n\t}\n\tset size(size: PowerOfTwo) {\n\t\tthis._analysers.forEach((analyser, index) => {\n\t\t\tanalyser.fftSize = size * 2;\n\t\t\tthis._buffers[index] = new Float32Array(size);\n\t\t});\n\t}\n\n\t/**\n\t * The number of channels the analyser does the analysis on. Channel\n\t * separation is done using [[Split]]\n\t */\n\tget channels(): number {\n\t\treturn this._analysers.length;\n\t}\n\n\t/**\n\t * The analysis function returned by analyser.getValue(), either \"fft\" or \"waveform\".\n\t */\n\tget type(): AnalyserType {\n\t\treturn this._type;\n\t}\n\tset type(type: AnalyserType) {\n\t\tassert(type === \"waveform\" || type === \"fft\", `Analyser: invalid type: ${type}`);\n\t\tthis._type = type;\n\t}\n\n\t/**\n\t * 0 represents no time averaging with the last analysis frame.\n\t */\n\tget smoothing(): NormalRange {\n\t\treturn this._analysers[0].smoothingTimeConstant;\n\t}\n\tset smoothing(val: NormalRange) {\n\t\tthis._analysers.forEach(a => a.smoothingTimeConstant = val);\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._analysers.forEach(a => a.disconnect());\n\t\tthis._split.dispose();\n\t\tthis._gain.dispose();\n\t\treturn this;\n\t}\n}\n","import { InputNode, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Analyser } from \"./Analyser\";\n\nexport type MeterBaseOptions = ToneAudioNodeOptions;\n\n/**\n * The base class for Metering classes.\n */\nexport class MeterBase<Options extends MeterBaseOptions> extends ToneAudioNode<Options> {\n\n\treadonly name: string = \"MeterBase\";\n\n\t/**\n\t * The signal to be analysed\n\t */\n\tinput: InputNode;\n\n\t/**\n\t * The output is just a pass through of the input\n\t */\n\toutput: OutputNode;\n\n\t/**\n\t * The analyser node for the incoming signal\n\t */\n\tprotected _analyser: Analyser;\n\n\tconstructor(options?: Partial<MeterBaseOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(MeterBase.getDefaults(), arguments));\n\n\t\tthis.input = this.output = this._analyser = new Analyser({\n\t\t\tcontext: this.context,\n\t\t\tsize: 256,\n\t\t\ttype: \"waveform\",\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._analyser.dispose();\n\t\treturn this;\n\t}\n}\n","import { gainToDb } from \"../../core/type/Conversions\";\nimport { NormalRange } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { MeterBase, MeterBaseOptions } from \"./MeterBase\";\nimport { warn } from \"../../core/util/Debug\";\nimport { Analyser } from \"./Analyser\";\n\nexport interface MeterOptions extends MeterBaseOptions {\n\tsmoothing: NormalRange;\n\tnormalRange: boolean;\n\tchannels: number;\n}\n\n/**\n * Meter gets the [RMS](https://en.wikipedia.org/wiki/Root_mean_square)\n * of an input signal. It can also get the raw value of the input signal.\n *\n * @example\n * import { Meter, UserMedia } from \"tone\";\n * const meter = new Meter();\n * const mic = new UserMedia();\n * mic.open();\n * // connect mic to the meter\n * mic.connect(meter);\n * // the current level of the mic\n * const level = meter.getValue();\n * @category Component\n */\nexport class Meter extends MeterBase<MeterOptions> {\n\n\treadonly name: string = \"Meter\";\n\n\t/**\n\t * If the output should be in decibels or normal range between 0-1. If `normalRange` is false,\n\t * the output range will be the measured decibel value, otherwise the decibel value will be converted to\n\t * the range of 0-1\n\t */\n\tnormalRange: boolean;\n\n\t/**\n\t * A value from between 0 and 1 where 0 represents no time averaging with the last analysis frame.\n\t */\n\tsmoothing: number;\n\n\t/**\n\t * The previous frame's value\n\t */\n\tprivate _rms = 0;\n\n\t/**\n\t * @param smoothing The amount of smoothing applied between frames.\n\t */\n\tconstructor(smoothing?: NormalRange);\n\tconstructor(options?: Partial<MeterOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Meter.getDefaults(), arguments, [\"smoothing\"]));\n\t\tconst options = optionsFromArguments(Meter.getDefaults(), arguments, [\"smoothing\"]);\n\n\t\tthis.input = this.output = this._analyser = new Analyser({\n\t\t\tcontext: this.context,\n\t\t\tsize: 256,\n\t\t\ttype: \"waveform\",\n\t\t\tchannels: options.channels,\n\t\t});\n\n\t\tthis.smoothing = options.smoothing,\n\t\tthis.normalRange = options.normalRange;\n\t}\n\n\tstatic getDefaults(): MeterOptions {\n\t\treturn Object.assign(MeterBase.getDefaults(), {\n\t\t\tsmoothing: 0.8,\n\t\t\tnormalRange: false,\n\t\t\tchannels: 1,\n\t\t});\n\t}\n\n\t/**\n\t * Use [[getValue]] instead. For the previous getValue behavior, use DCMeter.\n\t * @deprecated\n\t */\n\tgetLevel(): number | number[] {\n\t\twarn(\"'getLevel' has been changed to 'getValue'\");\n\t\treturn this.getValue();\n\t}\n\n\t/**\n\t * Get the current value of the incoming signal. \n\t * Output is in decibels when [[normalRange]] is `false`.\n\t * If [[channels]] = 1, then the output is a single number\n\t * representing the value of the input signal. When [[channels]] > 1,\n\t * then each channel is returned as a value in a number array. \n\t */\n\tgetValue(): number | number[] {\n\t\tconst aValues = this._analyser.getValue();\n\t\tconst channelValues = this.channels === 1 ? [aValues as Float32Array] : aValues as Float32Array[];\n\t\tconst vals = channelValues.map(values => {\n\t\t\tconst totalSquared = values.reduce((total, current) => total + current * current, 0);\n\t\t\tconst rms = Math.sqrt(totalSquared / values.length);\n\t\t\t// the rms can only fall at the rate of the smoothing\n\t\t\t// but can jump up instantly\n\t\t\tthis._rms = Math.max(rms, this._rms * this.smoothing);\n\t\t\treturn this.normalRange ? this._rms : gainToDb(this._rms);\n\t\t});\n\t\tif (this.channels === 1) {\n\t\t\treturn vals[0];\n\t\t} else {\n\t\t\treturn vals;\n\t\t}\n\t}\n\n\t/**\n\t * The number of channels of analysis.\n\t */\n\tget channels(): number {\n\t\treturn this._analyser.channels;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._analyser.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { dbToGain } from \"../../core/type/Conversions\";\nimport { NormalRange, PowerOfTwo } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { MeterBase, MeterBaseOptions } from \"./MeterBase\";\n\nexport interface FFTOptions extends MeterBaseOptions {\n\tsize: PowerOfTwo;\n\tsmoothing: NormalRange;\n\tnormalRange: boolean;\n}\n\n/**\n * Get the current frequency data of the connected audio source using a fast Fourier transform.\n * @category Component\n */\nexport class FFT extends MeterBase<FFTOptions> {\n\n\treadonly name: string = \"FFT\";\n\n\t/**\n\t * If the output should be in decibels or normal range between 0-1. If `normalRange` is false,\n\t * the output range will be the measured decibel value, otherwise the decibel value will be converted to\n\t * the range of 0-1\n\t */\n\tnormalRange: boolean;\n\n\t/**\n\t * @param size The size of the FFT. Value must be a power of two in the range 16 to 16384.\n\t */\n\tconstructor(size?: PowerOfTwo);\n\tconstructor(options?: Partial<FFTOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(FFT.getDefaults(), arguments, [\"size\"]));\n\t\tconst options = optionsFromArguments(FFT.getDefaults(), arguments, [\"size\"]);\n\n\t\tthis.normalRange = options.normalRange;\n\t\tthis._analyser.type = \"fft\";\n\t\tthis.size = options.size;\n\t}\n\n\tstatic getDefaults(): FFTOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tnormalRange: false,\n\t\t\tsize: 1024,\n\t\t\tsmoothing: 0.8,\n\t\t});\n\t}\n\n\t/**\n\t * Gets the current frequency data from the connected audio source.\n\t * Returns the frequency data of length [[size]] as a Float32Array of decibel values.\n\t */\n\tgetValue(): Float32Array {\n\t\tconst values = this._analyser.getValue() as Float32Array;\n\t\treturn values.map(v => this.normalRange ? dbToGain(v) : v);\n\t}\n\n\t/**\n\t * The size of analysis. This must be a power of two in the range 16 to 16384.\n\t * Determines the size of the array returned by [[getValue]] (i.e. the number of\n\t * frequency bins). Large FFT sizes may be costly to compute.\n\t */\n\tget size(): PowerOfTwo {\n\t\treturn this._analyser.size;\n\t}\n\tset size(size) {\n\t\tthis._analyser.size = size;\n\t}\n\n\t/**\n\t * 0 represents no time averaging with the last analysis frame.\n\t */\n\tget smoothing(): NormalRange {\n\t\treturn this._analyser.smoothing;\n\t}\n\tset smoothing(val) {\n\t\tthis._analyser.smoothing = val;\n\t}\n}\n","import { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { MeterBase, MeterBaseOptions } from \"./MeterBase\";\n\nexport type DCMeterOptions = MeterBaseOptions;\n\n/**\n * DCMeter gets the raw value of the input signal at the current time.\n *\n * @example\n * import { DCMeter, UserMedia } from \"tone\";\n * const meter = new DCMeter();\n * const mic = new UserMedia();\n * mic.open();\n * // connect mic to the meter\n * mic.connect(meter);\n * // the current level of the mic\n * const level = meter.getValue();\n * @category Component\n */\nexport class DCMeter extends MeterBase<DCMeterOptions> {\n\n\treadonly name: string = \"DCMeter\";\n\n\tconstructor(options?: Partial<DCMeterOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(DCMeter.getDefaults(), arguments));\n\n\t\tthis._analyser.type = \"waveform\";\n\t\tthis._analyser.size = 256;\n\t}\n\n\t/**\n\t * Get the signal value of the incoming signal\n\t */\n\tgetValue(): number {\n\t\tconst value = this._analyser.getValue() as Float32Array;\n\t\treturn value[0];\n\t}\n}\n","import { PowerOfTwo } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { MeterBase, MeterBaseOptions } from \"./MeterBase\";\n\nexport interface WaveformOptions extends MeterBaseOptions {\n\t/**\n\t * The size of the Waveform. Value must be a power of two in the range 16 to 16384.\n\t */\n\tsize: PowerOfTwo;\n}\n\n/**\n * Get the current waveform data of the connected audio source.\n * @category Component\n */\nexport class Waveform extends MeterBase<WaveformOptions> {\n\n\treadonly name: string = \"Waveform\";\n\n\t/**\n\t * @param size The size of the Waveform. Value must be a power of two in the range 16 to 16384.\n\t */\n\tconstructor(size?: PowerOfTwo);\n\tconstructor(options?: Partial<WaveformOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Waveform.getDefaults(), arguments, [\"size\"]));\n\t\tconst options = optionsFromArguments(Waveform.getDefaults(), arguments, [\"size\"]);\n\n\t\tthis._analyser.type = \"waveform\";\n\t\tthis.size = options.size;\n\t}\n\n\tstatic getDefaults(): WaveformOptions {\n\t\treturn Object.assign(MeterBase.getDefaults(), {\n\t\t\tsize: 1024,\n\t\t});\n\t}\n\n\t/**\n\t * Return the waveform for the current time as a Float32Array where each value in the array\n\t * represents a sample in the waveform.\n\t */\n\tgetValue(): Float32Array {\n\t\treturn this._analyser.getValue() as Float32Array;\n\t}\n\n\t/**\n\t * The size of analysis. This must be a power of two in the range 16 to 16384.\n\t * Determines the size of the array returned by [[getValue]].\n\t */\n\tget size(): PowerOfTwo {\n\t\treturn this._analyser.size;\n\t}\n\tset size(size) {\n\t\tthis._analyser.size = size;\n\t}\n}\n","import { BaseContext } from \"../../core/context/BaseContext\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n\nexport interface SoloOptions extends ToneAudioNodeOptions {\n\tsolo: boolean;\n}\n\n/**\n * Solo lets you isolate a specific audio stream. When an instance is set to `solo=true`,\n * it will mute all other instances of Solo.\n * @example\n * import { Oscillator, Solo } from \"tone\";\n * \n * const soloA = new Solo().toDestination();\n * const oscA = new Oscillator(\"C4\", \"sawtooth\").connect(soloA);\n * const soloB = new Solo().toDestination();\n * const oscB = new Oscillator(\"E4\", \"square\").connect(soloB);\n * \n * soloA.solo = true;\n * // no audio will pass through soloB\n * @category Component\n */\nexport class Solo extends ToneAudioNode<SoloOptions> {\n\n\treadonly name: string = \"Solo\";\n\n\treadonly input: Gain;\n\treadonly output: Gain;\n\n\t/**\n\t * @param solo If the connection should be initially solo'ed.\n\t */\n\tconstructor(solo?: boolean);\n\tconstructor(options?: Partial<SoloOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Solo.getDefaults(), arguments, [\"solo\"]));\n\t\tconst options = optionsFromArguments(Solo.getDefaults(), arguments, [\"solo\"]);\n\n\t\tthis.input = this.output = new Gain({\n\t\t\tcontext: this.context,\n\t\t});\n\n\t\tif (!Solo._allSolos.has(this.context)) {\n\t\t\tSolo._allSolos.set(this.context, new Set());\n\t\t}\n\t\t(Solo._allSolos.get(this.context) as Set<Solo>).add(this);\n\n\t\t// set initially\n\t\tthis.solo = options.solo;\n\t}\n\n\tstatic getDefaults(): SoloOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tsolo: false,\n\t\t});\n\t}\n\n\t/**\n\t * Hold all of the solo'ed tracks belonging to a specific context\n\t */\n\tprivate static _allSolos: Map<BaseContext, Set<Solo>> = new Map();\n\n\t/**\n\t * Hold the currently solo'ed instance(s)\n\t */\n\tprivate static _soloed: Map<BaseContext, Set<Solo>> = new Map();\n\n\t/**\n\t * Isolates this instance and mutes all other instances of Solo.\n\t * Only one instance can be soloed at a time. A soloed\n\t * instance will report `solo=false` when another instance is soloed.\n\t */\n\tget solo(): boolean {\n\t\treturn this._isSoloed();\n\t}\n\tset solo(solo) {\n\t\tif (solo) {\n\t\t\tthis._addSolo();\n\t\t} else {\n\t\t\tthis._removeSolo();\n\t\t}\n\t\t(Solo._allSolos.get(this.context) as Set<Solo>).forEach(instance => instance._updateSolo());\n\t}\n\n\t/**\n\t * If the current instance is muted, i.e. another instance is soloed\n\t */\n\tget muted(): boolean {\n\t\treturn this.input.gain.value === 0;\n\t}\n\n\t/**\n\t * Add this to the soloed array\n\t */\n\tprivate _addSolo(): void {\n\t\tif (!Solo._soloed.has(this.context)) {\n\t\t\tSolo._soloed.set(this.context, new Set());\n\t\t}\n\t\t(Solo._soloed.get(this.context) as Set<Solo>).add(this);\n\t}\n\n\t/**\n\t * Remove this from the soloed array\n\t */\n\tprivate _removeSolo(): void {\n\t\tif (Solo._soloed.has(this.context)) {\n\t\t\t(Solo._soloed.get(this.context) as Set<Solo>).delete(this);\n\t\t}\n\t}\n\n\t/**\n\t * Is this on the soloed array\n\t */\n\tprivate _isSoloed(): boolean {\n\t\treturn Solo._soloed.has(this.context) && (Solo._soloed.get(this.context) as Set<Solo>).has(this);\n\t}\n\n\t/**\n\t * Returns true if no one is soloed\n\t */\n\tprivate _noSolos(): boolean {\n\t\t// either does not have any soloed added\n\t\treturn !Solo._soloed.has(this.context) ||\n\t\t\t// or has a solo set but doesn't include any items\n\t\t\t(Solo._soloed.has(this.context) && (Solo._soloed.get(this.context) as Set<Solo>).size === 0);\n\t}\n\n\t/**\n\t * Solo the current instance and unsolo all other instances.\n\t */\n\tprivate _updateSolo(): void {\n\t\tif (this._isSoloed()) {\n\t\t\tthis.input.gain.value = 1;\n\t\t} else if (this._noSolos()) {\n\t\t\t// no one is soloed\n\t\t\tthis.input.gain.value = 1;\n\t\t} else {\n\t\t\tthis.input.gain.value = 0;\n\t\t}\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\t(Solo._allSolos.get(this.context) as Set<Solo>).delete(this);\n\t\tthis._removeSolo();\n\t\treturn this;\n\t}\n}\n","import { readOnly } from \"../../core/util/Interface\";\nimport { Param } from \"../../core/context/Param\";\nimport { InputNode, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { AudioRange, Decibels } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Panner } from \"./Panner\";\nimport { Volume } from \"./Volume\";\n\nexport interface PanVolOptions extends ToneAudioNodeOptions {\n\tpan: AudioRange;\n\tvolume: Decibels;\n\tmute: boolean;\n}\n\n/**\n * PanVol is a Tone.Panner and Tone.Volume in one.\n * @example\n * import { Oscillator, PanVol } from \"tone\";\n * // pan the incoming signal left and drop the volume\n * const panVol = new PanVol(-0.25, -12).toDestination();\n * const osc = new Oscillator().connect(panVol).start();\n * @category Component\n */\nexport class PanVol extends ToneAudioNode<PanVolOptions> {\n\n\treadonly name: string = \"PanVol\";\n\n\treadonly input: InputNode;\n\treadonly output: OutputNode;\n\n\t/**\n\t * The panning node\n\t */\n\tprivate _panner: Panner;\n\n\t/**\n\t * The L/R panning control.\n\t */\n\treadonly pan: Param<\"audioRange\">;\n\n\t/**\n\t * The volume node\n\t */\n\tprivate _volume: Volume;\n\n\t/**\n\t * The volume control in decibels.\n\t */\n\treadonly volume: Param<\"decibels\">;\n\n\t/**\n\t * @param pan the initial pan\n\t * @param volume The output volume.\n\t */\n\tconstructor(pan?: AudioRange, volume?: Decibels);\n\tconstructor(options?: Partial<PanVolOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(PanVol.getDefaults(), arguments, [\"pan\", \"volume\"]));\n\t\tconst options = optionsFromArguments(PanVol.getDefaults(), arguments, [\"pan\", \"volume\"]);\n\n\t\tthis._panner = this.input = new Panner({\n\t\t\tcontext: this.context,\n\t\t\tpan: options.pan,\n\t\t});\n\t\tthis.pan = this._panner.pan;\n\t\tthis._volume = this.output = new Volume({\n\t\t\tcontext: this.context,\n\t\t\tvolume: options.volume,\n\t\t});\n\t\tthis.volume = this._volume.volume;\n\n\t\t// connections\n\t\tthis._panner.connect(this._volume);\n\t\tthis.mute = options.mute;\n\n\t\treadOnly(this, [\"pan\", \"volume\"]);\n\t}\n\n\tstatic getDefaults(): PanVolOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmute: false,\n\t\t\tpan: 0,\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Mute/unmute the volume\n\t */\n\tget mute(): boolean {\n\t\treturn this._volume.mute;\n\t}\n\tset mute(mute) {\n\t\tthis._volume.mute = mute;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._panner.dispose();\n\t\tthis.pan.dispose();\n\t\tthis._volume.dispose();\n\t\tthis.volume.dispose();\n\t\treturn this;\n\t}\n}\n","import { AudioRange, Decibels } from \"../../core/type/Units\";\nimport { InputNode, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Solo } from \"./Solo\";\nimport { PanVol } from \"./PanVol\";\nimport { Param } from \"../../core/context/Param\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Gain } from \"../../core/context/Gain\";\n\nexport interface ChannelOptions extends ToneAudioNodeOptions {\n\tpan: AudioRange;\n\tvolume: Decibels;\n\tsolo: boolean;\n\tmute: boolean;\n}\n\n/**\n * Channel provides a channel strip interface with volume, pan, solo and mute controls. \n * See [[PanVol]] and [[Solo]]\n * @example\n * import { Channel } from \"tone\";\n * // pan the incoming signal left and drop the volume 12db\n * const channel = new Channel(-0.25, -12);\n * @category Component\n */\nexport class Channel extends ToneAudioNode<ChannelOptions> {\n\n\treadonly name: string = \"Channel\";\n\n\treadonly input: InputNode;\n\treadonly output: OutputNode;\n\n\t/**\n\t * The soloing interface\n\t */\n\tprivate _solo: Solo;\n\n\t/**\n\t * The panning and volume node\n\t */\n\tprivate _panVol: PanVol;\n\n\t/**\n\t * The L/R panning control.\n\t */\n\treadonly pan: Param<\"audioRange\">;\n\n\t/**\n\t * The volume control in decibels.\n\t */\n\treadonly volume: Param<\"decibels\">;\n\t\n\t/**\n\t * @param volume The output volume.\n\t * @param pan the initial pan\n\t */\n\tconstructor(volume?: Decibels, pan?: AudioRange);\n\tconstructor(options?: Partial<ChannelOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Channel.getDefaults(), arguments, [\"volume\", \"pan\"]));\n\t\tconst options = optionsFromArguments(Channel.getDefaults(), arguments, [\"volume\", \"pan\"]);\n\n\t\tthis._solo = this.input = new Solo({\n\t\t\tsolo: options.solo,\n\t\t\tcontext: this.context,\n\t\t});\n\t\tthis._panVol = this.output = new PanVol({\n\t\t\tcontext: this.context,\n\t\t\tpan: options.pan,\n\t\t\tvolume: options.volume,\n\t\t\tmute: options.mute,\n\t\t});\n\t\tthis.pan = this._panVol.pan;\n\t\tthis.volume = this._panVol.volume;\n\n\t\tthis._solo.connect(this._panVol);\n\t\treadOnly(this, [\"pan\", \"volume\"]);\n\t}\n\n\tstatic getDefaults(): ChannelOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tpan: 0,\n\t\t\tvolume: 0,\n\t\t\tmute: false,\n\t\t\tsolo: false\n\t\t});\n\t}\n\n\t/**\n\t * Solo/unsolo the channel. Soloing is only relative to other [[Channels]] and [[Solo]] instances\n\t */\n\tget solo(): boolean {\n\t\treturn this._solo.solo;\n\t}\n\tset solo(solo) {\n\t\tthis._solo.solo = solo;\n\t}\n\n\t/**\n\t * If the current instance is muted, i.e. another instance is soloed,\n\t * or the channel is muted\n\t */\n\tget muted(): boolean {\n\t\treturn this._solo.muted || this.mute;\n\t}\n\n\t/**\n\t * Mute/unmute the volume\n\t */\n\tget mute(): boolean {\n\t\treturn this._panVol.mute;\n\t}\n\tset mute(mute) {\n\t\tthis._panVol.mute = mute;\n\t}\n\n\t/**\n\t * Store the send/receive channels by name. \n\t */\n\tprivate static buses: Map<string, Gain> = new Map();\n\n\t/**\n\t * Get the gain node belonging to the bus name. Create it if\n\t * it doesn't exist\n\t * @param name The bus name\n\t */\n\tprivate _getBus(name: string): Gain {\n\t\tif (!Channel.buses.has(name)) {\n\t\t\tChannel.buses.set(name, new Gain({ context: this.context }));\n\t\t}\n\t\treturn Channel.buses.get(name) as Gain;\n\t}\n\n\t/**\n\t * Send audio to another channel using a string. `send` is a lot like\n\t * [[connect]], except it uses a string instead of an object. This can \n\t * be useful in large applications to decouple sections since [[send]]\n\t * and [[receive]] can be invoked separately in order to connect an object\n\t * @param name The channel name to send the audio\n\t * @param volume The amount of the signal to send. \n\t * \tDefaults to 0db, i.e. send the entire signal\n\t * @returns Returns the gain node of this connection.\n\t */\n\tsend(name: string, volume: Decibels = 0): Gain<\"decibels\"> {\n\t\tconst bus = this._getBus(name);\n\t\tconst sendKnob = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"decibels\",\n\t\t\tgain: volume,\n\t\t});\n\t\tthis.connect(sendKnob);\n\t\tsendKnob.connect(bus);\n\t\treturn sendKnob;\n\t}\n\n\t/**\n\t * Receive audio from a channel which was connected with [[send]]. \n\t * @param name The channel name to receive audio from.\n\t */\n\treceive(name: string): this {\n\t\tconst bus = this._getBus(name);\n\t\tbus.connect(this);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._panVol.dispose();\n\t\tthis.pan.dispose();\n\t\tthis.volume.dispose();\n\t\tthis._solo.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Frequency, Positive } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Filter } from \"../filter/Filter\";\n\ninterface MultibandSplitOptions extends ToneAudioNodeOptions {\n\tQ: Positive;\n\tlowFrequency: Frequency;\n\thighFrequency: Frequency;\n}\n\n/**\n * Split the incoming signal into three bands (low, mid, high)\n * with two crossover frequency controls.\n * ```\n *            +----------------------+\n *          +-> input < lowFrequency +------------------> low\n *          | +----------------------+\n *          |\n *          | +--------------------------------------+\n * input ---+-> lowFrequency < input < highFrequency +--> mid\n *          | +--------------------------------------+\n *          |\n *          | +-----------------------+\n *          +-> highFrequency < input +-----------------> high\n *            +-----------------------+\n * ```\n * @category Component\n */\nexport class MultibandSplit extends ToneAudioNode<MultibandSplitOptions> {\n\n\treadonly name: string = \"MultibandSplit\";\n\n\t/**\n\t * the input\n\t */\n\treadonly input = new Gain({ context: this.context });\n\n\t/**\n\t * no output node, use either low, mid or high outputs\n\t */\n\treadonly output = undefined;\n\n\t/**\n\t * The low band.\n\t */\n\treadonly low = new Filter({\n\t\tcontext: this.context,\n\t\tfrequency: 0,\n\t\ttype: \"lowpass\",\n\t});\n\n\t/**\n\t * the lower filter of the mid band\n\t */\n\tprivate _lowMidFilter = new Filter({\n\t\tcontext: this.context,\n\t\tfrequency: 0,\n\t\ttype: \"highpass\",\n\t});\n\n\t/**\n\t * The mid band output.\n\t */\n\treadonly mid = new Filter({\n\t\tcontext: this.context,\n\t\tfrequency: 0,\n\t\ttype: \"lowpass\",\n\t});\n\n\t/**\n\t * The high band output.\n\t */\n\treadonly high = new Filter({\n\t\tcontext: this.context,\n\t\tfrequency: 0,\n\t\ttype: \"highpass\",\n\t});\n\n\t/**\n\t * The low/mid crossover frequency.\n\t */\n\treadonly lowFrequency: Signal<\"frequency\">;\n\n\t/**\n\t * The mid/high crossover frequency.\n\t */\n\treadonly highFrequency: Signal<\"frequency\">;\n\n\tprotected _internalChannels = [this.low, this.mid, this.high];\n\n\t/**\n\t * The Q or Quality of the filter\n\t */\n\treadonly Q: Signal<\"positive\">;\n\n\t/**\n\t * @param lowFrequency the low/mid crossover frequency\n\t * @param highFrequency the mid/high crossover frequency\n\t */\n\tconstructor(lowFrequency?: Frequency, highFrequency?: Frequency);\n\tconstructor(options?: Partial<MultibandSplitOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(MultibandSplit.getDefaults(), arguments, [\"lowFrequency\", \"highFrequency\"]));\n\t\tconst options = optionsFromArguments(MultibandSplit.getDefaults(), arguments, [\"lowFrequency\", \"highFrequency\"]);\n\n\t\tthis.lowFrequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.lowFrequency,\n\t\t});\n\n\t\tthis.highFrequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.highFrequency,\n\t\t});\n\n\t\tthis.Q = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.Q,\n\t\t});\n\n\t\tthis.input.fan(this.low, this.high);\n\t\tthis.input.chain(this._lowMidFilter, this.mid);\n\t\t// the frequency control signal\n\t\tthis.lowFrequency.fan(this.low.frequency, this._lowMidFilter.frequency);\n\t\tthis.highFrequency.fan(this.mid.frequency, this.high.frequency);\n\t\t// the Q value\n\t\tthis.Q.connect(this.low.Q);\n\t\tthis.Q.connect(this._lowMidFilter.Q);\n\t\tthis.Q.connect(this.mid.Q);\n\t\tthis.Q.connect(this.high.Q);\n\n\t\treadOnly(this, [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n\t}\n\n\tstatic getDefaults(): MultibandSplitOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tQ: 1,\n\t\t\thighFrequency: 2500,\n\t\t\tlowFrequency: 400,\n\t\t});\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\twritable(this, [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n\t\tthis.low.dispose();\n\t\tthis._lowMidFilter.dispose();\n\t\tthis.mid.dispose();\n\t\tthis.high.dispose();\n\t\tthis.lowFrequency.dispose();\n\t\tthis.highFrequency.dispose();\n\t\tthis.Q.dispose();\n\t\treturn this;\n\t}\n\n}\n","import { ToneAudioNode, ToneAudioNodeOptions } from \"./ToneAudioNode\";\nimport { Param } from \"./Param\";\nimport { onContextClose, onContextInit } from \"./ContextInitialization\";\n\nexport interface ListenerOptions extends ToneAudioNodeOptions{\n\tpositionX: number;\n\tpositionY: number;\n\tpositionZ: number;\n\tforwardX: number;\n\tforwardY: number;\n\tforwardZ: number;\n\tupX: number;\n\tupY: number;\n\tupZ: number;\n}\n\n/**\n * Tone.Listener is a thin wrapper around the AudioListener. Listener combined\n * with [[Panner3D]] makes up the Web Audio API's 3D panning system. Panner3D allows you \n * to place sounds in 3D and Listener allows you to navigate the 3D sound environment from\n * a first-person perspective. There is only one listener per audio context. \n */\nexport class Listener extends ToneAudioNode<ListenerOptions> {\n\n\treadonly name: string = \"Listener\";\n\n\t/**\n\t * The listener has no inputs or outputs. \n\t */\n\toutput: undefined; \n\tinput: undefined; \n\n\treadonly positionX: Param = new Param({\n\t\tcontext: this.context,\n\t\tparam: this.context.rawContext.listener.positionX,\n\t})\n\n\treadonly positionY: Param = new Param({\n\t\tcontext: this.context,\n\t\tparam: this.context.rawContext.listener.positionY,\n\t})\n\n\treadonly positionZ: Param = new Param({\n\t\tcontext: this.context,\n\t\tparam: this.context.rawContext.listener.positionZ,\n\t})\n\n\treadonly forwardX: Param = new Param({\n\t\tcontext: this.context,\n\t\tparam: this.context.rawContext.listener.forwardX,\n\t})\n\n\treadonly forwardY: Param = new Param({\n\t\tcontext: this.context,\n\t\tparam: this.context.rawContext.listener.forwardY,\n\t})\n\n\treadonly forwardZ: Param = new Param({\n\t\tcontext: this.context,\n\t\tparam: this.context.rawContext.listener.forwardZ,\n\t})\n\n\treadonly upX: Param = new Param({\n\t\tcontext: this.context,\n\t\tparam: this.context.rawContext.listener.upX,\n\t})\n\n\treadonly upY: Param = new Param({\n\t\tcontext: this.context,\n\t\tparam: this.context.rawContext.listener.upY,\n\t})\n\n\treadonly upZ: Param = new Param({\n\t\tcontext: this.context,\n\t\tparam: this.context.rawContext.listener.upZ,\n\t})\n\n\tstatic getDefaults(): ListenerOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tpositionX: 0,\n\t\t\tpositionY: 0,\n\t\t\tpositionZ: 0,\n\t\t\tforwardX: 0,\n\t\t\tforwardY: 0,\n\t\t\tforwardZ: -1,\n\t\t\tupX: 0,\n\t\t\tupY: 1,\n\t\t\tupZ: 0,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.positionX.dispose();\n\t\tthis.positionY.dispose();\n\t\tthis.positionZ.dispose();\n\t\tthis.forwardX.dispose();\n\t\tthis.forwardY.dispose();\n\t\tthis.forwardZ.dispose();\n\t\tthis.upX.dispose();\n\t\tthis.upY.dispose();\n\t\tthis.upZ.dispose();\n\t\treturn this;\n\t}\n}\n\n//-------------------------------------\n// \tINITIALIZATION\n//-------------------------------------\n\nonContextInit(context => {\n\tcontext.listener = new Listener({ context });\n});\n\nonContextClose(context => {\n\tcontext.listener.dispose();\n});\n","import { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Degrees, GainFactor } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport \"../../core/context/Listener\";\n\nexport interface Panner3DOptions extends ToneAudioNodeOptions {\n\tconeInnerAngle: Degrees;\n\tconeOuterAngle: Degrees;\n\tconeOuterGain: GainFactor;\n\tdistanceModel: DistanceModelType;\n\tmaxDistance: number;\n\torientationX: number;\n\torientationY: number;\n\torientationZ: number;\n\tpanningModel: PanningModelType;\n\tpositionX: number;\n\tpositionY: number;\n\tpositionZ: number;\n\trefDistance: number;\n\trolloffFactor: number;\n}\n\n/**\n * A spatialized panner node which supports equalpower or HRTF panning.\n * @category Component\n */\nexport class Panner3D extends ToneAudioNode<Panner3DOptions> {\n\n\treadonly name: string = \"Panner3D\";\n\n\t/**\n\t * The panning object\n\t */\n\tprivate _panner: PannerNode;\n\treadonly input: PannerNode;\n\treadonly output: PannerNode;\n\n\treadonly positionX: Param<\"number\">;\n\treadonly positionY: Param<\"number\">;\n\treadonly positionZ: Param<\"number\">;\n\n\treadonly orientationX: Param<\"number\">;\n\treadonly orientationY: Param<\"number\">;\n\treadonly orientationZ: Param<\"number\">;\n\n\t/**\n\t * @param positionX The initial x position.\n\t * @param positionY The initial y position.\n\t * @param positionZ The initial z position.\n\t */\n\tconstructor(positionX: number, positionY: number, positionZ: number);\n\tconstructor(options?: Partial<Panner3DOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Panner3D.getDefaults(), arguments, [\"positionX\", \"positionY\", \"positionZ\"]));\n\t\tconst options = optionsFromArguments(Panner3D.getDefaults(), arguments, [\"positionX\", \"positionY\", \"positionZ\"]);\n\n\t\tthis._panner = this.input = this.output = this.context.createPanner();\n\t\t// set some values\n\t\tthis.panningModel = options.panningModel;\n\t\tthis.maxDistance = options.maxDistance;\n\t\tthis.distanceModel = options.distanceModel;\n\t\tthis.coneOuterGain = options.coneOuterGain;\n\t\tthis.coneOuterAngle = options.coneOuterAngle;\n\t\tthis.coneInnerAngle = options.coneInnerAngle;\n\t\tthis.refDistance = options.refDistance;\n\t\tthis.rolloffFactor = options.rolloffFactor;\n\n\t\tthis.positionX = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._panner.positionX,\n\t\t\tvalue: options.positionX,\n\t\t});\n\t\tthis.positionY = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._panner.positionY,\n\t\t\tvalue: options.positionY,\n\t\t});\n\t\tthis.positionZ = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._panner.positionZ,\n\t\t\tvalue: options.positionZ,\n\t\t});\n\t\tthis.orientationX = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._panner.orientationX,\n\t\t\tvalue: options.orientationX,\n\t\t});\n\t\tthis.orientationY = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._panner.orientationY,\n\t\t\tvalue: options.orientationY,\n\t\t});\n\t\tthis.orientationZ = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._panner.orientationZ,\n\t\t\tvalue: options.orientationZ,\n\t\t});\n\t}\n\n\tstatic getDefaults(): Panner3DOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tconeInnerAngle: 360,\n\t\t\tconeOuterAngle: 360,\n\t\t\tconeOuterGain: 0,\n\t\t\tdistanceModel: \"inverse\" as DistanceModelType,\n\t\t\tmaxDistance: 10000,\n\t\t\torientationX: 0,\n\t\t\torientationY: 0,\n\t\t\torientationZ: 0,\n\t\t\tpanningModel: \"equalpower\" as PanningModelType,\n\t\t\tpositionX: 0,\n\t\t\tpositionY: 0,\n\t\t\tpositionZ: 0,\n\t\t\trefDistance: 1,\n\t\t\trolloffFactor: 1,\n\t\t});\n\t}\n\n\t/**\n\t * Sets the position of the source in 3d space.\n\t */\n\tsetPosition(x: number, y: number, z: number): this {\n\t\tthis.positionX.value = x;\n\t\tthis.positionY.value = y;\n\t\tthis.positionZ.value = z;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the orientation of the source in 3d space.\n\t */\n\tsetOrientation(x: number, y: number, z: number): this {\n\t\tthis.orientationX.value = x;\n\t\tthis.orientationY.value = y;\n\t\tthis.orientationZ.value = z;\n\t\treturn this;\n\t}\n\n\t/**\n\t * The panning model. Either \"equalpower\" or \"HRTF\".\n\t */\n\tget panningModel(): PanningModelType {\n\t\treturn this._panner.panningModel;\n\t}\n\tset panningModel(val) {\n\t\tthis._panner.panningModel = val;\n\t}\n\n\t/**\n\t * A reference distance for reducing volume as source move further from the listener\n\t */\n\tget refDistance(): number {\n\t\treturn this._panner.refDistance;\n\t}\n\tset refDistance(val) {\n\t\tthis._panner.refDistance = val;\n\t}\n\n\t/**\n\t * Describes how quickly the volume is reduced as source moves away from listener.\n\t */\n\tget rolloffFactor(): number {\n\t\treturn this._panner.rolloffFactor;\n\t}\n\tset rolloffFactor(val) {\n\t\tthis._panner.rolloffFactor = val;\n\t}\n\n\t/**\n\t * The distance model used by,  \"linear\", \"inverse\", or \"exponential\".\n\t */\n\tget distanceModel(): DistanceModelType {\n\t\treturn this._panner.distanceModel;\n\t}\n\tset distanceModel(val) {\n\t\tthis._panner.distanceModel = val;\n\t}\n\n\t/**\n\t * The angle, in degrees, inside of which there will be no volume reduction\n\t */\n\tget coneInnerAngle(): Degrees {\n\t\treturn this._panner.coneInnerAngle;\n\t}\n\tset coneInnerAngle(val) {\n\t\tthis._panner.coneInnerAngle = val;\n\t}\n\n\t/**\n\t * The angle, in degrees, outside of which the volume will be reduced\n\t * to a constant value of coneOuterGain\n\t */\n\tget coneOuterAngle(): Degrees {\n\t\treturn this._panner.coneOuterAngle;\n\t}\n\tset coneOuterAngle(val) {\n\t\tthis._panner.coneOuterAngle = val;\n\t}\n\n\t/**\n\t * The gain outside of the coneOuterAngle\n\t */\n\tget coneOuterGain(): GainFactor {\n\t\treturn this._panner.coneOuterGain;\n\t}\n\tset coneOuterGain(val) {\n\t\tthis._panner.coneOuterGain = val;\n\t}\n\n\t/**\n\t * The maximum distance between source and listener,\n\t * after which the volume will not be reduced any further.\n\t */\n\tget maxDistance(): number {\n\t\treturn this._panner.maxDistance;\n\t}\n\tset maxDistance(val) {\n\t\tthis._panner.maxDistance = val;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._panner.disconnect();\n\t\tthis.orientationX.dispose();\n\t\tthis.orientationY.dispose();\n\t\tthis.orientationZ.dispose();\n\t\tthis.positionX.dispose();\n\t\tthis.positionY.dispose();\n\t\tthis.positionZ.dispose();\n\t\treturn this;\n\t}\n}\n","import { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Decibels, Positive, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\n\nexport interface CompressorOptions extends ToneAudioNodeOptions {\n\tattack: Time;\n\tknee: Decibels;\n\tratio: Positive;\n\trelease: Time;\n\tthreshold: Decibels;\n}\n\n/**\n * Compressor is a thin wrapper around the Web Audio\n * [DynamicsCompressorNode](http://webaudio.github.io/web-audio-api/#the-dynamicscompressornode-interface).\n * Compression reduces the volume of loud sounds or amplifies quiet sounds\n * by narrowing or \"compressing\" an audio signal's dynamic range.\n * Read more on [Wikipedia](https://en.wikipedia.org/wiki/Dynamic_range_compression).\n * @example\n * import { Compressor } from \"tone\";\n * const comp = new Compressor(-30, 3);\n * @category Component\n */\nexport class Compressor extends ToneAudioNode<CompressorOptions> {\n\n\treadonly name: string = \"Compressor\";\n\n\t/**\n\t * the compressor node\n\t */\n\tprivate _compressor: DynamicsCompressorNode = this.context.createDynamicsCompressor();\n\treadonly input = this._compressor;\n\treadonly output = this._compressor;\n\n\t/**\n\t * The decibel value above which the compression will start taking effect.\n\t * @min -100\n\t * @max 0\n\t */\n\treadonly threshold: Param<\"decibels\">;\n\n\t/**\n\t * The amount of time (in seconds) to reduce the gain by 10dB.\n\t * @min 0\n\t * @max 1\n\t */\n\treadonly attack: Param<\"time\">;\n\t\n\t/**\n\t * The amount of time (in seconds) to increase the gain by 10dB.\n\t * @min 0\n\t * @max 1\n\t */\n\treadonly release: Param<\"time\">;\n\n\t/**\n\t * A decibel value representing the range above the threshold where the\n\t * curve smoothly transitions to the \"ratio\" portion.\n\t * @min 0\n\t * @max 40\n\t */\n\treadonly knee: Param<\"decibels\">;\n\n\t/**\n\t * The amount of dB change in input for a 1 dB change in output.\n\t * @min 1\n\t * @max 20\n\t */\n\treadonly ratio: Param<\"positive\">;\n\n\t/**\n\t * @param threshold The value above which the compression starts to be applied.\n\t * @param ratio The gain reduction ratio.\n\t */\n\tconstructor(threshold?: Decibels, ratio?: Positive);\n\tconstructor(options?: Partial<CompressorOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Compressor.getDefaults(), arguments, [\"threshold\", \"ratio\"]));\n\t\tconst options = optionsFromArguments(Compressor.getDefaults(), arguments, [\"threshold\", \"ratio\"]);\n\n\t\tthis.threshold = new Param({\n\t\t\tminValue: this._compressor.threshold.minValue,\n\t\t\tmaxValue: this._compressor.threshold.maxValue,\n\t\t\tcontext: this.context,\n\t\t\tconvert: false,\n\t\t\tparam: this._compressor.threshold,\n\t\t\tunits: \"decibels\",\n\t\t\tvalue: options.threshold,\n\t\t});\n\t\t\n\t\tthis.attack = new Param({\n\t\t\tminValue: this._compressor.attack.minValue,\n\t\t\tmaxValue: this._compressor.attack.maxValue,\n\t\t\tcontext: this.context,\n\t\t\tparam: this._compressor.attack,\n\t\t\tunits: \"time\",\n\t\t\tvalue: options.attack,\n\t\t});\n\t\t\n\t\tthis.release = new Param({\n\t\t\tminValue: this._compressor.release.minValue,\n\t\t\tmaxValue: this._compressor.release.maxValue,\n\t\t\tcontext: this.context,\n\t\t\tparam: this._compressor.release,\n\t\t\tunits: \"time\",\n\t\t\tvalue: options.release,\n\t\t});\n\t\t\n\t\tthis.knee = new Param({\n\t\t\tminValue: this._compressor.knee.minValue,\n\t\t\tmaxValue: this._compressor.knee.maxValue,\n\t\t\tcontext: this.context,\n\t\t\tconvert: false,\n\t\t\tparam: this._compressor.knee,\n\t\t\tunits: \"decibels\",\n\t\t\tvalue: options.knee,\n\t\t});\n\t\t\n\t\tthis.ratio = new Param({\n\t\t\tminValue: this._compressor.ratio.minValue,\n\t\t\tmaxValue: this._compressor.ratio.maxValue,\n\t\t\tcontext: this.context,\n\t\t\tconvert: false,\n\t\t\tparam: this._compressor.ratio,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.ratio,\n\t\t});\n\n\t\t// set the defaults\n\t\treadOnly(this, [\"knee\", \"release\", \"attack\", \"ratio\", \"threshold\"]);\n\t}\n\n\tstatic getDefaults(): CompressorOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tattack: 0.003,\n\t\t\tknee: 30,\n\t\t\tratio: 12,\n\t\t\trelease: 0.25,\n\t\t\tthreshold: -24,\n\t\t});\n\t}\n\n\t/**\n\t * A read-only decibel value for metering purposes, representing the current amount of gain\n\t * reduction that the compressor is applying to the signal. If fed no signal the value will be 0 (no gain reduction).\n\t */\n\tget reduction(): Decibels {\n\t\treturn this._compressor.reduction;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._compressor.disconnect();\n\t\tthis.attack.dispose();\n\t\tthis.release.dispose();\n\t\tthis.threshold.dispose();\n\t\tthis.ratio.dispose();\n\t\tthis.knee.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Decibels, Time } from \"../../core/type/Units\";\nimport { GreaterThan } from \"../../signal/GreaterThan\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { Follower } from \"../analysis/Follower\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { dbToGain, gainToDb } from \"../../core/type/Conversions\";\n\nexport interface GateOptions extends ToneAudioNodeOptions {\n\tthreshold: Decibels;\n\tsmoothing: Time;\n}\n\n/**\n * Gate only passes a signal through when the incoming\n * signal exceeds a specified threshold. It uses [[Follower]] to follow the ampltiude\n * of the incoming signal and compares it to the [[threshold]] value using [[GreaterThan]].\n *\n * @example\n * import { Gate, UserMedia } from \"tone\";\n * const gate = new Gate(-30, 0.2).toDestination();\n * const mic = new UserMedia().connect(gate);\n * // the gate will only pass through the incoming\n * // signal when it's louder than -30db\n */\nexport class Gate extends ToneAudioNode<GateOptions> {\n\n\treadonly name: string = \"Gate\";\n\n\treadonly input: ToneAudioNode;\n\treadonly output: ToneAudioNode;\n\n\t/**\n\t * Follow the incoming signal\n\t */\n\tprivate _follower: Follower;\n\n\t/**\n\t * Test if it's greater than the threshold\n\t */\n\tprivate _gt: GreaterThan;\n\n\t/**\n\t * Gate the incoming signal when it does not exceed the threshold\n\t */\n\tprivate _gate: Gain;\n\t\n\t/**\n\t * @param threshold The threshold above which the gate will open.\n\t * @param smoothing The follower's smoothing time\n\t */\n\tconstructor(threshold?: Decibels, smoothing?: Time);\n\tconstructor(options?: Partial<GateOptions>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Gate.getDefaults(), arguments, [\"threshold\", \"smoothing\"])));\n\t\tconst options = optionsFromArguments(Gate.getDefaults(), arguments, [\"threshold\", \"smoothing\"]);\n\n\t\tthis._follower = new Follower({\n\t\t\tcontext: this.context,\n\t\t\tsmoothing: options.smoothing,\n\t\t});\n\t\tthis._gt = new GreaterThan({\n\t\t\tcontext: this.context,\n\t\t\tvalue: dbToGain(options.threshold),\n\t\t});\n\t\tthis.input = new Gain({ context: this.context });\n\t\tthis._gate = this.output = new Gain({ context: this.context });\n\n\t\t// connections\n\t\tthis.input.connect(this._gate);\n\t\t// the control signal\n\t\tthis.input.chain(this._follower, this._gt, this._gate.gain);\n\t}\n\n\tstatic getDefaults(): GateOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tsmoothing: 0.1,\n\t\t\tthreshold: -40\n\t\t});\n\t}\n\n\t/**\n\t * The threshold of the gate in decibels\n\t */\n\tget threshold(): Decibels {\n\t\treturn gainToDb(this._gt.value);\n\t}\n\tset threshold(thresh) {\n\t\tthis._gt.value = dbToGain(thresh);\n\t}\n\n\t/**\n\t * The attack/decay speed of the gate. See [[Follower.smoothing]]\n\t */\n\tget smoothing(): Time {\n\t\treturn this._follower.smoothing;\n\t}\n\tset smoothing(smoothingTime) {\n\t\tthis._follower.smoothing = smoothingTime;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.input.dispose();\n\t\tthis._follower.dispose();\n\t\tthis._gt.dispose();\n\t\tthis._gate.dispose();\n\t\treturn this;\n\t}\n}\n","import { InputNode, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Decibels } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Compressor } from \"./Compressor\";\nimport { Param } from \"../../core/context/Param\";\nimport { readOnly } from \"../../core/util/Interface\";\n\nexport interface LimiterOptions extends ToneAudioNodeOptions {\n\tthreshold: Decibels;\n};\n\n/**\n * Limiter will limit the loudness of an incoming signal.\n * It is composed of a [[Compressor]] with a fast attack\n * and release and max ratio. Limiters are commonly used to safeguard against\n * signal clipping. Unlike a compressor, limiters do not provide\n * smooth gain reduction and almost completely prevent\n * additional gain above the threshold.\n *\n * @example\n * import { Limiter, Oscillator } from \"tone\";\n * const limiter = new Limiter(-20).toDestination();\n * const oscillator = new Oscillator().connect(limiter);\n * oscillator.start();\n */\nexport class Limiter extends ToneAudioNode<LimiterOptions> {\n\n\treadonly name: string = \"Limiter\";\n\n\treadonly input: InputNode;\n\treadonly output: OutputNode;\n\n\t/**\n\t * The compressor which does the limiting\n\t */\n\tprivate _compressor: Compressor;\n\n\treadonly threshold: Param<\"decibels\">\n\n\t/**\n\t * @param threshold The threshold above which the gain reduction is applied.\n\t */\n\tconstructor(threshold?: Decibels);\n\tconstructor(options?: Partial<LimiterOptions>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Limiter.getDefaults(), arguments, [\"threshold\"])));\n\t\tconst options = optionsFromArguments(Limiter.getDefaults(), arguments, [\"threshold\"]);\n\n\t\tthis._compressor = this.input = this.output = new Compressor({\n\t\t\tcontext: this.context,\n\t\t\tratio: 20,\n\t\t\tattack: 0,\n\t\t\trelease: 0,\n\t\t\tthreshold: options.threshold\n\t\t});\n\n\t\tthis.threshold = this._compressor.threshold;\n\t\treadOnly(this, \"threshold\");\n\t}\n\n\tstatic getDefaults(): LimiterOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tthreshold: -12\n\t\t});\n\t}\n\n\t/**\n\t * A read-only decibel value for metering purposes, representing the current amount of gain\n\t * reduction that the compressor is applying to the signal. \n\t */\n\tget reduction(): Decibels {\n\t\treturn this._compressor.reduction;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._compressor.dispose();\n\t\tthis.threshold.dispose();\n\t\treturn this;\n\t}\n}\n","import { InputNode, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Compressor, CompressorOptions } from \"./Compressor\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { MidSideSplit } from \"../channel/MidSideSplit\";\nimport { MidSideMerge } from \"../channel/MidSideMerge\";\nimport { readOnly, RecursivePartial } from \"../../core/util/Interface\";\n\nexport interface MidSideCompressorOptions extends ToneAudioNodeOptions {\n\tmid: Omit<CompressorOptions, keyof ToneAudioNodeOptions>;\n\tside: Omit<CompressorOptions, keyof ToneAudioNodeOptions>;\n}\n\n/**\n * MidSideCompressor applies two different compressors to the [[mid]]\n * and [[side]] signal components of the input. See [[MidSideSplit]] and [[MidSideMerge]].\n */\nexport class MidSideCompressor extends ToneAudioNode<MidSideCompressorOptions> {\n\n\treadonly name: string = \"MidSideCompressor\";\n\n\treadonly input: InputNode;\n\treadonly output: OutputNode;\n\n\t/**\n\t * Split the incoming signal into Mid/Side\n\t */\n\tprivate _midSideSplit: MidSideSplit;\n\n\t/**\n\t * Merge the compressed signal back into a single stream\n\t */\n\tprivate _midSideMerge: MidSideMerge;\n\n\t/**\n\t * The compression applied to the mid signal\n\t */\n\treadonly mid: Compressor;\n\n\t/**\n\t * The compression applied to the side signal\n\t */\n\treadonly side: Compressor;\n\n\tconstructor(options?: RecursivePartial<MidSideCompressorOptions>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(MidSideCompressor.getDefaults(), arguments)));\n\t\tconst options = optionsFromArguments(MidSideCompressor.getDefaults(), arguments);\n\n\t\tthis._midSideSplit = this.input = new MidSideSplit({ context: this.context });\n\t\tthis._midSideMerge = this.output = new MidSideMerge({ context: this.context });\n\t\tthis.mid = new Compressor(Object.assign(options.mid, { context: this.context }));\n\t\tthis.side = new Compressor(Object.assign(options.side, { context: this.context }));\n\n\t\tthis._midSideSplit.mid.chain(this.mid, this._midSideMerge.mid);\n\t\tthis._midSideSplit.side.chain(this.side, this._midSideMerge.side);\n\t\treadOnly(this, [\"mid\", \"side\"]);\n\t}\n\n\tstatic getDefaults(): MidSideCompressorOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmid: {\n\t\t\t\tratio: 3,\n\t\t\t\tthreshold: -24,\n\t\t\t\trelease: 0.03,\n\t\t\t\tattack: 0.02,\n\t\t\t\tknee: 16\n\t\t\t},\n\t\t\tside: {\n\t\t\t\tratio: 6,\n\t\t\t\tthreshold: -30,\n\t\t\t\trelease: 0.25,\n\t\t\t\tattack: 0.03,\n\t\t\t\tknee: 10\n\t\t\t}\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.mid.dispose();\n\t\tthis.side.dispose();\n\t\tthis._midSideSplit.dispose();\n\t\tthis._midSideMerge.dispose();\n\t\treturn this;\n\t}\n}\n","import { InputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Compressor, CompressorOptions } from \"./Compressor\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, RecursivePartial } from \"../../core/util/Interface\";\nimport { Frequency } from \"../../core/type/Units\";\nimport { MultibandSplit } from \"../channel/MultibandSplit\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Gain } from \"../../core/context/Gain\";\n\nexport interface MultibandCompressorOptions extends ToneAudioNodeOptions {\n\tmid: Omit<CompressorOptions, keyof ToneAudioNodeOptions>;\n\tlow: Omit<CompressorOptions, keyof ToneAudioNodeOptions>;\n\thigh: Omit<CompressorOptions, keyof ToneAudioNodeOptions>;\n\tlowFrequency: Frequency;\n\thighFrequency: Frequency;\n}\n\n/**\n * A compressor with separate controls over low/mid/high dynamics. See [[Compressor]] and [[MultibandSplit]]\n *\n * @example\n * import { MultibandCompressor } from \"tone\";\n * const multiband = new MultibandCompressor({\n * \tlowFrequency: 200,\n * \thighFrequency: 1300,\n * \tlow: {\n * \t\tthreshold: -12\n * \t}\n * });\n */\nexport class MultibandCompressor extends ToneAudioNode<MultibandCompressorOptions> {\n\n\treadonly name: string = \"MultibandCompressor\";\n\n\treadonly input: InputNode;\n\treadonly output: ToneAudioNode;\n\n\t/**\n\t * Split the incoming signal into high/mid/low\n\t */\n\tprivate _splitter: MultibandSplit;\n\n\t/**\n\t * low/mid crossover frequency.\n\t */\n\treadonly lowFrequency: Signal<\"frequency\">;\n\n\t/**\n\t * mid/high crossover frequency.\n\t */\n  \treadonly highFrequency: Signal<\"frequency\">;\n\n\t/**\n\t * The compressor applied to the low frequencies\n\t */\n\treadonly low: Compressor;\n\n\t/**\n\t * The compressor applied to the mid frequencies\n\t */\n\treadonly mid: Compressor;\n\n\t/**\n\t * The compressor applied to the high frequencies\n\t */\n\treadonly high: Compressor;\n\t\n\tconstructor(options?: RecursivePartial<MultibandCompressorOptions>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(MultibandCompressor.getDefaults(), arguments)));\n\t\tconst options = optionsFromArguments(MultibandCompressor.getDefaults(), arguments);\n\n\t\tthis._splitter = this.input = new MultibandSplit({\n\t\t\tcontext: this.context,\n\t\t\tlowFrequency: options.lowFrequency,\n\t\t\thighFrequency: options.highFrequency\n\t\t});\n\t\tthis.lowFrequency = this._splitter.lowFrequency;\n\t\tthis.highFrequency = this._splitter.highFrequency;\n\t\tthis.output = new Gain({ context: this.context });\n\t\tthis.low = new Compressor(Object.assign(options.low, { context: this.context }));\n\t\tthis.mid = new Compressor(Object.assign(options.mid, { context: this.context }));\n\t\tthis.high = new Compressor(Object.assign(options.high, { context: this.context }));\n\n\t\t// connect the compressor\n\t\tthis._splitter.low.chain(this.low, this.output);\n\t\tthis._splitter.mid.chain(this.mid, this.output);\n\t\tthis._splitter.high.chain(this.high, this.output);\n\n\t\treadOnly(this, [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n\t}\n\n\tstatic getDefaults(): MultibandCompressorOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tlowFrequency: 250,\n\t\t\thighFrequency: 2000,\n\t\t\tlow: {\n\t\t\t\tratio: 6,\n\t\t\t\tthreshold: -30,\n\t\t\t\trelease: 0.25,\n\t\t\t\tattack: 0.03,\n\t\t\t\tknee: 10\n\t\t\t},\n\t\t\tmid: {\n\t\t\t\tratio: 3,\n\t\t\t\tthreshold: -24,\n\t\t\t\trelease: 0.03,\n\t\t\t\tattack: 0.02,\n\t\t\t\tknee: 16\n\t\t\t},\n\t\t\thigh: {\n\t\t\t\tratio: 3,\n\t\t\t\tthreshold: -24,\n\t\t\t\trelease: 0.03,\n\t\t\t\tattack: 0.02,\n\t\t\t\tknee: 16\n\t\t\t},\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._splitter.dispose();\n\t\tthis.low.dispose();\n\t\tthis.mid.dispose();\n\t\tthis.high.dispose();\n\t\tthis.output.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Decibels, Frequency } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { MultibandSplit } from \"../channel/MultibandSplit\";\n\ninterface EQ3Options extends ToneAudioNodeOptions {\n\tlow: Decibels;\n\tmid: Decibels;\n\thigh: Decibels;\n\tlowFrequency: Frequency;\n\thighFrequency: Frequency;\n}\n\n/**\n * EQ3 provides 3 equalizer bins: Low/Mid/High. \n * @category Component\n */\nexport class EQ3 extends ToneAudioNode<EQ3Options> {\n\n\treadonly name: string = \"EQ3\";\n\n\t/**\n\t * the input\n\t */\n\treadonly input: MultibandSplit;\n\n\t/**\n\t * the output\n\t */\n\treadonly output = new Gain({ context: this.context });\n\n\t/**\n\t * Splits the input into three outputs\n\t */\n\tprivate _multibandSplit: MultibandSplit;\n\n\t/**\n\t * The gain for the lower signals\n\t */\n\tprivate _lowGain: Gain<\"decibels\">;\n\n\t/**\n\t * The gain for the mid signals\n\t */\n\tprivate _midGain: Gain<\"decibels\">;\n\n\t/**\n\t * The gain for the high signals\n\t */\n\tprivate _highGain: Gain<\"decibels\">;\n\n\t/**\n\t * The gain in decibels of the low part\n\t */\n\treadonly low: Param<\"decibels\">;\n\n\t/**\n\t * The gain in decibels of the mid part\n\t */\n\treadonly mid: Param<\"decibels\">;\n\n\t/**\n\t * The gain in decibels of the high part\n\t */\n\treadonly high: Param<\"decibels\">;\n\n\t/**\n\t * The Q value for all of the filters.\n\t */\n\treadonly Q: Signal<\"positive\">;\n\n\t/**\n\t * The low/mid crossover frequency.\n\t */\n\treadonly lowFrequency: Signal<\"frequency\">;\n\n\t/**\n\t * The mid/high crossover frequency.\n\t */\n\treadonly highFrequency: Signal<\"frequency\">;\n\n\tprotected _internalChannels: ToneAudioNode[] = [];\n\n\tconstructor(lowLevel?: Decibels, midLevel?: Decibels, highLevel?: Decibels);\n\tconstructor(options: Partial<EQ3Options>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(EQ3.getDefaults(), arguments, [\"low\", \"mid\", \"high\"]));\n\t\tconst options = optionsFromArguments(EQ3.getDefaults(), arguments, [\"low\", \"mid\", \"high\"]);\n\n\t\tthis.input = this._multibandSplit = new MultibandSplit({\n\t\t\tcontext: this.context,\n\t\t\thighFrequency: options.highFrequency,\n\t\t\tlowFrequency: options.lowFrequency,\n\t\t});\n\n\t\tthis._lowGain = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: options.low,\n\t\t\tunits: \"decibels\",\n\t\t});\n\n\t\tthis._midGain = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: options.mid,\n\t\t\tunits: \"decibels\",\n\t\t});\n\n\t\tthis._highGain = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: options.high,\n\t\t\tunits: \"decibels\",\n\t\t});\n\n\t\tthis.low = this._lowGain.gain;\n\t\tthis.mid = this._midGain.gain;\n\t\tthis.high = this._highGain.gain;\n\t\tthis.Q = this._multibandSplit.Q;\n\t\tthis.lowFrequency = this._multibandSplit.lowFrequency;\n\t\tthis.highFrequency\t= this._multibandSplit.highFrequency;\n\n\t\t// the frequency bands\n\t\tthis._multibandSplit.low.chain(this._lowGain, this.output);\n\t\tthis._multibandSplit.mid.chain(this._midGain, this.output);\n\t\tthis._multibandSplit.high.chain(this._highGain, this.output);\n\n\t\treadOnly(this, [\"low\", \"mid\", \"high\", \"lowFrequency\", \"highFrequency\"]);\n\t\tthis._internalChannels = [this._multibandSplit];\n\t}\n\n\tstatic getDefaults(): EQ3Options {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\thigh: 0,\n\t\t\thighFrequency: 2500,\n\t\t\tlow: 0,\n\t\t\tlowFrequency: 400,\n\t\t\tmid: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\twritable(this, [\"low\", \"mid\", \"high\", \"lowFrequency\", \"highFrequency\"]);\n\t\tthis._multibandSplit.dispose();\n\t\tthis.lowFrequency.dispose();\n\t\tthis.highFrequency.dispose();\n\t\tthis._lowGain.dispose();\n\t\tthis._midGain.dispose();\n\t\tthis._highGain.dispose();\n\t\tthis.low.dispose();\n\t\tthis.mid.dispose();\n\t\tthis.high.dispose();\n\t\tthis.Q.dispose();\n\t\treturn this;\n\t}\n\n}\n","import { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { noOp } from \"../../core/util/Interface\";\n\nexport interface ConvolverOptions extends ToneAudioNodeOptions {\n\tonload: () => void;\n\tnormalize: boolean;\n\turl?: string | AudioBuffer | ToneAudioBuffer;\n}\n\n/**\n * Convolver is a wrapper around the Native Web Audio\n * [ConvolverNode](http://webaudio.github.io/web-audio-api/#the-convolvernode-interface).\n * Convolution is useful for reverb and filter emulation. Read more about convolution reverb on\n * [Wikipedia](https://en.wikipedia.org/wiki/Convolution_reverb).\n *\n * @example\n * import { Convolver } from \"tone\";\n * // initializing the convolver with an impulse response\n * const convolver = new Convolver(\"./path/to/ir.wav\").toDestination();\n * @category Component\n */\nexport class Convolver extends ToneAudioNode<ConvolverOptions> {\n\n\treadonly name: string = \"Convolver\";\n\t\n\t/**\n\t * The native ConvolverNode\n\t */\n\tprivate _convolver: ConvolverNode = this.context.createConvolver();\n\n\t/**\n\t * The Buffer belonging to the convolver\n\t */\n\tprivate _buffer: ToneAudioBuffer;\n\n\treadonly input: Gain;\n\treadonly output: Gain;\n\n\t/**\n\t * @param url The URL of the impulse response or the ToneAudioBuffer containing the impulse response.\n\t * @param onload The callback to invoke when the url is loaded.\n\t */\n\tconstructor(url?: string | AudioBuffer | ToneAudioBuffer, onload?: () => void);\n\tconstructor(options?: Partial<ConvolverOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Convolver.getDefaults(), arguments, [\"url\", \"onload\"]));\n\t\tconst options = optionsFromArguments(Convolver.getDefaults(), arguments, [\"url\", \"onload\"]);\n\n\t\tthis._buffer = new ToneAudioBuffer(options.url, buffer => {\n\t\t\tthis.buffer = buffer;\n\t\t\toptions.onload();\n\t\t});\n\n\t\tthis.input = new Gain({ context: this.context });\n\t\tthis.output = new Gain({ context: this.context });\n\n\t\t// set if it's already loaded, set it immediately\n\t\tif (this._buffer.loaded) {\n\t\t\tthis.buffer = this._buffer;\n\t\t}\n\n\t\t// initially set normalization\n\t\tthis.normalize = options.normalize;\n\n\t\t// connect it up\n\t\tthis.input.chain(this._convolver, this.output);\n\t}\n\n\tstatic getDefaults(): ConvolverOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tnormalize: true,\n\t\t\tonload: noOp,\n\t\t});\n\t}\n\n\t/**\n\t * Load an impulse response url as an audio buffer.\n\t * Decodes the audio asynchronously and invokes\n\t * the callback once the audio buffer loads.\n\t * @param url The url of the buffer to load. filetype support depends on the browser.\n\t */\n\tasync load(url: string): Promise<void> {\n\t\tthis.buffer = await this._buffer.load(url);\n\t}\n\n\t/**\n\t * The convolver's buffer\n\t */\n\tget buffer(): ToneAudioBuffer | null {\n\t\tif (this._buffer.length) {\n\t\t\treturn this._buffer;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\tset buffer(buffer) {\n\t\tif (buffer) {\n\t\t\tthis._buffer.set(buffer);\n\t\t}\n\t\t// if it's already got a buffer, create a new one\n\t\tif (this._convolver.buffer) {\n\t\t\t// disconnect the old one\n\t\t\tthis.input.disconnect();\n\t\t\tthis._convolver.disconnect();\n\t\t\t// create and connect a new one\n\t\t\tthis._convolver = this.context.createConvolver();\n\t\t\tthis.input.chain(this._convolver, this.output);\n\t\t}\n\t\tconst buff = this._buffer.get();\n\t\tthis._convolver.buffer = buff ? buff : null;\n\t}\n\n\t/**\n\t * The normalize property of the ConvolverNode interface is a boolean that\n\t * controls whether the impulse response from the buffer will be scaled by\n\t * an equal-power normalization when the buffer attribute is set, or not.\n\t */\n\tget normalize(): boolean {\n\t\treturn this._convolver.normalize;\n\t}\n\tset normalize(norm) {\n\t\tthis._convolver.normalize = norm;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._buffer.dispose();\n\t\tthis._convolver.disconnect();\n\t\treturn this;\n\t}\n}\n","export { getContext, setContext } from \"./core/Global\";\nexport * from \"./classes\";\nexport * from \"./version\";\nimport { getContext } from \"./core/Global\";\nimport { ToneAudioBuffer } from \"./core/context/ToneAudioBuffer\";\nexport { start } from \"./core/Global\";\nimport { Seconds } from \"./core/type/Units\";\n\n/**\n * The current audio context time of the global [[Context]]. \n * See [[Context.now]]\n * @category Core\n */\nexport const now: () => Seconds = getContext().now.bind(getContext());\n\n/**\n * The current audio context time of the global [[Context]] without the [[Context.lookAhead]]\n * See [[Context.immediate]]\n * @category Core\n */\nexport const immediate: () => Seconds = getContext().immediate.bind(getContext());\n\n/**\n * The Transport object belonging to the global Tone.js Context.\n * See [[Transport]]\n * @category Core\n */\nexport const Transport = getContext().transport;\n\n/**\n * The Destination (output) belonging to the global Tone.js Context.\n * See [[Destination]]\n * @category Core\n */\nexport const Destination = getContext().destination;\n\n/**\n * The [[Listener]] belonging to the global Tone.js Context.\n * @category Core\n */\nexport const Listener = getContext().listener;\n\n/**\n * Draw is used to synchronize the draw frame with the Transport's callbacks. \n * See [[Draw]]\n * @category Core\n */\nexport const Draw = getContext().draw;\n\n/**\n * A reference to the global context\n * See [[Context]]\n * @category Core\n */\nexport const context = getContext();\n\n/**\n * Promise which resolves when all of the loading promises are resolved. \n * Alias for static [[ToneAudioBuffer.loaded]] method.\n * @category Core\n */\nexport const loaded = ToneAudioBuffer.loaded.bind(ToneAudioBuffer);\n\n// this fills in name changes from 13.x to 14.x\nimport { ToneAudioBuffers } from \"./core/context/ToneAudioBuffers\";\nimport { ToneBufferSource } from \"./source/buffer/ToneBufferSource\";\nexport const Buffer: typeof ToneAudioBuffer = ToneAudioBuffer;\nexport const Buffers: typeof ToneAudioBuffers = ToneAudioBuffers;\nexport const BufferSource: typeof ToneBufferSource = ToneBufferSource;\n"],"sourceRoot":""}