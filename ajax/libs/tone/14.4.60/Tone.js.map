{"version":3,"sources":["webpack://Tone/webpack/universalModuleDefinition","webpack://Tone/webpack/bootstrap","webpack://Tone/./node_modules/automation-events/build/es5/bundle.js","webpack://Tone/./node_modules/@babel/runtime/helpers/slicedToArray.js","webpack://Tone/./node_modules/@babel/runtime/helpers/arrayWithHoles.js","webpack://Tone/./node_modules/@babel/runtime/helpers/iterableToArrayLimit.js","webpack://Tone/./node_modules/@babel/runtime/helpers/nonIterableRest.js","webpack://Tone/./node_modules/@babel/runtime/helpers/classCallCheck.js","webpack://Tone/./node_modules/@babel/runtime/helpers/createClass.js","webpack://Tone/./Tone/version.ts","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/abort-error.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/globals.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/invalid-state-error.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/get-native-context.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/is-constructible.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/split-import-statements.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/add-audio-worklet-module.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/analyser-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/get-value-for-key.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/get-native-audio-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/is-owned-by-context.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/get-audio-graph.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/get-audio-node-connections.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/get-audio-node-renderer.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/render-inputs-of-audio-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/test-audio-buffer-copy-channel-methods-subarray-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/index-size-error.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/wrap-audio-buffer-get-channel-data-method.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/audio-buffer-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/get-event-listeners-of-audio-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/set-internal-state.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/wrap-event-listener.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/audio-buffer-source-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/get-native-audio-param.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/get-audio-param-connections.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/render-inputs-of-audio-param.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/connect-audio-param.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/render-automation.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/get-audio-param-renderer.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/is-valid-latency-hint.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/event-target.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/guards/audio-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/guards/audio-node-output-connection.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/guards/audio-worklet-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/connect-native-audio-node-to-native-audio-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/delete-event-listeners-of-audio-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/disconnect-native-audio-node-from-native-audio-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/insert-element-in-set.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/is-active-audio-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/is-passive-audio-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/pick-element-from-set.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/set-internal-state-to-passive-when-necessary.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/test-audio-node-disconnect-method-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/guards/native-audio-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/audio-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/read-only-map.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/audio-worklet-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/copy-from-channel.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/copy-to-channel.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/create-nested-arrays.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/audio-worklet-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/get-audio-worklet-processor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/biquad-filter-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/channel-merger-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/channel-splitter-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/constant-source-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/convolver-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/delay-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/disconnect-multiple-outputs.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/dynamics-compressor-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/gain-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/invalid-access-error.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/iir-filter-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/filter-buffer.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/test-promise-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/minimal-offline-audio-context-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/assign-native-audio-node-option.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/assign-native-audio-node-options.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/test-analyser-node-get-float-time-domain-data-method-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/assign-native-audio-node-audio-param-value.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/compute-buffer-size.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/create-audio-worklet-processor-promise.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/clone-audio-worklet-node-options.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/intercept-connections.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-iir-filter-node-faker-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/not-supported-error.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/offline-audio-context-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/oscillator-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/panner-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/periodic-wave-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/stereo-panner-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/unknown-error.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/wave-shaper-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/module.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/cache-test-result.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/window.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-offline-audio-context-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/is-native-offline-audio-context.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-audio-context-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/get-backup-native-context.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-audio-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-analyser-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/wrap-analyser-node-get-float-time-domain-data-method.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/analyser-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/is-native-audio-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/is-native-audio-param.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/wrap-audio-node-disconnect-method.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/detect-cycles.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/guards/delay-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/none-audio-destination-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-audio-buffer-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/convert-number-to-unsigned-long.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/wrap-audio-buffer-copy-channel-methods.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/wrap-audio-buffer-copy-channel-methods-out-of-bounds.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/wrap-audio-buffer-copy-channel-methods-subarray.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/test-audio-buffer-constructor-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/test-audio-scheduled-source-node-start-method-negative-parameters-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/test-audio-scheduled-source-node-stop-method-consecutive-calls-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/test-audio-scheduled-source-node-stop-method-negative-parameters-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/wrap-audio-scheduled-source-node-stop-method-consecutive-calls.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-audio-buffer-source-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/wrap-audio-buffer-source-node-start-method-consecutive-calls.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/wrap-audio-buffer-source-node-start-method-duration-parameter.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/test-audio-buffer-source-node-start-method-consecutive-calls-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/test-audio-buffer-source-node-start-method-duration-parameter-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/test-audio-buffer-source-node-start-method-offset-clamping-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/wrap-audio-buffer-source-node-start-method-offset-clamping.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/audio-buffer-source-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/audio-param-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/audio-param-renderer.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/constants.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/audio-destination-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/audio-destination-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-audio-destination-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-biquad-filter-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/biquad-filter-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/wrap-channel-merger-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-channel-merger-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/channel-merger-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-channel-splitter-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/wrap-channel-splitter-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/channel-splitter-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-gain-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-constant-source-node-faker-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-constant-source-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/constant-source-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-convolver-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/convolver-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-delay-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/delay-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-dynamics-compressor-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/dynamics-compressor-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/gain-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-script-processor-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/render-native-offline-audio-context.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/test-offline-audio-context-current-time-support.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/iir-filter-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/wrap-iir-filter-node-get-frequency-response-method.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-iir-filter-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/minimal-base-audio-context-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/audio-listener-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-oscillator-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/oscillator-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-wave-shaper-node-faker-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-wave-shaper-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-panner-node-faker-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-panner-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/panner-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-periodic-wave-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-stereo-panner-node-faker-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-stereo-panner-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/stereo-panner-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/wave-shaper-node-renderer-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/is-secure-context.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/expose-current-frame-and-current-time.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/evaluate-source.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/fetch-source.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/is-native-audio-context.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/is-native-context.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/base-audio-context-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/decode-audio-data.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/detach-array-buffer.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/data-clone-error.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/encoding-error.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/media-element-audio-source-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-media-element-audio-source-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/media-stream-audio-source-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-media-stream-audio-source-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/media-stream-track-audio-source-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-media-stream-track-audio-source-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/audio-context-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/connect-multiple-outputs.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-audio-worklet-node-faker-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/create-audio-worklet-processor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-audio-worklet-node-factory.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/helpers/test-clonability-of-audio-worklet-node-options.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/native-audio-worklet-node-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/minimal-audio-context-constructor.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/create-native-offline-audio-context.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/start-rendering.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/is-any-audio-context.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/is-any-audio-node.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/is-any-audio-param.js","webpack://Tone/./node_modules/standardized-audio-context/build/es2018/factories/is-any-offline-audio-context.js","webpack://Tone/./Tone/core/util/Debug.ts","webpack://Tone/./Tone/core/util/TypeCheck.ts","webpack://Tone/./Tone/core/context/AudioContext.ts","webpack://Tone/./Tone/core/clock/Ticker.ts","webpack://Tone/./Tone/core/util/AdvancedTypeCheck.ts","webpack://Tone/./Tone/core/util/Defaults.ts","webpack://Tone/./Tone/core/Tone.ts","webpack://Tone/./Tone/core/util/Math.ts","webpack://Tone/./Tone/core/util/Timeline.ts","webpack://Tone/./Tone/core/context/ContextInitialization.ts","webpack://Tone/./Tone/core/util/Emitter.ts","webpack://Tone/./Tone/core/context/BaseContext.ts","webpack://Tone/./Tone/core/context/Context.ts","webpack://Tone/./Tone/core/context/DummyContext.ts","webpack://Tone/./Tone/core/util/Interface.ts","webpack://Tone/./Tone/core/context/ToneAudioBuffer.ts","webpack://Tone/./Tone/core/context/OfflineContext.ts","webpack://Tone/./Tone/core/Global.ts","webpack://Tone/./Tone/core/type/Conversions.ts","webpack://Tone/./Tone/core/type/TimeBase.ts","webpack://Tone/./Tone/core/type/Time.ts","webpack://Tone/./Tone/core/type/Frequency.ts","webpack://Tone/./Tone/core/type/TransportTime.ts","webpack://Tone/./Tone/core/context/ToneWithContext.ts","webpack://Tone/./Tone/core/context/Param.ts","webpack://Tone/./Tone/core/context/ToneAudioNode.ts","webpack://Tone/./Tone/core/context/Gain.ts","webpack://Tone/./Tone/component/channel/Volume.ts","webpack://Tone/./Tone/core/context/Destination.ts","webpack://Tone/./Tone/core/context/Delay.ts","webpack://Tone/./Tone/core/context/Offline.ts","webpack://Tone/./Tone/core/context/ToneAudioBuffers.ts","webpack://Tone/./Tone/core/util/StateTimeline.ts","webpack://Tone/./Tone/source/OneShotSource.ts","webpack://Tone/./Tone/signal/ToneConstantSource.ts","webpack://Tone/./Tone/signal/Signal.ts","webpack://Tone/./Tone/core/clock/TickParam.ts","webpack://Tone/./Tone/core/clock/TickSignal.ts","webpack://Tone/./Tone/core/clock/TickSource.ts","webpack://Tone/./Tone/core/clock/Clock.ts","webpack://Tone/./Tone/core/util/TimelineValue.ts","webpack://Tone/./Tone/core/type/Ticks.ts","webpack://Tone/./Tone/core/util/IntervalTimeline.ts","webpack://Tone/./Tone/core/clock/TransportEvent.ts","webpack://Tone/./Tone/core/clock/TransportRepeatEvent.ts","webpack://Tone/./Tone/core/clock/Transport.ts","webpack://Tone/./Tone/core/type/Midi.ts","webpack://Tone/./Tone/core/util/Draw.ts","webpack://Tone/./Tone/source/Source.ts","webpack://Tone/./Tone/source/buffer/ToneBufferSource.ts","webpack://Tone/./Tone/source/Noise.ts","webpack://Tone/./Tone/component/analysis/Analyser.ts","webpack://Tone/./Tone/component/analysis/MeterBase.ts","webpack://Tone/./Tone/component/analysis/Meter.ts","webpack://Tone/./Tone/component/analysis/FFT.ts","webpack://Tone/./Tone/component/analysis/DCMeter.ts","webpack://Tone/./Tone/component/analysis/Waveform.ts","webpack://Tone/./Tone/component/filter/OnePoleFilter.ts","webpack://Tone/./Tone/signal/SignalOperator.ts","webpack://Tone/./Tone/signal/WaveShaper.ts","webpack://Tone/./Tone/signal/Abs.ts","webpack://Tone/./Tone/component/analysis/Follower.ts","webpack://Tone/./Tone/component/channel/Solo.ts","webpack://Tone/./Tone/component/channel/Panner.ts","webpack://Tone/./Tone/component/channel/PanVol.ts","webpack://Tone/./Tone/component/channel/Channel.ts","webpack://Tone/./Tone/signal/GainToAudio.ts","webpack://Tone/./Tone/component/channel/CrossFade.ts","webpack://Tone/./Tone/component/channel/Merge.ts","webpack://Tone/./Tone/signal/Add.ts","webpack://Tone/./Tone/signal/Multiply.ts","webpack://Tone/./Tone/signal/Negate.ts","webpack://Tone/./Tone/signal/Subtract.ts","webpack://Tone/./Tone/component/channel/MidSideMerge.ts","webpack://Tone/./Tone/component/channel/Split.ts","webpack://Tone/./Tone/component/channel/MidSideSplit.ts","webpack://Tone/./Tone/component/filter/Filter.ts","webpack://Tone/./Tone/component/channel/MultibandSplit.ts","webpack://Tone/./Tone/component/dynamics/Compressor.ts","webpack://Tone/./Tone/component/envelope/Envelope.ts","webpack://Tone/./Tone/component/envelope/AmplitudeEnvelope.ts","webpack://Tone/./Tone/signal/Scale.ts","webpack://Tone/./Tone/signal/Pow.ts","webpack://Tone/./Tone/component/envelope/FrequencyEnvelope.ts","webpack://Tone/./Tone/component/filter/EQ3.ts","webpack://Tone/./Tone/core/context/ToneAudioWorklet.ts","webpack://Tone/./Tone/component/filter/FeedbackCombFilter.ts","webpack://Tone/./Tone/component/filter/LowpassCombFilter.ts","webpack://Tone/./Tone/component/filter/Convolver.ts","webpack://Tone/./Tone/source/UserMedia.ts","webpack://Tone/./Tone/source/oscillator/OscillatorInterface.ts","webpack://Tone/./Tone/source/oscillator/ToneOscillatorNode.ts","webpack://Tone/./Tone/source/oscillator/Oscillator.ts","webpack://Tone/./Tone/signal/AudioToGain.ts","webpack://Tone/./Tone/source/oscillator/AMOscillator.ts","webpack://Tone/./Tone/source/oscillator/FMOscillator.ts","webpack://Tone/./Tone/source/oscillator/PulseOscillator.ts","webpack://Tone/./Tone/source/oscillator/FatOscillator.ts","webpack://Tone/./Tone/source/oscillator/PWMOscillator.ts","webpack://Tone/./Tone/source/oscillator/OmniOscillator.ts","webpack://Tone/./Tone/signal/Zero.ts","webpack://Tone/./Tone/source/oscillator/LFO.ts","webpack://Tone/./Tone/source/buffer/Player.ts","webpack://Tone/./Tone/source/buffer/Players.ts","webpack://Tone/./Tone/source/buffer/GrainPlayer.ts","webpack://Tone/./Tone/signal/ScaleExp.ts","webpack://Tone/./Tone/instrument/Instrument.ts","webpack://Tone/./Tone/instrument/Monophonic.ts","webpack://Tone/./Tone/instrument/Synth.ts","webpack://Tone/./Tone/instrument/ModulationSynth.ts","webpack://Tone/./Tone/instrument/AMSynth.ts","webpack://Tone/./Tone/instrument/MonoSynth.ts","webpack://Tone/./Tone/instrument/DuoSynth.ts","webpack://Tone/./Tone/instrument/FMSynth.ts","webpack://Tone/./Tone/instrument/MetalSynth.ts","webpack://Tone/./Tone/instrument/MembraneSynth.ts","webpack://Tone/./Tone/instrument/NoiseSynth.ts","webpack://Tone/./Tone/instrument/PluckSynth.ts","webpack://Tone/./Tone/instrument/PolySynth.ts","webpack://Tone/./Tone/instrument/Sampler.ts","webpack://Tone/./Tone/event/ToneEvent.ts","webpack://Tone/./Tone/event/Loop.ts","webpack://Tone/./Tone/event/Part.ts","webpack://Tone/./Tone/event/PatternGenerator.ts","webpack://Tone/./Tone/event/Pattern.ts","webpack://Tone/./Tone/event/Sequence.ts","webpack://Tone/./Tone/effect/Effect.ts","webpack://Tone/./Tone/effect/LFOEffect.ts","webpack://Tone/./Tone/effect/AutoFilter.ts","webpack://Tone/./Tone/effect/AutoPanner.ts","webpack://Tone/./Tone/effect/AutoWah.ts","webpack://Tone/./Tone/effect/BitCrusher.ts","webpack://Tone/./Tone/effect/Chebyshev.ts","webpack://Tone/./Tone/effect/StereoEffect.ts","webpack://Tone/./Tone/effect/Chorus.ts","webpack://Tone/./Tone/effect/Distortion.ts","webpack://Tone/./Tone/effect/FeedbackEffect.ts","webpack://Tone/./Tone/effect/FeedbackDelay.ts","webpack://Tone/./Tone/component/filter/PhaseShiftAllpass.ts","webpack://Tone/./Tone/effect/FrequencyShifter.ts","webpack://Tone/./Tone/effect/Freeverb.ts","webpack://Tone/./Tone/effect/JCReverb.ts","webpack://Tone/./Tone/effect/StereoFeedbackEffect.ts","webpack://Tone/./Tone/effect/StereoXFeedbackEffect.ts","webpack://Tone/./Tone/effect/PingPongDelay.ts","webpack://Tone/./Tone/effect/PitchShift.ts","webpack://Tone/./Tone/effect/Phaser.ts","webpack://Tone/./Tone/effect/Reverb.ts","webpack://Tone/./Tone/effect/MidSideEffect.ts","webpack://Tone/./Tone/effect/StereoWidener.ts","webpack://Tone/./Tone/effect/Tremolo.ts","webpack://Tone/./Tone/effect/Vibrato.ts","webpack://Tone/./Tone/index.ts"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","_slicedToArray","_classCallCheck","_createClass","createExtendedExponentialRampToValueAutomationEvent","endTime","insertTime","type","createExtendedLinearRampToValueAutomationEvent","createSetValueAutomationEvent","startTime","createSetValueCurveAutomationEvent","values","duration","getTargetValueAtTime","time","valueAtStartTime","_ref","target","timeConstant","Math","exp","isExponentialRampToValueAutomationEvent","automationEvent","isLinearRampToValueAutomationEvent","isAnyRampToValueAutomationEvent","isSetValueAutomationEvent","isSetValueCurveAutomationEvent","getValueOfAutomationEventAtIndexAtTime","automationEvents","index","defaultValue","undefined","length","getEndTimeAndValueOfPreviousAutomationEvent","currentAutomationEvent","nextAutomationEvent","isCancelAndHoldAutomationEvent","isCancelScheduledValuesAutomationEvent","getEventTime","cancelTime","getExponentialRampValueAtTime","pow","getLinearRampValueAtTime","getValueCurveValueAtTime","theoreticIndex","lowerIndex","floor","upperIndex","ceil","interpolateValue","isSetTargetAutomationEvent","AutomationEventList","_automationEvents","_currenTime","_defaultValue","iterator","eventTime","findIndex","removedAutomationEvent","slice","lastAutomationEvent","Error","startValue","truncatedAutomationEvent","push","getValue","Float32Array","_index","previousAutomationEvent","persistentAutomationEvent","splice","remainingAutomationEvents","firstRemainingAutomationEvent","unshift","_getEndTimeAndValueOf","_getEndTimeAndValueOf2","_getEndTimeAndValueOf3","_getEndTimeAndValueOf4","_startTime","_value","createCancelAndHoldAutomationEvent","createCancelScheduledValuesAutomationEvent","createExponentialRampToValueAutomationEvent","createLinearRampToValueAutomationEvent","createSetTargetAutomationEvent","arrayWithHoles","iterableToArrayLimit","nonIterableRest","arr","Array","isArray","toString","_arr","_n","_d","_e","_s","_i","next","done","err","TypeError","instance","Constructor","_defineProperties","props","descriptor","configurable","writable","protoProps","staticProps","DOMException","code","ACTIVE_AUDIO_NODE_STORE","WeakSet","AUDIO_BUFFER_STORE","AUDIO_NODE_STORE","WeakMap","AUDIO_GRAPHS","AUDIO_PARAM_STORE","AUDIO_PARAM_AUDIO_NODE_STORE","AUXILIARY_GAIN_NODE_STORE","BACKUP_NATIVE_CONTEXT_STORE","CONTEXT_STORE","DETACHED_ARRAY_BUFFERS","EVENT_LISTENERS","NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS","NODE_TO_PROCESSOR_MAPS","PERIODIC_WAVE_STORE","TEST_RESULTS","getNativeContext","context","nativeContext","handler","construct","IMPORT_STATEMENT_REGEX","splitImportStatements","source","url","importStatements","sourceWithoutImportStatements","replace","result","match","unresolvedUrl","importStatementWithResolvedUrl","URL","join","verifyParameterDescriptors","parameterDescriptors","verifyProcessorCtor","processorCtor","constructible","Proxy","_a","isConstructible","process","DEFAULT_OPTIONS","channelCount","channelCountMode","channelInterpretation","fftSize","maxDecibels","minDecibels","smoothingTimeConstant","map","getNativeAudioNode","audioNode","isOwnedByContext","nativeAudioNode","getAudioGraph","audioGraph","nodes","getAudioNodeRenderer","audioNodeConnections","renderer","renderInputsOfAudioNode","nativeOfflineAudioContext","Promise","all","activeInputs","connections","input","from","output","render","then","node","connect","reduce","allRenderingPromises","renderingPromises","nativeAudioBuffer","copyToChannel","copyFromChannel","wrapAudioBufferGetChannelDataMethod","audioBuffer","getChannelData","channel","numberOfChannels","getEventListenersOfAudioNode","setInternalState","internalState","has","add","delete","forEach","eventListener","wrapEventListener","event","defineProperties","currentTarget","buffer","loop","loopEnd","loopStart","playbackRate","getNativeAudioParam","audioParam","getAudioParamConnections","params","renderInputsOfAudioParam","nativeAudioParam","audioParamConnections","connectAudioParam","renderAutomation","getAudioParamRenderer","replay","isValidLatencyHint","latencyHint","_nativeEventTarget","_listeners","listener","options","wrappedEventListener","set","addEventListener","dispatchEvent","removeEventListener","isAudioNode","audioNodeOrAudioParam","isAudioNodeOutputConnection","outputConnection","isAudioWorkletNode","connectNativeAudioNodeToNativeAudioNode","nativeSourceAudioNode","nativeDestinationAudioNode","inputs","deleteEventListenerOfAudioNode","disconnectNativeAudioNodeFromNativeAudioNode","disconnect","insertElementInSet","element","predicate","ignoreDuplicates","lmnt","isActiveAudioNode","isPassiveAudioNode","pickElementFromSet","matchingElements","filter","matchingElement","setInternalStateToPassiveWhenNecessary","every","size","testAudioNodeDisconnectMethodSupport","nativeAudioContext","resolve","analyzer","createScriptProcessor","dummy","createGain","ones","createBuffer","channelData","createBufferSource","destination","onaudioprocess","chnnlDt","inputBuffer","some","sample","stop","start","nativeAudioNodeOrAudioParam","addActiveInputConnectionToAudioNode","activeInputConnection","addActiveInputConnectionToAudioParam","addPassiveInputConnectionToAudioNode","passiveInputs","passiveInputConnections","Set","passiveInputConnection","addPassiveInputConnectionToAudioParam","deletePassiveInputConnectionToAudioNode","matchingConnection","deletePassiveInputConnectionToAudioParam","addConnectionToAudioNodeOfAudioContext","outputs","eventListeners","partialConnection","deleteActiveInputConnectionToAudioNode","addConnectionToAudioParamOfAudioContext","deleteActiveInputConnectionToAudioParam","deleteActiveInputConnection","activeInputConnections","deleteInputsOfAudioNode","deleteInputConnectionOfAudioNode","deleteInputsOfAudioParam","deleteInputConnectionOfAudioParam","ReadOnlyMap","parameters","_map","Map","entries","callback","thisArg","keys","numberOfInputs","numberOfOutputs","outputChannelCount","parameterData","processorOptions","createChannelCount","parent","channelNumber","bufferOffset","byteLength","slicedInput","BYTES_PER_ELEMENT","createNestedArrays","x","y","arrays","array","j","processBuffer","async","proxy","renderedBuffer","processorConstructor","numberOfInputChannels","numberOfOutputChannels","sum","processedBuffer","sampleRate","audioWorkletProcessor","nodeToProcessorMap","nativeAudioWorkletNode","getAudioWorkletProcessor","prmtrs","k","potentiallyEmptyInputs","activeSourceFlag","outputChannelSplitterNodeOutput","error","ErrorEvent","Q","detune","frequency","gain","offset","disableNormalization","delayTime","maxDelayTime","getOutputAudioNodeAtIndex","createIndexSizeError","outputAudioNodes","outputAudioNode","attack","knee","ratio","release","threshold","filterBuffer","feedback","feedbackLength","feedforward","feedforwardLength","minLength","xBuffer","yBuffer","bufferIndex","bufferLength","inputLength","uint32Array","Uint32Array","promise","decodeAudioData","catch","assignNativeAudioNodeOption","option","assignNativeAudioNodeOptions","testAnalyserNodeGetFloatTimeDomainDataMethodSupport","nativeAnalyserNode","getFloatTimeDomainData","assignNativeAudioNodeAudioParamValue","wrapAudioScheduledSourceNodeStartMethodNegativeParameters","nativeAudioScheduledSourceNode","when","RangeError","wrapAudioScheduledSourceNodeStopMethodNegativeParameters","computeBufferSize","baseLatency","max","min","round","log2","createAudioWorkletProcessorPromise","audioWorkletNodeOptions","reject","port1","port2","MessageChannel","onmessage","data","close","onmessageerror","postMessage","cloneAudioWorkletNodeOptions","interceptConnections","original","interceptor","apply","arguments","divide","a","b","denominator","evaluatePolynomial","coefficient","z","coneInnerAngle","coneOuterAngle","coneOuterGain","distanceModel","maxDistance","orientationX","orientationY","orientationZ","panningModel","positionX","positionY","positionZ","refDistance","rolloffFactor","pan","curve","oversample","ongoingTests","tester","test","cachedTestResult","ongoingTest","synchronousTestResult","finalTestResult","createCacheTestResult","window","createWindow","OfflineAudioContext","webkitOfflineAudioContext","createNativeOfflineAudioContextConstructor","nativeOfflineAudioContextConstructor","anything","createIsNativeOfflineAudioContext","AudioContext","webkitAudioContext","createNativeAudioContextConstructor","isNativeOfflineAudioContext","nativeAudioContextConstructor","state","backupNativeContext","bckpNtveCntxt","createGetBackupNativeContext","getBackupNativeContext","factoryFunction","createNativeAudioNodeFactory","cacheTestResult","createNativeAudioNode","ntvCntxt","createAnalyser","byteTimeDomainData","Uint8Array","getByteTimeDomainData","wrapAnalyserNodeGetFloatTimeDomainDataMethod","createNativeAnalyserNodeFactory","createNativeAnalyserNode","renderedNativeAnalyserNodes","renderedNativeAnalyserNode","createAnalyserNode","createAnalyserNodeRendererFactory","AudioNode","createIsNativeAudioNode","AudioParam","createIsNativeAudioParam","createInvalidAccessError","createNotSupportedError","detectCycles","isNativeAudioNode","isNativeAudioParam","audioNodeRenderer","super","_context","_nativeAudioNode","returnValue","connectionsToDestination","connection","destinationOrOutput","clear","filteredConnections","wrapAudioNodeDisconnectMethod","audioNoderRender","addAudioNode","isOffline","auxiliaryGainNodes","nativeGainNode","addConnectionToAudioNodeOfOfflineAudioContext","addConnectionToAudioParamOfOfflineAudioContext","audioNodeConnectionsOfSource","deleteAnyConnection","deleteConnectionAtOutput","numberOfDeletedConnections","deleteConnectionToDestination","createAudioNodeConstructor","audioParamAudioNodeStore","getAudioNodeConnections","getValueForKey","audioNodeOfDestination","isDelayNode","createDetectCycles","audioNodeConstructor","createNoneAudioDestinationNodeConstructor","analyserNodeConstructor","createAnalyserNodeRenderer","noneAudioDestinationNodeConstructor","mergedOptions","_nativeAnalyserNode","frequencyBinCount","getByteFrequencyData","getFloatFrequencyData","createAnalyserNodeConstructor","AudioBuffer","createNativeAudioBufferConstructor","convertNumberToUnsignedLong","unit32Array","createConvertNumberToUnsignedLong","channelNumberAsNumber","bufferOffsetAsNumber","audioBufferLength","destinationLength","sourceLength","createWrapAudioBufferCopyChannelMethods","createWrapAudioBufferCopyChannelMethodsOutOfBounds","subarray","createWrapAudioBufferCopyChannelMethodsSubarray","audioBufferConstructor","audioBufferStore","nativeAudioBufferConstructor","testNativeAudioBufferConstructorSupport","wrapAudioBufferCopyChannelMethods","wrapAudioBufferCopyChannelMethodsOutOfBounds","wrapAudioBufferCopyChannelMethodsSubarray","hasInstance","getPrototypeOf","createAudioBufferConstructor","createTestAudioBufferConstructorSupport","nativeAudioBufferSourceNode","createOscillator","createTestAudioScheduledSourceNodeStartMethodNegativeParametersSupport","createTestAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport","createTestAudioScheduledSourceNodeStopMethodNegativeParametersSupport","disconnectGainNode","isStopped","setValueAtTime","createWrapAudioScheduledSourceNodeStopMethodConsecutiveCalls","testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport","testAudioBufferSourceNodeStartMethodDurationParameterSupport","testAudioBufferSourceNodeStartMethodOffsetClampingSupport","testAudioScheduledSourceNodeStartMethodNegativeParametersSupport","testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport","testAudioScheduledSourceNodeStopMethodNegativeParametersSupport","wrapAudioBufferSourceNodeStartMethodOffsetClampling","wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls","isScheduled","wrapAudioBufferSourceNodeStartMethodConsecutiveCalls","Number","POSITIVE_INFINITY","stopTime","actualStartTime","currentTime","durationInBufferTime","wrapAudioBufferSourceNodeStartMethodDurationParameter","createNativeAudioBufferSourceNodeFactory","createTestAudioBufferSourceNodeStartMethodConsecutiveCallsSupport","offlineAudioContext","audioBufferSourceNode","oncomplete","startRendering","createTestAudioBufferSourceNodeStartMethodDurationParameterSupport","createTestAudioBufferSourceNodeStartMethodOffsetClampingSupport","clampedOffset","createNativeAudioBufferSourceNode","renderedNativeAudioBufferSourceNodes","renderedNativeAudioBufferSourceNode","nativeAudioBufferSourceNodeIsOwnedByContext","createAudioBufferSourceNode","createAudioBufferSourceNodeRendererFactory","createAudioParamRenderer","isAudioParamOfOfflineAudioContext","maxValue","minValue","automationEventList","audioParamRenderer","cancelAndHoldAtTime","flush","previousLastEvent","pop","currentLastEvent","cancelScheduledValues","exponentialRampToValueAtTime","linearRampToValueAtTime","setValueCurveAtTime","setTargetAtTime","firstSample","lastSample","numberOfInterpolatedValues","interpolatedValues","timeOfLastSample","addAudioParam","createAudioParamFactory","audioBufferSourceNodeConstructor","createAudioBufferSourceNodeRenderer","createAudioParam","createInvalidStateError","audioBufferSourceNodeRenderer","_audioBufferSourceNodeRenderer","_isBufferNullified","_isBufferSet","_nativeAudioBufferSourceNode","_onended","_playbackRate","fill","wrappedListener","onended","nativeOnEnded","setInternalStateToInactive","setTimeout","createAudioBufferSourceNodeConstructor","createAudioDestinationNodeRenderer","createNativeAudioDestinationNode","nativeAudioDestinationNode","audioDestinationNodeRenderer","audioWorkletGlobalScope","_isNodeOfNativeOfflineAudioContext","_nativeAudioDestinationNode","maxChannelCount","createAudioDestinationNodeConstructor","nativeAudioDestinationNodePromise","createAudioDestinationNode","isNodeOfNativeOfflineAudioContext","nativeBiquadFilterNode","createBiquadFilter","createNativeBiquadFilterNodeFactory","biquadFilterNodeConstructor","createBiquadFilterNodeRenderer","createNativeBiquadFilterNode","_Q","_detune","_frequency","_gain","_nativeBiquadFilterNode","frequencyHz","magResponse","phaseResponse","getFrequencyResponse","createBiquadFilterNodeConstructor","renderedNativeBiquadFilterNodes","renderedNativeBiquadFilterNode","nativeBiquadFilterNodeIsOwnedByContext","createBiquadFilterNode","createBiquadFilterNodeRendererFactory","channelMergerNode","createWrapChannelMergerNode","wrapChannelMergerNode","nativeChannelMergerNode","createChannelMerger","createNativeChannelMergerNodeFactory","channelMergerNodeConstructor","createChannelMergerNodeRenderer","createNativeChannelMergerNode","createChannelMergerNodeConstructor","renderedNativeAudioNodes","renderedNativeAudioNode","createAudioNode","createChannelMergerNodeRendererFactory","nativeChannelSplitterNode","createChannelSplitter","channelSplitterNode","wrapChannelSplitterNode","createNativeChannelSplitterNodeFactory","channelSplitterNodeConstructor","createChannelSplitterNodeRenderer","createNativeChannelSplitterNode","createChannelSplitterNodeConstructor","createChannelSplitterNodeRendererFactory","createNativeGainNodeFactory","createNativeGainNode","audioNodeOptions","gainNode","args","createNativeConstantSourceNodeFakerFactory","createNativeConstantSourceNodeFaker","createConstantSource","nativeConstantSourceNode","createNativeConstantSourceNodeFactory","constantSourceNodeConstructor","createConstantSourceNodeRendererFactory","createNativeConstantSourceNode","constantSourceNodeRenderer","_constantSourceNodeRenderer","_nativeConstantSourceNode","_offset","createConstantSourceNodeConstructor","renderedNativeConstantSourceNodes","renderedNativeConstantSourceNode","nativeConstantSourceNodeIsOwnedByContext","createConstantSourceNode","nativeConvolverNode","createConvolver","normalize","createNativeConvolverNodeFactory","convolverNodeConstructor","createConvolverNodeRenderer","createNativeConvolverNode","_nativeConvolverNode","createConvolverNodeConstructor","renderedNativeConvolverNodes","renderedNativeConvolverNode","createConvolverNode","createConvolverNodeRendererFactory","nativeDelayNode","createDelay","createNativeDelayNodeFactory","delayNodeConstructor","createDelayNodeRenderer","createNativeDelayNode","_delayTime","createDelayNodeConstructor","renderedNativeDelayNodes","renderedNativeDelayNode","nativeDelayNodeIsOwnedByContext","createDelayNode","createDelayNodeRendererFactory","nativeDynamicsCompressorNode","createDynamicsCompressor","createNativeDynamicsCompressorNodeFactory","dynamicsCompressorNodeConstructor","createDynamicsCompressorNodeRenderer","createNativeDynamicsCompressorNode","_attack","_knee","_nativeDynamicsCompressorNode","_ratio","_release","_threshold","previousChannelCount","reduction","createDynamicsCompressorNodeConstructor","renderedNativeDynamicsCompressorNodes","renderedNativeDynamicsCompressorNode","nativeDynamicsCompressorNodeIsOwnedByContext","createDynamicsCompressorNode","createDynamicsCompressorNodeRendererFactory","createGainNodeRenderer","createGainNodeConstructor","renderedNativeGainNodes","renderedNativeGainNode","nativeGainNodeIsOwnedByContext","createGainNode","createGainNodeRendererFactory","bufferSize","createNativeScriptProcessorNodeFactory","createNativeScriptProcessorNode","scriptProcessorNode","bufferIndexes","xBuffers","yBuffers","outputBuffer","nyquist","omega","PI","cos","sin","response","sqrt","atan2","createNativeIIRFilterNodeFakerFactory","testOfflineAudioContextCurrentTimeSupport","isOfflineAudioContextCurrentTimeSupported","createRenderNativeOfflineAudioContext","createTestOfflineAudioContextCurrentTimeSupport","renderNativeOfflineAudioContext","nativeIIRFilterNode","nativeIIRFilterNodeIsOwnedByContext","createIIRFilter","partialOfflineAudioContext","filteredBuffer","filterFullBuffer","createIIRFilterNodeRendererFactory","iIRFilterNodeConstructor","createNativeIIRFilterNode","createIIRFilterNodeRenderer","wrapIIRFilterNodeGetFrequencyResponseMethod","_nativeIIRFilterNode","createIIRFilterNodeConstructor","createNativeIIRFilterNodeFaker","createNativeIIRFilterNodeFactory","audioDestinationNodeConstructor","createAudioListener","_nativeContext","_destination","_listener","_onstatechange","onstatechange","nativeOnStateChange","createMinimalBaseAudioContextConstructor","nativeListener","forwardX","forwardY","forwardZ","upX","upY","upZ","createFakeAudioParam","constantSourceNode","lastOrientation","lastPosition","orientation","setOrientation","positon","setPosition","createFakeAudioParams","createAudioListenerFactory","nativeOscillatorNode","periodicWave","setPeriodicWave","createNativeOscillatorNodeFactory","createNativeOscillatorNode","renderedNativeOscillatorNodes","renderedNativeOscillatorNode","nativeOscillatorNodeIsOwnedByContext","createOscillatorNode","createOscillatorNodeRendererFactory","oscillatorNodeConstructor","createOscillatorNodeRenderer","oscillatorNodeRenderer","_nativeOscillatorNode","_oscillatorNodeRenderer","createOscillatorNodeConstructor","negativeWaveShaperNode","createWaveShaper","positiveWaveShaperNode","inputGainNode","invertGainNode","outputGainNode","revertGainNode","unmodifiedCurve","nativeWaveShaperNodeFaker","curveLength","negativeCurve","positiveCurve","centerIndex","createNativeWaveShaperNodeFakerFactory","createNativeWaveShaperNodeFaker","nativeWaveShaperNode","createNativeWaveShaperNodeFactory","createNativeWaveShaperNode","pannerNode","createPanner","SINGLE_CHANNEL_OPTIONS","orientationXGainNode","orientationYGainNode","orientationZGainNode","positionXGainNode","positionYGainNode","positionZGainNode","waveShaperNode","nativePannerNodeFaker","createNativePannerNodeFakerFactory","createNativePannerNodeFaker","nativePannerNode","createNativePannerNodeFactory","pannerNodeConstructor","createNativePannerNode","createPannerNodeRenderer","_nativePannerNode","_orientationX","_orientationY","_orientationZ","_positionX","_positionY","_positionZ","createPannerNodeConstructor","renderedNativePannerNodes","renderedNativePannerNode","nativePannerNodeIsOwnedByContext","createPannerNode","createPannerNodeRendererFactory","periodicWaveConstructor","createNativePeriodicWave","periodicWaveStore","PeriodicWave","createPeriodicWaveConstructor","imag","real","wrappedImag","wrappedReal","createPeriodicWave","createNativePeriodicWaveFactory","DC_CURVE","HALF_PI","SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS","buildInternalGraph","panGainNode","leftWaveShaperCurve","rightWaveShaperCurve","leftGainNode","leftWaveShaperNode","panWaveShaperNode","rightGainNode","rightWaveShaperNode","buildInternalGraphForMono","leftInputForLeftOutputWaveShaperCurve","leftInputForRightOutputWaveShaperCurve","rightInputForLeftOutputWaveShaperCurve","rightInputForRightOutputWaveShaperCurve","CURVE_SIZE","leftInputForLeftOutputGainNode","leftInputForLeftOutputWaveShaperNode","leftInputForRightOutputGainNode","leftInputForRightOutputWaveShaperNode","rightInputForLeftOutputGainNode","rightInputForLeftOutputWaveShaperNode","rightInputForRightOutputGainNode","rightInputForRightOutputWaveShaperNode","buildInternalGraphForStereo","outputNodes","outputNode","createNativeStereoPannerNodeFakerFactory","createNativeStereoPannerNodeFaker","createStereoPanner","nativeStereoPannerNode","createNativeStereoPannerNodeFactory","stereoPannerNodeConstructor","createNativeStereoPannerNode","createStereoPannerNodeRenderer","_pan","createStereoPannerNodeConstructor","renderedNativeStereoPannerNodes","renderedNativeStereoPannerNode","nativeStereoPannerNodeIsOwnedByContext","createStereoPannerNode","createStereoPannerNodeRendererFactory","renderedNativeWaveShaperNodes","renderedNativeWaveShaperNode","createWaveShaperNode","createWaveShaperNodeRendererFactory","waveShaperNodeConstructor","createWaveShaperNodeRenderer","_isCurveNullified","_nativeWaveShaperNode","createWaveShaperNodeConstructor","isSecureContext","createIsSecureContext","fn","currentFrame","createExposeCurrentFrameAndCurrentTime","addAudioWorkletModule","createAbortError","exposeCurrentFrameAndCurrentTime","fetchSource","ongoingRequests","resolvedRequests","moduleURL","credentials","absoluteUrl","location","href","audioWorklet","blob","Blob","createObjectURL","addModule","revokeObjectURL","resolvedRequestsOfContext","ongoingRequestsOfContext","promiseOfOngoingRequest","head","document","SyntaxError","script","createElement","originalOnErrorHandler","onerror","removeErrorEventListenerAndRevokeUrl","message","src","lineno","colno","onload","appendChild","evaluateSource","evaluateAudioWorkletGlobalScope","_AWGS","trim","nodeNameToProcessorConstructorMap","rslvdRqstsFCntxt","ngngRqstsFCntxt","createAddAudioWorkletModule","fetch","ok","text","createFetchSource","isNativeAudioContext","createIsNativeAudioContext","createIsNativeContext","gainNodeConstructor","minimalBaseAudioContextConstructor","_audioWorklet","constraints","audioData","successCallback","errorCallback","createBaseAudioContextConstructor","createDataCloneError","createEncodingError","isNativeContext","testAudioBufferCopyChannelMethodsOutOfBoundsSupport","testAudioBufferCopyChannelMethodsSubarraySupport","testPromiseSupport","anyContext","complete","arrayBuffer","detachArrayBuffer","fail","createDecodeAudioData","createNativeMediaElementAudioSourceNode","nativeMediaElementAudioSourceNode","_mediaElement","mediaElement","_nativeMediaElementAudioSourceNode","createMediaElementAudioSourceNodeConstructor","ntvDCntxt","createMediaElementSource","createNativeMediaElementAudioSourceNodeFactory","createNativeMediaStreamAudioSourceNode","nativeMediaStreamAudioSourceNode","_nativeMediaStreamAudioSourceNode","mediaStream","createMediaStreamAudioSourceNodeConstructor","audioStreamTracks","getAudioTracks","filteredAudioStreamTracks","sort","id","createMediaStreamSource","MediaStream","createNativeMediaStreamAudioSourceNodeFactory","createNativeMediaStreamTrackAudioSourceNode","createMediaStreamTrackAudioSourceNodeConstructor","mediaStreamTrack","createMediaStreamTrackSource","kind","createNativeMediaStreamTrackAudioSourceNodeFactory","audioContextConstructor","baseAudioContextConstructor","createUnknownError","mediaElementAudioSourceNodeConstructor","mediaStreamAudioSourceNodeConstructor","mediaStreamTrackAudioSourceNodeConstructor","_baseLatency","_nativeAudioContext","_state","revokeState","resolvePromise","resume","suspend","createAudioContextConstructor","createConnectMultipleOutputs","createDisconnectMultipleOutputs","connectMultipleOutputs","disconnectMultipleOutputs","numberOfParameters","messageChannel","gainNodes","inputChannelSplitterNodes","constantSourceNodes","inputChannelMergerNode","outputChannelSplitterNode","outputChannelMergerNodes","parameterMap","outputChannelMergerNode","onprocessorerror","nativeAudioWorkletNodeFaker","_","patchedEventListeners","unpatchedEventListener","handleEvent","patchedEventListener","port","audioWorkletProcessorPromise","createAudioWorkletProcessor","dWrkltPrcssr","isActive","createNativeAudioWorkletNodeFakerFactory","createNativeAudioWorkletNodeFaker","nativeAudioWorkletNodeConstructor","hasNoOutput","testClonabilityOfAudioWorkletNodeOptions","createNativeAudioWorkletNodeFactory","AudioWorkletNode","createNativeAudioWorkletNodeConstructor","renderedNativeAudioWorkletNodeOrOutputNodes","renderedNativeAudioWorkletNodeOrGainNode","nativeOutputNodes","nativeAudioWorkletNodeIsOwnedByContext","nm","createAudioWorkletNodeRendererFactory","audioWorkletNodeConstructor","createAudioWorkletNodeRenderer","createNativeAudioWorkletNode","_nativeAudioWorkletNode","_numberOfOutputs","_onprocessorerror","_parameters","nativeOnProcessorError","createAudioWorkletNodeConstructor","createMinimalAudioContextConstructor","createCreateNativeOfflineAudioContext","createStartRendering","offlineAudioContextConstructor","createNativeOfflineAudioContext","delayStateChangeEvent","stopImmediatePropagation","_waitForThePromiseToSettle","_length","_nativeOfflineAudioContext","createMinimalOfflineAudioContextConstructor","createOfflineAudioContextConstructor","isAnyAudioContext","contextStore","createIsAnyAudioContext","isAnyAudioNode","audioNodeStore","createIsAnyAudioNode","isAnyAudioParam","audioParamStore","createIsAnyAudioParam","isAnyOfflineAudioContext","createIsAnyOfflineAudioContext","assert","statement","assertRange","gte","lte","defaultLogger","console","setLogger","logger","log","warn","isUndef","arg","isDefined","isFunction","isNumber","isObject","constructor","isBoolean","isString","isNote","theWindow","hasAudioContext","updateInterval","_callback","_type","_updateInterval","_createClock","_createWorker","toFixed","blobUrl","worker","Worker","_worker","_createTimeout","_timeout","e","_disposeClock","clearTimeout","terminate","interval","dispose","isAudioParam","isOfflineAudioContext","isAudioContext","isAudioBuffer","noCopy","deepMerge","sources","shift","assign","optionsFromArguments","defaults","argsArray","objKey","opts","Reflect","indexOf","defaultArg","given","fallback","omitFromObject","obj","omit","prop","debug","_wasDisposed","getDefaults","TONE_DEBUG_CLASS","version","EPSILON","GT","GTE","EQ","LT","abs","_timeline","Timeline","memory","increasing","Infinity","valueOf","lastValue","_search","diff","remove","param","peek","getAfter","getBefore","len","cancel","after","cancelBefore","previousEvent","beginning","end","midPoint","nextEvent","_iterate","lowerBound","upperBound","forEachBefore","forEachAfter","forEachBetween","forEachFrom","forEachAtTime","notifyNewContext","onContextInit","cb","notifyCloseContext","onContextClose","on","split","eventName","_events","once","boundCallback","off","eventList","emit","mixin","constr","getOwnPropertyDescriptor","Emitter","_constants","_timeouts","_timeoutIds","_initialized","_workletModules","Context","_latencyHint","lookAhead","_ticker","Ticker","clockSource","_timeoutLoop","initialize","ctx","feedForward","stream","_transport","_draw","createAudioWorkletNode","rawContext","workletsAreReady","promises","hint","lookAheadValue","now","immediate","getConstant","val","constant","firstEvent","timeout","clearInterval","setInterval","intervalFn","BaseContext","_numberOfChannels","_sampleRate","_numberOfInputs","_maxDelayTime","_feedForward","_feedback","_real","_imag","_constraints","_stream","_audioData","_name","_options","_url","_fn","_id","_interval","_val","readOnly","str","noOp","ToneAudioBuffer","reverse","load","_buffer","getContext","loaded","_reversed","_reverse","downloads","fromArray","isMultidimensional","channels","multiChannelArray","toMono","chanNum","toArray","outputArray","channelArray","ret","startSamples","endSamples","retBuffer","rev","fromUrl","matches","extensions","extension","ext","supportsType","baseUrl","canPlayType","_currentTime","_duration","_renderClock","asynchronous","yieldEvery","dummyContext","DummyContext","globalContext","setContext","TONE_SILENCE_LOGGING","prefix","printString","dbToGain","db","gainToDb","LN10","intervalToFrequencyRatio","A4","ftom","ftomf","mtof","midi","units","defaultUnits","_units","_expressions","_getExpressions","hz","method","_frequencyToUnits","parseFloat","regexp","_ticksToUnits","parseInt","_beatsToUnits","_getTimeSignature","dot","numericValue","scalar","number","_secondsToUnits","samples","tr","q","total","TimeBaseClass","fromType","_noArg","typeName","quantity","expr","matching","freq","beats","_getBpm","seconds","ticks","_getPPQ","_now","transport","bpm","timeSignature","PPQ","toSeconds","toTicks","toFrequency","toMidi","toSamples","toMilliseconds","capture","quantize","quantTo","TimeClass","nextSubdivision","subdiv","percent","subdivision","toNotation","testNotations","power","closest","closestSeconds","notation","notationSeconds","toBarsBeatsSixteenths","quarterTime","quarters","measures","sixteenths","sixteenthString","Time","setA4","FrequencyClass","note","pitch","octave","noteNumber","noteToScaleIndex","toLowerCase","transpose","harmonize","intervals","toNote","scaleIndexToNote","cbb","cx","dbb","dx","ebb","eb","ex","fbb","fb","f","fx","gbb","gb","g","gx","abb","ab","ax","bbb","bb","bx","Frequency","TransportTime","TransportTimeClass","ToneWithContext","defaultContext","_getPartialProperties","attribute","member","Param","overridden","_minOutput","_param","_swappable","swappable","_initialValue","convert","_minValue","_maxValue","_toType","getValueAtTime","_fromType","_is","computedTime","isFinite","JSON","stringify","before","beforeValue","previous","_linearInterpolate","_exponentialInterpolate","previousVal","_exponentialApproach","setRampPoint","currentVal","exponentialRampTo","rampTime","linearRampTo","targetRampTo","exponentialApproachValueAtTime","scaling","startingValue","segTime","valueAtTime","sampleTime","rampTo","subdivisions","setParam","t0","v0","v1","t1","_internalChannels","_isAudioNode","ToneAudioNode","_getInternalNodes","nodeList","_setChannelProperties","_getChannelProperties","outputNum","inputNum","toDestination","toMaster","chain","connectSeries","fan","first","prev","current","srcNode","dstNode","outputNumber","inputNumber","Gain","_gainNode","Volume","volume","_unmutedVolume","mute","Destination","Delay","maxDelayInSeconds","maxDelay","_delayNode","Offline","originalContext","bufferPromise","_buffers","_loadingCount","ToneAudioBuffers","urls","_bufferLoaded","initial","_initial","setStateAtTime","getLastState","getNextState","_stopTime","getStateAtTime","_fadeIn","fadeIn","_fadeOut","fadeOut","_curve","_startGain","fadeInTime","_stopGain","cancelStop","fadeOutTime","additionalTail","_stopSource","ToneConstantSource","_source","Signal","override","_constantSource","connectSignal","signal","TickParam","_multiplier","multiplier","computedValue","prevEvent","segments","rampVal","ticksUntilTime","_getTicksUntilEvent","computedVal","segmentDur","val0","val1","onTheLineEvent","getTicksAtTime","getDurationOfTicks","currentTick","getTimeOfTick","tick","delta","sol1","ticksToTime","timeToTicks","computedDuration","startTicks","TickSignal","TickSource","StateTimeline","_tickOffset","setTicksAtTime","pause","stopEvent","tmpEvent","lastState","elapsedTicks","periodStartTime","offsetEvent","getSecondsAtTime","elapsedSeconds","absoluteTicks","forEachTickBetween","computedStartTime","computedEndTime","lastStateEvent","maxStartTime","nextTickTime","Clock","_lastUpdate","_boundLoop","_loop","_tickSource","initialValue","Ticks","TicksClass","_root","IntervalNode","insert","updateHeight","updateMax","_rebalance","results","search","_removeNode","_setRoot","_replaceNodeInParent","replacement","isLeftChild","left","right","temp","getBalance","_rotateLeft","pivotNode","_rotateRight","balance","low","traverse","searchAfter","high","_left","_right","height","point","TransportEvent","_eventId","_once","invoke","_currentId","_nextId","_nextTick","_boundRestart","_restart","TransportRepeatEvent","_createEvents","scheduleOnce","Transport","_loopStart","_loopEnd","_scheduledEvents","_repeatedEvents","_syncedSignals","_swingAmount","_ppq","ppq","_clock","_processTick","_bindClockEvents","_timeSignature","_swingTicks","swing","swingSubdivision","tickTime","progress","amount","schedule","_addEvent","scheduleRepeat","eventId","item","timeline","computedAfter","offsetTicks","toggle","timeSig","startPosition","endPosition","setLoopPoints","remainingTicks","syncSignal","computedFreq","ratioSignal","unsyncSignal","syncedSignal","MidiClass","Midi","expiration","anticipation","_boundDrawLoop","_drawLoop","_animationFrame","requestAnimationFrame","cancelAnimationFrame","draw","_synced","_scheduled","_syncedStart","_syncedStop","_volume","onstop","_clampToCurrentTime","restart","sched","_start","_stop","sync","stateEvent","startOffset","unsync","ToneBufferSource","_sourceStarted","_sourceStopped","computedOffset","loopDuration","computedDur","Noise","_noiseBuffers","rate","random","_noiseCache","brown","pink","white","channelNum","lastOut","b0","b1","b2","b3","b4","b5","b6","Analyser","_analyser","smoothing","MeterBase","Meter","_rms","getLevel","totalSquared","rms","FFT","normalRange","v","DCMeter","Waveform","OnePoleFilter","_createFilter","oldFilter","_filter","a0","disposed","blockTime","fq","freqValues","magValues","phaseValues","SignalOperator","WaveShaper","_shaper","mapping","setMap","normalized","oversampling","isOverSampleType","includes","_abs","Follower","_lowpass","_smoothing","Solo","_allSolos","solo","_isSoloed","_addSolo","_removeSolo","_updateSolo","_soloed","_noSolos","Panner","_panner","PanVol","Channel","_solo","_panVol","muted","_getBus","buses","send","bus","sendKnob","receive","_norm","CrossFade","_split","_g2a","fade","Merge","_merger","Add","_sum","addend","Multiply","_mult","factor","_multiply","Subtract","_neg","subtrahend","MidSideMerge","mid","side","_leftMult","SQRT1_2","_rightMult","_merge","Split","_splitter","MidSideSplit","_midAdd","_sideSubtract","Filter","_filters","rolloff","_rolloff","rolloffNum","possibilities","cascadingCount","count","totalResponse","filterClone","MultibandSplit","_lowMidFilter","lowFrequency","highFrequency","Compressor","_compressor","Envelope","_sig","decay","sustain","attackCurve","releaseCurve","decayCurve","_decay","_sustain","_getCurve","direction","curveName","EnvelopeCurves","_setCurve","curveDef","_attackCurve","_releaseCurve","_decayCurve","triggerAttack","velocity","currentValue","decayValue","decayStart","triggerRelease","triggerAttackRelease","asArray","attackPortion","envelopeDuration","totalDuration","sustainTime","clone","cosineCurve","rippleCurve","curveLen","sineWave","stairsCurve","sineCurve","bounceCurve","invertCurve","out","bounce","In","Out","cosine","exponential","linear","ripple","sine","step","AmplitudeEnvelope","Scale","_add","_min","_max","_setRange","Pow","_exponentScaler","_expFunc","_exponent","exponent","FrequencyEnvelope","_octaves","octaves","_baseFrequency","baseFrequency","_scale","EQ3","_multibandSplit","_lowGain","_midGain","_highGain","workletOptions","_audioWorkletName","_worklet","onReady","FeedbackCombFilter","dummyGain","resonance","LowpassCombFilter","_combFilter","dampening","Convolver","_convolver","buff","norm","UserMedia","open","labelOrId","supported","enumerateDevices","devices","_device","find","device","label","deviceId","audio","echoCancellation","noiseSuppression","mozNoiseSuppression","navigator","mediaDevices","getUserMedia","mediaStreamNode","_mediaStream","track","active","groupId","generateWaveform","ToneOscillatorNode","_oscillator","Oscillator","_partials","partials","_partialCount","partialCount","baseType","phase","oscillator","_wave","syncFrequency","unsyncFrequency","_getCachedPeriodicWave","oscProps","_periodicWaveCache","description","_phase","arrayA","arrayB","isBasicType","cache","partial","exec","_getRealImaginary","periodicWaveSize","piFactor","_inverseFFT","getInitialValue","twoPi","AMOscillator","_modulationScale","_modulationNode","_carrier","_modulator","modulationType","harmonicity","FMOscillator","modulationIndex","PulseOscillator","_widthGate","_thresh","width","_sawtooth","FatOscillator","_oscillators","_spread","spread","_forEach","osc","PWMOscillator","sourceType","_pulse","modulationFrequency","OmniOscillatorSourceMap","am","fat","fm","pulse","pwm","OmniOscillator","_sourceType","substr","_createNewOscillator","_getOscType","oscType","OscConstructor","sType","mType","Zero","LFO","_stoppedValue","_amplitudeGain","amplitude","_stoppedSignal","_zeros","_a2g","_scaler","currentMin","currentMax","Player","_activeSources","_onload","autostart","_onSourceEnd","comptuedOffset","origDuration","implicitEnd","seek","Players","_players","player","stopAll","GrainPlayer","_tick","grainSize","_grainSize","_overlap","overlap","_onstop","ScaleExp","_exp","Instrument","_original_triggerAttack","_original_triggerRelease","_syncMethod","timePosition","originalMethod","Monophonic","portamento","onsilence","_triggerEnvelopeAttack","setNote","_triggerEnvelopeRelease","computedFrequency","getLevelAtTime","portTime","Synth","envelope","computedAttack","computedDecay","ModulationSynth","modulation","modulationEnvelope","AMSynth","MonoSynth","filterEnvelope","DuoSynth","voice0","voice1","_vibrato","vibratoRate","_vibratoGain","vibratoAmount","FMSynth","inharmRatios","MetalSynth","_freqMultipliers","_amplitude","_highpass","mult","_filterFreqScaler","freqMult","MembraneSynth","pitchDecay","hertz","maxNote","NoiseSynth","noise","PluckSynth","_noise","attackNoise","_lfcf","delayAmount","PolySynth","_availableVoices","_activeVoices","_voices","_gcTimeout","_averageActiveVoices","voice","maxPolyphony","_dummyVoice","_getNextAvailableVoice","_collectGarbage","_makeVoiceAvailable","activeVoiceIndex","activeVoices","firstAvail","_triggerAttack","notes","midiNote","released","_triggerRelease","_scheduleEvent","durationSeconds","sanitizedOptions","releaseAll","Sampler","urlMap","_findClosest","difference","closestNote","ToneEvent","_startOffset","_probability","probability","_humanize","humanize","_rescheduleEvents","startTick","_getLoopDuration","prob","variation","reschedulTime","lastEvent","Loop","_event","iterations","iters","Part","events","_startNote","at","timeInTicks","_restartEvent","_setAll","attr","_testLoopBoundries","upPatternGen","clamp","downPatternGen","infiniteGen","gen","alternatingGenerator","directionUp","jumpUp","stepIndex","jumpDown","randomGen","randomIndex","randomOnce","copy","randVal","PatternGenerator","pattern","Pattern","_values","_pattern","Sequence","_part","_seqCallback","_eventsArray","_subdivision","_createSequence","_eventsUpdated","_indexTime","_rescheduleSequence","sequence","eventOffset","_dryWet","wet","effectSend","effectReturn","connectEffect","effect","_lfo","depth","AutoFilter","oct","AutoPanner","AutoWah","_follower","follower","_sweepRange","_inputBoost","_bandpass","_peaking","_setSweepRange","sensitivity","baseFreq","BitCrusher","_bitCrusherWorklet","bits","frequencyReduction","BitCrusherWorklet","Chebyshev","_order","order","_getCoefficient","degree","memo","connectEffectLeft","connectEffectRight","Chorus","_depth","_lfoL","_lfoR","_delayNodeL","_delayNodeR","_passThroughL","_passThroughR","deviation","Distortion","_distortion","distortion","deg","_feedbackGain","FeedbackDelay","offset90","_bank0","_createAllPassFilterBank","_bank1","_oneSampleDelay","bankValues","coefficients","FrequencyShifter","_sine","_cosine","_sineMultiply","_cosineMultiply","_negate","_phaseShifter","combFilterTunings","allpassFilterFrequencies","Freeverb","_combFilters","_allpassFiltersL","_allpassFiltersR","roomSize","allpassL","allpassR","lfpf","al","ar","cf","combFilterDelayTimes","combFilterResonances","allpassFilterFreqs","JCReverb","_allpassFilters","_feedbackCombFilters","_scaleRoomSize","allpass","fbcf","apf","_feedbackL","_feedbackR","_feedbackSplit","_feedbackMerge","PingPongDelay","_leftDelay","_rightDelay","_rightPreDelay","PitchShift","_delayA","_lfoA","_delayB","_lfoB","_crossFade","_crossFadeLFO","_feedbackDelay","_pitch","_windowSize","windowSize","Phaser","_filtersL","_makeFilters","stages","_filtersR","connectToFreq","filters","Reverb","preDelay","generate","noiseL","noiseR","merge","_midSideMerge","_midSideSplit","_midSend","_sideSend","_midReturn","_sideReturn","connectEffectMid","connectEffectSide","StereoWidener","_twoTimesWidthMid","_twoTimesWidthSide","_midMult","_oneMinusWidth","_sideMult","Tremolo","_amplitudeL","_amplitudeR","Vibrato"],"mappings":"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","file":"Tone.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Tone\"] = factory();\n\telse\n\t\troot[\"Tone\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 8);\n","(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@babel/runtime/helpers/slicedToArray'), require('@babel/runtime/helpers/classCallCheck'), require('@babel/runtime/helpers/createClass')) :\n    typeof define === 'function' && define.amd ? define(['exports', '@babel/runtime/helpers/slicedToArray', '@babel/runtime/helpers/classCallCheck', '@babel/runtime/helpers/createClass'], factory) :\n    (global = global || self, factory(global.automationEvents = {}, global._slicedToArray, global._classCallCheck, global._createClass));\n}(this, function (exports, _slicedToArray, _classCallCheck, _createClass) { 'use strict';\n\n    _slicedToArray = _slicedToArray && _slicedToArray.hasOwnProperty('default') ? _slicedToArray['default'] : _slicedToArray;\n    _classCallCheck = _classCallCheck && _classCallCheck.hasOwnProperty('default') ? _classCallCheck['default'] : _classCallCheck;\n    _createClass = _createClass && _createClass.hasOwnProperty('default') ? _createClass['default'] : _createClass;\n\n    var createExtendedExponentialRampToValueAutomationEvent = function createExtendedExponentialRampToValueAutomationEvent(value, endTime, insertTime) {\n      return {\n        endTime: endTime,\n        insertTime: insertTime,\n        type: 'exponentialRampToValue',\n        value: value\n      };\n    };\n\n    var createExtendedLinearRampToValueAutomationEvent = function createExtendedLinearRampToValueAutomationEvent(value, endTime, insertTime) {\n      return {\n        endTime: endTime,\n        insertTime: insertTime,\n        type: 'linearRampToValue',\n        value: value\n      };\n    };\n\n    var createSetValueAutomationEvent = function createSetValueAutomationEvent(value, startTime) {\n      return {\n        startTime: startTime,\n        type: 'setValue',\n        value: value\n      };\n    };\n\n    var createSetValueCurveAutomationEvent = function createSetValueCurveAutomationEvent(values, startTime, duration) {\n      return {\n        duration: duration,\n        startTime: startTime,\n        type: 'setValueCurve',\n        values: values\n      };\n    };\n\n    var getTargetValueAtTime = function getTargetValueAtTime(time, valueAtStartTime, _ref) {\n      var startTime = _ref.startTime,\n          target = _ref.target,\n          timeConstant = _ref.timeConstant;\n      return target + (valueAtStartTime - target) * Math.exp((startTime - time) / timeConstant);\n    };\n\n    var isExponentialRampToValueAutomationEvent = function isExponentialRampToValueAutomationEvent(automationEvent) {\n      return automationEvent.type === 'exponentialRampToValue';\n    };\n\n    var isLinearRampToValueAutomationEvent = function isLinearRampToValueAutomationEvent(automationEvent) {\n      return automationEvent.type === 'linearRampToValue';\n    };\n\n    var isAnyRampToValueAutomationEvent = function isAnyRampToValueAutomationEvent(automationEvent) {\n      return isExponentialRampToValueAutomationEvent(automationEvent) || isLinearRampToValueAutomationEvent(automationEvent);\n    };\n\n    var isSetValueAutomationEvent = function isSetValueAutomationEvent(automationEvent) {\n      return automationEvent.type === 'setValue';\n    };\n\n    var isSetValueCurveAutomationEvent = function isSetValueCurveAutomationEvent(automationEvent) {\n      return automationEvent.type === 'setValueCurve';\n    };\n\n    var getValueOfAutomationEventAtIndexAtTime = function getValueOfAutomationEventAtIndexAtTime(automationEvents, index, time, defaultValue) {\n      var automationEvent = automationEvents[index];\n      return automationEvent === undefined ? defaultValue : isAnyRampToValueAutomationEvent(automationEvent) || isSetValueAutomationEvent(automationEvent) ? automationEvent.value : isSetValueCurveAutomationEvent(automationEvent) ? automationEvent.values[automationEvent.values.length - 1] : getTargetValueAtTime(time, getValueOfAutomationEventAtIndexAtTime(automationEvents, index - 1, automationEvent.startTime, defaultValue), automationEvent);\n    };\n\n    var getEndTimeAndValueOfPreviousAutomationEvent = function getEndTimeAndValueOfPreviousAutomationEvent(automationEvents, index, currentAutomationEvent, nextAutomationEvent, defaultValue) {\n      return currentAutomationEvent === undefined ? [nextAutomationEvent.insertTime, defaultValue] : isAnyRampToValueAutomationEvent(currentAutomationEvent) ? [currentAutomationEvent.endTime, currentAutomationEvent.value] : isSetValueAutomationEvent(currentAutomationEvent) ? [currentAutomationEvent.startTime, currentAutomationEvent.value] : isSetValueCurveAutomationEvent(currentAutomationEvent) ? [currentAutomationEvent.startTime + currentAutomationEvent.duration, currentAutomationEvent.values[currentAutomationEvent.values.length - 1]] : [currentAutomationEvent.startTime, getValueOfAutomationEventAtIndexAtTime(automationEvents, index - 1, currentAutomationEvent.startTime, defaultValue)];\n    };\n\n    var isCancelAndHoldAutomationEvent = function isCancelAndHoldAutomationEvent(automationEvent) {\n      return automationEvent.type === 'cancelAndHold';\n    };\n\n    var isCancelScheduledValuesAutomationEvent = function isCancelScheduledValuesAutomationEvent(automationEvent) {\n      return automationEvent.type === 'cancelScheduledValues';\n    };\n\n    var getEventTime = function getEventTime(automationEvent) {\n      if (isCancelAndHoldAutomationEvent(automationEvent) || isCancelScheduledValuesAutomationEvent(automationEvent)) {\n        return automationEvent.cancelTime;\n      }\n\n      if (isExponentialRampToValueAutomationEvent(automationEvent) || isLinearRampToValueAutomationEvent(automationEvent)) {\n        return automationEvent.endTime;\n      }\n\n      return automationEvent.startTime;\n    };\n\n    var getExponentialRampValueAtTime = function getExponentialRampValueAtTime(time, startTime, valueAtStartTime, _ref) {\n      var endTime = _ref.endTime,\n          value = _ref.value;\n\n      if (valueAtStartTime === value) {\n        return value;\n      }\n\n      if (0 < valueAtStartTime && 0 < value || valueAtStartTime < 0 && value < 0) {\n        return valueAtStartTime * Math.pow(value / valueAtStartTime, (time - startTime) / (endTime - startTime));\n      }\n\n      return 0;\n    };\n\n    var getLinearRampValueAtTime = function getLinearRampValueAtTime(time, startTime, valueAtStartTime, _ref) {\n      var endTime = _ref.endTime,\n          value = _ref.value;\n      return valueAtStartTime + (time - startTime) / (endTime - startTime) * (value - valueAtStartTime);\n    };\n\n    var interpolateValue = function interpolateValue(values, theoreticIndex) {\n      var lowerIndex = Math.floor(theoreticIndex);\n      var upperIndex = Math.ceil(theoreticIndex);\n\n      if (lowerIndex === upperIndex) {\n        return values[lowerIndex];\n      }\n\n      return (1 - (theoreticIndex - lowerIndex)) * values[lowerIndex] + (1 - (upperIndex - theoreticIndex)) * values[upperIndex];\n    };\n\n    var getValueCurveValueAtTime = function getValueCurveValueAtTime(time, _ref) {\n      var duration = _ref.duration,\n          startTime = _ref.startTime,\n          values = _ref.values;\n      var theoreticIndex = (time - startTime) / duration * (values.length - 1);\n      return interpolateValue(values, theoreticIndex);\n    };\n\n    var isSetTargetAutomationEvent = function isSetTargetAutomationEvent(automationEvent) {\n      return automationEvent.type === 'setTarget';\n    };\n\n    var AutomationEventList =\n    /*#__PURE__*/\n    function () {\n      function AutomationEventList(defaultValue) {\n        _classCallCheck(this, AutomationEventList);\n\n        this._automationEvents = [];\n        this._currenTime = 0;\n        this._defaultValue = defaultValue;\n      }\n\n      _createClass(AutomationEventList, [{\n        key: Symbol.iterator,\n        value: function value() {\n          return this._automationEvents[Symbol.iterator]();\n        }\n      }, {\n        key: \"add\",\n        value: function add(automationEvent) {\n          var eventTime = getEventTime(automationEvent);\n\n          if (isCancelAndHoldAutomationEvent(automationEvent) || isCancelScheduledValuesAutomationEvent(automationEvent)) {\n            var index = this._automationEvents.findIndex(function (currentAutomationEvent) {\n              return getEventTime(currentAutomationEvent) >= eventTime;\n            });\n\n            var removedAutomationEvent = this._automationEvents[index];\n\n            if (index !== -1) {\n              this._automationEvents = this._automationEvents.slice(0, index);\n            }\n\n            if (isCancelAndHoldAutomationEvent(automationEvent)) {\n              var lastAutomationEvent = this._automationEvents[this._automationEvents.length - 1];\n\n              if (removedAutomationEvent !== undefined && isAnyRampToValueAutomationEvent(removedAutomationEvent)) {\n                if (isSetTargetAutomationEvent(lastAutomationEvent)) {\n                  throw new Error('The internal list is malformed.');\n                }\n\n                var startTime = isSetValueCurveAutomationEvent(lastAutomationEvent) ? lastAutomationEvent.startTime + lastAutomationEvent.duration : getEventTime(lastAutomationEvent);\n                var startValue = isSetValueCurveAutomationEvent(lastAutomationEvent) ? lastAutomationEvent.values[lastAutomationEvent.values.length - 1] : lastAutomationEvent.value;\n                var value = isExponentialRampToValueAutomationEvent(removedAutomationEvent) ? getExponentialRampValueAtTime(eventTime, startTime, startValue, removedAutomationEvent) : getLinearRampValueAtTime(eventTime, startTime, startValue, removedAutomationEvent);\n                var truncatedAutomationEvent = isExponentialRampToValueAutomationEvent(removedAutomationEvent) ? createExtendedExponentialRampToValueAutomationEvent(value, eventTime, this._currenTime) : createExtendedLinearRampToValueAutomationEvent(value, eventTime, this._currenTime);\n\n                this._automationEvents.push(truncatedAutomationEvent);\n              }\n\n              if (lastAutomationEvent !== undefined && isSetTargetAutomationEvent(lastAutomationEvent)) {\n                this._automationEvents.push(createSetValueAutomationEvent(this.getValue(eventTime), eventTime));\n              }\n\n              if (lastAutomationEvent !== undefined && isSetValueCurveAutomationEvent(lastAutomationEvent) && lastAutomationEvent.startTime + lastAutomationEvent.duration > eventTime) {\n                this._automationEvents[this._automationEvents.length - 1] = createSetValueCurveAutomationEvent(new Float32Array([6, 7]), lastAutomationEvent.startTime, eventTime - lastAutomationEvent.startTime);\n              }\n            }\n          } else {\n            var _index = this._automationEvents.findIndex(function (currentAutomationEvent) {\n              return getEventTime(currentAutomationEvent) > eventTime;\n            });\n\n            var previousAutomationEvent = _index === -1 ? this._automationEvents[this._automationEvents.length - 1] : this._automationEvents[_index - 1];\n\n            if (previousAutomationEvent !== undefined && isSetValueCurveAutomationEvent(previousAutomationEvent) && getEventTime(previousAutomationEvent) + previousAutomationEvent.duration > eventTime) {\n              return false;\n            }\n\n            var persistentAutomationEvent = isExponentialRampToValueAutomationEvent(automationEvent) ? createExtendedExponentialRampToValueAutomationEvent(automationEvent.value, automationEvent.endTime, this._currenTime) : isLinearRampToValueAutomationEvent(automationEvent) ? createExtendedLinearRampToValueAutomationEvent(automationEvent.value, eventTime, this._currenTime) : automationEvent;\n\n            if (_index === -1) {\n              this._automationEvents.push(persistentAutomationEvent);\n            } else {\n              if (isSetValueCurveAutomationEvent(automationEvent) && eventTime + automationEvent.duration > getEventTime(this._automationEvents[_index])) {\n                return false;\n              }\n\n              this._automationEvents.splice(_index, 0, persistentAutomationEvent);\n            }\n          }\n\n          return true;\n        }\n      }, {\n        key: \"flush\",\n        value: function flush(time) {\n          var index = this._automationEvents.findIndex(function (currentAutomationEvent) {\n            return getEventTime(currentAutomationEvent) > time;\n          });\n\n          if (index > 1) {\n            var remainingAutomationEvents = this._automationEvents.slice(index - 1);\n\n            var firstRemainingAutomationEvent = remainingAutomationEvents[0];\n\n            if (isSetTargetAutomationEvent(firstRemainingAutomationEvent)) {\n              remainingAutomationEvents.unshift(createSetValueAutomationEvent(getValueOfAutomationEventAtIndexAtTime(this._automationEvents, index - 2, firstRemainingAutomationEvent.startTime, this._defaultValue), firstRemainingAutomationEvent.startTime));\n            }\n\n            this._automationEvents = remainingAutomationEvents;\n          }\n        }\n      }, {\n        key: \"getValue\",\n        value: function getValue(time) {\n          if (this._automationEvents.length === 0) {\n            return this._defaultValue;\n          }\n\n          var lastAutomationEvent = this._automationEvents[this._automationEvents.length - 1];\n\n          var index = this._automationEvents.findIndex(function (automationEvent) {\n            return getEventTime(automationEvent) > time;\n          });\n\n          var nextAutomationEvent = this._automationEvents[index];\n          var currentAutomationEvent = getEventTime(lastAutomationEvent) <= time ? lastAutomationEvent : this._automationEvents[index - 1];\n\n          if (currentAutomationEvent !== undefined && isSetTargetAutomationEvent(currentAutomationEvent) && (nextAutomationEvent === undefined || !isAnyRampToValueAutomationEvent(nextAutomationEvent) || nextAutomationEvent.insertTime > time)) {\n            return getTargetValueAtTime(time, getValueOfAutomationEventAtIndexAtTime(this._automationEvents, index - 2, currentAutomationEvent.startTime, this._defaultValue), currentAutomationEvent);\n          }\n\n          if (currentAutomationEvent !== undefined && isSetValueAutomationEvent(currentAutomationEvent) && (nextAutomationEvent === undefined || !isAnyRampToValueAutomationEvent(nextAutomationEvent))) {\n            return currentAutomationEvent.value;\n          }\n\n          if (currentAutomationEvent !== undefined && isSetValueCurveAutomationEvent(currentAutomationEvent) && (nextAutomationEvent === undefined || !isAnyRampToValueAutomationEvent(nextAutomationEvent) || currentAutomationEvent.startTime + currentAutomationEvent.duration > time)) {\n            if (time < currentAutomationEvent.startTime + currentAutomationEvent.duration) {\n              return getValueCurveValueAtTime(time, currentAutomationEvent);\n            }\n\n            return currentAutomationEvent.values[currentAutomationEvent.values.length - 1];\n          }\n\n          if (currentAutomationEvent !== undefined && isAnyRampToValueAutomationEvent(currentAutomationEvent) && (nextAutomationEvent === undefined || !isAnyRampToValueAutomationEvent(nextAutomationEvent))) {\n            return currentAutomationEvent.value;\n          }\n\n          if (nextAutomationEvent !== undefined && isExponentialRampToValueAutomationEvent(nextAutomationEvent)) {\n            var _getEndTimeAndValueOf = getEndTimeAndValueOfPreviousAutomationEvent(this._automationEvents, index - 1, currentAutomationEvent, nextAutomationEvent, this._defaultValue),\n                _getEndTimeAndValueOf2 = _slicedToArray(_getEndTimeAndValueOf, 2),\n                startTime = _getEndTimeAndValueOf2[0],\n                value = _getEndTimeAndValueOf2[1];\n\n            return getExponentialRampValueAtTime(time, startTime, value, nextAutomationEvent);\n          }\n\n          if (nextAutomationEvent !== undefined && isLinearRampToValueAutomationEvent(nextAutomationEvent)) {\n            var _getEndTimeAndValueOf3 = getEndTimeAndValueOfPreviousAutomationEvent(this._automationEvents, index - 1, currentAutomationEvent, nextAutomationEvent, this._defaultValue),\n                _getEndTimeAndValueOf4 = _slicedToArray(_getEndTimeAndValueOf3, 2),\n                _startTime = _getEndTimeAndValueOf4[0],\n                _value = _getEndTimeAndValueOf4[1];\n\n            return getLinearRampValueAtTime(time, _startTime, _value, nextAutomationEvent);\n          }\n\n          return this._defaultValue;\n        }\n      }]);\n\n      return AutomationEventList;\n    }();\n\n    var createCancelAndHoldAutomationEvent = function createCancelAndHoldAutomationEvent(cancelTime) {\n      return {\n        cancelTime: cancelTime,\n        type: 'cancelAndHold'\n      };\n    };\n\n    var createCancelScheduledValuesAutomationEvent = function createCancelScheduledValuesAutomationEvent(cancelTime) {\n      return {\n        cancelTime: cancelTime,\n        type: 'cancelScheduledValues'\n      };\n    };\n\n    var createExponentialRampToValueAutomationEvent = function createExponentialRampToValueAutomationEvent(value, endTime) {\n      return {\n        endTime: endTime,\n        type: 'exponentialRampToValue',\n        value: value\n      };\n    };\n\n    var createLinearRampToValueAutomationEvent = function createLinearRampToValueAutomationEvent(value, endTime) {\n      return {\n        endTime: endTime,\n        type: 'linearRampToValue',\n        value: value\n      };\n    };\n\n    var createSetTargetAutomationEvent = function createSetTargetAutomationEvent(target, startTime, timeConstant) {\n      return {\n        startTime: startTime,\n        target: target,\n        timeConstant: timeConstant,\n        type: 'setTarget'\n      };\n    };\n\n    exports.AutomationEventList = AutomationEventList;\n    exports.createCancelAndHoldAutomationEvent = createCancelAndHoldAutomationEvent;\n    exports.createCancelScheduledValuesAutomationEvent = createCancelScheduledValuesAutomationEvent;\n    exports.createExponentialRampToValueAutomationEvent = createExponentialRampToValueAutomationEvent;\n    exports.createLinearRampToValueAutomationEvent = createLinearRampToValueAutomationEvent;\n    exports.createSetTargetAutomationEvent = createSetTargetAutomationEvent;\n    exports.createSetValueAutomationEvent = createSetValueAutomationEvent;\n    exports.createSetValueCurveAutomationEvent = createSetValueCurveAutomationEvent;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n","var arrayWithHoles = require(\"./arrayWithHoles\");\n\nvar iterableToArrayLimit = require(\"./iterableToArrayLimit\");\n\nvar nonIterableRest = require(\"./nonIterableRest\");\n\nfunction _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n}\n\nmodule.exports = _slicedToArray;","function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nmodule.exports = _arrayWithHoles;","function _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nmodule.exports = _iterableToArrayLimit;","function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nmodule.exports = _nonIterableRest;","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck;","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;","export const version: string = \"14.4.60\";\n","export const createAbortError = () => {\n    try {\n        return new DOMException('', 'AbortError');\n    }\n    catch (err) {\n        // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.\n        err.code = 20;\n        err.name = 'AbortError';\n        return err;\n    }\n};\n//# sourceMappingURL=/build/es2018/factories/abort-error.js.map","export const ACTIVE_AUDIO_NODE_STORE = new WeakSet();\nexport const AUDIO_BUFFER_STORE = new WeakSet();\nexport const AUDIO_NODE_STORE = new WeakMap();\nexport const AUDIO_GRAPHS = new WeakMap();\nexport const AUDIO_PARAM_STORE = new WeakMap();\nexport const AUDIO_PARAM_AUDIO_NODE_STORE = new WeakMap();\nexport const AUXILIARY_GAIN_NODE_STORE = new WeakMap();\nexport const BACKUP_NATIVE_CONTEXT_STORE = new WeakMap();\nexport const CONTEXT_STORE = new WeakMap();\nexport const DETACHED_ARRAY_BUFFERS = new WeakSet();\nexport const EVENT_LISTENERS = new WeakMap();\n// This clunky name is borrowed from the spec. :-)\nexport const NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS = new WeakMap();\nexport const NODE_TO_PROCESSOR_MAPS = new WeakMap();\nexport const PERIODIC_WAVE_STORE = new WeakSet();\nexport const TEST_RESULTS = new WeakMap();\n//# sourceMappingURL=/build/es2018/globals.js.map","export const createInvalidStateError = () => {\n    try {\n        return new DOMException('', 'InvalidStateError');\n    }\n    catch (err) {\n        // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.\n        err.code = 11;\n        err.name = 'InvalidStateError';\n        return err;\n    }\n};\n//# sourceMappingURL=/build/es2018/factories/invalid-state-error.js.map","import { createInvalidStateError } from '../factories/invalid-state-error';\nimport { CONTEXT_STORE } from '../globals';\nexport const getNativeContext = (context) => {\n    const nativeContext = CONTEXT_STORE.get(context);\n    if (nativeContext === undefined) {\n        throw createInvalidStateError();\n    }\n    return nativeContext;\n};\n//# sourceMappingURL=/build/es2018/helpers/get-native-context.js.map","const handler = {\n    construct() {\n        return handler;\n    }\n};\nexport const isConstructible = (constructible) => {\n    try {\n        const proxy = new Proxy(constructible, handler);\n        new proxy(); // tslint:disable-line:no-unused-expression\n    }\n    catch (_a) {\n        return false;\n    }\n    return true;\n};\n//# sourceMappingURL=/build/es2018/helpers/is-constructible.js.map","/*\n * This massive regex tries to cover all the following cases.\n *\n * import './path';\n * import defaultImport from './path';\n * import { namedImport } from './path';\n * import { namedImport as renamendImport } from './path';\n * import * as namespaceImport from './path';\n * import defaultImport, { namedImport } from './path';\n * import defaultImport, { namedImport as renamendImport } from './path';\n * import defaultImport, * as namespaceImport from './path';\n */\nconst IMPORT_STATEMENT_REGEX = /^import(?:(?:[\\s]+[\\w]+|(?:[\\s]+[\\w]+[\\s]*,)?[\\s]*\\{[\\s]*[\\w]+(?:[\\s]+as[\\s]+[\\w]+)?(?:[\\s]*,[\\s]*[\\w]+(?:[\\s]+as[\\s]+[\\w]+)?)*[\\s]*}|(?:[\\s]+[\\w]+[\\s]*,)?[\\s]*\\*[\\s]+as[\\s]+[\\w]+)[\\s]+from)?(?:[\\s]*)(\"([^\"\\\\]|\\\\.)+\"|'([^'\\\\]|\\\\.)+')(?:[\\s]*);?/; // tslint:disable-line:max-line-length\nexport const splitImportStatements = (source, url) => {\n    const importStatements = [];\n    let sourceWithoutImportStatements = source.replace(/^[\\s]+/, '');\n    let result = sourceWithoutImportStatements.match(IMPORT_STATEMENT_REGEX);\n    while (result !== null) {\n        const unresolvedUrl = result[1].slice(1, -1);\n        const importStatementWithResolvedUrl = result[0]\n            .replace(/([\\s]+)?;?$/, '')\n            .replace(unresolvedUrl, (new URL(unresolvedUrl, url)).toString());\n        importStatements.push(importStatementWithResolvedUrl);\n        sourceWithoutImportStatements = sourceWithoutImportStatements\n            .slice(result[0].length)\n            .replace(/^[\\s]+/, '');\n        result = sourceWithoutImportStatements.match(IMPORT_STATEMENT_REGEX);\n    }\n    return [importStatements.join(';'), sourceWithoutImportStatements];\n};\n//# sourceMappingURL=/build/es2018/helpers/split-import-statements.js.map","import { NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS } from '../globals';\nimport { evaluateSource } from '../helpers/evaluate-source';\nimport { getNativeContext } from '../helpers/get-native-context';\nimport { isConstructible } from '../helpers/is-constructible';\nimport { splitImportStatements } from '../helpers/split-import-statements';\nconst verifyParameterDescriptors = (parameterDescriptors) => {\n    if (parameterDescriptors !== undefined && !Array.isArray(parameterDescriptors)) {\n        throw new TypeError('The parameterDescriptors property of given value for processorCtor is not an array.');\n    }\n};\nconst verifyProcessorCtor = (processorCtor) => {\n    if (!isConstructible(processorCtor)) {\n        throw new TypeError('The given value for processorCtor should be a constructor.');\n    }\n    if (processorCtor.prototype === null || typeof processorCtor.prototype !== 'object') {\n        throw new TypeError('The given value for processorCtor should have a prototype.');\n    }\n    if (typeof processorCtor.prototype.process !== 'function') {\n        throw new TypeError('The given value for processorCtor should have a callable process() function.');\n    }\n};\nexport const createAddAudioWorkletModule = (createAbortError, createNotSupportedError, exposeCurrentFrameAndCurrentTime, fetchSource, getBackupNativeContext, ongoingRequests, resolvedRequests) => {\n    return (context, moduleURL, options = { credentials: 'omit' }) => {\n        const nativeContext = getNativeContext(context);\n        const absoluteUrl = (new URL(moduleURL, location.href)).toString();\n        // Bug #59: Only Chrome & Opera do implement the audioWorklet property.\n        if (nativeContext.audioWorklet !== undefined) {\n            return fetchSource(moduleURL)\n                .then((source) => {\n                const [importStatements, sourceWithoutImportStatements] = splitImportStatements(source, absoluteUrl);\n                /*\n                 * Bug #86: Chrome Canary does not invoke the process() function if the corresponding AudioWorkletNode has no output.\n                 *\n                 * This is the unminified version of the code used below:\n                 *\n                 * ```js\n                 * `${ importStatements };\n                 * ((registerProcessor) => {${ sourceWithoutImportStatements }\n                 * })((name, processorCtor) => registerProcessor(name, class extends processorCtor {\n                 *\n                 *     constructor (options) {\n                 *         const { hasNoOutput, ...otherParameterData } = options.parameterData;\n                 *\n                 *         if (hasNoOutput === 1) {\n                 *             super({ ...options, numberOfOutputs: 0, outputChannelCount: [ ], parameterData: otherParameterData });\n                 *\n                 *             this._hasNoOutput = true;\n                 *         } else {\n                 *             super(options);\n                 *\n                 *             this._hasNoOutput = false;\n                 *         }\n                 *     }\n                 *\n                 *     process (inputs, outputs, parameters) {\n                 *         return super.process(inputs, (this._hasNoOutput) ? [ ] : outputs, parameters);\n                 *     }\n                 *\n                 * }))`\n                 * ```\n                 */\n                const wrappedSource = `${importStatements};(registerProcessor=>{${sourceWithoutImportStatements}\n})((n,p)=>registerProcessor(n,class extends p{constructor(o){const{hasNoOutput,...q}=o.parameterData;if(hasNoOutput===1){super({...o,numberOfOutputs:0,outputChannelCount:[],parameterData:q});this._h=true}else{super(o);this._h=false}}process(i,o,p){return super.process(i,(this._h)?[]:o,p)}}))`; // tslint:disable-line:max-line-length\n                const blob = new Blob([wrappedSource], { type: 'application/javascript; charset=utf-8' });\n                const url = URL.createObjectURL(blob);\n                const backupNativeContext = getBackupNativeContext(nativeContext);\n                const nativeContextOrBackupNativeContext = (backupNativeContext !== null) ? backupNativeContext : nativeContext;\n                return nativeContextOrBackupNativeContext.audioWorklet\n                    .addModule(url, options)\n                    .then(() => URL.revokeObjectURL(url))\n                    // @todo This could be written more elegantly when Promise.finally() becomes avalaible.\n                    .catch((err) => {\n                    URL.revokeObjectURL(url);\n                    throw err; // tslint:disable-line:rxjs-throw-error\n                });\n            });\n        }\n        const resolvedRequestsOfContext = resolvedRequests.get(context);\n        if (resolvedRequestsOfContext !== undefined && resolvedRequestsOfContext.has(moduleURL)) {\n            return Promise.resolve();\n        }\n        const ongoingRequestsOfContext = ongoingRequests.get(context);\n        if (ongoingRequestsOfContext !== undefined) {\n            const promiseOfOngoingRequest = ongoingRequestsOfContext.get(moduleURL);\n            if (promiseOfOngoingRequest !== undefined) {\n                return promiseOfOngoingRequest;\n            }\n        }\n        const promise = fetchSource(moduleURL)\n            .then((source) => {\n            const [importStatements, sourceWithoutImportStatements] = splitImportStatements(source, absoluteUrl);\n            /*\n             * This is the unminified version of the code used below:\n             *\n             * ```js\n             * ${ importStatements };\n             * ((a, b) => {\n             *     (a[b] = a[b] || [ ]).push(\n             *         (AudioWorkletProcessor, global, registerProcessor, sampleRate, self, window) => {\n             *             ${ sourceWithoutImportStatements }\n             *         }\n             *     );\n             * })(window, '_AWGS');\n             * ```\n             */\n            // tslint:disable-next-line:max-line-length\n            const wrappedSource = `${importStatements};((a,b)=>{(a[b]=a[b]||[]).push((AudioWorkletProcessor,global,registerProcessor,sampleRate,self,window)=>{${sourceWithoutImportStatements}\n})})(window,'_AWGS')`;\n            // @todo Evaluating the given source code is a possible security problem.\n            return evaluateSource(wrappedSource);\n        })\n            .then(() => {\n            const evaluateAudioWorkletGlobalScope = window._AWGS.pop();\n            if (evaluateAudioWorkletGlobalScope === undefined) {\n                throw new SyntaxError();\n            }\n            exposeCurrentFrameAndCurrentTime(nativeContext, () => evaluateAudioWorkletGlobalScope(class AudioWorkletProcessor {\n            }, undefined, (name, processorCtor) => {\n                if (name.trim() === '') {\n                    throw createNotSupportedError();\n                }\n                const nodeNameToProcessorConstructorMap = NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.get(nativeContext);\n                if (nodeNameToProcessorConstructorMap !== undefined) {\n                    if (nodeNameToProcessorConstructorMap.has(name)) {\n                        throw createNotSupportedError();\n                    }\n                    verifyProcessorCtor(processorCtor);\n                    verifyParameterDescriptors(processorCtor.parameterDescriptors);\n                    nodeNameToProcessorConstructorMap.set(name, processorCtor);\n                }\n                else {\n                    verifyProcessorCtor(processorCtor);\n                    verifyParameterDescriptors(processorCtor.parameterDescriptors);\n                    NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.set(nativeContext, new Map([[name, processorCtor]]));\n                }\n            }, nativeContext.sampleRate, undefined, undefined));\n        })\n            .catch((err) => {\n            if (err.name === 'SyntaxError') {\n                throw createAbortError();\n            }\n            throw err; // tslint:disable-line:rxjs-throw-error\n        });\n        if (ongoingRequestsOfContext === undefined) {\n            ongoingRequests.set(context, new Map([[moduleURL, promise]]));\n        }\n        else {\n            ongoingRequestsOfContext.set(moduleURL, promise);\n        }\n        promise\n            .then(() => {\n            const rslvdRqstsFCntxt = resolvedRequests.get(context);\n            if (rslvdRqstsFCntxt === undefined) {\n                resolvedRequests.set(context, new Set([moduleURL]));\n            }\n            else {\n                rslvdRqstsFCntxt.add(moduleURL);\n            }\n        })\n            .catch(() => { }) // tslint:disable-line:no-empty\n            // @todo Use finally when it becomes available in all supported browsers.\n            .then(() => {\n            const ngngRqstsFCntxt = ongoingRequests.get(context);\n            if (ngngRqstsFCntxt !== undefined) {\n                ngngRqstsFCntxt.delete(moduleURL);\n            }\n        });\n        return promise;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/add-audio-worklet-module.js.map","import { getNativeContext } from '../helpers/get-native-context';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    fftSize: 2048,\n    maxDecibels: -30,\n    minDecibels: -100,\n    smoothingTimeConstant: 0.8\n};\nexport const createAnalyserNodeConstructor = (createAnalyserNodeRenderer, createIndexSizeError, createNativeAnalyserNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class AnalyserNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeAnalyserNode = createNativeAnalyserNode(nativeContext, mergedOptions);\n            const analyserNodeRenderer = ((isNativeOfflineAudioContext(nativeContext))\n                ? createAnalyserNodeRenderer()\n                : null);\n            super(context, 'passive', nativeAnalyserNode, analyserNodeRenderer);\n            this._nativeAnalyserNode = nativeAnalyserNode;\n        }\n        get fftSize() {\n            return this._nativeAnalyserNode.fftSize;\n        }\n        set fftSize(value) {\n            this._nativeAnalyserNode.fftSize = value;\n        }\n        get frequencyBinCount() {\n            return this._nativeAnalyserNode.frequencyBinCount;\n        }\n        get maxDecibels() {\n            return this._nativeAnalyserNode.maxDecibels;\n        }\n        set maxDecibels(value) {\n            // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.\n            const maxDecibels = this._nativeAnalyserNode.maxDecibels;\n            this._nativeAnalyserNode.maxDecibels = value;\n            if (!(value > this._nativeAnalyserNode.minDecibels)) {\n                this._nativeAnalyserNode.maxDecibels = maxDecibels;\n                throw createIndexSizeError();\n            }\n        }\n        get minDecibels() {\n            return this._nativeAnalyserNode.minDecibels;\n        }\n        set minDecibels(value) {\n            // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.\n            const minDecibels = this._nativeAnalyserNode.minDecibels;\n            this._nativeAnalyserNode.minDecibels = value;\n            if (!(this._nativeAnalyserNode.maxDecibels > value)) {\n                this._nativeAnalyserNode.minDecibels = minDecibels;\n                throw createIndexSizeError();\n            }\n        }\n        get smoothingTimeConstant() {\n            return this._nativeAnalyserNode.smoothingTimeConstant;\n        }\n        set smoothingTimeConstant(value) {\n            this._nativeAnalyserNode.smoothingTimeConstant = value;\n        }\n        getByteFrequencyData(array) {\n            this._nativeAnalyserNode.getByteFrequencyData(array);\n        }\n        getByteTimeDomainData(array) {\n            this._nativeAnalyserNode.getByteTimeDomainData(array);\n        }\n        getFloatFrequencyData(array) {\n            this._nativeAnalyserNode.getFloatFrequencyData(array);\n        }\n        getFloatTimeDomainData(array) {\n            this._nativeAnalyserNode.getFloatTimeDomainData(array);\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/analyser-node-constructor.js.map","export const getValueForKey = (map, key) => {\n    const value = map.get(key);\n    if (value === undefined) {\n        throw new Error('A value with the given key could not be found.');\n    }\n    return value;\n};\n//# sourceMappingURL=/build/es2018/helpers/get-value-for-key.js.map","import { AUDIO_NODE_STORE } from '../globals';\nimport { getValueForKey } from './get-value-for-key';\nexport const getNativeAudioNode = (audioNode) => {\n    return getValueForKey(AUDIO_NODE_STORE, audioNode);\n};\n//# sourceMappingURL=/build/es2018/helpers/get-native-audio-node.js.map","export const isOwnedByContext = (nativeAudioNode, nativeContext) => {\n    return nativeAudioNode.context === nativeContext;\n};\n//# sourceMappingURL=/build/es2018/helpers/is-owned-by-context.js.map","import { AUDIO_GRAPHS } from '../globals';\nimport { getValueForKey } from './get-value-for-key';\nexport function getAudioGraph(context) {\n    return getValueForKey(AUDIO_GRAPHS, context);\n}\n//# sourceMappingURL=/build/es2018/helpers/get-audio-graph.js.map","import { getAudioGraph } from './get-audio-graph';\nimport { getValueForKey } from './get-value-for-key';\nexport const getAudioNodeConnections = (audioNode) => {\n    const audioGraph = getAudioGraph(audioNode.context);\n    return getValueForKey(audioGraph.nodes, audioNode);\n};\n//# sourceMappingURL=/build/es2018/helpers/get-audio-node-connections.js.map","import { getAudioNodeConnections } from './get-audio-node-connections';\nexport const getAudioNodeRenderer = (audioNode) => {\n    const audioNodeConnections = getAudioNodeConnections(audioNode);\n    if (audioNodeConnections.renderer === null) {\n        throw new Error('Missing the renderer of the given AudioNode in the audio graph.');\n    }\n    return audioNodeConnections.renderer;\n};\n//# sourceMappingURL=/build/es2018/helpers/get-audio-node-renderer.js.map","import { getAudioNodeConnections } from './get-audio-node-connections';\nimport { getAudioNodeRenderer } from './get-audio-node-renderer';\nexport const renderInputsOfAudioNode = (audioNode, nativeOfflineAudioContext, nativeAudioNode) => {\n    const audioNodeConnections = getAudioNodeConnections(audioNode);\n    return Promise\n        .all(audioNodeConnections.activeInputs\n        .map((connections, input) => Array\n        .from(connections)\n        .map(([source, output]) => {\n        return getAudioNodeRenderer(source)\n            .render(source, nativeOfflineAudioContext)\n            .then((node) => node.connect(nativeAudioNode, output, input));\n    }))\n        .reduce((allRenderingPromises, renderingPromises) => [...allRenderingPromises, ...renderingPromises], []));\n};\n//# sourceMappingURL=/build/es2018/helpers/render-inputs-of-audio-node.js.map","export const testAudioBufferCopyChannelMethodsOutOfBoundsSupport = (nativeAudioBuffer) => {\n    try {\n        nativeAudioBuffer.copyToChannel(new Float32Array(1), 0, -1);\n    }\n    catch (_a) {\n        return false;\n    }\n    return true;\n};\n//# sourceMappingURL=/build/es2018/helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support.js.map","export const testAudioBufferCopyChannelMethodsSubarraySupport = (nativeAudioBuffer) => {\n    const source = new Float32Array(2);\n    try {\n        /*\n         * Firefox up to version 67 didn't fully support the copyFromChannel() and copyToChannel() methods. Therefore testing one of those\n         * methods is enough to know if the other one it supported as well.\n         */\n        nativeAudioBuffer.copyFromChannel(source, 0, nativeAudioBuffer.length - 1);\n    }\n    catch (_a) {\n        return false;\n    }\n    return true;\n};\n//# sourceMappingURL=/build/es2018/helpers/test-audio-buffer-copy-channel-methods-subarray-support.js.map","export const createIndexSizeError = () => {\n    try {\n        return new DOMException('', 'IndexSizeError');\n    }\n    catch (err) {\n        // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.\n        err.code = 1;\n        err.name = 'IndexSizeError';\n        return err;\n    }\n};\n//# sourceMappingURL=/build/es2018/factories/index-size-error.js.map","import { createIndexSizeError } from '../factories/index-size-error';\nexport const wrapAudioBufferGetChannelDataMethod = (audioBuffer) => {\n    audioBuffer.getChannelData = ((getChannelData) => {\n        return (channel) => {\n            try {\n                return getChannelData.call(audioBuffer, channel);\n            }\n            catch (err) {\n                if (err.code === 12) {\n                    throw createIndexSizeError();\n                }\n                throw err; // tslint:disable-line:rxjs-throw-error\n            }\n        };\n    })(audioBuffer.getChannelData);\n};\n//# sourceMappingURL=/build/es2018/helpers/wrap-audio-buffer-get-channel-data-method.js.map","import { testAudioBufferCopyChannelMethodsOutOfBoundsSupport } from '../helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support';\nimport { testAudioBufferCopyChannelMethodsSubarraySupport } from '../helpers/test-audio-buffer-copy-channel-methods-subarray-support';\nimport { wrapAudioBufferGetChannelDataMethod } from '../helpers/wrap-audio-buffer-get-channel-data-method';\nconst DEFAULT_OPTIONS = {\n    numberOfChannels: 1\n};\nexport const createAudioBufferConstructor = (audioBufferStore, cacheTestResult, createNotSupportedError, nativeAudioBufferConstructor, nativeOfflineAudioContextConstructor, testNativeAudioBufferConstructorSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds, wrapAudioBufferCopyChannelMethodsSubarray) => {\n    let nativeOfflineAudioContext = null;\n    return class AudioBuffer {\n        constructor(options) {\n            if (nativeOfflineAudioContextConstructor === null) {\n                throw new Error('Missing the native OfflineAudioContext constructor.');\n            }\n            const { length, numberOfChannels, sampleRate } = { ...DEFAULT_OPTIONS, ...options };\n            if (nativeOfflineAudioContext === null) {\n                nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n            }\n            /*\n             * Bug #99: Firefox does not throw a NotSupportedError when the numberOfChannels is zero. But it only does it when using the\n             * factory function. But since Firefox also supports the constructor everything should be fine.\n             */\n            const audioBuffer = (nativeAudioBufferConstructor !== null &&\n                cacheTestResult(testNativeAudioBufferConstructorSupport, testNativeAudioBufferConstructorSupport)) ?\n                new nativeAudioBufferConstructor({ length, numberOfChannels, sampleRate }) :\n                nativeOfflineAudioContext.createBuffer(numberOfChannels, length, sampleRate);\n            // Bug #99: Safari does not throw an error when the numberOfChannels is zero.\n            if (audioBuffer.numberOfChannels === 0) {\n                throw createNotSupportedError();\n            }\n            // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n            // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.\n            if (typeof audioBuffer.copyFromChannel !== 'function') {\n                wrapAudioBufferCopyChannelMethods(audioBuffer);\n                wrapAudioBufferGetChannelDataMethod(audioBuffer);\n                // Bug #42: Firefox does not yet fully support copyFromChannel() and copyToChannel().\n            }\n            else if (!cacheTestResult(testAudioBufferCopyChannelMethodsSubarraySupport, () => testAudioBufferCopyChannelMethodsSubarraySupport(audioBuffer))) {\n                wrapAudioBufferCopyChannelMethodsSubarray(audioBuffer);\n                wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n                // Bug #157: No browser does allow the bufferOffset to be out-of-bounds.\n            }\n            else if (!cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, () => testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer))) {\n                wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n            }\n            audioBufferStore.add(audioBuffer);\n            /*\n             * This does violate all good pratices but it is necessary to allow this AudioBuffer to be used with native\n             * (Offline)AudioContexts.\n             */\n            return audioBuffer;\n        }\n        static [Symbol.hasInstance](instance) {\n            return (instance !== null && typeof instance === 'object' && Object.getPrototypeOf(instance) === AudioBuffer.prototype)\n                || (audioBufferStore.has(instance));\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-buffer-constructor.js.map","import { EVENT_LISTENERS } from '../globals';\nimport { getValueForKey } from './get-value-for-key';\nexport const getEventListenersOfAudioNode = (audioNode) => {\n    return getValueForKey(EVENT_LISTENERS, audioNode);\n};\n//# sourceMappingURL=/build/es2018/helpers/get-event-listeners-of-audio-node.js.map","import { ACTIVE_AUDIO_NODE_STORE } from '../globals';\nimport { getEventListenersOfAudioNode } from './get-event-listeners-of-audio-node';\nexport const setInternalState = (audioNode, internalState) => {\n    if (internalState === 'active') {\n        if (ACTIVE_AUDIO_NODE_STORE.has(audioNode)) {\n            throw new Error('The AudioNode is already stored.');\n        }\n        ACTIVE_AUDIO_NODE_STORE.add(audioNode);\n    }\n    else {\n        if (!ACTIVE_AUDIO_NODE_STORE.has(audioNode)) {\n            throw new Error('The AudioNode is not stored.');\n        }\n        ACTIVE_AUDIO_NODE_STORE.delete(audioNode);\n    }\n    getEventListenersOfAudioNode(audioNode)\n        .forEach((eventListener) => eventListener(internalState));\n};\n//# sourceMappingURL=/build/es2018/helpers/set-internal-state.js.map","export const wrapEventListener = (target, eventListener) => {\n    if (typeof eventListener === 'function') {\n        return (event) => {\n            const descriptor = { value: target };\n            Object.defineProperties(event, {\n                currentTarget: descriptor,\n                target: descriptor\n            });\n            return eventListener.call(target, event);\n        };\n    }\n    return eventListener;\n};\n//# sourceMappingURL=/build/es2018/helpers/wrap-event-listener.js.map","import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { getNativeContext } from '../helpers/get-native-context';\nimport { setInternalState } from '../helpers/set-internal-state';\nimport { wrapEventListener } from '../helpers/wrap-event-listener';\nconst DEFAULT_OPTIONS = {\n    buffer: null,\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    // Bug #149: Safari does not yet support the detune AudioParam.\n    loop: false,\n    loopEnd: 0,\n    loopStart: 0,\n    playbackRate: 1\n};\nexport const createAudioBufferSourceNodeConstructor = (createAudioBufferSourceNodeRenderer, createAudioParam, createInvalidStateError, createNativeAudioBufferSourceNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class AudioBufferSourceNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const audioBufferSourceNodeRenderer = ((isOffline)\n                ? createAudioBufferSourceNodeRenderer()\n                : null);\n            super(context, 'passive', nativeAudioBufferSourceNode, audioBufferSourceNodeRenderer);\n            this._audioBufferSourceNodeRenderer = audioBufferSourceNodeRenderer;\n            this._isBufferNullified = false;\n            this._isBufferSet = false;\n            this._nativeAudioBufferSourceNode = nativeAudioBufferSourceNode;\n            this._onended = null;\n            // Bug #73: Edge & Safari do not export the correct values for maxValue and minValue.\n            this._playbackRate = createAudioParam(this, isOffline, nativeAudioBufferSourceNode.playbackRate, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n        }\n        get buffer() {\n            if (this._isBufferNullified) {\n                return null;\n            }\n            return this._nativeAudioBufferSourceNode.buffer;\n        }\n        set buffer(value) {\n            // Bug #71: Edge does not allow to set the buffer to null.\n            try {\n                this._nativeAudioBufferSourceNode.buffer = value;\n            }\n            catch (err) {\n                if (value !== null || err.code !== 17) {\n                    throw err; // tslint:disable-line:rxjs-throw-error\n                }\n                // This will modify the buffer in place. Luckily that works in Edge and has the same effect as setting the buffer to null.\n                if (this._nativeAudioBufferSourceNode.buffer !== null) {\n                    const buffer = this._nativeAudioBufferSourceNode.buffer;\n                    const numberOfChannels = buffer.numberOfChannels;\n                    for (let i = 0; i < numberOfChannels; i += 1) {\n                        buffer\n                            .getChannelData(i)\n                            .fill(0);\n                    }\n                    this._isBufferNullified = true;\n                }\n            }\n            // Bug #72: Only Chrome, Edge & Opera do not allow to reassign the buffer yet.\n            if (value !== null) {\n                if (this._isBufferSet) {\n                    throw createInvalidStateError();\n                }\n                this._isBufferSet = true;\n            }\n        }\n        get onended() {\n            return this._onended;\n        }\n        set onended(value) {\n            const wrappedListener = wrapEventListener(this, value);\n            this._nativeAudioBufferSourceNode.onended = wrappedListener;\n            const nativeOnEnded = this._nativeAudioBufferSourceNode.onended;\n            this._onended = (nativeOnEnded === wrappedListener) ? value : nativeOnEnded;\n        }\n        get loop() {\n            return this._nativeAudioBufferSourceNode.loop;\n        }\n        set loop(value) {\n            this._nativeAudioBufferSourceNode.loop = value;\n        }\n        get loopEnd() {\n            return this._nativeAudioBufferSourceNode.loopEnd;\n        }\n        set loopEnd(value) {\n            this._nativeAudioBufferSourceNode.loopEnd = value;\n        }\n        get loopStart() {\n            return this._nativeAudioBufferSourceNode.loopStart;\n        }\n        set loopStart(value) {\n            this._nativeAudioBufferSourceNode.loopStart = value;\n        }\n        get playbackRate() {\n            return this._playbackRate;\n        }\n        start(when = 0, offset = 0, duration) {\n            this._nativeAudioBufferSourceNode.start(when, offset, duration);\n            if (this._audioBufferSourceNodeRenderer !== null) {\n                this._audioBufferSourceNodeRenderer.start = (duration === undefined) ? [when, offset] : [when, offset, duration];\n            }\n            else {\n                setInternalState(this, 'active');\n                const setInternalStateToInactive = () => {\n                    this._nativeAudioBufferSourceNode.removeEventListener('ended', setInternalStateToInactive);\n                    // @todo Determine a meaningful delay instead of just using one second.\n                    setTimeout(() => setInternalState(this, 'passive'), 1000);\n                };\n                this._nativeAudioBufferSourceNode.addEventListener('ended', setInternalStateToInactive);\n            }\n        }\n        stop(when = 0) {\n            this._nativeAudioBufferSourceNode.stop(when);\n            if (this._audioBufferSourceNodeRenderer !== null) {\n                this._audioBufferSourceNodeRenderer.stop = when;\n            }\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-buffer-source-node-constructor.js.map","import { AUDIO_PARAM_STORE } from '../globals';\nimport { getValueForKey } from './get-value-for-key';\nexport const getNativeAudioParam = (audioParam) => {\n    return getValueForKey(AUDIO_PARAM_STORE, audioParam);\n};\n//# sourceMappingURL=/build/es2018/helpers/get-native-audio-param.js.map","import { getAudioGraph } from './get-audio-graph';\nimport { getValueForKey } from './get-value-for-key';\nexport function getAudioParamConnections(context, audioParam) {\n    const audioGraph = getAudioGraph(context);\n    return getValueForKey(audioGraph.params, audioParam);\n}\n//# sourceMappingURL=/build/es2018/helpers/get-audio-param-connections.js.map","import { getAudioNodeRenderer } from './get-audio-node-renderer';\nimport { getAudioParamConnections } from './get-audio-param-connections';\nexport const renderInputsOfAudioParam = (context, audioParam, nativeOfflineAudioContext, nativeAudioParam) => {\n    const audioParamConnections = getAudioParamConnections(context, audioParam);\n    return Promise\n        .all(Array\n        .from(audioParamConnections.activeInputs)\n        .map(([source, output]) => {\n        return getAudioNodeRenderer(source)\n            .render(source, nativeOfflineAudioContext)\n            .then((node) => node.connect(nativeAudioParam, output));\n    }));\n};\n//# sourceMappingURL=/build/es2018/helpers/render-inputs-of-audio-param.js.map","import { getNativeAudioParam } from './get-native-audio-param';\nimport { renderInputsOfAudioParam } from './render-inputs-of-audio-param';\nexport const connectAudioParam = (context, nativeOfflineAudioContext, audioParam, nativeAudioParam = getNativeAudioParam(audioParam)) => {\n    return renderInputsOfAudioParam(context, audioParam, nativeOfflineAudioContext, nativeAudioParam);\n};\n//# sourceMappingURL=/build/es2018/helpers/connect-audio-param.js.map","import { getAudioParamRenderer } from './get-audio-param-renderer';\nimport { renderInputsOfAudioParam } from './render-inputs-of-audio-param';\nexport const renderAutomation = (context, nativeOfflineAudioContext, audioParam, nativeAudioParam) => {\n    const audioParamRenderer = getAudioParamRenderer(context, audioParam);\n    audioParamRenderer.replay(nativeAudioParam);\n    return renderInputsOfAudioParam(context, audioParam, nativeOfflineAudioContext, nativeAudioParam);\n};\n//# sourceMappingURL=/build/es2018/helpers/render-automation.js.map","import { getAudioParamConnections } from './get-audio-param-connections';\nexport function getAudioParamRenderer(context, audioParam) {\n    const audioParamConnections = getAudioParamConnections(context, audioParam);\n    if (audioParamConnections.renderer === null) {\n        throw new Error('Missing the renderer of the given AudioParam in the audio graph.');\n    }\n    return audioParamConnections.renderer;\n}\n//# sourceMappingURL=/build/es2018/helpers/get-audio-param-renderer.js.map","export const isValidLatencyHint = (latencyHint) => {\n    return latencyHint === undefined ||\n        typeof latencyHint === 'number' ||\n        (typeof latencyHint === 'string' && (latencyHint === 'balanced' || latencyHint === 'interactive' || latencyHint === 'playback'));\n};\n//# sourceMappingURL=/build/es2018/helpers/is-valid-latency-hint.js.map","import { wrapEventListener } from './helpers/wrap-event-listener';\nexport class EventTarget {\n    constructor(_nativeEventTarget) {\n        this._nativeEventTarget = _nativeEventTarget;\n        this._listeners = new WeakMap();\n    }\n    addEventListener(type, listener, // @todo EventListenerOrEventListenerObject | null = null,\n    options) {\n        let wrappedEventListener = this._listeners.get(listener);\n        if (wrappedEventListener === undefined) {\n            wrappedEventListener = wrapEventListener(this, listener);\n            if (typeof listener === 'function') {\n                this._listeners.set(listener, wrappedEventListener);\n            }\n        }\n        return this._nativeEventTarget.addEventListener(type, wrappedEventListener, options);\n    }\n    dispatchEvent(event) {\n        return this._nativeEventTarget.dispatchEvent(event);\n    }\n    removeEventListener(type, listener, // @todo EventListenerOrEventListenerObject | null = null,\n    options) {\n        const wrappedEventListener = this._listeners.get(listener);\n        return this._nativeEventTarget.removeEventListener(type, (wrappedEventListener === undefined) ? null : wrappedEventListener, options);\n    }\n}\n//# sourceMappingURL=/build/es2018/event-target.js.map","export const isAudioNode = (audioNodeOrAudioParam) => {\n    return 'context' in audioNodeOrAudioParam;\n};\n//# sourceMappingURL=/build/es2018/guards/audio-node.js.map","import { isAudioNode } from './audio-node';\nexport const isAudioNodeOutputConnection = (outputConnection) => {\n    return isAudioNode(outputConnection[0]);\n};\n//# sourceMappingURL=/build/es2018/guards/audio-node-output-connection.js.map","export const isAudioWorkletNode = (audioNode) => {\n    return 'port' in audioNode;\n};\n//# sourceMappingURL=/build/es2018/guards/audio-worklet-node.js.map","export const connectNativeAudioNodeToNativeAudioNode = (nativeSourceAudioNode, nativeDestinationAudioNode, output, input) => {\n    const inputs = nativeDestinationAudioNode.inputs;\n    if (inputs !== undefined) {\n        nativeSourceAudioNode.connect(inputs[input], output, 0);\n        return [inputs[input], output, 0];\n    }\n    nativeSourceAudioNode.connect(nativeDestinationAudioNode, output, input);\n    return [nativeDestinationAudioNode, output, input];\n};\n//# sourceMappingURL=/build/es2018/helpers/connect-native-audio-node-to-native-audio-node.js.map","import { getEventListenersOfAudioNode } from './get-event-listeners-of-audio-node';\nexport const deleteEventListenerOfAudioNode = (audioNode, eventListener) => {\n    const eventListeners = getEventListenersOfAudioNode(audioNode);\n    if (!eventListeners.delete(eventListener)) {\n        throw new Error('Missing the expected event listener');\n    }\n};\n//# sourceMappingURL=/build/es2018/helpers/delete-event-listeners-of-audio-node.js.map","export const disconnectNativeAudioNodeFromNativeAudioNode = (nativeSourceAudioNode, nativeDestinationAudioNode, output, input) => {\n    const inputs = nativeDestinationAudioNode.inputs;\n    if (input === undefined || output === undefined) {\n        nativeSourceAudioNode.disconnect(nativeDestinationAudioNode);\n    }\n    else if (inputs !== undefined) {\n        nativeSourceAudioNode.disconnect(inputs[input], output, 0);\n    }\n    else {\n        nativeSourceAudioNode.disconnect(nativeDestinationAudioNode, output, input);\n    }\n};\n//# sourceMappingURL=/build/es2018/helpers/disconnect-native-audio-node-from-native-audio-node.js.map","export const insertElementInSet = (set, element, predicate, ignoreDuplicates) => {\n    for (const lmnt of set) {\n        if (predicate(lmnt)) {\n            if (ignoreDuplicates) {\n                return false;\n            }\n            throw Error('The set contains at least one similar element.');\n        }\n    }\n    set.add(element);\n    return true;\n};\n//# sourceMappingURL=/build/es2018/helpers/insert-element-in-set.js.map","import { ACTIVE_AUDIO_NODE_STORE } from '../globals';\nexport const isActiveAudioNode = (audioNode) => {\n    return ACTIVE_AUDIO_NODE_STORE.has(audioNode);\n};\n//# sourceMappingURL=/build/es2018/helpers/is-active-audio-node.js.map","import { ACTIVE_AUDIO_NODE_STORE } from '../globals';\nexport const isPassiveAudioNode = (audioNode) => {\n    return !ACTIVE_AUDIO_NODE_STORE.has(audioNode);\n};\n//# sourceMappingURL=/build/es2018/helpers/is-passive-audio-node.js.map","export const pickElementFromSet = (set, predicate) => {\n    const matchingElements = Array\n        .from(set)\n        .filter(predicate);\n    if (matchingElements.length > 1) {\n        throw Error('More than one element was found.');\n    }\n    if (matchingElements.length === 0) {\n        throw Error('No element was found.');\n    }\n    const [matchingElement] = matchingElements;\n    set.delete(matchingElement);\n    return matchingElement;\n};\n//# sourceMappingURL=/build/es2018/helpers/pick-element-from-set.js.map","import { isAudioWorkletNode } from '../guards/audio-worklet-node';\nimport { setInternalState } from './set-internal-state';\n// Set the internalState of the audioNode to 'passive' if it is not an AudioWorkletNode and if it has no 'active' input connections.\nexport const setInternalStateToPassiveWhenNecessary = (audioNode, activeInputs) => {\n    if (!isAudioWorkletNode(audioNode) && activeInputs.every((connections) => (connections.size === 0))) {\n        setInternalState(audioNode, 'passive');\n    }\n};\n//# sourceMappingURL=/build/es2018/helpers/set-internal-state-to-passive-when-necessary.js.map","export const testAudioNodeDisconnectMethodSupport = (nativeAudioContext) => {\n    return new Promise((resolve) => {\n        const analyzer = nativeAudioContext.createScriptProcessor(256, 1, 1);\n        const dummy = nativeAudioContext.createGain();\n        // Bug #95: Safari does not play one sample buffers.\n        const ones = nativeAudioContext.createBuffer(1, 2, 44100);\n        const channelData = ones.getChannelData(0);\n        channelData[0] = 1;\n        channelData[1] = 1;\n        const source = nativeAudioContext.createBufferSource();\n        source.buffer = ones;\n        source.loop = true;\n        source.connect(analyzer);\n        analyzer.connect(nativeAudioContext.destination);\n        source.connect(dummy);\n        source.disconnect(dummy);\n        analyzer.onaudioprocess = (event) => {\n            const chnnlDt = event.inputBuffer.getChannelData(0);\n            if (Array.prototype.some.call(chnnlDt, (sample) => sample === 1)) {\n                resolve(true);\n            }\n            else {\n                resolve(false);\n            }\n            source.stop();\n            analyzer.onaudioprocess = null; // tslint:disable-line:deprecation\n            source.disconnect(analyzer);\n            analyzer.disconnect(nativeAudioContext.destination);\n        };\n        source.start();\n    });\n};\n//# sourceMappingURL=/build/es2018/helpers/test-audio-node-disconnect-method-support.js.map","export const isNativeAudioNode = (nativeAudioNodeOrAudioParam) => {\n    return 'context' in nativeAudioNodeOrAudioParam;\n};\n//# sourceMappingURL=/build/es2018/guards/native-audio-node.js.map","import { EventTarget } from '../event-target';\nimport { ACTIVE_AUDIO_NODE_STORE, AUDIO_NODE_STORE, AUXILIARY_GAIN_NODE_STORE, EVENT_LISTENERS } from '../globals';\nimport { isAudioNode } from '../guards/audio-node';\nimport { isAudioNodeOutputConnection } from '../guards/audio-node-output-connection';\nimport { isAudioWorkletNode } from '../guards/audio-worklet-node';\nimport { connectNativeAudioNodeToNativeAudioNode } from '../helpers/connect-native-audio-node-to-native-audio-node';\nimport { deleteEventListenerOfAudioNode } from '../helpers/delete-event-listeners-of-audio-node';\nimport { disconnectNativeAudioNodeFromNativeAudioNode } from '../helpers/disconnect-native-audio-node-from-native-audio-node';\nimport { getAudioGraph } from '../helpers/get-audio-graph';\nimport { getAudioNodeConnections } from '../helpers/get-audio-node-connections';\nimport { getAudioParamConnections } from '../helpers/get-audio-param-connections';\nimport { getEventListenersOfAudioNode } from '../helpers/get-event-listeners-of-audio-node';\nimport { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { getNativeAudioParam } from '../helpers/get-native-audio-param';\nimport { getNativeContext } from '../helpers/get-native-context';\nimport { getValueForKey } from '../helpers/get-value-for-key';\nimport { insertElementInSet } from '../helpers/insert-element-in-set';\nimport { isActiveAudioNode } from '../helpers/is-active-audio-node';\nimport { isPassiveAudioNode } from '../helpers/is-passive-audio-node';\nimport { pickElementFromSet } from '../helpers/pick-element-from-set';\nimport { setInternalState } from '../helpers/set-internal-state';\nimport { setInternalStateToPassiveWhenNecessary } from '../helpers/set-internal-state-to-passive-when-necessary';\nimport { testAudioNodeDisconnectMethodSupport } from '../helpers/test-audio-node-disconnect-method-support';\nimport { wrapAudioNodeDisconnectMethod } from '../helpers/wrap-audio-node-disconnect-method';\nconst addAudioNode = (context, audioNode, audioNoderRender, nativeAudioNode) => {\n    const activeInputs = [];\n    for (let i = 0; i < nativeAudioNode.numberOfInputs; i += 1) {\n        activeInputs.push(new Set());\n    }\n    const { nodes } = getAudioGraph(context);\n    nodes.set(audioNode, {\n        activeInputs,\n        outputs: new Set(),\n        passiveInputs: new WeakMap(),\n        renderer: audioNoderRender\n    });\n};\nconst addActiveInputConnectionToAudioNode = (activeInputs, source, [output, input, eventListener], ignoreDuplicates) => {\n    insertElementInSet(activeInputs[input], [source, output, eventListener], (activeInputConnection) => (activeInputConnection[0] === source && activeInputConnection[1] === output), ignoreDuplicates);\n};\nconst addActiveInputConnectionToAudioParam = (activeInputs, source, [output, eventListener], ignoreDuplicates) => {\n    insertElementInSet(activeInputs, [source, output, eventListener], (activeInputConnection) => (activeInputConnection[0] === source && activeInputConnection[1] === output), ignoreDuplicates);\n};\nconst deleteActiveInputConnectionToAudioNode = (activeInputs, source, output, input) => {\n    return pickElementFromSet(activeInputs[input], (activeInputConnection) => (activeInputConnection[0] === source && activeInputConnection[1] === output));\n};\nconst deleteActiveInputConnectionToAudioParam = (activeInputs, source, output) => {\n    return pickElementFromSet(activeInputs, (activeInputConnection) => (activeInputConnection[0] === source && activeInputConnection[1] === output));\n};\nconst addPassiveInputConnectionToAudioNode = (passiveInputs, input, [source, output, eventListener], ignoreDuplicates) => {\n    const passiveInputConnections = passiveInputs.get(source);\n    if (passiveInputConnections === undefined) {\n        passiveInputs.set(source, new Set([[output, input, eventListener]]));\n    }\n    else {\n        insertElementInSet(passiveInputConnections, [output, input, eventListener], (passiveInputConnection) => (passiveInputConnection[0] === output && passiveInputConnection[1] === input), ignoreDuplicates);\n    }\n};\nconst addPassiveInputConnectionToAudioParam = (passiveInputs, [source, output, eventListener], ignoreDuplicates) => {\n    const passiveInputConnections = passiveInputs.get(source);\n    if (passiveInputConnections === undefined) {\n        passiveInputs.set(source, new Set([[output, eventListener]]));\n    }\n    else {\n        insertElementInSet(passiveInputConnections, [output, eventListener], (passiveInputConnection) => (passiveInputConnection[0] === output), ignoreDuplicates);\n    }\n};\nconst deletePassiveInputConnectionToAudioNode = (passiveInputs, source, output, input) => {\n    const passiveInputConnections = getValueForKey(passiveInputs, source);\n    const matchingConnection = pickElementFromSet(passiveInputConnections, (passiveInputConnection) => (passiveInputConnection[0] === output && passiveInputConnection[1] === input));\n    if (passiveInputConnections.size === 0) {\n        passiveInputs.delete(source);\n    }\n    return matchingConnection;\n};\nconst deletePassiveInputConnectionToAudioParam = (passiveInputs, source, output) => {\n    const passiveInputConnections = getValueForKey(passiveInputs, source);\n    const matchingConnection = pickElementFromSet(passiveInputConnections, (passiveInputConnection) => (passiveInputConnection[0] === output));\n    if (passiveInputConnections.size === 0) {\n        passiveInputs.delete(source);\n    }\n    return matchingConnection;\n};\nconst addConnectionToAudioNodeOfAudioContext = (source, destination, output, input) => {\n    const { activeInputs, passiveInputs } = getAudioNodeConnections(destination);\n    const { outputs } = getAudioNodeConnections(source);\n    const eventListeners = getEventListenersOfAudioNode(source);\n    const eventListener = ((type) => {\n        const nativeDestinationAudioNode = getNativeAudioNode(destination);\n        const nativeSourceAudioNode = getNativeAudioNode(source);\n        if (type === 'active') {\n            const partialConnection = deletePassiveInputConnectionToAudioNode(passiveInputs, source, output, input);\n            addActiveInputConnectionToAudioNode(activeInputs, source, partialConnection, false);\n            connectNativeAudioNodeToNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output, input);\n            if (isPassiveAudioNode(destination)) {\n                setInternalState(destination, 'active');\n            }\n        }\n        else if (type === 'passive') {\n            const partialConnection = deleteActiveInputConnectionToAudioNode(activeInputs, source, output, input);\n            addPassiveInputConnectionToAudioNode(passiveInputs, input, partialConnection, false);\n            disconnectNativeAudioNodeFromNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output, input);\n            if (isActiveAudioNode(destination)) {\n                setInternalStateToPassiveWhenNecessary(destination, activeInputs);\n            }\n        }\n    });\n    if (insertElementInSet(outputs, [destination, output, input], (outputConnection) => (outputConnection[0] === destination && outputConnection[1] === output && outputConnection[2] === input), true)) {\n        eventListeners.add(eventListener);\n        if (isActiveAudioNode(source)) {\n            addActiveInputConnectionToAudioNode(activeInputs, source, [output, input, eventListener], true);\n        }\n        else {\n            addPassiveInputConnectionToAudioNode(passiveInputs, input, [source, output, eventListener], true);\n        }\n    }\n};\nconst addConnectionToAudioNodeOfOfflineAudioContext = (source, destination, output, input) => {\n    const { activeInputs } = getAudioNodeConnections(destination);\n    const { outputs } = getAudioNodeConnections(source);\n    if (insertElementInSet(outputs, [destination, output, input], (outputConnection) => (outputConnection[0] === destination && outputConnection[1] === output && outputConnection[2] === input), true)) {\n        addActiveInputConnectionToAudioNode(activeInputs, source, [output, input, null], true);\n    }\n};\nconst addConnectionToAudioParamOfAudioContext = (source, destination, output) => {\n    const { activeInputs, passiveInputs } = getAudioParamConnections(source.context, destination);\n    const { outputs } = getAudioNodeConnections(source);\n    const eventListeners = getEventListenersOfAudioNode(source);\n    const eventListener = ((type) => {\n        const nativeAudioNode = getNativeAudioNode(source);\n        const nativeAudioParam = getNativeAudioParam(destination);\n        if (type === 'active') {\n            const partialConnection = deletePassiveInputConnectionToAudioParam(passiveInputs, source, output);\n            addActiveInputConnectionToAudioParam(activeInputs, source, partialConnection, false);\n            nativeAudioNode.connect(nativeAudioParam, output);\n        }\n        else if (type === 'passive') {\n            const partialConnection = deleteActiveInputConnectionToAudioParam(activeInputs, source, output);\n            addPassiveInputConnectionToAudioParam(passiveInputs, partialConnection, false);\n            nativeAudioNode.disconnect(nativeAudioParam, output);\n        }\n    });\n    if (insertElementInSet(outputs, [destination, output], (outputConnection) => (outputConnection[0] === destination && outputConnection[1] === output), true)) {\n        eventListeners.add(eventListener);\n        if (isActiveAudioNode(source)) {\n            addActiveInputConnectionToAudioParam(activeInputs, source, [output, eventListener], true);\n        }\n        else {\n            addPassiveInputConnectionToAudioParam(passiveInputs, [source, output, eventListener], true);\n        }\n    }\n};\nconst addConnectionToAudioParamOfOfflineAudioContext = (source, destination, output) => {\n    const { activeInputs } = getAudioParamConnections(source.context, destination);\n    const { outputs } = getAudioNodeConnections(source);\n    if (insertElementInSet(outputs, [destination, output], (outputConnection) => (outputConnection[0] === destination && outputConnection[1] === output), true)) {\n        addActiveInputConnectionToAudioParam(activeInputs, source, [output, null], true);\n    }\n};\nconst deleteActiveInputConnection = (activeInputConnections, source, output) => {\n    for (const activeInputConnection of activeInputConnections) {\n        if (activeInputConnection[0] === source && activeInputConnection[1] === output) {\n            activeInputConnections.delete(activeInputConnection);\n            return activeInputConnection;\n        }\n    }\n    return null;\n};\nconst deleteInputConnectionOfAudioNode = (source, destination, output, input) => {\n    const { activeInputs, passiveInputs } = getAudioNodeConnections(destination);\n    const activeInputConnection = deleteActiveInputConnection(activeInputs[input], source, output);\n    if (activeInputConnection === null) {\n        const passiveInputConnection = deletePassiveInputConnectionToAudioNode(passiveInputs, source, output, input);\n        return [passiveInputConnection[2], 'passive'];\n    }\n    return [activeInputConnection[2], 'active'];\n};\nconst deleteInputConnectionOfAudioParam = (source, destination, output) => {\n    const { activeInputs, passiveInputs } = getAudioParamConnections(source.context, destination);\n    const activeInputConnection = deleteActiveInputConnection(activeInputs, source, output);\n    if (activeInputConnection === null) {\n        const passiveInputConnection = deletePassiveInputConnectionToAudioParam(passiveInputs, source, output);\n        return [passiveInputConnection[1], 'passive'];\n    }\n    return [activeInputConnection[2], 'active'];\n};\nconst deleteInputsOfAudioNode = (source, destination, output, input) => {\n    const [listener, internalState] = deleteInputConnectionOfAudioNode(source, destination, output, input);\n    if (listener !== null) {\n        deleteEventListenerOfAudioNode(source, listener);\n        if (internalState === 'active') {\n            disconnectNativeAudioNodeFromNativeAudioNode(getNativeAudioNode(source), getNativeAudioNode(destination), output, input);\n        }\n    }\n    if (isActiveAudioNode(destination)) {\n        const { activeInputs } = getAudioNodeConnections(destination);\n        setInternalStateToPassiveWhenNecessary(destination, activeInputs);\n    }\n};\nconst deleteInputsOfAudioParam = (source, destination, output) => {\n    const [listener, internalState] = deleteInputConnectionOfAudioParam(source, destination, output);\n    if (listener !== null) {\n        deleteEventListenerOfAudioNode(source, listener);\n        if (internalState === 'active') {\n            getNativeAudioNode(source)\n                .disconnect(getNativeAudioParam(destination), output);\n        }\n    }\n};\nconst deleteAnyConnection = (source) => {\n    const audioNodeConnectionsOfSource = getAudioNodeConnections(source);\n    for (const outputConnection of audioNodeConnectionsOfSource.outputs) {\n        if (isAudioNodeOutputConnection(outputConnection)) {\n            deleteInputsOfAudioNode(source, ...outputConnection);\n        }\n        else {\n            deleteInputsOfAudioParam(source, ...outputConnection);\n        }\n    }\n    audioNodeConnectionsOfSource.outputs.clear();\n};\nconst deleteConnectionAtOutput = (source, output) => {\n    const audioNodeConnectionsOfSource = getAudioNodeConnections(source);\n    for (const outputConnection of audioNodeConnectionsOfSource.outputs) {\n        if (outputConnection[1] === output) {\n            if (isAudioNodeOutputConnection(outputConnection)) {\n                deleteInputsOfAudioNode(source, ...outputConnection);\n            }\n            else {\n                deleteInputsOfAudioParam(source, ...outputConnection);\n            }\n            audioNodeConnectionsOfSource.outputs.delete(outputConnection);\n        }\n    }\n};\nconst deleteConnectionToDestination = (source, destination, output, input) => {\n    const audioNodeConnectionsOfSource = getAudioNodeConnections(source);\n    return Array\n        .from(audioNodeConnectionsOfSource.outputs)\n        .filter((outputConnection) => (outputConnection[0] === destination\n        && (output === undefined || outputConnection[1] === output)\n        && (input === undefined || outputConnection[2] === input)))\n        .reduce((numberOfDeletedConnections, outputConnection) => {\n        if (isAudioNodeOutputConnection(outputConnection)) {\n            deleteInputsOfAudioNode(source, ...outputConnection);\n        }\n        else {\n            deleteInputsOfAudioParam(source, ...outputConnection);\n        }\n        audioNodeConnectionsOfSource.outputs.delete(outputConnection);\n        return numberOfDeletedConnections + 1;\n    }, 0);\n};\nexport const createAudioNodeConstructor = (cacheTestResult, createIndexSizeError, createInvalidAccessError, createNotSupportedError, detectCycles, isNativeAudioNode, isNativeAudioParam, isNativeOfflineAudioContext) => {\n    return class AudioNode extends EventTarget {\n        constructor(context, internalState, nativeAudioNode, audioNodeRenderer) {\n            super(nativeAudioNode);\n            this._context = context;\n            this._nativeAudioNode = nativeAudioNode;\n            const nativeContext = getNativeContext(context);\n            // Bug #12: Safari does not support to disconnect a specific destination.\n            // @todo Make sure this is not used with an OfflineAudioContext.\n            if (!isNativeOfflineAudioContext(nativeContext) && true !== cacheTestResult(testAudioNodeDisconnectMethodSupport, () => {\n                return testAudioNodeDisconnectMethodSupport(nativeContext);\n            })) {\n                wrapAudioNodeDisconnectMethod(nativeAudioNode);\n            }\n            if (internalState === 'active') {\n                ACTIVE_AUDIO_NODE_STORE.add(this);\n            }\n            AUDIO_NODE_STORE.set(this, nativeAudioNode);\n            EVENT_LISTENERS.set(this, new Set());\n            addAudioNode(context, this, audioNodeRenderer, nativeAudioNode);\n        }\n        get channelCount() {\n            return this._nativeAudioNode.channelCount;\n        }\n        set channelCount(value) {\n            this._nativeAudioNode.channelCount = value;\n        }\n        get channelCountMode() {\n            return this._nativeAudioNode.channelCountMode;\n        }\n        set channelCountMode(value) {\n            this._nativeAudioNode.channelCountMode = value;\n        }\n        get channelInterpretation() {\n            return this._nativeAudioNode.channelInterpretation;\n        }\n        set channelInterpretation(value) {\n            this._nativeAudioNode.channelInterpretation = value;\n        }\n        get context() {\n            return this._context;\n        }\n        get numberOfInputs() {\n            return this._nativeAudioNode.numberOfInputs;\n        }\n        get numberOfOutputs() {\n            return this._nativeAudioNode.numberOfOutputs;\n        }\n        connect(destination, output = 0, input = 0) {\n            const nativeContext = getNativeContext(this._context);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            if (isNativeAudioNode(destination) || isNativeAudioParam(destination)) {\n                throw createInvalidAccessError();\n            }\n            if (isAudioNode(destination)) {\n                const nativeDestinationAudioNode = getNativeAudioNode(destination);\n                try {\n                    const connection = connectNativeAudioNodeToNativeAudioNode(this._nativeAudioNode, nativeDestinationAudioNode, output, input);\n                    if (isOffline || isPassiveAudioNode(this)) {\n                        this._nativeAudioNode.disconnect(...connection);\n                    }\n                    else if (isPassiveAudioNode(destination)) {\n                        setInternalState(destination, 'active');\n                    }\n                    // An AudioWorklet needs a connection because it otherwise may truncate the input array.\n                    // @todo Count the number of connections which depend on this auxiliary GainNode to know when it can be removed again.\n                    if (isAudioWorkletNode(destination)) {\n                        const auxiliaryGainNodes = AUXILIARY_GAIN_NODE_STORE.get(nativeDestinationAudioNode);\n                        if (auxiliaryGainNodes === undefined) {\n                            const nativeGainNode = nativeContext.createGain();\n                            nativeGainNode.connect(connection[0], 0, connection[2]);\n                            AUXILIARY_GAIN_NODE_STORE.set(nativeDestinationAudioNode, new Map([[input, nativeGainNode]]));\n                        }\n                        else if (auxiliaryGainNodes.get(input) === undefined) {\n                            const nativeGainNode = nativeContext.createGain();\n                            nativeGainNode.connect(connection[0], 0, connection[2]);\n                            auxiliaryGainNodes.set(input, nativeGainNode);\n                        }\n                    }\n                }\n                catch (err) {\n                    // Bug #41: Only Chrome, Firefox and Opera throw the correct exception by now.\n                    if (err.code === 12) {\n                        throw createInvalidAccessError();\n                    }\n                    throw err; // tslint:disable-line:rxjs-throw-error\n                }\n                detectCycles(this, destination);\n                if (isOffline) {\n                    addConnectionToAudioNodeOfOfflineAudioContext(this, destination, output, input);\n                }\n                else {\n                    addConnectionToAudioNodeOfAudioContext(this, destination, output, input);\n                }\n                return destination;\n            }\n            const nativeAudioParam = getNativeAudioParam(destination);\n            /*\n             * Bug #147 & #153: Safari does not support to connect an input signal to the playbackRate AudioParam of an\n             * AudioBufferSourceNode. This can't be easily detected and that's why the outdated name property is used here to identify\n             * Safari.\n             */\n            if (nativeAudioParam.name === 'playbackRate') {\n                throw createNotSupportedError();\n            }\n            try {\n                this._nativeAudioNode.connect(nativeAudioParam, output);\n                if (isOffline || isPassiveAudioNode(this)) {\n                    this._nativeAudioNode.disconnect(nativeAudioParam, output);\n                }\n            }\n            catch (err) {\n                // Bug #58: Only Firefox does throw an InvalidStateError yet.\n                if (err.code === 12) {\n                    throw createInvalidAccessError();\n                }\n                throw err; // tslint:disable-line:rxjs-throw-error\n            }\n            detectCycles(this, destination);\n            if (isOffline) {\n                addConnectionToAudioParamOfOfflineAudioContext(this, destination, output);\n            }\n            else {\n                addConnectionToAudioParamOfAudioContext(this, destination, output);\n            }\n        }\n        disconnect(destinationOrOutput, output, input) {\n            if (destinationOrOutput === undefined) {\n                deleteAnyConnection(this);\n            }\n            else if (typeof destinationOrOutput === 'number') {\n                if (destinationOrOutput < 0 || destinationOrOutput >= this.numberOfOutputs) {\n                    throw createIndexSizeError();\n                }\n                deleteConnectionAtOutput(this, destinationOrOutput);\n            }\n            else {\n                if (output !== undefined && (output < 0 || output >= this.numberOfOutputs)) {\n                    throw createIndexSizeError();\n                }\n                if (isAudioNode(destinationOrOutput)\n                    && input !== undefined\n                    && (input < 0 || input >= destinationOrOutput.numberOfInputs)) {\n                    throw createIndexSizeError();\n                }\n                if (deleteConnectionToDestination(this, destinationOrOutput, output, input) === 0) {\n                    throw createInvalidAccessError();\n                }\n            }\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-node-constructor.js.map","export class ReadOnlyMap {\n    constructor(parameters) {\n        this._map = new Map(parameters);\n    }\n    get size() {\n        return this._map.size;\n    }\n    entries() {\n        return this._map.entries();\n    }\n    forEach(callback, thisArg = null) {\n        return this._map.forEach((value, key) => callback.call(thisArg, value, key, this));\n    }\n    get(name) {\n        return this._map.get(name);\n    }\n    has(name) {\n        return this._map.has(name);\n    }\n    keys() {\n        return this._map.keys();\n    }\n    values() {\n        return this._map.values();\n    }\n}\n//# sourceMappingURL=/build/es2018/read-only-map.js.map","import { NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS } from '../globals';\nimport { getNativeContext } from '../helpers/get-native-context';\nimport { wrapEventListener } from '../helpers/wrap-event-listener';\nimport { ReadOnlyMap } from '../read-only-map';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    // Bug #61: The channelCountMode should be 'max' according to the spec but is set to 'explicit' to achieve consistent behavior.\n    channelCountMode: 'explicit',\n    channelInterpretation: 'speakers',\n    numberOfInputs: 1,\n    numberOfOutputs: 1,\n    outputChannelCount: undefined,\n    parameterData: {},\n    processorOptions: {}\n};\nconst createChannelCount = (length) => {\n    const channelCount = [];\n    for (let i = 0; i < length; i += 1) {\n        channelCount.push(1);\n    }\n    return channelCount;\n};\nconst sanitizedOptions = (options) => {\n    return {\n        ...options,\n        outputChannelCount: (options.outputChannelCount !== undefined) ?\n            options.outputChannelCount :\n            (options.numberOfInputs === 1 && options.numberOfOutputs === 1) ?\n                /*\n                 * Bug #61: This should be the computedNumberOfChannels, but unfortunately that is almost impossible to fake. That's why\n                 * the channelCountMode is required to be 'explicit' as long as there is not a native implementation in every browser. That\n                 * makes sure the computedNumberOfChannels is equivilant to the channelCount which makes it much easier to compute.\n                 */\n                [options.channelCount] :\n                createChannelCount(options.numberOfOutputs)\n    };\n};\nexport const createAudioWorkletNodeConstructor = (createAudioParam, createAudioWorkletNodeRenderer, createNativeAudioWorkletNode, gainNodeConstructor, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor, noneAudioDestinationNodeConstructor) => {\n    return class AudioWorkletNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, name, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const mergedOptions = sanitizedOptions({ ...DEFAULT_OPTIONS, ...options });\n            const nodeNameToProcessorConstructorMap = NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.get(nativeContext);\n            const processorConstructor = (nodeNameToProcessorConstructorMap === undefined) ?\n                undefined :\n                nodeNameToProcessorConstructorMap.get(name);\n            const nativeAudioWorkletNode = createNativeAudioWorkletNode(nativeContext, isOffline ? null : context.baseLatency, nativeAudioWorkletNodeConstructor, name, processorConstructor, mergedOptions);\n            const audioWorkletNodeRenderer = ((isOffline)\n                ? createAudioWorkletNodeRenderer(name, mergedOptions, processorConstructor)\n                : null);\n            /*\n             * @todo Add a mechanism to switch an AudioWorkletNode to passive once the process() function of the AudioWorkletProcessor\n             * returns false.\n             */\n            super(context, 'active', nativeAudioWorkletNode, audioWorkletNodeRenderer);\n            const parameters = [];\n            nativeAudioWorkletNode.parameters.forEach((nativeAudioParam, nm) => {\n                const audioParam = createAudioParam(this, isOffline, nativeAudioParam);\n                parameters.push([nm, audioParam]);\n            });\n            this._nativeAudioWorkletNode = nativeAudioWorkletNode;\n            // Bug #86 & #87: Every browser but Firefox needs to get an unused output which should not be exposed.\n            this._numberOfOutputs = (options.numberOfOutputs === 0) ? 0 : this._nativeAudioWorkletNode.numberOfOutputs;\n            this._onprocessorerror = null;\n            this._parameters = new ReadOnlyMap(parameters);\n            /*\n             * Bug #86 & #87: Every browser but Firefox needs an output to be connected.\n             *\n             * Bug #50: Only Edge does not yet allow to create AudioNodes on a closed AudioContext. Therefore this is currently faked by\n             * using another AudioContext. And that is the reason why this will fail in case of a closed AudioContext.\n             */\n            if (context.state !== 'closed') {\n                const gainNode = new gainNodeConstructor(context, { gain: 0 });\n                try {\n                    this\n                        .connect(gainNode)\n                        .connect(context.destination);\n                }\n                catch (err) {\n                    if (err.name !== 'IndexSizeError') {\n                        throw err; // tslint:disable-line:rxjs-throw-error\n                    }\n                }\n            }\n        }\n        get numberOfOutputs() {\n            return this._numberOfOutputs;\n        }\n        get onprocessorerror() {\n            return this._onprocessorerror;\n        }\n        set onprocessorerror(value) {\n            const wrappedListener = wrapEventListener(this, value);\n            this._nativeAudioWorkletNode.onprocessorerror = wrappedListener;\n            const nativeOnProcessorError = this._nativeAudioWorkletNode.onprocessorerror;\n            this._onprocessorerror = (nativeOnProcessorError === wrappedListener) ? value : nativeOnProcessorError;\n        }\n        get parameters() {\n            if (this._parameters === null) {\n                // @todo The definition that TypeScript uses of the AudioParamMap is lacking many methods.\n                return this._nativeAudioWorkletNode.parameters;\n            }\n            return this._parameters;\n        }\n        get port() {\n            return this._nativeAudioWorkletNode.port;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-worklet-node-constructor.js.map","export function copyFromChannel(audioBuffer, \n// @todo There is currently no way to define something like { [ key: number | string ]: Float32Array }\nparent, key, channelNumber, bufferOffset) {\n    if (typeof audioBuffer.copyFromChannel === 'function') {\n        // The byteLength will be 0 when the ArrayBuffer was transferred.\n        if (parent[key].byteLength === 0) {\n            parent[key] = new Float32Array(128);\n        }\n        audioBuffer.copyFromChannel(parent[key], channelNumber, bufferOffset);\n        // Bug #5: Safari does not support copyFromChannel().\n    }\n    else {\n        const channelData = audioBuffer.getChannelData(channelNumber);\n        // The byteLength will be 0 when the ArrayBuffer was transferred.\n        if (parent[key].byteLength === 0) {\n            parent[key] = channelData.slice(bufferOffset, bufferOffset + 128);\n        }\n        else {\n            const slicedInput = new Float32Array(channelData.buffer, bufferOffset * Float32Array.BYTES_PER_ELEMENT, 128);\n            parent[key].set(slicedInput);\n        }\n    }\n}\n//# sourceMappingURL=/build/es2018/helpers/copy-from-channel.js.map","export const copyToChannel = (audioBuffer, parent, key, channelNumber, bufferOffset) => {\n    if (typeof audioBuffer.copyToChannel === 'function') {\n        // The byteLength will be 0 when the ArrayBuffer was transferred.\n        if (parent[key].byteLength !== 0) {\n            audioBuffer.copyToChannel(parent[key], channelNumber, bufferOffset);\n        }\n        // Bug #5: Safari does not support copyToChannel().\n    }\n    else {\n        // The byteLength will be 0 when the ArrayBuffer was transferred.\n        if (parent[key].byteLength !== 0) {\n            audioBuffer\n                .getChannelData(channelNumber)\n                .set(parent[key], bufferOffset);\n        }\n    }\n};\n//# sourceMappingURL=/build/es2018/helpers/copy-to-channel.js.map","export const createNestedArrays = (x, y) => {\n    const arrays = [];\n    for (let i = 0; i < x; i += 1) {\n        const array = [];\n        const length = (typeof y === 'number') ? y : y[i];\n        for (let j = 0; j < length; j += 1) {\n            array.push(new Float32Array(128));\n        }\n        arrays.push(array);\n    }\n    return arrays;\n};\n//# sourceMappingURL=/build/es2018/helpers/create-nested-arrays.js.map","import { connectAudioParam } from '../helpers/connect-audio-param';\nimport { copyFromChannel } from '../helpers/copy-from-channel';\nimport { copyToChannel } from '../helpers/copy-to-channel';\nimport { createNestedArrays } from '../helpers/create-nested-arrays';\nimport { getAudioNodeConnections } from '../helpers/get-audio-node-connections';\nimport { getAudioWorkletProcessor } from '../helpers/get-audio-worklet-processor';\nimport { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { renderAutomation } from '../helpers/render-automation';\nimport { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nconst processBuffer = async (proxy, renderedBuffer, nativeOfflineAudioContext, options, processorConstructor) => {\n    const { length } = renderedBuffer;\n    const numberOfInputChannels = options.channelCount * options.numberOfInputs;\n    const numberOfOutputChannels = options.outputChannelCount.reduce((sum, value) => sum + value, 0);\n    const processedBuffer = (numberOfOutputChannels === 0) ? null : nativeOfflineAudioContext.createBuffer(numberOfOutputChannels, length, renderedBuffer.sampleRate);\n    if (processorConstructor === undefined) {\n        throw new Error('Missing the processor constructor.');\n    }\n    const audioNodeConnections = getAudioNodeConnections(proxy);\n    const audioWorkletProcessor = await getAudioWorkletProcessor(nativeOfflineAudioContext, proxy);\n    const inputs = createNestedArrays(options.numberOfInputs, options.channelCount);\n    const outputs = createNestedArrays(options.numberOfOutputs, options.outputChannelCount);\n    const parameters = Array\n        .from(proxy.parameters.keys())\n        .reduce((prmtrs, name) => ({ ...prmtrs, [name]: new Float32Array(128) }), {});\n    for (let i = 0; i < length; i += 128) {\n        for (let j = 0; j < options.numberOfInputs; j += 1) {\n            for (let k = 0; k < options.channelCount; k += 1) {\n                copyFromChannel(renderedBuffer, inputs[j], k, k, i);\n            }\n        }\n        if (processorConstructor.parameterDescriptors !== undefined) {\n            processorConstructor.parameterDescriptors.forEach(({ name }, index) => {\n                copyFromChannel(renderedBuffer, parameters, name, numberOfInputChannels + index, i);\n            });\n        }\n        for (let j = 0; j < options.numberOfInputs; j += 1) {\n            for (let k = 0; k < options.outputChannelCount[j]; k += 1) {\n                // The byteLength will be 0 when the ArrayBuffer was transferred.\n                if (outputs[j][k].byteLength === 0) {\n                    outputs[j][k] = new Float32Array(128);\n                }\n            }\n        }\n        try {\n            const potentiallyEmptyInputs = inputs\n                .map((input, index) => {\n                if (audioNodeConnections.activeInputs[index].size === 0) {\n                    return [new Float32Array(0)];\n                }\n                return input;\n            });\n            const activeSourceFlag = audioWorkletProcessor.process(potentiallyEmptyInputs, outputs, parameters);\n            if (processedBuffer !== null) {\n                for (let j = 0, outputChannelSplitterNodeOutput = 0; j < options.numberOfOutputs; j += 1) {\n                    for (let k = 0; k < options.outputChannelCount[j]; k += 1) {\n                        copyToChannel(processedBuffer, outputs[j], k, outputChannelSplitterNodeOutput + k, i);\n                    }\n                    outputChannelSplitterNodeOutput += options.outputChannelCount[j];\n                }\n            }\n            if (!activeSourceFlag) {\n                break;\n            }\n        }\n        catch (error) {\n            proxy.dispatchEvent(new ErrorEvent('processorerror', { error }));\n            break;\n        }\n    }\n    return processedBuffer;\n};\nexport const createAudioWorkletNodeRendererFactory = (connectMultipleOutputs, createNativeAudioBufferSourceNode, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, disconnectMultipleOutputs, nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor, renderNativeOfflineAudioContext) => {\n    return (name, options, processorConstructor) => {\n        const renderedNativeAudioNodes = new WeakMap();\n        const createAudioNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeAudioWorkletNode = getNativeAudioNode(proxy);\n            let nativeOutputNodes = null;\n            const nativeAudioWorkletNodeIsOwnedByContext = isOwnedByContext(nativeAudioWorkletNode, nativeOfflineAudioContext);\n            // Bug #61: Only Chrome & Opera have an implementation of the AudioWorkletNode yet.\n            if (nativeAudioWorkletNodeConstructor === null) {\n                const numberOfOutputChannels = options.outputChannelCount.reduce((sum, value) => sum + value, 0);\n                const outputChannelSplitterNode = createNativeChannelSplitterNode(nativeOfflineAudioContext, {\n                    channelCount: Math.max(1, numberOfOutputChannels),\n                    channelCountMode: 'explicit',\n                    channelInterpretation: 'discrete',\n                    numberOfOutputs: Math.max(1, numberOfOutputChannels)\n                });\n                const outputChannelMergerNodes = [];\n                for (let i = 0; i < proxy.numberOfOutputs; i += 1) {\n                    outputChannelMergerNodes.push(createNativeChannelMergerNode(nativeOfflineAudioContext, {\n                        channelCount: 1,\n                        channelCountMode: 'explicit',\n                        channelInterpretation: 'speakers',\n                        numberOfInputs: options.outputChannelCount[i]\n                    }));\n                }\n                // Bug #87: Expose at least one output to make this node connectable.\n                const outputAudioNodes = (options.numberOfOutputs === 0) ?\n                    [outputChannelSplitterNode] :\n                    outputChannelMergerNodes;\n                const outputGainNode = createNativeGainNode(nativeOfflineAudioContext, {\n                    channelCount: options.channelCount,\n                    channelCountMode: options.channelCountMode,\n                    channelInterpretation: options.channelInterpretation,\n                    gain: 1\n                });\n                outputGainNode.connect = connectMultipleOutputs.bind(null, outputAudioNodes);\n                outputGainNode.disconnect = disconnectMultipleOutputs.bind(null, outputAudioNodes);\n                nativeOutputNodes = [outputChannelSplitterNode, outputChannelMergerNodes, outputGainNode];\n            }\n            else if (!nativeAudioWorkletNodeIsOwnedByContext) {\n                nativeAudioWorkletNode = new nativeAudioWorkletNodeConstructor(nativeOfflineAudioContext, name);\n            }\n            renderedNativeAudioNodes.set(nativeOfflineAudioContext, (nativeOutputNodes === null) ? nativeAudioWorkletNode : nativeOutputNodes);\n            if (nativeOutputNodes !== null) {\n                const [outputChannelSplitterNode, outputChannelMergerNodes, outputGainNode] = nativeOutputNodes;\n                if (processorConstructor === undefined) {\n                    throw new Error('Missing the processor constructor.');\n                }\n                if (nativeOfflineAudioContextConstructor === null) {\n                    throw new Error('Missing the native OfflineAudioContext constructor.');\n                }\n                // Bug #47: The AudioDestinationNode in Edge and Safari gets not initialized correctly.\n                const numberOfInputChannels = proxy.channelCount * proxy.numberOfInputs;\n                const numberOfParameters = (processorConstructor.parameterDescriptors === undefined)\n                    ? 0\n                    : processorConstructor.parameterDescriptors.length;\n                const partialOfflineAudioContext = new nativeOfflineAudioContextConstructor(numberOfInputChannels + numberOfParameters, \n                // Ceil the length to the next full render quantum.\n                // Bug #17: Safari does not yet expose the length.\n                Math.ceil(proxy.context.length / 128) * 128, nativeOfflineAudioContext.sampleRate);\n                const gainNodes = [];\n                const inputChannelSplitterNodes = [];\n                for (let i = 0; i < options.numberOfInputs; i += 1) {\n                    gainNodes.push(createNativeGainNode(partialOfflineAudioContext, {\n                        channelCount: options.channelCount,\n                        channelCountMode: options.channelCountMode,\n                        channelInterpretation: options.channelInterpretation,\n                        gain: 1\n                    }));\n                    inputChannelSplitterNodes.push(createNativeChannelSplitterNode(partialOfflineAudioContext, {\n                        channelCount: options.channelCount,\n                        channelCountMode: 'explicit',\n                        channelInterpretation: 'discrete',\n                        numberOfOutputs: options.channelCount\n                    }));\n                }\n                const constantSourceNodes = await Promise\n                    .all(Array\n                    .from(proxy.parameters.values())\n                    .map(async (audioParam) => {\n                    const constantSourceNode = createNativeConstantSourceNode(partialOfflineAudioContext, {\n                        channelCount: 1,\n                        channelCountMode: 'explicit',\n                        channelInterpretation: 'discrete',\n                        offset: audioParam.value\n                    });\n                    await renderAutomation(proxy.context, partialOfflineAudioContext, audioParam, constantSourceNode.offset);\n                    return constantSourceNode;\n                }));\n                const inputChannelMergerNode = createNativeChannelMergerNode(partialOfflineAudioContext, {\n                    channelCount: 1,\n                    channelCountMode: 'explicit',\n                    channelInterpretation: 'speakers',\n                    numberOfInputs: Math.max(1, numberOfInputChannels + numberOfParameters)\n                });\n                for (let i = 0; i < options.numberOfInputs; i += 1) {\n                    gainNodes[i].connect(inputChannelSplitterNodes[i]);\n                    for (let j = 0; j < options.channelCount; j += 1) {\n                        inputChannelSplitterNodes[i].connect(inputChannelMergerNode, j, (i * options.channelCount) + j);\n                    }\n                }\n                for (const [index, constantSourceNode] of constantSourceNodes.entries()) {\n                    constantSourceNode.connect(inputChannelMergerNode, 0, numberOfInputChannels + index);\n                    constantSourceNode.start(0);\n                }\n                inputChannelMergerNode.connect(partialOfflineAudioContext.destination);\n                return Promise\n                    .all(gainNodes\n                    .map((gainNode) => renderInputsOfAudioNode(proxy, partialOfflineAudioContext, gainNode)))\n                    .then(() => renderNativeOfflineAudioContext(partialOfflineAudioContext))\n                    .then(async (renderedBuffer) => {\n                    const audioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext);\n                    const processedBuffer = await processBuffer(proxy, renderedBuffer, nativeOfflineAudioContext, options, processorConstructor);\n                    if (processedBuffer !== null) {\n                        audioBufferSourceNode.buffer = processedBuffer;\n                        audioBufferSourceNode.start(0);\n                    }\n                    audioBufferSourceNode.connect(outputChannelSplitterNode);\n                    for (let i = 0, outputChannelSplitterNodeOutput = 0; i < proxy.numberOfOutputs; i += 1) {\n                        const outputChannelMergerNode = outputChannelMergerNodes[i];\n                        for (let j = 0; j < options.outputChannelCount[i]; j += 1) {\n                            outputChannelSplitterNode.connect(outputChannelMergerNode, outputChannelSplitterNodeOutput + j, j);\n                        }\n                        outputChannelSplitterNodeOutput += options.outputChannelCount[i];\n                    }\n                    return outputGainNode;\n                });\n            }\n            if (!nativeAudioWorkletNodeIsOwnedByContext) {\n                for (const [nm, audioParam] of proxy.parameters.entries()) {\n                    await renderAutomation(proxy.context, nativeOfflineAudioContext, audioParam, \n                    // @todo The definition that TypeScript uses of the AudioParamMap is lacking many methods.\n                    nativeAudioWorkletNode.parameters.get(nm));\n                }\n            }\n            else {\n                for (const [nm, audioParam] of proxy.parameters.entries()) {\n                    await connectAudioParam(proxy.context, nativeOfflineAudioContext, audioParam, \n                    // @todo The definition that TypeScript uses of the AudioParamMap is lacking many methods.\n                    nativeAudioWorkletNode.parameters.get(nm));\n                }\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioWorkletNode);\n            return nativeAudioWorkletNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeAudioWorkletNodeOrOutputNodes = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeAudioWorkletNodeOrOutputNodes !== undefined) {\n                    const renderedNativeAudioWorkletNodeOrGainNode = Array.isArray(renderedNativeAudioWorkletNodeOrOutputNodes)\n                        ? renderedNativeAudioWorkletNodeOrOutputNodes[2]\n                        : renderedNativeAudioWorkletNodeOrOutputNodes;\n                    return Promise.resolve(renderedNativeAudioWorkletNodeOrGainNode);\n                }\n                return createAudioNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-worklet-node-renderer-factory.js.map","import { NODE_TO_PROCESSOR_MAPS } from '../globals';\nimport { getNativeAudioNode } from './get-native-audio-node';\nimport { getValueForKey } from './get-value-for-key';\nexport const getAudioWorkletProcessor = (nativeOfflineAudioContext, proxy) => {\n    const nodeToProcessorMap = getValueForKey(NODE_TO_PROCESSOR_MAPS, nativeOfflineAudioContext);\n    const nativeAudioWorkletNode = getNativeAudioNode(proxy);\n    return getValueForKey(nodeToProcessorMap, nativeAudioWorkletNode);\n};\n//# sourceMappingURL=/build/es2018/helpers/get-audio-worklet-processor.js.map","import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { getNativeContext } from '../helpers/get-native-context';\nconst DEFAULT_OPTIONS = {\n    Q: 1,\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    detune: 0,\n    frequency: 350,\n    gain: 0,\n    type: 'lowpass'\n};\nexport const createBiquadFilterNodeConstructor = (createAudioParam, createBiquadFilterNodeRenderer, createInvalidAccessError, createNativeBiquadFilterNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class BiquadFilterNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const biquadFilterNodeRenderer = ((isOffline) ? createBiquadFilterNodeRenderer() : null);\n            super(context, 'passive', nativeBiquadFilterNode, biquadFilterNodeRenderer);\n            // Bug #80: Edge & Safari do not export the correct values for maxValue and minValue.\n            this._Q = createAudioParam(this, isOffline, nativeBiquadFilterNode.Q, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            // Bug #78: Edge & Safari do not export the correct values for maxValue and minValue.\n            this._detune = createAudioParam(this, isOffline, nativeBiquadFilterNode.detune, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            // Bug #77: Chrome, Edge, Firefox, Opera & Safari do not export the correct values for maxValue and minValue.\n            this._frequency = createAudioParam(this, isOffline, nativeBiquadFilterNode.frequency, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            // Bug #79: Edge & Safari do not export the correct values for maxValue and minValue.\n            this._gain = createAudioParam(this, isOffline, nativeBiquadFilterNode.gain, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            this._nativeBiquadFilterNode = nativeBiquadFilterNode;\n        }\n        get Q() {\n            return this._Q;\n        }\n        get detune() {\n            return this._detune;\n        }\n        get frequency() {\n            return this._frequency;\n        }\n        get gain() {\n            return this._gain;\n        }\n        get type() {\n            return this._nativeBiquadFilterNode.type;\n        }\n        set type(value) {\n            this._nativeBiquadFilterNode.type = value;\n        }\n        getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {\n            this._nativeBiquadFilterNode.getFrequencyResponse(frequencyHz, magResponse, phaseResponse);\n            // Bug #68: Only Chrome & Opera do throw an error if the parameters differ in their length.\n            if ((frequencyHz.length !== magResponse.length) || (magResponse.length !== phaseResponse.length)) {\n                throw createInvalidAccessError();\n            }\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/biquad-filter-node-constructor.js.map","import { getNativeContext } from '../helpers/get-native-context';\nconst DEFAULT_OPTIONS = {\n    channelCount: 1,\n    channelCountMode: 'explicit',\n    channelInterpretation: 'speakers',\n    numberOfInputs: 6\n};\nexport const createChannelMergerNodeConstructor = (createChannelMergerNodeRenderer, createNativeChannelMergerNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class ChannelMergerNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeChannelMergerNode = createNativeChannelMergerNode(nativeContext, mergedOptions);\n            const channelMergerNodeRenderer = ((isNativeOfflineAudioContext(nativeContext))\n                ? createChannelMergerNodeRenderer()\n                : null);\n            super(context, 'passive', nativeChannelMergerNode, channelMergerNodeRenderer);\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/channel-merger-node-constructor.js.map","import { getNativeContext } from '../helpers/get-native-context';\nconst DEFAULT_OPTIONS = {\n    channelCount: 6,\n    channelCountMode: 'explicit',\n    channelInterpretation: 'discrete',\n    numberOfOutputs: 6\n};\nconst sanitizedOptions = (options) => {\n    return { ...options, channelCount: options.numberOfOutputs };\n};\nexport const createChannelSplitterNodeConstructor = (createChannelSplitterNodeRenderer, createNativeChannelSplitterNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class ChannelSplitterNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = sanitizedOptions({ ...DEFAULT_OPTIONS, ...options });\n            const nativeChannelSplitterNode = createNativeChannelSplitterNode(nativeContext, mergedOptions);\n            const channelSplitterNodeRenderer = ((isNativeOfflineAudioContext(nativeContext))\n                ? createChannelSplitterNodeRenderer()\n                : null);\n            super(context, 'passive', nativeChannelSplitterNode, channelSplitterNodeRenderer);\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/channel-splitter-node-constructor.js.map","import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { getNativeContext } from '../helpers/get-native-context';\nimport { setInternalState } from '../helpers/set-internal-state';\nimport { wrapEventListener } from '../helpers/wrap-event-listener';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    offset: 1\n};\nexport const createConstantSourceNodeConstructor = (createAudioParam, createConstantSourceNodeRendererFactory, createNativeConstantSourceNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class ConstantSourceNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeConstantSourceNode = createNativeConstantSourceNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const constantSourceNodeRenderer = ((isOffline)\n                ? createConstantSourceNodeRendererFactory()\n                : null);\n            super(context, 'passive', nativeConstantSourceNode, constantSourceNodeRenderer);\n            this._constantSourceNodeRenderer = constantSourceNodeRenderer;\n            this._nativeConstantSourceNode = nativeConstantSourceNode;\n            /*\n             * Bug #62 & #74: Edge & Safari do not support ConstantSourceNodes and do not export the correct values for maxValue and\n             * minValue for GainNodes.\n             */\n            this._offset = createAudioParam(this, isOffline, nativeConstantSourceNode.offset, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            this._onended = null;\n        }\n        get offset() {\n            return this._offset;\n        }\n        get onended() {\n            return this._onended;\n        }\n        set onended(value) {\n            const wrappedListener = wrapEventListener(this, value);\n            this._nativeConstantSourceNode.onended = wrappedListener;\n            const nativeOnEnded = this._nativeConstantSourceNode.onended;\n            this._onended = (nativeOnEnded === wrappedListener) ? value : nativeOnEnded;\n        }\n        start(when = 0) {\n            this._nativeConstantSourceNode.start(when);\n            if (this._constantSourceNodeRenderer !== null) {\n                this._constantSourceNodeRenderer.start = when;\n            }\n            else {\n                setInternalState(this, 'active');\n                const setInternalStateToInactive = () => {\n                    this._nativeConstantSourceNode.removeEventListener('ended', setInternalStateToInactive);\n                    // @todo Determine a meaningful delay instead of just using one second.\n                    setTimeout(() => setInternalState(this, 'passive'), 1000);\n                };\n                this._nativeConstantSourceNode.addEventListener('ended', setInternalStateToInactive);\n            }\n        }\n        stop(when = 0) {\n            this._nativeConstantSourceNode.stop(when);\n            if (this._constantSourceNodeRenderer !== null) {\n                this._constantSourceNodeRenderer.stop = when;\n            }\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/constant-source-node-constructor.js.map","import { getNativeContext } from '../helpers/get-native-context';\nconst DEFAULT_OPTIONS = {\n    buffer: null,\n    channelCount: 2,\n    channelCountMode: 'clamped-max',\n    channelInterpretation: 'speakers',\n    disableNormalization: false\n};\nexport const createConvolverNodeConstructor = (createConvolverNodeRenderer, createNativeConvolverNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class ConvolverNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeConvolverNode = createNativeConvolverNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const convolverNodeRenderer = ((isOffline) ? createConvolverNodeRenderer() : null);\n            super(context, 'passive', nativeConvolverNode, convolverNodeRenderer);\n            this._isBufferNullified = false;\n            this._nativeConvolverNode = nativeConvolverNode;\n        }\n        get buffer() {\n            if (this._isBufferNullified) {\n                return null;\n            }\n            return this._nativeConvolverNode.buffer;\n        }\n        set buffer(value) {\n            this._nativeConvolverNode.buffer = value;\n            // Bug #115: Safari does not allow to set the buffer to null.\n            if (value === null && this._nativeConvolverNode.buffer !== null) {\n                const nativeContext = this._nativeConvolverNode.context;\n                this._nativeConvolverNode.buffer = nativeContext.createBuffer(1, 1, nativeContext.sampleRate);\n                this._isBufferNullified = true;\n            }\n            else {\n                this._isBufferNullified = false;\n            }\n        }\n        get normalize() {\n            return this._nativeConvolverNode.normalize;\n        }\n        set normalize(value) {\n            this._nativeConvolverNode.normalize = value;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/convolver-node-constructor.js.map","import { getNativeContext } from '../helpers/get-native-context';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    delayTime: 0,\n    maxDelayTime: 1\n};\nexport const createDelayNodeConstructor = (createAudioParam, createDelayNodeRenderer, createNativeDelayNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class DelayNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeDelayNode = createNativeDelayNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const delayNodeRenderer = ((isOffline)\n                ? createDelayNodeRenderer(mergedOptions.maxDelayTime)\n                : null);\n            super(context, 'passive', nativeDelayNode, delayNodeRenderer);\n            // @todo Edge does not export the correct values for maxValue and minValue.\n            this._delayTime = createAudioParam(this, isOffline, nativeDelayNode.delayTime, mergedOptions.maxDelayTime, 0);\n        }\n        get delayTime() {\n            return this._delayTime;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/delay-node-constructor.js.map","import { isNativeAudioNode } from '../guards/native-audio-node';\nconst getOutputAudioNodeAtIndex = (createIndexSizeError, outputAudioNodes, output) => {\n    const outputAudioNode = outputAudioNodes[output];\n    if (outputAudioNode === undefined) {\n        throw createIndexSizeError();\n    }\n    return outputAudioNode;\n};\nexport const createDisconnectMultipleOutputs = (createIndexSizeError) => {\n    return (outputAudioNodes, destinationOrOutput = undefined, output = undefined, input = 0) => {\n        if (destinationOrOutput === undefined) {\n            return outputAudioNodes\n                .forEach((outputAudioNode) => outputAudioNode.disconnect());\n        }\n        if (typeof destinationOrOutput === 'number') {\n            return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, destinationOrOutput)\n                .disconnect();\n        }\n        if (isNativeAudioNode(destinationOrOutput)) {\n            if (output === undefined) {\n                return outputAudioNodes\n                    .forEach((outputAudioNode) => outputAudioNode.disconnect(destinationOrOutput));\n            }\n            if (input === undefined) {\n                return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output)\n                    .disconnect(destinationOrOutput, 0);\n            }\n            return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output)\n                .disconnect(destinationOrOutput, 0, input);\n        }\n        if (output === undefined) {\n            return outputAudioNodes\n                .forEach((outputAudioNode) => outputAudioNode.disconnect(destinationOrOutput));\n        }\n        return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output)\n            .disconnect(destinationOrOutput, 0);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/disconnect-multiple-outputs.js.map","import { getNativeContext } from '../helpers/get-native-context';\nconst DEFAULT_OPTIONS = {\n    attack: 0.003,\n    channelCount: 2,\n    channelCountMode: 'clamped-max',\n    channelInterpretation: 'speakers',\n    knee: 30,\n    ratio: 12,\n    release: 0.25,\n    threshold: -24\n};\nexport const createDynamicsCompressorNodeConstructor = (createAudioParam, createDynamicsCompressorNodeRenderer, createNativeDynamicsCompressorNode, createNotSupportedError, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class DynamicsCompressorNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const dynamicsCompressorNodeRenderer = ((isOffline)\n                ? createDynamicsCompressorNodeRenderer()\n                : null);\n            super(context, 'passive', nativeDynamicsCompressorNode, dynamicsCompressorNodeRenderer);\n            // Bug #110: Edge does not export the correct values for maxValue and minValue.\n            this._attack = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.attack, 1, 0);\n            this._knee = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.knee, 40, 0);\n            this._nativeDynamicsCompressorNode = nativeDynamicsCompressorNode;\n            this._ratio = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.ratio, 20, 1);\n            this._release = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.release, 1, 0);\n            this._threshold = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.threshold, 0, -100);\n        }\n        get attack() {\n            return this._attack;\n        }\n        /*\n         * Bug #108: Only Chrome, Firefox and Opera disallow a channelCount of three and above yet which is why the getter and setter needs\n         * to be overwritten here.\n         */\n        get channelCount() {\n            return this._nativeDynamicsCompressorNode.channelCount;\n        }\n        set channelCount(value) {\n            const previousChannelCount = this._nativeDynamicsCompressorNode.channelCount;\n            this._nativeDynamicsCompressorNode.channelCount = value;\n            if (value > 2) {\n                this._nativeDynamicsCompressorNode.channelCount = previousChannelCount;\n                throw createNotSupportedError();\n            }\n        }\n        /*\n         * Bug #109: Only Chrome, Firefox and Opera disallow a channelCountMode of 'max' yet which is why the getter and setter needs to be\n         * overwritten here.\n         */\n        get channelCountMode() {\n            return this._nativeDynamicsCompressorNode.channelCountMode;\n        }\n        set channelCountMode(value) {\n            const previousChannelCount = this._nativeDynamicsCompressorNode.channelCountMode;\n            this._nativeDynamicsCompressorNode.channelCountMode = value;\n            if (value === 'max') {\n                this._nativeDynamicsCompressorNode.channelCountMode = previousChannelCount;\n                throw createNotSupportedError();\n            }\n        }\n        get knee() {\n            return this._knee;\n        }\n        get ratio() {\n            return this._ratio;\n        }\n        get reduction() {\n            // Bug #111: Safari returns an AudioParam instead of a number.\n            if (typeof this._nativeDynamicsCompressorNode.reduction.value === 'number') {\n                return this._nativeDynamicsCompressorNode.reduction.value;\n            }\n            return this._nativeDynamicsCompressorNode.reduction;\n        }\n        get release() {\n            return this._release;\n        }\n        get threshold() {\n            return this._threshold;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/dynamics-compressor-node-constructor.js.map","import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { getNativeContext } from '../helpers/get-native-context';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    gain: 1\n};\nexport const createGainNodeConstructor = (createAudioParam, createGainNodeRenderer, createNativeGainNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class GainNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeGainNode = createNativeGainNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const gainNodeRenderer = ((isOffline) ? createGainNodeRenderer() : null);\n            super(context, 'passive', nativeGainNode, gainNodeRenderer);\n            // Bug #74: Edge & Safari do not export the correct values for maxValue and minValue.\n            this._gain = createAudioParam(this, isOffline, nativeGainNode.gain, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n        }\n        get gain() {\n            return this._gain;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/gain-node-constructor.js.map","export const createInvalidAccessError = () => {\n    try {\n        return new DOMException('', 'InvalidAccessError');\n    }\n    catch (err) {\n        // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.\n        err.code = 15;\n        err.name = 'InvalidAccessError';\n        return err;\n    }\n};\n//# sourceMappingURL=/build/es2018/factories/invalid-access-error.js.map","import { getNativeContext } from '../helpers/get-native-context';\nimport { wrapIIRFilterNodeGetFrequencyResponseMethod } from '../helpers/wrap-iir-filter-node-get-frequency-response-method';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers'\n};\nexport const createIIRFilterNodeConstructor = (createNativeIIRFilterNode, createIIRFilterNodeRenderer, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class IIRFilterNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options) {\n            const nativeContext = getNativeContext(context);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeIIRFilterNode = createNativeIIRFilterNode(nativeContext, isOffline ? null : context.baseLatency, mergedOptions);\n            const iirFilterNodeRenderer = ((isOffline)\n                ? createIIRFilterNodeRenderer(mergedOptions.feedback, mergedOptions.feedforward)\n                : null);\n            super(context, 'passive', nativeIIRFilterNode, iirFilterNodeRenderer);\n            // Bug #23 & #24: FirefoxDeveloper does not throw an InvalidAccessError.\n            // @todo Write a test which allows other browsers to remain unpatched.\n            wrapIIRFilterNodeGetFrequencyResponseMethod(nativeIIRFilterNode);\n            this._nativeIIRFilterNode = nativeIIRFilterNode;\n        }\n        getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {\n            return this._nativeIIRFilterNode.getFrequencyResponse(frequencyHz, magResponse, phaseResponse);\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/iir-filter-node-constructor.js.map","// This implementation as shamelessly inspired by source code of\n// tslint:disable-next-line:max-line-length\n// {@link https://chromium.googlesource.com/chromium/src.git/+/master/third_party/WebKit/Source/platform/audio/IIRFilter.cpp|Chromium's IIRFilter}.\nexport const filterBuffer = (feedback, feedbackLength, feedforward, feedforwardLength, minLength, xBuffer, yBuffer, bufferIndex, bufferLength, input, output) => {\n    const inputLength = input.length;\n    let i = bufferIndex;\n    for (let j = 0; j < inputLength; j += 1) {\n        let y = feedforward[0] * input[j];\n        for (let k = 1; k < minLength; k += 1) {\n            const x = (i - k) & (bufferLength - 1); // tslint:disable-line:no-bitwise\n            y += feedforward[k] * xBuffer[x];\n            y -= feedback[k] * yBuffer[x];\n        }\n        for (let k = minLength; k < feedforwardLength; k += 1) {\n            y += feedforward[k] * xBuffer[(i - k) & (bufferLength - 1)]; // tslint:disable-line:no-bitwise\n        }\n        for (let k = minLength; k < feedbackLength; k += 1) {\n            y -= feedback[k] * yBuffer[(i - k) & (bufferLength - 1)]; // tslint:disable-line:no-bitwise\n        }\n        xBuffer[i] = input[j];\n        yBuffer[i] = y;\n        i = (i + 1) & (bufferLength - 1); // tslint:disable-line:no-bitwise\n        output[j] = y;\n    }\n    return i;\n};\n//# sourceMappingURL=/build/es2018/helpers/filter-buffer.js.map","export const testPromiseSupport = (nativeContext) => {\n    // This 12 numbers represent the 48 bytes of an empty WAVE file with a single sample.\n    const uint32Array = new Uint32Array([\n        1179011410,\n        40,\n        1163280727,\n        544501094,\n        16,\n        131073,\n        44100,\n        176400,\n        1048580,\n        1635017060,\n        4,\n        0\n    ]);\n    try {\n        // Bug #1: Safari requires a successCallback.\n        const promise = nativeContext.decodeAudioData(uint32Array.buffer, () => {\n            // Ignore the success callback.\n        });\n        if (promise === undefined) {\n            return false;\n        }\n        promise.catch(() => {\n            // Ignore rejected errors.\n        });\n        return true;\n    }\n    catch (_a) {\n        // Ignore errors.\n    }\n    return false;\n};\n//# sourceMappingURL=/build/es2018/helpers/test-promise-support.js.map","import { testPromiseSupport } from '../helpers/test-promise-support';\nconst DEFAULT_OPTIONS = {\n    numberOfChannels: 1\n};\nexport const createMinimalOfflineAudioContextConstructor = (cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, minimalBaseAudioContextConstructor, startRendering) => {\n    return class MinimalOfflineAudioContext extends minimalBaseAudioContextConstructor {\n        constructor(options) {\n            const { length, numberOfChannels, sampleRate } = { ...DEFAULT_OPTIONS, ...options };\n            const nativeOfflineAudioContext = createNativeOfflineAudioContext(numberOfChannels, length, sampleRate);\n            // #21 Safari does not support promises and therefore would fire the statechange event before the promise can be resolved.\n            if (!cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeOfflineAudioContext))) {\n                nativeOfflineAudioContext.addEventListener('statechange', (() => {\n                    let i = 0;\n                    const delayStateChangeEvent = (event) => {\n                        if (this._state === 'running') {\n                            if (i > 0) {\n                                nativeOfflineAudioContext.removeEventListener('statechange', delayStateChangeEvent);\n                                event.stopImmediatePropagation();\n                                this._waitForThePromiseToSettle(event);\n                            }\n                            else {\n                                i += 1;\n                            }\n                        }\n                    };\n                    return delayStateChangeEvent;\n                })());\n            }\n            super(nativeOfflineAudioContext, numberOfChannels);\n            this._length = length;\n            this._nativeOfflineAudioContext = nativeOfflineAudioContext;\n            this._state = null;\n        }\n        get length() {\n            // Bug #17: Safari does not yet expose the length.\n            if (this._nativeOfflineAudioContext.length === undefined) {\n                return this._length;\n            }\n            return this._nativeOfflineAudioContext.length;\n        }\n        get state() {\n            return (this._state === null) ? this._nativeOfflineAudioContext.state : this._state;\n        }\n        startRendering() {\n            /*\n             * Bug #9 & #59: It is theoretically possible that startRendering() will first render a partialOfflineAudioContext. Therefore\n             * the state of the nativeOfflineAudioContext might no transition to running immediately.\n             */\n            if (this._state === 'running') {\n                return Promise.reject(createInvalidStateError());\n            }\n            this._state = 'running';\n            return startRendering(this.destination, this._nativeOfflineAudioContext)\n                .then((audioBuffer) => {\n                this._state = null;\n                /*\n                 * Bug #50: Deleting the AudioGraph is currently not possible anymore.\n                 * deleteAudioGraph(this, this._nativeOfflineAudioContext);\n                 */\n                return audioBuffer;\n            })\n                // @todo This could be written more elegantly when Promise.finally() becomes avalaible.\n                .catch((err) => {\n                this._state = null;\n                /*\n                 * Bug #50: Deleting the AudioGraph is currently not possible anymore.\n                 * deleteAudioGraph(this, this._nativeOfflineAudioContext);\n                 */\n                throw err; // tslint:disable-line:rxjs-throw-error\n            });\n        }\n        _waitForThePromiseToSettle(event) {\n            if (this._state === null) {\n                this._nativeOfflineAudioContext.dispatchEvent(event);\n            }\n            else {\n                setTimeout(() => this._waitForThePromiseToSettle(event));\n            }\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/minimal-offline-audio-context-constructor.js.map","export const assignNativeAudioNodeOption = (nativeAudioNode, options, option) => {\n    const value = options[option];\n    if (value !== undefined && value !== nativeAudioNode[option]) {\n        nativeAudioNode[option] = value;\n    }\n};\n//# sourceMappingURL=/build/es2018/helpers/assign-native-audio-node-option.js.map","import { assignNativeAudioNodeOption } from './assign-native-audio-node-option';\nexport const assignNativeAudioNodeOptions = (nativeAudioNode, options) => {\n    assignNativeAudioNodeOption(nativeAudioNode, options, 'channelCount');\n    assignNativeAudioNodeOption(nativeAudioNode, options, 'channelCountMode');\n    assignNativeAudioNodeOption(nativeAudioNode, options, 'channelInterpretation');\n};\n//# sourceMappingURL=/build/es2018/helpers/assign-native-audio-node-options.js.map","export const testAnalyserNodeGetFloatTimeDomainDataMethodSupport = (nativeAnalyserNode) => {\n    return typeof nativeAnalyserNode.getFloatTimeDomainData === 'function';\n};\n//# sourceMappingURL=/build/es2018/helpers/test-analyser-node-get-float-time-domain-data-method-support.js.map","export const assignNativeAudioNodeAudioParamValue = (nativeAudioNode, options, audioParam) => {\n    const value = options[audioParam];\n    if (value !== undefined && value !== nativeAudioNode[audioParam].value) {\n        nativeAudioNode[audioParam].value = value;\n    }\n};\n//# sourceMappingURL=/build/es2018/helpers/assign-native-audio-node-audio-param-value.js.map","export const wrapAudioScheduledSourceNodeStartMethodNegativeParameters = (nativeAudioScheduledSourceNode) => {\n    nativeAudioScheduledSourceNode.start = ((start) => {\n        return (when = 0, offset = 0, duration) => {\n            if ((typeof duration === 'number' && duration < 0) || offset < 0 || when < 0) {\n                throw new RangeError(\"The parameters can't be negative.\");\n            }\n            // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.\n            start.call(nativeAudioScheduledSourceNode, when, offset, duration);\n        };\n    })(nativeAudioScheduledSourceNode.start);\n};\n//# sourceMappingURL=/build/es2018/helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters.js.map","export const wrapAudioScheduledSourceNodeStopMethodNegativeParameters = (nativeAudioScheduledSourceNode) => {\n    nativeAudioScheduledSourceNode.stop = ((stop) => {\n        return (when = 0) => {\n            if (when < 0) {\n                throw new RangeError(\"The parameter can't be negative.\");\n            }\n            stop.call(nativeAudioScheduledSourceNode, when);\n        };\n    })(nativeAudioScheduledSourceNode.stop);\n};\n//# sourceMappingURL=/build/es2018/helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters.js.map","export const computeBufferSize = (baseLatency, sampleRate) => {\n    if (baseLatency === null) {\n        return 512;\n    }\n    return Math.max(512, Math.min(16384, Math.pow(2, Math.round(Math.log2(baseLatency * sampleRate)))));\n};\n//# sourceMappingURL=/build/es2018/helpers/compute-buffer-size.js.map","import { cloneAudioWorkletNodeOptions } from './clone-audio-worklet-node-options';\nexport const createAudioWorkletProcessorPromise = async (processorConstructor, audioWorkletNodeOptions) => {\n    const clonedAudioWorkletNodeOptions = await cloneAudioWorkletNodeOptions(audioWorkletNodeOptions);\n    return new processorConstructor(clonedAudioWorkletNodeOptions);\n};\n//# sourceMappingURL=/build/es2018/helpers/create-audio-worklet-processor-promise.js.map","export const cloneAudioWorkletNodeOptions = (audioWorkletNodeOptions) => {\n    return new Promise((resolve, reject) => {\n        const { port1, port2 } = new MessageChannel();\n        port1.onmessage = ({ data }) => {\n            port1.close();\n            port2.close();\n            resolve(data);\n        };\n        port1.onmessageerror = ({ data }) => {\n            port1.close();\n            port2.close();\n            reject(data);\n        };\n        // This will throw an error if the audioWorkletNodeOptions are not clonable.\n        port2.postMessage(audioWorkletNodeOptions);\n    });\n};\n//# sourceMappingURL=/build/es2018/helpers/clone-audio-worklet-node-options.js.map","import { isNativeAudioNode } from '../guards/native-audio-node';\nexport const interceptConnections = (original, interceptor) => {\n    original.connect = ((destination, \n    // @todo TypeScript can't infer the type for the parameters output and input in this case.\n    output = 0, // tslint:disable-line:no-inferrable-types\n    input = 0 // tslint:disable-line:no-inferrable-types\n    ) => {\n        if (isNativeAudioNode(destination)) {\n            // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.\n            interceptor.connect.call(interceptor, destination, output, input);\n            // Bug #11: Safari does not support chaining yet.\n            return destination;\n        }\n        // @todo TypeScript does still assume that connect() returns void.\n        return interceptor.connect.call(interceptor, destination, output);\n    });\n    original.disconnect = function () {\n        // @todo TypeScript cannot infer all the signatures yet.\n        interceptor.disconnect.apply(interceptor, arguments);\n    };\n    return original;\n};\n//# sourceMappingURL=/build/es2018/helpers/intercept-connections.js.map","import { computeBufferSize } from '../helpers/compute-buffer-size';\nimport { filterBuffer } from '../helpers/filter-buffer';\nimport { interceptConnections } from '../helpers/intercept-connections';\nfunction divide(a, b) {\n    const denominator = (b[0] * b[0]) + (b[1] * b[1]);\n    return [(((a[0] * b[0]) + (a[1] * b[1])) / denominator), (((a[1] * b[0]) - (a[0] * b[1])) / denominator)];\n}\nfunction multiply(a, b) {\n    return [((a[0] * b[0]) - (a[1] * b[1])), ((a[0] * b[1]) + (a[1] * b[0]))];\n}\nfunction evaluatePolynomial(coefficient, z) {\n    let result = [0, 0];\n    for (let i = coefficient.length - 1; i >= 0; i -= 1) {\n        result = multiply(result, z);\n        result[0] += coefficient[i];\n    }\n    return result;\n}\nexport const createNativeIIRFilterNodeFakerFactory = (createInvalidAccessError, createInvalidStateError, createNativeScriptProcessorNode, createNotSupportedError) => {\n    return (nativeContext, baseLatency, { channelCount, channelCountMode, channelInterpretation, feedback, feedforward }) => {\n        const bufferSize = computeBufferSize(baseLatency, nativeContext.sampleRate);\n        const feedbackLength = feedback.length;\n        const feedforwardLength = feedforward.length;\n        const minLength = Math.min(feedbackLength, feedforwardLength);\n        if (feedback.length === 0 || feedback.length > 20) {\n            throw createNotSupportedError();\n        }\n        if (feedback[0] === 0) {\n            throw createInvalidStateError();\n        }\n        if (feedforward.length === 0 || feedforward.length > 20) {\n            throw createNotSupportedError();\n        }\n        if (feedforward[0] === 0) {\n            throw createInvalidStateError();\n        }\n        if (feedback[0] !== 1) {\n            for (let i = 0; i < feedforwardLength; i += 1) {\n                feedforward[i] /= feedback[0];\n            }\n            for (let i = 1; i < feedbackLength; i += 1) {\n                feedback[i] /= feedback[0];\n            }\n        }\n        const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, bufferSize, channelCount, channelCount);\n        scriptProcessorNode.channelCount = channelCount;\n        scriptProcessorNode.channelCountMode = channelCountMode;\n        scriptProcessorNode.channelInterpretation = channelInterpretation;\n        const bufferLength = 32;\n        const bufferIndexes = [];\n        const xBuffers = [];\n        const yBuffers = [];\n        for (let i = 0; i < channelCount; i += 1) {\n            bufferIndexes.push(0);\n            const xBuffer = new Float32Array(bufferLength);\n            const yBuffer = new Float32Array(bufferLength);\n            // @todo Add a test which checks support for TypedArray.prototype.fill().\n            xBuffer.fill(0);\n            yBuffer.fill(0);\n            xBuffers.push(xBuffer);\n            yBuffers.push(yBuffer);\n        }\n        scriptProcessorNode.onaudioprocess = (event) => {\n            const inputBuffer = event.inputBuffer;\n            const outputBuffer = event.outputBuffer;\n            const numberOfChannels = inputBuffer.numberOfChannels;\n            for (let i = 0; i < numberOfChannels; i += 1) {\n                const input = inputBuffer.getChannelData(i);\n                const output = outputBuffer.getChannelData(i);\n                bufferIndexes[i] = filterBuffer(feedback, feedbackLength, feedforward, feedforwardLength, minLength, xBuffers[i], yBuffers[i], bufferIndexes[i], bufferLength, input, output);\n            }\n        };\n        const nyquist = nativeContext.sampleRate / 2;\n        const nativeIIRFilterNodeFaker = {\n            get bufferSize() {\n                return bufferSize;\n            },\n            get channelCount() {\n                return scriptProcessorNode.channelCount;\n            },\n            set channelCount(value) {\n                scriptProcessorNode.channelCount = value;\n            },\n            get channelCountMode() {\n                return scriptProcessorNode.channelCountMode;\n            },\n            set channelCountMode(value) {\n                scriptProcessorNode.channelCountMode = value;\n            },\n            get channelInterpretation() {\n                return scriptProcessorNode.channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                scriptProcessorNode.channelInterpretation = value;\n            },\n            get context() {\n                return scriptProcessorNode.context;\n            },\n            get inputs() {\n                return [scriptProcessorNode];\n            },\n            get numberOfInputs() {\n                return scriptProcessorNode.numberOfInputs;\n            },\n            get numberOfOutputs() {\n                return scriptProcessorNode.numberOfOutputs;\n            },\n            addEventListener(...args) {\n                // @todo Dissallow adding an audioprocess listener.\n                return scriptProcessorNode.addEventListener(args[0], args[1], args[2]);\n            },\n            dispatchEvent(...args) {\n                return scriptProcessorNode.dispatchEvent(args[0]);\n            },\n            getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {\n                if ((frequencyHz.length !== magResponse.length) || (magResponse.length !== phaseResponse.length)) {\n                    throw createInvalidAccessError();\n                }\n                const length = frequencyHz.length;\n                for (let i = 0; i < length; i += 1) {\n                    const omega = -Math.PI * (frequencyHz[i] / nyquist);\n                    const z = [Math.cos(omega), Math.sin(omega)];\n                    const numerator = evaluatePolynomial(feedforward, z);\n                    const denominator = evaluatePolynomial(feedback, z);\n                    const response = divide(numerator, denominator);\n                    magResponse[i] = Math.sqrt((response[0] * response[0]) + (response[1] * response[1]));\n                    phaseResponse[i] = Math.atan2(response[1], response[0]);\n                }\n            },\n            removeEventListener(...args) {\n                return scriptProcessorNode.removeEventListener(args[0], args[1], args[2]);\n            }\n        };\n        return interceptConnections(nativeIIRFilterNodeFaker, scriptProcessorNode);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-iir-filter-node-faker-factory.js.map","export const createNotSupportedError = () => {\n    try {\n        return new DOMException('', 'NotSupportedError');\n    }\n    catch (err) {\n        // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.\n        err.code = 9;\n        err.name = 'NotSupportedError';\n        return err;\n    }\n};\n//# sourceMappingURL=/build/es2018/factories/not-supported-error.js.map","import { testPromiseSupport } from '../helpers/test-promise-support';\nconst DEFAULT_OPTIONS = {\n    numberOfChannels: 1\n};\nexport const createOfflineAudioContextConstructor = (baseAudioContextConstructor, cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, startRendering) => {\n    return class OfflineAudioContext extends baseAudioContextConstructor {\n        constructor(a, b, c) {\n            let options;\n            if (typeof a === 'number' && b !== undefined && c !== undefined) {\n                options = { length: b, numberOfChannels: a, sampleRate: c };\n            }\n            else if (typeof a === 'object') {\n                options = a;\n            }\n            else {\n                throw new Error('The given parameters are not valid.');\n            }\n            const { length, numberOfChannels, sampleRate } = { ...DEFAULT_OPTIONS, ...options };\n            const nativeOfflineAudioContext = createNativeOfflineAudioContext(numberOfChannels, length, sampleRate);\n            // #21 Safari does not support promises and therefore would fire the statechange event before the promise can be resolved.\n            if (!cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeOfflineAudioContext))) {\n                nativeOfflineAudioContext.addEventListener('statechange', (() => {\n                    let i = 0;\n                    const delayStateChangeEvent = (event) => {\n                        if (this._state === 'running') {\n                            if (i > 0) {\n                                nativeOfflineAudioContext.removeEventListener('statechange', delayStateChangeEvent);\n                                event.stopImmediatePropagation();\n                                this._waitForThePromiseToSettle(event);\n                            }\n                            else {\n                                i += 1;\n                            }\n                        }\n                    };\n                    return delayStateChangeEvent;\n                })());\n            }\n            super(nativeOfflineAudioContext, numberOfChannels);\n            this._length = length;\n            this._nativeOfflineAudioContext = nativeOfflineAudioContext;\n            this._state = null;\n        }\n        get length() {\n            // Bug #17: Safari does not yet expose the length.\n            if (this._nativeOfflineAudioContext.length === undefined) {\n                return this._length;\n            }\n            return this._nativeOfflineAudioContext.length;\n        }\n        get state() {\n            return (this._state === null) ? this._nativeOfflineAudioContext.state : this._state;\n        }\n        startRendering() {\n            /*\n             * Bug #9 & #59: It is theoretically possible that startRendering() will first render a partialOfflineAudioContext. Therefore\n             * the state of the nativeOfflineAudioContext might no transition to running immediately.\n             */\n            if (this._state === 'running') {\n                return Promise.reject(createInvalidStateError());\n            }\n            this._state = 'running';\n            return startRendering(this.destination, this._nativeOfflineAudioContext)\n                .then((audioBuffer) => {\n                this._state = null;\n                /*\n                 * Bug #50: Deleting the AudioGraph is currently not possible anymore.\n                 * deleteAudioGraph(this, this._nativeOfflineAudioContext);\n                 */\n                return audioBuffer;\n            })\n                // @todo This could be written more elegantly when Promise.finally() becomes avalaible.\n                .catch((err) => {\n                this._state = null;\n                /*\n                 * Bug #50: Deleting the AudioGraph is currently not possible anymore.\n                 * deleteAudioGraph(this, this._nativeOfflineAudioContext);\n                 */\n                throw err; // tslint:disable-line:rxjs-throw-error\n            });\n        }\n        _waitForThePromiseToSettle(event) {\n            if (this._state === null) {\n                this._nativeOfflineAudioContext.dispatchEvent(event);\n            }\n            else {\n                setTimeout(() => this._waitForThePromiseToSettle(event));\n            }\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/offline-audio-context-constructor.js.map","import { getNativeContext } from '../helpers/get-native-context';\nimport { setInternalState } from '../helpers/set-internal-state';\nimport { wrapEventListener } from '../helpers/wrap-event-listener';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    detune: 0,\n    frequency: 440,\n    type: 'sine'\n};\nexport const createOscillatorNodeConstructor = (createAudioParam, createInvalidStateError, createNativeOscillatorNode, createOscillatorNodeRenderer, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class OscillatorNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeOscillatorNode = createNativeOscillatorNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const oscillatorNodeRenderer = ((isOffline) ? createOscillatorNodeRenderer() : null);\n            const nyquist = context.sampleRate / 2;\n            super(context, 'passive', nativeOscillatorNode, oscillatorNodeRenderer);\n            // Bug #81: Edge, Firefox & Safari do not export the correct values for maxValue and minValue.\n            this._detune = createAudioParam(this, isOffline, nativeOscillatorNode.detune, 153600, -153600);\n            // Bug #76: Edge & Safari do not export the correct values for maxValue and minValue.\n            this._frequency = createAudioParam(this, isOffline, nativeOscillatorNode.frequency, nyquist, -nyquist);\n            this._nativeOscillatorNode = nativeOscillatorNode;\n            this._onended = null;\n            this._oscillatorNodeRenderer = oscillatorNodeRenderer;\n            if (this._oscillatorNodeRenderer !== null && mergedOptions.periodicWave !== undefined) {\n                this._oscillatorNodeRenderer.periodicWave =\n                    mergedOptions.periodicWave;\n            }\n        }\n        get detune() {\n            return this._detune;\n        }\n        get frequency() {\n            return this._frequency;\n        }\n        get onended() {\n            return this._onended;\n        }\n        set onended(value) {\n            const wrappedListener = wrapEventListener(this, value);\n            this._nativeOscillatorNode.onended = wrappedListener;\n            const nativeOnEnded = this._nativeOscillatorNode.onended;\n            this._onended = (nativeOnEnded === wrappedListener) ? value : nativeOnEnded;\n        }\n        get type() {\n            return this._nativeOscillatorNode.type;\n        }\n        set type(value) {\n            this._nativeOscillatorNode.type = value;\n            // Bug #57: Edge will not throw an error when assigning the type to 'custom'. But it still will change the value.\n            if (value === 'custom') {\n                throw createInvalidStateError();\n            }\n            if (this._oscillatorNodeRenderer !== null) {\n                this._oscillatorNodeRenderer.periodicWave = null;\n            }\n        }\n        setPeriodicWave(periodicWave) {\n            this._nativeOscillatorNode.setPeriodicWave(periodicWave);\n            if (this._oscillatorNodeRenderer !== null) {\n                this._oscillatorNodeRenderer.periodicWave = periodicWave;\n            }\n        }\n        start(when = 0) {\n            this._nativeOscillatorNode.start(when);\n            if (this._oscillatorNodeRenderer !== null) {\n                this._oscillatorNodeRenderer.start = when;\n            }\n            else {\n                setInternalState(this, 'active');\n                const setInternalStateToInactive = () => {\n                    this._nativeOscillatorNode.removeEventListener('ended', setInternalStateToInactive);\n                    // @todo Determine a meaningful delay instead of just using one second.\n                    setTimeout(() => setInternalState(this, 'passive'), 1000);\n                };\n                this._nativeOscillatorNode.addEventListener('ended', setInternalStateToInactive);\n            }\n        }\n        stop(when = 0) {\n            this._nativeOscillatorNode.stop(when);\n            if (this._oscillatorNodeRenderer !== null) {\n                this._oscillatorNodeRenderer.stop = when;\n            }\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/oscillator-node-constructor.js.map","import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { getNativeContext } from '../helpers/get-native-context';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'clamped-max',\n    channelInterpretation: 'speakers',\n    coneInnerAngle: 360,\n    coneOuterAngle: 360,\n    coneOuterGain: 0,\n    distanceModel: 'inverse',\n    maxDistance: 10000,\n    orientationX: 1,\n    orientationY: 0,\n    orientationZ: 0,\n    panningModel: 'equalpower',\n    positionX: 0,\n    positionY: 0,\n    positionZ: 0,\n    refDistance: 1,\n    rolloffFactor: 1\n};\nexport const createPannerNodeConstructor = (createAudioParam, createNativePannerNode, createPannerNodeRenderer, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class PannerNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativePannerNode = createNativePannerNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const pannerNodeRenderer = ((isOffline) ? createPannerNodeRenderer() : null);\n            super(context, 'passive', nativePannerNode, pannerNodeRenderer);\n            this._nativePannerNode = nativePannerNode;\n            // Bug #74: Edge & Safari do not export the correct values for maxValue and minValue for GainNodes.\n            this._orientationX = createAudioParam(this, isOffline, nativePannerNode.orientationX, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            this._orientationY = createAudioParam(this, isOffline, nativePannerNode.orientationY, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            this._orientationZ = createAudioParam(this, isOffline, nativePannerNode.orientationZ, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            this._positionX = createAudioParam(this, isOffline, nativePannerNode.positionX, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            this._positionY = createAudioParam(this, isOffline, nativePannerNode.positionY, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            this._positionZ = createAudioParam(this, isOffline, nativePannerNode.positionZ, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n        }\n        get coneInnerAngle() {\n            return this._nativePannerNode.coneInnerAngle;\n        }\n        set coneInnerAngle(value) {\n            this._nativePannerNode.coneInnerAngle = value;\n        }\n        get coneOuterAngle() {\n            return this._nativePannerNode.coneOuterAngle;\n        }\n        set coneOuterAngle(value) {\n            this._nativePannerNode.coneOuterAngle = value;\n        }\n        get coneOuterGain() {\n            return this._nativePannerNode.coneOuterGain;\n        }\n        set coneOuterGain(value) {\n            this._nativePannerNode.coneOuterGain = value;\n        }\n        get distanceModel() {\n            return this._nativePannerNode.distanceModel;\n        }\n        set distanceModel(value) {\n            this._nativePannerNode.distanceModel = value;\n        }\n        get maxDistance() {\n            return this._nativePannerNode.maxDistance;\n        }\n        set maxDistance(value) {\n            this._nativePannerNode.maxDistance = value;\n        }\n        get orientationX() {\n            return this._orientationX;\n        }\n        get orientationY() {\n            return this._orientationY;\n        }\n        get orientationZ() {\n            return this._orientationZ;\n        }\n        get panningModel() {\n            return this._nativePannerNode.panningModel;\n        }\n        set panningModel(value) {\n            this._nativePannerNode.panningModel = value;\n        }\n        get positionX() {\n            return this._positionX;\n        }\n        get positionY() {\n            return this._positionY;\n        }\n        get positionZ() {\n            return this._positionZ;\n        }\n        get refDistance() {\n            return this._nativePannerNode.refDistance;\n        }\n        set refDistance(value) {\n            this._nativePannerNode.refDistance = value;\n        }\n        get rolloffFactor() {\n            return this._nativePannerNode.rolloffFactor;\n        }\n        set rolloffFactor(value) {\n            this._nativePannerNode.rolloffFactor = value;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/panner-node-constructor.js.map","import { getNativeContext } from '../helpers/get-native-context';\nconst DEFAULT_OPTIONS = {\n    disableNormalization: false\n};\nexport const createPeriodicWaveConstructor = (createNativePeriodicWave, periodicWaveStore) => {\n    return class PeriodicWave {\n        constructor(context, options) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const periodicWave = createNativePeriodicWave(nativeContext, mergedOptions);\n            periodicWaveStore.add(periodicWave);\n            // This does violate all good pratices but it is used here to simplify the handling of periodic waves.\n            return periodicWave;\n        }\n        static [Symbol.hasInstance](instance) {\n            return (instance !== null && typeof instance === 'object' && Object.getPrototypeOf(instance) === PeriodicWave.prototype)\n                || (periodicWaveStore.has(instance));\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/periodic-wave-constructor.js.map","import { getNativeContext } from '../helpers/get-native-context';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    /*\n     * Bug #105: The channelCountMode should be 'clamped-max' according to the spec but is set to 'explicit' to achieve consistent\n     * behavior.\n     */\n    channelCountMode: 'explicit',\n    channelInterpretation: 'speakers',\n    pan: 0\n};\nexport const createStereoPannerNodeConstructor = (createAudioParam, createNativeStereoPannerNode, createStereoPannerNodeRenderer, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class StereoPannerNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeStereoPannerNode = createNativeStereoPannerNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const stereoPannerNodeRenderer = ((isOffline) ? createStereoPannerNodeRenderer() : null);\n            super(context, 'passive', nativeStereoPannerNode, stereoPannerNodeRenderer);\n            // Bug #106: Edge does not export a maxValue and minValue property.\n            this._pan = createAudioParam(this, isOffline, nativeStereoPannerNode.pan, 1, -1);\n        }\n        get pan() {\n            return this._pan;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/stereo-panner-node-constructor.js.map","export const createUnknownError = () => {\n    try {\n        return new DOMException('', 'UnknownError');\n    }\n    catch (err) {\n        // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.\n        err.name = 'UnknownError';\n        return err;\n    }\n};\n//# sourceMappingURL=/build/es2018/factories/unknown-error.js.map","import { getNativeContext } from '../helpers/get-native-context';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    curve: null,\n    oversample: 'none'\n};\nexport const createWaveShaperNodeConstructor = (createInvalidStateError, createNativeWaveShaperNode, createWaveShaperNodeRenderer, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class WaveShaperNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeWaveShaperNode = createNativeWaveShaperNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const waveShaperNodeRenderer = ((isOffline) ? createWaveShaperNodeRenderer() : null);\n            super(context, 'passive', nativeWaveShaperNode, waveShaperNodeRenderer);\n            this._isCurveNullified = false;\n            this._nativeWaveShaperNode = nativeWaveShaperNode;\n        }\n        get curve() {\n            if (this._isCurveNullified) {\n                return null;\n            }\n            return this._nativeWaveShaperNode.curve;\n        }\n        set curve(value) {\n            // Bug #103: Safari does not allow to set the curve to null.\n            if (value === null) {\n                this._isCurveNullified = true;\n                this._nativeWaveShaperNode.curve = new Float32Array([0, 0]);\n            }\n            else {\n                // Bug #102: Safari does not throw an InvalidStateError when the curve has less than two samples.\n                // Bug #104: Chrome will throw an InvalidAccessError when the curve has less than two samples.\n                if (value.length < 2) {\n                    throw createInvalidStateError();\n                }\n                this._isCurveNullified = false;\n                this._nativeWaveShaperNode.curve = value;\n            }\n        }\n        get oversample() {\n            return this._nativeWaveShaperNode.oversample;\n        }\n        set oversample(value) {\n            this._nativeWaveShaperNode.oversample = value;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/wave-shaper-node-constructor.js.map","import { createCancelAndHoldAutomationEvent, createCancelScheduledValuesAutomationEvent, createExponentialRampToValueAutomationEvent, createLinearRampToValueAutomationEvent, createSetTargetAutomationEvent, createSetValueAutomationEvent, createSetValueCurveAutomationEvent } from 'automation-events';\nimport { createAbortError } from './factories/abort-error';\nimport { createAddAudioWorkletModule } from './factories/add-audio-worklet-module';\nimport { createAnalyserNodeConstructor } from './factories/analyser-node-constructor';\nimport { createAnalyserNodeRendererFactory } from './factories/analyser-node-renderer-factory';\nimport { createAudioBufferConstructor } from './factories/audio-buffer-constructor';\nimport { createAudioBufferSourceNodeConstructor } from './factories/audio-buffer-source-node-constructor';\nimport { createAudioBufferSourceNodeRendererFactory } from './factories/audio-buffer-source-node-renderer-factory';\nimport { createAudioContextConstructor } from './factories/audio-context-constructor';\nimport { createAudioDestinationNodeConstructor } from './factories/audio-destination-node-constructor';\nimport { createAudioDestinationNodeRenderer } from './factories/audio-destination-node-renderer-factory';\nimport { createAudioListenerFactory } from './factories/audio-listener-factory';\nimport { createAudioNodeConstructor } from './factories/audio-node-constructor';\nimport { createAudioParamFactory } from './factories/audio-param-factory';\nimport { createAudioParamRenderer } from './factories/audio-param-renderer';\nimport { createAudioWorkletNodeConstructor } from './factories/audio-worklet-node-constructor';\nimport { createAudioWorkletNodeRendererFactory } from './factories/audio-worklet-node-renderer-factory';\nimport { createBaseAudioContextConstructor } from './factories/base-audio-context-constructor';\nimport { createBiquadFilterNodeConstructor } from './factories/biquad-filter-node-constructor';\nimport { createBiquadFilterNodeRendererFactory } from './factories/biquad-filter-node-renderer-factory';\nimport { createCacheTestResult } from './factories/cache-test-result';\nimport { createChannelMergerNodeConstructor } from './factories/channel-merger-node-constructor';\nimport { createChannelMergerNodeRendererFactory } from './factories/channel-merger-node-renderer-factory';\nimport { createChannelSplitterNodeConstructor } from './factories/channel-splitter-node-constructor';\nimport { createChannelSplitterNodeRendererFactory } from './factories/channel-splitter-node-renderer-factory';\nimport { createConnectMultipleOutputs } from './factories/connect-multiple-outputs';\nimport { createConstantSourceNodeConstructor } from './factories/constant-source-node-constructor';\nimport { createConstantSourceNodeRendererFactory } from './factories/constant-source-node-renderer-factory';\nimport { createConvertNumberToUnsignedLong } from './factories/convert-number-to-unsigned-long';\nimport { createConvolverNodeConstructor } from './factories/convolver-node-constructor';\nimport { createConvolverNodeRendererFactory } from './factories/convolver-node-renderer-factory';\nimport { createCreateNativeOfflineAudioContext } from './factories/create-native-offline-audio-context';\nimport { createDataCloneError } from './factories/data-clone-error';\nimport { createDecodeAudioData } from './factories/decode-audio-data';\nimport { createDelayNodeConstructor } from './factories/delay-node-constructor';\nimport { createDelayNodeRendererFactory } from './factories/delay-node-renderer-factory';\nimport { createDetectCycles } from './factories/detect-cycles';\nimport { createDisconnectMultipleOutputs } from './factories/disconnect-multiple-outputs';\nimport { createDynamicsCompressorNodeConstructor } from './factories/dynamics-compressor-node-constructor';\nimport { createDynamicsCompressorNodeRendererFactory } from './factories/dynamics-compressor-node-renderer-factory';\nimport { createEncodingError } from './factories/encoding-error';\nimport { createExposeCurrentFrameAndCurrentTime } from './factories/expose-current-frame-and-current-time';\nimport { createFetchSource } from './factories/fetch-source';\nimport { createGainNodeConstructor } from './factories/gain-node-constructor';\nimport { createGainNodeRendererFactory } from './factories/gain-node-renderer-factory';\nimport { createGetBackupNativeContext } from './factories/get-backup-native-context';\nimport { createIIRFilterNodeConstructor } from './factories/iir-filter-node-constructor';\nimport { createIIRFilterNodeRendererFactory } from './factories/iir-filter-node-renderer-factory';\nimport { createIndexSizeError } from './factories/index-size-error';\nimport { createInvalidAccessError } from './factories/invalid-access-error';\nimport { createInvalidStateError } from './factories/invalid-state-error';\nimport { createIsAnyAudioContext } from './factories/is-any-audio-context';\nimport { createIsAnyAudioNode } from './factories/is-any-audio-node';\nimport { createIsAnyAudioParam } from './factories/is-any-audio-param';\nimport { createIsAnyOfflineAudioContext } from './factories/is-any-offline-audio-context';\nimport { createIsNativeAudioContext } from './factories/is-native-audio-context';\nimport { createIsNativeAudioNode } from './factories/is-native-audio-node';\nimport { createIsNativeAudioParam } from './factories/is-native-audio-param';\nimport { createIsNativeContext } from './factories/is-native-context';\nimport { createIsNativeOfflineAudioContext } from './factories/is-native-offline-audio-context';\nimport { createIsSecureContext } from './factories/is-secure-context';\nimport { createIsSupportedPromise } from './factories/is-supported-promise';\nimport { createMediaElementAudioSourceNodeConstructor } from './factories/media-element-audio-source-node-constructor';\nimport { createMediaStreamAudioSourceNodeConstructor } from './factories/media-stream-audio-source-node-constructor';\nimport { createMediaStreamTrackAudioSourceNodeConstructor } from './factories/media-stream-track-audio-source-node-constructor';\nimport { createMinimalAudioContextConstructor } from './factories/minimal-audio-context-constructor';\nimport { createMinimalBaseAudioContextConstructor } from './factories/minimal-base-audio-context-constructor';\nimport { createMinimalOfflineAudioContextConstructor } from './factories/minimal-offline-audio-context-constructor';\nimport { createNativeAnalyserNodeFactory } from './factories/native-analyser-node-factory';\nimport { createNativeAudioBufferConstructor } from './factories/native-audio-buffer-constructor';\nimport { createNativeAudioBufferSourceNodeFactory } from './factories/native-audio-buffer-source-node-factory';\nimport { createNativeAudioContextConstructor } from './factories/native-audio-context-constructor';\nimport { createNativeAudioDestinationNode } from './factories/native-audio-destination-node';\nimport { createNativeAudioNodeFactory } from './factories/native-audio-node-factory';\nimport { createNativeAudioWorkletNodeConstructor } from './factories/native-audio-worklet-node-constructor';\nimport { createNativeAudioWorkletNodeFactory } from './factories/native-audio-worklet-node-factory';\nimport { createNativeAudioWorkletNodeFakerFactory } from './factories/native-audio-worklet-node-faker-factory';\nimport { createNativeBiquadFilterNodeFactory } from './factories/native-biquad-filter-node-factory';\nimport { createNativeChannelMergerNodeFactory } from './factories/native-channel-merger-node-factory';\nimport { createNativeChannelSplitterNodeFactory } from './factories/native-channel-splitter-node-factory';\nimport { createNativeConstantSourceNodeFactory } from './factories/native-constant-source-node-factory';\nimport { createNativeConstantSourceNodeFakerFactory } from './factories/native-constant-source-node-faker-factory';\nimport { createNativeConvolverNodeFactory } from './factories/native-convolver-node-factory';\nimport { createNativeDelayNodeFactory } from './factories/native-delay-node-factory';\nimport { createNativeDynamicsCompressorNodeFactory } from './factories/native-dynamics-compressor-node-factory';\nimport { createNativeGainNodeFactory } from './factories/native-gain-node-factory';\nimport { createNativeIIRFilterNodeFactory } from './factories/native-iir-filter-node-factory';\nimport { createNativeIIRFilterNodeFakerFactory } from './factories/native-iir-filter-node-faker-factory';\nimport { createNativeMediaElementAudioSourceNodeFactory } from './factories/native-media-element-audio-source-node-factory';\nimport { createNativeMediaStreamAudioSourceNodeFactory } from './factories/native-media-stream-audio-source-node-factory';\nimport { createNativeMediaStreamTrackAudioSourceNodeFactory } from './factories/native-media-stream-track-audio-source-node-factory';\nimport { createNativeOfflineAudioContextConstructor } from './factories/native-offline-audio-context-constructor';\nimport { createNativeOscillatorNodeFactory } from './factories/native-oscillator-node-factory';\nimport { createNativePannerNodeFactory } from './factories/native-panner-node-factory';\nimport { createNativePannerNodeFakerFactory } from './factories/native-panner-node-faker-factory';\nimport { createNativePeriodicWaveFactory } from './factories/native-periodic-wave-factory';\nimport { createNativeScriptProcessorNodeFactory } from './factories/native-script-processor-node-factory';\nimport { createNativeStereoPannerNodeFactory } from './factories/native-stereo-panner-node-factory';\nimport { createNativeStereoPannerNodeFakerFactory } from './factories/native-stereo-panner-node-faker-factory';\nimport { createNativeWaveShaperNodeFactory } from './factories/native-wave-shaper-node-factory';\nimport { createNativeWaveShaperNodeFakerFactory } from './factories/native-wave-shaper-node-faker-factory';\nimport { createNoneAudioDestinationNodeConstructor } from './factories/none-audio-destination-node-constructor';\nimport { createNotSupportedError } from './factories/not-supported-error';\nimport { createOfflineAudioContextConstructor } from './factories/offline-audio-context-constructor';\nimport { createOscillatorNodeConstructor } from './factories/oscillator-node-constructor';\nimport { createOscillatorNodeRendererFactory } from './factories/oscillator-node-renderer-factory';\nimport { createPannerNodeConstructor } from './factories/panner-node-constructor';\nimport { createPannerNodeRendererFactory } from './factories/panner-node-renderer-factory';\nimport { createPeriodicWaveConstructor } from './factories/periodic-wave-constructor';\nimport { createRenderNativeOfflineAudioContext } from './factories/render-native-offline-audio-context';\nimport { createStartRendering } from './factories/start-rendering';\nimport { createStereoPannerNodeConstructor } from './factories/stereo-panner-node-constructor';\nimport { createStereoPannerNodeRendererFactory } from './factories/stereo-panner-node-renderer-factory';\nimport { createTestAudioBufferConstructorSupport } from './factories/test-audio-buffer-constructor-support';\nimport { createTestAudioBufferSourceNodeStartMethodConsecutiveCallsSupport } from './factories/test-audio-buffer-source-node-start-method-consecutive-calls-support';\nimport { createTestAudioBufferSourceNodeStartMethodDurationParameterSupport } from './factories/test-audio-buffer-source-node-start-method-duration-parameter-support';\nimport { createTestAudioBufferSourceNodeStartMethodOffsetClampingSupport } from './factories/test-audio-buffer-source-node-start-method-offset-clamping-support';\nimport { createTestAudioContextCloseMethodSupport } from './factories/test-audio-context-close-method-support';\nimport { createTestAudioContextDecodeAudioDataMethodTypeErrorSupport } from './factories/test-audio-context-decode-audio-data-method-type-error-support';\nimport { createTestAudioContextOptionsSupport } from './factories/test-audio-context-options-support';\nimport { createTestAudioScheduledSourceNodeStartMethodNegativeParametersSupport } from './factories/test-audio-scheduled-source-node-start-method-negative-parameters-support';\nimport { createTestAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport } from './factories/test-audio-scheduled-source-node-stop-method-consecutive-calls-support';\nimport { createTestAudioScheduledSourceNodeStopMethodNegativeParametersSupport } from './factories/test-audio-scheduled-source-node-stop-method-negative-parameters-support';\nimport { createTestAudioWorkletProcessorNoOutputsSupport } from './factories/test-audio-worklet-processor-no-outputs-support';\nimport { createTestChannelSplitterNodeChannelCountSupport } from './factories/test-channel-splitter-node-channel-count-support';\nimport { createTestConstantSourceNodeAccurateSchedulingSupport } from './factories/test-constant-source-node-accurate-scheduling-support';\nimport { createTestConvolverNodeBufferReassignabilitySupport } from './factories/test-convolver-node-buffer-reassignability-support';\nimport { createTestIsSecureContextSupport } from './factories/test-is-secure-context-support';\nimport { createTestOfflineAudioContextCurrentTimeSupport } from './factories/test-offline-audio-context-current-time-support';\nimport { createTestStereoPannerNodeDefaultValueSupport } from './factories/test-stereo-panner-node-default-value-support';\nimport { createUnknownError } from './factories/unknown-error';\nimport { createWaveShaperNodeConstructor } from './factories/wave-shaper-node-constructor';\nimport { createWaveShaperNodeRendererFactory } from './factories/wave-shaper-node-renderer-factory';\nimport { createWindow } from './factories/window';\nimport { createWrapAudioBufferCopyChannelMethods } from './factories/wrap-audio-buffer-copy-channel-methods';\nimport { createWrapAudioBufferCopyChannelMethodsOutOfBounds } from './factories/wrap-audio-buffer-copy-channel-methods-out-of-bounds';\nimport { createWrapAudioBufferCopyChannelMethodsSubarray } from './factories/wrap-audio-buffer-copy-channel-methods-subarray';\nimport { createWrapAudioScheduledSourceNodeStopMethodConsecutiveCalls } from './factories/wrap-audio-scheduled-source-node-stop-method-consecutive-calls';\nimport { createWrapChannelMergerNode } from './factories/wrap-channel-merger-node';\nimport { AUDIO_BUFFER_STORE, AUDIO_NODE_STORE, AUDIO_PARAM_AUDIO_NODE_STORE, AUDIO_PARAM_STORE, CONTEXT_STORE, PERIODIC_WAVE_STORE } from './globals';\nimport { getAudioNodeConnections } from './helpers/get-audio-node-connections';\nimport { getValueForKey } from './helpers/get-value-for-key';\nimport { testAudioBufferCopyChannelMethodsOutOfBoundsSupport } from './helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support';\nimport { testAudioBufferCopyChannelMethodsSubarraySupport } from './helpers/test-audio-buffer-copy-channel-methods-subarray-support';\nimport { testPromiseSupport } from './helpers/test-promise-support';\nimport { testTransferablesSupport } from './helpers/test-transferables-support';\nimport { wrapAudioBufferSourceNodeStartMethodOffsetClamping } from './helpers/wrap-audio-buffer-source-node-start-method-offset-clamping';\nconst cacheTestResult = createCacheTestResult(new Map());\nconst window = createWindow();\nconst nativeOfflineAudioContextConstructor = createNativeOfflineAudioContextConstructor(window);\nconst isNativeOfflineAudioContext = createIsNativeOfflineAudioContext(nativeOfflineAudioContextConstructor);\nconst nativeAudioContextConstructor = createNativeAudioContextConstructor(window);\nconst getBackupNativeContext = createGetBackupNativeContext(isNativeOfflineAudioContext, nativeAudioContextConstructor, nativeOfflineAudioContextConstructor);\nconst createNativeAudioNode = createNativeAudioNodeFactory(getBackupNativeContext);\nconst createNativeAnalyserNode = createNativeAnalyserNodeFactory(cacheTestResult, createIndexSizeError, createNativeAudioNode);\nconst createAnalyserNodeRenderer = createAnalyserNodeRendererFactory(createNativeAnalyserNode);\nconst isNativeAudioNode = createIsNativeAudioNode(window);\nconst isNativeAudioParam = createIsNativeAudioParam(window);\nconst audioNodeConstructor = createAudioNodeConstructor(cacheTestResult, createIndexSizeError, createInvalidAccessError, createNotSupportedError, createDetectCycles(AUDIO_PARAM_AUDIO_NODE_STORE, createNotSupportedError, getAudioNodeConnections, getValueForKey), isNativeAudioNode, isNativeAudioParam, isNativeOfflineAudioContext);\nconst noneAudioDestinationNodeConstructor = createNoneAudioDestinationNodeConstructor(audioNodeConstructor);\nconst analyserNodeConstructor = createAnalyserNodeConstructor(createAnalyserNodeRenderer, createIndexSizeError, createNativeAnalyserNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nexport { analyserNodeConstructor as AnalyserNode };\nconst nativeAudioBufferConstructor = createNativeAudioBufferConstructor(window);\nconst convertNumberToUnsignedLong = createConvertNumberToUnsignedLong(new Uint32Array(1));\nconst wrapAudioBufferCopyChannelMethods = createWrapAudioBufferCopyChannelMethods(convertNumberToUnsignedLong, createIndexSizeError);\nconst wrapAudioBufferCopyChannelMethodsOutOfBounds = createWrapAudioBufferCopyChannelMethodsOutOfBounds(convertNumberToUnsignedLong);\nconst wrapAudioBufferCopyChannelMethodsSubarray = createWrapAudioBufferCopyChannelMethodsSubarray(convertNumberToUnsignedLong, createIndexSizeError);\nconst audioBufferConstructor = createAudioBufferConstructor(AUDIO_BUFFER_STORE, cacheTestResult, createNotSupportedError, nativeAudioBufferConstructor, nativeOfflineAudioContextConstructor, createTestAudioBufferConstructorSupport(nativeAudioBufferConstructor), wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds, wrapAudioBufferCopyChannelMethodsSubarray);\nexport { audioBufferConstructor as AudioBuffer };\nconst testAudioScheduledSourceNodeStartMethodNegativeParametersSupport = createTestAudioScheduledSourceNodeStartMethodNegativeParametersSupport(createNativeAudioNode);\nconst testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport = createTestAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport(createNativeAudioNode);\nconst testAudioScheduledSourceNodeStopMethodNegativeParametersSupport = createTestAudioScheduledSourceNodeStopMethodNegativeParametersSupport(createNativeAudioNode);\nconst wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls = createWrapAudioScheduledSourceNodeStopMethodConsecutiveCalls(createNativeAudioNode);\nconst createNativeAudioBufferSourceNode = createNativeAudioBufferSourceNodeFactory(cacheTestResult, createNativeAudioNode, createTestAudioBufferSourceNodeStartMethodConsecutiveCallsSupport(createNativeAudioNode), createTestAudioBufferSourceNodeStartMethodDurationParameterSupport(nativeOfflineAudioContextConstructor), createTestAudioBufferSourceNodeStartMethodOffsetClampingSupport(createNativeAudioNode), testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioBufferSourceNodeStartMethodOffsetClamping, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls);\nconst createAudioBufferSourceNodeRenderer = createAudioBufferSourceNodeRendererFactory(createNativeAudioBufferSourceNode);\nconst createAudioParam = createAudioParamFactory(createAudioParamRenderer, createCancelAndHoldAutomationEvent, createCancelScheduledValuesAutomationEvent, createExponentialRampToValueAutomationEvent, createLinearRampToValueAutomationEvent, createSetTargetAutomationEvent, createSetValueAutomationEvent, createSetValueCurveAutomationEvent, nativeAudioContextConstructor);\nconst audioBufferSourceNodeConstructor = createAudioBufferSourceNodeConstructor(createAudioBufferSourceNodeRenderer, createAudioParam, createInvalidStateError, createNativeAudioBufferSourceNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nexport { audioBufferSourceNodeConstructor as AudioBufferSourceNode };\nconst audioDestinationNodeConstructor = createAudioDestinationNodeConstructor(audioNodeConstructor, createAudioDestinationNodeRenderer, createIndexSizeError, createInvalidStateError, createNativeAudioDestinationNode, isNativeOfflineAudioContext);\nconst createNativeBiquadFilterNode = createNativeBiquadFilterNodeFactory(createNativeAudioNode);\nconst createBiquadFilterNodeRenderer = createBiquadFilterNodeRendererFactory(createNativeBiquadFilterNode);\nconst biquadFilterNodeConstructor = createBiquadFilterNodeConstructor(createAudioParam, createBiquadFilterNodeRenderer, createInvalidAccessError, createNativeBiquadFilterNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nconst wrapChannelMergerNode = createWrapChannelMergerNode(createInvalidStateError, createNativeAudioNode);\nconst createNativeChannelMergerNode = createNativeChannelMergerNodeFactory(createNativeAudioNode, wrapChannelMergerNode);\nconst createChannelMergerNodeRenderer = createChannelMergerNodeRendererFactory(createNativeChannelMergerNode);\nconst channelMergerNodeConstructor = createChannelMergerNodeConstructor(createChannelMergerNodeRenderer, createNativeChannelMergerNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nconst createNativeChannelSplitterNode = createNativeChannelSplitterNodeFactory(createNativeAudioNode);\nconst createChannelSplitterNodeRenderer = createChannelSplitterNodeRendererFactory(createNativeChannelSplitterNode);\nconst channelSplitterNodeConstructor = createChannelSplitterNodeConstructor(createChannelSplitterNodeRenderer, createNativeChannelSplitterNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nconst createNativeGainNode = createNativeGainNodeFactory(createNativeAudioNode);\nconst createNativeConstantSourceNodeFaker = createNativeConstantSourceNodeFakerFactory(createNativeAudioBufferSourceNode, createNativeGainNode);\nconst createNativeConstantSourceNode = createNativeConstantSourceNodeFactory(cacheTestResult, createNativeAudioNode, createNativeConstantSourceNodeFaker, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport);\nconst createConstantSourceNodeRenderer = createConstantSourceNodeRendererFactory(createNativeConstantSourceNode);\nconst constantSourceNodeConstructor = createConstantSourceNodeConstructor(createAudioParam, createConstantSourceNodeRenderer, createNativeConstantSourceNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nconst createNativeConvolverNode = createNativeConvolverNodeFactory(createNativeAudioNode, createNotSupportedError);\nconst createConvolverNodeRenderer = createConvolverNodeRendererFactory(createNativeConvolverNode);\nconst convolverNodeConstructor = createConvolverNodeConstructor(createConvolverNodeRenderer, createNativeConvolverNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nconst createNativeDelayNode = createNativeDelayNodeFactory(createNativeAudioNode);\nconst createDelayNodeRenderer = createDelayNodeRendererFactory(createNativeDelayNode);\nconst delayNodeConstructor = createDelayNodeConstructor(createAudioParam, createDelayNodeRenderer, createNativeDelayNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nconst createNativeDynamicsCompressorNode = createNativeDynamicsCompressorNodeFactory(createNativeAudioNode, createNotSupportedError);\nconst createDynamicsCompressorNodeRenderer = createDynamicsCompressorNodeRendererFactory(createNativeDynamicsCompressorNode);\nconst dynamicsCompressorNodeConstructor = createDynamicsCompressorNodeConstructor(createAudioParam, createDynamicsCompressorNodeRenderer, createNativeDynamicsCompressorNode, createNotSupportedError, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nconst createGainNodeRenderer = createGainNodeRendererFactory(createNativeGainNode);\nconst gainNodeConstructor = createGainNodeConstructor(createAudioParam, createGainNodeRenderer, createNativeGainNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nconst createNativeScriptProcessorNode = createNativeScriptProcessorNodeFactory(createNativeAudioNode);\nconst createNativeIIRFilterNodeFaker = createNativeIIRFilterNodeFakerFactory(createInvalidAccessError, createInvalidStateError, createNativeScriptProcessorNode, createNotSupportedError);\nconst renderNativeOfflineAudioContext = createRenderNativeOfflineAudioContext(cacheTestResult, createNativeGainNode, createNativeScriptProcessorNode, createTestOfflineAudioContextCurrentTimeSupport(createNativeGainNode, nativeOfflineAudioContextConstructor));\nconst createIIRFilterNodeRenderer = createIIRFilterNodeRendererFactory(createNativeAudioBufferSourceNode, createNativeAudioNode, nativeOfflineAudioContextConstructor, renderNativeOfflineAudioContext);\nconst createNativeIIRFilterNode = createNativeIIRFilterNodeFactory(createNativeAudioNode, createNativeIIRFilterNodeFaker);\nconst iIRFilterNodeConstructor = createIIRFilterNodeConstructor(createNativeIIRFilterNode, createIIRFilterNodeRenderer, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nconst createAudioListener = createAudioListenerFactory(createAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeScriptProcessorNode, isNativeOfflineAudioContext);\nconst minimalBaseAudioContextConstructor = createMinimalBaseAudioContextConstructor(audioDestinationNodeConstructor, createAudioListener);\nconst createNativeOscillatorNode = createNativeOscillatorNodeFactory(cacheTestResult, createNativeAudioNode, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls);\nconst createOscillatorNodeRenderer = createOscillatorNodeRendererFactory(createNativeOscillatorNode);\nconst oscillatorNodeConstructor = createOscillatorNodeConstructor(createAudioParam, createInvalidStateError, createNativeOscillatorNode, createOscillatorNodeRenderer, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nconst createNativeWaveShaperNodeFaker = createNativeWaveShaperNodeFakerFactory(createInvalidStateError, createNativeAudioNode, createNativeGainNode);\nconst createNativeWaveShaperNode = createNativeWaveShaperNodeFactory(createInvalidStateError, createNativeAudioNode, createNativeWaveShaperNodeFaker);\nconst createNativePannerNodeFaker = createNativePannerNodeFakerFactory(createInvalidStateError, createNativeAudioNode, createNativeChannelMergerNode, createNativeGainNode, createNativeScriptProcessorNode, createNativeWaveShaperNode, createNotSupportedError);\nconst createNativePannerNode = createNativePannerNodeFactory(createNativeAudioNode, createNativePannerNodeFaker);\nconst createPannerNodeRenderer = createPannerNodeRendererFactory(createNativePannerNode);\nconst pannerNodeConstructor = createPannerNodeConstructor(createAudioParam, createNativePannerNode, createPannerNodeRenderer, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nconst createNativePeriodicWave = createNativePeriodicWaveFactory(getBackupNativeContext);\nconst periodicWaveConstructor = createPeriodicWaveConstructor(createNativePeriodicWave, PERIODIC_WAVE_STORE);\nconst nativeStereoPannerNodeFakerFactory = createNativeStereoPannerNodeFakerFactory(createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeGainNode, createNativeWaveShaperNode, createNotSupportedError);\nconst createNativeStereoPannerNode = createNativeStereoPannerNodeFactory(createNativeAudioNode, nativeStereoPannerNodeFakerFactory, createNotSupportedError);\nconst createStereoPannerNodeRenderer = createStereoPannerNodeRendererFactory(createNativeStereoPannerNode);\nconst stereoPannerNodeConstructor = createStereoPannerNodeConstructor(createAudioParam, createNativeStereoPannerNode, createStereoPannerNodeRenderer, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nconst createWaveShaperNodeRenderer = createWaveShaperNodeRendererFactory(createNativeWaveShaperNode);\nconst waveShaperNodeConstructor = createWaveShaperNodeConstructor(createInvalidStateError, createNativeWaveShaperNode, createWaveShaperNodeRenderer, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nconst isSecureContext = createIsSecureContext(window);\nconst exposeCurrentFrameAndCurrentTime = createExposeCurrentFrameAndCurrentTime(window);\n// The addAudioWorkletModule() function is only available in a SecureContext.\nexport const addAudioWorkletModule = (isSecureContext) ?\n    createAddAudioWorkletModule(createAbortError, createNotSupportedError, exposeCurrentFrameAndCurrentTime, createFetchSource(createAbortError), getBackupNativeContext, new WeakMap(), new WeakMap()) :\n    undefined;\nconst isNativeAudioContext = createIsNativeAudioContext(nativeAudioContextConstructor);\nconst isNativeContext = createIsNativeContext(isNativeAudioContext, isNativeOfflineAudioContext);\nexport const decodeAudioData = createDecodeAudioData(AUDIO_BUFFER_STORE, cacheTestResult, createDataCloneError, createEncodingError, nativeOfflineAudioContextConstructor, isNativeContext, isNativeOfflineAudioContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, testAudioBufferCopyChannelMethodsSubarraySupport, testPromiseSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds, wrapAudioBufferCopyChannelMethodsSubarray);\nconst baseAudioContextConstructor = createBaseAudioContextConstructor(addAudioWorkletModule, analyserNodeConstructor, audioBufferConstructor, audioBufferSourceNodeConstructor, biquadFilterNodeConstructor, channelMergerNodeConstructor, channelSplitterNodeConstructor, constantSourceNodeConstructor, convolverNodeConstructor, decodeAudioData, delayNodeConstructor, dynamicsCompressorNodeConstructor, gainNodeConstructor, iIRFilterNodeConstructor, minimalBaseAudioContextConstructor, oscillatorNodeConstructor, pannerNodeConstructor, periodicWaveConstructor, stereoPannerNodeConstructor, waveShaperNodeConstructor);\nconst createNativeMediaElementAudioSourceNode = createNativeMediaElementAudioSourceNodeFactory(createNativeAudioNode);\nconst mediaElementAudioSourceNodeConstructor = createMediaElementAudioSourceNodeConstructor(createNativeMediaElementAudioSourceNode, createNotSupportedError, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nconst createNativeMediaStreamAudioSourceNode = createNativeMediaStreamAudioSourceNodeFactory(createInvalidStateError, createNativeAudioNode);\nconst mediaStreamAudioSourceNodeConstructor = createMediaStreamAudioSourceNodeConstructor(createNativeMediaStreamAudioSourceNode, createNotSupportedError, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nconst createNativeMediaStreamTrackAudioSourceNode = createNativeMediaStreamTrackAudioSourceNodeFactory(createInvalidStateError, createNativeAudioNode);\nconst mediaStreamTrackAudioSourceNodeConstructor = createMediaStreamTrackAudioSourceNodeConstructor(createNativeMediaStreamTrackAudioSourceNode, createNotSupportedError, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor);\nconst audioContextConstructor = createAudioContextConstructor(baseAudioContextConstructor, createInvalidStateError, createNotSupportedError, createUnknownError, mediaElementAudioSourceNodeConstructor, mediaStreamAudioSourceNodeConstructor, mediaStreamTrackAudioSourceNodeConstructor, nativeAudioContextConstructor);\nexport { audioContextConstructor as AudioContext };\nconst connectMultipleOutputs = createConnectMultipleOutputs(createIndexSizeError);\nconst disconnectMultipleOutputs = createDisconnectMultipleOutputs(createIndexSizeError);\nconst createNativeAudioWorkletNodeFaker = createNativeAudioWorkletNodeFakerFactory(connectMultipleOutputs, createIndexSizeError, createInvalidStateError, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, createNativeScriptProcessorNode, createNotSupportedError, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime);\nconst createNativeAudioWorkletNode = createNativeAudioWorkletNodeFactory(createInvalidStateError, createNativeAudioNode, createNativeAudioWorkletNodeFaker, createNotSupportedError, isNativeOfflineAudioContext);\nconst nativeAudioWorkletNodeConstructor = createNativeAudioWorkletNodeConstructor(window);\nconst createAudioWorkletNodeRenderer = createAudioWorkletNodeRendererFactory(connectMultipleOutputs, createNativeAudioBufferSourceNode, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, disconnectMultipleOutputs, nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor, renderNativeOfflineAudioContext);\n// The AudioWorkletNode constructor is only available in a SecureContext.\nconst audioWorkletNodeConstructor = (isSecureContext) ?\n    createAudioWorkletNodeConstructor(createAudioParam, createAudioWorkletNodeRenderer, createNativeAudioWorkletNode, gainNodeConstructor, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor, noneAudioDestinationNodeConstructor) :\n    undefined;\nexport { audioWorkletNodeConstructor as AudioWorkletNode };\nexport { biquadFilterNodeConstructor as BiquadFilterNode };\nexport { channelMergerNodeConstructor as ChannelMergerNode };\nexport { channelSplitterNodeConstructor as ChannelSplitterNode };\nexport { convolverNodeConstructor as ConvolverNode };\nexport { constantSourceNodeConstructor as ConstantSourceNode };\nexport { delayNodeConstructor as DelayNode };\nexport { dynamicsCompressorNodeConstructor as DynamicsCompressorNode };\nexport { gainNodeConstructor as GainNode };\nexport { iIRFilterNodeConstructor as IIRFilterNode };\nexport { mediaElementAudioSourceNodeConstructor as MediaElementAudioSourceNode };\nexport { mediaStreamAudioSourceNodeConstructor as MediaStreamAudioSourceNode };\nexport { mediaStreamTrackAudioSourceNodeConstructor as MediaStreamTrackAudioSourceNode };\nconst minimalAudioContextConstructor = createMinimalAudioContextConstructor(createInvalidStateError, createNotSupportedError, createUnknownError, minimalBaseAudioContextConstructor, nativeAudioContextConstructor);\nexport { minimalAudioContextConstructor as MinimalAudioContext };\nconst createNativeOfflineAudioContext = createCreateNativeOfflineAudioContext(createNotSupportedError, nativeOfflineAudioContextConstructor);\nconst startRendering = createStartRendering(AUDIO_BUFFER_STORE, cacheTestResult, renderNativeOfflineAudioContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, testAudioBufferCopyChannelMethodsSubarraySupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds, wrapAudioBufferCopyChannelMethodsSubarray);\nconst minimalOfflineAudioContextConstructor = createMinimalOfflineAudioContextConstructor(cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, minimalBaseAudioContextConstructor, startRendering);\nexport { minimalOfflineAudioContextConstructor as MinimalOfflineAudioContext };\nconst offlineAudioContextConstructor = createOfflineAudioContextConstructor(baseAudioContextConstructor, cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, startRendering);\nexport { offlineAudioContextConstructor as OfflineAudioContext };\nexport { oscillatorNodeConstructor as OscillatorNode };\nexport { pannerNodeConstructor as PannerNode };\nexport { periodicWaveConstructor as PeriodicWave };\nexport { stereoPannerNodeConstructor as StereoPannerNode };\nexport { waveShaperNodeConstructor as WaveShaperNode };\nexport const isAnyAudioContext = createIsAnyAudioContext(CONTEXT_STORE, isNativeAudioContext);\nexport const isAnyAudioNode = createIsAnyAudioNode(AUDIO_NODE_STORE, isNativeAudioNode);\nexport const isAnyAudioParam = createIsAnyAudioParam(AUDIO_PARAM_STORE, isNativeAudioParam);\nexport const isAnyOfflineAudioContext = createIsAnyOfflineAudioContext(CONTEXT_STORE, isNativeOfflineAudioContext);\nexport const isSupported = () => createIsSupportedPromise(cacheTestResult, createTestAudioContextCloseMethodSupport(nativeAudioContextConstructor), createTestAudioContextDecodeAudioDataMethodTypeErrorSupport(nativeOfflineAudioContextConstructor), createTestAudioContextOptionsSupport(nativeAudioContextConstructor), createTestAudioWorkletProcessorNoOutputsSupport(nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor), createTestChannelSplitterNodeChannelCountSupport(nativeOfflineAudioContextConstructor), createTestConstantSourceNodeAccurateSchedulingSupport(createNativeAudioNode, nativeOfflineAudioContextConstructor), createTestConvolverNodeBufferReassignabilitySupport(nativeOfflineAudioContextConstructor), createTestIsSecureContextSupport(window), createTestStereoPannerNodeDefaultValueSupport(nativeOfflineAudioContextConstructor), testTransferablesSupport);\n//# sourceMappingURL=/build/es2018/module.js.map","import { TEST_RESULTS } from '../globals';\nexport const createCacheTestResult = (ongoingTests) => {\n    return (tester, test) => {\n        const cachedTestResult = TEST_RESULTS.get(tester);\n        if (cachedTestResult !== undefined) {\n            return cachedTestResult;\n        }\n        const ongoingTest = ongoingTests.get(tester);\n        if (ongoingTest !== undefined) {\n            return ongoingTest;\n        }\n        const synchronousTestResult = test();\n        if (synchronousTestResult instanceof Promise) {\n            ongoingTests.set(tester, synchronousTestResult);\n            return synchronousTestResult\n                .then((finalTestResult) => {\n                ongoingTests.delete(tester);\n                TEST_RESULTS.set(tester, finalTestResult);\n                return finalTestResult;\n            });\n        }\n        TEST_RESULTS.set(tester, synchronousTestResult);\n        return synchronousTestResult;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/cache-test-result.js.map","export const createWindow = () => (typeof window === 'undefined') ? null : window;\n//# sourceMappingURL=/build/es2018/factories/window.js.map","export const createNativeOfflineAudioContextConstructor = (window) => {\n    if (window === null) {\n        return null;\n    }\n    if (window.hasOwnProperty('OfflineAudioContext')) {\n        return window.OfflineAudioContext;\n    }\n    return (window.hasOwnProperty('webkitOfflineAudioContext')) ? window.webkitOfflineAudioContext : null;\n};\n//# sourceMappingURL=/build/es2018/factories/native-offline-audio-context-constructor.js.map","export const createIsNativeOfflineAudioContext = (nativeOfflineAudioContextConstructor) => {\n    return (anything) => {\n        return (nativeOfflineAudioContextConstructor !== null && anything instanceof nativeOfflineAudioContextConstructor);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/is-native-offline-audio-context.js.map","export const createNativeAudioContextConstructor = (window) => {\n    if (window === null) {\n        return null;\n    }\n    if (window.hasOwnProperty('AudioContext')) {\n        return window.AudioContext;\n    }\n    return (window.hasOwnProperty('webkitAudioContext')) ? window.webkitAudioContext : null;\n};\n//# sourceMappingURL=/build/es2018/factories/native-audio-context-constructor.js.map","import { BACKUP_NATIVE_CONTEXT_STORE } from '../globals';\nexport const createGetBackupNativeContext = (isNativeOfflineAudioContext, nativeAudioContextConstructor, nativeOfflineAudioContextConstructor) => {\n    return (nativeContext) => {\n        /*\n         * Bug #50: Only Edge does currently not allow to create AudioNodes on a closed context yet which is why there needs to be no\n         * backupNativeContext in that case.\n         */\n        if (nativeContext.state === 'closed'\n            && nativeAudioContextConstructor !== null\n            && nativeAudioContextConstructor.name !== 'webkitAudioContext') {\n            if (isNativeOfflineAudioContext(nativeContext)) {\n                const backupNativeContext = BACKUP_NATIVE_CONTEXT_STORE.get(nativeContext);\n                if (backupNativeContext !== undefined) {\n                    return backupNativeContext;\n                }\n                if (nativeOfflineAudioContextConstructor !== null) {\n                    // @todo Copy the attached AudioWorkletProcessors and other settings.\n                    const bckpNtveCntxt = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n                    BACKUP_NATIVE_CONTEXT_STORE.set(nativeContext, bckpNtveCntxt);\n                    return bckpNtveCntxt;\n                }\n            }\n            else {\n                const backupNativeContext = BACKUP_NATIVE_CONTEXT_STORE.get(nativeContext);\n                if (backupNativeContext !== undefined) {\n                    return backupNativeContext;\n                }\n                // @todo Copy the attached AudioWorkletProcessors and other settings.\n                const bckpNtveCntxt = new nativeAudioContextConstructor();\n                BACKUP_NATIVE_CONTEXT_STORE.set(nativeContext, bckpNtveCntxt);\n                return bckpNtveCntxt;\n            }\n        }\n        return null;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/get-backup-native-context.js.map","export const createNativeAudioNodeFactory = (getBackupNativeContext) => {\n    return (nativeContext, factoryFunction) => {\n        // Bug #50: Only Edge does currently not allow to create AudioNodes on a closed context yet.\n        const backupNativeContext = getBackupNativeContext(nativeContext);\n        if (backupNativeContext !== null) {\n            return factoryFunction(backupNativeContext);\n        }\n        return factoryFunction(nativeContext);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-audio-node-factory.js.map","import { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { testAnalyserNodeGetFloatTimeDomainDataMethodSupport } from '../helpers/test-analyser-node-get-float-time-domain-data-method-support';\nimport { wrapAnalyserNodeGetFloatTimeDomainDataMethod } from '../helpers/wrap-analyser-node-get-float-time-domain-data-method';\nexport const createNativeAnalyserNodeFactory = (cacheTestResult, createIndexSizeError, createNativeAudioNode) => {\n    return (nativeContext, options) => {\n        const nativeAnalyserNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createAnalyser());\n        // Bug #37: Firefox does not create an AnalyserNode with the default properties.\n        assignNativeAudioNodeOptions(nativeAnalyserNode, options);\n        // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.\n        if (!(options.maxDecibels > options.minDecibels)) {\n            throw createIndexSizeError();\n        }\n        assignNativeAudioNodeOption(nativeAnalyserNode, options, 'fftSize');\n        assignNativeAudioNodeOption(nativeAnalyserNode, options, 'maxDecibels');\n        assignNativeAudioNodeOption(nativeAnalyserNode, options, 'minDecibels');\n        assignNativeAudioNodeOption(nativeAnalyserNode, options, 'smoothingTimeConstant');\n        // Bug #36: Safari does not support getFloatTimeDomainData() yet.\n        if (!cacheTestResult(testAnalyserNodeGetFloatTimeDomainDataMethodSupport, () => testAnalyserNodeGetFloatTimeDomainDataMethodSupport(nativeAnalyserNode))) {\n            wrapAnalyserNodeGetFloatTimeDomainDataMethod(nativeAnalyserNode);\n        }\n        return nativeAnalyserNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-analyser-node-factory.js.map","export const wrapAnalyserNodeGetFloatTimeDomainDataMethod = (nativeAnalyserNode) => {\n    nativeAnalyserNode.getFloatTimeDomainData = (array) => {\n        const byteTimeDomainData = new Uint8Array(array.length);\n        nativeAnalyserNode.getByteTimeDomainData(byteTimeDomainData);\n        const length = Math.max(byteTimeDomainData.length, nativeAnalyserNode.fftSize);\n        for (let i = 0; i < length; i += 1) {\n            array[i] = (byteTimeDomainData[i] - 128) * 0.0078125;\n        }\n        return array;\n    };\n};\n//# sourceMappingURL=/build/es2018/helpers/wrap-analyser-node-get-float-time-domain-data-method.js.map","import { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nexport const createAnalyserNodeRendererFactory = (createNativeAnalyserNode) => {\n    return () => {\n        const renderedNativeAnalyserNodes = new WeakMap();\n        const createAnalyserNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeAnalyserNode = getNativeAudioNode(proxy);\n            // If the initially used nativeAnalyserNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeAnalyserNodeIsOwnedByContext = isOwnedByContext(nativeAnalyserNode, nativeOfflineAudioContext);\n            if (!nativeAnalyserNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeAnalyserNode.channelCount,\n                    channelCountMode: nativeAnalyserNode.channelCountMode,\n                    channelInterpretation: nativeAnalyserNode.channelInterpretation,\n                    fftSize: nativeAnalyserNode.fftSize,\n                    maxDecibels: nativeAnalyserNode.maxDecibels,\n                    minDecibels: nativeAnalyserNode.minDecibels,\n                    smoothingTimeConstant: nativeAnalyserNode.smoothingTimeConstant\n                };\n                nativeAnalyserNode = createNativeAnalyserNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeAnalyserNodes.set(nativeOfflineAudioContext, nativeAnalyserNode);\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAnalyserNode);\n            return nativeAnalyserNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeAnalyserNode = renderedNativeAnalyserNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeAnalyserNode !== undefined) {\n                    return Promise.resolve(renderedNativeAnalyserNode);\n                }\n                return createAnalyserNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/analyser-node-renderer-factory.js.map","export const createIsNativeAudioNode = (window) => {\n    return (anything) => {\n        return (window !== null && typeof window.AudioNode === 'function' && anything instanceof window.AudioNode);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/is-native-audio-node.js.map","export const createIsNativeAudioParam = (window) => {\n    return (anything) => {\n        return (window !== null && typeof window.AudioParam === 'function' && anything instanceof window.AudioParam);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/is-native-audio-param.js.map","import { isNativeAudioNode } from '../guards/native-audio-node';\nexport const wrapAudioNodeDisconnectMethod = (nativeAudioNode) => {\n    const connections = new Map();\n    nativeAudioNode.connect = ((connect) => {\n        return (destination, output = 0, input = 0) => {\n            const returnValue = (isNativeAudioNode(destination))\n                ? connect(destination, output, input)\n                : connect(destination, output);\n            // Save the new connection only if the calls to connect above didn't throw an error.\n            const connectionsToDestination = connections.get(destination);\n            if (connectionsToDestination === undefined) {\n                connections.set(destination, [{ input, output }]);\n            }\n            else {\n                if (connectionsToDestination.every((connection) => (connection.input !== input || connection.output !== output))) {\n                    connectionsToDestination.push({ input, output });\n                }\n            }\n            return returnValue;\n        };\n    })(nativeAudioNode.connect.bind(nativeAudioNode));\n    nativeAudioNode.disconnect = ((disconnect) => {\n        return (destinationOrOutput, output, input) => {\n            disconnect.apply(nativeAudioNode);\n            if (destinationOrOutput === undefined) {\n                connections.clear();\n            }\n            else if (typeof destinationOrOutput === 'number') {\n                for (const [destination, connectionsToDestination] of connections) {\n                    const filteredConnections = connectionsToDestination\n                        .filter((connection) => (connection.output !== destinationOrOutput));\n                    if (filteredConnections.length === 0) {\n                        connections.delete(destination);\n                    }\n                    else {\n                        connections.set(destination, filteredConnections);\n                    }\n                }\n            }\n            else if (connections.has(destinationOrOutput)) {\n                if (output === undefined) {\n                    connections.delete(destinationOrOutput);\n                }\n                else {\n                    const connectionsToDestination = connections.get(destinationOrOutput);\n                    if (connectionsToDestination !== undefined) {\n                        const filteredConnections = connectionsToDestination\n                            .filter((connection) => (connection.output !== output && (connection.input !== input || input === undefined)));\n                        if (filteredConnections.length === 0) {\n                            connections.delete(destinationOrOutput);\n                        }\n                        else {\n                            connections.set(destinationOrOutput, filteredConnections);\n                        }\n                    }\n                }\n            }\n            for (const [destination, connectionsToDestination] of connections) {\n                connectionsToDestination\n                    .forEach((connection) => {\n                    if (isNativeAudioNode(destination)) {\n                        nativeAudioNode.connect(destination, connection.output, connection.input);\n                    }\n                    else {\n                        nativeAudioNode.connect(destination, connection.output);\n                    }\n                });\n            }\n        };\n    })(nativeAudioNode.disconnect);\n};\n//# sourceMappingURL=/build/es2018/helpers/wrap-audio-node-disconnect-method.js.map","import { isAudioNode } from '../guards/audio-node';\nimport { isDelayNode } from '../guards/delay-node';\nexport const createDetectCycles = (audioParamAudioNodeStore, createNotSupportedError, getAudioNodeConnections, getValueForKey) => {\n    return function detectCycles(source, destination) {\n        const audioNodeOfDestination = (isAudioNode(destination))\n            ? destination\n            : getValueForKey(audioParamAudioNodeStore, destination);\n        if (isDelayNode(audioNodeOfDestination)) {\n            return true;\n        }\n        if (source === audioNodeOfDestination) {\n            throw createNotSupportedError();\n        }\n        const { outputs } = getAudioNodeConnections(audioNodeOfDestination);\n        for (const outputConnection of outputs) {\n            if (detectCycles(source, outputConnection[0])) {\n                return true;\n            }\n        }\n        return false;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/detect-cycles.js.map","export const isDelayNode = (audioNode) => {\n    return 'delayTime' in audioNode;\n};\n//# sourceMappingURL=/build/es2018/guards/delay-node.js.map","export const createNoneAudioDestinationNodeConstructor = (audioNodeConstructor) => {\n    return class NoneAudioDestinationNode extends audioNodeConstructor {\n        constructor(context, internalState, nativeAudioNode, audioNodeRenderer) {\n            super(context, internalState, nativeAudioNode, audioNodeRenderer);\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/none-audio-destination-node-constructor.js.map","export const createNativeAudioBufferConstructor = (window) => {\n    if (window === null) {\n        return null;\n    }\n    if (window.hasOwnProperty('AudioBuffer')) {\n        return window.AudioBuffer;\n    }\n    return null;\n};\n//# sourceMappingURL=/build/es2018/factories/native-audio-buffer-constructor.js.map","export const createConvertNumberToUnsignedLong = (unit32Array) => {\n    return (value) => {\n        unit32Array[0] = value;\n        return unit32Array[0];\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/convert-number-to-unsigned-long.js.map","export const createWrapAudioBufferCopyChannelMethods = (convertNumberToUnsignedLong, createIndexSizeError) => {\n    return (audioBuffer) => {\n        audioBuffer.copyFromChannel = (destination, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {\n            const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n            const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n            if (channelNumber >= audioBuffer.numberOfChannels) {\n                throw createIndexSizeError();\n            }\n            const audioBufferLength = audioBuffer.length;\n            const channelData = audioBuffer.getChannelData(channelNumber);\n            const destinationLength = destination.length;\n            for (let i = (bufferOffset < 0) ? -bufferOffset : 0; i + bufferOffset < audioBufferLength && i < destinationLength; i += 1) {\n                destination[i] = channelData[i + bufferOffset];\n            }\n        };\n        audioBuffer.copyToChannel = (source, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {\n            const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n            const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n            if (channelNumber >= audioBuffer.numberOfChannels) {\n                throw createIndexSizeError();\n            }\n            const audioBufferLength = audioBuffer.length;\n            const channelData = audioBuffer.getChannelData(channelNumber);\n            const sourceLength = source.length;\n            for (let i = (bufferOffset < 0) ? -bufferOffset : 0; i + bufferOffset < audioBufferLength && i < sourceLength; i += 1) {\n                channelData[i + bufferOffset] = source[i];\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/wrap-audio-buffer-copy-channel-methods.js.map","export const createWrapAudioBufferCopyChannelMethodsOutOfBounds = (convertNumberToUnsignedLong) => {\n    return (audioBuffer) => {\n        audioBuffer.copyFromChannel = ((copyFromChannel) => {\n            return (destination, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {\n                const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n                const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n                if (bufferOffset < audioBuffer.length) {\n                    return copyFromChannel.call(audioBuffer, destination, channelNumber, bufferOffset);\n                }\n            };\n        })(audioBuffer.copyFromChannel);\n        audioBuffer.copyToChannel = ((copyToChannel) => {\n            return (source, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {\n                const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n                const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n                if (bufferOffset < audioBuffer.length) {\n                    return copyToChannel.call(audioBuffer, source, channelNumber, bufferOffset);\n                }\n            };\n        })(audioBuffer.copyToChannel);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/wrap-audio-buffer-copy-channel-methods-out-of-bounds.js.map","export const createWrapAudioBufferCopyChannelMethodsSubarray = (convertNumberToUnsignedLong, createIndexSizeError) => {\n    return (audioBuffer) => {\n        audioBuffer.copyFromChannel = ((copyFromChannel) => {\n            return (destination, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {\n                const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n                const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n                if (channelNumber >= audioBuffer.numberOfChannels) {\n                    throw createIndexSizeError();\n                }\n                if (bufferOffset < audioBuffer.length && audioBuffer.length - bufferOffset < destination.length) {\n                    return copyFromChannel.call(audioBuffer, destination.subarray(0, audioBuffer.length - bufferOffset), channelNumber, bufferOffset);\n                }\n                return copyFromChannel.call(audioBuffer, destination, channelNumber, bufferOffset);\n            };\n        })(audioBuffer.copyFromChannel);\n        audioBuffer.copyToChannel = ((copyToChannel) => {\n            return (source, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {\n                const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n                const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n                if (channelNumber >= audioBuffer.numberOfChannels) {\n                    throw createIndexSizeError();\n                }\n                if (bufferOffset < audioBuffer.length && audioBuffer.length - bufferOffset < source.length) {\n                    return copyToChannel.call(audioBuffer, source.subarray(0, audioBuffer.length - bufferOffset), channelNumber, bufferOffset);\n                }\n                return copyToChannel.call(audioBuffer, source, channelNumber, bufferOffset);\n            };\n        })(audioBuffer.copyToChannel);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/wrap-audio-buffer-copy-channel-methods-subarray.js.map","// Bug #33: Edge & Safari expose an AudioBuffer but it can't be used as a constructor.\nexport const createTestAudioBufferConstructorSupport = (nativeAudioBufferConstructor) => {\n    return () => {\n        if (nativeAudioBufferConstructor === null) {\n            return false;\n        }\n        try {\n            new nativeAudioBufferConstructor({ length: 1, sampleRate: 44100 }); // tslint:disable-line:no-unused-expression\n        }\n        catch (_a) {\n            return false;\n        }\n        return true;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/test-audio-buffer-constructor-support.js.map","export const createTestAudioScheduledSourceNodeStartMethodNegativeParametersSupport = (createNativeAudioNode) => {\n    return (nativeContext) => {\n        const nativeAudioBufferSourceNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createOscillator());\n        try {\n            nativeAudioBufferSourceNode.start(-1);\n        }\n        catch (err) {\n            return (err instanceof RangeError);\n        }\n        return false;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/test-audio-scheduled-source-node-start-method-negative-parameters-support.js.map","export const createTestAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport = (createNativeAudioNode) => {\n    return (nativeContext) => {\n        const nativeAudioBuffer = nativeContext.createBuffer(1, 1, 44100);\n        const nativeAudioBufferSourceNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createBufferSource());\n        nativeAudioBufferSourceNode.buffer = nativeAudioBuffer;\n        nativeAudioBufferSourceNode.start();\n        nativeAudioBufferSourceNode.stop();\n        try {\n            nativeAudioBufferSourceNode.stop();\n            return true;\n        }\n        catch (_a) {\n            return false;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/test-audio-scheduled-source-node-stop-method-consecutive-calls-support.js.map","export const createTestAudioScheduledSourceNodeStopMethodNegativeParametersSupport = (createNativeAudioNode) => {\n    return (nativeContext) => {\n        const nativeAudioBufferSourceNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createOscillator());\n        try {\n            nativeAudioBufferSourceNode.stop(-1);\n        }\n        catch (err) {\n            return (err instanceof RangeError);\n        }\n        return false;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/test-audio-scheduled-source-node-stop-method-negative-parameters-support.js.map","import { interceptConnections } from '../helpers/intercept-connections';\nexport const createWrapAudioScheduledSourceNodeStopMethodConsecutiveCalls = (createNativeAudioNode) => {\n    return (nativeAudioScheduledSourceNode, nativeContext) => {\n        const nativeGainNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createGain());\n        nativeAudioScheduledSourceNode.connect(nativeGainNode);\n        const disconnectGainNode = ((disconnect) => {\n            return () => {\n                // @todo TypeScript cannot infer the overloaded signature with 1 argument yet.\n                disconnect.call(nativeAudioScheduledSourceNode, nativeGainNode);\n                nativeAudioScheduledSourceNode.removeEventListener('ended', disconnectGainNode);\n            };\n        })(nativeAudioScheduledSourceNode.disconnect);\n        nativeAudioScheduledSourceNode.addEventListener('ended', disconnectGainNode);\n        interceptConnections(nativeAudioScheduledSourceNode, nativeGainNode);\n        nativeAudioScheduledSourceNode.stop = ((stop) => {\n            let isStopped = false;\n            return (when = 0) => {\n                if (isStopped) {\n                    try {\n                        stop.call(nativeAudioScheduledSourceNode, when);\n                    }\n                    catch (_a) {\n                        nativeGainNode.gain.setValueAtTime(0, when);\n                    }\n                }\n                else {\n                    stop.call(nativeAudioScheduledSourceNode, when);\n                    isStopped = true;\n                }\n            };\n        })(nativeAudioScheduledSourceNode.stop);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/wrap-audio-scheduled-source-node-stop-method-consecutive-calls.js.map","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { wrapAudioBufferSourceNodeStartMethodConsecutiveCalls } from '../helpers/wrap-audio-buffer-source-node-start-method-consecutive-calls';\nimport { wrapAudioBufferSourceNodeStartMethodDurationParameter } from '../helpers/wrap-audio-buffer-source-node-start-method-duration-parameter';\nimport { wrapAudioScheduledSourceNodeStartMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters';\nimport { wrapAudioScheduledSourceNodeStopMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters';\nexport const createNativeAudioBufferSourceNodeFactory = (cacheTestResult, createNativeAudioNode, testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport, testAudioBufferSourceNodeStartMethodDurationParameterSupport, testAudioBufferSourceNodeStartMethodOffsetClampingSupport, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioBufferSourceNodeStartMethodOffsetClampling, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls) => {\n    return (nativeContext, options = {}) => {\n        const nativeAudioBufferSourceNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createBufferSource());\n        assignNativeAudioNodeOptions(nativeAudioBufferSourceNode, options);\n        assignNativeAudioNodeAudioParamValue(nativeAudioBufferSourceNode, options, 'playbackRate');\n        // Bug #71: Edge does not allow to set the buffer to null.\n        assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'buffer');\n        // Bug #149: Safari does not yet support the detune AudioParam.\n        assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'loop');\n        assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'loopEnd');\n        assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'loopStart');\n        // Bug #69: Safari does allow calls to start() of an already scheduled AudioBufferSourceNode.\n        if (!cacheTestResult(testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport, () => testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport(nativeContext))) {\n            wrapAudioBufferSourceNodeStartMethodConsecutiveCalls(nativeAudioBufferSourceNode);\n        }\n        // Bug #92: Edge does not respect the duration parameter yet.\n        if (!cacheTestResult(testAudioBufferSourceNodeStartMethodDurationParameterSupport, testAudioBufferSourceNodeStartMethodDurationParameterSupport)) {\n            wrapAudioBufferSourceNodeStartMethodDurationParameter(nativeAudioBufferSourceNode, nativeContext);\n        }\n        // Bug #154 & #155: Safari does not handle offsets which are equal to or greater than the duration of the buffer.\n        if (!cacheTestResult(testAudioBufferSourceNodeStartMethodOffsetClampingSupport, () => testAudioBufferSourceNodeStartMethodOffsetClampingSupport(nativeContext))) {\n            wrapAudioBufferSourceNodeStartMethodOffsetClampling(nativeAudioBufferSourceNode);\n        }\n        // Bug #44: Only Chrome, Firefox & Opera throw a RangeError yet.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(nativeContext))) {\n            wrapAudioScheduledSourceNodeStartMethodNegativeParameters(nativeAudioBufferSourceNode);\n        }\n        // Bug #19: Safari does not ignore calls to stop() of an already stopped AudioBufferSourceNode.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, () => testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport(nativeContext))) {\n            wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls(nativeAudioBufferSourceNode, nativeContext);\n        }\n        // Bug #44: Only Firefox does throw a RangeError yet.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(nativeContext))) {\n            wrapAudioScheduledSourceNodeStopMethodNegativeParameters(nativeAudioBufferSourceNode);\n        }\n        return nativeAudioBufferSourceNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-audio-buffer-source-node-factory.js.map","import { createInvalidStateError } from '../factories/invalid-state-error';\nexport const wrapAudioBufferSourceNodeStartMethodConsecutiveCalls = (nativeAudioBufferSourceNode) => {\n    nativeAudioBufferSourceNode.start = ((start) => {\n        let isScheduled = false;\n        return (when = 0, offset = 0, duration) => {\n            if (isScheduled) {\n                throw createInvalidStateError();\n            }\n            start.call(nativeAudioBufferSourceNode, when, offset, duration);\n            isScheduled = true;\n        };\n    })(nativeAudioBufferSourceNode.start);\n};\n//# sourceMappingURL=/build/es2018/helpers/wrap-audio-buffer-source-node-start-method-consecutive-calls.js.map","export const wrapAudioBufferSourceNodeStartMethodDurationParameter = (nativeAudioScheduledSourceNode, nativeContext) => {\n    let endTime = Number.POSITIVE_INFINITY;\n    let stopTime = Number.POSITIVE_INFINITY;\n    nativeAudioScheduledSourceNode.start = ((start, stop) => {\n        return (when = 0, offset = 0, duration = Number.POSITIVE_INFINITY) => {\n            start.call(nativeAudioScheduledSourceNode, when, offset);\n            if (duration >= 0 && duration < Number.POSITIVE_INFINITY) {\n                const actualStartTime = Math.max(when, nativeContext.currentTime);\n                // @todo The playbackRate could of course also have been automated and is not always fixed.\n                const durationInBufferTime = (duration / nativeAudioScheduledSourceNode.playbackRate.value);\n                endTime = actualStartTime + durationInBufferTime;\n                stop.call(nativeAudioScheduledSourceNode, Math.min(endTime, stopTime));\n            }\n        };\n    })(nativeAudioScheduledSourceNode.start, nativeAudioScheduledSourceNode.stop);\n    nativeAudioScheduledSourceNode.stop = ((stop) => {\n        return (when = 0) => {\n            stopTime = Math.max(when, nativeContext.currentTime);\n            stop.call(nativeAudioScheduledSourceNode, Math.min(endTime, stopTime));\n        };\n    })(nativeAudioScheduledSourceNode.stop);\n};\n//# sourceMappingURL=/build/es2018/helpers/wrap-audio-buffer-source-node-start-method-duration-parameter.js.map","export const createTestAudioBufferSourceNodeStartMethodConsecutiveCallsSupport = (createNativeAudioNode) => {\n    return (nativeContext) => {\n        const nativeAudioBufferSourceNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createBufferSource());\n        nativeAudioBufferSourceNode.start();\n        try {\n            nativeAudioBufferSourceNode.start();\n        }\n        catch (_a) {\n            return true;\n        }\n        return false;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/test-audio-buffer-source-node-start-method-consecutive-calls-support.js.map","// Bug #92: Edge does not respect the duration parameter yet.\nexport const createTestAudioBufferSourceNodeStartMethodDurationParameterSupport = (nativeOfflineAudioContextConstructor) => {\n    return () => {\n        if (nativeOfflineAudioContextConstructor === null) {\n            return Promise.resolve(false);\n        }\n        const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n        const audioBuffer = offlineAudioContext.createBuffer(1, 1, offlineAudioContext.sampleRate);\n        const audioBufferSourceNode = offlineAudioContext.createBufferSource();\n        audioBuffer.getChannelData(0)[0] = 1;\n        audioBufferSourceNode.buffer = audioBuffer;\n        audioBufferSourceNode.start(0, 0, 0);\n        audioBufferSourceNode.connect(offlineAudioContext.destination);\n        // Bug #21: Safari does not support promises yet.\n        return new Promise((resolve) => {\n            offlineAudioContext.oncomplete = ({ renderedBuffer }) => {\n                // Bug #5: Safari does not support copyFromChannel().\n                resolve(renderedBuffer.getChannelData(0)[0] === 0);\n            };\n            offlineAudioContext.startRendering();\n        });\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/test-audio-buffer-source-node-start-method-duration-parameter-support.js.map","export const createTestAudioBufferSourceNodeStartMethodOffsetClampingSupport = (createNativeAudioNode) => {\n    return (nativeContext) => {\n        const nativeAudioBufferSourceNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createBufferSource());\n        const nativeAudioBuffer = nativeContext.createBuffer(1, 1, 44100);\n        nativeAudioBufferSourceNode.buffer = nativeAudioBuffer;\n        try {\n            nativeAudioBufferSourceNode.start(0, 1);\n        }\n        catch (_a) {\n            return false;\n        }\n        return true;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/test-audio-buffer-source-node-start-method-offset-clamping-support.js.map","export const wrapAudioBufferSourceNodeStartMethodOffsetClamping = (nativeAudioBufferSourceNode) => {\n    nativeAudioBufferSourceNode.start = ((start) => {\n        return (when = 0, offset = 0, duration) => {\n            const buffer = nativeAudioBufferSourceNode.buffer;\n            // Bug #154: Safari does not clamp the offset if it is equal to or greater than the duration of the buffer.\n            const clampedOffset = (buffer === null) ? offset : Math.min(buffer.duration, offset);\n            // Bug #155: Safari does not handle the offset correctly if it would cause the buffer to be not be played at all.\n            if (buffer !== null && clampedOffset > buffer.duration - (0.5 / nativeAudioBufferSourceNode.context.sampleRate)) {\n                start.call(nativeAudioBufferSourceNode, when, 0, 0);\n            }\n            else {\n                start.call(nativeAudioBufferSourceNode, when, clampedOffset, duration);\n            }\n        };\n    })(nativeAudioBufferSourceNode.start);\n};\n//# sourceMappingURL=/build/es2018/helpers/wrap-audio-buffer-source-node-start-method-offset-clamping.js.map","import { connectAudioParam } from '../helpers/connect-audio-param';\nimport { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { renderAutomation } from '../helpers/render-automation';\nimport { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nexport const createAudioBufferSourceNodeRendererFactory = (createNativeAudioBufferSourceNode) => {\n    return () => {\n        const renderedNativeAudioBufferSourceNodes = new WeakMap();\n        let start = null;\n        let stop = null;\n        const createAudioBufferSourceNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeAudioBufferSourceNode = getNativeAudioNode(proxy);\n            /*\n             * If the initially used nativeAudioBufferSourceNode was not constructed on the same OfflineAudioContext it needs to be created\n             * again.\n             */\n            const nativeAudioBufferSourceNodeIsOwnedByContext = isOwnedByContext(nativeAudioBufferSourceNode, nativeOfflineAudioContext);\n            if (!nativeAudioBufferSourceNodeIsOwnedByContext) {\n                const options = {\n                    buffer: nativeAudioBufferSourceNode.buffer,\n                    channelCount: nativeAudioBufferSourceNode.channelCount,\n                    channelCountMode: nativeAudioBufferSourceNode.channelCountMode,\n                    channelInterpretation: nativeAudioBufferSourceNode.channelInterpretation,\n                    // Bug #149: Safari does not yet support the detune AudioParam.\n                    loop: nativeAudioBufferSourceNode.loop,\n                    loopEnd: nativeAudioBufferSourceNode.loopEnd,\n                    loopStart: nativeAudioBufferSourceNode.loopStart,\n                    playbackRate: nativeAudioBufferSourceNode.playbackRate.value\n                };\n                nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext, options);\n                if (start !== null) {\n                    nativeAudioBufferSourceNode.start(...start);\n                }\n                if (stop !== null) {\n                    nativeAudioBufferSourceNode.stop(stop);\n                }\n            }\n            renderedNativeAudioBufferSourceNodes.set(nativeOfflineAudioContext, nativeAudioBufferSourceNode);\n            if (!nativeAudioBufferSourceNodeIsOwnedByContext) {\n                // Bug #149: Safari does not yet support the detune AudioParam.\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.playbackRate, nativeAudioBufferSourceNode.playbackRate);\n            }\n            else {\n                // Bug #149: Safari does not yet support the detune AudioParam.\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.playbackRate);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioBufferSourceNode);\n            return nativeAudioBufferSourceNode;\n        };\n        return {\n            set start(value) {\n                start = value;\n            },\n            set stop(value) {\n                stop = value;\n            },\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeAudioBufferSourceNode = renderedNativeAudioBufferSourceNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeAudioBufferSourceNode !== undefined) {\n                    return Promise.resolve(renderedNativeAudioBufferSourceNode);\n                }\n                return createAudioBufferSourceNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-buffer-source-node-renderer-factory.js.map","import { AutomationEventList } from 'automation-events';\nimport { AUDIO_PARAM_AUDIO_NODE_STORE, AUDIO_PARAM_STORE } from '../globals';\nimport { getAudioGraph } from '../helpers/get-audio-graph';\nconst addAudioParam = (context, audioParam, audioParamRenderer) => {\n    const audioGraph = getAudioGraph(context);\n    audioGraph.params.set(audioParam, { activeInputs: new Set(), passiveInputs: new WeakMap(), renderer: audioParamRenderer });\n};\nexport const createAudioParamFactory = (createAudioParamRenderer, createCancelAndHoldAutomationEvent, createCancelScheduledValuesAutomationEvent, createExponentialRampToValueAutomationEvent, createLinearRampToValueAutomationEvent, createSetTargetAutomationEvent, createSetValueAutomationEvent, createSetValueCurveAutomationEvent, nativeAudioContextConstructor) => {\n    return (audioNode, isAudioParamOfOfflineAudioContext, nativeAudioParam, maxValue = null, minValue = null) => {\n        const automationEventList = new AutomationEventList(nativeAudioParam.defaultValue);\n        const audioParamRenderer = (isAudioParamOfOfflineAudioContext) ? createAudioParamRenderer(automationEventList) : null;\n        const audioParam = {\n            get defaultValue() {\n                return nativeAudioParam.defaultValue;\n            },\n            get maxValue() {\n                return (maxValue === null) ? nativeAudioParam.maxValue : maxValue;\n            },\n            get minValue() {\n                return (minValue === null) ? nativeAudioParam.minValue : minValue;\n            },\n            get value() {\n                return nativeAudioParam.value;\n            },\n            set value(value) {\n                nativeAudioParam.value = value;\n                // Bug #98: Edge, Firefox & Safari do not yet treat the value setter like a call to setValueAtTime().\n                audioParam.setValueAtTime(value, audioNode.context.currentTime);\n            },\n            cancelAndHoldAtTime(cancelTime) {\n                // Bug #28: Edge, Firefox & Safari do not yet implement cancelAndHoldAtTime().\n                if (typeof nativeAudioParam.cancelAndHoldAtTime === 'function') {\n                    if (audioParamRenderer === null) {\n                        automationEventList.flush(audioNode.context.currentTime);\n                    }\n                    automationEventList.add(createCancelAndHoldAutomationEvent(cancelTime));\n                    nativeAudioParam.cancelAndHoldAtTime(cancelTime);\n                }\n                else {\n                    const previousLastEvent = Array\n                        .from(automationEventList)\n                        .pop();\n                    if (audioParamRenderer === null) {\n                        automationEventList.flush(audioNode.context.currentTime);\n                    }\n                    automationEventList.add(createCancelAndHoldAutomationEvent(cancelTime));\n                    const currentLastEvent = Array\n                        .from(automationEventList)\n                        .pop();\n                    nativeAudioParam.cancelScheduledValues(cancelTime);\n                    if (previousLastEvent !== currentLastEvent && currentLastEvent !== undefined) {\n                        if (currentLastEvent.type === 'exponentialRampToValue') {\n                            nativeAudioParam.exponentialRampToValueAtTime(currentLastEvent.value, currentLastEvent.endTime);\n                        }\n                        else if (currentLastEvent.type === 'linearRampToValue') {\n                            nativeAudioParam.linearRampToValueAtTime(currentLastEvent.value, currentLastEvent.endTime);\n                        }\n                        else if (currentLastEvent.type === 'setValue') {\n                            nativeAudioParam.setValueAtTime(currentLastEvent.value, currentLastEvent.startTime);\n                        }\n                        else if (currentLastEvent.type === 'setValueCurve') {\n                            nativeAudioParam.setValueCurveAtTime(currentLastEvent.values, currentLastEvent.startTime, currentLastEvent.duration);\n                        }\n                    }\n                }\n                return audioParam;\n            },\n            cancelScheduledValues(cancelTime) {\n                if (audioParamRenderer === null) {\n                    automationEventList.flush(audioNode.context.currentTime);\n                }\n                automationEventList.add(createCancelScheduledValuesAutomationEvent(cancelTime));\n                nativeAudioParam.cancelScheduledValues(cancelTime);\n                return audioParam;\n            },\n            exponentialRampToValueAtTime(value, endTime) {\n                if (audioParamRenderer === null) {\n                    automationEventList.flush(audioNode.context.currentTime);\n                }\n                automationEventList.add(createExponentialRampToValueAutomationEvent(value, endTime));\n                nativeAudioParam.exponentialRampToValueAtTime(value, endTime);\n                return audioParam;\n            },\n            linearRampToValueAtTime(value, endTime) {\n                if (audioParamRenderer === null) {\n                    automationEventList.flush(audioNode.context.currentTime);\n                }\n                automationEventList.add(createLinearRampToValueAutomationEvent(value, endTime));\n                nativeAudioParam.linearRampToValueAtTime(value, endTime);\n                return audioParam;\n            },\n            setTargetAtTime(target, startTime, timeConstant) {\n                if (audioParamRenderer === null) {\n                    automationEventList.flush(audioNode.context.currentTime);\n                }\n                automationEventList.add(createSetTargetAutomationEvent(target, startTime, timeConstant));\n                nativeAudioParam.setTargetAtTime(target, startTime, timeConstant);\n                return audioParam;\n            },\n            setValueAtTime(value, startTime) {\n                if (audioParamRenderer === null) {\n                    automationEventList.flush(audioNode.context.currentTime);\n                }\n                automationEventList.add(createSetValueAutomationEvent(value, startTime));\n                nativeAudioParam.setValueAtTime(value, startTime);\n                return audioParam;\n            },\n            setValueCurveAtTime(values, startTime, duration) {\n                /*\n                 * Bug #152: Safari does not correctly interpolate the values of the curve.\n                 * @todo Unfortunately there is no way to test for this behavior in synchronous fashion which is why testing for the\n                 * existence of the webkitAudioContext is used as a workaround here.\n                 */\n                if (nativeAudioContextConstructor !== null && nativeAudioContextConstructor.name === 'webkitAudioContext') {\n                    const endTime = startTime + duration;\n                    const sampleRate = audioNode.context.sampleRate;\n                    const firstSample = Math.ceil(startTime * sampleRate);\n                    const lastSample = Math.floor((endTime) * sampleRate);\n                    const numberOfInterpolatedValues = lastSample - firstSample;\n                    const interpolatedValues = new Float32Array(numberOfInterpolatedValues);\n                    for (let i = 0; i < numberOfInterpolatedValues; i += 1) {\n                        const theoreticIndex = ((values.length - 1) / duration) * (((firstSample + i) / sampleRate) - startTime);\n                        const lowerIndex = Math.floor(theoreticIndex);\n                        const upperIndex = Math.ceil(theoreticIndex);\n                        interpolatedValues[i] = (lowerIndex === upperIndex)\n                            ? values[lowerIndex]\n                            : ((1 - (theoreticIndex - lowerIndex)) * values[lowerIndex])\n                                + ((1 - (upperIndex - theoreticIndex)) * values[upperIndex]);\n                    }\n                    if (audioParamRenderer === null) {\n                        automationEventList.flush(audioNode.context.currentTime);\n                    }\n                    automationEventList.add(createSetValueCurveAutomationEvent(interpolatedValues, startTime, duration));\n                    nativeAudioParam.setValueCurveAtTime(interpolatedValues, startTime, duration);\n                    const timeOfLastSample = lastSample / sampleRate;\n                    if (timeOfLastSample < endTime) {\n                        audioParam.setValueAtTime(interpolatedValues[interpolatedValues.length - 1], timeOfLastSample);\n                    }\n                    audioParam.setValueAtTime(values[values.length - 1], endTime);\n                }\n                else {\n                    if (audioParamRenderer === null) {\n                        automationEventList.flush(audioNode.context.currentTime);\n                    }\n                    automationEventList.add(createSetValueCurveAutomationEvent(values, startTime, duration));\n                    nativeAudioParam.setValueCurveAtTime(values, startTime, duration);\n                }\n                return audioParam;\n            }\n        };\n        AUDIO_PARAM_STORE.set(audioParam, nativeAudioParam);\n        AUDIO_PARAM_AUDIO_NODE_STORE.set(audioParam, audioNode);\n        addAudioParam(audioNode.context, audioParam, audioParamRenderer);\n        return audioParam;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-param-factory.js.map","export const createAudioParamRenderer = (automationEventList) => {\n    return {\n        replay(audioParam) {\n            for (const automationEvent of automationEventList) {\n                if (automationEvent.type === 'exponentialRampToValue') {\n                    const { endTime, value } = automationEvent;\n                    audioParam.exponentialRampToValueAtTime(value, endTime);\n                }\n                else if (automationEvent.type === 'linearRampToValue') {\n                    const { endTime, value } = automationEvent;\n                    audioParam.linearRampToValueAtTime(value, endTime);\n                }\n                else if (automationEvent.type === 'setTarget') {\n                    const { startTime, target, timeConstant } = automationEvent;\n                    audioParam.setTargetAtTime(target, startTime, timeConstant);\n                }\n                else if (automationEvent.type === 'setValue') {\n                    const { startTime, value } = automationEvent;\n                    audioParam.setValueAtTime(value, startTime);\n                }\n                else if (automationEvent.type === 'setValueCurve') {\n                    const { duration, startTime, values } = automationEvent;\n                    audioParam.setValueCurveAtTime(values, startTime, duration);\n                }\n                else {\n                    throw new Error(\"Can't apply an unknown automation.\");\n                }\n            }\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-param-renderer.js.map","export const MOST_NEGATIVE_SINGLE_FLOAT = -3.4028234663852886e38;\nexport const MOST_POSITIVE_SINGLE_FLOAT = -MOST_NEGATIVE_SINGLE_FLOAT;\n//# sourceMappingURL=/build/es2018/constants.js.map","import { AUDIO_GRAPHS } from '../globals';\nimport { getNativeContext } from '../helpers/get-native-context';\nexport const createAudioDestinationNodeConstructor = (audioNodeConstructor, createAudioDestinationNodeRenderer, createIndexSizeError, createInvalidStateError, createNativeAudioDestinationNode, isNativeOfflineAudioContext) => {\n    return class AudioDestinationNode extends audioNodeConstructor {\n        constructor(context, channelCount) {\n            const nativeContext = getNativeContext(context);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const nativeAudioDestinationNode = createNativeAudioDestinationNode(nativeContext, channelCount, isOffline);\n            const audioDestinationNodeRenderer = ((isOffline) ? createAudioDestinationNodeRenderer() : null);\n            const audioGraph = { audioWorkletGlobalScope: null, nodes: new WeakMap(), params: new WeakMap() };\n            AUDIO_GRAPHS.set(context, audioGraph);\n            super(context, 'passive', nativeAudioDestinationNode, audioDestinationNodeRenderer);\n            this._isNodeOfNativeOfflineAudioContext = isOffline;\n            this._nativeAudioDestinationNode = nativeAudioDestinationNode;\n        }\n        get channelCount() {\n            return this._nativeAudioDestinationNode.channelCount;\n        }\n        set channelCount(value) {\n            // Bug #52: Chrome, Edge, Opera & Safari do not throw an exception at all.\n            // Bug #54: Firefox does throw an IndexSizeError.\n            if (this._isNodeOfNativeOfflineAudioContext) {\n                throw createInvalidStateError();\n            }\n            // Bug #47: The AudioDestinationNode in Edge and Safari do not initialize the maxChannelCount property correctly.\n            if (value > this._nativeAudioDestinationNode.maxChannelCount) {\n                throw createIndexSizeError();\n            }\n            this._nativeAudioDestinationNode.channelCount = value;\n        }\n        get channelCountMode() {\n            return this._nativeAudioDestinationNode.channelCountMode;\n        }\n        set channelCountMode(value) {\n            // Bug #53: No browser does throw an exception yet.\n            if (this._isNodeOfNativeOfflineAudioContext) {\n                throw createInvalidStateError();\n            }\n            this._nativeAudioDestinationNode.channelCountMode = value;\n        }\n        get maxChannelCount() {\n            return this._nativeAudioDestinationNode.maxChannelCount;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-destination-node-constructor.js.map","import { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nexport const createAudioDestinationNodeRenderer = () => {\n    let nativeAudioDestinationNodePromise = null;\n    const createAudioDestinationNode = async (proxy, nativeOfflineAudioContext) => {\n        const nativeAudioDestinationNode = nativeOfflineAudioContext.destination;\n        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioDestinationNode);\n        return nativeAudioDestinationNode;\n    };\n    return {\n        render(proxy, nativeOfflineAudioContext) {\n            if (nativeAudioDestinationNodePromise === null) {\n                nativeAudioDestinationNodePromise = createAudioDestinationNode(proxy, nativeOfflineAudioContext);\n            }\n            return nativeAudioDestinationNodePromise;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-destination-node-renderer-factory.js.map","export const createNativeAudioDestinationNode = (nativeContext, channelCount, isNodeOfNativeOfflineAudioContext) => {\n    const nativeAudioDestinationNode = nativeContext.destination;\n    // Bug #132: Edge & Safari do not have the correct channelCount.\n    if (nativeAudioDestinationNode.channelCount !== channelCount) {\n        nativeAudioDestinationNode.channelCount = channelCount;\n    }\n    // Bug #83: Edge & Safari do not have the correct channelCountMode.\n    if (isNodeOfNativeOfflineAudioContext && nativeAudioDestinationNode.channelCountMode !== 'explicit') {\n        nativeAudioDestinationNode.channelCountMode = 'explicit';\n    }\n    // Bug #47: The AudioDestinationNode in Edge and Safari does not initialize the maxChannelCount property correctly.\n    if (nativeAudioDestinationNode.maxChannelCount === 0) {\n        Object.defineProperty(nativeAudioDestinationNode, 'maxChannelCount', {\n            get: () => nativeAudioDestinationNode.channelCount\n        });\n    }\n    return nativeAudioDestinationNode;\n};\n//# sourceMappingURL=/build/es2018/factories/native-audio-destination-node.js.map","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeBiquadFilterNodeFactory = (createNativeAudioNode) => {\n    return (nativeContext, options) => {\n        const nativeBiquadFilterNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createBiquadFilter());\n        assignNativeAudioNodeOptions(nativeBiquadFilterNode, options);\n        assignNativeAudioNodeAudioParamValue(nativeBiquadFilterNode, options, 'Q');\n        assignNativeAudioNodeAudioParamValue(nativeBiquadFilterNode, options, 'detune');\n        assignNativeAudioNodeAudioParamValue(nativeBiquadFilterNode, options, 'frequency');\n        assignNativeAudioNodeAudioParamValue(nativeBiquadFilterNode, options, 'gain');\n        assignNativeAudioNodeOption(nativeBiquadFilterNode, options, 'type');\n        return nativeBiquadFilterNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-biquad-filter-node-factory.js.map","import { connectAudioParam } from '../helpers/connect-audio-param';\nimport { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { renderAutomation } from '../helpers/render-automation';\nimport { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nexport const createBiquadFilterNodeRendererFactory = (createNativeBiquadFilterNode) => {\n    return () => {\n        const renderedNativeBiquadFilterNodes = new WeakMap();\n        const createBiquadFilterNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeBiquadFilterNode = getNativeAudioNode(proxy);\n            /*\n             * If the initially used nativeBiquadFilterNode was not constructed on the same OfflineAudioContext it needs to be created\n             * again.\n             */\n            const nativeBiquadFilterNodeIsOwnedByContext = isOwnedByContext(nativeBiquadFilterNode, nativeOfflineAudioContext);\n            if (!nativeBiquadFilterNodeIsOwnedByContext) {\n                const options = {\n                    Q: nativeBiquadFilterNode.Q.value,\n                    channelCount: nativeBiquadFilterNode.channelCount,\n                    channelCountMode: nativeBiquadFilterNode.channelCountMode,\n                    channelInterpretation: nativeBiquadFilterNode.channelInterpretation,\n                    detune: nativeBiquadFilterNode.detune.value,\n                    frequency: nativeBiquadFilterNode.frequency.value,\n                    gain: nativeBiquadFilterNode.gain.value,\n                    type: nativeBiquadFilterNode.type\n                };\n                nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeBiquadFilterNodes.set(nativeOfflineAudioContext, nativeBiquadFilterNode);\n            if (!nativeBiquadFilterNodeIsOwnedByContext) {\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q);\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune);\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency);\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain);\n            }\n            else {\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.Q);\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.detune);\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.frequency);\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.gain);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeBiquadFilterNode);\n            return nativeBiquadFilterNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeBiquadFilterNode = renderedNativeBiquadFilterNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeBiquadFilterNode !== undefined) {\n                    return Promise.resolve(renderedNativeBiquadFilterNode);\n                }\n                return createBiquadFilterNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/biquad-filter-node-renderer-factory.js.map","export const createWrapChannelMergerNode = (createInvalidStateError, createNativeAudioNode) => {\n    return (nativeContext, channelMergerNode) => {\n        const audioBufferSourceNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createBufferSource());\n        channelMergerNode.channelCount = 1;\n        channelMergerNode.channelCountMode = 'explicit';\n        // Bug #20: Safari requires a connection of any kind to treat the input signal correctly.\n        const length = channelMergerNode.numberOfInputs;\n        for (let i = 0; i < length; i += 1) {\n            audioBufferSourceNode.connect(channelMergerNode, 0, i);\n        }\n        Object.defineProperty(channelMergerNode, 'channelCount', {\n            get: () => 1,\n            set: () => {\n                throw createInvalidStateError();\n            }\n        });\n        Object.defineProperty(channelMergerNode, 'channelCountMode', {\n            get: () => 'explicit',\n            set: () => {\n                throw createInvalidStateError();\n            }\n        });\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/wrap-channel-merger-node.js.map","import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeChannelMergerNodeFactory = (createNativeAudioNode, wrapChannelMergerNode) => {\n    return (nativeContext, options) => {\n        const nativeChannelMergerNode = createNativeAudioNode(nativeContext, (ntvCntxt) => {\n            return ntvCntxt.createChannelMerger(options.numberOfInputs);\n        });\n        assignNativeAudioNodeOptions(nativeChannelMergerNode, options);\n        // Bug #15: Safari does not return the default properties.\n        if (nativeChannelMergerNode.channelCount !== 1 &&\n            nativeChannelMergerNode.channelCountMode !== 'explicit') {\n            wrapChannelMergerNode(nativeContext, nativeChannelMergerNode);\n        }\n        // Bug #16: Firefox does not throw an error when setting a different channelCount or channelCountMode.\n        try {\n            nativeChannelMergerNode.channelCount = (options.numberOfInputs === undefined) ? 6 : options.numberOfInputs;\n            wrapChannelMergerNode(nativeContext, nativeChannelMergerNode);\n        }\n        catch ( /* Ignore errors. */_a) { /* Ignore errors. */ } // tslint:disable-line:no-empty\n        return nativeChannelMergerNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-channel-merger-node-factory.js.map","import { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nexport const createChannelMergerNodeRendererFactory = (createNativeChannelMergerNode) => {\n    return () => {\n        const renderedNativeAudioNodes = new WeakMap();\n        const createAudioNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeAudioNode = getNativeAudioNode(proxy);\n            // If the initially used nativeAudioNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeAudioNodeIsOwnedByContext = isOwnedByContext(nativeAudioNode, nativeOfflineAudioContext);\n            if (!nativeAudioNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeAudioNode.channelCount,\n                    channelCountMode: nativeAudioNode.channelCountMode,\n                    channelInterpretation: nativeAudioNode.channelInterpretation,\n                    numberOfInputs: nativeAudioNode.numberOfInputs\n                };\n                nativeAudioNode = createNativeChannelMergerNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioNode);\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioNode);\n            return nativeAudioNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeAudioNode !== undefined) {\n                    return Promise.resolve(renderedNativeAudioNode);\n                }\n                return createAudioNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/channel-merger-node-renderer-factory.js.map","import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { wrapChannelSplitterNode } from '../helpers/wrap-channel-splitter-node';\nexport const createNativeChannelSplitterNodeFactory = (createNativeAudioNode) => {\n    return (nativeContext, options) => {\n        const nativeChannelSplitterNode = createNativeAudioNode(nativeContext, (ntvCntxt) => {\n            return ntvCntxt.createChannelSplitter(options.numberOfOutputs);\n        });\n        // Bug #96: Safari does not have the correct channelCount.\n        // Bug #29: Edge & Safari do not have the correct channelCountMode.\n        // Bug #31: Edge & Safari do not have the correct channelInterpretation.\n        assignNativeAudioNodeOptions(nativeChannelSplitterNode, options);\n        // Bug #29, #30, #31, #32, #96 & #97: Only Chrome, Firefox & Opera partially support the spec yet.\n        wrapChannelSplitterNode(nativeChannelSplitterNode);\n        return nativeChannelSplitterNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-channel-splitter-node-factory.js.map","import { createInvalidStateError } from '../factories/invalid-state-error';\nexport const wrapChannelSplitterNode = (channelSplitterNode) => {\n    const channelCount = channelSplitterNode.numberOfOutputs;\n    // Bug #97: Safari does not throw an error when attempting to change the channelCount to something other than its initial value.\n    Object.defineProperty(channelSplitterNode, 'channelCount', {\n        get: () => channelCount,\n        set: (value) => {\n            if (value !== channelCount) {\n                throw createInvalidStateError();\n            }\n        }\n    });\n    /*\n     * Bug #30: Only Chrome, Firefox & Opera throw an error when attempting to change the channelCountMode to something other than\n     * explicit.\n     */\n    Object.defineProperty(channelSplitterNode, 'channelCountMode', {\n        get: () => 'explicit',\n        set: (value) => {\n            if (value !== 'explicit') {\n                throw createInvalidStateError();\n            }\n        }\n    });\n    /*\n     * Bug #32: Only Chrome, Firefox & Opera throws an error when attempting to change the channelInterpretation to something other than\n     * discrete.\n     */\n    Object.defineProperty(channelSplitterNode, 'channelInterpretation', {\n        get: () => 'discrete',\n        set: (value) => {\n            if (value !== 'discrete') {\n                throw createInvalidStateError();\n            }\n        }\n    });\n};\n//# sourceMappingURL=/build/es2018/helpers/wrap-channel-splitter-node.js.map","import { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nexport const createChannelSplitterNodeRendererFactory = (createNativeChannelSplitterNode) => {\n    return () => {\n        const renderedNativeAudioNodes = new WeakMap();\n        const createAudioNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeAudioNode = getNativeAudioNode(proxy);\n            // If the initially used nativeAudioNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeAudioNodeIsOwnedByContext = isOwnedByContext(nativeAudioNode, nativeOfflineAudioContext);\n            if (!nativeAudioNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeAudioNode.channelCount,\n                    channelCountMode: nativeAudioNode.channelCountMode,\n                    channelInterpretation: nativeAudioNode.channelInterpretation,\n                    numberOfOutputs: nativeAudioNode.numberOfOutputs\n                };\n                nativeAudioNode = createNativeChannelSplitterNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioNode);\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioNode);\n            return nativeAudioNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeAudioNode !== undefined) {\n                    return Promise.resolve(renderedNativeAudioNode);\n                }\n                return createAudioNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/channel-splitter-node-renderer-factory.js.map","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeGainNodeFactory = (createNativeAudioNode) => {\n    return (nativeContext, options) => {\n        const nativeGainNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createGain());\n        assignNativeAudioNodeOptions(nativeGainNode, options);\n        assignNativeAudioNodeAudioParamValue(nativeGainNode, options, 'gain');\n        return nativeGainNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-gain-node-factory.js.map","import { interceptConnections } from '../helpers/intercept-connections';\nexport const createNativeConstantSourceNodeFakerFactory = (createNativeAudioBufferSourceNode, createNativeGainNode) => {\n    return (nativeContext, { offset, ...audioNodeOptions }) => {\n        const audioBufferSourceNode = createNativeAudioBufferSourceNode(nativeContext);\n        /*\n         * @todo Edge will throw a NotSupportedError when calling createBuffer() on a closed context. That's why the audioBuffer is created\n         * after the audioBufferSourceNode in this case. If the context is closed createNativeAudioBufferSourceNode() will throw the\n         * expected error and createBuffer() never gets called.\n         */\n        const audioBuffer = nativeContext.createBuffer(1, 2, nativeContext.sampleRate);\n        const gainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, gain: offset });\n        // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n        const channelData = audioBuffer.getChannelData(0);\n        // Bug #95: Safari does not play or loop one sample buffers.\n        channelData[0] = 1;\n        channelData[1] = 1;\n        audioBufferSourceNode.buffer = audioBuffer;\n        audioBufferSourceNode.loop = true;\n        audioBufferSourceNode.connect(gainNode);\n        const nativeConstantSourceNodeFaker = {\n            get bufferSize() {\n                return undefined;\n            },\n            get channelCount() {\n                return gainNode.channelCount;\n            },\n            set channelCount(value) {\n                gainNode.channelCount = value;\n            },\n            get channelCountMode() {\n                return gainNode.channelCountMode;\n            },\n            set channelCountMode(value) {\n                gainNode.channelCountMode = value;\n            },\n            get channelInterpretation() {\n                return gainNode.channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                gainNode.channelInterpretation = value;\n            },\n            get context() {\n                return gainNode.context;\n            },\n            get inputs() {\n                return undefined;\n            },\n            get numberOfInputs() {\n                return audioBufferSourceNode.numberOfInputs;\n            },\n            get numberOfOutputs() {\n                return gainNode.numberOfOutputs;\n            },\n            get offset() {\n                return gainNode.gain;\n            },\n            get onended() {\n                return audioBufferSourceNode.onended;\n            },\n            set onended(value) {\n                audioBufferSourceNode.onended = value;\n            },\n            addEventListener(...args) {\n                return audioBufferSourceNode.addEventListener(args[0], args[1], args[2]);\n            },\n            dispatchEvent(...args) {\n                return audioBufferSourceNode.dispatchEvent(args[0]);\n            },\n            removeEventListener(...args) {\n                return audioBufferSourceNode.removeEventListener(args[0], args[1], args[2]);\n            },\n            start(when = 0) {\n                audioBufferSourceNode.start.call(audioBufferSourceNode, when);\n            },\n            stop(when = 0) {\n                audioBufferSourceNode.stop.call(audioBufferSourceNode, when);\n            }\n        };\n        return interceptConnections(nativeConstantSourceNodeFaker, gainNode);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-constant-source-node-faker-factory.js.map","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { wrapAudioScheduledSourceNodeStartMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters';\nimport { wrapAudioScheduledSourceNodeStopMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters';\nexport const createNativeConstantSourceNodeFactory = (cacheTestResult, createNativeAudioNode, createNativeConstantSourceNodeFaker, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport) => {\n    return (nativeContext, options) => {\n        // Bug #62: Edge & Safari do not support ConstantSourceNodes.\n        if (nativeContext.createConstantSource === undefined) {\n            return createNativeConstantSourceNodeFaker(nativeContext, options);\n        }\n        const nativeConstantSourceNode = createNativeAudioNode(nativeContext, (ntvCntxt) => {\n            return ntvCntxt.createConstantSource();\n        });\n        assignNativeAudioNodeOptions(nativeConstantSourceNode, options);\n        assignNativeAudioNodeAudioParamValue(nativeConstantSourceNode, options, 'offset');\n        // Bug #44: Only Chrome, Firefox & Opera throw a RangeError yet.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(nativeContext))) {\n            wrapAudioScheduledSourceNodeStartMethodNegativeParameters(nativeConstantSourceNode);\n        }\n        // Bug #44: Only Firefox does throw a RangeError yet.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(nativeContext))) {\n            wrapAudioScheduledSourceNodeStopMethodNegativeParameters(nativeConstantSourceNode);\n        }\n        return nativeConstantSourceNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-constant-source-node-factory.js.map","import { connectAudioParam } from '../helpers/connect-audio-param';\nimport { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { renderAutomation } from '../helpers/render-automation';\nimport { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nexport const createConstantSourceNodeRendererFactory = (createNativeConstantSourceNode) => {\n    return () => {\n        const renderedNativeConstantSourceNodes = new WeakMap();\n        let start = null;\n        let stop = null;\n        const createConstantSourceNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeConstantSourceNode = getNativeAudioNode(proxy);\n            /*\n             * If the initially used nativeConstantSourceNode was not constructed on the same OfflineAudioContext it needs to be created\n             * again.\n             */\n            const nativeConstantSourceNodeIsOwnedByContext = isOwnedByContext(nativeConstantSourceNode, nativeOfflineAudioContext);\n            if (!nativeConstantSourceNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeConstantSourceNode.channelCount,\n                    channelCountMode: nativeConstantSourceNode.channelCountMode,\n                    channelInterpretation: nativeConstantSourceNode.channelInterpretation,\n                    offset: nativeConstantSourceNode.offset.value\n                };\n                nativeConstantSourceNode = createNativeConstantSourceNode(nativeOfflineAudioContext, options);\n                if (start !== null) {\n                    nativeConstantSourceNode.start(start);\n                }\n                if (stop !== null) {\n                    nativeConstantSourceNode.stop(stop);\n                }\n            }\n            renderedNativeConstantSourceNodes.set(nativeOfflineAudioContext, nativeConstantSourceNode);\n            if (!nativeConstantSourceNodeIsOwnedByContext) {\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset);\n            }\n            else {\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.offset);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConstantSourceNode);\n            return nativeConstantSourceNode;\n        };\n        return {\n            set start(value) {\n                start = value;\n            },\n            set stop(value) {\n                stop = value;\n            },\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeConstantSourceNode = renderedNativeConstantSourceNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeConstantSourceNode !== undefined) {\n                    return Promise.resolve(renderedNativeConstantSourceNode);\n                }\n                return createConstantSourceNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/constant-source-node-renderer-factory.js.map","import { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeConvolverNodeFactory = (createNativeAudioNode, createNotSupportedError) => {\n    return (nativeContext, options) => {\n        const nativeConvolverNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createConvolver());\n        assignNativeAudioNodeOptions(nativeConvolverNode, options);\n        // The normalize property needs to be set before setting the buffer.\n        if (options.disableNormalization === nativeConvolverNode.normalize) {\n            nativeConvolverNode.normalize = !options.disableNormalization;\n        }\n        assignNativeAudioNodeOption(nativeConvolverNode, options, 'buffer');\n        // Bug #113: Edge & Safari allow to change the channelCount\n        if (options.channelCount !== 2) {\n            throw createNotSupportedError();\n        }\n        Object.defineProperty(nativeConvolverNode, 'channelCount', {\n            get: () => options.channelCount,\n            set: (value) => {\n                if (value !== options.channelCount) {\n                    throw createNotSupportedError();\n                }\n            }\n        });\n        // Bug #114: Edge & Safari allow to change the channelCountMode\n        if (options.channelCountMode !== 'clamped-max') {\n            throw createNotSupportedError();\n        }\n        Object.defineProperty(nativeConvolverNode, 'channelCountMode', {\n            get: () => options.channelCountMode,\n            set: (value) => {\n                if (value !== options.channelCountMode) {\n                    throw createNotSupportedError();\n                }\n            }\n        });\n        return nativeConvolverNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-convolver-node-factory.js.map","import { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nexport const createConvolverNodeRendererFactory = (createNativeConvolverNode) => {\n    return () => {\n        const renderedNativeConvolverNodes = new WeakMap();\n        const createConvolverNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeConvolverNode = getNativeAudioNode(proxy);\n            // If the initially used nativeConvolverNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeConvolverNodeIsOwnedByContext = isOwnedByContext(nativeConvolverNode, nativeOfflineAudioContext);\n            if (!nativeConvolverNodeIsOwnedByContext) {\n                const options = {\n                    buffer: nativeConvolverNode.buffer,\n                    channelCount: nativeConvolverNode.channelCount,\n                    channelCountMode: nativeConvolverNode.channelCountMode,\n                    channelInterpretation: nativeConvolverNode.channelInterpretation,\n                    disableNormalization: !nativeConvolverNode.normalize\n                };\n                nativeConvolverNode = createNativeConvolverNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeConvolverNodes.set(nativeOfflineAudioContext, nativeConvolverNode);\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode);\n            return nativeConvolverNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeConvolverNode = renderedNativeConvolverNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeConvolverNode !== undefined) {\n                    return Promise.resolve(renderedNativeConvolverNode);\n                }\n                return createConvolverNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/convolver-node-renderer-factory.js.map","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeDelayNodeFactory = (createNativeAudioNode) => {\n    return (nativeContext, options) => {\n        const nativeDelayNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createDelay(options.maxDelayTime));\n        assignNativeAudioNodeOptions(nativeDelayNode, options);\n        assignNativeAudioNodeAudioParamValue(nativeDelayNode, options, 'delayTime');\n        return nativeDelayNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-delay-node-factory.js.map","import { connectAudioParam } from '../helpers/connect-audio-param';\nimport { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { renderAutomation } from '../helpers/render-automation';\nimport { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nexport const createDelayNodeRendererFactory = (createNativeDelayNode) => {\n    return (maxDelayTime) => {\n        const renderedNativeDelayNodes = new WeakMap();\n        const createDelayNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeDelayNode = getNativeAudioNode(proxy);\n            // If the initially used nativeDelayNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeDelayNodeIsOwnedByContext = isOwnedByContext(nativeDelayNode, nativeOfflineAudioContext);\n            if (!nativeDelayNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeDelayNode.channelCount,\n                    channelCountMode: nativeDelayNode.channelCountMode,\n                    channelInterpretation: nativeDelayNode.channelInterpretation,\n                    delayTime: nativeDelayNode.delayTime.value,\n                    maxDelayTime\n                };\n                nativeDelayNode = createNativeDelayNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeDelayNodes.set(nativeOfflineAudioContext, nativeDelayNode);\n            if (!nativeDelayNodeIsOwnedByContext) {\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime);\n            }\n            else {\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.delayTime);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDelayNode);\n            return nativeDelayNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeDelayNode = renderedNativeDelayNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeDelayNode !== undefined) {\n                    return Promise.resolve(renderedNativeDelayNode);\n                }\n                return createDelayNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/delay-node-renderer-factory.js.map","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeDynamicsCompressorNodeFactory = (createNativeAudioNode, createNotSupportedError) => {\n    return (nativeContext, options) => {\n        const nativeDynamicsCompressorNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createDynamicsCompressor());\n        assignNativeAudioNodeOptions(nativeDynamicsCompressorNode, options);\n        // Bug #108: Only Chrome, Firefox and Opera disallow a channelCount of three and above yet.\n        if (options.channelCount > 2) {\n            throw createNotSupportedError();\n        }\n        // Bug #109: Only Chrome, Firefox and Opera disallow a channelCountMode of 'max'.\n        if (options.channelCountMode === 'max') {\n            throw createNotSupportedError();\n        }\n        assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode, options, 'attack');\n        assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode, options, 'knee');\n        assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode, options, 'ratio');\n        assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode, options, 'release');\n        assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode, options, 'threshold');\n        return nativeDynamicsCompressorNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-dynamics-compressor-node-factory.js.map","import { connectAudioParam } from '../helpers/connect-audio-param';\nimport { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { renderAutomation } from '../helpers/render-automation';\nimport { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nexport const createDynamicsCompressorNodeRendererFactory = (createNativeDynamicsCompressorNode) => {\n    return () => {\n        const renderedNativeDynamicsCompressorNodes = new WeakMap();\n        const createDynamicsCompressorNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeDynamicsCompressorNode = getNativeAudioNode(proxy);\n            /*\n             * If the initially used nativeDynamicsCompressorNode was not constructed on the same OfflineAudioContext it needs to be\n             * created again.\n             */\n            const nativeDynamicsCompressorNodeIsOwnedByContext = isOwnedByContext(nativeDynamicsCompressorNode, nativeOfflineAudioContext);\n            if (!nativeDynamicsCompressorNodeIsOwnedByContext) {\n                const options = {\n                    attack: nativeDynamicsCompressorNode.attack.value,\n                    channelCount: nativeDynamicsCompressorNode.channelCount,\n                    channelCountMode: nativeDynamicsCompressorNode.channelCountMode,\n                    channelInterpretation: nativeDynamicsCompressorNode.channelInterpretation,\n                    knee: nativeDynamicsCompressorNode.knee.value,\n                    ratio: nativeDynamicsCompressorNode.ratio.value,\n                    release: nativeDynamicsCompressorNode.release.value,\n                    threshold: nativeDynamicsCompressorNode.threshold.value\n                };\n                nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeDynamicsCompressorNodes.set(nativeOfflineAudioContext, nativeDynamicsCompressorNode);\n            if (!nativeDynamicsCompressorNodeIsOwnedByContext) {\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack);\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee);\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio);\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release);\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold);\n            }\n            else {\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.attack);\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.knee);\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.ratio);\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.release);\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.threshold);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDynamicsCompressorNode);\n            return nativeDynamicsCompressorNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeDynamicsCompressorNode = renderedNativeDynamicsCompressorNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeDynamicsCompressorNode !== undefined) {\n                    return Promise.resolve(renderedNativeDynamicsCompressorNode);\n                }\n                return createDynamicsCompressorNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/dynamics-compressor-node-renderer-factory.js.map","import { connectAudioParam } from '../helpers/connect-audio-param';\nimport { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { renderAutomation } from '../helpers/render-automation';\nimport { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nexport const createGainNodeRendererFactory = (createNativeGainNode) => {\n    return () => {\n        const renderedNativeGainNodes = new WeakMap();\n        const createGainNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeGainNode = getNativeAudioNode(proxy);\n            // If the initially used nativeGainNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeGainNodeIsOwnedByContext = isOwnedByContext(nativeGainNode, nativeOfflineAudioContext);\n            if (!nativeGainNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeGainNode.channelCount,\n                    channelCountMode: nativeGainNode.channelCountMode,\n                    channelInterpretation: nativeGainNode.channelInterpretation,\n                    gain: nativeGainNode.gain.value\n                };\n                nativeGainNode = createNativeGainNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeGainNodes.set(nativeOfflineAudioContext, nativeGainNode);\n            if (!nativeGainNodeIsOwnedByContext) {\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain);\n            }\n            else {\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.gain);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeGainNode);\n            return nativeGainNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeGainNode = renderedNativeGainNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeGainNode !== undefined) {\n                    return Promise.resolve(renderedNativeGainNode);\n                }\n                return createGainNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/gain-node-renderer-factory.js.map","export const createNativeScriptProcessorNodeFactory = (createNativeAudioNode) => {\n    return (nativeContext, bufferSize, numberOfInputChannels, numberOfOutputChannels) => {\n        return createNativeAudioNode(nativeContext, (ntvCntxt) => {\n            return ntvCntxt.createScriptProcessor(bufferSize, numberOfInputChannels, numberOfOutputChannels);\n        });\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-script-processor-node-factory.js.map","import { testPromiseSupport } from '../helpers/test-promise-support';\nexport const createRenderNativeOfflineAudioContext = (cacheTestResult, createNativeGainNode, createNativeScriptProcessorNode, testOfflineAudioContextCurrentTimeSupport) => {\n    return (nativeOfflineAudioContext) => {\n        // Bug #21: Safari does not support promises yet.\n        if (cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeOfflineAudioContext))) {\n            // Bug #158: Edge does not advance currentTime if it is not accessed while rendering the audio.\n            return Promise\n                .resolve(cacheTestResult(testOfflineAudioContextCurrentTimeSupport, testOfflineAudioContextCurrentTimeSupport))\n                .then((isOfflineAudioContextCurrentTimeSupported) => {\n                if (!isOfflineAudioContextCurrentTimeSupported) {\n                    const scriptProcessorNode = createNativeScriptProcessorNode(nativeOfflineAudioContext, 512, 0, 1);\n                    nativeOfflineAudioContext.oncomplete = () => {\n                        scriptProcessorNode.onaudioprocess = null; // tslint:disable-line:deprecation\n                        scriptProcessorNode.disconnect();\n                    };\n                    scriptProcessorNode.onaudioprocess = () => nativeOfflineAudioContext.currentTime; // tslint:disable-line:deprecation\n                    scriptProcessorNode.connect(nativeOfflineAudioContext.destination);\n                }\n                return nativeOfflineAudioContext.startRendering();\n            });\n        }\n        return new Promise((resolve) => {\n            // Bug #48: Safari does not render an OfflineAudioContext without any connected node.\n            const gainNode = createNativeGainNode(nativeOfflineAudioContext, {\n                channelCount: 1,\n                channelCountMode: 'explicit',\n                channelInterpretation: 'discrete',\n                gain: 0\n            });\n            nativeOfflineAudioContext.oncomplete = (event) => {\n                gainNode.disconnect();\n                resolve(event.renderedBuffer);\n            };\n            gainNode.connect(nativeOfflineAudioContext.destination);\n            nativeOfflineAudioContext.startRendering();\n        });\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/render-native-offline-audio-context.js.map","export const createTestOfflineAudioContextCurrentTimeSupport = (createNativeGainNode, nativeOfflineAudioContextConstructor) => {\n    return () => {\n        if (nativeOfflineAudioContextConstructor === null) {\n            return Promise.resolve(false);\n        }\n        const nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n        // Bug #48: Safari does not render an OfflineAudioContext without any connected node.\n        const gainNode = createNativeGainNode(nativeOfflineAudioContext, {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete',\n            gain: 0\n        });\n        // Bug #21: Safari does not support promises yet.\n        return new Promise((resolve) => {\n            nativeOfflineAudioContext.oncomplete = () => {\n                gainNode.disconnect();\n                resolve(nativeOfflineAudioContext.currentTime !== 0);\n            };\n            nativeOfflineAudioContext.startRendering();\n        });\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/test-offline-audio-context-current-time-support.js.map","import { filterBuffer } from '../helpers/filter-buffer';\nimport { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nconst filterFullBuffer = (renderedBuffer, nativeOfflineAudioContext, feedback, feedforward) => {\n    const feedbackLength = feedback.length;\n    const feedforwardLength = feedforward.length;\n    const minLength = Math.min(feedbackLength, feedforwardLength);\n    if (feedback[0] !== 1) {\n        for (let i = 0; i < feedbackLength; i += 1) {\n            feedforward[i] /= feedback[0];\n        }\n        for (let i = 1; i < feedforwardLength; i += 1) {\n            feedback[i] /= feedback[0];\n        }\n    }\n    const bufferLength = 32;\n    const xBuffer = new Float32Array(bufferLength);\n    const yBuffer = new Float32Array(bufferLength);\n    const filteredBuffer = nativeOfflineAudioContext.createBuffer(renderedBuffer.numberOfChannels, renderedBuffer.length, renderedBuffer.sampleRate);\n    const numberOfChannels = renderedBuffer.numberOfChannels;\n    for (let i = 0; i < numberOfChannels; i += 1) {\n        const input = renderedBuffer.getChannelData(i);\n        const output = filteredBuffer.getChannelData(i);\n        // @todo Add a test which checks support for TypedArray.prototype.fill().\n        xBuffer.fill(0);\n        yBuffer.fill(0);\n        filterBuffer(feedback, feedbackLength, feedforward, feedforwardLength, minLength, xBuffer, yBuffer, 0, bufferLength, input, output);\n    }\n    return filteredBuffer;\n};\nexport const createIIRFilterNodeRendererFactory = (createNativeAudioBufferSourceNode, createNativeAudioNode, nativeOfflineAudioContextConstructor, renderNativeOfflineAudioContext) => {\n    return (feedback, feedforward) => {\n        const renderedNativeAudioNodes = new WeakMap();\n        const createAudioNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeIIRFilterNode = getNativeAudioNode(proxy);\n            let nativeAudioBufferSourceNode = null;\n            // If the initially used nativeIIRFilterNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeIIRFilterNodeIsOwnedByContext = isOwnedByContext(nativeIIRFilterNode, nativeOfflineAudioContext);\n            // Bug #9: Safari does not support IIRFilterNodes.\n            if (nativeOfflineAudioContext.createIIRFilter === undefined) {\n                nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext);\n            }\n            else if (!nativeIIRFilterNodeIsOwnedByContext) {\n                nativeIIRFilterNode = createNativeAudioNode(nativeOfflineAudioContext, (ntvCntxt) => {\n                    return ntvCntxt.createIIRFilter(feedforward, feedback);\n                });\n            }\n            renderedNativeAudioNodes.set(nativeOfflineAudioContext, (nativeAudioBufferSourceNode === null) ? nativeIIRFilterNode : nativeAudioBufferSourceNode);\n            if (nativeAudioBufferSourceNode !== null) {\n                if (nativeOfflineAudioContextConstructor === null) {\n                    throw new Error('Missing the native OfflineAudioContext constructor.');\n                }\n                const partialOfflineAudioContext = new nativeOfflineAudioContextConstructor(\n                // Bug #47: The AudioDestinationNode in Edge and Safari gets not initialized correctly.\n                proxy.context.destination.channelCount, \n                // Bug #17: Safari does not yet expose the length.\n                proxy.context.length, nativeOfflineAudioContext.sampleRate);\n                await renderInputsOfAudioNode(proxy, partialOfflineAudioContext, partialOfflineAudioContext.destination);\n                const renderedBuffer = await renderNativeOfflineAudioContext(partialOfflineAudioContext);\n                nativeAudioBufferSourceNode.buffer = filterFullBuffer(renderedBuffer, nativeOfflineAudioContext, feedback, feedforward);\n                nativeAudioBufferSourceNode.start(0);\n                return nativeAudioBufferSourceNode;\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeIIRFilterNode);\n            return nativeIIRFilterNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeAudioNode !== undefined) {\n                    return Promise.resolve(renderedNativeAudioNode);\n                }\n                return createAudioNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/iir-filter-node-renderer-factory.js.map","import { createInvalidAccessError } from '../factories/invalid-access-error';\nexport const wrapIIRFilterNodeGetFrequencyResponseMethod = (nativeIIRFilterNode) => {\n    nativeIIRFilterNode.getFrequencyResponse = ((getFrequencyResponse) => {\n        return (frequencyHz, magResponse, phaseResponse) => {\n            if ((frequencyHz.length !== magResponse.length) || (magResponse.length !== phaseResponse.length)) {\n                throw createInvalidAccessError();\n            }\n            return getFrequencyResponse.call(nativeIIRFilterNode, frequencyHz, magResponse, phaseResponse);\n        };\n    })(nativeIIRFilterNode.getFrequencyResponse);\n};\n//# sourceMappingURL=/build/es2018/helpers/wrap-iir-filter-node-get-frequency-response-method.js.map","import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeIIRFilterNodeFactory = (createNativeAudioNode, createNativeIIRFilterNodeFaker) => {\n    return (nativeContext, baseLatency, options) => {\n        // Bug #9: Safari does not support IIRFilterNodes.\n        if (nativeContext.createIIRFilter === undefined) {\n            return createNativeIIRFilterNodeFaker(nativeContext, baseLatency, options);\n        }\n        const nativeIIRFilterNode = createNativeAudioNode(nativeContext, (ntvCntxt) => {\n            return ntvCntxt.createIIRFilter(options.feedforward, options.feedback);\n        });\n        assignNativeAudioNodeOptions(nativeIIRFilterNode, options);\n        return nativeIIRFilterNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-iir-filter-node-factory.js.map","import { EventTarget } from '../event-target';\nimport { CONTEXT_STORE } from '../globals';\nimport { wrapEventListener } from '../helpers/wrap-event-listener';\nexport const createMinimalBaseAudioContextConstructor = (audioDestinationNodeConstructor, createAudioListener) => {\n    return class MinimalBaseAudioContext extends EventTarget {\n        constructor(_nativeContext, numberOfChannels) {\n            super(_nativeContext);\n            this._nativeContext = _nativeContext;\n            CONTEXT_STORE.set(this, _nativeContext);\n            // Bug #93: Edge will set the sampleRate of an AudioContext to zero when it is closed.\n            const sampleRate = _nativeContext.sampleRate;\n            Object.defineProperty(_nativeContext, 'sampleRate', {\n                get: () => sampleRate\n            });\n            this._destination = new audioDestinationNodeConstructor(this, numberOfChannels);\n            this._listener = createAudioListener(this, _nativeContext);\n            this._onstatechange = null;\n        }\n        get currentTime() {\n            return this._nativeContext.currentTime;\n        }\n        get destination() {\n            return this._destination;\n        }\n        get listener() {\n            return this._listener;\n        }\n        get onstatechange() {\n            return this._onstatechange;\n        }\n        set onstatechange(value) {\n            const wrappedListener = wrapEventListener(this, value);\n            this._nativeContext.onstatechange = wrappedListener;\n            const nativeOnStateChange = this._nativeContext.onstatechange;\n            this._onstatechange = (nativeOnStateChange === wrappedListener) ? value : nativeOnStateChange;\n        }\n        get sampleRate() {\n            return this._nativeContext.sampleRate;\n        }\n        get state() {\n            return this._nativeContext.state;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/minimal-base-audio-context-constructor.js.map","import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nexport const createAudioListenerFactory = (createAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeScriptProcessorNode, isNativeOfflineAudioContext) => {\n    return (context, nativeContext) => {\n        const nativeListener = nativeContext.listener;\n        // Bug #117: Only Chrome & Opera support the new interface already.\n        const createFakeAudioParams = () => {\n            const channelMergerNode = createNativeChannelMergerNode(nativeContext, { channelCount: 1, channelCountMode: 'explicit', channelInterpretation: 'speakers', numberOfInputs: 9 });\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, 256, 9, 0);\n            const createFakeAudioParam = (input, value) => {\n                const constantSourceNode = createNativeConstantSourceNode(nativeContext, { channelCount: 1, channelCountMode: 'explicit', channelInterpretation: 'discrete', offset: value });\n                constantSourceNode.connect(channelMergerNode, 0, input);\n                // @todo This should be stopped when the context is closed.\n                constantSourceNode.start();\n                Object.defineProperty(constantSourceNode.offset, 'defaultValue', {\n                    get() {\n                        return value;\n                    }\n                });\n                /*\n                 * Bug #62 & #74: Edge & Safari do not support ConstantSourceNodes and do not export the correct values for maxValue and\n                 * minValue for GainNodes.\n                 */\n                return createAudioParam({ context }, isOffline, constantSourceNode.offset, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            };\n            let lastOrientation = [0, 0, -1, 0, 1, 0];\n            let lastPosition = [0, 0, 0];\n            scriptProcessorNode.onaudioprocess = ({ inputBuffer }) => {\n                const orientation = [\n                    inputBuffer.getChannelData(0)[0],\n                    inputBuffer.getChannelData(1)[0],\n                    inputBuffer.getChannelData(2)[0],\n                    inputBuffer.getChannelData(3)[0],\n                    inputBuffer.getChannelData(4)[0],\n                    inputBuffer.getChannelData(5)[0]\n                ];\n                if (orientation.some((value, index) => (value !== lastOrientation[index]))) {\n                    nativeListener.setOrientation(...orientation); // tslint:disable-line:deprecation\n                    lastOrientation = orientation;\n                }\n                const positon = [\n                    inputBuffer.getChannelData(6)[0],\n                    inputBuffer.getChannelData(7)[0],\n                    inputBuffer.getChannelData(8)[0]\n                ];\n                if (positon.some((value, index) => (value !== lastPosition[index]))) {\n                    nativeListener.setPosition(...positon); // tslint:disable-line:deprecation\n                    lastPosition = positon;\n                }\n            };\n            channelMergerNode.connect(scriptProcessorNode);\n            return {\n                forwardX: createFakeAudioParam(0, 0),\n                forwardY: createFakeAudioParam(1, 0),\n                forwardZ: createFakeAudioParam(2, -1),\n                positionX: createFakeAudioParam(6, 0),\n                positionY: createFakeAudioParam(7, 0),\n                positionZ: createFakeAudioParam(8, 0),\n                upX: createFakeAudioParam(3, 0),\n                upY: createFakeAudioParam(4, 1),\n                upZ: createFakeAudioParam(5, 0)\n            };\n        };\n        const { forwardX, forwardY, forwardZ, positionX, positionY, positionZ, upX, upY, upZ } = (nativeListener.forwardX === undefined)\n            ? createFakeAudioParams()\n            : nativeListener;\n        return {\n            get forwardX() {\n                return forwardX;\n            },\n            get forwardY() {\n                return forwardY;\n            },\n            get forwardZ() {\n                return forwardZ;\n            },\n            get positionX() {\n                return positionX;\n            },\n            get positionY() {\n                return positionY;\n            },\n            get positionZ() {\n                return positionZ;\n            },\n            get upX() {\n                return upX;\n            },\n            get upY() {\n                return upY;\n            },\n            get upZ() {\n                return upZ;\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-listener-factory.js.map","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { wrapAudioScheduledSourceNodeStartMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters';\nimport { wrapAudioScheduledSourceNodeStopMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters';\nexport const createNativeOscillatorNodeFactory = (cacheTestResult, createNativeAudioNode, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls) => {\n    return (nativeContext, options) => {\n        const nativeOscillatorNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createOscillator());\n        assignNativeAudioNodeOptions(nativeOscillatorNode, options);\n        assignNativeAudioNodeAudioParamValue(nativeOscillatorNode, options, 'detune');\n        assignNativeAudioNodeAudioParamValue(nativeOscillatorNode, options, 'frequency');\n        if (options.periodicWave !== undefined) {\n            nativeOscillatorNode.setPeriodicWave(options.periodicWave);\n        }\n        else {\n            assignNativeAudioNodeOption(nativeOscillatorNode, options, 'type');\n        }\n        // Bug #44: Only Chrome & Opera throw a RangeError yet.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(nativeContext))) {\n            wrapAudioScheduledSourceNodeStartMethodNegativeParameters(nativeOscillatorNode);\n        }\n        // Bug #19: Safari does not ignore calls to stop() of an already stopped AudioBufferSourceNode.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, () => testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport(nativeContext))) {\n            wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls(nativeOscillatorNode, nativeContext);\n        }\n        // Bug #44: No browser does throw a RangeError yet.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(nativeContext))) {\n            wrapAudioScheduledSourceNodeStopMethodNegativeParameters(nativeOscillatorNode);\n        }\n        return nativeOscillatorNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-oscillator-node-factory.js.map","import { connectAudioParam } from '../helpers/connect-audio-param';\nimport { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { renderAutomation } from '../helpers/render-automation';\nimport { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nexport const createOscillatorNodeRendererFactory = (createNativeOscillatorNode) => {\n    return () => {\n        const renderedNativeOscillatorNodes = new WeakMap();\n        let periodicWave = null;\n        let start = null;\n        let stop = null;\n        const createOscillatorNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeOscillatorNode = getNativeAudioNode(proxy);\n            // If the initially used nativeOscillatorNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeOscillatorNodeIsOwnedByContext = isOwnedByContext(nativeOscillatorNode, nativeOfflineAudioContext);\n            if (!nativeOscillatorNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeOscillatorNode.channelCount,\n                    channelCountMode: nativeOscillatorNode.channelCountMode,\n                    channelInterpretation: nativeOscillatorNode.channelInterpretation,\n                    detune: nativeOscillatorNode.detune.value,\n                    frequency: nativeOscillatorNode.frequency.value,\n                    periodicWave: (periodicWave === null) ? undefined : periodicWave,\n                    type: nativeOscillatorNode.type\n                };\n                nativeOscillatorNode = createNativeOscillatorNode(nativeOfflineAudioContext, options);\n                if (start !== null) {\n                    nativeOscillatorNode.start(start);\n                }\n                if (stop !== null) {\n                    nativeOscillatorNode.stop(stop);\n                }\n            }\n            renderedNativeOscillatorNodes.set(nativeOfflineAudioContext, nativeOscillatorNode);\n            if (!nativeOscillatorNodeIsOwnedByContext) {\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune);\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency);\n            }\n            else {\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.detune);\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.frequency);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeOscillatorNode);\n            return nativeOscillatorNode;\n        };\n        return {\n            set periodicWave(value) {\n                periodicWave = value;\n            },\n            set start(value) {\n                start = value;\n            },\n            set stop(value) {\n                stop = value;\n            },\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeOscillatorNode = renderedNativeOscillatorNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeOscillatorNode !== undefined) {\n                    return Promise.resolve(renderedNativeOscillatorNode);\n                }\n                return createOscillatorNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/oscillator-node-renderer-factory.js.map","import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { interceptConnections } from '../helpers/intercept-connections';\nexport const createNativeWaveShaperNodeFakerFactory = (createInvalidStateError, createNativeAudioNode, createNativeGainNode) => {\n    return (nativeContext, { curve, oversample, ...audioNodeOptions }) => {\n        const negativeWaveShaperNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createWaveShaper());\n        const positiveWaveShaperNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createWaveShaper());\n        assignNativeAudioNodeOptions(negativeWaveShaperNode, audioNodeOptions);\n        assignNativeAudioNodeOptions(positiveWaveShaperNode, audioNodeOptions);\n        const inputGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, gain: 1 });\n        const invertGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, gain: -1 });\n        const outputGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, gain: 1 });\n        const revertGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, gain: -1 });\n        inputGainNode.connect(negativeWaveShaperNode);\n        negativeWaveShaperNode.connect(outputGainNode);\n        inputGainNode.connect(invertGainNode);\n        invertGainNode.connect(positiveWaveShaperNode);\n        positiveWaveShaperNode.connect(revertGainNode);\n        revertGainNode.connect(outputGainNode);\n        let unmodifiedCurve = null;\n        const nativeWaveShaperNodeFaker = {\n            get bufferSize() {\n                return undefined;\n            },\n            get channelCount() {\n                return negativeWaveShaperNode.channelCount;\n            },\n            set channelCount(value) {\n                inputGainNode.channelCount = value;\n                invertGainNode.channelCount = value;\n                negativeWaveShaperNode.channelCount = value;\n                outputGainNode.channelCount = value;\n                positiveWaveShaperNode.channelCount = value;\n                revertGainNode.channelCount = value;\n            },\n            get channelCountMode() {\n                return negativeWaveShaperNode.channelCountMode;\n            },\n            set channelCountMode(value) {\n                inputGainNode.channelCountMode = value;\n                invertGainNode.channelCountMode = value;\n                negativeWaveShaperNode.channelCountMode = value;\n                outputGainNode.channelCountMode = value;\n                positiveWaveShaperNode.channelCountMode = value;\n                revertGainNode.channelCountMode = value;\n            },\n            get channelInterpretation() {\n                return negativeWaveShaperNode.channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                inputGainNode.channelInterpretation = value;\n                invertGainNode.channelInterpretation = value;\n                negativeWaveShaperNode.channelInterpretation = value;\n                outputGainNode.channelInterpretation = value;\n                positiveWaveShaperNode.channelInterpretation = value;\n                revertGainNode.channelInterpretation = value;\n            },\n            get context() {\n                return negativeWaveShaperNode.context;\n            },\n            get curve() {\n                return unmodifiedCurve;\n            },\n            set curve(value) {\n                // Bug #102: Safari does not throw an InvalidStateError when the curve has less than two samples.\n                if (curve !== null && curve.length < 2) {\n                    throw createInvalidStateError();\n                }\n                if (value === null) {\n                    negativeWaveShaperNode.curve = value;\n                    positiveWaveShaperNode.curve = value;\n                }\n                else {\n                    const curveLength = value.length;\n                    const negativeCurve = new Float32Array(curveLength + 2 - (curveLength % 2));\n                    const positiveCurve = new Float32Array(curveLength + 2 - (curveLength % 2));\n                    negativeCurve[0] = value[0];\n                    positiveCurve[0] = -value[curveLength - 1];\n                    const length = Math.ceil((curveLength + 1) / 2);\n                    const centerIndex = ((curveLength + 1) / 2) - 1;\n                    for (let i = 1; i < length; i += 1) {\n                        const theoreticIndex = (i / length) * centerIndex;\n                        const lowerIndex = Math.floor(theoreticIndex);\n                        const upperIndex = Math.ceil(theoreticIndex);\n                        negativeCurve[i] = (lowerIndex === upperIndex)\n                            ? value[lowerIndex]\n                            : ((1 - (theoreticIndex - lowerIndex)) * value[lowerIndex])\n                                + ((1 - (upperIndex - theoreticIndex)) * value[upperIndex]);\n                        positiveCurve[i] = (lowerIndex === upperIndex)\n                            ? -value[curveLength - 1 - lowerIndex]\n                            : -((1 - (theoreticIndex - lowerIndex)) * value[curveLength - 1 - lowerIndex])\n                                - ((1 - (upperIndex - theoreticIndex)) * value[curveLength - 1 - upperIndex]);\n                    }\n                    negativeCurve[length] = (curveLength % 2 === 1) ? value[length - 1] : (value[length - 2] + value[length - 1]) / 2;\n                    negativeWaveShaperNode.curve = negativeCurve;\n                    positiveWaveShaperNode.curve = positiveCurve;\n                }\n                unmodifiedCurve = value;\n            },\n            get inputs() {\n                return [inputGainNode];\n            },\n            get numberOfInputs() {\n                return negativeWaveShaperNode.numberOfInputs;\n            },\n            get numberOfOutputs() {\n                return negativeWaveShaperNode.numberOfOutputs;\n            },\n            get oversample() {\n                return negativeWaveShaperNode.oversample;\n            },\n            set oversample(value) {\n                negativeWaveShaperNode.oversample = value;\n                positiveWaveShaperNode.oversample = value;\n            },\n            addEventListener(...args) {\n                return inputGainNode.addEventListener(args[0], args[1], args[2]);\n            },\n            dispatchEvent(...args) {\n                return inputGainNode.dispatchEvent(args[0]);\n            },\n            removeEventListener(...args) {\n                return inputGainNode.removeEventListener(args[0], args[1], args[2]);\n            }\n        };\n        if (curve !== nativeWaveShaperNodeFaker.curve) {\n            nativeWaveShaperNodeFaker.curve = curve;\n        }\n        if (oversample !== nativeWaveShaperNodeFaker.oversample) {\n            nativeWaveShaperNodeFaker.oversample = oversample;\n        }\n        return interceptConnections(nativeWaveShaperNodeFaker, outputGainNode);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-wave-shaper-node-faker-factory.js.map","import { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeWaveShaperNodeFactory = (createInvalidStateError, createNativeAudioNode, createNativeWaveShaperNodeFaker) => {\n    return (nativeContext, options) => {\n        const nativeWaveShaperNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createWaveShaper());\n        try {\n            // Bug #102: Safari does not throw an InvalidStateError when the curve has less than two samples.\n            // Bug #119: Safari does not correctly map the values. Bug #102 is only used to detect Safari in this case.\n            nativeWaveShaperNode.curve = new Float32Array([1]);\n            return createNativeWaveShaperNodeFaker(nativeContext, options);\n        }\n        catch ( /* Ignore errors. */_a) { /* Ignore errors. */ }\n        assignNativeAudioNodeOptions(nativeWaveShaperNode, options);\n        const curve = options.curve;\n        // Bug #104: Chrome will throw an InvalidAccessError when the curve has less than two samples.\n        if (curve !== null && curve.length < 2) {\n            throw createInvalidStateError();\n        }\n        assignNativeAudioNodeOption(nativeWaveShaperNode, options, 'curve');\n        assignNativeAudioNodeOption(nativeWaveShaperNode, options, 'oversample');\n        return nativeWaveShaperNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-wave-shaper-node-factory.js.map","import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { connectNativeAudioNodeToNativeAudioNode } from '../helpers/connect-native-audio-node-to-native-audio-node';\nimport { interceptConnections } from '../helpers/intercept-connections';\nexport const createNativePannerNodeFakerFactory = (createInvalidStateError, createNativeAudioNode, createNativeChannelMergerNode, createNativeGainNode, createNativeScriptProcessorNode, createNativeWaveShaperNode, createNotSupportedError) => {\n    return (nativeContext, { coneInnerAngle, coneOuterAngle, coneOuterGain, distanceModel, maxDistance, orientationX, orientationY, orientationZ, panningModel, positionX, positionY, positionZ, refDistance, rolloffFactor, ...audioNodeOptions }) => {\n        const pannerNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createPanner());\n        // Bug #125: Safari does not throw an error yet.\n        if (audioNodeOptions.channelCount > 2) {\n            throw createNotSupportedError();\n        }\n        // Bug #126: Safari does not throw an error yet.\n        if (audioNodeOptions.channelCountMode === 'max') {\n            throw createNotSupportedError();\n        }\n        assignNativeAudioNodeOptions(pannerNode, audioNodeOptions);\n        const SINGLE_CHANNEL_OPTIONS = {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete'\n        };\n        const channelMergerNode = createNativeChannelMergerNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, channelInterpretation: 'speakers', numberOfInputs: 6 });\n        const inputGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, gain: 1 });\n        const orientationXGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 1 });\n        const orientationYGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        const orientationZGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        const positionXGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        const positionYGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        const positionZGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, 256, 6, 0);\n        const waveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, curve: new Float32Array([1, 1]), oversample: 'none' });\n        let lastOrientation = [1, 0, 0];\n        let lastPosition = [0, 0, 0];\n        scriptProcessorNode.onaudioprocess = ({ inputBuffer }) => {\n            const orientation = [\n                inputBuffer.getChannelData(0)[0],\n                inputBuffer.getChannelData(1)[0],\n                inputBuffer.getChannelData(2)[0]\n            ];\n            if (orientation.some((value, index) => (value !== lastOrientation[index]))) {\n                pannerNode.setOrientation(...orientation); // tslint:disable-line:deprecation\n                lastOrientation = orientation;\n            }\n            const positon = [\n                inputBuffer.getChannelData(6)[0],\n                inputBuffer.getChannelData(7)[0],\n                inputBuffer.getChannelData(8)[0]\n            ];\n            if (positon.some((value, index) => (value !== lastPosition[index]))) {\n                pannerNode.setPosition(...positon); // tslint:disable-line:deprecation\n                lastPosition = positon;\n            }\n        };\n        inputGainNode.connect(pannerNode);\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        connectNativeAudioNodeToNativeAudioNode(inputGainNode, waveShaperNode, 0, 0);\n        waveShaperNode.connect(orientationXGainNode);\n        waveShaperNode.connect(orientationYGainNode);\n        waveShaperNode.connect(orientationZGainNode);\n        waveShaperNode.connect(positionXGainNode);\n        waveShaperNode.connect(positionYGainNode);\n        waveShaperNode.connect(positionZGainNode);\n        orientationXGainNode.connect(channelMergerNode);\n        orientationYGainNode.connect(channelMergerNode);\n        orientationZGainNode.connect(channelMergerNode);\n        positionXGainNode.connect(channelMergerNode);\n        positionYGainNode.connect(channelMergerNode);\n        positionZGainNode.connect(channelMergerNode);\n        channelMergerNode.connect(scriptProcessorNode);\n        Object.defineProperty(orientationYGainNode.gain, 'defaultValue', { get: () => 0 });\n        Object.defineProperty(orientationZGainNode.gain, 'defaultValue', { get: () => 0 });\n        Object.defineProperty(positionXGainNode.gain, 'defaultValue', { get: () => 0 });\n        Object.defineProperty(positionYGainNode.gain, 'defaultValue', { get: () => 0 });\n        Object.defineProperty(positionZGainNode.gain, 'defaultValue', { get: () => 0 });\n        const nativePannerNodeFaker = {\n            get bufferSize() {\n                return undefined;\n            },\n            get channelCount() {\n                return pannerNode.channelCount;\n            },\n            set channelCount(value) {\n                // Bug #125: Safari does not throw an error yet.\n                if (value > 2) {\n                    throw createNotSupportedError();\n                }\n                inputGainNode.channelCount = value;\n                pannerNode.channelCount = value;\n            },\n            get channelCountMode() {\n                return pannerNode.channelCountMode;\n            },\n            set channelCountMode(value) {\n                // Bug #126: Safari does not throw an error yet.\n                if (value === 'max') {\n                    throw createNotSupportedError();\n                }\n                inputGainNode.channelCountMode = value;\n                pannerNode.channelCountMode = value;\n            },\n            get channelInterpretation() {\n                return pannerNode.channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                inputGainNode.channelInterpretation = value;\n                pannerNode.channelInterpretation = value;\n            },\n            get coneInnerAngle() {\n                return pannerNode.coneInnerAngle;\n            },\n            set coneInnerAngle(value) {\n                pannerNode.coneInnerAngle = value;\n            },\n            get coneOuterAngle() {\n                return pannerNode.coneOuterAngle;\n            },\n            set coneOuterAngle(value) {\n                pannerNode.coneOuterAngle = value;\n            },\n            get coneOuterGain() {\n                return pannerNode.coneOuterGain;\n            },\n            set coneOuterGain(value) {\n                // Bug #127: Edge & Safari do not throw an InvalidStateError yet.\n                if (value < 0 || value > 1) {\n                    throw createInvalidStateError();\n                }\n                pannerNode.coneOuterGain = value;\n            },\n            get context() {\n                return pannerNode.context;\n            },\n            get distanceModel() {\n                return pannerNode.distanceModel;\n            },\n            set distanceModel(value) {\n                pannerNode.distanceModel = value;\n            },\n            get inputs() {\n                return [inputGainNode];\n            },\n            get maxDistance() {\n                return pannerNode.maxDistance;\n            },\n            set maxDistance(value) {\n                // Bug #128: Edge & Safari do not throw an error yet.\n                if (value < 0) {\n                    throw new RangeError();\n                }\n                pannerNode.maxDistance = value;\n            },\n            get numberOfInputs() {\n                return pannerNode.numberOfInputs;\n            },\n            get numberOfOutputs() {\n                return pannerNode.numberOfOutputs;\n            },\n            get orientationX() {\n                return orientationXGainNode.gain;\n            },\n            get orientationY() {\n                return orientationYGainNode.gain;\n            },\n            get orientationZ() {\n                return orientationZGainNode.gain;\n            },\n            get panningModel() {\n                return pannerNode.panningModel;\n            },\n            set panningModel(value) {\n                pannerNode.panningModel = value;\n                // Bug #123: Edge does not support HRTF as panningModel.\n                if (pannerNode.panningModel !== value && value === 'HRTF') {\n                    throw createNotSupportedError();\n                }\n            },\n            get positionX() {\n                return positionXGainNode.gain;\n            },\n            get positionY() {\n                return positionYGainNode.gain;\n            },\n            get positionZ() {\n                return positionZGainNode.gain;\n            },\n            get refDistance() {\n                return pannerNode.refDistance;\n            },\n            set refDistance(value) {\n                // Bug #129: Edge & Safari do not throw an error yet.\n                if (value < 0) {\n                    throw new RangeError();\n                }\n                pannerNode.refDistance = value;\n            },\n            get rolloffFactor() {\n                return pannerNode.rolloffFactor;\n            },\n            set rolloffFactor(value) {\n                // Bug #130: Edge & Safari do not throw an error yet.\n                if (value < 0) {\n                    throw new RangeError();\n                }\n                pannerNode.rolloffFactor = value;\n            },\n            addEventListener(...args) {\n                return inputGainNode.addEventListener(args[0], args[1], args[2]);\n            },\n            dispatchEvent(...args) {\n                return inputGainNode.dispatchEvent(args[0]);\n            },\n            removeEventListener(...args) {\n                return inputGainNode.removeEventListener(args[0], args[1], args[2]);\n            }\n        };\n        if (coneInnerAngle !== nativePannerNodeFaker.coneInnerAngle) {\n            nativePannerNodeFaker.coneInnerAngle = coneInnerAngle;\n        }\n        if (coneOuterAngle !== nativePannerNodeFaker.coneOuterAngle) {\n            nativePannerNodeFaker.coneOuterAngle = coneOuterAngle;\n        }\n        if (coneOuterGain !== nativePannerNodeFaker.coneOuterGain) {\n            nativePannerNodeFaker.coneOuterGain = coneOuterGain;\n        }\n        if (distanceModel !== nativePannerNodeFaker.distanceModel) {\n            nativePannerNodeFaker.distanceModel = distanceModel;\n        }\n        if (maxDistance !== nativePannerNodeFaker.maxDistance) {\n            nativePannerNodeFaker.maxDistance = maxDistance;\n        }\n        if (orientationX !== nativePannerNodeFaker.orientationX.value) {\n            nativePannerNodeFaker.orientationX.value = orientationX;\n        }\n        if (orientationY !== nativePannerNodeFaker.orientationY.value) {\n            nativePannerNodeFaker.orientationY.value = orientationY;\n        }\n        if (orientationZ !== nativePannerNodeFaker.orientationZ.value) {\n            nativePannerNodeFaker.orientationZ.value = orientationZ;\n        }\n        if (panningModel !== nativePannerNodeFaker.panningModel) {\n            nativePannerNodeFaker.panningModel = panningModel;\n        }\n        if (positionX !== nativePannerNodeFaker.positionX.value) {\n            nativePannerNodeFaker.positionX.value = positionX;\n        }\n        if (positionY !== nativePannerNodeFaker.positionY.value) {\n            nativePannerNodeFaker.positionY.value = positionY;\n        }\n        if (positionZ !== nativePannerNodeFaker.positionZ.value) {\n            nativePannerNodeFaker.positionZ.value = positionZ;\n        }\n        if (refDistance !== nativePannerNodeFaker.refDistance) {\n            nativePannerNodeFaker.refDistance = refDistance;\n        }\n        if (rolloffFactor !== nativePannerNodeFaker.rolloffFactor) {\n            nativePannerNodeFaker.rolloffFactor = rolloffFactor;\n        }\n        return interceptConnections(nativePannerNodeFaker, pannerNode);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-panner-node-faker-factory.js.map","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativePannerNodeFactory = (createNativeAudioNode, createNativePannerNodeFaker) => {\n    return (nativeContext, options) => {\n        const nativePannerNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createPanner());\n        // Bug #124: Edge & Safari do not support modifying the orientation and the position with AudioParams.\n        if (nativePannerNode.orientationX === undefined) {\n            return createNativePannerNodeFaker(nativeContext, options);\n        }\n        assignNativeAudioNodeOptions(nativePannerNode, options);\n        assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'orientationX');\n        assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'orientationY');\n        assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'orientationZ');\n        assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'positionX');\n        assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'positionY');\n        assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'positionZ');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'coneInnerAngle');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'coneOuterAngle');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'coneOuterGain');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'distanceModel');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'maxDistance');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'panningModel');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'refDistance');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'rolloffFactor');\n        return nativePannerNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-panner-node-factory.js.map","import { connectAudioParam } from '../helpers/connect-audio-param';\nimport { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { renderAutomation } from '../helpers/render-automation';\nimport { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nexport const createPannerNodeRendererFactory = (createNativePannerNode) => {\n    return () => {\n        const renderedNativePannerNodes = new WeakMap();\n        const createPannerNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativePannerNode = getNativeAudioNode(proxy);\n            // If the initially used nativePannerNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativePannerNodeIsOwnedByContext = isOwnedByContext(nativePannerNode, nativeOfflineAudioContext);\n            if (!nativePannerNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativePannerNode.channelCount,\n                    channelCountMode: nativePannerNode.channelCountMode,\n                    channelInterpretation: nativePannerNode.channelInterpretation,\n                    coneInnerAngle: nativePannerNode.coneInnerAngle,\n                    coneOuterAngle: nativePannerNode.coneOuterAngle,\n                    coneOuterGain: nativePannerNode.coneOuterGain,\n                    distanceModel: nativePannerNode.distanceModel,\n                    maxDistance: nativePannerNode.maxDistance,\n                    orientationX: nativePannerNode.orientationX.value,\n                    orientationY: nativePannerNode.orientationY.value,\n                    orientationZ: nativePannerNode.orientationZ.value,\n                    panningModel: nativePannerNode.panningModel,\n                    positionX: nativePannerNode.positionX.value,\n                    positionY: nativePannerNode.positionY.value,\n                    positionZ: nativePannerNode.positionZ.value,\n                    refDistance: nativePannerNode.refDistance,\n                    rolloffFactor: nativePannerNode.rolloffFactor\n                };\n                nativePannerNode = createNativePannerNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativePannerNodes.set(nativeOfflineAudioContext, nativePannerNode);\n            if (!nativePannerNodeIsOwnedByContext) {\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.orientationX, nativePannerNode.orientationX);\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.orientationY, nativePannerNode.orientationY);\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.orientationZ, nativePannerNode.orientationZ);\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.positionX, nativePannerNode.positionX);\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.positionY, nativePannerNode.positionY);\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.positionZ, nativePannerNode.positionZ);\n            }\n            else {\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.orientationX);\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.orientationY);\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.orientationZ);\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.positionX);\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.positionY);\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.positionZ);\n            }\n            if (nativePannerNode.inputs !== undefined) {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativePannerNode.inputs[0]);\n            }\n            else {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativePannerNode);\n            }\n            return nativePannerNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativePannerNode = renderedNativePannerNodes.get(nativeOfflineAudioContext);\n                if (renderedNativePannerNode !== undefined) {\n                    return Promise.resolve(renderedNativePannerNode);\n                }\n                return createPannerNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/panner-node-renderer-factory.js.map","export const createNativePeriodicWaveFactory = (getBackupNativeContext) => {\n    return (nativeContext, { disableNormalization, imag, real }) => {\n        // Bug #50: Only Edge does currently not allow to create AudioNodes (and other objects) on a closed context yet.\n        const backupNativeContext = getBackupNativeContext(nativeContext);\n        // @todo Edge, Firefox & Safari do only accept Float32Arrays.\n        const wrappedImag = new Float32Array(imag);\n        const wrappedReal = new Float32Array(real);\n        if (backupNativeContext !== null) {\n            return backupNativeContext.createPeriodicWave(wrappedReal, wrappedImag, { disableNormalization });\n        }\n        return nativeContext.createPeriodicWave(wrappedReal, wrappedImag, { disableNormalization });\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-periodic-wave-factory.js.map","import { interceptConnections } from '../helpers/intercept-connections';\nexport const createNativeStereoPannerNodeFakerFactory = (createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeGainNode, createNativeWaveShaperNode, createNotSupportedError) => {\n    // The curve has a size of 14bit plus 1 value to have an exact representation for zero. This value has been determined experimentally.\n    const CURVE_SIZE = 16385;\n    const DC_CURVE = new Float32Array([1, 1]);\n    const HALF_PI = Math.PI / 2;\n    const SINGLE_CHANNEL_OPTIONS = { channelCount: 1, channelCountMode: 'explicit', channelInterpretation: 'discrete' };\n    const SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS = { ...SINGLE_CHANNEL_OPTIONS, oversample: 'none' };\n    const buildInternalGraphForMono = (nativeContext, inputGainNode, panGainNode, channelMergerNode) => {\n        const leftWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        const rightWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        for (let i = 0; i < CURVE_SIZE; i += 1) {\n            const x = (i / (CURVE_SIZE - 1)) * HALF_PI;\n            leftWaveShaperCurve[i] = Math.cos(x);\n            rightWaveShaperCurve[i] = Math.sin(x);\n        }\n        const leftGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const leftWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: leftWaveShaperCurve });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const panWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: DC_CURVE });\n        const rightGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const rightWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: rightWaveShaperCurve });\n        inputGainNode.connect(leftGainNode);\n        inputGainNode.connect(panWaveShaperNode.inputs[0]);\n        inputGainNode.connect(rightGainNode);\n        panWaveShaperNode.connect(panGainNode);\n        panGainNode.connect(leftWaveShaperNode.inputs[0]);\n        panGainNode.connect(rightWaveShaperNode.inputs[0]);\n        leftWaveShaperNode.connect(leftGainNode.gain);\n        rightWaveShaperNode.connect(rightGainNode.gain);\n        leftGainNode.connect(channelMergerNode, 0, 0);\n        rightGainNode.connect(channelMergerNode, 0, 1);\n        return [leftGainNode, rightGainNode];\n    };\n    const buildInternalGraphForStereo = (nativeContext, inputGainNode, panGainNode, channelMergerNode) => {\n        const leftInputForLeftOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        const leftInputForRightOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        const rightInputForLeftOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        const rightInputForRightOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        const centerIndex = Math.floor(CURVE_SIZE / 2);\n        for (let i = 0; i < CURVE_SIZE; i += 1) {\n            if (i > centerIndex) {\n                const x = ((i - centerIndex) / (CURVE_SIZE - 1 - centerIndex)) * HALF_PI;\n                leftInputForLeftOutputWaveShaperCurve[i] = Math.cos(x);\n                leftInputForRightOutputWaveShaperCurve[i] = Math.sin(x);\n                rightInputForLeftOutputWaveShaperCurve[i] = 0;\n                rightInputForRightOutputWaveShaperCurve[i] = 1;\n            }\n            else {\n                const x = (i / (CURVE_SIZE - 1 - centerIndex)) * HALF_PI;\n                leftInputForLeftOutputWaveShaperCurve[i] = 1;\n                leftInputForRightOutputWaveShaperCurve[i] = 0;\n                rightInputForLeftOutputWaveShaperCurve[i] = Math.cos(x);\n                rightInputForRightOutputWaveShaperCurve[i] = Math.sin(x);\n            }\n        }\n        const channelSplitterNode = createNativeChannelSplitterNode(nativeContext, {\n            channelCount: 2,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete',\n            numberOfOutputs: 2\n        });\n        const leftInputForLeftOutputGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const leftInputForLeftOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: leftInputForLeftOutputWaveShaperCurve });\n        const leftInputForRightOutputGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const leftInputForRightOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: leftInputForRightOutputWaveShaperCurve });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const panWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: DC_CURVE });\n        const rightInputForLeftOutputGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const rightInputForLeftOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: rightInputForLeftOutputWaveShaperCurve });\n        const rightInputForRightOutputGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const rightInputForRightOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: rightInputForRightOutputWaveShaperCurve });\n        inputGainNode.connect(channelSplitterNode);\n        inputGainNode.connect(panWaveShaperNode.inputs[0]);\n        channelSplitterNode.connect(leftInputForLeftOutputGainNode, 1);\n        channelSplitterNode.connect(leftInputForRightOutputGainNode, 1);\n        channelSplitterNode.connect(rightInputForLeftOutputGainNode, 1);\n        channelSplitterNode.connect(rightInputForRightOutputGainNode, 1);\n        panWaveShaperNode.connect(panGainNode);\n        panGainNode.connect(leftInputForLeftOutputWaveShaperNode.inputs[0]);\n        panGainNode.connect(leftInputForRightOutputWaveShaperNode.inputs[0]);\n        panGainNode.connect(rightInputForLeftOutputWaveShaperNode.inputs[0]);\n        panGainNode.connect(rightInputForRightOutputWaveShaperNode.inputs[0]);\n        leftInputForLeftOutputWaveShaperNode.connect(leftInputForLeftOutputGainNode.gain);\n        leftInputForRightOutputWaveShaperNode.connect(leftInputForRightOutputGainNode.gain);\n        rightInputForLeftOutputWaveShaperNode.connect(rightInputForLeftOutputGainNode.gain);\n        rightInputForRightOutputWaveShaperNode.connect(rightInputForRightOutputGainNode.gain);\n        leftInputForLeftOutputGainNode.connect(channelMergerNode, 0, 0);\n        rightInputForLeftOutputGainNode.connect(channelMergerNode, 0, 0);\n        leftInputForRightOutputGainNode.connect(channelMergerNode, 0, 1);\n        rightInputForRightOutputGainNode.connect(channelMergerNode, 0, 1);\n        return [\n            leftInputForLeftOutputGainNode,\n            rightInputForLeftOutputGainNode,\n            leftInputForRightOutputGainNode,\n            rightInputForRightOutputGainNode\n        ];\n    };\n    const buildInternalGraph = (nativeContext, channelCount, inputGainNode, panGainNode, channelMergerNode) => {\n        if (channelCount === 1) {\n            return buildInternalGraphForMono(nativeContext, inputGainNode, panGainNode, channelMergerNode);\n        }\n        if (channelCount === 2) {\n            return buildInternalGraphForStereo(nativeContext, inputGainNode, panGainNode, channelMergerNode);\n        }\n        throw createNotSupportedError();\n    };\n    return (nativeContext, { channelCount, channelCountMode, pan, ...audioNodeOptions }) => {\n        if (channelCountMode === 'max') {\n            throw createNotSupportedError();\n        }\n        const channelMergerNode = createNativeChannelMergerNode(nativeContext, {\n            ...audioNodeOptions,\n            channelCount: 1,\n            channelCountMode,\n            numberOfInputs: 2\n        });\n        const inputGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, channelCount, channelCountMode, gain: 1 });\n        const panGainNode = createNativeGainNode(nativeContext, {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete',\n            gain: pan\n        });\n        let outputNodes = buildInternalGraph(nativeContext, channelCount, inputGainNode, panGainNode, channelMergerNode);\n        Object.defineProperty(panGainNode.gain, 'defaultValue', { get: () => 0 });\n        const nativeStereoPannerNodeFakerFactory = {\n            get bufferSize() {\n                return undefined;\n            },\n            get channelCount() {\n                return inputGainNode.channelCount;\n            },\n            set channelCount(value) {\n                if (inputGainNode.channelCount !== value) {\n                    inputGainNode.disconnect();\n                    outputNodes.forEach((outputNode) => outputNode.disconnect());\n                    outputNodes = buildInternalGraph(nativeContext, value, inputGainNode, panGainNode, channelMergerNode);\n                }\n                inputGainNode.channelCount = value;\n            },\n            get channelCountMode() {\n                return inputGainNode.channelCountMode;\n            },\n            set channelCountMode(value) {\n                if (value === 'clamped-max' || value === 'max') {\n                    throw createNotSupportedError();\n                }\n                inputGainNode.channelCountMode = value;\n            },\n            get channelInterpretation() {\n                return inputGainNode.channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                inputGainNode.channelInterpretation = value;\n            },\n            get context() {\n                return inputGainNode.context;\n            },\n            get inputs() {\n                return [inputGainNode];\n            },\n            get numberOfInputs() {\n                return inputGainNode.numberOfInputs;\n            },\n            get numberOfOutputs() {\n                return inputGainNode.numberOfOutputs;\n            },\n            get pan() {\n                return panGainNode.gain;\n            },\n            addEventListener(...args) {\n                return inputGainNode.addEventListener(args[0], args[1], args[2]);\n            },\n            dispatchEvent(...args) {\n                return inputGainNode.dispatchEvent(args[0]);\n            },\n            removeEventListener(...args) {\n                return inputGainNode.removeEventListener(args[0], args[1], args[2]);\n            }\n        };\n        return interceptConnections(nativeStereoPannerNodeFakerFactory, channelMergerNode);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-stereo-panner-node-faker-factory.js.map","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeStereoPannerNodeFactory = (createNativeAudioNode, createNativeStereoPannerNodeFaker, createNotSupportedError) => {\n    return (nativeContext, options) => createNativeAudioNode(nativeContext, (ntvCntxt) => {\n        const channelCountMode = options.channelCountMode;\n        /*\n         * Bug #105: The channelCountMode of 'clamped-max' should be supported. However it is not possible to write a polyfill for Safari\n         * which supports it and therefore it can't be supported at all.\n         */\n        if (channelCountMode === 'clamped-max') {\n            throw createNotSupportedError();\n        }\n        // Bug #105: Safari does not support the StereoPannerNode.\n        if (nativeContext.createStereoPanner === undefined) {\n            return createNativeStereoPannerNodeFaker(nativeContext, options);\n        }\n        const nativeStereoPannerNode = ntvCntxt.createStereoPanner();\n        assignNativeAudioNodeOptions(nativeStereoPannerNode, options);\n        assignNativeAudioNodeAudioParamValue(nativeStereoPannerNode, options, 'pan');\n        /*\n         * Bug #105: The channelCountMode of 'clamped-max' should be supported. However it is not possible to write a polyfill for Safari\n         * which supports it and therefore it can't be supported at all.\n         */\n        Object.defineProperty(nativeStereoPannerNode, 'channelCountMode', {\n            get: () => channelCountMode,\n            set: (value) => {\n                if (value !== channelCountMode) {\n                    throw createNotSupportedError();\n                }\n            }\n        });\n        return nativeStereoPannerNode;\n    });\n};\n//# sourceMappingURL=/build/es2018/factories/native-stereo-panner-node-factory.js.map","import { connectAudioParam } from '../helpers/connect-audio-param';\nimport { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { renderAutomation } from '../helpers/render-automation';\nimport { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nexport const createStereoPannerNodeRendererFactory = (createNativeStereoPannerNode) => {\n    return () => {\n        const renderedNativeStereoPannerNodes = new WeakMap();\n        const createStereoPannerNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeStereoPannerNode = getNativeAudioNode(proxy);\n            /*\n             * If the initially used nativeStereoPannerNode was not constructed on the same OfflineAudioContext it needs to be created\n             * again.\n             */\n            const nativeStereoPannerNodeIsOwnedByContext = isOwnedByContext(nativeStereoPannerNode, nativeOfflineAudioContext);\n            if (!nativeStereoPannerNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeStereoPannerNode.channelCount,\n                    channelCountMode: nativeStereoPannerNode.channelCountMode,\n                    channelInterpretation: nativeStereoPannerNode.channelInterpretation,\n                    pan: nativeStereoPannerNode.pan.value\n                };\n                nativeStereoPannerNode = createNativeStereoPannerNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeStereoPannerNodes.set(nativeOfflineAudioContext, nativeStereoPannerNode);\n            if (!nativeStereoPannerNodeIsOwnedByContext) {\n                await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan);\n            }\n            else {\n                await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.pan);\n            }\n            if (nativeStereoPannerNode.inputs !== undefined) {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode.inputs[0]);\n            }\n            else {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode);\n            }\n            return nativeStereoPannerNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeStereoPannerNode = renderedNativeStereoPannerNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeStereoPannerNode !== undefined) {\n                    return Promise.resolve(renderedNativeStereoPannerNode);\n                }\n                return createStereoPannerNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/stereo-panner-node-renderer-factory.js.map","import { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';\nexport const createWaveShaperNodeRendererFactory = (createNativeWaveShaperNode) => {\n    return () => {\n        const renderedNativeWaveShaperNodes = new WeakMap();\n        const createWaveShaperNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeWaveShaperNode = getNativeAudioNode(proxy);\n            // If the initially used nativeWaveShaperNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeWaveShaperNodeIsOwnedByContext = isOwnedByContext(nativeWaveShaperNode, nativeOfflineAudioContext);\n            if (!nativeWaveShaperNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeWaveShaperNode.channelCount,\n                    channelCountMode: nativeWaveShaperNode.channelCountMode,\n                    channelInterpretation: nativeWaveShaperNode.channelInterpretation,\n                    curve: nativeWaveShaperNode.curve,\n                    oversample: nativeWaveShaperNode.oversample\n                };\n                nativeWaveShaperNode = createNativeWaveShaperNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeWaveShaperNodes.set(nativeOfflineAudioContext, nativeWaveShaperNode);\n            if (nativeWaveShaperNode.inputs !== undefined) {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeWaveShaperNode.inputs[0]);\n            }\n            else {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeWaveShaperNode);\n            }\n            return nativeWaveShaperNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeWaveShaperNode = renderedNativeWaveShaperNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeWaveShaperNode !== undefined) {\n                    return Promise.resolve(renderedNativeWaveShaperNode);\n                }\n                return createWaveShaperNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/wave-shaper-node-renderer-factory.js.map","export const createIsSecureContext = (window) => (window !== null && window.isSecureContext);\n//# sourceMappingURL=/build/es2018/factories/is-secure-context.js.map","export const createExposeCurrentFrameAndCurrentTime = (window) => {\n    return (nativeContext, fn) => {\n        Object.defineProperties(window, {\n            currentFrame: {\n                configurable: true,\n                get() {\n                    return Math.round(nativeContext.currentTime * nativeContext.sampleRate);\n                }\n            },\n            currentTime: {\n                configurable: true,\n                get() {\n                    return nativeContext.currentTime;\n                }\n            }\n        });\n        try {\n            return fn();\n        }\n        finally {\n            if (window !== null) {\n                delete window.currentFrame;\n                delete window.currentTime;\n            }\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/expose-current-frame-and-current-time.js.map","export const evaluateSource = (source) => {\n    return new Promise((resolve, reject) => {\n        const head = document.head;\n        if (head === null) {\n            reject(new SyntaxError());\n        }\n        else {\n            const script = document.createElement('script');\n            // @todo Safari doesn't like URLs with a type of 'application/javascript; charset=utf-8'.\n            const blob = new Blob([source], { type: 'application/javascript' });\n            const url = URL.createObjectURL(blob);\n            const originalOnErrorHandler = window.onerror;\n            const removeErrorEventListenerAndRevokeUrl = () => {\n                window.onerror = originalOnErrorHandler;\n                URL.revokeObjectURL(url);\n            };\n            window.onerror = (message, src, lineno, colno, error) => {\n                // @todo Edge thinks the source is the one of the html document.\n                if (src === url || (src === location.href && lineno === 1 && colno === 1)) {\n                    removeErrorEventListenerAndRevokeUrl();\n                    reject(error);\n                    return false;\n                }\n                if (originalOnErrorHandler !== null) {\n                    return originalOnErrorHandler(message, src, lineno, colno, error);\n                }\n            };\n            script.onerror = () => {\n                removeErrorEventListenerAndRevokeUrl();\n                reject(new SyntaxError());\n            };\n            script.onload = () => {\n                removeErrorEventListenerAndRevokeUrl();\n                resolve();\n            };\n            script.src = url;\n            script.type = 'module';\n            head.appendChild(script);\n        }\n    });\n};\n//# sourceMappingURL=/build/es2018/helpers/evaluate-source.js.map","export const createFetchSource = (createAbortError) => {\n    return async (url) => {\n        try {\n            const response = await fetch(url);\n            if (response.ok) {\n                return response.text();\n            }\n        }\n        catch ( /* Ignore errors. */_a) { /* Ignore errors. */ } // tslint:disable-line:no-empty\n        throw createAbortError();\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/fetch-source.js.map","export const createIsNativeAudioContext = (nativeAudioContextConstructor) => {\n    return (anything) => {\n        return (nativeAudioContextConstructor !== null && anything instanceof nativeAudioContextConstructor);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/is-native-audio-context.js.map","export const createIsNativeContext = (isNativeAudioContext, isNativeOfflineAudioContext) => {\n    return (anything) => {\n        return (isNativeAudioContext(anything) || isNativeOfflineAudioContext(anything));\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/is-native-context.js.map","export const createBaseAudioContextConstructor = (addAudioWorkletModule, analyserNodeConstructor, audioBufferConstructor, audioBufferSourceNodeConstructor, biquadFilterNodeConstructor, channelMergerNodeConstructor, channelSplitterNodeConstructor, constantSourceNodeConstructor, convolverNodeConstructor, decodeAudioData, delayNodeConstructor, dynamicsCompressorNodeConstructor, gainNodeConstructor, iIRFilterNodeConstructor, minimalBaseAudioContextConstructor, oscillatorNodeConstructor, pannerNodeConstructor, periodicWaveConstructor, stereoPannerNodeConstructor, waveShaperNodeConstructor) => {\n    return class BaseAudioContext extends minimalBaseAudioContextConstructor {\n        constructor(_nativeContext, numberOfChannels) {\n            super(_nativeContext, numberOfChannels);\n            this._nativeContext = _nativeContext;\n            this._audioWorklet = (addAudioWorkletModule === undefined) ?\n                undefined :\n                { addModule: (moduleURL, options) => addAudioWorkletModule(this, moduleURL, options) };\n        }\n        get audioWorklet() {\n            return this._audioWorklet;\n        }\n        createAnalyser() {\n            return new analyserNodeConstructor(this);\n        }\n        createBiquadFilter() {\n            return new biquadFilterNodeConstructor(this);\n        }\n        createBuffer(numberOfChannels, length, sampleRate) {\n            return new audioBufferConstructor({ length, numberOfChannels, sampleRate });\n        }\n        createBufferSource() {\n            return new audioBufferSourceNodeConstructor(this);\n        }\n        createChannelMerger(numberOfInputs = 6) {\n            return new channelMergerNodeConstructor(this, { numberOfInputs });\n        }\n        createChannelSplitter(numberOfOutputs = 6) {\n            return new channelSplitterNodeConstructor(this, { numberOfOutputs });\n        }\n        createConstantSource() {\n            return new constantSourceNodeConstructor(this);\n        }\n        createConvolver() {\n            return new convolverNodeConstructor(this);\n        }\n        createDelay(maxDelayTime = 1) {\n            return new delayNodeConstructor(this, { maxDelayTime });\n        }\n        createDynamicsCompressor() {\n            return new dynamicsCompressorNodeConstructor(this);\n        }\n        createGain() {\n            return new gainNodeConstructor(this);\n        }\n        createIIRFilter(feedforward, feedback) {\n            return new iIRFilterNodeConstructor(this, { feedback, feedforward });\n        }\n        createOscillator() {\n            return new oscillatorNodeConstructor(this);\n        }\n        createPanner() {\n            return new pannerNodeConstructor(this);\n        }\n        createPeriodicWave(real, imag, constraints = { disableNormalization: false }) {\n            return new periodicWaveConstructor(this, { ...constraints, imag, real });\n        }\n        createStereoPanner() {\n            return new stereoPannerNodeConstructor(this);\n        }\n        createWaveShaper() {\n            return new waveShaperNodeConstructor(this);\n        }\n        decodeAudioData(audioData, successCallback, errorCallback) {\n            return decodeAudioData(this._nativeContext, audioData)\n                .then((audioBuffer) => {\n                if (typeof successCallback === 'function') {\n                    successCallback(audioBuffer);\n                }\n                return audioBuffer;\n            })\n                .catch((err) => {\n                if (typeof errorCallback === 'function') {\n                    errorCallback(err);\n                }\n                throw err; // tslint:disable-line:rxjs-throw-error\n            });\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/base-audio-context-constructor.js.map","import { DETACHED_ARRAY_BUFFERS } from '../globals';\nimport { detachArrayBuffer } from '../helpers/detach-array-buffer';\nimport { getNativeContext } from '../helpers/get-native-context';\nimport { wrapAudioBufferGetChannelDataMethod } from '../helpers/wrap-audio-buffer-get-channel-data-method';\nexport const createDecodeAudioData = (audioBufferStore, cacheTestResult, createDataCloneError, createEncodingError, nativeOfflineAudioContextConstructor, isNativeContext, isNativeOfflineAudioContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, testAudioBufferCopyChannelMethodsSubarraySupport, testPromiseSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds, wrapAudioBufferCopyChannelMethodsSubarray) => {\n    return (anyContext, audioData) => {\n        const nativeContext = isNativeContext(anyContext) ? anyContext : getNativeContext(anyContext);\n        // Bug #43: Only Chrome and Opera do throw a DataCloneError.\n        if (DETACHED_ARRAY_BUFFERS.has(audioData)) {\n            const err = createDataCloneError();\n            return Promise.reject(err);\n        }\n        // The audioData parameter maybe of a type which can't be added to a WeakSet.\n        try {\n            DETACHED_ARRAY_BUFFERS.add(audioData);\n        }\n        catch (_a) {\n            // Ignore errors.\n        }\n        // Bug #21: Safari does not support promises yet.\n        if (cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeContext))) {\n            // Bug #101: Edge does not decode something on a closed OfflineAudioContext.\n            const nativeContextOrBackupNativeContext = (nativeContext.state === 'closed' &&\n                nativeOfflineAudioContextConstructor !== null &&\n                isNativeOfflineAudioContext(nativeContext)) ?\n                new nativeOfflineAudioContextConstructor(1, 1, nativeContext.sampleRate) :\n                nativeContext;\n            const promise = nativeContextOrBackupNativeContext\n                .decodeAudioData(audioData)\n                .catch((err) => {\n                // Bug #27: Edge is rejecting invalid arrayBuffers with a DOMException.\n                if (err instanceof DOMException && err.name === 'NotSupportedError') {\n                    throw new TypeError();\n                }\n                throw err;\n            });\n            return promise\n                .then((audioBuffer) => {\n                // Bug #42: Firefox does not yet fully support copyFromChannel() and copyToChannel().\n                if (!cacheTestResult(testAudioBufferCopyChannelMethodsSubarraySupport, () => testAudioBufferCopyChannelMethodsSubarraySupport(audioBuffer))) {\n                    wrapAudioBufferCopyChannelMethodsSubarray(audioBuffer);\n                    wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n                    // Bug #157: No browser does allow the bufferOffset to be out-of-bounds.\n                }\n                else if (!cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, () => testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer))) {\n                    wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n                }\n                audioBufferStore.add(audioBuffer);\n                return audioBuffer;\n            });\n        }\n        // Bug #21: Safari does not return a Promise yet.\n        return new Promise((resolve, reject) => {\n            const complete = () => {\n                // Bug #133: Safari does neuter the ArrayBuffer.\n                try {\n                    detachArrayBuffer(audioData);\n                }\n                catch ( /* Ignore errors. */_a) { /* Ignore errors. */ }\n            };\n            const fail = (err) => {\n                reject(err);\n                complete();\n            };\n            // Bug #26: Safari throws a synchronous error.\n            try {\n                // Bug #1: Safari requires a successCallback.\n                nativeContext.decodeAudioData(audioData, (audioBuffer) => {\n                    // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n                    // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.\n                    if (typeof audioBuffer.copyFromChannel !== 'function') {\n                        wrapAudioBufferCopyChannelMethods(audioBuffer);\n                        wrapAudioBufferGetChannelDataMethod(audioBuffer);\n                    }\n                    audioBufferStore.add(audioBuffer);\n                    complete();\n                    resolve(audioBuffer);\n                }, (err) => {\n                    // Bug #4: Safari returns null instead of an error.\n                    if (err === null) {\n                        fail(createEncodingError());\n                    }\n                    else {\n                        fail(err);\n                    }\n                });\n            }\n            catch (err) {\n                fail(err);\n            }\n        });\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/decode-audio-data.js.map","export const detachArrayBuffer = (arrayBuffer) => {\n    const { port1 } = new MessageChannel();\n    port1.postMessage(arrayBuffer, [arrayBuffer]);\n};\n//# sourceMappingURL=/build/es2018/helpers/detach-array-buffer.js.map","export const createDataCloneError = () => {\n    try {\n        return new DOMException('', 'DataCloneError');\n    }\n    catch (err) {\n        // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.\n        err.code = 25;\n        err.name = 'DataCloneError';\n        return err;\n    }\n};\n//# sourceMappingURL=/build/es2018/factories/data-clone-error.js.map","export const createEncodingError = () => {\n    try {\n        return new DOMException('', 'EncodingError');\n    }\n    catch (err) {\n        // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.\n        err.code = 0;\n        err.name = 'EncodingError';\n        return err;\n    }\n};\n//# sourceMappingURL=/build/es2018/factories/encoding-error.js.map","import { getNativeContext } from '../helpers/get-native-context';\nexport const createMediaElementAudioSourceNodeConstructor = (createNativeMediaElementAudioSourceNode, createNotSupportedError, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class MediaElementAudioSourceNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options) {\n            const nativeContext = getNativeContext(context);\n            if (isNativeOfflineAudioContext(nativeContext)) {\n                throw createNotSupportedError();\n            }\n            const nativeMediaElementAudioSourceNode = createNativeMediaElementAudioSourceNode(nativeContext, options);\n            super(context, 'active', nativeMediaElementAudioSourceNode, null);\n            // Bug #63: Edge & Firefox do not expose the mediaElement yet.\n            this._mediaElement = options.mediaElement;\n            this._nativeMediaElementAudioSourceNode = nativeMediaElementAudioSourceNode;\n        }\n        get mediaElement() {\n            return (this._nativeMediaElementAudioSourceNode.mediaElement === undefined) ?\n                this._mediaElement :\n                this._nativeMediaElementAudioSourceNode.mediaElement;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/media-element-audio-source-node-constructor.js.map","export const createNativeMediaElementAudioSourceNodeFactory = (createNativeAudioNode) => {\n    return (nativeAudioContext, options) => createNativeAudioNode(nativeAudioContext, (ntvDCntxt) => {\n        return ntvDCntxt.createMediaElementSource(options.mediaElement);\n    });\n};\n//# sourceMappingURL=/build/es2018/factories/native-media-element-audio-source-node-factory.js.map","import { getNativeContext } from '../helpers/get-native-context';\nexport const createMediaStreamAudioSourceNodeConstructor = (createNativeMediaStreamAudioSourceNode, createNotSupportedError, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class MediaStreamAudioSourceNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options) {\n            const nativeContext = getNativeContext(context);\n            if (isNativeOfflineAudioContext(nativeContext)) {\n                throw createNotSupportedError();\n            }\n            const nativeMediaStreamAudioSourceNode = createNativeMediaStreamAudioSourceNode(nativeContext, options);\n            super(context, 'active', nativeMediaStreamAudioSourceNode, null);\n            this._nativeMediaStreamAudioSourceNode = nativeMediaStreamAudioSourceNode;\n        }\n        get mediaStream() {\n            return this._nativeMediaStreamAudioSourceNode.mediaStream;\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/media-stream-audio-source-node-constructor.js.map","export const createNativeMediaStreamAudioSourceNodeFactory = (createInvalidStateError, createNativeAudioNode) => {\n    return (nativeAudioContext, { mediaStream }) => {\n        const audioStreamTracks = mediaStream.getAudioTracks();\n        const nativeMediaStreamAudioSourceNode = createNativeAudioNode(nativeAudioContext, (ntvDCntxt) => {\n            /*\n             * Bug #151: Firefox does not use the audio track as input anymore if it gets removed from the mediaStream after construction.\n             * Bug #159: Chrome and Firefox pick the first audio track if the MediaStream has more than one audio track.\n             */\n            const filteredAudioStreamTracks = audioStreamTracks\n                .sort((a, b) => ((a.id < b.id) ? -1 : (a.id > b.id) ? 1 : 0))\n                .slice(0, 1);\n            return ntvDCntxt.createMediaStreamSource(new MediaStream(filteredAudioStreamTracks));\n        });\n        // Bug #120: Firefox does not throw an error if the mediaStream has no audio track.\n        if (audioStreamTracks.length === 0) {\n            throw createInvalidStateError();\n        }\n        // Bug #63: Edge & Firefox do not expose the mediaStream yet.\n        Object.defineProperty(nativeMediaStreamAudioSourceNode, 'mediaStream', { value: mediaStream });\n        return nativeMediaStreamAudioSourceNode;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-media-stream-audio-source-node-factory.js.map","import { getNativeContext } from '../helpers/get-native-context';\nexport const createMediaStreamTrackAudioSourceNodeConstructor = (createNativeMediaStreamTrackAudioSourceNode, createNotSupportedError, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {\n    return class MediaStreamTrackAudioSourceNode extends noneAudioDestinationNodeConstructor {\n        constructor(context, options) {\n            const nativeContext = getNativeContext(context);\n            if (isNativeOfflineAudioContext(nativeContext)) {\n                throw createNotSupportedError();\n            }\n            const nativeMediaStreamTrackAudioSourceNode = createNativeMediaStreamTrackAudioSourceNode(nativeContext, options);\n            super(context, 'active', nativeMediaStreamTrackAudioSourceNode, null);\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/media-stream-track-audio-source-node-constructor.js.map","export const createNativeMediaStreamTrackAudioSourceNodeFactory = (createInvalidStateError, createNativeAudioNode) => {\n    return (nativeAudioContext, { mediaStreamTrack }) => {\n        if (typeof nativeAudioContext.createMediaStreamTrackSource === 'function') {\n            return createNativeAudioNode(nativeAudioContext, (ntvDCntxt) => ntvDCntxt.createMediaStreamTrackSource(mediaStreamTrack));\n        }\n        // Bug #121: Only Firefox does yet support the MediaStreamTrackAudioSourceNode.\n        return createNativeAudioNode(nativeAudioContext, (ntvDCntxt) => {\n            const mediaStream = new MediaStream([mediaStreamTrack]);\n            const nativeMediaStreamAudioSourceNode = ntvDCntxt.createMediaStreamSource(mediaStream);\n            // Bug #120: Firefox does not throw an error if the mediaStream has no audio track.\n            if (mediaStreamTrack.kind !== 'audio') {\n                throw createInvalidStateError();\n            }\n            return nativeMediaStreamAudioSourceNode;\n        });\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-media-stream-track-audio-source-node-factory.js.map","import { isValidLatencyHint } from '../helpers/is-valid-latency-hint';\nexport const createAudioContextConstructor = (baseAudioContextConstructor, createInvalidStateError, createNotSupportedError, createUnknownError, mediaElementAudioSourceNodeConstructor, mediaStreamAudioSourceNodeConstructor, mediaStreamTrackAudioSourceNodeConstructor, nativeAudioContextConstructor) => {\n    return class AudioContext extends baseAudioContextConstructor {\n        constructor(options = {}) {\n            if (nativeAudioContextConstructor === null) {\n                throw new Error('Missing the native AudioContext constructor.');\n            }\n            const nativeAudioContext = new nativeAudioContextConstructor(options);\n            // Bug #131 Safari returns null when there are four other AudioContexts running already.\n            if (nativeAudioContext === null) {\n                throw createUnknownError();\n            }\n            // Bug #51 Only Chrome and Opera throw an error if the given latencyHint is invalid.\n            if (!isValidLatencyHint(options.latencyHint)) {\n                throw new TypeError(`The provided value '${options.latencyHint}' is not a valid enum value of type AudioContextLatencyCategory.`);\n            }\n            // Bug #150 Only Chrome, Firefox and Opera support setting the sampleRate.\n            if (options.sampleRate !== undefined && nativeAudioContext.sampleRate !== options.sampleRate) {\n                throw createNotSupportedError();\n            }\n            super(nativeAudioContext, nativeAudioContext.destination.channelCount);\n            const { latencyHint } = options;\n            const { sampleRate } = nativeAudioContext;\n            // @todo The values for 'balanced', 'interactive' and 'playback' are just copied from Chrome's implementation.\n            this._baseLatency = (typeof nativeAudioContext.baseLatency === 'number')\n                ? nativeAudioContext.baseLatency\n                : (latencyHint === 'balanced')\n                    ? (512 / sampleRate)\n                    : (latencyHint === 'interactive' || latencyHint === undefined)\n                        ? (256 / sampleRate)\n                        : (latencyHint === 'playback')\n                            ? (1024 / sampleRate)\n                            /*\n                             * @todo The min (256) and max (16384) values are taken from the allowed bufferSize values of a\n                             * ScriptProcessorNode.\n                             */\n                            : ((Math.max(2, Math.min(128, Math.round((latencyHint * sampleRate) / 128))) * 128) / sampleRate);\n            this._nativeAudioContext = nativeAudioContext;\n            this._state = null;\n            /*\n             * Bug #34: Chrome and Opera pretend to be running right away, but fire an onstatechange event when the state actually changes\n             * to 'running'.\n             */\n            if (nativeAudioContext.state === 'running') {\n                this._state = 'suspended';\n                const revokeState = () => {\n                    if (this._state === 'suspended') {\n                        this._state = null;\n                    }\n                    nativeAudioContext.removeEventListener('statechange', revokeState);\n                };\n                nativeAudioContext.addEventListener('statechange', revokeState);\n            }\n        }\n        get baseLatency() {\n            return this._baseLatency;\n        }\n        get state() {\n            return (this._state !== null) ? this._state : this._nativeAudioContext.state;\n        }\n        close() {\n            // Bug #35: Firefox does not throw an error if the AudioContext was closed before.\n            if (this.state === 'closed') {\n                return this._nativeAudioContext\n                    .close()\n                    .then(() => {\n                    throw createInvalidStateError();\n                });\n            }\n            // Bug #34: If the state was set to suspended before it should be revoked now.\n            if (this._state === 'suspended') {\n                this._state = null;\n            }\n            return this._nativeAudioContext.close();\n            /*\n             * Bug #50: Deleting the AudioGraph is currently not possible anymore.\n             * ...then(() => deleteAudioGraph(this, this._nativeAudioContext));\n             */\n        }\n        createMediaElementSource(mediaElement) {\n            return new mediaElementAudioSourceNodeConstructor(this, { mediaElement });\n        }\n        createMediaStreamSource(mediaStream) {\n            return new mediaStreamAudioSourceNodeConstructor(this, { mediaStream });\n        }\n        createMediaStreamTrackSource(mediaStreamTrack) {\n            return new mediaStreamTrackAudioSourceNodeConstructor(this, { mediaStreamTrack });\n        }\n        resume() {\n            if (this._state === 'suspended') {\n                return new Promise((resolve, reject) => {\n                    const resolvePromise = () => {\n                        this._nativeAudioContext.removeEventListener('statechange', resolvePromise);\n                        if (this._nativeAudioContext.state === 'running') {\n                            resolve();\n                        }\n                        else {\n                            this\n                                .resume()\n                                .then(resolve, reject);\n                        }\n                    };\n                    this._nativeAudioContext.addEventListener('statechange', resolvePromise);\n                });\n            }\n            return this._nativeAudioContext\n                .resume()\n                .catch((err) => {\n                // Bug #55: Chrome, Edge and Opera do throw an InvalidAccessError instead of an InvalidStateError.\n                // Bug #56: Safari invokes the catch handler but without an error.\n                if (err === undefined || err.code === 15) {\n                    throw createInvalidStateError();\n                }\n                throw err; // tslint:disable-line:rxjs-throw-error\n            });\n        }\n        suspend() {\n            return this._nativeAudioContext\n                .suspend()\n                .catch((err) => {\n                // Bug #56: Safari invokes the catch handler but without an error.\n                if (err === undefined) {\n                    throw createInvalidStateError();\n                }\n                throw err; // tslint:disable-line:rxjs-throw-error\n            });\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/audio-context-constructor.js.map","import { isNativeAudioNode } from '../guards/native-audio-node';\nexport const createConnectMultipleOutputs = (createIndexSizeError) => {\n    return (outputAudioNodes, destination, output = 0, input = 0) => {\n        const outputAudioNode = outputAudioNodes[output];\n        if (outputAudioNode === undefined) {\n            throw createIndexSizeError();\n        }\n        if (isNativeAudioNode(destination)) {\n            return outputAudioNode.connect(destination, 0, input);\n        }\n        return outputAudioNode.connect(destination, 0);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/connect-multiple-outputs.js.map","import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { AUXILIARY_GAIN_NODE_STORE } from '../globals';\nimport { computeBufferSize } from '../helpers/compute-buffer-size';\nimport { copyFromChannel } from '../helpers/copy-from-channel';\nimport { copyToChannel } from '../helpers/copy-to-channel';\nimport { createAudioWorkletProcessor } from '../helpers/create-audio-worklet-processor';\nimport { createNestedArrays } from '../helpers/create-nested-arrays';\nimport { ReadOnlyMap } from '../read-only-map';\nexport const createNativeAudioWorkletNodeFakerFactory = (connectMultipleOutputs, createIndexSizeError, createInvalidStateError, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, createNativeScriptProcessorNode, createNotSupportedError, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime) => {\n    return (nativeContext, baseLatency, processorConstructor, options) => {\n        if (options.numberOfInputs === 0 && options.numberOfOutputs === 0) {\n            throw createNotSupportedError();\n        }\n        if (options.outputChannelCount !== undefined) {\n            if (options.outputChannelCount.length !== options.numberOfOutputs) {\n                throw createIndexSizeError();\n            }\n            // @todo Check if any of the channelCount values is greater than the implementation's maximum number of channels.\n            if (options.outputChannelCount.some((channelCount) => (channelCount < 1))) {\n                throw createNotSupportedError();\n            }\n        }\n        // Bug #61: This is not part of the standard but required for the faker to work.\n        if (options.channelCountMode !== 'explicit') {\n            throw createNotSupportedError();\n        }\n        const numberOfInputChannels = options.channelCount * options.numberOfInputs;\n        const numberOfOutputChannels = options.outputChannelCount.reduce((sum, value) => sum + value, 0);\n        const numberOfParameters = (processorConstructor.parameterDescriptors === undefined)\n            ? 0\n            : processorConstructor.parameterDescriptors.length;\n        // Bug #61: This is not part of the standard but required for the faker to work.\n        if (numberOfInputChannels + numberOfParameters > 6 || numberOfOutputChannels > 6) {\n            throw createNotSupportedError();\n        }\n        const messageChannel = new MessageChannel();\n        const gainNodes = [];\n        const inputChannelSplitterNodes = [];\n        for (let i = 0; i < options.numberOfInputs; i += 1) {\n            gainNodes.push(createNativeGainNode(nativeContext, {\n                channelCount: options.channelCount,\n                channelCountMode: options.channelCountMode,\n                channelInterpretation: options.channelInterpretation,\n                gain: 1\n            }));\n            inputChannelSplitterNodes.push(createNativeChannelSplitterNode(nativeContext, {\n                channelCount: options.channelCount,\n                channelCountMode: 'explicit',\n                channelInterpretation: 'discrete',\n                numberOfOutputs: options.channelCount\n            }));\n        }\n        const constantSourceNodes = [];\n        if (processorConstructor.parameterDescriptors !== undefined) {\n            for (const { defaultValue, maxValue, minValue, name } of processorConstructor.parameterDescriptors) {\n                const constantSourceNode = createNativeConstantSourceNode(nativeContext, {\n                    channelCount: 1,\n                    channelCountMode: 'explicit',\n                    channelInterpretation: 'discrete',\n                    offset: (options.parameterData[name] !== undefined)\n                        ? options.parameterData[name]\n                        : (defaultValue === undefined)\n                            ? 0\n                            : defaultValue\n                });\n                Object.defineProperties(constantSourceNode.offset, {\n                    defaultValue: {\n                        get: () => (defaultValue === undefined) ? 0 : defaultValue\n                    },\n                    maxValue: {\n                        get: () => (maxValue === undefined) ? MOST_POSITIVE_SINGLE_FLOAT : maxValue\n                    },\n                    minValue: {\n                        get: () => (minValue === undefined) ? MOST_NEGATIVE_SINGLE_FLOAT : minValue\n                    }\n                });\n                constantSourceNodes.push(constantSourceNode);\n            }\n        }\n        const inputChannelMergerNode = createNativeChannelMergerNode(nativeContext, {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'speakers',\n            numberOfInputs: Math.max(1, numberOfInputChannels + numberOfParameters)\n        });\n        const bufferSize = computeBufferSize(baseLatency, nativeContext.sampleRate);\n        const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, bufferSize, numberOfInputChannels + numberOfParameters, \n        // Bug #87: Only Firefox will fire an AudioProcessingEvent if there is no connected output.\n        Math.max(1, numberOfOutputChannels));\n        const outputChannelSplitterNode = createNativeChannelSplitterNode(nativeContext, {\n            channelCount: Math.max(1, numberOfOutputChannels),\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete',\n            numberOfOutputs: Math.max(1, numberOfOutputChannels)\n        });\n        const outputChannelMergerNodes = [];\n        for (let i = 0; i < options.numberOfOutputs; i += 1) {\n            outputChannelMergerNodes.push(createNativeChannelMergerNode(nativeContext, {\n                channelCount: 1,\n                channelCountMode: 'explicit',\n                channelInterpretation: 'speakers',\n                numberOfInputs: options.outputChannelCount[i]\n            }));\n        }\n        for (let i = 0; i < options.numberOfInputs; i += 1) {\n            gainNodes[i].connect(inputChannelSplitterNodes[i]);\n            for (let j = 0; j < options.channelCount; j += 1) {\n                inputChannelSplitterNodes[i].connect(inputChannelMergerNode, j, (i * options.channelCount) + j);\n            }\n        }\n        const parameterMap = new ReadOnlyMap((processorConstructor.parameterDescriptors === undefined)\n            ? []\n            : processorConstructor.parameterDescriptors\n                .map(({ name }, index) => {\n                const constantSourceNode = constantSourceNodes[index];\n                constantSourceNode.connect(inputChannelMergerNode, 0, numberOfInputChannels + index);\n                constantSourceNode.start(0);\n                return [name, constantSourceNode.offset];\n            }));\n        inputChannelMergerNode.connect(scriptProcessorNode);\n        if (options.numberOfOutputs > 0) {\n            scriptProcessorNode.connect(outputChannelSplitterNode);\n        }\n        for (let i = 0, outputChannelSplitterNodeOutput = 0; i < options.numberOfOutputs; i += 1) {\n            const outputChannelMergerNode = outputChannelMergerNodes[i];\n            for (let j = 0; j < options.outputChannelCount[i]; j += 1) {\n                outputChannelSplitterNode.connect(outputChannelMergerNode, outputChannelSplitterNodeOutput + j, j);\n            }\n            outputChannelSplitterNodeOutput += options.outputChannelCount[i];\n        }\n        let channelInterpretation = options.channelInterpretation;\n        let onprocessorerror = null;\n        // Bug #87: Expose at least one output to make this node connectable.\n        const outputAudioNodes = (options.numberOfOutputs === 0) ? [scriptProcessorNode] : outputChannelMergerNodes;\n        const nativeAudioWorkletNodeFaker = {\n            get bufferSize() {\n                return bufferSize;\n            },\n            get channelCount() {\n                return options.channelCount;\n            },\n            set channelCount(_) {\n                // Bug #61: This is not part of the standard but required for the faker to work.\n                throw createInvalidStateError();\n            },\n            get channelCountMode() {\n                return options.channelCountMode;\n            },\n            set channelCountMode(_) {\n                // Bug #61: This is not part of the standard but required for the faker to work.\n                throw createInvalidStateError();\n            },\n            get channelInterpretation() {\n                return channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                for (const gainNode of gainNodes) {\n                    gainNode.channelInterpretation = value;\n                }\n                channelInterpretation = value;\n            },\n            get context() {\n                return scriptProcessorNode.context;\n            },\n            get inputs() {\n                return gainNodes;\n            },\n            get numberOfInputs() {\n                return options.numberOfInputs;\n            },\n            get numberOfOutputs() {\n                return options.numberOfOutputs;\n            },\n            get onprocessorerror() {\n                return onprocessorerror;\n            },\n            set onprocessorerror(value) {\n                if (typeof onprocessorerror === 'function') {\n                    nativeAudioWorkletNodeFaker.removeEventListener('processorerror', onprocessorerror);\n                }\n                onprocessorerror = (typeof value === 'function') ? value : null;\n                if (typeof onprocessorerror === 'function') {\n                    nativeAudioWorkletNodeFaker.addEventListener('processorerror', onprocessorerror);\n                }\n            },\n            get parameters() {\n                return parameterMap;\n            },\n            get port() {\n                return messageChannel.port2;\n            },\n            addEventListener(...args) {\n                return scriptProcessorNode.addEventListener(args[0], args[1], args[2]);\n            },\n            connect: connectMultipleOutputs.bind(null, outputAudioNodes),\n            disconnect: disconnectMultipleOutputs.bind(null, outputAudioNodes),\n            dispatchEvent(...args) {\n                return scriptProcessorNode.dispatchEvent(args[0]);\n            },\n            removeEventListener(...args) {\n                return scriptProcessorNode.removeEventListener(args[0], args[1], args[2]);\n            }\n        };\n        const patchedEventListeners = new Map(); // tslint:disable-line:max-line-length\n        messageChannel.port1.addEventListener = ((addEventListener) => {\n            return (...args) => {\n                if (args[0] === 'message') {\n                    const unpatchedEventListener = (typeof args[1] === 'function')\n                        ? args[1]\n                        : (typeof args[1] === 'object' && args[1] !== null && typeof args[1].handleEvent === 'function')\n                            ? args[1].handleEvent\n                            : null;\n                    if (unpatchedEventListener !== null) {\n                        const patchedEventListener = patchedEventListeners.get(args[1]);\n                        if (patchedEventListener !== undefined) {\n                            args[1] = patchedEventListener;\n                        }\n                        else {\n                            args[1] = (event) => {\n                                exposeCurrentFrameAndCurrentTime(nativeContext, () => unpatchedEventListener(event));\n                            };\n                            patchedEventListeners.set(unpatchedEventListener, args[1]);\n                        }\n                    }\n                }\n                return addEventListener.call(messageChannel.port1, args[0], args[1], args[2]);\n            };\n        })(messageChannel.port1.addEventListener);\n        messageChannel.port1.removeEventListener = ((removeEventListener) => {\n            return (...args) => {\n                if (args[0] === 'message') {\n                    const patchedEventListener = patchedEventListeners.get(args[1]);\n                    if (patchedEventListener !== undefined) {\n                        patchedEventListeners.delete(args[1]);\n                        args[1] = patchedEventListener;\n                    }\n                }\n                return removeEventListener.call(messageChannel.port1, args[0], args[1], args[2]);\n            };\n        })(messageChannel.port1.removeEventListener);\n        let onmessage = null;\n        Object.defineProperty(messageChannel.port1, 'onmessage', {\n            get: () => onmessage,\n            set: (value) => {\n                if (typeof onmessage === 'function') {\n                    messageChannel.port1.removeEventListener('message', onmessage);\n                }\n                onmessage = (typeof value === 'function') ? value : null;\n                if (typeof onmessage === 'function') {\n                    messageChannel.port1.addEventListener('message', onmessage);\n                    messageChannel.port1.start();\n                }\n            }\n        });\n        processorConstructor.prototype.port = messageChannel.port1;\n        let audioWorkletProcessor = null;\n        const audioWorkletProcessorPromise = createAudioWorkletProcessor(nativeContext, nativeAudioWorkletNodeFaker, processorConstructor, options);\n        audioWorkletProcessorPromise\n            .then((dWrkltPrcssr) => audioWorkletProcessor = dWrkltPrcssr);\n        const inputs = createNestedArrays(options.numberOfInputs, options.channelCount);\n        const outputs = createNestedArrays(options.numberOfOutputs, options.outputChannelCount);\n        const parameters = (processorConstructor.parameterDescriptors === undefined) ?\n            [] :\n            processorConstructor.parameterDescriptors\n                .reduce((prmtrs, { name }) => ({ ...prmtrs, [name]: new Float32Array(128) }), {});\n        let isActive = true;\n        scriptProcessorNode.onaudioprocess = ({ inputBuffer, outputBuffer }) => {\n            if (audioWorkletProcessor !== null) {\n                for (let i = 0; i < bufferSize; i += 128) {\n                    for (let j = 0; j < options.numberOfInputs; j += 1) {\n                        for (let k = 0; k < options.channelCount; k += 1) {\n                            copyFromChannel(inputBuffer, inputs[j], k, k, i);\n                        }\n                    }\n                    if (processorConstructor.parameterDescriptors !== undefined) {\n                        processorConstructor.parameterDescriptors.forEach(({ name }, index) => {\n                            copyFromChannel(inputBuffer, parameters, name, numberOfInputChannels + index, i);\n                        });\n                    }\n                    for (let j = 0; j < options.numberOfInputs; j += 1) {\n                        for (let k = 0; k < options.outputChannelCount[j]; k += 1) {\n                            // The byteLength will be 0 when the ArrayBuffer was transferred.\n                            if (outputs[j][k].byteLength === 0) {\n                                outputs[j][k] = new Float32Array(128);\n                            }\n                        }\n                    }\n                    try {\n                        const potentiallyEmptyInputs = inputs\n                            .map((input, index) => {\n                            const auxiliaryGainNodes = AUXILIARY_GAIN_NODE_STORE.get(nativeAudioWorkletNodeFaker);\n                            if (auxiliaryGainNodes === undefined || auxiliaryGainNodes.get(index) === undefined) {\n                                return [new Float32Array(0)];\n                            }\n                            return input;\n                        });\n                        const activeSourceFlag = exposeCurrentFrameAndCurrentTime(nativeContext, () => audioWorkletProcessor.process(potentiallyEmptyInputs, outputs, parameters));\n                        isActive = activeSourceFlag;\n                        for (let j = 0, outputChannelSplitterNodeOutput = 0; j < options.numberOfOutputs; j += 1) {\n                            for (let k = 0; k < options.outputChannelCount[j]; k += 1) {\n                                copyToChannel(outputBuffer, outputs[j], k, outputChannelSplitterNodeOutput + k, i);\n                            }\n                            outputChannelSplitterNodeOutput += options.outputChannelCount[j];\n                        }\n                    }\n                    catch (error) {\n                        isActive = false;\n                        nativeAudioWorkletNodeFaker.dispatchEvent(new ErrorEvent('processorerror', { error }));\n                    }\n                    if (!isActive) {\n                        scriptProcessorNode.onaudioprocess = null; // tslint:disable-line:deprecation\n                        break;\n                    }\n                }\n            }\n        };\n        return nativeAudioWorkletNodeFaker;\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-audio-worklet-node-faker-factory.js.map","import { NODE_TO_PROCESSOR_MAPS } from '../globals';\nimport { createAudioWorkletProcessorPromise } from './create-audio-worklet-processor-promise';\nexport const createAudioWorkletProcessor = (nativeContext, nativeAudioWorkletNode, processorConstructor, audioWorkletNodeOptions) => {\n    let nodeToProcessorMap = NODE_TO_PROCESSOR_MAPS.get(nativeContext);\n    if (nodeToProcessorMap === undefined) {\n        nodeToProcessorMap = new WeakMap();\n        NODE_TO_PROCESSOR_MAPS.set(nativeContext, nodeToProcessorMap);\n    }\n    const audioWorkletProcessorPromise = createAudioWorkletProcessorPromise(processorConstructor, audioWorkletNodeOptions);\n    nodeToProcessorMap.set(nativeAudioWorkletNode, audioWorkletProcessorPromise);\n    return audioWorkletProcessorPromise;\n};\n//# sourceMappingURL=/build/es2018/helpers/create-audio-worklet-processor.js.map","import { testClonabilityOfAudioWorkletNodeOptions } from '../helpers/test-clonability-of-audio-worklet-node-options';\nexport const createNativeAudioWorkletNodeFactory = (createInvalidStateError, createNativeAudioNode, createNativeAudioWorkletNodeFaker, createNotSupportedError, isNativeOfflineAudioContext) => {\n    return (nativeContext, baseLatency, nativeAudioWorkletNodeConstructor, name, processorConstructor, options) => {\n        if (nativeAudioWorkletNodeConstructor !== null) {\n            try {\n                // Bug #86: Chrome Canary does not invoke the process() function if the corresponding AudioWorkletNode has no output.\n                const nativeAudioWorkletNode = createNativeAudioNode(nativeContext, (ntvCntxt) => {\n                    return (isNativeOfflineAudioContext(ntvCntxt) && options.numberOfInputs !== 0 && options.numberOfOutputs === 0) ?\n                        new nativeAudioWorkletNodeConstructor(ntvCntxt, name, {\n                            ...options,\n                            numberOfOutputs: 1,\n                            outputChannelCount: [1],\n                            parameterData: { ...options.parameterData, hasNoOutput: 1 }\n                        }) :\n                        new nativeAudioWorkletNodeConstructor(ntvCntxt, name, options);\n                });\n                const patchedEventListeners = new Map(); // tslint:disable-line:max-line-length\n                let onprocessorerror = null;\n                Object.defineProperties(nativeAudioWorkletNode, {\n                    /*\n                     * Bug #61: Overwriting the property accessors for channelCount and channelCountMode is necessary as long as some\n                     * browsers have no native implementation to achieve a consistent behavior.\n                     */\n                    channelCount: {\n                        get: () => options.channelCount,\n                        set: () => {\n                            throw createInvalidStateError();\n                        }\n                    },\n                    channelCountMode: {\n                        get: () => 'explicit',\n                        set: () => {\n                            throw createInvalidStateError();\n                        }\n                    },\n                    // Bug #156: Chrome does not yet fire an ErrorEvent.\n                    onprocessorerror: {\n                        get: () => onprocessorerror,\n                        set: (value) => {\n                            if (typeof onprocessorerror === 'function') {\n                                nativeAudioWorkletNode.removeEventListener('processorerror', onprocessorerror);\n                            }\n                            onprocessorerror = (typeof value === 'function') ? value : null;\n                            if (typeof onprocessorerror === 'function') {\n                                nativeAudioWorkletNode.addEventListener('processorerror', onprocessorerror);\n                            }\n                        }\n                    }\n                });\n                nativeAudioWorkletNode.addEventListener = ((addEventListener) => {\n                    return (...args) => {\n                        if (args[0] === 'processorerror') {\n                            const unpatchedEventListener = (typeof args[1] === 'function')\n                                ? args[1]\n                                : (typeof args[1] === 'object' && args[1] !== null && typeof args[1].handleEvent === 'function')\n                                    ? args[1].handleEvent\n                                    : null;\n                            if (unpatchedEventListener !== null) {\n                                const patchedEventListener = patchedEventListeners.get(args[1]);\n                                if (patchedEventListener !== undefined) {\n                                    args[1] = patchedEventListener;\n                                }\n                                else {\n                                    args[1] = (event) => {\n                                        unpatchedEventListener(new ErrorEvent(args[0], { ...event, error: new Error( /* @todo */) }));\n                                    };\n                                    patchedEventListeners.set(unpatchedEventListener, args[1]);\n                                }\n                            }\n                        }\n                        return addEventListener.call(nativeAudioWorkletNode, args[0], args[1], args[2]);\n                    };\n                })(nativeAudioWorkletNode.addEventListener);\n                nativeAudioWorkletNode.removeEventListener = ((removeEventListener) => {\n                    return (...args) => {\n                        if (args[0] === 'processorerror') {\n                            const patchedEventListener = patchedEventListeners.get(args[1]);\n                            if (patchedEventListener !== undefined) {\n                                patchedEventListeners.delete(args[1]);\n                                args[1] = patchedEventListener;\n                            }\n                        }\n                        return removeEventListener.call(nativeAudioWorkletNode, args[0], args[1], args[2]);\n                    };\n                })(nativeAudioWorkletNode.removeEventListener);\n                return nativeAudioWorkletNode;\n            }\n            catch (err) {\n                // Bug #60: Chrome Canary throws an InvalidStateError instead of a NotSupportedError.\n                if (err.code === 11) {\n                    throw createNotSupportedError();\n                }\n                throw err; // tslint:disable-line:rxjs-throw-error\n            }\n        }\n        // Bug #61: Only Chrome & Opera have an implementation of the AudioWorkletNode yet.\n        if (processorConstructor === undefined) {\n            throw createNotSupportedError();\n        }\n        testClonabilityOfAudioWorkletNodeOptions(options);\n        return createNativeAudioWorkletNodeFaker(nativeContext, baseLatency, processorConstructor, options);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/native-audio-worklet-node-factory.js.map","export const testClonabilityOfAudioWorkletNodeOptions = (audioWorkletNodeOptions) => {\n    const { port1 } = new MessageChannel();\n    try {\n        // This will throw an error if the audioWorkletNodeOptions are not clonable.\n        port1.postMessage(audioWorkletNodeOptions);\n    }\n    finally {\n        port1.close();\n    }\n};\n//# sourceMappingURL=/build/es2018/helpers/test-clonability-of-audio-worklet-node-options.js.map","export const createNativeAudioWorkletNodeConstructor = (window) => {\n    if (window === null) {\n        return null;\n    }\n    return (window.hasOwnProperty('AudioWorkletNode')) ? window.AudioWorkletNode : null;\n};\n//# sourceMappingURL=/build/es2018/factories/native-audio-worklet-node-constructor.js.map","import { isValidLatencyHint } from '../helpers/is-valid-latency-hint';\nexport const createMinimalAudioContextConstructor = (createInvalidStateError, createNotSupportedError, createUnknownError, minimalBaseAudioContextConstructor, nativeAudioContextConstructor) => {\n    return class MinimalAudioContext extends minimalBaseAudioContextConstructor {\n        constructor(options = {}) {\n            if (nativeAudioContextConstructor === null) {\n                throw new Error('Missing the native AudioContext constructor.');\n            }\n            const nativeAudioContext = new nativeAudioContextConstructor(options);\n            // Bug #131 Safari returns null when there are four other AudioContexts running already.\n            if (nativeAudioContext === null) {\n                throw createUnknownError();\n            }\n            // Bug #51 Only Chrome and Opera throw an error if the given latencyHint is invalid.\n            if (!isValidLatencyHint(options.latencyHint)) {\n                throw new TypeError(`The provided value '${options.latencyHint}' is not a valid enum value of type AudioContextLatencyCategory.`);\n            }\n            // Bug #150 Only Chrome, Firefox and Opera support setting the sampleRate.\n            if (options.sampleRate !== undefined && nativeAudioContext.sampleRate !== options.sampleRate) {\n                throw createNotSupportedError();\n            }\n            super(nativeAudioContext, nativeAudioContext.destination.channelCount);\n            const { latencyHint } = options;\n            const { sampleRate } = nativeAudioContext;\n            // @todo The values for 'balanced', 'interactive' and 'playback' are just copied from Chrome's implementation.\n            this._baseLatency = (typeof nativeAudioContext.baseLatency === 'number')\n                ? nativeAudioContext.baseLatency\n                : (latencyHint === 'balanced')\n                    ? (512 / sampleRate)\n                    : (latencyHint === 'interactive' || latencyHint === undefined)\n                        ? (256 / sampleRate)\n                        : (latencyHint === 'playback')\n                            ? (1024 / sampleRate)\n                            /*\n                             * @todo The min (256) and max (16384) values are taken from the allowed bufferSize values of a\n                             * ScriptProcessorNode.\n                             */\n                            : ((Math.max(2, Math.min(128, Math.round((latencyHint * sampleRate) / 128))) * 128) / sampleRate);\n            this._nativeAudioContext = nativeAudioContext;\n            this._state = null;\n            /*\n             * Bug #34: Chrome and Opera pretend to be running right away, but fire an onstatechange event when the state actually\n             * changes to 'running'.\n             */\n            if (nativeAudioContext.state === 'running') {\n                this._state = 'suspended';\n                const revokeState = () => {\n                    if (this._state === 'suspended') {\n                        this._state = null;\n                    }\n                    nativeAudioContext.removeEventListener('statechange', revokeState);\n                };\n                nativeAudioContext.addEventListener('statechange', revokeState);\n            }\n        }\n        get baseLatency() {\n            return this._baseLatency;\n        }\n        get state() {\n            return (this._state !== null) ? this._state : this._nativeAudioContext.state;\n        }\n        close() {\n            // Bug #35: Firefox does not throw an error if the AudioContext was closed before.\n            if (this.state === 'closed') {\n                return this._nativeAudioContext\n                    .close()\n                    .then(() => {\n                    throw createInvalidStateError();\n                });\n            }\n            // Bug #34: If the state was set to suspended before it should be revoked now.\n            if (this._state === 'suspended') {\n                this._state = null;\n            }\n            return this._nativeAudioContext.close();\n            /*\n             * Bug #50: Deleting the AudioGraph is currently not possible anymore.\n             * ...then(() => deleteAudioGraph(this, this._nativeAudioContext));\n             */\n        }\n        resume() {\n            if (this._state === 'suspended') {\n                return new Promise((resolve, reject) => {\n                    const resolvePromise = () => {\n                        this._nativeAudioContext.removeEventListener('statechange', resolvePromise);\n                        if (this._nativeAudioContext.state === 'running') {\n                            resolve();\n                        }\n                        else {\n                            this\n                                .resume()\n                                .then(resolve, reject);\n                        }\n                    };\n                    this._nativeAudioContext.addEventListener('statechange', resolvePromise);\n                });\n            }\n            return this._nativeAudioContext\n                .resume()\n                .catch((err) => {\n                // Bug #55: Chrome, Edge and Opera do throw an InvalidAccessError instead of an InvalidStateError.\n                // Bug #56: Safari invokes the catch handler but without an error.\n                if (err === undefined || err.code === 15) {\n                    throw createInvalidStateError();\n                }\n                throw err; // tslint:disable-line:rxjs-throw-error\n            });\n        }\n        suspend() {\n            return this._nativeAudioContext\n                .suspend()\n                .catch((err) => {\n                // Bug #56: Safari invokes the catch handler but without an error.\n                if (err === undefined) {\n                    throw createInvalidStateError();\n                }\n                throw err; // tslint:disable-line:rxjs-throw-error\n            });\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/minimal-audio-context-constructor.js.map","export const createCreateNativeOfflineAudioContext = (createNotSupportedError, nativeOfflineAudioContextConstructor) => {\n    return (numberOfChannels, length, sampleRate) => {\n        if (nativeOfflineAudioContextConstructor === null) {\n            throw new Error('Missing the native OfflineAudioContext constructor.');\n        }\n        try {\n            return new nativeOfflineAudioContextConstructor(numberOfChannels, length, sampleRate);\n        }\n        catch (err) {\n            // Bug #143, #144 & #146: Safari throws a SyntaxError when numberOfChannels, length or sampleRate are invalid.\n            // Bug #143: Edge throws a SyntaxError when numberOfChannels or length are invalid.\n            // Bug #145: Edge throws an IndexSizeError when sampleRate is zero.\n            if (err.name === 'IndexSizeError' || err.name === 'SyntaxError') {\n                throw createNotSupportedError();\n            }\n            throw err; // tslint:disable-line:rxjs-throw-error\n        }\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/create-native-offline-audio-context.js.map","import { getAudioNodeRenderer } from '../helpers/get-audio-node-renderer';\nimport { wrapAudioBufferGetChannelDataMethod } from '../helpers/wrap-audio-buffer-get-channel-data-method';\nexport const createStartRendering = (audioBufferStore, cacheTestResult, renderNativeOfflineAudioContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, testAudioBufferCopyChannelMethodsSubarraySupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds, wrapAudioBufferCopyChannelMethodsSubarray) => {\n    return (destination, nativeOfflineAudioContext) => getAudioNodeRenderer(destination)\n        .render(destination, nativeOfflineAudioContext)\n        .then(() => renderNativeOfflineAudioContext(nativeOfflineAudioContext))\n        .then((audioBuffer) => {\n        // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n        // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.\n        if (typeof audioBuffer.copyFromChannel !== 'function') {\n            wrapAudioBufferCopyChannelMethods(audioBuffer);\n            wrapAudioBufferGetChannelDataMethod(audioBuffer);\n            // Bug #42: Firefox does not yet fully support copyFromChannel() and copyToChannel().\n        }\n        else if (!cacheTestResult(testAudioBufferCopyChannelMethodsSubarraySupport, () => testAudioBufferCopyChannelMethodsSubarraySupport(audioBuffer))) {\n            wrapAudioBufferCopyChannelMethodsSubarray(audioBuffer);\n            wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n            // Bug #157: No browser does allow the bufferOffset to be out-of-bounds.\n        }\n        else if (!cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, () => testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer))) {\n            wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n        }\n        audioBufferStore.add(audioBuffer);\n        return audioBuffer;\n    });\n};\n//# sourceMappingURL=/build/es2018/factories/start-rendering.js.map","export const createIsAnyAudioContext = (contextStore, isNativeAudioContext) => {\n    return (anything) => {\n        const nativeContext = contextStore.get(anything);\n        return isNativeAudioContext(nativeContext) || isNativeAudioContext(anything);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/is-any-audio-context.js.map","export const createIsAnyAudioNode = (audioNodeStore, isNativeAudioNode) => {\n    return (anything) => audioNodeStore.has(anything) || isNativeAudioNode(anything);\n};\n//# sourceMappingURL=/build/es2018/factories/is-any-audio-node.js.map","export const createIsAnyAudioParam = (audioParamStore, isNativeAudioParam) => {\n    return (anything) => audioParamStore.has(anything) || isNativeAudioParam(anything);\n};\n//# sourceMappingURL=/build/es2018/factories/is-any-audio-param.js.map","export const createIsAnyOfflineAudioContext = (contextStore, isNativeOfflineAudioContext) => {\n    return (anything) => {\n        const nativeContext = contextStore.get(anything);\n        return isNativeOfflineAudioContext(nativeContext) || isNativeOfflineAudioContext(anything);\n    };\n};\n//# sourceMappingURL=/build/es2018/factories/is-any-offline-audio-context.js.map","/**\n * Assert that the statement is true, otherwise invoke an error with the given message.\n */\nexport function assert(statement: boolean, error: string): void {\n\tif (!statement) {\n\t\tthrow new Error(error);\n\t}\n}\n\n/**\n * Make sure that the given value is within the range\n */\nexport function assertRange(value: number, gte: number, lte: number = Infinity): void {\n\tif (!(gte <= value && value <= lte)) {\n\t\tthrow new RangeError(`Value must be within [${gte}, ${lte}], got: ${value}`);\n\t}\n}\n\n/**\n * A basic logging interface\n */\ninterface Logger {\n\tlog: (args?: any[]) => void;\n\twarn: (args?: any[]) => void;\n}\n\n/**\n * The default logger is the console\n */\nlet defaultLogger: Logger = console;\n\n/**\n * Set the logging interface\n */\nexport function setLogger(logger: Logger): void {\n\tdefaultLogger = logger;\n}\n\n/**\n * Log anything\n */\nexport function log(...args: any[]): void {\n\tdefaultLogger.log(...args);\n}\n\n/**\n * Warn anything\n */\nexport function warn(...args: any[]): void {\n\tdefaultLogger.warn(...args);\n}\n","import { Note } from \"../type/Units\";\n\n/**\n * Test if the arg is undefined\n */\nexport function isUndef(arg: any): arg is undefined {\n\treturn typeof arg === \"undefined\";\n}\n\n/**\n * Test if the arg is not undefined\n */\nexport function isDefined<T>(arg: T | undefined): arg is T {\n\treturn !isUndef(arg);\n}\n\n/**\n * Test if the arg is a function\n */\nexport function isFunction(arg: any): arg is (a: any) => any {\n\treturn typeof arg === \"function\";\n}\n\n/**\n * Test if the argument is a number.\n */\nexport function isNumber(arg: any): arg is number {\n\treturn (typeof arg === \"number\");\n}\n\n/**\n * Test if the given argument is an object literal (i.e. `{}`);\n */\nexport function isObject(arg: any): arg is object {\n\treturn (Object.prototype.toString.call(arg) === \"[object Object]\" && arg.constructor === Object);\n}\n\n/**\n * Test if the argument is a boolean.\n */\nexport function isBoolean(arg: any): arg is boolean {\n\treturn (typeof arg === \"boolean\");\n}\n\n/**\n * Test if the argument is an Array\n */\nexport function isArray(arg: any): arg is any[] {\n\treturn (Array.isArray(arg));\n}\n\n/**\n * Test if the argument is a string.\n */\nexport function isString(arg: any): arg is string {\n\treturn (typeof arg === \"string\");\n}\n\n/**\n * Test if the argument is in the form of a note in scientific pitch notation.\n * e.g. \"C4\"\n */\nexport function isNote(arg: any): arg is Note {\n\treturn isString(arg) && /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i.test(arg);\n}\n","import {\n\tAudioContext as stdAudioContext,\n\tAudioWorkletNode as stdAudioWorkletNode,\n\tOfflineAudioContext as stdOfflineAudioContext,\n} from \"standardized-audio-context\";\nimport { assert } from \"../util/Debug\";\nimport { isDefined } from \"../util/TypeCheck\";\n\n/**\n * Create a new AudioContext\n */\nexport function createAudioContext(): AudioContext {\n\treturn new stdAudioContext() as unknown as AudioContext;\n}\n\n/**\n * Create a new OfflineAudioContext\n */\nexport function createOfflineAudioContext(channels: number, length: number, sampleRate: number): OfflineAudioContext {\n\treturn new stdOfflineAudioContext(channels, length, sampleRate) as unknown as OfflineAudioContext;\n}\n\n/**\n * Either the online or offline audio context\n */\nexport type AnyAudioContext = AudioContext | OfflineAudioContext;\n\n/**\n * Interface for things that Tone.js adds to the window\n */\ninterface ToneWindow extends Window {\n\tTONE_SILENCE_LOGGING?: boolean;\n\tTONE_DEBUG_CLASS?: string;\n}\n\n/**\n * A reference to the window object\n * @hidden\n */\nexport const theWindow: ToneWindow | null = typeof self === \"object\" ? self : null;\n\n/**\n * If the browser has a window object which has an AudioContext\n * @hidden\n */\nexport const hasAudioContext = theWindow &&\n\t(theWindow.hasOwnProperty(\"AudioContext\") || theWindow.hasOwnProperty(\"webkitAudioContext\"));\n\nexport function createAudioWorkletNode(context: AnyAudioContext, name: string, options?: Partial<AudioWorkletNodeOptions>): AudioWorkletNode {\n\tassert(isDefined(stdAudioWorkletNode), \"This node only works in a secure context (https or localhost)\");\n\t// @ts-ignore\n\treturn new stdAudioWorkletNode(context, name, options);\n}\n","import { Seconds } from \"../type/Units\";\n\nexport type TickerClockSource = \"worker\" | \"timeout\" | \"offline\";\n\n/**\n * A class which provides a reliable callback using either\n * a Web Worker, or if that isn't supported, falls back to setTimeout.\n */\nexport class Ticker {\n\n\t/**\n\t * Either \"worker\" or \"timeout\" or \"offline\"\n\t */\n\tprivate _type: TickerClockSource;\n\n\t/**\n\t * The update interval of the worker\n\t */\n\tprivate _updateInterval: Seconds;\n\n\t/**\n\t * The callback to invoke at regular intervals\n\t */\n\tprivate _callback: () => void;\n\n\t/**\n\t * track the callback interval\n\t */\n\tprivate _timeout!: number;\n\n\t/**\n\t * private reference to the worker\n\t */\n\tprivate _worker!: Worker;\n\n\tconstructor(callback: () => void, type: TickerClockSource, updateInterval: Seconds) {\n\n\t\tthis._callback = callback;\n\t\tthis._type = type;\n\t\tthis._updateInterval = updateInterval;\n\n\t\t// create the clock source for the first time\n\t\tthis._createClock();\n\t}\n\n\t/**\n\t * Generate a web worker\n\t */\n\tprivate _createWorker(): void {\n\n\t\tconst blob = new Blob([\n\t\t\t/* javascript */`\n\t\t\t// the initial timeout time\n\t\t\tlet timeoutTime =  ${(this._updateInterval * 1000).toFixed(1)};\n\t\t\t// onmessage callback\n\t\t\tself.onmessage = function(msg){\n\t\t\t\ttimeoutTime = parseInt(msg.data);\n\t\t\t};\n\t\t\t// the tick function which posts a message\n\t\t\t// and schedules a new tick\n\t\t\tfunction tick(){\n\t\t\t\tsetTimeout(tick, timeoutTime);\n\t\t\t\tself.postMessage('tick');\n\t\t\t}\n\t\t\t// call tick initially\n\t\t\ttick();\n\t\t\t`\n\t\t], { type: \"text/javascript\" });\n\t\tconst blobUrl = URL.createObjectURL(blob);\n\t\tconst worker = new Worker(blobUrl);\n\n\t\tworker.onmessage = this._callback.bind(this);\n\n\t\tthis._worker = worker;\n\t}\n\n\t/**\n\t * Create a timeout loop\n\t */\n\tprivate _createTimeout(): void {\n\t\tthis._timeout = setTimeout(() => {\n\t\t\tthis._createTimeout();\n\t\t\tthis._callback();\n\t\t}, this._updateInterval * 1000);\n\t}\n\n\t/**\n\t * Create the clock source.\n\t */\n\tprivate _createClock(): void {\n\t\tif (this._type === \"worker\") {\n\t\t\ttry {\n\t\t\t\tthis._createWorker();\n\t\t\t} catch (e) {\n\t\t\t\t// workers not supported, fallback to timeout\n\t\t\t\tthis._type = \"timeout\";\n\t\t\t\tthis._createClock();\n\t\t\t}\n\t\t} else if (this._type === \"timeout\") {\n\t\t\tthis._createTimeout();\n\t\t}\n\t}\n\n\t/**\n\t * Clean up the current clock source\n\t */\n\tprivate _disposeClock(): void {\n\t\tif (this._timeout) {\n\t\t\tclearTimeout(this._timeout);\n\t\t\tthis._timeout = 0;\n\t\t}\n\t\tif (this._worker) {\n\t\t\tthis._worker.terminate();\n\t\t\tthis._worker.onmessage = null;\n\t\t}\n\t}\n\n\t/**\n\t * The rate in seconds the ticker will update\n\t */\n\tget updateInterval(): Seconds {\n\t\treturn this._updateInterval;\n\t}\n\tset updateInterval(interval: Seconds) {\n\t\tthis._updateInterval = Math.max(interval, 128 / 44100);\n\t\tif (this._type === \"worker\") {\n\t\t\tthis._worker.postMessage(Math.max(interval * 1000, 1));\n\t\t}\n\t}\n\n\t/**\n\t * The type of the ticker, either a worker or a timeout\n\t */\n\tget type(): TickerClockSource {\n\t\treturn this._type;\n\t}\n\tset type(type: TickerClockSource) {\n\t\tthis._disposeClock();\n\t\tthis._type = type;\n\t\tthis._createClock();\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): void {\n\t\tthis._disposeClock();\n\t}\n}\n","import {\n\tisAnyAudioContext, isAnyAudioNode,\n\tisAnyAudioParam, isAnyOfflineAudioContext,\n} from \"standardized-audio-context\";\n\n/**\n * Test if the given value is an instanceof AudioParam\n */\nexport function isAudioParam(arg: any): arg is AudioParam {\n\treturn isAnyAudioParam(arg);\n}\n\n/**\n * Test if the given value is an instanceof AudioNode\n */\nexport function isAudioNode(arg: any): arg is AudioNode {\n\treturn isAnyAudioNode(arg);\n}\n\n/**\n * Test if the arg is instanceof an OfflineAudioContext\n */\nexport function isOfflineAudioContext(arg: any): arg is OfflineAudioContext {\n\treturn isAnyOfflineAudioContext(arg);\n}\n\n/**\n * Test if the arg is an instanceof AudioContext\n */\nexport function isAudioContext(arg: any): arg is AudioContext {\n\treturn isAnyAudioContext(arg);\n}\n\n/**\n * Test if the arg is instanceof an AudioBuffer\n */\nexport function isAudioBuffer(arg: any): arg is AudioBuffer {\n\treturn arg instanceof AudioBuffer;\n}\n","import { isAudioBuffer, isAudioNode, isAudioParam } from \"./AdvancedTypeCheck\";\nimport { isDefined, isObject, isUndef } from \"./TypeCheck\";\n\ntype BaseToneOptions = import(\"../Tone\").BaseToneOptions;\n\n/**\n * Some objects should not be merged\n */\nfunction noCopy(key: string, arg: any): boolean {\n\treturn key === \"value\" || isAudioParam(arg) || isAudioNode(arg) || isAudioBuffer(arg);\n}\n\n/**\n * Recursively merge an object\n * @param target the object to merge into\n * @param sources the source objects to merge\n */\nexport function deepMerge<T>(target: T): T;\nexport function deepMerge<T, U>(target: T, source1: U): T & U;\nexport function deepMerge<T, U, V>(target: T, source1: U, source2: V): T & U & V;\nexport function deepMerge<T, U, V, W>(target: T, source1: U, source2: V, source3: W): T & U & V & W;\nexport function deepMerge(target: any, ...sources: any[]): any {\n\tif (!sources.length) {\n\t\treturn target; \n\t}\n\tconst source = sources.shift();\n\n\tif (isObject(target) && isObject(source)) {\n\t\tfor (const key in source) {\n\t\t\tif (noCopy(key, source[key])) {\n\t\t\t\ttarget[key] = source[key];\n\t\t\t} else if (isObject(source[key])) {\n\t\t\t\tif (!target[key]) {\n\t\t\t\t\tObject.assign(target, { [key]: {} }); \n\t\t\t\t}\n\t\t\t\tdeepMerge(target[key], source[key] as any);\n\t\t\t} else {\n\t\t\t\tObject.assign(target, { [key]: source[key] as any });\n\t\t\t}\n\t\t}\n\t}\n\t// @ts-ignore\n\treturn deepMerge(target, ...sources);\n}\n\n/**\n * Returns true if the two arrays have the same value for each of the elements\n */\nexport function deepEquals(arrayA: number[] | string[], arrayB: number[] | string[]): boolean {\n\treturn arrayA.length === arrayB.length && arrayA.every((element, index) => arrayB[index] === element);\n}\n\n/**\n * Convert an args array into an object.\n */\nexport function optionsFromArguments<T extends object>(\n\tdefaults: T,\n\targsArray: IArguments,\n\tkeys: string[] = [],\n\tobjKey?: string,\n): T {\n\tconst opts: any = {};\n\tconst args = Array.from(argsArray);\n\t// if the first argument is an object and has an object key\n\tif (isObject(args[0]) && objKey && !Reflect.has(args[0], objKey)) {\n\t\t// if it's not part of the defaults\n\t\tconst partOfDefaults = Object.keys(args[0]).some(key => Reflect.has(defaults, key));\n\t\tif (!partOfDefaults) {\n\t\t\t// merge that key\n\t\t\tdeepMerge(opts, { [objKey]: args[0] });\n\t\t\t// remove the obj key from the keys\n\t\t\tkeys.splice(keys.indexOf(objKey), 1);\n\t\t\t// shift the first argument off\n\t\t\targs.shift();\n\t\t}\n\t}\n\tif (args.length === 1 && isObject(args[0])) {\n\t\tdeepMerge(opts, args[0]);\n\t} else {\n\t\tfor (let i = 0; i < keys.length; i++) {\n\t\t\tif (isDefined(args[i])) {\n\t\t\t\topts[keys[i]] = args[i];\n\t\t\t}\n\t\t}\n\t}\n\treturn deepMerge(defaults, opts);\n}\n\n/**\n * Return this instances default values by calling Constructor.getDefaults()\n */\nexport function getDefaultsFromInstance<T>(instance: T): BaseToneOptions {\n\ttype ToneClass = {\n\t\tconstructor: ToneClass;\n\t\tgetDefaults: () => BaseToneOptions;\n\t} & T;\n\n\treturn (instance as ToneClass).constructor.getDefaults();\n}\n\n/**\n * Returns the fallback if the given object is undefined.\n * Take an array of arguments and return a formatted options object.\n */\nexport function defaultArg<T>(given: T, fallback: T): T {\n\tif (isUndef(given)) {\n\t\treturn fallback;\n\t} else {\n\t\treturn given;\n\t}\n}\n\n/**\n * Remove all of the properties belonging to omit from obj.\n */\nexport function omitFromObject<T extends object, O extends string[]>(obj: T, omit: O): Omit<T, keyof O> {\n\tomit.forEach(prop => {\n\t\tif (Reflect.has(obj, prop)) {\n\t\t\tdelete obj[prop];\n\t\t}\n\t});\n\treturn obj;\n}\n","/**\n * Tone.js\n * @author Yotam Mann\n * @license http://opensource.org/licenses/MIT MIT License\n * @copyright 2014-2019 Yotam Mann\n */\nimport { version } from \"../version\";\nimport { theWindow } from \"./context/AudioContext\";\nimport { assert, log } from \"./util/Debug\";\n\n//-------------------------------------\n// \tTONE\n//-------------------------------------\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface BaseToneOptions {}\n\n/**\n * @class  Tone is the base class of all other classes.\n * @constructor\n */\nexport abstract class Tone {\n\n\t/**\n\t * The version number semver\n\t */\n\tstatic version: string = version;\n\n\t/**\n\t * The name of the class\n\t */\n\tprotected abstract name: string;\n\n\t/**\n\t * Returns all of the default options belonging to the class.\n\t */\n\tstatic getDefaults(): BaseToneOptions {\n\t\treturn {};\n\t}\n\n\t//-------------------------------------\n\t// \tDEBUGGING\n\t//-------------------------------------\n\n\t/**\n\t * Set this debug flag to log all events that happen in this class.\n\t */\n\tdebug: boolean = false;\n\n\t/**\n\t * Prints the outputs to the console log for debugging purposes.\n\t * Prints the contents only if either the object has a property\n\t * called `debug` set to true, or a variable called TONE_DEBUG_CLASS\n\t * is set to the name of the class.\n\t * @example\n\t * import { Oscillator } from \"tone\";\n\t * const osc = new Oscillator();\n\t * // prints all logs originating from this oscillator\n\t * osc.debug = true;\n\t * // calls to start/stop will print in the console\n\t * osc.start();\n\t */\n\tprotected log(...args: any[]): void {\n\t\t// if the object is either set to debug = true\n\t\t// or if there is a string on the Tone.global.with the class name\n\t\tif (this.debug || (theWindow && this.toString() === theWindow.TONE_DEBUG_CLASS)) {\n\t\t\tlog(this, ...args);\n\t\t}\n\t}\n\n\t/**\n\t * Assert that the statement is true, otherwise invoke the error.\n\t * @param statement\n\t * @param error The message which is passed into an Error\n\t */\n\tprotected assert(statement: boolean, error: string): void {\n\t\tassert(statement, error);\n\t}\n\n\t//-------------------------------------\n\t// \tDISPOSING\n\t//-------------------------------------\n\n\t/**\n\t * Indicates if the instance was disposed\n\t */\n\tprivate _wasDisposed: boolean = false;\n\n\t/**\n\t * disconnect and dispose.\n\t */\n\tdispose(): this {\n\t\tthis._wasDisposed = true;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Indicates if the instance was disposed. 'Disposing' an\n\t * instance means that all of the Web Audio nodes that were\n\t * created for the instance are disconnected and freed for garbage collection.\n\t */\n\tget disposed(): boolean {\n\t\treturn this._wasDisposed;\n\t}\n\n\t/**\n\t * Convert the class to a string\n\t * @example\n\t * import { Oscillator } from \"tone\";\n\t * const osc = new Oscillator();\n\t * console.log(osc.toString());\n\t */\n\ttoString(): string {\n\t\treturn this.name;\n\t}\n}\n","/**\n * The threshold for correctness for operators. Less than one sample even \n * at very high sampling rates (e.g. `1e-6 < 1 / 192000`).\n */\nconst EPSILON = 1e-6;\n\n/**\n * Test if A is greater than B\n */\nexport function GT(a: number, b: number): boolean {\n\treturn a > b + EPSILON;\n}\n\n/**\n * Test if A is greater than or equal to B\n */\nexport function GTE(a: number, b: number): boolean {\n\treturn GT(a, b) || EQ(a, b);\n}\n\n/**\n * Test if A is less than B\n */\nexport function LT(a: number, b: number): boolean {\n\treturn a + EPSILON < b;\n}\n\n/**\n * Test if A is less than B\n */\nexport function EQ(a: number, b: number): boolean {\n\treturn Math.abs(a - b) < EPSILON;\n}\n","import { Tone } from \"../Tone\";\nimport { Seconds } from \"../type/Units\";\nimport { optionsFromArguments } from \"./Defaults\";\nimport { EQ, GT, GTE, LT } from \"./Math\";\n\ntype TimelineSearchParam = \"ticks\" | \"time\";\n\n/**\n * The options object for Timeline\n */\ninterface TimelineOptions {\n\tmemory: number;\n\tincreasing: boolean;\n}\n\n/**\n * An event must have a time number\n */\nexport interface TimelineEvent {\n\ttime: number;\n}\n\n/**\n * A Timeline class for scheduling and maintaining state\n * along a timeline. All events must have a \"time\" property.\n * Internally, events are stored in time order for fast\n * retrieval.\n */\nexport class Timeline<GenericEvent extends TimelineEvent> extends Tone {\n\n\treadonly name: string = \"Timeline\";\n\n\t/**\n\t * The memory of the timeline, i.e.\n\t * how many events in the past it will retain\n\t */\n\tmemory: number;\n\n\t/**\n\t * The array of scheduled timeline events\n\t */\n\tprotected _timeline: GenericEvent[] = [];\n\n\t/**\n\t * If the time value must always be greater than or equal to the last \n\t * element on the list. \n\t */\n\tincreasing: boolean;\n\n\t/**\n\t * @param memory The number of previous events that are retained.\n\t */\n\tconstructor(memory?: number);\n\tconstructor(options?: Partial<TimelineOptions>);\n\tconstructor() {\n\t\tsuper();\n\t\tconst options = optionsFromArguments(Timeline.getDefaults(), arguments, [\"memory\"]);\n\n\t\tthis.memory = options.memory;\n\t\tthis.increasing = options.increasing;\n\t}\n\n\tstatic getDefaults(): TimelineOptions {\n\t\treturn {\n\t\t\tmemory: Infinity,\n\t\t\tincreasing: false,\n\t\t};\n\t}\n\n\t/**\n\t * The number of items in the timeline.\n\t */\n\tget length(): number {\n\t\treturn this._timeline.length;\n\t}\n\n\t/**\n\t * Insert an event object onto the timeline. Events must have a \"time\" attribute.\n\t * @param event  The event object to insert into the timeline.\n\t */\n\tadd(event: GenericEvent): this {\n\t\t// the event needs to have a time attribute\n\t\tthis.assert(Reflect.has(event, \"time\"), \"Timeline: events must have a time attribute\");\n\t\tevent.time = event.time.valueOf();\n\t\tif (this.increasing && this.length) {\n\t\t\tconst lastValue = this._timeline[this.length - 1] as GenericEvent;\n\t\t\tthis.assert(lastValue.time <= event.time, \"The time must be greater than or equal to the last scheduled time\");\n\t\t\tthis._timeline.push(event);\n\t\t} else {\n\t\t\tconst index = this._search(event.time);\n\t\t\tthis._timeline.splice(index + 1, 0, event);\n\t\t}\n\t\t// if the length is more than the memory, remove the previous ones\n\t\tif (this.length > this.memory) {\n\t\t\tconst diff = this.length - this.memory;\n\t\t\tthis._timeline.splice(0, diff);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Remove an event from the timeline.\n\t * @param  {Object}  event  The event object to remove from the list.\n\t * @returns {Timeline} this\n\t */\n\tremove(event: GenericEvent): this {\n\t\tconst index = this._timeline.indexOf(event);\n\t\tif (index !== -1) {\n\t\t\tthis._timeline.splice(index, 1);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the nearest event whose time is less than or equal to the given time.\n\t * @param  time  The time to query.\n\t */\n\tget(time: number, param: TimelineSearchParam = \"time\"): GenericEvent | null {\n\t\tconst index = this._search(time, param);\n\t\tif (index !== -1) {\n\t\t\treturn this._timeline[index];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * Return the first event in the timeline without removing it\n\t * @returns {Object} The first event object\n\t */\n\tpeek(): GenericEvent | undefined {\n\t\treturn this._timeline[0];\n\t}\n\n\t/**\n\t * Return the first event in the timeline and remove it\n\t */\n\tshift(): GenericEvent | undefined {\n\t\treturn this._timeline.shift();\n\t}\n\n\t/**\n\t * Get the event which is scheduled after the given time.\n\t * @param  time  The time to query.\n\t */\n\tgetAfter(time: number, param: TimelineSearchParam = \"time\"): GenericEvent | null {\n\t\tconst index = this._search(time, param);\n\t\tif (index + 1 < this._timeline.length) {\n\t\t\treturn this._timeline[index + 1];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * Get the event before the event at the given time.\n\t * @param  time  The time to query.\n\t */\n\tgetBefore(time: number): GenericEvent | null {\n\t\tconst len = this._timeline.length;\n\t\t// if it's after the last item, return the last item\n\t\tif (len > 0 && this._timeline[len - 1].time < time) {\n\t\t\treturn this._timeline[len - 1];\n\t\t}\n\t\tconst index = this._search(time);\n\t\tif (index - 1 >= 0) {\n\t\t\treturn this._timeline[index - 1];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * Cancel events at and after the given time\n\t * @param  after  The time to query.\n\t */\n\tcancel(after: number): this {\n\t\tif (this._timeline.length > 1) {\n\t\t\tlet index = this._search(after);\n\t\t\tif (index >= 0) {\n\t\t\t\tif (EQ(this._timeline[index].time, after)) {\n\t\t\t\t\t// get the first item with that time\n\t\t\t\t\tfor (let i = index; i >= 0; i--) {\n\t\t\t\t\t\tif (EQ(this._timeline[i].time, after)) {\n\t\t\t\t\t\t\tindex = i;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis._timeline = this._timeline.slice(0, index);\n\t\t\t\t} else {\n\t\t\t\t\tthis._timeline = this._timeline.slice(0, index + 1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._timeline = [];\n\t\t\t}\n\t\t} else if (this._timeline.length === 1) {\n\t\t\t// the first item's time\n\t\t\tif (GTE(this._timeline[0].time, after)) {\n\t\t\t\tthis._timeline = [];\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Cancel events before or equal to the given time.\n\t * @param  time  The time to cancel before.\n\t */\n\tcancelBefore(time: number): this {\n\t\tconst index = this._search(time);\n\t\tif (index >= 0) {\n\t\t\tthis._timeline = this._timeline.slice(index + 1);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the previous event if there is one. null otherwise\n\t * @param  event The event to find the previous one of\n\t * @return The event right before the given event\n\t */\n\tpreviousEvent(event: GenericEvent): GenericEvent | null {\n\t\tconst index = this._timeline.indexOf(event);\n\t\tif (index > 0) {\n\t\t\treturn this._timeline[index - 1];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * Does a binary search on the timeline array and returns the\n\t * nearest event index whose time is after or equal to the given time.\n\t * If a time is searched before the first index in the timeline, -1 is returned.\n\t * If the time is after the end, the index of the last item is returned.\n\t * @param  time\n\t */\n\tprotected _search(time: number, param: TimelineSearchParam = \"time\"): number {\n\t\tif (this._timeline.length === 0) {\n\t\t\treturn -1;\n\t\t}\n\t\tlet beginning = 0;\n\t\tconst len = this._timeline.length;\n\t\tlet end = len;\n\t\tif (len > 0 && this._timeline[len - 1][param] <= time) {\n\t\t\treturn len - 1;\n\t\t}\n\t\twhile (beginning < end) {\n\t\t\t// calculate the midpoint for roughly equal partition\n\t\t\tlet midPoint = Math.floor(beginning + (end - beginning) / 2);\n\t\t\tconst event = this._timeline[midPoint];\n\t\t\tconst nextEvent = this._timeline[midPoint + 1];\n\t\t\tif (EQ(event[param], time)) {\n\t\t\t\t// choose the last one that has the same time\n\t\t\t\tfor (let i = midPoint; i < this._timeline.length; i++) {\n\t\t\t\t\tconst testEvent = this._timeline[i];\n\t\t\t\t\tif (EQ(testEvent[param], time)) {\n\t\t\t\t\t\tmidPoint = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn midPoint;\n\t\t\t} else if (LT(event[param], time) && GT(nextEvent[param], time)) {\n\t\t\t\treturn midPoint;\n\t\t\t} else if (GT(event[param], time)) {\n\t\t\t\t// search lower\n\t\t\t\tend = midPoint;\n\t\t\t} else {\n\t\t\t\t// search upper\n\t\t\t\tbeginning = midPoint + 1;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\n\t/**\n\t * Internal iterator. Applies extra safety checks for\n\t * removing items from the array.\n\t */\n\tprivate _iterate(\n\t\tcallback: (event: GenericEvent) => void,\n\t\tlowerBound = 0, upperBound = this._timeline.length - 1,\n\t): void {\n\t\tthis._timeline.slice(lowerBound, upperBound + 1).forEach(callback);\n\t}\n\n\t/**\n\t * Iterate over everything in the array\n\t * @param  callback The callback to invoke with every item\n\t */\n\tforEach(callback: (event: GenericEvent) => void): this {\n\t\tthis._iterate(callback);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Iterate over everything in the array at or before the given time.\n\t * @param  time The time to check if items are before\n\t * @param  callback The callback to invoke with every item\n\t */\n\tforEachBefore(time: Seconds, callback: (event: GenericEvent) => void): this {\n\t\t// iterate over the items in reverse so that removing an item doesn't break things\n\t\tconst upperBound = this._search(time);\n\t\tif (upperBound !== -1) {\n\t\t\tthis._iterate(callback, 0, upperBound);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Iterate over everything in the array after the given time.\n\t * @param  time The time to check if items are before\n\t * @param  callback The callback to invoke with every item\n\t */\n\tforEachAfter(time: Seconds, callback: (event: GenericEvent) => void): this {\n\t\t// iterate over the items in reverse so that removing an item doesn't break things\n\t\tconst lowerBound = this._search(time);\n\t\tthis._iterate(callback, lowerBound + 1);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Iterate over everything in the array between the startTime and endTime.\n\t * The timerange is inclusive of the startTime, but exclusive of the endTime.\n\t * range = [startTime, endTime).\n\t * @param  startTime The time to check if items are before\n\t * @param  endTime The end of the test interval.\n\t * @param  callback The callback to invoke with every item\n\t */\n\tforEachBetween(startTime: number, endTime: number, callback: (event: GenericEvent) => void): this {\n\t\tlet lowerBound = this._search(startTime);\n\t\tlet upperBound = this._search(endTime);\n\t\tif (lowerBound !== -1 && upperBound !== -1) {\n\t\t\tif (this._timeline[lowerBound].time !== startTime) {\n\t\t\t\tlowerBound += 1;\n\t\t\t}\n\t\t\t// exclusive of the end time\n\t\t\tif (this._timeline[upperBound].time === endTime) {\n\t\t\t\tupperBound -= 1;\n\t\t\t}\n\t\t\tthis._iterate(callback, lowerBound, upperBound);\n\t\t} else if (lowerBound === -1) {\n\t\t\tthis._iterate(callback, 0, upperBound);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Iterate over everything in the array at or after the given time. Similar to\n\t * forEachAfter, but includes the item(s) at the given time.\n\t * @param  time The time to check if items are before\n\t * @param  callback The callback to invoke with every item\n\t */\n\tforEachFrom(time: number, callback: (event: GenericEvent) => void): this {\n\t\t// iterate over the items in reverse so that removing an item doesn't break things\n\t\tlet lowerBound = this._search(time);\n\t\t// work backwards until the event time is less than time\n\t\twhile (lowerBound >= 0 && this._timeline[lowerBound].time >= time) {\n\t\t\tlowerBound--;\n\t\t}\n\t\tthis._iterate(callback, lowerBound + 1);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Iterate over everything in the array at the given time\n\t * @param  time The time to check if items are before\n\t * @param  callback The callback to invoke with every item\n\t */\n\tforEachAtTime(time: number, callback: (event: GenericEvent) => void): this {\n\t\t// iterate over the items in reverse so that removing an item doesn't break things\n\t\tconst upperBound = this._search(time);\n\t\tif (upperBound !== -1) {\n\t\t\tthis._iterate(event => {\n\t\t\t\tif (event.time === time) {\n\t\t\t\t\tcallback(event);\n\t\t\t\t}\n\t\t\t}, 0, upperBound);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._timeline = [];\n\t\treturn this;\n\t}\n}\n","//-------------------------------------\n// INITIALIZING NEW CONTEXT\n//-------------------------------------\n\ntype Context = import(\"./Context\").Context;\n\n/**\n * Array of callbacks to invoke when a new context is created\n */\nconst notifyNewContext: Array<(ctx: Context) => void> = [];\n\n/**\n * Used internally to setup a new Context\n */\nexport function onContextInit(cb: (ctx: Context) => void): void {\n\tnotifyNewContext.push(cb);\n}\n\n/**\n * Invoke any classes which need to also be initialized when a new context is created.\n */\nexport function initializeContext(ctx: Context): void {\n\t// add any additional modules\n\tnotifyNewContext.forEach(cb => cb(ctx));\n}\n\n/**\n * Array of callbacks to invoke when a new context is created\n */\nconst notifyCloseContext: Array<(ctx: Context) => void> = [];\n\n/**\n * Used internally to tear down a Context\n */\nexport function onContextClose(cb: (ctx: Context) => void): void {\n\tnotifyCloseContext.push(cb);\n}\n\nexport function closeContext(ctx: Context): void {\n\t// add any additional modules\n\tnotifyCloseContext.forEach(cb => cb(ctx));\n}\n","import { Tone } from \"../Tone\";\nimport { isUndef } from \"./TypeCheck\";\n\nexport interface EmitterEventObject {\n\t[event: string]: Array<(...args: any[]) => void>;\n}\n\n/**\n * Emitter gives classes which extend it\n * the ability to listen for and emit events.\n * Inspiration and reference from Jerome Etienne's [MicroEvent](https://github.com/jeromeetienne/microevent.js).\n * MIT (c) 2011 Jerome Etienne.\n */\nexport class Emitter<EventType extends string = string> extends Tone {\n\n\treadonly name: string = \"Emitter\";\n\n\t/**\n\t * Private container for the events\n\t */\n\tprivate _events?: EmitterEventObject;\n\n\t/**\n\t * Bind a callback to a specific event.\n\t * @param  event     The name of the event to listen for.\n\t * @param  callback  The callback to invoke when the event is emitted\n\t */\n\ton(event: EventType, callback: (...args: any[]) => void): this {\n\t\t// split the event\n\t\tconst events = event.split(/\\W+/);\n\t\tevents.forEach(eventName => {\n\t\t\tif (isUndef(this._events)) {\n\t\t\t\tthis._events = {};\n\t\t\t}\n\t\t\tif (!this._events.hasOwnProperty(eventName)) {\n\t\t\t\tthis._events[eventName] = [];\n\t\t\t}\n\t\t\tthis._events[eventName].push(callback);\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Bind a callback which is only invoked once\n\t * @param  event     The name of the event to listen for.\n\t * @param  callback  The callback to invoke when the event is emitted\n\t */\n\tonce(event: EventType, callback: (...args: any[]) => void): this {\n\t\tconst boundCallback = (...args: any[]) => {\n\t\t\t// invoke the callback\n\t\t\tcallback(...args);\n\t\t\t// remove the event\n\t\t\tthis.off(event, boundCallback);\n\t\t};\n\t\tthis.on(event, boundCallback);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Remove the event listener.\n\t * @param  event     The event to stop listening to.\n\t * @param  callback  The callback which was bound to the event with Emitter.on.\n\t *                   If no callback is given, all callbacks events are removed.\n\t */\n\toff(event: EventType, callback?: (...args: any[]) => void): this {\n\t\tconst events = event.split(/\\W+/);\n\t\tevents.forEach(eventName => {\n\t\t\tif (isUndef(this._events)) {\n\t\t\t\tthis._events = {};\n\t\t\t}\n\t\t\tif (this._events.hasOwnProperty(event)) {\n\t\t\t\tif (isUndef(callback)) {\n\t\t\t\t\tthis._events[event] = [];\n\t\t\t\t} else {\n\t\t\t\t\tconst eventList = this._events[event];\n\t\t\t\t\tfor (let i = 0; i < eventList.length; i++) {\n\t\t\t\t\t\tif (eventList[i] === callback) {\n\t\t\t\t\t\t\teventList.splice(i, 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Invoke all of the callbacks bound to the event\n\t * with any arguments passed in.\n\t * @param  event  The name of the event.\n\t * @param args The arguments to pass to the functions listening.\n\t */\n\temit(event, ...args: any[]): this {\n\t\tif (this._events) {\n\t\t\tif (this._events.hasOwnProperty(event)) {\n\t\t\t\tconst eventList = this._events[event].slice(0);\n\t\t\t\tfor (let i = 0, len = eventList.length; i < len; i++) {\n\t\t\t\t\teventList[i].apply(this, args);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add Emitter functions (on/off/emit) to the object\n\t */\n\tstatic mixin(constr: any): void {\n\t\t// instance._events = {};\n\t\t[\"on\", \"once\", \"off\", \"emit\"].forEach(name => {\n\t\t\tconst property = Object.getOwnPropertyDescriptor(Emitter.prototype, name) as PropertyDescriptor;\n\t\t\tObject.defineProperty(constr.prototype, name, property);\n\t\t});\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._events = undefined;\n\t\treturn this;\n\t}\n}\n","import { Seconds } from \"../type/Units\";\nimport { Emitter } from \"../util/Emitter\";\nimport { AnyAudioContext } from \"./AudioContext\";\n\ntype Draw = import(\"../util/Draw\").Draw;\ntype Destination = import(\"./Destination\").Destination;\ntype Transport = import(\"../clock/Transport\").Transport;\ntype BaseAudioContextSubset = import(\"./Context\").BaseAudioContextSubset;\n\nexport abstract class BaseContext extends Emitter<\"statechange\" | \"tick\"> implements BaseAudioContextSubset {\n\n\t//---------------------------\n\t// BASE AUDIO CONTEXT METHODS\n\t//---------------------------\n\tabstract createAnalyser(): AnalyserNode\n\n\tabstract createOscillator(): OscillatorNode\n\n\tabstract createBufferSource(): AudioBufferSourceNode\n\n\tabstract createBiquadFilter(): BiquadFilterNode\n\n\tabstract createBuffer(_numberOfChannels: number, _length: number, _sampleRate: number): AudioBuffer\n\n\tabstract createChannelMerger(_numberOfInputs?: number | undefined): ChannelMergerNode\n\n\tabstract createChannelSplitter(_numberOfOutputs?: number | undefined): ChannelSplitterNode\n\n\tabstract createConstantSource(): ConstantSourceNode\n\n\tabstract createConvolver(): ConvolverNode\n\n\tabstract createDelay(_maxDelayTime?: number | undefined): DelayNode\n\n\tabstract createDynamicsCompressor(): DynamicsCompressorNode\n\n\tabstract createGain(): GainNode\n\n\tabstract createIIRFilter(_feedForward: number[] | Float32Array, _feedback: number[] | Float32Array): IIRFilterNode\n\n\tabstract createPanner(): PannerNode\n\n\tabstract createPeriodicWave(\n\t\t_real: number[] | Float32Array,\n\t\t_imag: number[] | Float32Array,\n\t\t_constraints?: PeriodicWaveConstraints | undefined,\n\t): PeriodicWave\n\n\tabstract createStereoPanner(): StereoPannerNode\n\n\tabstract createWaveShaper(): WaveShaperNode\n\n\tabstract createMediaStreamSource(_stream: MediaStream): MediaStreamAudioSourceNode\n\n\tabstract decodeAudioData(_audioData: ArrayBuffer): Promise<AudioBuffer>\n\n\t//---------------------------\n\t// TONE AUDIO CONTEXT METHODS\n\t//---------------------------\n\n\tabstract createAudioWorkletNode(\n\t\t_name: string, \n\t\t_options?: Partial<AudioWorkletNodeOptions>\n\t): AudioWorkletNode\n\n\tabstract get rawContext(): AnyAudioContext\n\n\tabstract async addAudioWorkletModule(_url: string, _name: string): Promise<void>\n\n\tabstract lookAhead: number;\n\n\tabstract resume(): Promise<void>\n\n\tabstract setTimeout(_fn: (...args: any[]) => void, _timeout: Seconds): number\n\n\tabstract clearTimeout(_id: number): this\n\n\tabstract setInterval(_fn: (...args: any[]) => void, _interval: Seconds): number\n\n\tabstract clearInterval(_id: number): this\n\n\tabstract getConstant(_val: number): AudioBufferSourceNode\n\n\tabstract get currentTime(): Seconds\n\n\tabstract get state(): AudioContextState\n\n\tabstract get sampleRate(): number\n\n\tabstract get listener(): AudioListener\n\n\tabstract get transport(): Transport\n\n\tabstract get draw(): Draw\n\n\tabstract get destination(): Destination\n\n\tabstract now(): Seconds\n\n\tabstract immediate(): Seconds\n\n\treadonly isOffline: boolean = false;\n}\n","import { Ticker, TickerClockSource } from \"../clock/Ticker\";\nimport { Seconds } from \"../type/Units\";\nimport { isAudioContext } from \"../util/AdvancedTypeCheck\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Omit } from \"../util/Interface\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isDefined, isString } from \"../util/TypeCheck\";\nimport { AnyAudioContext, createAudioContext, createAudioWorkletNode } from \"./AudioContext\";\nimport { closeContext, initializeContext } from \"./ContextInitialization\";\nimport { BaseContext } from \"./BaseContext\";\n\ntype Transport = import(\"../clock/Transport\").Transport;\ntype Destination = import(\"./Destination\").Destination;\ntype Draw = import(\"../util/Draw\").Draw;\n\nexport type ContextLatencyHint = AudioContextLatencyCategory | \"fastest\";\n\n// these are either not used in Tone.js or deprecated and not implemented.\nexport type ExcludedFromBaseAudioContext = \"onstatechange\" | \"addEventListener\" |\n\"removeEventListener\" | \"listener\" | \"dispatchEvent\" | \"audioWorklet\" | \"destination\" | \"createScriptProcessor\";\n// \"createMediaStreamSource\" | \"createMediaElementSource\" | \"createMediaStreamTrackSource\" |\n// \"baseLatency\" | \"suspend\" |\n\n// the subset of the BaseAudioContext which Tone.Context implements.\nexport type BaseAudioContextSubset = Omit<BaseAudioContext, ExcludedFromBaseAudioContext>;\n\nexport interface ContextOptions {\n\tclockSource: TickerClockSource;\n\tlatencyHint: ContextLatencyHint;\n\tlookAhead: Seconds;\n\tupdateInterval: Seconds;\n\tcontext: AnyAudioContext;\n}\n\nexport interface ContextTimeoutEvent {\n\tcallback: (...args: any[]) => void;\n\tid: number;\n\ttime: Seconds;\n}\n\n/**\n * Wrapper around the native AudioContext.\n * @category Core\n */\nexport class Context extends BaseContext {\n\n\treadonly name: string = \"Context\";\n\n\t/**\n\t * The amount of time into the future events are scheduled. Giving Web Audio\n\t * a short amount of time into the future to schedule events can reduce clicks and\n\t * improve performance. This value can be set to 0 to get the lowest latency.\n\t */\n\tlookAhead: Seconds;\n\n\t/**\n\t * private reference to the BaseAudioContext\n\t */\n\tprotected readonly _context: AnyAudioContext;\n\n\t/**\n\t * A reliable callback method\n\t */\n\tprivate readonly _ticker: Ticker;\n\n\t/**\n\t * The default latency hint\n\t */\n\tprivate _latencyHint: ContextLatencyHint | Seconds;\n\n\t/**\n\t * An object containing all of the constants AudioBufferSourceNodes\n\t */\n\tprivate _constants = new Map<number, AudioBufferSourceNode>();\n\n\t/**\n\t * All of the setTimeout events.\n\t */\n\tprivate _timeouts: Timeline<ContextTimeoutEvent> = new Timeline();\n\n\t/**\n\t * The timeout id counter\n\t */\n\tprivate _timeoutIds = 0;\n\n\t/**\n\t * A reference the Transport singleton belonging to this context\n\t */\n\tprivate _transport!: Transport;\n\t\n\t/**\n\t * A reference the Destination singleton belonging to this context\n\t */\n\tprivate _destination!: Destination;\n\n\t/**\n\t * A reference the Transport singleton belonging to this context\n\t */\n\tprivate _draw!: Draw;\n\n\t/**\n\t * Private indicator if the context has been initialized\n\t */\n\tprivate _initialized: boolean = false;\n\n\t/**\n\t * Indicates if the context is an OfflineAudioContext or an AudioContext\n\t */\n\treadonly isOffline: boolean = false;\n\n\tconstructor(context?: AnyAudioContext);\n\tconstructor(options?: Partial<ContextOptions>);\n\tconstructor() {\n\t\tsuper();\n\t\tconst options = optionsFromArguments(Context.getDefaults(), arguments, [\"context\"]);\n\n\t\tif (options.context) {\n\t\t\tthis._context = options.context;\n\t\t} else {\n\t\t\tthis._context = createAudioContext();\n\t\t}\n\t\tthis._latencyHint = options.latencyHint;\n\t\tthis.lookAhead = options.lookAhead;\n\n\t\tthis._ticker = new Ticker(this.emit.bind(this, \"tick\"), options.clockSource, options.updateInterval);\n\t\tthis.on(\"tick\", this._timeoutLoop.bind(this));\n\n\t\t// fwd events from the context\n\t\tthis._context.onstatechange = () => {\n\t\t\tthis.emit(\"statechange\", this.state);\n\t\t};\n\t}\n\n\tstatic getDefaults(): ContextOptions {\n\t\treturn {\n\t\t\tclockSource: \"worker\",\n\t\t\tlatencyHint: \"interactive\",\n\t\t\tlookAhead: 0.1,\n\t\t\tupdateInterval: 0.05,\n\t\t} as ContextOptions;\n\t}\n\n\t/**\n\t * Finish setting up the context. **You usually do not need to do this manually.**\n\t */\n\tprivate initialize(): this {\n\t\tif (!this._initialized) {\n\t\t\t// add any additional modules\n\t\t\tinitializeContext(this);\n\t\t\tthis._initialized = true;\n\t\t}\n\t\treturn this;\n\t}\n\n\t//---------------------------\n\t// BASE AUDIO CONTEXT METHODS\n\t//---------------------------\n\n\tcreateAnalyser(): AnalyserNode {\n\t\treturn this._context.createAnalyser();\n\t}\n\tcreateOscillator(): OscillatorNode {\n\t\treturn this._context.createOscillator();\n\t}\n\tcreateBufferSource(): AudioBufferSourceNode {\n\t\treturn this._context.createBufferSource();\n\t}\n\tcreateBiquadFilter(): BiquadFilterNode {\n\t\treturn this._context.createBiquadFilter();\n\t}\n\tcreateBuffer(numberOfChannels: number, length: number, sampleRate: number): AudioBuffer {\n\t\treturn this._context.createBuffer(numberOfChannels, length, sampleRate);\n\t}\n\tcreateChannelMerger(numberOfInputs?: number | undefined): ChannelMergerNode {\n\t\treturn this._context.createChannelMerger(numberOfInputs);\n\t}\n\tcreateChannelSplitter(numberOfOutputs?: number | undefined): ChannelSplitterNode {\n\t\treturn this._context.createChannelSplitter(numberOfOutputs);\n\t}\n\tcreateConstantSource(): ConstantSourceNode {\n\t\treturn this._context.createConstantSource();\n\t}\n\tcreateConvolver(): ConvolverNode {\n\t\treturn this._context.createConvolver();\n\t}\n\tcreateDelay(maxDelayTime?: number | undefined): DelayNode {\n\t\treturn this._context.createDelay(maxDelayTime);\n\t}\n\tcreateDynamicsCompressor(): DynamicsCompressorNode {\n\t\treturn this._context.createDynamicsCompressor();\n\t}\n\tcreateGain(): GainNode {\n\t\treturn this._context.createGain();\n\t}\n\tcreateIIRFilter(feedForward: number[] | Float32Array, feedback: number[] | Float32Array): IIRFilterNode {\n\t\t// @ts-ignore\n\t\treturn this._context.createIIRFilter(feedForward, feedback);\n\t}\n\tcreatePanner(): PannerNode {\n\t\treturn this._context.createPanner();\n\t}\n\tcreatePeriodicWave(\n\t\treal: number[] | Float32Array,\n\t\timag: number[] | Float32Array,\n\t\tconstraints?: PeriodicWaveConstraints | undefined,\n\t): PeriodicWave {\n\t\treturn this._context.createPeriodicWave(real, imag, constraints);\n\t}\n\tcreateStereoPanner(): StereoPannerNode {\n\t\treturn this._context.createStereoPanner();\n\t}\n\tcreateWaveShaper(): WaveShaperNode {\n\t\treturn this._context.createWaveShaper();\n\t}\n\tcreateMediaStreamSource(stream: MediaStream): MediaStreamAudioSourceNode {\n\t\tif (isAudioContext(this._context)) {\n\t\t\treturn this._context.createMediaStreamSource(stream);\n\t\t} else {\n\t\t\tthrow new Error(\"Only available on online audio context\");\n\t\t}\n\t}\n\tdecodeAudioData(audioData: ArrayBuffer): Promise<AudioBuffer> {\n\t\treturn this._context.decodeAudioData(audioData);\n\t}\n\n\t/**\n\t * The current time in seconds of the AudioContext.\n\t */\n\tget currentTime(): Seconds {\n\t\treturn this._context.currentTime;\n\t}\n\t/**\n\t * The current time in seconds of the AudioContext.\n\t */\n\tget state(): AudioContextState {\n\t\treturn this._context.state;\n\t}\n\t/**\n\t * The current time in seconds of the AudioContext.\n\t */\n\tget sampleRate(): number {\n\t\treturn this._context.sampleRate;\n\t}\n\t/**\n\t * The listener\n\t */\n\tget listener(): AudioListener {\n\t\treturn this._context.listener;\n\t}\n\n\t/**\n\t * There is only one Transport per Context. It is created on initialization.\n\t */\n\tget transport(): Transport {\n\t\tthis.initialize();\n\t\treturn this._transport;\n\t}\n\tset transport(t: Transport) {\n\t\tthis.assert(!this._initialized, \"The transport cannot be set after initialization.\");\n\t\tthis._transport = t;\n\t}\n\n\t/**\n\t * This is the Draw object for the context which is useful for synchronizing the draw frame with the Tone.js clock.\n\t */\n\tget draw(): Draw {\n\t\tthis.initialize();\n\t\treturn this._draw;\n\t}\n\tset draw(d) {\n\t\tthis.assert(!this._initialized, \"Draw cannot be set after initialization.\");\n\t\tthis._draw = d;\n\t}\n\n\t/**\n\t * A reference to the Context's destination node.\n\t */\n\tget destination(): Destination {\n\t\tthis.initialize();\n\t\treturn this._destination;\n\t}\n\tset destination(d: Destination) {\n\t\tthis.assert(!this._initialized, \"The destination cannot be set after initialization.\");\n\t\tthis._destination = d;\n\t}\n\n\t//--------------------------------------------\n\t// AUDIO WORKLET\n\t//--------------------------------------------\n\n\t/**\n\t * Maps a module name to promise of the addModule method\n\t */\n\tprivate _workletModules: Map<string, Promise<void>> = new Map()\n\n\t/**\n\t * Create an audio worklet node from a name and options. The module\n\t * must first be loaded using [[addAudioWorkletModule]]. \n\t */\n\tcreateAudioWorkletNode(\n\t\tname: string, \n\t\toptions?: Partial<AudioWorkletNodeOptions>\n\t): AudioWorkletNode {\n\t\treturn createAudioWorkletNode(this.rawContext, name, options);\n\t}\n\t\n\t/**\n\t * Add an AudioWorkletProcessor module\n\t * @param url The url of the module\n\t * @param name The name of the module\n\t */\n\tasync addAudioWorkletModule(url: string, name: string): Promise<void> {\n\t\tthis.assert(isDefined(this.rawContext.audioWorklet), \"AudioWorkletNode is only available in a secure context (https or localhost)\");\n\t\tif (!this._workletModules.has(name)) {\n\t\t\tthis._workletModules.set(name, this.rawContext.audioWorklet.addModule(url));\n\t\t}\n\t\tawait this._workletModules.get(name);\n\t}\n\n\t/**\n\t * Returns a promise which resolves when all of the worklets have been loaded on this context\n\t */\n\tprotected async workletsAreReady(): Promise<void> {\n\t\tconst promises: Promise<void>[] = [];\n\t\tthis._workletModules.forEach(promise => promises.push(promise));\n\t\tawait Promise.all(promises);\n\t}\n\n\t//---------------------------\n\t// TICKER\n\t//---------------------------\n\n\t/**\n\t * How often the interval callback is invoked.\n\t * This number corresponds to how responsive the scheduling\n\t * can be. context.updateInterval + context.lookAhead gives you the\n\t * total latency between scheduling an event and hearing it.\n\t */\n\tget updateInterval(): Seconds {\n\t\treturn this._ticker.updateInterval;\n\t}\n\tset updateInterval(interval: Seconds) {\n\t\tthis._ticker.updateInterval = interval;\n\t}\n\n\t/**\n\t * What the source of the clock is, either \"worker\" (default),\n\t * \"timeout\", or \"offline\" (none).\n\t */\n\tget clockSource(): TickerClockSource {\n\t\treturn this._ticker.type;\n\t}\n\tset clockSource(type: TickerClockSource) {\n\t\tthis._ticker.type = type;\n\t}\n\n\t/**\n\t * The type of playback, which affects tradeoffs between audio\n\t * output latency and responsiveness.\n\t * In addition to setting the value in seconds, the latencyHint also\n\t * accepts the strings \"interactive\" (prioritizes low latency),\n\t * \"playback\" (prioritizes sustained playback), \"balanced\" (balances\n\t * latency and performance), and \"fastest\" (lowest latency, might glitch more often).\n\t * @example\n\t * import * as Tone from \"tone\";\n\t * // set the latencyHint to prioritize smooth playback at the expensive of latency\n\t * Tone.context.latencyHint = \"playback\";\n\t */\n\tget latencyHint(): ContextLatencyHint | Seconds {\n\t\treturn this._latencyHint;\n\t}\n\tset latencyHint(hint: ContextLatencyHint | Seconds) {\n\t\tlet lookAheadValue = 0;\n\t\tthis._latencyHint = hint;\n\t\tif (isString(hint)) {\n\t\t\tswitch (hint) {\n\t\t\t\tcase \"interactive\":\n\t\t\t\t\tlookAheadValue = 0.1;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"playback\":\n\t\t\t\t\tlookAheadValue = 0.8;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"balanced\":\n\t\t\t\t\tlookAheadValue = 0.25;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"fastest\":\n\t\t\t\t\tlookAheadValue = 0.01;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tthis.lookAhead = lookAheadValue;\n\t\tthis.updateInterval = lookAheadValue / 2;\n\t}\n\n\t/**\n\t * The unwrapped AudioContext.\n\t */\n\tget rawContext(): AnyAudioContext {\n\t\treturn this._context;\n\t}\n\n\t/**\n\t * The current audio context time plus a short [[lookAhead]].\n\t */\n\tnow(): Seconds {\n\t\treturn this._context.currentTime + this.lookAhead;\n\t}\n\n\t/**\n\t * The current audio context time without the [[lookAhead]]. See [[now]]\n\t */\n\timmediate(): Seconds {\n\t\treturn this._context.currentTime;\n\t}\n\n\t/**\n\t * Starts the audio context from a suspended state. This is required\n\t * to initially start the AudioContext.\n\t */\n\tresume(): Promise<void> {\n\t\tif (this._context.state === \"suspended\" && isAudioContext(this._context)) {\n\t\t\treturn this._context.resume();\n\t\t} else {\n\t\t\treturn Promise.resolve();\n\t\t}\n\t}\n\n\t/**\n\t * Promise which is invoked when the context is running.\n\t * Tries to resume the context if it's not started.\n\t */\n\tasync close(): Promise<void> {\n\t\tif (isAudioContext(this._context)) {\n\t\t\tawait this._context.close();\n\t\t}\n\t\tif (this._initialized) {\n\t\t\tcloseContext(this);\n\t\t}\n\t}\n\n\t/**\n\t * Generate a looped buffer at some constant value.\n\t */\n\tgetConstant(val: number): AudioBufferSourceNode {\n\t\tif (this._constants.has(val)) {\n\t\t\treturn this._constants.get(val) as AudioBufferSourceNode;\n\t\t} else {\n\t\t\tconst buffer = this._context.createBuffer(1, 128, this._context.sampleRate);\n\t\t\tconst arr = buffer.getChannelData(0);\n\t\t\tfor (let i = 0; i < arr.length; i++) {\n\t\t\t\tarr[i] = val;\n\t\t\t}\n\t\t\tconst constant = this._context.createBufferSource();\n\t\t\tconstant.channelCount = 1;\n\t\t\tconstant.channelCountMode = \"explicit\";\n\t\t\tconstant.buffer = buffer;\n\t\t\tconstant.loop = true;\n\t\t\tconstant.start(0);\n\t\t\tthis._constants.set(val, constant);\n\t\t\treturn constant;\n\t\t}\n\t}\n\n\t/**\n\t * Clean up. Also closes the audio context.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._ticker.dispose();\n\t\tthis._timeouts.dispose();\n\t\tObject.keys(this._constants).map(val => this._constants[val].disconnect());\n\t\treturn this;\n\t}\n\n\t//---------------------------\n\t// TIMEOUTS\n\t//---------------------------\n\n\t/**\n\t * The private loop which keeps track of the context scheduled timeouts\n\t * Is invoked from the clock source\n\t */\n\tprivate _timeoutLoop(): void {\n\t\tconst now = this.now();\n\t\tlet firstEvent = this._timeouts.peek();\n\t\twhile (this._timeouts.length && firstEvent && firstEvent.time <= now) {\n\t\t\t// invoke the callback\n\t\t\tfirstEvent.callback();\n\t\t\t// shift the first event off\n\t\t\tthis._timeouts.shift();\n\t\t\t// get the next one\n\t\t\tfirstEvent = this._timeouts.peek();\n\t\t}\n\t}\n\n\t/**\n\t * A setTimeout which is guaranteed by the clock source.\n\t * Also runs in the offline context.\n\t * @param  fn       The callback to invoke\n\t * @param  timeout  The timeout in seconds\n\t * @returns ID to use when invoking Context.clearTimeout\n\t */\n\tsetTimeout(fn: (...args: any[]) => void, timeout: Seconds): number {\n\t\tthis._timeoutIds++;\n\t\tconst now = this.now();\n\t\tthis._timeouts.add({\n\t\t\tcallback: fn,\n\t\t\tid: this._timeoutIds,\n\t\t\ttime: now + timeout,\n\t\t});\n\t\treturn this._timeoutIds;\n\t}\n\n\t/**\n\t * Clears a previously scheduled timeout with Tone.context.setTimeout\n\t * @param  id  The ID returned from setTimeout\n\t */\n\tclearTimeout(id: number): this {\n\t\tthis._timeouts.forEach(event => {\n\t\t\tif (event.id === id) {\n\t\t\t\tthis._timeouts.remove(event);\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clear the function scheduled by [[setInterval]]\n\t */\n\tclearInterval(id: number): this {\n\t\treturn this.clearTimeout(id);\n\t}\n\n\t/**\n\t * Adds a repeating event to the context's callback clock\n\t */\n\tsetInterval(fn: (...args: any[]) => void, interval: Seconds): number {\n\t\tconst id = ++this._timeoutIds;\n\t\tconst intervalFn = () => {\n\t\t\tconst now = this.now();\n\t\t\tthis._timeouts.add({\n\t\t\t\tcallback: () => {\n\t\t\t\t\t// invoke the callback\n\t\t\t\t\tfn();\n\t\t\t\t\t// invoke the event to repeat it\n\t\t\t\t\tintervalFn();\n\t\t\t\t},\n\t\t\t\tid,\n\t\t\t\ttime: now + interval,\n\t\t\t});\n\t\t};\n\t\t// kick it off\n\t\tintervalFn();\n\t\treturn id;\n\t}\n}\n","import { BaseContext } from \"./BaseContext\";\nimport { Seconds } from \"../type/Units\";\nimport { AnyAudioContext } from \"./AudioContext\";\n\ntype Draw = import(\"../util/Draw\").Draw;\ntype Destination = import(\"./Destination\").Destination;\ntype Transport = import(\"../clock/Transport\").Transport;\n\nexport class DummyContext extends BaseContext {\n\t//---------------------------\n\t// BASE AUDIO CONTEXT METHODS\n\t//---------------------------\n\tcreateAnalyser(): AnalyserNode {\n\t\treturn {} as AnalyserNode;\n\t}\n\n\tcreateOscillator(): OscillatorNode {\n\t\treturn {} as OscillatorNode;\n\t}\n\n\tcreateBufferSource() {\n\t\treturn {} as AudioBufferSourceNode;\n\t}\n\n\tcreateBiquadFilter(): BiquadFilterNode {\n\t\treturn {} as BiquadFilterNode;\n\t}\n\n\tcreateBuffer(_numberOfChannels: number, _length: number, _sampleRate: number): AudioBuffer {\n\t\treturn {} as AudioBuffer;\n\t}\n\n\tcreateChannelMerger(_numberOfInputs?: number | undefined): ChannelMergerNode {\n\t\treturn {} as ChannelMergerNode;\n\t}\n\n\tcreateChannelSplitter(_numberOfOutputs?: number | undefined): ChannelSplitterNode {\n\t\treturn {} as ChannelSplitterNode;\n\t}\n\n\tcreateConstantSource(): ConstantSourceNode {\n\t\treturn {} as ConstantSourceNode;\n\t}\n\n\tcreateConvolver(): ConvolverNode {\n\t\treturn {} as ConvolverNode;\n\t}\n\n\tcreateDelay(_maxDelayTime?: number | undefined): DelayNode {\n\t\treturn {} as DelayNode;\n\t}\n\n\tcreateDynamicsCompressor(): DynamicsCompressorNode {\n\t\treturn {} as DynamicsCompressorNode;\n\t}\n\n\tcreateGain(): GainNode {\n\t\treturn {} as GainNode;\n\t}\n\n\tcreateIIRFilter(_feedForward: number[] | Float32Array, _feedback: number[] | Float32Array): IIRFilterNode {\n\t\treturn {} as IIRFilterNode;\n\t}\n\n\tcreatePanner(): PannerNode {\n\t\treturn {} as PannerNode;\n\t}\n\n\tcreatePeriodicWave(\n\t\t_real: number[] | Float32Array,\n\t\t_imag: number[] | Float32Array,\n\t\t_constraints?: PeriodicWaveConstraints | undefined,\n\t): PeriodicWave {\n\t\treturn {} as PeriodicWave;\n\t}\n\n\tcreateStereoPanner(): StereoPannerNode {\n\t\treturn {} as StereoPannerNode;\n\t}\n\n\tcreateWaveShaper(): WaveShaperNode {\n\t\treturn {} as WaveShaperNode;\n\t}\n\n\tcreateMediaStreamSource(_stream: MediaStream): MediaStreamAudioSourceNode {\n\t\treturn {} as MediaStreamAudioSourceNode;\n\t}\n\n\tdecodeAudioData(_audioData: ArrayBuffer): Promise<AudioBuffer> {\n\t\treturn Promise.resolve({} as AudioBuffer);\n\t}\n\n\t//---------------------------\n\t// TONE AUDIO CONTEXT METHODS\n\t//---------------------------\n\n\tcreateAudioWorkletNode(\n\t\t_name: string, \n\t\t_options?: Partial<AudioWorkletNodeOptions>\n\t): AudioWorkletNode {\n\t\treturn {} as AudioWorkletNode;\n\t}\n\n\tget rawContext(): AnyAudioContext {\n\t\treturn {} as AnyAudioContext;\n\t}\n\n\tasync addAudioWorkletModule(_url: string, _name: string): Promise<void> {\n\t\treturn Promise.resolve();\n\t}\n\n\tlookAhead = 0;\n\n\tresume(): Promise<void> {\n\t\treturn Promise.resolve();\n\t}\n\n\tsetTimeout(_fn: (...args: any[]) => void, _timeout: Seconds): number {\n\t\treturn 0;\n\t}\n\n\tclearTimeout(_id: number): this {\n\t\treturn this;\n\t}\n\n\tsetInterval(_fn: (...args: any[]) => void, _interval: Seconds): number {\n\t\treturn 0;\n\t}\n\n\tclearInterval(_id: number): this {\n\t\treturn this;\n\t}\n\n\tgetConstant(_val: number): AudioBufferSourceNode {\n\t\treturn {} as AudioBufferSourceNode;\n\t}\n\n\tget currentTime(): Seconds {\n\t\treturn 0;\n\t}\n\n\tget state(): AudioContextState {\n\t\treturn {} as AudioContextState;\n\t}\n\n\tget sampleRate(): number {\n\t\treturn 0;\n\t}\n\n\tget listener(): AudioListener {\n\t\treturn {} as AudioListener;\n\t}\n\n\tget transport(): Transport {\n\t\treturn {} as Transport;\n\t}\n\n\tget draw(): Draw {\n\t\treturn {} as Draw;\n\t}\n\tset draw(_d) { }\n\n\tget destination(): Destination {\n\t\treturn {} as Destination;\n\t}\n\tset destination(_d: Destination) { }\n\n\tnow() {\n\t\treturn 0;\n\t}\n\n\timmediate() {\n\t\treturn 0;\n\t}\n\n\treadonly isOffline: boolean = false;\n}\n","import { isArray } from \"./TypeCheck\";\n\n// return an interface which excludes certain keys\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n\n/**\n * Make the property not writable using `defineProperty`. Internal use only.\n */\nexport function readOnly(target: object, property: string | string[]): void {\n\tif (isArray(property)) {\n\t\tproperty.forEach(str => readOnly(target, str));\n\t} else {\n\t\tObject.defineProperty(target, property, {\n\t\t\tenumerable: true,\n\t\t\twritable: false,\n\t\t});\n\t}\n}\n\n/**\n * Make an attribute writeable. Internal use only.\n */\nexport function writable(target: object, property: string | string[]): void {\n\tif (isArray(property)) {\n\t\tproperty.forEach(str => writable(target, str));\n\t} else {\n\t\tObject.defineProperty(target, property, {\n\t\t\twritable: true,\n\t\t});\n\t}\n}\n\nexport const noOp: (...args: any[]) => any = () => {\n\t// no operation here!\n};\n\n/**\n * Recursive Partial taken from here: https://stackoverflow.com/a/51365037\n */\nexport type RecursivePartial<T> = {\n\t[P in keyof T]?:\n\tT[P] extends Array<infer U> ? Array<RecursivePartial<U>> :\n\t\tT[P] extends object ? RecursivePartial<T[P]> :\n\t\t\tT[P];\n};\n\n/**\n * Recursive Omit modified from here: https://stackoverflow.com/a/54487392/1146428\n */\ntype OmitDistributive<T, K extends string | number> = T extends any ? (T extends object ? Id<RecursiveOmit<T, K>> : T) : never;\ntype Id<T> = {} & { [P in keyof T]: T[P]} // Cosmetic use only makes the tooltips expand the type can be removed \nexport type RecursiveOmit<T extends any, K extends string | number> = Omit<{ [P in keyof T]: OmitDistributive<T[P], K> }, K>;\n","import { getContext } from \"../Global\";\nimport { Tone } from \"../Tone\";\nimport { Samples, Seconds } from \"../type/Units\";\nimport { isAudioBuffer } from \"../util/AdvancedTypeCheck\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { noOp } from \"../util/Interface\";\nimport { isArray, isNumber, isString } from \"../util/TypeCheck\";\n\ninterface ToneAudioBufferOptions {\n\turl?: string | AudioBuffer | ToneAudioBuffer;\n\treverse: boolean;\n\tonload: (buffer?: ToneAudioBuffer) => void;\n\tonerror: (error: Error) => void;\n}\n\n/**\n * AudioBuffer loading and storage. ToneAudioBuffer is used internally by all\n * classes that make requests for audio files such as Tone.Player,\n * Tone.Sampler and Tone.Convolver.\n * Aside from load callbacks from individual buffers, ToneAudioBuffer\n * provides events which keep track of the loading progress\n * of _all_ of the buffers. These are ToneAudioBuffer.on(\"load\" / \"progress\" / \"error\")\n * @example\n * import { ToneAudioBuffer } from \"tone\";\n * const buffer = new ToneAudioBuffer(\"https://tonejs.github.io/examples/audio/FWDL.mp3\", () => {\n * \tconsole.log(\"loaded\");\n * });\n * @category Core\n */\nexport class ToneAudioBuffer extends Tone {\n\n\treadonly name: string = \"ToneAudioBuffer\";\n\n\t/**\n\t * stores the loaded AudioBuffer\n\t */\n\tprivate _buffer?: AudioBuffer;\n\n\t/**\n\t * indicates if the buffer should be reversed or not\n\t */\n\tprivate _reversed!: boolean;\n\n\t/**\n\t * Callback when the buffer is loaded.\n\t */\n\tonload: (buffer: ToneAudioBuffer) => void = noOp;\n\n\t/**\n\t *\n\t * @param url The url to load, or the audio buffer to set.\n\t * @param onload A callback which is invoked after the buffer is loaded.\n\t *                           It's recommended to use `ToneAudioBuffer.on('load', callback)` instead\n\t *                           since it will give you a callback when _all_ buffers are loaded.\n\t * @param onerror The callback to invoke if there is an error\n\t */\n\tconstructor(\n\t\turl?: string | ToneAudioBuffer | AudioBuffer,\n\t\tonload?: (buffer: ToneAudioBuffer) => void,\n\t\tonerror?: (error: Error) => void,\n\t);\n\tconstructor(options?: Partial<ToneAudioBufferOptions>);\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tconst options = optionsFromArguments(ToneAudioBuffer.getDefaults(), arguments, [\"url\", \"onload\", \"onerror\"]);\n\n\t\tthis.reverse = options.reverse;\n\t\tthis.onload = options.onload;\n\n\t\tif (options.url && isAudioBuffer(options.url) || options.url instanceof ToneAudioBuffer) {\n\t\t\tthis.set(options.url);\n\t\t} else if (isString(options.url)) {\n\t\t\t// initiate the download\n\t\t\tthis.load(options.url).catch(options.onerror);\n\t\t}\n\t}\n\n\tstatic getDefaults(): ToneAudioBufferOptions {\n\t\treturn {\n\t\t\tonerror: noOp,\n\t\t\tonload: noOp,\n\t\t\treverse: false,\n\t\t};\n\t}\n\n\t/**\n\t * The sample rate of the AudioBuffer\n\t */\n\tget sampleRate(): number {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.sampleRate;\n\t\t} else {\n\t\t\treturn getContext().sampleRate;\n\t\t}\n\t}\n\n\t/**\n\t * Pass in an AudioBuffer or ToneAudioBuffer to set the value of this buffer.\n\t */\n\tset(buffer: AudioBuffer | ToneAudioBuffer): this {\n\t\tif (buffer instanceof ToneAudioBuffer) {\n\t\t\t// if it's loaded, set it\n\t\t\tif (buffer.loaded) {\n\t\t\t\tthis._buffer = buffer.get();\n\t\t\t} else {\n\t\t\t\t// otherwise when it's loaded, invoke it's callback\n\t\t\t\tbuffer.onload = () => {\n\t\t\t\t\tthis.set(buffer);\n\t\t\t\t\tthis.onload(this);\n\t\t\t\t};\n\t\t\t}\n\t\t} else {\n\t\t\tthis._buffer = buffer;\n\t\t}\n\t\t// reverse it initially\n\t\tif (this._reversed) {\n\t\t\tthis._reverse();\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * The audio buffer stored in the object.\n\t */\n\tget(): AudioBuffer | undefined {\n\t\treturn this._buffer;\n\t}\n\n\t/**\n\t * Makes an fetch request for the selected url then decodes the file as an audio buffer.\n\t * Invokes the callback once the audio buffer loads.\n\t * @param url The url of the buffer to load. filetype support depends on the browser.\n\t * @returns A Promise which resolves with this ToneAudioBuffer\n\t */\n\tasync load(url: string): Promise<this> {\n\t\tconst promise = ToneAudioBuffer.load(url);\n\t\tToneAudioBuffer.downloads.push(promise);\n\t\ttry {\n\t\t\tconst audioBuffer = await promise;\n\t\t\tthis.set(audioBuffer);\n\t\t\t// invoke the onload method\n\t\t\tthis.onload(this);\n\t\t} catch (e) {\n\t\t\t// remove the failed file before throwing error\n\t\t\tconst index = ToneAudioBuffer.downloads.indexOf(promise);\n\t\t\tToneAudioBuffer.downloads.splice(index, 1);\n\t\t\tthrow e;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._buffer = undefined;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set the audio buffer from the array.\n\t * To create a multichannel AudioBuffer, pass in a multidimensional array.\n\t * @param array The array to fill the audio buffer\n\t */\n\tfromArray(array: Float32Array | Float32Array[]): this {\n\t\tconst isMultidimensional = isArray(array) && array[0].length > 0;\n\t\tconst channels = isMultidimensional ? array.length : 1;\n\t\tconst len = isMultidimensional ? (array[0] as Float32Array).length : array.length;\n\t\tconst context = getContext();\n\t\tconst buffer = context.createBuffer(channels, len, context.sampleRate);\n\t\tconst multiChannelArray: Float32Array[] = !isMultidimensional && channels === 1 ?\n\t\t\t[array as Float32Array] : array as Float32Array[];\n\n\t\tfor (let c = 0; c < channels; c++) {\n\t\t\tbuffer.copyToChannel(multiChannelArray[c], c);\n\t\t}\n\t\tthis._buffer = buffer;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sums multiple channels into 1 channel\n\t * @param chanNum Optionally only copy a single channel from the array.\n\t */\n\ttoMono(chanNum?: number): this {\n\t\tif (isNumber(chanNum)) {\n\t\t\tthis.fromArray(this.toArray(chanNum));\n\t\t} else {\n\t\t\tlet outputArray = new Float32Array(this.length as number);\n\t\t\tconst numChannels = this.numberOfChannels;\n\t\t\tfor (let channel = 0; channel < numChannels; channel++) {\n\t\t\t\tconst channelArray = this.toArray(channel) as Float32Array;\n\t\t\t\tfor (let i = 0; i < channelArray.length; i++) {\n\t\t\t\t\toutputArray[i] += channelArray[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\t// divide by the number of channels\n\t\t\toutputArray = outputArray.map(sample => sample / numChannels);\n\t\t\tthis.fromArray(outputArray);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the buffer as an array. Single channel buffers will return a 1-dimensional\n\t * Float32Array, and multichannel buffers will return multidimensional arrays.\n\t * @param channel Optionally only copy a single channel from the array.\n\t */\n\ttoArray(channel?: number): Float32Array | Float32Array[] {\n\t\tif (isNumber(channel)) {\n\t\t\treturn this.getChannelData(channel);\n\t\t} else if (this.numberOfChannels === 1) {\n\t\t\treturn this.toArray(0);\n\t\t} else {\n\t\t\tconst ret: Float32Array[] = [];\n\t\t\tfor (let c = 0; c < this.numberOfChannels; c++) {\n\t\t\t\tret[c] = this.getChannelData(c);\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\t}\n\n\t/**\n\t * Returns the Float32Array representing the PCM audio data for the specific channel.\n\t * @param  channel  The channel number to return\n\t * @return The audio as a TypedArray\n\t */\n\tgetChannelData(channel: number): Float32Array {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.getChannelData(channel);\n\t\t} else {\n\t\t\treturn new Float32Array(0);\n\t\t}\n\t}\n\n\t/**\n\t * Cut a subsection of the array and return a buffer of the\n\t * subsection. Does not modify the original buffer\n\t * @param start The time to start the slice\n\t * @param end The end time to slice. If none is given will default to the end of the buffer\n\t */\n\tslice(start: Seconds, end: Seconds = this.duration): ToneAudioBuffer {\n\t\tconst startSamples = Math.floor(start * this.sampleRate);\n\t\tconst endSamples = Math.floor(end * this.sampleRate);\n\t\tthis.assert(startSamples < endSamples, \"The start time must be less than the end time\");\n\t\tconst length = endSamples - startSamples;\n\t\tconst retBuffer = getContext().createBuffer(this.numberOfChannels, length, this.sampleRate);\n\t\tfor (let channel = 0; channel < this.numberOfChannels; channel++) {\n\t\t\tretBuffer.copyToChannel(this.getChannelData(channel).subarray(startSamples, endSamples), channel);\n\t\t}\n\t\treturn new ToneAudioBuffer(retBuffer);\n\t}\n\n\t/**\n\t * Reverse the buffer.\n\t */\n\tprivate _reverse(): this {\n\t\tif (this.loaded) {\n\t\t\tfor (let i = 0; i < this.numberOfChannels; i++) {\n\t\t\t\tthis.getChannelData(i).reverse();\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * If the buffer is loaded or not\n\t */\n\tget loaded(): boolean {\n\t\treturn this.length > 0;\n\t}\n\n\t/**\n\t * The duration of the buffer in seconds.\n\t */\n\tget duration(): Seconds {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.duration;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * The length of the buffer in samples\n\t */\n\tget length(): Samples {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.length;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * The number of discrete audio channels. Returns 0 if no buffer is loaded.\n\t */\n\tget numberOfChannels(): number {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.numberOfChannels;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * Reverse the buffer.\n\t */\n\tget reverse(): boolean {\n\t\treturn this._reversed;\n\t}\n\tset reverse(rev: boolean) {\n\t\tif (this._reversed !== rev) {\n\t\t\tthis._reversed = rev;\n\t\t\tthis._reverse();\n\t\t}\n\t}\n\n\t//-------------------------------------\n\t// STATIC METHODS\n\t//-------------------------------------\n\n\t/**\n\t * A path which is prefixed before every url.\n\t */\n\tstatic baseUrl = \"\";\n\n\t/**\n\t * Create a ToneAudioBuffer from the array. To create a multichannel AudioBuffer,\n\t * pass in a multidimensional array.\n\t * @param array The array to fill the audio buffer\n\t * @return A ToneAudioBuffer created from the array\n\t */\n\tstatic fromArray(array: Float32Array | Float32Array[]): ToneAudioBuffer {\n\t\treturn (new ToneAudioBuffer()).fromArray(array);\n\t}\n\n\t/**\n\t * Creates a ToneAudioBuffer from a URL, returns a promise which resolves to a ToneAudioBuffer\n\t * @param  url The url to load.\n\t * @return A promise which resolves to a ToneAudioBuffer\n\t */\n\tstatic async fromUrl(url: string): Promise<ToneAudioBuffer> {\n\t\tconst buffer = new ToneAudioBuffer();\n\t\treturn await buffer.load(url);\n\t}\n\n\t/**\n\t * All of the downloads\n\t */\n\tstatic downloads: Array<Promise<AudioBuffer>> = [];\n\n\t/**\n\t * Loads a url using fetch and returns the AudioBuffer.\n\t */\n\tstatic async load(url: string): Promise<AudioBuffer> {\n\n\t\t// test if the url contains multiple extensions\n\t\tconst matches = url.match(/\\[(.+\\|?)+\\]$/);\n\t\tif (matches) {\n\t\t\tconst extensions = matches[1].split(\"|\");\n\t\t\tlet extension = extensions[0];\n\t\t\tfor (const ext of extensions) {\n\t\t\t\tif (ToneAudioBuffer.supportsType(ext)) {\n\t\t\t\t\textension = ext;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\turl = url.replace(matches[0], extension);\n\t\t}\n\n\t\tconst response = await fetch(ToneAudioBuffer.baseUrl + url);\n\t\tif (!response.ok) {\n\t\t\tthrow new Error(`could not load url: ${url}`);\n\t\t}\n\t\tconst arrayBuffer = await response.arrayBuffer();\n\n\t\tconst audioBuffer = await getContext().decodeAudioData(arrayBuffer);\n\n\t\treturn audioBuffer;\n\t}\n\n\t/**\n\t * Checks a url's extension to see if the current browser can play that file type.\n\t * @param url The url/extension to test\n\t * @return If the file extension can be played\n\t * @static\n\t * @example\n\t * import { ToneAudioBuffer } from \"tone\";\n\t * ToneAudioBuffer.supportsType(\"wav\"); // returns true\n\t * ToneAudioBuffer.supportsType(\"path/to/file.wav\"); // returns true\n\t */\n\tstatic supportsType(url: string): boolean {\n\t\tconst extensions = url.split(\".\");\n\t\tconst extension = extensions[extensions.length - 1];\n\t\tconst response = document.createElement(\"audio\").canPlayType(\"audio/\" + extension);\n\t\treturn response !== \"\";\n\t}\n\n\t/**\n\t * Returns a Promise which resolves when all of the buffers have loaded\n\t */\n\tstatic async loaded(): Promise<void> {\n\t\tfor (const promise of ToneAudioBuffer.downloads) {\n\t\t\tawait promise;\n\t\t}\n\t}\n}\n","import { createOfflineAudioContext } from \"../context/AudioContext\";\nimport { Context } from \"../context/Context\";\nimport { Seconds } from \"../type/Units\";\nimport { isOfflineAudioContext } from \"../util/AdvancedTypeCheck\";\nimport { ToneAudioBuffer } from \"./ToneAudioBuffer\";\n\n/**\n * Wrapper around the OfflineAudioContext\n * @category Core\n */\nexport class OfflineContext extends Context {\n\n\treadonly name: string = \"OfflineContext\";\n\n\t/**\n\t * A private reference to the duration\n\t */\n\tprivate readonly _duration: Seconds;\n\n\t/**\n\t * An artificial clock source\n\t */\n\tprivate _currentTime: Seconds = 0;\n\n\t/**\n\t * Private reference to the OfflineAudioContext.\n\t */\n\tprotected _context!: OfflineAudioContext;\n\n\treadonly isOffline: boolean = true;\n\n\t/**\n\t * @param  channels  The number of channels to render\n\t * @param  duration  The duration to render in seconds\n\t * @param sampleRate the sample rate to render at\n\t */\n\tconstructor(\n\t\tchannels: number,\n\t\tduration: Seconds, sampleRate: number,\n\t);\n\tconstructor(context: OfflineAudioContext);\n\tconstructor() {\n\n\t\tsuper({\n\t\t\tclockSource: \"offline\",\n\t\t\tcontext: isOfflineAudioContext(arguments[0]) ?\n\t\t\t\targuments[0] : createOfflineAudioContext(arguments[0], arguments[1] * arguments[2], arguments[2]),\n\t\t\tlookAhead: 0,\n\t\t\tupdateInterval: isOfflineAudioContext(arguments[0]) ?\n\t\t\t\t128 / arguments[0].sampleRate : 128 / arguments[2],\n\t\t});\n\n\t\tthis._duration = isOfflineAudioContext(arguments[0]) ?\n\t\t\targuments[0].length / arguments[0].sampleRate : arguments[1];\n\t}\n\n\t/**\n\t * Override the now method to point to the internal clock time\n\t */\n\tnow(): Seconds {\n\t\treturn this._currentTime;\n\t}\n\n\t/**\n\t * Same as this.now()\n\t */\n\tget currentTime(): Seconds {\n\t\treturn this._currentTime;\n\t}\n\n\t/**\n\t * Render just the clock portion of the audio context.\n\t */\n\tprivate async _renderClock(asynchronous: boolean): Promise<void> {\n\t\tlet index = 0;\n\t\twhile (this._duration - this._currentTime >= 0) {\n\t\t\t\n\t\t\t// invoke all the callbacks on that time\n\t\t\tthis.emit(\"tick\");\n\t\t\t\n\t\t\t// increment the clock in block-sized chunks\n\t\t\tthis._currentTime += 128 / this.sampleRate;\n\t\t\t\n\t\t\t// yield once a second of audio\n\t\t\tindex++;\n\t\t\tconst yieldEvery = Math.floor(this.sampleRate / 128);\n\t\t\tif (asynchronous && index % yieldEvery === 0) {\n\t\t\t\tawait new Promise(done => setTimeout(done, 1));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Render the output of the OfflineContext\n\t * @param asynchronous If the clock should be rendered asynchronously, which will not block the main thread, but be slightly slower.\n\t */\n\tasync render(asynchronous: boolean = true): Promise<ToneAudioBuffer> {\n\t\tawait this.workletsAreReady();\n\t\tawait this._renderClock(asynchronous);\n\t\tconst buffer = await this._context.startRendering();\n\t\treturn new ToneAudioBuffer(buffer);\n\t}\n\n\t/**\n\t * Close the context\n\t */\n\tclose(): Promise<void> {\n\t\treturn Promise.resolve();\n\t}\n}\n","import { version } from \"../version\";\nimport { AnyAudioContext, hasAudioContext, theWindow } from \"./context/AudioContext\";\nimport { Context } from \"./context/Context\";\nimport { DummyContext } from \"./context/DummyContext\";\nimport { BaseContext } from \"./context/BaseContext\";\nimport { OfflineContext } from \"./context/OfflineContext\";\nimport { isAudioContext, isOfflineAudioContext } from \"./util/AdvancedTypeCheck\";\n\n/**\n * This dummy context is used to avoid throwing immediate errors when importing in Node.js\n */\nconst dummyContext = new DummyContext();\n\n/**\n * The global audio context which is getable and assignable through\n * getContext and setContext\n */\nlet globalContext: BaseContext = dummyContext;\n\n/**\n * Returns the default system-wide [[Context]]\n * @category Core\n */\nexport function getContext(): BaseContext {\n\tif (globalContext === dummyContext && hasAudioContext) {\n\t\tsetContext(new Context());\n\t}\n\treturn globalContext;\n}\n\n/**\n * Set the default audio context\n * @category Core\n */\nexport function setContext(context: BaseContext | AnyAudioContext): void {\n\tif (isAudioContext(context)) {\n\t\tglobalContext = new Context(context);\n\t} else if (isOfflineAudioContext(context)) {\n\t\tglobalContext = new OfflineContext(context);\n\t} else {\n\t\tglobalContext = context;\n\t}\n}\n\n/**\n * Most browsers will not play _any_ audio until a user\n * clicks something (like a play button). Invoke this method\n * on a click or keypress event handler to start the audio context.\n * More about the Autoplay policy\n * [here](https://developers.google.com/web/updates/2017/09/autoplay-policy-changes#webaudio)\n * @example\n * import * as Tone from \"tone\";\n * document.querySelector(\"button\").addEventListener(\"click\", async () => {\n * \tawait Tone.start();\n * \tconsole.log(\"context started\");\n * });\n * @category Core\n */\nexport function start(): Promise <void> {\n\treturn globalContext.resume();\n}\n\n/**\n * Log Tone.js + version in the console.\n */\nif (theWindow && !theWindow.TONE_SILENCE_LOGGING) {\n\tlet prefix = \"v\";\n\tif (version === \"dev\") {\n\t\tprefix = \"\";\n\t}\n\tconst printString = ` * Tone.js ${prefix}${version} * `;\n\t// eslint-disable-next-line no-console\n\tconsole.log(`%c${printString}`, \"background: #000; color: #fff\");\n}\n","import { Decibels, GainFactor, Hertz, Interval, MidiNote, NormalRange } from \"./Units\";\n\n/**\n * Equal power gain scale. Good for cross-fading.\n * @param  percent (0-1)\n */\nexport function equalPowerScale(percent: NormalRange): number {\n\tconst piFactor = 0.5 * Math.PI;\n\treturn Math.sin(percent * piFactor);\n}\n\n/**\n * Convert decibels into gain.\n */\nexport function dbToGain(db: Decibels): GainFactor {\n\treturn Math.pow(10, db / 20);\n}\n\n/**\n * Convert gain to decibels.\n */\nexport function gainToDb(gain: GainFactor): Decibels {\n\treturn 20 * (Math.log(gain) / Math.LN10);\n}\n\n/**\n * Convert an interval (in semitones) to a frequency ratio.\n * @param interval the number of semitones above the base note\n * @example\n * import { intervalToFrequencyRatio } from \"tone\";\n * intervalToFrequencyRatio(0); // 1\n * intervalToFrequencyRatio(12); // 2\n * intervalToFrequencyRatio(-12); // 0.5\n */\nexport function intervalToFrequencyRatio(interval: Interval): number {\n\treturn Math.pow(2, (interval / 12));\n}\n\n/**\n * The Global [concert tuning pitch](https://en.wikipedia.org/wiki/Concert_pitch) which is used\n * to generate all the other pitch values from notes. A4's values in Hertz.\n */\nlet A4: Hertz = 440;\n\nexport function getA4(): Hertz {\n\treturn A4;\n}\n\nexport function setA4(freq: Hertz): void {\n\tA4 = freq;\n}\n\n/**\n * Convert a frequency value to a MIDI note.\n * @param frequency The value to frequency value to convert.\n * @example\n * import { ftom } from \"tone\";\n * ftom(440); // returns 69\n */\nexport function ftom(frequency: Hertz): MidiNote {\n\treturn Math.round(ftomf(frequency)) as MidiNote;\n}\n\n/**\n * Convert a frequency to a floating point midi value\n */\nexport function ftomf(frequency: Hertz): number {\n\treturn 69 + 12 * Math.log2(frequency / A4);\n}\n\n/**\n * Convert a MIDI note to frequency value.\n * @param  midi The midi number to convert.\n * @return The corresponding frequency value\n * @example\n * import { mtof } from \"tone\";\n * mtof(69); // 440\n */\nexport function mtof(midi: MidiNote): Hertz {\n\treturn A4 * Math.pow(2, (midi - 69) / 12);\n}\n","import { BaseContext } from \"../context/BaseContext\";\nimport { Tone } from \"../Tone\";\nimport { isDefined, isObject, isString, isUndef } from \"../util/TypeCheck\";\nimport { BPM, Hertz, MidiNote, Milliseconds, Samples, Seconds, Ticks, Time } from \"./Units\";\n\nexport type TimeValue = Time | TimeBaseClass<any, any>;\n\n/**\n * The units that the TimeBase can accept. extended by other classes\n */\nexport type TimeBaseUnit = \"s\" | \"n\" | \"t\" | \"m\" | \"i\" | \"hz\" | \"tr\" | \"samples\" | \"number\";\n\nexport interface TypeFunction {\n\tregexp: RegExp;\n\tmethod: (value: string, ...args: string[]) => number;\n}\n\nexport interface TimeExpression<Type extends number> {\n\t[key: string]: {\n\t\tregexp: RegExp;\n\t\tmethod: (value: string, ...args: string[]) => Type;\n\t};\n}\n\n/**\n * TimeBase is a flexible encoding of time which can be evaluated to and from a string.\n */\nexport abstract class TimeBaseClass<Type extends number, Unit extends string> extends Tone {\n\n\treadonly context: BaseContext;\n\n\t/**\n\t * The value of the units\n\t */\n\tprotected _val?: TimeValue;\n\n\t/**\n\t * The units of time\n\t */\n\tprotected _units?: Unit;\n\n\t/**\n\t * All of the conversion expressions\n\t */\n\tprotected _expressions: TimeExpression<Type>;\n\n\t/**\n\t * The default units\n\t */\n\treadonly defaultUnits: Unit = \"s\" as Unit;\n\n\t/**\n\t * @param context The context associated with the time value. Used to compute\n\t * Transport and context-relative timing.\n\t * @param  value  The time value as a number, string or object\n\t * @param  units  Unit values\n\t */\n\tconstructor(context: BaseContext, value?: TimeValue, units?: Unit) {\n\t\tsuper();\n\n\t\tthis._val = value;\n\t\tthis._units = units;\n\t\tthis.context = context;\n\t\tthis._expressions = this._getExpressions();\n\t}\n\n\t/**\n\t * All of the time encoding expressions\n\t */\n\tprotected _getExpressions(): TimeExpression<Type> {\n\t\treturn {\n\t\t\thz: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._frequencyToUnits(parseFloat(value));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?)hz$/i,\n\t\t\t},\n\t\t\ti: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._ticksToUnits(parseInt(value, 10));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)i$/i,\n\t\t\t},\n\t\t\tm: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._beatsToUnits(parseInt(value, 10) * this._getTimeSignature());\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)m$/i,\n\t\t\t},\n\t\t\tn: {\n\t\t\t\tmethod: (value, dot) => {\n\t\t\t\t\tconst numericValue = parseInt(value, 10);\n\t\t\t\t\tconst scalar = dot === \".\" ? 1.5 : 1;\n\t\t\t\t\tif (numericValue === 1) {\n\t\t\t\t\t\treturn this._beatsToUnits(this._getTimeSignature()) * scalar as Type;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn this._beatsToUnits(4 / numericValue) * scalar as Type;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)n(\\.?)$/i,\n\t\t\t},\n\t\t\tnumber: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._expressions[this.defaultUnits].method.call(this, value);\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?)$/,\n\t\t\t},\n\t\t\ts: {\n\t\t\t\tmethod: (value): Type => {\n\t\t\t\t\treturn this._secondsToUnits(parseFloat(value));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?)s$/,\n\t\t\t},\n\t\t\tsamples: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn parseInt(value, 10) / this.context.sampleRate as Type;\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)samples$/,\n\t\t\t},\n\t\t\tt: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\tconst numericValue = parseInt(value, 10);\n\t\t\t\t\treturn this._beatsToUnits(8 / (Math.floor(numericValue) * 3));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)t$/i,\n\t\t\t},\n\t\t\ttr: {\n\t\t\t\tmethod: (m, q, s) => {\n\t\t\t\t\tlet total = 0;\n\t\t\t\t\tif (m && m !== \"0\") {\n\t\t\t\t\t\ttotal += this._beatsToUnits(this._getTimeSignature() * parseFloat(m));\n\t\t\t\t\t}\n\t\t\t\t\tif (q && q !== \"0\") {\n\t\t\t\t\t\ttotal += this._beatsToUnits(parseFloat(q));\n\t\t\t\t\t}\n\t\t\t\t\tif (s && s !== \"0\") {\n\t\t\t\t\t\ttotal += this._beatsToUnits(parseFloat(s) / 4);\n\t\t\t\t\t}\n\t\t\t\t\treturn total as Type;\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?$/,\n\t\t\t},\n\t\t};\n\t}\n\n\t//-------------------------------------\n\t// \tVALUE OF\n\t//-------------------------------------\n\n\t/**\n\t * Evaluate the time value. Returns the time in seconds.\n\t */\n\tvalueOf(): Type {\n\t\tif (this._val instanceof TimeBaseClass) {\n\t\t\tthis.fromType(this._val);\n\t\t}\n\t\tif (isUndef(this._val)) {\n\t\t\treturn this._noArg();\n\t\t} else if (isString(this._val) && isUndef(this._units)) {\n\t\t\tfor (const units in this._expressions) {\n\t\t\t\tif (this._expressions[units].regexp.test(this._val.trim())) {\n\t\t\t\t\tthis._units = units as Unit;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (isObject(this._val)) {\n\t\t\tlet total = 0;\n\t\t\tfor (const typeName in this._val) {\n\t\t\t\tif (isDefined(this._val[typeName])) {\n\t\t\t\t\tconst quantity = this._val[typeName];\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tconst time = (new this.constructor(this.context, typeName)).valueOf() * quantity;\n\t\t\t\t\ttotal += time;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn total as Type;\n\t\t}\n\t\tif (isDefined(this._units)) {\n\t\t\tconst expr = this._expressions[this._units];\n\t\t\tconst matching = this._val.toString().trim().match(expr.regexp);\n\t\t\tif (matching) {\n\t\t\t\treturn expr.method.apply(this, matching.slice(1));\n\t\t\t} else {\n\t\t\t\treturn expr.method.call(this, this._val);\n\t\t\t}\n\t\t} else if (isString(this._val)) {\n\t\t\treturn parseFloat(this._val) as Type;\n\t\t} else {\n\t\t\treturn this._val as Type;\n\t\t}\n\t}\n\n\t//-------------------------------------\n\t// \tUNIT CONVERSIONS\n\t//-------------------------------------\n\n\t/**\n\t * Returns the value of a frequency in the current units\n\t */\n\tprotected _frequencyToUnits(freq: Hertz): Type {\n\t\treturn 1 / freq as Type;\n\t}\n\n\t/**\n\t * Return the value of the beats in the current units\n\t */\n\tprotected _beatsToUnits(beats: number): Type {\n\t\treturn (60 / this._getBpm()) * beats as Type;\n\t}\n\n\t/**\n\t * Returns the value of a second in the current units\n\t */\n\tprotected _secondsToUnits(seconds: Seconds): Type {\n\t\treturn seconds as Type;\n\t}\n\n\t/**\n\t * Returns the value of a tick in the current time units\n\t */\n\tprotected _ticksToUnits(ticks: Ticks): Type {\n\t\treturn (ticks * (this._beatsToUnits(1)) / this._getPPQ()) as Type;\n\t}\n\n\t/**\n\t * With no arguments, return 'now'\n\t */\n\tprotected _noArg(): Type {\n\t\treturn this._now();\n\t}\n\n\t//-------------------------------------\n\t// \tTEMPO CONVERSIONS\n\t//-------------------------------------\n\n\t/**\n\t * Return the bpm\n\t */\n\tprotected _getBpm(): BPM {\n\t\treturn this.context.transport.bpm.value;\n\t}\n\n\t/**\n\t * Return the timeSignature\n\t */\n\tprotected _getTimeSignature(): number {\n\t\treturn this.context.transport.timeSignature as number;\n\t}\n\n\t/**\n\t * Return the PPQ or 192 if Transport is not available\n\t */\n\tprotected _getPPQ(): number {\n\t\treturn this.context.transport.PPQ;\n\t}\n\n\t/**\n\t * Return the current time in whichever context is relevant\n\t */\n\tprotected abstract _now(): Type;\n\n\t//-------------------------------------\n\t// \tCONVERSION INTERFACE\n\t//-------------------------------------\n\n\t/**\n\t * Coerce a time type into this units type.\n\t * @param type Any time type units\n\t */\n\tfromType(type: TimeBaseClass<any, any>): this {\n\t\tthis._units = undefined;\n\t\tswitch (this.defaultUnits) {\n\t\t\tcase \"s\":\n\t\t\t\tthis._val = type.toSeconds();\n\t\t\t\tbreak;\n\t\t\tcase \"i\":\n\t\t\t\tthis._val = type.toTicks();\n\t\t\t\tbreak;\n\t\t\tcase \"hz\":\n\t\t\t\tthis._val = type.toFrequency();\n\t\t\t\tbreak;\n\t\t\tcase \"midi\":\n\t\t\t\tthis._val = type.toMidi();\n\t\t\t\tbreak;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Return the value in seconds\n\t */\n\tabstract toSeconds(): Seconds;\n\n\t/**\n\t * Return the value as a Midi note\n\t */\n\tabstract toMidi(): MidiNote;\n\n\t/**\n\t * Convert the value into ticks\n\t */\n\tabstract toTicks(): Ticks;\n\n\t/**\n\t * Return the value in hertz\n\t */\n\ttoFrequency(): Hertz {\n\t\treturn 1 / this.toSeconds();\n\t}\n\n\t/**\n\t * Return the time in samples\n\t */\n\ttoSamples(): Samples {\n\t\treturn this.toSeconds() * this.context.sampleRate;\n\t}\n\n\t/**\n\t * Return the time in milliseconds.\n\t */\n\ttoMilliseconds(): Milliseconds {\n\t\treturn this.toSeconds() * 1000;\n\t}\n}\n","import { getContext } from \"../Global\";\nimport { ftom } from \"./Conversions\";\nimport { TimeBaseClass, TimeBaseUnit, TimeExpression, TimeValue } from \"./TimeBase\";\nimport { BarsBeatsSixteenths, MidiNote, Seconds, Subdivision, Ticks, Time } from \"./Units\";\n\n/**\n * TimeClass is a primitive type for encoding and decoding Time values.\n * TimeClass can be passed into the parameter of any method which takes time as an argument.\n * @param  val    The time value.\n * @param  units  The units of the value.\n * @example\n * import { Time } from \"tone\";\n * const time = Time(\"4n\"); // a quarter note\n * @category Unit\n */\nexport class TimeClass<Type extends Seconds | Ticks = Seconds, Unit extends string = TimeBaseUnit>\n\textends TimeBaseClass<Type, Unit> {\n\n\treadonly name: string = \"Time\";\n\n\tprotected _getExpressions(): TimeExpression<Type> {\n\t\treturn Object.assign(super._getExpressions(), {\n\t\t\tnow: {\n\t\t\t\tmethod: (capture: string): Type => {\n\t\t\t\t\treturn this._now() + new (this.constructor as typeof TimeClass)(this.context, capture).valueOf() as Type;\n\t\t\t\t},\n\t\t\t\tregexp: /^\\+(.+)/,\n\t\t\t},\n\t\t\tquantize: {\n\t\t\t\tmethod: (capture: string): Type => {\n\t\t\t\t\tconst quantTo = new TimeClass(this.context, capture).valueOf();\n\t\t\t\t\treturn this._secondsToUnits(this.context.transport.nextSubdivision(quantTo));\n\t\t\t\t},\n\t\t\t\tregexp: /^@(.+)/,\n\t\t\t},\n\t\t});\n\t}\n\n\t/**\n\t * Quantize the time by the given subdivision. Optionally add a\n\t * percentage which will move the time value towards the ideal\n\t * quantized value by that percentage.\n\t * @param  subdiv    The subdivision to quantize to\n\t * @param  percent  Move the time value towards the quantized value by a percentage.\n\t * @example\n\t * import { Time } from \"tone\";\n\t * Time(21).quantize(2); // returns 22\n\t * Time(0.6).quantize(\"4n\", 0.5); // returns 0.55\n\t */\n\tquantize(subdiv: Time, percent = 1): Type {\n\t\tconst subdivision = new (this.constructor as typeof TimeClass)(this.context, subdiv).valueOf();\n\t\tconst value = this.valueOf();\n\t\tconst multiple = Math.round(value / subdivision);\n\t\tconst ideal = multiple * subdivision;\n\t\tconst diff = ideal - value;\n\t\treturn value + diff * percent as Type;\n\t}\n\n\t//-------------------------------------\n\t// CONVERSIONS\n\t//-------------------------------------\n\t/**\n\t * Convert a Time to Notation. The notation values are will be the\n\t * closest representation between 1m to 128th note.\n\t * @return {Notation}\n\t * @example\n\t * import { Time } from \"tone\";\n\t * // if the Transport is at 120bpm:\n\t * Time(2).toNotation(); // returns \"1m\"\n\t */\n\ttoNotation(): Subdivision {\n\t\tconst time = this.toSeconds();\n\t\tconst testNotations: Subdivision[] = [\"1m\"];\n\t\tfor (let power = 1; power < 9; power++) {\n\t\t\tconst subdiv = Math.pow(2, power);\n\t\t\ttestNotations.push(subdiv + \"n.\" as Subdivision);\n\t\t\ttestNotations.push(subdiv + \"n\" as Subdivision);\n\t\t\ttestNotations.push(subdiv + \"t\" as Subdivision);\n\t\t}\n\t\ttestNotations.push(\"0\");\n\t\t// find the closets notation representation\n\t\tlet closest = testNotations[0];\n\t\tlet closestSeconds = new TimeClass(this.context, testNotations[0]).toSeconds();\n\t\ttestNotations.forEach(notation => {\n\t\t\tconst notationSeconds = new TimeClass(this.context, notation).toSeconds();\n\t\t\tif (Math.abs(notationSeconds - time) < Math.abs(closestSeconds - time)) {\n\t\t\t\tclosest = notation;\n\t\t\t\tclosestSeconds = notationSeconds;\n\t\t\t}\n\t\t});\n\t\treturn closest;\n\t}\n\n\t/**\n\t * Return the time encoded as Bars:Beats:Sixteenths.\n\t */\n\ttoBarsBeatsSixteenths(): BarsBeatsSixteenths {\n\t\tconst quarterTime = this._beatsToUnits(1);\n\t\tlet quarters = this.valueOf() / quarterTime;\n\t\tquarters = parseFloat(quarters.toFixed(4));\n\t\tconst measures = Math.floor(quarters / this._getTimeSignature());\n\t\tlet sixteenths = (quarters % 1) * 4;\n\t\tquarters = Math.floor(quarters) % this._getTimeSignature();\n\t\tconst sixteenthString = sixteenths.toString();\n\t\tif (sixteenthString.length > 3) {\n\t\t\t// the additional parseFloat removes insignificant trailing zeroes\n\t\t\tsixteenths = parseFloat(parseFloat(sixteenthString).toFixed(3));\n\t\t}\n\t\tconst progress = [measures, quarters, sixteenths];\n\t\treturn progress.join(\":\");\n\t}\n\n\t/**\n\t * Return the time in ticks.\n\t */\n\ttoTicks(): Ticks {\n\t\tconst quarterTime = this._beatsToUnits(1);\n\t\tconst quarters = this.valueOf() / quarterTime;\n\t\treturn Math.round(quarters * this._getPPQ());\n\t}\n\n\t/**\n\t * Return the time in seconds.\n\t */\n\ttoSeconds(): Seconds {\n\t\treturn this.valueOf();\n\t}\n\n\t/**\n\t * Return the value as a midi note.\n\t */\n\ttoMidi(): MidiNote {\n\t\treturn ftom(this.toFrequency());\n\t}\n\n\tprotected _now(): Type {\n\t\treturn this.context.now() as Type;\n\t}\n}\n\n/**\n * Create a TimeClass from a time string or number.\n * @param value A value which reprsents time\n * @param units The value's units if they can't be inferred by the value.\n * @category Unit\n */\nexport function Time(value?: TimeValue, units?: TimeBaseUnit): TimeClass<Seconds> {\n\treturn new TimeClass(getContext(), value, units);\n}\n","import { getContext } from \"../Global\";\nimport { intervalToFrequencyRatio, mtof } from \"./Conversions\";\nimport { ftom, getA4, setA4 } from \"./Conversions\";\nimport { TimeClass } from \"./Time\";\nimport { TimeBaseUnit, TimeExpression, TimeValue } from \"./TimeBase\";\nimport { Frequency, Hertz, Interval, MidiNote, Note, Seconds, Ticks } from \"./Units\";\n\nexport type FrequencyUnit = TimeBaseUnit | \"midi\";\n\n/**\n * Frequency is a primitive type for encoding Frequency values.\n * Eventually all time values are evaluated to hertz using the `eval` method.\n * @example\n * import { Frequency } from \"tone\";\n * Frequency(\"C3\"); // 261\n * Frequency(38, \"midi\");\n * Frequency(\"C3\").transpose(4);\n * @category Unit\n */\nexport class FrequencyClass<Type extends number = Hertz> extends TimeClass<Type, FrequencyUnit> {\n\n\treadonly name: string = \"Frequency\";\n\n\treadonly defaultUnits: FrequencyUnit = \"hz\";\n\n\t/**\n\t * The [concert tuning pitch](https://en.wikipedia.org/wiki/Concert_pitch) which is used\n\t * to generate all the other pitch values from notes. A4's values in Hertz.\n\t */\n\tstatic get A4(): Hertz {\n\t\treturn getA4();\n\t}\n\tstatic set A4(freq: Hertz) {\n\t\tsetA4(freq);\n\t}\n\n\t//-------------------------------------\n\t// \tAUGMENT BASE EXPRESSIONS\n\t//-------------------------------------\n\n\tprotected _getExpressions(): TimeExpression<Type> {\n\t\treturn Object.assign({}, super._getExpressions(), {\n\t\t\tmidi: {\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?midi)/,\n\t\t\t\tmethod(value): number {\n\t\t\t\t\tif (this.defaultUnits === \"midi\") {\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn FrequencyClass.mtof(value);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\tnote: {\n\t\t\t\tregexp: /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i,\n\t\t\t\tmethod(pitch, octave): number {\n\t\t\t\t\tconst index = noteToScaleIndex[pitch.toLowerCase()];\n\t\t\t\t\tconst noteNumber = index + (parseInt(octave, 10) + 1) * 12;\n\t\t\t\t\tif (this.defaultUnits === \"midi\") {\n\t\t\t\t\t\treturn noteNumber;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn FrequencyClass.mtof(noteNumber);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\ttr: {\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?/,\n\t\t\t\tmethod(m, q, s): number {\n\t\t\t\t\tlet total = 1;\n\t\t\t\t\tif (m && m !== \"0\") {\n\t\t\t\t\t\ttotal *= this._beatsToUnits(this._getTimeSignature() * parseFloat(m));\n\t\t\t\t\t}\n\t\t\t\t\tif (q && q !== \"0\") {\n\t\t\t\t\t\ttotal *= this._beatsToUnits(parseFloat(q));\n\t\t\t\t\t}\n\t\t\t\t\tif (s && s !== \"0\") {\n\t\t\t\t\t\ttotal *= this._beatsToUnits(parseFloat(s) / 4);\n\t\t\t\t\t}\n\t\t\t\t\treturn total;\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t}\n\n\t//-------------------------------------\n\t// \tEXPRESSIONS\n\t//-------------------------------------\n\n\t/**\n\t * Transposes the frequency by the given number of semitones.\n\t * @return  A new transposed frequency\n\t * @example\n\t * import { Frequency } from \"tone\";\n\t * Frequency(\"A4\").transpose(3); // \"C5\"\n\t */\n\ttranspose(interval: Interval): FrequencyClass {\n\t\treturn new FrequencyClass(this.context, this.valueOf() * intervalToFrequencyRatio(interval));\n\t}\n\n\t/**\n\t * Takes an array of semitone intervals and returns\n\t * an array of frequencies transposed by those intervals.\n\t * @return  Returns an array of Frequencies\n\t * @example\n\t * import { Frequency } from \"tone\";\n\t * Frequency(\"A4\").harmonize([0, 3, 7]); // [\"A4\", \"C5\", \"E5\"]\n\t */\n\tharmonize(intervals: Interval[]): FrequencyClass[] {\n\t\treturn intervals.map(interval => {\n\t\t\treturn this.transpose(interval);\n\t\t});\n\t}\n\n\t//-------------------------------------\n\t// \tUNIT CONVERSIONS\n\t//-------------------------------------\n\n\t/**\n\t * Return the value of the frequency as a MIDI note\n\t * @example\n\t * import { Frequency } from \"tone\";\n\t * Frequency(\"C4\").toMidi(); // 60\n\t */\n\ttoMidi(): MidiNote {\n\t\treturn ftom(this.valueOf());\n\t}\n\n\t/**\n\t * Return the value of the frequency in Scientific Pitch Notation\n\t * @example\n\t * import { Frequency } from \"tone\";\n\t * Frequency(69, \"midi\").toNote(); // \"A4\"\n\t */\n\ttoNote(): Note {\n\t\tconst freq = this.toFrequency();\n\t\tconst log = Math.log2(freq / FrequencyClass.A4);\n\t\tlet noteNumber = Math.round(12 * log) + 57;\n\t\tconst octave = Math.floor(noteNumber / 12);\n\t\tif (octave < 0) {\n\t\t\tnoteNumber += -12 * octave;\n\t\t}\n\t\tconst noteName = scaleIndexToNote[noteNumber % 12];\n\t\treturn noteName + octave.toString() as Note;\n\t}\n\n\t/**\n\t * Return the duration of one cycle in seconds.\n\t */\n\ttoSeconds(): Seconds {\n\t\treturn 1 / super.toSeconds();\n\t}\n\n\t/**\n\t * Return the duration of one cycle in ticks\n\t */\n\ttoTicks(): Ticks {\n\t\tconst quarterTime = this._beatsToUnits(1);\n\t\tconst quarters = this.valueOf() / quarterTime;\n\t\treturn Math.floor(quarters * this._getPPQ());\n\t}\n\n\t//-------------------------------------\n\t// \tUNIT CONVERSIONS HELPERS\n\t//-------------------------------------\n\n\t/**\n\t * With no arguments, return 0\n\t */\n\tprotected _noArg(): Type {\n\t\treturn 0 as Type;\n\t}\n\n\t/**\n\t * Returns the value of a frequency in the current units\n\t */\n\tprotected _frequencyToUnits(freq: Hertz): Type {\n\t\treturn freq as Type;\n\t}\n\n\t/**\n\t * Returns the value of a tick in the current time units\n\t */\n\tprotected _ticksToUnits(ticks: Ticks): Type {\n\t\treturn 1 / ((ticks * 60) / (this._getBpm() * this._getPPQ())) as Type;\n\t}\n\n\t/**\n\t * Return the value of the beats in the current units\n\t */\n\tprotected _beatsToUnits(beats: number): Type {\n\t\treturn 1 / super._beatsToUnits(beats) as Type;\n\t}\n\n\t/**\n\t * Returns the value of a second in the current units\n\t */\n\tprotected _secondsToUnits(seconds: Seconds): Type {\n\t\treturn 1 / seconds as Type;\n\t}\n\n\t/**\n\t * Convert a MIDI note to frequency value.\n\t * @param  midi The midi number to convert.\n\t * @return The corresponding frequency value\n\t */\n\tstatic mtof(midi: MidiNote): Hertz {\n\t\treturn mtof(midi);\n\t}\n\n\t/**\n\t * Convert a frequency value to a MIDI note.\n\t * @param frequency The value to frequency value to convert.\n\t */\n\tstatic ftom(frequency: Hertz): MidiNote {\n\t\treturn ftom(frequency);\n\t}\n}\n\n//-------------------------------------\n// \tFREQUENCY CONVERSIONS\n//-------------------------------------\n\n/**\n * Note to scale index. \n * @hidden\n */\nconst noteToScaleIndex = {\n\tcbb: -2, cb: -1, c: 0, \"c#\": 1, cx: 2,\n\tdbb: 0, db: 1, d: 2, \"d#\": 3, dx: 4,\n\tebb: 2, eb: 3, e: 4, \"e#\": 5, ex: 6,\n\tfbb: 3, fb: 4, f: 5, \"f#\": 6, fx: 7,\n\tgbb: 5, gb: 6, g: 7, \"g#\": 8, gx: 9,\n\tabb: 7, ab: 8, a: 9, \"a#\": 10, ax: 11,\n\tbbb: 9, bb: 10, b: 11, \"b#\": 12, bx: 13,\n};\n\n/**\n * scale index to note (sharps)\n * @hidden\n */\nconst scaleIndexToNote = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n\n/**\n * Convert a value into a FrequencyClass object.\n * @category Unit\n */\nexport function Frequency(value?: TimeValue | Frequency, units?: FrequencyUnit): FrequencyClass {\n\treturn new FrequencyClass(getContext(), value, units);\n}\n","import { getContext } from \"../Global\";\nimport { Seconds, Ticks } from \"../type/Units\";\nimport { TimeClass } from \"./Time\";\nimport { TimeBaseUnit, TimeValue } from \"./TimeBase\";\n\n/**\n * TransportTime is a the time along the Transport's\n * timeline. It is similar to Tone.Time, but instead of evaluating\n * against the AudioContext's clock, it is evaluated against\n * the Transport's position. See [TransportTime wiki](https://github.com/Tonejs/Tone.js/wiki/TransportTime).\n * @category Unit\n */\nexport class TransportTimeClass<Type extends Seconds | Ticks = Seconds> extends TimeClass<Type> {\n\n\treadonly name: string = \"TransportTime\";\n\n\t/**\n\t * Return the current time in whichever context is relevant\n\t */\n\tprotected _now(): Type {\n\t\treturn this.context.transport.seconds as Type;\n\t}\n}\n\n/**\n * TransportTime is a the time along the Transport's\n * timeline. It is similar to [[Time]], but instead of evaluating\n * against the AudioContext's clock, it is evaluated against\n * the Transport's position. See [TransportTime wiki](https://github.com/Tonejs/Tone.js/wiki/TransportTime).\n * @category Unit\n */\nexport function TransportTime(value?: TimeValue, units?: TimeBaseUnit): TransportTimeClass {\n\treturn new TransportTimeClass(getContext(), value, units);\n}\n","import { getContext } from \"../Global\";\nimport { Tone } from \"../Tone\";\nimport { FrequencyClass } from \"../type/Frequency\";\nimport { TimeClass } from \"../type/Time\";\nimport { TransportTimeClass } from \"../type/TransportTime\";\nimport { Frequency, Hertz, Seconds, Ticks, Time } from \"../type/Units\";\nimport { getDefaultsFromInstance, optionsFromArguments } from \"../util/Defaults\";\nimport { RecursivePartial } from \"../util/Interface\";\nimport { isArray, isBoolean, isDefined, isNumber, isString, isUndef } from \"../util/TypeCheck\";\nimport { BaseContext } from \"./BaseContext\";\n\n/**\n * A unit which process audio\n */\nexport interface ToneWithContextOptions {\n\tcontext: BaseContext;\n}\n\n/**\n * The Base class for all nodes that have an AudioContext.\n */\nexport abstract class ToneWithContext<Options extends ToneWithContextOptions> extends Tone {\n\n\t/**\n\t * The context belonging to the node.\n\t */\n\treadonly context: BaseContext;\n\n\t/**\n\t * The default context to use if no AudioContext is passed in to the constructor.\n\t * Probably should not be set manually. Used internally.\n\t * @hidden\n\t */\n\treadonly defaultContext?: BaseContext;\n\n\t/**\n\t * Pass in a constructor as the first argument\n\t */\n\tconstructor(context?: BaseContext)\n\tconstructor(options?: Partial<ToneWithContextOptions>);\n\tconstructor() {\n\t\tsuper();\n\t\tconst options = optionsFromArguments(ToneWithContext.getDefaults(), arguments, [\"context\"]);\n\t\tif (this.defaultContext) {\n\t\t\tthis.context = this.defaultContext;\n\t\t} else {\n\t\t\tthis.context = options.context;\n\t\t}\n\t}\n\n\tstatic getDefaults(): ToneWithContextOptions {\n\t\treturn {\n\t\t\tcontext: getContext(),\n\t\t};\n\t}\n\n\t/**\n\t * Return the current time of the Context clock plus the lookAhead.\n\t */\n\tnow(): Seconds {\n\t\treturn this.context.currentTime + this.context.lookAhead;\n\t}\n\n\t/**\n\t * Return the current time of the Context clock without any lookAhead.\n\t */\n\timmediate(): Seconds {\n\t\treturn this.context.currentTime;\n\t}\n\n\t/**\n\t * The duration in seconds of one sample.\n\t */\n\tget sampleTime(): Seconds {\n\t\treturn 1 / this.context.sampleRate;\n\t}\n\n\t/**\n\t * The number of seconds of 1 processing block (128 samples)\n\t */\n\tget blockTime(): Seconds {\n\t\treturn 128 / this.context.sampleRate;\n\t}\n\n\t/**\n\t * Convert the incoming time to seconds\n\t */\n\ttoSeconds(time?: Time): Seconds {\n\t\treturn new TimeClass(this.context, time).toSeconds();\n\t}\n\n\t/**\n\t * Convert the input to a frequency number\n\t */\n\ttoFrequency(freq: Frequency): Hertz {\n\t\treturn new FrequencyClass(this.context, freq).toFrequency();\n\t}\n\n\t/**\n\t * Convert the input time into ticks\n\t */\n\ttoTicks(time?: Time | TimeClass): Ticks {\n\t\treturn new TransportTimeClass(this.context, time).toTicks();\n\t}\n\n\t//-------------------------------------\n\t// \tGET/SET\n\t//-------------------------------------\n\n\t/**\n\t * Get a subset of the properties which are in the partial props\n\t */\n\tprotected _getPartialProperties(props: Options): Partial<Options> {\n\t\tconst options = this.get();\n\t\t// remove attributes from the prop that are not in the partial\n\t\tObject.keys(options).forEach(name => {\n\t\t\tif (isUndef(props[name])) {\n\t\t\t\tdelete options[name];\n\t\t\t}\n\t\t});\n\t\treturn options;\n\t}\n\n\t/**\n\t * Get the object's attributes.\n\t * @example\n\t * import { Oscillator } from \"tone\";\n\t * const osc = new Oscillator();\n\t * console.log(osc.get());\n\t * // returns {\"type\" : \"sine\", \"frequency\" : 440, ...etc}\n\t */\n\tget(): Options {\n\t\tconst defaults = getDefaultsFromInstance(this) as Options;\n\t\tObject.keys(defaults).forEach(attribute => {\n\t\t\tif (Reflect.has(this, attribute)) {\n\t\t\t\tconst member = this[attribute];\n\t\t\t\tif (isDefined(member) && isDefined(member.value) && isDefined(member.setValueAtTime)) {\n\t\t\t\t\tdefaults[attribute] = member.value;\n\t\t\t\t} else if (member instanceof ToneWithContext) {\n\t\t\t\t\tdefaults[attribute] = member._getPartialProperties(defaults[attribute]);\n\t\t\t\t// otherwise make sure it's a serializable type\n\t\t\t\t} else if (isArray(member) || isNumber(member) || isString(member) || isBoolean(member)) {\n\t\t\t\t\tdefaults[attribute] = member;\n\t\t\t\t} else {\n\t\t\t\t\t// remove all undefined and unserializable attributes\n\t\t\t\t\tdelete defaults[attribute];\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn defaults;\n\t}\n\n\t/**\n\t * Set multiple properties at once with an object.\n\t * @example\n\t * import { Filter } from \"tone\";\n\t * const filter = new Filter();\n\t * // set values using an object\n\t * filter.set({\n\t * \tfrequency: 300,\n\t * \ttype: \"highpass\"\n\t * });\n\t */\n\tset(props: RecursivePartial<Options>): this {\n\t\tObject.keys(props).forEach(attribute => {\n\t\t\tif (Reflect.has(this, attribute) && isDefined(this[attribute])) {\n\t\t\t\tif (this[attribute] && isDefined(this[attribute].value) && isDefined(this[attribute].setValueAtTime)) {\n\t\t\t\t\t// small optimization\n\t\t\t\t\tif (this[attribute].value !== props[attribute]) {\n\t\t\t\t\t\tthis[attribute].value = props[attribute];\n\t\t\t\t\t}\n\t\t\t\t} else if (this[attribute] instanceof ToneWithContext) {\n\t\t\t\t\tthis[attribute].set(props[attribute]);\n\t\t\t\t} else {\n\t\t\t\t\tthis[attribute] = props[attribute];\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n}\n","import { AbstractParam } from \"../context/AbstractParam\";\nimport { dbToGain, gainToDb } from \"../type/Conversions\";\nimport { AudioRange, Decibels, Frequency, NormalRange, Positive, Time, UnitMap, UnitName } from \"../type/Units\";\nimport { isAudioParam } from \"../util/AdvancedTypeCheck\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isDefined } from \"../util/TypeCheck\";\nimport { ToneWithContext, ToneWithContextOptions } from \"./ToneWithContext\";\nimport { EQ } from \"../util/Math\";\n\nexport interface ParamOptions<TypeName extends UnitName> extends ToneWithContextOptions {\n\tunits: TypeName;\n\tvalue?: UnitMap[TypeName];\n\tparam: AudioParam | Param<TypeName>;\n\tconvert: boolean;\n\tminValue?: number;\n\tmaxValue?: number;\n\tswappable?: boolean;\n}\n\n/**\n * the possible automation types\n */\ntype AutomationType = \"linearRampToValueAtTime\" | \"exponentialRampToValueAtTime\" | \"setValueAtTime\" | \"setTargetAtTime\" | \"cancelScheduledValues\";\n\ninterface TargetAutomationEvent {\n\ttype: \"setTargetAtTime\";\n\ttime: number;\n\tvalue: number;\n\tconstant: number;\n}\n\ninterface NormalAutomationEvent {\n\ttype: Exclude<AutomationType, \"setTargetAtTime\">;\n\ttime: number;\n\tvalue: number;\n}\n/**\n * The events on the automation\n */\nexport type AutomationEvent = NormalAutomationEvent | TargetAutomationEvent;\n\n/**\n * Param wraps the native Web Audio's AudioParam to provide\n * additional unit conversion functionality. It also\n * serves as a base-class for classes which have a single,\n * automatable parameter.\n */\nexport class Param<TypeName extends UnitName = \"number\">\n\textends ToneWithContext<ParamOptions<TypeName>>\n\timplements AbstractParam<TypeName> {\n\n\treadonly name: string = \"Param\";\n\n\treadonly input: GainNode | AudioParam;\n\n\treadonly units: UnitName;\n\tconvert: boolean;\n\toverridden: boolean = false;\n\n\t/**\n\t * The timeline which tracks all of the automations.\n\t */\n\tprotected _events: Timeline<AutomationEvent>;\n\n\t/**\n\t * The native parameter to control\n\t */\n\tprotected _param: AudioParam;\n\n\t/**\n\t * The default value before anything is assigned\n\t */\n\tprotected _initialValue: number;\n\n\t/**\n\t * The minimum output value\n\t */\n\tprivate _minOutput = 1e-7;\n\n\t/**\n\t * Private reference to the min and max values if passed into the constructor\n\t */\n\tprivate readonly _minValue?: number;\n\tprivate readonly _maxValue?: number;\n\n\t/**\n\t * If the underlying AudioParam can be swapped out\n\t * using the setParam method. \n\t */\n\tprotected readonly _swappable: boolean;\n\n\t/**\n\t * @param param The AudioParam to wrap\n\t * @param units The unit name\n\t * @param convert Whether or not to convert the value to the target units\n\t */\n\tconstructor(param: AudioParam, units?: TypeName, convert?: boolean);\n\tconstructor(options: Partial<ParamOptions<TypeName>>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Param.getDefaults(), arguments, [\"param\", \"units\", \"convert\"]));\n\n\t\tconst options = optionsFromArguments(Param.getDefaults(), arguments, [\"param\", \"units\", \"convert\"]);\n\n\t\tthis.assert(isDefined(options.param) &&\n\t\t\t(isAudioParam(options.param) || options.param instanceof Param), \"param must be an AudioParam\");\n\n\t\twhile (!isAudioParam(options.param)) {\n\t\t\toptions.param = options.param._param;\n\t\t}\n\n\t\tthis._swappable = isDefined(options.swappable) ? options.swappable : false;\n\t\tif (this._swappable) {\n\t\t\tthis.input = this.context.createGain();\n\t\t\t// initialize\n\t\t\tthis._param = options.param;\n\t\t\tthis.input.connect(this._param);\n\t\t} else {\n\t\t\tthis._param = this.input = options.param;\n\t\t}\n\t\tthis._events = new Timeline<AutomationEvent>(1000);\n\t\tthis._initialValue = this._param.defaultValue;\n\t\tthis.units = options.units;\n\t\tthis.convert = options.convert;\n\t\tthis._minValue = options.minValue;\n\t\tthis._maxValue = options.maxValue;\n\n\t\t// if the value is defined, set it immediately\n\t\tif (isDefined(options.value) && options.value !== this._toType(this._initialValue)) {\n\t\t\tthis.setValueAtTime(options.value, 0);\n\t\t}\n\t}\n\n\tstatic getDefaults(): ParamOptions<any> {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tconvert: true,\n\t\t\tunits: \"number\" as UnitName,\n\t\t} as ParamOptions<any>);\n\t}\n\n\tget value(): UnitMap[TypeName] {\n\t\tconst now = this.now();\n\t\treturn this.getValueAtTime(now);\n\t}\n\tset value(value) {\n\t\tthis._initialValue = this._fromType(value);\n\t\tthis.cancelScheduledValues(this.now());\n\t\tthis.setValueAtTime(value, this.now());\n\t}\n\n\tget minValue(): number {\n\t\t// if it's not the default minValue, return it\n\t\tif (isDefined(this._minValue)) {\n\t\t\treturn this._minValue;\n\t\t} else if (this.units === \"time\" || this.units === \"frequency\" ||\n\t\t\tthis.units === \"normalRange\" || this.units === \"positive\" ||\n\t\t\tthis.units === \"transportTime\" || this.units === \"ticks\" ||\n\t\t\tthis.units === \"bpm\" || this.units === \"hertz\" || this.units === \"samples\") {\n\t\t\treturn 0;\n\t\t} else if (this.units === \"audioRange\") {\n\t\t\treturn -1;\n\t\t} else if (this.units === \"decibels\") {\n\t\t\treturn -Infinity;\n\t\t} else {\n\t\t\treturn this._param.minValue;\n\t\t}\n\t}\n\n\tget maxValue(): number {\n\t\tif (isDefined(this._maxValue)) {\n\t\t\treturn this._maxValue;\n\t\t} else if (this.units === \"normalRange\" ||\n\t\t\tthis.units === \"audioRange\") {\n\t\t\treturn 1;\n\t\t} else {\n\t\t\treturn this._param.maxValue;\n\t\t}\n\t}\n\n\t/**\n\t * Type guard based on the unit name\n\t */\n\tprivate _is<T>(arg: any, type: UnitName): arg is T {\n\t\treturn this.units === type;\n\t}\n\n\t/**\n\t * Convert the given value from the type specified by Param.units\n\t * into the destination value (such as Gain or Frequency).\n\t */\n\tprotected _fromType(val: UnitMap[TypeName]): number {\n\t\tif (this.convert && !this.overridden) {\n\t\t\tif (this._is<Time>(val, \"time\")) {\n\t\t\t\treturn this.toSeconds(val);\n\t\t\t} else if (this._is<Decibels>(val, \"decibels\")) {\n\t\t\t\treturn dbToGain(val);\n\t\t\t} else if (this._is<Frequency>(val, \"frequency\")) {\n\t\t\t\treturn this.toFrequency(val);\n\t\t\t} else if (this._is<NormalRange>(val, \"normalRange\")) {\n\t\t\t\treturn Math.min(Math.max(val, 0), 1);\n\t\t\t} else if (this._is<AudioRange>(val, \"audioRange\")) {\n\t\t\t\treturn Math.min(Math.max(val, -1), 1);\n\t\t\t} else if (this._is<Positive>(val, \"positive\")) {\n\t\t\t\treturn Math.max(val, 0);\n\t\t\t} else if (this._is<number>(val, \"number\")) {\n\t\t\t\treturn val;\n\t\t\t} else {\n\t\t\t\treturn val as number;\n\t\t\t}\n\t\t} else {\n\t\t\treturn val as number;\n\t\t}\n\t}\n\n\t/**\n\t * Convert the parameters value into the units specified by Param.units.\n\t */\n\tprotected _toType(val: number): UnitMap[TypeName] {\n\t\tif (this.convert && this.units === \"decibels\") {\n\t\t\treturn gainToDb(val) as UnitMap[TypeName];\n\t\t} else {\n\t\t\treturn val as UnitMap[TypeName];\n\t\t}\n\t}\n\n\t//-------------------------------------\n\t// ABSTRACT PARAM INTERFACE\n\t// all docs are generated from ParamInterface.ts\n\t//-------------------------------------\n\n\tsetValueAtTime(value: UnitMap[TypeName], time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst numericValue = this._fromType(value);\n\t\tthis.assert(isFinite(numericValue) && isFinite(computedTime),\n\t\t\t`Invalid argument(s) to setValueAtTime: ${JSON.stringify(value)}, ${JSON.stringify(time)}`);\n\n\t\tthis.log(this.units, \"setValueAtTime\", value, computedTime);\n\t\tthis._events.add({\n\t\t\ttime: computedTime,\n\t\t\ttype: \"setValueAtTime\",\n\t\t\tvalue: numericValue,\n\t\t});\n\t\tthis._param.setValueAtTime(numericValue, computedTime);\n\t\treturn this;\n\t}\n\n\tgetValueAtTime(time: Time): UnitMap[TypeName] {\n\t\tconst computedTime = Math.max(this.toSeconds(time), 0);\n\t\tconst after = this._events.getAfter(computedTime);\n\t\tconst before = this._events.get(computedTime);\n\t\tlet value = this._initialValue;\n\t\t// if it was set by\n\t\tif (before === null) {\n\t\t\tvalue = this._initialValue;\n\t\t} else if (before.type === \"setTargetAtTime\" && (after === null || after.type === \"setValueAtTime\")) {\n\t\t\tconst previous = this._events.getBefore(before.time);\n\t\t\tlet previousVal;\n\t\t\tif (previous === null) {\n\t\t\t\tpreviousVal = this._initialValue;\n\t\t\t} else {\n\t\t\t\tpreviousVal = previous.value;\n\t\t\t}\n\t\t\tif (before.type === \"setTargetAtTime\") {\n\t\t\t\tvalue = this._exponentialApproach(before.time, previousVal, before.value, before.constant, computedTime);\n\t\t\t}\n\t\t} else if (after === null) {\n\t\t\tvalue = before.value;\n\t\t} else if (after.type === \"linearRampToValueAtTime\" || after.type === \"exponentialRampToValueAtTime\") {\n\t\t\tlet beforeValue = before.value;\n\t\t\tif (before.type === \"setTargetAtTime\") {\n\t\t\t\tconst previous = this._events.getBefore(before.time);\n\t\t\t\tif (previous === null) {\n\t\t\t\t\tbeforeValue = this._initialValue;\n\t\t\t\t} else {\n\t\t\t\t\tbeforeValue = previous.value;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (after.type === \"linearRampToValueAtTime\") {\n\t\t\t\tvalue = this._linearInterpolate(before.time, beforeValue, after.time, after.value, computedTime);\n\t\t\t} else {\n\t\t\t\tvalue = this._exponentialInterpolate(before.time, beforeValue, after.time, after.value, computedTime);\n\t\t\t}\n\t\t} else {\n\t\t\tvalue = before.value;\n\t\t}\n\t\treturn this._toType(value);\n\t}\n\n\tsetRampPoint(time: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tlet currentVal = this.getValueAtTime(time);\n\t\tthis.cancelAndHoldAtTime(time);\n\t\tif (this._fromType(currentVal) === 0) {\n\t\t\tcurrentVal = this._toType(this._minOutput);\n\t\t}\n\t\tthis.setValueAtTime(currentVal, time);\n\t\treturn this;\n\t}\n\n\tlinearRampToValueAtTime(value: UnitMap[TypeName], endTime: Time): this {\n\t\tconst numericValue = this._fromType(value);\n\t\tconst computedTime = this.toSeconds(endTime);\n\t\tthis.assert(isFinite(numericValue) && isFinite(computedTime),\n\t\t\t`Invalid argument(s) to linearRampToValueAtTime: ${JSON.stringify(value)}, ${JSON.stringify(endTime)}`);\n\t\tthis._events.add({\n\t\t\ttime: computedTime,\n\t\t\ttype: \"linearRampToValueAtTime\",\n\t\t\tvalue: numericValue,\n\t\t});\n\t\tthis.log(this.units, \"linearRampToValueAtTime\", value, computedTime);\n\t\tthis._param.linearRampToValueAtTime(numericValue, computedTime);\n\t\treturn this;\n\t}\n\n\texponentialRampToValueAtTime(value: UnitMap[TypeName], endTime: Time): this {\n\t\tlet numericValue = this._fromType(value);\n\t\tnumericValue = Math.max(this._minOutput, numericValue);\n\t\tconst computedTime = this.toSeconds(endTime);\n\t\tthis.assert(isFinite(numericValue) && isFinite(computedTime),\n\t\t\t`Invalid argument(s) to exponentialRampToValueAtTime: ${JSON.stringify(value)}, ${JSON.stringify(endTime)}`);\n\t\t// store the event\n\t\tthis._events.add({\n\t\t\ttime: computedTime,\n\t\t\ttype: \"exponentialRampToValueAtTime\",\n\t\t\tvalue: numericValue,\n\t\t});\n\t\tthis.log(this.units, \"exponentialRampToValueAtTime\", value, computedTime);\n\t\tthis._param.exponentialRampToValueAtTime(numericValue, computedTime);\n\t\treturn this;\n\t}\n\n\texponentialRampTo(value: UnitMap[TypeName], rampTime: Time, startTime?: Time): this {\n\t\tstartTime = this.toSeconds(startTime);\n\t\tthis.setRampPoint(startTime);\n\t\tthis.exponentialRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n\t\treturn this;\n\t}\n\n\tlinearRampTo(value: UnitMap[TypeName], rampTime: Time, startTime?: Time): this {\n\t\tstartTime = this.toSeconds(startTime);\n\t\tthis.setRampPoint(startTime);\n\t\tthis.linearRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n\t\treturn this;\n\t}\n\n\ttargetRampTo(value: UnitMap[TypeName], rampTime: Time, startTime?: Time): this {\n\t\tstartTime = this.toSeconds(startTime);\n\t\tthis.setRampPoint(startTime);\n\t\tthis.exponentialApproachValueAtTime(value, startTime, rampTime);\n\t\treturn this;\n\t}\n\n\texponentialApproachValueAtTime(value: UnitMap[TypeName], time: Time, rampTime: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\trampTime = this.toSeconds(rampTime);\n\t\tconst timeConstant = Math.log(rampTime + 1) / Math.log(200);\n\t\tthis.setTargetAtTime(value, time, timeConstant);\n\t\t// at 90% start a linear ramp to the final value\n\t\tthis.cancelAndHoldAtTime(time + rampTime * 0.9);\n\t\tthis.linearRampToValueAtTime(value, time + rampTime);\n\t\treturn this;\n\t}\n\n\tsetTargetAtTime(value: UnitMap[TypeName], startTime: Time, timeConstant: Positive): this {\n\t\tconst numericValue = this._fromType(value);\n\t\t// The value will never be able to approach without timeConstant > 0.\n\t\tthis.assert(isFinite(timeConstant) && timeConstant > 0, \"timeConstant must be a number greater than 0\");\n\t\tconst computedTime = this.toSeconds(startTime);\n\t\tthis.assert(isFinite(numericValue) && isFinite(computedTime),\n\t\t\t`Invalid argument(s) to setTargetAtTime: ${JSON.stringify(value)}, ${JSON.stringify(startTime)}`);\n\t\tthis._events.add({\n\t\t\tconstant: timeConstant,\n\t\t\ttime: computedTime,\n\t\t\ttype: \"setTargetAtTime\",\n\t\t\tvalue: numericValue,\n\t\t});\n\t\tthis.log(this.units, \"setTargetAtTime\", value, computedTime, timeConstant);\n\t\tthis._param.setTargetAtTime(numericValue, computedTime, timeConstant);\n\t\treturn this;\n\t}\n\n\tsetValueCurveAtTime(values: UnitMap[TypeName][], startTime: Time, duration: Time, scaling: number = 1): this {\n\t\tduration = this.toSeconds(duration);\n\t\tstartTime = this.toSeconds(startTime);\n\t\tconst startingValue = this._fromType(values[0]) * scaling;\n\t\tthis.setValueAtTime(this._toType(startingValue), startTime);\n\t\tconst segTime = duration / (values.length - 1);\n\t\tfor (let i = 1; i < values.length; i++) {\n\t\t\tconst numericValue = this._fromType(values[i]) * scaling;\n\t\t\tthis.linearRampToValueAtTime(this._toType(numericValue), startTime + i * segTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\tcancelScheduledValues(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis.assert(isFinite(computedTime), `Invalid argument to cancelScheduledValues: ${JSON.stringify(time)}`);\n\t\tthis._events.cancel(computedTime);\n\t\tthis._param.cancelScheduledValues(computedTime);\n\t\tthis.log(this.units, \"cancelScheduledValues\", computedTime);\n\t\treturn this;\n\t}\n\n\tcancelAndHoldAtTime(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst valueAtTime = this._fromType(this.getValueAtTime(computedTime));\n\t\t// remove the schedule events\n\t\tthis.assert(isFinite(computedTime), `Invalid argument to cancelAndHoldAtTime: ${JSON.stringify(time)}`);\n\n\t\tthis.log(this.units, \"cancelAndHoldAtTime\", computedTime, \"value=\" + valueAtTime);\n\t\t\n\t\t// if there is an event at the given computedTime\n\t\t// and that even is not a \"set\"\n\t\tconst before = this._events.get(computedTime);\n\t\tconst after = this._events.getAfter(computedTime);\n\t\tif (before && EQ(before.time, computedTime)) {\n\t\t\t// remove everything after\n\t\t\tif (after) {\n\t\t\t\tthis._param.cancelScheduledValues(after.time);\n\t\t\t\tthis._events.cancel(after.time);\n\t\t\t} else {\n\t\t\t\tthis._param.cancelAndHoldAtTime(computedTime);\n\t\t\t\tthis._events.cancel(computedTime + this.sampleTime);\n\t\t\t}\n\t\t} else if (after) {\n\t\t\tthis._param.cancelScheduledValues(after.time);\n\t\t\t// cancel the next event(s)\n\t\t\tthis._events.cancel(after.time);\n\t\t\tif (after.type === \"linearRampToValueAtTime\") {\n\t\t\t\tthis.linearRampToValueAtTime(this._toType(valueAtTime), computedTime);\n\t\t\t} else if (after.type === \"exponentialRampToValueAtTime\") {\n\t\t\t\tthis.exponentialRampToValueAtTime(this._toType(valueAtTime), computedTime);\n\t\t\t}\n\t\t}\n\n\t\t// set the value at the given time\n\t\tthis._events.add({\n\t\t\ttime: computedTime,\n\t\t\ttype: \"setValueAtTime\",\n\t\t\tvalue: valueAtTime,\n\t\t});\n\t\tthis._param.setValueAtTime(valueAtTime, computedTime);\n\t\treturn this;\n\t}\n\n\trampTo(value: UnitMap[TypeName], rampTime: Time = 0.1, startTime?: Time): this {\n\t\tif (this.units === \"frequency\" || this.units === \"bpm\" || this.units === \"decibels\") {\n\t\t\tthis.exponentialRampTo(value, rampTime, startTime);\n\t\t} else {\n\t\t\tthis.linearRampTo(value, rampTime, startTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Apply all of the previously scheduled events to the passed in Param or AudioParam.\n\t * The applied values will start at the context's current time and schedule\n\t * all of the events which are scheduled on this Param onto the passed in param.\n\t */\n\tapply(param: Param | AudioParam): this {\n\t\tconst now = this.context.currentTime;\n\t\t// set the param's value at the current time and schedule everything else\n\t\tparam.setValueAtTime(this.getValueAtTime(now) as number, now);\n\t\t// if the previous event was a curve, then set the rest of it\n\t\tconst previousEvent = this._events.get(now);\n\t\tif (previousEvent && previousEvent.type === \"setTargetAtTime\") {\n\t\t\t// approx it until the next event with linear ramps\n\t\t\tconst nextEvent = this._events.getAfter(previousEvent.time);\n\t\t\t// or for 2 seconds if there is no event\n\t\t\tconst endTime = nextEvent ? nextEvent.time : now + 2;\n\t\t\tconst subdivisions = (endTime - now) / 10;\n\t\t\tfor (let i = now; i < endTime; i += subdivisions) {\n\t\t\t\tparam.linearRampToValueAtTime(this.getValueAtTime(i) as number, i);\n\t\t\t}\n\t\t}\n\t\tthis._events.forEachAfter(this.context.currentTime, event => {\n\t\t\tif (event.type === \"cancelScheduledValues\") {\n\t\t\t\tparam.cancelScheduledValues(event.time);\n\t\t\t} else if (event.type === \"setTargetAtTime\") {\n\t\t\t\tparam.setTargetAtTime(event.value, event.time, event.constant);\n\t\t\t} else {\n\t\t\t\tparam[event.type](event.value, event.time);\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Replace the Param's internal AudioParam. Will apply scheduled curves \n\t * onto the parameter and replace the connections.\n\t */\n\tsetParam(param: AudioParam): this {\n\t\tthis.assert(this._swappable, \"The Param must be assigned as 'swappable' in the constructor\");\n\t\tconst input = this.input as GainNode;\n\t\tinput.disconnect(this._param);\n\t\tthis.apply(param);\n\t\tthis._param = param;\n\t\tinput.connect(this._param);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._events.dispose();\n\t\treturn this;\n\t}\n\n\tget defaultValue(): UnitMap[TypeName] {\n\t\treturn this._toType(this._param.defaultValue);\n\t}\n\n\t//-------------------------------------\n\t// \tAUTOMATION CURVE CALCULATIONS\n\t// \tMIT License, copyright (c) 2014 Jordan Santell\n\t//-------------------------------------\n\n\t// Calculates the the value along the curve produced by setTargetAtTime\n\tprotected _exponentialApproach(t0: number, v0: number, v1: number, timeConstant: number, t: number): number {\n\t\treturn v1 + (v0 - v1) * Math.exp(-(t - t0) / timeConstant);\n\t}\n\n\t// Calculates the the value along the curve produced by linearRampToValueAtTime\n\tprotected _linearInterpolate(t0: number, v0: number, t1: number, v1: number, t: number): number {\n\t\treturn v0 + (v1 - v0) * ((t - t0) / (t1 - t0));\n\t}\n\n\t// Calculates the the value along the curve produced by exponentialRampToValueAtTime\n\tprotected _exponentialInterpolate(t0: number, v0: number, t1: number, v1: number, t: number): number {\n\t\treturn v0 * Math.pow(v1 / v0, (t - t0) / (t1 - t0));\n\t}\n}\n","import { isAudioNode, isAudioParam } from \"../util/AdvancedTypeCheck\";\nimport { assert } from \"../util/Debug\";\nimport { isDefined } from \"../util/TypeCheck\";\nimport { Param } from \"./Param\";\nimport { ToneWithContext, ToneWithContextOptions } from \"./ToneWithContext\";\nimport { warn } from \"../util/Debug\";\n\nexport type InputNode = ToneAudioNode | AudioNode | Param<any> | AudioParam;\nexport type OutputNode = ToneAudioNode | AudioNode;\n\ninterface ChannelProperties {\n\tchannelCount: number;\n\tchannelCountMode: ChannelCountMode;\n\tchannelInterpretation: ChannelInterpretation;\n}\n\n/**\n * The possible options for this node\n */\nexport type ToneAudioNodeOptions = ToneWithContextOptions;\n\n/**\n * ToneAudioNode is the base class for classes which process audio.\n */\nexport abstract class ToneAudioNode<Options extends ToneAudioNodeOptions = ToneAudioNodeOptions>\n\textends ToneWithContext<Options> {\n\n\t/**\n\t * The name of the class\n\t */\n\tabstract readonly name: string = \"AudioNode\";\n\n\t/**\n\t * The input node or nodes. If the object is a source,\n\t * it does not have any input and this.input is undefined.\n\t */\n\tabstract input: InputNode | undefined;\n\n\t/**\n\t * The output nodes. If the object is a sink,\n\t * it does not have any output and this.output is undefined.\n\t */\n\tabstract output: OutputNode | undefined;\n\n\t/**\n\t * The number of inputs feeding into the AudioNode.\n\t * For source nodes, this will be 0.\n\t */\n\tget numberOfInputs(): number {\n\t\tif (isDefined(this.input)) {\n\t\t\tif (isAudioParam(this.input) || this.input instanceof Param) {\n\t\t\t\treturn 1;\n\t\t\t} else {\n\t\t\t\treturn this.input.numberOfInputs;\n\t\t\t}\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * The number of outputs of the AudioNode.\n\t */\n\tget numberOfOutputs(): number {\n\t\tif (isDefined(this.output)) {\n\t\t\treturn this.output.numberOfOutputs;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * List all of the node that must be set to match the ChannelProperties\n\t */\n\tprotected _internalChannels: OutputNode[] = [];\n\n\t//-------------------------------------\n\t// AUDIO PROPERTIES\n\t//-------------------------------------\n\n\t/**\n\t * Used to decide which nodes to get/set properties on\n\t */\n\tprivate _isAudioNode(node: any): node is AudioNode | ToneAudioNode {\n\t\treturn isDefined(node) && (node instanceof ToneAudioNode || isAudioNode(node));\n\t}\n\n\t/**\n\t * Get all of the audio nodes (either internal or input/output) which together\n\t * make up how the class node responds to channel input/output\n\t */\n\tprivate _getInternalNodes(): OutputNode[] {\n\t\tconst nodeList = this._internalChannels.slice(0);\n\t\tif (this._isAudioNode(this.input)) {\n\t\t\tnodeList.push(this.input);\n\t\t}\n\t\tif (this._isAudioNode(this.output)) {\n\t\t\tif (this.input !== this.output) {\n\t\t\t\tnodeList.push(this.output);\n\t\t\t}\n\t\t}\n\t\treturn nodeList;\n\t}\n\n\t/**\n\t * Set the audio options for this node such as channelInterpretation\n\t * channelCount, etc.\n\t * @param options\n\t */\n\tprivate _setChannelProperties(options: ChannelProperties): void {\n\t\tconst nodeList = this._getInternalNodes();\n\t\tnodeList.forEach(node => {\n\t\t\tnode.channelCount = options.channelCount;\n\t\t\tnode.channelCountMode = options.channelCountMode;\n\t\t\tnode.channelInterpretation = options.channelInterpretation;\n\t\t});\n\t}\n\n\t/**\n\t * Get the current audio options for this node such as channelInterpretation\n\t * channelCount, etc.\n\t */\n\tprivate _getChannelProperties(): ChannelProperties {\n\t\tconst nodeList = this._getInternalNodes();\n\t\tthis.assert(nodeList.length > 0, \"ToneAudioNode does not have any internal nodes\");\n\t\t// use the first node to get properties\n\t\t// they should all be the same\n\t\tconst node = nodeList[0];\n\t\treturn {\n\t\t\tchannelCount: node.channelCount,\n\t\t\tchannelCountMode: node.channelCountMode,\n\t\t\tchannelInterpretation: node.channelInterpretation,\n\t\t};\n\t}\n\n\t/**\n\t * channelCount is the number of channels used when up-mixing and down-mixing\n\t * connections to any inputs to the node. The default value is 2 except for\n\t * specific nodes where its value is specially determined.\n\t */\n\tget channelCount(): number {\n\t\treturn this._getChannelProperties().channelCount;\n\t}\n\tset channelCount(channelCount) {\n\t\tconst props = this._getChannelProperties();\n\t\t// merge it with the other properties\n\t\tthis._setChannelProperties(Object.assign(props, { channelCount }));\n\t}\n\n\t/**\n\t * channelCountMode determines how channels will be counted when up-mixing and\n\t * down-mixing connections to any inputs to the node.\n\t * The default value is \"max\". This attribute has no effect for nodes with no inputs.\n\t * * \"max\" - computedNumberOfChannels is the maximum of the number of channels of all connections to an input. In this mode channelCount is ignored.\n\t * * \"clamped-max\" - computedNumberOfChannels is determined as for \"max\" and then clamped to a maximum value of the given channelCount.\n\t * * \"explicit\" - computedNumberOfChannels is the exact value as specified by the channelCount.\n\t */\n\tget channelCountMode(): ChannelCountMode {\n\t\treturn this._getChannelProperties().channelCountMode;\n\t}\n\tset channelCountMode(channelCountMode) {\n\t\tconst props = this._getChannelProperties();\n\t\t// merge it with the other properties\n\t\tthis._setChannelProperties(Object.assign(props, { channelCountMode }));\n\t}\n\n\t/**\n\t * channelInterpretation determines how individual channels will be treated\n\t * when up-mixing and down-mixing connections to any inputs to the node.\n\t * The default value is \"speakers\".\n\t */\n\tget channelInterpretation(): ChannelInterpretation {\n\t\treturn this._getChannelProperties().channelInterpretation;\n\t}\n\tset channelInterpretation(channelInterpretation) {\n\t\tconst props = this._getChannelProperties();\n\t\t// merge it with the other properties\n\t\tthis._setChannelProperties(Object.assign(props, { channelInterpretation }));\n\t}\n\n\t//-------------------------------------\n\t// CONNECTIONS\n\t//-------------------------------------\n\n\t/**\n\t * connect the output of a ToneAudioNode to an AudioParam, AudioNode, or ToneAudioNode\n\t * @param destination The output to connect to\n\t * @param outputNum The output to connect from\n\t * @param inputNum The input to connect to\n\t */\n\tconnect(destination: InputNode, outputNum = 0, inputNum = 0): this {\n\t\tconnect(this, destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Connect the output to the context's destination node.\n\t */\n\ttoDestination(): this {\n\t\tthis.connect(this.context.destination);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Connect the output to the context's destination node.\n\t * See [[toDestination]]\n\t * @deprecated\n\t */\n\ttoMaster(): this {\n\t\twarn(\"toMaster() has been renamed toDestination()\");\n\t\treturn this.toDestination();\n\t}\n\n\t/**\n\t * disconnect the output\n\t */\n\tdisconnect(destination?: InputNode, outputNum = 0, inputNum = 0): this {\n\t\tdisconnect(this, destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Connect the output of this node to the rest of the nodes in series.\n\t * @example\n\t * import { Destination, Filter, Oscillator, Volume } from \"tone\";\n\t * const osc = new Oscillator().start();\n\t * const filter = new Filter();\n\t * const volume = new Volume(-8);\n\t * // connect a node to the filter, volume and then to the master output\n\t * osc.chain(filter, volume, Destination);\n\t */\n\tchain(...nodes: InputNode[]): this {\n\t\tconnectSeries(this, ...nodes);\n\t\treturn this;\n\t}\n\n\t/**\n\t * connect the output of this node to the rest of the nodes in parallel.\n\t */\n\tfan(...nodes: InputNode[]): this {\n\t\tnodes.forEach(node => this.connect(node));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Dispose and disconnect\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (isDefined(this.input)) {\n\t\t\tif (this.input instanceof ToneAudioNode) {\n\t\t\t\tthis.input.dispose();\n\t\t\t} else if (isAudioNode(this.input)) {\n\t\t\t\tthis.input.disconnect();\n\t\t\t}\n\t\t}\n\t\tif (isDefined(this.output)) {\n\t\t\tif (this.output instanceof ToneAudioNode) {\n\t\t\t\tthis.output.dispose();\n\t\t\t} else if (isAudioNode(this.output)) {\n\t\t\t\tthis.output.disconnect();\n\t\t\t}\n\t\t}\n\t\tthis._internalChannels = [];\n\t\treturn this;\n\t}\n}\n\n//-------------------------------------\n// CONNECTIONS\n//-------------------------------------\n\n/**\n * connect together all of the arguments in series\n * @param nodes\n */\nexport function connectSeries(...nodes: InputNode[]): void {\n\tconst first = nodes.shift();\n\tnodes.reduce((prev, current) => {\n\t\tif (prev instanceof ToneAudioNode) {\n\t\t\tprev.connect(current);\n\t\t} else if (isAudioNode(prev)) {\n\t\t\tconnect(prev, current);\n\t\t}\n\t\treturn current;\n\t}, first);\n}\n\n/**\n * Connect two nodes together so that signal flows from the\n * first node to the second. Optionally specify the input and output channels.\n * @param srcNode The source node\n * @param dstNode The destination node\n * @param outputNumber The output channel of the srcNode\n * @param inputNumber The input channel of the dstNode\n */\nexport function connect(srcNode: OutputNode, dstNode: InputNode, outputNumber = 0, inputNumber = 0): void {\n\n\tassert(isDefined(srcNode), \"Cannot connect from undefined node\");\n\tassert(isDefined(dstNode), \"Cannot connect to undefined node\");\n\n\tif (dstNode instanceof ToneAudioNode || isAudioNode(dstNode)) {\n\t\tassert(dstNode.numberOfInputs > 0, \"Cannot connect to node with no inputs\");\n\t}\n\tassert(srcNode.numberOfOutputs > 0, \"Cannot connect from node with no outputs\");\n\n\t// resolve the input of the dstNode\n\twhile ((dstNode instanceof ToneAudioNode || dstNode instanceof Param)) {\n\t\tif (isDefined(dstNode.input)) {\n\t\t\tdstNode = dstNode.input;\n\t\t}\n\t}\n\n\twhile (srcNode instanceof ToneAudioNode) {\n\t\tif (isDefined(srcNode.output)) {\n\t\t\tsrcNode = srcNode.output;\n\t\t}\n\t}\n\n\t// make the connection\n\tif (isAudioParam(dstNode)) {\n\t\tsrcNode.connect(dstNode as AudioParam, outputNumber);\n\t} else {\n\t\tsrcNode.connect(dstNode, outputNumber, inputNumber);\n\t}\n}\n\n/**\n * Disconnect a node from all nodes or optionally include a destination node and input/output channels.\n * @param srcNode The source node\n * @param dstNode The destination node\n * @param outputNumber The output channel of the srcNode\n * @param inputNumber The input channel of the dstNode\n */\nexport function disconnect(\n\tsrcNode: OutputNode,\n\tdstNode?: InputNode,\n\toutputNumber = 0,\n\tinputNumber = 0,\n): void {\n\n\t// resolve the destination node\n\tif (isDefined(dstNode)) {\n\t\twhile (dstNode instanceof ToneAudioNode) {\n\t\t\tdstNode = dstNode.input;\n\t\t}\n\t}\n\n\t// resolve the src node\n\twhile (!(isAudioNode(srcNode))) {\n\t\tif (isDefined(srcNode.output)) {\n\t\t\tsrcNode = srcNode.output;\n\t\t}\n\t}\n\n\tif (isAudioParam(dstNode)) {\n\t\tsrcNode.disconnect(dstNode, outputNumber);\n\t} else if (isAudioNode(dstNode)) {\n\t\tsrcNode.disconnect(dstNode, outputNumber, inputNumber);\n\t} else {\n\t\tsrcNode.disconnect();\n\t}\n}\n","import { Param } from \"../context/Param\";\nimport { UnitMap, UnitName } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"./ToneAudioNode\";\n\ninterface GainOptions<TypeName extends UnitName> extends ToneAudioNodeOptions {\n\tgain: UnitMap[TypeName];\n\tunits: TypeName;\n\tconvert: boolean;\n}\n\n/**\n * A thin wrapper around the Native Web Audio GainNode.\n * The GainNode is a basic building block of the Web Audio\n * API and is useful for routing audio and adjusting gains.\n * @category Core\n */\nexport class Gain<TypeName extends \"gain\" | \"decibels\" | \"normalRange\" = \"gain\"> extends ToneAudioNode<GainOptions<TypeName>> {\n\n\treadonly name: string = \"Gain\";\n\n\t/**\n\t * The gain parameter of the gain node.\n\t */\n\treadonly gain: Param<TypeName>;\n\n\t/**\n\t * The wrapped GainNode.\n\t */\n\tprivate _gainNode: GainNode = this.context.createGain();\n\n\t// input = output\n\treadonly input: GainNode = this._gainNode;\n\treadonly output: GainNode = this._gainNode;\n\n\t/**\n\t * @param  gain The initial gain of the GainNode\n\t * @param units The units of the gain parameter.\n\t */\n\tconstructor(gain?: UnitMap[TypeName], units?: TypeName);\n\tconstructor(options?: Partial<GainOptions<TypeName>>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Gain.getDefaults(), arguments, [\"gain\", \"units\"]));\n\t\tconst options = optionsFromArguments(Gain.getDefaults(), arguments, [\"gain\", \"units\"]);\n\n\t\tthis.gain = new Param({\n\t\t\tcontext: this.context,\n\t\t\tconvert: options.convert,\n\t\t\tparam: this._gainNode.gain,\n\t\t\tunits: options.units,\n\t\t\tvalue: options.gain,\n\t\t});\n\t\treadOnly(this, \"gain\");\n\t}\n\n\tstatic getDefaults(): GainOptions<any> {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tconvert: true,\n\t\t\tgain: 1,\n\t\t\tunits: \"gain\",\n\t\t});\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._gainNode.disconnect();\n\t\tthis.gain.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Decibels } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\n\ninterface VolumeOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n\tmute: boolean;\n}\n\n/**\n * Volume is a simple volume node, useful for creating a volume fader.\n *\n * @example\n * import { Oscillator, Volume } from \"tone\";\n * const vol = new Volume(-12).toDestination();\n * const osc = new Oscillator().connect(vol).start();\n * @category Component\n */\nexport class Volume extends ToneAudioNode<VolumeOptions> {\n\n\treadonly name: string = \"Volume\";\n\n\t/**\n\t * the output node\n\t */\n\toutput: Gain<\"decibels\">;\n\n\t/**\n\t * Input and output are the same\n\t */\n\tinput: Gain<\"decibels\">;\n\n\t/**\n\t * The unmuted volume\n\t */\n\tprivate _unmutedVolume: Decibels;\n\n\t/**\n\t * The volume control in decibels.\n\t * @example\n\t * import { Oscillator, Volume } from \"tone\";\n\t * const vol = new Volume().toDestination();\n\t * const osc = new Oscillator().connect(vol).start();\n\t * vol.volume.value = -20;\n\t */\n\tvolume: Param<\"decibels\">;\n\n\t/**\n\t * @param volume the initial volume in decibels\n\t */\n\tconstructor(volume?: Decibels);\n\tconstructor(options?: Partial<VolumeOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Volume.getDefaults(), arguments, [\"volume\"]));\n\t\tconst options = optionsFromArguments(Volume.getDefaults(), arguments, [\"volume\"]);\n\n\t\tthis.input = this.output = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: options.volume,\n\t\t\tunits: \"decibels\",\n\t\t});\n\t\tthis.volume = this.output.gain;\n\t\treadOnly(this, \"volume\");\n\t\tthis._unmutedVolume = options.volume;\n\n\t\t// set the mute initially\n\t\tthis.mute = options.mute;\n\t}\n\n\tstatic getDefaults(): VolumeOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmute: false,\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Mute the output.\n\t * @example\n\t * import { Oscillator, Volume } from \"tone\";\n\t * const vol = new Volume(-12).toDestination();\n\t * const osc = new Oscillator().connect(vol).start();\n\t * // mute the output\n\t * vol.mute = true;\n\t */\n\tget mute(): boolean {\n\t\treturn this.volume.value === -Infinity;\n\t}\n\tset mute(mute: boolean) {\n\t\tif (!this.mute && mute) {\n\t\t\tthis._unmutedVolume = this.volume.value;\n\t\t\t// maybe it should ramp here?\n\t\t\tthis.volume.value = -Infinity;\n\t\t} else if (this.mute && !mute) {\n\t\t\tthis.volume.value = this._unmutedVolume;\n\t\t}\n\t}\n\n\t/**\n\t * clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.input.dispose();\n\t\tthis.volume.dispose();\n\t\treturn this;\n\t}\n}\n","import { Volume } from \"../../component/channel/Volume\";\nimport { connectSeries } from \"../Connect\";\nimport { Decibels } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { onContextClose, onContextInit } from \"./ContextInitialization\";\nimport { Gain } from \"./Gain\";\nimport { Param } from \"./Param\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"./ToneAudioNode\";\n\ninterface DestinationOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n\tmute: boolean;\n}\n\n/**\n * A single master output which is connected to the\n * AudioDestinationNode (aka your speakers).\n * It provides useful conveniences such as the ability\n * to set the volume and mute the entire application.\n * It also gives you the ability to apply master effects to your application.\n *\n * @example\n * import { Destination, Oscillator } from \"tone\";\n * const oscillator = new Oscillator().start();\n * // the audio will go from the oscillator to the speakers\n * oscillator.connect(Destination);\n * // a convenience for connecting to the master output is also provided:\n * oscillator.toDestination();\n * // these two are equivalent.\n * @category Core\n */\nexport class Destination extends ToneAudioNode<DestinationOptions> {\n\n\treadonly name: string = \"Destination\";\n\n\tinput: Volume = new Volume({ context: this.context });\n\toutput: Gain = new Gain({ context: this.context });\n\n\t/**\n\t * The volume of the master output.\n\t */\n\tvolume: Param<\"decibels\"> = this.input.volume;\n\n\tconstructor(options: Partial<DestinationOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Destination.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Destination.getDefaults(), arguments);\n\n\t\tconnectSeries(this.input, this.output, this.context.rawContext.destination);\n\n\t\tthis.mute = options.mute;\n\t}\n\n\tstatic getDefaults(): DestinationOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmute: false,\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Mute the output.\n\t * @example\n\t * import { Destination, Oscillator } from \"tone\";\n\t * const oscillator = new Oscillator().start().toDestination();\n\t * // mute the output\n\t * Destination.mute = true;\n\t */\n\tget mute(): boolean {\n\t\treturn this.input.mute;\n\t}\n\n\tset mute(mute: boolean) {\n\t\tthis.input.mute = mute;\n\t}\n\n\t/**\n\t * Add a master effects chain. NOTE: this will disconnect any nodes which were previously\n\t * chained in the master effects chain.\n\t * @param args All arguments will be connected in a row and the Master will be routed through it.\n\t * @return  {Destination}  this\n\t * @example\n\t * import { Compressor, Destination, Filter } from \"tone\";\n\t * // some overall compression to keep the levels in check\n\t * const masterCompressor = new Compressor({\n\t * \tthreshold: -6,\n\t * \tratio: 3,\n\t * \tattack: 0.5,\n\t * \trelease: 0.1\n\t * });\n\t * // give a little boost to the lows\n\t * const lowBump = new Filter(200, \"lowshelf\");\n\t * // route everything through the filter and compressor before going to the speakers\n\t * Destination.chain(lowBump, masterCompressor);\n\t */\n\tchain(...args: Array<AudioNode | ToneAudioNode>): this {\n\t\tthis.input.disconnect();\n\t\targs.unshift(this.input);\n\t\targs.push(this.output);\n\t\tconnectSeries(...args);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.volume.dispose();\n\t\treturn this;\n\t}\n}\n\n//-------------------------------------\n// \tINITIALIZATION\n//-------------------------------------\n\nonContextInit(context => {\n\tcontext.destination = new Destination({ context });\n});\n\nonContextClose(context => {\n\tcontext.destination.dispose();\n});\n","import { Param } from \"../context/Param\";\nimport { Time } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"./ToneAudioNode\";\n\nexport interface DelayOptions extends ToneAudioNodeOptions {\n\tdelayTime: Time;\n\tmaxDelay: Time;\n}\n\n/**\n * Wrapper around Web Audio's native [DelayNode](http://webaudio.github.io/web-audio-api/#the-delaynode-interface).\n * @category Core\n */\nexport class Delay extends ToneAudioNode<DelayOptions> {\n\n\treadonly name: string = \"Delay\";\n\n\t/**\n\t * The maximum delay time. This cannot be changed after\n\t * the value is passed into the constructor.\n\t */\n\treadonly maxDelay: Time;\n\n\t/**\n\t * The amount of time the incoming signal is delayed.\n\t */\n\treadonly delayTime: Param<\"time\">;\n\n\t/**\n\t * Private reference to the internal DelayNode\n\t */\n\tprivate _delayNode: DelayNode;\n\treadonly input: DelayNode;\n\treadonly output: DelayNode;\n\n\t/**\n\t * @param delayTime The delay applied to the incoming signal.\n\t * @param maxDelay The maximum delay time.\n\t */\n\tconstructor(delayTime?: Time, maxDelay?: Time);\n\tconstructor(options?: Partial<DelayOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Delay.getDefaults(), arguments, [\"delayTime\", \"maxDelay\"]));\n\n\t\tconst options = optionsFromArguments(Delay.getDefaults(), arguments, [\"delayTime\", \"maxDelay\"]);\n\n\t\tconst maxDelayInSeconds = this.toSeconds(options.maxDelay);\n\t\tthis.maxDelay = Math.max(maxDelayInSeconds, this.toSeconds(options.delayTime));\n\n\t\tthis._delayNode = this.input = this.output = this.context.createDelay(maxDelayInSeconds);\n\n\t\tthis.delayTime = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._delayNode.delayTime,\n\t\t\tunits: \"time\",\n\t\t\tvalue: options.delayTime,\n\t\t});\n\n\t\treadOnly(this, \"delayTime\");\n\t}\n\n\tstatic getDefaults(): DelayOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tdelayTime: 0,\n\t\t\tmaxDelay: 1,\n\t\t});\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._delayNode.disconnect();\n\t\tthis.delayTime.dispose();\n\t\treturn this;\n\t}\n}\n","import { getContext, setContext } from \"../Global\";\nimport { Seconds } from \"../type/Units\";\nimport { OfflineContext } from \"./OfflineContext\";\nimport { ToneAudioBuffer } from \"./ToneAudioBuffer\";\n\n/**\n * Generate a buffer by rendering all of the Tone.js code within the callback using the OfflineAudioContext.\n * The OfflineAudioContext is capable of rendering much faster than real time in many cases.\n * The callback function also passes in an offline instance of [[Context]] which can be used\n * to schedule events along the Transport. \n * @param  callback  All Tone.js nodes which are created and scheduled within this callback are recorded into the output Buffer.\n * @param  duration     the amount of time to record for.\n * @return  The promise which is invoked with the ToneAudioBuffer of the recorded output.\n * @example\n * import { Offline, Oscillator } from \"tone\";\n * // render 2 seconds of the oscillator\n * Offline(() => {\n * \t// only nodes created in this callback will be recorded\n * \tconst oscillator = new Oscillator().toDestination().start(0);\n * }, 2).then((buffer) => {\n * \t// do something with the output buffer\n * \tconsole.log(buffer);\n * });\n * @example\n * import { Offline, Oscillator } from \"tone\";\n * // can also schedule events along the Transport\n * // using the passed in Offline Transport\n * Offline(({ transport }) => {\n * \tconst osc = new Oscillator().toDestination();\n * \ttransport.schedule(time => {\n * \t\tosc.start(time).stop(time + 0.1);\n * \t}, 1);\n * \t// make sure to start the transport\n * \ttransport.start(0.2);\n * }, 4).then((buffer) => {\n * \t// do something with the output buffer\n * \tconsole.log(buffer);\n * });\n * @category Core\n */\nexport async function Offline(\n\tcallback: (context: OfflineContext) => Promise<void> | void,\n\tduration: Seconds,\n\tchannels: number = 2,\n\tsampleRate: number = getContext().sampleRate,\n): Promise<ToneAudioBuffer> {\n\t// set the OfflineAudioContext based on the current context\n\tconst originalContext = getContext();\n\n\tconst context = new OfflineContext(channels, duration, sampleRate);\n\tsetContext(context);\n\n\t// invoke the callback/scheduling\n\tawait callback(context);\n\n\t// then render the audio\n\tconst bufferPromise = context.render();\n\n\t// return the original AudioContext\n\tsetContext(originalContext);\n\n\t// await the rendering\n\tconst buffer = await bufferPromise;\n\n\t// return the audio\n\treturn new ToneAudioBuffer(buffer);\n}\n","import { Tone } from \"../Tone\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { noOp } from \"../util/Interface\";\nimport { isString } from \"../util/TypeCheck\";\nimport { ToneAudioBuffer } from \"./ToneAudioBuffer\";\n\nexport interface ToneAudioBuffersUrlMap {\n\t[name: string]: string | AudioBuffer | ToneAudioBuffer;\n\t[name: number]: string | AudioBuffer | ToneAudioBuffer;\n}\n\ninterface ToneAudioBuffersOptions {\n\turls: ToneAudioBuffersUrlMap;\n\tonload: () => void;\n\tonerror?: (error: Error) => void;\n\tbaseUrl: string;\n}\n\n/**\n * A data structure for holding multiple buffers in a Map-like datastructure.\n *\n * @example\n * import { Player, ToneAudioBuffers } from \"tone\";\n * const pianoSamples = new ToneAudioBuffers({\n * \tC1: \"https://tonejs.github.io/examples/audio/casio/C1.mp3\",\n * \tC2: \"https://tonejs.github.io/examples/audio/casio/C2.mp3\",\n * }, () => {\n * \tconst player = new Player().toDestination();\n * \t// play one of the samples when they all load\n * \tplayer.buffer = pianoSamples.get(\"C2\");\n * \tplayer.start();\n * });\n * @example\n * import { ToneAudioBuffers } from \"tone\";\n * // To pass in additional parameters in the second parameter\n * const buffers = new ToneAudioBuffers({\n * \t urls: {\n * \t\t C1: \"C1.mp3\",\n * \t\t C2: \"C2.mp3\",\n * \t },\n * \t onload: () => console.log(\"loaded\"),\n * \t baseUrl: \"https://tonejs.github.io/examples/audio/casio/\"\n * });\n * @category Core\n */\nexport class ToneAudioBuffers extends Tone {\n\n\treadonly name: string = \"ToneAudioBuffers\";\n\n\t/**\n\t * All of the buffers\n\t */\n\tprivate _buffers: Map<string, ToneAudioBuffer> = new Map();\n\n\t/**\n\t * A path which is prefixed before every url.\n\t */\n\tbaseUrl: string;\n\n\t/**\n\t * Keep track of the number of loaded buffers\n\t */\n\tprivate _loadingCount: number = 0;\n\n\t/**\n\t * @param  urls  An object literal or array of urls to load.\n\t * @param onload  The callback to invoke when the buffers are loaded.\n\t * @param baseUrl A prefix url to add before all the urls\n\t */\n\tconstructor(\n\t\turls?: ToneAudioBuffersUrlMap,\n\t\tonload?: () => void,\n\t\tbaseUrl?: string,\n\t);\n\tconstructor(options?: Partial<ToneAudioBuffersOptions>);\n\tconstructor() {\n\n\t\tsuper();\n\t\tconst options = optionsFromArguments(\n\t\t\tToneAudioBuffers.getDefaults(), arguments, [\"urls\", \"onload\", \"baseUrl\"], \"urls\",\n\t\t);\n\n\t\tthis.baseUrl = options.baseUrl;\n\t\t// add each one\n\t\tObject.keys(options.urls).forEach(name => {\n\t\t\tthis._loadingCount++;\n\t\t\tconst url = options.urls[name];\n\t\t\tthis.add(name, url, this._bufferLoaded.bind(this, options.onload));\n\t\t});\n\n\t}\n\n\tstatic getDefaults(): ToneAudioBuffersOptions {\n\t\treturn {\n\t\t\tbaseUrl: \"\",\n\t\t\tonerror: noOp,\n\t\t\tonload: noOp,\n\t\t\turls: {},\n\t\t};\n\t}\n\n\t/**\n\t * True if the buffers object has a buffer by that name.\n\t * @param  name  The key or index of the buffer.\n\t */\n\thas(name: string | number): boolean {\n\t\treturn this._buffers.has(name.toString());\n\t}\n\n\t/**\n\t * Get a buffer by name. If an array was loaded,\n\t * then use the array index.\n\t * @param  name  The key or index of the buffer.\n\t */\n\tget(name: string | number): ToneAudioBuffer {\n\t\tthis.assert(this.has(name), `ToneAudioBuffers has no buffer named: ${name}`);\n\t\treturn this._buffers.get(name.toString()) as ToneAudioBuffer;\n\t}\n\n\t/**\n\t * A buffer was loaded. decrement the counter.\n\t */\n\tprivate _bufferLoaded(callback: () => void): void {\n\t\tthis._loadingCount--;\n\t\tif (this._loadingCount === 0 && callback) {\n\t\t\tcallback();\n\t\t}\n\t}\n\n\t/**\n\t * If the buffers are loaded or not\n\t */\n\tget loaded(): boolean {\n\t\treturn Array.from(this._buffers).every(([_, buffer]) => buffer.loaded);\n\t}\n\n\t/**\n\t * Add a buffer by name and url to the Buffers\n\t * @param  name      A unique name to give the buffer\n\t * @param  url  Either the url of the bufer, or a buffer which will be added with the given name.\n\t * @param  callback  The callback to invoke when the url is loaded.\n\t */\n\tadd(\n\t\tname: string | number,\n\t\turl: string | AudioBuffer | ToneAudioBuffer,\n\t\tcallback: () => void = noOp,\n\t): this {\n\t\tif (isString(url)) {\n\t\t\tthis._buffers.set(name.toString(), new ToneAudioBuffer(this.baseUrl + url, callback));\n\t\t} else {\n\t\t\tthis._buffers.set(name.toString(), new ToneAudioBuffer(url, callback));\n\t\t}\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._buffers.forEach(buffer => buffer.dispose());\n\t\tthis._buffers.clear();\n\t\treturn this;\n\t}\n}\n","import { Seconds } from \"../type/Units\";\nimport { Timeline, TimelineEvent } from \"./Timeline\";\n\nexport type BasicPlaybackState = \"started\" | \"stopped\";\nexport type PlaybackState = BasicPlaybackState | \"paused\";\n\nexport interface StateTimelineEvent extends TimelineEvent {\n\tstate: PlaybackState;\n}\n\n/**\n * A Timeline State. Provides the methods: `setStateAtTime(\"state\", time)` and `getValueAtTime(time)`\n * @param initial The initial state of the StateTimeline.  Defaults to `undefined`\n */\nexport class StateTimeline<AdditionalOptions extends {} = {}> extends Timeline<StateTimelineEvent & AdditionalOptions> {\n\n\treadonly name: string = \"StateTimeline\";\n\n\t/**\n\t * The initial state\n\t */\n\tprivate _initial: PlaybackState;\n\n\tconstructor(initial: PlaybackState = \"stopped\") {\n\t\tsuper();\n\t\tthis._initial = initial;\n\t}\n\n\t/**\n\t * Returns the scheduled state scheduled before or at\n\t * the given time.\n\t * @param  time  The time to query.\n\t * @return  The name of the state input in setStateAtTime.\n\t */\n\tgetValueAtTime(time: Seconds): PlaybackState {\n\t\tconst event = this.get(time);\n\t\tif (event !== null) {\n\t\t\treturn event.state;\n\t\t} else {\n\t\t\treturn this._initial;\n\t\t}\n\t}\n\n\t/**\n\t * Add a state to the timeline.\n\t * @param  state The name of the state to set.\n\t * @param  time  The time to query.\n\t * @param options Any additional options that are needed in the timeline.\n\t */\n\tsetStateAtTime(state: PlaybackState, time: Seconds, options?: AdditionalOptions): this {\n\t\tthis.add(Object.assign({}, options, {\n\t\t\tstate,\n\t\t\ttime,\n\t\t}));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Return the event before the time with the given state\n\t * @param  state The state to look for\n\t * @param  time  When to check before\n\t * @return  The event with the given state before the time\n\t */\n\tgetLastState(state: PlaybackState, time: number): StateTimelineEvent & AdditionalOptions | undefined {\n\t\t// time = this.toSeconds(time);\n\t\tconst index = this._search(time);\n\t\tfor (let i = index; i >= 0; i--) {\n\t\t\tconst event = this._timeline[i];\n\t\t\tif (event.state === state) {\n\t\t\t\treturn event;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Return the event after the time with the given state\n\t * @param  state The state to look for\n\t * @param  time  When to check from\n\t * @return  The event with the given state after the time\n\t */\n\tgetNextState(state: PlaybackState, time: number): StateTimelineEvent & AdditionalOptions | undefined {\n\t\t// time = this.toSeconds(time);\n\t\tconst index = this._search(time);\n\t\tif (index !== -1) {\n\t\t\tfor (let i = index; i < this._timeline.length; i++) {\n\t\t\t\tconst event = this._timeline[i];\n\t\t\t\tif (event.state === state) {\n\t\t\t\t\treturn event;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","import { Gain } from \"../core/context/Gain\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { GainFactor, Seconds, Time } from \"../core/type/Units\";\nimport { noOp } from \"../core/util/Interface\";\nimport { BasicPlaybackState } from \"../core/util/StateTimeline\";\n\nexport type OneShotSourceCurve = \"linear\" | \"exponential\";\n\ntype onEndedCallback = (source: OneShotSource<any>) => void;\n\nexport interface OneShotSourceOptions extends ToneAudioNodeOptions {\n\tonended: onEndedCallback;\n\tfadeIn: Time;\n\tfadeOut: Time;\n\tcurve: OneShotSourceCurve;\n}\n\n/**\n * Base class for fire-and-forget nodes\n */\nexport abstract class OneShotSource<Options extends ToneAudioNodeOptions> extends ToneAudioNode<Options> {\n\n\t/**\n\t * The callback to invoke after the\n\t * source is done playing.\n\t */\n\tonended: onEndedCallback = noOp;\n\n\t/**\n\t * Sources do not have input nodes\n\t */\n\tinput: undefined;\n\n\t/**\n\t * The start time\n\t */\n\tprotected _startTime: number = -1;\n\n\t/**\n\t * The stop time\n\t */\n\tprotected _stopTime: number = -1;\n\n\t/**\n\t * The id of the timeout\n\t */\n\tprivate _timeout: number = -1;\n\n\t/**\n\t * The public output node\n\t */\n\toutput: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\n\t/**\n\t * The output gain node.\n\t */\n\tprotected _gainNode = this.output;\n\n\t/**\n\t * The fadeIn time of the amplitude envelope.\n\t */\n\tprotected _fadeIn: Time;\n\n\t/**\n\t * The fadeOut time of the amplitude envelope.\n\t */\n\tprotected _fadeOut: Time;\n\n\t/**\n\t * The curve applied to the fades, either \"linear\" or \"exponential\"\n\t */\n\tprotected _curve: OneShotSourceCurve;\n\n\tconstructor(options: OneShotSourceOptions) {\n\t\tsuper(options);\n\n\t\tthis._fadeIn = options.fadeIn;\n\t\tthis._fadeOut = options.fadeOut;\n\t\tthis._curve = options.curve;\n\t\tthis.onended = options.onended;\n\t}\n\n\tstatic getDefaults(): OneShotSourceOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tcurve: \"linear\" as OneShotSourceCurve,\n\t\t\tfadeIn: 0,\n\t\t\tfadeOut: 0,\n\t\t\tonended: noOp,\n\t\t});\n\t}\n\n\t/**\n\t * Stop the source node\n\t */\n\tprotected abstract _stopSource(time: Seconds): void;\n\n\t/**\n\t * Start the source node at the given time\n\t * @param  time When to start the node\n\t */\n\tprotected abstract start(time?: Time): this;\n\t/**\n\t * Start the source at the given time\n\t * @param  time When to start the source\n\t */\n\tprotected _startGain(time: Seconds, gain: GainFactor = 1): this {\n\t\tthis.assert(this._startTime === -1, \"Source cannot be started more than once\");\n\t\t// apply a fade in envelope\n\t\tconst fadeInTime = this.toSeconds(this._fadeIn);\n\n\t\t// record the start time\n\t\tthis._startTime = time + fadeInTime;\n\t\tthis._startTime = Math.max(this._startTime, this.context.currentTime);\n\n\t\t// schedule the envelope\n\t\tif (fadeInTime > 0) {\n\t\t\tthis._gainNode.gain.setValueAtTime(0, time);\n\t\t\tif (this._curve === \"linear\") {\n\t\t\t\tthis._gainNode.gain.linearRampToValueAtTime(gain, time + fadeInTime);\n\t\t\t} else {\n\t\t\t\tthis._gainNode.gain.exponentialApproachValueAtTime(gain, time, fadeInTime);\n\t\t\t}\n\t\t} else {\n\t\t\tthis._gainNode.gain.setValueAtTime(gain, time);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the source node at the given time.\n\t * @param time When to stop the source\n\t */\n\tstop(time?: Time): this {\n\t\tthis.log(\"stop\", time);\n\t\tthis._stopGain(this.toSeconds(time));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the source at the given time\n\t * @param  time When to stop the source\n\t */\n\tprotected _stopGain(time: Seconds): this {\n\t\tthis.assert(this._startTime !== -1, \"'start' must be called before 'stop'\");\n\t\t// cancel the previous stop\n\t\tthis.cancelStop();\n\n\t\t// the fadeOut time\n\t\tconst fadeOutTime = this.toSeconds(this._fadeOut);\n\n\t\t// schedule the stop callback\n\t\tthis._stopTime = this.toSeconds(time) + fadeOutTime;\n\t\tthis._stopTime = Math.max(this._stopTime, this.context.currentTime);\n\t\tif (fadeOutTime > 0) {\n\t\t\t// start the fade out curve at the given time\n\t\t\tif (this._curve === \"linear\") {\n\t\t\t\tthis._gainNode.gain.linearRampTo(0, fadeOutTime, time);\n\t\t\t} else {\n\t\t\t\tthis._gainNode.gain.targetRampTo(0, fadeOutTime, time);\n\t\t\t}\n\t\t} else {\n\t\t\t// stop any ongoing ramps, and set the value to 0\n\t\t\tthis._gainNode.gain.cancelAndHoldAtTime(time);\n\t\t\tthis._gainNode.gain.setValueAtTime(0, time);\n\t\t}\n\t\tthis.context.clearTimeout(this._timeout);\n\t\tthis._timeout = this.context.setTimeout(() => {\n\t\t\t// allow additional time for the exponential curve to fully decay\n\t\t\tconst additionalTail = this._curve === \"exponential\" ? fadeOutTime * 2 : 0;\n\t\t\tthis._stopSource(this.now() + additionalTail);\n\t\t\tthis._onended();\n\t\t}, this._stopTime - this.context.now());\n\t\treturn this;\n\t}\n\n\t/**\n\t * Invoke the onended callback\n\t */\n\tprotected _onended(): void {\n\t\tif (this.onended !== noOp) {\n\t\t\tthis.onended(this);\n\t\t\t// overwrite onended to make sure it only is called once\n\t\t\tthis.onended = noOp;\n\t\t\t// dispose when it's ended to free up for garbage collection only in the online context\n\t\t\tif (!this.context.isOffline) {\n\t\t\t\tsetTimeout(() => this.dispose(), 1000);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Get the playback state at the given time\n\t */\n\tgetStateAtTime = function(time: Time): BasicPlaybackState {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._startTime !== -1 && computedTime >= this._startTime &&\n\t\t\t(this._stopTime === -1 || computedTime <= this._stopTime)) {\n\t\t\treturn \"started\";\n\t\t} else {\n\t\t\treturn \"stopped\";\n\t\t}\n\t};\n\n\t/**\n\t * Get the playback state at the current time\n\t */\n\tget state(): BasicPlaybackState {\n\t\treturn this.getStateAtTime(this.now());\n\t}\n\n\t/**\n\t * Cancel a scheduled stop event\n\t */\n\tcancelStop(): this {\n\t\tthis.log(\"cancelStop\");\n\t\tthis.assert(this._startTime !== -1, \"Source is not started\");\n\t\t// cancel the stop envelope\n\t\tthis._gainNode.gain.cancelScheduledValues(this._startTime + this.sampleTime);\n\t\tthis.context.clearTimeout(this._timeout);\n\t\tthis._stopTime = -1;\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._gainNode.disconnect();\n\t\treturn this;\n\t}\n}\n","import { connect } from \"../core/Connect\";\nimport { Param } from \"../core/context/Param\";\nimport { Seconds, Time, UnitMap, UnitName } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { OneShotSource, OneShotSourceOptions } from \"../source/OneShotSource\";\n\nexport interface ToneConstantSourceOptions<TypeName extends UnitName> extends OneShotSourceOptions {\n\tconvert: boolean;\n\toffset: UnitMap[TypeName];\n\tunits: TypeName;\n}\n\n/**\n * Wrapper around the native fire-and-forget ConstantSource.\n * Adds the ability to reschedule the stop method.\n * @category Signal\n */\nexport class ToneConstantSource<TypeName extends UnitName = \"number\"> extends OneShotSource<ToneConstantSourceOptions<TypeName>> {\n\n\treadonly name: string = \"ToneConstantSource\";\n\n\t/**\n\t * The signal generator\n\t */\n\tprivate _source = this.context.createConstantSource();\n\n\t/**\n\t * The offset of the signal generator\n\t */\n\treadonly offset: Param<TypeName>;\n\n\t/**\n\t * @param  offset   The offset value\n\t */\n\tconstructor(offset: UnitMap[TypeName]);\n\tconstructor(options?: Partial<ToneConstantSourceOptions<TypeName>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(ToneConstantSource.getDefaults(), arguments, [\"offset\"]));\n\t\tconst options = optionsFromArguments(ToneConstantSource.getDefaults(), arguments, [\"offset\"]);\n\n\t\tconnect(this._source, this._gainNode);\n\n\t\tthis.offset = new Param({\n\t\t\tcontext: this.context,\n\t\t\tconvert: options.convert,\n\t\t\tparam: this._source.offset,\n\t\t\tunits: options.units,\n\t\t\tvalue: options.offset,\n\t\t});\n\t}\n\n\tstatic getDefaults(): ToneConstantSourceOptions<any> {\n\t\treturn Object.assign(OneShotSource.getDefaults(), {\n\t\t\tconvert: true,\n\t\t\toffset: 1,\n\t\t\tunits: \"number\" as UnitName,\n\t\t});\n\t}\n\n\t/**\n\t * Start the source node at the given time\n\t * @param  time When to start the source\n\t */\n\tstart(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis.log(\"start\", computedTime);\n\t\tthis._startGain(computedTime);\n\t\tthis._source.start(computedTime);\n\t\treturn this;\n\t}\n\n\tprotected _stopSource(time?: Seconds): void {\n\t\tthis._source.stop(time);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (this.state === \"started\") {\n\t\t\tthis.stop();\n\t\t}\n\t\tthis._source.disconnect();\n\t\tthis.offset.dispose();\n\t\treturn this;\n\t}\n}\n","import { AbstractParam } from \"../core/context/AbstractParam\";\nimport { Param } from \"../core/context/Param\";\nimport { InputNode, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { connect } from \"../core/context/ToneAudioNode\";\nimport { Time, UnitMap, UnitName } from \"../core/type/Units\";\nimport { isAudioParam } from \"../core/util/AdvancedTypeCheck\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { ToneConstantSource } from \"./ToneConstantSource\";\n\nexport interface SignalOptions<TypeName extends UnitName> extends ToneAudioNodeOptions {\n\tvalue: UnitMap[TypeName];\n\tunits: TypeName;\n\tconvert: boolean;\n}\n\n/**\n * A signal is an audio-rate value. Tone.Signal is a core component of the library.\n * Unlike a number, Signals can be scheduled with sample-level accuracy. Tone.Signal\n * has all of the methods available to native Web Audio\n * [AudioParam](http://webaudio.github.io/web-audio-api/#the-audioparam-interface)\n * as well as additional conveniences. Read more about working with signals\n * [here](https://github.com/Tonejs/Tone.js/wiki/Signals).\n *\n * @example\n * import { Oscillator, Signal } from \"tone\";\n * const osc = new Oscillator().toDestination().start();\n * // a scheduleable signal which can be connected to control an AudioParam or another Signal\n * const signal = new Signal({\n * \tvalue: \"C4\",\n * \tunits: \"frequency\"\n * }).connect(osc.frequency);\n * // the scheduled ramp controls the connected signal\n * signal.rampTo(\"C2\", 4, \"+0.5\");\n * @category Signal\n */\nexport class Signal<TypeName extends UnitName = \"number\"> extends ToneAudioNode<SignalOptions<any>>\n\timplements AbstractParam<TypeName> {\n\n\treadonly name: string = \"Signal\";\n\n\t/**\n\t * Indicates if the value should be overridden on connection.\n\t */\n\treadonly override: boolean = true;\n\n\t/**\n\t * The constant source node which generates the signal\n\t */\n\tprotected _constantSource: ToneConstantSource<TypeName>;\n\treadonly output: OutputNode;\n\tprotected _param: Param<TypeName>;\n\treadonly input: InputNode;\n\n\t/**\n\t * @param value Initial value of the signal\n\t * @param units The unit name, e.g. \"frequency\"\n\t */\n\tconstructor(value?: UnitMap[TypeName], units?: TypeName);\n\tconstructor(options?: Partial<SignalOptions<TypeName>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]));\n\n\t\tconst options = optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]) as SignalOptions<TypeName>;\n\n\t\tthis.output = this._constantSource = new ToneConstantSource({\n\t\t\tcontext: this.context,\n\t\t\tconvert: options.convert,\n\t\t\toffset: options.value,\n\t\t\tunits: options.units,\n\t\t});\n\t\tthis._constantSource.start(0);\n\t\tthis.input = this._param = this._constantSource.offset;\n\t}\n\n\tstatic getDefaults(): SignalOptions<any> {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tconvert: true,\n\t\t\tunits: \"number\" as UnitName,\n\t\t\tvalue: 0,\n\t\t});\n\t}\n\n\tconnect(destination: InputNode, outputNum: number = 0, inputNum: number = 0): this {\n\t\t// start it only when connected to something\n\t\tconnectSignal(this, destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._param.dispose();\n\t\tthis._constantSource.dispose();\n\t\treturn this;\n\t}\n\n\t//-------------------------------------\n\t// ABSTRACT PARAM INTERFACE\n\t// just a proxy for the ConstantSourceNode's offset AudioParam\n\t// all docs are generated from AbstractParam.ts\n\t//-------------------------------------\n\n\tsetValueAtTime(value: UnitMap[TypeName], time: Time): this {\n\t\tthis._param.setValueAtTime(value, time);\n\t\treturn this;\n\t}\n\tgetValueAtTime(time: Time): UnitMap[TypeName] {\n\t\treturn this._param.getValueAtTime(time);\n\t}\n\tsetRampPoint(time: Time): this {\n\t\tthis._param.setRampPoint(time);\n\t\treturn this;\n\t}\n\tlinearRampToValueAtTime(value: UnitMap[TypeName], time: Time): this {\n\t\tthis._param.linearRampToValueAtTime(value, time);\n\t\treturn this;\n\t}\n\texponentialRampToValueAtTime(value: UnitMap[TypeName], time: Time): this {\n\t\tthis._param.exponentialRampToValueAtTime(value, time);\n\t\treturn this;\n\t}\n\texponentialRampTo(value: UnitMap[TypeName], rampTime: Time, startTime?: Time): this {\n\t\tthis._param.exponentialRampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\tlinearRampTo(value: UnitMap[TypeName], rampTime: Time, startTime?: Time): this {\n\t\tthis._param.linearRampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\ttargetRampTo(value: UnitMap[TypeName], rampTime: Time, startTime?: Time): this {\n\t\tthis._param.targetRampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\texponentialApproachValueAtTime(value: UnitMap[TypeName], time: Time, rampTime: Time): this {\n\t\tthis._param.exponentialApproachValueAtTime(value, time, rampTime);\n\t\treturn this;\n\t}\n\tsetTargetAtTime(value: UnitMap[TypeName], startTime: Time, timeConstant: number): this {\n\t\tthis._param.setTargetAtTime(value, startTime, timeConstant);\n\t\treturn this;\n\t}\n\tsetValueCurveAtTime(values: UnitMap[TypeName][], startTime: Time, duration: Time, scaling?: number): this {\n\t\tthis._param.setValueCurveAtTime(values, startTime, duration, scaling);\n\t\treturn this;\n\t}\n\tcancelScheduledValues(time: Time): this {\n\t\tthis._param.cancelScheduledValues(time);\n\t\treturn this;\n\t}\n\tcancelAndHoldAtTime(time: Time): this {\n\t\tthis._param.cancelAndHoldAtTime(time);\n\t\treturn this;\n\t}\n\trampTo(value: UnitMap[TypeName], rampTime: Time, startTime?: Time): this {\n\t\tthis._param.rampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\n\tget value(): UnitMap[TypeName] {\n\t\treturn this._param.value;\n\t}\n\tset value(value: UnitMap[TypeName]) {\n\t\tthis._param.value = value;\n\t}\n\n\tget convert(): boolean {\n\t\treturn this._param.convert;\n\t}\n\tset convert(convert: boolean) {\n\t\tthis._param.convert = convert;\n\t}\n\n\tget units(): UnitName {\n\t\treturn this._param.units;\n\t}\n\n\tget overridden(): boolean {\n\t\treturn this._param.overridden;\n\t}\n\tset overridden(overridden: boolean) {\n\t\tthis._param.overridden = overridden;\n\t}\n\n\tget maxValue(): number {\n\t\treturn this._param.maxValue;\n\t}\n\tget minValue(): number {\n\t\treturn this._param.minValue;\n\t}\n\n\t/**\n\t * See [[Param.apply]].\n\t */\n\tapply(param: Param | AudioParam): this {\n\t\tthis._param.apply(param);\n\t\treturn this;\n\t}\n}\n\n/**\n * When connecting from a signal, it's necessary to zero out the node destination\n * node if that node is also a signal. If the destination is not 0, then the values\n * will be summed. This method insures that the output of the destination signal will\n * be the same as the source signal, making the destination signal a pass through node.\n * @param signal The output signal to connect from\n * @param destination the destination to connect to\n * @param outputNum the optional output number\n * @param inputNum the input number\n */\nexport function connectSignal(signal: OutputNode, destination: InputNode, outputNum?: number, inputNum?: number): void {\n\tif (destination instanceof Param || isAudioParam(destination) ||\n\t\t(destination instanceof Signal && destination.override)) {\n\t\t// cancel changes\n\t\tdestination.cancelScheduledValues(0);\n\t\t// reset the value\n\t\tdestination.setValueAtTime(0, 0);\n\t\t// mark the value as overridden\n\t\tif (destination instanceof Signal) {\n\t\t\tdestination.overridden = true;\n\t\t}\n\t}\n\tconnect(signal, destination, outputNum, inputNum);\n}\n","import { AutomationEvent, Param, ParamOptions } from \"../context/Param\";\nimport { Seconds, Ticks, Time, UnitMap, UnitName } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isUndef } from \"../util/TypeCheck\";\n\ntype TickAutomationEvent = AutomationEvent & {\n\tticks: number;\n};\n\ninterface TickParamOptions<TypeName extends UnitName> extends ParamOptions<TypeName> {\n\tmultiplier: number;\n}\n\n/**\n * A Param class just for computing ticks. Similar to the [[Param]] class,\n * but offers conversion to BPM values as well as ability to compute tick\n * duration and elapsed ticks\n */\nexport class TickParam<TypeName extends \"hertz\" | \"bpm\"> extends Param<TypeName> {\n\n\treadonly name: string = \"TickParam\";\n\n\t/**\n\t * The timeline which tracks all of the automations.\n\t */\n\tprotected _events: Timeline<TickAutomationEvent> = new Timeline(Infinity);\n\n\t/**\n\t * The internal holder for the multiplier value\n\t */\n\tprivate _multiplier: number = 1;\n\n\t/**\n\t * @param param The AudioParam to wrap\n\t * @param units The unit name\n\t * @param convert Whether or not to convert the value to the target units\n\t */\n\t/**\n\t * @param value The initial value of the signal\n\t */\n\tconstructor(value?: number);\n\tconstructor(options: Partial<TickParamOptions<TypeName>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(TickParam.getDefaults(), arguments, [\"value\"]));\n\t\tconst options = optionsFromArguments(TickParam.getDefaults(), arguments, [\"value\"]);\n\n\t\t// set the multiplier\n\t\tthis._multiplier = options.multiplier;\n\n\t\t// clear the ticks from the beginning\n\t\tthis._events.cancel(0);\n\t\t// set an initial event\n\t\tthis._events.add({\n\t\t\tticks: 0,\n\t\t\ttime: 0,\n\t\t\ttype: \"setValueAtTime\",\n\t\t\tvalue: this._fromType(options.value),\n\t\t});\n\t\tthis.setValueAtTime(options.value, 0);\n\t}\n\n\tstatic getDefaults(): TickParamOptions<any> {\n\t\treturn Object.assign(Param.getDefaults(), {\n\t\t\tmultiplier: 1,\n\t\t\tunits: \"hertz\",\n\t\t\tvalue: 1,\n\t\t});\n\t}\n\n\tsetTargetAtTime(value: UnitMap[TypeName], time: Time, constant: number): this {\n\t\t// approximate it with multiple linear ramps\n\t\ttime = this.toSeconds(time);\n\t\tthis.setRampPoint(time);\n\t\tconst computedValue = this._fromType(value);\n\n\t\t// start from previously scheduled value\n\t\tconst prevEvent = this._events.get(time) as TickAutomationEvent;\n\t\tconst segments = Math.round(Math.max(1 / constant, 1));\n\t\tfor (let i = 0; i <= segments; i++) {\n\t\t\tconst segTime = constant * i + time;\n\t\t\tconst rampVal = this._exponentialApproach(prevEvent.time, prevEvent.value, computedValue, constant, segTime);\n\t\t\tthis.linearRampToValueAtTime(this._toType(rampVal), segTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\tsetValueAtTime(value: UnitMap[TypeName], time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tsuper.setValueAtTime(value, time);\n\t\tconst event = this._events.get(computedTime) as TickAutomationEvent;\n\t\tconst previousEvent = this._events.previousEvent(event);\n\t\tconst ticksUntilTime = this._getTicksUntilEvent(previousEvent, computedTime);\n\t\tevent.ticks = Math.max(ticksUntilTime, 0);\n\t\treturn this;\n\t}\n\n\tlinearRampToValueAtTime(value: UnitMap[TypeName], time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tsuper.linearRampToValueAtTime(value, time);\n\t\tconst event = this._events.get(computedTime) as TickAutomationEvent;\n\t\tconst previousEvent = this._events.previousEvent(event);\n\t\tconst ticksUntilTime = this._getTicksUntilEvent(previousEvent, computedTime);\n\t\tevent.ticks = Math.max(ticksUntilTime, 0);\n\t\treturn this;\n\t}\n\n\texponentialRampToValueAtTime(value: UnitMap[TypeName], time: Time): this {\n\t\t// aproximate it with multiple linear ramps\n\t\ttime = this.toSeconds(time);\n\t\tconst computedVal = this._fromType(value);\n\n\t\t// start from previously scheduled value\n\t\tconst prevEvent = this._events.get(time) as TickAutomationEvent;\n\t\t// approx 10 segments per second\n\t\tconst segments = Math.round(Math.max((time - prevEvent.time) * 10, 1));\n\t\tconst segmentDur = ((time - prevEvent.time) / segments);\n\t\tfor (let i = 0; i <= segments; i++) {\n\t\t\tconst segTime = segmentDur * i + prevEvent.time;\n\t\t\tconst rampVal = this._exponentialInterpolate(prevEvent.time, prevEvent.value, time, computedVal, segTime);\n\t\t\tthis.linearRampToValueAtTime(this._toType(rampVal), segTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the tick value at the time. Takes into account\n\t * any automation curves scheduled on the signal.\n\t * @param  event The time to get the tick count at\n\t * @return The number of ticks which have elapsed at the time given any automations.\n\t */\n\tprivate _getTicksUntilEvent(event: TickAutomationEvent | null, time: number): Ticks {\n\t\tif (event === null) {\n\t\t\tevent = {\n\t\t\t\tticks: 0,\n\t\t\t\ttime: 0,\n\t\t\t\ttype: \"setValueAtTime\",\n\t\t\t\tvalue: 0,\n\t\t\t};\n\t\t} else if (isUndef(event.ticks)) {\n\t\t\tconst previousEvent = this._events.previousEvent(event);\n\t\t\tevent.ticks = this._getTicksUntilEvent(previousEvent, event.time);\n\t\t}\n\t\tconst val0 = this._fromType(this.getValueAtTime(event.time));\n\t\tlet val1 = this._fromType(this.getValueAtTime(time));\n\t\t// if it's right on the line, take the previous value\n\t\tconst onTheLineEvent = this._events.get(time);\n\t\tif (onTheLineEvent && onTheLineEvent.time === time && onTheLineEvent.type === \"setValueAtTime\") {\n\t\t\tval1 = this._fromType(this.getValueAtTime(time - this.sampleTime));\n\t\t}\n\t\treturn 0.5 * (time - event.time) * (val0 + val1) + event.ticks;\n\t}\n\n\t/**\n\t * Returns the tick value at the time. Takes into account\n\t * any automation curves scheduled on the signal.\n\t * @param  time The time to get the tick count at\n\t * @return The number of ticks which have elapsed at the time given any automations.\n\t */\n\tgetTicksAtTime(time: Time): Ticks {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst event = this._events.get(computedTime);\n\t\treturn Math.max(this._getTicksUntilEvent(event, computedTime), 0);\n\t}\n\n\t/**\n\t * Return the elapsed time of the number of ticks from the given time\n\t * @param ticks The number of ticks to calculate\n\t * @param  time The time to get the next tick from\n\t * @return The duration of the number of ticks from the given time in seconds\n\t */\n\tgetDurationOfTicks(ticks: Ticks, time: Time): Seconds {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst currentTick = this.getTicksAtTime(time);\n\t\treturn this.getTimeOfTick(currentTick + ticks) - computedTime;\n\t}\n\n\t/**\n\t * Given a tick, returns the time that tick occurs at.\n\t * @return The time that the tick occurs.\n\t */\n\tgetTimeOfTick(tick: Ticks): Seconds {\n\t\tconst before = this._events.get(tick, \"ticks\");\n\t\tconst after = this._events.getAfter(tick, \"ticks\");\n\t\tif (before && before.ticks === tick) {\n\t\t\treturn before.time;\n\t\t} else if (before && after &&\n\t\t\tafter.type === \"linearRampToValueAtTime\" &&\n\t\t\tbefore.value !== after.value) {\n\t\t\tconst val0 = this._fromType(this.getValueAtTime(before.time));\n\t\t\tconst val1 = this._fromType(this.getValueAtTime(after.time));\n\t\t\tconst delta = (val1 - val0) / (after.time - before.time);\n\t\t\tconst k = Math.sqrt(Math.pow(val0, 2) - 2 * delta * (before.ticks - tick));\n\t\t\tconst sol1 = (-val0 + k) / delta;\n\t\t\tconst sol2 = (-val0 - k) / delta;\n\t\t\treturn (sol1 > 0 ? sol1 : sol2) + before.time;\n\t\t} else if (before) {\n\t\t\tif (before.value === 0) {\n\t\t\t\treturn Infinity;\n\t\t\t} else {\n\t\t\t\treturn before.time + (tick - before.ticks) / before.value;\n\t\t\t}\n\t\t} else {\n\t\t\treturn tick / this._initialValue;\n\t\t}\n\t}\n\n\t/**\n\t * Convert some number of ticks their the duration in seconds accounting\n\t * for any automation curves starting at the given time.\n\t * @param  ticks The number of ticks to convert to seconds.\n\t * @param  when  When along the automation timeline to convert the ticks.\n\t * @return The duration in seconds of the ticks.\n\t */\n\tticksToTime(ticks: Ticks, when: Time): Seconds {\n\t\treturn this.getDurationOfTicks(ticks, when);\n\t}\n\n\t/**\n\t * The inverse of [[ticksToTime]]. Convert a duration in\n\t * seconds to the corresponding number of ticks accounting for any\n\t * automation curves starting at the given time.\n\t * @param  duration The time interval to convert to ticks.\n\t * @param  when When along the automation timeline to convert the ticks.\n\t * @return The duration in ticks.\n\t */\n\ttimeToTicks(duration: Time, when: Time): Ticks {\n\t\tconst computedTime = this.toSeconds(when);\n\t\tconst computedDuration = this.toSeconds(duration);\n\t\tconst startTicks = this.getTicksAtTime(computedTime);\n\t\tconst endTicks = this.getTicksAtTime(computedTime + computedDuration);\n\t\treturn endTicks - startTicks;\n\t}\n\n\t/**\n\t * Convert from the type when the unit value is BPM\n\t */\n\tprotected _fromType(val: UnitMap[TypeName]): number {\n\t\tif (this.units === \"bpm\" && this.multiplier) {\n\t\t\treturn 1 / (60 / val / this.multiplier);\n\t\t} else {\n\t\t\treturn super._fromType(val);\n\t\t}\n\t}\n\n\t/**\n\t * Special case of type conversion where the units === \"bpm\"\n\t */\n\tprotected _toType(val: number): UnitMap[TypeName] {\n\t\tif (this.units === \"bpm\" && this.multiplier) {\n\t\t\treturn (val / this.multiplier) * 60 as UnitMap[TypeName];\n\t\t} else {\n\t\t\treturn super._toType(val);\n\t\t}\n\t}\n\t/**\n\t * A multiplier on the bpm value. Useful for setting a PPQ relative to the base frequency value.\n\t */\n\tget multiplier(): number {\n\t\treturn this._multiplier;\n\t}\n\tset multiplier(m: number) {\n\t\t// get and reset the current value with the new multiplier\n\t\t// might be necessary to clear all the previous values\n\t\tconst currentVal = this.value;\n\t\tthis._multiplier = m;\n\t\tthis.value = currentVal;\n\t}\n}\n","import { Signal, SignalOptions } from \"../../signal/Signal\";\nimport { InputNode } from \"../context/ToneAudioNode\";\nimport { Seconds, Ticks, Time, UnitMap, UnitName } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { TickParam } from \"./TickParam\";\n\ninterface TickSignalOptions<TypeName extends UnitName> extends SignalOptions<TypeName> {\n\tvalue: UnitMap[TypeName];\n\tmultiplier: number;\n}\n\n/**\n * TickSignal extends Tone.Signal, but adds the capability\n * to calculate the number of elapsed ticks. exponential and target curves\n * are approximated with multiple linear ramps.\n *\n * Thank you Bruno Dias, H. Sofia Pinto, and David M. Matos,\n * for your [WAC paper](https://smartech.gatech.edu/bitstream/handle/1853/54588/WAC2016-49.pdf)\n * describing integrating timing functions for tempo calculations.\n */\nexport class TickSignal<TypeName extends \"hertz\" | \"bpm\"> extends Signal<TypeName> {\n\n\treadonly name: string = \"TickSignal\";\n\n\t/**\n\t * The param which controls the output signal value\n\t */\n\tprotected _param: TickParam<TypeName>;\n\treadonly input: InputNode;\n\n\t/**\n\t * @param value The initial value of the signal\n\t */\n\tconstructor(value?: UnitMap[TypeName]);\n\tconstructor(options: Partial<TickSignalOptions<TypeName>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(TickSignal.getDefaults(), arguments, [\"value\"]));\n\t\tconst options = optionsFromArguments(TickSignal.getDefaults(), arguments, [\"value\"]);\n\n\t\tthis.input = this._param = new TickParam({\n\t\t\tcontext: this.context,\n\t\t\tconvert: options.convert,\n\t\t\tmultiplier: options.multiplier,\n\t\t\tparam: this._constantSource.offset,\n\t\t\tunits: options.units,\n\t\t\tvalue: options.value,\n\t\t});\n\t}\n\n\tstatic getDefaults(): TickSignalOptions<any> {\n\t\treturn Object.assign(Signal.getDefaults(), {\n\t\t\tmultiplier: 1,\n\t\t\tunits: \"hertz\",\n\t\t\tvalue: 1,\n\t\t});\n\t}\n\n\tticksToTime(ticks: Ticks, when: Time): Seconds {\n\t\treturn this._param.ticksToTime(ticks, when);\n\t}\n\n\ttimeToTicks(duration: Time, when: Time): Ticks {\n\t\treturn this._param.timeToTicks(duration, when);\n\t}\n\n\tgetTimeOfTick(tick: Ticks): Seconds {\n\t\treturn this._param.getTimeOfTick(tick);\n\t}\n\n\tgetDurationOfTicks(ticks: Ticks, time: Time): Seconds {\n\t\treturn this._param.getDurationOfTicks(ticks, time);\n\t}\n\n\tgetTicksAtTime(time: Time): Ticks {\n\t\treturn this._param.getTicksAtTime(time);\n\t}\n\n\t/**\n\t * A multiplier on the bpm value. Useful for setting a PPQ relative to the base frequency value.\n\t */\n\tget multiplier(): number {\n\t\treturn this._param.multiplier;\n\t}\n\tset multiplier(m: number) {\n\t\tthis._param.multiplier = m;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._param.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneWithContext, ToneWithContextOptions } from \"../context/ToneWithContext\";\nimport { Seconds, Ticks, Time } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { PlaybackState, StateTimeline, StateTimelineEvent } from \"../util/StateTimeline\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isDefined } from \"../util/TypeCheck\";\nimport { TickSignal } from \"./TickSignal\";\n\ninterface TickSourceOptions extends ToneWithContextOptions {\n\tfrequency: number;\n\tunits: \"bpm\" | \"hertz\";\n}\n\ninterface TickSourceOffsetEvent {\n\tticks: number;\n\ttime: number;\n\tseconds: number;\n}\n\n/**\n * Uses [TickSignal](TickSignal) to track elapsed ticks with complex automation curves.\n */\nexport class TickSource<TypeName extends \"bpm\" | \"hertz\"> extends ToneWithContext<TickSourceOptions> {\n\n\treadonly name: string = \"TickSource\";\n\n\t/**\n\t * The frequency the callback function should be invoked.\n\t */\n\treadonly frequency: TickSignal<TypeName>;\n\n\t/**\n\t * The state timeline\n\t */\n\tprivate _state: StateTimeline = new StateTimeline();\n\n\t/**\n\t * The offset values of the ticks\n\t */\n\tprivate _tickOffset: Timeline<TickSourceOffsetEvent> = new Timeline();\n\n\t/**\n\t * @param frequency The initial frequency that the signal ticks at\n\t */\n\tconstructor(frequency?: number);\n\tconstructor(options?: Partial<TickSourceOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(TickSource.getDefaults(), arguments, [\"frequency\"]));\n\t\tconst options = optionsFromArguments(TickSource.getDefaults(), arguments, [\"frequency\"]);\n\n\t\tthis.frequency = new TickSignal({\n\t\t\tcontext: this.context,\n\t\t\tunits: options.units as TypeName,\n\t\t\tvalue: options.frequency,\n\t\t});\n\t\treadOnly(this, \"frequency\");\n\n\t\t// set the inital state\n\t\tthis._state.setStateAtTime(\"stopped\", 0);\n\t\t// add the first event\n\t\tthis.setTicksAtTime(0, 0);\n\t}\n\n\tstatic getDefaults(): TickSourceOptions {\n\t\treturn Object.assign({\n\t\t\tfrequency: 1,\n\t\t\tunits: \"hertz\" as \"hertz\",\n\t\t}, ToneWithContext.getDefaults());\n\t}\n\n\t/**\n\t * Returns the playback state of the source, either \"started\", \"stopped\" or \"paused\".\n\t */\n\tget state(): PlaybackState {\n\t\treturn this.getStateAtTime(this.now());\n\t}\n\n\t/**\n\t * Start the clock at the given time. Optionally pass in an offset\n\t * of where to start the tick counter from.\n\t * @param  time    The time the clock should start\n\t * @param offset The number of ticks to start the source at\n\t */\n\tstart(time: Time, offset?: Ticks): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(computedTime) !== \"started\") {\n\t\t\tthis._state.setStateAtTime(\"started\", computedTime);\n\t\t\tif (isDefined(offset)) {\n\t\t\t\tthis.setTicksAtTime(offset, computedTime);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the clock. Stopping the clock resets the tick counter to 0.\n\t * @param time The time when the clock should stop.\n\t */\n\tstop(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\t// cancel the previous stop\n\t\tif (this._state.getValueAtTime(computedTime) === \"stopped\") {\n\t\t\tconst event = this._state.get(computedTime);\n\t\t\tif (event && event.time > 0) {\n\t\t\t\tthis._tickOffset.cancel(event.time);\n\t\t\t\tthis._state.cancel(event.time);\n\t\t\t}\n\t\t}\n\t\tthis._state.cancel(computedTime);\n\t\tthis._state.setStateAtTime(\"stopped\", computedTime);\n\t\tthis.setTicksAtTime(0, computedTime);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Pause the clock. Pausing does not reset the tick counter.\n\t * @param time The time when the clock should stop.\n\t */\n\tpause(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(computedTime) === \"started\") {\n\t\t\tthis._state.setStateAtTime(\"paused\", computedTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Cancel start/stop/pause and setTickAtTime events scheduled after the given time.\n\t * @param time When to clear the events after\n\t */\n\tcancel(time: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis._state.cancel(time);\n\t\tthis._tickOffset.cancel(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the elapsed ticks at the given time\n\t * @param  time  When to get the tick value\n\t * @return The number of ticks\n\t */\n\tgetTicksAtTime(time?: Time): Ticks {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst stopEvent = this._state.getLastState(\"stopped\", computedTime);\n\t\tif (!stopEvent) {\n\t\t\treturn 0;\n\t\t}\n\t\t// this event allows forEachBetween to iterate until the current time\n\t\tconst tmpEvent: StateTimelineEvent = { state: \"paused\", time: computedTime };\n\t\tthis._state.add(tmpEvent);\n\n\t\t// keep track of the previous offset event\n\t\tlet lastState = stopEvent;\n\t\tlet elapsedTicks = 0;\n\n\t\t// iterate through all the events since the last stop\n\t\tthis._state.forEachBetween(stopEvent.time, computedTime + this.sampleTime, e => {\n\t\t\tlet periodStartTime = lastState.time;\n\t\t\t// if there is an offset event in this period use that\n\t\t\tconst offsetEvent = this._tickOffset.get(e.time);\n\t\t\tif (offsetEvent && offsetEvent.time >= lastState.time) {\n\t\t\t\telapsedTicks = offsetEvent.ticks;\n\t\t\t\tperiodStartTime = offsetEvent.time;\n\t\t\t}\n\t\t\tif (lastState.state === \"started\" && e.state !== \"started\") {\n\t\t\t\telapsedTicks += this.frequency.getTicksAtTime(e.time) - this.frequency.getTicksAtTime(periodStartTime);\n\t\t\t}\n\t\t\tlastState = e;\n\t\t});\n\n\t\t// remove the temporary event\n\t\tthis._state.remove(tmpEvent);\n\n\t\t// return the ticks\n\t\treturn elapsedTicks;\n\t}\n\n\t/**\n\t * The number of times the callback was invoked. Starts counting at 0\n\t * and increments after the callback was invoked. Returns -1 when stopped.\n\t */\n\tget ticks(): Ticks {\n\t\treturn this.getTicksAtTime(this.now());\n\t}\n\n\tset ticks(t: Ticks) {\n\t\tthis.setTicksAtTime(t, this.now());\n\t}\n\n\t/**\n\t * The time since ticks=0 that the TickSource has been running. Accounts\n\t * for tempo curves\n\t */\n\tget seconds(): Seconds {\n\t\treturn this.getSecondsAtTime(this.now());\n\t}\n\n\tset seconds(s: Seconds) {\n\t\tconst now = this.now();\n\t\tconst ticks = this.frequency.timeToTicks(s, now);\n\t\tthis.setTicksAtTime(ticks, now);\n\t}\n\n\t/**\n\t * Return the elapsed seconds at the given time.\n\t * @param  time  When to get the elapsed seconds\n\t * @return  The number of elapsed seconds\n\t */\n\tgetSecondsAtTime(time: Time): Seconds {\n\t\ttime = this.toSeconds(time);\n\t\tconst stopEvent = this._state.getLastState(\"stopped\", time);\n\t\tif (!stopEvent) {\n\t\t\treturn 0;\n\t\t}\n\t\t// this event allows forEachBetween to iterate until the current time\n\t\tconst tmpEvent: StateTimelineEvent = { state: \"paused\", time };\n\t\tthis._state.add(tmpEvent);\n\n\t\t// keep track of the previous offset event\n\t\tlet lastState = stopEvent;\n\t\tlet elapsedSeconds = 0;\n\n\t\t// iterate through all the events since the last stop\n\t\tthis._state.forEachBetween(stopEvent.time, time + this.sampleTime, e => {\n\t\t\tlet periodStartTime = lastState.time;\n\t\t\t// if there is an offset event in this period use that\n\t\t\tconst offsetEvent = this._tickOffset.get(e.time);\n\t\t\tif (offsetEvent && offsetEvent.time >= lastState.time) {\n\t\t\t\telapsedSeconds = offsetEvent.seconds;\n\t\t\t\tperiodStartTime = offsetEvent.time;\n\t\t\t}\n\t\t\tif (lastState.state === \"started\" && e.state !== \"started\") {\n\t\t\t\telapsedSeconds += e.time - periodStartTime;\n\t\t\t}\n\t\t\tlastState = e;\n\t\t});\n\n\t\t// remove the temporary event\n\t\tthis._state.remove(tmpEvent);\n\n\t\t// return the ticks\n\t\treturn elapsedSeconds;\n\t}\n\n\t/**\n\t * Set the clock's ticks at the given time.\n\t * @param  ticks The tick value to set\n\t * @param  time  When to set the tick value\n\t */\n\tsetTicksAtTime(ticks: Ticks, time: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis._tickOffset.cancel(time);\n\t\tthis._tickOffset.add({\n\t\t\tseconds: this.frequency.getDurationOfTicks(ticks, time),\n\t\t\tticks,\n\t\t\ttime,\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the scheduled state at the given time.\n\t * @param  time  The time to query.\n\t */\n\tgetStateAtTime(time: Time): PlaybackState {\n\t\ttime = this.toSeconds(time);\n\t\treturn this._state.getValueAtTime(time);\n\t}\n\n\t/**\n\t * Get the time of the given tick. The second argument\n\t * is when to test before. Since ticks can be set (with setTicksAtTime)\n\t * there may be multiple times for a given tick value.\n\t * @param  tick The tick number.\n\t * @param  before When to measure the tick value from.\n\t * @return The time of the tick\n\t */\n\tgetTimeOfTick(tick: Ticks, before = this.now()): Seconds {\n\t\tconst offset = this._tickOffset.get(before) as TickSourceOffsetEvent;\n\t\tconst event = this._state.get(before) as StateTimelineEvent;\n\t\tconst startTime = Math.max(offset.time, event.time);\n\t\tconst absoluteTicks = this.frequency.getTicksAtTime(startTime) + tick - offset.ticks;\n\t\treturn this.frequency.getTimeOfTick(absoluteTicks);\n\t}\n\n\t/**\n\t * Invoke the callback event at all scheduled ticks between the\n\t * start time and the end time\n\t * @param  startTime  The beginning of the search range\n\t * @param  endTime    The end of the search range\n\t * @param  callback   The callback to invoke with each tick\n\t */\n\tforEachTickBetween(startTime: Time, endTime: Time, callback: (when: Seconds, ticks: Ticks) => void): this {\n\t\tconst computedStartTime = this.toSeconds(startTime);\n\t\tconst computedEndTime = this.toSeconds(endTime);\n\t\t// only iterate through the sections where it is \"started\"\n\t\tlet lastStateEvent = this._state.get(computedStartTime);\n\t\tthis._state.forEachBetween(computedStartTime, computedEndTime, event => {\n\t\t\tif (lastStateEvent && lastStateEvent.state === \"started\" && event.state !== \"started\") {\n\t\t\t\tthis.forEachTickBetween(Math.max(lastStateEvent.time, computedStartTime), event.time - this.sampleTime, callback);\n\t\t\t}\n\t\t\tlastStateEvent = event;\n\t\t});\n\n\t\tlet error = null;\n\n\t\tif (lastStateEvent && lastStateEvent.state === \"started\" && this._state) {\n\t\t\tconst maxStartTime = Math.max(lastStateEvent.time, computedStartTime);\n\t\t\t// figure out the difference between the frequency ticks and the\n\t\t\tconst startTicks = this.frequency.getTicksAtTime(maxStartTime);\n\t\t\tconst ticksAtStart = this.frequency.getTicksAtTime(lastStateEvent.time);\n\t\t\tconst diff = startTicks - ticksAtStart;\n\t\t\tlet offset = diff % 1;\n\t\t\tif (offset !== 0) {\n\t\t\t\toffset = 1 - offset;\n\t\t\t}\n\t\t\tlet nextTickTime = this.frequency.getTimeOfTick(startTicks + offset);\n\t\t\twhile (nextTickTime < computedEndTime && this._state) {\n\t\t\t\ttry {\n\t\t\t\t\tcallback(nextTickTime, Math.round(this.getTicksAtTime(nextTickTime)));\n\t\t\t\t} catch (e) {\n\t\t\t\t\terror = e;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (this._state) {\n\t\t\t\t\tnextTickTime += this.frequency.getDurationOfTicks(1, nextTickTime);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (error) {\n\t\t\tthrow error;\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._state.dispose();\n\t\tthis._tickOffset.dispose();\n\t\tthis.frequency.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneWithContext, ToneWithContextOptions } from \"../context/ToneWithContext\";\nimport { Frequency, Hertz, Seconds, Ticks, Time } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Emitter } from \"../util/Emitter\";\nimport { noOp, readOnly } from \"../util/Interface\";\nimport { PlaybackState, StateTimeline } from \"../util/StateTimeline\";\nimport { TickSignal } from \"./TickSignal\";\nimport { TickSource } from \"./TickSource\";\n\ntype ClockCallback = (time: Time, ticks?: Ticks) => void;\n\ninterface ClockOptions extends ToneWithContextOptions {\n\tfrequency: Hertz;\n\tcallback: ClockCallback;\n\tunits: \"hertz\" | \"bpm\";\n}\n\ntype ClockEvent = \"start\" | \"stop\" | \"pause\";\n\n/**\n * A sample accurate clock which provides a callback at the given rate.\n * While the callback is not sample-accurate (it is still susceptible to\n * loose JS timing), the time passed in as the argument to the callback\n * is precise. For most applications, it is better to use Tone.Transport\n * instead of the Clock by itself since you can synchronize multiple callbacks.\n * @example\n * import { Clock } from \"tone\";\n * // the callback will be invoked approximately once a second\n * // and will print the time exactly once a second apart.\n * const clock = new Clock(time => {\n * \tconsole.log(time);\n * }, 1);\n * clock.start();\n * @category Core\n */\nexport class Clock<TypeName extends \"bpm\" | \"hertz\" = \"hertz\">\n\textends ToneWithContext<ClockOptions> implements Emitter<ClockEvent> {\n\n\treadonly name: string = \"Clock\";\n\n\t/**\n\t * The callback function to invoke at the scheduled tick.\n\t */\n\tcallback: ClockCallback = noOp;\n\n\t/**\n\t * The tick counter\n\t */\n\tprivate _tickSource: TickSource<TypeName>;\n\n\t/**\n\t * The last time the loop callback was invoked\n\t */\n\tprivate _lastUpdate: number = 0;\n\n\t/**\n\t * Keep track of the playback state\n\t */\n\tprivate _state: StateTimeline = new StateTimeline(\"stopped\");\n\n\t/**\n\t * Context bound reference to the _loop method\n\t * This is necessary to remove the event in the end.\n\t */\n\tprivate _boundLoop: () => void = this._loop.bind(this);\n\n\t/**\n\t * The rate the callback function should be invoked.\n\t */\n\tfrequency: TickSignal<TypeName>;\n\n\t/**\n\t * @param callback The callback to be invoked with the time of the audio event\n\t * @param frequency The rate of the callback\n\t */\n\tconstructor(callback?: ClockCallback, frequency?: Frequency);\n\tconstructor(options: Partial<ClockOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Clock.getDefaults(), arguments, [\"callback\", \"frequency\"]));\n\t\tconst options = optionsFromArguments(Clock.getDefaults(), arguments, [\"callback\", \"frequency\"]);\n\n\t\tthis.callback = options.callback;\n\t\tthis._tickSource = new TickSource({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.frequency,\n\t\t\tunits: options.units,\n\t\t});\n\t\tthis._lastUpdate = 0;\n\t\tthis.frequency = this._tickSource.frequency;\n\t\treadOnly(this, \"frequency\");\n\n\t\t// add an initial state\n\t\tthis._state.setStateAtTime(\"stopped\", 0);\n\n\t\t// bind a callback to the worker thread\n\t\tthis.context.on(\"tick\", this._boundLoop);\n\t}\n\n\tstatic getDefaults(): ClockOptions {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tcallback: noOp as ClockCallback,\n\t\t\tfrequency: 1,\n\t\t\tunits: \"hertz\",\n\t\t}) as ClockOptions;\n\t}\n\n\t/**\n\t * Returns the playback state of the source, either \"started\", \"stopped\" or \"paused\".\n\t */\n\tget state(): PlaybackState {\n\t\treturn this._state.getValueAtTime(this.now());\n\t}\n\n\t/**\n\t * Start the clock at the given time. Optionally pass in an offset\n\t * of where to start the tick counter from.\n\t * @param  time    The time the clock should start\n\t * @param offset  Where the tick counter starts counting from.\n\t */\n\tstart(time?: Time, offset?: Ticks): this {\n\t\t// make sure the context is started\n\t\t// this.context.resume();\n\t\t// start the loop\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis.log(\"start\", computedTime);\n\t\tif (this._state.getValueAtTime(computedTime) !== \"started\") {\n\t\t\tthis._state.setStateAtTime(\"started\", computedTime);\n\t\t\tthis._tickSource.start(computedTime, offset);\n\t\t\tif (computedTime < this._lastUpdate) {\n\t\t\t\tthis.emit(\"start\", computedTime, offset);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the clock. Stopping the clock resets the tick counter to 0.\n\t * @param time The time when the clock should stop.\n\t * @example\n\t * import { Clock } from \"tone\";\n\t * const clock = new Clock(time => {\n\t * \tconsole.log(time);\n\t * }, 1);\n\t * clock.start();\n\t * // stop the clock after 10 seconds\n\t * clock.stop(\"+10\");\n\t */\n\tstop(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis.log(\"stop\", computedTime);\n\t\tthis._state.cancel(computedTime);\n\t\tthis._state.setStateAtTime(\"stopped\", computedTime);\n\t\tthis._tickSource.stop(computedTime);\n\t\tif (computedTime < this._lastUpdate) {\n\t\t\tthis.emit(\"stop\", computedTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Pause the clock. Pausing does not reset the tick counter.\n\t * @param time The time when the clock should stop.\n\t */\n\tpause(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(computedTime) === \"started\") {\n\t\t\tthis._state.setStateAtTime(\"paused\", computedTime);\n\t\t\tthis._tickSource.pause(computedTime);\n\t\t\tif (computedTime < this._lastUpdate) {\n\t\t\t\tthis.emit(\"pause\", computedTime);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * The number of times the callback was invoked. Starts counting at 0\n\t * and increments after the callback was invoked.\n\t */\n\tget ticks(): Ticks {\n\t\treturn Math.ceil(this.getTicksAtTime(this.now()));\n\t}\n\tset ticks(t: Ticks) {\n\t\tthis._tickSource.ticks = t;\n\t}\n\n\t/**\n\t * The time since ticks=0 that the Clock has been running. Accounts for tempo curves\n\t */\n\tget seconds(): Seconds {\n\t\treturn this._tickSource.seconds;\n\t}\n\tset seconds(s: Seconds) {\n\t\tthis._tickSource.seconds = s;\n\t}\n\n\t/**\n\t * Return the elapsed seconds at the given time.\n\t * @param  time  When to get the elapsed seconds\n\t * @return  The number of elapsed seconds\n\t */\n\tgetSecondsAtTime(time: Time): Seconds {\n\t\treturn this._tickSource.getSecondsAtTime(time);\n\t}\n\n\t/**\n\t * Set the clock's ticks at the given time.\n\t * @param  ticks The tick value to set\n\t * @param  time  When to set the tick value\n\t */\n\tsetTicksAtTime(ticks: Ticks, time: Time): this {\n\t\tthis._tickSource.setTicksAtTime(ticks, time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the clock's ticks at the given time.\n\t * @param  time  When to get the tick value\n\t * @return The tick value at the given time.\n\t */\n\tgetTicksAtTime(time?: Time): Ticks {\n\t\treturn this._tickSource.getTicksAtTime(time);\n\t}\n\n\t/**\n\t * Get the time of the next tick\n\t * @param  offset The tick number.\n\t */\n\tnextTickTime(offset: Ticks, when: Time): Seconds {\n\t\tconst computedTime = this.toSeconds(when);\n\t\tconst currentTick = this.getTicksAtTime(computedTime);\n\t\treturn this._tickSource.getTimeOfTick(currentTick + offset, computedTime);\n\t}\n\n\t/**\n\t * The scheduling loop.\n\t */\n\tprivate _loop(): void {\n\n\t\tconst startTime = this._lastUpdate;\n\t\tconst endTime = this.now();\n\t\tthis._lastUpdate = endTime;\n\t\tthis.log(\"loop\", startTime, endTime);\n\n\t\tif (startTime !== endTime) {\n\t\t\t// the state change events\n\t\t\tthis._state.forEachBetween(startTime, endTime, e => {\n\t\t\t\tswitch (e.state) {\n\t\t\t\t\tcase \"started\" :\n\t\t\t\t\t\tconst offset = this._tickSource.getTicksAtTime(e.time);\n\t\t\t\t\t\tthis.emit(\"start\", e.time, offset);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"stopped\" :\n\t\t\t\t\t\tif (e.time !== 0) {\n\t\t\t\t\t\t\tthis.emit(\"stop\", e.time);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"paused\" :\n\t\t\t\t\t\tthis.emit(\"pause\", e.time);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t});\n\t\t\t// the tick callbacks\n\t\t\tthis._tickSource.forEachTickBetween(startTime, endTime, (time, ticks) => {\n\t\t\t\tthis.callback(time, ticks);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Returns the scheduled state at the given time.\n\t * @param  time  The time to query.\n\t * @return  The name of the state input in setStateAtTime.\n\t * @example\n\t * import { Clock } from \"tone\";\n\t * const clock = new Clock();\n\t * clock.start(\"+0.1\");\n\t * clock.getStateAtTime(\"+0.1\"); // returns \"started\"\n\t */\n\tgetStateAtTime(time: Time): PlaybackState {\n\t\tconst computedTime = this.toSeconds(time);\n\t\treturn this._state.getValueAtTime(computedTime);\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.context.off(\"tick\", this._boundLoop);\n\t\tthis._tickSource.dispose();\n\t\tthis._state.dispose();\n\t\treturn this;\n\t}\n\n\t//-------------------------------------\n\t// EMITTER MIXIN TO SATISFY COMPILER\n\t//-------------------------------------\n\n\ton!: (event: ClockEvent, callback: (...args: any[]) => void) => this;\n\tonce!: (event: ClockEvent, callback: (...args: any[]) => void) => this;\n\toff!: (event: ClockEvent, callback?: ((...args: any[]) => void) | undefined) => this;\n\temit!: (event: any, ...args: any[]) => this;\n}\n\nEmitter.mixin(Clock);\n","import { Timeline, TimelineEvent } from \"./Timeline\";\nimport { Tone } from \"../Tone\";\nimport { Seconds } from \"../type/Units\";\n\ninterface TimelineValueEvent<T> extends TimelineEvent {\n\tvalue: T;\n}\n\n/**\n * Represents a single value which is gettable and settable in a timed way\n */\nexport class TimelineValue<Type> extends Tone {\n\n\treadonly name: string = \"TimelineValue\";\n\n\t/**\n\t * The timeline which stores the values\n\t */\n\tprivate _timeline: Timeline<TimelineValueEvent<Type>> = new Timeline({ memory: 10 })\n\n\t/**\n\t * Hold the value to return if there is no scheduled values\n\t */\n\tprivate _initialValue: Type;\n\n\t/**\n\t * @param initialValue The value to return if there is no scheduled values\n\t */\n\tconstructor(initialValue: Type) {\n\n\t\tsuper();\n\t\tthis._initialValue = initialValue;\n\t}\n\n\t/**\n\t * Set the value at the given time\n\t */\n\tset(value: Type, time: Seconds): this {\n\t\tthis._timeline.add({\n\t\t\tvalue, time\n\t\t});\n\t\treturn this;\n\t}\n\t\n\t/**\n\t * Get the value at the given time\n\t */\n\tget(time: Seconds): Type {\n\t\tconst event = this._timeline.get(time);\n\t\tif (event) {\n\t\t\treturn event.value;\n\t\t} else {\n\t\t\treturn this._initialValue;\n\t\t}\n\t}\n}\n","import { getContext } from \"../Global\";\nimport { TimeBaseUnit, TimeValue } from \"./TimeBase\";\nimport { TransportTimeClass } from \"./TransportTime\";\nimport { Seconds, Ticks } from \"./Units\";\n\n/**\n * Ticks is a primitive type for encoding Time values.\n * Ticks can be constructed with or without the `new` keyword. Ticks can be passed\n * into the parameter of any method which takes time as an argument.\n * @example\n * import { Ticks } from \"tone\";\n * const t = Ticks(\"4n\"); // a quarter note as ticks\n * @category Unit\n */\nexport class TicksClass extends TransportTimeClass<Ticks> {\n\n\treadonly name: string = \"Ticks\";\n\n\treadonly defaultUnits: TimeBaseUnit = \"i\";\n\n\t/**\n\t * Get the current time in the given units\n\t */\n\tprotected _now(): Ticks {\n\t\treturn this.context.transport.ticks;\n\t}\n\n\t/**\n\t * Return the value of the beats in the current units\n\t */\n\tprotected _beatsToUnits(beats: number): Ticks {\n\t\treturn this._getPPQ() * beats;\n\t}\n\n\t/**\n\t * Returns the value of a second in the current units\n\t */\n\tprotected _secondsToUnits(seconds: Seconds): Ticks {\n\t\treturn Math.floor(seconds / (60 / this._getBpm()) * this._getPPQ());\n\t}\n\n\t/**\n\t * Returns the value of a tick in the current time units\n\t */\n\tprotected _ticksToUnits(ticks: Ticks): Ticks {\n\t\treturn ticks;\n\t}\n\n\t/**\n\t * Return the time in ticks\n\t */\n\ttoTicks(): Ticks {\n\t\treturn this.valueOf() as Ticks;\n\t}\n\n\t/**\n\t * Return the time in seconds\n\t */\n\ttoSeconds(): Seconds {\n\t\treturn (this.valueOf() / this._getPPQ()) * (60 / this._getBpm());\n\t}\n}\n\n/**\n * Convert a time representation to ticks\n * @category Unit\n */\nexport function Ticks(value?: TimeValue, units?: TimeBaseUnit): TicksClass {\n\treturn new TicksClass(getContext(), value, units);\n}\n","import { Tone } from \"../Tone\";\nimport { isDefined } from \"./TypeCheck\";\n\n/**\n * An IntervalTimeline event must have a time and duration\n */\nexport interface IntervalTimelineEvent {\n\ttime: number;\n\tduration: number;\n\t[propName: string]: any;\n}\n\ntype IteratorCallback = (event: IntervalTimelineEvent) => void;\n\n/**\n * Similar to Tone.Timeline, but all events represent\n * intervals with both \"time\" and \"duration\" times. The\n * events are placed in a tree structure optimized\n * for querying an intersection point with the timeline\n * events. Internally uses an [Interval Tree](https://en.wikipedia.org/wiki/Interval_tree)\n * to represent the data.\n */\nexport class IntervalTimeline extends Tone {\n\n\treadonly name: string = \"IntervalTimeline\";\n\n\t/**\n\t * The root node of the inteval tree\n\t */\n\tprivate _root: IntervalNode | null = null;\n\n\t/**\n\t * Keep track of the length of the timeline.\n\t */\n\tprivate _length: number = 0;\n\n\t/**\n\t * The event to add to the timeline. All events must\n\t * have a time and duration value\n\t * @param  event  The event to add to the timeline\n\t */\n\tadd(event: IntervalTimelineEvent): this {\n\t\tthis.assert(isDefined(event.time), \"Events must have a time property\");\n\t\tthis.assert(isDefined(event.duration), \"Events must have a duration parameter\");\n\n\t\tevent.time = event.time.valueOf();\n\t\tlet node: IntervalNode | null = new IntervalNode(event.time, event.time + event.duration, event);\n\t\tif (this._root === null) {\n\t\t\tthis._root = node;\n\t\t} else {\n\t\t\tthis._root.insert(node);\n\t\t}\n\t\tthis._length++;\n\t\t// Restructure tree to be balanced\n\t\twhile (node !== null) {\n\t\t\tnode.updateHeight();\n\t\t\tnode.updateMax();\n\t\t\tthis._rebalance(node);\n\t\t\tnode = node.parent;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Remove an event from the timeline.\n\t * @param  event  The event to remove from the timeline\n\t */\n\tremove(event: IntervalTimelineEvent): this {\n\t\tif (this._root !== null) {\n\t\t\tconst results: IntervalNode[] = [];\n\t\t\tthis._root.search(event.time, results);\n\t\t\tfor (const node of results) {\n\t\t\t\tif (node.event === event) {\n\t\t\t\t\tthis._removeNode(node);\n\t\t\t\t\tthis._length--;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * The number of items in the timeline.\n\t * @readOnly\n\t */\n\tget length(): number {\n\t\treturn this._length;\n\t}\n\n\t/**\n\t * Remove events whose time time is after the given time\n\t * @param  after  The time to query.\n\t */\n\tcancel(after: number): this {\n\t\tthis.forEachFrom(after, event => this.remove(event));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set the root node as the given node\n\t */\n\tprivate _setRoot(node: IntervalNode | null): void {\n\t\tthis._root = node;\n\t\tif (this._root !== null) {\n\t\t\tthis._root.parent = null;\n\t\t}\n\t}\n\n\t/**\n\t * Replace the references to the node in the node's parent\n\t * with the replacement node.\n\t */\n\tprivate _replaceNodeInParent(node: IntervalNode, replacement: IntervalNode | null): void {\n\t\tif (node.parent !== null) {\n\t\t\tif (node.isLeftChild()) {\n\t\t\t\tnode.parent.left = replacement;\n\t\t\t} else {\n\t\t\t\tnode.parent.right = replacement;\n\t\t\t}\n\t\t\tthis._rebalance(node.parent);\n\t\t} else {\n\t\t\tthis._setRoot(replacement);\n\t\t}\n\t}\n\n\t/**\n\t * Remove the node from the tree and replace it with\n\t * a successor which follows the schema.\n\t */\n\tprivate _removeNode(node: IntervalNode): void {\n\t\tif (node.left === null && node.right === null) {\n\t\t\tthis._replaceNodeInParent(node, null);\n\t\t} else if (node.right === null) {\n\t\t\tthis._replaceNodeInParent(node, node.left);\n\t\t} else if (node.left === null) {\n\t\t\tthis._replaceNodeInParent(node, node.right);\n\t\t} else {\n\t\t\tconst balance = node.getBalance();\n\t\t\tlet replacement: IntervalNode;\n\t\t\tlet temp: IntervalNode | null = null;\n\t\t\tif (balance > 0) {\n\t\t\t\tif (node.left.right === null) {\n\t\t\t\t\treplacement = node.left;\n\t\t\t\t\treplacement.right = node.right;\n\t\t\t\t\ttemp = replacement;\n\t\t\t\t} else {\n\t\t\t\t\treplacement = node.left.right;\n\t\t\t\t\twhile (replacement.right !== null) {\n\t\t\t\t\t\treplacement = replacement.right;\n\t\t\t\t\t}\n\t\t\t\t\tif (replacement.parent) {\n\t\t\t\t\t\treplacement.parent.right = replacement.left;\n\t\t\t\t\t\ttemp = replacement.parent;\n\t\t\t\t\t\treplacement.left = node.left;\n\t\t\t\t\t\treplacement.right = node.right;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (node.right.left === null) {\n\t\t\t\treplacement = node.right;\n\t\t\t\treplacement.left = node.left;\n\t\t\t\ttemp = replacement;\n\t\t\t} else {\n\t\t\t\treplacement = node.right.left;\n\t\t\t\twhile (replacement.left !== null) {\n\t\t\t\t\treplacement = replacement.left;\n\t\t\t\t}\n\t\t\t\tif (replacement.parent) {\n\t\t\t\t\treplacement.parent.left = replacement.right;\n\t\t\t\t\ttemp = replacement.parent;\n\t\t\t\t\treplacement.left = node.left;\n\t\t\t\t\treplacement.right = node.right;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (node.parent !== null) {\n\t\t\t\tif (node.isLeftChild()) {\n\t\t\t\t\tnode.parent.left = replacement;\n\t\t\t\t} else {\n\t\t\t\t\tnode.parent.right = replacement;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._setRoot(replacement);\n\t\t\t}\n\t\t\tif (temp) {\n\t\t\t\tthis._rebalance(temp);\n\t\t\t}\n\t\t}\n\t\tnode.dispose();\n\t}\n\n\t/**\n\t * Rotate the tree to the left\n\t */\n\tprivate _rotateLeft(node: IntervalNode): void {\n\t\tconst parent = node.parent;\n\t\tconst isLeftChild = node.isLeftChild();\n\n\t\t// Make node.right the new root of this sub tree (instead of node)\n\t\tconst pivotNode = node.right;\n\t\tif (pivotNode) {\n\t\t\tnode.right = pivotNode.left;\n\t\t\tpivotNode.left = node;\n\t\t}\n\n\t\tif (parent !== null) {\n\t\t\tif (isLeftChild) {\n\t\t\t\tparent.left = pivotNode;\n\t\t\t} else {\n\t\t\t\tparent.right = pivotNode;\n\t\t\t}\n\t\t} else {\n\t\t\tthis._setRoot(pivotNode);\n\t\t}\n\t}\n\n\t/**\n\t * Rotate the tree to the right\n\t */\n\tprivate _rotateRight(node: IntervalNode): void {\n\t\tconst parent = node.parent;\n\t\tconst isLeftChild = node.isLeftChild();\n\n\t\t// Make node.left the new root of this sub tree (instead of node)\n\t\tconst pivotNode = node.left;\n\t\tif (pivotNode) {\n\t\t\tnode.left = pivotNode.right;\n\t\t\tpivotNode.right = node;\n\t\t}\n\n\t\tif (parent !== null) {\n\t\t\tif (isLeftChild) {\n\t\t\t\tparent.left = pivotNode;\n\t\t\t} else {\n\t\t\t\tparent.right = pivotNode;\n\t\t\t}\n\t\t} else {\n\t\t\tthis._setRoot(pivotNode);\n\t\t}\n\t}\n\n\t/**\n\t * Balance the BST\n\t */\n\tprivate _rebalance(node: IntervalNode): void {\n\t\tconst balance = node.getBalance();\n\t\tif (balance > 1 && node.left) {\n\t\t\tif (node.left.getBalance() < 0) {\n\t\t\t\tthis._rotateLeft(node.left);\n\t\t\t} else {\n\t\t\t\tthis._rotateRight(node);\n\t\t\t}\n\t\t} else if (balance < -1 && node.right) {\n\t\t\tif (node.right.getBalance() > 0) {\n\t\t\t\tthis._rotateRight(node.right);\n\t\t\t} else {\n\t\t\t\tthis._rotateLeft(node);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Get an event whose time and duration span the give time. Will\n\t * return the match whose \"time\" value is closest to the given time.\n\t * @return  The event which spans the desired time\n\t */\n\tget(time: number): IntervalTimelineEvent | null {\n\t\tif (this._root !== null) {\n\t\t\tconst results: IntervalNode[] = [];\n\t\t\tthis._root.search(time, results);\n\t\t\tif (results.length > 0) {\n\t\t\t\tlet max = results[0];\n\t\t\t\tfor (let i = 1; i < results.length; i++) {\n\t\t\t\t\tif (results[i].low > max.low) {\n\t\t\t\t\t\tmax = results[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn max.event;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Iterate over everything in the timeline.\n\t * @param  callback The callback to invoke with every item\n\t */\n\tforEach(callback: IteratorCallback): this {\n\t\tif (this._root !== null) {\n\t\t\tconst allNodes: IntervalNode[] = [];\n\t\t\tthis._root.traverse(node => allNodes.push(node));\n\t\t\tallNodes.forEach(node => {\n\t\t\t\tif (node.event) {\n\t\t\t\t\tcallback(node.event);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Iterate over everything in the array in which the given time\n\t * overlaps with the time and duration time of the event.\n\t * @param  time The time to check if items are overlapping\n\t * @param  callback The callback to invoke with every item\n\t */\n\tforEachAtTime(time: number, callback: IteratorCallback): this {\n\t\tif (this._root !== null) {\n\t\t\tconst results: IntervalNode[] = [];\n\t\t\tthis._root.search(time, results);\n\t\t\tresults.forEach(node => {\n\t\t\t\tif (node.event) {\n\t\t\t\t\tcallback(node.event);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Iterate over everything in the array in which the time is greater\n\t * than or equal to the given time.\n\t * @param  time The time to check if items are before\n\t * @param  callback The callback to invoke with every item\n\t */\n\tforEachFrom(time: number, callback: IteratorCallback): this {\n\t\tif (this._root !== null) {\n\t\t\tconst results: IntervalNode[] = [];\n\t\t\tthis._root.searchAfter(time, results);\n\t\t\tresults.forEach(node => {\n\t\t\t\tif (node.event) {\n\t\t\t\t\tcallback(node.event);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (this._root !== null) {\n\t\t\tthis._root.traverse(node => node.dispose());\n\t\t}\n\t\tthis._root = null;\n\t\treturn this;\n\t}\n}\n\n//-------------------------------------\n// \tINTERVAL NODE HELPER\n//-------------------------------------\n\n/**\n * Represents a node in the binary search tree, with the addition\n * of a \"high\" value which keeps track of the highest value of\n * its children.\n * References:\n * https://brooknovak.wordpress.com/2013/12/07/augmented-interval-tree-in-c/\n * http://www.mif.vu.lt/~valdas/ALGORITMAI/LITERATURA/Cormen/Cormen.pdf\n * @param low\n * @param high\n */\nclass IntervalNode {\n\n\t// the event container\n\tevent: IntervalTimelineEvent | null;\n\t// the low value\n\tlow: number;\n\t// the high value\n\thigh: number;\n\t// the high value for this and all child nodes\n\tmax: number;\n\t// the nodes to the left\n\tprivate _left: IntervalNode | null = null;\n\t// the nodes to the right\n\tprivate _right: IntervalNode | null = null;\n\t// the parent node\n\tparent: IntervalNode | null = null;\n\t// the number of child nodes\n\theight: number = 0;\n\n\tconstructor(low: number, high: number, event: IntervalTimelineEvent) {\n\t\tthis.event = event;\n\t\t// the low value\n\t\tthis.low = low;\n\t\t// the high value\n\t\tthis.high = high;\n\t\t// the high value for this and all child nodes\n\t\tthis.max = this.high;\n\t}\n\n\t/**\n\t * Insert a node into the correct spot in the tree\n\t */\n\tinsert(node: IntervalNode): void {\n\t\tif (node.low <= this.low) {\n\t\t\tif (this.left === null) {\n\t\t\t\tthis.left = node;\n\t\t\t} else {\n\t\t\t\tthis.left.insert(node);\n\t\t\t}\n\t\t} else if (this.right === null) {\n\t\t\tthis.right = node;\n\t\t} else {\n\t\t\tthis.right.insert(node);\n\t\t}\n\t}\n\n\t/**\n\t * Search the tree for nodes which overlap\n\t * with the given point\n\t * @param  point  The point to query\n\t * @param  results  The array to put the results\n\t */\n\tsearch(point: number, results: IntervalNode[]): void {\n\t\t// If p is to the right of the rightmost point of any interval\n\t\t// in this node and all children, there won't be any matches.\n\t\tif (point > this.max) {\n\t\t\treturn;\n\t\t}\n\t\t// Search left children\n\t\tif (this.left !== null) {\n\t\t\tthis.left.search(point, results);\n\t\t}\n\t\t// Check this node\n\t\tif (this.low <= point && this.high > point) {\n\t\t\tresults.push(this);\n\t\t}\n\t\t// If p is to the left of the time of this interval,\n\t\t// then it can't be in any child to the right.\n\t\tif (this.low > point) {\n\t\t\treturn;\n\t\t}\n\t\t// Search right children\n\t\tif (this.right !== null) {\n\t\t\tthis.right.search(point, results);\n\t\t}\n\t}\n\n\t/**\n\t * Search the tree for nodes which are less\n\t * than the given point\n\t * @param  point  The point to query\n\t * @param  results  The array to put the results\n\t */\n\tsearchAfter(point: number, results: IntervalNode[]): void {\n\t\t// Check this node\n\t\tif (this.low >= point) {\n\t\t\tresults.push(this);\n\t\t\tif (this.left !== null) {\n\t\t\t\tthis.left.searchAfter(point, results);\n\t\t\t}\n\t\t}\n\t\t// search the right side\n\t\tif (this.right !== null) {\n\t\t\tthis.right.searchAfter(point, results);\n\t\t}\n\t}\n\n\t/**\n\t * Invoke the callback on this element and both it's branches\n\t * @param  {Function}  callback\n\t */\n\ttraverse(callback: (self: IntervalNode) => void): void {\n\t\tcallback(this);\n\t\tif (this.left !== null) {\n\t\t\tthis.left.traverse(callback);\n\t\t}\n\t\tif (this.right !== null) {\n\t\t\tthis.right.traverse(callback);\n\t\t}\n\t}\n\n\t/**\n\t * Update the height of the node\n\t */\n\tupdateHeight(): void {\n\t\tif (this.left !== null && this.right !== null) {\n\t\t\tthis.height = Math.max(this.left.height, this.right.height) + 1;\n\t\t} else if (this.right !== null) {\n\t\t\tthis.height = this.right.height + 1;\n\t\t} else if (this.left !== null) {\n\t\t\tthis.height = this.left.height + 1;\n\t\t} else {\n\t\t\tthis.height = 0;\n\t\t}\n\t}\n\n\t/**\n\t * Update the height of the node\n\t */\n\tupdateMax(): void {\n\t\tthis.max = this.high;\n\t\tif (this.left !== null) {\n\t\t\tthis.max = Math.max(this.max, this.left.max);\n\t\t}\n\t\tif (this.right !== null) {\n\t\t\tthis.max = Math.max(this.max, this.right.max);\n\t\t}\n\t}\n\n\t/**\n\t * The balance is how the leafs are distributed on the node\n\t * @return  Negative numbers are balanced to the right\n\t */\n\tgetBalance(): number {\n\t\tlet balance = 0;\n\t\tif (this.left !== null && this.right !== null) {\n\t\t\tbalance = this.left.height - this.right.height;\n\t\t} else if (this.left !== null) {\n\t\t\tbalance = this.left.height + 1;\n\t\t} else if (this.right !== null) {\n\t\t\tbalance = -(this.right.height + 1);\n\t\t}\n\t\treturn balance;\n\t}\n\n\t/**\n\t * @returns true if this node is the left child of its parent\n\t */\n\tisLeftChild(): boolean {\n\t\treturn this.parent !== null && this.parent.left === this;\n\t}\n\n\t/**\n\t * get/set the left node\n\t */\n\tget left(): IntervalNode | null {\n\t\treturn this._left;\n\t}\n\n\tset left(node: IntervalNode | null) {\n\t\tthis._left = node;\n\t\tif (node !== null) {\n\t\t\tnode.parent = this;\n\t\t}\n\t\tthis.updateHeight();\n\t\tthis.updateMax();\n\t}\n\n\t/**\n\t * get/set the right node\n\t */\n\tget right(): IntervalNode | null {\n\t\treturn this._right;\n\t}\n\n\tset right(node: IntervalNode | null) {\n\t\tthis._right = node;\n\t\tif (node !== null) {\n\t\t\tnode.parent = this;\n\t\t}\n\t\tthis.updateHeight();\n\t\tthis.updateMax();\n\t}\n\n\t/**\n\t * null out references.\n\t */\n\tdispose(): void {\n\t\tthis.parent = null;\n\t\tthis._left = null;\n\t\tthis._right = null;\n\t\tthis.event = null;\n\t}\n}\n","import { Seconds, Ticks } from \"../type/Units\";\nimport { noOp } from \"../util/Interface\";\n\ntype Transport = import(\"../clock/Transport\").Transport;\n\nexport interface TransportEventOptions {\n\tcallback: (time: number) => void;\n\tonce: boolean;\n\ttime: Ticks;\n}\n\n/**\n * TransportEvent is an internal class used by [[Transport]]\n * to schedule events. Do no invoke this class directly, it is\n * handled from within Tone.Transport.\n */\nexport class TransportEvent {\n\n\t/**\n\t * Reference to the Transport that created it\n\t */\n\tprotected transport: Transport;\n\n\t/**\n\t * The unique id of the event\n\t */\n\tid: number = TransportEvent._eventId++;\n\n\t/**\n\t * The time the event starts\n\t */\n\ttime: Ticks;\n\n\t/**\n\t * The callback to invoke\n\t */\n\tprivate callback?: (time: Seconds) => void;\n\n\t/**\n\t * If the event should be removed after being invoked.\n\t */\n\tprivate _once: boolean;\n\n\t/**\n\t * @param transport The transport object which the event belongs to\n\t */\n\tconstructor(transport: Transport, opts: Partial<TransportEventOptions>) {\n\n\t\tconst options: TransportEventOptions = Object.assign(TransportEvent.getDefaults(), opts);\n\n\t\tthis.transport = transport;\n\t\tthis.callback = options.callback;\n\t\tthis._once = options.once;\n\t\tthis.time = options.time;\n\t}\n\n\tstatic getDefaults(): TransportEventOptions {\n\t\treturn {\n\t\t\tcallback: noOp,\n\t\t\tonce: false,\n\t\t\ttime: 0,\n\t\t};\n\t}\n\n\t/**\n\t * Current ID counter\n\t */\n\tprivate static _eventId: number = 0;\n\n\t/**\n\t * Invoke the event callback.\n\t * @param  time  The AudioContext time in seconds of the event\n\t */\n\tinvoke(time: Seconds): void {\n\t\tif (this.callback) {\n\t\t\tthis.callback(time);\n\t\t\tif (this._once) {\n\t\t\t\tthis.transport.clear(this.id);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tthis.callback = undefined;\n\t\treturn this;\n\t}\n}\n","import { BaseContext } from \"../context/BaseContext\";\nimport { TicksClass } from \"../type/Ticks\";\nimport { Seconds, Ticks, Time } from \"../type/Units\";\nimport { TransportEvent, TransportEventOptions } from \"./TransportEvent\";\n\ntype Transport = import(\"../clock/Transport\").Transport;\n\ninterface TransportRepeatEventOptions extends TransportEventOptions {\n\tinterval: Ticks;\n\tduration: Ticks;\n}\n\n/**\n * TransportRepeatEvent is an internal class used by Tone.Transport\n * to schedule repeat events. This class should not be instantiated directly.\n */\nexport class TransportRepeatEvent extends TransportEvent {\n\n\t/**\n\t * When the event should stop repeating\n\t */\n\tprivate duration: Ticks;\n\n\t/**\n\t * The interval of the repeated event\n\t */\n\tprivate _interval: Ticks;\n\n\t/**\n\t * The ID of the current timeline event\n\t */\n\tprivate _currentId: number = -1;\n\n\t/**\n\t * The ID of the next timeline event\n\t */\n\tprivate _nextId: number = -1;\n\n\t/**\n\t * The time of the next event\n\t */\n\tprivate _nextTick = this.time;\n\n\t/**\n\t * a reference to the bound start method\n\t */\n\tprivate _boundRestart = this._restart.bind(this);\n\n\t/**\n\t * The audio context belonging to this event\n\t */\n\tprotected context: BaseContext;\n\n\t/**\n\t * @param transport The transport object which the event belongs to\n\t */\n\tconstructor(transport: Transport, opts: Partial<TransportRepeatEventOptions>) {\n\n\t\tsuper(transport, opts);\n\n\t\tconst options = Object.assign(TransportRepeatEvent.getDefaults(), opts);\n\n\t\tthis.duration = new TicksClass(transport.context, options.duration).valueOf();\n\t\tthis._interval = new TicksClass(transport.context, options.interval).valueOf();\n\t\tthis._nextTick = options.time;\n\t\tthis.transport.on(\"start\", this._boundRestart);\n\t\tthis.transport.on(\"loopStart\", this._boundRestart);\n\t\tthis.context = this.transport.context;\n\t\tthis._restart();\n\t}\n\n\tstatic getDefaults(): TransportRepeatEventOptions {\n\t\treturn Object.assign({}, TransportEvent.getDefaults(), {\n\t\t\tduration: Infinity,\n\t\t\tinterval: 1,\n\t\t\tonce: false,\n\t\t});\n\t}\n\n\t/**\n\t * Invoke the callback. Returns the tick time which\n\t * the next event should be scheduled at.\n\t * @param  time  The AudioContext time in seconds of the event\n\t */\n\tinvoke(time: Seconds): void {\n\t\t// create more events if necessary\n\t\tthis._createEvents(time);\n\t\t// call the super class\n\t\tsuper.invoke(time);\n\t}\n\n\t/**\n\t * Push more events onto the timeline to keep up with the position of the timeline\n\t */\n\tprivate _createEvents(time: Seconds): void {\n\t\t// schedule the next event\n\t\tconst ticks = this.transport.getTicksAtTime(time);\n\t\tif (ticks >= this.time && ticks >= this._nextTick && this._nextTick + this._interval < this.time + this.duration) {\n\t\t\tthis._nextTick += this._interval;\n\t\t\tthis._currentId = this._nextId;\n\t\t\tthis._nextId = this.transport.scheduleOnce(this.invoke.bind(this),\n\t\t\t\tnew TicksClass(this.context, this._nextTick).toSeconds());\n\t\t}\n\t}\n\n\t/**\n\t * Push more events onto the timeline to keep up with the position of the timeline\n\t */\n\tprivate _restart(time?: Time): void {\n\t\tthis.transport.clear(this._currentId);\n\t\tthis.transport.clear(this._nextId);\n\t\tthis._nextTick = this.time;\n\t\tconst ticks = this.transport.getTicksAtTime(time);\n\t\tif (ticks > this.time) {\n\t\t\tthis._nextTick = this.time + Math.ceil((ticks - this.time) / this._interval) * this._interval;\n\t\t}\n\t\tthis._currentId = this.transport.scheduleOnce(this.invoke.bind(this),\n\t\t\tnew TicksClass(this.context, this._nextTick).toSeconds());\n\t\tthis._nextTick += this._interval;\n\t\tthis._nextId = this.transport.scheduleOnce(this.invoke.bind(this),\n\t\t\tnew TicksClass(this.context, this._nextTick).toSeconds());\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.transport.clear(this._currentId);\n\t\tthis.transport.clear(this._nextId);\n\t\tthis.transport.off(\"start\", this._boundRestart);\n\t\tthis.transport.off(\"loopStart\", this._boundRestart);\n\t\treturn this;\n\t}\n}\n","import { TimeClass } from \"../../core/type/Time\";\nimport { PlaybackState } from \"../../core/util/StateTimeline\";\nimport { TimelineValue } from \"../../core/util/TimelineValue\";\nimport { Signal } from \"../../signal/Signal\";\nimport { onContextClose, onContextInit } from \"../context/ContextInitialization\";\nimport { Gain } from \"../context/Gain\";\nimport { ToneWithContext, ToneWithContextOptions } from \"../context/ToneWithContext\";\nimport { TicksClass } from \"../type/Ticks\";\nimport { TransportTimeClass } from \"../type/TransportTime\";\nimport { BarsBeatsSixteenths, BPM, NormalRange, Seconds,\n\tSubdivision, Ticks, Time, TimeSignature, TransportTime } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Emitter } from \"../util/Emitter\";\nimport { readOnly, writable } from \"../util/Interface\";\nimport { IntervalTimeline } from \"../util/IntervalTimeline\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isArray, isDefined } from \"../util/TypeCheck\";\nimport { Clock } from \"./Clock\";\nimport { TickParam } from \"./TickParam\";\nimport { TransportEvent } from \"./TransportEvent\";\nimport { TransportRepeatEvent } from \"./TransportRepeatEvent\";\n\ninterface TransportOptions extends ToneWithContextOptions {\n\tbpm: BPM;\n\tswing: NormalRange;\n\tswingSubdivision: Subdivision;\n\ttimeSignature: number;\n\tloopStart: Time;\n\tloopEnd: Time;\n\tppq: number;\n}\n\ntype TransportEventNames = \"start\" | \"stop\" | \"pause\" | \"loop\" | \"loopEnd\" | \"loopStart\";\n\ninterface SyncedSignalEvent {\n\tsignal: Signal;\n\tinitial: number;\n\tratio: Gain;\n}\n\ntype TransportCallback = (time: Seconds) => void;\n\n/**\n * Transport for timing musical events.\n * Supports tempo curves and time changes. Unlike browser-based timing (setInterval, requestAnimationFrame)\n * Transport timing events pass in the exact time of the scheduled event\n * in the argument of the callback function. Pass that time value to the object\n * you're scheduling. <br><br>\n * A single transport is created for you when the library is initialized.\n * <br><br>\n * The transport emits the events: \"start\", \"stop\", \"pause\", and \"loop\" which are\n * called with the time of that event as the argument.\n *\n * @example\n * import { Oscillator, Transport } from \"tone\";\n * const osc = new Oscillator().toDestination();\n * // repeated event every 8th note\n * Transport.scheduleRepeat((time) => {\n * \t// use the callback time to schedule events\n * \tosc.start(time).stop(time + 0.1);\n * }, \"8n\");\n * // transport must be started before it starts invoking events\n * Transport.start();\n * @category Core\n */\nexport class Transport extends ToneWithContext<TransportOptions> implements Emitter<TransportEventNames> {\n\n\treadonly name: string = \"Transport\";\n\n\t//-------------------------------------\n\t// \tLOOPING\n\t//-------------------------------------\n\n\t/**\n\t * If the transport loops or not.\n\t */\n\tprivate _loop: TimelineValue<boolean> = new TimelineValue(false);\n\n\t/**\n\t * The loop start position in ticks\n\t */\n\tprivate _loopStart: Ticks = 0;\n\n\t/**\n\t * The loop end position in ticks\n\t */\n\tprivate _loopEnd: Ticks = 0;\n\n\t//-------------------------------------\n\t// \tCLOCK/TEMPO\n\t//-------------------------------------\n\n\t/**\n\t * Pulses per quarter is the number of ticks per quarter note.\n\t */\n\tprivate _ppq: number;\n\n\t/**\n\t * watches the main oscillator for timing ticks\n\t * initially starts at 120bpm\n\t */\n\tprivate _clock: Clock<\"bpm\">;\n\n\t/**\n\t * The Beats Per Minute of the Transport.\n\t * @example\n\t * import { Oscillator, Transport } from \"tone\";\n\t * const osc = new Oscillator().toDestination();\n\t * Transport.bpm.value = 80;\n\t * // start/stop the oscillator every quarter note\n\t * Transport.scheduleRepeat(time => {\n\t * \tosc.start(time).stop(time + 0.1);\n\t * }, \"4n\");\n\t * Transport.start();\n\t * // ramp the bpm to 120 over 10 seconds\n\t * Transport.bpm.rampTo(120, 10);\n\t */\n\tbpm: TickParam<\"bpm\">;\n\n\t/**\n\t * The time signature, or more accurately the numerator\n\t * of the time signature over a denominator of 4.\n\t */\n\tprivate _timeSignature: number;\n\n\t//-------------------------------------\n\t// \tTIMELINE EVENTS\n\t//-------------------------------------\n\n\t/**\n\t * All the events in an object to keep track by ID\n\t */\n\tprivate _scheduledEvents = {};\n\n\t/**\n\t * The scheduled events.\n\t */\n\tprivate _timeline: Timeline<TransportEvent> = new Timeline();\n\n\t/**\n\t * Repeated events\n\t */\n\tprivate _repeatedEvents: IntervalTimeline = new IntervalTimeline();\n\n\t/**\n\t * All of the synced Signals\n\t */\n\tprivate _syncedSignals: SyncedSignalEvent[] = [];\n\n\t//-------------------------------------\n\t// \tSWING\n\t//-------------------------------------\n\n\t/**\n\t * The subdivision of the swing\n\t */\n\tprivate _swingTicks: Ticks;\n\n\t/**\n\t * The swing amount\n\t */\n\tprivate _swingAmount: NormalRange = 0;\n\n\tconstructor(options?: Partial<TransportOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Transport.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Transport.getDefaults(), arguments);\n\n\t\t// CLOCK/TEMPO\n\t\tthis._ppq = options.ppq;\n\t\tthis._clock = new Clock({\n\t\t\tcallback: this._processTick.bind(this),\n\t\t\tcontext: this.context,\n\t\t\tfrequency: 0,\n\t\t\tunits: \"bpm\",\n\t\t});\n\t\tthis._bindClockEvents();\n\t\tthis.bpm = this._clock.frequency as unknown as TickParam<\"bpm\">;\n\t\tthis._clock.frequency.multiplier = options.ppq;\n\t\tthis.bpm.value = options.bpm;\n\t\treadOnly(this, \"bpm\");\n\t\tthis._timeSignature = options.timeSignature;\n\n\t\t// SWING\n\t\tthis._swingTicks = options.ppq / 2; // 8n\n\t}\n\n\tstatic getDefaults(): TransportOptions {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tbpm: 120,\n\t\t\tloopEnd: \"4m\" as Subdivision,\n\t\t\tloopStart: 0,\n\t\t\tppq: 192,\n\t\t\tswing: 0,\n\t\t\tswingSubdivision: \"8n\" as Subdivision,\n\t\t\ttimeSignature: 4,\n\t\t});\n\t}\n\n\t//-------------------------------------\n\t// \tTICKS\n\t//-------------------------------------\n\n\t/**\n\t * called on every tick\n\t * @param  tickTime clock relative tick time\n\t */\n\tprivate _processTick(tickTime: Seconds, ticks: Ticks): void {\n\t\t// handle swing\n\t\tif (this._swingAmount > 0 &&\n\t\t\tticks % this._ppq !== 0 && // not on a downbeat\n\t\t\tticks % (this._swingTicks * 2) !== 0) {\n\t\t\t// add some swing\n\t\t\tconst progress = (ticks % (this._swingTicks * 2)) / (this._swingTicks * 2);\n\t\t\tconst amount = Math.sin((progress) * Math.PI) * this._swingAmount;\n\t\t\ttickTime += new TicksClass(this.context, this._swingTicks * 2 / 3).toSeconds() * amount;\n\t\t}\n\t\t// do the loop test\n\t\tif (this._loop.get(tickTime)) {\n\t\t\tif (ticks >= this._loopEnd) {\n\t\t\t\tthis.emit(\"loopEnd\", tickTime);\n\t\t\t\tthis._clock.setTicksAtTime(this._loopStart, tickTime);\n\t\t\t\tticks = this._loopStart;\n\t\t\t\tthis.emit(\"loopStart\", tickTime, this._clock.getSecondsAtTime(tickTime));\n\t\t\t\tthis.emit(\"loop\", tickTime);\n\t\t\t}\n\t\t}\n\t\t// invoke the timeline events scheduled on this tick\n\t\tthis._timeline.forEachAtTime(ticks, event => event.invoke(tickTime));\n\t}\n\n\t//-------------------------------------\n\t// \tSCHEDULABLE EVENTS\n\t//-------------------------------------\n\n\t/**\n\t * Schedule an event along the timeline.\n\t * @param callback The callback to be invoked at the time.\n\t * @param time The time to invoke the callback at.\n\t * @return The id of the event which can be used for canceling the event.\n\t * @example\n\t * import { Transport } from \"tone\";\n\t * // schedule an event on the 16th measure\n\t * Transport.schedule((time) => {\n\t * \t// invoked on measure 16\n\t * \tconsole.log(\"measure 16!\");\n\t * }, \"16:0:0\");\n\t */\n\tschedule(callback: TransportCallback, time: TransportTime | TransportTimeClass): number {\n\t\tconst event = new TransportEvent(this, {\n\t\t\tcallback,\n\t\t\ttime: new TransportTimeClass(this.context, time).toTicks(),\n\t\t});\n\t\treturn this._addEvent(event, this._timeline);\n\t}\n\n\t/**\n\t * Schedule a repeated event along the timeline. The event will fire\n\t * at the `interval` starting at the `startTime` and for the specified\n\t * `duration`.\n\t * @param  callback   The callback to invoke.\n\t * @param  interval   The duration between successive callbacks. Must be a positive number.\n\t * @param  startTime  When along the timeline the events should start being invoked.\n\t * @param  duration How long the event should repeat.\n\t * @return  The ID of the scheduled event. Use this to cancel the event.\n\t * @example\n\t * import { Oscillator, Transport } from \"tone\";\n\t * const osc = new Oscillator().toDestination().start();\n\t * // a callback invoked every eighth note after the first measure\n\t * Transport.scheduleRepeat((time) => {\n\t * \tosc.start(time).stop(time + 0.1);\n\t * }, \"8n\", \"1m\");\n\t */\n\tscheduleRepeat(\n\t\tcallback: TransportCallback,\n\t\tinterval: Time | TimeClass,\n\t\tstartTime?: TransportTime | TransportTimeClass,\n\t\tduration: Time = Infinity,\n\t): number {\n\t\tconst event = new TransportRepeatEvent(this, {\n\t\t\tcallback,\n\t\t\tduration: new TimeClass(this.context, duration).toTicks(),\n\t\t\tinterval: new TimeClass(this.context, interval).toTicks(),\n\t\t\ttime: new TransportTimeClass(this.context, startTime).toTicks(),\n\t\t});\n\t\t// kick it off if the Transport is started\n\t\t// @ts-ignore\n\t\treturn this._addEvent(event, this._repeatedEvents);\n\t}\n\n\t/**\n\t * Schedule an event that will be removed after it is invoked.\n\t * @param callback The callback to invoke once.\n\t * @param time The time the callback should be invoked.\n\t * @returns The ID of the scheduled event.\n\t */\n\tscheduleOnce(callback: TransportCallback, time: TransportTime | TransportTimeClass): number {\n\t\tconst event = new TransportEvent(this, {\n\t\t\tcallback,\n\t\t\tonce: true,\n\t\t\ttime: new TransportTimeClass(this.context, time).toTicks(),\n\t\t});\n\t\treturn this._addEvent(event, this._timeline);\n\t}\n\n\t/**\n\t * Clear the passed in event id from the timeline\n\t * @param eventId The id of the event.\n\t */\n\tclear(eventId: number): this {\n\t\tif (this._scheduledEvents.hasOwnProperty(eventId)) {\n\t\t\tconst item = this._scheduledEvents[eventId.toString()];\n\t\t\titem.timeline.remove(item.event);\n\t\t\titem.event.dispose();\n\t\t\tdelete this._scheduledEvents[eventId.toString()];\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add an event to the correct timeline. Keep track of the\n\t * timeline it was added to.\n\t * @returns the event id which was just added\n\t */\n\tprivate _addEvent(event: TransportEvent, timeline: Timeline<TransportEvent>): number {\n\t\tthis._scheduledEvents[event.id.toString()] = {\n\t\t\tevent,\n\t\t\ttimeline,\n\t\t};\n\t\ttimeline.add(event);\n\t\treturn event.id;\n\t}\n\n\t/**\n\t * Remove scheduled events from the timeline after\n\t * the given time. Repeated events will be removed\n\t * if their startTime is after the given time\n\t * @param after Clear all events after this time.\n\t */\n\tcancel(after: TransportTime = 0): this {\n\t\tconst computedAfter = this.toTicks(after);\n\t\tthis._timeline.forEachFrom(computedAfter, event => this.clear(event.id));\n\t\tthis._repeatedEvents.forEachFrom(computedAfter, event => this.clear(event.id));\n\t\treturn this;\n\t}\n\n\t//-------------------------------------\n\t// \tSTART/STOP/PAUSE\n\t//-------------------------------------\n\n\t/**\n\t * Bind start/stop/pause events from the clock and emit them.\n\t */\n\tprivate _bindClockEvents(): void {\n\t\tthis._clock.on(\"start\", (time, offset) => {\n\t\t\toffset = new TicksClass(this.context, offset).toSeconds();\n\t\t\tthis.emit(\"start\", time, offset);\n\t\t});\n\n\t\tthis._clock.on(\"stop\", (time) => {\n\t\t\tthis.emit(\"stop\", time);\n\t\t});\n\n\t\tthis._clock.on(\"pause\", (time) => {\n\t\t\tthis.emit(\"pause\", time);\n\t\t});\n\t}\n\n\t/**\n\t * Returns the playback state of the source, either \"started\", \"stopped\", or \"paused\"\n\t */\n\tget state(): PlaybackState {\n\t\treturn this._clock.getStateAtTime(this.now());\n\t}\n\n\t/**\n\t * Start the transport and all sources synced to the transport.\n\t * @param  time The time when the transport should start.\n\t * @param  offset The timeline offset to start the transport.\n\t * @example\n\t * import { Transport } from \"tone\";\n\t * // start the transport in one second starting at beginning of the 5th measure.\n\t * Transport.start(\"+1\", \"4:0:0\");\n\t */\n\tstart(time?: Time, offset?: TransportTime): this {\n\t\tlet offsetTicks;\n\t\tif (isDefined(offset)) {\n\t\t\toffsetTicks = this.toTicks(offset);\n\t\t}\n\t\t// start the clock\n\t\tthis._clock.start(time, offsetTicks);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the transport and all sources synced to the transport.\n\t * @param time The time when the transport should stop.\n\t * @example\n\t * import { Transport } from \"tone\";\n\t * Transport.stop();\n\t */\n\tstop(time?: Time): this {\n\t\tthis._clock.stop(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Pause the transport and all sources synced to the transport.\n\t */\n\tpause(time?: Time): this {\n\t\tthis._clock.pause(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Toggle the current state of the transport. If it is\n\t * started, it will stop it, otherwise it will start the Transport.\n\t * @param  time The time of the event\n\t */\n\ttoggle(time?: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tif (this._clock.getStateAtTime(time) !== \"started\") {\n\t\t\tthis.start(time);\n\t\t} else {\n\t\t\tthis.stop(time);\n\t\t}\n\t\treturn this;\n\t}\n\n\t//-------------------------------------\n\t// \tSETTERS/GETTERS\n\t//-------------------------------------\n\n\t/**\n\t * The time signature as just the numerator over 4.\n\t * For example 4/4 would be just 4 and 6/8 would be 3.\n\t * @example\n\t * import { Transport } from \"tone\";\n\t * // common time\n\t * Transport.timeSignature = 4;\n\t * // 7/8\n\t * Transport.timeSignature = [7, 8];\n\t * // this will be reduced to a single number\n\t * Transport.timeSignature; // returns 3.5\n\t */\n\tget timeSignature(): TimeSignature {\n\t\treturn this._timeSignature;\n\t}\n\tset timeSignature(timeSig: TimeSignature) {\n\t\tif (isArray(timeSig)) {\n\t\t\ttimeSig = (timeSig[0] / timeSig[1]) * 4;\n\t\t}\n\t\tthis._timeSignature = timeSig;\n\t}\n\n\t/**\n\t * When the Transport.loop = true, this is the starting position of the loop.\n\t */\n\tget loopStart(): Time {\n\t\treturn new TimeClass(this.context, this._loopStart, \"i\").toSeconds();\n\t}\n\tset loopStart(startPosition: Time) {\n\t\tthis._loopStart = this.toTicks(startPosition);\n\t}\n\n\t/**\n\t * When the Transport.loop = true, this is the ending position of the loop.\n\t */\n\tget loopEnd(): Time {\n\t\treturn new TimeClass(this.context, this._loopEnd, \"i\").toSeconds();\n\t}\n\tset loopEnd(endPosition: Time) {\n\t\tthis._loopEnd = this.toTicks(endPosition);\n\t}\n\t\n\t/**\n\t * If the transport loops or not.\n\t */\n\tget loop(): boolean {\n\t\treturn this._loop.get(this.now());\n\t}\n\tset loop(loop) {\n\t\tthis._loop.set(loop, this.now());\n\t}\n\n\t/**\n\t * Set the loop start and stop at the same time.\n\t * @example\n\t * import { Transport } from \"tone\";\n\t * // loop over the first measure\n\t * Transport.setLoopPoints(0, \"1m\");\n\t * Transport.loop = true;\n\t */\n\tsetLoopPoints(startPosition: TransportTime, endPosition: TransportTime): this {\n\t\tthis.loopStart = startPosition;\n\t\tthis.loopEnd = endPosition;\n\t\treturn this;\n\t}\n\n\t/**\n\t * The swing value. Between 0-1 where 1 equal to the note + half the subdivision.\n\t */\n\tget swing(): NormalRange {\n\t\treturn this._swingAmount;\n\t}\n\tset swing(amount: NormalRange) {\n\t\t// scale the values to a normal range\n\t\tthis._swingAmount = amount;\n\t}\n\n\t/**\n\t * Set the subdivision which the swing will be applied to.\n\t * The default value is an 8th note. Value must be less\n\t * than a quarter note.\n\t */\n\tget swingSubdivision(): Subdivision {\n\t\treturn new TicksClass(this.context, this._swingTicks).toNotation();\n\t}\n\tset swingSubdivision(subdivision: Subdivision) {\n\t\tthis._swingTicks = this.toTicks(subdivision);\n\t}\n\n\t/**\n\t * The Transport's position in Bars:Beats:Sixteenths.\n\t * Setting the value will jump to that position right away.\n\t */\n\tget position(): BarsBeatsSixteenths | Time {\n\t\tconst now = this.now();\n\t\tconst ticks = this._clock.getTicksAtTime(now);\n\t\treturn new TicksClass(this.context, ticks).toBarsBeatsSixteenths();\n\t}\n\tset position(progress: Time) {\n\t\tconst ticks = this.toTicks(progress);\n\t\tthis.ticks = ticks;\n\t}\n\n\t/**\n\t * The Transport's position in seconds\n\t * Setting the value will jump to that position right away.\n\t */\n\tget seconds(): Seconds {\n\t\treturn this._clock.seconds;\n\t}\n\n\tset seconds(s: Seconds) {\n\t\tconst now = this.now();\n\t\tconst ticks = this._clock.frequency.timeToTicks(s, now);\n\t\tthis.ticks = ticks;\n\t}\n\n\t/**\n\t * The Transport's loop position as a normalized value. Always\n\t * returns 0 if the transport if loop is not true.\n\t */\n\tget progress(): NormalRange {\n\t\tif (this.loop) {\n\t\t\tconst now = this.now();\n\t\t\tconst ticks = this._clock.getTicksAtTime(now);\n\t\t\treturn (ticks - this._loopStart) / (this._loopEnd - this._loopStart);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * The transports current tick position.\n\t */\n\tget ticks(): Ticks {\n\t\treturn this._clock.ticks;\n\t}\n\tset ticks(t: Ticks) {\n\t\tif (this._clock.ticks !== t) {\n\t\t\tconst now = this.now();\n\t\t\t// stop everything synced to the transport\n\t\t\tif (this.state === \"started\") {\n\t\t\t\tthis.emit(\"stop\", now);\n\t\t\t\tthis._clock.setTicksAtTime(t, now);\n\t\t\t\t// restart it with the new time\n\t\t\t\tthis.emit(\"start\", now, this.seconds);\n\t\t\t} else {\n\t\t\t\tthis._clock.setTicksAtTime(t, now);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Get the clock's ticks at the given time.\n\t * @param  time  When to get the tick value\n\t * @return The tick value at the given time.\n\t */\n\tgetTicksAtTime(time?: Time): Ticks {\n\t\treturn Math.round(this._clock.getTicksAtTime(time));\n\t}\n\n\t/**\n\t * Return the elapsed seconds at the given time.\n\t * @param  time  When to get the elapsed seconds\n\t * @return  The number of elapsed seconds\n\t */\n\tgetSecondsAtTime(time: Time): Seconds {\n\t\treturn this._clock.getSecondsAtTime(time);\n\t}\n\n\t/**\n\t * Pulses Per Quarter note. This is the smallest resolution\n\t * the Transport timing supports. This should be set once\n\t * on initialization and not set again. Changing this value\n\t * after other objects have been created can cause problems.\n\t */\n\tget PPQ(): number {\n\t\treturn this._clock.frequency.multiplier;\n\t}\n\tset PPQ(ppq: number) {\n\t\tthis._clock.frequency.multiplier = ppq;\n\t}\n\n\t//-------------------------------------\n\t// \tSYNCING\n\t//-------------------------------------\n\n\t/**\n\t * Returns the time aligned to the next subdivision\n\t * of the Transport. If the Transport is not started,\n\t * it will return 0.\n\t * Note: this will not work precisely during tempo ramps.\n\t * @param  subdivision  The subdivision to quantize to\n\t * @return  The context time of the next subdivision.\n\t * @example\n\t * import { Transport } from \"tone\";\n\t * // the transport must be started, otherwise returns 0\n\t * Transport.start(); \n\t * Transport.nextSubdivision(\"4n\");\n\t */\n\tnextSubdivision(subdivision?: Time): Seconds {\n\t\tsubdivision = this.toTicks(subdivision);\n\t\tif (this.state !== \"started\") {\n\t\t\t// if the transport's not started, return 0\n\t\t\treturn 0;\n\t\t} else {\n\t\t\tconst now = this.now();\n\t\t\t// the remainder of the current ticks and the subdivision\n\t\t\tconst transportPos = this.getTicksAtTime(now);\n\t\t\tconst remainingTicks = subdivision - transportPos % subdivision;\n\t\t\treturn this._clock.nextTickTime(remainingTicks, now);\n\t\t}\n\t}\n\n\t/**\n\t * Attaches the signal to the tempo control signal so that\n\t * any changes in the tempo will change the signal in the same\n\t * ratio.\n\t *\n\t * @param signal\n\t * @param ratio Optionally pass in the ratio between the two signals.\n\t * \t\t\tOtherwise it will be computed based on their current values.\n\t */\n\tsyncSignal(signal: Signal<any>, ratio?: number): this {\n\t\tif (!ratio) {\n\t\t\t// get the sync ratio\n\t\t\tconst now = this.now();\n\t\t\tif (signal.getValueAtTime(now) !== 0) {\n\t\t\t\tconst bpm = this.bpm.getValueAtTime(now);\n\t\t\t\tconst computedFreq = 1 / (60 / bpm / this.PPQ);\n\t\t\t\tratio = signal.getValueAtTime(now) / computedFreq;\n\t\t\t} else {\n\t\t\t\tratio = 0;\n\t\t\t}\n\t\t}\n\t\tconst ratioSignal = new Gain(ratio);\n\t\t// @ts-ignore\n\t\tthis.bpm.connect(ratioSignal);\n\t\t// @ts-ignore\n\t\tratioSignal.connect(signal._param);\n\t\tthis._syncedSignals.push({\n\t\t\tinitial: signal.value,\n\t\t\tratio: ratioSignal,\n\t\t\tsignal,\n\t\t});\n\t\tsignal.value = 0;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unsyncs a previously synced signal from the transport's control.\n\t * See Transport.syncSignal.\n\t */\n\tunsyncSignal(signal: Signal<any>): this {\n\t\tfor (let i = this._syncedSignals.length - 1; i >= 0; i--) {\n\t\t\tconst syncedSignal = this._syncedSignals[i];\n\t\t\tif (syncedSignal.signal === signal) {\n\t\t\t\tsyncedSignal.ratio.dispose();\n\t\t\t\tsyncedSignal.signal.value = syncedSignal.initial;\n\t\t\t\tthis._syncedSignals.splice(i, 1);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._clock.dispose();\n\t\twritable(this, \"bpm\");\n\t\tthis._timeline.dispose();\n\t\tthis._repeatedEvents.dispose();\n\t\treturn this;\n\t}\n\n\t//-------------------------------------\n\t// EMITTER MIXIN TO SATISFY COMPILER\n\t//-------------------------------------\n\n\ton!: (event: TransportEventNames, callback: (...args: any[]) => void) => this;\n\tonce!: (event: TransportEventNames, callback: (...args: any[]) => void) => this;\n\toff!: (event: TransportEventNames, callback?: ((...args: any[]) => void) | undefined) => this;\n\temit!: (event: any, ...args: any[]) => this;\n}\n\nEmitter.mixin(Transport);\n\n//-------------------------------------\n// \tINITIALIZATION\n//-------------------------------------\n\nonContextInit(context => {\n\tcontext.transport = new Transport({ context });\n});\n\nonContextClose(context => {\n\tcontext.transport.dispose();\n});\n","import { getContext } from \"../Global\";\nimport { ftom, mtof } from \"./Conversions\";\nimport { FrequencyClass, FrequencyUnit } from \"./Frequency\";\nimport { TimeValue } from \"./TimeBase\";\nimport { Hertz, Interval, MidiNote, Seconds, Ticks } from \"./Units\";\n\n/**\n * Midi is a primitive type for encoding Time values.\n * Midi can be constructed with or without the `new` keyword. Midi can be passed\n * into the parameter of any method which takes time as an argument.\n * @category Unit\n */\nexport class MidiClass extends FrequencyClass<MidiNote> {\n\n\treadonly name: string = \"Midi\";\n\n\treadonly defaultUnits = \"midi\";\n\n\t/**\n\t * Returns the value of a frequency in the current units\n\t */\n\tprotected _frequencyToUnits(freq: Hertz): MidiNote {\n\t\treturn ftom(super._frequencyToUnits(freq));\n\t}\n\n\t/**\n\t * Returns the value of a tick in the current time units\n\t */\n\tprotected _ticksToUnits(ticks: Ticks): MidiNote {\n\t\treturn ftom(super._ticksToUnits(ticks));\n\t}\n\n\t/**\n\t * Return the value of the beats in the current units\n\t */\n\tprotected _beatsToUnits(beats: number): MidiNote {\n\t\treturn ftom(super._beatsToUnits(beats));\n\t}\n\n\t/**\n\t * Returns the value of a second in the current units\n\t */\n\tprotected _secondsToUnits(seconds: Seconds): MidiNote {\n\t\treturn ftom(super._secondsToUnits(seconds));\n\t}\n\n\t/**\n\t * Return the value of the frequency as a MIDI note\n\t * @example\n\t * import { Midi } from \"tone\";\n\t * Midi(60).toMidi(); // 60\n\t */\n\ttoMidi(): MidiNote {\n\t\treturn this.valueOf();\n\t}\n\n\t/**\n\t * Return the value of the frequency as a MIDI note\n\t * @example\n\t * import { Midi } from \"tone\";\n\t * Midi(60).toFrequency(); // 261.6255653005986\n\t */\n\ttoFrequency(): Hertz {\n\t\treturn mtof(this.toMidi());\n\t}\n\n\t/**\n\t * Transposes the frequency by the given number of semitones.\n\t * @return A new transposed MidiClass\n\t * @example\n\t * import { Midi } from \"tone\";\n\t * Midi(\"A4\").transpose(3); // \"C5\"\n\t */\n\ttranspose(interval: Interval): MidiClass {\n\t\treturn new MidiClass(this.context, this.toMidi() + interval);\n\t}\n}\n\n/**\n * Convert a value into a FrequencyClass object.\n * @category Unit\n */\nexport function Midi(value?: TimeValue, units?: FrequencyUnit): MidiClass {\n\treturn new MidiClass(getContext(), value, units);\n}\n","import { ToneWithContext, ToneWithContextOptions } from \"../context/ToneWithContext\";\nimport { Seconds, Time } from \"../type/Units\";\nimport { Timeline, TimelineEvent } from \"./Timeline\";\nimport { onContextClose, onContextInit } from \"../context/ContextInitialization\";\n\ninterface DrawEvent extends TimelineEvent {\n\tcallback: () => void;\n}\n\n/**\n * Draw is useful for synchronizing visuals and audio events.\n * Callbacks from Tone.Transport or any of the Tone.Event classes\n * always happen _before_ the scheduled time and are not synchronized\n * to the animation frame so they are not good for triggering tightly\n * synchronized visuals and sound. Draw makes it easy to schedule\n * callbacks using the AudioContext time and uses requestAnimationFrame.\n * @example\n * import { Draw, Transport } from \"tone\";\n * Transport.schedule((time) => {\n *  \t// use the time argument to schedule a callback with Draw\n *  \tDraw.schedule(() => {\n *  \t\t// do drawing or DOM manipulation here\n *  \t}, time);\n * }, \"+0.5\");\n * @category Core\n */\nexport class Draw extends ToneWithContext<ToneWithContextOptions> {\n\n\treadonly name: string = \"Draw\";\n\n\t/**\n\t * The duration after which events are not invoked.\n\t */\n\texpiration: Seconds = 0.25;\n\n\t/**\n\t * The amount of time before the scheduled time\n\t * that the callback can be invoked. Default is\n\t * half the time of an animation frame (0.008 seconds).\n\t */\n\tanticipation: Seconds = 0.008;\n\n\t/**\n\t * All of the events.\n\t */\n\tprivate _events: Timeline<DrawEvent> = new Timeline();\n\n\t/**\n\t * The draw loop\n\t */\n\tprivate _boundDrawLoop = this._drawLoop.bind(this);\n\n\t/**\n\t * The animation frame id\n\t */\n\tprivate _animationFrame: number = -1;\n\n\t/**\n\t * Schedule a function at the given time to be invoked\n\t * on the nearest animation frame.\n\t * @param  callback  Callback is invoked at the given time.\n\t * @param  time      The time relative to the AudioContext time to invoke the callback.\n\t */\n\tschedule(callback: () => void, time: Time): this {\n\t\tthis._events.add({\n\t\t\tcallback,\n\t\t\ttime: this.toSeconds(time),\n\t\t});\n\t\t// start the draw loop on the first event\n\t\tif (this._events.length === 1) {\n\t\t\tthis._animationFrame = requestAnimationFrame(this._boundDrawLoop);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Cancel events scheduled after the given time\n\t * @param  after  Time after which scheduled events will be removed from the scheduling timeline.\n\t */\n\tcancel(after?: Time): this {\n\t\tthis._events.cancel(this.toSeconds(after));\n\t\treturn this;\n\t}\n\n\t/**\n\t * The draw loop\n\t */\n\tprivate _drawLoop(): void {\n\t\tconst now = this.context.currentTime;\n\t\twhile (this._events.length && (this._events.peek() as DrawEvent).time - this.anticipation <= now) {\n\t\t\tconst event = this._events.shift();\n\t\t\tif (event && now - event.time <= this.expiration) {\n\t\t\t\tevent.callback();\n\t\t\t}\n\t\t}\n\t\tif (this._events.length > 0) {\n\t\t\tthis._animationFrame = requestAnimationFrame(this._boundDrawLoop);\n\t\t}\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._events.dispose();\n\t\tcancelAnimationFrame(this._animationFrame);\n\t\treturn this;\n\t}\n}\n\n//-------------------------------------\n// \tINITIALIZATION\n//-------------------------------------\n\nonContextInit(context => {\n\tcontext.draw = new Draw({ context });\n});\n\nonContextClose(context => {\n\tcontext.draw.dispose();\n});\n","import { Volume } from \"../component/channel/Volume\";\nimport \"../core/context/Destination\";\nimport \"../core/clock/Transport\";\nimport { Param } from \"../core/context/Param\";\nimport { OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { Decibels, Seconds, Time } from \"../core/type/Units\";\nimport { defaultArg } from \"../core/util/Defaults\";\nimport { noOp, readOnly } from \"../core/util/Interface\";\nimport { BasicPlaybackState, StateTimeline } from \"../core/util/StateTimeline\";\nimport { isUndef } from \"../core/util/TypeCheck\";\n\ntype onStopCallback = (source: Source<any>) => void;\n\nexport interface SourceOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n\tmute: boolean;\n\tonstop: onStopCallback;\n}\n\n/**\n * Base class for sources. \n * start/stop of this.context.transport.\n * \n * ```\n * // Multiple state change events can be chained together,\n * // but must be set in the correct order and with ascending times\n * // OK\n * state.start().stop(\"+0.2\");\n * // OK\n * state.start().stop(\"+0.2\").start(\"+0.4\").stop(\"+0.7\")\n * // BAD\n * state.stop(\"+0.2\").start();\n * // BAD\n * state.start(\"+0.3\").stop(\"+0.2\");\n * ```\n */\nexport abstract class Source<Options extends SourceOptions> extends ToneAudioNode<Options> {\n\n\t/**\n\t * The output volume node\n\t */\n\tprivate _volume: Volume;\n\n\t/**\n\t * The output note\n\t */\n\toutput: OutputNode;\n\n\t/**\n\t * Sources have no inputs\n\t */\n\tinput = undefined;\n\n\t/**\n\t * The volume of the output in decibels.\n\t * @example\n\t * import { PWMOscillator } from \"tone\";\n\t * const source = new PWMOscillator().toDestination();\n\t * source.volume.value = -6;\n\t */\n\tvolume: Param<\"decibels\">;\n\n\t/**\n\t * The callback to invoke when the source is stopped.\n\t */\n\tonstop: onStopCallback;\n\n\t/**\n\t * Keep track of the scheduled state.\n\t */\n\tprotected _state: StateTimeline<{\n\t\tduration?: Seconds;\n\t\toffset?: Seconds;\n\t\t/**\n\t\t * Either the buffer is explicitly scheduled to end using the stop method,\n\t\t * or it's implicitly ended when the buffer is over.\n\t\t */\n\t\timplicitEnd?: boolean;\n\t}> = new StateTimeline(\"stopped\");\n\n\t/**\n\t * The synced `start` callback function from the transport\n\t */\n\tprotected _synced: boolean = false;\n\n\t/**\n\t * Keep track of all of the scheduled event ids\n\t */\n\tprivate _scheduled: number[] = [];\n\n\t/**\n\t * Placeholder functions for syncing/unsyncing to transport\n\t */\n\tprivate _syncedStart: (time: Seconds, offset: Seconds) => void = noOp;\n\tprivate _syncedStop: (time: Seconds) => void = noOp;\n\n\tconstructor(options: SourceOptions) {\n\t\tsuper(options);\n\t\tthis._state.memory = 100;\n\n\t\tthis._volume = this.output = new Volume({\n\t\t\tcontext: this.context,\n\t\t\tmute: options.mute,\n\t\t\tvolume: options.volume,\n\t\t});\n\t\tthis.volume = this._volume.volume;\n\t\treadOnly(this, \"volume\");\n\t\tthis.onstop = options.onstop;\n\t}\n\n\tstatic getDefaults(): SourceOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmute: false,\n\t\t\tonstop: noOp,\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Returns the playback state of the source, either \"started\" or \"stopped\".\n\t * @example\n\t * import { Player } from \"tone\";\n\t * const player = new Player(\"https://tonejs.github.io/examples/audio/FWDL.mp3\", () => {\n\t * \tplayer.start();\n\t * \tconsole.log(player.state);\n\t * }).toDestination();\n\t */\n\tget state(): BasicPlaybackState {\n\t\tif (this._synced) {\n\t\t\tif (this.context.transport.state === \"started\") {\n\t\t\t\treturn this._state.getValueAtTime(this.context.transport.seconds) as BasicPlaybackState;\n\t\t\t} else {\n\t\t\t\treturn \"stopped\";\n\t\t\t}\n\t\t} else {\n\t\t\treturn this._state.getValueAtTime(this.now()) as BasicPlaybackState;\n\t\t}\n\t}\n\n\t/**\n\t * Mute the output.\n\t * @example\n\t * import { Oscillator } from \"tone\";\n\t * const osc = new Oscillator().toDestination().start();\n\t * // mute the output\n\t * osc.mute = true;\n\t */\n\tget mute(): boolean {\n\t\treturn this._volume.mute;\n\t}\n\tset mute(mute: boolean) {\n\t\tthis._volume.mute = mute;\n\t}\n\n\t// overwrite these functions\n\tprotected abstract _start(time: Time, offset?: Time, duration?: Time): void;\n\tprotected abstract _stop(time: Time): void;\n\tabstract restart(time: Time, offset?: Time, duration?: Time): this;\n\n\t/**\n\t * Ensure that the scheduled time is not before the current time.\n\t * Should only be used when scheduled unsynced.\n\t */\n\tprivate _clampToCurrentTime(time: Seconds): Seconds {\n\t\tif (this._synced) {\n\t\t\treturn time;\n\t\t} else {\n\t\t\treturn Math.max(time, this.context.currentTime);\n\t\t}\n\t}\n\n\t/**\n\t * Start the source at the specified time. If no time is given,\n\t * start the source now.\n\t * @param  time When the source should be started.\n\t * @example\n\t * import { Oscillator } from \"tone\";\n\t * const source = new Oscillator().toDestination();\n\t * source.start(\"+0.5\"); // starts the source 0.5 seconds from now\n\t */\n\tstart(time?: Time, offset?: Time, duration?: Time): this {\n\t\tlet computedTime = isUndef(time) && this._synced ? this.context.transport.seconds : this.toSeconds(time);\n\t\tcomputedTime = this._clampToCurrentTime(computedTime);\n\t\t// if it's started, stop it and restart it\n\t\tif (this._state.getValueAtTime(computedTime) === \"started\") {\n\t\t\tthis._state.cancel(computedTime);\n\t\t\tthis._state.setStateAtTime(\"started\", computedTime);\n\t\t\tthis.log(\"restart\", computedTime);\n\t\t\tthis.restart(computedTime, offset, duration);\n\t\t} else {\n\t\t\tthis.log(\"start\", computedTime);\n\t\t\tthis._state.setStateAtTime(\"started\", computedTime);\n\t\t\tif (this._synced) {\n\t\t\t\t// add the offset time to the event\n\t\t\t\tconst event = this._state.get(computedTime);\n\t\t\t\tif (event) {\n\t\t\t\t\tevent.offset = this.toSeconds(defaultArg(offset, 0));\n\t\t\t\t\tevent.duration = duration ? this.toSeconds(duration) : undefined;\n\t\t\t\t}\n\t\t\t\tconst sched = this.context.transport.schedule(t => {\n\t\t\t\t\tthis._start(t, offset, duration);\n\t\t\t\t}, computedTime);\n\t\t\t\tthis._scheduled.push(sched);\n\n\t\t\t\t// if it's already started\n\t\t\t\tif (this.context.transport.state === \"started\") {\n\t\t\t\t\tthis._syncedStart(this.now(), this.context.transport.seconds);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._start(computedTime, offset, duration);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the source at the specified time. If no time is given,\n\t * stop the source now.\n\t * @param  time When the source should be stopped.\n\t * @example\n\t * import { Oscillator } from \"tone\";\n\t * const source = new Oscillator().toDestination();\n\t * source.start();\n\t * source.stop(\"+0.5\"); // stops the source 0.5 seconds from now\n\t */\n\tstop(time?: Time): this {\n\t\tlet computedTime = isUndef(time) && this._synced ? this.context.transport.seconds : this.toSeconds(time);\n\t\tcomputedTime = this._clampToCurrentTime(computedTime);\n\t\tthis.log(\"stop\", computedTime);\n\t\tif (!this._synced) {\n\t\t\tthis._stop(computedTime);\n\t\t} else {\n\t\t\tconst sched = this.context.transport.schedule(this._stop.bind(this), computedTime);\n\t\t\tthis._scheduled.push(sched);\n\t\t}\n\t\tthis._state.cancel(computedTime);\n\t\tthis._state.setStateAtTime(\"stopped\", computedTime);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sync the source to the Transport so that all subsequent\n\t * calls to `start` and `stop` are synced to the TransportTime\n\t * instead of the AudioContext time.\n\t *\n\t * @example\n\t * import { Oscillator, Transport } from \"tone\";\n\t * const osc = new Oscillator().toDestination();\n\t * // sync the source so that it plays between 0 and 0.3 on the Transport's timeline\n\t * osc.sync().start(0).stop(0.3);\n\t * // start the transport.\n\t * Transport.start();\n\t */\n\tsync(): this {\n\t\tif (!this._synced) {\n\t\t\tthis._synced = true;\n\t\t\tthis._syncedStart = (time, offset) => {\n\t\t\t\tif (offset > 0) {\n\t\t\t\t\t// get the playback state at that time\n\t\t\t\t\tconst stateEvent = this._state.get(offset);\n\t\t\t\t\t// listen for start events which may occur in the middle of the sync'ed time\n\t\t\t\t\tif (stateEvent && stateEvent.state === \"started\" && stateEvent.time !== offset) {\n\t\t\t\t\t\t// get the offset\n\t\t\t\t\t\tconst startOffset = offset - this.toSeconds(stateEvent.time);\n\t\t\t\t\t\tlet duration;\n\t\t\t\t\t\tif (stateEvent.duration) {\n\t\t\t\t\t\t\tduration = this.toSeconds(stateEvent.duration) - startOffset;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._start(time, this.toSeconds(stateEvent.offset) + startOffset, duration);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis._syncedStop = time => {\n\t\t\t\tconst seconds = this.context.transport.getSecondsAtTime(Math.max(time - this.sampleTime, 0));\n\t\t\t\tif (this._state.getValueAtTime(seconds) === \"started\") {\n\t\t\t\t\tthis._stop(time);\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis.context.transport.on(\"start\", this._syncedStart);\n\t\t\tthis.context.transport.on(\"loopStart\", this._syncedStart);\n\t\t\tthis.context.transport.on(\"stop\", this._syncedStop);\n\t\t\tthis.context.transport.on(\"pause\", this._syncedStop);\n\t\t\tthis.context.transport.on(\"loopEnd\", this._syncedStop);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unsync the source to the Transport. See Source.sync\n\t */\n\tunsync(): this {\n\t\tif (this._synced) {\n\t\t\tthis.context.transport.off(\"stop\", this._syncedStop);\n\t\t\tthis.context.transport.off(\"pause\", this._syncedStop);\n\t\t\tthis.context.transport.off(\"loopEnd\", this._syncedStop);\n\t\t\tthis.context.transport.off(\"start\", this._syncedStart);\n\t\t\tthis.context.transport.off(\"loopStart\", this._syncedStart);\n\t\t}\n\t\tthis._synced = false;\n\t\t// clear all of the scheduled ids\n\t\tthis._scheduled.forEach(id => this.context.transport.clear(id));\n\t\tthis._scheduled = [];\n\t\tthis._state.cancel(0);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.onstop = noOp;\n\t\tthis.unsync();\n\t\tthis._volume.dispose();\n\t\tthis._state.dispose();\n\t\treturn this;\n\t}\n}\n","import { connect } from \"../../core/Connect\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { GainFactor, Positive, Seconds, Time } from \"../../core/type/Units\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp } from \"../../core/util/Interface\";\nimport { isDefined } from \"../../core/util/TypeCheck\";\nimport { OneShotSource, OneShotSourceCurve, OneShotSourceOptions } from \"../OneShotSource\";\nimport { GTE, LT } from \"../../core/util/Math\";\n\nexport type ToneBufferSourceCurve = OneShotSourceCurve;\n\nexport interface ToneBufferSourceOptions extends OneShotSourceOptions {\n\tbuffer: ToneAudioBuffer;\n\tcurve: ToneBufferSourceCurve;\n\tplaybackRate: Positive;\n\tfadeIn: Time;\n\tfadeOut: Time;\n\tloopStart: Time;\n\tloopEnd: Time;\n\tloop: boolean;\n\tonload: () => void;\n}\n\n/**\n * Wrapper around the native BufferSourceNode.\n * @category Source\n */\nexport class ToneBufferSource extends OneShotSource<ToneBufferSourceOptions> {\n\n\treadonly name: string = \"ToneBufferSource\";\n\n\t/**\n\t * The oscillator\n\t */\n\tprivate _source = this.context.createBufferSource();\n\tprotected _internalChannels = [this._source];\n\n\t/**\n\t * The frequency of the oscillator\n\t */\n\treadonly playbackRate: Param<\"positive\">;\n\n\t/**\n\t * The private instance of the buffer object\n\t */\n\tprivate _buffer: ToneAudioBuffer;\n\n\t/**\n\t * indicators if the source has started/stopped\n\t */\n\tprivate _sourceStarted: boolean = false;\n\tprivate _sourceStopped: boolean = false;\n\n\t/**\n\t * @param buffer The buffer to play\n\t * @param onload The callback to invoke when the buffer is done playing.\n\t */\n\tconstructor(buffer?: ToneAudioBuffer | AudioBuffer | string, onload?: () => void);\n\tconstructor(options?: Partial<ToneBufferSourceOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(ToneBufferSource.getDefaults(), arguments, [\"buffer\", \"onload\"]));\n\t\tconst options = optionsFromArguments(ToneBufferSource.getDefaults(), arguments, [\"buffer\", \"onload\"]);\n\n\t\tconnect(this._source, this._gainNode);\n\t\tthis._source.onended = () => this._stopSource();\n\n\t\t/**\n\t\t * The playbackRate of the buffer\n\t\t */\n\t\tthis.playbackRate = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._source.playbackRate,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.playbackRate,\n\t\t});\n\n\t\t// set some values initially\n\t\tthis.loop = options.loop;\n\t\tthis.loopStart = options.loopStart;\n\t\tthis.loopEnd = options.loopEnd;\n\t\tthis._buffer = new ToneAudioBuffer(options.buffer, options.onload);\n\n\t\tthis._internalChannels.push(this._source);\n\t}\n\n\tstatic getDefaults(): ToneBufferSourceOptions {\n\t\treturn Object.assign(OneShotSource.getDefaults(), {\n\t\t\tbuffer: new ToneAudioBuffer(),\n\t\t\tloop: false,\n\t\t\tloopEnd: 0,\n\t\t\tloopStart: 0,\n\t\t\tonload: noOp,\n\t\t\tplaybackRate: 1,\n\t\t});\n\t}\n\n\t/**\n\t * The fadeIn time of the amplitude envelope.\n\t */\n\tget fadeIn(): Time {\n\t\treturn this._fadeIn;\n\t}\n\tset fadeIn(t: Time) {\n\t\tthis._fadeIn = t;\n\t}\n\n\t/**\n\t * The fadeOut time of the amplitude envelope.\n\t */\n\tget fadeOut(): Time {\n\t\treturn this._fadeOut;\n\t}\n\tset fadeOut(t: Time) {\n\t\tthis._fadeOut = t;\n\t}\n\n\t/**\n\t * The curve applied to the fades, either \"linear\" or \"exponential\"\n\t */\n\tget curve(): ToneBufferSourceCurve {\n\t\treturn this._curve;\n\t}\n\tset curve(t) {\n\t\tthis._curve = t;\n\t}\n\n\t/**\n\t * Start the buffer\n\t * @param  time When the player should start.\n\t * @param  offset The offset from the beginning of the sample to start at.\n\t * @param  duration How long the sample should play. If no duration is given, it will default to the full length of the sample (minus any offset)\n\t * @param  gain  The gain to play the buffer back at.\n\t */\n\tstart(time?: Time, offset?: Time, duration?: Time, gain: GainFactor = 1): this {\n\t\tthis.assert(this.buffer.loaded, \"buffer is either not set or not loaded\");\n\t\tconst computedTime = this.toSeconds(time);\n\n\t\t// apply the gain envelope\n\t\tthis._startGain(computedTime, gain);\n\n\t\t// if it's a loop the default offset is the loopstart point\n\t\tif (this.loop) {\n\t\t\toffset = defaultArg(offset, this.loopStart);\n\t\t} else {\n\t\t\t// otherwise the default offset is 0\n\t\t\toffset = defaultArg(offset, 0);\n\t\t}\n\t\t// make sure the offset is not less than 0\n\t\tlet computedOffset = Math.max(this.toSeconds(offset), 0);\n\n\t\t// start the buffer source\n\t\tif (this.loop) {\n\t\t\t// modify the offset if it's greater than the loop time\n\t\t\tconst loopEnd = this.toSeconds(this.loopEnd) || this.buffer.duration;\n\t\t\tconst loopStart = this.toSeconds(this.loopStart);\n\t\t\tconst loopDuration = loopEnd - loopStart;\n\t\t\t// move the offset back\n\t\t\tif (GTE(computedOffset, loopEnd)) {\n\t\t\t\tcomputedOffset = ((computedOffset - loopStart) % loopDuration) + loopStart;\n\t\t\t}\n\t\t}\n\n\t\t// this.buffer.loaded would have return false if the AudioBuffer was undefined\n\t\tthis._source.buffer = this.buffer.get() as AudioBuffer;\n\t\tthis._source.loopEnd = this.toSeconds(this.loopEnd) || this.buffer.duration;\n\t\tif (LT(computedOffset, this.buffer.duration)) {\n\t\t\tthis._sourceStarted = true;\n\t\t\tthis._source.start(computedTime, computedOffset);\n\t\t}\n\n\t\t// if a duration is given, schedule a stop\n\t\tif (isDefined(duration)) {\n\t\t\tlet computedDur = this.toSeconds(duration);\n\t\t\t// make sure it's never negative\n\t\t\tcomputedDur = Math.max(computedDur, 0);\n\t\t\tthis.stop(computedTime + computedDur);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\tprotected _stopSource(time?: Seconds): void {\n\t\tif (!this._sourceStopped && this._sourceStarted) {\n\t\t\tthis._sourceStopped = true;\n\t\t\tthis._source.stop(this.toSeconds(time));\n\t\t\tthis._onended();\n\t\t}\n\t}\n\n\t/**\n\t * If loop is true, the loop will start at this position.\n\t */\n\tget loopStart(): Time {\n\t\treturn this._source.loopStart;\n\t}\n\tset loopStart(loopStart: Time) {\n\t\tthis._source.loopStart = this.toSeconds(loopStart);\n\t}\n\n\t/**\n\t * If loop is true, the loop will end at this position.\n\t */\n\tget loopEnd(): Time {\n\t\treturn this._source.loopEnd;\n\t}\n\tset loopEnd(loopEnd: Time) {\n\t\tthis._source.loopEnd = this.toSeconds(loopEnd);\n\t}\n\n\t/**\n\t * The audio buffer belonging to the player.\n\t */\n\tget buffer(): ToneAudioBuffer {\n\t\treturn this._buffer;\n\t}\n\tset buffer(buffer: ToneAudioBuffer) {\n\t\tthis._buffer.set(buffer);\n\t}\n\n\t/**\n\t * If the buffer should loop once it's over.\n\t */\n\tget loop(): boolean {\n\t\treturn this._source.loop;\n\t}\n\tset loop(loop: boolean) {\n\t\tthis._source.loop = loop;\n\t\tif (this._sourceStarted) {\n\t\t\tthis.cancelStop();\n\t\t}\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._source.onended = null;\n\t\tthis._source.disconnect();\n\t\tthis._buffer.dispose();\n\t\tthis.playbackRate.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioBuffer } from \"../core/context/ToneAudioBuffer\";\nimport { Positive, Time } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Source, SourceOptions } from \"../source/Source\";\nimport { ToneBufferSource } from \"./buffer/ToneBufferSource\";\n\nexport type NoiseType = \"white\" | \"brown\" | \"pink\";\n\nexport interface NoiseOptions extends SourceOptions {\n\ttype: NoiseType;\n\tplaybackRate: Positive;\n\tfadeIn: Time;\n\tfadeOut: Time;\n}\n\n/**\n * Noise is a noise generator. It uses looped noise buffers to save on performance.\n * Noise supports the noise types: \"pink\", \"white\", and \"brown\". Read more about\n * colors of noise on [Wikipedia](https://en.wikipedia.org/wiki/Colors_of_noise).\n *\n * @example\n * import { AutoFilter, Noise } from \"tone\";\n * // initialize the noise and start\n * const noise = new Noise(\"pink\").start();\n * // make an autofilter to shape the noise\n * const autoFilter = new AutoFilter({\n * \tfrequency: \"8n\",\n * \tbaseFrequency: 200,\n * \toctaves: 8\n * }).toDestination().start();\n * // connect the noise\n * noise.connect(autoFilter);\n * // start the autofilter LFO\n * autoFilter.start();\n * @category Source\n */\nexport class Noise extends Source<NoiseOptions> {\n\n\treadonly name: string = \"Noise\";\n\n\t/**\n\t * Private reference to the source\n\t */\n\tprivate _source: ToneBufferSource | null = null;\n\n\t/**\n\t * private reference to the type\n\t */\n\tprivate _type!: NoiseType;\n\n\t/**\n\t * The playback rate of the noise. Affects\n\t * the \"frequency\" of the noise.\n\t */\n\tprivate _playbackRate: Positive;\n\n\t/**\n\t * The fadeIn time of the amplitude envelope.\n\t */\n\tprotected _fadeIn: Time;\n\n\t/**\n\t * The fadeOut time of the amplitude envelope.\n\t */\n\tprotected _fadeOut: Time;\n\n\t/**\n\t * @param type the noise type (white|pink|brown)\n\t */\n\tconstructor(type?: NoiseType);\n\tconstructor(options?: Partial<NoiseOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Noise.getDefaults(), arguments, [\"type\"]));\n\t\tconst options = optionsFromArguments(Noise.getDefaults(), arguments, [\"type\"]);\n\n\t\tthis._playbackRate = options.playbackRate;\n\t\tthis.type = options.type;\n\t\tthis._fadeIn = options.fadeIn;\n\t\tthis._fadeOut = options.fadeOut;\n\t}\n\n\tstatic getDefaults(): NoiseOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tfadeIn: 0,\n\t\t\tfadeOut: 0,\n\t\t\tplaybackRate: 1,\n\t\t\ttype: \"white\" as NoiseType,\n\t\t});\n\t}\n\n\t/**\n\t * The type of the noise. Can be \"white\", \"brown\", or \"pink\".\n\t * @example\n\t * import { Noise } from \"tone\";\n\t * const noise = new Noise().toDestination().start();\n\t * noise.type = \"brown\";\n\t */\n\tget type(): NoiseType {\n\t\treturn this._type;\n\t}\n\tset type(type: NoiseType) {\n\t\tthis.assert(type in _noiseBuffers, \"Noise: invalid type: \" + type);\n\t\tif (this._type !== type) {\n\t\t\tthis._type = type;\n\t\t\t// if it's playing, stop and restart it\n\t\t\tif (this.state === \"started\") {\n\t\t\t\tconst now = this.now();\n\t\t\t\tthis._stop(now);\n\t\t\t\tthis._start(now);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * The playback rate of the noise. Affects\n\t * the \"frequency\" of the noise.\n\t */\n\tget playbackRate(): Positive {\n\t\treturn this._playbackRate;\n\t}\n\tset playbackRate(rate: Positive) {\n\t\tthis._playbackRate = rate;\n\t\tif (this._source) {\n\t\t\tthis._source.playbackRate.value = rate;\n\t\t}\n\t}\n\n\t/**\n\t * internal start method\n\t */\n\tprotected _start(time?: Time): void {\n\t\tconst buffer = _noiseBuffers[this._type];\n\t\tthis._source = new ToneBufferSource({\n\t\t\tbuffer,\n\t\t\tcontext: this.context,\n\t\t\tfadeIn: this._fadeIn,\n\t\t\tfadeOut: this._fadeOut,\n\t\t\tloop: true,\n\t\t\tonended: () => this.onstop(this),\n\t\t\tplaybackRate: this._playbackRate,\n\t\t}).connect(this.output);\n\t\tthis._source.start(this.toSeconds(time), Math.random() * (buffer.duration - 0.001));\n\t}\n\n\t/**\n\t * internal stop method\n\t */\n\tprotected _stop(time?: Time): void {\n\t\tif (this._source) {\n\t\t\tthis._source.stop(this.toSeconds(time));\n\t\t\tthis._source = null;\n\t\t}\n\t}\n\n\t/**\n\t * The fadeIn time of the amplitude envelope.\n\t */\n\tget fadeIn(): Time {\n\t\treturn this._fadeIn;\n\t}\n\tset fadeIn(time) {\n\t\tthis._fadeIn = time;\n\t\tif (this._source) {\n\t\t\tthis._source.fadeIn = this._fadeIn;\n\t\t}\n\t}\n\n\t/**\n\t * The fadeOut time of the amplitude envelope.\n\t */\n\tget fadeOut(): Time {\n\t\treturn this._fadeOut;\n\t}\n\tset fadeOut(time) {\n\t\tthis._fadeOut = time;\n\t\tif (this._source) {\n\t\t\tthis._source.fadeOut = this._fadeOut;\n\t\t}\n\t}\n\n\t/**\n\t * Restarts the noise.\n\t * @param  time When to restart the noise.\n\t */\n\trestart(time?: Time): this {\n\t\t// TODO could be optimized by cancelling the buffer source 'stop'\n\t\t// stop and restart\n\t\tthis._stop(time);\n\t\tthis._start(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (this._source) {\n\t\t\tthis._source.disconnect();\n\t\t}\n\t\treturn this;\n\t}\n}\n\n//--------------------\n// THE NOISE BUFFERS\n//--------------------\n\n// Noise buffer stats\nconst BUFFER_LENGTH = 44100 * 5;\nconst NUM_CHANNELS = 2;\n\n/**\n * The cached noise buffers\n */\ninterface NoiseCache {\n\t[key: string]: ToneAudioBuffer | null;\n}\n\n/**\n * Cache the noise buffers\n */\nconst _noiseCache: NoiseCache = {\n\tbrown: null,\n\tpink: null,\n\twhite: null,\n};\n\n/**\n * The noise arrays. Generated on initialization.\n * borrowed heavily from https://github.com/zacharydenton/noise.js\n * (c) 2013 Zach Denton (MIT)\n */\nconst _noiseBuffers = {\n\tget brown(): ToneAudioBuffer {\n\t\tif (!_noiseCache.brown) {\n\t\t\tconst buffer: Float32Array[] = [];\n\t\t\tfor (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {\n\t\t\t\tconst channel = new Float32Array(BUFFER_LENGTH);\n\t\t\t\tbuffer[channelNum] = channel;\n\t\t\t\tlet lastOut = 0.0;\n\t\t\t\tfor (let i = 0; i < BUFFER_LENGTH; i++) {\n\t\t\t\t\tconst white = Math.random() * 2 - 1;\n\t\t\t\t\tchannel[i] = (lastOut + (0.02 * white)) / 1.02;\n\t\t\t\t\tlastOut = channel[i];\n\t\t\t\t\tchannel[i] *= 3.5; // (roughly) compensate for gain\n\t\t\t\t}\n\t\t\t}\n\t\t\t_noiseCache.brown = new ToneAudioBuffer().fromArray(buffer);\n\t\t}\n\t\treturn _noiseCache.brown;\n\t},\n\n\tget pink(): ToneAudioBuffer {\n\t\tif (!_noiseCache.pink) {\n\t\t\tconst buffer: Float32Array[] = [];\n\t\t\tfor (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {\n\t\t\t\tconst channel = new Float32Array(BUFFER_LENGTH);\n\t\t\t\tbuffer[channelNum] = channel;\n\t\t\t\tlet b0, b1, b2, b3, b4, b5, b6;\n\t\t\t\tb0 = b1 = b2 = b3 = b4 = b5 = b6 = 0.0;\n\t\t\t\tfor (let i = 0; i < BUFFER_LENGTH; i++) {\n\t\t\t\t\tconst white = Math.random() * 2 - 1;\n\t\t\t\t\tb0 = 0.99886 * b0 + white * 0.0555179;\n\t\t\t\t\tb1 = 0.99332 * b1 + white * 0.0750759;\n\t\t\t\t\tb2 = 0.96900 * b2 + white * 0.1538520;\n\t\t\t\t\tb3 = 0.86650 * b3 + white * 0.3104856;\n\t\t\t\t\tb4 = 0.55000 * b4 + white * 0.5329522;\n\t\t\t\t\tb5 = -0.7616 * b5 - white * 0.0168980;\n\t\t\t\t\tchannel[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;\n\t\t\t\t\tchannel[i] *= 0.11; // (roughly) compensate for gain\n\t\t\t\t\tb6 = white * 0.115926;\n\t\t\t\t}\n\t\t\t}\n\t\t\t_noiseCache.pink = new ToneAudioBuffer().fromArray(buffer);\n\t\t}\n\t\treturn _noiseCache.pink;\n\t},\n\n\tget white(): ToneAudioBuffer {\n\t\tif (!_noiseCache.white) {\n\t\t\tconst buffer: Float32Array[] = [];\n\t\t\tfor (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {\n\t\t\t\tconst channel = new Float32Array(BUFFER_LENGTH);\n\t\t\t\tbuffer[channelNum] = channel;\n\t\t\t\tfor (let i = 0; i < BUFFER_LENGTH; i++) {\n\t\t\t\t\tchannel[i] = Math.random() * 2 - 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t_noiseCache.white = new ToneAudioBuffer().fromArray(buffer);\n\t\t}\n\t\treturn _noiseCache.white;\n\t},\n};\n","import { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { NormalRange, PowerOfTwo } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n\nexport type AnalyserType = \"fft\" | \"waveform\";\n\nexport interface AnalyserOptions extends ToneAudioNodeOptions {\n\tsize: PowerOfTwo;\n\ttype: AnalyserType;\n\tsmoothing: NormalRange;\n}\n\n/**\n * Wrapper around the native Web Audio's [AnalyserNode](http://webaudio.github.io/web-audio-api/#idl-def-AnalyserNode).\n * Extracts FFT or Waveform data from the incoming signal.\n * @category Component\n */\nexport class Analyser extends ToneAudioNode<AnalyserOptions> {\n\n\treadonly name: string = \"Analyser\";\n\n\treadonly input: AnalyserNode;\n\treadonly output: AnalyserNode;\n\n\t/**\n\t * The analyser node.\n\t */\n\tprivate _analyser = this.context.createAnalyser();\n\n\t/**\n\t * The analysis type\n\t */\n\tprivate _type!: AnalyserType;\n\n\t/**\n\t * The buffer that the FFT data is written to\n\t */\n\tprivate _buffer!: Float32Array;\n\n\t/**\n\t * @param type The return type of the analysis, either \"fft\", or \"waveform\".\n\t * @param size The size of the FFT. This must be a power of two in the range 16 to 16384.\n\t */\n\tconstructor(type?: AnalyserType, size?: number);\n\tconstructor(options?: Partial<AnalyserOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Analyser.getDefaults(), arguments, [\"type\", \"size\"]));\n\t\tconst options = optionsFromArguments(Analyser.getDefaults(), arguments, [\"type\", \"size\"]);\n\t\t// set the values initially\n\t\tthis.size = options.size;\n\t\tthis.type = options.type;\n\t\tthis.input = this.output = this._analyser;\n\t}\n\n\tstatic getDefaults(): AnalyserOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tsize: 1024,\n\t\t\tsmoothing: 0.8,\n\t\t\ttype: \"fft\" as AnalyserType,\n\t\t});\n\t}\n\n\t/**\n\t * Run the analysis given the current settings and return the\n\t */\n\tgetValue(): Float32Array {\n\t\tif (this._type === \"fft\") {\n\t\t\tthis._analyser.getFloatFrequencyData(this._buffer);\n\t\t} else if (this._type === \"waveform\") {\n\t\t\tthis._analyser.getFloatTimeDomainData(this._buffer);\n\t\t}\n\t\treturn this._buffer;\n\t}\n\n\t/**\n\t * The size of analysis. This must be a power of two in the range 16 to 16384.\n\t */\n\tget size(): PowerOfTwo {\n\t\treturn this._analyser.frequencyBinCount;\n\t}\n\tset size(size: PowerOfTwo) {\n\t\tthis._analyser.fftSize = size * 2;\n\t\tthis._buffer = new Float32Array(size);\n\t}\n\n\t/**\n\t * The analysis function returned by analyser.getValue(), either \"fft\" or \"waveform\".\n\t */\n\tget type(): AnalyserType {\n\t\treturn this._type;\n\t}\n\tset type(type: AnalyserType) {\n\t\tthis.assert(type === \"waveform\" || type === \"fft\", `Analyser: invalid type: ${type}`);\n\t\tthis._type = type;\n\t}\n\n\t/**\n\t * 0 represents no time averaging with the last analysis frame.\n\t */\n\tget smoothing(): NormalRange {\n\t\treturn this._analyser.smoothingTimeConstant;\n\t}\n\n\tset smoothing(val: NormalRange) {\n\t\tthis._analyser.smoothingTimeConstant = val;\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._analyser.disconnect();\n\t\treturn this;\n\t}\n}\n","import { InputNode, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Analyser } from \"./Analyser\";\n\nexport type MeterBaseOptions = ToneAudioNodeOptions;\n\n/**\n * The base class for Metering classes.\n */\nexport class MeterBase<Options extends MeterBaseOptions> extends ToneAudioNode<Options> {\n\n\treadonly name: string = \"MeterBase\";\n\n\t/**\n\t * The signal to be analysed\n\t */\n\tinput: InputNode;\n\n\t/**\n\t * The output is just a pass through of the input\n\t */\n\toutput: OutputNode;\n\n\t/**\n\t * The analyser node for the incoming signal\n\t */\n\tprotected _analyser: Analyser;\n\n\tconstructor(options?: Partial<MeterBaseOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(MeterBase.getDefaults(), arguments));\n\n\t\tthis.input = this.output = this._analyser = new Analyser({\n\t\t\tcontext: this.context,\n\t\t\tsize: 256,\n\t\t\ttype: \"waveform\",\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._analyser.dispose();\n\t\treturn this;\n\t}\n}\n","import { gainToDb } from \"../../core/type/Conversions\";\nimport { Decibels, NormalRange } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { MeterBase, MeterBaseOptions } from \"./MeterBase\";\nimport { warn } from \"../../core/util/Debug\";\n\nexport interface MeterOptions extends MeterBaseOptions {\n\tsmoothing: NormalRange;\n}\n\n/**\n * Meter gets the [RMS](https://en.wikipedia.org/wiki/Root_mean_square)\n * of an input signal. It can also get the raw value of the input signal.\n *\n * @example\n * import { Meter, UserMedia } from \"tone\";\n * const meter = new Meter();\n * const mic = new UserMedia();\n * mic.open();\n * // connect mic to the meter\n * mic.connect(meter);\n * // the current level of the mic\n * const level = meter.getValue();\n * @category Component\n */\nexport class Meter extends MeterBase<MeterOptions> {\n\n\treadonly name: string = \"Meter\";\n\n\t/**\n\t * A value from between 0 and 1 where 0 represents no time averaging with the last analysis frame.\n\t */\n\tsmoothing: number;\n\n\t/**\n\t * The previous frame's value\n\t */\n\tprivate _rms = 0;\n\n\t/**\n\t * @param smoothing The amount of smoothing applied between frames.\n\t */\n\tconstructor(smoothing?: NormalRange);\n\tconstructor(options?: Partial<MeterOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Meter.getDefaults(), arguments, [\"smoothing\"]));\n\t\tconst options = optionsFromArguments(Meter.getDefaults(), arguments, [\"smoothing\"]);\n\n\t\tthis.smoothing = options.smoothing;\n\t\tthis._analyser.size = 256;\n\t\tthis._analyser.type = \"waveform\";\n\t}\n\n\tstatic getDefaults(): MeterOptions {\n\t\treturn Object.assign(MeterBase.getDefaults(), {\n\t\t\tsmoothing: 0.8,\n\t\t});\n\t}\n\n\t/**\n\t * Use [[getValue]] instead. For the previous getValue behavior, use DCMeter.\n\t * @deprecated\n\t */\n\tgetLevel(): Decibels {\n\t\twarn(\"'getLevel' has been changed to 'getValue'\");\n\t\treturn this.getValue();\n\t}\n\n\t/**\n\t * Get the current decibel value of the incoming signal\n\t */\n\tgetValue(): number {\n\t\tconst values = this._analyser.getValue();\n\t\tconst totalSquared = values.reduce((total, current) => total + current * current, 0);\n\t\tconst rms = Math.sqrt(totalSquared / values.length);\n\t\t// the rms can only fall at the rate of the smoothing\n\t\t// but can jump up instantly\n\t\tthis._rms = Math.max(rms, this._rms * this.smoothing);\n\t\treturn gainToDb(this._rms);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._analyser.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { dbToGain } from \"../../core/type/Conversions\";\nimport { NormalRange, PowerOfTwo } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { MeterBase, MeterBaseOptions } from \"./MeterBase\";\n\nexport interface FFTOptions extends MeterBaseOptions {\n\tsize: PowerOfTwo;\n\tsmoothing: NormalRange;\n\tnormalRange: boolean;\n}\n\n/**\n * Get the current frequency data of the connected audio source using a fast Fourier transform.\n * @category Component\n */\nexport class FFT extends MeterBase<FFTOptions> {\n\n\treadonly name: string = \"FFT\";\n\n\t/**\n\t * If the output should be in decibels or normal range between 0-1. If `normalRange` is false,\n\t * the output range will be the measured decibel value, otherwise the decibel value will be converted to\n\t * the range of 0-1\n\t */\n\tnormalRange: boolean;\n\n\t/**\n\t * @param size The size of the FFT. Value must be a power of two in the range 16 to 16384.\n\t */\n\tconstructor(size?: PowerOfTwo);\n\tconstructor(options?: Partial<FFTOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(FFT.getDefaults(), arguments, [\"size\"]));\n\t\tconst options = optionsFromArguments(FFT.getDefaults(), arguments, [\"size\"]);\n\n\t\tthis.normalRange = options.normalRange;\n\t\tthis._analyser.type = \"fft\";\n\t\tthis.size = options.size;\n\t}\n\n\tstatic getDefaults(): FFTOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tnormalRange: false,\n\t\t\tsize: 1024,\n\t\t\tsmoothing: 0.8,\n\t\t});\n\t}\n\n\t/**\n\t * Gets the current frequency data from the connected audio source.\n\t * Returns the frequency data of length [[size]] as a Float32Array of decibel values.\n\t */\n\tgetValue(): Float32Array {\n\t\treturn this._analyser.getValue().map(v => this.normalRange ? dbToGain(v) : v);\n\t}\n\n\t/**\n\t * The size of analysis. This must be a power of two in the range 16 to 16384.\n\t * Determines the size of the array returned by [[getValue]] (i.e. the number of\n\t * frequency bins). Large FFT sizes may be costly to compute.\n\t */\n\tget size(): PowerOfTwo {\n\t\treturn this._analyser.size;\n\t}\n\tset size(size) {\n\t\tthis._analyser.size = size;\n\t}\n\n\t/**\n\t * 0 represents no time averaging with the last analysis frame.\n\t */\n\tget smoothing(): NormalRange {\n\t\treturn this._analyser.smoothing;\n\t}\n\tset smoothing(val) {\n\t\tthis._analyser.smoothing = val;\n\t}\n}\n","import { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { MeterBase, MeterBaseOptions } from \"./MeterBase\";\n\nexport type DCMeterOptions = MeterBaseOptions;\n\n/**\n * DCMeter gets the raw value of the input signal at the current time.\n *\n * @example\n * import { DCMeter, UserMedia } from \"tone\";\n * const meter = new DCMeter();\n * const mic = new UserMedia();\n * mic.open();\n * // connect mic to the meter\n * mic.connect(meter);\n * // the current level of the mic\n * const level = meter.getValue();\n * @category Component\n */\nexport class DCMeter extends MeterBase<DCMeterOptions> {\n\n\treadonly name: string = \"DCMeter\";\n\n\tconstructor(options?: Partial<DCMeterOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(DCMeter.getDefaults(), arguments));\n\n\t\tthis._analyser.type = \"waveform\";\n\t\tthis._analyser.size = 256;\n\t}\n\n\t/**\n\t * Get the signal value of the incoming signal\n\t */\n\tgetValue(): number {\n\t\tconst value = this._analyser.getValue();\n\t\treturn value[0];\n\t}\n}\n","import { PowerOfTwo } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { MeterBase, MeterBaseOptions } from \"./MeterBase\";\n\nexport interface WaveformOptions extends MeterBaseOptions {\n\t/**\n\t * The size of the Waveform. Value must be a power of two in the range 16 to 16384.\n\t */\n\tsize: PowerOfTwo;\n}\n\n/**\n * Get the current waveform data of the connected audio source.\n * @category Component\n */\nexport class Waveform extends MeterBase<WaveformOptions> {\n\n\treadonly name: string = \"Waveform\";\n\n\t/**\n\t * @param size The size of the Waveform. Value must be a power of two in the range 16 to 16384.\n\t */\n\tconstructor(size?: PowerOfTwo);\n\tconstructor(options?: Partial<WaveformOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Waveform.getDefaults(), arguments, [\"size\"]));\n\t\tconst options = optionsFromArguments(Waveform.getDefaults(), arguments, [\"size\"]);\n\n\t\tthis._analyser.type = \"waveform\";\n\t\tthis.size = options.size;\n\t}\n\n\tstatic getDefaults(): WaveformOptions {\n\t\treturn Object.assign(MeterBase.getDefaults(), {\n\t\t\tsize: 1024,\n\t\t});\n\t}\n\n\t/**\n\t * Return the waveform for the current time as a Float32Array where each value in the array\n\t * represents a sample in the waveform.\n\t */\n\tgetValue(): Float32Array {\n\t\treturn this._analyser.getValue();\n\t}\n\n\t/**\n\t * The size of analysis. This must be a power of two in the range 16 to 16384.\n\t * Determines the size of the array returned by [[getValue]].\n\t */\n\tget size(): PowerOfTwo {\n\t\treturn this._analyser.size;\n\t}\n\tset size(size) {\n\t\tthis._analyser.size = size;\n\t}\n}\n","import { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Frequency } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Gain } from \"../../core/context/Gain\";\n\nexport type OnePoleFilterType = \"highpass\" | \"lowpass\";\n\nexport interface OnePoleFilterOptions extends ToneAudioNodeOptions {\n\tfrequency: Frequency;\n\ttype: OnePoleFilterType;\n}\n\n/**\n * A one pole filter with 6db-per-octave rolloff. Either \"highpass\" or \"lowpass\". \n * Note that changing the type or frequency may result in a discontinuity which\n * can sound like a click or pop. \n * References: \n * * http://www.earlevel.com/main/2012/12/15/a-one-pole-filter/  \n * * http://www.dspguide.com/ch19/2.htm\n * * https://github.com/vitaliy-bobrov/js-rocks/blob/master/src/app/audio/effects/one-pole-filters.ts\n * @category Component\n */\nexport class OnePoleFilter extends ToneAudioNode<OnePoleFilterOptions> {\n\t\n\treadonly name: string = \"OnePoleFilter\";\n\n\t/**\n\t * Hold the current frequency\n\t */\n\tprivate _frequency: Frequency;\n\n\t/**\n\t * the current one pole type\n\t */\n\tprivate _type: OnePoleFilterType;\n\n\t/**\n\t * the current one pole filter\n\t */\n\tprivate _filter!: IIRFilterNode;\n\n\treadonly input: Gain;\n\treadonly output: Gain;\n\n\t/**\n\t * @param frequency The frequency\n\t * @param type The  filter type, either \"lowpass\" or \"highpass\"\n\t */\n\tconstructor(frequency?: Frequency, type?: OnePoleFilterType);\n\tconstructor(options?: Partial<OnePoleFilterOptions>)\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(OnePoleFilter.getDefaults(), arguments, [\"frequency\", \"type\"]));\n\t\tconst options = optionsFromArguments(OnePoleFilter.getDefaults(), arguments, [\"frequency\", \"type\"]);\n\n\t\tthis._frequency = options.frequency;\n\t\tthis._type = options.type;\n\t\tthis.input = new Gain({ context: this.context });\n\t\tthis.output = new Gain({ context: this.context });\n\t\tthis._createFilter();\n\t}\n\n\tstatic getDefaults(): OnePoleFilterOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tfrequency: 880,\n\t\t\ttype: \"lowpass\" as OnePoleFilterType\n\t\t});\n\t}\n\n\t/**\n\t * Create a filter and dispose the old one\n\t */\n\tprivate _createFilter() {\n\t\tconst oldFilter = this._filter;\n\t\tconst freq = this.toFrequency(this._frequency);\n\t\tconst t = 1 / (2 * Math.PI * freq);\n\t\tif (this._type === \"lowpass\") {\n\t\t\tconst a0 = 1 / (t * this.context.sampleRate);\n\t\t\tconst b1 = a0 - 1;\n\t\t\tthis._filter = this.context.createIIRFilter([a0, 0], [1, b1]);\n\t\t} else {\n\t\t\tconst b1 = 1 / (t * this.context.sampleRate) - 1;\n\t\t\tthis._filter = this.context.createIIRFilter([1, -1], [1, b1]);\n\t\t}\n\t\t\n\t\tthis.input.chain(this._filter, this.output);\n\t\tif (oldFilter) {\n\t\t\t// dispose it on the next block\n\t\t\tthis.context.setTimeout(() => {\n\t\t\t\tif (!this.disposed) {\n\t\t\t\t\tthis.input.disconnect(oldFilter);\n\t\t\t\t\toldFilter.disconnect();\n\t\t\t\t}\n\t\t\t}, this.blockTime);\n\t\t}\n\t}\n\n\t/**\n\t * The frequency value. \n\t */\n\tget frequency(): Frequency {\n\t\treturn this._frequency;\n\t}\n\tset frequency(fq) {\n\t\tthis._frequency = fq;\n\t\tthis._createFilter();\n\t}\n\t\n\t/**\n\t * The OnePole Filter type, either \"highpass\" or \"lowpass\"\n\t */\n\tget type(): OnePoleFilterType {\n\t\treturn this._type;\n\t}\n\tset type(t) {\n\t\tthis._type = t;\n\t\tthis._createFilter();\n\t}\n\n\t/**\n\t * Get the frequency response curve. This curve represents how the filter\n\t * responses to frequencies between 20hz-20khz.\n\t * @param  len The number of values to return\n\t * @return The frequency response curve between 20-20kHz\n\t */\n\tgetFrequencyResponse(len: number = 128): Float32Array {\n\t\tconst freqValues = new Float32Array(len);\n\t\tfor (let i = 0; i < len; i++) {\n\t\t\tconst norm = Math.pow(i / len, 2);\n\t\t\tconst freq = norm * (20000 - 20) + 20;\n\t\t\tfreqValues[i] = freq;\n\t\t}\n\t\tconst magValues = new Float32Array(len);\n\t\tconst phaseValues = new Float32Array(len);\n\t\tthis._filter.getFrequencyResponse(freqValues, magValues, phaseValues);\n\t\treturn magValues;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.input.dispose();\n\t\tthis.output.dispose();\n\t\tthis._filter.disconnect();\n\t\treturn this;\n\t}\n}\n","import { optionsFromArguments } from \"..//core/util/Defaults\";\nimport { InputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { connectSignal } from \"./Signal\";\n/**\n * A signal operator has an input and output and modifies the signal.\n */\nexport abstract class SignalOperator<Options extends ToneAudioNodeOptions> extends ToneAudioNode<Options> {\n\n\tconstructor(options?: Partial<Options>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(SignalOperator.getDefaults(), arguments, [\"context\"])));\n\t}\n\n\tconnect(destination: InputNode, outputNum: number = 0, inputNum: number = 0): this {\n\t\tconnectSignal(this, destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { isArray, isFunction } from \"../core/util/TypeCheck\";\nimport { Signal } from \"./Signal\";\nimport { SignalOperator } from \"./SignalOperator\";\n\nexport type WaveShaperMappingFn = (value: number, index?: number) => number;\n\ntype WaveShaperMapping = WaveShaperMappingFn | number[] | Float32Array;\n\ninterface WaveShaperOptions extends ToneAudioNodeOptions {\n\tmapping?: WaveShaperMapping;\n\tlength: number;\n\tcurve?: number[] | Float32Array;\n}\n\n/**\n * Wraps the native Web Audio API\n * [WaveShaperNode](http://webaudio.github.io/web-audio-api/#the-waveshapernode-interface).\n *\n * @example\n * import { Oscillator, Signal, WaveShaper } from \"tone\";\n * const osc = new Oscillator().toDestination().start();\n * // multiply the output of the signal by 2 using the waveshaper's function\n * const timesTwo = new WaveShaper((val) => val * 2, 2048).connect(osc.frequency);\n * const signal = new Signal(440).connect(timesTwo);\n * @category Signal\n */\nexport class WaveShaper extends SignalOperator<WaveShaperOptions> {\n\n\treadonly name: string = \"WaveShaper\";\n\n\t/**\n\t * the waveshaper node\n\t */\n\tprivate _shaper: WaveShaperNode = this.context.createWaveShaper();\n\n\t/**\n\t * The input to the waveshaper node.\n\t */\n\tinput = this._shaper;\n\n\t/**\n\t * The output from the waveshaper node\n\t */\n\toutput = this._shaper;\n\n\t/**\n\t * @param mapping The function used to define the values.\n\t *                The mapping function should take two arguments:\n\t *                the first is the value at the current position\n\t *                and the second is the array position.\n\t *                If the argument is an array, that array will be\n\t *                set as the wave shaping function. The input\n\t *                signal is an AudioRange [-1, 1] value and the output\n\t *                signal can take on any numerical values.\n\t *\n\t * @param bufferLen The length of the WaveShaperNode buffer.\n\t */\n\tconstructor(mapping?: WaveShaperMapping, length?: number);\n\tconstructor(options?: Partial<WaveShaperOptions>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(WaveShaper.getDefaults(), arguments, [\"mapping\", \"length\"])));\n\t\tconst options = optionsFromArguments(WaveShaper.getDefaults(), arguments, [\"mapping\", \"length\"]);\n\n\t\tif (isArray(options.mapping) || options.mapping instanceof Float32Array) {\n\t\t\tthis.curve = Float32Array.from(options.mapping);\n\t\t} else if (isFunction(options.mapping)) {\n\t\t\tthis.setMap(options.mapping, options.length);\n\t\t}\n\t}\n\n\tstatic getDefaults(): WaveShaperOptions {\n\t\treturn Object.assign(Signal.getDefaults(), {\n\t\t\tlength: 1024,\n\t\t});\n\t}\n\n\t/**\n\t * Uses a mapping function to set the value of the curve.\n\t * @param mapping The function used to define the values.\n\t *                The mapping function take two arguments:\n\t *                the first is the value at the current position\n\t *                which goes from -1 to 1 over the number of elements\n\t *                in the curve array. The second argument is the array position.\n\t * @example\n\t * import { WaveShaper } from \"tone\";\n\t * const shaper = new WaveShaper();\n\t * // map the input signal from [-1, 1] to [0, 10]\n\t * shaper.setMap((val, index) => (val + 1) * 5);\n\t */\n\tsetMap(mapping: WaveShaperMappingFn, length: number = 1024): this {\n\t\tconst array = new Float32Array(length);\n\t\tfor (let i = 0, len = length; i < len; i++) {\n\t\t\tconst normalized = (i / (len - 1)) * 2 - 1;\n\t\t\tarray[i] = mapping(normalized, i);\n\t\t}\n\t\tthis.curve = array;\n\t\treturn this;\n\t}\n\n\t/**\n\t * The array to set as the waveshaper curve. For linear curves\n\t * array length does not make much difference, but for complex curves\n\t * longer arrays will provide smoother interpolation.\n\t */\n\tget curve(): Float32Array | null {\n\t\treturn this._shaper.curve;\n\t}\n\n\tset curve(mapping: Float32Array | null) {\n\t\tthis._shaper.curve = mapping;\n\t}\n\n\t/**\n\t * Specifies what type of oversampling (if any) should be used when\n\t * applying the shaping curve. Can either be \"none\", \"2x\" or \"4x\".\n\t */\n\tget oversample(): OverSampleType {\n\t\treturn this._shaper.oversample;\n\t}\n\n\tset oversample(oversampling: OverSampleType) {\n\t\tconst isOverSampleType = [\"none\", \"2x\", \"4x\"].some(str => str.includes(oversampling));\n\t\tthis.assert(isOverSampleType, \"oversampling must be either 'none', '2x', or '4x'\");\n\t\tthis._shaper.oversample = oversampling;\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._shaper.disconnect();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { SignalOperator } from \"./SignalOperator\";\nimport { WaveShaper } from \"./WaveShaper\";\n\n/**\n * Return the absolute value of an incoming signal.\n *\n * @example\n * import { Abs, Signal } from \"tone\";\n * const signal = new Signal(-1);\n * const abs = new Abs();\n * signal.connect(abs);\n * // the output of abs is 1.\n * @category Signal\n */\nexport class Abs extends SignalOperator<ToneAudioNodeOptions> {\n\n\treadonly name: string = \"Abs\";\n\n\t/**\n\t * The node which converts the audio ranges\n\t */\n\tprivate _abs = new WaveShaper({\n\t\tcontext: this.context,\n\t\tmapping: val => {\n\t\t\tif (Math.abs(val) < 0.001) {\n\t\t\t\treturn 0;\n\t\t\t} else {\n\t\t\t\treturn Math.abs(val);\n\t\t\t}\n\t\t},\n\t});\n\n\t/**\n\t * The AudioRange input [-1, 1]\n\t */\n\tinput = this._abs;\n\n\t/**\n\t * The output range [0, 1]\n\t */\n\toutput = this._abs;\n\n\t/**\n\t * clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._abs.dispose();\n\t\treturn this;\n\t}\n}\n","import { Time } from \"../../core/type/Units\";\nimport { InputNode, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { OnePoleFilter } from \"../filter/OnePoleFilter\";\nimport { Abs } from \"../../signal/Abs\";\n\nexport interface FollowerOptions extends ToneAudioNodeOptions {\n\tsmoothing: Time;\n}\n\n/**\n * Follower is a simple envelope follower. \n * It's implemented by applying a lowpass filter to the absolute value of the incoming signal. \n * ```\n *          +-----+    +---------------+\n * Input +--> Abs +----> OnePoleFilter +--> Output\n *          +-----+    +---------------+\n * ```\n * @category Component\n */\nexport class Follower extends ToneAudioNode<FollowerOptions> {\n\n\treadonly name: string = \"Follower\";\n\n\treadonly input: InputNode;\n\treadonly output: OutputNode;\n\n\t/**\n\t * Private reference to the smoothing parameter\n\t */\n\tprivate _smoothing: Time;\n\n\t/**\n\t * The lowpass filter\n\t */\n\tprivate _lowpass: OnePoleFilter;\n\n\t/**\n\t * The absolute value\n\t */\n\tprivate _abs: Abs;\n\n\t/**\n\t * @param smoothing The rate of change of the follower.\n\t */\n\tconstructor(smoothing?: Time);\n\tconstructor(options?: Partial<FollowerOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Follower.getDefaults(), arguments, [\"smoothing\"]));\n\t\tconst options = optionsFromArguments(Follower.getDefaults(), arguments, [\"smoothing\"]);\n\n\t\tthis._abs = this.input = new Abs({ context: this.context });\n\t\tthis._lowpass = this.output = new OnePoleFilter({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: 1 / this.toSeconds(options.smoothing),\n\t\t\ttype: \"lowpass\"\n\t\t});\n\t\tthis._abs.connect(this._lowpass);\n\t\tthis._smoothing = options.smoothing;\n\t}\n\n\tstatic getDefaults(): FollowerOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tsmoothing: 0.05\n\t\t});\n\t}\n\n\t/**\n\t * The amount of time it takes a value change to arrive at the updated value. \n\t */\n\tget smoothing(): Time {\n\t\treturn this._smoothing;\n\t}\n\tset smoothing(smoothing) {\n\t\tthis._smoothing = smoothing;\n\t\tthis._lowpass.frequency = 1 / this.toSeconds(this.smoothing);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._abs.dispose();\n\t\tthis._lowpass.dispose();\n\t\treturn this;\n\t}\n}\n","import { BaseContext } from \"../../core/context/BaseContext\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n\nexport interface SoloOptions extends ToneAudioNodeOptions {\n\tsolo: boolean;\n}\n\n/**\n * Solo lets you isolate a specific audio stream. When an instance is set to `solo=true`,\n * it will mute all other instances of Solo.\n * @example\n * import { Oscillator, Solo } from \"tone\";\n * \n * const soloA = new Solo().toDestination();\n * const oscA = new Oscillator(\"C4\", \"sawtooth\").connect(soloA);\n * const soloB = new Solo().toDestination();\n * const oscB = new Oscillator(\"E4\", \"square\").connect(soloB);\n * \n * soloA.solo = true;\n * // no audio will pass through soloB\n * @category Component\n */\nexport class Solo extends ToneAudioNode<SoloOptions> {\n\n\treadonly name: string = \"Solo\";\n\n\treadonly input: Gain;\n\treadonly output: Gain;\n\n\t/**\n\t * @param solo If the connection should be initially solo'ed.\n\t */\n\tconstructor(solo?: boolean);\n\tconstructor(options?: Partial<SoloOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Solo.getDefaults(), arguments, [\"solo\"]));\n\t\tconst options = optionsFromArguments(Solo.getDefaults(), arguments, [\"solo\"]);\n\n\t\tthis.input = this.output = new Gain({\n\t\t\tcontext: this.context,\n\t\t});\n\n\t\tif (!Solo._allSolos.has(this.context)) {\n\t\t\tSolo._allSolos.set(this.context, new Set());\n\t\t}\n\t\t(Solo._allSolos.get(this.context) as Set<Solo>).add(this);\n\n\t\t// set initially\n\t\tthis.solo = options.solo;\n\t}\n\n\tstatic getDefaults(): SoloOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tsolo: false,\n\t\t});\n\t}\n\n\t/**\n\t * Hold all of the solo'ed tracks belonging to a specific context\n\t */\n\tprivate static _allSolos: Map<BaseContext, Set<Solo>> = new Map();\n\n\t/**\n\t * Hold the currently solo'ed instance(s)\n\t */\n\tprivate static _soloed: Map<BaseContext, Set<Solo>> = new Map();\n\n\t/**\n\t * Isolates this instance and mutes all other instances of Solo.\n\t * Only one instance can be soloed at a time. A soloed\n\t * instance will report `solo=false` when another instance is soloed.\n\t */\n\tget solo(): boolean {\n\t\treturn this._isSoloed();\n\t}\n\tset solo(solo) {\n\t\tif (solo) {\n\t\t\tthis._addSolo();\n\t\t} else {\n\t\t\tthis._removeSolo();\n\t\t}\n\t\t(Solo._allSolos.get(this.context) as Set<Solo>).forEach(instance => instance._updateSolo());\n\t}\n\n\t/**\n\t * If the current instance is muted, i.e. another instance is soloed\n\t */\n\tget muted(): boolean {\n\t\treturn this.input.gain.value === 0;\n\t}\n\n\t/**\n\t * Add this to the soloed array\n\t */\n\tprivate _addSolo(): void {\n\t\tif (!Solo._soloed.has(this.context)) {\n\t\t\tSolo._soloed.set(this.context, new Set());\n\t\t}\n\t\t(Solo._soloed.get(this.context) as Set<Solo>).add(this);\n\t}\n\n\t/**\n\t * Remove this from the soloed array\n\t */\n\tprivate _removeSolo(): void {\n\t\tif (Solo._soloed.has(this.context)) {\n\t\t\t(Solo._soloed.get(this.context) as Set<Solo>).delete(this);\n\t\t}\n\t}\n\n\t/**\n\t * Is this on the soloed array\n\t */\n\tprivate _isSoloed(): boolean {\n\t\treturn Solo._soloed.has(this.context) && (Solo._soloed.get(this.context) as Set<Solo>).has(this);\n\t}\n\n\t/**\n\t * Returns true if no one is soloed\n\t */\n\tprivate _noSolos(): boolean {\n\t\t// either does not have any soloed added\n\t\treturn !Solo._soloed.has(this.context) ||\n\t\t\t// or has a solo set but doesn't include any items\n\t\t\t(Solo._soloed.has(this.context) && (Solo._soloed.get(this.context) as Set<Solo>).size === 0);\n\t}\n\n\t/**\n\t * Solo the current instance and unsolo all other instances.\n\t */\n\tprivate _updateSolo(): void {\n\t\tif (this._isSoloed()) {\n\t\t\tthis.input.gain.value = 1;\n\t\t} else if (this._noSolos()) {\n\t\t\t// no one is soloed\n\t\t\tthis.input.gain.value = 1;\n\t\t} else {\n\t\t\tthis.input.gain.value = 0;\n\t\t}\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\t(Solo._allSolos.get(this.context) as Set<Solo>).delete(this);\n\t\tthis._removeSolo();\n\t\treturn this;\n\t}\n}\n","import { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { AudioRange } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\n\ninterface TonePannerOptions extends ToneAudioNodeOptions {\n\tpan: AudioRange;\n}\n\n/**\n * Panner is an equal power Left/Right Panner. It is a wrapper around the StereoPannerNode.\n * @example\n * import { Oscillator, Panner } from \"tone\";\n * // pan the input signal hard right.\n * const panner = new Panner(1).toDestination();\n * const osc = new Oscillator().connect(panner).start();\n * @category Component\n */\nexport class Panner extends ToneAudioNode<TonePannerOptions> {\n\n\treadonly name: string = \"Panner\";\n\n\t/**\n\t * the panner node\n\t */\n\tprivate _panner: StereoPannerNode = this.context.createStereoPanner();\n\treadonly input: StereoPannerNode = this._panner;\n\treadonly output: StereoPannerNode = this._panner;\n\n\t/**\n\t * The pan control. -1 = hard left, 1 = hard right.\n\t */\n\treadonly pan: Param<\"audioRange\">;\n\n\tconstructor(options?: Partial<TonePannerOptions>);\n\t/**\n\t * @param pan The initial panner value (Defaults to 0 = \"center\").\n\t */\n\tconstructor(pan?: AudioRange);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Panner.getDefaults(), arguments, [\"pan\"])));\n\t\tconst options = optionsFromArguments(Panner.getDefaults(), arguments, [\"pan\"]);\n\n\t\tthis.pan = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._panner.pan,\n\t\t\tvalue: options.pan,\n\t\t});\n\n\t\t// this is necessary for standardized-audio-context\n\t\t// doesn't make any difference for the native AudioContext\n\t\t// https://github.com/chrisguttandin/standardized-audio-context/issues/647\n\t\tthis._panner.channelCount = 1;\n\t\tthis._panner.channelCountMode = \"explicit\";\n\n\t\t// initial value\n\t\treadOnly(this, \"pan\");\n\t}\n\n\tstatic getDefaults(): TonePannerOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tpan: 0,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._panner.disconnect();\n\t\tthis.pan.dispose();\n\t\treturn this;\n\t}\n}\n","import { readOnly } from \"../../core/util/Interface\";\nimport { Param } from \"../../core/context/Param\";\nimport { InputNode, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { AudioRange, Decibels } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Panner } from \"./Panner\";\nimport { Volume } from \"./Volume\";\n\nexport interface PanVolOptions extends ToneAudioNodeOptions {\n\tpan: AudioRange;\n\tvolume: Decibels;\n\tmute: boolean;\n}\n\n/**\n * PanVol is a Tone.Panner and Tone.Volume in one.\n * @example\n * import { Oscillator, PanVol } from \"tone\";\n * // pan the incoming signal left and drop the volume\n * const panVol = new PanVol(-0.25, -12).toDestination();\n * const osc = new Oscillator().connect(panVol).start();\n * @category Component\n */\nexport class PanVol extends ToneAudioNode<PanVolOptions> {\n\n\treadonly name: string = \"PanVol\";\n\n\treadonly input: InputNode;\n\treadonly output: OutputNode;\n\n\t/**\n\t * The panning node\n\t */\n\tprivate _panner: Panner;\n\n\t/**\n\t * The L/R panning control.\n\t */\n\treadonly pan: Param<\"audioRange\">;\n\n\t/**\n\t * The volume node\n\t */\n\tprivate _volume: Volume;\n\n\t/**\n\t * The volume control in decibels.\n\t */\n\treadonly volume: Param<\"decibels\">;\n\n\t/**\n\t * @param pan the initial pan\n\t * @param volume The output volume.\n\t */\n\tconstructor(pan?: AudioRange, volume?: Decibels);\n\tconstructor(options?: Partial<PanVolOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(PanVol.getDefaults(), arguments, [\"pan\", \"volume\"]));\n\t\tconst options = optionsFromArguments(PanVol.getDefaults(), arguments, [\"pan\", \"volume\"]);\n\n\t\tthis._panner = this.input = new Panner({\n\t\t\tcontext: this.context,\n\t\t\tpan: options.pan,\n\t\t});\n\t\tthis.pan = this._panner.pan;\n\t\tthis._volume = this.output = new Volume({\n\t\t\tcontext: this.context,\n\t\t\tvolume: options.volume,\n\t\t});\n\t\tthis.volume = this._volume.volume;\n\n\t\t// connections\n\t\tthis._panner.connect(this._volume);\n\t\tthis.mute = options.mute;\n\n\t\treadOnly(this, [\"pan\", \"volume\"]);\n\t}\n\n\tstatic getDefaults(): PanVolOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmute: false,\n\t\t\tpan: 0,\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Mute/unmute the volume\n\t */\n\tget mute(): boolean {\n\t\treturn this._volume.mute;\n\t}\n\tset mute(mute) {\n\t\tthis._volume.mute = mute;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._panner.dispose();\n\t\tthis.pan.dispose();\n\t\tthis._volume.dispose();\n\t\tthis.volume.dispose();\n\t\treturn this;\n\t}\n}\n","import { AudioRange, Decibels } from \"../../core/type/Units\";\nimport { InputNode, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Solo } from \"./Solo\";\nimport { PanVol } from \"./PanVol\";\nimport { Param } from \"../../core/context/Param\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Gain } from \"../../core/context/Gain\";\n\nexport interface ChannelOptions extends ToneAudioNodeOptions {\n\tpan: AudioRange;\n\tvolume: Decibels;\n\tsolo: boolean;\n\tmute: boolean;\n}\n\n/**\n * Channel provides a channel strip interface with volume, pan, solo and mute controls. \n * See [[PanVol]] and [[Solo]]\n * @example\n * import { Channel } from \"tone\";\n * // pan the incoming signal left and drop the volume 12db\n * const channel = new Channel(-0.25, -12);\n * @category Component\n */\nexport class Channel extends ToneAudioNode<ChannelOptions> {\n\n\treadonly name: string = \"Channel\";\n\n\treadonly input: InputNode;\n\treadonly output: OutputNode;\n\n\t/**\n\t * The soloing interface\n\t */\n\tprivate _solo: Solo;\n\n\t/**\n\t * The panning and volume node\n\t */\n\tprivate _panVol: PanVol;\n\n\t/**\n\t * The L/R panning control.\n\t */\n\treadonly pan: Param<\"audioRange\">;\n\n\t/**\n\t * The volume control in decibels.\n\t */\n\treadonly volume: Param<\"decibels\">;\n\t\n\t/**\n\t * @param volume The output volume.\n\t * @param pan the initial pan\n\t */\n\tconstructor(volume?: Decibels, pan?: AudioRange);\n\tconstructor(options?: Partial<ChannelOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Channel.getDefaults(), arguments, [\"volume\", \"pan\"]));\n\t\tconst options = optionsFromArguments(Channel.getDefaults(), arguments, [\"volume\", \"pan\"]);\n\n\t\tthis._solo = this.input = new Solo({\n\t\t\tsolo: options.solo,\n\t\t\tcontext: this.context,\n\t\t});\n\t\tthis._panVol = this.output = new PanVol({\n\t\t\tcontext: this.context,\n\t\t\tpan: options.pan,\n\t\t\tvolume: options.volume,\n\t\t\tmute: options.mute,\n\t\t});\n\t\tthis.pan = this._panVol.pan;\n\t\tthis.volume = this._panVol.volume;\n\n\t\tthis._solo.connect(this._panVol);\n\t\treadOnly(this, [\"pan\", \"volume\"]);\n\t}\n\n\tstatic getDefaults(): ChannelOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tpan: 0,\n\t\t\tvolume: 0,\n\t\t\tmute: false,\n\t\t\tsolo: false\n\t\t});\n\t}\n\n\t/**\n\t * Solo/unsolo the channel. Soloing is only relative to other [[Channels]] and [[Solo]] instances\n\t */\n\tget solo(): boolean {\n\t\treturn this._solo.solo;\n\t}\n\tset solo(solo) {\n\t\tthis._solo.solo = solo;\n\t}\n\n\t/**\n\t * If the current instance is muted, i.e. another instance is soloed,\n\t * or the channel is muted\n\t */\n\tget muted(): boolean {\n\t\treturn this._solo.muted || this.mute;\n\t}\n\n\t/**\n\t * Mute/unmute the volume\n\t */\n\tget mute(): boolean {\n\t\treturn this._panVol.mute;\n\t}\n\tset mute(mute) {\n\t\tthis._panVol.mute = mute;\n\t}\n\n\t/**\n\t * Store the send/receive channels by name. \n\t */\n\tprivate static buses: Map<string, Gain> = new Map();\n\n\t/**\n\t * Get the gain node belonging to the bus name. Create it if\n\t * it doesn't exist\n\t * @param name The bus name\n\t */\n\tprivate _getBus(name: string): Gain {\n\t\tif (!Channel.buses.has(name)) {\n\t\t\tChannel.buses.set(name, new Gain({ context: this.context }));\n\t\t}\n\t\treturn Channel.buses.get(name) as Gain;\n\t}\n\n\t/**\n\t * Send audio to another channel using a string. `send` is a lot like\n\t * [[connect]], except it uses a string instead of an object. This can \n\t * be useful in large applications to decouple sections since [[send]]\n\t * and [[receive]] can be invoked separately in order to connect an object\n\t * @param name The channel name to send the audio\n\t * @param volume The amount of the signal to send. \n\t * \tDefaults to 0db, i.e. send the entire signal\n\t * @returns Returns the gain node of this connection.\n\t */\n\tsend(name: string, volume: Decibels = 0): Gain<\"decibels\"> {\n\t\tconst bus = this._getBus(name);\n\t\tconst sendKnob = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"decibels\",\n\t\t\tgain: volume,\n\t\t});\n\t\tthis.connect(sendKnob);\n\t\tsendKnob.connect(bus);\n\t\treturn sendKnob;\n\t}\n\n\t/**\n\t * Receive audio from a channel which was connected with [[send]]. \n\t * @param name The channel name to receive audio from.\n\t */\n\treceive(name: string) {\n\t\tconst bus = this._getBus(name);\n\t\tbus.connect(this);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._panVol.dispose();\n\t\tthis.pan.dispose();\n\t\tthis.volume.dispose();\n\t\tthis._solo.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { SignalOperator } from \"./SignalOperator\";\nimport { WaveShaper } from \"./WaveShaper\";\n\n/**\n * GainToAudio converts an input in NormalRange [0,1] to AudioRange [-1,1].\n * See {@link AudioToGain}.\n * @category Signal\n */\nexport class GainToAudio extends SignalOperator<ToneAudioNodeOptions> {\n\n\treadonly name: string = \"GainToAudio\";\n\n\t/**\n\t * The node which converts the audio ranges\n\t */\n\tprivate _norm = new WaveShaper({\n\t\tcontext: this.context,\n\t\tmapping: x => Math.abs(x) * 2 - 1,\n\t});\n\n\t/**\n\t * The NormalRange input [0, 1]\n\t */\n\tinput = this._norm;\n\n\t/**\n\t * The AudioRange output [-1, 1]\n\t */\n\toutput = this._norm;\n\n\t/**\n\t * clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._norm.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { connect, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { NormalRange } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { GainToAudio } from \"../../signal/GainToAudio\";\nimport { Signal } from \"../../signal/Signal\";\n\ninterface CrossFadeOptions extends ToneAudioNodeOptions {\n\tfade: NormalRange;\n}\n\n/**\n * Tone.Crossfade provides equal power fading between two inputs.\n * More on crossfading technique [here](https://en.wikipedia.org/wiki/Fade_(audio_engineering)#Crossfading).\n * ```\n *                                             +---------+\n *                                            +> input a +>--+\n * +-----------+   +---------------------+     |         |   |\n * | 1s signal +>--> stereoPannerNode  L +>----> gain    |   |\n * +-----------+   |                     |     +---------+   |\n *               +-> pan               R +>-+                |   +--------+\n *               | +---------------------+  |                +---> output +>\n *  +------+     |                          |  +---------+   |   +--------+\n *  | fade +>----+                          | +> input b +>--+\n *  +------+                                |  |         |\n *                                          +--> gain    |\n *                                             +---------+\n * ```\n * @example\n * import { CrossFade, Oscillator } from \"tone\";\n * const crossFade = new CrossFade().toDestination();\n * // connect two inputs to a/b\n * const inputA = new Oscillator(440, \"square\").connect(crossFade.a).start();\n * const inputB = new Oscillator(440, \"sine\").connect(crossFade.b).start();\n * // use the fade to control the mix between the two\n * crossFade.fade.value = 0.5;\n * @category Component\n */\nexport class CrossFade extends ToneAudioNode<CrossFadeOptions> {\n\n\treadonly name: string = \"CrossFade\";\n\n\t/**\n\t * The crossfading is done by a StereoPannerNode\n\t */\n\tprivate _panner: StereoPannerNode = this.context.createStereoPanner();\n\n\t/**\n\t * Split the output of the panner node into two values used to control the gains.\n\t */\n\tprivate _split: ChannelSplitterNode = this.context.createChannelSplitter(2);\n\n\t/**\n\t * Convert the fade value into an audio range value so it can be connected\n\t * to the panner.pan AudioParam\n\t */\n\tprivate _g2a: GainToAudio = new GainToAudio({ context: this.context });\n\n\t/**\n\t * The input which is at full level when fade = 0\n\t */\n\treadonly a: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\n\t/**\n\t * The input which is at full level when fade = 1\n\t */\n\treadonly b: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\n\t/**\n\t * The output is a mix between `a` and `b` at the ratio of `fade`\n\t */\n\treadonly output: Gain = new Gain({ context: this.context });\n\n\t/**\n\t * CrossFade has no input, you must choose either `a` or `b`\n\t */\n\treadonly input: undefined;\n\n\t/**\n\t * The mix between the two inputs. A fade value of 0\n\t * will output 100% crossFade.a and\n\t * a value of 1 will output 100% crossFade.b.\n\t */\n\treadonly fade: Signal<\"normalRange\">;\n\n\tprotected _internalChannels = [this.a, this.b];\n\n\t/**\n\t * @param fade The initial fade value [0, 1].\n\t */\n\tconstructor(fade?: NormalRange);\n\tconstructor(options?: Partial<CrossFadeOptions>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(CrossFade.getDefaults(), arguments, [\"fade\"])));\n\t\tconst options = optionsFromArguments(CrossFade.getDefaults(), arguments, [\"fade\"]);\n\n\t\tthis.fade = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"normalRange\",\n\t\t\tvalue: options.fade,\n\t\t});\n\t\treadOnly(this, \"fade\");\n\n\t\tthis.context.getConstant(1).connect(this._panner);\n\t\tthis._panner.connect(this._split);\n\t\t// this is necessary for standardized-audio-context\n\t\t// doesn't make any difference for the native AudioContext\n\t\t// https://github.com/chrisguttandin/standardized-audio-context/issues/647\n\t\tthis._panner.channelCount = 1;\n\t\tthis._panner.channelCountMode = \"explicit\";\n\t\tconnect(this._split, this.a.gain, 0);\n\t\tconnect(this._split, this.b.gain, 1);\n\n\t\tthis.fade.chain(this._g2a, this._panner.pan);\n\n\t\tthis.a.connect(this.output);\n\t\tthis.b.connect(this.output);\n\t}\n\n\tstatic getDefaults(): CrossFadeOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tfade: 0.5,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.a.dispose();\n\t\tthis.b.dispose();\n\t\tthis.output.dispose();\n\t\tthis.fade.dispose();\n\t\tthis._g2a.dispose();\n\t\tthis._panner.disconnect();\n\t\tthis._split.disconnect();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Positive } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n\ninterface MergeOptions extends ToneAudioNodeOptions {\n\tchannels: Positive;\n}\n\n/**\n * Merge brings multiple mono input channels into a single multichannel output channel.\n *\n * @example\n * import { Merge, Noise, Oscillator } from \"tone\";\n * const merge = new Merge().toDestination();\n * // routing a sine tone in the left channel\n * const osc = new Oscillator().connect(merge, 0, 0).start();\n * // and noise in the right channel\n * const noise = new Noise().connect(merge, 0, 1).start();;\n * @category Component\n */\nexport class Merge extends ToneAudioNode<MergeOptions> {\n\n\treadonly name: string = \"Merge\";\n\n\t/**\n\t * The merger node for the channels.\n\t */\n\tprivate _merger: ChannelMergerNode;\n\n\t/**\n\t * The output is the input channels combined into a single (multichannel) output\n\t */\n\treadonly output: ChannelMergerNode;\n\n\t/**\n\t * Multiple input connections combine into a single output.\n\t */\n\treadonly input: ChannelMergerNode;\n\n\t/**\n\t * @param channels The number of channels to merge.\n\t */\n\tconstructor(channels?: Positive);\n\tconstructor(options?: Partial<MergeOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Merge.getDefaults(), arguments, [\"channels\"]));\n\t\tconst options = optionsFromArguments(Merge.getDefaults(), arguments, [\"channels\"]);\n\n\t\tthis._merger = this.output = this.input = this.context.createChannelMerger(options.channels);\n\t}\n\n\tstatic getDefaults(): MergeOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tchannels: 2,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._merger.disconnect();\n\t\treturn this;\n\t}\n}\n","import { connectSeries } from \"../core/Connect\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Param } from \"../core/context/Param\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Signal, SignalOptions } from \"./Signal\";\n\n/**\n * Add a signal and a number or two signals. When no value is\n * passed into the constructor, Tone.Add will sum input and `addend`\n * If a value is passed into the constructor, the it will be added to the input.\n *\n * @example\n * import { Add, Signal } from \"tone\";\n * const signal = new Signal(2);\n * // add a signal and a scalar\n * const add = new Add(2);\n * signal.connect(add);\n * // the output of add equals 4\n * @example\n * import { Add, Signal } from \"tone\";\n * // Add two signal inputs\n * const add = new Add();\n * const sig0 = new Signal(3).connect(add);\n * const sig1 = new Signal(4).connect(add.addend);\n * // the output of add equals 7.\n * @category Signal\n */\nexport class Add extends Signal {\n\n\toverride = false;\n\n\treadonly name: string = \"Add\";\n\n\t/**\n\t * the summing node\n\t */\n\tprivate _sum: Gain = new Gain({ context: this.context });\n\treadonly input = this._sum;\n\treadonly output = this._sum;\n\n\t/**\n\t * The value which is added to the input signal\n\t */\n\treadonly addend: Param<\"number\"> = this._param;\n\n\t/**\n\t * @param value If no value is provided, Tone.Add will sum the first  and second inputs.\n\t */\n\tconstructor(value?: number);\n\tconstructor(options?: Partial<SignalOptions<\"number\">>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Add.getDefaults(), arguments, [\"value\"])));\n\n\t\tconnectSeries(this._constantSource, this._sum);\n\t}\n\n\tstatic getDefaults(): SignalOptions<\"number\"> {\n\t\treturn Object.assign(Signal.getDefaults(), {\n\t\t\tvalue: 0,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._sum.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../core/context/Gain\";\nimport { Param } from \"../core/context/Param\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Signal, SignalOptions } from \"./Signal\";\n\n/**\n * Multiply two incoming signals. Or, if a number is given in the constructor,\n * multiplies the incoming signal by that value.\n *\n * @example\n * import { Multiply, Signal } from \"tone\";\n * // multiply two signals\n * const mult = new Multiply();\n * const sigA = new Signal(3);\n * const sigB = new Signal(4);\n * sigA.connect(mult);\n * sigB.connect(mult.factor);\n * // output of mult is 12.\n * @example\n * import { Multiply, Signal } from \"tone\";\n * // multiply a signal and a number\n * const mult = new Multiply(10);\n * const sig = new Signal(2).connect(mult);\n * // the output of mult is 20.\n * @category Signal\n */\nexport class Multiply<TypeName extends \"number\" | \"positive\" = \"number\"> extends Signal<TypeName> {\n\n\treadonly name: string = \"Multiply\";\n\n\t/**\n\t * Indicates if the value should be overridden on connection\n\t */\n\treadonly override = false;\n\n\t/**\n\t * the input gain node\n\t */\n\tprivate _mult: Gain = new Gain({ context: this.context });\n\n\t/**\n\t * The multiplicand input.\n\t */\n\tinput = this._mult;\n\n\t/**\n\t * The product of the input and {@link factor}\n\t */\n\toutput = this._mult;\n\n\t/**\n\t * The multiplication factor. Can be set directly or a signal can be connected to it.\n\t */\n\tfactor: Param<TypeName>;\n\n\t/**\n\t * @param value Constant value to multiple\n\t */\n\tconstructor(value?: number);\n\tconstructor(options?: Partial<SignalOptions<TypeName>>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Multiply.getDefaults(), arguments, [\"value\"])));\n\t\tconst options = optionsFromArguments(Multiply.getDefaults(), arguments, [\"value\"]);\n\n\t\tthis.factor = this._param = this._mult.gain as unknown as Param<TypeName>;\n\t\tthis.factor.setValueAtTime(options.value, 0);\n\t}\n\n\tstatic getDefaults(): SignalOptions<any> {\n\t\treturn Object.assign(Signal.getDefaults(), {\n\t\t\tvalue: 0,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._mult.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { Multiply } from \"./Multiply\";\nimport { SignalOperator } from \"./SignalOperator\";\n\n/**\n * Negate the incoming signal. i.e. an input signal of 10 will output -10\n *\n * @example\n * import { Negate, Signal } from \"tone\";\n * const neg = new Negate();\n * const sig = new Signal(-2).connect(neg);\n * // output of neg is positive 2.\n * @category Signal\n */\nexport class Negate extends SignalOperator<ToneAudioNodeOptions> {\n\n\treadonly name: string = \"Negate\";\n\n\t/**\n\t * negation is done by multiplying by -1\n\t */\n\tprivate _multiply: Multiply = new Multiply({\n\t\tcontext: this.context,\n\t\tvalue: -1,\n\t});\n\n\t/**\n\t * The input and output are equal to the multiply node\n\t */\n\tinput = this._multiply;\n\toutput = this._multiply;\n\n\t/**\n\t * clean up\n\t * @returns {Negate} this\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._multiply.dispose();\n\t\treturn this;\n\t}\n}\n","import { connectSeries } from \"../core/Connect\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Param } from \"../core/context/Param\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Negate } from \"../signal/Negate\";\nimport { Signal, SignalOptions } from \"../signal/Signal\";\n\n/**\n * Subtract the signal connected to the input is subtracted from the signal connected\n * The subtrahend.\n *\n * @example\n * import { Signal, Subtract } from \"tone\";\n * // subtract a scalar from a signal\n * const sub = new Subtract(1);\n * const sig = new Signal(4).connect(sub);\n * // the output of sub is 3.\n * @example\n * import { Signal, Subtract } from \"tone\";\n * // subtract two signals\n * const sub = new Subtract();\n * const sigA = new Signal(10);\n * const sigB = new Signal(2.5);\n * sigA.connect(sub);\n * sigB.connect(sub.subtrahend);\n * // output of sub is 7.5\n * @category Signal\n */\nexport class Subtract extends Signal {\n\n\toverride = false;\n\n\treadonly name: string = \"Subtract\";\n\n\t/**\n\t * the summing node\n\t */\n\tprivate _sum: Gain = new Gain({ context: this.context });\n\treadonly input: Gain = this._sum;\n\treadonly output: Gain = this._sum;\n\n\t/**\n\t * Negate the input of the second input before connecting it to the summing node.\n\t */\n\tprivate _neg: Negate = new Negate({ context: this.context });\n\n\t/**\n\t * The value which is subtracted from the main signal\n\t */\n\tsubtrahend: Param<\"number\"> = this._param;\n\n\t/**\n\t * @param value The value to subtract from the incoming signal. If the value\n\t *             is omitted, it will subtract the second signal from the first.\n\t */\n\tconstructor(value?: number);\n\tconstructor(options?: Partial<SignalOptions<\"number\">>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Subtract.getDefaults(), arguments, [\"value\"])));\n\n\t\tconnectSeries(this._constantSource, this._neg, this._sum);\n\t}\n\n\tstatic getDefaults(): SignalOptions<\"number\"> {\n\t\treturn Object.assign(Signal.getDefaults(), {\n\t\t\tvalue: 0,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._neg.dispose();\n\t\tthis._sum.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Merge } from \"./Merge\";\nimport { Add } from \"../../signal/Add\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Subtract } from \"../../signal/Subtract\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n\nexport type MidSideMergeOptions = ToneAudioNodeOptions;\n\n/**\n * MidSideMerge merges the mid and side signal after they've been separated by [[MidSideMerge]]\n * ```\n * Mid = (Left+Right)/sqrt(2);   // obtain mid-signal from left and right\n * Side = (Left-Right)/sqrt(2);   // obtain side-signal from left and righ\n * ```\n */\nexport class MidSideMerge extends ToneAudioNode<MidSideMergeOptions> {\n\t\n\treadonly name: string = \"MidSideMerge\";\n\n\t/**\n\t * There is no input, connect sources to either [[mid]] or [[side]] inputs.\n\t */\n\treadonly input: undefined;\n\n\t/**\n\t * The merged signal\n\t */\n\treadonly output: Merge;\n\n\t/**\n\t * Merge the incoming signal into left and right channels\n\t */\n\tprivate _merge: Merge;\n\n\t/**\n\t * The \"mid\" input.\n\t */\n\treadonly mid: ToneAudioNode;\n\n\t/**\n\t * The \"side\" input.\n\t */\n\treadonly side: ToneAudioNode;\n\n\t/**\n\t * Recombine the mid/side into Left\n\t */\n\tprivate _left: Add;\n\n\t/**\n\t * Recombine the mid/side into Right\n\t */\n\tprivate _right: Subtract;\n\n\t/**\n\t * Multiply the right by sqrt(1/2)\n\t */\n\tprivate _leftMult: Multiply;\n\n\t/**\n\t * Multiply the left by sqrt(1/2)\n\t */\n\tprivate _rightMult: Multiply;\n\t\n\tconstructor(options?: Partial<MidSideMergeOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(MidSideMerge.getDefaults(), arguments));\n\t\tthis.mid = new Gain({ context: this.context });\n\t\tthis.side = new Gain({ context: this.context });\n\t\tthis._left = new Add({ context: this.context });\n\t\tthis._leftMult = new Multiply({\n\t\t\tcontext: this.context, \n\t\t\tvalue: Math.SQRT1_2\n\t\t});\n\t\tthis._right = new Subtract({ context: this.context });\n\t\tthis._rightMult = new Multiply({\n\t\t\tcontext: this.context, \n\t\t\tvalue: Math.SQRT1_2\n\t\t});\n\t\tthis._merge = this.output = new Merge({ context: this.context });\n\n\t\tthis.mid.fan(this._left);\n\t\tthis.side.connect(this._left.addend);\n\t\tthis.mid.connect(this._right);\n\t\tthis.side.connect(this._right.subtrahend);\n\t\tthis._left.connect(this._leftMult);\n\t\tthis._right.connect(this._rightMult);\n\t\tthis._leftMult.connect(this._merge, 0, 0);\n\t\tthis._rightMult.connect(this._merge, 0, 1);\n\t}\n\t\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.mid.dispose();\n\t\tthis.side.dispose();\n\t\tthis._leftMult.dispose();\n\t\tthis._rightMult.dispose();\n\t\tthis._left.dispose();\n\t\tthis._right.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n\ninterface SplitOptions extends ToneAudioNodeOptions {\n\tchannels: number;\n}\n\n/**\n * Split splits an incoming signal into the number of given channels.\n *\n * @example\n * import { Split } from \"tone\";\n * \n * const split = new Split();\n * // stereoSignal.connect(split);\n * @category Component\n */\nexport class Split extends ToneAudioNode<SplitOptions> {\n\treadonly name: string = \"Split\";\n\n\t/**\n\t * The splitting node\n\t */\n\tprivate _splitter: ChannelSplitterNode;\n\n\treadonly input: ChannelSplitterNode;\n\treadonly output: ChannelSplitterNode;\n\n\t/**\n\t * @param channels The number of channels to merge.\n\t */\n\tconstructor(channels?: number);\n\tconstructor(options?: Partial<SplitOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Split.getDefaults(), arguments, [\"channels\"]));\n\t\tconst options = optionsFromArguments(Split.getDefaults(), arguments, [\"channels\"]);\n\n\t\tthis._splitter = this.input = this.output = this.context.createChannelSplitter(options.channels);\n\t\tthis._internalChannels = [this._splitter];\n\t}\n\n\tstatic getDefaults(): SplitOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tchannels: 2,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._splitter.disconnect();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Split } from \"./Split\";\nimport { Add } from \"../../signal/Add\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Subtract } from \"../../signal/Subtract\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n\nexport type MidSideSplitOptions = ToneAudioNodeOptions;\n\n/**\n * Mid/Side processing separates the the 'mid' signal (which comes out of both the left and the right channel)\n * and the 'side' (which only comes out of the the side channels).\n * ```\n * Mid = (Left+Right)/sqrt(2);   // obtain mid-signal from left and right\n * Side = (Left-Right)/sqrt(2);   // obtain side-signal from left and right\n * ```\n */\nexport class MidSideSplit extends ToneAudioNode<MidSideSplitOptions> {\n\t\n\treadonly name: string = \"MidSideSplit\";\n\n\treadonly input: Split;\n\n\t/**\n\t * There is no output node, use either [[mid]] or [[side]] outputs.\n\t */\n\treadonly output: undefined;\n\t/**\n\t * Split the incoming signal into left and right channels\n\t */\n\tprivate _split: Split;\n\n\t/**\n\t * Sums the left and right channels\n\t */\n\tprivate _midAdd: Add;\n\n\t/**\n\t * Subtract left and right channels. \n\t */\n\tprivate _sideSubtract: Subtract;\n\n\t/**\n\t * The \"mid\" output. `(Left+Right)/sqrt(2)`\n\t */\n\treadonly mid: ToneAudioNode;\n\n\t/**\n\t * The \"side\" output. `(Left-Right)/sqrt(2)`\n\t */\n\treadonly side: ToneAudioNode;\n\t\n\tconstructor(options?: Partial<MidSideSplitOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(MidSideSplit.getDefaults(), arguments));\n\n\t\tthis._split = this.input = new Split({\n\t\t\tchannels: 2,\n\t\t\tcontext: this.context\n\t\t});\n\t\tthis._midAdd = new Add({ context: this.context });\n\t\tthis.mid = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tvalue: Math.SQRT1_2,\n\t\t});\n\t\tthis._sideSubtract = new Subtract({ context: this.context });\n\t\tthis.side = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tvalue: Math.SQRT1_2,\n\t\t});\n\n\t\tthis._split.connect(this._midAdd, 0);\n\t\tthis._split.connect(this._midAdd.addend, 1);\n\t\tthis._split.connect(this._sideSubtract, 0);\n\t\tthis._split.connect(this._sideSubtract.subtrahend, 1);\n\t\tthis._midAdd.connect(this.mid);\n\t\tthis._sideSubtract.connect(this.side);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.mid.dispose();\n\t\tthis.side.dispose();\n\t\tthis._midAdd.dispose();\n\t\tthis._sideSubtract.dispose();\n\t\tthis._split.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { connectSeries, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Cents, Frequency, GainFactor, Positive } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { isNumber } from \"../../core/util/TypeCheck\";\nimport { Signal } from \"../../signal/Signal\";\n\nexport type FilterRollOff = -12 | -24 | -48 | -96;\n\nexport interface FilterOptions extends ToneAudioNodeOptions {\n\ttype: BiquadFilterType;\n\tfrequency: Frequency;\n\trolloff: FilterRollOff;\n\tQ: Positive;\n\tdetune: Cents;\n\tgain: GainFactor;\n}\n\n/**\n * Tone.Filter is a filter which allows for all of the same native methods\n * as the [BiquadFilterNode](http://webaudio.github.io/web-audio-api/#the-biquadfilternode-interface).\n * Tone.Filter has the added ability to set the filter rolloff at -12\n * (default), -24 and -48.\n * @example\n * import { Filter, Noise } from \"tone\";\n * \n * const filter = new Filter(1500, \"highpass\").toDestination();\n * filter.frequency.rampTo(20000, 10);\n * const noise = new Noise().connect(filter).start();\n * @category Component\n */\nexport class Filter extends ToneAudioNode<FilterOptions> {\n\n\treadonly name: string = \"Filter\";\n\n\treadonly input = new Gain({ context: this.context });\n\treadonly output = new Gain({ context: this.context });\n\tprivate _filters: BiquadFilterNode[] = [];\n\n\t/**\n\t * the rolloff value of the filter\n\t */\n\tprivate _rolloff!: FilterRollOff;\n\tprivate _type: BiquadFilterType;\n\n\t/**\n\t * The Q or Quality of the filter\n\t */\n\treadonly Q: Signal<\"positive\">;\n\n\t/**\n\t * The cutoff frequency of the filter.\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * The detune parameter\n\t */\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * The gain of the filter, only used in certain filter types\n\t */\n\treadonly gain: Signal<\"decibels\">;\n\n\t/**\n\t * @param frequency The cutoff frequency of the filter.\n\t * @param type The type of filter.\n\t * @param rolloff The drop in decibels per octave after the cutoff frequency\n\t */\n\tconstructor(frequency?: Frequency, type?: BiquadFilterType, rolloff?: FilterRollOff);\n\tconstructor(options?: Partial<FilterOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Filter.getDefaults(), arguments, [\"frequency\", \"type\", \"rolloff\"]));\n\t\tconst options = optionsFromArguments(Filter.getDefaults(), arguments, [\"frequency\", \"type\", \"rolloff\"]);\n\n\t\tthis._filters = [];\n\n\t\tthis.Q = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.Q,\n\t\t});\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t});\n\t\tthis.detune = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune,\n\t\t});\n\t\tthis.gain = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"decibels\",\n\t\t\tvalue: options.gain,\n\t\t});\n\t\tthis._type = options.type;\n\t\tthis.rolloff = options.rolloff;\n\t\treadOnly(this, [\"detune\", \"frequency\", \"gain\", \"Q\"]);\n\t}\n\n\tstatic getDefaults(): FilterOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tQ: 1,\n\t\t\tdetune: 0,\n\t\t\tfrequency: 350,\n\t\t\tgain: 0,\n\t\t\trolloff: -12 as FilterRollOff,\n\t\t\ttype: \"lowpass\" as BiquadFilterType,\n\t\t});\n\t}\n\n\t/**\n\t * The type of the filter. Types: \"lowpass\", \"highpass\",\n\t * \"bandpass\", \"lowshelf\", \"highshelf\", \"notch\", \"allpass\", or \"peaking\".\n\t */\n\tget type(): BiquadFilterType {\n\t\treturn this._type;\n\t}\n\tset type(type: BiquadFilterType) {\n\t\tconst types: BiquadFilterType[] = [\"lowpass\", \"highpass\", \"bandpass\",\n\t\t\t\"lowshelf\", \"highshelf\", \"notch\", \"allpass\", \"peaking\"];\n\t\tthis.assert(types.indexOf(type) !== -1, `Invalid filter type: ${type}`);\n\t\tthis._type = type;\n\t\tthis._filters.forEach(filter => filter.type = type);\n\t}\n\n\t/**\n\t * The rolloff of the filter which is the drop in db\n\t * per octave. Implemented internally by cascading filters.\n\t * Only accepts the values -12, -24, -48 and -96.\n\t */\n\tget rolloff(): FilterRollOff {\n\t\treturn this._rolloff;\n\t}\n\tset rolloff(rolloff) {\n\t\tconst rolloffNum = isNumber(rolloff) ? rolloff : parseInt(rolloff, 10) as FilterRollOff;\n\t\tconst possibilities = [-12, -24, -48, -96];\n\t\tlet cascadingCount = possibilities.indexOf(rolloffNum);\n\t\t// check the rolloff is valid\n\t\tthis.assert(cascadingCount !== -1, `rolloff can only be ${possibilities.join(\", \")}`);\n\t\tcascadingCount += 1;\n\n\t\tthis._rolloff = rolloffNum;\n\t\tthis.input.disconnect();\n\t\tthis._filters.forEach(filter => filter.disconnect());\n\n\t\tthis._filters = new Array(cascadingCount);\n\t\tfor (let count = 0; count < cascadingCount; count++) {\n\t\t\tconst filter = this.context.createBiquadFilter();\n\t\t\tfilter.type = this._type;\n\t\t\tthis.frequency.connect(filter.frequency);\n\t\t\tthis.detune.connect(filter.detune);\n\t\t\tthis.Q.connect(filter.Q);\n\t\t\tthis.gain.connect(filter.gain);\n\t\t\tthis._filters[count] = filter;\n\t\t}\n\t\tthis._internalChannels = this._filters;\n\t\tconnectSeries(this.input, ...this._internalChannels, this.output);\n\t}\n\n\t/**\n\t * Get the frequency response curve. This curve represents how the filter\n\t * responses to frequencies between 20hz-20khz.\n\t * @param  len The number of values to return\n\t * @return The frequency response curve between 20-20kHz\n\t */\n\tgetFrequencyResponse(len: number = 128): Float32Array {\n\t\t// start with all 1s\n\t\tconst totalResponse = new Float32Array(len).map(() => 1);\n\t\tconst freqValues = new Float32Array(len);\n\t\tfor (let i = 0; i < len; i++) {\n\t\t\tconst norm = Math.pow(i / len, 2);\n\t\t\tconst freq = norm * (20000 - 20) + 20;\n\t\t\tfreqValues[i] = freq;\n\t\t}\n\t\tconst magValues = new Float32Array(len);\n\t\tconst phaseValues = new Float32Array(len);\n\t\tthis._filters.forEach(() => {\n\t\t\tconst filterClone = this.context.createBiquadFilter();\n\t\t\tfilterClone.type = this._type;\n\t\t\tfilterClone.Q.value = this.Q.value;\n\t\t\tfilterClone.frequency.value = this.frequency.value as number;\n\t\t\tfilterClone.gain.value = this.gain.value as number;\n\t\t\tfilterClone.getFrequencyResponse(freqValues, magValues, phaseValues);\n\t\t\tmagValues.forEach((val, i) => {\n\t\t\t\ttotalResponse[i] *= val;\n\t\t\t});\n\t\t});\n\t\treturn totalResponse;\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._filters.forEach(filter => {\n\t\t\tfilter.disconnect();\n\t\t});\n\t\twritable(this, [\"detune\", \"frequency\", \"gain\", \"Q\"]);\n\t\tthis.frequency.dispose();\n\t\tthis.Q.dispose();\n\t\tthis.detune.dispose();\n\t\tthis.gain.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Frequency, Positive } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Filter } from \"../filter/Filter\";\n\ninterface MultibandSplitOptions extends ToneAudioNodeOptions {\n\tQ: Positive;\n\tlowFrequency: Frequency;\n\thighFrequency: Frequency;\n}\n\n/**\n * Split the incoming signal into three bands (low, mid, high)\n * with two crossover frequency controls.\n * ```\n *            +----------------------+\n *          +-> input < lowFrequency +------------------> low\n *          | +----------------------+\n *          |\n *          | +--------------------------------------+\n * input ---+-> lowFrequency < input < highFrequency +--> mid\n *          | +--------------------------------------+\n *          |\n *          | +-----------------------+\n *          +-> highFrequency < input +-----------------> high\n *            +-----------------------+\n * ```\n * @category Component\n */\nexport class MultibandSplit extends ToneAudioNode<MultibandSplitOptions> {\n\n\treadonly name: string = \"MultibandSplit\";\n\n\t/**\n\t * the input\n\t */\n\treadonly input = new Gain({ context: this.context });\n\n\t/**\n\t * no output node, use either low, mid or high outputs\n\t */\n\treadonly output = undefined;\n\n\t/**\n\t * The low band.\n\t */\n\treadonly low = new Filter({\n\t\tcontext: this.context,\n\t\tfrequency: 0,\n\t\ttype: \"lowpass\",\n\t});\n\n\t/**\n\t * the lower filter of the mid band\n\t */\n\tprivate _lowMidFilter = new Filter({\n\t\tcontext: this.context,\n\t\tfrequency: 0,\n\t\ttype: \"highpass\",\n\t});\n\n\t/**\n\t * The mid band output.\n\t */\n\treadonly mid = new Filter({\n\t\tcontext: this.context,\n\t\tfrequency: 0,\n\t\ttype: \"lowpass\",\n\t});\n\n\t/**\n\t * The high band output.\n\t */\n\treadonly high = new Filter({\n\t\tcontext: this.context,\n\t\tfrequency: 0,\n\t\ttype: \"highpass\",\n\t});\n\n\t/**\n\t * The low/mid crossover frequency.\n\t */\n\treadonly lowFrequency: Signal<\"frequency\">;\n\n\t/**\n\t * The mid/high crossover frequency.\n\t */\n\treadonly highFrequency: Signal<\"frequency\">;\n\n\tprotected _internalChannels = [this.low, this.mid, this.high];\n\n\t/**\n\t * The Q or Quality of the filter\n\t */\n\treadonly Q: Signal<\"positive\">;\n\n\t/**\n\t * @param lowFrequency the low/mid crossover frequency\n\t * @param highFrequency the mid/high crossover frequency\n\t */\n\tconstructor(lowFrequency?: Frequency, highFrequency?: Frequency);\n\tconstructor(options?: Partial<MultibandSplitOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(MultibandSplit.getDefaults(), arguments, [\"lowFrequency\", \"highFrequency\"]));\n\t\tconst options = optionsFromArguments(MultibandSplit.getDefaults(), arguments, [\"lowFrequency\", \"highFrequency\"]);\n\n\t\tthis.lowFrequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.lowFrequency,\n\t\t});\n\n\t\tthis.highFrequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.highFrequency,\n\t\t});\n\n\t\tthis.Q = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.Q,\n\t\t});\n\n\t\tthis.input.fan(this.low, this.high);\n\t\tthis.input.chain(this._lowMidFilter, this.mid);\n\t\t// the frequency control signal\n\t\tthis.lowFrequency.fan(this.low.frequency, this._lowMidFilter.frequency);\n\t\tthis.highFrequency.fan(this.mid.frequency, this.high.frequency);\n\t\t// the Q value\n\t\tthis.Q.connect(this.low.Q);\n\t\tthis.Q.connect(this._lowMidFilter.Q);\n\t\tthis.Q.connect(this.mid.Q);\n\t\tthis.Q.connect(this.high.Q);\n\n\t\treadOnly(this, [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n\t}\n\n\tstatic getDefaults(): MultibandSplitOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tQ: 1,\n\t\t\thighFrequency: 2500,\n\t\t\tlowFrequency: 400,\n\t\t});\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\twritable(this, [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n\t\tthis.low.dispose();\n\t\tthis._lowMidFilter.dispose();\n\t\tthis.mid.dispose();\n\t\tthis.high.dispose();\n\t\tthis.lowFrequency.dispose();\n\t\tthis.highFrequency.dispose();\n\t\tthis.Q.dispose();\n\t\treturn this;\n\t}\n\n}\n","import { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Decibels, Positive, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\n\ninterface CompressorOptions extends ToneAudioNodeOptions {\n\tattack: Time;\n\tknee: Decibels;\n\tratio: Positive;\n\trelease: Time;\n\tthreshold: Decibels;\n}\n\n/**\n * Compressor is a thin wrapper around the Web Audio\n * [DynamicsCompressorNode](http://webaudio.github.io/web-audio-api/#the-dynamicscompressornode-interface).\n * Compression reduces the volume of loud sounds or amplifies quiet sounds\n * by narrowing or \"compressing\" an audio signal's dynamic range.\n * Read more on [Wikipedia](https://en.wikipedia.org/wiki/Dynamic_range_compression).\n * @example\n * import { Compressor } from \"tone\";\n * const comp = new Compressor(-30, 3);\n * @category Component\n */\nexport class Compressor extends ToneAudioNode<CompressorOptions> {\n\n\treadonly name: string = \"Compressor\";\n\n\t/**\n\t * the compressor node\n\t */\n\tprivate _compressor: DynamicsCompressorNode = this.context.createDynamicsCompressor();\n\treadonly input = this._compressor;\n\treadonly output = this._compressor;\n\n\t/**\n\t * The decibel value above which the compression will start taking effect.\n\t * @min -100\n\t * @max 0\n\t */\n\treadonly threshold: Param<\"decibels\">;\n\n\t/**\n\t * The amount of time (in seconds) to reduce the gain by 10dB.\n\t * @min 0\n\t * @max 1\n\t */\n\treadonly attack: Param<\"time\">;\n\t\n\t/**\n\t * The amount of time (in seconds) to increase the gain by 10dB.\n\t * @min 0\n\t * @max 1\n\t */\n\treadonly release: Param<\"time\">;\n\n\t/**\n\t * A decibel value representing the range above the threshold where the\n\t * curve smoothly transitions to the \"ratio\" portion.\n\t * @min 0\n\t * @max 40\n\t */\n\treadonly knee: Param<\"decibels\">;\n\n\t/**\n\t * The amount of dB change in input for a 1 dB change in output.\n\t * @min 1\n\t * @max 20\n\t */\n\treadonly ratio: Param<\"positive\">;\n\n\t/**\n\t * @param threshold The value above which the compression starts to be applied.\n\t * @param ratio The gain reduction ratio.\n\t */\n\tconstructor(threshold?: Decibels, ratio?: Positive);\n\tconstructor(options?: Partial<CompressorOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Compressor.getDefaults(), arguments, [\"threshold\", \"ratio\"]));\n\t\tconst options = optionsFromArguments(Compressor.getDefaults(), arguments, [\"threshold\", \"ratio\"]);\n\n\t\tthis.threshold = new Param({\n\t\t\tminValue: this._compressor.threshold.minValue,\n\t\t\tmaxValue: this._compressor.threshold.maxValue,\n\t\t\tcontext: this.context,\n\t\t\tconvert: false,\n\t\t\tparam: this._compressor.threshold,\n\t\t\tunits: \"decibels\",\n\t\t\tvalue: options.threshold,\n\t\t});\n\t\t\n\t\tthis.attack = new Param({\n\t\t\tminValue: this._compressor.attack.minValue,\n\t\t\tmaxValue: this._compressor.attack.maxValue,\n\t\t\tcontext: this.context,\n\t\t\tparam: this._compressor.attack,\n\t\t\tunits: \"time\",\n\t\t\tvalue: options.attack,\n\t\t});\n\t\t\n\t\tthis.release = new Param({\n\t\t\tminValue: this._compressor.release.minValue,\n\t\t\tmaxValue: this._compressor.release.maxValue,\n\t\t\tcontext: this.context,\n\t\t\tparam: this._compressor.release,\n\t\t\tunits: \"time\",\n\t\t\tvalue: options.release,\n\t\t});\n\t\t\n\t\tthis.knee = new Param({\n\t\t\tminValue: this._compressor.knee.minValue,\n\t\t\tmaxValue: this._compressor.knee.maxValue,\n\t\t\tcontext: this.context,\n\t\t\tconvert: false,\n\t\t\tparam: this._compressor.knee,\n\t\t\tunits: \"decibels\",\n\t\t\tvalue: options.knee,\n\t\t});\n\t\t\n\t\tthis.ratio = new Param({\n\t\t\tminValue: this._compressor.ratio.minValue,\n\t\t\tmaxValue: this._compressor.ratio.maxValue,\n\t\t\tcontext: this.context,\n\t\t\tconvert: false,\n\t\t\tparam: this._compressor.ratio,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.ratio,\n\t\t});\n\n\t\t// set the defaults\n\t\treadOnly(this, [\"knee\", \"release\", \"attack\", \"ratio\", \"threshold\"]);\n\t}\n\n\tstatic getDefaults(): CompressorOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tattack: 0.003,\n\t\t\tknee: 30,\n\t\t\tratio: 12,\n\t\t\trelease: 0.25,\n\t\t\tthreshold: -24,\n\t\t});\n\t}\n\n\t/**\n\t * A read-only decibel value for metering purposes, representing the current amount of gain\n\t * reduction that the compressor is applying to the signal. If fed no signal the value will be 0 (no gain reduction).\n\t */\n\tget reduction(): number {\n\t\treturn this._compressor.reduction;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._compressor.disconnect();\n\t\tthis.attack.dispose();\n\t\tthis.release.dispose();\n\t\tthis.threshold.dispose();\n\t\tthis.ratio.dispose();\n\t\tthis.knee.dispose();\n\t\treturn this;\n\t}\n}\n","import { InputNode, OutputNode } from \"../../core/context/ToneAudioNode\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { NormalRange, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { isArray, isObject, isString } from \"../../core/util/TypeCheck\";\nimport { connectSignal, Signal } from \"../../signal/Signal\";\nimport { OfflineContext } from \"../../core/context/OfflineContext\";\nimport { assertRange } from \"../../core/util/Debug\";\nimport { EQ } from \"../../core/util/Math\";\n\ntype BasicEnvelopeCurve = \"linear\" | \"exponential\";\ntype InternalEnvelopeCurve = BasicEnvelopeCurve | number[];\nexport type EnvelopeCurve = EnvelopeCurveName | number[];\n\nexport interface EnvelopeOptions extends ToneAudioNodeOptions {\n\tattack: Time;\n\tdecay: Time;\n\tsustain: NormalRange;\n\trelease: Time;\n\tattackCurve: EnvelopeCurve;\n\treleaseCurve: EnvelopeCurve;\n\tdecayCurve: BasicEnvelopeCurve;\n}\n\n/**\n * Envelope is an [ADSR](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope)\n * envelope generator. Envelope outputs a signal which\n * can be connected to an AudioParam or Tone.Signal.\n * ```\n *           /\\\n *          /  \\\n *         /    \\\n *        /      \\\n *       /        \\___________\n *      /                     \\\n *     /                       \\\n *    /                         \\\n *   /                           \\\n * ```\n *\n * @example\n * import { Envelope, Gain } from \"tone\";\n * // an amplitude envelope\n * const gainNode = new Gain();\n * const env = new Envelope({\n * \tattack: 0.1,\n * \tdecay: 0.2,\n * \tsustain: 1,\n * \trelease: 0.8,\n * });\n * env.connect(gainNode.gain);\n * @category Component\n */\nexport class Envelope extends ToneAudioNode<EnvelopeOptions> {\n\n\treadonly name: string = \"Envelope\";\n\t\n\t/**\n\t * Private container for the attack value\n\t */\n\tprivate _attack!: Time;\n\n\t/**\n\t * Private holder of the decay time\n\t */\n\tprivate _decay!: Time;\n\n\t/**\n\t * private holder for the sustain value\n\t */\n\tprivate _sustain!: NormalRange;\n\n\t/**\n\t * private holder for the release value\n\t */\n\tprivate _release!: Time;\n\n\t/**\n\t * The automation curve type for the attack\n\t */\n\tprivate _attackCurve!: InternalEnvelopeCurve;\n\n\t/**\n\t * The automation curve type for the decay\n\t */\n\tprivate _decayCurve!: BasicEnvelopeCurve;\n\n\t/**\n\t * The automation curve type for the release\n\t */\n\tprivate _releaseCurve!: InternalEnvelopeCurve;\n\n\t/**\n\t * the signal which is output.\n\t */\n\tprotected _sig: Signal<\"normalRange\"> = new Signal({\n\t\tcontext: this.context,\n\t\tvalue: 0,\n\t});\n\n\t/**\n\t * The output signal of the envelope\n\t */\n\toutput: OutputNode = this._sig;\n\n\t/**\n\t * Envelope has no input\n\t */\n\tinput: InputNode | undefined = undefined;\n\n\t/**\n\t * @param attack The amount of time it takes for the envelope to go from\n\t *                        0 to it's maximum value.\n\t * @param decay\tThe period of time after the attack that it takes for the envelope\n\t *                      \tto fall to the sustain value. Value must be greater than 0.\n\t * @param sustain\tThe percent of the maximum value that the envelope rests at until\n\t *                               \tthe release is triggered.\n\t * @param release\tThe amount of time after the release is triggered it takes to reach 0.\n\t *                        \tValue must be greater than 0.\n\t */\n\tconstructor(attack?: Time, decay?: Time, sustain?: NormalRange, release?: Time);\n\tconstructor(options?: Partial<EnvelopeOptions>)\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Envelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]));\n\t\tconst options = optionsFromArguments(Envelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]);\n\n\t\tthis.attack = options.attack;\n\t\tthis.decay = options.decay;\n\t\tthis.sustain = options.sustain;\n\t\tthis.release = options.release;\n\t\tthis.attackCurve = options.attackCurve;\n\t\tthis.releaseCurve = options.releaseCurve;\n\t\tthis.decayCurve = options.decayCurve;\n\t}\n\n\tstatic getDefaults(): EnvelopeOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tattack: 0.01,\n\t\t\tattackCurve: \"linear\" as EnvelopeCurveName,\n\t\t\tdecay: 0.1,\n\t\t\tdecayCurve: \"exponential\" as BasicEnvelopeCurve,\n\t\t\trelease: 1,\n\t\t\treleaseCurve: \"exponential\" as EnvelopeCurveName,\n\t\t\tsustain: 0.5,\n\t\t});\n\t}\n\n\t/**\n\t * Read the current value of the envelope. Useful for\n\t * synchronizing visual output to the envelope.\n\t */\n\tget value(): NormalRange {\n\t\treturn this.getValueAtTime(this.now());\n\t}\n\n\t/**\n\t * When triggerAttack is called, the attack time is the amount of\n\t * time it takes for the envelope to reach it's maximum value.\n\t * ```\n\t *           /\\\n\t *          /X \\\n\t *         /XX  \\\n\t *        /XXX   \\\n\t *       /XXXX    \\___________\n\t *      /XXXXX                \\\n\t *     /XXXXXX                 \\\n\t *    /XXXXXXX                  \\\n\t *   /XXXXXXXX                   \\\n\t * ```\n\t * @min 0\n\t * @max 2\n\t */\n\tget attack(): Time {\n\t\treturn this._attack;\n\t}\n\tset attack(time) {\n\t\tassertRange(this.toSeconds(time), 0);\n\t\tthis._attack = time;\n\t}\n\n\t/**\n\t * After the attack portion of the envelope, the value will fall\n\t * over the duration of the decay time to it's sustain value.\n\t * ```\n\t *           /\\\n\t *          / X\\\n\t *         /  XX\\\n\t *        /   XXX\\\n\t *       /    XXXX\\___________\n\t *      /     XXXXX           \\\n\t *     /      XXXXX            \\\n\t *    /       XXXXX             \\\n\t *   /        XXXXX              \\\n\t * ```\n\t * @min 0\n\t * @max 2\n\t */\n\tget decay(): Time {\n\t\treturn this._decay;\n\t}\n\tset decay(time) {\n\t\tassertRange(this.toSeconds(time), 0);\n\t\tthis._decay = time;\n\t}\n\n\t/**\n\t * The sustain value is the value\n\t * which the envelope rests at after triggerAttack is\n\t * called, but before triggerRelease is invoked.\n\t * ```\n\t *           /\\\n\t *          /  \\\n\t *         /    \\\n\t *        /      \\\n\t *       /        \\___________\n\t *      /          XXXXXXXXXXX\\\n\t *     /           XXXXXXXXXXX \\\n\t *    /            XXXXXXXXXXX  \\\n\t *   /             XXXXXXXXXXX   \\\n\t * ```\n\t */\n\tget sustain(): NormalRange {\n\t\treturn this._sustain;\n\t}\n\tset sustain(val) {\n\t\tassertRange(this.toSeconds(val), 0, 1);\n\t\tthis._sustain = val;\n\t}\n\n\t/**\n\t * After triggerRelease is called, the envelope's\n\t * value will fall to it's miminum value over the\n\t * duration of the release time.\n\t * ```\n\t *           /\\\n\t *          /  \\\n\t *         /    \\\n\t *        /      \\\n\t *       /        \\___________\n\t *      /                    X\\\n\t *     /                     XX\\\n\t *    /                      XXX\\\n\t *   /                       XXXX\\\n\t * ```\n\t * @min 0\n\t * @max 5\n\t */\n\tget release(): Time {\n\t\treturn this._release;\n\t}\n\tset release(time) {\n\t\tassertRange(this.toSeconds(time), 0);\n\t\tthis._release = time;\n\t}\n\n\t/**\n\t * Get the curve\n\t * @param  curve\n\t * @param  direction  In/Out\n\t * @return The curve name\n\t */\n\tprivate _getCurve(curve: InternalEnvelopeCurve, direction: EnvelopeDirection): EnvelopeCurve {\n\t\tif (isString(curve)) {\n\t\t\treturn curve;\n\t\t} else {\n\t\t\t// look up the name in the curves array\n\t\t\tlet curveName: EnvelopeCurveName;\n\t\t\tfor (curveName in EnvelopeCurves) {\n\t\t\t\tif (EnvelopeCurves[curveName][direction] === curve) {\n\t\t\t\t\treturn curveName;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// return the custom curve\n\t\t\treturn curve;\n\t\t}\n\t}\n\n\t/**\n\t * Assign a the curve to the given name using the direction\n\t * @param  name\n\t * @param  direction In/Out\n\t * @param  curve\n\t */\n\tprivate _setCurve(\n\t\tname: \"_attackCurve\" | \"_decayCurve\" | \"_releaseCurve\",\n\t\tdirection: EnvelopeDirection,\n\t\tcurve: EnvelopeCurve,\n\t): void {\n\t\t// check if it's a valid type\n\t\tif (isString(curve) && Reflect.has(EnvelopeCurves, curve)) {\n\t\t\tconst curveDef = EnvelopeCurves[curve];\n\t\t\tif (isObject(curveDef)) {\n\t\t\t\tif (name !== \"_decayCurve\") {\n\t\t\t\t\tthis[name] = curveDef[direction];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis[name] = curveDef;\n\t\t\t}\n\t\t} else if (isArray(curve) && name !== \"_decayCurve\") {\n\t\t\tthis[name] = curve;\n\t\t} else {\n\t\t\tthrow new Error(\"Envelope: invalid curve: \" + curve);\n\t\t}\n\t}\n\n\t/**\n\t * The shape of the attack.\n\t * Can be any of these strings:\n\t * * \"linear\"\n\t * * \"exponential\"\n\t * * \"sine\"\n\t * * \"cosine\"\n\t * * \"bounce\"\n\t * * \"ripple\"\n\t * * \"step\"\n\t *\n\t * Can also be an array which describes the curve. Values\n\t * in the array are evenly subdivided and linearly\n\t * interpolated over the duration of the attack.\n\t * @example\n\t * import { Envelope } from \"tone\";\n\t * const env = new Envelope();\n\t * env.attackCurve = \"linear\";\n\t * @example\n\t * import { Envelope } from \"tone\";\n\t * const env = new Envelope();\n\t * // can also be an array\n\t * env.attackCurve = [0, 0.2, 0.3, 0.4, 1];\n\t */\n\tget attackCurve(): EnvelopeCurve {\n\t\treturn this._getCurve(this._attackCurve, \"In\");\n\t}\n\tset attackCurve(curve) {\n\t\tthis._setCurve(\"_attackCurve\", \"In\", curve);\n\t}\n\n\t/**\n\t * The shape of the release. See the attack curve types.\n\t * @example\n\t * import { Envelope } from \"tone\";\n\t * const env = new Envelope();\n\t * env.releaseCurve = \"linear\";\n\t */\n\tget releaseCurve(): EnvelopeCurve {\n\t\treturn this._getCurve(this._releaseCurve, \"Out\");\n\t}\n\tset releaseCurve(curve) {\n\t\tthis._setCurve(\"_releaseCurve\", \"Out\", curve);\n\t}\n\n\t/**\n\t * The shape of the decay either \"linear\" or \"exponential\"\n\t * @example\n\t * import { Envelope } from \"tone\";\n\t * const env = new Envelope();\n\t * env.decayCurve = \"linear\";\n\t */\n\tget decayCurve(): BasicEnvelopeCurve {\n\t\treturn this._decayCurve;\n\t}\n\tset decayCurve(curve) {\n\t\tthis.assert([\"linear\", \"exponential\"].some(c => c === curve), `Invalid envelope curve: ${curve}`);\n\t\tthis._decayCurve = curve;\n\t}\n\n\t/**\n\t * Trigger the attack/decay portion of the ADSR envelope.\n\t * @param  time When the attack should start.\n\t * @param velocity The velocity of the envelope scales the vales.\n\t *                             number between 0-1\n\t * @example\n\t * import { AmplitudeEnvelope, Oscillator } from \"tone\";\n\t * const env = new AmplitudeEnvelope().toDestination();\n\t * const osc = new Oscillator().connect(env).start();\n\t * // trigger the attack 0.5 seconds from now with a velocity of 0.2\n\t * env.triggerAttack(\"+0.5\", 0.2);\n\t */\n\ttriggerAttack(time?: Time, velocity: NormalRange = 1): this {\n\t\tthis.log(\"triggerAttack\", time, velocity);\n\t\ttime = this.toSeconds(time);\n\t\tconst originalAttack = this.toSeconds(this.attack);\n\t\tlet attack = originalAttack;\n\t\tconst decay = this.toSeconds(this.decay);\n\t\t// check if it's not a complete attack\n\t\tconst currentValue = this.getValueAtTime(time);\n\t\tif (currentValue > 0) {\n\t\t\t// subtract the current value from the attack time\n\t\t\tconst attackRate = 1 / attack;\n\t\t\tconst remainingDistance = 1 - currentValue;\n\t\t\t// the attack is now the remaining time\n\t\t\tattack = remainingDistance / attackRate;\n\t\t}\n\t\t// attack\n\t\tif (attack === 0) {\n\t\t\t// case where the attack time is 0 should set instantly\n\t\t\tthis._sig.setValueAtTime(velocity, time);\n\t\t} else if (this._attackCurve === \"linear\") {\n\t\t\tthis._sig.linearRampTo(velocity, attack, time);\n\t\t} else if (this._attackCurve === \"exponential\") {\n\t\t\tthis._sig.targetRampTo(velocity, attack, time);\n\t\t} else {\n\t\t\tthis._sig.cancelAndHoldAtTime(time);\n\t\t\tlet curve = this._attackCurve;\n\t\t\t// find the starting position in the curve\n\t\t\tfor (let i = 1; i < curve.length; i++) {\n\t\t\t\t// the starting index is between the two values\n\t\t\t\tif (curve[i - 1] <= currentValue && currentValue <= curve[i]) {\n\t\t\t\t\tcurve = this._attackCurve.slice(i);\n\t\t\t\t\t// the first index is the current value\n\t\t\t\t\tcurve[0] = currentValue;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._sig.setValueCurveAtTime(curve, time, attack, velocity);\n\t\t}\n\t\t// decay\n\t\tif (decay) {\n\t\t\tconst decayValue = velocity * this.sustain;\n\t\t\tconst decayStart = time + attack;\n\t\t\tthis.log(\"decay\", decayStart);\n\t\t\tif (this._decayCurve === \"linear\") {\n\t\t\t\tthis._sig.linearRampTo(decayValue, decay, decayStart + this.sampleTime);\n\t\t\t} else {\n\t\t\t\tthis.assert(this._decayCurve === \"exponential\",\n\t\t\t\t\t`decayCurve can only be \"linear\" or \"exponential\", got ${this._decayCurve}`);\n\t\t\t\tthis._sig.exponentialApproachValueAtTime(decayValue, decayStart, decay);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Triggers the release of the envelope.\n\t * @param  time When the release portion of the envelope should start.\n\t * @example\n\t * import { AmplitudeEnvelope, Oscillator } from \"tone\";\n\t * const env = new AmplitudeEnvelope().toDestination();\n\t * const osc = new Oscillator().connect(env).start();\n\t * env.triggerAttack();\n\t * // trigger the release half a second after the attack\n\t * env.triggerRelease(\"+0.5\");\n\t */\n\ttriggerRelease(time?: Time): this {\n\t\tthis.log(\"triggerRelease\", time);\n\t\ttime = this.toSeconds(time);\n\t\tconst currentValue = this.getValueAtTime(time);\n\t\tif (currentValue > 0) {\n\t\t\tconst release = this.toSeconds(this.release);\n\t\t\tif (EQ(release, 0)) {\n\t\t\t\tthis._sig.setValueAtTime(0, time);\n\t\t\t} else if (this._releaseCurve === \"linear\") {\n\t\t\t\tthis._sig.linearRampTo(0, release, time);\n\t\t\t} else if (this._releaseCurve === \"exponential\") {\n\t\t\t\tthis._sig.targetRampTo(0, release, time);\n\t\t\t} else {\n\t\t\t\tthis.assert(isArray(this._releaseCurve), \"releaseCurve must be either 'linear', 'exponential' or an array\");\n\t\t\t\tthis._sig.cancelAndHoldAtTime(time);\n\t\t\t\tthis._sig.setValueCurveAtTime(this._releaseCurve, time, release, currentValue);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the scheduled value at the given time. This will\n\t * return the unconverted (raw) value.\n\t */\n\tgetValueAtTime(time: Time): NormalRange {\n\t\treturn this._sig.getValueAtTime(time);\n\t}\n\n\t/**\n\t * triggerAttackRelease is shorthand for triggerAttack, then waiting\n\t * some duration, then triggerRelease.\n\t * @param duration The duration of the sustain.\n\t * @param time When the attack should be triggered.\n\t * @param velocity The velocity of the envelope.\n\t * @example\n\t * import { AmplitudeEnvelope, Oscillator } from \"tone\";\n\t * const env = new AmplitudeEnvelope().toDestination();\n\t * const osc = new Oscillator().connect(env).start();\n\t * // trigger the release 0.5 seconds after the attack\n\t * env.triggerAttackRelease(0.5);\n\t */\n\ttriggerAttackRelease(duration: Time, time?: Time, velocity: NormalRange = 1): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis.triggerAttack(time, velocity);\n\t\tthis.triggerRelease(time + this.toSeconds(duration));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Cancels all scheduled envelope changes after the given time.\n\t */\n\tcancel(after?: Time): this {\n\t\tthis._sig.cancelScheduledValues(this.toSeconds(after));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Connect the envelope to a destination node.\n\t */\n\tconnect(destination: InputNode, outputNumber: number = 0, inputNumber: number = 0): this {\n\t\tconnectSignal(this, destination, outputNumber, inputNumber);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Render the envelope curve to an array of the given length. \n\t * Good for visualizing the envelope curve\n\t */\n\tasync asArray(length: number = 1024): Promise<Float32Array> {\n\t\tconst duration = length / this.context.sampleRate;\n\t\tconst context = new OfflineContext(1, duration, this.context.sampleRate);\n\t\t// normalize the ADSR for the given duration with 20% sustain time\n\t\tconst attackPortion = this.toSeconds(this.attack) + this.toSeconds(this.decay);\n\t\tconst envelopeDuration = attackPortion + this.toSeconds(this.release);\n\t\tconst sustainTime = envelopeDuration * 0.1;\n\t\tconst totalDuration = envelopeDuration + sustainTime;\n\t\t// @ts-ignore\n\t\tconst clone = new this.constructor(Object.assign(this.get(), { \n\t\t\tattack: duration * this.toSeconds(this.attack) / totalDuration,\n\t\t\tdecay: duration * this.toSeconds(this.decay) / totalDuration,\n\t\t\trelease: duration * this.toSeconds(this.release) / totalDuration,\n\t\t\tcontext\n\t\t})) as Envelope;\n\t\tclone._sig.toDestination();\n\t\tclone.triggerAttackRelease(duration * (attackPortion + sustainTime) / totalDuration, 0);\n\t\tconst buffer = await context.render();\n\t\treturn buffer.getChannelData(0);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._sig.dispose();\n\t\treturn this;\n\t}\n}\n\ninterface EnvelopeCurveObject {\n\tIn: number[];\n\tOut: number[];\n}\n\ntype EnvelopeDirection = keyof EnvelopeCurveObject;\n\ninterface EnvelopeCurveMap {\n\tlinear: \"linear\";\n\texponential: \"exponential\";\n\tbounce: EnvelopeCurveObject;\n\tcosine: EnvelopeCurveObject;\n\tsine: EnvelopeCurveObject;\n\tripple: EnvelopeCurveObject;\n\tstep: EnvelopeCurveObject;\n}\n\ntype EnvelopeCurveName = keyof EnvelopeCurveMap;\n\n/**\n * Generate some complex envelope curves.\n */\nconst EnvelopeCurves: EnvelopeCurveMap = (() => {\n\n\tconst curveLen = 128;\n\n\tlet i: number;\n\tlet k: number;\n\n\t// cosine curve\n\tconst cosineCurve: number[] = [];\n\tfor (i = 0; i < curveLen; i++) {\n\t\tcosineCurve[i] = Math.sin((i / (curveLen - 1)) * (Math.PI / 2));\n\t}\n\n\t// ripple curve\n\tconst rippleCurve: number[] = [];\n\tconst rippleCurveFreq = 6.4;\n\tfor (i = 0; i < curveLen - 1; i++) {\n\t\tk = (i / (curveLen - 1));\n\t\tconst sineWave = Math.sin(k * (Math.PI * 2) * rippleCurveFreq - Math.PI / 2) + 1;\n\t\trippleCurve[i] = sineWave / 10 + k * 0.83;\n\t}\n\trippleCurve[curveLen - 1] = 1;\n\n\t// stairs curve\n\tconst stairsCurve: number[] = [];\n\tconst steps = 5;\n\tfor (i = 0; i < curveLen; i++) {\n\t\tstairsCurve[i] = Math.ceil((i / (curveLen - 1)) * steps) / steps;\n\t}\n\n\t// in-out easing curve\n\tconst sineCurve: number[] = [];\n\tfor (i = 0; i < curveLen; i++) {\n\t\tk = i / (curveLen - 1);\n\t\tsineCurve[i] = 0.5 * (1 - Math.cos(Math.PI * k));\n\t}\n\n\t// a bounce curve\n\tconst bounceCurve: number[] = [];\n\tfor (i = 0; i < curveLen; i++) {\n\t\tk = i / (curveLen - 1);\n\t\tconst freq = Math.pow(k, 3) * 4 + 0.2;\n\t\tconst val = Math.cos(freq * Math.PI * 2 * k);\n\t\tbounceCurve[i] = Math.abs(val * (1 - k));\n\t}\n\n\t/**\n\t * Invert a value curve to make it work for the release\n\t */\n\tfunction invertCurve(curve: number[]): number[] {\n\t\tconst out = new Array(curve.length);\n\t\tfor (let j = 0; j < curve.length; j++) {\n\t\t\tout[j] = 1 - curve[j];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t * reverse the curve\n\t */\n\tfunction reverseCurve(curve: number[]): number[] {\n\t\treturn curve.slice(0).reverse();\n\t}\n\n\t/**\n\t * attack and release curve arrays\n\t */\n\treturn {\n\t\tbounce: {\n\t\t\tIn: invertCurve(bounceCurve),\n\t\t\tOut: bounceCurve,\n\t\t},\n\t\tcosine: {\n\t\t\tIn: cosineCurve,\n\t\t\tOut: reverseCurve(cosineCurve),\n\t\t},\n\t\texponential: \"exponential\" as \"exponential\",\n\t\tlinear: \"linear\" as \"linear\",\n\t\tripple: {\n\t\t\tIn: rippleCurve,\n\t\t\tOut: invertCurve(rippleCurve),\n\t\t},\n\t\tsine: {\n\t\t\tIn: sineCurve,\n\t\t\tOut: invertCurve(sineCurve),\n\t\t},\n\t\tstep: {\n\t\t\tIn: stairsCurve,\n\t\t\tOut: invertCurve(stairsCurve),\n\t\t},\n\t};\n})();\n","import { Gain } from \"../../core/context/Gain\";\nimport { NormalRange, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Envelope, EnvelopeOptions } from \"./Envelope\";\n\n/**\n * AmplitudeEnvelope is a Tone.Envelope connected to a gain node.\n * Unlike Tone.Envelope, which outputs the envelope's value, AmplitudeEnvelope accepts\n * an audio signal as the input and will apply the envelope to the amplitude\n * of the signal.\n * Read more about ADSR Envelopes on [Wikipedia](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope).\n *\n * @example\n * import { AmplitudeEnvelope, Oscillator } from \"tone\";\n * const ampEnv = new AmplitudeEnvelope({\n * \tattack: 0.1,\n * \tdecay: 0.2,\n * \tsustain: 1.0,\n * \trelease: 0.8\n * }).toDestination();\n * // create an oscillator and connect it\n * const osc = new Oscillator().connect(ampEnv).start();\n * // trigger the envelopes attack and release \"8t\" apart\n * ampEnv.triggerAttackRelease(\"8t\");\n * @category Component\n */\nexport class AmplitudeEnvelope extends Envelope {\n\n\treadonly name: string = \"AmplitudeEnvelope\";\n\n\tprivate _gainNode: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\toutput: Gain = this._gainNode;\n\tinput: Gain = this._gainNode;\n\n\t/**\n\t * @param attack The amount of time it takes for the envelope to go from 0 to it's maximum value.\n\t * @param decay\tThe period of time after the attack that it takes for the envelope\n\t *                      \tto fall to the sustain value. Value must be greater than 0.\n\t * @param sustain\tThe percent of the maximum value that the envelope rests at until\n\t *                               \tthe release is triggered.\n\t * @param release\tThe amount of time after the release is triggered it takes to reach 0.\n\t *                        \tValue must be greater than 0.\n\t */\n\tconstructor(attack?: Time, decay?: Time, sustain?: NormalRange, release?: Time);\n\tconstructor(options?: Partial<EnvelopeOptions>)\n\tconstructor() {\n\t\tsuper(optionsFromArguments(AmplitudeEnvelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]));\n\t\tthis._sig.connect(this._gainNode.gain);\n\t\tthis.output = this._gainNode;\n\t\tthis.input = this._gainNode;\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._gainNode.dispose();\n\t\treturn this;\n\t}\n}\n","import { InputNode, OutputNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Add } from \"./Add\";\nimport { Multiply } from \"./Multiply\";\nimport { SignalOperator } from \"./SignalOperator\";\n\nexport interface ScaleOptions extends ToneAudioNodeOptions {\n\tmin: number;\n\tmax: number;\n}\n\n/**\n * Performs a linear scaling on an input signal.\n * Scales a NormalRange input to between\n * outputMin and outputMax.\n *\n * @example\n * import { Scale, Signal } from \"tone\";\n * const scale = new Scale(50, 100);\n * const signal = new Signal(0.5).connect(scale);\n * // the output of scale equals 75\n * @category Signal\n */\nexport class Scale<Options extends ScaleOptions = ScaleOptions> extends SignalOperator<Options> {\n\n\treadonly name: string = \"Scale\";\n\n\tinput: InputNode;\n\toutput: OutputNode;\n\n\t/**\n\t * Hold the multiple\n\t */\n\tprotected _mult: Multiply;\n\n\t/**\n\t * Hold the adder\n\t */\n\tprotected _add: Add;\n\n\t/**\n\t * Private reference to the min value\n\t */\n\tprivate _min: number;\n\n\t/**\n\t * Private reference to the max value\n\t */\n\tprivate _max: number;\n\n\t/**\n\t * @param min The output value when the input is 0.\n\t * @param max The output value when the input is 1.\n\t */\n\tconstructor(min?: number, max?: number);\n\tconstructor(options?: Partial<ScaleOptions>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Scale.getDefaults(), arguments, [\"min\", \"max\"])));\n\t\tconst options = optionsFromArguments(Scale.getDefaults(), arguments, [\"min\", \"max\"]);\n\n\t\tthis._mult = this.input = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.max - options.min,\n\t\t});\n\t\n\t\tthis._add = this.output = new Add({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.min,\n\t\t});\n\n\t\tthis._min = options.min;\n\t\tthis._max = options.max;\n\n\t\tthis.input.connect(this.output);\n\t}\n\n\tstatic getDefaults(): ScaleOptions {\n\t\treturn Object.assign(SignalOperator.getDefaults(), {\n\t\t\tmax: 1,\n\t\t\tmin: 0,\n\t\t});\n\t}\n\n\t/**\n\t * The minimum output value. This number is output when the value input value is 0.\n\t */\n\tget min(): number {\n\t\treturn this._min;\n\t}\n\tset min(min) {\n\t\tthis._min = min;\n\t\tthis._setRange();\n\t}\n\n\t/**\n\t * The maximum output value. This number is output when the value input value is 1.\n\t */\n\tget max(): number {\n\t\treturn this._max;\n\t}\n\tset max(max) {\n\t\tthis._max = max;\n\t\tthis._setRange();\n\t}\n\n\t/**\n\t * set the values\n\t */\n\tprivate _setRange(): void {\n\t\tthis._add.value = this._min;\n\t\tthis._mult.value = this._max - this._min;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._add.dispose();\n\t\tthis._mult.dispose();\n\t\treturn this;\n\t}\n}\n","import { WaveShaper, WaveShaperMappingFn } from \"./WaveShaper\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { SignalOperator } from \"./SignalOperator\";\nimport { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\n\nexport interface PowOptions extends ToneAudioNodeOptions {\n\tvalue: number;\n}\n\n/**\n * Pow applies an exponent to the incoming signal. The incoming signal must be AudioRange [-1, 1]\n *\n * @example\n * import { Pow, Signal } from \"tone\";\n * const pow = new Pow(2);\n * const sig = new Signal(0.5).connect(pow);\n * // output of pow is 0.25. \n * @category Signal\n */\nexport class Pow extends SignalOperator<PowOptions> {\n\t\n\treadonly name: string = \"Pow\";\n\t\n\tprivate _exponent: number;\n\n\tprivate _exponentScaler: WaveShaper;\n\n\tinput: WaveShaper;\n\n\toutput: WaveShaper;\n\t\n\t/**\n\t * @param value Constant exponent value to use\n\t */\n\tconstructor(value?: number);\n\tconstructor(options?: Partial<PowOptions>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Pow.getDefaults(), arguments, [\"value\"])));\n\t\tconst options = optionsFromArguments(Pow.getDefaults(), arguments, [\"value\"]);\n\n\t\tthis._exponentScaler = this.input = this.output = new WaveShaper({\n\t\t\tcontext: this.context,\n\t\t\tmapping: this._expFunc(options.value),\n\t\t\tlength: 8192,\n\t\t});\n\n\t\tthis._exponent = options.value;\n\t}\n\n\tstatic getDefaults(): PowOptions {\n\t\treturn Object.assign(SignalOperator.getDefaults(), {\n\t\t\tvalue: 1,\n\t\t});\n\t}\n\n\t/**\n\t * the function which maps the waveshaper\n\t * @param exponent exponent value\n\t */\n\tprivate _expFunc(exponent: number): WaveShaperMappingFn {\n\t\treturn (val: number) => {\n\t\t\treturn Math.pow(Math.abs(val), exponent);\n\t\t};\n\t}\n\n\t/**\n\t * The value of the exponent.\n\t */\n\tget value(): number {\n\t\treturn this._exponent;\n\t}\n\tset value(exponent: number) {\n\t\tthis._exponent = exponent;\n\t\tthis._exponentScaler.setMap(this._expFunc(this._exponent));\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._exponentScaler.dispose();\n\t\treturn this;\n\t}\n}\n","import { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Frequency, Hertz, NormalRange, Positive, Time } from \"../../core/type/Units\";\nimport { Envelope, EnvelopeOptions } from \"./Envelope\";\nimport { Scale } from \"../../signal/Scale\";\nimport { Pow } from \"../../signal/Pow\";\n\nexport interface FrequencyEnvelopeOptions extends EnvelopeOptions {\n\tbaseFrequency: Frequency;\n\toctaves: number;\n\texponent: number;\n}\n/**\n * FrequencyEnvelope is an [[Envelope]] which ramps between [[baseFrequency]]\n * and [[octaves]]. It can also have an optional [[exponent]] to adjust the curve\n * which it ramps. \n * @example\n * import { FrequencyEnvelope, Oscillator } from \"tone\";\n * const oscillator = new Oscillator().toDestination().start();\n * const freqEnv = new FrequencyEnvelope({\n * \tattack: 0.2,\n * \tbaseFrequency: \"C2\",\n * \toctaves: 4\n * });\n * freqEnv.connect(oscillator.frequency);\n * freqEnv.triggerAttack();\n */\nexport class FrequencyEnvelope extends Envelope {\n\n\treadonly name: string = \"FrequencyEnvelope\";\n\n\t/**\n\t * Private reference to the base frequency as a number\n\t */\n\tprivate _baseFrequency: Hertz;\n\n\t/**\n\t * The number of octaves\n\t */\n\tprivate _octaves: Positive;\n\n\t/**\n\t * Internal scaler from 0-1 to the final output range\n\t */\n\tprivate _scale: Scale;\n\n\t/**\n\t * Apply a power curve to the output\n\t */\n\tprivate _exponent: Pow;\n\n\t/**\n\t * @param attack\tthe attack time in seconds\n\t * @param decay\t\tthe decay time in seconds\n\t * @param sustain \ta percentage (0-1) of the full amplitude\n\t * @param release\tthe release time in seconds\n\t */\n\tconstructor(attack?: Time, decay?: Time, sustain?: NormalRange, release?: Time);\n\tconstructor(options?: Partial<FrequencyEnvelopeOptions>)\n\tconstructor() {\n\t\tsuper(optionsFromArguments(FrequencyEnvelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]));\n\t\tconst options = optionsFromArguments(FrequencyEnvelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]);\n\n\t\tthis._octaves = options.octaves;\n\t\tthis._baseFrequency = this.toFrequency(options.baseFrequency);\n\n\t\tthis._exponent = this.input = new Pow({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.exponent\n\t\t});\n\t\tthis._scale = this.output = new Scale({\n\t\t\tcontext: this.context,\n\t\t\tmin: this._baseFrequency,\n\t\t\tmax: this._baseFrequency * Math.pow(2, this._octaves),\n\t\t});\n\t\tthis._sig.chain(this._exponent, this._scale);\n\t}\n\n\tstatic getDefaults(): FrequencyEnvelopeOptions {\n\t\treturn Object.assign(Envelope.getDefaults(), {\n\t\t\tbaseFrequency: 200,\n\t\t\texponent: 1,\n\t\t\toctaves: 4,\n\t\t});\n\t}\n\n\t/**\n\t * The envelope's minimum output value. This is the value which it\n\t * starts at.\n\t */\n\tget baseFrequency(): Frequency {\n\t\treturn this._baseFrequency;\n\t}\n\tset baseFrequency(min) {\n\t\tthis._baseFrequency = this.toFrequency(min);\n\t\tthis._scale.min = this._baseFrequency;\n\t\t// update the max value when the min changes\n\t\tthis.octaves = this._octaves;\n\t}\n\n\t/**\n\t * The number of octaves above the baseFrequency that the\n\t * envelope will scale to.\n\t */\n\tget octaves(): Positive {\n\t\treturn this._octaves;\n\t}\n\tset octaves(octaves: Positive) {\n\t\tthis._octaves = octaves;\n\t\tthis._scale.max = this._baseFrequency * Math.pow(2, octaves);\n\t}\n\n\t/**\n\t * The envelope's exponent value.\n\t */\n\tget exponent(): number {\n\t\treturn this._exponent.value;\n\t}\n\tset exponent(exponent) {\n\t\tthis._exponent.value = exponent;\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._exponent.dispose();\n\t\tthis._scale.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Decibels, Frequency } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { MultibandSplit } from \"../channel/MultibandSplit\";\n\ninterface EQ3Options extends ToneAudioNodeOptions {\n\tlow: Decibels;\n\tmid: Decibels;\n\thigh: Decibels;\n\tlowFrequency: Frequency;\n\thighFrequency: Frequency;\n}\n\n/**\n * EQ3 provides 3 equalizer bins: Low/Mid/High. \n * @category Component\n */\nexport class EQ3 extends ToneAudioNode<EQ3Options> {\n\n\treadonly name: string = \"EQ3\";\n\n\t/**\n\t * the input\n\t */\n\treadonly input: MultibandSplit;\n\n\t/**\n\t * the output\n\t */\n\treadonly output = new Gain({ context: this.context });\n\n\t/**\n\t * Splits the input into three outputs\n\t */\n\tprivate _multibandSplit: MultibandSplit;\n\n\t/**\n\t * The gain for the lower signals\n\t */\n\tprivate _lowGain: Gain<\"decibels\">;\n\n\t/**\n\t * The gain for the mid signals\n\t */\n\tprivate _midGain: Gain<\"decibels\">;\n\n\t/**\n\t * The gain for the high signals\n\t */\n\tprivate _highGain: Gain<\"decibels\">;\n\n\t/**\n\t * The gain in decibels of the low part\n\t */\n\treadonly low: Param<\"decibels\">;\n\n\t/**\n\t * The gain in decibels of the mid part\n\t */\n\treadonly mid: Param<\"decibels\">;\n\n\t/**\n\t * The gain in decibels of the high part\n\t */\n\treadonly high: Param<\"decibels\">;\n\n\t/**\n\t * The Q value for all of the filters.\n\t */\n\treadonly Q: Signal<\"positive\">;\n\n\t/**\n\t * The low/mid crossover frequency.\n\t */\n\treadonly lowFrequency: Signal<\"frequency\">;\n\n\t/**\n\t * The mid/high crossover frequency.\n\t */\n\treadonly highFrequency: Signal<\"frequency\">;\n\n\tprotected _internalChannels: ToneAudioNode[] = [];\n\n\tconstructor(lowLevel?: Decibels, midLevel?: Decibels, highLevel?: Decibels);\n\tconstructor(options: Partial<EQ3Options>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(EQ3.getDefaults(), arguments, [\"low\", \"mid\", \"high\"]));\n\t\tconst options = optionsFromArguments(EQ3.getDefaults(), arguments, [\"low\", \"mid\", \"high\"]);\n\n\t\tthis.input = this._multibandSplit = new MultibandSplit({\n\t\t\tcontext: this.context,\n\t\t\thighFrequency: options.highFrequency,\n\t\t\tlowFrequency: options.lowFrequency,\n\t\t});\n\n\t\tthis._lowGain = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: options.low,\n\t\t\tunits: \"decibels\",\n\t\t});\n\n\t\tthis._midGain = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: options.mid,\n\t\t\tunits: \"decibels\",\n\t\t});\n\n\t\tthis._highGain = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: options.high,\n\t\t\tunits: \"decibels\",\n\t\t});\n\n\t\tthis.low = this._lowGain.gain;\n\t\tthis.mid = this._midGain.gain;\n\t\tthis.high = this._highGain.gain;\n\t\tthis.Q = this._multibandSplit.Q;\n\t\tthis.lowFrequency = this._multibandSplit.lowFrequency;\n\t\tthis.highFrequency\t= this._multibandSplit.highFrequency;\n\n\t\t// the frequency bands\n\t\tthis._multibandSplit.low.chain(this._lowGain, this.output);\n\t\tthis._multibandSplit.mid.chain(this._midGain, this.output);\n\t\tthis._multibandSplit.high.chain(this._highGain, this.output);\n\n\t\treadOnly(this, [\"low\", \"mid\", \"high\", \"lowFrequency\", \"highFrequency\"]);\n\t\tthis._internalChannels = [this._multibandSplit];\n\t}\n\n\tstatic getDefaults(): EQ3Options {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\thigh: 0,\n\t\t\thighFrequency: 2500,\n\t\t\tlow: 0,\n\t\t\tlowFrequency: 400,\n\t\t\tmid: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\twritable(this, [\"low\", \"mid\", \"high\", \"lowFrequency\", \"highFrequency\"]);\n\t\tthis._multibandSplit.dispose();\n\t\tthis.lowFrequency.dispose();\n\t\tthis.highFrequency.dispose();\n\t\tthis._lowGain.dispose();\n\t\tthis._midGain.dispose();\n\t\tthis._highGain.dispose();\n\t\tthis.low.dispose();\n\t\tthis.mid.dispose();\n\t\tthis.high.dispose();\n\t\tthis.Q.dispose();\n\t\treturn this;\n\t}\n\n}\n","import { ToneAudioNode, ToneAudioNodeOptions } from \"./ToneAudioNode\";\nimport { noOp } from \"../util/Interface\";\n\nexport type ToneAudioWorkletOptions = ToneAudioNodeOptions;\n\nexport abstract class ToneAudioWorklet<Options extends ToneAudioWorkletOptions> extends ToneAudioNode<Options> {\n\n\treadonly name: string = \"ToneAudioWorklet\";\n\n\t/**\n\t * The processing node\n\t */\n\tprotected _worklet!: AudioWorkletNode;\n\n\t/**\n\t * The constructor options for the node\n\t */\n\tprotected workletOptions: Partial<AudioWorkletNodeOptions> = {};\n\n\t/**\n\t * The code which is run in the worklet\n\t */\n\tprotected abstract _audioWorklet(): string;\n\n\t/**\n\t * Get the name of the audio worklet\n\t */\n\tprotected abstract _audioWorkletName(): string;\n\t\n\t/**\n\t * Invoked when the module is loaded and the node is created\n\t */\n\tprotected abstract onReady(node: AudioWorkletNode): void;\n\n\t/**\n\t * Callback which is invoked when there is an error in the processing\n\t */\n\tonprocessorerror: (e: string) => void = noOp;\n\t\n\tconstructor(options: Options) {\n\t\tsuper(options);\n\n\t\tconst blobUrl = URL.createObjectURL(new Blob([this._audioWorklet()], { type: \"text/javascript\" }));\n\t\tconst name = this._audioWorkletName();\n\n\t\t// Register the processor\n\t\tthis.context.addAudioWorkletModule(blobUrl, name).then(() => {\n\t\t\t// create the worklet when it's read\n\t\t\tif (!this.disposed) {\n\t\t\t\tthis._worklet = this.context.createAudioWorkletNode(name, this.workletOptions);\n\t\t\t\tthis._worklet.onprocessorerror = this.onprocessorerror.bind(this);\n\t\t\t\tthis.onReady(this._worklet);\n\t\t\t}\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (this._worklet) {\n\t\t\tthis._worklet.disconnect();\n\t\t}\n\t\treturn this;\n\t}\n\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { Param } from \"../../core/context/Param\";\nimport { connectSeries, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { NormalRange, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, RecursivePartial } from \"../../core/util/Interface\";\nimport { ToneAudioWorklet } from \"../../core/context/ToneAudioWorklet\";\n\nexport interface FeedbackCombFilterOptions extends ToneAudioNodeOptions {\n\tdelayTime: Time;\n\tresonance: NormalRange;\n}\n\n/**\n * Comb filters are basic building blocks for physical modeling. Read more\n * about comb filters on [CCRMA's website](https://ccrma.stanford.edu/~jos/pasp/Feedback_Comb_Filters.html).\n * \n * This comb filter is implemented with the AudioWorkletNode which allows it to have feedback delays less than the \n * Web Audio processing block of 128 samples. There is a polyfill for browsers that don't yet support the \n * AudioWorkletNode, but it will add some latency and have slower performance than the AudioWorkletNode. \n * @category Component\n */\nexport class FeedbackCombFilter extends ToneAudioWorklet<FeedbackCombFilterOptions> {\n\t\n\treadonly name = \"FeedbackCombFilter\";\n\t\n\t/**\n\t * The amount of delay of the comb filter.\n\t */\n\treadonly delayTime: Param<\"time\">;\n\t\n\t/**\n\t * The amount of feedback of the delayed signal.\n\t */\n\treadonly resonance: Param<\"normalRange\">;\n\t\n\treadonly input: Gain;\n\treadonly output: Gain;\n\n\t/**\n\t * Default constructor options for the filter\n\t */\n\tprotected workletOptions: Partial<AudioWorkletNodeOptions> = {\n\t\tnumberOfInputs: 1,\n\t\tnumberOfOutputs: 1,\n\t}\n\t\n\t/**\n\t * @param delayTime The delay time of the filter.\n\t * @param resonance The amount of feedback the filter has.\n\t */\n\tconstructor(delayTime?: Time, resonance?: NormalRange);\n\tconstructor(options?: RecursivePartial<FeedbackCombFilterOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(FeedbackCombFilter.getDefaults(), arguments, [\"delayTime\", \"resonance\"]));\n\t\tconst options = optionsFromArguments(FeedbackCombFilter.getDefaults(), arguments, [\"delayTime\", \"resonance\"]);\n\n\t\tthis.input = new Gain({ context: this.context });\n\t\tthis.output = new Gain({ context: this.context });\n\n\t\tconst dummyGain = this.context.createGain();\n\n\t\tthis.delayTime = new Param<\"time\">({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.delayTime,\n\t\t\tunits: \"time\",\n\t\t\tminValue: 0,\n\t\t\tmaxValue: 1,\n\t\t\tparam: dummyGain.gain,\n\t\t\tswappable: true,\n\t\t});\n\t\t\n\t\tthis.resonance = new Param<\"normalRange\">({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.resonance,\n\t\t\tunits: \"normalRange\",\n\t\t\tparam: dummyGain.gain,\n\t\t\tswappable: true,\n\t\t});\n\n\t\treadOnly(this, [\"resonance\", \"delayTime\"]);\n\t}\n\n\tprotected _audioWorkletName(): string {\n\t\treturn \"feedback-comb-filter\";\n\t}\n\n\tprotected _audioWorklet(): string {\n\t\treturn /* javascript */` \n\t\t\tregisterProcessor(\"${this._audioWorkletName()}\", class extends AudioWorkletProcessor {\n\t\t\t\tstatic get parameterDescriptors() {\n\t\t\t\t\treturn [{\n\t\t\t\t\t\tname: \"delayTime\",\n\t\t\t\t\t\tdefaultValue: 0.1,\n\t\t\t\t\t\tminValue: 0,\n\t\t\t\t\t\tmaxValue: 1,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"feedback\",\n\t\t\t\t\t\tdefaultValue: 0.5,\n\t\t\t\t\t\tminValue: 0,\n\t\t\t\t\t\tmaxValue: 0.9999,\n\t\t\t\t\t}];\n\t\t\t\t}\n\t\t\t\n\t\t\t\tconstructor(options) {\n\t\t\t\t\tsuper(options);\n\t\t\t\t\tthis.delayBuffer = new Float32Array(sampleRate);\n\t\t\t\t\tthis.currentFrame = 0\n\t\t\t\t}\n\t\t\t\n\t\t\t\tgetParameter(name, index, parameters) {\n\t\t\t\t\tif (parameters[name].length > 1) {\n\t\t\t\t\t\treturn parameters[name][index];\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn parameters[name][0];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\n\t\t\t\tprocess(inputs, outputs, parameters) {\n\t\t\t\t\tconst input = inputs[0];\n\t\t\t\t\tconst output = outputs[0];\n\t\t\t\t\tthis.currentFrame += 128\n\t\t\t\t\tif (input && output) {\n\t\t\t\t\t\tconst delayLength = this.delayBuffer.length;\n\t\t\t\t\t\tinput.forEach((inputChannel, channelNum) => {\n\t\t\t\t\t\t\tinputChannel.forEach((value, index) => {\n\t\t\t\t\t\t\t\tconst delayTime = this.getParameter(\"delayTime\", index, parameters);\n\t\t\t\t\t\t\t\tconst feedback = this.getParameter(\"feedback\", index, parameters);\n\t\t\t\t\t\t\t\tconst delaySamples = Math.floor(delayTime * sampleRate);\n\t\t\t\t\t\t\t\tconst currentIndex = (this.currentFrame + index) % delayLength;\n\t\t\t\t\t\t\t\tconst delayedIndex = (this.currentFrame + index + delaySamples) % delayLength;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t// the current value to output\n\t\t\t\t\t\t\t\tconst currentValue = this.delayBuffer[currentIndex];\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t// write the current value to the delayBuffer in the future\n\t\t\t\t\t\t\t\tthis.delayBuffer[delayedIndex] = value + currentValue * feedback;\n\t\t\t\n\t\t\t\t\t\t\t\t// set all of the output channels to the same value\n\t\t\t\t\t\t\t\toutput[channelNum][index] = delaySamples > 0 ? currentValue : value;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t});\n\t\t`;\n\t}\n\n\t/**\n\t * The default parameters\n\t */\n\tstatic getDefaults(): FeedbackCombFilterOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tdelayTime: 0.1,\n\t\t\tresonance: 0.5,\n\t\t});\n\t}\n\n\tonReady(node: AudioWorkletNode) {\n\t\tconnectSeries(this.input, node, this.output);\n\t\t// @ts-ignore\n\t\tconst delayTime = node.parameters.get(\"delayTime\");\n\t\tthis.delayTime.setParam(delayTime);\n\t\t// @ts-ignore\n\t\tconst feedback = node.parameters.get(\"feedback\");\n\t\tthis.resonance.setParam(feedback);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.input.dispose();\n\t\tthis.output.dispose();\n\t\tthis.delayTime.dispose();\n\t\tthis.resonance.dispose();\n\t\treturn this;\n\t}\n}\n","import { Param } from \"../../core/context/Param\";\nimport { InputNode, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Frequency, NormalRange, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { RecursivePartial } from \"../../core/util/Interface\";\nimport { FeedbackCombFilter } from \"./FeedbackCombFilter\";\nimport { OnePoleFilter } from \"./OnePoleFilter\";\n\ninterface LowpassCombFilterOptions extends ToneAudioNodeOptions {\n\tdelayTime: Time;\n\tresonance: NormalRange;\n\tdampening: Frequency;\n}\n\n/**\n * A lowpass feedback comb filter. It is similar to\n * [[FeedbackCombFilter]], but includes a lowpass filter.\n * @category Component\n */\nexport class LowpassCombFilter extends ToneAudioNode<LowpassCombFilterOptions> {\n\n\treadonly name = \"LowpassCombFilter\";\n\n\t/**\n\t * The delay node\n\t */\n\tprivate _combFilter: FeedbackCombFilter;\n\n\t/**\n\t * The lowpass filter\n\t */\n\tprivate _lowpass: OnePoleFilter;\n\n\t/**\n\t * The delayTime of the comb filter.\n\t */\n\treadonly delayTime: Param<\"time\">;\n\n\t/**\n\t * The amount of feedback of the delayed signal.\n\t */\n\treadonly resonance: Param<\"normalRange\">;\n\n\treadonly input: InputNode;\n\treadonly output: OutputNode;\n\n\t/**\n\t * @param delayTime The delay time of the comb filter\n\t * @param resonance The resonance (feedback) of the comb filter\n\t * @param dampening The cutoff of the lowpass filter dampens the signal as it is fedback.\n\t */\n\tconstructor(delayTime?: Time, resonance?: NormalRange, dampening?: Frequency);\n\tconstructor(options?: RecursivePartial<LowpassCombFilterOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(LowpassCombFilter.getDefaults(), arguments, [\"delayTime\", \"resonance\", \"dampening\"]));\n\t\tconst options = optionsFromArguments(LowpassCombFilter.getDefaults(), arguments, [\"delayTime\", \"resonance\", \"dampening\"]);\n\n\t\tthis._combFilter = this.output = new FeedbackCombFilter({\n\t\t\tcontext: this.context,\n\t\t\tdelayTime: options.delayTime,\n\t\t\tresonance: options.resonance,\n\t\t});\n\t\tthis.delayTime = this._combFilter.delayTime;\n\t\tthis.resonance = this._combFilter.resonance;\n\n\t\tthis._lowpass = this.input = new OnePoleFilter({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.dampening,\n\t\t\ttype: \"lowpass\",\n\t\t});\n\n\t\t// connections\n\t\tthis._lowpass.connect(this._combFilter);\n\t}\n\n\tstatic getDefaults(): LowpassCombFilterOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tdampening: 3000,\n\t\t\tdelayTime: 0.1,\n\t\t\tresonance: 0.5,\n\t\t});\n\t}\n\t\n\t/**\n\t * The dampening control of the feedback\n\t */\n\tget dampening(): Frequency {\n\t\treturn this._lowpass.frequency;\n\t}\n\tset dampening(fq) {\n\t\tthis._lowpass.frequency = fq;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._combFilter.dispose();\n\t\tthis._lowpass.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { noOp } from \"../../core/util/Interface\";\n\nexport interface ConvolverOptions extends ToneAudioNodeOptions {\n\tonload: () => void;\n\tnormalize: boolean;\n\turl?: string | AudioBuffer | ToneAudioBuffer;\n}\n\n/**\n * Convolver is a wrapper around the Native Web Audio\n * [ConvolverNode](http://webaudio.github.io/web-audio-api/#the-convolvernode-interface).\n * Convolution is useful for reverb and filter emulation. Read more about convolution reverb on\n * [Wikipedia](https://en.wikipedia.org/wiki/Convolution_reverb).\n *\n * @example\n * import { Convolver } from \"tone\";\n * // initializing the convolver with an impulse response\n * const convolver = new Convolver(\"./path/to/ir.wav\").toDestination();\n * @category Component\n */\nexport class Convolver extends ToneAudioNode<ConvolverOptions> {\n\n\treadonly name: string = \"Convolver\";\n\t\n\t/**\n\t * The native ConvolverNode\n\t */\n\tprivate _convolver: ConvolverNode = this.context.createConvolver();\n\n\t/**\n\t * The Buffer belonging to the convolver\n\t */\n\tprivate _buffer: ToneAudioBuffer;\n\n\treadonly input: Gain;\n\treadonly output: Gain;\n\n\t/**\n\t * @param url The URL of the impulse response or the ToneAudioBuffer containing the impulse response.\n\t * @param onload The callback to invoke when the url is loaded.\n\t */\n\tconstructor(url?: string | AudioBuffer | ToneAudioBuffer, onload?: () => void);\n\tconstructor(options?: Partial<ConvolverOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Convolver.getDefaults(), arguments, [\"url\", \"onload\"]));\n\t\tconst options = optionsFromArguments(Convolver.getDefaults(), arguments, [\"url\", \"onload\"]);\n\n\t\tthis._buffer = new ToneAudioBuffer(options.url, buffer => {\n\t\t\tthis.buffer = buffer;\n\t\t\toptions.onload();\n\t\t});\n\n\t\tthis.input = new Gain({ context: this.context });\n\t\tthis.output = new Gain({ context: this.context });\n\n\t\t// set if it's already loaded, set it immediately\n\t\tif (this._buffer.loaded) {\n\t\t\tthis.buffer = this._buffer;\n\t\t}\n\n\t\t// initially set normalization\n\t\tthis.normalize = options.normalize;\n\n\t\t// connect it up\n\t\tthis.input.chain(this._convolver, this.output);\n\t}\n\n\tstatic getDefaults(): ConvolverOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tnormalize: true,\n\t\t\tonload: noOp,\n\t\t});\n\t}\n\n\t/**\n\t * Load an impulse response url as an audio buffer.\n\t * Decodes the audio asynchronously and invokes\n\t * the callback once the audio buffer loads.\n\t * @param url The url of the buffer to load. filetype support depends on the browser.\n\t */\n\tasync load(url: string): Promise<void> {\n\t\tthis.buffer = await this._buffer.load(url);\n\t}\n\n\t/**\n\t * The convolver's buffer\n\t */\n\tget buffer(): ToneAudioBuffer | null {\n\t\tif (this._buffer.length) {\n\t\t\treturn this._buffer;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\tset buffer(buffer) {\n\t\tif (buffer) {\n\t\t\tthis._buffer.set(buffer);\n\t\t}\n\t\t// if it's already got a buffer, create a new one\n\t\tif (this._convolver.buffer) {\n\t\t\t// disconnect the old one\n\t\t\tthis.input.disconnect();\n\t\t\tthis._convolver.disconnect();\n\t\t\t// create and connect a new one\n\t\t\tthis._convolver = this.context.createConvolver();\n\t\t\tthis.input.connect(this._convolver);\n\t\t}\n\t\tconst buff = this._buffer.get();\n\t\tthis._convolver.buffer = buff ? buff : null;\n\t}\n\n\t/**\n\t * The normalize property of the ConvolverNode interface is a boolean that\n\t * controls whether the impulse response from the buffer will be scaled by\n\t * an equal-power normalization when the buffer attribute is set, or not.\n\t */\n\tget normalize(): boolean {\n\t\treturn this._convolver.normalize;\n\t}\n\tset normalize(norm) {\n\t\tthis._convolver.normalize = norm;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._buffer.dispose();\n\t\tthis._convolver.disconnect();\n\t\treturn this;\n\t}\n}\n","import { connect, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { Decibels } from \"../core/type/Units\";\nimport { Volume } from \"../component\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Param } from \"../core/context/Param\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { isDefined, isNumber } from \"../core/util/TypeCheck\";\n\nexport interface UserMediaOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n\tmute: boolean;\n}\n/**\n * UserMedia uses MediaDevices.getUserMedia to open up and external microphone or audio input. \n * Check [MediaDevices API Support](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia)\n * to see which browsers are supported. Access to an external input\n * is limited to secure (HTTPS) connections.\n * @example\n * import { UserMedia } from \"tone\";\n * const mic = new UserMedia();\n * mic.open().then(() => {\n * \t// promise resolves when input is available\n * });\n * @category Source\n */\n\nexport class UserMedia extends ToneAudioNode<UserMediaOptions> {\n\n\treadonly name: string = \"UserMedia\";\n\n\treadonly input: undefined;\n\treadonly output: OutputNode;\n\n\t/**\n\t * The MediaStreamNode\n\t */\n\tprivate _mediaStream?: MediaStreamAudioSourceNode;\n\n\t/**\n\t * The media stream created by getUserMedia.\n\t */\n\tprivate _stream?: MediaStream;\n\n\t/**\n\t * The open device\n\t */\n\tprivate _device?: MediaDeviceInfo;\n\n\t/**\n\t * The output volume node\n\t */\n\tprivate _volume: Volume;\n\n\t/**\n\t * The volume of the output in decibels.\n\t */\n\treadonly volume: Param<\"decibels\">;\t\t\n\t\n\t/**\n\t * @param volume The level of the input in decibels\n\t */\n\tconstructor(volume?: Decibels);\n\tconstructor(options?: Partial<UserMediaOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(UserMedia.getDefaults(), arguments, [\"volume\"]));\n\t\tconst options = optionsFromArguments(UserMedia.getDefaults(), arguments, [\"volume\"]);\n\n\t\tthis._volume = this.output = new Volume({\n\t\t\tcontext: this.context,\n\t\t\tvolume: options.volume,\n\t\t});\n\t\tthis.volume = this._volume.volume;\n\t\treadOnly(this, \"volume\");\n\t\tthis.mute = options.mute;\n\t}\n\n\tstatic getDefaults(): UserMediaOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmute: false,\n\t\t\tvolume: 0\n\t\t});\n\t}\n\n\t/**\n\t * Open the media stream. If a string is passed in, it is assumed\n\t * to be the label or id of the stream, if a number is passed in,\n\t * it is the input number of the stream.\n\t * @param  labelOrId The label or id of the audio input media device.\n\t *                   With no argument, the default stream is opened.\n\t * @return The promise is resolved when the stream is open.\n\t */\n\tasync open(labelOrId?: string | number): Promise<void> {\n\t\tthis.assert(UserMedia.supported, \"UserMedia is not supported\");\n\t\t// close the previous stream\n\t\tif (this.state === \"started\") {\n\t\t\tthis.close();\n\t\t}\n\t\tconst devices = await UserMedia.enumerateDevices();\n\t\tif (isNumber(labelOrId)) {\n\t\t\tthis._device = devices[labelOrId];\n\t\t} else {\n\t\t\tthis._device = devices.find((device) => {\n\t\t\t\treturn device.label === labelOrId || device.deviceId === labelOrId;\n\t\t\t});\n\t\t\t// didn't find a matching device\n\t\t\tif (!this._device && devices.length > 0) {\n\t\t\t\tthis._device = devices[0];\n\t\t\t}\n\t\t\tthis.assert(isDefined(this._device), `No matching device ${labelOrId}`);\n\t\t}\n\t\t// do getUserMedia\n\t\tlet constraints = {\n\t\t\taudio: {\n\t\t\t\techoCancellation: false,\n\t\t\t\tsampleRate: this.context.sampleRate,\n\t\t\t\tnoiseSuppression: false,\n\t\t\t\tmozNoiseSuppression: false,\n\t\t\t}\n\t\t};\n\t\tif (this._device) {\n\t\t\t// @ts-ignore\n\t\t\tconstraints.audio.deviceId = this._device.deviceId;\t\t\t\t\n\t\t}\n\t\tconst stream = await navigator.mediaDevices.getUserMedia(constraints);\n\t\t// start a new source only if the previous one is closed\n\t\tif (!this._stream) {\n\t\t\tthis._stream = stream;\n\t\t\t// Wrap a MediaStreamSourceNode around the live input stream.\n\t\t\tconst mediaStreamNode = this.context.createMediaStreamSource(stream);\n\t\t\t// Connect the MediaStreamSourceNode to a gate gain node\n\t\t\tconnect(mediaStreamNode, this.output);\n\t\t\tthis._mediaStream = mediaStreamNode;\n\t\t}\n\t}\n\n\t/**\n\t * Close the media stream\n\t */\n\tclose(): this {\n\t\tif (this._stream && this._mediaStream) {\n\t\t\tthis._stream.getAudioTracks().forEach((track) => {\n\t\t\t\ttrack.stop();\n\t\t\t});\n\t\t\tthis._stream = undefined;\n\t\t\t// remove the old media stream\n\t\t\tthis._mediaStream.disconnect();\n\t\t\tthis._mediaStream = undefined;\n\t\t}\n\t\tthis._device = undefined;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns a promise which resolves with the list of audio input devices available.\n\t * @return The promise that is resolved with the devices\n\t * @example\n\t * import { UserMedia } from \"tone\";\n\t * UserMedia.enumerateDevices().then((devices) => {\n\t * \t// print the device labels\n\t * \tconsole.log(devices.map(device => device.label));\n\t * });\n\t */\n\tstatic async enumerateDevices(): Promise<MediaDeviceInfo[]> {\n\t\tconst allDevices = await navigator.mediaDevices.enumerateDevices();\n\t\treturn allDevices.filter(device => {\n\t\t\treturn device.kind === \"audioinput\";\n\t\t});\n\t}\n\n\t/**\n\t * Returns the playback state of the source, \"started\" when the microphone is open\n\t * and \"stopped\" when the mic is closed.\n\t */\n\tget state() {\n\t\treturn this._stream && this._stream.active ? \"started\" : \"stopped\";\n\t}\n\n\t/**\n\t * Returns an identifier for the represented device that is\n\t * persisted across sessions. It is un-guessable by other applications and\n\t * unique to the origin of the calling application. It is reset when the\n\t * user clears cookies (for Private Browsing, a different identifier is\n\t * used that is not persisted across sessions). Returns undefined when the\n\t * device is not open.\n\t */\n\tget deviceId(): string | undefined {\n\t\tif (this._device) {\n\t\t\treturn this._device.deviceId;\n\t\t} else {\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\t/**\n\t * Returns a group identifier. Two devices have the\n\t * same group identifier if they belong to the same physical device.\n\t * Returns null  when the device is not open.\n\t */\n\tget groupId(): string | undefined {\n\t\tif (this._device) {\n\t\t\treturn this._device.groupId;\n\t\t} else {\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\t/**\n\t * Returns a label describing this device (for example \"Built-in Microphone\").\n\t * Returns undefined when the device is not open or label is not available\n\t * because of permissions.\n\t */\n\tget label(): string | undefined {\n\t\tif (this._device) {\n\t\t\treturn this._device.label;\n\t\t} else {\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\t/**\n\t * Mute the output.\n\t * @example\n\t * import { UserMedia } from \"tone\";\n\t * const mic = new UserMedia();\n\t * mic.open().then(() => {\n\t * \t// promise resolves when input is available\n\t * });\n\t * // mute the output\n\t * mic.mute = true;\n\t */\n\tget mute(): boolean {\n\t\treturn this._volume.mute;\n\t}\n\tset mute(mute) {\n\t\tthis._volume.mute = mute;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.close();\n\t\tthis._volume.dispose();\n\t\tthis.volume.dispose();\n\t\treturn this;\n\t}\n\n\t/**\n\t * If getUserMedia is supported by the browser.\n\t */\n\tstatic get supported(): boolean {\n\t\treturn isDefined(navigator.mediaDevices) && \n\t\t\tisDefined(navigator.mediaDevices.getUserMedia);\n\t}\n}\n","import { AudioRange, Cents, Degrees, Frequency, Positive } from \"../../core/type/Units\";\nimport { Omit } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { SourceOptions } from \"../Source\";\nimport { OfflineContext } from \"../../core/context/OfflineContext\";\n\n/**\n * The common interface of all Oscillators\n */\nexport interface ToneOscillatorInterface {\n\n\t/**\n\t * The oscillator type without the partialsCount appended to the end\n\t * @example\n\t * import { Oscillator } from \"tone\";\n\t * const osc = new Oscillator();\n\t * osc.type = \"sine2\";\n\t * console.log(osc.baseType); // \"sine\"\n\t */\n\tbaseType: OscillatorType | \"pulse\" | \"pwm\";\n\n\t/**\n\t * The oscillator's type. Also capable of setting the first x number of partials of the oscillator. \n\t * For example: \"sine4\" would set be the first 4 partials of the sine wave and \"triangle8\" would \n\t * set the first 8 partials of the triangle wave.\n\t * @example\n\t * import { Oscillator } from \"tone\";\n\t * const osc = new Oscillator();\n\t * osc.type = \"sine2\";\n\t */\n\ttype: ExtendedToneOscillatorType;\n\t\n\t/**\n\t * The frequency value of the oscillator\n\t * @example\n\t * import { FMOscillator } from \"tone\";\n\t * const osc = new FMOscillator(\"Bb4\").toDestination().start();\n\t * osc.frequency.rampTo(\"D2\", 3);\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * The detune value in cents (100th of a semitone).\n\t * @example\n\t * import { PulseOscillator } from \"tone\";\n\t * const osc = new PulseOscillator(\"F3\").toDestination().start();\n\t * // pitch it 1 octave down (12 semitones)\n\t * osc.detune.value = -1200;\n\t */\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * The phase is the starting position within the oscillator's cycle. For example\n\t * a phase of 180 would start halfway through the oscillator's cycle. \n\t */\n\tphase: Degrees;\n\n\t/**\n\t * The partials describes the relative amplitude of each of the harmonics of the oscillator. \n\t * The first value in the array is the first harmonic (i.e. the fundamental frequency), the \n\t * second harmonic is an octave up, the third harmonic is an octave and a fifth, etc. The resulting\n\t * oscillator output is composed of a sine tone at the relative amplitude at each of the harmonic intervals. \n\t * \n\t * Setting this value will automatically set the type to \"custom\".\n\t * The value is an empty array when the type is not \"custom\".\n\t * @example\n\t * import { Oscillator } from \"tone\";\n\t * const osc = new Oscillator(\"F3\").toDestination().start();\n\t * osc.partials = [1, 0, 0.4, 1, 0.2];\n\t */\n\tpartials: number[];\n\t\n\t/**\n\t * 'partialCount' offers an alternative way to set the number of used partials.\n\t * When partialCount is 0, the maximum number of partials are used when representing\n\t * the waveform using the periodicWave. When 'partials' is set, this value is\n\t * not settable, but equals the length of the partials array. A square wave wave\n\t * is composed of only odd harmonics up through the harmonic series. Partial count\n\t * can limit the number of harmonics which are used to generate the waveform.\n\t * @example\n\t * import { Oscillator } from \"tone\";\n\t * const osc = new Oscillator(\"C3\", \"square\").toDestination().start();\n\t * osc.partialCount = 5;\n\t */\n\tpartialCount?: number;\n\n\t/**\n\t * Returns an array of values which represents the waveform.\n\t * @param length The length of the waveform to return\n\t */\n\tasArray(length: number): Promise<Float32Array>;\n}\n\n/**\n * Render a segment of the oscillator to an offline context and return the results as an array\n */\nexport async function generateWaveform(instance: any, length: number): Promise<Float32Array> {\n\tconst duration = length / instance.context.sampleRate;\n\tconst context = new OfflineContext(1, duration, instance.context.sampleRate);\n\tconst clone = new instance.constructor(Object.assign(instance.get(), { \n\t\t// should do 2 iterations\n\t\tfrequency: 2 / duration,\n\t\t// zero out the detune\n\t\tdetune: 0,\n\t\tcontext\n\t})).toDestination();\n\tclone.start(0);\n\tconst buffer = await context.render();\n\treturn buffer.getChannelData(0);\n}\n\n/**\n * Oscillators with partials\n */\ntype SineWithPartials =\n\t\"sine1\" | \"sine2\" | \"sine3\" | \"sine4\" | \"sine5\" | \"sine6\" | \"sine7\" | \"sine8\" | \"sine9\" |\n\t\"sine10\" | \"sine11\" | \"sine12\" | \"sine13\" | \"sine14\" | \"sine15\" | \"sine16\" | \"sine17\" | \"sine18\" | \"sine19\" |\n\t\"sine20\" | \"sine21\" | \"sine22\" | \"sine23\" | \"sine24\" | \"sine25\" | \"sine26\" | \"sine27\" | \"sine28\" | \"sine29\" |\n\t\"sine30\" | \"sine31\" | \"sine32\";\n\ntype SquareWithPartials =\n\t\"square1\" | \"square2\" | \"square3\" | \"square4\" | \"square5\" | \"square6\" | \"square7\" | \"square8\" | \"square9\" |\n\t\"square10\" | \"square11\" | \"square12\" | \"square13\" | \"square14\" | \"square15\" | \"square16\" | \"square17\" | \"square18\" | \"square19\" |\n\t\"square20\" | \"square21\" | \"square22\" | \"square23\" | \"square24\" | \"square25\" | \"square26\" | \"square27\" | \"square28\" | \"square29\" |\n\t\"square30\" | \"square31\" | \"square32\";\n\ntype SawtoothWithPartials =\n\t\"sawtooth1\" | \"sawtooth2\" | \"sawtooth3\" | \"sawtooth4\" | \"sawtooth5\" | \"sawtooth6\" | \"sawtooth7\" | \"sawtooth8\" | \"sawtooth9\" |\n\t\"sawtooth10\" | \"sawtooth11\" | \"sawtooth12\" | \"sawtooth13\" | \"sawtooth14\" | \"sawtooth15\" | \"sawtooth16\" | \"sawtooth17\" | \"sawtooth18\" | \"sawtooth19\" |\n\t\"sawtooth20\" | \"sawtooth21\" | \"sawtooth22\" | \"sawtooth23\" | \"sawtooth24\" | \"sawtooth25\" | \"sawtooth26\" | \"sawtooth27\" | \"sawtooth28\" | \"sawtooth29\" |\n\t\"sawtooth30\" | \"sawtooth31\" | \"sawtooth32\";\n\ntype TriangleWithPartials =\n\t\"triangle1\" | \"triangle2\" | \"triangle3\" | \"triangle4\" | \"triangle5\" | \"triangle6\" | \"triangle7\" | \"triangle8\" | \"triangle9\" |\n\t\"triangle10\" | \"triangle11\" | \"triangle12\" | \"triangle13\" | \"triangle14\" | \"triangle15\" | \"triangle16\" | \"triangle17\" | \"triangle18\" | \"triangle19\" |\n\t\"triangle20\" | \"triangle21\" | \"triangle22\" | \"triangle23\" | \"triangle24\" | \"triangle25\" | \"triangle26\" | \"triangle27\" | \"triangle28\" | \"triangle29\" |\n\t\"triangle30\" | \"triangle31\" | \"triangle32\";\n\ntype TypeWithPartials = SineWithPartials | SquareWithPartials | TriangleWithPartials | SawtoothWithPartials;\n\ninterface BaseOscillatorOptions extends SourceOptions {\n\tfrequency: Frequency;\n\tdetune: Cents;\n\tphase: Degrees;\n}\n\nexport type NonCustomOscillatorType = Exclude<OscillatorType, \"custom\">;\n\ntype AllNonCustomOscillatorType = NonCustomOscillatorType | TypeWithPartials;\n\nexport type ToneOscillatorType = AllNonCustomOscillatorType | \"custom\";\n\nexport type ExtendedToneOscillatorType = ToneOscillatorType | \"pwm\" | \"pulse\";\n\n/**\n * Oscillator Interfaces\n */\ninterface ToneCustomOscillatorOptions extends BaseOscillatorOptions {\n\ttype: \"custom\";\n\tpartials: number[];\n}\n\ninterface ToneTypeOscillatorOptions extends BaseOscillatorOptions {\n\ttype: NonCustomOscillatorType;\n\tpartialCount?: number;\n}\n\ninterface TonePartialOscillatorOptions extends BaseOscillatorOptions {\n\ttype: TypeWithPartials;\n}\n\nexport type ToneOscillatorConstructorOptions = ToneCustomOscillatorOptions | ToneTypeOscillatorOptions | TonePartialOscillatorOptions;\n\nexport interface ToneOscillatorOptions extends BaseOscillatorOptions {\n\ttype: ToneOscillatorType;\n\tpartialCount: number;\n\tpartials: number[];\n}\n\n/**\n * FMOscillator Interface\n */\ninterface FMBaseOscillatorOptions extends BaseOscillatorOptions {\n\tharmonicity: Positive;\n\tmodulationIndex: Positive;\n\tmodulationType: AllNonCustomOscillatorType;\n}\n\ninterface FMCustomOscillatorOptions extends FMBaseOscillatorOptions {\n\ttype: \"custom\";\n\tpartials: number[];\n}\n\ninterface FMTypeOscillatorOptions extends FMBaseOscillatorOptions {\n\ttype: NonCustomOscillatorType;\n\tpartialsCount?: number;\n}\n\ninterface FMPartialsOscillatorOptions extends FMBaseOscillatorOptions {\n\ttype: TypeWithPartials;\n}\n\nexport type FMConstructorOptions = FMTypeOscillatorOptions | FMCustomOscillatorOptions | FMPartialsOscillatorOptions;\n\nexport interface FMOscillatorOptions extends ToneOscillatorOptions {\n\tharmonicity: Positive;\n\tmodulationIndex: Positive;\n\tmodulationType: AllNonCustomOscillatorType;\n}\n\n/**\n * AMOscillator Interface\n */\ninterface AMBaseOscillatorOptions extends BaseOscillatorOptions {\n\tharmonicity: Positive;\n\tmodulationType: AllNonCustomOscillatorType;\n}\n\ninterface AMCustomOscillatorOptions extends AMBaseOscillatorOptions {\n\ttype: \"custom\";\n\tpartials: number[];\n}\n\ninterface AMTypeOscillatorOptions extends AMBaseOscillatorOptions {\n\ttype: NonCustomOscillatorType;\n\tpartialsCount?: number;\n}\n\ninterface AMPartialsOscillatorOptions extends AMBaseOscillatorOptions {\n\ttype: TypeWithPartials;\n}\n\nexport type AMConstructorOptions = AMCustomOscillatorOptions | AMTypeOscillatorOptions | AMPartialsOscillatorOptions;\n\nexport interface AMOscillatorOptions extends ToneOscillatorOptions {\n\tharmonicity: Positive;\n\tmodulationType: AllNonCustomOscillatorType;\n}\n/**\n * FatOscillator\n */\ninterface FatBaseOscillatorOptions extends BaseOscillatorOptions {\n\tspread: Cents;\n\tcount: Positive;\n}\n\ninterface FatCustomOscillatorOptions extends FatBaseOscillatorOptions {\n\ttype: \"custom\";\n\tpartials: number[];\n}\n\ninterface FatTypeOscillatorOptions extends FatBaseOscillatorOptions {\n\ttype: NonCustomOscillatorType;\n\tpartialCount?: number;\n}\n\ninterface FatPartialsOscillatorOptions extends FatBaseOscillatorOptions {\n\ttype: TypeWithPartials;\n}\n\nexport type FatConstructorOptions = FatCustomOscillatorOptions | FatTypeOscillatorOptions | FatPartialsOscillatorOptions;\n\nexport interface FatOscillatorOptions extends ToneOscillatorOptions {\n\tspread: Cents;\n\tcount: Positive;\n}\n\n/**\n * Pulse Oscillator\n */\nexport interface PulseOscillatorOptions extends BaseOscillatorOptions {\n\ttype: \"pulse\";\n\twidth: AudioRange;\n}\n\n/**\n * PWM Oscillator\n */\nexport interface PWMOscillatorOptions extends BaseOscillatorOptions {\n\ttype: \"pwm\";\n\tmodulationFrequency: Frequency;\n}\n\n/**\n * OMNI OSCILLATOR\n */\n\n/**\n * FM Oscillators with partials\n */\ntype FMSineWithPartials =\n\t\"fmsine1\" | \"fmsine2\" | \"fmsine3\" | \"fmsine4\" | \"fmsine5\" | \"fmsine6\" | \"fmsine7\" | \"fmsine8\" | \"fmsine9\" |\n\t\"fmsine10\" | \"fmsine11\" | \"fmsine12\" | \"fmsine13\" | \"fmsine14\" | \"fmsine15\" | \"fmsine16\" | \"fmsine17\" | \"fmsine18\" | \"fmsine19\" |\n\t\"fmsine20\" | \"fmsine21\" | \"fmsine22\" | \"fmsine23\" | \"fmsine24\" | \"fmsine25\" | \"fmsine26\" | \"fmsine27\" | \"fmsine28\" | \"fmsine29\" |\n\t\"fmsine30\" | \"fmsine31\" | \"fmsine32\";\n\ntype FMSquareWithPartials =\n\t\"fmsquare1\" | \"fmsquare2\" | \"fmsquare3\" | \"fmsquare4\" | \"fmsquare5\" | \"fmsquare6\" | \"fmsquare7\" | \"fmsquare8\" | \"fmsquare9\" |\n\t\"fmsquare10\" | \"fmsquare11\" | \"fmsquare12\" | \"fmsquare13\" | \"fmsquare14\" | \"fmsquare15\" | \"fmsquare16\" | \"fmsquare17\" | \"fmsquare18\" | \"fmsquare19\" |\n\t\"fmsquare20\" | \"fmsquare21\" | \"fmsquare22\" | \"fmsquare23\" | \"fmsquare24\" | \"fmsquare25\" | \"fmsquare26\" | \"fmsquare27\" | \"fmsquare28\" | \"fmsquare29\" |\n\t\"fmsquare30\" | \"fmsquare31\" | \"fmsquare32\";\n\ntype FMSawtoothWithPartials =\n\t\"fmsawtooth1\" | \"fmsawtooth2\" | \"fmsawtooth3\" | \"fmsawtooth4\" | \"fmsawtooth5\" | \"fmsawtooth6\" | \"fmsawtooth7\" | \"fmsawtooth8\" | \"fmsawtooth9\" |\n\t\"fmsawtooth10\" | \"fmsawtooth11\" | \"fmsawtooth12\" | \"fmsawtooth13\" | \"fmsawtooth14\" | \"fmsawtooth15\" | \"fmsawtooth16\" | \"fmsawtooth17\" | \"fmsawtooth18\" | \"fmsawtooth19\" |\n\t\"fmsawtooth20\" | \"fmsawtooth21\" | \"fmsawtooth22\" | \"fmsawtooth23\" | \"fmsawtooth24\" | \"fmsawtooth25\" | \"fmsawtooth26\" | \"fmsawtooth27\" | \"fmsawtooth28\" | \"fmsawtooth29\" |\n\t\"fmsawtooth30\" | \"fmsawtooth31\" | \"fmsawtooth32\";\n\ntype FMTriangleWithPartials =\n\t\"fmtriangle1\" | \"fmtriangle2\" | \"fmtriangle3\" | \"fmtriangle4\" | \"fmtriangle5\" | \"fmtriangle6\" | \"fmtriangle7\" | \"fmtriangle8\" | \"fmtriangle9\" |\n\t\"fmtriangle10\" | \"fmtriangle11\" | \"fmtriangle12\" | \"fmtriangle13\" | \"fmtriangle14\" | \"fmtriangle15\" | \"fmtriangle16\" | \"fmtriangle17\" | \"fmtriangle18\" | \"fmtriangle19\" |\n\t\"fmtriangle20\" | \"fmtriangle21\" | \"fmtriangle22\" | \"fmtriangle23\" | \"fmtriangle24\" | \"fmtriangle25\" | \"fmtriangle26\" | \"fmtriangle27\" | \"fmtriangle28\" | \"fmtriangle29\" |\n\t\"fmtriangle30\" | \"fmtriangle31\" | \"fmtriangle32\";\n\ntype FMTypeWithPartials = FMSineWithPartials | FMSquareWithPartials | FMSawtoothWithPartials | FMTriangleWithPartials;\n\n/**\n * AM Oscillators with partials\n */\ntype AMSineWithPartials =\n\t\"amsine1\" | \"amsine2\" | \"amsine3\" | \"amsine4\" | \"amsine5\" | \"amsine6\" | \"amsine7\" | \"amsine8\" | \"amsine9\" |\n\t\"amsine10\" | \"amsine11\" | \"amsine12\" | \"amsine13\" | \"amsine14\" | \"amsine15\" | \"amsine16\" | \"amsine17\" | \"amsine18\" | \"amsine19\" |\n\t\"amsine20\" | \"amsine21\" | \"amsine22\" | \"amsine23\" | \"amsine24\" | \"amsine25\" | \"amsine26\" | \"amsine27\" | \"amsine28\" | \"amsine29\" |\n\t\"amsine30\" | \"amsine31\" | \"amsine32\";\n\ntype AMSquareWithPartials =\n\t\"amsquare1\" | \"amsquare2\" | \"amsquare3\" | \"amsquare4\" | \"amsquare5\" | \"amsquare6\" | \"amsquare7\" | \"amsquare8\" | \"amsquare9\" |\n\t\"amsquare10\" | \"amsquare11\" | \"amsquare12\" | \"amsquare13\" | \"amsquare14\" | \"amsquare15\" | \"amsquare16\" | \"amsquare17\" | \"amsquare18\" | \"amsquare19\" |\n\t\"amsquare20\" | \"amsquare21\" | \"amsquare22\" | \"amsquare23\" | \"amsquare24\" | \"amsquare25\" | \"amsquare26\" | \"amsquare27\" | \"amsquare28\" | \"amsquare29\" |\n\t\"amsquare30\" | \"amsquare31\" | \"amsquare32\";\n\ntype AMSawtoothWithPartials =\n\t\"amsawtooth1\" | \"amsawtooth2\" | \"amsawtooth3\" | \"amsawtooth4\" | \"amsawtooth5\" | \"amsawtooth6\" | \"amsawtooth7\" | \"amsawtooth8\" | \"amsawtooth9\" |\n\t\"amsawtooth10\" | \"amsawtooth11\" | \"amsawtooth12\" | \"amsawtooth13\" | \"amsawtooth14\" | \"amsawtooth15\" | \"amsawtooth16\" | \"amsawtooth17\" | \"amsawtooth18\" | \"amsawtooth19\" |\n\t\"amsawtooth20\" | \"amsawtooth21\" | \"amsawtooth22\" | \"amsawtooth23\" | \"amsawtooth24\" | \"amsawtooth25\" | \"amsawtooth26\" | \"amsawtooth27\" | \"amsawtooth28\" | \"amsawtooth29\" |\n\t\"amsawtooth30\" | \"amsawtooth31\" | \"amsawtooth32\";\n\ntype AMTriangleWithPartials =\n\t\"amtriangle1\" | \"amtriangle2\" | \"amtriangle3\" | \"amtriangle4\" | \"amtriangle5\" | \"amtriangle6\" | \"amtriangle7\" | \"amtriangle8\" | \"amtriangle9\" |\n\t\"amtriangle10\" | \"amtriangle11\" | \"amtriangle12\" | \"amtriangle13\" | \"amtriangle14\" | \"amtriangle15\" | \"amtriangle16\" | \"amtriangle17\" | \"amtriangle18\" | \"amtriangle19\" |\n\t\"amtriangle20\" | \"amtriangle21\" | \"amtriangle22\" | \"amtriangle23\" | \"amtriangle24\" | \"amtriangle25\" | \"amtriangle26\" | \"amtriangle27\" | \"amtriangle28\" | \"amtriangle29\" |\n\t\"amtriangle30\" | \"amtriangle31\" | \"amtriangle32\";\n\ntype AMTypeWithPartials = AMSineWithPartials | AMSquareWithPartials | AMSawtoothWithPartials | AMTriangleWithPartials;\n\n/**\n * Fat Oscillators with partials\n */\ntype FatSineWithPartials =\n\t\"fatsine1\" | \"fatsine2\" | \"fatsine3\" | \"fatsine4\" | \"fatsine5\" | \"fatsine6\" | \"fatsine7\" | \"fatsine8\" | \"fatsine9\" |\n\t\"fatsine10\" | \"fatsine11\" | \"fatsine12\" | \"fatsine13\" | \"fatsine14\" | \"fatsine15\" | \"fatsine16\" | \"fatsine17\" | \"fatsine18\" | \"fatsine19\" |\n\t\"fatsine20\" | \"fatsine21\" | \"fatsine22\" | \"fatsine23\" | \"fatsine24\" | \"fatsine25\" | \"fatsine26\" | \"fatsine27\" | \"fatsine28\" | \"fatsine29\" |\n\t\"fatsine30\" | \"fatsine31\" | \"fatsine32\";\n\ntype FatSquareWithPartials =\n\t\"fatsquare1\" | \"fatsquare2\" | \"fatsquare3\" | \"fatsquare4\" | \"fatsquare5\" | \"fatsquare6\" | \"fatsquare7\" | \"fatsquare8\" | \"fatsquare9\" |\n\t\"fatsquare10\" | \"fatsquare11\" | \"fatsquare12\" | \"fatsquare13\" | \"fatsquare14\" | \"fatsquare15\" | \"fatsquare16\" | \"fatsquare17\" | \"fatsquare18\" | \"fatsquare19\" |\n\t\"fatsquare20\" | \"fatsquare21\" | \"fatsquare22\" | \"fatsquare23\" | \"fatsquare24\" | \"fatsquare25\" | \"fatsquare26\" | \"fatsquare27\" | \"fatsquare28\" | \"fatsquare29\" |\n\t\"fatsquare30\" | \"fatsquare31\" | \"fatsquare32\";\n\ntype FatSawtoothWithPartials =\n\t\"fatsawtooth1\" | \"fatsawtooth2\" | \"fatsawtooth3\" | \"fatsawtooth4\" | \"fatsawtooth5\" | \"fatsawtooth6\" | \"fatsawtooth7\" | \"fatsawtooth8\" | \"fatsawtooth9\" |\n\t\"fatsawtooth10\" | \"fatsawtooth11\" | \"fatsawtooth12\" | \"fatsawtooth13\" | \"fatsawtooth14\" | \"fatsawtooth15\" | \"fatsawtooth16\" | \"fatsawtooth17\" | \"fatsawtooth18\" | \"fatsawtooth19\" |\n\t\"fatsawtooth20\" | \"fatsawtooth21\" | \"fatsawtooth22\" | \"fatsawtooth23\" | \"fatsawtooth24\" | \"fatsawtooth25\" | \"fatsawtooth26\" | \"fatsawtooth27\" | \"fatsawtooth28\" | \"fatsawtooth29\" |\n\t\"fatsawtooth30\" | \"fatsawtooth31\" | \"fatsawtooth32\";\n\ntype FatTriangleWithPartials =\n\t\"fattriangle1\" | \"fattriangle2\" | \"fattriangle3\" | \"fattriangle4\" | \"fattriangle5\" | \"fattriangle6\" | \"fattriangle7\" | \"fattriangle8\" | \"fattriangle9\" |\n\t\"fattriangle10\" | \"fattriangle11\" | \"fattriangle12\" | \"fattriangle13\" | \"fattriangle14\" | \"fattriangle15\" | \"fattriangle16\" | \"fattriangle17\" | \"fattriangle18\" | \"fattriangle19\" |\n\t\"fattriangle20\" | \"fattriangle21\" | \"fattriangle22\" | \"fattriangle23\" | \"fattriangle24\" | \"fattriangle25\" | \"fattriangle26\" | \"fattriangle27\" | \"fattriangle28\" | \"fattriangle29\" |\n\t\"fattriangle30\" | \"fattriangle31\" | \"fattriangle32\";\n\ntype FatTypeWithPartials = FatSineWithPartials | FatSquareWithPartials | FatSawtoothWithPartials | FatTriangleWithPartials;\n\n/**\n * Omni FM\n */\ninterface OmniFMCustomOscillatorOptions extends FMBaseOscillatorOptions {\n\ttype: \"fmcustom\";\n\tpartials: number[];\n}\n\ninterface OmniFMTypeOscillatorOptions extends FMBaseOscillatorOptions {\n\ttype: \"fmsine\" | \"fmsquare\" | \"fmsawtooth\" | \"fmtriangle\";\n\tpartialsCount?: number;\n}\n\ninterface OmniFMPartialsOscillatorOptions extends FMBaseOscillatorOptions {\n\ttype: FMTypeWithPartials;\n}\n\n/**\n * Omni AM\n */\ninterface OmniAMCustomOscillatorOptions extends AMBaseOscillatorOptions {\n\ttype: \"amcustom\";\n\tpartials: number[];\n}\n\ninterface OmniAMTypeOscillatorOptions extends AMBaseOscillatorOptions {\n\ttype: \"amsine\" | \"amsquare\" | \"amsawtooth\" | \"amtriangle\";\n\tpartialsCount?: number;\n}\n\ninterface OmniAMPartialsOscillatorOptions extends AMBaseOscillatorOptions {\n\ttype: AMTypeWithPartials;\n}\n\n/**\n * Omni Fat\n */\ninterface OmniFatCustomOscillatorOptions extends FatBaseOscillatorOptions {\n\ttype: \"fatcustom\";\n\tpartials: number[];\n}\n\ninterface OmniFatTypeOscillatorOptions extends FatBaseOscillatorOptions {\n\ttype: \"fatsine\" | \"fatsquare\" | \"fatsawtooth\" | \"fattriangle\";\n\tpartialsCount?: number;\n}\n\ninterface OmniFatPartialsOscillatorOptions extends FatBaseOscillatorOptions {\n\ttype: FatTypeWithPartials;\n}\n\nexport type OmniOscillatorType =\n\t\"fatsine\" | \"fatsquare\" | \"fatsawtooth\" | \"fattriangle\" | \"fatcustom\" | FatTypeWithPartials |\n\t\"fmsine\" | \"fmsquare\" | \"fmsawtooth\" | \"fmtriangle\" | \"fmcustom\" | FMTypeWithPartials |\n\t\"amsine\" | \"amsquare\" | \"amsawtooth\" | \"amtriangle\" | \"amcustom\" | AMTypeWithPartials |\n\tTypeWithPartials | OscillatorType | \"pulse\" | \"pwm\";\n\nexport type OmniOscillatorConstructorOptions =\n\tPulseOscillatorOptions | PWMOscillatorOptions |\n\tOmniFatCustomOscillatorOptions | OmniFatTypeOscillatorOptions | OmniFatPartialsOscillatorOptions |\n\tOmniFMCustomOscillatorOptions | OmniFMTypeOscillatorOptions | OmniFMPartialsOscillatorOptions |\n\tOmniAMCustomOscillatorOptions | OmniAMTypeOscillatorOptions | OmniAMPartialsOscillatorOptions |\n\tToneOscillatorConstructorOptions;\n\n// export type OmniOscillatorSourceOptions = OmniOscillatorConstructorOptions & SourceOptions;\n\nexport type OmniOscillatorOptions =\n\tPulseOscillatorOptions & PWMOscillatorOptions &\n\tOmniFatCustomOscillatorOptions & OmniFatTypeOscillatorOptions & OmniFatPartialsOscillatorOptions &\n\tOmniFMCustomOscillatorOptions & OmniFMTypeOscillatorOptions & OmniFMPartialsOscillatorOptions &\n\tOmniAMCustomOscillatorOptions & OmniAMTypeOscillatorOptions & OmniAMPartialsOscillatorOptions &\n\tToneOscillatorConstructorOptions;\n\ntype OmitSourceOptions<T extends BaseOscillatorOptions> = Omit<T, \"frequency\" | \"detune\" | \"context\">;\n\n/**\n * The settable options for the omni oscillator inside of the source which excludes certain attributes that are defined by the parent class\n */\nexport type OmniOscillatorSynthOptions =\n\tOmitSourceOptions<PulseOscillatorOptions> | OmitSourceOptions<PWMOscillatorOptions> |\n\tOmitSourceOptions<OmniFatCustomOscillatorOptions> | OmitSourceOptions<OmniFatTypeOscillatorOptions> | OmitSourceOptions<OmniFatPartialsOscillatorOptions> |\n\tOmitSourceOptions<OmniFMCustomOscillatorOptions> | OmitSourceOptions<OmniFMTypeOscillatorOptions> | OmitSourceOptions<OmniFMPartialsOscillatorOptions> |\n\tOmitSourceOptions<OmniAMCustomOscillatorOptions> | OmitSourceOptions<OmniAMTypeOscillatorOptions> | OmitSourceOptions<OmniAMPartialsOscillatorOptions> |\n\tOmitSourceOptions<ToneOscillatorConstructorOptions>;\n","import { connect } from \"../../core/Connect\";\nimport { Param } from \"../../core/context/Param\";\nimport { Cents, Frequency, Seconds, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { OneShotSource, OneShotSourceOptions } from \"../OneShotSource\";\n\nexport interface ToneOscillatorNodeOptions extends OneShotSourceOptions {\n\tfrequency: Frequency;\n\tdetune: Cents;\n\ttype: OscillatorType;\n}\n\n/**\n * Wrapper around the native fire-and-forget OscillatorNode.\n * Adds the ability to reschedule the stop method.\n * ***[[Oscillator]] is better for most use-cases***\n * @category Source\n */\nexport class ToneOscillatorNode extends OneShotSource<ToneOscillatorNodeOptions> {\n\n\treadonly name: string = \"ToneOscillatorNode\";\n\n\t/**\n\t * The oscillator\n\t */\n\tprivate _oscillator = this.context.createOscillator();\n\tprotected _internalChannels = [this._oscillator];\n\n\t/**\n\t * The frequency of the oscillator\n\t */\n\treadonly frequency: Param<\"frequency\">;\n\n\t/**\n\t * The detune of the oscillator\n\t */\n\treadonly detune: Param<\"cents\">;\n\n\t/**\n\t * @param  frequency   The frequency value\n\t * @param  type  The basic oscillator type\n\t */\n\tconstructor(\n\t\tfrequency: Frequency,\n\t\ttype: OscillatorType,\n\t);\n\tconstructor(options?: Partial<ToneOscillatorNodeOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(ToneOscillatorNode.getDefaults(), arguments, [\"frequency\", \"type\"]));\n\t\tconst options = optionsFromArguments(ToneOscillatorNode.getDefaults(), arguments, [\"frequency\", \"type\"]);\n\n\t\tconnect(this._oscillator, this._gainNode);\n\n\t\tthis.type = options.type;\n\n\t\tthis.frequency = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._oscillator.frequency,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t});\n\n\t\tthis.detune = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._oscillator.detune,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune,\n\t\t});\n\t}\n\n\tstatic getDefaults(): ToneOscillatorNodeOptions {\n\t\treturn Object.assign(OneShotSource.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tfrequency: 440,\n\t\t\ttype: \"sine\" as OscillatorType,\n\t\t});\n\t}\n\n\t/**\n\t * Start the oscillator node at the given time\n\t * @param  time When to start the oscillator\n\t */\n\tstart(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis.log(\"start\", computedTime);\n\t\tthis._startGain(computedTime);\n\t\tthis._oscillator.start(computedTime);\n\t\treturn this;\n\t}\n\n\tprotected _stopSource(time?: Seconds): void {\n\t\tthis._oscillator.stop(time);\n\t}\n\n\t/**\n\t * Sets an arbitrary custom periodic waveform given a PeriodicWave.\n\t * @param  periodicWave PeriodicWave should be created with context.createPeriodicWave\n\t */\n\tsetPeriodicWave(periodicWave: PeriodicWave): this {\n\t\tthis._oscillator.setPeriodicWave(periodicWave);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The oscillator type. Either 'sine', 'sawtooth', 'square', or 'triangle'\n\t */\n\tget type(): OscillatorType {\n\t\treturn this._oscillator.type;\n\t}\n\tset type(type: OscillatorType) {\n\t\tthis._oscillator.type = type;\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (this.state === \"started\") {\n\t\t\tthis.stop();\n\t\t}\n\t\tthis._oscillator.disconnect();\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\treturn this;\n\t}\n}\n","import { AudioRange, Degrees, Frequency, Radians, Time } from \"../../core/type/Units\";\nimport { deepEquals, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { isDefined } from \"../../core/util/TypeCheck\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { generateWaveform, ToneOscillatorConstructorOptions, ToneOscillatorInterface,\n\tToneOscillatorOptions, ToneOscillatorType } from \"./OscillatorInterface\";\nimport { ToneOscillatorNode } from \"./ToneOscillatorNode\";\nimport { assertRange } from \"../../core/util/Debug\";\nexport { ToneOscillatorOptions, ToneOscillatorType } from \"./OscillatorInterface\";\n/**\n * Oscillator supports a number of features including\n * phase rotation, multiple oscillator types (see Oscillator.type),\n * and Transport syncing (see Oscillator.syncFrequency).\n *\n * @example\n * import { Oscillator } from \"tone\";\n * // make and start a 440hz sine tone\n * const osc = new Oscillator(440, \"sine\").toDestination().start();\n * @category Source\n */\nexport class Oscillator extends Source<ToneOscillatorOptions> implements ToneOscillatorInterface {\n\n\treadonly name: string = \"Oscillator\";\n\n\t/**\n\t * the main oscillator\n\t */\n\tprivate _oscillator: ToneOscillatorNode | null = null;\n\n\t/**\n\t * The frequency control.\n\t */\n\tfrequency: Signal<\"frequency\">;\n\n\t/**\n\t * The detune control signal.\n\t */\n\tdetune: Signal<\"cents\">;\n\n\t/**\n\t * the periodic wave\n\t */\n\tprivate _wave?: PeriodicWave;\n\n\t/**\n\t * The partials of the oscillator\n\t */\n\tprivate _partials: number[];\n\n\t/**\n\t * The number of partials to limit or extend the periodic wave by\n\t */\n\tprivate _partialCount: number;\n\n\t/**\n\t * the phase of the oscillator between 0 - 360\n\t */\n\tprivate _phase!: Radians;\n\n\t/**\n\t * the type of the oscillator\n\t */\n\tprivate _type: ToneOscillatorType;\n\n\t/**\n\t * @param frequency Starting frequency\n\t * @param type The oscillator type. Read more about type below.\n\t */\n\tconstructor(frequency?: Frequency, type?: ToneOscillatorType);\n\tconstructor(options?: Partial<ToneOscillatorConstructorOptions>)\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Oscillator.getDefaults(), arguments, [\"frequency\", \"type\"]));\n\t\tconst options = optionsFromArguments(Oscillator.getDefaults(), arguments, [\"frequency\", \"type\"]);\n\n\t\tthis.frequency = new Signal<\"frequency\">({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t});\n\t\treadOnly(this, \"frequency\");\n\n\t\tthis.detune = new Signal<\"cents\">({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune,\n\t\t});\n\t\treadOnly(this, \"detune\");\n\n\t\tthis._partials = options.partials;\n\t\tthis._partialCount = options.partialCount;\n\t\tthis._type = options.type;\n\n\t\tif (options.partialCount && options.type !== \"custom\") {\n\t\t\tthis._type = this.baseType + options.partialCount.toString() as ToneOscillatorType;\n\t\t}\n\t\tthis.phase = options.phase;\n\t}\n\n\tstatic getDefaults(): ToneOscillatorOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tfrequency: 440,\n\t\t\tpartialCount: 0,\n\t\t\tpartials: [],\n\t\t\tphase: 0,\n\t\t\ttype: \"sine\",\n\t\t}) as ToneOscillatorOptions;\n\t}\n\n\t/**\n\t * start the oscillator\n\t */\n\tprotected _start(time?: Time): void {\n\t\tconst computedTime = this.toSeconds(time);\n\t\t// new oscillator with previous values\n\t\tconst oscillator = new ToneOscillatorNode({\n\t\t\tcontext: this.context,\n\t\t\tonended: () => this.onstop(this),\n\t\t});\n\t\tthis._oscillator = oscillator;\n\t\tif (this._wave) {\n\t\t\tthis._oscillator.setPeriodicWave(this._wave);\n\t\t} else {\n\t\t\tthis._oscillator.type = this._type as OscillatorType;\n\t\t}\n\t\t// connect the control signal to the oscillator frequency & detune\n\t\tthis._oscillator.connect(this.output);\n\t\tthis.frequency.connect(this._oscillator.frequency);\n\t\tthis.detune.connect(this._oscillator.detune);\n\n\t\t// start the oscillator\n\t\tthis._oscillator.start(computedTime);\n\t}\n\n\t/**\n\t * stop the oscillator\n\t */\n\tprotected _stop(time?: Time): void {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._oscillator) {\n\t\t\tthis._oscillator.stop(computedTime);\n\t\t}\n\t}\n\n\t/**\n\t * Restart the oscillator. Does not stop the oscillator, but instead\n\t * just cancels any scheduled 'stop' from being invoked.\n\t */\n\trestart(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis.log(\"restart\", computedTime);\n\t\tif (this._oscillator) {\n\t\t\tthis._oscillator.cancelStop();\n\t\t}\n\t\tthis._state.cancel(computedTime);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sync the signal to the Transport's bpm. Any changes to the transports bpm,\n\t * will also affect the oscillators frequency.\n\t * @example\n\t * import { Oscillator, Transport } from \"tone\";\n\t * const osc = new Oscillator().toDestination().start();\n\t * osc.frequency.value = 440;\n\t * // the ratio between the bpm and the frequency will be maintained\n\t * osc.syncFrequency();\n\t * // double the tempo\n\t * Transport.bpm.value *= 2;\n\t * // the frequency of the oscillator is doubled to 880\n\t */\n\tsyncFrequency(): this {\n\t\tthis.context.transport.syncSignal(this.frequency);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unsync the oscillator's frequency from the Transport.\n\t * See Oscillator.syncFrequency\n\t */\n\tunsyncFrequency(): this {\n\t\tthis.context.transport.unsyncSignal(this.frequency);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Cache the periodic waves to avoid having to redo computations\n\t */\n\tprivate static _periodicWaveCache: Array<{\n\t\tpartials: number[];\n\t\tphase: number;\n\t\ttype: string;\n\t\tpartialCount: number;\n\t\treal: Float32Array;\n\t\timag: Float32Array;\n\t}> = [];\n\n\t/**\n\t * Get a cached periodic wave. Avoids having to recompute\n\t * the oscillator values when they have already been computed\n\t * with the same values.\n\t */\n\tprivate _getCachedPeriodicWave(): {real: Float32Array; imag: Float32Array; partials: number[]} | undefined {\n\t\tif (this._type === \"custom\") {\n\t\t\tconst oscProps = Oscillator._periodicWaveCache.find(description => {\n\t\t\t\treturn description.phase === this._phase &&\n\t\t\t\t\tdeepEquals(description.partials, this._partials);\n\t\t\t});\n\t\t\treturn oscProps;\n\t\t} else {\n\t\t\tconst oscProps = Oscillator._periodicWaveCache.find(description => {\n\t\t\t\treturn description.type === this._type &&\n\t\t\t\t\tdescription.phase === this._phase;\n\t\t\t});\n\t\t\tthis._partialCount = oscProps ? oscProps.partialCount : this._partialCount;\n\t\t\treturn oscProps;\n\t\t}\n\t}\n\n\tget type(): ToneOscillatorType {\n\t\treturn this._type;\n\t}\n\tset type(type) {\n\t\tthis._type = type;\n\t\tconst isBasicType = [\"sine\", \"square\", \"sawtooth\", \"triangle\"].indexOf(type) !== -1;\n\t\tif (this._phase === 0 && isBasicType) {\n\t\t\tthis._wave = undefined;\n\t\t\tthis._partialCount = 0;\n\t\t\t// just go with the basic approach\n\t\t\tif (this._oscillator !== null) {\n\t\t\t\t// already tested that it's a basic type\n\t\t\t\tthis._oscillator.type = type as OscillatorType;\n\t\t\t}\n\t\t} else {\n\t\t\t// first check if the value is cached\n\t\t\tconst cache = this._getCachedPeriodicWave();\n\t\t\tif (isDefined(cache)) {\n\t\t\t\tconst { real, imag, partials } = cache;\n\t\t\t\tthis._wave = this.context.createPeriodicWave(real, imag);\n\t\t\t\tthis._partials = partials;\n\t\t\t\tif (this._oscillator !== null) {\n\t\t\t\t\tthis._oscillator.setPeriodicWave(this._wave);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst [real, imag] = this._getRealImaginary(type, this._phase);\n\t\t\t\tconst periodicWave = this.context.createPeriodicWave(real, imag);\n\t\t\t\tthis._wave = periodicWave;\n\t\t\t\tif (this._oscillator !== null) {\n\t\t\t\t\tthis._oscillator.setPeriodicWave(this._wave);\n\t\t\t\t}\n\t\t\t\t// set the cache\n\t\t\t\tOscillator._periodicWaveCache.push({\n\t\t\t\t\timag,\n\t\t\t\t\tpartialCount: this._partialCount,\n\t\t\t\t\tpartials: this._partials,\n\t\t\t\t\tphase: this._phase,\n\t\t\t\t\treal,\n\t\t\t\t\ttype: this._type,\n\t\t\t\t});\n\t\t\t\tif (Oscillator._periodicWaveCache.length > 100) {\n\t\t\t\t\tOscillator._periodicWaveCache.shift();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tget baseType(): OscillatorType {\n\t\treturn (this._type as string).replace(this.partialCount.toString(), \"\") as OscillatorType;\n\t}\n\tset baseType(baseType) {\n\t\tif (this.partialCount && this._type !== \"custom\" && baseType !== \"custom\") {\n\t\t\tthis.type = baseType + this.partialCount as ToneOscillatorType;\n\t\t} else {\n\t\t\tthis.type = baseType;\n\t\t}\n\t}\n\n\tget partialCount(): number {\n\t\treturn this._partialCount;\n\t}\n\tset partialCount(p) {\n\t\tassertRange(p, 0);\n\t\tlet type = this._type;\n\t\tconst partial = /^(sine|triangle|square|sawtooth)(\\d+)$/.exec(this._type);\n\t\tif (partial) {\n\t\t\ttype = partial[1] as OscillatorType;\n\t\t}\n\t\tif (this._type !== \"custom\") {\n\t\t\tif (p === 0) {\n\t\t\t\tthis.type = type;\n\t\t\t} else {\n\t\t\t\tthis.type = type + p.toString() as ToneOscillatorType;\n\t\t\t}\n\t\t} else {\n\t\t\t// extend or shorten the partials array\n\t\t\tconst fullPartials = new Float32Array(p);\n\t\t\t// copy over the partials array\n\t\t\tthis._partials.forEach((v, i) => fullPartials[i] = v);\n\t\t\tthis._partials = Array.from(fullPartials);\n\t\t\tthis.type = this._type;\n\t\t}\n\t}\n\n\t/**\n\t * Returns the real and imaginary components based\n\t * on the oscillator type.\n\t * @returns [real: Float32Array, imaginary: Float32Array]\n\t */\n\tprivate _getRealImaginary(type: ToneOscillatorType, phase: Radians): Float32Array[] {\n\t\tconst fftSize = 4096;\n\t\tlet periodicWaveSize = fftSize / 2;\n\n\t\tconst real = new Float32Array(periodicWaveSize);\n\t\tconst imag = new Float32Array(periodicWaveSize);\n\n\t\tlet partialCount = 1;\n\t\tif (type === \"custom\") {\n\t\t\tpartialCount = this._partials.length + 1;\n\t\t\tthis._partialCount = this._partials.length;\n\t\t\tperiodicWaveSize = partialCount;\n\t\t\t// if the partial count is 0, don't bother doing any computation\n\t\t\tif (this._partials.length === 0) {\n\t\t\t\treturn [real, imag];\n\t\t\t}\n\t\t} else {\n\t\t\tconst partial = /^(sine|triangle|square|sawtooth)(\\d+)$/.exec(type);\n\t\t\tif (partial) {\n\t\t\t\tpartialCount = parseInt(partial[2], 10) + 1;\n\t\t\t\tthis._partialCount = parseInt(partial[2], 10);\n\t\t\t\ttype = partial[1] as ToneOscillatorType;\n\t\t\t\tpartialCount = Math.max(partialCount, 2);\n\t\t\t\tperiodicWaveSize = partialCount;\n\t\t\t} else {\n\t\t\t\tthis._partialCount = 0;\n\t\t\t}\n\t\t\tthis._partials = [];\n\t\t}\n\n\t\tfor (let n = 1; n < periodicWaveSize; ++n) {\n\t\t\tconst piFactor = 2 / (n * Math.PI);\n\t\t\tlet b;\n\t\t\tswitch (type) {\n\t\t\t\tcase \"sine\":\n\t\t\t\t\tb = (n <= partialCount) ? 1 : 0;\n\t\t\t\t\tthis._partials[n - 1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"square\":\n\t\t\t\t\tb = (n & 1) ? 2 * piFactor : 0;\n\t\t\t\t\tthis._partials[n - 1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"sawtooth\":\n\t\t\t\t\tb = piFactor * ((n & 1) ? 1 : -1);\n\t\t\t\t\tthis._partials[n - 1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"triangle\":\n\t\t\t\t\tif (n & 1) {\n\t\t\t\t\t\tb = 2 * (piFactor * piFactor) * ((((n - 1) >> 1) & 1) ? -1 : 1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tb = 0;\n\t\t\t\t\t}\n\t\t\t\t\tthis._partials[n - 1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"custom\":\n\t\t\t\t\tb = this._partials[n - 1];\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new TypeError(\"Oscillator: invalid type: \" + type);\n\t\t\t}\n\t\t\tif (b !== 0) {\n\t\t\t\treal[n] = -b * Math.sin(phase * n);\n\t\t\t\timag[n] = b * Math.cos(phase * n);\n\t\t\t} else {\n\t\t\t\treal[n] = 0;\n\t\t\t\timag[n] = 0;\n\t\t\t}\n\t\t}\n\t\treturn [real, imag];\n\t}\n\n\t/**\n\t * Compute the inverse FFT for a given phase.\n\t */\n\tprivate _inverseFFT(real: Float32Array, imag: Float32Array, phase: Radians): number {\n\t\tlet sum = 0;\n\t\tconst len = real.length;\n\t\tfor (let i = 0; i < len; i++) {\n\t\t\tsum += real[i] * Math.cos(i * phase) + imag[i] * Math.sin(i * phase);\n\t\t}\n\t\treturn sum;\n\t}\n\n\t/**\n\t * Returns the initial value of the oscillator when stopped.\n\t * E.g. a \"sine\" oscillator with phase = 90 would return an initial value of -1.\n\t */\n\tgetInitialValue(): AudioRange {\n\t\tconst [real, imag] = this._getRealImaginary(this._type, 0);\n\t\tlet maxValue = 0;\n\t\tconst twoPi = Math.PI * 2;\n\t\tconst testPositions = 32;\n\t\t// check for peaks in 16 places\n\t\tfor (let i = 0; i < testPositions; i++) {\n\t\t\tmaxValue = Math.max(this._inverseFFT(real, imag, (i / testPositions) * twoPi), maxValue);\n\t\t}\n\t\treturn -this._inverseFFT(real, imag, this._phase) / maxValue;\n\t}\n\n\tget partials(): number[] {\n\t\treturn this._partials.slice(0, this.partialCount);\n\t}\n\tset partials(partials) {\n\t\tthis._partials = partials;\n\t\tthis._partialCount = this._partials.length;\n\t\tif (partials.length) {\n\t\t\tthis.type = \"custom\";\n\t\t}\n\t}\n\n\tget phase(): Degrees {\n\t\treturn this._phase * (180 / Math.PI);\n\t}\n\tset phase(phase) {\n\t\tthis._phase = phase * Math.PI / 180;\n\t\t// reset the type\n\t\tthis.type = this._type;\n\t}\n\n\tasync asArray(length: number = 1024): Promise<Float32Array> {\n\t\treturn generateWaveform(this, length);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (this._oscillator !== null) {\n\t\t\tthis._oscillator.dispose();\n\t\t}\n\t\tthis._wave = undefined;\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { SignalOperator } from \"./SignalOperator\";\nimport { WaveShaper } from \"./WaveShaper\";\n\n/**\n * AudioToGain converts an input in AudioRange [-1,1] to NormalRange [0,1].\n * See {@link GainToAudio}.\n * @category Signal\n */\nexport class AudioToGain extends SignalOperator<ToneAudioNodeOptions> {\n\n\treadonly name: string = \"AudioToGain\";\n\n\t/**\n\t * The node which converts the audio ranges\n\t */\n\tprivate _norm = new WaveShaper({\n\t\tcontext: this.context,\n\t\tmapping: x => (x + 1) / 2,\n\t});\n\n\t/**\n\t * The AudioRange input [-1, 1]\n\t */\n\tinput = this._norm;\n\n\t/**\n\t * The GainRange output [0, 1]\n\t */\n\toutput = this._norm;\n\n\t/**\n\t * clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._norm.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { Degrees, Frequency, Seconds, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { AudioToGain } from \"../../signal/AudioToGain\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { AMConstructorOptions, AMOscillatorOptions,\n\tgenerateWaveform, NonCustomOscillatorType,\n\tToneOscillatorInterface, \n\tToneOscillatorType } from \"./OscillatorInterface\";\n\nexport { AMOscillatorOptions } from \"./OscillatorInterface\";\n\n/**\n * An amplitude modulated oscillator node. It is implemented with\n * two oscillators, one which modulators the other's amplitude\n * through a gain node.\n * ```\n *    +-------------+       +----------+\n *    | Carrier Osc +>------> GainNode |\n *    +-------------+       |          +--->Output\n *                      +---> gain     |\n * +---------------+    |   +----------+\n * | Modulator Osc +>---+\n * +---------------+\n * ```\n *\n * @example\n * import { AMOscillator } from \"tone\";\n * // a sine oscillator amplitude-modulated by a square wave\n * const amOsc = new AMOscillator(\"Ab3\", \"sine\", \"square\").toDestination().start().stop(\"+6\");\n * // schedule a series of notes\n * amOsc.frequency.setValueAtTime(\"F3\", \"+0.25\");\n * amOsc.frequency.setValueAtTime(\"C4\", \"+0.5\");\n * amOsc.frequency.setValueAtTime(\"Bb3\", \"+1\");\n * amOsc.frequency.setValueAtTime(\"Ab3\", \"+2\");\n * // schedule harmonicity changes along with those notes\n * amOsc.harmonicity.setValueAtTime(0.5, \"+0.25\");\n * amOsc.harmonicity.setValueAtTime(2, \"+0.5\");\n * amOsc.harmonicity.setValueAtTime(1.5, \"+1\");\n * amOsc.harmonicity.setValueAtTime(1, \"+2\");\n * amOsc.harmonicity.linearRampTo(1.1, 2, \"+2\");\n * // fade it out all the way at the end\n * amOsc.volume.exponentialRampTo(-Infinity, 3, \"+3,\");\n * @category Source\n */\nexport class AMOscillator extends Source<AMOscillatorOptions> implements ToneOscillatorInterface {\n\n\treadonly name: string = \"AMOscillator\";\n\n\t/**\n\t * The carrier oscillator\n\t */\n\tprivate _carrier: Oscillator;\n\n\treadonly frequency: Signal<\"frequency\">;\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * The modulating oscillator\n\t */\n\tprivate _modulator: Oscillator;\n\n\t/**\n\t * convert the -1,1 output to 0,1\n\t */\n\tprivate _modulationScale = new AudioToGain({ context: this.context });\n\n\t/**\n\t * Harmonicity is the frequency ratio between the carrier and the modulator oscillators.\n\t * A harmonicity of 1 gives both oscillators the same frequency.\n\t * Harmonicity = 2 means a change of an octave.\n\t * @example\n\t * import { AMOscillator, Transport } from \"tone\";\n\t * const amOsc = new AMOscillator(\"D2\").toDestination().start();\n\t * Transport.scheduleRepeat(time => {\n\t * \tamOsc.harmonicity.setValueAtTime(1, time);\n\t * \tamOsc.harmonicity.setValueAtTime(0.5, time + 0.5);\n\t * \tamOsc.harmonicity.setValueAtTime(1.5, time + 1);\n\t * \tamOsc.harmonicity.setValueAtTime(1, time + 2);\n\t * \tamOsc.harmonicity.linearRampToValueAtTime(2, time + 4);\n\t * }, 4);\n\t * Transport.start();\n\t */\n\treadonly harmonicity: Signal<\"positive\">;\n\n\t/**\n\t * the node where the modulation happens\n\t */\n\tprivate _modulationNode = new Gain({\n\t\tcontext: this.context,\n\t});\n\n\t/**\n\t * @param frequency The starting frequency of the oscillator.\n\t * @param type The type of the carrier oscillator.\n\t * @param modulationType The type of the modulator oscillator.\n\t */\n\tconstructor(frequency?: Frequency, type?: ToneOscillatorType, modulationType?: ToneOscillatorType);\n\tconstructor(options?: Partial<AMConstructorOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(AMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]));\n\t\tconst options = optionsFromArguments(AMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]);\n\n\t\tthis._carrier = new Oscillator({\n\t\t\tcontext: this.context,\n\t\t\tdetune: options.detune,\n\t\t\tfrequency: options.frequency,\n\t\t\tonstop: () => this.onstop(this),\n\t\t\tphase: options.phase,\n\t\t\ttype: options.type,\n\t\t} as OscillatorOptions);\n\t\tthis.frequency = this._carrier.frequency,\n\t\tthis.detune = this._carrier.detune;\n\n\t\tthis._modulator = new Oscillator({\n\t\t\tcontext: this.context,\n\t\t\tphase: options.phase,\n\t\t\ttype: options.modulationType,\n\t\t} as OscillatorOptions);\n\n\t\tthis.harmonicity = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.harmonicity,\n\t\t});\n\n\t\t// connections\n\t\tthis.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t\tthis._modulator.chain(this._modulationScale, this._modulationNode.gain);\n\t\tthis._carrier.chain(this._modulationNode, this.output);\n\n\t\treadOnly(this, [\"frequency\", \"detune\", \"harmonicity\"]);\n\t}\n\n\tstatic getDefaults(): AMOscillatorOptions {\n\t\treturn Object.assign(Oscillator.getDefaults(), {\n\t\t\tharmonicity: 1,\n\t\t\tmodulationType: \"square\" as NonCustomOscillatorType,\n\t\t});\n\t}\n\n\t/**\n\t * start the oscillator\n\t */\n\tprotected _start(time: Seconds): void {\n\t\tthis._modulator.start(time);\n\t\tthis._carrier.start(time);\n\t}\n\n\t/**\n\t * stop the oscillator\n\t */\n\tprotected _stop(time: Seconds): void {\n\t\tthis._modulator.stop(time);\n\t\tthis._carrier.stop(time);\n\t}\n\n\t/**\n\t * restart the oscillator\n\t */\n\trestart(time?: Time): this {\n\t\tthis._modulator.restart(time);\n\t\tthis._carrier.restart(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The type of the carrier oscillator\n\t */\n\tget type(): ToneOscillatorType {\n\t\treturn this._carrier.type;\n\t}\n\tset type(type: ToneOscillatorType) {\n\t\tthis._carrier.type = type;\n\t}\n\n\tget baseType(): OscillatorType {\n\t\treturn this._carrier.baseType;\n\t}\n\tset baseType(baseType: OscillatorType) {\n\t\tthis._carrier.baseType = baseType;\n\t}\n\n\tget partialCount(): number {\n\t\treturn this._carrier.partialCount;\n\t}\n\tset partialCount(partialCount: number) {\n\t\tthis._carrier.partialCount = partialCount;\n\t}\n\n\t/**\n\t * The type of the modulator oscillator\n\t */\n\tget modulationType(): ToneOscillatorType {\n\t\treturn this._modulator.type;\n\t}\n\tset modulationType(type: ToneOscillatorType) {\n\t\tthis._modulator.type = type;\n\t}\n\n\tget phase(): Degrees {\n\t\treturn this._carrier.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._carrier.phase = phase;\n\t\tthis._modulator.phase = phase;\n\t}\n\n\tget partials(): number[] {\n\t\treturn this._carrier.partials;\n\t}\n\tset partials(partials: number[]) {\n\t\tthis._carrier.partials = partials;\n\t}\n\n\tasync asArray(length: number = 1024): Promise<Float32Array> {\n\t\treturn generateWaveform(this, length);\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\tthis.harmonicity.dispose();\n\t\tthis._carrier.dispose();\n\t\tthis._modulator.dispose();\n\t\tthis._modulationNode.dispose();\n\t\tthis._modulationScale.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { Degrees, Frequency, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { FMConstructorOptions, FMOscillatorOptions,\n\tgenerateWaveform, NonCustomOscillatorType, ToneOscillatorInterface, ToneOscillatorType } from \"./OscillatorInterface\";\n\nexport { FMOscillatorOptions } from \"./OscillatorInterface\";\n/**\n * FMOscillator implements a frequency modulation synthesis\n * ```\n *                                              +-------------+\n * +---------------+        +-------------+     | Carrier Osc |\n * | Modulator Osc +>-------> GainNode    |     |             +--->Output\n * +---------------+        |             +>----> frequency   |\n *                       +--> gain        |     +-------------+\n *                       |  +-------------+\n * +-----------------+   |\n * | modulationIndex +>--+\n * +-----------------+\n * ```\n *\n * @example\n * import { FMOscillator } from \"tone\";\n * // a sine oscillator frequency-modulated by a square wave\n * const fmOsc = new FMOscillator(\"Ab3\", \"sine\", \"square\").toDestination().start();\n * @category Source\n */\nexport class FMOscillator extends Source<FMOscillatorOptions> implements ToneOscillatorInterface {\n\n\treadonly name: string = \"FMOscillator\";\n\n\t/**\n\t * The carrier oscillator\n\t */\n\tprivate _carrier: Oscillator;\n\n\treadonly frequency: Signal<\"frequency\">;\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * The modulating oscillator\n\t */\n\tprivate _modulator: Oscillator;\n\n\t/**\n\t * Harmonicity is the frequency ratio between the carrier and the modulator oscillators.\n\t * A harmonicity of 1 gives both oscillators the same frequency.\n\t * Harmonicity = 2 means a change of an octave.\n\t * @example\n\t * import { FMOscillator } from \"tone\";\n\t * const fmOsc = new FMOscillator(\"D2\").toDestination().start();\n\t * // pitch the modulator an octave below carrier\n\t * fmOsc.harmonicity.value = 0.5;\n\t */\n\treadonly harmonicity: Signal<\"positive\">;\n\n\t/**\n\t * The modulation index which is in essence the depth or amount of the modulation. In other terms it is the\n\t * ratio of the frequency of the modulating signal (mf) to the amplitude of the\n\t * modulating signal (ma) -- as in ma/mf.\n\t */\n\treadonly modulationIndex: Signal<\"positive\">;\n\n\t/**\n\t * the node where the modulation happens\n\t */\n\tprivate _modulationNode: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\n\t/**\n\t * @param frequency The starting frequency of the oscillator.\n\t * @param type The type of the carrier oscillator.\n\t * @param modulationType The type of the modulator oscillator.\n\t */\n\tconstructor(frequency?: Frequency, type?: ToneOscillatorType, modulationType?: ToneOscillatorType);\n\tconstructor(options?: Partial<FMConstructorOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(FMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]));\n\t\tconst options = optionsFromArguments(FMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]);\n\n\t\tthis._carrier = new Oscillator({\n\t\t\tcontext: this.context,\n\t\t\tdetune: options.detune,\n\t\t\tfrequency: 0,\n\t\t\tonstop: () => this.onstop(this),\n\t\t\tphase: options.phase,\n\t\t\ttype: options.type,\n\t\t} as OscillatorOptions);\n\n\t\tthis.detune = this._carrier.detune;\n\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t});\n\n\t\tthis._modulator = new Oscillator({\n\t\t\tcontext: this.context,\n\t\t\tphase: options.phase,\n\t\t\ttype: options.modulationType,\n\t\t} as OscillatorOptions);\n\n\t\tthis.harmonicity = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.harmonicity,\n\t\t});\n\n\t\tthis.modulationIndex = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.modulationIndex,\n\t\t});\n\n\t\t// connections\n\t\tthis.frequency.connect(this._carrier.frequency);\n\t\tthis.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t\tthis.frequency.chain(this.modulationIndex, this._modulationNode);\n\t\tthis._modulator.connect(this._modulationNode.gain);\n\t\tthis._modulationNode.connect(this._carrier.frequency);\n\t\tthis._carrier.connect(this.output);\n\t\tthis.detune.connect(this._modulator.detune);\n\n\t\treadOnly(this, [\"modulationIndex\", \"frequency\", \"detune\", \"harmonicity\"]);\n\t}\n\n\tstatic getDefaults(): FMOscillatorOptions {\n\t\treturn Object.assign(Oscillator.getDefaults(), {\n\t\t\tharmonicity: 1,\n\t\t\tmodulationIndex: 2,\n\t\t\tmodulationType: \"square\" as NonCustomOscillatorType,\n\t\t});\n\t}\n\n\t/**\n\t * start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\tthis._modulator.start(time);\n\t\tthis._carrier.start(time);\n\t}\n\n\t/**\n\t * stop the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\tthis._modulator.stop(time);\n\t\tthis._carrier.stop(time);\n\t}\n\n\t/**\n\t * stop and restart the oscillator\n\t */\n\trestart(time?: Time): this {\n\t\tthis._modulator.restart(time);\n\t\tthis._carrier.restart(time);\n\t\treturn this;\n\t}\n\n\tget type(): ToneOscillatorType {\n\t\treturn this._carrier.type;\n\t}\n\tset type(type: ToneOscillatorType) {\n\t\tthis._carrier.type = type;\n\t}\n\n\tget baseType(): OscillatorType {\n\t\treturn this._carrier.baseType;\n\t}\n\tset baseType(baseType: OscillatorType) {\n\t\tthis._carrier.baseType = baseType;\n\t}\n\n\tget partialCount(): number {\n\t\treturn this._carrier.partialCount;\n\t}\n\tset partialCount(partialCount: number) {\n\t\tthis._carrier.partialCount = partialCount;\n\t}\n\n\t/**\n\t * The type of the modulator oscillator\n\t */\n\tget modulationType(): ToneOscillatorType {\n\t\treturn this._modulator.type;\n\t}\n\tset modulationType(type: ToneOscillatorType) {\n\t\tthis._modulator.type = type;\n\t}\n\n\tget phase(): Degrees {\n\t\treturn this._carrier.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._carrier.phase = phase;\n\t\tthis._modulator.phase = phase;\n\t}\n\n\tget partials(): number[] {\n\t\treturn this._carrier.partials;\n\t}\n\tset partials(partials: number[]) {\n\t\tthis._carrier.partials = partials;\n\t}\n\n\tasync asArray(length: number = 1024): Promise<Float32Array> {\n\t\treturn generateWaveform(this, length);\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.harmonicity.dispose();\n\t\tthis._carrier.dispose();\n\t\tthis._modulator.dispose();\n\t\tthis._modulationNode.dispose();\n\t\tthis.modulationIndex.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { AudioRange, Degrees, Frequency, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { WaveShaper } from \"../../signal/WaveShaper\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { generateWaveform, PulseOscillatorOptions, ToneOscillatorInterface } from \"./OscillatorInterface\";\n\nexport { PulseOscillatorOptions } from \"./OscillatorInterface\";\n\n/**\n * PulseOscillator is an oscillator with control over pulse width,\n * also known as the duty cycle. At 50% duty cycle (width = 0) the wave is\n * a square wave.\n * [Read more](https://wigglewave.wordpress.com/2014/08/16/pulse-waveforms-and-harmonics/).\n * ```\n *    width = -0.25        width = 0.0          width = 0.25\n *\n *   +-----+            +-------+       +    +-------+     +-+\n *   |     |            |       |       |            |     |\n *   |     |            |       |       |            |     |\n * +-+     +-------+    +       +-------+            +-----+\n *\n *\n *    width = -0.5                              width = 0.5\n *\n *     +---+                                 +-------+   +---+\n *     |   |                                         |   |\n *     |   |                                         |   |\n * +---+   +-------+                                 +---+\n *\n *\n *    width = -0.75                             width = 0.75\n *\n *       +-+                                 +-------+ +-----+\n *       | |                                         | |\n *       | |                                         | |\n * +-----+ +-------+                                 +-+\n * ```\n * @example\n * import { PulseOscillator } from \"tone\";\n * const pulse = new PulseOscillator(\"E5\", 0.4).toDestination().start();\n * @category Source\n */\nexport class PulseOscillator extends Source<PulseOscillatorOptions> implements ToneOscillatorInterface {\n\n\treadonly name: string = \"PulseOscillator\";\n\n\t/**\n\t * The width of the pulse.\n\t */\n\twidth: Signal<\"audioRange\">;\n\n\t/**\n\t * gate the width amount\n\t */\n\tprivate _widthGate: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\n\t/**\n\t * the sawtooth oscillator\n\t */\n\tprivate _sawtooth: Oscillator;\n\n\t/**\n\t * The frequency control.\n\t */\n\tfrequency: Signal<\"frequency\">;\n\n\t/**\n\t * The detune in cents.\n\t */\n\tdetune: Signal<\"cents\">;\n\n\t/**\n\t * Threshold the signal to turn it into a square\n\t */\n\tprivate _thresh = new WaveShaper({\n\t\tcontext: this.context,\n\t\tmapping: val => val <= 0 ? -1 : 1,\n\t});\n\n\t/**\n\t * @param frequency The frequency of the oscillator\n\t * @param width The width of the pulse\n\t */\n\tconstructor(frequency?: Frequency, width?: AudioRange);\n\tconstructor(options?: Partial<PulseOscillatorOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(PulseOscillator.getDefaults(), arguments, [\"frequency\", \"width\"]));\n\t\tconst options = optionsFromArguments(PulseOscillator.getDefaults(), arguments, [\"frequency\", \"width\"]);\n\n\t\tthis.width = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"audioRange\",\n\t\t\tvalue: options.width,\n\t\t});\n\n\t\tthis._sawtooth = new Oscillator({\n\t\t\tcontext: this.context,\n\t\t\tdetune: options.detune,\n\t\t\tfrequency: options.frequency,\n\t\t\tonstop: () => this.onstop(this),\n\t\t\tphase: options.phase,\n\t\t\ttype: \"sawtooth\",\n\t\t});\n\t\tthis.frequency = this._sawtooth.frequency;\n\t\tthis.detune = this._sawtooth.detune;\n\n\t\t// connections\n\t\tthis._sawtooth.chain(this._thresh, this.output);\n\t\tthis.width.chain(this._widthGate, this._thresh);\n\t\treadOnly(this, [\"width\", \"frequency\", \"detune\"]);\n\t}\n\n\tstatic getDefaults(): PulseOscillatorOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tfrequency: 440,\n\t\t\tphase: 0,\n\t\t\ttype: \"pulse\" as \"pulse\",\n\t\t\twidth: 0.2,\n\t\t});\n\t}\n\n\t/**\n\t * start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._sawtooth.start(time);\n\t\tthis._widthGate.gain.setValueAtTime(1, time);\n\t}\n\n\t/**\n\t * stop the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._sawtooth.stop(time);\n\t\t// the width is still connected to the output.\n\t\t// that needs to be stopped also\n\t\tthis._widthGate.gain.cancelScheduledValues(time);\n\t\tthis._widthGate.gain.setValueAtTime(0, time);\n\t}\n\n\t/**\n\t * Restart the oscillator\n\t */\n\trestart(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._sawtooth.restart(computedTime);\n\t\tthis._widthGate.gain.cancelScheduledValues(computedTime);\n\t\tthis._widthGate.gain.setValueAtTime(1, computedTime);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._sawtooth.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._sawtooth.phase = phase;\n\t}\n\n\t/**\n\t * The type of the oscillator. Always returns \"pulse\".\n\t */\n\tget type(): \"pulse\" {\n\t\treturn \"pulse\";\n\t}\n\n\t/**\n\t * The baseType of the oscillator. Always returns \"pulse\".\n\t */\n\tget baseType(): \"pulse\" {\n\t\treturn \"pulse\";\n\t}\n\n\t/**\n\t * The partials of the waveform. Cannot set partials for this waveform type\n\t */\n\tget partials(): number[] {\n\t\treturn [];\n\t}\n\n\t/**\n\t * No partials for this waveform type.\n\t */\n\tget partialCount(): number {\n\t\treturn 0;\n\t}\n\n\tasync asArray(length: number = 1024): Promise<Float32Array> {\n\t\treturn generateWaveform(this, length);\n\t}\n\n\t/**\n\t * Clean up method.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._sawtooth.dispose();\n\t\tthis.width.dispose();\n\t\tthis._widthGate.dispose();\n\t\tthis._thresh.dispose();\n\t\treturn this;\n\t}\n}\n","import { Cents, Degrees, Frequency, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp, readOnly } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { FatConstructorOptions, FatOscillatorOptions,\n\tgenerateWaveform, ToneOscillatorInterface, ToneOscillatorType } from \"./OscillatorInterface\";\nimport { assertRange } from \"../../core/util/Debug\";\n\nexport { FatOscillatorOptions } from \"./OscillatorInterface\";\n\n/**\n * FatOscillator is an array of oscillators with detune spread between the oscillators\n * @example\n * import { FatOscillator } from \"tone\";\n * const fatOsc = new FatOscillator(\"Ab3\", \"sawtooth\", 40).toDestination().start();\n * @category Source\n */\nexport class FatOscillator extends Source<FatOscillatorOptions> implements ToneOscillatorInterface {\n\n\treadonly name: string = \"FatOscillator\";\n\n\treadonly frequency: Signal<\"frequency\">;\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * The array of oscillators\n\t */\n\tprivate _oscillators: Oscillator[] = [];\n\n\t/**\n\t * The total spread of the oscillators\n\t */\n\tprivate _spread: Cents;\n\n\t/**\n\t * The type of the oscillator\n\t */\n\tprivate _type: ToneOscillatorType;\n\n\t/**\n\t * The phase of the oscillators\n\t */\n\tprivate _phase: Degrees;\n\n\t/**\n\t * The partials array\n\t */\n\tprivate _partials: number[];\n\n\t/**\n\t * The number of partials to use\n\t */\n\tprivate _partialCount: number;\n\n\t/**\n\t * @param frequency The oscillator's frequency.\n\t * @param type The type of the oscillator.\n\t * @param spread The detune spread between the oscillators.\n\t */\n\tconstructor(frequency?: Frequency, type?: ToneOscillatorType, spread?: Cents);\n\tconstructor(options?: Partial<FatConstructorOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(FatOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"spread\"]));\n\t\tconst options = optionsFromArguments(FatOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"spread\"]);\n\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t});\n\t\tthis.detune = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune,\n\t\t});\n\n\t\tthis._spread = options.spread;\n\t\tthis._type = options.type;\n\t\tthis._phase = options.phase;\n\t\tthis._partials = options.partials;\n\t\tthis._partialCount = options.partialCount;\n\n\t\t// set the count initially\n\t\tthis.count = options.count;\n\n\t\treadOnly(this, [\"frequency\", \"detune\"]);\n\t}\n\n\tstatic getDefaults(): FatOscillatorOptions {\n\t\treturn Object.assign(Oscillator.getDefaults(), {\n\t\t\tcount: 3,\n\t\t\tspread: 20,\n\t\t\ttype: \"sawtooth\",\n\t\t});\n\t}\n\n\t/**\n\t * start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._forEach(osc => osc.start(time));\n\t}\n\n\t/**\n\t * stop the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._forEach(osc => osc.stop(time));\n\t}\n\n\t/**\n\t * restart the oscillator\n\t */\n\trestart(time): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis._forEach(osc => osc.restart(time));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Iterate over all of the oscillators\n\t */\n\tprivate _forEach(iterator: (osc: Oscillator, index: number) => void): void {\n\t\tfor (let i = 0; i < this._oscillators.length; i++) {\n\t\t\titerator(this._oscillators[i], i);\n\t\t}\n\t}\n\n\t/**\n\t * The type of the oscillator\n\t */\n\tget type(): ToneOscillatorType {\n\t\treturn this._type;\n\t}\n\tset type(type: ToneOscillatorType) {\n\t\tthis._type = type;\n\t\tthis._forEach(osc => osc.type = type);\n\t}\n\n\t/**\n\t * The detune spread between the oscillators. If \"count\" is\n\t * set to 3 oscillators and the \"spread\" is set to 40,\n\t * the three oscillators would be detuned like this: [-20, 0, 20]\n\t * for a total detune spread of 40 cents.\n\t * @example\n\t * import { FatOscillator } from \"tone\";\n\t * const fatOsc = new FatOscillator().toDestination().start();\n\t * fatOsc.spread = 70;\n\t */\n\tget spread(): Cents {\n\t\treturn this._spread;\n\t}\n\tset spread(spread: Cents) {\n\t\tthis._spread = spread;\n\t\tif (this._oscillators.length > 1) {\n\t\t\tconst start = -spread / 2;\n\t\t\tconst step = spread / (this._oscillators.length - 1);\n\t\t\tthis._forEach((osc, i) => osc.detune.value = start + step * i);\n\t\t}\n\t}\n\n\t/**\n\t * The number of detuned oscillators. Must be an integer greater than 1.\n\t * @example\n\t * import { FatOscillator } from \"tone\";\n\t * const fatOsc = new FatOscillator(\"C#3\", \"sawtooth\").toDestination().start();\n\t * // use 4 sawtooth oscillators\n\t * fatOsc.count = 4;\n\t */\n\tget count(): number {\n\t\treturn this._oscillators.length;\n\t}\n\tset count(count: number) {\n\t\tassertRange(count, 1);\n\t\tif (this._oscillators.length !== count) {\n\t\t\t// dispose the previous oscillators\n\t\t\tthis._forEach(osc => osc.dispose());\n\t\t\tthis._oscillators = [];\n\t\t\tfor (let i = 0; i < count; i++) {\n\t\t\t\tconst osc = new Oscillator({\n\t\t\t\t\tcontext: this.context,\n\t\t\t\t\tonstop: i === 0 ? () => this.onstop(this) : noOp,\n\t\t\t\t});\n\t\t\t\tif (this.type === \"custom\") {\n\t\t\t\t\tosc.partials = this._partials;\n\t\t\t\t} else {\n\t\t\t\t\tosc.type = this._type;\n\t\t\t\t}\n\t\t\t\tosc.partialCount = this._partialCount;\n\t\t\t\tosc.phase = this._phase + (i / count) * 360;\n\t\t\t\tosc.volume.value = -6 - count * 1.1;\n\t\t\t\tthis.frequency.connect(osc.frequency);\n\t\t\t\tthis.detune.connect(osc.detune);\n\t\t\t\tosc.connect(this.output);\n\t\t\t\tthis._oscillators[i] = osc;\n\t\t\t}\n\t\t\t// set the spread\n\t\t\tthis.spread = this._spread;\n\t\t\tif (this.state === \"started\") {\n\t\t\t\tthis._forEach(osc => osc.start());\n\t\t\t}\n\t\t}\n\t}\n\n\tget phase(): Degrees {\n\t\treturn this._phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._phase = phase;\n\t\tthis._forEach(osc => osc.phase = phase);\n\t}\n\n\tget baseType(): OscillatorType {\n\t\treturn this._oscillators[0].baseType;\n\t}\n\tset baseType(baseType: OscillatorType) {\n\t\tthis._forEach(osc => osc.baseType = baseType);\n\t\tthis._type = this._oscillators[0].type;\n\t}\n\n\tget partials(): number[] {\n\t\treturn this._oscillators[0].partials;\n\t}\n\tset partials(partials: number[]) {\n\t\tthis._partials = partials;\n\t\tthis._partialCount = this._partials.length;\n\t\tif (partials.length) {\n\t\t\tthis._type = \"custom\";\n\t\t\tthis._forEach(osc => osc.partials = partials);\n\t\t}\n\t}\n\n\tget partialCount(): number {\n\t\treturn this._oscillators[0].partialCount;\n\t}\n\tset partialCount(partialCount: number) {\n\t\tthis._partialCount = partialCount;\n\t\tthis._forEach(osc => osc.partialCount = partialCount);\n\t\tthis._type = this._oscillators[0].type;\n\t}\n\n\tasync asArray(length: number = 1024): Promise<Float32Array> {\n\t\treturn generateWaveform(this, length);\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\tthis._forEach(osc => osc.dispose());\n\t\treturn this;\n\t}\n}\n","import { Degrees, Frequency, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { generateWaveform, PWMOscillatorOptions, ToneOscillatorInterface } from \"./OscillatorInterface\";\nimport { PulseOscillator } from \"./PulseOscillator\";\n\nexport { PWMOscillatorOptions } from \"./OscillatorInterface\";\n\n/**\n * PWMOscillator modulates the width of a Tone.PulseOscillator\n * at the modulationFrequency. This has the effect of continuously\n * changing the timbre of the oscillator by altering the harmonics\n * generated.\n * @example\n * import { PWMOscillator } from \"tone\";\n * const pwm = new PWMOscillator(\"Ab3\", 0.3).toDestination().start();\n * @category Source\n */\nexport class PWMOscillator extends Source<PWMOscillatorOptions> implements ToneOscillatorInterface {\n\n\treadonly name: string = \"PWMOscillator\";\n\n\treadonly sourceType = \"pwm\";\n\n\t/**\n\t * the pulse oscillator\n\t */\n\tprivate _pulse: PulseOscillator;\n\t/**\n\t * the modulator\n\t */\n\tprivate _modulator: Oscillator;\n\n\t/**\n\t * Scale the oscillator so it doesn't go silent\n\t * at the extreme values.\n\t */\n\tprivate _scale: Multiply = new Multiply({\n\t\tcontext: this.context,\n\t\tvalue: 2,\n\t});\n\n\t/**\n\t * The frequency control.\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * The detune of the oscillator.\n\t */\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * The modulation rate of the oscillator.\n\t */\n\treadonly modulationFrequency: Signal<\"frequency\">;\n\n\t/**\n\t * @param {Frequency} frequency The starting frequency of the oscillator.\n\t * @param {Frequency} modulationFrequency The modulation frequency of the width of the pulse.\n\t */\n\tconstructor(frequency?: Frequency, modulationFrequency?: Frequency);\n\tconstructor(options?: Partial<PWMOscillatorOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(PWMOscillator.getDefaults(), arguments, [\"frequency\", \"modulationFrequency\"]));\n\t\tconst options = optionsFromArguments(PWMOscillator.getDefaults(), arguments, [\"frequency\", \"modulationFrequency\"]);\n\n\t\tthis._pulse = new PulseOscillator({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.modulationFrequency,\n\t\t});\n\t\t// change the pulse oscillator type\n\t\t// @ts-ignore\n\t\tthis._pulse._sawtooth.type = \"sine\";\n\n\t\tthis.modulationFrequency = this._pulse.frequency;\n\n\t\tthis._modulator = new Oscillator({\n\t\t\tcontext: this.context,\n\t\t\tdetune: options.detune,\n\t\t\tfrequency: options.frequency,\n\t\t\tonstop: () => this.onstop(this),\n\t\t\tphase: options.phase,\n\t\t});\n\n\t\tthis.frequency = this._modulator.frequency;\n\t\tthis.detune = this._modulator.detune;\n\n\t\t// connections\n\t\tthis._modulator.chain(this._scale, this._pulse.width);\n\t\tthis._pulse.connect(this.output);\n\t\treadOnly(this, [\"modulationFrequency\", \"frequency\", \"detune\"]);\n\t}\n\n\tstatic getDefaults(): PWMOscillatorOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tfrequency: 440,\n\t\t\tmodulationFrequency: 0.4,\n\t\t\tphase: 0,\n\t\t\ttype: \"pwm\" as \"pwm\",\n\t\t});\n\t}\n\t/**\n\t * start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._modulator.start(time);\n\t\tthis._pulse.start(time);\n\t}\n\n\t/**\n\t * stop the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._modulator.stop(time);\n\t\tthis._pulse.stop(time);\n\t}\n\n\t/**\n\t * restart the oscillator\n\t */\n\trestart(time?: Time): this {\n\t\tthis._modulator.restart(time);\n\t\tthis._pulse.restart(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The type of the oscillator. Always returns \"pwm\".\n\t */\n\tget type(): \"pwm\" {\n\t\treturn \"pwm\";\n\t}\n\n\t/**\n\t * The baseType of the oscillator. Always returns \"pwm\".\n\t */\n\tget baseType(): \"pwm\" {\n\t\treturn \"pwm\";\n\t}\n\n\t/**\n\t * The partials of the waveform. Cannot set partials for this waveform type\n\t */\n\tget partials(): number[] {\n\t\treturn [];\n\t}\n\n\t/**\n\t * No partials for this waveform type.\n\t */\n\tget partialCount(): number {\n\t\treturn 0;\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._modulator.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._modulator.phase = phase;\n\t}\n\n\tasync asArray(length: number = 1024): Promise<Float32Array> {\n\t\treturn generateWaveform(this, length);\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._pulse.dispose();\n\t\tthis._scale.dispose();\n\t\tthis._modulator.dispose();\n\t\treturn this;\n\t}\n}\n","import { Cents, Degrees, Frequency, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { isNumber, isString } from \"../../core/util/TypeCheck\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { AMOscillator } from \"./AMOscillator\";\nimport { FatOscillator } from \"./FatOscillator\";\nimport { FMOscillator } from \"./FMOscillator\";\nimport { Oscillator } from \"./Oscillator\";\nimport { generateWaveform,\n\tOmniOscillatorConstructorOptions, OmniOscillatorOptions,\n\tOmniOscillatorType, ToneOscillatorInterface, ToneOscillatorType } from \"./OscillatorInterface\";\nimport { PulseOscillator } from \"./PulseOscillator\";\nimport { PWMOscillator } from \"./PWMOscillator\";\n\nexport { OmniOscillatorOptions } from \"./OscillatorInterface\";\n\n/**\n * All of the oscillator types that OmniOscillator can take on\n */\ntype AnyOscillator = Oscillator | PWMOscillator | PulseOscillator | FatOscillator | AMOscillator | FMOscillator;\n\n/**\n * All of the Oscillator constructor types mapped to their name.\n */\ninterface OmniOscillatorSource {\n\t\"fm\": FMOscillator;\n\t\"am\": AMOscillator;\n\t\"pwm\": PWMOscillator;\n\t\"pulse\": PulseOscillator;\n\t\"oscillator\": Oscillator;\n\t\"fat\": FatOscillator;\n}\n\n/**\n * The available oscillator types.\n */\nexport type OmniOscSourceType = keyof OmniOscillatorSource;\n\n// Conditional Types\ntype IsAmOrFmOscillator<Osc, Ret> = Osc extends AMOscillator ? Ret : Osc extends FMOscillator ? Ret : undefined;\ntype IsFatOscillator<Osc, Ret> = Osc extends FatOscillator ? Ret : undefined;\ntype IsPWMOscillator<Osc, Ret> = Osc extends PWMOscillator ? Ret : undefined;\ntype IsPulseOscillator<Osc, Ret> = Osc extends PulseOscillator ? Ret : undefined;\ntype IsFMOscillator<Osc, Ret> = Osc extends FMOscillator ? Ret : undefined;\n\ntype AnyOscillatorConstructor = new (...args: any[]) => AnyOscillator;\n\nconst OmniOscillatorSourceMap: {\n\t[key in OmniOscSourceType]: AnyOscillatorConstructor\n} = {\n\tam: AMOscillator,\n\tfat: FatOscillator,\n\tfm: FMOscillator,\n\toscillator: Oscillator,\n\tpulse: PulseOscillator,\n\tpwm: PWMOscillator,\n};\n\n/**\n * OmniOscillator aggregates Tone.Oscillator, Tone.PulseOscillator,\n * Tone.PWMOscillator, Tone.FMOscillator, Tone.AMOscillator, and Tone.FatOscillator\n * into one class. The oscillator class can be changed by setting the `type`.\n * `omniOsc.type = \"pwm\"` will set it to the Tone.PWMOscillator. Prefixing\n * any of the basic types (\"sine\", \"square4\", etc.) with \"fm\", \"am\", or \"fat\"\n * will use the FMOscillator, AMOscillator or FatOscillator respectively.\n * For example: `omniOsc.type = \"fatsawtooth\"` will create set the oscillator\n * to a FatOscillator of type \"sawtooth\".\n * @example\n * import { OmniOscillator } from \"tone\";\n * const omniOsc = new OmniOscillator(\"C#4\", \"pwm\");\n * @category Source\n */\nexport class OmniOscillator<OscType extends AnyOscillator>\n\textends Source<OmniOscillatorConstructorOptions>\n\timplements Omit<ToneOscillatorInterface, \"type\"> {\n\n\treadonly name: string = \"OmniOscillator\";\n\n\treadonly frequency: Signal<\"frequency\">;\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * The oscillator that can switch types\n\t */\n\tprivate _oscillator!: AnyOscillator;\n\n\t/**\n\t * the type of the oscillator source\n\t */\n\tprivate _sourceType!: OmniOscSourceType;\n\n\t/**\n\t * @param frequency The initial frequency of the oscillator.\n\t * @param type The type of the oscillator.\n\t */\n\tconstructor(frequency?: Frequency, type?: OmniOscillatorType);\n\tconstructor(options?: Partial<OmniOscillatorConstructorOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(OmniOscillator.getDefaults(), arguments, [\"frequency\", \"type\"]));\n\t\tconst options = optionsFromArguments(OmniOscillator.getDefaults(), arguments, [\"frequency\", \"type\"]);\n\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t});\n\t\tthis.detune = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune,\n\t\t});\n\t\treadOnly(this, [\"frequency\", \"detune\"]);\n\n\t\t// set the options\n\t\tthis.set(options);\n\t}\n\n\tstatic getDefaults(): OmniOscillatorOptions {\n\t\treturn Object.assign(\n\t\t\tOscillator.getDefaults(),\n\t\t\tFMOscillator.getDefaults(),\n\t\t\tAMOscillator.getDefaults(),\n\t\t\tFatOscillator.getDefaults(),\n\t\t\tPulseOscillator.getDefaults(),\n\t\t\tPWMOscillator.getDefaults(),\n\t\t);\n\t}\n\n\t/**\n\t * start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\tthis._oscillator.start(time);\n\t}\n\n\t/**\n\t * start the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\tthis._oscillator.stop(time);\n\t}\n\n\trestart(time?: Time): this {\n\t\tthis._oscillator.restart(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The type of the oscillator. Can be any of the basic types: sine, square, triangle, sawtooth. Or\n\t * prefix the basic types with \"fm\", \"am\", or \"fat\" to use the FMOscillator, AMOscillator or FatOscillator\n\t * types. The oscillator could also be set to \"pwm\" or \"pulse\". All of the parameters of the\n\t * oscillator's class are accessible when the oscillator is set to that type, but throws an error\n\t * when it's not. \n\t * @example\n\t * import { OmniOscillator } from \"tone\";\n\t * const omniOsc = new OmniOscillator().toDestination().start();\n\t * omniOsc.type = \"pwm\";\n\t * // modulationFrequency is parameter which is available\n\t * // only when the type is \"pwm\".\n\t * omniOsc.modulationFrequency.value = 0.5;\n\t * @example\n\t * import { OmniOscillator } from \"tone\";\n\t * const omniOsc = new OmniOscillator().toDestination().start();\n\t * // an square wave frequency modulated by a sawtooth\n\t * omniOsc.type = \"fmsquare\";\n\t * omniOsc.modulationType = \"sawtooth\";\n\t */\n\tget type(): OmniOscillatorType {\n\t\tlet prefix = \"\";\n\t\tif ([\"am\", \"fm\", \"fat\"].some(p => this._sourceType === p)) {\n\t\t\tprefix = this._sourceType;\n\t\t}\n\t\treturn prefix + this._oscillator.type as OmniOscillatorType;\n\t}\n\tset type(type) {\n\t\tif (type.substr(0, 2) === \"fm\") {\n\t\t\tthis._createNewOscillator(\"fm\");\n\t\t\tthis._oscillator = this._oscillator as FMOscillator;\n\t\t\tthis._oscillator.type = type.substr(2) as ToneOscillatorType;\n\t\t} else if (type.substr(0, 2) === \"am\") {\n\t\t\tthis._createNewOscillator(\"am\");\n\t\t\tthis._oscillator = this._oscillator as AMOscillator;\n\t\t\tthis._oscillator.type = type.substr(2) as ToneOscillatorType;\n\t\t} else if (type.substr(0, 3) === \"fat\") {\n\t\t\tthis._createNewOscillator(\"fat\");\n\t\t\tthis._oscillator = this._oscillator as FatOscillator;\n\t\t\tthis._oscillator.type = type.substr(3) as ToneOscillatorType;\n\t\t} else if (type === \"pwm\") {\n\t\t\tthis._createNewOscillator(\"pwm\");\n\t\t\tthis._oscillator = this._oscillator as PWMOscillator;\n\t\t} else if (type === \"pulse\") {\n\t\t\tthis._createNewOscillator(\"pulse\");\n\t\t} else {\n\t\t\tthis._createNewOscillator(\"oscillator\");\n\t\t\tthis._oscillator = this._oscillator as Oscillator;\n\t\t\tthis._oscillator.type = (type as ToneOscillatorType);\n\t\t}\n\t}\n\n\t/**\n\t * The value is an empty array when the type is not \"custom\".\n\t * This is not available on \"pwm\" and \"pulse\" oscillator types.\n\t * See [[Oscillator.partials]]\n\t */\n\tget partials(): number[] {\n\t\treturn this._oscillator.partials;\n\t}\n\tset partials(partials) {\n\t\tif (!this._getOscType(this._oscillator, \"pulse\") && !this._getOscType(this._oscillator, \"pwm\")) {\n\t\t\tthis._oscillator.partials = partials;\n\t\t}\n\t}\n\n\tget partialCount(): number {\n\t\treturn this._oscillator.partialCount;\n\t}\n\tset partialCount(partialCount) {\n\t\tif (!this._getOscType(this._oscillator, \"pulse\") && !this._getOscType(this._oscillator, \"pwm\")) {\n\t\t\tthis._oscillator.partialCount = partialCount;\n\t\t}\n\t}\n\n\tset(props: Partial<OmniOscillatorConstructorOptions>): this {\n\t\t// make sure the type is set first\n\t\tif (Reflect.has(props, \"type\") && props.type) {\n\t\t\tthis.type = props.type;\n\t\t}\n\t\t// then set the rest\n\t\tsuper.set(props);\n\t\treturn this;\n\t}\n\n\t/**\n\t * connect the oscillator to the frequency and detune signals\n\t */\n\tprivate _createNewOscillator(oscType: OmniOscSourceType): void {\n\t\tif (oscType !== this._sourceType) {\n\t\t\tthis._sourceType = oscType;\n\t\t\tconst OscConstructor = OmniOscillatorSourceMap[oscType];\n\t\t\t// short delay to avoid clicks on the change\n\t\t\tconst now = this.now();\n\t\t\tif (this._oscillator) {\n\t\t\t\tconst oldOsc = this._oscillator;\n\t\t\t\toldOsc.stop(now);\n\t\t\t\t// dispose the old one\n\t\t\t\tthis.context.setTimeout(() => oldOsc.dispose(), this.blockTime);\n\t\t\t}\n\t\t\tthis._oscillator = new OscConstructor({\n\t\t\t\tcontext: this.context,\n\t\t\t});\n\t\t\tthis.frequency.connect(this._oscillator.frequency);\n\t\t\tthis.detune.connect(this._oscillator.detune);\n\t\t\tthis._oscillator.connect(this.output);\n\t\t\tthis._oscillator.onstop = () => this.onstop(this);\n\t\t\tif (this.state === \"started\") {\n\t\t\t\tthis._oscillator.start(now);\n\t\t\t}\n\t\t}\n\t}\n\n\tget phase(): Degrees {\n\t\treturn this._oscillator.phase;\n\t}\n\tset phase(phase) {\n\t\tthis._oscillator.phase = phase;\n\t}\n\n\t/**\n\t * The source type of the oscillator.\n\t * @example\n\t * import { OmniOscillator } from \"tone\";\n\t * const omniOsc = new OmniOscillator(440, \"fmsquare\");\n\t * console.log(omniOsc.sourceType); // 'fm'\n\t */\n\tget sourceType(): OmniOscSourceType {\n\t\treturn this._sourceType;\n\t}\n\tset sourceType(sType) {\n\t\t// the basetype defaults to sine\n\t\tlet baseType = \"sine\";\n\t\tif (this._oscillator.type !== \"pwm\" && this._oscillator.type !== \"pulse\") {\n\t\t\tbaseType = this._oscillator.type;\n\t\t}\n\n\t\t// set the type\n\t\tif (sType === \"fm\") {\n\t\t\tthis.type = \"fm\" + baseType as OmniOscillatorType;\n\t\t} else if (sType === \"am\") {\n\t\t\tthis.type = \"am\" + baseType as OmniOscillatorType;\n\t\t} else if (sType === \"fat\") {\n\t\t\tthis.type = \"fat\" + baseType as OmniOscillatorType;\n\t\t} else if (sType === \"oscillator\") {\n\t\t\tthis.type = baseType as OmniOscillatorType;\n\t\t} else if (sType === \"pulse\") {\n\t\t\tthis.type = \"pulse\";\n\t\t} else if (sType === \"pwm\") {\n\t\t\tthis.type = \"pwm\";\n\t\t}\n\t}\n\n\tprivate _getOscType<SourceType extends OmniOscSourceType>(\n\t\tosc: AnyOscillator,\n\t\tsourceType: SourceType,\n\t): osc is OmniOscillatorSource[SourceType] {\n\t\treturn osc instanceof OmniOscillatorSourceMap[sourceType];\n\t}\n\n\t/**\n\t * The base type of the oscillator. See [[Oscillator.baseType]]\n\t * @example\n\t * import { OmniOscillator } from \"tone\";\n\t * const omniOsc = new OmniOscillator(440, \"fmsquare4\");\n\t * omniOsc.sourceType; // 'fm'\n\t * omniOsc.baseType; // 'square'\n\t * omniOsc.partialCount; // 4\n\t */\n\tget baseType(): OscillatorType | \"pwm\" | \"pulse\" {\n\t\treturn this._oscillator.baseType;\n\t}\n\tset baseType(baseType) {\n\t\tif (!this._getOscType(this._oscillator, \"pulse\") &&\n\t\t\t!this._getOscType(this._oscillator, \"pwm\") &&\n\t\t\tbaseType !== \"pulse\" && baseType !== \"pwm\") {\n\t\t\tthis._oscillator.baseType = baseType;\n\t\t}\n\t}\n\n\t/**\n\t * The width of the oscillator when sourceType === \"pulse\".\n\t * See [[PWMOscillator.width]]\n\t * @example\n\t * import { OmniOscillator } from \"tone\";\n\t * const omniOsc = new OmniOscillator(440, \"pulse\");\n\t * // can access the width attribute only if type === \"pulse\"\n\t * omniOsc.width.value = 0.2;\n\t */\n\tget width(): IsPulseOscillator<OscType, Signal<\"audioRange\">> {\n\t\tif (this._getOscType(this._oscillator, \"pulse\")) {\n\t\t\treturn this._oscillator.width as IsPulseOscillator<OscType, Signal<\"audioRange\">> ;\n\t\t} else {\n\t\t\treturn undefined as IsPulseOscillator<OscType, Signal<\"audioRange\">> ;\n\t\t}\n\t}\n\n\t/**\n\t * The number of detuned oscillators when sourceType === \"fat\".\n\t * See [[FatOscillator.count]]\n\t */\n\tget count(): IsFatOscillator<OscType, number> {\n\t\tif (this._getOscType(this._oscillator, \"fat\")) {\n\t\t\treturn this._oscillator.count as IsFatOscillator<OscType, number>;\n\t\t} else {\n\t\t\treturn undefined as IsFatOscillator<OscType, number>;\n\t\t}\n\t}\n\tset count(count) {\n\t\tif (this._getOscType(this._oscillator, \"fat\") && isNumber(count)) {\n\t\t\tthis._oscillator.count = count;\n\t\t}\n\t}\n\n\t/**\n\t * The detune spread between the oscillators when sourceType === \"fat\".\n\t * See [[FatOscillator.count]]\n\t */\n\tget spread(): IsFatOscillator<OscType, Cents> {\n\t\tif (this._getOscType(this._oscillator, \"fat\")) {\n\t\t\treturn this._oscillator.spread as IsFatOscillator<OscType, Cents>;\n\t\t} else {\n\t\t\treturn undefined as IsFatOscillator<OscType, Cents>;\n\t\t}\n\t}\n\tset spread(spread) {\n\t\tif (this._getOscType(this._oscillator, \"fat\") && isNumber(spread)) {\n\t\t\tthis._oscillator.spread = spread;\n\t\t}\n\t}\n\n\t/**\n\t * The type of the modulator oscillator. Only if the oscillator is set to \"am\" or \"fm\" types. \n\t * See [[AMOscillator]] or [[FMOscillator]]\n\t */\n\tget modulationType(): IsAmOrFmOscillator<OscType, ToneOscillatorType> {\n\t\tif (this._getOscType(this._oscillator, \"fm\") || this._getOscType(this._oscillator, \"am\")) {\n\t\t\treturn this._oscillator.modulationType as IsAmOrFmOscillator<OscType, ToneOscillatorType>;\n\t\t} else {\n\t\t\treturn undefined as IsAmOrFmOscillator<OscType, ToneOscillatorType>;\n\t\t}\n\t}\n\tset modulationType(mType) {\n\t\tif ((this._getOscType(this._oscillator, \"fm\") || this._getOscType(this._oscillator, \"am\")) && isString(mType)) {\n\t\t\tthis._oscillator.modulationType = mType;\n\t\t}\n\t}\n\n\t/**\n\t * The modulation index when the sourceType === \"fm\"\n\t * See [[FMOscillator]].\n\t */\n\tget modulationIndex(): IsFMOscillator<OscType, Signal<\"positive\">> {\n\t\tif (this._getOscType(this._oscillator, \"fm\")) {\n\t\t\treturn this._oscillator.modulationIndex as IsFMOscillator<OscType, Signal<\"positive\">>;\n\t\t} else {\n\t\t\treturn undefined as IsFMOscillator<OscType, Signal<\"positive\">>;\n\t\t}\n\t}\n\n\t/**\n\t * Harmonicity is the frequency ratio between the carrier and the modulator oscillators.\n\t * See [[AMOscillator]] or [[FMOscillator]]\n\t */\n\tget harmonicity(): IsAmOrFmOscillator<OscType, Signal<\"positive\">> {\n\t\tif (this._getOscType(this._oscillator, \"fm\") || this._getOscType(this._oscillator, \"am\")) {\n\t\t\treturn this._oscillator.harmonicity as IsAmOrFmOscillator<OscType, Signal<\"positive\">>;\n\t\t} else {\n\t\t\treturn undefined as IsAmOrFmOscillator<OscType, Signal<\"positive\">>;\n\t\t}\n\t}\n\n\t/**\n\t * The modulationFrequency Signal of the oscillator when sourceType === \"pwm\"\n\t * see [[PWMOscillator]]\n\t * @min 0.1\n\t * @max 5\n\t */\n\tget modulationFrequency(): IsPWMOscillator<OscType, Signal<\"frequency\">> {\n\t\tif (this._getOscType(this._oscillator, \"pwm\")) {\n\t\t\treturn this._oscillator.modulationFrequency as IsPWMOscillator<OscType, Signal<\"frequency\">>;\n\t\t} else {\n\t\t\treturn undefined as IsPWMOscillator<OscType, Signal<\"frequency\">>;\n\t\t}\n\t}\n\n\tasync asArray(length: number = 1024): Promise<Float32Array> {\n\t\treturn generateWaveform(this, length);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.detune.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis._oscillator.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../core/context/Gain\";\nimport { connect, disconnect, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { SignalOperator } from \"./SignalOperator\";\n\n/**\n * Tone.Zero outputs 0's at audio-rate. The reason this has to be\n * it's own class is that many browsers optimize out Tone.Signal\n * with a value of 0 and will not process nodes further down the graph.\n * @category Signal\n */\nexport class Zero extends SignalOperator<ToneAudioNodeOptions> {\n\n\treadonly name: string = \"Zero\";\n\n\t/**\n\t * The gain node which connects the constant source to the output\n\t */\n\tprivate _gain = new Gain({ context: this.context });\n\n\t/**\n\t * Only outputs 0\n\t */\n\toutput = this._gain;\n\n\t/**\n\t * no input node\n\t */\n\tinput = undefined;\n\n\tconstructor(options?: Partial<ToneAudioNodeOptions>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Zero.getDefaults(), arguments)));\n\t\tconnect(this.context.getConstant(0), this._gain);\n\t}\n\n\t/**\n\t * clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tdisconnect(this.context.getConstant(0), this._gain);\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { Param } from \"../../core/context/Param\";\nimport { InputNode, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Degrees, Frequency, NormalRange, Time, UnitName } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { BasicPlaybackState } from \"../../core/util/StateTimeline\";\nimport { AudioToGain } from \"../../signal/AudioToGain\";\nimport { Scale } from \"../../signal/Scale\";\nimport { connectSignal, Signal } from \"../../signal/Signal\";\nimport { Zero } from \"../../signal/Zero\";\nimport { Oscillator, ToneOscillatorType } from \"./Oscillator\";\n\nexport interface LFOOptions extends ToneAudioNodeOptions {\n\ttype: ToneOscillatorType;\n\tmin: number;\n\tmax: number;\n\tphase: Degrees;\n\tfrequency: Frequency;\n\tamplitude: NormalRange;\n\tunits: UnitName;\n}\n\n/**\n * LFO stands for low frequency oscillator. LFO produces an output signal\n * which can be attached to an AudioParam or Tone.Signal\n * in order to modulate that parameter with an oscillator. The LFO can\n * also be synced to the transport to start/stop and change when the tempo changes.\n *\n * @example\n * import { Filter, LFO, Noise } from \"tone\";\n * const filter = new Filter().toDestination();\n * const noise = new Noise().connect(filter).start();\n * const lfo = new LFO(\"4n\", 400, 4000).start();\n * // have it control the filters cutoff\n * lfo.connect(filter.frequency);\n * @category Source\n */\nexport class LFO extends ToneAudioNode<LFOOptions> {\n\n\treadonly name: string = \"LFO\";\n\n\t/**\n\t * The oscillator.\n\t */\n\tprivate _oscillator: Oscillator;\n\n\t/**\n\t * The gain of the output\n\t */\n\tprivate _amplitudeGain: Gain<\"normalRange\">;\n\n\t/**\n\t * The amplitude of the LFO, which controls the output range between\n\t * the min and max output. For example if the min is -10 and the max\n\t * is 10, setting the amplitude to 0.5 would make the LFO modulate\n\t * between -5 and 5.\n\t */\n\treadonly amplitude: Param<\"normalRange\">;\n\n\t/**\n\t * The signal which is output when the LFO is stopped\n\t */\n\tprivate _stoppedSignal: Signal<\"audioRange\">;\n\n\t/**\n\t * Just outputs zeros. This is used so that scaled signal is not\n\t * optimized to silence.\n\t */\n\tprivate _zeros: Zero;\n\n\t/**\n\t * The value that the LFO outputs when it's stopped\n\t */\n\tprivate _stoppedValue: number = 0;\n\n\t/**\n\t * Convert the oscillators audio range to an output between 0-1 so it can be scaled\n\t */\n\tprivate _a2g: AudioToGain;\n\n\t/**\n\t * Scales the final output to the min and max value\n\t */\n\tprivate _scaler: Scale;\n\n\t/**\n\t * The output of the LFO\n\t */\n\treadonly output: OutputNode;\n\n\t/**\n\t * There is no input node\n\t */\n\treadonly input: undefined;\n\n\t/**\n\t * A private placeholder for the units\n\t */\n\tprivate _units: UnitName = \"number\";\n\n\t/**\n\t * If the input value is converted using the [[units]]\n\t */\n\tconvert: boolean = true;\n\n\t/**\n\t * The frequency value of the LFO\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * @param frequency The frequency of the oscillation.\n\t * Typically, LFOs will be in the frequency range of 0.1 to 10 hertz.\n\t * @param min The minimum output value of the LFO.\n\t * @param max The maximum value of the LFO.\n\t */\n\tconstructor(frequency?: Frequency, min?: number, max?: number);\n\tconstructor(options?: Partial<LFOOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(LFO.getDefaults(), arguments, [\"frequency\", \"min\", \"max\"]));\n\t\tconst options = optionsFromArguments(LFO.getDefaults(), arguments, [\"frequency\", \"min\", \"max\"]);\n\n\t\t// @ts-ignore\n\t\tthis._oscillator = new Oscillator({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.frequency,\n\t\t\ttype: options.type,\n\t\t});\n\t\tthis.frequency = this._oscillator.frequency;\n\n\t\tthis._amplitudeGain = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: options.amplitude,\n\t\t\tunits: \"normalRange\",\n\t\t});\n\t\tthis.amplitude = this._amplitudeGain.gain;\n\t\tthis._stoppedSignal = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"audioRange\",\n\t\t\tvalue: 0,\n\t\t});\n\t\tthis._zeros = new Zero({ context: this.context });\n\t\tthis._a2g = new AudioToGain({ context: this.context });\n\t\tthis._scaler = this.output = new Scale({\n\t\t\tcontext: this.context,\n\t\t\tmax: options.max,\n\t\t\tmin: options.min,\n\t\t});\n\n\t\tthis.min = options.min;\n\t\tthis.max = options.max;\n\t\tthis.units = options.units;\n\n\t\t// connect it up\n\t\tthis._oscillator.chain(this._a2g, this._amplitudeGain, this._scaler);\n\t\tthis._zeros.connect(this._a2g);\n\t\tthis._stoppedSignal.connect(this._a2g);\n\t\treadOnly(this, [\"amplitude\", \"frequency\"]);\n\t\tthis.phase = options.phase;\n\t}\n\n\tstatic getDefaults(): LFOOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tamplitude: 1,\n\t\t\tfrequency: \"4n\",\n\t\t\tmax: 1,\n\t\t\tmin: 0,\n\t\t\tphase: 0,\n\t\t\ttype: \"sine\" as ToneOscillatorType,\n\t\t\tunits: \"number\" as UnitName,\n\t\t});\n\t}\n\n\t/**\n\t * Start the LFO.\n\t * @param time The time the LFO will start\n\t */\n\tstart(time?: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis._stoppedSignal.setValueAtTime(0, time);\n\t\tthis._oscillator.start(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the LFO.\n\t * @param  time The time the LFO will stop\n\t */\n\tstop(time?: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis._stoppedSignal.setValueAtTime(this._stoppedValue, time);\n\t\tthis._oscillator.stop(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sync the start/stop/pause to the transport\n\t * and the frequency to the bpm of the transport\n\t * @example\n\t * import { LFO } from \"tone\";\n\t * const lfo = new LFO(\"8n\");\n\t * lfo.sync().start(0);\n\t * // the rate of the LFO will always be an eighth note, even as the tempo changes\n\t */\n\tsync(): this {\n\t\tthis._oscillator.sync();\n\t\tthis._oscillator.syncFrequency();\n\t\treturn this;\n\t}\n\n\t/**\n\t * unsync the LFO from transport control\n\t */\n\tunsync(): this {\n\t\tthis._oscillator.unsync();\n\t\tthis._oscillator.unsyncFrequency();\n\t\treturn this;\n\t}\n\n\t/**\n\t * The minimum output of the LFO.\n\t */\n\tget min(): number {\n\t\treturn this._toType(this._scaler.min);\n\t}\n\tset min(min) {\n\t\tmin = this._fromType(min);\n\t\tthis._scaler.min = min;\n\t}\n\n\t/**\n\t * The maximum output of the LFO.\n\t */\n\tget max(): number {\n\t\treturn this._toType(this._scaler.max);\n\t}\n\tset max(max) {\n\t\tmax = this._fromType(max);\n\t\tthis._scaler.max = max;\n\t}\n\n\t/**\n\t * The type of the oscillator: See [[Oscillator.type]]\n\t */\n\tget type(): ToneOscillatorType {\n\t\treturn this._oscillator.type;\n\t}\n\tset type(type) {\n\t\tthis._oscillator.type = type;\n\t\tthis._stoppedValue = this._oscillator.getInitialValue();\n\t\tthis._stoppedSignal.value = this._stoppedValue;\n\t}\n\n\t/**\n\t * The phase of the LFO.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._oscillator.phase;\n\t}\n\tset phase(phase) {\n\t\tthis._oscillator.phase = phase;\n\t\tthis._stoppedValue = this._oscillator.getInitialValue();\n\t\tthis._stoppedSignal.value = this._stoppedValue;\n\t}\n\n\t/**\n\t * The output units of the LFO.\n\t */\n\tget units(): UnitName {\n\t\treturn this._units;\n\t}\n\tset units(val) {\n\t\tconst currentMin = this.min;\n\t\tconst currentMax = this.max;\n\t\t// convert the min and the max\n\t\tthis._units = val;\n\t\tthis.min = currentMin;\n\t\tthis.max = currentMax;\n\t}\n\n\t/**\n\t * Returns the playback state of the source, either \"started\" or \"stopped\".\n\t */\n\tget state(): BasicPlaybackState {\n\t\treturn this._oscillator.state;\n\t}\n\n\t/**\n\t * @param node the destination to connect to\n\t * @param outputNum the optional output number\n\t * @param inputNum the input number\n\t */\n\tconnect(node: InputNode, outputNum?: number, inputNum?: number): this {\n\t\tif (node instanceof Param || node instanceof Signal) {\n\t\t\tthis.convert = node.convert;\n\t\t\tthis.units = node.units;\n\t\t}\n\t\tconnectSignal(this, node, outputNum, inputNum);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Private methods borrowed from Param\n\t */\n\t// @ts-ignore\n\tprivate _fromType = Param.prototype._fromType;\n\t// @ts-ignore\n\tprivate _toType = Param.prototype._toType;\n\t// @ts-ignore\n\tprivate _is = Param.prototype._is;\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._oscillator.dispose();\n\t\tthis._stoppedSignal.dispose();\n\t\tthis._zeros.dispose();\n\t\tthis._scaler.dispose();\n\t\tthis._a2g.dispose();\n\t\tthis._amplitudeGain.dispose();\n\t\tthis.amplitude.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { Positive, Time } from \"../../core/type/Units\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp } from \"../../core/util/Interface\";\nimport { isUndef } from \"../../core/util/TypeCheck\";\nimport { Source, SourceOptions } from \"../Source\";\nimport { ToneBufferSource } from \"./ToneBufferSource\";\n\nexport interface PlayerOptions extends SourceOptions {\n\tonload: () => void;\n\tplaybackRate: Positive;\n\tloop: boolean;\n\tautostart: boolean;\n\tloopStart: Time;\n\tloopEnd: Time;\n\treverse: boolean;\n\tfadeIn: Time;\n\tfadeOut: Time;\n\turl?: ToneAudioBuffer | string | AudioBuffer;\n}\n\n/**\n * Player is an audio file player with start, loop, and stop functions.\n * @example\n * import { Player } from \"tone\";\n * const player = new Player(\"https://tonejs.github.io/examples/audio/FWDL.mp3\").toDestination();\n * // play as soon as the buffer is loaded\n * player.autostart = true;\n * @category Source\n */\nexport class Player extends Source<PlayerOptions> {\n\n\treadonly name: string = \"Player\";\n\n\t/**\n\t * If the file should play as soon\n\t * as the buffer is loaded.\n\t */\n\tautostart: boolean;\n\n\t/**\n\t * The buffer\n\t */\n\tprivate _buffer: ToneAudioBuffer;\n\n\t/**\n\t * if the buffer should loop once it's over\n\t */\n\tprivate _loop: boolean;\n\n\t/**\n\t * if 'loop' is true, the loop will start at this position\n\t */\n\tprivate _loopStart: Time;\n\n\t/**\n\t * if 'loop' is true, the loop will end at this position\n\t */\n\tprivate _loopEnd: Time;\n\n\t/**\n\t * the playback rate\n\t */\n\tprivate _playbackRate: Positive;\n\n\t/**\n\t * All of the active buffer source nodes\n\t */\n\tprivate _activeSources: Set<ToneBufferSource> = new Set();\n\n\t/**\n\t * The fadeIn time of the amplitude envelope.\n\t */\n\tfadeIn: Time;\n\n\t/**\n\t * The fadeOut time of the amplitude envelope.\n\t */\n\tfadeOut: Time;\n\n\t/**\n\t * @param url Either the AudioBuffer or the url from which to load the AudioBuffer\n\t * @param onload The function to invoke when the buffer is loaded.\n\t */\n\tconstructor(url?: string | AudioBuffer | ToneAudioBuffer, onload?: () => void);\n\tconstructor(options?: Partial<PlayerOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Player.getDefaults(), arguments, [\"url\", \"onload\"]));\n\t\tconst options = optionsFromArguments(Player.getDefaults(), arguments, [\"url\", \"onload\"]);\n\n\t\tthis._buffer = new ToneAudioBuffer({\n\t\t\tonload: this._onload.bind(this, options.onload),\n\t\t\treverse: options.reverse,\n\t\t\turl: options.url,\n\t\t});\n\t\tthis.autostart = options.autostart;\n\t\tthis._loop = options.loop;\n\t\tthis._loopStart = options.loopStart;\n\t\tthis._loopEnd = options.loopEnd;\n\t\tthis._playbackRate = options.playbackRate;\n\t\tthis.fadeIn = options.fadeIn;\n\t\tthis.fadeOut = options.fadeOut;\n\t}\n\n\tstatic getDefaults(): PlayerOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tautostart: false,\n\t\t\tfadeIn: 0,\n\t\t\tfadeOut: 0,\n\t\t\tloop: false,\n\t\t\tloopEnd: 0,\n\t\t\tloopStart: 0,\n\t\t\tonload: noOp,\n\t\t\tplaybackRate: 1,\n\t\t\treverse: false,\n\t\t});\n\t}\n\n\t/**\n\t * Load the audio file as an audio buffer.\n\t * Decodes the audio asynchronously and invokes\n\t * the callback once the audio buffer loads.\n\t * Note: this does not need to be called if a url\n\t * was passed in to the constructor. Only use this\n\t * if you want to manually load a new url.\n\t * @param url The url of the buffer to load. Filetype support depends on the browser.\n\t */\n\tasync load(url: string): Promise<this> {\n\t\tawait this._buffer.load(url);\n\t\tthis._onload();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Internal callback when the buffer is loaded.\n\t */\n\tprivate _onload(callback: () => void = noOp): void {\n\t\tcallback();\n\t\tif (this.autostart) {\n\t\t\tthis.start();\n\t\t}\n\t}\n\n\t/**\n\t * Internal callback when the buffer is done playing.\n\t */\n\tprivate _onSourceEnd(source: ToneBufferSource): void {\n\t\t// invoke the onstop function\n\t\tthis.onstop(this);\n\n\t\t// delete the source from the active sources\n\t\tthis._activeSources.delete(source);\n\t\tif (this._activeSources.size === 0 && !this._synced) {\n\t\t\tthis._state.setStateAtTime(\"stopped\", this.now());\n\t\t}\n\t}\n\n\t/**\n\t * Play the buffer at the given startTime. Optionally add an offset\n\t * and/or duration which will play the buffer from a position\n\t * within the buffer for the given duration.\n\t *\n\t * @param  time When the player should start.\n\t * @param  offset The offset from the beginning of the samplem to start at.\n\t * @param  duration How long the sample should play. If no duration is given, it will default to the full length of the sample (minus any offset)\n\t */\n\tstart(time?: Time, offset?: Time, duration?: Time): this {\n\t\tsuper.start(time, offset, duration);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Internal start method\n\t */\n\tprotected _start(startTime?: Time, offset?: Time, duration?: Time): void {\n\t\t// if it's a loop the default offset is the loopstart point\n\t\tif (this._loop) {\n\t\t\toffset = defaultArg(offset, this._loopStart);\n\t\t} else {\n\t\t\t// otherwise the default offset is 0\n\t\t\toffset = defaultArg(offset, 0);\n\t\t}\n\n\t\t// compute the values in seconds\n\t\tlet comptuedOffset = this.toSeconds(offset);\n\n\t\t// if it's synced, it should factor in the playback rate for computing the offset\n\t\tif (this._synced) {\n\t\t\tcomptuedOffset *= this._playbackRate;\n\t\t}\n\n\t\t// compute the duration which is either the passed in duration of the buffer.duration - offset\n\t\tconst origDuration = duration;\n\t\tduration = defaultArg(duration, Math.max(this._buffer.duration - comptuedOffset, 0));\n\t\tlet computedDuration = this.toSeconds(duration);\n\n\t\t// scale it by the playback rate\n\t\tcomputedDuration = computedDuration / this._playbackRate;\n\n\t\t// get the start time\n\t\tstartTime = this.toSeconds(startTime);\n\n\t\t// make the source\n\t\tconst source = new ToneBufferSource({\n\t\t\tbuffer: this._buffer,\n\t\t\tcontext: this.context,\n\t\t\tfadeIn: this.fadeIn,\n\t\t\tfadeOut: this.fadeOut,\n\t\t\tloop: this._loop,\n\t\t\tloopEnd: this._loopEnd,\n\t\t\tloopStart: this._loopStart,\n\t\t\tonended: this._onSourceEnd.bind(this),\n\t\t\tplaybackRate: this._playbackRate,\n\t\t}).connect(this.output);\n\n\t\t// set the looping properties\n\t\tif (!this._loop && !this._synced) {\n\t\t\t// if it's not looping, set the state change at the end of the sample\n\t\t\tthis._state.setStateAtTime(\"stopped\", startTime + computedDuration, {\n\t\t\t\timplicitEnd: true,\n\t\t\t});\n\t\t}\n\n\t\t// add it to the array of active sources\n\t\tthis._activeSources.add(source);\n\n\t\t// start it\n\t\tif (this._loop && isUndef(origDuration)) {\n\t\t\tsource.start(startTime, comptuedOffset);\n\t\t} else {\n\t\t\t// subtract the fade out time\n\t\t\tsource.start(startTime, comptuedOffset, computedDuration - this.toSeconds(this.fadeOut));\n\t\t}\n\t}\n\n\t/**\n\t * Stop playback.\n\t */\n\tprotected _stop(time?: Time): void {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._activeSources.forEach(source => source.stop(computedTime));\n\t}\n\n\t/**\n\t * Stop and then restart the player from the beginning (or offset)\n\t * @param  time When the player should start.\n\t * @param  offset The offset from the beginning of the sample to start at.\n\t * @param  duration How long the sample should play. If no duration is given, it will default to the full length of the sample (minus any offset)\n\t */\n\trestart(time?: Time, offset?: Time, duration?: Time): this {\n\t\tthis._stop(time);\n\t\tthis._start(time, offset, duration);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Seek to a specific time in the player's buffer. If the\n\t * source is no longer playing at that time, it will stop.\n\t * If you seek to a time that\n\t * @param offset The time to seek to.\n\t * @param when The time for the seek event to occur.\n\t * @example\n\t * import { Player } from \"tone\";\n\t * const player = new Player(\"https://tonejs.github.io/examples/audio/FWDL.mp3\", () => {\n\t * \tplayer.start();\n\t * \t// seek to the offset in 1 second from now\n\t * \tplayer.seek(0.4, \"+1\");\n\t * }).toDestination();\n\t */\n\tseek(offset: Time, when?: Time): this {\n\t\tconst computedTime = this.toSeconds(when);\n\t\tif (this._state.getValueAtTime(computedTime) === \"started\") {\n\t\t\tconst comptuedOffset = this.toSeconds(offset);\n\t\t\t// if it's currently playing, stop it\n\t\t\tthis._stop(computedTime);\n\t\t\t// restart it at the given time\n\t\t\tthis._start(computedTime, comptuedOffset);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set the loop start and end. Will only loop if loop is set to true.\n\t * @param loopStart The loop end time\n\t * @param loopEnd The loop end time\n\t * @example\n\t * import { Player } from \"tone\";\n\t * const player = new Player(\"https://tonejs.github.io/examples/audio/FWDL.mp3\").toDestination();\n\t * // loop between the given points\n\t * player.setLoopPoints(0.2, 0.3);\n\t * player.loop = true;\n\t * player.autostart = true;\n\t */\n\tsetLoopPoints(loopStart: Time, loopEnd: Time): this {\n\t\tthis.loopStart = loopStart;\n\t\tthis.loopEnd = loopEnd;\n\t\treturn this;\n\t}\n\n\t/**\n\t * If loop is true, the loop will start at this position.\n\t */\n\tget loopStart(): Time {\n\t\treturn this._loopStart;\n\t}\n\tset loopStart(loopStart) {\n\t\tthis._loopStart = loopStart;\n\t\t// get the current source\n\t\tthis._activeSources.forEach(source => {\n\t\t\tsource.loopStart = loopStart;\n\t\t});\n\t}\n\n\t/**\n\t * If loop is true, the loop will end at this position.\n\t */\n\tget loopEnd(): Time {\n\t\treturn this._loopEnd;\n\t}\n\tset loopEnd(loopEnd) {\n\t\tthis._loopEnd = loopEnd;\n\t\t// get the current source\n\t\tthis._activeSources.forEach(source => {\n\t\t\tsource.loopEnd = loopEnd;\n\t\t});\n\t}\n\n\t/**\n\t * The audio buffer belonging to the player.\n\t */\n\tget buffer(): ToneAudioBuffer {\n\t\treturn this._buffer;\n\t}\n\tset buffer(buffer) {\n\t\tthis._buffer.set(buffer);\n\t}\n\n\t/**\n\t * If the buffer should loop once it's over.\n\t */\n\tget loop(): boolean {\n\t\treturn this._loop;\n\t}\n\tset loop(loop) {\n\t\t// if no change, do nothing\n\t\tif (this._loop === loop) {\n\t\t\treturn;\n\t\t}\n\t\tthis._loop = loop;\n\t\t// set the loop of all of the sources\n\t\tthis._activeSources.forEach(source => {\n\t\t\tsource.loop = loop;\n\t\t});\n\t\tif (loop) {\n\t\t\t// remove the next stopEvent\n\t\t\tconst stopEvent = this._state.getNextState(\"stopped\", this.now());\n\t\t\tif (stopEvent) {\n\t\t\t\tthis._state.cancel(stopEvent.time);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * The playback speed. 1 is normal speed. This is not a signal because\n\t * Safari and iOS currently don't support playbackRate as a signal.\n\t */\n\tget playbackRate(): Positive {\n\t\treturn this._playbackRate;\n\t}\n\tset playbackRate(rate) {\n\t\tthis._playbackRate = rate;\n\t\tconst now = this.now();\n\n\t\t// cancel the stop event since it's at a different time now\n\t\tconst stopEvent = this._state.getNextState(\"stopped\", now);\n\t\tif (stopEvent && stopEvent.implicitEnd) {\n\t\t\tthis._state.cancel(stopEvent.time);\n\t\t\tthis._activeSources.forEach(source => source.cancelStop());\n\t\t}\n\n\t\t// set all the sources\n\t\tthis._activeSources.forEach(source => {\n\t\t\tsource.playbackRate.setValueAtTime(rate, now);\n\t\t});\n\t}\n\n\t/**\n\t * The direction the buffer should play in\n\t */\n\tget reverse(): boolean {\n\t\treturn this._buffer.reverse;\n\t}\n\tset reverse(rev) {\n\t\tthis._buffer.reverse = rev;\n\t}\n\n\t/**\n\t * If the buffer is loaded\n\t */\n\tget loaded(): boolean {\n\t\treturn this._buffer.loaded;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\t// disconnect all of the players\n\t\tthis._activeSources.forEach(source => source.dispose());\n\t\tthis._activeSources.clear();\n\t\tthis._buffer.dispose();\n\t\treturn this;\n\t}\n}\n","import { Volume } from \"../../component/channel/Volume\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { ToneAudioBuffers, ToneAudioBuffersUrlMap } from \"../../core/context/ToneAudioBuffers\";\nimport { OutputNode, ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { Decibels, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp, readOnly } from \"../../core/util/Interface\";\nimport { BasicPlaybackState } from \"../../core/util/StateTimeline\";\nimport { Source, SourceOptions } from \"../Source\";\nimport { Player } from \"./Player\";\n\nexport interface PlayersOptions extends SourceOptions {\n\turls: ToneAudioBuffersUrlMap;\n\tvolume: Decibels;\n\tmute: boolean;\n\tonload: () => void;\n\tbaseUrl: string;\n\tfadeIn: Time;\n\tfadeOut: Time;\n}\n\n/**\n * Players combines multiple [[Player]] objects.\n * @category Source\n */\nexport class Players extends ToneAudioNode<PlayersOptions> {\n\n\treadonly name: string = \"Players\";\n\n\t/**\n\t * The output volume node\n\t */\n\tprivate _volume: Volume;\n\n\t/**\n\t * The volume of the output in decibels.\n\t */\n\treadonly volume: Param<\"decibels\">;\n\n\t/**\n\t * The combined output of all of the players\n\t */\n\treadonly output: OutputNode;\n\n\t/**\n\t * Players has no input.\n\t */\n\treadonly input = undefined;\n\n\t/**\n\t * The container of all of the players\n\t */\n\tprivate _players: Map<string, Player> = new Map();\n\n\t/**\n\t * The container of all the buffers\n\t */\n\tprivate _buffers: ToneAudioBuffers;\n\n\t/**\n\t * private holder of the fadeIn time\n\t */\n\tprivate _fadeIn: Time;\n\n\t/**\n\t * private holder of the fadeOut time\n\t */\n\tprivate _fadeOut: Time;\n\n\t/**\n\t * @param urls An object mapping a name to a url.\n\t * @param onload The function to invoke when all buffers are loaded.\n\t */\n\tconstructor(urls?: ToneAudioBuffersUrlMap, onload?: () => void);\n\t/**\n\t * @param urls An object mapping a name to a url.\n\t * @param options The remaining options associated with the players\n\t */\n\tconstructor(urls?: ToneAudioBuffersUrlMap, options?: Partial<Omit<PlayersOptions, \"urls\">>);\n\tconstructor(options?: Partial<GainOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Players.getDefaults(), arguments, [\"urls\", \"onload\"], \"urls\"));\n\t\tconst options = optionsFromArguments(Players.getDefaults(), arguments, [\"urls\", \"onload\"], \"urls\");\n\n\t\t/**\n\t\t * The output volume node\n\t\t */\n\t\tthis._volume = this.output = new Volume({\n\t\t\tcontext: this.context,\n\t\t\tvolume: options.volume,\n\t\t});\n\n\t\tthis.volume = this._volume.volume;\n\t\treadOnly(this, \"volume\");\n\t\tthis._buffers = new ToneAudioBuffers(options.urls, options.onload, options.baseUrl);\n\t\t// mute initially\n\t\tthis.mute = options.mute;\n\t\tthis._fadeIn = options.fadeIn;\n\t\tthis._fadeOut = options.fadeOut;\n\t}\n\n\tstatic getDefaults(): PlayersOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tbaseUrl: \"\",\n\t\t\tfadeIn: 0,\n\t\t\tfadeOut: 0,\n\t\t\tmute: false,\n\t\t\tonload: noOp,\n\t\t\turls: {},\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Mute the output.\n\t */\n\tget mute(): boolean {\n\t\treturn this._volume.mute;\n\t}\n\tset mute(mute) {\n\t\tthis._volume.mute = mute;\n\t}\n\n\t/**\n\t * The fadeIn time of the envelope applied to the source.\n\t */\n\tget fadeIn(): Time {\n\t\treturn this._fadeIn;\n\t}\n\tset fadeIn(fadeIn) {\n\t\tthis._fadeIn = fadeIn;\n\t\tthis._players.forEach(player => {\n\t\t\tplayer.fadeIn = fadeIn;\n\t\t});\n\t}\n\n\t/**\n\t * The fadeOut time of the each of the sources.\n\t */\n\tget fadeOut(): Time {\n\t\treturn this._fadeOut;\n\t}\n\tset fadeOut(fadeOut) {\n\t\tthis._fadeOut = fadeOut;\n\t\tthis._players.forEach(player => {\n\t\t\tplayer.fadeOut = fadeOut;\n\t\t});\n\t}\n\n\t/**\n\t * The state of the players object. Returns \"started\" if any of the players are playing.\n\t */\n\tget state(): BasicPlaybackState {\n\t\tconst playing = Array.from(this._players).some(([_, player]) => player.state === \"started\");\n\t\treturn playing ? \"started\" : \"stopped\";\n\t}\n\n\t/**\n\t * True if the buffers object has a buffer by that name.\n\t * @param name  The key or index of the buffer.\n\t */\n\thas(name: string): boolean {\n\t\treturn this._buffers.has(name);\n\t}\n\n\t/**\n\t * Get a player by name.\n\t * @param  name  The players name as defined in the constructor object or `add` method.\n\t */\n\tplayer(name: string): Player {\n\t\tthis.assert(this.has(name), `No Player with the name ${name} exists on this object`);\n\t\tif (!this._players.has(name)) {\n\t\t\tconst player = new Player({\n\t\t\t\tcontext: this.context,\n\t\t\t\tfadeIn: this._fadeIn,\n\t\t\t\tfadeOut: this._fadeOut,\n\t\t\t\turl: this._buffers.get(name),\n\t\t\t}).connect(this.output);\n\t\t\tthis._players.set(name, player);\n\t\t}\n\t\treturn this._players.get(name) as Player;\n\t}\n\n\t/**\n\t * If all the buffers are loaded or not\n\t */\n\tget loaded(): boolean {\n\t\treturn this._buffers.loaded;\n\t}\n\n\t/**\n\t * Add a player by name and url to the Players\n\t * @param  name A unique name to give the player\n\t * @param  url  Either the url of the bufer or a buffer which will be added with the given name.\n\t * @param callback  The callback to invoke when the url is loaded.\n\t */\n\tadd(name: string, url: string | ToneAudioBuffer | AudioBuffer, callback?: () => void): this {\n\t\tthis.assert(!this._buffers.has(name), \"A buffer with that name already exists on this object\");\n\t\tthis._buffers.add(name, url, callback);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop all of the players at the given time\n\t * @param time The time to stop all of the players.\n\t */\n\tstopAll(time?: Time): this {\n\t\tthis._players.forEach(player => player.stop(time));\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._volume.dispose();\n\t\tthis.volume.dispose();\n\t\tthis._players.forEach(player => player.dispose());\n\t\tthis._buffers.dispose();\n\t\treturn this;\n\t}\n}\n","import { Source, SourceOptions } from \"../Source\";\nimport { noOp } from \"../../core/util/Interface\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Clock } from \"../../core/clock/Clock\";\nimport { Cents, Positive, Seconds, Time } from \"../../core/type/Units\";\nimport { ToneBufferSource } from \"./ToneBufferSource\";\nimport { intervalToFrequencyRatio } from \"../../core/type/Conversions\";\n\ninterface GrainPlayerOptions extends SourceOptions {\n\tonload: () => void;\n\treverse: boolean;\n\turl?: ToneAudioBuffer | string | AudioBuffer;\n\toverlap: Seconds;\n\tgrainSize: Seconds;\n\tplaybackRate: Positive;\n\tdetune: Cents;\n\tloop: boolean;\n\tloopStart: Time;\n\tloopEnd: Time;\n}\n\n/**\n * GrainPlayer implements [granular synthesis](https://en.wikipedia.org/wiki/Granular_synthesis).\n * Granular Synthesis enables you to adjust pitch and playback rate independently. The grainSize is the\n * amount of time each small chunk of audio is played for and the overlap is the\n * amount of crossfading transition time between successive grains.\n * @category Source\n */\nexport class GrainPlayer extends Source<GrainPlayerOptions> {\n\n\treadonly name: string = \"GrainPlayer\";\n\n\t/**\n\t * The audio buffer belonging to the player.\n\t */\n\tbuffer: ToneAudioBuffer;\n\n\t/**\n\t * Create a repeating tick to schedule the grains.\n\t */\n\tprivate _clock: Clock;\n\n\t/**\n\t * Internal loopStart value\n\t */\n\tprivate _loopStart: number = 0;\n\n\t/**\n\t * Internal loopStart value\n\t */\n\tprivate _loopEnd: number = 0;\n\n\t/**\n\t * All of the currently playing BufferSources\n\t */\n\tprivate _activeSources: ToneBufferSource[] = [];\n\n\t/**\n\t * Internal reference to the playback rate\n\t */\n\tprivate _playbackRate: Positive;\n\n\t/**\n\t * Internal grain size reference;\n\t */\n\tprivate _grainSize: Seconds; \n\n\t/**\n\t * Internal overlap reference;\n\t */\n\tprivate _overlap: Seconds; \n\n\t/**\n\t * Adjust the pitch independently of the playbackRate.\n\t */\n\tdetune: Cents;\n\n\t/**\n\t * If the buffer should loop back to the loopStart when completed\n\t */\n\tloop: boolean;\n\t\t\n\t/**\n\t * @param url Either the AudioBuffer or the url from which to load the AudioBuffer\n\t * @param onload The function to invoke when the buffer is loaded.\n\t */\n\tconstructor(url?: string | AudioBuffer | ToneAudioBuffer, onload?: () => void);\n\tconstructor(options?: Partial<GrainPlayerOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(GrainPlayer.getDefaults(), arguments, [\"url\", \"onload\"]));\n\t\tconst options = optionsFromArguments(GrainPlayer.getDefaults(), arguments, [\"url\", \"onload\"]);\n\n\t\tthis.buffer = new ToneAudioBuffer({\n\t\t\tonload: options.onload,\n\t\t\treverse: options.reverse,\n\t\t\turl: options.url,\n\t\t});\n\t\tthis._clock = new Clock({\n\t\t\tcontext: this.context,\n\t\t\tcallback: this._tick.bind(this), \n\t\t\tfrequency: 1 / options.grainSize\n\t\t});\n\t\tthis._playbackRate = options.playbackRate;\n\t\tthis._grainSize = options.grainSize;\n\t\tthis._overlap = options.overlap;\n\t\tthis.detune = options.detune;\n\n\t\t// setup\n\t\tthis.overlap = options.overlap;\n\t\tthis.loop = options.loop;\n\t\tthis.playbackRate = options.playbackRate;\n\t\tthis.grainSize = options.grainSize;\n\t\tthis.loopStart = options.loopStart;\n\t\tthis.loopEnd = options.loopEnd;\n\t\tthis.reverse = options.reverse;\n\t\tthis._clock.on(\"stop\", this._onstop.bind(this));\n\t}\n\n\tstatic getDefaults(): GrainPlayerOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tonload: noOp,\n\t\t\toverlap: 0.1,\n\t\t\tgrainSize: 0.2,\n\t\t\tplaybackRate: 1,\n\t\t\tdetune: 0,\n\t\t\tloop: false,\n\t\t\tloopStart: 0,\n\t\t\tloopEnd: 0,\n\t\t\treverse: false\n\t\t});\n\t}\n\n\t/**\n\t * Internal start method\n\t */\n\tprotected _start(time?: Time, offset?: Time, duration?: Time): void {\n\t\toffset = defaultArg(offset, 0);\n\t\toffset = this.toSeconds(offset);\n\t\ttime = this.toSeconds(time);\n\n\t\tconst grainSize = 1 / this._clock.frequency.getValueAtTime(time);\n\t\tthis._clock.start(time, offset / grainSize);\n\n\t\tif (duration) {\n\t\t\tthis.stop(time + this.toSeconds(duration));\n\t\t}\n\t}\n\n\t/**\n\t * Stop and then restart the player from the beginning (or offset)\n\t * @param  time When the player should start.\n\t * @param  offset The offset from the beginning of the sample to start at.\n\t * @param  duration How long the sample should play. If no duration is given, \n\t * \t\t\t\t\tit will default to the full length of the sample (minus any offset)\n\t */\n\trestart(time?: Time, offset?: Time, duration?: Time): this {\n\t\tthis._stop(time);\n\t\tthis._start(time, offset, duration);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Internal stop method\n\t */\n\tprotected _stop(time?: Time): void {\n\t\tthis._clock.stop(time);\n\t}\n\n\t/**\n\t * Invoked when the clock is stopped\n\t */\n\tprivate _onstop(time: Seconds): void {\n\t\t// stop the players\n\t\tthis._activeSources.forEach((source) => {\n\t\t\tsource.fadeOut = 0;\n\t\t\tsource.stop(time);\n\t\t});\n\t\tthis.onstop(this);\n\t}\n\n\t/**\n\t * Invoked on each clock tick. scheduled a new grain at this time.\n\t */\n\tprivate _tick(time: Seconds): void {\n\t\t// check if it should stop looping\n\t\tconst ticks = this._clock.getTicksAtTime(time);\n\t\tconst grainSize = 1 / this._clock.frequency.getValueAtTime(time);\n\t\tconst offset = ticks * grainSize;\n\t\tthis.log(\"offset\", offset);\n\n\t\tif (!this.loop && offset > this.buffer.duration) {\n\t\t\tthis.stop(time);\n\t\t\treturn;\n\t\t}\n\n\t\t// at the beginning of the file, the fade in should be 0\n\t\tconst fadeIn = offset < this._overlap ? 0 : this._overlap;\n\n\t\t// create a buffer source\n\t\tconst source = new ToneBufferSource({\n\t\t\tcontext: this.context,\n\t\t\tbuffer: this.buffer,\n\t\t\tfadeIn: fadeIn,\n\t\t\tfadeOut: this._overlap,\n\t\t\tloop: this.loop,\n\t\t\tloopStart: this._loopStart,\n\t\t\tloopEnd: this._loopEnd,\n\t\t\t// compute the playbackRate based on the detune\n\t\t\tplaybackRate: intervalToFrequencyRatio(this.detune / 100)\n\t\t}).connect(this.output);\n\n\t\tsource.start(time, this._grainSize * ticks);\n\t\tsource.stop(time + this._grainSize / this.playbackRate);\n\n\t\t// add it to the active sources\n\t\tthis._activeSources.push(source);\n\t\t// remove it when it's done\n\t\tsource.onended = () => {\n\t\t\tconst index = this._activeSources.indexOf(source);\n\t\t\tif (index !== -1) {\n\t\t\t\tthis._activeSources.splice(index, 1);\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * The playback rate of the sample\n\t */\n\tget playbackRate(): Positive {\n\t\treturn this._playbackRate;\n\t}\n\tset playbackRate(rate) {\n\t\tthis._playbackRate = rate;\n\t\tthis.grainSize = this._grainSize;\n\t}\n\n\t/**\n\t * The loop start time.\n\t */\n\tget loopStart(): Time {\n\t\treturn this._loopStart;\n\t}\n\tset loopStart(time) {\n\t\tthis._loopStart = this.toSeconds(time);\n\t}\n\n\t/**\n\t * The loop end time.\n\t */\n\tget loopEnd(): Time {\n\t\treturn this._loopEnd;\n\t}\n\tset loopEnd(time) {\n\t\tthis._loopEnd = this.toSeconds(time);\n\t}\n\n\t/**\n\t * The direction the buffer should play in\n\t */\n\tget reverse() {\n\t\treturn this.buffer.reverse;\n\t}\n\n\tset reverse(rev) {\n\t\tthis.buffer.reverse = rev;\n\t}\n\n\t/**\n\t * The size of each chunk of audio that the\n\t * buffer is chopped into and played back at.\n\t */\n\tget grainSize(): Time {\n\t\treturn this._grainSize;\n\t}\n\tset grainSize(size) {\n\t\tthis._grainSize = this.toSeconds(size);\n\t\tthis._clock.frequency.setValueAtTime(this._playbackRate / this._grainSize, this.now());\n\t}\n\n\t/**\n\t * The duration of the cross-fade between successive grains.\n\t */\n\tget overlap(): Time {\n\t\treturn this._overlap;\n\t}\n\tset overlap(time) {\n\t\tthis._overlap = this.toSeconds(time);\n\t}\n\n\t/**\n\t * If all the buffer is loaded\n\t */\n\tget loaded(): boolean {\n\t\treturn this.buffer.loaded;\n\t}\n\n\tdispose(): this{\n\t\tsuper.dispose();\n\t\tthis.buffer.dispose();\n\t\tthis._clock.dispose();\n\t\tthis._activeSources.forEach((source) => source.dispose());\n\t\treturn this;\n\t}\n}\n","import { Scale, ScaleOptions } from \"./Scale\";\nimport { Positive } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Pow } from \"./Pow\";\n\nexport interface ScaleExpOptions extends ScaleOptions {\n\texponent: Positive;\n}\n\n/**\n * Performs an exponential scaling on an input signal.\n * Scales a NormalRange value [0,1] exponentially\n * to the output range of outputMin to outputMax.\n * @example\n * import { ScaleExp, Signal } from \"tone\";\n * const scaleExp = new ScaleExp(0, 100, 2);\n * const signal = new Signal(0.5).connect(scaleExp);\n */\nexport class ScaleExp extends Scale<ScaleExpOptions> {\n\n\treadonly name: string = \"ScaleExp\";\n\n\t/**\n\t * The exponent scaler\n\t */\n\tprivate _exp: Pow;\n\n\t/**\n\t * @param min The output value when the input is 0.\n\t * @param max The output value when the input is 1.\n\t * @param exponent The exponent which scales the incoming signal.\n\t */\n\tconstructor(min?: number, max?: number, exponent?: number);\n\tconstructor(options?: Partial<ScaleExpOptions>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(ScaleExp.getDefaults(), arguments, [\"min\", \"max\", \"exponent\"])));\n\t\tconst options = optionsFromArguments(ScaleExp.getDefaults(), arguments, [\"min\", \"max\", \"exponent\"]);\n\n\t\tthis.input = this._exp = new Pow({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.exponent,\n\t\t});\n\t\tthis._exp.connect(this._mult);\n\t}\n\n\tstatic getDefaults(): ScaleExpOptions {\n\t\treturn Object.assign(Scale.getDefaults(), {\n\t\t\texponent: 1,\n\t\t});\n\t}\n\n\t/**\n\t * Instead of interpolating linearly between the [[min]] and\n\t * [[max]] values, setting the exponent will interpolate between\n\t * the two values with an exponential curve.\n\t */\n\tget exponent(): Positive {\n\t\treturn this._exp.value;\n\t}\n\tset exponent(exp) {\n\t\tthis._exp.value = exp;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._exp.dispose();\n\t\treturn this;\n\t}\n}\n","import { Volume } from \"../component/channel/Volume\";\nimport { Param } from \"../core/context/Param\";\nimport { OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { Decibels, Frequency, NormalRange, Time } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\n\nexport interface InstrumentOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n}\n\n/**\n * Base-class for all instruments\n */\nexport abstract class Instrument<Options extends InstrumentOptions> extends ToneAudioNode<Options> {\n\n\t/**\n\t * The output and volume triming node\n\t */\n\tprivate _volume: Volume;\n\toutput: OutputNode;\n\n\t/**\n\t * The instrument only has an output\n\t */\n\tinput: undefined;\n\n\t/**\n\t * The volume of the output in decibels.\n\t * @example\n\t * import { AMSynth } from \"tone\";\n\t * const amSynth = new AMSynth().toDestination();\n\t * amSynth.volume.value = -6;\n\t * amSynth.triggerAttackRelease(\"G#3\", 0.2);\n\t */\n\tvolume: Param<\"decibels\">;\n\n\t/**\n\t * Keep track of all events scheduled to the transport\n\t * when the instrument is 'synced'\n\t */\n\tprivate _scheduledEvents: number[] = [];\n\n\t/**\n\t * If the instrument is currently synced\n\t */\n\tprivate _synced: boolean = false;\n\n\tconstructor(options?: Partial<InstrumentOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Instrument.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Instrument.getDefaults(), arguments);\n\n\t\tthis._volume = this.output = new Volume({\n\t\t\tcontext: this.context,\n\t\t\tvolume: options.volume,\n\t\t});\n\t\tthis.volume = this._volume.volume;\n\t\treadOnly(this, \"volume\");\n\t}\n\n\tstatic getDefaults(): InstrumentOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Sync the instrument to the Transport. All subsequent calls of\n\t * [[triggerAttack]] and [[triggerRelease]] will be scheduled along the transport.\n\t * @example\n\t * import { FMSynth, Transport } from \"tone\";\n\t * const fmSynth = new FMSynth().toDestination();\n\t * fmSynth.volume.value = -6;\n\t * fmSynth.sync();\n\t * // schedule 3 notes when the transport first starts\n\t * fmSynth.triggerAttackRelease(\"C4\", \"8n\", 0);\n\t * fmSynth.triggerAttackRelease(\"E4\", \"8n\", \"8n\");\n\t * fmSynth.triggerAttackRelease(\"G4\", \"8n\", \"4n\");\n\t * // start the transport to hear the notes\n\t * Transport.start();\n\t */\n\tsync(): this {\n\t\tif (!this._synced) {\n\t\t\tthis._synced = true;\n\t\t\tthis._syncMethod(\"triggerAttack\", 1);\n\t\t\tthis._syncMethod(\"triggerRelease\", 0);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Wrap the given method so that it can be synchronized\n\t * @param method Which method to wrap and sync\n\t * @param  timePosition What position the time argument appears in\n\t */\n\tprotected _syncMethod(method: string, timePosition: number): void {\n\t\tconst originalMethod = this[\"_original_\" + method] = this[method];\n\t\tthis[method] = (...args: any[]) => {\n\t\t\tconst time = args[timePosition];\n\t\t\tconst id = this.context.transport.schedule((t) => {\n\t\t\t\targs[timePosition] = t;\n\t\t\t\toriginalMethod.apply(this, args);\n\t\t\t}, time);\n\t\t\tthis._scheduledEvents.push(id);\n\t\t};\n\t}\n\n\t/**\n\t * Unsync the instrument from the Transport\n\t */\n\tunsync(): this {\n\t\tthis._scheduledEvents.forEach(id => this.context.transport.clear(id));\n\t\tthis._scheduledEvents = [];\n\t\tif (this._synced) {\n\t\t\tthis._synced = false;\n\t\t\tthis.triggerAttack = this._original_triggerAttack;\n\t\t\tthis.triggerRelease = this._original_triggerRelease;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Trigger the attack and then the release after the duration.\n\t * @param  note     The note to trigger.\n\t * @param  duration How long the note should be held for before\n\t *                         triggering the release. This value must be greater than 0.\n\t * @param time  When the note should be triggered.\n\t * @param  velocity The velocity the note should be triggered at.\n\t * @example\n\t * import { Synth } from \"tone\";\n\t * const synth = new Synth().toDestination();\n\t * // trigger \"C4\" for the duration of an 8th note\n\t * synth.triggerAttackRelease(\"C4\", \"8n\");\n\t */\n\ttriggerAttackRelease(note: Frequency, duration: Time, time?: Time, velocity?: NormalRange): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst computedDuration = this.toSeconds(duration);\n\t\tthis.triggerAttack(note, computedTime, velocity);\n\t\tthis.triggerRelease(computedTime + computedDuration);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Start the instrument's note.\n\t * @param note the note to trigger\n\t * @param time the time to trigger the ntoe\n\t * @param velocity the velocity to trigger the note (betwee 0-1)\n\t */\n\tabstract triggerAttack(note: Frequency, time?: Time, velocity?: NormalRange): this;\n\tprivate _original_triggerAttack = this.triggerAttack;\n\n\t/**\n\t * Trigger the release phase of the current note.\n\t * @param time when to trigger the release\n\t */\n\tabstract triggerRelease(...args: any[]): this;\n\tprivate _original_triggerRelease = this.triggerRelease;\n\n\t/**\n\t * clean up\n\t * @returns {Instrument} this\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._volume.dispose();\n\t\tthis.unsync();\n\t\tthis._scheduledEvents = [];\n\t\treturn this;\n\t}\n}\n","import { FrequencyClass } from \"../core/type/Frequency\";\nimport { Cents, Frequency, NormalRange, Seconds, Time } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { Instrument, InstrumentOptions } from \"../instrument/Instrument\";\nimport { Signal } from \"../signal/Signal\";\n\ntype onSilenceCallback = (instrument: Monophonic<any>) => void;\n\nexport interface MonophonicOptions extends InstrumentOptions {\n\tportamento: Seconds;\n\tonsilence: onSilenceCallback;\n\tdetune: Cents;\n}\n\n/**\n * Abstract base class for other monophonic instruments to extend.\n */\nexport abstract class Monophonic<Options extends MonophonicOptions> extends Instrument<Options> {\n\n\t/**\n\t * The glide time between notes.\n\t */\n\tportamento: Seconds;\n\n\t/**\n\t * Invoked when the release has finished and the output is silent.\n\t */\n\tonsilence: onSilenceCallback;\n\n\t/**\n\t * The instrument's frequency signal.\n\t */\n\tabstract readonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * The instrument's detune control signal.\n\t */\n\tabstract readonly detune: Signal<\"cents\">;\n\n\tconstructor(options?: Partial<MonophonicOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Monophonic.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Monophonic.getDefaults(), arguments);\n\n\t\tthis.portamento = options.portamento;\n\t\tthis.onsilence = options.onsilence;\n\t}\n\n\tstatic getDefaults(): MonophonicOptions {\n\t\treturn Object.assign(Instrument.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tonsilence: noOp,\n\t\t\tportamento: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Trigger the attack of the note optionally with a given velocity.\n\t * @param  note The note to trigger.\n\t * @param  time When the note should start.\n\t * @param  velocity The velocity scaler determines how \"loud\" the note will be triggered.\n\t * @example\n\t * import { Synth } from \"tone\";\n\t * const synth = new Synth().toDestination();\n\t * // trigger the note a half second from now at half velocity\n\t * synth.triggerAttack(\"C4\", \"+0.5\", 0.5);\n\t */\n\ttriggerAttack(note: Frequency | FrequencyClass, time?: Time, velocity: NormalRange = 1): this {\n\t\tthis.log(\"triggerAttack\", note, time, velocity);\n\t\tconst seconds = this.toSeconds(time);\n\t\tthis._triggerEnvelopeAttack(seconds, velocity);\n\t\tthis.setNote(note, seconds);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Trigger the release portion of the envelope\n\t * @param  time If no time is given, the release happens immediatly\n\t * @example\n\t * import { Synth } from \"tone\";\n\t * const synth = new Synth().toDestination();\n\t * synth.triggerAttack(\"C4\");\n\t * // trigger the release a second from now\n\t * synth.triggerRelease(\"+1\");\n\t */\n\ttriggerRelease(time?: Time): this {\n\t\tthis.log(\"triggerRelease\", time);\n\t\tconst seconds = this.toSeconds(time);\n\t\tthis._triggerEnvelopeRelease(seconds);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Internal method which starts the envelope attack\n\t */\n\tprotected abstract _triggerEnvelopeAttack(time: Seconds, velocity: NormalRange): void;\n\n\t/**\n\t * Internal method which starts the envelope release\n\t */\n\tprotected abstract _triggerEnvelopeRelease(time: Seconds): void;\n\n\t/**\n\t * Get the level of the output at the given time. Measures\n\t * the envelope(s) value at the time.\n\t * @param time The time to query the envelope value\n\t * @return The output level between 0-1\n\t */\n\tabstract getLevelAtTime(time: Time): NormalRange;\n\n\t/**\n\t * Set the note at the given time. If no time is given, the note\n\t * will set immediately.\n\t * @param note The note to change to.\n\t * @param  time The time when the note should be set.\n\t * @example\n\t * import { Synth } from \"tone\";\n\t * const synth = new Synth().toDestination();\n\t * synth.triggerAttack(\"C4\");\n\t * // change to F#6 in one quarter note from now.\n\t * synth.setNote(\"F#6\", \"+4n\");\n\t */\n\tsetNote(note: Frequency | FrequencyClass, time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst computedFrequency = note instanceof FrequencyClass ? note.toFrequency() : note;\n\t\tif (this.portamento > 0 && this.getLevelAtTime(computedTime) > 0.05) {\n\t\t\tconst portTime = this.toSeconds(this.portamento);\n\t\t\tthis.frequency.exponentialRampTo(computedFrequency, portTime, computedTime);\n\t\t} else {\n\t\t\tthis.frequency.setValueAtTime(computedFrequency, computedTime);\n\t\t}\n\t\treturn this;\n\t}\n}\n","import { AmplitudeEnvelope } from \"../component/envelope/AmplitudeEnvelope\";\nimport { Envelope, EnvelopeOptions } from \"../component/envelope/Envelope\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { NormalRange, Seconds, Time } from \"../core/type/Units\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { RecursivePartial } from \"../core/util/Interface\";\nimport { Signal } from \"../signal/Signal\";\nimport { OmniOscillator } from \"../source/oscillator/OmniOscillator\";\nimport { OmniOscillatorSynthOptions } from \"../source/oscillator/OscillatorInterface\";\nimport { Source } from \"../source/Source\";\nimport { Monophonic, MonophonicOptions } from \"./Monophonic\";\n\nexport interface SynthOptions extends MonophonicOptions {\n\toscillator: OmniOscillatorSynthOptions;\n\tenvelope: Omit<EnvelopeOptions, keyof ToneAudioNodeOptions>;\n}\n\n/**\n * Synth is composed simply of a {@link OmniOscillator} routed through an {@link AmplitudeEnvelope}.\n * ```\n * +----------------+   +-------------------+\n * | OmniOscillator +>--> AmplitudeEnvelope +>--> Output\n * +----------------+   +-------------------+\n * ```\n * @example\n * import { Synth } from \"tone\";\n * const synth = new Synth().toDestination();\n * synth.triggerAttackRelease(\"C4\", \"8n\");\n * @category Instrument\n */\nexport class Synth<Options extends SynthOptions = SynthOptions> extends Monophonic<Options> {\n\n\treadonly name: string = \"Synth\";\n\n\t/**\n\t * The oscillator.\n\t */\n\treadonly oscillator: OmniOscillator<any>;\n\n\t/**\n\t * The frequency signal\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * The detune signal\n\t */\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * The envelope\n\t */\n\treadonly envelope: AmplitudeEnvelope;\n\n\t/**\n\t * @param options the options available for the synth.\n\t */\n\tconstructor(options?: RecursivePartial<SynthOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Synth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Synth.getDefaults(), arguments);\n\n\t\tthis.oscillator = new OmniOscillator(Object.assign({\n\t\t\tcontext: this.context,\n\t\t\tdetune: options.detune,\n\t\t\tonstop: () => this.onsilence(this),\n\t\t}, options.oscillator));\n\n\t\tthis.frequency = this.oscillator.frequency;\n\t\tthis.detune = this.oscillator.detune;\n\n\t\tthis.envelope = new AmplitudeEnvelope(Object.assign({\n\t\t\tcontext: this.context,\n\t\t}, options.envelope));\n\n\t\t// connect the oscillators to the output\n\t\tthis.oscillator.chain(this.envelope, this.output);\n\t\treadOnly(this, [\"oscillator\", \"frequency\", \"detune\", \"envelope\"]);\n\t}\n\n\tstatic getDefaults(): SynthOptions {\n\t\treturn Object.assign(Monophonic.getDefaults(), {\n\t\t\tenvelope: Object.assign(\n\t\t\t\tomitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())),\n\t\t\t\t{\n\t\t\t\t\tattack: 0.005,\n\t\t\t\t\tdecay: 0.1,\n\t\t\t\t\trelease: 1,\n\t\t\t\t\tsustain: 0.3,\n\t\t\t\t},\n\t\t\t),\n\t\t\toscillator: Object.assign(\n\t\t\t\tomitFromObject(OmniOscillator.getDefaults(), [...Object.keys(Source.getDefaults()), \"frequency\", \"detune\"]),\n\t\t\t\t{\n\t\t\t\t\ttype: \"triangle\",\n\t\t\t\t},\n\t\t\t),\n\t\t});\n\t}\n\n\t/**\n\t * start the attack portion of the envelope\n\t * @param time the time the attack should start\n\t * @param velocity the velocity of the note (0-1)\n\t */\n\tprotected _triggerEnvelopeAttack(time: Seconds, velocity: number): void {\n\t\t// the envelopes\n\t\tthis.envelope.triggerAttack(time, velocity);\n\t\tthis.oscillator.start(time);\n\t\t// if there is no release portion, stop the oscillator\n\t\tif (this.envelope.sustain === 0) {\n\t\t\tconst computedAttack = this.toSeconds(this.envelope.attack);\n\t\t\tconst computedDecay = this.toSeconds(this.envelope.decay);\n\t\t\tthis.oscillator.stop(time + computedAttack + computedDecay);\n\t\t}\n\t}\n\n\t/**\n\t * start the release portion of the envelope\n\t * @param time the time the release should start\n\t */\n\tprotected _triggerEnvelopeRelease(time: Seconds): void {\n\t\tthis.envelope.triggerRelease(time);\n\t\tthis.oscillator.stop(time + this.toSeconds(this.envelope.release));\n\t}\n\n\tgetLevelAtTime(time: Time): NormalRange {\n\t\ttime = this.toSeconds(time);\n\t\treturn this.envelope.getValueAtTime(time);\n\t}\n\n\t/**\n\t * clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.oscillator.dispose();\n\t\tthis.envelope.dispose();\n\t\treturn this;\n\t}\n}\n","import { Signal } from \"../signal/Signal\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Gain } from \"../core/context/Gain\";\nimport { NormalRange, Positive, Seconds, Time } from \"../core/type/Units\";\nimport { Envelope, EnvelopeOptions } from \"../component/envelope/Envelope\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { Monophonic } from \"./Monophonic\";\nimport { OmniOscillator } from \"../source/oscillator/OmniOscillator\";\nimport { OmniOscillatorSynthOptions } from \"../source/oscillator/OscillatorInterface\";\nimport { Source } from \"../source/Source\";\nimport { Synth, SynthOptions } from \"./Synth\";\nimport { AmplitudeEnvelope } from \"../component/envelope/AmplitudeEnvelope\";\nimport { readOnly, RecursivePartial } from \"../core/util/Interface\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\n\nexport interface ModulationSynthOptions extends SynthOptions {\n\tharmonicity: Positive;\n\tmodulationEnvelope: Omit<EnvelopeOptions, keyof ToneAudioNodeOptions>;\n\tmodulation: OmniOscillatorSynthOptions;\n}\n/**\n * Base class for both AM and FM synths\n */\nexport abstract class ModulationSynth<Options extends ModulationSynthOptions> extends Monophonic<Options> {\n\n\treadonly name: string = \"ModulationSynth\";\n\n\t/**\n\t * The carrier voice.\n\t */\n\tprotected _carrier: Synth;\n\n\t/**\n\t * The modulator voice.\n\t */\n\n\tprotected _modulator: Synth;\n\n\t/**\n\t * The carrier's oscillator\n\t */\n\treadonly oscillator: OmniOscillator<any>;\n\n\t/**\n\t * The carrier's envelope\n\t */\n\treadonly envelope: AmplitudeEnvelope;\n\n\t/**\n\t * The modulator's oscillator which is applied to the amplitude of the oscillator\n\t */\n\treadonly modulation: OmniOscillator<any>;\n\n\t/**\n\t * The modulator's envelope\n\t */\n\treadonly modulationEnvelope: AmplitudeEnvelope;\n\n\t/**\n\t * The frequency control\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * The detune in cents\n\t */\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * Harmonicity is the ratio between the two voices. A harmonicity of\n\t * 1 is no change. Harmonicity = 2 means a change of an octave.\n\t * @example\n\t * import { AMSynth } from \"tone\";\n\t * const amSynth = new AMSynth().toDestination();\n\t * // pitch the modulator an octave below oscillator\n\t * amSynth.harmonicity.value = 0.5;\n\t * amSynth.triggerAttackRelease(\"C5\", \"4n\");\n\t */\n\treadonly harmonicity: Multiply;\n\n\t/**\n\t * The node where the modulation happens\n\t */\n\tprotected _modulationNode: Gain;\n\n\tconstructor(options?: RecursivePartial<ModulationSynthOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(ModulationSynth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(ModulationSynth.getDefaults(), arguments);\n\n\t\tthis._carrier = new Synth({\n\t\t\tcontext: this.context,\n\t\t\toscillator: options.oscillator,\n\t\t\tenvelope: options.envelope,\n\t\t\tonsilence: () => this.onsilence(this),\n\t\t\tvolume: -10,\n\t\t});\n\t\tthis._modulator = new Synth({\n\t\t\tcontext: this.context,\n\t\t\toscillator: options.modulation,\n\t\t\tenvelope: options.modulationEnvelope,\n\t\t\tvolume: -10,\n\t\t});\n\n\t\tthis.oscillator = this._carrier.oscillator;\n\t\tthis.envelope = this._carrier.envelope;\n\t\tthis.modulation = this._modulator.oscillator;\n\t\tthis.modulationEnvelope = this._modulator.envelope;\n\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t});\n\t\tthis.detune = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.detune,\n\t\t\tunits: \"cents\"\n\t\t});\n\t\tthis.harmonicity = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.harmonicity,\n\t\t});\n\t\tthis._modulationNode = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: 0,\n\t\t});\n\t\t\n\t\treadOnly(this, [\"frequency\", \"harmonicity\", \"oscillator\", \"envelope\", \"modulation\", \"modulationEnvelope\", \"detune\"]);\n\t}\n\n\tstatic getDefaults(): ModulationSynthOptions {\n\t\treturn Object.assign(Monophonic.getDefaults(), {\n\t\t\tharmonicity: 3,\n\t\t\toscillator: Object.assign(\n\t\t\t\tomitFromObject(OmniOscillator.getDefaults(), [\n\t\t\t\t\t...Object.keys(Source.getDefaults()),\n\t\t\t\t\t\"frequency\",\n\t\t\t\t\t\"detune\"\n\t\t\t\t]),\n\t\t\t\t{\n\t\t\t\t\ttype: \"sine\"\n\t\t\t\t}\n\t\t\t),\n\t\t\tenvelope: Object.assign(\n\t\t\t\tomitFromObject(\n\t\t\t\t\tEnvelope.getDefaults(),\n\t\t\t\t\tObject.keys(ToneAudioNode.getDefaults())\n\t\t\t\t),\n\t\t\t\t{\n\t\t\t\t\tattack: 0.01,\n\t\t\t\t\tdecay: 0.01,\n\t\t\t\t\tsustain: 1,\n\t\t\t\t\trelease: 0.5\n\t\t\t\t}\n\t\t\t),\n\t\t\tmodulation: Object.assign(\n\t\t\t\tomitFromObject(OmniOscillator.getDefaults(), [\n\t\t\t\t\t...Object.keys(Source.getDefaults()),\n\t\t\t\t\t\"frequency\",\n\t\t\t\t\t\"detune\"\n\t\t\t\t]),\n\t\t\t\t{\n\t\t\t\t\ttype: \"square\"\n\t\t\t\t}\n\t\t\t),\n\t\t\tmodulationEnvelope: Object.assign(\n\t\t\t\tomitFromObject(\n\t\t\t\t\tEnvelope.getDefaults(),\n\t\t\t\t\tObject.keys(ToneAudioNode.getDefaults())\n\t\t\t\t),\n\t\t\t\t{\n\t\t\t\t\tattack: 0.5,\n\t\t\t\t\tdecay: 0.0,\n\t\t\t\t\tsustain: 1,\n\t\t\t\t\trelease: 0.5\n\t\t\t\t}\n\t\t\t)\n\t\t});\n\t}\n\n\t/**\n\t * Trigger the attack portion of the note\n\t */\n\tprotected _triggerEnvelopeAttack(time: Seconds, velocity: number): void {\n\t\t// @ts-ignore\n\t\tthis._carrier._triggerEnvelopeAttack(time, velocity);\n\t\t// @ts-ignore\n\t\tthis._modulator._triggerEnvelopeAttack(time, velocity);\n\t}\n\t\n\t/**\n\t * Trigger the release portion of the note\n\t */\n\tprotected _triggerEnvelopeRelease(time: Seconds) {\n\t\t// @ts-ignore\n\t\tthis._carrier._triggerEnvelopeRelease(time);\n\t\t// @ts-ignore\n\t\tthis._modulator._triggerEnvelopeRelease(time);\n\t\treturn this;\n\t}\n\t\n\tgetLevelAtTime(time: Time): NormalRange {\n\t\ttime = this.toSeconds(time);\n\t\treturn this.envelope.getValueAtTime(time);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._carrier.dispose();\n\t\tthis._modulator.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\tthis.harmonicity.dispose();\n\t\tthis._modulationNode.dispose();\n\t\treturn this;\n\t}\n}\n","import { AudioToGain } from \"../signal/AudioToGain\";\nimport { RecursivePartial } from \"../core/util/Interface\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { ModulationSynth, ModulationSynthOptions } from \"./ModulationSynth\";\n\nexport type AMSynthOptions = ModulationSynthOptions;\n\n/**\n * AMSynth uses the output of one Tone.Synth to modulate the\n * amplitude of another Tone.Synth. The harmonicity (the ratio between\n * the two signals) affects the timbre of the output signal greatly.\n * Read more about Amplitude Modulation Synthesis on\n * [SoundOnSound](https://web.archive.org/web/20160404103653/http://www.soundonsound.com:80/sos/mar00/articles/synthsecrets.htm).\n *\n * @example\n * import { AMSynth } from \"tone\";\n * const synth = new AMSynth().toMaster();\n * synth.triggerAttackRelease(\"C4\", \"4n\");\n * \n * @category Instrument\n */\nexport class AMSynth extends ModulationSynth<AMSynthOptions> {\n\n\treadonly name: string = \"AMSynth\";\n\n\t/**\n\t * Scale the oscillator from -1,1 to 0-1\n\t */\n\tprivate _modulationScale: AudioToGain;\n\n\tconstructor(options?: RecursivePartial<AMSynthOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(AMSynth.getDefaults(), arguments));\n\n\t\tthis._modulationScale = new AudioToGain({\n\t\t\tcontext: this.context,\n\t\t});\n\n\t\t// control the two voices frequency\n\t\tthis.frequency.connect(this._carrier.frequency);\n\t\tthis.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t\tthis.detune.fan(this._carrier.detune, this._modulator.detune);\n\t\tthis._modulator.chain(this._modulationScale, this._modulationNode.gain);\n\t\tthis._carrier.chain(this._modulationNode, this.output);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._modulationScale.dispose();\n\t\treturn this;\n\t}\n}\n","import { AmplitudeEnvelope } from \"../component/envelope/AmplitudeEnvelope\";\nimport { Envelope, EnvelopeOptions } from \"../component/envelope/Envelope\";\nimport { Filter, FilterOptions } from \"../component/filter/Filter\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly, RecursivePartial } from \"../core/util/Interface\";\nimport { Monophonic, MonophonicOptions } from \"../instrument/Monophonic\";\nimport { OmniOscillator } from \"../source/oscillator/OmniOscillator\";\nimport { Source } from \"../source/Source\";\nimport { FrequencyEnvelope, FrequencyEnvelopeOptions } from \"../component/envelope/FrequencyEnvelope\";\nimport { NormalRange, Seconds, Time } from \"../core/type/Units\";\nimport { Signal } from \"../signal/Signal\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { OmniOscillatorSynthOptions } from \"../source/oscillator/OscillatorInterface\";\n\nexport interface MonoSynthOptions extends MonophonicOptions {\n\toscillator: OmniOscillatorSynthOptions;\n\tenvelope: Omit<EnvelopeOptions, keyof ToneAudioNodeOptions>;\n\tfilterEnvelope: Omit<FrequencyEnvelopeOptions, keyof ToneAudioNodeOptions>;\n\tfilter: Omit<FilterOptions, keyof ToneAudioNodeOptions>;\n}\n\n/**\n * MonoSynth is composed of one `oscillator`, one `filter`, and two `envelopes`.\n * The amplitude of the Oscillator and the cutoff frequency of the\n * Filter are controlled by Envelopes.\n * <img src=\"https://docs.google.com/drawings/d/1gaY1DF9_Hzkodqf8JI1Cg2VZfwSElpFQfI94IQwad38/pub?w=924&h=240\">\n * @example\n * import { MonoSynth } from \"tone\";\n * const synth = new MonoSynth({\n * \toscillator: {\n * \t\ttype: \"square\"\n * \t},\n * \tenvelope: {\n * \t\tattack: 0.1\n * \t}\n * }).toDestination();\n * synth.triggerAttackRelease(\"C4\", \"8n\");\n * @category Instrument\n */\nexport class MonoSynth extends Monophonic<MonoSynthOptions> {\n\n\treadonly name = \"MonoSynth\";\n\n\t/**\n\t * The oscillator.\n\t */\n\treadonly oscillator: OmniOscillator<any>;\n\n\t/**\n\t * The frequency control.\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * The detune control.\n\t */\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * The filter.\n\t */\n\treadonly filter: Filter;\n\n\t/**\n\t * The filter envelope.\n\t */\n\treadonly filterEnvelope: FrequencyEnvelope;\n\n\t/**\n\t * The amplitude envelope.\n\t */\n\treadonly envelope: AmplitudeEnvelope;\n\n\tconstructor(options?: RecursivePartial<MonoSynthOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(MonoSynth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(MonoSynth.getDefaults(), arguments);\n\n\t\tthis.oscillator = new OmniOscillator(Object.assign(options.oscillator, { \n\t\t\tcontext: this.context,\n\t\t\tdetune: options.detune,\n\t\t\tonstop: () => this.onsilence(this),\n\t\t}));\n\t\tthis.frequency = this.oscillator.frequency;\n\t\tthis.detune = this.oscillator.detune;\n\t\tthis.filter = new Filter(Object.assign(options.filter, { context: this.context }));\n\t\tthis.filterEnvelope = new FrequencyEnvelope(Object.assign(options.filterEnvelope, { context: this.context }));\n\t\tthis.envelope = new AmplitudeEnvelope(Object.assign(options.envelope, { context: this.context }));\n\n\t\t// connect the oscillators to the output\n\t\tthis.oscillator.chain(this.filter, this.envelope, this.output);\n\n\t\t// connect the filter envelope\n\t\tthis.filterEnvelope.connect(this.filter.frequency);\n\t\t\n\t\treadOnly(this, [\"oscillator\", \"frequency\", \"detune\", \"filter\", \"filterEnvelope\", \"envelope\"]);\n\t}\n\n\tstatic getDefaults(): MonoSynthOptions {\n\t\treturn Object.assign(Monophonic.getDefaults(), {\n\t\t\tenvelope: Object.assign(\n\t\t\t\tomitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())),\n\t\t\t\t{\n\t\t\t\t\tattack: 0.005,\n\t\t\t\t\tdecay: 0.1,\n\t\t\t\t\trelease: 1,\n\t\t\t\t\tsustain: 0.9,\n\t\t\t\t},\n\t\t\t),\n\t\t\tfilter: Object.assign(\n\t\t\t\tomitFromObject(Filter.getDefaults(), Object.keys(ToneAudioNode.getDefaults())),\n\t\t\t\t{\n\t\t\t\t\tQ: 1,\n\t\t\t\t\trolloff: -12,\n\t\t\t\t\ttype: \"lowpass\",\n\t\t\t\t},\n\t\t\t),\n\t\t\tfilterEnvelope: Object.assign(\n\t\t\t\tomitFromObject(FrequencyEnvelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), \n\t\t\t\t{\n\t\t\t\t\tattack: 0.6,\n\t\t\t\t\tbaseFrequency: 200,\n\t\t\t\t\tdecay: 0.2,\n\t\t\t\t\texponent: 2,\n\t\t\t\t\toctaves: 3,\n\t\t\t\t\trelease: 2,\n\t\t\t\t\tsustain: 0.5,\n\t\t\t\t}\n\t\t\t),\n\t\t\toscillator: Object.assign(\n\t\t\t\tomitFromObject(OmniOscillator.getDefaults(), Object.keys(Source.getDefaults())),\n\t\t\t\t{\n\t\t\t\t\ttype: \"sawtooth\",\n\t\t\t\t},\n\t\t\t),\n\t\t});\n\t}\n\n\t/**\n\t * start the attack portion of the envelope\n\t * @param time the time the attack should start\n\t * @param velocity the velocity of the note (0-1)\n\t */\n\tprotected _triggerEnvelopeAttack(time: Seconds, velocity: number = 1): void {\n\t\tthis.envelope.triggerAttack(time, velocity);\n\t\tthis.filterEnvelope.triggerAttack(time);\n\t\tthis.oscillator.start(time);\n\t\tif (this.envelope.sustain === 0) {\n\t\t\tconst computedAttack = this.toSeconds(this.envelope.attack);\n\t\t\tconst computedDecay = this.toSeconds(this.envelope.decay);\n\t\t\tthis.oscillator.stop(time + computedAttack + computedDecay);\n\t\t}\n\t}\n\n\t/**\n\t * start the release portion of the envelope\n\t * @param time the time the release should start\n\t */\n\tprotected _triggerEnvelopeRelease(time: Seconds): void {\n\t\tthis.envelope.triggerRelease(time);\n\t\tthis.filterEnvelope.triggerRelease(time);\n\t\tthis.oscillator.stop(time + this.toSeconds(this.envelope.release));\n\t}\n\n\tgetLevelAtTime(time: Time): NormalRange {\n\t\ttime = this.toSeconds(time);\n\t\treturn this.envelope.getValueAtTime(time);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.oscillator.dispose();\n\t\tthis.envelope.dispose();\n\t\tthis.filterEnvelope.dispose();\n\t\tthis.filter.dispose();\n\t\treturn this;\n\t}\n}\n","import { Monophonic, MonophonicOptions } from \"./Monophonic\";\nimport { MonoSynth, MonoSynthOptions } from \"./MonoSynth\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly, RecursivePartial } from \"../core/util/Interface\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Gain, } from \"../core/context/Gain\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Frequency, NormalRange, Positive, Seconds, Time } from \"../core/type/Units\";\nimport { deepMerge, omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { Param } from \"../core/context/Param\";\n\nexport interface DuoSynthOptions extends MonophonicOptions {\n\tvoice0: Omit<MonoSynthOptions, keyof MonophonicOptions>;\n\tvoice1: Omit<MonoSynthOptions, keyof MonophonicOptions>;\n\tharmonicity: Positive;\n\tvibratoRate: Frequency;\n\tvibratoAmount: Positive;\n}\n\n/**\n * DuoSynth is a monophonic synth composed of two [[MonoSynths]] run in parallel with control over the\n * frequency ratio between the two voices and vibrato effect.\n * @example\n * import { DuoSynth } from \"tone\";\n * const duoSynth = new DuoSynth().toDestination();\n * duoSynth.triggerAttackRelease(\"C4\", \"2n\");\n * @category Instrument\n */\nexport class DuoSynth extends Monophonic<DuoSynthOptions> {\n\n\treadonly name: string = \"DuoSynth\";\n\n\treadonly frequency: Signal<\"frequency\">;\n\treadonly detune: Signal<\"cents\">;\n\t\t\n\t/**\n\t * the first voice\n\t */\n\treadonly voice0: MonoSynth;\n\n\t/**\n\t * the second voice\n\t */\n\treadonly voice1: MonoSynth;\n\t\n\t/**\n\t * The amount of vibrato\n\t */\n\tpublic vibratoAmount: Param<\"normalRange\">;\n\n\t/**\n\t * the vibrato frequency\n\t */\n\tpublic vibratoRate: Signal<\"frequency\">;\n\n\t/**\n\t * Harmonicity is the ratio between the two voices. A harmonicity of\n\t * 1 is no change. Harmonicity = 2 means a change of an octave.\n\t * @example\n\t * import { DuoSynth } from \"tone\";\n\t * const duoSynth = new DuoSynth().toDestination();\n\t * duoSynth.triggerAttackRelease(\"C4\", \"2n\");\n\t * // pitch voice1 an octave below voice0\n\t * duoSynth.harmonicity.value = 0.5;\n\t */\n\tpublic harmonicity: Signal<\"positive\">;\n\n\t/**\n\t * The vibrato LFO.\n\t */\n\tprivate _vibrato: LFO;\n\n\t/**\n\t * the vibrato gain\n\t */\n\tprivate _vibratoGain: Gain<\"normalRange\">;\n\n\tconstructor(options?: RecursivePartial<DuoSynthOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(DuoSynth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(DuoSynth.getDefaults(), arguments);\n\n\t\tthis.voice0 = new MonoSynth(Object.assign(options.voice0, { \n\t\t\tcontext: this.context, \n\t\t\tonsilence: () => this.onsilence(this)\n\t\t}));\n\t\tthis.voice1 = new MonoSynth(Object.assign(options.voice1, { \n\t\t\tcontext: this.context, \n\t\t}));\n\n\t\tthis.harmonicity = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.harmonicity,\n\t\t});\n\n\t\tthis._vibrato = new LFO({\n\t\t\tfrequency: options.vibratoRate,\n\t\t\tcontext: this.context,\n\t\t\tmin: -50,\n\t\t\tmax: 50\n\t\t});\n\t\t// start the vibrato immediately\n\t\tthis._vibrato.start();\n\t\tthis.vibratoRate = this._vibrato.frequency;\n\t\tthis._vibratoGain = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"normalRange\",\n\t\t\tgain: options.vibratoAmount\n\t\t});\n\t\tthis.vibratoAmount = this._vibratoGain.gain;\n\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: 440\n\t\t});\n\t\tthis.detune = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune\n\t\t});\n\t\t\n\t\t// control the two voices frequency\n\t\tthis.frequency.connect(this.voice0.frequency);\n\t\tthis.frequency.chain(this.harmonicity, this.voice1.frequency);\n\n\t\tthis._vibrato.connect(this._vibratoGain);\n\t\tthis._vibratoGain.fan(this.voice0.detune, this.voice1.detune);\n\n\t\tthis.detune.fan(this.voice0.detune, this.voice1.detune);\n\n\t\tthis.voice0.connect(this.output);\n\t\tthis.voice1.connect(this.output);\n\n\t\treadOnly(this, [\"voice0\", \"voice1\", \"frequency\", \"vibratoAmount\", \"vibratoRate\"]);\n\t}\n\n\tgetLevelAtTime(time: Time): NormalRange {\n\t\ttime = this.toSeconds(time);\n\t\treturn this.voice0.envelope.getValueAtTime(time) + this.voice1.envelope.getValueAtTime(time);\n\t}\n\n\tstatic getDefaults(): DuoSynthOptions {\n\t\treturn deepMerge(Monophonic.getDefaults(), {\n\t\t\tvibratoAmount: 0.5,\n\t\t\tvibratoRate: 5,\n\t\t\tharmonicity: 1.5,\n\t\t\tvoice0: deepMerge(\n\t\t\t\tomitFromObject(MonoSynth.getDefaults(), Object.keys(Monophonic.getDefaults())), \n\t\t\t\t{\n\t\t\t\t\tfilterEnvelope: {\n\t\t\t\t\t\tattack: 0.01,\n\t\t\t\t\t\tdecay: 0.0,\n\t\t\t\t\t\tsustain: 1,\n\t\t\t\t\t\trelease: 0.5\n\t\t\t\t\t},\n\t\t\t\t\tenvelope: {\n\t\t\t\t\t\tattack: 0.01,\n\t\t\t\t\t\tdecay: 0.0,\n\t\t\t\t\t\tsustain: 1,\n\t\t\t\t\t\trelease: 0.5\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\tvoice1: deepMerge(\n\t\t\t\tomitFromObject(MonoSynth.getDefaults(), Object.keys(Monophonic.getDefaults())), \n\t\t\t\t{\n\t\t\t\t\t\n\t\t\t\t\tfilterEnvelope: {\n\t\t\t\t\t\tattack: 0.01,\n\t\t\t\t\t\tdecay: 0.0,\n\t\t\t\t\t\tsustain: 1,\n\t\t\t\t\t\trelease: 0.5\n\t\t\t\t\t},\n\t\t\t\t\tenvelope: {\n\t\t\t\t\t\tattack: 0.01,\n\t\t\t\t\t\tdecay: 0.0,\n\t\t\t\t\t\tsustain: 1,\n\t\t\t\t\t\trelease: 0.5\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t}) as DuoSynthOptions;\n\t}\n\t/**\n\t * Trigger the attack portion of the note\n\t */\n\tprotected _triggerEnvelopeAttack(time: Seconds, velocity: number): void {\n\t\t// @ts-ignore\n\t\tthis.voice0._triggerEnvelopeAttack(time, velocity);\n\t\t// @ts-ignore\n\t\tthis.voice1._triggerEnvelopeAttack(time, velocity);\n\t}\n\t\n\t/**\n\t * Trigger the release portion of the note\n\t */\n\tprotected _triggerEnvelopeRelease(time: Seconds) {\n\t\t// @ts-ignore\n\t\tthis.voice0._triggerEnvelopeRelease(time);\n\t\t// @ts-ignore\n\t\tthis.voice1._triggerEnvelopeRelease(time);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.voice0.dispose();\n\t\tthis.voice1.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\tthis._vibrato.dispose();\n\t\tthis.vibratoRate.dispose();\n\t\tthis._vibratoGain.dispose();\n\t\tthis.harmonicity.dispose();\n\t\treturn this;\n\t}\n}\n\n","import { Positive } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { RecursivePartial } from \"../core/util/Interface\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { ModulationSynth, ModulationSynthOptions } from \"./ModulationSynth\";\n\nexport interface FMSynthOptions extends ModulationSynthOptions {\n\tmodulationIndex: Positive;\n}\n\n/**\n * FMSynth is composed of two Tone.Synths where one Tone.Synth modulates\n * the frequency of a second Tone.Synth. A lot of spectral content\n * can be explored using the modulationIndex parameter. Read more about\n * frequency modulation synthesis on Sound On Sound: [Part 1](https://web.archive.org/web/20160403123704/http://www.soundonsound.com/sos/apr00/articles/synthsecrets.htm), [Part 2](https://web.archive.org/web/20160403115835/http://www.soundonsound.com/sos/may00/articles/synth.htm).\n *\n * @example\n * import { FMSynth } from \"tone\";\n * const fmSynth = new FMSynth().toDestination();\n * fmSynth.triggerAttackRelease(\"C5\", \"4n\");\n * \n * @category Instrument\n */\n\nexport class FMSynth extends ModulationSynth<FMSynthOptions> {\n\treadonly name: string = \"FMSynth\";\n\n\t/**\n\t * The modulation index which essentially the depth or amount of the modulation. It is the\n\t * ratio of the frequency of the modulating signal (mf) to the amplitude of the\n\t * modulating signal (ma) -- as in ma/mf.\n\t */\n\treadonly modulationIndex: Multiply;\n\n\tconstructor(options?: RecursivePartial<FMSynthOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(FMSynth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(FMSynth.getDefaults(), arguments);\n\n\t\tthis.modulationIndex = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.modulationIndex,\n\t\t});\n\n\t\t// control the two voices frequency\n\t\tthis.frequency.connect(this._carrier.frequency);\n\t\tthis.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t\tthis.frequency.chain(this.modulationIndex, this._modulationNode);\n\t\tthis.detune.fan(this._carrier.detune, this._modulator.detune);\n\t\tthis._modulator.connect(this._modulationNode.gain);\n\t\tthis._modulationNode.connect(this._carrier.frequency);\n\t\tthis._carrier.connect(this.output);\n\t}\n\n\tstatic getDefaults(): FMSynthOptions {\n\t\treturn Object.assign(ModulationSynth.getDefaults(), {\n\t\t\tmodulationIndex: 10,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.modulationIndex.dispose();\n\t\treturn this;\n\t}\n}\n","import { Envelope, EnvelopeOptions } from \"../component/envelope/Envelope\";\nimport { Filter } from \"../component/filter/Filter\";\nimport { Gain } from \"../core/context/Gain\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { Frequency, NormalRange, Positive, Seconds, Time } from \"../core/type/Units\";\nimport { deepMerge, omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp, RecursivePartial } from \"../core/util/Interface\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Scale } from \"../signal/Scale\";\nimport { Signal } from \"../signal/Signal\";\nimport { FMOscillator } from \"../source/oscillator/FMOscillator\";\nimport { Monophonic, MonophonicOptions } from \"./Monophonic\";\n\nexport interface MetalSynthOptions extends MonophonicOptions {\n\tharmonicity: Positive;\n\tmodulationIndex: Positive;\n\toctaves: number;\n\tresonance: Frequency;\n\tenvelope: Omit<EnvelopeOptions, keyof ToneAudioNodeOptions>;\n}\n\n/**\n * Inharmonic ratio of frequencies based on the Roland TR-808\n * Taken from https://ccrma.stanford.edu/papers/tr-808-cymbal-physically-informed-circuit-bendable-digital-model\n */\nconst inharmRatios: number[] = [1.0, 1.483, 1.932, 2.546, 2.630, 3.897];\n\n/**\n * A highly inharmonic and spectrally complex source with a highpass filter\n * and amplitude envelope which is good for making metallophone sounds.\n * Based on CymbalSynth by [@polyrhythmatic](https://github.com/polyrhythmatic).\n * Inspiration from [Sound on Sound](https://shorturl.at/rSZ12).\n * @category Instrument\n */\nexport class MetalSynth extends Monophonic<MetalSynthOptions> {\n\n\treadonly name: string = \"MetalSynth\";\n\n\t/**\n\t * The frequency of the cymbal\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * The detune applied to the oscillators\n\t */\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * The array of FMOscillators\n\t */\n\tprivate _oscillators: FMOscillator[] = [];\n\n\t/**\n\t * The frequency multipliers\n\t */\n\tprivate _freqMultipliers: Multiply[] = [];\n\n\t/**\n\t * The gain node for the envelope.\n\t */\n\tprivate _amplitude: Gain;\n\n\t/**\n\t * Highpass the output\n\t */\n\tprivate _highpass: Filter;\n\n\t/**\n\t * The number of octaves the highpass\n\t * filter frequency ramps\n\t */\n\tprivate _octaves: number;\n\n\t/**\n\t * Scale the body envelope for the highpass filter\n\t */\n\tprivate _filterFreqScaler: Scale;\n\n\t/**\n\t * The envelope which is connected both to the\n\t * amplitude and a highpass filter's cutoff frequency.\n\t * The lower-limit of the filter is controlled by the [[resonance]]\n\t */\n\treadonly envelope: Envelope;\n\n\tconstructor(options?: RecursivePartial<MetalSynthOptions>)\n\tconstructor() {\n\t\tsuper(optionsFromArguments(MetalSynth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(MetalSynth.getDefaults(), arguments);\n\n\t\tthis.detune = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune,\n\t\t});\n\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t});\n\n\t\tthis._amplitude = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: 0,\n\t\t}).connect(this.output);\n\n\t\tthis._highpass = new Filter({\n\t\t\tQ: -3.0102999566398125,\n\t\t\tcontext: this.context,\n\t\t\ttype: \"highpass\",\n\t\t}).connect(this._amplitude);\n\n\t\tfor (let i = 0; i < inharmRatios.length; i++) {\n\t\t\tconst osc = new FMOscillator({\n\t\t\t\tcontext: this.context,\n\t\t\t\tharmonicity: options.harmonicity,\n\t\t\t\tmodulationIndex: options.modulationIndex,\n\t\t\t\tmodulationType: \"square\",\n\t\t\t\tonstop: i === 0 ? () => this.onsilence(this) : noOp,\n\t\t\t\ttype: \"square\",\n\t\t\t});\n\t\t\tosc.connect(this._highpass);\n\t\t\tthis._oscillators[i] = osc;\n\n\t\t\tconst mult = new Multiply({\n\t\t\t\tcontext: this.context,\n\t\t\t\tvalue: inharmRatios[i],\n\t\t\t});\n\t\t\tthis._freqMultipliers[i] = mult;\n\t\t\tthis.frequency.chain(mult, osc.frequency);\n\t\t\tthis.detune.connect(osc.detune);\n\t\t}\n\n\t\tthis._filterFreqScaler = new Scale({\n\t\t\tcontext: this.context,\n\t\t\tmax: 7000,\n\t\t\tmin: this.toFrequency(options.resonance),\n\t\t});\n\n\t\tthis.envelope = new Envelope({\n\t\t\tattack: options.envelope.attack,\n\t\t\tattackCurve: \"linear\",\n\t\t\tcontext: this.context,\n\t\t\tdecay: options.envelope.decay,\n\t\t\trelease: options.envelope.release,\n\t\t\tsustain: 0,\n\t\t});\n\n\t\tthis.envelope.chain(this._filterFreqScaler, this._highpass.frequency);\n\t\tthis.envelope.connect(this._amplitude.gain);\n\t\t// set the octaves\n\t\tthis._octaves = options.octaves;\n\t\tthis.octaves = options.octaves;\n\t}\n\n\tstatic getDefaults(): MetalSynthOptions {\n\t\treturn deepMerge(Monophonic.getDefaults(), {\n\t\t\tenvelope: Object.assign(\n\t\t\t\tomitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())),\n\t\t\t\t{\n\t\t\t\t\tattack: 0.001,\n\t\t\t\t\tdecay: 1.4,\n\t\t\t\t\trelease: 0.2,\n\t\t\t\t},\n\t\t\t),\n\t\t\tharmonicity: 5.1,\n\t\t\tmodulationIndex: 32,\n\t\t\toctaves: 1.5,\n\t\t\tresonance: 4000,\n\t\t});\n\t}\n\n\t/**\n\t * Trigger the attack.\n\t * @param time When the attack should be triggered.\n\t * @param velocity The velocity that the envelope should be triggered at.\n\t */\n\tprotected _triggerEnvelopeAttack(time: Seconds, velocity: NormalRange = 1): this {\n\t\tthis.envelope.triggerAttack(time, velocity);\n\t\tthis._oscillators.forEach(osc => osc.start(time));\n\t\tif (this.envelope.sustain === 0) {\n\t\t\tthis._oscillators.forEach(osc => {\n\t\t\t\tosc.stop(time + this.toSeconds(this.envelope.attack) + this.toSeconds(this.envelope.decay));\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\t\n\t/**\n\t * Trigger the release of the envelope.\n\t * @param time When the release should be triggered.\n\t */\n\tprotected _triggerEnvelopeRelease(time: Seconds): this {\n\t\tthis.envelope.triggerRelease(time);\n\t\tthis._oscillators.forEach(osc => osc.stop(time + this.toSeconds(this.envelope.release)));\n\t\treturn this;\n\t}\n\n\tgetLevelAtTime(time: Time): NormalRange {\n\t\ttime = this.toSeconds(time);\n\t\treturn this.envelope.getValueAtTime(time);\n\t}\n\n\t/**\n\t * The modulationIndex of the oscillators which make up the source.\n\t * see [[FMOscillator.modulationIndex]]\n\t * @min 1\n\t * @max 100\n\t */\n\tget modulationIndex(): number {\n\t\treturn this._oscillators[0].modulationIndex.value;\n\t}\n\tset modulationIndex(val) {\n\t\tthis._oscillators.forEach(osc => (osc.modulationIndex.value = val));\n\t}\n\n\t/**\n\t * The harmonicity of the oscillators which make up the source.\n\t * see Tone.FMOscillator.harmonicity\n\t * @min 0.1\n\t * @max 10\n\t */\n\tget harmonicity(): number {\n\t\treturn this._oscillators[0].harmonicity.value;\n\t}\n\tset harmonicity(val) {\n\t\tthis._oscillators.forEach(osc => (osc.harmonicity.value = val));\n\t}\n\n\t/**\n\t * The lower level of the highpass filter which is attached to the envelope.\n\t * This value should be between [0, 7000]\n\t * @min 0\n\t * @max 7000\n\t */\n\tget resonance(): Frequency {\n\t\treturn this._filterFreqScaler.min;\n\t}\n\tset resonance(val) {\n\t\tthis._filterFreqScaler.min = this.toFrequency(val);\n\t\tthis.octaves = this._octaves;\n\t}\n\n\t/**\n\t * The number of octaves above the \"resonance\" frequency\n\t * that the filter ramps during the attack/decay envelope\n\t * @min 0\n\t * @max 8\n\t */\n\tget octaves(): number {\n\t\treturn this._octaves;\n\t}\n\tset octaves(val) {\n\t\tthis._octaves = val;\n\t\tthis._filterFreqScaler.max = this._filterFreqScaler.min * Math.pow(2, val);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._oscillators.forEach(osc => osc.dispose());\n\t\tthis._freqMultipliers.forEach(freqMult => freqMult.dispose());\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\tthis._filterFreqScaler.dispose();\n\t\tthis._amplitude.dispose();\n\t\tthis.envelope.dispose();\n\t\tthis._highpass.dispose();\n\t\treturn this;\n\t}\n}\n","import { FrequencyClass } from \"../core/type/Frequency\";\nimport { Frequency, Positive, Time } from \"../core/type/Units\";\nimport { deepMerge, optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly, RecursivePartial } from \"../core/util/Interface\";\nimport { Monophonic } from \"./Monophonic\";\nimport { Synth, SynthOptions } from \"./Synth\";\n\nexport interface MembraneSynthOptions extends SynthOptions {\n\tpitchDecay: Time;\n\toctaves: Positive;\n}\n\n/**\n * MembraneSynth makes kick and tom sounds using a single oscillator\n * with an amplitude envelope and frequency ramp. A Tone.OmniOscillator\n * is routed through a Tone.AmplitudeEnvelope to the output. The drum\n * quality of the sound comes from the frequency envelope applied\n * during MembraneSynth.triggerAttack(note). The frequency envelope\n * starts at <code>note * .octaves</code> and ramps to <code>note</code>\n * over the duration of <code>.pitchDecay</code>.\n * @example\n * import { MembraneSynth } from \"tone\";\n * const synth = new MembraneSynth().toMaster();\n * synth.triggerAttackRelease(\"C2\", \"8n\");\n * @category Instrument\n */\nexport class MembraneSynth extends Synth<MembraneSynthOptions> {\n\n\treadonly name: string = \"MembraneSynth\";\n\n\t/**\n\t * The number of octaves the pitch envelope ramps.\n\t * @min 0.5\n\t * @max 8\n\t */\n\toctaves: Positive;\n\n\t/**\n\t * The amount of time the frequency envelope takes.\n\t * @min 0\n\t * @max 0.5\n\t */\n\tpitchDecay: Time;\n\n\t/**\n\t * Portamento is ignored in this synth. use pitch decay instead.\n\t */\n\treadonly portamento = 0;\n\n\t/**\n\t * @param options the options available for the synth see defaults\n\t */\n\tconstructor(options?: RecursivePartial<MembraneSynthOptions>)\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(MembraneSynth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(MembraneSynth.getDefaults(), arguments);\n\n\t\tthis.pitchDecay = options.pitchDecay;\n\t\tthis.octaves = options.octaves;\n\t\treadOnly(this, [\"oscillator\", \"envelope\"]);\n\t}\n\n\tstatic getDefaults(): MembraneSynthOptions {\n\t\treturn deepMerge(Monophonic.getDefaults(), Synth.getDefaults(), {\n\t\t\tenvelope: {\n\t\t\t\tattack: 0.001,\n\t\t\t\tattackCurve: \"exponential\",\n\t\t\t\tdecay: 0.4,\n\t\t\t\trelease: 1.4,\n\t\t\t\tsustain: 0.01,\n\t\t\t},\n\t\t\toctaves: 10,\n\t\t\toscillator: {\n\t\t\t\ttype: \"sine\",\n\t\t\t},\n\t\t\tpitchDecay: 0.05,\n\t\t});\n\t}\n\n\tsetNote(note: Frequency | FrequencyClass, time?: Time): this {\n\t\tconst seconds = this.toSeconds(time);\n\t\tconst hertz = this.toFrequency(note instanceof FrequencyClass ? note.toFrequency() : note);\n\t\tconst maxNote = hertz * this.octaves;\n\t\tthis.oscillator.frequency.setValueAtTime(maxNote, seconds);\n\t\tthis.oscillator.frequency.exponentialRampToValueAtTime(hertz, seconds + this.toSeconds(this.pitchDecay));\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\treturn this;\n\t}\n}\n","import { AmplitudeEnvelope } from \"../component/envelope/AmplitudeEnvelope\";\nimport { NormalRange, Time } from \"../core/type/Units\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { RecursivePartial } from \"../core/util/Interface\";\nimport { Noise, NoiseOptions } from \"../source/Noise\";\nimport { Instrument, InstrumentOptions } from \"./Instrument\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { Envelope, EnvelopeOptions } from \"../component/envelope/Envelope\";\nimport { Source } from \"../source/Source\";\n\nexport interface NoiseSynthOptions extends InstrumentOptions {\n\tenvelope: Omit<EnvelopeOptions, keyof ToneAudioNodeOptions>;\n\tnoise: Omit<NoiseOptions, keyof ToneAudioNodeOptions>;\n}\n\n/**\n * Tone.NoiseSynth is composed of [[Noise]] through an [[AmplitudeEnvelope]]. \n * ```\n * +-------+   +-------------------+\n * | Noise +>--> AmplitudeEnvelope +>--> Output\n * +-------+   +-------------------+\n * ```\n * @example\n * import { NoiseSynth } from \"tone\";\n * const noiseSynth = new NoiseSynth().toDestination();\n * noiseSynth.triggerAttackRelease(\"8n\", 0.05);\n * @category Instrument\n */\nexport class NoiseSynth extends Instrument<NoiseSynthOptions> {\n\n\treadonly name = \"NoiseSynth\";\n\n\t/**\n\t * The noise source.\n\t */\n\treadonly noise: Noise;\n\n\t/**\n\t * The amplitude envelope.\n\t */\n\treadonly envelope: AmplitudeEnvelope;\n\n\tconstructor(options?: RecursivePartial<NoiseSynthOptions>)\n\tconstructor() {\n\t\tsuper(optionsFromArguments(NoiseSynth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(NoiseSynth.getDefaults(), arguments);\n\t\tthis.noise = new Noise(Object.assign({\n\t\t\tcontext: this.context,\n\t\t}, options.noise));\n\n\t\tthis.envelope = new AmplitudeEnvelope(Object.assign({\n\t\t\tcontext: this.context,\n\t\t}, options.envelope));\n\n\t\t// connect the noise to the output\n\t\tthis.noise.chain(this.envelope, this.output);\n\t}\n\n\tstatic getDefaults(): NoiseSynthOptions {\n\t\treturn Object.assign(Instrument.getDefaults(), {\n\t\t\tenvelope: Object.assign(\n\t\t\t\tomitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())),\n\t\t\t\t{\n\t\t\t\t\tdecay: 0.1,\n\t\t\t\t\tsustain: 0.0,\n\t\t\t\t},\n\t\t\t),\n\t\t\tnoise: Object.assign(\n\t\t\t\tomitFromObject(Noise.getDefaults(), Object.keys(Source.getDefaults())),\n\t\t\t\t{\n\t\t\t\t\ttype: \"white\",\n\t\t\t\t},\n\t\t\t),\n\t\t});\n\t}\n\n\t/**\n\t * Start the attack portion of the envelopes. Unlike other\n\t * instruments, Tone.NoiseSynth doesn't have a note.\n\t * @example\n\t * import { NoiseSynth } from \"tone\";\n\t * const noiseSynth = new NoiseSynth().toDestination();\n\t * noiseSynth.triggerAttack();\n\t */\n\ttriggerAttack(time?: Time, velocity: NormalRange = 1): this {\n\t\ttime = this.toSeconds(time);\n\t\t// the envelopes\n\t\tthis.envelope.triggerAttack(time, velocity);\n\t\t// start the noise\n\t\tthis.noise.start(time);\n\t\tif (this.envelope.sustain === 0) {\n\t\t\tthis.noise.stop(time + this.toSeconds(this.envelope.attack) + this.toSeconds(this.envelope.decay));\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Start the release portion of the envelopes.\n\t */\n\ttriggerRelease(time?: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis.envelope.triggerRelease(time);\n\t\tthis.noise.stop(time + this.toSeconds(this.envelope.release));\n\t\treturn this;\n\t}\n\n\tsync(): this {\n\t\tthis._syncMethod(\"triggerAttack\", 0);\n\t\tthis._syncMethod(\"triggerRelease\", 0);\n\t\treturn this;\n\t}\n\n\ttriggerAttackRelease(duration: Time, time?: Time, velocity: NormalRange = 1): this {\n\t\ttime = this.toSeconds(time);\n\t\tduration = this.toSeconds(duration);\n\t\tthis.triggerAttack(time, velocity);\n\t\tthis.triggerRelease(time + duration);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.noise.dispose();\n\t\tthis.envelope.dispose();\n\t\treturn this;\n\t}\n}\n","import { Frequency, NormalRange, Time } from \"../core/type/Units\";\nimport { LowpassCombFilter } from \"../component/filter/LowpassCombFilter\";\nimport { deepMerge } from \"../core/util/Defaults\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { RecursivePartial } from \"../core/util/Interface\";\nimport { Noise } from \"../source/Noise\";\nimport { Instrument, InstrumentOptions } from \"./Instrument\";\n\nexport interface PluckSynthOptions extends InstrumentOptions {\n\tattackNoise: number;\n\tdampening: Frequency;\n\tresonance: NormalRange;\n\trelease: Time;\n}\n\n/**\n * Karplus-String string synthesis.\n * @example\n * import { PluckSynth } from \"tone\";\n * const plucky = new PluckSynth().toDestination();\n * plucky.triggerAttack(\"C4\", \"+0.5\");\n * plucky.triggerAttack(\"C3\", \"+1\");\n * plucky.triggerAttack(\"C2\", \"+1.5\");\n * plucky.triggerAttack(\"C1\", \"+2\");\n * @category Instrument\n */\nexport class PluckSynth extends Instrument<PluckSynthOptions> {\n\n\treadonly name = \"PluckSynth\";\n\n\t/**\n\t * Noise burst at the beginning\n\t */\n\tprivate _noise: Noise;\n\tprivate _lfcf: LowpassCombFilter;\n\n\t/**\n\t * The amount of noise at the attack.\n\t * Nominal range of [0.1, 20]\n\t * @min 0.1\n\t * @max 20\n\t */\n\tattackNoise: number;\n\n\t/**\n\t * The amount of resonance of the pluck. Also correlates to the sustain duration.\n\t */\n\tresonance: NormalRange;\n\n\t/**\n\t * The release time which corresponds to a resonance ramp down to 0\n\t */\n\trelease: Time;\n\n\tconstructor(options?: RecursivePartial<PluckSynthOptions>)\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(PluckSynth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(PluckSynth.getDefaults(), arguments);\n\n\t\tthis._noise = new Noise({\n\t\t\tcontext: this.context,\n\t\t\ttype: \"pink\"\n\t\t});\n\n\t\tthis.attackNoise = options.attackNoise;\n\n\t\tthis._lfcf = new LowpassCombFilter({\n\t\t\tcontext: this.context,\n\t\t\tdampening: options.dampening,\n\t\t\tresonance: options.resonance,\n\t\t});\n\n\t\tthis.resonance = options.resonance;\n\t\tthis.release = options.release;\n\n\t\tthis._noise.connect(this._lfcf);\n\t\tthis._lfcf.connect(this.output);\n\t}\n\n\tstatic getDefaults(): PluckSynthOptions {\n\t\treturn deepMerge(Instrument.getDefaults(), {\n\t\t\tattackNoise: 1,\n\t\t\tdampening: 4000,\n\t\t\tresonance: 0.7,\n\t\t\trelease: 1,\n\t\t});\n\t}\n\n\t/**\n\t * The dampening control. i.e. the lowpass filter frequency of the comb filter\n\t * @min 0\n\t * @max 7000\n\t */\n\tget dampening(): Frequency {\n\t\treturn this._lfcf.dampening;\n\t}\n\tset dampening(fq) {\n\t\tthis._lfcf.dampening = fq;\n\t}\n\n\ttriggerAttack(note: Frequency, time?: Time): this {\n\t\tconst freq = this.toFrequency(note);\n\t\ttime = this.toSeconds(time);\n\t\tconst delayAmount = 1 / freq;\n\t\tthis._lfcf.delayTime.setValueAtTime(delayAmount, time);\n\t\tthis._noise.start(time);\n\t\tthis._noise.stop(time + delayAmount * this.attackNoise);\n\t\tthis._lfcf.resonance.cancelScheduledValues(time);\n\t\tthis._lfcf.resonance.setValueAtTime(this.resonance, time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Ramp down the [[resonance]] to 0 over the duration of the release time.\n\t */\n\ttriggerRelease(time?: Time): this{\n\t\tthis._lfcf.resonance.linearRampTo(0, this.release, time);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._noise.dispose();\n\t\tthis._lfcf.dispose();\n\t\treturn this;\n\t}\n}\n","import { MidiClass } from \"../core/type/Midi\";\nimport { Frequency, MidiNote, NormalRange, Seconds, Time } from \"../core/type/Units\";\nimport { deepMerge, omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { RecursivePartial } from \"../core/util/Interface\";\nimport { isArray, isNumber } from \"../core/util/TypeCheck\";\nimport { Instrument, InstrumentOptions } from \"./Instrument\";\nimport { MembraneSynth, MembraneSynthOptions } from \"./MembraneSynth\";\nimport { FMSynth, FMSynthOptions } from \"./FMSynth\";\nimport { AMSynth, AMSynthOptions } from \"./AMSynth\";\nimport { MetalSynth, MetalSynthOptions } from \"./MetalSynth\";\nimport { Monophonic } from \"./Monophonic\";\nimport { Synth, SynthOptions } from \"./Synth\";\nimport { warn } from \"../core/util/Debug\";\n\ntype VoiceConstructor<V> = {\n\tgetDefaults: () => VoiceOptions<V>;\n} & (new (...args: any[]) => V);\n\ntype OmitMonophonicOptions<T> = Omit<T, \"context\" | \"onsilence\">;\n\ntype VoiceOptions<T> =\n\tT extends MembraneSynth ? MembraneSynthOptions :\n\t\tT extends MetalSynth ? MetalSynthOptions :\n\t\t\tT extends FMSynth ? FMSynthOptions :\n\t\t\t\tT extends AMSynth ? AMSynthOptions :\n\t\t\t\t\tT extends Synth ? SynthOptions :\n\t\t\t\t\t\tnever;\n\n/**\n * The settable synth options. excludes monophonic options.\n */\ntype PartialVoiceOptions<T> = RecursivePartial<OmitMonophonicOptions<VoiceOptions<T>>>;\n\nexport interface PolySynthOptions<Voice> extends InstrumentOptions {\n\tmaxPolyphony: number;\n\tvoice: VoiceConstructor<Voice>;\n\toptions: PartialVoiceOptions<Voice>;\n}\n\n/**\n * PolySynth handles voice creation and allocation for any\n * instruments passed in as the second paramter. PolySynth is\n * not a synthesizer by itself, it merely manages voices of\n * one of the other types of synths, allowing any of the\n * monophonic synthesizers to be polyphonic.\n *\n * @example\n * import { PolySynth } from \"tone\";\n * const synth = new PolySynth().toDestination();\n * // set the attributes across all the voices using 'set'\n * synth.set({ detune: -1200 });\n * // play a chord\n * synth.triggerAttackRelease([\"C4\", \"E4\", \"A4\"], 1);\n * @category Instrument\n */\nexport class PolySynth<Voice extends Monophonic<any> = Synth> extends Instrument<VoiceOptions<Voice>> {\n\n\treadonly name: string = \"PolySynth\";\n\n\t/**\n\t * The voices which are not currently in use\n\t */\n\tprivate _availableVoices: Voice[] = [];\n\n\t/**\n\t * The currently active voices\n\t */\n\tprivate _activeVoices: Array<{midi: MidiNote; voice: Voice; released: boolean}> = [];\n\n\t/**\n\t * All of the allocated voices for this synth.\n\t */\n\tprivate _voices: Voice[] = [];\n\n\t/**\n\t * The options that are set on the synth.\n\t */\n\tprivate options: VoiceOptions<Voice>;\n\n\t/**\n\t * The polyphony limit.\n\t */\n\tmaxPolyphony: number;\n\n\t/**\n\t * The voice constructor\n\t */\n\tprivate readonly voice: VoiceConstructor<Voice>;\n\n\t/**\n\t * A voice used for holding the get/set values\n\t */\n\tprivate _dummyVoice: Voice;\n\n\t/**\n\t * The GC timeout. Held so that it could be cancelled when the node is disposed.\n\t */\n\tprivate _gcTimeout: number = -1;\n\n\t/**\n\t * A moving average of the number of active voices\n\t */\n\tprivate _averageActiveVoices: number = 0;\n\n\t/**\n\t * @param voice The constructor of the voices\n\t * @param options\tThe options object to set the synth voice\n\t */\n\tconstructor(\n\t\tvoice?: VoiceConstructor<Voice>,\n\t\toptions?: PartialVoiceOptions<Voice>,\n\t);\n\tconstructor(options?: Partial<PolySynthOptions<Voice>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(PolySynth.getDefaults(), arguments, [\"voice\", \"options\"]));\n\t\tconst options = optionsFromArguments(PolySynth.getDefaults(), arguments, [\"voice\", \"options\"]);\n\n\t\t// check against the old API (pre 14.3.0)\n\t\tthis.assert(!isNumber(options.voice), \"DEPRECATED: The polyphony count is no longer the first argument.\");\n\n\t\tconst defaults = options.voice.getDefaults();\n\t\tthis.options = Object.assign(defaults, options.options) as VoiceOptions<Voice>;\n\t\tthis.voice = options.voice as unknown as VoiceConstructor<Voice>;\n\t\tthis.maxPolyphony = options.maxPolyphony;\n\n\t\t// create the first voice\n\t\tthis._dummyVoice = this._getNextAvailableVoice() as Voice;\n\t\t// remove it from the voices list\n\t\tconst index = this._voices.indexOf(this._dummyVoice);\n\t\tthis._voices.splice(index, 1);\n\t\t// kick off the GC interval\n\t\tthis._gcTimeout = this.context.setInterval(this._collectGarbage.bind(this), 1);\n\t}\n\n\tstatic getDefaults(): PolySynthOptions<Synth> {\n\t\treturn Object.assign(Instrument.getDefaults(), {\n\t\t\tmaxPolyphony: 32,\n\t\t\toptions: {},\n\t\t\tvoice: Synth,\n\t\t});\n\t}\n\n\t/**\n\t * The number of active voices.\n\t */\n\tget activeVoices(): number {\n\t\treturn this._activeVoices.length;\n\t}\n\n\t/**\n\t * Invoked when the source is done making sound, so that it can be\n\t * readded to the pool of available voices\n\t */\n\tprivate _makeVoiceAvailable(voice: Voice): void {\n\t\tthis._availableVoices.push(voice);\n\t\t// remove the midi note from 'active voices'\n\t\tconst activeVoiceIndex = this._activeVoices.findIndex((e) => e.voice === voice);\n\t\tthis._activeVoices.splice(activeVoiceIndex, 1);\n\t}\n\n\t/**\n\t * Get an available voice from the pool of available voices.\n\t * If one is not available and the maxPolyphony limit is reached,\n\t * steal a voice, otherwise return null.\n\t */\n\tprivate _getNextAvailableVoice(): Voice | undefined {\n\t\t// if there are available voices, return the first one\n\t\tif (this._availableVoices.length) {\n\t\t\treturn this._availableVoices.shift();\n\t\t} else if (this._voices.length < this.maxPolyphony) {\n\t\t\t// otherwise if there is still more maxPolyphony, make a new voice\n\t\t\tconst voice = new this.voice(Object.assign(this.options, {\n\t\t\t\tcontext: this.context,\n\t\t\t\tonsilence: this._makeVoiceAvailable.bind(this),\n\t\t\t}));\n\t\t\tvoice.connect(this.output);\n\t\t\tthis._voices.push(voice);\n\t\t\treturn voice;\n\t\t} else {\n\t\t\twarn(\"Max polyphony exceeded. Note dropped.\");\n\t\t}\n\t}\n\n\t/**\n\t * Occasionally check if there are any allocated voices which can be cleaned up.\n\t */\n\tprivate _collectGarbage(): void {\n\t\tthis._averageActiveVoices = Math.max(this._averageActiveVoices * 0.95, this.activeVoices);\n\t\tif (this._availableVoices.length && this._voices.length > this._averageActiveVoices) {\n\t\t\t// take off an available note\n\t\t\tconst firstAvail = this._availableVoices.shift() as Voice;\n\t\t\tconst index = this._voices.indexOf(firstAvail);\n\t\t\tthis._voices.splice(index, 1);\n\t\t\tif (!this.context.isOffline) {\n\t\t\t\tfirstAvail.dispose();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Internal method which triggers the attack\n\t */\n\tprivate _triggerAttack(notes: Frequency[], time: Seconds, velocity?: NormalRange): void {\n\t\tnotes.forEach(note => {\n\t\t\tconst midiNote = new MidiClass(this.context, note).toMidi();\n\t\t\tconst voice = this._getNextAvailableVoice();\n\t\t\tif (voice) {\n\t\t\t\tvoice.triggerAttack(note, time, velocity);\n\t\t\t\tthis._activeVoices.push({\n\t\t\t\t\tmidi: midiNote, voice, released: false,\n\t\t\t\t});\n\t\t\t\tthis.log(\"triggerAttack\", note, time);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Internal method which triggers the release\n\t */\n\tprivate _triggerRelease(notes: Frequency[], time: Seconds): void {\n\t\tnotes.forEach(note => {\n\t\t\tconst midiNote = new MidiClass(this.context, note).toMidi();\n\t\t\tconst event = this._activeVoices.find(({ midi, released }) => midi === midiNote && !released);\n\t\t\tif (event) {\n\t\t\t\t// trigger release on that note\n\t\t\t\tevent.voice.triggerRelease(time);\n\t\t\t\t// mark it as released\n\t\t\t\tevent.released = true;\n\t\t\t\tthis.log(\"triggerRelease\", note, time);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Schedule the attack/release events. If the time is in the future, then it should set a timeout\n\t * to wait for just-in-time scheduling\n\t */\n\tprivate _scheduleEvent(type: \"attack\" | \"release\", notes: Frequency[], time: Seconds, velocity?: NormalRange): void {\n\t\tthis.assert(!this.disposed, \"Synth was already disposed\");\n\t\t// if the notes are greater than this amount of time in the future, they should be scheduled with setTimeout\n\t\tif (time <= this.now()) {\n\t\t\t// do it immediately\n\t\t\tif (type === \"attack\") {\n\t\t\t\tthis._triggerAttack(notes, time, velocity);\n\t\t\t} else {\n\t\t\t\tthis._triggerRelease(notes, time);\n\t\t\t}\n\t\t} else {\n\t\t\t// schedule it to start in the future\n\t\t\tthis.context.setTimeout(() => {\n\t\t\t\tthis._scheduleEvent(type, notes, time, velocity);\n\t\t\t}, time - this.now());\n\t\t}\n\t}\n\n\t/**\n\t * Trigger the attack portion of the note\n\t * @param  notes The notes to play. Accepts a single Frequency or an array of frequencies.\n\t * @param  time  The start time of the note.\n\t * @param velocity The velocity of the note.\n\t * @example\n\t * import { FMSynth, now, PolySynth } from \"tone\";\n\t * const synth = new PolySynth(FMSynth).toDestination();\n\t * // trigger a chord immediately with a velocity of 0.2\n\t * synth.triggerAttack([\"Ab3\", \"C4\", \"F5\"], now(), 0.2);\n\t */\n\ttriggerAttack(notes: Frequency | Frequency[], time?: Time, velocity?: NormalRange): this {\n\n\t\tif (!Array.isArray(notes)) {\n\t\t\tnotes = [notes];\n\t\t}\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._scheduleEvent(\"attack\", notes, computedTime, velocity);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Trigger the release of the note. Unlike monophonic instruments,\n\t * a note (or array of notes) needs to be passed in as the first argument.\n\t * @param  notes The notes to play. Accepts a single Frequency or an array of frequencies.\n\t * @param  time  When the release will be triggered.\n\t * @example\n\t * @example\n\t * import { AMSynth, PolySynth } from \"tone\";\n\t * const poly = new PolySynth(AMSynth).toDestination();\n\t * poly.triggerAttack([\"Ab3\", \"C4\", \"F5\"]);\n\t * // trigger the release of the given notes. \n\t * poly.triggerRelease([\"Ab3\", \"C4\"], \"+1\");\n\t * poly.triggerRelease(\"F5\", \"+3\");\n\t */\n\ttriggerRelease(notes: Frequency | Frequency[], time?: Time): this {\n\t\tif (!Array.isArray(notes)) {\n\t\t\tnotes = [notes];\n\t\t}\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._scheduleEvent(\"release\", notes, computedTime);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Trigger the attack and release after the specified duration\n\t * @param  notes The notes to play. Accepts a single  Frequency or an array of frequencies.\n\t * @param  duration the duration of the note\n\t * @param  time  if no time is given, defaults to now\n\t * @param  velocity the velocity of the attack (0-1)\n\t * @example\n\t * import { AMSynth, PolySynth } from \"tone\";\n\t * const poly = new PolySynth(AMSynth).toDestination();\n\t * // can pass in an array of durations as well\n\t * poly.triggerAttackRelease([\"Eb3\", \"G4\", \"Bb4\", \"D5\"], [4, 3, 2, 1]);\n\t */\n\ttriggerAttackRelease(\n\t\tnotes: Frequency | Frequency[],\n\t\tduration: Time | Time[],\n\t\ttime?: Time,\n\t\tvelocity?: NormalRange,\n\t): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis.triggerAttack(notes, computedTime, velocity);\n\t\tif (isArray(duration)) {\n\t\t\tthis.assert(isArray(notes), \"If the duration is an array, the notes must also be an array\");\n\t\t\tnotes = notes as Frequency[];\n\t\t\tfor (let i = 0; i < notes.length; i++) {\n\t\t\t\tconst d = duration[Math.min(i, duration.length - 1)];\n\t\t\t\tconst durationSeconds = this.toSeconds(d);\n\t\t\t\tthis.assert(durationSeconds > 0, \"The duration must be greater than 0\");\n\t\t\t\tthis.triggerRelease(notes[i], computedTime + durationSeconds);\n\t\t\t}\n\t\t} else {\n\t\t\tconst durationSeconds = this.toSeconds(duration);\n\t\t\tthis.assert(durationSeconds > 0, \"The duration must be greater than 0\");\n\t\t\tthis.triggerRelease(notes, computedTime + durationSeconds);\n\t\t}\n\t\treturn this;\n\t}\n\n\tsync(): this {\n\t\tthis._syncMethod(\"triggerAttack\", 1);\n\t\tthis._syncMethod(\"triggerRelease\", 1);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set a member/attribute of the voices\n\t * @example\n\t * import { PolySynth } from \"tone\";\n\t * const poly = new PolySynth().toDestination();\n\t * // set all of the voices using an options object for the synth type\n\t * poly.set({\n\t * \tenvelope: {\n\t * \t\tattack: 0.25\n\t * \t}\n\t * });\n\t * poly.triggerAttackRelease(\"Bb3\", 0.2);\n\t */\n\tset(options: RecursivePartial<VoiceOptions<Voice>>): this {\n\t\t// remove options which are controlled by the PolySynth\n\t\tconst sanitizedOptions = omitFromObject(options, [\"onsilence\", \"context\"]);\n\t\t// store all of the options\n\t\tthis.options = deepMerge(this.options, sanitizedOptions);\n\t\tthis._voices.forEach(voice => voice.set(sanitizedOptions));\n\t\tthis._dummyVoice.set(sanitizedOptions);\n\t\treturn this;\n\t}\n\n\tget(): VoiceOptions<Voice> {\n\t\treturn this._dummyVoice.get();\n\t}\n\n\t/**\n\t * Trigger the release portion of all the currently active voices immediately.\n\t * Useful for silencing the synth.\n\t */\n\treleaseAll(): this {\n\t\tconst now = this.now();\n\t\tthis._activeVoices.forEach(({ voice }) => {\n\t\t\tvoice.triggerRelease(now);\n\t\t});\n\t\tthis._activeVoices = [];\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._dummyVoice.dispose();\n\t\tthis._voices.forEach(v => v.dispose());\n\t\tthis._activeVoices = [];\n\t\tthis._availableVoices = [];\n\t\tthis.context.clearInterval(this._gcTimeout);\n\t\treturn this;\n\t}\n}\n","import { ToneAudioBuffer } from \"../core/context/ToneAudioBuffer\";\nimport { ToneAudioBuffers } from \"../core/context/ToneAudioBuffers\";\nimport { intervalToFrequencyRatio } from \"../core/type/Conversions\";\nimport { FrequencyClass } from \"../core/type/Frequency\";\nimport { Frequency, Interval, MidiNote, NormalRange, Note, Time } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { isArray, isNote, isNumber } from \"../core/util/TypeCheck\";\nimport { Instrument, InstrumentOptions } from \"../instrument/Instrument\";\nimport { ToneBufferSource, ToneBufferSourceCurve } from \"../source/buffer/ToneBufferSource\";\n\ninterface SamplesMap {\n\t[note: string]: ToneAudioBuffer | AudioBuffer | string;\n\t[midi: number]: ToneAudioBuffer | AudioBuffer | string;\n}\n\nexport interface SamplerOptions extends InstrumentOptions {\n\tattack: Time;\n\trelease: Time;\n\tonload: () => void;\n\tbaseUrl: string;\n\tcurve: ToneBufferSourceCurve;\n\turls: SamplesMap;\n}\n\n/**\n * Pass in an object which maps the note's pitch or midi value to the url,\n * then you can trigger the attack and release of that note like other instruments.\n * By automatically repitching the samples, it is possible to play pitches which\n * were not explicitly included which can save loading time.\n *\n * For sample or buffer playback where repitching is not necessary,\n * use [[Player]].\n * @example\n * import { Sampler } from \"tone\";\n * const sampler = new Sampler({\n * \turls: {\n * \t\tC1: \"C1.mp3\",\n * \t\tC2: \"C2.mp3\",\n * \t},\n * \tbaseUrl: \"https://tonejs.github.io/examples/audio/casio/\",\n * \tonload: () => {\n * \t\tsampler.triggerAttackRelease([\"C1\", \"E1\", \"G1\", \"B1\"], 0.5);\n * \t},\n * });\n * @category Instrument\n */\nexport class Sampler extends Instrument<SamplerOptions> {\n\n\treadonly name: string = \"Sampler\";\n\n\t/**\n\t * The stored and loaded buffers\n\t */\n\tprivate _buffers: ToneAudioBuffers;\n\n\t/**\n\t * The object of all currently playing BufferSources\n\t */\n\tprivate _activeSources: Map<MidiNote, ToneBufferSource[]> = new Map();\n\n\t/**\n\t * The envelope applied to the beginning of the sample.\n\t * @min 0\n\t * @max 1\n\t */\n\tattack: Time;\n\t\n\t/**\n\t * The envelope applied to the end of the envelope.\n\t * @min 0\n\t * @max 1\n\t */\n\trelease: Time;\n\n\t/**\n\t * The shape of the attack/release curve.\n\t * Either \"linear\" or \"exponential\"\n\t */\n\tcurve: ToneBufferSourceCurve;\n\n\t/**\n\t * @param samples An object of samples mapping either Midi Note Numbers or\n\t * \t\t\tScientific Pitch Notation to the url of that sample.\n\t * @param onload The callback to invoke when all of the samples are loaded.\n\t * @param baseUrl The root URL of all of the samples, which is prepended to all the URLs.\n\t */\n\tconstructor(samples?: SamplesMap, onload?: () => void, baseUrl?: string);\n\t/**\n\t * @param samples An object of samples mapping either Midi Note Numbers or\n\t * \t\t\tScientific Pitch Notation to the url of that sample.\n\t * @param options The remaining options associated with the sampler\n\t */\n\tconstructor(samples?: SamplesMap, options?: Partial<Omit<SamplerOptions, \"urls\">>);\n\tconstructor(options?: Partial<SamplerOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Sampler.getDefaults(), arguments, [\"urls\", \"onload\", \"baseUrl\"], \"urls\"));\n\t\tconst options = optionsFromArguments(Sampler.getDefaults(), arguments, [\"urls\", \"onload\", \"baseUrl\"], \"urls\");\n\n\t\tconst urlMap = {};\n\t\tObject.keys(options.urls).forEach((note) => {\n\t\t\tconst noteNumber = parseInt(note, 10);\n\t\t\tthis.assert(isNote(note)\n\t\t\t\t|| (isNumber(noteNumber) && isFinite(noteNumber)), `url key is neither a note or midi pitch: ${note}`);\n\t\t\tif (isNote(note)) {\n\t\t\t\t// convert the note name to MIDI\n\t\t\t\tconst mid = new FrequencyClass(this.context, note).toMidi();\n\t\t\t\turlMap[mid] = options.urls[note];\n\t\t\t} else if (isNumber(noteNumber) && isFinite(noteNumber)) {\n\t\t\t\t// otherwise if it's numbers assume it's midi\n\t\t\t\turlMap[noteNumber] = options.urls[noteNumber];\n\t\t\t}\n\t\t});\n\n\t\tthis._buffers = new ToneAudioBuffers(urlMap, options.onload, options.baseUrl);\n\t\tthis.attack = options.attack;\n\t\tthis.release = options.release;\n\t\tthis.curve = options.curve;\n\n\t\t// invoke the callback if it's already loaded\n\t\tif (this._buffers.loaded) {\n\t\t\t// invoke onload deferred\n\t\t\tPromise.resolve().then(options.onload);\n\t\t}\n\t}\n\n\tstatic getDefaults(): SamplerOptions {\n\t\treturn Object.assign(Instrument.getDefaults(), {\n\t\t\tattack: 0,\n\t\t\tbaseUrl: \"\",\n\t\t\tcurve: \"exponential\" as \"exponential\",\n\t\t\tonload: noOp,\n\t\t\trelease: 0.1,\n\t\t\turls: {},\n\t\t});\n\t}\n\n\t/**\n\t * Returns the difference in steps between the given midi note at the closets sample.\n\t */\n\tprivate _findClosest(midi: MidiNote): Interval {\n\t\t// searches within 8 octaves of the given midi note\n\t\tconst MAX_INTERVAL = 96;\n\t\tlet interval = 0;\n\t\twhile (interval < MAX_INTERVAL) {\n\t\t\t// check above and below\n\t\t\tif (this._buffers.has(midi + interval)) {\n\t\t\t\treturn -interval;\n\t\t\t} else if (this._buffers.has(midi - interval)) {\n\t\t\t\treturn interval;\n\t\t\t}\n\t\t\tinterval++;\n\t\t}\n\t\tthrow new Error(`No available buffers for note: ${midi}`);\n\t}\n\n\t/**\n\t * @param  notes\tThe note to play, or an array of notes.\n\t * @param  time     When to play the note\n\t * @param  velocity The velocity to play the sample back.\n\t */\n\ttriggerAttack(notes: Frequency | Frequency[], time?: Time, velocity: NormalRange = 1): this {\n\t\tthis.log(\"triggerAttack\", notes, time, velocity);\n\t\tif (!Array.isArray(notes)) {\n\t\t\tnotes = [notes];\n\t\t}\n\t\tnotes.forEach(note => {\n\t\t\tconst midi = new FrequencyClass(this.context, note).toMidi();\n\t\t\t// find the closest note pitch\n\t\t\tconst difference = this._findClosest(midi);\n\t\t\tconst closestNote = midi - difference;\n\t\t\tconst buffer = this._buffers.get(closestNote);\n\t\t\tconst playbackRate = intervalToFrequencyRatio(difference);\n\t\t\t// play that note\n\t\t\tconst source = new ToneBufferSource({\n\t\t\t\tbuffer,\n\t\t\t\tcontext: this.context,\n\t\t\t\tcurve: this.curve,\n\t\t\t\tfadeIn: this.attack,\n\t\t\t\tfadeOut: this.release,\n\t\t\t\tplaybackRate,\n\t\t\t}).connect(this.output);\n\t\t\tsource.start(time, 0, buffer.duration / playbackRate, velocity);\n\t\t\t// add it to the active sources\n\t\t\tif (!isArray(this._activeSources.get(midi))) {\n\t\t\t\tthis._activeSources.set(midi, []);\n\t\t\t}\n\t\t\t(this._activeSources.get(midi) as ToneBufferSource[]).push(source);\n\n\t\t\t// remove it when it's done\n\t\t\tsource.onended = () => {\n\t\t\t\tif (this._activeSources && this._activeSources.has(midi)) {\n\t\t\t\t\tconst sources = this._activeSources.get(midi) as ToneBufferSource[];\n\t\t\t\t\tconst index = sources.indexOf(source);\n\t\t\t\t\tif (index !== -1) {\n\t\t\t\t\t\tsources.splice(index, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * @param  notes\tThe note to release, or an array of notes.\n\t * @param  time     \tWhen to release the note.\n\t */\n\ttriggerRelease(notes: Frequency | Frequency[], time?: Time): this {\n\t\tthis.log(\"triggerRelease\", notes, time);\n\t\tif (!Array.isArray(notes)) {\n\t\t\tnotes = [notes];\n\t\t}\n\t\tnotes.forEach(note => {\n\t\t\tconst midi = new FrequencyClass(this.context, note).toMidi();\n\t\t\t// find the note\n\t\t\tif (this._activeSources.has(midi) && (this._activeSources.get(midi) as ToneBufferSource[]).length) {\n\t\t\t\tconst sources = this._activeSources.get(midi) as ToneBufferSource[];\n\t\t\t\ttime = this.toSeconds(time);\n\t\t\t\tsources.forEach(source => {\n\t\t\t\t\tsource.stop(time);\n\t\t\t\t});\n\t\t\t\tthis._activeSources.set(midi, []);\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Release all currently active notes.\n\t * @param  time     \tWhen to release the notes.\n\t */\n\treleaseAll(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._activeSources.forEach(sources => {\n\t\t\twhile (sources.length) {\n\t\t\t\tconst source = sources.shift() as ToneBufferSource;\n\t\t\t\tsource.stop(computedTime);\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\tsync(): this {\n\t\tthis._syncMethod(\"triggerAttack\", 1);\n\t\tthis._syncMethod(\"triggerRelease\", 1);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Invoke the attack phase, then after the duration, invoke the release.\n\t * @param  notes\tThe note to play and release, or an array of notes.\n\t * @param  duration The time the note should be held\n\t * @param  time     When to start the attack\n\t * @param  velocity The velocity of the attack\n\t */\n\ttriggerAttackRelease(\n\t\tnotes: Frequency[] | Frequency,\n\t\tduration: Time | Time[],\n\t\ttime?: Time,\n\t\tvelocity: NormalRange = 1,\n\t): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis.triggerAttack(notes, computedTime, velocity);\n\t\tif (isArray(duration)) {\n\t\t\tthis.assert(isArray(notes), \"notes must be an array when duration is array\");\n\t\t\t(notes as Frequency[]).forEach((note, index) => {\n\t\t\t\tconst d = duration[Math.min(index, duration.length - 1)];\n\t\t\t\tthis.triggerRelease(note, computedTime + this.toSeconds(d));\n\t\t\t});\n\t\t} else {\n\t\t\tthis.triggerRelease(notes, computedTime + this.toSeconds(duration));\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a note to the sampler.\n\t * @param  note      The buffer's pitch.\n\t * @param  url  Either the url of the buffer, or a buffer which will be added with the given name.\n\t * @param  callback  The callback to invoke when the url is loaded.\n\t */\n\tadd(note: Note | MidiNote, url: string | ToneAudioBuffer | AudioBuffer, callback?: () => void): this {\n\t\tthis.assert(isNote(note) || isFinite(note), `note must be a pitch or midi: ${note}`);\n\t\tif (isNote(note)) {\n\t\t\t// convert the note name to MIDI\n\t\t\tconst mid = new FrequencyClass(this.context, note).toMidi();\n\t\t\tthis._buffers.add(mid, url, callback);\n\t\t} else {\n\t\t\t// otherwise if it's numbers assume it's midi\n\t\t\tthis._buffers.add(note, url, callback);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * If the buffers are loaded or not\n\t */\n\tget loaded(): boolean {\n\t\treturn this._buffers.loaded;\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._buffers.dispose();\n\t\tthis._activeSources.forEach(sources => {\n\t\t\tsources.forEach(source => source.dispose());\n\t\t});\n\t\tthis._activeSources.clear();\n\t\treturn this;\n\t}\n}\n","import \"../core/clock/Transport\";\nimport { ToneWithContext, ToneWithContextOptions } from \"../core/context/ToneWithContext\";\nimport { TicksClass } from \"../core/type/Ticks\";\nimport { TransportTimeClass } from \"../core/type/TransportTime\";\nimport { NormalRange, Positive, Seconds, Ticks, Time, TransportTime } from \"../core/type/Units\";\nimport { defaultArg, optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { BasicPlaybackState, StateTimeline } from \"../core/util/StateTimeline\";\nimport { isBoolean, isNumber } from \"../core/util/TypeCheck\";\n\nexport type ToneEventCallback<T> = (time: Seconds, value: T) => void;\n\nexport interface ToneEventOptions<T> extends ToneWithContextOptions {\n\tcallback: ToneEventCallback<T>;\n\tloop: boolean | number;\n\tloopEnd: Time;\n\tloopStart: Time;\n\tplaybackRate: Positive;\n\tvalue?: T;\n\tprobability: NormalRange;\n\tmute: boolean;\n\thumanize: boolean | Time;\n}\n\n/**\n * ToneEvent abstracts away this.context.transport.schedule and provides a schedulable\n * callback for a single or repeatable events along the timeline.\n *\n * @example\n * import { PolySynth, Sequence, ToneEvent, Transport } from \"tone\";\n * \n * const synth = new PolySynth().toDestination();\n * const chordEvent = new ToneEvent(((time, chord) => {\n * \t// the chord as well as the exact time of the event\n * \t// are passed in as arguments to the callback function\n * \tsynth.triggerAttackRelease(chord, 0.5, time);\n * }), [\"D4\", \"E4\", \"F4\"]);\n * // start the chord at the beginning of the transport timeline\n * chordEvent.start();\n * // loop it every measure for 8 measures\n * chordEvent.loop = 8;\n * chordEvent.loopEnd = \"1m\";\n * @category Event\n */\nexport class ToneEvent<ValueType = any> extends ToneWithContext<ToneEventOptions<ValueType>> {\n\n\treadonly name: string = \"ToneEvent\";\n\n\t/**\n\t * Loop value\n\t */\n\tprotected _loop: boolean | number;\n\n\t/**\n\t * The callback to invoke.\n\t */\n\tcallback: ToneEventCallback<ValueType>;\n\n\t/**\n\t * The value which is passed to the\n\t * callback function.\n\t */\n\tvalue: ValueType;\n\n\t/**\n\t * When the note is scheduled to start.\n\t */\n\tprotected _loopStart: Ticks;\n\n\t/**\n\t * When the note is scheduled to start.\n\t */\n\tprotected _loopEnd: Ticks;\n\n\t/**\n\t * Tracks the scheduled events\n\t */\n\tprotected _state: StateTimeline<{\n\t\tid: number;\n\t}> = new StateTimeline(\"stopped\");\n\n\t/**\n\t * The playback speed of the note. A speed of 1\n\t * is no change.\n\t */\n\tprotected _playbackRate: Positive;\n\n\t/**\n\t * A delay time from when the event is scheduled to start\n\t */\n\tprotected _startOffset: Ticks = 0;\n\n\t/**\n\t * private holder of probability value\n\t */\n\tprotected _probability: NormalRange;\n\n\t/**\n\t * the amount of variation from the given time.\n\t */\n\tprotected _humanize: boolean | Time;\n\n\t/**\n\t * If mute is true, the callback won't be invoked.\n\t */\n\tmute: boolean;\n\n\t/**\n\t * @param callback The callback to invoke at the time.\n\t * @param value The value or values which should be passed to the callback function on invocation.\n\t */\n\tconstructor(callback?: ToneEventCallback<ValueType>, value?: ValueType);\n\tconstructor(options?: Partial<ToneEventOptions<ValueType>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(ToneEvent.getDefaults(), arguments, [\"callback\", \"value\"]));\n\t\tconst options = optionsFromArguments(ToneEvent.getDefaults(), arguments, [\"callback\", \"value\"]);\n\n\t\tthis._loop = options.loop;\n\t\tthis.callback = options.callback;\n\t\tthis.value = options.value;\n\t\tthis._loopStart = this.toTicks(options.loopStart);\n\t\tthis._loopEnd = this.toTicks(options.loopEnd);\n\t\tthis._playbackRate = options.playbackRate;\n\t\tthis._probability = options.probability;\n\t\tthis._humanize = options.humanize;\n\t\tthis.mute = options.mute;\n\t\tthis.playbackRate = options.playbackRate;\n\t}\n\n\tstatic getDefaults(): ToneEventOptions<any> {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tcallback: noOp,\n\t\t\thumanize: false,\n\t\t\tloop: false,\n\t\t\tloopEnd: \"1m\",\n\t\t\tloopStart: 0,\n\t\t\tmute: false,\n\t\t\tplaybackRate: 1,\n\t\t\tprobability: 1,\n\t\t\tvalue: null,\n\t\t});\n\t}\n\n\t/**\n\t * Reschedule all of the events along the timeline\n\t * with the updated values.\n\t * @param after Only reschedules events after the given time.\n\t */\n\tprivate _rescheduleEvents(after: Ticks = -1): void {\n\t\t// if no argument is given, schedules all of the events\n\t\tthis._state.forEachFrom(after, event => {\n\t\t\tlet duration;\n\t\t\tif (event.state === \"started\") {\n\t\t\t\tif (event.id !== -1) {\n\t\t\t\t\tthis.context.transport.clear(event.id);\n\t\t\t\t}\n\t\t\t\tconst startTick = event.time + Math.round(this.startOffset / this._playbackRate);\n\t\t\t\tif (this._loop === true || isNumber(this._loop) && this._loop > 1) {\n\t\t\t\t\tduration = Infinity;\n\t\t\t\t\tif (isNumber(this._loop)) {\n\t\t\t\t\t\tduration = (this._loop) * this._getLoopDuration();\n\t\t\t\t\t}\n\t\t\t\t\tconst nextEvent = this._state.getAfter(startTick);\n\t\t\t\t\tif (nextEvent !== null) {\n\t\t\t\t\t\tduration = Math.min(duration, nextEvent.time - startTick);\n\t\t\t\t\t}\n\t\t\t\t\tif (duration !== Infinity) {\n\t\t\t\t\t\t// schedule a stop since it's finite duration\n\t\t\t\t\t\tthis._state.setStateAtTime(\"stopped\", startTick + duration + 1, { id: -1 });\n\t\t\t\t\t\tduration = new TicksClass(this.context, duration);\n\t\t\t\t\t}\n\t\t\t\t\tconst interval = new TicksClass(this.context, this._getLoopDuration());\n\t\t\t\t\tevent.id = this.context.transport.scheduleRepeat(\n\t\t\t\t\t\tthis._tick.bind(this), interval, new TicksClass(this.context, startTick), duration);\n\t\t\t\t} else {\n\t\t\t\t\tevent.id = this.context.transport.schedule(this._tick.bind(this), new TicksClass(this.context, startTick));\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Returns the playback state of the note, either \"started\" or \"stopped\".\n\t */\n\tget state(): BasicPlaybackState {\n\t\treturn this._state.getValueAtTime(this.context.transport.ticks) as BasicPlaybackState;\n\t}\n\n\t/**\n\t * The start from the scheduled start time.\n\t */\n\tget startOffset(): Ticks {\n\t\treturn this._startOffset;\n\t}\n\tset startOffset(offset) {\n\t\tthis._startOffset = offset;\n\t}\n\n\t/**\n\t * The probability of the notes being triggered.\n\t */\n\tget probability(): NormalRange {\n\t\treturn this._probability;\n\t}\n\tset probability(prob) {\n\t\tthis._probability = prob;\n\t}\n\n\t/**\n\t * If set to true, will apply small random variation\n\t * to the callback time. If the value is given as a time, it will randomize\n\t * by that amount.\n\t * @example\n\t * import { ToneEvent } from \"tone\";\n\t * const event = new ToneEvent();\n\t * event.humanize = true;\n\t */\n\tget humanize(): Time | boolean {\n\t\treturn this._humanize;\n\t}\n\n\tset humanize(variation) {\n\t\tthis._humanize = variation;\n\t}\n\n\t/**\n\t * Start the note at the given time.\n\t * @param  time  When the event should start.\n\t */\n\tstart(time?: TransportTime | TransportTimeClass): this {\n\t\tconst ticks = this.toTicks(time);\n\t\tif (this._state.getValueAtTime(ticks) === \"stopped\") {\n\t\t\tthis._state.add({\n\t\t\t\tid: -1,\n\t\t\t\tstate: \"started\",\n\t\t\t\ttime: ticks,\n\t\t\t});\n\t\t\tthis._rescheduleEvents(ticks);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the Event at the given time.\n\t * @param  time  When the event should stop.\n\t */\n\tstop(time?: TransportTime | TransportTimeClass): this {\n\t\tthis.cancel(time);\n\t\tconst ticks = this.toTicks(time);\n\t\tif (this._state.getValueAtTime(ticks) === \"started\") {\n\t\t\tthis._state.setStateAtTime(\"stopped\", ticks, { id: -1 });\n\t\t\tconst previousEvent = this._state.getBefore(ticks);\n\t\t\tlet reschedulTime = ticks;\n\t\t\tif (previousEvent !== null) {\n\t\t\t\treschedulTime = previousEvent.time;\n\t\t\t}\n\t\t\tthis._rescheduleEvents(reschedulTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Cancel all scheduled events greater than or equal to the given time\n\t * @param  time  The time after which events will be cancel.\n\t */\n\tcancel(time?: TransportTime | TransportTimeClass): this {\n\t\ttime = defaultArg(time, -Infinity);\n\t\tconst ticks = this.toTicks(time);\n\t\tthis._state.forEachFrom(ticks, event => {\n\t\t\tthis.context.transport.clear(event.id);\n\t\t});\n\t\tthis._state.cancel(ticks);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The callback function invoker. Also\n\t * checks if the Event is done playing\n\t * @param  time  The time of the event in seconds\n\t */\n\tprotected _tick(time: Seconds): void {\n\t\tconst ticks = this.context.transport.getTicksAtTime(time);\n\t\tif (!this.mute && this._state.getValueAtTime(ticks) === \"started\") {\n\t\t\tif (this.probability < 1 && Math.random() > this.probability) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (this.humanize) {\n\t\t\t\tlet variation = 0.02;\n\t\t\t\tif (!isBoolean(this.humanize)) {\n\t\t\t\t\tvariation = this.toSeconds(this.humanize);\n\t\t\t\t}\n\t\t\t\ttime += (Math.random() * 2 - 1) * variation;\n\t\t\t}\n\t\t\tthis.callback(time, this.value);\n\t\t}\n\t}\n\n\t/**\n\t * Get the duration of the loop.\n\t */\n\tprotected _getLoopDuration(): Ticks {\n\t\treturn Math.round((this._loopEnd - this._loopStart) / this._playbackRate);\n\t}\n\n\t/**\n\t * If the note should loop or not\n\t * between ToneEvent.loopStart and\n\t * ToneEvent.loopEnd. If set to true,\n\t * the event will loop indefinitely,\n\t * if set to a number greater than 1\n\t * it will play a specific number of\n\t * times, if set to false, 0 or 1, the\n\t * part will only play once.\n\t */\n\tget loop(): boolean | number {\n\t\treturn this._loop;\n\t}\n\tset loop(loop) {\n\t\tthis._loop = loop;\n\t\tthis._rescheduleEvents();\n\t}\n\n\t/**\n\t * The playback rate of the note. Defaults to 1.\n\t * @example\n\t * import { ToneEvent } from \"tone\";\n\t * const note = new ToneEvent();\n\t * note.loop = true;\n\t * // repeat the note twice as fast\n\t * note.playbackRate = 2;\n\t */\n\tget playbackRate(): Positive {\n\t\treturn this._playbackRate;\n\t}\n\tset playbackRate(rate) {\n\t\tthis._playbackRate = rate;\n\t\tthis._rescheduleEvents();\n\t}\n\n\t/**\n\t * The loopEnd point is the time the event will loop\n\t * if ToneEvent.loop is true.\n\t */\n\tget loopEnd(): Time {\n\t\treturn new TicksClass(this.context, this._loopEnd).toSeconds();\n\t}\n\tset loopEnd(loopEnd) {\n\t\tthis._loopEnd = this.toTicks(loopEnd);\n\t\tif (this._loop) {\n\t\t\tthis._rescheduleEvents();\n\t\t}\n\t}\n\n\t/**\n\t * The time when the loop should start.\n\t */\n\tget loopStart(): Time {\n\t\treturn new TicksClass(this.context, this._loopStart).toSeconds();\n\t}\n\tset loopStart(loopStart) {\n\t\tthis._loopStart = this.toTicks(loopStart);\n\t\tif (this._loop) {\n\t\t\tthis._rescheduleEvents();\n\t\t}\n\t}\n\n\t/**\n\t * The current progress of the loop interval.\n\t * Returns 0 if the event is not started yet or\n\t * it is not set to loop.\n\t */\n\tget progress(): NormalRange {\n\t\tif (this._loop) {\n\t\t\tconst ticks = this.context.transport.ticks;\n\t\t\tconst lastEvent = this._state.get(ticks);\n\t\t\tif (lastEvent !== null && lastEvent.state === \"started\") {\n\t\t\t\tconst loopDuration = this._getLoopDuration();\n\t\t\t\tconst progress = (ticks - lastEvent.time) % loopDuration;\n\t\t\t\treturn progress / loopDuration;\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.cancel();\n\t\tthis._state.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneEvent } from \"./ToneEvent\";\nimport { NormalRange, Positive, Seconds, Time, TransportTime } from \"../core/type/Units\";\nimport { ToneWithContext, ToneWithContextOptions } from \"../core/context/ToneWithContext\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { BasicPlaybackState } from \"../core/util/StateTimeline\";\n\nexport interface LoopOptions extends ToneWithContextOptions {\n\tcallback: (time: Seconds) => void;\n\tinterval: Time;\n\tplaybackRate: Positive;\n\titerations: number;\n\tprobability: NormalRange;\n\tmute: boolean;\n\thumanize: boolean | Time;\n}\n\n/**\n * Loop creates a looped callback at the \n * specified interval. The callback can be \n * started, stopped and scheduled along\n * the Transport's timeline. \n * @example\n * import { Loop, Transport } from \"tone\";\n * const loop = new Loop((time) => {\n * \t// triggered every eighth note. \n * \tconsole.log(time);\n * }, \"8n\").start(0);\n * Transport.start();\n * @category Event\n */\nexport class Loop<Options extends LoopOptions = LoopOptions> extends ToneWithContext<Options> {\n\n\treadonly name: string = \"Loop\";\n\n\t/**\n\t * The event which produces the callbacks\n\t */\n\tprivate _event: ToneEvent;\n\n\t/**\n\t * The callback to invoke with the next event in the pattern\n\t */\n\tcallback: (time: Seconds) => void\n\n\t/**\n\t * @param callback The callback to invoke at the time.\n\t * @param interval The time between successive callback calls. \n\t */\n\tconstructor(callback?: (time: Seconds) => void, interval?: Time);\n\tconstructor(options?: Partial<LoopOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Loop.getDefaults(), arguments, [\"callback\", \"interval\"]));\n\t\tconst options = optionsFromArguments(Loop.getDefaults(), arguments, [\"callback\", \"interval\"]);\n\n\t\tthis._event = new ToneEvent({\n\t\t\tcontext: this.context,\n\t\t\tcallback: this._tick.bind(this),\n\t\t\tloop: true,\n\t\t\tloopEnd: options.interval,\n\t\t\tplaybackRate: options.playbackRate,\n\t\t\tprobability: options.probability\n\t\t});\n\n\t\tthis.callback = options.callback;\n\t\t// set the iterations\n\t\tthis.iterations = options.iterations;\n\t}\n\n\tstatic getDefaults(): LoopOptions {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tinterval: \"4n\",\n\t\t\tcallback: noOp,\n\t\t\tplaybackRate: 1,\n\t\t\titerations: Infinity,\n\t\t\tprobability: 1,\n\t\t\tmute: false,\n\t\t\thumanize: false\n\t\t});\n\t}\n\n\t/**\n\t * Start the loop at the specified time along the Transport's timeline.\n\t * @param  time  When to start the Loop.\n\t */\n\tstart(time?: TransportTime): this {\n\t\tthis._event.start(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the loop at the given time.\n\t * @param  time  When to stop the Loop.\n\t */\n\tstop(time?: TransportTime): this{\n\t\tthis._event.stop(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Cancel all scheduled events greater than or equal to the given time\n\t * @param  time  The time after which events will be cancel.\n\t */\n\tcancel(time?: TransportTime): this{\n\t\tthis._event.cancel(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Internal function called when the notes should be called\n\t * @param time  The time the event occurs\n\t */\n\tprotected _tick(time: Seconds): void {\n\t\tthis.callback(time);\n\t}\n\n\t/**\n\t * The state of the Loop, either started or stopped.\n\t */\n\tget state(): BasicPlaybackState {\n\t\treturn this._event.state;\n\t}\n\n\t/**\n\t * The progress of the loop as a value between 0-1. 0, when the loop is stopped or done iterating. \n\t */\n\tget progress(): NormalRange {\n\t\treturn this._event.progress;\n\t}\n\n\t/**\n\t * The time between successive callbacks. \n\t * @example\n\t * import { Loop, Transport } from \"tone\";\n\t * const loop = new Loop();\n\t * loop.interval = \"8n\"; // loop every 8n\n\t */\n\tget interval(): Time {\n\t\treturn this._event.loopEnd;\n\t}\n\tset interval(interval) {\n\t\tthis._event.loopEnd = interval;\n\t}\n\n\t/**\n\t * The playback rate of the loop. The normal playback rate is 1 (no change). \n\t * A `playbackRate` of 2 would be twice as fast. \n\t */\n\tget playbackRate(): Positive {\n\t\treturn this._event.playbackRate;\n\t}\n\tset playbackRate(rate) {\n\t\tthis._event.playbackRate = rate;\n\t}\n\n\t/**\n\t * Random variation +/-0.01s to the scheduled time. \n\t * Or give it a time value which it will randomize by.\n\t */\n\tget humanize(): boolean | Time {\n\t\treturn this._event.humanize;\n\t}\n\tset humanize(variation) {\n\t\tthis._event.humanize = variation;\n\t}\n\n\t/**\n\t * The probably of the callback being invoked.\n\t */\n\tget probability(): NormalRange {\n\t\treturn this._event.probability;\n\t}\n\n\tset probability(prob) {\n\t\tthis._event.probability = prob;\n\t}\n\n\t/**\n\t * Muting the Loop means that no callbacks are invoked.\n\t */\n\tget mute(): boolean {\n\t\treturn this._event.mute;\n\t}\n\n\tset mute(mute) {\n\t\tthis._event.mute = mute;\n\t}\n\n\t/**\n\t * The number of iterations of the loop. The default value is `Infinity` (loop forever).\n\t */\n\tget iterations(): number {\n\t\tif (this._event.loop === true) {\n\t\t\treturn Infinity;\n\t\t} else {\n\t\t\treturn this._event.loop as number;\n\t\t}\n\t}\n\tset iterations(iters) {\n\t\tif (iters === Infinity) {\n\t\t\tthis._event.loop = true;\n\t\t} else {\n\t\t\tthis._event.loop = iters;\n\t\t}\n\t}\n\n\tdispose(): this{\n\t\tsuper.dispose();\n\t\tthis._event.dispose();\n\t\treturn this;\n\t}\n}\n","import { TicksClass } from \"../core/type/Ticks\";\nimport { TransportTimeClass } from \"../core/type/TransportTime\";\nimport { NormalRange, Positive, Seconds, Ticks, Time, TransportTime } from \"../core/type/Units\";\nimport { defaultArg, optionsFromArguments } from \"../core/util/Defaults\";\nimport { StateTimeline } from \"../core/util/StateTimeline\";\nimport { isArray, isDefined, isObject, isUndef } from \"../core/util/TypeCheck\";\nimport { ToneEvent, ToneEventCallback, ToneEventOptions } from \"./ToneEvent\";\n\ntype CallbackType<T> =\n\tT extends {\n\t\ttime: Time;\n\t\t[key: string]: any;\n\t} ? T :\n\t\tT extends ArrayLike<any> ? T[1] :\n\t\t\tT extends Time ? null : never;\n\ninterface PartOptions<T> extends Omit<ToneEventOptions<CallbackType<T>>, \"value\"> {\n\tevents: T[];\n}\n\n/**\n * Part is a collection ToneEvents which can be started/stopped and looped as a single unit.\n *\n * @example\n * import { Part, Synth } from \"tone\";\n * const synth = new Synth().toDestination();\n * const part = new Part(((time, note) => {\n * \t// the notes given as the second element in the array\n * \t// will be passed in as the second argument\n * \tsynth.triggerAttackRelease(note, \"8n\", time);\n * }), [[0, \"C2\"], [\"0:2\", \"C3\"], [\"0:3:2\", \"G2\"]]);\n * @example\n * import { Part, Synth } from \"tone\";\n * const synth = new Synth().toDestination();\n * // use an array of objects as long as the object has a \"time\" attribute\n * const part = new Part(((time, value) => {\n * \t// the value is an object which contains both the note and the velocity\n * \tsynth.triggerAttackRelease(value.note, \"8n\", time, value.velocity);\n * }), [{ time: 0, note: \"C3\", velocity: 0.9 },\n * \t{ time: \"0:2\", note: \"C4\", velocity: 0.5 }\n * ]).start(0);\n * @category Event\n */\nexport class Part<ValueType = any> extends ToneEvent<ValueType> {\n\n\treadonly name: string = \"Part\";\n\n\t/**\n\t * Tracks the scheduled events\n\t */\n\tprotected _state: StateTimeline<{\n\t\tid: number;\n\t\toffset: number;\n\t}> = new StateTimeline(\"stopped\");\n\n\t/**\n\t * The events that belong to this part\n\t */\n\tprivate _events: Set<ToneEvent> = new Set();\n\n\t/**\n\t * @param callback The callback to invoke on each event\n\t * @param events the array of events\n\t */\n\tconstructor(callback?: ToneEventCallback<CallbackType<ValueType>>, value?: ValueType[]);\n\tconstructor(options?: Partial<PartOptions<ValueType>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Part.getDefaults(), arguments, [\"callback\", \"events\"]));\n\t\tconst options = optionsFromArguments(Part.getDefaults(), arguments, [\"callback\", \"events\"]);\n\n\t\t// add the events\n\t\toptions.events.forEach(event => {\n\t\t\tif (isArray(event)) {\n\t\t\t\tthis.add(event[0], event[1]);\n\t\t\t} else {\n\t\t\t\tthis.add(event);\n\t\t\t}\n\t\t});\n\t}\n\n\tstatic getDefaults(): PartOptions<any> {\n\t\treturn Object.assign(ToneEvent.getDefaults(), {\n\t\t\tevents: [],\n\t\t});\n\t}\n\n\t/**\n\t * Start the part at the given time.\n\t * @param  time    When to start the part.\n\t * @param  offset  The offset from the start of the part to begin playing at.\n\t */\n\tstart(time?: TransportTime, offset?: Time): this {\n\t\tconst ticks = this.toTicks(time);\n\t\tif (this._state.getValueAtTime(ticks) !== \"started\") {\n\t\t\toffset = defaultArg(offset, this._loop ? this._loopStart : 0);\n\t\t\tif (this._loop) {\n\t\t\t\toffset = defaultArg(offset, this._loopStart);\n\t\t\t} else {\n\t\t\t\toffset = defaultArg(offset, 0);\n\t\t\t}\n\t\t\tconst computedOffset = this.toTicks(offset);\n\t\t\tthis._state.add({\n\t\t\t\tid: -1,\n\t\t\t\toffset: computedOffset,\n\t\t\t\tstate: \"started\",\n\t\t\t\ttime: ticks,\n\t\t\t});\n\t\t\tthis._forEach(event => {\n\t\t\t\tthis._startNote(event, ticks, computedOffset);\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Start the event in the given event at the correct time given\n\t * the ticks and offset and looping.\n\t * @param  event\n\t * @param  ticks\n\t * @param  offset\n\t */\n\tprivate _startNote(event: ToneEvent, ticks: Ticks, offset: Ticks): void {\n\t\tticks -= offset;\n\t\tif (this._loop) {\n\t\t\tif (event.startOffset >= this._loopStart && event.startOffset < this._loopEnd) {\n\t\t\t\tif (event.startOffset < offset) {\n\t\t\t\t\t// start it on the next loop\n\t\t\t\t\tticks += this._getLoopDuration();\n\t\t\t\t}\n\t\t\t\tevent.start(new TicksClass(this.context, ticks));\n\t\t\t} else if (event.startOffset < this._loopStart && event.startOffset >= offset) {\n\t\t\t\tevent.loop = false;\n\t\t\t\tevent.start(new TicksClass(this.context, ticks));\n\t\t\t}\n\t\t} else if (event.startOffset >= offset) {\n\t\t\tevent.start(new TicksClass(this.context, ticks));\n\t\t}\n\t}\n\n\tget startOffset(): Ticks {\n\t\treturn this._startOffset;\n\t}\n\tset startOffset(offset) {\n\t\tthis._startOffset = offset;\n\t\tthis._forEach(event => {\n\t\t\tevent.startOffset += this._startOffset;\n\t\t});\n\t}\n\n\t/**\n\t * Stop the part at the given time.\n\t * @param  time  When to stop the part.\n\t */\n\tstop(time?: TransportTime): this {\n\t\tconst ticks = this.toTicks(time);\n\t\tthis._state.cancel(ticks);\n\t\tthis._state.setStateAtTime(\"stopped\", ticks);\n\t\tthis._forEach(event => {\n\t\t\tevent.stop(time);\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get/Set an Event's value at the given time.\n\t * If a value is passed in and no event exists at\n\t * the given time, one will be created with that value.\n\t * If two events are at the same time, the first one will\n\t * be returned.\n\t * @example\n\t * import { Part } from \"tone\";\n\t * const part = new Part();\n\t * part.at(\"1m\"); // returns the part at the first measure\n\t * part.at(\"2m\", \"C2\"); // set the value at \"2m\" to C2.\n\t * // if an event didn't exist at that time, it will be created.\n\t * @param time The time of the event to get or set.\n\t * @param value If a value is passed in, the value of the event at the given time will be set to it.\n\t */\n\tat(time: Time, value?: any): ToneEvent | null {\n\t\tconst timeInTicks = new TransportTimeClass(this.context, time).toTicks();\n\t\tconst tickTime = new TicksClass(this.context, 1).toSeconds();\n\n\t\tconst iterator = this._events.values();\n\t\tlet result = iterator.next();\n\t\twhile (!result.done) {\n\t\t\tconst event = result.value;\n\t\t\tif (Math.abs(timeInTicks - event.startOffset) < tickTime) {\n\t\t\t\tif (isDefined(value)) {\n\t\t\t\t\tevent.value = value;\n\t\t\t\t}\n\t\t\t\treturn event;\n\t\t\t}\n\t\t\tresult = iterator.next();\n\t\t}\n\t\t// if there was no event at that time, create one\n\t\tif (isDefined(value)) {\n\t\t\tthis.add(time, value);\n\t\t\t// return the new event\n\t\t\treturn this.at(time);\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * Add a an event to the part.\n\t * @param time The time the note should start. If an object is passed in, it should\n\t * \t\thave a 'time' attribute and the rest of the object will be used as the 'value'.\n\t * @param  value\n\t * @example\n\t * import { Part } from \"tone\";\n\t * const part = new Part();\n\t * part.add(\"1m\", \"C#+11\");\n\t */\n\tadd(obj: {\n\t\ttime: Time;\n\t\t[key: string]: any;\n\t}): this;\n\tadd(time: Time, value?: any): this;\n\tadd(time: Time | object, value?: any): this {\n\t\t// extract the parameters\n\t\tif (time instanceof Object && Reflect.has(time, \"time\")) {\n\t\t\tvalue = time;\n\t\t\ttime = value.time;\n\t\t}\n\t\tconst ticks = this.toTicks(time);\n\t\tlet event: ToneEvent;\n\t\tif (value instanceof ToneEvent) {\n\t\t\tevent = value;\n\t\t\tevent.callback = this._tick.bind(this);\n\t\t} else {\n\t\t\tevent = new ToneEvent({\n\t\t\t\tcallback: this._tick.bind(this),\n\t\t\t\tcontext: this.context,\n\t\t\t\tvalue,\n\t\t\t});\n\t\t}\n\t\t// the start offset\n\t\tevent.startOffset = ticks;\n\n\t\t// initialize the values\n\t\tevent.set({\n\t\t\thumanize: this.humanize,\n\t\t\tloop: this.loop,\n\t\t\tloopEnd: this.loopEnd,\n\t\t\tloopStart: this.loopStart,\n\t\t\tplaybackRate: this.playbackRate,\n\t\t\tprobability: this.probability,\n\t\t});\n\n\t\tthis._events.add(event);\n\n\t\t// start the note if it should be played right now\n\t\tthis._restartEvent(event);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Restart the given event\n\t */\n\tprivate _restartEvent(event: ToneEvent): void {\n\t\tthis._state.forEach((stateEvent) => {\n\t\t\tif (stateEvent.state === \"started\") {\n\t\t\t\tthis._startNote(event, stateEvent.time, stateEvent.offset);\n\t\t\t} else {\n\t\t\t\t// stop the note\n\t\t\t\tevent.stop(new TicksClass(this.context, stateEvent.time));\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Remove an event from the part. If the event at that time is a Part,\n\t * it will remove the entire part.\n\t * @param time The time of the event\n\t * @param value Optionally select only a specific event value\n\t */\n\tremove(obj: {\n\t\ttime: Time;\n\t\t[key: string]: any;\n\t}): this;\n\tremove(time: Time, value?: any): this;\n\tremove(time: Time | object, value?: any): this {\n\t\t// extract the parameters\n\t\tif (isObject(time) && time.hasOwnProperty(\"time\")) {\n\t\t\tvalue = time;\n\t\t\ttime = value.time;\n\t\t}\n\t\ttime = this.toTicks(time);\n\t\tthis._events.forEach(event => {\n\t\t\tif (event.startOffset === time) {\n\t\t\t\tif (isUndef(value) || (isDefined(value) && event.value === value)) {\n\t\t\t\t\tthis._events.delete(event);\n\t\t\t\t\tevent.dispose();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Remove all of the notes from the group.\n\t */\n\tclear(): this {\n\t\tthis._forEach(event => event.dispose());\n\t\tthis._events.clear();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Cancel scheduled state change events: i.e. \"start\" and \"stop\".\n\t * @param after The time after which to cancel the scheduled events.\n\t */\n\tcancel(after?: TransportTime | TransportTimeClass): this {\n\t\tthis._forEach(event => event.cancel(after));\n\t\tthis._state.cancel(this.toTicks(after));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Iterate over all of the events\n\t */\n\tprivate _forEach(callback: (event: ToneEvent) => void): this {\n\t\tif (this._events) {\n\t\t\tthis._events.forEach(event => {\n\t\t\t\tif (event instanceof Part) {\n\t\t\t\t\tevent._forEach(callback);\n\t\t\t\t} else {\n\t\t\t\t\tcallback(event);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set the attribute of all of the events\n\t * @param  attr  the attribute to set\n\t * @param  value      The value to set it to\n\t */\n\tprivate _setAll(attr: string, value: any): void {\n\t\tthis._forEach(event => {\n\t\t\tevent[attr] = value;\n\t\t});\n\t}\n\n\t/**\n\t * Internal tick method\n\t * @param  time  The time of the event in seconds\n\t */\n\tprotected _tick(time: Seconds, value?: any): void {\n\t\tif (!this.mute) {\n\t\t\tthis.callback(time, value);\n\t\t}\n\t}\n\n\t/**\n\t * Determine if the event should be currently looping\n\t * given the loop boundries of this Part.\n\t * @param  event  The event to test\n\t */\n\tprivate _testLoopBoundries(event: ToneEvent): void {\n\t\tif (this._loop && (event.startOffset < this._loopStart || event.startOffset >= this._loopEnd)) {\n\t\t\tevent.cancel(0);\n\t\t} else if (event.state === \"stopped\") {\n\t\t\t// reschedule it if it's stopped\n\t\t\tthis._restartEvent(event);\n\t\t}\n\t}\n\n\tget probability(): NormalRange {\n\t\treturn this._probability;\n\t}\n\tset probability(prob) {\n\t\tthis._probability = prob;\n\t\tthis._setAll(\"probability\", prob);\n\t}\n\n\tget humanize(): boolean | Time {\n\t\treturn this._humanize;\n\t}\n\tset humanize(variation) {\n\t\tthis._humanize = variation;\n\t\tthis._setAll(\"humanize\", variation);\n\t}\n\n\t/**\n\t * If the part should loop or not\n\t * between Part.loopStart and\n\t * Part.loopEnd. If set to true,\n\t * the part will loop indefinitely,\n\t * if set to a number greater than 1\n\t * it will play a specific number of\n\t * times, if set to false, 0 or 1, the\n\t * part will only play once.\n\t * @example\n\t * import { Part } from \"tone\";\n\t * const part = new Part();\n\t * // loop the part 8 times\n\t * part.loop = 8;\n\t */\n\tget loop(): boolean | number {\n\t\treturn this._loop;\n\t}\n\tset loop(loop) {\n\t\tthis._loop = loop;\n\t\tthis._forEach(event => {\n\t\t\tevent.loopStart = this.loopStart;\n\t\t\tevent.loopEnd = this.loopEnd;\n\t\t\tevent.loop = loop;\n\t\t\tthis._testLoopBoundries(event);\n\t\t});\n\t}\n\n\t/**\n\t * The loopEnd point determines when it will\n\t * loop if Part.loop is true.\n\t */\n\tget loopEnd(): Time {\n\t\treturn new TicksClass(this.context, this._loopEnd).toSeconds();\n\t}\n\tset loopEnd(loopEnd) {\n\t\tthis._loopEnd = this.toTicks(loopEnd);\n\t\tif (this._loop) {\n\t\t\tthis._forEach(event => {\n\t\t\t\tevent.loopEnd = loopEnd;\n\t\t\t\tthis._testLoopBoundries(event);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * The loopStart point determines when it will\n\t * loop if Part.loop is true.\n\t */\n\tget loopStart(): Time {\n\t\treturn new TicksClass(this.context, this._loopStart).toSeconds();\n\t}\n\tset loopStart(loopStart) {\n\t\tthis._loopStart = this.toTicks(loopStart);\n\t\tif (this._loop) {\n\t\t\tthis._forEach(event => {\n\t\t\t\tevent.loopStart = this.loopStart;\n\t\t\t\tthis._testLoopBoundries(event);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * The playback rate of the part\n\t */\n\tget playbackRate(): Positive {\n\t\treturn this._playbackRate;\n\t}\n\tset playbackRate(rate) {\n\t\tthis._playbackRate = rate;\n\t\tthis._setAll(\"playbackRate\", rate);\n\t}\n\n\t/**\n\t * The number of scheduled notes in the part.\n\t */\n\tget length(): number {\n\t\treturn this._events.size;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.clear();\n\t\treturn this;\n\t}\n}\n","import { assert } from \"../core/util/Debug\";\n\n/**\n * The name of the patterns\n */\nexport type PatternName = \"up\" | \"down\" | \"upDown\" | \"downUp\" | \"alternateUp\" | \"alternateDown\" | \"random\" | \"randomOnce\";\n\n/**\n * Start at the first value and go up to the last\n */\nfunction* upPatternGen<T>(values: T[]): IterableIterator<T> {\n\tlet index = 0;\n\twhile (index < values.length) {\n\t\tindex = clamp(index, values);\n\t\tyield values[index];\n\t\tindex++;\n\t}\n}\n\n/**\n * Start at the last value and go down to 0\n */\nfunction* downPatternGen<T>(values: T[]): IterableIterator<T> {\n\tlet index = values.length - 1;\n\twhile (index >= 0) {\n\t\tindex = clamp(index, values);\n\t\tyield values[index];\n\t\tindex--;\n\t}\n}\n\n/**\n * Infinitely yield the generator\n */\nfunction* infiniteGen<T>(values: T[], gen: typeof upPatternGen): IterableIterator<T> {\n\twhile (true) {\n\t\tyield* gen(values);\n\t}\n}\n\n/**\n * Make sure that the index is in the given range\n */\nfunction clamp(index: number, values: any[]): number {\n\treturn Math.max(Math.min(index, values.length - 1), 0);\n}\n\n/**\n * Alternate between two generators\n */\nfunction* alternatingGenerator<T>(values: T[], directionUp: boolean): IterableIterator<T> {\n\tlet index = directionUp ? 0 : values.length - 1;\n\twhile (true) {\n\t\tindex = clamp(index, values);\n\t\tyield values[index];\n\t\tif (directionUp) {\n\t\t\tindex++;\n\t\t\tif (index >= values.length - 1) {\n\t\t\t\tdirectionUp = false;\n\t\t\t}\n\t\t} else {\n\t\t\tindex--;\n\t\t\tif (index <= 0) {\n\t\t\t\tdirectionUp = true;\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Starting from the bottom move up 2, down 1\n */\nfunction* jumpUp<T>(values: T[]): IterableIterator<T> {\n\tlet index = 0;\n\tlet stepIndex = 0;\n\twhile (index < values.length) {\n\t\tindex = clamp(index, values);\n\t\tyield values[index];\n\t\tstepIndex++;\n\t\tindex += (stepIndex % 2 ? 2 : -1);\n\t}\n}\n\n/**\n * Starting from the top move down 2, up 1\n */\nfunction* jumpDown<T>(values: T[]): IterableIterator<T> {\n\tlet index = values.length - 1;\n\tlet stepIndex = 0;\n\twhile (index >= 0) {\n\t\tindex = clamp(index, values);\n\t\tyield values[index];\n\t\tstepIndex++;\n\t\tindex += (stepIndex % 2 ? -2 : 1);\n\t}\n}\n\n/**\n * Choose a random index each time\n */\nfunction* randomGen<T>(values: T[]): IterableIterator<T> {\n\twhile (true) {\n\t\tconst randomIndex = Math.floor(Math.random() * values.length);\n\t\tyield values[randomIndex];\n\t}\n}\n\n/**\n * Randomly go through all of the values once before choosing a new random order\n */\nfunction* randomOnce<T>(values: T[]): IterableIterator<T> {\n\t// create an array of indices\n\tconst copy: number[] = [];\n\tfor (let i = 0; i < values.length; i++) {\n\t\tcopy.push(i);\n\t}\n\twhile (copy.length > 0) {\n\t\t// random choose an index, and then remove it so it's not chosen again\n\t\tconst randVal = copy.splice(Math.floor(copy.length * Math.random()), 1);\n\t\tconst index = clamp(randVal[0], values);\n\t\tyield values[index];\n\t}\n}\n\n/**\n * PatternGenerator returns a generator which will iterate over the given array\n * of values and yield the items according to the passed in pattern\n * @param values An array of values to iterate over\n * @param pattern The name of the pattern use when iterating over\n * @param index Where to start in the offset of the values array\n */\nexport function* PatternGenerator<T>(values: T[], pattern: PatternName = \"up\", index: number = 0): Iterator<T> {\n\t// safeguards\n\tassert(values.length > 0, \"The array must have more than one value in it\");\n\tswitch (pattern) {\n\t\tcase \"up\" :\n\t\t\tyield* infiniteGen(values, upPatternGen);\n\t\tcase \"down\" :\n\t\t\tyield* infiniteGen(values, downPatternGen);\n\t\tcase \"upDown\" :\n\t\t\tyield* alternatingGenerator(values, true);\n\t\tcase \"downUp\" :\n\t\t\tyield* alternatingGenerator(values, false);\n\t\tcase \"alternateUp\":\n\t\t\tyield* infiniteGen(values, jumpUp);\n\t\tcase \"alternateDown\":\n\t\t\tyield* infiniteGen(values, jumpDown);\n\t\tcase \"random\":\n\t\t\tyield* randomGen(values);\n\t\tcase \"randomOnce\":\n\t\t\tyield* infiniteGen(values, randomOnce);\n\t}\n}\n","import { Loop, LoopOptions } from \"./Loop\";\nimport { PatternGenerator, PatternName } from \"./PatternGenerator\";\nimport { ToneEventCallback } from \"./ToneEvent\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Seconds } from \"../core/type/Units\";\nimport { noOp } from \"../core/util/Interface\";\n\nexport interface PatternOptions<ValueType> extends LoopOptions {\n\tpattern: PatternName;\n\tvalues: ValueType[];\n\tcallback: (time: Seconds, value?: ValueType) => void;\n}\n\n/**\n * Pattern arpeggiates between the given notes\n * in a number of patterns. \n * @example\n * import { Pattern } from \"tone\";\n * const pattern = new Pattern((time, note) => {\n * \t// the order of the notes passed in depends on the pattern\n * }, [\"C2\", \"D4\", \"E5\", \"A6\"], \"upDown\");\n */\nexport class Pattern<ValueType> extends Loop<PatternOptions<ValueType>> {\n\n\treadonly name: string = \"Pattern\";\n\t\n\t/**\n\t * The pattern generator function\n\t */\n\tprivate _pattern: Iterator<ValueType>;\n\n\t/**\n\t * The current value\n\t */\n\tprivate _value?: ValueType;\n\n\t/**\n\t * Hold the pattern type\n\t */\n\tprivate _type: PatternName;\n\n\t/**\n\t * Hold the values\n\t */\n\tprivate _values: ValueType[];\n\n\t/**\n\t * The callback to be invoked at a regular interval\n\t */\n\tcallback: (time: Seconds, value?: ValueType) => void;\n\n\t/**\n\t * @param  callback The callback to invoke with the event.\n\t * @param  values The values to arpeggiate over.\n\t * @param  pattern  The name of the pattern\n\t */\n\tconstructor(\n\t\tcallback?: ToneEventCallback<ValueType>,\n\t\tvalues?: ValueType[],\n\t\tpattern?: PatternName,\n\t);\n\tconstructor(options?: Partial<PatternOptions<ValueType>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Pattern.getDefaults(), arguments, [\"callback\", \"values\", \"pattern\"]));\n\t\tconst options = optionsFromArguments(Pattern.getDefaults(), arguments, [\"callback\", \"values\", \"pattern\"]);\n\n\t\tthis.callback = options.callback;\n\t\tthis._values = options.values;\n\t\tthis._pattern = PatternGenerator(options.values, options.pattern);\n\t\tthis._type = options.pattern;\n\t}\n\n\tstatic getDefaults(): PatternOptions<any> {\n\t\treturn Object.assign(Loop.getDefaults(), {\n\t\t\tpattern: \"up\" as \"up\",\n\t\t\tvalues: [],\n\t\t\tcallback: noOp,\n\t\t});\n\t}\n\n\t/**\n\t * Internal function called when the notes should be called\n\t */\n\tprotected _tick(time: Seconds): void {\n\t\tconst value = this._pattern.next() as IteratorResult<ValueType>;\n\t\tthis._value = value.value;\n\t\tthis.callback(time, this._value);\n\t}\n\n\t/**\n\t * The array of events.\n\t */\n\tget values(): ValueType[] {\n\t\treturn this._values;\n\t}\n\tset values(val) {\n\t\tthis._values = val;\n\t\t// reset the pattern\n\t\tthis.pattern = this._type;\n\t}\n\n\t/**\n\t * The current value of the pattern.\n\t */\n\tget value(): ValueType | undefined {\n\t\treturn this._value;\n\t}\n\n\t/**\n\t * The pattern type. See Tone.CtrlPattern for the full list of patterns.\n\t */\n\tget pattern(): PatternName {\n\t\treturn this._type;\n\t}\n\tset pattern(pattern) {\n\t\tthis._type = pattern;\n\t\tthis._pattern = PatternGenerator(this._values, this._type);\n\t}\n}\n\n","import { TicksClass } from \"../core/type/Ticks\";\nimport { NormalRange, Positive, Seconds, Ticks, Time, TransportTime } from \"../core/type/Units\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { isArray, isString } from \"../core/util/TypeCheck\";\nimport { Part } from \"./Part\";\nimport { ToneEvent, ToneEventCallback, ToneEventOptions } from \"./ToneEvent\";\n\ntype SequenceEventDescription<T> = Array<T | T[]>;\n\ninterface SequenceOptions<T> extends Omit<ToneEventOptions<T>, \"value\"> {\n\tloopStart: number;\n\tloopEnd: number;\n\tsubdivision: Time;\n\tevents: SequenceEventDescription<T>;\n}\n\n/**\n * A sequence is an alternate notation of a part. Instead\n * of passing in an array of [time, event] pairs, pass\n * in an array of events which will be spaced at the\n * given subdivision. Sub-arrays will subdivide that beat\n * by the number of items are in the array.\n * Sequence notation inspiration from [Tidal](http://yaxu.org/tidal/)\n * @example\n * import { Sequence, Synth, Transport } from \"tone\";\n * const synth = new Synth().toDestination();\n * const seq = new Sequence((time, note) => {\n * \tsynth.triggerAttackRelease(note, 0.1, time);\n * \t// subdivisions are given as subarrays\n * }, [\"C4\", [\"E4\", \"D4\", \"E4\"], \"G4\", [\"A4\", \"G4\"]]).start(0);\n * Transport.start();\n * @category Event\n */\nexport class Sequence<ValueType = any> extends ToneEvent<ValueType> {\n\n\treadonly name: string = \"Sequence\";\n\n\t/**\n\t * The subdivison of each note\n\t */\n\tprivate _subdivision: Ticks;\n\n\t/**\n\t * The object responsible for scheduling all of the events\n\t */\n\tprivate _part: Part = new Part({\n\t\tcallback: this._seqCallback.bind(this),\n\t\tcontext: this.context,\n\t});\n\n\t/**\n\t * private reference to all of the sequence proxies\n\t */\n\tprivate _events: ValueType[] = [];\n\n\t/**\n\t * The proxied array\n\t */\n\tprivate _eventsArray: ValueType[] = [];\n\n\t/**\n\t * @param  callback  The callback to invoke with every note\n\t * @param  sequence  The sequence\n\t * @param  subdivision  The subdivision between which events are placed.\n\t */\n\tconstructor(\n\t\tcallback?: ToneEventCallback<ValueType>,\n\t\tevents?: SequenceEventDescription<ValueType>,\n\t\tsubdivision?: Time,\n\t);\n\tconstructor(options?: Partial<SequenceOptions<ValueType>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Sequence.getDefaults(), arguments, [\"callback\", \"events\", \"subdivision\"]));\n\t\tconst options = optionsFromArguments(Sequence.getDefaults(), arguments, [\"callback\", \"events\", \"subdivision\"]);\n\n\t\tthis._subdivision = this.toTicks(options.subdivision);\n\n\t\tthis.events = options.events;\n\n\t\t// set all of the values\n\t\tthis.loop = options.loop;\n\t\tthis.loopStart = options.loopStart;\n\t\tthis.loopEnd = options.loopEnd;\n\t\tthis.playbackRate = options.playbackRate;\n\t\tthis.probability = options.probability;\n\t\tthis.humanize = options.humanize;\n\t\tthis.mute = options.mute;\n\t\tthis.playbackRate = options.playbackRate;\n\t}\n\n\tstatic getDefaults(): SequenceOptions<any> {\n\t\treturn Object.assign(omitFromObject(ToneEvent.getDefaults(), [\"value\"]), {\n\t\t\tevents: [],\n\t\t\tloop: true,\n\t\t\tloopEnd: 0,\n\t\t\tloopStart: 0,\n\t\t\tsubdivision: \"8n\",\n\t\t});\n\t}\n\n\t/**\n\t * The internal callback for when an event is invoked\n\t */\n\tprivate _seqCallback(time: Seconds, value: any): void {\n\t\tif (value !== null) {\n\t\t\tthis.callback(time, value);\n\t\t}\n\t}\n\n\t/**\n\t * The sequence\n\t */\n\tget events(): any[] {\n\t\treturn this._events;\n\t}\n\tset events(s) {\n\t\tthis.clear();\n\t\tthis._eventsArray = s;\n\t\tthis._events = this._createSequence(this._eventsArray);\n\t\tthis._eventsUpdated();\n\t}\n\n\t/**\n\t * Start the part at the given time.\n\t * @param  time    When to start the part.\n\t * @param  offset  The offset index to start at\n\t */\n\tstart(time?: TransportTime, offset?: number): this {\n\t\tthis._part.start(time, offset ? this._indexTime(offset) : offset);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the part at the given time.\n\t * @param  time  When to stop the part.\n\t */\n\tstop(time?: TransportTime): this {\n\t\tthis._part.stop(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The subdivision of the sequence. This can only be\n\t * set in the constructor. The subdivision is the\n\t * interval between successive steps.\n\t */\n\tget subdivision(): Seconds {\n\t\treturn new TicksClass(this.context, this._subdivision).toSeconds();\n\t}\n\n\t/**\n\t * Create a sequence proxy which can be monitored to create subsequences\n\t */\n\tprivate _createSequence(array: any[]): any[] {\n\t\treturn new Proxy(array, {\n\t\t\tget: (target: any[], property: PropertyKey): any => {\n\t\t\t\t// property is index in this case\n\t\t\t\treturn target[property];\n\t\t\t},\n\t\t\tset: (target: any[], property: PropertyKey, value: any): boolean => {\n\t\t\t\tif (isString(property) && isFinite(parseInt(property, 10))) {\n\t\t\t\t\tif (isArray(value)) {\n\t\t\t\t\t\ttarget[property] = this._createSequence(value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttarget[property] = value;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttarget[property] = value;\n\t\t\t\t}\n\t\t\t\tthis._eventsUpdated();\n\t\t\t\t// return true to accept the changes\n\t\t\t\treturn true;\n\t\t\t},\n\t\t});\n\t}\n\n\t/**\n\t * When the sequence has changed, all of the events need to be recreated\n\t */\n\tprivate _eventsUpdated(): void {\n\t\tthis._part.clear();\n\t\tthis._rescheduleSequence(this._eventsArray, this._subdivision, this.startOffset);\n\t\t// update the loopEnd\n\t\tthis.loopEnd = this.loopEnd;\n\t}\n\n\t/**\n\t * reschedule all of the events that need to be rescheduled\n\t */\n\tprivate _rescheduleSequence(sequence: any[], subdivision: Ticks, startOffset: Ticks): void {\n\t\tsequence.forEach((value, index) => {\n\t\t\tconst eventOffset = index * (subdivision) + startOffset;\n\t\t\tif (isArray(value)) {\n\t\t\t\tthis._rescheduleSequence(value, subdivision / value.length, eventOffset);\n\t\t\t} else {\n\t\t\t\tconst startTime = new TicksClass(this.context, eventOffset, \"i\").toSeconds();\n\t\t\t\tthis._part.add(startTime, value);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Get the time of the index given the Sequence's subdivision\n\t * @param  index\n\t * @return The time of that index\n\t */\n\tprivate _indexTime(index: number): Seconds {\n\t\treturn new TicksClass(this.context, index * (this._subdivision) + this.startOffset).toSeconds();\n\t}\n\n\t/**\n\t * Clear all of the events\n\t */\n\tclear(): this {\n\t\tthis._part.clear();\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._part.dispose();\n\t\treturn this;\n\t}\n\n\t//-------------------------------------\n\t// PROXY CALLS\n\t//-------------------------------------\n\n\tget loop(): boolean | number {\n\t\treturn this._part.loop;\n\t}\n\tset loop(l) {\n\t\tif (this._part) {\n\t\t\tthis._part.loop = l;\n\t\t}\n\t}\n\n\t/**\n\t * The index at which the sequence should start looping\n\t */\n\tget loopStart(): number {\n\t\treturn this._loopStart;\n\t}\n\tset loopStart(index) {\n\t\tthis._loopStart = index;\n\t\tif (this._part) {\n\t\t\tthis._part.loopStart = this._indexTime(index);\n\t\t}\n\t}\n\n\t/**\n\t * The index at which the sequence should end looping\n\t */\n\tget loopEnd(): number {\n\t\treturn this._loopEnd;\n\t}\n\tset loopEnd(index) {\n\t\tthis._loopEnd = index;\n\t\tif (this._part) {\n\t\t\tif (index === 0) {\n\t\t\t\tthis._part.loopEnd = this._indexTime(this._eventsArray.length);\n\t\t\t} else {\n\t\t\t\tthis._part.loopEnd = this._indexTime(index);\n\t\t\t}\n\t\t}\n\t}\n\n\tget startOffset(): Ticks {\n\t\treturn this._part.startOffset;\n\t}\n\tset startOffset(start) {\n\t\tif (this._part) {\n\t\t\tthis._part.startOffset = start;\n\t\t}\n\t}\n\n\tget playbackRate(): Positive {\n\t\treturn this._part.playbackRate;\n\t}\n\tset playbackRate(rate) {\n\t\tif (this._part) {\n\t\t\tthis._part.playbackRate = rate;\n\t\t}\n\t}\n\n\tget probability(): NormalRange {\n\t\treturn this._part.probability;\n\t}\n\tset probability(prob) {\n\t\tif (this._part) {\n\t\t\tthis._part.probability = prob;\n\t\t}\n\t}\n\n\tget humanize(): boolean | Time {\n\t\treturn this._part.humanize;\n\t}\n\tset humanize(variation) {\n\t\tif (this._part) {\n\t\t\tthis._part.humanize = variation;\n\t\t}\n\t}\n\n\t/**\n\t * The number of scheduled events\n\t */\n\tget length(): number {\n\t\treturn this._part.length;\n\t}\n}\n","import { CrossFade } from \"../component/channel/CrossFade\";\nimport { Gain } from \"../core/context/Gain\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { NormalRange } from \"../core/type/Units\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Signal } from \"../signal/Signal\";\n\nexport interface EffectOptions extends ToneAudioNodeOptions {\n\twet: NormalRange;\n}\n/**\n * Effect is the base class for effects. Connect the effect between\n * the effectSend and effectReturn GainNodes, then control the amount of\n * effect which goes to the output using the wet control.\n */\nexport abstract class Effect<Options extends EffectOptions>\n\textends ToneAudioNode<Options> {\n\n\treadonly name: string = \"Effect\";\n\n\t/**\n\t * the drywet knob to control the amount of effect\n\t */\n\tprivate _dryWet: CrossFade = new CrossFade({ context: this.context });\n\n\t/**\n\t * The wet control is how much of the effected\n\t * will pass through to the output. 1 = 100% effected\n\t * signal, 0 = 100% dry signal.\n\t */\n\twet: Signal<\"normalRange\"> = this._dryWet.fade;\n\n\t/**\n\t * connect the effectSend to the input of hte effect\n\t */\n\tprotected effectSend: Gain = new Gain({ context: this.context });\n\n\t/**\n\t * connect the output of the effect to the effectReturn\n\t */\n\tprotected effectReturn: Gain = new Gain({ context: this.context });\n\n\t/**\n\t * The effect input node\n\t */\n\tinput: Gain = new Gain({ context: this.context });\n\n\t/**\n\t * The effect output\n\t */\n\toutput = this._dryWet;\n\n\tconstructor(options: EffectOptions) {\n\t\tsuper(options);\n\n\t\t// connections\n\t\tthis.input.fan(this._dryWet.a, this.effectSend);\n\t\tthis.effectReturn.connect(this._dryWet.b);\n\t\tthis.wet.setValueAtTime(options.wet, 0);\n\t\tthis._internalChannels = [this.effectReturn, this.effectSend];\n\t\treadOnly(this, \"wet\");\n\t}\n\n\tstatic getDefaults(): EffectOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\twet: 1,\n\t\t});\n\t}\n\n\t/**\n\t * chains the effect in between the effectSend and effectReturn\n\t */\n\tprotected connectEffect(effect: ToneAudioNode | AudioNode): this {\n\t\t// add it to the internal channels\n\t\tthis._internalChannels.push(effect);\n\t\tthis.effectSend.chain(effect, this.effectReturn);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._dryWet.dispose();\n\t\tthis.effectSend.dispose();\n\t\tthis.effectReturn.dispose();\n\t\tthis.wet.dispose();\n\t\treturn this;\n\t}\n}\n","import { Effect, EffectOptions } from \"../effect/Effect\";\nimport { Frequency, NormalRange, Time } from \"../core/type/Units\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { ToneOscillatorType } from \"../source/oscillator/OscillatorInterface\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Param } from \"../core/context/Param\";\n\nexport interface LFOEffectOptions extends EffectOptions {\n\tfrequency: Frequency;\n\ttype: ToneOscillatorType;\n\tdepth: NormalRange;\n}\n\n/**\n * Base class for LFO-based effects.\n */\nexport abstract class LFOEffect<Options extends LFOEffectOptions> extends Effect<Options> {\n\n\treadonly name: string = \"LFOEffect\";\n\n\t/**\n\t * the lfo which drives the filter cutoff\n\t */\n\tprotected _lfo: LFO;\n\t\n\t/**\n\t * The range of the filter modulating between the min and max frequency. \n\t * 0 = no modulation. 1 = full modulation.\n\t */\n\treadonly depth: Param<\"normalRange\">;\n\t\n\t/**\n\t * How fast the filter modulates between min and max. \n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\tconstructor(options: LFOEffectOptions) {\n\n\t\tsuper(options);\n\n\t\tthis._lfo = new LFO({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.frequency,\n\t\t\tamplitude: options.depth,\n\t\t});\n\t\tthis.depth = this._lfo.amplitude;\n\t\tthis.frequency = this._lfo.frequency;\n\n\t\tthis.type = options.type;\n\t\treadOnly(this, [\"frequency\", \"depth\"]);\n\t}\n\n\tstatic getDefaults(): LFOEffectOptions {\n\t\treturn Object.assign(Effect.getDefaults(), {\n\t\t\tfrequency: 1,\n\t\t\ttype: \"sine\" as ToneOscillatorType,\n\t\t\tdepth: 1,\n\t\t});\n\t}\n\n\t/**\n\t * Start the effect.\n\t */\n\tstart(time?: Time): this {\n\t\tthis._lfo.start(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the lfo\n\t */\n\tstop(time?: Time): this {\n\t\tthis._lfo.stop(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sync the filter to the transport. See [[LFO.sync]]\n\t */\n\tsync(): this {\n\t\tthis._lfo.sync();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unsync the filter from the transport.\n\t */\n\tunsync(): this {\n\t\tthis._lfo.unsync();\n\t\treturn this;\n\t}\n\n\t/**\n\t * The type of the LFO's oscillator: See [[Oscillator.type]]\n\t * @example\n\t * import { AutoFilter, Noise } from \"tone\";\n\t * const autoFilter = new AutoFilter().start().toDestination();\n\t * const noise = new Noise().start().connect(autoFilter);\n\t * autoFilter.type = \"square\";\n\t */\n\tget type() {\n\t\treturn this._lfo.type;\n\t}\n\tset type(type) {\n\t\tthis._lfo.type = type;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._lfo.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.depth.dispose();\n\t\treturn this;\n\t}\n}\n","import { Frequency, Positive } from \"../core/type/Units\";\nimport { Filter, FilterOptions } from \"../component/filter/Filter\";\nimport { SourceOptions } from \"../source/Source\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFOEffect, LFOEffectOptions } from \"./LFOEffect\";\n\nexport interface AutoFilterOptions extends LFOEffectOptions {\n\tbaseFrequency: Frequency;\n\toctaves: Positive;\n\tfilter: Omit<FilterOptions, keyof SourceOptions | \"frequency\" | \"detune\" | \"gain\">;\n}\n\n/**\n * AutoFilter is a Tone.Filter with a Tone.LFO connected to the filter cutoff frequency.\n * Setting the LFO rate and depth allows for control over the filter modulation rate \n * and depth.\n *\n * @example\n * import { AutoFilter, Oscillator } from \"tone\";\n * // create an autofilter and start it's LFO\n * const autoFilter = new AutoFilter(\"4n\").toDestination().start();\n * // route an oscillator through the filter and start it\n * const oscillator = new Oscillator().connect(autoFilter).start();\n * @category Effect\n */\nexport class AutoFilter extends LFOEffect<AutoFilterOptions> {\n\n\treadonly name: string = \"AutoFilter\";\n\n\t/**\n\t * The filter node\n\t */\n\treadonly filter: Filter;\n\t\n\t/**\n\t * The octaves placeholder\n\t */\n\tprivate _octaves!: Positive;\n\n\t/**\n\t * @param frequency The rate of the LFO.\n\t * @param baseFrequency The lower value of the LFOs oscillation\n\t * @param octaves The number of octaves above the baseFrequency\n\t */\n\tconstructor(frequency?: Frequency, baseFrequency?: Frequency, octaves?: Positive);\n\tconstructor(options?: Partial<AutoFilterOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(AutoFilter.getDefaults(), arguments, [\"frequency\", \"baseFrequency\", \"octaves\"]));\n\t\tconst options = optionsFromArguments(AutoFilter.getDefaults(), arguments, [\"frequency\", \"baseFrequency\", \"octaves\"]);\n\n\t\tthis.filter = new Filter(Object.assign(options.filter, {\n\t\t\tcontext: this.context,\n\t\t}));\n\n\t\t// connections\n\t\tthis.connectEffect(this.filter);\n\t\tthis._lfo.connect(this.filter.frequency);\n\t\tthis.octaves = options.octaves;\n\t\tthis.baseFrequency = options.baseFrequency;\n\t}\n\n\tstatic getDefaults(): AutoFilterOptions {\n\t\treturn Object.assign(LFOEffect.getDefaults(), {\n\t\t\tbaseFrequency: 200,\n\t\t\toctaves: 2.6,\n\t\t\tfilter: {\n\t\t\t\ttype: \"lowpass\" as \"lowpass\",\n\t\t\t\trolloff: -12 as -12,\n\t\t\t\tQ: 1,\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * The minimum value of the filter's cutoff frequency.\n\t */\n\tget baseFrequency(): Frequency {\n\t\treturn this._lfo.min;\n\t}\n\tset baseFrequency(freq) {\n\t\tthis._lfo.min = this.toFrequency(freq);\n\t\t// and set the max\n\t\tthis.octaves = this._octaves;\n\t}\n\n\t/**\n\t * The maximum value of the filter's cutoff frequency. \n\t */\n\tget octaves(): Positive {\n\t\treturn this._octaves;\n\t}\n\tset octaves(oct) {\n\t\tthis._octaves = oct;\n\t\tthis._lfo.max = this._lfo.min * Math.pow(2, oct);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.filter.dispose();\n\t\treturn this;\n\t}\n}\n","import { Panner } from \"../component/channel/Panner\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFOEffect, LFOEffectOptions } from \"./LFOEffect\";\nimport { Frequency } from \"../core/type/Units\";\n\nexport type AutoPannerOptions = LFOEffectOptions;\n\n/**\n * AutoPanner is a [[Panner]] with an [[LFO]] connected to the pan amount. \n * [Related Reading](https://www.ableton.com/en/blog/autopan-chopper-effect-and-more-liveschool/).\n *\n * @example\n * import { AutoPanner, Oscillator } from \"tone\";\n * // create an autopanner and start it\n * const autoPanner = new AutoPanner(\"4n\").toDestination().start();\n * // route an oscillator through the panner and start it\n * const oscillator = new Oscillator().connect(autoPanner).start();\n * @category Effect\n */\nexport class AutoPanner extends LFOEffect<AutoPannerOptions> {\n\t\n\treadonly name: string = \"AutoPanner\";\n\t\n\t/**\n\t * The filter node\n\t */\n\treadonly _panner: Panner;\n\t\n\t/**\n\t * @param frequency Rate of left-right oscillation. \n\t */\n\tconstructor(frequency?: Frequency);\n\tconstructor(options?: Partial<AutoPannerOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(AutoPanner.getDefaults(), arguments, [\"frequency\"]));\n\n\t\tthis._panner = new Panner({ context: this.context });\n\t\t// connections\n\t\tthis.connectEffect(this._panner);\n\t\tthis._lfo.connect(this._panner.pan);\n\t\tthis._lfo.min = -1;\n\t\tthis._lfo.max = 1;\n\t}\n\n\tdispose(): this{\n\t\tsuper.dispose();\n\t\tthis._panner.dispose();\n\t\treturn this;\n\t}\n}\n\n","import { Effect, EffectOptions } from \"./Effect\";\nimport { Filter } from \"../component/filter/Filter\";\nimport { Follower } from \"../component/analysis/Follower\";\nimport { Decibels, Frequency, GainFactor, Hertz, Positive, Time } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Gain } from \"../core/context/Gain\";\nimport { dbToGain, gainToDb } from \"../core/type/Conversions\";\nimport { ScaleExp } from \"../signal/ScaleExp\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\n\nexport interface AutoWahOptions extends EffectOptions {\n\tbaseFrequency: Frequency;\n\toctaves: Positive;\n\tsensitivity: Decibels;\n\tQ: Positive;\n\tgain: GainFactor;\n\tfollower: Time;\n}\n\n/**\n * AutoWah connects a [[Follower]] to a [[Filter]]. \n * The frequency of the filter, follows the input amplitude curve. \n * Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna).\n * \n * @example\n * import { AutoWah, Synth } from \"tone\";\n * const autoWah = new AutoWah(50, 6, -30).toDestination();\n * // initialize the synth and connect to autowah\n * const synth = new Synth().connect(autoWah);\n * // Q value influences the effect of the wah - default is 2\n * autoWah.Q.value = 6;\n * // more audible on higher notes\n * synth.triggerAttackRelease(\"C4\", \"8n\");\n * @category Effect\n */\nexport class AutoWah extends Effect<AutoWahOptions> {\n\n\treadonly name: string = \"AutoWah\";\n\t\n\t/**\n\t * The envelope follower. Set the attack/release\n\t * timing to adjust how the envelope is followed.\n\t */\n\tprivate _follower: Follower;\n\n\t/**\n\t * scales the follower value to the frequency domain\n\t */\n\tprivate _sweepRange: ScaleExp;\n\n\t/**\n\t * Hold the base frequency value\n\t */\n\tprivate _baseFrequency: Hertz;\n\n\t/**\n\t * Private holder for the octave count\n\t */\n\tprivate _octaves: Positive;\n\n\t/**\n\t * the input gain to adjust the sensitivity\n\t */\n\tprivate _inputBoost: Gain;\n\n\t/**\n\t * Private holder for the filter\n\t */\n\tprivate _bandpass: Filter;\n\n\t/**\n\t * The peaking fitler\n\t */\n\tprivate _peaking: Filter;\n\n\t/**\n\t * The gain of the filter.\n\t */\n\treadonly gain: Signal<\"decibels\">;\n\n\t/**\n\t * The quality of the filter.\n\t */\n\treadonly Q: Signal<\"positive\">;\n\n\t/**\n\t * @param baseFrequency The frequency the filter is set to at the low point of the wah\n\t * @param octaves The number of octaves above the baseFrequency the filter will sweep to when fully open. \n\t * @param sensitivity The decibel threshold sensitivity for the incoming signal. Normal range of -40 to 0.\n\t */\n\tconstructor(baseFrequency?: Frequency, octaves?: Positive, sensitivity?: Decibels);\n\tconstructor(options?: Partial<AutoWahOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(AutoWah.getDefaults(), arguments, [\"baseFrequency\", \"octaves\", \"sensitivity\"]));\n\t\tconst options = optionsFromArguments(AutoWah.getDefaults(), arguments, [\"baseFrequency\", \"octaves\", \"sensitivity\"]);\n\n\t\tthis._follower = new Follower({\n\t\t\tcontext: this.context,\n\t\t\tsmoothing: options.follower,\n\t\t});\n\t\tthis._sweepRange = new ScaleExp({\n\t\t\tcontext: this.context,\n\t\t\tmin: 0,\n\t\t\tmax: 1,\n\t\t\texponent: 0.5,\n\t\t});\n\t\tthis._baseFrequency = this.toFrequency(options.baseFrequency);\n\t\tthis._octaves = options.octaves;\n\t\tthis._inputBoost = new Gain({ context: this.context });\n\t\tthis._bandpass = new Filter({\n\t\t\tcontext: this.context,\n\t\t\trolloff: -48,\n\t\t\tfrequency: 0,\n\t\t\tQ: options.Q,\n\t\t});\n\t\tthis._peaking = new Filter({\n\t\t\tcontext: this.context,\n\t\t\ttype: \"peaking\"\n\t\t});\n\t\tthis._peaking.gain.value = options.gain;\n\t\tthis.gain = this._peaking.gain;\n\t\tthis.Q = this._bandpass.Q;\n\n\t\t// the control signal path\n\t\tthis.effectSend.chain(this._inputBoost, this._follower, this._sweepRange);\n\t\tthis._sweepRange.connect(this._bandpass.frequency);\n\t\tthis._sweepRange.connect(this._peaking.frequency);\n\t\t// the filtered path\n\t\tthis.effectSend.chain(this._bandpass, this._peaking, this.effectReturn);\n\t\t// set the initial value\n\t\tthis._setSweepRange();\n\t\tthis.sensitivity = options.sensitivity;\n\n\t\treadOnly(this, [\"gain\", \"Q\"]);\n\t}\n\n\tstatic getDefaults(): AutoWahOptions {\n\t\treturn Object.assign(Effect.getDefaults(), {\n\t\t\tbaseFrequency: 100,\n\t\t\toctaves: 6,\n\t\t\tsensitivity: 0,\n\t\t\tQ: 2,\n\t\t\tgain: 2,\n\t\t\tfollower: 0.2,\n\t\t});\n\t}\n\n\t/**\n\t * The number of octaves that the filter will sweep above the baseFrequency.\n\t */\n\tget octaves() {\n\t\treturn this._octaves;\n\t}\n\tset octaves(octaves) {\n\t\tthis._octaves = octaves;\n\t\tthis._setSweepRange();\n\t}\n\n\t/**\n\t * The follower's smoothing time\n\t */\n\tget follower(): Time {\n\t\treturn this._follower.smoothing;\n\t}\n\tset follower(follower) {\n\t\tthis._follower.smoothing = follower;\n\t}\n\n\t/**\n\t * The base frequency from which the sweep will start from.\n\t */\n\tget baseFrequency(): Frequency {\n\t\treturn this._baseFrequency;\n\t}\n\tset baseFrequency(baseFreq) {\n\t\tthis._baseFrequency = this.toFrequency(baseFreq);\n\t\tthis._setSweepRange();\n\t}\n\n\t/**\n\t * The sensitivity to control how responsive to the input signal the filter is.\n\t */\n\tget sensitivity(): Decibels {\n\t\treturn gainToDb(1 / this._inputBoost.gain.value);\n\t}\n\tset sensitivity(sensitivity) {\n\t\tthis._inputBoost.gain.value = 1 / dbToGain(sensitivity);\n\t}\n\n\t/**\n\t * sets the sweep range of the scaler\n\t */\n\tprivate _setSweepRange() {\n\t\tthis._sweepRange.min = this._baseFrequency;\n\t\tthis._sweepRange.max = Math.min(this._baseFrequency * Math.pow(2, this._octaves), this.context.sampleRate / 2);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._follower.dispose();\n\t\tthis._sweepRange.dispose();\n\t\tthis._bandpass.dispose();\n\t\tthis._peaking.dispose();\n\t\tthis._inputBoost.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioWorklet, ToneAudioWorkletOptions } from \"../core/context/ToneAudioWorklet\";\nimport { Effect, EffectOptions } from \"./Effect\";\nimport { NormalRange, Positive } from \"../core/type/Units\";\nimport { Gain } from \"../core/context/Gain\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { connectSeries } from \"../core/context/ToneAudioNode\";\nimport { Param } from \"../core/context/Param\";\n\nexport interface BitCrusherOptions extends EffectOptions {\n\tbits: Positive;\n}\n\n/**\n * BitCrusher down-samples the incoming signal to a different bit depth.\n * Lowering the bit depth of the signal creates distortion. Read more about BitCrushing\n * on [Wikipedia](https://en.wikipedia.org/wiki/Bitcrusher).\n * @example\n * import { BitCrusher, Synth } from \"tone\";\n * // initialize crusher and route a synth through it\n * const crusher = new BitCrusher(4).toDestination();\n * const synth = new Synth().connect(crusher);\n * synth.triggerAttackRelease(\"C2\", 2);\n * \n * @category Effect\n */\nexport class BitCrusher extends Effect<BitCrusherOptions> {\n\n\treadonly name: string = \"BitCrusher\";\n\n\t/**\n\t * The bit depth of the effect\n\t * @min 1\n\t * @max 16\n\t */\n\treadonly bits: Param<\"positive\">;\n\t\n\t/**\n\t * The node which does the bit crushing effect. Runs in an AudioWorklet when possible.\n\t */\n\tprivate _bitCrusherWorklet: BitCrusherWorklet;\n\t\n\tconstructor(bits?: Positive, frequencyReduction?: NormalRange);\n\tconstructor(options?: Partial<BitCrusherWorkletOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(BitCrusher.getDefaults(), arguments, [\"bits\"]));\n\t\tconst options = optionsFromArguments(BitCrusher.getDefaults(), arguments, [\"bits\"]);\n\t\t\n\t\tthis._bitCrusherWorklet = new BitCrusherWorklet({\n\t\t\tcontext: this.context,\n\t\t\tbits: options.bits,\n\t\t});\n\t\t// connect it up\n\t\tthis.connectEffect(this._bitCrusherWorklet);\n\n\t\tthis.bits = this._bitCrusherWorklet.bits;\n\t}\n\n\tstatic getDefaults(): BitCrusherOptions {\n\t\treturn Object.assign(Effect.getDefaults(), {\n\t\t\tbits: 4,\n\t\t\tfrequencyReduction: 0.5,\n\t\t});\n\t}\n\t\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._bitCrusherWorklet.dispose();\n\t\treturn this;\n\t}\n}\n\ninterface BitCrusherWorkletOptions extends ToneAudioWorkletOptions {\n\tbits: number;\n}\n\n/**\n * Internal class which creates an AudioWorklet to do the bit crushing\n */\nclass BitCrusherWorklet extends ToneAudioWorklet<BitCrusherWorkletOptions> {\n\t\n\treadonly name: string = \"BitCrusherWorklet\";\n\t\n\treadonly input: Gain;\n\treadonly output: Gain;\n\n\treadonly bits: Param<\"positive\">;\n\t\n\tprotected workletOptions: Partial<AudioWorkletNodeOptions> = {\n\t\tnumberOfInputs: 1,\n\t\tnumberOfOutputs: 1,\n\t}\n\t\n\tconstructor(options?: Partial<BitCrusherWorkletOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(BitCrusherWorklet.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(BitCrusherWorklet.getDefaults(), arguments);\n\t\t\n\t\tthis.input = new Gain({ context: this.context });\n\t\tthis.output = new Gain({ context: this.context });\n\n\t\tconst dummyGain = this.context.createGain();\n\n\t\tthis.bits = new Param<\"positive\">({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.bits,\n\t\t\tunits: \"positive\",\n\t\t\tminValue: 1,\n\t\t\tmaxValue: 16,\n\t\t\tparam: dummyGain.gain,\n\t\t\tswappable: true,\n\t\t});\n\t}\n\t\n\tstatic getDefaults(): BitCrusherWorkletOptions {\n\t\treturn Object.assign(ToneAudioWorklet.getDefaults(), {\n\t\t\tbits: 12,\n\t\t});\n\t}\n\t\n\tprotected _audioWorkletName(): string {\n\t\treturn \"bit-crusher\";\n\t}\n\t\n\tprotected _audioWorklet(): string {\n\t\treturn /* javascript */` \n\t\tregisterProcessor(\"${this._audioWorkletName()}\", class extends AudioWorkletProcessor {\n\t\t\tstatic get parameterDescriptors () {\n\t\t\t\treturn [{\n\t\t\t\t\tname: 'bits',\n\t\t\t\t\tdefaultValue: 12,\n\t\t\t\t\tminValue: 1,\n\t\t\t\t\tmaxValue: 16\n\t\t\t\t}];\n\t\t\t}\n\t\t\t\n\t\t\tprocess (inputs, outputs, parameters) {\n\t\t\t\tconst input = inputs[0];\n\t\t\t\tconst output = outputs[0];\n\t\t\t\tif (input && output && input.length === output.length) {\n\t\t\t\t\tconst bits = parameters.bits;\n\t\t\t\t\tfor (let channelNum = 0; channelNum < input.length; channelNum++) {\n\t\t\t\t\t\tconst inputChannel = input[channelNum];\n\t\t\t\t\t\tfor (let index = 0; index < inputChannel.length; index++) {\n\t\t\t\t\t\t\tconst value = inputChannel[index];\n\t\t\t\t\t\t\tconst step = bits.length > 1 ? Math.pow(0.5, bits[index]) : Math.pow(0.5, bits[0]);\n\t\t\t\t\t\t\tconst val = step * Math.floor(value / step + 0.5);\n\t\t\t\t\t\t\toutput[channelNum][index] = val;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\t\t`;\n\t}\n\t\n\tonReady(node: AudioWorkletNode) {\n\t\tconnectSeries(this.input, node, this.output);\n\t\t// @ts-ignore\n\t\tconst bits = node.parameters.get(\"bits\");\n\t\tthis.bits.setParam(bits);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.input.dispose();\n\t\tthis.output.dispose();\n\t\tthis.bits.dispose();\n\t\treturn this;\n\t}\n}\n","import { Effect, EffectOptions } from \"./Effect\";\nimport { Positive } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { WaveShaper } from \"../signal/WaveShaper\";\n\nexport interface ChebyshevOptions extends EffectOptions {\n\torder: Positive;\n\toversample: OverSampleType;\n}\n\n/**\n * Chebyshev is a waveshaper which is good \n * for making different types of distortion sounds.\n * Note that odd orders sound very different from even ones, \n * and order = 1 is no change. \n * Read more at [music.columbia.edu](http://music.columbia.edu/cmc/musicandcomputers/chapter4/04_06.php).\n * @example\n * import { Chebyshev, MonoSynth } from \"tone\";\n * // create a new cheby\n * const cheby = new Chebyshev(50).toDestination();\n * // create a monosynth connected to our cheby\n * const synth = new MonoSynth().connect(cheby);\n * synth.triggerAttackRelease(\"C2\", 0.4);\n * @category Effect\n */\nexport class Chebyshev extends Effect<ChebyshevOptions> {\n\n\treadonly name: string = \"Chebyshev\";\n\n\t/**\n\t * The private waveshaper node\n\t */\n\tprivate _shaper: WaveShaper;\n\n\t/**\n\t * holds onto the order of the filter\n\t */\n\tprivate _order: number;\n\t\n\t/**\n\t * @param order The order of the chebyshev polynomial. Normal range between 1-100. \n\t */\n\tconstructor(order?: Positive);\n\tconstructor(options?: Partial<ChebyshevOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Chebyshev.getDefaults(), arguments, [\"order\"]));\n\t\tconst options = optionsFromArguments(Chebyshev.getDefaults(), arguments, [\"order\"]);\n\n\t\tthis._shaper = new WaveShaper({\n\t\t\tcontext: this.context,\n\t\t\tlength: 4096\n\t\t});\n\t\tthis._order = options.order;\n\n\t\tthis.connectEffect(this._shaper);\n\t\tthis.order = options.order;\n\t\tthis.oversample = options.oversample;\n\t}\n\n\tstatic getDefaults(): ChebyshevOptions {\n\t\treturn Object.assign(Effect.getDefaults(), {\n\t\t\torder: 1,\n\t\t\toversample: \"none\" as \"none\"\n\t\t});\n\t}\n\n\t/**\n\t * get the coefficient for that degree\n\t * @param  x the x value\n\t * @param  degree \n\t * @param  memo memoize the computed value. this speeds up computation greatly. \n\t */\n\tprivate _getCoefficient(x: number, degree: number, memo: Map<number, number>): number {\n\t\tif (memo.has(degree)) {\n\t\t\treturn memo.get(degree) as number;\n\t\t} else if (degree === 0) {\n\t\t\tmemo.set(degree, 0);\n\t\t} else if (degree === 1) {\n\t\t\tmemo.set(degree, x);\n\t\t} else {\n\t\t\tmemo.set(degree, 2 * x * this._getCoefficient(x, degree - 1, memo) - this._getCoefficient(x, degree - 2, memo));\n\t\t}\n\t\treturn memo.get(degree) as number;\n\t}\n\n\t/**\n\t * The order of the Chebyshev polynomial which creates the equation which is applied to the incoming \n\t * signal through a Tone.WaveShaper. The equations are in the form:\n\t * ```\n\t * order 2: 2x^2 + 1\n\t * order 3: 4x^3 + 3x \n\t * ```\n\t * @min 1\n\t * @max 100\n\t */\n\tget order(): Positive {\n\t\treturn this._order;\n\t}\n\tset order(order) {\n\t\tthis._order = order;\n\t\tthis._shaper.setMap((x => {\n\t\t\treturn this._getCoefficient(x, order, new Map());\n\t\t}));\n\t}\n\n\t/**\n\t * The oversampling of the effect. Can either be \"none\", \"2x\" or \"4x\".\n\t */\n\tget oversample(): OverSampleType {\n\t\treturn this._shaper.oversample;\n\t}\n\tset oversample(oversampling) {\n\t\tthis._shaper.oversample = oversampling;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._shaper.dispose();\n\t\treturn this;\n\t}\n}\n","import { EffectOptions } from \"./Effect\";\nimport { OutputNode, ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { connect, connectSeries } from \"../core/Connect\";\nimport { CrossFade } from \"../component/channel/CrossFade\";\nimport { Signal } from \"../signal/Signal\";\nimport { Split } from \"../component/channel/Split\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Merge } from \"../component\";\nimport { readOnly } from \"../core/util/Interface\";\n\nexport type StereoEffectOptions = EffectOptions;\n\n/**\n * Base class for Stereo effects.\n */\nexport class StereoEffect<Options extends StereoEffectOptions> extends ToneAudioNode<Options> {\n\n\treadonly name: string = \"StereoEffect\";\n\n\treadonly input: Gain;\n\treadonly output: CrossFade;\n\n\t/**\n\t * the drywet knob to control the amount of effect\n\t */\n\tprivate _dryWet: CrossFade;\n\t\n\t/**\n\t * The wet control, i.e. how much of the effected\n\t * will pass through to the output.\n\t */\n\treadonly wet: Signal<\"normalRange\">;\n\t\n\t/**\n\t * Split it\n\t */\n\tprotected _split: Split;\n\t\n\t/**\n\t * the stereo effect merger\n\t */\n\tprotected _merge: Merge;\n\n\tconstructor(options: StereoEffectOptions) {\n\n\t\tsuper(options);\n\n\t\tthis.input = new Gain({ context: this.context });\n\t\t// force mono sources to be stereo\n\t\tthis.input.channelCount = 2;\n\t\tthis.input.channelCountMode = \"explicit\";\n\n\t\tthis._dryWet = this.output = new CrossFade({\n\t\t\tcontext: this.context,\n\t\t\tfade: options.wet\n\t\t});\n\t\tthis.wet = this._dryWet.fade;\n\t\tthis._split = new Split({ context: this.context, channels: 2 });\n\t\tthis._merge = new Merge({ context: this.context, channels: 2 });\n\n\t\t// connections\n\t\tthis.input.connect(this._split);\n\t\t// dry wet connections\n\t\tthis.input.connect(this._dryWet.a);\n\t\tthis._merge.connect(this._dryWet.b);\n\t\treadOnly(this, [\"wet\"]);\n\t}\n\t\n\t/**\n\t * Connect the left part of the effect\n\t */\n\tprotected connectEffectLeft(...nodes: OutputNode[]): void{\n\t\tthis._split.connect(nodes[0], 0, 0);\n\t\tconnectSeries(...nodes);\n\t\tconnect(nodes[nodes.length-1], this._merge, 0, 0);\n\t}\n\t\n\t/**\n\t * Connect the right part of the effect\n\t */\n\tprotected connectEffectRight(...nodes: OutputNode[]): void{\n\t\tthis._split.connect(nodes[0], 1, 0);\n\t\tconnectSeries(...nodes);\n\t\tconnect(nodes[nodes.length-1], this._merge, 0, 1);\n\t}\n\n\tstatic getDefaults(): StereoEffectOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\twet: 1,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._dryWet.dispose();\n\t\tthis._split.dispose();\n\t\tthis._merge.dispose();\n\t\treturn this;\n\t}\n}\n","import { StereoEffect, StereoEffectOptions } from \"../effect/StereoEffect\";\nimport { Degrees, Frequency, Milliseconds, NormalRange, Seconds } from \"../core/type/Units\";\nimport { ToneOscillatorType } from \"../source/oscillator/OscillatorInterface\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Delay } from \"../core/context/Delay\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Gain } from \"../core/context/Gain\";\n\nexport interface ChorusOptions extends StereoEffectOptions {\n\tfrequency: Frequency;\n\tdelayTime: Milliseconds;\n\tdepth: NormalRange;\n\ttype: ToneOscillatorType;\n\tspread: Degrees;\t\n}\n\n/**\n * Chorus is a stereo chorus effect composed of\n * a left and right delay with a Tone.LFO applied to the delayTime of each channel.\n * Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna/blob/master/tuna.js).\n * Read more on the chorus effect on [SoundOnSound](http://www.soundonsound.com/sos/jun04/articles/synthsecrets.htm).\n *\n * @example\n * import { Chorus, PolySynth } from \"tone\";\n * const chorus = new Chorus(4, 2.5, 0.5);\n * const synth = new PolySynth().connect(chorus);\n * synth.triggerAttackRelease([\"C3\", \"E3\", \"G3\"], \"8n\");\n * \n * @category Effect\n */\nexport class Chorus extends StereoEffect<ChorusOptions> {\n\n\treadonly name: string = \"Chorus\";\n\n\t/**\n\t * the depth of the chorus\n\t */\n\tprivate _depth: NormalRange;\n\n\t/**\n\t * the delayTime in seconds.\n\t */\n\tprivate _delayTime: Seconds;\n\n\t/**\n\t * the lfo which controls the delayTime\n\t */\n\tprivate _lfoL: LFO\n\n\t/**\n\t * another LFO for the right side with a 180 degree phase diff\n\t */\n\tprivate _lfoR: LFO\n\n\t/**\n\t * delay for left\n\t */\n\tprivate _delayNodeL: Delay;\n\n\t/**\n\t * delay for right\n\t */\n\tprivate _delayNodeR: Delay;\n\n\t/**\n\t * The frequency of the LFO which modulates the delayTime.\n\t */\n\treadonly frequency: Signal<\"frequency\">\n\n\t/**\n\t * Pass the left signal through\n\t */\n\tprivate _passThroughL: Gain;\n\n\t/**\n\t * Pass the right signal through\n\t */\n\tprivate _passThroughR: Gain;\n\n\t/**\n\t * @param frequency The frequency of the LFO.\n\t * @param delayTime The delay of the chorus effect in ms.\n\t * @param depth The depth of the chorus.\n\t */\n\tconstructor(frequency?: Frequency, delayTime?: Milliseconds, depth?: NormalRange);\n\tconstructor(options?: Partial<ChorusOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Chorus.getDefaults(), arguments, [\"order\"]));\n\t\tconst options = optionsFromArguments(Chorus.getDefaults(), arguments, [\"order\"]);\n\n\t\tthis._depth = options.depth;\n\t\tthis._delayTime = options.delayTime / 1000;\n\t\tthis._lfoL = new LFO({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.frequency,\n\t\t\tmin: 0,\n\t\t\tmax: 1,\n\t\t});\n\t\tthis._lfoR = new LFO({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.frequency,\n\t\t\tmin: 0,\n\t\t\tmax: 1,\n\t\t\tphase: 180\n\t\t});\n\t\tthis._delayNodeL = new Delay({ context: this.context });\n\t\tthis._delayNodeR = new Delay({ context: this.context });\n\t\tthis._passThroughL = new Gain({ context: this.context });\n\t\tthis._passThroughR = new Gain({ context: this.context });\n\t\tthis.frequency = this._lfoL.frequency;\n\t\treadOnly(this, [\"frequency\"]);\n\t\t// have one LFO frequency control the other\n\t\tthis._lfoL.frequency.connect(this._lfoR.frequency);\n\n\t\t// connections\n\t\tthis.connectEffectLeft(this._delayNodeL);\n\t\tthis.connectEffectRight(this._delayNodeR);\n\t\t// and pass through to make the detune apparent\n\t\tthis.connectEffectLeft(this._passThroughL);\n\t\tthis.connectEffectRight(this._passThroughR);\n\t\t// lfo setup\n\t\tthis._lfoL.connect(this._delayNodeL.delayTime);\n\t\tthis._lfoR.connect(this._delayNodeR.delayTime);\n\t\t// start the lfo\n\t\tthis._lfoL.start();\n\t\tthis._lfoR.start();\n\t\t// set the initial values\n\t\tthis.depth = this._depth;\n\t\tthis.type = options.type;\n\t\tthis.spread = options.spread;\n\t}\n\n\tstatic getDefaults(): ChorusOptions {\n\t\treturn Object.assign(StereoEffect.getDefaults(), {\n\t\t\tfrequency: 1.5,\n\t\t\tdelayTime: 3.5,\n\t\t\tdepth: 0.7,\n\t\t\ttype: \"sine\" as \"sine\",\n\t\t\tspread: 180\n\t\t});\n\t}\n\n\t/**\n\t * The depth of the effect. A depth of 1 makes the delayTime\n\t * modulate between 0 and 2*delayTime (centered around the delayTime).\n\t */\n\tget depth(): NormalRange {\n\t\treturn this._depth;\n\t}\n\tset depth(depth) {\n\t\tthis._depth = depth;\n\t\tlet deviation = this._delayTime * depth;\n\t\tthis._lfoL.min = Math.max(this._delayTime - deviation, 0);\n\t\tthis._lfoL.max = this._delayTime + deviation;\n\t\tthis._lfoR.min = Math.max(this._delayTime - deviation, 0);\n\t\tthis._lfoR.max = this._delayTime + deviation;\n\t}\n\n\t/**\n\t * The delayTime in milliseconds of the chorus. A larger delayTime\n\t * will give a more pronounced effect. Nominal range a delayTime\n\t * is between 2 and 20ms.\n\t */\n\tget delayTime(): Milliseconds {\n\t\treturn this._delayTime * 1000;\n\t}\n\tset delayTime(delayTime) {\n\t\tthis._delayTime = delayTime / 1000;\n\t\tthis.depth = this._depth;\n\t}\n\n\t/**\n\t * The oscillator type of the LFO.\n\t */\n\tget type(): ToneOscillatorType {\n\t\treturn this._lfoL.type;\n\t}\n\tset type(type) {\n\t\tthis._lfoL.type = type;\n\t\tthis._lfoR.type = type;\n\t}\n\n\t/**\n\t * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.\n\t * When set to 180, LFO's will be panned hard left and right respectively.\n\t */\n\tget spread(): Degrees {\n\t\treturn this._lfoR.phase - this._lfoL.phase;\n\t}\n\tset spread(spread) {\n\t\tthis._lfoL.phase = 90 - (spread/2);\n\t\tthis._lfoR.phase = (spread/2) + 90;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._lfoL.dispose();\n\t\tthis._lfoR.dispose();\n\t\tthis._delayNodeL.dispose();\n\t\tthis._delayNodeR.dispose();\n\t\tthis._passThroughL.dispose();\n\t\tthis._passThroughR.dispose();\n\t\tthis.frequency.dispose();\n\t\treturn this;\n\t}\n}\n","import { optionsFromArguments } from \"../core/util/Defaults\";\nimport { WaveShaper } from \"../signal/WaveShaper\";\nimport { Effect, EffectOptions } from \"./Effect\";\n\nexport interface DistortionOptions extends EffectOptions {\n\tdistortion: number;\n\toversample: OverSampleType;\n}\n\n/**\n * A simple distortion effect using Tone.WaveShaper.\n * Algorithm from [this stackoverflow answer](http://stackoverflow.com/a/22313408).\n *\n * @example\n * import { Distortion, FMSynth } from \"tone\";\n * const dist = new Distortion(0.8).toDestination();\n * const fm = new FMSynth().connect(dist);\n * fm.triggerAttackRelease(\"A1\", \"8n\");\n * @category Effect\n */\nexport class Distortion extends Effect<DistortionOptions> {\n\n\treadonly name: string = \"Distortion\";\n\n\t/**\n\t * The waveshaper which does the distortion\n\t */\n\tprivate _shaper: WaveShaper;\n\n\t/**\n\t * Stores the distortion value\n\t */\n\tprivate _distortion: number;\n\n\t/**\n\t * @param distortion The amount of distortion (nominal range of 0-1)\n\t */\n\tconstructor(distortion?: number);\n\tconstructor(options?: Partial<DistortionOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Distortion.getDefaults(), arguments, [\"distortion\"]));\n\t\tconst options = optionsFromArguments(Distortion.getDefaults(), arguments, [\"distortion\"]);\n\n\t\tthis._shaper = new WaveShaper({\n\t\t\tcontext: this.context,\n\t\t\tlength: 4096,\n\t\t});\n\n\t\tthis._distortion = options.distortion;\n\n\t\tthis.connectEffect(this._shaper);\n\t\tthis.distortion = options.distortion;\n\t\tthis.oversample = options.oversample;\n\t}\n\n\tstatic getDefaults(): DistortionOptions {\n\t\treturn Object.assign(Effect.getDefaults(), {\n\t\t\tdistortion: 0.4,\n\t\t\toversample: \"none\" as OverSampleType,\n\t\t});\n\t}\n\n\t/**\n\t * The amount of distortion. Nominal range is between 0 and 1.\n\t */\n\tget distortion(): number {\n\t\treturn this._distortion;\n\t}\n\tset distortion(amount) {\n\t\tthis._distortion = amount;\n\t\tconst k = amount * 100;\n\t\tconst deg = Math.PI / 180;\n\t\tthis._shaper.setMap((x) => {\n\t\t\tif (Math.abs(x) < 0.001) {\n\t\t\t\t// should output 0 when input is 0\n\t\t\t\treturn 0;\n\t\t\t} else {\n\t\t\t\treturn (3 + k) * x * 20 * deg / (Math.PI + k * Math.abs(x));\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * The oversampling of the effect. Can either be \"none\", \"2x\" or \"4x\".\n\t */\n\tget oversample(): OverSampleType {\n\t\treturn this._shaper.oversample;\n\t}\n\tset oversample(oversampling) {\n\t\tthis._shaper.oversample = oversampling;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._shaper.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../core/context/Gain\";\nimport { Param } from \"../core/context/Param\";\nimport { NormalRange } from \"../core/type/Units\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Effect, EffectOptions } from \"./Effect\";\n\nexport interface FeedbackEffectOptions extends EffectOptions {\n\t/**\n\t * The feedback from the output back to the input\n\t * ```\n\t * +---<--------<---+\n\t * |                |\n\t * |  +----------+  |\n\t * +--> feedback +>-+\n\t *    +----------+\n\t * ```\n\t */\n\tfeedback: NormalRange;\n}\n\n/**\n * FeedbackEffect provides a loop between an audio source and its own output.\n * This is a base-class for feedback effects.\n */\nexport abstract class FeedbackEffect<Options extends FeedbackEffectOptions> extends Effect<Options> {\n\n\treadonly name: string = \"FeedbackEffect\";\n\n\t/**\n\t * the gain which controls the feedback\n\t */\n\tprivate _feedbackGain: Gain<\"normalRange\">;\n\n\t/**\n\t * The amount of signal which is fed back into the effect input.\n\t */\n\tfeedback: Param<\"normalRange\">;\n\n\tconstructor(options: FeedbackEffectOptions) {\n\n\t\tsuper(options);\n\n\t\tthis._feedbackGain = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: options.feedback,\n\t\t\tunits: \"normalRange\",\n\t\t});\n\n\t\tthis.feedback = this._feedbackGain.gain;\n\t\treadOnly(this, \"feedback\");\n\n\t\t// the feedback loop\n\t\tthis.effectReturn.chain(this._feedbackGain, this.effectSend);\n\t}\n\n\tstatic getDefaults(): FeedbackEffectOptions {\n\t\treturn Object.assign(Effect.getDefaults(), {\n\t\t\tfeedback: 0.125,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._feedbackGain.dispose();\n\t\tthis.feedback.dispose();\n\t\treturn this;\n\t}\n}\n","import { Delay } from \"../core/context/Delay\";\nimport { Param } from \"../core/context/Param\";\nimport { NormalRange, Time } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { FeedbackEffect, FeedbackEffectOptions } from \"./FeedbackEffect\";\n\ninterface FeedbackDelayOptions extends FeedbackEffectOptions {\n\tdelayTime: Time;\n\tmaxDelay: Time;\n}\n\n/**\n * FeedbackDelay is a DelayNode in which part of output signal is fed back into the delay.\n *\n * @param delayTime The delay applied to the incoming signal.\n * @param feedback The amount of the effected signal which is fed back through the delay.\n * @example\n * import { FeedbackDelay, MembraneSynth } from \"tone\";\n * const feedbackDelay = new FeedbackDelay(\"8n\", 0.5).toDestination();\n * const tom = new MembraneSynth({\n * \toctaves: 4,\n * \tpitchDecay: 0.1\n * }).connect(feedbackDelay);\n * tom.triggerAttackRelease(\"A2\", \"32n\");\n * @category Effect\n */\nexport class FeedbackDelay extends FeedbackEffect<FeedbackDelayOptions> {\n\n\treadonly name: string = \"FeedbackDelay\";\n\n\t/**\n\t * the delay node\n\t */\n\tprivate _delayNode: Delay;\n\n\t/**\n\t * The delayTime of the FeedbackDelay.\n\t */\n\treadonly delayTime: Param<\"time\">;\n\n\tconstructor(delayTime?: Time, feedback?: NormalRange);\n\tconstructor(options?: Partial<FeedbackDelayOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(FeedbackDelay.getDefaults(), arguments, [\"delayTime\", \"feedback\"]));\n\t\tconst options = optionsFromArguments(FeedbackDelay.getDefaults(), arguments, [\"delayTime\", \"feedback\"]);\n\n\t\tthis._delayNode = new Delay({\n\t\t\tcontext: this.context,\n\t\t\tdelayTime: options.delayTime,\n\t\t\tmaxDelay: options.maxDelay,\n\t\t});\n\t\tthis.delayTime = this._delayNode.delayTime;\n\n\t\t// connect it up\n\t\tthis.connectEffect(this._delayNode);\n\t\treadOnly(this, \"delayTime\");\n\t}\n\n\tstatic getDefaults(): FeedbackDelayOptions {\n\t\treturn Object.assign(FeedbackEffect.getDefaults(), {\n\t\t\tdelayTime: 0.25,\n\t\t\tmaxDelay: 1,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._delayNode.dispose();\n\t\tthis.delayTime.dispose();\n\t\treturn this;\n\t}\n}\n","import { connectSeries } from \"../../core/Connect\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\n\n/**\n * PhaseShiftAllpass is an very efficient implementation of a Hilbert Transform\n * using two Allpass filter banks whose outputs have a phase difference of 90°.\n * Here the `offset90` phase is offset by +90° in relation to `output`.\n * Coefficients and structure was developed by Olli Niemitalo.\n * For more details see: http://yehar.com/blog/?p=368\n * @category Component\n */\nexport class PhaseShiftAllpass extends ToneAudioNode<ToneAudioNodeOptions> {\n\n\treadonly name: string = \"PhaseShiftAllpass\";\n\n\treadonly input = new Gain({ context: this.context });\n\n\t/**\n\t * The Allpass filter in the first bank\n\t */\n\tprivate _bank0: IIRFilterNode[];\n\n\t/**\n\t * The Allpass filter in the seconds bank\n\t */\n\tprivate _bank1: IIRFilterNode[];\n\n\t/**\n\t * A IIR filter implementing a delay by one sample used by the first bank\n\t */\n\tprivate _oneSampleDelay: IIRFilterNode;\n\n\t/**\n\t * The phase shifted output\n\t */\n\treadonly output = new Gain({ context: this.context });\n\n\t/**\n\t * The PhaseShifted allpass output\n\t */\n\treadonly offset90 = new Gain({ context: this.context });\n\n\tconstructor(options?: Partial<ToneAudioNodeOptions>) {\n\n\t\tsuper(options);\n\n\t\tconst allpassBank1Values = [0.6923878, 0.9360654322959, 0.9882295226860, 0.9987488452737];\n\t\tconst allpassBank2Values = [0.4021921162426, 0.8561710882420, 0.9722909545651, 0.9952884791278];\n\n\t\tthis._bank0 = this._createAllPassFilterBank(allpassBank1Values);\n\t\tthis._bank1 = this._createAllPassFilterBank(allpassBank2Values);\n\t\tthis._oneSampleDelay = this.context.createIIRFilter([0.0, 1.0], [1.0, 0.0]);\n\n\t\t// connect Allpass filter banks\n\t\tconnectSeries(this.input, ...this._bank0, this._oneSampleDelay, this.output);\n\t\tconnectSeries(this.input, ...this._bank1, this.offset90);\n\t}\n\n\t/**\n\t * Create all of the IIR filters from an array of values using the coefficient calculation.\n\t */\n\tprivate _createAllPassFilterBank(bankValues: number[]): IIRFilterNode[] {\n\t\tconst nodes: IIRFilterNode[] = bankValues.map(value => {\n\t\t\tconst coefficients = [[value * value, 0, -1], [1, 0, -(value * value)]];\n\t\t\treturn this.context.createIIRFilter(coefficients[0], coefficients[1]);\n\t\t});\n\n\t\treturn nodes;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.input.dispose();\n\t\tthis.output.dispose();\n\t\tthis.offset90.dispose();\n\t\tthis._bank0.forEach(f => f.disconnect());\n\t\tthis._bank1.forEach(f => f.disconnect());\n\t\tthis._oneSampleDelay.disconnect();\n\t\treturn this;\n\t}\n}\n","import { PhaseShiftAllpass } from \"../component/filter/PhaseShiftAllpass\";\nimport { Frequency } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Effect, EffectOptions } from \"../effect/Effect\";\nimport { Add } from \"../signal/Add\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Negate } from \"../signal/Negate\";\nimport { Signal } from \"../signal/Signal\";\nimport { Oscillator } from \"../source/oscillator/Oscillator\";\nimport { ToneOscillatorNode } from \"../source/oscillator/ToneOscillatorNode\";\n\ninterface FrequencyShifterOptions extends EffectOptions {\n\tfrequency: Frequency;\n}\n\n/**\n * FrequencyShifter can be used to shift all frequencies of a signal by a fixed amount.\n * The amount can be changed at audio rate and the effect is applied in real time.\n * The frequency shifting is implemented with a technique called single side band modulation using a ring modulator.\n * Note: Contrary to pitch shifting, all frequencies are shifted by the same amount,\n * destroying the harmonic relationship between them. This leads to the classic ring modulator timbre distortion.\n * The algorithm will produces some aliasing towards the high end, especially if your source material\n * contains a lot of high frequencies. Unfortunatelly the webaudio API does not support resampling\n * buffers in real time, so it is not possible to fix it properly. Depending on the use case it might\n * be an option to low pass filter your input before frequency shifting it to get ride of the aliasing.\n * You can find a very detailed description of the algorithm here: https://larzeitlin.github.io/RMFS/\n *\n * @example\n * import { FrequencyShifter, Oscillator } from \"tone\";\n * const input = new Oscillator(230, \"sawtooth\").start();\n * const shift = new FrequencyShifter(42).toDestination();\n * input.connect(shift);\n * @category Effect\n */\nexport class FrequencyShifter extends Effect<FrequencyShifterOptions> {\n\n\treadonly name: string = \"FrequencyShifter\";\n\n\t/**\n\t * The ring modulators carrier frequency. This frequency determines\n\t * by how many Hertz the input signal will be shifted up or down. Default is 0.\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * The ring modulators sine carrier\n\t */\n\tprivate _sine: ToneOscillatorNode;\n\n\t/**\n\t * The ring modulators cosine carrier\n\t */\n\tprivate _cosine: Oscillator;\n\n\t/**\n\t * The sine multiply operator\n\t */\n\tprivate _sineMultiply: Multiply;\n\n\t/**\n\t * The cosine multiply operator\n\t */\n\tprivate _cosineMultiply: Multiply;\n\n\t/**\n\t * The negate operator\n\t */\n\tprivate _negate: Negate;\n\n\t/**\n\t * The final add operator\n\t */\n\tprivate _add: Add;\n\n\t/**\n\t * The phase shifter to create the initial 90° phase offset\n\t */\n\tprivate _phaseShifter: PhaseShiftAllpass;\n\n\t/**\n\t * @param frequency The incoming signal is shifted by this frequency value.\n\t */\n\tconstructor(frequency?: Frequency);\n\tconstructor(options?: Partial<FrequencyShifterOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(FrequencyShifter.getDefaults(), arguments, [\"frequency\"]));\n\t\tconst options = optionsFromArguments(FrequencyShifter.getDefaults(), arguments, [\"frequency\"]);\n\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t});\n\n\t\tthis._sine = new ToneOscillatorNode({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.frequency,\n\t\t\ttype: \"sine\",\n\t\t});\n\n\t\tthis._cosine = new Oscillator({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.frequency,\n\t\t\tphase: -90,\n\t\t\ttype: \"sine\",\n\t\t});\n\n\t\tthis._sineMultiply = new Multiply({ context: this.context });\n\t\tthis._cosineMultiply = new Multiply({ context: this.context });\n\t\tthis._negate = new Negate({ context: this.context });\n\t\tthis._add = new Add({ context: this.context });\n\n\t\tthis._phaseShifter = new PhaseShiftAllpass({ context: this.context });\n\t\tthis.effectSend.connect(this._phaseShifter);\n\n\t\t// connect the carrier frequency signal to the two oscillators\n\t\tthis.frequency.fan(this._sine.frequency, this._cosine.frequency);\n\n\t\tthis._phaseShifter.offset90.connect(this._cosineMultiply);\n\t\tthis._cosine.connect(this._cosineMultiply.factor);\n\n\t\tthis._phaseShifter.connect(this._sineMultiply);\n\t\tthis._sine.connect(this._sineMultiply.factor);\n\t\tthis._sineMultiply.connect(this._negate);\n\n\t\tthis._cosineMultiply.connect(this._add);\n\t\tthis._negate.connect(this._add.addend);\n\n\t\tthis._add.connect(this.effectReturn);\n\n\t\t// start the oscillators at the same time\n\t\tconst now = this.immediate();\n\t\tthis._sine.start(now);\n\t\tthis._cosine.start(now);\n\t}\n\n\tstatic getDefaults(): FrequencyShifterOptions {\n\t\treturn Object.assign(Effect.getDefaults(), {\n\t\t\tfrequency: 0,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis._add.dispose();\n\t\tthis._cosine.dispose();\n\t\tthis._cosineMultiply.dispose();\n\t\tthis._negate.dispose();\n\t\tthis._phaseShifter.dispose();\n\t\tthis._sine.dispose();\n\t\tthis._sineMultiply.dispose();\n\t\treturn this;\n\t}\n}\n","import { StereoEffect, StereoEffectOptions } from \"./StereoEffect\";\nimport { Frequency, NormalRange } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Signal } from \"../signal/Signal\";\nimport { LowpassCombFilter } from \"../component/filter/LowpassCombFilter\";\n\nexport interface FreeverbOptions extends StereoEffectOptions {\n\tdampening: Frequency;\n\troomSize: NormalRange;\n}\n\n/**\n * An array of comb filter delay values from Freeverb implementation\n */\nconst combFilterTunings = [1557 / 44100, 1617 / 44100, 1491 / 44100, 1422 / 44100, 1277 / 44100, 1356 / 44100, 1188 / 44100, 1116 / 44100];\n\n/**\n * An array of allpass filter frequency values from Freeverb implementation\n */\nconst allpassFilterFrequencies = [225, 556, 441, 341];\n\n/**\n * Freeverb is a reverb based on [Freeverb](https://ccrma.stanford.edu/~jos/pasp/Freeverb.html).\n * Read more on reverb on [Sound On Sound](https://web.archive.org/web/20160404083902/http://www.soundonsound.com:80/sos/feb01/articles/synthsecrets.asp).\n * @example\n * import { Freeverb, NoiseSynth } from \"tone\";\n * const freeverb = new Freeverb().toDestination();\n * freeverb.dampening = 1000;\n * // routing synth through the reverb\n * const synth = new NoiseSynth().connect(freeverb);\n * synth.triggerAttackRelease(0.05);\n * @category Effect\n */\nexport class Freeverb extends StereoEffect<FreeverbOptions> {\n\n\treadonly name: string = \"Freeverb\";\n\n\t/**\n\t * The roomSize value between 0 and 1. A larger roomSize will result in a longer decay.\n\t */\n\treadonly roomSize: Signal<\"normalRange\">;\n\n\t/**\n\t * the comb filters\n\t */\n\tprivate _combFilters: LowpassCombFilter[] = [];\n\n\t/**\n\t * the allpass filters on the left\n\t */\n\tprivate _allpassFiltersL: BiquadFilterNode[] = [];\n\n\t/**\n\t * the allpass filters on the right\n\t */\n\tprivate _allpassFiltersR: BiquadFilterNode[]= [];\n\n\t/**\n\t * @param roomSize Correlated to the decay time.\n\t * @param dampening The cutoff frequency of a lowpass filter as part of the reverb.\n\t */\n\tconstructor(roomSize?: NormalRange, dampening?: Frequency);\n\tconstructor(options?: Partial<FreeverbOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Freeverb.getDefaults(), arguments, [\"roomSize\", \"dampening\"]));\n\t\tconst options = optionsFromArguments(Freeverb.getDefaults(), arguments, [\"roomSize\", \"dampening\"]);\n\t\n\t\tthis.roomSize = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.roomSize,\n\t\t\tunits: \"normalRange\",\n\t\t});\n\n\t\t// make the allpass filters on the right\n\t\tthis._allpassFiltersL = allpassFilterFrequencies.map(freq => {\n\t\t\tconst allpassL = this.context.createBiquadFilter();\n\t\t\tallpassL.type = \"allpass\";\n\t\t\tallpassL.frequency.value = freq;\n\t\t\treturn allpassL;\n\t\t});\n\t\t\n\t\t// make the allpass filters on the left\n\t\tthis._allpassFiltersR = allpassFilterFrequencies.map(freq => {\n\t\t\tconst allpassR = this.context.createBiquadFilter();\n\t\t\tallpassR.type = \"allpass\";\n\t\t\tallpassR.frequency.value = freq;\n\t\t\treturn allpassR;\n\t\t});\n\n\t\t// make the comb filters\n\t\tthis._combFilters = combFilterTunings.map((delayTime, index) => {\n\t\t\tconst lfpf = new LowpassCombFilter({\n\t\t\t\tcontext: this.context,\n\t\t\t\tdampening: options.dampening,\n\t\t\t\tdelayTime,\n\t\t\t});\n\t\t\tif (index < combFilterTunings.length / 2) {\n\t\t\t\tthis.connectEffectLeft(lfpf, ...this._allpassFiltersL);\n\t\t\t} else {\n\t\t\t\tthis.connectEffectRight(lfpf, ...this._allpassFiltersR);\n\t\t\t}\n\t\t\tthis.roomSize.connect(lfpf.resonance);\n\t\t\treturn lfpf;\n\t\t});\n\n\t\treadOnly(this, [\"roomSize\"]);\n\t}\n\n\tstatic getDefaults(): FreeverbOptions {\n\t\treturn Object.assign(StereoEffect.getDefaults(), {\n\t\t\troomSize: 0.7,\n\t\t\tdampening: 3000\n\t\t});\n\t}\n\n\t/**\n\t * The amount of dampening of the reverberant signal.\n\t */\n\t\n\tget dampening(): Frequency {\n\t\treturn this._combFilters[0].dampening;\n\t}\n\tset dampening(d) {\n\t\tthis._combFilters.forEach(c => c.dampening = d);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tfor (let al = 0; al < this._allpassFiltersL.length; al++) {\n\t\t\tthis._allpassFiltersL[al].disconnect();\n\t\t}\n\t\tfor (let ar = 0; ar < this._allpassFiltersR.length; ar++) {\n\t\t\tthis._allpassFiltersR[ar].disconnect();\n\t\t}\n\t\tfor (let cf = 0; cf < this._combFilters.length; cf++) {\n\t\t\tthis._combFilters[cf].dispose();\n\t\t}\n\t\tthis.roomSize.dispose();\n\t\treturn this;\n\t}\n}\n","import { NormalRange } from \"../core/type/Units\";\nimport { StereoEffect, StereoEffectOptions } from \"./StereoEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Scale } from \"../signal/Scale\";\nimport { Signal } from \"../signal/Signal\";\nimport { FeedbackCombFilter } from \"../component/filter/FeedbackCombFilter\";\nimport { readOnly } from \"../core/util/Interface\";\n\nexport interface JCReverbOptions extends StereoEffectOptions {\n\troomSize: NormalRange;\n}\n\n/**\n * an array of the comb filter delay time values\n */\nconst combFilterDelayTimes = [1687 / 25000, 1601 / 25000, 2053 / 25000, 2251 / 25000];\n\n/**\n * the resonances of each of the comb filters\n */\nconst combFilterResonances = [0.773, 0.802, 0.753, 0.733];\n\n/**\n * the allpass filter frequencies\n */\nconst allpassFilterFreqs = [347, 113, 37];\n\n/**\n * JCReverb is a simple [Schroeder Reverberator](https://ccrma.stanford.edu/~jos/pasp/Schroeder_Reverberators.html)\n * tuned by John Chowning in 1970.\n * It is made up of three allpass filters and four [[FeedbackCombFilter]].\n *\n * @example\n * import { DuoSynth, FeedbackDelay, JCReverb } from \"tone\";\n * const reverb = new JCReverb(0.4).toDestination();\n * const delay = new FeedbackDelay(0.5);\n * // connecting the synth to reverb through delay\n * const synth = new DuoSynth().chain(delay, reverb);\n * synth.triggerAttackRelease(\"A4\", \"8n\");\n * \n * @category Effect\n */\nexport class JCReverb extends StereoEffect<JCReverbOptions> {\n\n\treadonly name: string = \"JCReverb\";\n\t\n\t/**\n\t * Room size control values. \n\t */\n\treadonly roomSize: Signal<\"normalRange\">\n\n\t/**\n\t * Scale the room size\n\t */\n\tprivate _scaleRoomSize: Scale;\n\n\t/**\n\t * a series of allpass filters\n\t */\n\tprivate _allpassFilters: BiquadFilterNode[] = [];\n\n\t/**\n\t * parallel feedback comb filters\n\t */\n\tprivate _feedbackCombFilters: FeedbackCombFilter[] = [];\n\n\t/**\n\t * @param roomSize Correlated to the decay time.\n\t */\n\tconstructor(roomSize?: NormalRange);\n\tconstructor(options?: Partial<JCReverbOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(JCReverb.getDefaults(), arguments, [\"roomSize\"]));\n\t\tconst options = optionsFromArguments(JCReverb.getDefaults(), arguments, [\"roomSize\"]);\n\n\t\tthis.roomSize = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.roomSize,\n\t\t\tunits: \"normalRange\",\n\t\t});\n\t\tthis._scaleRoomSize = new Scale({\n\t\t\tcontext: this.context,\n\t\t\tmin: -0.733, \n\t\t\tmax: 0.197,\n\t\t});\n\n\t\t// make the allpass filters\n\t\tthis._allpassFilters = allpassFilterFreqs.map(freq => {\n\t\t\tconst allpass = this.context.createBiquadFilter();\n\t\t\tallpass.type = \"allpass\";\n\t\t\tallpass.frequency.value = freq;\n\t\t\treturn allpass;\n\t\t});\n\t\t\n\t\t// and the comb filters\n\t\tthis._feedbackCombFilters = combFilterDelayTimes.map((delayTime, index) => {\n\t\t\tconst fbcf = new FeedbackCombFilter({\n\t\t\t\tcontext: this.context,\n\t\t\t\tdelayTime, \n\t\t\t});\n\t\t\tthis._scaleRoomSize.connect(fbcf.resonance);\n\t\t\tfbcf.resonance.value = combFilterResonances[index];\n\t\t\tif (index < combFilterDelayTimes.length / 2) {\n\t\t\t\tthis.connectEffectLeft(...this._allpassFilters, fbcf);\n\t\t\t} else {\n\t\t\t\tthis.connectEffectRight(...this._allpassFilters, fbcf);\n\t\t\t}\n\t\t\treturn fbcf;\n\t\t});\n\n\t\t// chain the allpass filters together\n\t\tthis.roomSize.connect(this._scaleRoomSize);\n\t\treadOnly(this, [\"roomSize\"]);\n\t}\n\n\tstatic getDefaults(): JCReverbOptions {\n\t\treturn Object.assign(StereoEffect.getDefaults(), {\n\t\t\troomSize: 0.5,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._allpassFilters.forEach(apf => apf.disconnect());\n\t\tthis._feedbackCombFilters.forEach(fbcf => fbcf.dispose());\n\t\tthis.roomSize.dispose();\n\t\tthis._scaleRoomSize.dispose();\n\t\treturn this;\n\t}\n}\n","import { StereoEffect, StereoEffectOptions } from \"./StereoEffect\";\nimport { NormalRange } from \"../core/type/Units\";\nimport { Signal } from \"../signal/Signal\";\nimport { Gain } from \"../core/context/Gain\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Split } from \"../component/channel/Split\";\nimport { Merge } from \"../component/channel/Merge\";\n\nexport interface StereoFeedbackEffectOptions extends StereoEffectOptions {\n\tfeedback: NormalRange;\n}\n\n/**\n * Just like a stereo feedback effect, but the feedback is routed from left to right\n * and right to left instead of on the same channel.\n * ```\n * +--------------------------------+ feedbackL <-----------------------------------+\n * |                                                                                |\n * +-->                          +----->        +---->                          +---+\n *      feedbackMerge +--> split        (EFFECT)       merge +--> feedbackSplit\n * +-->                          +----->        +---->                          +---+\n * |                                                                                |\n * +--------------------------------+ feedbackR <-----------------------------------+\n * ```\n */\nexport class StereoFeedbackEffect<Options extends StereoFeedbackEffectOptions> extends StereoEffect<Options> {\n\t\n\t/**\n\t * The amount of feedback from the output\n\t * back into the input of the effect (routed\n\t * across left and right channels).\n\t */\n\treadonly feedback: Signal<\"normalRange\">;\n\n\t/**\n\t * the left side feedback\n\t */\n\tprotected _feedbackL: Gain;\n\n\t/**\n\t * the right side feedback\n\t */\n\tprotected _feedbackR: Gain;\n\n\t/**\n\t * Split the channels for feedback\n\t */\n\tprotected _feedbackSplit: Split;\n\n\t/**\n\t * Merge the channels for feedback\n\t */\n\tprotected _feedbackMerge: Merge;\n\n\tconstructor(options: StereoFeedbackEffectOptions) {\n\n\t\tsuper(options);\n\n\t\tthis.feedback = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.feedback, \n\t\t\tunits: \"normalRange\"\n\t\t});\n\t\tthis._feedbackL = new Gain({ context: this.context });\n\t\tthis._feedbackR = new Gain({ context: this.context });\n\n\t\tthis._feedbackSplit = new Split({ context: this.context, channels: 2 });\n\t\tthis._feedbackMerge = new Merge({ context: this.context, channels: 2 });\n\n\t\tthis._merge.connect(this._feedbackSplit);\n\t\tthis._feedbackMerge.connect(this._split);\n\t\t\n\t\t// the left output connected to the right input\n\t\tthis._feedbackSplit.connect(this._feedbackL, 0, 0);\n\t\tthis._feedbackL.connect(this._feedbackMerge, 0, 0);\n\n\t\t// the left output connected to the right input\n\t\tthis._feedbackSplit.connect(this._feedbackR, 1, 0);\n\t\tthis._feedbackR.connect(this._feedbackMerge, 0, 1);\n\t\t\n\t\t// the feedback control\n\t\tthis.feedback.fan(this._feedbackL.gain, this._feedbackR.gain);\n\t\treadOnly(this, [\"feedback\"]);\n\t}\n\n\tstatic getDefaults(): StereoFeedbackEffectOptions {\n\t\treturn Object.assign(StereoEffect.getDefaults(), {\n\t\t\tfeedback: 0.5,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.feedback.dispose();\n\t\tthis._feedbackL.dispose();\n\t\tthis._feedbackR.dispose();\n\t\tthis._feedbackSplit.dispose();\n\t\tthis._feedbackMerge.dispose();\n\t\treturn this;\n\t}\n}\n","import { StereoFeedbackEffect, StereoFeedbackEffectOptions } from \"./StereoFeedbackEffect\";\nimport { NormalRange } from \"../core/type/Units\";\nimport { readOnly } from \"../core/util/Interface\";\n\nexport interface StereoXFeedbackEffectOptions extends StereoFeedbackEffectOptions {\n\tfeedback: NormalRange;\n}\n\n/**\n * Just like a [[StereoFeedbackEffect]], but the feedback is routed from left to right\n * and right to left instead of on the same channel.\n * ```\n * +--------------------------------+ feedbackL <-----------------------------------+\n * |                                                                                |\n * +-->                          +----->        +---->                          +-----+\n *      feedbackMerge +--> split        (EFFECT)       merge +--> feedbackSplit     | |\n * +-->                          +----->        +---->                          +---+ |\n * |                                                                                  |\n * +--------------------------------+ feedbackR <-------------------------------------+\n * ```\n */\nexport class StereoXFeedbackEffect<Options extends StereoXFeedbackEffectOptions> extends StereoFeedbackEffect<Options> {\n\t\n\tconstructor(options: StereoXFeedbackEffectOptions) {\n\n\t\tsuper(options);\n\t\t// the left output connected to the right input\n\t\tthis._feedbackL.disconnect();\n\t\tthis._feedbackL.connect(this._feedbackMerge, 0, 1);\n\n\t\t// the left output connected to the right input\n\t\tthis._feedbackR.disconnect();\n\t\tthis._feedbackR.connect(this._feedbackMerge, 0, 0);\n\t\t\n\t\treadOnly(this, [\"feedback\"]);\n\t}\n}\n","import { StereoXFeedbackEffect, StereoXFeedbackEffectOptions } from \"./StereoXFeedbackEffect\";\nimport { NormalRange, Seconds, Time } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Delay } from \"../core/context/Delay\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\n\nexport interface PingPongDelayOptions extends StereoXFeedbackEffectOptions {\n\tdelayTime: Time;\n\tmaxDelay: Seconds;\n}\n\n/**\n * PingPongDelay is a feedback delay effect where the echo is heard\n * first in one channel and next in the opposite channel. In a stereo\n * system these are the right and left channels.\n * PingPongDelay in more simplified terms is two Tone.FeedbackDelays\n * with independent delay values. Each delay is routed to one channel\n * (left or right), and the channel triggered second will always\n * trigger at the same interval after the first.\n * @example\n * import { MembraneSynth, PingPongDelay } from \"tone\";\n * const pingPong = new PingPongDelay(\"4n\", 0.2).toDestination();\n * const drum = new MembraneSynth().connect(pingPong);\n * drum.triggerAttackRelease(\"C4\", \"32n\");\n * @category Effect\n */\nexport class PingPongDelay extends StereoXFeedbackEffect<PingPongDelayOptions> {\n\n\treadonly name: string = \"PingPongDelay\";\n\t\n\t/**\n\t * the delay node on the left side\n\t */\n\tprivate _leftDelay: Delay;\n\n\t/**\n\t * the delay node on the right side\n\t */\n\tprivate _rightDelay: Delay;\n\n\t/**\n\t * the predelay on the right side\n\t */\n\tprivate _rightPreDelay: Delay;\n\n\t/**\n\t * the delay time signal\n\t */\n\treadonly delayTime: Signal<\"time\">;\n\t\n\t/**\n\t * @param delayTime The delayTime between consecutive echos.\n\t * @param feedback The amount of the effected signal which is fed back through the delay.\n\t */\n\tconstructor(delayTime?: Time, feedback?: NormalRange);\n\tconstructor(options?: Partial<PingPongDelayOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(PingPongDelay.getDefaults(), arguments, [\"delayTime\", \"feedback\"]));\n\t\tconst options = optionsFromArguments(PingPongDelay.getDefaults(), arguments, [\"delayTime\", \"feedback\"]);\n\n\t\tthis._leftDelay = new Delay({\n\t\t\tcontext: this.context,\n\t\t\tmaxDelay: options.maxDelay,\n\t\t});\n\t\tthis._rightDelay = new Delay({\n\t\t\tcontext: this.context,\n\t\t\tmaxDelay: options.maxDelay\n\t\t});\n\t\tthis._rightPreDelay = new Delay({\n\t\t\tcontext: this.context,\n\t\t\tmaxDelay: options.maxDelay\n\t\t});\n\t\tthis.delayTime = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"time\",\n\t\t\tvalue: options.delayTime,\n\t\t});\n\n\t\t// connect it up\n\t\tthis.connectEffectLeft(this._leftDelay);\n\t\tthis.connectEffectRight(this._rightPreDelay, this._rightDelay);\n\t\tthis.delayTime.fan(this._leftDelay.delayTime, this._rightDelay.delayTime, this._rightPreDelay.delayTime);\n\t\t// rearranged the feedback to be after the rightPreDelay\n\t\tthis._feedbackL.disconnect();\n\t\tthis._feedbackL.connect(this._rightDelay);\n\t\treadOnly(this, [\"delayTime\"]);\n\t}\n\n\tstatic getDefaults(): PingPongDelayOptions {\n\t\treturn Object.assign(StereoXFeedbackEffect.getDefaults(), {\n\t\t\tdelayTime: 0.25,\n\t\t\tmaxDelay: 1\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._leftDelay.dispose();\n\t\tthis._rightDelay.dispose();\n\t\tthis._rightPreDelay.dispose();\n\t\tthis.delayTime.dispose();\n\t\treturn this;\n\t}\n}\n","import { Interval, Seconds, Time } from \"../core/type/Units\";\nimport { FeedbackEffect, FeedbackEffectOptions } from \"./FeedbackEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Delay } from \"../core/context/Delay\";\nimport { CrossFade } from \"../component/channel/CrossFade\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Param } from \"../core/context/Param\";\nimport { intervalToFrequencyRatio } from \"../core/type/Conversions\";\n\nexport interface PitchShiftOptions extends FeedbackEffectOptions {\n\tpitch: Interval;\n\twindowSize: Seconds;\n\tdelayTime: Time;\n}\n\n/**\n * PitchShift does near-realtime pitch shifting to the incoming signal.\n * The effect is achieved by speeding up or slowing down the delayTime\n * of a DelayNode using a sawtooth wave.\n * Algorithm found in [this pdf](http://dsp-book.narod.ru/soundproc.pdf).\n * Additional reference by [Miller Pucket](http://msp.ucsd.edu/techniques/v0.11/book-html/node115.html).\n * @category Effect\n */\nexport class PitchShift extends FeedbackEffect<PitchShiftOptions> {\n\n\treadonly name: string = \"PitchShift\";\n\t\n\t/**\n\t * The pitch signal\n\t */\n\tprivate _frequency: Signal<\"frequency\">;\n\n\t/**\n\t * Uses two DelayNodes to cover up the jump in the sawtooth wave.\n\t */\n\tprivate _delayA: Delay;\n\n\t/**\n\t * The first LFO.\n\t */\n\tprivate _lfoA: LFO;\n\n\t/**\n\t * The second DelayNode\n\t */\n\tprivate _delayB: Delay;\n\n\t/**\n\t * The second LFO.\n\t */\n\tprivate _lfoB: LFO;\n\n\t/**\n\t * Cross fade quickly between the two delay lines to cover up the jump in the sawtooth wave\n\t */\n\tprivate _crossFade: CrossFade;\n\n\t/**\n\t * LFO which alternates between the two delay lines to cover up the disparity in the\n\t * sawtooth wave.\n\t */\n\tprivate _crossFadeLFO: LFO;\n\n\t/**\n\t * The delay node\n\t */\n\tprivate _feedbackDelay: Delay;\n\n\t/**\n\t * The amount of delay on the input signal\n\t */\n\treadonly delayTime: Param<\"time\">;\n\n\t/**\n\t * Hold the current pitch\n\t */\n\tprivate _pitch: Interval;\n\n\t/**\n\t * Hold the current windowSize\n\t */\n\tprivate _windowSize;\n\n\t/**\n\t * @param pitch The interval to transpose the incoming signal by.\n\t */\n\tconstructor(pitch?: Interval);\n\tconstructor(options?: Partial<PitchShiftOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(PitchShift.getDefaults(), arguments, [\"pitch\"]));\n\t\tconst options = optionsFromArguments(PitchShift.getDefaults(), arguments, [\"pitch\"]);\n\n\t\tthis._frequency = new Signal({ context: this.context });\n\t\tthis._delayA = new Delay({\n\t\t\tmaxDelay: 1,\n\t\t\tcontext: this.context\n\t\t});\n\t\tthis._lfoA = new LFO({\n\t\t\tcontext: this.context,\n\t\t\tmin: 0,\n\t\t\tmax: 0.1,\n\t\t\ttype: \"sawtooth\"\n\t\t}).connect(this._delayA.delayTime);\n\t\tthis._delayB = new Delay({\n\t\t\tmaxDelay: 1,\n\t\t\tcontext: this.context\n\t\t});\n\t\tthis._lfoB = new LFO({\n\t\t\tcontext: this.context,\n\t\t\tmin: 0,\n\t\t\tmax: 0.1,\n\t\t\ttype: \"sawtooth\",\n\t\t\tphase: 180\n\t\t}).connect(this._delayB.delayTime);\n\t\tthis._crossFade = new CrossFade({ context: this.context });\n\t\tthis._crossFadeLFO = new LFO({\n\t\t\tcontext: this.context,\n\t\t\tmin: 0,\n\t\t\tmax: 1,\n\t\t\ttype: \"triangle\",\n\t\t\tphase: 90\n\t\t}).connect(this._crossFade.fade);\n\t\tthis._feedbackDelay = new Delay({\n\t\t\tdelayTime: options.delayTime,\n\t\t\tcontext: this.context,\n\t\t});\n\t\tthis.delayTime = this._feedbackDelay.delayTime;\n\t\treadOnly(this, \"delayTime\");\n\t\tthis._pitch = options.pitch;\n\n\t\tthis._windowSize = options.windowSize;\n\n\t\t// connect the two delay lines up\n\t\tthis._delayA.connect(this._crossFade.a);\n\t\tthis._delayB.connect(this._crossFade.b);\n\t\t// connect the frequency\n\t\tthis._frequency.fan(this._lfoA.frequency, this._lfoB.frequency, this._crossFadeLFO.frequency);\n\t\t// route the input\n\t\tthis.effectSend.fan(this._delayA, this._delayB);\n\t\tthis._crossFade.chain(this._feedbackDelay, this.effectReturn);\n\t\t// start the LFOs at the same time\n\t\tconst now = this.now();\n\t\tthis._lfoA.start(now);\n\t\tthis._lfoB.start(now);\n\t\tthis._crossFadeLFO.start(now);\n\t\t// set the initial value\n\t\tthis.windowSize = this._windowSize;\n\t}\n\n\tstatic getDefaults(): PitchShiftOptions {\n\t\treturn Object.assign(FeedbackEffect.getDefaults(), {\n\t\t\tpitch: 0,\n\t\t\twindowSize: 0.1,\n\t\t\tdelayTime: 0,\n\t\t\tfeedback: 0\n\t\t});\n\t}\n\n\t/**\n\t * Repitch the incoming signal by some interval (measured in semi-tones).\n\t * @example\n\t * import { PitchShift } from \"tone\";\n\t * const pitchShift = new PitchShift().toDestination();\n\t * const osc = new Oscillator().connect(pitchShift).start().toDestination();\n\t * pitchShift.pitch = -12; // down one octave\n\t * pitchShift.pitch = 7; // up a fifth\n\t */\n\tget pitch() {\n\t\treturn this._pitch;\n\t}\n\tset pitch(interval) {\n\t\tthis._pitch = interval;\n\t\tlet factor = 0;\n\t\tif (interval < 0) {\n\t\t\tthis._lfoA.min = 0;\n\t\t\tthis._lfoA.max = this._windowSize;\n\t\t\tthis._lfoB.min = 0;\n\t\t\tthis._lfoB.max = this._windowSize;\n\t\t\tfactor = intervalToFrequencyRatio(interval - 1) + 1;\n\t\t} else {\n\t\t\tthis._lfoA.min = this._windowSize;\n\t\t\tthis._lfoA.max = 0;\n\t\t\tthis._lfoB.min = this._windowSize;\n\t\t\tthis._lfoB.max = 0;\n\t\t\tfactor = intervalToFrequencyRatio(interval) - 1;\n\t\t}\n\t\tthis._frequency.value = factor * (1.2 / this._windowSize);\n\t}\n\n\t/**\n\t * The window size corresponds roughly to the sample length in a looping sampler.\n\t * Smaller values are desirable for a less noticeable delay time of the pitch shifted\n\t * signal, but larger values will result in smoother pitch shifting for larger intervals.\n\t * A nominal range of 0.03 to 0.1 is recommended.\n\t */\n\tget windowSize() {\n\t\treturn this._windowSize;\n\t}\n\tset windowSize(size) {\n\t\tthis._windowSize = this.toSeconds(size);\n\t\tthis.pitch = this._pitch;\n\t}\n\n\tdispose(): this{\n\t\tsuper.dispose();\n\t\tthis._frequency.dispose();\n\t\tthis._delayA.dispose();\n\t\tthis._delayB.dispose();\n\t\tthis._lfoA.dispose();\n\t\tthis._lfoB.dispose();\n\t\tthis._crossFade.dispose();\n\t\tthis._crossFadeLFO.dispose();\n\t\tthis._feedbackDelay.dispose();\n\t\treturn this;\n\t}\n}\n","import { StereoEffect, StereoEffectOptions } from \"./StereoEffect\";\nimport { Frequency, Hertz, Positive } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\n\nexport interface PhaserOptions extends StereoEffectOptions {\n\tfrequency: Frequency;\n\toctaves: Positive;\n\tstages: Positive;\n\tQ: Positive;\n\tbaseFrequency: Frequency;\t\n}\n\n/**\n * Phaser is a phaser effect. Phasers work by changing the phase\n * of different frequency components of an incoming signal. Read more on\n * [Wikipedia](https://en.wikipedia.org/wiki/Phaser_(effect)).\n * Inspiration for this phaser comes from [Tuna.js](https://github.com/Dinahmoe/tuna/).\n * @example\n * import { FMSynth, Phaser } from \"tone\";\n * const phaser = new Phaser({\n * \tfrequency: 15,\n * \toctaves: 5,\n * \tbaseFrequency: 1000\n * }).toDestination();\n * const synth = new FMSynth().connect(phaser);\n * synth.triggerAttackRelease(\"E3\", \"2n\");\n * @category Effect\n */\nexport class Phaser extends StereoEffect<PhaserOptions> {\n\n\treadonly name: string = \"Phaser\";\n\n\t/**\n\t * the lfo which controls the frequency on the left side\n\t */\n\tprivate _lfoL: LFO;\n\n\t/**\n\t * the lfo which controls the frequency on the right side\n\t */\n\tprivate _lfoR: LFO;\n\n\t/**\n\t * the base modulation frequency\n\t */\n\tprivate _baseFrequency: Hertz;\n\n\t/**\n\t * the octaves of the phasing\n\t */\n\tprivate _octaves: Positive;\n\n\t/**\n\t * The quality factor of the filters\n\t */\n\treadonly Q: Signal<\"positive\">;\n\n\t/**\n\t * the array of filters for the left side\n\t */\n\tprivate _filtersL: BiquadFilterNode[];\n\n\t/**\n\t * the array of filters for the left side\n\t */\n\tprivate _filtersR: BiquadFilterNode[];\n\n\t/**\n\t * the frequency of the effect\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * @param frequency The speed of the phasing.\n\t * @param octaves The octaves of the effect.\n\t * @param baseFrequency The base frequency of the filters.\n\t */\n\tconstructor(frequency?: Frequency, octaves?: Positive, baseFrequency?: Frequency);\n\tconstructor(options?: Partial<PhaserOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Phaser.getDefaults(), arguments, [\"frequency\", \"octaves\", \"baseFrequency\"]));\n\t\tconst options = optionsFromArguments(Phaser.getDefaults(), arguments, [\"frequency\", \"octaves\", \"baseFrequency\"]);\n\n\t\tthis._lfoL = new LFO({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.frequency, \n\t\t\tmin: 0,\n\t\t\tmax: 1\n\t\t});\n\t\tthis._lfoR = new LFO({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.frequency, \n\t\t\tmin: 0,\n\t\t\tmax: 1,\n\t\t\tphase: 180,\n\t\t});\n\t\tthis._baseFrequency = this.toFrequency(options.baseFrequency);\n\t\tthis._octaves = options.octaves;\n\t\tthis.Q = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.Q,\n\t\t\tunits: \"positive\",\n\t\t});\n\t\tthis._filtersL = this._makeFilters(options.stages, this._lfoL);\n\t\tthis._filtersR = this._makeFilters(options.stages, this._lfoR);\n\n\t\tthis.frequency = this._lfoL.frequency;\n\t\tthis.frequency.value = options.frequency;\n\n\t\t// connect them up\n\t\tthis.connectEffectLeft(...this._filtersL);\n\t\tthis.connectEffectRight(...this._filtersR);\n\t\t// control the frequency with one LFO\n\t\tthis._lfoL.frequency.connect(this._lfoR.frequency);\n\t\t// set the options\n\t\tthis.baseFrequency = options.baseFrequency;\n\t\tthis.octaves = options.octaves;\n\t\t// start the lfo\n\t\tthis._lfoL.start();\n\t\tthis._lfoR.start();\n\t\treadOnly(this, [\"frequency\", \"Q\"]);\n\t}\n\n\tstatic getDefaults(): PhaserOptions {\n\t\treturn Object.assign(StereoEffect.getDefaults(), {\n\t\t\tfrequency: 0.5,\n\t\t\toctaves: 3,\n\t\t\tstages: 10,\n\t\t\tQ: 10,\n\t\t\tbaseFrequency: 350,\n\t\t});\n\t}\n\n\tprivate _makeFilters(stages: number, connectToFreq: LFO): BiquadFilterNode[] {\n\t\tconst filters: BiquadFilterNode[] = [];\n\t\t// make all the filters\n\t\tfor (let i = 0; i < stages; i++) {\n\t\t\tlet filter = this.context.createBiquadFilter();\n\t\t\tfilter.type = \"allpass\";\n\t\t\tthis.Q.connect(filter.Q);\n\t\t\tconnectToFreq.connect(filter.frequency);\n\t\t\tfilters.push(filter);\n\t\t}\n\t\treturn filters;\n\t}\n\n\t/**\n\t * The number of octaves the phase goes above the baseFrequency\n\t */\n\tget octaves() {\n\t\treturn this._octaves;\n\t}\n\tset octaves(octaves) {\n\t\tthis._octaves = octaves;\n\t\tlet max = this._baseFrequency * Math.pow(2, octaves);\n\t\tthis._lfoL.max = max;\n\t\tthis._lfoR.max = max;\n\t}\n\n\t/**\n\t * The the base frequency of the filters.\n\t */\n\tget baseFrequency(): Frequency {\n\t\treturn this._baseFrequency;\n\t}\n\tset baseFrequency(freq) {\n\t\tthis._baseFrequency = this.toFrequency(freq);\n\t\tthis._lfoL.min = this._baseFrequency;\n\t\tthis._lfoR.min = this._baseFrequency;\n\t\tthis.octaves = this._octaves;\n\t}\n\t\n\tdispose(): this{\n\t\tsuper.dispose();\n\t\tthis.Q.dispose();\n\t\tthis._lfoL.dispose();\n\t\tthis._lfoR.dispose();\n\t\tthis._filtersL.forEach(f => f.disconnect());\n\t\tthis._filtersR.forEach(f => f.disconnect());\n\t\tthis.frequency.dispose();\n\t\treturn this;\n\t}\n}\n\n","import { Merge } from \"../component/channel/Merge\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Offline } from \"../core/context/Offline\";\nimport { Seconds } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Noise } from \"../source/Noise\";\nimport { Effect, EffectOptions } from \"./Effect\";\n\ninterface ReverbOptions extends EffectOptions {\n\tdecay: Seconds;\n\tpreDelay: Seconds;\n}\n\n/**\n * Simple convolution created with decaying noise.\n * Generates an Impulse Response Buffer\n * with Tone.Offline then feeds the IR into ConvolverNode.\n * Note: the Reverb will not make any sound until [[generate]]\n * has been invoked and resolved.\n *\n * Inspiration from [ReverbGen](https://github.com/adelespinasse/reverbGen).\n * Copyright (c) 2014 Alan deLespinasse Apache 2.0 License.\n * \n * @category Effect\n */\nexport class Reverb extends Effect<ReverbOptions> {\n\n\treadonly name: string = \"Reverb\";\n\n\t/**\n\t * Convolver node\n\t */\n\tprivate _convolver: ConvolverNode = this.context.createConvolver();\n\n\t/**\n\t * The duration of the reverb.\n\t * [[generate]] must be called in order to update the values.\n\t */\n\tdecay: Seconds;\n\t\n\t/**\n\t * The amount of time before the reverb is fully ramped in.\n\t * [[generate]] must be called in order to update the values.\n\t */\n\tpreDelay: Seconds;\n\n\t/**\n\t * @param decay The amount of time it will reverberate for.\n\t */\n\tconstructor(decay?: Seconds);\n\tconstructor(options?: Partial<ReverbOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Reverb.getDefaults(), arguments, [\"decay\"]));\n\t\tconst options = optionsFromArguments(Reverb.getDefaults(), arguments, [\"decay\"]);\n\n\t\tthis.decay = options.decay;\n\t\tthis.preDelay = options.preDelay;\n\n\t\tthis.connectEffect(this._convolver);\n\t}\n\n\tstatic getDefaults(): ReverbOptions {\n\t\treturn Object.assign(Effect.getDefaults(), {\n\t\t\tdecay: 1.5,\n\t\t\tpreDelay: 0.01,\n\t\t});\n\t}\n\n\t/**\n\t * Generate the Impulse Response. Returns a promise while the IR is being generated.\n\t * @return Promise which returns this object.\n\t */\n\tasync generate(): Promise<this> {\n\t\tconst buffer = await Offline((context) => {\n\t\t\t// create a noise burst which decays over the duration\n\t\t\tconst noiseL = new Noise({ context });\n\t\t\tconst noiseR = new Noise({ context });\n\t\t\tconst merge = new Merge({ context });\n\t\t\tnoiseL.connect(merge, 0, 0);\n\t\t\tnoiseR.connect(merge, 0, 1);\n\t\t\tconst gainNode = new Gain({ context }).toDestination();\n\t\t\tmerge.connect(gainNode);\n\t\t\tnoiseL.start(0);\n\t\t\tnoiseR.start(0);\n\t\t\t// predelay\n\t\t\tgainNode.gain.setValueAtTime(0, 0);\n\t\t\tgainNode.gain.setValueAtTime(1, this.preDelay);\n\t\t\t// decay\n\t\t\tgainNode.gain.exponentialApproachValueAtTime(0, this.preDelay, this.decay);\n\t\t}, this.decay + this.preDelay);\n\t\tthis._convolver.buffer = buffer.get() as AudioBuffer;\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._convolver.disconnect();\n\t\treturn this;\n\t}\n}\n","import { Effect, EffectOptions } from \"./Effect\";\nimport { MidSideSplit } from \"../component/channel/MidSideSplit\";\nimport { MidSideMerge } from \"../component/channel/MidSideMerge\";\nimport { OutputNode, ToneAudioNode } from \"../core/context/ToneAudioNode\";\n\nexport type MidSideEffectOptions = EffectOptions;\n\n/**\n * Mid/Side processing separates the the 'mid' signal\n * (which comes out of both the left and the right channel)\n * and the 'side' (which only comes out of the the side channels)\n * and effects them separately before being recombined.\n * Applies a Mid/Side seperation and recombination.\n * Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).\n * This is a base-class for Mid/Side Effects.\n */\nexport abstract class MidSideEffect<Options extends MidSideEffectOptions> extends Effect<Options> {\n\n\treadonly name: string = \"MidSideEffect\";\n\n\t/**\n\t * The mid/side split\n\t */\n\tprivate _midSideSplit: MidSideSplit;\n\t\n\t/**\n\t * The mid/side merge\n\t */\n\tprivate _midSideMerge: MidSideMerge;\n\t\n\t/**\n\t * The mid send. Connect to mid processing\n\t */\n\tprotected _midSend: ToneAudioNode;\n\t\n\t/**\n\t * The side send. Connect to side processing\n\t */\n\tprotected _sideSend: ToneAudioNode;\n\t\n\t/**\n\t * The mid return connection\n\t */\n\tprotected _midReturn: ToneAudioNode;\n\t\n\t/**\n\t * The side return connection\n\t */\n\tprotected _sideReturn: ToneAudioNode;\n\n\tconstructor(options: MidSideEffectOptions) {\n\n\t\tsuper(options);\n\n\t\tthis._midSideMerge = new MidSideMerge({ context: this.context });\n\t\tthis._midSideSplit = new MidSideSplit({ context: this.context });\n\t\tthis._midSend = this._midSideSplit.mid;\n\t\tthis._sideSend = this._midSideSplit.side;\n\t\tthis._midReturn = this._midSideMerge.mid;\n\t\tthis._sideReturn = this._midSideMerge.side;\n\n\t\t// the connections\n\t\tthis.effectSend.connect(this._midSideSplit);\n\t\tthis._midSideMerge.connect(this.effectReturn);\n\t}\n\n\t/**\n\t * Connect the mid chain of the effect\n\t */\n\tprotected connectEffectMid(...nodes: OutputNode[]): void{\n\t\tthis._midSend.chain(...nodes, this._midReturn);\n\t}\n\t\n\t/**\n\t * Connect the side chain of the effect\n\t */\n\tprotected connectEffectSide(...nodes: OutputNode[]): void{\n\t\tthis._sideSend.chain(...nodes, this._sideReturn);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._midSideSplit.dispose();\n\t\tthis._midSideMerge.dispose();\n\t\tthis._midSend.dispose();\n\t\tthis._sideSend.dispose();\n\t\tthis._midReturn.dispose();\n\t\tthis._sideReturn.dispose();\n\t\treturn this;\n\t}\n}\n\n","import { MidSideEffect, MidSideEffectOptions } from \"../effect/MidSideEffect\";\nimport { Signal } from \"../signal/Signal\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Subtract } from \"../signal/Subtract\";\nimport { NormalRange } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { connect } from \"../core/context/ToneAudioNode\";\n\nexport interface StereoWidenerOptions extends MidSideEffectOptions {\n\twidth: NormalRange;\n}\n\n/**\n * Applies a width factor to the mid/side seperation.\n * 0 is all mid and 1 is all side.\n * Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).\n * ```\n * Mid *= 2*(1-width)<br>\n * Side *= 2*width\n * ```\n * @category Effect\n */\nexport class StereoWidener extends MidSideEffect<StereoWidenerOptions> {\n\n\treadonly name: string = \"StereoWidener\";\n\n\t/**\n\t * The width control. 0 = 100% mid. 1 = 100% side. 0.5 = no change.\n\t */\n\treadonly width: Signal<\"normalRange\">;\n\t\n\t/**\n\t * Two times the (1-width) for the mid channel\n\t */\n\tprivate _twoTimesWidthMid: Multiply;\n\t\n\t/**\n\t * Two times the width for the side channel\n\t */\n\tprivate _twoTimesWidthSide: Multiply;\n\t\n\t/**\n\t * Mid multiplier\n\t */\n\tprivate _midMult: Multiply;\n\t\n\t/**\n\t * 1 - width\n\t */\n\tprivate _oneMinusWidth: Subtract;\n\t\n\t/**\n\t * Side multiplier\n\t */\n\tprivate _sideMult: Multiply;\n\n\t/**\n\t * @param width The stereo width. A width of 0 is mono and 1 is stereo. 0.5 is no change.\n\t */\n\tconstructor(width?: NormalRange);\n\tconstructor(options?: Partial<StereoWidenerOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(StereoWidener.getDefaults(), arguments, [\"width\"]));\n\t\tconst options = optionsFromArguments(StereoWidener.getDefaults(), arguments, [\"width\"]);\n\t\tthis.width = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.width,\n\t\t\tunits: \"normalRange\",\n\t\t});\n\t\treadOnly(this, [\"width\"]);\n\t\tthis._twoTimesWidthMid = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tvalue: 2,\n\t\t});\n\t\tthis._twoTimesWidthSide = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tvalue: 2,\n\t\t});\n\t\tthis._midMult = new Multiply({ context: this.context });\n\t\tthis._twoTimesWidthMid.connect(this._midMult.factor);\n\t\tthis.connectEffectMid(this._midMult);\n\n\t\tthis._oneMinusWidth = new Subtract({ context: this.context });\n\t\tthis._oneMinusWidth.connect(this._twoTimesWidthMid);\n\t\tconnect(this.context.getConstant(1), this._oneMinusWidth);\n\t\tthis.width.connect(this._oneMinusWidth.subtrahend);\n\n\t\tthis._sideMult = new Multiply({ context: this.context });\n\t\tthis.width.connect(this._twoTimesWidthSide);\n\t\tthis._twoTimesWidthSide.connect(this._sideMult.factor);\n\t\tthis.connectEffectMid(this._sideMult);\n\t}\n\n\tstatic getDefaults(): StereoWidenerOptions {\n\t\treturn Object.assign(MidSideEffect.getDefaults(), {\n\t\t\twidth: 0.5,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.width.dispose();\n\t\tthis._midMult.dispose();\n\t\tthis._sideMult.dispose();\n\t\tthis._twoTimesWidthMid.dispose();\n\t\tthis._twoTimesWidthSide.dispose();\n\t\tthis._oneMinusWidth.dispose();\n\t\treturn this;\n\t}\n}\n","import { StereoEffect, StereoEffectOptions } from \"./StereoEffect\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Signal } from \"../signal/Signal\";\nimport { Degrees, Frequency, NormalRange, Time } from \"../core/type/Units\";\nimport { ToneOscillatorType } from \"../source/oscillator/OscillatorInterface\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\n\nexport interface TremoloOptions extends StereoEffectOptions {\n\tfrequency: Frequency;\n\ttype: ToneOscillatorType;\n\tdepth: NormalRange;\n\tspread: Degrees;\n}\n\n/**\n * Tremolo modulates the amplitude of an incoming signal using an [[LFO]].\n * The effect is a stereo effect where the modulation phase is inverted in each channel.\n *\n * @example\n * import { Oscillator, Tremolo } from \"tone\";\n * // create a tremolo and start it's LFO\n * const tremolo = new Tremolo(9, 0.75).toMaster().start();\n * // route an oscillator through the tremolo and start it\n * const oscillator = new Oscillator().connect(tremolo).start();\n * \n * @category Effect\n */\nexport class Tremolo extends StereoEffect<TremoloOptions> {\n\n\treadonly name: string = \"Tremolo\";\n\t\n\t/**\n\t * The tremolo LFO in the left channel\n\t */\n\tprivate _lfoL: LFO;\n\t\n\t/**\n\t * The tremolo LFO in the left channel\n\t */\n\tprivate _lfoR: LFO;\n\n\t/**\n\t * Where the gain is multiplied\n\t */\n\tprivate _amplitudeL: Gain;\n\n\t/**\n\t * Where the gain is multiplied\n\t */\n\tprivate _amplitudeR: Gain;\n\n\t/**\n\t * The frequency of the tremolo.\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * The depth of the effect. A depth of 0, has no effect\n\t * on the amplitude, and a depth of 1 makes the amplitude\n\t * modulate fully between 0 and 1.\n\t */\n\treadonly depth: Signal<\"normalRange\">;\n\n\t/**\n\t * @param frequency The rate of the effect.\n\t * @param depth The depth of the effect.\n\t */\n\tconstructor(frequency?: Frequency, depth?: NormalRange);\n\tconstructor(options?: Partial<TremoloOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Tremolo.getDefaults(), arguments, [\"frequency\", \"depth\"]));\n\t\tconst options = optionsFromArguments(Tremolo.getDefaults(), arguments, [\"frequency\", \"depth\"]);\n\n\t\tthis._lfoL = new LFO({\n\t\t\tcontext: this.context,\n\t\t\ttype: options.type,\n\t\t\tmin: 1,\n\t\t\tmax: 0,\n\t\t});\n\t\tthis._lfoR = new LFO({\n\t\t\tcontext: this.context,\n\t\t\ttype: options.type,\n\t\t\tmin: 1,\n\t\t\tmax: 0,\n\t\t});\n\t\tthis._amplitudeL = new Gain({ context: this.context });\n\t\tthis._amplitudeR = new Gain({ context: this.context });\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.frequency, \n\t\t\tunits: \"frequency\",\n\t\t});\n\t\tthis.depth = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.depth, \n\t\t\tunits: \"normalRange\",\n\t\t});\n\n\t\treadOnly(this, [\"frequency\", \"depth\"]);\n\t\tthis.connectEffectLeft(this._amplitudeL);\n\t\tthis.connectEffectRight(this._amplitudeR);\n\t\tthis._lfoL.connect(this._amplitudeL.gain);\n\t\tthis._lfoR.connect(this._amplitudeR.gain);\n\t\tthis.frequency.fan(this._lfoL.frequency, this._lfoR.frequency);\n\t\tthis.depth.fan(this._lfoR.amplitude, this._lfoL.amplitude);\n\t\tthis.spread = options.spread;\n\t}\n\n\tstatic getDefaults(): TremoloOptions {\n\t\treturn Object.assign(StereoEffect.getDefaults(), {\n\t\t\tfrequency: 10,\n\t\t\ttype: \"sine\" as \"sine\",\n\t\t\tdepth: 0.5,\n\t\t\tspread: 180,\n\t\t});\n\t}\n\n\t/**\n\t * Start the tremolo.\n\t */\n\tstart(time?: Time): this {\n\t\tthis._lfoL.start(time);\n\t\tthis._lfoR.start(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the tremolo.\n\t */\n\tstop(time?: Time): this {\n\t\tthis._lfoL.stop(time);\n\t\tthis._lfoR.stop(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sync the effect to the transport.\n\t */\n\tsync(): this{\n\t\tthis._lfoL.sync();\n\t\tthis._lfoR.sync();\n\t\tthis.context.transport.syncSignal(this.frequency);\n\t\treturn this;\n\t}\n\t\n\t/**\n\t * Unsync the filter from the transport\n\t */\n\tunsync(): this {\n\t\tthis._lfoL.unsync();\n\t\tthis._lfoR.unsync();\n\t\tthis.context.transport.unsyncSignal(this.frequency);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The oscillator type.\n\t */\n\tget type(): ToneOscillatorType {\n\t\treturn this._lfoL.type;\n\t}\n\tset type(type) {\n\t\tthis._lfoL.type = type;\n\t\tthis._lfoR.type = type;\n\t}\n\n\t/**\n\t * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.\n\t * When set to 180, LFO's will be panned hard left and right respectively.\n\t */\n\tget spread(): Degrees {\n\t\treturn this._lfoR.phase - this._lfoL.phase; // 180\n\t}\n\tset spread(spread) {\n\t\tthis._lfoL.phase = 90 - (spread/2);\n\t\tthis._lfoR.phase = (spread/2) + 90;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._lfoL.dispose();\n\t\tthis._lfoR.dispose();\n\t\tthis._amplitudeL.dispose();\n\t\tthis._amplitudeR.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.depth.dispose();\n\t\treturn this;\n\t}\n}\n","import { Effect, EffectOptions } from \"./Effect\";\nimport { ToneOscillatorType } from \"../source/oscillator/OscillatorInterface\";\nimport { Frequency, NormalRange, Seconds } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Delay } from \"../core/context/Delay\";\nimport { Signal } from \"../signal/Signal\";\nimport { Param } from \"../core/context/Param\";\nimport { readOnly } from \"../core/util/Interface\";\n\nexport interface VibratoOptions extends EffectOptions {\n\tmaxDelay: Seconds;\n\tfrequency: Frequency;\n\tdepth: NormalRange;\n\ttype: ToneOscillatorType;\n}\n/**\n * A Vibrato effect composed of a Tone.Delay and a Tone.LFO. The LFO\n * modulates the delayTime of the delay, causing the pitch to rise and fall. \n * @category Effect\n */\nexport class Vibrato extends Effect<VibratoOptions> {\n\n\treadonly name: string = \"Vibrato\";\n\t/**\n\t * The delay node used for the vibrato effect\n\t */\n\tprivate _delayNode: Delay;\n\t\n\t/**\n\t * The LFO used to control the vibrato\n\t */\n\tprivate _lfo: LFO;\n\t\n\t/**\n\t * The frequency of the vibrato\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\t\n\t/**\n\t * The depth of the vibrato. \n\t */\n\treadonly depth: Param<\"normalRange\">;\n\n\t/**\n\t * @param frequency The frequency of the vibrato.\n\t * @param depth The amount the pitch is modulated.\n\t */\n\tconstructor(frequency?: Frequency, depth?: NormalRange);\n\tconstructor(options?: Partial<VibratoOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Vibrato.getDefaults(), arguments, [\"frequency\", \"depth\"]));\n\t\tconst options = optionsFromArguments(Vibrato.getDefaults(), arguments, [\"frequency\", \"depth\"]);\n\n\t\tthis._delayNode = new Delay({\n\t\t\tcontext: this.context,\n\t\t\tdelayTime: 0,\n\t\t\tmaxDelay: options.maxDelay,\n\t\t});\n\t\tthis._lfo = new LFO({\n\t\t\tcontext: this.context,\n\t\t\ttype: options.type,\n\t\t\tmin: 0,\n\t\t\tmax: options.maxDelay, \n\t\t\tfrequency: options.frequency,\n\t\t\tphase: -90 // offse the phase so the resting position is in the center\n\t\t}).start().connect(this._delayNode.delayTime);\n\t\tthis.frequency = this._lfo.frequency;\n\t\tthis.depth = this._lfo.amplitude;\n\n\t\tthis.depth.value = options.depth;\n\t\treadOnly(this, [\"frequency\", \"depth\"]);\n\t\tthis.effectSend.chain(this._delayNode, this.effectReturn);\n\t}\n\n\tstatic getDefaults(): VibratoOptions {\n\t\treturn Object.assign(Effect.getDefaults(), {\n\t\t\tmaxDelay: 0.005,\n\t\t\tfrequency: 5,\n\t\t\tdepth: 0.1,\n\t\t\ttype: \"sine\" as \"sine\"\n\t\t});\n\t}\n\n\t/**\n\t * Type of oscillator attached to the Vibrato.\n\t */\n\tget type(): ToneOscillatorType {\n\t\treturn this._lfo.type;\n\t}\n\tset type(type) {\n\t\tthis._lfo.type = type;\n\t}\n\t\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._delayNode.dispose();\n\t\tthis._lfo.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.depth.dispose();\n\t\treturn this;\n\t}\n}\n","export { getContext, setContext } from \"./core/Global\";\nexport * from \"./classes\";\nexport * from \"./version\";\nimport { getContext } from \"./core/Global\";\nexport { start } from \"./core/Global\";\n\n/**\n * The current audio context time of the global [[Context]]. \n * See [[Context.now]]\n * @Category Core\n */\nexport const now = getContext().now.bind(getContext());\n\n/**\n * The current audio context time of the global [[Context]] without the [[Context.lookAhead]]\n * See [[Context.immediate]]\n * @Category Core\n */\nexport const immediate = getContext().immediate.bind(getContext());\n\n/**\n * The Transport object belonging to the global Tone.js Context.\n * See [[Transport]]\n * @Category Core\n */\nexport const Transport = getContext().transport;\n\n/**\n * The Destination (output) belonging to the global Tone.js Context.\n * See [[Destination]]\n * @Category Core\n */\nexport const Destination = getContext().destination;\n\n/**\n * Draw is used to synchronize the draw frame with the Transport's callbacks. \n * See [[Draw]]\n * @Category Core\n */\nexport const Draw = getContext().draw;\n\n/**\n * A reference to the global context\n * See [[Context]]\n * @Category Core\n */\nexport const context = getContext();\n"],"sourceRoot":""}