{"version":3,"sources":["webpack://Tone/webpack/universalModuleDefinition","webpack://Tone/webpack/bootstrap","webpack://Tone/./Tone/core/Tone.ts","webpack://Tone/./Tone/version.ts","webpack://Tone/./Tone/core/context/AudioContext.ts","webpack://Tone/./Tone/core/clock/Ticker.ts","webpack://Tone/./Tone/core/util/TypeCheck.ts","webpack://Tone/./Tone/core/util/Defaults.ts","webpack://Tone/./Tone/core/util/Emitter.ts","webpack://Tone/./Tone/core/util/Timeline.ts","webpack://Tone/./Tone/core/context/ContextInitialization.ts","webpack://Tone/./Tone/core/context/Context.ts","webpack://Tone/./Tone/core/Global.ts","webpack://Tone/./Tone/core/type/Conversions.ts","webpack://Tone/./Tone/core/type/TimeBase.ts","webpack://Tone/./Tone/core/type/Time.ts","webpack://Tone/./Tone/core/type/Frequency.ts","webpack://Tone/./Tone/core/type/TransportTime.ts","webpack://Tone/./Tone/core/context/ToneWithContext.ts","webpack://Tone/./Tone/core/context/Param.ts","webpack://Tone/./Tone/core/context/ToneAudioNode.ts","webpack://Tone/./Tone/core/util/Interface.ts","webpack://Tone/./Tone/core/context/Gain.ts","webpack://Tone/./Tone/core/context/OfflineContext.ts","webpack://Tone/./Tone/core/context/ToneAudioBuffer.ts","webpack://Tone/./Tone/core/context/Offline.ts","webpack://Tone/./Tone/core/context/ToneAudioBuffers.ts","webpack://Tone/./Tone/core/context/Delay.ts","webpack://Tone/./Tone/core/util/StateTimeline.ts","webpack://Tone/./Tone/core/clock/TickSignal.ts","webpack://Tone/./Tone/core/clock/TickSource.ts","webpack://Tone/./Tone/core/clock/Clock.ts","webpack://Tone/./Tone/core/type/Ticks.ts","webpack://Tone/./Tone/core/type/Midi.ts","webpack://Tone/./Tone/core/util/Draw.ts","webpack://Tone/./Tone/core/util/IntervalTimeline.ts","webpack://Tone/./Tone/component/channel/Volume.ts","webpack://Tone/./Tone/core/context/Destination.ts","webpack://Tone/./Tone/core/clock/TransportEvent.ts","webpack://Tone/./Tone/core/clock/TransportRepeatEvent.ts","webpack://Tone/./Tone/core/clock/Transport.ts","webpack://Tone/./Tone/source/Source.ts","webpack://Tone/./Tone/source/OneShotSource.ts","webpack://Tone/./Tone/source/buffer/BufferSource.ts","webpack://Tone/./Tone/source/Noise.ts","webpack://Tone/./Tone/signal/Signal.ts","webpack://Tone/./Tone/source/oscillator/OscillatorNode.ts","webpack://Tone/./Tone/source/oscillator/Oscillator.ts","webpack://Tone/./Tone/signal/SignalOperator.ts","webpack://Tone/./Tone/signal/WaveShaper.ts","webpack://Tone/./Tone/signal/AudioToGain.ts","webpack://Tone/./Tone/signal/Multiply.ts","webpack://Tone/./Tone/source/oscillator/AMOscillator.ts","webpack://Tone/./Tone/source/oscillator/FMOscillator.ts","webpack://Tone/./Tone/source/oscillator/PulseOscillator.ts","webpack://Tone/./Tone/source/oscillator/FatOscillator.ts","webpack://Tone/./Tone/source/oscillator/PWMOscillator.ts","webpack://Tone/./Tone/source/oscillator/OmniOscillator.ts","webpack://Tone/./Tone/source/buffer/Player.ts","webpack://Tone/./Tone/signal/Add.ts","webpack://Tone/./Tone/signal/Abs.ts","webpack://Tone/./Tone/signal/GainToAudio.ts","webpack://Tone/./Tone/signal/Negate.ts","webpack://Tone/./Tone/signal/Subtract.ts","webpack://Tone/./Tone/signal/Zero.ts","webpack://Tone/./Tone/component/envelope/Envelope.ts","webpack://Tone/./Tone/component/envelope/AmplitudeEnvelope.ts","webpack://Tone/./Tone/instrument/Instrument.ts","webpack://Tone/./Tone/instrument/Monophonic.ts","webpack://Tone/./Tone/instrument/Synth.ts","webpack://Tone/./Tone/instrument/Sampler.ts","webpack://Tone/./Tone/event/ToneEvent.ts","webpack://Tone/./Tone/event/Part.ts","webpack://Tone/./Tone/event/Sequence.ts","webpack://Tone/./Tone/component/channel/CrossFade.ts","webpack://Tone/./Tone/effect/Effect.ts","webpack://Tone/./Tone/effect/FeedbackEffect.ts","webpack://Tone/./Tone/effect/FeedbackDelay.ts","webpack://Tone/./Tone/effect/Convolver.ts","webpack://Tone/./Tone/component/analysis/Analyser.ts","webpack://Tone/./Tone/component/channel/Merge.ts","webpack://Tone/./Tone/component/filter/Filter.ts","webpack://Tone/./Tone/component/channel/MultibandSplit.ts","webpack://Tone/./Tone/component/filter/EQ3.ts","webpack://Tone/./Tone/index.ts","webpack://Tone/(webpack)/buildin/global.js"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","_version__WEBPACK_IMPORTED_MODULE_0__","Tone","debug","_wasDisposed","getDefaults","log","args","_i","arguments","length","toString","global","TONE_DEBUG_CLASS","unshift","console","apply","assert","statement","error","Error","dispose","version","globalContext","theWindow","hasAudioContext","getAudioContext","context","AudioContext","TONE_AUDIO_CONTEXT","Ticker","callback","type","updateInterval","_callback","_type","_updateInterval","_createClock","_createWorker","blob","Blob","toFixed","blobUrl","URL","createObjectURL","worker","Worker","onmessage","bind","_worker","_createTimeout","_this","_timeout","setTimeout","e","_disposeClock","clearTimeout","terminate","interval","Math","max","postMessage","isUndef","arg","isDefined","isFunction","isNumber","isObject","constructor","isBoolean","isArray","Array","isString","isNote","test","deepMerge","target","sources","source","shift","key","assign","_a","_b","concat","optionsFromArguments","defaults","argsArray","keys","objKey","opts","from","Reflect","has","some","splice","indexOf","defaultArg","given","fallback","omitFromObject","obj","omit","forEach","prop","Emitter_Emitter","_super","Emitter","__extends","on","event","split","eventName","_events","push","once","boundCallback","off","eventList","emit","slice","len","mixin","constr","getOwnPropertyDescriptor","undefined","Timeline_Timeline","Timeline","_timeline","options","memory","Timeline_extends","Infinity","add","time","valueOf","index","_search","diff","remove","param","peek","getAfter","getBefore","cancel","after","cancelBefore","previousEvent","beginning","end","midPoint","floor","event_1","nextEvent","_iterate","lowerBound","upperBound","forEachBefore","forEachAfter","forEachBetween","startTime","endTime","forEachFrom","forEachAtTime","notifyNewContext","onContextInit","cb","notifyCloseContext","onContextClose","Context_Context","Context","_constants","Map","_timeouts","_timeoutIds","_initialized","_context","_latencyHint","latencyHint","lookAhead","_ticker","clockSource","_timeoutLoop","addEventListener","state","Context_extends","initialize","ctx","createAnalyser","createOscillator","createBufferSource","createBiquadFilter","createBuffer","numberOfChannels","sampleRate","createChannelMerger","numberOfInputs","createChannelSplitter","numberOfOutputs","createConstantSource","createConvolver","createDelay","maxDelayTime","createDynamicsCompressor","createGain","createIIRFilter","feedforward","feedback","createPanner","createPeriodicWave","real","imag","constraints","createStereoPanner","createWaveShaper","decodeAudioData","audioData","currentTime","listener","_transport","t","_destination","hint","lookAheadValue","now","resume","Promise","resolve","close","sent","getConstant","val","buffer","arr","getChannelData","constant","channelCount","channelCountMode","loop","start","set","map","disconnect","firstEvent","fn","timeout","id","dummyContext","destination","transport","Global_globalContext","getContext","setContext","Global_start","TONE_SILENCE_LOGGING","prefix","printString","dbToGain","db","pow","gainToDb","gain","LN10","intervalToFrequencyRatio","A4","ftom","frequency","round","log2","mtof","midi","TimeBase_TimeBaseClass","TimeBaseClass","units","defaultUnits","_val","_units","_expressions","_getExpressions","TimeBase_extends","hz","method","_frequencyToUnits","parseFloat","regexp","_ticksToUnits","parseInt","_beatsToUnits","_getTimeSignature","dot","numericValue","scalar","number","_secondsToUnits","samples","tr","q","total","fromType","_noArg","trim","typeName","quantity","expr","matching","match","freq","beats","_getBpm","seconds","ticks","_getPPQ","_now","bpm","timeSignature","PPQ","toSeconds","toTicks","toFrequency","toMidi","toSamples","toMilliseconds","Time_TimeClass","TimeClass","Time_extends","capture","quantize","quantTo","nextSubdivision","subdiv","percent","subdivision","toNotation","testNotations","power","closest","closestSeconds","notation","notationSeconds","abs","toBarsBeatsSixteenths","quarterTime","quarters","measures","sixteenths","sixteenthString","join","Time","Frequency_FrequencyClass","FrequencyClass","Frequency_extends","setA4","note","pitch","octave","noteNumber","noteToScaleIndex","toLowerCase","transpose","harmonize","intervals","toNote","scaleIndexToNote","cbb","c#","cx","dbb","d#","dx","ebb","eb","e#","ex","fbb","fb","f","f#","fx","gbb","gb","g","g#","gx","abb","ab","a","a#","ax","bbb","bb","b","b#","bx","Frequency","TransportTimeClass","TransportTime_extends","TransportTime","ToneWithContext_ToneWithContext","ToneWithContext","defaultContext","ToneWithContext_extends","immediate","attribute","member","setValueAtTime","props","Param_Param","Param","overridden","_minOutput","AudioParam","_param","input","_initialValue","convert","Param_extends","getValueAtTime","_fromType","cancelScheduledValues","minValue","maxValue","_is","min","_toType","computedTime","isFinite","JSON","stringify","before","beforeValue","previous","_linearInterpolate","_exponentialInterpolate","previousVal","_exponentialApproach","setRampPoint","currentVal","cancelAndHoldAtTime","linearRampToValueAtTime","exponentialRampToValueAtTime","exponentialRampTo","rampTime","linearRampTo","targetRampTo","exponentialApproachValueAtTime","timeConstant","setTargetAtTime","setValueCurveAtTime","values","duration","scaling","startingValue","segTime","valueAtTime","sampleTime","rampTo","t0","v0","v1","exp","t1","ToneAudioNode_ToneAudioNode","ToneAudioNode","_internalChannels","ToneAudioNode_extends","output","_isAudioNode","node","AudioNode","_getInternalNodes","nodeList","_setChannelProperties","channelInterpretation","_getChannelProperties","connect","outputNum","inputNum","toDestination","toMaster","warn","chain","nodes","connectSeries","fan","first","reduce","prev","current","srcNode","dstNode","outputNumber","inputNumber","readOnly","str","writable","noOp","Gain_Gain","Gain","_gainNode","Gain_extends","OfflineContext","channels","OfflineAudioContext","_currentTime","_duration","OfflineContext_extends","render","startRendering","ToneAudioBuffer_ToneAudioBuffer","ToneAudioBuffer","onload","reverse","url","AudioBuffer","load","catch","onerror","ToneAudioBuffer_extends","_buffer","loaded","_reversed","_reverse","promise","downloads","audioBuffer","e_1","fromArray","array","isMultidimensional","multiChannelArray","copyToChannel","toMono","chanNum","toArray","outputArray","Float32Array","numChannels_1","channel","channelArray","sample","ret","startSamples","endSamples","retBuffer","subarray","rev","fromUrl","matches","extensions","extension","extensions_1","ext","supportsType","replace","fetch","baseUrl","response","ok","arrayBuffer","document","createElement","canPlayType","Offline","originalContext","bufferPromise","ToneAudioBuffers_ToneAudioBuffers","ToneAudioBuffers","_buffers","_loadingCount","urls","_bufferLoaded","ToneAudioBuffers_extends","every","clear","Delay_Delay","Delay","maxDelayInSeconds","maxDelay","delayTime","_delayNode","Delay_extends","StateTimeline","initial","_initial","StateTimeline_extends","setStateAtTime","getLastState","getNextState","event_2","TickSignal_TickSignal","TickSignal","_sig","offset","_multiplier","multiplier","TickSignal_extends","computedValue","prevEvent","segments","rampVal","ticksUntilTime","_getTicksUntilEvent","computedVal","segmentDur","val0","val1","onTheLineEvent","getTicksAtTime","getDurationOfTicks","currentTick","getTimeOfTick","tick","delta","k","sqrt","sol1","ticksToTime","when","timeToTicks","computedDuration","startTicks","TickSource_TickSource","TickSource","_state","_tickOffset","setTicksAtTime","TickSource_extends","stop","pause","stopEvent","tmpEvent","lastState","elapsedTicks","periodStartTime","offsetEvent","getSecondsAtTime","elapsedSeconds","getStateAtTime","absoluteTicks","forEachTickBetween","computedStartTime","computedEndTime","lastStateEvent","maxStartTime","nextTickTime","Clock_Clock","Clock","_lastUpdate","_boundLoop","_loop","_tickSource","Clock_extends","ceil","TicksClass","Ticks_extends","Ticks","Midi_MidiClass","MidiClass","Midi_extends","Midi","Draw_Draw","Draw","expiration","anticipation","_boundDrawLoop","_drawLoop","_animationFrame","Draw_extends","schedule","requestAnimationFrame","cancelAnimationFrame","IntervalTimeline_IntervalTimeline","IntervalTimeline","_root","_length","IntervalTimeline_extends","IntervalNode","insert","updateHeight","updateMax","_rebalance","parent","results","search","results_1","_removeNode","_setRoot","_replaceNodeInParent","replacement","isLeftChild","left","right","temp","getBalance","_rotateLeft","pivotNode","_rotateRight","balance","low","allNodes_1","traverse","searchAfter","high","_left","_right","height","point","Volume_Volume","Volume","volume","_unmutedVolume","mute","Volume_extends","Destination_Destination","Destination","rawContext","Destination_extends","TransportEvent_TransportEvent","TransportEvent","_eventId","_once","invoke","TransportRepeatEvent_TransportRepeatEvent","TransportRepeatEvent","_currentId","_nextId","_nextTick","_boundRestart","_restart","_interval","TransportRepeatEvent_extends","_createEvents","scheduleOnce","Transport_Transport","Transport","_loopStart","_loopEnd","_scheduledEvents","_repeatedEvents","_syncedSignals","_swingAmount","_ppq","ppq","_clock","_processTick","_bindClockEvents","_timeSignature","_swingTicks","Transport_extends","loopEnd","loopStart","swing","swingSubdivision","tickTime","progress","amount","sin","PI","_addEvent","scheduleRepeat","eventId","item","timeline","computedAfter","offsetTicks","toggle","timeSig","startPosition","endPosition","setLoopPoints","remainingTicks","syncSignal","signal","ratio","computedFreq","ratioSignal","unsyncSignal","syncedSignal","Source_Source","Source","_volume","_synced","_scheduled","_syncedStart","_syncedStop","Source_extends","restart","sched","_start","_stop","sync","stateEvent","startOffset","unsync","OneShotSource_OneShotSource","OneShotSource","onended","_startTime","_stopTime","_fadeIn","fadeIn","_fadeOut","fadeOut","_curve","curve","OneShotSource_extends","_startGain","fadeInTime","_stopGain","cancelStop","fadeOutTime","additionalTail","_stopSource","_onended","BufferSource_ToneBufferSource","ToneBufferSource","_source","_sourceStarted","_sourceStopped","playbackRate","BufferSource_extends","computedOffset","computedDur","Noise_Noise","Noise","_playbackRate","Noise_extends","_noiseBuffers","rate","random","_noiseCache","brown","pink","white","channelNum","lastOut","b0","b1","b2","b3","b4","b5","b6","Signal_Signal","Signal","override","_constantSource","Signal_extends","connectSignal","OscillatorNode_ToneOscillatorNode","ToneOscillatorNode","_oscillator","detune","OscillatorNode_extends","setPeriodicWave","periodicWave","Oscillator_Oscillator","Oscillator","_partials","partials","_partialCount","partialCount","_phase","phase","baseType","Oscillator_extends","oscillator","_wave","syncFrequency","unsyncFrequency","isBasicType","_getRealImaginary","partial","exec","periodicWaveSize","fftSize","piFactor","TypeError","cos","_inverseFFT","sum","_getInitialValue","twoPi","SignalOperator_SignalOperator","SignalOperator","SignalOperator_extends","WaveShaper_WaveShaper","WaveShaper","_shaper","mapping","setMap","WaveShaper_extends","normalized","oversample","oversampling","isOverSampleType","includes","AudioToGain_AudioToGain","AudioToGain","_norm","x","AudioToGain_extends","Multiply_Multiply","Multiply","_mult","factor","Multiply_extends","AMOscillator_AMOscillator","AMOscillator","_carrier","_modulator","_modulationScale","harmonicity","_modulationNode","modulationType","AMOscillator_extends","FMOscillator_FMOscillator","FMOscillator","modulationIndex","FMOscillator_extends","PulseOscillator_PulseOscillator","PulseOscillator","width","_widthGate","_sawtooth","_thresh","PulseOscillator_extends","FatOscillator_FatOscillator","FatOscillator","_oscillators","_spread","spread","count","FatOscillator_extends","_forEach","osc","iterator","start_1","step_1","PWMOscillator_PWMOscillator","PWMOscillator","sourceType","_pulse","_scale","modulationFrequency","PWMOscillator_extends","OmniOscillatorSourceMap","am","fat","fm","pulse","pwm","OmniOscillator_OmniOscillator","OmniOscillator","OmniOscillator_extends","_sourceType","substr","_createNewOscillator","_getOscType","oscType","oscConstructor","oldOsc_1","blockTime","sType","mType","Player_Player","Player","_activeSources","Set","_onload","autostart","Player_extends","_onSourceEnd","delete","size","comptuedOffset","origDuration","implicitEnd","seek","Add_Add","Add","_sum","addend","Add_extends","Abs_Abs","Abs","_abs","Abs_extends","GainToAudio_GainToAudio","GainToAudio","GainToAudio_extends","Negate_Negate","Negate","_multiply","Negate_extends","Subtract_Subtract","Subtract","_neg","subtrahend","Subtract_extends","Zero_Zero","Zero","_gain","Zero_extends","Envelope_Envelope","Envelope","attack","decay","sustain","release","attackCurve","releaseCurve","decayCurve","Envelope_extends","_getCurve","direction","curveName","EnvelopeCurves","_setCurve","curveDef","_attackCurve","_releaseCurve","_decayCurve","triggerAttack","velocity","currentValue","decayValue","decayStart","triggerRelease","triggerAttackRelease","cosineCurve","rippleCurve","curveLen","sineWave","stairsCurve","sineCurve","bounceCurve","invertCurve","out","j","bounce","In","Out","cosine","exponential","linear","ripple","sine","step","AmplitudeEnvelope_AmplitudeEnvelope","AmplitudeEnvelope","AmplitudeEnvelope_extends","Instrument_Instrument","Instrument","_original_triggerAttack","_original_triggerRelease","Instrument_extends","_syncMethod","timePosition","originalMethod","Monophonic_Monophonic","Monophonic","portamento","Monophonic_extends","_triggerEnvelopeAttack","setNote","_triggerEnvelopeRelease","getLevelAtTime","envelope","computedFrequency","portTime","Synth_Synth","Synth","Synth_extends","computedAttack","computedDecay","Sampler_Sampler","Sampler","urlMap","mid","Sampler_extends","_findClosest","notes","difference","closestNote","releaseAll","ToneEvent_ToneEvent","ToneEvent","_startOffset","_probability","probability","_humanize","humanize","ToneEvent_extends","_rescheduleEvents","startTick","_getLoopDuration","_tick","prob","variation","reschedulTime","lastEvent","loopDuration","Part_Part","Part","events","Part_extends","computedOffset_1","_startNote","at","timeInTicks","result","next","done","_restartEvent","_setAll","attr","_testLoopBoundries","Sequence_Sequence","Sequence","_part","_seqCallback","_eventsArray","_subdivision","Sequence_extends","_createSequence","_eventsUpdated","_indexTime","Proxy","_rescheduleSequence","sequence","eventOffset","CrossFade_CrossFade","CrossFade","_panner","_split","_g2a","fade","pan","CrossFade_extends","Effect_Effect","Effect","_dryWet","wet","effectSend","effectReturn","Effect_extends","connectEffect","effect","FeedbackEffect_FeedbackEffect","FeedbackEffect","_feedbackGain","FeedbackEffect_extends","FeedbackDelay_FeedbackDelay","FeedbackDelay","FeedbackDelay_extends","Convolver_Convolver","Convolver","_convolver","normalize","Convolver_extends","buff","norm","Analyser_Analyser","Analyser","_analyser","Analyser_extends","smoothing","getValue","getFloatFrequencyData","getFloatTimeDomainData","frequencyBinCount","smoothingTimeConstant","Merge_Merge","Merge","_merger","Merge_extends","Filter_Filter","Filter","_filters","Q","rolloff","Filter_extends","filter","_rolloff","rolloffNum","possibilities","cascadingCount","getFrequencyResponse","totalResponse","freqValues","magValues","phaseValues","filterClone","MultibandSplit_MultibandSplit","MultibandSplit","_lowMidFilter","lowFrequency","highFrequency","MultibandSplit_extends","EQ3_EQ3","EQ3","_multibandSplit","_lowGain","_midGain","_highGain","EQ3_extends","Tone_now","Tone_Transport","Tone_Destination","Function","eval","window"],"mappings":"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","file":"Tone.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Tone\"] = factory();\n\telse\n\t\troot[\"Tone\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","/**\n *  Tone.js\n *  @author Yotam Mann\n *  @license http://opensource.org/licenses/MIT MIT License\n *  @copyright 2014-2019 Yotam Mann\n */\nimport { version } from \"../version\";\n\n///////////////////////////////////////////////////////////////////////////\n// \tTONE\n///////////////////////////////////////////////////////////////////////////\n\n// tslint:disable-next-line: no-empty-interface\nexport interface BaseToneOptions {}\n\n/**\n *  @class  Tone is the base class of all other classes.\n *  @constructor\n */\nexport abstract class Tone {\n\n\t/**\n\t * The version number semver\n\t */\n\tstatic version: string = version;\n\n\t/**\n\t * The name of the class\n\t */\n\tprotected abstract name: string;\n\n\t/**\n\t * Takes a partial options an returns the completed options by filling in the defaults\n\t */\n\tstatic getDefaults(): BaseToneOptions {\n\t\treturn {};\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tDEBUGGING\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Set this debug flag to log all events that happen in this class.\n\t */\n\tdebug: boolean = false;\n\n\t/**\n\t * Prints the outputs to the console log for debugging purposes.\n\t * Prints the contents only if either the object has a property\n\t * called `debug` set to true, or a variable called TONE_DEBUG_CLASS\n\t * is set to the name of the class.\n\t * @param args\n\t *  @example\n\t * //prints all logs originating from Tone.OscillatorNode\n\t * Tone.global.TONE_DEBUG_CLASS = \"OscillatorNode\"\n\t */\n\tprotected log(...args): void {\n\t\t// if the object is either set to debug = true\n\t\t// or if there is a string on the Tone.global.with the class name\n\t\t// @ts-ignore\n\t\tif (this.debug || this.toString() === global.TONE_DEBUG_CLASS) {\n\t\t\targs.unshift(this.toString() + \":\");\n\t\t\t// tslint:disable-next-line: no-console\n\t\t\tconsole.log(...args);\n\t\t}\n\t}\n\n\t/**\n\t *  Assert that the statement is true, otherwise invoke the error.\n\t *  @param {Boolean} statement\n\t *  @param {String} error The message which is passed into an Error\n\t *  @private\n\t */\n\tprotected assert(statement: boolean, error: string): void {\n\t\tif (!statement) {\n\t\t\tthrow new Error(error);\n\t\t}\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tDISPOSING\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Indicates if the instance was disposed\n\t */\n\tprivate _wasDisposed: boolean = false;\n\n\t/**\n\t *  disconnect and dispose.\n\t */\n\tdispose(): this {\n\t\tthis._wasDisposed = true;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Indicates if the instance was disposed. 'Disposing' an\n\t * instance means that all of the Web Audio nodes that were\n\t * created for the instance are disconnected and freed for garbage collection.\n\t */\n\tget disposed(): boolean {\n\t\treturn this._wasDisposed;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tDEFAULTS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  If the `given` parameter is undefined, use the `fallback`.\n\t *  If both `given` and `fallback` are object literals, it will\n\t *  return a deep copy which includes all of the parameters from both\n\t *  objects. If a parameter is undefined in given, it will return\n\t *  the fallback property.\n\t *  <br><br>\n\t *  WARNING: if object is self referential, it will go into an an\n\t *  infinite recursive loop.\n\t *  @memberOf Tone\n\t *  @param  {*} given\n\t *  @param  {*} fallback\n\t *  @return {*}\n\t */\n\t// static defaultArg(given, fallback) {\n\t\t// if (isObject(given) && isObject(fallback)) {\n\t\t// \tconst ret = {};\n\t\t// \t// make a deep copy of the given object\n\t\t// \tfor (const givenProp in given) {\n\t\t// \t\tret[givenProp] = Tone.defaultArg(fallback[givenProp], given[givenProp]);\n\t\t// \t}\n\t\t// \tfor (const fallbackProp in fallback) {\n\t\t// \t\tret[fallbackProp] = Tone.defaultArg(given[fallbackProp], fallback[fallbackProp]);\n\t\t// \t}\n\t\t// \treturn ret;\n\t\t// } else {\n\t\t// \treturn isUndef(given) ? fallback : given;\n\t\t// }\n\t// }\n\n\t// protected options(argsArray: IArguments, keys: string[]): object {\n\t// \tlet options: any = {};\n\t// \tconst args = Array.from(argsArray);\n\t// \tif (args[0] instanceof BaseAudioContext) {\n\t// \t\toptions.context = args.shift();\n\t// \t}\n\t// \tif (args.length === 1 && isObject(args[0])) {\n\t// \t\toptions = Object.assign(options, args[0]);\n\t// \t} else {\n\t// \t\tfor (let i = 0; i < keys.length; i++) {\n\t// \t\t\tif (isDefined(args[i])) {\n\t// \t\t\t\toptions[keys[i]] = args[i];\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\t// \treturn deepMerge(this.getDefaults(), options);\n\t// }\n\n\t/**\n\t * Convert the class to a string\n\t * @example\n\t * const osc = new Oscillator()\n\t * osc.toString() // \"Oscillator\"\n\t */\n\ttoString(): string {\n\t\treturn this.name;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tSTATIC\n\t///////////////////////////////////////////////////////////////////////////\n\n\t// static get context(): import(\"./context/Context\").Context {\n\t// \treturn getContext();\n\t// }\n\n\t// static now(): Seconds {\n\t// \treturn Tone.context.now();\n\t// }\n}\n","export const version: string = \"14.1.23\";\n","/**\n * Interface for things that Tone.js adds to the window\n */\ninterface ToneWindow extends Window {\n\tTONE_AUDIO_CONTEXT?: BaseAudioContext;\n\tTONE_SILENCE_LOGGING?: boolean;\n}\n\n/**\n * A reference to the window object\n */\nexport const theWindow: ToneWindow | null = typeof self === \"object\" ? self : null;\n\n/**\n * If the browser has a window object which has an AudioContext\n */\nexport const hasAudioContext = theWindow && theWindow.hasOwnProperty(\"AudioContext\");\n\n/**\n * The global audio context which is getable and assignable through\n * getAudioContext and setAudioContext\n */\nlet globalContext: BaseAudioContext;\n\n// if it was created already, use that one\n// this enables multiple versions of Tone.js to run on the same page.\nif (theWindow && theWindow.TONE_AUDIO_CONTEXT) {\n\tglobalContext = theWindow.TONE_AUDIO_CONTEXT;\n}\n\n/**\n * Returns the default system-wide AudioContext\n */\nexport function getAudioContext(): BaseAudioContext {\n\tif (!globalContext && hasAudioContext) {\n\t\tsetAudioContext(new AudioContext());\n\t}\n\treturn globalContext;\n}\n\n/**\n * Set the default audio context\n */\nexport function setAudioContext(context: BaseAudioContext): void {\n\tglobalContext = context;\n\tif (theWindow) {\n\t\ttheWindow.TONE_AUDIO_CONTEXT = globalContext;\n\t}\n}\n","import { Seconds } from \"../type/Units\";\n\nexport type TickerClockSource = \"worker\" | \"timeout\" | \"offline\";\n\n/**\n * A class which provides a reliable callback using either\n * a Web Worker, or if that isn't supported, falls back to setTimeout.\n */\nexport class Ticker {\n\n\t/**\n\t * Either \"worker\" or \"timeout\" or \"offline\"\n\t */\n\tprivate _type: TickerClockSource;\n\n\t/**\n\t * The update interval of the worker\n\t */\n\tprivate _updateInterval: Seconds;\n\n\t/**\n\t * The callback to invoke at regular intervals\n\t */\n\tprivate _callback: () => void;\n\n\t/**\n\t * track the callback interval\n\t */\n\tprivate _timeout!: number;\n\n\t/**\n\t * private reference to the worker\n\t */\n\tprivate _worker!: Worker;\n\n\tconstructor(callback: () => void, type: TickerClockSource, updateInterval: Seconds) {\n\n\t\tthis._callback = callback;\n\t\tthis._type = type;\n\t\tthis._updateInterval = updateInterval;\n\n\t\t// create the clock source for the first time\n\t\tthis._createClock();\n\t}\n\n\t/**\n\t *  Generate a web worker\n\t */\n\tprivate _createWorker(): void {\n\n\t\tconst blob = new Blob([\n\t\t\t// the initial timeout time\n\t\t\t`var timeoutTime =  ${(this._updateInterval * 1000).toFixed(1)};\n\t\t\t// onmessage callback\n\t\t\tself.onmessage = function(msg){\n\t\t\t\ttimeoutTime = parseInt(msg.data);\n\t\t\t};\n\t\t\t// the tick function which posts a message\n\t\t\t// and schedules a new tick\n\t\t\tfunction tick(){\n\t\t\t\tsetTimeout(tick, timeoutTime);\n\t\t\t\tself.postMessage('tick');\n\t\t\t}\n\t\t\t// call tick initially\n\t\t\ttick();`,\n\t\t]);\n\t\tconst blobUrl = URL.createObjectURL(blob);\n\t\tconst worker = new Worker(blobUrl);\n\n\t\tworker.onmessage = this._callback.bind(this);\n\n\t\tthis._worker = worker;\n\t}\n\n\t/**\n\t * Create a timeout loop\n\t */\n\tprivate _createTimeout(): void {\n\t\tthis._timeout = setTimeout(()  => {\n\t\t\tthis._createTimeout();\n\t\t\tthis._callback();\n\t\t}, this._updateInterval * 1000);\n\t}\n\n\t/**\n\t * Create the clock source.\n\t */\n\tprivate _createClock(): void {\n\t\tif (this._type === \"worker\") {\n\t\t\ttry {\n\t\t\t\tthis._createWorker();\n\t\t\t} catch (e) {\n\t\t\t\t// workers not supported, fallback to timeout\n\t\t\t\tthis._type = \"timeout\";\n\t\t\t\tthis._createClock();\n\t\t\t}\n\t\t} else if (this._type === \"timeout\") {\n\t\t\tthis._createTimeout();\n\t\t}\n\t}\n\n\t/**\n\t * Clean up the current clock source\n\t */\n\tprivate _disposeClock(): void {\n\t\tif (this._timeout) {\n\t\t\tclearTimeout(this._timeout);\n\t\t\tthis._timeout = 0;\n\t\t}\n\t\tif (this._worker) {\n\t\t\tthis._worker.terminate();\n\t\t\tthis._worker.onmessage = null;\n\t\t}\n\t}\n\n\t/**\n\t * The rate in seconds the ticker will update\n\t */\n\tget updateInterval(): Seconds {\n\t\treturn this._updateInterval;\n\t}\n\tset updateInterval(interval: Seconds) {\n\t\tthis._updateInterval = Math.max(interval, 128 / 44100);\n\t\tif (this._type === \"worker\") {\n\t\t\tthis._worker.postMessage(Math.max(interval * 1000, 1));\n\t\t}\n\t}\n\n\t/**\n\t * The type of the ticker, either a worker or a timeout\n\t */\n\tget type(): TickerClockSource {\n\t\treturn this._type;\n\t}\n\tset type(type: TickerClockSource) {\n\t\tthis._disposeClock();\n\t\tthis._type = type;\n\t\tthis._createClock();\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): void {\n\t\tthis._disposeClock();\n\t}\n}\n","import { Note } from \"../type/Units\";\n\n/**\n *  Test if the arg is undefined\n */\nexport function isUndef(arg: any): arg is undefined {\n\treturn typeof arg === \"undefined\";\n}\n\n/**\n *  Test if the arg is not undefined\n */\nexport function isDefined<T>(arg: T | undefined): arg is T {\n\treturn !isUndef(arg);\n}\n\n/**\n *  Test if the arg is a function\n */\nexport function isFunction(arg: any): arg is (a: any) => any {\n\treturn typeof arg === \"function\";\n}\n\n/**\n *  Test if the argument is a number.\n */\nexport function isNumber(arg: any): arg is number {\n\treturn (typeof arg === \"number\");\n}\n\n/**\n *  Test if the given argument is an object literal (i.e. `{}`);\n */\nexport function isObject(arg: any): arg is object {\n\treturn (Object.prototype.toString.call(arg) === \"[object Object]\" && arg.constructor === Object);\n}\n\n/**\n *  Test if the argument is a boolean.\n */\nexport function isBoolean(arg: any): arg is boolean {\n\treturn (typeof arg === \"boolean\");\n}\n\n/**\n *  Test if the argument is an Array\n */\nexport function isArray(arg: any): arg is any[] {\n\treturn (Array.isArray(arg));\n}\n\n/**\n *  Test if the argument is a string.\n */\nexport function isString(arg: any): arg is string {\n\treturn (typeof arg === \"string\");\n}\n\n/**\n *  Test if the argument is in the form of a note in scientific pitch notation.\n *  e.g. \"C4\"\n */\nexport function isNote(arg: any): arg is Note {\n\treturn isString(arg) && /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i.test(arg);\n}\n","// import { BaseToneOptions } from \"../Tone\";\nimport { isDefined, isObject, isUndef } from \"./TypeCheck\";\n\ntype BaseToneOptions = import(\"../Tone\").BaseToneOptions;\n\n/**\n * Recursively merge an object\n * @param target the object to merge into\n * @param sources the source objects to merge\n */\nexport function deepMerge<T>(target: T, ...sources: T[]): T {\n\tif (!sources.length) { return target; }\n\tconst source = sources.shift();\n\n\tif (isObject(target) && isObject(source)) {\n\t\tfor (const key in source) {\n\t\t\t// values with the key 'value' are an exception\n\t\t\t// they don't get deep merged\n\t\t\tif (key === \"value\") {\n\t\t\t\ttarget[key] = source[key];\n\t\t\t} else if (isObject(source[key])) {\n\t\t\t\tif (!target[key]) { Object.assign(target, { [key]: {} }); }\n\t\t\t\tdeepMerge(target[key], source[key] as any);\n\t\t\t} else {\n\t\t\t\tObject.assign(target, { [key]: source[key] as any });\n\t\t\t}\n\t\t}\n\t}\n\n\treturn deepMerge(target, ...sources);\n}\n\n/**\n * Convert an args array into an object.\n */\nexport function optionsFromArguments<T extends object>(\n\tdefaults: T,\n\targsArray: IArguments,\n\tkeys: string[] = [],\n\tobjKey?: string,\n): T {\n\tconst opts: any = {};\n\tconst args = Array.from(argsArray);\n\t// if the first argument is an object and has an object key\n\tif (isObject(args[0]) && objKey && !Reflect.has(args[0], objKey)) {\n\t\t// if it's not part of the defaults\n\t\tconst partOfDefaults = Object.keys(args[0]).some(key => Reflect.has(defaults, key));\n\t\tif (!partOfDefaults) {\n\t\t\t// merge that key\n\t\t\tdeepMerge(opts, {[objKey] : args[0]});\n\t\t\t// remove the obj key from the keys\n\t\t\tkeys.splice(keys.indexOf(objKey), 1);\n\t\t\t// shift the first argument off\n\t\t\targs.shift();\n\t\t}\n\t}\n\tif (args.length === 1 && isObject(args[0])) {\n\t\tdeepMerge(opts, args[0]);\n\t} else {\n\t\tfor (let i = 0; i < keys.length; i++) {\n\t\t\tif (isDefined(args[i])) {\n\t\t\t\topts[keys[i]] = args[i];\n\t\t\t}\n\t\t}\n\t}\n\treturn deepMerge(defaults, opts);\n}\n\n/**\n * Return this instances default values by calling Constructor.getDefaults()\n */\nexport function getDefaultsFromInstance<T>(instance: T): BaseToneOptions {\n\ttype ToneClass = {\n\t\tconstructor: ToneClass;\n\t\tgetDefaults: () => BaseToneOptions;\n\t} & T;\n\n\treturn (instance as ToneClass).constructor.getDefaults();\n}\n\n/**\n * Returns the fallback if the given object is undefined.\n * Take an array of arguments and return a formatted options object.\n */\nexport function defaultArg<T>(given: T, fallback: T): T {\n\tif (isUndef(given)) {\n\t\treturn fallback;\n\t} else {\n\t\treturn given;\n\t}\n}\n\n/**\n * Remove all of the properties belonging to omit from obj.\n */\nexport function omitFromObject<T extends object, O extends string[]>(obj: T, omit: O): Omit<T, keyof O> {\n\tomit.forEach(prop => {\n\t\tif (Reflect.has(obj, prop)) {\n\t\t\tdelete obj[prop];\n\t\t}\n\t});\n\treturn obj;\n}\n","import { Tone } from \"../Tone\";\nimport { isUndef } from \"./TypeCheck\";\n\nexport interface EmitterEventObject {\n\t[event: string]: Array<(...args: any[]) => void>;\n}\n\n/**\n * Emitter gives classes which extend it\n * the ability to listen for and emit events.\n * Inspiration and reference from Jerome Etienne's [MicroEvent](https://github.com/jeromeetienne/microevent.js).\n * MIT (c) 2011 Jerome Etienne.\n */\nexport class Emitter<EventType extends string = string> extends Tone {\n\n\tname = \"Emitter\";\n\n\t/**\n\t * Private container for the events\n\t */\n\tprivate _events?: EmitterEventObject;\n\n\t/**\n\t *  Bind a callback to a specific event.\n\t *  @param  event     The name of the event to listen for.\n\t *  @param  callback  The callback to invoke when the event is emitted\n\t */\n\ton(event: EventType, callback: (...args: any[]) => void): this {\n\t\t// split the event\n\t\tconst events = event.split(/\\W+/);\n\t\tevents.forEach(eventName => {\n\t\t\tif (isUndef(this._events)) {\n\t\t\t\tthis._events = {};\n\t\t\t}\n\t\t\tif (!this._events.hasOwnProperty(eventName)) {\n\t\t\t\tthis._events[eventName] = [];\n\t\t\t}\n\t\t\tthis._events[eventName].push(callback);\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Bind a callback which is only invoked once\n\t *  @param  event     The name of the event to listen for.\n\t *  @param  callback  The callback to invoke when the event is emitted\n\t */\n\tonce(event: EventType, callback: (...args: any[]) => void): this {\n\t\tconst boundCallback = (...args: any[])  => {\n\t\t\t// invoke the callback\n\t\t\tcallback(...args);\n\t\t\t// remove the event\n\t\t\tthis.off(event, boundCallback);\n\t\t};\n\t\tthis.on(event, boundCallback);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Remove the event listener.\n\t *  @param  event     The event to stop listening to.\n\t *  @param  callback  The callback which was bound to the event with Emitter.on.\n\t *                    If no callback is given, all callbacks events are removed.\n\t */\n\toff(event: EventType, callback?: (...args: any[]) => void): this {\n\t\tconst events = event.split(/\\W+/);\n\t\tevents.forEach(eventName => {\n\t\t\tif (isUndef(this._events)) {\n\t\t\t\tthis._events = {};\n\t\t\t}\n\t\t\tif (this._events.hasOwnProperty(event)) {\n\t\t\t\tif (isUndef(callback)) {\n\t\t\t\t\tthis._events[event] = [];\n\t\t\t\t} else {\n\t\t\t\t\tconst eventList = this._events[event];\n\t\t\t\t\tfor (let i = 0; i < eventList.length; i++) {\n\t\t\t\t\t\tif (eventList[i] === callback) {\n\t\t\t\t\t\t\teventList.splice(i, 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Invoke all of the callbacks bound to the event\n\t *  with any arguments passed in.\n\t *  @param  event  The name of the event.\n\t *  @param args The arguments to pass to the functions listening.\n\t */\n\temit(event, ...args: any[]): this {\n\t\tif (this._events) {\n\t\t\tif (this._events.hasOwnProperty(event)) {\n\t\t\t\tconst eventList = this._events[event].slice(0);\n\t\t\t\tfor (let i = 0, len = eventList.length; i < len; i++) {\n\t\t\t\t\teventList[i].apply(this, args);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Add Emitter functions (on/off/emit) to the object\n\t */\n\tstatic mixin(constr: any): void {\n\t\t// instance._events = {};\n\t\t[\"on\", \"once\", \"off\", \"emit\"].forEach(name => {\n\t\t\tconst property = Object.getOwnPropertyDescriptor(Emitter.prototype, name) as PropertyDescriptor;\n\t\t\tObject.defineProperty(constr.prototype, name, property);\n\t\t});\n\t}\n\n\t/**\n\t *  Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._events = undefined;\n\t\treturn this;\n\t}\n}\n","import { Tone } from \"../Tone\";\nimport { optionsFromArguments } from \"./Defaults\";\n\ntype TimelineSearchParam = \"ticks\" | \"time\";\n\n/**\n * The options object for Timeline\n */\ninterface TimelineOptions {\n\tmemory: number;\n}\n\n/**\n * An event must have a time number\n */\nexport interface TimelineEvent {\n\ttime: number;\n}\n\n/**\n *  @class A Timeline class for scheduling and maintaining state\n *         along a timeline. All events must have a \"time\" property.\n *         Internally, events are stored in time order for fast\n *         retrieval.\n *  @param memory The number of previous events that are retained.\n */\nexport class Timeline<GenericEvent extends TimelineEvent> extends Tone {\n\n\tname = \"Timeline\";\n\n\t/**\n\t *  The memory of the timeline, i.e.\n\t *  how many events in the past it will retain\n\t */\n\tmemory: number;\n\n\t/**\n\t * The array of scheduled timeline events\n\t */\n\tprotected _timeline: GenericEvent[] = [];\n\n\tconstructor(options?: Partial<TimelineOptions>);\n\t// tslint:disable-next-line: unified-signatures\n\tconstructor(memory?: number);\n\tconstructor() {\n\t\tsuper();\n\t\tconst options = optionsFromArguments(Timeline.getDefaults(), arguments, [\"memory\"]);\n\n\t\tthis.memory = options.memory;\n\t}\n\n\tstatic getDefaults(): TimelineOptions {\n\t\treturn {\n\t\t\tmemory: Infinity,\n\t\t};\n\t}\n\n\t/**\n\t *  The number of items in the timeline.\n\t */\n\tget length(): number {\n\t\treturn this._timeline.length;\n\t}\n\n\t/**\n\t *  Insert an event object onto the timeline. Events must have a \"time\" attribute.\n\t *  @param event  The event object to insert into the timeline.\n\t */\n\tadd(event: GenericEvent): Timeline<GenericEvent> {\n\t\t// the event needs to have a time attribute\n\t\tthis.assert(Reflect.has(event, \"time\"), \"Timeline: events must have a time attribute\");\n\t\tevent.time = event.time.valueOf();\n\t\tconst index = this._search(event.time);\n\t\tthis._timeline.splice(index + 1, 0, event);\n\t\t// if the length is more than the memory, remove the previous ones\n\t\tif (this.length > this.memory) {\n\t\t\tconst diff = this.length - this.memory;\n\t\t\tthis._timeline.splice(0, diff);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Remove an event from the timeline.\n\t *  @param  {Object}  event  The event object to remove from the list.\n\t *  @returns {Timeline} this\n\t */\n\tremove(event: GenericEvent): Timeline<GenericEvent> {\n\t\tconst index = this._timeline.indexOf(event);\n\t\tif (index !== -1) {\n\t\t\tthis._timeline.splice(index, 1);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Get the nearest event whose time is less than or equal to the given time.\n\t *  @param  time  The time to query.\n\t */\n\tget(time: number, param: TimelineSearchParam = \"time\"): GenericEvent | null {\n\t\tconst index = this._search(time, param);\n\t\tif (index !== -1) {\n\t\t\treturn this._timeline[index];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t *  Return the first event in the timeline without removing it\n\t *  @returns {Object} The first event object\n\t */\n\tpeek(): GenericEvent | undefined {\n\t\treturn this._timeline[0];\n\t}\n\n\t/**\n\t *  Return the first event in the timeline and remove it\n\t */\n\tshift(): GenericEvent | undefined {\n\t\treturn this._timeline.shift();\n\t}\n\n\t/**\n\t *  Get the event which is scheduled after the given time.\n\t *  @param  time  The time to query.\n\t */\n\tgetAfter(time: number, param: TimelineSearchParam = \"time\"): GenericEvent | null {\n\t\tconst index = this._search(time, param);\n\t\tif (index + 1 < this._timeline.length) {\n\t\t\treturn this._timeline[index + 1];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t *  Get the event before the event at the given time.\n\t *  @param  time  The time to query.\n\t */\n\tgetBefore(time: number): GenericEvent | null {\n\t\tconst len = this._timeline.length;\n\t\t// if it's after the last item, return the last item\n\t\tif (len > 0 && this._timeline[len - 1].time < time) {\n\t\t\treturn this._timeline[len - 1];\n\t\t}\n\t\tconst index = this._search(time);\n\t\tif (index - 1 >= 0) {\n\t\t\treturn this._timeline[index - 1];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t *  Cancel events at and after the given time\n\t *  @param  time  The time to query.\n\t */\n\tcancel(after: number): Timeline<GenericEvent> {\n\t\tif (this._timeline.length > 1) {\n\t\t\tlet index = this._search(after);\n\t\t\tif (index >= 0) {\n\t\t\t\tif (this._timeline[index].time === after) {\n\t\t\t\t\t// get the first item with that time\n\t\t\t\t\tfor (let i = index; i >= 0; i--) {\n\t\t\t\t\t\tif (this._timeline[i].time === after) {\n\t\t\t\t\t\t\tindex = i;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis._timeline = this._timeline.slice(0, index);\n\t\t\t\t} else {\n\t\t\t\t\tthis._timeline = this._timeline.slice(0, index + 1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._timeline = [];\n\t\t\t}\n\t\t} else if (this._timeline.length === 1) {\n\t\t\t// the first item's time\n\t\t\tif (this._timeline[0].time >= after) {\n\t\t\t\tthis._timeline = [];\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Cancel events before or equal to the given time.\n\t *  @param  {Number}  time  The time to cancel before.\n\t *  @returns {Timeline} this\n\t */\n\tcancelBefore(time): Timeline<GenericEvent> {\n\t\tconst index = this._search(time);\n\t\tif (index >= 0) {\n\t\t\tthis._timeline = this._timeline.slice(index + 1);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the previous event if there is one. null otherwise\n\t * @param  {Object} event The event to find the previous one of\n\t * @return {Object}       The event right before the given event\n\t */\n\tpreviousEvent(event): GenericEvent | null {\n\t\tconst index = this._timeline.indexOf(event);\n\t\tif (index > 0) {\n\t\t\treturn this._timeline[index - 1];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t *  Does a binary search on the timeline array and returns the\n\t *  nearest event index whose time is after or equal to the given time.\n\t *  If a time is searched before the first index in the timeline, -1 is returned.\n\t *  If the time is after the end, the index of the last item is returned.\n\t *  @param  time\n\t */\n\tprotected _search(time: number, param: TimelineSearchParam = \"time\"): number {\n\t\tif (this._timeline.length === 0) {\n\t\t\treturn -1;\n\t\t}\n\t\tlet beginning = 0;\n\t\tconst len = this._timeline.length;\n\t\tlet end = len;\n\t\tif (len > 0 && this._timeline[len - 1][param] <= time) {\n\t\t\treturn len - 1;\n\t\t}\n\t\twhile (beginning < end) {\n\t\t\t// calculate the midpoint for roughly equal partition\n\t\t\tlet midPoint = Math.floor(beginning + (end - beginning) / 2);\n\t\t\tconst event = this._timeline[midPoint];\n\t\t\tconst nextEvent = this._timeline[midPoint + 1];\n\t\t\tif (event[param] === time) {\n\t\t\t\t// choose the last one that has the same time\n\t\t\t\tfor (let i = midPoint; i < this._timeline.length; i++) {\n\t\t\t\t\tconst testEvent = this._timeline[i];\n\t\t\t\t\tif (testEvent[param] === time) {\n\t\t\t\t\t\tmidPoint = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn midPoint;\n\t\t\t} else if (event[param] < time && nextEvent[param] > time) {\n\t\t\t\treturn midPoint;\n\t\t\t} else if (event[param] > time) {\n\t\t\t\t// search lower\n\t\t\t\tend = midPoint;\n\t\t\t} else {\n\t\t\t\t// search upper\n\t\t\t\tbeginning = midPoint + 1;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\n\t/**\n\t *  Internal iterator. Applies extra safety checks for\n\t *  removing items from the array.\n\t */\n\tprivate _iterate(\n\t\tcallback: (event: GenericEvent) => void,\n\t\tlowerBound = 0, upperBound = this._timeline.length - 1,\n\t): void {\n\t\tthis._timeline.slice(lowerBound, upperBound + 1).forEach(callback);\n\t}\n\n\t/**\n\t *  Iterate over everything in the array\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEach(callback: (event: GenericEvent) => void): Timeline<GenericEvent> {\n\t\tthis._iterate(callback);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array at or before the given time.\n\t *  @param  time The time to check if items are before\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachBefore(time, callback: (event: GenericEvent) => void): Timeline<GenericEvent> {\n\t\t// iterate over the items in reverse so that removing an item doesn't break things\n\t\tconst upperBound = this._search(time);\n\t\tif (upperBound !== -1) {\n\t\t\tthis._iterate(callback, 0, upperBound);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array after the given time.\n\t *  @param  time The time to check if items are before\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachAfter(time, callback: (event: GenericEvent) => void): Timeline<GenericEvent> {\n\t\t// iterate over the items in reverse so that removing an item doesn't break things\n\t\tconst lowerBound = this._search(time);\n\t\tthis._iterate(callback, lowerBound + 1);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array between the startTime and endTime.\n\t *  The timerange is inclusive of the startTime, but exclusive of the endTime.\n\t *  range = [startTime, endTime).\n\t *  @param  startTime The time to check if items are before\n\t *  @param  endTime The end of the test interval.\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachBetween(startTime: number, endTime: number, callback: (event: GenericEvent) => void): Timeline<GenericEvent> {\n\t\tlet lowerBound = this._search(startTime);\n\t\tlet upperBound = this._search(endTime);\n\t\tif (lowerBound !== -1 && upperBound !== -1) {\n\t\t\tif (this._timeline[lowerBound].time !== startTime) {\n\t\t\t\tlowerBound += 1;\n\t\t\t}\n\t\t\t// exclusive of the end time\n\t\t\tif (this._timeline[upperBound].time === endTime) {\n\t\t\t\tupperBound -= 1;\n\t\t\t}\n\t\t\tthis._iterate(callback, lowerBound, upperBound);\n\t\t} else if (lowerBound === -1) {\n\t\t\tthis._iterate(callback, 0, upperBound);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array at or after the given time. Similar to\n\t *  forEachAfter, but includes the item(s) at the given time.\n\t *  @param  time The time to check if items are before\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachFrom(time: number, callback: (event: GenericEvent) => void): Timeline<GenericEvent> {\n\t\t// iterate over the items in reverse so that removing an item doesn't break things\n\t\tlet lowerBound = this._search(time);\n\t\t// work backwards until the event time is less than time\n\t\twhile (lowerBound >= 0 && this._timeline[lowerBound].time >= time) {\n\t\t\tlowerBound--;\n\t\t}\n\t\tthis._iterate(callback, lowerBound + 1);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array at the given time\n\t *  @param  time The time to check if items are before\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachAtTime(time: number, callback: (event: GenericEvent) => void): Timeline<GenericEvent> {\n\t\t// iterate over the items in reverse so that removing an item doesn't break things\n\t\tconst upperBound = this._search(time);\n\t\tif (upperBound !== -1) {\n\t\t\tthis._iterate(event => {\n\t\t\t\tif (event.time === time) {\n\t\t\t\t\tcallback(event);\n\t\t\t\t}\n\t\t\t}, 0, upperBound);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._timeline = [];\n\t\treturn this;\n\t}\n}\n","///////////////////////////////////////////////////////////////////////////\n// INITIALIZING NEW CONTEXT\n///////////////////////////////////////////////////////////////////////////\n\ntype Context = import(\"./Context\").Context;\n\n/**\n * Array of callbacks to invoke when a new context is created\n */\nconst notifyNewContext: Array<(ctx: Context) => void> = [];\n\n/**\n * Used internally to setup a new Context\n */\nexport function onContextInit(cb: (ctx: Context) => void): void {\n\tnotifyNewContext.push(cb);\n}\n\n/**\n * Invoke any classes which need to also be initialized when a new context is created.\n */\nexport function initializeContext(ctx: Context): void {\n\t// add any additional modules\n\tnotifyNewContext.forEach(cb => cb(ctx));\n}\n\n/**\n * Array of callbacks to invoke when a new context is created\n */\nconst notifyCloseContext: Array<(ctx: Context) => void> = [];\n\n/**\n * Used internally to tear down a Context\n */\nexport function onContextClose(cb: (ctx: Context) => void): void {\n\tnotifyCloseContext.push(cb);\n}\n\nexport function closeContext(ctx: Context): void {\n\t// add any additional modules\n\tnotifyCloseContext.forEach(cb => cb(ctx));\n}\n","import { Ticker, TickerClockSource } from \"../clock/Ticker\";\nimport { Seconds } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Emitter } from \"../util/Emitter\";\nimport { Omit } from \"../util/Interface\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isString } from \"../util/TypeCheck\";\nimport { getAudioContext } from \"./AudioContext\";\nimport { closeContext, initializeContext } from \"./ContextInitialization\";\n\ntype Transport = import(\"../clock/Transport\").Transport;\ntype Destination = import(\"./Destination\").Destination;\n\nexport type ContextLatencyHint = AudioContextLatencyCategory | \"fastest\";\n\n// these are either not used in Tone.js or deprecated and not implemented.\nexport type ExcludedFromBaseAudioContext = \"createScriptProcessor\" | \"onstatechange\" | \"addEventListener\"\n\t| \"removeEventListener\" | \"listener\" | \"dispatchEvent\" | \"audioWorklet\" | \"destination\";\n\n// the subset of the BaseAudioContext which Tone.Context implements.\nexport type BaseAudioContextSubset = Omit<BaseAudioContext, ExcludedFromBaseAudioContext>;\n\nexport interface ContextOptions {\n\tclockSource: TickerClockSource;\n\tlatencyHint: ContextLatencyHint;\n\tlookAhead: Seconds;\n\tupdateInterval: Seconds;\n\tcontext: BaseAudioContext;\n}\n\nexport interface ContextTimeoutEvent {\n\tcallback: (...args: any[]) => void;\n\tid: number;\n\ttime: Seconds;\n}\n\n/**\n * Wrapper around the native AudioContext.\n */\nexport class Context extends Emitter<\"statechange\" | \"tick\"> implements BaseAudioContextSubset {\n\n\tname = \"Context\";\n\n\t/**\n\t * The amount of time into the future events are scheduled. Giving Web Audio\n\t * a short amount of time into the future to schedule events can reduce clicks and\n\t * improve performance. This value can be set to 0 to get the lowest latency.\n\t */\n\tlookAhead: Seconds;\n\n\t/**\n\t * private reference to the BaseAudioContext\n\t */\n\tprotected readonly _context: BaseAudioContext;\n\n\t/**\n\t * A reliable callback method\n\t */\n\tprivate readonly _ticker: Ticker;\n\n\t/**\n\t *  The default latency hint\n\t */\n\tprivate _latencyHint: ContextLatencyHint | Seconds;\n\n\t/**\n\t *  An object containing all of the constants AudioBufferSourceNodes\n\t */\n\tprivate _constants = new Map<number, AudioBufferSourceNode>();\n\n\t/**\n\t *  All of the setTimeout events.\n\t */\n\tprivate _timeouts: Timeline<ContextTimeoutEvent> = new Timeline();\n\n\t/**\n\t *  The timeout id counter\n\t */\n\tprivate _timeoutIds = 0;\n\n\t/**\n\t * A reference the Transport singleton belonging to this context\n\t */\n\tprivate _transport!: Transport;\n\n\t/**\n\t * A reference the Destination singleton belonging to this context\n\t */\n\tprivate _destination!: Destination;\n\n\t/**\n\t * Private indicator if the context has been initialized\n\t */\n\tprivate _initialized: boolean = false;\n\n\tconstructor(context?: BaseAudioContext);\n\t// tslint:disable-next-line: unified-signatures\n\tconstructor(options?: Partial<ContextOptions>);\n\tconstructor() {\n\t\tsuper();\n\t\tconst options = optionsFromArguments(Context.getDefaults(), arguments, [\"context\"]);\n\n\t\tthis._context = options.context;\n\n\t\tthis._latencyHint = options.latencyHint;\n\t\tthis.lookAhead = options.lookAhead;\n\n\t\tthis._ticker = new Ticker(this.emit.bind(this, \"tick\"), options.clockSource, options.updateInterval);\n\t\tthis.on(\"tick\", this._timeoutLoop.bind(this));\n\n\t\t// fwd events from the context\n\t\tthis._context.addEventListener(\"statechange\", () => {\n\t\t\tthis.emit(\"statechange\", this.state);\n\t\t});\n\t}\n\n\tstatic getDefaults(): ContextOptions {\n\t\treturn {\n\t\t\tclockSource: \"worker\",\n\t\t\tcontext: getAudioContext(),\n\t\t\tlatencyHint: \"interactive\",\n\t\t\tlookAhead: 0.1,\n\t\t\tupdateInterval: 0.03,\n\t\t};\n\t}\n\n\t/**\n\t * Finish setting up the context. **You usually do not need to do this manually.**\n\t */\n\tinitialize(): this {\n\t\tif (!this._initialized) {\n\t\t\t// add any additional modules\n\t\t\tinitializeContext(this);\n\t\t\tthis._initialized = true;\n\t\t}\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////\n\t// BASE AUDIO CONTEXT METHODS\n\t///////////////////////////////////////////////////////////////////////\n\n\tcreateAnalyser(): AnalyserNode {\n\t\treturn this._context.createAnalyser();\n\t}\n\tcreateOscillator(): OscillatorNode {\n\t\treturn this._context.createOscillator();\n\t}\n\tcreateBufferSource(): AudioBufferSourceNode {\n\t\treturn this._context.createBufferSource();\n\t}\n\tcreateBiquadFilter(): BiquadFilterNode {\n\t\treturn this._context.createBiquadFilter();\n\t}\n\tcreateBuffer(numberOfChannels: number, length: number, sampleRate: number): AudioBuffer {\n\t\treturn this._context.createBuffer(numberOfChannels, length, sampleRate);\n\t}\n\tcreateChannelMerger(numberOfInputs?: number | undefined): ChannelMergerNode {\n\t\treturn this._context.createChannelMerger(numberOfInputs);\n\t}\n\tcreateChannelSplitter(numberOfOutputs?: number | undefined): ChannelSplitterNode {\n\t\treturn this._context.createChannelSplitter(numberOfOutputs);\n\t}\n\tcreateConstantSource(): ConstantSourceNode {\n\t\treturn this._context.createConstantSource();\n\t}\n\tcreateConvolver(): ConvolverNode {\n\t\treturn this._context.createConvolver();\n\t}\n\tcreateDelay(maxDelayTime?: number | undefined): DelayNode {\n\t\treturn this._context.createDelay(maxDelayTime);\n\t}\n\tcreateDynamicsCompressor(): DynamicsCompressorNode {\n\t\treturn this._context.createDynamicsCompressor();\n\t}\n\tcreateGain(): GainNode {\n\t\treturn this._context.createGain();\n\t}\n\tcreateIIRFilter(feedforward: number[], feedback: number[]): IIRFilterNode {\n\t\treturn this._context.createIIRFilter(feedforward, feedback);\n\t}\n\tcreatePanner(): PannerNode {\n\t\treturn this._context.createPanner();\n\t}\n\tcreatePeriodicWave(\n\t\treal: number[] | Float32Array,\n\t\timag: number[] | Float32Array,\n\t\tconstraints?: PeriodicWaveConstraints | undefined,\n\t): PeriodicWave {\n\t\treturn this._context.createPeriodicWave(real, imag, constraints);\n\t}\n\tcreateStereoPanner(): StereoPannerNode {\n\t\treturn this._context.createStereoPanner();\n\t}\n\tcreateWaveShaper(): WaveShaperNode {\n\t\treturn this._context.createWaveShaper();\n\t}\n\tdecodeAudioData(audioData: ArrayBuffer): Promise<AudioBuffer> {\n\t\treturn this._context.decodeAudioData(audioData);\n\t}\n\n\t/**\n\t *  The current time in seconds of the AudioContext.\n\t */\n\tget currentTime(): Seconds {\n\t\treturn this._context.currentTime;\n\t}\n\t/**\n\t *  The current time in seconds of the AudioContext.\n\t */\n\tget state(): AudioContextState {\n\t\treturn this._context.state;\n\t}\n\t/**\n\t *  The current time in seconds of the AudioContext.\n\t */\n\tget sampleRate(): number {\n\t\treturn this._context.sampleRate;\n\t}\n\t/**\n\t *  The listener\n\t */\n\tget listener(): AudioListener {\n\t\treturn this._context.listener;\n\t}\n\n\t/**\n\t *  There is only one Transport per Context. It is created on initialization.\n\t */\n\tget transport(): Transport {\n\t\tthis.assert(this._initialized, \"The context must be initialized before being used by invoking context.initialize()\");\n\t\treturn this._transport;\n\t}\n\tset transport(t: Transport) {\n\t\tthis.assert(!this._initialized, \"The transport cannot be set after initialization.\");\n\t\tthis._transport = t;\n\t}\n\n\t/**\n\t *  A reference to the Context's destination node.\n\t */\n\tget destination(): Destination {\n\t\tthis.assert(this._initialized, \"The context must be initialized before being used by invoking context.initialize()\");\n\t\treturn this._destination;\n\t}\n\tset destination(d: Destination) {\n\t\tthis.assert(!this._initialized, \"The transport cannot be set after initialization.\");\n\t\tthis._destination = d;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////\n\t// TICKER\n\t///////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  How often the interval callback is invoked.\n\t *  This number corresponds to how responsive the scheduling\n\t *  can be. context.updateInterval + context.lookAhead gives you the\n\t *  total latency between scheduling an event and hearing it.\n\t */\n\tget updateInterval(): Seconds {\n\t\treturn this._ticker.updateInterval;\n\t}\n\tset updateInterval(interval: Seconds) {\n\t\tthis._ticker.updateInterval = interval;\n\t}\n\n\t/**\n\t *  What the source of the clock is, either \"worker\" (default),\n\t *  \"timeout\", or \"offline\" (none).\n\t */\n\tget clockSource(): TickerClockSource {\n\t\treturn this._ticker.type;\n\t}\n\tset clockSource(type: TickerClockSource) {\n\t\tthis._ticker.type = type;\n\t}\n\n\t/**\n\t * The type of playback, which affects tradeoffs between audio\n\t * output latency and responsiveness.\n\t * In addition to setting the value in seconds, the latencyHint also\n\t * accepts the strings \"interactive\" (prioritizes low latency),\n\t * \"playback\" (prioritizes sustained playback), \"balanced\" (balances\n\t * latency and performance), and \"fastest\" (lowest latency, might glitch more often).\n\t * @example\n\t * //set the lookAhead to 0.3 seconds\n\t * Tone.context.latencyHint = 0.3;\n\t */\n\tget latencyHint(): ContextLatencyHint | Seconds {\n\t\treturn this._latencyHint;\n\t}\n\tset latencyHint(hint: ContextLatencyHint | Seconds) {\n\t\tlet lookAheadValue = 0;\n\t\tthis._latencyHint = hint;\n\t\tif (isString(hint)) {\n\t\t\tswitch (hint) {\n\t\t\t\tcase \"interactive\":\n\t\t\t\t\tlookAheadValue = 0.1;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"playback\":\n\t\t\t\t\tlookAheadValue = 0.8;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"balanced\":\n\t\t\t\t\tlookAheadValue = 0.25;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"fastest\":\n\t\t\t\t\tlookAheadValue = 0.01;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tthis.lookAhead = lookAheadValue;\n\t\tthis.updateInterval = lookAheadValue / 3;\n\t}\n\n\t/**\n\t *  The unwrapped AudioContext.\n\t */\n\tget rawContext(): BaseAudioContext {\n\t\treturn this._context;\n\t}\n\n\t/**\n\t * The current audio context time plus a short {@link lookAhead}.\n\t */\n\tnow(): Seconds {\n\t\treturn this._context.currentTime + this.lookAhead;\n\t}\n\n\t/**\n\t *  Starts the audio context from a suspended state. This is required\n\t *  to initially start the AudioContext.\n\t */\n\tresume(): Promise<void> {\n\t\tif (this._context.state === \"suspended\" && this._context instanceof AudioContext) {\n\t\t\treturn this._context.resume();\n\t\t} else {\n\t\t\treturn Promise.resolve();\n\t\t}\n\t}\n\n\t/**\n\t *  Promise which is invoked when the context is running.\n\t *  Tries to resume the context if it's not started.\n\t */\n\tasync close(): Promise<Context> {\n\t\tif (this._context instanceof AudioContext) {\n\t\t\tawait this._context.close();\n\t\t}\n\t\tif (this._initialized) {\n\t\t\tcloseContext(this);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Generate a looped buffer at some constant value.\n\t */\n\tgetConstant(val: number): AudioBufferSourceNode {\n\t\tif (this._constants.has(val)) {\n\t\t\treturn this._constants.get(val) as AudioBufferSourceNode;\n\t\t} else {\n\t\t\tconst buffer = this._context.createBuffer(1, 128, this._context.sampleRate);\n\t\t\tconst arr = buffer.getChannelData(0);\n\t\t\tfor (let i = 0; i < arr.length; i++) {\n\t\t\t\tarr[i] = val;\n\t\t\t}\n\t\t\tconst constant = this._context.createBufferSource();\n\t\t\tconstant.channelCount = 1;\n\t\t\tconstant.channelCountMode = \"explicit\";\n\t\t\tconstant.buffer = buffer;\n\t\t\tconstant.loop = true;\n\t\t\tconstant.start(0);\n\t\t\tthis._constants.set(val, constant);\n\t\t\treturn constant;\n\t\t}\n\t}\n\n\t/**\n\t *  Clean up. Also closes the audio context.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._ticker.dispose();\n\t\tthis._timeouts.dispose();\n\t\tObject.keys(this._constants).map(val => this._constants[val].disconnect());\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////\n\t// TIMEOUTS\n\t///////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  The private loop which keeps track of the context scheduled timeouts\n\t *  Is invoked from the clock source\n\t */\n\tprivate _timeoutLoop(): void  {\n\t\tconst now = this.now();\n\t\tlet firstEvent = this._timeouts.peek();\n\t\twhile (this._timeouts.length && firstEvent && firstEvent.time <= now) {\n\t\t\t// invoke the callback\n\t\t\tfirstEvent.callback();\n\t\t\t// shift the first event off\n\t\t\tthis._timeouts.shift();\n\t\t\t// get the next one\n\t\t\tfirstEvent = this._timeouts.peek();\n\t\t}\n\t}\n\n\t/**\n\t *  A setTimeout which is guarented by the clock source.\n\t *  Also runs in the offline context.\n\t *  @param  fn       The callback to invoke\n\t *  @param  timeout  The timeout in seconds\n\t *  @returns ID to use when invoking Context.clearTimeout\n\t */\n\tsetTimeout(fn: (...args: any[]) => void, timeout: Seconds): number {\n\t\tthis._timeoutIds++;\n\t\tconst now = this.now();\n\t\tthis._timeouts.add({\n\t\t\tcallback : fn,\n\t\t\tid : this._timeoutIds,\n\t\t\ttime : now + timeout,\n\t\t});\n\t\treturn this._timeoutIds;\n\t}\n\n\t/**\n\t *  Clears a previously scheduled timeout with Tone.context.setTimeout\n\t *  @param  id  The ID returned from setTimeout\n\t */\n\tclearTimeout(id: number): Context {\n\t\tthis._timeouts.forEach(event => {\n\t\t\tif (event.id === id) {\n\t\t\t\tthis._timeouts.remove(event);\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n}\n","import { version } from \"../version\";\nimport { hasAudioContext, theWindow } from \"./context/AudioContext\";\nimport { Context } from \"./context/Context\";\n\n/**\n * This dummy context is used to avoid throwing immediate errors when importing in Node.js\n */\nconst dummyContext: Context = {\n\tdestination: {},\n\ttransport: {},\n} as Context;\n\n/**\n * The global audio context which is getable and assignable through\n * getContext and setContext\n */\nlet globalContext: Context = dummyContext;\n\n/**\n * Returns the default system-wide AudioContext\n */\nexport function getContext(): Context {\n\tif (globalContext === dummyContext && hasAudioContext) {\n\t\tsetContext(new Context());\n\t}\n\treturn globalContext;\n}\n\n/**\n * Set the default audio context\n */\nexport function setContext(context: Context): void {\n\tglobalContext = context;\n\tcontext.initialize();\n}\n\n/**\n * Most browsers will not play _any_ audio until a user\n * clicks something (like a play button). Invoke this method\n * on a click or keypress event handler to start the audio context.\n * More about the Autoplay policy\n * [here](https://developers.google.com/web/updates/2017/09/autoplay-policy-changes#webaudio)\n * @example\n * document.querySelector('#playbutton').addEventListener('click', () => Tone.start())\n */\nexport function start(): Promise <void> {\n\treturn globalContext.resume();\n}\n\n/**\n * Log Tone.js + version in the console.\n */\nif (theWindow && !theWindow.TONE_SILENCE_LOGGING) {\n\tlet prefix = \"v\";\n\tif (version === \"dev\") {\n\t\tprefix = \"\";\n\t}\n\tconst printString = ` * Tone.js ${prefix}${version} * `;\n\t// tslint:disable-next-line: no-console\n\tconsole.log(`%c${printString}`, \"background: #000; color: #fff\");\n}\n","import { Decibels, GainFactor, Hertz, Interval, MidiNote, NormalRange } from \"./Units\";\n\n/**\n *  Equal power gain scale. Good for cross-fading.\n *  @param  percent (0-1)\n */\nexport function equalPowerScale(percent: NormalRange): number {\n\tconst piFactor = 0.5 * Math.PI;\n\treturn Math.sin(percent * piFactor);\n}\n\n/**\n *  Convert decibels into gain.\n */\nexport function dbToGain(db: Decibels): GainFactor {\n\treturn Math.pow(10, db / 20);\n}\n\n/**\n *  Convert gain to decibels.\n */\nexport function gainToDb(gain: GainFactor): Decibels {\n\treturn 20 * (Math.log(gain) / Math.LN10);\n}\n\n/**\n * Convert an interval (in semitones) to a frequency ratio.\n * @param interval the number of semitones above the base note\n * @example\n * tone.intervalToFrequencyRatio(0); // 1\n * tone.intervalToFrequencyRatio(12); // 2\n * tone.intervalToFrequencyRatio(-12); // 0.5\n */\nexport function intervalToFrequencyRatio(interval: Interval): number {\n\treturn Math.pow(2, (interval / 12));\n}\n\n/**\n * The Global [concert tuning pitch](https://en.wikipedia.org/wiki/Concert_pitch) which is used\n * to generate all the other pitch values from notes. A4's values in Hertz.\n */\nlet A4: Hertz = 440;\n\nexport function getA4(): Hertz {\n\treturn A4;\n}\n\nexport function setA4(freq: Hertz): void {\n\tA4 = freq;\n}\n\n/**\n * Convert a frequency value to a MIDI note.\n * @param frequency The value to frequency value to convert.\n * @example\n * ftom(440); // returns 69\n */\nexport function ftom(frequency: Hertz): MidiNote {\n\treturn 69 + Math.round(12 * Math.log2(frequency / A4)) as MidiNote;\n}\n\n/**\n * Convert a MIDI note to frequency value.\n * @param  midi The midi number to convert.\n * @return The corresponding frequency value\n * @example\n */\nexport function mtof(midi: MidiNote): Hertz {\n\treturn A4 * Math.pow(2, (midi - 69) / 12);\n}\n","import { Context } from \"../context/Context\";\nimport { Tone } from \"../Tone\";\nimport { isDefined, isObject , isString, isUndef } from \"../util/TypeCheck\";\nimport { BPM, Hertz, MidiNote, Milliseconds, Samples, Seconds, Ticks, Time } from \"./Units\";\n\nexport type TimeValue = Time | TimeBaseClass<any, any>;\n\n/**\n * The units that the TimeBase can accept. extended by other classes\n */\nexport type TimeBaseUnit = \"s\" | \"n\" | \"t\" | \"m\" | \"i\" | \"hz\" | \"tr\" | \"samples\" | \"number\";\n\nexport interface TypeFunction {\n\tregexp: RegExp;\n\tmethod: (value: string, ...args: string[]) => number;\n}\n\nexport interface TimeExpression<Type extends number> {\n\t[key: string]: {\n\t\tregexp: RegExp;\n\t\tmethod: (value: string, ...args: string[]) => Type;\n\t};\n}\n\n/**\n * TimeBase is a flexible encoding of time which can be evaluated to and from a string.\n * @param  val    The time value as a number, string or object\n * @param  units  Unit values\n * @example\n * new TimeBase(4, \"n\")\n * new TimeBase(2, \"t\")\n * new TimeBase(\"2t\")\n * new TimeBase({\"2t\" : 2})\n * new TimeBase(\"2t\") + new TimeBase(\"4n\");\n */\nexport abstract class TimeBaseClass<Type extends number, Unit extends string> extends Tone {\n\n\treadonly context: Context;\n\n\t/**\n\t * The value of the units\n\t */\n\tprotected _val?: TimeValue;\n\n\t/**\n\t * The units of time\n\t */\n\tprotected _units?: Unit;\n\n\t/**\n\t * All of the conversion expressions\n\t */\n\tprotected _expressions: TimeExpression<Type>;\n\n\t/**\n\t * The default units\n\t */\n\treadonly defaultUnits: Unit = \"s\" as Unit;\n\n\tconstructor(context: Context, value?: TimeValue, units?: Unit) {\n\t\tsuper();\n\n\t\tthis._val = value;\n\t\tthis._units = units;\n\t\tthis.context = context;\n\t\tthis._expressions = this._getExpressions();\n\t}\n\n\t/**\n\t * All of the time encoding expressions\n\t */\n\tprotected _getExpressions(): TimeExpression<Type> {\n\t\treturn {\n\t\t\thz: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._frequencyToUnits(parseFloat(value));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?)hz$/i,\n\t\t\t},\n\t\t\ti: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._ticksToUnits(parseInt(value, 10));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)i$/i,\n\t\t\t},\n\t\t\tm: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._beatsToUnits(parseInt(value, 10) * this._getTimeSignature());\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)m$/i,\n\t\t\t},\n\t\t\tn: {\n\t\t\t\tmethod: (value, dot) => {\n\t\t\t\t\tconst numericValue = parseInt(value, 10);\n\t\t\t\t\tconst scalar = dot === \".\" ? 1.5 : 1;\n\t\t\t\t\tif (numericValue === 1) {\n\t\t\t\t\t\treturn this._beatsToUnits(this._getTimeSignature()) * scalar as Type;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn this._beatsToUnits(4 / numericValue) * scalar as Type;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)n(\\.?)$/i,\n\t\t\t},\n\t\t\tnumber: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._expressions[this.defaultUnits].method.call(this, value);\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?)$/,\n\t\t\t},\n\t\t\ts: {\n\t\t\t\tmethod: (value): Type => {\n\t\t\t\t\treturn this._secondsToUnits(parseFloat(value));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?)s$/,\n\t\t\t},\n\t\t\tsamples: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn parseInt(value, 10) / this.context.sampleRate as Type;\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)samples$/,\n\t\t\t},\n\t\t\tt: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\tconst numericValue = parseInt(value, 10);\n\t\t\t\t\treturn this._beatsToUnits(8 / (Math.floor(numericValue) * 3));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)t$/i,\n\t\t\t},\n\t\t\ttr: {\n\t\t\t\tmethod: (m, q, s) => {\n\t\t\t\t\tlet total = 0;\n\t\t\t\t\tif (m && m !== \"0\") {\n\t\t\t\t\t\ttotal += this._beatsToUnits(this._getTimeSignature() * parseFloat(m));\n\t\t\t\t\t}\n\t\t\t\t\tif (q && q !== \"0\") {\n\t\t\t\t\t\ttotal += this._beatsToUnits(parseFloat(q));\n\t\t\t\t\t}\n\t\t\t\t\tif (s && s !== \"0\") {\n\t\t\t\t\t\ttotal += this._beatsToUnits(parseFloat(s) / 4);\n\t\t\t\t\t}\n\t\t\t\t\treturn total as Type;\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?$/,\n\t\t\t},\n\t\t};\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tVALUE OF\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Evaluate the time value. Returns the time in seconds.\n\t */\n\tvalueOf(): Type {\n\t\tif (this._val instanceof TimeBaseClass) {\n\t\t\tthis.fromType(this._val);\n\t\t}\n\t\tif (isUndef(this._val)) {\n\t\t\treturn this._noArg();\n\t\t} else if (isString(this._val) && isUndef(this._units)) {\n\t\t\tfor (const units in this._expressions) {\n\t\t\t\tif (this._expressions[units].regexp.test(this._val.trim())) {\n\t\t\t\t\tthis._units = units as Unit;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (isObject(this._val)) {\n\t\t\tlet total = 0;\n\t\t\tfor (const typeName in this._val) {\n\t\t\t\tif (isDefined(this._val[typeName])) {\n\t\t\t\t\tconst quantity = this._val[typeName];\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tconst time = (new this.constructor(this.context, typeName)).valueOf() * quantity;\n\t\t\t\t\ttotal += time;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn total as Type;\n\t\t}\n\t\tif (isDefined(this._units)) {\n\t\t\tconst expr = this._expressions[this._units];\n\t\t\tconst matching = this._val.toString().trim().match(expr.regexp);\n\t\t\tif (matching) {\n\t\t\t\treturn expr.method.apply(this, matching.slice(1));\n\t\t\t} else {\n\t\t\t\treturn expr.method.call(this, this._val);\n\t\t\t}\n\t\t} else if (isString(this._val)) {\n\t\t\treturn parseFloat(this._val) as Type;\n\t\t} else {\n\t\t\treturn this._val as Type;\n\t\t}\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tUNIT CONVERSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Returns the value of a frequency in the current units\n\t */\n\tprotected _frequencyToUnits(freq: Hertz): Type {\n\t\treturn 1 / freq as Type;\n\t}\n\n\t/**\n\t *  Return the value of the beats in the current units\n\t */\n\tprotected _beatsToUnits(beats: number): Type {\n\t\treturn (60 / this._getBpm()) * beats as Type;\n\t}\n\n\t/**\n\t *  Returns the value of a second in the current units\n\t */\n\tprotected _secondsToUnits(seconds: Seconds): Type {\n\t\treturn seconds as Type;\n\t}\n\n\t/**\n\t *  Returns the value of a tick in the current time units\n\t *  @private\n\t */\n\tprotected _ticksToUnits(ticks: Ticks): Type {\n\t\treturn (ticks * (this._beatsToUnits(1)) / this._getPPQ()) as Type;\n\t}\n\n\t/**\n\t *  With no arguments, return 'now'\n\t */\n\tprotected _noArg(): Type {\n\t\treturn this._now();\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tTEMPO CONVERSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Return the bpm\n\t */\n\tprotected _getBpm(): BPM {\n\t\treturn this.context.transport.bpm.value;\n\t}\n\n\t/**\n\t * Return the timeSignature\n\t */\n\tprotected _getTimeSignature(): number {\n\t\treturn this.context.transport.timeSignature as number;\n\t}\n\n\t/**\n\t * Return the PPQ or 192 if Transport is not available\n\t */\n\tprotected _getPPQ(): number {\n\t\treturn this.context.transport.PPQ;\n\t}\n\n\t/**\n\t * Return the current time in whichever context is relevant\n\t */\n\tprotected abstract _now(): Type;\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tCONVERSION INTERFACE\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Coerce a time type into this units type.\n\t * @param type Any time type units\n\t */\n\tfromType(type: TimeBaseClass<any, any>): this {\n\t\tthis._units = undefined;\n\t\tswitch (this.defaultUnits) {\n\t\t\tcase \"s\":\n\t\t\t\tthis._val = type.toSeconds();\n\t\t\t\tbreak;\n\t\t\tcase \"i\":\n\t\t\t\tthis._val = type.toTicks();\n\t\t\t\tbreak;\n\t\t\tcase \"hz\":\n\t\t\t\tthis._val = type.toFrequency();\n\t\t\t\tbreak;\n\t\t\tcase \"midi\":\n\t\t\t\tthis._val = type.toMidi();\n\t\t\t\tbreak;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Return the value in seconds\n\t */\n\tabstract toSeconds(): Seconds;\n\n\t/**\n\t *  Return the value as a Midi note\n\t */\n\tabstract toMidi(): MidiNote;\n\n\t/**\n\t * Convert the value into ticks\n\t */\n\tabstract toTicks(): Ticks;\n\n\t/**\n\t *  Return the value in hertz\n\t */\n\ttoFrequency(): Hertz {\n\t\treturn 1 / this.toSeconds();\n\t}\n\n\t/**\n\t *  Return the time in samples\n\t */\n\ttoSamples(): Samples {\n\t\treturn this.toSeconds() * this.context.sampleRate;\n\t}\n\n\t/**\n\t *  Return the time in milliseconds.\n\t */\n\ttoMilliseconds(): Milliseconds {\n\t\treturn this.toSeconds() * 1000;\n\t}\n}\n","import { getContext } from \"../Global\";\nimport { ftom } from \"./Conversions\";\nimport { TimeBaseClass, TimeBaseUnit, TimeExpression, TimeValue } from \"./TimeBase\";\nimport { BarsBeatsSixteenths, MidiNote, Seconds, Subdivision, Ticks, Time } from \"./Units\";\n\n/**\n * TimeClass is a primitive type for encoding and decoding Time values.\n * TimeClass can be passed into the parameter of any method which takes time as an argument.\n * @param  val    The time value.\n * @param  units  The units of the value.\n * @example\n * var t = Time(\"4n\");//a quarter note\n */\nexport class TimeClass<Type extends Seconds | Ticks = Seconds, Unit extends string = TimeBaseUnit>\nextends TimeBaseClass<Type, Unit> {\n\n\tname = \"Time\";\n\n\tprotected _getExpressions(): TimeExpression<Type> {\n\t\treturn Object.assign(super._getExpressions(), {\n\t\t\tnow: {\n\t\t\t\tmethod: (capture: string): Type => {\n\t\t\t\t\treturn this._now() + new (this.constructor as typeof TimeClass)(this.context, capture).valueOf() as Type;\n\t\t\t\t},\n\t\t\t\tregexp: /^\\+(.+)/,\n\t\t\t},\n\t\t\tquantize: {\n\t\t\t\tmethod: (capture: string): Type => {\n\t\t\t\t\tconst quantTo = new TimeClass(this.context, capture).valueOf();\n\t\t\t\t\treturn this._secondsToUnits(this.context.transport.nextSubdivision(quantTo));\n\t\t\t\t},\n\t\t\t\tregexp: /^@(.+)/,\n\t\t\t},\n\t\t});\n\t}\n\n\t/**\n\t * Quantize the time by the given subdivision. Optionally add a\n\t * percentage which will move the time value towards the ideal\n\t * quantized value by that percentage.\n\t * @param  val    The subdivision to quantize to\n\t * @param  percent  Move the time value towards the quantized value by a percentage.\n\t * @example\n\t * Time(21).quantize(2) //returns 22\n\t * Time(0.6).quantize(\"4n\", 0.5) //returns 0.55\n\t */\n\tquantize(subdiv: Time, percent = 1): Type {\n\t\tconst subdivision = new (this.constructor as typeof TimeClass)(this.context, subdiv).valueOf();\n\t\tconst value = this.valueOf();\n\t\tconst multiple = Math.round(value / subdivision);\n\t\tconst ideal = multiple * subdivision;\n\t\tconst diff = ideal - value;\n\t\treturn value + diff * percent as Type;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// CONVERSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\t/**\n\t *  Convert a Time to Notation. The notation values are will be the\n\t *  closest representation between 1m to 128th note.\n\t *  @return {Notation}\n\t *  @example\n\t * //if the Transport is at 120bpm:\n\t * Time(2).toNotation();//returns \"1m\"\n\t */\n\ttoNotation(): Subdivision {\n\t\tconst time = this.toSeconds();\n\t\tconst testNotations: Subdivision[] = [\"1m\"];\n\t\tfor (let power = 1; power < 9; power++) {\n\t\t\tconst subdiv = Math.pow(2, power);\n\t\t\ttestNotations.push(subdiv + \"n.\" as Subdivision);\n\t\t\ttestNotations.push(subdiv + \"n\" as Subdivision);\n\t\t\ttestNotations.push(subdiv + \"t\" as Subdivision);\n\t\t}\n\t\ttestNotations.push(\"0\");\n\t\t// find the closets notation representation\n\t\tlet closest = testNotations[0];\n\t\tlet closestSeconds = new TimeClass(this.context, testNotations[0]).toSeconds();\n\t\ttestNotations.forEach(notation => {\n\t\t\tconst notationSeconds = new TimeClass(this.context, notation).toSeconds();\n\t\t\tif (Math.abs(notationSeconds - time) < Math.abs(closestSeconds - time)) {\n\t\t\t\tclosest = notation;\n\t\t\t\tclosestSeconds = notationSeconds;\n\t\t\t}\n\t\t});\n\t\treturn closest;\n\t}\n\n\t/**\n\t *  Return the time encoded as Bars:Beats:Sixteenths.\n\t */\n\ttoBarsBeatsSixteenths(): BarsBeatsSixteenths {\n\t\tconst quarterTime = this._beatsToUnits(1);\n\t\tlet quarters = this.valueOf() / quarterTime;\n\t\tquarters = parseFloat(quarters.toFixed(4));\n\t\tconst measures = Math.floor(quarters / this._getTimeSignature());\n\t\tlet sixteenths = (quarters % 1) * 4;\n\t\tquarters = Math.floor(quarters) % this._getTimeSignature();\n\t\tconst sixteenthString = sixteenths.toString();\n\t\tif (sixteenthString.length > 3) {\n\t\t\t// the additional parseFloat removes insignificant trailing zeroes\n\t\t\tsixteenths = parseFloat(parseFloat(sixteenthString).toFixed(3));\n\t\t}\n\t\tconst progress = [measures, quarters, sixteenths];\n\t\treturn progress.join(\":\");\n\t}\n\n\t/**\n\t *  Return the time in ticks.\n\t */\n\ttoTicks(): Ticks {\n\t\tconst quarterTime = this._beatsToUnits(1);\n\t\tconst quarters = this.valueOf() / quarterTime;\n\t\treturn Math.round(quarters * this._getPPQ());\n\t}\n\n\t/**\n\t *  Return the time in seconds.\n\t */\n\ttoSeconds(): Seconds {\n\t\treturn this.valueOf();\n\t}\n\n\t/**\n\t *  Return the value as a midi note.\n\t */\n\ttoMidi(): MidiNote {\n\t\treturn ftom(this.toFrequency());\n\t}\n\n\tprotected _now(): Type {\n\t\treturn this.context.now() as Type;\n\t}\n}\n\n/**\n * Create a TimeClass from a time string or number.\n * @param value A value which reprsents time\n * @param units The value's units if they can't be inferred by the value.\n */\nexport function Time(value?: TimeValue, units?: TimeBaseUnit): TimeClass<Seconds> {\n\treturn new TimeClass(getContext(), value, units);\n}\n","import { getContext } from \"../Global\";\nimport { intervalToFrequencyRatio, mtof } from \"./Conversions\";\nimport { ftom, getA4, setA4 } from \"./Conversions\";\nimport { TimeClass } from \"./Time\";\nimport { TimeBaseClass, TimeBaseUnit, TimeExpression, TimeValue } from \"./TimeBase\";\nimport { Frequency, Hertz, Interval, MidiNote, Note, Seconds, Ticks } from \"./Units\";\n\nexport type FrequencyUnit = TimeBaseUnit | \"midi\";\n\n/**\n * Frequency is a primitive type for encoding Frequency values.\n * Eventually all time values are evaluated to hertz using the `eval` method.\n * @example\n * Frequency(\"C3\") // 261\n * Frequency(38, \"midi\") //\n * Frequency(\"C3\").transpose(4);\n */\nexport class FrequencyClass<Type extends number = Hertz> extends TimeClass<Type, FrequencyUnit> {\n\n\tname = \"Frequency\";\n\n\treadonly defaultUnits: FrequencyUnit = \"hz\";\n\n\t/**\n\t * The [concert tuning pitch](https://en.wikipedia.org/wiki/Concert_pitch) which is used\n\t * to generate all the other pitch values from notes. A4's values in Hertz.\n\t */\n\tstatic get A4(): Hertz {\n\t\treturn getA4();\n\t}\n\tstatic set A4(freq: Hertz) {\n\t\tsetA4(freq);\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tAUGMENT BASE EXPRESSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\tprotected _getExpressions(): TimeExpression<Type> {\n\t\treturn Object.assign({}, super._getExpressions(), {\n\t\t\tmidi : {\n\t\t\t\tregexp : /^(\\d+(?:\\.\\d+)?midi)/,\n\t\t\t\tmethod(value): number {\n\t\t\t\t\tif (this.defaultUnits === \"midi\") {\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn FrequencyClass.mtof(value);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\tnote : {\n\t\t\t\tregexp : /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i,\n\t\t\t\tmethod(pitch, octave): number {\n\t\t\t\t\tconst index = noteToScaleIndex[pitch.toLowerCase()];\n\t\t\t\t\tconst noteNumber = index + (parseInt(octave, 10) + 1) * 12;\n\t\t\t\t\tif (this.defaultUnits === \"midi\") {\n\t\t\t\t\t\treturn noteNumber;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn FrequencyClass.mtof(noteNumber);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\ttr : {\n\t\t\t\tregexp : /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?/,\n\t\t\t\tmethod(m, q, s): number {\n\t\t\t\t\tlet total = 1;\n\t\t\t\t\tif (m && m !== \"0\") {\n\t\t\t\t\t\ttotal *= this._beatsToUnits(this._getTimeSignature() * parseFloat(m));\n\t\t\t\t\t}\n\t\t\t\t\tif (q && q !== \"0\") {\n\t\t\t\t\t\ttotal *= this._beatsToUnits(parseFloat(q));\n\t\t\t\t\t}\n\t\t\t\t\tif (s && s !== \"0\") {\n\t\t\t\t\t\ttotal *= this._beatsToUnits(parseFloat(s) / 4);\n\t\t\t\t\t}\n\t\t\t\t\treturn total;\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tEXPRESSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Transposes the frequency by the given number of semitones.\n\t *  @return  A new transposed frequency\n\t *  @example\n\t * Frequency(\"A4\").transpose(3); //\"C5\"\n\t */\n\ttranspose(interval: Interval): FrequencyClass {\n\t\treturn new FrequencyClass(this.context, this.valueOf() * intervalToFrequencyRatio(interval));\n\t}\n\n\t/**\n\t *  Takes an array of semitone intervals and returns\n\t *  an array of frequencies transposed by those intervals.\n\t *  @return  Returns an array of Frequencies\n\t *  @example\n\t * Frequency(\"A4\").harmonize([0, 3, 7]); //[\"A4\", \"C5\", \"E5\"]\n\t */\n\tharmonize(intervals: Interval[]): FrequencyClass[] {\n\t\treturn intervals.map(interval => {\n\t\t\treturn this.transpose(interval);\n\t\t});\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tUNIT CONVERSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Return the value of the frequency as a MIDI note\n\t *  @return  {MIDI}\n\t *  @example\n\t * Frequency(\"C4\").toMidi(); //60\n\t */\n\ttoMidi(): MidiNote {\n\t\treturn ftom(this.valueOf());\n\t}\n\n\t/**\n\t *  Return the value of the frequency in Scientific Pitch Notation\n\t *  @return  {Note}\n\t *  @example\n\t * Frequency(69, \"midi\").toNote(); //\"A4\"\n\t */\n\ttoNote(): Note {\n\t\tconst freq = this.toFrequency();\n\t\tconst log = Math.log2(freq / FrequencyClass.A4);\n\t\tlet noteNumber = Math.round(12 * log) + 57;\n\t\tconst octave = Math.floor(noteNumber / 12);\n\t\tif (octave < 0) {\n\t\t\tnoteNumber += -12 * octave;\n\t\t}\n\t\tconst noteName = scaleIndexToNote[noteNumber % 12];\n\t\treturn noteName + octave.toString() as Note;\n\t}\n\n\t/**\n\t *  Return the duration of one cycle in seconds.\n\t */\n\ttoSeconds(): Seconds {\n\t\treturn 1 / super.toSeconds();\n\t}\n\n\t/**\n\t *  Return the duration of one cycle in ticks\n\t */\n\ttoTicks(): Ticks {\n\t\tconst quarterTime = this._beatsToUnits(1);\n\t\tconst quarters = this.valueOf() / quarterTime;\n\t\treturn Math.floor(quarters * this._getPPQ());\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tUNIT CONVERSIONS HELPERS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  With no arguments, return 0\n\t */\n\tprotected _noArg(): Type {\n\t\treturn 0 as Type;\n\t}\n\n\t/**\n\t *  Returns the value of a frequency in the current units\n\t */\n\tprotected _frequencyToUnits(freq: Hertz): Type {\n\t\treturn freq as Type;\n\t}\n\n\t/**\n\t *  Returns the value of a tick in the current time units\n\t */\n\tprotected _ticksToUnits(ticks: Ticks): Type {\n\t\treturn 1 / ((ticks * 60) / (this._getBpm() * this._getPPQ())) as Type;\n\t}\n\n\t/**\n\t *  Return the value of the beats in the current units\n\t */\n\tprotected _beatsToUnits(beats: number): Type {\n\t\treturn 1 / super._beatsToUnits(beats) as Type;\n\t}\n\n\t/**\n\t *  Returns the value of a second in the current units\n\t */\n\tprotected _secondsToUnits(seconds: Seconds): Type {\n\t\treturn 1 / seconds as Type;\n\t}\n\n\t/**\n\t * Convert a MIDI note to frequency value.\n\t * @param  midi The midi number to convert.\n\t * @return The corresponding frequency value\n\t * @example\n\t * FrequencyClass.mtof(69); // returns 440\n\t */\n\tstatic mtof(midi: MidiNote): Hertz {\n\t\treturn mtof(midi);\n\t}\n\n\t/**\n\t * Convert a frequency value to a MIDI note.\n\t * @param frequency The value to frequency value to convert.\n\t * @example\n\t * Frequency.ftom(440); // returns 69\n\t */\n\tstatic ftom(frequency: Hertz): MidiNote {\n\t\treturn ftom(frequency);\n\t}\n}\n\n///////////////////////////////////////////////////////////////////////////\n// \tFREQUENCY CONVERSIONS\n///////////////////////////////////////////////////////////////////////////\n\n/**\n *  Note to scale index\n *  @type  {Object}\n *  @private\n */\nconst noteToScaleIndex = {\n\t// tslint:disable-next-line\n\t\"cbb\" : -2, \"cb\" : -1, \"c\" : 0, \"c#\" : 1, \"cx\" : 2,\n\t\"dbb\" : 0, \"db\" : 1, \"d\" : 2, \"d#\" : 3, \"dx\" : 4,\n\t\"ebb\" : 2, \"eb\" : 3, \"e\" : 4, \"e#\" : 5, \"ex\" : 6,\n\t\"fbb\" : 3, \"fb\" : 4, \"f\" : 5, \"f#\" : 6, \"fx\" : 7,\n\t\"gbb\" : 5, \"gb\" : 6, \"g\" : 7, \"g#\" : 8, \"gx\" : 9,\n\t\"abb\" : 7, \"ab\" : 8, \"a\" : 9, \"a#\" : 10, \"ax\" : 11,\n\t\"bbb\" : 9, \"bb\" : 10, \"b\" : 11, \"b#\" : 12, \"bx\" : 13,\n};\n\n/**\n *  scale index to note (sharps)\n *  @type  {Array}\n *  @private\n */\nconst scaleIndexToNote = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n\n/**\n * Convert a value into a FrequencyClass object.\n */\nexport function Frequency(value?: TimeValue | Frequency, units?: FrequencyUnit): FrequencyClass {\n\treturn new FrequencyClass(getContext(), value, units);\n}\n","import { getContext } from \"../Global\";\nimport { Seconds, Ticks } from \"../type/Units\";\nimport { TimeClass } from \"./Time\";\nimport { TimeBaseUnit, TimeValue } from \"./TimeBase\";\n\n/**\n * TransportTime is a the time along the Transport's\n * timeline. It is similar to Tone.Time, but instead of evaluating\n * against the AudioContext's clock, it is evaluated against\n * the Transport's position. See [TransportTime wiki](https://github.com/Tonejs/Tone.js/wiki/TransportTime).\n */\nexport class TransportTimeClass<Type extends Seconds | Ticks = Seconds> extends TimeClass<Type> {\n\n\tname = \"TransportTime\";\n\n\t/**\n\t * Return the current time in whichever context is relevant\n\t */\n\tprotected _now(): Type {\n\t\treturn this.context.transport.seconds as Type;\n\t}\n}\n\n/**\n * TransportTime is a the time along the Transport's\n * timeline. It is similar to Tone.Time, but instead of evaluating\n * against the AudioContext's clock, it is evaluated against\n * the Transport's position. See [TransportTime wiki](https://github.com/Tonejs/Tone.js/wiki/TransportTime).\n */\nexport function TransportTime(value?: TimeValue, units?: TimeBaseUnit): TransportTimeClass {\n\treturn new TransportTimeClass(getContext(), value, units);\n}\n","import { getContext } from \"../Global\";\nimport { Tone } from \"../Tone\";\nimport { FrequencyClass } from \"../type/Frequency\";\nimport { TimeClass } from \"../type/Time\";\nimport { TransportTimeClass } from \"../type/TransportTime\";\nimport { Frequency, Hertz, Seconds, Ticks, Time } from \"../type/Units\";\nimport { getDefaultsFromInstance, omitFromObject, optionsFromArguments } from \"../util/Defaults\";\nimport { RecursivePartial } from \"../util/Interface\";\nimport { isArray, isBoolean, isDefined, isNumber, isString, isUndef } from \"../util/TypeCheck\";\nimport { Context } from \"./Context\";\n\n/**\n * A unit which process audio\n */\nexport interface ToneWithContextOptions {\n\tcontext: Context;\n}\n\n/**\n * The Base class for all nodes that have an AudioContext.\n */\nexport abstract class ToneWithContext<Options extends ToneWithContextOptions> extends Tone {\n\n\t/**\n\t * The context belonging to the node.\n\t */\n\treadonly context: Context;\n\n\t/**\n\t * The default context to use if no AudioContext is passed in to the constructor\n\t */\n\treadonly defaultContext?: Context;\n\n\tconstructor(context?: Context | Partial<ToneWithContextOptions>) {\n\t\tconst options = optionsFromArguments(ToneWithContext.getDefaults(), arguments, [\"context\"]);\n\t\tsuper();\n\t\tif (this.defaultContext) {\n\t\t\tthis.context = this.defaultContext;\n\t\t} else {\n\t\t\tthis.context = options.context;\n\t\t}\n\t}\n\n\tstatic getDefaults(): ToneWithContextOptions {\n\t\treturn {\n\t\t\tcontext: getContext(),\n\t\t};\n\t}\n\n\t/**\n\t * Return the current time of the Context clock plus the lookAhead.\n\t */\n\tnow(): Seconds {\n\t\treturn this.context.currentTime + this.context.lookAhead;\n\t}\n\n\t/**\n\t * Return the current time of the Context clock without any lookAhead.\n\t */\n\timmediate(): Seconds {\n\t\treturn this.context.currentTime;\n\t}\n\n\t/**\n\t * The duration in seconds of one sample.\n\t */\n\tget sampleTime(): Seconds {\n\t\treturn 1 / this.context.sampleRate;\n\t}\n\n\t/**\n\t * The number of seconds of 1 processing block (128 samples)\n\t */\n\tget blockTime(): Seconds {\n\t\treturn 128 / this.context.sampleRate;\n\t}\n\n\t/**\n\t * Convert the incoming time to seconds\n\t */\n\ttoSeconds(time?: Time): Seconds {\n\t\treturn new TimeClass(this.context, time).toSeconds();\n\t}\n\n\t/**\n\t * Convert the input to a frequency number\n\t */\n\ttoFrequency(freq: Frequency): Hertz {\n\t\treturn new FrequencyClass(this.context, freq).toFrequency();\n\t}\n\n\t/**\n\t * Convert the input time into ticks\n\t */\n\ttoTicks(time?: Time | TimeClass): Ticks {\n\t\treturn new TransportTimeClass(this.context, time).toTicks();\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tGET/SET\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Get the object's attributes.\n\t * @example\n\t * osc.get();\n\t * //returns {\"type\" : \"sine\", \"frequency\" : 440, ...etc}\n\t */\n\tget(): Options {\n\t\tconst defaults = getDefaultsFromInstance(this) as Options;\n\t\tObject.keys(defaults).forEach(attribute => {\n\t\t\tif (Reflect.has(this, attribute)) {\n\t\t\t\tconst member = this[attribute];\n\t\t\t\tif (isDefined(member) && isDefined(member.value) && isDefined(member.setValueAtTime)) {\n\t\t\t\t\tdefaults[attribute] = member.value;\n\t\t\t\t} else if (member instanceof ToneWithContext) {\n\t\t\t\t\tdefaults[attribute] = member.get();\n\t\t\t\t// otherwise make sure it's a serializable type\n\t\t\t\t} else if (isArray(member) || isNumber(member) || isString(member) || isBoolean(member)) {\n\t\t\t\t\tdefaults[attribute] = member;\n\t\t\t\t} else {\n\t\t\t\t\t// remove all undefined and unserializable attributes\n\t\t\t\t\tdelete defaults[attribute];\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn defaults;\n\t}\n\n\t/**\n\t * Set the parameters at once. Either pass in an\n\t * object mapping parameters to values, or to set a\n\t * single parameter, by passing in a string and value.\n\t * The last argument is an optional ramp time which\n\t * will ramp any signal values to their destination value\n\t * over the duration of the rampTime.\n\t * @param  params\n\t * @example\n\t * //set values using an object\n\t * filter.set({\n\t * \t\"frequency\" : 300,\n\t * \t\"type\" : \"highpass\"\n\t * });\n\t */\n\tset(props: RecursivePartial<Options>): this {\n\t\tObject.keys(props).forEach(attribute => {\n\t\t\tif (Reflect.has(this, attribute) && isDefined(this[attribute])) {\n\t\t\t\tif (this[attribute] && isDefined(this[attribute].value) && isDefined(this[attribute].setValueAtTime)) {\n\t\t\t\t\tthis[attribute].value = props[attribute];\n\t\t\t\t} else if (this[attribute] instanceof ToneWithContext) {\n\t\t\t\t\tthis[attribute].set(props[attribute]);\n\t\t\t\t} else {\n\t\t\t\t\tthis[attribute] = props[attribute];\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n}\n","import { AbstractParam } from \"../context/AbstractParam\";\nimport { dbToGain, gainToDb } from \"../type/Conversions\";\nimport { AudioRange, Decibels, Frequency, NormalRange, Positive, Time, Unit, UnitName } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isDefined, isNumber } from \"../util/TypeCheck\";\nimport { ToneWithContext, ToneWithContextOptions } from \"./ToneWithContext\";\n\nexport interface ParamOptions extends ToneWithContextOptions {\n\tunits: UnitName;\n\tvalue?: any;\n\tparam: AudioParam;\n\tconvert: boolean;\n}\n\n/**\n * the possible automation types\n */\ntype AutomationType = \"linear\" | \"exponential\" | \"setValue\" | \"setTarget\" | \"cancel\";\n\n/**\n * The events on the automation\n */\nexport interface AutomationEvent {\n\ttype: AutomationType;\n\ttime: number;\n\tvalue: number;\n\tconstant?: number;\n}\n\n/**\n *  Param wraps the native Web Audio's AudioParam to provide\n * additional unit conversion functionality. It also\n * serves as a base-class for classes which have a single,\n * automatable parameter.\n */\nexport class Param<Type extends Unit = number>\nextends ToneWithContext<ParamOptions>\nimplements AbstractParam<Type> {\n\n\tname = \"Param\";\n\n\tstatic getDefaults(): ParamOptions {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tconvert: true,\n\t\t\tunits: \"number\" as UnitName,\n\t\t} as ParamOptions);\n\t}\n\n\t/**\n\t * The input connection\n\t */\n\treadonly input: AudioParam;\n\treadonly units: UnitName;\n\tconvert: boolean;\n\toverridden: boolean = false;\n\n\t/**\n\t * The timeline which tracks all of the automations.\n\t */\n\tprotected _events: Timeline<AutomationEvent>;\n\n\t/**\n\t *  The native parameter to control\n\t */\n\tprotected _param: AudioParam;\n\n\t/**\n\t *  The default value before anything is assigned\n\t */\n\tprotected _initialValue: number;\n\n\t/**\n\t *  The minimum output value\n\t */\n\tprivate _minOutput = 1e-5;\n\n\tconstructor(param: AudioParam, units?: Unit, convert?: boolean);\n\tconstructor(options: Partial<ParamOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Param.getDefaults(), arguments, [\"param\", \"units\", \"convert\"]));\n\n\t\tconst options = optionsFromArguments(Param.getDefaults(), arguments, [\"param\", \"units\", \"convert\"]);\n\n\t\tthis.assert(isDefined(options.param) && options.param instanceof AudioParam, \"param must be an AudioParam\");\n\n\t\t// initialize\n\t\tthis._param = this.input = options.param;\n\t\tthis._events = new Timeline<AutomationEvent>(1000);\n\t\tthis._initialValue = this._param.value;\n\t\tthis.units = options.units;\n\t\tthis.convert = options.convert;\n\n\t\t// if the value is defined, set it immediately\n\t\tif (isDefined(options.value)) {\n\t\t\tthis.setValueAtTime(options.value, 0);\n\t\t}\n\t}\n\n\tget value(): Type {\n\t\tconst now = this.now();\n\t\treturn this.getValueAtTime(now);\n\t}\n\tset value(value: Type) {\n\t\tthis._initialValue = this._fromType(value);\n\t\tthis.cancelScheduledValues(this.now());\n\t\tthis.setValueAtTime(value, this.now());\n\t}\n\n\tget minValue(): number {\n\t\tif (this.units === \"time\" || this.units === \"frequency\" ||\n\t\t\tthis.units === \"normalRange\" || this.units === \"positive\" ||\n\t\t\tthis.units === \"transportTime\" || this.units === \"ticks\" ||\n\t\t\tthis.units === \"bpm\" || this.units === \"hertz\" || this.units === \"samples\") {\n\t\t\treturn 0;\n\t\t} else if (this.units === \"audioRange\") {\n\t\t\treturn -1;\n\t\t} else if (this.units === \"decibels\") {\n\t\t\treturn -Infinity;\n\t\t} else {\n\t\t\treturn this._param.minValue;\n\t\t}\n\t}\n\n\tget maxValue(): number {\n\t\tif (this.units === \"normalRange\" ||\n\t\t\tthis.units === \"audioRange\") {\n\t\t\treturn 1;\n\t\t} else {\n\t\t\treturn this._param.maxValue;\n\t\t}\n\t}\n\n\t/**\n\t * Type guard based on the unit name\n\t */\n\tprivate _is<T>(arg: any, type: UnitName): arg is T {\n\t\treturn this.units === type;\n\t}\n\n\t/**\n\t *  Convert the given value from the type specified by Param.units\n\t *  into the destination value (such as Gain or Frequency).\n\t */\n\tprotected _fromType(val: Type): number {\n\t\tif (this.convert && !this.overridden) {\n\t\t\tif (this._is<Time>(val, \"time\")) {\n\t\t\t\treturn this.toSeconds(val);\n\t\t\t} else if (this._is<Decibels>(val, \"decibels\")) {\n\t\t\t\treturn dbToGain(val);\n\t\t\t} else if (this._is<Frequency>(val, \"frequency\")) {\n\t\t\t\treturn this.toFrequency(val);\n\t\t\t} else if (this._is<NormalRange>(val, \"normalRange\")) {\n\t\t\t\treturn Math.min(Math.max(val, 0), 1);\n\t\t\t} else if (this._is<AudioRange>(val, \"audioRange\")) {\n\t\t\t\treturn Math.min(Math.max(val, -1), 1);\n\t\t\t} else if (this._is<Positive>(val, \"positive\")) {\n\t\t\t\treturn Math.max(val, 0);\n\t\t\t} else if (this._is<number>(val, \"number\")) {\n\t\t\t\treturn val;\n\t\t\t} else {\n\t\t\t\treturn val as number;\n\t\t\t}\n\t\t} else {\n\t\t\treturn val as number;\n\t\t}\n\t}\n\n\t/**\n\t * Convert the parameters value into the units specified by Param.units.\n\t */\n\tprotected _toType(val: number): Type {\n\t\tif (this.convert && this.units === \"decibels\") {\n\t\t\treturn gainToDb(val) as Type;\n\t\t} else {\n\t\t\treturn val as Type;\n\t\t}\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// ABSTRACT PARAM INTERFACE\n\t// all docs are generated from ParamInterface.ts\n\t///////////////////////////////////////////////////////////////////////////\n\n\tsetValueAtTime(value: Type, time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst numericValue = this._fromType(value);\n\t\tthis._events.add({\n\t\t\ttime: computedTime,\n\t\t\ttype: \"setValue\",\n\t\t\tvalue: numericValue,\n\t\t});\n\t\tthis.log(\"setValue\", value, computedTime);\n\t\tthis.assert(isFinite(numericValue) && isFinite(computedTime),\n\t\t\t`Invalid argument(s) to setValueAtTime: ${JSON.stringify(value)}, ${JSON.stringify(time)}`);\n\t\tthis._param.setValueAtTime(numericValue, computedTime);\n\t\treturn this;\n\t}\n\n\tgetValueAtTime(time: Time): Type {\n\t\tconst computedTime = Math.max(this.toSeconds(time), 0);\n\t\tconst after = this._events.getAfter(computedTime);\n\t\tconst before = this._events.get(computedTime);\n\t\tlet value = this._initialValue;\n\t\t// if it was set by\n\t\tif (before === null) {\n\t\t\tvalue = this._initialValue;\n\t\t} else if (before.type === \"setTarget\" && (after === null || after.type === \"setValue\")) {\n\t\t\tconst previous = this._events.getBefore(before.time);\n\t\t\tlet previousVal;\n\t\t\tif (previous === null) {\n\t\t\t\tpreviousVal = this._initialValue;\n\t\t\t} else {\n\t\t\t\tpreviousVal = previous.value;\n\t\t\t}\n\t\t\tif (isDefined(before.constant)) {\n\t\t\t\tvalue = this._exponentialApproach(before.time, previousVal, before.value, before.constant, computedTime);\n\t\t\t}\n\t\t} else if (after === null) {\n\t\t\tvalue = before.value;\n\t\t} else if (after.type === \"linear\" || after.type === \"exponential\") {\n\t\t\tlet beforeValue = before.value;\n\t\t\tif (before.type === \"setTarget\") {\n\t\t\t\tconst previous = this._events.getBefore(before.time);\n\t\t\t\tif (previous === null) {\n\t\t\t\t\tbeforeValue = this._initialValue;\n\t\t\t\t} else {\n\t\t\t\t\tbeforeValue = previous.value;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (after.type === \"linear\") {\n\t\t\t\tvalue = this._linearInterpolate(before.time, beforeValue, after.time, after.value, computedTime);\n\t\t\t} else {\n\t\t\t\tvalue = this._exponentialInterpolate(before.time, beforeValue, after.time, after.value, computedTime);\n\t\t\t}\n\t\t} else {\n\t\t\tvalue = before.value;\n\t\t}\n\t\treturn this._toType(value);\n\t}\n\n\tsetRampPoint(time: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tlet currentVal = this.getValueAtTime(time);\n\t\tthis.cancelAndHoldAtTime(time);\n\t\tif (this._fromType(currentVal) === 0) {\n\t\t\tcurrentVal = this._toType(this._minOutput);\n\t\t}\n\t\tthis.setValueAtTime(currentVal, time);\n\t\treturn this;\n\t}\n\n\tlinearRampToValueAtTime(value: Type, endTime: Time): this {\n\t\tconst numericValue = this._fromType(value);\n\t\tconst computedTime = this.toSeconds(endTime);\n\t\tthis._events.add({\n\t\t\ttime: computedTime,\n\t\t\ttype: \"linear\",\n\t\t\tvalue : numericValue,\n\t\t});\n\t\tthis.log(\"linear\", value, computedTime);\n\t\tthis.assert(isFinite(numericValue) && isFinite(computedTime),\n\t\t\t`Invalid argument(s) to linearRampToValueAtTime: ${JSON.stringify(value)}, ${JSON.stringify(endTime)}`);\n\t\tthis._param.linearRampToValueAtTime(numericValue, computedTime);\n\t\treturn this;\n\t}\n\n\texponentialRampToValueAtTime(value: Type, endTime: Time): this {\n\t\tlet numericValue = this._fromType(value);\n\t\tnumericValue = Math.max(this._minOutput, numericValue);\n\t\tconst computedTime = this.toSeconds(endTime);\n\t\t// store the event\n\t\tthis._events.add({\n\t\t\ttime: computedTime,\n\t\t\ttype: \"exponential\",\n\t\t\tvalue : numericValue,\n\t\t});\n\t\tthis.log(\"exponential\", value, computedTime);\n\t\tthis.assert(isFinite(numericValue) && isFinite(computedTime),\n\t\t\t`Invalid argument(s) to exponentialRampToValueAtTime: ${JSON.stringify(value)}, ${JSON.stringify(endTime)}`);\n\t\tthis._param.exponentialRampToValueAtTime(numericValue, computedTime);\n\t\treturn this;\n\t}\n\n\texponentialRampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tstartTime = this.toSeconds(startTime);\n\t\tthis.setRampPoint(startTime);\n\t\tthis.exponentialRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n\t\treturn this;\n\t}\n\n\tlinearRampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tstartTime = this.toSeconds(startTime);\n\t\tthis.setRampPoint(startTime);\n\t\tthis.linearRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n\t\treturn this;\n\t}\n\n\ttargetRampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tstartTime = this.toSeconds(startTime);\n\t\tthis.setRampPoint(startTime);\n\t\tthis.exponentialApproachValueAtTime(value, startTime, rampTime);\n\t\treturn this;\n\t}\n\n\texponentialApproachValueAtTime(value: Type, time: Time, rampTime: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\trampTime = this.toSeconds(rampTime);\n\t\tconst timeConstant = Math.log(rampTime + 1) / Math.log(200);\n\t\tthis.setTargetAtTime(value, time, timeConstant);\n\t\t// at 90% start a linear ramp to the final value\n\t\tthis.cancelAndHoldAtTime(time + rampTime * 0.9);\n\t\tthis.linearRampToValueAtTime(value, time + rampTime);\n\t\treturn this;\n\t}\n\n\tsetTargetAtTime(value: Type, startTime: Time, timeConstant: Positive): this {\n\t\tconst numericValue = this._fromType(value);\n\t\t// The value will never be able to approach without timeConstant > 0.\n\t\tthis.assert(isFinite(timeConstant) && timeConstant > 0, \"timeConstant must be a number greater than 0\");\n\t\tconst computedTime = this.toSeconds(startTime);\n\t\tthis._events.add({\n\t\t\tconstant: timeConstant,\n\t\t\ttime: computedTime,\n\t\t\ttype: \"setTarget\",\n\t\t\tvalue: numericValue,\n\t\t});\n\t\tthis.log(\"setTarget\", value, computedTime, timeConstant);\n\t\tthis.assert(isFinite(numericValue) && isFinite(computedTime),\n\t\t\t`Invalid argument(s) to setTargetAtTime: ${JSON.stringify(value)}, ${JSON.stringify(startTime)}`);\n\t\tthis._param.setTargetAtTime(numericValue, computedTime, timeConstant);\n\t\treturn this;\n\t}\n\n\tsetValueCurveAtTime(values: Type[], startTime: Time, duration: Time, scaling: number = 1): this {\n\t\tduration = this.toSeconds(duration);\n\t\tstartTime = this.toSeconds(startTime);\n\t\tconst startingValue = this._fromType(values[0]) * scaling;\n\t\tthis.setValueAtTime(this._toType(startingValue), startTime);\n\t\tconst segTime = duration / (values.length - 1);\n\t\tfor (let i = 1; i < values.length; i++) {\n\t\t\tconst numericValue = this._fromType(values[i]) * scaling;\n\t\t\tthis.linearRampToValueAtTime(this._toType(numericValue), startTime + i * segTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\tcancelScheduledValues(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._events.cancel(computedTime);\n\t\tthis.assert(isFinite(computedTime), `Invalid argument to cancelScheduledValues: ${JSON.stringify(time)}`);\n\t\tthis._param.cancelScheduledValues(computedTime);\n\t\tthis.log(\"cancel\", computedTime);\n\t\treturn this;\n\t}\n\n\tcancelAndHoldAtTime(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst valueAtTime = this._fromType(this.getValueAtTime(computedTime));\n\t\tthis.log(\"cancelAndHoldAtTime\", computedTime, \"value=\" + valueAtTime);\n\n\t\t// remove the schedule events\n\t\tthis.assert(isFinite(computedTime), `Invalid argument to cancelAndHoldAtTime: ${JSON.stringify(time)}`);\n\t\tthis._param.cancelScheduledValues(computedTime);\n\n\t\t// if there is an event at the given computedTime\n\t\t// and that even is not a \"set\"\n\t\tconst before = this._events.get(computedTime);\n\t\tconst after = this._events.getAfter(computedTime);\n\t\tif (before && before.time === computedTime) {\n\t\t\t// remove everything after\n\t\t\tif (after) {\n\t\t\t\tthis._events.cancel(after.time);\n\t\t\t} else {\n\t\t\t\tthis._events.cancel(computedTime + this.sampleTime);\n\t\t\t}\n\t\t} else if (after) {\n\t\t\t// cancel the next event(s)\n\t\t\tthis._events.cancel(after.time);\n\t\t\tif (after.type === \"linear\") {\n\t\t\t\tthis.linearRampToValueAtTime(this._toType(valueAtTime), computedTime);\n\t\t\t} else if (after.type === \"exponential\") {\n\t\t\t\tthis.exponentialRampToValueAtTime(this._toType(valueAtTime), computedTime);\n\t\t\t}\n\t\t}\n\n\t\t// set the value at the given time\n\t\tthis._events.add({\n\t\t\ttime: computedTime,\n\t\t\ttype: \"setValue\",\n\t\t\tvalue: valueAtTime,\n\t\t});\n\t\tthis._param.setValueAtTime(valueAtTime, computedTime);\n\t\treturn this;\n\t}\n\n\trampTo(value: Type, rampTime: Time = 0.1, startTime?: Time): this {\n\t\tif (this.units === \"frequency\" || this.units === \"bpm\" || this.units === \"decibels\") {\n\t\t\tthis.exponentialRampTo(value, rampTime, startTime);\n\t\t} else {\n\t\t\tthis.linearRampTo(value, rampTime, startTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._events.dispose();\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tAUTOMATION CURVE CALCULATIONS\n\t// \tMIT License, copyright (c) 2014 Jordan Santell\n\t///////////////////////////////////////////////////////////////////////////\n\n\t// Calculates the the value along the curve produced by setTargetAtTime\n\tprotected _exponentialApproach(t0: number, v0: number, v1: number, timeConstant: number, t: number): number {\n\t\treturn v1 + (v0 - v1) * Math.exp(-(t - t0) / timeConstant);\n\t}\n\n\t// Calculates the the value along the curve produced by linearRampToValueAtTime\n\tprotected _linearInterpolate(t0: number, v0: number, t1: number, v1: number, t: number): number {\n\t\treturn v0 + (v1 - v0) * ((t - t0) / (t1 - t0));\n\t}\n\n\t// Calculates the the value along the curve produced by exponentialRampToValueAtTime\n\tprotected _exponentialInterpolate(t0: number, v0: number, t1: number, v1: number, t: number): number {\n\t\treturn v0 * Math.pow(v1 / v0, (t - t0) / (t1 - t0));\n\t}\n}\n","import { Unit } from \"../type/Units\";\nimport { isDefined } from \"../util/TypeCheck\";\nimport { Param } from \"./Param\";\nimport { ToneWithContext, ToneWithContextOptions } from \"./ToneWithContext\";\n\nexport type InputNode = ToneAudioNode | AudioNode | AudioParam | Param<Unit>;\nexport type OutputNode = ToneAudioNode | AudioNode;\n\ninterface ChannelProperties {\n\tchannelCount: number;\n\tchannelCountMode: ChannelCountMode;\n\tchannelInterpretation: ChannelInterpretation;\n}\n\n/**\n * The possible options for this node\n */\nexport type ToneAudioNodeOptions = ToneWithContextOptions;\n\n/**\n *  ToneAudioNode is the base class for classes which process audio.\n */\nexport abstract class ToneAudioNode<Options extends ToneAudioNodeOptions = ToneAudioNodeOptions>\nextends ToneWithContext<Options> {\n\n\tabstract name = \"AudioNode\";\n\n\t/**\n\t * The input node or nodes. If the object is a source,\n\t * it does not have any input and this.input is undefined.\n\t */\n\tabstract input: InputNode | undefined;\n\n\t/**\n\t * The output nodes. If the object is a sink,\n\t * it does not have any output and this.output is undefined.\n\t */\n\tabstract output: OutputNode | undefined;\n\n\t/**\n\t *  The number of inputs feeding into the AudioNode.\n\t *  For source nodes, this will be 0.\n\t */\n\tget numberOfInputs(): number {\n\t\tif (isDefined(this.input)) {\n\t\t\tif (this.input instanceof AudioParam || this.input instanceof Param) {\n\t\t\t\treturn 1;\n\t\t\t} else {\n\t\t\t\treturn this.input.numberOfInputs;\n\t\t\t}\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t *  The number of outputs of the AudioNode.\n\t */\n\tget numberOfOutputs(): number {\n\t\tif (isDefined(this.output)) {\n\t\t\treturn this.output.numberOfOutputs;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * List all of the node that must be set to match the ChannelProperties\n\t */\n\tprotected _internalChannels: OutputNode[] = [];\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// AUDIO PROPERTIES\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Used to decide which nodes to get/set properties on\n\t */\n\tprivate _isAudioNode(node: any): node is AudioNode | ToneAudioNode {\n\t\treturn isDefined(node) && (node instanceof ToneAudioNode || node instanceof AudioNode);\n\t}\n\n\t/**\n\t * Get all of the audio nodes (either internal or input/output) which together\n\t * make up how the class node responds to channel input/output\n\t */\n\tprivate _getInternalNodes(): OutputNode[] {\n\t\tconst nodeList = this._internalChannels.slice(0);\n\t\tif (this._isAudioNode(this.input)) {\n\t\t\tnodeList.push(this.input);\n\t\t}\n\t\tif (this._isAudioNode(this.output)) {\n\t\t\tif (this.input !== this.output) {\n\t\t\t\tnodeList.push(this.output);\n\t\t\t}\n\t\t}\n\t\treturn nodeList;\n\t}\n\n\t/**\n\t * Set the audio options for this node such as channelInterpretation\n\t * channelCount, etc.\n\t * @param options\n\t */\n\tprivate _setChannelProperties(options: ChannelProperties): void {\n\t\tconst nodeList = this._getInternalNodes();\n\t\tnodeList.forEach(node => {\n\t\t\tnode.channelCount = options.channelCount;\n\t\t\tnode.channelCountMode = options.channelCountMode;\n\t\t\tnode.channelInterpretation = options.channelInterpretation;\n\t\t});\n\t}\n\n\t/**\n\t * Get the current audio options for this node such as channelInterpretation\n\t * channelCount, etc.\n\t */\n\tprivate _getChannelProperties(): ChannelProperties {\n\t\tconst nodeList = this._getInternalNodes();\n\t\tthis.assert(nodeList.length > 0, \"ToneAudioNode does not have any internal nodes\");\n\t\t// use the first node to get properties\n\t\t// they should all be the same\n\t\tconst node = nodeList[0];\n\t\treturn {\n\t\t\tchannelCount: node.channelCount,\n\t\t\tchannelCountMode: node.channelCountMode,\n\t\t\tchannelInterpretation: node.channelInterpretation,\n\t\t};\n\t}\n\n\t/**\n\t *  channelCount is the number of channels used when up-mixing and down-mixing\n\t *  connections to any inputs to the node. The default value is 2 except for\n\t *  specific nodes where its value is specially determined.\n\t */\n\tget channelCount(): number {\n\t\treturn this._getChannelProperties().channelCount;\n\t}\n\tset channelCount(channelCount) {\n\t\tconst props = this._getChannelProperties();\n\t\t// merge it with the other properties\n\t\tthis._setChannelProperties(Object.assign(props, { channelCount }));\n\t}\n\n\t/**\n\t *  channelCountMode determines how channels will be counted when up-mixing and\n\t *  down-mixing connections to any inputs to the node.\n\t *  The default value is \"max\". This attribute has no effect for nodes with no inputs.\n\t * * \"max\" - computedNumberOfChannels is the maximum of the number of channels of all\n\t * \t\tconnections to an input. In this mode channelCount is ignored.\n\t * * \"clamped-max\" - computedNumberOfChannels is determined as for \"max\" and then clamped\n\t * \t\tto a maximum value of the given channelCount.\n\t * * \"explicit\" - computedNumberOfChannels is the exact value as specified by the channelCount.\n\t */\n\tget channelCountMode(): ChannelCountMode {\n\t\treturn this._getChannelProperties().channelCountMode;\n\t}\n\tset channelCountMode(channelCountMode) {\n\t\tconst props = this._getChannelProperties();\n\t\t// merge it with the other properties\n\t\tthis._setChannelProperties(Object.assign(props, { channelCountMode }));\n\t}\n\n\t/**\n\t *  channelInterpretation determines how individual channels will be treated\n\t *  when up-mixing and down-mixing connections to any inputs to the node.\n\t *  The default value is \"speakers\".\n\t */\n\tget channelInterpretation(): ChannelInterpretation {\n\t\treturn this._getChannelProperties().channelInterpretation;\n\t}\n\tset channelInterpretation(channelInterpretation) {\n\t\tconst props = this._getChannelProperties();\n\t\t// merge it with the other properties\n\t\tthis._setChannelProperties(Object.assign(props, { channelInterpretation }));\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// CONNECTIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * connect the output of a ToneAudioNode to an AudioParam, AudioNode, or ToneAudioNode\n\t * @param unit The output to connect to\n\t * @param outputNum The output to connect from\n\t * @param inputNum The input to connect to\n\t */\n\tconnect(destination: InputNode, outputNum = 0, inputNum = 0): this {\n\t\tconnect(this, destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Connect the output to the context's destination node.\n\t */\n\ttoDestination(): this {\n\t\tthis.connect(this.context.destination);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Connect the output to the context's destination node.\n\t * alias for {@link toDestination}\n\t */\n\ttoMaster(): this {\n\t\tconsole.warn(\"toMaster() has been renamed toDestination()\");\n\t\treturn this.toDestination();\n\t}\n\n\t/**\n\t *  disconnect the output\n\t *  @param output Either the output index to disconnect if the output is an array, or the node to disconnect from.\n\t */\n\tdisconnect(destination?: InputNode, outputNum = 0, inputNum = 0): this {\n\t\tdisconnect(this, destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Connect the output of this node to the rest of the nodes in series.\n\t *  @example\n\t *  //connect a node to an effect, panVol and then to the master output\n\t *  node.chain(effect, panVol, Tone.Destination);\n\t */\n\tchain(...nodes: InputNode[]): this {\n\t\tconnectSeries(this, ...nodes);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  connect the output of this node to the rest of the nodes in parallel.\n\t */\n\tfan(...nodes: InputNode[]): this {\n\t\tnodes.forEach(node => this.connect(node));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Dispose and disconnect\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (isDefined(this.input)) {\n\t\t\tif (this.input instanceof ToneAudioNode) {\n\t\t\t\tthis.input.dispose();\n\t\t\t} else if (this.input instanceof AudioNode) {\n\t\t\t\tthis.input.disconnect();\n\t\t\t}\n\t\t}\n\t\tif (isDefined(this.output)) {\n\t\t\tif (this.output instanceof ToneAudioNode) {\n\t\t\t\tthis.output.dispose();\n\t\t\t} else if (this.output instanceof AudioNode) {\n\t\t\t\tthis.output.disconnect();\n\t\t\t}\n\t\t}\n\t\tthis._internalChannels = [];\n\t\treturn this;\n\t}\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// CONNECTIONS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n *  connect together all of the arguments in series\n *  @param nodes\n */\nexport function connectSeries(...nodes: InputNode[]): void {\n\tconst first = nodes.shift();\n\tnodes.reduce((prev, current) => {\n\t\tif (prev instanceof ToneAudioNode) {\n\t\t\tprev.connect(current);\n\t\t} else if (prev instanceof AudioNode) {\n\t\t\tconnect(prev, current);\n\t\t}\n\t\treturn current;\n\t}, first);\n}\n\n/**\n * Connect two nodes together so that signal flows from the\n * first node to the second. Optionally specify the input and output channels.\n * @param srcNode The source node\n * @param dstNode The destination node\n * @param outputNumber The output channel of the srcNode\n * @param inputNumber The input channel of the dstNode\n */\nexport function connect(srcNode: OutputNode, dstNode: InputNode, outputNumber = 0, inputNumber = 0): void {\n\n\t// resolve the input of the dstNode\n\twhile (!(dstNode instanceof AudioNode || dstNode instanceof AudioParam)) {\n\t\tif (isDefined(dstNode.input)) {\n\t\t\tdstNode = dstNode.input;\n\t\t}\n\t}\n\n\twhile (srcNode instanceof ToneAudioNode) {\n\t\tif (isDefined(srcNode.output)) {\n\t\t\tsrcNode = srcNode.output;\n\t\t}\n\t}\n\n\t// make the connection\n\tif (dstNode instanceof AudioParam) {\n\t\tsrcNode.connect(dstNode, outputNumber);\n\t} else {\n\t\tsrcNode.connect(dstNode, outputNumber, inputNumber);\n\t}\n}\n\n/**\n * Disconnect a node from all nodes or optionally include a destination node and input/output channels.\n * @param srcNode The source node\n * @param dstNode The destination node\n * @param outputNumber The output channel of the srcNode\n * @param inputNumber The input channel of the dstNode\n */\nexport function disconnect(\n\tsrcNode: OutputNode,\n\tdstNode?: InputNode,\n\toutputNumber = 0,\n\tinputNumber = 0,\n): void {\n\n\t// resolve the destination node\n\tif (isDefined(dstNode)) {\n\t\twhile (dstNode instanceof ToneAudioNode) {\n\t\t\tif (dstNode.input) {\n\t\t\t\tdstNode = dstNode.input;\n\t\t\t}\n\t\t}\n\t}\n\n\t// resolve the src node\n\twhile (!(srcNode instanceof AudioNode)) {\n\t\tif (isDefined(srcNode.output)) {\n\t\t\tsrcNode = srcNode.output;\n\t\t}\n\t}\n\n\tif (dstNode instanceof AudioParam) {\n\t\tsrcNode.disconnect(dstNode, outputNumber);\n\t} else if (dstNode instanceof AudioNode) {\n\t\tsrcNode.disconnect(dstNode, outputNumber, inputNumber);\n\t} else {\n\t\tsrcNode.disconnect();\n\t}\n}\n","import { isArray } from \"./TypeCheck\";\n\n// return an interface which excludes certain keys\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n\n/**\n *  Make the property not writable using `defineProperty`. Internal use only.\n */\nexport function readOnly(target: object, property: string | string[]): void {\n\tif (isArray(property)) {\n\t\tproperty.forEach(str => readOnly(target, str));\n\t} else {\n\t\tObject.defineProperty(target, property, {\n\t\t\tenumerable: true,\n\t\t\twritable: false,\n\t\t});\n\t}\n}\n\n/**\n *  Make an attribute writeable. Internal use only.\n */\nexport function writable(target: object, property: string | string[]): void {\n\tif (isArray(property)) {\n\t\tproperty.forEach(str => writable(target, str));\n\t} else {\n\t\tObject.defineProperty(target, property, {\n\t\t\twritable: true,\n\t\t});\n\t}\n}\n\nexport const noOp: (...args: any[]) => any = () => {\n\t// no op!\n};\n\n/**\n * Recursive Partial taken from here: https://stackoverflow.com/a/51365037\n */\nexport type RecursivePartial<T> = {\n\t[P in keyof T]?:\n\tT[P] extends Array<infer U> ? Array<RecursivePartial<U>> :\n\tT[P] extends object ? RecursivePartial<T[P]> :\n\tT[P];\n};\n","import { Param } from \"../context/Param\";\nimport { GainFactor, Unit, UnitName } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"./ToneAudioNode\";\n\ninterface GainOptions extends ToneAudioNodeOptions {\n\tgain: number;\n\tunits: UnitName;\n\tconvert: boolean;\n}\n\n/**\n * A thin wrapper around the Native Web Audio GainNode.\n * The GainNode is a basic building block of the Web Audio\n * API and is useful for routing audio and adjusting gains.\n * @param  gain The initial gain of the GainNode\n * @param units The units of the gain parameter.\n */\nexport class Gain<Type extends Unit = GainFactor> extends ToneAudioNode<GainOptions> {\n\n\treadonly name = \"Gain\";\n\n\t/**\n\t *  The gain parameter of the gain node.\n\t */\n\treadonly gain: Param<Type>;\n\n\t/**\n\t * The wrapped GainNode.\n\t */\n\tprivate _gainNode: GainNode = this.context.createGain();\n\n\t// input = output\n\treadonly input: GainNode = this._gainNode;\n\treadonly output: GainNode = this._gainNode;\n\n\tconstructor(gain?: GainFactor, units?: Unit);\n\tconstructor(options?: Partial<GainOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Gain.getDefaults(), arguments, [\"gain\", \"units\"]));\n\t\tconst options = optionsFromArguments(Gain.getDefaults(), arguments, [\"gain\", \"units\"]);\n\n\t\tthis.gain = new Param({\n\t\t\tcontext : this.context,\n\t\t\tconvert : options.convert,\n\t\t\tparam : this._gainNode.gain,\n\t\t\tunits : options.units,\n\t\t\tvalue : options.gain,\n\t\t});\n\t\treadOnly(this, \"gain\");\n\t}\n\n\tstatic getDefaults(): GainOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tconvert : true,\n\t\t\tgain : 1,\n\t\t\tunits : \"gain\" as UnitName,\n\t\t});\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._gainNode.disconnect();\n\t\tthis.gain.dispose();\n\t\treturn this;\n\t}\n}\n","import { Context } from \"../context/Context\";\nimport { Seconds } from \"../type/Units\";\n\n/**\n *  Wrapper around the OfflineAudioContext\n *  @param  channels  The number of channels to render\n *  @param  duration  The duration to render in samples\n *  @param sampleRate the sample rate to render at\n */\nexport class OfflineContext extends Context {\n\n\tname = \"OfflineContext\";\n\n\t/**\n\t *  A private reference to the duration\n\t */\n\tprivate readonly _duration: Seconds;\n\n\t/**\n\t *  An artificial clock source\n\t */\n\tprivate _currentTime: Seconds = 0;\n\n\t/**\n\t * Private reference to the OfflineAudioContext.\n\t */\n\tprotected _context!: OfflineAudioContext;\n\n\tconstructor(channels: number | OfflineAudioContext, duration: Seconds, sampleRate: number) {\n\n\t\tsuper({\n\t\t\tclockSource: \"offline\",\n\t\t\tcontext: channels instanceof OfflineAudioContext ?\n\t\t\t\tchannels : new OfflineAudioContext(channels, duration * sampleRate, sampleRate),\n\t\t\tlookAhead: 0,\n\t\t\tupdateInterval: channels instanceof OfflineAudioContext ?\n\t\t\t\t\t128 / channels.sampleRate : 128 / sampleRate,\n\t\t});\n\n\t\tthis._duration = channels instanceof OfflineAudioContext ?\n\t\t\tchannels.length / channels.sampleRate : duration;\n\t}\n\n\t/**\n\t *  Override the now method to point to the internal clock time\n\t */\n\tnow(): Seconds {\n\t\treturn this._currentTime;\n\t}\n\n\t/**\n\t * Same as this.now()\n\t */\n\tget currentTime(): Seconds {\n\t\treturn this._currentTime;\n\t}\n\n\t/**\n\t *  Render the output of the OfflineContext\n\t */\n\trender(): Promise<AudioBuffer> {\n\t\twhile (this._duration - this._currentTime >= 0) {\n\t\t\t// invoke all the callbacks on that time\n\t\t\tthis.emit(\"tick\");\n\t\t\t// increment the clock in 5ms chunks\n\t\t\tthis._currentTime += 0.005;\n\t\t}\n\n\t\treturn this._context.startRendering();\n\t}\n\n\t/**\n\t *  Close the context\n\t */\n\tclose(): Promise<OfflineContext> {\n\t\treturn Promise.resolve(this);\n\t}\n}\n","import { getContext } from \"../Global\";\nimport { Tone } from \"../Tone\";\nimport { Samples, Seconds, Time } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { noOp } from \"../util/Interface\";\nimport { isArray, isNumber, isString } from \"../util/TypeCheck\";\n\ninterface ToneAudioBufferOptions {\n\turl?: string | AudioBuffer | ToneAudioBuffer;\n\treverse: boolean;\n\tonload: (buffer?: ToneAudioBuffer) => void;\n\tonerror: (error: Error) => void;\n}\n\n/**\n * AudioBuffer loading and storage. ToneAudioBuffer is used internally by all\n * classes that make requests for audio files such as Tone.Player,\n * Tone.Sampler and Tone.Convolver.\n *\n * Aside from load callbacks from individual buffers, ToneAudioBuffer\n * provides events which keep track of the loading progress\n * of _all_ of the buffers. These are ToneAudioBuffer.on(\"load\" / \"progress\" / \"error\")\n *\n * @param url The url to load, or the audio buffer to set.\n * @param onload A callback which is invoked after the buffer is loaded.\n *                            It's recommended to use `ToneAudioBuffer.on('load', callback)` instead\n *                            since it will give you a callback when _all_ buffers are loaded.\n * @param onerror The callback to invoke if there is an error\n * @example\n * var buffer = new ToneAudioBuffer(\"path/to/sound.mp3\", function(){\n * \t//the buffer is now available.\n * \tvar buff = buffer.get();\n * });\n * @example\n * //can load provide fallback extension types if the first type is not supported.\n * var buffer = new ToneAudioBuffer(\"path/to/sound.[mp3|ogg|wav]\");\n */\nexport class ToneAudioBuffer extends Tone {\n\n\tname = \"ToneAudioBuffer\";\n\n\t/**\n\t *  stores the loaded AudioBuffer\n\t */\n\tprivate _buffer?: AudioBuffer;\n\n\t/**\n\t *  indicates if the buffer should be reversed or not\n\t */\n\tprivate _reversed!: boolean;\n\n\t/**\n\t * Callback when the buffer is loaded.\n\t */\n\tonload: (buffer: ToneAudioBuffer) => void = noOp;\n\n\tconstructor(options?: Partial<ToneAudioBufferOptions>);\n\tconstructor(\n\t\turl?: string | ToneAudioBuffer | AudioBuffer,\n\t\tonload?: (buffer: ToneAudioBuffer) => void,\n\t\tonerror?: (error: Error) => void,\n\t);\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tconst options = optionsFromArguments(ToneAudioBuffer.getDefaults(), arguments, [\"url\", \"onload\", \"onerror\"]);\n\n\t\tthis.reverse = options.reverse;\n\t\tthis.onload = options.onload;\n\n\t\tif (options.url && options.url instanceof AudioBuffer || options.url instanceof ToneAudioBuffer) {\n\t\t\tthis.set(options.url);\n\t\t} else if (isString(options.url)) {\n\t\t\t// initiate the download\n\t\t\tthis.load(options.url).catch(options.onerror);\n\t\t}\n\t}\n\n\tstatic getDefaults(): ToneAudioBufferOptions {\n\t\treturn {\n\t\t\tonerror: noOp,\n\t\t\tonload: noOp,\n\t\t\treverse: false,\n\t\t};\n\t}\n\n\t/**\n\t * The sample rate of the AudioBuffer\n\t */\n\tget sampleRate(): number {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.sampleRate;\n\t\t} else {\n\t\t\treturn getContext().sampleRate;\n\t\t}\n\t}\n\n\t/**\n\t *  Pass in an AudioBuffer or ToneAudioBuffer to set the value of this buffer.\n\t */\n\tset(buffer: AudioBuffer | ToneAudioBuffer): this {\n\t\tif (buffer instanceof ToneAudioBuffer) {\n\t\t\t// if it's loaded, set it\n\t\t\tif (buffer.loaded) {\n\t\t\t\tthis._buffer = buffer.get();\n\t\t\t} else {\n\t\t\t\t// otherwise when it's loaded, invoke it's callback\n\t\t\t\tbuffer.onload = () => {\n\t\t\t\t\tthis.set(buffer);\n\t\t\t\t\tthis.onload(this);\n\t\t\t\t};\n\t\t\t}\n\t\t} else {\n\t\t\tthis._buffer = buffer;\n\t\t}\n\t\t// reverse it initially\n\t\tif (this._reversed) {\n\t\t\tthis._reverse();\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  The audio buffer stored in the object.\n\t */\n\tget(): AudioBuffer | undefined {\n\t\treturn this._buffer;\n\t}\n\n\t/**\n\t *  Makes an fetch request for the selected url then decodes the file as an audio buffer.\n\t * \tInvokes the callback once the audio buffer loads.\n\t *  @param url The url of the buffer to load. filetype support depends on the browser.\n\t *  @returns A Promise which resolves with this ToneAudioBuffer\n\t */\n\tasync load(url: string): Promise<this> {\n\t\tconst promise = ToneAudioBuffer.load(url);\n\t\tToneAudioBuffer.downloads.push(promise);\n\t\ttry {\n\t\t\tconst audioBuffer = await promise;\n\t\t\tthis.set(audioBuffer);\n\t\t\t// invoke the onload method\n\t\t\tthis.onload(this);\n\t\t} catch (e) {\n\t\t\t// remove the failed file before throwing error\n\t\t\tconst index = ToneAudioBuffer.downloads.indexOf(promise);\n\t\t\tToneAudioBuffer.downloads.splice(index, 1);\n\t\t\tthrow e;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._buffer = undefined;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set the audio buffer from the array.\n\t * To create a multichannel AudioBuffer, pass in a multidimensional array.\n\t * @param array The array to fill the audio buffer\n\t */\n\tfromArray(array: Float32Array | Float32Array[]): this {\n\t\tconst isMultidimensional = isArray(array) && array[0].length > 0;\n\t\tconst channels = isMultidimensional ? array.length : 1;\n\t\tconst len = isMultidimensional ? (array[0] as Float32Array).length : array.length;\n\t\tconst context = getContext();\n\t\tconst buffer = context.createBuffer(channels, len, context.sampleRate);\n\t\tconst multiChannelArray: Float32Array[] = !isMultidimensional && channels === 1 ?\n\t\t\t[array as Float32Array] : array as Float32Array[];\n\n\t\tfor (let c = 0; c < channels; c++) {\n\t\t\tbuffer.copyToChannel(multiChannelArray[c], c);\n\t\t}\n\t\tthis._buffer = buffer;\n\t\treturn this;\n\t}\n\n\t/**\n\t * \tSums multiple channels into 1 channel\n\t *  @param channel Optionally only copy a single channel from the array.\n\t */\n\ttoMono(chanNum?: number): this {\n\t\tif (isNumber(chanNum)) {\n\t\t\tthis.fromArray(this.toArray(chanNum));\n\t\t} else {\n\t\t\tlet outputArray = new Float32Array(this.length as number);\n\t\t\tconst numChannels = this.numberOfChannels;\n\t\t\tfor (let channel = 0; channel < numChannels; channel++) {\n\t\t\t\tconst channelArray = this.toArray(channel) as Float32Array;\n\t\t\t\tfor (let i = 0; i < channelArray.length; i++) {\n\t\t\t\t\toutputArray[i] += channelArray[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\t// divide by the number of channels\n\t\t\toutputArray = outputArray.map(sample => sample / numChannels);\n\t\t\tthis.fromArray(outputArray);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * \tGet the buffer as an array. Single channel buffers will return a 1-dimensional\n\t * \tFloat32Array, and multichannel buffers will return multidimensional arrays.\n\t *  @param channel Optionally only copy a single channel from the array.\n\t */\n\ttoArray(channel?: number): Float32Array | Float32Array[] {\n\t\tif (isNumber(channel)) {\n\t\t\treturn this.getChannelData(channel);\n\t\t} else if (this.numberOfChannels === 1) {\n\t\t\treturn this.toArray(0);\n\t\t} else {\n\t\t\tconst ret: Float32Array[] = [];\n\t\t\tfor (let c = 0; c < this.numberOfChannels; c++) {\n\t\t\t\tret[c] = this.getChannelData(c);\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\t}\n\n\t/**\n\t *  Returns the Float32Array representing the PCM audio data for the specific channel.\n\t *  @param  channel  The channel number to return\n\t *  @return The audio as a TypedArray\n\t */\n\tgetChannelData(channel: number): Float32Array {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.getChannelData(channel);\n\t\t} else {\n\t\t\treturn new Float32Array(0);\n\t\t}\n\t}\n\n\t/**\n\t *  Cut a subsection of the array and return a buffer of the\n\t *  subsection. Does not modify the original buffer\n\t *  @param start The time to start the slice\n\t *  @param end The end time to slice. If none is given will default to the end of the buffer\n\t */\n\tslice(start: Seconds, end: Seconds = this.duration): ToneAudioBuffer {\n\t\tconst startSamples = Math.floor(start * this.sampleRate);\n\t\tconst endSamples = Math.floor(end * this.sampleRate);\n\t\tthis.assert(startSamples < endSamples, \"The start time must be less than the end time\");\n\t\tconst length = endSamples - startSamples;\n\t\tconst retBuffer = getContext().createBuffer(this.numberOfChannels, length, this.sampleRate);\n\t\tfor (let channel = 0; channel < this.numberOfChannels; channel++) {\n\t\t\tretBuffer.copyToChannel(this.getChannelData(channel).subarray(startSamples, endSamples), channel);\n\t\t}\n\t\treturn new ToneAudioBuffer(retBuffer);\n\t}\n\n\t/**\n\t *  Reverse the buffer.\n\t */\n\tprivate _reverse(): this {\n\t\tif (this.loaded) {\n\t\t\tfor (let i = 0; i < this.numberOfChannels; i++) {\n\t\t\t\tthis.getChannelData(i).reverse();\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * If the buffer is loaded or not\n\t */\n\tget loaded(): boolean {\n\t\treturn this.length > 0;\n\t}\n\n\t/**\n\t * The duration of the buffer in seconds.\n\t */\n\tget duration(): Seconds {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.duration;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * The length of the buffer in samples\n\t */\n\tget length(): Samples {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.length;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * The number of discrete audio channels. Returns 0 if no buffer is loaded.\n\t */\n\tget numberOfChannels(): number {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.numberOfChannels;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * Reverse the buffer.\n\t */\n\tget reverse(): boolean {\n\t\treturn this._reversed;\n\t}\n\tset reverse(rev: boolean) {\n\t\tif (this._reversed !== rev) {\n\t\t\tthis._reversed = rev;\n\t\t\tthis._reverse();\n\t\t}\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// STATIC METHODS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  A path which is prefixed before every url.\n\t */\n\tstatic baseUrl = \"\";\n\n\t/**\n\t *  Create a ToneAudioBuffer from the array. To create a multichannel AudioBuffer,\n\t *  pass in a multidimensional array.\n\t *  @param array The array to fill the audio buffer\n\t *  @return A ToneAudioBuffer created from the array\n\t */\n\tstatic fromArray(array: Float32Array | Float32Array[]): ToneAudioBuffer {\n\t\treturn (new ToneAudioBuffer()).fromArray(array);\n\t}\n\n\t/**\n\t * Creates a ToneAudioBuffer from a URL, returns a promise which resolves to a ToneAudioBuffer\n\t * @param  url The url to load.\n\t * @return A promise which resolves to a ToneAudioBuffer\n\t */\n\tstatic async fromUrl(url: string): Promise<ToneAudioBuffer> {\n\t\tconst buffer = new ToneAudioBuffer();\n\t\treturn await buffer.load(url);\n\t}\n\n\t/**\n\t * All of the downloads\n\t */\n\tstatic downloads: Array<Promise<AudioBuffer>> = [];\n\n\t/**\n\t *  Loads a url using fetch and returns the AudioBuffer.\n\t */\n\tstatic async load(url: string): Promise<AudioBuffer> {\n\n\t\t// test if the url contains multiple extensions\n\t\tconst matches = url.match(/\\[(.+\\|?)+\\]$/);\n\t\tif (matches) {\n\t\t\tconst extensions = matches[1].split(\"|\");\n\t\t\tlet extension = extensions[0];\n\t\t\tfor (const ext of extensions) {\n\t\t\t\tif (ToneAudioBuffer.supportsType(ext)) {\n\t\t\t\t\textension = ext;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\turl = url.replace(matches[0], extension);\n\t\t}\n\n\t\tconst response = await fetch(ToneAudioBuffer.baseUrl + url);\n\t\tif (!response.ok) {\n\t\t\tthrow new Error(`could not load url: ${url}`);\n\t\t}\n\t\tconst arrayBuffer = await response.arrayBuffer();\n\n\t\tconst audioBuffer = await getContext().decodeAudioData(arrayBuffer);\n\n\t\treturn audioBuffer;\n\t}\n\n\t/**\n\t *  Checks a url's extension to see if the current browser can play that file type.\n\t *  @param url The url/extension to test\n\t *  @return If the file extension can be played\n\t *  @static\n\t *  @example\n\t * ToneAudioBuffer.supportsType(\"wav\"); //returns true\n\t * ToneAudioBuffer.supportsType(\"path/to/file.wav\"); //returns true\n\t */\n\tstatic supportsType(url: string): boolean {\n\t\tconst extensions = url.split(\".\");\n\t\tconst extension = extensions[extensions.length - 1];\n\t\tconst response = document.createElement(\"audio\").canPlayType(\"audio/\" + extension);\n\t\treturn response !== \"\";\n\t}\n\n\t/**\n\t *  Returns a Promise which resolves when all of the buffers have loaded\n\t */\n\tstatic async loaded(): Promise<void> {\n\t\tfor (const promise of ToneAudioBuffer.downloads) {\n\t\t\tawait promise;\n\t\t}\n\t}\n}\n","import { getContext, setContext } from \"../Global\";\nimport { Seconds } from \"../type/Units\";\nimport { OfflineContext } from \"./OfflineContext\";\nimport { ToneAudioBuffer } from \"./ToneAudioBuffer\";\n\n/**\n * Generate a buffer by rendering all of the Tone.js code within the callback using the OfflineAudioContext.\n * The OfflineAudioContext is capable of rendering much faster than real time in many cases.\n * The callback function also passes in an offline instance of Tone.Transport which can be used\n * to schedule events along the Transport. **NOTE** OfflineAudioContext has the same restrictions\n * as the AudioContext in that on certain platforms (like iOS) it must be invoked by an explicit\n * user action like a click or tap.\n * @param  callback  All Tone.js nodes which are created and scheduled\n * \t\t\t\t\twithin this callback are recorded into the output Buffer.\n * @param  duration     the amount of time to record for.\n * @return  The promise which is invoked with the Tone.Buffer of the recorded output.\n * @example\n * //render 2 seconds of the oscillator\n * Tone.Offline(function(){\n * \t//only nodes created in this callback will be recorded\n * \tvar oscillator = new Tone.Oscillator().toDestination().start(0)\n * \t//schedule their events\n * }, 2).then(function(buffer){\n * \t//do something with the output buffer\n * })\n * @example\n * //can also schedule events along the Transport\n * //using the passed in Offline Transport\n * Tone.Offline(function(Transport){\n * \tvar osc = new Tone.Oscillator().toDestination()\n * \tTransport.schedule(function(time){\n * \t\tosc.start(time).stop(time + 0.1)\n * \t}, 1)\n * \tTransport.start(0.2)\n * }, 4).then(function(buffer){\n * \t//do something with the output buffer\n * })\n */\nexport async function Offline(\n\tcallback: (context: OfflineContext) => Promise<void> | void,\n\tduration: Seconds,\n\tchannels: number = 2,\n\tsampleRate: number = getContext().sampleRate,\n): Promise<ToneAudioBuffer> {\n\t// set the OfflineAudioContext based on the current context\n\tconst originalContext = getContext();\n\n\tconst context = new OfflineContext(channels, duration, sampleRate);\n\tsetContext(context);\n\n\t// invoke the callback/scheduling\n\tawait callback(context);\n\n\t// then render the audio\n\tconst bufferPromise = context.render();\n\n\t// return the original AudioContext\n\tsetContext(originalContext);\n\n\t// await the rendering\n\tconst buffer = await bufferPromise;\n\n\t// return the audio\n\treturn new ToneAudioBuffer(buffer);\n}\n","import { Tone } from \"../Tone\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { noOp } from \"../util/Interface\";\nimport { isString } from \"../util/TypeCheck\";\nimport { ToneAudioBuffer } from \"./ToneAudioBuffer\";\n\ninterface ToneAudioBuffersUrlMap {\n\t[name: string]: string | AudioBuffer | ToneAudioBuffer;\n\t[name: number]: string | AudioBuffer | ToneAudioBuffer;\n}\n\ninterface ToneAudioBuffersOptions {\n\turls: ToneAudioBuffersUrlMap;\n\tonload: () => void;\n\tonerror?: (error: Error) => void;\n\tbaseUrl: string;\n}\n\n/**\n * A data structure for holding multiple buffers in a Map-like datastructure.\n *\n * @param  urls      An object literal or array of urls to load.\n * @param onload  The callback to invoke when the buffers are loaded.\n * @example\n * //load a whole bank of piano samples\n * var pianoSamples = new ToneAudioBuffers({\n * \t\"C4\" : \"path/to/C4.mp3\"\n * \t\"C#4\" : \"path/to/C#4.mp3\"\n * \t\"D4\" : \"path/to/D4.mp3\"\n * \t\"D#4\" : \"path/to/D#4.mp3\"\n * }, function(){\n * \t//play one of the samples when they all load\n * \tplayer.buffer = pianoSamples.get(\"C4\");\n * \tplayer.start();\n * });\n * @example\n * //To pass in additional parameters in the second parameter\n * var buffers = new ToneAudioBuffers(urls, {\n * \t\"onload\" : callback,\n * \t\"baseUrl\" : \"../path/to/audio/\"\n * })\n */\nexport class ToneAudioBuffers extends Tone {\n\n\tname = \"ToneAudioBuffers\";\n\n\t/**\n\t *  All of the buffers\n\t */\n\tprivate _buffers: Map<string, ToneAudioBuffer> = new Map();\n\n\t/**\n\t *  A path which is prefixed before every url.\n\t */\n\tbaseUrl: string;\n\n\t/**\n\t * Keep track of the number of loaded buffers\n\t */\n\tprivate _loadingCount: number = 0;\n\n\tconstructor(\n\t\turls?: ToneAudioBuffersUrlMap,\n\t\tonload?: () => void,\n\t\tbaseUrl?: string,\n\t);\n\tconstructor(options?: Partial<ToneAudioBuffersOptions>);\n\tconstructor() {\n\n\t\tsuper();\n\t\tconst options = optionsFromArguments(\n\t\t\tToneAudioBuffers.getDefaults(), arguments, [\"urls\", \"onload\", \"baseUrl\"], \"urls\",\n\t\t);\n\n\t\tthis.baseUrl = options.baseUrl;\n\t\tconst urlMap: ToneAudioBuffersUrlMap = {};\n\t\t// add each one\n\t\tObject.keys(options.urls).forEach(name => {\n\t\t\tthis._loadingCount++;\n\t\t\tconst url = options.urls[name];\n\t\t\tthis.add(name, url, this._bufferLoaded.bind(this, options.onload));\n\t\t});\n\n\t}\n\n\tstatic getDefaults(): ToneAudioBuffersOptions {\n\t\treturn {\n\t\t\tbaseUrl: \"\",\n\t\t\tonerror: noOp,\n\t\t\tonload: noOp,\n\t\t\turls: {},\n\t\t};\n\t}\n\n\t/**\n\t *  True if the buffers object has a buffer by that name.\n\t *  @param  name  The key or index of the buffer.\n\t */\n\thas(name: string | number): boolean {\n\t\treturn this._buffers.has(name.toString());\n\t}\n\n\t/**\n\t *  Get a buffer by name. If an array was loaded,\n\t *  then use the array index.\n\t *  @param  name  The key or index of the buffer.\n\t */\n\tget(name: string | number): ToneAudioBuffer {\n\t\tthis.assert(this.has(name), `ToneAudioBuffers has no buffer named: ${name}`);\n\t\treturn this._buffers.get(name.toString()) as ToneAudioBuffer;\n\t}\n\n\t/**\n\t *  A buffer was loaded. decrement the counter.\n\t */\n\tprivate _bufferLoaded(callback: () => void): void {\n\t\tthis._loadingCount--;\n\t\tif (this._loadingCount === 0 && callback) {\n\t\t\tcallback();\n\t\t}\n\t}\n\n\t/**\n\t * If the buffers are loaded or not\n\t */\n\tget loaded(): boolean {\n\t\treturn Array.from(this._buffers).every(([name, buffer]) => buffer.loaded);\n\t}\n\n\t/**\n\t *  Add a buffer by name and url to the Buffers\n\t *  @param  name      A unique name to give the buffer\n\t *  @param  url  Either the url of the bufer, or a buffer which will be added with the given name.\n\t *  @param  callback  The callback to invoke when the url is loaded.\n\t */\n\tadd(\n\t\tname: string | number,\n\t\turl: string | AudioBuffer | ToneAudioBuffer,\n\t\tcallback: () => void = noOp,\n\t): this {\n\t\tif (url instanceof ToneAudioBuffer) {\n\t\t\tthis._buffers.set(name.toString(), url);\n\t\t\tcallback();\n\t\t} else if (url instanceof AudioBuffer) {\n\t\t\tthis._buffers.set(name.toString(), new ToneAudioBuffer(url));\n\t\t\tcallback();\n\t\t} else if (isString(url)) {\n\t\t\tthis._buffers.set(name.toString(), new ToneAudioBuffer(this.baseUrl + url, callback));\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._buffers.forEach(buffer => buffer.dispose());\n\t\tthis._buffers.clear();\n\t\treturn this;\n\t}\n}\n","import { Param } from \"../context/Param\";\nimport { Time } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"./ToneAudioNode\";\n\nexport interface DelayOptions extends ToneAudioNodeOptions {\n\tdelayTime: Time;\n\tmaxDelay: Time;\n}\n\n/**\n *  Wrapper around Web Audio's native [DelayNode](http://webaudio.github.io/web-audio-api/#the-delaynode-interface).\n *  @param delayTime The delay applied to the incoming signal.\n *  @param maxDelay The maximum delay time.\n */\nexport class Delay extends ToneAudioNode<DelayOptions> {\n\n\treadonly name = \"Delay\";\n\n\t/**\n\t * The maximum delay time. This cannot be changed after\n\t * the value is passed into the constructor.\n\t */\n\treadonly maxDelay: Time;\n\n\t/**\n\t *  The amount of time the incoming signal is delayed.\n\t */\n\treadonly delayTime: Param<Time>;\n\n\t/**\n\t * Private reference to the internal DelayNode\n\t */\n\tprivate _delayNode: DelayNode;\n\treadonly input: DelayNode;\n\treadonly output: DelayNode;\n\n\tconstructor(options?: Partial<DelayOptions>)\n\tconstructor(delayTime?: Time, maxDelay?: Time)\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Delay.getDefaults(), arguments, [\"delayTime\", \"maxDelay\"]));\n\n\t\tconst options = optionsFromArguments(Delay.getDefaults(), arguments, [\"delayTime\", \"maxDelay\"]);\n\n\t\tconst maxDelayInSeconds = this.toSeconds(options.maxDelay);\n\t\tthis.maxDelay = Math.max(maxDelayInSeconds, this.toSeconds(options.delayTime));\n\n\t\tthis._delayNode = this.input = this.output = this.context.createDelay(maxDelayInSeconds);\n\n\t\tthis.delayTime = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam : this._delayNode.delayTime,\n\t\t\tunits : \"time\",\n\t\t\tvalue : options.delayTime,\n\t\t});\n\n\t\treadOnly(this, \"delayTime\");\n\t}\n\n\tstatic getDefaults(): DelayOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tdelayTime : 0,\n\t\t\tmaxDelay: 1,\n\t\t});\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._delayNode.disconnect();\n\t\tthis.delayTime.dispose();\n\t\treturn this;\n\t}\n}\n","import { Seconds } from \"../type/Units\";\nimport { Timeline, TimelineEvent } from \"./Timeline\";\n\nexport type BasicPlaybackState = \"started\" | \"stopped\";\nexport type PlaybackState = BasicPlaybackState | \"paused\";\n\nexport interface StateTimelineEvent extends TimelineEvent {\n\tstate: PlaybackState;\n}\n\n/**\n *  A Timeline State. Provides the methods: `setStateAtTime(\"state\", time)` and `getValueAtTime(time)`\n *  @param initial The initial state of the StateTimeline.  Defaults to `undefined`\n */\nexport class StateTimeline<AdditionalOptions extends {} = {}> extends Timeline<StateTimelineEvent & AdditionalOptions> {\n\n\t/**\n\t *  The initial state\n\t */\n\tprivate _initial: PlaybackState;\n\n\tconstructor(initial: PlaybackState = \"stopped\") {\n\t\tsuper();\n\t\tthis._initial = initial;\n\t}\n\n\t/**\n\t *  Returns the scheduled state scheduled before or at\n\t *  the given time.\n\t *  @param  time  The time to query.\n\t *  @return  The name of the state input in setStateAtTime.\n\t */\n\tgetValueAtTime(time: Seconds): PlaybackState {\n\t\tconst event = this.get(time);\n\t\tif (event !== null) {\n\t\t\treturn event.state;\n\t\t} else {\n\t\t\treturn this._initial;\n\t\t}\n\t}\n\n\t/**\n\t *  Add a state to the timeline.\n\t * @param  state The name of the state to set.\n\t * @param  time  The time to query.\n\t * @param options Any additional options that are needed in the timeline.\n\t */\n\tsetStateAtTime(state: PlaybackState, time: Seconds, options?: AdditionalOptions): this {\n\t\t// all state changes need to be >= the previous state time\n\t\t// TODO throw error if time < the previous event time\n\t\tthis.add(Object.assign({}, options, {\n\t\t\tstate,\n\t\t\ttime,\n\t\t}));\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Return the event before the time with the given state\n\t *  @param  state The state to look for\n\t *  @param  time  When to check before\n\t *  @return  The event with the given state before the time\n\t */\n\tgetLastState(state: PlaybackState, time: number): StateTimelineEvent & AdditionalOptions | undefined {\n\t\t// time = this.toSeconds(time);\n\t\tconst index = this._search(time);\n\t\tfor (let i = index; i >= 0; i--) {\n\t\t\tconst event = this._timeline[i];\n\t\t\tif (event.state === state) {\n\t\t\t\treturn event;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *  Return the event after the time with the given state\n\t *  @param  state The state to look for\n\t *  @param  time  When to check from\n\t *  @return  The event with the given state after the time\n\t */\n\tgetNextState(state: PlaybackState, time: number): StateTimelineEvent & AdditionalOptions | undefined {\n\t\t// time = this.toSeconds(time);\n\t\tconst index = this._search(time);\n\t\tif (index !== -1) {\n\t\t\tfor (let i = index; i < this._timeline.length; i++) {\n\t\t\t\tconst event = this._timeline[i];\n\t\t\t\tif (event.state === state) {\n\t\t\t\t\treturn event;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","import { connect } from \"../Connect\";\nimport { AutomationEvent, Param, ParamOptions } from \"../context/Param\";\nimport { getContext } from \"../Global\";\nimport { BPM, Hertz, Seconds, Ticks, Time } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isUndef } from \"../util/TypeCheck\";\n\ninterface TickAutomationEvent extends AutomationEvent {\n\tticks: number;\n}\n\ninterface TickSignalOptions extends ParamOptions {\n\tvalue: Hertz | BPM;\n\tmultiplier: number;\n}\n\n/**\n * TickSignal extends Tone.Signal, but adds the capability\n * to calculate the number of elapsed ticks. exponential and target curves\n * are approximated with multiple linear ramps.\n *\n * Thank you Bruno Dias, H. Sofia Pinto, and David M. Matos,\n * for your [WAC paper](https://smartech.gatech.edu/bitstream/handle/1853/54588/WAC2016-49.pdf)\n * describing integrating timing functions for tempo calculations.\n *\n * @param value The initial value of the signal\n */\nexport class TickSignal<Type extends Hertz | BPM> extends Param<Type> {\n\n\tname = \"TickSignal\";\n\n\tprotected _events: Timeline<TickAutomationEvent> = new Timeline(Infinity);\n\n\tprivate _sig: ConstantSourceNode = this.context.createConstantSource();\n\n\tprotected _param = this._sig.offset;\n\n\tprivate _multiplier: number = 1;\n\n\tconstructor(options: Partial<TickSignalOptions>);\n\tconstructor(value?: number);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(TickSignal.getDefaults(), arguments, [\"value\"]));\n\t\tconst options = optionsFromArguments(TickSignal.getDefaults(), arguments, [\"value\"]);\n\n\t\tthis._sig = this.context.createConstantSource();\n\t\tthis._sig.start(0);\n\t\tthis._param = this._sig.offset;\n\n\t\t// set the multiplier\n\t\tthis.multiplier = options.multiplier;\n\n\t\t// clear the ticks from the beginning\n\t\tthis.cancelScheduledValues(0);\n\t\t// set an initial event\n\t\tthis._events.add({\n\t\t\tticks: 0,\n\t\t\ttime : 0,\n\t\t\ttype : \"setValue\",\n\t\t\tvalue: this._fromType(options.value as Type),\n\t\t});\n\t\tthis.setValueAtTime(options.value as Type, 0);\n\t}\n\n\tstatic getDefaults(): TickSignalOptions {\n\t\treturn Object.assign(Param.getDefaults(), {\n\t\t\tmultiplier: 1,\n\t\t\tparam: getContext().createConstantSource().offset,\n\t\t\tunits: \"hertz\",\n\t\t\tvalue: 1,\n\t\t});\n\t}\n\n\tsetTargetAtTime(value: Type, time: Time, constant: number): this {\n\t\t// approximate it with multiple linear ramps\n\t\ttime = this.toSeconds(time);\n\t\tthis.setRampPoint(time);\n\t\tconst computedValue = this._fromType(value);\n\n\t\t// start from previously scheduled value\n\t\tconst prevEvent = this._events.get(time) as TickAutomationEvent;\n\t\tconst segments = Math.round(Math.max(1 / constant, 1));\n\t\tfor (let i = 0; i <= segments; i++) {\n\t\t\tconst segTime = constant * i + time;\n\t\t\tconst rampVal = this._exponentialApproach(prevEvent.time, prevEvent.value, computedValue, constant, segTime);\n\t\t\tthis.linearRampToValueAtTime(this._toType(rampVal), segTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\tsetValueAtTime(value: Type, time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tsuper.setValueAtTime(value, time);\n\t\tconst event = this._events.get(computedTime) as TickAutomationEvent;\n\t\tconst previousEvent = this._events.previousEvent(event);\n\t\tconst ticksUntilTime = this._getTicksUntilEvent(previousEvent, computedTime);\n\t\tevent.ticks = Math.max(ticksUntilTime, 0);\n\t\treturn this;\n\t}\n\n\tlinearRampToValueAtTime(value: Type, time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tsuper.linearRampToValueAtTime(value, time);\n\t\tconst event = this._events.get(computedTime) as TickAutomationEvent;\n\t\tconst previousEvent = this._events.previousEvent(event);\n\t\tconst ticksUntilTime = this._getTicksUntilEvent(previousEvent, computedTime);\n\t\tevent.ticks = Math.max(ticksUntilTime, 0);\n\t\treturn this;\n\t}\n\n\texponentialRampToValueAtTime(value: Type, time: Time): this {\n\t\t// aproximate it with multiple linear ramps\n\t\ttime = this.toSeconds(time);\n\t\tconst computedVal = this._fromType(value);\n\n\t\t// start from previously scheduled value\n\t\tconst prevEvent = this._events.get(time) as TickAutomationEvent;\n\t\t// approx 10 segments per second\n\t\tconst segments = Math.round(Math.max((time - prevEvent.time) * 10, 1));\n\t\tconst segmentDur = ((time - prevEvent.time) / segments);\n\t\tfor (let i = 0; i <= segments; i++) {\n\t\t\tconst segTime = segmentDur * i + prevEvent.time;\n\t\t\tconst rampVal = this._exponentialInterpolate(prevEvent.time, prevEvent.value, time, computedVal, segTime);\n\t\t\tthis.linearRampToValueAtTime(this._toType(rampVal), segTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the tick value at the time. Takes into account\n\t * any automation curves scheduled on the signal.\n\t * @param  time The time to get the tick count at\n\t * @return The number of ticks which have elapsed at the time given any automations.\n\t */\n\tprivate _getTicksUntilEvent(event: TickAutomationEvent | null, time: number): Ticks {\n\t\tif (event === null) {\n\t\t\tevent = {\n\t\t\t\tticks : 0,\n\t\t\t\ttime : 0,\n\t\t\t\ttype: \"setValue\",\n\t\t\t\tvalue: 0,\n\t\t\t};\n\t\t} else if (isUndef(event.ticks)) {\n\t\t\tconst previousEvent = this._events.previousEvent(event);\n\t\t\tevent.ticks = this._getTicksUntilEvent(previousEvent, event.time);\n\t\t}\n\t\tconst val0 = this._fromType(this.getValueAtTime(event.time));\n\t\tlet val1 = this._fromType(this.getValueAtTime(time));\n\t\t// if it's right on the line, take the previous value\n\t\tconst onTheLineEvent = this._events.get(time);\n\t\tif (onTheLineEvent && onTheLineEvent.time === time && onTheLineEvent.type === \"setValue\") {\n\t\t\tval1 = this._fromType(this.getValueAtTime(time - this.sampleTime));\n\t\t}\n\t\treturn 0.5 * (time - event.time) * (val0 + val1) + event.ticks;\n\t}\n\n\t/**\n\t * Returns the tick value at the time. Takes into account\n\t * any automation curves scheduled on the signal.\n\t * @param  time The time to get the tick count at\n\t * @return The number of ticks which have elapsed at the time given any automations.\n\t */\n\tgetTicksAtTime(time: Time): Ticks {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst event = this._events.get(computedTime);\n\t\treturn Math.max(this._getTicksUntilEvent(event, computedTime), 0);\n\t}\n\n\t/**\n\t * Return the elapsed time of the number of ticks from the given time\n\t * @param ticks The number of ticks to calculate\n\t * @param  time The time to get the next tick from\n\t * @return The duration of the number of ticks from the given time in seconds\n\t */\n\tgetDurationOfTicks(ticks: Ticks, time: Time): Seconds {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst currentTick = this.getTicksAtTime(time);\n\t\treturn this.getTimeOfTick(currentTick + ticks) - computedTime;\n\t}\n\n\t/**\n\t * Given a tick, returns the time that tick occurs at.\n\t * @return The time that the tick occurs.\n\t */\n\tgetTimeOfTick(tick: Ticks): Seconds {\n\t\tconst before = this._events.get(tick, \"ticks\");\n\t\tconst after = this._events.getAfter(tick, \"ticks\");\n\t\tif (before && before.ticks === tick) {\n\t\t\treturn before.time;\n\t\t} else if (before && after &&\n\t\t\tafter.type === \"linear\" &&\n\t\t\tbefore.value !== after.value) {\n\t\t\tconst val0 = this._fromType(this.getValueAtTime(before.time));\n\t\t\tconst val1 = this._fromType(this.getValueAtTime(after.time));\n\t\t\tconst delta = (val1 - val0) / (after.time - before.time);\n\t\t\tconst k = Math.sqrt(Math.pow(val0, 2) - 2 * delta * (before.ticks - tick));\n\t\t\tconst sol1 = (-val0 + k) / delta;\n\t\t\tconst sol2 = (-val0 - k) / delta;\n\t\t\treturn (sol1 > 0 ? sol1 : sol2) + before.time;\n\t\t} else if (before) {\n\t\t\tif (before.value === 0) {\n\t\t\t\treturn Infinity;\n\t\t\t} else {\n\t\t\t\treturn before.time + (tick - before.ticks) / before.value;\n\t\t\t}\n\t\t} else {\n\t\t\treturn tick / this._initialValue;\n\t\t}\n\t}\n\n\t/**\n\t * Convert some number of ticks their the duration in seconds accounting\n\t * for any automation curves starting at the given time.\n\t * @param  ticks The number of ticks to convert to seconds.\n\t * @param  when  When along the automation timeline to convert the ticks.\n\t * @return The duration in seconds of the ticks.\n\t */\n\tticksToTime(ticks: Ticks, when: Time): Seconds {\n\t\treturn this.getDurationOfTicks(ticks, when);\n\t}\n\n\t/**\n\t * The inverse of [ticksToTime](#tickstotime). Convert a duration in\n\t * seconds to the corresponding number of ticks accounting for any\n\t * automation curves starting at the given time.\n\t * @param  duration The time interval to convert to ticks.\n\t * @param  when When along the automation timeline to convert the ticks.\n\t * @return The duration in ticks.\n\t */\n\ttimeToTicks(duration: Time, when: Time): Ticks {\n\t\tconst computedTime = this.toSeconds(when);\n\t\tconst computedDuration = this.toSeconds(duration);\n\t\tconst startTicks = this.getTicksAtTime(computedTime);\n\t\tconst endTicks = this.getTicksAtTime(computedTime + computedDuration);\n\t\treturn endTicks - startTicks;\n\t}\n\n\t/**\n\t * Convert from the type when the unit value is BPM\n\t */\n\tprotected _fromType(val: Type): number {\n\t\tif (this.units === \"bpm\" && this.multiplier) {\n\t\t\treturn 1 / (60 / val / this.multiplier);\n\t\t} else {\n\t\t\treturn super._fromType(val);\n\t\t}\n\t}\n\n\t/**\n\t * Special case of type conversion where the units === \"bpm\"\n\t */\n\tprotected _toType(val: number): Type {\n\t\tif (this.units === \"bpm\" && this.multiplier) {\n\t\t\treturn (val / this.multiplier) * 60 as Type;\n\t\t} else {\n\t\t\treturn super._toType(val);\n\t\t}\n\t}\n\t/**\n\t * A multiplier on the bpm value. Useful for setting a PPQ relative to the base frequency value.\n\t */\n\tget multiplier(): number {\n\t\treturn this._multiplier;\n\t}\n\tset multiplier(m: number) {\n\t\t// get and reset the current value with the new multipler\n\t\t// might be necessary to clear all the previous values\n\t\tconst currentVal = this.value;\n\t\tthis._multiplier = m;\n\t\tthis.value = currentVal;\n\t}\n\n\t/**\n\t * Connect the output signal\n\t */\n\tconnect(dstNode, outputNumber = 0, inputNumber = 0): this {\n\t\tconnect(this._sig, dstNode, outputNumber, inputNumber);\n\t\treturn this;\n\t}\n}\n","import { ToneWithContext, ToneWithContextOptions } from \"../context/ToneWithContext\";\nimport { BPM, Frequency, Hertz, Seconds, Ticks, Time } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { PlaybackState, StateTimeline, StateTimelineEvent } from \"../util/StateTimeline\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isDefined } from \"../util/TypeCheck\";\nimport { TickSignal } from \"./TickSignal\";\n\ninterface TickSourceOptions extends ToneWithContextOptions {\n\tfrequency: Frequency;\n\tunits: \"hertz\" | \"bpm\";\n}\n\ninterface TickSourceOffsetEvent {\n\tticks: number;\n\ttime: number;\n\tseconds: number;\n}\n\n/**\n *  Uses [TickSignal](TickSignal) to track elapsed ticks with complex automation curves.\n *\n *  @param frequency The initial frequency that the signal ticks at\n */\nexport class TickSource<Type extends BPM | Hertz> extends ToneWithContext<TickSourceOptions> {\n\n\tname = \"TickSource\";\n\n\t/**\n\t *  The frequency the callback function should be invoked.\n\t */\n\tfrequency: TickSignal<Type>;\n\n\t/**\n\t *  The state timeline\n\t */\n\tprivate _state: StateTimeline = new StateTimeline();\n\n\t/**\n\t * The offset values of the ticks\n\t */\n\tprivate _tickOffset: Timeline<TickSourceOffsetEvent> = new Timeline();\n\n\tconstructor(frequency?: Frequency);\n\t// tslint:disable-next-line: unified-signatures\n\tconstructor(options?: Partial<TickSourceOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(TickSource.getDefaults(), arguments, [\"frequency\"]));\n\t\tconst options = optionsFromArguments(TickSource.getDefaults(), arguments, [\"frequency\"]);\n\n\t\tthis.frequency = new TickSignal({\n\t\t\tcontext: this.context,\n\t\t\tunits: options.units,\n\t\t\tvalue: this.toFrequency(options.frequency),\n\t\t});\n\t\treadOnly(this, \"frequency\");\n\n\t\t// set the inital state\n\t\tthis._state.setStateAtTime(\"stopped\", 0);\n\t\t// add the first event\n\t\tthis.setTicksAtTime(0, 0);\n\t}\n\n\tstatic getDefaults(): TickSourceOptions {\n\t\treturn Object.assign({\n\t\t\tfrequency: 1,\n\t\t\tunits: \"hertz\" as \"hertz\",\n\t\t}, ToneWithContext.getDefaults());\n\t}\n\n\t/**\n\t *  Returns the playback state of the source, either \"started\", \"stopped\" or \"paused\".\n\t */\n\tget state(): PlaybackState {\n\t\treturn this._state.getValueAtTime(this.now());\n\t}\n\n\t/**\n\t *  Start the clock at the given time. Optionally pass in an offset\n\t *  of where to start the tick counter from.\n\t *  @param  time    The time the clock should start\n\t *  @param offset The number of ticks to start the source at\n\t */\n\tstart(time: Time, offset?: Ticks): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(computedTime) !== \"started\") {\n\t\t\tthis._state.setStateAtTime(\"started\", computedTime);\n\t\t\tif (isDefined(offset)) {\n\t\t\t\tthis.setTicksAtTime(offset, computedTime);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the clock. Stopping the clock resets the tick counter to 0.\n\t * @param time The time when the clock should stop.\n\t */\n\tstop(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\t// cancel the previous stop\n\t\tif (this._state.getValueAtTime(computedTime) === \"stopped\") {\n\t\t\tconst event = this._state.get(computedTime);\n\t\t\tif (event && event.time > 0) {\n\t\t\t\tthis._tickOffset.cancel(event.time);\n\t\t\t\tthis._state.cancel(event.time);\n\t\t\t}\n\t\t}\n\t\tthis._state.cancel(computedTime);\n\t\tthis._state.setStateAtTime(\"stopped\", computedTime);\n\t\tthis.setTicksAtTime(0, computedTime);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Pause the clock. Pausing does not reset the tick counter.\n\t *  @param time The time when the clock should stop.\n\t */\n\tpause(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(computedTime) === \"started\") {\n\t\t\tthis._state.setStateAtTime(\"paused\", computedTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Cancel start/stop/pause and setTickAtTime events scheduled after the given time.\n\t *  @param time When to clear the events after\n\t */\n\tcancel(time: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis._state.cancel(time);\n\t\tthis._tickOffset.cancel(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the elapsed ticks at the given time\n\t * @param  time  When to get the tick value\n\t * @return The number of ticks\n\t */\n\tgetTicksAtTime(time?: Time): Ticks {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst stopEvent = this._state.getLastState(\"stopped\", computedTime);\n\t\tif (!stopEvent) {\n\t\t\treturn 0;\n\t\t}\n\t\t// this event allows forEachBetween to iterate until the current time\n\t\tconst tmpEvent: StateTimelineEvent = { state: \"paused\", time: computedTime};\n\t\tthis._state.add(tmpEvent);\n\n\t\t// keep track of the previous offset event\n\t\tlet lastState = stopEvent;\n\t\tlet elapsedTicks = 0;\n\n\t\t// iterate through all the events since the last stop\n\t\tthis._state.forEachBetween(stopEvent.time, computedTime + this.sampleTime, e => {\n\t\t\tlet periodStartTime = lastState.time;\n\t\t\t// if there is an offset event in this period use that\n\t\t\tconst offsetEvent = this._tickOffset.get(e.time);\n\t\t\tif (offsetEvent && offsetEvent.time >= lastState.time) {\n\t\t\t\telapsedTicks = offsetEvent.ticks;\n\t\t\t\tperiodStartTime = offsetEvent.time;\n\t\t\t}\n\t\t\tif (lastState.state === \"started\" && e.state !== \"started\") {\n\t\t\t\telapsedTicks += this.frequency.getTicksAtTime(e.time) - this.frequency.getTicksAtTime(periodStartTime);\n\t\t\t}\n\t\t\tlastState = e;\n\t\t});\n\n\t\t// remove the temporary event\n\t\tthis._state.remove(tmpEvent);\n\n\t\t// return the ticks\n\t\treturn elapsedTicks;\n\t}\n\n\t/**\n\t *  The number of times the callback was invoked. Starts counting at 0\n\t *  and increments after the callback was invoked. Returns -1 when stopped.\n\t */\n\tget ticks(): Ticks {\n\t\treturn this.getTicksAtTime(this.now());\n\t}\n\n\tset ticks(t: Ticks) {\n\t\tthis.setTicksAtTime(t, this.now());\n\t}\n\n\t/**\n\t *  The time since ticks=0 that the TickSource has been running. Accounts\n\t *  for tempo curves\n\t */\n\tget seconds(): Seconds {\n\t\treturn this.getSecondsAtTime(this.now());\n\t}\n\n\tset seconds(s: Seconds) {\n\t\tconst now = this.now();\n\t\tconst ticks = this.frequency.timeToTicks(s, now);\n\t\tthis.setTicksAtTime(ticks, now);\n\t}\n\n\t/**\n\t *  Return the elapsed seconds at the given time.\n\t *  @param  time  When to get the elapsed seconds\n\t *  @return  The number of elapsed seconds\n\t */\n\tgetSecondsAtTime(time: Time): Seconds {\n\t\ttime = this.toSeconds(time);\n\t\tconst stopEvent = this._state.getLastState(\"stopped\", time);\n\t\tif (!stopEvent) {\n\t\t\treturn 0;\n\t\t}\n\t\t// this event allows forEachBetween to iterate until the current time\n\t\tconst tmpEvent: StateTimelineEvent = { state : \"paused\", time };\n\t\tthis._state.add(tmpEvent);\n\n\t\t// keep track of the previous offset event\n\t\tlet lastState = stopEvent;\n\t\tlet elapsedSeconds = 0;\n\n\t\t// iterate through all the events since the last stop\n\t\tthis._state.forEachBetween(stopEvent.time, time + this.sampleTime, e => {\n\t\t\tlet periodStartTime = lastState.time;\n\t\t\t// if there is an offset event in this period use that\n\t\t\tconst offsetEvent = this._tickOffset.get(e.time);\n\t\t\tif (offsetEvent && offsetEvent.time >= lastState.time) {\n\t\t\t\telapsedSeconds = offsetEvent.seconds;\n\t\t\t\tperiodStartTime = offsetEvent.time;\n\t\t\t}\n\t\t\tif (lastState.state === \"started\" && e.state !== \"started\") {\n\t\t\t\telapsedSeconds += e.time - periodStartTime;\n\t\t\t}\n\t\t\tlastState = e;\n\t\t});\n\n\t\t// remove the temporary event\n\t\tthis._state.remove(tmpEvent);\n\n\t\t// return the ticks\n\t\treturn elapsedSeconds;\n\t}\n\n\t/**\n\t * Set the clock's ticks at the given time.\n\t * @param  ticks The tick value to set\n\t * @param  time  When to set the tick value\n\t */\n\tsetTicksAtTime(ticks: Ticks, time: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis._tickOffset.cancel(time);\n\t\tthis._tickOffset.add({\n\t\t\tseconds : this.frequency.getDurationOfTicks(ticks, time),\n\t\t\tticks,\n\t\t\ttime,\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Returns the scheduled state at the given time.\n\t *  @param  time  The time to query.\n\t *  @example\n\t * source.start(\"+0.1\");\n\t * source.getStateAtTime(\"+0.1\"); //returns \"started\"\n\t */\n\tgetStateAtTime(time): PlaybackState {\n\t\ttime = this.toSeconds(time);\n\t\treturn this._state.getValueAtTime(time);\n\t}\n\n\t/**\n\t * Get the time of the given tick. The second argument\n\t * is when to test before. Since ticks can be set (with setTicksAtTime)\n\t * there may be multiple times for a given tick value.\n\t * @param  ticks The tick number.\n\t * @param  before When to measure the tick value from.\n\t * @return The time of the tick\n\t */\n\tgetTimeOfTick(tick: Ticks, before = this.now()): Seconds {\n\t\tconst offset = this._tickOffset.get(before) as TickSourceOffsetEvent;\n\t\tconst event = this._state.get(before) as StateTimelineEvent;\n\t\tconst startTime = Math.max(offset.time, event.time);\n\t\tconst absoluteTicks = this.frequency.getTicksAtTime(startTime) + tick - offset.ticks;\n\t\treturn this.frequency.getTimeOfTick(absoluteTicks);\n\t}\n\n\t/**\n\t *  Invoke the callback event at all scheduled ticks between the\n\t *  start time and the end time\n\t *  @param  startTime  The beginning of the search range\n\t *  @param  endTime    The end of the search range\n\t *  @param  callback   The callback to invoke with each tick\n\t */\n\tforEachTickBetween(startTime: Time, endTime: Time, callback: (when: Seconds, ticks: Ticks) => void): this {\n\t\tconst computedStartTime = this.toSeconds(startTime);\n\t\tconst computedEndTime = this.toSeconds(endTime);\n\t\t// only iterate through the sections where it is \"started\"\n\t\tlet lastStateEvent = this._state.get(computedStartTime);\n\t\tthis._state.forEachBetween(computedStartTime, computedEndTime, event => {\n\t\t\tif (lastStateEvent && lastStateEvent.state === \"started\" && event.state !== \"started\") {\n\t\t\t\tthis.forEachTickBetween(Math.max(lastStateEvent.time, computedStartTime), event.time - this.sampleTime, callback);\n\t\t\t}\n\t\t\tlastStateEvent = event;\n\t\t});\n\n\t\tlet error = null;\n\n\t\tif (lastStateEvent && lastStateEvent.state === \"started\" && this._state) {\n\t\t\tconst maxStartTime = Math.max(lastStateEvent.time, computedStartTime);\n\t\t\t// figure out the difference between the frequency ticks and the\n\t\t\tconst startTicks = this.frequency.getTicksAtTime(maxStartTime);\n\t\t\tconst ticksAtStart = this.frequency.getTicksAtTime(lastStateEvent.time);\n\t\t\tconst diff = startTicks - ticksAtStart;\n\t\t\tlet offset = diff % 1;\n\t\t\tif (offset !== 0) {\n\t\t\t\toffset = 1 - offset;\n\t\t\t}\n\t\t\tlet nextTickTime = this.frequency.getTimeOfTick(startTicks + offset);\n\t\t\twhile (nextTickTime < computedEndTime && this._state) {\n\t\t\t\ttry {\n\t\t\t\t\tcallback(nextTickTime, Math.round(this.getTicksAtTime(nextTickTime)));\n\t\t\t\t} catch (e) {\n\t\t\t\t\terror = e;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (this._state) {\n\t\t\t\t\tnextTickTime += this.frequency.getDurationOfTicks(1, nextTickTime);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (error) {\n\t\t\tthrow error;\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._state.dispose();\n\t\tthis._tickOffset.dispose();\n\t\tthis.frequency.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneWithContext, ToneWithContextOptions } from \"../context/ToneWithContext\";\nimport { BPM, Frequency, Hertz, Seconds, Ticks, Time } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Emitter, EmitterEventObject } from \"../util/Emitter\";\nimport { noOp, readOnly } from \"../util/Interface\";\nimport { PlaybackState, StateTimeline } from \"../util/StateTimeline\";\nimport { TickSignal } from \"./TickSignal\";\nimport { TickSource } from \"./TickSource\";\n\ntype ClockCallback = (time: Time, ticks?: Ticks) => void;\n\ninterface ClockOptions extends ToneWithContextOptions {\n\tfrequency: number;\n\tcallback: ClockCallback;\n\tunits: \"hertz\" | \"bpm\";\n}\n\ntype ClockEvent = \"start\" | \"stop\" | \"pause\";\n\n/**\n * A sample accurate clock which provides a callback at the given rate.\n * While the callback is not sample-accurate (it is still susceptible to\n * loose JS timing), the time passed in as the argument to the callback\n * is precise. For most applications, it is better to use Tone.Transport\n * instead of the Clock by itself since you can synchronize multiple callbacks.\n *\n * @param callback The callback to be invoked with the time of the audio event\n * @param frequency The rate of the callback\n * @example\n * //the callback will be invoked approximately once a second\n * //and will print the time exactly once a second apart.\n * const clock = new Clock(time => {\n * \tconsole.log(time);\n * }, 1);\n */\nexport class Clock<Type extends BPM | Hertz = Hertz>\nextends ToneWithContext<ClockOptions> implements Emitter<ClockEvent> {\n\n\tname = \"Clock\";\n\n\t/**\n\t *  The callback function to invoke at the scheduled tick.\n\t */\n\tcallback: ClockCallback = noOp;\n\n\t/**\n\t *  The tick counter\n\t */\n\tprivate _tickSource: TickSource<Type>;\n\n\t/**\n\t *  The last time the loop callback was invoked\n\t */\n\tprivate _lastUpdate: number = 0;\n\n\t/**\n\t *  Keep track of the playback state\n\t */\n\tprivate _state: StateTimeline = new StateTimeline(\"stopped\");\n\n\t/**\n\t * Context bound reference to the _loop method\n\t * This is necessary to remove the event in the end.\n\t */\n\tprivate _boundLoop: () => void = this._loop.bind(this);\n\n\t/**\n\t *  The rate the callback function should be invoked.\n\t */\n\tfrequency: TickSignal<Type>;\n\n\tconstructor(options: Partial<ClockOptions>);\n\tconstructor(callback?: ClockCallback, frequency?: Frequency);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Clock.getDefaults(), arguments, [\"callback\", \"frequency\"]));\n\t\tconst options = optionsFromArguments(Clock.getDefaults(), arguments, [\"callback\", \"frequency\"]);\n\n\t\tthis.callback = options.callback;\n\t\tthis._tickSource = new TickSource({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.frequency,\n\t\t\tunits: options.units,\n\t\t});\n\t\tthis._lastUpdate = 0;\n\t\tthis.frequency = this._tickSource.frequency;\n\t\treadOnly(this, \"frequency\");\n\n\t\t// add an initial state\n\t\tthis._state.setStateAtTime(\"stopped\", 0);\n\n\t\t// bind a callback to the worker thread\n\t\tthis.context.on(\"tick\", this._boundLoop);\n\t}\n\n\tstatic getDefaults(): ClockOptions {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tcallback: noOp as ClockCallback,\n\t\t\tfrequency: 1,\n\t\t\tunits: \"hertz\",\n\t\t}) as ClockOptions;\n\t}\n\n\t/**\n\t *  Returns the playback state of the source, either \"started\", \"stopped\" or \"paused\".\n\t */\n\tget state(): PlaybackState {\n\t\treturn this._state.getValueAtTime(this.now());\n\t}\n\n\t/**\n\t *  Start the clock at the given time. Optionally pass in an offset\n\t *  of where to start the tick counter from.\n\t *  @param  time    The time the clock should start\n\t *  @param offset  Where the tick counter starts counting from.\n\t */\n\tstart(time?: Time, offset?: Ticks): this {\n\t\t// make sure the context is started\n\t\tthis.context.resume();\n\t\t// start the loop\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(computedTime) !== \"started\") {\n\t\t\tthis._state.setStateAtTime(\"started\", computedTime);\n\t\t\tthis._tickSource.start(computedTime, offset);\n\t\t\tif (computedTime < this._lastUpdate) {\n\t\t\t\tthis.emit(\"start\", computedTime, offset);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Stop the clock. Stopping the clock resets the tick counter to 0.\n\t *  @param time The time when the clock should stop.\n\t *  @example\n\t * clock.stop();\n\t */\n\tstop(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._state.cancel(computedTime);\n\t\tthis._state.setStateAtTime(\"stopped\", computedTime);\n\t\tthis._tickSource.stop(computedTime);\n\t\tif (computedTime < this._lastUpdate) {\n\t\t\tthis.emit(\"stop\", computedTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Pause the clock. Pausing does not reset the tick counter.\n\t *  @param time The time when the clock should stop.\n\t */\n\tpause(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(computedTime) === \"started\") {\n\t\t\tthis._state.setStateAtTime(\"paused\", computedTime);\n\t\t\tthis._tickSource.pause(computedTime);\n\t\t\tif (computedTime < this._lastUpdate) {\n\t\t\t\tthis.emit(\"pause\", computedTime);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  The number of times the callback was invoked. Starts counting at 0\n\t *  and increments after the callback was invoked.\n\t */\n\tget ticks(): Ticks {\n\t\treturn Math.ceil(this.getTicksAtTime(this.now()));\n\t}\n\tset ticks(t: Ticks) {\n\t\tthis._tickSource.ticks = t;\n\t}\n\n\t/**\n\t *  The time since ticks=0 that the Clock has been running. Accounts for tempo curves\n\t */\n\tget seconds(): Seconds {\n\t\treturn this._tickSource.seconds;\n\t}\n\tset seconds(s: Seconds) {\n\t\tthis._tickSource.seconds = s;\n\t}\n\n\t/**\n\t *  Return the elapsed seconds at the given time.\n\t *  @param  time  When to get the elapsed seconds\n\t *  @return  The number of elapsed seconds\n\t */\n\tgetSecondsAtTime(time: Time): Seconds {\n\t\treturn this._tickSource.getSecondsAtTime(time);\n\t}\n\n\t/**\n\t * Set the clock's ticks at the given time.\n\t * @param  ticks The tick value to set\n\t * @param  time  When to set the tick value\n\t */\n\tsetTicksAtTime(ticks: Ticks, time: Time): this {\n\t\tthis._tickSource.setTicksAtTime(ticks, time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the clock's ticks at the given time.\n\t * @param  time  When to get the tick value\n\t * @return The tick value at the given time.\n\t */\n\tgetTicksAtTime(time?: Time): Ticks {\n\t\treturn this._tickSource.getTicksAtTime(time);\n\t}\n\n\t/**\n\t * Get the time of the next tick\n\t * @param  ticks The tick number.\n\t */\n\tnextTickTime(offset: Ticks, when: Time): Seconds {\n\t\tconst computedTime = this.toSeconds(when);\n\t\tconst currentTick = this.getTicksAtTime(computedTime);\n\t\treturn this._tickSource.getTimeOfTick(currentTick + offset, computedTime);\n\t}\n\n\t/**\n\t *  The scheduling loop.\n\t */\n\tprivate _loop(): void {\n\n\t\tconst startTime = this._lastUpdate;\n\t\tconst endTime = this.now();\n\t\tthis._lastUpdate = endTime;\n\n\t\tif (startTime !== endTime) {\n\t\t\t// the state change events\n\t\t\tthis._state.forEachBetween(startTime, endTime, e => {\n\t\t\t\tswitch (e.state) {\n\t\t\t\t\tcase \"started\" :\n\t\t\t\t\t\tconst offset = this._tickSource.getTicksAtTime(e.time);\n\t\t\t\t\t\tthis.emit(\"start\", e.time, offset);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"stopped\" :\n\t\t\t\t\t\tif (e.time !== 0) {\n\t\t\t\t\t\t\tthis.emit(\"stop\", e.time);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"paused\" :\n\t\t\t\t\t\tthis.emit(\"pause\", e.time);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t});\n\t\t\t// the tick callbacks\n\t\t\tthis._tickSource.forEachTickBetween(startTime, endTime, (time, ticks) => {\n\t\t\t\tthis.callback(time, ticks);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Returns the scheduled state at the given time.\n\t * @param  time  The time to query.\n\t * @return  The name of the state input in setStateAtTime.\n\t * @example\n\t * clock.start(\"+0.1\");\n\t * clock.getStateAtTime(\"+0.1\"); //returns \"started\"\n\t */\n\tgetStateAtTime(time: Time): PlaybackState {\n\t\tconst computedTime = this.toSeconds(time);\n\t\treturn this._state.getValueAtTime(computedTime);\n\t}\n\n\t/**\n\t *  Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.context.off(\"tick\", this._boundLoop);\n\t\tthis._tickSource.dispose();\n\t\tthis._state.dispose();\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////\n\t// EMITTER MIXIN TO SATISFY COMPILER\n\t///////////////////////////////////////////////////////////////////////\n\n\ton!: (event: ClockEvent, callback: (...args: any[]) => void) => this;\n\tonce!: (event: ClockEvent, callback: (...args: any[]) => void) => this;\n\toff!: (event: ClockEvent, callback?: ((...args: any[]) => void) | undefined) => this;\n\temit!: (event: any, ...args: any[]) => this;\n}\n\nEmitter.mixin(Clock);\n","import { getContext } from \"../Global\";\nimport { TimeBaseUnit, TimeValue } from \"./TimeBase\";\nimport { TransportTimeClass } from \"./TransportTime\";\nimport { Seconds, Ticks } from \"./Units\";\n\n/**\n * Ticks is a primitive type for encoding Time values.\n * Ticks can be constructed with or without the `new` keyword. Ticks can be passed\n * into the parameter of any method which takes time as an argument.\n * @example\n * const t = Ticks(\"4n\"); //a quarter note as ticks\n */\nexport class TicksClass extends TransportTimeClass<Ticks> {\n\n\tname = \"Ticks\";\n\n\treadonly defaultUnits: TimeBaseUnit = \"i\";\n\n\t/**\n\t * Get the current time in the given units\n\t */\n\tprotected _now(): Ticks {\n\t\treturn this.context.transport.ticks;\n\t}\n\n\t/**\n\t *  Return the value of the beats in the current units\n\t */\n\tprotected _beatsToUnits(beats: number): Ticks {\n\t\treturn this._getPPQ() * beats;\n\t}\n\n\t/**\n\t *  Returns the value of a second in the current units\n\t */\n\tprotected _secondsToUnits(seconds: Seconds): Ticks {\n\t\treturn Math.floor(seconds / (60 / this._getBpm()) * this._getPPQ());\n\t}\n\n\t/**\n\t *  Returns the value of a tick in the current time units\n\t */\n\tprotected _ticksToUnits(ticks: Ticks): Ticks {\n\t\treturn ticks;\n\t}\n\n\t/**\n\t *  Return the time in ticks\n\t */\n\ttoTicks(): Ticks {\n\t\treturn this.valueOf() as Ticks;\n\t}\n\n\t/**\n\t *  Return the time in seconds\n\t */\n\ttoSeconds(): Seconds {\n\t\treturn (this.valueOf() / this._getPPQ()) * (60 / this._getBpm());\n\t}\n}\n\nexport function Ticks(value?: TimeValue, units?: TimeBaseUnit): TicksClass {\n\treturn new TicksClass(getContext(), value, units);\n}\n","import { getContext } from \"../Global\";\nimport { ftom, mtof } from \"./Conversions\";\nimport { FrequencyClass, FrequencyUnit } from \"./Frequency\";\nimport { TimeValue } from \"./TimeBase\";\nimport { Hertz, Interval, MidiNote, Seconds, Ticks } from \"./Units\";\n\n/**\n *  @class Midi is a primitive type for encoding Time values.\n *         Midi can be constructed with or without the `new` keyword. Midi can be passed\n *         into the parameter of any method which takes time as an argument.\n *  @constructor\n *  @extends {Tone.Frequency}\n *  @param  {String|Number}  val    The time value.\n *  @param  {String=}  units  The units of the value.\n *  @example\n * var t = Midi(\"4n\");//a quarter note\n */\nexport class MidiClass extends FrequencyClass<MidiNote> {\n\n\tname = \"Midi\";\n\n\treadonly defaultUnits = \"midi\";\n\n\t/**\n\t *  Returns the value of a frequency in the current units\n\t */\n\tprotected _frequencyToUnits(freq: Hertz): MidiNote {\n\t\treturn ftom(super._frequencyToUnits(freq));\n\t}\n\n\t/**\n\t *  Returns the value of a tick in the current time units\n\t */\n\tprotected _ticksToUnits(ticks: Ticks): MidiNote {\n\t\treturn ftom(super._ticksToUnits(ticks));\n\t}\n\n\t/**\n\t *  Return the value of the beats in the current units\n\t */\n\tprotected _beatsToUnits(beats: number): MidiNote {\n\t\treturn ftom(super._beatsToUnits(beats));\n\t}\n\n\t/**\n\t *  Returns the value of a second in the current units\n\t */\n\tprotected _secondsToUnits(seconds: Seconds): MidiNote {\n\t\treturn ftom(super._secondsToUnits(seconds));\n\t}\n\n\t/**\n\t *  Return the value of the frequency as a MIDI note\n\t *  @return  {MIDI}\n\t *  @example\n\t * Midi(60).toMidi(); //60\n\t */\n\ttoMidi(): MidiNote {\n\t\treturn this.valueOf();\n\t}\n\n\t/**\n\t *  Return the value of the frequency as a MIDI note\n\t *  @return  {MIDI}\n\t *  @example\n\t * Midi(60).toFrequency(); //261.6255653005986\n\t */\n\ttoFrequency(): Hertz {\n\t\treturn mtof(this.toMidi());\n\t}\n\n\t/**\n\t *  Transposes the frequency by the given number of semitones.\n\t *  @return A new transposed MidiClass\n\t *  @example\n\t * Midi(\"A4\").transpose(3); //\"C5\"\n\t */\n\ttranspose(interval: Interval): MidiClass {\n\t\treturn new MidiClass(this.context, this.toMidi() + interval);\n\t}\n}\n\n/**\n * Convert a value into a FrequencyClass object.\n */\nexport function Midi(value?: TimeValue, units?: FrequencyUnit): MidiClass {\n\treturn new MidiClass(getContext(), value, units);\n}\n","import { ToneWithContext, ToneWithContextOptions } from \"../context/ToneWithContext\";\nimport { Seconds, Time } from \"../type/Units\";\nimport { Timeline, TimelineEvent } from \"./Timeline\";\n\ninterface DrawEvent extends TimelineEvent {\n\tcallback: () => void;\n}\n\n/**\n * Draw is useful for synchronizing visuals and audio events.\n * Callbacks from Tone.Transport or any of the Tone.Event classes\n * always happen _before_ the scheduled time and are not synchronized\n * to the animation frame so they are not good for triggering tightly\n * synchronized visuals and sound. Draw makes it easy to schedule\n * callbacks using the AudioContext time and uses requestAnimationFrame.\n * @example\n * Tone.Transport.schedule(function(time){\n * \t//use the time argument to schedule a callback with Draw\n * \tDraw.schedule(function(){\n * \t\t//do drawing or DOM manipulation here\n * \t}, time)\n * }, \"+0.5\")\n */\nexport class Draw extends ToneWithContext<ToneWithContextOptions> {\n\n\tname = \"Draw\";\n\n\t/**\n\t *  The duration after which events are not invoked.\n\t */\n\texpiration: Seconds = 0.25;\n\n\t/**\n\t *  The amount of time before the scheduled time\n\t *  that the callback can be invoked. Default is\n\t *  half the time of an animation frame (0.008 seconds).\n\t */\n\tanticipation: Seconds = 0.008;\n\n\t/**\n\t *  All of the events.\n\t */\n\tprivate _events: Timeline<DrawEvent> = new Timeline();\n\n\t/**\n\t *  The draw loop\n\t */\n\tprivate _boundDrawLoop = this._drawLoop.bind(this);\n\n\t/**\n\t * The animation frame id\n\t */\n\tprivate _animationFrame: number = -1;\n\n\t/**\n\t *  Schedule a function at the given time to be invoked\n\t *  on the nearest animation frame.\n\t *  @param  callback  Callback is invoked at the given time.\n\t *  @param  time      The time relative to the AudioContext time to invoke the callback.\n\t */\n\tschedule(callback: () => void, time: Time): this {\n\t\tthis._events.add({\n\t\t\tcallback,\n\t\t\ttime : this.toSeconds(time),\n\t\t});\n\t\t// start the draw loop on the first event\n\t\tif (this._events.length === 1) {\n\t\t\tthis._animationFrame = requestAnimationFrame(this._boundDrawLoop);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Cancel events scheduled after the given time\n\t *  @param  after  Time after which scheduled events will be removed from the scheduling timeline.\n\t */\n\tcancel(after?: Time): this {\n\t\tthis._events.cancel(this.toSeconds(after));\n\t\treturn this;\n\t}\n\n\t/**\n\t *  The draw loop\n\t */\n\tprivate _drawLoop(): void {\n\t\tconst now = this.context.currentTime;\n\t\twhile (this._events.length && (this._events.peek() as DrawEvent).time - this.anticipation <= now) {\n\t\t\tconst event = this._events.shift();\n\t\t\tif (event && now - event.time <= this.expiration) {\n\t\t\t\tevent.callback();\n\t\t\t}\n\t\t}\n\t\tif (this._events.length > 0) {\n\t\t\tthis._animationFrame = requestAnimationFrame(this._boundDrawLoop);\n\t\t}\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._events.dispose();\n\t\tcancelAnimationFrame(this._animationFrame);\n\t\treturn this;\n\t}\n}\n","import { Tone } from \"../Tone\";\nimport { isDefined } from \"./TypeCheck\";\n\n/**\n * An IntervalTimeline event must have a time and duration\n */\nexport interface IntervalTimelineEvent {\n\ttime: number;\n\tduration: number;\n\t[propName: string]: any;\n}\n\n/**\n * Similar to Tone.Timeline, but all events represent\n * intervals with both \"time\" and \"duration\" times. The\n * events are placed in a tree structure optimized\n * for querying an intersection point with the timeline\n * events. Internally uses an [Interval Tree](https://en.wikipedia.org/wiki/Interval_tree)\n * to represent the data.\n */\nexport class IntervalTimeline extends Tone {\n\n\tname = \"IntervalTimeline\";\n\n\t/**\n\t *  The root node of the inteval tree\n\t */\n\tprivate _root: IntervalNode | null = null;\n\n\t/**\n\t *  Keep track of the length of the timeline.\n\t */\n\tprivate _length: number = 0;\n\n\t/**\n\t *  The event to add to the timeline. All events must\n\t *  have a time and duration value\n\t *  @param  event  The event to add to the timeline\n\t */\n\tadd(event: IntervalTimelineEvent): this {\n\t\tthis.assert(isDefined(event.time), \"Events must have a time property\");\n\t\tthis.assert(isDefined(event.duration), \"Events must have a duration parameter\");\n\n\t\tevent.time = event.time.valueOf();\n\t\tlet node: IntervalNode | null = new IntervalNode(event.time, event.time + event.duration, event);\n\t\tif (this._root === null) {\n\t\t\tthis._root = node;\n\t\t} else {\n\t\t\tthis._root.insert(node);\n\t\t}\n\t\tthis._length++;\n\t\t// Restructure tree to be balanced\n\t\twhile (node !== null) {\n\t\t\tnode.updateHeight();\n\t\t\tnode.updateMax();\n\t\t\tthis._rebalance(node);\n\t\t\tnode = node.parent;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Remove an event from the timeline.\n\t *  @param  event  The event to remove from the timeline\n\t */\n\tremove(event: IntervalTimelineEvent): this {\n\t\tif (this._root !== null) {\n\t\t\tconst results: IntervalNode[] = [];\n\t\t\tthis._root.search(event.time, results);\n\t\t\tfor (const node of results) {\n\t\t\t\tif (node.event === event) {\n\t\t\t\t\tthis._removeNode(node);\n\t\t\t\t\tthis._length--;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  The number of items in the timeline.\n\t *  @readOnly\n\t */\n\tget length(): number {\n\t\treturn this._length;\n\t}\n\n\t/**\n\t *  Remove events whose time time is after the given time\n\t *  @param  time  The time to query.\n\t */\n\tcancel(after: number): this {\n\t\tthis.forEachFrom(after, event => this.remove(event));\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Set the root node as the given node\n\t */\n\tprivate _setRoot(node: IntervalNode | null): void {\n\t\tthis._root = node;\n\t\tif (this._root !== null) {\n\t\t\tthis._root.parent = null;\n\t\t}\n\t}\n\n\t/**\n\t *  Replace the references to the node in the node's parent\n\t *  with the replacement node.\n\t */\n\tprivate _replaceNodeInParent(node: IntervalNode, replacement: IntervalNode | null): void {\n\t\tif (node.parent !== null) {\n\t\t\tif (node.isLeftChild()) {\n\t\t\t\tnode.parent.left = replacement;\n\t\t\t} else {\n\t\t\t\tnode.parent.right = replacement;\n\t\t\t}\n\t\t\tthis._rebalance(node.parent);\n\t\t} else {\n\t\t\tthis._setRoot(replacement);\n\t\t}\n\t}\n\n\t/**\n\t *  Remove the node from the tree and replace it with\n\t *  a successor which follows the schema.\n\t */\n\tprivate _removeNode(node): void {\n\t\tif (node.left === null && node.right === null) {\n\t\t\tthis._replaceNodeInParent(node, null);\n\t\t} else if (node.right === null) {\n\t\t\tthis._replaceNodeInParent(node, node.left);\n\t\t} else if (node.left === null) {\n\t\t\tthis._replaceNodeInParent(node, node.right);\n\t\t} else {\n\t\t\tconst balance = node.getBalance();\n\t\t\tlet replacement: IntervalNode;\n\t\t\tlet temp: IntervalNode | null = null;\n\t\t\tif (balance > 0) {\n\t\t\t\tif (node.left.right === null) {\n\t\t\t\t\treplacement = node.left;\n\t\t\t\t\treplacement.right = node.right;\n\t\t\t\t\ttemp = replacement;\n\t\t\t\t} else {\n\t\t\t\t\treplacement = node.left.right;\n\t\t\t\t\twhile (replacement.right !== null) {\n\t\t\t\t\t\treplacement = replacement.right;\n\t\t\t\t\t}\n\t\t\t\t\tif (replacement.parent) {\n\t\t\t\t\t\treplacement.parent.right = replacement.left;\n\t\t\t\t\t\ttemp = replacement.parent;\n\t\t\t\t\t\treplacement.left = node.left;\n\t\t\t\t\t\treplacement.right = node.right;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (node.right.left === null) {\n\t\t\t\treplacement = node.right;\n\t\t\t\treplacement.left = node.left;\n\t\t\t\ttemp = replacement;\n\t\t\t} else {\n\t\t\t\treplacement = node.right.left;\n\t\t\t\twhile (replacement.left !== null) {\n\t\t\t\t\treplacement = replacement.left;\n\t\t\t\t}\n\t\t\t\tif (replacement.parent) {\n\t\t\t\t\treplacement.parent.left = replacement.right;\n\t\t\t\t\ttemp = replacement.parent;\n\t\t\t\t\treplacement.left = node.left;\n\t\t\t\t\treplacement.right = node.right;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (node.parent !== null) {\n\t\t\t\tif (node.isLeftChild()) {\n\t\t\t\t\tnode.parent.left = replacement;\n\t\t\t\t} else {\n\t\t\t\t\tnode.parent.right = replacement;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._setRoot(replacement);\n\t\t\t}\n\t\t\tif (temp) {\n\t\t\t\tthis._rebalance(temp);\n\t\t\t}\n\t\t}\n\t\tnode.dispose();\n\t}\n\n\t/**\n\t *  Rotate the tree to the left\n\t *  @param  {IntervalNode}  node\n\t *  @private\n\t */\n\t_rotateLeft(node): void {\n\t\tconst parent = node.parent;\n\t\tconst isLeftChild = node.isLeftChild();\n\n\t\t// Make node.right the new root of this sub tree (instead of node)\n\t\tconst pivotNode = node.right;\n\t\tnode.right = pivotNode.left;\n\t\tpivotNode.left = node;\n\n\t\tif (parent !== null) {\n\t\t\tif (isLeftChild) {\n\t\t\t\tparent.left = pivotNode;\n\t\t\t} else {\n\t\t\t\tparent.right = pivotNode;\n\t\t\t}\n\t\t} else {\n\t\t\tthis._setRoot(pivotNode);\n\t\t}\n\t}\n\n\t/**\n\t *  Rotate the tree to the right\n\t *  @param  {IntervalNode}  node\n\t *  @private\n\t */\n\t_rotateRight(node): void {\n\t\tconst parent = node.parent;\n\t\tconst isLeftChild = node.isLeftChild();\n\n\t\t// Make node.left the new root of this sub tree (instead of node)\n\t\tconst pivotNode = node.left;\n\t\tnode.left = pivotNode.right;\n\t\tpivotNode.right = node;\n\n\t\tif (parent !== null) {\n\t\t\tif (isLeftChild) {\n\t\t\t\tparent.left = pivotNode;\n\t\t\t} else {\n\t\t\t\tparent.right = pivotNode;\n\t\t\t}\n\t\t} else {\n\t\t\tthis._setRoot(pivotNode);\n\t\t}\n\t}\n\n\t/**\n\t *  Balance the BST\n\t */\n\tprivate _rebalance(node: IntervalNode): void {\n\t\tconst balance = node.getBalance();\n\t\tif (balance > 1 && node.left) {\n\t\t\tif (node.left.getBalance() < 0) {\n\t\t\t\tthis._rotateLeft(node.left);\n\t\t\t} else {\n\t\t\t\tthis._rotateRight(node);\n\t\t\t}\n\t\t} else if (balance < -1 && node.right) {\n\t\t\tif (node.right.getBalance() > 0) {\n\t\t\t\tthis._rotateRight(node.right);\n\t\t\t} else {\n\t\t\t\tthis._rotateLeft(node);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *  Get an event whose time and duration span the give time. Will\n\t *  return the match whose \"time\" value is closest to the given time.\n\t *  @return  The event which spans the desired time\n\t */\n\tget(time: number): IntervalTimelineEvent | null {\n\t\tif (this._root !== null) {\n\t\t\tconst results: IntervalNode[] = [];\n\t\t\tthis._root.search(time, results);\n\t\t\tif (results.length > 0) {\n\t\t\t\tlet max = results[0];\n\t\t\t\tfor (let i = 1; i < results.length; i++) {\n\t\t\t\t\tif (results[i].low > max.low) {\n\t\t\t\t\t\tmax = results[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn max.event;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t *  Iterate over everything in the timeline.\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEach(callback: (event: IntervalTimelineEvent) => void): this {\n\t\tif (this._root !== null) {\n\t\t\tconst allNodes: IntervalNode[] = [];\n\t\t\tthis._root.traverse(node => allNodes.push(node));\n\t\t\tallNodes.forEach(node => {\n\t\t\t\tif (node.event) {\n\t\t\t\t\tcallback(node.event);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array in which the given time\n\t *  overlaps with the time and duration time of the event.\n\t *  @param  time The time to check if items are overlapping\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachAtTime(time: number, callback: (event: IntervalTimelineEvent) => void): this {\n\t\tif (this._root !== null) {\n\t\t\tconst results: IntervalNode[] = [];\n\t\t\tthis._root.search(time, results);\n\t\t\tresults.forEach(node => {\n\t\t\t\tif (node.event) {\n\t\t\t\t\tcallback(node.event);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array in which the time is greater\n\t *  than or equal to the given time.\n\t *  @param  time The time to check if items are before\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachFrom(time, callback): this {\n\t\tif (this._root !== null) {\n\t\t\tconst results: IntervalNode[] = [];\n\t\t\tthis._root.searchAfter(time, results);\n\t\t\tresults.forEach(node => {\n\t\t\t\tif (node.event) {\n\t\t\t\t\tcallback(node.event);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (this._root !== null) {\n\t\t\tthis._root.traverse(node => node.dispose());\n\t\t}\n\t\tthis._root = null;\n\t\treturn this;\n\t}\n}\n\n///////////////////////////////////////////////////////////////////////////\n// \tINTERVAL NODE HELPER\n///////////////////////////////////////////////////////////////////////////\n\n/**\n *  Represents a node in the binary search tree, with the addition\n *  of a \"high\" value which keeps track of the highest value of\n *  its children.\n *  References:\n *  https://brooknovak.wordpress.com/2013/12/07/augmented-interval-tree-in-c/\n *  http://www.mif.vu.lt/~valdas/ALGORITMAI/LITERATURA/Cormen/Cormen.pdf\n *  @param low\n *  @param high\n */\n// tslint:disable-next-line: max-classes-per-file\nclass IntervalNode {\n\n\t// the event container\n\tevent: IntervalTimelineEvent | null;\n\t// the low value\n\tlow: number;\n\t// the high value\n\thigh: number;\n\t// the high value for this and all child nodes\n\tmax: number;\n\t// the nodes to the left\n\tprivate _left: IntervalNode | null = null;\n\t// the nodes to the right\n\tprivate _right: IntervalNode | null = null;\n\t// the parent node\n\tparent: IntervalNode | null = null;\n\t// the number of child nodes\n\theight: number = 0;\n\n\tconstructor(low, high, event) {\n\t\tthis.event = event;\n\t\t// the low value\n\t\tthis.low = low;\n\t\t// the high value\n\t\tthis.high = high;\n\t\t// the high value for this and all child nodes\n\t\tthis.max = this.high;\n\t}\n\n\t/**\n\t *  Insert a node into the correct spot in the tree\n\t */\n\tinsert(node: IntervalNode): void {\n\t\tif (node.low <= this.low) {\n\t\t\tif (this.left === null) {\n\t\t\t\tthis.left = node;\n\t\t\t} else {\n\t\t\t\tthis.left.insert(node);\n\t\t\t}\n\t\t} else if (this.right === null) {\n\t\t\tthis.right = node;\n\t\t} else {\n\t\t\tthis.right.insert(node);\n\t\t}\n\t}\n\n\t/**\n\t *  Search the tree for nodes which overlap\n\t *  with the given point\n\t *  @param  point  The point to query\n\t *  @param  results  The array to put the results\n\t */\n\tsearch(point: number, results: IntervalNode[]): void {\n\t\t// If p is to the right of the rightmost point of any interval\n\t\t// in this node and all children, there won't be any matches.\n\t\tif (point > this.max) {\n\t\t\treturn;\n\t\t}\n\t\t// Search left children\n\t\tif (this.left !== null) {\n\t\t\tthis.left.search(point, results);\n\t\t}\n\t\t// Check this node\n\t\tif (this.low <= point && this.high > point) {\n\t\t\tresults.push(this);\n\t\t}\n\t\t// If p is to the left of the time of this interval,\n\t\t// then it can't be in any child to the right.\n\t\tif (this.low > point) {\n\t\t\treturn;\n\t\t}\n\t\t// Search right children\n\t\tif (this.right !== null) {\n\t\t\tthis.right.search(point, results);\n\t\t}\n\t}\n\n\t/**\n\t *  Search the tree for nodes which are less\n\t *  than the given point\n\t *  @param  point  The point to query\n\t *  @param  results  The array to put the results\n\t */\n\tsearchAfter(point: number, results: IntervalNode[]): void {\n\t\t// Check this node\n\t\tif (this.low >= point) {\n\t\t\tresults.push(this);\n\t\t\tif (this.left !== null) {\n\t\t\t\tthis.left.searchAfter(point, results);\n\t\t\t}\n\t\t}\n\t\t// search the right side\n\t\tif (this.right !== null) {\n\t\t\tthis.right.searchAfter(point, results);\n\t\t}\n\t}\n\n\t/**\n\t *  Invoke the callback on this element and both it's branches\n\t *  @param  {Function}  callback\n\t */\n\ttraverse(callback: (self: IntervalNode) => void): void {\n\t\tcallback(this);\n\t\tif (this.left !== null) {\n\t\t\tthis.left.traverse(callback);\n\t\t}\n\t\tif (this.right !== null) {\n\t\t\tthis.right.traverse(callback);\n\t\t}\n\t}\n\n\t/**\n\t *  Update the height of the node\n\t */\n\tupdateHeight(): void {\n\t\tif (this.left !== null && this.right !== null) {\n\t\t\tthis.height = Math.max(this.left.height, this.right.height) + 1;\n\t\t} else if (this.right !== null) {\n\t\t\tthis.height = this.right.height + 1;\n\t\t} else if (this.left !== null) {\n\t\t\tthis.height = this.left.height + 1;\n\t\t} else {\n\t\t\tthis.height = 0;\n\t\t}\n\t}\n\n\t/**\n\t *  Update the height of the node\n\t */\n\tupdateMax(): void {\n\t\tthis.max = this.high;\n\t\tif (this.left !== null) {\n\t\t\tthis.max = Math.max(this.max, this.left.max);\n\t\t}\n\t\tif (this.right !== null) {\n\t\t\tthis.max = Math.max(this.max, this.right.max);\n\t\t}\n\t}\n\n\t/**\n\t *  The balance is how the leafs are distributed on the node\n\t *  @return  Negative numbers are balanced to the right\n\t */\n\tgetBalance(): number {\n\t\tlet balance = 0;\n\t\tif (this.left !== null && this.right !== null) {\n\t\t\tbalance = this.left.height - this.right.height;\n\t\t} else if (this.left !== null) {\n\t\t\tbalance = this.left.height + 1;\n\t\t} else if (this.right !== null) {\n\t\t\tbalance = -(this.right.height + 1);\n\t\t}\n\t\treturn balance;\n\t}\n\n\t/**\n\t *  @returns true if this node is the left child of its parent\n\t */\n\tisLeftChild(): boolean {\n\t\treturn this.parent !== null && this.parent.left === this;\n\t}\n\n\t/**\n\t *  get/set the left node\n\t */\n\tget left(): IntervalNode | null {\n\t\treturn this._left;\n\t}\n\n\tset left(node: IntervalNode | null) {\n\t\tthis._left = node;\n\t\tif (node !== null) {\n\t\t\tnode.parent = this;\n\t\t}\n\t\tthis.updateHeight();\n\t\tthis.updateMax();\n\t}\n\n\t/**\n\t *  get/set the right node\n\t */\n\tget right(): IntervalNode | null {\n\t\treturn this._right;\n\t}\n\n\tset right(node: IntervalNode | null) {\n\t\tthis._right = node;\n\t\tif (node !== null) {\n\t\t\tnode.parent = this;\n\t\t}\n\t\tthis.updateHeight();\n\t\tthis.updateMax();\n\t}\n\n\t/**\n\t *  null out references.\n\t */\n\tdispose(): void {\n\t\tthis.parent = null;\n\t\tthis._left = null;\n\t\tthis._right = null;\n\t\tthis.event = null;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Decibels } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\n\ninterface VolumeOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n\tmute: boolean;\n}\n\n/**\n *  @class Volume is a simple volume node, useful for creating a volume fader.\n *\n *  @extends {Tone.AudioNode}\n *  @constructor\n *  @param {Decibels} [volume=0] the initial volume\n *  @example\n * var vol = new Volume(-12);\n * instrument.chain(vol, Tone.Master);\n */\nexport class Volume extends ToneAudioNode<VolumeOptions> {\n\n\treadonly name = \"Volume\";\n\n\t/**\n\t * the output node\n\t */\n\toutput: Gain<Decibels> = new Gain({\n\t\tcontext: this.context,\n\t\tunits: \"decibels\",\n\t});\n\n\t/**\n\t * Input and output are the same\n\t */\n\tinput = this.output;\n\n\t/**\n\t * The unmuted volume\n\t */\n\tprivate _unmutedVolume: Decibels;\n\n\t/**\n\t *  The volume control in decibels.\n\t */\n\tvolume: Param<Decibels> = this.output.gain;\n\n\tconstructor(options?: Decibels | Partial<VolumeOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Volume.getDefaults(), arguments, [\"volume\"]));\n\t\tconst options = optionsFromArguments(Volume.getDefaults(), arguments, [\"volume\"]);\n\n\t\tthis.volume.value = options.volume;\n\t\treadOnly(this, \"volume\");\n\t\tthis._unmutedVolume = options.volume;\n\n\t\t// set the mute initially\n\t\tthis.mute = options.mute;\n\t}\n\n\tstatic getDefaults(): VolumeOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmute: false,\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Mute the output.\n\t * @example\n\t * //mute the output\n\t * volume.mute = true;\n\t */\n\tget mute(): boolean {\n\t\treturn this.volume.value === -Infinity;\n\t}\n\tset mute(mute: boolean) {\n\t\tif (!this.mute && mute) {\n\t\t\tthis._unmutedVolume = this.volume.value;\n\t\t\t// maybe it should ramp here?\n\t\t\tthis.volume.value = -Infinity;\n\t\t} else if (this.mute && !mute) {\n\t\t\tthis.volume.value = this._unmutedVolume;\n\t\t}\n\t}\n\n\t/**\n\t *  clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.input.dispose();\n\t\tthis.volume.dispose();\n\t\treturn this;\n\t}\n}\n","import { Volume } from \"../../component/channel/Volume\";\nimport { connectSeries } from \"../Connect\";\nimport { Decibels } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { onContextClose, onContextInit } from \"./ContextInitialization\";\nimport { Gain } from \"./Gain\";\nimport { Param } from \"./Param\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"./ToneAudioNode\";\n\ninterface DestinationOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n\tmute: boolean;\n}\n\n/**\n *  A single master output which is connected to the\n *  AudioDestinationNode (aka your speakers).\n *  It provides useful conveniences such as the ability\n *  to set the volume and mute the entire application.\n *  It also gives you the ability to apply master effects to your application.\n *\n *  @example\n * //the audio will go from the oscillator to the speakers\n * oscillator.connect(Destination);\n * //a convenience for connecting to the master output is also provided:\n * oscillator.toDestination();\n * //the above two examples are equivalent.\n */\nexport class Destination extends ToneAudioNode<DestinationOptions> {\n\n\treadonly name = \"Destination\";\n\n\tinput: Volume = new Volume({ context: this.context });\n\toutput: Gain = new Gain({ context : this.context });\n\n\t/**\n\t * The volume of the master output.\n\t */\n\tvolume: Param<Decibels> = this.input.volume;\n\n\tconstructor(options: Partial<DestinationOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Destination.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Destination.getDefaults(), arguments);\n\n\t\tconnectSeries(this.input, this.output, this.context.rawContext.destination);\n\n\t\tthis.volume.value = options.volume;\n\t\tthis.mute = options.mute;\n\t}\n\n\tstatic getDefaults(): DestinationOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmute: false,\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Mute the output.\n\t * @example\n\t * //mute the output\n\t * Destination.mute = true;\n\t */\n\tget mute(): boolean {\n\t\treturn this.input.mute;\n\t}\n\n\tset mute(mute: boolean) {\n\t\tthis.input.mute = mute;\n\t}\n\n\t/**\n\t *  Add a master effects chain. NOTE: this will disconnect any nodes which were previously\n\t *  chained in the master effects chain.\n\t *  @param nodes All arguments will be connected in a row and the Master will be routed through it.\n\t *  @return  {Destination}  this\n\t *  @example\n\t * //some overall compression to keep the levels in check\n\t * var masterCompressor = new Tone.Compressor({\n\t * \t\"threshold\" : -6,\n\t * \t\"ratio\" : 3,\n\t * \t\"attack\" : 0.5,\n\t * \t\"release\" : 0.1\n\t * });\n\t * //give a little boost to the lows\n\t * var lowBump = new Tone.Filter(200, \"lowshelf\");\n\t * //route everything through the filter\n\t * //and compressor before going to the speakers\n\t * Destination.chain(lowBump, masterCompressor);\n\t */\n\tchain(...args: Array<AudioNode | ToneAudioNode>): this {\n\t\tthis.input.disconnect();\n\t\targs.unshift(this.input);\n\t\targs.push(this.output);\n\t\tconnectSeries(...args);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.volume.dispose();\n\t\treturn this;\n\t}\n}\n\n///////////////////////////////////////////////////////////////////////////\n// \tINITIALIZATION\n///////////////////////////////////////////////////////////////////////////\n\nonContextInit(context => {\n\tcontext.destination = new Destination({ context });\n});\n\nonContextClose(context => {\n\tcontext.destination.dispose();\n});\n","import { Seconds, Ticks } from \"../type/Units\";\nimport { noOp } from \"../util/Interface\";\n\ntype Transport = import(\"../clock/Transport\").Transport;\n\nexport interface TransportEventOptions {\n\tcallback: (time: number) => void;\n\tonce: boolean;\n\ttime: Ticks;\n}\n\n/**\n * TransportEvent is an internal class used by (Tone.Transport)[Transport]\n * to schedule events. Do no invoke this class directly, it is\n * handled from within Tone.Transport.\n * @param Transport The transport object which the event belongs to\n */\nexport class TransportEvent {\n\n\t/**\n\t * Reference to the Transport that created it\n\t */\n\tprotected transport: Transport;\n\n\t/**\n\t * The unique id of the event\n\t */\n\tid: number = TransportEvent._eventId++;\n\n\t/**\n\t * The time the event starts\n\t */\n\ttime: Ticks;\n\n\t/**\n\t * The callback to invoke\n\t */\n\tprivate callback?: (time: Seconds) => void;\n\n\t/**\n\t * If the event should be removed after being invoked.\n\t */\n\tprivate _once: boolean;\n\n\tconstructor(transport: Transport, opts: Partial<TransportEventOptions>) {\n\n\t\tconst options: TransportEventOptions = Object.assign(TransportEvent.getDefaults(), opts);\n\n\t\tthis.transport = transport;\n\t\tthis.callback = options.callback;\n\t\tthis._once = options.once;\n\t\tthis.time = options.time;\n\t}\n\n\tstatic getDefaults(): TransportEventOptions {\n\t\treturn {\n\t\t\tcallback: noOp,\n\t\t\tonce: false,\n\t\t\ttime: 0,\n\t\t};\n\t}\n\n\t/**\n\t * Current ID counter\n\t */\n\tprivate static _eventId: number = 0;\n\n\t/**\n\t * Invoke the event callback.\n\t * @param  time  The AudioContext time in seconds of the event\n\t */\n\tinvoke(time: Seconds): void {\n\t\tif (this.callback) {\n\t\t\tthis.callback(time);\n\t\t\tif (this._once) {\n\t\t\t\tthis.transport.clear(this.id);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tthis.callback = undefined;\n\t\treturn this;\n\t}\n}\n","import { Context } from \"../context/Context\";\nimport { TicksClass } from \"../type/Ticks\";\nimport { Seconds, Ticks, Time } from \"../type/Units\";\nimport { TransportEvent, TransportEventOptions } from \"./TransportEvent\";\n\ntype Transport = import(\"../clock/Transport\").Transport;\n\ninterface TransportRepeatEventOptions extends TransportEventOptions {\n\tinterval: Ticks;\n\tduration: Ticks;\n}\n\n/**\n * TransportRepeatEvent is an internal class used by Tone.Transport\n * to schedule repeat events. This class should not be instantiated directly.\n */\nexport class TransportRepeatEvent extends TransportEvent {\n\n\t/**\n\t * When the event should stop repeating\n\t */\n\tprivate duration: Ticks;\n\n\t/**\n\t * The interval of the repeated event\n\t */\n\tprivate _interval: Ticks;\n\n\t/**\n\t * The ID of the current timeline event\n\t */\n\tprivate _currentId: number = -1;\n\n\t/**\n\t * The ID of the next timeline event\n\t */\n\tprivate _nextId: number = -1;\n\n\t/**\n\t * The time of the next event\n\t */\n\tprivate _nextTick = this.time;\n\n\t/**\n\t * a reference to the bound start method\n\t */\n\tprivate _boundRestart = this._restart.bind(this);\n\n\t/**\n\t * The audio context belonging to this event\n\t */\n\tprotected context: Context;\n\n\tconstructor(transport: Transport, opts: Partial<TransportRepeatEventOptions>) {\n\n\t\tsuper(transport, opts);\n\n\t\tconst options = Object.assign(TransportRepeatEvent.getDefaults(), opts);\n\n\t\tthis.duration =  new TicksClass(transport.context, options.duration).valueOf();\n\t\tthis._interval = new  TicksClass(transport.context, options.interval).valueOf();\n\t\tthis._nextTick = options.time;\n\t\tthis.transport.on(\"start\", this._boundRestart);\n\t\tthis.transport.on(\"loopStart\", this._boundRestart);\n\t\tthis.context = this.transport.context;\n\t\tthis._restart();\n\t}\n\n\tstatic getDefaults(): TransportRepeatEventOptions {\n\t\treturn Object.assign({}, TransportEvent.getDefaults(), {\n\t\t\tduration: Infinity,\n\t\t\tinterval: 1,\n\t\t\tonce: false,\n\t\t});\n\t}\n\n\t/**\n\t * Invoke the callback. Returns the tick time which\n\t * the next event should be scheduled at.\n\t * @param  time  The AudioContext time in seconds of the event\n\t */\n\tinvoke(time: Seconds): void {\n\t\t// create more events if necessary\n\t\tthis._createEvents(time);\n\t\t// call the super class\n\t\tsuper.invoke(time);\n\t}\n\n\t/**\n\t * Push more events onto the timeline to keep up with the position of the timeline\n\t */\n\tprivate _createEvents(time: Seconds): void {\n\t\t// schedule the next event\n\t\tconst ticks = this.transport.getTicksAtTime(time);\n\t\tif (ticks >= this.time && ticks >= this._nextTick && this._nextTick + this._interval < this.time + this.duration) {\n\t\t\tthis._nextTick += this._interval;\n\t\t\tthis._currentId = this._nextId;\n\t\t\tthis._nextId = this.transport.scheduleOnce(this.invoke.bind(this),\n\t\t\t\tnew TicksClass(this.context, this._nextTick).toSeconds());\n\t\t}\n\t}\n\n\t/**\n\t * Push more events onto the timeline to keep up with the position of the timeline\n\t */\n\tprivate _restart(time?: Time): void {\n\t\tthis.transport.clear(this._currentId);\n\t\tthis.transport.clear(this._nextId);\n\t\tthis._nextTick = this.time;\n\t\tconst ticks = this.transport.getTicksAtTime(time);\n\t\tif (ticks > this.time) {\n\t\t\tthis._nextTick = this.time + Math.ceil((ticks - this.time) / this._interval) * this._interval;\n\t\t}\n\t\tthis._currentId = this.transport.scheduleOnce(this.invoke.bind(this),\n\t\t\tnew TicksClass(this.context, this._nextTick).toSeconds());\n\t\tthis._nextTick += this._interval;\n\t\tthis._nextId = this.transport.scheduleOnce(this.invoke.bind(this),\n\t\t\tnew TicksClass(this.context, this._nextTick).toSeconds());\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.transport.clear(this._currentId);\n\t\tthis.transport.clear(this._nextId);\n\t\tthis.transport.off(\"start\", this._boundRestart);\n\t\tthis.transport.off(\"loopStart\", this._boundRestart);\n\t\treturn this;\n\t}\n}\n","import { TimeClass } from \"../../core/type/Time\";\nimport { PlaybackState } from \"../../core/util/StateTimeline\";\nimport { Signal } from \"../../signal/Signal\";\nimport { onContextClose, onContextInit } from \"../context/ContextInitialization\";\nimport { Gain } from \"../context/Gain\";\nimport { Param } from \"../context/Param\";\nimport { ToneWithContext, ToneWithContextOptions } from \"../context/ToneWithContext\";\nimport { TicksClass } from \"../type/Ticks\";\nimport { TransportTimeClass } from \"../type/TransportTime\";\nimport { BarsBeatsSixteenths, BPM, NormalRange, Seconds,\n\tSubdivision, Ticks, Time, TimeSignature, TransportTime } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Emitter } from \"../util/Emitter\";\nimport { readOnly, writable } from \"../util/Interface\";\nimport { IntervalTimeline } from \"../util/IntervalTimeline\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isArray, isDefined } from \"../util/TypeCheck\";\nimport { Clock } from \"./Clock\";\nimport { TransportEvent } from \"./TransportEvent\";\nimport { TransportRepeatEvent } from \"./TransportRepeatEvent\";\n\ninterface TransportOptions extends ToneWithContextOptions {\n\tbpm: BPM;\n\tswing: NormalRange;\n\tswingSubdivision: Subdivision;\n\ttimeSignature: number;\n\tloopStart: Time;\n\tloopEnd: Time;\n\tppq: number;\n}\n\ntype TransportEventNames = \"start\" | \"stop\" | \"pause\" | \"loop\" | \"loopEnd\" | \"loopStart\";\n\ninterface SyncedSignalEvent {\n\tsignal: Signal;\n\tinitial: number;\n\tratio: Gain;\n}\n\ntype TransportCallback = (time: Seconds) => void;\n\n/**\n * Transport for timing musical events.\n * Supports tempo curves and time changes. Unlike browser-based timing (setInterval, requestAnimationFrame)\n * Transport timing events pass in the exact time of the scheduled event\n * in the argument of the callback function. Pass that time value to the object\n * you're scheduling. <br><br>\n * A single transport is created for you when the library is initialized.\n * <br><br>\n * The transport emits the events: \"start\", \"stop\", \"pause\", and \"loop\" which are\n * called with the time of that event as the argument.\n *\n * @example\n * //repeated event every 8th note\n * Transport.scheduleRepeat(function(time){\n * \t//do something with the time\n * }, \"8n\");\n * @example\n * //schedule an event on the 16th measure\n * Transport.schedule(function(time){\n * \t//do something with the time\n * }, \"16:0:0\");\n */\nexport class Transport extends ToneWithContext<TransportOptions> implements Emitter<TransportEventNames> {\n\n\tname = \"Transport\";\n\n\t///////////////////////////////////////////////////////////////////////\n\t// \tLOOPING\n\t//////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * \tIf the transport loops or not.\n\t */\n\tloop: boolean = false;\n\n\t/**\n\t * \tThe loop start position in ticks\n\t */\n\tprivate _loopStart: Ticks = 0;\n\n\t/**\n\t * \tThe loop end position in ticks\n\t */\n\tprivate _loopEnd: Ticks = 0;\n\n\t///////////////////////////////////////////////////////////////////////\n\t// \tCLOCK/TEMPO\n\t//////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Pulses per quarter is the number of ticks per quarter note.\n\t */\n\tprivate _ppq: number;\n\n\t/**\n\t *  watches the main oscillator for timing ticks\n\t *  initially starts at 120bpm\n\t */\n\tprivate _clock: Clock<BPM>;\n\n\t/**\n\t * The Beats Per Minute of the Transport.\n\t * @example\n\t * Transport.bpm.value = 80;\n\t * //ramp the bpm to 120 over 10 seconds\n\t * Transport.bpm.rampTo(120, 10);\n\t */\n\tbpm: Param<BPM>;\n\n\t/**\n\t *  The time signature, or more accurately the numerator\n\t *  of the time signature over a denominator of 4.\n\t */\n\tprivate _timeSignature: number;\n\n\t///////////////////////////////////////////////////////////////////////\n\t// \tTIMELINE EVENTS\n\t//////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  All the events in an object to keep track by ID\n\t */\n\tprivate _scheduledEvents = {};\n\n\t/**\n\t * \tThe scheduled events.\n\t */\n\tprivate _timeline: Timeline<TransportEvent> = new Timeline();\n\n\t/**\n\t *  Repeated events\n\t */\n\tprivate _repeatedEvents: IntervalTimeline = new IntervalTimeline();\n\n\t/**\n\t *  All of the synced Signals\n\t */\n\tprivate _syncedSignals: SyncedSignalEvent[] = [];\n\n\t///////////////////////////////////////////////////////////////////////\n\t// \tSWING\n\t//////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  The subdivision of the swing\n\t */\n\tprivate _swingTicks: Ticks;\n\n\t/**\n\t *  The swing amount\n\t */\n\tprivate _swingAmount: NormalRange = 0;\n\n\tconstructor(options?: Partial<TransportOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Transport.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Transport.getDefaults(), arguments);\n\n\t\t// CLOCK/TEMPO\n\t\tthis._ppq = options.ppq;\n\t\tthis._clock = new Clock({\n\t\t\tcallback : this._processTick.bind(this),\n\t\t\tcontext: this.context,\n\t\t\tfrequency : 0,\n\t\t\tunits: \"bpm\",\n\t\t});\n\t\tthis._bindClockEvents();\n\t\tthis.bpm = this._clock.frequency;\n\t\tthis._clock.frequency.multiplier = options.ppq;\n\t\tthis.bpm.value = options.bpm;\n\t\treadOnly(this, \"bpm\");\n\t\tthis._timeSignature = options.timeSignature;\n\n\t\t// SWING\n\t\tthis._swingTicks = options.ppq / 2; // 8n\n\t}\n\n\tstatic getDefaults(): TransportOptions {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tbpm: 120,\n\t\t\tloopEnd: \"4m\" as Subdivision,\n\t\t\tloopStart: 0,\n\t\t\tppq: 192,\n\t\t\tswing: 0,\n\t\t\tswingSubdivision: \"8n\" as Subdivision,\n\t\t\ttimeSignature: 4,\n\t\t});\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////////\n\t// \tTICKS\n\t///////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  called on every tick\n\t *  @param  tickTime clock relative tick time\n\t *  @private\n\t */\n\tprivate _processTick(tickTime: Seconds, ticks: Ticks): void {\n\t\t// handle swing\n\t\tif (this._swingAmount > 0 &&\n\t\t\tticks % this._ppq !== 0 && // not on a downbeat\n\t\t\tticks % (this._swingTicks * 2) !== 0) {\n\t\t\t// add some swing\n\t\t\tconst progress = (ticks % (this._swingTicks * 2)) / (this._swingTicks * 2);\n\t\t\tconst amount = Math.sin((progress) * Math.PI) * this._swingAmount;\n\t\t\ttickTime += new TicksClass(this.context, this._swingTicks * 2 / 3).toSeconds() * amount;\n\t\t}\n\t\t// do the loop test\n\t\tif (this.loop) {\n\t\t\tif (ticks >= this._loopEnd) {\n\t\t\t\tthis.emit(\"loopEnd\", tickTime);\n\t\t\t\tthis._clock.setTicksAtTime(this._loopStart, tickTime);\n\t\t\t\tticks = this._loopStart;\n\t\t\t\tthis.emit(\"loopStart\", tickTime, this._clock.getSecondsAtTime(tickTime));\n\t\t\t\tthis.emit(\"loop\", tickTime);\n\t\t\t}\n\t\t}\n\t\t// invoke the timeline events scheduled on this tick\n\t\tthis._timeline.forEachAtTime(ticks, event => event.invoke(tickTime));\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////////\n\t// \tSCHEDULABLE EVENTS\n\t///////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Schedule an event along the timeline.\n\t * @param callback The callback to be invoked at the time.\n\t * @param time The time to invoke the callback at.\n\t * @return The id of the event which can be used for canceling the event.\n\t * @example\n\t * //trigger the callback when the Transport reaches the desired time\n\t * Transport.schedule(function(time){\n\t * \tenvelope.triggerAttack(time);\n\t * }, \"128i\");\n\t */\n\tschedule(callback: TransportCallback, time: TransportTime | TransportTimeClass): number {\n\t\tconst event = new TransportEvent(this, {\n\t\t\tcallback,\n\t\t\ttime : new TransportTimeClass(this.context, time).toTicks(),\n\t\t});\n\t\treturn this._addEvent(event, this._timeline);\n\t}\n\n\t/**\n\t * Schedule a repeated event along the timeline. The event will fire\n\t * at the `interval` starting at the `startTime` and for the specified\n\t * `duration`.\n\t * @param  callback   The callback to invoke.\n\t * @param  interval   The duration between successive callbacks. Must be a positive number.\n\t * @param  startTime  When along the timeline the events should start being invoked.\n\t * @param  duration How long the event should repeat.\n\t * @return  The ID of the scheduled event. Use this to cancel the event.\n\t * @example\n\t * //a callback invoked every eighth note after the first measure\n\t * Transport.scheduleRepeat(callback, \"8n\", \"1m\");\n\t */\n\tscheduleRepeat(\n\t\tcallback: TransportCallback,\n\t\tinterval: Time | TimeClass,\n\t\tstartTime?: TransportTime | TransportTimeClass,\n\t\tduration: Time = Infinity,\n\t): number {\n\t\tconst event = new TransportRepeatEvent(this, {\n\t\t\tcallback,\n\t\t\tduration : new TimeClass(this.context, duration).toTicks(),\n\t\t\tinterval: new TimeClass(this.context, interval).toTicks(),\n\t\t\ttime : new TransportTimeClass(this.context, startTime).toTicks(),\n\t\t});\n\t\t// kick it off if the Transport is started\n\t\t// @ts-ignore\n\t\treturn this._addEvent(event, this._repeatedEvents);\n\t}\n\n\t/**\n\t *  Schedule an event that will be removed after it is invoked.\n\t *  @param callback The callback to invoke once.\n\t *  @param time The time the callback should be invoked.\n\t *  @returns The ID of the scheduled event.\n\t */\n\tscheduleOnce(callback: TransportCallback, time: TransportTime | TransportTimeClass): number {\n\t\tconst event = new TransportEvent(this, {\n\t\t\tcallback,\n\t\t\tonce : true,\n\t\t\ttime : new TransportTimeClass(this.context, time).toTicks(),\n\t\t});\n\t\treturn this._addEvent(event, this._timeline);\n\t}\n\n\t/**\n\t * Clear the passed in event id from the timeline\n\t * @param eventId The id of the event.\n\t */\n\tclear(eventId: number): this {\n\t\tif (this._scheduledEvents.hasOwnProperty(eventId)) {\n\t\t\tconst item = this._scheduledEvents[eventId.toString()];\n\t\t\titem.timeline.remove(item.event);\n\t\t\titem.event.dispose();\n\t\t\tdelete this._scheduledEvents[eventId.toString()];\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add an event to the correct timeline. Keep track of the\n\t * timeline it was added to.\n\t * @returns the event id which was just added\n\t */\n\tprivate _addEvent(event: TransportEvent, timeline: Timeline<TransportEvent>): number {\n\t\tthis._scheduledEvents[event.id.toString()] = {\n\t\t\tevent,\n\t\t\ttimeline,\n\t\t};\n\t\ttimeline.add(event);\n\t\treturn event.id;\n\t}\n\n\t/**\n\t * Remove scheduled events from the timeline after\n\t * the given time. Repeated events will be removed\n\t * if their startTime is after the given time\n\t * @param after Clear all events after this time.\n\t */\n\tcancel(after: TransportTime = 0): this {\n\t\tconst computedAfter = this.toTicks(after);\n\t\tthis._timeline.forEachFrom(computedAfter, event => this.clear(event.id));\n\t\tthis._repeatedEvents.forEachFrom(computedAfter, event => this.clear(event.id));\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////////\n\t// \tSTART/STOP/PAUSE\n\t///////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Bind start/stop/pause events from the clock and emit them.\n\t */\n\tprivate _bindClockEvents(): void {\n\t\tthis._clock.on(\"start\", (time, offset) => {\n\t\t\toffset = new TicksClass(this.context, offset).toSeconds();\n\t\t\tthis.emit(\"start\", time, offset);\n\t\t});\n\n\t\tthis._clock.on(\"stop\", (time) => {\n\t\t\tthis.emit(\"stop\", time);\n\t\t});\n\n\t\tthis._clock.on(\"pause\", (time) => {\n\t\t\tthis.emit(\"pause\", time);\n\t\t});\n\t}\n\n\t/**\n\t *  Returns the playback state of the source, either \"started\", \"stopped\", or \"paused\"\n\t */\n\tget state(): PlaybackState {\n\t\treturn this._clock.getStateAtTime(this.now());\n\t}\n\n\t/**\n\t * Start the transport and all sources synced to the transport.\n\t * @param  time The time when the transport should start.\n\t * @param  offset The timeline offset to start the transport.\n\t * @example\n\t * //start the transport in one second starting at beginning of the 5th measure.\n\t * Transport.start(\"+1\", \"4:0:0\");\n\t */\n\tstart(time?: Time, offset?: TransportTime): this {\n\t\tlet offsetTicks;\n\t\tif (isDefined(offset)) {\n\t\t\toffsetTicks = this.toTicks(offset);\n\t\t}\n\t\t// start the clock\n\t\tthis._clock.start(time, offsetTicks);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the transport and all sources synced to the transport.\n\t * @param time The time when the transport should stop.\n\t * @example\n\t * Transport.stop();\n\t */\n\tstop(time?: Time): this {\n\t\tthis._clock.stop(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Pause the transport and all sources synced to the transport.\n\t */\n\tpause(time?: Time): this {\n\t\tthis._clock.pause(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Toggle the current state of the transport. If it is\n\t * started, it will stop it, otherwise it will start the Transport.\n\t * @param  time The time of the event\n\t */\n\ttoggle(time?: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tif (this._clock.getStateAtTime(time) !== \"started\") {\n\t\t\tthis.start(time);\n\t\t} else {\n\t\t\tthis.stop(time);\n\t\t}\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////////\n\t// \tSETTERS/GETTERS\n\t///////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * The time signature as just the numerator over 4.\n\t * For example 4/4 would be just 4 and 6/8 would be 3.\n\t * @example\n\t * //common time\n\t * Transport.timeSignature = 4;\n\t * // 7/8\n\t * Transport.timeSignature = [7, 8];\n\t * //this will be reduced to a single number\n\t * Transport.timeSignature; //returns 3.5\n\t */\n\tget timeSignature(): TimeSignature {\n\t\treturn this._timeSignature;\n\t}\n\tset timeSignature(timeSig: TimeSignature) {\n\t\tif (isArray(timeSig)) {\n\t\t\ttimeSig = (timeSig[0] / timeSig[1]) * 4;\n\t\t}\n\t\tthis._timeSignature = timeSig;\n\t}\n\n\t/**\n\t * When the Transport.loop = true, this is the starting position of the loop.\n\t */\n\tget loopStart(): Time {\n\t\treturn new TimeClass(this.context, this._loopStart, \"i\").toSeconds();\n\t}\n\tset loopStart(startPosition: Time) {\n\t\tthis._loopStart = this.toTicks(startPosition);\n\t}\n\n\t/**\n\t * When the Transport.loop = true, this is the ending position of the loop.\n\t */\n\tget loopEnd(): Time {\n\t\treturn new TimeClass(this.context, this._loopEnd, \"i\").toSeconds();\n\t}\n\tset loopEnd(endPosition: Time) {\n\t\tthis._loopEnd = this.toTicks(endPosition);\n\t}\n\n\t/**\n\t * Set the loop start and stop at the same time.\n\t * @example\n\t * //loop over the first measure\n\t * Transport.setLoopPoints(0, \"1m\");\n\t * Transport.loop = true;\n\t */\n\tsetLoopPoints(startPosition: TransportTime, endPosition: TransportTime): this {\n\t\tthis.loopStart = startPosition;\n\t\tthis.loopEnd = endPosition;\n\t\treturn this;\n\t}\n\n\t/**\n\t * The swing value. Between 0-1 where 1 equal to the note + half the subdivision.\n\t */\n\tget swing(): NormalRange {\n\t\treturn this._swingAmount;\n\t}\n\tset swing(amount: NormalRange) {\n\t\t// scale the values to a normal range\n\t\tthis._swingAmount = amount;\n\t}\n\n\t/**\n\t * Set the subdivision which the swing will be applied to.\n\t * The default value is an 8th note. Value must be less\n\t * than a quarter note.\n\t */\n\tget swingSubdivision(): Subdivision {\n\t\treturn new TicksClass(this.context, this._swingTicks).toNotation();\n\t}\n\tset swingSubdivision(subdivision: Subdivision) {\n\t\tthis._swingTicks = this.toTicks(subdivision);\n\t}\n\n\t/**\n\t *  The Transport's position in Bars:Beats:Sixteenths.\n\t *  Setting the value will jump to that position right away.\n\t */\n\tget position(): BarsBeatsSixteenths | Time {\n\t\tconst now = this.now();\n\t\tconst ticks = this._clock.getTicksAtTime(now);\n\t\treturn new TicksClass(this.context, ticks).toBarsBeatsSixteenths();\n\t}\n\tset position(progress: Time) {\n\t\tconst ticks = this.toTicks(progress);\n\t\tthis.ticks = ticks;\n\t}\n\n\t/**\n\t *  The Transport's position in seconds\n\t *  Setting the value will jump to that position right away.\n\t */\n\tget seconds(): Seconds {\n\t\treturn this._clock.seconds;\n\t}\n\n\tset seconds(s: Seconds) {\n\t\tconst now = this.now();\n\t\tconst ticks = this._clock.frequency.timeToTicks(s, now);\n\t\tthis.ticks = ticks;\n\t}\n\n\t/**\n\t *  The Transport's loop position as a normalized value. Always\n\t *  returns 0 if the transport if loop is not true.\n\t */\n\tget progress(): NormalRange {\n\t\tif (this.loop) {\n\t\t\tconst now = this.now();\n\t\t\tconst ticks = this._clock.getTicksAtTime(now);\n\t\t\treturn (ticks - this._loopStart) / (this._loopEnd - this._loopStart);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t *  The transports current tick position.\n\t */\n\tget ticks(): Ticks {\n\t\treturn this._clock.ticks;\n\t}\n\tset ticks(t: Ticks) {\n\t\tif (this._clock.ticks !== t) {\n\t\t\tconst now = this.now();\n\t\t\t// stop everything synced to the transport\n\t\t\tif (this.state === \"started\") {\n\t\t\t\tthis.emit(\"stop\", now);\n\t\t\t\tthis._clock.setTicksAtTime(t, now);\n\t\t\t\t// restart it with the new time\n\t\t\t\tthis.emit(\"start\", now, this.seconds);\n\t\t\t} else {\n\t\t\t\tthis._clock.setTicksAtTime(t, now);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Get the clock's ticks at the given time.\n\t * @param  time  When to get the tick value\n\t * @return The tick value at the given time.\n\t */\n\tgetTicksAtTime(time?: Time): Ticks {\n\t\treturn Math.round(this._clock.getTicksAtTime(time));\n\t}\n\n\t/**\n\t *  Return the elapsed seconds at the given time.\n\t *  @param  time  When to get the elapsed seconds\n\t *  @return  The number of elapsed seconds\n\t */\n\tgetSecondsAtTime(time: Time): Seconds {\n\t\treturn this._clock.getSecondsAtTime(time);\n\t}\n\n\t/**\n\t *  Pulses Per Quarter note. This is the smallest resolution\n\t *  the Transport timing supports. This should be set once\n\t *  on initialization and not set again. Changing this value\n\t *  after other objects have been created can cause problems.\n\t */\n\tget PPQ(): number {\n\t\treturn this._clock.frequency.multiplier;\n\t}\n\tset PPQ(ppq: number) {\n\t\tthis._clock.frequency.multiplier = ppq;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////////\n\t// \tSYNCING\n\t///////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Returns the time aligned to the next subdivision\n\t * of the Transport. If the Transport is not started,\n\t * it will return 0.\n\t * Note: this will not work precisely during tempo ramps.\n\t * @param  subdivision  The subdivision to quantize to\n\t * @return  The context time of the next subdivision.\n\t * @example\n\t * Transport.start(); //the transport must be started\n\t * Transport.nextSubdivision(\"4n\");\n\t */\n\tnextSubdivision(subdivision?: Time): Seconds {\n\t\tsubdivision = this.toTicks(subdivision);\n\t\tif (this.state !== \"started\") {\n\t\t\t// if the transport's not started, return 0\n\t\t\treturn 0;\n\t\t} else {\n\t\t\tconst now = this.now();\n\t\t\t// the remainder of the current ticks and the subdivision\n\t\t\tconst transportPos = this.getTicksAtTime(now);\n\t\t\tconst remainingTicks = subdivision - transportPos % subdivision;\n\t\t\treturn this._clock.nextTickTime(remainingTicks, now);\n\t\t}\n\t}\n\n\t/**\n\t *  Attaches the signal to the tempo control signal so that\n\t *  any changes in the tempo will change the signal in the same\n\t *  ratio.\n\t *\n\t *  @param signal\n\t *  @param ratio Optionally pass in the ratio between the two signals.\n\t * \t\t\t\tOtherwise it will be computed based on their current values.\n\t */\n\tsyncSignal(signal: Signal<any>, ratio?: number): this {\n\t\tif (!ratio) {\n\t\t\t// get the sync ratio\n\t\t\tconst now = this.now();\n\t\t\tif (signal.getValueAtTime(now) !== 0) {\n\t\t\t\tconst bpm = this.bpm.getValueAtTime(now);\n\t\t\t\tconst computedFreq = 1 / (60 / bpm / this.PPQ);\n\t\t\t\tratio = signal.getValueAtTime(now) / computedFreq;\n\t\t\t} else {\n\t\t\t\tratio = 0;\n\t\t\t}\n\t\t}\n\t\tconst ratioSignal = new Gain(ratio);\n\t\t// @ts-ignore\n\t\tthis.bpm.connect(ratioSignal);\n\t\t// @ts-ignore\n\t\tratioSignal.connect(signal._param);\n\t\tthis._syncedSignals.push({\n\t\t\tinitial : signal.value,\n\t\t\tratio : ratioSignal,\n\t\t\tsignal,\n\t\t});\n\t\tsignal.value = 0;\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Unsyncs a previously synced signal from the transport's control.\n\t *  See Transport.syncSignal.\n\t */\n\tunsyncSignal(signal: Signal<any>): this {\n\t\tfor (let i = this._syncedSignals.length - 1; i >= 0; i--) {\n\t\t\tconst syncedSignal = this._syncedSignals[i];\n\t\t\tif (syncedSignal.signal === signal) {\n\t\t\t\tsyncedSignal.ratio.dispose();\n\t\t\t\tsyncedSignal.signal.value = syncedSignal.initial;\n\t\t\t\tthis._syncedSignals.splice(i, 1);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._clock.dispose();\n\t\twritable(this, \"bpm\");\n\t\tthis._timeline.dispose();\n\t\tthis._repeatedEvents.dispose();\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////\n\t// EMITTER MIXIN TO SATISFY COMPILER\n\t///////////////////////////////////////////////////////////////////////\n\n\ton!: (event: TransportEventNames, callback: (...args: any[]) => void) => this;\n\tonce!: (event: TransportEventNames, callback: (...args: any[]) => void) => this;\n\toff!: (event: TransportEventNames, callback?: ((...args: any[]) => void) | undefined) => this;\n\temit!: (event: any, ...args: any[]) => this;\n}\n\nEmitter.mixin(Transport);\n\n///////////////////////////////////////////////////////////////////////////////\n// \tINITIALIZATION\n///////////////////////////////////////////////////////////////////////////////\n\nonContextInit(context => {\n\tcontext.transport = new Transport({ context });\n});\n\nonContextClose(context => {\n\tcontext.transport.dispose();\n});\n","import { Volume } from \"../component/channel/Volume\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { Decibels, Seconds, Time } from \"../core/type/Units\";\nimport { defaultArg, optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp, readOnly } from \"../core/util/Interface\";\nimport { BasicPlaybackState, StateTimeline } from \"../core/util/StateTimeline\";\nimport { isUndef } from \"../core/util/TypeCheck\";\n\nexport interface SourceOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n\tmute: boolean;\n}\n\n/**\n *  @class  Base class for sources. Sources have start/stop methods\n *          and the ability to be synced to the\n *          start/stop of this.context.transport.\n *\n *  @constructor\n *  @extends {Tone.AudioNode}\n *  @example\n * //Multiple state change events can be chained together,\n * //but must be set in the correct order and with ascending times\n *\n * // OK\n * state.start().stop(\"+0.2\");\n * // AND\n * state.start().stop(\"+0.2\").start(\"+0.4\").stop(\"+0.7\")\n *\n * // BAD\n * state.stop(\"+0.2\").start();\n * // OR\n * state.start(\"+0.3\").stop(\"+0.2\");\n *\n */\nexport abstract class Source<Options extends SourceOptions> extends ToneAudioNode<Options> {\n\n\t/**\n\t *  The output volume node\n\t */\n\tprivate _volume: Volume = new Volume({\n\t\tcontext: this.context,\n\t});\n\n\t/**\n\t * The output note\n\t */\n\toutput = this._volume;\n\n\t/**\n\t * There is no input\n\t */\n\tinput = undefined;\n\n\t/**\n\t * The volume of the output in decibels.\n\t * @example\n\t * source.volume.value = -6;\n\t */\n\tvolume = this._volume.volume;\n\n\t/**\n\t * \tKeep track of the scheduled state.\n\t */\n\tprotected _state: StateTimeline<{\n\t\tduration?: Seconds;\n\t\toffset?: Seconds;\n\t\t/**\n\t\t * Either the buffer is explicitly scheduled to end using the stop method,\n\t\t * or it's implicitly ended when the buffer is over.\n\t\t */\n\t\timplicitEnd?: boolean;\n\t}> = new StateTimeline(\"stopped\");\n\n\t/**\n\t *  The synced `start` callback function from the transport\n\t *  @type {Function}\n\t *  @private\n\t */\n\tprotected _synced = false;\n\n\t/**\n\t *  Keep track of all of the scheduled event ids\n\t */\n\tprivate _scheduled: number[] = [];\n\n\t/**\n\t * Placeholder functions for syncing/unsyncing to transport\n\t */\n\tprivate _syncedStart: (time: Seconds, offset: Seconds) => void = noOp;\n\tprivate _syncedStop: (time: Seconds) => void = noOp;\n\n\tconstructor(options: SourceOptions) {\n\t\tsuper(options);\n\t\treadOnly(this, \"volume\");\n\t\tthis._state.memory = 100;\n\t\tthis.volume.setValueAtTime(options.volume, 0);\n\t\t// set mute initially\n\t\tthis.mute = options.mute;\n\n\t}\n\n\tstatic getDefaults(): SourceOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmute: false,\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t *  Returns the playback state of the source, either \"started\" or \"stopped\".\n\t */\n\tget state(): BasicPlaybackState {\n\t\tif (this._synced) {\n\t\t\tif (this.context.transport.state === \"started\") {\n\t\t\t\treturn this._state.getValueAtTime(this.context.transport.seconds) as BasicPlaybackState;\n\t\t\t} else {\n\t\t\t\treturn \"stopped\";\n\t\t\t}\n\t\t} else {\n\t\t\treturn this._state.getValueAtTime(this.now()) as BasicPlaybackState;\n\t\t}\n\t}\n\n\t/**\n\t * Mute the output.\n\t * @example\n\t * //mute the output\n\t * source.mute = true;\n\t */\n\tget mute(): boolean {\n\t\treturn this._volume.mute;\n\t}\n\tset mute(mute: boolean) {\n\t\tthis._volume.mute = mute;\n\t}\n\n\t// overwrite these functions\n\tprotected abstract _start(time: Time, offset?: Time, duration?: Time): void;\n\tprotected abstract _stop(time: Time): void;\n\tabstract restart(time: Time, offset?: Time, duration?: Time): this;\n\n\t/**\n\t *  Start the source at the specified time. If no time is given,\n\t *  start the source now.\n\t *  @param  time When the source should be started.\n\t *  @example\n\t * source.start(\"+0.5\"); //starts the source 0.5 seconds from now\n\t */\n\tstart(time?: Time, offset?: Time, duration?: Time): this {\n\t\tconst computedTime = isUndef(time) && this._synced ? this.context.transport.seconds : this.toSeconds(time);\n\t\t// if it's started, stop it and restart it\n\t\tif (this._state.getValueAtTime(computedTime) === \"started\") {\n\t\t\tthis._state.cancel(computedTime);\n\t\t\tthis._state.setStateAtTime(\"started\", computedTime);\n\t\t\tthis.restart(computedTime, offset, duration);\n\t\t} else {\n\t\t\tthis._state.setStateAtTime(\"started\", computedTime);\n\t\t\tif (this._synced) {\n\t\t\t\t// add the offset time to the event\n\t\t\t\tconst event = this._state.get(computedTime);\n\t\t\t\tif (event) {\n\t\t\t\t\tevent.offset = this.toSeconds(defaultArg(offset, 0));\n\t\t\t\t\tevent.duration = duration ? this.toSeconds(duration) : undefined;\n\t\t\t\t}\n\t\t\t\tconst sched = this.context.transport.schedule(t => {\n\t\t\t\t\tthis._start(t, offset, duration);\n\t\t\t\t}, computedTime);\n\t\t\t\tthis._scheduled.push(sched);\n\n\t\t\t\t// if it's already started\n\t\t\t\tif (this.context.transport.state === \"started\") {\n\t\t\t\t\tthis._syncedStart(this.now(), this.context.transport.seconds);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._start.apply(this, arguments);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Stop the source at the specified time. If no time is given,\n\t *  stop the source now.\n\t *  @param  time When the source should be stopped.\n\t *  @example\n\t * source.stop(); // stops the source immediately\n\t */\n\tstop(time?: Time): this {\n\t\tconst computedTime = isUndef(time) && this._synced ? this.context.transport.seconds : this.toSeconds(time);\n\t\tif (!this._synced) {\n\t\t\tthis._stop.apply(this, arguments);\n\t\t} else {\n\t\t\tconst sched = this.context.transport.schedule(this._stop.bind(this), computedTime);\n\t\t\tthis._scheduled.push(sched);\n\t\t}\n\t\tthis._state.cancel(computedTime);\n\t\tthis._state.setStateAtTime(\"stopped\", computedTime);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Sync the source to the Transport so that all subsequent\n\t *  calls to `start` and `stop` are synced to the TransportTime\n\t *  instead of the AudioContext time.\n\t *\n\t * @example\n\t * //sync the source so that it plays between 0 and 0.3 on the Transport's timeline\n\t * source.sync().start(0).stop(0.3);\n\t * //start the transport.\n\t * this.context.transport.start();\n\t *\n\t * @example\n\t * //start the transport with an offset and the sync'ed sources\n\t * //will start in the correct position\n\t * source.sync().start(0.1);\n\t * //the source will be invoked with an offset of 0.4 = (0.5 - 0.1)\n\t * this.context.transport.start(\"+0.5\", 0.5);\n\t */\n\tsync(): this {\n\t\tif (!this._synced) {\n\t\t\tthis._synced = true;\n\t\t\tthis._syncedStart = (time, offset) => {\n\t\t\t\tif (offset > 0) {\n\t\t\t\t\t// get the playback state at that time\n\t\t\t\t\tconst stateEvent = this._state.get(offset);\n\t\t\t\t\t// listen for start events which may occur in the middle of the sync'ed time\n\t\t\t\t\tif (stateEvent && stateEvent.state === \"started\" && stateEvent.time !== offset) {\n\t\t\t\t\t\t// get the offset\n\t\t\t\t\t\tconst startOffset = offset - this.toSeconds(stateEvent.time);\n\t\t\t\t\t\tlet duration;\n\t\t\t\t\t\tif (stateEvent.duration) {\n\t\t\t\t\t\t\tduration = this.toSeconds(stateEvent.duration) - startOffset;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._start(time, this.toSeconds(stateEvent.offset) + startOffset, duration);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis._syncedStop = time => {\n\t\t\t\tconst seconds = this.context.transport.getSecondsAtTime(Math.max(time - this.sampleTime, 0));\n\t\t\t\tif (this._state.getValueAtTime(seconds) === \"started\") {\n\t\t\t\t\tthis._stop(time);\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis.context.transport.on(\"start\", this._syncedStart);\n\t\t\tthis.context.transport.on(\"loopStart\", this._syncedStart);\n\t\t\tthis.context.transport.on(\"stop\", this._syncedStop);\n\t\t\tthis.context.transport.on(\"pause\", this._syncedStop);\n\t\t\tthis.context.transport.on(\"loopEnd\", this._syncedStop);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Unsync the source to the Transport. See Source.sync\n\t */\n\tunsync(): this {\n\t\tif (this._synced) {\n\t\t\tthis.context.transport.off(\"stop\", this._syncedStop);\n\t\t\tthis.context.transport.off(\"pause\", this._syncedStop);\n\t\t\tthis.context.transport.off(\"loopEnd\", this._syncedStop);\n\t\t\tthis.context.transport.off(\"start\", this._syncedStart);\n\t\t\tthis.context.transport.off(\"loopStart\", this._syncedStart);\n\t\t}\n\t\tthis._synced = false;\n\t\t// clear all of the scheduled ids\n\t\tthis._scheduled.forEach(id => this.context.transport.clear(id));\n\t\tthis._scheduled = [];\n\t\tthis._state.cancel(0);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.unsync();\n\t\tthis._volume.dispose();\n\t\tthis._state.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../core/context/Gain\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { GainFactor, Seconds, Time } from \"../core/type/Units\";\nimport { noOp } from \"../core/util/Interface\";\nimport { BasicPlaybackState } from \"../core/util/StateTimeline\";\n\nexport type OneShotSourceCurve = \"linear\" | \"exponential\";\n\nexport interface OneShotSourceOptions extends ToneAudioNodeOptions {\n\tonended: () => void;\n\tfadeIn: Time;\n\tfadeOut: Time;\n\tcurve: OneShotSourceCurve;\n}\n\nexport abstract class OneShotSource<Options extends ToneAudioNodeOptions> extends ToneAudioNode<Options> {\n\n\t/**\n\t *  The callback to invoke after the\n\t *  source is done playing.\n\t */\n\tonended: () => void = noOp;\n\n\t/**\n\t * Sources do not have input nodes\n\t */\n\tinput: undefined;\n\n\t/**\n\t *  The start time\n\t */\n\tprotected _startTime: number = -1;\n\n\t/**\n\t *  The stop time\n\t */\n\tprotected _stopTime: number = -1;\n\n\t/**\n\t * The id of the timeout\n\t */\n\tprivate _timeout: number = -1;\n\n\t/**\n\t * The public output node\n\t */\n\toutput: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain : 0,\n\t});\n\n\t/**\n\t *  The output gain node.\n\t */\n\tprotected _gainNode = this.output;\n\n\t/**\n\t *  The fadeIn time of the amplitude envelope.\n\t */\n\tprotected _fadeIn: Time;\n\n\t/**\n\t *  The fadeOut time of the amplitude envelope.\n\t */\n\tprotected _fadeOut: Time;\n\n\t/**\n\t * The curve applied to the fades, either \"linear\" or \"exponential\"\n\t */\n\tprotected _curve: OneShotSourceCurve;\n\n\tconstructor(options: OneShotSourceOptions) {\n\t\tsuper(options);\n\n\t\tthis._fadeIn = options.fadeIn;\n\t\tthis._fadeOut = options.fadeOut;\n\t\tthis._curve = options.curve;\n\t}\n\n\tstatic getDefaults(): OneShotSourceOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tcurve: \"linear\" as OneShotSourceCurve,\n\t\t\tfadeIn : 0,\n\t\t\tfadeOut: 0,\n\t\t\tonended : noOp,\n\t\t});\n\t}\n\n\t/**\n\t * Stop the source node\n\t */\n\tprotected abstract _stopSource(time: Seconds): void;\n\n\t/**\n\t * Start the source node at the given time\n\t * @param  time When to start the node\n\t */\n\tprotected abstract start(time?: Time): this;\n\t/**\n\t * Start the source at the given time\n\t * @param  time When to start the source\n\t */\n\tprotected _startGain(time: Seconds, gain: GainFactor = 1): this {\n\t\tthis.assert(this._startTime === -1, \"Source cannot be started more than once\");\n\t\t// apply a fade in envelope\n\t\tconst fadeInTime = this.toSeconds(this._fadeIn);\n\n\t\t// record the start time\n\t\tthis._startTime = time + fadeInTime;\n\t\tthis._startTime = Math.max(this._startTime, this.context.currentTime);\n\n\t\t// schedule the envelope\n\t\tif (fadeInTime > 0) {\n\t\t\tthis._gainNode.gain.setValueAtTime(0, time);\n\t\t\tif (this._curve === \"linear\") {\n\t\t\t\tthis._gainNode.gain.linearRampToValueAtTime(gain, time + fadeInTime);\n\t\t\t} else {\n\t\t\t\tthis._gainNode.gain.exponentialApproachValueAtTime(gain, time, fadeInTime);\n\t\t\t}\n\t\t} else {\n\t\t\tthis._gainNode.gain.setValueAtTime(gain, time);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the source node at the given time.\n\t * @param time When to stop the source\n\t */\n\tstop(time?: Time): this {\n\t\tthis._stopGain(this.toSeconds(time));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the source at the given time\n\t * @param  time When to stop the source\n\t */\n\tprotected _stopGain(time: Seconds): this {\n\t\tthis.assert(this._startTime !== -1, \"'start' must be called before 'stop'\");\n\t\t// cancel the previous stop\n\t\tthis.cancelStop();\n\n\t\t// the fadeOut time\n\t\tconst fadeOutTime = this.toSeconds(this._fadeOut);\n\n\t\t// schedule the stop callback\n\t\tthis._stopTime = this.toSeconds(time) + fadeOutTime;\n\t\tthis._stopTime = Math.max(this._stopTime, this.context.currentTime);\n\t\tif (fadeOutTime > 0) {\n\t\t\t// start the fade out curve at the given time\n\t\t\tif (this._curve === \"linear\") {\n\t\t\t\tthis._gainNode.gain.linearRampTo(0, fadeOutTime, time);\n\t\t\t} else {\n\t\t\t\tthis._gainNode.gain.targetRampTo(0, fadeOutTime, time);\n\t\t\t}\n\t\t} else {\n\t\t\t// stop any ongoing ramps, and set the value to 0\n\t\t\tthis._gainNode.gain.cancelAndHoldAtTime(time);\n\t\t\tthis._gainNode.gain.setValueAtTime(0, time);\n\t\t}\n\t\tthis.context.clearTimeout(this._timeout);\n\t\tthis._timeout = this.context.setTimeout(() => {\n\t\t\t// allow additional time for the exponential curve to fully decay\n\t\t\tconst additionalTail = this._curve === \"exponential\" ? fadeOutTime * 2 : 0;\n\t\t\tthis._stopSource(this.now() + additionalTail);\n\t\t\tthis._onended();\n\t\t}, this._stopTime - this.context.currentTime);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Invoke the onended callback\n\t */\n\tprotected _onended(): void {\n\t\tif (this.onended !== noOp) {\n\t\t\tthis.onended();\n\t\t\t// overwrite onended to make sure it only is called once\n\t\t\tthis.onended = noOp;\n\t\t\t// dispose when it's ended to free up for garbage collection\n\t\t\tsetTimeout(() => this.dispose(), 1000);\n\t\t}\n\t}\n\n\t/**\n\t *  Get the playback state at the given time\n\t */\n\tgetStateAtTime = function(time: Time): BasicPlaybackState {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._startTime !== -1 && computedTime >= this._startTime &&\n\t\t\t(this._stopTime === -1 || computedTime <= this._stopTime)) {\n\t\t\treturn \"started\";\n\t\t} else {\n\t\t\treturn \"stopped\";\n\t\t}\n\t};\n\n\t/**\n\t * Get the playback state at the current time\n\t */\n\tget state(): BasicPlaybackState {\n\t\treturn this.getStateAtTime(this.now());\n\t}\n\n\t/**\n\t *  Cancel a scheduled stop event\n\t */\n\tcancelStop(): this {\n\t\tthis.assert(this._startTime !== -1, \"Source is not started\");\n\t\t// cancel the stop envelope\n\t\tthis._gainNode.gain.cancelScheduledValues(this._startTime + this.sampleTime);\n\t\tthis.context.clearTimeout(this._timeout);\n\t\tthis._stopTime = -1;\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._gainNode.disconnect();\n\t\treturn this;\n\t}\n}\n","import { connect } from \"../../core/Connect\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { GainFactor, Positive, Seconds, Time } from \"../../core/type/Units\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp } from \"../../core/util/Interface\";\nimport { isDefined } from \"../../core/util/TypeCheck\";\nimport { OneShotSource, OneShotSourceCurve, OneShotSourceOptions } from \"../OneShotSource\";\n\nexport type ToneBufferSourceCurve = OneShotSourceCurve;\n\ninterface ToneBufferSourceOptions extends OneShotSourceOptions {\n\tbuffer: ToneAudioBuffer;\n\tcurve: ToneBufferSourceCurve;\n\tplaybackRate: Positive;\n\tfadeIn: Time;\n\tfadeOut: Time;\n\tloopStart: Time;\n\tloopEnd: Time;\n\tloop: boolean;\n\tonload: () => void;\n}\n\n/**\n *  Wrapper around the native BufferSourceNode.\n *  @param  buffer   The buffer to play\n *  @param  onended  The callback to invoke when the buffer is done playing.\n */\nexport class ToneBufferSource extends OneShotSource<ToneBufferSourceOptions> {\n\n\tname = \"ToneBufferSource\";\n\n\t/**\n\t *  The oscillator\n\t */\n\tprivate _source = this.context.createBufferSource();\n\tprotected _internalChannels = [this._source];\n\n\t/**\n\t *  The frequency of the oscillator\n\t */\n\treadonly playbackRate: Param<Positive>;\n\n\t/**\n\t * The private instance of the buffer object\n\t */\n\tprivate _buffer: ToneAudioBuffer;\n\n\t/**\n\t * indicators if the source has started/stopped\n\t */\n\tprivate _sourceStarted: boolean = false;\n\tprivate _sourceStopped: boolean = false;\n\n\tconstructor(buffer?: ToneAudioBuffer | AudioBuffer | string, onload?: () => void);\n\tconstructor(options?: Partial<ToneBufferSourceOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(ToneBufferSource.getDefaults(), arguments, [\"buffer\", \"onload\"]));\n\t\tconst options = optionsFromArguments(ToneBufferSource.getDefaults(), arguments, [\"buffer\", \"onload\"]);\n\n\t\tconnect(this._source, this._gainNode);\n\t\tthis._source.onended = () => this._stopSource();\n\n\t\t/**\n\t\t *  The playbackRate of the buffer\n\t\t */\n\t\tthis.playbackRate = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam : this._source.playbackRate,\n\t\t\tunits : \"positive\",\n\t\t\tvalue : options.playbackRate,\n\t\t});\n\n\t\t// set some values initially\n\t\tthis.loop = options.loop;\n\t\tthis.loopStart = options.loopStart;\n\t\tthis.loopEnd = options.loopEnd;\n\t\tthis._buffer = new ToneAudioBuffer(options.buffer, options.onload);\n\n\t\tthis._internalChannels.push(this._source);\n\t}\n\n\tstatic getDefaults(): ToneBufferSourceOptions {\n\t\treturn Object.assign(OneShotSource.getDefaults(), {\n\t\t\tbuffer: new ToneAudioBuffer(),\n\t\t\tloop: false,\n\t\t\tloopEnd : 0,\n\t\t\tloopStart : 0,\n\t\t\tonload: noOp,\n\t\t\tplaybackRate : 1,\n\t\t});\n\t}\n\n\t/**\n\t *  The fadeIn time of the amplitude envelope.\n\t */\n\tget fadeIn(): Time {\n\t\treturn this._fadeIn;\n\t}\n\tset fadeIn(t: Time) {\n\t\tthis._fadeIn = t;\n\t}\n\n\t/**\n\t *  The fadeOut time of the amplitude envelope.\n\t */\n\tget fadeOut(): Time {\n\t\treturn this._fadeOut;\n\t}\n\tset fadeOut(t: Time) {\n\t\tthis._fadeOut = t;\n\t}\n\n\t/**\n\t * The curve applied to the fades, either \"linear\" or \"exponential\"\n\t */\n\tget curve(): ToneBufferSourceCurve {\n\t\treturn this._curve;\n\t}\n\tset curve(t) {\n\t\tthis._curve = t;\n\t}\n\n\t/**\n\t *  Start the buffer\n\t *  @param  time When the player should start.\n\t *  @param  offset The offset from the beginning of the sample to start at.\n\t *  @param  duration How long the sample should play. If no duration\n\t *                   is given, it will default to the full length\n\t *                   of the sample (minus any offset)\n\t *  @param  gain  The gain to play the buffer back at.\n\t */\n\tstart(time?: Time, offset?: Time, duration?: Time, gain: GainFactor = 1): this {\n\t\tthis.assert(this.buffer.loaded, \"buffer is either not set or not loaded\");\n\t\tconst computedTime = this.toSeconds(time);\n\n\t\t// apply the gain envelope\n\t\tthis._startGain(computedTime, gain);\n\n\t\t// if it's a loop the default offset is the loopstart point\n\t\tif (this.loop) {\n\t\t\toffset = defaultArg(offset, this.loopStart);\n\t\t} else {\n\t\t\t// otherwise the default offset is 0\n\t\t\toffset = defaultArg(offset, 0);\n\t\t}\n\t\t// make sure the offset is not less than 0\n\t\tlet computedOffset = Math.max(this.toSeconds(offset), 0);\n\n\t\t// start the buffer source\n\t\tif (this.loop) {\n\t\t\t// modify the offset if it's greater than the loop time\n\t\t\tconst loopEnd = this.toSeconds(this.loopEnd) || this.buffer.duration;\n\t\t\tconst loopStart = this.toSeconds(this.loopStart);\n\t\t\tconst loopDuration = loopEnd - loopStart;\n\t\t\t// move the offset back\n\t\t\tif (computedOffset >= loopEnd) {\n\t\t\t\tcomputedOffset = ((computedOffset - loopStart) % loopDuration) + loopStart;\n\t\t\t}\n\t\t}\n\n\t\t// this.buffer.loaded would have return false if the AudioBuffer was undefined\n\t\tthis._source.buffer = this.buffer.get() as AudioBuffer;\n\t\tthis._source.loopEnd = this.toSeconds(this.loopEnd) || this.buffer.duration;\n\t\tif (computedOffset < this.buffer.duration) {\n\t\t\tthis._sourceStarted = true;\n\t\t\tthis._source.start(computedTime, computedOffset);\n\t\t}\n\n\t\t// if a duration is given, schedule a stop\n\t\tif (isDefined(duration)) {\n\t\t\tlet computedDur = this.toSeconds(duration);\n\t\t\t// make sure it's never negative\n\t\t\tcomputedDur = Math.max(computedDur, 0);\n\t\t\tthis.stop(computedTime + computedDur);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\tprotected _stopSource(time?: Seconds): void {\n\t\tif (!this._sourceStopped) {\n\t\t\tthis._sourceStopped = true;\n\t\t\tthis._source.stop(this.toSeconds(time));\n\t\t\tthis._onended();\n\t\t}\n\t}\n\n\t/**\n\t * If loop is true, the loop will start at this position.\n\t */\n\tget loopStart(): Time {\n\t\treturn this._source.loopStart;\n\t}\n\tset loopStart(loopStart: Time) {\n\t\tthis._source.loopStart = this.toSeconds(loopStart);\n\t}\n\n\t/**\n\t * If loop is true, the loop will end at this position.\n\t */\n\tget loopEnd(): Time {\n\t\treturn this._source.loopEnd;\n\t}\n\tset loopEnd(loopEnd: Time) {\n\t\tthis._source.loopEnd = this.toSeconds(loopEnd);\n\t}\n\n\t/**\n\t * The audio buffer belonging to the player.\n\t */\n\tget buffer(): ToneAudioBuffer {\n\t\treturn this._buffer;\n\t}\n\tset buffer(buffer: ToneAudioBuffer) {\n\t\tthis._buffer.set(buffer);\n\t}\n\n\t/**\n\t * If the buffer should loop once it's over.\n\t */\n\tget loop(): boolean {\n\t\treturn this._source.loop;\n\t}\n\tset loop(loop: boolean) {\n\t\tthis._source.loop = loop;\n\t\tif (this._sourceStarted) {\n\t\t\tthis.cancelStop();\n\t\t}\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._source.onended = null;\n\t\tthis._source.disconnect();\n\t\tthis._buffer.dispose();\n\t\tthis.playbackRate.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioBuffer } from \"../core/context/ToneAudioBuffer\";\nimport { Positive, Time } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Source, SourceOptions } from \"../source/Source\";\nimport { ToneBufferSource } from \"./buffer/BufferSource\";\n\ntype NoiseType = \"white\" | \"brown\" | \"pink\";\n\ninterface NoiseOptions extends SourceOptions {\n\ttype: NoiseType;\n\tplaybackRate: Positive;\n}\n\n/**\n * Noise is a noise generator. It uses looped noise buffers to save on performance.\n * Noise supports the noise types: \"pink\", \"white\", and \"brown\". Read more about\n * colors of noise on [Wikipedia](https://en.wikipedia.org/wiki/Colors_of_noise).\n *\n * @param type the noise type (white|pink|brown)\n * @example\n * //initialize the noise and start\n * var noise = new Noise(\"pink\").start();\n *\n * //make an autofilter to shape the noise\n * var autoFilter = new Tone.AutoFilter({\n * \t\"frequency\" : \"8m\",\n * \t\"min\" : 800,\n * \t\"max\" : 15000\n * }).connect(Tone.Master);\n *\n * //connect the noise\n * noise.connect(autoFilter);\n * //start the autofilter LFO\n * autoFilter.start()\n */\nexport class Noise extends Source<NoiseOptions> {\n\n\tname = \"Noise\";\n\n\t/**\n\t * Private reference to the source\n\t */\n\tprivate _source: ToneBufferSource | null = null;\n\n\t/**\n\t * private reference to the type\n\t */\n\tprivate _type!: NoiseType;\n\n\t/**\n\t *  The playback rate of the noise. Affects\n\t *  the \"frequency\" of the noise.\n\t */\n\tprivate _playbackRate: Positive;\n\n\tconstructor(options?: NoiseType | Partial<NoiseOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Noise.getDefaults(), arguments, [\"type\"]));\n\t\tconst options = optionsFromArguments(Noise.getDefaults(), arguments, [\"type\"]);\n\n\t\tthis._playbackRate = options.playbackRate;\n\t\tthis.type = options.type;\n\t}\n\n\tstatic getDefaults(): NoiseOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tplaybackRate: 1,\n\t\t\ttype: \"white\" as NoiseType,\n\t\t});\n\t}\n\n\t/**\n\t * The type of the noise. Can be \"white\", \"brown\", or \"pink\".\n\t * @example\n\t * noise.type = \"white\";\n\t */\n\tget type(): NoiseType {\n\t\treturn this._type;\n\t}\n\tset type(type: NoiseType) {\n\t\tthis.assert(type in _noiseBuffers, \"Noise: invalid type: \" + type);\n\t\tif (this._type !== type) {\n\t\t\tthis._type = type;\n\t\t\t// if it's playing, stop and restart it\n\t\t\tif (this.state === \"started\") {\n\t\t\t\tconst now = this.now();\n\t\t\t\tthis._stop(now);\n\t\t\t\tthis._start(now);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *  The playback rate of the noise. Affects\n\t *  the \"frequency\" of the noise.\n\t */\n\tget playbackRate(): Positive {\n\t\treturn this._playbackRate;\n\t}\n\tset playbackRate(rate: Positive) {\n\t\tthis._playbackRate = rate;\n\t\tif (this._source) {\n\t\t\tthis._source.playbackRate.value = rate;\n\t\t}\n\t}\n\n\t/**\n\t *  internal start method\n\t */\n\tprotected _start(time?: Time): void {\n\t\tconst buffer = _noiseBuffers[this._type];\n\t\tthis._source = new ToneBufferSource(buffer).connect(this.output);\n\t\tthis._source.loop = true;\n\t\tthis._source.playbackRate.value = this._playbackRate;\n\t\tthis._source.start(this.toSeconds(time), Math.random() * (buffer.duration - 0.001));\n\t}\n\n\t/**\n\t *  internal stop method\n\t *\n\t *  @param {Time} time\n\t *  @private\n\t */\n\tprotected _stop(time?: Time): void {\n\t\tif (this._source) {\n\t\t\tthis._source.stop(this.toSeconds(time));\n\t\t\tthis._source = null;\n\t\t}\n\t}\n\n\t/**\n\t * Restarts the noise.\n\t * @param  time When to restart the noise.\n\t */\n\trestart(time?: Time): this {\n\t\t// TODO could be optimized by cancelling the buffer source 'stop'\n\t\t// stop and restart\n\t\tthis._stop(time);\n\t\tthis._start(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (this._source) {\n\t\t\tthis._source.disconnect();\n\t\t}\n\t\treturn this;\n\t}\n}\n\n///////////////////////////////////////////////////////////////////////////\n// THE NOISE BUFFERS\n///////////////////////////////////////////////////////////////////////////\n\n// Noise buffer stats\nconst BUFFER_LENGTH = 44100 * 5;\nconst NUM_CHANNELS = 2;\n\n/**\n * The cached noise buffers\n */\ninterface NoiseCache {\n\t[key: string]: ToneAudioBuffer | null;\n}\n\n/**\n * Cache the noise buffers\n */\nconst _noiseCache: NoiseCache = {\n\tbrown: null,\n\tpink: null,\n\twhite: null,\n};\n\n/**\n * The noise arrays. Generated on initialization.\n * borrowed heavily from https://github.com/zacharydenton/noise.js\n * (c) 2013 Zach Denton (MIT)\n */\nconst _noiseBuffers = {\n\tget brown(): ToneAudioBuffer {\n\t\tif (!_noiseCache.brown) {\n\t\t\tconst buffer: Float32Array[] = [];\n\t\t\tfor (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {\n\t\t\t\tconst channel = new Float32Array(BUFFER_LENGTH);\n\t\t\t\tbuffer[channelNum] = channel;\n\t\t\t\tlet lastOut = 0.0;\n\t\t\t\tfor (let i = 0; i < BUFFER_LENGTH; i++) {\n\t\t\t\t\tconst white = Math.random() * 2 - 1;\n\t\t\t\t\tchannel[i] = (lastOut + (0.02 * white)) / 1.02;\n\t\t\t\t\tlastOut = channel[i];\n\t\t\t\t\tchannel[i] *= 3.5; // (roughly) compensate for gain\n\t\t\t\t}\n\t\t\t}\n\t\t\t_noiseCache.brown = new ToneAudioBuffer().fromArray(buffer);\n\t\t}\n\t\treturn _noiseCache.brown;\n\t},\n\n\tget pink(): ToneAudioBuffer {\n\t\tif (!_noiseCache.pink) {\n\t\t\tconst buffer: Float32Array[] = [];\n\t\t\tfor (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {\n\t\t\t\tconst channel = new Float32Array(BUFFER_LENGTH);\n\t\t\t\tbuffer[channelNum] = channel;\n\t\t\t\t// tslint:disable-next-line: one-variable-per-declaration\n\t\t\t\tlet b0, b1, b2, b3, b4, b5, b6;\n\t\t\t\tb0 = b1 = b2 = b3 = b4 = b5 = b6 = 0.0;\n\t\t\t\tfor (let i = 0; i < BUFFER_LENGTH; i++) {\n\t\t\t\t\tconst white = Math.random() * 2 - 1;\n\t\t\t\t\tb0 = 0.99886 * b0 + white * 0.0555179;\n\t\t\t\t\tb1 = 0.99332 * b1 + white * 0.0750759;\n\t\t\t\t\tb2 = 0.96900 * b2 + white * 0.1538520;\n\t\t\t\t\tb3 = 0.86650 * b3 + white * 0.3104856;\n\t\t\t\t\tb4 = 0.55000 * b4 + white * 0.5329522;\n\t\t\t\t\tb5 = -0.7616 * b5 - white * 0.0168980;\n\t\t\t\t\tchannel[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;\n\t\t\t\t\tchannel[i] *= 0.11; // (roughly) compensate for gain\n\t\t\t\t\tb6 = white * 0.115926;\n\t\t\t\t}\n\t\t\t}\n\t\t\t_noiseCache.pink = new ToneAudioBuffer().fromArray(buffer);\n\t\t}\n\t\treturn _noiseCache.pink;\n\t},\n\n\tget white(): ToneAudioBuffer {\n\t\tif (!_noiseCache.white) {\n\t\t\tconst buffer: Float32Array[] = [];\n\t\t\tfor (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {\n\t\t\t\tconst channel = new Float32Array(BUFFER_LENGTH);\n\t\t\t\tbuffer[channelNum] = channel;\n\t\t\t\tfor (let i = 0; i < BUFFER_LENGTH; i++) {\n\t\t\t\t\tchannel[i] = Math.random() * 2 - 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t_noiseCache.white = new ToneAudioBuffer().fromArray(buffer);\n\t\t}\n\t\treturn _noiseCache.white;\n\t},\n};\n","import { AbstractParam } from \"../core/context/AbstractParam\";\nimport { Param } from \"../core/context/Param\";\nimport { InputNode, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { connect } from \"../core/context/ToneAudioNode\";\nimport { Time, Unit, UnitName } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\n\nexport interface SignalOptions<Type> extends ToneAudioNodeOptions {\n\tvalue: Type;\n\tunits: UnitName;\n\tconvert: boolean;\n}\n\n/**\n * A signal is an audio-rate value. Tone.Signal is a core component of the library.\n * Unlike a number, Signals can be scheduled with sample-level accuracy. Tone.Signal\n * has all of the methods available to native Web Audio\n * [AudioParam](http://webaudio.github.io/web-audio-api/#the-audioparam-interface)\n * as well as additional conveniences. Read more about working with signals\n * [here](https://github.com/Tonejs/Tone.js/wiki/Signals).\n *  @param value Initial value of the signal\n *  @param units unit The units the signal is in.\n * @example\n * const signal = new Tone.Signal(10);\n */\nexport class Signal<Type extends Unit = number> extends ToneAudioNode<SignalOptions<any>>\nimplements AbstractParam<Type> {\n\n\treadonly name: string = \"Signal\";\n\n\t/**\n\t * Indicates if the value should be overridden on connection.\n\t */\n\treadonly override: boolean = true;\n\n\t/**\n\t * The constant source node which generates the signal\n\t */\n\tprotected _constantSource: ConstantSourceNode = this.context.createConstantSource();\n\treadonly output: OutputNode = this._constantSource;\n\tprotected _param: Param<Type>;\n\treadonly input: InputNode;\n\n\tconstructor(value?: Type, units?: UnitName);\n\tconstructor(options?: Partial<SignalOptions<Type>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]));\n\n\t\tconst options = optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]) as SignalOptions<Type>;\n\n\t\tthis._constantSource.start(0);\n\t\tthis.input = this._param = new Param({\n\t\t\tcontext: this.context,\n\t\t\tconvert: options.convert,\n\t\t\tparam: this._constantSource.offset,\n\t\t\tunits: options.units,\n\t\t\tvalue: options.value,\n\t\t});\n\t}\n\n\tstatic getDefaults(): SignalOptions<any> {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tchannelCount: 1,\n\t\t\tchannelCountMode: \"explicit\",\n\t\t\tchannelInterpretation: \"discrete\",\n\t\t\tconvert: true,\n\t\t\tunits: \"number\" as UnitName,\n\t\t\tvalue: 0,\n\t\t}) as SignalOptions<any>;\n\t}\n\n\tconnect(destination: InputNode, outputNum: number = 0, inputNum: number = 0): this {\n\t\tconnectSignal(this, destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._param.dispose();\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// ABSTRACT PARAM INTERFACE\n\t// just a proxy for the ConstantSourceNode's offset AudioParam\n\t// all docs are generated from AbstractParam.ts\n\t///////////////////////////////////////////////////////////////////////////\n\n\tsetValueAtTime(value: Type, time: Time): this {\n\t\tthis._param.setValueAtTime(value, time);\n\t\treturn this;\n\t}\n\tgetValueAtTime(time: Time): Type {\n\t\treturn this._param.getValueAtTime(time);\n\t}\n\tsetRampPoint(time: Time): this {\n\t\tthis._param.setRampPoint(time);\n\t\treturn this;\n\t}\n\tlinearRampToValueAtTime(value: Type, time: Time): this {\n\t\tthis._param.linearRampToValueAtTime(value, time);\n\t\treturn this;\n\t}\n\texponentialRampToValueAtTime(value: Type, time: Time): this {\n\t\tthis._param.exponentialRampToValueAtTime(value, time);\n\t\treturn this;\n\t}\n\texponentialRampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tthis._param.exponentialRampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\tlinearRampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tthis._param.linearRampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\ttargetRampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tthis._param.targetRampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\texponentialApproachValueAtTime(value: Type, time: Time, rampTime: Time): this {\n\t\tthis._param.exponentialApproachValueAtTime(value, time, rampTime);\n\t\treturn this;\n\t}\n\tsetTargetAtTime(value: Type, startTime: Time, timeConstant: number): this {\n\t\tthis._param.setTargetAtTime(value, startTime, timeConstant);\n\t\treturn this;\n\t}\n\tsetValueCurveAtTime(values: Type[], startTime: Time, duration: Time, scaling?: number): this {\n\t\tthis._param.setValueCurveAtTime(values, startTime, duration, scaling);\n\t\treturn this;\n\t}\n\tcancelScheduledValues(time: Time): this {\n\t\tthis._param.cancelScheduledValues(time);\n\t\treturn this;\n\t}\n\tcancelAndHoldAtTime(time: Time): this {\n\t\tthis._param.cancelAndHoldAtTime(time);\n\t\treturn this;\n\t}\n\trampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tthis._param.rampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\n\tget value(): Type {\n\t\treturn this._param.value;\n\t}\n\tset value(value: Type) {\n\t\tthis._param.value = value;\n\t}\n\n\tget convert(): boolean {\n\t\treturn this._param.convert;\n\t}\n\tset convert(convert: boolean) {\n\t\tthis._param.convert = convert;\n\t}\n\n\tget units(): UnitName {\n\t\treturn this._param.units;\n\t}\n\n\tget overridden(): boolean {\n\t\treturn this._param.overridden;\n\t}\n\tset overridden(overridden: boolean) {\n\t\tthis._param.overridden = overridden;\n\t}\n\n\tget maxValue(): number {\n\t\treturn this._param.maxValue;\n\t}\n\tget minValue(): number {\n\t\treturn this._param.minValue;\n\t}\n}\n\n/**\n * When connecting from a signal, it's necessary to zero out the node destination\n * node if that node is also a signal. If the destination is not 0, then the values\n * will be summed. This method insures that the output of the destination signal will\n * be the same as the source signal, making the destination signal a pass through node.\n * @param signal The output signal to connect from\n * @param destination the destination to connect to\n * @param outputNum the optional output number\n * @param inputNum the input number\n */\nexport function connectSignal(signal: OutputNode, destination: InputNode, outputNum?: number, inputNum?: number): void {\n\tif (destination instanceof Param || destination instanceof AudioParam ||\n\t\t(destination instanceof Signal && destination.override)) {\n\t\t// cancel changes\n\t\tdestination.cancelScheduledValues(0);\n\t\t// reset the value\n\t\tdestination.setValueAtTime(0, 0);\n\t\t// mark the value as overridden\n\t\tif (destination instanceof Signal) {\n\t\t\tdestination.overridden = true;\n\t\t}\n\t}\n\tconnect(signal, destination, outputNum, inputNum);\n}\n","import { connect } from \"../../core/Connect\";\nimport { Param } from \"../../core/context/Param\";\nimport { Cents, Frequency, Seconds, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { OneShotSource, OneShotSourceOptions } from \"../OneShotSource\";\n\ninterface ToneOscillatorNodeOptions extends OneShotSourceOptions {\n\tfrequency: Frequency;\n\tdetune: Cents;\n\ttype: OscillatorType;\n}\n\n/**\n * Wrapper around the native fire-and-forget OscillatorNode.\n * Adds the ability to reschedule the stop method.\n * ***[Tone.Oscillator](Oscillator) is better for most use-cases***\n *  @extends {Tone.AudioNode}\n *  @param  {AudioBuffer|Tone.Buffer}  buffer   The buffer to play\n *  @param  {Function}  onload  The callback to invoke when the\n *                               buffer is done playing.\n */\nexport class ToneOscillatorNode extends OneShotSource<ToneOscillatorNodeOptions> {\n\n\treadonly name = \"ToneOscillatorNode\";\n\n\t/**\n\t *  The oscillator\n\t */\n\tprivate _oscillator = this.context.createOscillator();\n\tprotected _internalChannels = [this._oscillator];\n\n\t/**\n\t *  The frequency of the oscillator\n\t */\n\treadonly frequency: Param<Frequency>;\n\n\t/**\n\t *  The detune of the oscillator\n\t */\n\treadonly detune: Param<Cents>;\n\n\tconstructor(options?: Partial<ToneOscillatorNodeOptions>);\n\tconstructor(\n\t\tfrequency: Frequency,\n\t\ttype: OscillatorType,\n\t);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(ToneOscillatorNode.getDefaults(), arguments, [\"frequency\", \"type\"]));\n\t\tconst options = optionsFromArguments(ToneOscillatorNode.getDefaults(), arguments, [\"frequency\", \"type\"]);\n\n\t\tconnect(this._oscillator, this._gainNode);\n\n\t\tthis.type = options.type;\n\n\t\tthis.frequency = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam : this._oscillator.frequency,\n\t\t\tunits : \"frequency\",\n\t\t\tvalue : this.toFrequency(options.frequency),\n\t\t});\n\n\t\tthis.detune = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam : this._oscillator.detune,\n\t\t\tunits : \"cents\",\n\t\t\tvalue : options.detune,\n\t\t});\n\t}\n\n\tstatic getDefaults(): ToneOscillatorNodeOptions {\n\t\treturn Object.assign(OneShotSource.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tfrequency: 440,\n\t\t\ttype: \"sine\" as OscillatorType,\n\t\t});\n\t}\n\n\t/**\n\t * Start the oscillator node at the given time\n\t * @param  time When to start the oscillator\n\t */\n\tstart(time?: Time): this {\n\t\tthis.log(\"start\", time);\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._startGain(computedTime);\n\t\tthis._oscillator.start(computedTime);\n\t\treturn this;\n\t}\n\n\tprotected _stopSource(time?: Seconds): void {\n\t\tthis._oscillator.stop(time);\n\t}\n\n\t/**\n\t * Sets an arbitrary custom periodic waveform given a PeriodicWave.\n\t * @param  periodicWave PeriodicWave should be created with context.createPeriodicWave\n\t */\n\tsetPeriodicWave(periodicWave: PeriodicWave): this {\n\t\tthis._oscillator.setPeriodicWave(periodicWave);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The oscillator type. Either 'sine', 'sawtooth', 'square', or 'triangle'\n\t */\n\tget type(): OscillatorType {\n\t\treturn this._oscillator.type;\n\t}\n\tset type(type: OscillatorType) {\n\t\tthis._oscillator.type = type;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._oscillator.disconnect();\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\treturn this;\n\t}\n}\n","import { AudioRange, Cents, Degrees, Frequency, Radians, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { ToneOscillatorConstructorOptions, ToneOscillatorInterface,\n\tToneOscillatorOptions, ToneOscillatorType } from \"./OscillatorInterface\";\nimport { ToneOscillatorNode } from \"./OscillatorNode\";\n\n/**\n *  Oscillator supports a number of features including\n *  phase rotation, multiple oscillator types (see Oscillator.type),\n *  and Transport syncing (see Oscillator.syncFrequency).\n *\n *  @param frequency Starting frequency\n *  @param type The oscillator type. Read more about type below.\n *  @example\n * //make and start a 440hz sine tone\n * var osc = new Oscillator(440, \"sine\").toDestination().start();\n */\nexport class Oscillator extends Source<ToneOscillatorOptions> implements ToneOscillatorInterface {\n\n\tname = \"Oscillator\";\n\n\t/**\n\t *  the main oscillator\n\t */\n\tprivate _oscillator: ToneOscillatorNode | null = null;\n\n\t/**\n\t *  The frequency control.\n\t */\n\tfrequency: Signal<Frequency>;\n\n\t/**\n\t *  The detune control signal.\n\t */\n\tdetune: Signal<Cents>;\n\n\t/**\n\t *  the periodic wave\n\t */\n\tprivate _wave?: PeriodicWave;\n\n\t/**\n\t *  The partials of the oscillator\n\t */\n\tprivate _partials: number[];\n\n\t/**\n\t *  The number of partials to limit or extend the periodic wave by\n\t */\n\tprivate _partialCount: number;\n\n\t/**\n\t *  the phase of the oscillator between 0 - 360\n\t */\n\tprivate _phase: Radians;\n\n\t/**\n\t *  the type of the oscillator\n\t *  @type {string}\n\t *  @private\n\t */\n\tprivate _type;\n\n\tconstructor(options?: Partial<ToneOscillatorConstructorOptions>)\n\tconstructor(frequency?: Frequency, type?: ToneOscillatorType);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Oscillator.getDefaults(), arguments, [\"frequency\", \"type\"]));\n\t\tconst options = optionsFromArguments(Oscillator.getDefaults(), arguments, [\"frequency\", \"type\"]);\n\n\t\tthis.frequency = new Signal<Frequency>({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t});\n\t\treadOnly(this, \"frequency\");\n\n\t\tthis.detune = new Signal<Cents>({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune,\n\t\t});\n\t\treadOnly(this, \"detune\");\n\n\t\tthis._partials = options.partials;\n\t\tthis._partialCount = options.partialCount;\n\t\tthis._phase = options.phase;\n\t\tthis._type = options.type;\n\n\t\tif (options.partialCount && options.type !== \"custom\") {\n\t\t\tthis._type = this.baseType + options.partialCount.toString();\n\t\t}\n\t\tthis.phase = this._phase;\n\t}\n\n\tstatic getDefaults(): ToneOscillatorOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tfrequency: 440,\n\t\t\tpartialCount: 0,\n\t\t\tpartials: [],\n\t\t\tphase: 0,\n\t\t\ttype: \"sine\",\n\t\t}) as ToneOscillatorOptions;\n\t}\n\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _start(time?: Time): void {\n\t\tthis.log(\"start\", time);\n\t\t// new oscillator with previous values\n\t\tconst oscillator = new ToneOscillatorNode({\n\t\t\tcontext: this.context,\n\t\t});\n\t\tthis._oscillator = oscillator;\n\t\tif (this._wave) {\n\t\t\tthis._oscillator.setPeriodicWave(this._wave);\n\t\t} else {\n\t\t\tthis._oscillator.type = this._type;\n\t\t}\n\t\t// connect the control signal to the oscillator frequency & detune\n\t\tthis._oscillator.connect(this.output);\n\t\tthis.frequency.connect(this._oscillator.frequency);\n\t\tthis.detune.connect(this._oscillator.detune);\n\n\t\t// start the oscillator\n\t\ttime = this.toSeconds(time);\n\t\tthis._oscillator.start(time);\n\t}\n\n\t/**\n\t *  stop the oscillator\n\t */\n\tprotected _stop(time?: Time): void {\n\t\tthis.log(\"stop\", time);\n\t\tif (this._oscillator) {\n\t\t\ttime = this.toSeconds(time);\n\t\t\tthis._oscillator.stop(time);\n\t\t}\n\t}\n\n\t/**\n\t * Restart the oscillator. Does not stop the oscillator, but instead\n\t * just cancels any scheduled 'stop' from being invoked.\n\t */\n\trestart(time?: Time): this {\n\t\tif (this._oscillator) {\n\t\t\tthis._oscillator.cancelStop();\n\t\t}\n\t\tthis._state.cancel(this.toSeconds(time));\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Sync the signal to the Transport's bpm. Any changes to the transports bpm,\n\t *  will also affect the oscillators frequency.\n\t *  @example\n\t * Tone.Transport.bpm.value = 120;\n\t * osc.frequency.value = 440;\n\t * //the ration between the bpm and the frequency will be maintained\n\t * osc.syncFrequency();\n\t * Tone.Transport.bpm.value = 240;\n\t * // the frequency of the oscillator is doubled to 880\n\t */\n\tsyncFrequency(): this {\n\t\tthis.context.transport.syncSignal(this.frequency);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Unsync the oscillator's frequency from the Transport.\n\t *  See Oscillator.syncFrequency\n\t */\n\tunsyncFrequency(): this {\n\t\tthis.context.transport.unsyncSignal(this.frequency);\n\t\treturn this;\n\t}\n\n\t/* tslint:disable */\n\t/**\n\t * The type of the oscillator: either sine, square, triangle, or sawtooth. Also capable of\n\t * setting the first x number of partials of the oscillator. For example: \"sine4\" would\n\t * set be the first 4 partials of the sine wave and \"triangle8\" would set the first\n\t * 8 partials of the triangle wave.\n\t * <br><br>\n\t * Uses PeriodicWave internally even for native types so that it can set the phase.\n\t * PeriodicWave equations are from the\n\t * [Webkit Web Audio implementation](https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/modules/webaudio/PeriodicWave.cpp&sq=package:chromium).\n\t *\n\t * @memberOf Oscillator#\n\t * @type {string}\n\t * @name type\n\t * @example\n\t * //set it to a square wave\n\t * osc.type = \"square\";\n\t * @example\n\t * //set the first 6 partials of a sawtooth wave\n\t * osc.type = \"sawtooth6\";\n\t */\n\t/* tslint:enable */\n\tget type(): ToneOscillatorType {\n\t\treturn this._type;\n\t}\n\tset type(type: ToneOscillatorType) {\n\t\tconst isBasicType = [\"sine\", \"square\", \"sawtooth\", \"triangle\"].indexOf(type) !== -1;\n\t\tif (this._phase === 0 && isBasicType) {\n\t\t\tthis._wave = undefined;\n\t\t\tthis._partialCount = 0;\n\t\t\t// just go with the basic approach\n\t\t\tif (this._oscillator !== null) {\n\t\t\t\t// already tested that it's a basic type\n\t\t\t\tthis._oscillator.type = type as OscillatorType;\n\t\t\t}\n\t\t} else {\n\t\t\tconst [real, imag] = this._getRealImaginary(type, this._phase);\n\t\t\tconst periodicWave = this.context.createPeriodicWave(real, imag);\n\t\t\tthis._wave = periodicWave;\n\t\t\tif (this._oscillator !== null) {\n\t\t\t\tthis._oscillator.setPeriodicWave(this._wave);\n\t\t\t}\n\t\t}\n\t\tthis._type = type;\n\t}\n\n\t/**\n\t * The oscillator type without the partialsCount appended to the end\n\t * @example\n\t * osc.type = 'sine2'\n\t * osc.baseType //'sine'\n\t * osc.partialCount = 2\n\t */\n\tget baseType(): OscillatorType {\n\t\treturn this._type.replace(this.partialCount, \"\");\n\t}\n\tset baseType(baseType: OscillatorType) {\n\t\tif (this.partialCount && this._type !== \"custom\" && baseType !== \"custom\") {\n\t\t\tthis.type = baseType + this.partialCount as ToneOscillatorType;\n\t\t} else {\n\t\t\tthis.type = baseType;\n\t\t}\n\t}\n\n\t/**\n\t * 'partialCount' offers an alternative way to set the number of used partials.\n\t * When partialCount is 0, the maximum number of partials are used when representing\n\t * the waveform using the periodicWave. When 'partials' is set, this value is\n\t * not settable, but equals the length of the partials array.\n\t * @example\n\t * osc.type = 'sine'\n\t * osc.partialCount = 3\n\t * //is equivalent to\n\t * osc.type = 'sine3'\n\t */\n\tget partialCount(): number {\n\t\treturn this._partialCount;\n\t}\n\tset partialCount(p: number) {\n\t\tlet type = this._type;\n\t\tconst partial = /^(sine|triangle|square|sawtooth)(\\d+)$/.exec(this._type);\n\t\tif (partial) {\n\t\t\ttype = partial[1];\n\t\t}\n\t\tif (this._type !== \"custom\") {\n\t\t\tif (p === 0) {\n\t\t\t\tthis.type = type;\n\t\t\t} else {\n\t\t\t\tthis.type = type + p.toString() as ToneOscillatorType;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *  Get the object's attributes. Given no arguments get\n\t *  will return all available object properties and their corresponding\n\t *  values.\n\t */\n\tget(): ToneOscillatorOptions {\n\t\tconst values = super.get();\n\t\tif (values.type !== \"custom\") {\n\t\t\tdelete values.partials;\n\t\t}\n\t\treturn values;\n\t}\n\n\t/**\n\t *  Returns the real and imaginary components based\n\t *  on the oscillator type.\n\t *  @returns [real: Float32Array, imaginary: Float32Array]\n\t *  @private\n\t */\n\tprivate _getRealImaginary(type: ToneOscillatorType, phase: Radians): Float32Array[] {\n\t\tconst fftSize = 4096;\n\t\tlet periodicWaveSize = fftSize / 2;\n\n\t\tconst real = new Float32Array(periodicWaveSize);\n\t\tconst imag = new Float32Array(periodicWaveSize);\n\n\t\tlet partialCount = 1;\n\t\tif (type === \"custom\") {\n\t\t\tpartialCount = this._partials.length + 1;\n\t\t\tthis._partialCount = this._partials.length;\n\t\t\tperiodicWaveSize = partialCount;\n\t\t} else {\n\t\t\tconst partial = /^(sine|triangle|square|sawtooth)(\\d+)$/.exec(type);\n\t\t\tif (partial) {\n\t\t\t\tpartialCount = parseInt(partial[2], 10) + 1;\n\t\t\t\tthis._partialCount = parseInt(partial[2], 10);\n\t\t\t\ttype = partial[1] as ToneOscillatorType;\n\t\t\t\tpartialCount = Math.max(partialCount, 2);\n\t\t\t\tperiodicWaveSize = partialCount;\n\t\t\t} else {\n\t\t\t\tthis._partialCount = 0;\n\t\t\t}\n\t\t\tthis._partials = [];\n\t\t}\n\n\t\t// tslint:disable: no-bitwise\n\t\tfor (let n = 1; n < periodicWaveSize; ++n) {\n\t\t\tconst piFactor = 2 / (n * Math.PI);\n\t\t\tlet b;\n\t\t\tswitch (type) {\n\t\t\t\tcase \"sine\":\n\t\t\t\t\tb = (n <= partialCount) ? 1 : 0;\n\t\t\t\t\tthis._partials[n - 1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"square\":\n\t\t\t\t\tb = (n & 1) ? 2 * piFactor : 0;\n\t\t\t\t\tthis._partials[n - 1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"sawtooth\":\n\t\t\t\t\tb = piFactor * ((n & 1) ? 1 : -1);\n\t\t\t\t\tthis._partials[n - 1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"triangle\":\n\t\t\t\t\tif (n & 1) {\n\t\t\t\t\t\tb = 2 * (piFactor * piFactor) * ((((n - 1) >> 1) & 1) ? -1 : 1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tb = 0;\n\t\t\t\t\t}\n\t\t\t\t\tthis._partials[n - 1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"custom\":\n\t\t\t\t\tb = this._partials[n - 1];\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new TypeError(\"Oscillator: invalid type: \" + type);\n\t\t\t}\n\t\t\tif (b !== 0) {\n\t\t\t\treal[n] = -b * Math.sin(phase * n);\n\t\t\t\timag[n] = b * Math.cos(phase * n);\n\t\t\t} else {\n\t\t\t\treal[n] = 0;\n\t\t\t\timag[n] = 0;\n\t\t\t}\n\t\t}\n\t\treturn [real, imag];\n\t}\n\n\t/**\n\t *  Compute the inverse FFT for a given phase.\n\t */\n\tprivate _inverseFFT(real: Float32Array, imag: Float32Array, phase: Radians): number {\n\t\tlet sum = 0;\n\t\tconst len = real.length;\n\t\tfor (let i = 0; i < len; i++) {\n\t\t\tsum += real[i] * Math.cos(i * phase) + imag[i] * Math.sin(i * phase);\n\t\t}\n\t\treturn sum;\n\t}\n\n\t/**\n\t *  Returns the initial value of the oscillator.\n\t */\n\tprotected _getInitialValue(): AudioRange {\n\t\tconst [real, imag] = this._getRealImaginary(this._type, 0);\n\t\tlet maxValue = 0;\n\t\tconst twoPi = Math.PI * 2;\n\t\t// check for peaks in 8 places\n\t\tfor (let i = 0; i < 8; i++) {\n\t\t\tmaxValue = Math.max(this._inverseFFT(real, imag, (i / 8) * twoPi), maxValue);\n\t\t}\n\t\treturn -this._inverseFFT(real, imag, this._phase) / maxValue;\n\t}\n\n\t/**\n\t * The partials of the waveform. A partial represents\n\t * the amplitude at a harmonic. The first harmonic is the\n\t * fundamental frequency, the second is the octave and so on\n\t * following the harmonic series.\n\t * Setting this value will automatically set the type to \"custom\".\n\t * The value is an empty array when the type is not \"custom\".\n\t * @example\n\t * osc.partials = [1, 0.2, 0.01];\n\t */\n\tget partials(): number[] {\n\t\treturn this._partials;\n\t}\n\tset partials(partials: number[]) {\n\t\tthis._partials = partials;\n\t\tif (partials.length) {\n\t\t\tthis.type = \"custom\";\n\t\t}\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t * @example\n\t * osc.phase = 180; //flips the phase of the oscillator\n\t */\n\tget phase(): Degrees {\n\t\treturn this._phase * (180 / Math.PI);\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._phase = phase * Math.PI / 180;\n\t\t// reset the type\n\t\tthis.type = this._type;\n\t}\n\n\t/**\n\t *  Dispose and disconnect.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (this._oscillator !== null) {\n\t\t\tthis._oscillator.dispose();\n\t\t}\n\t\tthis._wave = undefined;\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\treturn this;\n\t}\n}\n","import { optionsFromArguments } from \"..//core/util/Defaults\";\nimport { InputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { connectSignal } from \"./Signal\";\n/**\n * A signal operator has an input and output and modifies the signal.\n */\nexport abstract class SignalOperator<Options extends ToneAudioNodeOptions> extends ToneAudioNode<Options> {\n\n\tconstructor(options?: Partial<Options>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(SignalOperator.getDefaults(), arguments, [\"context\"])));\n\t}\n\n\tconnect(destination: InputNode, outputNum: number = 0, inputNum: number = 0): this {\n\t\tconnectSignal(this, destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { isArray, isFunction, isUndef } from \"../core/util/TypeCheck\";\nimport { Signal, SignalOptions } from \"./Signal\";\nimport { SignalOperator } from \"./SignalOperator\";\n\ntype WaveShaperMappingFn = (value: number, index?: number) => number;\n\ntype WaveShaperMapping =  WaveShaperMappingFn | number[] | Float32Array;\n\ninterface WaveShaperOptions extends ToneAudioNodeOptions {\n\tmapping?: WaveShaperMapping;\n\tlength: number;\n\tcurve?: number[] | Float32Array;\n}\n\n/**\n * Wraps the native Web Audio API\n * [WaveShaperNode](http://webaudio.github.io/web-audio-api/#the-waveshapernode-interface).\n *\n *  @param mapping The function used to define the values.\n *                 The mapping function should take two arguments:\n *                 the first is the value at the current position\n *                 and the second is the array position.\n *                 If the argument is an array, that array will be\n *                 set as the wave shaping function. The input\n *                 signal is an AudioRange [-1, 1] value and the output\n *                 signal can take on any numerical values.\n *\n *  @param bufferLen The length of the WaveShaperNode buffer.\n *  @example\n * var timesTwo = new WaveShaper(function(val){\n * \treturn val * 2;\n * }, 2048);\n *  @example\n * //a waveshaper can also be constructed with an array of values\n * var invert = new WaveShaper([1, -1]);\n */\nexport class WaveShaper extends SignalOperator<WaveShaperOptions> {\n\n\tname = \"WaveShaper\";\n\n\t/**\n\t *  the waveshaper node\n\t */\n\tprivate _shaper: WaveShaperNode = this.context.createWaveShaper();\n\n\t/**\n\t * The input to the waveshaper node.\n\t */\n\tinput = this._shaper;\n\n\t/**\n\t * The output from the waveshaper node\n\t */\n\toutput = this._shaper;\n\n\tconstructor(options?: Partial<WaveShaperOptions>);\n\tconstructor(mapping?: WaveShaperMapping , length?: number);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(WaveShaper.getDefaults(), arguments, [\"mapping\", \"length\"])));\n\t\tconst options = optionsFromArguments(WaveShaper.getDefaults(), arguments, [\"mapping\", \"length\"]);\n\n\t\tif (isArray(options.mapping) || options.mapping instanceof Float32Array) {\n\t\t\tthis.curve = Float32Array.from(options.mapping);\n\t\t} else if (isFunction(options.mapping)) {\n\t\t\tthis.setMap(options.mapping, options.length);\n\t\t}\n\t}\n\n\tstatic getDefaults(): WaveShaperOptions {\n\t\treturn Object.assign(Signal.getDefaults(), {\n\t\t\tlength: 1024,\n\t\t});\n\t}\n\n\t/**\n\t *  Uses a mapping function to set the value of the curve.\n\t *  @param mapping The function used to define the values.\n\t *                 The mapping function take two arguments:\n\t *                 the first is the value at the current position\n\t *                 which goes from -1 to 1 over the number of elements\n\t *                 in the curve array. The second argument is the array position.\n\t * @example\n\t * //map the input signal from [-1, 1] to [0, 10]\n\t * shaper.setMap(function(val, index){\n\t * \treturn (val + 1) * 5;\n\t * })\n\t */\n\tsetMap(mapping: WaveShaperMappingFn, length: number = 1024): this {\n\t\tconst array = new Float32Array(length);\n\t\tfor (let i = 0, len = length; i < len; i++) {\n\t\t\tconst normalized = (i / (len - 1)) * 2 - 1;\n\t\t\tarray[i] = mapping(normalized, i);\n\t\t}\n\t\tthis.curve = array;\n\t\treturn this;\n\t}\n\n\t/**\n\t * The array to set as the waveshaper curve. For linear curves\n\t * array length does not make much difference, but for complex curves\n\t * longer arrays will provide smoother interpolation.\n\t */\n\tget curve(): Float32Array | null {\n\t\treturn this._shaper.curve;\n\t}\n\n\tset curve(mapping: Float32Array | null) {\n\t\tthis._shaper.curve = mapping;\n\t}\n\n\t/**\n\t * Specifies what type of oversampling (if any) should be used when\n\t * applying the shaping curve. Can either be \"none\", \"2x\" or \"4x\".\n\t */\n\tget oversample(): OverSampleType {\n\t\treturn this._shaper.oversample;\n\t}\n\n\tset oversample(oversampling: OverSampleType) {\n\t\tconst isOverSampleType = [\"none\", \"2x\", \"4x\"].some(str => str.includes(oversampling));\n\t\tthis.assert(isOverSampleType, \"oversampling must be either 'none', '2x', or '4x'\");\n\t\tthis._shaper.oversample = oversampling;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._shaper.disconnect();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { SignalOperator } from \"./SignalOperator\";\nimport { WaveShaper } from \"./WaveShaper\";\n\n/**\n * AudioToGain converts an input in AudioRange [-1,1] to NormalRange [0,1].\n * See {@link GainToAudio}.\n *\n * @example\n * var a2g = new AudioToGain();\n */\nexport class AudioToGain extends SignalOperator<ToneAudioNodeOptions> {\n\n\tname = \"AudioToGain\";\n\n\t/**\n\t * The node which converts the audio ranges\n\t */\n\tprivate _norm = new WaveShaper({\n\t\tcontext: this.context,\n\t\tmapping: x => (x + 1) / 2,\n\t});\n\n\t/**\n\t * The AudioRange input [-1, 1]\n\t */\n\tinput = this._norm;\n\n\t/**\n\t * The GainRange output [0, 1]\n\t */\n\toutput = this._norm;\n\n\t/**\n\t *  clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._norm.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../core/context/Gain\";\nimport { Param } from \"../core/context/Param\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Signal, SignalOptions } from \"./Signal\";\n\n/**\n * Multiply two incoming signals. Or, if a number is given in the constructor,\n * multiplies the incoming signal by that value.\n *\n * @param {number=} value Constant value to multiple\n * @example\n * const mult = new Multiply();\n * const sigA = new Tone.Signal(3);\n * const sigB = new Tone.Signal(4);\n * sigA.connect(mult);\n * sigB.connect(mult.factor);\n * //output of mult is 12.\n *  @example\n * const mult = new Multiply(10);\n * const sig = new Tone.Signal(2).connect(mult);\n * //the output of mult is 20.\n */\nexport class Multiply extends Signal<number> {\n\n\tname = \"Multiply\";\n\n\t/**\n\t * Indicates if the value should be overridden on connection\n\t */\n\treadonly override = false;\n\n\t/**\n\t * the input gain node\n\t */\n\tprivate _mult: Gain = new Gain({ context : this.context });\n\n\t/**\n\t * The multiplcant input.\n\t */\n\tinput = this._mult;\n\n\t/**\n\t * The product of the input and {@link factor}\n\t */\n\toutput = this._mult;\n\n\t/**\n\t * The multiplication factor. Can be set directly or a signal can be connected to it.\n\t */\n\tfactor: Param<number>;\n\n\tconstructor(options?: Partial<SignalOptions<number>>);\n\t// tslint:disable-next-line: unified-signatures\n\tconstructor(value?: number);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Multiply.getDefaults(), arguments, [\"value\"])));\n\t\tconst options = optionsFromArguments(Multiply.getDefaults(), arguments, [\"value\"]);\n\n\t\tthis.factor = this._param = this._mult.gain as unknown as Param<number>;\n\t\tthis.factor.setValueAtTime(options.value, 0);\n\t}\n\n\tstatic getDefaults(): SignalOptions<number> {\n\t\treturn Object.assign(Signal.getDefaults(), {\n\t\t\tvalue: 0,\n\t\t});\n\t}\n\n\t/**\n\t *  clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._mult.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { Cents, Degrees, Frequency, Positive, Seconds, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { AudioToGain } from \"../../signal/AudioToGain\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { AMConstructorOptions, AMOscillatorOptions,\n\tNonCustomOscillatorType, ToneOscillatorInterface,\n\tToneOscillatorType } from \"./OscillatorInterface\";\n\n/**\n * An amplitude modulated oscillator node. It is implemented with\n * two oscillators, one which modulators the other's amplitude\n * through a gain node.\n * ```\n *    +-------------+       +----------+\n *    | Carrier Osc +>------> GainNode |\n *    +-------------+       |          +--->Output\n *                      +---> gain     |\n * +---------------+    |   +----------+\n * | Modulator Osc +>---+\n * +---------------+\n * ```\n *\n * @param frequency The starting frequency of the oscillator.\n * @param type The type of the carrier oscillator.\n * @param modulationType The type of the modulator oscillator.\n * @example\n * //a sine oscillator frequency-modulated by a square wave\n * var fmOsc = new AMOscillator(\"Ab3\", \"sine\", \"square\").toDestination().start();\n */\nexport class AMOscillator extends Source<AMOscillatorOptions> implements ToneOscillatorInterface {\n\n\tname = \"AMOscillator\";\n\n\t/**\n\t *  The carrier oscillator\n\t */\n\tprivate _carrier: Oscillator = new Oscillator({context : this.context });\n\n\t/**\n\t *  The oscillator's frequency\n\t */\n\treadonly frequency: Signal<Frequency> = this._carrier.frequency;\n\n\t/**\n\t *  The detune control signal.\n\t */\n\treadonly detune: Signal<Cents> = this._carrier.detune;\n\n\t/**\n\t *  The modulating oscillator\n\t */\n\tprivate _modulator = new Oscillator({ context : this.context });\n\n\t/**\n\t *  convert the -1,1 output to 0,1\n\t */\n\tprivate _modulationScale = new AudioToGain({ context: this.context });\n\n\t/**\n\t *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators.\n\t *  A harmonicity of 1 gives both oscillators the same frequency.\n\t *  Harmonicity = 2 means a change of an octave.\n\t *  @example\n\t * //pitch the modulator an octave below carrier\n\t * synth.harmonicity.value = 0.5;\n\t */\n\treadonly harmonicity: Signal<Positive> = new Multiply({\n\t\tcontext: this.context,\n\t\tunits: \"positive\",\n\t});\n\n\t/**\n\t *  the node where the modulation happens\n\t */\n\tprivate _modulationNode = new Gain({\n\t\tcontext: this.context,\n\t});\n\n\tconstructor(options?: Partial<AMConstructorOptions>);\n\tconstructor(frequency?: Frequency, type?: ToneOscillatorType, modulationType?: ToneOscillatorType);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(AMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]));\n\t\tconst options = optionsFromArguments(AMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]);\n\n\t\tthis._carrier.type = options.type;\n\t\tthis._modulator.type = options.modulationType;\n\t\tthis.frequency.setValueAtTime(options.frequency, 0);\n\t\tthis.detune.setValueAtTime(options.detune, 0);\n\t\tthis.harmonicity.setValueAtTime(options.harmonicity, 0);\n\n\t\t// connections\n\t\tthis.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t\tthis._modulator.chain(this._modulationScale, this._modulationNode.gain);\n\t\tthis._carrier.chain(this._modulationNode, this.output);\n\n\t\tthis.phase = options.phase;\n\n\t\treadOnly(this, [\"frequency\", \"detune\", \"harmonicity\"]);\n\t}\n\n\tstatic getDefaults(): AMOscillatorOptions {\n\t\treturn Object.assign(Oscillator.getDefaults(), {\n\t\t\tharmonicity: 1,\n\t\t\tmodulationType: \"square\" as NonCustomOscillatorType,\n\t\t});\n\t}\n\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _start(time: Seconds): void {\n\t\tthis._modulator.start(time);\n\t\tthis._carrier.start(time);\n\t}\n\n\t/**\n\t *  stop the oscillator\n\t */\n\tprotected _stop(time: Seconds): void {\n\t\tthis._modulator.stop(time);\n\t\tthis._carrier.stop(time);\n\t}\n\n\t/**\n\t *  restart the oscillator\n\t */\n\trestart(time?: Time): this {\n\t\tthis._modulator.restart(time);\n\t\tthis._carrier.restart(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The type of the carrier oscillator\n\t */\n\tget type(): ToneOscillatorType {\n\t\treturn this._carrier.type;\n\t}\n\tset type(type: ToneOscillatorType) {\n\t\tthis._carrier.type = type;\n\t}\n\n\t/**\n\t * The oscillator type without the partialsCount appended to the end\n\t * @example\n\t * osc.type = 'sine2'\n\t * osc.baseType //'sine'\n\t * osc.partialCount = 2\n\t */\n\tget baseType(): OscillatorType {\n\t\treturn this._carrier.baseType;\n\t}\n\tset baseType(baseType: OscillatorType) {\n\t\tthis._carrier.baseType = baseType;\n\t}\n\n\t/**\n\t * 'partialCount' offers an alternative way to set the number of used partials.\n\t * When partialCount is 0, the maximum number of partials are used when representing\n\t * the waveform using the periodicWave. When 'partials' is set, this value is\n\t * not settable, but equals the length of the partials array.\n\t */\n\tget partialCount(): number {\n\t\treturn this._carrier.partialCount;\n\t}\n\n\tset partialCount(partialCount: number) {\n\t\tthis._carrier.partialCount = partialCount;\n\t}\n\n\t/**\n\t * The type of the modulator oscillator\n\t */\n\tget modulationType(): ToneOscillatorType {\n\t\treturn this._modulator.type;\n\t}\n\n\tset modulationType(type: ToneOscillatorType) {\n\t\tthis._modulator.type = type;\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._carrier.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._carrier.phase = phase;\n\t\tthis._modulator.phase = phase;\n\t}\n\n\t/**\n\t * The partials of the carrier waveform. A partial represents\n\t * the amplitude at a harmonic. The first harmonic is the\n\t * fundamental frequency, the second is the octave and so on\n\t * following the harmonic series.\n\t * Setting this value will automatically set the type to \"custom\".\n\t * The value is an empty array when the type is not \"custom\".\n\t * @example\n\t * osc.partials = [1, 0.2, 0.01];\n\t */\n\tget partials(): number[] {\n\t\treturn this._carrier.partials;\n\t}\n\tset partials(partials: number[]) {\n\t\tthis._carrier.partials = partials;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\tthis.harmonicity.dispose();\n\t\tthis._carrier.dispose();\n\t\tthis._modulator.dispose();\n\t\tthis._modulationNode.dispose();\n\t\tthis._modulationScale.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { AudioRange, Cents, Degrees, Frequency, Positive, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { FMConstructorOptions, FMOscillatorOptions,\n\tNonCustomOscillatorType, ToneOscillatorInterface, ToneOscillatorType } from \"./OscillatorInterface\";\n\n/**\n * FMOscillator implements a frequency modulation synthesis\n * ```\n *                                              +-------------+\n * +---------------+        +-------------+     | Carrier Osc |\n * | Modulator Osc +>-------> GainNode    |     |             +--->Output\n * +---------------+        |             +>----> frequency   |\n *                       +--> gain        |     +-------------+\n *                       |  +-------------+\n * +-----------------+   |\n * | modulationIndex +>--+\n * +-----------------+\n * ```\n *\n * @param frequency The starting frequency of the oscillator.\n * @param type The type of the carrier oscillator.\n * @param modulationType The type of the modulator oscillator.\n * @example\n * //a sine oscillator frequency-modulated by a square wave\n * var fmOsc = new FMOscillator(\"Ab3\", \"sine\", \"square\").toDestination().start();\n */\nexport class FMOscillator extends Source<FMOscillatorOptions> implements ToneOscillatorInterface {\n\n\tname = \"FMOscillator\";\n\n\t/**\n\t *  The carrier oscillator\n\t */\n\tprivate _carrier: Oscillator = new Oscillator({\n\t\tcontext : this.context,\n\t\tfrequency: 0,\n\t});\n\n\t/**\n\t *  The oscillator's frequency\n\t */\n\treadonly frequency: Signal<Frequency> = new Signal({\n\t\tcontext: this.context,\n\t\tunits: \"frequency\",\n\t});\n\n\t/**\n\t *  The detune control signal.\n\t */\n\treadonly detune: Signal<Cents> = this._carrier.detune;\n\n\t/**\n\t *  The modulating oscillator\n\t */\n\tprivate _modulator = new Oscillator({ context : this.context });\n\n\t/**\n\t *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators.\n\t *  A harmonicity of 1 gives both oscillators the same frequency.\n\t *  Harmonicity = 2 means a change of an octave.\n\t *  @example\n\t * //pitch the modulator an octave below carrier\n\t * synth.harmonicity.value = 0.5;\n\t */\n\treadonly harmonicity: Signal<Positive> = new Multiply({\n\t\tcontext: this.context,\n\t\tunits: \"positive\",\n\t});\n\n\t/**\n\t *  The modulation index which is in essence the depth or amount of the modulation. In other terms it is the\n\t *  ratio of the frequency of the modulating signal (mf) to the amplitude of the\n\t *  modulating signal (ma) -- as in ma/mf.\n\t */\n\treadonly modulationIndex: Signal<Positive> = new Multiply({\n\t\tcontext: this.context,\n\t\tunits: \"positive\",\n\t});\n\n\t/**\n\t *  the node where the modulation happens\n\t */\n\tprivate _modulationNode = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\n\tconstructor(options?: Partial<FMConstructorOptions>);\n\tconstructor(frequency?: Frequency, type?: ToneOscillatorType, modulationType?: ToneOscillatorType);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(FMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]));\n\t\tconst options = optionsFromArguments(FMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]);\n\n\t\tthis._carrier.type = options.type;\n\t\tthis._modulator.type = options.modulationType;\n\t\tthis.frequency.setValueAtTime(options.frequency, 0);\n\t\tthis.detune.setValueAtTime(options.detune, 0);\n\t\tthis.harmonicity.setValueAtTime(options.harmonicity, 0);\n\t\tthis.modulationIndex.setValueAtTime(options.modulationIndex, 0);\n\n\t\t// connections\n\t\tthis.frequency.connect(this._carrier.frequency);\n\t\tthis.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t\tthis.frequency.chain(this.modulationIndex, this._modulationNode);\n\t\tthis._modulator.connect(this._modulationNode.gain);\n\t\tthis._modulationNode.connect(this._carrier.frequency);\n\t\tthis._carrier.connect(this.output);\n\t\tthis.detune.connect(this._modulator.detune);\n\n\t\tthis.phase = options.phase;\n\n\t\treadOnly(this, [\"modulationIndex\", \"frequency\", \"detune\", \"harmonicity\"]);\n\t}\n\n\tstatic getDefaults(): FMOscillatorOptions {\n\t\treturn Object.assign(Oscillator.getDefaults(), {\n\t\t\tharmonicity: 1,\n\t\t\tmodulationIndex: 2,\n\t\t\tmodulationType: \"square\" as NonCustomOscillatorType,\n\t\t});\n\t}\n\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\tthis._modulator.start(time);\n\t\tthis._carrier.start(time);\n\t}\n\n\t/**\n\t *  stop the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\tthis._modulator.stop(time);\n\t\tthis._carrier.stop(time);\n\t}\n\n\t/**\n\t *  stop and restart the oscillator\n\t */\n\trestart(time?: Time): this {\n\t\tthis._modulator.restart(time);\n\t\tthis._carrier.restart(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The type of the carrier oscillator\n\t */\n\tget type(): ToneOscillatorType {\n\t\treturn this._carrier.type;\n\t}\n\tset type(type: ToneOscillatorType) {\n\t\tthis._carrier.type = type;\n\t}\n\n\t/**\n\t * The oscillator type without the partialsCount appended to the end\n\t * @example\n\t * osc.type = 'sine2'\n\t * osc.baseType //'sine'\n\t * osc.partialCount = 2\n\t */\n\tget baseType(): OscillatorType {\n\t\treturn this._carrier.baseType;\n\t}\n\tset baseType(baseType: OscillatorType) {\n\t\tthis._carrier.baseType = baseType;\n\t}\n\n\t/**\n\t * 'partialCount' offers an alternative way to set the number of used partials.\n\t * When partialCount is 0, the maximum number of partials are used when representing\n\t * the waveform using the periodicWave. When 'partials' is set, this value is\n\t * not settable, but equals the length of the partials array.\n\t */\n\tget partialCount(): number {\n\t\treturn this._carrier.partialCount;\n\t}\n\tset partialCount(partialCount: number) {\n\t\tthis._carrier.partialCount = partialCount;\n\t}\n\n\t/**\n\t * The type of the modulator oscillator\n\t */\n\tget modulationType(): ToneOscillatorType {\n\t\treturn this._modulator.type;\n\t}\n\tset modulationType(type: ToneOscillatorType) {\n\t\tthis._modulator.type = type;\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._carrier.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._carrier.phase = phase;\n\t\tthis._modulator.phase = phase;\n\t}\n\n\t/**\n\t * The partials of the carrier waveform. A partial represents\n\t * the amplitude at a harmonic. The first harmonic is the\n\t * fundamental frequency, the second is the octave and so on\n\t * following the harmonic series.\n\t * Setting this value will automatically set the type to \"custom\".\n\t * The value is an empty array when the type is not \"custom\".\n\t * @example\n\t * osc.partials = [1, 0.2, 0.01];\n\t */\n\tget partials(): number[] {\n\t\treturn this._carrier.partials;\n\t}\n\tset partials(partials: number[]) {\n\t\tthis._carrier.partials = partials;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.harmonicity.dispose();\n\t\tthis._carrier.dispose();\n\t\tthis._modulator.dispose();\n\t\tthis._modulationNode.dispose();\n\t\tthis.modulationIndex.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { AudioRange, Cents, Degrees, Frequency, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { WaveShaper } from \"../../signal/WaveShaper\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { PulseOscillatorOptions, ToneOscillatorInterface } from \"./OscillatorInterface\";\n\n/**\n * PulseOscillator is an oscillator with control over pulse width,\n * also known as the duty cycle. At 50% duty cycle (width = 0) the wave is\n * a square wave.\n * [Read more](https://wigglewave.wordpress.com/2014/08/16/pulse-waveforms-and-harmonics/).\n * ```\n *    width = -0.25        width = 0.0          width = 0.25\n *\n *   +-----+            +-------+       +    +-------+     +-+\n *   |     |            |       |       |            |     |\n *   |     |            |       |       |            |     |\n * +-+     +-------+    +       +-------+            +-----+\n *\n *\n *    width = -0.5                              width = 0.5\n *\n *     +---+                                 +-------+   +---+\n *     |   |                                         |   |\n *     |   |                                         |   |\n * +---+   +-------+                                 +---+\n *\n *\n *    width = -0.75                             width = 0.75\n *\n *       +-+                                 +-------+ +-----+\n *       | |                                         | |\n *       | |                                         | |\n * +-----+ +-------+                                 +-+\n * ```\n * @param frequency The frequency of the oscillator\n * @param width The width of the pulse\n * @example\n * var pulse = new PulseOscillator(\"E5\", 0.4).toDestination().start();\n */\nexport class PulseOscillator extends Source<PulseOscillatorOptions> implements ToneOscillatorInterface {\n\n\tname = \"PulseOscillator\";\n\n\t/**\n\t *  The width of the pulse.\n\t */\n\twidth: Signal<AudioRange> = new Signal<AudioRange>({\n\t\tcontext: this.context,\n\t\tunits: \"audioRange\",\n\t});\n\n\t/**\n\t *  gate the width amount\n\t */\n\tprivate _widthGate: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\n\t/**\n\t *  the sawtooth oscillator\n\t */\n\tprivate _sawtooth: Oscillator = new Oscillator({\n\t\tcontext: this.context,\n\t\ttype : \"sawtooth\",\n\t});\n\n\t/**\n\t *  The frequency control.\n\t */\n\tfrequency: Signal<Frequency> = this._sawtooth.frequency;\n\n\t/**\n\t *  The detune in cents.\n\t */\n\tdetune: Signal<Cents> = this._sawtooth.detune;\n\n\t/**\n\t *  Threshold the signal to turn it into a square\n\t */\n\tprivate _thresh = new WaveShaper({\n\t\tcontext: this.context,\n\t\tmapping: val => val <= 0 ? -1 : 1,\n\t});\n\n\tconstructor(options?: Partial<PulseOscillatorOptions>);\n\tconstructor(frequency?: Frequency, width?: AudioRange);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(PulseOscillator.getDefaults(), arguments, [\"frequency\", \"width\"]));\n\t\tconst options = optionsFromArguments(PulseOscillator.getDefaults(), arguments, [\"frequency\", \"width\"]);\n\n\t\tthis.width.setValueAtTime(options.width, 0);\n\t\tthis._sawtooth.frequency.setValueAtTime(options.frequency, 0);\n\t\tthis._sawtooth.detune.setValueAtTime(options.detune, 0);\n\t\tthis._sawtooth.phase = options.phase;\n\n\t\t// connections\n\t\tthis._sawtooth.chain(this._thresh, this.output);\n\t\tthis.width.chain(this._widthGate, this._thresh);\n\t\treadOnly(this, [\"width\", \"frequency\", \"detune\"]);\n\t}\n\n\tstatic getDefaults(): PulseOscillatorOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tfrequency: 440,\n\t\t\tphase: 0,\n\t\t\ttype: \"pulse\" as \"pulse\",\n\t\t\twidth: 0.2,\n\t\t});\n\t}\n\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._sawtooth.start(time);\n\t\tthis._widthGate.gain.setValueAtTime(1, time);\n\t}\n\n\t/**\n\t *  stop the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._sawtooth.stop(time);\n\t\t// the width is still connected to the output.\n\t\t// that needs to be stopped also\n\t\tthis._widthGate.gain.cancelScheduledValues(time);\n\t\tthis._widthGate.gain.setValueAtTime(0, time);\n\t}\n\n\t/**\n\t *  Restart the oscillator\n\t */\n\trestart(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._sawtooth.restart(computedTime);\n\t\tthis._widthGate.gain.cancelScheduledValues(computedTime);\n\t\tthis._widthGate.gain.setValueAtTime(1, computedTime);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._sawtooth.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._sawtooth.phase = phase;\n\t}\n\n\t/**\n\t * The type of the oscillator. Always returns \"pulse\".\n\t */\n\tget type(): \"pulse\" {\n\t\treturn \"pulse\";\n\t}\n\n\t/**\n\t * The baseType of the oscillator. Always returns \"pulse\".\n\t */\n\tget baseType(): \"pulse\" {\n\t\treturn \"pulse\";\n\t}\n\n\t/**\n\t * The partials of the waveform. Cannot set partials for this waveform type\n\t */\n\tget partials(): number[] {\n\t\treturn [];\n\t}\n\n\t/**\n\t * No partials for this waveform type.\n\t */\n\tget partialCount(): number {\n\t\treturn 0;\n\t}\n\n\t/**\n\t *  Clean up method.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._sawtooth.dispose();\n\t\tthis.width.dispose();\n\t\tthis._widthGate.dispose();\n\t\tthis._thresh.dispose();\n\t\treturn this;\n\t}\n}\n","import { AudioRange, Cents, Degrees, Frequency, Positive, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { AudioToGain } from \"../../signal/AudioToGain\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { FatConstructorOptions, FatOscillatorOptions,\n\tToneOscillatorInterface, ToneOscillatorType } from \"./OscillatorInterface\";\n\n/**\n *  FatOscillator is an array of oscillators with detune spread between the oscillators\n *  @param frequency The oscillator's frequency.\n *  @param type The type of the oscillator.\n *  @param spread The detune spread between the oscillators.\n *  @example\n * var fatOsc = new FatOscillator(\"Ab3\", \"sine\", 40).toDestination().start();\n */\nexport class FatOscillator extends Source<FatOscillatorOptions> implements ToneOscillatorInterface {\n\n\tname = \"FatOscillator\";\n\n\t/**\n\t *  The oscillator's frequency\n\t */\n\treadonly frequency: Signal<Frequency> = new Signal<Cents>({\n\t\tcontext: this.context,\n\t\tunits: \"frequency\",\n\t});\n\n\t/**\n\t *  The detune control signal.\n\t */\n\treadonly detune: Signal<Cents> = new Signal<Cents>({\n\t\tcontext: this.context,\n\t\tunits: \"cents\",\n\t});\n\n\t/**\n\t *  The array of oscillators\n\t */\n\tprivate _oscillators: Oscillator[] = [];\n\n\t/**\n\t *  The total spread of the oscillators\n\t */\n\tprivate _spread: Cents;\n\n\t/**\n\t *  The type of the oscillator\n\t */\n\tprivate _type: ToneOscillatorType;\n\n\t/**\n\t *  The phase of the oscillators\n\t */\n\tprivate _phase: Degrees;\n\n\t/**\n\t *  The partials array\n\t */\n\tprivate _partials: number[];\n\n\t/**\n\t *  The number of partials to use\n\t */\n\tprivate _partialCount: number;\n\n\tconstructor(options?: Partial<FatConstructorOptions>);\n\tconstructor(frequency?: Frequency, type?: ToneOscillatorType, modulationType?: ToneOscillatorType);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(FatOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"spread\"]));\n\t\tconst options = optionsFromArguments(FatOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"spread\"]);\n\n\t\tthis.frequency.setValueAtTime(options.frequency, 0);\n\t\tthis.detune.setValueAtTime(options.detune, 0);\n\n\t\tthis._spread = options.spread;\n\t\tthis._type = options.type;\n\t\tthis._phase = options.phase;\n\t\tthis._partials = options.partials;\n\t\tthis._partialCount = options.partialCount;\n\n\t\t// set the count initially\n\t\tthis.count = options.count;\n\n\t\treadOnly(this, [\"frequency\", \"detune\"]);\n\t}\n\n\tstatic getDefaults(): FatOscillatorOptions {\n\t\treturn Object.assign(Oscillator.getDefaults(), {\n\t\t\tcount : 3,\n\t\t\tspread : 20,\n\t\t\ttype : \"sawtooth\",\n\t\t});\n\t}\n\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._forEach(osc => osc.start(time));\n\t}\n\n\t/**\n\t *  stop the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._forEach(osc => osc.stop(time));\n\t}\n\n\t/**\n\t *  restart the oscillator\n\t */\n\trestart(time): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis._forEach(osc => osc.restart(time));\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over all of the oscillators\n\t */\n\tprivate _forEach(iterator: (osc: Oscillator, index: number) => void): void {\n\t\tfor (let i = 0; i < this._oscillators.length; i++) {\n\t\t\titerator(this._oscillators[i], i);\n\t\t}\n\t}\n\n\t/**\n\t * The type of the oscillator\n\t */\n\tget type(): ToneOscillatorType {\n\t\treturn this._type;\n\t}\n\n\tset type(type: ToneOscillatorType) {\n\t\tthis._type = type;\n\t\tthis._forEach(osc => osc.type = type);\n\t}\n\n\t/**\n\t * The detune spread between the oscillators. If \"count\" is\n\t * set to 3 oscillators and the \"spread\" is set to 40,\n\t * the three oscillators would be detuned like this: [-20, 0, 20]\n\t * for a total detune spread of 40 cents.\n\t */\n\tget spread(): Cents {\n\t\treturn this._spread;\n\t}\n\n\tset spread(spread: Cents) {\n\t\tthis._spread = spread;\n\t\tif (this._oscillators.length > 1) {\n\t\t\tconst start = -spread / 2;\n\t\t\tconst step = spread / (this._oscillators.length - 1);\n\t\t\tthis._forEach((osc, i) => osc.detune.value = start + step * i);\n\t\t}\n\t}\n\n\t/**\n\t * The number of detuned oscillators. Should be an integer greater than 1.\n\t */\n\tget count(): number {\n\t\treturn this._oscillators.length;\n\t}\n\n\tset count(count: number) {\n\t\tcount = Math.max(count, 1);\n\t\tif (this._oscillators.length !== count) {\n\t\t\t// dispose the previous oscillators\n\t\t\tthis._forEach(osc => osc.dispose());\n\t\t\tthis._oscillators = [];\n\t\t\tfor (let i = 0; i < count; i++) {\n\t\t\t\tconst osc = new Oscillator({\n\t\t\t\t\tcontext : this.context,\n\t\t\t\t});\n\t\t\t\tif (this.type === \"custom\") {\n\t\t\t\t\tosc.partials = this._partials;\n\t\t\t\t} else {\n\t\t\t\t\tosc.type = this._type;\n\t\t\t\t}\n\t\t\t\tosc.partialCount = this._partialCount;\n\t\t\t\tosc.phase = this._phase + (i / count) * 360;\n\t\t\t\tosc.volume.value = -6 - count * 1.1;\n\t\t\t\tthis.frequency.connect(osc.frequency);\n\t\t\t\tthis.detune.connect(osc.detune);\n\t\t\t\tosc.connect(this.output);\n\t\t\t\tthis._oscillators[i] = osc;\n\t\t\t}\n\t\t\t// set the spread\n\t\t\tthis.spread = this._spread;\n\t\t\tif (this.state === \"started\") {\n\t\t\t\tthis._forEach(osc => osc.start());\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._phase = phase;\n\t\tthis._forEach(osc => osc.phase = phase);\n\t}\n\n\t/**\n\t * The oscillator type without the partialsCount appended to the end\n\t * @example\n\t * osc.type = 'sine2'\n\t * osc.baseType //'sine'\n\t * osc.partialCount = 2\n\t */\n\tget baseType(): OscillatorType {\n\t\treturn this._oscillators[0].baseType;\n\t}\n\tset baseType(baseType: OscillatorType) {\n\t\tthis._forEach(osc => osc.baseType = baseType);\n\t\tthis._type = this._oscillators[0].type;\n\t}\n\n\t/**\n\t * The partials of the carrier waveform. A partial represents\n\t * the amplitude at a harmonic. The first harmonic is the\n\t * fundamental frequency, the second is the octave and so on\n\t * following the harmonic series.\n\t * Setting this value will automatically set the type to \"custom\".\n\t * The value is an empty array when the type is not \"custom\".\n\t * @memberOf FatOscillator#\n\t * @type {Array}\n\t * @name partials\n\t * @example\n\t * osc.partials = [1, 0.2, 0.01];\n\t */\n\tget partials(): number[] {\n\t\treturn this._oscillators[0].partials;\n\t}\n\tset partials(partials: number[]) {\n\t\tthis._partials = partials;\n\t\tif (partials.length) {\n\t\t\tthis._type = \"custom\";\n\t\t\tthis._forEach(osc => osc.partials = partials);\n\t\t}\n\t}\n\n\t/**\n\t * 'partialCount' offers an alternative way to set the number of used partials.\n\t * When partialCount is 0, the maximum number of partials are used when representing\n\t * the waveform using the periodicWave. When 'partials' is set, this value is\n\t * not settable, but equals the length of the partials array.\n\t * @memberOf FatOscillator#\n\t * @type {Number}\n\t * @name partialCount\n\t */\n\tget partialCount(): number {\n\t\treturn this._oscillators[0].partialCount;\n\t}\n\tset partialCount(partialCount: number) {\n\t\tthis._partialCount = partialCount;\n\t\tthis._forEach(osc => osc.partialCount = partialCount);\n\t\tthis._type = this._oscillators[0].type;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\tthis._forEach(osc => osc.dispose());\n\t\treturn this;\n\t}\n}\n","import { Cents, Degrees, Frequency, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { PWMOscillatorOptions, ToneOscillatorInterface } from \"./OscillatorInterface\";\nimport { PulseOscillator } from \"./PulseOscillator\";\n\n/**\n * PWMOscillator modulates the width of a Tone.PulseOscillator\n * at the modulationFrequency. This has the effect of continuously\n * changing the timbre of the oscillator by altering the harmonics\n * generated.\n *\n * @param {Frequency} frequency The starting frequency of the oscillator.\n * @param {Frequency} modulationFrequency The modulation frequency of the width of the pulse.\n * @example\n *  var pwm = new PWMOscillator(\"Ab3\", 0.3).toDestination().start();\n */\nexport class PWMOscillator extends Source<PWMOscillatorOptions> implements ToneOscillatorInterface {\n\n\treadonly name = \"PWMOscillator\";\n\n\treadonly sourceType = \"pwm\";\n\n\t/**\n\t *  the pulse oscillator\n\t */\n\tprivate _pulse: PulseOscillator = new PulseOscillator({ context: this.context });\n\t/**\n\t *  the modulator\n\t *  @type {Tone.Oscillator}\n\t *  @private\n\t */\n\tprivate _modulator: Oscillator = new Oscillator({ context: this.context });\n\n\t/**\n\t *  Scale the oscillator so it doesn't go silent\n\t *  at the extreme values.\n\t */\n\tprivate _scale: Multiply = new Multiply({\n\t\tcontext: this.context,\n\t\tvalue: 2,\n\t});\n\n\t/**\n\t *  The frequency control.\n\t */\n\treadonly frequency: Signal<Frequency> = this._modulator.frequency;\n\n\t/**\n\t *  The detune of the oscillator.\n\t */\n\treadonly detune: Signal<Cents> = this._modulator.detune;\n\n\t/**\n\t *  The modulation rate of the oscillator.\n\t */\n\treadonly modulationFrequency: Signal<Frequency> = this._pulse.frequency;\n\n\tconstructor(options?: Partial<PWMOscillatorOptions>);\n\tconstructor(frequency?: Frequency, modulationFrequency?: Frequency);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(PWMOscillator.getDefaults(), arguments, [\"frequency\", \"modulationFrequency\"]));\n\t\tconst options = optionsFromArguments(PWMOscillator.getDefaults(), arguments, [\"frequency\", \"modulationFrequency\"]);\n\n\t\t// change the pulse oscillator type\n\t\t// @ts-ignore\n\t\tthis._pulse._sawtooth.type = \"sine\";\n\n\t\tthis._pulse.frequency.setValueAtTime(options.modulationFrequency, 0);\n\t\tthis._modulator.frequency.setValueAtTime(options.frequency, 0);\n\t\tthis._modulator.detune.setValueAtTime(options.detune, 0);\n\t\tthis._modulator.phase = options.phase;\n\n\t\t// connections\n\t\tthis._modulator.chain(this._scale, this._pulse.width);\n\t\tthis._pulse.connect(this.output);\n\t\treadOnly(this, [\"modulationFrequency\", \"frequency\", \"detune\"]);\n\t}\n\n\tstatic getDefaults(): PWMOscillatorOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tfrequency: 440,\n\t\t\tmodulationFrequency: 0.4,\n\t\t\tphase: 0,\n\t\t\ttype: \"pwm\" as \"pwm\",\n\t\t});\n\t}\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._modulator.start(time);\n\t\tthis._pulse.start(time);\n\t}\n\n\t/**\n\t *  stop the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._modulator.stop(time);\n\t\tthis._pulse.stop(time);\n\t}\n\n\t/**\n\t *  restart the oscillator\n\t */\n\trestart(time?: Time): this {\n\t\tthis._modulator.restart(time);\n\t\tthis._pulse.restart(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The type of the oscillator. Always returns \"pwm\".\n\t */\n\tget type(): \"pwm\" {\n\t\treturn \"pwm\";\n\t}\n\n\t/**\n\t * The baseType of the oscillator. Always returns \"pwm\".\n\t */\n\tget baseType(): \"pwm\" {\n\t\treturn \"pwm\";\n\t}\n\n\t/**\n\t * The partials of the waveform. Cannot set partials for this waveform type\n\t */\n\tget partials(): number[] {\n\t\treturn [];\n\t}\n\n\t/**\n\t * No partials for this waveform type.\n\t */\n\tget partialCount(): number {\n\t\treturn 0;\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._modulator.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._modulator.phase = phase;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._pulse.dispose();\n\t\tthis._scale.dispose();\n\t\tthis._modulator.dispose();\n\t\treturn this;\n\t}\n}\n","import { AudioRange, Cents, Degrees, Frequency, Positive, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { isNumber, isString } from \"../../core/util/TypeCheck\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { AMOscillator } from \"./AMOscillator\";\nimport { FatOscillator } from \"./FatOscillator\";\nimport { FMOscillator } from \"./FMOscillator\";\nimport { Oscillator } from \"./Oscillator\";\nimport { AMOscillatorOptions, FatOscillatorOptions,\n\tFMOscillatorOptions, OmniOscillatorConstructorOptions,\n\tOmniOscillatorOptions, OmniOscillatorType,\n\tPulseOscillatorOptions, PWMOscillatorOptions,\n\tToneOscillatorInterface, ToneOscillatorOptions, ToneOscillatorType } from \"./OscillatorInterface\";\nimport { PulseOscillator } from \"./PulseOscillator\";\nimport { PWMOscillator } from \"./PWMOscillator\";\n\n/**\n * All of the oscillator types that OmniOscillator can take on\n */\ntype AnyOscillator = Oscillator | PWMOscillator | PulseOscillator | FatOscillator | AMOscillator | FMOscillator;\n\n/**\n * The constructor of each of the OmniOscillator types\n */\ntype TypeofAnyOscillator = typeof Oscillator | typeof PWMOscillator |\n\ttypeof PulseOscillator | typeof FatOscillator |\n\ttypeof AMOscillator | typeof FMOscillator;\n\n/**\n * Select the Oscillator's Options depending on the generic type.\n */\ntype ConditionalOptions<Osc extends AnyOscillator> =\n\tOsc extends FMOscillator ? FMOscillatorOptions :\n\tOsc extends Oscillator ? ToneOscillatorOptions :\n\tOsc extends AMOscillator ? AMOscillatorOptions :\n\tOsc extends FatOscillator ? FatOscillatorOptions :\n\tOsc extends PulseOscillator ? PulseOscillatorOptions :\n\tOsc extends PWMOscillator ? PWMOscillatorOptions :\n\tToneOscillatorOptions;\n\n/**\n * The aggregate options of all of the oscillators\n */\n// export type OmniOscillatorOptions = ConditionalOptions<AnyOscillator>;\n\n/**\n * All of the Oscillator constructor types mapped to their name.\n */\ninterface OmniOscillatorSource {\n\t\"fm\": FMOscillator;\n\t\"am\": AMOscillator;\n\t\"pwm\": PWMOscillator;\n\t\"pulse\": PulseOscillator;\n\t\"oscillator\": Oscillator;\n\t\"fat\": FatOscillator;\n}\n\n/**\n * The available oscillator types.\n */\nexport type OmniOscSourceType = keyof OmniOscillatorSource;\n\n// Conditional Types\ntype IsAmOrFmOscillator<Osc, Ret> = Osc extends AMOscillator ? Ret : Osc extends FMOscillator ? Ret : undefined;\ntype IsFatOscillator<Osc, Ret> = Osc extends FatOscillator ? Ret : undefined;\ntype IsPWMOscillator<Osc, Ret> = Osc extends PWMOscillator ? Ret : undefined;\ntype IsPulseOscillator<Osc, Ret> = Osc extends PulseOscillator ? Ret : undefined;\ntype IsFMOscillator<Osc, Ret> = Osc extends FMOscillator ? Ret : undefined;\n\n// tslint:disable-next-line: variable-name\nconst OmniOscillatorSourceMap: {\n\t[key in OmniOscSourceType] : TypeofAnyOscillator\n} = {\n\tam: AMOscillator,\n\tfat: FatOscillator,\n\tfm: FMOscillator,\n\toscillator: Oscillator,\n\tpulse: PulseOscillator,\n\tpwm: PWMOscillator,\n};\n\n/**\n * OmniOscillator aggregates Tone.Oscillator, Tone.PulseOscillator,\n * Tone.PWMOscillator, Tone.FMOscillator, Tone.AMOscillator, and Tone.FatOscillator\n * into one class. The oscillator class can be changed by setting the `type`.\n * `omniOsc.type = \"pwm\"` will set it to the Tone.PWMOscillator. Prefixing\n * any of the basic types (\"sine\", \"square4\", etc.) with \"fm\", \"am\", or \"fat\"\n * will use the FMOscillator, AMOscillator or FatOscillator respectively.\n * For example: `omniOsc.type = \"fatsawtooth\"` will create set the oscillator\n * to a FatOscillator of type \"sawtooth\".\n *\n * @param frequency The initial frequency of the oscillator.\n * @param type The type of the oscillator.\n * @example\n * var omniOsc = new OmniOscillator(\"C#4\", \"pwm\");\n */\nexport class OmniOscillator<OscType extends AnyOscillator>\nextends Source<OmniOscillatorConstructorOptions>\nimplements Omit<ToneOscillatorInterface, \"type\"> {\n\n\tname = \"OmniOscillator\";\n\n\t/**\n\t *  The frequency control.\n\t */\n\treadonly frequency: Signal<Frequency> = new Signal({\n\t\tcontext: this.context,\n\t\tunits: \"frequency\",\n\t});\n\n\t/**\n\t *  The detune control.\n\t */\n\treadonly detune: Signal<Cents> = new Signal<Cents>({\n\t\tcontext: this.context,\n\t\tunits: \"cents\",\n\t});\n\n\t/**\n\t * The oscillator that can switch types\n\t */\n\tprivate _oscillator!: AnyOscillator;\n\n\t/**\n\t *  the type of the oscillator source\n\t */\n\tprivate _sourceType!: OmniOscSourceType;\n\n\tconstructor(options?: Partial<OmniOscillatorConstructorOptions>);\n\tconstructor(frequency?: Frequency, type?: OmniOscillatorType);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(OmniOscillator.getDefaults(), arguments, [\"frequency\", \"type\"]));\n\t\tconst options = optionsFromArguments(OmniOscillator.getDefaults(), arguments, [\"frequency\", \"type\"]);\n\n\t\tthis.frequency.setValueAtTime(options.frequency, 0);\n\t\tthis.detune.setValueAtTime(options.detune, 0);\n\t\treadOnly(this, [\"frequency\", \"detune\"]);\n\n\t\t// set the options\n\t\tthis.set(options);\n\t}\n\n\tstatic getDefaults(): OmniOscillatorOptions {\n\t\treturn Object.assign(\n\t\t\tOscillator.getDefaults(),\n\t\t\tFMOscillator.getDefaults(),\n\t\t\tAMOscillator.getDefaults(),\n\t\t\tFatOscillator.getDefaults(),\n\t\t\tPulseOscillator.getDefaults(),\n\t\t\tPWMOscillator.getDefaults(),\n\t\t);\n\t\t// return Oscillator.getDefaults() as OmniOscillatorConstructorOptions;\n\t}\n\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\tthis._oscillator.start(time);\n\t}\n\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\tthis._oscillator.stop(time);\n\t}\n\n\trestart(time?: Time): this {\n\t\tthis._oscillator.restart(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The type of the oscillator. Can be any of the basic types: sine, square, triangle, sawtooth. Or\n\t * prefix the basic types with \"fm\", \"am\", or \"fat\" to use the FMOscillator, AMOscillator or FatOscillator\n\t * types. The oscillator could also be set to \"pwm\" or \"pulse\". All of the parameters of the\n\t * oscillator's class are accessible when the oscillator is set to that type, but throws an error\n\t * when it's not.\n\t * @example\n\t * omniOsc.type = \"pwm\";\n\t * //modulationFrequency is parameter which is available\n\t * //only when the type is \"pwm\".\n\t * omniOsc.modulationFrequency.value = 0.5;\n\t * @example\n\t * //an square wave frequency modulated by a sawtooth\n\t * omniOsc.type = \"fmsquare\";\n\t * omniOsc.modulationType = \"sawtooth\";\n\t */\n\tget type(): OmniOscillatorType {\n\t\tlet prefix = \"\";\n\t\tif ([\"am\", \"fm\", \"fat\"].some(p => this._sourceType === p)) {\n\t\t\tprefix = this._sourceType;\n\t\t}\n\t\treturn prefix + this._oscillator.type as OmniOscillatorType;\n\t}\n\tset type(type) {\n\t\tif (type.substr(0, 2) === \"fm\") {\n\t\t\tthis._createNewOscillator(\"fm\");\n\t\t\tthis._oscillator = this._oscillator as FMOscillator;\n\t\t\tthis._oscillator.type = type.substr(2) as ToneOscillatorType;\n\t\t} else if (type.substr(0, 2) === \"am\") {\n\t\t\tthis._createNewOscillator(\"am\");\n\t\t\tthis._oscillator = this._oscillator as AMOscillator;\n\t\t\tthis._oscillator.type = type.substr(2)  as ToneOscillatorType;\n\t\t} else if (type.substr(0, 3) === \"fat\") {\n\t\t\tthis._createNewOscillator(\"fat\");\n\t\t\tthis._oscillator = this._oscillator as FatOscillator;\n\t\t\tthis._oscillator.type = type.substr(3)  as ToneOscillatorType;\n\t\t} else if (type === \"pwm\") {\n\t\t\tthis._createNewOscillator(\"pwm\");\n\t\t\tthis._oscillator = this._oscillator as PWMOscillator;\n\t\t} else if (type === \"pulse\") {\n\t\t\tthis._createNewOscillator(\"pulse\");\n\t\t} else {\n\t\t\tthis._createNewOscillator(\"oscillator\");\n\t\t\tthis._oscillator = this._oscillator as Oscillator;\n\t\t\tthis._oscillator.type = (type as ToneOscillatorType);\n\t\t}\n\t}\n\n\t/**\n\t * The partials of the waveform. A partial represents\n\t * the amplitude at a harmonic. The first harmonic is the\n\t * fundamental frequency, the second is the octave and so on\n\t * following the harmonic series.\n\t * Setting this value will automatically set the type to \"custom\".\n\t * The value is an empty array when the type is not \"custom\".\n\t * This is not available on \"pwm\" and \"pulse\" oscillator types.\n\t * @example\n\t * osc.partials = [1, 0.2, 0.01];\n\t */\n\tget partials(): number[] {\n\t\treturn this._oscillator.partials;\n\t}\n\tset partials(partials) {\n\t\tif (!this._getOscType(this._oscillator, \"pulse\") && !this._getOscType(this._oscillator, \"pwm\")) {\n\t\t\tthis._oscillator.partials = partials;\n\t\t}\n\t}\n\n\t/**\n\t * The partial count of the oscillator. This is not available on \"pwm\" and \"pulse\" oscillator types.\n\t * @example\n\t * //set the maximum number of partials\n\t * osc.partialCount = 0;\n\t */\n\tget partialCount(): number {\n\t\treturn this._oscillator.partialCount;\n\t}\n\tset partialCount(partialCount) {\n\t\tif (!this._getOscType(this._oscillator, \"pulse\") && !this._getOscType(this._oscillator, \"pwm\")) {\n\t\t\tthis._oscillator.partialCount = partialCount;\n\t\t}\n\t}\n\n\t/**\n\t * Set the parameters at once. Either pass in an\n\t * object mapping parameters to values, or to set a\n\t * single parameter, by passing in a string and value.\n\t * The last argument is an optional ramp time which\n\t * will ramp any signal values to their destination value\n\t * over the duration of the rampTime.\n\t * @param  params\n\t * @example\n\t * //set values using an object\n\t * filter.set({\n\t * \t\"frequency\" : 300,\n\t * \t\"type\" : \"highpass\"\n\t * });\n\t */\n\tset(props: Partial<OmniOscillatorConstructorOptions>): this {\n\t\t// make sure the type is set first\n\t\tif (Reflect.has(props, \"type\") && props.type) {\n\t\t\tthis.type = props.type;\n\t\t\t// delete props.type;\n\t\t}\n\t\t// then set the rest\n\t\tsuper.set(props);\n\t\treturn this;\n\t}\n\n\tget(): OmniOscillatorConstructorOptions {\n\t\tconst options = this._oscillator.get();\n\t\t// @ts-ignore\n\t\toptions.type = this.type;\n\t\treturn options as OmniOscillatorOptions;\n\t}\n\n\t/**\n\t *  connect the oscillator to the frequency and detune signals\n\t */\n\tprivate _createNewOscillator(oscType: OmniOscSourceType): void {\n\t\tif (oscType !== this._sourceType) {\n\t\t\tthis._sourceType = oscType;\n\t\t\tconst oscConstructor = OmniOscillatorSourceMap[oscType];\n\t\t\t// short delay to avoid clicks on the change\n\t\t\tconst now = this.now();\n\t\t\tif (this._oscillator) {\n\t\t\t\tconst oldOsc = this._oscillator;\n\t\t\t\toldOsc.stop(now);\n\t\t\t\t// dispose the old one\n\t\t\t\tthis.context.setTimeout(() => oldOsc.dispose(), this.blockTime);\n\t\t\t}\n\t\t\t// @ts-ignore\n\t\t\tthis._oscillator = new oscConstructor({\n\t\t\t\tcontext : this.context,\n\t\t\t});\n\t\t\tthis.frequency.connect(this._oscillator.frequency);\n\t\t\tthis.detune.connect(this._oscillator.detune);\n\t\t\tthis._oscillator.connect(this.output);\n\t\t\tif (this.state === \"started\") {\n\t\t\t\tthis._oscillator.start(now);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._oscillator.phase;\n\t}\n\tset phase(phase) {\n\t\tthis._oscillator.phase = phase;\n\t}\n\n\t/**\n\t * The source type of the oscillator.\n\t * @example\n\t * var omniOsc = new OmniOscillator(440, \"fmsquare\");\n\t * omniOsc.sourceType // 'fm'\n\t */\n\tget sourceType(): OmniOscSourceType {\n\t\treturn this._sourceType;\n\t}\n\tset sourceType(sType) {\n\t\t// the basetype defaults to sine\n\t\tlet baseType = \"sine\";\n\t\tif (this._oscillator.type !== \"pwm\" && this._oscillator.type !== \"pulse\") {\n\t\t\tbaseType = this._oscillator.type;\n\t\t}\n\n\t\t// set the type\n\t\tif (sType === \"fm\") {\n\t\t\tthis.type = \"fm\" + baseType as OmniOscillatorType;\n\t\t} else if (sType === \"am\") {\n\t\t\tthis.type = \"am\" + baseType as OmniOscillatorType;\n\t\t} else if (sType === \"fat\") {\n\t\t\tthis.type = \"fat\" + baseType as OmniOscillatorType;\n\t\t} else if (sType === \"oscillator\") {\n\t\t\tthis.type = baseType as OmniOscillatorType;\n\t\t} else if (sType === \"pulse\") {\n\t\t\tthis.type = \"pulse\";\n\t\t} else if (sType === \"pwm\") {\n\t\t\tthis.type = \"pwm\";\n\t\t}\n\t}\n\n\tprivate _getOscType<SourceType extends OmniOscSourceType>(\n\t\tosc: AnyOscillator,\n\t\tsourceType: SourceType,\n\t): osc is OmniOscillatorSource[SourceType] {\n\t\treturn osc instanceof OmniOscillatorSourceMap[sourceType];\n\t}\n\n\t/**\n\t * The base type of the oscillator.\n\t * @example\n\t * var omniOsc = new OmniOscillator(440, \"fmsquare4\");\n\t * omniOsc.sourceType // 'fm'\n\t * omniOsc.baseType //'square'\n\t * omniOsc.partialCount //4\n\t */\n\tget baseType(): OscillatorType | \"pwm\" | \"pulse\" {\n\t\treturn this._oscillator.baseType;\n\t}\n\tset baseType(baseType) {\n\t\tif (!this._getOscType(this._oscillator, \"pulse\") &&\n\t\t\t!this._getOscType(this._oscillator, \"pwm\") &&\n\t\t\tbaseType !== \"pulse\" && baseType !== \"pwm\") {\n\t\t\tthis._oscillator.baseType = baseType;\n\t\t}\n\t}\n\n\t/**\n\t * The width of the oscillator when sourceType === \"pulse\".\n\t * @example\n\t * var omniOsc = new OmniOscillator(440, \"pulse\");\n\t * //can access the width attribute only if type === \"pulse\"\n\t * omniOsc.width.value = 0.2;\n\t */\n\tget width(): IsPulseOscillator<OscType, Signal<AudioRange>> {\n\t\tif (this._getOscType(this._oscillator, \"pulse\")) {\n\t\t\treturn this._oscillator.width as IsPulseOscillator<OscType, Signal<AudioRange>> ;\n\t\t} else {\n\t\t\treturn undefined as IsPulseOscillator<OscType, Signal<AudioRange>> ;\n\t\t}\n\t}\n\n\t/**\n\t * The number of detuned oscillators, when sourceType === \"fat\".\n\t */\n\tget count(): IsFatOscillator<OscType, number> {\n\t\tif (this._getOscType(this._oscillator, \"fat\")) {\n\t\t\treturn this._oscillator.count as IsFatOscillator<OscType, number>;\n\t\t} else {\n\t\t\treturn undefined as IsFatOscillator<OscType, number>;\n\t\t}\n\t}\n\tset count(count) {\n\t\tif (this._getOscType(this._oscillator, \"fat\") && isNumber(count)) {\n\t\t\tthis._oscillator.count = count;\n\t\t}\n\t}\n\n\t/**\n\t * The detune spread between the oscillators. If \"count\" is\n\t * set to 3 oscillators and the \"spread\" is set to 40,\n\t * the three oscillators would be detuned like this: [-20, 0, 20]\n\t * for a total detune spread of 40 cents. See Tone.FatOscillator\n\t * for more info.\n\t */\n\tget spread(): IsFatOscillator<OscType, Cents> {\n\t\tif (this._getOscType(this._oscillator, \"fat\")) {\n\t\t\treturn this._oscillator.spread as IsFatOscillator<OscType, Cents>;\n\t\t} else {\n\t\t\treturn undefined as IsFatOscillator<OscType, Cents>;\n\t\t}\n\t}\n\tset spread(spread) {\n\t\tif (this._getOscType(this._oscillator, \"fat\") && isNumber(spread)) {\n\t\t\tthis._oscillator.spread = spread;\n\t\t}\n\t}\n\n\t/**\n\t * The type of the modulator oscillator. Only if the oscillator\n\t * is set to \"am\" or \"fm\" types. see. Tone.AMOscillator or Tone.FMOscillator\n\t * for more info.\n\t */\n\tget modulationType(): IsAmOrFmOscillator<OscType, ToneOscillatorType> {\n\t\tif (this._getOscType(this._oscillator, \"fm\") || this._getOscType(this._oscillator, \"am\")) {\n\t\t\treturn this._oscillator.modulationType as IsAmOrFmOscillator<OscType, ToneOscillatorType>;\n\t\t} else {\n\t\t\treturn undefined as IsAmOrFmOscillator<OscType, ToneOscillatorType>;\n\t\t}\n\t}\n\tset modulationType(mType) {\n\t\tif ((this._getOscType(this._oscillator, \"fm\") || this._getOscType(this._oscillator, \"am\")) && isString(mType)) {\n\t\t\tthis._oscillator.modulationType = mType;\n\t\t}\n\t}\n\n\t/**\n\t * The modulation index which is in essence the depth or amount of the modulation. In other terms it is the\n\t * ratio of the frequency of the modulating signal (mf) to the amplitude of the\n\t * modulating signal (ma) -- as in ma/mf.\n\t * See Tone.FMOscillator for more info.\n\t */\n\tget modulationIndex(): IsFMOscillator<OscType, Signal<Positive>> {\n\t\tif (this._getOscType(this._oscillator, \"fm\")) {\n\t\t\treturn this._oscillator.modulationIndex as IsFMOscillator<OscType, Signal<Positive>>;\n\t\t} else {\n\t\t\treturn undefined as IsFMOscillator<OscType, Signal<Positive>>;\n\t\t}\n\t}\n\n\t/**\n\t *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators.\n\t *  A harmonicity of 1 gives both oscillators the same frequency.\n\t *  Harmonicity = 2 means a change of an octave. See Tone.AMOscillator or Tone.FMOscillator\n\t *  for more info.\n\t */\n\tget harmonicity(): IsAmOrFmOscillator<OscType, Signal<Positive>> {\n\t\tif (this._getOscType(this._oscillator, \"fm\") || this._getOscType(this._oscillator, \"am\")) {\n\t\t\treturn this._oscillator.harmonicity as IsAmOrFmOscillator<OscType, Signal<Positive>>;\n\t\t} else {\n\t\t\treturn undefined as IsAmOrFmOscillator<OscType, Signal<Positive>>;\n\t\t}\n\t}\n\n\t/**\n\t * The modulationFrequency Signal of the oscillator\n\t * (only if the oscillator type is set to pwm). See\n\t * Tone.PWMOscillator for more info.\n\t * @example\n\t * var omniOsc = new OmniOscillator(440, \"pwm\");\n\t * //can access the modulationFrequency attribute only if type === \"pwm\"\n\t * omniOsc.modulationFrequency.value = 0.2;\n\t */\n\tget modulationFrequency(): IsPWMOscillator<OscType, Signal<Frequency>> {\n\t\tif (this._getOscType(this._oscillator, \"pwm\")) {\n\t\t\treturn this._oscillator.modulationFrequency as IsPWMOscillator<OscType, Signal<Frequency>>;\n\t\t} else {\n\t\t\treturn undefined as IsPWMOscillator<OscType, Signal<Frequency>>;\n\t\t}\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.detune.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis._oscillator.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { Positive, Time } from \"../../core/type/Units\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp } from \"../../core/util/Interface\";\nimport { isUndef } from \"../../core/util/TypeCheck\";\nimport { Source, SourceOptions } from \"../Source\";\nimport { ToneBufferSource } from \"./BufferSource\";\n\ninterface PlayerOptions extends SourceOptions {\n\tonload: () => void;\n\tplaybackRate: Positive;\n\tloop: boolean;\n\tautostart: boolean;\n\tloopStart: Time;\n\tloopEnd: Time;\n\treverse: boolean;\n\tfadeIn: Time;\n\tfadeOut: Time;\n\turl?: ToneAudioBuffer | string | AudioBuffer;\n}\n\n/**\n * Player is an audio file player with start, loop, and stop functions.\n *\n * @param url Either the AudioBuffer or the url from which to load the AudioBuffer\n * @param onload The function to invoke when the buffer is loaded.\n *                            Recommended to use Tone.Buffer.on('load') instead.\n * @example\n * var player = new Player(\"./path/to/sample.mp3\").toDestination();\n * //play as soon as the buffer is loaded\n * player.autostart = true;\n */\nexport class Player extends Source<PlayerOptions> {\n\n\tname = \"Player\";\n\n\t/**\n\t * If the file should play as soon\n\t * as the buffer is loaded.\n\t * @example\n\t * //will play as soon as it's loaded\n\t * var player = new Player({\n\t * \t\"url\" : \"./path/to/sample.mp3\",\n\t * \t\"autostart\" : true,\n\t * }).toDestination();\n\t */\n\tautostart: boolean;\n\n\t/**\n\t *  The buffer\n\t */\n\tprivate _buffer: ToneAudioBuffer;\n\n\t/**\n\t *  if the buffer should loop once it's over\n\t */\n\tprivate _loop: boolean;\n\n\t/**\n\t *  if 'loop' is true, the loop will start at this position\n\t */\n\tprivate _loopStart: Time;\n\n\t/**\n\t *  if 'loop' is true, the loop will end at this position\n\t */\n\tprivate _loopEnd: Time;\n\n\t/**\n\t *  the playback rate\n\t */\n\tprivate _playbackRate: Positive;\n\n\t/**\n\t *  All of the active buffer source nodes\n\t */\n\tprivate _activeSources: Set<ToneBufferSource> = new Set();\n\n\t/**\n\t *  The fadeIn time of the amplitude envelope.\n\t */\n\tfadeIn: Time;\n\n\t/**\n\t *  The fadeOut time of the amplitude envelope.\n\t */\n\tfadeOut: Time;\n\n\tconstructor(options?: Partial<PlayerOptions>);\n\tconstructor(url?: string | AudioBuffer | ToneAudioBuffer, onload?: () => void);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Player.getDefaults(), arguments, [\"url\", \"onload\"]));\n\t\tconst options = optionsFromArguments(Player.getDefaults(), arguments, [\"url\", \"onload\"]);\n\n\t\tthis._buffer = new ToneAudioBuffer({\n\t\t\tonload: this._onload.bind(this, options.onload),\n\t\t\treverse: options.reverse,\n\t\t\turl: options.url,\n\t\t});\n\t\tthis.autostart = options.autostart;\n\t\tthis._loop = options.loop;\n\t\tthis._loopStart = options.loopStart;\n\t\tthis._loopEnd = options.loopEnd;\n\t\tthis._playbackRate = options.playbackRate;\n\t\tthis.fadeIn = options.fadeIn;\n\t\tthis.fadeOut = options.fadeOut;\n\t}\n\n\tstatic getDefaults(): PlayerOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tautostart : false,\n\t\t\tfadeIn : 0,\n\t\t\tfadeOut : 0,\n\t\t\tloop : false,\n\t\t\tloopEnd : 0,\n\t\t\tloopStart : 0,\n\t\t\tonload : noOp,\n\t\t\tplaybackRate : 1,\n\t\t\treverse : false,\n\t\t});\n\t}\n\n\t/**\n\t * Load the audio file as an audio buffer.\n\t * Decodes the audio asynchronously and invokes\n\t * the callback once the audio buffer loads.\n\t * Note: this does not need to be called if a url\n\t * was passed in to the constructor. Only use this\n\t * if you want to manually load a new url.\n\t * @param url The url of the buffer to load. Filetype support depends on the browser.\n\t */\n\tasync load(url: string): Promise<this> {\n\t\tawait this._buffer.load(url);\n\t\tthis._onload();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Internal callback when the buffer is loaded.\n\t */\n\tprivate _onload(callback: () => void = noOp): void {\n\t\tcallback();\n\t\tif (this.autostart) {\n\t\t\tthis.start();\n\t\t}\n\t}\n\n\t/**\n\t * Internal callback when the buffer is done playing.\n\t */\n\tprivate _onSourceEnd(source: ToneBufferSource): void {\n\t\tthis._activeSources.delete(source);\n\t\tif (this._activeSources.size === 0 && !this._synced) {\n\t\t\tthis._state.setStateAtTime(\"stopped\", this.now());\n\t\t}\n\t}\n\n\t/**\n\t *  Play the buffer at the given startTime. Optionally add an offset\n\t *  and/or duration which will play the buffer from a position\n\t *  within the buffer for the given duration.\n\t *\n\t *  @param  time When the player should start.\n\t *  @param  offset The offset from the beginning of the sample\n\t *                                 to start at.\n\t *  @param  duration How long the sample should play. If no duration is given, it will default to the full length\n\t *                   of the sample (minus any offset)\n\t */\n\tstart(time?: Time, offset?: Time, duration?: Time): this {\n\t\tsuper.start(time, offset, duration);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Internal start method\n\t */\n\tprotected _start(startTime?: Time, offset?: Time, duration?: Time): void {\n\t\t// if it's a loop the default offset is the loopstart point\n\t\tif (this._loop) {\n\t\t\toffset = defaultArg(offset, this._loopStart);\n\t\t} else {\n\t\t\t// otherwise the default offset is 0\n\t\t\toffset = defaultArg(offset, 0);\n\t\t}\n\n\t\t// compute the values in seconds\n\t\tlet comptuedOffset = this.toSeconds(offset);\n\n\t\t// if it's synced, it should factor in the playback rate for computing the offset\n\t\tif (this._synced) {\n\t\t\tcomptuedOffset *= this._playbackRate;\n\t\t}\n\n\t\t// compute the duration which is either the passed in duration of the buffer.duration - offset\n\t\tconst origDuration = duration;\n\t\tduration = defaultArg(duration, Math.max(this._buffer.duration - comptuedOffset, 0));\n\t\tlet computedDuration = this.toSeconds(duration);\n\n\t\t// scale it by the playback rate\n\t\tcomputedDuration = computedDuration / this._playbackRate;\n\n\t\t// get the start time\n\t\tstartTime = this.toSeconds(startTime);\n\n\t\t// make the source\n\t\tconst source = new ToneBufferSource({\n\t\t\tbuffer : this._buffer,\n\t\t\tcontext: this.context,\n\t\t\tfadeIn : this.fadeIn,\n\t\t\tfadeOut : this.fadeOut,\n\t\t\tloop : this._loop,\n\t\t\tloopEnd : this._loopEnd,\n\t\t\tloopStart : this._loopStart,\n\t\t\tonended : this._onSourceEnd.bind(this),\n\t\t\tplaybackRate : this._playbackRate,\n\t\t}).connect(this.output);\n\n\t\t// set the looping properties\n\t\tif (!this._loop && !this._synced) {\n\t\t\t// if it's not looping, set the state change at the end of the sample\n\t\t\tthis._state.setStateAtTime(\"stopped\", startTime + computedDuration, {\n\t\t\t\timplicitEnd: true,\n\t\t\t});\n\t\t}\n\n\t\t// add it to the array of active sources\n\t\tthis._activeSources.add(source);\n\n\t\t// start it\n\t\tif (this._loop && isUndef(origDuration)) {\n\t\t\tsource.start(startTime, comptuedOffset);\n\t\t} else {\n\t\t\t// subtract the fade out time\n\t\t\tsource.start(startTime, comptuedOffset, computedDuration - this.toSeconds(this.fadeOut));\n\t\t}\n\t}\n\n\t/**\n\t *  Stop playback.\n\t */\n\tprotected _stop(time?: Time): void {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._activeSources.forEach(source => source.stop(computedTime));\n\t}\n\n\t/**\n\t * Stop and then restart the player from the beginning (or offset)\n\t * @param  time When the player should start.\n\t * @param  offset The offset from the beginning of the sample to start at.\n\t * @param  duration How long the sample should play. If no duration is given,\n\t * \t\t\t\t\tit will default to the full length of the sample (minus any offset)\n\t */\n\trestart(time?: Time, offset?: Time, duration?: Time): this {\n\t\tthis._stop(time);\n\t\tthis._start(time, offset, duration);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Seek to a specific time in the player's buffer. If the\n\t *  source is no longer playing at that time, it will stop.\n\t *  If you seek to a time that\n\t *  @param {Time} offset The time to seek to.\n\t *  @param {Time=} time The time for the seek event to occur.\n\t *  @return {Player} this\n\t *  @example\n\t * source.start(0.2);\n\t * source.stop(0.4);\n\t */\n\tseek(offset: Time, when?: Time): this {\n\t\tconst computedTime = this.toSeconds(when);\n\t\tif (this._state.getValueAtTime(computedTime) === \"started\") {\n\t\t\tconst comptuedOffset = this.toSeconds(offset);\n\t\t\t// if it's currently playing, stop it\n\t\t\tthis._stop(computedTime);\n\t\t\t// restart it at the given time\n\t\t\tthis._start(computedTime, comptuedOffset);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set the loop start and end. Will only loop if loop is set to true.\n\t * @param loopStart The loop end time\n\t * @param loopEnd The loop end time\n\t * @example\n\t * //loop 0.1 seconds of the file.\n\t * player.setLoopPoints(0.2, 0.3);\n\t * player.loop = true;\n\t */\n\tsetLoopPoints(loopStart: Time, loopEnd: Time): this {\n\t\tthis.loopStart = loopStart;\n\t\tthis.loopEnd = loopEnd;\n\t\treturn this;\n\t}\n\n\t/**\n\t * If loop is true, the loop will start at this position.\n\t */\n\tget loopStart(): Time {\n\t\treturn this._loopStart;\n\t}\n\tset loopStart(loopStart) {\n\t\tthis._loopStart = loopStart;\n\t\t// get the current source\n\t\tthis._activeSources.forEach(source => {\n\t\t\tsource.loopStart = loopStart;\n\t\t});\n\t}\n\n\t/**\n\t * If loop is true, the loop will end at this position.\n\t */\n\tget loopEnd(): Time {\n\t\treturn this._loopEnd;\n\t}\n\tset loopEnd(loopEnd) {\n\t\tthis._loopEnd = loopEnd;\n\t\t// get the current source\n\t\tthis._activeSources.forEach(source => {\n\t\t\tsource.loopEnd = loopEnd;\n\t\t});\n\t}\n\n\t/**\n\t * The audio buffer belonging to the player.\n\t */\n\tget buffer(): ToneAudioBuffer {\n\t\treturn this._buffer;\n\t}\n\tset buffer(buffer) {\n\t\tthis._buffer.set(buffer);\n\t}\n\n\t/**\n\t * If the buffer should loop once it's over.\n\t */\n\tget loop(): boolean {\n\t\treturn this._loop;\n\t}\n\tset loop(loop) {\n\t\t// if no change, do nothing\n\t\tif (this._loop === loop) {\n\t\t\treturn;\n\t\t}\n\t\tthis._loop = loop;\n\t\t// set the loop of all of the sources\n\t\tthis._activeSources.forEach(source => {\n\t\t\tsource.loop = loop;\n\t\t});\n\t\tif (loop) {\n\t\t\t// remove the next stopEvent\n\t\t\tconst stopEvent = this._state.getNextState(\"stopped\", this.now());\n\t\t\tif (stopEvent) {\n\t\t\t\tthis._state.cancel(stopEvent.time);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * The playback speed. 1 is normal speed. This is not a signal because\n\t * Safari and iOS currently don't support playbackRate as a signal.\n\t */\n\tget playbackRate(): Positive {\n\t\treturn this._playbackRate;\n\t}\n\tset playbackRate(rate) {\n\t\tthis._playbackRate = rate;\n\t\tconst now = this.now();\n\n\t\t// cancel the stop event since it's at a different time now\n\t\tconst stopEvent = this._state.getNextState(\"stopped\", now);\n\t\tif (stopEvent && stopEvent.implicitEnd) {\n\t\t\tthis._state.cancel(stopEvent.time);\n\t\t}\n\n\t\t// set all the sources\n\t\tthis._activeSources.forEach(source => {\n\t\t\tsource.playbackRate.setValueAtTime(rate, now);\n\t\t});\n\t}\n\n\t/**\n\t * The direction the buffer should play in\n\t */\n\tget reverse(): boolean {\n\t\treturn this._buffer.reverse;\n\t}\n\tset reverse(rev) {\n\t\tthis._buffer.reverse = rev;\n\t}\n\n\t/**\n\t * If the buffer is loaded\n\t */\n\tget loaded(): boolean {\n\t\treturn this._buffer.loaded;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\t// disconnect all of the players\n\t\tthis._activeSources.forEach(source => source.dispose());\n\t\tthis._activeSources.clear();\n\t\tthis._buffer.dispose();\n\t\treturn this;\n\t}\n}\n","import { connectSeries } from \"../core/Connect\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Param } from \"../core/context/Param\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Signal, SignalOptions } from \"./Signal\";\n\n/**\n * Add a signal and a number or two signals. When no value is\n * passed into the constructor, Tone.Add will sum input and `addend`\n * If a value is passed into the constructor, the it will be added to the input.\n *\n * @param value If no value is provided, Tone.Add will sum the first  and second inputs.\n * @example\n * var signal = new Signal(2);\n * var add = new Add(2);\n * signal.connect(add);\n * //the output of add equals 4\n * @example\n * //if constructed with no arguments\n * //it will add the first and second inputs\n * var add = new Add();\n * var sig0 = new Signal(3).connect(add);\n * var sig1 = new Signal(4).connect(add.addend);\n * //the output of add equals 7.\n */\nexport class Add extends Signal {\n\n\toverride = false;\n\n\treadonly name = \"Add\";\n\n\t/**\n\t *  the summing node\n\t */\n\tprivate _sum: Gain = new Gain({ context: this.context });\n\treadonly input = this._sum;\n\treadonly output = this._sum;\n\n\t/**\n\t * The value which is added to the input signal\n\t */\n\treadonly addend: Param<number> = this._param;\n\n\tconstructor(options?: Partial<SignalOptions<number>>);\n\t// tslint:disable-next-line: unified-signatures\n\tconstructor(value?: number);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Add.getDefaults(), arguments, [\"value\"])));\n\n\t\tconnectSeries(this._constantSource, this._sum);\n\t}\n\n\tstatic getDefaults(): SignalOptions<number> {\n\t\treturn Object.assign(Signal.getDefaults(), {\n\t\t\tvalue: 0,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._sum.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { SignalOperator } from \"./SignalOperator\";\nimport { WaveShaper } from \"./WaveShaper\";\n\n/**\n *  Return the absolute value of an incoming signal.\n *\n *  @example\n * var signal = new Tone.Signal(-1);\n * var abs = new Tone.Abs();\n * signal.connect(abs);\n * //the output of abs is 1.\n */\nexport class Abs extends SignalOperator<ToneAudioNodeOptions> {\n\n\tname = \"Abs\";\n\n\t/**\n\t * The node which converts the audio ranges\n\t */\n\tprivate _abs = new WaveShaper({\n\t\tcontext: this.context,\n\t\tmapping: val => {\n\t\t\tif (Math.abs(val) < 0.001) {\n\t\t\t\treturn 0;\n\t\t\t} else {\n\t\t\t\treturn Math.abs(val);\n\t\t\t}\n\t\t},\n\t});\n\n\t/**\n\t * The AudioRange input [-1, 1]\n\t */\n\tinput = this._abs;\n\n\t/**\n\t * The output range [0, 1]\n\t */\n\toutput = this._abs;\n\n\t/**\n\t *  clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._abs.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { SignalOperator } from \"./SignalOperator\";\nimport { WaveShaper } from \"./WaveShaper\";\n\n/**\n * GainToAudio converts an input in NormalRange [0,1] to AudioRange [-1,1].\n * See {@link AudioToGain}.\n *\n * @example\n * var a2g = new GainToAudio();\n */\nexport class GainToAudio extends SignalOperator<ToneAudioNodeOptions> {\n\n\tname = \"GainToAudio\";\n\n\t/**\n\t * The node which converts the audio ranges\n\t */\n\tprivate _norm = new WaveShaper({\n\t\tcontext: this.context,\n\t\tmapping: x => Math.abs(x) * 2 - 1,\n\t});\n\n\t/**\n\t * The NormalRange input [0, 1]\n\t */\n\tinput = this._norm;\n\n\t/**\n\t * The AudioRange output [-1, 1]\n\t */\n\toutput = this._norm;\n\n\t/**\n\t *  clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._norm.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Multiply } from \"./Multiply\";\nimport { SignalOperator } from \"./SignalOperator\";\n\n/**\n *  @class Negate the incoming signal. i.e. an input signal of 10 will output -10\n *\n *  @constructor\n *  @extends {Tone.SignalBase}\n *  @example\n * var neg = new Negate();\n * var sig = new Signal(-2).connect(neg);\n * //output of neg is positive 2.\n */\nexport class Negate extends SignalOperator<ToneAudioNodeOptions> {\n\n\tname = \"Negate\";\n\n\t/**\n\t *  negation is done by multiplying by -1\n\t */\n\tprivate _multiply: Multiply = new Multiply({\n\t\tcontext: this.context,\n\t\tvalue: -1,\n\t});\n\n\t/**\n\t * The input and output are equal to the multiply node\n\t */\n\tinput = this._multiply;\n\toutput = this._multiply;\n\n\t/**\n\t *  clean up\n\t *  @returns {Negate} this\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._multiply.dispose();\n\t\treturn this;\n\t}\n}\n","import { connectSeries } from \"../core/Connect\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Param } from \"../core/context/Param\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Negate } from \"../signal/Negate\";\nimport { Signal, SignalOptions } from \"../signal/Signal\";\n\n/**\n * Subtract the signal connected to the input is subtracted from the signal connected\n * The subtrahend.\n *\n * @param value The value to subtract from the incoming signal. If the value\n *                         is omitted, it will subtract the second signal from the first.\n * @example\n * var sub = new Subtract(1);\n * var sig = new Tone.Signal(4).connect(sub);\n * //the output of sub is 3.\n * @example\n * var sub = new Subtract();\n * var sigA = new Tone.Signal(10);\n * var sigB = new Tone.Signal(2.5);\n * sigA.connect(sub);\n * sigB.connect(sub.subtrahend);\n * //output of sub is 7.5\n */\nexport class Subtract extends Signal {\n\n\toverride = false;\n\n\treadonly name = \"Subtract\";\n\n\t/**\n\t *  the summing node\n\t */\n\tprivate _sum: Gain = new Gain({ context: this.context });\n\tinput = this._sum;\n\toutput = this._sum;\n\n\t/**\n\t *  Negate the input of the second input before connecting it to the summing node.\n\t */\n\tprivate _neg: Negate = new Negate({ context : this.context });\n\n\t/**\n\t * The value which is subtracted from the main signal\n\t */\n\tsubtrahend: Param<number> = this._param;\n\n\tconstructor(options?: Partial<SignalOptions<number>>);\n\t// tslint:disable-next-line: unified-signatures\n\tconstructor(value?: number);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Subtract.getDefaults(), arguments, [\"value\"])));\n\n\t\tconnectSeries(this._constantSource, this._neg, this._sum);\n\t}\n\n\tstatic getDefaults(): SignalOptions<number> {\n\t\treturn Object.assign(Signal.getDefaults(), {\n\t\t\tvalue: 0,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._neg.dispose();\n\t\tthis._sum.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../core/context/Gain\";\nimport { connect, disconnect, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { SignalOperator } from \"./SignalOperator\";\n\n/**\n *  Tone.Zero outputs 0's at audio-rate. The reason this has to be\n *  it's own class is that many browsers optimize out Tone.Signal\n *  with a value of 0 and will not process nodes further down the graph.\n */\nexport class Zero extends SignalOperator<ToneAudioNodeOptions> {\n\n\treadonly name = \"Zero\";\n\n\t/**\n\t * The gain node which connects the constant source to the output\n\t */\n\tprivate _gain = new Gain({ context : this.context });\n\n\t/**\n\t * Only outputs 0\n\t */\n\toutput = this._gain;\n\n\t/**\n\t * no input node\n\t */\n\tinput = undefined;\n\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Zero.getDefaults(), arguments)));\n\t\tconnect(this.context.getConstant(0), this._gain);\n\t}\n\n\t/**\n\t * clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tdisconnect(this.context.getConstant(0), this._gain);\n\t\treturn this;\n\t}\n}\n","import { InputNode, OutputNode } from \"../../core/context/ToneAudioNode\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { NormalRange, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { isArray, isObject, isString } from \"../../core/util/TypeCheck\";\nimport { connectSignal, Signal } from \"../../signal/Signal\";\n\ntype BasicEnvelopeCurve = \"linear\" | \"exponential\";\ntype InternalEnvelopeCurve = BasicEnvelopeCurve | number[];\nexport type EnvelopeCurve = EnvelopeCurveName | number[];\n\nexport interface EnvelopeOptions extends ToneAudioNodeOptions {\n\tattack: Time;\n\tdecay: Time;\n\tsustain: NormalRange;\n\trelease: Time;\n\tattackCurve: EnvelopeCurve;\n\treleaseCurve: EnvelopeCurve;\n\tdecayCurve: BasicEnvelopeCurve;\n}\n\n/**\n *  Envelope is an [ADSR](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope)\n *  envelope generator. Envelope outputs a signal which\n *  can be connected to an AudioParam or Tone.Signal.\n * ```\n *           /\\\n *          /  \\\n *         /    \\\n *        /      \\\n *       /        \\___________\n *      /                     \\\n *     /                       \\\n *    /                         \\\n *   /                           \\\n * ```\n *\n *  @param attack The amount of time it takes for the envelope to go from\n *                         0 to it's maximum value.\n *  @param decay\tThe period of time after the attack that it takes for the envelope\n *                       \tto fall to the sustain value. Value must be greater than 0.\n *  @param sustain\tThe percent of the maximum value that the envelope rests at until\n *                                \tthe release is triggered.\n *  @param release\tThe amount of time after the release is triggered it takes to reach 0.\n *                         \tValue must be greater than 0.\n *  @example\n * //an amplitude envelope\n * var gainNode = Tone.context.createGain();\n * var env = new Envelope({\n * \t\"attack\" : 0.1,\n * \t\"decay\" : 0.2,\n * \t\"sustain\" : 1,\n * \t\"release\" : 0.8,\n * });\n * env.connect(gainNode.gain);\n */\nexport class Envelope extends ToneAudioNode<EnvelopeOptions> {\n\n\treadonly name: string = \"Envelope\";\n\n\t/**\n\t * When triggerAttack is called, the attack time is the amount of\n\t * time it takes for the envelope to reach it's maximum value.\n\t * ```\n\t *           /\\\n\t *          /X \\\n\t *         /XX  \\\n\t *        /XXX   \\\n\t *       /XXXX    \\___________\n\t *      /XXXXX                \\\n\t *     /XXXXXX                 \\\n\t *    /XXXXXXX                  \\\n\t *   /XXXXXXXX                   \\\n\t * ```\n\t */\n\tattack: Time;\n\n\t/**\n\t * After the attack portion of the envelope, the value will fall\n\t * over the duration of the decay time to it's sustain value.\n\t * ```\n\t *           /\\\n\t *          / X\\\n\t *         /  XX\\\n\t *        /   XXX\\\n\t *       /    XXXX\\___________\n\t *      /     XXXXX           \\\n\t *     /      XXXXX            \\\n\t *    /       XXXXX             \\\n\t *   /        XXXXX              \\\n\t * ```\n\t */\n\tdecay: Time;\n\n\t/**\n\t * \tThe sustain value is the value\n\t * \twhich the envelope rests at after triggerAttack is\n\t * \tcalled, but before triggerRelease is invoked.\n\t * ```\n\t *           /\\\n\t *          /  \\\n\t *         /    \\\n\t *        /      \\\n\t *       /        \\___________\n\t *      /          XXXXXXXXXXX\\\n\t *     /           XXXXXXXXXXX \\\n\t *    /            XXXXXXXXXXX  \\\n\t *   /             XXXXXXXXXXX   \\\n\t * ```\n\t */\n\tsustain: NormalRange;\n\n\t/**\n\t *  After triggerRelease is called, the envelope's\n\t *  value will fall to it's miminum value over the\n\t *  duration of the release time.\n\t * ```\n\t *           /\\\n\t *          /  \\\n\t *         /    \\\n\t *        /      \\\n\t *       /        \\___________\n\t *      /                    X\\\n\t *     /                     XX\\\n\t *    /                      XXX\\\n\t *   /                       XXXX\\\n\t * ```\n\t */\n\trelease: Time;\n\n\t/**\n\t *  The automation curve type for the attack\n\t */\n\tprivate _attackCurve!: InternalEnvelopeCurve;\n\n\t/**\n\t *  The automation curve type for the decay\n\t */\n\tprivate _decayCurve!: BasicEnvelopeCurve;\n\n\t/**\n\t *  The automation curve type for the release\n\t */\n\tprivate _releaseCurve!: InternalEnvelopeCurve;\n\n\t/**\n\t *  the signal which is output.\n\t */\n\tprotected _sig: Signal<NormalRange> = new Signal({\n\t\tcontext: this.context,\n\t\tvalue: 0,\n\t});\n\n\t/**\n\t * The output signal of the envelope\n\t */\n\toutput: OutputNode = this._sig;\n\n\t/**\n\t * Envelope has no input\n\t */\n\tinput: InputNode | undefined = undefined;\n\n\tconstructor(attack?: Time, decay?: Time, sustain?: NormalRange, release?: Time);\n\tconstructor(options?: Partial<EnvelopeOptions>)\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Envelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]));\n\t\tconst options = optionsFromArguments(Envelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]);\n\n\t\tthis.attack = options.attack;\n\t\tthis.decay = options.decay;\n\t\tthis.sustain = options.sustain;\n\t\tthis.release = options.release;\n\t\tthis.attackCurve = options.attackCurve;\n\t\tthis.releaseCurve = options.releaseCurve;\n\t\tthis.decayCurve = options.decayCurve;\n\t}\n\n\tstatic getDefaults(): EnvelopeOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tattack : 0.01,\n\t\t\tattackCurve : \"linear\" as EnvelopeCurveName,\n\t\t\tdecay : 0.1,\n\t\t\tdecayCurve : \"exponential\" as BasicEnvelopeCurve,\n\t\t\trelease : 1,\n\t\t\treleaseCurve : \"exponential\" as EnvelopeCurveName,\n\t\t\tsustain : 0.5,\n\t\t});\n\t}\n\n\t/**\n\t * Read the current value of the envelope. Useful for\n\t * syncronizing visual output to the envelope.\n\t */\n\tget value(): NormalRange {\n\t\treturn this.getValueAtTime(this.now());\n\t}\n\n\t/**\n\t *  Get the curve\n\t *  @param  curve\n\t *  @param  direction  In/Out\n\t *  @return  {String}  The curve name\n\t *  @private\n\t */\n\tprivate _getCurve(curve: InternalEnvelopeCurve, direction: EnvelopeDirection): EnvelopeCurve {\n\t\tif (isString(curve)) {\n\t\t\treturn curve;\n\t\t} else {\n\t\t\t// look up the name in the curves array\n\t\t\tlet curveName: EnvelopeCurveName;\n\t\t\tfor (curveName in EnvelopeCurves) {\n\t\t\t\tif (EnvelopeCurves[curveName][direction] === curve) {\n\t\t\t\t\treturn curveName;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// return the custom curve\n\t\t\treturn curve;\n\t\t}\n\t}\n\n\t/**\n\t *  Assign a the curve to the given name using the direction\n\t *  @param  name\n\t *  @param  direction In/Out\n\t *  @param  curve\n\t *  @private\n\t */\n\tprivate _setCurve(\n\t\tname: \"_attackCurve\" | \"_decayCurve\" | \"_releaseCurve\",\n\t\tdirection: EnvelopeDirection,\n\t\tcurve: EnvelopeCurve,\n\t): void {\n\t\t// check if it's a valid type\n\t\tif (isString(curve) && Reflect.has(EnvelopeCurves, curve)) {\n\t\t\tconst curveDef = EnvelopeCurves[curve];\n\t\t\tif (isObject(curveDef)) {\n\t\t\t\tif (name !== \"_decayCurve\") {\n\t\t\t\t\tthis[name] = curveDef[direction];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis[name] = curveDef;\n\t\t\t}\n\t\t} else if (isArray(curve) && name !== \"_decayCurve\") {\n\t\t\tthis[name] = curve;\n\t\t} else {\n\t\t\tthrow new Error(\"Envelope: invalid curve: \" + curve);\n\t\t}\n\t}\n\n\t/**\n\t * The shape of the attack.\n\t * Can be any of these strings:\n\t * * \"linear\"\n\t * * \"exponential\"\n\t * * \"sine\"\n\t * * \"cosine\"\n\t * * \"bounce\"\n\t * * \"ripple\"\n\t * * \"step\"\n\t *\n\t * Can also be an array which describes the curve. Values\n\t * in the array are evenly subdivided and linearly\n\t * interpolated over the duration of the attack.\n\t * @example\n\t * env.attackCurve = \"linear\";\n\t * @example\n\t * //can also be an array\n\t * env.attackCurve = [0, 0.2, 0.3, 0.4, 1]\n\t */\n\tget attackCurve(): EnvelopeCurve {\n\t\treturn this._getCurve(this._attackCurve, \"In\");\n\t}\n\tset attackCurve(curve) {\n\t\tthis._setCurve(\"_attackCurve\", \"In\", curve);\n\t}\n\n\t/**\n\t * The shape of the release. See the attack curve types.\n\t * @example\n\t * env.releaseCurve = \"linear\";\n\t */\n\tget releaseCurve(): EnvelopeCurve {\n\t\treturn this._getCurve(this._releaseCurve, \"Out\");\n\t}\n\tset releaseCurve(curve) {\n\t\tthis._setCurve(\"_releaseCurve\", \"Out\", curve);\n\t}\n\n\t/**\n\t * The shape of the decay either \"linear\" or \"exponential\"\n\t * @example\n\t * env.decayCurve = \"linear\";\n\t */\n\tget decayCurve(): BasicEnvelopeCurve {\n\t\treturn this._decayCurve;\n\t}\n\tset decayCurve(curve) {\n\t\tthis.assert([\"linear\", \"exponential\"].some(c => c === curve), `Invalid envelope curve: ${curve}`);\n\t\tthis._decayCurve = curve;\n\t}\n\n\t/**\n\t * Trigger the attack/decay portion of the ADSR envelope.\n\t * @param  time When the attack should start.\n\t * @param velocity The velocity of the envelope scales the vales.\n\t *                              number between 0-1\n\t * @example\n\t * //trigger the attack 0.5 seconds from now with a velocity of 0.2\n\t * env.triggerAttack(\"+0.5\", 0.2);\n\t */\n\ttriggerAttack(time?: Time, velocity: NormalRange = 1): this {\n\t\tthis.log(\"triggerAttack\", time, velocity);\n\t\ttime = this.toSeconds(time);\n\t\tconst originalAttack = this.toSeconds(this.attack);\n\t\tlet attack = originalAttack;\n\t\tconst decay = this.toSeconds(this.decay);\n\t\t// check if it's not a complete attack\n\t\tconst currentValue = this.getValueAtTime(time);\n\t\tif (currentValue > 0) {\n\t\t\t// subtract the current value from the attack time\n\t\t\tconst attackRate = 1 / attack;\n\t\t\tconst remainingDistance = 1 - currentValue;\n\t\t\t// the attack is now the remaining time\n\t\t\tattack = remainingDistance / attackRate;\n\t\t}\n\t\t// attack\n\t\tif (attack === 0) {\n\t\t\t// case where the attack time is 0 should set instantly\n\t\t\tthis._sig.setValueAtTime(velocity, time);\n\t\t} else if (this._attackCurve === \"linear\") {\n\t\t\tthis._sig.linearRampTo(velocity, attack, time);\n\t\t} else if (this._attackCurve === \"exponential\") {\n\t\t\tthis._sig.targetRampTo(velocity, attack, time);\n\t\t} else if (attack > 0) {\n\t\t\tthis._sig.cancelAndHoldAtTime(time);\n\t\t\tlet curve = this._attackCurve;\n\t\t\t// find the starting position in the curve\n\t\t\tfor (let i = 1; i < curve.length; i++) {\n\t\t\t\t// the starting index is between the two values\n\t\t\t\tif (curve[i - 1] <= currentValue && currentValue <= curve[i]) {\n\t\t\t\t\tcurve = this._attackCurve.slice(i);\n\t\t\t\t\t// the first index is the current value\n\t\t\t\t\tcurve[0] = currentValue;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._sig.setValueCurveAtTime(curve, time, attack, velocity);\n\t\t}\n\t\t// decay\n\t\tif (decay) {\n\t\t\tconst decayValue = velocity * this.sustain;\n\t\t\tconst decayStart = time + attack;\n\t\t\tthis.log(\"decay\", decayStart);\n\t\t\tif (this._decayCurve === \"linear\") {\n\t\t\t\tthis._sig.linearRampTo(decayValue, decay, decayStart + this.sampleTime);\n\t\t\t} else if (this._decayCurve === \"exponential\") {\n\t\t\t\tthis._sig.exponentialApproachValueAtTime(decayValue, decayStart, decay);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Triggers the release of the envelope.\n\t *  @param  time When the release portion of the envelope should start.\n\t *  @example\n\t *  //trigger release immediately\n\t *  env.triggerRelease();\n\t */\n\ttriggerRelease(time?: Time): this {\n\t\tthis.log(\"triggerRelease\", time);\n\t\ttime = this.toSeconds(time);\n\t\tconst currentValue = this.getValueAtTime(time);\n\t\tif (currentValue > 0) {\n\t\t\tconst release = this.toSeconds(this.release);\n\t\t\tif (this._releaseCurve === \"linear\") {\n\t\t\t\tthis._sig.linearRampTo(0, release, time);\n\t\t\t} else if (this._releaseCurve === \"exponential\") {\n\t\t\t\tthis._sig.targetRampTo(0, release, time);\n\t\t\t} else {\n\t\t\t\tif (isArray(this._releaseCurve)) {\n\t\t\t\t\tthis._sig.cancelAndHoldAtTime(time);\n\t\t\t\t\tthis._sig.setValueCurveAtTime(this._releaseCurve, time, release, currentValue);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Get the scheduled value at the given time. This will\n\t *  return the unconverted (raw) value.\n\t */\n\tgetValueAtTime(time: Time): NormalRange {\n\t\treturn this._sig.getValueAtTime(time);\n\t}\n\n\t/**\n\t *  triggerAttackRelease is shorthand for triggerAttack, then waiting\n\t *  some duration, then triggerRelease.\n\t *  @param duration The duration of the sustain.\n\t *  @param time When the attack should be triggered.\n\t *  @param velocity The velocity of the envelope.\n\t *  @example\n\t * //trigger the attack and then the release after 0.6 seconds.\n\t * env.triggerAttackRelease(0.6);\n\t */\n\ttriggerAttackRelease(duration: Time, time?: Time, velocity: NormalRange = 1): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis.triggerAttack(time, velocity);\n\t\tthis.triggerRelease(time + this.toSeconds(duration));\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Cancels all scheduled envelope changes after the given time.\n\t */\n\tcancel(after?: Time): this {\n\t\tthis._sig.cancelScheduledValues(this.toSeconds(after));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Connect the envelope to a destination node.\n\t */\n\tconnect(destination: InputNode, outputNumber: number = 0, inputNumber: number = 0): this {\n\t\tconnectSignal(this, destination, outputNumber, inputNumber);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._sig.dispose();\n\t\treturn this;\n\t}\n}\n\ninterface EnvelopeCurveObject {\n\tIn: number[];\n\tOut: number[];\n}\n\ntype EnvelopeDirection = keyof EnvelopeCurveObject;\n\ninterface EnvelopeCurveMap {\n\tlinear: \"linear\";\n\texponential: \"exponential\";\n\tbounce: EnvelopeCurveObject;\n\tcosine: EnvelopeCurveObject;\n\tsine: EnvelopeCurveObject;\n\tripple: EnvelopeCurveObject;\n\tstep: EnvelopeCurveObject;\n}\n\ntype EnvelopeCurveName =  keyof EnvelopeCurveMap;\n\n/**\n *  Generate some complex envelope curves.\n */\n// tslint:disable-next-line: variable-name\nconst EnvelopeCurves: EnvelopeCurveMap = (() => {\n\n\tconst curveLen = 128;\n\n\tlet i: number;\n\tlet k: number;\n\n\t// cosine curve\n\tconst cosineCurve: number[] = [];\n\tfor (i = 0; i < curveLen; i++) {\n\t\tcosineCurve[i] = Math.sin((i / (curveLen - 1)) * (Math.PI / 2));\n\t}\n\n\t// ripple curve\n\tconst rippleCurve: number[] = [];\n\tconst rippleCurveFreq = 6.4;\n\tfor (i = 0; i < curveLen - 1; i++) {\n\t\tk = (i / (curveLen - 1));\n\t\tconst sineWave = Math.sin(k * (Math.PI * 2) * rippleCurveFreq - Math.PI / 2) + 1;\n\t\trippleCurve[i] = sineWave / 10 + k * 0.83;\n\t}\n\trippleCurve[curveLen - 1] = 1;\n\n\t// stairs curve\n\tconst stairsCurve: number[] = [];\n\tconst steps = 5;\n\tfor (i = 0; i < curveLen; i++) {\n\t\tstairsCurve[i] = Math.ceil((i / (curveLen - 1)) * steps) / steps;\n\t}\n\n\t// in-out easing curve\n\tconst sineCurve: number[] = [];\n\tfor (i = 0; i < curveLen; i++) {\n\t\tk = i / (curveLen - 1);\n\t\tsineCurve[i] = 0.5 * (1 - Math.cos(Math.PI * k));\n\t}\n\n\t// a bounce curve\n\tconst bounceCurve: number[] = [];\n\tfor (i = 0; i < curveLen; i++) {\n\t\tk = i / (curveLen - 1);\n\t\tconst freq = Math.pow(k, 3) * 4 + 0.2;\n\t\tconst val = Math.cos(freq * Math.PI * 2 * k);\n\t\tbounceCurve[i] = Math.abs(val * (1 - k));\n\t}\n\n\t/**\n\t *  Invert a value curve to make it work for the release\n\t */\n\tfunction invertCurve(curve: number[]): number[] {\n\t\tconst out = new Array(curve.length);\n\t\tfor (let j = 0; j < curve.length; j++) {\n\t\t\tout[j] = 1 - curve[j];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t *  reverse the curve\n\t */\n\tfunction reverseCurve(curve: number[]): number[] {\n\t\treturn curve.slice(0).reverse();\n\t}\n\n\t/**\n\t *  attack and release curve arrays\n\t */\n\treturn {\n\t\tbounce : {\n\t\t\tIn : invertCurve(bounceCurve),\n\t\t\tOut : bounceCurve,\n\t\t},\n\t\tcosine : {\n\t\t\tIn : cosineCurve,\n\t\t\tOut : reverseCurve(cosineCurve),\n\t\t},\n\t\texponential : \"exponential\" as \"exponential\",\n\t\tlinear : \"linear\" as \"linear\",\n\t\tripple : {\n\t\t\tIn : rippleCurve,\n\t\t\tOut : invertCurve(rippleCurve),\n\t\t},\n\t\tsine : {\n\t\t\tIn : sineCurve,\n\t\t\tOut : invertCurve(sineCurve),\n\t\t},\n\t\tstep : {\n\t\t\tIn : stairsCurve,\n\t\t\tOut : invertCurve(stairsCurve),\n\t\t},\n\t};\n})();\n","import { Gain } from \"../../core/context/Gain\";\nimport { NormalRange, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Envelope, EnvelopeOptions } from \"./Envelope\";\n\n/**\n * AmplitudeEnvelope is a Tone.Envelope connected to a gain node.\n * Unlike Tone.Envelope, which outputs the envelope's value, AmplitudeEnvelope accepts\n * an audio signal as the input and will apply the envelope to the amplitude\n * of the signal.\n * Read more about ADSR Envelopes on [Wikipedia](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope).\n *\n * @param attack The amount of time it takes for the envelope to go from 0 to it's maximum value.\n * @param decay\tThe period of time after the attack that it takes for the envelope\n *                       \tto fall to the sustain value. Value must be greater than 0.\n * @param sustain\tThe percent of the maximum value that the envelope rests at until\n *                                \tthe release is triggered.\n * @param release\tThe amount of time after the release is triggered it takes to reach 0.\n *                         \tValue must be greater than 0.\n *  @example\n * var ampEnv = new AmplitudeEnvelope({\n * \t\"attack\": 0.1,\n * \t\"decay\": 0.2,\n * \t\"sustain\": 1.0,\n * \t\"release\": 0.8\n * }).toDestination();\n * //create an oscillator and connect it\n * var osc = new Tone.Oscillator().connect(ampEnv).start();\n * //trigger the envelopes attack and release \"8t\" apart\n * ampEnv.triggerAttackRelease(\"8t\");\n */\nexport class AmplitudeEnvelope extends Envelope {\n\n\tname = \"AmplitudeEnvelope\";\n\n\tprivate _gainNode: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\toutput: Gain = this._gainNode;\n\tinput: Gain = this._gainNode;\n\n\tconstructor(attack?: Time, decay?: Time, sustain?: NormalRange, release?: Time);\n\tconstructor(options?: Partial<EnvelopeOptions>)\n\tconstructor() {\n\t\tsuper(optionsFromArguments(AmplitudeEnvelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]));\n\t\tthis._sig.connect(this._gainNode.gain);\n\t\tthis.output = this._gainNode;\n\t\tthis.input = this._gainNode;\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._gainNode.dispose();\n\t\treturn this;\n\t}\n}\n","import { Volume } from \"../component/channel/Volume\";\nimport { Param } from \"../core/context/Param\";\nimport { OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { Decibels, Frequency, NormalRange, Time } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\n\nexport interface InstrumentOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n}\n\n/**\n *  Base-class for all instruments\n */\nexport abstract class Instrument<Options extends InstrumentOptions> extends ToneAudioNode<Options> {\n\n\t/**\n\t *  The output and volume triming node\n\t */\n\tprivate _volume: Volume;\n\toutput: OutputNode;\n\n\t/**\n\t * The instrument only has an output\n\t */\n\tinput: undefined;\n\n\t/**\n\t * The volume of the output in decibels.\n\t * @example\n\t * source.volume.value = -6;\n\t */\n\tvolume: Param<Decibels>;\n\n\t/**\n\t * Keep track of all events scheduled to the transport\n\t * when the instrument is 'synced'\n\t */\n\tprivate _scheduledEvents: number[] = [];\n\n\t/**\n\t * If the instrument is currently synced\n\t */\n\tprivate _synced: boolean = false;\n\n\tconstructor(options?: Partial<InstrumentOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Instrument.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Instrument.getDefaults(), arguments);\n\n\t\tthis._volume = new Volume({\n\t\t\tcontext: this.context,\n\t\t\tvolume: options.volume,\n\t\t});\n\t\tthis.volume = this._volume.volume;\n\t\tthis.output = this._volume;\n\t\treadOnly(this, \"volume\");\n\t}\n\n\tstatic getDefaults(): InstrumentOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Sync the instrument to the Transport. All subsequent calls of\n\t * [triggerAttack](#triggerattack) and [triggerRelease](#triggerrelease)\n\t * will be scheduled along the transport.\n\t * @example\n\t * instrument.sync()\n\t * //schedule 3 notes when the transport first starts\n\t * instrument.triggerAttackRelease('C4', '8n', 0)\n\t * instrument.triggerAttackRelease('E4', '8n', '8n')\n\t * instrument.triggerAttackRelease('G4', '8n', '4n')\n\t * //start the transport to hear the notes\n\t * Transport.start()\n\t * @returns {Instrument} this\n\t */\n\tsync(): this {\n\t\tif (!this._synced) {\n\t\t\tthis._synced = true;\n\t\t\tthis._syncMethod(\"triggerAttack\", 1);\n\t\t\tthis._syncMethod(\"triggerRelease\", 0);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Wrap the given method so that it can be synchronized\n\t * @param method Which method to wrap and sync\n\t * @param  timePosition What position the time argument appears in\n\t */\n\tprotected _syncMethod(method: string, timePosition: number): void {\n\t\tconst originalMethod = this[\"_original_\" + method] = this[method];\n\t\tthis[method] = (...args: any[]) => {\n\t\t\tconst time = args[timePosition];\n\t\t\tconst id = this.context.transport.schedule((t) => {\n\t\t\t\targs[timePosition] = t;\n\t\t\t\toriginalMethod.apply(this, args);\n\t\t\t}, time);\n\t\t\tthis._scheduledEvents.push(id);\n\t\t};\n\t}\n\n\t/**\n\t * Unsync the instrument from the Transport\n\t */\n\tunsync(): this {\n\t\tthis._scheduledEvents.forEach(id => this.context.transport.clear(id));\n\t\tthis._scheduledEvents = [];\n\t\tif (this._synced) {\n\t\t\tthis._synced = false;\n\t\t\tthis.triggerAttack = this._original_triggerAttack;\n\t\t\tthis.triggerRelease = this._original_triggerRelease;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Trigger the attack and then the release after the duration.\n\t *  @param  note     The note to trigger.\n\t *  @param  duration How long the note should be held for before\n\t *                          triggering the release. This value must be greater than 0.\n\t *  @param time  When the note should be triggered.\n\t *  @param  velocity The velocity the note should be triggered at.\n\t *  @example\n\t * //trigger \"C4\" for the duration of an 8th note\n\t * synth.triggerAttackRelease(\"C4\", \"8n\");\n\t */\n\ttriggerAttackRelease(note: Frequency, duration: Time, time?: Time, velocity?: NormalRange): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst computedDuration = this.toSeconds(duration);\n\t\tthis.triggerAttack(note, computedTime, velocity);\n\t\tthis.triggerRelease(computedTime + computedDuration);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Start the instrument's note.\n\t * @param note the note to trigger\n\t * @param time the time to trigger the ntoe\n\t * @param velocity the velocity to trigger the note (betwee 0-1)\n\t */\n\tabstract triggerAttack(note: Frequency, time?: Time, velocity?: NormalRange): this;\n\t// tslint:disable-next-line: variable-name\n\tprivate _original_triggerAttack = this.triggerAttack;\n\n\t/**\n\t * Trigger the release phase of the current note.\n\t *  @param time when to trigger the release\n\t */\n\tabstract triggerRelease(...args: any[]): this;\n\t// tslint:disable-next-line: variable-name\n\tprivate _original_triggerRelease = this.triggerRelease;\n\n\t/**\n\t *  clean up\n\t *  @returns {Instrument} this\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._volume.dispose();\n\t\tthis.unsync();\n\t\tthis._scheduledEvents = [];\n\t\treturn this;\n\t}\n}\n","import { FrequencyClass } from \"../core/type/Frequency\";\nimport { Cents, Frequency, NormalRange, Seconds, Time } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Instrument, InstrumentOptions } from \"../instrument/Instrument\";\nimport { Signal } from \"../signal/Signal\";\n\nexport interface MonophonicOptions extends InstrumentOptions {\n\tportamento: Seconds;\n}\n\n/**\n * Abstract base class for other monophonic instruments to extend.\n */\nexport abstract class Monophonic<Options extends MonophonicOptions> extends Instrument<Options> {\n\n\t/**\n\t *  The glide time between notes.\n\t */\n\tportamento: Seconds;\n\n\t/**\n\t * The instrument's envelope\n\t */\n\tabstract envelope: any;\n\n\t/**\n\t * The instrument's frequency signal.\n\t */\n\tabstract readonly frequency: Signal<Frequency>;\n\n\t/**\n\t * The instrument's detune control signal.\n\t */\n\tabstract readonly detune: Signal<Cents>;\n\n\tconstructor(options?: Partial<MonophonicOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Monophonic.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Monophonic.getDefaults(), arguments);\n\n\t\tthis.portamento = options.portamento;\n\n\t}\n\n\tstatic getDefaults(): MonophonicOptions {\n\t\treturn Object.assign(Instrument.getDefaults(), {\n\t\t\tportamento: 0,\n\t\t});\n\t}\n\n\t/**\n\t *  Trigger the attack of the note optionally with a given velocity.\n\t *\n\t *\n\t *  @param  note The note to trigger.\n\t *  @param  time When the note should start.\n\t *  @param  velocity The velocity scaler determines how \"loud\" the note\n\t *                   will be triggered.\n\t *  @example\n\t * synth.triggerAttack(\"C4\");\n\t *  @example\n\t * //trigger the note a half second from now at half velocity\n\t * synth.triggerAttack(\"C4\", \"+0.5\", 0.5);\n\t */\n\ttriggerAttack(note: Frequency | FrequencyClass, time?: Time, velocity: NormalRange = 1): this {\n\t\tthis.log(\"triggerAttack\", note, time, velocity);\n\t\tconst seconds = this.toSeconds(time);\n\t\tthis._triggerEnvelopeAttack(seconds, velocity);\n\t\tthis.setNote(note, seconds);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Trigger the release portion of the envelope\n\t *  @param  {Time} [time=now] If no time is given, the release happens immediatly\n\t *  @returns {Monophonic} this\n\t *  @example\n\t * synth.triggerRelease();\n\t */\n\ttriggerRelease(time?: Time): this {\n\t\tthis.log(\"triggerRelease\", time);\n\t\tconst seconds = this.toSeconds(time);\n\t\tthis._triggerEnvelopeRelease(seconds);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Internal method which starts the envelope attack\n\t */\n\tprotected abstract _triggerEnvelopeAttack(time: Seconds, velocity: NormalRange): void;\n\n\t/**\n\t *  Internal method which starts the envelope release\n\t */\n\tprotected abstract _triggerEnvelopeRelease(time: Seconds): void;\n\n\t/**\n\t *  Get the level of the output at the given time. Measures\n\t *  the envelope(s) value at the time.\n\t *  @param time The time to query the envelope value\n\t *  @return The output level between 0-1\n\t */\n\tgetLevelAtTime(time: Time): NormalRange {\n\t\ttime = this.toSeconds(time);\n\t\treturn this.envelope.getValueAtTime(time);\n\t}\n\n\t/**\n\t *  Set the note at the given time. If no time is given, the note\n\t *  will set immediately.\n\t *  @param note The note to change to.\n\t *  @param  time The time when the note should be set.\n\t * @example\n\t * //change to F#6 in one quarter note from now.\n\t * synth.setNote(\"F#6\", \"+4n\");\n\t * @example\n\t * //change to Bb4 right now\n\t * synth.setNote(\"Bb4\");\n\t */\n\tsetNote(note: Frequency | FrequencyClass, time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst computedFrequency = note instanceof FrequencyClass ? note.toFrequency() : note;\n\t\tif (this.portamento > 0 && this.getLevelAtTime(computedTime) > 0.05) {\n\t\t\tconst portTime = this.toSeconds(this.portamento);\n\t\t\tthis.frequency.exponentialRampTo(computedFrequency, portTime, computedTime);\n\t\t} else {\n\t\t\tthis.frequency.setValueAtTime(computedFrequency, computedTime);\n\t\t}\n\t\treturn this;\n\t}\n}\n","import { AmplitudeEnvelope } from \"../component/envelope/AmplitudeEnvelope\";\nimport { Envelope, EnvelopeOptions } from \"../component/envelope/Envelope\";\nimport { Time } from \"../core/type/Units\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { RecursivePartial } from \"../core/util/Interface\";\nimport { OmniOscillator } from \"../source/oscillator/OmniOscillator\";\nimport { OmniOscillatorConstructorOptions } from \"../source/oscillator/OscillatorInterface\";\nimport { Source } from \"../source/Source\";\nimport { Monophonic, MonophonicOptions } from \"./Monophonic\";\n\nexport interface SynthOptions extends MonophonicOptions {\n\toscillator: OmniOscillatorConstructorOptions;\n\tenvelope: EnvelopeOptions;\n}\n\n/**\n * Synth is composed simply of a {@link OmniOscillator} routed through an {@link AmplitudeEnvelope}.\n * ```\n * +----------------+   +-------------------+\n * | OmniOscillator +>--> AmplitudeEnvelope +>--> Output\n * +----------------+   +-------------------+\n * ```\n * @param options the options available for the synth.\n * @example\n * var synth = new Synth().toDestination();\n * synth.triggerAttackRelease(\"C4\", \"8n\");\n */\nexport class Synth extends Monophonic<SynthOptions> {\n\n\treadonly name = \"Synth\";\n\n\t/**\n\t *  The oscillator.\n\t */\n\treadonly oscillator = new OmniOscillator({ context: this.context });\n\n\t/**\n\t * The frequency signal\n\t */\n\treadonly frequency = this.oscillator.frequency;\n\n\t/**\n\t * The detune signal\n\t */\n\treadonly detune = this.oscillator.detune;\n\n\t/**\n\t * The envelope\n\t */\n\treadonly envelope: AmplitudeEnvelope = new AmplitudeEnvelope({ context: this.context });\n\n\tprotected _internalChannels = [this.oscillator, this.envelope];\n\n\tconstructor(options?: RecursivePartial<SynthOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Synth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Synth.getDefaults(), arguments);\n\n\t\tthis.oscillator.set(options.oscillator);\n\t\tthis.envelope.set(options.envelope);\n\n\t\t// connect the oscillators to the output\n\t\tthis.oscillator.chain(this.envelope, this.output);\n\t\treadOnly(this, [\"oscillator\", \"frequency\", \"detune\", \"envelope\"]);\n\t}\n\n\tstatic getDefaults(): SynthOptions {\n\t\treturn Object.assign(Monophonic.getDefaults(), {\n\t\t\tenvelope: Object.assign(\n\t\t\t\tomitFromObject(Envelope.getDefaults(), Object.keys(Source.getDefaults())),\n\t\t\t\t{\n\t\t\t\t\tattack : 0.005,\n\t\t\t\t\tdecay : 0.1,\n\t\t\t\t\trelease : 1,\n\t\t\t\t\tsustain : 0.3,\n\t\t\t\t},\n\t\t\t),\n\t\t\toscillator: Object.assign(\n\t\t\t\tomitFromObject(OmniOscillator.getDefaults(), Object.keys(Source.getDefaults())),\n\t\t\t\t{\n\t\t\t\t\ttype: \"triangle\",\n\t\t\t\t},\n\t\t\t),\n\t\t});\n\t}\n\n\t/**\n\t *  start the attack portion of the envelope\n\t *  @param time the time the attack should start\n\t *  @param velocity the velocity of the note (0-1)\n\t */\n\tprotected _triggerEnvelopeAttack(time?: Time, velocity: number = 1): void {\n\t\tconst computedTime = this.toSeconds(time);\n\t\t// the envelopes\n\t\tthis.envelope.triggerAttack(computedTime, velocity);\n\t\tthis.oscillator.start(computedTime);\n\t\t// if there is no release portion, stop the oscillator\n\t\tif (this.envelope.sustain === 0) {\n\t\t\tconst computedAttack = this.toSeconds(this.envelope.attack);\n\t\t\tconst computedDecay = this.toSeconds(this.envelope.decay);\n\t\t\tthis.oscillator.stop(computedTime + computedAttack + computedDecay);\n\t\t}\n\t}\n\n\t/**\n\t *  start the release portion of the envelope\n\t *  @param time the time the release should start\n\t */\n\tprotected _triggerEnvelopeRelease(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis.envelope.triggerRelease(time);\n\t\tthis.oscillator.stop(time + this.toSeconds(this.envelope.release));\n\t}\n\n\t/**\n\t *  clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.oscillator.dispose();\n\t\tthis.envelope.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioBuffer } from \"../core/context/ToneAudioBuffer\";\nimport { ToneAudioBuffers } from \"../core/context/ToneAudioBuffers\";\nimport { intervalToFrequencyRatio } from \"../core/type/Conversions\";\nimport { FrequencyClass } from \"../core/type/Frequency\";\nimport { Frequency, Interval, MidiNote, NormalRange, Note, Time } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { isArray, isNote, isNumber, isString } from \"../core/util/TypeCheck\";\nimport { Instrument, InstrumentOptions } from \"../instrument/Instrument\";\nimport { ToneBufferSource, ToneBufferSourceCurve } from \"../source/buffer/BufferSource\";\n\ninterface SamplesMap {\n\t[note: string]: ToneAudioBuffer | AudioBuffer | string;\n\t[midi: number]: ToneAudioBuffer | AudioBuffer | string;\n}\n\ninterface SamplerOptions extends InstrumentOptions {\n\tattack: Time;\n\trelease: Time;\n\tonload: () => void;\n\tbaseUrl: string;\n\tcurve: ToneBufferSourceCurve;\n\turls: SamplesMap;\n}\n\n/**\n * Pass in an object which maps the note's pitch or midi value to the url,\n * then you can trigger the attack and release of that note like other instruments.\n * By automatically repitching the samples, it is possible to play pitches which\n * were not explicitly included which can save loading time.\n *\n * For sample or buffer playback where repitching is not necessary,\n * use {@link Player}.\n * @param samples An object of samples mapping either Midi\n *                         Note Numbers or Scientific Pitch Notation\n *                         to the url of that sample.\n * @param onload The callback to invoke when all of the samples are loaded.\n * @param baseUrl The root URL of all of the samples, which is prepended to all the URLs.\n * @example\n * var sampler = new Sampler({\n * \t\"C3\" : \"path/to/C3.mp3\",\n * \t\"D#3\" : \"path/to/Dsharp3.mp3\",\n * \t\"F#3\" : \"path/to/Fsharp3.mp3\",\n * \t\"A3\" : \"path/to/A3.mp3\",\n * }, function(){\n * \t//sampler will repitch the closest sample\n * \tsampler.triggerAttack(\"D3\")\n * })\n */\nexport class Sampler extends Instrument<SamplerOptions> {\n\n\tname = \"Sampler\";\n\n\t/**\n\t * The stored and loaded buffers\n\t * @type {Tone.Buffers}\n\t * @private\n\t */\n\tprivate _buffers: ToneAudioBuffers;\n\n\t/**\n\t * The object of all currently playing BufferSources\n\t */\n\tprivate _activeSources: Map<MidiNote, ToneBufferSource[]> = new Map();\n\n\t/**\n\t * The envelope applied to the beginning of the sample.\n\t */\n\tattack: Time;\n\n\t/**\n\t * The envelope applied to the end of the envelope.\n\t */\n\trelease: Time;\n\n\t/**\n\t *  The shape of the attack/release curve.\n\t *  Either \"linear\" or \"exponential\"\n\t */\n\tcurve: ToneBufferSourceCurve;\n\n\tconstructor(options?: Partial<SamplerOptions>);\n\tconstructor(samples?: SamplesMap, options?: Partial<Omit<SamplerOptions, \"urls\">>);\n\tconstructor(samples?: SamplesMap, onload?: () => void, baseUrl?: string);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Sampler.getDefaults(), arguments, [\"urls\", \"onload\", \"baseUrl\"], \"urls\"));\n\t\tconst options = optionsFromArguments(Sampler.getDefaults(), arguments, [\"urls\", \"onload\", \"baseUrl\"], \"urls\");\n\n\t\tconst urlMap = {};\n\t\tObject.keys(options.urls).forEach((note) => {\n\t\t\tconst noteNumber = parseInt(note, 10);\n\t\t\tthis.assert(isNote(note)\n\t\t\t\t|| (isNumber(noteNumber) && isFinite(noteNumber)), `url key is neither a note or midi pitch: ${note}`);\n\t\t\tif (isNote(note)) {\n\t\t\t\t// convert the note name to MIDI\n\t\t\t\tconst mid = new FrequencyClass(this.context, note).toMidi();\n\t\t\t\turlMap[mid] = options.urls[note];\n\t\t\t} else if (isNumber(noteNumber) && isFinite(noteNumber)) {\n\t\t\t\t// otherwise if it's numbers assume it's midi\n\t\t\t\turlMap[noteNumber] = options.urls[noteNumber];\n\t\t\t}\n\t\t});\n\n\t\tthis._buffers = new ToneAudioBuffers(urlMap, options.onload, options.baseUrl);\n\t\tthis.attack = options.attack;\n\t\tthis.release = options.release;\n\t\tthis.curve = options.curve;\n\t}\n\n\tstatic getDefaults(): SamplerOptions {\n\t\treturn Object.assign(Instrument.getDefaults(), {\n\t\t\tattack : 0,\n\t\t\tbaseUrl : \"\",\n\t\t\tcurve : \"exponential\" as \"exponential\",\n\t\t\tonload : noOp,\n\t\t\trelease : 0.1,\n\t\t\turls: {},\n\t\t});\n\t}\n\n\t/**\n\t * Returns the difference in steps between the given midi note at the closets sample.\n\t */\n\tprivate _findClosest(midi: MidiNote): Interval {\n\t\t// searches within 8 octaves of the given midi note\n\t\tconst MAX_INTERVAL = 96;\n\t\tlet interval = 0;\n\t\twhile (interval < MAX_INTERVAL) {\n\t\t\t// check above and below\n\t\t\tif (this._buffers.has(midi + interval)) {\n\t\t\t\treturn -interval;\n\t\t\t} else if (this._buffers.has(midi - interval)) {\n\t\t\t\treturn interval;\n\t\t\t}\n\t\t\tinterval++;\n\t\t}\n\t\tthrow new Error(`No available buffers for note: ${midi}`);\n\t}\n\n\t/**\n\t * @param  notes\tThe note to play, or an array of notes.\n\t * @param  time     When to play the note\n\t * @param  velocity The velocity to play the sample back.\n\t */\n\ttriggerAttack(notes: Frequency | Frequency[], time?: Time, velocity: NormalRange = 1): this {\n\t\tthis.log(\"triggerAttack\", notes, time, velocity);\n\t\tif (!Array.isArray(notes)) {\n\t\t\tnotes = [notes];\n\t\t}\n\t\tnotes.forEach(note => {\n\t\t\tconst midi = new FrequencyClass(this.context, note).toMidi();\n\t\t\t// find the closest note pitch\n\t\t\tconst difference = this._findClosest(midi);\n\t\t\tconst closestNote = midi - difference;\n\t\t\tconst buffer = this._buffers.get(closestNote);\n\t\t\tconst playbackRate = intervalToFrequencyRatio(difference);\n\t\t\t// play that note\n\t\t\tconst source = new ToneBufferSource({\n\t\t\t\tbuffer,\n\t\t\t\tcontext: this.context,\n\t\t\t\tcurve : this.curve,\n\t\t\t\tfadeIn : this.attack,\n\t\t\t\tfadeOut : this.release,\n\t\t\t\tplaybackRate,\n\t\t\t}).connect(this.output);\n\t\t\tsource.start(time, 0, buffer.duration / playbackRate, velocity);\n\t\t\t// add it to the active sources\n\t\t\tif (!isArray(this._activeSources.get(midi))) {\n\t\t\t\tthis._activeSources.set(midi, []);\n\t\t\t}\n\t\t\t(this._activeSources.get(midi) as ToneBufferSource[]).push(source);\n\n\t\t\t// remove it when it's done\n\t\t\tsource.onended = () => {\n\t\t\t\tif (this._activeSources && this._activeSources.has(midi)) {\n\t\t\t\t\tconst sources = this._activeSources.get(midi) as ToneBufferSource[];\n\t\t\t\t\tconst index = sources.indexOf(source);\n\t\t\t\t\tif (index !== -1) {\n\t\t\t\t\t\tsources.splice(index, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * @param  notes\tThe note to release, or an array of notes.\n\t * @param  time     \tWhen to release the note.\n\t */\n\ttriggerRelease(notes: Frequency | Frequency[], time?: Time): this {\n\t\tthis.log(\"triggerRelease\", notes, time);\n\t\tif (!Array.isArray(notes)) {\n\t\t\tnotes = [notes];\n\t\t}\n\t\tnotes.forEach(note => {\n\t\t\tconst midi = new FrequencyClass(this.context, note).toMidi();\n\t\t\t// find the note\n\t\t\tif (this._activeSources.has(midi) && (this._activeSources.get(midi) as ToneBufferSource[]).length) {\n\t\t\t\tconst sources = this._activeSources.get(midi) as ToneBufferSource[];\n\t\t\t\ttime = this.toSeconds(time);\n\t\t\t\tsources.forEach(source => {\n\t\t\t\t\tsource.stop(time);\n\t\t\t\t});\n\t\t\t\tthis._activeSources.set(midi, []);\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Release all currently active notes.\n\t * @param  time     \tWhen to release the notes.\n\t */\n\treleaseAll(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._activeSources.forEach(sources => {\n\t\t\twhile (sources.length) {\n\t\t\t\tconst source = sources.shift() as ToneBufferSource;\n\t\t\t\tsource.stop(computedTime);\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sync the instrument to the Transport. All subsequent calls of\n\t * [triggerAttack](#triggerattack) and [triggerRelease](#triggerrelease)\n\t * will be scheduled along the transport.\n\t * @example\n\t * synth.sync()\n\t * //schedule 3 notes when the transport first starts\n\t * synth.triggerAttackRelease('8n', 0)\n\t * synth.triggerAttackRelease('8n', '8n')\n\t * synth.triggerAttackRelease('8n', '4n')\n\t * //start the transport to hear the notes\n\t * Transport.start()\n\t * @returns {Tone.Instrument} this\n\t */\n\tsync(): this {\n\t\tthis._syncMethod(\"triggerAttack\", 1);\n\t\tthis._syncMethod(\"triggerRelease\", 1);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Invoke the attack phase, then after the duration, invoke the release.\n\t * @param  notes\tThe note to play and release, or an array of notes.\n\t * @param  duration The time the note should be held\n\t * @param  time     When to start the attack\n\t * @param  velocity The velocity of the attack\n\t */\n\ttriggerAttackRelease(\n\t\tnotes: Frequency[] | Frequency,\n\t\tduration: Time | Time[],\n\t\ttime?: Time,\n\t\tvelocity: NormalRange = 1,\n\t): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis.triggerAttack(notes, computedTime, velocity);\n\t\tif (isArray(duration)) {\n\t\t\tthis.assert(isArray(notes), \"notes must be an array when duration is array\");\n\t\t\t(notes as Frequency[]).forEach((note, index) => {\n\t\t\t\tconst d = duration[Math.min(index, duration.length - 1)];\n\t\t\t\tthis.triggerRelease(note, computedTime + this.toSeconds(d));\n\t\t\t});\n\t\t} else {\n\t\t\tthis.triggerRelease(notes, computedTime + this.toSeconds(duration));\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a note to the sampler.\n\t * @param  note      The buffer's pitch.\n\t * @param  url  Either the url of the bufer, or a buffer which will be added with the given name.\n\t * @param  callback  The callback to invoke when the url is loaded.\n\t */\n\tadd(note: Note | MidiNote, url: string | ToneAudioBuffer | AudioBuffer, callback?: () => void): this {\n\t\tthis.assert(isNote(note) || isFinite(note), `note must be a pitch or midi: ${note}`);\n\t\tif (isNote(note)) {\n\t\t\t// convert the note name to MIDI\n\t\t\tconst mid = new FrequencyClass(this.context, note).toMidi();\n\t\t\tthis._buffers.add(mid, url, callback);\n\t\t} else {\n\t\t\t// otherwise if it's numbers assume it's midi\n\t\t\tthis._buffers.add(note, url, callback);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * If the buffers are loaded or not\n\t */\n\tget loaded(): boolean {\n\t\treturn this._buffers.loaded;\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._buffers.dispose();\n\t\tthis._activeSources.forEach(sources => {\n\t\t\tsources.forEach(source => source.dispose());\n\t\t});\n\t\tthis._activeSources.clear();\n\t\treturn this;\n\t}\n}\n","import \"../core/clock/Transport\";\nimport { ToneWithContext, ToneWithContextOptions } from \"../core/context/ToneWithContext\";\nimport { TicksClass } from \"../core/type/Ticks\";\nimport { TransportTimeClass } from \"../core/type/TransportTime\";\nimport { NormalRange, Positive, Seconds, Ticks, Time, TransportTime } from \"../core/type/Units\";\nimport { defaultArg, optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { BasicPlaybackState, StateTimeline } from \"../core/util/StateTimeline\";\nimport { isBoolean, isNumber } from \"../core/util/TypeCheck\";\n\nexport type ToneEventCallback<T> = (time: Seconds, value: T) => void;\n\nexport interface ToneEventOptions<T> extends ToneWithContextOptions {\n\tcallback: ToneEventCallback<T>;\n\tloop: boolean | number;\n\tloopEnd: Time;\n\tloopStart: Time;\n\tplaybackRate: Positive;\n\tvalue?: T;\n\tprobability: NormalRange;\n\tmute: boolean;\n\thumanize: boolean | Time;\n}\n\n/**\n * ToneEvent abstracts away this.context.transport.schedule and provides a schedulable\n * callback for a single or repeatable events along the timeline.\n *\n * @param callback The callback to invoke at the time.\n * @param value The value or values which should be passed to the callback function on invocation.\n * @example\n * var chord = new ToneEvent(function(time, chord){\n * \t//the chord as well as the exact time of the event\n * \t//are passed in as arguments to the callback function\n * }, [\"D4\", \"E4\", \"F4\"]);\n * //start the chord at the beginning of the transport timeline\n * chord.start();\n * //loop it every measure for 8 measures\n * chord.loop = 8;\n * chord.loopEnd = \"1m\";\n */\nexport class ToneEvent<ValueType = any> extends ToneWithContext<ToneEventOptions<ValueType>> {\n\n\tname = \"ToneEvent\";\n\n\t/**\n\t *  Loop value\n\t */\n\tprotected _loop: boolean | number;\n\n\t/**\n\t *  The callback to invoke.\n\t */\n\tcallback: ToneEventCallback<ValueType>;\n\n\t/**\n\t *  The value which is passed to the\n\t *  callback function.\n\t */\n\tvalue: ValueType;\n\n\t/**\n\t *  When the note is scheduled to start.\n\t */\n\tprotected _loopStart: Ticks;\n\n\t/**\n\t *  When the note is scheduled to start.\n\t */\n\tprotected _loopEnd: Ticks;\n\n\t/**\n\t *  Tracks the scheduled events\n\t */\n\tprotected _state: StateTimeline<{\n\t\tid: number,\n\t}> = new StateTimeline(\"stopped\");\n\n\t/**\n\t *  The playback speed of the note. A speed of 1\n\t *  is no change.\n\t */\n\tprotected _playbackRate: Positive;\n\n\t/**\n\t *  A delay time from when the event is scheduled to start\n\t */\n\tprotected _startOffset: Ticks = 0;\n\n\t/**\n\t *  private holder of probability value\n\t */\n\tprotected _probability: NormalRange;\n\n\t/**\n\t *  the amount of variation from the given time.\n\t */\n\tprotected _humanize: boolean | Time;\n\n\t/**\n\t *  If mute is true, the callback won't be invoked.\n\t */\n\tmute: boolean;\n\n\tconstructor(callback?: ToneEventCallback<ValueType>, value?: ValueType);\n\tconstructor(options?: Partial<ToneEventOptions<ValueType>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(ToneEvent.getDefaults(), arguments, [\"callback\", \"value\"]));\n\t\tconst options = optionsFromArguments(ToneEvent.getDefaults(), arguments, [\"callback\", \"value\"]);\n\n\t\tthis._loop = options.loop;\n\t\tthis.callback = options.callback;\n\t\tthis.value = options.value;\n\t\tthis._loopStart = this.toTicks(options.loopStart);\n\t\tthis._loopEnd = this.toTicks(options.loopEnd);\n\t\tthis._playbackRate = options.playbackRate;\n\t\tthis._probability = options.probability;\n\t\tthis._humanize = options.humanize;\n\t\tthis.mute = options.mute;\n\t\tthis.playbackRate = options.playbackRate;\n\t}\n\n\tstatic getDefaults(): ToneEventOptions<any> {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tcallback : noOp,\n\t\t\thumanize : false,\n\t\t\tloop : false,\n\t\t\tloopEnd : \"1m\",\n\t\t\tloopStart : 0,\n\t\t\tmute : false,\n\t\t\tplaybackRate : 1,\n\t\t\tprobability : 1,\n\t\t\tvalue : null,\n\t\t});\n\t}\n\n\t/**\n\t *  Reschedule all of the events along the timeline\n\t *  with the updated values.\n\t *  @param after Only reschedules events after the given time.\n\t *  @private\n\t */\n\tprivate _rescheduleEvents(after: Ticks = -1): void {\n\t\t// if no argument is given, schedules all of the events\n\t\tthis._state.forEachFrom(after, event => {\n\t\t\tlet duration;\n\t\t\tif (event.state === \"started\") {\n\t\t\t\tif (event.id !== -1) {\n\t\t\t\t\tthis.context.transport.clear(event.id);\n\t\t\t\t}\n\t\t\t\tconst startTick = event.time + Math.round(this.startOffset / this._playbackRate);\n\t\t\t\tif (this._loop === true || isNumber(this._loop) && this._loop > 1) {\n\t\t\t\t\tduration = Infinity;\n\t\t\t\t\tif (isNumber(this._loop)) {\n\t\t\t\t\t\tduration = (this._loop) * this._getLoopDuration();\n\t\t\t\t\t}\n\t\t\t\t\tconst nextEvent = this._state.getAfter(startTick);\n\t\t\t\t\tif (nextEvent !== null) {\n\t\t\t\t\t\tduration = Math.min(duration, nextEvent.time - startTick);\n\t\t\t\t\t}\n\t\t\t\t\tif (duration !== Infinity) {\n\t\t\t\t\t\t// schedule a stop since it's finite duration\n\t\t\t\t\t\tthis._state.setStateAtTime(\"stopped\", startTick + duration + 1, { id : -1 });\n\t\t\t\t\t\tduration = new TicksClass(this.context, duration);\n\t\t\t\t\t}\n\t\t\t\t\tconst interval = new TicksClass(this.context, this._getLoopDuration());\n\t\t\t\t\tevent.id = this.context.transport.scheduleRepeat(\n\t\t\t\t\t\tthis._tick.bind(this), interval, new TicksClass(this.context, startTick), duration);\n\t\t\t\t} else {\n\t\t\t\t\tevent.id = this.context.transport.schedule(this._tick.bind(this), new TicksClass(this.context, startTick));\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t *  Returns the playback state of the note, either \"started\" or \"stopped\".\n\t */\n\tget state(): BasicPlaybackState {\n\t\treturn this._state.getValueAtTime(this.context.transport.ticks) as BasicPlaybackState;\n\t}\n\n\t/**\n\t * The start from the scheduled start time.\n\t */\n\tget startOffset(): Ticks {\n\t\treturn this._startOffset;\n\t}\n\tset startOffset(offset) {\n\t\tthis._startOffset = offset;\n\t}\n\n\t/**\n\t *  The probability of the notes being triggered.\n\t */\n\tget probability(): NormalRange {\n\t\treturn this._probability;\n\t}\n\tset probability(prob) {\n\t\tthis._probability = prob;\n\t}\n\n\t/**\n\t *  If set to true, will apply small random variation\n\t *  to the callback time. If the value is given as a time, it will randomize\n\t *  by that amount.\n\t * @example\n\t * event.humanize = true;\n\t */\n\tget humanize(): Time | boolean {\n\t\treturn this._humanize;\n\t}\n\n\tset humanize(variation) {\n\t\tthis._humanize = variation;\n\t}\n\n\t/**\n\t *  Start the note at the given time.\n\t *  @param  time  When the event should start.\n\t */\n\tstart(time?: TransportTime | TransportTimeClass): this {\n\t\tconst ticks = this.toTicks(time);\n\t\tif (this._state.getValueAtTime(ticks) === \"stopped\") {\n\t\t\tthis._state.add({\n\t\t\t\tid : -1,\n\t\t\t\tstate : \"started\",\n\t\t\t\ttime: ticks,\n\t\t\t});\n\t\t\tthis._rescheduleEvents(ticks);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Stop the Event at the given time.\n\t *  @param  time  When the event should stop.\n\t */\n\tstop(time?: TransportTime | TransportTimeClass): this {\n\t\tthis.cancel(time);\n\t\tconst ticks = this.toTicks(time);\n\t\tif (this._state.getValueAtTime(ticks) === \"started\") {\n\t\t\tthis._state.setStateAtTime(\"stopped\", ticks, { id: -1 });\n\t\t\tconst previousEvent = this._state.getBefore(ticks);\n\t\t\tlet reschedulTime = ticks;\n\t\t\tif (previousEvent !== null) {\n\t\t\t\treschedulTime = previousEvent.time;\n\t\t\t}\n\t\t\tthis._rescheduleEvents(reschedulTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Cancel all scheduled events greater than or equal to the given time\n\t *  @param  time  The time after which events will be cancel.\n\t */\n\tcancel(time?: TransportTime | TransportTimeClass): this {\n\t\ttime = defaultArg(time, -Infinity);\n\t\tconst ticks = this.toTicks(time);\n\t\tthis._state.forEachFrom(ticks, event => {\n\t\t\tthis.context.transport.clear(event.id);\n\t\t});\n\t\tthis._state.cancel(ticks);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  The callback function invoker. Also\n\t *  checks if the Event is done playing\n\t *  @param  time  The time of the event in seconds\n\t */\n\tprotected _tick(time: Seconds): void {\n\t\tconst ticks = this.context.transport.getTicksAtTime(time);\n\t\tif (!this.mute && this._state.getValueAtTime(ticks) === \"started\") {\n\t\t\tif (this.probability < 1 && Math.random() > this.probability) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (this.humanize) {\n\t\t\t\tlet variation = 0.02;\n\t\t\t\tif (!isBoolean(this.humanize)) {\n\t\t\t\t\tvariation = this.toSeconds(this.humanize);\n\t\t\t\t}\n\t\t\t\ttime += (Math.random() * 2 - 1) * variation;\n\t\t\t}\n\t\t\tthis.callback(time, this.value);\n\t\t}\n\t}\n\n\t/**\n\t *  Get the duration of the loop.\n\t */\n\tprotected _getLoopDuration(): Ticks {\n\t\treturn Math.round((this._loopEnd - this._loopStart) / this._playbackRate);\n\t}\n\n\t/**\n\t *  If the note should loop or not\n\t *  between ToneEvent.loopStart and\n\t *  ToneEvent.loopEnd. If set to true,\n\t *  the event will loop indefinitely,\n\t *  if set to a number greater than 1\n\t *  it will play a specific number of\n\t *  times, if set to false, 0 or 1, the\n\t *  part will only play once.\n\t */\n\tget loop(): boolean | number {\n\t\treturn this._loop;\n\t}\n\tset loop(loop) {\n\t\tthis._loop = loop;\n\t\tthis._rescheduleEvents();\n\t}\n\n\t/**\n\t * \tThe playback rate of the note. Defaults to 1.\n\t *  @example\n\t * note.loop = true;\n\t * //repeat the note twice as fast\n\t * note.playbackRate = 2;\n\t */\n\tget playbackRate(): Positive {\n\t\treturn this._playbackRate;\n\t}\n\tset playbackRate(rate) {\n\t\tthis._playbackRate = rate;\n\t\tthis._rescheduleEvents();\n\t}\n\n\t/**\n\t *  The loopEnd point is the time the event will loop\n\t *  if ToneEvent.loop is true.\n\t */\n\tget loopEnd(): Time {\n\t\treturn new TicksClass(this.context, this._loopEnd).toSeconds();\n\t}\n\tset loopEnd(loopEnd) {\n\t\tthis._loopEnd = this.toTicks(loopEnd);\n\t\tif (this._loop) {\n\t\t\tthis._rescheduleEvents();\n\t\t}\n\t}\n\n\t/**\n\t *  The time when the loop should start.\n\t */\n\tget loopStart(): Time {\n\t\treturn new TicksClass(this.context, this._loopStart).toSeconds();\n\t}\n\tset loopStart(loopStart) {\n\t\tthis._loopStart = this.toTicks(loopStart);\n\t\tif (this._loop) {\n\t\t\tthis._rescheduleEvents();\n\t\t}\n\t}\n\n\t/**\n\t *  The current progress of the loop interval.\n\t *  Returns 0 if the event is not started yet or\n\t *  it is not set to loop.\n\t */\n\tget progress(): NormalRange {\n\t\tif (this._loop) {\n\t\t\tconst ticks = this.context.transport.ticks;\n\t\t\tconst lastEvent = this._state.get(ticks);\n\t\t\tif (lastEvent !== null && lastEvent.state === \"started\") {\n\t\t\t\tconst loopDuration = this._getLoopDuration();\n\t\t\t\tconst progress = (ticks - lastEvent.time) % loopDuration;\n\t\t\t\treturn progress / loopDuration;\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.cancel();\n\t\tthis._state.dispose();\n\t\treturn this;\n\t}\n}\n","import { noOp } from \"Tone/core/util/Interface\";\nimport { TicksClass } from \"../core/type/Ticks\";\nimport { TransportTimeClass } from \"../core/type/TransportTime\";\nimport { NormalRange, Positive, Seconds, Ticks, Time, TransportTime } from \"../core/type/Units\";\nimport { defaultArg, optionsFromArguments } from \"../core/util/Defaults\";\nimport { StateTimeline } from \"../core/util/StateTimeline\";\nimport { isArray, isDefined, isObject, isUndef } from \"../core/util/TypeCheck\";\nimport { ToneEvent, ToneEventCallback, ToneEventOptions } from \"./ToneEvent\";\n\ntype CallbackType<T> =\n\tT extends {\n\t\ttime: Time;\n\t\t[key: string]: any,\n\t} ? T :\n\tT extends ArrayLike<any> ? T[1] :\n\tT extends Time ? null : never;\n\ninterface PartOptions<T> extends Omit<ToneEventOptions<CallbackType<T>>, \"value\"> {\n\tevents: T[];\n}\n\n/**\n *  Part is a collection ToneEvents which can be started/stopped and looped as a single unit.\n *\n *  @param callback The callback to invoke on each event\n *  @param events the array of events\n *  @example\n * var part = new Part(function(time, note){\n * \t//the notes given as the second element in the array\n * \t//will be passed in as the second argument\n * \tsynth.triggerAttackRelease(note, \"8n\", time);\n * }, [[0, \"C2\"], [\"0:2\", \"C3\"], [\"0:3:2\", \"G2\"]]);\n *  @example\n * //use an array of objects as long as the object has a \"time\" attribute\n * var part = new Part(function(time, value){\n * \t//the value is an object which contains both the note and the velocity\n * \tsynth.triggerAttackRelease(value.note, \"8n\", time, value.velocity);\n * }, [{\"time\" : 0, \"note\" : \"C3\", \"velocity\": 0.9},\n * \t   {\"time\" : \"0:2\", \"note\" : \"C4\", \"velocity\": 0.5}\n * ]).start(0);\n */\nexport class Part<ValueType = any> extends ToneEvent<ValueType> {\n\n\tname = \"Part\";\n\n\t/**\n\t *  Tracks the scheduled events\n\t */\n\tprotected _state: StateTimeline<{\n\t\tid: number,\n\t\toffset: number,\n\t}> = new StateTimeline(\"stopped\");\n\n\t/**\n\t * The events that belong to this part\n\t */\n\tprivate _events: Set<ToneEvent> = new Set();\n\n\tconstructor(options?: Partial<PartOptions<ValueType>>);\n\tconstructor(callback?: ToneEventCallback<CallbackType<ValueType>>, value?: ValueType[]);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Part.getDefaults(), arguments, [\"callback\", \"events\"]));\n\t\tconst options = optionsFromArguments(Part.getDefaults(), arguments, [\"callback\", \"events\"]);\n\n\t\t// add the events\n\t\toptions.events.forEach(event => {\n\t\t\tif (isArray(event)) {\n\t\t\t\tthis.add(event[0], event[1]);\n\t\t\t} else {\n\t\t\t\tthis.add(event);\n\t\t\t}\n\t\t});\n\t}\n\n\tstatic getDefaults(): PartOptions<any> {\n\t\treturn Object.assign(ToneEvent.getDefaults(), {\n\t\t\tevents: [],\n\t\t});\n\t}\n\n\t/**\n\t *  Start the part at the given time.\n\t *  @param  time    When to start the part.\n\t *  @param  offset  The offset from the start of the part to begin playing at.\n\t */\n\tstart(time?: TransportTime, offset?: Time): this {\n\t\tconst ticks = this.toTicks(time);\n\t\tif (this._state.getValueAtTime(ticks) !== \"started\") {\n\t\t\toffset = defaultArg(offset, this._loop ? this._loopStart : 0);\n\t\t\tif (this._loop) {\n\t\t\t\toffset = defaultArg(offset, this._loopStart);\n\t\t\t} else {\n\t\t\t\toffset = defaultArg(offset, 0);\n\t\t\t}\n\t\t\tconst computedOffset = this.toTicks(offset);\n\t\t\tthis._state.add({\n\t\t\t\tid : -1,\n\t\t\t\toffset: computedOffset,\n\t\t\t\tstate : \"started\",\n\t\t\t\ttime : ticks,\n\t\t\t});\n\t\t\tthis._forEach(event => {\n\t\t\t\tthis._startNote(event, ticks, computedOffset);\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Start the event in the given event at the correct time given\n\t *  the ticks and offset and looping.\n\t *  @param  event\n\t *  @param  ticks\n\t *  @param  offset\n\t */\n\tprivate _startNote(event: ToneEvent, ticks: Ticks, offset: Ticks): void {\n\t\tticks -= offset;\n\t\tif (this._loop) {\n\t\t\tif (event.startOffset >= this._loopStart && event.startOffset < this._loopEnd) {\n\t\t\t\tif (event.startOffset < offset) {\n\t\t\t\t\t// start it on the next loop\n\t\t\t\t\tticks += this._getLoopDuration();\n\t\t\t\t}\n\t\t\t\tevent.start(new TicksClass(this.context, ticks));\n\t\t\t} else if (event.startOffset < this._loopStart && event.startOffset >= offset) {\n\t\t\t\tevent.loop = false;\n\t\t\t\tevent.start(new TicksClass(this.context, ticks));\n\t\t\t}\n\t\t} else if (event.startOffset >= offset) {\n\t\t\tevent.start(new TicksClass(this.context, ticks));\n\t\t}\n\t}\n\n\tget startOffset(): Ticks {\n\t\treturn this._startOffset;\n\t}\n\tset startOffset(offset) {\n\t\tthis._startOffset = offset;\n\t\tthis._forEach(event => {\n\t\t\tevent.startOffset += this._startOffset;\n\t\t});\n\t}\n\n\t/**\n\t *  Stop the part at the given time.\n\t *  @param  time  When to stop the part.\n\t */\n\tstop(time?: TransportTime): this {\n\t\tconst ticks = this.toTicks(time);\n\t\tthis._state.cancel(ticks);\n\t\tthis._state.setStateAtTime(\"stopped\", ticks);\n\t\tthis._forEach(event => {\n\t\t\tevent.stop(time);\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get/Set an Event's value at the given time.\n\t * If a value is passed in and no event exists at\n\t * the given time, one will be created with that value.\n\t * If two events are at the same time, the first one will\n\t * be returned.\n\t * @example\n\t * part.at(\"1m\"); //returns the part at the first measure\n\t * part.at(\"2m\", \"C2\"); //set the value at \"2m\" to C2.\n\t * //if an event didn't exist at that time, it will be created.\n\t * @param time The time of the event to get or set.\n\t * @param value If a value is passed in, the value of the event at the given time will be set to it.\n\t */\n\tat(time: Time, value?: any): ToneEvent | null {\n\t\tconst timeInTicks = new TransportTimeClass(this.context, time).toTicks();\n\t\tconst tickTime = new TicksClass(this.context, 1).toSeconds();\n\n\t\tconst iterator = this._events.values();\n\t\tlet result = iterator.next();\n\t\twhile (!result.done) {\n\t\t\tconst event = result.value;\n\t\t\tif (Math.abs(timeInTicks - event.startOffset) < tickTime) {\n\t\t\t\tif (isDefined(value)) {\n\t\t\t\t\tevent.value = value;\n\t\t\t\t}\n\t\t\t\treturn event;\n\t\t\t}\n\t\t\tresult = iterator.next();\n\t\t}\n\t\t// if there was no event at that time, create one\n\t\tif (isDefined(value)) {\n\t\t\tthis.add(time, value);\n\t\t\t// return the new event\n\t\t\treturn this.at(time);\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t *  Add a an event to the part.\n\t *  @param time The time the note should start. If an object is passed in, it should\n\t *  \t\t\thave a 'time' attribute and the rest of the object will be used as the 'value'.\n\t *  @param  value\n\t * @example\n\t * part.add(\"1m\", \"C#+11\");\n\t * @example\n\t * part.add({\n\t * \ttime: \"1m\",\n\t * \tnote: \"C#11\"\n\t * });\n\t */\n\tadd(obj: {\n\t\ttime: Time,\n\t\t[key: string]: any;\n\t}): this;\n\tadd(time: Time, value?: any): this;\n\tadd(time: Time | object, value?: any): this {\n\t\t// extract the parameters\n\t\tif (time instanceof Object && Reflect.has(time, \"time\")) {\n\t\t\tvalue = time;\n\t\t\ttime = value.time;\n\t\t}\n\t\tconst ticks = this.toTicks(time);\n\t\tlet event: ToneEvent;\n\t\tif (value instanceof ToneEvent) {\n\t\t\tevent = value;\n\t\t\tevent.callback = this._tick.bind(this);\n\t\t} else {\n\t\t\tevent = new ToneEvent({\n\t\t\t\tcallback : this._tick.bind(this),\n\t\t\t\tcontext: this.context,\n\t\t\t\tvalue,\n\t\t\t});\n\t\t}\n\t\t// the start offset\n\t\tevent.startOffset = ticks;\n\n\t\t// initialize the values\n\t\tevent.set({\n\t\t\thumanize : this.humanize,\n\t\t\tloop : this.loop,\n\t\t\tloopEnd : this.loopEnd,\n\t\t\tloopStart : this.loopStart,\n\t\t\tplaybackRate : this.playbackRate,\n\t\t\tprobability : this.probability,\n\t\t});\n\n\t\tthis._events.add(event);\n\n\t\t// start the note if it should be played right now\n\t\tthis._restartEvent(event);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Restart the given event\n\t */\n\tprivate _restartEvent(event: ToneEvent): void {\n\t\tthis._state.forEach((stateEvent) => {\n\t\t\tif (stateEvent.state === \"started\") {\n\t\t\t\tthis._startNote(event, stateEvent.time, stateEvent.offset);\n\t\t\t} else {\n\t\t\t\t// stop the note\n\t\t\t\tevent.stop(new TicksClass(this.context, stateEvent.time));\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t *  Remove an event from the part. If the event at that time is a Part,\n\t *  it will remove the entire part.\n\t *  @param time The time of the event\n\t *  @param value Optionally select only a specific event value\n\t */\n\tremove(obj: {\n\t\ttime: Time,\n\t\t[key: string]: any;\n\t}): this;\n\tremove(time: Time, value?: any): this;\n\tremove(time: Time | object, value?: any): this {\n\t\t// extract the parameters\n\t\tif (isObject(time) && time.hasOwnProperty(\"time\")) {\n\t\t\tvalue = time;\n\t\t\ttime = value.time;\n\t\t}\n\t\ttime = this.toTicks(time);\n\t\tthis._events.forEach(event => {\n\t\t\tif (event.startOffset === time) {\n\t\t\t\tif (isUndef(value) || (isDefined(value) && event.value === value)) {\n\t\t\t\t\tthis._events.delete(event);\n\t\t\t\t\tevent.dispose();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Remove all of the notes from the group.\n\t */\n\tclear(): this {\n\t\tthis._forEach(event => event.dispose());\n\t\tthis._events.clear();\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Cancel scheduled state change events: i.e. \"start\" and \"stop\".\n\t *  @param after The time after which to cancel the scheduled events.\n\t */\n\tcancel(after?: TransportTime | TransportTimeClass): this {\n\t\tthis._forEach(event => event.cancel(after));\n\t\tthis._state.cancel(this.toTicks(after));\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over all of the events\n\t */\n\tprivate _forEach(callback: (event: ToneEvent) => void): this {\n\t\tif (this._events) {\n\t\t\tthis._events.forEach(event => {\n\t\t\t\tif (event instanceof Part) {\n\t\t\t\t\tevent._forEach(callback);\n\t\t\t\t} else {\n\t\t\t\t\tcallback(event);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Set the attribute of all of the events\n\t *  @param  attr  the attribute to set\n\t *  @param  value      The value to set it to\n\t */\n\tprivate _setAll(attr: string, value: any): void {\n\t\tthis._forEach(event => {\n\t\t\tevent[attr] = value;\n\t\t});\n\t}\n\n\t/**\n\t *  Internal tick method\n\t *  @param  time  The time of the event in seconds\n\t */\n\tprotected _tick(time: Seconds, value?: any): void {\n\t\tif (!this.mute) {\n\t\t\tthis.callback(time, value);\n\t\t}\n\t}\n\n\t/**\n\t *  Determine if the event should be currently looping\n\t *  given the loop boundries of this Part.\n\t *  @param  event  The event to test\n\t */\n\tprivate _testLoopBoundries(event: ToneEvent): void {\n\t\tif (this._loop && (event.startOffset < this._loopStart || event.startOffset >= this._loopEnd)) {\n\t\t\tevent.cancel(0);\n\t\t} else if (event.state === \"stopped\") {\n\t\t\t// reschedule it if it's stopped\n\t\t\tthis._restartEvent(event);\n\t\t}\n\t}\n\n\t/**\n\t *  The probability of the notes being triggered.\n\t */\n\tget probability(): NormalRange {\n\t\treturn this._probability;\n\t}\n\tset probability(prob) {\n\t\tthis._probability = prob;\n\t\tthis._setAll(\"probability\", prob);\n\t}\n\n\t/**\n\t * If set to true, will apply small random variation\n\t * to the callback time. If the value is given as a time, it will randomize\n\t * by that amount.\n\t * @example\n\t * event.humanize = true;\n\t */\n\tget humanize(): boolean | Time {\n\t\treturn this._humanize;\n\t}\n\tset humanize(variation) {\n\t\tthis._humanize = variation;\n\t\tthis._setAll(\"humanize\", variation);\n\t}\n\n\t/**\n\t * If the part should loop or not\n\t * between Part.loopStart and\n\t * Part.loopEnd. If set to true,\n\t * the part will loop indefinitely,\n\t * if set to a number greater than 1\n\t * it will play a specific number of\n\t * times, if set to false, 0 or 1, the\n\t * part will only play once.\n\t * @example\n\t * //loop the part 8 times\n\t * part.loop = 8;\n\t */\n\tget loop(): boolean | number {\n\t\treturn this._loop;\n\t}\n\tset loop(loop) {\n\t\tthis._loop = loop;\n\t\tthis._forEach(event => {\n\t\t\tevent.loopStart = this.loopStart;\n\t\t\tevent.loopEnd = this.loopEnd;\n\t\t\tevent.loop = loop;\n\t\t\tthis._testLoopBoundries(event);\n\t\t});\n\t}\n\n\t/**\n\t *  The loopEnd point determines when it will\n\t *  loop if Part.loop is true.\n\t *  @memberOf Part#\n\t *  @type {Time}\n\t *  @name loopEnd\n\t */\n\tget loopEnd(): Time {\n\t\treturn new TicksClass(this.context, this._loopEnd).toSeconds();\n\t}\n\tset loopEnd(loopEnd) {\n\t\tthis._loopEnd = this.toTicks(loopEnd);\n\t\tif (this._loop) {\n\t\t\tthis._forEach(event => {\n\t\t\t\tevent.loopEnd = loopEnd;\n\t\t\t\tthis._testLoopBoundries(event);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t *  The loopStart point determines when it will\n\t *  loop if Part.loop is true.\n\t */\n\tget loopStart(): Time {\n\t\treturn new TicksClass(this.context, this._loopStart).toSeconds();\n\t}\n\tset loopStart(loopStart) {\n\t\tthis._loopStart = this.toTicks(loopStart);\n\t\tif (this._loop) {\n\t\t\tthis._forEach(event => {\n\t\t\t\tevent.loopStart = this.loopStart;\n\t\t\t\tthis._testLoopBoundries(event);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * \tThe playback rate of the part\n\t */\n\tget playbackRate(): Positive {\n\t\treturn this._playbackRate;\n\t}\n\tset playbackRate(rate) {\n\t\tthis._playbackRate = rate;\n\t\tthis._setAll(\"playbackRate\", rate);\n\t}\n\n\t/**\n\t * \tThe number of scheduled notes in the part.\n\t */\n\tget length(): number {\n\t\treturn this._events.size;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.clear();\n\t\treturn this;\n\t}\n}\n","import { TicksClass } from \"../core/type/Ticks\";\nimport { NormalRange, Positive, Seconds, Ticks, Time, TransportTime } from \"../core/type/Units\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { isArray, isString } from \"../core/util/TypeCheck\";\nimport { Part } from \"./Part\";\nimport { ToneEvent, ToneEventCallback, ToneEventOptions } from \"./ToneEvent\";\n\ntype SequenceEventDescription<T> = Array<T | T[]>;\n\ninterface SequenceOptions<T> extends Omit<ToneEventOptions<T>, \"value\"> {\n\tloopStart: number;\n\tloopEnd: number;\n\tsubdivision: Time;\n\tevents: SequenceEventDescription<T>;\n}\n\n/**\n * A sequence is an alternate notation of a part. Instead\n * of passing in an array of [time, event] pairs, pass\n * in an array of events which will be spaced at the\n * given subdivision. Sub-arrays will subdivide that beat\n * by the number of items are in the array.\n * Sequence notation inspiration from [Tidal](http://yaxu.org/tidal/)\n * @param  callback  The callback to invoke with every note\n * @param  sequence  The sequence\n * @param  subdivision  The subdivision between which events are placed.\n * @example\n * var seq = new Sequence(function(time, note){\n * \tconsole.log(note);\n * //straight quater notes\n * }, [\"C4\", \"E4\", \"G4\", \"A4\"], \"4n\");\n * @example\n * var seq = new Sequence(function(time, note){\n * \tconsole.log(note);\n * //subdivisions are given as subarrays\n * }, [\"C4\", [\"E4\", \"D4\", \"E4\"], \"G4\", [\"A4\", \"G4\"]]);\n */\nexport class Sequence<ValueType = any> extends ToneEvent<ValueType> {\n\n\tname = \"Sequence\";\n\n\t/**\n\t *  The subdivison of each note\n\t */\n\tprivate _subdivision: Ticks;\n\n\t/**\n\t * The object responsible for scheduling all of the events\n\t */\n\tprivate _part: Part = new Part({\n\t\tcallback: this._seqCallback.bind(this),\n\t\tcontext: this.context,\n\t});\n\n\t/**\n\t * private reference to all of the sequence proxies\n\t */\n\tprivate _events: ValueType[] = [];\n\n\t/**\n\t * The proxied array\n\t */\n\tprivate _eventsArray: ValueType[] = [];\n\n\tconstructor(\n\t\tcallback?: ToneEventCallback<ValueType>,\n\t\tevents?: SequenceEventDescription<ValueType>,\n\t\tsubdivision?: Time,\n\t);\n\tconstructor(options?: Partial<SequenceOptions<ValueType>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Sequence.getDefaults(), arguments, [\"callback\", \"events\", \"subdivision\"]));\n\t\tconst options = optionsFromArguments(Sequence.getDefaults(), arguments, [\"callback\", \"events\", \"subdivision\"]);\n\n\t\tthis._subdivision = this.toTicks(options.subdivision);\n\n\t\tthis.events = options.events;\n\n\t\t// set all of the values\n\t\tthis.loop = options.loop;\n\t\tthis.loopStart = options.loopStart;\n\t\tthis.loopEnd = options.loopEnd;\n\t\tthis.playbackRate = options.playbackRate;\n\t\tthis.probability = options.probability;\n\t\tthis.humanize = options.humanize;\n\t\tthis.mute = options.mute;\n\t\tthis.playbackRate = options.playbackRate;\n\t}\n\n\tstatic getDefaults(): SequenceOptions<any> {\n\t\treturn Object.assign( omitFromObject(ToneEvent.getDefaults(), [\"value\"]), {\n\t\t\tevents: [],\n\t\t\tloop: true,\n\t\t\tloopEnd : 0,\n\t\t\tloopStart: 0,\n\t\t\tsubdivision: \"8n\",\n\t\t});\n\t}\n\n\t/**\n\t * The internal callback for when an event is invoked\n\t */\n\tprivate _seqCallback(time: Seconds, value: any): void {\n\t\tif (value !== null) {\n\t\t\tthis.callback(time, value);\n\t\t}\n\t}\n\n\t/**\n\t * The sequence\n\t */\n\tget events(): any[] {\n\t\treturn this._events;\n\t}\n\tset events(s) {\n\t\tthis.clear();\n\t\tthis._eventsArray = s;\n\t\tthis._events = this._createSequence(this._eventsArray);\n\t\tthis._eventsUpdated();\n\t}\n\n\t/**\n\t *  Start the part at the given time.\n\t *  @param  time    When to start the part.\n\t *  @param  offset  The offset index to start at\n\t */\n\tstart(time?: TransportTime, offset?: number): this {\n\t\tthis._part.start(time, offset ? this._indexTime(offset) : offset);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Stop the part at the given time.\n\t *  @param  time  When to stop the part.\n\t */\n\tstop(time?: TransportTime): this {\n\t\tthis._part.stop(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  The subdivision of the sequence. This can only be\n\t *  set in the constructor. The subdivision is the\n\t *  interval between successive steps.\n\t */\n\tget subdivision(): Seconds {\n\t\treturn new TicksClass(this.context, this._subdivision).toSeconds();\n\t}\n\n\t/**\n\t * Create a sequence proxy which can be monitored to create subsequences\n\t */\n\tprivate _createSequence(array: any[]): any[] {\n\t\treturn new Proxy(array, {\n\t\t\tget: (target: any[], property: PropertyKey): any => {\n\t\t\t\t// property is index in this case\n\t\t\t\treturn target[property];\n\t\t\t},\n\t\t\tset: (target: any[], property: PropertyKey, value: any): boolean => {\n\t\t\t\tif (isString(property) && isFinite(parseInt(property, 10))) {\n\t\t\t\t\tconst index = parseInt(property, 10);\n\t\t\t\t\tif (isArray(value)) {\n\t\t\t\t\t\ttarget[property] = this._createSequence(value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttarget[property] = value;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttarget[property] = value;\n\t\t\t\t}\n\t\t\t\tthis._eventsUpdated();\n\t\t\t\t// return true to accept the changes\n\t\t\t\treturn true;\n\t\t\t},\n\t\t});\n\t}\n\n\t/**\n\t * When the sequence has changed, all of the events need to be recreated\n\t */\n\tprivate _eventsUpdated(): void {\n\t\tthis._part.clear();\n\t\tthis._rescheduleSequence(this._eventsArray, this._subdivision, this.startOffset);\n\t\t// update the loopEnd\n\t\tthis.loopEnd = this.loopEnd;\n\t}\n\n\t/**\n\t * reschedule all of the events that need to be rescheduled\n\t */\n\tprivate _rescheduleSequence(sequence: any[], subdivision: Ticks, startOffset: Ticks): void {\n\t\tsequence.forEach((value, index) => {\n\t\t\tconst eventOffset = index * (subdivision) + startOffset;\n\t\t\tif (isArray(value)) {\n\t\t\t\tthis._rescheduleSequence(value, subdivision / value.length, eventOffset);\n\t\t\t} else {\n\t\t\t\tconst startTime = new TicksClass(this.context, eventOffset, \"i\").toSeconds();\n\t\t\t\tthis._part.add(startTime, value);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t *  Get the time of the index given the Sequence's subdivision\n\t *  @param  index\n\t *  @return The time of that index\n\t *  @private\n\t */\n\tprivate _indexTime(index: number): Seconds {\n\t\treturn new TicksClass(this.context, index * (this._subdivision) + this.startOffset).toSeconds();\n\t}\n\n\t/**\n\t * Clear all of the events\n\t */\n\tclear(): this {\n\t\tthis._part.clear();\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._part.dispose();\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// PROXY CALLS\n\t///////////////////////////////////////////////////////////////////////////\n\n\tget loop(): boolean | number {\n\t\treturn this._part.loop;\n\t}\n\tset loop(l) {\n\t\tif (this._part) {\n\t\t\tthis._part.loop = l;\n\t\t}\n\t}\n\n\t/**\n\t * The index at which the sequence should start looping\n\t */\n\tget loopStart(): number {\n\t\treturn this._loopStart;\n\t}\n\tset loopStart(index) {\n\t\tthis._loopStart = index;\n\t\tif (this._part) {\n\t\t\tthis._part.loopStart = this._indexTime(index);\n\t\t}\n\t}\n\n\t/**\n\t * The index at which the sequence should end looping\n\t */\n\tget loopEnd(): number {\n\t\treturn this._loopEnd;\n\t}\n\tset loopEnd(index) {\n\t\tthis._loopEnd = index;\n\t\tif (this._part) {\n\t\t\tif (index === 0) {\n\t\t\t\tthis._part.loopEnd = this._indexTime(this._eventsArray.length);\n\t\t\t} else {\n\t\t\t\tthis._part.loopEnd = this._indexTime(index);\n\t\t\t}\n\t\t}\n\t}\n\n\tget startOffset(): Ticks {\n\t\treturn this._part.startOffset;\n\t}\n\tset startOffset(start) {\n\t\tif (this._part) {\n\t\t\tthis._part.startOffset = start;\n\t\t}\n\t}\n\n\tget playbackRate(): Positive {\n\t\treturn this._part.playbackRate;\n\t}\n\tset playbackRate(rate) {\n\t\tif (this._part) {\n\t\t\tthis._part.playbackRate = rate;\n\t\t}\n\t}\n\n\tget probability(): NormalRange {\n\t\treturn this._part.probability;\n\t}\n\tset probability(prob) {\n\t\tif (this._part) {\n\t\t\tthis._part.probability = prob;\n\t\t}\n\t}\n\n\tget humanize(): boolean | Time {\n\t\treturn this._part.humanize;\n\t}\n\tset humanize(variation) {\n\t\tif (this._part) {\n\t\t\tthis._part.humanize = variation;\n\t\t}\n\t}\n\n\t/**\n\t * The number of scheduled events\n\t */\n\tget length(): number {\n\t\treturn this._part.length;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { connect, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { NormalRange } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { GainToAudio } from \"../../signal/GainToAudio\";\nimport { Signal } from \"../../signal/Signal\";\n\ninterface CrossFadeOptions extends ToneAudioNodeOptions {\n\tfade: NormalRange;\n}\n\n/**\n * Tone.Crossfade provides equal power fading between two inputs.\n * More on crossfading technique [here](https://en.wikipedia.org/wiki/Fade_(audio_engineering)#Crossfading).\n * ```\n *                                             +---------+\n *                                            +> input a +>--+\n * +-----------+   +---------------------+     |         |   |\n * | 1s signal +>--> stereoPannerNode  L +>----> gain    |   |\n * +-----------+   |                     |     +---------+   |\n *               +-> pan               R +>-+                |   +--------+\n *               | +---------------------+  |                +---> output +>\n *  +------+     |                          |  +---------+   |   +--------+\n *  | fade +>----+                          | +> input b +>--+\n *  +------+                                |  |         |\n *                                          +--> gain    |\n *                                             +---------+\n * ```\n * @example\n * var crossFade = new CrossFade(0.5);\n * //connect effect A to crossfade from\n * //effect output 0 to crossfade input 0\n * effectA.connect(crossFade.a);\n * //connect effect B to crossfade from\n * //effect output 0 to crossfade input 1\n * effectB.connect(crossFade.b);\n * crossFade.fade.value = 0;\n * // ^ only effectA is output\n * crossFade.fade.value = 1;\n * // ^ only effectB is output\n * crossFade.fade.value = 0.5;\n * // ^ the two signals are mixed equally.\n */\nexport class CrossFade extends ToneAudioNode<CrossFadeOptions> {\n\n\treadonly name = \"CrossFade\";\n\n\t/**\n\t * The crossfading is done by a StereoPannerNode\n\t */\n\tprivate _panner: StereoPannerNode = this.context.createStereoPanner();\n\n\t/**\n\t * Split the output of the panner node into two values used to control the gains.\n\t */\n\tprivate _split: ChannelSplitterNode = this.context.createChannelSplitter(2);\n\n\t/**\n\t * Convert the fade value into an audio range value so it can be connected\n\t * to the panner.pan AudioParam\n\t */\n\tprivate _g2a: GainToAudio = new GainToAudio({ context : this.context });\n\n\t/**\n\t * The input which is at full level when fade = 0\n\t */\n\ta: Gain = new Gain({\n\t\tcontext : this.context,\n\t\tgain: 0,\n\t});\n\n\t/**\n\t * The input which is at full level when fade = 1\n\t */\n\tb: Gain = new Gain({\n\t\tcontext : this.context,\n\t\tgain: 0,\n\t});\n\n\t/**\n\t * The output is a mix between `a` and `b` at the ratio of `fade`\n\t */\n\toutput: Gain = new Gain({ context : this.context });\n\n\t/**\n\t * CrossFade has no input, you must choose either `a` or `b`\n\t */\n\tinput: undefined;\n\n\t/**\n\t * \tThe mix between the two inputs. A fade value of 0\n\t * \twill output 100% crossFade.a and\n\t * \ta value of 1 will output 100% crossFade.b.\n\t */\n\treadonly fade: Signal<NormalRange>;\n\n\tprotected _internalChannels = [this.a, this.b];\n\n\tconstructor(options?: Partial<CrossFadeOptions>);\n\t// tslint:disable-next-line: unified-signatures\n\tconstructor(fade?: NormalRange);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(CrossFade.getDefaults(), arguments, [\"fade\"])));\n\t\tconst options = optionsFromArguments(CrossFade.getDefaults(), arguments, [\"fade\"]);\n\n\t\tthis.fade = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"normalRange\",\n\t\t\tvalue: options.fade,\n\t\t});\n\t\treadOnly(this, \"fade\");\n\n\t\tthis.context.getConstant(1).connect(this._panner);\n\t\tthis._panner.connect(this._split);\n\t\tconnect(this._split, this.a.gain, 0);\n\t\tconnect(this._split, this.b.gain, 1);\n\n\t\tthis.fade.chain(this._g2a, this._panner.pan);\n\n\t\tthis.a.connect(this.output);\n\t\tthis.b.connect(this.output);\n\t}\n\n\tstatic getDefaults(): CrossFadeOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tfade: 0.5,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.a.dispose();\n\t\tthis.b.dispose();\n\t\tthis.output.dispose();\n\t\tthis.fade.dispose();\n\t\tthis._g2a.dispose();\n\t\tthis._panner.disconnect();\n\t\tthis._split.disconnect();\n\t\treturn this;\n\t}\n}\n","import { CrossFade } from \"../component/channel/CrossFade\";\nimport { Gain } from \"../core/context/Gain\";\nimport { InputNode, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { NormalRange } from \"../core/type/Units\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Signal } from \"../signal/Signal\";\n\nexport interface EffectOptions extends ToneAudioNodeOptions {\n\twet: NormalRange;\n}\n/**\n * \t@class  Effect is the base class for effects. Connect the effect between\n * \t        the effectSend and effectReturn GainNodes, then control the amount of\n * \t        effect which goes to the output using the wet control.\n *\n *  @constructor\n *  @extends {Tone.AudioNode}\n *  @param {NormalRange|Object} [wet] The starting wet value.\n */\nexport abstract class Effect<Options extends EffectOptions>\nextends ToneAudioNode<Options> {\n\n\treadonly name: string = \"Effect\";\n\n\t/**\n\t *  the drywet knob to control the amount of effect\n\t */\n\tprivate _dryWet: CrossFade = new CrossFade({ context : this.context });\n\n\t/**\n\t *  The wet control is how much of the effected\n\t *  will pass through to the output. 1 = 100% effected\n\t *  signal, 0 = 100% dry signal.\n\t */\n\twet: Signal<NormalRange> = this._dryWet.fade;\n\n\t/**\n\t *  connect the effectSend to the input of hte effect\n\t */\n\tprotected effectSend: Gain = new Gain({ context : this.context });\n\n\t/**\n\t *  connect the output of the effect to the effectReturn\n\t */\n\tprotected effectReturn: Gain = new Gain({ context : this.context });\n\n\t/**\n\t * The effect input node\n\t */\n\tinput: Gain = new Gain({ context : this.context });\n\n\t/**\n\t * The effect output\n\t */\n\toutput = this._dryWet;\n\n\tconstructor(options: EffectOptions) {\n\t\tsuper(options);\n\n\t\t// connections\n\t\tthis.input.fan(this._dryWet.a, this.effectSend);\n\t\tthis.effectReturn.connect(this._dryWet.b);\n\t\tthis.wet.setValueAtTime(options.wet, 0);\n\t\tthis._internalChannels = [this.effectReturn, this.effectSend];\n\t\treadOnly(this, \"wet\");\n\t}\n\n\tstatic getDefaults(): EffectOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\twet : 1,\n\t\t});\n\t}\n\n\t/**\n\t *  chains the effect in between the effectSend and effectReturn\n\t */\n\tprotected connectEffect(effect: ToneAudioNode | AudioNode): this {\n\t\t// add it to the internal channels\n\t\tthis._internalChannels.push(effect);\n\t\tthis.effectSend.chain(effect, this.effectReturn);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._dryWet.dispose();\n\t\tthis.effectSend.dispose();\n\t\tthis.effectReturn.dispose();\n\t\tthis.wet.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../core/context/Gain\";\nimport { Param } from \"../core/context/Param\";\nimport { NormalRange } from \"../core/type/Units\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Effect, EffectOptions } from \"./Effect\";\n\nexport interface FeedbackEffectOptions extends EffectOptions {\n\t/**\n\t * The feedback from the output back to the input\n\t * ```\n\t * +---<--------<---+\n\t * |                |\n\t * |  +----------+  |\n\t * +--> feedback +>-+\n\t *    +----------+\n\t * ```\n\t */\n\tfeedback: NormalRange;\n}\n\n/**\n * FeedbackEffect provides a loop between an audio source and its own output.\n * This is a base-class for feedback effects.\n */\nexport abstract class FeedbackEffect<Options extends FeedbackEffectOptions> extends Effect<Options> {\n\n\tname = \"FeedbackEffect\";\n\n\t/**\n\t *  the gain which controls the feedback\n\t */\n\tprivate _feedbackGain: Gain<NormalRange>;\n\n\t/**\n\t *  The amount of signal which is fed back into the effect input.\n\t */\n\tfeedback: Param<NormalRange>;\n\n\tconstructor(options: FeedbackEffectOptions) {\n\n\t\tsuper(options);\n\n\t\tthis._feedbackGain = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: options.feedback,\n\t\t\tunits: \"normalRange\",\n\t\t});\n\n\t\tthis.feedback = this._feedbackGain.gain;\n\t\treadOnly(this, \"feedback\");\n\n\t\t// the feedback loop\n\t\tthis.effectReturn.chain(this._feedbackGain, this.effectSend);\n\t}\n\n\tstatic getDefaults(): FeedbackEffectOptions {\n\t\treturn Object.assign(Effect.getDefaults(), {\n\t\t\tfeedback: 0.125,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._feedbackGain.dispose();\n\t\tthis.feedback.dispose();\n\t\treturn this;\n\t}\n}\n","import { Delay } from \"../core/context/Delay\";\nimport { Param } from \"../core/context/Param\";\nimport { NormalRange, Time } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { FeedbackEffect,  FeedbackEffectOptions } from \"./FeedbackEffect\";\n\ninterface FeedbackDelayOptions extends FeedbackEffectOptions {\n\tdelayTime: Time;\n\tmaxDelay: Time;\n}\n\n/**\n * FeedbackDelay is a DelayNode in which part of output signal is fed back into the delay.\n *\n * @param delayTime The delay applied to the incoming signal.\n * @param feedback The amount of the effected signal which is fed back through the delay.\n * @example\n * var feedbackDelay = new FeedbackDelay(\"8n\", 0.5).toDestination();\n * var tom = new Tone.MembraneSynth({\n * \t\"octaves\" : 4,\n * \t\"pitchDecay\" : 0.1\n * }).connect(feedbackDelay);\n * tom.triggerAttackRelease(\"A2\",\"32n\");\n */\nexport class FeedbackDelay extends FeedbackEffect<FeedbackDelayOptions> {\n\n\tname = \"FeedbackDelay\";\n\n\t/**\n\t *  the delay node\n\t */\n\tprivate _delayNode: Delay;\n\n\t/**\n\t *  The delayTime of the FeedbackDelay.\n\t */\n\treadonly delayTime: Param<Time>;\n\n\tconstructor(delayTime?: Time, feedback?: NormalRange);\n\tconstructor(options?: Partial<FeedbackDelayOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(FeedbackDelay.getDefaults(), arguments, [\"delayTime\", \"feedback\"]));\n\t\tconst options = optionsFromArguments(FeedbackDelay.getDefaults(), arguments, [\"delayTime\", \"feedback\"]);\n\n\t\tthis._delayNode = new Delay({\n\t\t\tcontext: this.context,\n\t\t\tdelayTime: options.delayTime,\n\t\t\tmaxDelay: options.maxDelay,\n\t\t});\n\t\tthis.delayTime = this._delayNode.delayTime;\n\n\t\t// connect it up\n\t\tthis.connectEffect(this._delayNode);\n\t\treadOnly(this, \"delayTime\");\n\t}\n\n\tstatic getDefaults(): FeedbackDelayOptions {\n\t\treturn Object.assign(FeedbackEffect.getDefaults(), {\n\t\t\tdelayTime: 0.25,\n\t\t\tmaxDelay: 1,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._delayNode.dispose();\n\t\tthis.delayTime.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioBuffer } from \"../core/context/ToneAudioBuffer\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { Effect, EffectOptions } from \"./Effect\";\n\ninterface ToneConvolverOptions extends EffectOptions {\n\tonload: () => void;\n\tnormalize: boolean;\n\turl?: string | AudioBuffer | ToneAudioBuffer;\n}\n\n/**\n * Convolver is a wrapper around the Native Web Audio\n * [ConvolverNode](http://webaudio.github.io/web-audio-api/#the-convolvernode-interface).\n * Convolution is useful for reverb and filter emulation. Read more about convolution reverb on\n * [Wikipedia](https://en.wikipedia.org/wiki/Convolution_reverb).\n *\n * @param url The URL of the impulse response or the Tone.Buffer contianing the impulse response.\n * @param onload The callback to invoke when the url is loaded.\n * @example\n * //initializing the convolver with an impulse response\n * var convolver = new Convolver(\"./path/to/ir.wav\").toDestination();\n */\nexport class Convolver extends Effect<ToneConvolverOptions> {\n\n\tname = \"Convolver\";\n\n\t/**\n\t *  The native ConvolverNode\n\t */\n\tprivate _convolver: ConvolverNode = this.context.createConvolver();\n\n\t/**\n\t *  The Buffer belonging to the convolver\n\t */\n\tprivate _buffer: ToneAudioBuffer;\n\n\tconstructor(url?: string | AudioBuffer | ToneAudioBuffer, onload?: () => void);\n\tconstructor(options?: Partial<ToneConvolverOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Convolver.getDefaults(), arguments, [\"url\", \"onload\"]));\n\t\tconst options = optionsFromArguments(Convolver.getDefaults(), arguments, [\"url\", \"onload\"]);\n\n\t\tthis._buffer = new ToneAudioBuffer(options.url, buffer => {\n\t\t\tthis.buffer = buffer;\n\t\t\toptions.onload();\n\t\t});\n\n\t\t// set if it's already loaded\n\t\tif (this._buffer.loaded) {\n\t\t\tthis.buffer = this._buffer;\n\t\t}\n\n\t\t// initially set normalization\n\t\tthis.normalize = options.normalize;\n\n\t\t// connect it up\n\t\tthis.connectEffect(this._convolver);\n\t}\n\n\tstatic getDefaults(): ToneConvolverOptions {\n\t\treturn Object.assign(Effect.getDefaults(), {\n\t\t\tnormalize : true,\n\t\t\tonload : noOp,\n\t\t});\n\t}\n\n\t/**\n\t * Load an impulse response url as an audio buffer.\n\t * Decodes the audio asynchronously and invokes\n\t * the callback once the audio buffer loads.\n\t * @param url The url of the buffer to load. filetype support depends on the browser.\n\t */\n\tasync load(url: string): Promise<void> {\n\t\tthis.buffer = await this._buffer.load(url);\n\t}\n\n\t/**\n\t *  The convolver's buffer\n\t */\n\tget buffer(): ToneAudioBuffer | null {\n\t\tif (this._buffer.length) {\n\t\t\treturn this._buffer;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\tset buffer(buffer) {\n\t\tif (buffer) {\n\t\t\tthis._buffer.set(buffer);\n\t\t}\n\t\t// if it's already got a buffer, create a new one\n\t\tif (this._convolver.buffer) {\n\t\t\t// disconnect the old one\n\t\t\tthis.effectSend.disconnect();\n\t\t\tthis._convolver.disconnect();\n\t\t\t// create and connect a new one\n\t\t\tthis._convolver = this.context.createConvolver();\n\t\t\tthis.connectEffect(this._convolver);\n\t\t}\n\t\tconst buff = this._buffer.get();\n\t\tthis._convolver.buffer = buff ? buff : null;\n\t}\n\n\t/**\n\t * The normalize property of the ConvolverNode interface is a boolean that\n\t * controls whether the impulse response from the buffer will be scaled by\n\t * an equal-power normalization when the buffer attribute is set, or not.\n\t */\n\tget normalize(): boolean {\n\t\treturn this._convolver.normalize;\n\t}\n\tset normalize(norm) {\n\t\tthis._convolver.normalize = norm;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._buffer.dispose();\n\t\tthis._convolver.disconnect();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { NormalRange, PowerOfTwo } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n\ntype AnalyserType = \"fft\" | \"waveform\";\n\ninterface AnalyserOptions extends ToneAudioNodeOptions {\n\tsize: PowerOfTwo;\n\ttype: AnalyserType;\n\tsmoothing: NormalRange;\n}\n\n/**\n *  Wrapper around the native Web Audio's [AnalyserNode](http://webaudio.github.io/web-audio-api/#idl-def-AnalyserNode).\n *  Extracts FFT or Waveform data from the incoming signal.\n *  @param type The return type of the analysis, either \"fft\", or \"waveform\".\n *  @param size The size of the FFT. This must be a power of two in the range 16 to 16384.\n */\nexport class Analyser extends ToneAudioNode<AnalyserOptions> {\n\n\treadonly name = \"Analyser\";\n\n\tinput: AnalyserNode;\n\toutput: AnalyserNode;\n\n\t/**\n\t *  The analyser node.\n\t */\n\tprivate _analyser = this.context.createAnalyser();\n\n\t/**\n\t *  The analysis type\n\t */\n\tprivate _type!: AnalyserType;\n\n\t/**\n\t *  The buffer that the FFT data is written to\n\t */\n\tprivate _buffer!: Float32Array;\n\n\tconstructor(type?: AnalyserType, size?: number);\n\tconstructor(options?: Partial<AnalyserOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Analyser.getDefaults(), arguments, [\"type\", \"size\"]));\n\t\tconst options = optionsFromArguments(Analyser.getDefaults(), arguments, [\"type\", \"size\"]);\n\t\t// set the values initially\n\t\tthis.size = options.size;\n\t\tthis.type = options.type;\n\t\tthis.input = this.output = this._analyser;\n\t}\n\n\tstatic getDefaults(): AnalyserOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tsize: 1024,\n\t\t\tsmoothing: 0.8,\n\t\t\ttype: \"fft\" as AnalyserType,\n\t\t});\n\t}\n\n\t/**\n\t *  Run the analysis given the current settings and return the\n\t */\n\tgetValue(): Float32Array {\n\t\tif (this._type === \"fft\") {\n\t\t\tthis._analyser.getFloatFrequencyData(this._buffer);\n\t\t} else if (this._type === \"waveform\") {\n\t\t\tthis._analyser.getFloatTimeDomainData(this._buffer);\n\t\t}\n\t\treturn this._buffer;\n\t}\n\n\t/**\n\t *  The size of analysis. This must be a power of two in the range 16 to 16384.\n\t */\n\tget size(): PowerOfTwo {\n\t\treturn this._analyser.frequencyBinCount;\n\t}\n\tset size(size: PowerOfTwo) {\n\t\tthis._analyser.fftSize = size * 2;\n\t\tthis._buffer = new Float32Array(size);\n\t}\n\n\t/**\n\t *  The analysis function returned by analyser.getValue(), either \"fft\" or \"waveform\".\n\t */\n\tget type(): AnalyserType {\n\t\treturn this._type;\n\t}\n\tset type(type: AnalyserType) {\n\t\tthis.assert(type === \"waveform\" || type === \"fft\", `Analyser: invalid type: ${type}`);\n\t\tthis._type = type;\n\t}\n\n\t/**\n\t *  0 represents no time averaging with the last analysis frame.\n\t */\n\tget smoothing(): NormalRange {\n\t\treturn this._analyser.smoothingTimeConstant;\n\t}\n\n\tset smoothing(val: NormalRange) {\n\t\tthis._analyser.smoothingTimeConstant = val;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._analyser.disconnect();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Positive } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n\ninterface MergeOptions extends ToneAudioNodeOptions {\n\tchannels: Positive;\n}\n\n/**\n * Merge brings multiple mono input channels into a single multichannel output channel.\n *\n * @param channels The number of channels to merge.\n * @example\n * var merge = new Merge().toDestination();\n * //routing a sine tone in the left channel\n * //and noise in the right channel\n * var osc = new Tone.Oscillator().connect(merge.left);\n * var noise = new Tone.Noise().connect(merge.right);\n * //starting our oscillators\n * noise.start();\n * osc.start();\n */\nexport class Merge extends ToneAudioNode<MergeOptions> {\n\n\treadonly name = \"Merge\";\n\n\t/**\n\t *  The merger node for the two channels.\n\t */\n\tprivate _merger: ChannelMergerNode;\n\n\t/**\n\t * The output is the input channels combined into a sigle (multichannel) output\n\t */\n\treadonly output: ChannelMergerNode;\n\n\t/**\n\t * Multiple input connections combine into a single output.\n\t */\n\treadonly input: ChannelMergerNode;\n\n\tconstructor(channels?: Positive);\n\t// tslint:disable-next-line: unified-signatures\n\tconstructor(options?: Partial<MergeOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Merge.getDefaults(), arguments, [\"channels\"]));\n\t\tconst options = optionsFromArguments(Merge.getDefaults(), arguments, [\"channels\"]);\n\n\t\tthis._merger = this.output = this.input = this.context.createChannelMerger(options.channels);\n\t}\n\n\tstatic getDefaults(): MergeOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tchannels: 2,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._merger.disconnect();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { connectSeries, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Cents, Decibels, Frequency, GainFactor, Positive } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { isNumber } from \"../../core/util/TypeCheck\";\nimport { Signal } from \"../../signal/Signal\";\n\ninterface FilterOptions extends ToneAudioNodeOptions {\n\ttype: BiquadFilterType;\n\tfrequency: Frequency;\n\trolloff: number;\n\tQ: Positive;\n\tdetune: Cents;\n\tgain: GainFactor;\n}\n\n/**\n *  @class  Tone.Filter is a filter which allows for all of the same native methods\n *          as the [BiquadFilterNode](http://webaudio.github.io/web-audio-api/#the-biquadfilternode-interface).\n *          Tone.Filter has the added ability to set the filter rolloff at -12\n *          (default), -24 and -48.\n *\n *  @constructor\n *  @extends {Tone.AudioNode}\n *  @param frequency The cutoff frequency of the filter.\n *  @param type The type of filter.\n *  @param rolloff The drop in decibels per octave after the cutoff frequency\n *  @example\n *  var filter = new Filter(200, \"highpass\");\n */\nexport class Filter extends ToneAudioNode<FilterOptions> {\n\n\treadonly name = \"Filter\";\n\n\treadonly input = new Gain({ context: this.context });\n\treadonly output = new Gain({ context: this.context });\n\tprivate _filters: BiquadFilterNode[] = [];\n\n\t/**\n\t *  the rolloff value of the filter\n\t */\n\tprivate _rolloff!: number;\n\tprivate _type: BiquadFilterType;\n\n\t/**\n\t *  The Q or Quality of the filter\n\t */\n\treadonly Q: Signal<Positive>;\n\n\t/**\n\t *  The cutoff frequency of the filter.\n\t */\n\treadonly frequency: Signal<Frequency>;\n\n\t/**\n\t *  The detune parameter\n\t */\n\treadonly detune: Signal<Cents>;\n\n\t/**\n\t *  The gain of the filter, only used in certain filter types\n\t */\n\treadonly gain: Signal<Decibels>;\n\n\tconstructor(frequency?: Frequency, type?: BiquadFilterType, rolloff?: number);\n\tconstructor(options?: Partial<FilterOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Filter.getDefaults(), arguments, [\"frequency\", \"type\", \"rolloff\"]));\n\t\tconst options = optionsFromArguments(Filter.getDefaults(), arguments, [\"frequency\", \"type\", \"rolloff\"]);\n\n\t\tthis._filters = [];\n\n\t\tthis.Q = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.Q,\n\t\t});\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t});\n\t\tthis.detune = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune,\n\t\t});\n\t\tthis.gain = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"decibels\",\n\t\t\tvalue: options.gain,\n\t\t});\n\t\tthis._type = options.type;\n\t\tthis.rolloff = options.rolloff;\n\t\treadOnly(this, [\"detune\", \"frequency\", \"gain\", \"Q\"]);\n\t}\n\n\tstatic getDefaults(): FilterOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tQ: 1,\n\t\t\tdetune: 0,\n\t\t\tfrequency: 350,\n\t\t\tgain: 0,\n\t\t\trolloff: -12,\n\t\t\ttype: \"lowpass\" as BiquadFilterType,\n\t\t});\n\t}\n\n\t/**\n\t * The type of the filter. Types: \"lowpass\", \"highpass\",\n\t * \"bandpass\", \"lowshelf\", \"highshelf\", \"notch\", \"allpass\", or \"peaking\".\n\t */\n\tget type(): BiquadFilterType {\n\t\treturn this._type;\n\t}\n\tset type(type: BiquadFilterType) {\n\t\tconst types: BiquadFilterType[] = [\"lowpass\", \"highpass\", \"bandpass\",\n\t\t\t\"lowshelf\", \"highshelf\", \"notch\", \"allpass\", \"peaking\"];\n\t\tthis.assert(types.indexOf(type) !== -1, `Invalid filter type: ${type}`);\n\t\tthis._type = type;\n\t\tthis._filters.forEach(filter => filter.type = type);\n\t}\n\n\t/**\n\t * The rolloff of the filter which is the drop in db\n\t * per octave. Implemented internally by cascading filters.\n\t * Only accepts the values -12, -24, -48 and -96.\n\t */\n\tget rolloff(): number | string {\n\t\treturn this._rolloff;\n\t}\n\tset rolloff(rolloff: number | string) {\n\t\tconst rolloffNum = isNumber(rolloff) ? rolloff : parseInt(rolloff, 10);\n\t\tconst possibilities = [-12, -24, -48, -96];\n\t\tlet cascadingCount = possibilities.indexOf(rolloffNum);\n\t\t// check the rolloff is valid\n\t\tthis.assert(cascadingCount !== -1, `rolloff can only be ${possibilities.join(\", \")}`);\n\t\tcascadingCount += 1;\n\n\t\tthis._rolloff = rolloffNum;\n\t\tthis.input.disconnect();\n\t\tthis._filters.forEach(filter => filter.disconnect());\n\n\t\tthis._filters = new Array(cascadingCount);\n\t\tfor (let count = 0; count < cascadingCount; count++) {\n\t\t\tconst filter = this.context.createBiquadFilter();\n\t\t\tfilter.type = this._type;\n\t\t\tthis.frequency.connect(filter.frequency);\n\t\t\tthis.detune.connect(filter.detune);\n\t\t\tthis.Q.connect(filter.Q);\n\t\t\tthis.gain.connect(filter.gain);\n\t\t\tthis._filters[count] = filter;\n\t\t}\n\t\tthis._internalChannels = this._filters;\n\t\tconnectSeries(this.input, ...this._internalChannels, this.output);\n\t}\n\n\t/**\n\t * Get the frequency response curve. This curve represents how the filter\n\t * responses to frequencies between 20hz-20khz.\n\t * @param  len The number of values to return\n\t * @return The frequency response curve between 20-20kHz\n\t */\n\tgetFrequencyResponse(len: number = 128): Float32Array {\n\t\t// start with all 1s\n\t\tconst totalResponse = new Float32Array(len).map(() => 1);\n\t\tconst freqValues = new Float32Array(len);\n\t\tfor (let i = 0; i < len; i++) {\n\t\t\tconst norm = Math.pow(i / len, 2);\n\t\t\tconst freq = norm * (20000 - 20) + 20;\n\t\t\tfreqValues[i] = freq;\n\t\t}\n\t\tconst magValues = new Float32Array(len);\n\t\tconst phaseValues = new Float32Array(len);\n\t\tthis._filters.forEach(() => {\n\t\t\tconst filterClone = this.context.createBiquadFilter();\n\t\t\tfilterClone.type = this._type;\n\t\t\tfilterClone.Q.value = this.Q.value;\n\t\t\tfilterClone.frequency.value = this.frequency.value as number;\n\t\t\tfilterClone.gain.value = this.gain.value as number;\n\t\t\tfilterClone.getFrequencyResponse(freqValues, magValues, phaseValues);\n\t\t\tmagValues.forEach((val, i) => {\n\t\t\t\ttotalResponse[i] *= val;\n\t\t\t});\n\t\t});\n\t\treturn totalResponse;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._filters.forEach(filter => {\n\t\t\tfilter.disconnect();\n\t\t});\n\t\twritable(this, [\"detune\", \"frequency\", \"gain\", \"Q\"]);\n\t\tthis.frequency.dispose();\n\t\tthis.Q.dispose();\n\t\tthis.detune.dispose();\n\t\tthis.gain.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Frequency, Positive } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Filter } from \"../filter/Filter\";\n\ninterface MultibandSplitOptions extends ToneAudioNodeOptions {\n\tQ: Positive;\n\tlowFrequency: Frequency;\n\thighFrequency: Frequency;\n}\n\n/**\n *  Split the incoming signal into three bands (low, mid, high)\n *  with two crossover frequency controls.\n * ```\n *            +----------------------+\n *          +-> input < lowFrequency +------------------> low\n *          | +----------------------+\n *          |\n *          | +--------------------------------------+\n * input ---+-> lowFrequency < input < highFrequency +--> mid\n *          | +--------------------------------------+\n *          |\n *          | +-----------------------+\n *          +-> highFrequency < input +-----------------> high\n *            +-----------------------+\n * ```\n *\n *  @param lowFrequency the low/mid crossover frequency\n *  @param highFrequency the mid/high crossover frequency\n */\nexport class MultibandSplit extends ToneAudioNode<MultibandSplitOptions> {\n\n\treadonly name = \"MultibandSplit\";\n\n\t/**\n\t *  the input\n\t */\n\treadonly input = new Gain({ context: this.context });\n\n\t/**\n\t * no output node, use either low, mid or high outputs\n\t */\n\treadonly output = undefined;\n\n\t/**\n\t *  The low band.\n\t */\n\treadonly low = new Filter({\n\t\tcontext: this.context,\n\t\tfrequency: 0,\n\t\ttype: \"lowpass\",\n\t});\n\n\t/**\n\t *  the lower filter of the mid band\n\t */\n\tprivate _lowMidFilter = new Filter({\n\t\tcontext: this.context,\n\t\tfrequency: 0,\n\t\ttype: \"highpass\",\n\t});\n\n\t/**\n\t *  The mid band output.\n\t */\n\treadonly mid = new Filter({\n\t\tcontext: this.context,\n\t\tfrequency: 0,\n\t\ttype: \"lowpass\",\n\t});\n\n\t/**\n\t *  The high band output.\n\t */\n\treadonly high = new Filter({\n\t\tcontext: this.context,\n\t\tfrequency: 0,\n\t\ttype: \"highpass\",\n\t});\n\n\t/**\n\t *  The low/mid crossover frequency.\n\t */\n\treadonly lowFrequency: Signal<Frequency>;\n\n\t/**\n\t *  The mid/high crossover frequency.\n\t */\n\treadonly highFrequency: Signal<Frequency>;\n\n\tprotected _internalChannels = [this.low, this.mid, this.high];\n\n\t/**\n\t *  The Q or Quality of the filter\n\t */\n\treadonly Q: Signal<Positive>;\n\n\tconstructor(lowFrequency?: Frequency, highFrequency?: Frequency);\n\tconstructor(options?: Partial<MultibandSplitOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(MultibandSplit.getDefaults(), arguments, [\"lowFrequency\", \"highFrequency\"]));\n\t\tconst options = optionsFromArguments(MultibandSplit.getDefaults(), arguments, [\"lowFrequency\", \"highFrequency\"]);\n\n\t\tthis.lowFrequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.lowFrequency,\n\t\t});\n\n\t\tthis.highFrequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.highFrequency,\n\t\t});\n\n\t\tthis.Q = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.Q,\n\t\t});\n\n\t\tthis.input.fan(this.low, this.high);\n\t\tthis.input.chain(this._lowMidFilter, this.mid);\n\t\t// the frequency control signal\n\t\tthis.lowFrequency.fan(this.low.frequency, this._lowMidFilter.frequency);\n\t\tthis.highFrequency.fan(this.mid.frequency, this.high.frequency);\n\t\t// the Q value\n\t\tthis.Q.connect(this.low.Q);\n\t\tthis.Q.connect(this._lowMidFilter.Q);\n\t\tthis.Q.connect(this.mid.Q);\n\t\tthis.Q.connect(this.high.Q);\n\n\t\treadOnly(this, [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n\t}\n\n\tstatic getDefaults(): MultibandSplitOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tQ: 1,\n\t\t\thighFrequency: 2500,\n\t\t\tlowFrequency: 400,\n\t\t});\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\twritable(this, [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n\t\tthis.low.dispose();\n\t\tthis._lowMidFilter.dispose();\n\t\tthis.mid.dispose();\n\t\tthis.high.dispose();\n\t\tthis.lowFrequency.dispose();\n\t\tthis.highFrequency.dispose();\n\t\tthis.Q.dispose();\n\t\treturn this;\n\t}\n\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Cents, Decibels, Frequency, GainFactor, Positive } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { MultibandSplit } from \"../channel/MultibandSplit\";\n\ninterface EQ3Options extends ToneAudioNodeOptions {\n\tlow: Decibels;\n\tmid: Decibels;\n\thigh: Decibels;\n\tlowFrequency: Frequency;\n\thighFrequency: Frequency;\n}\n\nexport class EQ3 extends ToneAudioNode<EQ3Options> {\n\n\treadonly name = \"EQ3\";\n\n\t/**\n\t *  the input\n\t */\n\treadonly input: MultibandSplit;\n\n\t/**\n\t *  the output\n\t */\n\treadonly output = new Gain({ context: this.context });\n\n\tprivate _multibandSplit: MultibandSplit;\n\n\t/**\n\t *  The gain for the lower signals\n\t */\n\tprivate _lowGain: Gain<Decibels>;\n\n\t/**\n\t *  The gain for the mid signals\n\t */\n\tprivate _midGain: Gain<Decibels>;\n\n\t/**\n\t *  The gain for the high signals\n\t */\n\tprivate _highGain: Gain<Decibels>;\n\n\t/**\n\t * The gain in decibels of the low part\n\t */\n\treadonly low: Param<Decibels>;\n\n\t/**\n\t * The gain in decibels of the mid part\n\t */\n\treadonly mid: Param<Decibels>;\n\n\t/**\n\t * The gain in decibels of the high part\n\t */\n\treadonly high: Param<Decibels>;\n\n\t/**\n\t *  The Q value for all of the filters.\n\t */\n\treadonly Q: Signal<Positive>;\n\n\t/**\n\t *  The low/mid crossover frequency.\n\t */\n\treadonly lowFrequency: Signal<Frequency>;\n\n\t/**\n\t *  The mid/high crossover frequency.\n\t */\n\treadonly highFrequency: Signal<Frequency>;\n\n\tprotected _internalChannels: ToneAudioNode[] = [];\n\n\tconstructor(lowLevel?: Decibels, midLevel?: Decibels, highLevel?: Decibels);\n\tconstructor(options: Partial<EQ3Options>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(EQ3.getDefaults(), arguments, [\"low\", \"mid\", \"high\"]));\n\t\tconst options = optionsFromArguments(EQ3.getDefaults(), arguments, [\"low\", \"mid\", \"high\"]);\n\n\t\tthis.input = this._multibandSplit = new MultibandSplit({\n\t\t\tcontext: this.context,\n\t\t\thighFrequency: options.highFrequency,\n\t\t\tlowFrequency: options.lowFrequency,\n\t\t});\n\n\t\tthis._lowGain = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: options.low,\n\t\t\tunits: \"decibels\",\n\t\t});\n\n\t\tthis._midGain = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: options.mid,\n\t\t\tunits: \"decibels\",\n\t\t});\n\n\t\tthis._highGain = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: options.high,\n\t\t\tunits: \"decibels\",\n\t\t});\n\n\t\tthis.low = this._lowGain.gain;\n\t\tthis.mid = this._midGain.gain;\n\t\tthis.high = this._highGain.gain;\n\t\tthis.Q = this._multibandSplit.Q;\n\t\tthis.lowFrequency = this._multibandSplit.lowFrequency;\n\t\tthis.highFrequency\t= this._multibandSplit.highFrequency;\n\n\t\t// the frequency bands\n\t\tthis._multibandSplit.low.chain(this._lowGain, this.output);\n\t\tthis._multibandSplit.mid.chain(this._midGain, this.output);\n\t\tthis._multibandSplit.high.chain(this._highGain, this.output);\n\n\t\treadOnly(this, [\"low\", \"mid\", \"high\", \"lowFrequency\", \"highFrequency\"]);\n\t\tthis._internalChannels = [this._multibandSplit];\n\t}\n\n\tstatic getDefaults(): EQ3Options {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\thigh : 0,\n\t\t\thighFrequency : 2500,\n\t\t\tlow : 0,\n\t\t\tlowFrequency : 400,\n\t\t\tmid : 0,\n\t\t});\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\twritable(this, [\"low\", \"mid\", \"high\", \"lowFrequency\", \"highFrequency\"]);\n\t\tthis._multibandSplit.dispose();\n\t\tthis.lowFrequency.dispose();\n\t\tthis.highFrequency.dispose();\n\t\tthis._lowGain.dispose();\n\t\tthis._midGain.dispose();\n\t\tthis._highGain.dispose();\n\t\tthis.low.dispose();\n\t\tthis.mid.dispose();\n\t\tthis.high.dispose();\n\t\tthis.Q.dispose();\n\t\treturn this;\n\t}\n\n}\n","export { getContext, setContext } from \"./core/Global\";\nexport * from \"./core/index\";\nexport * from \"./source/index\";\nexport * from \"./signal/index\";\nexport * from \"./instrument/index\";\nexport * from \"./event/index\";\nexport * from \"./effect/index\";\nexport * from \"./component/index\";\nimport { Seconds } from \"./core/type/Units\";\n\nimport { getContext } from \"./core/Global\";\nexport { start } from \"./core/Global\";\n/**\n *  The current audio context time\n */\nexport function now(): Seconds {\n\treturn getContext().now();\n}\n\n/**\n * The Transport object belonging to the global Tone.js Context\n */\n// tslint:disable-next-line: variable-name\nexport const Transport = getContext().transport;\n\n/**\n * The Destination (output) belonging to the global Tone.js Context\n */\n// tslint:disable-next-line: variable-name\nexport const Destination = getContext().destination;\n","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n"],"sourceRoot":""}