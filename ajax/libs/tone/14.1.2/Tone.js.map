{"version":3,"sources":["webpack://Tone/webpack/universalModuleDefinition","webpack://Tone/webpack/bootstrap","webpack://Tone/./Tone/core/Tone.ts","webpack://Tone/./Tone/version.ts","webpack://Tone/./Tone/core/clock/Ticker.ts","webpack://Tone/./Tone/core/util/TypeCheck.ts","webpack://Tone/./Tone/core/util/Defaults.ts","webpack://Tone/./Tone/core/context/AudioContext.ts","webpack://Tone/./Tone/core/util/Emitter.ts","webpack://Tone/./Tone/core/util/Timeline.ts","webpack://Tone/./Tone/core/context/ContextInitialization.ts","webpack://Tone/./Tone/core/Global.ts","webpack://Tone/./Tone/core/context/Context.ts","webpack://Tone/./Tone/core/type/Conversions.ts","webpack://Tone/./Tone/core/type/TimeBase.ts","webpack://Tone/./Tone/core/type/Time.ts","webpack://Tone/./Tone/core/type/Frequency.ts","webpack://Tone/./Tone/core/type/TransportTime.ts","webpack://Tone/./Tone/core/context/ToneWithContext.ts","webpack://Tone/./Tone/core/context/Param.ts","webpack://Tone/./Tone/core/util/Interface.ts","webpack://Tone/./Tone/core/context/ToneAudioNode.ts","webpack://Tone/./Tone/core/context/Gain.ts","webpack://Tone/./Tone/core/context/OfflineContext.ts","webpack://Tone/./Tone/core/context/ToneAudioBuffer.ts","webpack://Tone/./Tone/core/context/Offline.ts","webpack://Tone/./Tone/core/context/Delay.ts","webpack://Tone/./Tone/core/util/StateTimeline.ts","webpack://Tone/./Tone/core/clock/TickSignal.ts","webpack://Tone/./Tone/core/clock/TickSource.ts","webpack://Tone/./Tone/core/clock/Clock.ts","webpack://Tone/./Tone/core/type/Ticks.ts","webpack://Tone/./Tone/core/util/Draw.ts","webpack://Tone/./Tone/core/util/IntervalTimeline.ts","webpack://Tone/./Tone/component/channel/Volume.ts","webpack://Tone/./Tone/core/context/Destination.ts","webpack://Tone/./Tone/core/clock/TransportEvent.ts","webpack://Tone/./Tone/core/clock/TransportRepeatEvent.ts","webpack://Tone/./Tone/core/clock/Transport.ts","webpack://Tone/./Tone/source/Source.ts","webpack://Tone/./Tone/source/OneShotSource.ts","webpack://Tone/./Tone/source/buffer/BufferSource.ts","webpack://Tone/./Tone/source/Noise.ts","webpack://Tone/./Tone/signal/Signal.ts","webpack://Tone/./Tone/source/oscillator/OscillatorNode.ts","webpack://Tone/./Tone/source/oscillator/Oscillator.ts","webpack://Tone/./Tone/signal/SignalOperator.ts","webpack://Tone/./Tone/signal/WaveShaper.ts","webpack://Tone/./Tone/signal/AudioToGain.ts","webpack://Tone/./Tone/signal/Multiply.ts","webpack://Tone/./Tone/source/oscillator/AMOscillator.ts","webpack://Tone/./Tone/source/oscillator/FMOscillator.ts","webpack://Tone/./Tone/source/oscillator/PulseOscillator.ts","webpack://Tone/./Tone/source/oscillator/FatOscillator.ts","webpack://Tone/./Tone/source/oscillator/PWMOscillator.ts","webpack://Tone/./Tone/source/oscillator/OmniOscillator.ts","webpack://Tone/./Tone/source/buffer/Player.ts","webpack://Tone/./Tone/component/envelope/Envelope.ts","webpack://Tone/./Tone/component/envelope/AmplitudeEnvelope.ts","webpack://Tone/./Tone/instrument/Instrument.ts","webpack://Tone/./Tone/instrument/Monophonic.ts","webpack://Tone/./Tone/instrument/Synth.ts","webpack://Tone/./Tone/core/context/ToneAudioBuffers.ts","webpack://Tone/./Tone/instrument/Sampler.ts","webpack://Tone/./Tone/event/ToneEvent.ts","webpack://Tone/./Tone/event/Part.ts","webpack://Tone/./Tone/event/Sequence.ts","webpack://Tone/./Tone/signal/GainToAudio.ts","webpack://Tone/./Tone/component/channel/CrossFade.ts","webpack://Tone/./Tone/effect/Effect.ts","webpack://Tone/./Tone/effect/FeedbackEffect.ts","webpack://Tone/./Tone/effect/FeedbackDelay.ts","webpack://Tone/./Tone/effect/Convolver.ts","webpack://Tone/./Tone/component/analysis/Analyser.ts","webpack://Tone/./Tone/component/channel/Merge.ts","webpack://Tone/./Tone/component/filter/Filter.ts","webpack://Tone/./Tone/component/channel/MultibandSplit.ts","webpack://Tone/./Tone/component/filter/EQ3.ts","webpack://Tone/./Tone/index.ts","webpack://Tone/(webpack)/buildin/global.js"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","Tone","debug","_wasDisposed","getDefaults","log","args","_i","arguments","length","toString","global","TONE_DEBUG_CLASS","unshift","console","apply","assert","statement","error","Error","dispose","version","_version__WEBPACK_IMPORTED_MODULE_0__","Ticker","callback","type","updateInterval","_callback","_type","_updateInterval","_createClock","_createWorker","blob","Blob","toFixed","blobUrl","window","URL","createObjectURL","worker","Worker","onmessage","bind","_worker","_createTimeout","_this","_timeout","setTimeout","e","_disposeClock","clearTimeout","terminate","interval","Math","max","postMessage","isUndef","arg","isDefined","isNumber","isObject","constructor","isBoolean","isArray","Array","isString","isNote","test","deepMerge","target","sources","source","shift","key","assign","_a","_b","concat","optionsFromArguments","defaults","argsArray","keys","objKey","opts","from","Reflect","has","some","splice","indexOf","defaultArg","given","fallback","omitFromObject","obj","omit","forEach","prop","globalContext","Emitter_Emitter","_super","Emitter","__extends","on","event","split","eventName","_events","push","once","boundCallback","off","eventList","emit","slice","len","mixin","constr","getOwnPropertyDescriptor","undefined","Timeline_Timeline","Timeline","_timeline","options","memory","Timeline_extends","Infinity","add","time","valueOf","index","_search","diff","remove","param","peek","getAfter","getBefore","cancel","after","cancelBefore","previousEvent","beginning","end","midPoint","floor","event_1","nextEvent","_iterate","lowerBound","upperBound","forEachBefore","forEachAfter","forEachBetween","startTime","endTime","forEachFrom","forEachAtTime","getAudioContext","context","AudioContext","TONE_AUDIO_CONTEXT","notifyNewContext","onContextInit","cb","notifyCloseContext","onContextClose","Global_globalContext","Context_Context","Context","_constants","Map","_timeouts","_timeoutIds","_initialized","_context","_latencyHint","latencyHint","lookAhead","_ticker","clockSource","_timeoutLoop","addEventListener","state","Context_extends","initialize","ctx","createAnalyser","createOscillator","createBufferSource","createBiquadFilter","createBuffer","numberOfChannels","sampleRate","createChannelMerger","numberOfInputs","createChannelSplitter","numberOfOutputs","createConstantSource","createConvolver","createDelay","maxDelayTime","createDynamicsCompressor","createGain","createIIRFilter","feedforward","feedback","createPanner","createPeriodicWave","real","imag","constraints","createStereoPanner","createWaveShaper","decodeAudioData","audioData","currentTime","listener","_transport","t","_destination","hint","lookAheadValue","now","resume","Promise","resolve","close","sent","getConstant","val","buffer","arr","getChannelData","constant","channelCount","channelCountMode","loop","start","set","map","disconnect","firstEvent","fn","timeout","id","getContext","setContext","TONE_CONTEXT","TONE_SILENCE_LOGGING","prefix","printString","intervalToFrequencyRatio","pow","A4","ftom","frequency","round","log2","TimeBase_TimeBaseClass","TimeBaseClass","units","defaultUnits","_val","_units","_expressions","_getExpressions","TimeBase_extends","hz","method","_frequencyToUnits","parseFloat","regexp","_ticksToUnits","parseInt","_beatsToUnits","_getTimeSignature","dot","numericValue","scalar","number","_secondsToUnits","samples","tr","q","total","fromType","_noArg","trim","typeName","quantity","expr","matching","match","freq","beats","_getBpm","seconds","ticks","_getPPQ","_now","transport","bpm","timeSignature","PPQ","toSeconds","toTicks","toFrequency","toMidi","toSamples","toMilliseconds","Time_TimeClass","TimeClass","Time_extends","capture","quantize","quantTo","nextSubdivision","subdiv","percent","subdivision","toNotation","testNotations","power","closest","closestSeconds","notation","notationSeconds","abs","toBarsBeatsSixteenths","quarterTime","quarters","measures","sixteenths","sixteenthString","join","Time","Frequency_FrequencyClass","FrequencyClass","Frequency_extends","setA4","midi","mtof","note","pitch","octave","noteNumber","noteToScaleIndex","toLowerCase","transpose","harmonize","intervals","toNote","scaleIndexToNote","cbb","c#","cx","dbb","db","d#","dx","ebb","eb","e#","ex","fbb","fb","f","f#","fx","gbb","gb","g","g#","gx","abb","ab","a","a#","ax","bbb","bb","b","b#","bx","Frequency","TransportTimeClass","TransportTime_extends","TransportTime","ToneWithContext_ToneWithContext","ToneWithContext","defaultContext","ToneWithContext_extends","immediate","attribute","member","setValueAtTime","props","Param_Param","Param","overridden","_minOutput","AudioParam","_param","input","_initialValue","convert","Param_extends","getValueAtTime","_fromType","cancelScheduledValues","minValue","maxValue","_is","min","_toType","gain","LN10","computedTime","isFinite","JSON","stringify","before","beforeValue","previous","_linearInterpolate","_exponentialInterpolate","previousVal","_exponentialApproach","setRampPoint","currentVal","cancelAndHoldAtTime","linearRampToValueAtTime","exponentialRampToValueAtTime","exponentialRampTo","rampTime","linearRampTo","targetRampTo","exponentialApproachValueAtTime","timeConstant","setTargetAtTime","setValueCurveAtTime","values","duration","scaling","startingValue","segTime","valueAtTime","sampleTime","rampTo","t0","v0","v1","exp","t1","readOnly","str","writable","noOp","ToneAudioNode_ToneAudioNode","ToneAudioNode","ToneAudioNode_extends","channelInterpretation","createInsOuts","_setChannelProperties","_internalChannels","node","_getChannelProperties","connect","destination","outputNum","inputNum","toDestination","toMaster","warn","srcNode","dstNode","outputNumber","inputNumber","AudioNode","output","chain","nodes","connectSeries","fan","first","reduce","prev","current","Gain_Gain","Gain","_gainNode","Gain_extends","OfflineContext","channels","OfflineAudioContext","_currentTime","_duration","OfflineContext_extends","render","startRendering","ToneAudioBuffer_ToneAudioBuffer","ToneAudioBuffer","onload","reverse","url","AudioBuffer","load","catch","onerror","ToneAudioBuffer_extends","_buffer","loaded","_reversed","_reverse","promise","downloads","audioBuffer","e_1","fromArray","array","isMultidimensional","multiChannelArray","copyToChannel","toMono","chanNum","toArray","outputArray","Float32Array","numChannels_1","channel","channelArray","sample","ret","startSamples","endSamples","retBuffer","copyFromChannel","subarray","rev","fromUrl","matches","extensions","extension","extensions_1","ext","supportsType","replace","fetch","baseUrl","response","ok","arrayBuffer","document","createElement","canPlayType","Offline","originalContext","Delay_Delay","Delay","maxDelayInSeconds","maxDelay","delayTime","_delayNode","Delay_extends","StateTimeline","initial","_initial","StateTimeline_extends","setStateAtTime","getLastState","getNextState","event_2","TickSignal_TickSignal","TickSignal","_sig","offset","_multiplier","multiplier","TickSignal_extends","computedValue","prevEvent","segments","rampVal","ticksUntilTime","_getTicksUntilEvent","computedVal","segmentDur","val0","val1","onTheLineEvent","getTicksAtTime","getDurationOfTicks","currentTick","getTimeOfTick","tick","delta","k","sqrt","sol1","ticksToTime","when","timeToTicks","computedDuration","startTicks","TickSource_TickSource","TickSource","_state","_tickOffset","setTicksAtTime","TickSource_extends","stop","pause","stopEvent","tmpEvent","lastState","elapsedTicks","periodStartTime","offsetEvent","getSecondsAtTime","elapsedSeconds","getStateAtTime","absoluteTicks","forEachTickBetween","computedStartTime","computedEndTime","lastStateEvent","maxStartTime","nextTickTime","Clock_Clock","Clock","_lastUpdate","_boundLoop","_loop","_tickSource","Clock_extends","ceil","TicksClass","Ticks_extends","Ticks","Draw_Draw","Draw","expiration","anticipation","_boundDrawLoop","_drawLoop","_animationFrame","Draw_extends","schedule","requestAnimationFrame","cancelAnimationFrame","IntervalTimeline_IntervalTimeline","IntervalTimeline","_root","_length","IntervalTimeline_extends","IntervalNode","insert","updateHeight","updateMax","_rebalance","parent","results","search","results_1","_removeNode","_setRoot","_replaceNodeInParent","replacement","isLeftChild","left","right","temp","getBalance","_rotateLeft","pivotNode","_rotateRight","balance","low","allNodes_1","traverse","searchAfter","high","_left","_right","height","point","Volume_Volume","Volume","volume","_unmutedVolume","mute","Volume_extends","Destination_Destination","Destination","rawContext","Destination_extends","TransportEvent_TransportEvent","TransportEvent","_eventId","_once","invoke","clear","TransportRepeatEvent_TransportRepeatEvent","TransportRepeatEvent","_currentId","_nextId","_nextTick","_boundRestart","_restart","_interval","TransportRepeatEvent_extends","_createEvents","scheduleOnce","Transport_Transport","Transport","_loopStart","_loopEnd","_scheduledEvents","_repeatedEvents","_syncedSignals","_swingAmount","_ppq","ppq","_clock","_processTick","_bindClockEvents","_timeSignature","_swingTicks","Transport_extends","loopEnd","loopStart","swing","swingSubdivision","tickTime","progress","amount","sin","PI","_addEvent","scheduleRepeat","eventId","item","timeline","computedAfter","offsetTicks","toggle","timeSig","startPosition","endPosition","setLoopPoints","remainingTicks","syncSignal","signal","ratio","computedFreq","ratioSignal","unsyncSignal","syncedSignal","Source_Source","Source","_volume","_synced","_scheduled","_syncedStart","_syncedStop","Source_extends","restart","sched","_start","_stop","sync","stateEvent","startOffset","unsync","OneShotSource_OneShotSource","OneShotSource","onended","_startTime","_stopTime","_fadeIn","fadeIn","_fadeOut","fadeOut","_curve","curve","OneShotSource_extends","_startGain","fadeInTime","_stopGain","cancelStop","fadeOutTime","additionalTail","_stopSource","_onended","BufferSource_ToneBufferSource","ToneBufferSource","_source","_sourceStarted","_sourceStopped","playbackRate","BufferSource_extends","computedDur","Noise_Noise","Noise","_playbackRate","Noise_extends","_noiseBuffers","rate","random","_noiseCache","brown","pink","white","channelNum","lastOut","b0","b1","b2","b3","b4","b5","b6","Signal_Signal","Signal","override","_constantSource","Signal_extends","connectSignal","OscillatorNode_ToneOscillatorNode","ToneOscillatorNode","_oscillator","detune","OscillatorNode_extends","setPeriodicWave","periodicWave","Oscillator_Oscillator","Oscillator","_partials","partials","_partialCount","partialCount","_phase","phase","baseType","Oscillator_extends","oscillator","_wave","syncFrequency","unsyncFrequency","isBasicType","_getRealImaginary","partial","exec","periodicWaveSize","fftSize","piFactor","TypeError","cos","_inverseFFT","sum","_getInitialValue","twoPi","SignalOperator_SignalOperator","SignalOperator","SignalOperator_extends","WaveShaper_WaveShaper","WaveShaper","_shaper","mapping","setMap","WaveShaper_extends","normalized","oversample","oversampling","isOverSampleType","includes","AudioToGain_AudioToGain","AudioToGain","_norm","x","AudioToGain_extends","Multiply_Multiply","Multiply","_mult","factor","Multiply_extends","AMOscillator_AMOscillator","AMOscillator","_carrier","_modulator","_modulationScale","harmonicity","_modulationNode","modulationType","AMOscillator_extends","FMOscillator_FMOscillator","FMOscillator","modulationIndex","FMOscillator_extends","PulseOscillator_PulseOscillator","PulseOscillator","width","_widthGate","_sawtooth","_thresh","PulseOscillator_extends","FatOscillator_FatOscillator","FatOscillator","_oscillators","_spread","spread","count","FatOscillator_extends","_forEach","osc","iterator","start_1","step_1","PWMOscillator_PWMOscillator","PWMOscillator","sourceType","_pulse","_scale","modulationFrequency","PWMOscillator_extends","OmniOscillatorSourceMap","am","fat","fm","pulse","pwm","OmniOscillator_OmniOscillator","OmniOscillator","OmniOscillator_extends","_sourceType","substr","_createNewOscillator","_getOscType","oscType","oscConstructor","oldOsc_1","blockTime","sType","mType","Player_Player","Player","_activeSources","Set","_onload","autostart","Player_extends","_onSourceEnd","delete","size","implicitEnd","seek","comptuedOffset","Envelope_Envelope","Envelope","attack","decay","sustain","release","attackCurve","releaseCurve","decayCurve","Envelope_extends","_getCurve","direction","curveName","EnvelopeCurves","_setCurve","curveDef","_attackCurve","_releaseCurve","_decayCurve","triggerAttack","velocity","currentValue","decayValue","decayStart","triggerRelease","triggerAttackRelease","cosineCurve","rippleCurve","curveLen","sineWave","stairsCurve","sineCurve","bounceCurve","invertCurve","out","j","bounce","In","Out","cosine","exponential","linear","ripple","sine","step","AmplitudeEnvelope_AmplitudeEnvelope","AmplitudeEnvelope","AmplitudeEnvelope_extends","Instrument_Instrument","Instrument","_original_triggerAttack","_original_triggerRelease","Instrument_extends","_syncMethod","timePosition","originalMethod","Monophonic_Monophonic","Monophonic","portamento","Monophonic_extends","_triggerEnvelopeAttack","setNote","_triggerEnvelopeRelease","getLevelAtTime","envelope","computedFrequency","portTime","Synth_Synth","Synth","Synth_extends","computedAttack","computedDecay","ToneAudioBuffers_ToneAudioBuffers","ToneAudioBuffers","_buffers","_loadingCount","urls","_bufferLoaded","ToneAudioBuffers_extends","every","Sampler_Sampler","Sampler","urlMap","mid","Sampler_extends","_findClosest","notes","difference","closestNote","releaseAll","ToneEvent_ToneEvent","ToneEvent","_startOffset","_probability","probability","_humanize","humanize","ToneEvent_extends","_rescheduleEvents","startTick","_getLoopDuration","_tick","prob","variation","reschedulTime","lastEvent","loopDuration","Part_Part","Part","events","Part_extends","computedOffset_1","_startNote","at","timeInTicks","result","next","done","_restartEvent","_setAll","attr","_testLoopBoundries","Sequence_Sequence","Sequence","_part","_seqCallback","_eventsArray","_subdivision","Sequence_extends","_createSequence","_eventsUpdated","_indexTime","Proxy","_rescheduleSequence","sequence","eventOffset","GainToAudio_GainToAudio","GainToAudio","GainToAudio_extends","CrossFade_CrossFade","CrossFade","_panner","_split","_g2a","fade","pan","CrossFade_extends","Effect_Effect","Effect","_dryWet","wet","effectSend","effectReturn","Effect_extends","connectEffect","effect","FeedbackEffect_FeedbackEffect","FeedbackEffect","_feedbackGain","FeedbackEffect_extends","FeedbackDelay_FeedbackDelay","FeedbackDelay","FeedbackDelay_extends","Convolver_Convolver","Convolver","_convolver","normalize","Convolver_extends","buff","norm","Analyser_Analyser","Analyser","_analyser","Analyser_extends","smoothing","getValue","getFloatFrequencyData","getFloatTimeDomainData","frequencyBinCount","smoothingTimeConstant","Merge_Merge","Merge","_merger","Merge_extends","Filter_Filter","Filter","_filters","Q","rolloff","Filter_extends","filter","_rolloff","rolloffNum","possibilities","cascadingCount","getFrequencyResponse","totalResponse","freqValues","magValues","phaseValues","filterClone","MultibandSplit_MultibandSplit","MultibandSplit","_lowMidFilter","lowFrequency","highFrequency","MultibandSplit_extends","EQ3_EQ3","EQ3","_multibandSplit","_lowGain","_midGain","_highGain","EQ3_extends","Tone_now","Tone_Transport","Tone_Destination","Function","eval"],"mappings":"CAAA,SAAAA,EAAAC,GACA,iBAAAC,SAAA,iBAAAC,OACAA,OAAAD,QAAAD,IACA,mBAAAG,eAAAC,IACAD,UAAAH,GACA,iBAAAC,QACAA,QAAA,KAAAD,IAEAD,EAAA,KAAAC,IARA,CASC,oBAAAK,UAAAC,KAAA,WACD,mBCTA,IAAAC,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAR,QAGA,IAAAC,EAAAK,EAAAE,IACAC,EAAAD,EACAE,GAAA,EACAV,YAUA,OANAW,EAAAH,GAAAI,KAAAX,EAAAD,QAAAC,IAAAD,QAAAO,GAGAN,EAAAS,GAAA,EAGAT,EAAAD,QA2CA,OAtCAO,EAAAM,EAAAF,EAGAJ,EAAAO,EAAAR,EAGAC,EAAAQ,EAAA,SAAAf,EAAAgB,EAAAC,GACAV,EAAAW,EAAAlB,EAAAgB,IACAG,OAAAC,eAAApB,EAAAgB,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAV,EAAAiB,EAAA,SAAAxB,GACAmB,OAAAC,eAAApB,EAAA,cAAiDyB,OAAA,KAIjDlB,EAAAmB,EAAA,SAAAzB,GACA,IAAAgB,EAAAhB,KAAA0B,WACA,WAA2B,OAAA1B,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAM,EAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAU,EAAAC,GAAsD,OAAAV,OAAAW,UAAAC,eAAAnB,KAAAgB,EAAAC,IAGtDtB,EAAAyB,EAAA,GAIAzB,IAAA0B,EAAA,0FC9CAC,GArBA3B,EAAA,GAqBA,oBAAA2B,IA0BC7B,KAAA8B,OAAiB,EA0CT9B,KAAA+B,cAAwB,EA4FjC,OAjJQF,EAAAG,YAAP,WACC,UAsBSH,EAAAJ,UAAAQ,IAAV,eAAc,IAAAC,KAAAC,EAAA,EAAAA,EAAAC,UAAAC,OAAAF,IAAAD,EAAAC,GAAAC,UAAAD,IAITnC,KAAK8B,OAAS9B,KAAKsC,aAAeC,EAAOC,oBAC5CN,EAAKO,QAAQzC,KAAKsC,WAAa,KAE/BI,QAAQT,IAAGU,MAAXD,QAAeR,KAUPL,EAAAJ,UAAAmB,OAAV,SAAiBC,EAAoBC,GACpC,IAAKD,EACJ,MAAM,IAAIE,MAAMD,IAgBlBjB,EAAAJ,UAAAuB,QAAA,WAEC,OADAhD,KAAK+B,cAAe,EACb/B,MAQRc,OAAAC,eAAIc,EAAAJ,UAAA,gBAAJ,WACC,OAAOzB,KAAK+B,8CA6DbF,EAAAJ,UAAAa,SAAA,WACC,OAAOtC,KAAKW,MA7INkB,EAAAoB,QAAkBC,EAAA,EA2J1BrB,EAhKA,oGCrBO,IAAMoB,EAAU,yDCOvBE,EAAA,WA2BC,SAAAA,EAAYC,EAAsBC,EAAyBC,GAE1DtD,KAAKuD,UAAYH,EACjBpD,KAAKwD,MAAQH,EACbrD,KAAKyD,gBAAkBH,EAGvBtD,KAAK0D,eAwGP,OAlGSP,EAAA1B,UAAAkC,cAAR,WAEC,IAAMC,EAAO,IAAIC,MAEhB,uBAA8C,IAAvB7D,KAAKyD,iBAAwBK,QAAQ,GAAE,6WAczDC,EAAUC,OAAOC,IAAIC,gBAAgBN,GACrCO,EAAS,IAAIC,OAAOL,GAE1BI,EAAOE,UAAYrE,KAAKuD,UAAUe,KAAKtE,MAEvCA,KAAKuE,QAAUJ,GAMRhB,EAAA1B,UAAA+C,eAAR,eAAAC,EAAAzE,KACCA,KAAK0E,SAAWV,OAAOW,WAAW,WACjCF,EAAKD,iBACLC,EAAKlB,aACoB,IAAvBvD,KAAKyD,kBAMDN,EAAA1B,UAAAiC,aAAR,WACC,GAAmB,WAAf1D,KAAKwD,MACR,IACCxD,KAAK2D,gBACJ,MAAOiB,GAER5E,KAAKwD,MAAQ,UACbxD,KAAK0D,mBAEmB,YAAf1D,KAAKwD,OACfxD,KAAKwE,kBAOCrB,EAAA1B,UAAAoD,cAAR,WACK7E,KAAK0E,WACRI,aAAa9E,KAAK0E,UAClB1E,KAAK0E,SAAW,GAEb1E,KAAKuE,UACRvE,KAAKuE,QAAQQ,YACb/E,KAAKuE,QAAQF,UAAY,OAO3BvD,OAAAC,eAAIoC,EAAA1B,UAAA,sBAAJ,WACC,OAAOzB,KAAKyD,qBAEb,SAAmBuB,GAClBhF,KAAKyD,gBAAkBwB,KAAKC,IAAIF,EAAU,IAAM,OAC7B,WAAfhF,KAAKwD,OACRxD,KAAKuE,QAAQY,YAAYF,KAAKC,IAAe,IAAXF,EAAiB,qCAOrDlE,OAAAC,eAAIoC,EAAA1B,UAAA,YAAJ,WACC,OAAOzB,KAAKwD,WAEb,SAASH,GACRrD,KAAK6E,gBACL7E,KAAKwD,MAAQH,EACbrD,KAAK0D,gDAMNP,EAAA1B,UAAAuB,QAAA,WACChD,KAAK6E,iBAEP1B,EA1IA,GCJM,SAAUiC,EAAQC,GACvB,YAAsB,IAARA,EAMT,SAAUC,EAAaD,GAC5B,OAAQD,EAAQC,GAaX,SAAUE,EAASF,GACxB,MAAuB,iBAARA,EAMV,SAAUG,EAASH,GACxB,MAAgD,oBAAxCvE,OAAOW,UAAUa,SAAS/B,KAAK8E,IAA8BA,EAAII,cAAgB3E,OAMpF,SAAU4E,EAAUL,GACzB,MAAuB,kBAARA,EAMV,SAAUM,EAAQN,GACvB,OAAQO,MAAMD,QAAQN,GAMjB,SAAUQ,EAASR,GACxB,MAAuB,iBAARA,EAOV,SAAUS,EAAOT,GACtB,OAAOQ,EAASR,IAAQ,sCAAsCU,KAAKV,GCnD9D,SAAUW,EAAaC,eAAWC,KAAA/D,EAAA,EAAAA,EAAAC,UAAAC,OAAAF,IAAA+D,EAAA/D,EAAA,GAAAC,UAAAD,GACvC,IAAK+D,EAAQ7D,OAAU,OAAO4D,EAC9B,IAAME,EAASD,EAAQE,QAEvB,GAAIZ,EAASS,IAAWT,EAASW,GAChC,IAAK,IAAME,KAAOF,EAGL,UAARE,EACHJ,EAAOI,GAAOF,EAAOE,GACXb,EAASW,EAAOE,KACrBJ,EAAOI,IAAQvF,OAAOwF,OAAOL,IAAMM,MAAKF,MAAQE,IACrDP,EAAUC,EAAOI,GAAMF,EAAOE,KAE9BvF,OAAOwF,OAAOL,IAAMO,MAAKH,GAAMF,EAAOE,GAAWG,IAKpD,OAAOR,EAASrD,WAAA,GAACsD,GAAMQ,OAAKP,IAMvB,SAAUQ,EACfC,EACAC,EACAC,EACAC,cADA,IAAAD,UAGA,IAAME,KACA7E,EAAO0D,MAAMoB,KAAKJ,GAEpBpB,EAAStD,EAAK,KAAO4E,IAAWG,QAAQC,IAAIhF,EAAK,GAAI4E,KAEjChG,OAAO+F,KAAK3E,EAAK,IAAIiF,KAAK,SAAAd,GAAO,OAAAY,QAAQC,IAAIP,EAAUN,OAG7EL,EAAUe,IAAIR,MAAIO,GAAU5E,EAAK,GAAEqE,IAEnCM,EAAKO,OAAOP,EAAKQ,QAAQP,GAAS,GAElC5E,EAAKkE,UAGP,GAAoB,IAAhBlE,EAAKG,QAAgBmD,EAAStD,EAAK,IACtC8D,EAAUe,EAAM7E,EAAK,SAErB,IAAK,IAAI9B,EAAI,EAAGA,EAAIyG,EAAKxE,OAAQjC,IAC5BkF,EAAUpD,EAAK9B,MAClB2G,EAAKF,EAAKzG,IAAM8B,EAAK9B,IAIxB,OAAO4F,EAAUW,EAAUI,GAmBtB,SAAUO,EAAcC,EAAUC,GACvC,OAAIpC,EAAQmC,GACJC,EAEAD,EAOH,SAAUE,EAAqDC,EAAQC,GAM5E,OALAA,EAAKC,QAAQ,SAAAC,GACRZ,QAAQC,IAAIQ,EAAKG,WACbH,EAAIG,KAGNH,QCjGJI,6TCSJC,EAAA,SAAAC,GAAA,SAAAC,IAAA,IAAAxD,EAAA,OAAAuD,KAAArF,MAAA3C,KAAAoC,YAAApC,YAECyE,EAAA9D,KAAO,YA4GR,OA9GgEuH,EAAAD,EAAAD,GAc/DC,EAAAxG,UAAA0G,GAAA,SAAGC,EAAkBhF,GAArB,IAAAqB,EAAAzE,KAYC,OAVeoI,EAAMC,MAAM,OACpBT,QAAQ,SAAAU,GACVlD,EAAQX,EAAK8D,WAChB9D,EAAK8D,YAED9D,EAAK8D,QAAQ7G,eAAe4G,KAChC7D,EAAK8D,QAAQD,OAEd7D,EAAK8D,QAAQD,GAAWE,KAAKpF,KAEvBpD,MAQRiI,EAAAxG,UAAAgH,KAAA,SAAKL,EAAkBhF,GAAvB,IAAAqB,EAAAzE,KACO0I,EAAgB,eAAC,IAAAxG,KAAAC,EAAA,EAAAA,EAAAC,UAAAC,OAAAF,IAAAD,EAAAC,GAAAC,UAAAD,GAEtBiB,EAAQT,WAAA,EAAIT,GAEZuC,EAAKkE,IAAIP,EAAOM,IAGjB,OADA1I,KAAKmI,GAAGC,EAAOM,GACR1I,MASRiI,EAAAxG,UAAAkH,IAAA,SAAIP,EAAkBhF,GAAtB,IAAAqB,EAAAzE,KAmBC,OAlBeoI,EAAMC,MAAM,OACpBT,QAAQ,SAAAU,GAId,GAHIlD,EAAQX,EAAK8D,WAChB9D,EAAK8D,YAEF9D,EAAK8D,QAAQ7G,eAAe0G,GAC/B,GAAIhD,EAAQhC,GACXqB,EAAK8D,QAAQH,WAGb,IADA,IAAMQ,EAAYnE,EAAK8D,QAAQH,GACtBhI,EAAI,EAAGA,EAAIwI,EAAUvG,OAAQjC,IACjCwI,EAAUxI,KAAOgD,GACpBwF,EAAUxB,OAAOhH,EAAG,KAMlBJ,MASRiI,EAAAxG,UAAAoH,KAAA,SAAKT,OAAO,IAAAlG,KAAAC,EAAA,EAAAA,EAAAC,UAAAC,OAAAF,IAAAD,EAAAC,EAAA,GAAAC,UAAAD,GACX,GAAInC,KAAKuI,SACJvI,KAAKuI,QAAQ7G,eAAe0G,GAE/B,IADA,IAAMQ,EAAY5I,KAAKuI,QAAQH,GAAOU,MAAM,GACnC1I,EAAI,EAAG2I,EAAMH,EAAUvG,OAAQjC,EAAI2I,EAAK3I,IAChDwI,EAAUxI,GAAGuC,MAAM3C,KAAMkC,GAI5B,OAAOlC,MAMDiI,EAAAe,MAAP,SAAaC,IAEX,KAAM,OAAQ,MAAO,QAAQrB,QAAQ,SAAAjH,GACrC,IAAMa,EAAWV,OAAOoI,yBAAyBjB,EAAQxG,UAAWd,GACpEG,OAAOC,eAAekI,EAAOxH,UAAWd,EAAMa,MAOhDyG,EAAAxG,UAAAuB,QAAA,WAGC,OAFAgF,EAAAvG,UAAMuB,QAAOzC,KAAAP,MACbA,KAAKuI,aAAUY,EACRnJ,MAETiI,EA9GA,CAAgEpG,EAAA,8UCahEuH,EAAA,SAAApB,GAkBC,SAAAqB,IAAA,IAAA5E,EACCuD,EAAAzH,KAAAP,OAAOA,KAjBRyE,EAAA9D,KAAO,WAWG8D,EAAA6E,aAOT,IAAMC,EAAU7C,EAAqB2C,EAASrH,cAAeI,WAAY,kBAEzEqC,EAAK+E,OAASD,EAAQC,SAqUxB,OA3VkEC,EAAAJ,EAAArB,GAyB1DqB,EAAArH,YAAP,WACC,OACCwH,OAAQE,MAOV5I,OAAAC,eAAIsI,EAAA5H,UAAA,cAAJ,WACC,OAAOzB,KAAKsJ,UAAUjH,wCAOvBgH,EAAA5H,UAAAkI,IAAA,SAAIvB,GAEHpI,KAAK4C,OAAOqE,QAAQC,IAAIkB,EAAO,QAAS,+CACxCA,EAAMwB,KAAOxB,EAAMwB,KAAKC,UACxB,IAAMC,EAAQ9J,KAAK+J,QAAQ3B,EAAMwB,MAGjC,GAFA5J,KAAKsJ,UAAUlC,OAAO0C,EAAQ,EAAG,EAAG1B,GAEhCpI,KAAKqC,OAASrC,KAAKwJ,OAAQ,CAC9B,IAAMQ,EAAOhK,KAAKqC,OAASrC,KAAKwJ,OAChCxJ,KAAKsJ,UAAUlC,OAAO,EAAG4C,GAE1B,OAAOhK,MAQRqJ,EAAA5H,UAAAwI,OAAA,SAAO7B,GACN,IAAM0B,EAAQ9J,KAAKsJ,UAAUjC,QAAQe,GAIrC,OAHe,IAAX0B,GACH9J,KAAKsJ,UAAUlC,OAAO0C,EAAO,GAEvB9J,MAORqJ,EAAA5H,UAAAP,IAAA,SAAI0I,EAAcM,QAAA,IAAAA,MAAA,QACjB,IAAMJ,EAAQ9J,KAAK+J,QAAQH,EAAMM,GACjC,OAAe,IAAXJ,EACI9J,KAAKsJ,UAAUQ,GAEf,MAQTT,EAAA5H,UAAA0I,KAAA,WACC,OAAOnK,KAAKsJ,UAAU,IAMvBD,EAAA5H,UAAA2E,MAAA,WACC,OAAOpG,KAAKsJ,UAAUlD,SAOvBiD,EAAA5H,UAAA2I,SAAA,SAASR,EAAcM,QAAA,IAAAA,MAAA,QACtB,IAAMJ,EAAQ9J,KAAK+J,QAAQH,EAAMM,GACjC,OAAIJ,EAAQ,EAAI9J,KAAKsJ,UAAUjH,OACvBrC,KAAKsJ,UAAUQ,EAAQ,GAEvB,MAQTT,EAAA5H,UAAA4I,UAAA,SAAUT,GACT,IAAMb,EAAM/I,KAAKsJ,UAAUjH,OAE3B,GAAI0G,EAAM,GAAK/I,KAAKsJ,UAAUP,EAAM,GAAGa,KAAOA,EAC7C,OAAO5J,KAAKsJ,UAAUP,EAAM,GAE7B,IAAMe,EAAQ9J,KAAK+J,QAAQH,GAC3B,OAAIE,EAAQ,GAAK,EACT9J,KAAKsJ,UAAUQ,EAAQ,GAEvB,MAQTT,EAAA5H,UAAA6I,OAAA,SAAOC,GACN,GAAIvK,KAAKsJ,UAAUjH,OAAS,EAAG,CAC9B,IAAIyH,EAAQ9J,KAAK+J,QAAQQ,GACzB,GAAIT,GAAS,EACZ,GAAI9J,KAAKsJ,UAAUQ,GAAOF,OAASW,EAAO,CAEzC,IAAK,IAAInK,EAAI0J,EAAO1J,GAAK,GACpBJ,KAAKsJ,UAAUlJ,GAAGwJ,OAASW,EADJnK,IAE1B0J,EAAQ1J,EAKVJ,KAAKsJ,UAAYtJ,KAAKsJ,UAAUR,MAAM,EAAGgB,QAEzC9J,KAAKsJ,UAAYtJ,KAAKsJ,UAAUR,MAAM,EAAGgB,EAAQ,QAGlD9J,KAAKsJ,kBAE8B,IAA1BtJ,KAAKsJ,UAAUjH,QAErBrC,KAAKsJ,UAAU,GAAGM,MAAQW,IAC7BvK,KAAKsJ,cAGP,OAAOtJ,MAQRqJ,EAAA5H,UAAA+I,aAAA,SAAaZ,GACZ,IAAME,EAAQ9J,KAAK+J,QAAQH,GAI3B,OAHIE,GAAS,IACZ9J,KAAKsJ,UAAYtJ,KAAKsJ,UAAUR,MAAMgB,EAAQ,IAExC9J,MAQRqJ,EAAA5H,UAAAgJ,cAAA,SAAcrC,GACb,IAAM0B,EAAQ9J,KAAKsJ,UAAUjC,QAAQe,GACrC,OAAI0B,EAAQ,EACJ9J,KAAKsJ,UAAUQ,EAAQ,GAEvB,MAWCT,EAAA5H,UAAAsI,QAAV,SAAkBH,EAAcM,GAC/B,QAD+B,IAAAA,MAAA,QACD,IAA1BlK,KAAKsJ,UAAUjH,OAClB,OAAQ,EAET,IAAIqI,EAAY,EACV3B,EAAM/I,KAAKsJ,UAAUjH,OACvBsI,EAAM5B,EACV,GAAIA,EAAM,GAAK/I,KAAKsJ,UAAUP,EAAM,GAAGmB,IAAUN,EAChD,OAAOb,EAAM,EAEd,KAAO2B,EAAYC,GAAK,CAEvB,IAAIC,EAAW3F,KAAK4F,MAAMH,GAAaC,EAAMD,GAAa,GACpDI,EAAQ9K,KAAKsJ,UAAUsB,GACvBG,EAAY/K,KAAKsJ,UAAUsB,EAAW,GAC5C,GAAIE,EAAMZ,KAAWN,EAAM,CAE1B,IAAK,IAAIxJ,EAAIwK,EAAUxK,EAAIJ,KAAKsJ,UAAUjH,OAAQjC,IAAK,CACpCJ,KAAKsJ,UAAUlJ,GACnB8J,KAAWN,IACxBgB,EAAWxK,GAGb,OAAOwK,EACD,GAAIE,EAAMZ,GAASN,GAAQmB,EAAUb,GAASN,EACpD,OAAOgB,EACGE,EAAMZ,GAASN,EAEzBe,EAAMC,EAGNF,EAAYE,EAAW,EAGzB,OAAQ,GAODvB,EAAA5H,UAAAuJ,SAAR,SACC5H,EACA6H,EAAgBC,QAAhB,IAAAD,MAAA,QAAgB,IAAAC,MAAalL,KAAKsJ,UAAUjH,OAAS,GAErDrC,KAAKsJ,UAAUR,MAAMmC,EAAYC,EAAa,GAAGtD,QAAQxE,IAO1DiG,EAAA5H,UAAAmG,QAAA,SAAQxE,GAEP,OADApD,KAAKgL,SAAS5H,GACPpD,MAQRqJ,EAAA5H,UAAA0J,cAAA,SAAcvB,EAAMxG,GAEnB,IAAM8H,EAAalL,KAAK+J,QAAQH,GAIhC,OAHoB,IAAhBsB,GACHlL,KAAKgL,SAAS5H,EAAU,EAAG8H,GAErBlL,MAQRqJ,EAAA5H,UAAA2J,aAAA,SAAaxB,EAAMxG,GAElB,IAAM6H,EAAajL,KAAK+J,QAAQH,GAEhC,OADA5J,KAAKgL,SAAS5H,EAAU6H,EAAa,GAC9BjL,MAWRqJ,EAAA5H,UAAA4J,eAAA,SAAeC,EAAmBC,EAAiBnI,GAClD,IAAI6H,EAAajL,KAAK+J,QAAQuB,GAC1BJ,EAAalL,KAAK+J,QAAQwB,GAa9B,OAZoB,IAAhBN,IAAqC,IAAhBC,GACpBlL,KAAKsJ,UAAU2B,GAAYrB,OAAS0B,IACvCL,GAAc,GAGXjL,KAAKsJ,UAAU4B,GAAYtB,OAAS2B,IACvCL,GAAc,GAEflL,KAAKgL,SAAS5H,EAAU6H,EAAYC,KACV,IAAhBD,GACVjL,KAAKgL,SAAS5H,EAAU,EAAG8H,GAErBlL,MASRqJ,EAAA5H,UAAA+J,YAAA,SAAY5B,EAAcxG,GAIzB,IAFA,IAAI6H,EAAajL,KAAK+J,QAAQH,GAEvBqB,GAAc,GAAKjL,KAAKsJ,UAAU2B,GAAYrB,MAAQA,GAC5DqB,IAGD,OADAjL,KAAKgL,SAAS5H,EAAU6H,EAAa,GAC9BjL,MAQRqJ,EAAA5H,UAAAgK,cAAA,SAAc7B,EAAcxG,GAE3B,IAAM8H,EAAalL,KAAK+J,QAAQH,GAQhC,OAPoB,IAAhBsB,GACHlL,KAAKgL,SAAS,SAAA5C,GACTA,EAAMwB,OAASA,GAClBxG,EAASgF,IAER,EAAG8C,GAEAlL,MAMRqJ,EAAA5H,UAAAuB,QAAA,WAGC,OAFAgF,EAAAvG,UAAMuB,QAAOzC,KAAAP,MACbA,KAAKsJ,aACEtJ,MAETqJ,EA3VA,CAAkExH,EAAA,GFd5D,SAAU6J,IAUV,IAA0BC,EAN/B,OAHK7D,IAS0B6D,EARd,IAAIC,aASrB9D,EAAgB6D,EAEhB3H,OAAO6H,mBAAqB/D,GATrBA,EATRA,EAAgB9D,OAAO6H,mBGEvB,IAAMC,KAKA,SAAUC,EAAcC,GAC7BF,EAAiBtD,KAAKwD,GAcvB,IAAMC,KAKA,SAAUC,EAAeF,GAC9BC,EAAmBzD,KAAKwD,OC5BrBG,ynDC+BJC,EAAA,SAAApE,GA2DC,SAAAqE,IAAA,IAAA5H,EACCuD,EAAAzH,KAAAP,OAAOA,KA1DRyE,EAAA9D,KAAO,UA2BC8D,EAAA6H,WAAa,IAAIC,IAKjB9H,EAAA+H,UAA2C,IAAIpD,EAK/C3E,EAAAgI,YAAc,EAedhI,EAAAiI,cAAwB,EAO/B,IAAMnD,EAAU7C,EAAqB2F,EAAQrK,cAAeI,WAAY,mBAExEqC,EAAKkI,SAAWpD,EAAQoC,QAExBlH,EAAKmI,aAAerD,EAAQsD,YAC5BpI,EAAKqI,UAAYvD,EAAQuD,UAEzBrI,EAAKsI,QAAU,IAAI5J,EAAOsB,EAAKoE,KAAKvE,KAAKG,EAAM,QAAS8E,EAAQyD,YAAazD,EAAQjG,gBACrFmB,EAAK0D,GAAG,OAAQ1D,EAAKwI,aAAa3I,KAAKG,IAGvCA,EAAKkI,SAASO,iBAAiB,cAAe,WAC7CzI,EAAKoE,KAAK,cAAepE,EAAK0I,WAwUjC,OAjZ6BC,EAAAf,EAAArE,GA6ErBqE,EAAArK,YAAP,WACC,OACCgL,YAAa,SACbrB,QAASD,IACTmB,YAAa,cACbC,UAAW,GACXxJ,eAAgB,MAOlB+I,EAAA5K,UAAA4L,WAAA,WF3GK,IAA4BC,EEiHhC,OALKtN,KAAK0M,eF5GsBY,EE8GbtN,KF5GpB8L,EAAiBlE,QAAQ,SAAAoE,GAAM,OAAAA,EAAGsB,KE6GhCtN,KAAK0M,cAAe,GAEd1M,MAORqM,EAAA5K,UAAA8L,eAAA,WACC,OAAOvN,KAAK2M,SAASY,kBAEtBlB,EAAA5K,UAAA+L,iBAAA,WACC,OAAOxN,KAAK2M,SAASa,oBAEtBnB,EAAA5K,UAAAgM,mBAAA,WACC,OAAOzN,KAAK2M,SAASc,sBAEtBpB,EAAA5K,UAAAiM,mBAAA,WACC,OAAO1N,KAAK2M,SAASe,sBAEtBrB,EAAA5K,UAAAkM,aAAA,SAAaC,EAA0BvL,EAAgBwL,GACtD,OAAO7N,KAAK2M,SAASgB,aAAaC,EAAkBvL,EAAQwL,IAE7DxB,EAAA5K,UAAAqM,oBAAA,SAAoBC,GACnB,OAAO/N,KAAK2M,SAASmB,oBAAoBC,IAE1C1B,EAAA5K,UAAAuM,sBAAA,SAAsBC,GACrB,OAAOjO,KAAK2M,SAASqB,sBAAsBC,IAE5C5B,EAAA5K,UAAAyM,qBAAA,WACC,OAAOlO,KAAK2M,SAASuB,wBAEtB7B,EAAA5K,UAAA0M,gBAAA,WACC,OAAOnO,KAAK2M,SAASwB,mBAEtB9B,EAAA5K,UAAA2M,YAAA,SAAYC,GACX,OAAOrO,KAAK2M,SAASyB,YAAYC,IAElChC,EAAA5K,UAAA6M,yBAAA,WACC,OAAOtO,KAAK2M,SAAS2B,4BAEtBjC,EAAA5K,UAAA8M,WAAA,WACC,OAAOvO,KAAK2M,SAAS4B,cAEtBlC,EAAA5K,UAAA+M,gBAAA,SAAgBC,EAAuBC,GACtC,OAAO1O,KAAK2M,SAAS6B,gBAAgBC,EAAaC,IAEnDrC,EAAA5K,UAAAkN,aAAA,WACC,OAAO3O,KAAK2M,SAASgC,gBAEtBtC,EAAA5K,UAAAmN,mBAAA,SACCC,EACAC,EACAC,GAEA,OAAO/O,KAAK2M,SAASiC,mBAAmBC,EAAMC,EAAMC,IAErD1C,EAAA5K,UAAAuN,mBAAA,WACC,OAAOhP,KAAK2M,SAASqC,sBAEtB3C,EAAA5K,UAAAwN,iBAAA,WACC,OAAOjP,KAAK2M,SAASsC,oBAEtB5C,EAAA5K,UAAAyN,gBAAA,SAAgBC,GACf,OAAOnP,KAAK2M,SAASuC,gBAAgBC,IAMtCrO,OAAAC,eAAIsL,EAAA5K,UAAA,mBAAJ,WACC,OAAOzB,KAAK2M,SAASyC,6CAKtBtO,OAAAC,eAAIsL,EAAA5K,UAAA,aAAJ,WACC,OAAOzB,KAAK2M,SAASQ,uCAKtBrM,OAAAC,eAAIsL,EAAA5K,UAAA,kBAAJ,WACC,OAAOzB,KAAK2M,SAASkB,4CAKtB/M,OAAAC,eAAIsL,EAAA5K,UAAA,gBAAJ,WACC,OAAOzB,KAAK2M,SAAS0C,0CAMtBvO,OAAAC,eAAIsL,EAAA5K,UAAA,iBAAJ,WAEC,OADAzB,KAAK4C,OAAO5C,KAAK0M,aAAc,sFACxB1M,KAAKsP,gBAEb,SAAcC,GACbvP,KAAK4C,QAAQ5C,KAAK0M,aAAc,qDAChC1M,KAAKsP,WAAaC,mCAMnBzO,OAAAC,eAAIsL,EAAA5K,UAAA,mBAAJ,WAEC,OADAzB,KAAK4C,OAAO5C,KAAK0M,aAAc,sFACxB1M,KAAKwP,kBAEb,SAAgB9O,GACfV,KAAK4C,QAAQ5C,KAAK0M,aAAc,qDAChC1M,KAAKwP,aAAe9O,mCAarBI,OAAAC,eAAIsL,EAAA5K,UAAA,sBAAJ,WACC,OAAOzB,KAAK+M,QAAQzJ,oBAErB,SAAmB0B,GAClBhF,KAAK+M,QAAQzJ,eAAiB0B,mCAO/BlE,OAAAC,eAAIsL,EAAA5K,UAAA,mBAAJ,WACC,OAAOzB,KAAK+M,QAAQ1J,UAErB,SAAgBA,GACfrD,KAAK+M,QAAQ1J,KAAOA,mCAcrBvC,OAAAC,eAAIsL,EAAA5K,UAAA,mBAAJ,WACC,OAAOzB,KAAK4M,kBAEb,SAAgB6C,GACf,IAAIC,EAAiB,EAErB,GADA1P,KAAK4M,aAAe6C,EAChB5J,EAAS4J,GACZ,OAAQA,GACP,IAAK,cACJC,EAAiB,GACjB,MACD,IAAK,WACJA,EAAiB,GACjB,MACD,IAAK,WACJA,EAAiB,IACjB,MACD,IAAK,UACJA,EAAiB,IAIpB1P,KAAK8M,UAAY4C,EACjB1P,KAAKsD,eAAiBoM,EAAiB,mCAMxC5O,OAAAC,eAAIsL,EAAA5K,UAAA,kBAAJ,WACC,OAAOzB,KAAK2M,0CAMbN,EAAA5K,UAAAkO,IAAA,WACC,OAAO3P,KAAK2M,SAASyC,YAAcpP,KAAK8M,WAOzCT,EAAA5K,UAAAmO,OAAA,WACC,MAA4B,cAAxB5P,KAAK2M,SAASQ,OAAyBnN,KAAK2M,oBAAoBf,aAC5D5L,KAAK2M,SAASiD,SAEdC,QAAQC,WAQXzD,EAAA5K,UAAAsO,MAAN,0GACK/P,KAAK2M,oBAAoBf,cAC5B,EAAM5L,KAAK2M,SAASoD,UADjB,YACHxJ,EAAAyJ,wBAKD,OAHIhQ,KAAK0M,eFtTkBY,EEuTbtN,KFrTfiM,EAAmBrE,QAAQ,SAAAoE,GAAM,OAAAA,EAAGsB,OEuTnC,EAAOtN,MFzTH,IAAuBsN,OE+T5BjB,EAAA5K,UAAAwO,YAAA,SAAYC,GACX,GAAIlQ,KAAKsM,WAAWpF,IAAIgJ,GACvB,OAAOlQ,KAAKsM,WAAWpL,IAAIgP,GAI3B,IAFA,IAAMC,EAASnQ,KAAK2M,SAASgB,aAAa,EAAG,IAAK3N,KAAK2M,SAASkB,YAC1DuC,EAAMD,EAAOE,eAAe,GACzBjQ,EAAI,EAAGA,EAAIgQ,EAAI/N,OAAQjC,IAC/BgQ,EAAIhQ,GAAK8P,EAEV,IAAMI,EAAWtQ,KAAK2M,SAASc,qBAO/B,OANA6C,EAASC,aAAe,EACxBD,EAASE,iBAAmB,WAC5BF,EAASH,OAASA,EAClBG,EAASG,MAAO,EAChBH,EAASI,MAAM,GACf1Q,KAAKsM,WAAWqE,IAAIT,EAAKI,GAClBA,GAOTjE,EAAA5K,UAAAuB,QAAA,eAAAyB,EAAAzE,KAKC,OAJAgI,EAAAvG,UAAMuB,QAAOzC,KAAAP,MACbA,KAAK+M,QAAQ/J,UACbhD,KAAKwM,UAAUxJ,UACflC,OAAO+F,KAAK7G,KAAKsM,YAAYsE,IAAI,SAAAV,GAAO,OAAAzL,EAAK6H,WAAW4D,GAAKW,eACtD7Q,MAWAqM,EAAA5K,UAAAwL,aAAR,WAGC,IAFA,IAAM0C,EAAM3P,KAAK2P,MACbmB,EAAa9Q,KAAKwM,UAAUrC,OACzBnK,KAAKwM,UAAUnK,QAAUyO,GAAcA,EAAWlH,MAAQ+F,GAEhEmB,EAAW1N,WAEXpD,KAAKwM,UAAUpG,QAEf0K,EAAa9Q,KAAKwM,UAAUrC,QAW9BkC,EAAA5K,UAAAkD,WAAA,SAAWoM,EAA8BC,GACxChR,KAAKyM,cACL,IAAMkD,EAAM3P,KAAK2P,MAMjB,OALA3P,KAAKwM,UAAU7C,KACdvG,SAAW2N,EACXE,GAAKjR,KAAKyM,YACV7C,KAAO+F,EAAMqB,IAEPhR,KAAKyM,aAObJ,EAAA5K,UAAAqD,aAAA,SAAamM,GAAb,IAAAxM,EAAAzE,KAMC,OALAA,KAAKwM,UAAU5E,QAAQ,SAAAQ,GAClBA,EAAM6I,KAAOA,GAChBxM,EAAK+H,UAAUvC,OAAO7B,KAGjBpI,MAETqM,EAjZA,CAA6BtE,GDvBvB,SAAUmJ,IAIf,OAHK/E,GACJgF,EAAW,IAAI/E,GAETD,EAMF,SAAUgF,EAAWxF,GAC1BQ,EAAgBR,EAChBA,EAAQ0B,aAERrJ,OAAOoN,aAAezF,EAmBvB,GAtCAQ,EAAgBnI,OAAOoN,oBAsClBjI,GAAKkI,qBAAsB,CAC/B,IAAIC,EAAS,IAEG,QAAZrO,EAAA,IACHqO,EAAS,IAEV,IAAMC,EAAc,cAAcD,EAASrO,EAAA,EAAO,MAElDP,QAAQT,IAAI,KAAKsP,EAAe,sCEvB3B,SAAUC,EAAyBxM,GACxC,OAAOC,KAAKwM,IAAI,EAAIzM,EAAW,IAOhC,IAAI0M,EAAY,IAgBV,SAAUC,EAAKC,GACpB,OAAO,GAAK3M,KAAK4M,MAAM,GAAK5M,KAAK6M,KAAKF,EAAYF,mVCxBnDK,EAAA,SAAA/J,GAwBC,SAAAgK,EAAYrG,EAAkBvK,EAAmB6Q,GAAjD,IAAAxN,EACCuD,EAAAzH,KAAAP,OAAOA,YAHCyE,EAAAyN,aAAqB,IAK7BzN,EAAK0N,KAAO/Q,EACZqD,EAAK2N,OAASH,EACdxN,EAAKkH,QAAUA,EACflH,EAAK4N,aAAe5N,EAAK6N,oBAqQ3B,OAnSsFC,EAAAP,EAAAhK,GAoC3EgK,EAAAvQ,UAAA6Q,gBAAV,eAAA7N,EAAAzE,KACC,OACCwS,IACCC,OAAQ,SAACrR,GACR,OAAOqD,EAAKiO,kBAAkBC,WAAWvR,KAE1CwR,OAAQ,wBAETxS,GACCqS,OAAQ,SAACrR,GACR,OAAOqD,EAAKoO,cAAcC,SAAS1R,EAAO,MAE3CwR,OAAQ,aAETpS,GACCiS,OAAQ,SAACrR,GACR,OAAOqD,EAAKsO,cAAcD,SAAS1R,EAAO,IAAMqD,EAAKuO,sBAEtDJ,OAAQ,aAETvR,GACCoR,OAAQ,SAACrR,EAAO6R,GACf,IAAMC,EAAeJ,SAAS1R,EAAO,IAC/B+R,EAAiB,MAARF,EAAc,IAAM,EACnC,OAAqB,IAAjBC,EACIzO,EAAKsO,cAActO,EAAKuO,qBAAuBG,EAE/C1O,EAAKsO,cAAc,EAAIG,GAAgBC,GAGhDP,OAAQ,kBAETQ,QACCX,OAAQ,SAACrR,GACR,OAAOqD,EAAK4N,aAAa5N,EAAKyN,cAAcO,OAAOlS,KAAKkE,EAAMrD,IAE/DwR,OAAQ,qBAEThR,GACC6Q,OAAQ,SAACrR,GACR,OAAOqD,EAAK4O,gBAAgBV,WAAWvR,KAExCwR,OAAQ,sBAETU,SACCb,OAAQ,SAACrR,GACR,OAAO0R,SAAS1R,EAAO,IAAMqD,EAAKkH,QAAQkC,YAE3C+E,OAAQ,kBAETrD,GACCkD,OAAQ,SAACrR,GACR,IAAM8R,EAAeJ,SAAS1R,EAAO,IACrC,OAAOqD,EAAKsO,cAAc,GAAgC,EAA3B9N,KAAK4F,MAAMqI,MAE3CN,OAAQ,aAETW,IACCd,OAAQ,SAACjS,EAAGgT,EAAG5R,GACd,IAAI6R,EAAQ,EAUZ,OATIjT,GAAW,MAANA,IACRiT,GAAShP,EAAKsO,cAActO,EAAKuO,oBAAsBL,WAAWnS,KAE/DgT,GAAW,MAANA,IACRC,GAAShP,EAAKsO,cAAcJ,WAAWa,KAEpC5R,GAAW,MAANA,IACR6R,GAAShP,EAAKsO,cAAcJ,WAAW/Q,GAAK,IAEtC6R,GAERb,OAAQ,yDAYXZ,EAAAvQ,UAAAoI,QAAA,WAIC,GAHI7J,KAAKmS,gBAAgBH,GACxBhS,KAAK0T,SAAS1T,KAAKmS,MAEhB/M,EAAQpF,KAAKmS,MAChB,OAAOnS,KAAK2T,SACN,GAAI9N,EAAS7F,KAAKmS,OAAS/M,EAAQpF,KAAKoS,SAC9C,IAAK,IAAMH,KAASjS,KAAKqS,aACxB,GAAIrS,KAAKqS,aAAaJ,GAAOW,OAAO7M,KAAK/F,KAAKmS,KAAKyB,QAAS,CAC3D5T,KAAKoS,OAASH,EACd,YAGI,GAAIzM,EAASxF,KAAKmS,MAAO,CAC/B,IAAIsB,EAAQ,EACZ,IAAK,IAAMI,KAAY7T,KAAKmS,KAC3B,GAAI7M,EAAUtF,KAAKmS,KAAK0B,IAAY,CACnC,IAAMC,EAAW9T,KAAKmS,KAAK0B,GAG3BJ,GADa,IAAKzT,KAAKyF,YAAYzF,KAAK2L,QAASkI,GAAWhK,UAAYiK,EAI1E,OAAOL,EAER,GAAInO,EAAUtF,KAAKoS,QAAS,CAC3B,IAAM2B,EAAO/T,KAAKqS,aAAarS,KAAKoS,QAC9B4B,EAAWhU,KAAKmS,KAAK7P,WAAWsR,OAAOK,MAAMF,EAAKnB,QACxD,OAAIoB,EACID,EAAKtB,OAAO9P,MAAM3C,KAAMgU,EAASlL,MAAM,IAEvCiL,EAAKtB,OAAOlS,KAAKP,KAAMA,KAAKmS,MAE9B,OAAItM,EAAS7F,KAAKmS,MACjBQ,WAAW3S,KAAKmS,MAEhBnS,KAAKmS,MAWJH,EAAAvQ,UAAAiR,kBAAV,SAA4BwB,GAC3B,OAAO,EAAIA,GAMFlC,EAAAvQ,UAAAsR,cAAV,SAAwBoB,GACvB,OAAQ,GAAKnU,KAAKoU,UAAaD,GAMtBnC,EAAAvQ,UAAA4R,gBAAV,SAA0BgB,GACzB,OAAOA,GAOErC,EAAAvQ,UAAAoR,cAAV,SAAwByB,GACvB,OAAQA,EAAStU,KAAK+S,cAAc,GAAM/S,KAAKuU,WAMtCvC,EAAAvQ,UAAAkS,OAAV,WACC,OAAO3T,KAAKwU,QAUHxC,EAAAvQ,UAAA2S,QAAV,WACC,OAAOpU,KAAK2L,QAAQ8I,UAAUC,IAAItT,OAMzB4Q,EAAAvQ,UAAAuR,kBAAV,WACC,OAAOhT,KAAK2L,QAAQ8I,UAAUE,eAMrB3C,EAAAvQ,UAAA8S,QAAV,WACC,OAAOvU,KAAK2L,QAAQ8I,UAAUG,KAgB/B5C,EAAAvQ,UAAAiS,SAAA,SAASrQ,GAER,OADArD,KAAKoS,YAASjJ,EACNnJ,KAAKkS,cACZ,IAAK,IACJlS,KAAKmS,KAAO9O,EAAKwR,YACjB,MACD,IAAK,IACJ7U,KAAKmS,KAAO9O,EAAKyR,UACjB,MACD,IAAK,KACJ9U,KAAKmS,KAAO9O,EAAK0R,cACjB,MACD,IAAK,OACJ/U,KAAKmS,KAAO9O,EAAK2R,SAGnB,OAAOhV,MAqBRgS,EAAAvQ,UAAAsT,YAAA,WACC,OAAO,EAAI/U,KAAK6U,aAMjB7C,EAAAvQ,UAAAwT,UAAA,WACC,OAAOjV,KAAK6U,YAAc7U,KAAK2L,QAAQkC,YAMxCmE,EAAAvQ,UAAAyT,eAAA,WACC,OAA0B,IAAnBlV,KAAK6U,aAEd7C,EAnSA,CAAsFnQ,EAAA,8UCtBtFsT,EAAA,SAAAnN,GAAA,SAAAoN,IAAA,IAAA3Q,EAAA,OAAAuD,KAAArF,MAAA3C,KAAAoC,YAAApC,YAGCyE,EAAA9D,KAAO,SAsHR,OAxHQ0U,EAAAD,EAAApN,GAIGoN,EAAA3T,UAAA6Q,gBAAV,eAAA7N,EAAAzE,KACC,OAAOc,OAAOwF,OAAO0B,EAAAvG,UAAM6Q,gBAAe/R,KAAAP,OACzC2P,KACC8C,OAAQ,SAAC6C,GACR,OAAO7Q,EAAK+P,OAAS,IAAK/P,EAAKgB,YAAiChB,EAAKkH,QAAS2J,GAASzL,WAExF+I,OAAQ,WAET2C,UACC9C,OAAQ,SAAC6C,GACR,IAAME,EAAU,IAAIJ,EAAU3Q,EAAKkH,QAAS2J,GAASzL,UACrD,OAAOpF,EAAK4O,gBAAgB5O,EAAKkH,QAAQ8I,UAAUgB,gBAAgBD,KAEpE5C,OAAQ,aAeXwC,EAAA3T,UAAA8T,SAAA,SAASG,EAA2CC,QAAA,IAAAA,MAAA,GACnD,IAAMC,EAAc,IAAK5V,KAAKyF,YAAiCzF,KAAK2L,QAAS+J,GAAQ7L,UAC/EzI,EAAQpB,KAAK6J,UAInB,OAAOzI,GAHU6D,KAAK4M,MAAMzQ,EAAQwU,GACXA,EACJxU,GACCuU,GAcvBP,EAAA3T,UAAAoU,WAAA,WAGC,IAHD,IAAApR,EAAAzE,KACO4J,EAAO5J,KAAK6U,YACZiB,GAAgC,MAC7BC,EAAQ,EAAGA,EAAQ,EAAGA,IAAS,CACvC,IAAML,EAASzQ,KAAKwM,IAAI,EAAGsE,GAC3BD,EAActN,KAAKkN,EAAS,MAC5BI,EAActN,KAAKkN,EAAS,KAC5BI,EAActN,KAAKkN,EAAS,KAE7BI,EAActN,KAAK,KAEnB,IAAIwN,EAAUF,EAAc,GACxBG,EAAiB,IAAIb,EAAUpV,KAAK2L,QAASmK,EAAc,IAAIjB,YAQnE,OAPAiB,EAAclO,QAAQ,SAAAsO,GACrB,IAAMC,EAAkB,IAAIf,EAAU3Q,EAAKkH,QAASuK,GAAUrB,YAC1D5P,KAAKmR,IAAID,EAAkBvM,GAAQ3E,KAAKmR,IAAIH,EAAiBrM,KAChEoM,EAAUE,EACVD,EAAiBE,KAGZH,GAMRZ,EAAA3T,UAAA4U,sBAAA,WACC,IAAMC,EAActW,KAAK+S,cAAc,GACnCwD,EAAWvW,KAAK6J,UAAYyM,EAChCC,EAAW5D,WAAW4D,EAASzS,QAAQ,IACvC,IAAM0S,EAAWvR,KAAK4F,MAAM0L,EAAWvW,KAAKgT,qBACxCyD,EAAcF,EAAW,EAAK,EAClCA,EAAWtR,KAAK4F,MAAM0L,GAAYvW,KAAKgT,oBACvC,IAAM0D,EAAkBD,EAAWnU,WAMnC,OALIoU,EAAgBrU,OAAS,IAE5BoU,EAAa9D,WAAWA,WAAW+D,GAAiB5S,QAAQ,MAE3C0S,EAAUD,EAAUE,GACtBE,KAAK,MAMtBvB,EAAA3T,UAAAqT,QAAA,WACC,IAAMwB,EAActW,KAAK+S,cAAc,GACjCwD,EAAWvW,KAAK6J,UAAYyM,EAClC,OAAOrR,KAAK4M,MAAM0E,EAAWvW,KAAKuU,YAMnCa,EAAA3T,UAAAoT,UAAA,WACC,OAAO7U,KAAK6J,WAMbuL,EAAA3T,UAAAuT,OAAA,WACC,OAAOrD,EAAK3R,KAAK+U,gBAGRK,EAAA3T,UAAA+S,KAAV,WACC,OAAOxU,KAAK2L,QAAQgE,OAEtByF,EAzHA,CACQrD,GA+HF,SAAU6E,EAAKxV,EAAmB6Q,GACvC,OAAO,IAAIkD,EAAUjE,IAAc9P,EAAO6Q,kVC7H3C4E,EAAA,SAAA7O,GAAA,SAAA8O,IAAA,IAAArS,EAAA,OAAAuD,KAAArF,MAAA3C,KAAAoC,YAAApC,YAECyE,EAAA9D,KAAO,YAEE8D,EAAAyN,aAA8B,OAkMxC,OAtMiE6E,EAAAD,EAAA9O,GAUhElH,OAAAC,eAAW+V,EAAA,UAAX,WACC,OHiBMpF,OGfP,SAAcwC,IHkBT,SAAgBA,GACrBxC,EAAKwC,EGlBJ8C,CAAM9C,oCAOG4C,EAAArV,UAAA6Q,gBAAV,WACC,OAAOxR,OAAOwF,UAAW0B,EAAAvG,UAAM6Q,gBAAe/R,KAAAP,OAC7CiX,MACCrE,OAAS,uBACTH,OAAA,SAAOrR,GACN,MAA0B,SAAtBpB,KAAKkS,aACD9Q,EAEA0V,EAAeI,KAAK9V,KAI9B+V,MACCvE,OAAS,sCACTH,OAAA,SAAO2E,EAAOC,GACb,IACMC,EADQC,EAAiBH,EAAMI,eACmB,IAA5B1E,SAASuE,EAAQ,IAAM,GACnD,MAA0B,SAAtBrX,KAAKkS,aACDoF,EAEAR,EAAeI,KAAKI,KAI9B/D,IACCX,OAAS,qDACTH,OAAA,SAAOjS,EAAGgT,EAAG5R,GACZ,IAAI6R,EAAQ,EAUZ,OATIjT,GAAW,MAANA,IACRiT,GAASzT,KAAK+S,cAAc/S,KAAKgT,oBAAsBL,WAAWnS,KAE/DgT,GAAW,MAANA,IACRC,GAASzT,KAAK+S,cAAcJ,WAAWa,KAEpC5R,GAAW,MAANA,IACR6R,GAASzT,KAAK+S,cAAcJ,WAAW/Q,GAAK,IAEtC6R,OAgBXqD,EAAArV,UAAAgW,UAAA,SAAUzS,GACT,OAAO,IAAI8R,EAAe9W,KAAK2L,QAAS3L,KAAK6J,UAAY2H,EAAyBxM,KAUnF8R,EAAArV,UAAAiW,UAAA,SAAUC,GAAV,IAAAlT,EAAAzE,KACC,OAAO2X,EAAU/G,IAAI,SAAA5L,GACpB,OAAOP,EAAKgT,UAAUzS,MAcxB8R,EAAArV,UAAAuT,OAAA,WACC,OAAOrD,EAAK3R,KAAK6J,YASlBiN,EAAArV,UAAAmW,OAAA,WACC,IAAM1D,EAAOlU,KAAK+U,cACZ9S,EAAMgD,KAAK6M,KAAKoC,EAAO4C,EAAepF,IACxC4F,EAAarS,KAAK4M,MAAM,GAAK5P,GAAO,GAClCoV,EAASpS,KAAK4F,MAAMyM,EAAa,IAKvC,OAJID,EAAS,IACZC,IAAe,GAAKD,GAEJQ,EAAiBP,EAAa,IAC7BD,EAAO/U,YAM1BwU,EAAArV,UAAAoT,UAAA,WACC,OAAO,EAAI7M,EAAAvG,UAAMoT,UAAStU,KAAAP,OAM3B8W,EAAArV,UAAAqT,QAAA,WACC,IAAMwB,EAActW,KAAK+S,cAAc,GACjCwD,EAAWvW,KAAK6J,UAAYyM,EAClC,OAAOrR,KAAK4F,MAAM0L,EAAWvW,KAAKuU,YAUzBuC,EAAArV,UAAAkS,OAAV,WACC,OAAO,GAMEmD,EAAArV,UAAAiR,kBAAV,SAA4BwB,GAC3B,OAAOA,GAME4C,EAAArV,UAAAoR,cAAV,SAAwByB,GACvB,OAAO,GAAc,GAARA,GAAetU,KAAKoU,UAAYpU,KAAKuU,aAMzCuC,EAAArV,UAAAsR,cAAV,SAAwBoB,GACvB,OAAO,EAAInM,EAAAvG,UAAMsR,cAAaxS,KAAAP,KAACmU,IAMtB2C,EAAArV,UAAA4R,gBAAV,SAA0BgB,GACzB,OAAO,EAAIA,GAULyC,EAAAI,KAAP,SAAYD,GACX,OHvII,SAAeA,GACpB,OAAOvF,EAAKzM,KAAKwM,IAAI,GAAIwF,EAAO,IAAM,IGsI9BC,CAAKD,IASNH,EAAAnF,KAAP,SAAYC,GACX,OAAOD,EAAKC,IAEdkF,EAtMA,CAAiE3B,GAiN3DoC,GAELO,KAAS,EAAG9L,IAAQ,EAAGvL,EAAM,EAAGsX,KAAO,EAAGC,GAAO,EACjDC,IAAQ,EAAGC,GAAO,EAAGxX,EAAM,EAAGyX,KAAO,EAAGC,GAAO,EAC/CC,IAAQ,EAAGC,GAAO,EAAG1T,EAAM,EAAG2T,KAAO,EAAGC,GAAO,EAC/CC,IAAQ,EAAGC,GAAO,EAAGC,EAAM,EAAGC,KAAO,EAAGC,GAAO,EAC/CC,IAAQ,EAAGC,GAAO,EAAGC,EAAM,EAAGC,KAAO,EAAGC,GAAO,EAC/CC,IAAQ,EAAGC,GAAO,EAAGC,EAAM,EAAGC,KAAO,GAAIC,GAAO,GAChDC,IAAQ,EAAGC,GAAO,GAAIC,EAAM,GAAIC,KAAO,GAAIC,GAAO,IAQ7C/B,GAAoB,IAAK,KAAM,IAAK,KAAM,IAAK,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,KAKhF,SAAUgC,EAAUzY,EAA+B6Q,GACxD,OAAO,IAAI4E,EAAe3F,IAAc9P,EAAO6Q,kVC7OhD6H,EAAA,SAAA9R,GAAA,SAAA8R,IAAA,IAAArV,EAAA,OAAAuD,KAAArF,MAAA3C,KAAAoC,YAAApC,YAECyE,EAAA9D,KAAO,kBAQR,OAVgFoZ,EAAAD,EAAA9R,GAOrE8R,EAAArY,UAAA+S,KAAV,WACC,OAAOxU,KAAK2L,QAAQ8I,UAAUJ,SAEhCyF,EAVA,CAAgF3E,GAkB1E,SAAU6E,EAAc5Y,EAAmB6Q,GAChD,OAAO,IAAI6H,EAAmB5I,IAAc9P,EAAO6Q,mVCRpDgI,GAAA,SAAAjS,GAYC,SAAAkS,EAAYvO,GAAZ,IAAAlH,EAAAzE,KACOuJ,EAAU7C,EAAqBwT,EAAgBlY,cAAeI,WAAY,mBAChFqC,EAAAuD,EAAAzH,KAAAP,OAAOA,MACEma,eACR1V,EAAKkH,QAAUlH,EAAK0V,eAEpB1V,EAAKkH,QAAUpC,EAAQoC,UAwH1B,OA1IsFyO,GAAAF,EAAAlS,GAsB9EkS,EAAAlY,YAAP,WACC,OACC2J,QAASuF,MAOXgJ,EAAAzY,UAAAkO,IAAA,WACC,OAAO3P,KAAK2L,QAAQyD,YAAcpP,KAAK2L,QAAQmB,WAMhDoN,EAAAzY,UAAA4Y,UAAA,WACC,OAAOra,KAAK2L,QAAQyD,aAMrBtO,OAAAC,eAAImZ,EAAAzY,UAAA,kBAAJ,WACC,OAAO,EAAIzB,KAAK2L,QAAQkC,4CAMzB/M,OAAAC,eAAImZ,EAAAzY,UAAA,iBAAJ,WACC,OAAO,IAAMzB,KAAK2L,QAAQkC,4CAM3BqM,EAAAzY,UAAAoT,UAAA,SAAUjL,GACT,OAAO,IAAIuL,EAAUnV,KAAK2L,QAAS/B,GAAMiL,aAM1CqF,EAAAzY,UAAAsT,YAAA,SAAYb,GACX,OAAO,IAAI2C,EAAe7W,KAAK2L,QAASuI,GAAMa,eAM/CmF,EAAAzY,UAAAqT,QAAA,SAAQlL,GACP,OAAO,IAAIkQ,EAAmB9Z,KAAK2L,QAAS/B,GAAMkL,WAanDoF,EAAAzY,UAAAP,IAAA,eAAAuD,EAAAzE,KACO2G,EAAmC3G,KZhCXyF,YAAYzD,cYkD1C,OAjBAlB,OAAO+F,KAAKF,GAAUiB,QAAQ,SAAA0S,GAC7B,GAAIrT,QAAQC,IAAIzC,EAAM6V,GAAY,CACjC,IAAMC,EAAS9V,EAAK6V,GAChBhV,EAAUiV,IAAWjV,EAAUiV,EAAOnZ,QAAUkE,EAAUiV,EAAOC,gBACpE7T,EAAS2T,GAAaC,EAAOnZ,MACnBmZ,aAAkBL,EAC5BvT,EAAS2T,GAAaC,EAAOrZ,MAEnByE,EAAQ4U,IAAWhV,EAASgV,IAAW1U,EAAS0U,IAAW7U,EAAU6U,GAC/E5T,EAAS2T,GAAaC,SAGf5T,EAAS2T,MAKZ3T,GAkBRuT,EAAAzY,UAAAkP,IAAA,SAAI8J,GAAJ,IAAAhW,EAAAzE,KAYC,OAXAc,OAAO+F,KAAK4T,GAAO7S,QAAQ,SAAA0S,GACtBrT,QAAQC,IAAIzC,EAAM6V,IAAchV,EAAUb,EAAK6V,MAC9C7V,EAAK6V,IAAchV,EAAUb,EAAK6V,GAAWlZ,QAAUkE,EAAUb,EAAK6V,GAAWE,gBACpF/V,EAAK6V,GAAWlZ,MAAQqZ,EAAMH,GACpB7V,EAAK6V,aAAsBJ,EACrCzV,EAAK6V,GAAW3J,IAAI8J,EAAMH,IAE1B7V,EAAK6V,GAAaG,EAAMH,MAIpBta,MAETka,EA1IA,CAAsFrY,EAAA,+UCetF6Y,GAAA,SAAA1S,GA2CC,SAAA2S,IAAA,IAAAlW,EACCuD,EAAAzH,KAAAP,KAAM0G,EAAqBiU,EAAM3Y,cAAeI,WAAY,QAAS,QAAS,cAAYpC,KAxC3FyE,EAAA9D,KAAO,QAeP8D,EAAAmW,YAAsB,EAoBdnW,EAAAoW,WAAa,KAOpB,IAAMtR,EAAU7C,EAAqBiU,EAAM3Y,cAAeI,WAAY,QAAS,QAAS,mBAExFqC,EAAK7B,OAAO0C,EAAUiE,EAAQW,QAAUX,EAAQW,iBAAiB4Q,WAAY,+BAG7ErW,EAAKsW,OAAStW,EAAKuW,MAAQzR,EAAQW,MACnCzF,EAAK8D,QAAU,IAAIa,EAA0B,KAC7C3E,EAAKwW,cAAgBxW,EAAKsW,OAAO3Z,MACjCqD,EAAKwN,MAAQ1I,EAAQ0I,MACrBxN,EAAKyW,QAAU3R,EAAQ2R,QAGnB5V,EAAUiE,EAAQnI,QACrBqD,EAAK+V,eAAejR,EAAQnI,MAAO,KA0UtC,OApYQ+Z,GAAAR,EAAA3S,GAKA2S,EAAA3Y,YAAP,WACC,OAAOlB,OAAOwF,OAAO2T,GAAgBjY,eACpCkZ,SAAS,EACTjJ,MAAO,YAsDTnR,OAAAC,eAAI4Z,EAAAlZ,UAAA,aAAJ,WACC,IAAMkO,EAAM3P,KAAK2P,MACjB,OAAO3P,KAAKob,eAAezL,QAE5B,SAAUvO,GACTpB,KAAKib,cAAgBjb,KAAKqb,UAAUja,GACpCpB,KAAKsb,sBAAsBtb,KAAK2P,OAChC3P,KAAKwa,eAAepZ,EAAOpB,KAAK2P,wCAGjC7O,OAAAC,eAAI4Z,EAAAlZ,UAAA,gBAAJ,WACC,MAAmB,SAAfzB,KAAKiS,OAAmC,cAAfjS,KAAKiS,OAClB,gBAAfjS,KAAKiS,OAA0C,aAAfjS,KAAKiS,OACtB,kBAAfjS,KAAKiS,OAA4C,UAAfjS,KAAKiS,OACxB,QAAfjS,KAAKiS,OAAkC,UAAfjS,KAAKiS,OAAoC,YAAfjS,KAAKiS,MAChD,EACkB,eAAfjS,KAAKiS,OACP,EACiB,aAAfjS,KAAKiS,OACPvI,IAED1J,KAAK+a,OAAOQ,0CAIrBza,OAAAC,eAAI4Z,EAAAlZ,UAAA,gBAAJ,WACC,MAAmB,gBAAfzB,KAAKiS,OACO,eAAfjS,KAAKiS,MACE,EAEAjS,KAAK+a,OAAOS,0CAObb,EAAAlZ,UAAAga,IAAR,SAAepW,EAAUhC,GACxB,OAAOrD,KAAKiS,QAAU5O,GAObsX,EAAAlZ,UAAA4Z,UAAV,SAAoBnL,GACnB,OAAIlQ,KAAKkb,UAAYlb,KAAK4a,WACrB5a,KAAKyb,IAAUvL,EAAK,QAChBlQ,KAAK6U,UAAU3E,GACZlQ,KAAKyb,IAAcvL,EAAK,aNtIbgI,EMuILhI,ENtIZjL,KAAKwM,IAAI,GAAIyG,EAAK,KMuIZlY,KAAKyb,IAAevL,EAAK,aAC5BlQ,KAAK+U,YAAY7E,GACdlQ,KAAKyb,IAAiBvL,EAAK,eAC9BjL,KAAKyW,IAAIzW,KAAKC,IAAIgL,EAAK,GAAI,GACxBlQ,KAAKyb,IAAgBvL,EAAK,cAC7BjL,KAAKyW,IAAIzW,KAAKC,IAAIgL,GAAM,GAAI,GACzBlQ,KAAKyb,IAAcvL,EAAK,YAC3BjL,KAAKC,IAAIgL,EAAK,IACXlQ,KAAKyb,IAAYvL,EAAK,UACzBA,GAKDA,ENtJJ,IAAmBgI,GM6JdyC,EAAAlZ,UAAAka,QAAV,SAAkBzL,GACjB,OAAIlQ,KAAKkb,SAA0B,aAAflb,KAAKiS,ONvJF2J,EMwJN1L,ENvJLjL,KAAKhD,IAAI2Z,GAAQ3W,KAAK4W,KAA5B,IMyJE3L,EN1JJ,IAAmB0L,GMmKxBjB,EAAAlZ,UAAA+Y,eAAA,SAAepZ,EAAawI,GAC3B,IAAMkS,EAAe9b,KAAK6U,UAAUjL,GAC9BsJ,EAAelT,KAAKqb,UAAUja,GAUpC,OATApB,KAAKuI,QAAQoB,KACZC,KAAMkS,EACNzY,KAAM,WACNjC,MAAO8R,IAERlT,KAAKiC,IAAI,WAAYb,EAAO0a,GAC5B9b,KAAK4C,OAAOmZ,SAAS7I,IAAiB6I,SAASD,GAC9C,0CAA0CE,KAAKC,UAAU7a,GAAM,KAAK4a,KAAKC,UAAUrS,IACpF5J,KAAK+a,OAAOP,eAAetH,EAAc4I,GAClC9b,MAGR2a,EAAAlZ,UAAA2Z,eAAA,SAAexR,GACd,IAAMkS,EAAe7W,KAAKC,IAAIlF,KAAK6U,UAAUjL,GAAO,GAC9CW,EAAQvK,KAAKuI,QAAQ6B,SAAS0R,GAC9BI,EAASlc,KAAKuI,QAAQrH,IAAI4a,GAC5B1a,EAAQpB,KAAKib,cAEjB,GAAe,OAAXiB,EACH9a,EAAQpB,KAAKib,mBACP,GAAoB,cAAhBiB,EAAO7Y,MAAmC,OAAVkH,GAAiC,aAAfA,EAAMlH,KAW5D,GAAc,OAAVkH,EACVnJ,EAAQ8a,EAAO9a,WACT,GAAmB,WAAfmJ,EAAMlH,MAAoC,gBAAfkH,EAAMlH,KAAwB,CACnE,IAAI8Y,EAAcD,EAAO9a,MACzB,GAAoB,cAAhB8a,EAAO7Y,KAGT8Y,EADgB,QADXC,EAAWpc,KAAKuI,QAAQ8B,UAAU6R,EAAOtS,OAEhC5J,KAAKib,cAELmB,EAAShb,MAIxBA,EADkB,WAAfmJ,EAAMlH,KACDrD,KAAKqc,mBAAmBH,EAAOtS,KAAMuS,EAAa5R,EAAMX,KAAMW,EAAMnJ,MAAO0a,GAE3E9b,KAAKsc,wBAAwBJ,EAAOtS,KAAMuS,EAAa5R,EAAMX,KAAMW,EAAMnJ,MAAO0a,QAGzF1a,EAAQ8a,EAAO9a,UA7ByE,CACxF,IAAMgb,EACFG,OAAW,EAEdA,EADgB,QAFXH,EAAWpc,KAAKuI,QAAQ8B,UAAU6R,EAAOtS,OAGhC5J,KAAKib,cAELmB,EAAShb,MAEpBkE,EAAU4W,EAAO5L,YACpBlP,EAAQpB,KAAKwc,qBAAqBN,EAAOtS,KAAM2S,EAAaL,EAAO9a,MAAO8a,EAAO5L,SAAUwL,IAsB7F,OAAO9b,KAAK2b,QAAQva,IAGrBuZ,EAAAlZ,UAAAgb,aAAA,SAAa7S,GACZA,EAAO5J,KAAK6U,UAAUjL,GACtB,IAAI8S,EAAa1c,KAAKob,eAAexR,GAMrC,OALA5J,KAAK2c,oBAAoB/S,GACU,IAA/B5J,KAAKqb,UAAUqB,KAClBA,EAAa1c,KAAK2b,QAAQ3b,KAAK6a,aAEhC7a,KAAKwa,eAAekC,EAAY9S,GACzB5J,MAGR2a,EAAAlZ,UAAAmb,wBAAA,SAAwBxb,EAAamK,GACpC,IAAM2H,EAAelT,KAAKqb,UAAUja,GAC9B0a,EAAe9b,KAAK6U,UAAUtJ,GAUpC,OATAvL,KAAKuI,QAAQoB,KACZC,KAAMkS,EACNzY,KAAM,SACNjC,MAAQ8R,IAETlT,KAAKiC,IAAI,SAAUb,EAAO0a,GAC1B9b,KAAK4C,OAAOmZ,SAAS7I,IAAiB6I,SAASD,GAC9C,mDAAmDE,KAAKC,UAAU7a,GAAM,KAAK4a,KAAKC,UAAU1Q,IAC7FvL,KAAK+a,OAAO6B,wBAAwB1J,EAAc4I,GAC3C9b,MAGR2a,EAAAlZ,UAAAob,6BAAA,SAA6Bzb,EAAamK,GACzC,IAAI2H,EAAelT,KAAKqb,UAAUja,GAClC8R,EAAejO,KAAKC,IAAIlF,KAAK6a,WAAY3H,GACzC,IAAM4I,EAAe9b,KAAK6U,UAAUtJ,GAWpC,OATAvL,KAAKuI,QAAQoB,KACZC,KAAMkS,EACNzY,KAAM,cACNjC,MAAQ8R,IAETlT,KAAKiC,IAAI,cAAeb,EAAO0a,GAC/B9b,KAAK4C,OAAOmZ,SAAS7I,IAAiB6I,SAASD,GAC9C,wDAAwDE,KAAKC,UAAU7a,GAAM,KAAK4a,KAAKC,UAAU1Q,IAClGvL,KAAK+a,OAAO8B,6BAA6B3J,EAAc4I,GAChD9b,MAGR2a,EAAAlZ,UAAAqb,kBAAA,SAAkB1b,EAAa2b,EAAgBzR,GAI9C,OAHAA,EAAYtL,KAAK6U,UAAUvJ,GAC3BtL,KAAKyc,aAAanR,GAClBtL,KAAK6c,6BAA6Bzb,EAAOkK,EAAYtL,KAAK6U,UAAUkI,IAC7D/c,MAGR2a,EAAAlZ,UAAAub,aAAA,SAAa5b,EAAa2b,EAAgBzR,GAIzC,OAHAA,EAAYtL,KAAK6U,UAAUvJ,GAC3BtL,KAAKyc,aAAanR,GAClBtL,KAAK4c,wBAAwBxb,EAAOkK,EAAYtL,KAAK6U,UAAUkI,IACxD/c,MAGR2a,EAAAlZ,UAAAwb,aAAA,SAAa7b,EAAa2b,EAAgBzR,GAIzC,OAHAA,EAAYtL,KAAK6U,UAAUvJ,GAC3BtL,KAAKyc,aAAanR,GAClBtL,KAAKkd,+BAA+B9b,EAAOkK,EAAWyR,GAC/C/c,MAGR2a,EAAAlZ,UAAAyb,+BAAA,SAA+B9b,EAAawI,EAAYmT,GACvD,IAAMI,EAAelY,KAAKhD,IAAIjC,KAAK6U,UAAUkI,GAAY,GAAK9X,KAAKhD,IAAI,KAEvE,OADA2H,EAAO5J,KAAK6U,UAAUjL,GACf5J,KAAKod,gBAAgBhc,EAAOwI,EAAMuT,IAG1CxC,EAAAlZ,UAAA2b,gBAAA,SAAgBhc,EAAakK,EAAiB6R,GAC7C,IAAMjK,EAAelT,KAAKqb,UAAUja,GAEpCpB,KAAK4C,OAAOmZ,SAASoB,IAAiBA,EAAe,EAAG,gDACxD,IAAMrB,EAAe9b,KAAK6U,UAAUvJ,GAWpC,OAVAtL,KAAKuI,QAAQoB,KACZ2G,SAAU6M,EACVvT,KAAMkS,EACNzY,KAAM,YACNjC,MAAO8R,IAERlT,KAAKiC,IAAI,YAAab,EAAO0a,EAAcqB,GAC3Cnd,KAAK4C,OAAOmZ,SAAS7I,IAAiB6I,SAASD,GAC9C,2CAA2CE,KAAKC,UAAU7a,GAAM,KAAK4a,KAAKC,UAAU3Q,IACrFtL,KAAK+a,OAAOqC,gBAAgBlK,EAAc4I,EAAcqB,GACjDnd,MAGR2a,EAAAlZ,UAAA4b,oBAAA,SAAoBC,EAAgBhS,EAAiBiS,EAAgBC,QAAA,IAAAA,MAAA,GACpED,EAAWvd,KAAK6U,UAAU0I,GAC1BjS,EAAYtL,KAAK6U,UAAUvJ,GAC3B,IAAMmS,EAAgBzd,KAAKqb,UAAUiC,EAAO,IAAME,EAClDxd,KAAKwa,eAAexa,KAAK2b,QAAQ8B,GAAgBnS,GAEjD,IADA,IAAMoS,EAAUH,GAAYD,EAAOjb,OAAS,GACnCjC,EAAI,EAAGA,EAAIkd,EAAOjb,OAAQjC,IAAK,CACvC,IAAM8S,EAAelT,KAAKqb,UAAUiC,EAAOld,IAAMod,EACjDxd,KAAK4c,wBAAwB5c,KAAK2b,QAAQzI,GAAe5H,EAAYlL,EAAIsd,GAE1E,OAAO1d,MAGR2a,EAAAlZ,UAAA6Z,sBAAA,SAAsB1R,GACrB,IAAMkS,EAAe9b,KAAK6U,UAAUjL,GAKpC,OAJA5J,KAAKuI,QAAQ+B,OAAOwR,GACpB9b,KAAK4C,OAAOmZ,SAASD,GAAe,8CAA8CE,KAAKC,UAAUrS,IACjG5J,KAAK+a,OAAOO,sBAAsBQ,GAClC9b,KAAKiC,IAAI,SAAU6Z,GACZ9b,MAGR2a,EAAAlZ,UAAAkb,oBAAA,SAAoB/S,GACnB,IAAMkS,EAAe9b,KAAK6U,UAAUjL,GAC9B+T,EAAc3d,KAAKqb,UAAUrb,KAAKob,eAAeU,IACvD9b,KAAKiC,IAAI,sBAAuB6Z,EAAc,SAAW6B,GAGzD3d,KAAK4C,OAAOmZ,SAASD,GAAe,4CAA4CE,KAAKC,UAAUrS,IAC/F5J,KAAK+a,OAAOO,sBAAsBQ,GAIlC,IAAMI,EAASlc,KAAKuI,QAAQrH,IAAI4a,GAC1BvR,EAAQvK,KAAKuI,QAAQ6B,SAAS0R,GAyBpC,OAxBII,GAAUA,EAAOtS,OAASkS,EAEzBvR,EACHvK,KAAKuI,QAAQ+B,OAAOC,EAAMX,MAE1B5J,KAAKuI,QAAQ+B,OAAOwR,EAAe9b,KAAK4d,YAE/BrT,IAEVvK,KAAKuI,QAAQ+B,OAAOC,EAAMX,MACP,WAAfW,EAAMlH,KACTrD,KAAK4c,wBAAwB5c,KAAK2b,QAAQgC,GAAc7B,GAC/B,gBAAfvR,EAAMlH,MAChBrD,KAAK6c,6BAA6B7c,KAAK2b,QAAQgC,GAAc7B,IAK/D9b,KAAKuI,QAAQoB,KACZC,KAAMkS,EACNzY,KAAM,WACNjC,MAAOuc,IAER3d,KAAK+a,OAAOP,eAAemD,EAAa7B,GACjC9b,MAGR2a,EAAAlZ,UAAAoc,OAAA,SAAOzc,EAAa2b,EAAsBzR,GAMzC,YANmB,IAAAyR,MAAA,IACA,cAAf/c,KAAKiS,OAAwC,QAAfjS,KAAKiS,OAAkC,aAAfjS,KAAKiS,MAC9DjS,KAAK8c,kBAAkB1b,EAAO2b,EAAUzR,GAExCtL,KAAKgd,aAAa5b,EAAO2b,EAAUzR,GAE7BtL,MAGR2a,EAAAlZ,UAAAuB,QAAA,WAGC,OAFAgF,EAAAvG,UAAMuB,QAAOzC,KAAAP,MACbA,KAAKuI,QAAQvF,UACNhD,MASE2a,EAAAlZ,UAAA+a,qBAAV,SAA+BsB,EAAYC,EAAYC,EAAYb,EAAsB5N,GACxF,OAAOyO,GAAMD,EAAKC,GAAM/Y,KAAKgZ,MAAM1O,EAAIuO,GAAMX,IAIpCxC,EAAAlZ,UAAA4a,mBAAV,SAA6ByB,EAAYC,EAAYG,EAAYF,EAAYzO,GAC5E,OAAOwO,GAAmBxO,EAAIuO,IAAOI,EAAKJ,IAA7BE,EAAKD,IAITpD,EAAAlZ,UAAA6a,wBAAV,SAAkCwB,EAAYC,EAAYG,EAAYF,EAAYzO,GACjF,OAAOwO,EAAK9Y,KAAKwM,IAAIuM,EAAKD,GAAKxO,EAAIuO,IAAOI,EAAKJ,KAEjDnD,EArYA,CACQV,IC7BF,SAAUkE,GAASlY,EAAgBzE,GACpCmE,EAAQnE,GACXA,EAASoG,QAAQ,SAAAwW,GAAO,OAAAD,GAASlY,EAAQmY,KAEzCtd,OAAOC,eAAekF,EAAQzE,GAC7BP,YAAY,EACZod,UAAU,IAQP,SAAUA,GAASpY,EAAgBzE,GACpCmE,EAAQnE,GACXA,EAASoG,QAAQ,SAAAwW,GAAO,OAAAC,GAASpY,EAAQmY,KAEzCtd,OAAOC,eAAekF,EAAQzE,GAC7B6c,UAAU,IAKN,IAAMC,GAAgC,yVCJ7CC,GAAA,SAAAvW,GA2CC,SAAAwW,EAAYjV,GAAZ,IAAA9E,EACCuD,EAAAzH,KAAAP,KAAMuJ,IAAQvJ,YAzCNyE,EAAA9D,KAAO,YA0Cf8D,EAAKsJ,eAAiBxE,EAAQwE,eAC9BtJ,EAAKwJ,gBAAkB1E,EAAQ0E,kBA+MjC,OA5PQwQ,GAAAD,EAAAxW,GAgCAwW,EAAAxc,YAAP,WACC,OAAOlB,OAAOwF,OAAO2T,GAAgBjY,eACpCuO,aAAc,EACdC,iBAAkB,MAClBkO,sBAAuB,WACvB3Q,eAAgB,EAChBE,gBAAiB,KAUTuQ,EAAA/c,UAAAkd,cAAV,SAAwB5Q,EAA4BE,QAA5B,IAAAF,MAAA,QAA4B,IAAAE,MAAA,IA6B5CuQ,EAAA/c,UAAAmd,sBAAR,SAA8BrV,GACzBvJ,KAAK6e,kBAAkBxc,QAC1BrC,KAAK6e,kBAAkBjX,QAAQ,SAAAkX,GAC9BA,EAAKvO,aAAehH,EAAQgH,aAC5BuO,EAAKtO,iBAAmBjH,EAAQiH,iBAChCsO,EAAKJ,sBAAwBnV,EAAQmV,yBAShCF,EAAA/c,UAAAsd,sBAAR,WACC,GAAI/e,KAAK6e,kBAAkBxc,OAAQ,CAClC,IAAMyc,EAAO9e,KAAK6e,kBAAkB,GACpC,OACCtO,aAAcuO,EAAKvO,aACnBC,iBAAkBsO,EAAKtO,iBACvBkO,sBAAuBI,EAAKJ,uBAI7B,OACCnO,aAAc,EACdC,iBAAkB,MAClBkO,sBAAuB,aAU1B5d,OAAAC,eAAIyd,EAAA/c,UAAA,oBAAJ,WACC,OAAOzB,KAAK+e,wBAAwBxO,kBAErC,SAAiBA,GAChB,IAAMkK,EAAQza,KAAK+e,wBAEnB/e,KAAK4e,sBAAsB9d,OAAOwF,OAAOmU,GAASlK,aAAYA,sCAQ/DzP,OAAAC,eAAIyd,EAAA/c,UAAA,wBAAJ,WACC,OAAOzB,KAAK+e,wBAAwBvO,sBAErC,SAAqBA,GACpB,IAAMiK,EAAQza,KAAK+e,wBAEnB/e,KAAK4e,sBAAsB9d,OAAOwF,OAAOmU,GAASjK,iBAAgBA,sCAQnE1P,OAAAC,eAAIyd,EAAA/c,UAAA,6BAAJ,WACC,OAAOzB,KAAK+e,wBAAwBL,2BAErC,SAA0BA,GACzB,IAAMjE,EAAQza,KAAK+e,wBAEnB/e,KAAK4e,sBAAsB9d,OAAOwF,OAAOmU,GAASiE,sBAAqBA,sCAaxEF,EAAA/c,UAAAud,QAAA,SAAQC,EAAwBC,EAAeC,GAE9C,YAF+B,IAAAD,MAAA,QAAe,IAAAC,MAAA,GAC9CH,GAAQhf,KAAMif,EAAaC,EAAWC,GAC/Bnf,MAMRwe,EAAA/c,UAAA2d,cAAA,WAEC,OADApf,KAAKgf,QAAQhf,KAAK2L,QAAQsT,aACnBjf,MAORwe,EAAA/c,UAAA4d,SAAA,WAEC,OADA3c,QAAQ4c,KAAK,+CACNtf,KAAKof,iBAObZ,EAAA/c,UAAAoP,WAAA,SAAWoO,EAAyBC,EAAeC,GAElD,YAFmC,IAAAD,MAAA,QAAe,IAAAC,MAAA,GA6H9C,SACLI,EACAC,EACAC,EACAC,QADA,IAAAD,MAAA,QACA,IAAAC,MAAA,GAIA,GAAIpa,EAAUka,GACb,KAAOA,aAAmBjB,IACrBiB,EAAQxE,QACXwE,EAAUA,EAAQxE,OAMrB,OAASuE,aAAmBI,YACvBra,EAAUia,EAAQK,UACrBL,EAAUA,EAAQK,QAIhBJ,aAAmB1E,WACtByE,EAAQ1O,WAAW2O,EAASC,GAClBD,aAAmBG,UAC7BJ,EAAQ1O,WAAW2O,EAASC,EAAcC,GAE1CH,EAAQ1O,aAxJRA,CAAW7Q,KAAMif,EAAaC,EAAWC,GAClCnf,MAURwe,EAAA/c,UAAAoe,MAAA,eAAM,IAAAC,KAAA3d,EAAA,EAAAA,EAAAC,UAAAC,OAAAF,IAAA2d,EAAA3d,GAAAC,UAAAD,GAEL,OADA4d,GAAapd,WAAA,GAAC3C,MAAIyG,OAAKqZ,IAChB9f,MAQRwe,EAAA/c,UAAAue,IAAA,mBAAAvb,EAAAzE,KAAI8f,KAAA3d,EAAA,EAAAA,EAAAC,UAAAC,OAAAF,IAAA2d,EAAA3d,GAAAC,UAAAD,GAEH,OADA2d,EAAMlY,QAAQ,SAAAkX,GAAQ,OAAAra,EAAKua,QAAQF,KAC5B9e,MAMRwe,EAAA/c,UAAAuB,QAAA,WAiCC,OAhCAgF,EAAAvG,UAAMuB,QAAOzC,KAAAP,MACTsF,EAAUtF,KAAKgb,SACdrV,EAAQ3F,KAAKgb,OAChBhb,KAAKgb,MAAMpT,QAAQ,SAAAoT,GACdA,aAAiBwD,EACpBxD,EAAMhY,UACIgY,aAAiB2E,WAC3B3E,EAAMnK,eAGE7Q,KAAKgb,iBAAiBwD,EAChCxe,KAAKgb,MAAMhY,UACDhD,KAAKgb,iBAAiB2E,WAChC3f,KAAKgb,MAAMnK,cAGTvL,EAAUtF,KAAK4f,UACdja,EAAQ3F,KAAK4f,QAChB5f,KAAK4f,OAAOhY,QAAQ,SAAAgY,GACfA,aAAkBpB,EACrBoB,EAAO5c,UAEP4c,EAAO/O,eAGC7Q,KAAK4f,kBAAkBpB,EACjCxe,KAAK4f,OAAO5c,UACFhD,KAAK4f,kBAAkBD,WACjC3f,KAAK4f,OAAO/O,cAGd7Q,KAAK6e,qBACE7e,MAETwe,EA7PA,CACQvE,IAsQF,SAAU8F,SAAc,IAAAD,KAAA3d,EAAA,EAAAA,EAAAC,UAAAC,OAAAF,IAAA2d,EAAA3d,GAAAC,UAAAD,GAC7B,IAAM8d,EAAQH,EAAM1Z,QACpB0Z,EAAMI,OAAO,SAACC,EAAMC,GAMnB,OALID,aAAgB5B,GACnB4B,EAAKnB,QAAQoB,GACHD,aAAgBR,WAC1BX,GAAQmB,EAAMC,GAERA,GACLH,GAWE,SAAUjB,GAAQO,EAAqBC,EAAoBC,EAAkBC,GAGlF,SAHgE,IAAAD,MAAA,QAAkB,IAAAC,MAAA,KAGzEF,aAAmBG,WAAaH,aAAmB1E,aACvDxV,EAAUka,EAAQxE,SACrBwE,EAAUA,EAAQxE,OAIpB,KAAOuE,aAAmBhB,IACrBjZ,EAAUia,EAAQK,UACrBL,EAAUA,EAAQK,QAKhBJ,aAAmB1E,WACtByE,EAAQP,QAAQQ,EAASC,GAEzBF,EAAQP,QAAQQ,EAASC,EAAcC,mVCvTzCW,GAAA,SAAArY,GAyBC,SAAAsY,IAAA,IAAA7b,EACCuD,EAAAzH,KAAAP,KAAM0G,EAAqB4Z,EAAKte,cAAeI,WAAY,OAAQ,YAAUpC,KAxB9EyE,EAAA9D,KAAO,OAUC8D,EAAA8b,UAAsB9b,EAAKkH,QAAQ4C,aAGlC9J,EAAAuW,MAAkBvW,EAAK8b,UACvB9b,EAAAmb,OAAmBnb,EAAK8b,UAKvB9b,EAAAoa,mBAAkCpa,EAAK8b,WAMhD,IAAMhX,EAAU7C,EAAqB4Z,EAAKte,cAAeI,WAAY,OAAQ,iBAE7EqC,EAAKmX,KAAO,IAAIlB,IACf/O,QAAUlH,EAAKkH,QACfuP,QAAU3R,EAAQ2R,QAClBhR,MAAQzF,EAAK8b,UAAU3E,KACvB3J,MAAQ1I,EAAQ0I,MAChB7Q,MAAQmI,EAAQqS,OAEjBuC,GAAS1Z,EAAM,UAsBjB,OA1D0D+b,GAAAF,EAAAtY,GAuClDsY,EAAAte,YAAP,WACC,OAAOlB,OAAOwF,OAAOiY,GAAcvc,eAClCkZ,SAAU,EACVU,KAAO,EACP7N,eAAgB,EAChBE,gBAAiB,EACjBgE,MAAQ,UAOVqO,EAAA7e,UAAAuB,QAAA,WAIC,OAHAgF,EAAAvG,UAAMuB,QAAOzC,KAAAP,MACbA,KAAKugB,UAAU1P,aACf7Q,KAAK4b,KAAK5Y,UACHhD,MAETsgB,EA1DA,CAA0D/B,gVCX1DkC,GAAA,SAAAzY,GAmBC,SAAAyY,EAAYC,EAAwCnD,EAAmB1P,GAAvE,IAAApJ,EAECuD,EAAAzH,KAAAP,MACCgN,YAAa,UACbrB,QAAS+U,aAAoBC,oBAC5BD,EAAW,IAAIC,oBAAoBD,EAAUnD,EAAW1P,EAAYA,GACrEf,UAAW,EACXxJ,eAAgBod,aAAoBC,oBAClC,IAAMD,EAAS7S,WAAa,IAAMA,KACnC7N,YA1BHyE,EAAA9D,KAAO,iBAUC8D,EAAAmc,aAAwB,EAkB/Bnc,EAAKoc,UAAYH,aAAoBC,oBACpCD,EAASre,OAASqe,EAAS7S,WAAa0P,IAqC3C,OApEoCuD,GAAAL,EAAAzY,GAqCnCyY,EAAAhf,UAAAkO,IAAA,WACC,OAAO3P,KAAK4gB,cAMb9f,OAAAC,eAAI0f,EAAAhf,UAAA,mBAAJ,WACC,OAAOzB,KAAK4gB,8CAMbH,EAAAhf,UAAAsf,OAAA,WACC,KAAO/gB,KAAK6gB,UAAY7gB,KAAK4gB,cAAgB,GAE5C5gB,KAAK6I,KAAK,QAEV7I,KAAK4gB,cAAgB,KAGtB,OAAO5gB,KAAK2M,SAASqU,kBAMtBP,EAAAhf,UAAAsO,MAAA,WACC,OAAOF,QAAQC,QAAQ9P,OAEzBygB,EApEA,CAAoCrU,6nDC4BpC6U,GAAA,SAAAjZ,GAyBC,SAAAkZ,IAAA,IAAAzc,EAECuD,EAAAzH,KAAAP,OAAOA,KAzBRyE,EAAA9D,KAAO,kBAeP8D,EAAA0c,OAA4C7C,GAY3C,IAAM/U,EAAU7C,EAAqBwa,EAAgBlf,cAAeI,WAAY,MAAO,SAAU,mBAEjGqC,EAAK2c,QAAU7X,EAAQ6X,QACvB3c,EAAK0c,OAAS5X,EAAQ4X,OAElB5X,EAAQ8X,KAAO9X,EAAQ8X,eAAeC,aAAe/X,EAAQ8X,eAAeH,EAC/Ezc,EAAKkM,IAAIpH,EAAQ8X,KACPxb,EAAS0D,EAAQ8X,MAE3B5c,EAAK8c,KAAKhY,EAAQ8X,KAAKG,MAAMjY,EAAQkY,WA8UxC,OApXqCC,GAAAR,EAAAlZ,GA0C7BkZ,EAAAlf,YAAP,WACC,OACCyf,QAASnD,GACT6C,OAAQ7C,GACR8C,SAAS,IAOXtgB,OAAAC,eAAImgB,EAAAzf,UAAA,kBAAJ,WACC,OAAIzB,KAAK2hB,QACD3hB,KAAK2hB,QAAQ9T,WAEbqD,IAAarD,4CAOtBqT,EAAAzf,UAAAkP,IAAA,SAAIR,GAAJ,IAAA1L,EAAAzE,KAmBC,OAlBImQ,aAAkB+Q,EAEjB/Q,EAAOyR,OACV5hB,KAAK2hB,QAAUxR,EAAOjP,MAGtBiP,EAAOgR,OAAS,WACf1c,EAAKkM,IAAIR,GACT1L,EAAK0c,OAAO1c,IAIdzE,KAAK2hB,QAAUxR,EAGZnQ,KAAK6hB,WACR7hB,KAAK8hB,WAEC9hB,MAMRkhB,EAAAzf,UAAAP,IAAA,WACC,OAAOlB,KAAK2hB,SASPT,EAAAzf,UAAA8f,KAAN,SAAWF,yGACJU,EAAUb,EAAgBK,KAAKF,GACrCH,EAAgBc,UAAUxZ,KAAKuZ,oBAEV,gCAAMA,iBAApBE,EAAc1b,EAAAyJ,OACpBhQ,KAAK2Q,IAAIsR,GAETjiB,KAAKmhB,OAAOnhB,mBAKZ,iBAFM8J,EAAQoX,EAAgBc,UAAU3a,QAAQ0a,GAChDb,EAAgBc,UAAU5a,OAAO0C,EAAO,GAClCoY,SAEP,SAAOliB,YAMRkhB,EAAAzf,UAAAuB,QAAA,WAGC,OAFAgF,EAAAvG,UAAMuB,QAAOzC,KAAAP,MACbA,KAAK2hB,aAAUxY,EACRnJ,MAQRkhB,EAAAzf,UAAA0gB,UAAA,SAAUC,GAST,IARA,IAAMC,EAAqB1c,EAAQyc,IAAUA,EAAM,GAAG/f,OAAS,EACzDqe,EAAW2B,EAAqBD,EAAM/f,OAAS,EAC/C0G,EAAMsZ,EAAsBD,EAAM,GAAoB/f,OAAS+f,EAAM/f,OACrEsJ,EAAUuF,IACVf,EAASxE,EAAQgC,aAAa+S,EAAU3X,EAAK4C,EAAQkC,YACrDyU,EAAqCD,GAAmC,IAAb3B,EACtC0B,GAAzBA,GAEO3hB,EAAI,EAAGA,EAAIigB,EAAUjgB,IAC7B0P,EAAOoS,cAAcD,EAAkB7hB,GAAIA,GAG5C,OADAT,KAAK2hB,QAAUxR,EACRnQ,MAORkhB,EAAAzf,UAAA+gB,OAAA,SAAOC,GACN,GAAIld,EAASkd,GACZziB,KAAKmiB,UAAUniB,KAAK0iB,QAAQD,QACtB,CAGN,IAFA,IAAIE,EAAc,IAAIC,aAAa5iB,KAAKqC,QAClCwgB,EAAc7iB,KAAK4N,iBAChBkV,EAAU,EAAGA,EAAUD,EAAaC,IAE5C,IADA,IAAMC,EAAe/iB,KAAK0iB,QAAQI,GACzB1iB,EAAI,EAAGA,EAAI2iB,EAAa1gB,OAAQjC,IACxCuiB,EAAYviB,IAAM2iB,EAAa3iB,GAIjCuiB,EAAcA,EAAY/R,IAAI,SAAAoS,GAAU,OAAAA,EAASH,IACjD7iB,KAAKmiB,UAAUQ,GAEhB,OAAO3iB,MAQRkhB,EAAAzf,UAAAihB,QAAA,SAAQI,GACP,GAAIvd,EAASud,GACZ,OAAO9iB,KAAKqQ,eAAeyS,GACrB,GAA8B,IAA1B9iB,KAAK4N,iBACf,OAAO5N,KAAK0iB,QAAQ,GAGpB,IADA,IAAMO,KACGxiB,EAAI,EAAGA,EAAIT,KAAK4N,iBAAkBnN,IAC1CwiB,EAAIxiB,GAAKT,KAAKqQ,eAAe5P,GAE9B,OAAOwiB,GAST/B,EAAAzf,UAAA4O,eAAA,SAAeyS,GACd,OAAI9iB,KAAK2hB,QACD3hB,KAAK2hB,QAAQtR,eAAeyS,GAE5B,IAAIF,aAAa,IAU1B1B,EAAAzf,UAAAqH,MAAA,SAAM4H,EAAgB/F,QAAA,IAAAA,MAAe3K,KAAKud,UACzC,IAAM2F,EAAeje,KAAK4F,MAAM6F,EAAQ1Q,KAAK6N,YACvCsV,EAAale,KAAK4F,MAAMF,EAAM3K,KAAK6N,YACzC7N,KAAK4C,OAAOsgB,EAAeC,EAAY,iDAGvC,IAFA,IAAM9gB,EAAS8gB,EAAaD,EACtBE,EAAYlS,IAAavD,aAAa3N,KAAK4N,iBAAkBvL,EAAQrC,KAAK6N,YACvEiV,EAAU,EAAGA,EAAU9iB,KAAK4N,iBAAkBkV,IACtDM,EAAUC,gBAAgBrjB,KAAKqQ,eAAeyS,GAASQ,SAASJ,EAAcC,GAAaL,GAE5F,OAAO,IAAI5B,EAAgBkC,IAMpBlC,EAAAzf,UAAAqgB,SAAR,WACC,GAAI9hB,KAAK4hB,OACR,IAAK,IAAIxhB,EAAI,EAAGA,EAAIJ,KAAK4N,iBAAkBxN,IAC1CJ,KAAKqQ,eAAejQ,GAAGghB,UAGzB,OAAOphB,MAMRc,OAAAC,eAAImgB,EAAAzf,UAAA,cAAJ,WACC,OAAOzB,KAAKqC,OAAS,mCAMtBvB,OAAAC,eAAImgB,EAAAzf,UAAA,gBAAJ,WACC,OAAIzB,KAAK2hB,QACD3hB,KAAK2hB,QAAQpE,SAEb,mCAOTzc,OAAAC,eAAImgB,EAAAzf,UAAA,cAAJ,WACC,OAAIzB,KAAK2hB,QACD3hB,KAAK2hB,QAAQtf,OAEb,mCAOTvB,OAAAC,eAAImgB,EAAAzf,UAAA,wBAAJ,WACC,OAAIzB,KAAK2hB,QACD3hB,KAAK2hB,QAAQ/T,iBAEb,mCAOT9M,OAAAC,eAAImgB,EAAAzf,UAAA,eAAJ,WACC,OAAOzB,KAAK6hB,eAEb,SAAY0B,GACPvjB,KAAK6hB,YAAc0B,IACtBvjB,KAAK6hB,UAAY0B,EACjBvjB,KAAK8hB,6CAmBAZ,EAAAiB,UAAP,SAAiBC,GAChB,OAAO,IAAKlB,GAAmBiB,UAAUC,IAQ7BlB,EAAAsC,QAAb,SAAqBnC,6FAEb,UADQ,IAAIH,GACCK,KAAKF,WAAzB,SAAO9a,EAAAyJ,cAWKkR,EAAAK,KAAb,SAAkBF,iHAIjB,GADMoC,EAAUpC,EAAIpN,MAAM,iBACb,CAGZ,IAFMyP,EAAaD,EAAQ,GAAGpb,MAAM,KAChCsb,EAAYD,EAAW,GAC3BvhB,EAAA,EAAkByhB,EAAAF,EAAAvhB,EAAAyhB,EAAAvhB,OAAAF,IACjB,GADU0hB,EAAGD,EAAAzhB,GACT+e,EAAgB4C,aAAaD,GAAM,CACtCF,EAAYE,EACZ,MAGFxC,EAAMA,EAAI0C,QAAQN,EAAQ,GAAIE,GAGd,SAAMK,MAAM9C,EAAgB+C,QAAU5C,WACvD,KADM6C,EAAW3d,EAAAyJ,QACHmU,GACb,MAAM,IAAIphB,MAAM,uBAAuBse,GAEpB,SAAM6C,EAASE,sBAEf,OAFdA,EAAc7d,EAAAyJ,QAEA,EAAMkB,IAAahC,gBAAgBkV,WAEvD,SAFoB7d,EAAAyJ,cAcdkR,EAAA4C,aAAP,SAAoBzC,GACnB,IAAMqC,EAAarC,EAAIhZ,MAAM,KACvBsb,EAAYD,EAAWA,EAAWrhB,OAAS,GAEjD,MAAoB,KADHgiB,SAASC,cAAc,SAASC,YAAY,SAAWZ,IAO5DzC,EAAAU,OAAb,iHACuBrb,EAAA2a,EAAgBc,kCAAhB7f,EAAAoE,EAAAlE,QACrB,EADiBkE,EAAApE,KAA6B,YAC9CqE,EAAAwJ,+BADqB7N,iCA7EhB+e,EAAA+C,QAAU,GAyBV/C,EAAAc,aAwDRd,EApXA,CAAqCrf,EAAA,izCCC/B,SAAgB2iB,GACrBphB,EACAma,EACAmD,EACA7S,eADA,IAAA6S,MAAA,QACA,IAAA7S,MAAqBqD,IAAarD,yGASlC,OANM4W,EAAkBvT,IAGxBC,EADMxF,EAAU,IAAI8U,GAAeC,EAAUnD,EAAU1P,KAIvD,EAAMzK,EAASuI,WAGA,OAHfpF,EAAAyJ,QAGe,EAAMrE,EAAQoV,iBAM7B,OANM5Q,EAAS5J,EAAAyJ,OAGfmB,EAAWsT,IAGX,EAAO,IAAIxD,GAAgB9Q,yVC5C5BuU,GAAA,SAAA1c,GA6BC,SAAA2c,IAAA,IAAAlgB,EACCuD,EAAAzH,KAAAP,KAAM0G,EAAqBie,EAAM3iB,cAAeI,WAAY,YAAa,eAAapC,KA5BvFyE,EAAA9D,KAAO,QA8BN,IAAM4I,EAAU7C,EAAqBie,EAAM3iB,cAAeI,WAAY,YAAa,aAE7EwiB,EAAoBngB,EAAKoQ,UAAUtL,EAAQsb,iBACjDpgB,EAAKogB,SAAW5f,KAAKC,IAAI0f,EAAmBngB,EAAKoQ,UAAUtL,EAAQub,YAEnErgB,EAAKsgB,WAAatgB,EAAKuW,MAAQvW,EAAKmb,OAASnb,EAAKkH,QAAQyC,YAAYwW,GACtEngB,EAAKoa,mBAAqBpa,EAAKsgB,YAE/BtgB,EAAKqgB,UAAY,IAAIpK,IACpB/O,QAASlH,EAAKkH,QACdzB,MAAQzF,EAAKsgB,WAAWD,UACxB7S,MAAQ,OACR7Q,MAAQmI,EAAQub,YAGjB3G,GAAS1Z,EAAM,eAqBjB,OApE2BugB,GAAAL,EAAA3c,GAkDnB2c,EAAA3iB,YAAP,WACC,OAAOlB,OAAOwF,OAAOiY,GAAcvc,eAClC8iB,UAAY,EACZD,SAAU,EACV9W,eAAgB,EAChBE,gBAAiB,KAOnB0W,EAAAljB,UAAAuB,QAAA,WAIC,OAHAgF,EAAAvG,UAAMuB,QAAOzC,KAAAP,MACbA,KAAK+kB,WAAWlU,aAChB7Q,KAAK8kB,UAAU9hB,UACRhD,MAET2kB,EApEA,CAA2BpG,gVCD3B0G,GAAA,SAAAjd,GAOC,SAAAid,EAAYC,QAAA,IAAAA,MAAA,WAAZ,IAAAzgB,EACCuD,EAAAzH,KAAAP,OAAOA,YACPyE,EAAK0gB,SAAWD,IAqElB,OA9EsEE,GAAAH,EAAAjd,GAkBrEid,EAAAxjB,UAAA2Z,eAAA,SAAexR,GACd,IAAMxB,EAAQpI,KAAKkB,IAAI0I,GACvB,OAAc,OAAVxB,EACIA,EAAM+E,MAENnN,KAAKmlB,UAUdF,EAAAxjB,UAAA4jB,eAAA,SAAelY,EAAsBvD,EAAeL,GAOnD,OAJAvJ,KAAK2J,IAAI7I,OAAOwF,UAAWiD,GAC1B4D,MAAKA,EACLvD,KAAIA,KAEE5J,MASRilB,EAAAxjB,UAAA6jB,aAAA,SAAanY,EAAsBvD,GAGlC,IADA,IACSxJ,EADKJ,KAAK+J,QAAQH,GACPxJ,GAAK,EAAGA,IAAK,CAChC,IAAM0K,EAAQ9K,KAAKsJ,UAAUlJ,GAC7B,GAAI0K,EAAMqC,QAAUA,EACnB,OAAOrC,IAWVma,EAAAxjB,UAAA8jB,aAAA,SAAapY,EAAsBvD,GAElC,IAAME,EAAQ9J,KAAK+J,QAAQH,GAC3B,IAAe,IAAXE,EACH,IAAK,IAAI1J,EAAI0J,EAAO1J,EAAIJ,KAAKsJ,UAAUjH,OAAQjC,IAAK,CACnD,IAAMolB,EAAQxlB,KAAKsJ,UAAUlJ,GAC7B,GAAIolB,EAAMrY,QAAUA,EACnB,OAAOqY,IAKZP,EA9EA,CAAsE7b,+UCatEqc,GAAA,SAAAzd,GAcC,SAAA0d,IAAA,IAAAjhB,EAECuD,EAAAzH,KAAAP,KAAM0G,EAAqBgf,EAAW1jB,cAAeI,WAAY,YAAUpC,KAd5EyE,EAAA9D,KAAO,aAEG8D,EAAA8D,QAAyC,IAAIa,EAASM,KAExDjF,EAAAkhB,KAA2BlhB,EAAKkH,QAAQuC,uBAEtCzJ,EAAAsW,OAAStW,EAAKkhB,KAAKC,OAErBnhB,EAAAohB,YAAsB,EAO7B,IAAMtc,EAAU7C,EAAqBgf,EAAW1jB,cAAeI,WAAY,iBAE3EqC,EAAKkhB,KAAOlhB,EAAKkH,QAAQuC,uBACzBzJ,EAAKkhB,KAAKjV,MAAM,GAChBjM,EAAKsW,OAAStW,EAAKkhB,KAAKC,OAGxBnhB,EAAKqhB,WAAavc,EAAQuc,WAG1BrhB,EAAK6W,sBAAsB,GAE3B7W,EAAK8D,QAAQoB,KACZ2K,MAAO,EACP1K,KAAO,EACPvG,KAAO,WACPjC,MAAOqD,EAAK4W,UAAU9R,EAAQnI,SAE/BqD,EAAK+V,eAAejR,EAAQnI,MAAe,KA0N7C,OA7P0D2kB,GAAAL,EAAA1d,GAsClD0d,EAAA1jB,YAAP,WACC,OAAOlB,OAAOwF,OAAOoU,GAAM1Y,eAC1B8jB,WAAY,EACZ5b,MAAOgH,IAAahD,uBAAuB0X,OAC3C3T,MAAO,QACP7Q,MAAO,KAITskB,EAAAjkB,UAAA2b,gBAAA,SAAgBhc,EAAawI,EAAY0G,GAExC1G,EAAO5J,KAAK6U,UAAUjL,GACtB5J,KAAKyc,aAAa7S,GAMlB,IALA,IAAMoc,EAAgBhmB,KAAKqb,UAAUja,GAG/B6kB,EAAYjmB,KAAKuI,QAAQrH,IAAI0I,GAC7Bsc,EAAWjhB,KAAK4M,MAAM5M,KAAKC,IAAI,EAAIoL,EAAU,IAC1ClQ,EAAI,EAAGA,GAAK8lB,EAAU9lB,IAAK,CACnC,IAAMsd,EAAUpN,EAAWlQ,EAAIwJ,EACzBuc,EAAUnmB,KAAKwc,qBAAqByJ,EAAUrc,KAAMqc,EAAU7kB,MAAO4kB,EAAe1V,EAAUoN,GACpG1d,KAAK4c,wBAAwB5c,KAAK2b,QAAQwK,GAAUzI,GAErD,OAAO1d,MAGR0lB,EAAAjkB,UAAA+Y,eAAA,SAAepZ,EAAawI,GAC3B,IAAMkS,EAAe9b,KAAK6U,UAAUjL,GACpC5B,EAAAvG,UAAM+Y,eAAcja,KAAAP,KAACoB,EAAOwI,GAC5B,IAAMxB,EAAQpI,KAAKuI,QAAQrH,IAAI4a,GACzBrR,EAAgBzK,KAAKuI,QAAQkC,cAAcrC,GAC3Cge,EAAiBpmB,KAAKqmB,oBAAoB5b,EAAeqR,GAE/D,OADA1T,EAAMkM,MAAQrP,KAAKC,IAAIkhB,EAAgB,GAChCpmB,MAGR0lB,EAAAjkB,UAAAmb,wBAAA,SAAwBxb,EAAawI,GACpC,IAAMkS,EAAe9b,KAAK6U,UAAUjL,GACpC5B,EAAAvG,UAAMmb,wBAAuBrc,KAAAP,KAACoB,EAAOwI,GACrC,IAAMxB,EAAQpI,KAAKuI,QAAQrH,IAAI4a,GACzBrR,EAAgBzK,KAAKuI,QAAQkC,cAAcrC,GAC3Cge,EAAiBpmB,KAAKqmB,oBAAoB5b,EAAeqR,GAE/D,OADA1T,EAAMkM,MAAQrP,KAAKC,IAAIkhB,EAAgB,GAChCpmB,MAGR0lB,EAAAjkB,UAAAob,6BAAA,SAA6Bzb,EAAawI,GAEzCA,EAAO5J,KAAK6U,UAAUjL,GAQtB,IAPA,IAAM0c,EAActmB,KAAKqb,UAAUja,GAG7B6kB,EAAYjmB,KAAKuI,QAAQrH,IAAI0I,GAE7Bsc,EAAWjhB,KAAK4M,MAAM5M,KAAKC,IAA8B,IAAzB0E,EAAOqc,EAAUrc,MAAY,IAC7D2c,GAAe3c,EAAOqc,EAAUrc,MAAQsc,EACrC9lB,EAAI,EAAGA,GAAK8lB,EAAU9lB,IAAK,CACnC,IAAMsd,EAAU6I,EAAanmB,EAAI6lB,EAAUrc,KACrCuc,EAAUnmB,KAAKsc,wBAAwB2J,EAAUrc,KAAMqc,EAAU7kB,MAAOwI,EAAM0c,EAAa5I,GACjG1d,KAAK4c,wBAAwB5c,KAAK2b,QAAQwK,GAAUzI,GAErD,OAAO1d,MASA0lB,EAAAjkB,UAAA4kB,oBAAR,SAA4Bje,EAAmCwB,GAC9D,GAAc,OAAVxB,EACHA,GACCkM,MAAQ,EACR1K,KAAO,EACPvG,KAAM,WACNjC,MAAO,QAEF,GAAIgE,EAAQgD,EAAMkM,OAAQ,CAChC,IAAM7J,EAAgBzK,KAAKuI,QAAQkC,cAAcrC,GACjDA,EAAMkM,MAAQtU,KAAKqmB,oBAAoB5b,EAAerC,EAAMwB,MAE7D,IAAM4c,EAAOxmB,KAAKqb,UAAUrb,KAAKob,eAAehT,EAAMwB,OAClD6c,EAAOzmB,KAAKqb,UAAUrb,KAAKob,eAAexR,IAExC8c,EAAiB1mB,KAAKuI,QAAQrH,IAAI0I,GAIxC,OAHI8c,GAAkBA,EAAe9c,OAASA,GAAgC,aAAxB8c,EAAerjB,OACpEojB,EAAOzmB,KAAKqb,UAAUrb,KAAKob,eAAexR,EAAO5J,KAAK4d,cAEhD,IAAOhU,EAAOxB,EAAMwB,OAAS4c,EAAOC,GAAQre,EAAMkM,OAS1DoR,EAAAjkB,UAAAklB,eAAA,SAAe/c,GACd,IAAMkS,EAAe9b,KAAK6U,UAAUjL,GAC9BxB,EAAQpI,KAAKuI,QAAQrH,IAAI4a,GAC/B,OAAO7W,KAAKC,IAAIlF,KAAKqmB,oBAAoBje,EAAO0T,GAAe,IAShE4J,EAAAjkB,UAAAmlB,mBAAA,SAAmBtS,EAAc1K,GAChC,IAAMkS,EAAe9b,KAAK6U,UAAUjL,GAC9Bid,EAAc7mB,KAAK2mB,eAAe/c,GACxC,OAAO5J,KAAK8mB,cAAcD,EAAcvS,GAASwH,GAOlD4J,EAAAjkB,UAAAqlB,cAAA,SAAcC,GACb,IAAM7K,EAASlc,KAAKuI,QAAQrH,IAAI6lB,EAAM,SAChCxc,EAAQvK,KAAKuI,QAAQ6B,SAAS2c,EAAM,SAC1C,GAAI7K,GAAUA,EAAO5H,QAAUyS,EAC9B,OAAO7K,EAAOtS,KACR,GAAIsS,GAAU3R,GACL,WAAfA,EAAMlH,MACN6Y,EAAO9a,QAAUmJ,EAAMnJ,MAAO,CAC9B,IAAMolB,EAAOxmB,KAAKqb,UAAUrb,KAAKob,eAAec,EAAOtS,OAEjDod,GADOhnB,KAAKqb,UAAUrb,KAAKob,eAAe7Q,EAAMX,OAChC4c,IAASjc,EAAMX,KAAOsS,EAAOtS,MAC7Cqd,EAAIhiB,KAAKiiB,KAAKjiB,KAAKwM,IAAI+U,EAAM,GAAK,EAAIQ,GAAS9K,EAAO5H,MAAQyS,IAC9DI,IAASX,EAAOS,GAAKD,EAE3B,OAAQG,EAAO,EAAIA,IADJX,EAAOS,GAAKD,GACO9K,EAAOtS,KACnC,OAAIsS,EACW,IAAjBA,EAAO9a,MACHsI,IAEAwS,EAAOtS,MAAQmd,EAAO7K,EAAO5H,OAAS4H,EAAO9a,MAG9C2lB,EAAO/mB,KAAKib,eAWrByK,EAAAjkB,UAAA2lB,YAAA,SAAY9S,EAAc+S,GACzB,OAAOrnB,KAAK4mB,mBAAmBtS,EAAO+S,IAWvC3B,EAAAjkB,UAAA6lB,YAAA,SAAY/J,EAAgB8J,GAC3B,IAAMvL,EAAe9b,KAAK6U,UAAUwS,GAC9BE,EAAmBvnB,KAAK6U,UAAU0I,GAClCiK,EAAaxnB,KAAK2mB,eAAe7K,GAEvC,OADiB9b,KAAK2mB,eAAe7K,EAAeyL,GAClCC,GAMT9B,EAAAjkB,UAAA4Z,UAAV,SAAoBnL,GACnB,MAAmB,QAAflQ,KAAKiS,OAAmBjS,KAAK8lB,WACzB,GAAK,GAAK5V,EAAMlQ,KAAK8lB,YAErB9d,EAAAvG,UAAM4Z,UAAS9a,KAAAP,KAACkQ,IAOfwV,EAAAjkB,UAAAka,QAAV,SAAkBzL,GACjB,MAAmB,QAAflQ,KAAKiS,OAAmBjS,KAAK8lB,WACxB5V,EAAMlQ,KAAK8lB,WAAc,GAE1B9d,EAAAvG,UAAMka,QAAOpb,KAAAP,KAACkQ,IAMvBpP,OAAAC,eAAI2kB,EAAAjkB,UAAA,kBAAJ,WACC,OAAOzB,KAAK6lB,iBAEb,SAAerlB,GAGd,IAAMkc,EAAa1c,KAAKoB,MACxBpB,KAAK6lB,YAAcrlB,EACnBR,KAAKoB,MAAQsb,mCAMdgJ,EAAAjkB,UAAAud,QAAA,SAAQQ,EAASC,EAAkBC,GAElC,YAFgB,IAAAD,MAAA,QAAkB,IAAAC,MAAA,GAClCV,GAAQhf,KAAK2lB,KAAMnG,EAASC,EAAcC,GACnC1f,MAET0lB,EA7PA,CAA0DhL,gVCH1D+M,GAAA,SAAAzf,GAsBC,SAAA0f,IAAA,IAAAjjB,EACCuD,EAAAzH,KAAAP,KAAM0G,EAAqBghB,EAAW1lB,cAAeI,WAAY,gBAAcpC,KArBhFyE,EAAA9D,KAAO,aAUC8D,EAAAkjB,OAAwB,IAAI1C,GAK5BxgB,EAAAmjB,YAA+C,IAAIxe,EAO1D,IAAMG,EAAU7C,EAAqBghB,EAAW1lB,cAAeI,WAAY,qBAE3EqC,EAAKmN,UAAY,IAAI6T,IACpB9Z,QAASlH,EAAKkH,QACdsG,MAAO1I,EAAQ0I,MACf7Q,MAAOqD,EAAKsQ,YAAYxL,EAAQqI,aAEjCuM,GAAS1Z,EAAM,aAGfA,EAAKkjB,OAAOtC,eAAe,UAAW,GAEtC5gB,EAAKojB,eAAe,EAAG,KAmSzB,OAvU0DC,GAAAJ,EAAA1f,GAuClD0f,EAAA1lB,YAAP,WACC,OAAOlB,OAAOwF,QACbsL,UAAW,EACXK,MAAO,SACLgI,GAAgBjY,gBAMpBlB,OAAAC,eAAI2mB,EAAAjmB,UAAA,aAAJ,WACC,OAAOzB,KAAK2nB,OAAOvM,eAAepb,KAAK2P,wCASxC+X,EAAAjmB,UAAAiP,MAAA,SAAM9G,EAAYgc,GACjB,IAAM9J,EAAe9b,KAAK6U,UAAUjL,GAOpC,MANiD,YAA7C5J,KAAK2nB,OAAOvM,eAAeU,KAC9B9b,KAAK2nB,OAAOtC,eAAe,UAAWvJ,GAClCxW,EAAUsgB,IACb5lB,KAAK6nB,eAAejC,EAAQ9J,IAGvB9b,MAOR0nB,EAAAjmB,UAAAsmB,KAAA,SAAKne,GACJ,IAAMkS,EAAe9b,KAAK6U,UAAUjL,GAEpC,GAAiD,YAA7C5J,KAAK2nB,OAAOvM,eAAeU,GAA6B,CAC3D,IAAMhR,EAAQ9K,KAAK2nB,OAAOzmB,IAAI4a,GAC1BhR,GAASA,EAAMlB,KAAO,IACzB5J,KAAK4nB,YAAYtd,OAAOQ,EAAMlB,MAC9B5J,KAAK2nB,OAAOrd,OAAOQ,EAAMlB,OAM3B,OAHA5J,KAAK2nB,OAAOrd,OAAOwR,GACnB9b,KAAK2nB,OAAOtC,eAAe,UAAWvJ,GACtC9b,KAAK6nB,eAAe,EAAG/L,GAChB9b,MAOR0nB,EAAAjmB,UAAAumB,MAAA,SAAMpe,GACL,IAAMkS,EAAe9b,KAAK6U,UAAUjL,GAIpC,MAHiD,YAA7C5J,KAAK2nB,OAAOvM,eAAeU,IAC9B9b,KAAK2nB,OAAOtC,eAAe,SAAUvJ,GAE/B9b,MAOR0nB,EAAAjmB,UAAA6I,OAAA,SAAOV,GAIN,OAHAA,EAAO5J,KAAK6U,UAAUjL,GACtB5J,KAAK2nB,OAAOrd,OAAOV,GACnB5J,KAAK4nB,YAAYtd,OAAOV,GACjB5J,MAQR0nB,EAAAjmB,UAAAklB,eAAA,SAAe/c,GAAf,IAAAnF,EAAAzE,KACO8b,EAAe9b,KAAK6U,UAAUjL,GAC9Bqe,EAAYjoB,KAAK2nB,OAAOrC,aAAa,UAAWxJ,GACtD,IAAKmM,EACJ,OAAO,EAGR,IAAMC,GAAiC/a,MAAO,SAAUvD,KAAMkS,GAC9D9b,KAAK2nB,OAAOhe,IAAIue,GAGhB,IAAIC,EAAYF,EACZG,EAAe,EAqBnB,OAlBApoB,KAAK2nB,OAAOtc,eAAe4c,EAAUre,KAAMkS,EAAe9b,KAAK4d,WAAY,SAAAhZ,GAC1E,IAAIyjB,EAAkBF,EAAUve,KAE1B0e,EAAc7jB,EAAKmjB,YAAY1mB,IAAI0D,EAAEgF,MACvC0e,GAAeA,EAAY1e,MAAQue,EAAUve,OAChDwe,EAAeE,EAAYhU,MAC3B+T,EAAkBC,EAAY1e,MAEP,YAApBue,EAAUhb,OAAmC,YAAZvI,EAAEuI,QACtCib,GAAgB3jB,EAAKmN,UAAU+U,eAAe/hB,EAAEgF,MAAQnF,EAAKmN,UAAU+U,eAAe0B,IAEvFF,EAAYvjB,IAIb5E,KAAK2nB,OAAO1d,OAAOie,GAGZE,GAORtnB,OAAAC,eAAI2mB,EAAAjmB,UAAA,aAAJ,WACC,OAAOzB,KAAK2mB,eAAe3mB,KAAK2P,YAGjC,SAAUJ,GACTvP,KAAK6nB,eAAetY,EAAGvP,KAAK2P,wCAO7B7O,OAAAC,eAAI2mB,EAAAjmB,UAAA,eAAJ,WACC,OAAOzB,KAAKuoB,iBAAiBvoB,KAAK2P,YAGnC,SAAY/N,GACX,IAAM+N,EAAM3P,KAAK2P,MACX2E,EAAQtU,KAAK4R,UAAU0V,YAAY1lB,EAAG+N,GAC5C3P,KAAK6nB,eAAevT,EAAO3E,oCAQ5B+X,EAAAjmB,UAAA8mB,iBAAA,SAAiB3e,GAAjB,IAAAnF,EAAAzE,KACC4J,EAAO5J,KAAK6U,UAAUjL,GACtB,IAAMqe,EAAYjoB,KAAK2nB,OAAOrC,aAAa,UAAW1b,GACtD,IAAKqe,EACJ,OAAO,EAGR,IAAMC,GAAiC/a,MAAQ,SAAUvD,KAAIA,GAC7D5J,KAAK2nB,OAAOhe,IAAIue,GAGhB,IAAIC,EAAYF,EACZO,EAAiB,EAqBrB,OAlBAxoB,KAAK2nB,OAAOtc,eAAe4c,EAAUre,KAAMA,EAAO5J,KAAK4d,WAAY,SAAAhZ,GAClE,IAAIyjB,EAAkBF,EAAUve,KAE1B0e,EAAc7jB,EAAKmjB,YAAY1mB,IAAI0D,EAAEgF,MACvC0e,GAAeA,EAAY1e,MAAQue,EAAUve,OAChD4e,EAAiBF,EAAYjU,QAC7BgU,EAAkBC,EAAY1e,MAEP,YAApBue,EAAUhb,OAAmC,YAAZvI,EAAEuI,QACtCqb,GAAkB5jB,EAAEgF,KAAOye,GAE5BF,EAAYvjB,IAIb5E,KAAK2nB,OAAO1d,OAAOie,GAGZM,GAQRd,EAAAjmB,UAAAomB,eAAA,SAAevT,EAAc1K,GAQ5B,OAPAA,EAAO5J,KAAK6U,UAAUjL,GACtB5J,KAAK4nB,YAAYtd,OAAOV,GACxB5J,KAAK4nB,YAAYje,KAChB0K,QAAUrU,KAAK4R,UAAUgV,mBAAmBtS,EAAO1K,GACnD0K,MAAKA,EACL1K,KAAIA,IAEE5J,MAUR0nB,EAAAjmB,UAAAgnB,eAAA,SAAe7e,GAEd,OADAA,EAAO5J,KAAK6U,UAAUjL,GACf5J,KAAK2nB,OAAOvM,eAAexR,IAWnC8d,EAAAjmB,UAAAqlB,cAAA,SAAcC,EAAa7K,QAAA,IAAAA,MAASlc,KAAK2P,OACxC,IAAMiW,EAAS5lB,KAAK4nB,YAAY1mB,IAAIgb,GAC9B9T,EAAQpI,KAAK2nB,OAAOzmB,IAAIgb,GACxB5Q,EAAYrG,KAAKC,IAAI0gB,EAAOhc,KAAMxB,EAAMwB,MACxC8e,EAAgB1oB,KAAK4R,UAAU+U,eAAerb,GAAayb,EAAOnB,EAAOtR,MAC/E,OAAOtU,KAAK4R,UAAUkV,cAAc4B,IAUrChB,EAAAjmB,UAAAknB,mBAAA,SAAmBrd,EAAiBC,EAAenI,GAAnD,IAAAqB,EAAAzE,KACO4oB,EAAoB5oB,KAAK6U,UAAUvJ,GACnCud,EAAkB7oB,KAAK6U,UAAUtJ,GAEnCud,EAAiB9oB,KAAK2nB,OAAOzmB,IAAI0nB,GACrC5oB,KAAK2nB,OAAOtc,eAAeud,EAAmBC,EAAiB,SAAAzgB,GAC1D0gB,GAA2C,YAAzBA,EAAe3b,OAAuC,YAAhB/E,EAAM+E,OACjE1I,EAAKkkB,mBAAmB1jB,KAAKC,IAAI4jB,EAAelf,KAAMgf,GAAoBxgB,EAAMwB,KAAOnF,EAAKmZ,WAAYxa,GAEzG0lB,EAAiB1gB,IAGlB,IAAItF,EAAQ,KAEZ,GAAIgmB,GAA2C,YAAzBA,EAAe3b,OAAuBnN,KAAK2nB,OAAQ,CACxE,IAAMoB,EAAe9jB,KAAKC,IAAI4jB,EAAelf,KAAMgf,GAE7CpB,EAAaxnB,KAAK4R,UAAU+U,eAAeoC,GAG7CnD,GADS4B,EADQxnB,KAAK4R,UAAU+U,eAAemC,EAAelf,OAE9C,EACL,IAAXgc,IACHA,EAAS,EAAIA,GAGd,IADA,IAAIoD,EAAehpB,KAAK4R,UAAUkV,cAAcU,EAAa5B,GACtDoD,EAAeH,GAAmB7oB,KAAK2nB,QAAQ,CACrD,IACCvkB,EAAS4lB,EAAc/jB,KAAK4M,MAAM7R,KAAK2mB,eAAeqC,KACrD,MAAOpkB,GACR9B,EAAQ8B,EACR,MAEG5E,KAAK2nB,SACRqB,GAAgBhpB,KAAK4R,UAAUgV,mBAAmB,EAAGoC,KAKxD,GAAIlmB,EACH,MAAMA,EAGP,OAAO9C,MAMR0nB,EAAAjmB,UAAAuB,QAAA,WAKC,OAJAgF,EAAAvG,UAAMuB,QAAOzC,KAAAP,MACbA,KAAK2nB,OAAO3kB,UACZhD,KAAK4nB,YAAY5kB,UACjBhD,KAAK4R,UAAU5O,UACRhD,MAET0nB,EAvUA,CAA0DzN,gVCU1DgP,GAAA,SAAAjhB,GAsCC,SAAAkhB,IAAA,IAAAzkB,EAECuD,EAAAzH,KAAAP,KAAM0G,EAAqBwiB,EAAMlnB,cAAeI,WAAY,WAAY,gBAAcpC,KArCvFyE,EAAA9D,KAAO,QAKP8D,EAAArB,SAA0Bkb,GAUlB7Z,EAAA0kB,YAAsB,EAKtB1kB,EAAAkjB,OAAwB,IAAI1C,GAAc,WAM1CxgB,EAAA2kB,WAAyB3kB,EAAK4kB,MAAM/kB,KAAKG,GAYhD,IAAM8E,EAAU7C,EAAqBwiB,EAAMlnB,cAAeI,WAAY,WAAY,qBAElFqC,EAAKrB,SAAWmG,EAAQnG,SACxBqB,EAAK6kB,YAAc,IAAI7B,IACtB9b,QAASlH,EAAKkH,QACdiG,UAAWrI,EAAQqI,UACnBK,MAAO1I,EAAQ0I,QAEhBxN,EAAK0kB,YAAc,EACnB1kB,EAAKmN,UAAYnN,EAAK6kB,YAAY1X,UAClCuM,GAAS1Z,EAAM,aAGfA,EAAKkjB,OAAOtC,eAAe,UAAW,GAGtC5gB,EAAKkH,QAAQxD,GAAG,OAAQ1D,EAAK2kB,cAsM/B,OA9PQG,GAAAL,EAAAlhB,GA2DAkhB,EAAAlnB,YAAP,WACC,OAAOlB,OAAOwF,OAAO2T,GAAgBjY,eACpCoB,SAAUkb,GACV1M,UAAW,EACXK,MAAO,WAOTnR,OAAAC,eAAImoB,EAAAznB,UAAA,aAAJ,WACC,OAAOzB,KAAK2nB,OAAOvM,eAAepb,KAAK2P,wCASxCuZ,EAAAznB,UAAAiP,MAAA,SAAM9G,EAAagc,GAElB5lB,KAAK2L,QAAQiE,SAEb,IAAMkM,EAAe9b,KAAK6U,UAAUjL,GAQpC,MAPiD,YAA7C5J,KAAK2nB,OAAOvM,eAAeU,KAC9B9b,KAAK2nB,OAAOtC,eAAe,UAAWvJ,GACtC9b,KAAKspB,YAAY5Y,MAAMoL,EAAc8J,GACjC9J,EAAe9b,KAAKmpB,aACvBnpB,KAAK6I,KAAK,QAASiT,EAAc8J,IAG5B5lB,MAURkpB,EAAAznB,UAAAsmB,KAAA,SAAKne,GACJ,IAAMkS,EAAe9b,KAAK6U,UAAUjL,GAOpC,OANA5J,KAAK2nB,OAAOrd,OAAOwR,GACnB9b,KAAK2nB,OAAOtC,eAAe,UAAWvJ,GACtC9b,KAAKspB,YAAYvB,KAAKjM,GAClBA,EAAe9b,KAAKmpB,aACvBnpB,KAAK6I,KAAK,OAAQiT,GAEZ9b,MAORkpB,EAAAznB,UAAAumB,MAAA,SAAMpe,GACL,IAAMkS,EAAe9b,KAAK6U,UAAUjL,GAQpC,MAPiD,YAA7C5J,KAAK2nB,OAAOvM,eAAeU,KAC9B9b,KAAK2nB,OAAOtC,eAAe,SAAUvJ,GACrC9b,KAAKspB,YAAYtB,MAAMlM,GACnBA,EAAe9b,KAAKmpB,aACvBnpB,KAAK6I,KAAK,QAASiT,IAGd9b,MAORc,OAAAC,eAAImoB,EAAAznB,UAAA,aAAJ,WACC,OAAOwD,KAAKukB,KAAKxpB,KAAK2mB,eAAe3mB,KAAK2P,aAE3C,SAAUJ,GACTvP,KAAKspB,YAAYhV,MAAQ/E,mCAM1BzO,OAAAC,eAAImoB,EAAAznB,UAAA,eAAJ,WACC,OAAOzB,KAAKspB,YAAYjV,aAEzB,SAAYzS,GACX5B,KAAKspB,YAAYjV,QAAUzS,mCAQ5BsnB,EAAAznB,UAAA8mB,iBAAA,SAAiB3e,GAChB,OAAO5J,KAAKspB,YAAYf,iBAAiB3e,IAQ1Csf,EAAAznB,UAAAomB,eAAA,SAAevT,EAAc1K,GAE5B,OADA5J,KAAKspB,YAAYzB,eAAevT,EAAO1K,GAChC5J,MAQRkpB,EAAAznB,UAAAklB,eAAA,SAAe/c,GACd,OAAO5J,KAAKspB,YAAY3C,eAAe/c,IAOxCsf,EAAAznB,UAAAunB,aAAA,SAAapD,EAAeyB,GAC3B,IAAMvL,EAAe9b,KAAK6U,UAAUwS,GAC9BR,EAAc7mB,KAAK2mB,eAAe7K,GACxC,OAAO9b,KAAKspB,YAAYxC,cAAcD,EAAcjB,EAAQ9J,IAMrDoN,EAAAznB,UAAA4nB,MAAR,eAAA5kB,EAAAzE,KAEOsL,EAAYtL,KAAKmpB,YACjB5d,EAAUvL,KAAK2P,MACrB3P,KAAKmpB,YAAc5d,EAEfD,IAAcC,IAEjBvL,KAAK2nB,OAAOtc,eAAeC,EAAWC,EAAS,SAAA3G,GAC9C,OAAQA,EAAEuI,OACT,IAAK,UACJ,IAAMyY,EAASnhB,EAAK6kB,YAAY3C,eAAe/hB,EAAEgF,MACjDnF,EAAKoE,KAAK,QAASjE,EAAEgF,KAAMgc,GAC3B,MACD,IAAK,UACW,IAAXhhB,EAAEgF,MACLnF,EAAKoE,KAAK,OAAQjE,EAAEgF,MAErB,MACD,IAAK,SACJnF,EAAKoE,KAAK,QAASjE,EAAEgF,SAKxB5J,KAAKspB,YAAYX,mBAAmBrd,EAAWC,EAAS,SAAC3B,EAAM0K,GAC9D7P,EAAKrB,SAASwG,EAAM0K,OAavB4U,EAAAznB,UAAAgnB,eAAA,SAAe7e,GACd,IAAMkS,EAAe9b,KAAK6U,UAAUjL,GACpC,OAAO5J,KAAK2nB,OAAOvM,eAAeU,IAMnCoN,EAAAznB,UAAAuB,QAAA,WAKC,OAJAgF,EAAAvG,UAAMuB,QAAOzC,KAAAP,MACbA,KAAK2L,QAAQhD,IAAI,OAAQ3I,KAAKopB,YAC9BppB,KAAKspB,YAAYtmB,UACjBhD,KAAK2nB,OAAO3kB,UACLhD,MAWTkpB,EA/PA,CACQjP,IAgQRlS,EAAQiB,MAAMigB,oVCxRdQ,GAAA,SAAAzhB,GAAA,SAAAyhB,IAAA,IAAAhlB,EAAA,OAAAuD,KAAArF,MAAA3C,KAAAoC,YAAApC,YAECyE,EAAA9D,KAAO,QAEE8D,EAAAyN,aAA6B,MA2CvC,OA/CgCwX,GAAAD,EAAAzhB,GASrByhB,EAAAhoB,UAAA+S,KAAV,WACC,OAAOxU,KAAK2L,QAAQ8I,UAAUH,OAMrBmV,EAAAhoB,UAAAsR,cAAV,SAAwBoB,GACvB,OAAOnU,KAAKuU,UAAYJ,GAMfsV,EAAAhoB,UAAA4R,gBAAV,SAA0BgB,GACzB,OAAOpP,KAAK4F,MAAMwJ,GAAW,GAAKrU,KAAKoU,WAAapU,KAAKuU,YAMhDkV,EAAAhoB,UAAAoR,cAAV,SAAwByB,GACvB,OAAOA,GAMRmV,EAAAhoB,UAAAqT,QAAA,WACC,OAAO9U,KAAK6J,WAMb4f,EAAAhoB,UAAAoT,UAAA,WACC,OAAQ7U,KAAK6J,UAAY7J,KAAKuU,WAAc,GAAKvU,KAAKoU,YAExDqV,EA/CA,CAAgC3P,GAiD1B,SAAU6P,GAAMvoB,EAAmB6Q,GACxC,OAAO,IAAIwX,GAAWvY,IAAc9P,EAAO6Q,mVCvC5C2X,GAAA,SAAA5hB,GAAA,SAAA6hB,IAAA,IAAAplB,EAAA,OAAAuD,KAAArF,MAAA3C,KAAAoC,YAAApC,YAECyE,EAAA9D,KAAO,OAKP8D,EAAAqlB,WAAsB,IAOtBrlB,EAAAslB,aAAwB,KAKhBtlB,EAAA8D,QAA+B,IAAIa,EAKnC3E,EAAAulB,eAAiBvlB,EAAKwlB,UAAU3lB,KAAKG,GAKrCA,EAAAylB,iBAA2B,IAmDpC,OAhF0BC,GAAAN,EAAA7hB,GAqCzB6hB,EAAApoB,UAAA2oB,SAAA,SAAShnB,EAAsBwG,GAS9B,OARA5J,KAAKuI,QAAQoB,KACZvG,SAAQA,EACRwG,KAAO5J,KAAK6U,UAAUjL,KAGK,IAAxB5J,KAAKuI,QAAQlG,SAChBrC,KAAKkqB,gBAAkBG,sBAAsBrqB,KAAKgqB,iBAE5ChqB,MAOR6pB,EAAApoB,UAAA6I,OAAA,SAAOC,GAEN,OADAvK,KAAKuI,QAAQ+B,OAAOtK,KAAK6U,UAAUtK,IAC5BvK,MAMA6pB,EAAApoB,UAAAwoB,UAAR,WAEC,IADA,IAAMta,EAAM3P,KAAK2L,QAAQyD,YAClBpP,KAAKuI,QAAQlG,QAAWrC,KAAKuI,QAAQ4B,OAAqBP,KAAO5J,KAAK+pB,cAAgBpa,GAAK,CACjG,IAAM7E,EAAQ9K,KAAKuI,QAAQnC,QACvB0E,GAAS6E,EAAM7E,EAAMlB,MAAQ5J,KAAK8pB,YACrChf,EAAM1H,WAGJpD,KAAKuI,QAAQlG,OAAS,IACzBrC,KAAKkqB,gBAAkBG,sBAAsBrqB,KAAKgqB,kBAIpDH,EAAApoB,UAAAuB,QAAA,WAIC,OAHAgF,EAAAvG,UAAMuB,QAAOzC,KAAAP,MACbA,KAAKuI,QAAQvF,UACbsnB,qBAAqBtqB,KAAKkqB,iBACnBlqB,MAET6pB,EAhFA,CAA0B5P,gVCF1BsQ,GAAA,SAAAviB,GAAA,SAAAwiB,IAAA,IAAA/lB,EAAA,OAAAuD,KAAArF,MAAA3C,KAAAoC,YAAApC,YAECyE,EAAA9D,KAAO,mBAKC8D,EAAAgmB,MAA6B,KAK7BhmB,EAAAimB,QAAkB,IA0T3B,OAtUsCC,GAAAH,EAAAxiB,GAmBrCwiB,EAAA/oB,UAAAkI,IAAA,SAAIvB,GACHpI,KAAK4C,OAAO0C,EAAU8C,EAAMwB,MAAO,oCACnC5J,KAAK4C,OAAO0C,EAAU8C,EAAMmV,UAAW,yCAEvCnV,EAAMwB,KAAOxB,EAAMwB,KAAKC,UACxB,IAAIiV,EAA4B,IAAI8L,GAAaxiB,EAAMwB,KAAMxB,EAAMwB,KAAOxB,EAAMmV,SAAUnV,GAQ1F,IAPmB,OAAfpI,KAAKyqB,MACRzqB,KAAKyqB,MAAQ3L,EAEb9e,KAAKyqB,MAAMI,OAAO/L,GAEnB9e,KAAK0qB,UAEW,OAAT5L,GACNA,EAAKgM,eACLhM,EAAKiM,YACL/qB,KAAKgrB,WAAWlM,GAChBA,EAAOA,EAAKmM,OAEb,OAAOjrB,MAORwqB,EAAA/oB,UAAAwI,OAAA,SAAO7B,GACN,GAAmB,OAAfpI,KAAKyqB,MAAgB,CACxB,IAAMS,KACNlrB,KAAKyqB,MAAMU,OAAO/iB,EAAMwB,KAAMshB,GAC9B,IAAmB,IAAA/oB,EAAA,EAAAipB,EAAAF,EAAA/oB,EAAAipB,EAAA/oB,OAAAF,IAAS,CAAvB,IAAM2c,EAAIsM,EAAAjpB,GACd,GAAI2c,EAAK1W,QAAUA,EAAO,CACzBpI,KAAKqrB,YAAYvM,GACjB9e,KAAK0qB,UACL,QAIH,OAAO1qB,MAORc,OAAAC,eAAIypB,EAAA/oB,UAAA,cAAJ,WACC,OAAOzB,KAAK0qB,yCAObF,EAAA/oB,UAAA6I,OAAA,SAAOC,GAAP,IAAA9F,EAAAzE,KAEC,OADAA,KAAKwL,YAAYjB,EAAO,SAAAnC,GAAS,OAAA3D,EAAKwF,OAAO7B,KACtCpI,MAMAwqB,EAAA/oB,UAAA6pB,SAAR,SAAiBxM,GAChB9e,KAAKyqB,MAAQ3L,EACM,OAAf9e,KAAKyqB,QACRzqB,KAAKyqB,MAAMQ,OAAS,OAQdT,EAAA/oB,UAAA8pB,qBAAR,SAA6BzM,EAAoB0M,GAC5B,OAAhB1M,EAAKmM,QACJnM,EAAK2M,cACR3M,EAAKmM,OAAOS,KAAOF,EAEnB1M,EAAKmM,OAAOU,MAAQH,EAErBxrB,KAAKgrB,WAAWlM,EAAKmM,SAErBjrB,KAAKsrB,SAASE,IAQRhB,EAAA/oB,UAAA4pB,YAAR,SAAoBvM,GACnB,GAAkB,OAAdA,EAAK4M,MAAgC,OAAf5M,EAAK6M,MAC9B3rB,KAAKurB,qBAAqBzM,EAAM,WAC1B,GAAmB,OAAfA,EAAK6M,MACf3rB,KAAKurB,qBAAqBzM,EAAMA,EAAK4M,WAC/B,GAAkB,OAAd5M,EAAK4M,KACf1rB,KAAKurB,qBAAqBzM,EAAMA,EAAK6M,WAC/B,CACN,IACIH,OAAW,EACXI,EAA4B,KAChC,GAHgB9M,EAAK+M,aAGP,EACb,GAAwB,OAApB/M,EAAK4M,KAAKC,OACbH,EAAc1M,EAAK4M,MACPC,MAAQ7M,EAAK6M,MACzBC,EAAOJ,MACD,CAEN,IADAA,EAAc1M,EAAK4M,KAAKC,MACK,OAAtBH,EAAYG,OAClBH,EAAcA,EAAYG,MAEvBH,EAAYP,SACfO,EAAYP,OAAOU,MAAQH,EAAYE,KACvCE,EAAOJ,EAAYP,OACnBO,EAAYE,KAAO5M,EAAK4M,KACxBF,EAAYG,MAAQ7M,EAAK6M,YAGrB,GAAwB,OAApB7M,EAAK6M,MAAMD,MACrBF,EAAc1M,EAAK6M,OACPD,KAAO5M,EAAK4M,KACxBE,EAAOJ,MACD,CAEN,IADAA,EAAc1M,EAAK6M,MAAMD,KACG,OAArBF,EAAYE,MAClBF,EAAcA,EAAYE,KAEvBF,EAAYP,SACfO,EAAYP,OAAOS,KAAOF,EAAYG,MACtCC,EAAOJ,EAAYP,OACnBO,EAAYE,KAAO5M,EAAK4M,KACxBF,EAAYG,MAAQ7M,EAAK6M,OAGP,OAAhB7M,EAAKmM,OACJnM,EAAK2M,cACR3M,EAAKmM,OAAOS,KAAOF,EAEnB1M,EAAKmM,OAAOU,MAAQH,EAGrBxrB,KAAKsrB,SAASE,GAEXI,GACH5rB,KAAKgrB,WAAWY,GAGlB9M,EAAK9b,WAQNwnB,EAAA/oB,UAAAqqB,YAAA,SAAYhN,GACX,IAAMmM,EAASnM,EAAKmM,OACdQ,EAAc3M,EAAK2M,cAGnBM,EAAYjN,EAAK6M,MACvB7M,EAAK6M,MAAQI,EAAUL,KACvBK,EAAUL,KAAO5M,EAEF,OAAXmM,EACCQ,EACHR,EAAOS,KAAOK,EAEdd,EAAOU,MAAQI,EAGhB/rB,KAAKsrB,SAASS,IAShBvB,EAAA/oB,UAAAuqB,aAAA,SAAalN,GACZ,IAAMmM,EAASnM,EAAKmM,OACdQ,EAAc3M,EAAK2M,cAGnBM,EAAYjN,EAAK4M,KACvB5M,EAAK4M,KAAOK,EAAUJ,MACtBI,EAAUJ,MAAQ7M,EAEH,OAAXmM,EACCQ,EACHR,EAAOS,KAAOK,EAEdd,EAAOU,MAAQI,EAGhB/rB,KAAKsrB,SAASS,IAORvB,EAAA/oB,UAAAupB,WAAR,SAAmBlM,GAClB,IAAMmN,EAAUnN,EAAK+M,aACjBI,EAAU,GAAKnN,EAAK4M,KACnB5M,EAAK4M,KAAKG,aAAe,EAC5B7rB,KAAK8rB,YAAYhN,EAAK4M,MAEtB1rB,KAAKgsB,aAAalN,GAETmN,GAAW,GAAKnN,EAAK6M,QAC3B7M,EAAK6M,MAAME,aAAe,EAC7B7rB,KAAKgsB,aAAalN,EAAK6M,OAEvB3rB,KAAK8rB,YAAYhN,KAUpB0L,EAAA/oB,UAAAP,IAAA,SAAI0I,GACH,GAAmB,OAAf5J,KAAKyqB,MAAgB,CACxB,IAAMS,KAEN,GADAlrB,KAAKyqB,MAAMU,OAAOvhB,EAAMshB,GACpBA,EAAQ7oB,OAAS,EAAG,CAEvB,IADA,IAAI6C,EAAMgmB,EAAQ,GACT9qB,EAAI,EAAGA,EAAI8qB,EAAQ7oB,OAAQjC,IAC/B8qB,EAAQ9qB,GAAG8rB,IAAMhnB,EAAIgnB,MACxBhnB,EAAMgmB,EAAQ9qB,IAGhB,OAAO8E,EAAIkD,OAGb,OAAO,MAORoiB,EAAA/oB,UAAAmG,QAAA,SAAQxE,GACP,GAAmB,OAAfpD,KAAKyqB,MAAgB,CACxB,IAAM0B,KACNnsB,KAAKyqB,MAAM2B,SAAS,SAAAtN,GAAQ,OAAAqN,EAAS3jB,KAAKsW,KAC1CqN,EAASvkB,QAAQ,SAAAkX,GACZA,EAAK1W,OACRhF,EAAS0b,EAAK1W,SAIjB,OAAOpI,MASRwqB,EAAA/oB,UAAAgK,cAAA,SAAc7B,EAAcxG,GAC3B,GAAmB,OAAfpD,KAAKyqB,MAAgB,CACxB,IAAMS,KACNlrB,KAAKyqB,MAAMU,OAAOvhB,EAAMshB,GACxBA,EAAQtjB,QAAQ,SAAAkX,GACXA,EAAK1W,OACRhF,EAAS0b,EAAK1W,SAIjB,OAAOpI,MASRwqB,EAAA/oB,UAAA+J,YAAA,SAAY5B,EAAMxG,GACjB,GAAmB,OAAfpD,KAAKyqB,MAAgB,CACxB,IAAMS,KACNlrB,KAAKyqB,MAAM4B,YAAYziB,EAAMshB,GAC7BA,EAAQtjB,QAAQ,SAAAkX,GACXA,EAAK1W,OACRhF,EAAS0b,EAAK1W,SAIjB,OAAOpI,MAMRwqB,EAAA/oB,UAAAuB,QAAA,WAMC,OALAgF,EAAAvG,UAAMuB,QAAOzC,KAAAP,MACM,OAAfA,KAAKyqB,OACRzqB,KAAKyqB,MAAM2B,SAAS,SAAAtN,GAAQ,OAAAA,EAAK9b,YAElChD,KAAKyqB,MAAQ,KACNzqB,MAETwqB,EAtUA,CAAsC3oB,EAAA,GAuVtC+oB,GAAA,WAmBC,SAAAA,EAAYsB,EAAKI,EAAMlkB,GARfpI,KAAAusB,MAA6B,KAE7BvsB,KAAAwsB,OAA8B,KAEtCxsB,KAAAirB,OAA8B,KAE9BjrB,KAAAysB,OAAiB,EAGhBzsB,KAAKoI,MAAQA,EAEbpI,KAAKksB,IAAMA,EAEXlsB,KAAKssB,KAAOA,EAEZtsB,KAAKkF,IAAMlF,KAAKssB,KAiLlB,OA3KC1B,EAAAnpB,UAAAopB,OAAA,SAAO/L,GACFA,EAAKoN,KAAOlsB,KAAKksB,IACF,OAAdlsB,KAAK0rB,KACR1rB,KAAK0rB,KAAO5M,EAEZ9e,KAAK0rB,KAAKb,OAAO/L,GAEO,OAAf9e,KAAK2rB,MACf3rB,KAAK2rB,MAAQ7M,EAEb9e,KAAK2rB,MAAMd,OAAO/L,IAUpB8L,EAAAnpB,UAAA0pB,OAAA,SAAOuB,EAAexB,GAGjBwB,EAAQ1sB,KAAKkF,MAIC,OAAdlF,KAAK0rB,MACR1rB,KAAK0rB,KAAKP,OAAOuB,EAAOxB,GAGrBlrB,KAAKksB,KAAOQ,GAAS1sB,KAAKssB,KAAOI,GACpCxB,EAAQ1iB,KAAKxI,MAIVA,KAAKksB,IAAMQ,GAII,OAAf1sB,KAAK2rB,OACR3rB,KAAK2rB,MAAMR,OAAOuB,EAAOxB,KAU3BN,EAAAnpB,UAAA4qB,YAAA,SAAYK,EAAexB,GAEtBlrB,KAAKksB,KAAOQ,IACfxB,EAAQ1iB,KAAKxI,MACK,OAAdA,KAAK0rB,MACR1rB,KAAK0rB,KAAKW,YAAYK,EAAOxB,IAIZ,OAAflrB,KAAK2rB,OACR3rB,KAAK2rB,MAAMU,YAAYK,EAAOxB,IAQhCN,EAAAnpB,UAAA2qB,SAAA,SAAShpB,GACRA,EAASpD,MACS,OAAdA,KAAK0rB,MACR1rB,KAAK0rB,KAAKU,SAAShpB,GAED,OAAfpD,KAAK2rB,OACR3rB,KAAK2rB,MAAMS,SAAShpB,IAOtBwnB,EAAAnpB,UAAAqpB,aAAA,WACmB,OAAd9qB,KAAK0rB,MAAgC,OAAf1rB,KAAK2rB,MAC9B3rB,KAAKysB,OAASxnB,KAAKC,IAAIlF,KAAK0rB,KAAKe,OAAQzsB,KAAK2rB,MAAMc,QAAU,EACrC,OAAfzsB,KAAK2rB,MACf3rB,KAAKysB,OAASzsB,KAAK2rB,MAAMc,OAAS,EACV,OAAdzsB,KAAK0rB,KACf1rB,KAAKysB,OAASzsB,KAAK0rB,KAAKe,OAAS,EAEjCzsB,KAAKysB,OAAS,GAOhB7B,EAAAnpB,UAAAspB,UAAA,WACC/qB,KAAKkF,IAAMlF,KAAKssB,KACE,OAAdtsB,KAAK0rB,OACR1rB,KAAKkF,IAAMD,KAAKC,IAAIlF,KAAKkF,IAAKlF,KAAK0rB,KAAKxmB,MAEtB,OAAflF,KAAK2rB,QACR3rB,KAAKkF,IAAMD,KAAKC,IAAIlF,KAAKkF,IAAKlF,KAAK2rB,MAAMzmB,OAQ3C0lB,EAAAnpB,UAAAoqB,WAAA,WACC,IAAII,EAAU,EAQd,OAPkB,OAAdjsB,KAAK0rB,MAAgC,OAAf1rB,KAAK2rB,MAC9BM,EAAUjsB,KAAK0rB,KAAKe,OAASzsB,KAAK2rB,MAAMc,OAChB,OAAdzsB,KAAK0rB,KACfO,EAAUjsB,KAAK0rB,KAAKe,OAAS,EACJ,OAAfzsB,KAAK2rB,QACfM,IAAYjsB,KAAK2rB,MAAMc,OAAS,IAE1BR,GAMRrB,EAAAnpB,UAAAgqB,YAAA,WACC,OAAuB,OAAhBzrB,KAAKirB,QAAmBjrB,KAAKirB,OAAOS,OAAS1rB,MAMrDc,OAAAC,eAAI6pB,EAAAnpB,UAAA,YAAJ,WACC,OAAOzB,KAAKusB,WAGb,SAASzN,GACR9e,KAAKusB,MAAQzN,EACA,OAATA,IACHA,EAAKmM,OAASjrB,MAEfA,KAAK8qB,eACL9qB,KAAK+qB,6CAMNjqB,OAAAC,eAAI6pB,EAAAnpB,UAAA,aAAJ,WACC,OAAOzB,KAAKwsB,YAGb,SAAU1N,GACT9e,KAAKwsB,OAAS1N,EACD,OAATA,IACHA,EAAKmM,OAASjrB,MAEfA,KAAK8qB,eACL9qB,KAAK+qB,6CAMNH,EAAAnpB,UAAAuB,QAAA,WACChD,KAAKirB,OAAS,KACdjrB,KAAKusB,MAAQ,KACbvsB,KAAKwsB,OAAS,KACdxsB,KAAKoI,MAAQ,MAEfwiB,EA3MA,+UCtVA+B,GAAA,SAAA3kB,GA6BC,SAAA4kB,IAAA,IAAAnoB,EAECuD,EAAAzH,KAAAP,KAAM0G,EAAqBkmB,EAAO5qB,cAAeI,WAAY,aAAWpC,KA7BzEyE,EAAA9D,KAAO,SAKP8D,EAAAmb,OAAyB,IAAIS,IAC5B1U,QAASlH,EAAKkH,QACdsG,MAAO,aAEExN,EAAAoa,mBAAqBpa,EAAKmb,QAKpCnb,EAAAuW,MAAQvW,EAAKmb,OAUbnb,EAAAooB,OAA0BpoB,EAAKmb,OAAOhE,KAMrC,IAAMrS,EAAU7C,EAAqBkmB,EAAO5qB,cAAeI,WAAY,kBAEvEqC,EAAKooB,OAAOzrB,MAAQmI,EAAQsjB,OAC5B1O,GAAS1Z,EAAM,UACfA,EAAKqoB,eAAiBvjB,EAAQsjB,OAG9BpoB,EAAKsoB,KAAOxjB,EAAQwjB,OAsCtB,OA7E4BC,GAAAJ,EAAA5kB,GA0CpB4kB,EAAA5qB,YAAP,WACC,OAAOlB,OAAOwF,OAAOiY,GAAcvc,eAClC+qB,MAAM,EACNF,OAAQ,KAUV/rB,OAAAC,eAAI6rB,EAAAnrB,UAAA,YAAJ,WACC,OAAOzB,KAAK6sB,OAAOzrB,SAAWsI,SAE/B,SAASqjB,IACH/sB,KAAK+sB,MAAQA,GACjB/sB,KAAK8sB,eAAiB9sB,KAAK6sB,OAAOzrB,MAElCpB,KAAK6sB,OAAOzrB,OAASsI,KACX1J,KAAK+sB,OAASA,IACxB/sB,KAAK6sB,OAAOzrB,MAAQpB,KAAK8sB,iDAO3BF,EAAAnrB,UAAAuB,QAAA,WAIC,OAHAgF,EAAAvG,UAAMuB,QAAOzC,KAAAP,MACbA,KAAKgb,MAAMhY,UACXhD,KAAK6sB,OAAO7pB,UACLhD,MAET4sB,EA7EA,CAA4BrO,gVCM5B0O,GAAA,SAAAjlB,GAcC,SAAAklB,IAAA,IAAAzoB,EAECuD,EAAAzH,KAAAP,KAAM0G,EAAqBwmB,EAAYlrB,cAAeI,aAAWpC,KAdlEyE,EAAA9D,KAAO,cAEP8D,EAAAuW,MAAgB,IAAI2R,IAAShhB,QAASlH,EAAKkH,UAC3ClH,EAAAmb,OAAe,IAAIS,IAAO1U,QAAUlH,EAAKkH,UAKzClH,EAAAooB,OAA0BpoB,EAAKuW,MAAM6R,OACrCpoB,EAAAoa,mBAAqBpa,EAAKuW,MAAOvW,EAAKmb,QAMrC,IAAMrW,EAAU7C,EAAqBwmB,EAAYlrB,cAAeI,kBAEhE2d,GAActb,EAAKuW,MAAOvW,EAAKmb,OAAQnb,EAAKkH,QAAQwhB,WAAWlO,aAE/Dxa,EAAKooB,OAAOzrB,MAAQmI,EAAQsjB,OAC5BpoB,EAAKsoB,KAAOxjB,EAAQwjB,OA2DtB,OAjFiCK,GAAAF,EAAAllB,GAyBzBklB,EAAAlrB,YAAP,WACC,OAAOlB,OAAOwF,OAAOiY,GAAcvc,eAClC+qB,MAAM,EACNF,OAAQ,KAUV/rB,OAAAC,eAAImsB,EAAAzrB,UAAA,YAAJ,WACC,OAAOzB,KAAKgb,MAAM+R,UAGnB,SAASA,GACR/sB,KAAKgb,MAAM+R,KAAOA,mCAsBnBG,EAAAzrB,UAAAoe,MAAA,eAAM,IAAA3d,KAAAC,EAAA,EAAAA,EAAAC,UAAAC,OAAAF,IAAAD,EAAAC,GAAAC,UAAAD,GAKL,OAJAnC,KAAKgb,MAAMnK,aACX3O,EAAKO,QAAQzC,KAAKgb,OAClB9Y,EAAKsG,KAAKxI,KAAK4f,QACfG,GAAapd,WAAA,EAAIT,GACVlC,MAMRktB,EAAAzrB,UAAAuB,QAAA,WAGC,OAFAgF,EAAAvG,UAAMuB,QAAOzC,KAAAP,MACbA,KAAK6sB,OAAO7pB,UACLhD,MAETktB,EAjFA,CAAiC3O,IAuFjCxS,EAAc,SAAAJ,GACbA,EAAQsT,YAAc,IAAIgO,IAActhB,QAAOA,MAGhDO,EAAe,SAAAP,GACdA,EAAQsT,YAAYjc,YCvGrB,IAAAqqB,GAAA,WA2BC,SAAAC,EAAY7Y,EAAsB1N,GAjBlC/G,KAAAiR,GAAaqc,EAAeC,WAmB3B,IAAMhkB,EAAiCzI,OAAOwF,OAAOgnB,EAAetrB,cAAe+E,GAEnF/G,KAAKyU,UAAYA,EACjBzU,KAAKoD,SAAWmG,EAAQnG,SACxBpD,KAAKwtB,MAAQjkB,EAAQd,KACrBzI,KAAK4J,KAAOL,EAAQK,KAoCtB,OAjCQ0jB,EAAAtrB,YAAP,WACC,OACCoB,SAAUkb,GACV7V,MAAM,EACNmB,KAAM,IAaR0jB,EAAA7rB,UAAAgsB,OAAA,SAAO7jB,GACF5J,KAAKoD,WACRpD,KAAKoD,SAASwG,GACV5J,KAAKwtB,OACRxtB,KAAKyU,UAAUiZ,MAAM1tB,KAAKiR,MAQ7Bqc,EAAA7rB,UAAAuB,QAAA,WAEC,OADAhD,KAAKoD,cAAW+F,EACTnJ,MApBOstB,EAAAC,SAAmB,EAsBnCD,EAtEA,+UCDAK,GAAA,SAAA3lB,GAqCC,SAAA4lB,EAAYnZ,EAAsB1N,GAAlC,IAAAtC,EAECuD,EAAAzH,KAAAP,KAAMyU,EAAW1N,IAAK/G,KAxBfyE,EAAAopB,YAAsB,EAKtBppB,EAAAqpB,SAAmB,EAKnBrpB,EAAAspB,UAAYtpB,EAAKmF,KAKjBnF,EAAAupB,cAAgBvpB,EAAKwpB,SAAS3pB,KAAKG,GAW1C,IAAM8E,EAAUzI,OAAOwF,OAAOsnB,EAAqB5rB,cAAe+E,UAElEtC,EAAK8Y,SAAWoM,GAAMpgB,EAAQgU,UAAU1T,UACxCpF,EAAKypB,UAAYvE,GAAMpgB,EAAQvE,UAAU6E,UACzCpF,EAAKspB,UAAYxkB,EAAQK,KACzBnF,EAAKgQ,UAAUtM,GAAG,QAAS1D,EAAKupB,eAChCvpB,EAAKgQ,UAAUtM,GAAG,YAAa1D,EAAKupB,eACpCvpB,EAAKkH,QAAUlH,EAAKgQ,UAAU9I,QAC9BlH,EAAKwpB,aAkEP,OAnH0CE,GAAAP,EAAA5lB,GAoDlC4lB,EAAA5rB,YAAP,WACC,OAAOlB,OAAOwF,UAAW+mB,GAAerrB,eACvCub,SAAU7T,IACV1E,SAAU,EACVyD,MAAM,KASRmlB,EAAAnsB,UAAAgsB,OAAA,SAAO7jB,GAEN5J,KAAKouB,cAAcxkB,GAEnB5B,EAAAvG,UAAMgsB,OAAMltB,KAAAP,KAAC4J,IAMNgkB,EAAAnsB,UAAA2sB,cAAR,SAAsBxkB,GAErB,IAAM0K,EAAQtU,KAAKyU,UAAUkS,eAAe/c,GACxC0K,GAAStU,KAAK4J,MAAQ0K,GAAStU,KAAK+tB,WAAa/tB,KAAK+tB,UAAY/tB,KAAKkuB,UAAYluB,KAAK4J,KAAO5J,KAAKud,WACvGvd,KAAK+tB,WAAa/tB,KAAKkuB,UACvBluB,KAAK6tB,WAAa7tB,KAAK8tB,QACvB9tB,KAAK8tB,QAAU9tB,KAAKyU,UAAU4Z,aAAaruB,KAAKytB,OAAOnpB,KAAKtE,MAC3D,IAAIypB,GAAWzpB,KAAK2L,QAAS3L,KAAK+tB,WAAWlZ,eAOxC+Y,EAAAnsB,UAAAwsB,SAAR,SAAiBrkB,GAChB5J,KAAKyU,UAAUiZ,MAAM1tB,KAAK6tB,YAC1B7tB,KAAKyU,UAAUiZ,MAAM1tB,KAAK8tB,SAC1B9tB,KAAK+tB,UAAY/tB,KAAK4J,KACtB,IAAM0K,EAAQtU,KAAKyU,UAAUkS,eAAe/c,GACxC0K,EAAQtU,KAAK4J,OAChB5J,KAAK+tB,UAAY/tB,KAAK4J,KAAO3E,KAAKukB,MAAMlV,EAAQtU,KAAK4J,MAAQ5J,KAAKkuB,WAAaluB,KAAKkuB,WAErFluB,KAAK6tB,WAAa7tB,KAAKyU,UAAU4Z,aAAaruB,KAAKytB,OAAOnpB,KAAKtE,MAC9D,IAAIypB,GAAWzpB,KAAK2L,QAAS3L,KAAK+tB,WAAWlZ,aAC9C7U,KAAK+tB,WAAa/tB,KAAKkuB,UACvBluB,KAAK8tB,QAAU9tB,KAAKyU,UAAU4Z,aAAaruB,KAAKytB,OAAOnpB,KAAKtE,MAC3D,IAAIypB,GAAWzpB,KAAK2L,QAAS3L,KAAK+tB,WAAWlZ,cAM/C+Y,EAAAnsB,UAAAuB,QAAA,WAMC,OALAgF,EAAAvG,UAAMuB,QAAOzC,KAAAP,MACbA,KAAKyU,UAAUiZ,MAAM1tB,KAAK6tB,YAC1B7tB,KAAKyU,UAAUiZ,MAAM1tB,KAAK8tB,SAC1B9tB,KAAKyU,UAAU9L,IAAI,QAAS3I,KAAKguB,eACjChuB,KAAKyU,UAAU9L,IAAI,YAAa3I,KAAKguB,eAC9BhuB,MAET4tB,EAnHA,CAA0CP,gVC8C1CiB,GAAA,SAAAtmB,GA4FC,SAAAumB,IAAA,IAAA9pB,EAECuD,EAAAzH,KAAAP,KAAM0G,EAAqB6nB,EAAUvsB,cAAeI,aAAWpC,KA5FhEyE,EAAA9D,KAAO,YASP8D,EAAAgM,MAAgB,EAKRhM,EAAA+pB,WAAoB,EAKpB/pB,EAAAgqB,SAAkB,EAuClBhqB,EAAAiqB,oBAKAjqB,EAAA6E,UAAsC,IAAIF,EAK1C3E,EAAAkqB,gBAAoC,IAAIpE,GAKxC9lB,EAAAmqB,kBAcAnqB,EAAAoqB,aAA4B,EAMnC,IAAMtlB,EAAU7C,EAAqB6nB,EAAUvsB,cAAeI,kBAG9DqC,EAAKqqB,KAAOvlB,EAAQwlB,IACpBtqB,EAAKuqB,OAAS,IAAI/F,IACjB7lB,SAAWqB,EAAKwqB,aAAa3qB,KAAKG,GAClCkH,QAASlH,EAAKkH,QACdiG,UAAY,EACZK,MAAO,QAERxN,EAAKyqB,mBACLzqB,EAAKiQ,IAAMjQ,EAAKuqB,OAAOpd,UACvBnN,EAAKuqB,OAAOpd,UAAUkU,WAAavc,EAAQwlB,IAC3CtqB,EAAKiQ,IAAItT,MAAQmI,EAAQmL,IACzByJ,GAAS1Z,EAAM,OACfA,EAAK0qB,eAAiB5lB,EAAQoL,cAG9BlQ,EAAK2qB,YAAc7lB,EAAQwlB,IAAM,IAigBnC,OAlnB+BM,GAAAd,EAAAvmB,GAoHvBumB,EAAAvsB,YAAP,WACC,OAAOlB,OAAOwF,OAAO2T,GAAgBjY,eACpC0S,IAAK,IACL4a,QAAS,KACTC,UAAW,EACXR,IAAK,IACLS,MAAO,EACPC,iBAAkB,KAClB9a,cAAe,KAaT4Z,EAAA9sB,UAAAwtB,aAAR,SAAqBS,EAAmBpb,GAEvC,GAAItU,KAAK6uB,aAAe,GACvBva,EAAQtU,KAAK8uB,MAAS,GACtBxa,GAA4B,EAAnBtU,KAAKovB,cAAqB,EAAG,CAEtC,IAAMO,EAAYrb,GAA4B,EAAnBtU,KAAKovB,cAAwC,EAAnBpvB,KAAKovB,aACpDQ,EAAS3qB,KAAK4qB,IAAI,EAAa5qB,KAAK6qB,IAAM9vB,KAAK6uB,aACrDa,GAAY,IAAIjG,GAAWzpB,KAAK2L,QAA4B,EAAnB3L,KAAKovB,YAAkB,GAAGva,YAAc+a,EAG9E5vB,KAAKyQ,MACJ6D,GAAStU,KAAKyuB,WACjBzuB,KAAK6I,KAAK,UAAW6mB,GACrB1vB,KAAKgvB,OAAOnH,eAAe7nB,KAAKwuB,WAAYkB,GAC5Cpb,EAAQtU,KAAKwuB,WACbxuB,KAAK6I,KAAK,YAAa6mB,EAAU1vB,KAAKgvB,OAAOzG,iBAAiBmH,IAC9D1vB,KAAK6I,KAAK,OAAQ6mB,IAIpB1vB,KAAKsJ,UAAUmC,cAAc6I,EAAO,SAAAlM,GAAS,OAAAA,EAAMqlB,OAAOiC,MAkB3DnB,EAAA9sB,UAAA2oB,SAAA,SAAShnB,EAA6BwG,GACrC,IAAMxB,EAAQ,IAAIilB,GAAertB,MAChCoD,SAAQA,EACRwG,KAAO,IAAIkQ,EAAmB9Z,KAAK2L,QAAS/B,GAAMkL,YAEnD,OAAO9U,KAAK+vB,UAAU3nB,EAAOpI,KAAKsJ,YAgBnCilB,EAAA9sB,UAAAuuB,eAAA,SACC5sB,EACA4B,EACAsG,EACAiS,QAAA,IAAAA,MAAA7T,KAEA,IAAMtB,EAAQ,IAAIulB,GAAqB3tB,MACtCoD,SAAQA,EACRma,SAAW,IAAIpI,EAAUnV,KAAK2L,QAAS4R,GAAUzI,UACjD9P,SAAU,IAAImQ,EAAUnV,KAAK2L,QAAS3G,GAAU8P,UAChDlL,KAAO,IAAIkQ,EAAmB9Z,KAAK2L,QAASL,GAAWwJ,YAIxD,OAAO9U,KAAK+vB,UAAU3nB,EAAOpI,KAAK2uB,kBASnCJ,EAAA9sB,UAAA4sB,aAAA,SAAajrB,EAA6BwG,GACzC,IAAMxB,EAAQ,IAAIilB,GAAertB,MAChCoD,SAAQA,EACRqF,MAAO,EACPmB,KAAO,IAAIkQ,EAAmB9Z,KAAK2L,QAAS/B,GAAMkL,YAEnD,OAAO9U,KAAK+vB,UAAU3nB,EAAOpI,KAAKsJ,YAOnCilB,EAAA9sB,UAAAisB,MAAA,SAAMuC,GACL,GAAIjwB,KAAK0uB,iBAAiBhtB,eAAeuuB,GAAU,CAClD,IAAMC,EAAOlwB,KAAK0uB,iBAAiBuB,EAAQ3tB,YAC3C4tB,EAAKC,SAASlmB,OAAOimB,EAAK9nB,OAC1B8nB,EAAK9nB,MAAMpF,iBACJhD,KAAK0uB,iBAAiBuB,EAAQ3tB,YAEtC,OAAOtC,MAQAuuB,EAAA9sB,UAAAsuB,UAAR,SAAkB3nB,EAAuB+nB,GAMxC,OALAnwB,KAAK0uB,iBAAiBtmB,EAAM6I,GAAG3O,aAC9B8F,MAAKA,EACL+nB,SAAQA,GAETA,EAASxmB,IAAIvB,GACNA,EAAM6I,IASdsd,EAAA9sB,UAAA6I,OAAA,SAAOC,GAAP,IAAA9F,EAAAzE,UAAO,IAAAuK,MAAA,GACN,IAAM6lB,EAAgBpwB,KAAK8U,QAAQvK,GAGnC,OAFAvK,KAAKsJ,UAAUkC,YAAY4kB,EAAe,SAAAhoB,GAAS,OAAA3D,EAAKipB,MAAMtlB,EAAM6I,MACpEjR,KAAK2uB,gBAAgBnjB,YAAY4kB,EAAe,SAAAhoB,GAAS,OAAA3D,EAAKipB,MAAMtlB,EAAM6I,MACnEjR,MAUAuuB,EAAA9sB,UAAAytB,iBAAR,eAAAzqB,EAAAzE,KACCA,KAAKgvB,OAAO7mB,GAAG,QAAS,SAACyB,EAAMgc,GAC9BA,EAAS,IAAI6D,GAAWhlB,EAAKkH,QAASia,GAAQ/Q,YAC9CpQ,EAAKoE,KAAK,QAASe,EAAMgc,KAG1B5lB,KAAKgvB,OAAO7mB,GAAG,OAAQ,SAACyB,GACvBnF,EAAKoE,KAAK,OAAQe,KAGnB5J,KAAKgvB,OAAO7mB,GAAG,QAAS,SAACyB,GACxBnF,EAAKoE,KAAK,QAASe,MAOrB9I,OAAAC,eAAIwtB,EAAA9sB,UAAA,aAAJ,WACC,OAAOzB,KAAKgvB,OAAOvG,eAAezoB,KAAK2P,wCAWxC4e,EAAA9sB,UAAAiP,MAAA,SAAM9G,EAAagc,GAClB,IAAIyK,EAMJ,OALI/qB,EAAUsgB,KACbyK,EAAcrwB,KAAK8U,QAAQ8Q,IAG5B5lB,KAAKgvB,OAAOte,MAAM9G,EAAMymB,GACjBrwB,MASRuuB,EAAA9sB,UAAAsmB,KAAA,SAAKne,GAEJ,OADA5J,KAAKgvB,OAAOjH,KAAKne,GACV5J,MAMRuuB,EAAA9sB,UAAAumB,MAAA,SAAMpe,GAEL,OADA5J,KAAKgvB,OAAOhH,MAAMpe,GACX5J,MAQRuuB,EAAA9sB,UAAA6uB,OAAA,SAAO1mB,GAON,OANAA,EAAO5J,KAAK6U,UAAUjL,GACmB,YAArC5J,KAAKgvB,OAAOvG,eAAe7e,GAC9B5J,KAAK0Q,MAAM9G,GAEX5J,KAAK+nB,KAAKne,GAEJ5J,MAkBRc,OAAAC,eAAIwtB,EAAA9sB,UAAA,qBAAJ,WACC,OAAOzB,KAAKmvB,oBAEb,SAAkBoB,GACb5qB,EAAQ4qB,KACXA,EAAWA,EAAQ,GAAKA,EAAQ,GAAM,GAEvCvwB,KAAKmvB,eAAiBoB,mCAMvBzvB,OAAAC,eAAIwtB,EAAA9sB,UAAA,iBAAJ,WACC,OAAOmV,EAAK5W,KAAKwuB,WAAY,KAAK3Z,iBAEnC,SAAc2b,GACbxwB,KAAKwuB,WAAaxuB,KAAK8U,QAAQ0b,oCAMhC1vB,OAAAC,eAAIwtB,EAAA9sB,UAAA,eAAJ,WACC,OAAOmV,EAAK5W,KAAKyuB,SAAU,KAAK5Z,iBAEjC,SAAY4b,GACXzwB,KAAKyuB,SAAWzuB,KAAK8U,QAAQ2b,oCAU9BlC,EAAA9sB,UAAAivB,cAAA,SAAcF,EAA8BC,GAG3C,OAFAzwB,KAAKuvB,UAAYiB,EACjBxwB,KAAKsvB,QAAUmB,EACRzwB,MAMRc,OAAAC,eAAIwtB,EAAA9sB,UAAA,aAAJ,WACC,OAAOzB,KAAK6uB,kBAEb,SAAUe,GAET5vB,KAAK6uB,aAAee,mCAQrB9uB,OAAAC,eAAIwtB,EAAA9sB,UAAA,wBAAJ,WACC,OAAO,IAAIgoB,GAAWzpB,KAAK2L,QAAS3L,KAAKovB,aAAavZ,kBAEvD,SAAqBD,GACpB5V,KAAKovB,YAAcpvB,KAAK8U,QAAQc,oCAOjC9U,OAAAC,eAAIwtB,EAAA9sB,UAAA,gBAAJ,WACC,IAAMkO,EAAM3P,KAAK2P,MACX2E,EAAQtU,KAAKgvB,OAAOrI,eAAehX,GACzC,OAAO,IAAI8Z,GAAWzpB,KAAK2L,QAAS2I,GAAO+B,6BAE5C,SAAasZ,GACZ,IAAMrb,EAAQtU,KAAK8U,QAAQ6a,GAC3B3vB,KAAKsU,MAAQA,mCAOdxT,OAAAC,eAAIwtB,EAAA9sB,UAAA,eAAJ,WACC,OAAOzB,KAAKgvB,OAAO3a,aAGpB,SAAYzS,GACX,IAAM+N,EAAM3P,KAAK2P,MACX2E,EAAQtU,KAAKgvB,OAAOpd,UAAU0V,YAAY1lB,EAAG+N,GACnD3P,KAAKsU,MAAQA,mCAOdxT,OAAAC,eAAIwtB,EAAA9sB,UAAA,gBAAJ,WACC,GAAIzB,KAAKyQ,KAAM,CACd,IAAMd,EAAM3P,KAAK2P,MAEjB,OADc3P,KAAKgvB,OAAOrI,eAAehX,GACzB3P,KAAKwuB,aAAexuB,KAAKyuB,SAAWzuB,KAAKwuB,YAEzD,OAAO,mCAOT1tB,OAAAC,eAAIwtB,EAAA9sB,UAAA,aAAJ,WACC,OAAOzB,KAAKgvB,OAAO1a,WAEpB,SAAU/E,GACT,GAAIvP,KAAKgvB,OAAO1a,QAAU/E,EAAG,CAC5B,IAAMI,EAAM3P,KAAK2P,MAEE,YAAf3P,KAAKmN,OACRnN,KAAK6I,KAAK,OAAQ8G,GAClB3P,KAAKgvB,OAAOnH,eAAetY,EAAGI,GAE9B3P,KAAK6I,KAAK,QAAS8G,EAAK3P,KAAKqU,UAE7BrU,KAAKgvB,OAAOnH,eAAetY,EAAGI,qCAUjC4e,EAAA9sB,UAAAklB,eAAA,SAAe/c,GACd,OAAO3E,KAAK4M,MAAM7R,KAAKgvB,OAAOrI,eAAe/c,KAQ9C2kB,EAAA9sB,UAAA8mB,iBAAA,SAAiB3e,GAChB,OAAO5J,KAAKgvB,OAAOzG,iBAAiB3e,IASrC9I,OAAAC,eAAIwtB,EAAA9sB,UAAA,WAAJ,WACC,OAAOzB,KAAKgvB,OAAOpd,UAAUkU,gBAE9B,SAAQiJ,GACP/uB,KAAKgvB,OAAOpd,UAAUkU,WAAaiJ,mCAkBpCR,EAAA9sB,UAAAgU,gBAAA,SAAgBG,GAEf,GADAA,EAAc5V,KAAK8U,QAAQc,GACR,YAAf5V,KAAKmN,MAER,OAAO,EAEP,IAAMwC,EAAM3P,KAAK2P,MAGXghB,EAAiB/a,EADF5V,KAAK2mB,eAAehX,GACWiG,EACpD,OAAO5V,KAAKgvB,OAAOhG,aAAa2H,EAAgBhhB,IAalD4e,EAAA9sB,UAAAmvB,WAAA,SAAWC,EAAqBC,GAC/B,IAAKA,EAAO,CAEX,IAAMnhB,EAAM3P,KAAK2P,MACjB,GAAmC,IAA/BkhB,EAAOzV,eAAezL,GAAY,CACrC,IACMohB,EAAe,GAAK,GADd/wB,KAAK0U,IAAI0G,eAAezL,GACC3P,KAAK4U,KAC1Ckc,EAAQD,EAAOzV,eAAezL,GAAOohB,OAErCD,EAAQ,EAGV,IAAME,EAAc,IAAI3Q,GAAKyQ,GAW7B,OATA9wB,KAAK0U,IAAIsK,QAAQgS,GAEjBA,EAAYhS,QAAQ6R,EAAO9V,QAC3B/a,KAAK4uB,eAAepmB,MACnB0c,QAAU2L,EAAOzvB,MACjB0vB,MAAQE,EACRH,OAAMA,IAEPA,EAAOzvB,MAAQ,EACRpB,MAORuuB,EAAA9sB,UAAAwvB,aAAA,SAAaJ,GACZ,IAAK,IAAIzwB,EAAIJ,KAAK4uB,eAAevsB,OAAS,EAAGjC,GAAK,EAAGA,IAAK,CACzD,IAAM8wB,EAAelxB,KAAK4uB,eAAexuB,GACrC8wB,EAAaL,SAAWA,IAC3BK,EAAaJ,MAAM9tB,UACnBkuB,EAAaL,OAAOzvB,MAAQ8vB,EAAahM,QACzCllB,KAAK4uB,eAAexnB,OAAOhH,EAAG,IAGhC,OAAOJ,MAMRuuB,EAAA9sB,UAAAuB,QAAA,WAMC,OALAgF,EAAAvG,UAAMuB,QAAOzC,KAAAP,MACbA,KAAKgvB,OAAOhsB,UACZqb,GAASre,KAAM,OACfA,KAAKsJ,UAAUtG,UACfhD,KAAK2uB,gBAAgB3rB,UACdhD,MAWTuuB,EAlnBA,CAA+BtU,IAonB/BlS,EAAQiB,MAAMslB,IAMdviB,EAAc,SAAAJ,GACbA,EAAQ8I,UAAY,IAAI6Z,IAAY3iB,QAAOA,MAG5CO,EAAe,SAAAP,GACdA,EAAQ8I,UAAUzR,4VC1pBnBmuB,GAAA,SAAAnpB,GA8DC,SAAAopB,EAAY7nB,GAAZ,IAAA9E,EACCuD,EAAAzH,KAAAP,KAAMuJ,IAAQvJ,YAxDPyE,EAAA4sB,QAAkB,IAAI1E,IAC7BhhB,QAASlH,EAAKkH,UAMflH,EAAAmb,OAASnb,EAAK4sB,QACJ5sB,EAAAoa,mBAAqBpa,EAAKmb,QAKpCnb,EAAAuW,WAAQ7R,EAOR1E,EAAAooB,OAASpoB,EAAK4sB,QAAQxE,OAOZpoB,EAAAkjB,OAQL,IAAI1C,GAAc,WAObxgB,EAAA6sB,SAAU,EAKZ7sB,EAAA8sB,cAKA9sB,EAAA+sB,aAAyDlT,GACzD7Z,EAAAgtB,YAAuCnT,GAI9CH,GAAS1Z,EAAM,UACfA,EAAKkjB,OAAOne,OAAS,IACrB/E,EAAKooB,OAAOrS,eAAejR,EAAQsjB,OAAQ,GAE3CpoB,EAAKsoB,KAAOxjB,EAAQwjB,OAmMtB,OAvQoE2E,GAAAN,EAAAppB,GAwE5DopB,EAAApvB,YAAP,WACC,OAAOlB,OAAOwF,OAAOiY,GAAcvc,eAClC+qB,MAAM,EACN9e,gBAAiB,EACjB4e,OAAQ,KAOV/rB,OAAAC,eAAIqwB,EAAA3vB,UAAA,aAAJ,WACC,OAAIzB,KAAKsxB,QAC6B,YAAjCtxB,KAAK2L,QAAQ8I,UAAUtH,MACnBnN,KAAK2nB,OAAOvM,eAAepb,KAAK2L,QAAQ8I,UAAUJ,SAElD,UAGDrU,KAAK2nB,OAAOvM,eAAepb,KAAK2P,wCAUzC7O,OAAAC,eAAIqwB,EAAA3vB,UAAA,YAAJ,WACC,OAAOzB,KAAKqxB,QAAQtE,UAErB,SAASA,GACR/sB,KAAKqxB,QAAQtE,KAAOA,mCAgBrBqE,EAAA3vB,UAAAiP,MAAA,SAAM9G,EAAagc,EAAerI,GAAlC,IAAA9Y,EAAAzE,KAOC,QAPiC,IAAAud,MAAA,GAEhC3T,EADGxE,EAAQwE,IAAS5J,KAAKsxB,QAClBtxB,KAAK2L,QAAQ8I,UAAUJ,QAEvBrU,KAAK6U,UAAUjL,GAGkB,YAArC5J,KAAK2nB,OAAOvM,eAAexR,GAC9B5J,KAAK2nB,OAAOrd,OAAOV,GACnB5J,KAAK2nB,OAAOtC,eAAe,UAAWzb,GACtC5J,KAAK2xB,QAAQ/nB,EAAMgc,EAAQrI,QAG3B,GADAvd,KAAK2nB,OAAOtC,eAAe,UAAWzb,GAClC5J,KAAKsxB,QAAS,CAEjB,IAAMxmB,EAAQ9K,KAAK2nB,OAAOzmB,IAAI0I,GAC1BkB,IACHA,EAAM8a,OAAS5lB,KAAK6U,UAAUvN,EAAWse,EAAQ,IACjD9a,EAAMyS,SAAWvd,KAAK6U,UAAU0I,IAEjC,IAAMqU,EAAQ5xB,KAAK2L,QAAQ8I,UAAU2V,SAAS,SAAA7a,GAC7C9K,EAAKotB,OAAOtiB,EAAGqW,EAAQrI,IACrB3T,GACH5J,KAAKuxB,WAAW/oB,KAAKopB,GAGgB,YAAjC5xB,KAAK2L,QAAQ8I,UAAUtH,OAC1BnN,KAAKwxB,aAAaxxB,KAAK2P,MAAO3P,KAAK2L,QAAQ8I,UAAUJ,cAGtDrU,KAAK6xB,OAAOlvB,MAAM3C,KAAMoC,WAG1B,OAAOpC,MAWRoxB,EAAA3vB,UAAAsmB,KAAA,SAAKne,GAMJ,GAJCA,EADGxE,EAAQwE,IAAS5J,KAAKsxB,QAClBtxB,KAAK2L,QAAQ8I,UAAUJ,QAEvBrU,KAAK6U,UAAUjL,GAElB5J,KAAKsxB,QAEH,CACN,IAAMM,EAAQ5xB,KAAK2L,QAAQ8I,UAAU2V,SAASpqB,KAAK8xB,MAAMxtB,KAAKtE,MAAO4J,GACrE5J,KAAKuxB,WAAW/oB,KAAKopB,QAHrB5xB,KAAK8xB,MAAMnvB,MAAM3C,KAAMoC,WAOxB,OAFApC,KAAK2nB,OAAOrd,OAAOV,GACnB5J,KAAK2nB,OAAOtC,eAAe,UAAWzb,GAC/B5J,MAqBRoxB,EAAA3vB,UAAAswB,KAAA,eAAAttB,EAAAzE,KA+BC,OA9BKA,KAAKsxB,UACTtxB,KAAKsxB,SAAU,EACftxB,KAAKwxB,aAAe,SAAC5nB,EAAMgc,GAC1B,GAAIA,EAAS,EAAG,CAEf,IAAMoM,EAAavtB,EAAKkjB,OAAOzmB,IAAI0kB,GAEnC,GAAIoM,GAAmC,YAArBA,EAAW7kB,OAAuB6kB,EAAWpoB,OAASgc,EAAQ,CAE/E,IAAMqM,EAAcrM,EAASnhB,EAAKoQ,UAAUmd,EAAWpoB,MACnD2T,OAAQ,EACRyU,EAAWzU,WACdA,EAAW9Y,EAAKoQ,UAAUmd,EAAWzU,UAAY0U,GAElDxtB,EAAKotB,OAAOjoB,EAAMnF,EAAKoQ,UAAUmd,EAAWpM,QAAUqM,EAAa1U,MAItEvd,KAAKyxB,YAAc,SAAA7nB,GAClB,IAAMyK,EAAU5P,EAAKkH,QAAQ8I,UAAU8T,iBAAiBtjB,KAAKC,IAAI0E,EAAOnF,EAAKmZ,WAAY,IAC7C,YAAxCnZ,EAAKkjB,OAAOvM,eAAe/G,IAC9B5P,EAAKqtB,MAAMloB,IAGb5J,KAAK2L,QAAQ8I,UAAUtM,GAAG,QAASnI,KAAKwxB,cACxCxxB,KAAK2L,QAAQ8I,UAAUtM,GAAG,YAAanI,KAAKwxB,cAC5CxxB,KAAK2L,QAAQ8I,UAAUtM,GAAG,OAAQnI,KAAKyxB,aACvCzxB,KAAK2L,QAAQ8I,UAAUtM,GAAG,QAASnI,KAAKyxB,aACxCzxB,KAAK2L,QAAQ8I,UAAUtM,GAAG,UAAWnI,KAAKyxB,cAEpCzxB,MAMRoxB,EAAA3vB,UAAAywB,OAAA,eAAAztB,EAAAzE,KAaC,OAZIA,KAAKsxB,UACRtxB,KAAK2L,QAAQ8I,UAAU9L,IAAI,OAAQ3I,KAAKyxB,aACxCzxB,KAAK2L,QAAQ8I,UAAU9L,IAAI,QAAS3I,KAAKyxB,aACzCzxB,KAAK2L,QAAQ8I,UAAU9L,IAAI,UAAW3I,KAAKyxB,aAC3CzxB,KAAK2L,QAAQ8I,UAAU9L,IAAI,QAAS3I,KAAKwxB,cACzCxxB,KAAK2L,QAAQ8I,UAAU9L,IAAI,YAAa3I,KAAKwxB,eAE9CxxB,KAAKsxB,SAAU,EAEftxB,KAAKuxB,WAAW3pB,QAAQ,SAAAqJ,GAAM,OAAAxM,EAAKkH,QAAQ8I,UAAUiZ,MAAMzc,KAC3DjR,KAAKuxB,cACLvxB,KAAK2nB,OAAOrd,OAAO,GACZtK,MAMRoxB,EAAA3vB,UAAAuB,QAAA,WAKC,OAJAgF,EAAAvG,UAAMuB,QAAOzC,KAAAP,MACbA,KAAKkyB,SACLlyB,KAAKqxB,QAAQruB,UACbhD,KAAK2nB,OAAO3kB,UACLhD,MAEToxB,EAvQA,CAAoE7S,gVCpBpE4T,GAAA,SAAAnqB,GAwDC,SAAAoqB,EAAY7oB,GAAZ,IAAA9E,EACCuD,EAAAzH,KAAAP,KAAMuJ,IAAQvJ,YAnDfyE,EAAA4tB,QAAsB/T,GAUZ7Z,EAAA6tB,YAAsB,EAKtB7tB,EAAA8tB,WAAqB,EAKvB9tB,EAAAC,UAAoB,EAK5BD,EAAAmb,OAAe,IAAIS,IAClB1U,QAASlH,EAAKkH,QACdiQ,KAAO,IAMEnX,EAAA8b,UAAY9b,EAAKmb,OAqI3Bnb,EAAAgkB,eAAiB,SAAS7e,GACzB,IAAMkS,EAAe9b,KAAK6U,UAAUjL,GACpC,OAAyB,IAArB5J,KAAKsyB,YAAqBxW,GAAgB9b,KAAKsyB,cAC7B,IAApBtyB,KAAKuyB,WAAoBzW,GAAgB9b,KAAKuyB,WACxC,UAEA,WAvHR9tB,EAAK+tB,QAAUjpB,EAAQkpB,OACvBhuB,EAAKiuB,SAAWnpB,EAAQopB,QACxBluB,EAAKmuB,OAASrpB,EAAQspB,QAiJxB,OA9MkFC,GAAAV,EAAApqB,GAgE1EoqB,EAAApwB,YAAP,WACC,OAAOlB,OAAOwF,OAAOiY,GAAcvc,eAClC6wB,MAAO,SACPJ,OAAS,EACTE,QAAS,EACTN,QAAU/T,MAkBF8T,EAAA3wB,UAAAsxB,WAAV,SAAqBnpB,EAAegS,QAAA,IAAAA,MAAA,GACnC5b,KAAK4C,QAA4B,IAArB5C,KAAKsyB,WAAmB,2CAEpC,IAAMU,EAAahzB,KAAK6U,UAAU7U,KAAKwyB,SAiBvC,OAdAxyB,KAAKsyB,WAAa1oB,EAAOopB,EACzBhzB,KAAKsyB,WAAartB,KAAKC,IAAIlF,KAAKsyB,WAAYtyB,KAAK2L,QAAQyD,aAGrD4jB,EAAa,GAChBhzB,KAAKugB,UAAU3E,KAAKpB,eAAe,EAAG5Q,GAClB,WAAhB5J,KAAK4yB,OACR5yB,KAAKugB,UAAU3E,KAAKgB,wBAAwBhB,EAAMhS,EAAOopB,GAEzDhzB,KAAKugB,UAAU3E,KAAKsB,+BAA+BtB,EAAMhS,EAAMopB,IAGhEhzB,KAAKugB,UAAU3E,KAAKpB,eAAeoB,EAAMhS,GAEnC5J,MAORoyB,EAAA3wB,UAAAsmB,KAAA,SAAKne,GAEJ,OADA5J,KAAKizB,UAAUjzB,KAAK6U,UAAUjL,IACvB5J,MAOEoyB,EAAA3wB,UAAAwxB,UAAV,SAAoBrpB,GAApB,IAAAnF,EAAAzE,KACCA,KAAK4C,QAA4B,IAArB5C,KAAKsyB,WAAmB,wCAEpCtyB,KAAKkzB,aAGL,IAAMC,EAAcnzB,KAAK6U,UAAU7U,KAAK0yB,UAwBxC,OArBA1yB,KAAKuyB,UAAYvyB,KAAK6U,UAAUjL,GAAQupB,EACxCnzB,KAAKuyB,UAAYttB,KAAKC,IAAIlF,KAAKuyB,UAAWvyB,KAAK2L,QAAQyD,aACnD+jB,EAAc,EAEG,WAAhBnzB,KAAK4yB,OACR5yB,KAAKugB,UAAU3E,KAAKoB,aAAa,EAAGmW,EAAavpB,GAEjD5J,KAAKugB,UAAU3E,KAAKqB,aAAa,EAAGkW,EAAavpB,IAIlD5J,KAAKugB,UAAU3E,KAAKe,oBAAoB/S,GACxC5J,KAAKugB,UAAU3E,KAAKpB,eAAe,EAAG5Q,IAEvC5J,KAAK2L,QAAQ7G,aAAa9E,KAAK0E,UAC/B1E,KAAK0E,SAAW1E,KAAK2L,QAAQhH,WAAW,WAEvC,IAAMyuB,EAAiC,gBAAhB3uB,EAAKmuB,OAAyC,EAAdO,EAAkB,EACzE1uB,EAAK4uB,YAAY5uB,EAAKkL,MAAQyjB,GAC9B3uB,EAAK6uB,YACHtzB,KAAKuyB,UAAYvyB,KAAK2L,QAAQyD,aAC1BpP,MAMEoyB,EAAA3wB,UAAA6xB,SAAV,eAAA7uB,EAAAzE,KACKA,KAAKqyB,UAAY/T,KACpBte,KAAKqyB,UAELryB,KAAKqyB,QAAU/T,GAEf3Z,WAAW,WAAM,OAAAF,EAAKzB,WAAW,OAoBnClC,OAAAC,eAAIqxB,EAAA3wB,UAAA,aAAJ,WACC,OAAOzB,KAAKyoB,eAAezoB,KAAK2P,wCAMjCyiB,EAAA3wB,UAAAyxB,WAAA,WAMC,OALAlzB,KAAK4C,QAA4B,IAArB5C,KAAKsyB,WAAmB,yBAEpCtyB,KAAKugB,UAAU3E,KAAKN,sBAAsBtb,KAAKsyB,WAAatyB,KAAK4d,YACjE5d,KAAK2L,QAAQ7G,aAAa9E,KAAK0E,UAC/B1E,KAAKuyB,WAAa,EACXvyB,MAGRoyB,EAAA3wB,UAAAuB,QAAA,WAGC,OAFAgF,EAAAvG,UAAMuB,QAAOzC,KAAAP,MACbA,KAAKugB,UAAU1P,aACR7Q,MAEToyB,EA9MA,CAAkF7T,gVCalFgV,GAAA,SAAAvrB,GA4BC,SAAAwrB,IAAA,IAAA/uB,EAECuD,EAAAzH,KAAAP,KAAM0G,EAAqB8sB,EAAiBxxB,cAAeI,WAAY,SAAU,aAAWpC,KA5B7FyE,EAAA9D,KAAO,mBAKC8D,EAAAgvB,QAAUhvB,EAAKkH,QAAQ8B,qBACrBhJ,EAAAoa,mBAAqBpa,EAAK8b,UAAW9b,EAAKgvB,SAe5ChvB,EAAAivB,gBAA0B,EAC1BjvB,EAAAkvB,gBAA0B,EAOjC,IAAMpqB,EAAU7C,EAAqB8sB,EAAiBxxB,cAAeI,WAAY,SAAU,kBAE3F4c,GAAQva,EAAKgvB,QAAShvB,EAAK8b,WAC3B9b,EAAKgvB,QAAQpB,QAAU,WAAM,OAAA5tB,EAAK4uB,eAKlC5uB,EAAKmvB,aAAe,IAAIlZ,IACvB/O,QAASlH,EAAKkH,QACdzB,MAAQzF,EAAKgvB,QAAQG,aACrB3hB,MAAQ,WACR7Q,MAAQmI,EAAQqqB,eAIjBnvB,EAAKgM,KAAOlH,EAAQkH,KACpBhM,EAAK8qB,UAAYhmB,EAAQgmB,UACzB9qB,EAAK6qB,QAAU/lB,EAAQ+lB,QACvB7qB,EAAKkd,QAAU,IAAIV,GAAgB1X,EAAQ4G,OAAQ5G,EAAQ4X,UAoK7D,OAtNsC0S,GAAAL,EAAAxrB,GAqD9BwrB,EAAAxxB,YAAP,WACC,OAAOlB,OAAOwF,OAAO6rB,GAAcnwB,eAClCmO,OAAQ,IAAI8Q,GACZxQ,MAAM,EACN6e,QAAU,EACVC,UAAY,EACZpO,OAAQ7C,GACRsV,aAAe,KAOjB9yB,OAAAC,eAAIyyB,EAAA/xB,UAAA,cAAJ,WACC,OAAOzB,KAAKwyB,aAEb,SAAWjjB,GACVvP,KAAKwyB,QAAUjjB,mCAMhBzO,OAAAC,eAAIyyB,EAAA/xB,UAAA,eAAJ,WACC,OAAOzB,KAAK0yB,cAEb,SAAYnjB,GACXvP,KAAK0yB,SAAWnjB,mCAMjBzO,OAAAC,eAAIyyB,EAAA/xB,UAAA,aAAJ,WACC,OAAOzB,KAAK4yB,YAEb,SAAUrjB,GACTvP,KAAK4yB,OAASrjB,mCAYfikB,EAAA/xB,UAAAiP,MAAA,SAAM9G,EAAagc,EAAerI,EAAiB3B,GAmBlD,QAnBkD,IAAAA,MAAA,GAClD5b,KAAK4C,OAAO5C,KAAKmQ,OAAOyR,OAAQ,0CAChChY,EAAO5J,KAAK6U,UAAUjL,GAGtB5J,KAAK+yB,WAAWnpB,EAAMgS,GAIrBgK,EADG5lB,KAAKyQ,KACCnJ,EAAWse,EAAQ5lB,KAAKuvB,WAGxBjoB,EAAWse,EAAQ,GAE7BA,EAAS5lB,KAAK6U,UAAU+Q,GAExBA,EAAS3gB,KAAKC,IAAI0gB,EAAQ,GAGtB5lB,KAAKyQ,KAAM,CAEd,IAAM6e,EAAUtvB,KAAK6U,UAAU7U,KAAKsvB,UAAYtvB,KAAKmQ,OAAOoN,SACtDgS,EAAYvvB,KAAK6U,UAAU7U,KAAKuvB,WAGlC3J,GAAU0J,IACb1J,GAAWA,EAAS2J,IAHAD,EAAUC,GAGmBA,GAanD,GARAvvB,KAAKyzB,QAAQtjB,OAASnQ,KAAKmQ,OAAOjP,MAClClB,KAAKyzB,QAAQnE,QAAUtvB,KAAK6U,UAAU7U,KAAKsvB,UAAYtvB,KAAKmQ,OAAOoN,SAC/DqI,EAAS5lB,KAAKmQ,OAAOoN,WACxBvd,KAAK0zB,gBAAiB,EACtB1zB,KAAKyzB,QAAQ/iB,MAAM9G,EAAMgc,IAItBtgB,EAAUiY,GAAW,CACxB,IAAIuW,EAAc9zB,KAAK6U,UAAU0I,GAEjCuW,EAAc7uB,KAAKC,IAAI4uB,EAAa,GACpC9zB,KAAK+nB,KAAKne,EAAOkqB,GAGlB,OAAO9zB,MAGEwzB,EAAA/xB,UAAA4xB,YAAV,SAAsBzpB,GAChB5J,KAAK2zB,iBACT3zB,KAAK2zB,gBAAiB,EACtB3zB,KAAKyzB,QAAQ1L,KAAK/nB,KAAK6U,UAAUjL,IACjC5J,KAAKszB,aAOPxyB,OAAAC,eAAIyyB,EAAA/xB,UAAA,iBAAJ,WACC,OAAOzB,KAAKyzB,QAAQlE,eAErB,SAAcA,GACbvvB,KAAKyzB,QAAQlE,UAAYvvB,KAAK6U,UAAU0a,oCAMzCzuB,OAAAC,eAAIyyB,EAAA/xB,UAAA,eAAJ,WACC,OAAOzB,KAAKyzB,QAAQnE,aAErB,SAAYA,GACXtvB,KAAKyzB,QAAQnE,QAAUtvB,KAAK6U,UAAUya,oCAMvCxuB,OAAAC,eAAIyyB,EAAA/xB,UAAA,cAAJ,WACC,OAAOzB,KAAK2hB,aAEb,SAAWxR,GACVnQ,KAAK2hB,QAAQhR,IAAIR,oCAMlBrP,OAAAC,eAAIyyB,EAAA/xB,UAAA,YAAJ,WACC,OAAOzB,KAAKyzB,QAAQhjB,UAErB,SAASA,GACRzQ,KAAKyzB,QAAQhjB,KAAOA,EAChBzQ,KAAK0zB,gBACR1zB,KAAKkzB,8CAOPM,EAAA/xB,UAAAuB,QAAA,WAMC,OALAgF,EAAAvG,UAAMuB,QAAOzC,KAAAP,MACbA,KAAKyzB,QAAQpB,QAAU,KACvBryB,KAAKyzB,QAAQ5iB,aACb7Q,KAAK2hB,QAAQ3e,UACbhD,KAAK4zB,aAAa5wB,UACXhD,MAETwzB,EAtNA,CAAsCrB,gVCOtC4B,GAAA,SAAA/rB,GAqBC,SAAAgsB,IAAA,IAAAvvB,EACCuD,EAAAzH,KAAAP,KAAM0G,EAAqBstB,EAAMhyB,cAAeI,WAAY,WAASpC,KApBtEyE,EAAA9D,KAAO,QAKC8D,EAAAgvB,QAAmC,KAgB1C,IAAMlqB,EAAU7C,EAAqBstB,EAAMhyB,cAAeI,WAAY,gBAEtEqC,EAAKwvB,cAAgB1qB,EAAQqqB,aAC7BnvB,EAAKpB,KAAOkG,EAAQlG,OA2FtB,OArH2B6wB,GAAAF,EAAAhsB,GA6BnBgsB,EAAAhyB,YAAP,WACC,OAAOlB,OAAOwF,OAAO6qB,GAAOnvB,eAC3B4xB,aAAc,EACdvwB,KAAM,WASRvC,OAAAC,eAAIizB,EAAAvyB,UAAA,YAAJ,WACC,OAAOzB,KAAKwD,WAEb,SAASH,GAER,GADArD,KAAK4C,OAAOS,KAAQ8wB,GAAe,wBAA0B9wB,GACzDrD,KAAKwD,QAAUH,IAClBrD,KAAKwD,MAAQH,EAEM,YAAfrD,KAAKmN,OAAqB,CAC7B,IAAMwC,EAAM3P,KAAK2P,MACjB3P,KAAK8xB,MAAMniB,GACX3P,KAAK6xB,OAAOliB,qCASf7O,OAAAC,eAAIizB,EAAAvyB,UAAA,oBAAJ,WACC,OAAOzB,KAAKi0B,mBAEb,SAAiBG,GAChBp0B,KAAKi0B,cAAgBG,EACjBp0B,KAAKyzB,UACRzzB,KAAKyzB,QAAQG,aAAaxyB,MAAQgzB,oCAO1BJ,EAAAvyB,UAAAowB,OAAV,SAAiBjoB,GAChB,IAAMuG,EAASgkB,GAAcn0B,KAAKwD,OAClCxD,KAAKyzB,QAAU,IAAIF,GAAiBpjB,GAAQ6O,QAAQhf,KAAK4f,QACzD5f,KAAKyzB,QAAQhjB,MAAO,EACpBzQ,KAAKyzB,QAAQG,aAAaxyB,MAAQpB,KAAKi0B,cACvCj0B,KAAKyzB,QAAQ/iB,MAAM1Q,KAAK6U,UAAUjL,GAAO3E,KAAKovB,UAAYlkB,EAAOoN,SAAW,QASnEyW,EAAAvyB,UAAAqwB,MAAV,SAAgBloB,GACX5J,KAAKyzB,UACRzzB,KAAKyzB,QAAQ1L,KAAK/nB,KAAK6U,UAAUjL,IACjC5J,KAAKyzB,QAAU,OAQjBO,EAAAvyB,UAAAkwB,QAAA,SAAQ/nB,GAKP,OAFA5J,KAAK8xB,MAAMloB,GACX5J,KAAK6xB,OAAOjoB,GACL5J,MAMRg0B,EAAAvyB,UAAAuB,QAAA,WAKC,OAJAgF,EAAAvG,UAAMuB,QAAOzC,KAAAP,MACTA,KAAKyzB,SACRzzB,KAAKyzB,QAAQ5iB,aAEP7Q,MAETg0B,EArHA,CAA2B7C,IAyIrBmD,IACLC,MAAO,KACPC,KAAM,KACNC,MAAO,MAQFN,IACLI,YACC,IAAKD,GAAYC,MAAO,CAEvB,IADA,IAAMpkB,KACGukB,EAAa,EAAGA,EA3BP,EA2BkCA,IAAc,CACjE,IAAM5R,EAAU,IAAIF,aA7BF,QA8BlBzS,EAAOukB,GAAc5R,EAErB,IADA,IAAI6R,EAAU,EACLv0B,EAAI,EAAGA,EAhCE,OAgCiBA,IAAK,CACvC,IAAMq0B,EAAwB,EAAhBxvB,KAAKovB,SAAe,EAClCvR,EAAQ1iB,IAAMu0B,EAAW,IAAOF,GAAU,KAC1CE,EAAU7R,EAAQ1iB,GAClB0iB,EAAQ1iB,IAAM,KAGhBk0B,GAAYC,OAAQ,IAAItT,IAAkBkB,UAAUhS,GAErD,OAAOmkB,GAAYC,OAGpBC,WACC,IAAKF,GAAYE,KAAM,CAEtB,IADA,IAAMrkB,KACGukB,EAAa,EAAGA,EA9CP,EA8CkCA,IAAc,CACjE,IAAM5R,EAAU,IAAIF,aAhDF,QAiDlBzS,EAAOukB,GAAc5R,EAErB,IAAI8R,OAAE,EAAEC,OAAE,EAAEC,OAAE,EAAEC,OAAE,EAAEC,OAAE,EAAEC,OAAE,EAAEC,OAAE,EAC9BN,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,EAAK,EACnC,IAAK,IAAI90B,EAAI,EAAGA,EArDE,OAqDiBA,IAAK,CACvC,IAAMq0B,EAAwB,EAAhBxvB,KAAKovB,SAAe,EAClCO,EAAK,OAAUA,EAAa,SAARH,EACpBI,EAAK,OAAUA,EAAa,SAARJ,EACpBK,EAAK,KAAUA,EAAa,QAARL,EACpBM,EAAK,MAAUA,EAAa,SAARN,EACpBO,EAAK,IAAUA,EAAa,SAARP,EACpBQ,GAAM,MAASA,EAAa,QAARR,EACpB3R,EAAQ1iB,GAAKw0B,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,EAAa,MAART,EAChD3R,EAAQ1iB,IAAM,IACd80B,EAAa,QAART,GAGPH,GAAYE,MAAO,IAAIvT,IAAkBkB,UAAUhS,GAEpD,OAAOmkB,GAAYE,MAGpBC,YACC,IAAKH,GAAYG,MAAO,CAEvB,IADA,IAAMtkB,KACGukB,EAAa,EAAGA,EAzEP,EAyEkCA,IAAc,CACjE,IAAM5R,EAAU,IAAIF,aA3EF,QA4ElBzS,EAAOukB,GAAc5R,EACrB,IAAK,IAAI1iB,EAAI,EAAGA,EA7EE,OA6EiBA,IAClC0iB,EAAQ1iB,GAAqB,EAAhB6E,KAAKovB,SAAe,EAGnCC,GAAYG,OAAQ,IAAIxT,IAAkBkB,UAAUhS,GAErD,OAAOmkB,GAAYG,oVCzNrBU,GAAA,SAAAntB,GAqBC,SAAAotB,IAAA,IAAA3wB,EAECuD,EAAAzH,KAAAP,KAAM0G,EAAqB0uB,EAAOpzB,cAAeI,WAAY,QAAS,YAAUpC,KApBjFyE,EAAA9D,KAAO,SAKE8D,EAAA4wB,UAAoB,EAKnB5wB,EAAA6wB,gBAAsC7wB,EAAKkH,QAAQuC,uBACpDzJ,EAAAmb,OAAqBnb,EAAK6wB,gBAGzB7wB,EAAAoa,mBAAqBpa,EAAK6wB,iBAQnC,IAAM/rB,EAAU7C,EAAqB0uB,EAAOpzB,cAAeI,WAAY,QAAS,iBAEhFqC,EAAK6wB,gBAAgB5kB,MAAM,GAC3BjM,EAAKuW,MAAQvW,EAAKsW,OAAS,IAAIL,IAC9B/O,QAASlH,EAAKkH,QACduP,QAAS3R,EAAQ2R,QACjBhR,MAAOzF,EAAK6wB,gBAAgB1P,OAC5B3T,MAAO1I,EAAQ0I,MACf7Q,MAAOmI,EAAQnI,UAyHlB,OA1JwDm0B,GAAAH,EAAAptB,GAqChDotB,EAAApzB,YAAP,WACC,OAAOlB,OAAOwF,OAAOiY,GAAcvc,eAClCuO,aAAc,EACdC,iBAAkB,WAClBkO,sBAAuB,WACvBxD,SAAS,EACTnN,eAAgB,EAChBE,gBAAiB,EACjBgE,MAAO,SACP7Q,MAAO,KAITg0B,EAAA3zB,UAAAud,QAAA,SAAQC,EAAwBC,EAAuBC,GAEtD,YAF+B,IAAAD,MAAA,QAAuB,IAAAC,MAAA,GACtDqW,GAAcx1B,KAAMif,EAAaC,EAAWC,GACrCnf,MAGRo1B,EAAA3zB,UAAAuB,QAAA,WAGC,OAFAgF,EAAAvG,UAAMuB,QAAOzC,KAAAP,MACbA,KAAK+a,OAAO/X,UACLhD,MASRo1B,EAAA3zB,UAAA+Y,eAAA,SAAepZ,EAAawI,GAE3B,OADA5J,KAAK+a,OAAOP,eAAepZ,EAAOwI,GAC3B5J,MAERo1B,EAAA3zB,UAAA2Z,eAAA,SAAexR,GACd,OAAO5J,KAAK+a,OAAOK,eAAexR,IAEnCwrB,EAAA3zB,UAAAgb,aAAA,SAAa7S,GAEZ,OADA5J,KAAK+a,OAAO0B,aAAa7S,GAClB5J,MAERo1B,EAAA3zB,UAAAmb,wBAAA,SAAwBxb,EAAawI,GAEpC,OADA5J,KAAK+a,OAAO6B,wBAAwBxb,EAAOwI,GACpC5J,MAERo1B,EAAA3zB,UAAAob,6BAAA,SAA6Bzb,EAAawI,GAEzC,OADA5J,KAAK+a,OAAO8B,6BAA6Bzb,EAAOwI,GACzC5J,MAERo1B,EAAA3zB,UAAAqb,kBAAA,SAAkB1b,EAAa2b,EAAgBzR,GAE9C,OADAtL,KAAK+a,OAAO+B,kBAAkB1b,EAAO2b,EAAUzR,GACxCtL,MAERo1B,EAAA3zB,UAAAub,aAAA,SAAa5b,EAAa2b,EAAgBzR,GAEzC,OADAtL,KAAK+a,OAAOiC,aAAa5b,EAAO2b,EAAUzR,GACnCtL,MAERo1B,EAAA3zB,UAAAwb,aAAA,SAAa7b,EAAa2b,EAAgBzR,GAEzC,OADAtL,KAAK+a,OAAOkC,aAAa7b,EAAO2b,EAAUzR,GACnCtL,MAERo1B,EAAA3zB,UAAAyb,+BAAA,SAA+B9b,EAAawI,EAAYmT,GAEvD,OADA/c,KAAK+a,OAAOmC,+BAA+B9b,EAAOwI,EAAMmT,GACjD/c,MAERo1B,EAAA3zB,UAAA2b,gBAAA,SAAgBhc,EAAakK,EAAiB6R,GAE7C,OADAnd,KAAK+a,OAAOqC,gBAAgBhc,EAAOkK,EAAW6R,GACvCnd,MAERo1B,EAAA3zB,UAAA4b,oBAAA,SAAoBC,EAAgBhS,EAAiBiS,EAAgBC,GAEpE,OADAxd,KAAK+a,OAAOsC,oBAAoBC,EAAQhS,EAAWiS,EAAUC,GACtDxd,MAERo1B,EAAA3zB,UAAA6Z,sBAAA,SAAsB1R,GAErB,OADA5J,KAAK+a,OAAOO,sBAAsB1R,GAC3B5J,MAERo1B,EAAA3zB,UAAAkb,oBAAA,SAAoB/S,GAEnB,OADA5J,KAAK+a,OAAO4B,oBAAoB/S,GACzB5J,MAERo1B,EAAA3zB,UAAAoc,OAAA,SAAOzc,EAAa2b,EAAgBzR,GAEnC,OADAtL,KAAK+a,OAAO8C,OAAOzc,EAAO2b,EAAUzR,GAC7BtL,MAGRc,OAAAC,eAAIq0B,EAAA3zB,UAAA,aAAJ,WACC,OAAOzB,KAAK+a,OAAO3Z,WAEpB,SAAUA,GACTpB,KAAK+a,OAAO3Z,MAAQA,mCAGrBN,OAAAC,eAAIq0B,EAAA3zB,UAAA,eAAJ,WACC,OAAOzB,KAAK+a,OAAOG,aAEpB,SAAYA,GACXlb,KAAK+a,OAAOG,QAAUA,mCAGvBpa,OAAAC,eAAIq0B,EAAA3zB,UAAA,aAAJ,WACC,OAAOzB,KAAK+a,OAAO9I,uCAGpBnR,OAAAC,eAAIq0B,EAAA3zB,UAAA,kBAAJ,WACC,OAAOzB,KAAK+a,OAAOH,gBAEpB,SAAeA,GACd5a,KAAK+a,OAAOH,WAAaA,mCAG1B9Z,OAAAC,eAAIq0B,EAAA3zB,UAAA,gBAAJ,WACC,OAAOzB,KAAK+a,OAAOS,0CAEpB1a,OAAAC,eAAIq0B,EAAA3zB,UAAA,gBAAJ,WACC,OAAOzB,KAAK+a,OAAOQ,0CAErB6Z,EA1JA,CAAwD7W,IAsKlD,SAAUiX,GAAc3E,EAAoB5R,EAAwBC,EAAoBC,IACzFF,aAAuBvE,IAASuE,aAAuBnE,YACzDmE,aAAuBkW,IAAUlW,EAAYoW,YAE9CpW,EAAY3D,sBAAsB,GAElC2D,EAAYzE,eAAe,EAAG,GAE1ByE,aAAuBkW,KAC1BlW,EAAYrE,YAAa,IAG3BoE,GAAQ6R,EAAQ5R,EAAaC,EAAWC,mVCtLzCsW,GAAA,SAAAztB,GAyBC,SAAA0tB,IAAA,IAAAjxB,EAECuD,EAAAzH,KAAAP,KAAM0G,EAAqBgvB,EAAmB1zB,cAAeI,WAAY,YAAa,WAASpC,KAzBhGyE,EAAA9D,KAAO,qBAKC8D,EAAAkxB,YAAclxB,EAAKkH,QAAQ6B,mBACzB/I,EAAAoa,mBAAqBpa,EAAK8b,UAAW9b,EAAKkxB,aAoBnD,IAAMpsB,EAAU7C,EAAqBgvB,EAAmB1zB,cAAeI,WAAY,YAAa,gBAEhG4c,GAAQva,EAAKkxB,YAAalxB,EAAK8b,WAE/B9b,EAAKpB,KAAOkG,EAAQlG,KAEpBoB,EAAKmN,UAAY,IAAI8I,IACpB/O,QAASlH,EAAKkH,QACdzB,MAAQzF,EAAKkxB,YAAY/jB,UACzBK,MAAQ,YACR7Q,MAAQqD,EAAKsQ,YAAYxL,EAAQqI,aAGlCnN,EAAKmxB,OAAS,IAAIlb,IACjB/O,QAASlH,EAAKkH,QACdzB,MAAQzF,EAAKkxB,YAAYC,OACzB3jB,MAAQ,QACR7Q,MAAQmI,EAAQqsB,WAyDnB,OAtGwCC,GAAAH,EAAA1tB,GAiDhC0tB,EAAA1zB,YAAP,WACC,OAAOlB,OAAOwF,OAAO6rB,GAAcnwB,eAClC4zB,OAAQ,EACRhkB,UAAW,IACXvO,KAAM,UAQRqyB,EAAAj0B,UAAAiP,MAAA,SAAM9G,GACL5J,KAAKiC,IAAI,QAAS2H,GAClB,IAAMkS,EAAe9b,KAAK6U,UAAUjL,GAGpC,OAFA5J,KAAK+yB,WAAWjX,GAChB9b,KAAK21B,YAAYjlB,MAAMoL,GAChB9b,MAGE01B,EAAAj0B,UAAA4xB,YAAV,SAAsBzpB,GACrB5J,KAAK21B,YAAY5N,KAAKne,IAOvB8rB,EAAAj0B,UAAAq0B,gBAAA,SAAgBC,GAEf,OADA/1B,KAAK21B,YAAYG,gBAAgBC,GAC1B/1B,MAMRc,OAAAC,eAAI20B,EAAAj0B,UAAA,YAAJ,WACC,OAAOzB,KAAK21B,YAAYtyB,UAEzB,SAASA,GACRrD,KAAK21B,YAAYtyB,KAAOA,mCAMzBqyB,EAAAj0B,UAAAuB,QAAA,WAKC,OAJAgF,EAAAvG,UAAMuB,QAAOzC,KAAAP,MACbA,KAAK21B,YAAY9kB,aACjB7Q,KAAK4R,UAAU5O,UACfhD,KAAK41B,OAAO5yB,UACLhD,MAET01B,EAtGA,CAAwCvD,gVCDxC6D,GAAA,SAAAhuB,GAgDC,SAAAiuB,IAAA,IAAAxxB,EAECuD,EAAAzH,KAAAP,KAAM0G,EAAqBuvB,EAAWj0B,cAAeI,WAAY,YAAa,WAASpC,KAhDxFyE,EAAA9D,KAAO,aAKC8D,EAAAkxB,YAAyC,KA4ChD,IAAMpsB,EAAU7C,EAAqBuvB,EAAWj0B,cAAeI,WAAY,YAAa,gBAExFqC,EAAKmN,UAAY,IAAIujB,IACpBxpB,QAASlH,EAAKkH,QACdsG,MAAO,YACP7Q,MAAOmI,EAAQqI,YAEhBuM,GAAS1Z,EAAM,aAEfA,EAAKmxB,OAAS,IAAIT,IACjBxpB,QAASlH,EAAKkH,QACdsG,MAAO,QACP7Q,MAAOmI,EAAQqsB,SAEhBzX,GAAS1Z,EAAM,UAEfA,EAAKyxB,UAAY3sB,EAAQ4sB,SACzB1xB,EAAK2xB,cAAgB7sB,EAAQ8sB,aAC7B5xB,EAAK6xB,OAAS/sB,EAAQgtB,MACtB9xB,EAAKjB,MAAQ+F,EAAQlG,KAEjBkG,EAAQ8sB,cAAiC,WAAjB9sB,EAAQlG,OACnCoB,EAAKjB,MAAQiB,EAAK+xB,SAAWjtB,EAAQ8sB,aAAa/zB,YAEnDmC,EAAK8xB,MAAQ9xB,EAAK6xB,SAoVpB,OA/ZgCG,GAAAR,EAAAjuB,GA8ExBiuB,EAAAj0B,YAAP,WACC,OAAOlB,OAAOwF,OAAO6qB,GAAOnvB,eAC3B4zB,OAAQ,EACRhkB,UAAW,IACXykB,aAAc,EACdF,YACAI,MAAO,EACPlzB,KAAM,UAOE4yB,EAAAx0B,UAAAowB,OAAV,SAAiBjoB,GAChB5J,KAAKiC,IAAI,QAAS2H,GAElB,IAAM8sB,EAAa,IAAIjB,IACtB9pB,QAAS3L,KAAK2L,UAEf3L,KAAK21B,YAAce,EACf12B,KAAK22B,MACR32B,KAAK21B,YAAYG,gBAAgB91B,KAAK22B,OAEtC32B,KAAK21B,YAAYtyB,KAAOrD,KAAKwD,MAG9BxD,KAAK21B,YAAY3W,QAAQhf,KAAK4f,QAC9B5f,KAAK4R,UAAUoN,QAAQhf,KAAK21B,YAAY/jB,WACxC5R,KAAK41B,OAAO5W,QAAQhf,KAAK21B,YAAYC,QAGrChsB,EAAO5J,KAAK6U,UAAUjL,GACtB5J,KAAK21B,YAAYjlB,MAAM9G,IAMdqsB,EAAAx0B,UAAAqwB,MAAV,SAAgBloB,GACf5J,KAAKiC,IAAI,OAAQ2H,GACb5J,KAAK21B,cACR/rB,EAAO5J,KAAK6U,UAAUjL,GACtB5J,KAAK21B,YAAY5N,KAAKne,KAQxBqsB,EAAAx0B,UAAAkwB,QAAA,SAAQ/nB,GAKP,OAJI5J,KAAK21B,aACR31B,KAAK21B,YAAYzC,aAElBlzB,KAAK2nB,OAAOrd,OAAOtK,KAAK6U,UAAUjL,IAC3B5J,MAcRi2B,EAAAx0B,UAAAm1B,cAAA,WAEC,OADA52B,KAAK2L,QAAQ8I,UAAUmc,WAAW5wB,KAAK4R,WAChC5R,MAORi2B,EAAAx0B,UAAAo1B,gBAAA,WAEC,OADA72B,KAAK2L,QAAQ8I,UAAUwc,aAAajxB,KAAK4R,WAClC5R,MAyBRc,OAAAC,eAAIk1B,EAAAx0B,UAAA,YAAJ,WACC,OAAOzB,KAAKwD,WAEb,SAASH,GACR,IAAMyzB,GAA4E,KAA7D,OAAQ,SAAU,WAAY,YAAYzvB,QAAQhE,GACvE,GAAoB,IAAhBrD,KAAKs2B,QAAgBQ,EACxB92B,KAAK22B,WAAQxtB,EACbnJ,KAAKo2B,cAAgB,EAEI,OAArBp2B,KAAK21B,cAER31B,KAAK21B,YAAYtyB,KAAOA,OAEnB,CACA,IAAAkD,EAAAvG,KAAA+2B,kBAAA1zB,EAAArD,KAAAs2B,QAACznB,EAAAtI,EAAA,GAAMuI,EAAAvI,EAAA,GACPwvB,EAAe/1B,KAAK2L,QAAQiD,mBAAmBC,EAAMC,GAC3D9O,KAAK22B,MAAQZ,EACY,OAArB/1B,KAAK21B,aACR31B,KAAK21B,YAAYG,gBAAgB91B,KAAK22B,OAGxC32B,KAAKwD,MAAQH,mCAUdvC,OAAAC,eAAIk1B,EAAAx0B,UAAA,gBAAJ,WACC,OAAOzB,KAAKwD,MAAMugB,QAAQ/jB,KAAKq2B,aAAc,SAE9C,SAAaG,GACRx2B,KAAKq2B,cAA+B,WAAfr2B,KAAKwD,OAAmC,WAAbgzB,EACnDx2B,KAAKqD,KAAOmzB,EAAWx2B,KAAKq2B,aAE5Br2B,KAAKqD,KAAOmzB,mCAed11B,OAAAC,eAAIk1B,EAAAx0B,UAAA,oBAAJ,WACC,OAAOzB,KAAKo2B,mBAEb,SAAiBz0B,GAChB,IAAI0B,EAAOrD,KAAKwD,MACVwzB,EAAU,yCAAyCC,KAAKj3B,KAAKwD,OAC/DwzB,IACH3zB,EAAO2zB,EAAQ,IAEG,WAAfh3B,KAAKwD,QAEPxD,KAAKqD,KADI,IAAN1B,EACS0B,EAEAA,EAAO1B,EAAEW,6CAUxB2zB,EAAAx0B,UAAAP,IAAA,WACC,IAAMoc,EAAStV,EAAAvG,UAAMP,IAAGX,KAAAP,MAIxB,MAHoB,WAAhBsd,EAAOja,aACHia,EAAO6Y,SAER7Y,GASA2Y,EAAAx0B,UAAAs1B,kBAAR,SAA0B1zB,EAA0BkzB,GACnD,IACIW,EAAmBC,KAEjBtoB,EAAO,IAAI+T,aAAasU,GACxBpoB,EAAO,IAAI8T,aAAasU,GAE1Bb,EAAe,EACnB,GAAa,WAAThzB,EACHgzB,EAAer2B,KAAKk2B,UAAU7zB,OAAS,EACvCrC,KAAKo2B,cAAgBp2B,KAAKk2B,UAAU7zB,OACpC60B,EAAmBb,MACb,CACN,IAAMW,EAAU,yCAAyCC,KAAK5zB,GAC1D2zB,GACHX,EAAevjB,SAASkkB,EAAQ,GAAI,IAAM,EAC1Ch3B,KAAKo2B,cAAgBtjB,SAASkkB,EAAQ,GAAI,IAC1C3zB,EAAO2zB,EAAQ,GAEfE,EADAb,EAAepxB,KAAKC,IAAImxB,EAAc,IAGtCr2B,KAAKo2B,cAAgB,EAEtBp2B,KAAKk2B,aAIN,IAAK,IAAI70B,EAAI,EAAGA,EAAI61B,IAAoB71B,EAAG,CAC1C,IAAM+1B,EAAW,GAAK/1B,EAAI4D,KAAK6qB,IAC3BpW,OAAC,EACL,OAAQrW,GACP,IAAK,OACJqW,EAAKrY,GAAKg1B,EAAgB,EAAI,EAC9Br2B,KAAKk2B,UAAU70B,EAAI,GAAKqY,EACxB,MACD,IAAK,SACJA,EAAS,EAAJrY,EAAS,EAAI+1B,EAAW,EAC7Bp3B,KAAKk2B,UAAU70B,EAAI,GAAKqY,EACxB,MACD,IAAK,WACJA,EAAI0d,GAAiB,EAAJ/1B,EAAS,GAAK,GAC/BrB,KAAKk2B,UAAU70B,EAAI,GAAKqY,EACxB,MACD,IAAK,WAEHA,EADO,EAAJrY,EACM+1B,EAAWA,EAAhB,GAAgC/1B,EAAI,GAAM,EAAK,GAAM,EAAI,GAEzD,EAELrB,KAAKk2B,UAAU70B,EAAI,GAAKqY,EACxB,MACD,IAAK,SACJA,EAAI1Z,KAAKk2B,UAAU70B,EAAI,GACvB,MACD,QACC,MAAM,IAAIg2B,UAAU,6BAA+Bh0B,GAE3C,IAANqW,GACH7K,EAAKxN,IAAMqY,EAAIzU,KAAK4qB,IAAI0G,EAAQl1B,GAChCyN,EAAKzN,GAAKqY,EAAIzU,KAAKqyB,IAAIf,EAAQl1B,KAE/BwN,EAAKxN,GAAK,EACVyN,EAAKzN,GAAK,GAGZ,OAAQwN,EAAMC,IAMPmnB,EAAAx0B,UAAA81B,YAAR,SAAoB1oB,EAAoBC,EAAoBynB,GAG3D,IAFA,IAAIiB,EAAM,EACJzuB,EAAM8F,EAAKxM,OACRjC,EAAI,EAAGA,EAAI2I,EAAK3I,IACxBo3B,GAAO3oB,EAAKzO,GAAK6E,KAAKqyB,IAAIl3B,EAAIm2B,GAASznB,EAAK1O,GAAK6E,KAAK4qB,IAAIzvB,EAAIm2B,GAE/D,OAAOiB,GAMEvB,EAAAx0B,UAAAg2B,iBAAV,WAKC,IAJM,IAAAlxB,EAAAvG,KAAA+2B,kBAAA/2B,KAAAwD,MAAA,GAACqL,EAAAtI,EAAA,GAAMuI,EAAAvI,EAAA,GACTiV,EAAW,EACTkc,EAAkB,EAAVzyB,KAAK6qB,GAEV1vB,EAAI,EAAGA,EAAI,EAAGA,IACtBob,EAAWvW,KAAKC,IAAIlF,KAAKu3B,YAAY1oB,EAAMC,EAAO1O,EAAI,EAAKs3B,GAAQlc,GAEpE,OAAQxb,KAAKu3B,YAAY1oB,EAAMC,EAAM9O,KAAKs2B,QAAU9a,GAarD1a,OAAAC,eAAIk1B,EAAAx0B,UAAA,gBAAJ,WACC,OAAOzB,KAAKk2B,eAEb,SAAaC,GACZn2B,KAAKk2B,UAAYC,EACbA,EAAS9zB,SACZrC,KAAKqD,KAAO,2CASdvC,OAAAC,eAAIk1B,EAAAx0B,UAAA,aAAJ,WACC,OAAOzB,KAAKs2B,QAAU,IAAMrxB,KAAK6qB,SAElC,SAAUyG,GACTv2B,KAAKs2B,OAASC,EAAQtxB,KAAK6qB,GAAK,IAEhC9vB,KAAKqD,KAAOrD,KAAKwD,uCAMlByyB,EAAAx0B,UAAAuB,QAAA,WAQC,OAPAgF,EAAAvG,UAAMuB,QAAOzC,KAAAP,MACY,OAArBA,KAAK21B,aACR31B,KAAK21B,YAAY3yB,UAElBhD,KAAK22B,WAAQxtB,EACbnJ,KAAK4R,UAAU5O,UACfhD,KAAK41B,OAAO5yB,UACLhD,MAETi2B,EA/ZA,CAAgC9E,gVCbhCwG,GAAA,SAAA3vB,GAGC,SAAA4vB,WACC5vB,EAAAzH,KAAAP,KAAMc,OAAOwF,OAAOI,EAAqBkxB,EAAe51B,cAAeI,WAAY,eAAapC,KAOlG,OAXmF63B,GAAAD,EAAA5vB,GAOlF4vB,EAAAn2B,UAAAud,QAAA,SAAQC,EAAwBC,EAAuBC,GAEtD,YAF+B,IAAAD,MAAA,QAAuB,IAAAC,MAAA,GACtDqW,GAAcx1B,KAAMif,EAAaC,EAAWC,GACrCnf,MAET43B,EAXA,CAAmFrZ,gVCgCnFuZ,GAAA,SAAA9vB,GAuBC,SAAA+vB,IAAA,IAAAtzB,EACCuD,EAAAzH,KAAAP,KAAMc,OAAOwF,OAAOI,EAAqBqxB,EAAW/1B,cAAeI,WAAY,UAAW,cAAYpC,KAtBvGyE,EAAA9D,KAAO,aAKC8D,EAAAuzB,QAA0BvzB,EAAKkH,QAAQsD,mBAK/CxK,EAAAuW,MAAQvW,EAAKuzB,QAKbvzB,EAAAmb,OAASnb,EAAKuzB,QAEJvzB,EAAAoa,mBAAqBpa,EAAKuzB,SAMnC,IAAMzuB,EAAU7C,EAAqBqxB,EAAW/1B,cAAeI,WAAY,UAAW,kBAElFuD,EAAQ4D,EAAQ0uB,UAAY1uB,EAAQ0uB,mBAAmBrV,aAC1Dne,EAAKouB,MAAQjQ,aAAa5b,KAAKuC,EAAQ0uB,S1ChDnB,mB0CiDC1uB,EAAQ0uB,SAC7BxzB,EAAKyzB,OAAO3uB,EAAQ0uB,QAAS1uB,EAAQlH,UAoExC,OAlGgC81B,GAAAJ,EAAA/vB,GAkCxB+vB,EAAA/1B,YAAP,WACC,OAAOlB,OAAOwF,OAAO6uB,GAAOnzB,eAC3BK,OAAQ,QAiBV01B,EAAAt2B,UAAAy2B,OAAA,SAAOD,EAA8B51B,QAAA,IAAAA,MAAA,MAEpC,IADA,IAAM+f,EAAQ,IAAIQ,aAAavgB,GACtBjC,EAAI,EAAG2I,EAAM1G,EAAQjC,EAAI2I,EAAK3I,IAAK,CAC3C,IAAMg4B,EAAch4B,GAAK2I,EAAM,GAAM,EAAI,EACzCqZ,EAAMhiB,GAAK63B,EAAQG,EAAYh4B,GAGhC,OADAJ,KAAK6yB,MAAQzQ,EACNpiB,MAQRc,OAAAC,eAAIg3B,EAAAt2B,UAAA,aAAJ,WACC,OAAOzB,KAAKg4B,QAAQnF,WAGrB,SAAUoF,GACTj4B,KAAKg4B,QAAQnF,MAAQoF,mCAOtBn3B,OAAAC,eAAIg3B,EAAAt2B,UAAA,kBAAJ,WACC,OAAOzB,KAAKg4B,QAAQK,gBAGrB,SAAeC,GACd,IAAMC,GAAoB,OAAQ,KAAM,MAAMpxB,KAAK,SAAAiX,GAAO,OAAAA,EAAIoa,SAASF,KACvEt4B,KAAK4C,OAAO21B,EAAkB,qDAC9Bv4B,KAAKg4B,QAAQK,WAAaC,mCAM3BP,EAAAt2B,UAAAuB,QAAA,WAGC,OAFAgF,EAAAvG,UAAMuB,QAAOzC,KAAAP,MACbA,KAAKg4B,QAAQnnB,aACN7Q,MAET+3B,EAlGA,CAAgCJ,gVC3BhCc,GAAA,SAAAzwB,GAAA,SAAA0wB,IAAA,IAAAj0B,EAAA,OAAAuD,KAAArF,MAAA3C,KAAAoC,YAAApC,YAECyE,EAAA9D,KAAO,cAKC8D,EAAAk0B,MAAQ,IAAIb,IACnBnsB,QAASlH,EAAKkH,QACdssB,QAAS,SAAAW,GAAK,OAACA,EAAI,GAAK,KAEfn0B,EAAAoa,mBAAqBpa,EAAKk0B,OAKpCl0B,EAAAuW,MAAQvW,EAAKk0B,MAKbl0B,EAAAmb,OAASnb,EAAKk0B,QAUf,OA/BiCE,GAAAH,EAAA1wB,GA0BhC0wB,EAAAj3B,UAAAuB,QAAA,WAGC,OAFAgF,EAAAvG,UAAMuB,QAAOzC,KAAAP,MACbA,KAAK24B,MAAM31B,UACJhD,MAET04B,EA/BA,CAAiCf,gVCWjCmB,GAAA,SAAA9wB,GAgCC,SAAA+wB,IAAA,IAAAt0B,EACCuD,EAAAzH,KAAAP,KAAMc,OAAOwF,OAAOI,EAAqBqyB,EAAS/2B,cAAeI,WAAY,aAAWpC,KA/BzFyE,EAAA9D,KAAO,WAKE8D,EAAA4wB,UAAW,EAKZ5wB,EAAAu0B,MAAc,IAAI3Y,IAAO1U,QAAUlH,EAAKkH,UAKhDlH,EAAAuW,MAAQvW,EAAKu0B,MAKbv0B,EAAAmb,OAASnb,EAAKu0B,MAYb,IAAMzvB,EAAU7C,EAAqBqyB,EAAS/2B,cAAeI,WAAY,iBAEzEqC,EAAKw0B,OAASx0B,EAAKsW,OAAStW,EAAKu0B,MAAMpd,KACvCnX,EAAKw0B,OAAOze,eAAejR,EAAQnI,MAAO,KAiB5C,OAtD8B83B,GAAAH,EAAA/wB,GAwCtB+wB,EAAA/2B,YAAP,WACC,OAAOlB,OAAOwF,OAAO6uB,GAAOnzB,eAC3BZ,MAAO,KAOT23B,EAAAt3B,UAAAuB,QAAA,WAGC,OAFAgF,EAAAvG,UAAMuB,QAAOzC,KAAAP,MACbA,KAAKg5B,MAAMh2B,UACJhD,MAET+4B,EAtDA,CAA8B5D,gVCW9BgE,GAAA,SAAAnxB,GAmDC,SAAAoxB,IAAA,IAAA30B,EAECuD,EAAAzH,KAAAP,KAAM0G,EAAqB0yB,EAAap3B,cAAeI,WAAY,YAAa,OAAQ,qBAAmBpC,KAnD5GyE,EAAA9D,KAAO,eAKC8D,EAAA40B,SAAuB,IAAIrD,IAAYrqB,QAAUlH,EAAKkH,UAKrDlH,EAAAmN,UAA+BnN,EAAK40B,SAASznB,UAK7CnN,EAAAmxB,OAAwBnxB,EAAK40B,SAASzD,OAKvCnxB,EAAA60B,WAAa,IAAItD,IAAarqB,QAAUlH,EAAKkH,UAK7ClH,EAAA80B,iBAAmB,IAAId,IAAc9sB,QAASlH,EAAKkH,UAUlDlH,EAAA+0B,YAAgC,IAAIV,IAC5CntB,QAASlH,EAAKkH,QACdsG,MAAO,aAMAxN,EAAAg1B,gBAAkB,IAAIpZ,IAC7B1U,QAASlH,EAAKkH,UAQd,IAAMpC,EAAU7C,EAAqB0yB,EAAap3B,cAAeI,WAAY,YAAa,OAAQ,0BAElGqC,EAAK40B,SAASh2B,KAAOkG,EAAQlG,KAC7BoB,EAAK60B,WAAWj2B,KAAOkG,EAAQmwB,eAC/Bj1B,EAAKmN,UAAU4I,eAAejR,EAAQqI,UAAW,GACjDnN,EAAKmxB,OAAOpb,eAAejR,EAAQqsB,OAAQ,GAC3CnxB,EAAK+0B,YAAYhf,eAAejR,EAAQiwB,YAAa,GAGrD/0B,EAAKmN,UAAUiO,MAAMpb,EAAK+0B,YAAa/0B,EAAK60B,WAAW1nB,WACvDnN,EAAK60B,WAAWzZ,MAAMpb,EAAK80B,iBAAkB90B,EAAKg1B,gBAAgB7d,MAClEnX,EAAK40B,SAASxZ,MAAMpb,EAAKg1B,gBAAiBh1B,EAAKmb,QAE/Cnb,EAAK8xB,MAAQhtB,EAAQgtB,MAErBpY,GAAS1Z,GAAO,YAAa,SAAU,kBA8HzC,OAnMkCk1B,GAAAP,EAAApxB,GAwE1BoxB,EAAAp3B,YAAP,WACC,OAAOlB,OAAOwF,OAAO0vB,GAAWh0B,eAC/Bw3B,YAAa,EACbE,eAAgB,YAORN,EAAA33B,UAAAowB,OAAV,SAAiBjoB,GAChB5J,KAAKs5B,WAAW5oB,MAAM9G,GACtB5J,KAAKq5B,SAAS3oB,MAAM9G,IAMXwvB,EAAA33B,UAAAqwB,MAAV,SAAgBloB,GACf5J,KAAKs5B,WAAWvR,KAAKne,GACrB5J,KAAKq5B,SAAStR,KAAKne,IAMpBwvB,EAAA33B,UAAAkwB,QAAA,SAAQ/nB,GAGP,OAFA5J,KAAKs5B,WAAW3H,QAAQ/nB,GACxB5J,KAAKq5B,SAAS1H,QAAQ/nB,GACf5J,MAMRc,OAAAC,eAAIq4B,EAAA33B,UAAA,YAAJ,WACC,OAAOzB,KAAKq5B,SAASh2B,UAEtB,SAASA,GACRrD,KAAKq5B,SAASh2B,KAAOA,mCAUtBvC,OAAAC,eAAIq4B,EAAA33B,UAAA,gBAAJ,WACC,OAAOzB,KAAKq5B,SAAS7C,cAEtB,SAAaA,GACZx2B,KAAKq5B,SAAS7C,SAAWA,mCAS1B11B,OAAAC,eAAIq4B,EAAA33B,UAAA,oBAAJ,WACC,OAAOzB,KAAKq5B,SAAShD,kBAGtB,SAAiBA,GAChBr2B,KAAKq5B,SAAShD,aAAeA,mCAM9Bv1B,OAAAC,eAAIq4B,EAAA33B,UAAA,sBAAJ,WACC,OAAOzB,KAAKs5B,WAAWj2B,UAGxB,SAAmBA,GAClBrD,KAAKs5B,WAAWj2B,KAAOA,mCAMxBvC,OAAAC,eAAIq4B,EAAA33B,UAAA,aAAJ,WACC,OAAOzB,KAAKq5B,SAAS9C,WAEtB,SAAUA,GACTv2B,KAAKq5B,SAAS9C,MAAQA,EACtBv2B,KAAKs5B,WAAW/C,MAAQA,mCAazBz1B,OAAAC,eAAIq4B,EAAA33B,UAAA,gBAAJ,WACC,OAAOzB,KAAKq5B,SAASlD,cAEtB,SAAaA,GACZn2B,KAAKq5B,SAASlD,SAAWA,mCAM1BiD,EAAA33B,UAAAuB,QAAA,WASC,OARAgF,EAAAvG,UAAMuB,QAAOzC,KAAAP,MACbA,KAAK4R,UAAU5O,UACfhD,KAAK41B,OAAO5yB,UACZhD,KAAKw5B,YAAYx2B,UACjBhD,KAAKq5B,SAASr2B,UACdhD,KAAKs5B,WAAWt2B,UAChBhD,KAAKy5B,gBAAgBz2B,UACrBhD,KAAKu5B,iBAAiBv2B,UACfhD,MAETo5B,EAnMA,CAAkCjI,gVCFlCyI,GAAA,SAAA5xB,GA+DC,SAAA6xB,IAAA,IAAAp1B,EAECuD,EAAAzH,KAAAP,KAAM0G,EAAqBmzB,EAAa73B,cAAeI,WAAY,YAAa,OAAQ,qBAAmBpC,KA/D5GyE,EAAA9D,KAAO,eAKC8D,EAAA40B,SAAuB,IAAIrD,IAClCrqB,QAAUlH,EAAKkH,QACfiG,UAAW,IAMHnN,EAAAmN,UAA+B,IAAIujB,IAC3CxpB,QAASlH,EAAKkH,QACdsG,MAAO,cAMCxN,EAAAmxB,OAAwBnxB,EAAK40B,SAASzD,OAKvCnxB,EAAA60B,WAAa,IAAItD,IAAarqB,QAAUlH,EAAKkH,UAU5ClH,EAAA+0B,YAAgC,IAAIV,IAC5CntB,QAASlH,EAAKkH,QACdsG,MAAO,aAQCxN,EAAAq1B,gBAAoC,IAAIhB,IAChDntB,QAASlH,EAAKkH,QACdsG,MAAO,aAMAxN,EAAAg1B,gBAAkB,IAAIpZ,IAC7B1U,QAASlH,EAAKkH,QACdiQ,KAAM,IAQN,IAAMrS,EAAU7C,EAAqBmzB,EAAa73B,cAAeI,WAAY,YAAa,OAAQ,0BAElGqC,EAAK40B,SAASh2B,KAAOkG,EAAQlG,KAC7BoB,EAAK60B,WAAWj2B,KAAOkG,EAAQmwB,eAC/Bj1B,EAAKmN,UAAU4I,eAAejR,EAAQqI,UAAW,GACjDnN,EAAKmxB,OAAOpb,eAAejR,EAAQqsB,OAAQ,GAC3CnxB,EAAK+0B,YAAYhf,eAAejR,EAAQiwB,YAAa,GACrD/0B,EAAKq1B,gBAAgBtf,eAAejR,EAAQuwB,gBAAiB,GAG7Dr1B,EAAKmN,UAAUoN,QAAQva,EAAK40B,SAASznB,WACrCnN,EAAKmN,UAAUiO,MAAMpb,EAAK+0B,YAAa/0B,EAAK60B,WAAW1nB,WACvDnN,EAAKmN,UAAUiO,MAAMpb,EAAKq1B,gBAAiBr1B,EAAKg1B,iBAChDh1B,EAAK60B,WAAWta,QAAQva,EAAKg1B,gBAAgB7d,MAC7CnX,EAAKg1B,gBAAgBza,QAAQva,EAAK40B,SAASznB,WAC3CnN,EAAK40B,SAASra,QAAQva,EAAKmb,QAC3Bnb,EAAKmxB,OAAO5W,QAAQva,EAAK60B,WAAW1D,QAEpCnxB,EAAK8xB,MAAQhtB,EAAQgtB,MAErBpY,GAAS1Z,GAAO,kBAAmB,YAAa,SAAU,kBA4H5D,OAlNkCs1B,GAAAF,EAAA7xB,GAyF1B6xB,EAAA73B,YAAP,WACC,OAAOlB,OAAOwF,OAAO0vB,GAAWh0B,eAC/Bw3B,YAAa,EACbM,gBAAiB,EACjBJ,eAAgB,YAORG,EAAAp4B,UAAAowB,OAAV,SAAiBjoB,GAChB5J,KAAKs5B,WAAW5oB,MAAM9G,GACtB5J,KAAKq5B,SAAS3oB,MAAM9G,IAMXiwB,EAAAp4B,UAAAqwB,MAAV,SAAgBloB,GACf5J,KAAKs5B,WAAWvR,KAAKne,GACrB5J,KAAKq5B,SAAStR,KAAKne,IAMpBiwB,EAAAp4B,UAAAkwB,QAAA,SAAQ/nB,GAGP,OAFA5J,KAAKs5B,WAAW3H,QAAQ/nB,GACxB5J,KAAKq5B,SAAS1H,QAAQ/nB,GACf5J,MAMRc,OAAAC,eAAI84B,EAAAp4B,UAAA,YAAJ,WACC,OAAOzB,KAAKq5B,SAASh2B,UAEtB,SAASA,GACRrD,KAAKq5B,SAASh2B,KAAOA,mCAUtBvC,OAAAC,eAAI84B,EAAAp4B,UAAA,gBAAJ,WACC,OAAOzB,KAAKq5B,SAAS7C,cAEtB,SAAaA,GACZx2B,KAAKq5B,SAAS7C,SAAWA,mCAS1B11B,OAAAC,eAAI84B,EAAAp4B,UAAA,oBAAJ,WACC,OAAOzB,KAAKq5B,SAAShD,kBAEtB,SAAiBA,GAChBr2B,KAAKq5B,SAAShD,aAAeA,mCAM9Bv1B,OAAAC,eAAI84B,EAAAp4B,UAAA,sBAAJ,WACC,OAAOzB,KAAKs5B,WAAWj2B,UAExB,SAAmBA,GAClBrD,KAAKs5B,WAAWj2B,KAAOA,mCAMxBvC,OAAAC,eAAI84B,EAAAp4B,UAAA,aAAJ,WACC,OAAOzB,KAAKq5B,SAAS9C,WAEtB,SAAUA,GACTv2B,KAAKq5B,SAAS9C,MAAQA,EACtBv2B,KAAKs5B,WAAW/C,MAAQA,mCAazBz1B,OAAAC,eAAI84B,EAAAp4B,UAAA,gBAAJ,WACC,OAAOzB,KAAKq5B,SAASlD,cAEtB,SAAaA,GACZn2B,KAAKq5B,SAASlD,SAAWA,mCAM1B0D,EAAAp4B,UAAAuB,QAAA,WAQC,OAPAgF,EAAAvG,UAAMuB,QAAOzC,KAAAP,MACbA,KAAK4R,UAAU5O,UACfhD,KAAKw5B,YAAYx2B,UACjBhD,KAAKq5B,SAASr2B,UACdhD,KAAKs5B,WAAWt2B,UAChBhD,KAAKy5B,gBAAgBz2B,UACrBhD,KAAK85B,gBAAgB92B,UACdhD,MAET65B,EAlNA,CAAkC1I,gVCYlC6I,GAAA,SAAAhyB,GAgDC,SAAAiyB,IAAA,IAAAx1B,EAECuD,EAAAzH,KAAAP,KAAM0G,EAAqBuzB,EAAgBj4B,cAAeI,WAAY,YAAa,YAAUpC,KAhD9FyE,EAAA9D,KAAO,kBAKP8D,EAAAy1B,MAA4B,IAAI/E,IAC/BxpB,QAASlH,EAAKkH,QACdsG,MAAO,eAMAxN,EAAA01B,WAAmB,IAAI9Z,IAC9B1U,QAASlH,EAAKkH,QACdiQ,KAAM,IAMCnX,EAAA21B,UAAwB,IAAIpE,IACnCrqB,QAASlH,EAAKkH,QACdtI,KAAO,aAMRoB,EAAAmN,UAA+BnN,EAAK21B,UAAUxoB,UAK9CnN,EAAAmxB,OAAwBnxB,EAAK21B,UAAUxE,OAK/BnxB,EAAA41B,QAAU,IAAIvC,IACrBnsB,QAASlH,EAAKkH,QACdssB,QAAS,SAAA/nB,GAAO,OAAAA,GAAO,GAAK,EAAI,KAQhC,IAAM3G,EAAU7C,EAAqBuzB,EAAgBj4B,cAAeI,WAAY,YAAa,iBAE7FqC,EAAKy1B,MAAM1f,eAAejR,EAAQ2wB,MAAO,GACzCz1B,EAAK21B,UAAUxoB,UAAU4I,eAAejR,EAAQqI,UAAW,GAC3DnN,EAAK21B,UAAUxE,OAAOpb,eAAejR,EAAQqsB,OAAQ,GACrDnxB,EAAK21B,UAAU7D,MAAQhtB,EAAQgtB,MAG/B9xB,EAAK21B,UAAUva,MAAMpb,EAAK41B,QAAS51B,EAAKmb,QACxCnb,EAAKy1B,MAAMra,MAAMpb,EAAK01B,WAAY11B,EAAK41B,SACvClc,GAAS1Z,GAAO,QAAS,YAAa,aA8FxC,OA3JqC61B,GAAAL,EAAAjyB,GAgE7BiyB,EAAAj4B,YAAP,WACC,OAAOlB,OAAOwF,OAAO6qB,GAAOnvB,eAC3B4zB,OAAQ,EACRhkB,UAAW,IACX2kB,MAAO,EACPlzB,KAAM,QACN62B,MAAO,MAOCD,EAAAx4B,UAAAowB,OAAV,SAAiBjoB,GAChBA,EAAO5J,KAAK6U,UAAUjL,GACtB5J,KAAKo6B,UAAU1pB,MAAM9G,GACrB5J,KAAKm6B,WAAWve,KAAKpB,eAAe,EAAG5Q,IAM9BqwB,EAAAx4B,UAAAqwB,MAAV,SAAgBloB,GACfA,EAAO5J,KAAK6U,UAAUjL,GACtB5J,KAAKo6B,UAAUrS,KAAKne,GAGpB5J,KAAKm6B,WAAWve,KAAKN,sBAAsB1R,GAC3C5J,KAAKm6B,WAAWve,KAAKpB,eAAe,EAAG5Q,IAMxCqwB,EAAAx4B,UAAAkwB,QAAA,SAAQ/nB,GACP,IAAMkS,EAAe9b,KAAK6U,UAAUjL,GAIpC,OAHA5J,KAAKo6B,UAAUzI,QAAQ7V,GACvB9b,KAAKm6B,WAAWve,KAAKN,sBAAsBQ,GAC3C9b,KAAKm6B,WAAWve,KAAKpB,eAAe,EAAGsB,GAChC9b,MAMRc,OAAAC,eAAIk5B,EAAAx4B,UAAA,aAAJ,WACC,OAAOzB,KAAKo6B,UAAU7D,WAEvB,SAAUA,GACTv2B,KAAKo6B,UAAU7D,MAAQA,mCAMxBz1B,OAAAC,eAAIk5B,EAAAx4B,UAAA,YAAJ,WACC,MAAO,yCAMRX,OAAAC,eAAIk5B,EAAAx4B,UAAA,gBAAJ,WACC,MAAO,yCAMRX,OAAAC,eAAIk5B,EAAAx4B,UAAA,gBAAJ,WACC,0CAMDX,OAAAC,eAAIk5B,EAAAx4B,UAAA,oBAAJ,WACC,OAAO,mCAMRw4B,EAAAx4B,UAAAuB,QAAA,WAMC,OALAgF,EAAAvG,UAAMuB,QAAOzC,KAAAP,MACbA,KAAKo6B,UAAUp3B,UACfhD,KAAKk6B,MAAMl3B,UACXhD,KAAKm6B,WAAWn3B,UAChBhD,KAAKq6B,QAAQr3B,UACNhD,MAETi6B,EA3JA,CAAqC9I,gVCxBrCoJ,GAAA,SAAAvyB,GAoDC,SAAAwyB,IAAA,IAAA/1B,EAECuD,EAAAzH,KAAAP,KAAM0G,EAAqB8zB,EAAcx4B,cAAeI,WAAY,YAAa,OAAQ,aAAWpC,KApDrGyE,EAAA9D,KAAO,gBAKE8D,EAAAmN,UAA+B,IAAIujB,IAC3CxpB,QAASlH,EAAKkH,QACdsG,MAAO,cAMCxN,EAAAmxB,OAAwB,IAAIT,IACpCxpB,QAASlH,EAAKkH,QACdsG,MAAO,UAMAxN,EAAAg2B,gBAgCP,IAAMlxB,EAAU7C,EAAqB8zB,EAAcx4B,cAAeI,WAAY,YAAa,OAAQ,kBAEnGqC,EAAKmN,UAAU4I,eAAejR,EAAQqI,UAAW,GACjDnN,EAAKmxB,OAAOpb,eAAejR,EAAQqsB,OAAQ,GAE3CnxB,EAAKi2B,QAAUnxB,EAAQoxB,OACvBl2B,EAAKjB,MAAQ+F,EAAQlG,KACrBoB,EAAK6xB,OAAS/sB,EAAQgtB,MACtB9xB,EAAKyxB,UAAY3sB,EAAQ4sB,SACzB1xB,EAAK2xB,cAAgB7sB,EAAQ8sB,aAG7B5xB,EAAKm2B,MAAQrxB,EAAQqxB,MAErBzc,GAAS1Z,GAAO,YAAa,aAgM/B,OArQmCo2B,GAAAL,EAAAxyB,GAwE3BwyB,EAAAx4B,YAAP,WACC,OAAOlB,OAAOwF,OAAO0vB,GAAWh0B,eAC/B44B,MAAQ,EACRD,OAAS,GACTt3B,KAAO,cAOCm3B,EAAA/4B,UAAAowB,OAAV,SAAiBjoB,GAChBA,EAAO5J,KAAK6U,UAAUjL,GACtB5J,KAAK86B,SAAS,SAAAC,GAAO,OAAAA,EAAIrqB,MAAM9G,MAMtB4wB,EAAA/4B,UAAAqwB,MAAV,SAAgBloB,GACfA,EAAO5J,KAAK6U,UAAUjL,GACtB5J,KAAK86B,SAAS,SAAAC,GAAO,OAAAA,EAAIhT,KAAKne,MAM/B4wB,EAAA/4B,UAAAkwB,QAAA,SAAQ/nB,GAGP,OAFAA,EAAO5J,KAAK6U,UAAUjL,GACtB5J,KAAK86B,SAAS,SAAAC,GAAO,OAAAA,EAAIpJ,QAAQ/nB,KAC1B5J,MAMAw6B,EAAA/4B,UAAAq5B,SAAR,SAAiBE,GAChB,IAAK,IAAI56B,EAAI,EAAGA,EAAIJ,KAAKy6B,aAAap4B,OAAQjC,IAC7C46B,EAASh7B,KAAKy6B,aAAar6B,GAAIA,IAOjCU,OAAAC,eAAIy5B,EAAA/4B,UAAA,YAAJ,WACC,OAAOzB,KAAKwD,WAGb,SAASH,GACRrD,KAAKwD,MAAQH,EACbrD,KAAK86B,SAAS,SAAAC,GAAO,OAAAA,EAAI13B,KAAOA,qCASjCvC,OAAAC,eAAIy5B,EAAA/4B,UAAA,cAAJ,WACC,OAAOzB,KAAK06B,aAGb,SAAWC,GAEV,GADA36B,KAAK06B,QAAUC,EACX36B,KAAKy6B,aAAap4B,OAAS,EAAG,CACjC,IAAM44B,GAASN,EAAS,EAClBO,EAAOP,GAAU36B,KAAKy6B,aAAap4B,OAAS,GAClDrC,KAAK86B,SAAS,SAACC,EAAK36B,GAAM,OAAA26B,EAAInF,OAAOx0B,MAAQ65B,EAAQC,EAAO96B,sCAO9DU,OAAAC,eAAIy5B,EAAA/4B,UAAA,aAAJ,WACC,OAAOzB,KAAKy6B,aAAap4B,YAG1B,SAAUu4B,GAET,GADAA,EAAQ31B,KAAKC,IAAI01B,EAAO,GACpB56B,KAAKy6B,aAAap4B,SAAWu4B,EAAO,CAEvC56B,KAAK86B,SAAS,SAAAC,GAAO,OAAAA,EAAI/3B,YACzBhD,KAAKy6B,gBACL,IAAK,IAAIr6B,EAAI,EAAGA,EAAIw6B,EAAOx6B,IAAK,CAC/B,IAAM26B,EAAM,IAAI/E,IACfrqB,QAAU3L,KAAK2L,UAEE,WAAd3L,KAAKqD,KACR03B,EAAI5E,SAAWn2B,KAAKk2B,UAEpB6E,EAAI13B,KAAOrD,KAAKwD,MAEjBu3B,EAAI1E,aAAer2B,KAAKo2B,cACxB2E,EAAIxE,MAAQv2B,KAAKs2B,OAAUl2B,EAAIw6B,EAAS,IACxCG,EAAIlO,OAAOzrB,OAAS,EAAY,IAARw5B,EACxB56B,KAAK4R,UAAUoN,QAAQ+b,EAAInpB,WAC3B5R,KAAK41B,OAAO5W,QAAQ+b,EAAInF,QACxBmF,EAAI/b,QAAQhf,KAAK4f,QACjB5f,KAAKy6B,aAAar6B,GAAK26B,EAGxB/6B,KAAK26B,OAAS36B,KAAK06B,QACA,YAAf16B,KAAKmN,OACRnN,KAAK86B,SAAS,SAAAC,GAAO,OAAAA,EAAIrqB,4CAQ5B5P,OAAAC,eAAIy5B,EAAA/4B,UAAA,aAAJ,WACC,OAAOzB,KAAKs2B,YAEb,SAAUC,GACTv2B,KAAKs2B,OAASC,EACdv2B,KAAK86B,SAAS,SAAAC,GAAO,OAAAA,EAAIxE,MAAQA,qCAUlCz1B,OAAAC,eAAIy5B,EAAA/4B,UAAA,gBAAJ,WACC,OAAOzB,KAAKy6B,aAAa,GAAGjE,cAE7B,SAAaA,GACZx2B,KAAK86B,SAAS,SAAAC,GAAO,OAAAA,EAAIvE,SAAWA,IACpCx2B,KAAKwD,MAAQxD,KAAKy6B,aAAa,GAAGp3B,sCAgBnCvC,OAAAC,eAAIy5B,EAAA/4B,UAAA,gBAAJ,WACC,OAAOzB,KAAKy6B,aAAa,GAAGtE,cAE7B,SAAaA,GACZn2B,KAAKk2B,UAAYC,EACbA,EAAS9zB,SACZrC,KAAKwD,MAAQ,SACbxD,KAAK86B,SAAS,SAAAC,GAAO,OAAAA,EAAI5E,SAAWA,sCAatCr1B,OAAAC,eAAIy5B,EAAA/4B,UAAA,oBAAJ,WACC,OAAOzB,KAAKy6B,aAAa,GAAGpE,kBAE7B,SAAiBA,GAChBr2B,KAAKo2B,cAAgBC,EACrBr2B,KAAK86B,SAAS,SAAAC,GAAO,OAAAA,EAAI1E,aAAeA,IACxCr2B,KAAKwD,MAAQxD,KAAKy6B,aAAa,GAAGp3B,sCAMnCm3B,EAAA/4B,UAAAuB,QAAA,WAKC,OAJAgF,EAAAvG,UAAMuB,QAAOzC,KAAAP,MACbA,KAAK4R,UAAU5O,UACfhD,KAAK41B,OAAO5yB,UACZhD,KAAK86B,SAAS,SAAAC,GAAO,OAAAA,EAAI/3B,YAClBhD,MAETw6B,EArQA,CAAmCrJ,gVCEnCgK,GAAA,SAAAnzB,GA2CC,SAAAozB,IAAA,IAAA32B,EACCuD,EAAAzH,KAAAP,KAAM0G,EAAqB00B,EAAcp5B,cAAeI,WAAY,YAAa,0BAAwBpC,KA1C1GyE,EAAA9D,KAAO,gBAEE8D,EAAA42B,WAAa,MAKd52B,EAAA62B,OAA0B,IAAItB,IAAkBruB,QAASlH,EAAKkH,UAM9DlH,EAAA60B,WAAyB,IAAItD,IAAarqB,QAASlH,EAAKkH,UAMxDlH,EAAA82B,OAAmB,IAAIzC,IAC9BntB,QAASlH,EAAKkH,QACdvK,MAAO,IAMCqD,EAAAmN,UAA+BnN,EAAK60B,WAAW1nB,UAK/CnN,EAAAmxB,OAAwBnxB,EAAK60B,WAAW1D,OAKxCnxB,EAAA+2B,oBAAyC/2B,EAAK62B,OAAO1pB,UAM7D,IAAMrI,EAAU7C,EAAqB00B,EAAcp5B,cAAeI,WAAY,YAAa,+BAI3FqC,EAAK62B,OAAOlB,UAAU/2B,KAAO,OAE7BoB,EAAK62B,OAAO1pB,UAAU4I,eAAejR,EAAQiyB,oBAAqB,GAClE/2B,EAAK60B,WAAW1nB,UAAU4I,eAAejR,EAAQqI,UAAW,GAC5DnN,EAAK60B,WAAW1D,OAAOpb,eAAejR,EAAQqsB,OAAQ,GACtDnxB,EAAK60B,WAAW/C,MAAQhtB,EAAQgtB,MAGhC9xB,EAAK60B,WAAWzZ,MAAMpb,EAAK82B,OAAQ92B,EAAK62B,OAAOpB,OAC/Cz1B,EAAK62B,OAAOtc,QAAQva,EAAKmb,QACzBzB,GAAS1Z,GAAO,sBAAuB,YAAa,aAuFtD,OAlJmCg3B,GAAAL,EAAApzB,GA8D3BozB,EAAAp5B,YAAP,WACC,OAAOlB,OAAOwF,OAAO6qB,GAAOnvB,eAC3B4zB,OAAQ,EACRhkB,UAAW,IACX4pB,oBAAqB,GACrBjF,MAAO,EACPlzB,KAAM,SAME+3B,EAAA35B,UAAAowB,OAAV,SAAiBjoB,GAChBA,EAAO5J,KAAK6U,UAAUjL,GACtB5J,KAAKs5B,WAAW5oB,MAAM9G,GACtB5J,KAAKs7B,OAAO5qB,MAAM9G,IAMTwxB,EAAA35B,UAAAqwB,MAAV,SAAgBloB,GACfA,EAAO5J,KAAK6U,UAAUjL,GACtB5J,KAAKs5B,WAAWvR,KAAKne,GACrB5J,KAAKs7B,OAAOvT,KAAKne,IAMlBwxB,EAAA35B,UAAAkwB,QAAA,SAAQ/nB,GAGP,OAFA5J,KAAKs5B,WAAW3H,QAAQ/nB,GACxB5J,KAAKs7B,OAAO3J,QAAQ/nB,GACb5J,MAMRc,OAAAC,eAAIq6B,EAAA35B,UAAA,YAAJ,WACC,MAAO,uCAMRX,OAAAC,eAAIq6B,EAAA35B,UAAA,gBAAJ,WACC,MAAO,uCAMRX,OAAAC,eAAIq6B,EAAA35B,UAAA,gBAAJ,WACC,0CAMDX,OAAAC,eAAIq6B,EAAA35B,UAAA,oBAAJ,WACC,OAAO,mCAMRX,OAAAC,eAAIq6B,EAAA35B,UAAA,aAAJ,WACC,OAAOzB,KAAKs5B,WAAW/C,WAExB,SAAUA,GACTv2B,KAAKs5B,WAAW/C,MAAQA,mCAMzB6E,EAAA35B,UAAAuB,QAAA,WAKC,OAJAgF,EAAAvG,UAAMuB,QAAOzC,KAAAP,MACbA,KAAKs7B,OAAOt4B,UACZhD,KAAKu7B,OAAOv4B,UACZhD,KAAKs5B,WAAWt2B,UACThD,MAETo7B,EAlJA,CAAmCjK,gVCkD7BuK,IAGLC,GAAIxC,GACJyC,IAAKrB,GACLsB,GAAIjC,GACJlD,WAAYV,GACZ8F,MAAO9B,GACP+B,IAAKZ,IAkBNa,GAAA,SAAAh0B,GAkCC,SAAAi0B,IAAA,IAAAx3B,EAECuD,EAAAzH,KAAAP,KAAM0G,EAAqBu1B,EAAej6B,cAAeI,WAAY,YAAa,WAASpC,KAhC5FyE,EAAA9D,KAAO,iBAKE8D,EAAAmN,UAA+B,IAAIujB,IAC3CxpB,QAASlH,EAAKkH,QACdsG,MAAO,cAMCxN,EAAAmxB,OAAwB,IAAIT,IACpCxpB,QAASlH,EAAKkH,QACdsG,MAAO,UAkBP,IAAM1I,EAAU7C,EAAqBu1B,EAAej6B,cAAeI,WAAY,YAAa,gBAE5FqC,EAAKmN,UAAU4I,eAAejR,EAAQqI,UAAW,GACjDnN,EAAKmxB,OAAOpb,eAAejR,EAAQqsB,OAAQ,GAC3CzX,GAAS1Z,GAAO,YAAa,WAG7BA,EAAKkM,IAAIpH,KA+WX,OA1ZQ2yB,GAAAD,EAAAj0B,GA8CAi0B,EAAAj6B,YAAP,WACC,OAAOlB,OAAOwF,OACb0vB,GAAWh0B,cACX43B,GAAa53B,cACbm3B,GAAan3B,cACbu4B,GAAcv4B,cACdg4B,GAAgBh4B,cAChBm5B,GAAcn5B,gBAQNi6B,EAAAx6B,UAAAowB,OAAV,SAAiBjoB,GAChB5J,KAAK21B,YAAYjlB,MAAM9G,IAMdqyB,EAAAx6B,UAAAqwB,MAAV,SAAgBloB,GACf5J,KAAK21B,YAAY5N,KAAKne,IAGvBqyB,EAAAx6B,UAAAkwB,QAAA,SAAQ/nB,GAEP,OADA5J,KAAK21B,YAAYhE,QAAQ/nB,GAClB5J,MAmBRc,OAAAC,eAAIk7B,EAAAx6B,UAAA,YAAJ,eAAAgD,EAAAzE,KACKsR,EAAS,GAIb,OAHK,KAAM,KAAM,OAAOnK,KAAK,SAAAxF,GAAK,OAAA8C,EAAK03B,cAAgBx6B,MACtD2P,EAAStR,KAAKm8B,aAER7qB,EAAStR,KAAK21B,YAAYtyB,UAElC,SAASA,GACkB,OAAtBA,EAAK+4B,OAAO,EAAG,IAClBp8B,KAAKq8B,qBAAqB,MAC1Br8B,KAAK21B,YAAc31B,KAAK21B,YACxB31B,KAAK21B,YAAYtyB,KAAOA,EAAK+4B,OAAO,IACJ,OAAtB/4B,EAAK+4B,OAAO,EAAG,IACzBp8B,KAAKq8B,qBAAqB,MAC1Br8B,KAAK21B,YAAc31B,KAAK21B,YACxB31B,KAAK21B,YAAYtyB,KAAOA,EAAK+4B,OAAO,IACJ,QAAtB/4B,EAAK+4B,OAAO,EAAG,IACzBp8B,KAAKq8B,qBAAqB,OAC1Br8B,KAAK21B,YAAc31B,KAAK21B,YACxB31B,KAAK21B,YAAYtyB,KAAOA,EAAK+4B,OAAO,IACjB,QAAT/4B,GACVrD,KAAKq8B,qBAAqB,OAC1Br8B,KAAK21B,YAAc31B,KAAK21B,aACL,UAATtyB,EACVrD,KAAKq8B,qBAAqB,UAE1Br8B,KAAKq8B,qBAAqB,cAC1Br8B,KAAK21B,YAAc31B,KAAK21B,YACxB31B,KAAK21B,YAAYtyB,KAAQA,oCAe3BvC,OAAAC,eAAIk7B,EAAAx6B,UAAA,gBAAJ,WACC,OAAOzB,KAAK21B,YAAYQ,cAEzB,SAAaA,GACPn2B,KAAKs8B,YAAYt8B,KAAK21B,YAAa,UAAa31B,KAAKs8B,YAAYt8B,KAAK21B,YAAa,SACvF31B,KAAK21B,YAAYQ,SAAWA,oCAU9Br1B,OAAAC,eAAIk7B,EAAAx6B,UAAA,oBAAJ,WACC,OAAOzB,KAAK21B,YAAYU,kBAEzB,SAAiBA,GACXr2B,KAAKs8B,YAAYt8B,KAAK21B,YAAa,UAAa31B,KAAKs8B,YAAYt8B,KAAK21B,YAAa,SACvF31B,KAAK21B,YAAYU,aAAeA,oCAmBlC4F,EAAAx6B,UAAAkP,IAAA,SAAI8J,GAQH,OANIxT,QAAQC,IAAIuT,EAAO,SAAWA,EAAMpX,OACvCrD,KAAKqD,KAAOoX,EAAMpX,MAInB2E,EAAAvG,UAAMkP,IAAGpQ,KAAAP,KAACya,GACHza,MAGRi8B,EAAAx6B,UAAAP,IAAA,WACC,IAAMqI,EAAUvJ,KAAK21B,YAAYz0B,MAGjC,OADAqI,EAAQlG,KAAOrD,KAAKqD,KACbkG,GAMA0yB,EAAAx6B,UAAA46B,qBAAR,SAA6BE,GAC5B,GAAIA,IAAYv8B,KAAKm8B,YAAa,CACjCn8B,KAAKm8B,YAAcI,EACnB,IAAMC,EAAiBd,GAAwBa,GAEzC5sB,EAAM3P,KAAK2P,MACjB,GAAI3P,KAAK21B,YAAa,CACrB,IAAM8G,EAASz8B,KAAK21B,YACpB8G,EAAO1U,KAAKpY,GAEZ3P,KAAK2L,QAAQhH,WAAW,WAAM,OAAA83B,EAAOz5B,WAAWhD,KAAK08B,WAGtD18B,KAAK21B,YAAc,IAAI6G,GACtB7wB,QAAU3L,KAAK2L,UAEhB3L,KAAK4R,UAAUoN,QAAQhf,KAAK21B,YAAY/jB,WACxC5R,KAAK41B,OAAO5W,QAAQhf,KAAK21B,YAAYC,QACrC51B,KAAK21B,YAAY3W,QAAQhf,KAAK4f,QACX,YAAf5f,KAAKmN,OACRnN,KAAK21B,YAAYjlB,MAAMf,KAQ1B7O,OAAAC,eAAIk7B,EAAAx6B,UAAA,aAAJ,WACC,OAAOzB,KAAK21B,YAAYY,WAEzB,SAAUA,GACTv2B,KAAK21B,YAAYY,MAAQA,mCAS1Bz1B,OAAAC,eAAIk7B,EAAAx6B,UAAA,kBAAJ,WACC,OAAOzB,KAAKm8B,iBAEb,SAAeQ,GAEd,IAAInG,EAAW,OACe,QAA1Bx2B,KAAK21B,YAAYtyB,MAA4C,UAA1BrD,KAAK21B,YAAYtyB,OACvDmzB,EAAWx2B,KAAK21B,YAAYtyB,MAIf,OAAVs5B,EACH38B,KAAKqD,KAAO,KAAOmzB,EACC,OAAVmG,EACV38B,KAAKqD,KAAO,KAAOmzB,EACC,QAAVmG,EACV38B,KAAKqD,KAAO,MAAQmzB,EACA,eAAVmG,EACV38B,KAAKqD,KAAOmzB,EACQ,UAAVmG,EACV38B,KAAKqD,KAAO,QACQ,QAAVs5B,IACV38B,KAAKqD,KAAO,wCAIN44B,EAAAx6B,UAAA66B,YAAR,SACCvB,EACAM,GAEA,OAAON,aAAeW,GAAwBL,IAW/Cv6B,OAAAC,eAAIk7B,EAAAx6B,UAAA,gBAAJ,WACC,OAAOzB,KAAK21B,YAAYa,cAEzB,SAAaA,GACPx2B,KAAKs8B,YAAYt8B,KAAK21B,YAAa,UACtC31B,KAAKs8B,YAAYt8B,KAAK21B,YAAa,QACvB,UAAba,GAAqC,QAAbA,IACxBx2B,KAAK21B,YAAYa,SAAWA,oCAW9B11B,OAAAC,eAAIk7B,EAAAx6B,UAAA,aAAJ,WACC,OAAIzB,KAAKs8B,YAAYt8B,KAAK21B,YAAa,SAC/B31B,KAAK21B,YAAYuE,WAExB,mCAOFp5B,OAAAC,eAAIk7B,EAAAx6B,UAAA,aAAJ,WACC,OAAIzB,KAAKs8B,YAAYt8B,KAAK21B,YAAa,OAC/B31B,KAAK21B,YAAYiF,WAExB,OAGF,SAAUA,GACL56B,KAAKs8B,YAAYt8B,KAAK21B,YAAa,QAAUpwB,EAASq1B,KACzD56B,KAAK21B,YAAYiF,MAAQA,oCAW3B95B,OAAAC,eAAIk7B,EAAAx6B,UAAA,cAAJ,WACC,OAAIzB,KAAKs8B,YAAYt8B,KAAK21B,YAAa,OAC/B31B,KAAK21B,YAAYgF,YAExB,OAGF,SAAWA,GACN36B,KAAKs8B,YAAYt8B,KAAK21B,YAAa,QAAUpwB,EAASo1B,KACzD36B,KAAK21B,YAAYgF,OAASA,oCAS5B75B,OAAAC,eAAIk7B,EAAAx6B,UAAA,sBAAJ,WACC,OAAIzB,KAAKs8B,YAAYt8B,KAAK21B,YAAa,OAAS31B,KAAKs8B,YAAYt8B,KAAK21B,YAAa,MAC3E31B,KAAK21B,YAAY+D,oBAExB,OAGF,SAAmBkD,IACb58B,KAAKs8B,YAAYt8B,KAAK21B,YAAa,OAAS31B,KAAKs8B,YAAYt8B,KAAK21B,YAAa,QAAU9vB,EAAS+2B,KACtG58B,KAAK21B,YAAY+D,eAAiBkD,oCAUpC97B,OAAAC,eAAIk7B,EAAAx6B,UAAA,uBAAJ,WACC,OAAIzB,KAAKs8B,YAAYt8B,KAAK21B,YAAa,MAC/B31B,KAAK21B,YAAYmE,qBAExB,mCAUFh5B,OAAAC,eAAIk7B,EAAAx6B,UAAA,mBAAJ,WACC,OAAIzB,KAAKs8B,YAAYt8B,KAAK21B,YAAa,OAAS31B,KAAKs8B,YAAYt8B,KAAK21B,YAAa,MAC3E31B,KAAK21B,YAAY6D,iBAExB,mCAaF14B,OAAAC,eAAIk7B,EAAAx6B,UAAA,2BAAJ,WACC,OAAIzB,KAAKs8B,YAAYt8B,KAAK21B,YAAa,OAC/B31B,KAAK21B,YAAY6F,yBAExB,mCAIFS,EAAAx6B,UAAAuB,QAAA,WAKC,OAJAgF,EAAAvG,UAAMuB,QAAOzC,KAAAP,MACbA,KAAK41B,OAAO5yB,UACZhD,KAAK4R,UAAU5O,UACfhD,KAAK21B,YAAY3yB,UACVhD,MAETi8B,EA3ZA,CACQ9K,8nDCnER0L,GAAA,SAAA70B,GA0DC,SAAA80B,IAAA,IAAAr4B,EAECuD,EAAAzH,KAAAP,KAAM0G,EAAqBo2B,EAAO96B,cAAeI,WAAY,MAAO,aAAWpC,KA1DhFyE,EAAA9D,KAAO,SA0CC8D,EAAAs4B,eAAwC,IAAIC,IAiBnD,IAAMzzB,EAAU7C,EAAqBo2B,EAAO96B,cAAeI,WAAY,MAAO,kBAE9EqC,EAAKkd,QAAU,IAAIV,IAClBE,OAAQ1c,EAAKw4B,QAAQ34B,KAAKG,EAAM8E,EAAQ4X,QACxCC,QAAS7X,EAAQ6X,QACjBC,IAAK9X,EAAQ8X,MAEd5c,EAAKy4B,UAAY3zB,EAAQ2zB,UACzBz4B,EAAK4kB,MAAQ9f,EAAQkH,KACrBhM,EAAK+pB,WAAajlB,EAAQgmB,UAC1B9qB,EAAKgqB,SAAWllB,EAAQ+lB,QACxB7qB,EAAKwvB,cAAgB1qB,EAAQqqB,aAC7BnvB,EAAKguB,OAASlpB,EAAQkpB,OACtBhuB,EAAKkuB,QAAUppB,EAAQopB,UA6SzB,OAvX4BwK,GAAAL,EAAA90B,GA6EpB80B,EAAA96B,YAAP,WACC,OAAOlB,OAAOwF,OAAO6qB,GAAOnvB,eAC3Bk7B,WAAY,EACZzK,OAAS,EACTE,QAAU,EACVliB,MAAO,EACP6e,QAAU,EACVC,UAAY,EACZpO,OAAS7C,GACTsV,aAAe,EACfxS,SAAU,KAaN0b,EAAAr7B,UAAA8f,KAAN,SAAWF,6FACV,SAAMrhB,KAAK2hB,QAAQJ,KAAKF,WAExB,OAFA9a,EAAAyJ,OACAhQ,KAAKi9B,WACL,EAAOj9B,YAMA88B,EAAAr7B,UAAAw7B,QAAR,SAAgB75B,QAAA,IAAAA,MAAAkb,IACflb,IACIpD,KAAKk9B,WACRl9B,KAAK0Q,SAOCosB,EAAAr7B,UAAA27B,aAAR,SAAqBj3B,GACpBnG,KAAK+8B,eAAeM,OAAOl3B,GACM,IAA7BnG,KAAK+8B,eAAeO,MAAet9B,KAAKsxB,SAC3CtxB,KAAK2nB,OAAOtC,eAAe,UAAWrlB,KAAK2P,QAe7CmtB,EAAAr7B,UAAAiP,MAAA,SAAM9G,EAAagc,EAAerI,GAEjC,OADAvV,EAAAvG,UAAMiP,MAAKnQ,KAAAP,KAAC4J,EAAMgc,EAAQrI,GACnBvd,MAME88B,EAAAr7B,UAAAowB,OAAV,SAAiBvmB,EAAkBsa,EAAerI,GAGhDqI,EADG5lB,KAAKqpB,MACC/hB,EAAWse,EAAQ5lB,KAAKwuB,YAGxBlnB,EAAWse,EAAQ,GAI7BA,EAAS5lB,KAAK6U,UAAU+Q,GAGpB5lB,KAAKsxB,UACR1L,GAAU5lB,KAAKi0B,eAIhB,IAAI1M,EAAmBjgB,EAAWiW,EAAUtY,KAAKC,IAAIlF,KAAK2hB,QAAQpE,SAAWqI,EAAQ,IACrF2B,EAAmBvnB,KAAK6U,UAAU0S,GAGlCA,GAAsCvnB,KAAKi0B,cAG3C3oB,EAAYtL,KAAK6U,UAAUvJ,GAG3B,IAAMnF,EAAS,IAAIotB,IAClBpjB,OAASnQ,KAAK2hB,QACdhW,QAAS3L,KAAK2L,QACd8mB,OAASzyB,KAAKyyB,OACdE,QAAU3yB,KAAK2yB,QACfliB,KAAOzQ,KAAKqpB,MACZiG,QAAUtvB,KAAKyuB,SACfc,UAAYvvB,KAAKwuB,WACjB6D,QAAUryB,KAAKo9B,aAAa94B,KAAKtE,MACjC4zB,aAAe5zB,KAAKi0B,gBAClBjV,QAAQhf,KAAK4f,QAGX5f,KAAKqpB,OAAUrpB,KAAKsxB,SAExBtxB,KAAK2nB,OAAOtC,eAAe,UAAW/Z,EAAYic,GACjDgW,aAAa,IAKfv9B,KAAK+8B,eAAepzB,IAAIxD,GAGpBnG,KAAKqpB,OAASjkB,EAAQmY,GACzBpX,EAAOuK,MAAMpF,EAAWsa,GAGxBzf,EAAOuK,MAAMpF,EAAWsa,EAAQ2B,EAAmBvnB,KAAK6U,UAAU7U,KAAK2yB,WAO/DmK,EAAAr7B,UAAAqwB,MAAV,SAAgBloB,GACf,IAAMkS,EAAe9b,KAAK6U,UAAUjL,GACpC5J,KAAK+8B,eAAen1B,QAAQ,SAAAzB,GAAU,OAAAA,EAAO4hB,KAAKjM,MAUnDghB,EAAAr7B,UAAAkwB,QAAA,SAAQ/nB,EAAagc,EAAerI,GAGnC,OAFAvd,KAAK8xB,MAAMloB,GACX5J,KAAK6xB,OAAOjoB,EAAMgc,EAAQrI,GACnBvd,MAcR88B,EAAAr7B,UAAA+7B,KAAA,SAAK5X,EAAcyB,GAClB,IAAMvL,EAAe9b,KAAK6U,UAAUwS,GACpC,GAAiD,YAA7CrnB,KAAK2nB,OAAOvM,eAAeU,GAA6B,CAC3D,IAAM2hB,EAAiBz9B,KAAK6U,UAAU+Q,GAEtC5lB,KAAK8xB,MAAMhW,GAEX9b,KAAK6xB,OAAO/V,EAAc2hB,GAE3B,OAAOz9B,MAYR88B,EAAAr7B,UAAAivB,cAAA,SAAcnB,EAAiBD,GAG9B,OAFAtvB,KAAKuvB,UAAYA,EACjBvvB,KAAKsvB,QAAUA,EACRtvB,MAMRc,OAAAC,eAAI+7B,EAAAr7B,UAAA,iBAAJ,WACC,OAAOzB,KAAKwuB,gBAEb,SAAce,GACbvvB,KAAKwuB,WAAae,EAElBvvB,KAAK+8B,eAAen1B,QAAQ,SAAAzB,GAC3BA,EAAOopB,UAAYA,qCAOrBzuB,OAAAC,eAAI+7B,EAAAr7B,UAAA,eAAJ,WACC,OAAOzB,KAAKyuB,cAEb,SAAYa,GACXtvB,KAAKyuB,SAAWa,EAEhBtvB,KAAK+8B,eAAen1B,QAAQ,SAAAzB,GAC3BA,EAAOmpB,QAAUA,qCAOnBxuB,OAAAC,eAAI+7B,EAAAr7B,UAAA,cAAJ,WACC,OAAOzB,KAAK2hB,aAEb,SAAWxR,GACVnQ,KAAK2hB,QAAQhR,IAAIR,oCAMlBrP,OAAAC,eAAI+7B,EAAAr7B,UAAA,YAAJ,WACC,OAAOzB,KAAKqpB,WAEb,SAAS5Y,GAER,GAAIzQ,KAAKqpB,QAAU5Y,IAGnBzQ,KAAKqpB,MAAQ5Y,EAEbzQ,KAAK+8B,eAAen1B,QAAQ,SAAAzB,GAC3BA,EAAOsK,KAAOA,IAEXA,GAAM,CAET,IAAMwX,EAAYjoB,KAAK2nB,OAAOpC,aAAa,UAAWvlB,KAAK2P,OACvDsY,GACHjoB,KAAK2nB,OAAOrd,OAAO2d,EAAUre,wCAShC9I,OAAAC,eAAI+7B,EAAAr7B,UAAA,oBAAJ,WACC,OAAOzB,KAAKi0B,mBAEb,SAAiBG,GAChBp0B,KAAKi0B,cAAgBG,EACrB,IAAMzkB,EAAM3P,KAAK2P,MAGXsY,EAAYjoB,KAAK2nB,OAAOpC,aAAa,UAAW5V,GAClDsY,GAAaA,EAAUsV,aAC1Bv9B,KAAK2nB,OAAOrd,OAAO2d,EAAUre,MAI9B5J,KAAK+8B,eAAen1B,QAAQ,SAAAzB,GAC3BA,EAAOytB,aAAapZ,eAAe4Z,EAAMzkB,sCAO3C7O,OAAAC,eAAI+7B,EAAAr7B,UAAA,eAAJ,WACC,OAAOzB,KAAK2hB,QAAQP,aAErB,SAAYmC,GACXvjB,KAAK2hB,QAAQP,QAAUmC,mCAMxBziB,OAAAC,eAAI+7B,EAAAr7B,UAAA,cAAJ,WACC,OAAOzB,KAAK2hB,QAAQC,wCAGrBkb,EAAAr7B,UAAAuB,QAAA,WAMC,OALAgF,EAAAvG,UAAMuB,QAAOzC,KAAAP,MAEbA,KAAK+8B,eAAen1B,QAAQ,SAAAzB,GAAU,OAAAA,EAAOnD,YAC7ChD,KAAK+8B,eAAerP,QACpB1tB,KAAK2hB,QAAQ3e,UACNhD,MAET88B,EAvXA,CAA4B3L,gVCc5BuM,GAAA,SAAA11B,GAkEC,SAAA21B,IAAA,IAAAl5B,EAECuD,EAAAzH,KAAAP,KAAM0G,EAAqBi3B,EAAS37B,cAAeI,WAAY,SAAU,QAAS,UAAW,cAAYpC,KAlE1GyE,EAAA9D,KAAO,WA8CG8D,EAAAkhB,KAA4B,IAAIwP,IACzCxpB,QAASlH,EAAKkH,QACdvK,MAAO,IAEEqD,EAAAoa,mBAAqBpa,EAAKkhB,MAKpClhB,EAAAmb,OAAqBnb,EAAKkhB,KAK1BlhB,EAAAuW,WAA+B7R,EAO9B,IAAMI,EAAU7C,EAAqBi3B,EAAS37B,cAAeI,WAAY,SAAU,QAAS,UAAW,mBAEvGqC,EAAKm5B,OAASr0B,EAAQq0B,OACtBn5B,EAAKo5B,MAAQt0B,EAAQs0B,MACrBp5B,EAAKq5B,QAAUv0B,EAAQu0B,QACvBr5B,EAAKs5B,QAAUx0B,EAAQw0B,QACvBt5B,EAAKu5B,YAAcz0B,EAAQy0B,YAC3Bv5B,EAAKw5B,aAAe10B,EAAQ00B,aAC5Bx5B,EAAKy5B,WAAa30B,EAAQ20B,aA6Q5B,OA1V8BC,GAAAR,EAAA31B,GAgFtB21B,EAAA37B,YAAP,WACC,OAAOlB,OAAOwF,OAAOiY,GAAcvc,eAClC47B,OAAS,IACTI,YAAc,SACdH,MAAQ,GACRK,WAAa,cACbH,QAAU,EACVE,aAAe,cACfH,QAAU,MAQZh9B,OAAAC,eAAI48B,EAAAl8B,UAAA,aAAJ,WACC,OAAOzB,KAAKob,eAAepb,KAAK2P,wCAUzBguB,EAAAl8B,UAAA28B,UAAR,SAAkBvL,EAA8BwL,GAC/C,GAAIx4B,EAASgtB,GACZ,OAAOA,EAGP,IAAIyL,OAAS,EACb,IAAKA,KAAaC,GACjB,GAAIA,GAAeD,GAAWD,KAAexL,EAC5C,OAAOyL,EAIT,OAAOzL,GAWD8K,EAAAl8B,UAAA+8B,UAAR,SACC79B,EACA09B,EACAxL,GAGA,GAAIhtB,EAASgtB,IAAU5rB,QAAQC,IAAIq3B,GAAgB1L,GAAQ,CAC1D,IAAM4L,EAAWF,GAAe1L,GAC5BrtB,EAASi5B,GACC,gBAAT99B,IACHX,KAAKW,GAAQ89B,EAASJ,IAGvBr+B,KAAKW,GAAQ89B,MAER,KAAI94B,EAAQktB,IAAmB,gBAATlyB,EAG5B,MAAM,IAAIoC,MAAM,4BAA8B8vB,GAF9C7yB,KAAKW,GAAQkyB,IA4Bf/xB,OAAAC,eAAI48B,EAAAl8B,UAAA,mBAAJ,WACC,OAAOzB,KAAKo+B,UAAUp+B,KAAK0+B,aAAc,WAE1C,SAAgB7L,GACf7yB,KAAKw+B,UAAU,eAAgB,KAAM3L,oCAWtC/xB,OAAAC,eAAI48B,EAAAl8B,UAAA,oBAAJ,WACC,OAAOzB,KAAKo+B,UAAUp+B,KAAK2+B,cAAe,YAE3C,SAAiB9L,GAChB7yB,KAAKw+B,UAAU,gBAAiB,MAAO3L,oCAWxC/xB,OAAAC,eAAI48B,EAAAl8B,UAAA,kBAAJ,WACC,OAAOzB,KAAK4+B,iBAEb,SAAe/L,GACd7yB,KAAK4C,QAAQ,SAAU,eAAeuE,KAAK,SAAA1G,GAAK,OAAAA,IAAMoyB,IAAQ,2BAA2BA,GACzF7yB,KAAK4+B,YAAc/L,mCAYpB8K,EAAAl8B,UAAAo9B,cAAA,SAAcj1B,EAAak1B,QAAA,IAAAA,MAAA,GAC1B9+B,KAAKiC,IAAI,gBAAiB2H,EAAMk1B,GAChCl1B,EAAO5J,KAAK6U,UAAUjL,GACtB,IACIg0B,EADmB59B,KAAK6U,UAAU7U,KAAK49B,QAErCC,EAAQ79B,KAAK6U,UAAU7U,KAAK69B,OAE5BkB,EAAe/+B,KAAKob,eAAexR,GACrCm1B,EAAe,IAKlBnB,GAF0B,EAAImB,IADX,EAAInB,IAMxB,GAAe,IAAXA,EAEH59B,KAAK2lB,KAAKnL,eAAeskB,EAAUl1B,QAC7B,GAA0B,WAAtB5J,KAAK0+B,aACf1+B,KAAK2lB,KAAK3I,aAAa8hB,EAAUlB,EAAQh0B,QACnC,GAA0B,gBAAtB5J,KAAK0+B,aACf1+B,KAAK2lB,KAAK1I,aAAa6hB,EAAUlB,EAAQh0B,QACnC,GAAIg0B,EAAS,EAAG,CACtB59B,KAAK2lB,KAAKhJ,oBAAoB/S,GAG9B,IAFA,IAAIipB,EAAQ7yB,KAAK0+B,aAERt+B,EAAI,EAAGA,EAAIyyB,EAAMxwB,OAAQjC,IAEjC,GAAIyyB,EAAMzyB,EAAI,IAAM2+B,GAAgBA,GAAgBlM,EAAMzyB,GAAI,EAC7DyyB,EAAQ7yB,KAAK0+B,aAAa51B,MAAM1I,IAE1B,GAAK2+B,EACX,MAGF/+B,KAAK2lB,KAAKtI,oBAAoBwV,EAAOjpB,EAAMg0B,EAAQkB,GAGpD,GAAIjB,EAAO,CACV,IAAMmB,EAAaF,EAAW9+B,KAAK89B,QAC7BmB,EAAar1B,EAAOg0B,EAC1B59B,KAAKiC,IAAI,QAASg9B,GACO,WAArBj/B,KAAK4+B,YACR5+B,KAAK2lB,KAAK3I,aAAagiB,EAAYnB,EAAOoB,EAAaj/B,KAAK4d,YAC7B,gBAArB5d,KAAK4+B,aACf5+B,KAAK2lB,KAAKzI,+BAA+B8hB,EAAYC,EAAYpB,GAGnE,OAAO79B,MAUR29B,EAAAl8B,UAAAy9B,eAAA,SAAet1B,GACd5J,KAAKiC,IAAI,iBAAkB2H,GAC3BA,EAAO5J,KAAK6U,UAAUjL,GACtB,IAAMm1B,EAAe/+B,KAAKob,eAAexR,GACzC,GAAIm1B,EAAe,EAAG,CACrB,IAAMhB,EAAU/9B,KAAK6U,UAAU7U,KAAK+9B,SACT,WAAvB/9B,KAAK2+B,cACR3+B,KAAK2lB,KAAK3I,aAAa,EAAG+gB,EAASn0B,GACF,gBAAvB5J,KAAK2+B,cACf3+B,KAAK2lB,KAAK1I,aAAa,EAAG8gB,EAASn0B,GAE/BjE,EAAQ3F,KAAK2+B,iBAChB3+B,KAAK2lB,KAAKhJ,oBAAoB/S,GAC9B5J,KAAK2lB,KAAKtI,oBAAoBrd,KAAK2+B,cAAe/0B,EAAMm0B,EAASgB,IAIpE,OAAO/+B,MAOR29B,EAAAl8B,UAAA2Z,eAAA,SAAexR,GACd,OAAO5J,KAAK2lB,KAAKvK,eAAexR,IAajC+zB,EAAAl8B,UAAA09B,qBAAA,SAAqB5hB,EAAgB3T,EAAak1B,GAIjD,YAJiD,IAAAA,MAAA,GACjDl1B,EAAO5J,KAAK6U,UAAUjL,GACtB5J,KAAK6+B,cAAcj1B,EAAMk1B,GACzB9+B,KAAKk/B,eAAet1B,EAAO5J,KAAK6U,UAAU0I,IACnCvd,MAMR29B,EAAAl8B,UAAA6I,OAAA,SAAOC,GAEN,OADAvK,KAAK2lB,KAAKrK,sBAAsB/Q,GACzBvK,MAMR29B,EAAAl8B,UAAAud,QAAA,SAAQC,EAAwBQ,EAA0BC,GAEzD,YAF+B,IAAAD,MAAA,QAA0B,IAAAC,MAAA,GACzD8V,GAAcx1B,KAAMif,EAAaQ,EAAcC,GACxC1f,MAGR29B,EAAAl8B,UAAAuB,QAAA,WAGC,OAFAgF,EAAAvG,UAAMuB,QAAOzC,KAAAP,MACbA,KAAK2lB,KAAK3iB,UACHhD,MAET29B,EA1VA,CAA8Bpf,IAmXxBggB,GAAmC,WAExC,IAEIn+B,EACA6mB,EAGEmY,KACN,IAAKh/B,EAAI,EAAGA,EAPK,IAOSA,IACzBg/B,EAAYh/B,GAAK6E,KAAK4qB,IAAKzvB,EAAI,KAAmB6E,KAAK6qB,GAAK,IAI7D,IAAMuP,KAEN,IAAKj/B,EAAI,EAAGA,EAAIk/B,IAAcl/B,IAAK,CAClC6mB,EAAK7mB,EAAI,IACT,IAAMm/B,EAAWt6B,KAAK4qB,IAAI5I,GAAe,EAAVhiB,KAAK6qB,IAHb,IAGyC7qB,KAAK6qB,GAAK,GAAK,EAC/EuP,EAAYj/B,GAAKm/B,EAAW,GAAS,IAAJtY,EAElCoY,EAAYC,KAAgB,EAG5B,IAAME,KAEN,IAAKp/B,EAAI,EAAGA,EAxBK,IAwBSA,IACzBo/B,EAAYp/B,GAAK6E,KAAKukB,KAAMppB,EAAI,IAFnB,KAMd,IAAMq/B,KACN,IAAKr/B,EAAI,EAAGA,EA9BK,IA8BSA,IACzB6mB,EAAI7mB,EAAI,IACRq/B,EAAUr/B,GAAK,IAAO,EAAI6E,KAAKqyB,IAAIryB,KAAK6qB,GAAK7I,IAI9C,IAsBsB4L,EAtBhB6M,KACN,IAAKt/B,EAAI,EAAGA,EArCK,IAqCSA,IAAK,CAC9B6mB,EAAI7mB,EAAI,IACR,IAAM8T,EAAwB,EAAjBjP,KAAKwM,IAAIwV,EAAG,GAAS,GAC5B/W,EAAMjL,KAAKqyB,IAAIpjB,EAAOjP,KAAK6qB,GAAK,EAAI7I,GAC1CyY,EAAYt/B,GAAK6E,KAAKmR,IAAIlG,GAAO,EAAI+W,IAMtC,SAAS0Y,EAAY9M,GAEpB,IADA,IAAM+M,EAAM,IAAIh6B,MAAMitB,EAAMxwB,QACnBw9B,EAAI,EAAGA,EAAIhN,EAAMxwB,OAAQw9B,IACjCD,EAAIC,GAAK,EAAIhN,EAAMgN,GAEpB,OAAOD,EAaR,OACCE,QACCC,GAAKJ,EAAYD,GACjBM,IAAMN,GAEPO,QACCF,GAAKX,EACLY,KAdoBnN,EAcDuM,EAbbvM,EAAM/pB,MAAM,GAAGsY,YAetB8e,YAAc,cACdC,OAAS,SACTC,QACCL,GAAKV,EACLW,IAAML,EAAYN,IAEnBgB,MACCN,GAAKN,EACLO,IAAML,EAAYF,IAEnBa,MACCP,GAAKP,EACLQ,IAAML,EAAYH,KAxFoB,+UClYzCe,GAAA,SAAAv4B,GAaC,SAAAw4B,IAAA,IAAA/7B,EACCuD,EAAAzH,KAAAP,KAAM0G,EAAqB85B,EAAkBx+B,cAAeI,WAAY,SAAU,QAAS,UAAW,cAAYpC,YAZnHyE,EAAA9D,KAAO,oBAEC8D,EAAA8b,UAAkB,IAAIF,IAC7B1U,QAASlH,EAAKkH,QACdiQ,KAAM,IAEPnX,EAAAmb,OAAenb,EAAK8b,UACpB9b,EAAAuW,MAAcvW,EAAK8b,UAMlB9b,EAAKkhB,KAAK3G,QAAQva,EAAK8b,UAAU3E,MACjCnX,EAAKmb,OAASnb,EAAK8b,UACnB9b,EAAKuW,MAAQvW,EAAK8b,YAWpB,OA5BuCkgB,GAAAD,EAAAx4B,GAuBtCw4B,EAAA/+B,UAAAuB,QAAA,WAGC,OAFAgF,EAAAvG,UAAMuB,QAAOzC,KAAAP,MACbA,KAAKugB,UAAUvd,UACRhD,MAETwgC,EA5BA,CAAuC9C,gVCjBvCgD,GAAA,SAAA14B,GAgCC,SAAA24B,IAAA,IAAAl8B,EAECuD,EAAAzH,KAAAP,KAAM0G,EAAqBi6B,EAAW3+B,cAAeI,aAAWpC,KAVzDyE,EAAAiqB,oBAKAjqB,EAAA6sB,SAAmB,EAyGnB7sB,EAAAm8B,wBAA0Bn8B,EAAKo6B,cAQ/Bp6B,EAAAo8B,yBAA2Bp8B,EAAKy6B,eA3GvC,IAAM31B,EAAU7C,EAAqBi6B,EAAW3+B,cAAeI,kBAE/DqC,EAAK4sB,QAAU,IAAI1E,IAClBhhB,QAASlH,EAAKkH,QACdkhB,OAAQtjB,EAAQsjB,SAEjBpoB,EAAKooB,OAASpoB,EAAK4sB,QAAQxE,OAC3BpoB,EAAKmb,OAASnb,EAAK4sB,QACnBlT,GAAS1Z,EAAM,YAgHjB,OA3J4Eq8B,GAAAH,EAAA34B,GA8CpE24B,EAAA3+B,YAAP,WACC,OAAOlB,OAAOwF,OAAOiY,GAAcvc,eAClCiM,gBAAiB,EACjB4e,OAAQ,KAkBV8T,EAAAl/B,UAAAswB,KAAA,WAMC,OALK/xB,KAAKsxB,UACTtxB,KAAKsxB,SAAU,EACftxB,KAAK+gC,YAAY,gBAAiB,GAClC/gC,KAAK+gC,YAAY,iBAAkB,IAE7B/gC,MAQE2gC,EAAAl/B,UAAAs/B,YAAV,SAAsBtuB,EAAgBuuB,GAAtC,IAAAv8B,EAAAzE,KACOihC,EAAiBjhC,KAAK,aAAeyS,GAAUzS,KAAKyS,GAC1DzS,KAAKyS,GAAU,eAAC,IAAAvQ,KAAAC,EAAA,EAAAA,EAAAC,UAAAC,OAAAF,IAAAD,EAAAC,GAAAC,UAAAD,GACf,IAAMyH,EAAO1H,EAAK8+B,GACZ/vB,EAAKxM,EAAKkH,QAAQ8I,UAAU2V,SAAS,SAAC7a,GAC3CrN,EAAK8+B,GAAgBzxB,EACrB0xB,EAAet+B,MAAM8B,EAAMvC,IACzB0H,GACHnF,EAAKiqB,iBAAiBlmB,KAAKyI,KAO7B0vB,EAAAl/B,UAAAywB,OAAA,eAAAztB,EAAAzE,KAQC,OAPAA,KAAK0uB,iBAAiB9mB,QAAQ,SAAAqJ,GAAM,OAAAxM,EAAKkH,QAAQ8I,UAAUiZ,MAAMzc,KACjEjR,KAAK0uB,oBACD1uB,KAAKsxB,UACRtxB,KAAKsxB,SAAU,EACftxB,KAAK6+B,cAAgB7+B,KAAK4gC,wBAC1B5gC,KAAKk/B,eAAiBl/B,KAAK6gC,0BAErB7gC,MAcR2gC,EAAAl/B,UAAA09B,qBAAA,SAAqBhoB,EAAiBoG,EAAgB3T,EAAak1B,GAClE,IAAMhjB,EAAe9b,KAAK6U,UAAUjL,GAC9B2d,EAAmBvnB,KAAK6U,UAAU0I,GAGxC,OAFAvd,KAAK6+B,cAAc1nB,EAAM2E,EAAcgjB,GACvC9+B,KAAKk/B,eAAepjB,EAAeyL,GAC5BvnB,MAyBR2gC,EAAAl/B,UAAAuB,QAAA,WAKC,OAJAgF,EAAAvG,UAAMuB,QAAOzC,KAAAP,MACbA,KAAKqxB,QAAQruB,UACbhD,KAAKkyB,SACLlyB,KAAK0uB,oBACE1uB,MAET2gC,EA3JA,CAA4EpiB,gVCD5E2iB,GAAA,SAAAl5B,GAuBC,SAAAm5B,IAAA,IAAA18B,EAECuD,EAAAzH,KAAAP,KAAM0G,EAAqBy6B,EAAWn/B,cAAeI,aAAWpC,KAC1DuJ,EAAU7C,EAAqBy6B,EAAWn/B,cAAeI,kBAE/DqC,EAAK28B,WAAa73B,EAAQ63B,aA0F5B,OAtH4EC,GAAAF,EAAAn5B,GAgCpEm5B,EAAAn/B,YAAP,WACC,OAAOlB,OAAOwF,OAAOo6B,GAAW1+B,eAC/Bo/B,WAAY,KAkBdD,EAAA1/B,UAAAo9B,cAAA,SAAc1nB,EAAkCvN,EAAak1B,GAK5D,YAL4D,IAAAA,MAAA,GAC5D9+B,KAAKiC,IAAI,gBAAiBkV,EAAMvN,EAAMk1B,GACtCl1B,EAAO5J,KAAK6U,UAAUjL,GACtB5J,KAAKshC,uBAAuB13B,EAAMk1B,GAClC9+B,KAAKuhC,QAAQpqB,EAAMvN,GACZ5J,MAURmhC,EAAA1/B,UAAAy9B,eAAA,SAAet1B,GAId,OAHA5J,KAAKiC,IAAI,iBAAkB2H,GAC3BA,EAAO5J,KAAK6U,UAAUjL,GACtB5J,KAAKwhC,wBAAwB53B,GACtB5J,MAmBRmhC,EAAA1/B,UAAAggC,eAAA,SAAe73B,GAEd,OADAA,EAAO5J,KAAK6U,UAAUjL,GACf5J,KAAK0hC,SAAStmB,eAAexR,IAerCu3B,EAAA1/B,UAAA8/B,QAAA,SAAQpqB,EAAkCvN,GACzCA,EAAO5J,KAAK6U,UAAUjL,GACtB,IAAM+3B,EAAoBxqB,aAAgBN,EAAiBM,EAAKpC,cAAgBoC,EAChF,GAAInX,KAAKohC,WAAa,GAAKphC,KAAKyhC,eAAe73B,GAAQ,IAAM,CAC5D,IAAMg4B,EAAW5hC,KAAK6U,UAAU7U,KAAKohC,YACrCphC,KAAK4R,UAAUkL,kBAAkB6kB,EAAmBC,EAAUh4B,QAE9D5J,KAAK4R,UAAU4I,eAAemnB,EAAmB/3B,GAElD,OAAO5J,MAETmhC,EAtHA,CAA4ET,gVCgB5EmB,GAAA,SAAA75B,GA2BC,SAAA85B,IAAA,IAAAr9B,EACCuD,EAAAzH,KAAAP,KAAM0G,EAAqBo7B,EAAM9/B,cAAeI,aAAWpC,KA1B5DyE,EAAA9D,KAAO,QAKE8D,EAAAiyB,WAAa,IAAIsF,IAAiBrwB,QAASlH,EAAKkH,UAKhDlH,EAAAmN,UAAYnN,EAAKiyB,WAAW9kB,UAK5BnN,EAAAmxB,OAASnxB,EAAKiyB,WAAWd,OAKzBnxB,EAAAi9B,SAA8B,IAAInB,IAAoB50B,QAASlH,EAAKkH,UAEnElH,EAAAoa,mBAAqBpa,EAAKiyB,WAAYjyB,EAAKi9B,SAAUj9B,EAAKmb,QAKnE,IAAMrW,EAAU7C,EAAqBo7B,EAAM9/B,cAAeI,kBAE1DqC,EAAKiyB,WAAW/lB,IAAIpH,EAAQmtB,YAC5BjyB,EAAKi9B,SAAS/wB,IAAIpH,EAAQm4B,UAG1Bj9B,EAAKiyB,WAAW7W,MAAMpb,EAAKi9B,SAAUj9B,EAAKmb,QAC1CzB,GAAS1Z,GAAO,aAAc,YAAa,SAAU,eA4DvD,OAhG2Bs9B,GAAAD,EAAA95B,GAuCnB85B,EAAA9/B,YAAP,WACC,OAAOlB,OAAOwF,OAAO46B,GAAWl/B,eAC/B0/B,SAAU5gC,OAAOwF,OAChBmB,EAAei2B,GAAS17B,cAAelB,OAAO+F,KAAKsqB,GAAOnvB,iBAEzD47B,OAAS,KACTC,MAAQ,GACRE,QAAU,EACVD,QAAU,KAGZpH,WAAY51B,OAAOwF,OAClBmB,EAAeu0B,GAAeh6B,cAAelB,OAAO+F,KAAKsqB,GAAOnvB,iBAE/DqB,KAAM,gBAWAy+B,EAAArgC,UAAA6/B,uBAAV,SAAiC13B,EAAak1B,QAAA,IAAAA,MAAA,GAC7C,IAAMhjB,EAAe9b,KAAK6U,UAAUjL,GAKpC,GAHA5J,KAAK0hC,SAAS7C,cAAc/iB,EAAcgjB,GAC1C9+B,KAAK02B,WAAWhmB,MAAMoL,GAEQ,IAA1B9b,KAAK0hC,SAAS5D,QAAe,CAChC,IAAMkE,EAAiBhiC,KAAK6U,UAAU7U,KAAK0hC,SAAS9D,QAC9CqE,EAAgBjiC,KAAK6U,UAAU7U,KAAK0hC,SAAS7D,OACnD79B,KAAK02B,WAAW3O,KAAKjM,EAAekmB,EAAiBC,KAQ7CH,EAAArgC,UAAA+/B,wBAAV,SAAkC53B,GACjCA,EAAO5J,KAAK6U,UAAUjL,GACtB5J,KAAK0hC,SAASxC,eAAet1B,GAC7B5J,KAAK02B,WAAW3O,KAAKne,EAAO5J,KAAK6U,UAAU7U,KAAK0hC,SAAS3D,WAM1D+D,EAAArgC,UAAAuB,QAAA,WAIC,OAHAgF,EAAAvG,UAAMuB,QAAOzC,KAAAP,MACbA,KAAK02B,WAAW1zB,UAChBhD,KAAK0hC,SAAS1+B,UACPhD,MAET8hC,EAhGA,CAA2BZ,gVCc3BgB,GAAA,SAAAl6B,GAyBC,SAAAm6B,IAAA,IAAA19B,EAECuD,EAAAzH,KAAAP,OAAOA,KAzBRyE,EAAA9D,KAAO,mBAKC8D,EAAA29B,SAAyC,IAAI71B,IAU7C9H,EAAA49B,cAAwB,EAW/B,IAAM94B,EAAU7C,EACfy7B,EAAiBngC,cAAeI,WAAY,OAAQ,SAAU,WAAY,eAG3EqC,EAAKwf,QAAU1a,EAAQ0a,QAGvBnjB,OAAO+F,KAAK0C,EAAQ+4B,MAAM16B,QAAQ,SAAAjH,GACjC8D,EAAK49B,gBACL,IAAMhhB,EAAM9X,EAAQ+4B,KAAK3hC,GACzB8D,EAAKkF,IAAIhJ,EAAM0gB,EAAK5c,EAAK89B,cAAcj+B,KAAKG,EAAO8E,EAAoC4X,aAiF1F,OAvHsCqhB,GAAAL,EAAAn6B,GA2C9Bm6B,EAAAngC,YAAP,WACC,OACCiiB,QAAS,GACTxC,QAASnD,GACT6C,OAAQ7C,GACRgkB,UAQFH,EAAA1gC,UAAAyF,IAAA,SAAIvG,GACH,OAAOX,KAAKoiC,SAASl7B,IAAIvG,EAAK2B,aAQ/B6/B,EAAA1gC,UAAAP,IAAA,SAAIP,GAEH,OADAX,KAAK4C,OAAO5C,KAAKkH,IAAIvG,GAAO,yCAAyCA,GAC9DX,KAAKoiC,SAASlhC,IAAIP,EAAK2B,aAMvB6/B,EAAA1gC,UAAA8gC,cAAR,SAAsBn/B,GACrBpD,KAAKqiC,gBACsB,IAAvBriC,KAAKqiC,eAAuBj/B,GAC/BA,KAOFtC,OAAAC,eAAIohC,EAAA1gC,UAAA,cAAJ,WACC,OAAOmE,MAAMoB,KAAKhH,KAAKoiC,UAAUK,MAAM,SAACl8B,GAACA,EAAA,GAAkB,OAAZA,EAAA,GAAmBqb,0CASnEugB,EAAA1gC,UAAAkI,IAAA,SACChJ,EACA0gB,EACAje,GAWA,YAXA,IAAAA,MAAAkb,IAEI+C,aAAeJ,IAClBjhB,KAAKoiC,SAASzxB,IAAIhQ,EAAK2B,WAAY+e,GACnCje,KACUie,aAAeC,aACzBthB,KAAKoiC,SAASzxB,IAAIhQ,EAAK2B,WAAY,IAAI2e,GAAgBI,IACvDje,KACUyC,EAASwb,IACnBrhB,KAAKoiC,SAASzxB,IAAIhQ,EAAK2B,WAAY,IAAI2e,GAAgBjhB,KAAKikB,QAAU5C,EAAKje,IAErEpD,MAMRmiC,EAAA1gC,UAAAuB,QAAA,WAIC,OAHAgF,EAAAvG,UAAMuB,QAAOzC,KAAAP,MACbA,KAAKoiC,SAASx6B,QAAQ,SAAAuI,GAAU,OAAAA,EAAOnN,YACvChD,KAAKoiC,SAAS1U,QACP1tB,MAETmiC,EAvHA,CAAsCtgC,EAAA,+UCMtC6gC,GAAA,SAAA16B,GAqCC,SAAA26B,IAAA,IAAAl+B,EAECuD,EAAAzH,KAAAP,KAAM0G,EAAqBi8B,EAAQ3gC,cAAeI,WAAY,OAAQ,SAAU,WAAY,UAAQpC,KArCrGyE,EAAA9D,KAAO,UAYC8D,EAAAs4B,eAAoD,IAAIxwB,IAkBtD9H,EAAAoa,mBAAqBpa,EAAKmb,QAQnC,IAAMrW,EAAU7C,EAAqBi8B,EAAQ3gC,cAAeI,WAAY,OAAQ,SAAU,WAAY,QAEhGwgC,YACN9hC,OAAO+F,KAAK0C,EAAQ+4B,MAAM16B,QAAQ,SAACuP,GAElC,GADA1S,EAAK7B,OAAOkD,EAAOqR,IAAS4E,SAAS5E,GAAO,4CAA4CA,GACpFrR,EAAOqR,GAAO,CAEjB,IAAM0rB,EAAM,IAAIhsB,EAAepS,EAAKkH,QAASwL,GAAMnC,SACnD4tB,EAAOC,GAAOt5B,EAAQ+4B,KAAKnrB,QACjB4E,SAAS5E,KAEnByrB,EAAO9vB,SAASqE,EAAM,KAAO5N,EAAQ+4B,KAAKnrB,MAI5C1S,EAAK29B,SAAW,IAAIF,GAAiBU,EAAQr5B,EAAQ4X,OAAQ5X,EAAQ0a,SACrExf,EAAKm5B,OAASr0B,EAAQq0B,OACtBn5B,EAAKs5B,QAAUx0B,EAAQw0B,QACvBt5B,EAAKouB,MAAQtpB,EAAQspB,QA4MvB,OAtQ6BiQ,GAAAH,EAAA36B,GA6DrB26B,EAAA3gC,YAAP,WACC,OAAOlB,OAAOwF,OAAOo6B,GAAW1+B,eAC/B47B,OAAS,EACT3Z,QAAU,GACV4O,MAAQ,cACR1R,OAAS7C,GACTyf,QAAU,GACVuE,WAOMK,EAAAlhC,UAAAshC,aAAR,SAAqB9rB,GAIpB,IAFA,IACIjS,EAAW,EACRA,EAFc,IAEW,CAE/B,GAAIhF,KAAKoiC,SAASl7B,IAAI+P,EAAOjS,GAC5B,OAAQA,EACF,GAAIhF,KAAKoiC,SAASl7B,IAAI+P,EAAOjS,GACnC,OAAOA,EAERA,IAED,MAAM,IAAIjC,MAAM,kCAAkCkU,IAQnD0rB,EAAAlhC,UAAAo9B,cAAA,SAAcmE,EAAgCp5B,EAAak1B,GAA3D,IAAAr6B,EAAAzE,KAuCC,YAvC0D,IAAA8+B,MAAA,GAC1D9+B,KAAKiC,IAAI,gBAAiB+gC,EAAOp5B,EAAMk1B,GAClCl5B,MAAMD,QAAQq9B,KAClBA,GAASA,IAEVA,EAAMp7B,QAAQ,SAAAuP,GACb,IAAMF,EAAO,IAAIJ,EAAepS,EAAKkH,QAASwL,GAAMnC,SAE9CiuB,EAAax+B,EAAKs+B,aAAa9rB,GAC/BisB,EAAcjsB,EAAOgsB,EACrB9yB,EAAS1L,EAAK29B,SAASlhC,IAAIgiC,GAC3BtP,EAAepiB,EAAyByxB,GAExC98B,EAAS,IAAIotB,IAClBpjB,OAAMA,EACNxE,QAASlH,EAAKkH,QACdknB,MAAQpuB,EAAKouB,MACbJ,OAAShuB,EAAKm5B,OACdjL,QAAUluB,EAAKs5B,QACfnK,aAAYA,IACV5U,QAAQva,EAAKmb,QAChBzZ,EAAOuK,MAAM9G,EAAM,EAAGuG,EAAOoN,SAAWqW,EAAckL,GAEjDn5B,EAAQlB,EAAKs4B,eAAe77B,IAAI+V,KACpCxS,EAAKs4B,eAAepsB,IAAIsG,MAExBxS,EAAKs4B,eAAe77B,IAAI+V,GAA6BzO,KAAKrC,GAG3DA,EAAOksB,QAAU,WAChB,GAAI5tB,EAAKs4B,gBAAkBt4B,EAAKs4B,eAAe71B,IAAI+P,GAAO,CACzD,IAAM/Q,EAAUzB,EAAKs4B,eAAe77B,IAAI+V,GAClCnN,EAAQ5D,EAAQmB,QAAQlB,IACf,IAAX2D,GACH5D,EAAQkB,OAAO0C,EAAO,OAKnB9J,MAOR2iC,EAAAlhC,UAAAy9B,eAAA,SAAe8D,EAAgCp5B,GAA/C,IAAAnF,EAAAzE,KAcC,OAbAA,KAAKiC,IAAI,iBAAkB+gC,EAAOp5B,GAC7BhE,MAAMD,QAAQq9B,KAClBA,GAASA,IAEVA,EAAMp7B,QAAQ,SAAAuP,GACb,IAAMF,EAAO,IAAIJ,EAAepS,EAAKkH,QAASwL,GAAMnC,SAEpD,GAAIvQ,EAAKs4B,eAAe71B,IAAI+P,IAAUxS,EAAKs4B,eAAe77B,IAAI+V,GAA6B5U,OAAQ,CAClG,IAAM8D,EAAU1B,EAAKs4B,eAAe77B,IAAI+V,GAA6B7Q,QACrEwD,EAAOnF,EAAKoQ,UAAUjL,GACtBzD,EAAO4hB,KAAKne,MAGP5J,MAOR2iC,EAAAlhC,UAAA0hC,WAAA,SAAWv5B,GACV,IAAMkS,EAAe9b,KAAK6U,UAAUjL,GAOpC,OANA5J,KAAK+8B,eAAen1B,QAAQ,SAAA1B,GAC3B,KAAOA,EAAQ7D,QAAQ,CACP6D,EAAQE,QAChB2hB,KAAKjM,MAGP9b,MAiBR2iC,EAAAlhC,UAAAswB,KAAA,WAGC,OAFA/xB,KAAK+gC,YAAY,gBAAiB,GAClC/gC,KAAK+gC,YAAY,iBAAkB,GAC5B/gC,MAUR2iC,EAAAlhC,UAAA09B,qBAAA,SACC6D,EACAzlB,EACA3T,EACAk1B,GAJD,IAAAr6B,EAAAzE,UAIC,IAAA8+B,MAAA,GAEA,IAAMhjB,EAAe9b,KAAK6U,UAAUjL,GAWpC,OAVA5J,KAAK6+B,cAAcmE,EAAOlnB,EAAcgjB,GACpCn5B,EAAQ4X,IACXvd,KAAK4C,OAAO+C,EAAQq9B,GAAQ,iDAC3BA,EAAsBp7B,QAAQ,SAACuP,EAAMrN,GACrC,IAAMpJ,EAAI6c,EAAStY,KAAKyW,IAAI5R,EAAOyT,EAASlb,OAAS,IACrDoC,EAAKy6B,eAAe/nB,EAAM2E,EAAerX,EAAKoQ,UAAUnU,OAGzDV,KAAKk/B,eAAe8D,EAAOlnB,EAAe9b,KAAK6U,UAAU0I,IAEnDvd,MAYR2iC,EAAAlhC,UAAAkI,IAAA,SAAIwN,EAAuBkK,EAA6Cje,GAEvE,GADApD,KAAK4C,OAAOkD,EAAOqR,IAAS4E,SAAS5E,GAAO,iCAAiCA,GACzErR,EAAOqR,GAAO,CAEjB,IAAM0rB,EAAM,IAAIhsB,EAAe7W,KAAK2L,QAASwL,GAAMnC,SACnDhV,KAAKoiC,SAASz4B,IAAIk5B,EAAKxhB,EAAKje,QAG5BpD,KAAKoiC,SAASz4B,IAAIwN,EAAMkK,EAAKje,GAE9B,OAAOpD,MAMRc,OAAAC,eAAI4hC,EAAAlhC,UAAA,cAAJ,WACC,OAAOzB,KAAKoiC,SAASxgB,wCAMtB+gB,EAAAlhC,UAAAuB,QAAA,WAOC,OANAgF,EAAAvG,UAAMuB,QAAOzC,KAAAP,MACbA,KAAKoiC,SAASp/B,UACdhD,KAAK+8B,eAAen1B,QAAQ,SAAA1B,GAC3BA,EAAQ0B,QAAQ,SAAAzB,GAAU,OAAAA,EAAOnD,cAElChD,KAAK+8B,eAAerP,QACb1tB,MAET2iC,EAtQA,CAA6BjC,gVCP7B0C,GAAA,SAAAp7B,GAiEC,SAAAq7B,IAAA,IAAA5+B,EAECuD,EAAAzH,KAAAP,KAAM0G,EAAqB28B,EAAUrhC,cAAeI,WAAY,WAAY,YAAUpC,KAjEvFyE,EAAA9D,KAAO,YA+BG8D,EAAAkjB,OAEL,IAAI1C,GAAc,WAWbxgB,EAAA6+B,aAAsB,EAsB/B,IAAM/5B,EAAU7C,EAAqB28B,EAAUrhC,cAAeI,WAAY,WAAY,iBAEtFqC,EAAK4kB,MAAQ9f,EAAQkH,KACrBhM,EAAKrB,SAAWmG,EAAQnG,SACxBqB,EAAKrD,MAAQmI,EAAQnI,MACrBqD,EAAK+pB,WAAa/pB,EAAKqQ,QAAQvL,EAAQgmB,WACvC9qB,EAAKgqB,SAAWhqB,EAAKqQ,QAAQvL,EAAQ+lB,SACrC7qB,EAAKwvB,cAAgB1qB,EAAQqqB,aAC7BnvB,EAAK8+B,aAAeh6B,EAAQi6B,YAC5B/+B,EAAKg/B,UAAYl6B,EAAQm6B,SACzBj/B,EAAKsoB,KAAOxjB,EAAQwjB,KACpBtoB,EAAKmvB,aAAerqB,EAAQqqB,eAyQ9B,OAxV+B+P,GAAAN,EAAAr7B,GAkFvBq7B,EAAArhC,YAAP,WACC,OAAOlB,OAAOwF,OAAO2T,GAAgBjY,eACpCoB,SAAWkb,GACXolB,UAAW,EACXjzB,MAAO,EACP6e,QAAU,KACVC,UAAY,EACZxC,MAAO,EACP6G,aAAe,EACf4P,YAAc,EACdpiC,MAAQ,QAUFiiC,EAAA5hC,UAAAmiC,kBAAR,SAA0Br5B,GAA1B,IAAA9F,EAAAzE,UAA0B,IAAAuK,OAAgB,GAEzCvK,KAAK2nB,OAAOnc,YAAYjB,EAAO,SAAAnC,GAC9B,IAAImV,EACJ,GAAoB,YAAhBnV,EAAM+E,MAAqB,EACZ,IAAd/E,EAAM6I,IACTxM,EAAKkH,QAAQ8I,UAAUiZ,MAAMtlB,EAAM6I,IAEpC,IAAM4yB,EAAYz7B,EAAMwB,KAAO3E,KAAK4M,MAAMpN,EAAKwtB,YAAcxtB,EAAKwvB,eAClE,IAAmB,IAAfxvB,EAAK4kB,OAAkB9jB,EAASd,EAAK4kB,QAAU5kB,EAAK4kB,MAAQ,EAAG,CAClE9L,EAAW7T,IACPnE,EAASd,EAAK4kB,SACjB9L,EAAY9Y,EAAU,MAAIA,EAAKq/B,oBAEhC,IAAM/4B,EAAYtG,EAAKkjB,OAAOvd,SAASy5B,GACrB,OAAd94B,IACHwS,EAAWtY,KAAKyW,IAAI6B,EAAUxS,EAAUnB,KAAOi6B,IAE5CtmB,IAAa7T,MAEhBjF,EAAKkjB,OAAOtC,eAAe,UAAWwe,EAAYtmB,EAAW,GAAKtM,IAAM,IACxEsM,EAAW,IAAIkM,GAAWhlB,EAAKkH,QAAS4R,IAEzC,IAAMvY,EAAW,IAAIykB,GAAWhlB,EAAKkH,QAASlH,EAAKq/B,oBACnD17B,EAAM6I,GAAKxM,EAAKkH,QAAQ8I,UAAUub,eACjCvrB,EAAKs/B,MAAMz/B,KAAKG,GAAOO,EAAU,IAAIykB,GAAWhlB,EAAKkH,QAASk4B,GAAYtmB,QAE3EnV,EAAM6I,GAAKxM,EAAKkH,QAAQ8I,UAAU2V,SAAS3lB,EAAKs/B,MAAMz/B,KAAKG,GAAO,IAAIglB,GAAWhlB,EAAKkH,QAASk4B,QASnG/iC,OAAAC,eAAIsiC,EAAA5hC,UAAA,aAAJ,WACC,OAAOzB,KAAK2nB,OAAOvM,eAAepb,KAAK2L,QAAQ8I,UAAUH,wCAM1DxT,OAAAC,eAAIsiC,EAAA5hC,UAAA,mBAAJ,WACC,OAAOzB,KAAKsjC,kBAEb,SAAgB1d,GACf5lB,KAAKsjC,aAAe1d,mCAMrB9kB,OAAAC,eAAIsiC,EAAA5hC,UAAA,mBAAJ,WACC,OAAOzB,KAAKujC,kBAEb,SAAgBS,GACfhkC,KAAKujC,aAAeS,mCAUrBljC,OAAAC,eAAIsiC,EAAA5hC,UAAA,gBAAJ,WACC,OAAOzB,KAAKyjC,eAGb,SAAaQ,GACZjkC,KAAKyjC,UAAYQ,mCAOlBZ,EAAA5hC,UAAAiP,MAAA,SAAM9G,GAUL,OATAA,EAAO5J,KAAK8U,QAAQlL,GACqB,YAArC5J,KAAK2nB,OAAOvM,eAAexR,KAC9B5J,KAAK2nB,OAAOhe,KACXsH,IAAM,EACN9D,MAAQ,UACRvD,KAAIA,IAEL5J,KAAK4jC,kBAAkBh6B,IAEjB5J,MAORqjC,EAAA5hC,UAAAsmB,KAAA,SAAKne,GAGJ,GAFA5J,KAAKsK,OAAOV,GACZA,EAAO5J,KAAK8U,QAAQlL,GACqB,YAArC5J,KAAK2nB,OAAOvM,eAAexR,GAAqB,CACnD5J,KAAK2nB,OAAOtC,eAAe,UAAWzb,GAAQqH,IAAK,IACnD,IAAMxG,EAAgBzK,KAAK2nB,OAAOtd,UAAUT,GACxCs6B,EAAgBt6B,EACE,OAAlBa,IACHy5B,EAAgBz5B,EAAcb,MAE/B5J,KAAK4jC,kBAAkBM,GAExB,OAAOlkC,MAORqjC,EAAA5hC,UAAA6I,OAAA,SAAOV,GAAP,IAAAnF,EAAAzE,KAOC,OANA4J,EAAOtC,EAAWsC,GAAOF,KACzBE,EAAO5J,KAAK8U,QAAQlL,GACpB5J,KAAK2nB,OAAOnc,YAAY5B,EAAM,SAAAxB,GAC7B3D,EAAKkH,QAAQ8I,UAAUiZ,MAAMtlB,EAAM6I,MAEpCjR,KAAK2nB,OAAOrd,OAAOV,GACZ5J,MAQEqjC,EAAA5hC,UAAAsiC,MAAV,SAAgBn6B,GACf,IAAM0K,EAAQtU,KAAK2L,QAAQ8I,UAAUkS,eAAe/c,GACpD,IAAK5J,KAAK+sB,MAA8C,YAAtC/sB,KAAK2nB,OAAOvM,eAAe9G,GAAsB,CAClE,GAAItU,KAAKwjC,YAAc,GAAKv+B,KAAKovB,SAAWr0B,KAAKwjC,YAChD,OAED,GAAIxjC,KAAK0jC,SAAU,CAClB,IAAIO,EAAY,IACXv+B,EAAU1F,KAAK0jC,YACnBO,EAAYjkC,KAAK6U,UAAU7U,KAAK0jC,WAEjC95B,IAAyB,EAAhB3E,KAAKovB,SAAe,GAAK4P,EAEnCjkC,KAAKoD,SAASwG,EAAM5J,KAAKoB,SAOjBiiC,EAAA5hC,UAAAqiC,iBAAV,WACC,OAAO7+B,KAAK4M,OAAO7R,KAAKyuB,SAAWzuB,KAAKwuB,YAAcxuB,KAAKi0B,gBAa5DnzB,OAAAC,eAAIsiC,EAAA5hC,UAAA,YAAJ,WACC,OAAOzB,KAAKqpB,WAEb,SAAS5Y,GACRzQ,KAAKqpB,MAAQ5Y,EACbzQ,KAAK4jC,qDAUN9iC,OAAAC,eAAIsiC,EAAA5hC,UAAA,oBAAJ,WACC,OAAOzB,KAAKi0B,mBAEb,SAAiBG,GAChBp0B,KAAKi0B,cAAgBG,EACrBp0B,KAAK4jC,qDAON9iC,OAAAC,eAAIsiC,EAAA5hC,UAAA,eAAJ,WACC,OAAO,IAAIgoB,GAAWzpB,KAAK2L,QAAS3L,KAAKyuB,UAAU5Z,iBAEpD,SAAYya,GACXtvB,KAAKyuB,SAAWzuB,KAAK8U,QAAQwa,GACzBtvB,KAAKqpB,OACRrpB,KAAK4jC,qDAOP9iC,OAAAC,eAAIsiC,EAAA5hC,UAAA,iBAAJ,WACC,OAAO,IAAIgoB,GAAWzpB,KAAK2L,QAAS3L,KAAKwuB,YAAY3Z,iBAEtD,SAAc0a,GACbvvB,KAAKwuB,WAAaxuB,KAAK8U,QAAQya,GAC3BvvB,KAAKqpB,OACRrpB,KAAK4jC,qDASP9iC,OAAAC,eAAIsiC,EAAA5hC,UAAA,gBAAJ,WACC,GAAIzB,KAAKqpB,MAAO,CACf,IAAM/U,EAAQtU,KAAK2L,QAAQ8I,UAAUH,MAC/B6vB,EAAYnkC,KAAK2nB,OAAOzmB,IAAIoT,GAClC,GAAkB,OAAd6vB,GAA0C,YAApBA,EAAUh3B,MAAqB,CACxD,IAAMi3B,EAAepkC,KAAK8jC,mBAE1B,OADkBxvB,EAAQ6vB,EAAUv6B,MAAQw6B,EAC1BA,EAElB,OAAO,EAGR,OAAO,mCAITf,EAAA5hC,UAAAuB,QAAA,WAKC,OAJAgF,EAAAvG,UAAMuB,QAAOzC,KAAAP,MACbA,KAAKsK,SACLtK,KAAK2nB,OAAO3kB,UACZhD,KAAKoB,MAAQ,KACNpB,MAETqjC,EAxVA,CAA+BppB,gVCL/BoqB,GAAA,SAAAr8B,GAmBC,SAAAs8B,IAAA,IAAA7/B,EAECuD,EAAAzH,KAAAP,KAAM0G,EAAqB49B,EAAKtiC,cAAeI,WAAY,WAAY,aAAWpC,YAnBnFyE,EAAA9D,KAAO,OAKG8D,EAAAkjB,OAGL,IAAI1C,GAAc,WAKfxgB,EAAA8D,QAA0B,IAAIy0B,IAOrBt2B,EAAqB49B,EAAKtiC,cAAeI,WAAY,WAAY,WAGzEmiC,OAAO38B,QAAQ,SAAAQ,GAClBzC,EAAQyC,GACX3D,EAAKkF,IAAIvB,EAAM,GAAIA,EAAM,IAGzB3D,EAAKkF,IAAIvB,OAwZb,OAtb0Bo8B,GAAAF,EAAAt8B,GAmClBs8B,EAAAtiC,YAAP,WACC,OAAOlB,OAAOwF,OAAO88B,GAAUphC,eAC9BuiC,aASFD,EAAA7iC,UAAAiP,MAAA,SAAM9G,EAAsBgc,GAA5B,IAAAnhB,EAAAzE,KACOsU,EAAQtU,KAAK8U,QAAQlL,GAC3B,GAA0C,YAAtC5J,KAAK2nB,OAAOvM,eAAe9G,GAAsB,CACpDsR,EAASte,EAAWse,EAAQ5lB,KAAKqpB,MAAQrpB,KAAKwuB,WAAa,GAE1D5I,EADG5lB,KAAKqpB,MACC/hB,EAAWse,EAAQ5lB,KAAKwuB,YAExBlnB,EAAWse,EAAQ,GAE7B,IAAM6e,EAAiBzkC,KAAK8U,QAAQ8Q,GACpC5lB,KAAK2nB,OAAOhe,KACXsH,IAAM,EACN2U,OAAQ6e,EACRt3B,MAAQ,UACRvD,KAAO0K,IAERtU,KAAK86B,SAAS,SAAA1yB,GACb3D,EAAKigC,WAAWt8B,EAAOkM,EAAOmwB,KAGhC,OAAOzkC,MAUAskC,EAAA7iC,UAAAijC,WAAR,SAAmBt8B,EAAkBkM,EAAcsR,GAClDtR,GAASsR,EACL5lB,KAAKqpB,MACJjhB,EAAM6pB,aAAejyB,KAAKwuB,YAAcpmB,EAAM6pB,YAAcjyB,KAAKyuB,UAChErmB,EAAM6pB,YAAcrM,IAEvBtR,GAAStU,KAAK8jC,oBAEf17B,EAAMsI,MAAM,IAAI+Y,GAAWzpB,KAAK2L,QAAS2I,KAC/BlM,EAAM6pB,YAAcjyB,KAAKwuB,YAAcpmB,EAAM6pB,aAAerM,IACtExd,EAAMqI,MAAO,EACbrI,EAAMsI,MAAM,IAAI+Y,GAAWzpB,KAAK2L,QAAS2I,KAEhClM,EAAM6pB,aAAerM,GAC/Bxd,EAAMsI,MAAM,IAAI+Y,GAAWzpB,KAAK2L,QAAS2I,KAI3CxT,OAAAC,eAAIujC,EAAA7iC,UAAA,mBAAJ,WACC,OAAOzB,KAAKsjC,kBAEb,SAAgB1d,GAAhB,IAAAnhB,EAAAzE,KACCA,KAAKsjC,aAAe1d,EACpB5lB,KAAK86B,SAAS,SAAA1yB,GACbA,EAAM6pB,aAAextB,EAAK6+B,gDAQ5BgB,EAAA7iC,UAAAsmB,KAAA,SAAKne,GACJ,IAAM0K,EAAQtU,KAAK8U,QAAQlL,GAM3B,OALA5J,KAAK2nB,OAAOrd,OAAOgK,GACnBtU,KAAK2nB,OAAOtC,eAAe,UAAW/Q,GACtCtU,KAAK86B,SAAS,SAAA1yB,GACbA,EAAM2f,KAAKne,KAEL5J,MAgBRskC,EAAA7iC,UAAAkjC,GAAA,SAAG/6B,EAAYxI,GAMd,IALA,IAAMwjC,EAAc,IAAI9qB,EAAmB9Z,KAAK2L,QAAS/B,GAAMkL,UACzD4a,EAAW,IAAIjG,GAAWzpB,KAAK2L,QAAS,GAAGkJ,YAE3CmmB,EAAWh7B,KAAKuI,QAAQ+U,SAC1BunB,EAAS7J,EAAS8J,QACdD,EAAOE,MAAM,CACpB,IAAMj6B,EAAQ+5B,EAAOzjC,MACrB,GAAI6D,KAAKmR,IAAIwuB,EAAc95B,EAAMmnB,aAAevC,EAI/C,OAHIpqB,EAAUlE,KACb0J,EAAM1J,MAAQA,GAER0J,EAER+5B,EAAS7J,EAAS8J,OAGnB,OAAIx/B,EAAUlE,IACbpB,KAAK2J,IAAIC,EAAMxI,GAERpB,KAAK2kC,GAAG/6B,IAER,MAsBT06B,EAAA7iC,UAAAkI,IAAA,SAAIC,EAAqBxI,GAOxB,IAAIgH,EA4BJ,OAjCI5C,EAASoE,IAASA,EAAKlI,eAAe,UAEzCkI,GADAxI,EAAQwI,GACKA,MAEdA,EAAO5J,KAAK8U,QAAQlL,GAEhBxI,aAAiBgiC,IACpBh7B,EAAQhH,GACFgC,SAAWpD,KAAK+jC,MAAMz/B,KAAKtE,MAEjCoI,EAAQ,IAAIg7B,IACXhgC,SAAWpD,KAAK+jC,MAAMz/B,KAAKtE,MAC3B2L,QAAS3L,KAAK2L,QACdvK,MAAKA,IAIPgH,EAAM6pB,YAAcroB,EAGpBxB,EAAMuI,KACL+yB,SAAW1jC,KAAK0jC,SAChBjzB,KAAOzQ,KAAKyQ,KACZ6e,QAAUtvB,KAAKsvB,QACfC,UAAYvvB,KAAKuvB,UACjBqE,aAAe5zB,KAAK4zB,aACpB4P,YAAcxjC,KAAKwjC,cAGpBxjC,KAAKuI,QAAQoB,IAAIvB,GAGjBpI,KAAKglC,cAAc58B,GACZpI,MAMAskC,EAAA7iC,UAAAujC,cAAR,SAAsB58B,GAAtB,IAAA3D,EAAAzE,KACCA,KAAK2nB,OAAO/f,QAAQ,SAACoqB,GACK,YAArBA,EAAW7kB,MACd1I,EAAKigC,WAAWt8B,EAAO4pB,EAAWpoB,KAAMooB,EAAWpM,QAGnDxd,EAAM2f,KAAK,IAAI0B,GAAWhlB,EAAKkH,QAASqmB,EAAWpoB,UAgBtD06B,EAAA7iC,UAAAwI,OAAA,SAAOL,EAAqBxI,GAA5B,IAAAqD,EAAAzE,KAeC,OAbIwF,EAASoE,IAASA,EAAKlI,eAAe,UAEzCkI,GADAxI,EAAQwI,GACKA,MAEdA,EAAO5J,KAAK8U,QAAQlL,GACpB5J,KAAKuI,QAAQX,QAAQ,SAAAQ,GAChBA,EAAM6pB,cAAgBroB,IACrBxE,EAAQhE,IAAWkE,EAAUlE,IAAUgH,EAAMhH,QAAUA,KAC1DqD,EAAK8D,QAAQ80B,OAAOj1B,GACpBA,EAAMpF,aAIFhD,MAMRskC,EAAA7iC,UAAAisB,MAAA,WAGC,OAFA1tB,KAAK86B,SAAS,SAAA1yB,GAAS,OAAAA,EAAMpF,YAC7BhD,KAAKuI,QAAQmlB,QACN1tB,MAORskC,EAAA7iC,UAAA6I,OAAA,SAAOC,GAGN,OAFAvK,KAAK86B,SAAS,SAAA1yB,GAAS,OAAAA,EAAMkC,OAAOC,KACpCvK,KAAK2nB,OAAOrd,OAAOtK,KAAK8U,QAAQvK,IACzBvK,MAMAskC,EAAA7iC,UAAAq5B,SAAR,SAAiB13B,GAUhB,OATIpD,KAAKuI,SACRvI,KAAKuI,QAAQX,QAAQ,SAAAQ,GAChBA,aAAiBk8B,EACpBl8B,EAAM0yB,SAAS13B,GAEfA,EAASgF,KAILpI,MAQAskC,EAAA7iC,UAAAwjC,QAAR,SAAgBC,EAAc9jC,GAC7BpB,KAAK86B,SAAS,SAAA1yB,GACbA,EAAM88B,GAAQ9jC,KAQNkjC,EAAA7iC,UAAAsiC,MAAV,SAAgBn6B,EAAexI,GACzBpB,KAAK+sB,MACT/sB,KAAKoD,SAASwG,EAAMxI,IASdkjC,EAAA7iC,UAAA0jC,mBAAR,SAA2B/8B,GACtBpI,KAAKqpB,QAAUjhB,EAAM6pB,YAAcjyB,KAAKwuB,YAAcpmB,EAAM6pB,aAAejyB,KAAKyuB,UACnFrmB,EAAMkC,OAAO,GACa,YAAhBlC,EAAM+E,OAEhBnN,KAAKglC,cAAc58B,IAOrBtH,OAAAC,eAAIujC,EAAA7iC,UAAA,mBAAJ,WACC,OAAOzB,KAAKujC,kBAEb,SAAgBS,GACfhkC,KAAKujC,aAAeS,EACpBhkC,KAAKilC,QAAQ,cAAejB,oCAU7BljC,OAAAC,eAAIujC,EAAA7iC,UAAA,gBAAJ,WACC,OAAOzB,KAAKyjC,eAEb,SAAaQ,GACZjkC,KAAKyjC,UAAYQ,EACjBjkC,KAAKilC,QAAQ,WAAYhB,oCAgB1BnjC,OAAAC,eAAIujC,EAAA7iC,UAAA,YAAJ,WACC,OAAOzB,KAAKqpB,WAEb,SAAS5Y,GAAT,IAAAhM,EAAAzE,KACCA,KAAKqpB,MAAQ5Y,EACbzQ,KAAK86B,SAAS,SAAA1yB,GACbA,EAAMmnB,UAAY9qB,EAAK8qB,UACvBnnB,EAAMknB,QAAU7qB,EAAK6qB,QACrBlnB,EAAMqI,KAAOA,EACbhM,EAAK0gC,mBAAmB/8B,sCAW1BtH,OAAAC,eAAIujC,EAAA7iC,UAAA,eAAJ,WACC,OAAO,IAAIgoB,GAAWzpB,KAAK2L,QAAS3L,KAAKyuB,UAAU5Z,iBAEpD,SAAYya,GAAZ,IAAA7qB,EAAAzE,KACCA,KAAKyuB,SAAWzuB,KAAK8U,QAAQwa,GACzBtvB,KAAKqpB,OACRrpB,KAAK86B,SAAS,SAAA1yB,GACbA,EAAMknB,QAAUA,EAChB7qB,EAAK0gC,mBAAmB/8B,sCAS3BtH,OAAAC,eAAIujC,EAAA7iC,UAAA,iBAAJ,WACC,OAAO,IAAIgoB,GAAWzpB,KAAK2L,QAAS3L,KAAKwuB,YAAY3Z,iBAEtD,SAAc0a,GAAd,IAAA9qB,EAAAzE,KACCA,KAAKwuB,WAAaxuB,KAAK8U,QAAQya,GAC3BvvB,KAAKqpB,OACRrpB,KAAK86B,SAAS,SAAA1yB,GACbA,EAAMmnB,UAAY9qB,EAAK8qB,UACvB9qB,EAAK0gC,mBAAmB/8B,sCAQ3BtH,OAAAC,eAAIujC,EAAA7iC,UAAA,oBAAJ,WACC,OAAOzB,KAAKi0B,mBAEb,SAAiBG,GAChBp0B,KAAKi0B,cAAgBG,EACrBp0B,KAAKilC,QAAQ,eAAgB7Q,oCAM9BtzB,OAAAC,eAAIujC,EAAA7iC,UAAA,cAAJ,WACC,OAAOzB,KAAKuI,QAAQ+0B,sCAGrBgH,EAAA7iC,UAAAuB,QAAA,WAGC,OAFAgF,EAAAvG,UAAMuB,QAAOzC,KAAAP,MACbA,KAAK0tB,QACE1tB,MAETskC,EAtbA,CAA0BlB,gVCA1BgC,GAAA,SAAAp9B,GAiCC,SAAAq9B,IAAA,IAAA5gC,EAECuD,EAAAzH,KAAAP,KAAM0G,EAAqB2+B,EAASrjC,cAAeI,WAAY,WAAY,SAAU,kBAAgBpC,KAjCtGyE,EAAA9D,KAAO,WAUC8D,EAAA6gC,MAAc,IAAIjB,IACzBjhC,SAAUqB,EAAK8gC,aAAajhC,KAAKG,GACjCkH,QAASlH,EAAKkH,UAMPlH,EAAA8D,WAKA9D,EAAA+gC,gBAWP,IAAMj8B,EAAU7C,EAAqB2+B,EAASrjC,cAAeI,WAAY,WAAY,SAAU,uBAE/FqC,EAAKghC,aAAehhC,EAAKqQ,QAAQvL,EAAQqM,aAEzCnR,EAAK8/B,OAASh7B,EAAQg7B,OAGtB9/B,EAAKgM,KAAOlH,EAAQkH,KACpBhM,EAAK8qB,UAAYhmB,EAAQgmB,UACzB9qB,EAAK6qB,QAAU/lB,EAAQ+lB,QACvB7qB,EAAKmvB,aAAerqB,EAAQqqB,aAC5BnvB,EAAK++B,YAAcj6B,EAAQi6B,YAC3B/+B,EAAKi/B,SAAWn6B,EAAQm6B,SACxBj/B,EAAKsoB,KAAOxjB,EAAQwjB,KACpBtoB,EAAKmvB,aAAerqB,EAAQqqB,eAgO9B,OAlR8B8R,GAAAL,EAAAr9B,GAqDtBq9B,EAAArjC,YAAP,WACC,OAAOlB,OAAOwF,OAAQmB,EAAe27B,GAAUphC,eAAgB,WAC9DuiC,UACA9zB,MAAM,EACN6e,QAAU,EACVC,UAAW,EACX3Z,YAAa,QAOPyvB,EAAA5jC,UAAA8jC,aAAR,SAAqB37B,EAAexI,GACrB,OAAVA,GACHpB,KAAKoD,SAASwG,EAAMxI,IAOtBN,OAAAC,eAAIskC,EAAA5jC,UAAA,cAAJ,WACC,OAAOzB,KAAKuI,aAEb,SAAW3G,GACV5B,KAAK0tB,QACL1tB,KAAKwlC,aAAe5jC,EACpB5B,KAAKuI,QAAUvI,KAAK2lC,gBAAgB3lC,KAAKwlC,cACzCxlC,KAAK4lC,kDAQNP,EAAA5jC,UAAAiP,MAAA,SAAM9G,EAAsBgc,GAE3B,OADA5lB,KAAKslC,MAAM50B,MAAM9G,EAAMgc,EAAS5lB,KAAK6lC,WAAWjgB,GAAUA,GACnD5lB,MAORqlC,EAAA5jC,UAAAsmB,KAAA,SAAKne,GAEJ,OADA5J,KAAKslC,MAAMvd,KAAKne,GACT5J,MAQRc,OAAAC,eAAIskC,EAAA5jC,UAAA,mBAAJ,WACC,OAAO,IAAIgoB,GAAWzpB,KAAK2L,QAAS3L,KAAKylC,cAAc5wB,6CAMhDwwB,EAAA5jC,UAAAkkC,gBAAR,SAAwBvjB,GAAxB,IAAA3d,EAAAzE,KACC,OAAO,IAAI8lC,MAAM1jB,GAChBlhB,IAAK,SAAC+E,EAAezE,GAEpB,OAAOyE,EAAOzE,IAEfmP,IAAK,SAAC1K,EAAezE,EAAuBJ,GAC3C,GAAIyE,EAASrE,IAAaua,SAASjJ,SAAStR,EAAU,KAAM,CAC7CsR,SAAStR,EAAU,IAC7BmE,EAAQvE,GACX6E,EAAOzE,GAAYiD,EAAKkhC,gBAAgBvkC,GAExC6E,EAAOzE,GAAYJ,OAGpB6E,EAAOzE,GAAYJ,EAIpB,OAFAqD,EAAKmhC,kBAEE,MAQFP,EAAA5jC,UAAAmkC,eAAR,WACC5lC,KAAKslC,MAAM5X,QACX1tB,KAAK+lC,oBAAoB/lC,KAAKwlC,aAAcxlC,KAAKylC,aAAczlC,KAAKiyB,aAEpEjyB,KAAKsvB,QAAUtvB,KAAKsvB,SAMb+V,EAAA5jC,UAAAskC,oBAAR,SAA4BC,EAAiBpwB,EAAoBqc,GAAjE,IAAAxtB,EAAAzE,KACCgmC,EAASp+B,QAAQ,SAACxG,EAAO0I,GACxB,IAAMm8B,EAAcn8B,EAAQ,EAAgBmoB,EAC5C,GAAItsB,EAAQvE,GACXqD,EAAKshC,oBAAoB3kC,EAAOwU,EAAcxU,EAAMiB,OAAQ4jC,OACtD,CACN,IAAM36B,EAAY,IAAIme,GAAWhlB,EAAKkH,QAASs6B,EAAa,KAAKpxB,YACjEpQ,EAAK6gC,MAAM37B,IAAI2B,EAAWlK,OAWrBikC,EAAA5jC,UAAAokC,WAAR,SAAmB/7B,GAClB,OAAO,IAAI2f,GAAWzpB,KAAK2L,QAAS7B,EAAS9J,KAAiB,aAAIA,KAAKiyB,aAAapd,aAMrFwwB,EAAA5jC,UAAAisB,MAAA,WAEC,OADA1tB,KAAKslC,MAAM5X,QACJ1tB,MAGRqlC,EAAA5jC,UAAAuB,QAAA,WAGC,OAFAgF,EAAAvG,UAAMuB,QAAOzC,KAAAP,MACbA,KAAKslC,MAAMtiC,UACJhD,MAORc,OAAAC,eAAIskC,EAAA5jC,UAAA,YAAJ,WACC,OAAOzB,KAAKslC,MAAM70B,UAEnB,SAASpQ,GACJL,KAAKslC,QACRtlC,KAAKslC,MAAM70B,KAAOpQ,oCAOpBS,OAAAC,eAAIskC,EAAA5jC,UAAA,iBAAJ,WACC,OAAOzB,KAAKwuB,gBAEb,SAAc1kB,GACb9J,KAAKwuB,WAAa1kB,EACd9J,KAAKslC,QACRtlC,KAAKslC,MAAM/V,UAAYvvB,KAAK6lC,WAAW/7B,qCAOzChJ,OAAAC,eAAIskC,EAAA5jC,UAAA,eAAJ,WACC,OAAOzB,KAAKyuB,cAEb,SAAY3kB,GACX9J,KAAKyuB,SAAW3kB,EACZ9J,KAAKslC,QAEPtlC,KAAKslC,MAAMhW,QADE,IAAVxlB,EACkB9J,KAAK6lC,WAAW7lC,KAAKwlC,aAAanjC,QAElCrC,KAAK6lC,WAAW/7B,qCAKxChJ,OAAAC,eAAIskC,EAAA5jC,UAAA,mBAAJ,WACC,OAAOzB,KAAKslC,MAAMrT,iBAEnB,SAAgBvhB,GACX1Q,KAAKslC,QACRtlC,KAAKslC,MAAMrT,YAAcvhB,oCAI3B5P,OAAAC,eAAIskC,EAAA5jC,UAAA,oBAAJ,WACC,OAAOzB,KAAKslC,MAAM1R,kBAEnB,SAAiBQ,GACZp0B,KAAKslC,QACRtlC,KAAKslC,MAAM1R,aAAeQ,oCAI5BtzB,OAAAC,eAAIskC,EAAA5jC,UAAA,mBAAJ,WACC,OAAOzB,KAAKslC,MAAM9B,iBAEnB,SAAgBQ,GACXhkC,KAAKslC,QACRtlC,KAAKslC,MAAM9B,YAAcQ,oCAI3BljC,OAAAC,eAAIskC,EAAA5jC,UAAA,gBAAJ,WACC,OAAOzB,KAAKslC,MAAM5B,cAEnB,SAAaO,GACRjkC,KAAKslC,QACRtlC,KAAKslC,MAAM5B,SAAWO,oCAOxBnjC,OAAAC,eAAIskC,EAAA5jC,UAAA,cAAJ,WACC,OAAOzB,KAAKslC,MAAMjjC,wCAEpBgjC,EAlRA,CAA8BjC,gVCzB9B8C,GAAA,SAAAl+B,GAAA,SAAAm+B,IAAA,IAAA1hC,EAAA,OAAAuD,KAAArF,MAAA3C,KAAAoC,YAAApC,YAECyE,EAAA9D,KAAO,cAKC8D,EAAAk0B,MAAQ,IAAIb,IACnBnsB,QAASlH,EAAKkH,QACdssB,QAAS,SAAAW,GAAK,OAAc,EAAd3zB,KAAKmR,IAAIwiB,GAAS,KAEvBn0B,EAAAoa,mBAAqBpa,EAAKk0B,OAKpCl0B,EAAAuW,MAAQvW,EAAKk0B,MAKbl0B,EAAAmb,OAASnb,EAAKk0B,QAUf,OA/BiCyN,GAAAD,EAAAn+B,GA0BhCm+B,EAAA1kC,UAAAuB,QAAA,WAGC,OAFAgF,EAAAvG,UAAMuB,QAAOzC,KAAAP,MACbA,KAAK24B,MAAM31B,UACJhD,MAETmmC,EA/BA,CAAiCxO,gVCgCjC0O,GAAA,SAAAr+B,GA0DC,SAAAs+B,IAAA,IAAA7hC,EACCuD,EAAAzH,KAAAP,KAAMc,OAAOwF,OAAOI,EAAqB4/B,EAAUtkC,cAAeI,WAAY,YAAUpC,KAzDzFyE,EAAA9D,KAAO,YAKC8D,EAAA8hC,QAA4B9hC,EAAKkH,QAAQqD,qBAKzCvK,EAAA+hC,OAA8B/hC,EAAKkH,QAAQqC,sBAAsB,GAMjEvJ,EAAAgiC,KAAoB,IAAIP,IAAcv6B,QAAUlH,EAAKkH,UAK7DlH,EAAA4U,EAAU,IAAIgH,IACb1U,QAAUlH,EAAKkH,QACfiQ,KAAM,IAMPnX,EAAAiV,EAAU,IAAI2G,IACb1U,QAAUlH,EAAKkH,QACfiQ,KAAM,IAMPnX,EAAAmb,OAAe,IAAIS,IAAO1U,QAAUlH,EAAKkH,UAc/BlH,EAAAoa,mBAAqBpa,EAAK4U,EAAG5U,EAAKiV,GAO3C,IAAMnQ,EAAU7C,EAAqB4/B,EAAUtkC,cAAeI,WAAY,gBAE1EqC,EAAKiiC,KAAO,IAAIvR,IACfxpB,QAASlH,EAAKkH,QACdsG,MAAO,cACP7Q,MAAOmI,EAAQm9B,OAEhBvoB,GAAS1Z,EAAM,QAEfA,EAAKkH,QAAQsE,YAAY,GAAG+O,QAAQva,EAAK8hC,SACzC9hC,EAAK8hC,QAAQvnB,QAAQva,EAAK+hC,QAC1BxnB,GAAQva,EAAK+hC,OAAQ/hC,EAAK4U,EAAEuC,KAAM,GAClCoD,GAAQva,EAAK+hC,OAAQ/hC,EAAKiV,EAAEkC,KAAM,GAElCnX,EAAKiiC,KAAK7mB,MAAMpb,EAAKgiC,KAAMhiC,EAAK8hC,QAAQI,KAExCliC,EAAK4U,EAAE2F,QAAQva,EAAKmb,QACpBnb,EAAKiV,EAAEsF,QAAQva,EAAKmb,UAoBtB,OAjG+BgnB,GAAAN,EAAAt+B,GAgFvBs+B,EAAAtkC,YAAP,WACC,OAAOlB,OAAOwF,OAAOiY,GAAcvc,eAClC0kC,KAAM,MAIRJ,EAAA7kC,UAAAuB,QAAA,WASC,OARAgF,EAAAvG,UAAMuB,QAAOzC,KAAAP,MACbA,KAAKqZ,EAAErW,UACPhD,KAAK0Z,EAAE1W,UACPhD,KAAK4f,OAAO5c,UACZhD,KAAK0mC,KAAK1jC,UACVhD,KAAKymC,KAAKzjC,UACVhD,KAAKumC,QAAQ11B,aACb7Q,KAAKwmC,OAAO31B,aACL7Q,MAETsmC,EAjGA,CAA+B/nB,gVCzB/BsoB,GAAA,SAAA7+B,GAuCC,SAAA8+B,EAAYv9B,GAAZ,IAAA9E,EACCuD,EAAAzH,KAAAP,KAAMuJ,IAAQvJ,YArCfyE,EAAA9D,KAAO,SAKC8D,EAAAsiC,QAAqB,IAAIV,IAAY16B,QAAUlH,EAAKkH,UAO5DlH,EAAAuiC,IAA2BviC,EAAKsiC,QAAQL,KAK9BjiC,EAAAwiC,WAAmB,IAAI5mB,IAAO1U,QAAUlH,EAAKkH,UAK7ClH,EAAAyiC,aAAqB,IAAI7mB,IAAO1U,QAAUlH,EAAKkH,UAKzDlH,EAAAuW,MAAc,IAAIqF,IAAO1U,QAAUlH,EAAKkH,UAKxClH,EAAAmb,OAASnb,EAAKsiC,QAEJtiC,EAAAoa,mBAAsCpa,EAAKuW,MAAOvW,EAAKmb,OAAQnb,EAAKyiC,aAAcziC,EAAKwiC,YAMhGxiC,EAAKuW,MAAMgF,IAAIvb,EAAKsiC,QAAQ1tB,EAAG5U,EAAKwiC,YACpCxiC,EAAKyiC,aAAaloB,QAAQva,EAAKsiC,QAAQrtB,GACvCjV,EAAKuiC,IAAIxsB,eAAejR,EAAQy9B,IAAK,GACrC7oB,GAAS1Z,EAAM,SAyBjB,OAtEQ0iC,GAAAL,EAAA9+B,GAgDA8+B,EAAA9kC,YAAP,WACC,OAAOlB,OAAOwF,OAAOiY,GAAcvc,eAClCglC,IAAM,KAOEF,EAAArlC,UAAA2lC,cAAV,SAAwBC,GAEvB,OADArnC,KAAKinC,WAAWpnB,MAAMwnB,EAAQrnC,KAAKknC,cAC5BlnC,MAGR8mC,EAAArlC,UAAAuB,QAAA,WAMC,OALAgF,EAAAvG,UAAMuB,QAAOzC,KAAAP,MACbA,KAAK+mC,QAAQ/jC,UACbhD,KAAKinC,WAAWjkC,UAChBhD,KAAKknC,aAAalkC,UAClBhD,KAAKgnC,IAAIhkC,UACFhD,MAET8mC,EAvEA,CACQvoB,gVCIR+oB,GAAA,SAAAt/B,GAcC,SAAAu/B,EAAYh+B,GAAZ,IAAA9E,EAECuD,EAAAzH,KAAAP,KAAMuJ,IAAQvJ,YAdfyE,EAAA9D,KAAO,iBAgBN8D,EAAK+iC,cAAgB,IAAInnB,IACxB1U,QAASlH,EAAKkH,QACdiQ,KAAMrS,EAAQmF,SACduD,MAAO,gBAGRxN,EAAKiK,SAAWjK,EAAK+iC,cAAc5rB,KACnCuC,GAAS1Z,EAAM,YAGfA,EAAKyiC,aAAarnB,MAAMpb,EAAK+iC,cAAe/iC,EAAKwiC,cAenD,OA3CoFQ,GAAAF,EAAAv/B,GA+B5Eu/B,EAAAvlC,YAAP,WACC,OAAOlB,OAAOwF,OAAOugC,GAAO7kC,eAC3B0M,SAAU,QAIZ64B,EAAA9lC,UAAAuB,QAAA,WAIC,OAHAgF,EAAAvG,UAAMuB,QAAOzC,KAAAP,MACbA,KAAKwnC,cAAcxkC,UACnBhD,KAAK0O,SAAS1L,UACPhD,MAETunC,EA3CA,CAAoFV,gVCCpFa,GAAA,SAAA1/B,GAcC,SAAA2/B,IAAA,IAAAljC,EAECuD,EAAAzH,KAAAP,KAAM0G,EAAqBihC,EAAc3lC,cAAeI,WAAY,YAAa,eAAapC,KACxFuJ,EAAU7C,EAAqBihC,EAAc3lC,cAAeI,WAAY,YAAa,oBAE3FqC,EAAKsgB,WAAa,IAAIL,IACrB/Y,QAASlH,EAAKkH,QACdmZ,UAAWvb,EAAQub,UACnBD,SAAUtb,EAAQsb,WAEnBpgB,EAAKqgB,UAAYrgB,EAAKsgB,WAAWD,UACjCrgB,EAAKoa,kBAAkBrW,KAAK/D,EAAKsgB,YAGjCtgB,EAAK2iC,cAAc3iC,EAAKsgB,YACxB5G,GAAS1Z,EAAM,eAgBjB,OA7CmCmjC,GAAAD,EAAA3/B,GAgC3B2/B,EAAA3lC,YAAP,WACC,OAAOlB,OAAOwF,OAAOghC,GAAetlC,eACnC8iB,UAAW,IACXD,SAAU,KAIZ8iB,EAAAlmC,UAAAuB,QAAA,WAIC,OAHAgF,EAAAvG,UAAMuB,QAAOzC,KAAAP,MACbA,KAAK+kB,WAAW/hB,UAChBhD,KAAK8kB,UAAU9hB,UACRhD,MAET2nC,EA7CA,CAAmCL,8nDCDnCO,GAAA,SAAA7/B,GAgBC,SAAA8/B,IAAA,IAAArjC,EAECuD,EAAAzH,KAAAP,KAAM0G,EAAqBohC,EAAU9lC,cAAeI,WAAY,MAAO,aAAWpC,KAhBnFyE,EAAA9D,KAAO,YAKC8D,EAAAsjC,WAA4BtjC,EAAKkH,QAAQwC,kBAYhD,IAAM5E,EAAU7C,EAAqBohC,EAAU9lC,cAAeI,WAAY,MAAO,kBAEjFqC,EAAKkd,QAAU,IAAIV,GAAgB1X,EAAQ8X,IAAK,SAAAlR,GAC/C1L,EAAK0L,OAASA,EACd5G,EAAQ4X,WAIL1c,EAAKkd,QAAQC,SAChBnd,EAAK0L,OAAS1L,EAAKkd,SAIpBld,EAAKujC,UAAYz+B,EAAQy+B,UAGzBvjC,EAAK2iC,cAAc3iC,EAAKsjC,cAiE1B,OApG+BE,GAAAH,EAAA9/B,GAsCvB8/B,EAAA9lC,YAAP,WACC,OAAOlB,OAAOwF,OAAOugC,GAAO7kC,eAC3BgmC,WAAY,EACZ7mB,OAAS7C,MAULwpB,EAAArmC,UAAA8f,KAAN,SAAWF,mGACI,OAAd9a,EAAAvG,MAAc,EAAMA,KAAK2hB,QAAQJ,KAAKF,kBAAtC9a,EAAK4J,OAAS3J,EAAAwJ,iBAMflP,OAAAC,eAAI+mC,EAAArmC,UAAA,cAAJ,WACC,OAAIzB,KAAK2hB,QAAQtf,OACTrC,KAAK2hB,QAEL,UAGT,SAAWxR,GACNA,GACHnQ,KAAK2hB,QAAQhR,IAAIR,GAGdnQ,KAAK+nC,WAAW53B,SAEnBnQ,KAAKinC,WAAWp2B,aAChB7Q,KAAK+nC,WAAWl3B,aAEhB7Q,KAAK+nC,WAAa/nC,KAAK2L,QAAQwC,kBAC/BnO,KAAKonC,cAAcpnC,KAAK+nC,aAEzB,IAAMG,EAAOloC,KAAK2hB,QAAQzgB,MAC1BlB,KAAK+nC,WAAW53B,OAAS+3B,GAAc,sCAQxCpnC,OAAAC,eAAI+mC,EAAArmC,UAAA,iBAAJ,WACC,OAAOzB,KAAK+nC,WAAWC,eAExB,SAAcG,GACbnoC,KAAK+nC,WAAWC,UAAYG,mCAG7BL,EAAArmC,UAAAuB,QAAA,WAIC,OAHAgF,EAAAvG,UAAMuB,QAAOzC,KAAAP,MACbA,KAAK2hB,QAAQ3e,UACbhD,KAAK+nC,WAAWl3B,aACT7Q,MAET8nC,EApGA,CAA+BjB,gVCN/BuB,GAAA,SAAApgC,GAyBC,SAAAqgC,IAAA,IAAA5jC,EACCuD,EAAAzH,KAAAP,KAAM0G,EAAqB2hC,EAASrmC,cAAeI,WAAY,OAAQ,WAASpC,KAxBjFyE,EAAA9D,KAAO,WAQC8D,EAAA6jC,UAAY7jC,EAAKkH,QAAQ4B,iBACvB9I,EAAAoa,mBAAqBpa,EAAK6jC,WAgBnC,IAAM/+B,EAAU7C,EAAqB2hC,EAASrmC,cAAeI,WAAY,OAAQ,gBAEjFqC,EAAK64B,KAAO/zB,EAAQ+zB,KACpB74B,EAAKpB,KAAOkG,EAAQlG,KACpBoB,EAAKuW,MAAQvW,EAAKmb,OAASnb,EAAK6jC,YAkElC,OAjG8BC,GAAAF,EAAArgC,GAkCtBqgC,EAAArmC,YAAP,WACC,OAAOlB,OAAOwF,OAAOiY,GAAcvc,eAClC+L,eAAgB,EAChBE,gBAAiB,EACjBqvB,KAAM,KACNkL,UAAW,GACXnlC,KAAM,SAORglC,EAAA5mC,UAAAgnC,SAAA,WAMC,MALmB,QAAfzoC,KAAKwD,MACRxD,KAAKsoC,UAAUI,sBAAsB1oC,KAAK2hB,SACjB,aAAf3hB,KAAKwD,OACfxD,KAAKsoC,UAAUK,uBAAuB3oC,KAAK2hB,SAErC3hB,KAAK2hB,SAMb7gB,OAAAC,eAAIsnC,EAAA5mC,UAAA,YAAJ,WACC,OAAOzB,KAAKsoC,UAAUM,uBAEvB,SAAStL,GACRt9B,KAAKsoC,UAAUnR,QAAiB,EAAPmG,EACzBt9B,KAAK2hB,QAAU,IAAIiB,aAAa0a,oCAMjCx8B,OAAAC,eAAIsnC,EAAA5mC,UAAA,YAAJ,WACC,OAAOzB,KAAKwD,WAEb,SAASH,GACRrD,KAAK4C,OAAgB,aAATS,GAAgC,QAATA,EAAgB,2BAA2BA,GAC9ErD,KAAKwD,MAAQH,mCAMdvC,OAAAC,eAAIsnC,EAAA5mC,UAAA,iBAAJ,WACC,OAAOzB,KAAKsoC,UAAUO,2BAGvB,SAAc34B,GACblQ,KAAKsoC,UAAUO,sBAAwB34B,mCAMxCm4B,EAAA5mC,UAAAuB,QAAA,WAGC,OAFAgF,EAAAvG,UAAMuB,QAAOzC,KAAAP,MACbA,KAAKsoC,UAAUz3B,aACR7Q,MAETqoC,EAjGA,CAA8B9pB,gVCI9BuqB,GAAA,SAAA9gC,GAwBC,SAAA+gC,IAAA,IAAAtkC,EACCuD,EAAAzH,KAAAP,KAAM0G,EAAqBqiC,EAAM/mC,cAAeI,WAAY,eAAapC,KAvB1EyE,EAAA9D,KAAO,QAiBG8D,EAAAoa,qBAOT,IAAMtV,EAAU7C,EAAqBqiC,EAAM/mC,cAAeI,WAAY,oBAEtEqC,EAAKukC,QAAUvkC,EAAKmb,OAASnb,EAAKuW,MAAQvW,EAAKkH,QAAQmC,oBAAoBvE,EAAQmX,UAGnFjc,EAAKsJ,eAAiBxE,EAAQmX,SAE9Bjc,EAAKwJ,gBAAkB,IAezB,OAhD2Bg7B,GAAAF,EAAA/gC,GAoCnB+gC,EAAA/mC,YAAP,WACC,OAAOlB,OAAOwF,OAAOiY,GAAcvc,eAClC0e,SAAU,EACVzS,gBAAkB,KAIpB86B,EAAAtnC,UAAAuB,QAAA,WAGC,OAFAgF,EAAAvG,UAAMuB,QAAOzC,KAAAP,MACbA,KAAKgpC,QAAQn4B,aACN7Q,MAET+oC,EAhDA,CAA2BxqB,gVCS3B2qB,GAAA,SAAAlhC,GAyCC,SAAAmhC,IAAA,IAAA1kC,EACCuD,EAAAzH,KAAAP,KAAM0G,EAAqByiC,EAAOnnC,cAAeI,WAAY,YAAa,OAAQ,cAAYpC,KAxC/FyE,EAAA9D,KAAO,SAEE8D,EAAAuW,MAAQ,IAAIqF,IAAO1U,QAASlH,EAAKkH,UACjClH,EAAAmb,OAAS,IAAIS,IAAO1U,QAASlH,EAAKkH,UACnClH,EAAA2kC,YAKE3kC,EAAAoa,mBAAqBpa,EAAKuW,OAAKvU,OAAKhC,EAAK2kC,UAAU3kC,EAAKmb,SAgCjE,IAAMrW,EAAU7C,EAAqByiC,EAAOnnC,cAAeI,WAAY,YAAa,OAAQ,mBAE5FqC,EAAK2kC,YAEL3kC,EAAK4kC,EAAI,IAAIlU,IACZxpB,QAASlH,EAAKkH,QACdsG,MAAO,WACP7Q,MAAOmI,EAAQ8/B,IAEhB5kC,EAAKmN,UAAY,IAAIujB,IACpBxpB,QAASlH,EAAKkH,QACdsG,MAAO,YACP7Q,MAAOmI,EAAQqI,YAEhBnN,EAAKmxB,OAAS,IAAIT,IACjBxpB,QAASlH,EAAKkH,QACdsG,MAAO,QACP7Q,MAAOmI,EAAQqsB,SAEhBnxB,EAAKmX,KAAO,IAAIuZ,IACfxpB,QAASlH,EAAKkH,QACdsG,MAAO,WACP7Q,MAAOmI,EAAQqS,OAEhBnX,EAAKjB,MAAQ+F,EAAQlG,KACrBoB,EAAK6kC,QAAU//B,EAAQ+/B,QACvBnrB,GAAS1Z,GAAO,SAAU,YAAa,OAAQ,QA6GjD,OAlL4B8kC,GAAAJ,EAAAnhC,GAwEpBmhC,EAAAnnC,YAAP,WACC,OAAOlB,OAAOwF,OAAOiY,GAAcvc,eAClCqnC,EAAG,EACHzT,OAAQ,EACRhkB,UAAW,IACXgK,KAAM,EACN0tB,SAAU,GACVjmC,KAAM,aAQRvC,OAAAC,eAAIooC,EAAA1nC,UAAA,YAAJ,WACC,OAAOzB,KAAKwD,WAEb,SAASH,GAGRrD,KAAK4C,QAAgC,KAFF,UAAW,WAAY,WACzD,WAAY,YAAa,QAAS,UAAW,WAC5ByE,QAAQhE,GAAc,wBAAwBA,GAChErD,KAAKwD,MAAQH,EACbrD,KAAKopC,SAASxhC,QAAQ,SAAA4hC,GAAU,OAAAA,EAAOnmC,KAAOA,qCAQ/CvC,OAAAC,eAAIooC,EAAA1nC,UAAA,eAAJ,WACC,OAAOzB,KAAKypC,cAEb,SAAYH,GACX,IAAMI,EAAankC,EAAS+jC,GAAWA,EAAUx2B,SAASw2B,EAAS,IAC7DK,IAAkB,IAAK,IAAK,IAAK,IACnCC,EAAiBD,EAActiC,QAAQqiC,GAE3C1pC,KAAK4C,QAA2B,IAApBgnC,EAAuB,uBAAuBD,EAAchzB,KAAK,OAC7EizB,GAAkB,EAElB5pC,KAAKypC,SAAWC,EAChB1pC,KAAKgb,MAAMnK,aACX7Q,KAAKopC,SAASxhC,QAAQ,SAAA4hC,GAAU,OAAAA,EAAO34B,eAEvC7Q,KAAKopC,SAAW,IAAIxjC,MAAMgkC,GAC1B,IAAK,IAAIhP,EAAQ,EAAGA,EAAQgP,EAAgBhP,IAAS,CACpD,IAAM4O,EAASxpC,KAAK2L,QAAQ+B,qBAC5B87B,EAAOnmC,KAAOrD,KAAKwD,MACnBxD,KAAK4R,UAAUoN,QAAQwqB,EAAO53B,WAC9B5R,KAAK41B,OAAO5W,QAAQwqB,EAAO5T,QAC3B51B,KAAKqpC,EAAErqB,QAAQwqB,EAAOH,GACtBrpC,KAAK4b,KAAKoD,QAAQwqB,EAAO5tB,MACzB5b,KAAKopC,SAASxO,GAAS4O,EAExBxpC,KAAK6e,mBAAqB7e,KAAKgb,OAAKvU,OAAKzG,KAAKopC,UAAUppC,KAAK4f,SAC7DG,GAAapd,WAAA,EAAI3C,KAAK6e,oDASvBsqB,EAAA1nC,UAAAooC,qBAAA,SAAqB9gC,GAArB,IAAAtE,EAAAzE,UAAqB,IAAA+I,MAAA,KAIpB,IAFA,IAAM+gC,EAAgB,IAAIlnB,aAAa7Z,GAAK6H,IAAI,WAAM,WAChDm5B,EAAa,IAAInnB,aAAa7Z,GAC3B3I,EAAI,EAAGA,EAAI2I,EAAK3I,IAAK,CAC7B,IACM8T,EAAc,MADPjP,KAAKwM,IAAIrR,EAAI2I,EAAK,GACI,GACnCghC,EAAW3pC,GAAK8T,EAEjB,IAAM81B,EAAY,IAAIpnB,aAAa7Z,GAC7BkhC,EAAc,IAAIrnB,aAAa7Z,GAYrC,OAXA/I,KAAKopC,SAASxhC,QAAQ,WACrB,IAAMsiC,EAAczlC,EAAKkH,QAAQ+B,qBACjCw8B,EAAY7mC,KAAOoB,EAAKjB,MACxB0mC,EAAYb,EAAEjoC,MAAQqD,EAAK4kC,EAAEjoC,MAC7B8oC,EAAYt4B,UAAUxQ,MAAQqD,EAAKmN,UAAUxQ,MAC7C8oC,EAAYtuB,KAAKxa,MAAQqD,EAAKmX,KAAKxa,MACnC8oC,EAAYL,qBAAqBE,EAAYC,EAAWC,GACxDD,EAAUpiC,QAAQ,SAACsI,EAAK9P,GACvB0pC,EAAc1pC,IAAM8P,MAGf45B,GAMRX,EAAA1nC,UAAAuB,QAAA,WAUC,OATAgF,EAAAvG,UAAMuB,QAAOzC,KAAAP,MACbA,KAAKopC,SAASxhC,QAAQ,SAAA4hC,GACrBA,EAAO34B,eAERwN,GAASre,MAAO,SAAU,YAAa,OAAQ,MAC/CA,KAAK4R,UAAU5O,UACfhD,KAAKqpC,EAAErmC,UACPhD,KAAK41B,OAAO5yB,UACZhD,KAAK4b,KAAK5Y,UACHhD,MAETmpC,EAlLA,CAA4B5qB,gVCG5B4rB,GAAA,SAAAniC,GAqEC,SAAAoiC,IAAA,IAAA3lC,EACCuD,EAAAzH,KAAAP,KAAM0G,EAAqB0jC,EAAepoC,cAAeI,WAAY,eAAgB,oBAAkBpC,KApExGyE,EAAA9D,KAAO,iBAKE8D,EAAAuW,MAAQ,IAAIqF,IAAO1U,QAASlH,EAAKkH,UAKjClH,EAAAynB,IAAM,IAAIgd,IAClBv9B,QAASlH,EAAKkH,QACdiG,UAAW,EACXvO,KAAM,YAMCoB,EAAA4lC,cAAgB,IAAInB,IAC3Bv9B,QAASlH,EAAKkH,QACdiG,UAAW,EACXvO,KAAM,aAMEoB,EAAAo+B,IAAM,IAAIqG,IAClBv9B,QAASlH,EAAKkH,QACdiG,UAAW,EACXvO,KAAM,YAMEoB,EAAA6nB,KAAO,IAAI4c,IACnBv9B,QAASlH,EAAKkH,QACdiG,UAAW,EACXvO,KAAM,aAMPoB,EAAAmb,YAASzW,EAYC1E,EAAAoa,mBAAqBpa,EAAKuW,MAAOvW,EAAKynB,IAAKznB,EAAKo+B,IAAKp+B,EAAK6nB,MAWnE,IAAM/iB,EAAU7C,EAAqB0jC,EAAepoC,cAAeI,WAAY,eAAgB,yBAE/FqC,EAAK6lC,aAAe,IAAInV,IACvBxpB,QAASlH,EAAKkH,QACdsG,MAAO,YACP7Q,MAAOmI,EAAQ+gC,eAGhB7lC,EAAK8lC,cAAgB,IAAIpV,IACxBxpB,QAASlH,EAAKkH,QACdsG,MAAO,YACP7Q,MAAOmI,EAAQghC,gBAGhB9lC,EAAK4kC,EAAI,IAAIlU,IACZxpB,QAASlH,EAAKkH,QACdsG,MAAO,WACP7Q,MAAOmI,EAAQ8/B,IAGhB5kC,EAAKuW,MAAMgF,IAAIvb,EAAKynB,IAAKznB,EAAK6nB,MAC9B7nB,EAAKuW,MAAM6E,MAAMpb,EAAK4lC,cAAe5lC,EAAKo+B,KAE1Cp+B,EAAK6lC,aAAatqB,IAAIvb,EAAKynB,IAAIta,UAAWnN,EAAK4lC,cAAcz4B,WAC7DnN,EAAK8lC,cAAcvqB,IAAIvb,EAAKo+B,IAAIjxB,UAAWnN,EAAK6nB,KAAK1a,WAErDnN,EAAK4kC,EAAErqB,QAAQva,EAAKynB,IAAImd,GACxB5kC,EAAK4kC,EAAErqB,QAAQva,EAAK4lC,cAAchB,GAClC5kC,EAAK4kC,EAAErqB,QAAQva,EAAKo+B,IAAIwG,GACxB5kC,EAAK4kC,EAAErqB,QAAQva,EAAK6nB,KAAK+c,GAEzBlrB,GAAS1Z,GAAO,OAAQ,MAAO,MAAO,gBAAiB,mBA2BzD,OAjIoC+lC,GAAAJ,EAAApiC,GAyG5BoiC,EAAApoC,YAAP,WACC,OAAOlB,OAAOwF,OAAOiY,GAAcvc,eAClCqnC,EAAG,EACHkB,cAAe,KACfD,aAAc,OAOhBF,EAAA3oC,UAAAuB,QAAA,WAUC,OATAgF,EAAAvG,UAAMuB,QAAOzC,KAAAP,MACbqe,GAASre,MAAO,OAAQ,MAAO,MAAO,gBAAiB,iBACvDA,KAAKksB,IAAIlpB,UACThD,KAAKqqC,cAAcrnC,UACnBhD,KAAK6iC,IAAI7/B,UACThD,KAAKssB,KAAKtpB,UACVhD,KAAKsqC,aAAatnC,UAClBhD,KAAKuqC,cAAcvnC,UACnBhD,KAAKqpC,EAAErmC,UACAhD,MAGToqC,EAjIA,CAAoC7rB,gVCjBpCksB,GAAA,SAAAziC,GAgEC,SAAA0iC,IAAA,IAAAjmC,EACCuD,EAAAzH,KAAAP,KAAM0G,EAAqBgkC,EAAI1oC,cAAeI,WAAY,MAAO,MAAO,WAASpC,KAhElFyE,EAAA9D,KAAO,MAUE8D,EAAAmb,OAAS,IAAIS,IAAO1U,QAASlH,EAAKkH,UAiDjClH,EAAAoa,qBAMT,IAAMtV,EAAU7C,EAAqBgkC,EAAI1oC,cAAeI,WAAY,MAAO,MAAO,gBAElFqC,EAAKuW,MAAQvW,EAAKkmC,gBAAkB,IAAIR,IACvCx+B,QAASlH,EAAKkH,QACd4+B,cAAehhC,EAAQghC,cACvBD,aAAc/gC,EAAQ+gC,eAGvB7lC,EAAKmmC,SAAW,IAAIvqB,IACnB1U,QAASlH,EAAKkH,QACdiQ,KAAMrS,EAAQ2iB,IACdja,MAAO,aAGRxN,EAAKomC,SAAW,IAAIxqB,IACnB1U,QAASlH,EAAKkH,QACdiQ,KAAMrS,EAAQs5B,IACd5wB,MAAO,aAGRxN,EAAKqmC,UAAY,IAAIzqB,IACpB1U,QAASlH,EAAKkH,QACdiQ,KAAMrS,EAAQ+iB,KACdra,MAAO,aAGRxN,EAAKynB,IAAMznB,EAAKmmC,SAAShvB,KACzBnX,EAAKo+B,IAAMp+B,EAAKomC,SAASjvB,KACzBnX,EAAK6nB,KAAO7nB,EAAKqmC,UAAUlvB,KAC3BnX,EAAK4kC,EAAI5kC,EAAKkmC,gBAAgBtB,EAC9B5kC,EAAK6lC,aAAe7lC,EAAKkmC,gBAAgBL,aACzC7lC,EAAK8lC,cAAgB9lC,EAAKkmC,gBAAgBJ,cAG1C9lC,EAAKkmC,gBAAgBze,IAAIrM,MAAMpb,EAAKmmC,SAAUnmC,EAAKmb,QACnDnb,EAAKkmC,gBAAgB9H,IAAIhjB,MAAMpb,EAAKomC,SAAUpmC,EAAKmb,QACnDnb,EAAKkmC,gBAAgBre,KAAKzM,MAAMpb,EAAKqmC,UAAWrmC,EAAKmb,QAErDzB,GAAS1Z,GAAO,MAAO,MAAO,OAAQ,eAAgB,kBACtDA,EAAKoa,mBAAqBpa,EAAKkmC,gBAAiBlmC,EAAKmb,UAgCvD,OAzIyBmrB,GAAAL,EAAA1iC,GA4GjB0iC,EAAA1oC,YAAP,WACC,OAAOlB,OAAOwF,OAAOiY,GAAcvc,eAClCsqB,KAAO,EACPie,cAAgB,KAChBre,IAAM,EACNoe,aAAe,IACfzH,IAAM,KAOR6H,EAAAjpC,UAAAuB,QAAA,WAaC,OAZAgF,EAAAvG,UAAMuB,QAAOzC,KAAAP,MACbqe,GAASre,MAAO,MAAO,MAAO,OAAQ,eAAgB,kBACtDA,KAAK2qC,gBAAgB3nC,UACrBhD,KAAKsqC,aAAatnC,UAClBhD,KAAKuqC,cAAcvnC,UACnBhD,KAAK4qC,SAAS5nC,UACdhD,KAAK6qC,SAAS7nC,UACdhD,KAAK8qC,UAAU9nC,UACfhD,KAAKksB,IAAIlpB,UACThD,KAAK6iC,IAAI7/B,UACThD,KAAKssB,KAAKtpB,UACVhD,KAAKqpC,EAAErmC,UACAhD,MAGT0qC,EAzIA,CAAyBnsB,ICJnB,SAAUysB,KACf,OAAO95B,IAAavB,i7DAId,IAAMs7B,GAAY/5B,IAAauD,UAEzBy2B,GAAch6B,IAAa+N,2BCnBxC,IAAAjG,EAGAA,EAAA,WACA,OAAAhZ,KADA,GAIA,IAEAgZ,KAAAmyB,SAAA,cAAAA,KAAA,EAAAC,MAAA,QACC,MAAAxmC,GAED,iBAAAZ,SAAAgV,EAAAhV,QAOApE,EAAAD,QAAAqZ","file":"Tone.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Tone\"] = factory();\n\telse\n\t\troot[\"Tone\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","/**\n *  Tone.js\n *  @author Yotam Mann\n *  @license http://opensource.org/licenses/MIT MIT License\n *  @copyright 2014-2019 Yotam Mann\n */\nimport { version } from \"../version\";\n// import { getContext } from \"./Global\";\nimport \"./type/Units\";\n\n///////////////////////////////////////////////////////////////////////////\n// \tTONE\n///////////////////////////////////////////////////////////////////////////\n\n// tslint:disable-next-line: no-empty-interface\nexport interface BaseToneOptions {}\n\n/**\n *  @class  Tone is the base class of all other classes.\n *  @constructor\n */\nexport abstract class Tone {\n\n\t/**\n\t * The version number semver\n\t */\n\tstatic version: string = version;\n\n\t/**\n\t * The name of the class\n\t */\n\tprotected abstract name: string;\n\n\t/**\n\t * Takes a partial options an returns the completed options by filling in the defaults\n\t */\n\tstatic getDefaults(): BaseToneOptions {\n\t\treturn {};\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tDEBUGGING\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Set this debug flag to log all events that happen in this class.\n\t */\n\tdebug: boolean = false;\n\n\t/**\n\t * Prints the outputs to the console log for debugging purposes.\n\t * Prints the contents only if either the object has a property\n\t * called `debug` set to true, or a variable called TONE_DEBUG_CLASS\n\t * is set to the name of the class.\n\t * @param args\n\t *  @example\n\t * //prints all logs originating from Tone.OscillatorNode\n\t * Tone.global.TONE_DEBUG_CLASS = \"OscillatorNode\"\n\t */\n\tprotected log(...args): void {\n\t\t// if the object is either set to debug = true\n\t\t// or if there is a string on the Tone.global.with the class name\n\t\t// @ts-ignore\n\t\tif (this.debug || this.toString() === global.TONE_DEBUG_CLASS) {\n\t\t\targs.unshift(this.toString() + \":\");\n\t\t\t// tslint:disable-next-line: no-console\n\t\t\tconsole.log(...args);\n\t\t}\n\t}\n\n\t/**\n\t *  Assert that the statement is true, otherwise invoke the error.\n\t *  @param {Boolean} statement\n\t *  @param {String} error The message which is passed into an Error\n\t *  @private\n\t */\n\tprotected assert(statement: boolean, error: string): void {\n\t\tif (!statement) {\n\t\t\tthrow new Error(error);\n\t\t}\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tDISPOSING\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Indicates if the instance was disposed\n\t */\n\tprivate _wasDisposed: boolean = false;\n\n\t/**\n\t *  disconnect and dispose.\n\t */\n\tdispose(): this {\n\t\tthis._wasDisposed = true;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Indicates if the instance was disposed. 'Disposing' an\n\t * instance means that all of the Web Audio nodes that were\n\t * created for the instance are disconnected and freed for garbage collection.\n\t */\n\tget disposed(): boolean {\n\t\treturn this._wasDisposed;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tDEFAULTS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  If the `given` parameter is undefined, use the `fallback`.\n\t *  If both `given` and `fallback` are object literals, it will\n\t *  return a deep copy which includes all of the parameters from both\n\t *  objects. If a parameter is undefined in given, it will return\n\t *  the fallback property.\n\t *  <br><br>\n\t *  WARNING: if object is self referential, it will go into an an\n\t *  infinite recursive loop.\n\t *  @memberOf Tone\n\t *  @param  {*} given\n\t *  @param  {*} fallback\n\t *  @return {*}\n\t */\n\t// static defaultArg(given, fallback) {\n\t\t// if (isObject(given) && isObject(fallback)) {\n\t\t// \tconst ret = {};\n\t\t// \t// make a deep copy of the given object\n\t\t// \tfor (const givenProp in given) {\n\t\t// \t\tret[givenProp] = Tone.defaultArg(fallback[givenProp], given[givenProp]);\n\t\t// \t}\n\t\t// \tfor (const fallbackProp in fallback) {\n\t\t// \t\tret[fallbackProp] = Tone.defaultArg(given[fallbackProp], fallback[fallbackProp]);\n\t\t// \t}\n\t\t// \treturn ret;\n\t\t// } else {\n\t\t// \treturn isUndef(given) ? fallback : given;\n\t\t// }\n\t// }\n\n\t// protected options(argsArray: IArguments, keys: string[]): object {\n\t// \tlet options: any = {};\n\t// \tconst args = Array.from(argsArray);\n\t// \tif (args[0] instanceof BaseAudioContext) {\n\t// \t\toptions.context = args.shift();\n\t// \t}\n\t// \tif (args.length === 1 && isObject(args[0])) {\n\t// \t\toptions = Object.assign(options, args[0]);\n\t// \t} else {\n\t// \t\tfor (let i = 0; i < keys.length; i++) {\n\t// \t\t\tif (isDefined(args[i])) {\n\t// \t\t\t\toptions[keys[i]] = args[i];\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\t// \treturn deepMerge(this.getDefaults(), options);\n\t// }\n\n\t/**\n\t * Convert the class to a string\n\t * @example\n\t * const osc = new Oscillator()\n\t * osc.toString() // \"Oscillator\"\n\t */\n\ttoString(): string {\n\t\treturn this.name;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tSTATIC\n\t///////////////////////////////////////////////////////////////////////////\n\n\t// static get context(): import(\"./context/Context\").Context {\n\t// \treturn getContext();\n\t// }\n\n\t// static now(): Seconds {\n\t// \treturn Tone.context.now();\n\t// }\n}\n","export const version = \"14.1.2\";\n","\nexport type TickerClockSource = \"worker\" | \"timeout\" | \"offline\";\n\n/**\n * A class which provides a reliable callback using either\n * a Web Worker, or if that isn't supported, falls back to setTimeout.\n */\nexport class Ticker {\n\n\t/**\n\t * Either \"worker\" or \"timeout\" or \"offline\"\n\t */\n\tprivate _type: TickerClockSource;\n\n\t/**\n\t * The update interval of the worker\n\t */\n\tprivate _updateInterval: Seconds;\n\n\t/**\n\t * The callback to invoke at regular intervals\n\t */\n\tprivate _callback: () => void;\n\n\t/**\n\t * track the callback interval\n\t */\n\tprivate _timeout!: number;\n\n\t/**\n\t * private reference to the worker\n\t */\n\tprivate _worker!: Worker;\n\n\tconstructor(callback: () => void, type: TickerClockSource, updateInterval: Seconds) {\n\n\t\tthis._callback = callback;\n\t\tthis._type = type;\n\t\tthis._updateInterval = updateInterval;\n\n\t\t// create the clock source for the first time\n\t\tthis._createClock();\n\t}\n\n\t/**\n\t *  Generate a web worker\n\t */\n\tprivate _createWorker(): void {\n\n\t\tconst blob = new Blob([\n\t\t\t// the initial timeout time\n\t\t\t`var timeoutTime =  ${(this._updateInterval * 1000).toFixed(1)};\n\t\t\t// onmessage callback\n\t\t\tself.onmessage = function(msg){\n\t\t\t\ttimeoutTime = parseInt(msg.data);\n\t\t\t};\n\t\t\t// the tick function which posts a message\n\t\t\t// and schedules a new tick\n\t\t\tfunction tick(){\n\t\t\t\tsetTimeout(tick, timeoutTime);\n\t\t\t\tself.postMessage('tick');\n\t\t\t}\n\t\t\t// call tick initially\n\t\t\ttick();`,\n\t\t]);\n\t\tconst blobUrl = window.URL.createObjectURL(blob);\n\t\tconst worker = new Worker(blobUrl);\n\n\t\tworker.onmessage = this._callback.bind(this);\n\n\t\tthis._worker = worker;\n\t}\n\n\t/**\n\t * Create a timeout loop\n\t */\n\tprivate _createTimeout(): void {\n\t\tthis._timeout = window.setTimeout(()  => {\n\t\t\tthis._createTimeout();\n\t\t\tthis._callback();\n\t\t}, this._updateInterval * 1000);\n\t}\n\n\t/**\n\t * Create the clock source.\n\t */\n\tprivate _createClock(): void {\n\t\tif (this._type === \"worker\") {\n\t\t\ttry {\n\t\t\t\tthis._createWorker();\n\t\t\t} catch (e) {\n\t\t\t\t// workers not supported, fallback to timeout\n\t\t\t\tthis._type = \"timeout\";\n\t\t\t\tthis._createClock();\n\t\t\t}\n\t\t} else if (this._type === \"timeout\") {\n\t\t\tthis._createTimeout();\n\t\t}\n\t}\n\n\t/**\n\t * Clean up the current clock source\n\t */\n\tprivate _disposeClock(): void {\n\t\tif (this._timeout) {\n\t\t\tclearTimeout(this._timeout);\n\t\t\tthis._timeout = 0;\n\t\t}\n\t\tif (this._worker) {\n\t\t\tthis._worker.terminate();\n\t\t\tthis._worker.onmessage = null;\n\t\t}\n\t}\n\n\t/**\n\t * The rate in seconds the ticker will update\n\t */\n\tget updateInterval(): Seconds {\n\t\treturn this._updateInterval;\n\t}\n\tset updateInterval(interval: Seconds) {\n\t\tthis._updateInterval = Math.max(interval, 128 / 44100);\n\t\tif (this._type === \"worker\") {\n\t\t\tthis._worker.postMessage(Math.max(interval * 1000, 1));\n\t\t}\n\t}\n\n\t/**\n\t * The type of the ticker, either a worker or a timeout\n\t */\n\tget type(): TickerClockSource {\n\t\treturn this._type;\n\t}\n\tset type(type: TickerClockSource) {\n\t\tthis._disposeClock();\n\t\tthis._type = type;\n\t\tthis._createClock();\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): void {\n\t\tthis._disposeClock();\n\t}\n}\n","/**\n *  Test if the arg is undefined\n */\nexport function isUndef(arg: any): arg is undefined {\n\treturn typeof arg === \"undefined\";\n}\n\n/**\n *  Test if the arg is not undefined\n */\nexport function isDefined<T>(arg: T | undefined): arg is T {\n\treturn !isUndef(arg);\n}\n\n/**\n *  Test if the arg is a function\n */\nexport function isFunction(arg: any): arg is (a: any) => any {\n\treturn typeof arg === \"function\";\n}\n\n/**\n *  Test if the argument is a number.\n */\nexport function isNumber(arg: any): arg is number {\n\treturn (typeof arg === \"number\");\n}\n\n/**\n *  Test if the given argument is an object literal (i.e. `{}`);\n */\nexport function isObject(arg: any): arg is object {\n\treturn (Object.prototype.toString.call(arg) === \"[object Object]\" && arg.constructor === Object);\n}\n\n/**\n *  Test if the argument is a boolean.\n */\nexport function isBoolean(arg: any): arg is boolean {\n\treturn (typeof arg === \"boolean\");\n}\n\n/**\n *  Test if the argument is an Array\n */\nexport function isArray(arg: any): arg is any[] {\n\treturn (Array.isArray(arg));\n}\n\n/**\n *  Test if the argument is a string.\n */\nexport function isString(arg: any): arg is string {\n\treturn (typeof arg === \"string\");\n}\n\n/**\n *  Test if the argument is in the form of a note in scientific pitch notation.\n *  e.g. \"C4\"\n */\nexport function isNote(arg: any): arg is Note {\n\treturn isString(arg) && /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i.test(arg);\n}\n","// import { BaseToneOptions } from \"../Tone\";\nimport { isDefined, isObject, isUndef } from \"./TypeCheck\";\n\ntype BaseToneOptions = import(\"../Tone\").BaseToneOptions;\n\n/**\n * Recursively merge an object\n * @param target the object to merge into\n * @param sources the source objects to merge\n */\nexport function deepMerge<T>(target: T, ...sources: T[]): T {\n\tif (!sources.length) { return target; }\n\tconst source = sources.shift();\n\n\tif (isObject(target) && isObject(source)) {\n\t\tfor (const key in source) {\n\t\t\t// values with the key 'value' are an exception\n\t\t\t// they don't get deep merged\n\t\t\tif (key === \"value\") {\n\t\t\t\ttarget[key] = source[key];\n\t\t\t} else if (isObject(source[key])) {\n\t\t\t\tif (!target[key]) { Object.assign(target, { [key]: {} }); }\n\t\t\t\tdeepMerge(target[key], source[key] as any);\n\t\t\t} else {\n\t\t\t\tObject.assign(target, { [key]: source[key] as any });\n\t\t\t}\n\t\t}\n\t}\n\n\treturn deepMerge(target, ...sources);\n}\n\n/**\n * Convert an args array into an object.\n */\nexport function optionsFromArguments<T extends object>(\n\tdefaults: T,\n\targsArray: IArguments,\n\tkeys: string[] = [],\n\tobjKey?: string,\n): T {\n\tconst opts: any = {};\n\tconst args = Array.from(argsArray);\n\t// if the first argument is an object and has an object key\n\tif (isObject(args[0]) && objKey && !Reflect.has(args[0], objKey)) {\n\t\t// if it's not part of the defaults\n\t\tconst partOfDefaults = Object.keys(args[0]).some(key => Reflect.has(defaults, key));\n\t\tif (!partOfDefaults) {\n\t\t\t// merge that key\n\t\t\tdeepMerge(opts, {[objKey] : args[0]});\n\t\t\t// remove the obj key from the keys\n\t\t\tkeys.splice(keys.indexOf(objKey), 1);\n\t\t\t// shift the first argument off\n\t\t\targs.shift();\n\t\t}\n\t}\n\tif (args.length === 1 && isObject(args[0])) {\n\t\tdeepMerge(opts, args[0]);\n\t} else {\n\t\tfor (let i = 0; i < keys.length; i++) {\n\t\t\tif (isDefined(args[i])) {\n\t\t\t\topts[keys[i]] = args[i];\n\t\t\t}\n\t\t}\n\t}\n\treturn deepMerge(defaults, opts);\n}\n\n/**\n * Return this instances default values by calling Constructor.getDefaults()\n */\nexport function getDefaultsFromInstance<T>(instance: T): BaseToneOptions {\n\ttype ToneClass = {\n\t\tconstructor: ToneClass;\n\t\tgetDefaults: () => BaseToneOptions;\n\t} & T;\n\n\treturn (instance as ToneClass).constructor.getDefaults();\n}\n\n/**\n * Returns the fallback if the given object is undefined.\n * Take an array of arguments and return a formatted options object.\n */\nexport function defaultArg<T>(given: T, fallback: T): T {\n\tif (isUndef(given)) {\n\t\treturn fallback;\n\t} else {\n\t\treturn given;\n\t}\n}\n\n/**\n * Remove all of the properties belonging to omit from obj.\n */\nexport function omitFromObject<T extends object, O extends string[]>(obj: T, omit: O): Omit<T, keyof O> {\n\tomit.forEach(prop => {\n\t\tif (Reflect.has(obj, prop)) {\n\t\t\tdelete obj[prop];\n\t\t}\n\t});\n\treturn obj;\n}\n","/**\n * The global audio context which is getable and assignable through\n * getAudioContext and setAudioContext\n */\nlet globalContext: BaseAudioContext;\n\n// @ts-ignore\nglobalContext = window.TONE_AUDIO_CONTEXT;\n\n/**\n * Returns the default system-wide AudioContext\n */\nexport function getAudioContext(): BaseAudioContext {\n\tif (!globalContext) {\n\t\tsetAudioContext(new AudioContext());\n\t}\n\treturn globalContext;\n}\n\n/**\n * Set the default audio context\n */\nexport function setAudioContext(context: BaseAudioContext): void {\n\tglobalContext = context;\n\t// @ts-ignore\n\twindow.TONE_AUDIO_CONTEXT = globalContext;\n}\n","import { Tone } from \"../Tone\";\nimport { isUndef } from \"./TypeCheck\";\n\nexport interface EmitterEventObject {\n\t[event: string]: Array<(...args: any[]) => void>;\n}\n\n/**\n * Emitter gives classes which extend it\n * the ability to listen for and emit events.\n * Inspiration and reference from Jerome Etienne's [MicroEvent](https://github.com/jeromeetienne/microevent.js).\n * MIT (c) 2011 Jerome Etienne.\n */\nexport class Emitter<EventType extends string = string> extends Tone {\n\n\tname = \"Emitter\";\n\n\t/**\n\t * Private container for the events\n\t */\n\tprivate _events?: EmitterEventObject;\n\n\t/**\n\t *  Bind a callback to a specific event.\n\t *  @param  event     The name of the event to listen for.\n\t *  @param  callback  The callback to invoke when the event is emitted\n\t */\n\ton(event: EventType, callback: (...args: any[]) => void): this {\n\t\t// split the event\n\t\tconst events = event.split(/\\W+/);\n\t\tevents.forEach(eventName => {\n\t\t\tif (isUndef(this._events)) {\n\t\t\t\tthis._events = {};\n\t\t\t}\n\t\t\tif (!this._events.hasOwnProperty(eventName)) {\n\t\t\t\tthis._events[eventName] = [];\n\t\t\t}\n\t\t\tthis._events[eventName].push(callback);\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Bind a callback which is only invoked once\n\t *  @param  event     The name of the event to listen for.\n\t *  @param  callback  The callback to invoke when the event is emitted\n\t */\n\tonce(event: EventType, callback: (...args: any[]) => void): this {\n\t\tconst boundCallback = (...args: any[])  => {\n\t\t\t// invoke the callback\n\t\t\tcallback(...args);\n\t\t\t// remove the event\n\t\t\tthis.off(event, boundCallback);\n\t\t};\n\t\tthis.on(event, boundCallback);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Remove the event listener.\n\t *  @param  event     The event to stop listening to.\n\t *  @param  callback  The callback which was bound to the event with Emitter.on.\n\t *                    If no callback is given, all callbacks events are removed.\n\t */\n\toff(event: EventType, callback?: (...args: any[]) => void): this {\n\t\tconst events = event.split(/\\W+/);\n\t\tevents.forEach(eventName => {\n\t\t\tif (isUndef(this._events)) {\n\t\t\t\tthis._events = {};\n\t\t\t}\n\t\t\tif (this._events.hasOwnProperty(event)) {\n\t\t\t\tif (isUndef(callback)) {\n\t\t\t\t\tthis._events[event] = [];\n\t\t\t\t} else {\n\t\t\t\t\tconst eventList = this._events[event];\n\t\t\t\t\tfor (let i = 0; i < eventList.length; i++) {\n\t\t\t\t\t\tif (eventList[i] === callback) {\n\t\t\t\t\t\t\teventList.splice(i, 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Invoke all of the callbacks bound to the event\n\t *  with any arguments passed in.\n\t *  @param  event  The name of the event.\n\t *  @param args The arguments to pass to the functions listening.\n\t */\n\temit(event, ...args: any[]): this {\n\t\tif (this._events) {\n\t\t\tif (this._events.hasOwnProperty(event)) {\n\t\t\t\tconst eventList = this._events[event].slice(0);\n\t\t\t\tfor (let i = 0, len = eventList.length; i < len; i++) {\n\t\t\t\t\teventList[i].apply(this, args);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Add Emitter functions (on/off/emit) to the object\n\t */\n\tstatic mixin(constr: any): void {\n\t\t// instance._events = {};\n\t\t[\"on\", \"once\", \"off\", \"emit\"].forEach(name => {\n\t\t\tconst property = Object.getOwnPropertyDescriptor(Emitter.prototype, name) as PropertyDescriptor;\n\t\t\tObject.defineProperty(constr.prototype, name, property);\n\t\t});\n\t}\n\n\t/**\n\t *  Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._events = undefined;\n\t\treturn this;\n\t}\n}\n","import { Tone } from \"../Tone\";\nimport { optionsFromArguments } from \"./Defaults\";\n\ntype TimelineSearchParam = \"ticks\" | \"time\";\n\n/**\n * The options object for Timeline\n */\ninterface TimelineOptions {\n\tmemory: number;\n}\n\n/**\n * An event must have a time number\n */\nexport interface TimelineEvent {\n\ttime: number;\n}\n\n/**\n *  @class A Timeline class for scheduling and maintaining state\n *         along a timeline. All events must have a \"time\" property.\n *         Internally, events are stored in time order for fast\n *         retrieval.\n *  @param memory The number of previous events that are retained.\n */\nexport class Timeline<GenericEvent extends TimelineEvent> extends Tone {\n\n\tname = \"Timeline\";\n\n\t/**\n\t *  The memory of the timeline, i.e.\n\t *  how many events in the past it will retain\n\t */\n\tmemory: number;\n\n\t/**\n\t * The array of scheduled timeline events\n\t */\n\tprotected _timeline: GenericEvent[] = [];\n\n\tconstructor(options?: Partial<TimelineOptions>);\n\t// tslint:disable-next-line: unified-signatures\n\tconstructor(memory?: number);\n\tconstructor() {\n\t\tsuper();\n\t\tconst options = optionsFromArguments(Timeline.getDefaults(), arguments, [\"memory\"]);\n\n\t\tthis.memory = options.memory;\n\t}\n\n\tstatic getDefaults(): TimelineOptions {\n\t\treturn {\n\t\t\tmemory: Infinity,\n\t\t};\n\t}\n\n\t/**\n\t *  The number of items in the timeline.\n\t */\n\tget length(): number {\n\t\treturn this._timeline.length;\n\t}\n\n\t/**\n\t *  Insert an event object onto the timeline. Events must have a \"time\" attribute.\n\t *  @param event  The event object to insert into the timeline.\n\t */\n\tadd(event: GenericEvent): Timeline<GenericEvent> {\n\t\t// the event needs to have a time attribute\n\t\tthis.assert(Reflect.has(event, \"time\"), \"Timeline: events must have a time attribute\");\n\t\tevent.time = event.time.valueOf();\n\t\tconst index = this._search(event.time);\n\t\tthis._timeline.splice(index + 1, 0, event);\n\t\t// if the length is more than the memory, remove the previous ones\n\t\tif (this.length > this.memory) {\n\t\t\tconst diff = this.length - this.memory;\n\t\t\tthis._timeline.splice(0, diff);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Remove an event from the timeline.\n\t *  @param  {Object}  event  The event object to remove from the list.\n\t *  @returns {Timeline} this\n\t */\n\tremove(event: GenericEvent): Timeline<GenericEvent> {\n\t\tconst index = this._timeline.indexOf(event);\n\t\tif (index !== -1) {\n\t\t\tthis._timeline.splice(index, 1);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Get the nearest event whose time is less than or equal to the given time.\n\t *  @param  time  The time to query.\n\t */\n\tget(time: number, param: TimelineSearchParam = \"time\"): GenericEvent | null {\n\t\tconst index = this._search(time, param);\n\t\tif (index !== -1) {\n\t\t\treturn this._timeline[index];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t *  Return the first event in the timeline without removing it\n\t *  @returns {Object} The first event object\n\t */\n\tpeek(): GenericEvent | undefined {\n\t\treturn this._timeline[0];\n\t}\n\n\t/**\n\t *  Return the first event in the timeline and remove it\n\t */\n\tshift(): GenericEvent | undefined {\n\t\treturn this._timeline.shift();\n\t}\n\n\t/**\n\t *  Get the event which is scheduled after the given time.\n\t *  @param  time  The time to query.\n\t */\n\tgetAfter(time: number, param: TimelineSearchParam = \"time\"): GenericEvent | null {\n\t\tconst index = this._search(time, param);\n\t\tif (index + 1 < this._timeline.length) {\n\t\t\treturn this._timeline[index + 1];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t *  Get the event before the event at the given time.\n\t *  @param  time  The time to query.\n\t */\n\tgetBefore(time: number): GenericEvent | null {\n\t\tconst len = this._timeline.length;\n\t\t// if it's after the last item, return the last item\n\t\tif (len > 0 && this._timeline[len - 1].time < time) {\n\t\t\treturn this._timeline[len - 1];\n\t\t}\n\t\tconst index = this._search(time);\n\t\tif (index - 1 >= 0) {\n\t\t\treturn this._timeline[index - 1];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t *  Cancel events at and after the given time\n\t *  @param  time  The time to query.\n\t */\n\tcancel(after: number): Timeline<GenericEvent> {\n\t\tif (this._timeline.length > 1) {\n\t\t\tlet index = this._search(after);\n\t\t\tif (index >= 0) {\n\t\t\t\tif (this._timeline[index].time === after) {\n\t\t\t\t\t// get the first item with that time\n\t\t\t\t\tfor (let i = index; i >= 0; i--) {\n\t\t\t\t\t\tif (this._timeline[i].time === after) {\n\t\t\t\t\t\t\tindex = i;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis._timeline = this._timeline.slice(0, index);\n\t\t\t\t} else {\n\t\t\t\t\tthis._timeline = this._timeline.slice(0, index + 1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._timeline = [];\n\t\t\t}\n\t\t} else if (this._timeline.length === 1) {\n\t\t\t// the first item's time\n\t\t\tif (this._timeline[0].time >= after) {\n\t\t\t\tthis._timeline = [];\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Cancel events before or equal to the given time.\n\t *  @param  {Number}  time  The time to cancel before.\n\t *  @returns {Timeline} this\n\t */\n\tcancelBefore(time): Timeline<GenericEvent> {\n\t\tconst index = this._search(time);\n\t\tif (index >= 0) {\n\t\t\tthis._timeline = this._timeline.slice(index + 1);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the previous event if there is one. null otherwise\n\t * @param  {Object} event The event to find the previous one of\n\t * @return {Object}       The event right before the given event\n\t */\n\tpreviousEvent(event): GenericEvent | null {\n\t\tconst index = this._timeline.indexOf(event);\n\t\tif (index > 0) {\n\t\t\treturn this._timeline[index - 1];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t *  Does a binary search on the timeline array and returns the\n\t *  nearest event index whose time is after or equal to the given time.\n\t *  If a time is searched before the first index in the timeline, -1 is returned.\n\t *  If the time is after the end, the index of the last item is returned.\n\t *  @param  time\n\t */\n\tprotected _search(time: number, param: TimelineSearchParam = \"time\"): number {\n\t\tif (this._timeline.length === 0) {\n\t\t\treturn -1;\n\t\t}\n\t\tlet beginning = 0;\n\t\tconst len = this._timeline.length;\n\t\tlet end = len;\n\t\tif (len > 0 && this._timeline[len - 1][param] <= time) {\n\t\t\treturn len - 1;\n\t\t}\n\t\twhile (beginning < end) {\n\t\t\t// calculate the midpoint for roughly equal partition\n\t\t\tlet midPoint = Math.floor(beginning + (end - beginning) / 2);\n\t\t\tconst event = this._timeline[midPoint];\n\t\t\tconst nextEvent = this._timeline[midPoint + 1];\n\t\t\tif (event[param] === time) {\n\t\t\t\t// choose the last one that has the same time\n\t\t\t\tfor (let i = midPoint; i < this._timeline.length; i++) {\n\t\t\t\t\tconst testEvent = this._timeline[i];\n\t\t\t\t\tif (testEvent[param] === time) {\n\t\t\t\t\t\tmidPoint = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn midPoint;\n\t\t\t} else if (event[param] < time && nextEvent[param] > time) {\n\t\t\t\treturn midPoint;\n\t\t\t} else if (event[param] > time) {\n\t\t\t\t// search lower\n\t\t\t\tend = midPoint;\n\t\t\t} else {\n\t\t\t\t// search upper\n\t\t\t\tbeginning = midPoint + 1;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\n\t/**\n\t *  Internal iterator. Applies extra safety checks for\n\t *  removing items from the array.\n\t */\n\tprivate _iterate(\n\t\tcallback: (event: GenericEvent) => void,\n\t\tlowerBound = 0, upperBound = this._timeline.length - 1,\n\t): void {\n\t\tthis._timeline.slice(lowerBound, upperBound + 1).forEach(callback);\n\t}\n\n\t/**\n\t *  Iterate over everything in the array\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEach(callback: (event: GenericEvent) => void): Timeline<GenericEvent> {\n\t\tthis._iterate(callback);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array at or before the given time.\n\t *  @param  time The time to check if items are before\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachBefore(time, callback: (event: GenericEvent) => void): Timeline<GenericEvent> {\n\t\t// iterate over the items in reverse so that removing an item doesn't break things\n\t\tconst upperBound = this._search(time);\n\t\tif (upperBound !== -1) {\n\t\t\tthis._iterate(callback, 0, upperBound);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array after the given time.\n\t *  @param  time The time to check if items are before\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachAfter(time, callback: (event: GenericEvent) => void): Timeline<GenericEvent> {\n\t\t// iterate over the items in reverse so that removing an item doesn't break things\n\t\tconst lowerBound = this._search(time);\n\t\tthis._iterate(callback, lowerBound + 1);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array between the startTime and endTime.\n\t *  The timerange is inclusive of the startTime, but exclusive of the endTime.\n\t *  range = [startTime, endTime).\n\t *  @param  startTime The time to check if items are before\n\t *  @param  endTime The end of the test interval.\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachBetween(startTime: number, endTime: number, callback: (event: GenericEvent) => void): Timeline<GenericEvent> {\n\t\tlet lowerBound = this._search(startTime);\n\t\tlet upperBound = this._search(endTime);\n\t\tif (lowerBound !== -1 && upperBound !== -1) {\n\t\t\tif (this._timeline[lowerBound].time !== startTime) {\n\t\t\t\tlowerBound += 1;\n\t\t\t}\n\t\t\t// exclusive of the end time\n\t\t\tif (this._timeline[upperBound].time === endTime) {\n\t\t\t\tupperBound -= 1;\n\t\t\t}\n\t\t\tthis._iterate(callback, lowerBound, upperBound);\n\t\t} else if (lowerBound === -1) {\n\t\t\tthis._iterate(callback, 0, upperBound);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array at or after the given time. Similar to\n\t *  forEachAfter, but includes the item(s) at the given time.\n\t *  @param  time The time to check if items are before\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachFrom(time: number, callback: (event: GenericEvent) => void): Timeline<GenericEvent> {\n\t\t// iterate over the items in reverse so that removing an item doesn't break things\n\t\tlet lowerBound = this._search(time);\n\t\t// work backwards until the event time is less than time\n\t\twhile (lowerBound >= 0 && this._timeline[lowerBound].time >= time) {\n\t\t\tlowerBound--;\n\t\t}\n\t\tthis._iterate(callback, lowerBound + 1);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array at the given time\n\t *  @param  time The time to check if items are before\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachAtTime(time: number, callback: (event: GenericEvent) => void): Timeline<GenericEvent> {\n\t\t// iterate over the items in reverse so that removing an item doesn't break things\n\t\tconst upperBound = this._search(time);\n\t\tif (upperBound !== -1) {\n\t\t\tthis._iterate(event => {\n\t\t\t\tif (event.time === time) {\n\t\t\t\t\tcallback(event);\n\t\t\t\t}\n\t\t\t}, 0, upperBound);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._timeline = [];\n\t\treturn this;\n\t}\n}\n","///////////////////////////////////////////////////////////////////////////\n// INITIALIZING NEW CONTEXT\n///////////////////////////////////////////////////////////////////////////\n\ntype Context = import(\"./Context\").Context;\n\n/**\n * Array of callbacks to invoke when a new context is created\n */\nconst notifyNewContext: Array<(ctx: Context) => void> = [];\n\n/**\n * Used internally to setup a new Context\n */\nexport function onContextInit(cb: (ctx: Context) => void): void {\n\tnotifyNewContext.push(cb);\n}\n\n/**\n * Invoke any classes which need to also be initialized when a new context is created.\n */\nexport function initializeContext(ctx: Context): void {\n\t// add any additional modules\n\tnotifyNewContext.forEach(cb => cb(ctx));\n}\n\n/**\n * Array of callbacks to invoke when a new context is created\n */\nconst notifyCloseContext: Array<(ctx: Context) => void> = [];\n\n/**\n * Used internally to tear down a Context\n */\nexport function onContextClose(cb: (ctx: Context) => void): void {\n\tnotifyCloseContext.push(cb);\n}\n\nexport function closeContext(ctx: Context): void {\n\t// add any additional modules\n\tnotifyCloseContext.forEach(cb => cb(ctx));\n}\n","import { version } from \"../version\";\nimport { Context } from \"./context/Context\";\n\n/**\n * The global audio context which is getable and assignable through\n * getContext and setContext\n */\nlet globalContext: Context;\n\n// @ts-ignore\nglobalContext = window.TONE_CONTEXT;\n\n/**\n * Returns the default system-wide AudioContext\n */\nexport function getContext(): Context {\n\tif (!globalContext) {\n\t\tsetContext(new Context());\n\t}\n\treturn globalContext;\n}\n\n/**\n * Set the default audio context\n */\nexport function setContext(context: Context): void {\n\tglobalContext = context;\n\tcontext.initialize();\n\t// @ts-ignore\n\twindow.TONE_CONTEXT = context;\n}\n\n/**\n * Most browsers will not play _any_ audio until a user\n * clicks something (like a play button). Invoke this method\n * on a click or keypress event handler to start the audio context.\n * More about the Autoplay policy\n * [here](https://developers.google.com/web/updates/2017/09/autoplay-policy-changes#webaudio)\n * @example\n * document.querySelector('#playbutton').addEventListener('click', () => Tone.start())\n */\nexport function start(): Promise <void> {\n\treturn globalContext.resume();\n}\n\n/**\n * Log Tone.js + version in the console.\n */\nif (!this.TONE_SILENCE_LOGGING) {\n\tlet prefix = \"v\";\n\t// @ts-ignore\n\tif (version === \"dev\") {\n\t\tprefix = \"\";\n\t}\n\tconst printString = ` * Tone.js ${prefix}${version} * `;\n\t// tslint:disable-next-line: no-console\n\tconsole.log(`%c${printString}`, \"background: #000; color: #fff\");\n}\n","import { Ticker, TickerClockSource } from \"../clock/Ticker\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Emitter } from \"../util/Emitter\";\nimport { Omit } from \"../util/Interface\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isString } from \"../util/TypeCheck\";\nimport { getAudioContext } from \"./AudioContext\";\nimport { closeContext, initializeContext } from \"./ContextInitialization\";\n\ntype Transport = import(\"../clock/Transport\").Transport;\ntype Destination = import(\"./Destination\").Destination;\n\nexport type ContextLatencyHint = AudioContextLatencyCategory | \"fastest\";\n\n// these are either not used in Tone.js or deprecated and not implemented.\nexport type ExcludedFromBaseAudioContext = \"createScriptProcessor\" | \"onstatechange\" | \"addEventListener\"\n\t| \"removeEventListener\" | \"listener\" | \"dispatchEvent\" | \"audioWorklet\" | \"destination\";\n\n// the subset of the BaseAudioContext which Tone.Context implements.\nexport type BaseAudioContextSubset = Omit<BaseAudioContext, ExcludedFromBaseAudioContext>;\n\nexport interface ContextOptions {\n\tclockSource: TickerClockSource;\n\tlatencyHint: ContextLatencyHint;\n\tlookAhead: Seconds;\n\tupdateInterval: Seconds;\n\tcontext: BaseAudioContext;\n}\n\nexport interface ContextTimeoutEvent {\n\tcallback: (...args: any[]) => void;\n\tid: number;\n\ttime: Seconds;\n}\n\n/**\n * Wrapper around the native AudioContext.\n */\nexport class Context extends Emitter<\"statechange\" | \"tick\"> implements BaseAudioContextSubset {\n\n\tname = \"Context\";\n\n\t/**\n\t * The amount of time into the future events are scheduled. Giving Web Audio\n\t * a short amount of time into the future to schedule events can reduce clicks and\n\t * improve performance. This value can be set to 0 to get the lowest latency.\n\t */\n\tlookAhead: Seconds;\n\n\t/**\n\t * private reference to the BaseAudioContext\n\t */\n\tprotected readonly _context: BaseAudioContext;\n\n\t/**\n\t * A reliable callback method\n\t */\n\tprivate readonly _ticker: Ticker;\n\n\t/**\n\t *  The default latency hint\n\t */\n\tprivate _latencyHint: ContextLatencyHint | Seconds;\n\n\t/**\n\t *  An object containing all of the constants AudioBufferSourceNodes\n\t */\n\tprivate _constants = new Map<number, AudioBufferSourceNode>();\n\n\t/**\n\t *  All of the setTimeout events.\n\t */\n\tprivate _timeouts: Timeline<ContextTimeoutEvent> = new Timeline();\n\n\t/**\n\t *  The timeout id counter\n\t */\n\tprivate _timeoutIds = 0;\n\n\t/**\n\t * A reference the Transport singleton belonging to this context\n\t */\n\tprivate _transport!: Transport;\n\n\t/**\n\t * A reference the Destination singleton belonging to this context\n\t */\n\tprivate _destination!: Destination;\n\n\t/**\n\t * Private indicator if the context has been initialized\n\t */\n\tprivate _initialized: boolean = false;\n\n\tconstructor(context?: BaseAudioContext);\n\t// tslint:disable-next-line: unified-signatures\n\tconstructor(options?: Partial<ContextOptions>);\n\tconstructor() {\n\t\tsuper();\n\t\tconst options = optionsFromArguments(Context.getDefaults(), arguments, [\"context\"]);\n\n\t\tthis._context = options.context;\n\n\t\tthis._latencyHint = options.latencyHint;\n\t\tthis.lookAhead = options.lookAhead;\n\n\t\tthis._ticker = new Ticker(this.emit.bind(this, \"tick\"), options.clockSource, options.updateInterval);\n\t\tthis.on(\"tick\", this._timeoutLoop.bind(this));\n\n\t\t// fwd events from the context\n\t\tthis._context.addEventListener(\"statechange\", () => {\n\t\t\tthis.emit(\"statechange\", this.state);\n\t\t});\n\t}\n\n\tstatic getDefaults(): ContextOptions {\n\t\treturn {\n\t\t\tclockSource: \"worker\",\n\t\t\tcontext: getAudioContext(),\n\t\t\tlatencyHint: \"interactive\",\n\t\t\tlookAhead: 0.1,\n\t\t\tupdateInterval: 0.03,\n\t\t};\n\t}\n\n\t/**\n\t * Finish setting up the context. **You usually do not need to do this manually.**\n\t */\n\tinitialize(): this {\n\t\tif (!this._initialized) {\n\t\t\t// add any additional modules\n\t\t\tinitializeContext(this);\n\t\t\tthis._initialized = true;\n\t\t}\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////\n\t// BASE AUDIO CONTEXT METHODS\n\t///////////////////////////////////////////////////////////////////////\n\n\tcreateAnalyser(): AnalyserNode {\n\t\treturn this._context.createAnalyser();\n\t}\n\tcreateOscillator(): OscillatorNode {\n\t\treturn this._context.createOscillator();\n\t}\n\tcreateBufferSource(): AudioBufferSourceNode {\n\t\treturn this._context.createBufferSource();\n\t}\n\tcreateBiquadFilter(): BiquadFilterNode {\n\t\treturn this._context.createBiquadFilter();\n\t}\n\tcreateBuffer(numberOfChannels: number, length: number, sampleRate: number): AudioBuffer {\n\t\treturn this._context.createBuffer(numberOfChannels, length, sampleRate);\n\t}\n\tcreateChannelMerger(numberOfInputs?: number | undefined): ChannelMergerNode {\n\t\treturn this._context.createChannelMerger(numberOfInputs);\n\t}\n\tcreateChannelSplitter(numberOfOutputs?: number | undefined): ChannelSplitterNode {\n\t\treturn this._context.createChannelSplitter(numberOfOutputs);\n\t}\n\tcreateConstantSource(): ConstantSourceNode {\n\t\treturn this._context.createConstantSource();\n\t}\n\tcreateConvolver(): ConvolverNode {\n\t\treturn this._context.createConvolver();\n\t}\n\tcreateDelay(maxDelayTime?: number | undefined): DelayNode {\n\t\treturn this._context.createDelay(maxDelayTime);\n\t}\n\tcreateDynamicsCompressor(): DynamicsCompressorNode {\n\t\treturn this._context.createDynamicsCompressor();\n\t}\n\tcreateGain(): GainNode {\n\t\treturn this._context.createGain();\n\t}\n\tcreateIIRFilter(feedforward: number[], feedback: number[]): IIRFilterNode {\n\t\treturn this._context.createIIRFilter(feedforward, feedback);\n\t}\n\tcreatePanner(): PannerNode {\n\t\treturn this._context.createPanner();\n\t}\n\tcreatePeriodicWave(\n\t\treal: number[] | Float32Array,\n\t\timag: number[] | Float32Array,\n\t\tconstraints?: PeriodicWaveConstraints | undefined,\n\t): PeriodicWave {\n\t\treturn this._context.createPeriodicWave(real, imag, constraints);\n\t}\n\tcreateStereoPanner(): StereoPannerNode {\n\t\treturn this._context.createStereoPanner();\n\t}\n\tcreateWaveShaper(): WaveShaperNode {\n\t\treturn this._context.createWaveShaper();\n\t}\n\tdecodeAudioData(audioData: ArrayBuffer): Promise<AudioBuffer> {\n\t\treturn this._context.decodeAudioData(audioData);\n\t}\n\n\t/**\n\t *  The current time in seconds of the AudioContext.\n\t */\n\tget currentTime(): Seconds {\n\t\treturn this._context.currentTime;\n\t}\n\t/**\n\t *  The current time in seconds of the AudioContext.\n\t */\n\tget state(): AudioContextState {\n\t\treturn this._context.state;\n\t}\n\t/**\n\t *  The current time in seconds of the AudioContext.\n\t */\n\tget sampleRate(): number {\n\t\treturn this._context.sampleRate;\n\t}\n\t/**\n\t *  The listener\n\t */\n\tget listener(): AudioListener {\n\t\treturn this._context.listener;\n\t}\n\n\t/**\n\t *  There is only one Transport per Context. It is created on initialization.\n\t */\n\tget transport(): Transport {\n\t\tthis.assert(this._initialized, \"The context must be initialized before being used by invoking context.initialize()\");\n\t\treturn this._transport;\n\t}\n\tset transport(t: Transport) {\n\t\tthis.assert(!this._initialized, \"The transport cannot be set after initialization.\");\n\t\tthis._transport = t;\n\t}\n\n\t/**\n\t *  A reference to the Context's destination node.\n\t */\n\tget destination(): Destination {\n\t\tthis.assert(this._initialized, \"The context must be initialized before being used by invoking context.initialize()\");\n\t\treturn this._destination;\n\t}\n\tset destination(d: Destination) {\n\t\tthis.assert(!this._initialized, \"The transport cannot be set after initialization.\");\n\t\tthis._destination = d;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////\n\t// TICKER\n\t///////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  How often the interval callback is invoked.\n\t *  This number corresponds to how responsive the scheduling\n\t *  can be. context.updateInterval + context.lookAhead gives you the\n\t *  total latency between scheduling an event and hearing it.\n\t */\n\tget updateInterval(): Seconds {\n\t\treturn this._ticker.updateInterval;\n\t}\n\tset updateInterval(interval: Seconds) {\n\t\tthis._ticker.updateInterval = interval;\n\t}\n\n\t/**\n\t *  What the source of the clock is, either \"worker\" (default),\n\t *  \"timeout\", or \"offline\" (none).\n\t */\n\tget clockSource(): TickerClockSource {\n\t\treturn this._ticker.type;\n\t}\n\tset clockSource(type: TickerClockSource) {\n\t\tthis._ticker.type = type;\n\t}\n\n\t/**\n\t * The type of playback, which affects tradeoffs between audio\n\t * output latency and responsiveness.\n\t * In addition to setting the value in seconds, the latencyHint also\n\t * accepts the strings \"interactive\" (prioritizes low latency),\n\t * \"playback\" (prioritizes sustained playback), \"balanced\" (balances\n\t * latency and performance), and \"fastest\" (lowest latency, might glitch more often).\n\t * @example\n\t * //set the lookAhead to 0.3 seconds\n\t * Tone.context.latencyHint = 0.3;\n\t */\n\tget latencyHint(): ContextLatencyHint | Seconds {\n\t\treturn this._latencyHint;\n\t}\n\tset latencyHint(hint: ContextLatencyHint | Seconds) {\n\t\tlet lookAheadValue = 0;\n\t\tthis._latencyHint = hint;\n\t\tif (isString(hint)) {\n\t\t\tswitch (hint) {\n\t\t\t\tcase \"interactive\":\n\t\t\t\t\tlookAheadValue = 0.1;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"playback\":\n\t\t\t\t\tlookAheadValue = 0.8;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"balanced\":\n\t\t\t\t\tlookAheadValue = 0.25;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"fastest\":\n\t\t\t\t\tlookAheadValue = 0.01;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tthis.lookAhead = lookAheadValue;\n\t\tthis.updateInterval = lookAheadValue / 3;\n\t}\n\n\t/**\n\t *  The unwrapped AudioContext.\n\t */\n\tget rawContext(): BaseAudioContext {\n\t\treturn this._context;\n\t}\n\n\t/**\n\t * The current audio context time plus a short {@link lookAhead}.\n\t */\n\tnow(): Seconds {\n\t\treturn this._context.currentTime + this.lookAhead;\n\t}\n\n\t/**\n\t *  Starts the audio context from a suspended state. This is required\n\t *  to initially start the AudioContext.\n\t */\n\tresume(): Promise<void> {\n\t\tif (this._context.state === \"suspended\" && this._context instanceof AudioContext) {\n\t\t\treturn this._context.resume();\n\t\t} else {\n\t\t\treturn Promise.resolve();\n\t\t}\n\t}\n\n\t/**\n\t *  Promise which is invoked when the context is running.\n\t *  Tries to resume the context if it's not started.\n\t */\n\tasync close(): Promise<Context> {\n\t\tif (this._context instanceof AudioContext) {\n\t\t\tawait this._context.close();\n\t\t}\n\t\tif (this._initialized) {\n\t\t\tcloseContext(this);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Generate a looped buffer at some constant value.\n\t */\n\tgetConstant(val: number): AudioBufferSourceNode {\n\t\tif (this._constants.has(val)) {\n\t\t\treturn this._constants.get(val) as AudioBufferSourceNode;\n\t\t} else {\n\t\t\tconst buffer = this._context.createBuffer(1, 128, this._context.sampleRate);\n\t\t\tconst arr = buffer.getChannelData(0);\n\t\t\tfor (let i = 0; i < arr.length; i++) {\n\t\t\t\tarr[i] = val;\n\t\t\t}\n\t\t\tconst constant = this._context.createBufferSource();\n\t\t\tconstant.channelCount = 1;\n\t\t\tconstant.channelCountMode = \"explicit\";\n\t\t\tconstant.buffer = buffer;\n\t\t\tconstant.loop = true;\n\t\t\tconstant.start(0);\n\t\t\tthis._constants.set(val, constant);\n\t\t\treturn constant;\n\t\t}\n\t}\n\n\t/**\n\t *  Clean up. Also closes the audio context.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._ticker.dispose();\n\t\tthis._timeouts.dispose();\n\t\tObject.keys(this._constants).map(val => this._constants[val].disconnect());\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////\n\t// TIMEOUTS\n\t///////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  The private loop which keeps track of the context scheduled timeouts\n\t *  Is invoked from the clock source\n\t */\n\tprivate _timeoutLoop(): void  {\n\t\tconst now = this.now();\n\t\tlet firstEvent = this._timeouts.peek();\n\t\twhile (this._timeouts.length && firstEvent && firstEvent.time <= now) {\n\t\t\t// invoke the callback\n\t\t\tfirstEvent.callback();\n\t\t\t// shift the first event off\n\t\t\tthis._timeouts.shift();\n\t\t\t// get the next one\n\t\t\tfirstEvent = this._timeouts.peek();\n\t\t}\n\t}\n\n\t/**\n\t *  A setTimeout which is guarented by the clock source.\n\t *  Also runs in the offline context.\n\t *  @param  fn       The callback to invoke\n\t *  @param  timeout  The timeout in seconds\n\t *  @returns ID to use when invoking Context.clearTimeout\n\t */\n\tsetTimeout(fn: (...args: any[]) => void, timeout: Seconds): number {\n\t\tthis._timeoutIds++;\n\t\tconst now = this.now();\n\t\tthis._timeouts.add({\n\t\t\tcallback : fn,\n\t\t\tid : this._timeoutIds,\n\t\t\ttime : now + timeout,\n\t\t});\n\t\treturn this._timeoutIds;\n\t}\n\n\t/**\n\t *  Clears a previously scheduled timeout with Tone.context.setTimeout\n\t *  @param  id  The ID returned from setTimeout\n\t */\n\tclearTimeout(id: number): Context {\n\t\tthis._timeouts.forEach(event => {\n\t\t\tif (event.id === id) {\n\t\t\t\tthis._timeouts.remove(event);\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n}\n","import \"./Units\";\n\n/**\n *  Equal power gain scale. Good for cross-fading.\n *  @param  percent (0-1)\n */\nexport function equalPowerScale(percent: NormalRange): number {\n\tconst piFactor = 0.5 * Math.PI;\n\treturn Math.sin(percent * piFactor);\n}\n\n/**\n *  Convert decibels into gain.\n */\nexport function dbToGain(db: Decibels): GainFactor {\n\treturn Math.pow(10, db / 20);\n}\n\n/**\n *  Convert gain to decibels.\n */\nexport function gainToDb(gain: GainFactor): Decibels {\n\treturn 20 * (Math.log(gain) / Math.LN10);\n}\n\n/**\n * Convert an interval (in semitones) to a frequency ratio.\n * @param interval the number of semitones above the base note\n * @example\n * tone.intervalToFrequencyRatio(0); // 1\n * tone.intervalToFrequencyRatio(12); // 2\n * tone.intervalToFrequencyRatio(-12); // 0.5\n */\nexport function intervalToFrequencyRatio(interval: Interval): number {\n\treturn Math.pow(2, (interval / 12));\n}\n\n/**\n * The Global [concert tuning pitch](https://en.wikipedia.org/wiki/Concert_pitch) which is used\n * to generate all the other pitch values from notes. A4's values in Hertz.\n */\nlet A4: Hertz = 440;\n\nexport function getA4(): Hertz {\n\treturn A4;\n}\n\nexport function setA4(freq: Hertz): void {\n\tA4 = freq;\n}\n\n/**\n * Convert a frequency value to a MIDI note.\n * @param frequency The value to frequency value to convert.\n * @example\n * ftom(440); // returns 69\n */\nexport function ftom(frequency: Hertz): MidiNote {\n\treturn 69 + Math.round(12 * Math.log2(frequency / A4));\n}\n\n/**\n * Convert a MIDI note to frequency value.\n * @param  midi The midi number to convert.\n * @return The corresponding frequency value\n * @example\n */\nexport function mtof(midi: MidiNote): Hertz {\n\treturn A4 * Math.pow(2, (midi - 69) / 12);\n}\n","import { Context } from \"../context/Context\";\nimport { Tone } from \"../Tone\";\nimport { isDefined, isObject , isString, isUndef } from \"../util/TypeCheck\";\n\nexport type TimeValue = Time | TimeBaseClass<any, any>;\n\n/**\n * The units that the TimeBase can accept. extended by other classes\n */\nexport type TimeBaseUnit = \"s\" | \"n\" | \"t\" | \"m\" | \"i\" | \"hz\" | \"tr\" | \"samples\" | \"number\";\n\nexport interface TypeFunction {\n\tregexp: RegExp;\n\tmethod: (value: string, ...args: string[]) => number;\n}\n\nexport interface TimeExpression<Type extends number> {\n\t[key: string]: {\n\t\tregexp: RegExp;\n\t\tmethod: (value: string, ...args: string[]) => Type;\n\t};\n}\n\n/**\n * TimeBase is a flexible encoding of time which can be evaluated to and from a string.\n * @param  val    The time value as a number, string or object\n * @param  units  Unit values\n * @example\n * new TimeBase(4, \"n\")\n * new TimeBase(2, \"t\")\n * new TimeBase(\"2t\")\n * new TimeBase({\"2t\" : 2})\n * new TimeBase(\"2t\") + new TimeBase(\"4n\");\n */\nexport abstract class TimeBaseClass<Type extends number, Unit extends string> extends Tone {\n\n\treadonly context: Context;\n\n\t/**\n\t * The value of the units\n\t */\n\tprotected _val?: TimeValue;\n\n\t/**\n\t * The units of time\n\t */\n\tprotected _units?: Unit;\n\n\t/**\n\t * All of the conversion expressions\n\t */\n\tprotected _expressions: TimeExpression<Type>;\n\n\t/**\n\t * The default units\n\t */\n\treadonly defaultUnits: Unit = \"s\" as Unit;\n\n\tconstructor(context: Context, value?: TimeValue, units?: Unit) {\n\t\tsuper();\n\n\t\tthis._val = value;\n\t\tthis._units = units;\n\t\tthis.context = context;\n\t\tthis._expressions = this._getExpressions();\n\t}\n\n\t/**\n\t * All of the time encoding expressions\n\t */\n\tprotected _getExpressions(): TimeExpression<Type> {\n\t\treturn {\n\t\t\thz: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._frequencyToUnits(parseFloat(value));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?)hz$/i,\n\t\t\t},\n\t\t\ti: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._ticksToUnits(parseInt(value, 10));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)i$/i,\n\t\t\t},\n\t\t\tm: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._beatsToUnits(parseInt(value, 10) * this._getTimeSignature());\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)m$/i,\n\t\t\t},\n\t\t\tn: {\n\t\t\t\tmethod: (value, dot) => {\n\t\t\t\t\tconst numericValue = parseInt(value, 10);\n\t\t\t\t\tconst scalar = dot === \".\" ? 1.5 : 1;\n\t\t\t\t\tif (numericValue === 1) {\n\t\t\t\t\t\treturn this._beatsToUnits(this._getTimeSignature()) * scalar as Type;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn this._beatsToUnits(4 / numericValue) * scalar as Type;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)n(\\.?)$/i,\n\t\t\t},\n\t\t\tnumber: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._expressions[this.defaultUnits].method.call(this, value);\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?)$/,\n\t\t\t},\n\t\t\ts: {\n\t\t\t\tmethod: (value): Type => {\n\t\t\t\t\treturn this._secondsToUnits(parseFloat(value));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?)s$/,\n\t\t\t},\n\t\t\tsamples: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn parseInt(value, 10) / this.context.sampleRate as Type;\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)samples$/,\n\t\t\t},\n\t\t\tt: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\tconst numericValue = parseInt(value, 10);\n\t\t\t\t\treturn this._beatsToUnits(8 / (Math.floor(numericValue) * 3));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)t$/i,\n\t\t\t},\n\t\t\ttr: {\n\t\t\t\tmethod: (m, q, s) => {\n\t\t\t\t\tlet total = 0;\n\t\t\t\t\tif (m && m !== \"0\") {\n\t\t\t\t\t\ttotal += this._beatsToUnits(this._getTimeSignature() * parseFloat(m));\n\t\t\t\t\t}\n\t\t\t\t\tif (q && q !== \"0\") {\n\t\t\t\t\t\ttotal += this._beatsToUnits(parseFloat(q));\n\t\t\t\t\t}\n\t\t\t\t\tif (s && s !== \"0\") {\n\t\t\t\t\t\ttotal += this._beatsToUnits(parseFloat(s) / 4);\n\t\t\t\t\t}\n\t\t\t\t\treturn total as Type;\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?$/,\n\t\t\t},\n\t\t};\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tVALUE OF\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Evaluate the time value. Returns the time in seconds.\n\t */\n\tvalueOf(): Type {\n\t\tif (this._val instanceof TimeBaseClass) {\n\t\t\tthis.fromType(this._val);\n\t\t}\n\t\tif (isUndef(this._val)) {\n\t\t\treturn this._noArg();\n\t\t} else if (isString(this._val) && isUndef(this._units)) {\n\t\t\tfor (const units in this._expressions) {\n\t\t\t\tif (this._expressions[units].regexp.test(this._val.trim())) {\n\t\t\t\t\tthis._units = units as Unit;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (isObject(this._val)) {\n\t\t\tlet total = 0;\n\t\t\tfor (const typeName in this._val) {\n\t\t\t\tif (isDefined(this._val[typeName])) {\n\t\t\t\t\tconst quantity = this._val[typeName];\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tconst time = (new this.constructor(this.context, typeName)).valueOf() * quantity;\n\t\t\t\t\ttotal += time;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn total as Type;\n\t\t}\n\t\tif (isDefined(this._units)) {\n\t\t\tconst expr = this._expressions[this._units];\n\t\t\tconst matching = this._val.toString().trim().match(expr.regexp);\n\t\t\tif (matching) {\n\t\t\t\treturn expr.method.apply(this, matching.slice(1));\n\t\t\t} else {\n\t\t\t\treturn expr.method.call(this, this._val);\n\t\t\t}\n\t\t} else if (isString(this._val)) {\n\t\t\treturn parseFloat(this._val) as Type;\n\t\t} else {\n\t\t\treturn this._val as Type;\n\t\t}\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tUNIT CONVERSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Returns the value of a frequency in the current units\n\t */\n\tprotected _frequencyToUnits(freq: Hertz): Type {\n\t\treturn 1 / freq as Type;\n\t}\n\n\t/**\n\t *  Return the value of the beats in the current units\n\t */\n\tprotected _beatsToUnits(beats: number): Type {\n\t\treturn (60 / this._getBpm()) * beats as Type;\n\t}\n\n\t/**\n\t *  Returns the value of a second in the current units\n\t */\n\tprotected _secondsToUnits(seconds: Seconds): Type {\n\t\treturn seconds as Type;\n\t}\n\n\t/**\n\t *  Returns the value of a tick in the current time units\n\t *  @private\n\t */\n\tprotected _ticksToUnits(ticks: Ticks): Type {\n\t\treturn (ticks * (this._beatsToUnits(1)) / this._getPPQ()) as Type;\n\t}\n\n\t/**\n\t *  With no arguments, return 'now'\n\t */\n\tprotected _noArg(): Type {\n\t\treturn this._now();\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tTEMPO CONVERSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Return the bpm\n\t */\n\tprotected _getBpm(): BPM {\n\t\treturn this.context.transport.bpm.value;\n\t}\n\n\t/**\n\t * Return the timeSignature\n\t */\n\tprotected _getTimeSignature(): number {\n\t\treturn this.context.transport.timeSignature as number;\n\t}\n\n\t/**\n\t * Return the PPQ or 192 if Transport is not available\n\t */\n\tprotected _getPPQ(): number {\n\t\treturn this.context.transport.PPQ;\n\t}\n\n\t/**\n\t * Return the current time in whichever context is relevant\n\t */\n\tprotected abstract _now(): Type;\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tCONVERSION INTERFACE\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Coerce a time type into this units type.\n\t * @param type Any time type units\n\t */\n\tfromType(type: TimeBaseClass<any, any>): this {\n\t\tthis._units = undefined;\n\t\tswitch (this.defaultUnits) {\n\t\t\tcase \"s\":\n\t\t\t\tthis._val = type.toSeconds();\n\t\t\t\tbreak;\n\t\t\tcase \"i\":\n\t\t\t\tthis._val = type.toTicks();\n\t\t\t\tbreak;\n\t\t\tcase \"hz\":\n\t\t\t\tthis._val = type.toFrequency();\n\t\t\t\tbreak;\n\t\t\tcase \"midi\":\n\t\t\t\tthis._val = type.toMidi();\n\t\t\t\tbreak;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Return the value in seconds\n\t */\n\tabstract toSeconds(): Seconds;\n\n\t/**\n\t *  Return the value as a Midi note\n\t */\n\tabstract toMidi(): MidiNote;\n\n\t/**\n\t * Convert the value into ticks\n\t */\n\tabstract toTicks(): Ticks;\n\n\t/**\n\t *  Return the value in hertz\n\t */\n\ttoFrequency(): Hertz {\n\t\treturn 1 / this.toSeconds();\n\t}\n\n\t/**\n\t *  Return the time in samples\n\t */\n\ttoSamples(): Samples {\n\t\treturn this.toSeconds() * this.context.sampleRate;\n\t}\n\n\t/**\n\t *  Return the time in milliseconds.\n\t */\n\ttoMilliseconds(): Milliseconds {\n\t\treturn this.toSeconds() * 1000;\n\t}\n}\n","import { getContext } from \"../Global\";\nimport { ftom } from \"./Conversions\";\nimport { TimeBaseClass, TimeBaseUnit, TimeExpression, TimeValue } from \"./TimeBase\";\n\n/**\n * TimeClass is a primitive type for encoding and decoding Time values.\n * TimeClass can be passed into the parameter of any method which takes time as an argument.\n * @param  val    The time value.\n * @param  units  The units of the value.\n * @example\n * var t = Time(\"4n\");//a quarter note\n */\nexport class TimeClass<Type extends Seconds | Ticks = Seconds, Unit extends string = TimeBaseUnit>\nextends TimeBaseClass<Type, Unit> {\n\n\tname = \"Time\";\n\n\tprotected _getExpressions(): TimeExpression<Type> {\n\t\treturn Object.assign(super._getExpressions(), {\n\t\t\tnow: {\n\t\t\t\tmethod: (capture: string): Type => {\n\t\t\t\t\treturn this._now() + new (this.constructor as typeof TimeClass)(this.context, capture).valueOf() as Type;\n\t\t\t\t},\n\t\t\t\tregexp: /^\\+(.+)/,\n\t\t\t},\n\t\t\tquantize: {\n\t\t\t\tmethod: (capture: string): Type => {\n\t\t\t\t\tconst quantTo = new TimeClass(this.context, capture).valueOf();\n\t\t\t\t\treturn this._secondsToUnits(this.context.transport.nextSubdivision(quantTo));\n\t\t\t\t},\n\t\t\t\tregexp: /^@(.+)/,\n\t\t\t},\n\t\t});\n\t}\n\n\t/**\n\t * Quantize the time by the given subdivision. Optionally add a\n\t * percentage which will move the time value towards the ideal\n\t * quantized value by that percentage.\n\t * @param  val    The subdivision to quantize to\n\t * @param  percent  Move the time value towards the quantized value by a percentage.\n\t * @example\n\t * Time(21).quantize(2) //returns 22\n\t * Time(0.6).quantize(\"4n\", 0.5) //returns 0.55\n\t */\n\tquantize(subdiv: number | Subdivision | TimeObject, percent = 1): Type {\n\t\tconst subdivision = new (this.constructor as typeof TimeClass)(this.context, subdiv).valueOf();\n\t\tconst value = this.valueOf();\n\t\tconst multiple = Math.round(value / subdivision);\n\t\tconst ideal = multiple * subdivision;\n\t\tconst diff = ideal - value;\n\t\treturn value + diff * percent as Type;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// CONVERSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\t/**\n\t *  Convert a Time to Notation. The notation values are will be the\n\t *  closest representation between 1m to 128th note.\n\t *  @return {Notation}\n\t *  @example\n\t * //if the Transport is at 120bpm:\n\t * Time(2).toNotation();//returns \"1m\"\n\t */\n\ttoNotation(): Subdivision {\n\t\tconst time = this.toSeconds();\n\t\tconst testNotations: Subdivision[] = [\"1m\"];\n\t\tfor (let power = 1; power < 9; power++) {\n\t\t\tconst subdiv = Math.pow(2, power);\n\t\t\ttestNotations.push(subdiv + \"n.\" as Subdivision);\n\t\t\ttestNotations.push(subdiv + \"n\" as Subdivision);\n\t\t\ttestNotations.push(subdiv + \"t\" as Subdivision);\n\t\t}\n\t\ttestNotations.push(\"0\");\n\t\t// find the closets notation representation\n\t\tlet closest = testNotations[0];\n\t\tlet closestSeconds = new TimeClass(this.context, testNotations[0]).toSeconds();\n\t\ttestNotations.forEach(notation => {\n\t\t\tconst notationSeconds = new TimeClass(this.context, notation).toSeconds();\n\t\t\tif (Math.abs(notationSeconds - time) < Math.abs(closestSeconds - time)) {\n\t\t\t\tclosest = notation;\n\t\t\t\tclosestSeconds = notationSeconds;\n\t\t\t}\n\t\t});\n\t\treturn closest;\n\t}\n\n\t/**\n\t *  Return the time encoded as Bars:Beats:Sixteenths.\n\t */\n\ttoBarsBeatsSixteenths(): BarsBeatsSixteenths {\n\t\tconst quarterTime = this._beatsToUnits(1);\n\t\tlet quarters = this.valueOf() / quarterTime;\n\t\tquarters = parseFloat(quarters.toFixed(4));\n\t\tconst measures = Math.floor(quarters / this._getTimeSignature());\n\t\tlet sixteenths = (quarters % 1) * 4;\n\t\tquarters = Math.floor(quarters) % this._getTimeSignature();\n\t\tconst sixteenthString = sixteenths.toString();\n\t\tif (sixteenthString.length > 3) {\n\t\t\t// the additional parseFloat removes insignificant trailing zeroes\n\t\t\tsixteenths = parseFloat(parseFloat(sixteenthString).toFixed(3));\n\t\t}\n\t\tconst progress = [measures, quarters, sixteenths];\n\t\treturn progress.join(\":\");\n\t}\n\n\t/**\n\t *  Return the time in ticks.\n\t */\n\ttoTicks(): Ticks {\n\t\tconst quarterTime = this._beatsToUnits(1);\n\t\tconst quarters = this.valueOf() / quarterTime;\n\t\treturn Math.round(quarters * this._getPPQ());\n\t}\n\n\t/**\n\t *  Return the time in seconds.\n\t */\n\ttoSeconds(): Seconds {\n\t\treturn this.valueOf();\n\t}\n\n\t/**\n\t *  Return the value as a midi note.\n\t */\n\ttoMidi(): MidiNote {\n\t\treturn ftom(this.toFrequency());\n\t}\n\n\tprotected _now(): Type {\n\t\treturn this.context.now() as Type;\n\t}\n}\n\n/**\n * Create a TimeClass from a time string or number.\n * @param value A value which reprsents time\n * @param units The value's units if they can't be inferred by the value.\n */\nexport function Time(value?: TimeValue, units?: TimeBaseUnit): TimeClass<Seconds> {\n\treturn new TimeClass(getContext(), value, units);\n}\n","import { getContext } from \"../Global\";\nimport { intervalToFrequencyRatio, mtof } from \"./Conversions\";\nimport { ftom, getA4, setA4 } from \"./Conversions\";\nimport { TimeClass } from \"./Time\";\nimport { TimeBaseClass, TimeBaseUnit, TimeExpression, TimeValue } from \"./TimeBase\";\n\nexport type FrequencyUnit = TimeBaseUnit | \"midi\";\n\n/**\n * Frequency is a primitive type for encoding Frequency values.\n * Eventually all time values are evaluated to hertz using the `eval` method.\n * @example\n * Frequency(\"C3\") // 261\n * Frequency(38, \"midi\") //\n * Frequency(\"C3\").transpose(4);\n */\nexport class FrequencyClass<Type extends number = Hertz> extends TimeClass<Type, FrequencyUnit> {\n\n\tname = \"Frequency\";\n\n\treadonly defaultUnits: FrequencyUnit = \"hz\";\n\n\t/**\n\t * The [concert tuning pitch](https://en.wikipedia.org/wiki/Concert_pitch) which is used\n\t * to generate all the other pitch values from notes. A4's values in Hertz.\n\t */\n\tstatic get A4(): Hertz {\n\t\treturn getA4();\n\t}\n\tstatic set A4(freq: Hertz) {\n\t\tsetA4(freq);\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tAUGMENT BASE EXPRESSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\tprotected _getExpressions(): TimeExpression<Type> {\n\t\treturn Object.assign({}, super._getExpressions(), {\n\t\t\tmidi : {\n\t\t\t\tregexp : /^(\\d+(?:\\.\\d+)?midi)/,\n\t\t\t\tmethod(value): number {\n\t\t\t\t\tif (this.defaultUnits === \"midi\") {\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn FrequencyClass.mtof(value);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\tnote : {\n\t\t\t\tregexp : /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i,\n\t\t\t\tmethod(pitch, octave): number {\n\t\t\t\t\tconst index = noteToScaleIndex[pitch.toLowerCase()];\n\t\t\t\t\tconst noteNumber = index + (parseInt(octave, 10) + 1) * 12;\n\t\t\t\t\tif (this.defaultUnits === \"midi\") {\n\t\t\t\t\t\treturn noteNumber;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn FrequencyClass.mtof(noteNumber);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\ttr : {\n\t\t\t\tregexp : /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?/,\n\t\t\t\tmethod(m, q, s): number {\n\t\t\t\t\tlet total = 1;\n\t\t\t\t\tif (m && m !== \"0\") {\n\t\t\t\t\t\ttotal *= this._beatsToUnits(this._getTimeSignature() * parseFloat(m));\n\t\t\t\t\t}\n\t\t\t\t\tif (q && q !== \"0\") {\n\t\t\t\t\t\ttotal *= this._beatsToUnits(parseFloat(q));\n\t\t\t\t\t}\n\t\t\t\t\tif (s && s !== \"0\") {\n\t\t\t\t\t\ttotal *= this._beatsToUnits(parseFloat(s) / 4);\n\t\t\t\t\t}\n\t\t\t\t\treturn total;\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tEXPRESSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Transposes the frequency by the given number of semitones.\n\t *  @return  A new transposed frequency\n\t *  @example\n\t * Frequency(\"A4\").transpose(3); //\"C5\"\n\t */\n\ttranspose(interval: Interval): FrequencyClass {\n\t\treturn new FrequencyClass(this.context, this.valueOf() * intervalToFrequencyRatio(interval));\n\t}\n\n\t/**\n\t *  Takes an array of semitone intervals and returns\n\t *  an array of frequencies transposed by those intervals.\n\t *  @return  Returns an array of Frequencies\n\t *  @example\n\t * Frequency(\"A4\").harmonize([0, 3, 7]); //[\"A4\", \"C5\", \"E5\"]\n\t */\n\tharmonize(intervals: Interval[]): FrequencyClass[] {\n\t\treturn intervals.map(interval => {\n\t\t\treturn this.transpose(interval);\n\t\t});\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tUNIT CONVERSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Return the value of the frequency as a MIDI note\n\t *  @return  {MIDI}\n\t *  @example\n\t * Frequency(\"C4\").toMidi(); //60\n\t */\n\ttoMidi(): MidiNote {\n\t\treturn ftom(this.valueOf());\n\t}\n\n\t/**\n\t *  Return the value of the frequency in Scientific Pitch Notation\n\t *  @return  {Note}\n\t *  @example\n\t * Frequency(69, \"midi\").toNote(); //\"A4\"\n\t */\n\ttoNote(): Note {\n\t\tconst freq = this.toFrequency();\n\t\tconst log = Math.log2(freq / FrequencyClass.A4);\n\t\tlet noteNumber = Math.round(12 * log) + 57;\n\t\tconst octave = Math.floor(noteNumber / 12);\n\t\tif (octave < 0) {\n\t\t\tnoteNumber += -12 * octave;\n\t\t}\n\t\tconst noteName = scaleIndexToNote[noteNumber % 12];\n\t\treturn noteName + octave.toString();\n\t}\n\n\t/**\n\t *  Return the duration of one cycle in seconds.\n\t */\n\ttoSeconds(): Seconds {\n\t\treturn 1 / super.toSeconds();\n\t}\n\n\t/**\n\t *  Return the duration of one cycle in ticks\n\t */\n\ttoTicks(): Ticks {\n\t\tconst quarterTime = this._beatsToUnits(1);\n\t\tconst quarters = this.valueOf() / quarterTime;\n\t\treturn Math.floor(quarters * this._getPPQ());\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tUNIT CONVERSIONS HELPERS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  With no arguments, return 0\n\t */\n\tprotected _noArg(): Type {\n\t\treturn 0 as Type;\n\t}\n\n\t/**\n\t *  Returns the value of a frequency in the current units\n\t */\n\tprotected _frequencyToUnits(freq: Hertz): Type {\n\t\treturn freq as Type;\n\t}\n\n\t/**\n\t *  Returns the value of a tick in the current time units\n\t */\n\tprotected _ticksToUnits(ticks: Ticks): Type {\n\t\treturn 1 / ((ticks * 60) / (this._getBpm() * this._getPPQ())) as Type;\n\t}\n\n\t/**\n\t *  Return the value of the beats in the current units\n\t */\n\tprotected _beatsToUnits(beats: number): Type {\n\t\treturn 1 / super._beatsToUnits(beats) as Type;\n\t}\n\n\t/**\n\t *  Returns the value of a second in the current units\n\t */\n\tprotected _secondsToUnits(seconds: Seconds): Type {\n\t\treturn 1 / seconds as Type;\n\t}\n\n\t/**\n\t * Convert a MIDI note to frequency value.\n\t * @param  midi The midi number to convert.\n\t * @return The corresponding frequency value\n\t * @example\n\t * FrequencyClass.mtof(69); // returns 440\n\t */\n\tstatic mtof(midi: MidiNote): Hertz {\n\t\treturn mtof(midi);\n\t}\n\n\t/**\n\t * Convert a frequency value to a MIDI note.\n\t * @param frequency The value to frequency value to convert.\n\t * @example\n\t * Frequency.ftom(440); // returns 69\n\t */\n\tstatic ftom(frequency: Hertz): MidiNote {\n\t\treturn ftom(frequency);\n\t}\n}\n\n///////////////////////////////////////////////////////////////////////////\n// \tFREQUENCY CONVERSIONS\n///////////////////////////////////////////////////////////////////////////\n\n/**\n *  Note to scale index\n *  @type  {Object}\n *  @private\n */\nconst noteToScaleIndex = {\n\t// tslint:disable-next-line\n\t\"cbb\" : -2, \"cb\" : -1, \"c\" : 0, \"c#\" : 1, \"cx\" : 2,\n\t\"dbb\" : 0, \"db\" : 1, \"d\" : 2, \"d#\" : 3, \"dx\" : 4,\n\t\"ebb\" : 2, \"eb\" : 3, \"e\" : 4, \"e#\" : 5, \"ex\" : 6,\n\t\"fbb\" : 3, \"fb\" : 4, \"f\" : 5, \"f#\" : 6, \"fx\" : 7,\n\t\"gbb\" : 5, \"gb\" : 6, \"g\" : 7, \"g#\" : 8, \"gx\" : 9,\n\t\"abb\" : 7, \"ab\" : 8, \"a\" : 9, \"a#\" : 10, \"ax\" : 11,\n\t\"bbb\" : 9, \"bb\" : 10, \"b\" : 11, \"b#\" : 12, \"bx\" : 13,\n};\n\n/**\n *  scale index to note (sharps)\n *  @type  {Array}\n *  @private\n */\nconst scaleIndexToNote = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n\n/**\n * Convert a value into a FrequencyClass object.\n */\nexport function Frequency(value?: TimeValue | Frequency, units?: FrequencyUnit): FrequencyClass {\n\treturn new FrequencyClass(getContext(), value, units);\n}\n","import { getContext } from \"../Global\";\nimport { TimeClass } from \"./Time\";\nimport { TimeBaseUnit, TimeValue } from \"./TimeBase\";\n\n/**\n * TransportTime is a the time along the Transport's\n * timeline. It is similar to Tone.Time, but instead of evaluating\n * against the AudioContext's clock, it is evaluated against\n * the Transport's position. See [TransportTime wiki](https://github.com/Tonejs/Tone.js/wiki/TransportTime).\n */\nexport class TransportTimeClass<Type extends Seconds | Ticks = Seconds> extends TimeClass<Type> {\n\n\tname = \"TransportTime\";\n\n\t/**\n\t * Return the current time in whichever context is relevant\n\t */\n\tprotected _now(): Type {\n\t\treturn this.context.transport.seconds as Type;\n\t}\n}\n\n/**\n * TransportTime is a the time along the Transport's\n * timeline. It is similar to Tone.Time, but instead of evaluating\n * against the AudioContext's clock, it is evaluated against\n * the Transport's position. See [TransportTime wiki](https://github.com/Tonejs/Tone.js/wiki/TransportTime).\n */\nexport function TransportTime(value?: TimeValue, units?: TimeBaseUnit): TransportTimeClass {\n\treturn new TransportTimeClass(getContext(), value, units);\n}\n","import { getContext } from \"../Global\";\nimport { Tone } from \"../Tone\";\nimport { FrequencyClass } from \"../type/Frequency\";\nimport { TimeClass } from \"../type/Time\";\nimport { TransportTimeClass } from \"../type/TransportTime\";\nimport \"../type/Units\";\nimport { getDefaultsFromInstance, omitFromObject, optionsFromArguments } from \"../util/Defaults\";\nimport { RecursivePartial } from \"../util/Interface\";\nimport { isArray, isBoolean, isDefined, isNumber, isString, isUndef } from \"../util/TypeCheck\";\nimport { Context } from \"./Context\";\n\n/**\n * A unit which process audio\n */\nexport interface ToneWithContextOptions {\n\tcontext: Context;\n}\n\n/**\n * The Base class for all nodes that have an AudioContext.\n */\nexport abstract class ToneWithContext<Options extends ToneWithContextOptions> extends Tone {\n\n\t/**\n\t * The context belonging to the node.\n\t */\n\treadonly context: Context;\n\n\t/**\n\t * The default context to use if no AudioContext is passed in to the constructor\n\t */\n\treadonly defaultContext?: Context;\n\n\tconstructor(context?: Context | Partial<ToneWithContextOptions>) {\n\t\tconst options = optionsFromArguments(ToneWithContext.getDefaults(), arguments, [\"context\"]);\n\t\tsuper();\n\t\tif (this.defaultContext) {\n\t\t\tthis.context = this.defaultContext;\n\t\t} else {\n\t\t\tthis.context = options.context;\n\t\t}\n\t}\n\n\tstatic getDefaults(): ToneWithContextOptions {\n\t\treturn {\n\t\t\tcontext: getContext(),\n\t\t};\n\t}\n\n\t/**\n\t * Return the current time of the Context clock plus the lookAhead.\n\t */\n\tnow(): Seconds {\n\t\treturn this.context.currentTime + this.context.lookAhead;\n\t}\n\n\t/**\n\t * Return the current time of the Context clock without any lookAhead.\n\t */\n\timmediate(): Seconds {\n\t\treturn this.context.currentTime;\n\t}\n\n\t/**\n\t * The duration in seconds of one sample.\n\t */\n\tget sampleTime(): Seconds {\n\t\treturn 1 / this.context.sampleRate;\n\t}\n\n\t/**\n\t * The number of seconds of 1 processing block (128 samples)\n\t */\n\tget blockTime(): Seconds {\n\t\treturn 128 / this.context.sampleRate;\n\t}\n\n\t/**\n\t * Convert the incoming time to seconds\n\t */\n\ttoSeconds(time?: Time): Seconds {\n\t\treturn new TimeClass(this.context, time).toSeconds();\n\t}\n\n\t/**\n\t * Convert the input to a frequency number\n\t */\n\ttoFrequency(freq: Frequency): Hertz {\n\t\treturn new FrequencyClass(this.context, freq).toFrequency();\n\t}\n\n\t/**\n\t * Convert the input time into ticks\n\t */\n\ttoTicks(time: Time | TimeClass): Ticks {\n\t\treturn new TransportTimeClass(this.context, time).toTicks();\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tGET/SET\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Get the object's attributes.\n\t * @example\n\t * osc.get();\n\t * //returns {\"type\" : \"sine\", \"frequency\" : 440, ...etc}\n\t */\n\tget(): Options {\n\t\tconst defaults = getDefaultsFromInstance(this) as Options;\n\t\tObject.keys(defaults).forEach(attribute => {\n\t\t\tif (Reflect.has(this, attribute)) {\n\t\t\t\tconst member = this[attribute];\n\t\t\t\tif (isDefined(member) && isDefined(member.value) && isDefined(member.setValueAtTime)) {\n\t\t\t\t\tdefaults[attribute] = member.value;\n\t\t\t\t} else if (member instanceof ToneWithContext) {\n\t\t\t\t\tdefaults[attribute] = member.get();\n\t\t\t\t// otherwise make sure it's a serializable type\n\t\t\t\t} else if (isArray(member) || isNumber(member) || isString(member) || isBoolean(member)) {\n\t\t\t\t\tdefaults[attribute] = member;\n\t\t\t\t} else {\n\t\t\t\t\t// remove all undefined and unserializable attributes\n\t\t\t\t\tdelete defaults[attribute];\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn defaults;\n\t}\n\n\t/**\n\t * Set the parameters at once. Either pass in an\n\t * object mapping parameters to values, or to set a\n\t * single parameter, by passing in a string and value.\n\t * The last argument is an optional ramp time which\n\t * will ramp any signal values to their destination value\n\t * over the duration of the rampTime.\n\t * @param  params\n\t * @example\n\t * //set values using an object\n\t * filter.set({\n\t * \t\"frequency\" : 300,\n\t * \t\"type\" : \"highpass\"\n\t * });\n\t */\n\tset(props: RecursivePartial<Options>): this {\n\t\tObject.keys(props).forEach(attribute => {\n\t\t\tif (Reflect.has(this, attribute) && isDefined(this[attribute])) {\n\t\t\t\tif (this[attribute] && isDefined(this[attribute].value) && isDefined(this[attribute].setValueAtTime)) {\n\t\t\t\t\tthis[attribute].value = props[attribute];\n\t\t\t\t} else if (this[attribute] instanceof ToneWithContext) {\n\t\t\t\t\tthis[attribute].set(props[attribute]);\n\t\t\t\t} else {\n\t\t\t\t\tthis[attribute] = props[attribute];\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n}\n","import { AbstractParam } from \"../context/AbstractParam\";\nimport { dbToGain, gainToDb } from \"../type/Conversions\";\nimport \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isDefined, isNumber } from \"../util/TypeCheck\";\nimport { ToneWithContext, ToneWithContextOptions } from \"./ToneWithContext\";\n\nexport interface ParamOptions extends ToneWithContextOptions {\n\tunits: UnitName;\n\tvalue?: any;\n\tparam: AudioParam;\n\tconvert: boolean;\n}\n\n/**\n * the possible automation types\n */\ntype AutomationType = \"linear\" | \"exponential\" | \"setValue\" | \"setTarget\" | \"cancel\";\n\n/**\n * The events on the automation\n */\nexport interface AutomationEvent {\n\ttype: AutomationType;\n\ttime: number;\n\tvalue: number;\n\tconstant?: number;\n}\n\n/**\n *  Param wraps the native Web Audio's AudioParam to provide\n * additional unit conversion functionality. It also\n * serves as a base-class for classes which have a single,\n * automatable parameter.\n */\nexport class Param<Type extends Unit = number>\nextends ToneWithContext<ParamOptions>\nimplements AbstractParam<Type> {\n\n\tname = \"Param\";\n\n\tstatic getDefaults(): ParamOptions {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tconvert: true,\n\t\t\tunits: \"number\" as UnitName,\n\t\t} as ParamOptions);\n\t}\n\n\t/**\n\t * The input connection\n\t */\n\treadonly input: AudioParam;\n\treadonly units: UnitName;\n\tconvert: boolean;\n\toverridden: boolean = false;\n\n\t/**\n\t * The timeline which tracks all of the automations.\n\t */\n\tprotected _events: Timeline<AutomationEvent>;\n\n\t/**\n\t *  The native parameter to control\n\t */\n\tprotected _param: AudioParam;\n\n\t/**\n\t *  The default value before anything is assigned\n\t */\n\tprotected _initialValue: number;\n\n\t/**\n\t *  The minimum output value\n\t */\n\tprivate _minOutput = 1e-5;\n\n\tconstructor(param: AudioParam, units?: Unit, convert?: boolean);\n\tconstructor(options: Partial<ParamOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Param.getDefaults(), arguments, [\"param\", \"units\", \"convert\"]));\n\n\t\tconst options = optionsFromArguments(Param.getDefaults(), arguments, [\"param\", \"units\", \"convert\"]);\n\n\t\tthis.assert(isDefined(options.param) && options.param instanceof AudioParam, \"param must be an AudioParam\");\n\n\t\t// initialize\n\t\tthis._param = this.input = options.param;\n\t\tthis._events = new Timeline<AutomationEvent>(1000);\n\t\tthis._initialValue = this._param.value;\n\t\tthis.units = options.units;\n\t\tthis.convert = options.convert;\n\n\t\t// if the value is defined, set it immediately\n\t\tif (isDefined(options.value)) {\n\t\t\tthis.setValueAtTime(options.value, 0);\n\t\t}\n\t}\n\n\tget value(): Type {\n\t\tconst now = this.now();\n\t\treturn this.getValueAtTime(now);\n\t}\n\tset value(value: Type) {\n\t\tthis._initialValue = this._fromType(value);\n\t\tthis.cancelScheduledValues(this.now());\n\t\tthis.setValueAtTime(value, this.now());\n\t}\n\n\tget minValue(): number {\n\t\tif (this.units === \"time\" || this.units === \"frequency\" ||\n\t\t\tthis.units === \"normalRange\" || this.units === \"positive\" ||\n\t\t\tthis.units === \"transportTime\" || this.units === \"ticks\" ||\n\t\t\tthis.units === \"bpm\" || this.units === \"hertz\" || this.units === \"samples\") {\n\t\t\treturn 0;\n\t\t} else if (this.units === \"audioRange\") {\n\t\t\treturn -1;\n\t\t} else if (this.units === \"decibels\") {\n\t\t\treturn -Infinity;\n\t\t} else {\n\t\t\treturn this._param.minValue;\n\t\t}\n\t}\n\n\tget maxValue(): number {\n\t\tif (this.units === \"normalRange\" ||\n\t\t\tthis.units === \"audioRange\") {\n\t\t\treturn 1;\n\t\t} else {\n\t\t\treturn this._param.maxValue;\n\t\t}\n\t}\n\n\t/**\n\t * Type guard based on the unit name\n\t */\n\tprivate _is<T>(arg: any, type: UnitName): arg is T {\n\t\treturn this.units === type;\n\t}\n\n\t/**\n\t *  Convert the given value from the type specified by Param.units\n\t *  into the destination value (such as Gain or Frequency).\n\t */\n\tprotected _fromType(val: Type): number {\n\t\tif (this.convert && !this.overridden) {\n\t\t\tif (this._is<Time>(val, \"time\")) {\n\t\t\t\treturn this.toSeconds(val);\n\t\t\t} else if (this._is<Decibels>(val, \"decibels\")) {\n\t\t\t\treturn dbToGain(val);\n\t\t\t} else if (this._is<Frequency>(val, \"frequency\")) {\n\t\t\t\treturn this.toFrequency(val);\n\t\t\t} else if (this._is<NormalRange>(val, \"normalRange\")) {\n\t\t\t\treturn Math.min(Math.max(val, 0), 1);\n\t\t\t} else if (this._is<AudioRange>(val, \"audioRange\")) {\n\t\t\t\treturn Math.min(Math.max(val, -1), 1);\n\t\t\t} else if (this._is<Positive>(val, \"positive\")) {\n\t\t\t\treturn Math.max(val, 0);\n\t\t\t} else if (this._is<number>(val, \"number\")) {\n\t\t\t\treturn val;\n\t\t\t} else {\n\t\t\t\treturn val as number;\n\t\t\t}\n\t\t} else {\n\t\t\treturn val as number;\n\t\t}\n\t}\n\n\t/**\n\t * Convert the parameters value into the units specified by Param.units.\n\t */\n\tprotected _toType(val: number): Type {\n\t\tif (this.convert && this.units === \"decibels\") {\n\t\t\treturn gainToDb(val) as Type;\n\t\t} else {\n\t\t\treturn val as Type;\n\t\t}\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// ABSTRACT PARAM INTERFACE\n\t// all docs are generated from ParamInterface.ts\n\t///////////////////////////////////////////////////////////////////////////\n\n\tsetValueAtTime(value: Type, time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst numericValue = this._fromType(value);\n\t\tthis._events.add({\n\t\t\ttime: computedTime,\n\t\t\ttype: \"setValue\",\n\t\t\tvalue: numericValue,\n\t\t});\n\t\tthis.log(\"setValue\", value, computedTime);\n\t\tthis.assert(isFinite(numericValue) && isFinite(computedTime),\n\t\t\t`Invalid argument(s) to setValueAtTime: ${JSON.stringify(value)}, ${JSON.stringify(time)}`);\n\t\tthis._param.setValueAtTime(numericValue, computedTime);\n\t\treturn this;\n\t}\n\n\tgetValueAtTime(time: Time): Type {\n\t\tconst computedTime = Math.max(this.toSeconds(time), 0);\n\t\tconst after = this._events.getAfter(computedTime);\n\t\tconst before = this._events.get(computedTime);\n\t\tlet value = this._initialValue;\n\t\t// if it was set by\n\t\tif (before === null) {\n\t\t\tvalue = this._initialValue;\n\t\t} else if (before.type === \"setTarget\" && (after === null || after.type === \"setValue\")) {\n\t\t\tconst previous = this._events.getBefore(before.time);\n\t\t\tlet previousVal;\n\t\t\tif (previous === null) {\n\t\t\t\tpreviousVal = this._initialValue;\n\t\t\t} else {\n\t\t\t\tpreviousVal = previous.value;\n\t\t\t}\n\t\t\tif (isDefined(before.constant)) {\n\t\t\t\tvalue = this._exponentialApproach(before.time, previousVal, before.value, before.constant, computedTime);\n\t\t\t}\n\t\t} else if (after === null) {\n\t\t\tvalue = before.value;\n\t\t} else if (after.type === \"linear\" || after.type === \"exponential\") {\n\t\t\tlet beforeValue = before.value;\n\t\t\tif (before.type === \"setTarget\") {\n\t\t\t\tconst previous = this._events.getBefore(before.time);\n\t\t\t\tif (previous === null) {\n\t\t\t\t\tbeforeValue = this._initialValue;\n\t\t\t\t} else {\n\t\t\t\t\tbeforeValue = previous.value;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (after.type === \"linear\") {\n\t\t\t\tvalue = this._linearInterpolate(before.time, beforeValue, after.time, after.value, computedTime);\n\t\t\t} else {\n\t\t\t\tvalue = this._exponentialInterpolate(before.time, beforeValue, after.time, after.value, computedTime);\n\t\t\t}\n\t\t} else {\n\t\t\tvalue = before.value;\n\t\t}\n\t\treturn this._toType(value);\n\t}\n\n\tsetRampPoint(time: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tlet currentVal = this.getValueAtTime(time);\n\t\tthis.cancelAndHoldAtTime(time);\n\t\tif (this._fromType(currentVal) === 0) {\n\t\t\tcurrentVal = this._toType(this._minOutput);\n\t\t}\n\t\tthis.setValueAtTime(currentVal, time);\n\t\treturn this;\n\t}\n\n\tlinearRampToValueAtTime(value: Type, endTime: Time): this {\n\t\tconst numericValue = this._fromType(value);\n\t\tconst computedTime = this.toSeconds(endTime);\n\t\tthis._events.add({\n\t\t\ttime: computedTime,\n\t\t\ttype: \"linear\",\n\t\t\tvalue : numericValue,\n\t\t});\n\t\tthis.log(\"linear\", value, computedTime);\n\t\tthis.assert(isFinite(numericValue) && isFinite(computedTime),\n\t\t\t`Invalid argument(s) to linearRampToValueAtTime: ${JSON.stringify(value)}, ${JSON.stringify(endTime)}`);\n\t\tthis._param.linearRampToValueAtTime(numericValue, computedTime);\n\t\treturn this;\n\t}\n\n\texponentialRampToValueAtTime(value: Type, endTime: Time): this {\n\t\tlet numericValue = this._fromType(value);\n\t\tnumericValue = Math.max(this._minOutput, numericValue);\n\t\tconst computedTime = this.toSeconds(endTime);\n\t\t// store the event\n\t\tthis._events.add({\n\t\t\ttime: computedTime,\n\t\t\ttype: \"exponential\",\n\t\t\tvalue : numericValue,\n\t\t});\n\t\tthis.log(\"exponential\", value, computedTime);\n\t\tthis.assert(isFinite(numericValue) && isFinite(computedTime),\n\t\t\t`Invalid argument(s) to exponentialRampToValueAtTime: ${JSON.stringify(value)}, ${JSON.stringify(endTime)}`);\n\t\tthis._param.exponentialRampToValueAtTime(numericValue, computedTime);\n\t\treturn this;\n\t}\n\n\texponentialRampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tstartTime = this.toSeconds(startTime);\n\t\tthis.setRampPoint(startTime);\n\t\tthis.exponentialRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n\t\treturn this;\n\t}\n\n\tlinearRampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tstartTime = this.toSeconds(startTime);\n\t\tthis.setRampPoint(startTime);\n\t\tthis.linearRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n\t\treturn this;\n\t}\n\n\ttargetRampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tstartTime = this.toSeconds(startTime);\n\t\tthis.setRampPoint(startTime);\n\t\tthis.exponentialApproachValueAtTime(value, startTime, rampTime);\n\t\treturn this;\n\t}\n\n\texponentialApproachValueAtTime(value: Type, time: Time, rampTime: Time): this {\n\t\tconst timeConstant = Math.log(this.toSeconds(rampTime) + 1) / Math.log(200);\n\t\ttime = this.toSeconds(time);\n\t\treturn this.setTargetAtTime(value, time, timeConstant);\n\t}\n\n\tsetTargetAtTime(value: Type, startTime: Time, timeConstant: Positive): this {\n\t\tconst numericValue = this._fromType(value);\n\t\t// The value will never be able to approach without timeConstant > 0.\n\t\tthis.assert(isFinite(timeConstant) && timeConstant > 0, \"timeConstant must be a number greater than 0\");\n\t\tconst computedTime = this.toSeconds(startTime);\n\t\tthis._events.add({\n\t\t\tconstant: timeConstant,\n\t\t\ttime: computedTime,\n\t\t\ttype: \"setTarget\",\n\t\t\tvalue: numericValue,\n\t\t});\n\t\tthis.log(\"setTarget\", value, computedTime, timeConstant);\n\t\tthis.assert(isFinite(numericValue) && isFinite(computedTime),\n\t\t\t`Invalid argument(s) to setTargetAtTime: ${JSON.stringify(value)}, ${JSON.stringify(startTime)}`);\n\t\tthis._param.setTargetAtTime(numericValue, computedTime, timeConstant);\n\t\treturn this;\n\t}\n\n\tsetValueCurveAtTime(values: Type[], startTime: Time, duration: Time, scaling: number = 1): this {\n\t\tduration = this.toSeconds(duration);\n\t\tstartTime = this.toSeconds(startTime);\n\t\tconst startingValue = this._fromType(values[0]) * scaling;\n\t\tthis.setValueAtTime(this._toType(startingValue), startTime);\n\t\tconst segTime = duration / (values.length - 1);\n\t\tfor (let i = 1; i < values.length; i++) {\n\t\t\tconst numericValue = this._fromType(values[i]) * scaling;\n\t\t\tthis.linearRampToValueAtTime(this._toType(numericValue), startTime + i * segTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\tcancelScheduledValues(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._events.cancel(computedTime);\n\t\tthis.assert(isFinite(computedTime), `Invalid argument to cancelScheduledValues: ${JSON.stringify(time)}`);\n\t\tthis._param.cancelScheduledValues(computedTime);\n\t\tthis.log(\"cancel\", computedTime);\n\t\treturn this;\n\t}\n\n\tcancelAndHoldAtTime(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst valueAtTime = this._fromType(this.getValueAtTime(computedTime));\n\t\tthis.log(\"cancelAndHoldAtTime\", computedTime, \"value=\" + valueAtTime);\n\n\t\t// remove the schedule events\n\t\tthis.assert(isFinite(computedTime), `Invalid argument to cancelAndHoldAtTime: ${JSON.stringify(time)}`);\n\t\tthis._param.cancelScheduledValues(computedTime);\n\n\t\t// if there is an event at the given computedTime\n\t\t// and that even is not a \"set\"\n\t\tconst before = this._events.get(computedTime);\n\t\tconst after = this._events.getAfter(computedTime);\n\t\tif (before && before.time === computedTime) {\n\t\t\t// remove everything after\n\t\t\tif (after) {\n\t\t\t\tthis._events.cancel(after.time);\n\t\t\t} else {\n\t\t\t\tthis._events.cancel(computedTime + this.sampleTime);\n\t\t\t}\n\t\t} else if (after) {\n\t\t\t// cancel the next event(s)\n\t\t\tthis._events.cancel(after.time);\n\t\t\tif (after.type === \"linear\") {\n\t\t\t\tthis.linearRampToValueAtTime(this._toType(valueAtTime), computedTime);\n\t\t\t} else if (after.type === \"exponential\") {\n\t\t\t\tthis.exponentialRampToValueAtTime(this._toType(valueAtTime), computedTime);\n\t\t\t}\n\t\t}\n\n\t\t// set the value at the given time\n\t\tthis._events.add({\n\t\t\ttime: computedTime,\n\t\t\ttype: \"setValue\",\n\t\t\tvalue: valueAtTime,\n\t\t});\n\t\tthis._param.setValueAtTime(valueAtTime, computedTime);\n\t\treturn this;\n\t}\n\n\trampTo(value: Type, rampTime: Time = 0.1, startTime?: Time): this {\n\t\tif (this.units === \"frequency\" || this.units === \"bpm\" || this.units === \"decibels\") {\n\t\t\tthis.exponentialRampTo(value, rampTime, startTime);\n\t\t} else {\n\t\t\tthis.linearRampTo(value, rampTime, startTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._events.dispose();\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tAUTOMATION CURVE CALCULATIONS\n\t// \tMIT License, copyright (c) 2014 Jordan Santell\n\t///////////////////////////////////////////////////////////////////////////\n\n\t// Calculates the the value along the curve produced by setTargetAtTime\n\tprotected _exponentialApproach(t0: number, v0: number, v1: number, timeConstant: number, t: number): number {\n\t\treturn v1 + (v0 - v1) * Math.exp(-(t - t0) / timeConstant);\n\t}\n\n\t// Calculates the the value along the curve produced by linearRampToValueAtTime\n\tprotected _linearInterpolate(t0: number, v0: number, t1: number, v1: number, t: number): number {\n\t\treturn v0 + (v1 - v0) * ((t - t0) / (t1 - t0));\n\t}\n\n\t// Calculates the the value along the curve produced by exponentialRampToValueAtTime\n\tprotected _exponentialInterpolate(t0: number, v0: number, t1: number, v1: number, t: number): number {\n\t\treturn v0 * Math.pow(v1 / v0, (t - t0) / (t1 - t0));\n\t}\n}\n","import { isArray } from \"./TypeCheck\";\n\n// return an interface which excludes certain keys\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n\n/**\n *  Make the property not writable using `defineProperty`. Internal use only.\n */\nexport function readOnly(target: object, property: string | string[]): void {\n\tif (isArray(property)) {\n\t\tproperty.forEach(str => readOnly(target, str));\n\t} else {\n\t\tObject.defineProperty(target, property, {\n\t\t\tenumerable: true,\n\t\t\twritable: false,\n\t\t});\n\t}\n}\n\n/**\n *  Make an attribute writeable. Internal use only.\n */\nexport function writable(target: object, property: string | string[]): void {\n\tif (isArray(property)) {\n\t\tproperty.forEach(str => writable(target, str));\n\t} else {\n\t\tObject.defineProperty(target, property, {\n\t\t\twritable: true,\n\t\t});\n\t}\n}\n\nexport const noOp: (...args: any[]) => any = () => {\n\t// no op!\n};\n\n/**\n * Recursive Partial taken from here: https://stackoverflow.com/a/51365037\n */\nexport type RecursivePartial<T> = {\n\t[P in keyof T]?:\n\tT[P] extends Array<infer U> ? Array<RecursivePartial<U>> :\n\tT[P] extends object ? RecursivePartial<T[P]> :\n\tT[P];\n};\n","import { optionsFromArguments } from \"../util/Defaults\";\nimport { isArray, isDefined, isNumber } from \"../util/TypeCheck\";\nimport { Param } from \"./Param\";\nimport { ToneWithContext, ToneWithContextOptions } from \"./ToneWithContext\";\n\nexport type InputNode = ToneAudioNode | AudioNode | AudioParam | Param<Unit>;\nexport type OutputNode = ToneAudioNode | AudioNode;\n\nexport interface ChannelProperties {\n\tchannelCount: number;\n\tchannelCountMode: ChannelCountMode;\n\tchannelInterpretation: ChannelInterpretation;\n}\n\n/**\n * The possible options for this node\n */\nexport interface ToneAudioNodeOptions extends ToneWithContextOptions {\n\tnumberOfInputs: number;\n\tnumberOfOutputs: number;\n\tchannelCount: number;\n\tchannelCountMode: ChannelCountMode;\n\tchannelInterpretation: ChannelInterpretation;\n}\n\n/**\n *  ToneAudioNode is the base class for classes which process audio.\n */\nexport abstract class ToneAudioNode<Options extends ToneAudioNodeOptions = ToneAudioNodeOptions>\nextends ToneWithContext<Options> {\n\n\tabstract name = \"AudioNode\";\n\n\t/**\n\t * The input node or nodes. If the object is a source,\n\t * it does not have any input and this.input is undefined.\n\t */\n\tabstract input: InputNode | InputNode | undefined;\n\n\t/**\n\t * The output nodes. If the object is a sink,\n\t * it does not have any output and this.output is undefined.\n\t */\n\tabstract output: OutputNode | OutputNode | undefined;\n\n\t/**\n\t *  The number of inputs feeding into the AudioNode.\n\t *  For source nodes, this will be 0.\n\t */\n\treadonly numberOfInputs: number;\n\n\t/**\n\t *  The number of outputs of the AudioNode.\n\t */\n\treadonly numberOfOutputs: number;\n\n\t/**\n\t * List all of the node that must be set to match the ChannelProperties\n\t */\n\tprotected abstract _internalChannels: OutputNode[];\n\n\tstatic getDefaults(): ToneAudioNodeOptions {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tchannelCount: 2,\n\t\t\tchannelCountMode: \"max\" as ChannelCountMode,\n\t\t\tchannelInterpretation: \"speakers\" as ChannelInterpretation,\n\t\t\tnumberOfInputs: 0,\n\t\t\tnumberOfOutputs: 0,\n\t\t});\n\t}\n\n\tconstructor(options: ToneAudioNodeOptions) {\n\t\tsuper(options);\n\t\tthis.numberOfInputs = options.numberOfInputs;\n\t\tthis.numberOfOutputs = options.numberOfOutputs;\n\t}\n\n\tprotected createInsOuts(numberOfInputs: number = 0, numberOfOutputs: number = 0): void {\n\t\t// if (numberOfInputs === 1) {\n\t\t// \tthis.input = this.context.createGain();\n\t\t// } else if (numberOfInputs > 1) {\n\t\t// \tthis.input = [];\n\t\t// \tfor (let i = 0; i < numberOfInputs; i++) {\n\t\t// \t\tthis.input[i] = this.context.createGain();\n\t\t// \t}\n\t\t// }\n\n\t\t// if (numberOfOutputs === 1) {\n\t\t// \tthis.output = this.context.createGain();\n\t\t// } else if (numberOfOutputs > 1) {\n\t\t// \tthis.output = [];\n\t\t// \tfor (let o = 0; o < numberOfOutputs; o++) {\n\t\t// \t\tthis.output[o] = this.context.createGain();\n\t\t// \t}\n\t\t// }\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// AUDIO PROPERTIES\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Set the audio options for this node such as channelInterpretation\n\t * channelCount, etc.\n\t * @param options\n\t */\n\tprivate _setChannelProperties(options: ChannelProperties): void {\n\t\tif (this._internalChannels.length) {\n\t\t\tthis._internalChannels.forEach(node => {\n\t\t\t\tnode.channelCount = options.channelCount;\n\t\t\t\tnode.channelCountMode = options.channelCountMode;\n\t\t\t\tnode.channelInterpretation = options.channelInterpretation;\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Get the current audio options for this node such as channelInterpretation\n\t * channelCount, etc.\n\t */\n\tprivate _getChannelProperties(): ChannelProperties {\n\t\tif (this._internalChannels.length) {\n\t\t\tconst node = this._internalChannels[0];\n\t\t\treturn {\n\t\t\t\tchannelCount: node.channelCount,\n\t\t\t\tchannelCountMode: node.channelCountMode,\n\t\t\t\tchannelInterpretation: node.channelInterpretation,\n\t\t\t};\n\t\t} else {\n\t\t\t// return the defaults\n\t\t\treturn {\n\t\t\t\tchannelCount: 2,\n\t\t\t\tchannelCountMode: \"max\",\n\t\t\t\tchannelInterpretation: \"speakers\",\n\t\t\t};\n\t\t}\n\t}\n\n\t/**\n\t *  channelCount is the number of channels used when up-mixing and down-mixing\n\t *  connections to any inputs to the node. The default value is 2 except for\n\t *  specific nodes where its value is specially determined.\n\t */\n\tget channelCount(): number {\n\t\treturn this._getChannelProperties().channelCount;\n\t}\n\tset channelCount(channelCount: number) {\n\t\tconst props = this._getChannelProperties();\n\t\t// merge it with the other properties\n\t\tthis._setChannelProperties(Object.assign(props, { channelCount }));\n\t}\n\n\t/**\n\t *  channelCountMode determines how channels will be counted when up-mixing and\n\t *  down-mixing connections to any inputs to the node.\n\t *  The default value is \"max\". This attribute has no effect for nodes with no inputs.\n\t */\n\tget channelCountMode(): ChannelCountMode {\n\t\treturn this._getChannelProperties().channelCountMode;\n\t}\n\tset channelCountMode(channelCountMode: ChannelCountMode) {\n\t\tconst props = this._getChannelProperties();\n\t\t// merge it with the other properties\n\t\tthis._setChannelProperties(Object.assign(props, { channelCountMode }));\n\t}\n\n\t/**\n\t *  channelInterpretation determines how individual channels will be treated\n\t *  when up-mixing and down-mixing connections to any inputs to the node.\n\t *  The default value is \"speakers\".\n\t */\n\tget channelInterpretation(): ChannelInterpretation {\n\t\treturn this._getChannelProperties().channelInterpretation;\n\t}\n\tset channelInterpretation(channelInterpretation: ChannelInterpretation) {\n\t\tconst props = this._getChannelProperties();\n\t\t// merge it with the other properties\n\t\tthis._setChannelProperties(Object.assign(props, { channelInterpretation }));\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// CONNECTIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * connect the output of a ToneAudioNode to an AudioParam, AudioNode, or ToneAudioNode\n\t * @param unit The output to connect to\n\t * @param outputNum The output to connect from\n\t * @param inputNum The input to connect to\n\t */\n\tconnect(destination: InputNode, outputNum = 0, inputNum = 0): this {\n\t\tconnect(this, destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Connect the output to the context's destination node.\n\t */\n\ttoDestination(): this {\n\t\tthis.connect(this.context.destination);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Connect the output to the context's destination node.\n\t * alias for {@link toDestination}\n\t */\n\ttoMaster(): this {\n\t\tconsole.warn(\"toMaster() has been renamed toDestination()\");\n\t\treturn this.toDestination();\n\t}\n\n\t/**\n\t *  disconnect the output\n\t *  @param output Either the output index to disconnect if the output is an array, or the node to disconnect from.\n\t */\n\tdisconnect(destination?: InputNode, outputNum = 0, inputNum = 0): this {\n\t\tdisconnect(this, destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Connect the output of this node to the rest of the nodes in series.\n\t *  @param nodes\n\t *  @example\n\t *  //connect a node to an effect, panVol and then to the master output\n\t *  node.chain(effect, panVol, Tone.Destination);\n\t */\n\tchain(...nodes: InputNode[]): this {\n\t\tconnectSeries(this, ...nodes);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  connect the output of this node to the rest of the nodes in parallel.\n\t *  @param nodes\n\t *  @returns this\n\t */\n\tfan(...nodes: InputNode[]): this {\n\t\tnodes.forEach(node => this.connect(node));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Dispose and disconnect\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (isDefined(this.input)) {\n\t\t\tif (isArray(this.input)) {\n\t\t\t\tthis.input.forEach(input => {\n\t\t\t\t\tif (input instanceof ToneAudioNode) {\n\t\t\t\t\t\tinput.dispose();\n\t\t\t\t\t} else if (input instanceof AudioNode) {\n\t\t\t\t\t\tinput.disconnect();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else if (this.input instanceof ToneAudioNode) {\n\t\t\t\tthis.input.dispose();\n\t\t\t} else if (this.input instanceof AudioNode) {\n\t\t\t\tthis.input.disconnect();\n\t\t\t}\n\t\t}\n\t\tif (isDefined(this.output)) {\n\t\t\tif (isArray(this.output)) {\n\t\t\t\tthis.output.forEach(output => {\n\t\t\t\t\tif (output instanceof ToneAudioNode) {\n\t\t\t\t\t\toutput.dispose();\n\t\t\t\t\t} else {\n\t\t\t\t\t\toutput.disconnect();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else if (this.output instanceof ToneAudioNode) {\n\t\t\t\tthis.output.dispose();\n\t\t\t} else if (this.output instanceof AudioNode) {\n\t\t\t\tthis.output.disconnect();\n\t\t\t}\n\t\t}\n\t\tthis._internalChannels = [];\n\t\treturn this;\n\t}\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// CONNECTIONS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n *  connect together all of the arguments in series\n *  @param nodes\n */\nexport function connectSeries(...nodes: InputNode[]): void {\n\tconst first = nodes.shift();\n\tnodes.reduce((prev, current) => {\n\t\tif (prev instanceof ToneAudioNode) {\n\t\t\tprev.connect(current);\n\t\t} else if (prev instanceof AudioNode) {\n\t\t\tconnect(prev, current);\n\t\t}\n\t\treturn current;\n\t}, first);\n}\n\n/**\n * Connect two nodes together so that signal flows from the\n * first node to the second. Optionally specify the input and output channels.\n * @param srcNode The source node\n * @param dstNode The destination node\n * @param outputNumber The output channel of the srcNode\n * @param inputNumber The input channel of the dstNode\n */\nexport function connect(srcNode: OutputNode, dstNode: InputNode, outputNumber = 0, inputNumber = 0): void {\n\n\t// resolve the input of the dstNode\n\twhile (!(dstNode instanceof AudioNode || dstNode instanceof AudioParam)) {\n\t\tif (isDefined(dstNode.input)) {\n\t\t\tdstNode = dstNode.input;\n\t\t}\n\t}\n\n\twhile (srcNode instanceof ToneAudioNode) {\n\t\tif (isDefined(srcNode.output)) {\n\t\t\tsrcNode = srcNode.output;\n\t\t}\n\t}\n\n\t// make the connection\n\tif (dstNode instanceof AudioParam) {\n\t\tsrcNode.connect(dstNode, outputNumber);\n\t} else {\n\t\tsrcNode.connect(dstNode, outputNumber, inputNumber);\n\t}\n}\n\n/**\n * Disconnect a node from all nodes or optionally include a destination node and input/output channels.\n * @param srcNode The source node\n * @param dstNode The destination node\n * @param outputNumber The output channel of the srcNode\n * @param inputNumber The input channel of the dstNode\n */\nexport function disconnect(\n\tsrcNode: OutputNode,\n\tdstNode?: InputNode,\n\toutputNumber = 0,\n\tinputNumber = 0,\n): void {\n\n\t// resolve the destination node\n\tif (isDefined(dstNode)) {\n\t\twhile (dstNode instanceof ToneAudioNode) {\n\t\t\tif (dstNode.input) {\n\t\t\t\tdstNode = dstNode.input;\n\t\t\t}\n\t\t}\n\t}\n\n\t// resolve the src node\n\twhile (!(srcNode instanceof AudioNode)) {\n\t\tif (isDefined(srcNode.output)) {\n\t\t\tsrcNode = srcNode.output;\n\t\t}\n\t}\n\n\tif (dstNode instanceof AudioParam) {\n\t\tsrcNode.disconnect(dstNode, outputNumber);\n\t} else if (dstNode instanceof AudioNode) {\n\t\tsrcNode.disconnect(dstNode, outputNumber, inputNumber);\n\t} else {\n\t\tsrcNode.disconnect();\n\t}\n}\n","import { Param } from \"../context/Param\";\nimport \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"./ToneAudioNode\";\n\ninterface GainOptions extends ToneAudioNodeOptions {\n\tgain: number;\n\tunits: UnitName;\n\tconvert: boolean;\n}\n\n/**\n * A thin wrapper around the Native Web Audio GainNode.\n * The GainNode is a basic building block of the Web Audio\n * API and is useful for routing audio and adjusting gains.\n * @param  gain The initial gain of the GainNode\n * @param units The units of the gain parameter.\n */\nexport class Gain<Type extends Unit = GainFactor> extends ToneAudioNode<GainOptions> {\n\n\tname = \"Gain\";\n\n\t/**\n\t *  The gain parameter of the gain node.\n\t */\n\treadonly gain: Param<Type>;\n\n\t/**\n\t * The wrapped GainNode.\n\t */\n\tprivate _gainNode: GainNode = this.context.createGain();\n\n\t// input = output\n\treadonly input: GainNode = this._gainNode;\n\treadonly output: GainNode = this._gainNode;\n\n\t/**\n\t * Add all of the gain nodes\n\t */\n\tprotected _internalChannels: AudioNode[] = [this._gainNode];\n\n\tconstructor(gain?: GainFactor, units?: Unit);\n\tconstructor(options?: Partial<GainOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Gain.getDefaults(), arguments, [\"gain\", \"units\"]));\n\t\tconst options = optionsFromArguments(Gain.getDefaults(), arguments, [\"gain\", \"units\"]);\n\n\t\tthis.gain = new Param({\n\t\t\tcontext : this.context,\n\t\t\tconvert : options.convert,\n\t\t\tparam : this._gainNode.gain,\n\t\t\tunits : options.units,\n\t\t\tvalue : options.gain,\n\t\t});\n\t\treadOnly(this, \"gain\");\n\t}\n\n\tstatic getDefaults(): GainOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tconvert : true,\n\t\t\tgain : 1,\n\t\t\tnumberOfInputs: 1,\n\t\t\tnumberOfOutputs: 1,\n\t\t\tunits : \"gain\" as UnitName,\n\t\t});\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._gainNode.disconnect();\n\t\tthis.gain.dispose();\n\t\treturn this;\n\t}\n}\n","import { Context } from \"../context/Context\";\n\n/**\n *  Wrapper around the OfflineAudioContext\n *  @param  channels  The number of channels to render\n *  @param  duration  The duration to render in samples\n *  @param sampleRate the sample rate to render at\n */\nexport class OfflineContext extends Context {\n\n\tname = \"OfflineContext\";\n\n\t/**\n\t *  A private reference to the duration\n\t */\n\tprivate readonly _duration: Seconds;\n\n\t/**\n\t *  An artificial clock source\n\t */\n\tprivate _currentTime: Seconds = 0;\n\n\t/**\n\t * Private reference to the OfflineAudioContext.\n\t */\n\tprotected _context!: OfflineAudioContext;\n\n\tconstructor(channels: number | OfflineAudioContext, duration: Seconds, sampleRate: number) {\n\n\t\tsuper({\n\t\t\tclockSource: \"offline\",\n\t\t\tcontext: channels instanceof OfflineAudioContext ?\n\t\t\t\tchannels : new OfflineAudioContext(channels, duration * sampleRate, sampleRate),\n\t\t\tlookAhead: 0,\n\t\t\tupdateInterval: channels instanceof OfflineAudioContext ?\n\t\t\t\t\t128 / channels.sampleRate : 128 / sampleRate,\n\t\t});\n\n\t\tthis._duration = channels instanceof OfflineAudioContext ?\n\t\t\tchannels.length / channels.sampleRate : duration;\n\t}\n\n\t/**\n\t *  Override the now method to point to the internal clock time\n\t */\n\tnow(): Seconds {\n\t\treturn this._currentTime;\n\t}\n\n\t/**\n\t * Same as this.now()\n\t */\n\tget currentTime(): Seconds {\n\t\treturn this._currentTime;\n\t}\n\n\t/**\n\t *  Render the output of the OfflineContext\n\t */\n\trender(): Promise<AudioBuffer> {\n\t\twhile (this._duration - this._currentTime >= 0) {\n\t\t\t// invoke all the callbacks on that time\n\t\t\tthis.emit(\"tick\");\n\t\t\t// increment the clock in 5ms chunks\n\t\t\tthis._currentTime += 0.005;\n\t\t}\n\n\t\treturn this._context.startRendering();\n\t}\n\n\t/**\n\t *  Close the context\n\t */\n\tclose(): Promise<OfflineContext> {\n\t\treturn Promise.resolve(this);\n\t}\n}\n","import { getContext } from \"../Global\";\nimport { Tone } from \"../Tone\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { noOp } from \"../util/Interface\";\nimport { isArray, isNumber, isString } from \"../util/TypeCheck\";\n\ninterface ToneAudioBufferOptions {\n\turl?: string | AudioBuffer | ToneAudioBuffer;\n\treverse: boolean;\n\tonload: (buffer?: ToneAudioBuffer) => void;\n\tonerror: (error: Error) => void;\n}\n\n/**\n * AudioBuffer loading and storage. ToneAudioBuffer is used internally by all\n * classes that make requests for audio files such as Tone.Player,\n * Tone.Sampler and Tone.Convolver.\n *\n * Aside from load callbacks from individual buffers, ToneAudioBuffer\n * provides events which keep track of the loading progress\n * of _all_ of the buffers. These are ToneAudioBuffer.on(\"load\" / \"progress\" / \"error\")\n *\n * @param url The url to load, or the audio buffer to set.\n * @param onload A callback which is invoked after the buffer is loaded.\n *                            It's recommended to use `ToneAudioBuffer.on('load', callback)` instead\n *                            since it will give you a callback when _all_ buffers are loaded.\n * @param onerror The callback to invoke if there is an error\n * @example\n * var buffer = new ToneAudioBuffer(\"path/to/sound.mp3\", function(){\n * \t//the buffer is now available.\n * \tvar buff = buffer.get();\n * });\n * @example\n * //can load provide fallback extension types if the first type is not supported.\n * var buffer = new ToneAudioBuffer(\"path/to/sound.[mp3|ogg|wav]\");\n */\nexport class ToneAudioBuffer extends Tone {\n\n\tname = \"ToneAudioBuffer\";\n\n\t/**\n\t *  stores the loaded AudioBuffer\n\t */\n\tprivate _buffer?: AudioBuffer;\n\n\t/**\n\t *  indicates if the buffer should be reversed or not\n\t */\n\tprivate _reversed!: boolean;\n\n\t/**\n\t * Callback when the buffer is loaded.\n\t */\n\tonload: (buffer: ToneAudioBuffer) => void = noOp;\n\n\tconstructor(options?: Partial<ToneAudioBufferOptions>);\n\tconstructor(\n\t\turl?: string | ToneAudioBuffer | AudioBuffer,\n\t\tonload?: (buffer: ToneAudioBuffer) => void,\n\t\tonerror?: (error: Error) => void,\n\t);\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tconst options = optionsFromArguments(ToneAudioBuffer.getDefaults(), arguments, [\"url\", \"onload\", \"onerror\"]);\n\n\t\tthis.reverse = options.reverse;\n\t\tthis.onload = options.onload;\n\n\t\tif (options.url && options.url instanceof AudioBuffer || options.url instanceof ToneAudioBuffer) {\n\t\t\tthis.set(options.url);\n\t\t} else if (isString(options.url)) {\n\t\t\t// initiate the download\n\t\t\tthis.load(options.url).catch(options.onerror);\n\t\t}\n\t}\n\n\tstatic getDefaults(): ToneAudioBufferOptions {\n\t\treturn {\n\t\t\tonerror: noOp,\n\t\t\tonload: noOp,\n\t\t\treverse: false,\n\t\t};\n\t}\n\n\t/**\n\t * The sample rate of the AudioBuffer\n\t */\n\tget sampleRate(): number {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.sampleRate;\n\t\t} else {\n\t\t\treturn getContext().sampleRate;\n\t\t}\n\t}\n\n\t/**\n\t *  Pass in an AudioBuffer or ToneAudioBuffer to set the value of this buffer.\n\t */\n\tset(buffer: AudioBuffer | ToneAudioBuffer): this {\n\t\tif (buffer instanceof ToneAudioBuffer) {\n\t\t\t// if it's loaded, set it\n\t\t\tif (buffer.loaded) {\n\t\t\t\tthis._buffer = buffer.get();\n\t\t\t} else {\n\t\t\t\t// otherwise when it's loaded, invoke it's callback\n\t\t\t\tbuffer.onload = () => {\n\t\t\t\t\tthis.set(buffer);\n\t\t\t\t\tthis.onload(this);\n\t\t\t\t};\n\t\t\t}\n\t\t} else {\n\t\t\tthis._buffer = buffer;\n\t\t}\n\t\t// reverse it initially\n\t\tif (this._reversed) {\n\t\t\tthis._reverse();\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  The audio buffer stored in the object.\n\t */\n\tget(): AudioBuffer | undefined {\n\t\treturn this._buffer;\n\t}\n\n\t/**\n\t *  Makes an fetch request for the selected url then decodes the file as an audio buffer.\n\t * \tInvokes the callback once the audio buffer loads.\n\t *  @param url The url of the buffer to load. filetype support depends on the browser.\n\t *  @returns A Promise which resolves with this ToneAudioBuffer\n\t */\n\tasync load(url: string): Promise<this> {\n\t\tconst promise = ToneAudioBuffer.load(url);\n\t\tToneAudioBuffer.downloads.push(promise);\n\t\ttry {\n\t\t\tconst audioBuffer = await promise;\n\t\t\tthis.set(audioBuffer);\n\t\t\t// invoke the onload method\n\t\t\tthis.onload(this);\n\t\t} catch (e) {\n\t\t\t// remove the failed file before throwing error\n\t\t\tconst index = ToneAudioBuffer.downloads.indexOf(promise);\n\t\t\tToneAudioBuffer.downloads.splice(index, 1);\n\t\t\tthrow e;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._buffer = undefined;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set the audio buffer from the array.\n\t * To create a multichannel AudioBuffer, pass in a multidimensional array.\n\t * @param array The array to fill the audio buffer\n\t */\n\tfromArray(array: Float32Array | Float32Array[]): this {\n\t\tconst isMultidimensional = isArray(array) && array[0].length > 0;\n\t\tconst channels = isMultidimensional ? array.length : 1;\n\t\tconst len = isMultidimensional ? (array[0] as Float32Array).length : array.length;\n\t\tconst context = getContext();\n\t\tconst buffer = context.createBuffer(channels, len, context.sampleRate);\n\t\tconst multiChannelArray: Float32Array[] = !isMultidimensional && channels === 1 ?\n\t\t\t[array as Float32Array] : array as Float32Array[];\n\n\t\tfor (let c = 0; c < channels; c++) {\n\t\t\tbuffer.copyToChannel(multiChannelArray[c], c);\n\t\t}\n\t\tthis._buffer = buffer;\n\t\treturn this;\n\t}\n\n\t/**\n\t * \tSums multiple channels into 1 channel\n\t *  @param channel Optionally only copy a single channel from the array.\n\t */\n\ttoMono(chanNum?: number): this {\n\t\tif (isNumber(chanNum)) {\n\t\t\tthis.fromArray(this.toArray(chanNum));\n\t\t} else {\n\t\t\tlet outputArray = new Float32Array(this.length as number);\n\t\t\tconst numChannels = this.numberOfChannels;\n\t\t\tfor (let channel = 0; channel < numChannels; channel++) {\n\t\t\t\tconst channelArray = this.toArray(channel) as Float32Array;\n\t\t\t\tfor (let i = 0; i < channelArray.length; i++) {\n\t\t\t\t\toutputArray[i] += channelArray[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\t// divide by the number of channels\n\t\t\toutputArray = outputArray.map(sample => sample / numChannels);\n\t\t\tthis.fromArray(outputArray);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * \tGet the buffer as an array. Single channel buffers will return a 1-dimensional\n\t * \tFloat32Array, and multichannel buffers will return multidimensional arrays.\n\t *  @param channel Optionally only copy a single channel from the array.\n\t */\n\ttoArray(channel?: number): Float32Array | Float32Array[] {\n\t\tif (isNumber(channel)) {\n\t\t\treturn this.getChannelData(channel);\n\t\t} else if (this.numberOfChannels === 1) {\n\t\t\treturn this.toArray(0);\n\t\t} else {\n\t\t\tconst ret: Float32Array[] = [];\n\t\t\tfor (let c = 0; c < this.numberOfChannels; c++) {\n\t\t\t\tret[c] = this.getChannelData(c);\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\t}\n\n\t/**\n\t *  Returns the Float32Array representing the PCM audio data for the specific channel.\n\t *  @param  channel  The channel number to return\n\t *  @return The audio as a TypedArray\n\t */\n\tgetChannelData(channel: number): Float32Array {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.getChannelData(channel);\n\t\t} else {\n\t\t\treturn new Float32Array(0);\n\t\t}\n\t}\n\n\t/**\n\t *  Cut a subsection of the array and return a buffer of the\n\t *  subsection. Does not modify the original buffer\n\t *  @param start The time to start the slice\n\t *  @param end The end time to slice. If none is given will default to the end of the buffer\n\t */\n\tslice(start: Seconds, end: Seconds = this.duration): ToneAudioBuffer {\n\t\tconst startSamples = Math.floor(start * this.sampleRate);\n\t\tconst endSamples = Math.floor(end * this.sampleRate);\n\t\tthis.assert(startSamples < endSamples, \"The start time must be less than the end time\");\n\t\tconst length = endSamples - startSamples;\n\t\tconst retBuffer = getContext().createBuffer(this.numberOfChannels, length, this.sampleRate);\n\t\tfor (let channel = 0; channel < this.numberOfChannels; channel++) {\n\t\t\tretBuffer.copyFromChannel(this.getChannelData(channel).subarray(startSamples, endSamples), channel);\n\t\t}\n\t\treturn new ToneAudioBuffer(retBuffer);\n\t}\n\n\t/**\n\t *  Reverse the buffer.\n\t */\n\tprivate _reverse(): this {\n\t\tif (this.loaded) {\n\t\t\tfor (let i = 0; i < this.numberOfChannels; i++) {\n\t\t\t\tthis.getChannelData(i).reverse();\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * If the buffer is loaded or not\n\t */\n\tget loaded(): boolean {\n\t\treturn this.length > 0;\n\t}\n\n\t/**\n\t * The duration of the buffer in seconds.\n\t */\n\tget duration(): Seconds {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.duration;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * The length of the buffer in samples\n\t */\n\tget length(): Samples {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.length;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * The number of discrete audio channels. Returns 0 if no buffer is loaded.\n\t */\n\tget numberOfChannels(): number {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.numberOfChannels;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * Reverse the buffer.\n\t */\n\tget reverse(): boolean {\n\t\treturn this._reversed;\n\t}\n\tset reverse(rev: boolean) {\n\t\tif (this._reversed !== rev) {\n\t\t\tthis._reversed = rev;\n\t\t\tthis._reverse();\n\t\t}\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// STATIC METHODS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  A path which is prefixed before every url.\n\t */\n\tstatic baseUrl = \"\";\n\n\t/**\n\t *  Create a ToneAudioBuffer from the array. To create a multichannel AudioBuffer,\n\t *  pass in a multidimensional array.\n\t *  @param array The array to fill the audio buffer\n\t *  @return A ToneAudioBuffer created from the array\n\t */\n\tstatic fromArray(array: Float32Array | Float32Array[]): ToneAudioBuffer {\n\t\treturn (new ToneAudioBuffer()).fromArray(array);\n\t}\n\n\t/**\n\t * Creates a ToneAudioBuffer from a URL, returns a promise which resolves to a ToneAudioBuffer\n\t * @param  url The url to load.\n\t * @return A promise which resolves to a ToneAudioBuffer\n\t */\n\tstatic async fromUrl(url: string): Promise<ToneAudioBuffer> {\n\t\tconst buffer = new ToneAudioBuffer();\n\t\treturn await buffer.load(url);\n\t}\n\n\t/**\n\t * All of the downloads\n\t */\n\tstatic downloads: Array<Promise<AudioBuffer>> = [];\n\n\t/**\n\t *  Loads a url using fetch and returns the AudioBuffer.\n\t */\n\tstatic async load(url: string): Promise<AudioBuffer> {\n\n\t\t// test if the url contains multiple extensions\n\t\tconst matches = url.match(/\\[(.+\\|?)+\\]$/);\n\t\tif (matches) {\n\t\t\tconst extensions = matches[1].split(\"|\");\n\t\t\tlet extension = extensions[0];\n\t\t\tfor (const ext of extensions) {\n\t\t\t\tif (ToneAudioBuffer.supportsType(ext)) {\n\t\t\t\t\textension = ext;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\turl = url.replace(matches[0], extension);\n\t\t}\n\n\t\tconst response = await fetch(ToneAudioBuffer.baseUrl + url);\n\t\tif (!response.ok) {\n\t\t\tthrow new Error(`could not load url: ${url}`);\n\t\t}\n\t\tconst arrayBuffer = await response.arrayBuffer();\n\n\t\tconst audioBuffer = await getContext().decodeAudioData(arrayBuffer);\n\n\t\treturn audioBuffer;\n\t}\n\n\t/**\n\t *  Checks a url's extension to see if the current browser can play that file type.\n\t *  @param url The url/extension to test\n\t *  @return If the file extension can be played\n\t *  @static\n\t *  @example\n\t * ToneAudioBuffer.supportsType(\"wav\"); //returns true\n\t * ToneAudioBuffer.supportsType(\"path/to/file.wav\"); //returns true\n\t */\n\tstatic supportsType(url: string): boolean {\n\t\tconst extensions = url.split(\".\");\n\t\tconst extension = extensions[extensions.length - 1];\n\t\tconst response = document.createElement(\"audio\").canPlayType(\"audio/\" + extension);\n\t\treturn response !== \"\";\n\t}\n\n\t/**\n\t *  Returns a Promise which resolves when all of the buffers have loaded\n\t */\n\tstatic async loaded(): Promise<void> {\n\t\tfor (const promise of ToneAudioBuffer.downloads) {\n\t\t\tawait promise;\n\t\t}\n\t}\n}\n","import { getContext, setContext } from \"../Global\";\nimport { OfflineContext } from \"./OfflineContext\";\nimport { ToneAudioBuffer } from \"./ToneAudioBuffer\";\n\n/**\n * Generate a buffer by rendering all of the Tone.js code within the callback using the OfflineAudioContext.\n * The OfflineAudioContext is capable of rendering much faster than real time in many cases.\n * The callback function also passes in an offline instance of Tone.Transport which can be used\n * to schedule events along the Transport. **NOTE** OfflineAudioContext has the same restrictions\n * as the AudioContext in that on certain platforms (like iOS) it must be invoked by an explicit\n * user action like a click or tap.\n * @param  callback  All Tone.js nodes which are created and scheduled\n * \t\t\t\t\twithin this callback are recorded into the output Buffer.\n * @param  duration     the amount of time to record for.\n * @return  The promise which is invoked with the Tone.Buffer of the recorded output.\n * @example\n * //render 2 seconds of the oscillator\n * Tone.Offline(function(){\n * \t//only nodes created in this callback will be recorded\n * \tvar oscillator = new Tone.Oscillator().toDestination().start(0)\n * \t//schedule their events\n * }, 2).then(function(buffer){\n * \t//do something with the output buffer\n * })\n * @example\n * //can also schedule events along the Transport\n * //using the passed in Offline Transport\n * Tone.Offline(function(Transport){\n * \tvar osc = new Tone.Oscillator().toDestination()\n * \tTransport.schedule(function(time){\n * \t\tosc.start(time).stop(time + 0.1)\n * \t}, 1)\n * \tTransport.start(0.2)\n * }, 4).then(function(buffer){\n * \t//do something with the output buffer\n * })\n */\nexport async function Offline(\n\tcallback: (context: OfflineContext) => Promise<void> | void,\n\tduration: Seconds,\n\tchannels: number = 2,\n\tsampleRate: number = getContext().sampleRate,\n): Promise<ToneAudioBuffer> {\n\t// set the OfflineAudioContext based on the current context\n\tconst originalContext = getContext();\n\n\tconst context = new OfflineContext(channels, duration, sampleRate);\n\tsetContext(context);\n\n\t// invoke the callback/scheduling\n\tawait callback(context);\n\n\t// then render the audio\n\tconst buffer = await context.render();\n\n\t// return the original AudioContext\n\tsetContext(originalContext);\n\n\t// return the audio\n\treturn new ToneAudioBuffer(buffer);\n}\n","import { Param } from \"../context/Param\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"./ToneAudioNode\";\n\nexport interface DelayOptions extends ToneAudioNodeOptions {\n\tdelayTime: Time;\n\tmaxDelay: Time;\n}\n\n/**\n *  Wrapper around Web Audio's native [DelayNode](http://webaudio.github.io/web-audio-api/#the-delaynode-interface).\n *  @param delayTime The delay applied to the incoming signal.\n *  @param maxDelay The maximum delay time.\n */\nexport class Delay extends ToneAudioNode<DelayOptions> {\n\n\tname = \"Delay\";\n\n\t/**\n\t * The maximum delay time. This cannot be changed after\n\t * the value is passed into the constructor.\n\t */\n\treadonly maxDelay: Time;\n\n\t/**\n\t *  The amount of time the incoming signal is delayed.\n\t */\n\treadonly delayTime: Param<Time>;\n\n\t/**\n\t * Private reference to the internal DelayNode\n\t */\n\tprivate _delayNode: DelayNode;\n\treadonly input: DelayNode;\n\treadonly output: DelayNode;\n\n\t/**\n\t * The internal channels for channel routing changes\n\t */\n\tprotected _internalChannels: AudioNode[];\n\n\tconstructor(options?: Partial<DelayOptions>)\n\tconstructor(delayTime?: Time, maxDelay?: Time)\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Delay.getDefaults(), arguments, [\"delayTime\", \"maxDelay\"]));\n\n\t\tconst options = optionsFromArguments(Delay.getDefaults(), arguments, [\"delayTime\", \"maxDelay\"]);\n\n\t\tconst maxDelayInSeconds = this.toSeconds(options.maxDelay);\n\t\tthis.maxDelay = Math.max(maxDelayInSeconds, this.toSeconds(options.delayTime));\n\n\t\tthis._delayNode = this.input = this.output = this.context.createDelay(maxDelayInSeconds);\n\t\tthis._internalChannels = [this._delayNode];\n\n\t\tthis.delayTime = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam : this._delayNode.delayTime,\n\t\t\tunits : \"time\",\n\t\t\tvalue : options.delayTime,\n\t\t});\n\n\t\treadOnly(this, \"delayTime\");\n\t}\n\n\tstatic getDefaults(): DelayOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tdelayTime : 0,\n\t\t\tmaxDelay: 1,\n\t\t\tnumberOfInputs: 1,\n\t\t\tnumberOfOutputs: 1,\n\t\t});\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._delayNode.disconnect();\n\t\tthis.delayTime.dispose();\n\t\treturn this;\n\t}\n}\n","// import \"../type/Type\";\nimport { Timeline, TimelineEvent } from \"./Timeline\";\n\nexport type BasicPlaybackState = \"started\" | \"stopped\";\nexport type PlaybackState = BasicPlaybackState | \"paused\";\n\nexport interface StateTimelineEvent extends TimelineEvent {\n\tstate: PlaybackState;\n}\n\n/**\n *  A Timeline State. Provides the methods: `setStateAtTime(\"state\", time)` and `getValueAtTime(time)`\n *  @param initial The initial state of the StateTimeline.  Defaults to `undefined`\n */\nexport class StateTimeline<AdditionalOptions extends {} = {}> extends Timeline<StateTimelineEvent & AdditionalOptions> {\n\n\t/**\n\t *  The initial state\n\t */\n\tprivate _initial: PlaybackState;\n\n\tconstructor(initial: PlaybackState = \"stopped\") {\n\t\tsuper();\n\t\tthis._initial = initial;\n\t}\n\n\t/**\n\t *  Returns the scheduled state scheduled before or at\n\t *  the given time.\n\t *  @param  time  The time to query.\n\t *  @return  The name of the state input in setStateAtTime.\n\t */\n\tgetValueAtTime(time: Seconds): PlaybackState {\n\t\tconst event = this.get(time);\n\t\tif (event !== null) {\n\t\t\treturn event.state;\n\t\t} else {\n\t\t\treturn this._initial;\n\t\t}\n\t}\n\n\t/**\n\t *  Add a state to the timeline.\n\t * @param  state The name of the state to set.\n\t * @param  time  The time to query.\n\t * @param options Any additional options that are needed in the timeline.\n\t */\n\tsetStateAtTime(state: PlaybackState, time: Seconds, options?: AdditionalOptions): this {\n\t\t// all state changes need to be >= the previous state time\n\t\t// TODO throw error if time < the previous event time\n\t\tthis.add(Object.assign({}, options, {\n\t\t\tstate,\n\t\t\ttime,\n\t\t}));\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Return the event before the time with the given state\n\t *  @param  state The state to look for\n\t *  @param  time  When to check before\n\t *  @return  The event with the given state before the time\n\t */\n\tgetLastState(state: PlaybackState, time: number): StateTimelineEvent & AdditionalOptions | undefined {\n\t\t// time = this.toSeconds(time);\n\t\tconst index = this._search(time);\n\t\tfor (let i = index; i >= 0; i--) {\n\t\t\tconst event = this._timeline[i];\n\t\t\tif (event.state === state) {\n\t\t\t\treturn event;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *  Return the event after the time with the given state\n\t *  @param  state The state to look for\n\t *  @param  time  When to check from\n\t *  @return  The event with the given state after the time\n\t */\n\tgetNextState(state: PlaybackState, time: number): StateTimelineEvent & AdditionalOptions | undefined {\n\t\t// time = this.toSeconds(time);\n\t\tconst index = this._search(time);\n\t\tif (index !== -1) {\n\t\t\tfor (let i = index; i < this._timeline.length; i++) {\n\t\t\t\tconst event = this._timeline[i];\n\t\t\t\tif (event.state === state) {\n\t\t\t\t\treturn event;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","import { connect } from \"../Connect\";\nimport { AutomationEvent, Param, ParamOptions } from \"../context/Param\";\nimport { getContext } from \"../Global\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isUndef } from \"../util/TypeCheck\";\n\ninterface TickAutomationEvent extends AutomationEvent {\n\tticks: number;\n}\n\ninterface TickSignalOptions extends ParamOptions {\n\tvalue: Hertz | BPM;\n\tmultiplier: number;\n}\n\n/**\n * TickSignal extends Tone.Signal, but adds the capability\n * to calculate the number of elapsed ticks. exponential and target curves\n * are approximated with multiple linear ramps.\n *\n * Thank you Bruno Dias, H. Sofia Pinto, and David M. Matos,\n * for your [WAC paper](https://smartech.gatech.edu/bitstream/handle/1853/54588/WAC2016-49.pdf)\n * describing integrating timing functions for tempo calculations.\n *\n * @param value The initial value of the signal\n */\nexport class TickSignal<Type extends Hertz | BPM> extends Param<Type> {\n\n\tname = \"TickSignal\";\n\n\tprotected _events: Timeline<TickAutomationEvent> = new Timeline(Infinity);\n\n\tprivate _sig: ConstantSourceNode = this.context.createConstantSource();\n\n\tprotected _param = this._sig.offset;\n\n\tprivate _multiplier: number = 1;\n\n\tconstructor(options: Partial<TickSignalOptions>);\n\tconstructor(value?: number);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(TickSignal.getDefaults(), arguments, [\"value\"]));\n\t\tconst options = optionsFromArguments(TickSignal.getDefaults(), arguments, [\"value\"]);\n\n\t\tthis._sig = this.context.createConstantSource();\n\t\tthis._sig.start(0);\n\t\tthis._param = this._sig.offset;\n\n\t\t// set the multiplier\n\t\tthis.multiplier = options.multiplier;\n\n\t\t// clear the ticks from the beginning\n\t\tthis.cancelScheduledValues(0);\n\t\t// set an initial event\n\t\tthis._events.add({\n\t\t\tticks: 0,\n\t\t\ttime : 0,\n\t\t\ttype : \"setValue\",\n\t\t\tvalue: this._fromType(options.value as Type),\n\t\t});\n\t\tthis.setValueAtTime(options.value as Type, 0);\n\t}\n\n\tstatic getDefaults(): TickSignalOptions {\n\t\treturn Object.assign(Param.getDefaults(), {\n\t\t\tmultiplier: 1,\n\t\t\tparam: getContext().createConstantSource().offset,\n\t\t\tunits: \"hertz\",\n\t\t\tvalue: 1,\n\t\t});\n\t}\n\n\tsetTargetAtTime(value: Type, time: Time, constant: number): this {\n\t\t// approximate it with multiple linear ramps\n\t\ttime = this.toSeconds(time);\n\t\tthis.setRampPoint(time);\n\t\tconst computedValue = this._fromType(value);\n\n\t\t// start from previously scheduled value\n\t\tconst prevEvent = this._events.get(time) as TickAutomationEvent;\n\t\tconst segments = Math.round(Math.max(1 / constant, 1));\n\t\tfor (let i = 0; i <= segments; i++) {\n\t\t\tconst segTime = constant * i + time;\n\t\t\tconst rampVal = this._exponentialApproach(prevEvent.time, prevEvent.value, computedValue, constant, segTime);\n\t\t\tthis.linearRampToValueAtTime(this._toType(rampVal), segTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\tsetValueAtTime(value: Type, time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tsuper.setValueAtTime(value, time);\n\t\tconst event = this._events.get(computedTime) as TickAutomationEvent;\n\t\tconst previousEvent = this._events.previousEvent(event);\n\t\tconst ticksUntilTime = this._getTicksUntilEvent(previousEvent, computedTime);\n\t\tevent.ticks = Math.max(ticksUntilTime, 0);\n\t\treturn this;\n\t}\n\n\tlinearRampToValueAtTime(value: Type, time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tsuper.linearRampToValueAtTime(value, time);\n\t\tconst event = this._events.get(computedTime) as TickAutomationEvent;\n\t\tconst previousEvent = this._events.previousEvent(event);\n\t\tconst ticksUntilTime = this._getTicksUntilEvent(previousEvent, computedTime);\n\t\tevent.ticks = Math.max(ticksUntilTime, 0);\n\t\treturn this;\n\t}\n\n\texponentialRampToValueAtTime(value: Type, time: Time): this {\n\t\t// aproximate it with multiple linear ramps\n\t\ttime = this.toSeconds(time);\n\t\tconst computedVal = this._fromType(value);\n\n\t\t// start from previously scheduled value\n\t\tconst prevEvent = this._events.get(time) as TickAutomationEvent;\n\t\t// approx 10 segments per second\n\t\tconst segments = Math.round(Math.max((time - prevEvent.time) * 10, 1));\n\t\tconst segmentDur = ((time - prevEvent.time) / segments);\n\t\tfor (let i = 0; i <= segments; i++) {\n\t\t\tconst segTime = segmentDur * i + prevEvent.time;\n\t\t\tconst rampVal = this._exponentialInterpolate(prevEvent.time, prevEvent.value, time, computedVal, segTime);\n\t\t\tthis.linearRampToValueAtTime(this._toType(rampVal), segTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the tick value at the time. Takes into account\n\t * any automation curves scheduled on the signal.\n\t * @param  time The time to get the tick count at\n\t * @return The number of ticks which have elapsed at the time given any automations.\n\t */\n\tprivate _getTicksUntilEvent(event: TickAutomationEvent | null, time: number): Ticks {\n\t\tif (event === null) {\n\t\t\tevent = {\n\t\t\t\tticks : 0,\n\t\t\t\ttime : 0,\n\t\t\t\ttype: \"setValue\",\n\t\t\t\tvalue: 0,\n\t\t\t};\n\t\t} else if (isUndef(event.ticks)) {\n\t\t\tconst previousEvent = this._events.previousEvent(event);\n\t\t\tevent.ticks = this._getTicksUntilEvent(previousEvent, event.time);\n\t\t}\n\t\tconst val0 = this._fromType(this.getValueAtTime(event.time));\n\t\tlet val1 = this._fromType(this.getValueAtTime(time));\n\t\t// if it's right on the line, take the previous value\n\t\tconst onTheLineEvent = this._events.get(time);\n\t\tif (onTheLineEvent && onTheLineEvent.time === time && onTheLineEvent.type === \"setValue\") {\n\t\t\tval1 = this._fromType(this.getValueAtTime(time - this.sampleTime));\n\t\t}\n\t\treturn 0.5 * (time - event.time) * (val0 + val1) + event.ticks;\n\t}\n\n\t/**\n\t * Returns the tick value at the time. Takes into account\n\t * any automation curves scheduled on the signal.\n\t * @param  time The time to get the tick count at\n\t * @return The number of ticks which have elapsed at the time given any automations.\n\t */\n\tgetTicksAtTime(time: Time): Ticks {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst event = this._events.get(computedTime);\n\t\treturn Math.max(this._getTicksUntilEvent(event, computedTime), 0);\n\t}\n\n\t/**\n\t * Return the elapsed time of the number of ticks from the given time\n\t * @param ticks The number of ticks to calculate\n\t * @param  time The time to get the next tick from\n\t * @return The duration of the number of ticks from the given time in seconds\n\t */\n\tgetDurationOfTicks(ticks: Ticks, time: Time): Seconds {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst currentTick = this.getTicksAtTime(time);\n\t\treturn this.getTimeOfTick(currentTick + ticks) - computedTime;\n\t}\n\n\t/**\n\t * Given a tick, returns the time that tick occurs at.\n\t * @return The time that the tick occurs.\n\t */\n\tgetTimeOfTick(tick: Ticks): Seconds {\n\t\tconst before = this._events.get(tick, \"ticks\");\n\t\tconst after = this._events.getAfter(tick, \"ticks\");\n\t\tif (before && before.ticks === tick) {\n\t\t\treturn before.time;\n\t\t} else if (before && after &&\n\t\t\tafter.type === \"linear\" &&\n\t\t\tbefore.value !== after.value) {\n\t\t\tconst val0 = this._fromType(this.getValueAtTime(before.time));\n\t\t\tconst val1 = this._fromType(this.getValueAtTime(after.time));\n\t\t\tconst delta = (val1 - val0) / (after.time - before.time);\n\t\t\tconst k = Math.sqrt(Math.pow(val0, 2) - 2 * delta * (before.ticks - tick));\n\t\t\tconst sol1 = (-val0 + k) / delta;\n\t\t\tconst sol2 = (-val0 - k) / delta;\n\t\t\treturn (sol1 > 0 ? sol1 : sol2) + before.time;\n\t\t} else if (before) {\n\t\t\tif (before.value === 0) {\n\t\t\t\treturn Infinity;\n\t\t\t} else {\n\t\t\t\treturn before.time + (tick - before.ticks) / before.value;\n\t\t\t}\n\t\t} else {\n\t\t\treturn tick / this._initialValue;\n\t\t}\n\t}\n\n\t/**\n\t * Convert some number of ticks their the duration in seconds accounting\n\t * for any automation curves starting at the given time.\n\t * @param  ticks The number of ticks to convert to seconds.\n\t * @param  when  When along the automation timeline to convert the ticks.\n\t * @return The duration in seconds of the ticks.\n\t */\n\tticksToTime(ticks: Ticks, when: Time): Seconds {\n\t\treturn this.getDurationOfTicks(ticks, when);\n\t}\n\n\t/**\n\t * The inverse of [ticksToTime](#tickstotime). Convert a duration in\n\t * seconds to the corresponding number of ticks accounting for any\n\t * automation curves starting at the given time.\n\t * @param  duration The time interval to convert to ticks.\n\t * @param  when When along the automation timeline to convert the ticks.\n\t * @return The duration in ticks.\n\t */\n\ttimeToTicks(duration: Time, when: Time): Ticks {\n\t\tconst computedTime = this.toSeconds(when);\n\t\tconst computedDuration = this.toSeconds(duration);\n\t\tconst startTicks = this.getTicksAtTime(computedTime);\n\t\tconst endTicks = this.getTicksAtTime(computedTime + computedDuration);\n\t\treturn endTicks - startTicks;\n\t}\n\n\t/**\n\t * Convert from the type when the unit value is BPM\n\t */\n\tprotected _fromType(val: Type): number {\n\t\tif (this.units === \"bpm\" && this.multiplier) {\n\t\t\treturn 1 / (60 / val / this.multiplier);\n\t\t} else {\n\t\t\treturn super._fromType(val);\n\t\t}\n\t}\n\n\t/**\n\t * Special case of type conversion where the units === \"bpm\"\n\t */\n\tprotected _toType(val: number): Type {\n\t\tif (this.units === \"bpm\" && this.multiplier) {\n\t\t\treturn (val / this.multiplier) * 60 as Type;\n\t\t} else {\n\t\t\treturn super._toType(val);\n\t\t}\n\t}\n\t/**\n\t * A multiplier on the bpm value. Useful for setting a PPQ relative to the base frequency value.\n\t */\n\tget multiplier(): number {\n\t\treturn this._multiplier;\n\t}\n\tset multiplier(m: number) {\n\t\t// get and reset the current value with the new multipler\n\t\t// might be necessary to clear all the previous values\n\t\tconst currentVal = this.value;\n\t\tthis._multiplier = m;\n\t\tthis.value = currentVal;\n\t}\n\n\t/**\n\t * Connect the output signal\n\t */\n\tconnect(dstNode, outputNumber = 0, inputNumber = 0): this {\n\t\tconnect(this._sig, dstNode, outputNumber, inputNumber);\n\t\treturn this;\n\t}\n}\n","import { ToneWithContext, ToneWithContextOptions } from \"../context/ToneWithContext\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { PlaybackState, StateTimeline, StateTimelineEvent } from \"../util/StateTimeline\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isDefined } from \"../util/TypeCheck\";\nimport { TickSignal } from \"./TickSignal\";\n\ninterface TickSourceOptions extends ToneWithContextOptions {\n\tfrequency: Frequency;\n\tunits: \"hertz\" | \"bpm\";\n}\n\ninterface TickSourceOffsetEvent {\n\tticks: number;\n\ttime: number;\n\tseconds: number;\n}\n\n/**\n *  Uses [TickSignal](TickSignal) to track elapsed ticks with complex automation curves.\n *\n *  @param frequency The initial frequency that the signal ticks at\n */\nexport class TickSource<Type extends BPM | Hertz> extends ToneWithContext<TickSourceOptions> {\n\n\tname = \"TickSource\";\n\n\t/**\n\t *  The frequency the callback function should be invoked.\n\t */\n\tfrequency: TickSignal<Type>;\n\n\t/**\n\t *  The state timeline\n\t */\n\tprivate _state: StateTimeline = new StateTimeline();\n\n\t/**\n\t * The offset values of the ticks\n\t */\n\tprivate _tickOffset: Timeline<TickSourceOffsetEvent> = new Timeline();\n\n\tconstructor(frequency?: Frequency);\n\t// tslint:disable-next-line: unified-signatures\n\tconstructor(options?: Partial<TickSourceOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(TickSource.getDefaults(), arguments, [\"frequency\"]));\n\t\tconst options = optionsFromArguments(TickSource.getDefaults(), arguments, [\"frequency\"]);\n\n\t\tthis.frequency = new TickSignal({\n\t\t\tcontext: this.context,\n\t\t\tunits: options.units,\n\t\t\tvalue: this.toFrequency(options.frequency),\n\t\t});\n\t\treadOnly(this, \"frequency\");\n\n\t\t// set the inital state\n\t\tthis._state.setStateAtTime(\"stopped\", 0);\n\t\t// add the first event\n\t\tthis.setTicksAtTime(0, 0);\n\t}\n\n\tstatic getDefaults(): TickSourceOptions {\n\t\treturn Object.assign({\n\t\t\tfrequency: 1,\n\t\t\tunits: \"hertz\" as \"hertz\",\n\t\t}, ToneWithContext.getDefaults());\n\t}\n\n\t/**\n\t *  Returns the playback state of the source, either \"started\", \"stopped\" or \"paused\".\n\t */\n\tget state(): PlaybackState {\n\t\treturn this._state.getValueAtTime(this.now());\n\t}\n\n\t/**\n\t *  Start the clock at the given time. Optionally pass in an offset\n\t *  of where to start the tick counter from.\n\t *  @param  time    The time the clock should start\n\t *  @param offset The number of ticks to start the source at\n\t */\n\tstart(time: Time, offset?: Ticks): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(computedTime) !== \"started\") {\n\t\t\tthis._state.setStateAtTime(\"started\", computedTime);\n\t\t\tif (isDefined(offset)) {\n\t\t\t\tthis.setTicksAtTime(offset, computedTime);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the clock. Stopping the clock resets the tick counter to 0.\n\t * @param time The time when the clock should stop.\n\t */\n\tstop(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\t// cancel the previous stop\n\t\tif (this._state.getValueAtTime(computedTime) === \"stopped\") {\n\t\t\tconst event = this._state.get(computedTime);\n\t\t\tif (event && event.time > 0) {\n\t\t\t\tthis._tickOffset.cancel(event.time);\n\t\t\t\tthis._state.cancel(event.time);\n\t\t\t}\n\t\t}\n\t\tthis._state.cancel(computedTime);\n\t\tthis._state.setStateAtTime(\"stopped\", computedTime);\n\t\tthis.setTicksAtTime(0, computedTime);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Pause the clock. Pausing does not reset the tick counter.\n\t *  @param time The time when the clock should stop.\n\t */\n\tpause(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(computedTime) === \"started\") {\n\t\t\tthis._state.setStateAtTime(\"paused\", computedTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Cancel start/stop/pause and setTickAtTime events scheduled after the given time.\n\t *  @param time When to clear the events after\n\t */\n\tcancel(time: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis._state.cancel(time);\n\t\tthis._tickOffset.cancel(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the elapsed ticks at the given time\n\t * @param  time  When to get the tick value\n\t * @return The number of ticks\n\t */\n\tgetTicksAtTime(time: Time): Ticks {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst stopEvent = this._state.getLastState(\"stopped\", computedTime);\n\t\tif (!stopEvent) {\n\t\t\treturn 0;\n\t\t}\n\t\t// this event allows forEachBetween to iterate until the current time\n\t\tconst tmpEvent: StateTimelineEvent = { state: \"paused\", time: computedTime};\n\t\tthis._state.add(tmpEvent);\n\n\t\t// keep track of the previous offset event\n\t\tlet lastState = stopEvent;\n\t\tlet elapsedTicks = 0;\n\n\t\t// iterate through all the events since the last stop\n\t\tthis._state.forEachBetween(stopEvent.time, computedTime + this.sampleTime, e => {\n\t\t\tlet periodStartTime = lastState.time;\n\t\t\t// if there is an offset event in this period use that\n\t\t\tconst offsetEvent = this._tickOffset.get(e.time);\n\t\t\tif (offsetEvent && offsetEvent.time >= lastState.time) {\n\t\t\t\telapsedTicks = offsetEvent.ticks;\n\t\t\t\tperiodStartTime = offsetEvent.time;\n\t\t\t}\n\t\t\tif (lastState.state === \"started\" && e.state !== \"started\") {\n\t\t\t\telapsedTicks += this.frequency.getTicksAtTime(e.time) - this.frequency.getTicksAtTime(periodStartTime);\n\t\t\t}\n\t\t\tlastState = e;\n\t\t});\n\n\t\t// remove the temporary event\n\t\tthis._state.remove(tmpEvent);\n\n\t\t// return the ticks\n\t\treturn elapsedTicks;\n\t}\n\n\t/**\n\t *  The number of times the callback was invoked. Starts counting at 0\n\t *  and increments after the callback was invoked. Returns -1 when stopped.\n\t */\n\tget ticks(): Ticks {\n\t\treturn this.getTicksAtTime(this.now());\n\t}\n\n\tset ticks(t: Ticks) {\n\t\tthis.setTicksAtTime(t, this.now());\n\t}\n\n\t/**\n\t *  The time since ticks=0 that the TickSource has been running. Accounts\n\t *  for tempo curves\n\t */\n\tget seconds(): Seconds {\n\t\treturn this.getSecondsAtTime(this.now());\n\t}\n\n\tset seconds(s: Seconds) {\n\t\tconst now = this.now();\n\t\tconst ticks = this.frequency.timeToTicks(s, now);\n\t\tthis.setTicksAtTime(ticks, now);\n\t}\n\n\t/**\n\t *  Return the elapsed seconds at the given time.\n\t *  @param  time  When to get the elapsed seconds\n\t *  @return  The number of elapsed seconds\n\t */\n\tgetSecondsAtTime(time: Time): Seconds {\n\t\ttime = this.toSeconds(time);\n\t\tconst stopEvent = this._state.getLastState(\"stopped\", time);\n\t\tif (!stopEvent) {\n\t\t\treturn 0;\n\t\t}\n\t\t// this event allows forEachBetween to iterate until the current time\n\t\tconst tmpEvent: StateTimelineEvent = { state : \"paused\", time };\n\t\tthis._state.add(tmpEvent);\n\n\t\t// keep track of the previous offset event\n\t\tlet lastState = stopEvent;\n\t\tlet elapsedSeconds = 0;\n\n\t\t// iterate through all the events since the last stop\n\t\tthis._state.forEachBetween(stopEvent.time, time + this.sampleTime, e => {\n\t\t\tlet periodStartTime = lastState.time;\n\t\t\t// if there is an offset event in this period use that\n\t\t\tconst offsetEvent = this._tickOffset.get(e.time);\n\t\t\tif (offsetEvent && offsetEvent.time >= lastState.time) {\n\t\t\t\telapsedSeconds = offsetEvent.seconds;\n\t\t\t\tperiodStartTime = offsetEvent.time;\n\t\t\t}\n\t\t\tif (lastState.state === \"started\" && e.state !== \"started\") {\n\t\t\t\telapsedSeconds += e.time - periodStartTime;\n\t\t\t}\n\t\t\tlastState = e;\n\t\t});\n\n\t\t// remove the temporary event\n\t\tthis._state.remove(tmpEvent);\n\n\t\t// return the ticks\n\t\treturn elapsedSeconds;\n\t}\n\n\t/**\n\t * Set the clock's ticks at the given time.\n\t * @param  ticks The tick value to set\n\t * @param  time  When to set the tick value\n\t */\n\tsetTicksAtTime(ticks: Ticks, time: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis._tickOffset.cancel(time);\n\t\tthis._tickOffset.add({\n\t\t\tseconds : this.frequency.getDurationOfTicks(ticks, time),\n\t\t\tticks,\n\t\t\ttime,\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Returns the scheduled state at the given time.\n\t *  @param  time  The time to query.\n\t *  @example\n\t * source.start(\"+0.1\");\n\t * source.getStateAtTime(\"+0.1\"); //returns \"started\"\n\t */\n\tgetStateAtTime(time): PlaybackState {\n\t\ttime = this.toSeconds(time);\n\t\treturn this._state.getValueAtTime(time);\n\t}\n\n\t/**\n\t * Get the time of the given tick. The second argument\n\t * is when to test before. Since ticks can be set (with setTicksAtTime)\n\t * there may be multiple times for a given tick value.\n\t * @param  ticks The tick number.\n\t * @param  before When to measure the tick value from.\n\t * @return The time of the tick\n\t */\n\tgetTimeOfTick(tick: Ticks, before = this.now()): Seconds {\n\t\tconst offset = this._tickOffset.get(before) as TickSourceOffsetEvent;\n\t\tconst event = this._state.get(before) as StateTimelineEvent;\n\t\tconst startTime = Math.max(offset.time, event.time);\n\t\tconst absoluteTicks = this.frequency.getTicksAtTime(startTime) + tick - offset.ticks;\n\t\treturn this.frequency.getTimeOfTick(absoluteTicks);\n\t}\n\n\t/**\n\t *  Invoke the callback event at all scheduled ticks between the\n\t *  start time and the end time\n\t *  @param  startTime  The beginning of the search range\n\t *  @param  endTime    The end of the search range\n\t *  @param  callback   The callback to invoke with each tick\n\t */\n\tforEachTickBetween(startTime: Time, endTime: Time, callback: (when: Seconds, ticks: Ticks) => void): this {\n\t\tconst computedStartTime = this.toSeconds(startTime);\n\t\tconst computedEndTime = this.toSeconds(endTime);\n\t\t// only iterate through the sections where it is \"started\"\n\t\tlet lastStateEvent = this._state.get(computedStartTime);\n\t\tthis._state.forEachBetween(computedStartTime, computedEndTime, event => {\n\t\t\tif (lastStateEvent && lastStateEvent.state === \"started\" && event.state !== \"started\") {\n\t\t\t\tthis.forEachTickBetween(Math.max(lastStateEvent.time, computedStartTime), event.time - this.sampleTime, callback);\n\t\t\t}\n\t\t\tlastStateEvent = event;\n\t\t});\n\n\t\tlet error = null;\n\n\t\tif (lastStateEvent && lastStateEvent.state === \"started\" && this._state) {\n\t\t\tconst maxStartTime = Math.max(lastStateEvent.time, computedStartTime);\n\t\t\t// figure out the difference between the frequency ticks and the\n\t\t\tconst startTicks = this.frequency.getTicksAtTime(maxStartTime);\n\t\t\tconst ticksAtStart = this.frequency.getTicksAtTime(lastStateEvent.time);\n\t\t\tconst diff = startTicks - ticksAtStart;\n\t\t\tlet offset = diff % 1;\n\t\t\tif (offset !== 0) {\n\t\t\t\toffset = 1 - offset;\n\t\t\t}\n\t\t\tlet nextTickTime = this.frequency.getTimeOfTick(startTicks + offset);\n\t\t\twhile (nextTickTime < computedEndTime && this._state) {\n\t\t\t\ttry {\n\t\t\t\t\tcallback(nextTickTime, Math.round(this.getTicksAtTime(nextTickTime)));\n\t\t\t\t} catch (e) {\n\t\t\t\t\terror = e;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (this._state) {\n\t\t\t\t\tnextTickTime += this.frequency.getDurationOfTicks(1, nextTickTime);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (error) {\n\t\t\tthrow error;\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._state.dispose();\n\t\tthis._tickOffset.dispose();\n\t\tthis.frequency.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneWithContext, ToneWithContextOptions } from \"../context/ToneWithContext\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Emitter, EmitterEventObject } from \"../util/Emitter\";\nimport { noOp, readOnly } from \"../util/Interface\";\nimport { PlaybackState, StateTimeline } from \"../util/StateTimeline\";\nimport { TickSignal } from \"./TickSignal\";\nimport { TickSource } from \"./TickSource\";\n\ntype ClockCallback = (time: Time, ticks?: Ticks) => void;\n\ninterface ClockOptions extends ToneWithContextOptions {\n\tfrequency: number;\n\tcallback: ClockCallback;\n\tunits: \"hertz\" | \"bpm\";\n}\n\ntype ClockEvent = \"start\" | \"stop\" | \"pause\";\n\n/**\n * A sample accurate clock which provides a callback at the given rate.\n * While the callback is not sample-accurate (it is still susceptible to\n * loose JS timing), the time passed in as the argument to the callback\n * is precise. For most applications, it is better to use Tone.Transport\n * instead of the Clock by itself since you can synchronize multiple callbacks.\n *\n * @param callback The callback to be invoked with the time of the audio event\n * @param frequency The rate of the callback\n * @example\n * //the callback will be invoked approximately once a second\n * //and will print the time exactly once a second apart.\n * const clock = new Clock(time => {\n * \tconsole.log(time);\n * }, 1);\n */\nexport class Clock<Type extends BPM | Hertz = Hertz>\nextends ToneWithContext<ClockOptions> implements Emitter<ClockEvent> {\n\n\tname = \"Clock\";\n\n\t/**\n\t *  The callback function to invoke at the scheduled tick.\n\t */\n\tcallback: ClockCallback = noOp;\n\n\t/**\n\t *  The tick counter\n\t */\n\tprivate _tickSource: TickSource<Type>;\n\n\t/**\n\t *  The last time the loop callback was invoked\n\t */\n\tprivate _lastUpdate: number = 0;\n\n\t/**\n\t *  Keep track of the playback state\n\t */\n\tprivate _state: StateTimeline = new StateTimeline(\"stopped\");\n\n\t/**\n\t * Context bound reference to the _loop method\n\t * This is necessary to remove the event in the end.\n\t */\n\tprivate _boundLoop: () => void = this._loop.bind(this);\n\n\t/**\n\t *  The rate the callback function should be invoked.\n\t */\n\tfrequency: TickSignal<Type>;\n\n\tconstructor(options: Partial<ClockOptions>);\n\tconstructor(callback?: ClockCallback, frequency?: Frequency);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Clock.getDefaults(), arguments, [\"callback\", \"frequency\"]));\n\t\tconst options = optionsFromArguments(Clock.getDefaults(), arguments, [\"callback\", \"frequency\"]);\n\n\t\tthis.callback = options.callback;\n\t\tthis._tickSource = new TickSource({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.frequency,\n\t\t\tunits: options.units,\n\t\t});\n\t\tthis._lastUpdate = 0;\n\t\tthis.frequency = this._tickSource.frequency;\n\t\treadOnly(this, \"frequency\");\n\n\t\t// add an initial state\n\t\tthis._state.setStateAtTime(\"stopped\", 0);\n\n\t\t// bind a callback to the worker thread\n\t\tthis.context.on(\"tick\", this._boundLoop);\n\t}\n\n\tstatic getDefaults(): ClockOptions {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tcallback: noOp as ClockCallback,\n\t\t\tfrequency: 1,\n\t\t\tunits: \"hertz\",\n\t\t}) as ClockOptions;\n\t}\n\n\t/**\n\t *  Returns the playback state of the source, either \"started\", \"stopped\" or \"paused\".\n\t */\n\tget state(): PlaybackState {\n\t\treturn this._state.getValueAtTime(this.now());\n\t}\n\n\t/**\n\t *  Start the clock at the given time. Optionally pass in an offset\n\t *  of where to start the tick counter from.\n\t *  @param  time    The time the clock should start\n\t *  @param offset  Where the tick counter starts counting from.\n\t */\n\tstart(time?: Time, offset?: Ticks): this {\n\t\t// make sure the context is started\n\t\tthis.context.resume();\n\t\t// start the loop\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(computedTime) !== \"started\") {\n\t\t\tthis._state.setStateAtTime(\"started\", computedTime);\n\t\t\tthis._tickSource.start(computedTime, offset);\n\t\t\tif (computedTime < this._lastUpdate) {\n\t\t\t\tthis.emit(\"start\", computedTime, offset);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Stop the clock. Stopping the clock resets the tick counter to 0.\n\t *  @param time The time when the clock should stop.\n\t *  @returns {Clock} this\n\t *  @example\n\t * clock.stop();\n\t */\n\tstop(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._state.cancel(computedTime);\n\t\tthis._state.setStateAtTime(\"stopped\", computedTime);\n\t\tthis._tickSource.stop(computedTime);\n\t\tif (computedTime < this._lastUpdate) {\n\t\t\tthis.emit(\"stop\", computedTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Pause the clock. Pausing does not reset the tick counter.\n\t *  @param time The time when the clock should stop.\n\t */\n\tpause(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(computedTime) === \"started\") {\n\t\t\tthis._state.setStateAtTime(\"paused\", computedTime);\n\t\t\tthis._tickSource.pause(computedTime);\n\t\t\tif (computedTime < this._lastUpdate) {\n\t\t\t\tthis.emit(\"pause\", computedTime);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  The number of times the callback was invoked. Starts counting at 0\n\t *  and increments after the callback was invoked.\n\t */\n\tget ticks(): Ticks {\n\t\treturn Math.ceil(this.getTicksAtTime(this.now()));\n\t}\n\tset ticks(t: Ticks) {\n\t\tthis._tickSource.ticks = t;\n\t}\n\n\t/**\n\t *  The time since ticks=0 that the Clock has been running. Accounts for tempo curves\n\t */\n\tget seconds(): Seconds {\n\t\treturn this._tickSource.seconds;\n\t}\n\tset seconds(s: Seconds) {\n\t\tthis._tickSource.seconds = s;\n\t}\n\n\t/**\n\t *  Return the elapsed seconds at the given time.\n\t *  @param  time  When to get the elapsed seconds\n\t *  @return  The number of elapsed seconds\n\t */\n\tgetSecondsAtTime(time: Time): Seconds {\n\t\treturn this._tickSource.getSecondsAtTime(time);\n\t}\n\n\t/**\n\t * Set the clock's ticks at the given time.\n\t * @param  ticks The tick value to set\n\t * @param  time  When to set the tick value\n\t */\n\tsetTicksAtTime(ticks: Ticks, time: Time): this {\n\t\tthis._tickSource.setTicksAtTime(ticks, time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the clock's ticks at the given time.\n\t * @param  time  When to get the tick value\n\t * @return The tick value at the given time.\n\t */\n\tgetTicksAtTime(time: Time): Ticks {\n\t\treturn this._tickSource.getTicksAtTime(time);\n\t}\n\n\t/**\n\t * Get the time of the next tick\n\t * @param  ticks The tick number.\n\t */\n\tnextTickTime(offset: Ticks, when: Time): Seconds {\n\t\tconst computedTime = this.toSeconds(when);\n\t\tconst currentTick = this.getTicksAtTime(computedTime);\n\t\treturn this._tickSource.getTimeOfTick(currentTick + offset, computedTime);\n\t}\n\n\t/**\n\t *  The scheduling loop.\n\t */\n\tprivate _loop(): void {\n\n\t\tconst startTime = this._lastUpdate;\n\t\tconst endTime = this.now();\n\t\tthis._lastUpdate = endTime;\n\n\t\tif (startTime !== endTime) {\n\t\t\t// the state change events\n\t\t\tthis._state.forEachBetween(startTime, endTime, e => {\n\t\t\t\tswitch (e.state) {\n\t\t\t\t\tcase \"started\" :\n\t\t\t\t\t\tconst offset = this._tickSource.getTicksAtTime(e.time);\n\t\t\t\t\t\tthis.emit(\"start\", e.time, offset);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"stopped\" :\n\t\t\t\t\t\tif (e.time !== 0) {\n\t\t\t\t\t\t\tthis.emit(\"stop\", e.time);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"paused\" :\n\t\t\t\t\t\tthis.emit(\"pause\", e.time);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t});\n\t\t\t// the tick callbacks\n\t\t\tthis._tickSource.forEachTickBetween(startTime, endTime, (time, ticks) => {\n\t\t\t\tthis.callback(time, ticks);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Returns the scheduled state at the given time.\n\t * @param  time  The time to query.\n\t * @return  The name of the state input in setStateAtTime.\n\t * @example\n\t * clock.start(\"+0.1\");\n\t * clock.getStateAtTime(\"+0.1\"); //returns \"started\"\n\t */\n\tgetStateAtTime(time: Time): PlaybackState {\n\t\tconst computedTime = this.toSeconds(time);\n\t\treturn this._state.getValueAtTime(computedTime);\n\t}\n\n\t/**\n\t *  Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.context.off(\"tick\", this._boundLoop);\n\t\tthis._tickSource.dispose();\n\t\tthis._state.dispose();\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////\n\t// EMITTER MIXIN TO SATISFY COMPILER\n\t///////////////////////////////////////////////////////////////////////\n\n\ton!: (event: ClockEvent, callback: (...args: any[]) => void) => this;\n\tonce!: (event: ClockEvent, callback: (...args: any[]) => void) => this;\n\toff!: (event: ClockEvent, callback?: ((...args: any[]) => void) | undefined) => this;\n\temit!: (event: any, ...args: any[]) => this;\n}\n\nEmitter.mixin(Clock);\n","import { getContext } from \"../Global\";\nimport { TimeBaseUnit, TimeValue } from \"./TimeBase\";\nimport { TransportTimeClass } from \"./TransportTime\";\n\n/**\n * Ticks is a primitive type for encoding Time values.\n * Ticks can be constructed with or without the `new` keyword. Ticks can be passed\n * into the parameter of any method which takes time as an argument.\n * @example\n * const t = Ticks(\"4n\"); //a quarter note as ticks\n */\nexport class TicksClass extends TransportTimeClass<Ticks> {\n\n\tname = \"Ticks\";\n\n\treadonly defaultUnits: TimeBaseUnit = \"i\";\n\n\t/**\n\t * Get the current time in the given units\n\t */\n\tprotected _now(): Ticks {\n\t\treturn this.context.transport.ticks;\n\t}\n\n\t/**\n\t *  Return the value of the beats in the current units\n\t */\n\tprotected _beatsToUnits(beats: number): Ticks {\n\t\treturn this._getPPQ() * beats;\n\t}\n\n\t/**\n\t *  Returns the value of a second in the current units\n\t */\n\tprotected _secondsToUnits(seconds: Seconds): Ticks {\n\t\treturn Math.floor(seconds / (60 / this._getBpm()) * this._getPPQ());\n\t}\n\n\t/**\n\t *  Returns the value of a tick in the current time units\n\t */\n\tprotected _ticksToUnits(ticks: Ticks): Ticks {\n\t\treturn ticks;\n\t}\n\n\t/**\n\t *  Return the time in ticks\n\t */\n\ttoTicks(): Ticks {\n\t\treturn this.valueOf() as Ticks;\n\t}\n\n\t/**\n\t *  Return the time in seconds\n\t */\n\ttoSeconds(): Seconds {\n\t\treturn (this.valueOf() / this._getPPQ()) * (60 / this._getBpm());\n\t}\n}\n\nexport function Ticks(value?: TimeValue, units?: TimeBaseUnit): TicksClass {\n\treturn new TicksClass(getContext(), value, units);\n}\n","import { ToneWithContext, ToneWithContextOptions } from \"../context/ToneWithContext\";\nimport { Timeline, TimelineEvent } from \"./Timeline\";\n\ninterface DrawEvent extends TimelineEvent {\n\tcallback: () => void;\n}\n\n/**\n * Draw is useful for synchronizing visuals and audio events.\n * Callbacks from Tone.Transport or any of the Tone.Event classes\n * always happen _before_ the scheduled time and are not synchronized\n * to the animation frame so they are not good for triggering tightly\n * synchronized visuals and sound. Draw makes it easy to schedule\n * callbacks using the AudioContext time and uses requestAnimationFrame.\n * @example\n * Tone.Transport.schedule(function(time){\n * \t//use the time argument to schedule a callback with Draw\n * \tDraw.schedule(function(){\n * \t\t//do drawing or DOM manipulation here\n * \t}, time)\n * }, \"+0.5\")\n */\nexport class Draw extends ToneWithContext<ToneWithContextOptions> {\n\n\tname = \"Draw\";\n\n\t/**\n\t *  The duration after which events are not invoked.\n\t */\n\texpiration: Seconds = 0.25;\n\n\t/**\n\t *  The amount of time before the scheduled time\n\t *  that the callback can be invoked. Default is\n\t *  half the time of an animation frame (0.008 seconds).\n\t */\n\tanticipation: Seconds = 0.008;\n\n\t/**\n\t *  All of the events.\n\t */\n\tprivate _events: Timeline<DrawEvent> = new Timeline();\n\n\t/**\n\t *  The draw loop\n\t */\n\tprivate _boundDrawLoop = this._drawLoop.bind(this);\n\n\t/**\n\t * The animation frame id\n\t */\n\tprivate _animationFrame: number = -1;\n\n\t/**\n\t *  Schedule a function at the given time to be invoked\n\t *  on the nearest animation frame.\n\t *  @param  callback  Callback is invoked at the given time.\n\t *  @param  time      The time relative to the AudioContext time to invoke the callback.\n\t */\n\tschedule(callback: () => void, time: Time): this {\n\t\tthis._events.add({\n\t\t\tcallback,\n\t\t\ttime : this.toSeconds(time),\n\t\t});\n\t\t// start the draw loop on the first event\n\t\tif (this._events.length === 1) {\n\t\t\tthis._animationFrame = requestAnimationFrame(this._boundDrawLoop);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Cancel events scheduled after the given time\n\t *  @param  after  Time after which scheduled events will be removed from the scheduling timeline.\n\t */\n\tcancel(after?: Time): this {\n\t\tthis._events.cancel(this.toSeconds(after));\n\t\treturn this;\n\t}\n\n\t/**\n\t *  The draw loop\n\t */\n\tprivate _drawLoop(): void {\n\t\tconst now = this.context.currentTime;\n\t\twhile (this._events.length && (this._events.peek() as DrawEvent).time - this.anticipation <= now) {\n\t\t\tconst event = this._events.shift();\n\t\t\tif (event && now - event.time <= this.expiration) {\n\t\t\t\tevent.callback();\n\t\t\t}\n\t\t}\n\t\tif (this._events.length > 0) {\n\t\t\tthis._animationFrame = requestAnimationFrame(this._boundDrawLoop);\n\t\t}\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._events.dispose();\n\t\tcancelAnimationFrame(this._animationFrame);\n\t\treturn this;\n\t}\n}\n","import { Tone } from \"../Tone\";\nimport { isDefined } from \"./TypeCheck\";\n\n/**\n * An IntervalTimeline event must have a time and duration\n */\nexport interface IntervalTimelineEvent {\n\ttime: number;\n\tduration: number;\n\t[propName: string]: any;\n}\n\n/**\n * Similar to Tone.Timeline, but all events represent\n * intervals with both \"time\" and \"duration\" times. The\n * events are placed in a tree structure optimized\n * for querying an intersection point with the timeline\n * events. Internally uses an [Interval Tree](https://en.wikipedia.org/wiki/Interval_tree)\n * to represent the data.\n */\nexport class IntervalTimeline extends Tone {\n\n\tname = \"IntervalTimeline\";\n\n\t/**\n\t *  The root node of the inteval tree\n\t */\n\tprivate _root: IntervalNode | null = null;\n\n\t/**\n\t *  Keep track of the length of the timeline.\n\t */\n\tprivate _length: number = 0;\n\n\t/**\n\t *  The event to add to the timeline. All events must\n\t *  have a time and duration value\n\t *  @param  event  The event to add to the timeline\n\t */\n\tadd(event: IntervalTimelineEvent): this {\n\t\tthis.assert(isDefined(event.time), \"Events must have a time property\");\n\t\tthis.assert(isDefined(event.duration), \"Events must have a duration parameter\");\n\n\t\tevent.time = event.time.valueOf();\n\t\tlet node: IntervalNode | null = new IntervalNode(event.time, event.time + event.duration, event);\n\t\tif (this._root === null) {\n\t\t\tthis._root = node;\n\t\t} else {\n\t\t\tthis._root.insert(node);\n\t\t}\n\t\tthis._length++;\n\t\t// Restructure tree to be balanced\n\t\twhile (node !== null) {\n\t\t\tnode.updateHeight();\n\t\t\tnode.updateMax();\n\t\t\tthis._rebalance(node);\n\t\t\tnode = node.parent;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Remove an event from the timeline.\n\t *  @param  event  The event to remove from the timeline\n\t */\n\tremove(event: IntervalTimelineEvent): this {\n\t\tif (this._root !== null) {\n\t\t\tconst results: IntervalNode[] = [];\n\t\t\tthis._root.search(event.time, results);\n\t\t\tfor (const node of results) {\n\t\t\t\tif (node.event === event) {\n\t\t\t\t\tthis._removeNode(node);\n\t\t\t\t\tthis._length--;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  The number of items in the timeline.\n\t *  @readOnly\n\t */\n\tget length(): number {\n\t\treturn this._length;\n\t}\n\n\t/**\n\t *  Remove events whose time time is after the given time\n\t *  @param  time  The time to query.\n\t */\n\tcancel(after: number): this {\n\t\tthis.forEachFrom(after, event => this.remove(event));\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Set the root node as the given node\n\t */\n\tprivate _setRoot(node: IntervalNode | null): void {\n\t\tthis._root = node;\n\t\tif (this._root !== null) {\n\t\t\tthis._root.parent = null;\n\t\t}\n\t}\n\n\t/**\n\t *  Replace the references to the node in the node's parent\n\t *  with the replacement node.\n\t */\n\tprivate _replaceNodeInParent(node: IntervalNode, replacement: IntervalNode | null): void {\n\t\tif (node.parent !== null) {\n\t\t\tif (node.isLeftChild()) {\n\t\t\t\tnode.parent.left = replacement;\n\t\t\t} else {\n\t\t\t\tnode.parent.right = replacement;\n\t\t\t}\n\t\t\tthis._rebalance(node.parent);\n\t\t} else {\n\t\t\tthis._setRoot(replacement);\n\t\t}\n\t}\n\n\t/**\n\t *  Remove the node from the tree and replace it with\n\t *  a successor which follows the schema.\n\t */\n\tprivate _removeNode(node): void {\n\t\tif (node.left === null && node.right === null) {\n\t\t\tthis._replaceNodeInParent(node, null);\n\t\t} else if (node.right === null) {\n\t\t\tthis._replaceNodeInParent(node, node.left);\n\t\t} else if (node.left === null) {\n\t\t\tthis._replaceNodeInParent(node, node.right);\n\t\t} else {\n\t\t\tconst balance = node.getBalance();\n\t\t\tlet replacement: IntervalNode;\n\t\t\tlet temp: IntervalNode | null = null;\n\t\t\tif (balance > 0) {\n\t\t\t\tif (node.left.right === null) {\n\t\t\t\t\treplacement = node.left;\n\t\t\t\t\treplacement.right = node.right;\n\t\t\t\t\ttemp = replacement;\n\t\t\t\t} else {\n\t\t\t\t\treplacement = node.left.right;\n\t\t\t\t\twhile (replacement.right !== null) {\n\t\t\t\t\t\treplacement = replacement.right;\n\t\t\t\t\t}\n\t\t\t\t\tif (replacement.parent) {\n\t\t\t\t\t\treplacement.parent.right = replacement.left;\n\t\t\t\t\t\ttemp = replacement.parent;\n\t\t\t\t\t\treplacement.left = node.left;\n\t\t\t\t\t\treplacement.right = node.right;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (node.right.left === null) {\n\t\t\t\treplacement = node.right;\n\t\t\t\treplacement.left = node.left;\n\t\t\t\ttemp = replacement;\n\t\t\t} else {\n\t\t\t\treplacement = node.right.left;\n\t\t\t\twhile (replacement.left !== null) {\n\t\t\t\t\treplacement = replacement.left;\n\t\t\t\t}\n\t\t\t\tif (replacement.parent) {\n\t\t\t\t\treplacement.parent.left = replacement.right;\n\t\t\t\t\ttemp = replacement.parent;\n\t\t\t\t\treplacement.left = node.left;\n\t\t\t\t\treplacement.right = node.right;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (node.parent !== null) {\n\t\t\t\tif (node.isLeftChild()) {\n\t\t\t\t\tnode.parent.left = replacement;\n\t\t\t\t} else {\n\t\t\t\t\tnode.parent.right = replacement;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._setRoot(replacement);\n\t\t\t}\n\t\t\tif (temp) {\n\t\t\t\tthis._rebalance(temp);\n\t\t\t}\n\t\t}\n\t\tnode.dispose();\n\t}\n\n\t/**\n\t *  Rotate the tree to the left\n\t *  @param  {IntervalNode}  node\n\t *  @private\n\t */\n\t_rotateLeft(node): void {\n\t\tconst parent = node.parent;\n\t\tconst isLeftChild = node.isLeftChild();\n\n\t\t// Make node.right the new root of this sub tree (instead of node)\n\t\tconst pivotNode = node.right;\n\t\tnode.right = pivotNode.left;\n\t\tpivotNode.left = node;\n\n\t\tif (parent !== null) {\n\t\t\tif (isLeftChild) {\n\t\t\t\tparent.left = pivotNode;\n\t\t\t} else {\n\t\t\t\tparent.right = pivotNode;\n\t\t\t}\n\t\t} else {\n\t\t\tthis._setRoot(pivotNode);\n\t\t}\n\t}\n\n\t/**\n\t *  Rotate the tree to the right\n\t *  @param  {IntervalNode}  node\n\t *  @private\n\t */\n\t_rotateRight(node): void {\n\t\tconst parent = node.parent;\n\t\tconst isLeftChild = node.isLeftChild();\n\n\t\t// Make node.left the new root of this sub tree (instead of node)\n\t\tconst pivotNode = node.left;\n\t\tnode.left = pivotNode.right;\n\t\tpivotNode.right = node;\n\n\t\tif (parent !== null) {\n\t\t\tif (isLeftChild) {\n\t\t\t\tparent.left = pivotNode;\n\t\t\t} else {\n\t\t\t\tparent.right = pivotNode;\n\t\t\t}\n\t\t} else {\n\t\t\tthis._setRoot(pivotNode);\n\t\t}\n\t}\n\n\t/**\n\t *  Balance the BST\n\t */\n\tprivate _rebalance(node: IntervalNode): void {\n\t\tconst balance = node.getBalance();\n\t\tif (balance > 1 && node.left) {\n\t\t\tif (node.left.getBalance() < 0) {\n\t\t\t\tthis._rotateLeft(node.left);\n\t\t\t} else {\n\t\t\t\tthis._rotateRight(node);\n\t\t\t}\n\t\t} else if (balance < -1 && node.right) {\n\t\t\tif (node.right.getBalance() > 0) {\n\t\t\t\tthis._rotateRight(node.right);\n\t\t\t} else {\n\t\t\t\tthis._rotateLeft(node);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *  Get an event whose time and duration span the give time. Will\n\t *  return the match whose \"time\" value is closest to the given time.\n\t *  @return  The event which spans the desired time\n\t */\n\tget(time: number): IntervalTimelineEvent | null {\n\t\tif (this._root !== null) {\n\t\t\tconst results: IntervalNode[] = [];\n\t\t\tthis._root.search(time, results);\n\t\t\tif (results.length > 0) {\n\t\t\t\tlet max = results[0];\n\t\t\t\tfor (let i = 1; i < results.length; i++) {\n\t\t\t\t\tif (results[i].low > max.low) {\n\t\t\t\t\t\tmax = results[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn max.event;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t *  Iterate over everything in the timeline.\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEach(callback: (event: IntervalTimelineEvent) => void): this {\n\t\tif (this._root !== null) {\n\t\t\tconst allNodes: IntervalNode[] = [];\n\t\t\tthis._root.traverse(node => allNodes.push(node));\n\t\t\tallNodes.forEach(node => {\n\t\t\t\tif (node.event) {\n\t\t\t\t\tcallback(node.event);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array in which the given time\n\t *  overlaps with the time and duration time of the event.\n\t *  @param  time The time to check if items are overlapping\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachAtTime(time: number, callback: (event: IntervalTimelineEvent) => void): this {\n\t\tif (this._root !== null) {\n\t\t\tconst results: IntervalNode[] = [];\n\t\t\tthis._root.search(time, results);\n\t\t\tresults.forEach(node => {\n\t\t\t\tif (node.event) {\n\t\t\t\t\tcallback(node.event);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array in which the time is greater\n\t *  than or equal to the given time.\n\t *  @param  time The time to check if items are before\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachFrom(time, callback): this {\n\t\tif (this._root !== null) {\n\t\t\tconst results: IntervalNode[] = [];\n\t\t\tthis._root.searchAfter(time, results);\n\t\t\tresults.forEach(node => {\n\t\t\t\tif (node.event) {\n\t\t\t\t\tcallback(node.event);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (this._root !== null) {\n\t\t\tthis._root.traverse(node => node.dispose());\n\t\t}\n\t\tthis._root = null;\n\t\treturn this;\n\t}\n}\n\n///////////////////////////////////////////////////////////////////////////\n// \tINTERVAL NODE HELPER\n///////////////////////////////////////////////////////////////////////////\n\n/**\n *  Represents a node in the binary search tree, with the addition\n *  of a \"high\" value which keeps track of the highest value of\n *  its children.\n *  References:\n *  https://brooknovak.wordpress.com/2013/12/07/augmented-interval-tree-in-c/\n *  http://www.mif.vu.lt/~valdas/ALGORITMAI/LITERATURA/Cormen/Cormen.pdf\n *  @param low\n *  @param high\n */\n// tslint:disable-next-line: max-classes-per-file\nclass IntervalNode {\n\n\t// the event container\n\tevent: IntervalTimelineEvent | null;\n\t// the low value\n\tlow: number;\n\t// the high value\n\thigh: number;\n\t// the high value for this and all child nodes\n\tmax: number;\n\t// the nodes to the left\n\tprivate _left: IntervalNode | null = null;\n\t// the nodes to the right\n\tprivate _right: IntervalNode | null = null;\n\t// the parent node\n\tparent: IntervalNode | null = null;\n\t// the number of child nodes\n\theight: number = 0;\n\n\tconstructor(low, high, event) {\n\t\tthis.event = event;\n\t\t// the low value\n\t\tthis.low = low;\n\t\t// the high value\n\t\tthis.high = high;\n\t\t// the high value for this and all child nodes\n\t\tthis.max = this.high;\n\t}\n\n\t/**\n\t *  Insert a node into the correct spot in the tree\n\t */\n\tinsert(node: IntervalNode): void {\n\t\tif (node.low <= this.low) {\n\t\t\tif (this.left === null) {\n\t\t\t\tthis.left = node;\n\t\t\t} else {\n\t\t\t\tthis.left.insert(node);\n\t\t\t}\n\t\t} else if (this.right === null) {\n\t\t\tthis.right = node;\n\t\t} else {\n\t\t\tthis.right.insert(node);\n\t\t}\n\t}\n\n\t/**\n\t *  Search the tree for nodes which overlap\n\t *  with the given point\n\t *  @param  point  The point to query\n\t *  @param  results  The array to put the results\n\t */\n\tsearch(point: number, results: IntervalNode[]): void {\n\t\t// If p is to the right of the rightmost point of any interval\n\t\t// in this node and all children, there won't be any matches.\n\t\tif (point > this.max) {\n\t\t\treturn;\n\t\t}\n\t\t// Search left children\n\t\tif (this.left !== null) {\n\t\t\tthis.left.search(point, results);\n\t\t}\n\t\t// Check this node\n\t\tif (this.low <= point && this.high > point) {\n\t\t\tresults.push(this);\n\t\t}\n\t\t// If p is to the left of the time of this interval,\n\t\t// then it can't be in any child to the right.\n\t\tif (this.low > point) {\n\t\t\treturn;\n\t\t}\n\t\t// Search right children\n\t\tif (this.right !== null) {\n\t\t\tthis.right.search(point, results);\n\t\t}\n\t}\n\n\t/**\n\t *  Search the tree for nodes which are less\n\t *  than the given point\n\t *  @param  point  The point to query\n\t *  @param  results  The array to put the results\n\t */\n\tsearchAfter(point: number, results: IntervalNode[]): void {\n\t\t// Check this node\n\t\tif (this.low >= point) {\n\t\t\tresults.push(this);\n\t\t\tif (this.left !== null) {\n\t\t\t\tthis.left.searchAfter(point, results);\n\t\t\t}\n\t\t}\n\t\t// search the right side\n\t\tif (this.right !== null) {\n\t\t\tthis.right.searchAfter(point, results);\n\t\t}\n\t}\n\n\t/**\n\t *  Invoke the callback on this element and both it's branches\n\t *  @param  {Function}  callback\n\t */\n\ttraverse(callback: (self: IntervalNode) => void): void {\n\t\tcallback(this);\n\t\tif (this.left !== null) {\n\t\t\tthis.left.traverse(callback);\n\t\t}\n\t\tif (this.right !== null) {\n\t\t\tthis.right.traverse(callback);\n\t\t}\n\t}\n\n\t/**\n\t *  Update the height of the node\n\t */\n\tupdateHeight(): void {\n\t\tif (this.left !== null && this.right !== null) {\n\t\t\tthis.height = Math.max(this.left.height, this.right.height) + 1;\n\t\t} else if (this.right !== null) {\n\t\t\tthis.height = this.right.height + 1;\n\t\t} else if (this.left !== null) {\n\t\t\tthis.height = this.left.height + 1;\n\t\t} else {\n\t\t\tthis.height = 0;\n\t\t}\n\t}\n\n\t/**\n\t *  Update the height of the node\n\t */\n\tupdateMax(): void {\n\t\tthis.max = this.high;\n\t\tif (this.left !== null) {\n\t\t\tthis.max = Math.max(this.max, this.left.max);\n\t\t}\n\t\tif (this.right !== null) {\n\t\t\tthis.max = Math.max(this.max, this.right.max);\n\t\t}\n\t}\n\n\t/**\n\t *  The balance is how the leafs are distributed on the node\n\t *  @return  Negative numbers are balanced to the right\n\t */\n\tgetBalance(): number {\n\t\tlet balance = 0;\n\t\tif (this.left !== null && this.right !== null) {\n\t\t\tbalance = this.left.height - this.right.height;\n\t\t} else if (this.left !== null) {\n\t\t\tbalance = this.left.height + 1;\n\t\t} else if (this.right !== null) {\n\t\t\tbalance = -(this.right.height + 1);\n\t\t}\n\t\treturn balance;\n\t}\n\n\t/**\n\t *  @returns true if this node is the left child of its parent\n\t */\n\tisLeftChild(): boolean {\n\t\treturn this.parent !== null && this.parent.left === this;\n\t}\n\n\t/**\n\t *  get/set the left node\n\t */\n\tget left(): IntervalNode | null {\n\t\treturn this._left;\n\t}\n\n\tset left(node: IntervalNode | null) {\n\t\tthis._left = node;\n\t\tif (node !== null) {\n\t\t\tnode.parent = this;\n\t\t}\n\t\tthis.updateHeight();\n\t\tthis.updateMax();\n\t}\n\n\t/**\n\t *  get/set the right node\n\t */\n\tget right(): IntervalNode | null {\n\t\treturn this._right;\n\t}\n\n\tset right(node: IntervalNode | null) {\n\t\tthis._right = node;\n\t\tif (node !== null) {\n\t\t\tnode.parent = this;\n\t\t}\n\t\tthis.updateHeight();\n\t\tthis.updateMax();\n\t}\n\n\t/**\n\t *  null out references.\n\t */\n\tdispose(): void {\n\t\tthis.parent = null;\n\t\tthis._left = null;\n\t\tthis._right = null;\n\t\tthis.event = null;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\n\ninterface VolumeOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n\tmute: boolean;\n}\n\n/**\n *  @class Volume is a simple volume node, useful for creating a volume fader.\n *\n *  @extends {Tone.AudioNode}\n *  @constructor\n *  @param {Decibels} [volume=0] the initial volume\n *  @example\n * var vol = new Volume(-12);\n * instrument.chain(vol, Tone.Master);\n */\nexport class Volume extends ToneAudioNode<VolumeOptions> {\n\n\tname = \"Volume\";\n\n\t/**\n\t * the output node\n\t */\n\toutput: Gain<Decibels> = new Gain({\n\t\tcontext: this.context,\n\t\tunits: \"decibels\",\n\t});\n\tprotected _internalChannels = [this.output];\n\n\t/**\n\t * Input and output are the same\n\t */\n\tinput = this.output;\n\n\t/**\n\t * The unmuted volume\n\t */\n\tprivate _unmutedVolume: Decibels;\n\n\t/**\n\t *  The volume control in decibels.\n\t */\n\tvolume: Param<Decibels> = this.output.gain;\n\n\tconstructor(options?: Decibels | Partial<VolumeOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Volume.getDefaults(), arguments, [\"volume\"]));\n\t\tconst options = optionsFromArguments(Volume.getDefaults(), arguments, [\"volume\"]);\n\n\t\tthis.volume.value = options.volume;\n\t\treadOnly(this, \"volume\");\n\t\tthis._unmutedVolume = options.volume;\n\n\t\t// set the mute initially\n\t\tthis.mute = options.mute;\n\t}\n\n\tstatic getDefaults(): VolumeOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmute: false,\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Mute the output.\n\t * @example\n\t * //mute the output\n\t * volume.mute = true;\n\t */\n\tget mute(): boolean {\n\t\treturn this.volume.value === -Infinity;\n\t}\n\tset mute(mute: boolean) {\n\t\tif (!this.mute && mute) {\n\t\t\tthis._unmutedVolume = this.volume.value;\n\t\t\t// maybe it should ramp here?\n\t\t\tthis.volume.value = -Infinity;\n\t\t} else if (this.mute && !mute) {\n\t\t\tthis.volume.value = this._unmutedVolume;\n\t\t}\n\t}\n\n\t/**\n\t *  clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.input.dispose();\n\t\tthis.volume.dispose();\n\t\treturn this;\n\t}\n}\n","import { Volume } from \"../../component/channel/Volume\";\nimport { connectSeries } from \"../Connect\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { onContextClose, onContextInit } from \"./ContextInitialization\";\nimport { Gain } from \"./Gain\";\nimport { Param } from \"./Param\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"./ToneAudioNode\";\n\ninterface DestinationOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n\tmute: boolean;\n}\n\n/**\n *  A single master output which is connected to the\n *  AudioDestinationNode (aka your speakers).\n *  It provides useful conveniences such as the ability\n *  to set the volume and mute the entire application.\n *  It also gives you the ability to apply master effects to your application.\n *\n *  @example\n * //the audio will go from the oscillator to the speakers\n * oscillator.connect(Destination);\n * //a convenience for connecting to the master output is also provided:\n * oscillator.toDestination();\n * //the above two examples are equivalent.\n */\nexport class Destination extends ToneAudioNode<DestinationOptions> {\n\n\tname = \"Destination\";\n\n\tinput: Volume = new Volume({ context: this.context });\n\toutput: Gain = new Gain({ context : this.context });\n\n\t/**\n\t * The volume of the master output.\n\t */\n\tvolume: Param<Decibels> = this.input.volume;\n\t_internalChannels = [this.input, this.output];\n\n\tconstructor(options: Partial<DestinationOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Destination.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Destination.getDefaults(), arguments);\n\n\t\tconnectSeries(this.input, this.output, this.context.rawContext.destination);\n\n\t\tthis.volume.value = options.volume;\n\t\tthis.mute = options.mute;\n\t}\n\n\tstatic getDefaults(): DestinationOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmute: false,\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Mute the output.\n\t * @example\n\t * //mute the output\n\t * Destination.mute = true;\n\t */\n\tget mute(): boolean {\n\t\treturn this.input.mute;\n\t}\n\n\tset mute(mute: boolean) {\n\t\tthis.input.mute = mute;\n\t}\n\n\t/**\n\t *  Add a master effects chain. NOTE: this will disconnect any nodes which were previously\n\t *  chained in the master effects chain.\n\t *  @param nodes All arguments will be connected in a row and the Master will be routed through it.\n\t *  @return  {Destination}  this\n\t *  @example\n\t * //some overall compression to keep the levels in check\n\t * var masterCompressor = new Tone.Compressor({\n\t * \t\"threshold\" : -6,\n\t * \t\"ratio\" : 3,\n\t * \t\"attack\" : 0.5,\n\t * \t\"release\" : 0.1\n\t * });\n\t * //give a little boost to the lows\n\t * var lowBump = new Tone.Filter(200, \"lowshelf\");\n\t * //route everything through the filter\n\t * //and compressor before going to the speakers\n\t * Destination.chain(lowBump, masterCompressor);\n\t */\n\tchain(...args: Array<AudioNode | ToneAudioNode>): this {\n\t\tthis.input.disconnect();\n\t\targs.unshift(this.input);\n\t\targs.push(this.output);\n\t\tconnectSeries(...args);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.volume.dispose();\n\t\treturn this;\n\t}\n}\n\n///////////////////////////////////////////////////////////////////////////\n// \tINITIALIZATION\n///////////////////////////////////////////////////////////////////////////\n\nonContextInit(context => {\n\tcontext.destination = new Destination({ context });\n});\n\nonContextClose(context => {\n\tcontext.destination.dispose();\n});\n","import { noOp } from \"../util/Interface\";\n\ntype Transport = import(\"../clock/Transport\").Transport;\n\nexport interface TransportEventOptions {\n\tcallback: (time: number) => void;\n\tonce: boolean;\n\ttime: Ticks;\n}\n\n/**\n * TransportEvent is an internal class used by (Tone.Transport)[Transport]\n * to schedule events. Do no invoke this class directly, it is\n * handled from within Tone.Transport.\n * @param Transport The transport object which the event belongs to\n */\nexport class TransportEvent {\n\n\t/**\n\t * Reference to the Transport that created it\n\t */\n\tprotected transport: Transport;\n\n\t/**\n\t * The unique id of the event\n\t */\n\tid: number = TransportEvent._eventId++;\n\n\t/**\n\t * The time the event starts\n\t */\n\ttime: Ticks;\n\n\t/**\n\t * The callback to invoke\n\t */\n\tprivate callback?: (time: Seconds) => void;\n\n\t/**\n\t * If the event should be removed after being invoked.\n\t */\n\tprivate _once: boolean;\n\n\tconstructor(transport: Transport, opts: Partial<TransportEventOptions>) {\n\n\t\tconst options: TransportEventOptions = Object.assign(TransportEvent.getDefaults(), opts);\n\n\t\tthis.transport = transport;\n\t\tthis.callback = options.callback;\n\t\tthis._once = options.once;\n\t\tthis.time = options.time;\n\t}\n\n\tstatic getDefaults(): TransportEventOptions {\n\t\treturn {\n\t\t\tcallback: noOp,\n\t\t\tonce: false,\n\t\t\ttime: 0,\n\t\t};\n\t}\n\n\t/**\n\t * Current ID counter\n\t */\n\tprivate static _eventId: number = 0;\n\n\t/**\n\t * Invoke the event callback.\n\t * @param  time  The AudioContext time in seconds of the event\n\t */\n\tinvoke(time: Seconds): void {\n\t\tif (this.callback) {\n\t\t\tthis.callback(time);\n\t\t\tif (this._once) {\n\t\t\t\tthis.transport.clear(this.id);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tthis.callback = undefined;\n\t\treturn this;\n\t}\n}\n","import { Context } from \"../context/Context\";\nimport { Ticks, TicksClass } from \"../type/Ticks\";\nimport { TransportEvent, TransportEventOptions } from \"./TransportEvent\";\n\ntype Transport = import(\"../clock/Transport\").Transport;\n\ninterface TransportRepeatEventOptions extends TransportEventOptions {\n\tinterval: Ticks;\n\tduration: Ticks;\n}\n\n/**\n * TransportRepeatEvent is an internal class used by Tone.Transport\n * to schedule repeat events. This class should not be instantiated directly.\n */\nexport class TransportRepeatEvent extends TransportEvent {\n\n\t/**\n\t * When the event should stop repeating\n\t */\n\tprivate duration: Ticks;\n\n\t/**\n\t * The interval of the repeated event\n\t */\n\tprivate _interval: Ticks;\n\n\t/**\n\t * The ID of the current timeline event\n\t */\n\tprivate _currentId: number = -1;\n\n\t/**\n\t * The ID of the next timeline event\n\t */\n\tprivate _nextId: number = -1;\n\n\t/**\n\t * The time of the next event\n\t */\n\tprivate _nextTick = this.time;\n\n\t/**\n\t * a reference to the bound start method\n\t */\n\tprivate _boundRestart = this._restart.bind(this);\n\n\t/**\n\t * The audio context belonging to this event\n\t */\n\tprotected context: Context;\n\n\tconstructor(transport: Transport, opts: Partial<TransportRepeatEventOptions>) {\n\n\t\tsuper(transport, opts);\n\n\t\tconst options = Object.assign(TransportRepeatEvent.getDefaults(), opts);\n\n\t\tthis.duration = Ticks(options.duration).valueOf();\n\t\tthis._interval = Ticks(options.interval).valueOf();\n\t\tthis._nextTick = options.time;\n\t\tthis.transport.on(\"start\", this._boundRestart);\n\t\tthis.transport.on(\"loopStart\", this._boundRestart);\n\t\tthis.context = this.transport.context;\n\t\tthis._restart();\n\t}\n\n\tstatic getDefaults(): TransportRepeatEventOptions {\n\t\treturn Object.assign({}, TransportEvent.getDefaults(), {\n\t\t\tduration: Infinity,\n\t\t\tinterval: 1,\n\t\t\tonce: false,\n\t\t});\n\t}\n\n\t/**\n\t * Invoke the callback. Returns the tick time which\n\t * the next event should be scheduled at.\n\t * @param  time  The AudioContext time in seconds of the event\n\t */\n\tinvoke(time: Seconds): void {\n\t\t// create more events if necessary\n\t\tthis._createEvents(time);\n\t\t// call the super class\n\t\tsuper.invoke(time);\n\t}\n\n\t/**\n\t * Push more events onto the timeline to keep up with the position of the timeline\n\t */\n\tprivate _createEvents(time: Seconds): void {\n\t\t// schedule the next event\n\t\tconst ticks = this.transport.getTicksAtTime(time);\n\t\tif (ticks >= this.time && ticks >= this._nextTick && this._nextTick + this._interval < this.time + this.duration) {\n\t\t\tthis._nextTick += this._interval;\n\t\t\tthis._currentId = this._nextId;\n\t\t\tthis._nextId = this.transport.scheduleOnce(this.invoke.bind(this),\n\t\t\t\tnew TicksClass(this.context, this._nextTick).toSeconds());\n\t\t}\n\t}\n\n\t/**\n\t * Push more events onto the timeline to keep up with the position of the timeline\n\t */\n\tprivate _restart(time?: Time): void {\n\t\tthis.transport.clear(this._currentId);\n\t\tthis.transport.clear(this._nextId);\n\t\tthis._nextTick = this.time;\n\t\tconst ticks = this.transport.getTicksAtTime(time);\n\t\tif (ticks > this.time) {\n\t\t\tthis._nextTick = this.time + Math.ceil((ticks - this.time) / this._interval) * this._interval;\n\t\t}\n\t\tthis._currentId = this.transport.scheduleOnce(this.invoke.bind(this),\n\t\t\tnew TicksClass(this.context, this._nextTick).toSeconds());\n\t\tthis._nextTick += this._interval;\n\t\tthis._nextId = this.transport.scheduleOnce(this.invoke.bind(this),\n\t\t\tnew TicksClass(this.context, this._nextTick).toSeconds());\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.transport.clear(this._currentId);\n\t\tthis.transport.clear(this._nextId);\n\t\tthis.transport.off(\"start\", this._boundRestart);\n\t\tthis.transport.off(\"loopStart\", this._boundRestart);\n\t\treturn this;\n\t}\n}\n","import { Time, TimeClass } from \"../../core/type/Time\";\nimport { PlaybackState } from \"../../core/util/StateTimeline\";\nimport { Signal } from \"../../signal/Signal\";\nimport { onContextClose, onContextInit } from \"../context/ContextInitialization\";\nimport { Gain } from \"../context/Gain\";\nimport { Param } from \"../context/Param\";\nimport { ToneWithContext, ToneWithContextOptions } from \"../context/ToneWithContext\";\nimport { TicksClass } from \"../type/Ticks\";\nimport { TransportTimeClass } from \"../type/TransportTime\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Emitter } from \"../util/Emitter\";\nimport { readOnly, writable } from \"../util/Interface\";\nimport { IntervalTimeline } from \"../util/IntervalTimeline\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isArray, isDefined } from \"../util/TypeCheck\";\nimport { Clock } from \"./Clock\";\nimport { TransportEvent } from \"./TransportEvent\";\nimport { TransportRepeatEvent } from \"./TransportRepeatEvent\";\n\ninterface TransportOptions extends ToneWithContextOptions {\n\tbpm: BPM;\n\tswing: NormalRange;\n\tswingSubdivision: Subdivision;\n\ttimeSignature: number;\n\tloopStart: Time;\n\tloopEnd: Time;\n\tppq: number;\n}\n\ntype TransportEventNames = \"start\" | \"stop\" | \"pause\" | \"loop\" | \"loopEnd\" | \"loopStart\";\n\ninterface SyncedSignalEvent {\n\tsignal: Signal;\n\tinitial: number;\n\tratio: Gain;\n}\n\ntype TransportCallback = (time: Seconds) => void;\n\n/**\n * Transport for timing musical events.\n * Supports tempo curves and time changes. Unlike browser-based timing (setInterval, requestAnimationFrame)\n * Transport timing events pass in the exact time of the scheduled event\n * in the argument of the callback function. Pass that time value to the object\n * you're scheduling. <br><br>\n * A single transport is created for you when the library is initialized.\n * <br><br>\n * The transport emits the events: \"start\", \"stop\", \"pause\", and \"loop\" which are\n * called with the time of that event as the argument.\n *\n * @example\n * //repeated event every 8th note\n * Transport.scheduleRepeat(function(time){\n * \t//do something with the time\n * }, \"8n\");\n * @example\n * //schedule an event on the 16th measure\n * Transport.schedule(function(time){\n * \t//do something with the time\n * }, \"16:0:0\");\n */\nexport class Transport extends ToneWithContext<TransportOptions> implements Emitter<TransportEventNames> {\n\n\tname = \"Transport\";\n\n\t///////////////////////////////////////////////////////////////////////\n\t// \tLOOPING\n\t//////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * \tIf the transport loops or not.\n\t */\n\tloop: boolean = false;\n\n\t/**\n\t * \tThe loop start position in ticks\n\t */\n\tprivate _loopStart: Ticks = 0;\n\n\t/**\n\t * \tThe loop end position in ticks\n\t */\n\tprivate _loopEnd: Ticks = 0;\n\n\t///////////////////////////////////////////////////////////////////////\n\t// \tCLOCK/TEMPO\n\t//////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Pulses per quarter is the number of ticks per quarter note.\n\t */\n\tprivate _ppq: number;\n\n\t/**\n\t *  watches the main oscillator for timing ticks\n\t *  initially starts at 120bpm\n\t */\n\tprivate _clock: Clock<BPM>;\n\n\t/**\n\t * The Beats Per Minute of the Transport.\n\t * @example\n\t * Transport.bpm.value = 80;\n\t * //ramp the bpm to 120 over 10 seconds\n\t * Transport.bpm.rampTo(120, 10);\n\t */\n\tbpm: Param<BPM>;\n\n\t/**\n\t *  The time signature, or more accurately the numerator\n\t *  of the time signature over a denominator of 4.\n\t */\n\tprivate _timeSignature: number;\n\n\t///////////////////////////////////////////////////////////////////////\n\t// \tTIMELINE EVENTS\n\t//////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  All the events in an object to keep track by ID\n\t */\n\tprivate _scheduledEvents = {};\n\n\t/**\n\t * \tThe scheduled events.\n\t */\n\tprivate _timeline: Timeline<TransportEvent> = new Timeline();\n\n\t/**\n\t *  Repeated events\n\t */\n\tprivate _repeatedEvents: IntervalTimeline = new IntervalTimeline();\n\n\t/**\n\t *  All of the synced Signals\n\t */\n\tprivate _syncedSignals: SyncedSignalEvent[] = [];\n\n\t///////////////////////////////////////////////////////////////////////\n\t// \tSWING\n\t//////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  The subdivision of the swing\n\t */\n\tprivate _swingTicks: Ticks;\n\n\t/**\n\t *  The swing amount\n\t */\n\tprivate _swingAmount: NormalRange = 0;\n\n\tconstructor(options?: Partial<TransportOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Transport.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Transport.getDefaults(), arguments);\n\n\t\t// CLOCK/TEMPO\n\t\tthis._ppq = options.ppq;\n\t\tthis._clock = new Clock({\n\t\t\tcallback : this._processTick.bind(this),\n\t\t\tcontext: this.context,\n\t\t\tfrequency : 0,\n\t\t\tunits: \"bpm\",\n\t\t});\n\t\tthis._bindClockEvents();\n\t\tthis.bpm = this._clock.frequency;\n\t\tthis._clock.frequency.multiplier = options.ppq;\n\t\tthis.bpm.value = options.bpm;\n\t\treadOnly(this, \"bpm\");\n\t\tthis._timeSignature = options.timeSignature;\n\n\t\t// SWING\n\t\tthis._swingTicks = options.ppq / 2; // 8n\n\t}\n\n\tstatic getDefaults(): TransportOptions {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tbpm: 120,\n\t\t\tloopEnd: \"4m\" as Subdivision,\n\t\t\tloopStart: 0,\n\t\t\tppq: 192,\n\t\t\tswing: 0,\n\t\t\tswingSubdivision: \"8n\" as Subdivision,\n\t\t\ttimeSignature: 4,\n\t\t});\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////////\n\t// \tTICKS\n\t///////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  called on every tick\n\t *  @param  tickTime clock relative tick time\n\t *  @private\n\t */\n\tprivate _processTick(tickTime: Seconds, ticks: Ticks): void {\n\t\t// handle swing\n\t\tif (this._swingAmount > 0 &&\n\t\t\tticks % this._ppq !== 0 && // not on a downbeat\n\t\t\tticks % (this._swingTicks * 2) !== 0) {\n\t\t\t// add some swing\n\t\t\tconst progress = (ticks % (this._swingTicks * 2)) / (this._swingTicks * 2);\n\t\t\tconst amount = Math.sin((progress) * Math.PI) * this._swingAmount;\n\t\t\ttickTime += new TicksClass(this.context, this._swingTicks * 2 / 3).toSeconds() * amount;\n\t\t}\n\t\t// do the loop test\n\t\tif (this.loop) {\n\t\t\tif (ticks >= this._loopEnd) {\n\t\t\t\tthis.emit(\"loopEnd\", tickTime);\n\t\t\t\tthis._clock.setTicksAtTime(this._loopStart, tickTime);\n\t\t\t\tticks = this._loopStart;\n\t\t\t\tthis.emit(\"loopStart\", tickTime, this._clock.getSecondsAtTime(tickTime));\n\t\t\t\tthis.emit(\"loop\", tickTime);\n\t\t\t}\n\t\t}\n\t\t// invoke the timeline events scheduled on this tick\n\t\tthis._timeline.forEachAtTime(ticks, event => event.invoke(tickTime));\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////////\n\t// \tSCHEDULABLE EVENTS\n\t///////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Schedule an event along the timeline.\n\t * @param callback The callback to be invoked at the time.\n\t * @param time The time to invoke the callback at.\n\t * @return The id of the event which can be used for canceling the event.\n\t * @example\n\t * //trigger the callback when the Transport reaches the desired time\n\t * Transport.schedule(function(time){\n\t * \tenvelope.triggerAttack(time);\n\t * }, \"128i\");\n\t */\n\tschedule(callback: TransportCallback, time: TransportTime | TransportTimeClass): number {\n\t\tconst event = new TransportEvent(this, {\n\t\t\tcallback,\n\t\t\ttime : new TransportTimeClass(this.context, time).toTicks(),\n\t\t});\n\t\treturn this._addEvent(event, this._timeline);\n\t}\n\n\t/**\n\t * Schedule a repeated event along the timeline. The event will fire\n\t * at the `interval` starting at the `startTime` and for the specified\n\t * `duration`.\n\t * @param  callback   The callback to invoke.\n\t * @param  interval   The duration between successive callbacks. Must be a positive number.\n\t * @param  startTime  When along the timeline the events should start being invoked.\n\t * @param  duration How long the event should repeat.\n\t * @return  The ID of the scheduled event. Use this to cancel the event.\n\t * @example\n\t * //a callback invoked every eighth note after the first measure\n\t * Transport.scheduleRepeat(callback, \"8n\", \"1m\");\n\t */\n\tscheduleRepeat(\n\t\tcallback: TransportCallback,\n\t\tinterval: Time | TimeClass,\n\t\tstartTime?: TransportTime | TransportTimeClass,\n\t\tduration: Time = Infinity,\n\t): number {\n\t\tconst event = new TransportRepeatEvent(this, {\n\t\t\tcallback,\n\t\t\tduration : new TimeClass(this.context, duration).toTicks(),\n\t\t\tinterval: new TimeClass(this.context, interval).toTicks(),\n\t\t\ttime : new TransportTimeClass(this.context, startTime).toTicks(),\n\t\t});\n\t\t// kick it off if the Transport is started\n\t\t// @ts-ignore\n\t\treturn this._addEvent(event, this._repeatedEvents);\n\t}\n\n\t/**\n\t *  Schedule an event that will be removed after it is invoked.\n\t *  @param callback The callback to invoke once.\n\t *  @param time The time the callback should be invoked.\n\t *  @returns The ID of the scheduled event.\n\t */\n\tscheduleOnce(callback: TransportCallback, time: TransportTime | TransportTimeClass): number {\n\t\tconst event = new TransportEvent(this, {\n\t\t\tcallback,\n\t\t\tonce : true,\n\t\t\ttime : new TransportTimeClass(this.context, time).toTicks(),\n\t\t});\n\t\treturn this._addEvent(event, this._timeline);\n\t}\n\n\t/**\n\t * Clear the passed in event id from the timeline\n\t * @param eventId The id of the event.\n\t */\n\tclear(eventId: number): this {\n\t\tif (this._scheduledEvents.hasOwnProperty(eventId)) {\n\t\t\tconst item = this._scheduledEvents[eventId.toString()];\n\t\t\titem.timeline.remove(item.event);\n\t\t\titem.event.dispose();\n\t\t\tdelete this._scheduledEvents[eventId.toString()];\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add an event to the correct timeline. Keep track of the\n\t * timeline it was added to.\n\t * @returns the event id which was just added\n\t */\n\tprivate _addEvent(event: TransportEvent, timeline: Timeline<TransportEvent>): number {\n\t\tthis._scheduledEvents[event.id.toString()] = {\n\t\t\tevent,\n\t\t\ttimeline,\n\t\t};\n\t\ttimeline.add(event);\n\t\treturn event.id;\n\t}\n\n\t/**\n\t * Remove scheduled events from the timeline after\n\t * the given time. Repeated events will be removed\n\t * if their startTime is after the given time\n\t * @param after Clear all events after this time.\n\t */\n\tcancel(after: TransportTime = 0): this {\n\t\tconst computedAfter = this.toTicks(after);\n\t\tthis._timeline.forEachFrom(computedAfter, event => this.clear(event.id));\n\t\tthis._repeatedEvents.forEachFrom(computedAfter, event => this.clear(event.id));\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////////\n\t// \tSTART/STOP/PAUSE\n\t///////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Bind start/stop/pause events from the clock and emit them.\n\t */\n\tprivate _bindClockEvents(): void {\n\t\tthis._clock.on(\"start\", (time, offset) => {\n\t\t\toffset = new TicksClass(this.context, offset).toSeconds();\n\t\t\tthis.emit(\"start\", time, offset);\n\t\t});\n\n\t\tthis._clock.on(\"stop\", (time) => {\n\t\t\tthis.emit(\"stop\", time);\n\t\t});\n\n\t\tthis._clock.on(\"pause\", (time) => {\n\t\t\tthis.emit(\"pause\", time);\n\t\t});\n\t}\n\n\t/**\n\t *  Returns the playback state of the source, either \"started\", \"stopped\", or \"paused\"\n\t */\n\tget state(): PlaybackState {\n\t\treturn this._clock.getStateAtTime(this.now());\n\t}\n\n\t/**\n\t * Start the transport and all sources synced to the transport.\n\t * @param  time The time when the transport should start.\n\t * @param  offset The timeline offset to start the transport.\n\t * @example\n\t * //start the transport in one second starting at beginning of the 5th measure.\n\t * Transport.start(\"+1\", \"4:0:0\");\n\t */\n\tstart(time?: Time, offset?: TransportTime): this {\n\t\tlet offsetTicks;\n\t\tif (isDefined(offset)) {\n\t\t\toffsetTicks = this.toTicks(offset);\n\t\t}\n\t\t// start the clock\n\t\tthis._clock.start(time, offsetTicks);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the transport and all sources synced to the transport.\n\t * @param time The time when the transport should stop.\n\t * @example\n\t * Transport.stop();\n\t */\n\tstop(time?: Time): this {\n\t\tthis._clock.stop(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Pause the transport and all sources synced to the transport.\n\t */\n\tpause(time?: Time): this {\n\t\tthis._clock.pause(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Toggle the current state of the transport. If it is\n\t * started, it will stop it, otherwise it will start the Transport.\n\t * @param  time The time of the event\n\t */\n\ttoggle(time?: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tif (this._clock.getStateAtTime(time) !== \"started\") {\n\t\t\tthis.start(time);\n\t\t} else {\n\t\t\tthis.stop(time);\n\t\t}\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////////\n\t// \tSETTERS/GETTERS\n\t///////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * The time signature as just the numerator over 4.\n\t * For example 4/4 would be just 4 and 6/8 would be 3.\n\t * @example\n\t * //common time\n\t * Transport.timeSignature = 4;\n\t * // 7/8\n\t * Transport.timeSignature = [7, 8];\n\t * //this will be reduced to a single number\n\t * Transport.timeSignature; //returns 3.5\n\t */\n\tget timeSignature(): TimeSignature {\n\t\treturn this._timeSignature;\n\t}\n\tset timeSignature(timeSig: TimeSignature) {\n\t\tif (isArray(timeSig)) {\n\t\t\ttimeSig = (timeSig[0] / timeSig[1]) * 4;\n\t\t}\n\t\tthis._timeSignature = timeSig;\n\t}\n\n\t/**\n\t * When the Transport.loop = true, this is the starting position of the loop.\n\t */\n\tget loopStart(): Time {\n\t\treturn Time(this._loopStart, \"i\").toSeconds();\n\t}\n\tset loopStart(startPosition: Time) {\n\t\tthis._loopStart = this.toTicks(startPosition);\n\t}\n\n\t/**\n\t * When the Transport.loop = true, this is the ending position of the loop.\n\t */\n\tget loopEnd(): Time {\n\t\treturn Time(this._loopEnd, \"i\").toSeconds();\n\t}\n\tset loopEnd(endPosition: Time) {\n\t\tthis._loopEnd = this.toTicks(endPosition);\n\t}\n\n\t/**\n\t * Set the loop start and stop at the same time.\n\t * @example\n\t * //loop over the first measure\n\t * Transport.setLoopPoints(0, \"1m\");\n\t * Transport.loop = true;\n\t */\n\tsetLoopPoints(startPosition: TransportTime, endPosition: TransportTime): this {\n\t\tthis.loopStart = startPosition;\n\t\tthis.loopEnd = endPosition;\n\t\treturn this;\n\t}\n\n\t/**\n\t * The swing value. Between 0-1 where 1 equal to the note + half the subdivision.\n\t */\n\tget swing(): NormalRange {\n\t\treturn this._swingAmount;\n\t}\n\tset swing(amount: NormalRange) {\n\t\t// scale the values to a normal range\n\t\tthis._swingAmount = amount;\n\t}\n\n\t/**\n\t * Set the subdivision which the swing will be applied to.\n\t * The default value is an 8th note. Value must be less\n\t * than a quarter note.\n\t */\n\tget swingSubdivision(): Subdivision {\n\t\treturn new TicksClass(this.context, this._swingTicks).toNotation();\n\t}\n\tset swingSubdivision(subdivision: Subdivision) {\n\t\tthis._swingTicks = this.toTicks(subdivision);\n\t}\n\n\t/**\n\t *  The Transport's position in Bars:Beats:Sixteenths.\n\t *  Setting the value will jump to that position right away.\n\t */\n\tget position(): BarsBeatsSixteenths | Time {\n\t\tconst now = this.now();\n\t\tconst ticks = this._clock.getTicksAtTime(now);\n\t\treturn new TicksClass(this.context, ticks).toBarsBeatsSixteenths();\n\t}\n\tset position(progress: Time) {\n\t\tconst ticks = this.toTicks(progress);\n\t\tthis.ticks = ticks;\n\t}\n\n\t/**\n\t *  The Transport's position in seconds\n\t *  Setting the value will jump to that position right away.\n\t */\n\tget seconds(): Seconds {\n\t\treturn this._clock.seconds;\n\t}\n\n\tset seconds(s: Seconds) {\n\t\tconst now = this.now();\n\t\tconst ticks = this._clock.frequency.timeToTicks(s, now);\n\t\tthis.ticks = ticks;\n\t}\n\n\t/**\n\t *  The Transport's loop position as a normalized value. Always\n\t *  returns 0 if the transport if loop is not true.\n\t */\n\tget progress(): NormalRange {\n\t\tif (this.loop) {\n\t\t\tconst now = this.now();\n\t\t\tconst ticks = this._clock.getTicksAtTime(now);\n\t\t\treturn (ticks - this._loopStart) / (this._loopEnd - this._loopStart);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t *  The transports current tick position.\n\t */\n\tget ticks(): Ticks {\n\t\treturn this._clock.ticks;\n\t}\n\tset ticks(t: Ticks) {\n\t\tif (this._clock.ticks !== t) {\n\t\t\tconst now = this.now();\n\t\t\t// stop everything synced to the transport\n\t\t\tif (this.state === \"started\") {\n\t\t\t\tthis.emit(\"stop\", now);\n\t\t\t\tthis._clock.setTicksAtTime(t, now);\n\t\t\t\t// restart it with the new time\n\t\t\t\tthis.emit(\"start\", now, this.seconds);\n\t\t\t} else {\n\t\t\t\tthis._clock.setTicksAtTime(t, now);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Get the clock's ticks at the given time.\n\t * @param  time  When to get the tick value\n\t * @return The tick value at the given time.\n\t */\n\tgetTicksAtTime(time: Time): Ticks {\n\t\treturn Math.round(this._clock.getTicksAtTime(time));\n\t}\n\n\t/**\n\t *  Return the elapsed seconds at the given time.\n\t *  @param  time  When to get the elapsed seconds\n\t *  @return  The number of elapsed seconds\n\t */\n\tgetSecondsAtTime(time: Time): Seconds {\n\t\treturn this._clock.getSecondsAtTime(time);\n\t}\n\n\t/**\n\t *  Pulses Per Quarter note. This is the smallest resolution\n\t *  the Transport timing supports. This should be set once\n\t *  on initialization and not set again. Changing this value\n\t *  after other objects have been created can cause problems.\n\t */\n\tget PPQ(): number {\n\t\treturn this._clock.frequency.multiplier;\n\t}\n\tset PPQ(ppq: number) {\n\t\tthis._clock.frequency.multiplier = ppq;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////////\n\t// \tSYNCING\n\t///////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Returns the time aligned to the next subdivision\n\t * of the Transport. If the Transport is not started,\n\t * it will return 0.\n\t * Note: this will not work precisely during tempo ramps.\n\t * @param  subdivision  The subdivision to quantize to\n\t * @return  The context time of the next subdivision.\n\t * @example\n\t * Transport.start(); //the transport must be started\n\t * Transport.nextSubdivision(\"4n\");\n\t */\n\tnextSubdivision(subdivision?: Time): Seconds {\n\t\tsubdivision = this.toTicks(subdivision);\n\t\tif (this.state !== \"started\") {\n\t\t\t// if the transport's not started, return 0\n\t\t\treturn 0;\n\t\t} else {\n\t\t\tconst now = this.now();\n\t\t\t// the remainder of the current ticks and the subdivision\n\t\t\tconst transportPos = this.getTicksAtTime(now);\n\t\t\tconst remainingTicks = subdivision - transportPos % subdivision;\n\t\t\treturn this._clock.nextTickTime(remainingTicks, now);\n\t\t}\n\t}\n\n\t/**\n\t *  Attaches the signal to the tempo control signal so that\n\t *  any changes in the tempo will change the signal in the same\n\t *  ratio.\n\t *\n\t *  @param signal\n\t *  @param ratio Optionally pass in the ratio between the two signals.\n\t * \t\t\t\tOtherwise it will be computed based on their current values.\n\t */\n\tsyncSignal(signal: Signal<any>, ratio?: number): this {\n\t\tif (!ratio) {\n\t\t\t// get the sync ratio\n\t\t\tconst now = this.now();\n\t\t\tif (signal.getValueAtTime(now) !== 0) {\n\t\t\t\tconst bpm = this.bpm.getValueAtTime(now);\n\t\t\t\tconst computedFreq = 1 / (60 / bpm / this.PPQ);\n\t\t\t\tratio = signal.getValueAtTime(now) / computedFreq;\n\t\t\t} else {\n\t\t\t\tratio = 0;\n\t\t\t}\n\t\t}\n\t\tconst ratioSignal = new Gain(ratio);\n\t\t// @ts-ignore\n\t\tthis.bpm.connect(ratioSignal);\n\t\t// @ts-ignore\n\t\tratioSignal.connect(signal._param);\n\t\tthis._syncedSignals.push({\n\t\t\tinitial : signal.value,\n\t\t\tratio : ratioSignal,\n\t\t\tsignal,\n\t\t});\n\t\tsignal.value = 0;\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Unsyncs a previously synced signal from the transport's control.\n\t *  See Transport.syncSignal.\n\t */\n\tunsyncSignal(signal: Signal<any>): this {\n\t\tfor (let i = this._syncedSignals.length - 1; i >= 0; i--) {\n\t\t\tconst syncedSignal = this._syncedSignals[i];\n\t\t\tif (syncedSignal.signal === signal) {\n\t\t\t\tsyncedSignal.ratio.dispose();\n\t\t\t\tsyncedSignal.signal.value = syncedSignal.initial;\n\t\t\t\tthis._syncedSignals.splice(i, 1);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._clock.dispose();\n\t\twritable(this, \"bpm\");\n\t\tthis._timeline.dispose();\n\t\tthis._repeatedEvents.dispose();\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////\n\t// EMITTER MIXIN TO SATISFY COMPILER\n\t///////////////////////////////////////////////////////////////////////\n\n\ton!: (event: TransportEventNames, callback: (...args: any[]) => void) => this;\n\tonce!: (event: TransportEventNames, callback: (...args: any[]) => void) => this;\n\toff!: (event: TransportEventNames, callback?: ((...args: any[]) => void) | undefined) => this;\n\temit!: (event: any, ...args: any[]) => this;\n}\n\nEmitter.mixin(Transport);\n\n///////////////////////////////////////////////////////////////////////////////\n// \tINITIALIZATION\n///////////////////////////////////////////////////////////////////////////////\n\nonContextInit(context => {\n\tcontext.transport = new Transport({ context });\n});\n\nonContextClose(context => {\n\tcontext.transport.dispose();\n});\n","import { Volume } from \"../component/channel/Volume\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { defaultArg, optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp, readOnly } from \"../core/util/Interface\";\nimport { BasicPlaybackState, StateTimeline } from \"../core/util/StateTimeline\";\nimport { isUndef } from \"../core/util/TypeCheck\";\n\nexport interface SourceOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n\tmute: boolean;\n}\n\n/**\n *  @class  Base class for sources. Sources have start/stop methods\n *          and the ability to be synced to the\n *          start/stop of this.context.transport.\n *\n *  @constructor\n *  @extends {Tone.AudioNode}\n *  @example\n * //Multiple state change events can be chained together,\n * //but must be set in the correct order and with ascending times\n *\n * // OK\n * state.start().stop(\"+0.2\");\n * // AND\n * state.start().stop(\"+0.2\").start(\"+0.4\").stop(\"+0.7\")\n *\n * // BAD\n * state.stop(\"+0.2\").start();\n * // OR\n * state.start(\"+0.3\").stop(\"+0.2\");\n *\n */\nexport abstract class Source<Options extends SourceOptions> extends ToneAudioNode<Options> {\n\n\t/**\n\t *  The output volume node\n\t *  @type  {Tone.Volume}\n\t *  @private\n\t */\n\tprivate _volume: Volume = new Volume({\n\t\tcontext: this.context,\n\t});\n\n\t/**\n\t * The output note\n\t */\n\toutput = this._volume;\n\tprotected _internalChannels = [this.output];\n\n\t/**\n\t * There is no input\n\t */\n\tinput = undefined;\n\n\t/**\n\t * The volume of the output in decibels.\n\t * @example\n\t * source.volume.value = -6;\n\t */\n\tvolume = this._volume.volume;\n\n\t/**\n\t * \tKeep track of the scheduled state.\n\t *  @type {Tone.StateTimeline}\n\t *  @private\n\t */\n\tprotected _state: StateTimeline<{\n\t\tduration?: Seconds;\n\t\toffset?: Seconds;\n\t\t/**\n\t\t * Either the buffer is explicitly scheduled to end using the stop method,\n\t\t * or it's implicitly ended when the buffer is over.\n\t\t */\n\t\timplicitEnd?: boolean;\n\t}> = new StateTimeline(\"stopped\");\n\n\t/**\n\t *  The synced `start` callback function from the transport\n\t *  @type {Function}\n\t *  @private\n\t */\n\tprotected _synced = false;\n\n\t/**\n\t *  Keep track of all of the scheduled event ids\n\t */\n\tprivate _scheduled: number[] = [];\n\n\t/**\n\t * Placeholder functions for syncing/unsyncing to transport\n\t */\n\tprivate _syncedStart: (time: Seconds, offset: Seconds) => void = noOp;\n\tprivate _syncedStop: (time: Seconds) => void = noOp;\n\n\tconstructor(options: SourceOptions) {\n\t\tsuper(options);\n\t\treadOnly(this, \"volume\");\n\t\tthis._state.memory = 100;\n\t\tthis.volume.setValueAtTime(options.volume, 0);\n\t\t// set mute initially\n\t\tthis.mute = options.mute;\n\n\t}\n\n\tstatic getDefaults(): SourceOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmute: false,\n\t\t\tnumberOfOutputs: 1,\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t *  Returns the playback state of the source, either \"started\" or \"stopped\".\n\t */\n\tget state(): BasicPlaybackState {\n\t\tif (this._synced) {\n\t\t\tif (this.context.transport.state === \"started\") {\n\t\t\t\treturn this._state.getValueAtTime(this.context.transport.seconds) as BasicPlaybackState;\n\t\t\t} else {\n\t\t\t\treturn \"stopped\";\n\t\t\t}\n\t\t} else {\n\t\t\treturn this._state.getValueAtTime(this.now()) as BasicPlaybackState;\n\t\t}\n\t}\n\n\t/**\n\t * Mute the output.\n\t * @example\n\t * //mute the output\n\t * source.mute = true;\n\t */\n\tget mute(): boolean {\n\t\treturn this._volume.mute;\n\t}\n\tset mute(mute: boolean) {\n\t\tthis._volume.mute = mute;\n\t}\n\n\t// overwrite these functions\n\tprotected abstract _start(time: Time, offset?: Time, duration?: Time): void;\n\tprotected abstract _stop(time: Time): void;\n\tabstract restart(time: Time, offset?: Time, duration?: Time): this;\n\n\t/**\n\t *  Start the source at the specified time. If no time is given,\n\t *  start the source now.\n\t *  @param  time When the source should be started.\n\t *  @returns {Source} this\n\t *  @example\n\t * source.start(\"+0.5\"); //starts the source 0.5 seconds from now\n\t */\n\tstart(time?: Time, offset?: Time, duration: Time = 0): this {\n\t\tif (isUndef(time) && this._synced) {\n\t\t\ttime = this.context.transport.seconds;\n\t\t} else {\n\t\t\ttime = this.toSeconds(time);\n\t\t}\n\t\t// if it's started, stop it and restart it\n\t\tif (this._state.getValueAtTime(time) === \"started\") {\n\t\t\tthis._state.cancel(time);\n\t\t\tthis._state.setStateAtTime(\"started\", time);\n\t\t\tthis.restart(time, offset, duration);\n\t\t} else {\n\t\t\tthis._state.setStateAtTime(\"started\", time);\n\t\t\tif (this._synced) {\n\t\t\t\t// add the offset time to the event\n\t\t\t\tconst event = this._state.get(time);\n\t\t\t\tif (event) {\n\t\t\t\t\tevent.offset = this.toSeconds(defaultArg(offset, 0));\n\t\t\t\t\tevent.duration = this.toSeconds(duration);\n\t\t\t\t}\n\t\t\t\tconst sched = this.context.transport.schedule(t => {\n\t\t\t\t\tthis._start(t, offset, duration);\n\t\t\t\t}, time);\n\t\t\t\tthis._scheduled.push(sched);\n\n\t\t\t\t// if it's already started\n\t\t\t\tif (this.context.transport.state === \"started\") {\n\t\t\t\t\tthis._syncedStart(this.now(), this.context.transport.seconds);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._start.apply(this, arguments);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Stop the source at the specified time. If no time is given,\n\t *  stop the source now.\n\t *  @param  {Time} [time=now] When the source should be stopped.\n\t *  @returns {Source} this\n\t *  @example\n\t * source.stop(); // stops the source immediately\n\t */\n\tstop(time?: Time): this {\n\t\tif (isUndef(time) && this._synced) {\n\t\t\ttime = this.context.transport.seconds;\n\t\t} else {\n\t\t\ttime = this.toSeconds(time);\n\t\t}\n\t\tif (!this._synced) {\n\t\t\tthis._stop.apply(this, arguments);\n\t\t} else {\n\t\t\tconst sched = this.context.transport.schedule(this._stop.bind(this), time);\n\t\t\tthis._scheduled.push(sched);\n\t\t}\n\t\tthis._state.cancel(time);\n\t\tthis._state.setStateAtTime(\"stopped\", time);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Sync the source to the Transport so that all subsequent\n\t *  calls to `start` and `stop` are synced to the TransportTime\n\t *  instead of the AudioContext time.\n\t *\n\t * @example\n\t * //sync the source so that it plays between 0 and 0.3 on the Transport's timeline\n\t * source.sync().start(0).stop(0.3);\n\t * //start the transport.\n\t * this.context.transport.start();\n\t *\n\t * @example\n\t * //start the transport with an offset and the sync'ed sources\n\t * //will start in the correct position\n\t * source.sync().start(0.1);\n\t * //the source will be invoked with an offset of 0.4 = (0.5 - 0.1)\n\t * this.context.transport.start(\"+0.5\", 0.5);\n\t */\n\tsync(): this {\n\t\tif (!this._synced) {\n\t\t\tthis._synced = true;\n\t\t\tthis._syncedStart = (time, offset) => {\n\t\t\t\tif (offset > 0) {\n\t\t\t\t\t// get the playback state at that time\n\t\t\t\t\tconst stateEvent = this._state.get(offset);\n\t\t\t\t\t// listen for start events which may occur in the middle of the sync'ed time\n\t\t\t\t\tif (stateEvent && stateEvent.state === \"started\" && stateEvent.time !== offset) {\n\t\t\t\t\t\t// get the offset\n\t\t\t\t\t\tconst startOffset = offset - this.toSeconds(stateEvent.time);\n\t\t\t\t\t\tlet duration;\n\t\t\t\t\t\tif (stateEvent.duration) {\n\t\t\t\t\t\t\tduration = this.toSeconds(stateEvent.duration) - startOffset;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._start(time, this.toSeconds(stateEvent.offset) + startOffset, duration);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis._syncedStop = time => {\n\t\t\t\tconst seconds = this.context.transport.getSecondsAtTime(Math.max(time - this.sampleTime, 0));\n\t\t\t\tif (this._state.getValueAtTime(seconds) === \"started\") {\n\t\t\t\t\tthis._stop(time);\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis.context.transport.on(\"start\", this._syncedStart);\n\t\t\tthis.context.transport.on(\"loopStart\", this._syncedStart);\n\t\t\tthis.context.transport.on(\"stop\", this._syncedStop);\n\t\t\tthis.context.transport.on(\"pause\", this._syncedStop);\n\t\t\tthis.context.transport.on(\"loopEnd\", this._syncedStop);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Unsync the source to the Transport. See Source.sync\n\t */\n\tunsync(): this {\n\t\tif (this._synced) {\n\t\t\tthis.context.transport.off(\"stop\", this._syncedStop);\n\t\t\tthis.context.transport.off(\"pause\", this._syncedStop);\n\t\t\tthis.context.transport.off(\"loopEnd\", this._syncedStop);\n\t\t\tthis.context.transport.off(\"start\", this._syncedStart);\n\t\t\tthis.context.transport.off(\"loopStart\", this._syncedStart);\n\t\t}\n\t\tthis._synced = false;\n\t\t// clear all of the scheduled ids\n\t\tthis._scheduled.forEach(id => this.context.transport.clear(id));\n\t\tthis._scheduled = [];\n\t\tthis._state.cancel(0);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.unsync();\n\t\tthis._volume.dispose();\n\t\tthis._state.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../core/context/Gain\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { noOp } from \"../core/util/Interface\";\nimport { BasicPlaybackState } from \"../core/util/StateTimeline\";\n\nexport type OneShotSourceCurve = \"linear\" | \"exponential\";\n\nexport interface OneShotSourceOptions extends ToneAudioNodeOptions {\n\tonended: () => void;\n\tfadeIn: Time;\n\tfadeOut: Time;\n\tcurve: OneShotSourceCurve;\n}\n\nexport abstract class OneShotSource<Options extends ToneAudioNodeOptions> extends ToneAudioNode<Options> {\n\n\t/**\n\t *  The callback to invoke after the\n\t *  source is done playing.\n\t */\n\tonended: () => void = noOp;\n\n\t/**\n\t * Sources do not have input nodes\n\t */\n\tinput: undefined;\n\n\t/**\n\t *  The start time\n\t */\n\tprotected _startTime: number = -1;\n\n\t/**\n\t *  The stop time\n\t */\n\tprotected _stopTime: number = -1;\n\n\t/**\n\t * The id of the timeout\n\t */\n\tprivate _timeout: number = -1;\n\n\t/**\n\t * The public output node\n\t */\n\toutput: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain : 0,\n\t});\n\n\t/**\n\t *  The output gain node.\n\t */\n\tprotected _gainNode = this.output;\n\n\t/**\n\t *  The fadeIn time of the amplitude envelope.\n\t */\n\tprotected _fadeIn: Time;\n\n\t/**\n\t *  The fadeOut time of the amplitude envelope.\n\t */\n\tprotected _fadeOut: Time;\n\n\t/**\n\t * The curve applied to the fades, either \"linear\" or \"exponential\"\n\t */\n\tprotected _curve: OneShotSourceCurve;\n\n\tconstructor(options: OneShotSourceOptions) {\n\t\tsuper(options);\n\n\t\tthis._fadeIn = options.fadeIn;\n\t\tthis._fadeOut = options.fadeOut;\n\t\tthis._curve = options.curve;\n\t}\n\n\tstatic getDefaults(): OneShotSourceOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tcurve: \"linear\" as OneShotSourceCurve,\n\t\t\tfadeIn : 0,\n\t\t\tfadeOut: 0,\n\t\t\tonended : noOp,\n\t\t});\n\t}\n\n\t/**\n\t * Stop the source node\n\t */\n\tprotected abstract _stopSource(time: Seconds): void;\n\n\t/**\n\t * Start the source node at the given time\n\t * @param  time When to start the node\n\t */\n\tprotected abstract start(time?: Time): this;\n\t/**\n\t * Start the source at the given time\n\t * @param  time When to start the source\n\t */\n\tprotected _startGain(time: Seconds, gain: GainFactor = 1): this {\n\t\tthis.assert(this._startTime === -1, \"Source cannot be started more than once\");\n\t\t// apply a fade in envelope\n\t\tconst fadeInTime = this.toSeconds(this._fadeIn);\n\n\t\t// record the start time\n\t\tthis._startTime = time + fadeInTime;\n\t\tthis._startTime = Math.max(this._startTime, this.context.currentTime);\n\n\t\t// schedule the envelope\n\t\tif (fadeInTime > 0) {\n\t\t\tthis._gainNode.gain.setValueAtTime(0, time);\n\t\t\tif (this._curve === \"linear\") {\n\t\t\t\tthis._gainNode.gain.linearRampToValueAtTime(gain, time + fadeInTime);\n\t\t\t} else {\n\t\t\t\tthis._gainNode.gain.exponentialApproachValueAtTime(gain, time, fadeInTime);\n\t\t\t}\n\t\t} else {\n\t\t\tthis._gainNode.gain.setValueAtTime(gain, time);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the source node at the given time.\n\t * @param time When to stop the source\n\t */\n\tstop(time?: Time): this {\n\t\tthis._stopGain(this.toSeconds(time));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the source at the given time\n\t * @param  time When to stop the source\n\t */\n\tprotected _stopGain(time: Seconds): this {\n\t\tthis.assert(this._startTime !== -1, \"'start' must be called before 'stop'\");\n\t\t// cancel the previous stop\n\t\tthis.cancelStop();\n\n\t\t// the fadeOut time\n\t\tconst fadeOutTime = this.toSeconds(this._fadeOut);\n\n\t\t// schedule the stop callback\n\t\tthis._stopTime = this.toSeconds(time) + fadeOutTime;\n\t\tthis._stopTime = Math.max(this._stopTime, this.context.currentTime);\n\t\tif (fadeOutTime > 0) {\n\t\t\t// start the fade out curve at the given time\n\t\t\tif (this._curve === \"linear\") {\n\t\t\t\tthis._gainNode.gain.linearRampTo(0, fadeOutTime, time);\n\t\t\t} else {\n\t\t\t\tthis._gainNode.gain.targetRampTo(0, fadeOutTime, time);\n\t\t\t}\n\t\t} else {\n\t\t\t// stop any ongoing ramps, and set the value to 0\n\t\t\tthis._gainNode.gain.cancelAndHoldAtTime(time);\n\t\t\tthis._gainNode.gain.setValueAtTime(0, time);\n\t\t}\n\t\tthis.context.clearTimeout(this._timeout);\n\t\tthis._timeout = this.context.setTimeout(() => {\n\t\t\t// allow additional time for the exponential curve to fully decay\n\t\t\tconst additionalTail = this._curve === \"exponential\" ? fadeOutTime * 2 : 0;\n\t\t\tthis._stopSource(this.now() + additionalTail);\n\t\t\tthis._onended();\n\t\t}, this._stopTime - this.context.currentTime);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Invoke the onended callback\n\t */\n\tprotected _onended(): void {\n\t\tif (this.onended !== noOp) {\n\t\t\tthis.onended();\n\t\t\t// overwrite onended to make sure it only is called once\n\t\t\tthis.onended = noOp;\n\t\t\t// dispose when it's ended to free up for garbage collection\n\t\t\tsetTimeout(() => this.dispose(), 1000);\n\t\t}\n\t}\n\n\t/**\n\t *  Get the playback state at the given time\n\t */\n\tgetStateAtTime = function(time: Time): BasicPlaybackState {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._startTime !== -1 && computedTime >= this._startTime &&\n\t\t\t(this._stopTime === -1 || computedTime <= this._stopTime)) {\n\t\t\treturn \"started\";\n\t\t} else {\n\t\t\treturn \"stopped\";\n\t\t}\n\t};\n\n\t/**\n\t * Get the playback state at the current time\n\t */\n\tget state(): BasicPlaybackState {\n\t\treturn this.getStateAtTime(this.now());\n\t}\n\n\t/**\n\t *  Cancel a scheduled stop event\n\t */\n\tcancelStop(): this {\n\t\tthis.assert(this._startTime !== -1, \"Source is not started\");\n\t\t// cancel the stop envelope\n\t\tthis._gainNode.gain.cancelScheduledValues(this._startTime + this.sampleTime);\n\t\tthis.context.clearTimeout(this._timeout);\n\t\tthis._stopTime = -1;\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._gainNode.disconnect();\n\t\treturn this;\n\t}\n}\n","import { connect } from \"../../core/Connect\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp } from \"../../core/util/Interface\";\nimport { isDefined } from \"../../core/util/TypeCheck\";\nimport { OneShotSource, OneShotSourceCurve, OneShotSourceOptions } from \"../OneShotSource\";\n\nexport type ToneBufferSourceCurve = OneShotSourceCurve;\n\ninterface ToneBufferSourceOptions extends OneShotSourceOptions {\n\tbuffer: ToneAudioBuffer;\n\tcurve: ToneBufferSourceCurve;\n\tplaybackRate: Positive;\n\tfadeIn: Time;\n\tfadeOut: Time;\n\tloopStart: Time;\n\tloopEnd: Time;\n\tloop: boolean;\n\tonload: () => void;\n}\n\n/**\n *  Wrapper around the native BufferSourceNode.\n *  @param  buffer   The buffer to play\n *  @param  onended  The callback to invoke when the buffer is done playing.\n */\nexport class ToneBufferSource extends OneShotSource<ToneBufferSourceOptions> {\n\n\tname = \"ToneBufferSource\";\n\n\t/**\n\t *  The oscillator\n\t */\n\tprivate _source = this.context.createBufferSource();\n\tprotected _internalChannels = [this._gainNode, this._source];\n\n\t/**\n\t *  The frequency of the oscillator\n\t */\n\treadonly playbackRate: Param<Positive>;\n\n\t/**\n\t * The private instance of the buffer object\n\t */\n\tprivate _buffer: ToneAudioBuffer;\n\n\t/**\n\t * indicators if the source has started/stopped\n\t */\n\tprivate _sourceStarted: boolean = false;\n\tprivate _sourceStopped: boolean = false;\n\n\tconstructor(buffer?: ToneAudioBuffer | AudioBuffer | string, onload?: () => void);\n\tconstructor(options?: Partial<ToneBufferSourceOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(ToneBufferSource.getDefaults(), arguments, [\"buffer\", \"onload\"]));\n\t\tconst options = optionsFromArguments(ToneBufferSource.getDefaults(), arguments, [\"buffer\", \"onload\"]);\n\n\t\tconnect(this._source, this._gainNode);\n\t\tthis._source.onended = () => this._stopSource();\n\n\t\t/**\n\t\t *  The playbackRate of the buffer\n\t\t */\n\t\tthis.playbackRate = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam : this._source.playbackRate,\n\t\t\tunits : \"positive\",\n\t\t\tvalue : options.playbackRate,\n\t\t});\n\n\t\t// set some values initially\n\t\tthis.loop = options.loop;\n\t\tthis.loopStart = options.loopStart;\n\t\tthis.loopEnd = options.loopEnd;\n\t\tthis._buffer = new ToneAudioBuffer(options.buffer, options.onload);\n\t}\n\n\tstatic getDefaults(): ToneBufferSourceOptions {\n\t\treturn Object.assign(OneShotSource.getDefaults(), {\n\t\t\tbuffer: new ToneAudioBuffer(),\n\t\t\tloop: false,\n\t\t\tloopEnd : 0,\n\t\t\tloopStart : 0,\n\t\t\tonload: noOp,\n\t\t\tplaybackRate : 1,\n\t\t});\n\t}\n\n\t/**\n\t *  The fadeIn time of the amplitude envelope.\n\t */\n\tget fadeIn(): Time {\n\t\treturn this._fadeIn;\n\t}\n\tset fadeIn(t: Time) {\n\t\tthis._fadeIn = t;\n\t}\n\n\t/**\n\t *  The fadeOut time of the amplitude envelope.\n\t */\n\tget fadeOut(): Time {\n\t\treturn this._fadeOut;\n\t}\n\tset fadeOut(t: Time) {\n\t\tthis._fadeOut = t;\n\t}\n\n\t/**\n\t * The curve applied to the fades, either \"linear\" or \"exponential\"\n\t */\n\tget curve(): ToneBufferSourceCurve {\n\t\treturn this._curve;\n\t}\n\tset curve(t) {\n\t\tthis._curve = t;\n\t}\n\n\t/**\n\t *  Start the buffer\n\t *  @param  time When the player should start.\n\t *  @param  offset The offset from the beginning of the sample to start at.\n\t *  @param  duration How long the sample should play. If no duration\n\t *                   is given, it will default to the full length\n\t *                   of the sample (minus any offset)\n\t *  @param  gain  The gain to play the buffer back at.\n\t */\n\tstart(time?: Time, offset?: Time, duration?: Time, gain: GainFactor = 1): this {\n\t\tthis.assert(this.buffer.loaded, \"buffer is either not set or not loaded\");\n\t\ttime = this.toSeconds(time);\n\n\t\t// apply the gain envelope\n\t\tthis._startGain(time, gain);\n\n\t\t// if it's a loop the default offset is the loopstart point\n\t\tif (this.loop) {\n\t\t\toffset = defaultArg(offset, this.loopStart);\n\t\t} else {\n\t\t\t// otherwise the default offset is 0\n\t\t\toffset = defaultArg(offset, 0);\n\t\t}\n\t\toffset = this.toSeconds(offset);\n\t\t// make sure the offset is not less than 0\n\t\toffset = Math.max(offset, 0);\n\n\t\t// start the buffer source\n\t\tif (this.loop) {\n\t\t\t// modify the offset if it's greater than the loop time\n\t\t\tconst loopEnd = this.toSeconds(this.loopEnd) || this.buffer.duration;\n\t\t\tconst loopStart = this.toSeconds(this.loopStart);\n\t\t\tconst loopDuration = loopEnd - loopStart;\n\t\t\t// move the offset back\n\t\t\tif (offset >= loopEnd) {\n\t\t\t\toffset = ((offset - loopStart) % loopDuration) + loopStart;\n\t\t\t}\n\t\t}\n\n\t\t// this.buffer.loaded would have return false if the AudioBuffer was undefined\n\t\tthis._source.buffer = this.buffer.get() as AudioBuffer;\n\t\tthis._source.loopEnd = this.toSeconds(this.loopEnd) || this.buffer.duration;\n\t\tif (offset < this.buffer.duration) {\n\t\t\tthis._sourceStarted = true;\n\t\t\tthis._source.start(time, offset);\n\t\t}\n\n\t\t// if a duration is given, schedule a stop\n\t\tif (isDefined(duration)) {\n\t\t\tlet computedDur = this.toSeconds(duration);\n\t\t\t// make sure it's never negative\n\t\t\tcomputedDur = Math.max(computedDur, 0);\n\t\t\tthis.stop(time + computedDur);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\tprotected _stopSource(time?: Seconds): void {\n\t\tif (!this._sourceStopped) {\n\t\t\tthis._sourceStopped = true;\n\t\t\tthis._source.stop(this.toSeconds(time));\n\t\t\tthis._onended();\n\t\t}\n\t}\n\n\t/**\n\t * If loop is true, the loop will start at this position.\n\t */\n\tget loopStart(): Time {\n\t\treturn this._source.loopStart;\n\t}\n\tset loopStart(loopStart: Time) {\n\t\tthis._source.loopStart = this.toSeconds(loopStart);\n\t}\n\n\t/**\n\t * If loop is true, the loop will end at this position.\n\t */\n\tget loopEnd(): Time {\n\t\treturn this._source.loopEnd;\n\t}\n\tset loopEnd(loopEnd: Time) {\n\t\tthis._source.loopEnd = this.toSeconds(loopEnd);\n\t}\n\n\t/**\n\t * The audio buffer belonging to the player.\n\t */\n\tget buffer(): ToneAudioBuffer {\n\t\treturn this._buffer;\n\t}\n\tset buffer(buffer: ToneAudioBuffer) {\n\t\tthis._buffer.set(buffer);\n\t}\n\n\t/**\n\t * If the buffer should loop once it's over.\n\t */\n\tget loop(): boolean {\n\t\treturn this._source.loop;\n\t}\n\tset loop(loop: boolean) {\n\t\tthis._source.loop = loop;\n\t\tif (this._sourceStarted) {\n\t\t\tthis.cancelStop();\n\t\t}\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._source.onended = null;\n\t\tthis._source.disconnect();\n\t\tthis._buffer.dispose();\n\t\tthis.playbackRate.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioBuffer } from \"../core/context/ToneAudioBuffer\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Source, SourceOptions } from \"../source/Source\";\nimport { ToneBufferSource } from \"./buffer/BufferSource\";\n\ntype NoiseType = \"white\" | \"brown\" | \"pink\";\n\ninterface NoiseOptions extends SourceOptions {\n\ttype: NoiseType;\n\tplaybackRate: Positive;\n}\n\n/**\n * Noise is a noise generator. It uses looped noise buffers to save on performance.\n * Noise supports the noise types: \"pink\", \"white\", and \"brown\". Read more about\n * colors of noise on [Wikipedia](https://en.wikipedia.org/wiki/Colors_of_noise).\n *\n * @param type the noise type (white|pink|brown)\n * @example\n * //initialize the noise and start\n * var noise = new Noise(\"pink\").start();\n *\n * //make an autofilter to shape the noise\n * var autoFilter = new Tone.AutoFilter({\n * \t\"frequency\" : \"8m\",\n * \t\"min\" : 800,\n * \t\"max\" : 15000\n * }).connect(Tone.Master);\n *\n * //connect the noise\n * noise.connect(autoFilter);\n * //start the autofilter LFO\n * autoFilter.start()\n */\nexport class Noise extends Source<NoiseOptions> {\n\n\tname = \"Noise\";\n\n\t/**\n\t * Private reference to the source\n\t */\n\tprivate _source: ToneBufferSource | null = null;\n\n\t/**\n\t * private reference to the type\n\t */\n\tprivate _type!: NoiseType;\n\n\t/**\n\t *  The playback rate of the noise. Affects\n\t *  the \"frequency\" of the noise.\n\t */\n\tprivate _playbackRate: Positive;\n\n\tconstructor(options?: NoiseType | Partial<NoiseOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Noise.getDefaults(), arguments, [\"type\"]));\n\t\tconst options = optionsFromArguments(Noise.getDefaults(), arguments, [\"type\"]);\n\n\t\tthis._playbackRate = options.playbackRate;\n\t\tthis.type = options.type;\n\t}\n\n\tstatic getDefaults(): NoiseOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tplaybackRate: 1,\n\t\t\ttype: \"white\" as NoiseType,\n\t\t});\n\t}\n\n\t/**\n\t * The type of the noise. Can be \"white\", \"brown\", or \"pink\".\n\t * @example\n\t * noise.type = \"white\";\n\t */\n\tget type(): NoiseType {\n\t\treturn this._type;\n\t}\n\tset type(type: NoiseType) {\n\t\tthis.assert(type in _noiseBuffers, \"Noise: invalid type: \" + type);\n\t\tif (this._type !== type) {\n\t\t\tthis._type = type;\n\t\t\t// if it's playing, stop and restart it\n\t\t\tif (this.state === \"started\") {\n\t\t\t\tconst now = this.now();\n\t\t\t\tthis._stop(now);\n\t\t\t\tthis._start(now);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *  The playback rate of the noise. Affects\n\t *  the \"frequency\" of the noise.\n\t */\n\tget playbackRate(): Positive {\n\t\treturn this._playbackRate;\n\t}\n\tset playbackRate(rate: Positive) {\n\t\tthis._playbackRate = rate;\n\t\tif (this._source) {\n\t\t\tthis._source.playbackRate.value = rate;\n\t\t}\n\t}\n\n\t/**\n\t *  internal start method\n\t */\n\tprotected _start(time?: Time): void {\n\t\tconst buffer = _noiseBuffers[this._type];\n\t\tthis._source = new ToneBufferSource(buffer).connect(this.output);\n\t\tthis._source.loop = true;\n\t\tthis._source.playbackRate.value = this._playbackRate;\n\t\tthis._source.start(this.toSeconds(time), Math.random() * (buffer.duration - 0.001));\n\t}\n\n\t/**\n\t *  internal stop method\n\t *\n\t *  @param {Time} time\n\t *  @private\n\t */\n\tprotected _stop(time?: Time): void {\n\t\tif (this._source) {\n\t\t\tthis._source.stop(this.toSeconds(time));\n\t\t\tthis._source = null;\n\t\t}\n\t}\n\n\t/**\n\t * Restarts the noise.\n\t * @param  time When to restart the noise.\n\t */\n\trestart(time?: Time): this {\n\t\t// TODO could be optimized by cancelling the buffer source 'stop'\n\t\t// stop and restart\n\t\tthis._stop(time);\n\t\tthis._start(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (this._source) {\n\t\t\tthis._source.disconnect();\n\t\t}\n\t\treturn this;\n\t}\n}\n\n///////////////////////////////////////////////////////////////////////////\n// THE NOISE BUFFERS\n///////////////////////////////////////////////////////////////////////////\n\n// Noise buffer stats\nconst BUFFER_LENGTH = 44100 * 5;\nconst NUM_CHANNELS = 2;\n\n/**\n * The cached noise buffers\n */\ninterface NoiseCache {\n\t[key: string]: ToneAudioBuffer | null;\n}\n\n/**\n * Cache the noise buffers\n */\nconst _noiseCache: NoiseCache = {\n\tbrown: null,\n\tpink: null,\n\twhite: null,\n};\n\n/**\n * The noise arrays. Generated on initialization.\n * borrowed heavily from https://github.com/zacharydenton/noise.js\n * (c) 2013 Zach Denton (MIT)\n */\nconst _noiseBuffers = {\n\tget brown(): ToneAudioBuffer {\n\t\tif (!_noiseCache.brown) {\n\t\t\tconst buffer: Float32Array[] = [];\n\t\t\tfor (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {\n\t\t\t\tconst channel = new Float32Array(BUFFER_LENGTH);\n\t\t\t\tbuffer[channelNum] = channel;\n\t\t\t\tlet lastOut = 0.0;\n\t\t\t\tfor (let i = 0; i < BUFFER_LENGTH; i++) {\n\t\t\t\t\tconst white = Math.random() * 2 - 1;\n\t\t\t\t\tchannel[i] = (lastOut + (0.02 * white)) / 1.02;\n\t\t\t\t\tlastOut = channel[i];\n\t\t\t\t\tchannel[i] *= 3.5; // (roughly) compensate for gain\n\t\t\t\t}\n\t\t\t}\n\t\t\t_noiseCache.brown = new ToneAudioBuffer().fromArray(buffer);\n\t\t}\n\t\treturn _noiseCache.brown;\n\t},\n\n\tget pink(): ToneAudioBuffer {\n\t\tif (!_noiseCache.pink) {\n\t\t\tconst buffer: Float32Array[] = [];\n\t\t\tfor (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {\n\t\t\t\tconst channel = new Float32Array(BUFFER_LENGTH);\n\t\t\t\tbuffer[channelNum] = channel;\n\t\t\t\t// tslint:disable-next-line: one-variable-per-declaration\n\t\t\t\tlet b0, b1, b2, b3, b4, b5, b6;\n\t\t\t\tb0 = b1 = b2 = b3 = b4 = b5 = b6 = 0.0;\n\t\t\t\tfor (let i = 0; i < BUFFER_LENGTH; i++) {\n\t\t\t\t\tconst white = Math.random() * 2 - 1;\n\t\t\t\t\tb0 = 0.99886 * b0 + white * 0.0555179;\n\t\t\t\t\tb1 = 0.99332 * b1 + white * 0.0750759;\n\t\t\t\t\tb2 = 0.96900 * b2 + white * 0.1538520;\n\t\t\t\t\tb3 = 0.86650 * b3 + white * 0.3104856;\n\t\t\t\t\tb4 = 0.55000 * b4 + white * 0.5329522;\n\t\t\t\t\tb5 = -0.7616 * b5 - white * 0.0168980;\n\t\t\t\t\tchannel[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;\n\t\t\t\t\tchannel[i] *= 0.11; // (roughly) compensate for gain\n\t\t\t\t\tb6 = white * 0.115926;\n\t\t\t\t}\n\t\t\t}\n\t\t\t_noiseCache.pink = new ToneAudioBuffer().fromArray(buffer);\n\t\t}\n\t\treturn _noiseCache.pink;\n\t},\n\n\tget white(): ToneAudioBuffer {\n\t\tif (!_noiseCache.white) {\n\t\t\tconst buffer: Float32Array[] = [];\n\t\t\tfor (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {\n\t\t\t\tconst channel = new Float32Array(BUFFER_LENGTH);\n\t\t\t\tbuffer[channelNum] = channel;\n\t\t\t\tfor (let i = 0; i < BUFFER_LENGTH; i++) {\n\t\t\t\t\tchannel[i] = Math.random() * 2 - 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t_noiseCache.white = new ToneAudioBuffer().fromArray(buffer);\n\t\t}\n\t\treturn _noiseCache.white;\n\t},\n};\n","import { AbstractParam } from \"../core/context/AbstractParam\";\nimport { Param } from \"../core/context/Param\";\nimport { InputNode, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { connect } from \"../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\n\nexport interface SignalOptions<Type> extends ToneAudioNodeOptions {\n\tvalue: Type;\n\tunits: UnitName;\n\tconvert: boolean;\n}\n\n/**\n * A signal is an audio-rate value. Tone.Signal is a core component of the library.\n * Unlike a number, Signals can be scheduled with sample-level accuracy. Tone.Signal\n * has all of the methods available to native Web Audio\n * [AudioParam](http://webaudio.github.io/web-audio-api/#the-audioparam-interface)\n * as well as additional conveniences. Read more about working with signals\n * [here](https://github.com/Tonejs/Tone.js/wiki/Signals).\n *  @param value Initial value of the signal\n *  @param units unit The units the signal is in.\n * @example\n * const signal = new Tone.Signal(10);\n */\nexport class Signal<Type extends Unit = number> extends ToneAudioNode<SignalOptions<any>>\nimplements AbstractParam<Type> {\n\n\tname = \"Signal\";\n\n\t/**\n\t * Indicates if the value should be overridden on connection.\n\t */\n\treadonly override: boolean = true;\n\n\t/**\n\t * The constant source node which generates the signal\n\t */\n\tprotected _constantSource: ConstantSourceNode = this.context.createConstantSource();\n\treadonly output: OutputNode = this._constantSource;\n\tprotected _param: Param<Type>;\n\treadonly input: InputNode;\n\tprotected _internalChannels = [this._constantSource];\n\n\tconstructor(value?: Type, units?: UnitName);\n\tconstructor(options?: Partial<SignalOptions<Type>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]));\n\n\t\tconst options = optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]) as SignalOptions<Type>;\n\n\t\tthis._constantSource.start(0);\n\t\tthis.input = this._param = new Param({\n\t\t\tcontext: this.context,\n\t\t\tconvert: options.convert,\n\t\t\tparam: this._constantSource.offset,\n\t\t\tunits: options.units,\n\t\t\tvalue: options.value,\n\t\t});\n\t}\n\n\tstatic getDefaults(): SignalOptions<any> {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tchannelCount: 1,\n\t\t\tchannelCountMode: \"explicit\",\n\t\t\tchannelInterpretation: \"discrete\",\n\t\t\tconvert: true,\n\t\t\tnumberOfInputs: 1,\n\t\t\tnumberOfOutputs: 1,\n\t\t\tunits: \"number\" as UnitName,\n\t\t\tvalue: 0,\n\t\t}) as SignalOptions<any>;\n\t}\n\n\tconnect(destination: InputNode, outputNum: number = 0, inputNum: number = 0): this {\n\t\tconnectSignal(this, destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._param.dispose();\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// ABSTRACT PARAM INTERFACE\n\t// just a proxy for the ConstantSourceNode's offset AudioParam\n\t// all docs are generated from AbstractParam.ts\n\t///////////////////////////////////////////////////////////////////////////\n\n\tsetValueAtTime(value: Type, time: Time): this {\n\t\tthis._param.setValueAtTime(value, time);\n\t\treturn this;\n\t}\n\tgetValueAtTime(time: Time): Type {\n\t\treturn this._param.getValueAtTime(time);\n\t}\n\tsetRampPoint(time: Time): this {\n\t\tthis._param.setRampPoint(time);\n\t\treturn this;\n\t}\n\tlinearRampToValueAtTime(value: Type, time: Time): this {\n\t\tthis._param.linearRampToValueAtTime(value, time);\n\t\treturn this;\n\t}\n\texponentialRampToValueAtTime(value: Type, time: Time): this {\n\t\tthis._param.exponentialRampToValueAtTime(value, time);\n\t\treturn this;\n\t}\n\texponentialRampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tthis._param.exponentialRampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\tlinearRampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tthis._param.linearRampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\ttargetRampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tthis._param.targetRampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\texponentialApproachValueAtTime(value: Type, time: Time, rampTime: Time): this {\n\t\tthis._param.exponentialApproachValueAtTime(value, time, rampTime);\n\t\treturn this;\n\t}\n\tsetTargetAtTime(value: Type, startTime: Time, timeConstant: number): this {\n\t\tthis._param.setTargetAtTime(value, startTime, timeConstant);\n\t\treturn this;\n\t}\n\tsetValueCurveAtTime(values: Type[], startTime: Time, duration: Time, scaling?: number): this {\n\t\tthis._param.setValueCurveAtTime(values, startTime, duration, scaling);\n\t\treturn this;\n\t}\n\tcancelScheduledValues(time: Time): this {\n\t\tthis._param.cancelScheduledValues(time);\n\t\treturn this;\n\t}\n\tcancelAndHoldAtTime(time: Time): this {\n\t\tthis._param.cancelAndHoldAtTime(time);\n\t\treturn this;\n\t}\n\trampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tthis._param.rampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\n\tget value(): Type {\n\t\treturn this._param.value;\n\t}\n\tset value(value: Type) {\n\t\tthis._param.value = value;\n\t}\n\n\tget convert(): boolean {\n\t\treturn this._param.convert;\n\t}\n\tset convert(convert: boolean) {\n\t\tthis._param.convert = convert;\n\t}\n\n\tget units(): UnitName {\n\t\treturn this._param.units;\n\t}\n\n\tget overridden(): boolean {\n\t\treturn this._param.overridden;\n\t}\n\tset overridden(overridden: boolean) {\n\t\tthis._param.overridden = overridden;\n\t}\n\n\tget maxValue(): number {\n\t\treturn this._param.maxValue;\n\t}\n\tget minValue(): number {\n\t\treturn this._param.minValue;\n\t}\n}\n\n/**\n * When connecting from a signal, it's necessary to zero out the node destination\n * node if that node is also a signal. If the destination is not 0, then the values\n * will be summed. This method insures that the output of the destination signal will\n * be the same as the source signal, making the destination signal a pass through node.\n * @param signal The output signal to connect from\n * @param destination the destination to connect to\n * @param outputNum the optional output number\n * @param inputNum the input number\n */\nexport function connectSignal(signal: OutputNode, destination: InputNode, outputNum?: number, inputNum?: number): void {\n\tif (destination instanceof Param || destination instanceof AudioParam ||\n\t\t(destination instanceof Signal && destination.override)) {\n\t\t// cancel changes\n\t\tdestination.cancelScheduledValues(0);\n\t\t// reset the value\n\t\tdestination.setValueAtTime(0, 0);\n\t\t// mark the value as overridden\n\t\tif (destination instanceof Signal) {\n\t\t\tdestination.overridden = true;\n\t\t}\n\t}\n\tconnect(signal, destination, outputNum, inputNum);\n}\n","import { connect } from \"../../core/Connect\";\nimport { Param } from \"../../core/context/Param\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { OneShotSource, OneShotSourceOptions } from \"../OneShotSource\";\n\ninterface ToneOscillatorNodeOptions extends OneShotSourceOptions {\n\tfrequency: Frequency;\n\tdetune: Cents;\n\ttype: OscillatorType;\n}\n\n/**\n * Wrapper around the native fire-and-forget OscillatorNode.\n * Adds the ability to reschedule the stop method.\n * ***[Tone.Oscillator](Oscillator) is better for most use-cases***\n *  @extends {Tone.AudioNode}\n *  @param  {AudioBuffer|Tone.Buffer}  buffer   The buffer to play\n *  @param  {Function}  onload  The callback to invoke when the\n *                               buffer is done playing.\n */\nexport class ToneOscillatorNode extends OneShotSource<ToneOscillatorNodeOptions> {\n\n\tname = \"ToneOscillatorNode\";\n\n\t/**\n\t *  The oscillator\n\t */\n\tprivate _oscillator = this.context.createOscillator();\n\tprotected _internalChannels = [this._gainNode, this._oscillator];\n\n\t/**\n\t *  The frequency of the oscillator\n\t */\n\treadonly frequency: Param<\"frequency\">;\n\n\t/**\n\t *  The detune of the oscillator\n\t */\n\treadonly detune: Param<\"cents\">;\n\n\tconstructor(options?: Partial<ToneOscillatorNodeOptions>);\n\tconstructor(\n\t\tfrequency: Frequency,\n\t\ttype: OscillatorType,\n\t);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(ToneOscillatorNode.getDefaults(), arguments, [\"frequency\", \"type\"]));\n\t\tconst options = optionsFromArguments(ToneOscillatorNode.getDefaults(), arguments, [\"frequency\", \"type\"]);\n\n\t\tconnect(this._oscillator, this._gainNode);\n\n\t\tthis.type = options.type;\n\n\t\tthis.frequency = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam : this._oscillator.frequency,\n\t\t\tunits : \"frequency\",\n\t\t\tvalue : this.toFrequency(options.frequency),\n\t\t});\n\n\t\tthis.detune = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam : this._oscillator.detune,\n\t\t\tunits : \"cents\",\n\t\t\tvalue : options.detune,\n\t\t});\n\t}\n\n\tstatic getDefaults(): ToneOscillatorNodeOptions {\n\t\treturn Object.assign(OneShotSource.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tfrequency: 440,\n\t\t\ttype: \"sine\" as OscillatorType,\n\t\t});\n\t}\n\n\t/**\n\t * Start the oscillator node at the given time\n\t * @param  time When to start the oscillator\n\t */\n\tstart(time?: Time): this {\n\t\tthis.log(\"start\", time);\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._startGain(computedTime);\n\t\tthis._oscillator.start(computedTime);\n\t\treturn this;\n\t}\n\n\tprotected _stopSource(time?: Seconds): void {\n\t\tthis._oscillator.stop(time);\n\t}\n\n\t/**\n\t * Sets an arbitrary custom periodic waveform given a PeriodicWave.\n\t * @param  periodicWave PeriodicWave should be created with context.createPeriodicWave\n\t */\n\tsetPeriodicWave(periodicWave: PeriodicWave): this {\n\t\tthis._oscillator.setPeriodicWave(periodicWave);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The oscillator type. Either 'sine', 'sawtooth', 'square', or 'triangle'\n\t */\n\tget type(): OscillatorType {\n\t\treturn this._oscillator.type;\n\t}\n\tset type(type: OscillatorType) {\n\t\tthis._oscillator.type = type;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._oscillator.disconnect();\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\treturn this;\n\t}\n}\n","import { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { ToneOscillatorConstructorOptions, ToneOscillatorInterface,\n\tToneOscillatorOptions, ToneOscillatorType } from \"./OscillatorInterface\";\nimport { ToneOscillatorNode } from \"./OscillatorNode\";\n\n/**\n *  Oscillator supports a number of features including\n *  phase rotation, multiple oscillator types (see Oscillator.type),\n *  and Transport syncing (see Oscillator.syncFrequency).\n *\n *  @param frequency Starting frequency\n *  @param type The oscillator type. Read more about type below.\n *  @example\n * //make and start a 440hz sine tone\n * var osc = new Oscillator(440, \"sine\").toDestination().start();\n */\nexport class Oscillator extends Source<ToneOscillatorOptions> implements ToneOscillatorInterface {\n\n\tname = \"Oscillator\";\n\n\t/**\n\t *  the main oscillator\n\t */\n\tprivate _oscillator: ToneOscillatorNode | null = null;\n\n\t/**\n\t *  The frequency control.\n\t */\n\tfrequency: Signal<Frequency>;\n\n\t/**\n\t *  The detune control signal.\n\t */\n\tdetune: Signal<Cents>;\n\n\t/**\n\t *  the periodic wave\n\t */\n\tprivate _wave?: PeriodicWave;\n\n\t/**\n\t *  The partials of the oscillator\n\t */\n\tprivate _partials: number[];\n\n\t/**\n\t *  The number of partials to limit or extend the periodic wave by\n\t */\n\tprivate _partialCount: number;\n\n\t/**\n\t *  the phase of the oscillator between 0 - 360\n\t */\n\tprivate _phase: Radians;\n\n\t/**\n\t *  the type of the oscillator\n\t *  @type {string}\n\t *  @private\n\t */\n\tprivate _type;\n\n\tconstructor(options?: Partial<ToneOscillatorConstructorOptions>)\n\tconstructor(frequency?: Frequency, type?: ToneOscillatorType);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Oscillator.getDefaults(), arguments, [\"frequency\", \"type\"]));\n\t\tconst options = optionsFromArguments(Oscillator.getDefaults(), arguments, [\"frequency\", \"type\"]);\n\n\t\tthis.frequency = new Signal<Frequency>({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t});\n\t\treadOnly(this, \"frequency\");\n\n\t\tthis.detune = new Signal<Cents>({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune,\n\t\t});\n\t\treadOnly(this, \"detune\");\n\n\t\tthis._partials = options.partials;\n\t\tthis._partialCount = options.partialCount;\n\t\tthis._phase = options.phase;\n\t\tthis._type = options.type;\n\n\t\tif (options.partialCount && options.type !== \"custom\") {\n\t\t\tthis._type = this.baseType + options.partialCount.toString();\n\t\t}\n\t\tthis.phase = this._phase;\n\t}\n\n\tstatic getDefaults(): ToneOscillatorOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tfrequency: 440,\n\t\t\tpartialCount: 0,\n\t\t\tpartials: [],\n\t\t\tphase: 0,\n\t\t\ttype: \"sine\",\n\t\t}) as ToneOscillatorOptions;\n\t}\n\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _start(time?: Time): void {\n\t\tthis.log(\"start\", time);\n\t\t// new oscillator with previous values\n\t\tconst oscillator = new ToneOscillatorNode({\n\t\t\tcontext: this.context,\n\t\t});\n\t\tthis._oscillator = oscillator;\n\t\tif (this._wave) {\n\t\t\tthis._oscillator.setPeriodicWave(this._wave);\n\t\t} else {\n\t\t\tthis._oscillator.type = this._type;\n\t\t}\n\t\t// connect the control signal to the oscillator frequency & detune\n\t\tthis._oscillator.connect(this.output);\n\t\tthis.frequency.connect(this._oscillator.frequency);\n\t\tthis.detune.connect(this._oscillator.detune);\n\n\t\t// start the oscillator\n\t\ttime = this.toSeconds(time);\n\t\tthis._oscillator.start(time);\n\t}\n\n\t/**\n\t *  stop the oscillator\n\t */\n\tprotected _stop(time?: Time): void {\n\t\tthis.log(\"stop\", time);\n\t\tif (this._oscillator) {\n\t\t\ttime = this.toSeconds(time);\n\t\t\tthis._oscillator.stop(time);\n\t\t}\n\t}\n\n\t/**\n\t * Restart the oscillator. Does not stop the oscillator, but instead\n\t * just cancels any scheduled 'stop' from being invoked.\n\t */\n\trestart(time?: Time): this {\n\t\tif (this._oscillator) {\n\t\t\tthis._oscillator.cancelStop();\n\t\t}\n\t\tthis._state.cancel(this.toSeconds(time));\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Sync the signal to the Transport's bpm. Any changes to the transports bpm,\n\t *  will also affect the oscillators frequency.\n\t *  @example\n\t * Tone.Transport.bpm.value = 120;\n\t * osc.frequency.value = 440;\n\t * //the ration between the bpm and the frequency will be maintained\n\t * osc.syncFrequency();\n\t * Tone.Transport.bpm.value = 240;\n\t * // the frequency of the oscillator is doubled to 880\n\t */\n\tsyncFrequency(): this {\n\t\tthis.context.transport.syncSignal(this.frequency);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Unsync the oscillator's frequency from the Transport.\n\t *  See Oscillator.syncFrequency\n\t */\n\tunsyncFrequency(): this {\n\t\tthis.context.transport.unsyncSignal(this.frequency);\n\t\treturn this;\n\t}\n\n\t/* tslint:disable */\n\t/**\n\t * The type of the oscillator: either sine, square, triangle, or sawtooth. Also capable of\n\t * setting the first x number of partials of the oscillator. For example: \"sine4\" would\n\t * set be the first 4 partials of the sine wave and \"triangle8\" would set the first\n\t * 8 partials of the triangle wave.\n\t * <br><br>\n\t * Uses PeriodicWave internally even for native types so that it can set the phase.\n\t * PeriodicWave equations are from the\n\t * [Webkit Web Audio implementation](https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/modules/webaudio/PeriodicWave.cpp&sq=package:chromium).\n\t *\n\t * @memberOf Oscillator#\n\t * @type {string}\n\t * @name type\n\t * @example\n\t * //set it to a square wave\n\t * osc.type = \"square\";\n\t * @example\n\t * //set the first 6 partials of a sawtooth wave\n\t * osc.type = \"sawtooth6\";\n\t */\n\t/* tslint:enable */\n\tget type(): ToneOscillatorType {\n\t\treturn this._type;\n\t}\n\tset type(type: ToneOscillatorType) {\n\t\tconst isBasicType = [\"sine\", \"square\", \"sawtooth\", \"triangle\"].indexOf(type) !== -1;\n\t\tif (this._phase === 0 && isBasicType) {\n\t\t\tthis._wave = undefined;\n\t\t\tthis._partialCount = 0;\n\t\t\t// just go with the basic approach\n\t\t\tif (this._oscillator !== null) {\n\t\t\t\t// already tested that it's a basic type\n\t\t\t\tthis._oscillator.type = type as OscillatorType;\n\t\t\t}\n\t\t} else {\n\t\t\tconst [real, imag] = this._getRealImaginary(type, this._phase);\n\t\t\tconst periodicWave = this.context.createPeriodicWave(real, imag);\n\t\t\tthis._wave = periodicWave;\n\t\t\tif (this._oscillator !== null) {\n\t\t\t\tthis._oscillator.setPeriodicWave(this._wave);\n\t\t\t}\n\t\t}\n\t\tthis._type = type;\n\t}\n\n\t/**\n\t * The oscillator type without the partialsCount appended to the end\n\t * @example\n\t * osc.type = 'sine2'\n\t * osc.baseType //'sine'\n\t * osc.partialCount = 2\n\t */\n\tget baseType(): OscillatorType {\n\t\treturn this._type.replace(this.partialCount, \"\");\n\t}\n\tset baseType(baseType: OscillatorType) {\n\t\tif (this.partialCount && this._type !== \"custom\" && baseType !== \"custom\") {\n\t\t\tthis.type = baseType + this.partialCount as ToneOscillatorType;\n\t\t} else {\n\t\t\tthis.type = baseType;\n\t\t}\n\t}\n\n\t/**\n\t * 'partialCount' offers an alternative way to set the number of used partials.\n\t * When partialCount is 0, the maximum number of partials are used when representing\n\t * the waveform using the periodicWave. When 'partials' is set, this value is\n\t * not settable, but equals the length of the partials array.\n\t * @example\n\t * osc.type = 'sine'\n\t * osc.partialCount = 3\n\t * //is equivalent to\n\t * osc.type = 'sine3'\n\t */\n\tget partialCount(): number {\n\t\treturn this._partialCount;\n\t}\n\tset partialCount(p: number) {\n\t\tlet type = this._type;\n\t\tconst partial = /^(sine|triangle|square|sawtooth)(\\d+)$/.exec(this._type);\n\t\tif (partial) {\n\t\t\ttype = partial[1];\n\t\t}\n\t\tif (this._type !== \"custom\") {\n\t\t\tif (p === 0) {\n\t\t\t\tthis.type = type;\n\t\t\t} else {\n\t\t\t\tthis.type = type + p.toString() as ToneOscillatorType;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *  Get the object's attributes. Given no arguments get\n\t *  will return all available object properties and their corresponding\n\t *  values.\n\t */\n\tget(): ToneOscillatorOptions {\n\t\tconst values = super.get();\n\t\tif (values.type !== \"custom\") {\n\t\t\tdelete values.partials;\n\t\t}\n\t\treturn values;\n\t}\n\n\t/**\n\t *  Returns the real and imaginary components based\n\t *  on the oscillator type.\n\t *  @returns [real: Float32Array, imaginary: Float32Array]\n\t *  @private\n\t */\n\tprivate _getRealImaginary(type: ToneOscillatorType, phase: Radians): Float32Array[] {\n\t\tconst fftSize = 4096;\n\t\tlet periodicWaveSize = fftSize / 2;\n\n\t\tconst real = new Float32Array(periodicWaveSize);\n\t\tconst imag = new Float32Array(periodicWaveSize);\n\n\t\tlet partialCount = 1;\n\t\tif (type === \"custom\") {\n\t\t\tpartialCount = this._partials.length + 1;\n\t\t\tthis._partialCount = this._partials.length;\n\t\t\tperiodicWaveSize = partialCount;\n\t\t} else {\n\t\t\tconst partial = /^(sine|triangle|square|sawtooth)(\\d+)$/.exec(type);\n\t\t\tif (partial) {\n\t\t\t\tpartialCount = parseInt(partial[2], 10) + 1;\n\t\t\t\tthis._partialCount = parseInt(partial[2], 10);\n\t\t\t\ttype = partial[1] as ToneOscillatorType;\n\t\t\t\tpartialCount = Math.max(partialCount, 2);\n\t\t\t\tperiodicWaveSize = partialCount;\n\t\t\t} else {\n\t\t\t\tthis._partialCount = 0;\n\t\t\t}\n\t\t\tthis._partials = [];\n\t\t}\n\n\t\t// tslint:disable: no-bitwise\n\t\tfor (let n = 1; n < periodicWaveSize; ++n) {\n\t\t\tconst piFactor = 2 / (n * Math.PI);\n\t\t\tlet b;\n\t\t\tswitch (type) {\n\t\t\t\tcase \"sine\":\n\t\t\t\t\tb = (n <= partialCount) ? 1 : 0;\n\t\t\t\t\tthis._partials[n - 1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"square\":\n\t\t\t\t\tb = (n & 1) ? 2 * piFactor : 0;\n\t\t\t\t\tthis._partials[n - 1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"sawtooth\":\n\t\t\t\t\tb = piFactor * ((n & 1) ? 1 : -1);\n\t\t\t\t\tthis._partials[n - 1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"triangle\":\n\t\t\t\t\tif (n & 1) {\n\t\t\t\t\t\tb = 2 * (piFactor * piFactor) * ((((n - 1) >> 1) & 1) ? -1 : 1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tb = 0;\n\t\t\t\t\t}\n\t\t\t\t\tthis._partials[n - 1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"custom\":\n\t\t\t\t\tb = this._partials[n - 1];\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new TypeError(\"Oscillator: invalid type: \" + type);\n\t\t\t}\n\t\t\tif (b !== 0) {\n\t\t\t\treal[n] = -b * Math.sin(phase * n);\n\t\t\t\timag[n] = b * Math.cos(phase * n);\n\t\t\t} else {\n\t\t\t\treal[n] = 0;\n\t\t\t\timag[n] = 0;\n\t\t\t}\n\t\t}\n\t\treturn [real, imag];\n\t}\n\n\t/**\n\t *  Compute the inverse FFT for a given phase.\n\t */\n\tprivate _inverseFFT(real: Float32Array, imag: Float32Array, phase: Radians): number {\n\t\tlet sum = 0;\n\t\tconst len = real.length;\n\t\tfor (let i = 0; i < len; i++) {\n\t\t\tsum += real[i] * Math.cos(i * phase) + imag[i] * Math.sin(i * phase);\n\t\t}\n\t\treturn sum;\n\t}\n\n\t/**\n\t *  Returns the initial value of the oscillator.\n\t */\n\tprotected _getInitialValue(): AudioRange {\n\t\tconst [real, imag] = this._getRealImaginary(this._type, 0);\n\t\tlet maxValue = 0;\n\t\tconst twoPi = Math.PI * 2;\n\t\t// check for peaks in 8 places\n\t\tfor (let i = 0; i < 8; i++) {\n\t\t\tmaxValue = Math.max(this._inverseFFT(real, imag, (i / 8) * twoPi), maxValue);\n\t\t}\n\t\treturn -this._inverseFFT(real, imag, this._phase) / maxValue;\n\t}\n\n\t/**\n\t * The partials of the waveform. A partial represents\n\t * the amplitude at a harmonic. The first harmonic is the\n\t * fundamental frequency, the second is the octave and so on\n\t * following the harmonic series.\n\t * Setting this value will automatically set the type to \"custom\".\n\t * The value is an empty array when the type is not \"custom\".\n\t * @example\n\t * osc.partials = [1, 0.2, 0.01];\n\t */\n\tget partials(): number[] {\n\t\treturn this._partials;\n\t}\n\tset partials(partials: number[]) {\n\t\tthis._partials = partials;\n\t\tif (partials.length) {\n\t\t\tthis.type = \"custom\";\n\t\t}\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t * @example\n\t * osc.phase = 180; //flips the phase of the oscillator\n\t */\n\tget phase(): Degrees {\n\t\treturn this._phase * (180 / Math.PI);\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._phase = phase * Math.PI / 180;\n\t\t// reset the type\n\t\tthis.type = this._type;\n\t}\n\n\t/**\n\t *  Dispose and disconnect.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (this._oscillator !== null) {\n\t\t\tthis._oscillator.dispose();\n\t\t}\n\t\tthis._wave = undefined;\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\treturn this;\n\t}\n}\n","import { optionsFromArguments } from \"..//core/util/Defaults\";\nimport { InputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { connectSignal } from \"./Signal\";\n/**\n * A signal operator has an input and output and modifies the signal.\n */\nexport abstract class SignalOperator<Options extends ToneAudioNodeOptions> extends ToneAudioNode<Options> {\n\n\tconstructor(options?: Partial<Options>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(SignalOperator.getDefaults(), arguments, [\"context\"])));\n\t}\n\n\tconnect(destination: InputNode, outputNum: number = 0, inputNum: number = 0): this {\n\t\tconnectSignal(this, destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { isArray, isFunction, isUndef } from \"../core/util/TypeCheck\";\nimport { Signal, SignalOptions } from \"./Signal\";\nimport { SignalOperator } from \"./SignalOperator\";\n\ntype WaveShaperMappingFn = (value: number, index?: number) => number;\n\ntype WaveShaperMapping =  WaveShaperMappingFn | number[] | Float32Array;\n\ninterface WaveShaperOptions extends ToneAudioNodeOptions {\n\tmapping?: WaveShaperMapping;\n\tlength: number;\n\tcurve?: number[] | Float32Array;\n}\n\n/**\n * Wraps the native Web Audio API\n * [WaveShaperNode](http://webaudio.github.io/web-audio-api/#the-waveshapernode-interface).\n *\n *  @param mapping The function used to define the values.\n *                 The mapping function should take two arguments:\n *                 the first is the value at the current position\n *                 and the second is the array position.\n *                 If the argument is an array, that array will be\n *                 set as the wave shaping function. The input\n *                 signal is an AudioRange [-1, 1] value and the output\n *                 signal can take on any numerical values.\n *\n *  @param bufferLen The length of the WaveShaperNode buffer.\n *  @example\n * var timesTwo = new WaveShaper(function(val){\n * \treturn val * 2;\n * }, 2048);\n *  @example\n * //a waveshaper can also be constructed with an array of values\n * var invert = new WaveShaper([1, -1]);\n */\nexport class WaveShaper extends SignalOperator<WaveShaperOptions> {\n\n\tname = \"WaveShaper\";\n\n\t/**\n\t *  the waveshaper node\n\t */\n\tprivate _shaper: WaveShaperNode = this.context.createWaveShaper();\n\n\t/**\n\t * The input to the waveshaper node.\n\t */\n\tinput = this._shaper;\n\n\t/**\n\t * The output from the waveshaper node\n\t */\n\toutput = this._shaper;\n\n\tprotected _internalChannels = [this._shaper];\n\n\tconstructor(options?: Partial<WaveShaperOptions>);\n\tconstructor(mapping?: WaveShaperMapping , length?: number);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(WaveShaper.getDefaults(), arguments, [\"mapping\", \"length\"])));\n\t\tconst options = optionsFromArguments(WaveShaper.getDefaults(), arguments, [\"mapping\", \"length\"]);\n\n\t\tif (isArray(options.mapping) || options.mapping instanceof Float32Array) {\n\t\t\tthis.curve = Float32Array.from(options.mapping);\n\t\t} else if (isFunction(options.mapping)) {\n\t\t\tthis.setMap(options.mapping, options.length);\n\t\t}\n\t}\n\n\tstatic getDefaults(): WaveShaperOptions {\n\t\treturn Object.assign(Signal.getDefaults(), {\n\t\t\tlength: 1024,\n\t\t});\n\t}\n\n\t/**\n\t *  Uses a mapping function to set the value of the curve.\n\t *  @param mapping The function used to define the values.\n\t *                 The mapping function take two arguments:\n\t *                 the first is the value at the current position\n\t *                 which goes from -1 to 1 over the number of elements\n\t *                 in the curve array. The second argument is the array position.\n\t * @example\n\t * //map the input signal from [-1, 1] to [0, 10]\n\t * shaper.setMap(function(val, index){\n\t * \treturn (val + 1) * 5;\n\t * })\n\t */\n\tsetMap(mapping: WaveShaperMappingFn, length: number = 1024): this {\n\t\tconst array = new Float32Array(length);\n\t\tfor (let i = 0, len = length; i < len; i++) {\n\t\t\tconst normalized = (i / (len - 1)) * 2 - 1;\n\t\t\tarray[i] = mapping(normalized, i);\n\t\t}\n\t\tthis.curve = array;\n\t\treturn this;\n\t}\n\n\t/**\n\t * The array to set as the waveshaper curve. For linear curves\n\t * array length does not make much difference, but for complex curves\n\t * longer arrays will provide smoother interpolation.\n\t */\n\tget curve(): Float32Array | null {\n\t\treturn this._shaper.curve;\n\t}\n\n\tset curve(mapping: Float32Array | null) {\n\t\tthis._shaper.curve = mapping;\n\t}\n\n\t/**\n\t * Specifies what type of oversampling (if any) should be used when\n\t * applying the shaping curve. Can either be \"none\", \"2x\" or \"4x\".\n\t */\n\tget oversample(): OverSampleType {\n\t\treturn this._shaper.oversample;\n\t}\n\n\tset oversample(oversampling: OverSampleType) {\n\t\tconst isOverSampleType = [\"none\", \"2x\", \"4x\"].some(str => str.includes(oversampling));\n\t\tthis.assert(isOverSampleType, \"oversampling must be either 'none', '2x', or '4x'\");\n\t\tthis._shaper.oversample = oversampling;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._shaper.disconnect();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { SignalOperator } from \"./SignalOperator\";\nimport { WaveShaper } from \"./WaveShaper\";\n\n/**\n * AudioToGain converts an input in AudioRange [-1,1] to NormalRange [0,1].\n * See {@link GainToAudio}.\n *\n * @example\n * var a2g = new AudioToGain();\n */\nexport class AudioToGain extends SignalOperator<ToneAudioNodeOptions> {\n\n\tname = \"AudioToGain\";\n\n\t/**\n\t * The node which converts the audio ranges\n\t */\n\tprivate _norm = new WaveShaper({\n\t\tcontext: this.context,\n\t\tmapping: x => (x + 1) / 2,\n\t});\n\tprotected _internalChannels = [this._norm];\n\n\t/**\n\t * The AudioRange input [-1, 1]\n\t */\n\tinput = this._norm;\n\n\t/**\n\t * The GainRange output [0, 1]\n\t */\n\toutput = this._norm;\n\n\t/**\n\t *  clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._norm.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../core/context/Gain\";\nimport { Param } from \"../core/context/Param\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Signal, SignalOptions } from \"./Signal\";\n\n/**\n * Multiply two incoming signals. Or, if a number is given in the constructor,\n * multiplies the incoming signal by that value.\n *\n * @param {number=} value Constant value to multiple\n * @example\n * const mult = new Multiply();\n * const sigA = new Tone.Signal(3);\n * const sigB = new Tone.Signal(4);\n * sigA.connect(mult);\n * sigB.connect(mult.factor);\n * //output of mult is 12.\n *  @example\n * const mult = new Multiply(10);\n * const sig = new Tone.Signal(2).connect(mult);\n * //the output of mult is 20.\n */\nexport class Multiply extends Signal<number> {\n\n\tname = \"Multiply\";\n\n\t/**\n\t * Indicates if the value should be overridden on connection\n\t */\n\treadonly override = false;\n\n\t/**\n\t * the input gain node\n\t */\n\tprivate _mult: Gain = new Gain({ context : this.context });\n\n\t/**\n\t * The multiplcant input.\n\t */\n\tinput = this._mult;\n\n\t/**\n\t * The product of the input and {@link factor}\n\t */\n\toutput = this._mult;\n\n\t/**\n\t * The multiplication factor. Can be set directly or a signal can be connected to it.\n\t */\n\tfactor: Param<number>;\n\n\tconstructor(options?: Partial<SignalOptions<number>>);\n\t// tslint:disable-next-line: unified-signatures\n\tconstructor(value?: number);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Multiply.getDefaults(), arguments, [\"value\"])));\n\t\tconst options = optionsFromArguments(Multiply.getDefaults(), arguments, [\"value\"]);\n\n\t\tthis.factor = this._param = this._mult.gain as unknown as Param<number>;\n\t\tthis.factor.setValueAtTime(options.value, 0);\n\t}\n\n\tstatic getDefaults(): SignalOptions<number> {\n\t\treturn Object.assign(Signal.getDefaults(), {\n\t\t\tvalue: 0,\n\t\t});\n\t}\n\n\t/**\n\t *  clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._mult.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { AudioToGain } from \"../../signal/AudioToGain\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { AMConstructorOptions, AMOscillatorOptions,\n\tNonCustomOscillatorType, ToneOscillatorInterface,\n\tToneOscillatorType } from \"./OscillatorInterface\";\n\n/**\n * An amplitude modulated oscillator node. It is implemented with\n * two oscillators, one which modulators the other's amplitude\n * through a gain node.\n * ```\n *    +-------------+       +----------+\n *    | Carrier Osc +>------> GainNode |\n *    +-------------+       |          +--->Output\n *                      +---> gain     |\n * +---------------+    |   +----------+\n * | Modulator Osc +>---+\n * +---------------+\n * ```\n *\n * @param frequency The starting frequency of the oscillator.\n * @param type The type of the carrier oscillator.\n * @param modulationType The type of the modulator oscillator.\n * @example\n * //a sine oscillator frequency-modulated by a square wave\n * var fmOsc = new AMOscillator(\"Ab3\", \"sine\", \"square\").toDestination().start();\n */\nexport class AMOscillator extends Source<AMOscillatorOptions> implements ToneOscillatorInterface {\n\n\tname = \"AMOscillator\";\n\n\t/**\n\t *  The carrier oscillator\n\t */\n\tprivate _carrier: Oscillator = new Oscillator({context : this.context });\n\n\t/**\n\t *  The oscillator's frequency\n\t */\n\treadonly frequency: Signal<Frequency> = this._carrier.frequency;\n\n\t/**\n\t *  The detune control signal.\n\t */\n\treadonly detune: Signal<Cents> = this._carrier.detune;\n\n\t/**\n\t *  The modulating oscillator\n\t */\n\tprivate _modulator = new Oscillator({ context : this.context });\n\n\t/**\n\t *  convert the -1,1 output to 0,1\n\t */\n\tprivate _modulationScale = new AudioToGain({ context: this.context });\n\n\t/**\n\t *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators.\n\t *  A harmonicity of 1 gives both oscillators the same frequency.\n\t *  Harmonicity = 2 means a change of an octave.\n\t *  @example\n\t * //pitch the modulator an octave below carrier\n\t * synth.harmonicity.value = 0.5;\n\t */\n\treadonly harmonicity: Signal<Positive> = new Multiply({\n\t\tcontext: this.context,\n\t\tunits: \"positive\",\n\t});\n\n\t/**\n\t *  the node where the modulation happens\n\t */\n\tprivate _modulationNode = new Gain({\n\t\tcontext: this.context,\n\t});\n\n\tconstructor(options?: Partial<AMConstructorOptions>);\n\tconstructor(frequency?: Frequency, type?: ToneOscillatorType, modulationType?: ToneOscillatorType);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(AMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]));\n\t\tconst options = optionsFromArguments(AMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]);\n\n\t\tthis._carrier.type = options.type;\n\t\tthis._modulator.type = options.modulationType;\n\t\tthis.frequency.setValueAtTime(options.frequency, 0);\n\t\tthis.detune.setValueAtTime(options.detune, 0);\n\t\tthis.harmonicity.setValueAtTime(options.harmonicity, 0);\n\n\t\t// connections\n\t\tthis.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t\tthis._modulator.chain(this._modulationScale, this._modulationNode.gain);\n\t\tthis._carrier.chain(this._modulationNode, this.output);\n\n\t\tthis.phase = options.phase;\n\n\t\treadOnly(this, [\"frequency\", \"detune\", \"harmonicity\"]);\n\t}\n\n\tstatic getDefaults(): AMOscillatorOptions {\n\t\treturn Object.assign(Oscillator.getDefaults(), {\n\t\t\tharmonicity: 1,\n\t\t\tmodulationType: \"square\" as NonCustomOscillatorType,\n\t\t});\n\t}\n\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _start(time: Seconds): void {\n\t\tthis._modulator.start(time);\n\t\tthis._carrier.start(time);\n\t}\n\n\t/**\n\t *  stop the oscillator\n\t */\n\tprotected _stop(time: Seconds): void {\n\t\tthis._modulator.stop(time);\n\t\tthis._carrier.stop(time);\n\t}\n\n\t/**\n\t *  restart the oscillator\n\t */\n\trestart(time?: Time): this {\n\t\tthis._modulator.restart(time);\n\t\tthis._carrier.restart(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The type of the carrier oscillator\n\t */\n\tget type(): ToneOscillatorType {\n\t\treturn this._carrier.type;\n\t}\n\tset type(type: ToneOscillatorType) {\n\t\tthis._carrier.type = type;\n\t}\n\n\t/**\n\t * The oscillator type without the partialsCount appended to the end\n\t * @example\n\t * osc.type = 'sine2'\n\t * osc.baseType //'sine'\n\t * osc.partialCount = 2\n\t */\n\tget baseType(): OscillatorType {\n\t\treturn this._carrier.baseType;\n\t}\n\tset baseType(baseType: OscillatorType) {\n\t\tthis._carrier.baseType = baseType;\n\t}\n\n\t/**\n\t * 'partialCount' offers an alternative way to set the number of used partials.\n\t * When partialCount is 0, the maximum number of partials are used when representing\n\t * the waveform using the periodicWave. When 'partials' is set, this value is\n\t * not settable, but equals the length of the partials array.\n\t */\n\tget partialCount(): number {\n\t\treturn this._carrier.partialCount;\n\t}\n\n\tset partialCount(partialCount: number) {\n\t\tthis._carrier.partialCount = partialCount;\n\t}\n\n\t/**\n\t * The type of the modulator oscillator\n\t */\n\tget modulationType(): ToneOscillatorType {\n\t\treturn this._modulator.type;\n\t}\n\n\tset modulationType(type: ToneOscillatorType) {\n\t\tthis._modulator.type = type;\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._carrier.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._carrier.phase = phase;\n\t\tthis._modulator.phase = phase;\n\t}\n\n\t/**\n\t * The partials of the carrier waveform. A partial represents\n\t * the amplitude at a harmonic. The first harmonic is the\n\t * fundamental frequency, the second is the octave and so on\n\t * following the harmonic series.\n\t * Setting this value will automatically set the type to \"custom\".\n\t * The value is an empty array when the type is not \"custom\".\n\t * @example\n\t * osc.partials = [1, 0.2, 0.01];\n\t */\n\tget partials(): number[] {\n\t\treturn this._carrier.partials;\n\t}\n\tset partials(partials: number[]) {\n\t\tthis._carrier.partials = partials;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\tthis.harmonicity.dispose();\n\t\tthis._carrier.dispose();\n\t\tthis._modulator.dispose();\n\t\tthis._modulationNode.dispose();\n\t\tthis._modulationScale.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { FMConstructorOptions, FMOscillatorOptions,\n\tNonCustomOscillatorType, ToneOscillatorInterface, ToneOscillatorType } from \"./OscillatorInterface\";\n\n/**\n * FMOscillator implements a frequency modulation synthesis\n * ```\n *                                              +-------------+\n * +---------------+        +-------------+     | Carrier Osc |\n * | Modulator Osc +>-------> GainNode    |     |             +--->Output\n * +---------------+        |             +>----> frequency   |\n *                       +--> gain        |     +-------------+\n *                       |  +-------------+\n * +-----------------+   |\n * | modulationIndex +>--+\n * +-----------------+\n * ```\n *\n * @param frequency The starting frequency of the oscillator.\n * @param type The type of the carrier oscillator.\n * @param modulationType The type of the modulator oscillator.\n * @example\n * //a sine oscillator frequency-modulated by a square wave\n * var fmOsc = new FMOscillator(\"Ab3\", \"sine\", \"square\").toDestination().start();\n */\nexport class FMOscillator extends Source<FMOscillatorOptions> implements ToneOscillatorInterface {\n\n\tname = \"FMOscillator\";\n\n\t/**\n\t *  The carrier oscillator\n\t */\n\tprivate _carrier: Oscillator = new Oscillator({\n\t\tcontext : this.context,\n\t\tfrequency: 0,\n\t});\n\n\t/**\n\t *  The oscillator's frequency\n\t */\n\treadonly frequency: Signal<Frequency> = new Signal({\n\t\tcontext: this.context,\n\t\tunits: \"frequency\",\n\t});\n\n\t/**\n\t *  The detune control signal.\n\t */\n\treadonly detune: Signal<Cents> = this._carrier.detune;\n\n\t/**\n\t *  The modulating oscillator\n\t */\n\tprivate _modulator = new Oscillator({ context : this.context });\n\n\t/**\n\t *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators.\n\t *  A harmonicity of 1 gives both oscillators the same frequency.\n\t *  Harmonicity = 2 means a change of an octave.\n\t *  @example\n\t * //pitch the modulator an octave below carrier\n\t * synth.harmonicity.value = 0.5;\n\t */\n\treadonly harmonicity: Signal<Positive> = new Multiply({\n\t\tcontext: this.context,\n\t\tunits: \"positive\",\n\t});\n\n\t/**\n\t *  The modulation index which is in essence the depth or amount of the modulation. In other terms it is the\n\t *  ratio of the frequency of the modulating signal (mf) to the amplitude of the\n\t *  modulating signal (ma) -- as in ma/mf.\n\t */\n\treadonly modulationIndex: Signal<Positive> = new Multiply({\n\t\tcontext: this.context,\n\t\tunits: \"positive\",\n\t});\n\n\t/**\n\t *  the node where the modulation happens\n\t */\n\tprivate _modulationNode = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\n\tconstructor(options?: Partial<FMConstructorOptions>);\n\tconstructor(frequency?: Frequency, type?: ToneOscillatorType, modulationType?: ToneOscillatorType);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(FMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]));\n\t\tconst options = optionsFromArguments(FMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]);\n\n\t\tthis._carrier.type = options.type;\n\t\tthis._modulator.type = options.modulationType;\n\t\tthis.frequency.setValueAtTime(options.frequency, 0);\n\t\tthis.detune.setValueAtTime(options.detune, 0);\n\t\tthis.harmonicity.setValueAtTime(options.harmonicity, 0);\n\t\tthis.modulationIndex.setValueAtTime(options.modulationIndex, 0);\n\n\t\t// connections\n\t\tthis.frequency.connect(this._carrier.frequency);\n\t\tthis.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t\tthis.frequency.chain(this.modulationIndex, this._modulationNode);\n\t\tthis._modulator.connect(this._modulationNode.gain);\n\t\tthis._modulationNode.connect(this._carrier.frequency);\n\t\tthis._carrier.connect(this.output);\n\t\tthis.detune.connect(this._modulator.detune);\n\n\t\tthis.phase = options.phase;\n\n\t\treadOnly(this, [\"modulationIndex\", \"frequency\", \"detune\", \"harmonicity\"]);\n\t}\n\n\tstatic getDefaults(): FMOscillatorOptions {\n\t\treturn Object.assign(Oscillator.getDefaults(), {\n\t\t\tharmonicity: 1,\n\t\t\tmodulationIndex: 2,\n\t\t\tmodulationType: \"square\" as NonCustomOscillatorType,\n\t\t});\n\t}\n\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\tthis._modulator.start(time);\n\t\tthis._carrier.start(time);\n\t}\n\n\t/**\n\t *  stop the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\tthis._modulator.stop(time);\n\t\tthis._carrier.stop(time);\n\t}\n\n\t/**\n\t *  stop and restart the oscillator\n\t */\n\trestart(time?: Time): this {\n\t\tthis._modulator.restart(time);\n\t\tthis._carrier.restart(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The type of the carrier oscillator\n\t */\n\tget type(): ToneOscillatorType {\n\t\treturn this._carrier.type;\n\t}\n\tset type(type: ToneOscillatorType) {\n\t\tthis._carrier.type = type;\n\t}\n\n\t/**\n\t * The oscillator type without the partialsCount appended to the end\n\t * @example\n\t * osc.type = 'sine2'\n\t * osc.baseType //'sine'\n\t * osc.partialCount = 2\n\t */\n\tget baseType(): OscillatorType {\n\t\treturn this._carrier.baseType;\n\t}\n\tset baseType(baseType: OscillatorType) {\n\t\tthis._carrier.baseType = baseType;\n\t}\n\n\t/**\n\t * 'partialCount' offers an alternative way to set the number of used partials.\n\t * When partialCount is 0, the maximum number of partials are used when representing\n\t * the waveform using the periodicWave. When 'partials' is set, this value is\n\t * not settable, but equals the length of the partials array.\n\t */\n\tget partialCount(): number {\n\t\treturn this._carrier.partialCount;\n\t}\n\tset partialCount(partialCount: number) {\n\t\tthis._carrier.partialCount = partialCount;\n\t}\n\n\t/**\n\t * The type of the modulator oscillator\n\t */\n\tget modulationType(): ToneOscillatorType {\n\t\treturn this._modulator.type;\n\t}\n\tset modulationType(type: ToneOscillatorType) {\n\t\tthis._modulator.type = type;\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._carrier.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._carrier.phase = phase;\n\t\tthis._modulator.phase = phase;\n\t}\n\n\t/**\n\t * The partials of the carrier waveform. A partial represents\n\t * the amplitude at a harmonic. The first harmonic is the\n\t * fundamental frequency, the second is the octave and so on\n\t * following the harmonic series.\n\t * Setting this value will automatically set the type to \"custom\".\n\t * The value is an empty array when the type is not \"custom\".\n\t * @example\n\t * osc.partials = [1, 0.2, 0.01];\n\t */\n\tget partials(): number[] {\n\t\treturn this._carrier.partials;\n\t}\n\tset partials(partials: number[]) {\n\t\tthis._carrier.partials = partials;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.harmonicity.dispose();\n\t\tthis._carrier.dispose();\n\t\tthis._modulator.dispose();\n\t\tthis._modulationNode.dispose();\n\t\tthis.modulationIndex.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { WaveShaper } from \"../../signal/WaveShaper\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { PulseOscillatorOptions, ToneOscillatorInterface } from \"./OscillatorInterface\";\n\n/**\n * PulseOscillator is an oscillator with control over pulse width,\n * also known as the duty cycle. At 50% duty cycle (width = 0) the wave is\n * a square wave.\n * [Read more](https://wigglewave.wordpress.com/2014/08/16/pulse-waveforms-and-harmonics/).\n * ```\n *    width = -0.25        width = 0.0          width = 0.25\n *\n *   +-----+            +-------+       +    +-------+     +-+\n *   |     |            |       |       |            |     |\n *   |     |            |       |       |            |     |\n * +-+     +-------+    +       +-------+            +-----+\n *\n *\n *    width = -0.5                              width = 0.5\n *\n *     +---+                                 +-------+   +---+\n *     |   |                                         |   |\n *     |   |                                         |   |\n * +---+   +-------+                                 +---+\n *\n *\n *    width = -0.75                             width = 0.75\n *\n *       +-+                                 +-------+ +-----+\n *       | |                                         | |\n *       | |                                         | |\n * +-----+ +-------+                                 +-+\n * ```\n * @param frequency The frequency of the oscillator\n * @param width The width of the pulse\n * @example\n * var pulse = new PulseOscillator(\"E5\", 0.4).toDestination().start();\n */\nexport class PulseOscillator extends Source<PulseOscillatorOptions> implements ToneOscillatorInterface {\n\n\tname = \"PulseOscillator\";\n\n\t/**\n\t *  The width of the pulse.\n\t */\n\twidth: Signal<AudioRange> = new Signal({\n\t\tcontext: this.context,\n\t\tunits: \"audioRange\",\n\t});\n\n\t/**\n\t *  gate the width amount\n\t */\n\tprivate _widthGate: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\n\t/**\n\t *  the sawtooth oscillator\n\t */\n\tprivate _sawtooth: Oscillator = new Oscillator({\n\t\tcontext: this.context,\n\t\ttype : \"sawtooth\",\n\t});\n\n\t/**\n\t *  The frequency control.\n\t */\n\tfrequency: Signal<Frequency> = this._sawtooth.frequency;\n\n\t/**\n\t *  The detune in cents.\n\t */\n\tdetune: Signal<Cents> = this._sawtooth.detune;\n\n\t/**\n\t *  Threshold the signal to turn it into a square\n\t */\n\tprivate _thresh = new WaveShaper({\n\t\tcontext: this.context,\n\t\tmapping: val => val <= 0 ? -1 : 1,\n\t});\n\n\tconstructor(options?: Partial<PulseOscillatorOptions>);\n\tconstructor(frequency?: Frequency, width?: AudioRange);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(PulseOscillator.getDefaults(), arguments, [\"frequency\", \"width\"]));\n\t\tconst options = optionsFromArguments(PulseOscillator.getDefaults(), arguments, [\"frequency\", \"width\"]);\n\n\t\tthis.width.setValueAtTime(options.width, 0);\n\t\tthis._sawtooth.frequency.setValueAtTime(options.frequency, 0);\n\t\tthis._sawtooth.detune.setValueAtTime(options.detune, 0);\n\t\tthis._sawtooth.phase = options.phase;\n\n\t\t// connections\n\t\tthis._sawtooth.chain(this._thresh, this.output);\n\t\tthis.width.chain(this._widthGate, this._thresh);\n\t\treadOnly(this, [\"width\", \"frequency\", \"detune\"]);\n\t}\n\n\tstatic getDefaults(): PulseOscillatorOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tfrequency: 440,\n\t\t\tphase: 0,\n\t\t\ttype: \"pulse\" as \"pulse\",\n\t\t\twidth: 0.2,\n\t\t});\n\t}\n\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._sawtooth.start(time);\n\t\tthis._widthGate.gain.setValueAtTime(1, time);\n\t}\n\n\t/**\n\t *  stop the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._sawtooth.stop(time);\n\t\t// the width is still connected to the output.\n\t\t// that needs to be stopped also\n\t\tthis._widthGate.gain.cancelScheduledValues(time);\n\t\tthis._widthGate.gain.setValueAtTime(0, time);\n\t}\n\n\t/**\n\t *  Restart the oscillator\n\t */\n\trestart(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._sawtooth.restart(computedTime);\n\t\tthis._widthGate.gain.cancelScheduledValues(computedTime);\n\t\tthis._widthGate.gain.setValueAtTime(1, computedTime);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._sawtooth.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._sawtooth.phase = phase;\n\t}\n\n\t/**\n\t * The type of the oscillator. Always returns \"pulse\".\n\t */\n\tget type(): \"pulse\" {\n\t\treturn \"pulse\";\n\t}\n\n\t/**\n\t * The baseType of the oscillator. Always returns \"pulse\".\n\t */\n\tget baseType(): \"pulse\" {\n\t\treturn \"pulse\";\n\t}\n\n\t/**\n\t * The partials of the waveform. Cannot set partials for this waveform type\n\t */\n\tget partials(): number[] {\n\t\treturn [];\n\t}\n\n\t/**\n\t * No partials for this waveform type.\n\t */\n\tget partialCount(): number {\n\t\treturn 0;\n\t}\n\n\t/**\n\t *  Clean up method.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._sawtooth.dispose();\n\t\tthis.width.dispose();\n\t\tthis._widthGate.dispose();\n\t\tthis._thresh.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { AudioToGain } from \"../../signal/AudioToGain\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { FatConstructorOptions, FatOscillatorOptions,\n\tToneOscillatorInterface, ToneOscillatorType } from \"./OscillatorInterface\";\n\n/**\n *  FatOscillator is an array of oscillators with detune spread between the oscillators\n *  @param frequency The oscillator's frequency.\n *  @param type The type of the oscillator.\n *  @param spread The detune spread between the oscillators.\n *  @example\n * var fatOsc = new FatOscillator(\"Ab3\", \"sine\", 40).toDestination().start();\n */\nexport class FatOscillator extends Source<FatOscillatorOptions> implements ToneOscillatorInterface {\n\n\tname = \"FatOscillator\";\n\n\t/**\n\t *  The oscillator's frequency\n\t */\n\treadonly frequency: Signal<Frequency> = new Signal({\n\t\tcontext: this.context,\n\t\tunits: \"frequency\",\n\t});\n\n\t/**\n\t *  The detune control signal.\n\t */\n\treadonly detune: Signal<Cents> = new Signal({\n\t\tcontext: this.context,\n\t\tunits: \"cents\",\n\t});\n\n\t/**\n\t *  The array of oscillators\n\t */\n\tprivate _oscillators: Oscillator[] = [];\n\n\t/**\n\t *  The total spread of the oscillators\n\t */\n\tprivate _spread: Cents;\n\n\t/**\n\t *  The type of the oscillator\n\t */\n\tprivate _type: ToneOscillatorType;\n\n\t/**\n\t *  The phase of the oscillators\n\t */\n\tprivate _phase: Degrees;\n\n\t/**\n\t *  The partials array\n\t */\n\tprivate _partials: number[];\n\n\t/**\n\t *  The number of partials to use\n\t */\n\tprivate _partialCount: number;\n\n\tconstructor(options?: Partial<FatConstructorOptions>);\n\tconstructor(frequency?: Frequency, type?: ToneOscillatorType, modulationType?: ToneOscillatorType);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(FatOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"spread\"]));\n\t\tconst options = optionsFromArguments(FatOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"spread\"]);\n\n\t\tthis.frequency.setValueAtTime(options.frequency, 0);\n\t\tthis.detune.setValueAtTime(options.detune, 0);\n\n\t\tthis._spread = options.spread;\n\t\tthis._type = options.type;\n\t\tthis._phase = options.phase;\n\t\tthis._partials = options.partials;\n\t\tthis._partialCount = options.partialCount;\n\n\t\t// set the count initially\n\t\tthis.count = options.count;\n\n\t\treadOnly(this, [\"frequency\", \"detune\"]);\n\t}\n\n\tstatic getDefaults(): FatOscillatorOptions {\n\t\treturn Object.assign(Oscillator.getDefaults(), {\n\t\t\tcount : 3,\n\t\t\tspread : 20,\n\t\t\ttype : \"sawtooth\",\n\t\t});\n\t}\n\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._forEach(osc => osc.start(time));\n\t}\n\n\t/**\n\t *  stop the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._forEach(osc => osc.stop(time));\n\t}\n\n\t/**\n\t *  restart the oscillator\n\t */\n\trestart(time): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis._forEach(osc => osc.restart(time));\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over all of the oscillators\n\t */\n\tprivate _forEach(iterator: (osc: Oscillator, index: number) => void): void {\n\t\tfor (let i = 0; i < this._oscillators.length; i++) {\n\t\t\titerator(this._oscillators[i], i);\n\t\t}\n\t}\n\n\t/**\n\t * The type of the oscillator\n\t */\n\tget type(): ToneOscillatorType {\n\t\treturn this._type;\n\t}\n\n\tset type(type: ToneOscillatorType) {\n\t\tthis._type = type;\n\t\tthis._forEach(osc => osc.type = type);\n\t}\n\n\t/**\n\t * The detune spread between the oscillators. If \"count\" is\n\t * set to 3 oscillators and the \"spread\" is set to 40,\n\t * the three oscillators would be detuned like this: [-20, 0, 20]\n\t * for a total detune spread of 40 cents.\n\t */\n\tget spread(): Cents {\n\t\treturn this._spread;\n\t}\n\n\tset spread(spread: Cents) {\n\t\tthis._spread = spread;\n\t\tif (this._oscillators.length > 1) {\n\t\t\tconst start = -spread / 2;\n\t\t\tconst step = spread / (this._oscillators.length - 1);\n\t\t\tthis._forEach((osc, i) => osc.detune.value = start + step * i);\n\t\t}\n\t}\n\n\t/**\n\t * The number of detuned oscillators. Should be an integer greater than 1.\n\t */\n\tget count(): number {\n\t\treturn this._oscillators.length;\n\t}\n\n\tset count(count: number) {\n\t\tcount = Math.max(count, 1);\n\t\tif (this._oscillators.length !== count) {\n\t\t\t// dispose the previous oscillators\n\t\t\tthis._forEach(osc => osc.dispose());\n\t\t\tthis._oscillators = [];\n\t\t\tfor (let i = 0; i < count; i++) {\n\t\t\t\tconst osc = new Oscillator({\n\t\t\t\t\tcontext : this.context,\n\t\t\t\t});\n\t\t\t\tif (this.type === \"custom\") {\n\t\t\t\t\tosc.partials = this._partials;\n\t\t\t\t} else {\n\t\t\t\t\tosc.type = this._type;\n\t\t\t\t}\n\t\t\t\tosc.partialCount = this._partialCount;\n\t\t\t\tosc.phase = this._phase + (i / count) * 360;\n\t\t\t\tosc.volume.value = -6 - count * 1.1;\n\t\t\t\tthis.frequency.connect(osc.frequency);\n\t\t\t\tthis.detune.connect(osc.detune);\n\t\t\t\tosc.connect(this.output);\n\t\t\t\tthis._oscillators[i] = osc;\n\t\t\t}\n\t\t\t// set the spread\n\t\t\tthis.spread = this._spread;\n\t\t\tif (this.state === \"started\") {\n\t\t\t\tthis._forEach(osc => osc.start());\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._phase = phase;\n\t\tthis._forEach(osc => osc.phase = phase);\n\t}\n\n\t/**\n\t * The oscillator type without the partialsCount appended to the end\n\t * @example\n\t * osc.type = 'sine2'\n\t * osc.baseType //'sine'\n\t * osc.partialCount = 2\n\t */\n\tget baseType(): OscillatorType {\n\t\treturn this._oscillators[0].baseType;\n\t}\n\tset baseType(baseType: OscillatorType) {\n\t\tthis._forEach(osc => osc.baseType = baseType);\n\t\tthis._type = this._oscillators[0].type;\n\t}\n\n\t/**\n\t * The partials of the carrier waveform. A partial represents\n\t * the amplitude at a harmonic. The first harmonic is the\n\t * fundamental frequency, the second is the octave and so on\n\t * following the harmonic series.\n\t * Setting this value will automatically set the type to \"custom\".\n\t * The value is an empty array when the type is not \"custom\".\n\t * @memberOf FatOscillator#\n\t * @type {Array}\n\t * @name partials\n\t * @example\n\t * osc.partials = [1, 0.2, 0.01];\n\t */\n\tget partials(): number[] {\n\t\treturn this._oscillators[0].partials;\n\t}\n\tset partials(partials: number[]) {\n\t\tthis._partials = partials;\n\t\tif (partials.length) {\n\t\t\tthis._type = \"custom\";\n\t\t\tthis._forEach(osc => osc.partials = partials);\n\t\t}\n\t}\n\n\t/**\n\t * 'partialCount' offers an alternative way to set the number of used partials.\n\t * When partialCount is 0, the maximum number of partials are used when representing\n\t * the waveform using the periodicWave. When 'partials' is set, this value is\n\t * not settable, but equals the length of the partials array.\n\t * @memberOf FatOscillator#\n\t * @type {Number}\n\t * @name partialCount\n\t */\n\tget partialCount(): number {\n\t\treturn this._oscillators[0].partialCount;\n\t}\n\tset partialCount(partialCount: number) {\n\t\tthis._partialCount = partialCount;\n\t\tthis._forEach(osc => osc.partialCount = partialCount);\n\t\tthis._type = this._oscillators[0].type;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\tthis._forEach(osc => osc.dispose());\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { PWMOscillatorOptions, ToneOscillatorInterface } from \"./OscillatorInterface\";\nimport { PulseOscillator } from \"./PulseOscillator\";\n\n/**\n * PWMOscillator modulates the width of a Tone.PulseOscillator\n * at the modulationFrequency. This has the effect of continuously\n * changing the timbre of the oscillator by altering the harmonics\n * generated.\n *\n * @param {Frequency} frequency The starting frequency of the oscillator.\n * @param {Frequency} modulationFrequency The modulation frequency of the width of the pulse.\n * @example\n *  var pwm = new PWMOscillator(\"Ab3\", 0.3).toDestination().start();\n */\nexport class PWMOscillator extends Source<PWMOscillatorOptions> implements ToneOscillatorInterface {\n\n\tname = \"PWMOscillator\";\n\n\treadonly sourceType = \"pwm\";\n\n\t/**\n\t *  the pulse oscillator\n\t */\n\tprivate _pulse: PulseOscillator = new PulseOscillator({ context: this.context });\n\t/**\n\t *  the modulator\n\t *  @type {Tone.Oscillator}\n\t *  @private\n\t */\n\tprivate _modulator: Oscillator = new Oscillator({ context: this.context });\n\n\t/**\n\t *  Scale the oscillator so it doesn't go silent\n\t *  at the extreme values.\n\t */\n\tprivate _scale: Multiply = new Multiply({\n\t\tcontext: this.context,\n\t\tvalue: 2,\n\t});\n\n\t/**\n\t *  The frequency control.\n\t */\n\treadonly frequency: Signal<Frequency> = this._modulator.frequency;\n\n\t/**\n\t *  The detune of the oscillator.\n\t */\n\treadonly detune: Signal<Cents> = this._modulator.detune;\n\n\t/**\n\t *  The modulation rate of the oscillator.\n\t */\n\treadonly modulationFrequency: Signal<Frequency> = this._pulse.frequency;\n\n\tconstructor(options?: Partial<PWMOscillatorOptions>);\n\tconstructor(frequency?: Frequency, modulationFrequency?: Frequency);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(PWMOscillator.getDefaults(), arguments, [\"frequency\", \"modulationFrequency\"]));\n\t\tconst options = optionsFromArguments(PWMOscillator.getDefaults(), arguments, [\"frequency\", \"modulationFrequency\"]);\n\n\t\t// change the pulse oscillator type\n\t\t// @ts-ignore\n\t\tthis._pulse._sawtooth.type = \"sine\";\n\n\t\tthis._pulse.frequency.setValueAtTime(options.modulationFrequency, 0);\n\t\tthis._modulator.frequency.setValueAtTime(options.frequency, 0);\n\t\tthis._modulator.detune.setValueAtTime(options.detune, 0);\n\t\tthis._modulator.phase = options.phase;\n\n\t\t// connections\n\t\tthis._modulator.chain(this._scale, this._pulse.width);\n\t\tthis._pulse.connect(this.output);\n\t\treadOnly(this, [\"modulationFrequency\", \"frequency\", \"detune\"]);\n\t}\n\n\tstatic getDefaults(): PWMOscillatorOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tfrequency: 440,\n\t\t\tmodulationFrequency: 0.4,\n\t\t\tphase: 0,\n\t\t\ttype: \"pwm\" as \"pwm\",\n\t\t});\n\t}\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._modulator.start(time);\n\t\tthis._pulse.start(time);\n\t}\n\n\t/**\n\t *  stop the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._modulator.stop(time);\n\t\tthis._pulse.stop(time);\n\t}\n\n\t/**\n\t *  restart the oscillator\n\t */\n\trestart(time?: Time): this {\n\t\tthis._modulator.restart(time);\n\t\tthis._pulse.restart(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The type of the oscillator. Always returns \"pwm\".\n\t */\n\tget type(): \"pwm\" {\n\t\treturn \"pwm\";\n\t}\n\n\t/**\n\t * The baseType of the oscillator. Always returns \"pwm\".\n\t */\n\tget baseType(): \"pwm\" {\n\t\treturn \"pwm\";\n\t}\n\n\t/**\n\t * The partials of the waveform. Cannot set partials for this waveform type\n\t */\n\tget partials(): number[] {\n\t\treturn [];\n\t}\n\n\t/**\n\t * No partials for this waveform type.\n\t */\n\tget partialCount(): number {\n\t\treturn 0;\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._modulator.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._modulator.phase = phase;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._pulse.dispose();\n\t\tthis._scale.dispose();\n\t\tthis._modulator.dispose();\n\t\treturn this;\n\t}\n}\n","import { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { isNumber, isString } from \"../../core/util/TypeCheck\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { AMOscillator } from \"./AMOscillator\";\nimport { FatOscillator } from \"./FatOscillator\";\nimport { FMOscillator } from \"./FMOscillator\";\nimport { Oscillator } from \"./Oscillator\";\nimport { AMOscillatorOptions, FatOscillatorOptions,\n\tFMOscillatorOptions, OmniOscillatorConstructorOptions,\n\tOmniOscillatorOptions, OmniOscillatorType,\n\tPulseOscillatorOptions, PWMOscillatorOptions,\n\tToneOscillatorInterface, ToneOscillatorOptions, ToneOscillatorType } from \"./OscillatorInterface\";\nimport { PulseOscillator } from \"./PulseOscillator\";\nimport { PWMOscillator } from \"./PWMOscillator\";\n\n/**\n * All of the oscillator types that OmniOscillator can take on\n */\ntype AnyOscillator = Oscillator | PWMOscillator | PulseOscillator | FatOscillator | AMOscillator | FMOscillator;\n\n/**\n * The constructor of each of the OmniOscillator types\n */\ntype TypeofAnyOscillator = typeof Oscillator | typeof PWMOscillator |\n\ttypeof PulseOscillator | typeof FatOscillator |\n\ttypeof AMOscillator | typeof FMOscillator;\n\n/**\n * Select the Oscillator's Options depending on the generic type.\n */\ntype ConditionalOptions<Osc extends AnyOscillator> =\n\tOsc extends FMOscillator ? FMOscillatorOptions :\n\tOsc extends Oscillator ? ToneOscillatorOptions :\n\tOsc extends AMOscillator ? AMOscillatorOptions :\n\tOsc extends FatOscillator ? FatOscillatorOptions :\n\tOsc extends PulseOscillator ? PulseOscillatorOptions :\n\tOsc extends PWMOscillator ? PWMOscillatorOptions :\n\tToneOscillatorOptions;\n\n/**\n * The aggregate options of all of the oscillators\n */\n// export type OmniOscillatorOptions = ConditionalOptions<AnyOscillator>;\n\n/**\n * All of the Oscillator constructor types mapped to their name.\n */\ninterface OmniOscillatorSource {\n\t\"fm\": FMOscillator;\n\t\"am\": AMOscillator;\n\t\"pwm\": PWMOscillator;\n\t\"pulse\": PulseOscillator;\n\t\"oscillator\": Oscillator;\n\t\"fat\": FatOscillator;\n}\n\n/**\n * The available oscillator types.\n */\nexport type OmniOscSourceType = keyof OmniOscillatorSource;\n\n// Conditional Types\ntype IsAmOrFmOscillator<Osc, Ret> = Osc extends AMOscillator ? Ret : Osc extends FMOscillator ? Ret : undefined;\ntype IsFatOscillator<Osc, Ret> = Osc extends FatOscillator ? Ret : undefined;\ntype IsPWMOscillator<Osc, Ret> = Osc extends PWMOscillator ? Ret : undefined;\ntype IsPulseOscillator<Osc, Ret> = Osc extends PulseOscillator ? Ret : undefined;\ntype IsFMOscillator<Osc, Ret> = Osc extends FMOscillator ? Ret : undefined;\n\n// tslint:disable-next-line: variable-name\nconst OmniOscillatorSourceMap: {\n\t[key in OmniOscSourceType] : TypeofAnyOscillator\n} = {\n\tam: AMOscillator,\n\tfat: FatOscillator,\n\tfm: FMOscillator,\n\toscillator: Oscillator,\n\tpulse: PulseOscillator,\n\tpwm: PWMOscillator,\n};\n\n/**\n * OmniOscillator aggregates Tone.Oscillator, Tone.PulseOscillator,\n * Tone.PWMOscillator, Tone.FMOscillator, Tone.AMOscillator, and Tone.FatOscillator\n * into one class. The oscillator class can be changed by setting the `type`.\n * `omniOsc.type = \"pwm\"` will set it to the Tone.PWMOscillator. Prefixing\n * any of the basic types (\"sine\", \"square4\", etc.) with \"fm\", \"am\", or \"fat\"\n * will use the FMOscillator, AMOscillator or FatOscillator respectively.\n * For example: `omniOsc.type = \"fatsawtooth\"` will create set the oscillator\n * to a FatOscillator of type \"sawtooth\".\n *\n * @param frequency The initial frequency of the oscillator.\n * @param type The type of the oscillator.\n * @example\n * var omniOsc = new OmniOscillator(\"C#4\", \"pwm\");\n */\nexport class OmniOscillator<OscType extends AnyOscillator>\nextends Source<OmniOscillatorConstructorOptions>\nimplements Omit<ToneOscillatorInterface, \"type\"> {\n\n\tname = \"OmniOscillator\";\n\n\t/**\n\t *  The frequency control.\n\t */\n\treadonly frequency: Signal<Frequency> = new Signal({\n\t\tcontext: this.context,\n\t\tunits: \"frequency\",\n\t});\n\n\t/**\n\t *  The detune control.\n\t */\n\treadonly detune: Signal<Cents> = new Signal({\n\t\tcontext: this.context,\n\t\tunits: \"cents\",\n\t});\n\n\t/**\n\t * The oscillator that can switch types\n\t */\n\tprivate _oscillator!: AnyOscillator;\n\n\t/**\n\t *  the type of the oscillator source\n\t */\n\tprivate _sourceType!: OmniOscSourceType;\n\n\tconstructor(options?: Partial<OmniOscillatorConstructorOptions>);\n\tconstructor(frequency?: Frequency, type?: OmniOscillatorType);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(OmniOscillator.getDefaults(), arguments, [\"frequency\", \"type\"]));\n\t\tconst options = optionsFromArguments(OmniOscillator.getDefaults(), arguments, [\"frequency\", \"type\"]);\n\n\t\tthis.frequency.setValueAtTime(options.frequency, 0);\n\t\tthis.detune.setValueAtTime(options.detune, 0);\n\t\treadOnly(this, [\"frequency\", \"detune\"]);\n\n\t\t// set the options\n\t\tthis.set(options);\n\t}\n\n\tstatic getDefaults(): OmniOscillatorOptions {\n\t\treturn Object.assign(\n\t\t\tOscillator.getDefaults(),\n\t\t\tFMOscillator.getDefaults(),\n\t\t\tAMOscillator.getDefaults(),\n\t\t\tFatOscillator.getDefaults(),\n\t\t\tPulseOscillator.getDefaults(),\n\t\t\tPWMOscillator.getDefaults(),\n\t\t);\n\t\t// return Oscillator.getDefaults() as OmniOscillatorConstructorOptions;\n\t}\n\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\tthis._oscillator.start(time);\n\t}\n\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\tthis._oscillator.stop(time);\n\t}\n\n\trestart(time?: Time): this {\n\t\tthis._oscillator.restart(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The type of the oscillator. Can be any of the basic types: sine, square, triangle, sawtooth. Or\n\t * prefix the basic types with \"fm\", \"am\", or \"fat\" to use the FMOscillator, AMOscillator or FatOscillator\n\t * types. The oscillator could also be set to \"pwm\" or \"pulse\". All of the parameters of the\n\t * oscillator's class are accessible when the oscillator is set to that type, but throws an error\n\t * when it's not.\n\t * @example\n\t * omniOsc.type = \"pwm\";\n\t * //modulationFrequency is parameter which is available\n\t * //only when the type is \"pwm\".\n\t * omniOsc.modulationFrequency.value = 0.5;\n\t * @example\n\t * //an square wave frequency modulated by a sawtooth\n\t * omniOsc.type = \"fmsquare\";\n\t * omniOsc.modulationType = \"sawtooth\";\n\t */\n\tget type(): OmniOscillatorType {\n\t\tlet prefix = \"\";\n\t\tif ([\"am\", \"fm\", \"fat\"].some(p => this._sourceType === p)) {\n\t\t\tprefix = this._sourceType;\n\t\t}\n\t\treturn prefix + this._oscillator.type as OmniOscillatorType;\n\t}\n\tset type(type) {\n\t\tif (type.substr(0, 2) === \"fm\") {\n\t\t\tthis._createNewOscillator(\"fm\");\n\t\t\tthis._oscillator = this._oscillator as FMOscillator;\n\t\t\tthis._oscillator.type = type.substr(2) as ToneOscillatorType;\n\t\t} else if (type.substr(0, 2) === \"am\") {\n\t\t\tthis._createNewOscillator(\"am\");\n\t\t\tthis._oscillator = this._oscillator as AMOscillator;\n\t\t\tthis._oscillator.type = type.substr(2)  as ToneOscillatorType;\n\t\t} else if (type.substr(0, 3) === \"fat\") {\n\t\t\tthis._createNewOscillator(\"fat\");\n\t\t\tthis._oscillator = this._oscillator as FatOscillator;\n\t\t\tthis._oscillator.type = type.substr(3)  as ToneOscillatorType;\n\t\t} else if (type === \"pwm\") {\n\t\t\tthis._createNewOscillator(\"pwm\");\n\t\t\tthis._oscillator = this._oscillator as PWMOscillator;\n\t\t} else if (type === \"pulse\") {\n\t\t\tthis._createNewOscillator(\"pulse\");\n\t\t} else {\n\t\t\tthis._createNewOscillator(\"oscillator\");\n\t\t\tthis._oscillator = this._oscillator as Oscillator;\n\t\t\tthis._oscillator.type = (type as ToneOscillatorType);\n\t\t}\n\t}\n\n\t/**\n\t * The partials of the waveform. A partial represents\n\t * the amplitude at a harmonic. The first harmonic is the\n\t * fundamental frequency, the second is the octave and so on\n\t * following the harmonic series.\n\t * Setting this value will automatically set the type to \"custom\".\n\t * The value is an empty array when the type is not \"custom\".\n\t * This is not available on \"pwm\" and \"pulse\" oscillator types.\n\t * @example\n\t * osc.partials = [1, 0.2, 0.01];\n\t */\n\tget partials(): number[] {\n\t\treturn this._oscillator.partials;\n\t}\n\tset partials(partials) {\n\t\tif (!this._getOscType(this._oscillator, \"pulse\") && !this._getOscType(this._oscillator, \"pwm\")) {\n\t\t\tthis._oscillator.partials = partials;\n\t\t}\n\t}\n\n\t/**\n\t * The partial count of the oscillator. This is not available on \"pwm\" and \"pulse\" oscillator types.\n\t * @example\n\t * //set the maximum number of partials\n\t * osc.partialCount = 0;\n\t */\n\tget partialCount(): number {\n\t\treturn this._oscillator.partialCount;\n\t}\n\tset partialCount(partialCount) {\n\t\tif (!this._getOscType(this._oscillator, \"pulse\") && !this._getOscType(this._oscillator, \"pwm\")) {\n\t\t\tthis._oscillator.partialCount = partialCount;\n\t\t}\n\t}\n\n\t/**\n\t * Set the parameters at once. Either pass in an\n\t * object mapping parameters to values, or to set a\n\t * single parameter, by passing in a string and value.\n\t * The last argument is an optional ramp time which\n\t * will ramp any signal values to their destination value\n\t * over the duration of the rampTime.\n\t * @param  params\n\t * @example\n\t * //set values using an object\n\t * filter.set({\n\t * \t\"frequency\" : 300,\n\t * \t\"type\" : \"highpass\"\n\t * });\n\t */\n\tset(props: Partial<OmniOscillatorConstructorOptions>): this {\n\t\t// make sure the type is set first\n\t\tif (Reflect.has(props, \"type\") && props.type) {\n\t\t\tthis.type = props.type;\n\t\t\t// delete props.type;\n\t\t}\n\t\t// then set the rest\n\t\tsuper.set(props);\n\t\treturn this;\n\t}\n\n\tget(): OmniOscillatorConstructorOptions {\n\t\tconst options = this._oscillator.get();\n\t\t// @ts-ignore\n\t\toptions.type = this.type;\n\t\treturn options as OmniOscillatorOptions;\n\t}\n\n\t/**\n\t *  connect the oscillator to the frequency and detune signals\n\t */\n\tprivate _createNewOscillator(oscType: OmniOscSourceType): void {\n\t\tif (oscType !== this._sourceType) {\n\t\t\tthis._sourceType = oscType;\n\t\t\tconst oscConstructor = OmniOscillatorSourceMap[oscType];\n\t\t\t// short delay to avoid clicks on the change\n\t\t\tconst now = this.now();\n\t\t\tif (this._oscillator) {\n\t\t\t\tconst oldOsc = this._oscillator;\n\t\t\t\toldOsc.stop(now);\n\t\t\t\t// dispose the old one\n\t\t\t\tthis.context.setTimeout(() => oldOsc.dispose(), this.blockTime);\n\t\t\t}\n\t\t\t// @ts-ignore\n\t\t\tthis._oscillator = new oscConstructor({\n\t\t\t\tcontext : this.context,\n\t\t\t});\n\t\t\tthis.frequency.connect(this._oscillator.frequency);\n\t\t\tthis.detune.connect(this._oscillator.detune);\n\t\t\tthis._oscillator.connect(this.output);\n\t\t\tif (this.state === \"started\") {\n\t\t\t\tthis._oscillator.start(now);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._oscillator.phase;\n\t}\n\tset phase(phase) {\n\t\tthis._oscillator.phase = phase;\n\t}\n\n\t/**\n\t * The source type of the oscillator.\n\t * @example\n\t * var omniOsc = new OmniOscillator(440, \"fmsquare\");\n\t * omniOsc.sourceType // 'fm'\n\t */\n\tget sourceType(): OmniOscSourceType {\n\t\treturn this._sourceType;\n\t}\n\tset sourceType(sType) {\n\t\t// the basetype defaults to sine\n\t\tlet baseType = \"sine\";\n\t\tif (this._oscillator.type !== \"pwm\" && this._oscillator.type !== \"pulse\") {\n\t\t\tbaseType = this._oscillator.type;\n\t\t}\n\n\t\t// set the type\n\t\tif (sType === \"fm\") {\n\t\t\tthis.type = \"fm\" + baseType as OmniOscillatorType;\n\t\t} else if (sType === \"am\") {\n\t\t\tthis.type = \"am\" + baseType as OmniOscillatorType;\n\t\t} else if (sType === \"fat\") {\n\t\t\tthis.type = \"fat\" + baseType as OmniOscillatorType;\n\t\t} else if (sType === \"oscillator\") {\n\t\t\tthis.type = baseType as OmniOscillatorType;\n\t\t} else if (sType === \"pulse\") {\n\t\t\tthis.type = \"pulse\";\n\t\t} else if (sType === \"pwm\") {\n\t\t\tthis.type = \"pwm\";\n\t\t}\n\t}\n\n\tprivate _getOscType<SourceType extends OmniOscSourceType>(\n\t\tosc: AnyOscillator,\n\t\tsourceType: SourceType,\n\t): osc is OmniOscillatorSource[SourceType] {\n\t\treturn osc instanceof OmniOscillatorSourceMap[sourceType];\n\t}\n\n\t/**\n\t * The base type of the oscillator.\n\t * @example\n\t * var omniOsc = new OmniOscillator(440, \"fmsquare4\");\n\t * omniOsc.sourceType // 'fm'\n\t * omniOsc.baseType //'square'\n\t * omniOsc.partialCount //4\n\t */\n\tget baseType(): OscillatorType | \"pwm\" | \"pulse\" {\n\t\treturn this._oscillator.baseType;\n\t}\n\tset baseType(baseType) {\n\t\tif (!this._getOscType(this._oscillator, \"pulse\") &&\n\t\t\t!this._getOscType(this._oscillator, \"pwm\") &&\n\t\t\tbaseType !== \"pulse\" && baseType !== \"pwm\") {\n\t\t\tthis._oscillator.baseType = baseType;\n\t\t}\n\t}\n\n\t/**\n\t * The width of the oscillator when sourceType === \"pulse\".\n\t * @example\n\t * var omniOsc = new OmniOscillator(440, \"pulse\");\n\t * //can access the width attribute only if type === \"pulse\"\n\t * omniOsc.width.value = 0.2;\n\t */\n\tget width(): IsPulseOscillator<OscType, Signal<AudioRange>> {\n\t\tif (this._getOscType(this._oscillator, \"pulse\")) {\n\t\t\treturn this._oscillator.width as IsPulseOscillator<OscType, Signal<AudioRange>> ;\n\t\t} else {\n\t\t\treturn undefined as IsPulseOscillator<OscType, Signal<AudioRange>> ;\n\t\t}\n\t}\n\n\t/**\n\t * The number of detuned oscillators, when sourceType === \"fat\".\n\t */\n\tget count(): IsFatOscillator<OscType, number> {\n\t\tif (this._getOscType(this._oscillator, \"fat\")) {\n\t\t\treturn this._oscillator.count as IsFatOscillator<OscType, number>;\n\t\t} else {\n\t\t\treturn undefined as IsFatOscillator<OscType, number>;\n\t\t}\n\t}\n\tset count(count) {\n\t\tif (this._getOscType(this._oscillator, \"fat\") && isNumber(count)) {\n\t\t\tthis._oscillator.count = count;\n\t\t}\n\t}\n\n\t/**\n\t * The detune spread between the oscillators. If \"count\" is\n\t * set to 3 oscillators and the \"spread\" is set to 40,\n\t * the three oscillators would be detuned like this: [-20, 0, 20]\n\t * for a total detune spread of 40 cents. See Tone.FatOscillator\n\t * for more info.\n\t */\n\tget spread(): IsFatOscillator<OscType, Cents> {\n\t\tif (this._getOscType(this._oscillator, \"fat\")) {\n\t\t\treturn this._oscillator.spread as IsFatOscillator<OscType, Cents>;\n\t\t} else {\n\t\t\treturn undefined as IsFatOscillator<OscType, Cents>;\n\t\t}\n\t}\n\tset spread(spread) {\n\t\tif (this._getOscType(this._oscillator, \"fat\") && isNumber(spread)) {\n\t\t\tthis._oscillator.spread = spread;\n\t\t}\n\t}\n\n\t/**\n\t * The type of the modulator oscillator. Only if the oscillator\n\t * is set to \"am\" or \"fm\" types. see. Tone.AMOscillator or Tone.FMOscillator\n\t * for more info.\n\t */\n\tget modulationType(): IsAmOrFmOscillator<OscType, ToneOscillatorType> {\n\t\tif (this._getOscType(this._oscillator, \"fm\") || this._getOscType(this._oscillator, \"am\")) {\n\t\t\treturn this._oscillator.modulationType as IsAmOrFmOscillator<OscType, ToneOscillatorType>;\n\t\t} else {\n\t\t\treturn undefined as IsAmOrFmOscillator<OscType, ToneOscillatorType>;\n\t\t}\n\t}\n\tset modulationType(mType) {\n\t\tif ((this._getOscType(this._oscillator, \"fm\") || this._getOscType(this._oscillator, \"am\")) && isString(mType)) {\n\t\t\tthis._oscillator.modulationType = mType;\n\t\t}\n\t}\n\n\t/**\n\t * The modulation index which is in essence the depth or amount of the modulation. In other terms it is the\n\t * ratio of the frequency of the modulating signal (mf) to the amplitude of the\n\t * modulating signal (ma) -- as in ma/mf.\n\t * See Tone.FMOscillator for more info.\n\t */\n\tget modulationIndex(): IsFMOscillator<OscType, Signal<Positive>> {\n\t\tif (this._getOscType(this._oscillator, \"fm\")) {\n\t\t\treturn this._oscillator.modulationIndex as IsFMOscillator<OscType, Signal<Positive>>;\n\t\t} else {\n\t\t\treturn undefined as IsFMOscillator<OscType, Signal<Positive>>;\n\t\t}\n\t}\n\n\t/**\n\t *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators.\n\t *  A harmonicity of 1 gives both oscillators the same frequency.\n\t *  Harmonicity = 2 means a change of an octave. See Tone.AMOscillator or Tone.FMOscillator\n\t *  for more info.\n\t */\n\tget harmonicity(): IsAmOrFmOscillator<OscType, Signal<Positive>> {\n\t\tif (this._getOscType(this._oscillator, \"fm\") || this._getOscType(this._oscillator, \"am\")) {\n\t\t\treturn this._oscillator.harmonicity as IsAmOrFmOscillator<OscType, Signal<Positive>>;\n\t\t} else {\n\t\t\treturn undefined as IsAmOrFmOscillator<OscType, Signal<Positive>>;\n\t\t}\n\t}\n\n\t/**\n\t * The modulationFrequency Signal of the oscillator\n\t * (only if the oscillator type is set to pwm). See\n\t * Tone.PWMOscillator for more info.\n\t * @example\n\t * var omniOsc = new OmniOscillator(440, \"pwm\");\n\t * //can access the modulationFrequency attribute only if type === \"pwm\"\n\t * omniOsc.modulationFrequency.value = 0.2;\n\t */\n\tget modulationFrequency(): IsPWMOscillator<OscType, Signal<Frequency>> {\n\t\tif (this._getOscType(this._oscillator, \"pwm\")) {\n\t\t\treturn this._oscillator.modulationFrequency as IsPWMOscillator<OscType, Signal<Frequency>>;\n\t\t} else {\n\t\t\treturn undefined as IsPWMOscillator<OscType, Signal<Frequency>>;\n\t\t}\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.detune.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis._oscillator.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp } from \"../../core/util/Interface\";\nimport { isUndef } from \"../../core/util/TypeCheck\";\nimport { Source, SourceOptions } from \"../Source\";\nimport { ToneBufferSource } from \"./BufferSource\";\n\ninterface PlayerOptions extends SourceOptions {\n\tonload: () => void;\n\tplaybackRate: Positive;\n\tloop: boolean;\n\tautostart: boolean;\n\tloopStart: Time;\n\tloopEnd: Time;\n\treverse: boolean;\n\tfadeIn: Time;\n\tfadeOut: Time;\n\turl?: ToneAudioBuffer | string | AudioBuffer;\n}\n\n/**\n * Player is an audio file player with start, loop, and stop functions.\n *\n * @param url Either the AudioBuffer or the url from which to load the AudioBuffer\n * @param onload The function to invoke when the buffer is loaded.\n *                            Recommended to use Tone.Buffer.on('load') instead.\n * @example\n * var player = new Player(\"./path/to/sample.mp3\").toDestination();\n * //play as soon as the buffer is loaded\n * player.autostart = true;\n */\nexport class Player extends Source<PlayerOptions> {\n\n\tname = \"Player\";\n\n\t/**\n\t * If the file should play as soon\n\t * as the buffer is loaded.\n\t * @example\n\t * //will play as soon as it's loaded\n\t * var player = new Player({\n\t * \t\"url\" : \"./path/to/sample.mp3\",\n\t * \t\"autostart\" : true,\n\t * }).toDestination();\n\t */\n\tautostart: boolean;\n\n\t/**\n\t *  The buffer\n\t */\n\tprivate _buffer: ToneAudioBuffer;\n\n\t/**\n\t *  if the buffer should loop once it's over\n\t */\n\tprivate _loop: boolean;\n\n\t/**\n\t *  if 'loop' is true, the loop will start at this position\n\t */\n\tprivate _loopStart: Time;\n\n\t/**\n\t *  if 'loop' is true, the loop will end at this position\n\t */\n\tprivate _loopEnd: Time;\n\n\t/**\n\t *  the playback rate\n\t */\n\tprivate _playbackRate: Positive;\n\n\t/**\n\t *  All of the active buffer source nodes\n\t */\n\tprivate _activeSources: Set<ToneBufferSource> = new Set();\n\n\t/**\n\t *  The fadeIn time of the amplitude envelope.\n\t */\n\tfadeIn: Time;\n\n\t/**\n\t *  The fadeOut time of the amplitude envelope.\n\t */\n\tfadeOut: Time;\n\n\tconstructor(options?: Partial<PlayerOptions>);\n\tconstructor(url?: string | AudioBuffer | ToneAudioBuffer, onload?: () => void);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Player.getDefaults(), arguments, [\"url\", \"onload\"]));\n\t\tconst options = optionsFromArguments(Player.getDefaults(), arguments, [\"url\", \"onload\"]);\n\n\t\tthis._buffer = new ToneAudioBuffer({\n\t\t\tonload: this._onload.bind(this, options.onload),\n\t\t\treverse: options.reverse,\n\t\t\turl: options.url,\n\t\t});\n\t\tthis.autostart = options.autostart;\n\t\tthis._loop = options.loop;\n\t\tthis._loopStart = options.loopStart;\n\t\tthis._loopEnd = options.loopEnd;\n\t\tthis._playbackRate = options.playbackRate;\n\t\tthis.fadeIn = options.fadeIn;\n\t\tthis.fadeOut = options.fadeOut;\n\t}\n\n\tstatic getDefaults(): PlayerOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tautostart : false,\n\t\t\tfadeIn : 0,\n\t\t\tfadeOut : 0,\n\t\t\tloop : false,\n\t\t\tloopEnd : 0,\n\t\t\tloopStart : 0,\n\t\t\tonload : noOp,\n\t\t\tplaybackRate : 1,\n\t\t\treverse : false,\n\t\t});\n\t}\n\n\t/**\n\t * Load the audio file as an audio buffer.\n\t * Decodes the audio asynchronously and invokes\n\t * the callback once the audio buffer loads.\n\t * Note: this does not need to be called if a url\n\t * was passed in to the constructor. Only use this\n\t * if you want to manually load a new url.\n\t * @param url The url of the buffer to load. Filetype support depends on the browser.\n\t */\n\tasync load(url: string): Promise<this> {\n\t\tawait this._buffer.load(url);\n\t\tthis._onload();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Internal callback when the buffer is loaded.\n\t */\n\tprivate _onload(callback: () => void = noOp): void {\n\t\tcallback();\n\t\tif (this.autostart) {\n\t\t\tthis.start();\n\t\t}\n\t}\n\n\t/**\n\t * Internal callback when the buffer is done playing.\n\t */\n\tprivate _onSourceEnd(source: ToneBufferSource): void {\n\t\tthis._activeSources.delete(source);\n\t\tif (this._activeSources.size === 0 && !this._synced) {\n\t\t\tthis._state.setStateAtTime(\"stopped\", this.now());\n\t\t}\n\t}\n\n\t/**\n\t *  Play the buffer at the given startTime. Optionally add an offset\n\t *  and/or duration which will play the buffer from a position\n\t *  within the buffer for the given duration.\n\t *\n\t *  @param  time When the player should start.\n\t *  @param  offset The offset from the beginning of the sample\n\t *                                 to start at.\n\t *  @param  duration How long the sample should play. If no duration is given, it will default to the full length\n\t *                   of the sample (minus any offset)\n\t */\n\tstart(time?: Time, offset?: Time, duration?: Time): this {\n\t\tsuper.start(time, offset, duration);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Internal start method\n\t */\n\tprotected _start(startTime?: Time, offset?: Time, duration?: Time): void {\n\t\t// if it's a loop the default offset is the loopstart point\n\t\tif (this._loop) {\n\t\t\toffset = defaultArg(offset, this._loopStart);\n\t\t} else {\n\t\t\t// otherwise the default offset is 0\n\t\t\toffset = defaultArg(offset, 0);\n\t\t}\n\n\t\t// compute the values in seconds\n\t\toffset = this.toSeconds(offset);\n\n\t\t// if it's synced, it should factor in the playback rate for computing the offset\n\t\tif (this._synced) {\n\t\t\toffset *= this._playbackRate;\n\t\t}\n\n\t\t// compute the duration which is either the passed in duration of the buffer.duration - offset\n\t\tlet computedDuration = defaultArg(duration, Math.max(this._buffer.duration - offset, 0));\n\t\tcomputedDuration = this.toSeconds(computedDuration);\n\n\t\t// scale it by the playback rate\n\t\tcomputedDuration = computedDuration / this._playbackRate;\n\n\t\t// get the start time\n\t\tstartTime = this.toSeconds(startTime);\n\n\t\t// make the source\n\t\tconst source = new ToneBufferSource({\n\t\t\tbuffer : this._buffer,\n\t\t\tcontext: this.context,\n\t\t\tfadeIn : this.fadeIn,\n\t\t\tfadeOut : this.fadeOut,\n\t\t\tloop : this._loop,\n\t\t\tloopEnd : this._loopEnd,\n\t\t\tloopStart : this._loopStart,\n\t\t\tonended : this._onSourceEnd.bind(this),\n\t\t\tplaybackRate : this._playbackRate,\n\t\t}).connect(this.output);\n\n\t\t// set the looping properties\n\t\tif (!this._loop && !this._synced) {\n\t\t\t// if it's not looping, set the state change at the end of the sample\n\t\t\tthis._state.setStateAtTime(\"stopped\", startTime + computedDuration, {\n\t\t\t\timplicitEnd: true,\n\t\t\t});\n\t\t}\n\n\t\t// add it to the array of active sources\n\t\tthis._activeSources.add(source);\n\n\t\t// start it\n\t\tif (this._loop && isUndef(duration)) {\n\t\t\tsource.start(startTime, offset);\n\t\t} else {\n\t\t\t// subtract the fade out time\n\t\t\tsource.start(startTime, offset, computedDuration - this.toSeconds(this.fadeOut));\n\t\t}\n\t}\n\n\t/**\n\t *  Stop playback.\n\t */\n\tprotected _stop(time?: Time): void {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._activeSources.forEach(source => source.stop(computedTime));\n\t}\n\n\t/**\n\t * Stop and then restart the player from the beginning (or offset)\n\t * @param  time When the player should start.\n\t * @param  offset The offset from the beginning of the sample to start at.\n\t * @param  duration How long the sample should play. If no duration is given,\n\t * \t\t\t\t\tit will default to the full length of the sample (minus any offset)\n\t */\n\trestart(time?: Time, offset?: Time, duration?: Time): this {\n\t\tthis._stop(time);\n\t\tthis._start(time, offset, duration);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Seek to a specific time in the player's buffer. If the\n\t *  source is no longer playing at that time, it will stop.\n\t *  If you seek to a time that\n\t *  @param {Time} offset The time to seek to.\n\t *  @param {Time=} time The time for the seek event to occur.\n\t *  @return {Player} this\n\t *  @example\n\t * source.start(0.2);\n\t * source.stop(0.4);\n\t */\n\tseek(offset: Time, when?: Time): this {\n\t\tconst computedTime = this.toSeconds(when);\n\t\tif (this._state.getValueAtTime(computedTime) === \"started\") {\n\t\t\tconst comptuedOffset = this.toSeconds(offset);\n\t\t\t// if it's currently playing, stop it\n\t\t\tthis._stop(computedTime);\n\t\t\t// restart it at the given time\n\t\t\tthis._start(computedTime, comptuedOffset);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set the loop start and end. Will only loop if loop is set to true.\n\t * @param loopStart The loop end time\n\t * @param loopEnd The loop end time\n\t * @example\n\t * //loop 0.1 seconds of the file.\n\t * player.setLoopPoints(0.2, 0.3);\n\t * player.loop = true;\n\t */\n\tsetLoopPoints(loopStart: Time, loopEnd: Time): this {\n\t\tthis.loopStart = loopStart;\n\t\tthis.loopEnd = loopEnd;\n\t\treturn this;\n\t}\n\n\t/**\n\t * If loop is true, the loop will start at this position.\n\t */\n\tget loopStart(): Time {\n\t\treturn this._loopStart;\n\t}\n\tset loopStart(loopStart) {\n\t\tthis._loopStart = loopStart;\n\t\t// get the current source\n\t\tthis._activeSources.forEach(source => {\n\t\t\tsource.loopStart = loopStart;\n\t\t});\n\t}\n\n\t/**\n\t * If loop is true, the loop will end at this position.\n\t */\n\tget loopEnd(): Time {\n\t\treturn this._loopEnd;\n\t}\n\tset loopEnd(loopEnd) {\n\t\tthis._loopEnd = loopEnd;\n\t\t// get the current source\n\t\tthis._activeSources.forEach(source => {\n\t\t\tsource.loopEnd = loopEnd;\n\t\t});\n\t}\n\n\t/**\n\t * The audio buffer belonging to the player.\n\t */\n\tget buffer(): ToneAudioBuffer {\n\t\treturn this._buffer;\n\t}\n\tset buffer(buffer) {\n\t\tthis._buffer.set(buffer);\n\t}\n\n\t/**\n\t * If the buffer should loop once it's over.\n\t */\n\tget loop(): boolean {\n\t\treturn this._loop;\n\t}\n\tset loop(loop) {\n\t\t// if no change, do nothing\n\t\tif (this._loop === loop) {\n\t\t\treturn;\n\t\t}\n\t\tthis._loop = loop;\n\t\t// set the loop of all of the sources\n\t\tthis._activeSources.forEach(source => {\n\t\t\tsource.loop = loop;\n\t\t});\n\t\tif (loop) {\n\t\t\t// remove the next stopEvent\n\t\t\tconst stopEvent = this._state.getNextState(\"stopped\", this.now());\n\t\t\tif (stopEvent) {\n\t\t\t\tthis._state.cancel(stopEvent.time);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * The playback speed. 1 is normal speed. This is not a signal because\n\t * Safari and iOS currently don't support playbackRate as a signal.\n\t */\n\tget playbackRate(): Positive {\n\t\treturn this._playbackRate;\n\t}\n\tset playbackRate(rate) {\n\t\tthis._playbackRate = rate;\n\t\tconst now = this.now();\n\n\t\t// cancel the stop event since it's at a different time now\n\t\tconst stopEvent = this._state.getNextState(\"stopped\", now);\n\t\tif (stopEvent && stopEvent.implicitEnd) {\n\t\t\tthis._state.cancel(stopEvent.time);\n\t\t}\n\n\t\t// set all the sources\n\t\tthis._activeSources.forEach(source => {\n\t\t\tsource.playbackRate.setValueAtTime(rate, now);\n\t\t});\n\t}\n\n\t/**\n\t * The direction the buffer should play in\n\t */\n\tget reverse(): boolean {\n\t\treturn this._buffer.reverse;\n\t}\n\tset reverse(rev) {\n\t\tthis._buffer.reverse = rev;\n\t}\n\n\t/**\n\t * If the buffer is loaded\n\t */\n\tget loaded(): boolean {\n\t\treturn this._buffer.loaded;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\t// disconnect all of the players\n\t\tthis._activeSources.forEach(source => source.dispose());\n\t\tthis._activeSources.clear();\n\t\tthis._buffer.dispose();\n\t\treturn this;\n\t}\n}\n","import { InputNode, OutputNode } from \"../../core/context/ToneAudioNode\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { isArray, isObject, isString } from \"../../core/util/TypeCheck\";\nimport { connectSignal, Signal } from \"../../signal/Signal\";\n\ntype BasicEnvelopeCurve = \"linear\" | \"exponential\";\ntype InternalEnvelopeCurve = BasicEnvelopeCurve | number[];\nexport type EnvelopeCurve = EnvelopeCurveName | number[];\n\nexport interface EnvelopeOptions extends ToneAudioNodeOptions {\n\tattack: Time;\n\tdecay: Time;\n\tsustain: NormalRange;\n\trelease: Time;\n\tattackCurve: EnvelopeCurve;\n\treleaseCurve: EnvelopeCurve;\n\tdecayCurve: BasicEnvelopeCurve;\n}\n\n/**\n *  Envelope is an [ADSR](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope)\n *  envelope generator. Envelope outputs a signal which\n *  can be connected to an AudioParam or Tone.Signal.\n *  <img src=\"https://upload.wikimedia.org/wikipedia/commons/e/ea/ADSR_parameter.svg\">\n *\n *  @param attack The amount of time it takes for the envelope to go from\n *                         0 to it's maximum value.\n *  @param decay\tThe period of time after the attack that it takes for the envelope\n *                       \tto fall to the sustain value. Value must be greater than 0.\n *  @param sustain\tThe percent of the maximum value that the envelope rests at until\n *                                \tthe release is triggered.\n *  @param release\tThe amount of time after the release is triggered it takes to reach 0.\n *                         \tValue must be greater than 0.\n *  @example\n * //an amplitude envelope\n * var gainNode = Tone.context.createGain();\n * var env = new Envelope({\n * \t\"attack\" : 0.1,\n * \t\"decay\" : 0.2,\n * \t\"sustain\" : 1,\n * \t\"release\" : 0.8,\n * });\n * env.connect(gainNode.gain);\n */\nexport class Envelope extends ToneAudioNode<EnvelopeOptions> {\n\n\tname = \"Envelope\";\n\n\t/**\n\t *  When triggerAttack is called, the attack time is the amount of\n\t *  time it takes for the envelope to reach it's maximum value.\n\t */\n\tattack: Time;\n\n\t/**\n\t *  After the attack portion of the envelope, the value will fall\n\t *  over the duration of the decay time to it's sustain value.\n\t */\n\tdecay: Time;\n\n\t/**\n\t * \tThe sustain value is the value\n\t * \twhich the envelope rests at after triggerAttack is\n\t * \tcalled, but before triggerRelease is invoked.\n\t */\n\tsustain: NormalRange;\n\n\t/**\n\t *  After triggerRelease is called, the envelope's\n\t *  value will fall to it's miminum value over the\n\t *  duration of the release time.\n\t */\n\trelease: Time;\n\n\t/**\n\t *  The automation curve type for the attack\n\t */\n\tprivate _attackCurve!: InternalEnvelopeCurve;\n\n\t/**\n\t *  The automation curve type for the decay\n\t */\n\tprivate _decayCurve!: BasicEnvelopeCurve;\n\n\t/**\n\t *  The automation curve type for the release\n\t */\n\tprivate _releaseCurve!: InternalEnvelopeCurve;\n\n\t/**\n\t *  the signal which is output.\n\t */\n\tprotected _sig: Signal<NormalRange> = new Signal({\n\t\tcontext: this.context,\n\t\tvalue: 0,\n\t});\n\tprotected _internalChannels = [this._sig];\n\n\t/**\n\t * The output signal of the envelope\n\t */\n\toutput: OutputNode = this._sig;\n\n\t/**\n\t * Envelope has no input\n\t */\n\tinput: InputNode | undefined = undefined;\n\n\tconstructor(attack?: Time, decay?: Time, sustain?: NormalRange, release?: Time);\n\tconstructor(options?: Partial<EnvelopeOptions>)\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Envelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]));\n\t\tconst options = optionsFromArguments(Envelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]);\n\n\t\tthis.attack = options.attack;\n\t\tthis.decay = options.decay;\n\t\tthis.sustain = options.sustain;\n\t\tthis.release = options.release;\n\t\tthis.attackCurve = options.attackCurve;\n\t\tthis.releaseCurve = options.releaseCurve;\n\t\tthis.decayCurve = options.decayCurve;\n\t}\n\n\tstatic getDefaults(): EnvelopeOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tattack : 0.01,\n\t\t\tattackCurve : \"linear\" as EnvelopeCurveName,\n\t\t\tdecay : 0.1,\n\t\t\tdecayCurve : \"exponential\" as BasicEnvelopeCurve,\n\t\t\trelease : 1,\n\t\t\treleaseCurve : \"exponential\" as EnvelopeCurveName,\n\t\t\tsustain : 0.5,\n\t\t});\n\t}\n\n\t/**\n\t * Read the current value of the envelope. Useful for\n\t * syncronizing visual output to the envelope.\n\t */\n\tget value(): NormalRange {\n\t\treturn this.getValueAtTime(this.now());\n\t}\n\n\t/**\n\t *  Get the curve\n\t *  @param  curve\n\t *  @param  direction  In/Out\n\t *  @return  {String}  The curve name\n\t *  @private\n\t */\n\tprivate _getCurve(curve: InternalEnvelopeCurve, direction: EnvelopeDirection): EnvelopeCurve {\n\t\tif (isString(curve)) {\n\t\t\treturn curve;\n\t\t} else {\n\t\t\t// look up the name in the curves array\n\t\t\tlet curveName: EnvelopeCurveName;\n\t\t\tfor (curveName in EnvelopeCurves) {\n\t\t\t\tif (EnvelopeCurves[curveName][direction] === curve) {\n\t\t\t\t\treturn curveName;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// return the custom curve\n\t\t\treturn curve;\n\t\t}\n\t}\n\n\t/**\n\t *  Assign a the curve to the given name using the direction\n\t *  @param  name\n\t *  @param  direction In/Out\n\t *  @param  curve\n\t *  @private\n\t */\n\tprivate _setCurve(\n\t\tname: \"_attackCurve\" | \"_decayCurve\" | \"_releaseCurve\",\n\t\tdirection: EnvelopeDirection,\n\t\tcurve: EnvelopeCurve,\n\t): void {\n\t\t// check if it's a valid type\n\t\tif (isString(curve) && Reflect.has(EnvelopeCurves, curve)) {\n\t\t\tconst curveDef = EnvelopeCurves[curve];\n\t\t\tif (isObject(curveDef)) {\n\t\t\t\tif (name !== \"_decayCurve\") {\n\t\t\t\t\tthis[name] = curveDef[direction];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis[name] = curveDef;\n\t\t\t}\n\t\t} else if (isArray(curve) && name !== \"_decayCurve\") {\n\t\t\tthis[name] = curve;\n\t\t} else {\n\t\t\tthrow new Error(\"Envelope: invalid curve: \" + curve);\n\t\t}\n\t}\n\n\t/**\n\t * The shape of the attack.\n\t * Can be any of these strings:\n\t * * linear\n\t * * exponential\n\t * * sine\n\t * * cosine\n\t * * bounce\n\t * * ripple\n\t * * step\n\t * Can also be an array which describes the curve. Values\n\t * in the array are evenly subdivided and linearly\n\t * interpolated over the duration of the attack.\n\t * @memberOf Envelope#\n\t * @type {String|Array}\n\t * @name attackCurve\n\t * @example\n\t * env.attackCurve = \"linear\";\n\t * @example\n\t * //can also be an array\n\t * env.attackCurve = [0, 0.2, 0.3, 0.4, 1]\n\t */\n\tget attackCurve(): EnvelopeCurve {\n\t\treturn this._getCurve(this._attackCurve, \"In\");\n\t}\n\tset attackCurve(curve) {\n\t\tthis._setCurve(\"_attackCurve\", \"In\", curve);\n\t}\n\n\t/**\n\t * The shape of the release. See the attack curve types.\n\t * @memberOf Envelope#\n\t * @type {String|Array}\n\t * @name releaseCurve\n\t * @example\n\t * env.releaseCurve = \"linear\";\n\t */\n\tget releaseCurve(): EnvelopeCurve {\n\t\treturn this._getCurve(this._releaseCurve, \"Out\");\n\t}\n\tset releaseCurve(curve) {\n\t\tthis._setCurve(\"_releaseCurve\", \"Out\", curve);\n\t}\n\n\t/**\n\t * The shape of the decay either \"linear\" or \"exponential\"\n\t * @memberOf Envelope#\n\t * @type {String}\n\t * @name decayCurve\n\t * @example\n\t * env.decayCurve = \"linear\";\n\t */\n\tget decayCurve(): BasicEnvelopeCurve {\n\t\treturn this._decayCurve;\n\t}\n\tset decayCurve(curve) {\n\t\tthis.assert([\"linear\", \"exponential\"].some(c => c === curve), `Invalid envelope curve: ${curve}`);\n\t\tthis._decayCurve = curve;\n\t}\n\n\t/**\n\t * Trigger the attack/decay portion of the ADSR envelope.\n\t * @param  time When the attack should start.\n\t * @param velocity The velocity of the envelope scales the vales.\n\t *                              number between 0-1\n\t * @example\n\t * //trigger the attack 0.5 seconds from now with a velocity of 0.2\n\t * env.triggerAttack(\"+0.5\", 0.2);\n\t */\n\ttriggerAttack(time?: Time, velocity: NormalRange = 1): this {\n\t\tthis.log(\"triggerAttack\", time, velocity);\n\t\ttime = this.toSeconds(time);\n\t\tconst originalAttack = this.toSeconds(this.attack);\n\t\tlet attack = originalAttack;\n\t\tconst decay = this.toSeconds(this.decay);\n\t\t// check if it's not a complete attack\n\t\tconst currentValue = this.getValueAtTime(time);\n\t\tif (currentValue > 0) {\n\t\t\t// subtract the current value from the attack time\n\t\t\tconst attackRate = 1 / attack;\n\t\t\tconst remainingDistance = 1 - currentValue;\n\t\t\t// the attack is now the remaining time\n\t\t\tattack = remainingDistance / attackRate;\n\t\t}\n\t\t// attack\n\t\tif (attack === 0) {\n\t\t\t// case where the attack time is 0 should set instantly\n\t\t\tthis._sig.setValueAtTime(velocity, time);\n\t\t} else if (this._attackCurve === \"linear\") {\n\t\t\tthis._sig.linearRampTo(velocity, attack, time);\n\t\t} else if (this._attackCurve === \"exponential\") {\n\t\t\tthis._sig.targetRampTo(velocity, attack, time);\n\t\t} else if (attack > 0) {\n\t\t\tthis._sig.cancelAndHoldAtTime(time);\n\t\t\tlet curve = this._attackCurve;\n\t\t\t// find the starting position in the curve\n\t\t\tfor (let i = 1; i < curve.length; i++) {\n\t\t\t\t// the starting index is between the two values\n\t\t\t\tif (curve[i - 1] <= currentValue && currentValue <= curve[i]) {\n\t\t\t\t\tcurve = this._attackCurve.slice(i);\n\t\t\t\t\t// the first index is the current value\n\t\t\t\t\tcurve[0] = currentValue;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._sig.setValueCurveAtTime(curve, time, attack, velocity);\n\t\t}\n\t\t// decay\n\t\tif (decay) {\n\t\t\tconst decayValue = velocity * this.sustain;\n\t\t\tconst decayStart = time + attack;\n\t\t\tthis.log(\"decay\", decayStart);\n\t\t\tif (this._decayCurve === \"linear\") {\n\t\t\t\tthis._sig.linearRampTo(decayValue, decay, decayStart + this.sampleTime);\n\t\t\t} else if (this._decayCurve === \"exponential\") {\n\t\t\t\tthis._sig.exponentialApproachValueAtTime(decayValue, decayStart, decay);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Triggers the release of the envelope.\n\t *  @param  time When the release portion of the envelope should start.\n\t *  @example\n\t *  //trigger release immediately\n\t *  env.triggerRelease();\n\t */\n\ttriggerRelease(time?: Time): this {\n\t\tthis.log(\"triggerRelease\", time);\n\t\ttime = this.toSeconds(time);\n\t\tconst currentValue = this.getValueAtTime(time);\n\t\tif (currentValue > 0) {\n\t\t\tconst release = this.toSeconds(this.release);\n\t\t\tif (this._releaseCurve === \"linear\") {\n\t\t\t\tthis._sig.linearRampTo(0, release, time);\n\t\t\t} else if (this._releaseCurve === \"exponential\") {\n\t\t\t\tthis._sig.targetRampTo(0, release, time);\n\t\t\t} else {\n\t\t\t\tif (isArray(this._releaseCurve)) {\n\t\t\t\t\tthis._sig.cancelAndHoldAtTime(time);\n\t\t\t\t\tthis._sig.setValueCurveAtTime(this._releaseCurve, time, release, currentValue);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Get the scheduled value at the given time. This will\n\t *  return the unconverted (raw) value.\n\t */\n\tgetValueAtTime(time: Time): NormalRange {\n\t\treturn this._sig.getValueAtTime(time);\n\t}\n\n\t/**\n\t *  triggerAttackRelease is shorthand for triggerAttack, then waiting\n\t *  some duration, then triggerRelease.\n\t *  @param duration The duration of the sustain.\n\t *  @param time When the attack should be triggered.\n\t *  @param velocity The velocity of the envelope.\n\t *  @example\n\t * //trigger the attack and then the release after 0.6 seconds.\n\t * env.triggerAttackRelease(0.6);\n\t */\n\ttriggerAttackRelease(duration: Time, time?: Time, velocity: NormalRange = 1): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis.triggerAttack(time, velocity);\n\t\tthis.triggerRelease(time + this.toSeconds(duration));\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Cancels all scheduled envelope changes after the given time.\n\t */\n\tcancel(after?: Time): this {\n\t\tthis._sig.cancelScheduledValues(after);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Connect the envelope to a destination node.\n\t */\n\tconnect(destination: InputNode, outputNumber: number = 0, inputNumber: number = 0): this {\n\t\tconnectSignal(this, destination, outputNumber, inputNumber);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._sig.dispose();\n\t\treturn this;\n\t}\n}\n\ninterface EnvelopeCurveObject {\n\tIn: number[];\n\tOut: number[];\n}\n\ntype EnvelopeDirection = keyof EnvelopeCurveObject;\n\ninterface EnvelopeCurveMap {\n\tlinear: \"linear\";\n\texponential: \"exponential\";\n\tbounce: EnvelopeCurveObject;\n\tcosine: EnvelopeCurveObject;\n\tsine: EnvelopeCurveObject;\n\tripple: EnvelopeCurveObject;\n\tstep: EnvelopeCurveObject;\n}\n\ntype EnvelopeCurveName =  keyof EnvelopeCurveMap;\n\n/**\n *  Generate some complex envelope curves.\n */\n// tslint:disable-next-line: variable-name\nconst EnvelopeCurves: EnvelopeCurveMap = (() => {\n\n\tconst curveLen = 128;\n\n\tlet i: number;\n\tlet k: number;\n\n\t// cosine curve\n\tconst cosineCurve: number[] = [];\n\tfor (i = 0; i < curveLen; i++) {\n\t\tcosineCurve[i] = Math.sin((i / (curveLen - 1)) * (Math.PI / 2));\n\t}\n\n\t// ripple curve\n\tconst rippleCurve: number[] = [];\n\tconst rippleCurveFreq = 6.4;\n\tfor (i = 0; i < curveLen - 1; i++) {\n\t\tk = (i / (curveLen - 1));\n\t\tconst sineWave = Math.sin(k * (Math.PI * 2) * rippleCurveFreq - Math.PI / 2) + 1;\n\t\trippleCurve[i] = sineWave / 10 + k * 0.83;\n\t}\n\trippleCurve[curveLen - 1] = 1;\n\n\t// stairs curve\n\tconst stairsCurve: number[] = [];\n\tconst steps = 5;\n\tfor (i = 0; i < curveLen; i++) {\n\t\tstairsCurve[i] = Math.ceil((i / (curveLen - 1)) * steps) / steps;\n\t}\n\n\t// in-out easing curve\n\tconst sineCurve: number[] = [];\n\tfor (i = 0; i < curveLen; i++) {\n\t\tk = i / (curveLen - 1);\n\t\tsineCurve[i] = 0.5 * (1 - Math.cos(Math.PI * k));\n\t}\n\n\t// a bounce curve\n\tconst bounceCurve: number[] = [];\n\tfor (i = 0; i < curveLen; i++) {\n\t\tk = i / (curveLen - 1);\n\t\tconst freq = Math.pow(k, 3) * 4 + 0.2;\n\t\tconst val = Math.cos(freq * Math.PI * 2 * k);\n\t\tbounceCurve[i] = Math.abs(val * (1 - k));\n\t}\n\n\t/**\n\t *  Invert a value curve to make it work for the release\n\t */\n\tfunction invertCurve(curve: number[]): number[] {\n\t\tconst out = new Array(curve.length);\n\t\tfor (let j = 0; j < curve.length; j++) {\n\t\t\tout[j] = 1 - curve[j];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t *  reverse the curve\n\t */\n\tfunction reverseCurve(curve: number[]): number[] {\n\t\treturn curve.slice(0).reverse();\n\t}\n\n\t/**\n\t *  attack and release curve arrays\n\t */\n\treturn {\n\t\tbounce : {\n\t\t\tIn : invertCurve(bounceCurve),\n\t\t\tOut : bounceCurve,\n\t\t},\n\t\tcosine : {\n\t\t\tIn : cosineCurve,\n\t\t\tOut : reverseCurve(cosineCurve),\n\t\t},\n\t\texponential : \"exponential\" as \"exponential\",\n\t\tlinear : \"linear\" as \"linear\",\n\t\tripple : {\n\t\t\tIn : rippleCurve,\n\t\t\tOut : invertCurve(rippleCurve),\n\t\t},\n\t\tsine : {\n\t\t\tIn : sineCurve,\n\t\t\tOut : invertCurve(sineCurve),\n\t\t},\n\t\tstep : {\n\t\t\tIn : stairsCurve,\n\t\t\tOut : invertCurve(stairsCurve),\n\t\t},\n\t};\n})();\n","import { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Envelope, EnvelopeOptions } from \"./Envelope\";\n\n/**\n * AmplitudeEnvelope is a Tone.Envelope connected to a gain node.\n * Unlike Tone.Envelope, which outputs the envelope's value, AmplitudeEnvelope accepts\n * an audio signal as the input and will apply the envelope to the amplitude\n * of the signal.\n * Read more about ADSR Envelopes on [Wikipedia](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope).\n *\n * @param attack The amount of time it takes for the envelope to go from 0 to it's maximum value.\n * @param decay\tThe period of time after the attack that it takes for the envelope\n *                       \tto fall to the sustain value. Value must be greater than 0.\n * @param sustain\tThe percent of the maximum value that the envelope rests at until\n *                                \tthe release is triggered.\n * @param release\tThe amount of time after the release is triggered it takes to reach 0.\n *                         \tValue must be greater than 0.\n *  @example\n * var ampEnv = new AmplitudeEnvelope({\n * \t\"attack\": 0.1,\n * \t\"decay\": 0.2,\n * \t\"sustain\": 1.0,\n * \t\"release\": 0.8\n * }).toDestination();\n * //create an oscillator and connect it\n * var osc = new Tone.Oscillator().connect(ampEnv).start();\n * //trigger the envelopes attack and release \"8t\" apart\n * ampEnv.triggerAttackRelease(\"8t\");\n */\nexport class AmplitudeEnvelope extends Envelope {\n\n\tname = \"AmplitudeEnvelope\";\n\n\tprivate _gainNode: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\toutput: Gain = this._gainNode;\n\tinput: Gain = this._gainNode;\n\n\tconstructor(attack?: Time, decay?: Time, sustain?: NormalRange, release?: Time);\n\tconstructor(options?: Partial<EnvelopeOptions>)\n\tconstructor() {\n\t\tsuper(optionsFromArguments(AmplitudeEnvelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]));\n\t\tthis._sig.connect(this._gainNode.gain);\n\t\tthis.output = this._gainNode;\n\t\tthis.input = this._gainNode;\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._gainNode.dispose();\n\t\treturn this;\n\t}\n}\n","import { Volume } from \"../component/channel/Volume\";\nimport { Param } from \"../core/context/Param\";\nimport { OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\n\nexport interface InstrumentOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n}\n\n/**\n *  Base-class for all instruments\n */\nexport abstract class Instrument<Options extends InstrumentOptions> extends ToneAudioNode<Options> {\n\n\t/**\n\t *  The output and volume triming node\n\t */\n\tprivate _volume: Volume;\n\toutput: OutputNode;\n\n\t/**\n\t * The instrument only has an output\n\t */\n\tinput: undefined;\n\n\t/**\n\t * The volume of the output in decibels.\n\t * @example\n\t * source.volume.value = -6;\n\t */\n\tvolume: Param<Decibels>;\n\n\t/**\n\t * Keep track of all events scheduled to the transport\n\t * when the instrument is 'synced'\n\t */\n\tprivate _scheduledEvents: number[] = [];\n\n\t/**\n\t * If the instrument is currently synced\n\t */\n\tprivate _synced: boolean = false;\n\n\tconstructor(options?: Partial<InstrumentOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Instrument.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Instrument.getDefaults(), arguments);\n\n\t\tthis._volume = new Volume({\n\t\t\tcontext: this.context,\n\t\t\tvolume: options.volume,\n\t\t});\n\t\tthis.volume = this._volume.volume;\n\t\tthis.output = this._volume;\n\t\treadOnly(this, \"volume\");\n\t}\n\n\tstatic getDefaults(): InstrumentOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tnumberOfOutputs: 1,\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Sync the instrument to the Transport. All subsequent calls of\n\t * [triggerAttack](#triggerattack) and [triggerRelease](#triggerrelease)\n\t * will be scheduled along the transport.\n\t * @example\n\t * instrument.sync()\n\t * //schedule 3 notes when the transport first starts\n\t * instrument.triggerAttackRelease('C4', '8n', 0)\n\t * instrument.triggerAttackRelease('E4', '8n', '8n')\n\t * instrument.triggerAttackRelease('G4', '8n', '4n')\n\t * //start the transport to hear the notes\n\t * Transport.start()\n\t * @returns {Instrument} this\n\t */\n\tsync(): this {\n\t\tif (!this._synced) {\n\t\t\tthis._synced = true;\n\t\t\tthis._syncMethod(\"triggerAttack\", 1);\n\t\t\tthis._syncMethod(\"triggerRelease\", 0);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Wrap the given method so that it can be synchronized\n\t * @param method Which method to wrap and sync\n\t * @param  timePosition What position the time argument appears in\n\t */\n\tprotected _syncMethod(method: string, timePosition: number): void {\n\t\tconst originalMethod = this[\"_original_\" + method] = this[method];\n\t\tthis[method] = (...args: any[]) => {\n\t\t\tconst time = args[timePosition];\n\t\t\tconst id = this.context.transport.schedule((t) => {\n\t\t\t\targs[timePosition] = t;\n\t\t\t\toriginalMethod.apply(this, args);\n\t\t\t}, time);\n\t\t\tthis._scheduledEvents.push(id);\n\t\t};\n\t}\n\n\t/**\n\t * Unsync the instrument from the Transport\n\t */\n\tunsync(): this {\n\t\tthis._scheduledEvents.forEach(id => this.context.transport.clear(id));\n\t\tthis._scheduledEvents = [];\n\t\tif (this._synced) {\n\t\t\tthis._synced = false;\n\t\t\tthis.triggerAttack = this._original_triggerAttack;\n\t\t\tthis.triggerRelease = this._original_triggerRelease;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Trigger the attack and then the release after the duration.\n\t *  @param  note     The note to trigger.\n\t *  @param  duration How long the note should be held for before\n\t *                          triggering the release. This value must be greater than 0.\n\t *  @param time  When the note should be triggered.\n\t *  @param  velocity The velocity the note should be triggered at.\n\t *  @example\n\t * //trigger \"C4\" for the duration of an 8th note\n\t * synth.triggerAttackRelease(\"C4\", \"8n\");\n\t */\n\ttriggerAttackRelease(note: Frequency, duration: Time, time?: Time, velocity?: NormalRange): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst computedDuration = this.toSeconds(duration);\n\t\tthis.triggerAttack(note, computedTime, velocity);\n\t\tthis.triggerRelease(computedTime + computedDuration);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Start the instrument's note.\n\t * @param note the note to trigger\n\t * @param time the time to trigger the ntoe\n\t * @param velocity the velocity to trigger the note (betwee 0-1)\n\t */\n\tabstract triggerAttack(note: Frequency, time?: Time, velocity?: NormalRange): this;\n\t// tslint:disable-next-line: variable-name\n\tprivate _original_triggerAttack = this.triggerAttack;\n\n\t/**\n\t * Trigger the release phase of the current note.\n\t *  @param time when to trigger the release\n\t */\n\tabstract triggerRelease(...args: any[]): this;\n\t// tslint:disable-next-line: variable-name\n\tprivate _original_triggerRelease = this.triggerRelease;\n\n\t/**\n\t *  clean up\n\t *  @returns {Instrument} this\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._volume.dispose();\n\t\tthis.unsync();\n\t\tthis._scheduledEvents = [];\n\t\treturn this;\n\t}\n}\n","import { FrequencyClass } from \"../core/type/Frequency\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Instrument, InstrumentOptions } from \"../instrument/Instrument\";\nimport { Signal } from \"../signal/Signal\";\n\nexport interface MonophonicOptions extends InstrumentOptions {\n\tportamento: Seconds;\n}\n\n/**\n * Abstract base class for other monophonic instruments to extend.\n */\nexport abstract class Monophonic<Options extends MonophonicOptions> extends Instrument<Options> {\n\n\t/**\n\t *  The glide time between notes.\n\t */\n\tportamento: Seconds;\n\n\t/**\n\t * The instrument's envelope\n\t */\n\tabstract envelope: any;\n\n\t/**\n\t * The instrument's frequency signal.\n\t */\n\tabstract readonly frequency: Signal<Frequency>;\n\n\t/**\n\t * The instrument's detune control signal.\n\t */\n\tabstract readonly detune: Signal<Cents>;\n\n\tconstructor(options?: Partial<MonophonicOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Monophonic.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Monophonic.getDefaults(), arguments);\n\n\t\tthis.portamento = options.portamento;\n\n\t}\n\n\tstatic getDefaults(): MonophonicOptions {\n\t\treturn Object.assign(Instrument.getDefaults(), {\n\t\t\tportamento: 0,\n\t\t});\n\t}\n\n\t/**\n\t *  Trigger the attack of the note optionally with a given velocity.\n\t *\n\t *\n\t *  @param  note The note to trigger.\n\t *  @param  time When the note should start.\n\t *  @param  velocity The velocity scaler determines how \"loud\" the note\n\t *                   will be triggered.\n\t *  @example\n\t * synth.triggerAttack(\"C4\");\n\t *  @example\n\t * //trigger the note a half second from now at half velocity\n\t * synth.triggerAttack(\"C4\", \"+0.5\", 0.5);\n\t */\n\ttriggerAttack(note: Frequency | FrequencyClass, time?: Time, velocity: NormalRange = 1): this {\n\t\tthis.log(\"triggerAttack\", note, time, velocity);\n\t\ttime = this.toSeconds(time);\n\t\tthis._triggerEnvelopeAttack(time, velocity);\n\t\tthis.setNote(note, time);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Trigger the release portion of the envelope\n\t *  @param  {Time} [time=now] If no time is given, the release happens immediatly\n\t *  @returns {Monophonic} this\n\t *  @example\n\t * synth.triggerRelease();\n\t */\n\ttriggerRelease(time?: Time): this {\n\t\tthis.log(\"triggerRelease\", time);\n\t\ttime = this.toSeconds(time);\n\t\tthis._triggerEnvelopeRelease(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Internal method which starts the envelope attack\n\t */\n\tprotected abstract _triggerEnvelopeAttack(time: Seconds, velocity: NormalRange): void;\n\n\t/**\n\t *  Internal method which starts the envelope release\n\t */\n\tprotected abstract _triggerEnvelopeRelease(time: Seconds): void;\n\n\t/**\n\t *  Get the level of the output at the given time. Measures\n\t *  the envelope(s) value at the time.\n\t *  @param time The time to query the envelope value\n\t *  @return The output level between 0-1\n\t */\n\tgetLevelAtTime(time: Time): NormalRange {\n\t\ttime = this.toSeconds(time);\n\t\treturn this.envelope.getValueAtTime(time);\n\t}\n\n\t/**\n\t *  Set the note at the given time. If no time is given, the note\n\t *  will set immediately.\n\t *  @param note The note to change to.\n\t *  @param  time The time when the note should be set.\n\t * @example\n\t * //change to F#6 in one quarter note from now.\n\t * synth.setNote(\"F#6\", \"+4n\");\n\t * @example\n\t * //change to Bb4 right now\n\t * synth.setNote(\"Bb4\");\n\t */\n\tsetNote(note: Frequency | FrequencyClass, time?: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tconst computedFrequency = note instanceof FrequencyClass ? note.toFrequency() : note;\n\t\tif (this.portamento > 0 && this.getLevelAtTime(time) > 0.05) {\n\t\t\tconst portTime = this.toSeconds(this.portamento);\n\t\t\tthis.frequency.exponentialRampTo(computedFrequency, portTime, time);\n\t\t} else {\n\t\t\tthis.frequency.setValueAtTime(computedFrequency, time);\n\t\t}\n\t\treturn this;\n\t}\n}\n","import { AmplitudeEnvelope } from \"../component/envelope/AmplitudeEnvelope\";\nimport { Envelope, EnvelopeOptions } from \"../component/envelope/Envelope\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { RecursivePartial } from \"../core/util/Interface\";\nimport { OmniOscillator } from \"../source/oscillator/OmniOscillator\";\nimport { OmniOscillatorConstructorOptions } from \"../source/oscillator/OscillatorInterface\";\nimport { Source } from \"../source/Source\";\nimport { Monophonic, MonophonicOptions } from \"./Monophonic\";\n\nexport interface SynthOptions extends MonophonicOptions {\n\toscillator: OmniOscillatorConstructorOptions;\n\tenvelope: EnvelopeOptions;\n}\n\n/**\n *  Synth is composed simply of a Tone.OmniOscillator routed through a Tone.AmplitudeEnvelope.\n * ```\n * +----------------+     +-------------------+\n * | OmniOscillator +>----> AmplitudeEnvelope +>-->Output\n * +----------------+     +-------------------+\n * ```\n *  @constructor\n *  @param options the options available for the synth.\n *  @example\n * var synth = new Synth().toDestination();\n * synth.triggerAttackRelease(\"C4\", \"8n\");\n */\nexport class Synth extends Monophonic<SynthOptions> {\n\n\tname = \"Synth\";\n\n\t/**\n\t *  The oscillator.\n\t */\n\treadonly oscillator = new OmniOscillator({ context: this.context });\n\n\t/**\n\t * The frequency signal\n\t */\n\treadonly frequency = this.oscillator.frequency;\n\n\t/**\n\t * The detune signal\n\t */\n\treadonly detune = this.oscillator.detune;\n\n\t/**\n\t * The envelope\n\t */\n\treadonly envelope: AmplitudeEnvelope = new AmplitudeEnvelope({ context: this.context });\n\n\tprotected _internalChannels = [this.oscillator, this.envelope, this.output];\n\n\tconstructor(options?: RecursivePartial<SynthOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Synth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Synth.getDefaults(), arguments);\n\n\t\tthis.oscillator.set(options.oscillator);\n\t\tthis.envelope.set(options.envelope);\n\n\t\t// connect the oscillators to the output\n\t\tthis.oscillator.chain(this.envelope, this.output);\n\t\treadOnly(this, [\"oscillator\", \"frequency\", \"detune\", \"envelope\"]);\n\t}\n\n\tstatic getDefaults(): SynthOptions {\n\t\treturn Object.assign(Monophonic.getDefaults(), {\n\t\t\tenvelope: Object.assign(\n\t\t\t\tomitFromObject(Envelope.getDefaults(), Object.keys(Source.getDefaults())),\n\t\t\t\t{\n\t\t\t\t\tattack : 0.005,\n\t\t\t\t\tdecay : 0.1,\n\t\t\t\t\trelease : 1,\n\t\t\t\t\tsustain : 0.3,\n\t\t\t\t},\n\t\t\t),\n\t\t\toscillator: Object.assign(\n\t\t\t\tomitFromObject(OmniOscillator.getDefaults(), Object.keys(Source.getDefaults())),\n\t\t\t\t{\n\t\t\t\t\ttype: \"triangle\",\n\t\t\t\t},\n\t\t\t),\n\t\t});\n\t}\n\n\t/**\n\t *  start the attack portion of the envelope\n\t *  @param time the time the attack should start\n\t *  @param velocity the velocity of the note (0-1)\n\t */\n\tprotected _triggerEnvelopeAttack(time?: Time, velocity: number = 1): void {\n\t\tconst computedTime = this.toSeconds(time);\n\t\t// the envelopes\n\t\tthis.envelope.triggerAttack(computedTime, velocity);\n\t\tthis.oscillator.start(computedTime);\n\t\t// if there is no release portion, stop the oscillator\n\t\tif (this.envelope.sustain === 0) {\n\t\t\tconst computedAttack = this.toSeconds(this.envelope.attack);\n\t\t\tconst computedDecay = this.toSeconds(this.envelope.decay);\n\t\t\tthis.oscillator.stop(computedTime + computedAttack + computedDecay);\n\t\t}\n\t}\n\n\t/**\n\t *  start the release portion of the envelope\n\t *  @param time the time the release should start\n\t */\n\tprotected _triggerEnvelopeRelease(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis.envelope.triggerRelease(time);\n\t\tthis.oscillator.stop(time + this.toSeconds(this.envelope.release));\n\t}\n\n\t/**\n\t *  clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.oscillator.dispose();\n\t\tthis.envelope.dispose();\n\t\treturn this;\n\t}\n}\n","import { Tone } from \"../Tone\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { noOp } from \"../util/Interface\";\nimport { isString } from \"../util/TypeCheck\";\nimport { ToneAudioBuffer } from \"./ToneAudioBuffer\";\n\ninterface ToneAudioBuffersUrlMap {\n\t[name: string]: string | AudioBuffer | ToneAudioBuffer;\n\t[name: number]: string | AudioBuffer | ToneAudioBuffer;\n}\n\ninterface ToneAudioBuffersOptions {\n\turls: ToneAudioBuffersUrlMap;\n\tonload: () => void;\n\tonerror?: (error: Error) => void;\n\tbaseUrl: string;\n}\n\n/**\n * A data structure for holding multiple buffers in a Map-like datastructure.\n *\n * @param  urls      An object literal or array of urls to load.\n * @param onload  The callback to invoke when the buffers are loaded.\n * @example\n * //load a whole bank of piano samples\n * var pianoSamples = new ToneAudioBuffers({\n * \t\"C4\" : \"path/to/C4.mp3\"\n * \t\"C#4\" : \"path/to/C#4.mp3\"\n * \t\"D4\" : \"path/to/D4.mp3\"\n * \t\"D#4\" : \"path/to/D#4.mp3\"\n * }, function(){\n * \t//play one of the samples when they all load\n * \tplayer.buffer = pianoSamples.get(\"C4\");\n * \tplayer.start();\n * });\n * @example\n * //To pass in additional parameters in the second parameter\n * var buffers = new ToneAudioBuffers(urls, {\n * \t\"onload\" : callback,\n * \t\"baseUrl\" : \"../path/to/audio/\"\n * })\n */\nexport class ToneAudioBuffers extends Tone {\n\n\tname = \"ToneAudioBuffers\";\n\n\t/**\n\t *  All of the buffers\n\t */\n\tprivate _buffers: Map<string, ToneAudioBuffer> = new Map();\n\n\t/**\n\t *  A path which is prefixed before every url.\n\t */\n\tbaseUrl: string;\n\n\t/**\n\t * Keep track of the number of loaded buffers\n\t */\n\tprivate _loadingCount: number = 0;\n\n\tconstructor(\n\t\turls?: ToneAudioBuffersUrlMap,\n\t\tonload?: () => void,\n\t\tbaseUrl?: string,\n\t\t);\n\tconstructor(options?: Partial<ToneAudioBuffersOptions>);\n\tconstructor() {\n\n\t\tsuper();\n\t\tconst options = optionsFromArguments(\n\t\t\tToneAudioBuffers.getDefaults(), arguments, [\"urls\", \"onload\", \"baseUrl\"], \"urls\",\n\t\t);\n\n\t\tthis.baseUrl = options.baseUrl;\n\t\tconst urlMap: ToneAudioBuffersUrlMap = {};\n\t\t// add each one\n\t\tObject.keys(options.urls).forEach(name => {\n\t\t\tthis._loadingCount++;\n\t\t\tconst url = options.urls[name];\n\t\t\tthis.add(name, url, this._bufferLoaded.bind(this, (options as ToneAudioBuffersOptions).onload));\n\t\t});\n\n\t}\n\n\tstatic getDefaults(): ToneAudioBuffersOptions {\n\t\treturn {\n\t\t\tbaseUrl: \"\",\n\t\t\tonerror: noOp,\n\t\t\tonload: noOp,\n\t\t\turls: {},\n\t\t};\n\t}\n\n\t/**\n\t *  True if the buffers object has a buffer by that name.\n\t *  @param  name  The key or index of the buffer.\n\t */\n\thas(name: string | number): boolean {\n\t\treturn this._buffers.has(name.toString());\n\t}\n\n\t/**\n\t *  Get a buffer by name. If an array was loaded,\n\t *  then use the array index.\n\t *  @param  name  The key or index of the buffer.\n\t */\n\tget(name: string | number): ToneAudioBuffer {\n\t\tthis.assert(this.has(name), `ToneAudioBuffers has no buffer named: ${name}`);\n\t\treturn this._buffers.get(name.toString()) as ToneAudioBuffer;\n\t}\n\n\t/**\n\t *  A buffer was loaded. decrement the counter.\n\t */\n\tprivate _bufferLoaded(callback: () => void): void {\n\t\tthis._loadingCount--;\n\t\tif (this._loadingCount === 0 && callback) {\n\t\t\tcallback();\n\t\t}\n\t}\n\n\t/**\n\t * If the buffers are loaded or not\n\t */\n\tget loaded(): boolean {\n\t\treturn Array.from(this._buffers).every(([name, buffer]) => buffer.loaded);\n\t}\n\n\t/**\n\t *  Add a buffer by name and url to the Buffers\n\t *  @param  name      A unique name to give the buffer\n\t *  @param  url  Either the url of the bufer, or a buffer which will be added with the given name.\n\t *  @param  callback  The callback to invoke when the url is loaded.\n\t */\n\tadd(\n\t\tname: string | number,\n\t\turl: string | AudioBuffer | ToneAudioBuffer,\n\t\tcallback: () => void = noOp,\n\t): this {\n\t\tif (url instanceof ToneAudioBuffer) {\n\t\t\tthis._buffers.set(name.toString(), url);\n\t\t\tcallback();\n\t\t} else if (url instanceof AudioBuffer) {\n\t\t\tthis._buffers.set(name.toString(), new ToneAudioBuffer(url));\n\t\t\tcallback();\n\t\t} else if (isString(url)) {\n\t\t\tthis._buffers.set(name.toString(), new ToneAudioBuffer(this.baseUrl + url, callback));\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._buffers.forEach(buffer => buffer.dispose());\n\t\tthis._buffers.clear();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioBuffer } from \"../core/context/ToneAudioBuffer\";\nimport { ToneAudioBuffers } from \"../core/context/ToneAudioBuffers\";\nimport { intervalToFrequencyRatio } from \"../core/type/Conversions\";\nimport { FrequencyClass } from \"../core/type/Frequency\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { isArray, isNote } from \"../core/util/TypeCheck\";\nimport { Instrument, InstrumentOptions } from \"../instrument/Instrument\";\nimport { ToneBufferSource, ToneBufferSourceCurve } from \"../source/buffer/BufferSource\";\n\ninterface SamplesMap {\n\t[note: string]: ToneAudioBuffer | AudioBuffer | string;\n\t[midi: number]: ToneAudioBuffer | AudioBuffer | string;\n}\n\ninterface SamplerOptions extends InstrumentOptions {\n\tattack: Time;\n\trelease: Time;\n\tonload: () => void;\n\tbaseUrl: string;\n\tcurve: ToneBufferSourceCurve;\n\turls: SamplesMap;\n}\n\n/**\n * Pass in an object which maps the note's pitch or midi value to the url,\n * then you can trigger the attack and release of that note like other instruments.\n * By automatically repitching the samples, it is possible to play pitches which\n * were not explicitly included which can save loading time.\n *\n * For sample or buffer playback where repitching is not necessary,\n * use {@link Player}.\n * @param samples An object of samples mapping either Midi\n *                         Note Numbers or Scientific Pitch Notation\n *                         to the url of that sample.\n * @param onload The callback to invoke when all of the samples are loaded.\n * @param baseUrl The root URL of all of the samples, which is prepended to all the URLs.\n * @example\n * var sampler = new Sampler({\n * \t\"C3\" : \"path/to/C3.mp3\",\n * \t\"D#3\" : \"path/to/Dsharp3.mp3\",\n * \t\"F#3\" : \"path/to/Fsharp3.mp3\",\n * \t\"A3\" : \"path/to/A3.mp3\",\n * }, function(){\n * \t//sampler will repitch the closest sample\n * \tsampler.triggerAttack(\"D3\")\n * })\n */\nexport class Sampler extends Instrument<SamplerOptions> {\n\n\tname = \"Sampler\";\n\n\t/**\n\t * The stored and loaded buffers\n\t * @type {Tone.Buffers}\n\t * @private\n\t */\n\tprivate _buffers: ToneAudioBuffers;\n\n\t/**\n\t * The object of all currently playing BufferSources\n\t */\n\tprivate _activeSources: Map<MidiNote, ToneBufferSource[]> = new Map();\n\n\t/**\n\t * The envelope applied to the beginning of the sample.\n\t */\n\tattack: Time;\n\n\t/**\n\t * The envelope applied to the end of the envelope.\n\t */\n\trelease: Time;\n\n\t/**\n\t *  The shape of the attack/release curve.\n\t *  Either \"linear\" or \"exponential\"\n\t */\n\tcurve: ToneBufferSourceCurve;\n\n\tprotected _internalChannels = [this.output];\n\n\tconstructor(options?: Partial<SamplerOptions>);\n\tconstructor(samples?: SamplesMap, options?: Partial<Omit<SamplerOptions, \"urls\">>);\n\tconstructor(samples?: SamplesMap, onload?: () => void, baseUrl?: string);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Sampler.getDefaults(), arguments, [\"urls\", \"onload\", \"baseUrl\"], \"urls\"));\n\t\tconst options = optionsFromArguments(Sampler.getDefaults(), arguments, [\"urls\", \"onload\", \"baseUrl\"], \"urls\");\n\n\t\tconst urlMap = {};\n\t\tObject.keys(options.urls).forEach((note) => {\n\t\t\tthis.assert(isNote(note) || isFinite(note), `url key is neither a note or midi pitch: ${note}`);\n\t\t\tif (isNote(note)) {\n\t\t\t\t// convert the note name to MIDI\n\t\t\t\tconst mid = new FrequencyClass(this.context, note).toMidi();\n\t\t\t\turlMap[mid] = options.urls[note];\n\t\t\t} else if (isFinite(note)) {\n\t\t\t\t// otherwise if it's numbers assume it's midi\n\t\t\t\turlMap[parseInt(note, 10)] = options.urls[note];\n\t\t\t}\n\t\t});\n\n\t\tthis._buffers = new ToneAudioBuffers(urlMap, options.onload, options.baseUrl);\n\t\tthis.attack = options.attack;\n\t\tthis.release = options.release;\n\t\tthis.curve = options.curve;\n\t}\n\n\tstatic getDefaults(): SamplerOptions {\n\t\treturn Object.assign(Instrument.getDefaults(), {\n\t\t\tattack : 0,\n\t\t\tbaseUrl : \"\",\n\t\t\tcurve : \"exponential\" as \"exponential\",\n\t\t\tonload : noOp,\n\t\t\trelease : 0.1,\n\t\t\turls: {},\n\t\t});\n\t}\n\n\t/**\n\t * Returns the difference in steps between the given midi note at the closets sample.\n\t */\n\tprivate _findClosest(midi: MidiNote): Interval {\n\t\t// searches within 8 octaves of the given midi note\n\t\tconst MAX_INTERVAL = 96;\n\t\tlet interval = 0;\n\t\twhile (interval < MAX_INTERVAL) {\n\t\t\t// check above and below\n\t\t\tif (this._buffers.has(midi + interval)) {\n\t\t\t\treturn -interval;\n\t\t\t} else if (this._buffers.has(midi - interval)) {\n\t\t\t\treturn interval;\n\t\t\t}\n\t\t\tinterval++;\n\t\t}\n\t\tthrow new Error(`No available buffers for note: ${midi}`);\n\t}\n\n\t/**\n\t * @param  notes\tThe note to play, or an array of notes.\n\t * @param  time     When to play the note\n\t * @param  velocity The velocity to play the sample back.\n\t */\n\ttriggerAttack(notes: Frequency | Frequency[], time?: Time, velocity: NormalRange = 1): this {\n\t\tthis.log(\"triggerAttack\", notes, time, velocity);\n\t\tif (!Array.isArray(notes)) {\n\t\t\tnotes = [notes];\n\t\t}\n\t\tnotes.forEach(note => {\n\t\t\tconst midi = new FrequencyClass(this.context, note).toMidi();\n\t\t\t// find the closest note pitch\n\t\t\tconst difference = this._findClosest(midi);\n\t\t\tconst closestNote = midi - difference;\n\t\t\tconst buffer = this._buffers.get(closestNote);\n\t\t\tconst playbackRate = intervalToFrequencyRatio(difference);\n\t\t\t// play that note\n\t\t\tconst source = new ToneBufferSource({\n\t\t\t\tbuffer,\n\t\t\t\tcontext: this.context,\n\t\t\t\tcurve : this.curve,\n\t\t\t\tfadeIn : this.attack,\n\t\t\t\tfadeOut : this.release,\n\t\t\t\tplaybackRate,\n\t\t\t}).connect(this.output);\n\t\t\tsource.start(time, 0, buffer.duration / playbackRate, velocity);\n\t\t\t// add it to the active sources\n\t\t\tif (!isArray(this._activeSources.get(midi))) {\n\t\t\t\tthis._activeSources.set(midi, []);\n\t\t\t}\n\t\t\t(this._activeSources.get(midi) as ToneBufferSource[]).push(source);\n\n\t\t\t// remove it when it's done\n\t\t\tsource.onended = () => {\n\t\t\t\tif (this._activeSources && this._activeSources.has(midi)) {\n\t\t\t\t\tconst sources = this._activeSources.get(midi) as ToneBufferSource[];\n\t\t\t\t\tconst index = sources.indexOf(source);\n\t\t\t\t\tif (index !== -1) {\n\t\t\t\t\t\tsources.splice(index, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * @param  notes\tThe note to release, or an array of notes.\n\t * @param  time     \tWhen to release the note.\n\t */\n\ttriggerRelease(notes: Frequency | Frequency[], time?: Time): this {\n\t\tthis.log(\"triggerRelease\", notes, time);\n\t\tif (!Array.isArray(notes)) {\n\t\t\tnotes = [notes];\n\t\t}\n\t\tnotes.forEach(note => {\n\t\t\tconst midi = new FrequencyClass(this.context, note).toMidi();\n\t\t\t// find the note\n\t\t\tif (this._activeSources.has(midi) && (this._activeSources.get(midi) as ToneBufferSource[]).length) {\n\t\t\t\tconst source = (this._activeSources.get(midi) as ToneBufferSource[]).shift() as ToneBufferSource;\n\t\t\t\ttime = this.toSeconds(time);\n\t\t\t\tsource.stop(time);\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Release all currently active notes.\n\t * @param  time     \tWhen to release the notes.\n\t */\n\treleaseAll(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._activeSources.forEach(sources => {\n\t\t\twhile (sources.length) {\n\t\t\t\tconst source = sources.shift() as ToneBufferSource;\n\t\t\t\tsource.stop(computedTime);\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sync the instrument to the Transport. All subsequent calls of\n\t * [triggerAttack](#triggerattack) and [triggerRelease](#triggerrelease)\n\t * will be scheduled along the transport.\n\t * @example\n\t * synth.sync()\n\t * //schedule 3 notes when the transport first starts\n\t * synth.triggerAttackRelease('8n', 0)\n\t * synth.triggerAttackRelease('8n', '8n')\n\t * synth.triggerAttackRelease('8n', '4n')\n\t * //start the transport to hear the notes\n\t * Transport.start()\n\t * @returns {Tone.Instrument} this\n\t */\n\tsync(): this {\n\t\tthis._syncMethod(\"triggerAttack\", 1);\n\t\tthis._syncMethod(\"triggerRelease\", 1);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Invoke the attack phase, then after the duration, invoke the release.\n\t * @param  notes\tThe note to play and release, or an array of notes.\n\t * @param  duration The time the note should be held\n\t * @param  time     When to start the attack\n\t * @param  velocity The velocity of the attack\n\t */\n\ttriggerAttackRelease(\n\t\tnotes: Frequency[] | Frequency,\n\t\tduration: Time | Time[],\n\t\ttime?: Time,\n\t\tvelocity: NormalRange = 1,\n\t): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis.triggerAttack(notes, computedTime, velocity);\n\t\tif (isArray(duration)) {\n\t\t\tthis.assert(isArray(notes), \"notes must be an array when duration is array\");\n\t\t\t(notes as Frequency[]).forEach((note, index) => {\n\t\t\t\tconst d = duration[Math.min(index, duration.length - 1)];\n\t\t\t\tthis.triggerRelease(note, computedTime + this.toSeconds(d));\n\t\t\t});\n\t\t} else {\n\t\t\tthis.triggerRelease(notes, computedTime + this.toSeconds(duration));\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Add a note to the sampler.\n\t *  @param  {Note|Midi}   note      The buffer's pitch.\n\t *  @param  {String|Tone.Buffer|Audiobuffer}  url  Either the url of the bufer,\n\t *                                                 or a buffer which will be added\n\t *                                                 with the given name.\n\t *  @param  {Function=}  callback  The callback to invoke\n\t *                                 when the url is loaded.\n\t */\n\tadd(note: Note | MidiNote, url: string | ToneAudioBuffer | AudioBuffer, callback?: () => void): this {\n\t\tthis.assert(isNote(note) || isFinite(note), `note must be a pitch or midi: ${note}`);\n\t\tif (isNote(note)) {\n\t\t\t// convert the note name to MIDI\n\t\t\tconst mid = new FrequencyClass(this.context, note).toMidi();\n\t\t\tthis._buffers.add(mid, url, callback);\n\t\t} else {\n\t\t\t// otherwise if it's numbers assume it's midi\n\t\t\tthis._buffers.add(note, url, callback);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * If the buffers are loaded or not\n\t */\n\tget loaded(): boolean {\n\t\treturn this._buffers.loaded;\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._buffers.dispose();\n\t\tthis._activeSources.forEach(sources => {\n\t\t\tsources.forEach(source => source.dispose());\n\t\t});\n\t\tthis._activeSources.clear();\n\t\treturn this;\n\t}\n}\n","import \"../core/clock/Transport\";\nimport { ToneWithContext, ToneWithContextOptions } from \"../core/context/ToneWithContext\";\nimport { TicksClass } from \"../core/type/Ticks\";\nimport { TransportTimeClass } from \"../core/type/TransportTime\";\nimport { defaultArg, optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { BasicPlaybackState, StateTimeline } from \"../core/util/StateTimeline\";\nimport { isBoolean, isNumber } from \"../core/util/TypeCheck\";\n\nexport type ToneEventCallback = (time: Seconds, value: any) => void;\n\nexport interface ToneEventOptions extends ToneWithContextOptions {\n\tcallback: ToneEventCallback;\n\tloop: boolean | number;\n\tloopEnd: Time;\n\tloopStart: Time;\n\tplaybackRate: Positive;\n\tvalue?: any;\n\tprobability: NormalRange;\n\tmute: boolean;\n\thumanize: boolean | Time;\n}\n\n/**\n * ToneEvent abstracts away this.context.transport.schedule and provides a schedulable\n * callback for a single or repeatable events along the timeline.\n *\n * @extends {Tone}\n * @param callback The callback to invoke at the time.\n * @param value The value or values which should be passed to the callback function on invocation.\n * @example\n * var chord = new ToneEvent(function(time, chord){\n * \t//the chord as well as the exact time of the event\n * \t//are passed in as arguments to the callback function\n * }, [\"D4\", \"E4\", \"F4\"]);\n * //start the chord at the beginning of the transport timeline\n * chord.start();\n * //loop it every measure for 8 measures\n * chord.loop = 8;\n * chord.loopEnd = \"1m\";\n */\nexport class ToneEvent extends ToneWithContext<ToneEventOptions> {\n\n\tname = \"ToneEvent\";\n\n\t/**\n\t *  Loop value\n\t */\n\tprotected _loop: boolean | number;\n\n\t/**\n\t *  The callback to invoke.\n\t */\n\tcallback: ToneEventCallback;\n\n\t/**\n\t *  The value which is passed to the\n\t *  callback function.\n\t */\n\tvalue: any;\n\n\t/**\n\t *  When the note is scheduled to start.\n\t */\n\tprotected _loopStart: Ticks;\n\n\t/**\n\t *  When the note is scheduled to start.\n\t */\n\tprotected _loopEnd: Ticks;\n\n\t/**\n\t *  Tracks the scheduled events\n\t */\n\tprotected _state: StateTimeline<{\n\t\tid: number,\n\t}> = new StateTimeline(\"stopped\");\n\n\t/**\n\t *  The playback speed of the note. A speed of 1\n\t *  is no change.\n\t */\n\tprotected _playbackRate: Positive;\n\n\t/**\n\t *  A delay time from when the event is scheduled to start\n\t */\n\tprotected _startOffset: Ticks = 0;\n\n\t/**\n\t *  private holder of probability value\n\t */\n\tprotected _probability: NormalRange;\n\n\t/**\n\t *  the amount of variation from the given time.\n\t */\n\tprotected _humanize: boolean | Time;\n\n\t/**\n\t *  If mute is true, the callback won't be invoked.\n\t */\n\tmute: boolean;\n\n\tconstructor(options?: Partial<ToneEventOptions>);\n\tconstructor(callback?: ToneEventCallback, value?: any);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(ToneEvent.getDefaults(), arguments, [\"callback\", \"value\"]));\n\t\tconst options = optionsFromArguments(ToneEvent.getDefaults(), arguments, [\"callback\", \"value\"]);\n\n\t\tthis._loop = options.loop;\n\t\tthis.callback = options.callback;\n\t\tthis.value = options.value;\n\t\tthis._loopStart = this.toTicks(options.loopStart);\n\t\tthis._loopEnd = this.toTicks(options.loopEnd);\n\t\tthis._playbackRate = options.playbackRate;\n\t\tthis._probability = options.probability;\n\t\tthis._humanize = options.humanize;\n\t\tthis.mute = options.mute;\n\t\tthis.playbackRate = options.playbackRate;\n\t}\n\n\tstatic getDefaults(): ToneEventOptions {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tcallback : noOp,\n\t\t\thumanize : false,\n\t\t\tloop : false,\n\t\t\tloopEnd : \"1m\",\n\t\t\tloopStart : 0,\n\t\t\tmute : false,\n\t\t\tplaybackRate : 1,\n\t\t\tprobability : 1,\n\t\t\tvalue : null,\n\t\t});\n\t}\n\n\t/**\n\t *  Reschedule all of the events along the timeline\n\t *  with the updated values.\n\t *  @param after Only reschedules events after the given time.\n\t *  @private\n\t */\n\tprivate _rescheduleEvents(after: Ticks = -1): void {\n\t\t// if no argument is given, schedules all of the events\n\t\tthis._state.forEachFrom(after, event => {\n\t\t\tlet duration;\n\t\t\tif (event.state === \"started\") {\n\t\t\t\tif (event.id !== -1) {\n\t\t\t\t\tthis.context.transport.clear(event.id);\n\t\t\t\t}\n\t\t\t\tconst startTick = event.time + Math.round(this.startOffset / this._playbackRate);\n\t\t\t\tif (this._loop === true || isNumber(this._loop) && this._loop > 1) {\n\t\t\t\t\tduration = Infinity;\n\t\t\t\t\tif (isNumber(this._loop)) {\n\t\t\t\t\t\tduration = (this._loop) * this._getLoopDuration();\n\t\t\t\t\t}\n\t\t\t\t\tconst nextEvent = this._state.getAfter(startTick);\n\t\t\t\t\tif (nextEvent !== null) {\n\t\t\t\t\t\tduration = Math.min(duration, nextEvent.time - startTick);\n\t\t\t\t\t}\n\t\t\t\t\tif (duration !== Infinity) {\n\t\t\t\t\t\t// schedule a stop since it's finite duration\n\t\t\t\t\t\tthis._state.setStateAtTime(\"stopped\", startTick + duration + 1, { id : -1 });\n\t\t\t\t\t\tduration = new TicksClass(this.context, duration);\n\t\t\t\t\t}\n\t\t\t\t\tconst interval = new TicksClass(this.context, this._getLoopDuration());\n\t\t\t\t\tevent.id = this.context.transport.scheduleRepeat(\n\t\t\t\t\t\tthis._tick.bind(this), interval, new TicksClass(this.context, startTick), duration);\n\t\t\t\t} else {\n\t\t\t\t\tevent.id = this.context.transport.schedule(this._tick.bind(this), new TicksClass(this.context, startTick));\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t *  Returns the playback state of the note, either \"started\" or \"stopped\".\n\t */\n\tget state(): BasicPlaybackState {\n\t\treturn this._state.getValueAtTime(this.context.transport.ticks) as BasicPlaybackState;\n\t}\n\n\t/**\n\t * The start from the scheduled start time.\n\t */\n\tget startOffset(): Ticks {\n\t\treturn this._startOffset;\n\t}\n\tset startOffset(offset) {\n\t\tthis._startOffset = offset;\n\t}\n\n\t/**\n\t *  The probability of the notes being triggered.\n\t */\n\tget probability(): NormalRange {\n\t\treturn this._probability;\n\t}\n\tset probability(prob) {\n\t\tthis._probability = prob;\n\t}\n\n\t/**\n\t *  If set to true, will apply small random variation\n\t *  to the callback time. If the value is given as a time, it will randomize\n\t *  by that amount.\n\t * @example\n\t * event.humanize = true;\n\t */\n\tget humanize(): Time | boolean {\n\t\treturn this._humanize;\n\t}\n\n\tset humanize(variation) {\n\t\tthis._humanize = variation;\n\t}\n\n\t/**\n\t *  Start the note at the given time.\n\t *  @param  time  When the event should start.\n\t */\n\tstart(time?: TransportTime | TransportTimeClass): this {\n\t\ttime = this.toTicks(time);\n\t\tif (this._state.getValueAtTime(time) === \"stopped\") {\n\t\t\tthis._state.add({\n\t\t\t\tid : -1,\n\t\t\t\tstate : \"started\",\n\t\t\t\ttime,\n\t\t\t});\n\t\t\tthis._rescheduleEvents(time);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Stop the Event at the given time.\n\t *  @param  time  When the event should stop.\n\t */\n\tstop(time?: TransportTime | TransportTimeClass): this {\n\t\tthis.cancel(time);\n\t\ttime = this.toTicks(time);\n\t\tif (this._state.getValueAtTime(time) === \"started\") {\n\t\t\tthis._state.setStateAtTime(\"stopped\", time, { id: -1 });\n\t\t\tconst previousEvent = this._state.getBefore(time);\n\t\t\tlet reschedulTime = time;\n\t\t\tif (previousEvent !== null) {\n\t\t\t\treschedulTime = previousEvent.time;\n\t\t\t}\n\t\t\tthis._rescheduleEvents(reschedulTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Cancel all scheduled events greater than or equal to the given time\n\t *  @param  time  The time after which events will be cancel.\n\t */\n\tcancel(time?: TransportTime | TransportTimeClass): this {\n\t\ttime = defaultArg(time, -Infinity);\n\t\ttime = this.toTicks(time);\n\t\tthis._state.forEachFrom(time, event => {\n\t\t\tthis.context.transport.clear(event.id);\n\t\t});\n\t\tthis._state.cancel(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  The callback function invoker. Also\n\t *  checks if the Event is done playing\n\t *  @param  time  The time of the event in seconds\n\t */\n\tprotected _tick(time: Seconds): void {\n\t\tconst ticks = this.context.transport.getTicksAtTime(time);\n\t\tif (!this.mute && this._state.getValueAtTime(ticks) === \"started\") {\n\t\t\tif (this.probability < 1 && Math.random() > this.probability) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (this.humanize) {\n\t\t\t\tlet variation = 0.02;\n\t\t\t\tif (!isBoolean(this.humanize)) {\n\t\t\t\t\tvariation = this.toSeconds(this.humanize);\n\t\t\t\t}\n\t\t\t\ttime += (Math.random() * 2 - 1) * variation;\n\t\t\t}\n\t\t\tthis.callback(time, this.value);\n\t\t}\n\t}\n\n\t/**\n\t *  Get the duration of the loop.\n\t */\n\tprotected _getLoopDuration(): Ticks {\n\t\treturn Math.round((this._loopEnd - this._loopStart) / this._playbackRate);\n\t}\n\n\t/**\n\t *  If the note should loop or not\n\t *  between ToneEvent.loopStart and\n\t *  ToneEvent.loopEnd. If set to true,\n\t *  the event will loop indefinitely,\n\t *  if set to a number greater than 1\n\t *  it will play a specific number of\n\t *  times, if set to false, 0 or 1, the\n\t *  part will only play once.\n\t */\n\tget loop(): boolean | number {\n\t\treturn this._loop;\n\t}\n\tset loop(loop) {\n\t\tthis._loop = loop;\n\t\tthis._rescheduleEvents();\n\t}\n\n\t/**\n\t * \tThe playback rate of the note. Defaults to 1.\n\t *  @example\n\t * note.loop = true;\n\t * //repeat the note twice as fast\n\t * note.playbackRate = 2;\n\t */\n\tget playbackRate(): Positive {\n\t\treturn this._playbackRate;\n\t}\n\tset playbackRate(rate) {\n\t\tthis._playbackRate = rate;\n\t\tthis._rescheduleEvents();\n\t}\n\n\t/**\n\t *  The loopEnd point is the time the event will loop\n\t *  if ToneEvent.loop is true.\n\t */\n\tget loopEnd(): Time {\n\t\treturn new TicksClass(this.context, this._loopEnd).toSeconds();\n\t}\n\tset loopEnd(loopEnd) {\n\t\tthis._loopEnd = this.toTicks(loopEnd);\n\t\tif (this._loop) {\n\t\t\tthis._rescheduleEvents();\n\t\t}\n\t}\n\n\t/**\n\t *  The time when the loop should start.\n\t */\n\tget loopStart(): Time {\n\t\treturn new TicksClass(this.context, this._loopStart).toSeconds();\n\t}\n\tset loopStart(loopStart) {\n\t\tthis._loopStart = this.toTicks(loopStart);\n\t\tif (this._loop) {\n\t\t\tthis._rescheduleEvents();\n\t\t}\n\t}\n\n\t/**\n\t *  The current progress of the loop interval.\n\t *  Returns 0 if the event is not started yet or\n\t *  it is not set to loop.\n\t */\n\tget progress(): NormalRange {\n\t\tif (this._loop) {\n\t\t\tconst ticks = this.context.transport.ticks;\n\t\t\tconst lastEvent = this._state.get(ticks);\n\t\t\tif (lastEvent !== null && lastEvent.state === \"started\") {\n\t\t\t\tconst loopDuration = this._getLoopDuration();\n\t\t\t\tconst progress = (ticks - lastEvent.time) % loopDuration;\n\t\t\t\treturn progress / loopDuration;\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.cancel();\n\t\tthis._state.dispose();\n\t\tthis.value = null;\n\t\treturn this;\n\t}\n}\n","import { TicksClass } from \"../core/type/Ticks\";\nimport { TransportTimeClass } from \"../core/type/TransportTime\";\nimport { defaultArg, optionsFromArguments } from \"../core/util/Defaults\";\nimport { StateTimeline } from \"../core/util/StateTimeline\";\nimport { isArray, isDefined, isObject, isUndef } from \"../core/util/TypeCheck\";\nimport { ToneEvent, ToneEventCallback, ToneEventOptions } from \"./ToneEvent\";\n\ntype PartEventDescription = Time | [Time, any] | {\n\ttime: Time,\n\t[key: string]: any;\n};\n\ninterface PartOptions extends ToneEventOptions {\n\tevents: PartEventDescription[];\n}\n\n/**\n *  Part is a collection ToneEvents which can be started/stopped and looped as a single unit.\n *\n *  @param callback The callback to invoke on each event\n *  @param events the array of events\n *  @example\n * var part = new Part(function(time, note){\n * \t//the notes given as the second element in the array\n * \t//will be passed in as the second argument\n * \tsynth.triggerAttackRelease(note, \"8n\", time);\n * }, [[0, \"C2\"], [\"0:2\", \"C3\"], [\"0:3:2\", \"G2\"]]);\n *  @example\n * //use an array of objects as long as the object has a \"time\" attribute\n * var part = new Part(function(time, value){\n * \t//the value is an object which contains both the note and the velocity\n * \tsynth.triggerAttackRelease(value.note, \"8n\", time, value.velocity);\n * }, [{\"time\" : 0, \"note\" : \"C3\", \"velocity\": 0.9},\n * \t   {\"time\" : \"0:2\", \"note\" : \"C4\", \"velocity\": 0.5}\n * ]).start(0);\n */\nexport class Part extends ToneEvent {\n\n\tname = \"Part\";\n\n\t/**\n\t *  Tracks the scheduled events\n\t */\n\tprotected _state: StateTimeline<{\n\t\tid: number,\n\t\toffset: number,\n\t}> = new StateTimeline(\"stopped\");\n\n\t/**\n\t * The events that belong to this part\n\t */\n\tprivate _events: Set<ToneEvent> = new Set();\n\n\tconstructor(callback?: ToneEventCallback, value?: any);\n\tconstructor(options?: Partial<PartOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Part.getDefaults(), arguments, [\"callback\", \"events\"]));\n\t\tconst options = optionsFromArguments(Part.getDefaults(), arguments, [\"callback\", \"events\"]);\n\n\t\t// add the events\n\t\toptions.events.forEach(event => {\n\t\t\tif (isArray(event)) {\n\t\t\t\tthis.add(event[0], event[1]);\n\t\t\t} else {\n\t\t\t\t// @ts-ignore\n\t\t\t\tthis.add(event);\n\t\t\t}\n\t\t});\n\t}\n\n\tstatic getDefaults(): PartOptions {\n\t\treturn Object.assign(ToneEvent.getDefaults(), {\n\t\t\tevents: [],\n\t\t});\n\t}\n\n\t/**\n\t *  Start the part at the given time.\n\t *  @param  time    When to start the part.\n\t *  @param  offset  The offset from the start of the part to begin playing at.\n\t */\n\tstart(time?: TransportTime, offset?: Time): this {\n\t\tconst ticks = this.toTicks(time);\n\t\tif (this._state.getValueAtTime(ticks) !== \"started\") {\n\t\t\toffset = defaultArg(offset, this._loop ? this._loopStart : 0);\n\t\t\tif (this._loop) {\n\t\t\t\toffset = defaultArg(offset, this._loopStart);\n\t\t\t} else {\n\t\t\t\toffset = defaultArg(offset, 0);\n\t\t\t}\n\t\t\tconst computedOffset = this.toTicks(offset);\n\t\t\tthis._state.add({\n\t\t\t\tid : -1,\n\t\t\t\toffset: computedOffset,\n\t\t\t\tstate : \"started\",\n\t\t\t\ttime : ticks,\n\t\t\t});\n\t\t\tthis._forEach(event => {\n\t\t\t\tthis._startNote(event, ticks, computedOffset);\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Start the event in the given event at the correct time given\n\t *  the ticks and offset and looping.\n\t *  @param  event\n\t *  @param  ticks\n\t *  @param  offset\n\t */\n\tprivate _startNote(event: ToneEvent, ticks: Ticks, offset: Ticks): void {\n\t\tticks -= offset;\n\t\tif (this._loop) {\n\t\t\tif (event.startOffset >= this._loopStart && event.startOffset < this._loopEnd) {\n\t\t\t\tif (event.startOffset < offset) {\n\t\t\t\t\t// start it on the next loop\n\t\t\t\t\tticks += this._getLoopDuration();\n\t\t\t\t}\n\t\t\t\tevent.start(new TicksClass(this.context, ticks));\n\t\t\t} else if (event.startOffset < this._loopStart && event.startOffset >= offset) {\n\t\t\t\tevent.loop = false;\n\t\t\t\tevent.start(new TicksClass(this.context, ticks));\n\t\t\t}\n\t\t} else if (event.startOffset >= offset) {\n\t\t\tevent.start(new TicksClass(this.context, ticks));\n\t\t}\n\t}\n\n\tget startOffset(): Ticks {\n\t\treturn this._startOffset;\n\t}\n\tset startOffset(offset) {\n\t\tthis._startOffset = offset;\n\t\tthis._forEach(event => {\n\t\t\tevent.startOffset += this._startOffset;\n\t\t});\n\t}\n\n\t/**\n\t *  Stop the part at the given time.\n\t *  @param  time  When to stop the part.\n\t */\n\tstop(time?: TransportTime): this {\n\t\tconst ticks = this.toTicks(time);\n\t\tthis._state.cancel(ticks);\n\t\tthis._state.setStateAtTime(\"stopped\", ticks);\n\t\tthis._forEach(event => {\n\t\t\tevent.stop(time);\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get/Set an Event's value at the given time.\n\t * If a value is passed in and no event exists at\n\t * the given time, one will be created with that value.\n\t * If two events are at the same time, the first one will\n\t * be returned.\n\t * @example\n\t * part.at(\"1m\"); //returns the part at the first measure\n\t * part.at(\"2m\", \"C2\"); //set the value at \"2m\" to C2.\n\t * //if an event didn't exist at that time, it will be created.\n\t * @param time The time of the event to get or set.\n\t * @param value If a value is passed in, the value of the event at the given time will be set to it.\n\t */\n\tat(time: Time, value?: any): ToneEvent | null {\n\t\tconst timeInTicks = new TransportTimeClass(this.context, time).toTicks();\n\t\tconst tickTime = new TicksClass(this.context, 1).toSeconds();\n\n\t\tconst iterator = this._events.values();\n\t\tlet result = iterator.next();\n\t\twhile (!result.done) {\n\t\t\tconst event = result.value;\n\t\t\tif (Math.abs(timeInTicks - event.startOffset) < tickTime) {\n\t\t\t\tif (isDefined(value)) {\n\t\t\t\t\tevent.value = value;\n\t\t\t\t}\n\t\t\t\treturn event;\n\t\t\t}\n\t\t\tresult = iterator.next();\n\t\t}\n\t\t// if there was no event at that time, create one\n\t\tif (isDefined(value)) {\n\t\t\tthis.add(time, value);\n\t\t\t// return the new event\n\t\t\treturn this.at(time);\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t *  Add a an event to the part.\n\t *  @param time The time the note should start. If an object is passed in, it should\n\t *  \t\t\thave a 'time' attribute and the rest of the object will be used as the 'value'.\n\t *  @param  value\n\t * @example\n\t * part.add(\"1m\", \"C#+11\");\n\t * @example\n\t * part.add({\n\t * \ttime: \"1m\",\n\t * \tnote: \"C#11\"\n\t * });\n\t */\n\tadd(obj: {\n\t\ttime: Time,\n\t\t[key: string]: any;\n\t}): this;\n\tadd(time: Time, value?: any): this;\n\tadd(time: Time | object, value?: any): this {\n\t\t// extract the parameters\n\t\tif (isObject(time) && time.hasOwnProperty(\"time\")) {\n\t\t\tvalue = time;\n\t\t\ttime = value.time;\n\t\t}\n\t\ttime = this.toTicks(time);\n\t\tlet event: ToneEvent;\n\t\tif (value instanceof ToneEvent) {\n\t\t\tevent = value;\n\t\t\tevent.callback = this._tick.bind(this);\n\t\t} else {\n\t\t\tevent = new ToneEvent({\n\t\t\t\tcallback : this._tick.bind(this),\n\t\t\t\tcontext: this.context,\n\t\t\t\tvalue,\n\t\t\t});\n\t\t}\n\t\t// the start offset\n\t\tevent.startOffset = time;\n\n\t\t// initialize the values\n\t\tevent.set({\n\t\t\thumanize : this.humanize,\n\t\t\tloop : this.loop,\n\t\t\tloopEnd : this.loopEnd,\n\t\t\tloopStart : this.loopStart,\n\t\t\tplaybackRate : this.playbackRate,\n\t\t\tprobability : this.probability,\n\t\t});\n\n\t\tthis._events.add(event);\n\n\t\t// start the note if it should be played right now\n\t\tthis._restartEvent(event);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Restart the given event\n\t */\n\tprivate _restartEvent(event: ToneEvent): void {\n\t\tthis._state.forEach((stateEvent) => {\n\t\t\tif (stateEvent.state === \"started\") {\n\t\t\t\tthis._startNote(event, stateEvent.time, stateEvent.offset);\n\t\t\t} else {\n\t\t\t\t// stop the note\n\t\t\t\tevent.stop(new TicksClass(this.context, stateEvent.time));\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t *  Remove an event from the part. If the event at that time is a Part,\n\t *  it will remove the entire part.\n\t *  @param time The time of the event\n\t *  @param value Optionally select only a specific event value\n\t */\n\tremove(obj: {\n\t\ttime: Time,\n\t\t[key: string]: any;\n\t}): this;\n\tremove(time: Time, value?: any): this;\n\tremove(time: Time | object, value?: any): this {\n\t\t// extract the parameters\n\t\tif (isObject(time) && time.hasOwnProperty(\"time\")) {\n\t\t\tvalue = time;\n\t\t\ttime = value.time;\n\t\t}\n\t\ttime = this.toTicks(time);\n\t\tthis._events.forEach(event => {\n\t\t\tif (event.startOffset === time) {\n\t\t\t\tif (isUndef(value) || (isDefined(value) && event.value === value)) {\n\t\t\t\t\tthis._events.delete(event);\n\t\t\t\t\tevent.dispose();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Remove all of the notes from the group.\n\t */\n\tclear(): this {\n\t\tthis._forEach(event => event.dispose());\n\t\tthis._events.clear();\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Cancel scheduled state change events: i.e. \"start\" and \"stop\".\n\t *  @param after The time after which to cancel the scheduled events.\n\t */\n\tcancel(after?: TransportTime | TransportTimeClass): this {\n\t\tthis._forEach(event => event.cancel(after));\n\t\tthis._state.cancel(this.toTicks(after));\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over all of the events\n\t */\n\tprivate _forEach(callback: (event: ToneEvent) => void): this {\n\t\tif (this._events) {\n\t\t\tthis._events.forEach(event => {\n\t\t\t\tif (event instanceof Part) {\n\t\t\t\t\tevent._forEach(callback);\n\t\t\t\t} else {\n\t\t\t\t\tcallback(event);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Set the attribute of all of the events\n\t *  @param  attr  the attribute to set\n\t *  @param  value      The value to set it to\n\t */\n\tprivate _setAll(attr: string, value: any): void {\n\t\tthis._forEach(event => {\n\t\t\tevent[attr] = value;\n\t\t});\n\t}\n\n\t/**\n\t *  Internal tick method\n\t *  @param  time  The time of the event in seconds\n\t */\n\tprotected _tick(time: Seconds, value?: any): void {\n\t\tif (!this.mute) {\n\t\t\tthis.callback(time, value);\n\t\t}\n\t}\n\n\t/**\n\t *  Determine if the event should be currently looping\n\t *  given the loop boundries of this Part.\n\t *  @param  event  The event to test\n\t */\n\tprivate _testLoopBoundries(event: ToneEvent): void {\n\t\tif (this._loop && (event.startOffset < this._loopStart || event.startOffset >= this._loopEnd)) {\n\t\t\tevent.cancel(0);\n\t\t} else if (event.state === \"stopped\") {\n\t\t\t// reschedule it if it's stopped\n\t\t\tthis._restartEvent(event);\n\t\t}\n\t}\n\n\t/**\n\t *  The probability of the notes being triggered.\n\t */\n\tget probability(): NormalRange {\n\t\treturn this._probability;\n\t}\n\tset probability(prob) {\n\t\tthis._probability = prob;\n\t\tthis._setAll(\"probability\", prob);\n\t}\n\n\t/**\n\t * If set to true, will apply small random variation\n\t * to the callback time. If the value is given as a time, it will randomize\n\t * by that amount.\n\t * @example\n\t * event.humanize = true;\n\t */\n\tget humanize(): boolean | Time {\n\t\treturn this._humanize;\n\t}\n\tset humanize(variation) {\n\t\tthis._humanize = variation;\n\t\tthis._setAll(\"humanize\", variation);\n\t}\n\n\t/**\n\t * If the part should loop or not\n\t * between Part.loopStart and\n\t * Part.loopEnd. If set to true,\n\t * the part will loop indefinitely,\n\t * if set to a number greater than 1\n\t * it will play a specific number of\n\t * times, if set to false, 0 or 1, the\n\t * part will only play once.\n\t * @example\n\t * //loop the part 8 times\n\t * part.loop = 8;\n\t */\n\tget loop(): boolean | number {\n\t\treturn this._loop;\n\t}\n\tset loop(loop) {\n\t\tthis._loop = loop;\n\t\tthis._forEach(event => {\n\t\t\tevent.loopStart = this.loopStart;\n\t\t\tevent.loopEnd = this.loopEnd;\n\t\t\tevent.loop = loop;\n\t\t\tthis._testLoopBoundries(event);\n\t\t});\n\t}\n\n\t/**\n\t *  The loopEnd point determines when it will\n\t *  loop if Part.loop is true.\n\t *  @memberOf Part#\n\t *  @type {Time}\n\t *  @name loopEnd\n\t */\n\tget loopEnd(): Time {\n\t\treturn new TicksClass(this.context, this._loopEnd).toSeconds();\n\t}\n\tset loopEnd(loopEnd) {\n\t\tthis._loopEnd = this.toTicks(loopEnd);\n\t\tif (this._loop) {\n\t\t\tthis._forEach(event => {\n\t\t\t\tevent.loopEnd = loopEnd;\n\t\t\t\tthis._testLoopBoundries(event);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t *  The loopStart point determines when it will\n\t *  loop if Part.loop is true.\n\t */\n\tget loopStart(): Time {\n\t\treturn new TicksClass(this.context, this._loopStart).toSeconds();\n\t}\n\tset loopStart(loopStart) {\n\t\tthis._loopStart = this.toTicks(loopStart);\n\t\tif (this._loop) {\n\t\t\tthis._forEach(event => {\n\t\t\t\tevent.loopStart = this.loopStart;\n\t\t\t\tthis._testLoopBoundries(event);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * \tThe playback rate of the part\n\t */\n\tget playbackRate(): Positive {\n\t\treturn this._playbackRate;\n\t}\n\tset playbackRate(rate) {\n\t\tthis._playbackRate = rate;\n\t\tthis._setAll(\"playbackRate\", rate);\n\t}\n\n\t/**\n\t * \tThe number of scheduled notes in the part.\n\t */\n\tget length(): number {\n\t\treturn this._events.size;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.clear();\n\t\treturn this;\n\t}\n}\n","import { TicksClass } from \"../core/type/Ticks\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { isArray, isString } from \"../core/util/TypeCheck\";\nimport { Part } from \"./Part\";\nimport { ToneEvent, ToneEventCallback, ToneEventOptions } from \"./ToneEvent\";\n\ntype SequenceEventDescription = Array<any | any[]>;\n\ninterface SequenceOptions extends Omit<ToneEventOptions, \"value\"> {\n\tloopStart: number;\n\tloopEnd: number;\n\tsubdivision: Time;\n\tevents: SequenceEventDescription;\n}\n\n/**\n * A sequence is an alternate notation of a part. Instead\n * of passing in an array of [time, event] pairs, pass\n * in an array of events which will be spaced at the\n * given subdivision. Sub-arrays will subdivide that beat\n * by the number of items are in the array.\n * Sequence notation inspiration from [Tidal](http://yaxu.org/tidal/)\n * @param  callback  The callback to invoke with every note\n * @param  sequence  The sequence\n * @param  subdivision  The subdivision between which events are placed.\n * @example\n * var seq = new Sequence(function(time, note){\n * \tconsole.log(note);\n * //straight quater notes\n * }, [\"C4\", \"E4\", \"G4\", \"A4\"], \"4n\");\n * @example\n * var seq = new Sequence(function(time, note){\n * \tconsole.log(note);\n * //subdivisions are given as subarrays\n * }, [\"C4\", [\"E4\", \"D4\", \"E4\"], \"G4\", [\"A4\", \"G4\"]]);\n */\nexport class Sequence extends ToneEvent {\n\n\tname = \"Sequence\";\n\n\t/**\n\t *  The subdivison of each note\n\t */\n\tprivate _subdivision: Ticks;\n\n\t/**\n\t * The object responsible for scheduling all of the events\n\t */\n\tprivate _part: Part = new Part({\n\t\tcallback: this._seqCallback.bind(this),\n\t\tcontext: this.context,\n\t});\n\n\t/**\n\t * private reference to all of the sequence proxies\n\t */\n\tprivate _events: any[] = [];\n\n\t/**\n\t * The proxied array\n\t */\n\tprivate _eventsArray: any[] = [];\n\n\tconstructor(\n\t\tcallback?: ToneEventCallback,\n\t\tevents?: SequenceEventDescription,\n\t\tsubdivision?: Time,\n\t);\n\tconstructor(options?: Partial<SequenceOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Sequence.getDefaults(), arguments, [\"callback\", \"events\", \"subdivision\"]));\n\t\tconst options = optionsFromArguments(Sequence.getDefaults(), arguments, [\"callback\", \"events\", \"subdivision\"]);\n\n\t\tthis._subdivision = this.toTicks(options.subdivision);\n\n\t\tthis.events = options.events;\n\n\t\t// set all of the values\n\t\tthis.loop = options.loop;\n\t\tthis.loopStart = options.loopStart;\n\t\tthis.loopEnd = options.loopEnd;\n\t\tthis.playbackRate = options.playbackRate;\n\t\tthis.probability = options.probability;\n\t\tthis.humanize = options.humanize;\n\t\tthis.mute = options.mute;\n\t\tthis.playbackRate = options.playbackRate;\n\t}\n\n\tstatic getDefaults(): SequenceOptions {\n\t\treturn Object.assign( omitFromObject(ToneEvent.getDefaults(), [\"value\"]), {\n\t\t\tevents: [],\n\t\t\tloop: true,\n\t\t\tloopEnd : 0,\n\t\t\tloopStart: 0,\n\t\t\tsubdivision: \"8n\",\n\t\t});\n\t}\n\n\t/**\n\t * The internal callback for when an event is invoked\n\t */\n\tprivate _seqCallback(time: Seconds, value: any): void {\n\t\tif (value !== null) {\n\t\t\tthis.callback(time, value);\n\t\t}\n\t}\n\n\t/**\n\t * The sequence\n\t */\n\tget events(): any[] {\n\t\treturn this._events;\n\t}\n\tset events(s) {\n\t\tthis.clear();\n\t\tthis._eventsArray = s;\n\t\tthis._events = this._createSequence(this._eventsArray);\n\t\tthis._eventsUpdated();\n\t}\n\n\t/**\n\t *  Start the part at the given time.\n\t *  @param  time    When to start the part.\n\t *  @param  offset  The offset index to start at\n\t */\n\tstart(time?: TransportTime, offset?: number): this {\n\t\tthis._part.start(time, offset ? this._indexTime(offset) : offset);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Stop the part at the given time.\n\t *  @param  time  When to stop the part.\n\t */\n\tstop(time?: TransportTime): this {\n\t\tthis._part.stop(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  The subdivision of the sequence. This can only be\n\t *  set in the constructor. The subdivision is the\n\t *  interval between successive steps.\n\t */\n\tget subdivision(): Seconds {\n\t\treturn new TicksClass(this.context, this._subdivision).toSeconds();\n\t}\n\n\t/**\n\t * Create a sequence proxy which can be monitored to create subsequences\n\t */\n\tprivate _createSequence(array: any[]): any[] {\n\t\treturn new Proxy(array, {\n\t\t\tget: (target: any[], property: PropertyKey): any => {\n\t\t\t\t// property is index in this case\n\t\t\t\treturn target[property];\n\t\t\t},\n\t\t\tset: (target: any[], property: PropertyKey, value: any): boolean => {\n\t\t\t\tif (isString(property) && isFinite(parseInt(property, 10))) {\n\t\t\t\t\tconst index = parseInt(property, 10);\n\t\t\t\t\tif (isArray(value)) {\n\t\t\t\t\t\ttarget[property] = this._createSequence(value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttarget[property] = value;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttarget[property] = value;\n\t\t\t\t}\n\t\t\t\tthis._eventsUpdated();\n\t\t\t\t// return true to accept the changes\n\t\t\t\treturn true;\n\t\t\t},\n\t\t});\n\t}\n\n\t/**\n\t * When the sequence has changed, all of the events need to be recreated\n\t */\n\tprivate _eventsUpdated(): void {\n\t\tthis._part.clear();\n\t\tthis._rescheduleSequence(this._eventsArray, this._subdivision, this.startOffset);\n\t\t// update the loopEnd\n\t\tthis.loopEnd = this.loopEnd;\n\t}\n\n\t/**\n\t * reschedule all of the events that need to be rescheduled\n\t */\n\tprivate _rescheduleSequence(sequence: any[], subdivision: Ticks, startOffset: Ticks): void {\n\t\tsequence.forEach((value, index) => {\n\t\t\tconst eventOffset = index * (subdivision) + startOffset;\n\t\t\tif (isArray(value)) {\n\t\t\t\tthis._rescheduleSequence(value, subdivision / value.length, eventOffset);\n\t\t\t} else {\n\t\t\t\tconst startTime = new TicksClass(this.context, eventOffset, \"i\").toSeconds();\n\t\t\t\tthis._part.add(startTime, value);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t *  Get the time of the index given the Sequence's subdivision\n\t *  @param  index\n\t *  @return The time of that index\n\t *  @private\n\t */\n\tprivate _indexTime(index: number): Seconds {\n\t\treturn new TicksClass(this.context, index * (this._subdivision) + this.startOffset).toSeconds();\n\t}\n\n\t/**\n\t * Clear all of the events\n\t */\n\tclear(): this {\n\t\tthis._part.clear();\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._part.dispose();\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// PROXY CALLS\n\t///////////////////////////////////////////////////////////////////////////\n\n\tget loop(): boolean | number {\n\t\treturn this._part.loop;\n\t}\n\tset loop(l) {\n\t\tif (this._part) {\n\t\t\tthis._part.loop = l;\n\t\t}\n\t}\n\n\t/**\n\t * The index at which the sequence should start looping\n\t */\n\tget loopStart(): number {\n\t\treturn this._loopStart;\n\t}\n\tset loopStart(index) {\n\t\tthis._loopStart = index;\n\t\tif (this._part) {\n\t\t\tthis._part.loopStart = this._indexTime(index);\n\t\t}\n\t}\n\n\t/**\n\t * The index at which the sequence should end looping\n\t */\n\tget loopEnd(): number {\n\t\treturn this._loopEnd;\n\t}\n\tset loopEnd(index) {\n\t\tthis._loopEnd = index;\n\t\tif (this._part) {\n\t\t\tif (index === 0) {\n\t\t\t\tthis._part.loopEnd = this._indexTime(this._eventsArray.length);\n\t\t\t} else {\n\t\t\t\tthis._part.loopEnd = this._indexTime(index);\n\t\t\t}\n\t\t}\n\t}\n\n\tget startOffset(): Ticks {\n\t\treturn this._part.startOffset;\n\t}\n\tset startOffset(start) {\n\t\tif (this._part) {\n\t\t\tthis._part.startOffset = start;\n\t\t}\n\t}\n\n\tget playbackRate(): Positive {\n\t\treturn this._part.playbackRate;\n\t}\n\tset playbackRate(rate) {\n\t\tif (this._part) {\n\t\t\tthis._part.playbackRate = rate;\n\t\t}\n\t}\n\n\tget probability(): NormalRange {\n\t\treturn this._part.probability;\n\t}\n\tset probability(prob) {\n\t\tif (this._part) {\n\t\t\tthis._part.probability = prob;\n\t\t}\n\t}\n\n\tget humanize(): boolean | Time {\n\t\treturn this._part.humanize;\n\t}\n\tset humanize(variation) {\n\t\tif (this._part) {\n\t\t\tthis._part.humanize = variation;\n\t\t}\n\t}\n\n\t/**\n\t * The number of scheduled events\n\t */\n\tget length(): number {\n\t\treturn this._part.length;\n\t}\n}\n","import { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { SignalOperator } from \"./SignalOperator\";\nimport { WaveShaper } from \"./WaveShaper\";\n\n/**\n * GainToAudio converts an input in NormalRange [0,1] to AudioRange [-1,1].\n * See {@link AudioToGain}.\n *\n * @example\n * var a2g = new GainToAudio();\n */\nexport class GainToAudio extends SignalOperator<ToneAudioNodeOptions> {\n\n\tname = \"GainToAudio\";\n\n\t/**\n\t * The node which converts the audio ranges\n\t */\n\tprivate _norm = new WaveShaper({\n\t\tcontext: this.context,\n\t\tmapping: x => Math.abs(x) * 2 - 1,\n\t});\n\tprotected _internalChannels = [this._norm];\n\n\t/**\n\t * The NormalRange input [0, 1]\n\t */\n\tinput = this._norm;\n\n\t/**\n\t * The AudioRange output [-1, 1]\n\t */\n\toutput = this._norm;\n\n\t/**\n\t *  clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._norm.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { connect, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { GainToAudio } from \"../../signal/GainToAudio\";\nimport { Signal } from \"../../signal/Signal\";\n\ninterface CrossFadeOptions extends ToneAudioNodeOptions {\n\tfade: NormalRange;\n}\n\n/**\n * Tone.Crossfade provides equal power fading between two inputs.\n * More on crossfading technique [here](https://en.wikipedia.org/wiki/Fade_(audio_engineering)#Crossfading).\n * ```\n *                                             +---------+\n *                                            +> input a +>--+\n * +-----------+   +---------------------+     |         |   |\n * | 1s signal +>--> stereoPannerNode  L +>----> gain    |   |\n * +-----------+   |                     |     +---------+   |\n *               +-> pan               R +>-+                |   +--------+\n *               | +---------------------+  |                +---> output +>\n *  +------+     |                          |  +---------+   |   +--------+\n *  | fade +>----+                          | +> input b +>--+\n *  +------+                                |  |         |\n *                                          +--> gain    |\n *                                             +---------+\n * ```\n * @example\n * var crossFade = new CrossFade(0.5);\n * //connect effect A to crossfade from\n * //effect output 0 to crossfade input 0\n * effectA.connect(crossFade.a);\n * //connect effect B to crossfade from\n * //effect output 0 to crossfade input 1\n * effectB.connect(crossFade.b);\n * crossFade.fade.value = 0;\n * // ^ only effectA is output\n * crossFade.fade.value = 1;\n * // ^ only effectB is output\n * crossFade.fade.value = 0.5;\n * // ^ the two signals are mixed equally.\n */\nexport class CrossFade extends ToneAudioNode<CrossFadeOptions> {\n\n\tname = \"CrossFade\";\n\n\t/**\n\t * The crossfading is done by a StereoPannerNode\n\t */\n\tprivate _panner: StereoPannerNode = this.context.createStereoPanner();\n\n\t/**\n\t * Split the output of the panner node into two values used to control the gains.\n\t */\n\tprivate _split: ChannelSplitterNode = this.context.createChannelSplitter(2);\n\n\t/**\n\t * Convert the fade value into an audio range value so it can be connected\n\t * to the panner.pan AudioParam\n\t */\n\tprivate _g2a: GainToAudio = new GainToAudio({ context : this.context });\n\n\t/**\n\t * The input which is at full level when fade = 0\n\t */\n\ta: Gain = new Gain({\n\t\tcontext : this.context,\n\t\tgain: 0,\n\t});\n\n\t/**\n\t * The input which is at full level when fade = 1\n\t */\n\tb: Gain = new Gain({\n\t\tcontext : this.context,\n\t\tgain: 0,\n\t});\n\n\t/**\n\t * The output is a mix between `a` and `b` at the ratio of `fade`\n\t */\n\toutput: Gain = new Gain({ context : this.context });\n\n\t/**\n\t * CrossFade has no input, you must choose either `a` or `b`\n\t */\n\tinput: undefined;\n\n\t/**\n\t * \tThe mix between the two inputs. A fade value of 0\n\t * \twill output 100% crossFade.a and\n\t * \ta value of 1 will output 100% crossFade.b.\n\t */\n\treadonly fade: Signal<NormalRange>;\n\n\tprotected _internalChannels = [this.a, this.b];\n\n\tconstructor(options?: Partial<CrossFadeOptions>);\n\t// tslint:disable-next-line: unified-signatures\n\tconstructor(fade?: NormalRange);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(CrossFade.getDefaults(), arguments, [\"fade\"])));\n\t\tconst options = optionsFromArguments(CrossFade.getDefaults(), arguments, [\"fade\"]);\n\n\t\tthis.fade = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"normalRange\",\n\t\t\tvalue: options.fade,\n\t\t});\n\t\treadOnly(this, \"fade\");\n\n\t\tthis.context.getConstant(1).connect(this._panner);\n\t\tthis._panner.connect(this._split);\n\t\tconnect(this._split, this.a.gain, 0);\n\t\tconnect(this._split, this.b.gain, 1);\n\n\t\tthis.fade.chain(this._g2a, this._panner.pan);\n\n\t\tthis.a.connect(this.output);\n\t\tthis.b.connect(this.output);\n\t}\n\n\tstatic getDefaults(): CrossFadeOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tfade: 0.5,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.a.dispose();\n\t\tthis.b.dispose();\n\t\tthis.output.dispose();\n\t\tthis.fade.dispose();\n\t\tthis._g2a.dispose();\n\t\tthis._panner.disconnect();\n\t\tthis._split.disconnect();\n\t\treturn this;\n\t}\n}\n","import { CrossFade } from \"../component/channel/CrossFade\";\nimport { Gain } from \"../core/context/Gain\";\nimport { InputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Signal } from \"../signal/Signal\";\n\nexport interface EffectOptions extends ToneAudioNodeOptions {\n\twet: NormalRange;\n}\n/**\n * \t@class  Effect is the base class for effects. Connect the effect between\n * \t        the effectSend and effectReturn GainNodes, then control the amount of\n * \t        effect which goes to the output using the wet control.\n *\n *  @constructor\n *  @extends {Tone.AudioNode}\n *  @param {NormalRange|Object} [wet] The starting wet value.\n */\nexport abstract class Effect<Options extends EffectOptions>\nextends ToneAudioNode<Options> {\n\n\tname = \"Effect\";\n\n\t/**\n\t *  the drywet knob to control the amount of effect\n\t */\n\tprivate _dryWet: CrossFade = new CrossFade({ context : this.context });\n\n\t/**\n\t *  The wet control is how much of the effected\n\t *  will pass through to the output. 1 = 100% effected\n\t *  signal, 0 = 100% dry signal.\n\t */\n\twet: Signal<NormalRange> = this._dryWet.fade;\n\n\t/**\n\t *  connect the effectSend to the input of hte effect\n\t */\n\tprotected effectSend: Gain = new Gain({ context : this.context });\n\n\t/**\n\t *  connect the output of the effect to the effectReturn\n\t */\n\tprotected effectReturn: Gain = new Gain({ context : this.context });\n\n\t/**\n\t * The effect input node\n\t */\n\tinput: Gain = new Gain({ context : this.context });\n\n\t/**\n\t * The effect output\n\t */\n\toutput = this._dryWet;\n\n\tprotected _internalChannels: ToneAudioNode[] = [this.input, this.output, this.effectReturn, this.effectSend];\n\n\tconstructor(options: EffectOptions) {\n\t\tsuper(options);\n\n\t\t// connections\n\t\tthis.input.fan(this._dryWet.a, this.effectSend);\n\t\tthis.effectReturn.connect(this._dryWet.b);\n\t\tthis.wet.setValueAtTime(options.wet, 0);\n\t\treadOnly(this, \"wet\");\n\t}\n\n\tstatic getDefaults(): EffectOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\twet : 1,\n\t\t});\n\t}\n\n\t/**\n\t *  chains the effect in between the effectSend and effectReturn\n\t */\n\tprotected connectEffect(effect: InputNode): this {\n\t\tthis.effectSend.chain(effect, this.effectReturn);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._dryWet.dispose();\n\t\tthis.effectSend.dispose();\n\t\tthis.effectReturn.dispose();\n\t\tthis.wet.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../core/context/Gain\";\nimport { Param } from \"../core/context/Param\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Effect, EffectOptions } from \"./Effect\";\n\nexport interface FeedbackEffectOptions extends EffectOptions {\n\t/**\n\t * The feedback from the output back to the input\n\t * ```\n\t * +---<--------<---+\n\t * |                |\n\t * |  +----------+  |\n\t * +--> feedback +>-+\n\t *    +----------+\n\t * ```\n\t */\n\tfeedback: NormalRange;\n}\n\n/**\n * FeedbackEffect provides a loop between an audio source and its own output.\n * This is a base-class for feedback effects.\n */\nexport abstract class FeedbackEffect<Options extends FeedbackEffectOptions> extends Effect<Options> {\n\n\tname = \"FeedbackEffect\";\n\n\t/**\n\t *  the gain which controls the feedback\n\t */\n\tprivate _feedbackGain: Gain<NormalRange>;\n\n\t/**\n\t *  The amount of signal which is fed back into the effect input.\n\t */\n\tfeedback: Param<NormalRange>;\n\n\tconstructor(options: FeedbackEffectOptions) {\n\n\t\tsuper(options);\n\n\t\tthis._feedbackGain = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: options.feedback,\n\t\t\tunits: \"normalRange\",\n\t\t});\n\n\t\tthis.feedback = this._feedbackGain.gain;\n\t\treadOnly(this, \"feedback\");\n\n\t\t// the feedback loop\n\t\tthis.effectReturn.chain(this._feedbackGain, this.effectSend);\n\t}\n\n\tstatic getDefaults(): FeedbackEffectOptions {\n\t\treturn Object.assign(Effect.getDefaults(), {\n\t\t\tfeedback: 0.125,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._feedbackGain.dispose();\n\t\tthis.feedback.dispose();\n\t\treturn this;\n\t}\n}\n","import { Delay } from \"../core/context/Delay\";\nimport { Param } from \"../core/context/Param\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { FeedbackEffect,  FeedbackEffectOptions } from \"./FeedbackEffect\";\n\ninterface FeedbackDelayOptions extends FeedbackEffectOptions {\n\tdelayTime: Time;\n\tmaxDelay: Time;\n}\n\n/**\n * FeedbackDelay is a DelayNode in which part of output signal is fed back into the delay.\n *\n * @param delayTime The delay applied to the incoming signal.\n * @param feedback The amount of the effected signal which is fed back through the delay.\n * @example\n * var feedbackDelay = new FeedbackDelay(\"8n\", 0.5).toDestination();\n * var tom = new Tone.MembraneSynth({\n * \t\"octaves\" : 4,\n * \t\"pitchDecay\" : 0.1\n * }).connect(feedbackDelay);\n * tom.triggerAttackRelease(\"A2\",\"32n\");\n */\nexport class FeedbackDelay extends FeedbackEffect<FeedbackDelayOptions> {\n\n\t/**\n\t *  the delay node\n\t */\n\tprivate _delayNode: Delay;\n\n\t/**\n\t *  The delayTime of the FeedbackDelay.\n\t */\n\treadonly delayTime: Param<Time>;\n\n\tconstructor(delayTime?: Time, feedback?: NormalRange);\n\tconstructor(options?: Partial<FeedbackDelayOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(FeedbackDelay.getDefaults(), arguments, [\"delayTime\", \"feedback\"]));\n\t\tconst options = optionsFromArguments(FeedbackDelay.getDefaults(), arguments, [\"delayTime\", \"feedback\"]);\n\n\t\tthis._delayNode = new Delay({\n\t\t\tcontext: this.context,\n\t\t\tdelayTime: options.delayTime,\n\t\t\tmaxDelay: options.maxDelay,\n\t\t});\n\t\tthis.delayTime = this._delayNode.delayTime;\n\t\tthis._internalChannels.push(this._delayNode);\n\n\t\t// connect it up\n\t\tthis.connectEffect(this._delayNode);\n\t\treadOnly(this, \"delayTime\");\n\t}\n\n\tstatic getDefaults(): FeedbackDelayOptions {\n\t\treturn Object.assign(FeedbackEffect.getDefaults(), {\n\t\t\tdelayTime: 0.25,\n\t\t\tmaxDelay: 1,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._delayNode.dispose();\n\t\tthis.delayTime.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioBuffer } from \"../core/context/ToneAudioBuffer\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { Effect, EffectOptions } from \"./Effect\";\n\ninterface ToneConvolverOptions extends EffectOptions {\n\tonload: () => void;\n\tnormalize: boolean;\n\turl?: string | AudioBuffer | ToneAudioBuffer;\n}\n\n/**\n * Convolver is a wrapper around the Native Web Audio\n * [ConvolverNode](http://webaudio.github.io/web-audio-api/#the-convolvernode-interface).\n * Convolution is useful for reverb and filter emulation. Read more about convolution reverb on\n * [Wikipedia](https://en.wikipedia.org/wiki/Convolution_reverb).\n *\n * @param url The URL of the impulse response or the Tone.Buffer contianing the impulse response.\n * @param onload The callback to invoke when the url is loaded.\n * @example\n * //initializing the convolver with an impulse response\n * var convolver = new Convolver(\"./path/to/ir.wav\").toDestination();\n */\nexport class Convolver extends Effect<ToneConvolverOptions> {\n\n\tname = \"Convolver\";\n\n\t/**\n\t *  The native ConvolverNode\n\t */\n\tprivate _convolver: ConvolverNode = this.context.createConvolver();\n\n\t/**\n\t *  The Buffer belonging to the convolver\n\t */\n\tprivate _buffer: ToneAudioBuffer;\n\n\tconstructor(url?: string | AudioBuffer | ToneAudioBuffer, onload?: () => void);\n\tconstructor(options?: Partial<ToneConvolverOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Convolver.getDefaults(), arguments, [\"url\", \"onload\"]));\n\t\tconst options = optionsFromArguments(Convolver.getDefaults(), arguments, [\"url\", \"onload\"]);\n\n\t\tthis._buffer = new ToneAudioBuffer(options.url, buffer => {\n\t\t\tthis.buffer = buffer;\n\t\t\toptions.onload();\n\t\t});\n\n\t\t// set if it's already loaded\n\t\tif (this._buffer.loaded) {\n\t\t\tthis.buffer = this._buffer;\n\t\t}\n\n\t\t// initially set normalization\n\t\tthis.normalize = options.normalize;\n\n\t\t// connect it up\n\t\tthis.connectEffect(this._convolver);\n\t}\n\n\tstatic getDefaults(): ToneConvolverOptions {\n\t\treturn Object.assign(Effect.getDefaults(), {\n\t\t\tnormalize : true,\n\t\t\tonload : noOp,\n\t\t});\n\t}\n\n\t/**\n\t * Load an impulse response url as an audio buffer.\n\t * Decodes the audio asynchronously and invokes\n\t * the callback once the audio buffer loads.\n\t * @param url The url of the buffer to load. filetype support depends on the browser.\n\t */\n\tasync load(url: string): Promise<void> {\n\t\tthis.buffer = await this._buffer.load(url);\n\t}\n\n\t/**\n\t *  The convolver's buffer\n\t */\n\tget buffer(): ToneAudioBuffer | null {\n\t\tif (this._buffer.length) {\n\t\t\treturn this._buffer;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\tset buffer(buffer) {\n\t\tif (buffer) {\n\t\t\tthis._buffer.set(buffer);\n\t\t}\n\t\t// if it's already got a buffer, create a new one\n\t\tif (this._convolver.buffer) {\n\t\t\t// disconnect the old one\n\t\t\tthis.effectSend.disconnect();\n\t\t\tthis._convolver.disconnect();\n\t\t\t// create and connect a new one\n\t\t\tthis._convolver = this.context.createConvolver();\n\t\t\tthis.connectEffect(this._convolver);\n\t\t}\n\t\tconst buff = this._buffer.get();\n\t\tthis._convolver.buffer = buff ? buff : null;\n\t}\n\n\t/**\n\t * The normalize property of the ConvolverNode interface is a boolean that\n\t * controls whether the impulse response from the buffer will be scaled by\n\t * an equal-power normalization when the buffer attribute is set, or not.\n\t */\n\tget normalize(): boolean {\n\t\treturn this._convolver.normalize;\n\t}\n\tset normalize(norm) {\n\t\tthis._convolver.normalize = norm;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._buffer.dispose();\n\t\tthis._convolver.disconnect();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n\ntype AnalyserType = \"fft\" | \"waveform\";\n\ninterface AnalyserOptions extends ToneAudioNodeOptions {\n\tsize: PowerOfTwo;\n\ttype: AnalyserType;\n\tsmoothing: NormalRange;\n}\n\n/**\n *  Wrapper around the native Web Audio's [AnalyserNode](http://webaudio.github.io/web-audio-api/#idl-def-AnalyserNode).\n *  Extracts FFT or Waveform data from the incoming signal.\n *  @param type The return type of the analysis, either \"fft\", or \"waveform\".\n *  @param size The size of the FFT. This must be a power of two in the range 16 to 16384.\n */\nexport class Analyser extends ToneAudioNode<AnalyserOptions> {\n\n\tname = \"Analyser\";\n\n\tinput: AnalyserNode;\n\toutput: AnalyserNode;\n\n\t/**\n\t *  The analyser node.\n\t */\n\tprivate _analyser = this.context.createAnalyser();\n\tprotected _internalChannels = [this._analyser];\n\n\t/**\n\t *  The analysis type\n\t */\n\tprivate _type!: AnalyserType;\n\n\t/**\n\t *  The buffer that the FFT data is written to\n\t */\n\tprivate _buffer!: Float32Array;\n\n\tconstructor(type?: AnalyserType, size?: number);\n\tconstructor(options?: Partial<AnalyserOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Analyser.getDefaults(), arguments, [\"type\", \"size\"]));\n\t\tconst options = optionsFromArguments(Analyser.getDefaults(), arguments, [\"type\", \"size\"]);\n\t\t// set the values initially\n\t\tthis.size = options.size;\n\t\tthis.type = options.type;\n\t\tthis.input = this.output = this._analyser;\n\t}\n\n\tstatic getDefaults(): AnalyserOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tnumberOfInputs: 1,\n\t\t\tnumberOfOutputs: 1,\n\t\t\tsize: 1024,\n\t\t\tsmoothing: 0.8,\n\t\t\ttype: \"fft\" as AnalyserType,\n\t\t});\n\t}\n\n\t/**\n\t *  Run the analysis given the current settings and return the\n\t */\n\tgetValue(): Float32Array {\n\t\tif (this._type === \"fft\") {\n\t\t\tthis._analyser.getFloatFrequencyData(this._buffer);\n\t\t} else if (this._type === \"waveform\") {\n\t\t\tthis._analyser.getFloatTimeDomainData(this._buffer);\n\t\t}\n\t\treturn this._buffer;\n\t}\n\n\t/**\n\t *  The size of analysis. This must be a power of two in the range 16 to 16384.\n\t */\n\tget size(): PowerOfTwo {\n\t\treturn this._analyser.frequencyBinCount;\n\t}\n\tset size(size: PowerOfTwo) {\n\t\tthis._analyser.fftSize = size * 2;\n\t\tthis._buffer = new Float32Array(size);\n\t}\n\n\t/**\n\t *  The analysis function returned by analyser.getValue(), either \"fft\" or \"waveform\".\n\t */\n\tget type(): AnalyserType {\n\t\treturn this._type;\n\t}\n\tset type(type: AnalyserType) {\n\t\tthis.assert(type === \"waveform\" || type === \"fft\", `Analyser: invalid type: ${type}`);\n\t\tthis._type = type;\n\t}\n\n\t/**\n\t *  0 represents no time averaging with the last analysis frame.\n\t */\n\tget smoothing(): NormalRange {\n\t\treturn this._analyser.smoothingTimeConstant;\n\t}\n\n\tset smoothing(val: NormalRange) {\n\t\tthis._analyser.smoothingTimeConstant = val;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._analyser.disconnect();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n\ninterface MergeOptions extends ToneAudioNodeOptions {\n\tchannels: Positive;\n}\n\n/**\n * Merge brings multiple mono input channels into a single multichannel output channel.\n *\n * @param channels The number of channels to merge.\n * @example\n * var merge = new Merge().toDestination();\n * //routing a sine tone in the left channel\n * //and noise in the right channel\n * var osc = new Tone.Oscillator().connect(merge.left);\n * var noise = new Tone.Noise().connect(merge.right);\n * //starting our oscillators\n * noise.start();\n * osc.start();\n */\nexport class Merge extends ToneAudioNode<MergeOptions> {\n\n\tname = \"Merge\";\n\n\t/**\n\t *  The merger node for the two channels.\n\t */\n\tprivate _merger: ChannelMergerNode;\n\n\t/**\n\t * The output is the input channels combined into a sigle (multichannel) output\n\t */\n\toutput: AudioNode;\n\n\t/**\n\t * Multiple input connections combine into a single output.\n\t */\n\tinput: AudioNode;\n\n\tprotected _internalChannels = [];\n\n\tconstructor(channels?: Positive);\n\t// tslint:disable-next-line: unified-signatures\n\tconstructor(options?: Partial<MergeOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Merge.getDefaults(), arguments, [\"channels\"]));\n\t\tconst options = optionsFromArguments(Merge.getDefaults(), arguments, [\"channels\"]);\n\n\t\tthis._merger = this.output = this.input = this.context.createChannelMerger(options.channels);\n\n\t\t// @ts-ignore\n\t\tthis.numberOfInputs = options.channels;\n\t\t// @ts-ignore\n\t\tthis.numberOfOutputs = 1;\n\t}\n\n\tstatic getDefaults(): MergeOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tchannels: 2,\n\t\t\tnumberOfOutputs : 1,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._merger.disconnect();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { connectSeries, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { isNumber } from \"../../core/util/TypeCheck\";\nimport { Signal } from \"../../signal/Signal\";\n\ninterface FilterOptions extends ToneAudioNodeOptions {\n\ttype: BiquadFilterType;\n\tfrequency: Frequency;\n\trolloff: number;\n\tQ: Positive;\n\tdetune: Cents;\n\tgain: GainFactor;\n}\n\n/**\n *  @class  Tone.Filter is a filter which allows for all of the same native methods\n *          as the [BiquadFilterNode](http://webaudio.github.io/web-audio-api/#the-biquadfilternode-interface).\n *          Tone.Filter has the added ability to set the filter rolloff at -12\n *          (default), -24 and -48.\n *\n *  @constructor\n *  @extends {Tone.AudioNode}\n *  @param frequency The cutoff frequency of the filter.\n *  @param type The type of filter.\n *  @param rolloff The drop in decibels per octave after the cutoff frequency\n *  @example\n *  var filter = new Filter(200, \"highpass\");\n */\nexport class Filter extends ToneAudioNode<FilterOptions> {\n\n\tname = \"Filter\";\n\n\treadonly input = new Gain({ context: this.context });\n\treadonly output = new Gain({ context: this.context });\n\tprivate _filters: BiquadFilterNode[] = [];\n\n\t/**\n\t * The internal channels for channel routing changes\n\t */\n\tprotected _internalChannels = [this.input, ...this._filters, this.output];\n\n\t/**\n\t *  the rolloff value of the filter\n\t */\n\tprivate _rolloff!: number;\n\tprivate _type: BiquadFilterType;\n\n\t/**\n\t *  The Q or Quality of the filter\n\t */\n\treadonly Q: Signal<Positive>;\n\n\t/**\n\t *  The cutoff frequency of the filter.\n\t */\n\treadonly frequency: Signal<Frequency>;\n\n\t/**\n\t *  The detune parameter\n\t */\n\treadonly detune: Signal<Cents>;\n\n\t/**\n\t *  The gain of the filter, only used in certain filter types\n\t */\n\treadonly gain: Signal<Decibels>;\n\n\tconstructor(frequency?: Frequency, type?: BiquadFilterType, rolloff?: number);\n\tconstructor(options?: Partial<FilterOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Filter.getDefaults(), arguments, [\"frequency\", \"type\", \"rolloff\"]));\n\t\tconst options = optionsFromArguments(Filter.getDefaults(), arguments, [\"frequency\", \"type\", \"rolloff\"]);\n\n\t\tthis._filters = [];\n\n\t\tthis.Q = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.Q,\n\t\t});\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t});\n\t\tthis.detune = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune,\n\t\t});\n\t\tthis.gain = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"decibels\",\n\t\t\tvalue: options.gain,\n\t\t});\n\t\tthis._type = options.type;\n\t\tthis.rolloff = options.rolloff;\n\t\treadOnly(this, [\"detune\", \"frequency\", \"gain\", \"Q\"]);\n\t}\n\n\tstatic getDefaults(): FilterOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tQ: 1,\n\t\t\tdetune: 0,\n\t\t\tfrequency: 350,\n\t\t\tgain: 0,\n\t\t\trolloff: -12,\n\t\t\ttype: \"lowpass\" as BiquadFilterType,\n\t\t});\n\t}\n\n\t/**\n\t * The type of the filter. Types: \"lowpass\", \"highpass\",\n\t * \"bandpass\", \"lowshelf\", \"highshelf\", \"notch\", \"allpass\", or \"peaking\".\n\t */\n\tget type(): BiquadFilterType {\n\t\treturn this._type;\n\t}\n\tset type(type: BiquadFilterType) {\n\t\tconst types: BiquadFilterType[] = [\"lowpass\", \"highpass\", \"bandpass\",\n\t\t\t\"lowshelf\", \"highshelf\", \"notch\", \"allpass\", \"peaking\"];\n\t\tthis.assert(types.indexOf(type) !== -1, `Invalid filter type: ${type}`);\n\t\tthis._type = type;\n\t\tthis._filters.forEach(filter => filter.type = type);\n\t}\n\n\t/**\n\t * The rolloff of the filter which is the drop in db\n\t * per octave. Implemented internally by cascading filters.\n\t * Only accepts the values -12, -24, -48 and -96.\n\t */\n\tget rolloff(): number | string {\n\t\treturn this._rolloff;\n\t}\n\tset rolloff(rolloff: number | string) {\n\t\tconst rolloffNum = isNumber(rolloff) ? rolloff : parseInt(rolloff, 10);\n\t\tconst possibilities = [-12, -24, -48, -96];\n\t\tlet cascadingCount = possibilities.indexOf(rolloffNum);\n\t\t// check the rolloff is valid\n\t\tthis.assert(cascadingCount !== -1, `rolloff can only be ${possibilities.join(\", \")}`);\n\t\tcascadingCount += 1;\n\n\t\tthis._rolloff = rolloffNum;\n\t\tthis.input.disconnect();\n\t\tthis._filters.forEach(filter => filter.disconnect());\n\n\t\tthis._filters = new Array(cascadingCount);\n\t\tfor (let count = 0; count < cascadingCount; count++) {\n\t\t\tconst filter = this.context.createBiquadFilter();\n\t\t\tfilter.type = this._type;\n\t\t\tthis.frequency.connect(filter.frequency);\n\t\t\tthis.detune.connect(filter.detune);\n\t\t\tthis.Q.connect(filter.Q);\n\t\t\tthis.gain.connect(filter.gain);\n\t\t\tthis._filters[count] = filter;\n\t\t}\n\t\tthis._internalChannels = [this.input, ...this._filters, this.output];\n\t\tconnectSeries(...this._internalChannels);\n\t}\n\n\t/**\n\t * Get the frequency response curve. This curve represents how the filter\n\t * responses to frequencies between 20hz-20khz.\n\t * @param  len The number of values to return\n\t * @return The frequency response curve between 20-20kHz\n\t */\n\tgetFrequencyResponse(len: number = 128): Float32Array {\n\t\t// start with all 1s\n\t\tconst totalResponse = new Float32Array(len).map(() => 1);\n\t\tconst freqValues = new Float32Array(len);\n\t\tfor (let i = 0; i < len; i++) {\n\t\t\tconst norm = Math.pow(i / len, 2);\n\t\t\tconst freq = norm * (20000 - 20) + 20;\n\t\t\tfreqValues[i] = freq;\n\t\t}\n\t\tconst magValues = new Float32Array(len);\n\t\tconst phaseValues = new Float32Array(len);\n\t\tthis._filters.forEach(() => {\n\t\t\tconst filterClone = this.context.createBiquadFilter();\n\t\t\tfilterClone.type = this._type;\n\t\t\tfilterClone.Q.value = this.Q.value;\n\t\t\tfilterClone.frequency.value = this.frequency.value as number;\n\t\t\tfilterClone.gain.value = this.gain.value as number;\n\t\t\tfilterClone.getFrequencyResponse(freqValues, magValues, phaseValues);\n\t\t\tmagValues.forEach((val, i) => {\n\t\t\t\ttotalResponse[i] *= val;\n\t\t\t});\n\t\t});\n\t\treturn totalResponse;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._filters.forEach(filter => {\n\t\t\tfilter.disconnect();\n\t\t});\n\t\twritable(this, [\"detune\", \"frequency\", \"gain\", \"Q\"]);\n\t\tthis.frequency.dispose();\n\t\tthis.Q.dispose();\n\t\tthis.detune.dispose();\n\t\tthis.gain.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Filter } from \"../filter/Filter\";\n\ninterface MultibandSplitOptions extends ToneAudioNodeOptions {\n\tQ: Positive;\n\tlowFrequency: Frequency;\n\thighFrequency: Frequency;\n}\n\n/**\n *  Split the incoming signal into three bands (low, mid, high)\n *  with two crossover frequency controls.\n * ```\n *            +----------------------+\n *          +-> input < lowFrequency +>------------------> low\n *          | +----------------------+\n *          |\n *          | +--------------------------------------+\n * input +>-+-> lowFrequency < input < highFrequency +>--> mid\n *          | +--------------------------------------+\n *          |\n *          | +-----------------------+\n *          +-> highFrequency < input +>-----------------> high\n *            +-----------------------+\n * ```\n *\n *  @param lowFrequency the low/mid crossover frequency\n *  @param highFrequency the mid/high crossover frequency\n */\nexport class MultibandSplit extends ToneAudioNode<MultibandSplitOptions> {\n\n\tname = \"MultibandSplit\";\n\n\t/**\n\t *  the input\n\t */\n\treadonly input = new Gain({ context: this.context });\n\n\t/**\n\t *  The low band.\n\t */\n\treadonly low = new Filter({\n\t\tcontext: this.context,\n\t\tfrequency: 0,\n\t\ttype: \"lowpass\",\n\t});\n\n\t/**\n\t *  the lower filter of the mid band\n\t */\n\tprivate _lowMidFilter = new Filter({\n\t\tcontext: this.context,\n\t\tfrequency: 0,\n\t\ttype: \"highpass\",\n\t});\n\n\t/**\n\t *  The mid band output.\n\t */\n\treadonly mid = new Filter({\n\t\tcontext: this.context,\n\t\tfrequency: 0,\n\t\ttype: \"lowpass\",\n\t});\n\n\t/**\n\t *  The high band output.\n\t */\n\treadonly high = new Filter({\n\t\tcontext: this.context,\n\t\tfrequency: 0,\n\t\ttype: \"highpass\",\n\t});\n\n\t/**\n\t * No output node. use either low/mid/high\n\t */\n\toutput = undefined;\n\n\t/**\n\t *  The low/mid crossover frequency.\n\t */\n\treadonly lowFrequency: Signal<Frequency>;\n\n\t/**\n\t *  The mid/high crossover frequency.\n\t */\n\treadonly highFrequency: Signal<Frequency>;\n\n\tprotected _internalChannels = [this.input, this.low, this.mid, this.high];\n\n\t/**\n\t *  The Q or Quality of the filter\n\t */\n\treadonly Q: Signal<Positive>;\n\n\tconstructor(lowFrequency?: Frequency, highFrequency?: Frequency);\n\tconstructor(options?: Partial<MultibandSplitOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(MultibandSplit.getDefaults(), arguments, [\"lowFrequency\", \"highFrequency\"]));\n\t\tconst options = optionsFromArguments(MultibandSplit.getDefaults(), arguments, [\"lowFrequency\", \"highFrequency\"]);\n\n\t\tthis.lowFrequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.lowFrequency,\n\t\t});\n\n\t\tthis.highFrequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.highFrequency,\n\t\t});\n\n\t\tthis.Q = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.Q,\n\t\t});\n\n\t\tthis.input.fan(this.low, this.high);\n\t\tthis.input.chain(this._lowMidFilter, this.mid);\n\t\t// the frequency control signal\n\t\tthis.lowFrequency.fan(this.low.frequency, this._lowMidFilter.frequency);\n\t\tthis.highFrequency.fan(this.mid.frequency, this.high.frequency);\n\t\t// the Q value\n\t\tthis.Q.connect(this.low.Q);\n\t\tthis.Q.connect(this._lowMidFilter.Q);\n\t\tthis.Q.connect(this.mid.Q);\n\t\tthis.Q.connect(this.high.Q);\n\n\t\treadOnly(this, [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n\t}\n\n\tstatic getDefaults(): MultibandSplitOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tQ: 1,\n\t\t\thighFrequency: 2500,\n\t\t\tlowFrequency: 400,\n\t\t});\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\twritable(this, [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n\t\tthis.low.dispose();\n\t\tthis._lowMidFilter.dispose();\n\t\tthis.mid.dispose();\n\t\tthis.high.dispose();\n\t\tthis.lowFrequency.dispose();\n\t\tthis.highFrequency.dispose();\n\t\tthis.Q.dispose();\n\t\treturn this;\n\t}\n\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { MultibandSplit } from \"../channel/MultibandSplit\";\n\ninterface EQ3Options extends ToneAudioNodeOptions {\n\tlow: Decibels;\n\tmid: Decibels;\n\thigh: Decibels;\n\tlowFrequency: Frequency;\n\thighFrequency: Frequency;\n}\n\nexport class EQ3 extends ToneAudioNode<EQ3Options> {\n\tname = \"EQ3\";\n\n\t/**\n\t *  the input\n\t */\n\treadonly input: MultibandSplit;\n\n\t/**\n\t *  the output\n\t */\n\treadonly output = new Gain({ context: this.context });\n\n\tprivate _multibandSplit: MultibandSplit;\n\n\t/**\n\t *  The gain for the lower signals\n\t */\n\tprivate _lowGain: Gain<Decibels>;\n\n\t/**\n\t *  The gain for the mid signals\n\t */\n\tprivate _midGain: Gain<Decibels>;\n\n\t/**\n\t *  The gain for the high signals\n\t */\n\tprivate _highGain: Gain<Decibels>;\n\n\t/**\n\t * The gain in decibels of the low part\n\t */\n\treadonly low: Param<Decibels>;\n\n\t/**\n\t * The gain in decibels of the mid part\n\t */\n\treadonly mid: Param<Decibels>;\n\n\t/**\n\t * The gain in decibels of the high part\n\t */\n\treadonly high: Param<Decibels>;\n\n\t/**\n\t *  The Q value for all of the filters.\n\t */\n\treadonly Q: Signal<Positive>;\n\n\t/**\n\t *  The low/mid crossover frequency.\n\t */\n\treadonly lowFrequency: Signal<Frequency>;\n\n\t/**\n\t *  The mid/high crossover frequency.\n\t */\n\treadonly highFrequency: Signal<Frequency>;\n\n\tprotected _internalChannels: ToneAudioNode[] = [];\n\n\tconstructor(lowLevel?: Decibels, midLevel?: Decibels, highLevel?: Decibels);\n\tconstructor(options: Partial<EQ3Options>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(EQ3.getDefaults(), arguments, [\"low\", \"mid\", \"high\"]));\n\t\tconst options = optionsFromArguments(EQ3.getDefaults(), arguments, [\"low\", \"mid\", \"high\"]);\n\n\t\tthis.input = this._multibandSplit = new MultibandSplit({\n\t\t\tcontext: this.context,\n\t\t\thighFrequency: options.highFrequency,\n\t\t\tlowFrequency: options.lowFrequency,\n\t\t});\n\n\t\tthis._lowGain = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: options.low,\n\t\t\tunits: \"decibels\",\n\t\t});\n\n\t\tthis._midGain = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: options.mid,\n\t\t\tunits: \"decibels\",\n\t\t});\n\n\t\tthis._highGain = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: options.high,\n\t\t\tunits: \"decibels\",\n\t\t});\n\n\t\tthis.low = this._lowGain.gain;\n\t\tthis.mid = this._midGain.gain;\n\t\tthis.high = this._highGain.gain;\n\t\tthis.Q = this._multibandSplit.Q;\n\t\tthis.lowFrequency = this._multibandSplit.lowFrequency;\n\t\tthis.highFrequency\t= this._multibandSplit.highFrequency;\n\n\t\t// the frequency bands\n\t\tthis._multibandSplit.low.chain(this._lowGain, this.output);\n\t\tthis._multibandSplit.mid.chain(this._midGain, this.output);\n\t\tthis._multibandSplit.high.chain(this._highGain, this.output);\n\n\t\treadOnly(this, [\"low\", \"mid\", \"high\", \"lowFrequency\", \"highFrequency\"]);\n\t\tthis._internalChannels = [this._multibandSplit, this.output];\n\t}\n\n\tstatic getDefaults(): EQ3Options {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\thigh : 0,\n\t\t\thighFrequency : 2500,\n\t\t\tlow : 0,\n\t\t\tlowFrequency : 400,\n\t\t\tmid : 0,\n\t\t});\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\twritable(this, [\"low\", \"mid\", \"high\", \"lowFrequency\", \"highFrequency\"]);\n\t\tthis._multibandSplit.dispose();\n\t\tthis.lowFrequency.dispose();\n\t\tthis.highFrequency.dispose();\n\t\tthis._lowGain.dispose();\n\t\tthis._midGain.dispose();\n\t\tthis._highGain.dispose();\n\t\tthis.low.dispose();\n\t\tthis.mid.dispose();\n\t\tthis.high.dispose();\n\t\tthis.Q.dispose();\n\t\treturn this;\n\t}\n\n}\n","export { getContext, setContext } from \"./core/Global\";\nexport * from \"./core/index\";\nexport * from \"./source/index\";\nexport * from \"./instrument/index\";\nexport * from \"./event/index\";\nexport * from \"./effect/index\";\nexport * from \"./component/index\";\n\nimport { getContext } from \"./core/Global\";\n/**\n *  The current audio context time\n */\nexport function now(): Seconds {\n\treturn getContext().now();\n}\n\n// tslint:disable-next-line: variable-name\nexport const Transport = getContext().transport;\n// tslint:disable-next-line: variable-name\nexport const Destination = getContext().destination;\n","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n"],"sourceRoot":""}