function _slicedToArray(t,e){return _arrayWithHoles(t)||_iterableToArrayLimit(t,e)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}function _iterableToArrayLimit(t,e){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t)){var r=[],n=!0,o=!1,i=void 0;try{for(var a,l=t[Symbol.iterator]();!(n=(a=l.next()).done)&&(r.push(a.value),!e||r.length!==e);n=!0);}catch(t){o=!0,i=t}finally{try{n||null==l.return||l.return()}finally{if(o)throw i}}return r}}function _arrayWithHoles(t){if(Array.isArray(t))return t}function _objectWithoutProperties(t,e){if(null==t)return{};var r,n,o=_objectWithoutPropertiesLoose(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(n=0;n<i.length;n++)r=i[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(o[r]=t[r])}return o}function _objectWithoutPropertiesLoose(t,e){if(null==t)return{};var r,n,o={},i=Object.keys(t);for(n=0;n<i.length;n++)r=i[n],e.indexOf(r)>=0||(o[r]=t[r]);return o}import*as React from"react";import{memo}from"react";import{DndContext,createDndContext}from"./DndContext";var refCount=0;export var DndProvider=memo(function(t){var e=t.children,r=_slicedToArray(getDndContextValue(_objectWithoutProperties(t,["children"])),2),n=r[0],o=r[1];return React.useEffect(function(){return o&&refCount++,function(){o&&(0===--refCount&&(getGlobalContext()[instanceSymbol]=null))}},[]),React.createElement(DndContext.Provider,{value:n},e)});function getDndContextValue(t){return"manager"in t?[{dragDropManager:t.manager},!1]:[createSingletonDndContext(t.backend,t.context,t.options,t.debugMode),!t.context]}DndProvider.displayName="DndProvider";var instanceSymbol=Symbol.for("__REACT_DND_CONTEXT_INSTANCE__");function createSingletonDndContext(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:getGlobalContext(),r=arguments.length>2?arguments[2]:void 0,n=arguments.length>3?arguments[3]:void 0,o=e;return o[instanceSymbol]||(o[instanceSymbol]=createDndContext(t,e,r,n)),o[instanceSymbol]}function getGlobalContext(){return"undefined"!=typeof global?global:window}