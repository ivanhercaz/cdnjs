function _slicedToArray(r,t){return _arrayWithHoles(r)||_iterableToArrayLimit(r,t)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}function _iterableToArrayLimit(r,t){var e=[],n=!0,o=!1,i=void 0;try{for(var u,a=r[Symbol.iterator]();!(n=(u=a.next()).done)&&(e.push(u.value),!t||e.length!==t);n=!0);}catch(r){o=!0,i=r}finally{try{n||null==a.return||a.return()}finally{if(o)throw i}}return e}function _arrayWithHoles(r){if(Array.isArray(r))return r}import{useRef,useMemo,useLayoutEffect}from"react";import invariant from"invariant";import{useMonitorOutput}from"./internal/useMonitorOutput";import{useDropHandler,useDropTargetMonitor}from"./internal/drop";export function useDrop(r){var t=useRef(r);t.current=r,invariant(null!=r.accept,"accept must be defined");var e=_slicedToArray(useDropTargetMonitor(),2),n=e[0],o=e[1];useDropHandler(t,n,o);var i=useMonitorOutput(n,t.current.collect||function(){return{}},function(){return o.reconnect()}),u=useMemo(function(){return o.hooks.dropTarget()},[o]);return useLayoutEffect(function(){o.dropTargetOptions=r.options||null,o.reconnect()},[r.options]),[i,u]};