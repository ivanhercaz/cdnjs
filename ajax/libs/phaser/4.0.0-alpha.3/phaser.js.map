{"version":3,"file":"phaser.js","sources":["../src/Game.ts","../src/loader/BaseLoaderState.ts","../src/loader/FileState.ts","../src/loader/BaseLoader.ts","../src/loader/XHRLoader.ts","../src/loader/XHRSettings.ts","../src/loader/File.ts","../src/loader/filetypes/ImageFile.ts","../src/loader/LoaderPlugin.ts","../src/loader/index.ts"],"sourcesContent":["export class Game\r\n{\r\n    public canvas: HTMLCanvasElement;\r\n    public context: CanvasRenderingContext2D;\r\n\r\n    constructor (width: number = 800, height: number = 600)\r\n    {\r\n        this.canvas = document.createElement('canvas');\r\n\r\n        this.canvas.width = width;\r\n        this.canvas.height = height;\r\n\r\n        document.body.appendChild(this.canvas);\r\n\r\n        this.context = this.canvas.getContext('2d') as CanvasRenderingContext2D;\r\n\r\n        this.context.fillStyle = '#2d2d2d';\r\n        this.context.fillRect(0, 0, width, height);\r\n    }\r\n\r\n    public drawImage (image: CanvasImageSource, x: number = 0, y: number = 0)\r\n    {\r\n        this.context.drawImage(image, x, y);\r\n    }\r\n\r\n    public draw (text: string)\r\n    {\r\n        this.context.fillStyle = '#ff0000';\r\n        this.context.fillText(text, 10, 40);\r\n        this.context.fillStyle = '#0000ff';\r\n        this.context.fillText(text, 10, 20);\r\n        this.context.fillStyle = '#ffff00';\r\n        this.context.fillText(text, 10, 60);\r\n    }\r\n}\r\n","export enum BaseLoaderState {\r\n    IDLE = 0,\r\n    LOADING = 1,\r\n    PROCESSING = 2,\r\n    COMPLETE = 3,\r\n    SHUTDOWN = 4,\r\n    DESTROYED = 5\r\n}\r\n","export enum FileState {\r\n    PENDING = 0,\r\n    LOADING = 1,\r\n    LOADED = 2,\r\n    FAILED = 3,\r\n    PROCESSING = 4,\r\n    ERRORED = 5,\r\n    COMPLETE = 6,\r\n    DESTROYED = 7,\r\n    POPULATED = 8,\r\n    TIMED_OUT = 9,\r\n    ABORTED = 10\r\n}\r\n","import { BaseLoaderState } from './BaseLoaderState';\r\nimport { IFile } from './File';\r\nimport { FileState } from './FileState';\r\n\r\nexport class BaseLoader\r\n{\r\n    public fileGroup: string = '';\r\n    public prefix: string = '';\r\n    public baseURL: string = '';\r\n    public path: string = '';\r\n    public maxParallelDownloads: number = 32;\r\n    public crossOrigin: string = '';\r\n\r\n    public state: BaseLoaderState = BaseLoaderState.IDLE;\r\n\r\n    public progress: number = 0;\r\n\r\n    public totalToLoad: number = 0;\r\n    public totalFailed: number = 0;\r\n    public totalComplete: number = 0;\r\n\r\n    public list: Set<IFile> = new Set();\r\n    public inflight: Set<IFile> = new Set();\r\n    public queue: Set<IFile> = new Set();\r\n\r\n    private _deleteQueue: Set<IFile> = new Set();\r\n\r\n    constructor ()\r\n    {\r\n        this.state = BaseLoaderState.IDLE;\r\n    }\r\n\r\n    public setBaseURL (value: string = '')\r\n    {\r\n        if (value !== '' && value.substr(-1) !== '/')\r\n        {\r\n            value = value.concat('/');\r\n        }\r\n\r\n        this.baseURL = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    public setPath (value: string = '')\r\n    {\r\n        if (value !== '' && value.substr(-1) !== '/')\r\n        {\r\n            value = value.concat('/');\r\n        }\r\n\r\n        this.path = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    public setFileGroup (name: string = '')\r\n    {\r\n        this.fileGroup = name;\r\n\r\n        return this;\r\n    }\r\n\r\n    public isLoading (): boolean\r\n    {\r\n        return (this.state === BaseLoaderState.LOADING || this.state === BaseLoaderState.PROCESSING);\r\n    }\r\n\r\n    public isReady (): boolean\r\n    {\r\n        return (this.state === BaseLoaderState.IDLE || this.state === BaseLoaderState.COMPLETE);\r\n    }\r\n\r\n    public addFile (file: IFile): Promise<any>\r\n    {\r\n        console.log('addFile');\r\n\r\n        this.getURL(file);\r\n\r\n        this.list.add(file);\r\n\r\n        this.totalToLoad++;\r\n\r\n        console.log(file);\r\n\r\n        return new Promise(\r\n            (resolve, reject) => {\r\n                file.fileResolve = resolve;\r\n                file.fileReject = reject;\r\n            }\r\n        );\r\n    }\r\n\r\n    public start ()\r\n    {\r\n        if (!this.isReady())\r\n        {\r\n            return;\r\n        }\r\n\r\n        this.progress = 0;\r\n\r\n        this.totalFailed = 0;\r\n        this.totalComplete = 0;\r\n        this.totalToLoad = this.list.size;\r\n\r\n        if (this.totalToLoad === 0)\r\n        {\r\n            this.loadComplete();\r\n        }\r\n        else\r\n        {\r\n            this.state = BaseLoaderState.LOADING;\r\n\r\n            this.inflight.clear();\r\n            this.queue.clear();\r\n            this._deleteQueue.clear();\r\n\r\n            this.updateProgress();\r\n\r\n            this.checkLoadQueue();\r\n        }\r\n    }\r\n\r\n    private getURL (file: IFile)\r\n    {\r\n        if (file.url.match(/^(?:blob:|data:|http:\\/\\/|https:\\/\\/|\\/\\/)/))\r\n        {\r\n            return file;\r\n        }\r\n        else\r\n        {\r\n            file.url = this.baseURL + this.path + file.url;\r\n        }\r\n    }\r\n\r\n    private updateProgress (): void\r\n    {\r\n        this.progress = 1 - ((this.list.size + this.inflight.size) / this.totalToLoad);\r\n    }\r\n\r\n    private checkLoadQueue ()\r\n    {\r\n        for (const entry of this.list)\r\n        {\r\n            if ((entry.state === FileState.POPULATED) ||\r\n                (entry.state === FileState.PENDING && this.inflight.size < this.maxParallelDownloads))\r\n            {\r\n                this.inflight.add(entry);\r\n\r\n                this.list.delete(entry);\r\n\r\n                //  Apply CORS\r\n\r\n                entry.load()\r\n                    .then((file) => this.nextFile(file, true))\r\n                    .catch((file) => this.nextFile(file, false));\r\n            }\r\n\r\n            if (this.inflight.size === this.maxParallelDownloads)\r\n            {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    private nextFile (previousFile, success)\r\n    {\r\n        console.log('nextFile', previousFile, success);\r\n\r\n        if (success)\r\n        {\r\n            this.queue.add(previousFile);\r\n        }\r\n        else\r\n        {\r\n            this._deleteQueue.add(previousFile);\r\n        }\r\n\r\n        this.inflight.delete(previousFile);\r\n\r\n        if (this.list.size > 0)\r\n        {\r\n            console.log('nextFile - still something in the list');\r\n            this.checkLoadQueue();\r\n        }\r\n        else if (this.inflight.size === 0)\r\n        {\r\n            console.log('nextFile calling finishedLoading');\r\n            this.loadComplete();\r\n        }\r\n    }\r\n\r\n    private loadComplete ()\r\n    {\r\n        this.list.clear();\r\n        this.inflight.clear();\r\n\r\n        // this.queue.clear();\r\n\r\n        this.progress = 1;\r\n\r\n        this.state = BaseLoaderState.COMPLETE;\r\n\r\n        //  Call 'destroy' on each file ready for deletion\r\n        // this._deleteQueue.iterateLocal('destroy');\r\n\r\n        // this._deleteQueue.clear();\r\n    }\r\n\r\n}\r\n","import { IFile } from './File';\r\nimport { IXHRSettings } from './XHRSettings';\r\n\r\nexport function XHRLoader (file: IFile)\r\n{\r\n    const xhr = new XMLHttpRequest();\r\n\r\n    file.xhrLoader = xhr;\r\n\r\n    const config: IXHRSettings = file.xhrSettings;\r\n\r\n    xhr.open('GET', file.url, config.async, config.username, config.password);\r\n\r\n    xhr.responseType = config.responseType;\r\n    xhr.timeout = config.timeout;\r\n    xhr.setRequestHeader('X-Requested-With', config.requestedWith);\r\n\r\n    if (config.header && config.headerValue)\r\n    {\r\n        xhr.setRequestHeader(config.header, config.headerValue);\r\n    }\r\n\r\n    if (config.overrideMimeType)\r\n    {\r\n        xhr.overrideMimeType(config.overrideMimeType);\r\n    }\r\n\r\n    const onLoadStart = (event: ProgressEvent) => file.onLoadStart(event);\r\n    const onLoad = (event: ProgressEvent) => file.onLoad(event);\r\n    const onLoadEnd = (event: ProgressEvent) => file.onLoadEnd(event);\r\n    const onProgress = (event: ProgressEvent) => file.onProgress(event);\r\n    const onTimeout = (event: ProgressEvent) => file.onTimeout(event);\r\n    const onAbort = (event: ProgressEvent) => file.onAbort(event);\r\n    const onError = (event: ProgressEvent) => file.onError(event);\r\n\r\n    const eventMap = new Map([\r\n        [ 'loadstart', onLoadStart ],\r\n        [ 'load', onLoad ],\r\n        [ 'loadend', onLoadEnd ],\r\n        [ 'progress', onProgress ],\r\n        [ 'timeout', onTimeout ],\r\n        [ 'abort', onAbort ],\r\n        [ 'error', onError ]\r\n    ]);\r\n\r\n    for (const [ key, value ] of eventMap)\r\n    {\r\n        xhr.addEventListener(key, value);\r\n    }\r\n\r\n    file.resetXHR = () =>\r\n    {\r\n        for (const [ key, value ] of eventMap)\r\n        {\r\n            xhr.removeEventListener(key, value);\r\n        }\r\n    \r\n        // xhr.removeEventListener('loadstart', onLoadStart);\r\n        // xhr.removeEventListener('load', onLoad);\r\n        // xhr.removeEventListener('loadend', onLoadEnd);\r\n        // xhr.removeEventListener('progress', onProgress);\r\n        // xhr.removeEventListener('timeout', onTimeout);\r\n        // xhr.removeEventListener('abort', onAbort);\r\n        // xhr.removeEventListener('error', onError);\r\n    };\r\n\r\n    // xhr.addEventListener('loadstart', onLoadStart);\r\n    // xhr.addEventListener('load', onLoad);\r\n    // xhr.addEventListener('loadend', onLoadEnd);\r\n    // xhr.addEventListener('progress', onProgress);\r\n    // xhr.addEventListener('timeout', onTimeout);\r\n    // xhr.addEventListener('abort', onAbort);\r\n    // xhr.addEventListener('error', onError);\r\n\r\n    //  After a successful request, the xhr.response property will contain the requested data as a DOMString,\r\n    //  ArrayBuffer, Blob, or Document (depending on what was set for responseType.)\r\n\r\n    xhr.send();\r\n}\r\n","export interface IXHRSettings {\r\n    responseType: XMLHttpRequestResponseType;\r\n    async: boolean;\r\n    username: string;\r\n    password: string;\r\n    timeout: number;\r\n    header?: string;\r\n    headerValue?: string;\r\n    requestedWith?: string;\r\n    overrideMimeType?: string;\r\n}\r\n\r\nexport function XHRSettings (config: IXHRSettings = { responseType:  'blob', async: true, username: '', password: '', timeout: 0 }): IXHRSettings\r\n{\r\n    // Before sending a request, set the xhr.responseType to \"text\",\r\n    // \"arraybuffer\", \"blob\", or \"document\", depending on your data needs.\r\n    // Note, setting xhr.responseType = '' (or omitting) will default the response to \"text\".\r\n\r\n    return {\r\n\r\n        //  Ignored by the Loader, only used by File.\r\n        responseType: config.responseType,\r\n\r\n        async: config.async,\r\n\r\n        //  credentials\r\n        username: config.username,\r\n        password: config.password,\r\n\r\n        //  timeout in ms (0 = no timeout)\r\n        timeout: config.timeout,\r\n\r\n        //  setRequestHeader\r\n        header: undefined,\r\n        headerValue: undefined,\r\n        requestedWith: 'XMLHttpRequest',\r\n\r\n        //  overrideMimeType\r\n        overrideMimeType: undefined\r\n\r\n    };\r\n}\r\n","import { FileState } from './FileState';\r\nimport { XHRLoader } from './XHRLoader';\r\nimport { IXHRSettings, XHRSettings } from './XHRSettings';\r\n\r\nexport interface IFile {\r\n\r\n    key: string;\r\n    url: string;\r\n    type: string;\r\n\r\n    bytesLoaded: number;\r\n    bytesTotal: number;\r\n    percentComplete: number;\r\n\r\n    xhrSettings: IXHRSettings;\r\n    xhrLoader?: XMLHttpRequest;\r\n\r\n    data: any;\r\n    state: FileState;\r\n\r\n    load: () => Promise<any>;\r\n\r\n    resetXHR?: () => void;\r\n\r\n    fileResolve?: () => void;\r\n    fileReject?: () => void;\r\n    loaderResolve?: () => void;\r\n    loaderReject?: () => void;\r\n\r\n    // The loadstart event is fired when a request has started to load data.\r\n    onLoadStart: (event: ProgressEvent) => void;\r\n\r\n    // The load event is fired when an XMLHttpRequest transaction completes successfully.\r\n    onLoad: (event: ProgressEvent) => void;\r\n\r\n    // The loadend event is fired when a request has completed, whether successfully (after load) or unsuccessfully\r\n    onLoadEnd: (event: ProgressEvent) => void;\r\n\r\n    // The progress event is fired periodically when a request receives more data.\r\n    onProgress: (event: ProgressEvent) => void;\r\n\r\n    // The timeout event is fired when progression is terminated due to preset time expiring.\r\n    onTimeout: (event: ProgressEvent) => void;\r\n\r\n    // The abort event is fired when a request has been aborted, for example because the program called XMLHttpRequest.abort().\r\n    onAbort: (event: ProgressEvent) => void;\r\n\r\n    // The error event is fired when the request encountered an error.\r\n    onError: (event: ProgressEvent) => void;\r\n\r\n    onProcess: () => Promise<any>;\r\n    onComplete: () => void;\r\n    onDestroy: () => void;\r\n}\r\n\r\nexport function File (key: string, url: string, type: string): IFile\r\n{\r\n    return {\r\n\r\n        key,\r\n        url,\r\n        type,\r\n\r\n        xhrLoader: undefined,\r\n        xhrSettings: XHRSettings(),\r\n\r\n        data: null,\r\n        state: FileState.PENDING,\r\n\r\n        bytesLoaded: 0,\r\n        bytesTotal: 0,\r\n        percentComplete: 0,\r\n\r\n        load (): Promise<any>\r\n        {\r\n            console.log('File.load', this.key);\r\n\r\n            this.state = FileState.PENDING;\r\n\r\n            XHRLoader(this);\r\n\r\n            return new Promise(\r\n                (resolve, reject) => {\r\n                    this.loaderResolve = resolve;\r\n                    this.loaderReject = reject;\r\n                }\r\n            );\r\n        },\r\n\r\n        onLoadStart (event: ProgressEvent)\r\n        {\r\n            console.log('onLoadStart');\r\n\r\n            this.state = FileState.LOADING;\r\n        },\r\n\r\n        onLoad (event: ProgressEvent)\r\n        {\r\n            console.log('onLoad');\r\n\r\n            const xhr = this.xhrLoader;\r\n\r\n            const localFileOk = ((xhr.responseURL && xhr.responseURL.indexOf('file://') === 0 && xhr.status === 0));\r\n\r\n            let success = !(event.target && xhr.status !== 200) || localFileOk;\r\n\r\n            //  Handle HTTP status codes of 4xx and 5xx as errors, even if xhr.onerror was not called.\r\n            if (xhr.readyState === 4 && xhr.status >= 400 && xhr.status <= 599)\r\n            {\r\n                success = false;\r\n            }\r\n\r\n            this.onProcess()\r\n                .then(() => this.onComplete())\r\n                .catch(() => this.onError());\r\n        },\r\n\r\n        onLoadEnd (event: ProgressEvent)\r\n        {\r\n            console.log('onLoadEnd');\r\n\r\n            this.resetXHR();\r\n\r\n            this.state = FileState.LOADED;\r\n        },\r\n\r\n        onTimeout (event: ProgressEvent)\r\n        {\r\n            console.log('onTimeout');\r\n\r\n            this.state = FileState.TIMED_OUT;\r\n        },\r\n\r\n        onAbort (event: ProgressEvent)\r\n        {\r\n            console.log('onAbort');\r\n\r\n            this.state = FileState.ABORTED;\r\n        },\r\n\r\n        onError (event: ProgressEvent)\r\n        {\r\n            console.log('onError');\r\n\r\n            this.state = FileState.ERRORED;\r\n\r\n            if (this.fileReject)\r\n            {\r\n                this.fileReject(this);\r\n            }\r\n        },\r\n\r\n        onProgress (event: ProgressEvent)\r\n        {\r\n            console.log('onProgress');\r\n\r\n            if (event.lengthComputable)\r\n            {\r\n                this.bytesLoaded = event.loaded;\r\n                this.bytesTotal = event.total;\r\n                this.percentComplete = Math.min((event.loaded / event.total), 1);\r\n\r\n                console.log(this.percentComplete, '%');\r\n            }\r\n        },\r\n\r\n        onProcess (): Promise<any>\r\n        {\r\n            console.log('File.onProcess');\r\n\r\n            this.state = FileState.PROCESSING;\r\n\r\n            return new Promise(\r\n                (resolve, reject) => {\r\n                    resolve();\r\n                }\r\n            );\r\n        },\r\n\r\n        onComplete ()\r\n        {\r\n            console.log('onComplete!');\r\n            \r\n            this.state = FileState.COMPLETE;\r\n\r\n            if (this.fileResolve)\r\n            {\r\n                this.fileResolve(this);\r\n            }\r\n            else if (this.loaderResolve)\r\n            {\r\n                this.loaderResolve(this);\r\n            }\r\n        },\r\n\r\n        onDestroy ()\r\n        {\r\n            this.state = FileState.DESTROYED;\r\n        }\r\n\r\n    };\r\n}\r\n","import { File, IFile } from '../File';\r\nimport { FileState } from '../FileState';\r\n\r\nexport function ImageFile (key: string, url?: string): IFile\r\n{\r\n    if (!url)\r\n    {\r\n        url = key + '.png';\r\n    }\r\n\r\n    const file = File(key, url, 'image');\r\n\r\n    file.xhrSettings.responseType = 'blob';\r\n\r\n    file.onProcess = () => {\r\n\r\n        console.log('ImageFile.onProcess');\r\n\r\n        file.state = FileState.PROCESSING;\r\n\r\n        const image = new Image();\r\n\r\n        file.data = image;\r\n\r\n        // if (file.crossOrigin)\r\n        // {\r\n        //     image.crossOrigin = file.crossOrigin;\r\n        // }\r\n\r\n        return new Promise(\r\n            (resolve, reject) => {\r\n\r\n                image.onload = () => {\r\n                    console.log('ImageFile.onload');\r\n                    image.onload = null;\r\n                    image.onerror = null;\r\n                    file.state = FileState.COMPLETE;\r\n                    resolve(file);\r\n                };\r\n\r\n                image.onerror = (event) => {\r\n                    console.log('ImageFile.onerror');\r\n                    image.onload = null;\r\n                    image.onerror = null;\r\n                    file.state = FileState.FAILED;\r\n                    reject(file);\r\n                };\r\n\r\n                console.log('ImageFile.set src', file.url);\r\n                image.src = file.url;\r\n\r\n                //  Image is immediately-available or cached\r\n                if (image.complete && image.width && image.height)\r\n                {\r\n                    console.log('ImageFile.instant');\r\n                    image.onload = null;\r\n                    image.onerror = null;\r\n                    file.state = FileState.COMPLETE;\r\n                    resolve(file);\r\n                }\r\n\r\n            }\r\n        );\r\n\r\n    };\r\n\r\n    return file;\r\n}\r\n","import { BaseLoader } from './BaseLoader';\r\nimport { ImageFile } from './filetypes/ImageFile';\r\n\r\nexport class LoaderPlugin extends BaseLoader\r\n{\r\n    constructor ()\r\n    {\r\n        super();\r\n    }\r\n\r\n    public image (key: string, url: string = ''): Promise<any>\r\n    {\r\n        return this.addFile(ImageFile(key, url));\r\n    }\r\n}\r\n","import { BaseLoader } from './BaseLoader';\r\nimport { BaseLoaderState } from './BaseLoaderState';\r\nimport { File } from './File';\r\nimport { FileState } from './FileState';\r\nimport { ImageFile } from './filetypes/ImageFile';\r\nimport { LoaderPlugin } from './LoaderPlugin';\r\nimport { XHRLoader } from './XHRLoader';\r\nimport { XHRSettings } from './XHRSettings';\r\n\r\n/**\r\n * @namespace Phaser.Loader\r\n */\r\n\r\n// export interface ILoader {\r\n//     BaseLoader: BaseLoader;\r\n//     BaseLoaderState: BaseLoaderState;\r\n//     File: File;\r\n//     FileState: FileState;\r\n//     LoaderPlugin: LoaderPlugin;\r\n//     XHRLoader;\r\n//     XHRSettings;\r\n//     FileTypes: {\r\n//         ImageFile\r\n//     };\r\n// }\r\n\r\nexport const Loader = {\r\n    BaseLoader,\r\n    BaseLoaderState,\r\n    File,\r\n    FileState,\r\n    LoaderPlugin,\r\n    XHRLoader,\r\n    XHRSettings,\r\n    FileTypes: {\r\n        ImageFile\r\n    }\r\n};\r\n"],"names":[],"mappings":"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"}