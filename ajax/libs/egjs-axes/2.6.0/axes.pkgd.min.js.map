{"version":3,"file":"axes.pkgd.min.js","sources":["../node_modules/@egjs/component/dist/component.esm.js","../src/browser.ts","../src/Coordinate.ts","../src/utils.ts","../src/AnimationManager.ts","../src/EventManager.ts","../src/InterruptManager.ts","../src/AxisManager.ts","../src/InputObserver.ts","../node_modules/@egjs/hammerjs/dist/hammer.esm.js","../src/const.ts","../src/Axes.ts","../src/inputType/InputType.ts","../src/inputType/PanInput.ts","../src/inputType/RotatePanInput.ts","../src/inputType/PinchInput.ts","../src/inputType/WheelInput.ts","../src/inputType/MoveKeyInput.ts","../src/index.umd.ts"],"sourcesContent":["/*\nCopyright (c) 2017 NAVER Corp.\n@egjs/component project is licensed under the MIT license\n\n@egjs/component JavaScript library\nhttps://naver.github.io/egjs-component\n\n@version 2.1.2\n*/\n/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nfunction isUndefined(value) {\n  return typeof value === \"undefined\";\n}\n/**\n * A class used to manage events in a component\n * @ko 컴포넌트의 이벤트을 관리할 수 있게 하는 클래스\n * @alias eg.Component\n */\n\n\nvar Component =\n/*#__PURE__*/\nfunction () {\n  var Component =\n  /*#__PURE__*/\n  function () {\n    /**\n    * Version info string\n    * @ko 버전정보 문자열\n    * @name VERSION\n    * @static\n    * @type {String}\n    * @example\n    * eg.Component.VERSION;  // ex) 2.0.0\n    * @memberof eg.Component\n    */\n\n    /**\n     * @support {\"ie\": \"7+\", \"ch\" : \"latest\", \"ff\" : \"latest\",  \"sf\" : \"latest\", \"edge\" : \"latest\", \"ios\" : \"7+\", \"an\" : \"2.1+ (except 3.x)\"}\n     */\n    function Component() {\n      this._eventHandler = {};\n      this.options = {};\n    }\n    /**\n     * Triggers a custom event.\n     * @ko 커스텀 이벤트를 발생시킨다\n     * @param {String} eventName The name of the custom event to be triggered <ko>발생할 커스텀 이벤트의 이름</ko>\n     * @param {Object} customEvent Event data to be sent when triggering a custom event <ko>커스텀 이벤트가 발생할 때 전달할 데이터</ko>\n     * @return {Boolean} Indicates whether the event has occurred. If the stop() method is called by a custom event handler, it will return false and prevent the event from occurring. <a href=\"https://github.com/naver/egjs-component/wiki/How-to-make-Component-event-design%3F\">Ref</a> <ko>이벤트 발생 여부. 커스텀 이벤트 핸들러에서 stop() 메서드를 호출하면 'false'를 반환하고 이벤트 발생을 중단한다. <a href=\"https://github.com/naver/egjs-component/wiki/How-to-make-Component-event-design%3F\">참고</a></ko>\n     * @example\n    class Some extends eg.Component {\n     some(){\n     \tif(this.trigger(\"beforeHi\")){ // When event call to stop return false.\n    \tthis.trigger(\"hi\");// fire hi event.\n     \t}\n     }\n    }\n    const some = new Some();\n    some.on(\"beforeHi\", (e) => {\n    if(condition){\n    \te.stop(); // When event call to stop, `hi` event not call.\n    }\n    });\n    some.on(\"hi\", (e) => {\n    // `currentTarget` is component instance.\n    console.log(some === e.currentTarget); // true\n    });\n    // If you want to more know event design. You can see article.\n    // https://github.com/naver/egjs-component/wiki/How-to-make-Component-event-design%3F\n     */\n\n\n    var _proto = Component.prototype;\n\n    _proto.trigger = function trigger(eventName, customEvent) {\n      if (customEvent === void 0) {\n        customEvent = {};\n      }\n\n      var handlerList = this._eventHandler[eventName] || [];\n      var hasHandlerList = handlerList.length > 0;\n\n      if (!hasHandlerList) {\n        return true;\n      } // If detach method call in handler in first time then handler list calls.\n\n\n      handlerList = handlerList.concat();\n      customEvent.eventType = eventName;\n      var isCanceled = false;\n      var arg = [customEvent];\n      var i = 0;\n\n      customEvent.stop = function () {\n        isCanceled = true;\n      };\n\n      customEvent.currentTarget = this;\n\n      for (var _len = arguments.length, restParam = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n        restParam[_key - 2] = arguments[_key];\n      }\n\n      if (restParam.length >= 1) {\n        arg = arg.concat(restParam);\n      }\n\n      for (i = 0; handlerList[i]; i++) {\n        handlerList[i].apply(this, arg);\n      }\n\n      return !isCanceled;\n    };\n    /**\n     * Executed event just one time.\n     * @ko 이벤트가 한번만 실행된다.\n     * @param {eventName} eventName The name of the event to be attached <ko>등록할 이벤트의 이름</ko>\n     * @param {Function} handlerToAttach The handler function of the event to be attached <ko>등록할 이벤트의 핸들러 함수</ko>\n     * @return {eg.Component} An instance of a component itself<ko>컴포넌트 자신의 인스턴스</ko>\n     * @example\n    class Some extends eg.Component {\n     hi() {\n       alert(\"hi\");\n     }\n     thing() {\n       this.once(\"hi\", this.hi);\n     }\n    }\n    var some = new Some();\n    some.thing();\n    some.trigger(\"hi\");\n    // fire alert(\"hi\");\n    some.trigger(\"hi\");\n    // Nothing happens\n     */\n\n\n    _proto.once = function once(eventName, handlerToAttach) {\n      if (typeof eventName === \"object\" && isUndefined(handlerToAttach)) {\n        var eventHash = eventName;\n        var i;\n\n        for (i in eventHash) {\n          this.once(i, eventHash[i]);\n        }\n\n        return this;\n      } else if (typeof eventName === \"string\" && typeof handlerToAttach === \"function\") {\n        var self = this;\n        this.on(eventName, function listener() {\n          for (var _len2 = arguments.length, arg = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n            arg[_key2] = arguments[_key2];\n          }\n\n          handlerToAttach.apply(self, arg);\n          self.off(eventName, listener);\n        });\n      }\n\n      return this;\n    };\n    /**\n     * Checks whether an event has been attached to a component.\n     * @ko 컴포넌트에 이벤트가 등록됐는지 확인한다.\n     * @param {String} eventName The name of the event to be attached <ko>등록 여부를 확인할 이벤트의 이름</ko>\n     * @return {Boolean} Indicates whether the event is attached. <ko>이벤트 등록 여부</ko>\n     * @example\n    class Some extends eg.Component {\n     some() {\n       this.hasOn(\"hi\");// check hi event.\n     }\n    }\n     */\n\n\n    _proto.hasOn = function hasOn(eventName) {\n      return !!this._eventHandler[eventName];\n    };\n    /**\n     * Attaches an event to a component.\n     * @ko 컴포넌트에 이벤트를 등록한다.\n     * @param {eventName} eventName The name of the event to be attached <ko>등록할 이벤트의 이름</ko>\n     * @param {Function} handlerToAttach The handler function of the event to be attached <ko>등록할 이벤트의 핸들러 함수</ko>\n     * @return {eg.Component} An instance of a component itself<ko>컴포넌트 자신의 인스턴스</ko>\n     * @example\n    class Some extends eg.Component {\n     hi() {\n       console.log(\"hi\");\n     }\n     some() {\n       this.on(\"hi\",this.hi); //attach event\n     }\n    }\n    */\n\n\n    _proto.on = function on(eventName, handlerToAttach) {\n      if (typeof eventName === \"object\" && isUndefined(handlerToAttach)) {\n        var eventHash = eventName;\n        var name;\n\n        for (name in eventHash) {\n          this.on(name, eventHash[name]);\n        }\n\n        return this;\n      } else if (typeof eventName === \"string\" && typeof handlerToAttach === \"function\") {\n        var handlerList = this._eventHandler[eventName];\n\n        if (isUndefined(handlerList)) {\n          this._eventHandler[eventName] = [];\n          handlerList = this._eventHandler[eventName];\n        }\n\n        handlerList.push(handlerToAttach);\n      }\n\n      return this;\n    };\n    /**\n     * Detaches an event from the component.\n     * @ko 컴포넌트에 등록된 이벤트를 해제한다\n     * @param {eventName} eventName The name of the event to be detached <ko>해제할 이벤트의 이름</ko>\n     * @param {Function} handlerToDetach The handler function of the event to be detached <ko>해제할 이벤트의 핸들러 함수</ko>\n     * @return {eg.Component} An instance of a component itself <ko>컴포넌트 자신의 인스턴스</ko>\n     * @example\n    class Some extends eg.Component {\n     hi() {\n       console.log(\"hi\");\n     }\n     some() {\n       this.off(\"hi\",this.hi); //detach event\n     }\n    }\n     */\n\n\n    _proto.off = function off(eventName, handlerToDetach) {\n      // All event detach.\n      if (isUndefined(eventName)) {\n        this._eventHandler = {};\n        return this;\n      } // All handler of specific event detach.\n\n\n      if (isUndefined(handlerToDetach)) {\n        if (typeof eventName === \"string\") {\n          this._eventHandler[eventName] = undefined;\n          return this;\n        } else {\n          var eventHash = eventName;\n          var name;\n\n          for (name in eventHash) {\n            this.off(name, eventHash[name]);\n          }\n\n          return this;\n        }\n      } // The handler of specific event detach.\n\n\n      var handlerList = this._eventHandler[eventName];\n\n      if (handlerList) {\n        var k;\n        var handlerFunction;\n\n        for (k = 0; (handlerFunction = handlerList[k]) !== undefined; k++) {\n          if (handlerFunction === handlerToDetach) {\n            handlerList = handlerList.splice(k, 1);\n            break;\n          }\n        }\n      }\n\n      return this;\n    };\n\n    return Component;\n  }();\n\n  Component.VERSION = \"2.1.2\";\n  return Component;\n}();\n\nexport default Component;\n//# sourceMappingURL=component.esm.js.map\n","/* eslint-disable no-new-func, no-nested-ternary */\n\nlet win: any;\n\nif (typeof window === \"undefined\") {\n\t// window is undefined in node.js\n\twin = {};\n} else {\n\twin = window;\n}\n/* eslint-enable no-new-func, no-nested-ternary */\n\nexport {win as window};\n","export function getInsidePosition(\n\tdestPos: number,\n\trange: number[],\n\tcircular: boolean[],\n\tbounce?: number[],\n): number {\n\tlet toDestPos: number = destPos;\n\tconst targetRange: number[] = [\n\t\tcircular[0] ? range[0] : (bounce ? range[0] - bounce[0] : range[0]),\n\t\tcircular[1] ? range[1] : (bounce ? range[1] + bounce[1] : range[1]),\n\t];\n\n\ttoDestPos = Math.max(targetRange[0], toDestPos);\n\ttoDestPos = Math.min(targetRange[1], toDestPos);\n\n\treturn toDestPos;\n}\n\n// determine outside\nexport function isOutside(pos: number, range: number[]): boolean {\n\treturn pos < range[0] || pos > range[1];\n}\n\nexport function getDuration(distance: number, deceleration): number {\n\tconst duration = Math.sqrt(distance / deceleration * 2);\n\n\t// when duration is under 100, then value is zero\n\treturn duration < 100 ? 0 : duration;\n}\nexport function isCircularable(destPos: number, range: number[], circular: boolean[]): boolean {\n\treturn (circular[1] && destPos > range[1]) ||\n\t\t(circular[0] && destPos < range[0]);\n}\nexport function getCirculatedPos(pos: number, range: number[], circular: boolean[]): number {\n\tlet toPos = pos;\n\tconst min = range[0];\n\tconst max = range[1];\n\tconst length = max - min;\n\n\tif (circular[1] && pos > max) { // right\n\t\ttoPos = (toPos - max) % length + min;\n\t}\n\tif (circular[0] && pos < min) { // left\n\t\ttoPos = (toPos - min) % length + max;\n\t}\n\treturn toPos;\n}\n","import {window} from \"./browser\";\nimport { ObjectInterface } from \"./const\";\n\ndeclare var jQuery: any;\n\nexport function toArray(nodes: NodeList): HTMLElement[] {\n\t// const el = Array.prototype.slice.call(nodes);\n\t// for IE8\n\tconst el = [];\n\tfor (let i = 0, len = nodes.length;\n\t\ti < len; i++) {\n\t\t\tel.push(nodes[i]);\n\t}\n\treturn el;\n}\n\nexport function $(param, multi = false) {\n\tlet el;\n\n\tif (typeof param === \"string\") {\t// String (HTML, Selector)\n\t\t// check if string is HTML tag format\n\t\tconst match = param.match(/^<([a-z]+)\\s*([^>]*)>/);\n\n\t\t// creating element\n\t\tif (match) {\t // HTML\n\t\t\tconst dummy = document.createElement(\"div\");\n\n\t\t\tdummy.innerHTML = param;\n\t\t\tel = toArray(dummy.childNodes);\n\t\t} else {\t// Selector\n\t\t\tel = toArray(document.querySelectorAll(param));\n\t\t}\n\t\tif (!multi) {\n\t\t\tel = el.length >= 1 ? el[0] : undefined;\n\t\t}\n\t} else if (param === window) { // window\n\t\tel = param;\n\t} else if (param.nodeName &&\n\t\t(param.nodeType === 1 || param.nodeType === 9)) {\t// HTMLElement, Document\n\t\tel = param;\n\t} else if ((\"jQuery\" in window && param instanceof jQuery) ||\n\t\tparam.constructor.prototype.jquery) {\t// jQuery\n\t\tel = multi ? param.toArray() : param.get(0);\n\t} else if (Array.isArray(param)) {\n\t\tel = param.map(v => $(v));\n\t\tif (!multi) {\n\t\t\tel = el.length >= 1 ? el[0] : undefined;\n\t\t}\n\t}\n\treturn el;\n}\n\nlet raf = window.requestAnimationFrame || window.webkitRequestAnimationFrame;\nlet caf = window.cancelAnimationFrame || window.webkitCancelAnimationFrame;\nif (raf && !caf) {\n\tconst keyInfo = {};\n\tconst oldraf = raf;\n\traf = (callback: FrameRequestCallback) => {\n\t\tfunction wrapCallback(timestamp) {\n\t\t\tif (keyInfo[key]) {\n\t\t\t\tcallback(timestamp);\n\t\t\t}\n\t\t}\n\t\tconst key = oldraf(wrapCallback);\n\t\tkeyInfo[key] = true;\n\t\treturn key;\n\t};\n\tcaf = (key: number) => {\n\t\tdelete keyInfo[key];\n\t};\n} else if (!(raf && caf)) {\n\traf = (callback: FrameRequestCallback) => {\n\t\treturn window.setTimeout(() => {\n\t\t\tcallback(window.performance && window.performance.now && window.performance.now() || new Date().getTime());\n\t\t}, 16);\n\t};\n\tcaf = window.clearTimeout;\n}\n\n/**\n * A polyfill for the window.requestAnimationFrame() method.\n * @see  https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame\n * @private\n */\nexport function requestAnimationFrame(fp) {\n\treturn raf(fp);\n}\n/**\n* A polyfill for the window.cancelAnimationFrame() method. It cancels an animation executed through a call to the requestAnimationFrame() method.\n* @param {Number} key −\tThe ID value returned through a call to the requestAnimationFrame() method. <ko>requestAnimationFrame() 메서드가 반환한 아이디 값</ko>\n* @see  https://developer.mozilla.org/en-US/docs/Web/API/Window/cancelAnimationFrame\n* @private\n*/\nexport function cancelAnimationFrame(key) {\n\tcaf(key);\n}\n\nexport function map<T, U>(obj: ObjectInterface<T>, callback: (value: T, key: string) => U): ObjectInterface<U> {\n\tconst tranformed: ObjectInterface<U> = {};\n\n\tfor (const k in obj) {\n\t\tk && (tranformed[k] = callback(obj[k], k));\n\t}\n\treturn tranformed;\n}\n\nexport function filter<T>(obj: ObjectInterface<T>, callback: (value: T, key: string) => boolean): ObjectInterface<T> {\n\tconst filtered: ObjectInterface<T> = {};\n\n\tfor (const k in obj) {\n\t\tk && callback(obj[k], k) && (filtered[k] = obj[k]);\n\t}\n\treturn filtered;\n}\nexport function every<T>(obj: ObjectInterface<T>, callback: (value: T, key: string) => boolean) {\n\tfor (const k in obj) {\n\t\tif (k && !callback(obj[k], k)) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nexport function equal(target: ObjectInterface, base: ObjectInterface): boolean {\n\treturn every(target, (v, k) => v === base[k]);\n}\n\nconst roundNumFunc = {};\n\nexport function roundNumber(num: number, roundUnit: number) {\n\t// Cache for performance\n\tif (!roundNumFunc[roundUnit]) {\n\t\troundNumFunc[roundUnit] = getRoundFunc(roundUnit);\n\t}\n\n\treturn roundNumFunc[roundUnit](num);\n}\n\nexport function roundNumbers(num: ObjectInterface<number>, roundUnit: ObjectInterface<number> | number) {\n\tif (!num || !roundUnit) {\n\t\treturn num;\n\t}\n\tconst isNumber = typeof roundUnit === \"number\";\n\treturn map(num, (value, key) => roundNumber(value, isNumber ? roundUnit : roundUnit[key]));\n}\n\nexport function getDecimalPlace(val: number): number {\n\tif (!isFinite(val)) {\n\t\treturn 0;\n\t}\n\n\tconst v = (val + \"\");\n\n\tif (v.indexOf(\"e\") >= 0) {\n\t\t// Exponential Format\n\t\t// 1e-10, 1e-12\n\t\tlet p = 0;\n\t\tlet e = 1;\n\n\t\twhile (Math.round(val * e) / e !== val) {\n\t\t\te *= 10;\n\t\t\tp++;\n\t\t}\n\n\t\treturn p;\n\t}\n\n\t// In general, following has performance benefit.\n\t// https://jsperf.com/precision-calculation\n\treturn v.indexOf(\".\") >= 0 ? (v.length - v.indexOf(\".\") - 1) : 0;\n}\n\nexport function inversePow(n: number) {\n\t// replace Math.pow(10, -n) to solve floating point issue.\n\t// eg. Math.pow(10, -4) => 0.00009999999999999999\n\treturn 1 / Math.pow(10, n);\n}\n\nexport function getRoundFunc(v: number) {\n\tconst p = v < 1 ? Math.pow(10, getDecimalPlace(v)) : 1;\n\n\treturn (n: number) => {\n\t\tif (v === 0) {\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn Math.round(Math.round(n / v) * v * p) / p;\n\t};\n}\n","import { IInputType } from \"./inputType/InputType\";\nimport { getInsidePosition, isCircularable, getCirculatedPos, getDuration } from \"./Coordinate\";\nimport { Axis, AxisManager } from \"./AxisManager\";\nimport { InterruptManager } from \"./InterruptManager\";\nimport { EventManager, ChangeEventOption } from \"./EventManager\";\nimport { requestAnimationFrame, cancelAnimationFrame, map, every, filter, equal, roundNumber, getDecimalPlace, inversePow } from \"./utils\";\nimport { AxesOption } from \"./Axes\";\nimport { ObjectInterface } from \"./const\";\n\nfunction minMax(value: number, min: number, max: number): number {\n\treturn Math.max(Math.min(value, max), min);\n}\n\nexport interface AnimationParam {\n\tdepaPos: Axis;\n\tdestPos: Axis;\n\tduration: number;\n\tdelta: Axis;\n\tisTrusted?: boolean;\n\tsetTo?: (destPos?: Axis, duration?: number) => { destPos: Axis, duration: number };\n\tdone?: () => void;\n\tstartTime?: number;\n\tinputEvent?;\n\tinput?: IInputType;\n}\n\nexport class AnimationManager {\n\tprivate _raf;\n\tprivate _animateParam: AnimationParam;\n\tprivate options: AxesOption;\n\tpublic itm: InterruptManager;\n\tpublic em: EventManager;\n\tpublic axm: AxisManager;\n\n\tconstructor({ options, itm, em, axm }) {\n\t\tthis.options = options;\n\t\tthis.itm = itm;\n\t\tthis.em = em;\n\t\tthis.axm = axm;\n\t\tthis.animationEnd = this.animationEnd.bind(this);\n\t}\n\tgetDuration(depaPos: Axis, destPos: Axis, wishDuration?: number) {\n\t\tlet duration;\n\t\tif (typeof wishDuration !== \"undefined\") {\n\t\t\tduration = wishDuration;\n\t\t} else {\n\t\t\tconst durations: Axis = map(\n\t\t\t\tdestPos,\n\t\t\t\t(v, k) => getDuration(\n\t\t\t\t\tMath.abs(v - depaPos[k]),\n\t\t\t\t\tthis.options.deceleration),\n\t\t\t);\n\t\t\tduration = Object.keys(durations).reduce((max, v) => Math.max(max, durations[v]), -Infinity);\n\t\t}\n\t\treturn minMax(\n\t\t\tduration,\n\t\t\tthis.options.minimumDuration,\n\t\t\tthis.options.maximumDuration);\n\t}\n\n\tprivate createAnimationParam(pos: Axis, duration: number, option?: ChangeEventOption): AnimationParam {\n\t\tconst depaPos: Axis = this.axm.get();\n\t\tconst destPos: Axis = pos;\n\t\tconst inputEvent = option && option.event || null;\n\t\treturn {\n\t\t\tdepaPos,\n\t\t\tdestPos,\n\t\t\tduration: minMax(\n\t\t\t\tduration,\n\t\t\t\tthis.options.minimumDuration,\n\t\t\t\tthis.options.maximumDuration),\n\t\t\tdelta: this.axm.getDelta(depaPos, destPos),\n\t\t\tinputEvent,\n\t\t\tinput: option && option.input || null,\n\t\t\tisTrusted: !!inputEvent,\n\t\t\tdone: this.animationEnd,\n\t\t};\n\t}\n\n\tgrab(axes: string[], option?: ChangeEventOption) {\n\t\tif (this._animateParam && axes.length) {\n\t\t\tconst orgPos: Axis = this.axm.get(axes);\n\t\t\tconst pos: Axis = this.axm.map(orgPos,\n\t\t\t\t(v, opt) => getCirculatedPos(v, opt.range, opt.circular as boolean[]));\n\t\t\tif (!every(pos, (v, k) => orgPos[k] === v)) {\n\t\t\t\tthis.em.triggerChange(pos, false, orgPos, option, !!option);\n\t\t\t}\n\t\t\tthis._animateParam = null;\n\t\t\tthis._raf && cancelAnimationFrame(this._raf);\n\t\t\tthis._raf = null;\n\t\t\tthis.em.triggerAnimationEnd(!!(option && option.event));\n\t\t}\n\t}\n\n\tgetEventInfo(): ChangeEventOption {\n\t\tif (this._animateParam && this._animateParam.input && this._animateParam.inputEvent) {\n\t\t\treturn {\n\t\t\t\tinput: this._animateParam.input,\n\t\t\t\tevent: this._animateParam.inputEvent,\n\t\t\t};\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\trestore(option: ChangeEventOption) {\n\t\tconst pos: Axis = this.axm.get();\n\t\tconst destPos: Axis = this.axm.map(pos,\n\t\t\t(v, opt) => Math.min(opt.range[1], Math.max(opt.range[0], v)));\n\t\tthis.animateTo(destPos, this.getDuration(pos, destPos), option);\n\t}\n\n\tanimationEnd() {\n\t\tconst beforeParam: ChangeEventOption = this.getEventInfo();\n\t\tthis._animateParam = null;\n\n\t\t// for Circular\n\t\tconst circularTargets = this.axm.filter(\n\t\t\tthis.axm.get(),\n\t\t\t(v, opt) => isCircularable(v, opt.range, opt.circular as boolean[]),\n\t\t);\n\t\tObject.keys(circularTargets).length > 0 && this.setTo(this.axm.map(\n\t\t\tcircularTargets,\n\t\t\t(v, opt) => getCirculatedPos(v, opt.range, opt.circular as boolean[]),\n\t\t));\n\t\tthis.itm.setInterrupt(false);\n\t\tthis.em.triggerAnimationEnd(!!beforeParam);\n\t\tif (this.axm.isOutside()) {\n\t\t\tthis.restore(beforeParam);\n\t\t} else {\n\t\t\tthis.finish(!!beforeParam);\n\t\t}\n\t}\n\tfinish(isTrusted) {\n\t\tthis._animateParam = null;\n\t\tthis.itm.setInterrupt(false);\n\t\tthis.em.triggerFinish(isTrusted);\n\t}\n\tprivate animateLoop(param: AnimationParam, complete: () => void) {\n\t\tif (param.duration) {\n\t\t\tthis._animateParam = { ...param };\n\t\t\tconst info: AnimationParam = this._animateParam;\n\t\t\tconst self = this;\n\t\t\tlet destPos = info.destPos;\n\t\t\tlet prevPos = info.depaPos;\n\t\t\tlet prevEasingPer = 0;\n\t\t\tconst directions = map(prevPos, (value, key) => {\n\t\t\t\treturn value <= destPos[key] ? 1 : -1;\n\t\t\t});\n\t\t\tconst originalIntendedPos = map(destPos, v => v);\n\t\t\tlet prevTime = new Date().getTime();\n\t\t\tinfo.startTime = prevTime;\n\n\t\t\t(function loop() {\n\t\t\t\tself._raf = null;\n\t\t\t\tconst currentTime = new Date().getTime();\n\t\t\t\tconst ratio = (currentTime - info.startTime) / param.duration;\n\t\t\t\tconst easingPer = self.easing(ratio);\n\t\t\t\tconst toPos: Axis = self.axm.map(prevPos, (pos, options, key) => {\n\t\t\t\t\tconst nextPos = ratio >= 1\n\t\t\t\t\t\t? destPos[key]\n\t\t\t\t\t\t: pos + info.delta[key] * (easingPer - prevEasingPer);\n\n\t\t\t\t\t// Subtract distance from distance already moved.\n\t\t\t\t\t// Recalculate the remaining distance.\n\t\t\t\t\t// Fix the bouncing phenomenon by changing the range.\n\t\t\t\t\tconst circulatedPos = getCirculatedPos(nextPos, options.range, options.circular as boolean[]);\n\t\t\t\t\tif (nextPos !== circulatedPos) {\n\t\t\t\t\t\t// circular\n\t\t\t\t\t\tconst rangeOffset = directions[key] * (options.range[1] - options.range[0]);\n\n\t\t\t\t\t\tdestPos[key] -= rangeOffset;\n\t\t\t\t\t\tprevPos[key] -= rangeOffset;\n\t\t\t\t\t}\n\t\t\t\t\treturn circulatedPos;\n\t\t\t\t});\n\t\t\t\tconst isCanceled = !self.em.triggerChange(toPos, false, prevPos);\n\n\t\t\t\tprevPos = toPos;\n\t\t\t\tprevTime = currentTime;\n\t\t\t\tprevEasingPer = easingPer;\n\t\t\t\tif (easingPer >= 1) {\n\t\t\t\t\tdestPos = self.getFinalPos(destPos, originalIntendedPos);\n\n\t\t\t\t\tif (!equal(destPos, self.axm.get(Object.keys(destPos)))) {\n\t\t\t\t\t\tself.em.triggerChange(destPos, true, prevPos);\n\t\t\t\t\t}\n\t\t\t\t\tcomplete();\n\t\t\t\t\treturn;\n\t\t\t\t} else if (isCanceled) {\n\t\t\t\t\tself.finish(false);\n\t\t\t\t} else {\n\t\t\t\t\t// animationEnd\n\t\t\t\t\tself._raf = requestAnimationFrame(loop);\n\t\t\t\t}\n\t\t\t})();\n\t\t} else {\n\t\t\tthis.em.triggerChange(param.destPos, true);\n\t\t\tcomplete();\n\t\t}\n\t}\n\n\t/**\n\t * Get estimated final value.\n\t *\n\t * If destPos is within the 'error range' of the original intended position, the initial intended position is returned.\n\t *   - eg. original intended pos: 100, destPos: 100.0000000004 ==> return 100;\n\t * If dest Pos is outside the 'range of error' compared to the originally intended pos, it is returned rounded based on the originally intended pos.\n\t *   - eg. original intended pos: 100.123 destPos: 50.12345 => return 50.123\n\t *\n\t * @param originalIntendedPos\n\t * @param destPos\n\t */\n\tprivate getFinalPos(destPos: ObjectInterface<number>, originalIntendedPos: ObjectInterface<number>) {\n\t\t// compare destPos and originalIntendedPos\n\t\tconst ERROR_LIMIT = 0.000001;\n\t\tconst finalPos = map(destPos, (value, key) => {\n\t\t\tif (value >= originalIntendedPos[key] - ERROR_LIMIT && value <= originalIntendedPos[key] + ERROR_LIMIT) {\n\t\t\t\t// In error range, return original intended\n\t\t\t\treturn originalIntendedPos[key];\n\t\t\t} else {\n\t\t\t\t// Out of error range, return rounded pos.\n\t\t\t\tconst roundUnit = this.getRoundUnit(value, key);\n\t\t\t\tconst result = roundNumber(value, roundUnit);\n\t\t\t\treturn result;\n\t\t\t}\n\t\t});\n\t\treturn finalPos;\n\t}\n\n\tprivate getRoundUnit(val: number, key: string) {\n\t\tconst roundUnit = this.options.round; // manual mode\n\t\tlet minRoundUnit = null; // auto mode\n\n\t\t// auto mode\n\t\tif (!roundUnit) {\n\t\t\t// Get minimum round unit\n\t\t\tconst options = this.axm.getAxisOptions(key);\n\t\t\tminRoundUnit = inversePow(Math.max(\n\t\t\t\tgetDecimalPlace(options.range[0]),\n\t\t\t\tgetDecimalPlace(options.range[1]),\n\t\t\t\tgetDecimalPlace(val)));\n\t\t}\n\n\t\treturn minRoundUnit || roundUnit;\n\t}\n\n\tgetUserControll(param: AnimationParam) {\n\t\tconst userWish = param.setTo();\n\t\tuserWish.destPos = this.axm.get(userWish.destPos);\n\t\tuserWish.duration = minMax(\n\t\t\tuserWish.duration,\n\t\t\tthis.options.minimumDuration,\n\t\t\tthis.options.maximumDuration);\n\t\treturn userWish;\n\t}\n\n\tanimateTo(destPos: Axis, duration: number, option?: ChangeEventOption) {\n\t\tconst param: AnimationParam = this.createAnimationParam(destPos, duration, option);\n\t\tconst depaPos = { ...param.depaPos };\n\t\tconst retTrigger = this.em.triggerAnimationStart(param);\n\n\t\t// to control\n\t\tconst userWish = this.getUserControll(param);\n\n\t\t// You can't stop the 'animationStart' event when 'circular' is true.\n\t\tif (!retTrigger && this.axm.every(\n\t\t\tuserWish.destPos,\n\t\t\t(v, opt) => isCircularable(v, opt.range, opt.circular as boolean[]))) {\n\t\t\tconsole.warn(\"You can't stop the 'animation' event when 'circular' is true.\");\n\t\t}\n\n\t\tif (retTrigger && !equal(userWish.destPos, depaPos)) {\n\t\t\tconst inputEvent = option && option.event || null;\n\t\t\tthis.animateLoop({\n\t\t\t\tdepaPos,\n\t\t\t\tdestPos: userWish.destPos,\n\t\t\t\tduration: userWish.duration,\n\t\t\t\tdelta: this.axm.getDelta(depaPos, userWish.destPos),\n\t\t\t\tisTrusted: !!inputEvent,\n\t\t\t\tinputEvent,\n\t\t\t\tinput: option && option.input || null,\n\t\t\t}, () => this.animationEnd());\n\t\t}\n\t}\n\n\teasing(p) {\n\t\treturn p > 1 ? 1 : this.options.easing(p);\n\t}\n\n\tsetTo(pos: Axis, duration: number = 0) {\n\t\tconst axes: string[] = Object.keys(pos);\n\t\tthis.grab(axes);\n\t\tconst orgPos: Axis = this.axm.get(axes);\n\n\t\tif (equal(pos, orgPos)) {\n\t\t\treturn this;\n\t\t}\n\t\tthis.itm.setInterrupt(true);\n\t\tlet movedPos = filter(pos, (v, k) => orgPos[k] !== v);\n\t\tif (!Object.keys(movedPos).length) {\n\t\t\treturn this;\n\t\t}\n\n\t\tmovedPos = this.axm.map(movedPos, (v, opt) => {\n\t\t\tconst { range, circular } = opt;\n\n\t\t\tif (circular && (circular[0] || circular[1])) {\n\t\t\t\treturn v;\n\t\t\t} else {\n\t\t\t\treturn getInsidePosition(v, range, circular as boolean[]);\n\t\t\t}\n\t\t});\n\n\t\tif (equal(movedPos, orgPos)) {\n\t\t\treturn this;\n\t\t}\n\n\t\tif (duration > 0) {\n\t\t\tthis.animateTo(movedPos, duration);\n\t\t} else {\n\t\t\tthis.em.triggerChange(movedPos);\n\t\t\tthis.finish(false);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\tsetBy(pos: Axis, duration = 0) {\n\t\treturn this.setTo(\n\t\t\tmap(this.axm.get(Object.keys(pos)), (v, k) => v + pos[k]),\n\t\t\tduration,\n\t\t);\n\t}\n}\n","import { IInputType } from \"./inputType/InputType\";\nimport { Axis } from \"./AxisManager\";\nimport { AnimationParam, AnimationManager } from \"./AnimationManager\";\nimport Axes from \"./Axes\";\nimport { roundNumbers } from \"./utils\";\n\nexport interface ChangeEventOption {\n\tinput: IInputType;\n\tevent;\n}\n\nexport class EventManager {\n\tpublic am: AnimationManager;\n\tconstructor(private axes: Axes) {}\n\t/**\n\t * This event is fired when a user holds an element on the screen of the device.\n\t * @ko 사용자가 기기의 화면에 손을 대고 있을 때 발생하는 이벤트\n\t * @name eg.Axes#hold\n\t * @event\n\t * @type {object} The object of data to be sent when the event is fired<ko>이벤트가 발생할 때 전달되는 데이터 객체</ko>\n\t * @property {Object.<string, number>} pos coordinate <ko>좌표 정보</ko>\n\t * @property {Object} input The instance of inputType where the event occurred<ko>이벤트가 발생한 inputType 인스턴스</ko>\n\t * @property {Object} inputEvent The event object received from inputType <ko>inputType으로 부터 받은 이벤트 객체</ko>\n\t * @property {Boolean} isTrusted Returns true if an event was generated by the user action, or false if it was caused by a script or API call <ko>사용자의 액션에 의해 이벤트가 발생하였으면 true, 스크립트나 API호출에 의해 발생하였을 경우에는 false를 반환한다.</ko>\n\t *\n\t * @example\n\t * const axes = new eg.Axes({\n\t *   \"x\": {\n\t *      range: [0, 100]\n\t *   },\n\t *   \"zoom\": {\n\t *      range: [50, 30]\n\t *   }\n\t * }).on(\"hold\", function(event) {\n\t *   // event.pos\n\t *   // event.input\n\t *   // event.inputEvent\n\t *   // isTrusted\n\t * });\n\t */\n\ttriggerHold(pos: Axis, option: ChangeEventOption) {\n\t\tconst {roundPos} = this.getRoundPos(pos);\n\n\t\tthis.axes.trigger(\"hold\", {\n\t\t\tpos: roundPos,\n\t\t\tinput: option.input || null,\n\t\t\tinputEvent: option.event || null,\n\t\t\tisTrusted: true,\n\t\t});\n\t}\n\n\t/**\n\t * Specifies the coordinates to move after the 'change' event. It works when the holding value of the change event is true.\n\t * @ko 'change' 이벤트 이후 이동할 좌표를 지정한다. change이벤트의 holding 값이 true일 경우에 동작한다\n\t * @name set\n   * @function\n\t * @param {Object.<string, number>} pos The coordinate to move to <ko>이동할 좌표</ko>\n\t * @example\n\t * const axes = new eg.Axes({\n\t *   \"x\": {\n\t *      range: [0, 100]\n\t *   },\n\t *   \"zoom\": {\n\t *      range: [50, 30]\n\t *   }\n\t * }).on(\"change\", function(event) {\n\t *   event.holding && event.set({x: 10});\n\t * });\n\t */\n\t/** Specifies the animation coordinates to move after the 'release' or 'animationStart' events.\n\t * @ko 'release' 또는 'animationStart' 이벤트 이후 이동할 좌표를 지정한다.\n\t * @name setTo\n   * @function\n\t * @param {Object.<string, number>} pos The coordinate to move to <ko>이동할 좌표</ko>\n\t * @param {Number} [duration] Duration of the animation (unit: ms) <ko>애니메이션 진행 시간(단위: ms)</ko>\n\t * @example\n\t * const axes = new eg.Axes({\n\t *   \"x\": {\n\t *      range: [0, 100]\n\t *   },\n\t *   \"zoom\": {\n\t *      range: [50, 30]\n\t *   }\n\t * }).on(\"animationStart\", function(event) {\n\t *   event.setTo({x: 10}, 2000);\n\t * });\n\t */\n\t/**\n\t * This event is fired when a user release an element on the screen of the device.\n\t * @ko 사용자가 기기의 화면에서 손을 뗐을 때 발생하는 이벤트\n\t * @name eg.Axes#release\n\t * @event\n\t * @type {object} The object of data to be sent when the event is fired<ko>이벤트가 발생할 때 전달되는 데이터 객체</ko>\n\t * @property {Object.<string, number>} depaPos The coordinates when releasing an element<ko>손을 뗐을 때의 좌표 </ko>\n\t * @property {Object.<string, number>} destPos The coordinates to move to after releasing an element<ko>손을 뗀 뒤에 이동할 좌표</ko>\n\t * @property {Object.<string, number>} delta  The movement variation of coordinate <ko>좌표의 변화량</ko>\n\t * @property {Object} inputEvent The event object received from inputType <ko>inputType으로 부터 받은 이벤트 객체</ko>\n\t * @property {Object} input The instance of inputType where the event occurred<ko>이벤트가 발생한 inputType 인스턴스</ko>\n\t * @property {setTo} setTo Specifies the animation coordinates to move after the event <ko>이벤트 이후 이동할 애니메이션 좌표를 지정한다</ko>\n\t * @property {Boolean} isTrusted Returns true if an event was generated by the user action, or false if it was caused by a script or API call <ko>사용자의 액션에 의해 이벤트가 발생하였으면 true, 스크립트나 API호출에 의해 발생하였을 경우에는 false를 반환한다.</ko>\n\t *\n\t * @example\n\t * const axes = new eg.Axes({\n\t *   \"x\": {\n\t *      range: [0, 100]\n\t *   },\n\t *   \"zoom\": {\n\t *      range: [50, 30]\n\t *   }\n\t * }).on(\"release\", function(event) {\n\t *   // event.depaPos\n\t *   // event.destPos\n\t *   // event.delta\n\t *   // event.input\n\t *   // event.inputEvent\n\t *   // event.setTo\n\t *   // event.isTrusted\n\t *\n\t *   // if you want to change the animation coordinates to move after the 'release' event.\n\t *   event.setTo({x: 10}, 2000);\n\t * });\n\t */\n\ttriggerRelease(param: AnimationParam) {\n\t\tconst {roundPos, roundDepa} = this.getRoundPos(param.destPos, param.depaPos);\n\t\tparam.destPos = roundPos;\n\t\tparam.depaPos = roundDepa;\n\t\tparam.setTo = this.createUserControll(param.destPos, param.duration);\n\t\tthis.axes.trigger(\"release\", param);\n\t}\n\n\t/**\n\t * This event is fired when coordinate changes.\n\t * @ko 좌표가 변경됐을 때 발생하는 이벤트\n\t * @name eg.Axes#change\n\t * @event\n\t * @type {object} The object of data to be sent when the event is fired <ko>이벤트가 발생할 때 전달되는 데이터 객체</ko>\n\t * @property {Object.<string, number>} pos  The coordinate <ko>좌표</ko>\n\t * @property {Object.<string, number>} delta  The movement variation of coordinate <ko>좌표의 변화량</ko>\n\t * @property {Boolean} holding Indicates whether a user holds an element on the screen of the device.<ko>사용자가 기기의 화면을 누르고 있는지 여부</ko>\n\t * @property {Object} input The instance of inputType where the event occurred. If the value is changed by animation, it returns 'null'.<ko>이벤트가 발생한 inputType 인스턴스. 애니메이션에 의해 값이 변경될 경우에는 'null'을 반환한다.</ko>\n\t * @property {Object} inputEvent The event object received from inputType. If the value is changed by animation, it returns 'null'.<ko>inputType으로 부터 받은 이벤트 객체. 애니메이션에 의해 값이 변경될 경우에는 'null'을 반환한다.</ko>\n\t * @property {set} set Specifies the coordinates to move after the event. It works when the holding value is true <ko>이벤트 이후 이동할 좌표를 지정한다. holding 값이 true일 경우에 동작한다.</ko>\n\t * @property {Boolean} isTrusted Returns true if an event was generated by the user action, or false if it was caused by a script or API call <ko>사용자의 액션에 의해 이벤트가 발생하였으면 true, 스크립트나 API호출에 의해 발생하였을 경우에는 false를 반환한다.</ko>\n\t *\n\t * @example\n\t * const axes = new eg.Axes({\n\t *   \"x\": {\n\t *      range: [0, 100]\n\t *   },\n\t *   \"zoom\": {\n\t *      range: [50, 30]\n\t *   }\n\t * }).on(\"change\", function(event) {\n\t *   // event.pos\n\t *   // event.delta\n\t *   // event.input\n\t *   // event.inputEvent\n\t *   // event.holding\n\t *   // event.set\n\t *   // event.isTrusted\n\t *\n\t *   // if you want to change the coordinates to move after the 'change' event.\n\t *   // it works when the holding value of the change event is true.\n\t *   event.holding && event.set({x: 10});\n\t * });\n\t */\n\ttriggerChange(pos: Axis, isAccurate?: boolean, depaPos?: Axis, option?: ChangeEventOption, holding: boolean = false) {\n\t\tconst am = this.am;\n\t\tconst axm = am.axm;\n\t\tconst eventInfo = am.getEventInfo();\n\t\tconst {roundPos, roundDepa} = this.getRoundPos(pos, depaPos);\n\t\tconst moveTo = axm.moveTo(roundPos, roundDepa);\n\t\tconst inputEvent = option && option.event || eventInfo && eventInfo.event || null;\n\t\tconst param = {\n\t\t\tpos: moveTo.pos,\n\t\t\tdelta: moveTo.delta,\n\t\t\tholding,\n\t\t\tinputEvent,\n\t\t\tisTrusted: !!inputEvent,\n\t\t\tinput: option && option.input || eventInfo && eventInfo.input || null,\n\t\t\tset: inputEvent ? this.createUserControll(moveTo.pos) : () => { },\n\t\t};\n\t\tconst result = this.axes.trigger(\"change\", param);\n\n\t\tinputEvent && axm.set(param.set()[\"destPos\"]);\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * This event is fired when animation starts.\n\t * @ko 에니메이션이 시작할 때 발생한다.\n\t * @name eg.Axes#animationStart\n\t * @event\n\t * @type {object} The object of data to be sent when the event is fired<ko>이벤트가 발생할 때 전달되는 데이터 객체</ko>\n\t * @property {Object.<string, number>} depaPos The coordinates when animation starts<ko>애니메이션이 시작 되었을 때의 좌표 </ko>\n\t * @property {Object.<string, number>} destPos The coordinates to move to. If you change this value, you can run the animation<ko>이동할 좌표. 이값을 변경하여 애니메이션을 동작시킬수 있다</ko>\n\t * @property {Object.<string, number>} delta  The movement variation of coordinate <ko>좌표의 변화량</ko>\n\t * @property {Number} duration Duration of the animation (unit: ms). If you change this value, you can control the animation duration time.<ko>애니메이션 진행 시간(단위: ms). 이값을 변경하여 애니메이션의 이동시간을 조절할 수 있다.</ko>\n\t * @property {Object} input The instance of inputType where the event occurred. If the value is changed by animation, it returns 'null'.<ko>이벤트가 발생한 inputType 인스턴스. 애니메이션에 의해 값이 변경될 경우에는 'null'을 반환한다.</ko>\n\t * @property {Object} inputEvent The event object received from inputType <ko>inputType으로 부터 받은 이벤트 객체</ko>\n\t * @property {setTo} setTo Specifies the animation coordinates to move after the event <ko>이벤트 이후 이동할 애니메이션 좌표를 지정한다</ko>\n\t * @property {Boolean} isTrusted Returns true if an event was generated by the user action, or false if it was caused by a script or API call <ko>사용자의 액션에 의해 이벤트가 발생하였으면 true, 스크립트나 API호출에 의해 발생하였을 경우에는 false를 반환한다.</ko>\n\t *\n\t * @example\n\t * const axes = new eg.Axes({\n\t *   \"x\": {\n\t *      range: [0, 100]\n\t *   },\n\t *   \"zoom\": {\n\t *      range: [50, 30]\n\t *   }\n\t * }).on(\"release\", function(event) {\n\t *   // event.depaPos\n\t *   // event.destPos\n\t *   // event.delta\n\t *   // event.input\n\t *   // event.inputEvent\n\t *   // event.setTo\n\t *   // event.isTrusted\n\t *\n\t *   // if you want to change the animation coordinates to move after the 'animationStart' event.\n\t *   event.setTo({x: 10}, 2000);\n\t * });\n\t */\n\ttriggerAnimationStart(param: AnimationParam): boolean {\n\t\tconst {roundPos, roundDepa} = this.getRoundPos(param.destPos, param.depaPos);\n\t\tparam.destPos = roundPos;\n\t\tparam.depaPos = roundDepa;\n\t\tparam.setTo = this.createUserControll(param.destPos, param.duration);\n\t\treturn this.axes.trigger(\"animationStart\", param);\n\t}\n\n\t/**\n\t * This event is fired when animation ends.\n\t * @ko 에니메이션이 끝났을 때 발생한다.\n\t * @name eg.Axes#animationEnd\n\t * @event\n\t * @type {object} The object of data to be sent when the event is fired<ko>이벤트가 발생할 때 전달되는 데이터 객체</ko>\n\t * @property {Boolean} isTrusted Returns true if an event was generated by the user action, or false if it was caused by a script or API call <ko>사용자의 액션에 의해 이벤트가 발생하였으면 true, 스크립트나 API호출에 의해 발생하였을 경우에는 false를 반환한다.</ko>\n\t *\n\t * @example\n\t * const axes = new eg.Axes({\n\t *   \"x\": {\n\t *      range: [0, 100]\n\t *   },\n\t *   \"zoom\": {\n\t *      range: [50, 30]\n\t *   }\n\t * }).on(\"animationEnd\", function(event) {\n\t *   // event.isTrusted\n\t * });\n\t */\n\ttriggerAnimationEnd(isTrusted: boolean = false) {\n\t\tthis.axes.trigger(\"animationEnd\", {\n\t\t\tisTrusted,\n\t\t});\n\t}\n\t/**\n\t * This event is fired when all actions have been completed.\n\t * @ko 에니메이션이 끝났을 때 발생한다.\n\t * @name eg.Axes#finish\n\t * @event\n\t * @type {object} The object of data to be sent when the event is fired<ko>이벤트가 발생할 때 전달되는 데이터 객체</ko>\n\t * @property {Boolean} isTrusted Returns true if an event was generated by the user action, or false if it was caused by a script or API call <ko>사용자의 액션에 의해 이벤트가 발생하였으면 true, 스크립트나 API호출에 의해 발생하였을 경우에는 false를 반환한다.</ko>\n\t *\n\t * @example\n\t * const axes = new eg.Axes({\n\t *   \"x\": {\n\t *      range: [0, 100]\n\t *   },\n\t *   \"zoom\": {\n\t *      range: [50, 30]\n\t *   }\n\t * }).on(\"finish\", function(event) {\n\t *   // event.isTrusted\n\t * });\n\t */\n\ttriggerFinish(isTrusted: boolean = false) {\n\t\tthis.axes.trigger(\"finish\", {\n\t\t\tisTrusted,\n\t\t});\n\t}\n\tprivate createUserControll(pos: Axis, duration: number = 0) {\n\t\t// to controll\n\t\tconst userControl = {\n\t\t\tdestPos: { ...pos },\n\t\t\tduration,\n\t\t};\n\t\treturn (toPos?: Axis, userDuration?: number): { destPos: Axis, duration: number } => {\n\t\t\ttoPos && (userControl.destPos = { ...toPos });\n\t\t\t(userDuration !== undefined) && (userControl.duration = userDuration);\n\t\t\treturn userControl;\n\t\t};\n\t}\n\n\tsetAnimationManager(am: AnimationManager) {\n\t\tthis.am = am;\n\t}\n\n\tdestroy() {\n\t\tthis.axes.off();\n\t}\n\n\tprivate getRoundPos(pos: Axis, depaPos?: Axis) {\n\t\t// round value if round exist\n\t\tconst roundUnit = this.axes.options.round;\n\n\t\t// if (round == null) {\n\t\t// \treturn {pos, depaPos}; // undefined, undefined\n\t\t// }\n\t\treturn {\n\t\t\troundPos: roundNumbers(pos, roundUnit),\n\t\t\troundDepa: roundNumbers(depaPos, roundUnit),\n\t\t};\n\t}\n}\n","import { AxesOption } from \"./Axes\";\nexport class InterruptManager {\n\tprivate _prevented = false; //  check whether the animation event was prevented\n\tconstructor(private options: AxesOption) { }\n\n\tisInterrupting() {\n\t\t// when interruptable is 'true', return value is always 'true'.\n\t\treturn this.options.interruptable || this._prevented;\n\t}\n\n\tisInterrupted() {\n\t\treturn !this.options.interruptable && this._prevented;\n\t}\n\n\tsetInterrupt(prevented) {\n\t\t!this.options.interruptable && (this._prevented = prevented);\n\t}\n}\n","import { isOutside, getCirculatedPos } from \"./Coordinate\";\nimport { map, filter, every } from \"./utils\";\nimport { ObjectInterface } from \"./const\";\n\nexport interface Axis {\n\t[key: string]: number;\n}\n\nexport interface AxisOption {\n\trange?: number[];\n\tbounce?: number | number[];\n\tcircular?: boolean | boolean[];\n}\n\nexport class AxisManager {\n\tprivate _pos: Axis;\n\tconstructor(private axis: ObjectInterface<AxisOption>, private options) {\n\t\tthis._complementOptions();\n\t\tthis._pos = Object.keys(this.axis).reduce((acc, v) => {\n\t\t\tacc[v] = this.axis[v].range[0];\n\t\t\treturn acc;\n\t\t}, {});\n\t}\n\t/**\n\t   * set up 'css' expression\n\t   * @private\n\t   */\n\tprivate _complementOptions() {\n\t\tObject.keys(this.axis).forEach(axis => {\n\t\t\tthis.axis[axis] = {\n\t\t\t\t...{\n\t\t\t\t\trange: [0, 100],\n\t\t\t\t\tbounce: [0, 0],\n\t\t\t\t\tcircular: [false, false],\n\t\t\t\t}, ...this.axis[axis],\n\t\t\t};\n\n\t\t\t[\"bounce\", \"circular\"].forEach(v => {\n\t\t\t\tconst axisOption = this.axis;\n\t\t\t\tconst key = axisOption[axis][v];\n\n\t\t\t\tif (/string|number|boolean/.test(typeof key)) {\n\t\t\t\t\taxisOption[axis][v] = [key, key];\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\tgetDelta(depaPos: Axis, destPos: Axis): Axis {\n\t\tconst fullDepaPos = this.get(depaPos);\n\t\treturn map(this.get(destPos), (v, k) => v - fullDepaPos[k]);\n\t}\n\tget(axes?: string[] | Axis): Axis {\n\t\tif (axes && Array.isArray(axes)) {\n\t\t\treturn axes.reduce((acc, v) => {\n\t\t\t\tif (v && (v in this._pos)) {\n\t\t\t\t\tacc[v] = this._pos[v];\n\t\t\t\t}\n\t\t\t\treturn acc;\n\t\t\t}, {});\n\t\t} else {\n\t\t\treturn { ...this._pos, ...((axes || {}) as Axis) };\n\t\t}\n\t}\n\tmoveTo(pos: Axis, depaPos: Axis = this._pos): { [key: string]: Axis } {\n\t\tconst delta = map(this._pos, (v, key) => {\n\t\t\treturn key in pos && key in depaPos ? pos[key] - depaPos[key] : 0;\n\t\t});\n\n\t\tthis.set(this.map(pos, (v, opt) => opt ? getCirculatedPos(v, opt.range, opt.circular as boolean[]) : 0));\n\t\treturn {\n\t\t\tpos: { ...this._pos },\n\t\t\tdelta,\n\t\t};\n\t}\n\tset(pos: Axis) {\n\t\tfor (const k in pos) {\n\t\t\tif (k && (k in this._pos)) {\n\t\t\t\tthis._pos[k] = pos[k];\n\t\t\t}\n\t\t}\n\t}\n\tevery(\n\t\tpos: Axis,\n\t\tcallback: (value: number, options: AxisOption, key: string) => boolean): boolean {\n\t\tconst axisOptions = this.axis;\n\n\t\treturn every(pos, (value, key) => callback(value, axisOptions[key], key));\n\t}\n\tfilter(\n\t\tpos: Axis,\n\t\tcallback: (value: number, options: AxisOption, key: string) => boolean): Axis {\n\n\t\tconst axisOptions = this.axis;\n\n\t\treturn filter(pos, (value, key) => callback(value, axisOptions[key], key));\n\t}\n\tmap<U>(\n\t\tpos: Axis,\n\t\tcallback: (value: number, options: AxisOption, key: string) => U) {\n\t\tconst axisOptions = this.axis;\n\n\t\treturn map<number, U>(pos, (value, key) => callback(value, axisOptions[key], key));\n\t}\n\tisOutside(axes?: string[]) {\n\t\treturn !this.every(\n\t\t\taxes ? this.get(axes) : this._pos,\n\t\t\t(v, opt) => !isOutside(v, opt.range),\n\t\t);\n\t}\n\tgetAxisOptions(key: string) {\n\t\treturn this.axis[key];\n\t}\n}\n","import { InterruptManager } from \"./InterruptManager\";\nimport { IInputType, IInputTypeObserver } from \"./inputType/InputType\";\nimport { EventManager, ChangeEventOption } from \"./EventManager\";\nimport { AxisManager, Axis } from \"./AxisManager\";\nimport { AnimationParam, AnimationManager } from \"./AnimationManager\";\nimport { AxesOption } from \"./Axes\";\nimport { isOutside, getInsidePosition } from \"./Coordinate\";\nimport { map, equal } from \"./utils\";\n\nexport class InputObserver implements IInputTypeObserver {\n\tpublic options: AxesOption;\n\tprivate itm: InterruptManager;\n\tprivate em: EventManager;\n\tprivate axm: AxisManager;\n\tprivate am: AnimationManager;\n\tprivate isOutside = false;\n\tprivate moveDistance: Axis = null;\n\tprivate isStopped = false;\n\tconstructor({ options, itm, em, axm, am }) {\n\t\tthis.options = options;\n\t\tthis.itm = itm;\n\t\tthis.em = em;\n\t\tthis.axm = axm;\n\t\tthis.am = am;\n\t}\n\n\t// when move pointer is held in outside\n\tprivate atOutside(pos: Axis) {\n\t\tif (this.isOutside) {\n\t\t\treturn this.axm.map(pos, (v, opt) => {\n\t\t\t\tconst tn = opt.range[0] - opt.bounce[0];\n\t\t\t\tconst tx = opt.range[1] + opt.bounce[1];\n\t\t\t\treturn v > tx ? tx : (v < tn ? tn : v);\n\t\t\t});\n\t\t} else {\n\t\t\t// when start pointer is held in inside\n\t\t\t// get a initialization slope value to prevent smooth animation.\n\t\t\tconst initSlope = this.am.easing(0.00001) / 0.00001;\n\t\t\treturn this.axm.map(pos, (v, opt) => {\n\t\t\t\tconst min = opt.range[0];\n\t\t\t\tconst max = opt.range[1];\n\t\t\t\tconst out = opt.bounce;\n\t\t\t\tconst circular = opt.circular;\n\n\t\t\t\tif (circular && (circular[0] || circular[1])) {\n\t\t\t\t\treturn v;\n\t\t\t\t} else if (v < min) { // left\n\t\t\t\t\treturn min - this.am.easing((min - v) / (out[0] * initSlope)) * out[0];\n\t\t\t\t} else if (v > max) { // right\n\t\t\t\t\treturn max + this.am.easing((v - max) / (out[1] * initSlope)) * out[1];\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t});\n\t\t}\n\t}\n\tget(input: IInputType): Axis {\n\t\treturn this.axm.get(input.axes);\n\t}\n\thold(input: IInputType, event) {\n\t\tif (this.itm.isInterrupted() || !input.axes.length) {\n\t\t\treturn;\n\t\t}\n\t\tconst changeOption: ChangeEventOption = {\n\t\t\tinput,\n\t\t\tevent,\n\t\t};\n\t\tthis.isStopped = false;\n\t\tthis.itm.setInterrupt(true);\n\t\tthis.am.grab(input.axes, changeOption);\n\t\t!this.moveDistance && this.em.triggerHold(this.axm.get(), changeOption);\n\t\tthis.isOutside = this.axm.isOutside(input.axes);\n\t\tthis.moveDistance = this.axm.get(input.axes);\n\t}\n\tchange(input: IInputType, event, offset: Axis) {\n\t\tif (this.isStopped || !this.itm.isInterrupting() || this.axm.every(offset, v => v === 0)) {\n\t\t\treturn;\n\t\t}\n\t\tlet depaPos: Axis = this.moveDistance || this.axm.get(input.axes);\n\t\tlet destPos: Axis;\n\n\t\t// for outside logic\n\t\tdestPos = map(depaPos, (v, k) => v + (offset[k] || 0));\n\t\tthis.moveDistance && (this.moveDistance = destPos);\n\t\t// from outside to inside\n\t\tif (this.isOutside &&\n\t\t\tthis.axm.every(depaPos, (v, opt) => !isOutside(v, opt.range))) {\n\t\t\tthis.isOutside = false;\n\t\t}\n\t\tdepaPos = this.atOutside(depaPos);\n\t\tdestPos = this.atOutside(destPos);\n\n\t\tconst isCanceled = !this.em.triggerChange(destPos, false, depaPos, {\n\t\t\tinput,\n\t\t\tevent,\n\t\t}, true);\n\n\t\tif (isCanceled) {\n\t\t\tthis.isStopped = true;\n\t\t\tthis.moveDistance = null;\n\t\t\tthis.am.finish(false);\n\t\t}\n\t}\n\trelease(input: IInputType, event, offset: Axis, inputDuration?: number) {\n\t\tif (this.isStopped || !this.itm.isInterrupting() || !this.moveDistance) {\n\t\t\treturn;\n\t\t}\n\t\tconst pos: Axis = this.axm.get(input.axes);\n\t\tconst depaPos: Axis = this.axm.get();\n\t\tlet destPos: Axis = this.axm.get(this.axm.map(offset, (v, opt, k) => {\n\t\t\tif (opt.circular && (opt.circular[0] || opt.circular[1])) {\n\t\t\t\treturn pos[k] + v;\n\t\t\t} else {\n\t\t\t\treturn getInsidePosition(\n\t\t\t\t\tpos[k] + v,\n\t\t\t\t\topt.range,\n\t\t\t\t\topt.circular as boolean[],\n\t\t\t\t\topt.bounce as number[],\n\t\t\t\t);\n\t\t\t}\n\t\t}));\n\t\tconst duration = this.am.getDuration(destPos, pos, inputDuration);\n\n\t\tif (duration === 0) {\n\t\t\tdestPos = { ...depaPos };\n\t\t}\n\t\t// prepare params\n\t\tconst param: AnimationParam = {\n\t\t\tdepaPos,\n\t\t\tdestPos,\n\t\t\tduration,\n\t\t\tdelta: this.axm.getDelta(depaPos, destPos),\n\t\t\tinputEvent: event,\n\t\t\tinput,\n\t\t\tisTrusted: true,\n\t\t};\n\t\tthis.em.triggerRelease(param);\n\t\tthis.moveDistance = null;\n\n\t\t// to contol\n\t\tconst userWish = this.am.getUserControll(param);\n\t\tconst isEqual = equal(userWish.destPos, depaPos);\n\t\tconst changeOption: ChangeEventOption = {\n\t\t\tinput,\n\t\t\tevent,\n\t\t};\n\t\tif (isEqual || userWish.duration === 0) {\n\t\t\t!isEqual && this.em.triggerChange(userWish.destPos, false, depaPos, changeOption, true);\n\t\t\tthis.itm.setInterrupt(false);\n\t\t\tif (this.axm.isOutside()) {\n\t\t\t\tthis.am.restore(changeOption);\n\t\t\t} else {\n\t\t\t\tthis.em.triggerFinish(true);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.am.animateTo(userWish.destPos, userWish.duration, changeOption);\n\t\t}\n\t}\n}\n","/*! Hammer.JS - v2.0.15 - 2019-04-04\n * http://naver.github.io/egjs\n *\n * Forked By Naver egjs\n * Copyright (c) hammerjs\n * Licensed under the MIT license */\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\n/**\n * @private\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} target\n * @param {...Object} objects_to_assign\n * @returns {Object} target\n */\nvar assign;\n\nif (typeof Object.assign !== 'function') {\n  assign = function assign(target) {\n    if (target === undefined || target === null) {\n      throw new TypeError('Cannot convert undefined or null to object');\n    }\n\n    var output = Object(target);\n\n    for (var index = 1; index < arguments.length; index++) {\n      var source = arguments[index];\n\n      if (source !== undefined && source !== null) {\n        for (var nextKey in source) {\n          if (source.hasOwnProperty(nextKey)) {\n            output[nextKey] = source[nextKey];\n          }\n        }\n      }\n    }\n\n    return output;\n  };\n} else {\n  assign = Object.assign;\n}\n\nvar assign$1 = assign;\n\nvar VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];\nvar TEST_ELEMENT = typeof document === \"undefined\" ? {\n  style: {}\n} : document.createElement('div');\nvar TYPE_FUNCTION = 'function';\nvar round = Math.round,\n    abs = Math.abs;\nvar now = Date.now;\n\n/**\n * @private\n * get the prefixed property\n * @param {Object} obj\n * @param {String} property\n * @returns {String|Undefined} prefixed\n */\n\nfunction prefixed(obj, property) {\n  var prefix;\n  var prop;\n  var camelProp = property[0].toUpperCase() + property.slice(1);\n  var i = 0;\n\n  while (i < VENDOR_PREFIXES.length) {\n    prefix = VENDOR_PREFIXES[i];\n    prop = prefix ? prefix + camelProp : property;\n\n    if (prop in obj) {\n      return prop;\n    }\n\n    i++;\n  }\n\n  return undefined;\n}\n\n/* eslint-disable no-new-func, no-nested-ternary */\nvar win;\n\nif (typeof window === \"undefined\") {\n  // window is undefined in node.js\n  win = {};\n} else {\n  win = window;\n}\n\nvar PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');\nvar NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;\nfunction getTouchActionProps() {\n  if (!NATIVE_TOUCH_ACTION) {\n    return false;\n  }\n\n  var touchMap = {};\n  var cssSupports = win.CSS && win.CSS.supports;\n  ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function (val) {\n    // If css.supports is not supported but there is native touch-action assume it supports\n    // all values. This is the case for IE 10 and 11.\n    return touchMap[val] = cssSupports ? win.CSS.supports('touch-action', val) : true;\n  });\n  return touchMap;\n}\n\nvar TOUCH_ACTION_COMPUTE = 'compute';\nvar TOUCH_ACTION_AUTO = 'auto';\nvar TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented\n\nvar TOUCH_ACTION_NONE = 'none';\nvar TOUCH_ACTION_PAN_X = 'pan-x';\nvar TOUCH_ACTION_PAN_Y = 'pan-y';\nvar TOUCH_ACTION_MAP = getTouchActionProps();\n\nvar MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;\nvar SUPPORT_TOUCH = 'ontouchstart' in win;\nvar SUPPORT_POINTER_EVENTS = prefixed(win, 'PointerEvent') !== undefined;\nvar SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);\nvar INPUT_TYPE_TOUCH = 'touch';\nvar INPUT_TYPE_PEN = 'pen';\nvar INPUT_TYPE_MOUSE = 'mouse';\nvar INPUT_TYPE_KINECT = 'kinect';\nvar COMPUTE_INTERVAL = 25;\nvar INPUT_START = 1;\nvar INPUT_MOVE = 2;\nvar INPUT_END = 4;\nvar INPUT_CANCEL = 8;\nvar DIRECTION_NONE = 1;\nvar DIRECTION_LEFT = 2;\nvar DIRECTION_RIGHT = 4;\nvar DIRECTION_UP = 8;\nvar DIRECTION_DOWN = 16;\nvar DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;\nvar DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;\nvar DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\nvar PROPS_XY = ['x', 'y'];\nvar PROPS_CLIENT_XY = ['clientX', 'clientY'];\n\n/**\n * @private\n * walk objects and arrays\n * @param {Object} obj\n * @param {Function} iterator\n * @param {Object} context\n */\nfunction each(obj, iterator, context) {\n  var i;\n\n  if (!obj) {\n    return;\n  }\n\n  if (obj.forEach) {\n    obj.forEach(iterator, context);\n  } else if (obj.length !== undefined) {\n    i = 0;\n\n    while (i < obj.length) {\n      iterator.call(context, obj[i], i, obj);\n      i++;\n    }\n  } else {\n    for (i in obj) {\n      obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);\n    }\n  }\n}\n\n/**\n * @private\n * let a boolean value also be a function that must return a boolean\n * this first item in args will be used as the context\n * @param {Boolean|Function} val\n * @param {Array} [args]\n * @returns {Boolean}\n */\n\nfunction boolOrFn(val, args) {\n  if (typeof val === TYPE_FUNCTION) {\n    return val.apply(args ? args[0] || undefined : undefined, args);\n  }\n\n  return val;\n}\n\n/**\n * @private\n * small indexOf wrapper\n * @param {String} str\n * @param {String} find\n * @returns {Boolean} found\n */\nfunction inStr(str, find) {\n  return str.indexOf(find) > -1;\n}\n\n/**\n * @private\n * when the touchActions are collected they are not a valid value, so we need to clean things up. *\n * @param {String} actions\n * @returns {*}\n */\n\nfunction cleanTouchActions(actions) {\n  // none\n  if (inStr(actions, TOUCH_ACTION_NONE)) {\n    return TOUCH_ACTION_NONE;\n  }\n\n  var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\n  var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y); // if both pan-x and pan-y are set (different recognizers\n  // for different directions, e.g. horizontal pan but vertical swipe?)\n  // we need none (as otherwise with pan-x pan-y combined none of these\n  // recognizers will work, since the browser would handle all panning\n\n  if (hasPanX && hasPanY) {\n    return TOUCH_ACTION_NONE;\n  } // pan-x OR pan-y\n\n\n  if (hasPanX || hasPanY) {\n    return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;\n  } // manipulation\n\n\n  if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {\n    return TOUCH_ACTION_MANIPULATION;\n  }\n\n  return TOUCH_ACTION_AUTO;\n}\n\n/**\n * @private\n * Touch Action\n * sets the touchAction property or uses the js alternative\n * @param {Manager} manager\n * @param {String} value\n * @constructor\n */\n\nvar TouchAction =\n/*#__PURE__*/\nfunction () {\n  function TouchAction(manager, value) {\n    this.manager = manager;\n    this.set(value);\n  }\n  /**\n   * @private\n   * set the touchAction value on the element or enable the polyfill\n   * @param {String} value\n   */\n\n\n  var _proto = TouchAction.prototype;\n\n  _proto.set = function set(value) {\n    // find out the touch-action by the event handlers\n    if (value === TOUCH_ACTION_COMPUTE) {\n      value = this.compute();\n    }\n\n    if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {\n      this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;\n    }\n\n    this.actions = value.toLowerCase().trim();\n  };\n  /**\n   * @private\n   * just re-set the touchAction value\n   */\n\n\n  _proto.update = function update() {\n    this.set(this.manager.options.touchAction);\n  };\n  /**\n   * @private\n   * compute the value for the touchAction property based on the recognizer's settings\n   * @returns {String} value\n   */\n\n\n  _proto.compute = function compute() {\n    var actions = [];\n    each(this.manager.recognizers, function (recognizer) {\n      if (boolOrFn(recognizer.options.enable, [recognizer])) {\n        actions = actions.concat(recognizer.getTouchAction());\n      }\n    });\n    return cleanTouchActions(actions.join(' '));\n  };\n  /**\n   * @private\n   * this method is called on each input cycle and provides the preventing of the browser behavior\n   * @param {Object} input\n   */\n\n\n  _proto.preventDefaults = function preventDefaults(input) {\n    var srcEvent = input.srcEvent;\n    var direction = input.offsetDirection; // if the touch action did prevented once this session\n\n    if (this.manager.session.prevented) {\n      srcEvent.preventDefault();\n      return;\n    }\n\n    var actions = this.actions;\n    var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];\n    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];\n    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];\n\n    if (hasNone) {\n      // do not prevent defaults if this is a tap gesture\n      var isTapPointer = input.pointers.length === 1;\n      var isTapMovement = input.distance < 2;\n      var isTapTouchTime = input.deltaTime < 250;\n\n      if (isTapPointer && isTapMovement && isTapTouchTime) {\n        return;\n      }\n    }\n\n    if (hasPanX && hasPanY) {\n      // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent\n      return;\n    }\n\n    if (hasNone || hasPanY && direction & DIRECTION_HORIZONTAL || hasPanX && direction & DIRECTION_VERTICAL) {\n      return this.preventSrc(srcEvent);\n    }\n  };\n  /**\n   * @private\n   * call preventDefault to prevent the browser's default behavior (scrolling in most cases)\n   * @param {Object} srcEvent\n   */\n\n\n  _proto.preventSrc = function preventSrc(srcEvent) {\n    this.manager.session.prevented = true;\n    srcEvent.preventDefault();\n  };\n\n  return TouchAction;\n}();\n\n/**\n * @private\n * find if a node is in the given parent\n * @method hasParent\n * @param {HTMLElement} node\n * @param {HTMLElement} parent\n * @return {Boolean} found\n */\nfunction hasParent(node, parent) {\n  while (node) {\n    if (node === parent) {\n      return true;\n    }\n\n    node = node.parentNode;\n  }\n\n  return false;\n}\n\n/**\n * @private\n * get the center of all the pointers\n * @param {Array} pointers\n * @return {Object} center contains `x` and `y` properties\n */\n\nfunction getCenter(pointers) {\n  var pointersLength = pointers.length; // no need to loop when only one touch\n\n  if (pointersLength === 1) {\n    return {\n      x: round(pointers[0].clientX),\n      y: round(pointers[0].clientY)\n    };\n  }\n\n  var x = 0;\n  var y = 0;\n  var i = 0;\n\n  while (i < pointersLength) {\n    x += pointers[i].clientX;\n    y += pointers[i].clientY;\n    i++;\n  }\n\n  return {\n    x: round(x / pointersLength),\n    y: round(y / pointersLength)\n  };\n}\n\n/**\n * @private\n * create a simple clone from the input used for storage of firstInput and firstMultiple\n * @param {Object} input\n * @returns {Object} clonedInputData\n */\n\nfunction simpleCloneInputData(input) {\n  // make a simple copy of the pointers because we will get a reference if we don't\n  // we only need clientXY for the calculations\n  var pointers = [];\n  var i = 0;\n\n  while (i < input.pointers.length) {\n    pointers[i] = {\n      clientX: round(input.pointers[i].clientX),\n      clientY: round(input.pointers[i].clientY)\n    };\n    i++;\n  }\n\n  return {\n    timeStamp: now(),\n    pointers: pointers,\n    center: getCenter(pointers),\n    deltaX: input.deltaX,\n    deltaY: input.deltaY\n  };\n}\n\n/**\n * @private\n * calculate the absolute distance between two points\n * @param {Object} p1 {x, y}\n * @param {Object} p2 {x, y}\n * @param {Array} [props] containing x and y keys\n * @return {Number} distance\n */\n\nfunction getDistance(p1, p2, props) {\n  if (!props) {\n    props = PROPS_XY;\n  }\n\n  var x = p2[props[0]] - p1[props[0]];\n  var y = p2[props[1]] - p1[props[1]];\n  return Math.sqrt(x * x + y * y);\n}\n\n/**\n * @private\n * calculate the angle between two coordinates\n * @param {Object} p1\n * @param {Object} p2\n * @param {Array} [props] containing x and y keys\n * @return {Number} angle\n */\n\nfunction getAngle(p1, p2, props) {\n  if (!props) {\n    props = PROPS_XY;\n  }\n\n  var x = p2[props[0]] - p1[props[0]];\n  var y = p2[props[1]] - p1[props[1]];\n  return Math.atan2(y, x) * 180 / Math.PI;\n}\n\n/**\n * @private\n * get the direction between two points\n * @param {Number} x\n * @param {Number} y\n * @return {Number} direction\n */\n\nfunction getDirection(x, y) {\n  if (x === y) {\n    return DIRECTION_NONE;\n  }\n\n  if (abs(x) >= abs(y)) {\n    return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n  }\n\n  return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n}\n\nfunction computeDeltaXY(session, input) {\n  var center = input.center; // let { offsetDelta:offset = {}, prevDelta = {}, prevInput = {} } = session;\n  // jscs throwing error on defalut destructured values and without defaults tests fail\n\n  var offset = session.offsetDelta || {};\n  var prevDelta = session.prevDelta || {};\n  var prevInput = session.prevInput || {};\n\n  if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {\n    prevDelta = session.prevDelta = {\n      x: prevInput.deltaX || 0,\n      y: prevInput.deltaY || 0\n    };\n    offset = session.offsetDelta = {\n      x: center.x,\n      y: center.y\n    };\n  }\n\n  input.deltaX = prevDelta.x + (center.x - offset.x);\n  input.deltaY = prevDelta.y + (center.y - offset.y);\n}\n\n/**\n * @private\n * calculate the velocity between two points. unit is in px per ms.\n * @param {Number} deltaTime\n * @param {Number} x\n * @param {Number} y\n * @return {Object} velocity `x` and `y`\n */\nfunction getVelocity(deltaTime, x, y) {\n  return {\n    x: x / deltaTime || 0,\n    y: y / deltaTime || 0\n  };\n}\n\n/**\n * @private\n * calculate the scale factor between two pointersets\n * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} scale\n */\n\nfunction getScale(start, end) {\n  return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);\n}\n\n/**\n * @private\n * calculate the rotation degrees between two pointersets\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} rotation\n */\n\nfunction getRotation(start, end) {\n  return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);\n}\n\n/**\n * @private\n * velocity is calculated every x ms\n * @param {Object} session\n * @param {Object} input\n */\n\nfunction computeIntervalInputData(session, input) {\n  var last = session.lastInterval || input;\n  var deltaTime = input.timeStamp - last.timeStamp;\n  var velocity;\n  var velocityX;\n  var velocityY;\n  var direction;\n\n  if (input.eventType !== INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {\n    var deltaX = input.deltaX - last.deltaX;\n    var deltaY = input.deltaY - last.deltaY;\n    var v = getVelocity(deltaTime, deltaX, deltaY);\n    velocityX = v.x;\n    velocityY = v.y;\n    velocity = abs(v.x) > abs(v.y) ? v.x : v.y;\n    direction = getDirection(deltaX, deltaY);\n    session.lastInterval = input;\n  } else {\n    // use latest velocity info if it doesn't overtake a minimum period\n    velocity = last.velocity;\n    velocityX = last.velocityX;\n    velocityY = last.velocityY;\n    direction = last.direction;\n  }\n\n  input.velocity = velocity;\n  input.velocityX = velocityX;\n  input.velocityY = velocityY;\n  input.direction = direction;\n}\n\n/**\n* @private\n * extend the data with some usable properties like scale, rotate, velocity etc\n * @param {Object} manager\n * @param {Object} input\n */\n\nfunction computeInputData(manager, input) {\n  var session = manager.session;\n  var pointers = input.pointers;\n  var pointersLength = pointers.length; // store the first input to calculate the distance and direction\n\n  if (!session.firstInput) {\n    session.firstInput = simpleCloneInputData(input);\n  } // to compute scale and rotation we need to store the multiple touches\n\n\n  if (pointersLength > 1 && !session.firstMultiple) {\n    session.firstMultiple = simpleCloneInputData(input);\n  } else if (pointersLength === 1) {\n    session.firstMultiple = false;\n  }\n\n  var firstInput = session.firstInput,\n      firstMultiple = session.firstMultiple;\n  var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;\n  var center = input.center = getCenter(pointers);\n  input.timeStamp = now();\n  input.deltaTime = input.timeStamp - firstInput.timeStamp;\n  input.angle = getAngle(offsetCenter, center);\n  input.distance = getDistance(offsetCenter, center);\n  computeDeltaXY(session, input);\n  input.offsetDirection = getDirection(input.deltaX, input.deltaY);\n  var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);\n  input.overallVelocityX = overallVelocity.x;\n  input.overallVelocityY = overallVelocity.y;\n  input.overallVelocity = abs(overallVelocity.x) > abs(overallVelocity.y) ? overallVelocity.x : overallVelocity.y;\n  input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;\n  input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;\n  input.maxPointers = !session.prevInput ? input.pointers.length : input.pointers.length > session.prevInput.maxPointers ? input.pointers.length : session.prevInput.maxPointers;\n  computeIntervalInputData(session, input); // find the correct target\n\n  var target = manager.element;\n\n  if (hasParent(input.srcEvent.target, target)) {\n    target = input.srcEvent.target;\n  }\n\n  input.target = target;\n}\n\n/**\n * @private\n * handle input events\n * @param {Manager} manager\n * @param {String} eventType\n * @param {Object} input\n */\n\nfunction inputHandler(manager, eventType, input) {\n  var pointersLen = input.pointers.length;\n  var changedPointersLen = input.changedPointers.length;\n  var isFirst = eventType & INPUT_START && pointersLen - changedPointersLen === 0;\n  var isFinal = eventType & (INPUT_END | INPUT_CANCEL) && pointersLen - changedPointersLen === 0;\n  input.isFirst = !!isFirst;\n  input.isFinal = !!isFinal;\n\n  if (isFirst) {\n    manager.session = {};\n  } // source event is the normalized value of the domEvents\n  // like 'touchstart, mouseup, pointerdown'\n\n\n  input.eventType = eventType; // compute scale, rotation etc\n\n  computeInputData(manager, input); // emit secret event\n\n  manager.emit('hammer.input', input);\n  manager.recognize(input);\n  manager.session.prevInput = input;\n}\n\n/**\n * @private\n * split string on whitespace\n * @param {String} str\n * @returns {Array} words\n */\nfunction splitStr(str) {\n  return str.trim().split(/\\s+/g);\n}\n\n/**\n * @private\n * addEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\n\nfunction addEventListeners(target, types, handler) {\n  each(splitStr(types), function (type) {\n    target.addEventListener(type, handler, false);\n  });\n}\n\n/**\n * @private\n * removeEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\n\nfunction removeEventListeners(target, types, handler) {\n  each(splitStr(types), function (type) {\n    target.removeEventListener(type, handler, false);\n  });\n}\n\n/**\n * @private\n * get the window object of an element\n * @param {HTMLElement} element\n * @returns {DocumentView|Window}\n */\nfunction getWindowForElement(element) {\n  var doc = element.ownerDocument || element;\n  return doc.defaultView || doc.parentWindow || window;\n}\n\n/**\n * @private\n * create new input type manager\n * @param {Manager} manager\n * @param {Function} callback\n * @returns {Input}\n * @constructor\n */\n\nvar Input =\n/*#__PURE__*/\nfunction () {\n  function Input(manager, callback) {\n    var self = this;\n    this.manager = manager;\n    this.callback = callback;\n    this.element = manager.element;\n    this.target = manager.options.inputTarget; // smaller wrapper around the handler, for the scope and the enabled state of the manager,\n    // so when disabled the input events are completely bypassed.\n\n    this.domHandler = function (ev) {\n      if (boolOrFn(manager.options.enable, [manager])) {\n        self.handler(ev);\n      }\n    };\n\n    this.init();\n  }\n  /**\n   * @private\n   * should handle the inputEvent data and trigger the callback\n   * @virtual\n   */\n\n\n  var _proto = Input.prototype;\n\n  _proto.handler = function handler() {};\n  /**\n   * @private\n   * bind the events\n   */\n\n\n  _proto.init = function init() {\n    this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);\n    this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);\n    this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n  };\n  /**\n   * @private\n   * unbind the events\n   */\n\n\n  _proto.destroy = function destroy() {\n    this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);\n    this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);\n    this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n  };\n\n  return Input;\n}();\n\n/**\n * @private\n * find if a array contains the object using indexOf or a simple polyFill\n * @param {Array} src\n * @param {String} find\n * @param {String} [findByKey]\n * @return {Boolean|Number} false when not found, or the index\n */\nfunction inArray(src, find, findByKey) {\n  if (src.indexOf && !findByKey) {\n    return src.indexOf(find);\n  } else {\n    var i = 0;\n\n    while (i < src.length) {\n      if (findByKey && src[i][findByKey] == find || !findByKey && src[i] === find) {\n        // do not use === here, test fails\n        return i;\n      }\n\n      i++;\n    }\n\n    return -1;\n  }\n}\n\nvar POINTER_INPUT_MAP = {\n  pointerdown: INPUT_START,\n  pointermove: INPUT_MOVE,\n  pointerup: INPUT_END,\n  pointercancel: INPUT_CANCEL,\n  pointerout: INPUT_CANCEL\n}; // in IE10 the pointer types is defined as an enum\n\nvar IE10_POINTER_TYPE_ENUM = {\n  2: INPUT_TYPE_TOUCH,\n  3: INPUT_TYPE_PEN,\n  4: INPUT_TYPE_MOUSE,\n  5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816\n\n};\nvar POINTER_ELEMENT_EVENTS = 'pointerdown';\nvar POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel'; // IE10 has prefixed support, and case-sensitive\n\nif (win.MSPointerEvent && !win.PointerEvent) {\n  POINTER_ELEMENT_EVENTS = 'MSPointerDown';\n  POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';\n}\n/**\n * @private\n * Pointer events input\n * @constructor\n * @extends Input\n */\n\n\nvar PointerEventInput =\n/*#__PURE__*/\nfunction (_Input) {\n  _inheritsLoose(PointerEventInput, _Input);\n\n  function PointerEventInput() {\n    var _this;\n\n    var proto = PointerEventInput.prototype;\n    proto.evEl = POINTER_ELEMENT_EVENTS;\n    proto.evWin = POINTER_WINDOW_EVENTS;\n    _this = _Input.apply(this, arguments) || this;\n    _this.store = _this.manager.session.pointerEvents = [];\n    return _this;\n  }\n  /**\n   * @private\n   * handle mouse events\n   * @param {Object} ev\n   */\n\n\n  var _proto = PointerEventInput.prototype;\n\n  _proto.handler = function handler(ev) {\n    var store = this.store;\n    var removePointer = false;\n    var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');\n    var eventType = POINTER_INPUT_MAP[eventTypeNormalized];\n    var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;\n    var isTouch = pointerType === INPUT_TYPE_TOUCH; // get index of the event in the store\n\n    var storeIndex = inArray(store, ev.pointerId, 'pointerId'); // start and mouse must be down\n\n    if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {\n      if (storeIndex < 0) {\n        store.push(ev);\n        storeIndex = store.length - 1;\n      }\n    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n      removePointer = true;\n    } // it not found, so the pointer hasn't been down (so it's probably a hover)\n\n\n    if (storeIndex < 0) {\n      return;\n    } // update the event in the store\n\n\n    store[storeIndex] = ev;\n    this.callback(this.manager, eventType, {\n      pointers: store,\n      changedPointers: [ev],\n      pointerType: pointerType,\n      srcEvent: ev\n    });\n\n    if (removePointer) {\n      // remove from the store\n      store.splice(storeIndex, 1);\n    }\n  };\n\n  return PointerEventInput;\n}(Input);\n\n/**\n * @private\n * convert array-like objects to real arrays\n * @param {Object} obj\n * @returns {Array}\n */\nfunction toArray(obj) {\n  return Array.prototype.slice.call(obj, 0);\n}\n\n/**\n * @private\n * unique array with objects based on a key (like 'id') or just by the array's value\n * @param {Array} src [{id:1},{id:2},{id:1}]\n * @param {String} [key]\n * @param {Boolean} [sort=False]\n * @returns {Array} [{id:1},{id:2}]\n */\n\nfunction uniqueArray(src, key, sort) {\n  var results = [];\n  var values = [];\n  var i = 0;\n\n  while (i < src.length) {\n    var val = key ? src[i][key] : src[i];\n\n    if (inArray(values, val) < 0) {\n      results.push(src[i]);\n    }\n\n    values[i] = val;\n    i++;\n  }\n\n  if (sort) {\n    if (!key) {\n      results = results.sort();\n    } else {\n      results = results.sort(function (a, b) {\n        return a[key] > b[key];\n      });\n    }\n  }\n\n  return results;\n}\n\nvar TOUCH_INPUT_MAP = {\n  touchstart: INPUT_START,\n  touchmove: INPUT_MOVE,\n  touchend: INPUT_END,\n  touchcancel: INPUT_CANCEL\n};\nvar TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';\n/**\n * @private\n * Multi-user touch events input\n * @constructor\n * @extends Input\n */\n\nvar TouchInput =\n/*#__PURE__*/\nfunction (_Input) {\n  _inheritsLoose(TouchInput, _Input);\n\n  function TouchInput() {\n    var _this;\n\n    TouchInput.prototype.evTarget = TOUCH_TARGET_EVENTS;\n    _this = _Input.apply(this, arguments) || this;\n    _this.targetIds = {}; // this.evTarget = TOUCH_TARGET_EVENTS;\n\n    return _this;\n  }\n\n  var _proto = TouchInput.prototype;\n\n  _proto.handler = function handler(ev) {\n    var type = TOUCH_INPUT_MAP[ev.type];\n    var touches = getTouches.call(this, ev, type);\n\n    if (!touches) {\n      return;\n    }\n\n    this.callback(this.manager, type, {\n      pointers: touches[0],\n      changedPointers: touches[1],\n      pointerType: INPUT_TYPE_TOUCH,\n      srcEvent: ev\n    });\n  };\n\n  return TouchInput;\n}(Input);\n\nfunction getTouches(ev, type) {\n  var allTouches = toArray(ev.touches);\n  var targetIds = this.targetIds; // when there is only one touch, the process can be simplified\n\n  if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {\n    targetIds[allTouches[0].identifier] = true;\n    return [allTouches, allTouches];\n  }\n\n  var i;\n  var targetTouches;\n  var changedTouches = toArray(ev.changedTouches);\n  var changedTargetTouches = [];\n  var target = this.target; // get target touches from touches\n\n  targetTouches = allTouches.filter(function (touch) {\n    return hasParent(touch.target, target);\n  }); // collect touches\n\n  if (type === INPUT_START) {\n    i = 0;\n\n    while (i < targetTouches.length) {\n      targetIds[targetTouches[i].identifier] = true;\n      i++;\n    }\n  } // filter changed touches to only contain touches that exist in the collected target ids\n\n\n  i = 0;\n\n  while (i < changedTouches.length) {\n    if (targetIds[changedTouches[i].identifier]) {\n      changedTargetTouches.push(changedTouches[i]);\n    } // cleanup removed touches\n\n\n    if (type & (INPUT_END | INPUT_CANCEL)) {\n      delete targetIds[changedTouches[i].identifier];\n    }\n\n    i++;\n  }\n\n  if (!changedTargetTouches.length) {\n    return;\n  }\n\n  return [// merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'\n  uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true), changedTargetTouches];\n}\n\nvar MOUSE_INPUT_MAP = {\n  mousedown: INPUT_START,\n  mousemove: INPUT_MOVE,\n  mouseup: INPUT_END\n};\nvar MOUSE_ELEMENT_EVENTS = 'mousedown';\nvar MOUSE_WINDOW_EVENTS = 'mousemove mouseup';\n/**\n * @private\n * Mouse events input\n * @constructor\n * @extends Input\n */\n\nvar MouseInput =\n/*#__PURE__*/\nfunction (_Input) {\n  _inheritsLoose(MouseInput, _Input);\n\n  function MouseInput() {\n    var _this;\n\n    var proto = MouseInput.prototype;\n    proto.evEl = MOUSE_ELEMENT_EVENTS;\n    proto.evWin = MOUSE_WINDOW_EVENTS;\n    _this = _Input.apply(this, arguments) || this;\n    _this.pressed = false; // mousedown state\n\n    return _this;\n  }\n  /**\n   * @private\n   * handle mouse events\n   * @param {Object} ev\n   */\n\n\n  var _proto = MouseInput.prototype;\n\n  _proto.handler = function handler(ev) {\n    var eventType = MOUSE_INPUT_MAP[ev.type]; // on start we want to have the left mouse button down\n\n    if (eventType & INPUT_START && ev.button === 0) {\n      this.pressed = true;\n    }\n\n    if (eventType & INPUT_MOVE && ev.which !== 1) {\n      eventType = INPUT_END;\n    } // mouse must be down\n\n\n    if (!this.pressed) {\n      return;\n    }\n\n    if (eventType & INPUT_END) {\n      this.pressed = false;\n    }\n\n    this.callback(this.manager, eventType, {\n      pointers: [ev],\n      changedPointers: [ev],\n      pointerType: INPUT_TYPE_MOUSE,\n      srcEvent: ev\n    });\n  };\n\n  return MouseInput;\n}(Input);\n\n/**\n * @private\n * Combined touch and mouse input\n *\n * Touch has a higher priority then mouse, and while touching no mouse events are allowed.\n * This because touch devices also emit mouse events while doing a touch.\n *\n * @constructor\n * @extends Input\n */\n\nvar DEDUP_TIMEOUT = 2500;\nvar DEDUP_DISTANCE = 25;\n\nfunction setLastTouch(eventData) {\n  var _eventData$changedPoi = eventData.changedPointers,\n      touch = _eventData$changedPoi[0];\n\n  if (touch.identifier === this.primaryTouch) {\n    var lastTouch = {\n      x: touch.clientX,\n      y: touch.clientY\n    };\n    var lts = this.lastTouches;\n    this.lastTouches.push(lastTouch);\n\n    var removeLastTouch = function removeLastTouch() {\n      var i = lts.indexOf(lastTouch);\n\n      if (i > -1) {\n        lts.splice(i, 1);\n      }\n    };\n\n    setTimeout(removeLastTouch, DEDUP_TIMEOUT);\n  }\n}\n\nfunction recordTouches(eventType, eventData) {\n  if (eventType & INPUT_START) {\n    this.primaryTouch = eventData.changedPointers[0].identifier;\n    setLastTouch.call(this, eventData);\n  } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n    setLastTouch.call(this, eventData);\n  }\n}\n\nfunction isSyntheticEvent(eventData) {\n  var x = eventData.srcEvent.clientX;\n  var y = eventData.srcEvent.clientY;\n\n  for (var i = 0; i < this.lastTouches.length; i++) {\n    var t = this.lastTouches[i];\n    var dx = Math.abs(x - t.x);\n    var dy = Math.abs(y - t.y);\n\n    if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nvar TouchMouseInput =\n/*#__PURE__*/\nfunction () {\n  var TouchMouseInput =\n  /*#__PURE__*/\n  function (_Input) {\n    _inheritsLoose(TouchMouseInput, _Input);\n\n    function TouchMouseInput(_manager, callback) {\n      var _this;\n\n      _this = _Input.call(this, _manager, callback) || this;\n\n      _this.handler = function (manager, inputEvent, inputData) {\n        var isTouch = inputData.pointerType === INPUT_TYPE_TOUCH;\n        var isMouse = inputData.pointerType === INPUT_TYPE_MOUSE;\n\n        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {\n          return;\n        } // when we're in a touch event, record touches to  de-dupe synthetic mouse event\n\n\n        if (isTouch) {\n          recordTouches.call(_assertThisInitialized(_assertThisInitialized(_this)), inputEvent, inputData);\n        } else if (isMouse && isSyntheticEvent.call(_assertThisInitialized(_assertThisInitialized(_this)), inputData)) {\n          return;\n        }\n\n        _this.callback(manager, inputEvent, inputData);\n      };\n\n      _this.touch = new TouchInput(_this.manager, _this.handler);\n      _this.mouse = new MouseInput(_this.manager, _this.handler);\n      _this.primaryTouch = null;\n      _this.lastTouches = [];\n      return _this;\n    }\n    /**\n     * @private\n     * handle mouse and touch events\n     * @param {Hammer} manager\n     * @param {String} inputEvent\n     * @param {Object} inputData\n     */\n\n\n    var _proto = TouchMouseInput.prototype;\n\n    /**\n     * @private\n     * remove the event listeners\n     */\n    _proto.destroy = function destroy() {\n      this.touch.destroy();\n      this.mouse.destroy();\n    };\n\n    return TouchMouseInput;\n  }(Input);\n\n  return TouchMouseInput;\n}();\n\n/**\n * @private\n * create new input type manager\n * called by the Manager constructor\n * @param {Hammer} manager\n * @returns {Input}\n */\n\nfunction createInputInstance(manager) {\n  var Type; // let inputClass = manager.options.inputClass;\n\n  var inputClass = manager.options.inputClass;\n\n  if (inputClass) {\n    Type = inputClass;\n  } else if (SUPPORT_POINTER_EVENTS) {\n    Type = PointerEventInput;\n  } else if (SUPPORT_ONLY_TOUCH) {\n    Type = TouchInput;\n  } else if (!SUPPORT_TOUCH) {\n    Type = MouseInput;\n  } else {\n    Type = TouchMouseInput;\n  }\n\n  return new Type(manager, inputHandler);\n}\n\n/**\n * @private\n * if the argument is an array, we want to execute the fn on each entry\n * if it aint an array we don't want to do a thing.\n * this is used by all the methods that accept a single and array argument.\n * @param {*|Array} arg\n * @param {String} fn\n * @param {Object} [context]\n * @returns {Boolean}\n */\n\nfunction invokeArrayArg(arg, fn, context) {\n  if (Array.isArray(arg)) {\n    each(arg, context[fn], context);\n    return true;\n  }\n\n  return false;\n}\n\nvar STATE_POSSIBLE = 1;\nvar STATE_BEGAN = 2;\nvar STATE_CHANGED = 4;\nvar STATE_ENDED = 8;\nvar STATE_RECOGNIZED = STATE_ENDED;\nvar STATE_CANCELLED = 16;\nvar STATE_FAILED = 32;\n\n/**\n * @private\n * get a unique id\n * @returns {number} uniqueId\n */\nvar _uniqueId = 1;\nfunction uniqueId() {\n  return _uniqueId++;\n}\n\n/**\n * @private\n * get a recognizer by name if it is bound to a manager\n * @param {Recognizer|String} otherRecognizer\n * @param {Recognizer} recognizer\n * @returns {Recognizer}\n */\nfunction getRecognizerByNameIfManager(otherRecognizer, recognizer) {\n  var manager = recognizer.manager;\n\n  if (manager) {\n    return manager.get(otherRecognizer);\n  }\n\n  return otherRecognizer;\n}\n\n/**\n * @private\n * get a usable string, used as event postfix\n * @param {constant} state\n * @returns {String} state\n */\n\nfunction stateStr(state) {\n  if (state & STATE_CANCELLED) {\n    return 'cancel';\n  } else if (state & STATE_ENDED) {\n    return 'end';\n  } else if (state & STATE_CHANGED) {\n    return 'move';\n  } else if (state & STATE_BEGAN) {\n    return 'start';\n  }\n\n  return '';\n}\n\n/**\n * @private\n * Recognizer flow explained; *\n * All recognizers have the initial state of POSSIBLE when a input session starts.\n * The definition of a input session is from the first input until the last input, with all it's movement in it. *\n * Example session for mouse-input: mousedown -> mousemove -> mouseup\n *\n * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed\n * which determines with state it should be.\n *\n * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to\n * POSSIBLE to give it another change on the next cycle.\n *\n *               Possible\n *                  |\n *            +-----+---------------+\n *            |                     |\n *      +-----+-----+               |\n *      |           |               |\n *   Failed      Cancelled          |\n *                          +-------+------+\n *                          |              |\n *                      Recognized       Began\n *                                         |\n *                                      Changed\n *                                         |\n *                                  Ended/Recognized\n */\n\n/**\n * @private\n * Recognizer\n * Every recognizer needs to extend from this class.\n * @constructor\n * @param {Object} options\n */\n\nvar Recognizer =\n/*#__PURE__*/\nfunction () {\n  function Recognizer(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.options = _extends({\n      enable: true\n    }, options);\n    this.id = uniqueId();\n    this.manager = null; // default is enable true\n\n    this.state = STATE_POSSIBLE;\n    this.simultaneous = {};\n    this.requireFail = [];\n  }\n  /**\n   * @private\n   * set options\n   * @param {Object} options\n   * @return {Recognizer}\n   */\n\n\n  var _proto = Recognizer.prototype;\n\n  _proto.set = function set(options) {\n    assign$1(this.options, options); // also update the touchAction, in case something changed about the directions/enabled state\n\n    this.manager && this.manager.touchAction.update();\n    return this;\n  };\n  /**\n   * @private\n   * recognize simultaneous with an other recognizer.\n   * @param {Recognizer} otherRecognizer\n   * @returns {Recognizer} this\n   */\n\n\n  _proto.recognizeWith = function recognizeWith(otherRecognizer) {\n    if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {\n      return this;\n    }\n\n    var simultaneous = this.simultaneous;\n    otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n\n    if (!simultaneous[otherRecognizer.id]) {\n      simultaneous[otherRecognizer.id] = otherRecognizer;\n      otherRecognizer.recognizeWith(this);\n    }\n\n    return this;\n  };\n  /**\n   * @private\n   * drop the simultaneous link. it doesnt remove the link on the other recognizer.\n   * @param {Recognizer} otherRecognizer\n   * @returns {Recognizer} this\n   */\n\n\n  _proto.dropRecognizeWith = function dropRecognizeWith(otherRecognizer) {\n    if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {\n      return this;\n    }\n\n    otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n    delete this.simultaneous[otherRecognizer.id];\n    return this;\n  };\n  /**\n   * @private\n   * recognizer can only run when an other is failing\n   * @param {Recognizer} otherRecognizer\n   * @returns {Recognizer} this\n   */\n\n\n  _proto.requireFailure = function requireFailure(otherRecognizer) {\n    if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {\n      return this;\n    }\n\n    var requireFail = this.requireFail;\n    otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n\n    if (inArray(requireFail, otherRecognizer) === -1) {\n      requireFail.push(otherRecognizer);\n      otherRecognizer.requireFailure(this);\n    }\n\n    return this;\n  };\n  /**\n   * @private\n   * drop the requireFailure link. it does not remove the link on the other recognizer.\n   * @param {Recognizer} otherRecognizer\n   * @returns {Recognizer} this\n   */\n\n\n  _proto.dropRequireFailure = function dropRequireFailure(otherRecognizer) {\n    if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {\n      return this;\n    }\n\n    otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n    var index = inArray(this.requireFail, otherRecognizer);\n\n    if (index > -1) {\n      this.requireFail.splice(index, 1);\n    }\n\n    return this;\n  };\n  /**\n   * @private\n   * has require failures boolean\n   * @returns {boolean}\n   */\n\n\n  _proto.hasRequireFailures = function hasRequireFailures() {\n    return this.requireFail.length > 0;\n  };\n  /**\n   * @private\n   * if the recognizer can recognize simultaneous with an other recognizer\n   * @param {Recognizer} otherRecognizer\n   * @returns {Boolean}\n   */\n\n\n  _proto.canRecognizeWith = function canRecognizeWith(otherRecognizer) {\n    return !!this.simultaneous[otherRecognizer.id];\n  };\n  /**\n   * @private\n   * You should use `tryEmit` instead of `emit` directly to check\n   * that all the needed recognizers has failed before emitting.\n   * @param {Object} input\n   */\n\n\n  _proto.emit = function emit(input) {\n    var self = this;\n    var state = this.state;\n\n    function emit(event) {\n      self.manager.emit(event, input);\n    } // 'panstart' and 'panmove'\n\n\n    if (state < STATE_ENDED) {\n      emit(self.options.event + stateStr(state));\n    }\n\n    emit(self.options.event); // simple 'eventName' events\n\n    if (input.additionalEvent) {\n      // additional event(panleft, panright, pinchin, pinchout...)\n      emit(input.additionalEvent);\n    } // panend and pancancel\n\n\n    if (state >= STATE_ENDED) {\n      emit(self.options.event + stateStr(state));\n    }\n  };\n  /**\n   * @private\n   * Check that all the require failure recognizers has failed,\n   * if true, it emits a gesture event,\n   * otherwise, setup the state to FAILED.\n   * @param {Object} input\n   */\n\n\n  _proto.tryEmit = function tryEmit(input) {\n    if (this.canEmit()) {\n      return this.emit(input);\n    } // it's failing anyway\n\n\n    this.state = STATE_FAILED;\n  };\n  /**\n   * @private\n   * can we emit?\n   * @returns {boolean}\n   */\n\n\n  _proto.canEmit = function canEmit() {\n    var i = 0;\n\n    while (i < this.requireFail.length) {\n      if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {\n        return false;\n      }\n\n      i++;\n    }\n\n    return true;\n  };\n  /**\n   * @private\n   * update the recognizer\n   * @param {Object} inputData\n   */\n\n\n  _proto.recognize = function recognize(inputData) {\n    // make a new copy of the inputData\n    // so we can change the inputData without messing up the other recognizers\n    var inputDataClone = assign$1({}, inputData); // is is enabled and allow recognizing?\n\n    if (!boolOrFn(this.options.enable, [this, inputDataClone])) {\n      this.reset();\n      this.state = STATE_FAILED;\n      return;\n    } // reset when we've reached the end\n\n\n    if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {\n      this.state = STATE_POSSIBLE;\n    }\n\n    this.state = this.process(inputDataClone); // the recognizer has recognized a gesture\n    // so trigger an event\n\n    if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {\n      this.tryEmit(inputDataClone);\n    }\n  };\n  /**\n   * @private\n   * return the state of the recognizer\n   * the actual recognizing happens in this method\n   * @virtual\n   * @param {Object} inputData\n   * @returns {constant} STATE\n   */\n\n  /* jshint ignore:start */\n\n\n  _proto.process = function process(inputData) {};\n  /* jshint ignore:end */\n\n  /**\n   * @private\n   * return the preferred touch-action\n   * @virtual\n   * @returns {Array}\n   */\n\n\n  _proto.getTouchAction = function getTouchAction() {};\n  /**\n   * @private\n   * called when the gesture isn't allowed to recognize\n   * like when another is being recognized or it is disabled\n   * @virtual\n   */\n\n\n  _proto.reset = function reset() {};\n\n  return Recognizer;\n}();\n\nvar defaults = {\n  /**\n   * @private\n   * set if DOM events are being triggered.\n   * But this is slower and unused by simple implementations, so disabled by default.\n   * @type {Boolean}\n   * @default false\n   */\n  domEvents: false,\n\n  /**\n   * @private\n   * The value for the touchAction property/fallback.\n   * When set to `compute` it will magically set the correct value based on the added recognizers.\n   * @type {String}\n   * @default compute\n   */\n  touchAction: TOUCH_ACTION_COMPUTE,\n\n  /**\n   * @private\n   * @type {Boolean}\n   * @default true\n   */\n  enable: true,\n\n  /**\n   * @private\n   * EXPERIMENTAL FEATURE -- can be removed/changed\n   * Change the parent input target element.\n   * If Null, then it is being set the to main element.\n   * @type {Null|EventTarget}\n   * @default null\n   */\n  inputTarget: null,\n\n  /**\n   * @private\n   * force an input class\n   * @type {Null|Function}\n   * @default null\n   */\n  inputClass: null,\n\n  /**\n   * @private\n   * Default recognizer setup when calling `Hammer()`\n   * When creating a new Manager these will be skipped.\n   * @type {Array}\n   */\n  preset: [],\n\n  /**\n   * @private\n   * Some CSS properties can be used to improve the working of Hammer.\n   * Add them to this method and they will be set when creating a new Manager.\n   * @namespace\n   */\n  cssProps: {\n    /**\n     * @private\n     * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.\n     * @type {String}\n     * @default 'none'\n     */\n    userSelect: \"none\",\n\n    /**\n     * @private\n     * Disable the Windows Phone grippers when pressing an element.\n     * @type {String}\n     * @default 'none'\n     */\n    touchSelect: \"none\",\n\n    /**\n     * @private\n     * Disables the default callout shown when you touch and hold a touch target.\n     * On iOS, when you touch and hold a touch target such as a link, Safari displays\n     * a callout containing information about the link. This property allows you to disable that callout.\n     * @type {String}\n     * @default 'none'\n     */\n    touchCallout: \"none\",\n\n    /**\n     * @private\n     * Specifies whether zooming is enabled. Used by IE10>\n     * @type {String}\n     * @default 'none'\n     */\n    contentZooming: \"none\",\n\n    /**\n     * @private\n     * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.\n     * @type {String}\n     * @default 'none'\n     */\n    userDrag: \"none\",\n\n    /**\n     * @private\n     * Overrides the highlight color shown when the user taps a link or a JavaScript\n     * clickable element in iOS. This property obeys the alpha value, if specified.\n     * @type {String}\n     * @default 'rgba(0,0,0,0)'\n     */\n    tapHighlightColor: \"rgba(0,0,0,0)\"\n  }\n};\n\nvar STOP = 1;\nvar FORCED_STOP = 2;\n/**\n * @private\n * add/remove the css properties as defined in manager.options.cssProps\n * @param {Manager} manager\n * @param {Boolean} add\n */\n\nfunction toggleCssProps(manager, add) {\n  var element = manager.element;\n\n  if (!element.style) {\n    return;\n  }\n\n  var prop;\n  each(manager.options.cssProps, function (value, name) {\n    prop = prefixed(element.style, name);\n\n    if (add) {\n      manager.oldCssProps[prop] = element.style[prop];\n      element.style[prop] = value;\n    } else {\n      element.style[prop] = manager.oldCssProps[prop] || \"\";\n    }\n  });\n\n  if (!add) {\n    manager.oldCssProps = {};\n  }\n}\n/**\n * @private\n * trigger dom event\n * @param {String} event\n * @param {Object} data\n */\n\n\nfunction triggerDomEvent(event, data) {\n  var gestureEvent = document.createEvent(\"Event\");\n  gestureEvent.initEvent(event, true, true);\n  gestureEvent.gesture = data;\n  data.target.dispatchEvent(gestureEvent);\n}\n/**\n* @private\n * Manager\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\n\n\nvar Manager =\n/*#__PURE__*/\nfunction () {\n  function Manager(element, options) {\n    var _this = this;\n\n    this.options = assign$1({}, defaults, options || {});\n    this.options.inputTarget = this.options.inputTarget || element;\n    this.handlers = {};\n    this.session = {};\n    this.recognizers = [];\n    this.oldCssProps = {};\n    this.element = element;\n    this.input = createInputInstance(this);\n    this.touchAction = new TouchAction(this, this.options.touchAction);\n    toggleCssProps(this, true);\n    each(this.options.recognizers, function (item) {\n      var recognizer = _this.add(new item[0](item[1]));\n\n      item[2] && recognizer.recognizeWith(item[2]);\n      item[3] && recognizer.requireFailure(item[3]);\n    }, this);\n  }\n  /**\n   * @private\n   * set options\n   * @param {Object} options\n   * @returns {Manager}\n   */\n\n\n  var _proto = Manager.prototype;\n\n  _proto.set = function set(options) {\n    assign$1(this.options, options); // Options that need a little more setup\n\n    if (options.touchAction) {\n      this.touchAction.update();\n    }\n\n    if (options.inputTarget) {\n      // Clean up existing event listeners and reinitialize\n      this.input.destroy();\n      this.input.target = options.inputTarget;\n      this.input.init();\n    }\n\n    return this;\n  };\n  /**\n   * @private\n   * stop recognizing for this session.\n   * This session will be discarded, when a new [input]start event is fired.\n   * When forced, the recognizer cycle is stopped immediately.\n   * @param {Boolean} [force]\n   */\n\n\n  _proto.stop = function stop(force) {\n    this.session.stopped = force ? FORCED_STOP : STOP;\n  };\n  /**\n   * @private\n   * run the recognizers!\n   * called by the inputHandler function on every movement of the pointers (touches)\n   * it walks through all the recognizers and tries to detect the gesture that is being made\n   * @param {Object} inputData\n   */\n\n\n  _proto.recognize = function recognize(inputData) {\n    var session = this.session;\n\n    if (session.stopped) {\n      return;\n    } // run the touch-action polyfill\n\n\n    this.touchAction.preventDefaults(inputData);\n    var recognizer;\n    var recognizers = this.recognizers; // this holds the recognizer that is being recognized.\n    // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED\n    // if no recognizer is detecting a thing, it is set to `null`\n\n    var curRecognizer = session.curRecognizer; // reset when the last recognizer is recognized\n    // or when we're in a new session\n\n    if (!curRecognizer || curRecognizer && curRecognizer.state & STATE_RECOGNIZED) {\n      session.curRecognizer = null;\n      curRecognizer = null;\n    }\n\n    var i = 0;\n\n    while (i < recognizers.length) {\n      recognizer = recognizers[i]; // find out if we are allowed try to recognize the input for this one.\n      // 1.   allow if the session is NOT forced stopped (see the .stop() method)\n      // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one\n      //      that is being recognized.\n      // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.\n      //      this can be setup with the `recognizeWith()` method on the recognizer.\n\n      if (session.stopped !== FORCED_STOP && ( // 1\n      !curRecognizer || recognizer === curRecognizer || // 2\n      recognizer.canRecognizeWith(curRecognizer))) {\n        // 3\n        recognizer.recognize(inputData);\n      } else {\n        recognizer.reset();\n      } // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the\n      // current active recognizer. but only if we don't already have an active recognizer\n\n\n      if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {\n        session.curRecognizer = recognizer;\n        curRecognizer = recognizer;\n      }\n\n      i++;\n    }\n  };\n  /**\n   * @private\n   * get a recognizer by its event name.\n   * @param {Recognizer|String} recognizer\n   * @returns {Recognizer|Null}\n   */\n\n\n  _proto.get = function get(recognizer) {\n    if (recognizer instanceof Recognizer) {\n      return recognizer;\n    }\n\n    var recognizers = this.recognizers;\n\n    for (var i = 0; i < recognizers.length; i++) {\n      if (recognizers[i].options.event === recognizer) {\n        return recognizers[i];\n      }\n    }\n\n    return null;\n  };\n  /**\n   * @private add a recognizer to the manager\n   * existing recognizers with the same event name will be removed\n   * @param {Recognizer} recognizer\n   * @returns {Recognizer|Manager}\n   */\n\n\n  _proto.add = function add(recognizer) {\n    if (invokeArrayArg(recognizer, \"add\", this)) {\n      return this;\n    } // remove existing\n\n\n    var existing = this.get(recognizer.options.event);\n\n    if (existing) {\n      this.remove(existing);\n    }\n\n    this.recognizers.push(recognizer);\n    recognizer.manager = this;\n    this.touchAction.update();\n    return recognizer;\n  };\n  /**\n   * @private\n   * remove a recognizer by name or instance\n   * @param {Recognizer|String} recognizer\n   * @returns {Manager}\n   */\n\n\n  _proto.remove = function remove(recognizer) {\n    if (invokeArrayArg(recognizer, \"remove\", this)) {\n      return this;\n    }\n\n    var targetRecognizer = this.get(recognizer); // let's make sure this recognizer exists\n\n    if (recognizer) {\n      var recognizers = this.recognizers;\n      var index = inArray(recognizers, targetRecognizer);\n\n      if (index !== -1) {\n        recognizers.splice(index, 1);\n        this.touchAction.update();\n      }\n    }\n\n    return this;\n  };\n  /**\n   * @private\n   * bind event\n   * @param {String} events\n   * @param {Function} handler\n   * @returns {EventEmitter} this\n   */\n\n\n  _proto.on = function on(events, handler) {\n    if (events === undefined || handler === undefined) {\n      return this;\n    }\n\n    var handlers = this.handlers;\n    each(splitStr(events), function (event) {\n      handlers[event] = handlers[event] || [];\n      handlers[event].push(handler);\n    });\n    return this;\n  };\n  /**\n   * @private unbind event, leave emit blank to remove all handlers\n   * @param {String} events\n   * @param {Function} [handler]\n   * @returns {EventEmitter} this\n   */\n\n\n  _proto.off = function off(events, handler) {\n    if (events === undefined) {\n      return this;\n    }\n\n    var handlers = this.handlers;\n    each(splitStr(events), function (event) {\n      if (!handler) {\n        delete handlers[event];\n      } else {\n        handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);\n      }\n    });\n    return this;\n  };\n  /**\n   * @private emit event to the listeners\n   * @param {String} event\n   * @param {Object} data\n   */\n\n\n  _proto.emit = function emit(event, data) {\n    // we also want to trigger dom events\n    if (this.options.domEvents) {\n      triggerDomEvent(event, data);\n    } // no handlers, so skip it all\n\n\n    var handlers = this.handlers[event] && this.handlers[event].slice();\n\n    if (!handlers || !handlers.length) {\n      return;\n    }\n\n    data.type = event;\n\n    data.preventDefault = function () {\n      data.srcEvent.preventDefault();\n    };\n\n    var i = 0;\n\n    while (i < handlers.length) {\n      handlers[i](data);\n      i++;\n    }\n  };\n  /**\n   * @private\n   * destroy the manager and unbinds all events\n   * it doesn't unbind dom events, that is the user own responsibility\n   */\n\n\n  _proto.destroy = function destroy() {\n    this.element && toggleCssProps(this, false);\n    this.handlers = {};\n    this.session = {};\n    this.input.destroy();\n    this.element = null;\n  };\n\n  return Manager;\n}();\n\nvar SINGLE_TOUCH_INPUT_MAP = {\n  touchstart: INPUT_START,\n  touchmove: INPUT_MOVE,\n  touchend: INPUT_END,\n  touchcancel: INPUT_CANCEL\n};\nvar SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';\nvar SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';\n/**\n * @private\n * Touch events input\n * @constructor\n * @extends Input\n */\n\nvar SingleTouchInput =\n/*#__PURE__*/\nfunction (_Input) {\n  _inheritsLoose(SingleTouchInput, _Input);\n\n  function SingleTouchInput() {\n    var _this;\n\n    var proto = SingleTouchInput.prototype;\n    proto.evTarget = SINGLE_TOUCH_TARGET_EVENTS;\n    proto.evWin = SINGLE_TOUCH_WINDOW_EVENTS;\n    _this = _Input.apply(this, arguments) || this;\n    _this.started = false;\n    return _this;\n  }\n\n  var _proto = SingleTouchInput.prototype;\n\n  _proto.handler = function handler(ev) {\n    var type = SINGLE_TOUCH_INPUT_MAP[ev.type]; // should we handle the touch events?\n\n    if (type === INPUT_START) {\n      this.started = true;\n    }\n\n    if (!this.started) {\n      return;\n    }\n\n    var touches = normalizeSingleTouches.call(this, ev, type); // when done, reset the started state\n\n    if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {\n      this.started = false;\n    }\n\n    this.callback(this.manager, type, {\n      pointers: touches[0],\n      changedPointers: touches[1],\n      pointerType: INPUT_TYPE_TOUCH,\n      srcEvent: ev\n    });\n  };\n\n  return SingleTouchInput;\n}(Input);\n\nfunction normalizeSingleTouches(ev, type) {\n  var all = toArray(ev.touches);\n  var changed = toArray(ev.changedTouches);\n\n  if (type & (INPUT_END | INPUT_CANCEL)) {\n    all = uniqueArray(all.concat(changed), 'identifier', true);\n  }\n\n  return [all, changed];\n}\n\n/**\n * @private\n * This recognizer is just used as a base for the simple attribute recognizers.\n * @constructor\n * @extends Recognizer\n */\n\nvar AttrRecognizer =\n/*#__PURE__*/\nfunction (_Recognizer) {\n  _inheritsLoose(AttrRecognizer, _Recognizer);\n\n  function AttrRecognizer(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return _Recognizer.call(this, _extends({\n      pointers: 1\n    }, options)) || this;\n  }\n  /**\n   * @private\n   * Used to check if it the recognizer receives valid input, like input.distance > 10.\n   * @memberof AttrRecognizer\n   * @param {Object} input\n   * @returns {Boolean} recognized\n   */\n\n\n  var _proto = AttrRecognizer.prototype;\n\n  _proto.attrTest = function attrTest(input) {\n    var optionPointers = this.options.pointers;\n    return optionPointers === 0 || input.pointers.length === optionPointers;\n  };\n  /**\n   * @private\n   * Process the input and return the state for the recognizer\n   * @memberof AttrRecognizer\n   * @param {Object} input\n   * @returns {*} State\n   */\n\n\n  _proto.process = function process(input) {\n    var state = this.state;\n    var eventType = input.eventType;\n    var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);\n    var isValid = this.attrTest(input); // on cancel input and we've recognized before, return STATE_CANCELLED\n\n    if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {\n      return state | STATE_CANCELLED;\n    } else if (isRecognized || isValid) {\n      if (eventType & INPUT_END) {\n        return state | STATE_ENDED;\n      } else if (!(state & STATE_BEGAN)) {\n        return STATE_BEGAN;\n      }\n\n      return state | STATE_CHANGED;\n    }\n\n    return STATE_FAILED;\n  };\n\n  return AttrRecognizer;\n}(Recognizer);\n\n/**\n * @private\n * A tap is recognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur\n * between the given interval and position. The delay option can be used to recognize multi-taps without firing\n * a single tap.\n *\n * The eventData from the emitted event contains the property `tapCount`, which contains the amount of\n * multi-taps being recognized.\n * @constructor\n * @extends Recognizer\n */\n\nvar TapRecognizer =\n/*#__PURE__*/\nfunction (_Recognizer) {\n  _inheritsLoose(TapRecognizer, _Recognizer);\n\n  function TapRecognizer(options) {\n    var _this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    _this = _Recognizer.call(this, _extends({\n      event: 'tap',\n      pointers: 1,\n      taps: 1,\n      interval: 300,\n      // max time between the multi-tap taps\n      time: 250,\n      // max time of the pointer to be down (like finger on the screen)\n      threshold: 9,\n      // a minimal movement is ok, but keep it low\n      posThreshold: 10\n    }, options)) || this; // previous time and center,\n    // used for tap counting\n\n    _this.pTime = false;\n    _this.pCenter = false;\n    _this._timer = null;\n    _this._input = null;\n    _this.count = 0;\n    return _this;\n  }\n\n  var _proto = TapRecognizer.prototype;\n\n  _proto.getTouchAction = function getTouchAction() {\n    return [TOUCH_ACTION_MANIPULATION];\n  };\n\n  _proto.process = function process(input) {\n    var _this2 = this;\n\n    var options = this.options;\n    var validPointers = input.pointers.length === options.pointers;\n    var validMovement = input.distance < options.threshold;\n    var validTouchTime = input.deltaTime < options.time;\n    this.reset();\n\n    if (input.eventType & INPUT_START && this.count === 0) {\n      return this.failTimeout();\n    } // we only allow little movement\n    // and we've reached an end event, so a tap is possible\n\n\n    if (validMovement && validTouchTime && validPointers) {\n      if (input.eventType !== INPUT_END) {\n        return this.failTimeout();\n      }\n\n      var validInterval = this.pTime ? input.timeStamp - this.pTime < options.interval : true;\n      var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;\n      this.pTime = input.timeStamp;\n      this.pCenter = input.center;\n\n      if (!validMultiTap || !validInterval) {\n        this.count = 1;\n      } else {\n        this.count += 1;\n      }\n\n      this._input = input; // if tap count matches we have recognized it,\n      // else it has began recognizing...\n\n      var tapCount = this.count % options.taps;\n\n      if (tapCount === 0) {\n        // no failing requirements, immediately trigger the tap event\n        // or wait as long as the multitap interval to trigger\n        if (!this.hasRequireFailures()) {\n          return STATE_RECOGNIZED;\n        } else {\n          this._timer = setTimeout(function () {\n            _this2.state = STATE_RECOGNIZED;\n\n            _this2.tryEmit();\n          }, options.interval);\n          return STATE_BEGAN;\n        }\n      }\n    }\n\n    return STATE_FAILED;\n  };\n\n  _proto.failTimeout = function failTimeout() {\n    var _this3 = this;\n\n    this._timer = setTimeout(function () {\n      _this3.state = STATE_FAILED;\n    }, this.options.interval);\n    return STATE_FAILED;\n  };\n\n  _proto.reset = function reset() {\n    clearTimeout(this._timer);\n  };\n\n  _proto.emit = function emit() {\n    if (this.state === STATE_RECOGNIZED) {\n      this._input.tapCount = this.count;\n      this.manager.emit(this.options.event, this._input);\n    }\n  };\n\n  return TapRecognizer;\n}(Recognizer);\n\n/**\n * @private\n * direction cons to string\n * @param {constant} direction\n * @returns {String}\n */\n\nfunction directionStr(direction) {\n  if (direction === DIRECTION_DOWN) {\n    return 'down';\n  } else if (direction === DIRECTION_UP) {\n    return 'up';\n  } else if (direction === DIRECTION_LEFT) {\n    return 'left';\n  } else if (direction === DIRECTION_RIGHT) {\n    return 'right';\n  }\n\n  return '';\n}\n\n/**\n * @private\n * Pan\n * Recognized when the pointer is down and moved in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\n\nvar PanRecognizer =\n/*#__PURE__*/\nfunction (_AttrRecognizer) {\n  _inheritsLoose(PanRecognizer, _AttrRecognizer);\n\n  function PanRecognizer(options) {\n    var _this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    _this = _AttrRecognizer.call(this, _extends({\n      event: 'pan',\n      threshold: 10,\n      pointers: 1,\n      direction: DIRECTION_ALL\n    }, options)) || this;\n    _this.pX = null;\n    _this.pY = null;\n    return _this;\n  }\n\n  var _proto = PanRecognizer.prototype;\n\n  _proto.getTouchAction = function getTouchAction() {\n    var direction = this.options.direction;\n    var actions = [];\n\n    if (direction & DIRECTION_HORIZONTAL) {\n      actions.push(TOUCH_ACTION_PAN_Y);\n    }\n\n    if (direction & DIRECTION_VERTICAL) {\n      actions.push(TOUCH_ACTION_PAN_X);\n    }\n\n    return actions;\n  };\n\n  _proto.directionTest = function directionTest(input) {\n    var options = this.options;\n    var hasMoved = true;\n    var distance = input.distance;\n    var direction = input.direction;\n    var x = input.deltaX;\n    var y = input.deltaY; // lock to axis?\n\n    if (!(direction & options.direction)) {\n      if (options.direction & DIRECTION_HORIZONTAL) {\n        direction = x === 0 ? DIRECTION_NONE : x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n        hasMoved = x !== this.pX;\n        distance = Math.abs(input.deltaX);\n      } else {\n        direction = y === 0 ? DIRECTION_NONE : y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n        hasMoved = y !== this.pY;\n        distance = Math.abs(input.deltaY);\n      }\n    }\n\n    input.direction = direction;\n    return hasMoved && distance > options.threshold && direction & options.direction;\n  };\n\n  _proto.attrTest = function attrTest(input) {\n    return AttrRecognizer.prototype.attrTest.call(this, input) && ( // replace with a super call\n    this.state & STATE_BEGAN || !(this.state & STATE_BEGAN) && this.directionTest(input));\n  };\n\n  _proto.emit = function emit(input) {\n    this.pX = input.deltaX;\n    this.pY = input.deltaY;\n    var direction = directionStr(input.direction);\n\n    if (direction) {\n      input.additionalEvent = this.options.event + direction;\n    }\n\n    _AttrRecognizer.prototype.emit.call(this, input);\n  };\n\n  return PanRecognizer;\n}(AttrRecognizer);\n\n/**\n * @private\n * Swipe\n * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\n\nvar SwipeRecognizer =\n/*#__PURE__*/\nfunction (_AttrRecognizer) {\n  _inheritsLoose(SwipeRecognizer, _AttrRecognizer);\n\n  function SwipeRecognizer(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return _AttrRecognizer.call(this, _extends({\n      event: 'swipe',\n      threshold: 10,\n      velocity: 0.3,\n      direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,\n      pointers: 1\n    }, options)) || this;\n  }\n\n  var _proto = SwipeRecognizer.prototype;\n\n  _proto.getTouchAction = function getTouchAction() {\n    return PanRecognizer.prototype.getTouchAction.call(this);\n  };\n\n  _proto.attrTest = function attrTest(input) {\n    var direction = this.options.direction;\n    var velocity;\n\n    if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {\n      velocity = input.overallVelocity;\n    } else if (direction & DIRECTION_HORIZONTAL) {\n      velocity = input.overallVelocityX;\n    } else if (direction & DIRECTION_VERTICAL) {\n      velocity = input.overallVelocityY;\n    }\n\n    return _AttrRecognizer.prototype.attrTest.call(this, input) && direction & input.offsetDirection && input.distance > this.options.threshold && input.maxPointers === this.options.pointers && abs(velocity) > this.options.velocity && input.eventType & INPUT_END;\n  };\n\n  _proto.emit = function emit(input) {\n    var direction = directionStr(input.offsetDirection);\n\n    if (direction) {\n      this.manager.emit(this.options.event + direction, input);\n    }\n\n    this.manager.emit(this.options.event, input);\n  };\n\n  return SwipeRecognizer;\n}(AttrRecognizer);\n\n/**\n * @private\n * Pinch\n * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).\n * @constructor\n * @extends AttrRecognizer\n */\n\nvar PinchRecognizer =\n/*#__PURE__*/\nfunction (_AttrRecognizer) {\n  _inheritsLoose(PinchRecognizer, _AttrRecognizer);\n\n  function PinchRecognizer(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return _AttrRecognizer.call(this, _extends({\n      event: 'pinch',\n      threshold: 0,\n      pointers: 2\n    }, options)) || this;\n  }\n\n  var _proto = PinchRecognizer.prototype;\n\n  _proto.getTouchAction = function getTouchAction() {\n    return [TOUCH_ACTION_NONE];\n  };\n\n  _proto.attrTest = function attrTest(input) {\n    return _AttrRecognizer.prototype.attrTest.call(this, input) && (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);\n  };\n\n  _proto.emit = function emit(input) {\n    if (input.scale !== 1) {\n      var inOut = input.scale < 1 ? 'in' : 'out';\n      input.additionalEvent = this.options.event + inOut;\n    }\n\n    _AttrRecognizer.prototype.emit.call(this, input);\n  };\n\n  return PinchRecognizer;\n}(AttrRecognizer);\n\n/**\n * @private\n * Rotate\n * Recognized when two or more pointer are moving in a circular motion.\n * @constructor\n * @extends AttrRecognizer\n */\n\nvar RotateRecognizer =\n/*#__PURE__*/\nfunction (_AttrRecognizer) {\n  _inheritsLoose(RotateRecognizer, _AttrRecognizer);\n\n  function RotateRecognizer(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return _AttrRecognizer.call(this, _extends({\n      event: 'rotate',\n      threshold: 0,\n      pointers: 2\n    }, options)) || this;\n  }\n\n  var _proto = RotateRecognizer.prototype;\n\n  _proto.getTouchAction = function getTouchAction() {\n    return [TOUCH_ACTION_NONE];\n  };\n\n  _proto.attrTest = function attrTest(input) {\n    return _AttrRecognizer.prototype.attrTest.call(this, input) && (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);\n  };\n\n  return RotateRecognizer;\n}(AttrRecognizer);\n\n/**\n * @private\n * Press\n * Recognized when the pointer is down for x ms without any movement.\n * @constructor\n * @extends Recognizer\n */\n\nvar PressRecognizer =\n/*#__PURE__*/\nfunction (_Recognizer) {\n  _inheritsLoose(PressRecognizer, _Recognizer);\n\n  function PressRecognizer(options) {\n    var _this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    _this = _Recognizer.call(this, _extends({\n      event: 'press',\n      pointers: 1,\n      time: 251,\n      // minimal time of the pointer to be pressed\n      threshold: 9\n    }, options)) || this;\n    _this._timer = null;\n    _this._input = null;\n    return _this;\n  }\n\n  var _proto = PressRecognizer.prototype;\n\n  _proto.getTouchAction = function getTouchAction() {\n    return [TOUCH_ACTION_AUTO];\n  };\n\n  _proto.process = function process(input) {\n    var _this2 = this;\n\n    var options = this.options;\n    var validPointers = input.pointers.length === options.pointers;\n    var validMovement = input.distance < options.threshold;\n    var validTime = input.deltaTime > options.time;\n    this._input = input; // we only allow little movement\n    // and we've reached an end event, so a tap is possible\n\n    if (!validMovement || !validPointers || input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime) {\n      this.reset();\n    } else if (input.eventType & INPUT_START) {\n      this.reset();\n      this._timer = setTimeout(function () {\n        _this2.state = STATE_RECOGNIZED;\n\n        _this2.tryEmit();\n      }, options.time);\n    } else if (input.eventType & INPUT_END) {\n      return STATE_RECOGNIZED;\n    }\n\n    return STATE_FAILED;\n  };\n\n  _proto.reset = function reset() {\n    clearTimeout(this._timer);\n  };\n\n  _proto.emit = function emit(input) {\n    if (this.state !== STATE_RECOGNIZED) {\n      return;\n    }\n\n    if (input && input.eventType & INPUT_END) {\n      this.manager.emit(this.options.event + \"up\", input);\n    } else {\n      this._input.timeStamp = now();\n      this.manager.emit(this.options.event, this._input);\n    }\n  };\n\n  return PressRecognizer;\n}(Recognizer);\n\n/**\n * @private\n * wrap a method with a deprecation warning and stack trace\n * @param {Function} method\n * @param {String} name\n * @param {String} message\n * @returns {Function} A new function wrapping the supplied method.\n */\nfunction deprecate(method, name, message) {\n  var deprecationMessage = \"DEPRECATED METHOD: \" + name + \"\\n\" + message + \" AT \\n\";\n  return function () {\n    var e = new Error('get-stack-trace');\n    var stack = e && e.stack ? e.stack.replace(/^[^\\(]+?[\\n$]/gm, '').replace(/^\\s+at\\s+/gm, '').replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';\n    var log = window.console && (window.console.warn || window.console.log);\n\n    if (log) {\n      log.call(window.console, deprecationMessage, stack);\n    }\n\n    return method.apply(this, arguments);\n  };\n}\n\n/**\n * @private\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} dest\n * @param {Object} src\n * @param {Boolean} [merge=false]\n * @returns {Object} dest\n */\n\nvar extend = deprecate(function (dest, src, merge) {\n  var keys = Object.keys(src);\n  var i = 0;\n\n  while (i < keys.length) {\n    if (!merge || merge && dest[keys[i]] === undefined) {\n      dest[keys[i]] = src[keys[i]];\n    }\n\n    i++;\n  }\n\n  return dest;\n}, 'extend', 'Use `assign`.');\n\n/**\n * @private\n * merge the values from src in the dest.\n * means that properties that exist in dest will not be overwritten by src\n * @param {Object} dest\n * @param {Object} src\n * @returns {Object} dest\n */\n\nvar merge = deprecate(function (dest, src) {\n  return extend(dest, src, true);\n}, 'merge', 'Use `assign`.');\n\n/**\n * @private\n * simple class inheritance\n * @param {Function} child\n * @param {Function} base\n * @param {Object} [properties]\n */\n\nfunction inherit(child, base, properties) {\n  var baseP = base.prototype;\n  var childP;\n  childP = child.prototype = Object.create(baseP);\n  childP.constructor = child;\n  childP._super = baseP;\n\n  if (properties) {\n    assign$1(childP, properties);\n  }\n}\n\n/**\n * @private\n * simple function bind\n * @param {Function} fn\n * @param {Object} context\n * @returns {Function}\n */\nfunction bindFn(fn, context) {\n  return function boundFn() {\n    return fn.apply(context, arguments);\n  };\n}\n\n/**\n * @private\n * Simple way to create a manager with a default set of recognizers.\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\n\nvar Hammer =\n/*#__PURE__*/\nfunction () {\n  var Hammer =\n  /**\n    * @private\n    * @const {string}\n    */\n  function Hammer(element, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return new Manager(element, _extends({\n      recognizers: [// RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]\n      [RotateRecognizer, {\n        enable: false\n      }], [PinchRecognizer, {\n        enable: false\n      }, ['rotate']], [SwipeRecognizer, {\n        direction: DIRECTION_HORIZONTAL\n      }], [PanRecognizer, {\n        direction: DIRECTION_HORIZONTAL\n      }, ['swipe']], [TapRecognizer], [TapRecognizer, {\n        event: 'doubletap',\n        taps: 2\n      }, ['tap']], [PressRecognizer]]\n    }, options));\n  };\n\n  Hammer.VERSION = \"2.0.15\";\n  Hammer.DIRECTION_ALL = DIRECTION_ALL;\n  Hammer.DIRECTION_DOWN = DIRECTION_DOWN;\n  Hammer.DIRECTION_LEFT = DIRECTION_LEFT;\n  Hammer.DIRECTION_RIGHT = DIRECTION_RIGHT;\n  Hammer.DIRECTION_UP = DIRECTION_UP;\n  Hammer.DIRECTION_HORIZONTAL = DIRECTION_HORIZONTAL;\n  Hammer.DIRECTION_VERTICAL = DIRECTION_VERTICAL;\n  Hammer.DIRECTION_NONE = DIRECTION_NONE;\n  Hammer.DIRECTION_DOWN = DIRECTION_DOWN;\n  Hammer.INPUT_START = INPUT_START;\n  Hammer.INPUT_MOVE = INPUT_MOVE;\n  Hammer.INPUT_END = INPUT_END;\n  Hammer.INPUT_CANCEL = INPUT_CANCEL;\n  Hammer.STATE_POSSIBLE = STATE_POSSIBLE;\n  Hammer.STATE_BEGAN = STATE_BEGAN;\n  Hammer.STATE_CHANGED = STATE_CHANGED;\n  Hammer.STATE_ENDED = STATE_ENDED;\n  Hammer.STATE_RECOGNIZED = STATE_RECOGNIZED;\n  Hammer.STATE_CANCELLED = STATE_CANCELLED;\n  Hammer.STATE_FAILED = STATE_FAILED;\n  Hammer.Manager = Manager;\n  Hammer.Input = Input;\n  Hammer.TouchAction = TouchAction;\n  Hammer.TouchInput = TouchInput;\n  Hammer.MouseInput = MouseInput;\n  Hammer.PointerEventInput = PointerEventInput;\n  Hammer.TouchMouseInput = TouchMouseInput;\n  Hammer.SingleTouchInput = SingleTouchInput;\n  Hammer.Recognizer = Recognizer;\n  Hammer.AttrRecognizer = AttrRecognizer;\n  Hammer.Tap = TapRecognizer;\n  Hammer.Pan = PanRecognizer;\n  Hammer.Swipe = SwipeRecognizer;\n  Hammer.Pinch = PinchRecognizer;\n  Hammer.Rotate = RotateRecognizer;\n  Hammer.Press = PressRecognizer;\n  Hammer.on = addEventListeners;\n  Hammer.off = removeEventListeners;\n  Hammer.each = each;\n  Hammer.merge = merge;\n  Hammer.extend = extend;\n  Hammer.bindFn = bindFn;\n  Hammer.assign = assign$1;\n  Hammer.inherit = inherit;\n  Hammer.bindFn = bindFn;\n  Hammer.prefixed = prefixed;\n  Hammer.toArray = toArray;\n  Hammer.inArray = inArray;\n  Hammer.uniqueArray = uniqueArray;\n  Hammer.splitStr = splitStr;\n  Hammer.boolOrFn = boolOrFn;\n  Hammer.hasParent = hasParent;\n  Hammer.addEventListeners = addEventListeners;\n  Hammer.removeEventListeners = removeEventListeners;\n  Hammer.defaults = defaults;\n  return Hammer;\n}();\n\nexport default Hammer;\nexport { INPUT_START, INPUT_MOVE, INPUT_END, INPUT_CANCEL, STATE_POSSIBLE, STATE_BEGAN, STATE_CHANGED, STATE_ENDED, STATE_RECOGNIZED, STATE_CANCELLED, STATE_FAILED, DIRECTION_NONE, DIRECTION_LEFT, DIRECTION_RIGHT, DIRECTION_UP, DIRECTION_DOWN, DIRECTION_HORIZONTAL, DIRECTION_VERTICAL, DIRECTION_ALL, Manager, Input, TouchAction, TouchInput, MouseInput, PointerEventInput, TouchMouseInput, SingleTouchInput, Recognizer, AttrRecognizer, TapRecognizer as Tap, PanRecognizer as Pan, SwipeRecognizer as Swipe, PinchRecognizer as Pinch, RotateRecognizer as Rotate, PressRecognizer as Press, addEventListeners as on, removeEventListeners as off, each, merge, extend, assign$1 as assign, inherit, bindFn, prefixed, toArray, inArray, uniqueArray, splitStr, boolOrFn, hasParent, addEventListeners, removeEventListeners, defaults };\n//# sourceMappingURL=hammer.esm.js.map\n","// export const DIRECTION_NONE = 1;\n// export const DIRECTION_LEFT = 2;\n// export const DIRECTION_RIGHT = 4;\n// export const DIRECTION_HORIZONTAL = 2 | 4;\n// export const DIRECTION_UP = 8;\n// export const DIRECTION_DOWN = 16;\n// export const DIRECTION_VERTICAL = 8 | 16;\n// export const DIRECTION_ALL = 2 | 4 | 8 | 16;\n\nexport interface ObjectInterface<T = any> {\n\t[key: string]: T;\n}\n\nexport {\n\tDIRECTION_NONE,\n\tDIRECTION_LEFT,\n\tDIRECTION_RIGHT,\n\tDIRECTION_UP,\n\tDIRECTION_DOWN,\n\tDIRECTION_HORIZONTAL,\n\tDIRECTION_VERTICAL,\n\tDIRECTION_ALL,\n} from \"@egjs/hammerjs\";\n\nexport const TRANSFORM = (() => {\n\tif (typeof document === \"undefined\") {\n\t\treturn \"\";\n\t}\n\tconst bodyStyle = (document.head || document.getElementsByTagName(\"head\")[0]).style;\n\tconst target = [\"transform\", \"webkitTransform\", \"msTransform\", \"mozTransform\"];\n\tfor (let i = 0, len = target.length; i < len; i++) {\n\t\tif (target[i] in bodyStyle) {\n\t\t\treturn target[i];\n\t\t}\n\t}\n\treturn \"\";\n})();\n","import Component from \"@egjs/component\";\nimport { AnimationManager } from \"./AnimationManager\";\nimport { EventManager } from \"./EventManager\";\nimport { InterruptManager } from \"./InterruptManager\";\nimport { AxisManager, AxisOption, Axis } from \"./AxisManager\";\nimport { InputObserver } from \"./InputObserver\";\nimport {\n\tTRANSFORM,\n\tDIRECTION_NONE, DIRECTION_LEFT, DIRECTION_RIGHT,\n\tDIRECTION_UP, DIRECTION_DOWN, DIRECTION_HORIZONTAL, DIRECTION_VERTICAL, DIRECTION_ALL\n} from \"./const\";\nimport { IInputType } from \"./inputType/InputType\";\n\nexport interface AxesOption {\n\teasing?: (x: number) => number;\n\tmaximumDuration?: number;\n\tminimumDuration?: number;\n\tdeceleration?: number;\n\tinterruptable?: boolean;\n\tround?: number;\n}\n\n/**\n * @typedef {Object} AxisOption The Axis information. The key of the axis specifies the name to use as the logical virtual coordinate system.\n * @ko 축 정보. 축의 키는 논리적인 가상 좌표계로 사용할 이름을 지정한다.\n * @property {Number[]} [range] The coordinate of range <ko>좌표 범위</ko>\n * @property {Number} [range.0=0] The coordinate of the minimum <ko>최소 좌표</ko>\n * @property {Number} [range.1=0] The coordinate of the maximum <ko>최대 좌표</ko>\n * @property {Number[]} [bounce] The size of bouncing area. The coordinates can exceed the coordinate area as much as the bouncing area based on user action. If the coordinates does not exceed the bouncing area when an element is dragged, the coordinates where bouncing effects are applied are retuned back into the coordinate area<ko>바운스 영역의 크기. 사용자의 동작에 따라 좌표가 좌표 영역을 넘어 바운스 영역의 크기만큼 더 이동할 수 있다. 사용자가 끌어다 놓는 동작을 했을 때 좌표가 바운스 영역에 있으면, 바운스 효과가 적용된 좌표가 다시 좌표 영역 안으로 들어온다</ko>\n * @property {Number} [bounce.0=0] The size of coordinate of the minimum area <ko>최소 좌표 바운스 영역의 크기</ko>\n * @property {Number} [bounce.1=0] The size of coordinate of the maximum area <ko>최대 좌표 바운스 영역의 크기</ko>\n * @property {Boolean[]} [circular] Indicates whether a circular element is available. If it is set to \"true\" and an element is dragged outside the coordinate area, the element will appear on the other side.<ko>순환 여부. 'true'로 설정한 방향의 좌표 영역 밖으로 엘리먼트가 이동하면 반대 방향에서 엘리먼트가 나타난다</ko>\n * @property {Boolean} [circular.0=false] Indicates whether to circulate to the coordinate of the minimum <ko>최소 좌표 방향의 순환 여부</ko>\n * @property {Boolean} [circular.1=false] Indicates whether to circulate to the coordinate of the maximum <ko>최대 좌표 방향의 순환 여부</ko>\n**/\n\n/**\n * @typedef {Object} AxesOption The option object of the eg.Axes module\n * @ko eg.Axes 모듈의 옵션 객체\n * @property {Function} [easing=easing.easeOutCubic] The easing function to apply to an animation <ko>애니메이션에 적용할 easing 함수</ko>\n * @property {Number} [maximumDuration=Infinity] Maximum duration of the animation <ko>가속도에 의해 애니메이션이 동작할 때의 최대 좌표 이동 시간</ko>\n * @property {Number} [minimumDuration=0] Minimum duration of the animation <ko>가속도에 의해 애니메이션이 동작할 때의 최소 좌표 이동 시간</ko>\n * @property {Number} [deceleration=0.0006] Deceleration of the animation where acceleration is manually enabled by user. A higher value indicates shorter running time. <ko>사용자의 동작으로 가속도가 적용된 애니메이션의 감속도. 값이 높을수록 애니메이션 실행 시간이 짧아진다</ko>\n * @property {Boolean} [interruptable=true] Indicates whether an animation is interruptible.<br>- true: It can be paused or stopped by user action or the API.<br>- false: It cannot be paused or stopped by user action or the API while it is running.<ko>진행 중인 애니메이션 중지 가능 여부.<br>- true: 사용자의 동작이나 API로 애니메이션을 중지할 수 있다.<br>- false: 애니메이션이 진행 중일 때는 사용자의 동작이나 API가 적용되지 않는다</ko>\n * @property {Number} [round = null] Rounding unit. For example, 0.1 rounds to 0.1 decimal point(6.1234 => 6.1), 5 rounds to 5 (93 => 95) <br>[Details](https://github.com/naver/egjs-axes/wiki/round-option)<ko>반올림 단위. 예를 들어 0.1 은 소숫점 0.1 까지 반올림(6.1234 => 6.1), 5 는 5 단위로 반올림(93 => 95).<br>[상세내용](https://github.com/naver/egjs-axes/wiki/round-option)</ko>\n**/\n\n/**\n * @class eg.Axes\n * @classdesc A module used to change the information of user action entered by various input devices such as touch screen or mouse into the logical virtual coordinates. You can easily create a UI that responds to user actions.\n * @ko 터치 입력 장치나 마우스와 같은 다양한 입력 장치를 통해 전달 받은 사용자의 동작을 논리적인 가상 좌표로 변경하는 모듈이다. 사용자 동작에 반응하는 UI를 손쉽게 만들수 있다.\n * @extends eg.Component\n *\n * @param {Object.<string, AxisOption>} axis Axis information managed by eg.Axes. The key of the axis specifies the name to use as the logical virtual coordinate system.  <ko>eg.Axes가 관리하는 축 정보. 축의 키는 논리적인 가상 좌표계로 사용할 이름을 지정한다.</ko>\n * @param {AxesOption} [options] The option object of the eg.Axes module<ko>eg.Axes 모듈의 옵션 객체</ko>\n * @param {Object.<string, number>} [startPos] The coordinates to be moved when creating an instance. not triggering change event.<ko>인스턴스 생성시 이동할 좌표, change 이벤트는 발생하지 않음.</ko>\n *\n * @support {\"ie\": \"10+\", \"ch\" : \"latest\", \"ff\" : \"latest\",  \"sf\" : \"latest\", \"edge\" : \"latest\", \"ios\" : \"7+\", \"an\" : \"2.3+ (except 3.x)\"}\n * @example\n *\n * // 1. Initialize eg.Axes\n * const axes = new eg.Axes({\n *\tsomething1: {\n *\t\trange: [0, 150],\n *\t\tbounce: 50\n *\t},\n *\tsomething2: {\n *\t\trange: [0, 200],\n *\t\tbounce: 100\n *\t},\n *\tsomethingN: {\n *\t\trange: [1, 10],\n *\t}\n * }, {\n *  deceleration : 0.0024\n * });\n *\n * // 2. attach event handler\n * axes.on({\n *\t\"hold\" : function(evt) {\n *\t},\n *\t\"release\" : function(evt) {\n *\t},\n *\t\"animationStart\" : function(evt) {\n *\t},\n *\t\"animationEnd\" : function(evt) {\n *\t},\n *\t\"change\" : function(evt) {\n *\t}\n * });\n *\n * // 3. Initialize inputTypes\n * const panInputArea = new eg.Axes.PanInput(\"#area\", {\n *\tscale: [0.5, 1]\n * });\n * const panInputHmove = new eg.Axes.PanInput(\"#hmove\");\n * const panInputVmove = new eg.Axes.PanInput(\"#vmove\");\n * const pinchInputArea = new eg.Axes.PinchInput(\"#area\", {\n *\tscale: 1.5\n * });\n *\n * // 4. Connect eg.Axes and InputTypes\n * // [PanInput] When the mouse or touchscreen is down and moved.\n * // Connect the 'something2' axis to the mouse or touchscreen x position and\n * // connect the 'somethingN' axis to the mouse or touchscreen y position.\n * axes.connect([\"something2\", \"somethingN\"], panInputArea); // or axes.connect(\"something2 somethingN\", panInputArea);\n *\n * // Connect only one 'something1' axis to the mouse or touchscreen x position.\n * axes.connect([\"something1\"], panInputHmove); // or axes.connect(\"something1\", panInputHmove);\n *\n * // Connect only one 'something2' axis to the mouse or touchscreen y position.\n * axes.connect([\"\", \"something2\"], panInputVmove); // or axes.connect(\" something2\", panInputVmove);\n *\n * // [PinchInput] Connect 'something2' axis when two pointers are moving toward (zoom-in) or away from each other (zoom-out).\n * axes.connect(\"something2\", pinchInputArea);\n */\nexport default class Axes extends Component {\n\t/**\n\t * Version info string\n\t * @ko 버전정보 문자열\n\t * @name VERSION\n\t * @static\n\t * @type {String}\n\t * @example\n\t * eg.Axes.VERSION;  // ex) 3.3.3\n\t * @memberof eg.Axes\n\t */\n\tstatic VERSION = \"#__VERSION__#\";\n\t// for tree shaking\n\tstatic PanInput;\n\tstatic PinchInput;\n\tstatic WheelInput;\n\tstatic MoveKeyInput;\n\tstatic RotatePanInput;\n\n\t/**\n\t * @name eg.Axes.TRANSFORM\n\t * @desc Returns the transform attribute with CSS vendor prefixes.\n\t * @ko CSS vendor prefixes를 붙인 transform 속성을 반환한다.\n\t *\n\t * @constant\n\t * @type {String}\n\t * @example\n\t * eg.Axes.TRANSFORM; // \"transform\" or \"webkitTransform\"\n\t */\n\tstatic TRANSFORM = TRANSFORM;\n\t/**\n\t * @name eg.Axes.DIRECTION_NONE\n\t * @constant\n\t * @type {Number}\n\t */\n\tstatic DIRECTION_NONE = DIRECTION_NONE;\n\t/**\n\t * @name eg.Axes.DIRECTION_LEFT\n\t * @constant\n\t * @type {Number}\n\t*/\n\tstatic DIRECTION_LEFT = DIRECTION_LEFT;\n\t/**\n\t * @name eg.Axes.DIRECTION_RIGHT\n\t * @constant\n\t * @type {Number}\n\t*/\n\tstatic DIRECTION_RIGHT = DIRECTION_RIGHT;\n\t/**\n\t * @name eg.Axes.DIRECTION_UP\n\t * @constant\n\t * @type {Number}\n\t*/\n\tstatic DIRECTION_UP = DIRECTION_UP;\n\t/**\n\t * @name eg.Axes.DIRECTION_DOWN\n\t * @constant\n\t * @type {Number}\n\t*/\n\tstatic DIRECTION_DOWN = DIRECTION_DOWN;\n\t/**\n\t * @name eg.Axes.DIRECTION_HORIZONTAL\n\t * @constant\n\t * @type {Number}\n\t*/\n\tstatic DIRECTION_HORIZONTAL = DIRECTION_HORIZONTAL;\n\t/**\n\t * @name eg.Axes.DIRECTION_VERTICAL\n\t * @constant\n\t * @type {Number}\n\t*/\n\tstatic DIRECTION_VERTICAL = DIRECTION_VERTICAL;\n\t/**\n\t * @name eg.Axes.DIRECTION_ALL\n\t * @constant\n\t * @type {Number}\n\t*/\n\tpublic static DIRECTION_ALL = DIRECTION_ALL;\n\n\tpublic options: AxesOption;\n\tpublic em: EventManager;\n\tpublic axm: AxisManager;\n\tpublic itm: InterruptManager;\n\tpublic am: AnimationManager;\n\tpublic io: InputObserver;\n\tprivate _inputs: IInputType[] = [];\n\n\tconstructor(public axis: { [key: string]: AxisOption } = {}, options: AxesOption = {}, startPos?: Axis) {\n\t\tsuper();\n\t\tthis.options = {\n\t\t\t...{\n\t\t\t\teasing: function easeOutCubic(x) {\n\t\t\t\t\treturn 1 - Math.pow(1 - x, 3);\n\t\t\t\t},\n\t\t\t\tinterruptable: true,\n\t\t\t\tmaximumDuration: Infinity,\n\t\t\t\tminimumDuration: 0,\n\t\t\t\tdeceleration: 0.0006,\n\t\t\t\tround: null,\n\t\t\t}, ...options,\n\t\t};\n\n\t\tthis.itm = new InterruptManager(this.options);\n\t\tthis.axm = new AxisManager(this.axis, this.options);\n\t\tthis.em = new EventManager(this);\n\t\tthis.am = new AnimationManager(this);\n\t\tthis.io = new InputObserver(this);\n\t\tthis.em.setAnimationManager(this.am);\n\t\tstartPos && this.em.triggerChange(startPos);\n\t}\n\t/**\n\t * Connect the axis of eg.Axes to the inputType.\n\t * @ko eg.Axes의 축과 inputType을 연결한다\n\t * @method eg.Axes#connect\n\t * @param {(String[]|String)} axes The name of the axis to associate with inputType <ko>inputType과 연결할 축의 이름</ko>\n\t * @param {Object} inputType The inputType instance to associate with the axis of eg.Axes <ko>eg.Axes의 축과 연결할 inputType 인스턴스<ko>\n\t * @return {eg.Axes} An instance of a module itself <ko>모듈 자신의 인스턴스</ko>\n\t * @example\n\t * const axes = new eg.Axes({\n\t *   \"x\": {\n\t *      range: [0, 100]\n\t *   },\n\t *   \"xOther\": {\n\t *      range: [-100, 100]\n\t *   }\n\t * });\n\t *\n\t * axes.connect(\"x\", new eg.Axes.PanInput(\"#area1\"))\n\t *    .connect(\"x xOther\", new eg.Axes.PanInput(\"#area2\"))\n\t *    .connect(\" xOther\", new eg.Axes.PanInput(\"#area3\"))\n\t *    .connect([\"x\"], new eg.Axes.PanInput(\"#area4\"))\n\t *    .connect([\"xOther\", \"x\"], new eg.Axes.PanInput(\"#area5\"))\n\t *    .connect([\"\", \"xOther\"], new eg.Axes.PanInput(\"#area6\"));\n\t */\n\tconnect(axes: string[] | string, inputType: IInputType) {\n\t\tlet mapped;\n\t\tif (typeof axes === \"string\") {\n\t\t\tmapped = axes.split(\" \");\n\t\t} else {\n\t\t\tmapped = axes.concat();\n\t\t}\n\n\t\t// check same instance\n\t\tif (~this._inputs.indexOf(inputType)) {\n\t\t\tthis.disconnect(inputType);\n\t\t}\n\n\t\t// check same element in hammer type for share\n\t\tif (\"hammer\" in inputType) {\n\t\t\tconst targets = this._inputs.filter(v => v.hammer && v.element === inputType.element);\n\t\t\tif (targets.length) {\n\t\t\t\tinputType.hammer = targets[0].hammer;\n\t\t\t}\n\t\t}\n\t\tinputType.mapAxes(mapped);\n\t\tinputType.connect(this.io);\n\t\tthis._inputs.push(inputType);\n\t\treturn this;\n\t}\n\t/**\n\t * Disconnect the axis of eg.Axes from the inputType.\n\t * @ko eg.Axes의 축과 inputType의 연결을 끊는다.\n\t * @method eg.Axes#disconnect\n\t * @param {Object} [inputType] An inputType instance associated with the axis of eg.Axes <ko>eg.Axes의 축과 연결한 inputType 인스턴스<ko>\n\t * @return {eg.Axes} An instance of a module itself <ko>모듈 자신의 인스턴스</ko>\n\t * @example\n\t * const axes = new eg.Axes({\n\t *   \"x\": {\n\t *      range: [0, 100]\n\t *   },\n\t *   \"xOther\": {\n\t *      range: [-100, 100]\n\t *   }\n\t * });\n\t *\n\t * const input1 = new eg.Axes.PanInput(\"#area1\");\n\t * const input2 = new eg.Axes.PanInput(\"#area2\");\n\t * const input3 = new eg.Axes.PanInput(\"#area3\");\n\t *\n\t * axes.connect(\"x\", input1);\n\t *    .connect(\"x xOther\", input2)\n\t *    .connect([\"xOther\", \"x\"], input3);\n\t *\n\t * axes.disconnect(input1); // disconnects input1\n\t * axes.disconnect(); // disconnects all of them\n\t */\n\tdisconnect(inputType?: IInputType) {\n\t\tif (inputType) {\n\t\t\tconst index = this._inputs.indexOf(inputType);\n\n\t\t\tif (index >= 0) {\n\t\t\t\tthis._inputs[index].disconnect();\n\t\t\t\tthis._inputs.splice(index, 1);\n\t\t\t}\n\t\t} else {\n\t\t\tthis._inputs.forEach(v => v.disconnect());\n\t\t\tthis._inputs = [];\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the current position of the coordinates.\n\t * @ko 좌표의 현재 위치를 반환한다\n\t * @method eg.Axes#get\n\t * @param {Object} [axes] The names of the axis <ko>축 이름들</ko>\n\t * @return {Object.<string, number>} Axis coordinate information <ko>축 좌표 정보</ko>\n\t * @example\n\t * const axes = new eg.Axes({\n\t *   \"x\": {\n\t *      range: [0, 100]\n\t *   },\n\t *   \"xOther\": {\n\t *      range: [-100, 100]\n\t *   },\n\t * \t \"zoom\": {\n\t *      range: [50, 30]\n\t *   }\n\t * });\n\t *\n\t * axes.get(); // {\"x\": 0, \"xOther\": -100, \"zoom\": 50}\n\t * axes.get([\"x\", \"zoom\"]); // {\"x\": 0, \"zoom\": 50}\n\t */\n\tget(axes?: string[]) {\n\t\treturn this.axm.get(axes);\n\t}\n\n\t/**\n\t * Moves an axis to specific coordinates.\n\t * @ko 좌표를 이동한다.\n\t * @method eg.Axes#setTo\n\t * @param {Object.<string, number>} pos The coordinate to move to <ko>이동할 좌표</ko>\n\t * @param {Number} [duration=0] Duration of the animation (unit: ms) <ko>애니메이션 진행 시간(단위: ms)</ko>\n\t * @return {eg.Axes} An instance of a module itself <ko>모듈 자신의 인스턴스</ko>\n\t * @example\n\t * const axes = new eg.Axes({\n\t *   \"x\": {\n\t *      range: [0, 100]\n\t *   },\n\t *   \"xOther\": {\n\t *      range: [-100, 100]\n\t *   },\n\t * \t \"zoom\": {\n\t *      range: [50, 30]\n\t *   }\n\t * });\n\t *\n\t * axes.setTo({\"x\": 30, \"zoom\": 60});\n\t * axes.get(); // {\"x\": 30, \"xOther\": -100, \"zoom\": 60}\n\t *\n\t * axes.setTo({\"x\": 100, \"xOther\": 60}, 1000); // animatation\n\t *\n\t * // after 1000 ms\n\t * axes.get(); // {\"x\": 100, \"xOther\": 60, \"zoom\": 60}\n\t */\n\tsetTo(pos: Axis, duration = 0) {\n\t\tthis.am.setTo(pos, duration);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Moves an axis from the current coordinates to specific coordinates.\n\t * @ko 현재 좌표를 기준으로 좌표를 이동한다.\n\t * @method eg.Axes#setBy\n\t * @param {Object.<string, number>} pos The coordinate to move to <ko>이동할 좌표</ko>\n\t * @param {Number} [duration=0] Duration of the animation (unit: ms) <ko>애니메이션 진행 시간(단위: ms)</ko>\n\t * @return {eg.Axes} An instance of a module itself <ko>모듈 자신의 인스턴스</ko>\n\t * @example\n\t * const axes = new eg.Axes({\n\t *   \"x\": {\n\t *      range: [0, 100]\n\t *   },\n\t *   \"xOther\": {\n\t *      range: [-100, 100]\n\t *   },\n\t * \t \"zoom\": {\n\t *      range: [50, 30]\n\t *   }\n\t * });\n\t *\n\t * axes.setBy({\"x\": 30, \"zoom\": 10});\n\t * axes.get(); // {\"x\": 30, \"xOther\": -100, \"zoom\": 60}\n\t *\n\t * axes.setBy({\"x\": 70, \"xOther\": 60}, 1000); // animatation\n\t *\n\t * // after 1000 ms\n\t * axes.get(); // {\"x\": 100, \"xOther\": -40, \"zoom\": 60}\n\t */\n\tsetBy(pos: Axis, duration = 0) {\n\t\tthis.am.setBy(pos, duration);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns whether there is a coordinate in the bounce area of ​​the target axis.\n\t * @ko 대상 축 중 bounce영역에 좌표가 존재하는지를 반환한다\n\t * @method eg.Axes#isBounceArea\n\t * @param {Object} [axes] The names of the axis <ko>축 이름들</ko>\n\t * @return {Boolen} Whether the bounce area exists. <ko>bounce 영역 존재 여부</ko>\n\t * @example\n\t * const axes = new eg.Axes({\n\t *   \"x\": {\n\t *      range: [0, 100]\n\t *   },\n\t *   \"xOther\": {\n\t *      range: [-100, 100]\n\t *   },\n\t * \t \"zoom\": {\n\t *      range: [50, 30]\n\t *   }\n\t * });\n\t *\n\t * axes.isBounceArea([\"x\"]);\n\t * axes.isBounceArea([\"x\", \"zoom\"]);\n\t * axes.isBounceArea();\n\t */\n\tisBounceArea(axes?: string[]) {\n\t\treturn this.axm.isOutside(axes);\n\t}\n\n\t/**\n\t* Destroys properties, and events used in a module and disconnect all connections to inputTypes.\n\t* @ko 모듈에 사용한 속성, 이벤트를 해제한다. 모든 inputType과의 연결을 끊는다.\n\t* @method eg.Axes#destroy\n\t*/\n\tdestroy() {\n\t\tthis.disconnect();\n\t\tthis.em.destroy();\n\t}\n}\n","import {Manager, PointerEventInput, TouchMouseInput, TouchInput, MouseInput} from \"@egjs/hammerjs\";\nimport { Axis } from \"../AxisManager\";\nimport { AxesOption } from \"../Axes\";\nimport { window } from \"../browser\";\n\nexport interface IInputType {\n\taxes: string[];\n\telement: HTMLElement;\n\thammer?;\n\tmapAxes(axes: string[]);\n\tconnect(observer: IInputTypeObserver): IInputType;\n\tdisconnect();\n\tdestroy();\n\tenable?();\n\tdisable?();\n\tisEnable?(): boolean;\n}\n\nexport interface IInputTypeObserver {\n\toptions: AxesOption;\n\tget(inputType: IInputType): Axis;\n\tchange(inputType: IInputType, event, offset: Axis);\n\thold(inputType: IInputType, event);\n\trelease(inputType: IInputType, event, offset: Axis, duration?: number);\n}\n\nexport const SUPPORT_POINTER_EVENTS = \"PointerEvent\" in window || \"MSPointerEvent\" in window;\nexport const SUPPORT_TOUCH = \"ontouchstart\" in window;\nexport const UNIQUEKEY = \"_EGJS_AXES_INPUTTYPE_\";\nexport function toAxis(source: string[], offset: number[]): Axis {\n\treturn offset.reduce((acc, v, i) => {\n\t\tif (source[i]) {\n\t\t\tacc[source[i]] = v;\n\t\t}\n\t\treturn acc;\n\t}, {});\n}\nexport function createHammer(element: HTMLElement, options) {\n\ttry {\n\t\t// create Hammer\n\t\treturn new Manager(element, { ...options });\n\t} catch (e) {\n\t\treturn null;\n\t}\n}\nexport function convertInputType(inputType: string[] = []): any {\n\tlet hasTouch = false;\n\tlet hasMouse = false;\n\tlet hasPointer = false;\n\n\tinputType.forEach(v => {\n\t\tswitch (v) {\n\t\t\tcase \"mouse\": hasMouse = true; break;\n\t\t\tcase \"touch\": hasTouch = SUPPORT_TOUCH; break;\n\t\t\tcase \"pointer\": hasPointer = SUPPORT_POINTER_EVENTS;\n\t\t\t// no default\n\t\t}\n\t});\n\tif (hasPointer) {\n\t\treturn PointerEventInput;\n\t} else if (hasTouch && hasMouse) {\n\t\treturn TouchMouseInput;\n\t} else if (hasTouch) {\n\t\treturn TouchInput;\n\t} else if (hasMouse) {\n\t\treturn MouseInput;\n\t}\n\treturn null;\n}\n","import Hammer, { DIRECTION_ALL, DIRECTION_HORIZONTAL, DIRECTION_NONE, DIRECTION_VERTICAL, Manager, Pan } from \"@egjs/hammerjs\";\nimport { $ } from \"../utils\";\nimport { convertInputType, createHammer, IInputType, IInputTypeObserver, toAxis, UNIQUEKEY } from \"./InputType\";\nimport { ObjectInterface } from \"../const\";\n\nexport interface PanInputOption {\n\tinputType?: string[];\n\tscale?: number[];\n\tthresholdAngle?: number;\n\tthreshold?: number;\n\thammerManagerOptions?: ObjectInterface;\n}\n\n// get user's direction\nexport function getDirectionByAngle(angle: number, thresholdAngle: number) {\n\tif (thresholdAngle < 0 || thresholdAngle > 90) {\n\t\treturn DIRECTION_NONE;\n\t}\n\tconst toAngle = Math.abs(angle);\n\n\treturn toAngle > thresholdAngle && toAngle < 180 - thresholdAngle ?\n\t\tDIRECTION_VERTICAL : DIRECTION_HORIZONTAL;\n}\n\nexport function getNextOffset(speeds: number[], deceleration: number) {\n\tconst normalSpeed = Math.sqrt(\n\t\tspeeds[0] * speeds[0] + speeds[1] * speeds[1],\n\t);\n\tconst duration = Math.abs(normalSpeed / -deceleration);\n\treturn [\n\t\tspeeds[0] / 2 * duration,\n\t\tspeeds[1] / 2 * duration,\n\t];\n}\n\nexport function useDirection(\n\tcheckType,\n\tdirection,\n\tuserDirection?): boolean {\n\tif (userDirection) {\n\t\treturn !!((direction === DIRECTION_ALL) ||\n\t\t\t((direction & checkType) && (userDirection & checkType)));\n\t} else {\n\t\treturn !!(direction & checkType);\n\t}\n}\n\n/**\n * @typedef {Object} PanInputOption The option object of the eg.Axes.PanInput module.\n * @ko eg.Axes.PanInput 모듈의 옵션 객체\n * @property {String[]} [inputType=[\"touch\",\"mouse\", \"pointer\"]] Types of input devices.<br>- touch: Touch screen<br>- mouse: Mouse <ko>입력 장치 종류.<br>- touch: 터치 입력 장치<br>- mouse: 마우스</ko>\n * @property {Number[]} [scale] Coordinate scale that a user can move<ko>사용자의 동작으로 이동하는 좌표의 배율</ko>\n * @property {Number} [scale.0=1] horizontal axis scale <ko>수평축 배율</ko>\n * @property {Number} [scale.1=1] vertical axis scale <ko>수직축 배율</ko>\n * @property {Number} [thresholdAngle=45] The threshold value that determines whether user action is horizontal or vertical (0~90) <ko>사용자의 동작이 가로 방향인지 세로 방향인지 판단하는 기준 각도(0~90)</ko>\n * @property {Number} [threshold=0] Minimal pan distance required before recognizing <ko>사용자의 Pan 동작을 인식하기 위해산 최소한의 거리</ko>\n * @property {Object} [hammerManagerOptions={cssProps: {userSelect: \"none\",touchSelect: \"none\",touchCallout: \"none\",userDrag: \"none\"}] Options of Hammer.Manager <ko>Hammer.Manager의 옵션</ko>\n**/\n/**\n * @class eg.Axes.PanInput\n * @classdesc A module that passes the amount of change to eg.Axes when the mouse or touchscreen is down and moved. use less than two axes.\n * @ko 마우스나 터치 스크린을 누르고 움직일때의 변화량을 eg.Axes에 전달하는 모듈. 두개 이하의 축을 사용한다.\n *\n * @example\n * const pan = new eg.Axes.PanInput(\"#area\", {\n * \t\tinputType: [\"touch\"],\n * \t\tscale: [1, 1.3],\n * });\n *\n * // Connect the 'something2' axis to the mouse or touchscreen x position when the mouse or touchscreen is down and moved.\n * // Connect the 'somethingN' axis to the mouse or touchscreen y position when the mouse or touchscreen is down and moved.\n * axes.connect([\"something2\", \"somethingN\"], pan); // or axes.connect(\"something2 somethingN\", pan);\n *\n * // Connect only one 'something1' axis to the mouse or touchscreen x position when the mouse or touchscreen is down and moved.\n * axes.connect([\"something1\"], pan); // or axes.connect(\"something1\", pan);\n *\n * // Connect only one 'something2' axis to the mouse or touchscreen y position when the mouse or touchscreen is down and moved.\n * axes.connect([\"\", \"something2\"], pan); // or axes.connect(\" something2\", pan);\n *\n * @param {HTMLElement|String|jQuery} element An element to use the eg.Axes.PanInput module <ko>eg.Axes.PanInput 모듈을 사용할 엘리먼트</ko>\n * @param {PanInputOption} [options] The option object of the eg.Axes.PanInput module<ko>eg.Axes.PanInput 모듈의 옵션 객체</ko>\n */\nexport class PanInput implements IInputType {\n\toptions: PanInputOption;\n\taxes: string[] = [];\n\thammer = null;\n\telement: HTMLElement = null;\n\tprotected observer: IInputTypeObserver;\n\tprotected _direction;\n\tprivate panRecognizer = null;\n\n\tconstructor(el: string | HTMLElement, options?: PanInputOption) {\n\t\t/**\n\t\t * Hammer helps you add support for touch gestures to your page\n\t\t *\n\t\t * @external Hammer\n\t\t * @see {@link http://hammerjs.github.io|Hammer.JS}\n\t\t * @see {@link http://hammerjs.github.io/jsdoc/Hammer.html|Hammer.JS API documents}\n\t\t * @see Hammer.JS applies specific CSS properties by {@link http://hammerjs.github.io/jsdoc/Hammer.defaults.cssProps.html|default} when creating an instance. The eg.Axes module removes all default CSS properties provided by Hammer.JS\n\t\t */\n\t\tif (typeof Manager === \"undefined\") {\n\t\t\tthrow new Error(`The Hammerjs must be loaded before eg.Axes.PanInput.\\nhttp://hammerjs.github.io/`);\n\t\t}\n\t\tthis.element = $(el);\n\t\tthis.options = {\n\t\t\t...{\n\t\t\t\tinputType: [\"touch\", \"mouse\", \"pointer\"],\n\t\t\t\tscale: [1, 1],\n\t\t\t\tthresholdAngle: 45,\n\t\t\t\tthreshold: 0,\n\t\t\t\thammerManagerOptions: {\n\t\t\t\t\t// css properties were removed due to usablility issue\n\t\t\t\t\t// http://hammerjs.github.io/jsdoc/Hammer.defaults.cssProps.html\n\t\t\t\t\tcssProps: {\n\t\t\t\t\t\tuserSelect: \"none\",\n\t\t\t\t\t\ttouchSelect: \"none\",\n\t\t\t\t\t\ttouchCallout: \"none\",\n\t\t\t\t\t\tuserDrag: \"none\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}, ...options,\n\t\t};\n\t\tthis.onHammerInput = this.onHammerInput.bind(this);\n\t\tthis.onPanmove = this.onPanmove.bind(this);\n\t\tthis.onPanend = this.onPanend.bind(this);\n\t}\n\n\tpublic mapAxes(axes: string[]) {\n\t\tconst useHorizontal = !!axes[0];\n\t\tconst useVertical = !!axes[1];\n\t\tif (useHorizontal && useVertical) {\n\t\t\tthis._direction = DIRECTION_ALL;\n\t\t} else if (useHorizontal) {\n\t\t\tthis._direction = DIRECTION_HORIZONTAL;\n\t\t} else if (useVertical) {\n\t\t\tthis._direction = DIRECTION_VERTICAL;\n\t\t} else {\n\t\t\tthis._direction = DIRECTION_NONE;\n\t\t}\n\t\tthis.axes = axes;\n\t}\n\n\tpublic connect(observer: IInputTypeObserver): IInputType {\n\t\tconst hammerOption = {\n\t\t\tdirection: this._direction,\n\t\t\tthreshold: this.options.threshold,\n\t\t};\n\t\tif (this.hammer) { // for sharing hammer instance.\n\t\t\t// hammer remove previous PanRecognizer.\n\t\t\tthis.removeRecognizer();\n\t\t\tthis.dettachEvent();\n\t\t} else {\n\t\t\tlet keyValue: string = this.element[UNIQUEKEY];\n\t\t\tif (!keyValue) {\n\t\t\t\tkeyValue = String(Math.round(Math.random() * new Date().getTime()));\n\t\t\t}\n\t\t\tconst inputClass = convertInputType(this.options.inputType);\n\t\t\tif (!inputClass) {\n\t\t\t\tthrow new Error(\"Wrong inputType parameter!\");\n\t\t\t}\n\t\t\tthis.hammer = createHammer(this.element, {\n\t\t\t\t...{\n\t\t\t\t\tinputClass,\n\t\t\t\t}, ... this.options.hammerManagerOptions,\n\t\t\t});\n\t\t\tthis.element[UNIQUEKEY] = keyValue;\n\t\t}\n\t\tthis.panRecognizer = new Pan(hammerOption);\n\n\t\tthis.hammer.add(this.panRecognizer);\n\t\tthis.attachEvent(observer);\n\t\treturn this;\n\t}\n\n\tpublic disconnect() {\n\t\tthis.removeRecognizer();\n\t\tif (this.hammer) {\n\t\t\tthis.dettachEvent();\n\t\t}\n\t\tthis._direction = DIRECTION_NONE;\n\t\treturn this;\n\t}\n\n\t/**\n\t* Destroys elements, properties, and events used in a module.\n\t* @ko 모듈에 사용한 엘리먼트와 속성, 이벤트를 해제한다.\n\t* @method eg.Axes.PanInput#destroy\n\t*/\n\tpublic destroy() {\n\t\tthis.disconnect();\n\t\tif (this.hammer && this.hammer.recognizers.length === 0) {\n\t\t\tthis.hammer.destroy();\n\t\t}\n\t\tdelete this.element[UNIQUEKEY];\n\t\tthis.element = null;\n\t\tthis.hammer = null;\n\t}\n\n\t/**\n\t * Enables input devices\n\t * @ko 입력 장치를 사용할 수 있게 한다\n\t * @method eg.Axes.PanInput#enable\n\t * @return {eg.Axes.PanInput} An instance of a module itself <ko>모듈 자신의 인스턴스</ko>\n\t */\n\tpublic enable() {\n\t\tthis.hammer && (this.hammer.get(\"pan\").options.enable = true);\n\t\treturn this;\n\t}\n\t/**\n\t * Disables input devices\n\t * @ko 입력 장치를 사용할 수 없게 한다.\n\t * @method eg.Axes.PanInput#disable\n\t * @return {eg.Axes.PanInput} An instance of a module itself <ko>모듈 자신의 인스턴스</ko>\n\t */\n\tpublic disable() {\n\t\tthis.hammer && (this.hammer.get(\"pan\").options.enable = false);\n\t\treturn this;\n\t}\n\t/**\n\t * Returns whether to use an input device\n\t * @ko 입력 장치를 사용 여부를 반환한다.\n\t * @method eg.Axes.PanInput#isEnable\n\t * @return {Boolean} Whether to use an input device <ko>입력장치 사용여부</ko>\n\t */\n\tpublic isEnable() {\n\t\treturn !!(this.hammer && this.hammer.get(\"pan\").options.enable);\n\t}\n\n\tprivate removeRecognizer() {\n\t\tif (this.hammer && this.panRecognizer) {\n\t\t\tthis.hammer.remove(this.panRecognizer);\n\t\t\tthis.panRecognizer = null;\n\t\t}\n\t}\n\n\tprotected onHammerInput(event) {\n\t\tif (this.isEnable()) {\n\t\t\tif (event.isFirst) {\n\t\t\t\tthis.observer.hold(this, event);\n\t\t\t} else if (event.isFinal) {\n\t\t\t\tthis.onPanend(event);\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected onPanmove(event) {\n\t\tconst userDirection = getDirectionByAngle(\n\t\t\tevent.angle, this.options.thresholdAngle);\n\n\t\t// not support offset properties in Hammerjs - start\n\t\tconst prevInput = this.hammer.session.prevInput;\n\n\t\t/* eslint-disable no-param-reassign */\n\t\tif (prevInput) {\n\t\t\tevent.offsetX = event.deltaX - prevInput.deltaX;\n\t\t\tevent.offsetY = event.deltaY - prevInput.deltaY;\n\t\t} else {\n\t\t\tevent.offsetX = 0;\n\t\t\tevent.offsetY = 0;\n\t\t}\n\t\tconst offset: number[] = this.getOffset(\n\t\t\t[event.offsetX, event.offsetY],\n\t\t\t[\n\t\t\t\tuseDirection(DIRECTION_HORIZONTAL, this._direction, userDirection),\n\t\t\t\tuseDirection(DIRECTION_VERTICAL, this._direction, userDirection),\n\t\t\t]);\n\t\tconst prevent = offset.some(v => v !== 0);\n\t\tif (prevent) {\n\t\t\tevent.srcEvent.preventDefault();\n\t\t\tevent.srcEvent.stopPropagation();\n\t\t}\n\t\tevent.preventSystemEvent = prevent;\n\t\tprevent && this.observer.change(this, event, toAxis(this.axes, offset));\n\t}\n\n\tprotected onPanend(event) {\n\t\tlet offset: number[] = this.getOffset(\n\t\t\t[\n\t\t\t\tMath.abs(event.velocityX) * (event.deltaX < 0 ? -1 : 1),\n\t\t\t\tMath.abs(event.velocityY) * (event.deltaY < 0 ? -1 : 1),\n\t\t\t],\n\t\t\t[\n\t\t\t\tuseDirection(DIRECTION_HORIZONTAL, this._direction),\n\t\t\t\tuseDirection(DIRECTION_VERTICAL, this._direction),\n\t\t\t]);\n\t\toffset = getNextOffset(offset, this.observer.options.deceleration);\n\t\tthis.observer.release(this, event, toAxis(this.axes, offset));\n\t}\n\n\tprivate attachEvent(observer: IInputTypeObserver) {\n\t\tthis.observer = observer;\n\t\tthis.hammer.on(\"hammer.input\", this.onHammerInput)\n\t\t\t.on(\"panstart panmove\", this.onPanmove);\n\t}\n\n\tprivate dettachEvent() {\n\t\tthis.hammer.off(\"hammer.input\", this.onHammerInput)\n\t\t\t.off(\"panstart panmove\", this.onPanmove);\n\t\tthis.observer = null;\n\t}\n\n\tprivate getOffset(\n\t\tproperties: number[],\n\t\tdirection: boolean[]): number[] {\n\t\tconst offset: number[] = [0, 0];\n\t\tconst scale = this.options.scale;\n\n\t\tif (direction[0]) {\n\t\t\toffset[0] = (properties[0] * scale[0]);\n\t\t}\n\t\tif (direction[1]) {\n\t\t\toffset[1] = (properties[1] * scale[1]);\n\t\t}\n\t\treturn offset;\n\t}\n}\n","import Axes from \"../Axes\";\nimport { toAxis } from \"./InputType\";\nimport { PanInput, PanInputOption } from \"./PanInput\";\n\n/**\n * @class eg.Axes.RotatePanInput\n * @classdesc A module that passes the angle moved by touch to Axes and uses one axis of rotation.<br>[Details](https://github.com/naver/egjs-axes/wiki/RotatePanInput)\n * @ko 터치에 의해 움직인 각도를 Axes 에 전달하며 1개의 회전축만 사용한다.<br>[상세내용](https://github.com/naver/egjs-axes/wiki/RotatePanInput-%7C-%ED%95%9C%EA%B5%AD%EC%96%B4)\n *\n * @example\n * const input = new eg.Axes.RotatePanInput(\"#area\");\n *\n * var axes = new eg.Axes({\n *\t// property name('angle') could be anything you want (eg. x, y, z...)\n * \tangle: {\n * \t\trange: [-180, 180] // from -180deg to 180deg\n * \t}\n * });\n *\n * axes.connect(\"angle\", input)\n *\n * @param {HTMLElement|String|jQuery} element An element to use the eg.Axes.RotatePanInput module <ko>eg.Axes.RotatePanInput 모듈을 사용할 엘리먼트</ko>\n * @param {PanInputOption} [options] The option object of the eg.Axes.PanInput module<ko>eg.Axes.PanInput 모듈의 옵션 객체</ko>\n * @extends eg.Axes.PanInput\n */\nexport class RotatePanInput extends PanInput {\n\tprivate rotateOrigin: number[];\n\tprivate prevAngle: number;\n\tprivate prevQuadrant: number;\n\tprivate lastDiff: number;\n\tprivate coefficientForDistanceToAngle: number;\n\n\tconstructor(el: string | HTMLElement, options?: PanInputOption) {\n\t\tsuper(el, options);\n\n\t\tthis.prevQuadrant = null;\n\t\tthis.lastDiff = 0;\n\t}\n\n\tmapAxes(axes: string[]) {\n\t\tthis._direction = Axes.DIRECTION_ALL;\n\t\tthis.axes = axes;\n\t}\n\n\tonHammerInput(event) {\n\t\tif (this.isEnable()) {\n\t\t\tif (event.isFirst) {\n\t\t\t\tthis.observer.hold(this, event);\n\t\t\t\tthis.onPanstart(event);\n\t\t\t} else if (event.isFinal) {\n\t\t\t\tthis.onPanend(event);\n\t\t\t}\n\t\t}\n\t}\n\n\tonPanstart(event) {\n\t\tconst rect = this.element.getBoundingClientRect();\n\n\t\t/**\n\t\t * Responsive\n\t\t */\n\t\t// TODO: how to do if element is ellipse not circle.\n\t\tthis.coefficientForDistanceToAngle = 360 / (rect.width * Math.PI); // from 2*pi*r * x / 360\n\t\t// TODO: provide a way to set origin like https://developer.mozilla.org/en-US/docs/Web/CSS/transform-origin\n\t\tthis.rotateOrigin = [rect.left + (rect.width - 1) / 2, rect.top + (rect.height - 1) / 2];\n\n\t\t// init angle.\n\t\tthis.prevAngle = null;\n\n\t\tthis.triggerChange(event);\n\t}\n\n\tonPanmove(event) {\n\t\tthis.triggerChange(event);\n\t}\n\n\tonPanend(event) {\n\t\tthis.triggerChange(event);\n\t\tthis.triggerAnimation(event);\n\t}\n\n\tprivate triggerChange(event) {\n\t\tconst angle = this.getAngle(event.center.x, event.center.y);\n\t\tconst quadrant = this.getQuadrant(event.center.x, event.center.y);\n\t\tconst diff = this.getDifference(this.prevAngle, angle, this.prevQuadrant, quadrant);\n\n\t\tthis.prevAngle = angle;\n\t\tthis.prevQuadrant = quadrant;\n\n\t\tif (diff === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.lastDiff = diff;\n\t\tthis.observer.change(this, event, toAxis(this.axes, [-diff])); // minus for clockwise\n\t}\n\n\tprivate triggerAnimation(event) {\n\t\tconst vx = event.velocityX;\n\t\tconst vy = event.velocityY;\n\t\tconst velocity = Math.sqrt(vx * vx + vy * vy) * (this.lastDiff > 0 ? -1 : 1); // clockwise\n\t\tconst duration = Math.abs(velocity / -this.observer.options.deceleration);\n\t\tconst distance = velocity / 2 * duration;\n\n\t\tthis.observer.release(this, event, toAxis(this.axes, [distance * this.coefficientForDistanceToAngle]));\n\t}\n\n\tprivate getDifference(prevAngle: number, angle: number, prevQuadrant: number, quadrant: number) {\n\t\tlet diff: number;\n\n\t\tif (prevAngle === null) {\n\t\t\tdiff = 0;\n\t\t} else if (prevQuadrant === 1 && quadrant === 4) {\n\t\t\tdiff = -prevAngle - (360 - angle);\n\t\t} else if (prevQuadrant === 4 && quadrant === 1) {\n\t\t\tdiff = (360 - prevAngle) + angle;\n\t\t} else {\n\t\t\tdiff = angle - prevAngle;\n\t\t}\n\n\t\treturn diff;\n\t}\n\n\tprivate getPosFromOrigin(posX: number, posY: number) {\n\t\treturn {\n\t\t\tx: posX - this.rotateOrigin[0],\n\t\t\ty: this.rotateOrigin[1] - posY,\n\t\t};\n\t}\n\n\tprivate getAngle(posX: number, posY: number) {\n\t\tconst { x, y } = this.getPosFromOrigin(posX, posY);\n\n\t\tconst angle = Math.atan2(y, x) * 180 / Math.PI;\n\t\t// console.log(angle, x, y);\n\t\treturn angle < 0 ? 360 + angle : angle;\n\t}\n\n\t/**\n\t * Quadrant\n\t *       y(+)\n\t *       |\n\t *   2   |    1\n\t * --------------->x(+)\n\t *   3   |    4\n\t *       |\n\t */\n\tprivate getQuadrant(posX: number, posY: number) {\n\t\tconst { x, y } = this.getPosFromOrigin(posX, posY);\n\t\tlet q = 0;\n\n\t\tif (x >= 0 && y >= 0) {\n\t\t\tq = 1;\n\t\t} else if (x < 0 && y >= 0) {\n\t\t\tq = 2;\n\t\t} else if (x < 0 && y < 0) {\n\t\t\tq = 3;\n\t\t} else if (x >= 0 && y < 0) {\n\t\t\tq = 4;\n\t\t}\n\t\treturn q;\n\t}\n}\n","import { InputObserver } from \"./../InputObserver\";\nimport { Manager, Pinch } from \"@egjs/hammerjs\";\nimport { $ } from \"../utils\";\nimport { UNIQUEKEY, toAxis, convertInputType, createHammer, IInputType, IInputTypeObserver } from \"./InputType\";\nimport { Axis } from \"../AxisManager\";\nimport { ObjectInterface } from \"../const\";\n\nexport interface PinchInputOption {\n\tscale?: number;\n\tthreshold?: number;\n\tinputType?: string[];\n\thammerManagerOptions?: ObjectInterface;\n}\n\n/**\n * @typedef {Object} PinchInputOption The option object of the eg.Axes.PinchInput module\n * @ko eg.Axes.PinchInput 모듈의 옵션 객체\n * @property {Number} [scale=1] Coordinate scale that a user can move<ko>사용자의 동작으로 이동하는 좌표의 배율</ko>\n * @property {Number} [threshold=0] Minimal scale before recognizing <ko>사용자의 Pinch 동작을 인식하기 위해산 최소한의 배율</ko>\n * @property {Object} [hammerManagerOptions={cssProps: {userSelect: \"none\",touchSelect: \"none\",touchCallout: \"none\",userDrag: \"none\"}] Options of Hammer.Manager <ko>Hammer.Manager의 옵션</ko>\n**/\n\n/**\n * @class eg.Axes.PinchInput\n * @classdesc A module that passes the amount of change to eg.Axes when two pointers are moving toward (zoom-in) or away from each other (zoom-out). use one axis.\n * @ko 2개의 pointer를 이용하여 zoom-in하거나 zoom-out 하는 동작의 변화량을 eg.Axes에 전달하는 모듈. 한 개 의 축을 사용한다.\n * @example\n * const pinch = new eg.Axes.PinchInput(\"#area\", {\n * \t\tscale: 1\n * });\n *\n * // Connect 'something' axis when two pointers are moving toward (zoom-in) or away from each other (zoom-out).\n * axes.connect(\"something\", pinch);\n *\n * @param {HTMLElement|String|jQuery} element An element to use the eg.Axes.PinchInput module <ko>eg.Axes.PinchInput 모듈을 사용할 엘리먼트</ko>\n * @param {PinchInputOption} [options] The option object of the eg.Axes.PinchInput module<ko>eg.Axes.PinchInput 모듈의 옵션 객체</ko>\n */\nexport class PinchInput implements IInputType {\n\n\toptions: PinchInputOption;\n\taxes: string[] = [];\n\thammer = null;\n\telement: HTMLElement = null;\n\n\tprivate observer: IInputTypeObserver;\n\tprivate _base: number = null;\n\tprivate _prev: number = null;\n\tprivate pinchRecognizer = null;\n\n\tconstructor(el, options?: PinchInputOption) {\n\t\t/**\n\t\t * Hammer helps you add support for touch gestures to your page\n\t\t *\n\t\t * @external Hammer\n\t\t * @see {@link http://hammerjs.github.io|Hammer.JS}\n\t\t * @see {@link http://hammerjs.github.io/jsdoc/Hammer.html|Hammer.JS API documents}\n\t\t * @see Hammer.JS applies specific CSS properties by {@link http://hammerjs.github.io/jsdoc/Hammer.defaults.cssProps.html|default} when creating an instance. The eg.Axes module removes all default CSS properties provided by Hammer.JS\n\t\t */\n\t\tif (typeof Manager === \"undefined\") {\n\t\t\tthrow new Error(`The Hammerjs must be loaded before eg.Axes.PinchInput.\\nhttp://hammerjs.github.io/`);\n\t\t}\n\t\tthis.element = $(el);\n\t\tthis.options = {\n\t\t\t...{\n\t\t\t\tscale: 1,\n\t\t\t\tthreshold: 0,\n\t\t\t\tinputType: [\"touch\", \"pointer\"],\n\t\t\t\thammerManagerOptions: {\n\t\t\t\t\t// css properties were removed due to usablility issue\n\t\t\t\t\t// http://hammerjs.github.io/jsdoc/Hammer.defaults.cssProps.html\n\t\t\t\t\tcssProps: {\n\t\t\t\t\t\tuserSelect: \"none\",\n\t\t\t\t\t\ttouchSelect: \"none\",\n\t\t\t\t\t\ttouchCallout: \"none\",\n\t\t\t\t\t\tuserDrag: \"none\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t...options,\n\t\t};\n\t\tthis.onPinchStart = this.onPinchStart.bind(this);\n\t\tthis.onPinchMove = this.onPinchMove.bind(this);\n\t\tthis.onPinchEnd = this.onPinchEnd.bind(this);\n\t}\n\n\tmapAxes(axes: string[]) {\n\t\tthis.axes = axes;\n\t}\n\n\tconnect(observer: IInputTypeObserver): IInputType {\n\t\tconst hammerOption = { threshold: this.options.threshold };\n\n\t\tif (this.hammer) { // for sharing hammer instance.\n\t\t\t// hammer remove previous PinchRecognizer.\n\t\t\tthis.removeRecognizer();\n\t\t\tthis.dettachEvent();\n\t\t} else {\n\t\t\tlet keyValue: string = this.element[UNIQUEKEY];\n\t\t\tif (!keyValue) {\n\t\t\t\tkeyValue = String(Math.round(Math.random() * new Date().getTime()));\n\t\t\t}\n\t\t\tconst inputClass = convertInputType(this.options.inputType);\n\t\t\tif (!inputClass) {\n\t\t\t\tthrow new Error(\"Wrong inputType parameter!\");\n\t\t\t}\n\t\t\tthis.hammer = createHammer(\n\t\t\t\tthis.element,\n\t\t\t\t{\n\t\t\t\t\t...{\n\t\t\t\t\t\tinputClass,\n\t\t\t\t\t}, ...this.options.hammerManagerOptions,\n\t\t\t\t},\n\t\t\t);\n\t\t\tthis.element[UNIQUEKEY] = keyValue;\n\t\t}\n\t\tthis.pinchRecognizer = new Pinch(hammerOption);\n\t\tthis.hammer.add(this.pinchRecognizer);\n\t\tthis.attachEvent(observer);\n\t\treturn this;\n\t}\n\n\tdisconnect() {\n\t\tthis.removeRecognizer();\n\t\tif (this.hammer) {\n\t\t\tthis.hammer.remove(this.pinchRecognizer);\n\t\t\tthis.pinchRecognizer = null;\n\t\t\tthis.dettachEvent();\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t* Destroys elements, properties, and events used in a module.\n\t* @ko 모듈에 사용한 엘리먼트와 속성, 이벤트를 해제한다.\n\t* @method eg.Axes.PinchInput#destroy\n\t*/\n\tdestroy() {\n\t\tthis.disconnect();\n\t\tif (this.hammer && this.hammer.recognizers.length === 0) {\n\t\t\tthis.hammer.destroy();\n\t\t}\n\t\tdelete this.element[UNIQUEKEY];\n\t\tthis.element = null;\n\t\tthis.hammer = null;\n\t}\n\n\tprivate removeRecognizer() {\n\t\tif (this.hammer && this.pinchRecognizer) {\n\t\t\tthis.hammer.remove(this.pinchRecognizer);\n\t\t\tthis.pinchRecognizer = null;\n\t\t}\n\t}\n\n\tprivate onPinchStart(event) {\n\t\tthis._base = this.observer.get(this)[this.axes[0]];\n\t\tconst offset = this.getOffset(event.scale);\n\t\tthis.observer.hold(this, event);\n\t\tthis.observer.change(this, event, toAxis(this.axes, [offset]));\n\t\tthis._prev = event.scale;\n\t}\n\tprivate onPinchMove(event) {\n\t\tconst offset = this.getOffset(event.scale, this._prev);\n\t\tthis.observer.change(this, event, toAxis(this.axes, [offset]));\n\t\tthis._prev = event.scale;\n\t}\n\tprivate onPinchEnd(event) {\n\t\tconst offset = this.getOffset(event.scale, this._prev);\n\t\tthis.observer.change(this, event, toAxis(this.axes, [offset]));\n\t\tthis.observer.release(this, event, toAxis(this.axes, [0]), 0);\n\t\tthis._base = null;\n\t\tthis._prev = null;\n\t}\n\tprivate getOffset(pinchScale: number, prev: number = 1): number {\n\t\treturn this._base * (pinchScale - prev) * this.options.scale;\n\t}\n\n\tprivate attachEvent(observer: IInputTypeObserver) {\n\t\tthis.observer = observer;\n\t\tthis.hammer.on(\"pinchstart\", this.onPinchStart)\n\t\t\t.on(\"pinchmove\", this.onPinchMove)\n\t\t\t.on(\"pinchend\", this.onPinchEnd);\n\t}\n\n\tprivate dettachEvent() {\n\t\tthis.hammer.off(\"pinchstart\", this.onPinchStart)\n\t\t\t.off(\"pinchmove\", this.onPinchMove)\n\t\t\t.off(\"pinchend\", this.onPinchEnd);\n\t\tthis.observer = null;\n\t\tthis._prev = null;\n\t}\n\n\t/**\n\t * Enables input devices\n\t * @ko 입력 장치를 사용할 수 있게 한다\n\t * @method eg.Axes.PinchInput#enable\n\t * @return {eg.Axes.PinchInput} An instance of a module itself <ko>모듈 자신의 인스턴스</ko>\n\t */\n\tenable() {\n\t\tthis.hammer && (this.hammer.get(\"pinch\").options.enable = true);\n\t\treturn this;\n\t}\n\t/**\n\t * Disables input devices\n\t * @ko 입력 장치를 사용할 수 없게 한다.\n\t * @method eg.Axes.PinchInput#disable\n\t * @return {eg.Axes.PinchInput} An instance of a module itself <ko>모듈 자신의 인스턴스</ko>\n\t */\n\tdisable() {\n\t\tthis.hammer && (this.hammer.get(\"pinch\").options.enable = false);\n\t\treturn this;\n\t}\n\t/**\n\t * Returns whether to use an input device\n\t * @ko 입력 장치를 사용 여부를 반환한다.\n\t * @method eg.Axes.PinchInput#isEnable\n\t * @return {Boolean} Whether to use an input device <ko>입력장치 사용여부</ko>\n\t */\n\tisEnable() {\n\t\treturn !!(this.hammer && this.hammer.get(\"pinch\").options.enable);\n\t}\n}\n","import { InputObserver } from \"./../InputObserver\";\nimport { $ } from \"../utils\";\nimport { UNIQUEKEY, toAxis, IInputType, IInputTypeObserver } from \"./InputType\";\nimport { Axis } from \"../AxisManager\";\n\nexport interface WheelInputOption {\n\tscale?: number;\n\tuseNormalized?: boolean;\n}\n\n/**\n * @typedef {Object} WheelInputOption The option object of the eg.Axes.WheelInput module\n * @ko eg.Axes.WheelInput 모듈의 옵션 객체\n * @property {Number} [scale=1] Coordinate scale that a user can move<ko>사용자의 동작으로 이동하는 좌표의 배율</ko>\n**/\n\n/**\n * @class eg.Axes.WheelInput\n * @classdesc A module that passes the amount of change to eg.Axes when the mouse wheel is moved. use one axis.\n * @ko 마우스 휠이 움직일때의 변화량을 eg.Axes에 전달하는 모듈. 한 개 의 축을 사용한다.\n *\n * @example\n * const wheel = new eg.Axes.WheelInput(\"#area\", {\n * \t\tscale: 1\n * });\n *\n * // Connect 'something' axis when the mousewheel is moved.\n * axes.connect(\"something\", wheel);\n *\n * @param {HTMLElement|String|jQuery} element An element to use the eg.Axes.WheelInput module <ko>eg.Axes.WheelInput 모듈을 사용할 엘리먼트</ko>\n * @param {WheelInputOption} [options] The option object of the eg.Axes.WheelInput module<ko>eg.Axes.WheelInput 모듈의 옵션 객체</ko>\n */\nexport class WheelInput implements IInputType {\n\toptions: WheelInputOption;\n\taxes: string[] = [];\n\telement: HTMLElement = null;\n\tprivate _isEnabled = false;\n\tprivate _isHolded = false;\n\tprivate _timer = null;\n\tprivate observer: IInputTypeObserver;\n\tconstructor(el, options?: WheelInputOption) {\n\t\tthis.element = $(el);\n\t\tthis.options = {\n\t\t\t...{\n\t\t\t\tscale: 1,\n\t\t\t\tuseNormalized: true,\n\t\t\t}, ...options,\n\t\t};\n\t\tthis.onWheel = this.onWheel.bind(this);\n\t}\n\n\tmapAxes(axes: string[]) {\n\t\tthis.axes = axes;\n\t}\n\n\tconnect(observer: IInputTypeObserver): IInputType {\n\t\tthis.dettachEvent();\n\t\tthis.attachEvent(observer);\n\t\treturn this;\n\t}\n\n\tdisconnect() {\n\t\tthis.dettachEvent();\n\t\treturn this;\n\t}\n\n\t/**\n\t* Destroys elements, properties, and events used in a module.\n\t* @ko 모듈에 사용한 엘리먼트와 속성, 이벤트를 해제한다.\n\t* @method eg.Axes.WheelInput#destroy\n\t*/\n\tdestroy() {\n\t\tthis.disconnect();\n\t\tthis.element = null;\n\t}\n\n\tprivate onWheel(event) {\n\t\tif (!this._isEnabled) {\n\t\t\treturn;\n\t\t}\n\t\tevent.preventDefault();\n\n\t\tif (event.deltaY === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this._isHolded) {\n\t\t\tthis.observer.hold(this, event);\n\t\t\tthis._isHolded = true;\n\t\t}\n\t\tconst offset = (event.deltaY > 0 ? -1 : 1) * this.options.scale * (this.options.useNormalized ? 1 : Math.abs(event.deltaY));\n\n\t\tthis.observer.change(this, event, toAxis(this.axes, [offset]));\n\t\tclearTimeout(this._timer);\n\t\tconst inst = this;\n\n\t\tthis._timer = setTimeout(() => {\n\t\t\tif (this._isHolded) {\n\t\t\t\tthis._isHolded = false;\n\t\t\t\tthis.observer.release(this, event, toAxis(this.axes, [0]));\n\t\t\t}\n\t\t}, 50);\n\t}\n\n\tprivate attachEvent(observer: IInputTypeObserver) {\n\t\tthis.observer = observer;\n\t\tthis.element.addEventListener(\"wheel\", this.onWheel);\n\t\tthis._isEnabled = true;\n\t}\n\n\tprivate dettachEvent() {\n\t\tthis.element.removeEventListener(\"wheel\", this.onWheel);\n\t\tthis._isEnabled = false;\n\t\tthis.observer = null;\n\n\t\tif (this._timer) {\n\t\t\tclearTimeout(this._timer);\n\t\t\tthis._timer = null;\n\t\t}\n\t}\n\n\t/**\n\t * Enables input devices\n\t * @ko 입력 장치를 사용할 수 있게 한다\n\t * @method eg.Axes.WheelInput#enable\n\t * @return {eg.Axes.WheelInput} An instance of a module itself <ko>모듈 자신의 인스턴스</ko>\n\t */\n\tenable() {\n\t\tthis._isEnabled = true;\n\t\treturn this;\n\t}\n\t/**\n\t * Disables input devices\n\t * @ko 입력 장치를 사용할 수 없게 한다.\n\t * @method eg.Axes.WheelInput#disable\n\t * @return {eg.Axes.WheelInput} An instance of a module itself <ko>모듈 자신의 인스턴스</ko>\n\t */\n\tdisable() {\n\t\tthis._isEnabled = false;\n\t\treturn this;\n\t}\n\t/**\n\t * Returns whether to use an input device\n\t * @ko 입력 장치를 사용 여부를 반환한다.\n\t * @method eg.Axes.WheelInput#isEnable\n\t * @return {Boolean} Whether to use an input device <ko>입력장치 사용여부</ko>\n\t */\n\tisEnable() {\n\t\treturn this._isEnabled;\n\t}\n}\n","import { InputObserver } from \"./../InputObserver\";\nimport { $ } from \"../utils\";\nimport { toAxis, IInputType, IInputTypeObserver } from \"./InputType\";\nimport { Axis } from \"../AxisManager\";\n\nexport const KEY_LEFT_ARROW = 37;\nexport const KEY_A = 65;\nexport const KEY_UP_ARROW = 38;\nexport const KEY_W = 87;\nexport const KEY_RIGHT_ARROW = 39;\nexport const KEY_D = 68;\nexport const KEY_DOWN_ARROW = 40;\nexport const KEY_S = 83;\n\nconst DIRECTION_REVERSE = -1;\nconst DIRECTION_FORWARD = 1;\nconst DIRECTION_HORIZONTAL = -1;\nconst DIRECTION_VERTICAL = 1;\nconst DELAY = 80;\n\nexport interface MoveKeyInputOption {\n\tscale?: number[];\n}\n\n/**\n * @typedef {Object} MoveKeyInputOption The option object of the eg.Axes.MoveKeyInput module\n * @ko eg.Axes.MoveKeyInput 모듈의 옵션 객체\n * @property {Array<Number>} [scale] Coordinate scale that a user can move<ko>사용자의 동작으로 이동하는 좌표의 배율</ko>\n * @property {Number} [scale[0]=1] Coordinate scale for the first axis<ko>첫번째 축의 배율</ko>\n * @property {Number} [scale[1]=1] Coordinate scale for the decond axis<ko>두번째 축의 배율</ko>\n**/\n\n/**\n * @class eg.Axes.MoveKeyInput\n * @classdesc A module that passes the amount of change to eg.Axes when the move key stroke is occured. use two axis.\n * @ko 이동키 입력이 발생했을 때의 변화량을 eg.Axes에 전달하는 모듈. 두 개 의 축을 사용한다.\n *\n * @example\n * const moveKey = new eg.Axes.MoveKeyInput(\"#area\", {\n * \t\tscale: [1, 1]\n * });\n *\n * // Connect 'x', 'y' axes when the moveKey is pressed.\n * axes.connect([\"x\", \"y\"], moveKey);\n *\n * @param {HTMLElement|String|jQuery} element An element to use the eg.Axes.MoveKeyInput module <ko>eg.Axes.MoveKeyInput 모듈을 사용할 엘리먼트</ko>\n * @param {MoveKeyInputOption} [options] The option object of the eg.Axes.MoveKeyInput module<ko>eg.Axes.MoveKeyInput 모듈의 옵션 객체</ko>\n */\nexport class MoveKeyInput implements IInputType {\n\toptions: MoveKeyInputOption;\n\taxes: string[] = [];\n\telement: HTMLElement = null;\n\tprivate _isEnabled = false;\n\tprivate _isHolded = false;\n\tprivate _timer = null;\n\tprivate observer: IInputTypeObserver;\n\tconstructor(el, options?: MoveKeyInputOption) {\n\t\tthis.element = $(el);\n\t\tthis.options = {\n\t\t\t...{\n\t\t\t\tscale: [1, 1],\n\t\t\t}, ...options,\n\t\t};\n\t\tthis.onKeydown = this.onKeydown.bind(this);\n\t\tthis.onKeyup = this.onKeyup.bind(this);\n\t}\n\n\tmapAxes(axes: string[]) {\n\t\tthis.axes = axes;\n\t}\n\n\tconnect(observer: IInputTypeObserver): IInputType {\n\t\tthis.dettachEvent();\n\n\t\t// add tabindex=\"0\" to the container for making it focusable\n\t\tif (this.element.getAttribute(\"tabindex\") !== \"0\") {\n\t\t\tthis.element.setAttribute(\"tabindex\", \"0\");\n\t\t}\n\n\t\tthis.attachEvent(observer);\n\t\treturn this;\n\t}\n\n\tdisconnect() {\n\t\tthis.dettachEvent();\n\t\treturn this;\n\t}\n\n\t/**\n\t* Destroys elements, properties, and events used in a module.\n\t* @ko 모듈에 사용한 엘리먼트와 속성, 이벤트를 해제한다.\n\t* @method eg.Axes.MoveKeyInput#destroy\n\t*/\n\tdestroy() {\n\t\tthis.disconnect();\n\t\tthis.element = null;\n\t}\n\n\tprivate onKeydown(e) {\n\t\tif (!this._isEnabled) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet isMoveKey = true;\n\t\tlet direction = DIRECTION_FORWARD;\n\t\tlet move = DIRECTION_HORIZONTAL;\n\n\t\tswitch (e.keyCode) {\n\t\t\tcase KEY_LEFT_ARROW:\n\t\t\tcase KEY_A:\n\t\t\t\tdirection = DIRECTION_REVERSE;\n\t\t\t\tbreak;\n\t\t\tcase KEY_RIGHT_ARROW:\n\t\t\tcase KEY_D:\n\t\t\t\tbreak;\n\t\t\tcase KEY_DOWN_ARROW:\n\t\t\tcase KEY_S:\n\t\t\t\tdirection = DIRECTION_REVERSE;\n\t\t\t\tmove = DIRECTION_VERTICAL;\n\t\t\t\tbreak;\n\t\t\tcase KEY_UP_ARROW:\n\t\t\tcase KEY_W:\n\t\t\t\tmove = DIRECTION_VERTICAL;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tisMoveKey = false;\n\t\t}\n\t\tif ((move === DIRECTION_HORIZONTAL && !this.axes[0]) ||\n\t\t\t(move === DIRECTION_VERTICAL && !this.axes[1])) {\n\t\t\tisMoveKey = false;\n\t\t}\n\t\tif (!isMoveKey) {\n\t\t\treturn;\n\t\t}\n\t\tconst offsets = move === DIRECTION_HORIZONTAL ? [+this.options.scale[0] * direction, 0] : [0, +this.options.scale[1] * direction];\n\n\t\tif (!this._isHolded) {\n\t\t\tthis.observer.hold(this, event);\n\t\t\tthis._isHolded = true;\n\t\t}\n\t\tclearTimeout(this._timer);\n\t\tthis.observer.change(this, event, toAxis(this.axes, offsets));\n\t}\n\tprivate onKeyup(e) {\n\t\tif (!this._isHolded) {\n\t\t\treturn;\n\t\t}\n\t\tclearTimeout(this._timer);\n\t\tthis._timer = setTimeout(() => {\n\t\t\tthis.observer.release(this, e, toAxis(this.axes, [0, 0]));\n\t\t\tthis._isHolded = false;\n\t\t}, DELAY);\n\t}\n\n\tprivate attachEvent(observer: IInputTypeObserver) {\n\t\tthis.observer = observer;\n\t\tthis.element.addEventListener(\"keydown\", this.onKeydown, false);\n\t\tthis.element.addEventListener(\"keypress\", this.onKeydown, false);\n\t\tthis.element.addEventListener(\"keyup\", this.onKeyup, false);\n\t\tthis._isEnabled = true;\n\t}\n\n\tprivate dettachEvent() {\n\t\tthis.element.removeEventListener(\"keydown\", this.onKeydown, false);\n\t\tthis.element.removeEventListener(\"keypress\", this.onKeydown, false);\n\t\tthis.element.removeEventListener(\"keyup\", this.onKeyup, false);\n\t\tthis._isEnabled = false;\n\t\tthis.observer = null;\n\t}\n\n\t/**\n\t * Enables input devices\n\t * @ko 입력 장치를 사용할 수 있게 한다\n\t * @method eg.Axes.MoveKeyInput#enable\n\t * @return {eg.Axes.MoveKeyInput} An instance of a module itself <ko>모듈 자신의 인스턴스</ko>\n\t */\n\tenable() {\n\t\tthis._isEnabled = true;\n\t\treturn this;\n\t}\n\t/**\n\t * Disables input devices\n\t * @ko 입력 장치를 사용할 수 없게 한다.\n\t * @method eg.Axes.MoveKeyInput#disable\n\t * @return {eg.Axes.MoveKeyInput} An instance of a module itself <ko>모듈 자신의 인스턴스</ko>\n\t */\n\tdisable() {\n\t\tthis._isEnabled = false;\n\t\treturn this;\n\t}\n\t/**\n\t * Returns whether to use an input device\n\t * @ko 입력 장치를 사용 여부를 반환한다.\n\t * @method eg.Axes.MoveKeyInput#isEnable\n\t * @return {Boolean} Whether to use an input device <ko>입력장치 사용여부</ko>\n\t */\n\tisEnable() {\n\t\treturn this._isEnabled;\n\t}\n}\n","import Axes from \"./Axes\";\nimport { PanInput } from \"./inputType/PanInput\";\nimport { RotatePanInput } from \"./inputType/RotatePanInput\";\nimport { PinchInput } from \"./inputType/PinchInput\";\nimport { WheelInput } from \"./inputType/WheelInput\";\nimport { MoveKeyInput } from \"./inputType/MoveKeyInput\";\n\nAxes.PanInput = PanInput;\nAxes.RotatePanInput = RotatePanInput;\nAxes.PinchInput = PinchInput;\nAxes.WheelInput = WheelInput;\nAxes.MoveKeyInput = MoveKeyInput;\n\nexport default Axes;\n"],"names":["isUndefined","value","win","Component","_eventHandler","options","_proto","prototype","trigger","eventName","customEvent","handlerList","this","length","concat","eventType","isCanceled","arg","i","stop","currentTarget","_len","arguments","restParam","Array","_key","apply","once","handlerToAttach","eventHash","self","on","listener","_len2","_key2","off","hasOn","name","push","handlerToDetach","undefined","k","handlerFunction","splice","VERSION","destPos","range","circular","bounce","toDestPos","targetRange","Math","max","min","pos","toPos","nodes","el","len","param","multi","match","dummy","document","createElement","innerHTML","toArray","childNodes","querySelectorAll","window","nodeName","nodeType","jQuery","constructor","jquery","get","isArray","map","v","$","raf","requestAnimationFrame","webkitRequestAnimationFrame","caf","cancelAnimationFrame","webkitCancelAnimationFrame","keyInfo_1","oldraf_1","callback","key","timestamp","setTimeout","performance","now","Date","getTime","clearTimeout","obj","tranformed","filtered","target","base","every","roundNumFunc","num","roundUnit","p","pow","getDecimalPlace","n","round","isNumber","roundNumber","val","isFinite","indexOf","e","_a","itm","em","axm","animationEnd","bind","depaPos","wishDuration","duration","durations_1","distance","abs","deceleration","_this","sqrt","Object","keys","reduce","Infinity","minMax","minimumDuration","maximumDuration","option","inputEvent","event","delta","getDelta","input","isTrusted","done","axes","_animateParam","orgPos_1","opt","getCirculatedPos","triggerChange","_raf","triggerAnimationEnd","animateTo","getDuration","beforeParam","getEventInfo","circularTargets","filter","isCircularable","setTo","setInterrupt","isOutside","restore","finish","triggerFinish","complete","info_1","self_1","destPos_1","prevPos_1","prevEasingPer_1","directions_1","originalIntendedPos_1","prevTime_1","startTime","currentTime","ratio","easingPer","easing","nextPos","circulatedPos","rangeOffset","equal","getFinalPos","loop","originalIntendedPos","getRoundUnit","minRoundUnit","getAxisOptions","userWish","createAnimationParam","retTrigger","triggerAnimationStart","getUserControll","console","warn","animateLoop","grab","orgPos","movedPos","getInsidePosition","roundPos","roundDepa","createUserControll","isAccurate","holding","am","eventInfo","moveTo","set","result","userControl","userDuration","roundNumbers","interruptable","_prevented","prevented","axis","_complementOptions","_pos","acc","forEach","axisOption","test","fullDepaPos","axisOptions","__proto","tn","tx","initSlope_1","out","isInterrupted","changeOption","isStopped","moveDistance","triggerHold","offset","isInterrupting","atOutside","inputDuration","triggerRelease","isEqual","_extends","assign","source","hasOwnProperty","call","_inheritsLoose","subClass","superClass","create","__proto__","_assertThisInitialized","ReferenceError","assign$1","TypeError","output","index","nextKey","VENDOR_PREFIXES","TEST_ELEMENT","style","TYPE_FUNCTION","prefixed","property","prefix","prop","camelProp","toUpperCase","slice","PREFIXED_TOUCH_ACTION","NATIVE_TOUCH_ACTION","TOUCH_ACTION_COMPUTE","TOUCH_ACTION_MANIPULATION","TOUCH_ACTION_NONE","TOUCH_ACTION_PAN_X","TOUCH_ACTION_PAN_Y","TOUCH_ACTION_MAP","touchMap","cssSupports","CSS","supports","getTouchActionProps","SUPPORT_TOUCH","SUPPORT_POINTER_EVENTS","SUPPORT_ONLY_TOUCH","navigator","userAgent","INPUT_TYPE_TOUCH","INPUT_TYPE_MOUSE","COMPUTE_INTERVAL","INPUT_START","INPUT_END","INPUT_CANCEL","DIRECTION_NONE","DIRECTION_LEFT","DIRECTION_RIGHT","DIRECTION_UP","DIRECTION_DOWN","DIRECTION_HORIZONTAL","DIRECTION_VERTICAL","DIRECTION_ALL","PROPS_XY","PROPS_CLIENT_XY","each","iterator","context","boolOrFn","args","inStr","str","find","TouchAction","manager","compute","element","actions","toLowerCase","trim","update","touchAction","recognizers","recognizer","enable","getTouchAction","hasPanX","hasPanY","cleanTouchActions","join","preventDefaults","srcEvent","direction","offsetDirection","session","preventDefault","hasNone","isTapPointer","pointers","isTapMovement","isTapTouchTime","deltaTime","preventSrc","hasParent","node","parent","parentNode","getCenter","pointersLength","x","clientX","y","clientY","simpleCloneInputData","timeStamp","center","deltaX","deltaY","getDistance","p1","p2","props","getAngle","atan2","PI","getDirection","getVelocity","computeInputData","firstInput","firstMultiple","prevDelta","prevInput","offsetCenter","angle","offsetDelta","start","end","overallVelocity","overallVelocityX","overallVelocityY","scale","rotation","maxPointers","velocity","velocityX","velocityY","last","lastInterval","computeIntervalInputData","inputHandler","pointersLen","changedPointersLen","changedPointers","isFirst","isFinal","emit","recognize","splitStr","split","addEventListeners","types","handler","type","addEventListener","removeEventListeners","removeEventListener","getWindowForElement","doc","ownerDocument","defaultView","parentWindow","Input","inputTarget","domHandler","ev","init","evEl","evTarget","evWin","destroy","inArray","src","findByKey","POINTER_INPUT_MAP","pointerdown","pointermove","pointerup","pointercancel","pointerout","IE10_POINTER_TYPE_ENUM","POINTER_ELEMENT_EVENTS","POINTER_WINDOW_EVENTS","MSPointerEvent","PointerEvent","PointerEventInput","_Input","proto","store","pointerEvents","removePointer","eventTypeNormalized","replace","pointerType","isTouch","storeIndex","pointerId","button","uniqueArray","sort","results","values","a","b","TOUCH_INPUT_MAP","touchstart","touchmove","touchend","touchcancel","TouchInput","targetIds","touches","targetTouches","allTouches","identifier","changedTouches","changedTargetTouches","touch","MOUSE_INPUT_MAP","mousedown","mousemove","mouseup","MouseInput","pressed","which","DEDUP_TIMEOUT","DEDUP_DISTANCE","setLastTouch","eventData","primaryTouch","lastTouch","lts","lastTouches","TouchMouseInput","_manager","inputData","isMouse","sourceCapabilities","firesTouchEvents","t","dx","dy","mouse","invokeArrayArg","fn","_uniqueId","getRecognizerByNameIfManager","otherRecognizer","stateStr","state","Recognizer","id","simultaneous","requireFail","recognizeWith","dropRecognizeWith","requireFailure","dropRequireFailure","hasRequireFailures","canRecognizeWith","additionalEvent","tryEmit","canEmit","inputDataClone","reset","process","defaults","domEvents","inputClass","preset","cssProps","userSelect","touchSelect","touchCallout","contentZooming","userDrag","tapHighlightColor","toggleCssProps","add","oldCssProps","Manager","handlers","item","force","stopped","curRecognizer","existing","remove","targetRecognizer","events","data","gestureEvent","createEvent","initEvent","gesture","dispatchEvent","AttrRecognizer","_Recognizer","attrTest","optionPointers","isRecognized","isValid","directionStr","PanRecognizer","_AttrRecognizer","threshold","pX","pY","directionTest","hasMoved","PinchRecognizer","inOut","TRANSFORM","bodyStyle","head","getElementsByTagName","startPos","_super","InterruptManager","AxisManager","EventManager","AnimationManager","io","InputObserver","setAnimationManager","tslib_1","inputType","mapped","_inputs","disconnect","targets","hammer","mapAxes","connect","setBy","Axes","UNIQUEKEY","hasTouch","hasMouse","hasPointer","checkType","userDirection","Error","thresholdAngle","hammerManagerOptions","onHammerInput","onPanmove","onPanend","useHorizontal","useVertical","_direction","observer","hammerOption","removeRecognizer","dettachEvent","keyValue","String","random","convertInputType","createHammer","panRecognizer","Pan","attachEvent","isEnable","hold","toAngle","getDirectionByAngle","offsetY","offsetX","getOffset","useDirection","prevent","some","stopPropagation","preventSystemEvent","change","toAxis","speeds","normalSpeed","release","properties","prevQuadrant","lastDiff","onPanstart","rect","getBoundingClientRect","coefficientForDistanceToAngle","width","rotateOrigin","left","top","height","prevAngle","triggerAnimation","quadrant","getQuadrant","diff","getDifference","vx","vy","posX","posY","q","PanInput","onPinchStart","onPinchMove","onPinchEnd","pinchRecognizer","Pinch","_base","_prev","pinchScale","prev","useNormalized","onWheel","_isEnabled","_isHolded","_timer","onKeydown","onKeyup","getAttribute","setAttribute","isMoveKey","move","keyCode","offsets","RotatePanInput","PinchInput","WheelInput","MoveKeyInput"],"mappings":"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"}