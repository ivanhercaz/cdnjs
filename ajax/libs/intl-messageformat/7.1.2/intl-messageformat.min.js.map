{"version":3,"file":"intl-messageformat.min.js","sources":["../../../intl-messageformat-parser/lib/types.js","../../../intl-messageformat-parser/lib/parser.js","../../../intl-messageformat-parser/lib/normalize.js","../../../intl-messageformat-parser/lib/index.js","../../../intl-format-cache/lib/index.js","../../lib/formatters.js","../../lib/core.js"],"sourcesContent":["export var TYPE;\n(function (TYPE) {\n    /**\n     * Raw text\n     */\n    TYPE[TYPE[\"literal\"] = 0] = \"literal\";\n    /**\n     * Variable w/o any format, e.g `var` in `this is a {var}`\n     */\n    TYPE[TYPE[\"argument\"] = 1] = \"argument\";\n    /**\n     * Variable w/ number format\n     */\n    TYPE[TYPE[\"number\"] = 2] = \"number\";\n    /**\n     * Variable w/ date format\n     */\n    TYPE[TYPE[\"date\"] = 3] = \"date\";\n    /**\n     * Variable w/ time format\n     */\n    TYPE[TYPE[\"time\"] = 4] = \"time\";\n    /**\n     * Variable w/ select format\n     */\n    TYPE[TYPE[\"select\"] = 5] = \"select\";\n    /**\n     * Variable w/ plural format\n     */\n    TYPE[TYPE[\"plural\"] = 6] = \"plural\";\n})(TYPE || (TYPE = {}));\n/**\n * Type Guards\n */\nexport function isLiteralElement(el) {\n    return el.type === TYPE.literal;\n}\nexport function isArgumentElement(el) {\n    return el.type === TYPE.argument;\n}\nexport function isNumberElement(el) {\n    return el.type === TYPE.number;\n}\nexport function isDateElement(el) {\n    return el.type === TYPE.date;\n}\nexport function isTimeElement(el) {\n    return el.type === TYPE.time;\n}\nexport function isSelectElement(el) {\n    return el.type === TYPE.select;\n}\nexport function isPluralElement(el) {\n    return el.type === TYPE.plural;\n}\nexport function isNumberSkeleton(el) {\n    return el.type === 0 /* number */;\n}\nexport function isDateTimeSkeleton(el) {\n    return el.type === 1 /* dateTime */;\n}\nexport function createLiteralElement(value) {\n    return {\n        type: TYPE.literal,\n        value: value,\n    };\n}\nexport function createNumberElement(value, style) {\n    return {\n        type: TYPE.number,\n        value: value,\n        style: style,\n    };\n}\n","// tslint:disable:only-arrow-functions\n// tslint:disable:object-literal-shorthand\n// tslint:disable:trailing-comma\n// tslint:disable:object-literal-sort-keys\n// tslint:disable:one-variable-per-declaration\n// tslint:disable:max-line-length\n// tslint:disable:no-consecutive-blank-lines\n// tslint:disable:align\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\n// Generated by PEG.js v. 0.10.0 (ts-pegjs plugin v. 0.2.5 )\n//\n// https://pegjs.org/   https://github.com/metadevpro/ts-pegjs\nimport { TYPE, } from './types';\nvar SyntaxError = /** @class */ (function (_super) {\n    __extends(SyntaxError, _super);\n    function SyntaxError(message, expected, found, location) {\n        var _this = _super.call(this) || this;\n        _this.message = message;\n        _this.expected = expected;\n        _this.found = found;\n        _this.location = location;\n        _this.name = \"SyntaxError\";\n        if (typeof Error.captureStackTrace === \"function\") {\n            Error.captureStackTrace(_this, SyntaxError);\n        }\n        return _this;\n    }\n    SyntaxError.buildMessage = function (expected, found) {\n        function hex(ch) {\n            return ch.charCodeAt(0).toString(16).toUpperCase();\n        }\n        function literalEscape(s) {\n            return s\n                .replace(/\\\\/g, \"\\\\\\\\\")\n                .replace(/\"/g, \"\\\\\\\"\")\n                .replace(/\\0/g, \"\\\\0\")\n                .replace(/\\t/g, \"\\\\t\")\n                .replace(/\\n/g, \"\\\\n\")\n                .replace(/\\r/g, \"\\\\r\")\n                .replace(/[\\x00-\\x0F]/g, function (ch) { return \"\\\\x0\" + hex(ch); })\n                .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function (ch) { return \"\\\\x\" + hex(ch); });\n        }\n        function classEscape(s) {\n            return s\n                .replace(/\\\\/g, \"\\\\\\\\\")\n                .replace(/\\]/g, \"\\\\]\")\n                .replace(/\\^/g, \"\\\\^\")\n                .replace(/-/g, \"\\\\-\")\n                .replace(/\\0/g, \"\\\\0\")\n                .replace(/\\t/g, \"\\\\t\")\n                .replace(/\\n/g, \"\\\\n\")\n                .replace(/\\r/g, \"\\\\r\")\n                .replace(/[\\x00-\\x0F]/g, function (ch) { return \"\\\\x0\" + hex(ch); })\n                .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function (ch) { return \"\\\\x\" + hex(ch); });\n        }\n        function describeExpectation(expectation) {\n            switch (expectation.type) {\n                case \"literal\":\n                    return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n                case \"class\":\n                    var escapedParts = expectation.parts.map(function (part) {\n                        return Array.isArray(part)\n                            ? classEscape(part[0]) + \"-\" + classEscape(part[1])\n                            : classEscape(part);\n                    });\n                    return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n                case \"any\":\n                    return \"any character\";\n                case \"end\":\n                    return \"end of input\";\n                case \"other\":\n                    return expectation.description;\n            }\n        }\n        function describeExpected(expected1) {\n            var descriptions = expected1.map(describeExpectation);\n            var i;\n            var j;\n            descriptions.sort();\n            if (descriptions.length > 0) {\n                for (i = 1, j = 1; i < descriptions.length; i++) {\n                    if (descriptions[i - 1] !== descriptions[i]) {\n                        descriptions[j] = descriptions[i];\n                        j++;\n                    }\n                }\n                descriptions.length = j;\n            }\n            switch (descriptions.length) {\n                case 1:\n                    return descriptions[0];\n                case 2:\n                    return descriptions[0] + \" or \" + descriptions[1];\n                default:\n                    return descriptions.slice(0, -1).join(\", \")\n                        + \", or \"\n                        + descriptions[descriptions.length - 1];\n            }\n        }\n        function describeFound(found1) {\n            return found1 ? \"\\\"\" + literalEscape(found1) + \"\\\"\" : \"end of input\";\n        }\n        return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n    };\n    return SyntaxError;\n}(Error));\nexport { SyntaxError };\nfunction peg$parse(input, options) {\n    options = options !== undefined ? options : {};\n    var peg$FAILED = {};\n    var peg$startRuleFunctions = { start: peg$parsestart };\n    var peg$startRuleFunction = peg$parsestart;\n    var peg$c0 = function (parts) {\n        return parts.join('');\n    };\n    var peg$c1 = function (messageText) {\n        return __assign({ type: TYPE.literal, value: messageText }, insertLocation());\n    };\n    var peg$c2 = peg$otherExpectation(\"argumentElement\");\n    var peg$c3 = \"{\";\n    var peg$c4 = peg$literalExpectation(\"{\", false);\n    var peg$c5 = \"}\";\n    var peg$c6 = peg$literalExpectation(\"}\", false);\n    var peg$c7 = function (value) {\n        return __assign({ type: TYPE.argument, value: value }, insertLocation());\n    };\n    var peg$c8 = peg$otherExpectation(\"numberSkeletonId\");\n    var peg$c9 = /^['\\/{}]/;\n    var peg$c10 = peg$classExpectation([\"'\", \"/\", \"{\", \"}\"], false, false);\n    var peg$c11 = peg$anyExpectation();\n    var peg$c12 = peg$otherExpectation(\"numberSkeletonTokenOption\");\n    var peg$c13 = \"/\";\n    var peg$c14 = peg$literalExpectation(\"/\", false);\n    var peg$c15 = function (option) { return option; };\n    var peg$c16 = peg$otherExpectation(\"numberSkeletonToken\");\n    var peg$c17 = function (stem, options) {\n        return { stem: stem, options: options };\n    };\n    var peg$c18 = function (tokens) {\n        return __assign({ type: 0 /* number */, tokens: tokens }, insertLocation());\n    };\n    var peg$c19 = \"::\";\n    var peg$c20 = peg$literalExpectation(\"::\", false);\n    var peg$c21 = function (skeleton) { return skeleton; };\n    var peg$c22 = function (style) { return style.replace(/\\s*$/, ''); };\n    var peg$c23 = \",\";\n    var peg$c24 = peg$literalExpectation(\",\", false);\n    var peg$c25 = \"number\";\n    var peg$c26 = peg$literalExpectation(\"number\", false);\n    var peg$c27 = function (value, type, style) {\n        return __assign({ type: type === 'number' ? TYPE.number : type === 'date' ? TYPE.date : TYPE.time, style: style && style[2], value: value }, insertLocation());\n    };\n    var peg$c28 = \"'\";\n    var peg$c29 = peg$literalExpectation(\"'\", false);\n    var peg$c30 = /^[^']/;\n    var peg$c31 = peg$classExpectation([\"'\"], true, false);\n    var peg$c32 = /^[^a-zA-Z'{}]/;\n    var peg$c33 = peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"], \"'\", \"{\", \"}\"], true, false);\n    var peg$c34 = /^[a-zA-Z]/;\n    var peg$c35 = peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"]], false, false);\n    var peg$c36 = function (pattern) {\n        return __assign({ type: 1 /* dateTime */, pattern: pattern }, insertLocation());\n    };\n    var peg$c37 = \"date\";\n    var peg$c38 = peg$literalExpectation(\"date\", false);\n    var peg$c39 = \"time\";\n    var peg$c40 = peg$literalExpectation(\"time\", false);\n    var peg$c41 = \"plural\";\n    var peg$c42 = peg$literalExpectation(\"plural\", false);\n    var peg$c43 = \"selectordinal\";\n    var peg$c44 = peg$literalExpectation(\"selectordinal\", false);\n    var peg$c45 = \"offset:\";\n    var peg$c46 = peg$literalExpectation(\"offset:\", false);\n    var peg$c47 = function (value, pluralType, offset, options) {\n        return __assign({ type: TYPE.plural, pluralType: pluralType === 'plural' ? 'cardinal' : 'ordinal', value: value, offset: offset ? offset[2] : 0, options: options.reduce(function (all, _a) {\n                var id = _a.id, value = _a.value, optionLocation = _a.location;\n                if (id in all) {\n                    error(\"Duplicate option \\\"\" + id + \"\\\" in plural element: \\\"\" + text() + \"\\\"\", location());\n                }\n                all[id] = {\n                    value: value,\n                    location: optionLocation\n                };\n                return all;\n            }, {}) }, insertLocation());\n    };\n    var peg$c48 = \"select\";\n    var peg$c49 = peg$literalExpectation(\"select\", false);\n    var peg$c50 = function (value, options) {\n        return __assign({ type: TYPE.select, value: value, options: options.reduce(function (all, _a) {\n                var id = _a.id, value = _a.value, optionLocation = _a.location;\n                if (id in all) {\n                    error(\"Duplicate option \\\"\" + id + \"\\\" in select element: \\\"\" + text() + \"\\\"\", location());\n                }\n                all[id] = {\n                    value: value,\n                    location: optionLocation\n                };\n                return all;\n            }, {}) }, insertLocation());\n    };\n    var peg$c51 = \"=\";\n    var peg$c52 = peg$literalExpectation(\"=\", false);\n    var peg$c53 = function (id, value) {\n        return __assign({ id: id,\n            value: value }, insertLocation());\n    };\n    var peg$c54 = function (id, value) {\n        return __assign({ id: id,\n            value: value }, insertLocation());\n    };\n    var peg$c55 = peg$otherExpectation(\"whitespace pattern\");\n    var peg$c56 = /^[\\t-\\r \\x85\\u200E\\u200F\\u2028\\u2029]/;\n    var peg$c57 = peg$classExpectation([[\"\\t\", \"\\r\"], \" \", \"\\x85\", \"\\u200E\", \"\\u200F\", \"\\u2028\", \"\\u2029\"], false, false);\n    var peg$c58 = peg$otherExpectation(\"syntax pattern\");\n    var peg$c59 = /^[!-\\/:-@[-\\^`{-~\\xA1-\\xA7\\xA9\\xAB\\xAC\\xAE\\xB0\\xB1\\xB6\\xBB\\xBF\\xD7\\xF7\\u2010-\\u2027\\u2030-\\u203E\\u2041-\\u2053\\u2055-\\u205E\\u2190-\\u245F\\u2500-\\u2775\\u2794-\\u2BFF\\u2E00-\\u2E7F\\u3001-\\u3003\\u3008-\\u3020\\u3030\\uFD3E\\uFD3F\\uFE45\\uFE46]/;\n    var peg$c60 = peg$classExpectation([[\"!\", \"/\"], [\":\", \"@\"], [\"[\", \"^\"], \"`\", [\"{\", \"~\"], [\"\\xA1\", \"\\xA7\"], \"\\xA9\", \"\\xAB\", \"\\xAC\", \"\\xAE\", \"\\xB0\", \"\\xB1\", \"\\xB6\", \"\\xBB\", \"\\xBF\", \"\\xD7\", \"\\xF7\", [\"\\u2010\", \"\\u2027\"], [\"\\u2030\", \"\\u203E\"], [\"\\u2041\", \"\\u2053\"], [\"\\u2055\", \"\\u205E\"], [\"\\u2190\", \"\\u245F\"], [\"\\u2500\", \"\\u2775\"], [\"\\u2794\", \"\\u2BFF\"], [\"\\u2E00\", \"\\u2E7F\"], [\"\\u3001\", \"\\u3003\"], [\"\\u3008\", \"\\u3020\"], \"\\u3030\", \"\\uFD3E\", \"\\uFD3F\", \"\\uFE45\", \"\\uFE46\"], false, false);\n    var peg$c61 = peg$otherExpectation(\"optional whitespace\");\n    var peg$c62 = peg$otherExpectation(\"number\");\n    var peg$c63 = \"-\";\n    var peg$c64 = peg$literalExpectation(\"-\", false);\n    var peg$c65 = function (negative, num) {\n        return num\n            ? negative\n                ? -num\n                : num\n            : 0;\n    };\n    var peg$c66 = peg$otherExpectation(\"apostrophe\");\n    var peg$c67 = peg$otherExpectation(\"double apostrophes\");\n    var peg$c68 = \"''\";\n    var peg$c69 = peg$literalExpectation(\"''\", false);\n    var peg$c70 = function () { return \"'\"; };\n    var peg$c71 = /^[{}]/;\n    var peg$c72 = peg$classExpectation([\"{\", \"}\"], false, false);\n    var peg$c73 = function (escapedChar, quotedChars) {\n        return escapedChar + quotedChars.replace(\"''\", \"'\");\n    };\n    var peg$c74 = /^[^{}]/;\n    var peg$c75 = peg$classExpectation([\"{\", \"}\"], true, false);\n    var peg$c76 = peg$otherExpectation(\"argNameOrNumber\");\n    var peg$c77 = peg$otherExpectation(\"argNumber\");\n    var peg$c78 = \"0\";\n    var peg$c79 = peg$literalExpectation(\"0\", false);\n    var peg$c80 = function () { return 0; };\n    var peg$c81 = /^[1-9]/;\n    var peg$c82 = peg$classExpectation([[\"1\", \"9\"]], false, false);\n    var peg$c83 = /^[0-9]/;\n    var peg$c84 = peg$classExpectation([[\"0\", \"9\"]], false, false);\n    var peg$c85 = function (digits) {\n        return parseInt(digits.join(''), 10);\n    };\n    var peg$c86 = peg$otherExpectation(\"argName\");\n    var peg$currPos = 0;\n    var peg$savedPos = 0;\n    var peg$posDetailsCache = [{ line: 1, column: 1 }];\n    var peg$maxFailPos = 0;\n    var peg$maxFailExpected = [];\n    var peg$silentFails = 0;\n    var peg$result;\n    if (options.startRule !== undefined) {\n        if (!(options.startRule in peg$startRuleFunctions)) {\n            throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n        }\n        peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n    }\n    function text() {\n        return input.substring(peg$savedPos, peg$currPos);\n    }\n    function location() {\n        return peg$computeLocation(peg$savedPos, peg$currPos);\n    }\n    function expected(description, location1) {\n        location1 = location1 !== undefined\n            ? location1\n            : peg$computeLocation(peg$savedPos, peg$currPos);\n        throw peg$buildStructuredError([peg$otherExpectation(description)], input.substring(peg$savedPos, peg$currPos), location1);\n    }\n    function error(message, location1) {\n        location1 = location1 !== undefined\n            ? location1\n            : peg$computeLocation(peg$savedPos, peg$currPos);\n        throw peg$buildSimpleError(message, location1);\n    }\n    function peg$literalExpectation(text1, ignoreCase) {\n        return { type: \"literal\", text: text1, ignoreCase: ignoreCase };\n    }\n    function peg$classExpectation(parts, inverted, ignoreCase) {\n        return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n    }\n    function peg$anyExpectation() {\n        return { type: \"any\" };\n    }\n    function peg$endExpectation() {\n        return { type: \"end\" };\n    }\n    function peg$otherExpectation(description) {\n        return { type: \"other\", description: description };\n    }\n    function peg$computePosDetails(pos) {\n        var details = peg$posDetailsCache[pos];\n        var p;\n        if (details) {\n            return details;\n        }\n        else {\n            p = pos - 1;\n            while (!peg$posDetailsCache[p]) {\n                p--;\n            }\n            details = peg$posDetailsCache[p];\n            details = {\n                line: details.line,\n                column: details.column\n            };\n            while (p < pos) {\n                if (input.charCodeAt(p) === 10) {\n                    details.line++;\n                    details.column = 1;\n                }\n                else {\n                    details.column++;\n                }\n                p++;\n            }\n            peg$posDetailsCache[pos] = details;\n            return details;\n        }\n    }\n    function peg$computeLocation(startPos, endPos) {\n        var startPosDetails = peg$computePosDetails(startPos);\n        var endPosDetails = peg$computePosDetails(endPos);\n        return {\n            start: {\n                offset: startPos,\n                line: startPosDetails.line,\n                column: startPosDetails.column\n            },\n            end: {\n                offset: endPos,\n                line: endPosDetails.line,\n                column: endPosDetails.column\n            }\n        };\n    }\n    function peg$fail(expected1) {\n        if (peg$currPos < peg$maxFailPos) {\n            return;\n        }\n        if (peg$currPos > peg$maxFailPos) {\n            peg$maxFailPos = peg$currPos;\n            peg$maxFailExpected = [];\n        }\n        peg$maxFailExpected.push(expected1);\n    }\n    function peg$buildSimpleError(message, location1) {\n        return new SyntaxError(message, [], \"\", location1);\n    }\n    function peg$buildStructuredError(expected1, found, location1) {\n        return new SyntaxError(SyntaxError.buildMessage(expected1, found), expected1, found, location1);\n    }\n    function peg$parsestart() {\n        var s0;\n        s0 = peg$parsemessage();\n        return s0;\n    }\n    function peg$parsemessage() {\n        var s0, s1;\n        s0 = [];\n        s1 = peg$parsemessageElement();\n        while (s1 !== peg$FAILED) {\n            s0.push(s1);\n            s1 = peg$parsemessageElement();\n        }\n        return s0;\n    }\n    function peg$parsemessageElement() {\n        var s0;\n        s0 = peg$parseliteralElement();\n        if (s0 === peg$FAILED) {\n            s0 = peg$parseargumentElement();\n            if (s0 === peg$FAILED) {\n                s0 = peg$parsesimpleFormatElement();\n                if (s0 === peg$FAILED) {\n                    s0 = peg$parsepluralElement();\n                    if (s0 === peg$FAILED) {\n                        s0 = peg$parseselectElement();\n                    }\n                }\n            }\n        }\n        return s0;\n    }\n    function peg$parsemessageText() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parsedoubleApostrophes();\n        if (s2 === peg$FAILED) {\n            s2 = peg$parsequotedString();\n            if (s2 === peg$FAILED) {\n                s2 = peg$parseunquotedString();\n            }\n        }\n        if (s2 !== peg$FAILED) {\n            while (s2 !== peg$FAILED) {\n                s1.push(s2);\n                s2 = peg$parsedoubleApostrophes();\n                if (s2 === peg$FAILED) {\n                    s2 = peg$parsequotedString();\n                    if (s2 === peg$FAILED) {\n                        s2 = peg$parseunquotedString();\n                    }\n                }\n            }\n        }\n        else {\n            s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c0(s1);\n        }\n        s0 = s1;\n        return s0;\n    }\n    function peg$parseliteralElement() {\n        var s0, s1;\n        s0 = peg$currPos;\n        s1 = peg$parsemessageText();\n        if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c1(s1);\n        }\n        s0 = s1;\n        return s0;\n    }\n    function peg$parseargumentElement() {\n        var s0, s1, s2, s3, s4, s5;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 123) {\n            s1 = peg$c3;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c4);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parse_();\n            if (s2 !== peg$FAILED) {\n                s3 = peg$parseargNameOrNumber();\n                if (s3 !== peg$FAILED) {\n                    s4 = peg$parse_();\n                    if (s4 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 125) {\n                            s5 = peg$c5;\n                            peg$currPos++;\n                        }\n                        else {\n                            s5 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c6);\n                            }\n                        }\n                        if (s5 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c7(s3);\n                            s0 = s1;\n                        }\n                        else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                        }\n                    }\n                    else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c2);\n            }\n        }\n        return s0;\n    }\n    function peg$parsenumberSkeletonId() {\n        var s0, s1, s2, s3, s4;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$currPos;\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parsepatternWhiteSpace();\n        if (s4 === peg$FAILED) {\n            if (peg$c9.test(input.charAt(peg$currPos))) {\n                s4 = input.charAt(peg$currPos);\n                peg$currPos++;\n            }\n            else {\n                s4 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$c10);\n                }\n            }\n        }\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n            s3 = undefined;\n        }\n        else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n            if (input.length > peg$currPos) {\n                s4 = input.charAt(peg$currPos);\n                peg$currPos++;\n            }\n            else {\n                s4 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$c11);\n                }\n            }\n            if (s4 !== peg$FAILED) {\n                s3 = [s3, s4];\n                s2 = s3;\n            }\n            else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n            while (s2 !== peg$FAILED) {\n                s1.push(s2);\n                s2 = peg$currPos;\n                s3 = peg$currPos;\n                peg$silentFails++;\n                s4 = peg$parsepatternWhiteSpace();\n                if (s4 === peg$FAILED) {\n                    if (peg$c9.test(input.charAt(peg$currPos))) {\n                        s4 = input.charAt(peg$currPos);\n                        peg$currPos++;\n                    }\n                    else {\n                        s4 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c10);\n                        }\n                    }\n                }\n                peg$silentFails--;\n                if (s4 === peg$FAILED) {\n                    s3 = undefined;\n                }\n                else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                }\n                if (s3 !== peg$FAILED) {\n                    if (input.length > peg$currPos) {\n                        s4 = input.charAt(peg$currPos);\n                        peg$currPos++;\n                    }\n                    else {\n                        s4 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c11);\n                        }\n                    }\n                    if (s4 !== peg$FAILED) {\n                        s3 = [s3, s4];\n                        s2 = s3;\n                    }\n                    else {\n                        peg$currPos = s2;\n                        s2 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s2;\n                    s2 = peg$FAILED;\n                }\n            }\n        }\n        else {\n            s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n            s0 = input.substring(s0, peg$currPos);\n        }\n        else {\n            s0 = s1;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c8);\n            }\n        }\n        return s0;\n    }\n    function peg$parsenumberSkeletonTokenOption() {\n        var s0, s1, s2;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 47) {\n            s1 = peg$c13;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c14);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parsenumberSkeletonId();\n            if (s2 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c15(s2);\n                s0 = s1;\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c12);\n            }\n        }\n        return s0;\n    }\n    function peg$parsenumberSkeletonToken() {\n        var s0, s1, s2, s3, s4;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = peg$parse_();\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parsenumberSkeletonId();\n            if (s2 !== peg$FAILED) {\n                s3 = [];\n                s4 = peg$parsenumberSkeletonTokenOption();\n                while (s4 !== peg$FAILED) {\n                    s3.push(s4);\n                    s4 = peg$parsenumberSkeletonTokenOption();\n                }\n                if (s3 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c17(s2, s3);\n                    s0 = s1;\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c16);\n            }\n        }\n        return s0;\n    }\n    function peg$parsenumberSkeleton() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parsenumberSkeletonToken();\n        if (s2 !== peg$FAILED) {\n            while (s2 !== peg$FAILED) {\n                s1.push(s2);\n                s2 = peg$parsenumberSkeletonToken();\n            }\n        }\n        else {\n            s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c18(s1);\n        }\n        s0 = s1;\n        return s0;\n    }\n    function peg$parsenumberArgStyle() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2) === peg$c19) {\n            s1 = peg$c19;\n            peg$currPos += 2;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c20);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parsenumberSkeleton();\n            if (s2 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c21(s2);\n                s0 = s1;\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parsemessageText();\n            if (s1 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c22(s1);\n            }\n            s0 = s1;\n        }\n        return s0;\n    }\n    function peg$parsenumberFormatElement() {\n        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 123) {\n            s1 = peg$c3;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c4);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parse_();\n            if (s2 !== peg$FAILED) {\n                s3 = peg$parseargNameOrNumber();\n                if (s3 !== peg$FAILED) {\n                    s4 = peg$parse_();\n                    if (s4 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 44) {\n                            s5 = peg$c23;\n                            peg$currPos++;\n                        }\n                        else {\n                            s5 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c24);\n                            }\n                        }\n                        if (s5 !== peg$FAILED) {\n                            s6 = peg$parse_();\n                            if (s6 !== peg$FAILED) {\n                                if (input.substr(peg$currPos, 6) === peg$c25) {\n                                    s7 = peg$c25;\n                                    peg$currPos += 6;\n                                }\n                                else {\n                                    s7 = peg$FAILED;\n                                    if (peg$silentFails === 0) {\n                                        peg$fail(peg$c26);\n                                    }\n                                }\n                                if (s7 !== peg$FAILED) {\n                                    s8 = peg$parse_();\n                                    if (s8 !== peg$FAILED) {\n                                        s9 = peg$currPos;\n                                        if (input.charCodeAt(peg$currPos) === 44) {\n                                            s10 = peg$c23;\n                                            peg$currPos++;\n                                        }\n                                        else {\n                                            s10 = peg$FAILED;\n                                            if (peg$silentFails === 0) {\n                                                peg$fail(peg$c24);\n                                            }\n                                        }\n                                        if (s10 !== peg$FAILED) {\n                                            s11 = peg$parse_();\n                                            if (s11 !== peg$FAILED) {\n                                                s12 = peg$parsenumberArgStyle();\n                                                if (s12 !== peg$FAILED) {\n                                                    s10 = [s10, s11, s12];\n                                                    s9 = s10;\n                                                }\n                                                else {\n                                                    peg$currPos = s9;\n                                                    s9 = peg$FAILED;\n                                                }\n                                            }\n                                            else {\n                                                peg$currPos = s9;\n                                                s9 = peg$FAILED;\n                                            }\n                                        }\n                                        else {\n                                            peg$currPos = s9;\n                                            s9 = peg$FAILED;\n                                        }\n                                        if (s9 === peg$FAILED) {\n                                            s9 = null;\n                                        }\n                                        if (s9 !== peg$FAILED) {\n                                            s10 = peg$parse_();\n                                            if (s10 !== peg$FAILED) {\n                                                if (input.charCodeAt(peg$currPos) === 125) {\n                                                    s11 = peg$c5;\n                                                    peg$currPos++;\n                                                }\n                                                else {\n                                                    s11 = peg$FAILED;\n                                                    if (peg$silentFails === 0) {\n                                                        peg$fail(peg$c6);\n                                                    }\n                                                }\n                                                if (s11 !== peg$FAILED) {\n                                                    peg$savedPos = s0;\n                                                    s1 = peg$c27(s3, s7, s9);\n                                                    s0 = s1;\n                                                }\n                                                else {\n                                                    peg$currPos = s0;\n                                                    s0 = peg$FAILED;\n                                                }\n                                            }\n                                            else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                            }\n                                        }\n                                        else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                        }\n                                    }\n                                    else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                    }\n                                }\n                                else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                }\n                            }\n                            else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                            }\n                        }\n                        else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                        }\n                    }\n                    else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        return s0;\n    }\n    function peg$parsedateTimeSkeletonLiteral() {\n        var s0, s1, s2, s3;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 39) {\n            s1 = peg$c28;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c29);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = [];\n            s3 = peg$parsedoubleApostrophes();\n            if (s3 === peg$FAILED) {\n                if (peg$c30.test(input.charAt(peg$currPos))) {\n                    s3 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                }\n                else {\n                    s3 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$c31);\n                    }\n                }\n            }\n            if (s3 !== peg$FAILED) {\n                while (s3 !== peg$FAILED) {\n                    s2.push(s3);\n                    s3 = peg$parsedoubleApostrophes();\n                    if (s3 === peg$FAILED) {\n                        if (peg$c30.test(input.charAt(peg$currPos))) {\n                            s3 = input.charAt(peg$currPos);\n                            peg$currPos++;\n                        }\n                        else {\n                            s3 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c31);\n                            }\n                        }\n                    }\n                }\n            }\n            else {\n                s2 = peg$FAILED;\n            }\n            if (s2 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 39) {\n                    s3 = peg$c28;\n                    peg$currPos++;\n                }\n                else {\n                    s3 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$c29);\n                    }\n                }\n                if (s3 !== peg$FAILED) {\n                    s1 = [s1, s2, s3];\n                    s0 = s1;\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n            s0 = [];\n            s1 = peg$parsedoubleApostrophes();\n            if (s1 === peg$FAILED) {\n                if (peg$c32.test(input.charAt(peg$currPos))) {\n                    s1 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                }\n                else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$c33);\n                    }\n                }\n            }\n            if (s1 !== peg$FAILED) {\n                while (s1 !== peg$FAILED) {\n                    s0.push(s1);\n                    s1 = peg$parsedoubleApostrophes();\n                    if (s1 === peg$FAILED) {\n                        if (peg$c32.test(input.charAt(peg$currPos))) {\n                            s1 = input.charAt(peg$currPos);\n                            peg$currPos++;\n                        }\n                        else {\n                            s1 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c33);\n                            }\n                        }\n                    }\n                }\n            }\n            else {\n                s0 = peg$FAILED;\n            }\n        }\n        return s0;\n    }\n    function peg$parsedateTimeSkeletonPattern() {\n        var s0, s1;\n        s0 = [];\n        if (peg$c34.test(input.charAt(peg$currPos))) {\n            s1 = input.charAt(peg$currPos);\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c35);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            while (s1 !== peg$FAILED) {\n                s0.push(s1);\n                if (peg$c34.test(input.charAt(peg$currPos))) {\n                    s1 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                }\n                else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$c35);\n                    }\n                }\n            }\n        }\n        else {\n            s0 = peg$FAILED;\n        }\n        return s0;\n    }\n    function peg$parsedateTimeSkeleton() {\n        var s0, s1, s2, s3;\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        s2 = [];\n        s3 = peg$parsedateTimeSkeletonLiteral();\n        if (s3 === peg$FAILED) {\n            s3 = peg$parsedateTimeSkeletonPattern();\n        }\n        if (s3 !== peg$FAILED) {\n            while (s3 !== peg$FAILED) {\n                s2.push(s3);\n                s3 = peg$parsedateTimeSkeletonLiteral();\n                if (s3 === peg$FAILED) {\n                    s3 = peg$parsedateTimeSkeletonPattern();\n                }\n            }\n        }\n        else {\n            s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n            s1 = input.substring(s1, peg$currPos);\n        }\n        else {\n            s1 = s2;\n        }\n        if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c36(s1);\n        }\n        s0 = s1;\n        return s0;\n    }\n    function peg$parsedateOrTimeArgStyle() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2) === peg$c19) {\n            s1 = peg$c19;\n            peg$currPos += 2;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c20);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parsedateTimeSkeleton();\n            if (s2 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c21(s2);\n                s0 = s1;\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parsemessageText();\n            if (s1 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c22(s1);\n            }\n            s0 = s1;\n        }\n        return s0;\n    }\n    function peg$parsedateOrTimeFormatElement() {\n        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 123) {\n            s1 = peg$c3;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c4);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parse_();\n            if (s2 !== peg$FAILED) {\n                s3 = peg$parseargNameOrNumber();\n                if (s3 !== peg$FAILED) {\n                    s4 = peg$parse_();\n                    if (s4 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 44) {\n                            s5 = peg$c23;\n                            peg$currPos++;\n                        }\n                        else {\n                            s5 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c24);\n                            }\n                        }\n                        if (s5 !== peg$FAILED) {\n                            s6 = peg$parse_();\n                            if (s6 !== peg$FAILED) {\n                                if (input.substr(peg$currPos, 4) === peg$c37) {\n                                    s7 = peg$c37;\n                                    peg$currPos += 4;\n                                }\n                                else {\n                                    s7 = peg$FAILED;\n                                    if (peg$silentFails === 0) {\n                                        peg$fail(peg$c38);\n                                    }\n                                }\n                                if (s7 === peg$FAILED) {\n                                    if (input.substr(peg$currPos, 4) === peg$c39) {\n                                        s7 = peg$c39;\n                                        peg$currPos += 4;\n                                    }\n                                    else {\n                                        s7 = peg$FAILED;\n                                        if (peg$silentFails === 0) {\n                                            peg$fail(peg$c40);\n                                        }\n                                    }\n                                }\n                                if (s7 !== peg$FAILED) {\n                                    s8 = peg$parse_();\n                                    if (s8 !== peg$FAILED) {\n                                        s9 = peg$currPos;\n                                        if (input.charCodeAt(peg$currPos) === 44) {\n                                            s10 = peg$c23;\n                                            peg$currPos++;\n                                        }\n                                        else {\n                                            s10 = peg$FAILED;\n                                            if (peg$silentFails === 0) {\n                                                peg$fail(peg$c24);\n                                            }\n                                        }\n                                        if (s10 !== peg$FAILED) {\n                                            s11 = peg$parse_();\n                                            if (s11 !== peg$FAILED) {\n                                                s12 = peg$parsedateOrTimeArgStyle();\n                                                if (s12 !== peg$FAILED) {\n                                                    s10 = [s10, s11, s12];\n                                                    s9 = s10;\n                                                }\n                                                else {\n                                                    peg$currPos = s9;\n                                                    s9 = peg$FAILED;\n                                                }\n                                            }\n                                            else {\n                                                peg$currPos = s9;\n                                                s9 = peg$FAILED;\n                                            }\n                                        }\n                                        else {\n                                            peg$currPos = s9;\n                                            s9 = peg$FAILED;\n                                        }\n                                        if (s9 === peg$FAILED) {\n                                            s9 = null;\n                                        }\n                                        if (s9 !== peg$FAILED) {\n                                            s10 = peg$parse_();\n                                            if (s10 !== peg$FAILED) {\n                                                if (input.charCodeAt(peg$currPos) === 125) {\n                                                    s11 = peg$c5;\n                                                    peg$currPos++;\n                                                }\n                                                else {\n                                                    s11 = peg$FAILED;\n                                                    if (peg$silentFails === 0) {\n                                                        peg$fail(peg$c6);\n                                                    }\n                                                }\n                                                if (s11 !== peg$FAILED) {\n                                                    peg$savedPos = s0;\n                                                    s1 = peg$c27(s3, s7, s9);\n                                                    s0 = s1;\n                                                }\n                                                else {\n                                                    peg$currPos = s0;\n                                                    s0 = peg$FAILED;\n                                                }\n                                            }\n                                            else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                            }\n                                        }\n                                        else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                        }\n                                    }\n                                    else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                    }\n                                }\n                                else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                }\n                            }\n                            else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                            }\n                        }\n                        else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                        }\n                    }\n                    else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        return s0;\n    }\n    function peg$parsesimpleFormatElement() {\n        var s0;\n        s0 = peg$parsenumberFormatElement();\n        if (s0 === peg$FAILED) {\n            s0 = peg$parsedateOrTimeFormatElement();\n        }\n        return s0;\n    }\n    function peg$parsepluralElement() {\n        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 123) {\n            s1 = peg$c3;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c4);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parse_();\n            if (s2 !== peg$FAILED) {\n                s3 = peg$parseargNameOrNumber();\n                if (s3 !== peg$FAILED) {\n                    s4 = peg$parse_();\n                    if (s4 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 44) {\n                            s5 = peg$c23;\n                            peg$currPos++;\n                        }\n                        else {\n                            s5 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c24);\n                            }\n                        }\n                        if (s5 !== peg$FAILED) {\n                            s6 = peg$parse_();\n                            if (s6 !== peg$FAILED) {\n                                if (input.substr(peg$currPos, 6) === peg$c41) {\n                                    s7 = peg$c41;\n                                    peg$currPos += 6;\n                                }\n                                else {\n                                    s7 = peg$FAILED;\n                                    if (peg$silentFails === 0) {\n                                        peg$fail(peg$c42);\n                                    }\n                                }\n                                if (s7 === peg$FAILED) {\n                                    if (input.substr(peg$currPos, 13) === peg$c43) {\n                                        s7 = peg$c43;\n                                        peg$currPos += 13;\n                                    }\n                                    else {\n                                        s7 = peg$FAILED;\n                                        if (peg$silentFails === 0) {\n                                            peg$fail(peg$c44);\n                                        }\n                                    }\n                                }\n                                if (s7 !== peg$FAILED) {\n                                    s8 = peg$parse_();\n                                    if (s8 !== peg$FAILED) {\n                                        if (input.charCodeAt(peg$currPos) === 44) {\n                                            s9 = peg$c23;\n                                            peg$currPos++;\n                                        }\n                                        else {\n                                            s9 = peg$FAILED;\n                                            if (peg$silentFails === 0) {\n                                                peg$fail(peg$c24);\n                                            }\n                                        }\n                                        if (s9 !== peg$FAILED) {\n                                            s10 = peg$parse_();\n                                            if (s10 !== peg$FAILED) {\n                                                s11 = peg$currPos;\n                                                if (input.substr(peg$currPos, 7) === peg$c45) {\n                                                    s12 = peg$c45;\n                                                    peg$currPos += 7;\n                                                }\n                                                else {\n                                                    s12 = peg$FAILED;\n                                                    if (peg$silentFails === 0) {\n                                                        peg$fail(peg$c46);\n                                                    }\n                                                }\n                                                if (s12 !== peg$FAILED) {\n                                                    s13 = peg$parse_();\n                                                    if (s13 !== peg$FAILED) {\n                                                        s14 = peg$parsenumber();\n                                                        if (s14 !== peg$FAILED) {\n                                                            s12 = [s12, s13, s14];\n                                                            s11 = s12;\n                                                        }\n                                                        else {\n                                                            peg$currPos = s11;\n                                                            s11 = peg$FAILED;\n                                                        }\n                                                    }\n                                                    else {\n                                                        peg$currPos = s11;\n                                                        s11 = peg$FAILED;\n                                                    }\n                                                }\n                                                else {\n                                                    peg$currPos = s11;\n                                                    s11 = peg$FAILED;\n                                                }\n                                                if (s11 === peg$FAILED) {\n                                                    s11 = null;\n                                                }\n                                                if (s11 !== peg$FAILED) {\n                                                    s12 = peg$parse_();\n                                                    if (s12 !== peg$FAILED) {\n                                                        s13 = [];\n                                                        s14 = peg$parsepluralOption();\n                                                        if (s14 !== peg$FAILED) {\n                                                            while (s14 !== peg$FAILED) {\n                                                                s13.push(s14);\n                                                                s14 = peg$parsepluralOption();\n                                                            }\n                                                        }\n                                                        else {\n                                                            s13 = peg$FAILED;\n                                                        }\n                                                        if (s13 !== peg$FAILED) {\n                                                            s14 = peg$parse_();\n                                                            if (s14 !== peg$FAILED) {\n                                                                if (input.charCodeAt(peg$currPos) === 125) {\n                                                                    s15 = peg$c5;\n                                                                    peg$currPos++;\n                                                                }\n                                                                else {\n                                                                    s15 = peg$FAILED;\n                                                                    if (peg$silentFails === 0) {\n                                                                        peg$fail(peg$c6);\n                                                                    }\n                                                                }\n                                                                if (s15 !== peg$FAILED) {\n                                                                    peg$savedPos = s0;\n                                                                    s1 = peg$c47(s3, s7, s11, s13);\n                                                                    s0 = s1;\n                                                                }\n                                                                else {\n                                                                    peg$currPos = s0;\n                                                                    s0 = peg$FAILED;\n                                                                }\n                                                            }\n                                                            else {\n                                                                peg$currPos = s0;\n                                                                s0 = peg$FAILED;\n                                                            }\n                                                        }\n                                                        else {\n                                                            peg$currPos = s0;\n                                                            s0 = peg$FAILED;\n                                                        }\n                                                    }\n                                                    else {\n                                                        peg$currPos = s0;\n                                                        s0 = peg$FAILED;\n                                                    }\n                                                }\n                                                else {\n                                                    peg$currPos = s0;\n                                                    s0 = peg$FAILED;\n                                                }\n                                            }\n                                            else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                            }\n                                        }\n                                        else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                        }\n                                    }\n                                    else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                    }\n                                }\n                                else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                }\n                            }\n                            else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                            }\n                        }\n                        else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                        }\n                    }\n                    else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        return s0;\n    }\n    function peg$parseselectElement() {\n        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 123) {\n            s1 = peg$c3;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c4);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parse_();\n            if (s2 !== peg$FAILED) {\n                s3 = peg$parseargNameOrNumber();\n                if (s3 !== peg$FAILED) {\n                    s4 = peg$parse_();\n                    if (s4 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 44) {\n                            s5 = peg$c23;\n                            peg$currPos++;\n                        }\n                        else {\n                            s5 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c24);\n                            }\n                        }\n                        if (s5 !== peg$FAILED) {\n                            s6 = peg$parse_();\n                            if (s6 !== peg$FAILED) {\n                                if (input.substr(peg$currPos, 6) === peg$c48) {\n                                    s7 = peg$c48;\n                                    peg$currPos += 6;\n                                }\n                                else {\n                                    s7 = peg$FAILED;\n                                    if (peg$silentFails === 0) {\n                                        peg$fail(peg$c49);\n                                    }\n                                }\n                                if (s7 !== peg$FAILED) {\n                                    s8 = peg$parse_();\n                                    if (s8 !== peg$FAILED) {\n                                        if (input.charCodeAt(peg$currPos) === 44) {\n                                            s9 = peg$c23;\n                                            peg$currPos++;\n                                        }\n                                        else {\n                                            s9 = peg$FAILED;\n                                            if (peg$silentFails === 0) {\n                                                peg$fail(peg$c24);\n                                            }\n                                        }\n                                        if (s9 !== peg$FAILED) {\n                                            s10 = peg$parse_();\n                                            if (s10 !== peg$FAILED) {\n                                                s11 = [];\n                                                s12 = peg$parseselectOption();\n                                                if (s12 !== peg$FAILED) {\n                                                    while (s12 !== peg$FAILED) {\n                                                        s11.push(s12);\n                                                        s12 = peg$parseselectOption();\n                                                    }\n                                                }\n                                                else {\n                                                    s11 = peg$FAILED;\n                                                }\n                                                if (s11 !== peg$FAILED) {\n                                                    s12 = peg$parse_();\n                                                    if (s12 !== peg$FAILED) {\n                                                        if (input.charCodeAt(peg$currPos) === 125) {\n                                                            s13 = peg$c5;\n                                                            peg$currPos++;\n                                                        }\n                                                        else {\n                                                            s13 = peg$FAILED;\n                                                            if (peg$silentFails === 0) {\n                                                                peg$fail(peg$c6);\n                                                            }\n                                                        }\n                                                        if (s13 !== peg$FAILED) {\n                                                            peg$savedPos = s0;\n                                                            s1 = peg$c50(s3, s11);\n                                                            s0 = s1;\n                                                        }\n                                                        else {\n                                                            peg$currPos = s0;\n                                                            s0 = peg$FAILED;\n                                                        }\n                                                    }\n                                                    else {\n                                                        peg$currPos = s0;\n                                                        s0 = peg$FAILED;\n                                                    }\n                                                }\n                                                else {\n                                                    peg$currPos = s0;\n                                                    s0 = peg$FAILED;\n                                                }\n                                            }\n                                            else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                            }\n                                        }\n                                        else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                        }\n                                    }\n                                    else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                    }\n                                }\n                                else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                }\n                            }\n                            else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                            }\n                        }\n                        else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                        }\n                    }\n                    else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        return s0;\n    }\n    function peg$parsepluralRuleSelectValue() {\n        var s0, s1, s2, s3;\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 61) {\n            s2 = peg$c51;\n            peg$currPos++;\n        }\n        else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c52);\n            }\n        }\n        if (s2 !== peg$FAILED) {\n            s3 = peg$parsenumber();\n            if (s3 !== peg$FAILED) {\n                s2 = [s2, s3];\n                s1 = s2;\n            }\n            else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n            s0 = input.substring(s0, peg$currPos);\n        }\n        else {\n            s0 = s1;\n        }\n        if (s0 === peg$FAILED) {\n            s0 = peg$parseargName();\n        }\n        return s0;\n    }\n    function peg$parseselectOption() {\n        var s0, s1, s2, s3, s4, s5, s6;\n        s0 = peg$currPos;\n        s1 = peg$parse_();\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parseargName();\n            if (s2 !== peg$FAILED) {\n                s3 = peg$parse_();\n                if (s3 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 123) {\n                        s4 = peg$c3;\n                        peg$currPos++;\n                    }\n                    else {\n                        s4 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c4);\n                        }\n                    }\n                    if (s4 !== peg$FAILED) {\n                        s5 = peg$parsemessage();\n                        if (s5 !== peg$FAILED) {\n                            if (input.charCodeAt(peg$currPos) === 125) {\n                                s6 = peg$c5;\n                                peg$currPos++;\n                            }\n                            else {\n                                s6 = peg$FAILED;\n                                if (peg$silentFails === 0) {\n                                    peg$fail(peg$c6);\n                                }\n                            }\n                            if (s6 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c53(s2, s5);\n                                s0 = s1;\n                            }\n                            else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                            }\n                        }\n                        else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                        }\n                    }\n                    else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        return s0;\n    }\n    function peg$parsepluralOption() {\n        var s0, s1, s2, s3, s4, s5, s6;\n        s0 = peg$currPos;\n        s1 = peg$parse_();\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parsepluralRuleSelectValue();\n            if (s2 !== peg$FAILED) {\n                s3 = peg$parse_();\n                if (s3 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 123) {\n                        s4 = peg$c3;\n                        peg$currPos++;\n                    }\n                    else {\n                        s4 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c4);\n                        }\n                    }\n                    if (s4 !== peg$FAILED) {\n                        s5 = peg$parsemessage();\n                        if (s5 !== peg$FAILED) {\n                            if (input.charCodeAt(peg$currPos) === 125) {\n                                s6 = peg$c5;\n                                peg$currPos++;\n                            }\n                            else {\n                                s6 = peg$FAILED;\n                                if (peg$silentFails === 0) {\n                                    peg$fail(peg$c6);\n                                }\n                            }\n                            if (s6 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c54(s2, s5);\n                                s0 = s1;\n                            }\n                            else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                            }\n                        }\n                        else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                        }\n                    }\n                    else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        return s0;\n    }\n    function peg$parsepatternWhiteSpace() {\n        var s0, s1;\n        peg$silentFails++;\n        if (peg$c56.test(input.charAt(peg$currPos))) {\n            s0 = input.charAt(peg$currPos);\n            peg$currPos++;\n        }\n        else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c57);\n            }\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c55);\n            }\n        }\n        return s0;\n    }\n    function peg$parsepatternSyntax() {\n        var s0, s1;\n        peg$silentFails++;\n        if (peg$c59.test(input.charAt(peg$currPos))) {\n            s0 = input.charAt(peg$currPos);\n            peg$currPos++;\n        }\n        else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c60);\n            }\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c58);\n            }\n        }\n        return s0;\n    }\n    function peg$parse_() {\n        var s0, s1, s2;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parsepatternWhiteSpace();\n        while (s2 !== peg$FAILED) {\n            s1.push(s2);\n            s2 = peg$parsepatternWhiteSpace();\n        }\n        if (s1 !== peg$FAILED) {\n            s0 = input.substring(s0, peg$currPos);\n        }\n        else {\n            s0 = s1;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c61);\n            }\n        }\n        return s0;\n    }\n    function peg$parsenumber() {\n        var s0, s1, s2;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 45) {\n            s1 = peg$c63;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c64);\n            }\n        }\n        if (s1 === peg$FAILED) {\n            s1 = null;\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parseargNumber();\n            if (s2 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c65(s1, s2);\n                s0 = s1;\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c62);\n            }\n        }\n        return s0;\n    }\n    function peg$parseapostrophe() {\n        var s0, s1;\n        peg$silentFails++;\n        if (input.charCodeAt(peg$currPos) === 39) {\n            s0 = peg$c28;\n            peg$currPos++;\n        }\n        else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c29);\n            }\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c66);\n            }\n        }\n        return s0;\n    }\n    function peg$parsedoubleApostrophes() {\n        var s0, s1;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2) === peg$c68) {\n            s1 = peg$c68;\n            peg$currPos += 2;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c69);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c70();\n        }\n        s0 = s1;\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c67);\n            }\n        }\n        return s0;\n    }\n    function peg$parsequotedString() {\n        var s0, s1, s2, s3, s4, s5;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 39) {\n            s1 = peg$c28;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c29);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            if (peg$c71.test(input.charAt(peg$currPos))) {\n                s2 = input.charAt(peg$currPos);\n                peg$currPos++;\n            }\n            else {\n                s2 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$c72);\n                }\n            }\n            if (s2 !== peg$FAILED) {\n                s3 = peg$currPos;\n                s4 = [];\n                if (input.substr(peg$currPos, 2) === peg$c68) {\n                    s5 = peg$c68;\n                    peg$currPos += 2;\n                }\n                else {\n                    s5 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$c69);\n                    }\n                }\n                if (s5 === peg$FAILED) {\n                    if (peg$c30.test(input.charAt(peg$currPos))) {\n                        s5 = input.charAt(peg$currPos);\n                        peg$currPos++;\n                    }\n                    else {\n                        s5 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c31);\n                        }\n                    }\n                }\n                while (s5 !== peg$FAILED) {\n                    s4.push(s5);\n                    if (input.substr(peg$currPos, 2) === peg$c68) {\n                        s5 = peg$c68;\n                        peg$currPos += 2;\n                    }\n                    else {\n                        s5 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c69);\n                        }\n                    }\n                    if (s5 === peg$FAILED) {\n                        if (peg$c30.test(input.charAt(peg$currPos))) {\n                            s5 = input.charAt(peg$currPos);\n                            peg$currPos++;\n                        }\n                        else {\n                            s5 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c31);\n                            }\n                        }\n                    }\n                }\n                if (s4 !== peg$FAILED) {\n                    s3 = input.substring(s3, peg$currPos);\n                }\n                else {\n                    s3 = s4;\n                }\n                if (s3 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 39) {\n                        s4 = peg$c28;\n                        peg$currPos++;\n                    }\n                    else {\n                        s4 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c29);\n                        }\n                    }\n                    if (s4 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c73(s2, s3);\n                        s0 = s1;\n                    }\n                    else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        return s0;\n    }\n    function peg$parseunquotedString() {\n        var s0, s1;\n        s0 = peg$currPos;\n        if (peg$c74.test(input.charAt(peg$currPos))) {\n            s1 = input.charAt(peg$currPos);\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c75);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s0 = input.substring(s0, peg$currPos);\n        }\n        else {\n            s0 = s1;\n        }\n        return s0;\n    }\n    function peg$parseargNameOrNumber() {\n        var s0, s1;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = peg$parseargNumber();\n        if (s1 === peg$FAILED) {\n            s1 = peg$parseargName();\n        }\n        if (s1 !== peg$FAILED) {\n            s0 = input.substring(s0, peg$currPos);\n        }\n        else {\n            s0 = s1;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c76);\n            }\n        }\n        return s0;\n    }\n    function peg$parseargNumber() {\n        var s0, s1, s2, s3, s4;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 48) {\n            s1 = peg$c78;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c79);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c80();\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$currPos;\n            if (peg$c81.test(input.charAt(peg$currPos))) {\n                s2 = input.charAt(peg$currPos);\n                peg$currPos++;\n            }\n            else {\n                s2 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$c82);\n                }\n            }\n            if (s2 !== peg$FAILED) {\n                s3 = [];\n                if (peg$c83.test(input.charAt(peg$currPos))) {\n                    s4 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                }\n                else {\n                    s4 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$c84);\n                    }\n                }\n                while (s4 !== peg$FAILED) {\n                    s3.push(s4);\n                    if (peg$c83.test(input.charAt(peg$currPos))) {\n                        s4 = input.charAt(peg$currPos);\n                        peg$currPos++;\n                    }\n                    else {\n                        s4 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c84);\n                        }\n                    }\n                }\n                if (s3 !== peg$FAILED) {\n                    s2 = [s2, s3];\n                    s1 = s2;\n                }\n                else {\n                    peg$currPos = s1;\n                    s1 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n            }\n            if (s1 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c85(s1);\n            }\n            s0 = s1;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c77);\n            }\n        }\n        return s0;\n    }\n    function peg$parseargName() {\n        var s0, s1, s2, s3, s4;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$currPos;\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parsepatternWhiteSpace();\n        if (s4 === peg$FAILED) {\n            s4 = peg$parsepatternSyntax();\n        }\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n            s3 = undefined;\n        }\n        else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n            if (input.length > peg$currPos) {\n                s4 = input.charAt(peg$currPos);\n                peg$currPos++;\n            }\n            else {\n                s4 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$c11);\n                }\n            }\n            if (s4 !== peg$FAILED) {\n                s3 = [s3, s4];\n                s2 = s3;\n            }\n            else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n            while (s2 !== peg$FAILED) {\n                s1.push(s2);\n                s2 = peg$currPos;\n                s3 = peg$currPos;\n                peg$silentFails++;\n                s4 = peg$parsepatternWhiteSpace();\n                if (s4 === peg$FAILED) {\n                    s4 = peg$parsepatternSyntax();\n                }\n                peg$silentFails--;\n                if (s4 === peg$FAILED) {\n                    s3 = undefined;\n                }\n                else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                }\n                if (s3 !== peg$FAILED) {\n                    if (input.length > peg$currPos) {\n                        s4 = input.charAt(peg$currPos);\n                        peg$currPos++;\n                    }\n                    else {\n                        s4 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c11);\n                        }\n                    }\n                    if (s4 !== peg$FAILED) {\n                        s3 = [s3, s4];\n                        s2 = s3;\n                    }\n                    else {\n                        peg$currPos = s2;\n                        s2 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s2;\n                    s2 = peg$FAILED;\n                }\n            }\n        }\n        else {\n            s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n            s0 = input.substring(s0, peg$currPos);\n        }\n        else {\n            s0 = s1;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c86);\n            }\n        }\n        return s0;\n    }\n    function insertLocation() {\n        return options && options.captureLocation ? {\n            location: location()\n        } : {};\n    }\n    peg$result = peg$startRuleFunction();\n    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n        return peg$result;\n    }\n    else {\n        if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n            peg$fail(peg$endExpectation());\n        }\n        throw peg$buildStructuredError(peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length\n            ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n            : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));\n    }\n}\nexport var parse = peg$parse;\n","import { isPluralElement, isLiteralElement, isSelectElement, } from './types';\nimport { parse } from './parser';\nvar PLURAL_HASHTAG_REGEX = /(^|[^\\\\])#/g;\n/**\n * Whether to convert `#` in plural rule options\n * to `{var, number}`\n * @param el AST Element\n * @param pluralStack current plural stack\n */\nexport function normalizeHashtagInPlural(els) {\n    els.forEach(function (el) {\n        // If we're encountering a plural el\n        if (!isPluralElement(el) && !isSelectElement(el)) {\n            return;\n        }\n        // Go down the options and search for # in any literal element\n        Object.keys(el.options).forEach(function (id) {\n            var _a;\n            var opt = el.options[id];\n            // If we got a match, we have to split this\n            // and inject a NumberElement in the middle\n            var matchingLiteralElIndex = -1;\n            var literalEl = undefined;\n            for (var i = 0; i < opt.value.length; i++) {\n                var el_1 = opt.value[i];\n                if (isLiteralElement(el_1) && PLURAL_HASHTAG_REGEX.test(el_1.value)) {\n                    matchingLiteralElIndex = i;\n                    literalEl = el_1;\n                    break;\n                }\n            }\n            if (literalEl) {\n                var newValue = literalEl.value.replace(PLURAL_HASHTAG_REGEX, \"$1{\" + el.value + \", number}\");\n                var newEls = parse(newValue);\n                (_a = opt.value).splice.apply(_a, [matchingLiteralElIndex, 1].concat(newEls));\n            }\n            normalizeHashtagInPlural(opt.value);\n        });\n    });\n}\n","import { parse as pegParse } from './parser';\nimport { normalizeHashtagInPlural } from './normalize';\nexport * from './types';\nexport * from './parser';\nexport function parse(input, opts) {\n    var els = pegParse(input, opts);\n    if (!opts || opts.normalizeHashtagInPlural !== false) {\n        normalizeHashtagInPlural(els);\n    }\n    return els;\n}\n","/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\n// -- Utilities ----------------------------------------------------------------\nfunction getCacheId(inputs) {\n    return JSON.stringify(inputs.map(function (input) {\n        return input && typeof input === 'object' ? orderedProps(input) : input;\n    }));\n}\nfunction orderedProps(obj) {\n    return Object.keys(obj)\n        .sort()\n        .map(function (k) {\n        var _a;\n        return (_a = {}, _a[k] = obj[k], _a);\n    });\n}\nvar memoizeFormatConstructor = function (FormatConstructor, cache) {\n    if (cache === void 0) { cache = {}; }\n    return function () {\n        var _a;\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var cacheId = getCacheId(args);\n        var format = cacheId && cache[cacheId];\n        if (!format) {\n            format = new ((_a = FormatConstructor).bind.apply(_a, [void 0].concat(args)))();\n            if (cacheId) {\n                cache[cacheId] = format;\n            }\n        }\n        return format;\n    };\n};\nexport default memoizeFormatConstructor;\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { isArgumentElement, isLiteralElement, isDateElement, isTimeElement, isNumberElement, isSelectElement, isPluralElement, } from 'intl-messageformat-parser';\nvar ESCAPE_HASH_REGEX = /\\\\#/g;\nvar FormatError = /** @class */ (function (_super) {\n    __extends(FormatError, _super);\n    function FormatError(msg, variableId) {\n        var _this = _super.call(this, msg) || this;\n        _this.variableId = variableId;\n        return _this;\n    }\n    return FormatError;\n}(Error));\nfunction mergeLiteral(parts) {\n    if (parts.length < 2) {\n        return parts;\n    }\n    return parts.reduce(function (all, part) {\n        var lastPart = all[all.length - 1];\n        if (!lastPart ||\n            lastPart.type !== 0 /* literal */ ||\n            part.type !== 0 /* literal */) {\n            all.push(part);\n        }\n        else {\n            lastPart.value += part.value;\n        }\n        return all;\n    }, []);\n}\n// TODO(skeleton): add skeleton support\nexport function formatToParts(els, locales, formatters, formats, values, \n// For debugging\noriginalMessage) {\n    // Hot path for straight simple msg translations\n    if (els.length === 1 && isLiteralElement(els[0])) {\n        return [\n            {\n                type: 0 /* literal */,\n                value: els[0].value.replace(ESCAPE_HASH_REGEX, '#'),\n            },\n        ];\n    }\n    var result = [];\n    for (var _i = 0, els_1 = els; _i < els_1.length; _i++) {\n        var el = els_1[_i];\n        // Exit early for string parts.\n        if (isLiteralElement(el)) {\n            result.push({\n                type: 0 /* literal */,\n                value: el.value.replace(ESCAPE_HASH_REGEX, '#'),\n            });\n            continue;\n        }\n        var varName = el.value;\n        // Enforce that all required values are provided by the caller.\n        if (!(values && varName in values)) {\n            throw new FormatError(\"The intl string context variable \\\"\" + varName + \"\\\" was not provided to the string \\\"\" + originalMessage + \"\\\"\");\n        }\n        var value = values[varName];\n        if (isArgumentElement(el)) {\n            if (!value || typeof value === 'string' || typeof value === 'number') {\n                value =\n                    typeof value === 'string' || typeof value === 'number'\n                        ? String(value)\n                        : '';\n            }\n            result.push({\n                type: 1 /* argument */,\n                value: value,\n            });\n            continue;\n        }\n        // Recursively format plural and select parts' option — which can be a\n        // nested pattern structure. The choosing of the option to use is\n        // abstracted-by and delegated-to the part helper object.\n        if (isDateElement(el)) {\n            var style = typeof el.style === 'string' ? formats.date[el.style] : undefined;\n            result.push({\n                type: 0 /* literal */,\n                value: formatters\n                    .getDateTimeFormat(locales, style)\n                    .format(value),\n            });\n            continue;\n        }\n        if (isTimeElement(el)) {\n            var style = typeof el.style === 'string' ? formats.time[el.style] : undefined;\n            result.push({\n                type: 0 /* literal */,\n                value: formatters\n                    .getDateTimeFormat(locales, style)\n                    .format(value),\n            });\n            continue;\n        }\n        if (isNumberElement(el)) {\n            var style = typeof el.style === 'string' ? formats.number[el.style] : undefined;\n            result.push({\n                type: 0 /* literal */,\n                value: formatters\n                    .getNumberFormat(locales, style)\n                    .format(value),\n            });\n            continue;\n        }\n        if (isSelectElement(el)) {\n            var opt = el.options[value] || el.options.other;\n            if (!opt) {\n                throw new RangeError(\"Invalid values for \\\"\" + el.value + \"\\\": \\\"\" + value + \"\\\". Options are \\\"\" + Object.keys(el.options).join('\", \"') + \"\\\"\");\n            }\n            result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values));\n            continue;\n        }\n        if (isPluralElement(el)) {\n            var opt = el.options[\"=\" + value];\n            if (!opt) {\n                var rule = formatters\n                    .getPluralRules(locales, { type: el.pluralType })\n                    .select(value - (el.offset || 0));\n                opt = el.options[rule] || el.options.other;\n            }\n            if (!opt) {\n                throw new RangeError(\"Invalid values for \\\"\" + el.value + \"\\\": \\\"\" + value + \"\\\". Options are \\\"\" + Object.keys(el.options).join('\", \"') + \"\\\"\");\n            }\n            result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values));\n            continue;\n        }\n    }\n    return mergeLiteral(result);\n}\nexport function formatToString(els, locales, formatters, formats, values, \n// For debugging\noriginalMessage) {\n    var parts = formatToParts(els, locales, formatters, formats, values, originalMessage);\n    // Hot path for straight simple msg translations\n    if (parts.length === 1) {\n        return parts[0].value;\n    }\n    return parts.reduce(function (all, part) { return (all += part.value); }, '');\n}\n// Singleton\nvar domParser;\nvar TOKEN_DELIMITER = '@@';\nvar TOKEN_REGEX = /@@(.*?)@@/g;\nvar counter = 0;\nfunction generateId() {\n    return Date.now() + \"_\" + ++counter;\n}\nfunction restoreRichPlaceholderMessage(text, objectParts) {\n    return text\n        .split(TOKEN_REGEX)\n        .filter(Boolean)\n        .map(function (c) { return (objectParts[c] != null ? objectParts[c] : c); })\n        .reduce(function (all, c) {\n        if (!all.length) {\n            all.push(c);\n        }\n        else if (typeof c === 'string' &&\n            typeof all[all.length - 1] === 'string') {\n            all[all.length - 1] += c;\n        }\n        else {\n            all.push(c);\n        }\n        return all;\n    }, []);\n}\n/**\n * Not exhaustive, just for sanity check\n */\nvar SIMPLE_XML_REGEX = /(<([0-9a-zA-Z-_]*?)>(.*?)<\\/([0-9a-zA-Z-_]*?)>)|(<[0-9a-zA-Z-_]*?\\/>)/;\nvar TEMPLATE_ID = Date.now() + '@@';\nvar VOID_ELEMENTS = [\n    'area',\n    'base',\n    'br',\n    'col',\n    'embed',\n    'hr',\n    'img',\n    'input',\n    'link',\n    'meta',\n    'param',\n    'source',\n    'track',\n    'wbr',\n];\nexport function formatHTMLMessage(els, locales, formatters, formats, values, \n// For debugging\noriginalMessage) {\n    var parts = formatToParts(els, locales, formatters, formats, values, originalMessage);\n    var objectParts = {};\n    var formattedMessage = parts.reduce(function (all, part) {\n        if (part.type === 0 /* literal */) {\n            return (all += part.value);\n        }\n        var id = generateId();\n        objectParts[id] = part.value;\n        return (all += \"\" + TOKEN_DELIMITER + id + TOKEN_DELIMITER);\n    }, '');\n    // Not designed to filter out aggressively\n    if (!SIMPLE_XML_REGEX.test(formattedMessage)) {\n        return restoreRichPlaceholderMessage(formattedMessage, objectParts);\n    }\n    if (!values) {\n        throw new FormatError('Message has placeholders but no values was given');\n    }\n    if (typeof DOMParser === 'undefined') {\n        throw new FormatError('Cannot format XML message without DOMParser');\n    }\n    if (!domParser) {\n        domParser = new DOMParser();\n    }\n    var content = domParser\n        .parseFromString(\"<formatted-message id=\\\"\" + TEMPLATE_ID + \"\\\">\" + formattedMessage + \"</formatted-message>\", 'text/html')\n        .getElementById(TEMPLATE_ID);\n    if (!content) {\n        throw new FormatError(\"Malformed HTML message \" + formattedMessage);\n    }\n    var tagsToFormat = Object.keys(values).filter(function (varName) { return !!content.getElementsByTagName(varName).length; });\n    // No tags to format\n    if (!tagsToFormat.length) {\n        return restoreRichPlaceholderMessage(formattedMessage, objectParts);\n    }\n    var caseSensitiveTags = tagsToFormat.filter(function (tagName) { return tagName !== tagName.toLowerCase(); });\n    if (caseSensitiveTags.length) {\n        throw new FormatError(\"HTML tag must be lowercased but the following tags are not: \" + caseSensitiveTags.join(', '));\n    }\n    var childNodes = Array.prototype.slice.call(content.childNodes);\n    return childNodes.reduce(function (reconstructedChunks, _a) {\n        var tagName = _a.tagName, outerHTML = _a.outerHTML, textContent = _a.textContent;\n        // Regular text\n        if (!tagName) {\n            var chunks = restoreRichPlaceholderMessage(textContent || '', objectParts);\n            return reconstructedChunks.concat(chunks);\n        }\n        tagName = tagName.toLowerCase();\n        if (~VOID_ELEMENTS.indexOf(tagName)) {\n            throw new FormatError(tagName + \" is a self-closing tag and can not be used, please use another tag name.\");\n        }\n        // Legacy HTML\n        if (!values[tagName]) {\n            var chunks = restoreRichPlaceholderMessage(outerHTML, objectParts);\n            if (chunks.length === 1) {\n                return reconstructedChunks.concat([chunks[0]]);\n            }\n            return reconstructedChunks.concat(chunks);\n        }\n        // HTML Tag replacement\n        var formatFnOrValue = values[tagName];\n        if (typeof formatFnOrValue === 'function') {\n            if (textContent == null) {\n                return reconstructedChunks.concat([\n                    formatFnOrValue(textContent || undefined),\n                ]);\n            }\n            var chunks = restoreRichPlaceholderMessage(textContent, objectParts);\n            return reconstructedChunks.concat([formatFnOrValue.apply(void 0, chunks)]);\n        }\n        return reconstructedChunks.concat([formatFnOrValue]);\n    }, []);\n}\n","/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { parse, isArgumentElement, isLiteralElement, isDateElement, isTimeElement, isNumberElement, isSelectElement, isPluralElement, } from 'intl-messageformat-parser';\nimport memoizeIntlConstructor from 'intl-format-cache';\nimport { formatToString, formatToParts, formatHTMLMessage, } from './formatters';\n// -- MessageFormat --------------------------------------------------------\nfunction resolveLocale(locales) {\n    if (typeof locales === 'string') {\n        locales = [locales];\n    }\n    try {\n        return Intl.NumberFormat.supportedLocalesOf(locales, {\n            // IE11 localeMatcher `lookup` seems to convert `en` -> `en-US`\n            // but not other browsers,\n            localeMatcher: 'best fit',\n        })[0];\n    }\n    catch (e) {\n        return IntlMessageFormat.defaultLocale;\n    }\n}\n// TODO(skeleton): add skeleton support\nfunction prewarmFormatters(els, locales, formatters, formats) {\n    els\n        .filter(function (el) { return !isArgumentElement(el) && !isLiteralElement(el); })\n        .forEach(function (el) {\n        // Recursively format plural and select parts' option — which can be a\n        // nested pattern structure. The choosing of the option to use is\n        // abstracted-by and delegated-to the part helper object.\n        if (isDateElement(el)) {\n            var style = typeof el.style === 'string' ? formats.date[el.style] : undefined;\n            formatters.getDateTimeFormat(locales, style);\n        }\n        if (isTimeElement(el)) {\n            var style = typeof el.style === 'string' ? formats.time[el.style] : undefined;\n            formatters.getDateTimeFormat(locales, style);\n        }\n        if (isNumberElement(el)) {\n            var style = typeof el.style === 'string' ? formats.number[el.style] : undefined;\n            formatters.getNumberFormat(locales, style);\n        }\n        if (isSelectElement(el)) {\n            Object.keys(el.options).forEach(function (id) {\n                return prewarmFormatters(el.options[id].value, locales, formatters, formats);\n            });\n        }\n        if (isPluralElement(el)) {\n            formatters.getPluralRules(locales, { type: el.pluralType });\n            Object.keys(el.options).forEach(function (id) {\n                return prewarmFormatters(el.options[id].value, locales, formatters, formats);\n            });\n        }\n    });\n}\nfunction mergeConfig(c1, c2) {\n    if (!c2) {\n        return c1;\n    }\n    return __assign({}, (c1 || {}), (c2 || {}), Object.keys(c1).reduce(function (all, k) {\n        all[k] = __assign({}, c1[k], (c2[k] || {}));\n        return all;\n    }, {}));\n}\nfunction mergeConfigs(defaultConfig, configs) {\n    if (!configs) {\n        return defaultConfig;\n    }\n    return Object.keys(defaultConfig).reduce(function (all, k) {\n        all[k] = mergeConfig(defaultConfig[k], configs[k]);\n        return all;\n    }, __assign({}, defaultConfig));\n}\nexport function createDefaultFormatters(cache) {\n    if (cache === void 0) { cache = {\n        number: {},\n        dateTime: {},\n        pluralRules: {},\n    }; }\n    return {\n        getNumberFormat: memoizeIntlConstructor(Intl.NumberFormat, cache.number),\n        getDateTimeFormat: memoizeIntlConstructor(Intl.DateTimeFormat, cache.dateTime),\n        getPluralRules: memoizeIntlConstructor(Intl.PluralRules, cache.pluralRules),\n    };\n}\nvar IntlMessageFormat = /** @class */ (function () {\n    function IntlMessageFormat(message, locales, overrideFormats, opts) {\n        var _this = this;\n        if (locales === void 0) { locales = IntlMessageFormat.defaultLocale; }\n        this.formatterCache = {\n            number: {},\n            dateTime: {},\n            pluralRules: {},\n        };\n        this.format = function (values) {\n            return formatToString(_this.ast, _this.locale, _this.formatters, _this.formats, values, _this.message);\n        };\n        this.formatToParts = function (values) {\n            return formatToParts(_this.ast, _this.locale, _this.formatters, _this.formats, values, _this.message);\n        };\n        this.formatHTMLMessage = function (values) {\n            return formatHTMLMessage(_this.ast, _this.locale, _this.formatters, _this.formats, values, _this.message);\n        };\n        this.resolvedOptions = function () { return ({ locale: _this.locale }); };\n        this.getAst = function () { return _this.ast; };\n        if (typeof message === 'string') {\n            this.message = message;\n            if (!IntlMessageFormat.__parse) {\n                throw new TypeError('IntlMessageFormat.__parse must be set to process `message` of type `string`');\n            }\n            // Parse string messages into an AST.\n            this.ast = IntlMessageFormat.__parse(message);\n        }\n        else {\n            this.ast = message;\n        }\n        if (!Array.isArray(this.ast)) {\n            throw new TypeError('A message must be provided as a String or AST.');\n        }\n        // Creates a new object with the specified `formats` merged with the default\n        // formats.\n        this.formats = mergeConfigs(IntlMessageFormat.formats, overrideFormats);\n        // Defined first because it's used to build the format pattern.\n        this.locale = resolveLocale(locales || []);\n        this.formatters =\n            (opts && opts.formatters) || createDefaultFormatters(this.formatterCache);\n        prewarmFormatters(this.ast, this.locale, this.formatters, this.formats);\n    }\n    IntlMessageFormat.defaultLocale = 'en';\n    IntlMessageFormat.__parse = parse;\n    // Default format options used as the prototype of the `formats` provided to the\n    // constructor. These are used when constructing the internal Intl.NumberFormat\n    // and Intl.DateTimeFormat instances.\n    IntlMessageFormat.formats = {\n        number: {\n            currency: {\n                style: 'currency',\n            },\n            percent: {\n                style: 'percent',\n            },\n        },\n        date: {\n            short: {\n                month: 'numeric',\n                day: 'numeric',\n                year: '2-digit',\n            },\n            medium: {\n                month: 'short',\n                day: 'numeric',\n                year: 'numeric',\n            },\n            long: {\n                month: 'long',\n                day: 'numeric',\n                year: 'numeric',\n            },\n            full: {\n                weekday: 'long',\n                month: 'long',\n                day: 'numeric',\n                year: 'numeric',\n            },\n        },\n        time: {\n            short: {\n                hour: 'numeric',\n                minute: 'numeric',\n            },\n            medium: {\n                hour: 'numeric',\n                minute: 'numeric',\n                second: 'numeric',\n            },\n            long: {\n                hour: 'numeric',\n                minute: 'numeric',\n                second: 'numeric',\n                timeZoneName: 'short',\n            },\n            full: {\n                hour: 'numeric',\n                minute: 'numeric',\n                second: 'numeric',\n                timeZoneName: 'short',\n            },\n        },\n    };\n    return IntlMessageFormat;\n}());\nexport { IntlMessageFormat };\nexport default IntlMessageFormat;\n"],"names":["TYPE","isLiteralElement","el","type","literal","isArgumentElement","argument","isNumberElement","number","isDateElement","date","isTimeElement","time","isSelectElement","select","isPluralElement","plural","extendStatics","_super","__extends","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","SyntaxError","Error","buildMessage","expected","found","hex","ch","charCodeAt","toString","toUpperCase","literalEscape","replace","classEscape","describeExpectation","expectation","text","escapedParts","parts","map","part","isArray","inverted","description","expected1","j","descriptions","sort","slice","join","describeExpected","found1","message","location","_this","name","captureStackTrace","parse","input","options","undefined","peg$result","location1","peg$FAILED","peg$startRuleFunctions","start","peg$parsestart","peg$startRuleFunction","peg$c0","peg$c1","messageText","value","insertLocation","peg$c2","peg$otherExpectation","peg$c3","peg$c4","peg$literalExpectation","peg$c5","peg$c6","peg$c7","peg$c8","peg$c9","peg$c10","peg$classExpectation","peg$c11","peg$c12","peg$c13","peg$c14","peg$c15","option","peg$c16","peg$c17","stem","peg$c18","tokens","peg$c19","peg$c20","peg$c21","skeleton","peg$c22","style","peg$c23","peg$c24","peg$c25","peg$c26","peg$c27","peg$c28","peg$c29","peg$c30","peg$c31","peg$c32","peg$c33","peg$c34","peg$c35","peg$c36","pattern","peg$c37","peg$c38","peg$c39","peg$c40","peg$c41","peg$c42","peg$c43","peg$c44","peg$c45","peg$c46","peg$c47","pluralType","offset","reduce","all","_a","id","optionLocation","error","peg$c48","peg$c49","peg$c50","peg$c51","peg$c52","peg$c53","peg$c54","peg$c55","peg$c56","peg$c57","peg$c58","peg$c59","peg$c60","peg$c61","peg$c62","peg$c63","peg$c64","peg$c65","negative","num","peg$c67","peg$c68","peg$c69","peg$c70","peg$c71","peg$c72","peg$c73","escapedChar","quotedChars","peg$c74","peg$c75","peg$c76","peg$c77","peg$c78","peg$c79","peg$c80","peg$c81","peg$c82","peg$c83","peg$c84","peg$c85","digits","parseInt","peg$c86","peg$currPos","peg$savedPos","peg$posDetailsCache","line","column","peg$maxFailPos","peg$maxFailExpected","peg$silentFails","startRule","substring","peg$computeLocation","peg$buildSimpleError","text1","ignoreCase","peg$computePosDetails","pos","details","startPos","endPos","startPosDetails","endPosDetails","end","peg$fail","push","peg$parsemessage","s0","s1","peg$parsemessageElement","peg$parsemessageText","peg$parseliteralElement","s2","s3","s5","peg$parse_","peg$parseargNameOrNumber","peg$parseargumentElement","s7","s9","s10","s11","s12","substr","peg$parsenumberSkeletonToken","peg$parsenumberSkeleton","peg$parsenumberArgStyle","peg$parsenumberFormatElement","peg$parsedateTimeSkeletonLiteral","peg$parsedateTimeSkeletonPattern","peg$parsedateTimeSkeleton","peg$parsedateOrTimeArgStyle","peg$parsedateOrTimeFormatElement","peg$parsesimpleFormatElement","s13","s14","s15","peg$parsenumber","peg$parsepluralOption","peg$parsepluralElement","peg$parseselectOption","peg$parseselectElement","peg$parsedoubleApostrophes","peg$parsequotedString","peg$parseunquotedString","peg$parsenumberSkeletonId","s4","peg$parsepatternWhiteSpace","test","charAt","peg$parsenumberSkeletonTokenOption","s6","peg$parseargName","peg$parsepluralRuleSelectValue","peg$parsepatternSyntax","peg$parseargNumber","captureLocation","PLURAL_HASHTAG_REGEX","opts","els","pegParse","normalizeHashtagInPlural","forEach","keys","opt","matchingLiteralElIndex","literalEl","el_1","newValue","newEls","splice","concat","getCacheId","inputs","JSON","stringify","obj","k","orderedProps","domParser","memoizeFormatConstructor","FormatConstructor","cache","args","_i","cacheId","format","bind","ESCAPE_HASH_REGEX","FormatError","msg","variableId","formatToParts","locales","formatters","formats","values","originalMessage","result","els_1","varName","String","getDateTimeFormat","getNumberFormat","other","RangeError","rule","getPluralRules","lastPart","mergeLiteral","formatToString","TOKEN_DELIMITER","TOKEN_REGEX","counter","restoreRichPlaceholderMessage","objectParts","split","filter","Boolean","c","SIMPLE_XML_REGEX","TEMPLATE_ID","Date","now","VOID_ELEMENTS","formatHTMLMessage","formattedMessage","DOMParser","content","parseFromString","getElementById","tagsToFormat","getElementsByTagName","caseSensitiveTags","tagName","toLowerCase","childNodes","reconstructedChunks","outerHTML","textContent","chunks","indexOf","formatFnOrValue","mergeConfigs","defaultConfig","configs","c1","c2","mergeConfig","createDefaultFormatters","dateTime","pluralRules","memoizeIntlConstructor","Intl","NumberFormat","DateTimeFormat","PluralRules","IntlMessageFormat","defaultLocale","__parse","currency","percent","short","month","day","year","medium","long","full","weekday","hour","minute","second","timeZoneName","overrideFormats","formatterCache","ast","locale","resolvedOptions","getAst","TypeError","supportedLocalesOf","localeMatcher","e","resolveLocale","prewarmFormatters"],"mappings":"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"}