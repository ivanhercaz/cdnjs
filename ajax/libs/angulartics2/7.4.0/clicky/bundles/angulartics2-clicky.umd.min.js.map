{"version":3,"sources":["ng://angulartics2/clicky/clicky.ts"],"names":["Angulartics2Clicky","angulartics2","titleService","this","clicky","console","warn","prototype","startTracking","_this","pageTrack","pipe","filterDeveloperMode","subscribe","x","path","eventTrack","eventOrGoalTrack","action","properties","title","getTitle","log","goal","type","validateType","goalId","revenue","noQueue","indexOf","Injectable","args","providedIn","Angulartics2","Title"],"mappings":"qcAAA,IAAAA,EAAA,WAUE,SAAAA,EACUC,EACAC,GADAC,KAAAF,aAAAA,EACAE,KAAAD,aAAAA,EAEc,oBAAXE,QACTC,QAAQC,KAAK,+DAIjBN,EAAAO,UAAAC,cAAA,WAAA,IAAAC,EAAAN,KACEA,KAAKF,aAAaS,UACfC,KAAKR,KAAKF,aAAaW,uBACvBC,UAAU,SAACC,GAAM,OAAAL,EAAKC,UAAUI,EAAEC,QACrCZ,KAAKF,aAAae,WACfL,KAAKR,KAAKF,aAAaW,uBACvBC,UAAU,SAACC,GAAM,OAAAL,EAAKQ,iBAAiBH,EAAEI,OAAQJ,EAAEK,eAUxDnB,EAAAO,UAAAG,UAAA,SAAUK,OACFK,EAAgBjB,KAAKD,aAAamB,WACxCjB,OAAOkB,IAAIP,EAAMK,EAAO,aAY1BpB,EAAAO,UAAAU,iBAAA,SAAiBC,EAAgBC,GAC/B,GAA+B,oBAApBA,EAAWI,KAAsB,KACpCH,EAAgBD,EAAWC,OAAS,KACpCI,EAAkC,MAAnBL,EAAWK,KAAerB,KAAKsB,aAAaN,EAAWK,MAAQ,KACpFpB,OAAOkB,IAAIJ,EAAQE,EAAOI,OACrB,KACCE,EAAiBP,EAAWI,KAC5BI,EAAkBR,EAAWQ,QACnCvB,OAAOmB,KAAKG,EAAQC,IAAWR,EAAWS,WAItC5B,EAAAO,UAAAkB,aAAR,SAAqBD,GAEnB,OAAkC,EADhB,CAAC,WAAY,QAAS,WAAY,YACnCK,QAAQL,GAAaA,EAAO,gCAvDhDM,EAAAA,WAAUC,KAAA,CAAC,CAAEC,WAAY,oDALjBC,EAAAA,oBAFAC,EAAAA,0JADT","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Title } from '@angular/platform-browser';\n\nimport { Angulartics2 } from 'angulartics2';\nimport { ClickyProperties } from './clicky.interfaces';\n\ndeclare var clicky: any;\n\n@Injectable({ providedIn: 'root' })\nexport class Angulartics2Clicky {\n  constructor(\n    private angulartics2: Angulartics2,\n    private titleService: Title,\n  ) {\n    if (typeof clicky === 'undefined') {\n      console.warn('Angulartics 2 Clicky Plugin: clicky global not found');\n    }\n  }\n\n  startTracking(): void {\n    this.angulartics2.pageTrack\n      .pipe(this.angulartics2.filterDeveloperMode())\n      .subscribe((x) => this.pageTrack(x.path));\n    this.angulartics2.eventTrack\n      .pipe(this.angulartics2.filterDeveloperMode())\n      .subscribe((x) => this.eventOrGoalTrack(x.action, x.properties));\n  }\n\n  /**\n   * Track Page in Clicky\n   *\n   * @param path location\n   *\n   * @link https://clicky.com/help/custom/manual#log\n   */\n  pageTrack(path: string) {\n    const title: string = this.titleService.getTitle();\n    clicky.log(path, title, 'pageview');\n  }\n\n  /**\n   * Track Event Or Goal in Clicky\n   *\n   * @param action Action name\n   * @param properties Definition of 'properties.goal' determines goal vs event tracking\n   *\n   * @link https://clicky.com/help/custom/manual#log\n   * @link https://clicky.com/help/custom/manual#goal\n   */\n  eventOrGoalTrack(action: string, properties: Partial<ClickyProperties>) {\n    if (typeof properties.goal === 'undefined') {\n      const title: string = properties.title || null;\n      const type: string = properties.type != null ? this.validateType(properties.type) : null;\n      clicky.log(action, title, type);\n    } else {\n      const goalId: string = properties.goal;\n      const revenue: number = properties.revenue;\n      clicky.goal(goalId, revenue, !!properties.noQueue);\n    }\n  }\n\n  private validateType(type: string): string {\n    const EventType = ['pageview', 'click', 'download', 'outbound'];\n    return EventType.indexOf(type) > -1 ? type : 'pageview';\n  }\n}\n"]}