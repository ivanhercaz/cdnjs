import{Injectable}from"@angular/core";import{Title}from"@angular/platform-browser";import{NavigationEnd,NavigationError,NavigationStart,Router}from"@angular/router";import{filter}from"rxjs/operators";import{Angulartics2}from"angulartics2";import*as i0 from"@angular/core";import*as i1 from"angulartics2";import*as i2 from"@angular/platform-browser";import*as i3 from"@angular/router";export class AppInsightsDefaults{constructor(){this.userId=null}};export class Angulartics2AppInsights{constructor(t,s,i){this.angulartics2=t,this.title=s,this.router=i,this.loadStartTime=null,this.loadTime=null,this.metrics=null,this.dimensions=null,this.measurements=null,"undefined"==typeof appInsights&&console.warn("appInsights not found");const e=new AppInsightsDefaults;this.angulartics2.settings.appInsights=Object.assign({},e,this.angulartics2.settings.appInsights),this.angulartics2.setUsername.subscribe(t=>this.setUsername(t)),this.angulartics2.setUserProperties.subscribe(t=>this.setUserProperties(t))}startTracking(){this.angulartics2.pageTrack.pipe(this.angulartics2.filterDeveloperMode()).subscribe(t=>this.pageTrack(t.path)),this.angulartics2.eventTrack.pipe(this.angulartics2.filterDeveloperMode()).subscribe(t=>this.eventTrack(t.action,t.properties)),this.angulartics2.exceptionTrack.pipe(this.angulartics2.filterDeveloperMode()).subscribe(t=>this.exceptionTrack(t)),this.router.events.pipe(this.angulartics2.filterDeveloperMode(),filter(t=>t instanceof NavigationStart)).subscribe(t=>this.startTimer()),this.router.events.pipe(filter(t=>t instanceof NavigationError||t instanceof NavigationEnd)).subscribe(t=>this.stopTimer())}startTimer(){this.loadStartTime=Date.now(),this.loadTime=null}stopTimer(){this.loadTime=Date.now()-this.loadStartTime,this.loadStartTime=null}pageTrack(t){appInsights.trackPageView(this.title.getTitle(),t,this.dimensions,this.metrics,this.loadTime)}eventTrack(t,s){appInsights.trackEvent(t,s,this.measurements)}exceptionTrack(t){const s=t.event||t.description||t;appInsights.trackException(s)}setUsername(t){this.angulartics2.settings.appInsights.userId=t,appInsights.setAuthenticatedUserContext(t)}setUserProperties(t){t.userId&&(this.angulartics2.settings.appInsights.userId=t.userId),t.accountId?appInsights.setAuthenticatedUserContext(this.angulartics2.settings.appInsights.userId,t.accountId):appInsights.setAuthenticatedUserContext(this.angulartics2.settings.appInsights.userId)}};Angulartics2AppInsights.decorators=[{type:Injectable,args:[{providedIn:"root"}]}],Angulartics2AppInsights.ctorParameters=(()=>[{type:Angulartics2},{type:Title},{type:Router}]),Angulartics2AppInsights.ngInjectableDef=i0.defineInjectable({factory:function(){return new Angulartics2AppInsights(i0.inject(i1.Angulartics2),i0.inject(i2.Title),i0.inject(i3.Router))},token:Angulartics2AppInsights,providedIn:"root"});