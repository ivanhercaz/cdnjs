{"version":3,"sources":["ng://angulartics2/mixpanel/mixpanel.ts"],"names":["Angulartics2Mixpanel","angulartics2","_this","this","setUsername","subscribe","x","setUserProperties","setUserPropertiesOnce","setSuperProperties","setSuperPropertiesOnce","setAlias","prototype","startTracking","pageTrack","pipe","filterDeveloperMode","path","eventTrack","action","properties","mixpanel","track","page","e","ReferenceError","userId","identify","people","set","set_once","register","register_once","alias","Injectable","args","providedIn","Angulartics2"],"mappings":"iXAAA,IAAAA,EAAA,WASE,SAAAA,EACUC,GADV,IAAAC,EAAAC,KACUA,KAAAF,aAAAA,EAERE,KAAKF,aAAaG,YACfC,UAAU,SAACC,GAAc,OAAAJ,EAAKE,YAAYE,KAC7CH,KAAKF,aAAaM,kBACfF,UAAU,SAACC,GAAM,OAAAJ,EAAKK,kBAAkBD,KAC3CH,KAAKF,aAAaO,sBACfH,UAAU,SAACC,GAAM,OAAAJ,EAAKM,sBAAsBF,KAC/CH,KAAKF,aAAaQ,mBACfJ,UAAU,SAACC,GAAM,OAAAJ,EAAKO,mBAAmBH,KAC5CH,KAAKF,aAAaS,uBACfL,UAAU,SAACC,GAAM,OAAAJ,EAAKQ,uBAAuBJ,KAChDH,KAAKF,aAAaU,SACfN,UAAU,SAACC,GAAM,OAAAJ,EAAKS,SAASL,YAGpCN,EAAAY,UAAAC,cAAA,WAAA,IAAAX,EAAAC,KACEA,KAAKF,aAAaa,UACfC,KAAKZ,KAAKF,aAAae,uBACvBX,UAAU,SAACC,GAAM,OAAAJ,EAAKY,UAAUR,EAAEW,QACrCd,KAAKF,aAAaiB,WACfH,KAAKZ,KAAKF,aAAae,uBACvBX,UAAU,SAACC,GAAM,OAAAJ,EAAKgB,WAAWZ,EAAEa,OAAQb,EAAEc,eAGlDpB,EAAAY,UAAAE,UAAA,SAAUG,GACR,IACEI,SAASC,MAAM,cAAe,CAAEC,KAAMN,IACtC,MAAOO,GACP,KAAMA,aAAaC,gBACjB,MAAMD,IAKZxB,EAAAY,UAAAM,WAAA,SAAWC,EAAgBC,GACzB,IACEC,SAASC,MAAMH,EAAQC,GACvB,MAAOI,GACP,KAAMA,aAAaC,gBACjB,MAAMD,IAKZxB,EAAAY,UAAAR,YAAA,SAAYsB,GACV,IACEL,SAASM,SAASD,GAClB,MAAOF,GACP,KAAMA,aAAaC,gBACjB,MAAMD,IAKZxB,EAAAY,UAAAL,kBAAA,SAAkBa,GAChB,IACEC,SAASO,OAAOC,IAAIT,GACpB,MAAOI,GACP,KAAMA,aAAaC,gBACjB,MAAMD,IAKZxB,EAAAY,UAAAJ,sBAAA,SAAsBY,GACpB,IACEC,SAASO,OAAOE,SAASV,GACzB,MAAOI,GACP,KAAMA,aAAaC,gBACjB,MAAMD,IAKZxB,EAAAY,UAAAH,mBAAA,SAAmBW,GACjB,IACEC,SAASU,SAASX,GAClB,MAAOI,GACP,KAAMA,aAAaC,gBACjB,MAAMD,IAKZxB,EAAAY,UAAAF,uBAAA,SAAuBU,GACrB,IACEC,SAASW,cAAcZ,GACvB,MAAOI,GACP,KAAMA,aAAaC,gBACjB,MAAMD,IAKZxB,EAAAY,UAAAD,SAAA,SAASsB,GACP,IACEZ,SAASY,MAAMA,GACf,MAAOT,GACP,KAAMA,aAAaC,gBACjB,MAAMD,wBAxGbU,EAAAA,WAAUC,KAAA,CAAC,CAAEC,WAAY,oDAJjBC,EAAAA,+IAFT","sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { Angulartics2 } from 'angulartics2';\n\ndeclare var mixpanel: any;\n\n@Injectable({ providedIn: 'root' })\nexport class Angulartics2Mixpanel {\n\n  constructor(\n    private angulartics2: Angulartics2\n  ) {\n    this.angulartics2.setUsername\n      .subscribe((x: string) => this.setUsername(x));\n    this.angulartics2.setUserProperties\n      .subscribe((x) => this.setUserProperties(x));\n    this.angulartics2.setUserPropertiesOnce\n      .subscribe((x) => this.setUserPropertiesOnce(x));\n    this.angulartics2.setSuperProperties\n      .subscribe((x) => this.setSuperProperties(x));\n    this.angulartics2.setSuperPropertiesOnce\n      .subscribe((x) => this.setSuperPropertiesOnce(x));\n    this.angulartics2.setAlias\n      .subscribe((x) => this.setAlias(x));\n  }\n\n  startTracking(): void {\n    this.angulartics2.pageTrack\n      .pipe(this.angulartics2.filterDeveloperMode())\n      .subscribe((x) => this.pageTrack(x.path));\n    this.angulartics2.eventTrack\n      .pipe(this.angulartics2.filterDeveloperMode())\n      .subscribe((x) => this.eventTrack(x.action, x.properties));\n  }\n\n  pageTrack(path: string) {\n    try {\n      mixpanel.track('Page Viewed', { page: path });\n    } catch (e) {\n      if (!(e instanceof ReferenceError)) {\n        throw e;\n      }\n    }\n  }\n\n  eventTrack(action: string, properties: any) {\n    try {\n      mixpanel.track(action, properties);\n    } catch (e) {\n      if (!(e instanceof ReferenceError)) {\n        throw e;\n      }\n    }\n  }\n\n  setUsername(userId: string) {\n    try {\n      mixpanel.identify(userId);\n    } catch (e) {\n      if (!(e instanceof ReferenceError)) {\n        throw e;\n      }\n    }\n  }\n\n  setUserProperties(properties: any) {\n    try {\n      mixpanel.people.set(properties);\n    } catch (e) {\n      if (!(e instanceof ReferenceError)) {\n        throw e;\n      }\n    }\n  }\n\n  setUserPropertiesOnce(properties: any) {\n    try {\n      mixpanel.people.set_once(properties);\n    } catch (e) {\n      if (!(e instanceof ReferenceError)) {\n        throw e;\n      }\n    }\n  }\n\n  setSuperProperties(properties: any) {\n    try {\n      mixpanel.register(properties);\n    } catch (e) {\n      if (!(e instanceof ReferenceError)) {\n        throw e;\n      }\n    }\n  }\n\n  setSuperPropertiesOnce(properties: any) {\n    try {\n      mixpanel.register_once(properties);\n    } catch (e) {\n      if (!(e instanceof ReferenceError)) {\n        throw e;\n      }\n    }\n  }\n\n  setAlias(alias: any) {\n    try {\n      mixpanel.alias(alias);\n    } catch (e) {\n      if (!(e instanceof ReferenceError)) {\n        throw e;\n      }\n    }\n  }\n}\n"]}