import*as tslib_1 from"tslib";import{Injectable}from"@angular/core";import{Angulartics2}from"angulartics2";import*as i0 from"@angular/core";import*as i1 from"angulartics2";export class GoogleAnalyticsDefaults{constructor(){this.additionalAccountNames=[],this.userId=null,this.transport="",this.anonymizeIp=!1}};let Angulartics2GoogleAnalytics=class{constructor(t){this.angulartics2=t,this.dimensionsAndMetrics=[];const s=new GoogleAnalyticsDefaults;this.angulartics2.settings.ga=Object.assign({},s,this.angulartics2.settings.ga),this.settings=this.angulartics2.settings.ga,this.angulartics2.setUsername.subscribe(t=>this.setUsername(t)),this.angulartics2.setUserProperties.subscribe(t=>this.setUserProperties(t))}startTracking(){this.angulartics2.pageTrack.pipe(this.angulartics2.filterDeveloperMode()).subscribe(t=>this.pageTrack(t.path)),this.angulartics2.eventTrack.pipe(this.angulartics2.filterDeveloperMode()).subscribe(t=>this.eventTrack(t.action,t.properties)),this.angulartics2.exceptionTrack.pipe(this.angulartics2.filterDeveloperMode()).subscribe(t=>this.exceptionTrack(t)),this.angulartics2.userTimings.pipe(this.angulartics2.filterDeveloperMode()).subscribe(t=>this.userTimings(t))}pageTrack(t){if("undefined"!=typeof _gaq&&_gaq){_gaq.push(["_trackPageview",t]);for(const s of this.angulartics2.settings.ga.additionalAccountNames)_gaq.push([s+"._trackPageview",t])}if("undefined"!=typeof ga&&ga){if(this.angulartics2.settings.ga.userId){ga("set","&uid",this.angulartics2.settings.ga.userId);for(const t of this.angulartics2.settings.ga.additionalAccountNames)ga(t+".set","&uid",this.angulartics2.settings.ga.userId)}if(this.angulartics2.settings.ga.anonymizeIp){ga("set","anonymizeIp",!0);for(const t of this.angulartics2.settings.ga.additionalAccountNames)ga(t+".set","anonymizeIp",!0)}ga("send","pageview",t);for(const s of this.angulartics2.settings.ga.additionalAccountNames)ga(s+".send","pageview",t)}}eventTrack(t,s){if(s&&s.category||((s=s||{}).category="Event"),s.value){const t=parseInt(s.value,10);s.value=isNaN(t)?0:t}if("undefined"!=typeof ga){const e={eventCategory:s.category,eventAction:t,eventLabel:s.label,eventValue:s.value,nonInteraction:s.noninteraction,page:s.page||location.hash.substring(1)||location.pathname,userId:this.angulartics2.settings.ga.userId,hitCallback:s.hitCallback};this.setDimensionsAndMetrics(s),this.angulartics2.settings.ga.transport?ga("send","event",e,{transport:this.angulartics2.settings.ga.transport}):ga("send","event",e);for(const t of this.angulartics2.settings.ga.additionalAccountNames)ga(t+".send","event",e)}else"undefined"!=typeof _gaq&&_gaq.push(["_trackEvent",s.category,t,s.label,s.value,s.noninteraction])}exceptionTrack(t){void 0===t.fatal&&(console.log('No "fatal" provided, sending with fatal=true'),t.fatal=!0),t.exDescription=t.description;const s={exFatal:t.fatal,exDescription:t.description};ga("send","exception",s);for(const t of this.angulartics2.settings.ga.additionalAccountNames)ga(t+".send","exception",s)}userTimings(t){if(t&&t.timingCategory&&t.timingVar&&t.timingValue){if("undefined"!=typeof ga){ga("send","timing",t);for(const s of this.angulartics2.settings.ga.additionalAccountNames)ga(s+".send","timing",t)}}else console.error("Properties timingCategory, timingVar, and timingValue are required to be set.")}setUsername(t){this.angulartics2.settings.ga.userId=t,"undefined"!=typeof ga&&ga("set","userId",t)}setUserProperties(t){this.setDimensionsAndMetrics(t)}setDimensionsAndMetrics(t){"undefined"!=typeof ga&&(this.dimensionsAndMetrics.forEach(s=>{t.hasOwnProperty(s)||(ga("set",s,void 0),this.angulartics2.settings.ga.additionalAccountNames.forEach(t=>{ga(`${t}.set`,s,void 0)}))}),this.dimensionsAndMetrics=[],Object.keys(t).forEach(s=>{0!==s.lastIndexOf("dimension",0)&&0!==s.lastIndexOf("metric",0)||(ga("set",s,t[s]),this.angulartics2.settings.ga.additionalAccountNames.forEach(e=>{ga(`${e}.set`,s,t[s])}),this.dimensionsAndMetrics.push(s))}))}};Angulartics2GoogleAnalytics.ngInjectableDef=i0.defineInjectable({factory:function(){return new Angulartics2GoogleAnalytics(i0.inject(i1.Angulartics2))},token:Angulartics2GoogleAnalytics,providedIn:"root"}),Angulartics2GoogleAnalytics=tslib_1.__decorate([Injectable({providedIn:"root"}),tslib_1.__metadata("design:paramtypes",[Angulartics2])],Angulartics2GoogleAnalytics);export{Angulartics2GoogleAnalytics};