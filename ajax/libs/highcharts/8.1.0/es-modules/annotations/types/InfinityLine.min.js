"use strict";import H from"../../parts/Globals.js";import U from"../../parts/Utilities.js";var merge=U.merge,Annotation=H.Annotation,MockPoint=Annotation.MockPoint,CrookedLine=Annotation.types.crookedLine,InfinityLine=function(){CrookedLine.apply(this,arguments)};InfinityLine.findEdgeCoordinate=function(i,n,t,e){var o="x"===t?"y":"x";return(n[t]-i[t])*(e-i[o])/(n[o]-i[o])+i[t]},InfinityLine.findEdgePoint=function(i,n){var t,e,o,s=i.series.xAxis,r=n.series.yAxis,y=MockPoint.pointToPixels(i),a=MockPoint.pointToPixels(n),x=a.x-y.x,d=a.y-y.y,p=s.left,f=p+s.width,L=r.top,c=L+r.height,g=x<0?p:f,P=d<0?L:c,A={x:0===x?y.x:g,y:0===d?y.y:P};return 0!==x&&0!==d&&(e=InfinityLine.findEdgeCoordinate(y,a,"y",g),t=InfinityLine.findEdgeCoordinate(y,a,"x",P),e>=L&&e<=c?(A.x=g,A.y=e):(A.x=t,A.y=P)),A.x-=p,A.y-=L,i.series.chart.inverted&&(o=A.x,A.x=A.y,A.y=o),A};var edgePoint=function(i,n){return function(t){var e=t.annotation,o=e.points,s=e.options.typeOptions.type;return"horizontalLine"===s?o=[o[0],new MockPoint(e.chart,o[0].target,{x:o[0].x+1,y:o[0].y,xAxis:o[0].options.xAxis,yAxis:o[0].options.yAxis})]:"verticalLine"===s&&(o=[o[0],new MockPoint(e.chart,o[0].target,{x:o[0].x,y:o[0].y+1,xAxis:o[0].options.xAxis,yAxis:o[0].options.yAxis})]),InfinityLine.findEdgePoint(o[i],o[n])}};InfinityLine.endEdgePoint=edgePoint(0,1),InfinityLine.startEdgePoint=edgePoint(1,0),H.extendAnnotation(InfinityLine,CrookedLine,{addShapes:function(){var i=this.options.typeOptions,n=[this.points[0],InfinityLine.endEdgePoint];i.type.match(/Line/g)&&(n[0]=InfinityLine.startEdgePoint);var t=this.initShape(merge(i.line,{type:"path",points:n}),!1);i.line=t.options}}),Annotation.types.infinityLine=InfinityLine;export default InfinityLine;