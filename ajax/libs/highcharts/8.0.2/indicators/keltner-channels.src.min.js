"use strict";!function(t){"object"==typeof module&&module.exports?module.exports=t.default=t:"function"==typeof define&&define.amd?define("highcharts/indicators/keltner-channels",["highcharts","highcharts/modules/stock"],function(e){return t(e),t.Highcharts=e,t}):t("undefined"!=typeof Highcharts?Highcharts:void 0)}(function(e){var t=e?e._modules:{};function i(e,t,i,n){e.hasOwnProperty(t)||(e[t]=n.apply(null,i))}i(t,"mixins/multipe-lines.js",[t["parts/Globals.js"],t["parts/Utilities.js"]],function(e,t){var u=t.defined,c=t.error,d=t.merge,m=e.each,y=e.seriesTypes.sma;return{pointArrayMap:["top","bottom"],pointValKey:"top",linesApiNames:["bottomLine"],getTranslatedLinesNames:function(t){var i=[];return m(this.pointArrayMap,function(e){e!==t&&i.push("plot"+e.charAt(0).toUpperCase()+e.slice(1))}),i},toYData:function(t){var i=[];return m(this.pointArrayMap,function(e){i.push(t[e])}),i},translate:function(){var n,o,s=this,e=s.pointArrayMap;n=s.getTranslatedLinesNames(),y.prototype.translate.apply(s,arguments),m(s.points,function(i){m(e,function(e,t){null!==(o=i[e])&&(i[n[t]]=s.yAxis.toPixels(o,!0))})})},drawGraph:function(){var i,n=this,e=n.pointValKey,t=n.linesApiNames,o=n.points,s=o.length,r=n.options,a=n.graph,p={options:{gapSize:r.gapSize}},l=[],h=n.getTranslatedLinesNames(e);m(h,function(e,t){for(l[t]=[];s--;)i=o[s],l[t].push({x:i.x,plotX:i.plotX,plotY:i[e],isNull:!u(i[e])});s=o.length}),m(t,function(e,t){l[t]?(n.points=l[t],r[e]?n.options=d(r[e].styles,p):c('Error: "There is no '+e+' in DOCS options declared. Check if linesApiNames are consistent with your DOCS line names." at mixin/multiple-line.js:34'),n.graph=n["graph"+e],y.prototype.drawGraph.call(n),n["graph"+e]=n.graph):c('Error: "'+e+" doesn't have equivalent in pointArrayMap. To many elements in linesApiNames relative to pointArrayMap.\"")}),n.points=o,n.options=r,n.graph=a,y.prototype.drawGraph.call(n)}}}),i(t,"indicators/keltner-channels.src.js",[t["parts/Globals.js"],t["parts/Utilities.js"],t["mixins/multipe-lines.js"]],function(e,t,i){var b=t.correctFloat,n=t.merge,o=t.seriesType,s=e.seriesTypes.sma,T=e.seriesTypes.ema,x=e.seriesTypes.atr;o("keltnerchannels","sma",{params:{period:20,periodATR:10,multiplierATR:2},bottomLine:{styles:{lineWidth:1,lineColor:void 0}},topLine:{styles:{lineWidth:1,lineColor:void 0}},tooltip:{pointFormat:'<span style="color:{point.color}">‚óè</span><b> {series.name}</b><br/>Upper Channel: {point.top}<br/>EMA({series.options.params.period}): {point.middle}<br/>Lower Channel: {point.bottom}<br/>'},marker:{enabled:!1},dataGrouping:{approximation:"averages"},lineWidth:1},n(i,{pointArrayMap:["top","middle","bottom"],pointValKey:"middle",nameBase:"Keltner Channels",nameComponents:["period","periodATR","multiplierATR"],linesApiNames:["topLine","bottomLine"],requiredIndicators:["ema","atr"],init:function(){s.prototype.init.apply(this,arguments),this.options=n({topLine:{styles:{lineColor:this.color}},bottomLine:{styles:{lineColor:this.color}}},this.options)},getValues:function(e,t){var i,n,o,s,r,a,p,l=t.period,h=t.periodATR,u=t.multiplierATR,c=t.index,d=e.yData,m=d?d.length:0,y=[],f=T.prototype.getValues(e,{period:l,index:c}),g=x.prototype.getValues(e,{period:h}),A=[],v=[];if(!(m<l)){for(p=l;p<=m;p++)r=f.values[p-l],a=g.values[p-h],s=r[0],n=b(r[1]+u*a[1]),o=b(r[1]-u*a[1]),i=r[1],y.push([s,n,i,o]),A.push(s),v.push([n,i,o]);return{values:y,xData:A,yData:v}}}}))}),i(t,"masters/indicators/keltner-channels.src.js",[],function(){})});