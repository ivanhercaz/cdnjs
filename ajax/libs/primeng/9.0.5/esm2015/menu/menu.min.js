var __decorate=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,s=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,i);else for(var r=e.length-1;r>=0;r--)(o=e[r])&&(s=(a<3?o(s):a>3?o(t,n,s):o(t,n))||s);return a>3&&s&&Object.defineProperty(t,n,s),s},__param=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}};import{NgModule,Component,ElementRef,OnDestroy,Input,Output,EventEmitter,Renderer2,ViewChild,Inject,forwardRef,ChangeDetectorRef,ChangeDetectionStrategy}from"@angular/core";import{trigger,state,style,transition,animate}from"@angular/animations";import{CommonModule}from"@angular/common";import{DomHandler}from"primeng/dom";import{RouterModule}from"@angular/router";let MenuItemContent=class{constructor(e){this.menu=e}};MenuItemContent.ctorParameters=(()=>[{type:void 0,decorators:[{type:Inject,args:[forwardRef(()=>Menu)]}]}]),__decorate([Input("pMenuItemContent")],MenuItemContent.prototype,"item",void 0),MenuItemContent=__decorate([Component({selector:"[pMenuItemContent]",template:'\n        <a *ngIf="!item.routerLink" [attr.href]="item.url||null" class="ui-menuitem-link ui-corner-all" [attr.tabindex]="item.tabindex ? item.tabindex : \'0\'" [attr.data-automationid]="item.automationId" [attr.target]="item.target" [attr.title]="item.title" [attr.id]="item.id"\n            [ngClass]="{\'ui-state-disabled\':item.disabled}" (click)="menu.itemClick($event, item)" role="menuitem">\n            <span class="ui-menuitem-icon" *ngIf="item.icon" [ngClass]="item.icon"></span>\n            <span class="ui-menuitem-text">{{item.label}}</span>\n        </a>\n        <a *ngIf="item.routerLink" [routerLink]="item.routerLink" [attr.data-automationid]="item.automationId" [queryParams]="item.queryParams" [routerLinkActive]="\'ui-menuitem-link-active\'"\n            [routerLinkActiveOptions]="item.routerLinkActiveOptions||{exact:false}" class="ui-menuitem-link ui-corner-all" [attr.target]="item.target" [attr.id]="item.id" [attr.tabindex]="item.tabindex ? item.tabindex : \'0\'" \n            [attr.title]="item.title" [ngClass]="{\'ui-state-disabled\':item.disabled}" (click)="menu.itemClick($event, item)" role="menuitem"\n            [fragment]="item.fragment" [queryParamsHandling]="item.queryParamsHandling" [preserveFragment]="item.preserveFragment" [skipLocationChange]="item.skipLocationChange" [replaceUrl]="item.replaceUrl" [state]="item.state">\n            <span class="ui-menuitem-icon" *ngIf="item.icon" [ngClass]="item.icon"></span>\n            <span class="ui-menuitem-text">{{item.label}}</span>\n        </a>\n    '}),__param(0,Inject(forwardRef(()=>Menu)))],MenuItemContent);export{MenuItemContent};let Menu=class{constructor(e,t,n){this.el=e,this.renderer=t,this.cd=n,this.autoZIndex=!0,this.baseZIndex=0,this.showTransitionOptions="225ms ease-out",this.hideTransitionOptions="195ms ease-in",this.onShow=new EventEmitter,this.onHide=new EventEmitter}toggle(e){this.visible?this.hide():this.show(e),this.preventDocumentDefault=!0}show(e){this.target=e.currentTarget,this.visible=!0,this.preventDocumentDefault=!0}onOverlayAnimationStart(e){switch(e.toState){case"visible":this.popup&&(this.container=e.element,this.moveOnTop(),this.onShow.emit({}),this.appendOverlay(),DomHandler.absolutePosition(this.container,this.target),this.bindDocumentClickListener(),this.bindDocumentResizeListener());break;case"void":this.onOverlayHide(),this.onHide.emit({})}}appendOverlay(){this.appendTo&&("body"===this.appendTo?document.body.appendChild(this.container):DomHandler.appendChild(this.container,this.appendTo))}restoreOverlayAppend(){this.container&&this.appendTo&&this.el.nativeElement.appendChild(this.container)}moveOnTop(){this.autoZIndex&&(this.container.style.zIndex=String(this.baseZIndex+ ++DomHandler.zindex))}hide(){this.visible=!1,this.cd.detectChanges()}onWindowResize(){this.hide()}itemClick(e,t){t.disabled?e.preventDefault():(t.url||e.preventDefault(),t.command&&t.command({originalEvent:e,item:t}),this.popup&&this.hide())}bindDocumentClickListener(){this.documentClickListener||(this.documentClickListener=this.renderer.listen("document","click",()=>{this.preventDocumentDefault||this.hide(),this.preventDocumentDefault=!1}))}unbindDocumentClickListener(){this.documentClickListener&&(this.documentClickListener(),this.documentClickListener=null)}bindDocumentResizeListener(){this.documentResizeListener=this.onWindowResize.bind(this),window.addEventListener("resize",this.documentResizeListener)}unbindDocumentResizeListener(){this.documentResizeListener&&(window.removeEventListener("resize",this.documentResizeListener),this.documentResizeListener=null)}onOverlayHide(){this.unbindDocumentClickListener(),this.unbindDocumentResizeListener(),this.preventDocumentDefault=!1,this.target=null}ngOnDestroy(){this.popup&&(this.restoreOverlayAppend(),this.onOverlayHide())}hasSubMenu(){if(this.model)for(var e of this.model)if(e.items)return!0;return!1}};Menu.ctorParameters=(()=>[{type:ElementRef},{type:Renderer2},{type:ChangeDetectorRef}]),__decorate([Input()],Menu.prototype,"model",void 0),__decorate([Input()],Menu.prototype,"popup",void 0),__decorate([Input()],Menu.prototype,"style",void 0),__decorate([Input()],Menu.prototype,"styleClass",void 0),__decorate([Input()],Menu.prototype,"appendTo",void 0),__decorate([Input()],Menu.prototype,"autoZIndex",void 0),__decorate([Input()],Menu.prototype,"baseZIndex",void 0),__decorate([Input()],Menu.prototype,"showTransitionOptions",void 0),__decorate([Input()],Menu.prototype,"hideTransitionOptions",void 0),__decorate([ViewChild("container")],Menu.prototype,"containerViewChild",void 0),__decorate([Output()],Menu.prototype,"onShow",void 0),__decorate([Output()],Menu.prototype,"onHide",void 0),Menu=__decorate([Component({selector:"p-menu",template:'\n        <div #container [ngClass]="{\'ui-menu ui-widget ui-widget-content ui-corner-all\': true, \'ui-menu-dynamic ui-shadow\': popup}"\n            [class]="styleClass" [ngStyle]="style" (click)="preventDocumentDefault=true" *ngIf="!popup || visible"\n            [@overlayAnimation]="{value: \'visible\', params: {showTransitionParams: showTransitionOptions, hideTransitionParams: hideTransitionOptions}}" [@.disabled]="popup !== true" (@overlayAnimation.start)="onOverlayAnimationStart($event)">\n            <ul>\n                <ng-template ngFor let-submenu [ngForOf]="model" *ngIf="hasSubMenu()">\n                    <li class="ui-menu-separator ui-widget-content" *ngIf="submenu.separator" [ngClass]="{\'ui-helper-hidden\': submenu.visible === false}"></li>\n                    <li class="ui-submenu-header ui-widget-header ui-corner-all" [attr.data-automationid]="submenu.automationId" *ngIf="!submenu.separator" [ngClass]="{\'ui-helper-hidden\': submenu.visible === false}">{{submenu.label}}</li>\n                    <ng-template ngFor let-item [ngForOf]="submenu.items">\n                        <li class="ui-menu-separator ui-widget-content" *ngIf="item.separator" [ngClass]="{\'ui-helper-hidden\': (item.visible === false ||Â submenu.visible === false)}"></li>\n                        <li class="ui-menuitem ui-widget ui-corner-all" *ngIf="!item.separator" [pMenuItemContent]="item" [ngClass]="{\'ui-helper-hidden\': (item.visible === false || submenu.visible === false)}" [ngStyle]="item.style" [class]="item.styleClass"></li>\n                    </ng-template>\n                </ng-template>\n                <ng-template ngFor let-item [ngForOf]="model" *ngIf="!hasSubMenu()">\n                    <li class="ui-menu-separator ui-widget-content" *ngIf="item.separator" [ngClass]="{\'ui-helper-hidden\': item.visible === false}"></li>\n                    <li class="ui-menuitem ui-widget ui-corner-all" *ngIf="!item.separator" [pMenuItemContent]="item" [ngClass]="{\'ui-helper-hidden\': item.visible === false}" [ngStyle]="item.style" [class]="item.styleClass"></li>\n                </ng-template>\n            </ul>\n        </div>\n    ',animations:[trigger("overlayAnimation",[state("void",style({transform:"translateY(5%)",opacity:0})),state("visible",style({transform:"translateY(0)",opacity:1})),transition("void => visible",animate("{{showTransitionParams}}")),transition("visible => void",animate("{{hideTransitionParams}}"))])],changeDetection:ChangeDetectionStrategy.Default})],Menu);export{Menu};let MenuModule=class{};MenuModule=__decorate([NgModule({imports:[CommonModule,RouterModule],exports:[Menu,RouterModule],declarations:[Menu,MenuItemContent]})],MenuModule);export{MenuModule};