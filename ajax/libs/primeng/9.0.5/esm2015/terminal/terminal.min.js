var __decorate=this&&this.__decorate||function(e,t,n,o){var r,i=arguments.length,s=i<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,o);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(s=(i<3?r(s):i>3?r(t,n,s):r(t,n))||s);return i>3&&s&&Object.defineProperty(t,n,s),s};import{NgModule,Component,AfterViewInit,AfterViewChecked,OnDestroy,Input,ElementRef,ChangeDetectionStrategy}from"@angular/core";import{FormsModule}from"@angular/forms";import{CommonModule}from"@angular/common";import{DomHandler}from"primeng/dom";import{TerminalService}from"./terminalservice";let Terminal=class{constructor(e,t){this.el=e,this.terminalService=t,this.commands=[],this.subscription=t.responseHandler.subscribe(e=>{this.commands[this.commands.length-1].response=e,this.commandProcessed=!0})}ngAfterViewInit(){this.container=DomHandler.find(this.el.nativeElement,".ui-terminal")[0]}ngAfterViewChecked(){this.commandProcessed&&(this.container.scrollTop=this.container.scrollHeight,this.commandProcessed=!1)}set response(e){e&&(this.commands[this.commands.length-1].response=e,this.commandProcessed=!0)}handleCommand(e){13==e.keyCode&&(this.commands.push({text:this.command}),this.terminalService.sendCommand(this.command),this.command="")}focus(e){e.focus()}ngOnDestroy(){this.subscription&&this.subscription.unsubscribe()}};Terminal.ctorParameters=(()=>[{type:ElementRef},{type:TerminalService}]),__decorate([Input()],Terminal.prototype,"welcomeMessage",void 0),__decorate([Input()],Terminal.prototype,"prompt",void 0),__decorate([Input()],Terminal.prototype,"style",void 0),__decorate([Input()],Terminal.prototype,"styleClass",void 0),__decorate([Input()],Terminal.prototype,"response",null);export{Terminal};let TerminalModule=class{};TerminalModule=__decorate([NgModule({imports:[CommonModule,FormsModule],exports:[Terminal=__decorate([Component({selector:"p-terminal",template:'\n        <div [ngClass]="\'ui-terminal ui-widget ui-widget-content ui-corner-all\'" [ngStyle]="style" [class]="styleClass" (click)="focus(in)">\n            <div *ngIf="welcomeMessage">{{welcomeMessage}}</div>\n            <div class="ui-terminal-content">\n                <div *ngFor="let command of commands">\n                    <span>{{prompt}}</span>\n                    <span class="ui-terminal-command">{{command.text}}</span>\n                    <div>{{command.response}}</div>\n                </div>\n            </div>\n            <div>\n                <span class="ui-terminal-content-prompt">{{prompt}}</span>\n                <input #in type="text" [(ngModel)]="command" class="ui-terminal-input" autocomplete="off" (keydown)="handleCommand($event)" autofocus>\n            </div>\n        </div>\n    ',changeDetection:ChangeDetectionStrategy.Default})],Terminal)],declarations:[Terminal]})],TerminalModule);export{TerminalModule};