import{EventEmitter,Inject,forwardRef,ChangeDetectorRef,Input,Output,ContentChildren,Component,ChangeDetectionStrategy,ElementRef,NgModule}from"@angular/core";import{trigger,state,style,transition,animate}from"@angular/animations";import{CommonModule}from"@angular/common";import{Header,PrimeTemplate,SharedModule}from"primeng/api";var __decorate=this&&this.__decorate||function(t,e,n,i){var o,a=arguments.length,c=a<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)c=Reflect.decorate(t,e,n,i);else for(var r=t.length-1;r>=0;r--)(o=t[r])&&(c=(a<3?o(c):a>3?o(e,n,c):o(e,n))||c);return a>3&&c&&Object.defineProperty(e,n,c),c},__param=this&&this.__param||function(t,e){return function(n,i){e(n,i,t)}};let idx=0,AccordionTab=class{constructor(t,e){this.changeDetector=e,this.cache=!0,this.selectedChange=new EventEmitter,this.transitionOptions="400ms cubic-bezier(0.86, 0, 0.07, 1)",this.id=`ui-accordiontab-${idx++}`,this.accordion=t}get selected(){return this._selected}set selected(t){this._selected=t,this.loaded||this.changeDetector.detectChanges()}get animating(){return this._animating}set animating(t){this._animating=t,this.changeDetector.destroyed||this.changeDetector.detectChanges()}ngAfterContentInit(){this.templates.forEach(t=>{switch(t.getType()){case"content":default:this.contentTemplate=t.template}})}toggle(t){if(this.disabled||this.animating)return!1;this.animating=!0;let e=this.findTabIndex();if(this.selected)this.selected=!1,this.accordion.onClose.emit({originalEvent:t,index:e});else{if(!this.accordion.multiple)for(var n=0;n<this.accordion.tabs.length;n++)this.accordion.tabs[n].selected=!1,this.accordion.tabs[n].selectedChange.emit(!1);this.selected=!0,this.loaded=!0,this.accordion.onOpen.emit({originalEvent:t,index:e})}this.selectedChange.emit(this.selected),this.accordion.updateActiveIndex(),t.preventDefault()}findTabIndex(){let t=-1;for(var e=0;e<this.accordion.tabs.length;e++)if(this.accordion.tabs[e]==this){t=e;break}return t}get hasHeaderFacet(){return this.headerFacet&&this.headerFacet.length>0}onToggleDone(t){this.animating=!1}onKeydown(t){32!==t.which&&13!==t.which||(this.toggle(t),t.preventDefault())}ngOnDestroy(){this.accordion.tabs.splice(this.findTabIndex(),1)}};AccordionTab.ctorParameters=(()=>[{type:void 0,decorators:[{type:Inject,args:[forwardRef(()=>Accordion)]}]},{type:ChangeDetectorRef}]),__decorate([Input()],AccordionTab.prototype,"header",void 0),__decorate([Input()],AccordionTab.prototype,"disabled",void 0),__decorate([Input()],AccordionTab.prototype,"cache",void 0),__decorate([Output()],AccordionTab.prototype,"selectedChange",void 0),__decorate([Input()],AccordionTab.prototype,"transitionOptions",void 0),__decorate([ContentChildren(Header)],AccordionTab.prototype,"headerFacet",void 0),__decorate([ContentChildren(PrimeTemplate)],AccordionTab.prototype,"templates",void 0),__decorate([Input()],AccordionTab.prototype,"selected",null),AccordionTab=__decorate([Component({selector:"p-accordionTab",template:'\n        <div class="ui-accordion-header ui-state-default ui-corner-all" [ngClass]="{\'ui-state-active\': selected,\'ui-state-disabled\':disabled}">\n            <a [attr.tabindex]="disabled ? -1 : 0" [attr.id]="id" [attr.aria-controls]="id + \'-content\'" role="tab" [attr.aria-expanded]="selected" (click)="toggle($event)" \n                (keydown)="onKeydown($event)">\n                <span class="ui-accordion-toggle-icon" [ngClass]="selected ? accordion.collapseIcon : accordion.expandIcon"></span>\n                <span class="ui-accordion-header-text" *ngIf="!hasHeaderFacet">\n                    {{header}}\n                </span>\n                <ng-content select="p-header" *ngIf="hasHeaderFacet"></ng-content>\n            </a>\n        </div>\n        <div [attr.id]="id + \'-content\'" class="ui-accordion-content-wrapper" [@tabContent]="selected ? {value: \'visible\', params: {transitionParams: animating ? transitionOptions : \'0ms\', height: \'*\'}} : {value: \'hidden\', params: {transitionParams: transitionOptions, height: \'0\'}}" (@tabContent.done)="onToggleDone($event)"\n            [ngClass]="{\'ui-accordion-content-wrapper-overflown\': !selected||animating}" \n            role="region" [attr.aria-hidden]="!selected" [attr.aria-labelledby]="id">\n            <div class="ui-accordion-content ui-widget-content">\n                <ng-content></ng-content>\n                <ng-container *ngIf="contentTemplate && (cache ? loaded : selected)">\n                    <ng-container *ngTemplateOutlet="contentTemplate"></ng-container>\n                </ng-container>\n            </div>\n        </div>\n    ',animations:[trigger("tabContent",[state("hidden",style({height:"0"})),state("void",style({height:"{{height}}"}),{params:{height:"0"}}),state("visible",style({height:"*"})),transition("visible <=> hidden",animate("{{transitionParams}}")),transition("void => hidden",animate("{{transitionParams}}")),transition("void => visible",animate("{{transitionParams}}"))])],changeDetection:ChangeDetectionStrategy.Default}),__param(0,Inject(forwardRef(()=>Accordion)))],AccordionTab);let Accordion=class{constructor(t,e){this.el=t,this.changeDetector=e,this.onClose=new EventEmitter,this.onOpen=new EventEmitter,this.expandIcon="pi pi-fw pi-chevron-right",this.collapseIcon="pi pi-fw pi-chevron-down",this.activeIndexChange=new EventEmitter,this.tabs=[]}ngAfterContentInit(){this.initTabs(),this.tabListSubscription=this.tabList.changes.subscribe(t=>{this.initTabs(),this.changeDetector.markForCheck()})}initTabs(){this.tabs=this.tabList.toArray(),this.updateSelectionState()}getBlockableElement(){return this.el.nativeElement.children[0]}get activeIndex(){return this._activeIndex}set activeIndex(t){this._activeIndex=t,this.preventActiveIndexPropagation?this.preventActiveIndexPropagation=!1:this.updateSelectionState()}updateSelectionState(){if(this.tabs&&this.tabs.length&&null!=this._activeIndex)for(let t=0;t<this.tabs.length;t++){let e=this.multiple?this._activeIndex.includes(t):t===this._activeIndex;e!==this.tabs[t].selected&&(this.tabs[t].animating=!0,this.tabs[t].selected=e,this.tabs[t].selectedChange.emit(e))}}updateActiveIndex(){let t=this.multiple?[]:null;this.tabs.forEach((e,n)=>{if(e.selected){if(!this.multiple)return void(t=n);t.push(n)}}),this.preventActiveIndexPropagation=!0,this.activeIndexChange.emit(t)}ngOnDestroy(){this.tabListSubscription&&this.tabListSubscription.unsubscribe()}};Accordion.ctorParameters=(()=>[{type:ElementRef},{type:ChangeDetectorRef}]),__decorate([Input()],Accordion.prototype,"multiple",void 0),__decorate([Output()],Accordion.prototype,"onClose",void 0),__decorate([Output()],Accordion.prototype,"onOpen",void 0),__decorate([Input()],Accordion.prototype,"style",void 0),__decorate([Input()],Accordion.prototype,"styleClass",void 0),__decorate([Input()],Accordion.prototype,"expandIcon",void 0),__decorate([Input()],Accordion.prototype,"collapseIcon",void 0),__decorate([Output()],Accordion.prototype,"activeIndexChange",void 0),__decorate([ContentChildren(AccordionTab)],Accordion.prototype,"tabList",void 0),__decorate([Input()],Accordion.prototype,"activeIndex",null);let AccordionModule=class{};AccordionModule=__decorate([NgModule({imports:[CommonModule],exports:[Accordion=__decorate([Component({selector:"p-accordion",template:'\n        <div [ngClass]="\'ui-accordion ui-widget ui-helper-reset\'" [ngStyle]="style" [class]="styleClass" role="tablist">\n            <ng-content></ng-content>\n        </div>\n    '})],Accordion),AccordionTab,SharedModule],declarations:[Accordion,AccordionTab]})],AccordionModule);export{Accordion,AccordionModule,AccordionTab};