import{forwardRef,EventEmitter,Input,Output,ViewChild,Component,NgModule}from"@angular/core";import{CommonModule}from"@angular/common";import{NG_VALUE_ACCESSOR}from"@angular/forms";var __decorate=this&&this.__decorate||function(t,e,o,n){var i,c=arguments.length,l=c<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(t,e,o,n);else for(var s=t.length-1;s>=0;s--)(i=t[s])&&(l=(c<3?i(l):c>3?i(e,o,l):i(e,o))||l);return c>3&&l&&Object.defineProperty(e,o,l),l};const TOGGLEBUTTON_VALUE_ACCESSOR={provide:NG_VALUE_ACCESSOR,useExisting:forwardRef(()=>ToggleButton),multi:!0};let ToggleButton=class{constructor(){this.onLabel="Yes",this.offLabel="No",this.iconPos="left",this.onChange=new EventEmitter,this.checked=!1,this.focus=!1,this.onModelChange=(()=>{}),this.onModelTouched=(()=>{})}ngAfterViewInit(){this.checkboxViewChild&&(this.checkbox=this.checkboxViewChild.nativeElement)}toggle(t){this.disabled||(this.checked=!this.checked,this.onModelChange(this.checked),this.onModelTouched(),this.onChange.emit({originalEvent:t,checked:this.checked}),this.checkbox&&this.checkbox.focus())}onFocus(){this.focus=!0}onBlur(){this.focus=!1,this.onModelTouched()}writeValue(t){this.checked=t}registerOnChange(t){this.onModelChange=t}registerOnTouched(t){this.onModelTouched=t}setDisabledState(t){this.disabled=t}get hasOnLabel(){return this.onLabel&&this.onLabel.length>0}get hasOffLabel(){return this.onLabel&&this.onLabel.length>0}};__decorate([Input()],ToggleButton.prototype,"onLabel",void 0),__decorate([Input()],ToggleButton.prototype,"offLabel",void 0),__decorate([Input()],ToggleButton.prototype,"onIcon",void 0),__decorate([Input()],ToggleButton.prototype,"offIcon",void 0),__decorate([Input()],ToggleButton.prototype,"disabled",void 0),__decorate([Input()],ToggleButton.prototype,"style",void 0),__decorate([Input()],ToggleButton.prototype,"styleClass",void 0),__decorate([Input()],ToggleButton.prototype,"inputId",void 0),__decorate([Input()],ToggleButton.prototype,"tabindex",void 0),__decorate([Input()],ToggleButton.prototype,"iconPos",void 0),__decorate([Output()],ToggleButton.prototype,"onChange",void 0),__decorate([ViewChild("checkbox",{static:!0})],ToggleButton.prototype,"checkboxViewChild",void 0);let ToggleButtonModule=class{};ToggleButtonModule=__decorate([NgModule({imports:[CommonModule],exports:[ToggleButton=__decorate([Component({selector:"p-toggleButton",template:'\n        <div [ngClass]="{\'ui-button ui-togglebutton ui-widget ui-state-default ui-corner-all\': true, \'ui-button-text-only\': (!onIcon && !offIcon), \n                \'ui-button-text-icon-left\': (onIcon && offIcon && hasOnLabel && hasOffLabel && iconPos === \'left\'), \n                \'ui-button-text-icon-right\': (onIcon && offIcon && hasOnLabel && hasOffLabel && iconPos === \'right\'),\'ui-button-icon-only\': (onIcon && offIcon && !hasOnLabel && !hasOffLabel),\n                \'ui-state-active\': checked,\'ui-state-focus\':focus,\'ui-state-disabled\':disabled}" [ngStyle]="style" [class]="styleClass" \n                (click)="toggle($event)" (keydown.enter)="toggle($event)">\n            <div class="ui-helper-hidden-accessible">\n                <input #checkbox type="checkbox" [attr.id]="inputId" [checked]="checked" (focus)="onFocus()" (blur)="onBlur()" [attr.tabindex]="tabindex">\n            </div>\n            <span *ngIf="onIcon||offIcon" class="ui-button-icon-left" [class]="checked ? this.onIcon : this.offIcon" [ngClass]="{\'ui-button-icon-left\': (iconPos === \'left\'), \n            \'ui-button-icon-right\': (iconPos === \'right\')}"></span>\n            <span class="ui-button-text ui-unselectable-text">{{checked ? hasOnLabel ? onLabel : \'ui-btn\' : hasOffLabel ? offLabel : \'ui-btn\'}}</span>\n        </div>\n    ',providers:[TOGGLEBUTTON_VALUE_ACCESSOR]})],ToggleButton)],declarations:[ToggleButton]})],ToggleButtonModule);export{TOGGLEBUTTON_VALUE_ACCESSOR,ToggleButton,ToggleButtonModule};