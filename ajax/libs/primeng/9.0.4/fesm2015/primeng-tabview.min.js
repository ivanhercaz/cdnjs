import{EventEmitter,Input,Output,Component,ViewContainerRef,ChangeDetectorRef,ContentChildren,ChangeDetectionStrategy,ElementRef,NgModule}from"@angular/core";import{CommonModule}from"@angular/common";import{TooltipModule}from"primeng/tooltip";import{PrimeTemplate,SharedModule}from"primeng/api";var __decorate=this&&this.__decorate||function(e,t,a,n){var i,o=arguments.length,l=o<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,a):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(e,t,a,n);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(l=(o<3?i(l):o>3?i(t,a,l):i(t,a))||l);return o>3&&l&&Object.defineProperty(t,a,l),l};let idx=0,TabViewNav=class{constructor(){this.orientation="top",this.onTabClick=new EventEmitter,this.onTabCloseClick=new EventEmitter}getDefaultHeaderClass(e){let t="ui-state-default ui-corner-"+this.orientation;return e.headerStyleClass&&(t=t+" "+e.headerStyleClass),t}clickTab(e,t){this.onTabClick.emit({originalEvent:e,tab:t})}clickClose(e,t){this.onTabCloseClick.emit({originalEvent:e,tab:t})}};__decorate([Input()],TabViewNav.prototype,"tabs",void 0),__decorate([Input()],TabViewNav.prototype,"orientation",void 0),__decorate([Output()],TabViewNav.prototype,"onTabClick",void 0),__decorate([Output()],TabViewNav.prototype,"onTabCloseClick",void 0),TabViewNav=__decorate([Component({selector:"[p-tabViewNav]",host:{"[class.ui-tabview-nav]":"true","[class.ui-helper-reset]":"true","[class.ui-helper-clearfix]":"true","[class.ui-widget-header]":"true","[class.ui-corner-all]":"true"},template:'\n        <ng-template ngFor let-tab [ngForOf]="tabs">\n            <li [class]="getDefaultHeaderClass(tab)" [ngStyle]="tab.headerStyle" role="presentation"\n                [ngClass]="{\'ui-tabview-selected ui-state-active\': tab.selected, \'ui-state-disabled\': tab.disabled}"\n                (click)="clickTab($event,tab)" *ngIf="!tab.closed" tabindex="0" (keydown.enter)="clickTab($event,tab)">\n                <a [attr.id]="tab.id + \'-label\'" role="tab" [attr.aria-selected]="tab.selected" [attr.aria-controls]="tab.id" [pTooltip]="tab.tooltip" [tooltipPosition]="tab.tooltipPosition"\n                    [attr.aria-selected]="tab.selected" [positionStyle]="tab.tooltipPositionStyle" [tooltipStyleClass]="tab.tooltipStyleClass">\n                    <ng-container *ngIf="!tab.headerTemplate" >\n                        <span class="ui-tabview-left-icon" [ngClass]="tab.leftIcon" *ngIf="tab.leftIcon"></span>\n                        <span class="ui-tabview-title">{{tab.header}}</span>\n                        <span class="ui-tabview-right-icon" [ngClass]="tab.rightIcon" *ngIf="tab.rightIcon"></span>\n                    </ng-container>\n                    <ng-container *ngIf="tab.headerTemplate">\n                        <ng-container *ngTemplateOutlet="tab.headerTemplate"></ng-container>\n                    </ng-container>\n                </a>\n                <span *ngIf="tab.closable" class="ui-tabview-close pi pi-times" (click)="clickClose($event,tab)"></span>\n            </li>\n        </ng-template>\n    '})],TabViewNav);let TabPanel=class{constructor(e,t){this.viewContainer=e,this.cd=t,this.cache=!0,this.tooltipPosition="top",this.tooltipPositionStyle="absolute",this.id=`ui-tabpanel-${idx++}`}ngAfterContentInit(){this.templates.forEach(e=>{switch(e.getType()){case"header":this.headerTemplate=e.template;break;case"content":default:this.contentTemplate=e.template}})}get selected(){return this._selected}set selected(e){this._selected=e,this.loaded||this.cd.detectChanges(),this.loaded=!0}ngOnDestroy(){this.view=null}};TabPanel.ctorParameters=(()=>[{type:ViewContainerRef},{type:ChangeDetectorRef}]),__decorate([Input()],TabPanel.prototype,"header",void 0),__decorate([Input()],TabPanel.prototype,"disabled",void 0),__decorate([Input()],TabPanel.prototype,"closable",void 0),__decorate([Input()],TabPanel.prototype,"headerStyle",void 0),__decorate([Input()],TabPanel.prototype,"headerStyleClass",void 0),__decorate([Input()],TabPanel.prototype,"leftIcon",void 0),__decorate([Input()],TabPanel.prototype,"rightIcon",void 0),__decorate([Input()],TabPanel.prototype,"cache",void 0),__decorate([Input()],TabPanel.prototype,"tooltip",void 0),__decorate([Input()],TabPanel.prototype,"tooltipPosition",void 0),__decorate([Input()],TabPanel.prototype,"tooltipPositionStyle",void 0),__decorate([Input()],TabPanel.prototype,"tooltipStyleClass",void 0),__decorate([ContentChildren(PrimeTemplate)],TabPanel.prototype,"templates",void 0),__decorate([Input()],TabPanel.prototype,"selected",null),TabPanel=__decorate([Component({selector:"p-tabPanel",template:'\n        <div [attr.id]="id" class="ui-tabview-panel ui-widget-content" [ngClass]="{\'ui-helper-hidden\': !selected}"\n            role="tabpanel" [attr.aria-hidden]="!selected" [attr.aria-labelledby]="id + \'-label\'" *ngIf="!closed">\n            <ng-content></ng-content>\n            <ng-container *ngIf="contentTemplate && (cache ? loaded : selected)">\n                <ng-container *ngTemplateOutlet="contentTemplate"></ng-container>\n            </ng-container>\n        </div>\n    ',changeDetection:ChangeDetectionStrategy.Default})],TabPanel);let TabView=class{constructor(e){this.el=e,this.orientation="top",this.onChange=new EventEmitter,this.onClose=new EventEmitter,this.activeIndexChange=new EventEmitter}ngAfterContentInit(){this.initTabs(),this.tabPanels.changes.subscribe(e=>{this.initTabs()})}initTabs(){this.tabs=this.tabPanels.toArray(),!this.findSelectedTab()&&this.tabs.length&&(null!=this.activeIndex&&this.tabs.length>this.activeIndex?this.tabs[this.activeIndex].selected=!0:this.tabs[0].selected=!0)}open(e,t){if(t.disabled)e&&e.preventDefault();else{if(!t.selected){let a=this.findSelectedTab();a&&(a.selected=!1),t.selected=!0;let n=this.findTabIndex(t);this.preventActiveIndexPropagation=!0,this.activeIndexChange.emit(n),this.onChange.emit({originalEvent:e,index:n})}e&&e.preventDefault()}}close(e,t){this.controlClose?this.onClose.emit({originalEvent:e,index:this.findTabIndex(t),close:()=>{this.closeTab(t)}}):(this.closeTab(t),this.onClose.emit({originalEvent:e,index:this.findTabIndex(t)})),e.stopPropagation()}closeTab(e){if(!e.disabled){if(e.selected){e.selected=!1;for(let t=0;t<this.tabs.length;t++){let a=this.tabs[t];if(!a.closed&&!e.disabled){a.selected=!0;break}}}e.closed=!0}}findSelectedTab(){for(let e=0;e<this.tabs.length;e++)if(this.tabs[e].selected)return this.tabs[e];return null}findTabIndex(e){let t=-1;for(let a=0;a<this.tabs.length;a++)if(this.tabs[a]==e){t=a;break}return t}getBlockableElement(){return this.el.nativeElement.children[0]}get activeIndex(){return this._activeIndex}set activeIndex(e){this._activeIndex=e,this.preventActiveIndexPropagation?this.preventActiveIndexPropagation=!1:this.tabs&&this.tabs.length&&null!=this._activeIndex&&this.tabs.length>this._activeIndex&&(this.findSelectedTab().selected=!1,this.tabs[this._activeIndex].selected=!0)}};TabView.ctorParameters=(()=>[{type:ElementRef}]),__decorate([Input()],TabView.prototype,"orientation",void 0),__decorate([Input()],TabView.prototype,"style",void 0),__decorate([Input()],TabView.prototype,"styleClass",void 0),__decorate([Input()],TabView.prototype,"controlClose",void 0),__decorate([ContentChildren(TabPanel)],TabView.prototype,"tabPanels",void 0),__decorate([Output()],TabView.prototype,"onChange",void 0),__decorate([Output()],TabView.prototype,"onClose",void 0),__decorate([Output()],TabView.prototype,"activeIndexChange",void 0),__decorate([Input()],TabView.prototype,"activeIndex",null);let TabViewModule=class{};TabViewModule=__decorate([NgModule({imports:[CommonModule,SharedModule,TooltipModule],exports:[TabView=__decorate([Component({selector:"p-tabView",template:'\n        <div [ngClass]="\'ui-tabview ui-widget ui-widget-content ui-corner-all ui-tabview-\' + orientation" [ngStyle]="style" [class]="styleClass">\n            <ul p-tabViewNav role="tablist" *ngIf="orientation!=\'bottom\'" [tabs]="tabs" [orientation]="orientation"\n                (onTabClick)="open($event.originalEvent, $event.tab)" (onTabCloseClick)="close($event.originalEvent, $event.tab)"></ul>\n            <div class="ui-tabview-panels">\n                <ng-content></ng-content>\n            </div>\n            <ul p-tabViewNav role="tablist" *ngIf="orientation==\'bottom\'" [tabs]="tabs" [orientation]="orientation"\n                (onTabClick)="open($event.originalEvent, $event.tab)" (onTabCloseClick)="close($event.originalEvent, $event.tab)"></ul>\n        </div>\n    '})],TabView),TabPanel,TabViewNav,SharedModule],declarations:[TabView,TabPanel,TabViewNav]})],TabViewModule);export{TabPanel,TabView,TabViewModule,TabViewNav};