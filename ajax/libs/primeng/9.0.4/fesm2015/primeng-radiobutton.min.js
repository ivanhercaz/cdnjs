import{forwardRef,EventEmitter,ChangeDetectorRef,Input,Output,ViewChild,Component,ChangeDetectionStrategy,NgModule}from"@angular/core";import{CommonModule}from"@angular/common";import{NG_VALUE_ACCESSOR}from"@angular/forms";var __decorate=this&&this.__decorate||function(t,e,o,i){var n,a=arguments.length,d=a<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,o):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)d=Reflect.decorate(t,e,o,i);else for(var l=t.length-1;l>=0;l--)(n=t[l])&&(d=(a<3?n(d):a>3?n(e,o,d):n(e,o))||d);return a>3&&d&&Object.defineProperty(e,o,d),d};const RADIO_VALUE_ACCESSOR={provide:NG_VALUE_ACCESSOR,useExisting:forwardRef(()=>RadioButton),multi:!0};let RadioButton=class{constructor(t){this.cd=t,this.onClick=new EventEmitter,this.onFocus=new EventEmitter,this.onBlur=new EventEmitter,this.onModelChange=(()=>{}),this.onModelTouched=(()=>{})}handleClick(t,e,o){t.preventDefault(),this.disabled||(this.select(t),o&&e.focus())}select(t){this.disabled||(this.inputViewChild.nativeElement.checked=!0,this.checked=!0,this.onModelChange(this.value),this.onClick.emit(t))}writeValue(t){this.checked=t==this.value,this.inputViewChild&&this.inputViewChild.nativeElement&&(this.inputViewChild.nativeElement.checked=this.checked),this.cd.markForCheck()}registerOnChange(t){this.onModelChange=t}registerOnTouched(t){this.onModelTouched=t}setDisabledState(t){this.disabled=t}onInputFocus(t){this.focused=!0,this.onFocus.emit(t)}onInputBlur(t){this.focused=!1,this.onModelTouched(),this.onBlur.emit(t)}onChange(t){this.select(t)}focus(){this.inputViewChild.nativeElement.focus()}};RadioButton.ctorParameters=(()=>[{type:ChangeDetectorRef}]),__decorate([Input()],RadioButton.prototype,"value",void 0),__decorate([Input()],RadioButton.prototype,"name",void 0),__decorate([Input()],RadioButton.prototype,"disabled",void 0),__decorate([Input()],RadioButton.prototype,"label",void 0),__decorate([Input()],RadioButton.prototype,"tabindex",void 0),__decorate([Input()],RadioButton.prototype,"inputId",void 0),__decorate([Input()],RadioButton.prototype,"ariaLabelledBy",void 0),__decorate([Input()],RadioButton.prototype,"style",void 0),__decorate([Input()],RadioButton.prototype,"styleClass",void 0),__decorate([Input()],RadioButton.prototype,"labelStyleClass",void 0),__decorate([Output()],RadioButton.prototype,"onClick",void 0),__decorate([Output()],RadioButton.prototype,"onFocus",void 0),__decorate([Output()],RadioButton.prototype,"onBlur",void 0),__decorate([ViewChild("rb")],RadioButton.prototype,"inputViewChild",void 0);let RadioButtonModule=class{};RadioButtonModule=__decorate([NgModule({imports:[CommonModule],exports:[RadioButton=__decorate([Component({selector:"p-radioButton",template:'\n        <div [ngStyle]="style" [ngClass]="\'ui-radiobutton ui-widget\'" [class]="styleClass">\n            <div class="ui-helper-hidden-accessible">\n                <input #rb type="radio" [attr.id]="inputId" [attr.name]="name" [attr.value]="value" [attr.tabindex]="tabindex" [attr.aria-labelledby]="ariaLabelledBy"\n                    [checked]="checked" (change)="onChange($event)" (focus)="onInputFocus($event)" (blur)="onInputBlur($event)" [disabled]="disabled">\n            </div>\n            <div (click)="handleClick($event, rb, true)" role="radio" [attr.aria-checked]="checked"\n                [ngClass]="{\'ui-radiobutton-box ui-widget ui-state-default\':true,\n                \'ui-state-active\':rb.checked,\'ui-state-disabled\':disabled,\'ui-state-focus\':focused}">\n                <span class="ui-radiobutton-icon ui-clickable" [ngClass]="{\'pi pi-circle-on\':rb.checked}"></span>\n            </div>\n        </div>\n        <label (click)="select($event)" [class]="labelStyleClass"\n            [ngClass]="{\'ui-radiobutton-label\':true, \'ui-label-active\':rb.checked, \'ui-label-disabled\':disabled, \'ui-label-focus\':focused}"\n            *ngIf="label" [attr.for]="inputId">{{label}}</label>\n    ',providers:[RADIO_VALUE_ACCESSOR],changeDetection:ChangeDetectionStrategy.Default})],RadioButton)],declarations:[RadioButton]})],RadioButtonModule);export{RADIO_VALUE_ACCESSOR,RadioButton,RadioButtonModule};