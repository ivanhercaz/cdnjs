import{Injectable,ElementRef,Input,Component,ChangeDetectionStrategy,NgModule}from"@angular/core";import{FormsModule}from"@angular/forms";import{CommonModule}from"@angular/common";import{DomHandler}from"primeng/dom";import{Subject}from"rxjs";var __decorate=this&&this.__decorate||function(e,t,n,o){var r,i=arguments.length,s=i<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,o);else for(var c=e.length-1;c>=0;c--)(r=e[c])&&(s=(i<3?r(s):i>3?r(t,n,s):r(t,n))||s);return i>3&&s&&Object.defineProperty(t,n,s),s},TerminalService=function(){function e(){this.commandSource=new Subject,this.responseSource=new Subject,this.commandHandler=this.commandSource.asObservable(),this.responseHandler=this.responseSource.asObservable()}return e.prototype.sendCommand=function(e){e&&this.commandSource.next(e)},e.prototype.sendResponse=function(e){e&&this.responseSource.next(e)},e=__decorate([Injectable()],e)}(),__decorate$1=this&&this.__decorate||function(e,t,n,o){var r,i=arguments.length,s=i<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,o);else for(var c=e.length-1;c>=0;c--)(r=e[c])&&(s=(i<3?r(s):i>3?r(t,n,s):r(t,n))||s);return i>3&&s&&Object.defineProperty(t,n,s),s},Terminal=function(){function e(e,t){var n=this;this.el=e,this.terminalService=t,this.commands=[],this.subscription=t.responseHandler.subscribe(function(e){n.commands[n.commands.length-1].response=e,n.commandProcessed=!0})}return e.prototype.ngAfterViewInit=function(){this.container=DomHandler.find(this.el.nativeElement,".ui-terminal")[0]},e.prototype.ngAfterViewChecked=function(){this.commandProcessed&&(this.container.scrollTop=this.container.scrollHeight,this.commandProcessed=!1)},Object.defineProperty(e.prototype,"response",{set:function(e){e&&(this.commands[this.commands.length-1].response=e,this.commandProcessed=!0)},enumerable:!0,configurable:!0}),e.prototype.handleCommand=function(e){13==e.keyCode&&(this.commands.push({text:this.command}),this.terminalService.sendCommand(this.command),this.command="")},e.prototype.focus=function(e){e.focus()},e.prototype.ngOnDestroy=function(){this.subscription&&this.subscription.unsubscribe()},e.ctorParameters=function(){return[{type:ElementRef},{type:TerminalService}]},__decorate$1([Input()],e.prototype,"welcomeMessage",void 0),__decorate$1([Input()],e.prototype,"prompt",void 0),__decorate$1([Input()],e.prototype,"style",void 0),__decorate$1([Input()],e.prototype,"styleClass",void 0),__decorate$1([Input()],e.prototype,"response",null),e=__decorate$1([Component({selector:"p-terminal",template:'\n        <div [ngClass]="\'ui-terminal ui-widget ui-widget-content ui-corner-all\'" [ngStyle]="style" [class]="styleClass" (click)="focus(in)">\n            <div *ngIf="welcomeMessage">{{welcomeMessage}}</div>\n            <div class="ui-terminal-content">\n                <div *ngFor="let command of commands">\n                    <span>{{prompt}}</span>\n                    <span class="ui-terminal-command">{{command.text}}</span>\n                    <div>{{command.response}}</div>\n                </div>\n            </div>\n            <div>\n                <span class="ui-terminal-content-prompt">{{prompt}}</span>\n                <input #in type="text" [(ngModel)]="command" class="ui-terminal-input" autocomplete="off" (keydown)="handleCommand($event)" autofocus>\n            </div>\n        </div>\n    ',changeDetection:ChangeDetectionStrategy.Default})],e)}(),TerminalModule=function(){function e(){}return e=__decorate$1([NgModule({imports:[CommonModule,FormsModule],exports:[Terminal],declarations:[Terminal]})],e)}();export{Terminal,TerminalModule,TerminalService};