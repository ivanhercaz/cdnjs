var __decorate=this&&this.__decorate||function(e,o,t,n){var i,a=arguments.length,r=a<3?o:null===n?n=Object.getOwnPropertyDescriptor(o,t):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,o,t,n);else for(var c=e.length-1;c>=0;c--)(i=e[c])&&(r=(a<3?i(r):a>3?i(o,t,r):i(o,t))||r);return a>3&&r&&Object.defineProperty(o,t,r),r};import{Injectable,ComponentFactoryResolver,ApplicationRef,Injector,Type,EmbeddedViewRef,ComponentRef}from"@angular/core";import{DynamicDialogComponent}from"./dynamicdialog";import{DynamicDialogInjector}from"./dynamicdialog-injector";import{DynamicDialogConfig}from"./dynamicdialog-config";import{DynamicDialogRef}from"./dynamicdialog-ref";let DialogService=class{constructor(e,o,t){this.componentFactoryResolver=e,this.appRef=o,this.injector=t}open(e,o){const t=this.appendDialogComponentToBody(o);return this.dialogComponentRef.instance.childComponentType=e,t}appendDialogComponentToBody(e){const o=new WeakMap;o.set(DynamicDialogConfig,e);const t=new DynamicDialogRef;o.set(DynamicDialogRef,t);const n=t.onClose.subscribe(()=>{this.dialogComponentRef.instance.close()}),i=t.onDestroy.subscribe(()=>{this.removeDialogComponentFromBody(),i.unsubscribe(),n.unsubscribe()}),a=this.componentFactoryResolver.resolveComponentFactory(DynamicDialogComponent).create(new DynamicDialogInjector(this.injector,o));this.appRef.attachView(a.hostView);const r=a.hostView.rootNodes[0];return document.body.appendChild(r),this.dialogComponentRef=a,t}removeDialogComponentFromBody(){this.appRef.detachView(this.dialogComponentRef.hostView),this.dialogComponentRef.destroy()}};DialogService.ctorParameters=(()=>[{type:ComponentFactoryResolver},{type:ApplicationRef},{type:Injector}]),DialogService=__decorate([Injectable()],DialogService);export{DialogService};