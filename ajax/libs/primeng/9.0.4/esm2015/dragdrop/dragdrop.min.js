var __decorate=this&&this.__decorate||function(e,t,r,n){var a,o=arguments.length,i=o<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,t,r,n);else for(var s=e.length-1;s>=0;s--)(a=e[s])&&(i=(o<3?a(i):o>3?a(t,r,i):a(t,r))||i);return o>3&&i&&Object.defineProperty(t,r,i),i};import{NgModule,Directive,OnDestroy,AfterViewInit,ElementRef,HostListener,Input,Output,EventEmitter,NgZone}from"@angular/core";import{CommonModule}from"@angular/common";import{DomHandler}from"primeng/dom";let Draggable=class{constructor(e,t){this.el=e,this.zone=t,this.onDragStart=new EventEmitter,this.onDragEnd=new EventEmitter,this.onDrag=new EventEmitter}get pDraggableDisabled(){return this._pDraggableDisabled}set pDraggableDisabled(e){this._pDraggableDisabled=e,this._pDraggableDisabled?this.unbindMouseListeners():(this.el.nativeElement.draggable=!0,this.bindMouseListeners())}ngAfterViewInit(){this.pDraggableDisabled||(this.el.nativeElement.draggable=!0,this.bindMouseListeners())}bindDragListener(){this.dragListener||this.zone.runOutsideAngular(()=>{this.dragListener=this.drag.bind(this),this.el.nativeElement.addEventListener("drag",this.dragListener)})}unbindDragListener(){this.dragListener&&this.zone.runOutsideAngular(()=>{this.el.nativeElement.removeEventListener("drag",this.dragListener),this.dragListener=null})}bindMouseListeners(){this.mouseDownListener||this.mouseUpListener||this.zone.runOutsideAngular(()=>{this.mouseDownListener=this.mousedown.bind(this),this.mouseUpListener=this.mouseup.bind(this),this.el.nativeElement.addEventListener("mousedown",this.mouseDownListener),this.el.nativeElement.addEventListener("mouseup",this.mouseUpListener)})}unbindMouseListeners(){this.mouseDownListener&&this.mouseUpListener&&this.zone.runOutsideAngular(()=>{this.el.nativeElement.removeEventListener("mousedown",this.mouseDownListener),this.el.nativeElement.removeEventListener("mouseup",this.mouseUpListener),this.mouseDownListener=null,this.mouseUpListener=null})}drag(e){this.onDrag.emit(e)}dragStart(e){this.allowDrag()&&!this.pDraggableDisabled?(this.dragEffect&&(e.dataTransfer.effectAllowed=this.dragEffect),e.dataTransfer.setData("text",this.scope),this.onDragStart.emit(e),this.bindDragListener()):e.preventDefault()}dragEnd(e){this.onDragEnd.emit(e),this.unbindDragListener()}mousedown(e){this.handle=e.target}mouseup(e){this.handle=null}allowDrag(){return!this.dragHandle||!this.handle||DomHandler.matches(this.handle,this.dragHandle)}ngOnDestroy(){this.unbindDragListener(),this.unbindMouseListeners()}};Draggable.ctorParameters=(()=>[{type:ElementRef},{type:NgZone}]),__decorate([Input("pDraggable")],Draggable.prototype,"scope",void 0),__decorate([Input()],Draggable.prototype,"dragEffect",void 0),__decorate([Input()],Draggable.prototype,"dragHandle",void 0),__decorate([Output()],Draggable.prototype,"onDragStart",void 0),__decorate([Output()],Draggable.prototype,"onDragEnd",void 0),__decorate([Output()],Draggable.prototype,"onDrag",void 0),__decorate([Input()],Draggable.prototype,"pDraggableDisabled",null),__decorate([HostListener("dragstart",["$event"])],Draggable.prototype,"dragStart",null),__decorate([HostListener("dragend",["$event"])],Draggable.prototype,"dragEnd",null),Draggable=__decorate([Directive({selector:"[pDraggable]"})],Draggable);export{Draggable};let Droppable=class{constructor(e,t){this.el=e,this.zone=t,this.onDragEnter=new EventEmitter,this.onDragLeave=new EventEmitter,this.onDrop=new EventEmitter}ngAfterViewInit(){this.pDroppableDisabled||this.bindDragOverListener()}bindDragOverListener(){this.dragOverListener||this.zone.runOutsideAngular(()=>{this.dragOverListener=this.dragOver.bind(this),this.el.nativeElement.addEventListener("dragover",this.dragOverListener)})}unbindDragOverListener(){this.dragOverListener&&this.zone.runOutsideAngular(()=>{this.el.nativeElement.removeEventListener("dragover",this.dragOverListener),this.dragOverListener=null})}dragOver(e){e.preventDefault()}drop(e){this.allowDrop(e)&&(e.preventDefault(),this.onDrop.emit(e))}dragEnter(e){e.preventDefault(),this.dropEffect&&(e.dataTransfer.dropEffect=this.dropEffect),this.onDragEnter.emit(e)}dragLeave(e){e.preventDefault(),this.onDragLeave.emit(e)}allowDrop(e){let t=e.dataTransfer.getData("text");if("string"==typeof this.scope&&t==this.scope)return!0;if(this.scope instanceof Array)for(let e=0;e<this.scope.length;e++)if(t==this.scope[e])return!0;return!1}ngOnDestroy(){this.unbindDragOverListener()}};Droppable.ctorParameters=(()=>[{type:ElementRef},{type:NgZone}]),__decorate([Input("pDroppable")],Droppable.prototype,"scope",void 0),__decorate([Input()],Droppable.prototype,"pDroppableDisabled",void 0),__decorate([Input()],Droppable.prototype,"dropEffect",void 0),__decorate([Output()],Droppable.prototype,"onDragEnter",void 0),__decorate([Output()],Droppable.prototype,"onDragLeave",void 0),__decorate([Output()],Droppable.prototype,"onDrop",void 0),__decorate([HostListener("drop",["$event"])],Droppable.prototype,"drop",null),__decorate([HostListener("dragenter",["$event"])],Droppable.prototype,"dragEnter",null),__decorate([HostListener("dragleave",["$event"])],Droppable.prototype,"dragLeave",null);export{Droppable};let DragDropModule=class{};DragDropModule=__decorate([NgModule({imports:[CommonModule],exports:[Draggable,Droppable=__decorate([Directive({selector:"[pDroppable]"})],Droppable)],declarations:[Draggable,Droppable]})],DragDropModule);export{DragDropModule};