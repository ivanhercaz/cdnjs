import{CdkVirtualScrollViewport,ScrollingModule}from"@angular/cdk/scrolling";import{forwardRef,EventEmitter,Input,Output,Component,ElementRef,Renderer2,ChangeDetectorRef,NgZone,ViewChild,ContentChildren,NgModule}from"@angular/core";import{trigger,state,style,transition,animate}from"@angular/animations";import{CommonModule}from"@angular/common";import{PrimeTemplate,SharedModule}from"primeng/api";import{DomHandler}from"primeng/dom";import{ObjectUtils,FilterUtils}from"primeng/utils";import{NG_VALUE_ACCESSOR}from"@angular/forms";import{TooltipModule}from"primeng/tooltip";var __decorate=this&&this.__decorate||function(e,t,i,o){var n,l=arguments.length,s=l<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,i):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,o);else for(var r=e.length-1;r>=0;r--)(n=e[r])&&(s=(l<3?n(s):l>3?n(t,i,s):n(t,i))||s);return l>3&&s&&Object.defineProperty(t,i,s),s};const DROPDOWN_VALUE_ACCESSOR={provide:NG_VALUE_ACCESSOR,useExisting:forwardRef(()=>Dropdown),multi:!0};let DropdownItem=class{constructor(){this.onClick=new EventEmitter}onOptionClick(e){this.onClick.emit({originalEvent:e,option:this.option})}};__decorate([Input()],DropdownItem.prototype,"option",void 0),__decorate([Input()],DropdownItem.prototype,"selected",void 0),__decorate([Input()],DropdownItem.prototype,"disabled",void 0),__decorate([Input()],DropdownItem.prototype,"visible",void 0),__decorate([Input()],DropdownItem.prototype,"itemSize",void 0),__decorate([Input()],DropdownItem.prototype,"template",void 0),__decorate([Output()],DropdownItem.prototype,"onClick",void 0),DropdownItem=__decorate([Component({selector:"p-dropdownItem",template:"\n        <li (click)=\"onOptionClick($event)\" role=\"option\"\n            [attr.aria-label]=\"option.label\"\n            [ngStyle]=\"{'height': itemSize + 'px'}\"\n            [ngClass]=\"{'ui-dropdown-item ui-corner-all':true,\n                                                'ui-state-highlight': selected,\n                                                'ui-state-disabled':(option.disabled),\n                                                'ui-dropdown-item-empty': !option.label||option.label.length === 0}\">\n            <span *ngIf=\"!template\">{{option.label||'empty'}}</span>\n            <ng-container *ngTemplateOutlet=\"template; context: {$implicit: option}\"></ng-container>\n        </li>\n    "})],DropdownItem);let Dropdown=class{constructor(e,t,i,o){this.el=e,this.renderer=t,this.cd=i,this.zone=o,this.scrollHeight="200px",this.filterBy="label",this.resetFilterOnHide=!1,this.dropdownIcon="pi pi-chevron-down",this.autoDisplayFirst=!0,this.emptyFilterMessage="No results found",this.autoZIndex=!0,this.baseZIndex=0,this.showTransitionOptions="225ms ease-out",this.hideTransitionOptions="195ms ease-in",this.filterMatchMode="contains",this.tooltip="",this.tooltipPosition="right",this.tooltipPositionStyle="absolute",this.onChange=new EventEmitter,this.onFocus=new EventEmitter,this.onBlur=new EventEmitter,this.onClick=new EventEmitter,this.onShow=new EventEmitter,this.onHide=new EventEmitter,this.onModelChange=(()=>{}),this.onModelTouched=(()=>{}),this.viewPortOffsetTop=0}get disabled(){return this._disabled}set disabled(e){e&&(this.focused=!1),this._disabled=e,this.cd.destroyed||this.cd.detectChanges()}ngAfterContentInit(){this.templates.forEach(e=>{switch(e.getType()){case"item":this.itemTemplate=e.template;break;case"selectedItem":this.selectedItemTemplate=e.template;break;case"group":this.groupTemplate=e.template;break;default:this.itemTemplate=e.template}})}ngOnInit(){this.optionsToDisplay=this.options,this.updateSelectedOption(null)}get options(){return this._options}set options(e){let t=this.optionLabel?ObjectUtils.generateSelectItems(e,this.optionLabel):e;this._options=t,this.optionsToDisplay=this._options,this.updateSelectedOption(this.value),this.optionsChanged=!0,this.filterValue&&this.filterValue.length&&this.activateFilter()}ngAfterViewInit(){this.editable&&this.updateEditableLabel()}get label(){return this.selectedOption?this.selectedOption.label:null}updateEditableLabel(){this.editableInputViewChild&&this.editableInputViewChild.nativeElement&&(this.editableInputViewChild.nativeElement.value=this.selectedOption?this.selectedOption.label:this.value||"")}onItemClick(e){const t=e.option;this.itemClick=!0,t.disabled||(this.selectItem(e,t),this.focusViewChild.nativeElement.focus()),setTimeout(()=>{this.hide(e)},150)}selectItem(e,t){this.selectedOption!=t&&(this.selectedOption=t,this.value=t.value,this.filled=!0,this.onModelChange(this.value),this.updateEditableLabel(),this.onChange.emit({originalEvent:e.originalEvent,value:this.value}),this.virtualScroll&&setTimeout(()=>{this.viewPortOffsetTop=this.viewPort.measureScrollOffset()},1))}ngAfterViewChecked(){if(this.optionsChanged&&this.overlayVisible&&(this.optionsChanged=!1,this.virtualScroll&&this.updateVirtualScrollSelectedIndex(!0),this.zone.runOutsideAngular(()=>{setTimeout(()=>{this.alignOverlay()},1)})),this.selectedOptionUpdated&&this.itemsWrapper){if(this.virtualScroll&&this.viewPort){let e=this.viewPort.getRenderedRange();this.updateVirtualScrollSelectedIndex(!1),(e.start>this.virtualScrollSelectedIndex||e.end<this.virtualScrollSelectedIndex)&&this.viewPort.scrollToIndex(this.virtualScrollSelectedIndex)}DomHandler.findSingle(this.overlay,"li.ui-state-highlight")&&DomHandler.scrollInView(this.itemsWrapper,DomHandler.findSingle(this.overlay,"li.ui-state-highlight")),this.selectedOptionUpdated=!1}}writeValue(e){this.filter&&this.resetFilter(),this.value=e,this.updateSelectedOption(e),this.updateEditableLabel(),this.updateFilledState(),this.cd.markForCheck()}resetFilter(){this.filterViewChild&&this.filterViewChild.nativeElement&&(this.filterValue=null,this.filterViewChild.nativeElement.value=""),this.optionsToDisplay=this.options}updateSelectedOption(e){this.selectedOption=this.findOption(e,this.optionsToDisplay),this.autoDisplayFirst&&!this.placeholder&&!this.selectedOption&&this.optionsToDisplay&&this.optionsToDisplay.length&&!this.editable&&(this.selectedOption=this.optionsToDisplay[0]),this.selectedOptionUpdated=!0}registerOnChange(e){this.onModelChange=e}registerOnTouched(e){this.onModelTouched=e}setDisabledState(e){this.disabled=e}onMouseclick(e){this.disabled||this.readonly||(this.onClick.emit(e),this.selfClick=!0,this.clearClick=DomHandler.hasClass(e.target,"ui-dropdown-clear-icon"),this.itemClick||this.clearClick||(this.focusViewChild.nativeElement.focus(),this.overlayVisible?this.hide(e):this.show(),this.cd.detectChanges()))}onEditableInputClick(e){this.itemClick=!0,this.bindDocumentClickListener()}onEditableInputFocus(e){this.focused=!0,this.hide(e),this.onFocus.emit(e)}onEditableInputChange(e){this.value=e.target.value,this.updateSelectedOption(this.value),this.onModelChange(this.value),this.onChange.emit({originalEvent:e,value:this.value})}show(){this.overlayVisible=!0}onOverlayAnimationStart(e){switch(e.toState){case"visible":this.overlay=e.element;let t=this.virtualScroll?".cdk-virtual-scroll-viewport":".ui-dropdown-items-wrapper";if(this.itemsWrapper=DomHandler.findSingle(this.overlay,t),this.appendOverlay(),this.autoZIndex&&(this.overlay.style.zIndex=String(this.baseZIndex+ ++DomHandler.zindex)),this.alignOverlay(),this.bindDocumentClickListener(),this.bindDocumentResizeListener(),this.options&&this.options.length&&!this.virtualScroll){let e=DomHandler.findSingle(this.itemsWrapper,".ui-dropdown-item.ui-state-highlight");e&&DomHandler.scrollInView(this.itemsWrapper,e)}this.filterViewChild&&this.filterViewChild.nativeElement&&this.filterViewChild.nativeElement.focus(),this.onShow.emit(e);break;case"void":this.onOverlayHide()}}scrollToSelectedVirtualScrollElement(){this.virtualAutoScrolled||(this.viewPortOffsetTop?this.viewPort.scrollToOffset(this.viewPortOffsetTop):this.virtualScrollSelectedIndex>-1&&this.viewPort.scrollToIndex(this.virtualScrollSelectedIndex)),this.virtualAutoScrolled=!0}updateVirtualScrollSelectedIndex(e){this.selectedOption&&this.optionsToDisplay&&this.optionsToDisplay.length&&(e&&(this.viewPortOffsetTop=0),this.virtualScrollSelectedIndex=this.findOptionIndex(this.selectedOption.value,this.optionsToDisplay))}appendOverlay(){this.appendTo&&("body"===this.appendTo?document.body.appendChild(this.overlay):DomHandler.appendChild(this.overlay,this.appendTo),this.overlay.style.minWidth=DomHandler.getWidth(this.containerViewChild.nativeElement)+"px")}restoreOverlayAppend(){this.overlay&&this.appendTo&&this.el.nativeElement.appendChild(this.overlay)}hide(e){this.overlayVisible=!1,this.filter&&this.resetFilterOnHide&&this.resetFilter(),this.virtualScroll&&(this.virtualAutoScrolled=!1),this.cd.markForCheck(),this.onHide.emit(e)}alignOverlay(){this.overlay&&(this.appendTo?DomHandler.absolutePosition(this.overlay,this.containerViewChild.nativeElement):DomHandler.relativePosition(this.overlay,this.containerViewChild.nativeElement))}onInputFocus(e){this.focused=!0,this.onFocus.emit(e)}onInputBlur(e){this.focused=!1,this.onModelTouched(),this.onBlur.emit(e)}findPrevEnabledOption(e){let t;if(this.optionsToDisplay&&this.optionsToDisplay.length){for(let i=e-1;0<=i;i--){let e=this.optionsToDisplay[i];if(!e.disabled){t=e;break}}if(!t)for(let i=this.optionsToDisplay.length-1;i>=e;i--){let e=this.optionsToDisplay[i];if(!e.disabled){t=e;break}}}return t}findNextEnabledOption(e){let t;if(this.optionsToDisplay&&this.optionsToDisplay.length){for(let i=e+1;e<this.optionsToDisplay.length-1;i++){let e=this.optionsToDisplay[i];if(!e.disabled){t=e;break}}if(!t)for(let i=0;i<e;i++){let e=this.optionsToDisplay[i];if(!e.disabled){t=e;break}}}return t}onKeydown(e,t){if(!this.readonly&&this.optionsToDisplay&&null!==this.optionsToDisplay.length)switch(e.which){case 40:if(!this.overlayVisible&&e.altKey)this.show();else if(this.group){let t=this.selectedOption?this.findOptionGroupIndex(this.selectedOption.value,this.optionsToDisplay):-1;if(-1!==t){let i=t.itemIndex+1;i<this.optionsToDisplay[t.groupIndex].items.length?(this.selectItem(e,this.optionsToDisplay[t.groupIndex].items[i]),this.selectedOptionUpdated=!0):this.optionsToDisplay[t.groupIndex+1]&&(this.selectItem(e,this.optionsToDisplay[t.groupIndex+1].items[0]),this.selectedOptionUpdated=!0)}else this.selectItem(e,this.optionsToDisplay[0].items[0])}else{let t=this.selectedOption?this.findOptionIndex(this.selectedOption.value,this.optionsToDisplay):-1,i=this.findNextEnabledOption(t);i&&(this.selectItem(e,i),this.selectedOptionUpdated=!0)}e.preventDefault();break;case 38:if(this.group){let t=this.selectedOption?this.findOptionGroupIndex(this.selectedOption.value,this.optionsToDisplay):-1;if(-1!==t){let i=t.itemIndex-1;if(i>=0)this.selectItem(e,this.optionsToDisplay[t.groupIndex].items[i]),this.selectedOptionUpdated=!0;else if(i<0){let i=this.optionsToDisplay[t.groupIndex-1];i&&(this.selectItem(e,i.items[i.items.length-1]),this.selectedOptionUpdated=!0)}}}else{let t=this.selectedOption?this.findOptionIndex(this.selectedOption.value,this.optionsToDisplay):-1,i=this.findPrevEnabledOption(t);i&&(this.selectItem(e,i),this.selectedOptionUpdated=!0)}e.preventDefault();break;case 32:case 32:this.overlayVisible||(this.show(),e.preventDefault());break;case 13:(!this.filter||this.optionsToDisplay&&this.optionsToDisplay.length>0)&&this.hide(e),e.preventDefault();break;case 27:case 9:this.hide(e);break;default:t&&this.search(e)}}search(e){this.searchTimeout&&clearTimeout(this.searchTimeout);const t=e.key;let i;if(this.previousSearchChar=this.currentSearchChar,this.currentSearchChar=t,this.previousSearchChar===this.currentSearchChar?this.searchValue=this.currentSearchChar:this.searchValue=this.searchValue?this.searchValue+t:t,this.group){let e=this.selectedOption?this.findOptionGroupIndex(this.selectedOption.value,this.optionsToDisplay):{groupIndex:0,itemIndex:0};i=this.searchOptionWithinGroup(e)}else{let e=this.selectedOption?this.findOptionIndex(this.selectedOption.value,this.optionsToDisplay):-1;i=this.searchOption(++e)}i&&(this.selectItem(e,i),this.selectedOptionUpdated=!0),this.searchTimeout=setTimeout(()=>{this.searchValue=null},250)}searchOption(e){let t;return this.searchValue&&((t=this.searchOptionInRange(e,this.optionsToDisplay.length))||(t=this.searchOptionInRange(0,e))),t}searchOptionInRange(e,t){for(let i=e;i<t;i++){let e=this.optionsToDisplay[i];if(e.label.toLowerCase().startsWith(this.searchValue.toLowerCase()))return e}return null}searchOptionWithinGroup(e){if(this.searchValue){for(let t=e.groupIndex;t<this.optionsToDisplay.length;t++)for(let i=e.groupIndex===t?e.itemIndex+1:0;i<this.optionsToDisplay[t].items.length;i++){let e=this.optionsToDisplay[t].items[i];if(e.label.toLowerCase().startsWith(this.searchValue.toLowerCase()))return e}for(let t=0;t<=e.groupIndex;t++)for(let i=0;i<(e.groupIndex===t?e.itemIndex:this.optionsToDisplay[t].items.length);i++){let e=this.optionsToDisplay[t].items[i];if(e.label.toLowerCase().startsWith(this.searchValue.toLowerCase()))return e}}return null}findOptionIndex(e,t){let i=-1;if(t)for(let o=0;o<t.length;o++)if(null==e&&null==t[o].value||ObjectUtils.equals(e,t[o].value,this.dataKey)){i=o;break}return i}findOptionGroupIndex(e,t){let i,o;if(t)for(let n=0;n<t.length&&(i=n,-1===(o=this.findOptionIndex(e,t[n].items)));n++);return-1!==o?{groupIndex:i,itemIndex:o}:-1}findOption(e,t,i){if(this.group&&!i){let i;if(t&&t.length)for(let o of t)if(i=this.findOption(e,o.items,!0))break;return i}{let i=this.findOptionIndex(e,t);return-1!=i?t[i]:null}}onFilter(e){let t=e.target.value;t&&t.length?(this.filterValue=t,this.activateFilter()):(this.filterValue=null,this.optionsToDisplay=this.options),this.optionsChanged=!0}activateFilter(){let e=this.filterBy.split(",");if(this.options&&this.options.length){if(this.group){let t=[];for(let i of this.options){let o=FilterUtils.filter(i.items,e,this.filterValue,this.filterMatchMode);o&&o.length&&t.push({label:i.label,value:i.value,items:o})}this.optionsToDisplay=t}else this.optionsToDisplay=FilterUtils.filter(this.options,e,this.filterValue,this.filterMatchMode);this.optionsChanged=!0}}applyFocus(){this.editable?DomHandler.findSingle(this.el.nativeElement,".ui-dropdown-label.ui-inputtext").focus():DomHandler.findSingle(this.el.nativeElement,"input[readonly]").focus()}focus(){this.applyFocus()}bindDocumentClickListener(){this.documentClickListener||(this.documentClickListener=this.renderer.listen("document","click",e=>{this.selfClick||this.itemClick||(this.hide(e),this.unbindDocumentClickListener()),this.clearClickState(),this.cd.markForCheck()}))}clearClickState(){this.selfClick=!1,this.itemClick=!1}unbindDocumentClickListener(){this.documentClickListener&&(this.documentClickListener(),this.documentClickListener=null)}bindDocumentResizeListener(){this.documentResizeListener=this.onWindowResize.bind(this),window.addEventListener("resize",this.documentResizeListener)}unbindDocumentResizeListener(){this.documentResizeListener&&(window.removeEventListener("resize",this.documentResizeListener),this.documentResizeListener=null)}onWindowResize(){DomHandler.isAndroid()||this.hide(event)}updateFilledState(){this.filled=null!=this.selectedOption}clear(e){this.clearClick=!0,this.value=null,this.onModelChange(this.value),this.onChange.emit({originalEvent:e,value:this.value}),this.updateSelectedOption(this.value),this.updateEditableLabel(),this.updateFilledState()}onOverlayHide(){this.unbindDocumentClickListener(),this.unbindDocumentResizeListener(),this.overlay=null,this.itemsWrapper=null}ngOnDestroy(){this.restoreOverlayAppend(),this.onOverlayHide()}};Dropdown.ctorParameters=(()=>[{type:ElementRef},{type:Renderer2},{type:ChangeDetectorRef},{type:NgZone}]),__decorate([Input()],Dropdown.prototype,"scrollHeight",void 0),__decorate([Input()],Dropdown.prototype,"filter",void 0),__decorate([Input()],Dropdown.prototype,"name",void 0),__decorate([Input()],Dropdown.prototype,"style",void 0),__decorate([Input()],Dropdown.prototype,"panelStyle",void 0),__decorate([Input()],Dropdown.prototype,"styleClass",void 0),__decorate([Input()],Dropdown.prototype,"panelStyleClass",void 0),__decorate([Input()],Dropdown.prototype,"readonly",void 0),__decorate([Input()],Dropdown.prototype,"required",void 0),__decorate([Input()],Dropdown.prototype,"editable",void 0),__decorate([Input()],Dropdown.prototype,"appendTo",void 0),__decorate([Input()],Dropdown.prototype,"tabindex",void 0),__decorate([Input()],Dropdown.prototype,"placeholder",void 0),__decorate([Input()],Dropdown.prototype,"filterPlaceholder",void 0),__decorate([Input()],Dropdown.prototype,"inputId",void 0),__decorate([Input()],Dropdown.prototype,"selectId",void 0),__decorate([Input()],Dropdown.prototype,"dataKey",void 0),__decorate([Input()],Dropdown.prototype,"filterBy",void 0),__decorate([Input()],Dropdown.prototype,"autofocus",void 0),__decorate([Input()],Dropdown.prototype,"resetFilterOnHide",void 0),__decorate([Input()],Dropdown.prototype,"dropdownIcon",void 0),__decorate([Input()],Dropdown.prototype,"optionLabel",void 0),__decorate([Input()],Dropdown.prototype,"autoDisplayFirst",void 0),__decorate([Input()],Dropdown.prototype,"group",void 0),__decorate([Input()],Dropdown.prototype,"showClear",void 0),__decorate([Input()],Dropdown.prototype,"emptyFilterMessage",void 0),__decorate([Input()],Dropdown.prototype,"virtualScroll",void 0),__decorate([Input()],Dropdown.prototype,"itemSize",void 0),__decorate([Input()],Dropdown.prototype,"autoZIndex",void 0),__decorate([Input()],Dropdown.prototype,"baseZIndex",void 0),__decorate([Input()],Dropdown.prototype,"showTransitionOptions",void 0),__decorate([Input()],Dropdown.prototype,"hideTransitionOptions",void 0),__decorate([Input()],Dropdown.prototype,"ariaFilterLabel",void 0),__decorate([Input()],Dropdown.prototype,"filterMatchMode",void 0),__decorate([Input()],Dropdown.prototype,"maxlength",void 0),__decorate([Input()],Dropdown.prototype,"tooltip",void 0),__decorate([Input()],Dropdown.prototype,"tooltipPosition",void 0),__decorate([Input()],Dropdown.prototype,"tooltipPositionStyle",void 0),__decorate([Input()],Dropdown.prototype,"tooltipStyleClass",void 0),__decorate([Output()],Dropdown.prototype,"onChange",void 0),__decorate([Output()],Dropdown.prototype,"onFocus",void 0),__decorate([Output()],Dropdown.prototype,"onBlur",void 0),__decorate([Output()],Dropdown.prototype,"onClick",void 0),__decorate([Output()],Dropdown.prototype,"onShow",void 0),__decorate([Output()],Dropdown.prototype,"onHide",void 0),__decorate([ViewChild("container",{static:!0})],Dropdown.prototype,"containerViewChild",void 0),__decorate([ViewChild("filter",{static:!1})],Dropdown.prototype,"filterViewChild",void 0),__decorate([ViewChild("in",{static:!0})],Dropdown.prototype,"focusViewChild",void 0),__decorate([ViewChild(CdkVirtualScrollViewport,{static:!1})],Dropdown.prototype,"viewPort",void 0),__decorate([ViewChild("editableInput",{static:!1})],Dropdown.prototype,"editableInputViewChild",void 0),__decorate([ContentChildren(PrimeTemplate)],Dropdown.prototype,"templates",void 0),__decorate([Input()],Dropdown.prototype,"disabled",null),__decorate([Input()],Dropdown.prototype,"options",null);let DropdownModule=class{};DropdownModule=__decorate([NgModule({imports:[CommonModule,SharedModule,ScrollingModule,TooltipModule],exports:[Dropdown=__decorate([Component({selector:"p-dropdown",template:'\n         <div #container [ngClass]="{\'ui-dropdown ui-widget ui-state-default ui-corner-all ui-helper-clearfix\':true,\n            \'ui-state-disabled\':disabled, \'ui-dropdown-open\':overlayVisible, \'ui-state-focus\':focused, \'ui-dropdown-clearable\': showClear && !disabled}"\n            (click)="onMouseclick($event)" [ngStyle]="style" [class]="styleClass">\n            <div class="ui-helper-hidden-accessible">\n                <input #in [attr.id]="inputId" type="text" [attr.aria-label]="selectedOption ? selectedOption.label : \' \'" readonly (focus)="onInputFocus($event)" aria-haspopup="listbox"\n                    (blur)="onInputBlur($event)" (keydown)="onKeydown($event, true)" [disabled]="disabled" [attr.tabindex]="tabindex" [attr.autofocus]="autofocus">\n            </div>\n            <div class="ui-helper-hidden-accessible ui-dropdown-hidden-select">\n                <select [attr.required]="required" [attr.name]="name" tabindex="-1" aria-hidden="true">\n                    <option *ngIf="placeholder" value="">{{placeholder}}</option>\n                    <option *ngIf="selectedOption" [value]="selectedOption.value" [selected]="true">{{selectedOption.label}}</option>\n                </select>\n            </div>\n            <div class="ui-dropdown-label-container" [pTooltip]="tooltip" [tooltipPosition]="tooltipPosition" [positionStyle]="tooltipPositionStyle" [tooltipStyleClass]="tooltipStyleClass">\n                <label [ngClass]="{\'ui-dropdown-label ui-inputtext ui-corner-all\':true,\'ui-dropdown-label-empty\':(label == null || label.length === 0)}" *ngIf="!editable && (label != null)">\n                    <ng-container *ngIf="!selectedItemTemplate">{{label||\'empty\'}}</ng-container>\n                    <ng-container *ngTemplateOutlet="selectedItemTemplate; context: {$implicit: selectedOption}"></ng-container>\n                </label>\n                <label [ngClass]="{\'ui-dropdown-label ui-inputtext ui-corner-all ui-placeholder\':true,\'ui-dropdown-label-empty\': (placeholder == null || placeholder.length === 0)}" *ngIf="!editable && (label == null)">{{placeholder||\'empty\'}}</label>\n                <input #editableInput type="text" [attr.maxlength]="maxlength" [attr.aria-label]="selectedOption ? selectedOption.label : \' \'" class="ui-dropdown-label ui-inputtext ui-corner-all" *ngIf="editable" [disabled]="disabled" [attr.placeholder]="placeholder"\n                            (click)="onEditableInputClick($event)" (input)="onEditableInputChange($event)" (focus)="onEditableInputFocus($event)" (blur)="onInputBlur($event)">\n                <i class="ui-dropdown-clear-icon pi pi-times" (click)="clear($event)" *ngIf="value != null && showClear && !disabled"></i>\n            </div>\n            <div class="ui-dropdown-trigger ui-state-default ui-corner-right">\n                <span class="ui-dropdown-trigger-icon ui-clickable" [ngClass]="dropdownIcon"></span>\n            </div>\n            <div *ngIf="overlayVisible" [ngClass]="\'ui-dropdown-panel  ui-widget ui-widget-content ui-corner-all ui-shadow\'" [@overlayAnimation]="{value: \'visible\', params: {showTransitionParams: showTransitionOptions, hideTransitionParams: hideTransitionOptions}}" (@overlayAnimation.start)="onOverlayAnimationStart($event)" [ngStyle]="panelStyle" [class]="panelStyleClass">\n                <div *ngIf="filter" class="ui-dropdown-filter-container" (click)="$event.stopPropagation()">\n                    <input #filter type="text" autocomplete="off" [value]="filterValue||\'\'" class="ui-dropdown-filter ui-inputtext ui-widget ui-state-default ui-corner-all" [attr.placeholder]="filterPlaceholder"\n                    (keydown.enter)="$event.preventDefault()" (keydown)="onKeydown($event, false)" (input)="onFilter($event)" [attr.aria-label]="ariaFilterLabel">\n                    <span class="ui-dropdown-filter-icon pi pi-search"></span>\n                </div>\n                <div class="ui-dropdown-items-wrapper" [style.max-height]="virtualScroll ? \'auto\' : (scrollHeight||\'auto\')">\n                    <ul class="ui-dropdown-items ui-dropdown-list ui-widget-content ui-widget ui-corner-all ui-helper-reset" role="listbox">\n                        <ng-container *ngIf="group">\n                            <ng-template ngFor let-optgroup [ngForOf]="optionsToDisplay">\n                                <li class="ui-dropdown-item-group">\n                                    <span *ngIf="!groupTemplate">{{optgroup.label||\'empty\'}}</span>\n                                    <ng-container *ngTemplateOutlet="groupTemplate; context: {$implicit: optgroup}"></ng-container>\n                                </li>\n                                <ng-container *ngTemplateOutlet="itemslist; context: {$implicit: optgroup.items, selectedOption: selectedOption}"></ng-container>\n                            </ng-template>\n                        </ng-container>\n                        <ng-container *ngIf="!group">\n                            <ng-container *ngTemplateOutlet="itemslist; context: {$implicit: optionsToDisplay, selectedOption: selectedOption}"></ng-container>\n                        </ng-container>\n                        <ng-template #itemslist let-options let-selectedOption="selectedOption">\n\n                            <ng-container *ngIf="!virtualScroll; else virtualScrollList">\n                                <ng-template ngFor let-option let-i="index" [ngForOf]="options">\n                                    <p-dropdownItem [option]="option" [selected]="selectedOption == option" \n                                                    (onClick)="onItemClick($event)"\n                                                    [template]="itemTemplate"></p-dropdownItem>\n                                </ng-template>\n                            </ng-container>\n                            <ng-template #virtualScrollList>\n                                <cdk-virtual-scroll-viewport (scrolledIndexChange)="scrollToSelectedVirtualScrollElement()" #viewport [ngStyle]="{\'height\': scrollHeight}" [itemSize]="itemSize" *ngIf="virtualScroll && optionsToDisplay && optionsToDisplay.length">\n                                    <ng-container *cdkVirtualFor="let option of options; let i = index; let c = count; let f = first; let l = last; let e = even; let o = odd">         \n                                        <p-dropdownItem [option]="option" [selected]="selectedOption == option"\n                                                                   (onClick)="onItemClick($event)"\n                                                                   [template]="itemTemplate"></p-dropdownItem>\n                                    </ng-container>\n                                </cdk-virtual-scroll-viewport>\n                            </ng-template>\n                        </ng-template>\n                        <li *ngIf="filter && optionsToDisplay && optionsToDisplay.length === 0" class="ui-dropdown-empty-message">{{emptyFilterMessage}}</li>\n                    </ul>\n                </div>\n            </div>\n        </div>\n    ',animations:[trigger("overlayAnimation",[state("void",style({transform:"translateY(5%)",opacity:0})),state("visible",style({transform:"translateY(0)",opacity:1})),transition("void => visible",animate("{{showTransitionParams}}")),transition("visible => void",animate("{{hideTransitionParams}}"))])],host:{"[class.ui-inputwrapper-filled]":"filled","[class.ui-inputwrapper-focus]":"focused"},providers:[DROPDOWN_VALUE_ACCESSOR]})],Dropdown),SharedModule,ScrollingModule],declarations:[Dropdown,DropdownItem]})],DropdownModule);export{DROPDOWN_VALUE_ACCESSOR,Dropdown,DropdownItem,DropdownModule};