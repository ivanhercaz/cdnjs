import{forwardRef,EventEmitter,Input,Output,ViewChild,Component,NgModule}from"@angular/core";import{CommonModule}from"@angular/common";import{NG_VALUE_ACCESSOR}from"@angular/forms";var __decorate=this&&this.__decorate||function(t,e,o,n){var i,c=arguments.length,u=c<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)u=Reflect.decorate(t,e,o,n);else for(var r=t.length-1;r>=0;r--)(i=t[r])&&(u=(c<3?i(u):c>3?i(e,o,u):i(e,o))||u);return c>3&&u&&Object.defineProperty(e,o,u),u},TOGGLEBUTTON_VALUE_ACCESSOR={provide:NG_VALUE_ACCESSOR,useExisting:forwardRef(function(){return ToggleButton}),multi:!0},ToggleButton=function(){function t(){this.onLabel="Yes",this.offLabel="No",this.iconPos="left",this.onChange=new EventEmitter,this.checked=!1,this.focus=!1,this.onModelChange=function(){},this.onModelTouched=function(){}}return t.prototype.ngAfterViewInit=function(){this.checkboxViewChild&&(this.checkbox=this.checkboxViewChild.nativeElement)},t.prototype.toggle=function(t){this.disabled||(this.checked=!this.checked,this.onModelChange(this.checked),this.onModelTouched(),this.onChange.emit({originalEvent:t,checked:this.checked}),this.checkbox&&this.checkbox.focus())},t.prototype.onFocus=function(){this.focus=!0},t.prototype.onBlur=function(){this.focus=!1,this.onModelTouched()},t.prototype.writeValue=function(t){this.checked=t},t.prototype.registerOnChange=function(t){this.onModelChange=t},t.prototype.registerOnTouched=function(t){this.onModelTouched=t},t.prototype.setDisabledState=function(t){this.disabled=t},Object.defineProperty(t.prototype,"hasOnLabel",{get:function(){return this.onLabel&&this.onLabel.length>0},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"hasOffLabel",{get:function(){return this.onLabel&&this.onLabel.length>0},enumerable:!0,configurable:!0}),__decorate([Input()],t.prototype,"onLabel",void 0),__decorate([Input()],t.prototype,"offLabel",void 0),__decorate([Input()],t.prototype,"onIcon",void 0),__decorate([Input()],t.prototype,"offIcon",void 0),__decorate([Input()],t.prototype,"disabled",void 0),__decorate([Input()],t.prototype,"style",void 0),__decorate([Input()],t.prototype,"styleClass",void 0),__decorate([Input()],t.prototype,"inputId",void 0),__decorate([Input()],t.prototype,"tabindex",void 0),__decorate([Input()],t.prototype,"iconPos",void 0),__decorate([Output()],t.prototype,"onChange",void 0),__decorate([ViewChild("checkbox",{static:!0})],t.prototype,"checkboxViewChild",void 0),t=__decorate([Component({selector:"p-toggleButton",template:'\n        <div [ngClass]="{\'ui-button ui-togglebutton ui-widget ui-state-default ui-corner-all\': true, \'ui-button-text-only\': (!onIcon && !offIcon), \n                \'ui-button-text-icon-left\': (onIcon && offIcon && hasOnLabel && hasOffLabel && iconPos === \'left\'), \n                \'ui-button-text-icon-right\': (onIcon && offIcon && hasOnLabel && hasOffLabel && iconPos === \'right\'),\'ui-button-icon-only\': (onIcon && offIcon && !hasOnLabel && !hasOffLabel),\n                \'ui-state-active\': checked,\'ui-state-focus\':focus,\'ui-state-disabled\':disabled}" [ngStyle]="style" [class]="styleClass" \n                (click)="toggle($event)" (keydown.enter)="toggle($event)">\n            <div class="ui-helper-hidden-accessible">\n                <input #checkbox type="checkbox" [attr.id]="inputId" [checked]="checked" (focus)="onFocus()" (blur)="onBlur()" [attr.tabindex]="tabindex">\n            </div>\n            <span *ngIf="onIcon||offIcon" class="ui-button-icon-left" [class]="checked ? this.onIcon : this.offIcon" [ngClass]="{\'ui-button-icon-left\': (iconPos === \'left\'), \n            \'ui-button-icon-right\': (iconPos === \'right\')}"></span>\n            <span class="ui-button-text ui-unselectable-text">{{checked ? hasOnLabel ? onLabel : \'ui-btn\' : hasOffLabel ? offLabel : \'ui-btn\'}}</span>\n        </div>\n    ',providers:[TOGGLEBUTTON_VALUE_ACCESSOR]})],t)}(),ToggleButtonModule=function(){function t(){}return t=__decorate([NgModule({imports:[CommonModule],exports:[ToggleButton],declarations:[ToggleButton]})],t)}();export{TOGGLEBUTTON_VALUE_ACCESSOR,ToggleButton,ToggleButtonModule};