var __decorate=this&&this.__decorate||function(e,t,i,o){var n,a=arguments.length,s=a<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,i):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,o);else for(var r=e.length-1;r>=0;r--)(n=e[r])&&(s=(a<3?n(s):a>3?n(t,i,s):n(t,i))||s);return a>3&&s&&Object.defineProperty(t,i,s),s};import{NgModule,Component,ElementRef,OnDestroy,Input,EventEmitter,Renderer2,ContentChild,NgZone,ViewChild}from"@angular/core";import{trigger,state,style,transition,animate}from"@angular/animations";import{CommonModule}from"@angular/common";import{DomHandler}from"primeng/dom";import{Footer,SharedModule}from"primeng/api";import{ButtonModule}from"primeng/button";import{ConfirmationService}from"primeng/api";let ConfirmDialog=class{constructor(e,t,i,o){this.el=e,this.renderer=t,this.confirmationService=i,this.zone=o,this.acceptIcon="pi pi-check",this.acceptLabel="Yes",this.acceptVisible=!0,this.rejectIcon="pi pi-times",this.rejectLabel="No",this.rejectVisible=!0,this.closeOnEscape=!0,this.blockScroll=!0,this.closable=!0,this.autoZIndex=!0,this.baseZIndex=0,this.transitionOptions="150ms cubic-bezier(0, 0, 0.2, 1)",this.focusTrap=!0,this.subscription=this.confirmationService.requireConfirmation$.subscribe(e=>{e.key===this.key&&(this.confirmation=e,this.message=this.confirmation.message||this.message,this.icon=this.confirmation.icon||this.icon,this.header=this.confirmation.header||this.header,this.rejectVisible=null==this.confirmation.rejectVisible?this.rejectVisible:this.confirmation.rejectVisible,this.acceptVisible=null==this.confirmation.acceptVisible?this.acceptVisible:this.confirmation.acceptVisible,this.acceptLabel=this.confirmation.acceptLabel||this.acceptLabel,this.rejectLabel=this.confirmation.rejectLabel||this.rejectLabel,this.confirmation.accept&&(this.confirmation.acceptEvent=new EventEmitter,this.confirmation.acceptEvent.subscribe(this.confirmation.accept)),this.confirmation.reject&&(this.confirmation.rejectEvent=new EventEmitter,this.confirmation.rejectEvent.subscribe(this.confirmation.reject)),!1===this.confirmation.blockScroll&&(this.blockScroll=this.confirmation.blockScroll),this.visible=!0)})}onAnimationStart(e){switch(e.toState){case"visible":this.container=e.element,this.contentContainer=DomHandler.findSingle(this.container,".ui-dialog-content"),(this.acceptVisible||this.rejectVisible)&&DomHandler.findSingle(this.container,"button").focus(),this.appendContainer(),this.moveOnTop(),this.bindGlobalListeners(),this.enableModality();break;case"void":this.onOverlayHide()}}appendContainer(){this.appendTo&&("body"===this.appendTo?document.body.appendChild(this.container):DomHandler.appendChild(this.container,this.appendTo))}restoreAppend(){this.container&&this.appendTo&&this.el.nativeElement.appendChild(this.container)}enableModality(){this.mask||(this.mask=document.createElement("div"),this.mask.style.zIndex=String(parseInt(this.container.style.zIndex)-1),DomHandler.addMultipleClasses(this.mask,"ui-widget-overlay ui-dialog-mask"),document.body.appendChild(this.mask),DomHandler.addClass(document.body,"ui-overflow-hidden"),this.blockScroll&&DomHandler.addClass(document.body,"ui-overflow-hidden"))}disableModality(){this.mask&&(document.body.removeChild(this.mask),DomHandler.removeClass(document.body,"ui-overflow-hidden"),this.blockScroll&&DomHandler.removeClass(document.body,"ui-overflow-hidden"),this.mask=null)}close(e){this.confirmation.rejectEvent&&this.confirmation.rejectEvent.emit(),this.hide(),e.preventDefault()}hide(){this.visible=!1}moveOnTop(){this.autoZIndex&&(this.container.style.zIndex=String(this.baseZIndex+ ++DomHandler.zindex))}bindGlobalListeners(){(this.closeOnEscape&&this.closable||this.focusTrap&&!this.documentEscapeListener)&&(this.documentEscapeListener=this.renderer.listen("document","keydown",e=>{if(27==e.which&&this.closeOnEscape&&this.closable&&parseInt(this.container.style.zIndex)===DomHandler.zindex+this.baseZIndex&&this.visible&&this.close(e),9===e.which&&this.focusTrap){e.preventDefault();let t=DomHandler.getFocusableElements(this.container);if(t&&t.length>0)if(document.activeElement){let i=t.indexOf(document.activeElement);e.shiftKey?-1==i||0===i?t[t.length-1].focus():t[i-1].focus():-1==i||i===t.length-1?t[0].focus():t[i+1].focus()}else t[0].focus()}}))}unbindGlobalListeners(){this.documentEscapeListener&&(this.documentEscapeListener(),this.documentEscapeListener=null)}onOverlayHide(){this.disableModality(),this.unbindGlobalListeners(),this.container=null}ngOnDestroy(){this.restoreAppend(),this.onOverlayHide(),this.subscription.unsubscribe()}accept(){this.confirmation.acceptEvent&&this.confirmation.acceptEvent.emit(),this.hide(),this.confirmation=null}reject(){this.confirmation.rejectEvent&&this.confirmation.rejectEvent.emit(),this.hide(),this.confirmation=null}};ConfirmDialog.ctorParameters=(()=>[{type:ElementRef},{type:Renderer2},{type:ConfirmationService},{type:NgZone}]),__decorate([Input()],ConfirmDialog.prototype,"visible",void 0),__decorate([Input()],ConfirmDialog.prototype,"header",void 0),__decorate([Input()],ConfirmDialog.prototype,"icon",void 0),__decorate([Input()],ConfirmDialog.prototype,"message",void 0),__decorate([Input()],ConfirmDialog.prototype,"style",void 0),__decorate([Input()],ConfirmDialog.prototype,"styleClass",void 0),__decorate([Input()],ConfirmDialog.prototype,"acceptIcon",void 0),__decorate([Input()],ConfirmDialog.prototype,"acceptLabel",void 0),__decorate([Input()],ConfirmDialog.prototype,"acceptVisible",void 0),__decorate([Input()],ConfirmDialog.prototype,"rejectIcon",void 0),__decorate([Input()],ConfirmDialog.prototype,"rejectLabel",void 0),__decorate([Input()],ConfirmDialog.prototype,"rejectVisible",void 0),__decorate([Input()],ConfirmDialog.prototype,"acceptButtonStyleClass",void 0),__decorate([Input()],ConfirmDialog.prototype,"rejectButtonStyleClass",void 0),__decorate([Input()],ConfirmDialog.prototype,"closeOnEscape",void 0),__decorate([Input()],ConfirmDialog.prototype,"blockScroll",void 0),__decorate([Input()],ConfirmDialog.prototype,"rtl",void 0),__decorate([Input()],ConfirmDialog.prototype,"closable",void 0),__decorate([Input()],ConfirmDialog.prototype,"appendTo",void 0),__decorate([Input()],ConfirmDialog.prototype,"key",void 0),__decorate([Input()],ConfirmDialog.prototype,"autoZIndex",void 0),__decorate([Input()],ConfirmDialog.prototype,"baseZIndex",void 0),__decorate([Input()],ConfirmDialog.prototype,"transitionOptions",void 0),__decorate([Input()],ConfirmDialog.prototype,"focusTrap",void 0),__decorate([ContentChild(Footer,{static:!0})],ConfirmDialog.prototype,"footer",void 0),__decorate([ViewChild("content",{static:!0})],ConfirmDialog.prototype,"contentViewChild",void 0);export{ConfirmDialog};let ConfirmDialogModule=class{};ConfirmDialogModule=__decorate([NgModule({imports:[CommonModule,ButtonModule],exports:[ConfirmDialog=__decorate([Component({selector:"p-confirmDialog",template:'\n        <div [ngClass]="{\'ui-dialog ui-confirmdialog ui-widget ui-widget-content ui-corner-all ui-shadow\':true,\'ui-dialog-rtl\':rtl}" [ngStyle]="style" [class]="styleClass" (mousedown)="moveOnTop()"\n            [@animation]="{value: \'visible\', params: {transitionParams: transitionOptions}}" (@animation.start)="onAnimationStart($event)" *ngIf="visible">\n            <div class="ui-dialog-titlebar ui-widget-header ui-helper-clearfix ui-corner-top">\n                <span class="ui-dialog-title" *ngIf="header">{{header}}</span>\n                <a *ngIf="closable" [ngClass]="{\'ui-dialog-titlebar-icon ui-dialog-titlebar-close ui-corner-all\':true}" tabindex="0" role="button" (click)="close($event)" (keydown.enter)="close($event)">\n                    <span class="pi pi-fw pi-times"></span>\n                </a>\n            </div>\n            <div #content class="ui-dialog-content ui-widget-content">\n                <i [ngClass]="\'ui-confirmdialog-icon\'" [class]="icon" *ngIf="icon"></i>\n                <span class="ui-confirmdialog-message" [innerHTML]="message"></span>\n            </div>\n            <div class="ui-dialog-footer ui-widget-content" *ngIf="footer">\n                <ng-content select="p-footer"></ng-content>\n            </div>\n            <div class="ui-dialog-footer ui-widget-content" *ngIf="!footer">\n                <button type="button" pButton [icon]="acceptIcon" [label]="acceptLabel" (click)="accept()" [class]="acceptButtonStyleClass" *ngIf="acceptVisible"></button>\n                <button type="button" pButton [icon]="rejectIcon" [label]="rejectLabel" (click)="reject()" [class]="rejectButtonStyleClass" *ngIf="rejectVisible"></button>\n            </div>\n        </div>\n    ',animations:[trigger("animation",[state("void",style({transform:"translateX(-50%) translateY(-50%) scale(0.7)",opacity:0})),state("visible",style({transform:"translateX(-50%) translateY(-50%) scale(1)",opacity:1})),transition("* => *",animate("{{transitionParams}}"))])]})],ConfirmDialog),ButtonModule,SharedModule],declarations:[ConfirmDialog]})],ConfirmDialogModule);export{ConfirmDialogModule};