var __decorate=this&&this.__decorate||function(e,t,o,c){var i,d=arguments.length,l=d<3?t:null===c?c=Object.getOwnPropertyDescriptor(t,o):c;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(e,t,o,c);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(l=(d<3?i(l):d>3?i(t,o,l):i(t,o))||l);return d>3&&l&&Object.defineProperty(t,o,l),l};import{NgModule,Component,Input,Output,EventEmitter,forwardRef,ChangeDetectorRef}from"@angular/core";import{CommonModule}from"@angular/common";import{NG_VALUE_ACCESSOR}from"@angular/forms";export const CHECKBOX_VALUE_ACCESSOR={provide:NG_VALUE_ACCESSOR,useExisting:forwardRef(()=>Checkbox),multi:!0};let Checkbox=class{constructor(e){this.cd=e,this.checkboxIcon="pi pi-check",this.onChange=new EventEmitter,this.onModelChange=(()=>{}),this.onModelTouched=(()=>{}),this.focused=!1,this.checked=!1}onClick(e,t,o){e.preventDefault(),this.disabled||this.readonly||(this.checked=!this.checked,this.updateModel(),o&&t.focus())}updateModel(){this.binary?this.onModelChange(this.checked):(this.checked?this.addValue():this.removeValue(),this.onModelChange(this.model),this.formControl&&this.formControl.setValue(this.model)),this.onChange.emit(this.checked)}handleChange(e){this.readonly||(this.checked=e.target.checked,this.updateModel())}isChecked(){return this.binary?this.model:this.model&&this.model.indexOf(this.value)>-1}removeValue(){this.model=this.model.filter(e=>e!==this.value)}addValue(){this.model?this.model=[...this.model,this.value]:this.model=[this.value]}onFocus(e){this.focused=!0}onBlur(e){this.focused=!1,this.onModelTouched()}writeValue(e){this.model=e,this.checked=this.isChecked(),this.cd.markForCheck()}registerOnChange(e){this.onModelChange=e}registerOnTouched(e){this.onModelTouched=e}setDisabledState(e){this.disabled=e}};Checkbox.ctorParameters=(()=>[{type:ChangeDetectorRef}]),__decorate([Input()],Checkbox.prototype,"value",void 0),__decorate([Input()],Checkbox.prototype,"name",void 0),__decorate([Input()],Checkbox.prototype,"disabled",void 0),__decorate([Input()],Checkbox.prototype,"binary",void 0),__decorate([Input()],Checkbox.prototype,"label",void 0),__decorate([Input()],Checkbox.prototype,"tabindex",void 0),__decorate([Input()],Checkbox.prototype,"inputId",void 0),__decorate([Input()],Checkbox.prototype,"style",void 0),__decorate([Input()],Checkbox.prototype,"styleClass",void 0),__decorate([Input()],Checkbox.prototype,"labelStyleClass",void 0),__decorate([Input()],Checkbox.prototype,"formControl",void 0),__decorate([Input()],Checkbox.prototype,"checkboxIcon",void 0),__decorate([Input()],Checkbox.prototype,"readonly",void 0),__decorate([Output()],Checkbox.prototype,"onChange",void 0),Checkbox=__decorate([Component({selector:"p-checkbox",template:'\n        <div [ngStyle]="style" [ngClass]="{\'ui-chkbox ui-widget\': true,\'ui-chkbox-readonly\': readonly}" [class]="styleClass">\n            <div class="ui-helper-hidden-accessible">\n                <input #cb type="checkbox" [attr.id]="inputId" [name]="name" [readonly]="readonly" [value]="value" [checked]="checked" (focus)="onFocus($event)" (blur)="onBlur($event)"\n                [ngClass]="{\'ui-state-focus\':focused}" (change)="handleChange($event)" [disabled]="disabled" [attr.tabindex]="tabindex">\n            </div>\n            <div class="ui-chkbox-box ui-widget ui-corner-all ui-state-default" (click)="onClick($event,cb,true)"\n                        [ngClass]="{\'ui-state-active\':checked,\'ui-state-disabled\':disabled,\'ui-state-focus\':focused}">\n                <span class="ui-chkbox-icon ui-clickable" [ngClass]="checked ? checkboxIcon : null"></span>\n            </div>\n        </div>\n        <label (click)="onClick($event,cb,true)" [class]="labelStyleClass"\n                [ngClass]="{\'ui-chkbox-label\': true, \'ui-label-active\':checked, \'ui-label-disabled\':disabled, \'ui-label-focus\':focused}"\n                *ngIf="label" [attr.for]="inputId">{{label}}</label>\n    ',providers:[CHECKBOX_VALUE_ACCESSOR]})],Checkbox);export{Checkbox};let CheckboxModule=class{};CheckboxModule=__decorate([NgModule({imports:[CommonModule],exports:[Checkbox],declarations:[Checkbox]})],CheckboxModule);export{CheckboxModule};