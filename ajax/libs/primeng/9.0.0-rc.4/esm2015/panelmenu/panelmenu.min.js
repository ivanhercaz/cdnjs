var __decorate=this&&this.__decorate||function(e,t,n,i){var a,l=arguments.length,s=l<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,i);else for(var r=e.length-1;r>=0;r--)(a=e[r])&&(s=(l<3?a(s):l>3?a(t,n,s):a(t,n))||s);return l>3&&s&&Object.defineProperty(t,n,s),s};import{NgModule,Component,Input,ChangeDetectorRef}from"@angular/core";import{trigger,state,style,transition,animate}from"@angular/animations";import{CommonModule}from"@angular/common";import{RouterModule}from"@angular/router";export class BasePanelMenuItem{constructor(e){this.ref=e}handleClick(e,t){t.disabled?e.preventDefault():(t.expanded=!t.expanded,this.ref.detectChanges(),t.url||e.preventDefault(),t.command&&t.command({originalEvent:e,item:t}))}};let PanelMenuSub=class extends BasePanelMenuItem{constructor(e){super(e)}};PanelMenuSub.ctorParameters=(()=>[{type:ChangeDetectorRef}]),__decorate([Input()],PanelMenuSub.prototype,"item",void 0),__decorate([Input()],PanelMenuSub.prototype,"expanded",void 0),__decorate([Input()],PanelMenuSub.prototype,"transitionOptions",void 0),PanelMenuSub=__decorate([Component({selector:"p-panelMenuSub",template:'\n        <ul class="ui-submenu-list" [@submenu]="expanded ? {value: \'visible\', params: {transitionParams: transitionOptions, height: \'*\'}} : {value: \'hidden\', params: {transitionParams: transitionOptions, height: \'0\'}}" role="tree">\n            <ng-template ngFor let-child [ngForOf]="item.items">\n                <li *ngIf="child.separator" class="ui-menu-separator ui-widget-content" role="separator">\n                <li *ngIf="!child.separator" class="ui-menuitem ui-corner-all" [ngClass]="child.styleClass" [class.ui-helper-hidden]="child.visible === false" [ngStyle]="child.style">\n                    <a *ngIf="!child.routerLink" [href]="child.url||\'#\'" class="ui-menuitem-link ui-corner-all" [attr.tabindex]="item.expanded ? null : child.tabindex ? child.tabindex : \'-1\'" [attr.id]="child.id"\n                        [ngClass]="{\'ui-state-disabled\':child.disabled, \'ui-state-active\': child.expanded}" role="treeitem" [attr.aria-expanded]="child.expanded"\n                        (click)="handleClick($event,child)" [attr.target]="child.target" [attr.title]="child.title">\n                        <span class="ui-panelmenu-icon pi pi-fw" [ngClass]="{\'pi-caret-right\':!child.expanded,\'pi-caret-down\':child.expanded}" *ngIf="child.items"></span\n                        ><span class="ui-menuitem-icon" [ngClass]="child.icon" *ngIf="child.icon"></span\n                        ><span class="ui-menuitem-text">{{child.label}}</span>\n                    </a>\n                    <a *ngIf="child.routerLink" [routerLink]="child.routerLink" [queryParams]="child.queryParams" [routerLinkActive]="\'ui-state-active\'" [routerLinkActiveOptions]="child.routerLinkActiveOptions||{exact:false}" class="ui-menuitem-link ui-corner-all" \n                        [ngClass]="{\'ui-state-disabled\':child.disabled}" [attr.tabindex]="item.expanded ? null : child.tabindex ? child.tabindex : \'-1\'" [attr.id]="child.id" role="treeitem" [attr.aria-expanded]="child.expanded"\n                        (click)="handleClick($event,child)" [attr.target]="child.target" [attr.title]="child.title">\n                        <span class="ui-panelmenu-icon pi pi-fw" [ngClass]="{\'pi-caret-right\':!child.expanded,\'pi-caret-down\':child.expanded}" *ngIf="child.items"></span\n                        ><span class="ui-menuitem-icon" [ngClass]="child.icon" *ngIf="child.icon"></span\n                        ><span class="ui-menuitem-text">{{child.label}}</span>\n                    </a>\n                    <p-panelMenuSub [item]="child" [expanded]="child.expanded" [transitionOptions]="transitionOptions" *ngIf="child.items"></p-panelMenuSub>\n                </li>\n            </ng-template>\n        </ul>\n    ',animations:[trigger("submenu",[state("hidden",style({height:"0px"})),state("void",style({height:"{{height}}"}),{params:{height:"0"}}),state("visible",style({height:"*"})),transition("visible => hidden",animate("{{transitionParams}}")),transition("hidden => visible",animate("{{transitionParams}}")),transition("void => hidden",animate("{{transitionParams}}")),transition("void => visible",animate("{{transitionParams}}"))])]})],PanelMenuSub);export{PanelMenuSub};let PanelMenu=class extends BasePanelMenuItem{constructor(e){super(e),this.multiple=!0,this.transitionOptions="400ms cubic-bezier(0.86, 0, 0.07, 1)"}collapseAll(){for(let e of this.model)e.expanded&&(e.expanded=!1)}handleClick(e,t){if(!this.multiple)for(let e of this.model)t!==e&&e.expanded&&(e.expanded=!1);this.animating=!0,super.handleClick(e,t)}onToggleDone(){this.animating=!1}};PanelMenu.ctorParameters=(()=>[{type:ChangeDetectorRef}]),__decorate([Input()],PanelMenu.prototype,"model",void 0),__decorate([Input()],PanelMenu.prototype,"style",void 0),__decorate([Input()],PanelMenu.prototype,"styleClass",void 0),__decorate([Input()],PanelMenu.prototype,"multiple",void 0),__decorate([Input()],PanelMenu.prototype,"transitionOptions",void 0);export{PanelMenu};let PanelMenuModule=class{};PanelMenuModule=__decorate([NgModule({imports:[CommonModule,RouterModule],exports:[PanelMenu=__decorate([Component({selector:"p-panelMenu",template:'\n        <div [class]="styleClass" [ngStyle]="style" [ngClass]="\'ui-panelmenu ui-widget\'">\n            <ng-container *ngFor="let item of model;let f=first;let l=last;">\n                <div class="ui-panelmenu-panel" [ngClass]="{\'ui-helper-hidden\': item.visible === false}">\n                    <div [ngClass]="{\'ui-widget ui-panelmenu-header ui-state-default\':true,\'ui-corner-top\':f,\'ui-corner-bottom\':l&&!item.expanded,\n                    \'ui-state-active\':item.expanded,\'ui-state-disabled\':item.disabled}" [class]="item.styleClass" [ngStyle]="item.style">\n                        <a *ngIf="!item.routerLink" [href]="item.url||\'#\'" (click)="handleClick($event,item)" [attr.tabindex]="item.tabindex ? item.tabindex : \'0\'" [attr.id]="item.id"\n                           [attr.target]="item.target" [attr.title]="item.title" class="ui-panelmenu-header-link" [attr.aria-expanded]="item.expanded" [attr.id]="item.id + \'_header\'" [attr.aria-controls]="item.id +\'_content\'">\n                        <span *ngIf="item.items" class="ui-panelmenu-icon pi pi-fw" [ngClass]="{\'pi-chevron-right\':!item.expanded,\'pi-chevron-down\':item.expanded}"></span\n                        ><span class="ui-menuitem-icon" [ngClass]="item.icon" *ngIf="item.icon"></span\n                        ><span class="ui-menuitem-text">{{item.label}}</span>\n                        </a>\n                        <a *ngIf="item.routerLink" [routerLink]="item.routerLink" [queryParams]="item.queryParams" [routerLinkActive]="\'ui-state-active\'" [routerLinkActiveOptions]="item.routerLinkActiveOptions||{exact:false}"\n                           (click)="handleClick($event,item)" [attr.target]="item.target" [attr.title]="item.title" class="ui-panelmenu-header-link" [attr.id]="item.id" [attr.tabindex]="item.tabindex ? item.tabindex : \'0\'">\n                        <span *ngIf="item.items" class="ui-panelmenu-icon pi pi-fw" [ngClass]="{\'pi-chevron-right\':!item.expanded,\'pi-chevron-down\':item.expanded}"></span\n                        ><span class="ui-menuitem-icon" [ngClass]="item.icon" *ngIf="item.icon"></span\n                        ><span class="ui-menuitem-text">{{item.label}}</span>\n                        </a>\n                    </div>\n                    <div *ngIf="item.items" class="ui-panelmenu-content-wrapper" [@rootItem]="item.expanded ? {value: \'visible\', params: {transitionParams: animating ? transitionOptions : \'0ms\', height: \'*\'}} : {value: \'hidden\', params: {transitionParams: transitionOptions, height: \'0\'}}"  (@rootItem.done)="onToggleDone()"\n                         [ngClass]="{\'ui-panelmenu-content-wrapper-overflown\': !item.expanded||animating}">\n                        <div class="ui-panelmenu-content ui-widget-content" role="region" [attr.id]="item.id +\'_content\' " [attr.aria-labelledby]="item.id +\'_header\'">\n                            <p-panelMenuSub [item]="item" [expanded]="true" [transitionOptions]="transitionOptions" class="ui-panelmenu-root-submenu"></p-panelMenuSub>\n                        </div>\n                    </div>\n                </div>\n            </ng-container>\n        </div>\n    ',animations:[trigger("rootItem",[state("hidden",style({height:"0px"})),state("void",style({height:"{{height}}"}),{params:{height:"0"}}),state("visible",style({height:"*"})),transition("visible => hidden",animate("{{transitionParams}}")),transition("hidden => visible",animate("{{transitionParams}}")),transition("void => hidden",animate("{{transitionParams}}")),transition("void => visible",animate("{{transitionParams}}"))])]})],PanelMenu),RouterModule],declarations:[PanelMenu,PanelMenuSub]})],PanelMenuModule);export{PanelMenuModule};