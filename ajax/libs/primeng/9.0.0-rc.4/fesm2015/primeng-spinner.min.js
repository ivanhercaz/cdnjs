import{forwardRef,EventEmitter,ElementRef,ChangeDetectorRef,Output,Input,ViewChild,Component,NgModule}from"@angular/core";import{CommonModule}from"@angular/common";import{InputTextModule}from"primeng/inputtext";import{NG_VALUE_ACCESSOR}from"@angular/forms";var __decorate=this&&this.__decorate||function(t,e,i,n){var o,a=arguments.length,r=a<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(t,e,i,n);else for(var s=t.length-1;s>=0;s--)(o=t[s])&&(r=(a<3?o(r):a>3?o(e,i,r):o(e,i))||r);return a>3&&r&&Object.defineProperty(e,i,r),r};const SPINNER_VALUE_ACCESSOR={provide:NG_VALUE_ACCESSOR,useExisting:forwardRef(()=>Spinner),multi:!0};let Spinner=class{constructor(t,e){this.el=t,this.cd=e,this.onChange=new EventEmitter,this.onFocus=new EventEmitter,this.onBlur=new EventEmitter,this.step=1,this.onModelChange=(()=>{}),this.onModelTouched=(()=>{}),this.keyPattern=/[0-9\+\-]/,this.negativeSeparator="-"}ngAfterViewInit(){this.value&&this.value.toString().indexOf(".")>0?this.precision=this.value.toString().split(/[.]/)[1].length:this.step%1!=0&&(this.precision=this.step.toString().split(/[,]|[.]/)[1].length),this.formatInput&&(this.localeDecimalSeparator=1.1.toLocaleString().substring(1,2),this.localeThousandSeparator=1e3.toLocaleString().substring(1,2),this.thousandRegExp=new RegExp(`[${this.thousandSeparator||this.localeThousandSeparator}]`,"gim"),this.decimalSeparator&&this.thousandSeparator&&this.decimalSeparator===this.thousandSeparator&&console.warn("thousandSeparator and decimalSeparator cannot have the same value."))}repeat(t,e,i){let n=e||500;this.clearTimer(),this.timer=setTimeout(()=>{this.repeat(t,40,i)},n),this.spin(t,i)}spin(t,e){let i,n=this.step*e;i=this.value?"string"==typeof this.value?this.parseValue(this.value):this.value:0,this.precision?this.value=parseFloat(this.toFixed(i+n,this.precision)):this.value=i+n,void 0!==this.maxlength&&this.value.toString().length>this.maxlength&&(this.value=i),void 0!==this.min&&this.value<this.min&&(this.value=this.min),void 0!==this.max&&this.value>this.max&&(this.value=this.max),this.formatValue(),this.onModelChange(this.value),this.onChange.emit(t)}toFixed(t,e){let i=Math.pow(10,e||0);return String(Math.round(t*i)/i)}onUpButtonMousedown(t){this.disabled||(this.inputfieldViewChild.nativeElement.focus(),this.repeat(t,null,1),this.updateFilledState(),t.preventDefault())}onUpButtonMouseup(t){this.disabled||this.clearTimer()}onUpButtonMouseleave(t){this.disabled||this.clearTimer()}onDownButtonMousedown(t){this.disabled||(this.inputfieldViewChild.nativeElement.focus(),this.repeat(t,null,-1),this.updateFilledState(),t.preventDefault())}onDownButtonMouseup(t){this.disabled||this.clearTimer()}onDownButtonMouseleave(t){this.disabled||this.clearTimer()}onInputKeydown(t){38==t.which?(this.spin(t,1),t.preventDefault()):40==t.which&&(this.spin(t,-1),t.preventDefault())}onInputChange(t){this.onChange.emit(t)}onInput(t){this.value=this.parseValue(t.target.value),this.onModelChange(this.value),this.updateFilledState()}onInputBlur(t){this.focus=!1,this.formatValue(),this.onModelTouched(),this.onBlur.emit(t)}onInputFocus(t){this.focus=!0,this.onFocus.emit(t)}parseValue(t){let e;return""===t.trim()?e=null:(this.formatInput&&(t=t.replace(this.thousandRegExp,"")),this.precision?(t=this.formatInput?t.replace(this.decimalSeparator||this.localeDecimalSeparator,"."):t.replace(",","."),e=parseFloat(t)):e=parseInt(t,10),isNaN(e)?e=null:(null!==this.max&&e>this.max&&(e=this.max),null!==this.min&&e<this.min&&(e=this.min))),e}formatValue(){let t=this.value;null!=t?(this.formatInput&&(t=t.toLocaleString(void 0,{maximumFractionDigits:20}),this.decimalSeparator&&this.thousandSeparator&&(t=t.split(this.localeDecimalSeparator),this.precision&&t[1]&&(t[1]=(this.decimalSeparator||this.localeDecimalSeparator)+t[1]),this.thousandSeparator&&t[0].length>3&&(t[0]=t[0].replace(new RegExp(`[${this.localeThousandSeparator}]`,"gim"),this.thousandSeparator)),t=t.join(""))),this.formattedValue=t.toString()):this.formattedValue=null,this.inputfieldViewChild&&this.inputfieldViewChild.nativeElement&&(this.inputfieldViewChild.nativeElement.value=this.formattedValue)}clearTimer(){this.timer&&clearInterval(this.timer)}writeValue(t){this.value=t,this.formatValue(),this.updateFilledState(),this.cd.markForCheck()}registerOnChange(t){this.onModelChange=t}registerOnTouched(t){this.onModelTouched=t}setDisabledState(t){this.disabled=t}updateFilledState(){this.filled=void 0!==this.value&&null!=this.value}};Spinner.ctorParameters=(()=>[{type:ElementRef},{type:ChangeDetectorRef}]),__decorate([Output()],Spinner.prototype,"onChange",void 0),__decorate([Output()],Spinner.prototype,"onFocus",void 0),__decorate([Output()],Spinner.prototype,"onBlur",void 0),__decorate([Input()],Spinner.prototype,"step",void 0),__decorate([Input()],Spinner.prototype,"min",void 0),__decorate([Input()],Spinner.prototype,"max",void 0),__decorate([Input()],Spinner.prototype,"maxlength",void 0),__decorate([Input()],Spinner.prototype,"size",void 0),__decorate([Input()],Spinner.prototype,"placeholder",void 0),__decorate([Input()],Spinner.prototype,"inputId",void 0),__decorate([Input()],Spinner.prototype,"disabled",void 0),__decorate([Input()],Spinner.prototype,"readonly",void 0),__decorate([Input()],Spinner.prototype,"tabindex",void 0),__decorate([Input()],Spinner.prototype,"required",void 0),__decorate([Input()],Spinner.prototype,"name",void 0),__decorate([Input()],Spinner.prototype,"ariaLabelledBy",void 0),__decorate([Input()],Spinner.prototype,"inputStyle",void 0),__decorate([Input()],Spinner.prototype,"inputStyleClass",void 0),__decorate([Input()],Spinner.prototype,"formatInput",void 0),__decorate([Input()],Spinner.prototype,"decimalSeparator",void 0),__decorate([Input()],Spinner.prototype,"thousandSeparator",void 0),__decorate([ViewChild("inputfield",{static:!0})],Spinner.prototype,"inputfieldViewChild",void 0);let SpinnerModule=class{};SpinnerModule=__decorate([NgModule({imports:[CommonModule,InputTextModule],exports:[Spinner=__decorate([Component({selector:"p-spinner",template:'\n        <span class="ui-spinner ui-widget ui-corner-all">\n            <input #inputfield type="text" [attr.id]="inputId" [value]="formattedValue||null" [attr.name]="name" [attr.aria-valumin]="min" [attr.aria-valuemax]="max" [attr.aria-valuenow]="value" [attr.aria-labelledby]="ariaLabelledBy"\n            [attr.size]="size" [attr.maxlength]="maxlength" [attr.tabindex]="tabindex" [attr.placeholder]="placeholder" [disabled]="disabled" [readonly]="readonly" [attr.required]="required"\n            (keydown)="onInputKeydown($event)" (blur)="onInputBlur($event)" (input)="onInput($event)" (change)="onInputChange($event)" (focus)="onInputFocus($event)"\n            [ngStyle]="inputStyle" [class]="inputStyleClass" [ngClass]="\'ui-spinner-input ui-inputtext ui-widget ui-state-default ui-corner-all\'">\n            <button type="button" [ngClass]="{\'ui-spinner-button ui-spinner-up ui-corner-tr ui-button ui-widget ui-state-default\':true,\'ui-state-disabled\':disabled}" [disabled]="disabled||readonly" [attr.tabindex]="tabindex" [attr.readonly]="readonly"\n                (mouseleave)="onUpButtonMouseleave($event)" (mousedown)="onUpButtonMousedown($event)" (mouseup)="onUpButtonMouseup($event)">\n                <span class="ui-spinner-button-icon pi pi-caret-up ui-clickable"></span>\n            </button>\n            <button type="button" [ngClass]="{\'ui-spinner-button ui-spinner-down ui-corner-br ui-button ui-widget ui-state-default\':true,\'ui-state-disabled\':disabled}" [disabled]="disabled||readonly" [attr.tabindex]="tabindex" [attr.readonly]="readonly"\n                (mouseleave)="onDownButtonMouseleave($event)" (mousedown)="onDownButtonMousedown($event)" (mouseup)="onDownButtonMouseup($event)">\n                <span class="ui-spinner-button-icon pi pi-caret-down ui-clickable"></span>\n            </button>\n        </span>\n    ',host:{"[class.ui-inputwrapper-filled]":"filled","[class.ui-inputwrapper-focus]":"focus"},providers:[SPINNER_VALUE_ACCESSOR]})],Spinner)],declarations:[Spinner]})],SpinnerModule);export{SPINNER_VALUE_ACCESSOR,Spinner,SpinnerModule};