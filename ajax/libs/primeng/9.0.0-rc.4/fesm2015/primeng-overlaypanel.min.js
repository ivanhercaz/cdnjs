import{EventEmitter,ElementRef,Renderer2,ChangeDetectorRef,NgZone,Input,Output,Component,NgModule}from"@angular/core";import{CommonModule}from"@angular/common";import{DomHandler}from"primeng/dom";import{trigger,state,style,transition,animate}from"@angular/animations";var __decorate=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,s=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,i);else for(var r=e.length-1;r>=0;r--)(o=e[r])&&(s=(a<3?o(s):a>3?o(t,n,s):o(t,n))||s);return a>3&&s&&Object.defineProperty(t,n,s),s};let OverlayPanel=class{constructor(e,t,n,i){this.el=e,this.renderer=t,this.cd=n,this.zone=i,this.dismissable=!0,this.autoZIndex=!0,this.baseZIndex=0,this.showTransitionOptions="225ms ease-out",this.hideTransitionOptions="195ms ease-in",this.onShow=new EventEmitter,this.onHide=new EventEmitter,this.visible=!1,this.isContainerClicked=!0}onContainerClick(){this.isContainerClicked=!0}bindDocumentClickListener(){!this.documentClickListener&&this.dismissable&&this.zone.runOutsideAngular(()=>{let e=DomHandler.isIOS()?"touchstart":"click";this.documentClickListener=this.renderer.listen("document",e,e=>{this.container.contains(e.target)||this.target===e.target||this.target.contains(e.target)||this.isContainerClicked||this.zone.run(()=>{this.hide()}),this.isContainerClicked=!1,this.cd.markForCheck()})})}unbindDocumentClickListener(){this.documentClickListener&&(this.documentClickListener(),this.documentClickListener=null)}toggle(e,t){this.visible?(this.visible=!1,this.hasTargetChanged(e,t)&&(this.target=t||e.currentTarget||e.target,setTimeout(()=>{this.visible=!0},200))):this.show(e,t)}show(e,t){this.target=t||e.currentTarget||e.target,this.visible=!0}hasTargetChanged(e,t){return null!=this.target&&this.target!==(t||e.currentTarget||e.target)}appendContainer(){this.appendTo&&("body"===this.appendTo?document.body.appendChild(this.container):DomHandler.appendChild(this.container,this.appendTo))}restoreAppend(){this.container&&this.appendTo&&this.el.nativeElement.appendChild(this.container)}onAnimationStart(e){switch(e.toState){case"visible":this.container=e.element,this.onShow.emit(null),this.appendContainer(),this.autoZIndex&&(this.container.style.zIndex=String(this.baseZIndex+ ++DomHandler.zindex)),DomHandler.absolutePosition(this.container,this.target),DomHandler.getOffset(this.container).top<DomHandler.getOffset(this.target).top&&DomHandler.addClass(this.container,"ui-overlaypanel-flipped"),Math.floor(DomHandler.getOffset(this.container).left)<Math.floor(DomHandler.getOffset(this.target).left)&&DomHandler.getOffset(this.container).left>0&&DomHandler.addClass(this.container,"ui-overlaypanel-shifted"),this.bindDocumentClickListener(),this.bindDocumentResizeListener();break;case"void":this.onContainerDestroy(),this.onHide.emit({})}}hide(){this.visible=!1}onCloseClick(e){this.hide(),e.preventDefault()}onWindowResize(e){this.hide()}bindDocumentResizeListener(){this.documentResizeListener=this.onWindowResize.bind(this),window.addEventListener("resize",this.documentResizeListener)}unbindDocumentResizeListener(){this.documentResizeListener&&(window.removeEventListener("resize",this.documentResizeListener),this.documentResizeListener=null)}onContainerDestroy(){this.unbindDocumentClickListener(),this.unbindDocumentResizeListener()}ngOnDestroy(){this.target=null,this.container&&(this.restoreAppend(),this.onContainerDestroy())}};OverlayPanel.ctorParameters=(()=>[{type:ElementRef},{type:Renderer2},{type:ChangeDetectorRef},{type:NgZone}]),__decorate([Input()],OverlayPanel.prototype,"dismissable",void 0),__decorate([Input()],OverlayPanel.prototype,"showCloseIcon",void 0),__decorate([Input()],OverlayPanel.prototype,"style",void 0),__decorate([Input()],OverlayPanel.prototype,"styleClass",void 0),__decorate([Input()],OverlayPanel.prototype,"appendTo",void 0),__decorate([Input()],OverlayPanel.prototype,"autoZIndex",void 0),__decorate([Input()],OverlayPanel.prototype,"ariaCloseLabel",void 0),__decorate([Input()],OverlayPanel.prototype,"baseZIndex",void 0),__decorate([Input()],OverlayPanel.prototype,"showTransitionOptions",void 0),__decorate([Input()],OverlayPanel.prototype,"hideTransitionOptions",void 0),__decorate([Output()],OverlayPanel.prototype,"onShow",void 0),__decorate([Output()],OverlayPanel.prototype,"onHide",void 0);let OverlayPanelModule=class{};OverlayPanelModule=__decorate([NgModule({imports:[CommonModule],exports:[OverlayPanel=__decorate([Component({selector:"p-overlayPanel",template:'\n        <div [ngClass]="\'ui-overlaypanel ui-widget ui-widget-content ui-corner-all ui-shadow\'" [ngStyle]="style" [class]="styleClass" (click)="onContainerClick()"\n            [@animation]="{value: \'visible\', params: {showTransitionParams: showTransitionOptions, hideTransitionParams: hideTransitionOptions}}" (@animation.start)="onAnimationStart($event)" *ngIf="visible">\n            <div class="ui-overlaypanel-content">\n                <ng-content></ng-content>\n            </div>\n            <a tabindex="0" *ngIf="showCloseIcon" class="ui-overlaypanel-close ui-state-default" (click)="onCloseClick($event)" (keydown.enter)="hide()" [attr.aria-label]="ariaCloseLabel">\n                <span class="ui-overlaypanel-close-icon pi pi-times"></span>\n            </a>\n        </div>\n    ',animations:[trigger("animation",[state("void",style({transform:"translateY(5%)",opacity:0})),state("visible",style({transform:"translateY(0)",opacity:1})),transition("void => visible",animate("{{showTransitionParams}}")),transition("visible => void",animate("{{hideTransitionParams}}"))])]})],OverlayPanel)],declarations:[OverlayPanel]})],OverlayPanelModule);export{OverlayPanel,OverlayPanelModule};