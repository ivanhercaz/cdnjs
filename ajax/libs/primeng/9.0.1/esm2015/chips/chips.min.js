var __decorate=this&&this.__decorate||function(e,t,i,l){var n,o=arguments.length,a=o<3?t:null===l?l=Object.getOwnPropertyDescriptor(t,i):l;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,i,l);else for(var s=e.length-1;s>=0;s--)(n=e[s])&&(a=(o<3?n(a):o>3?n(t,i,a):n(t,i))||a);return o>3&&a&&Object.defineProperty(t,i,a),a};import{NgModule,Component,ElementRef,Input,Output,EventEmitter,AfterContentInit,ContentChildren,QueryList,TemplateRef,forwardRef,ViewChild}from"@angular/core";import{CommonModule}from"@angular/common";import{SharedModule,PrimeTemplate}from"primeng/api";import{InputTextModule}from"primeng/inputtext";import{NG_VALUE_ACCESSOR}from"@angular/forms";export const CHIPS_VALUE_ACCESSOR={provide:NG_VALUE_ACCESSOR,useExisting:forwardRef(()=>Chips),multi:!0};let Chips=class{constructor(e){this.el=e,this.allowDuplicate=!0,this.onAdd=new EventEmitter,this.onRemove=new EventEmitter,this.onFocus=new EventEmitter,this.onBlur=new EventEmitter,this.onChipClick=new EventEmitter,this.onModelChange=(()=>{}),this.onModelTouched=(()=>{})}ngAfterContentInit(){this.templates.forEach(e=>{switch(e.getType()){case"item":default:this.itemTemplate=e.template}})}onClick(e){this.inputViewChild.nativeElement.focus()}updateFilledState(){this.value&&0!==this.value.length?this.filled=!0:this.filled=this.inputViewChild.nativeElement&&""!=this.inputViewChild.nativeElement.value}onItemClick(e,t){this.onChipClick.emit({originalEvent:e,value:t})}writeValue(e){this.value=e,this.updateMaxedOut()}registerOnChange(e){this.onModelChange=e}registerOnTouched(e){this.onModelTouched=e}setDisabledState(e){this.disabled=e}resolveFieldData(e,t){if(e&&t){if(-1==t.indexOf("."))return e[t];{let n=t.split("."),o=e;for(var i=0,l=n.length;i<l;++i)o=o[n[i]];return o}}return null}onInputFocus(e){this.focus=!0,this.onFocus.emit(e)}onInputBlur(e){this.focus=!1,this.addOnBlur&&this.inputViewChild.nativeElement.value&&(this.addItem(e,this.inputViewChild.nativeElement.value),this.inputViewChild.nativeElement.value=""),this.onModelTouched(),this.onBlur.emit(e)}removeItem(e,t){if(this.disabled)return;let i=this.value[t];this.value=this.value.filter((e,i)=>i!=t),this.onModelChange(this.value),this.onRemove.emit({originalEvent:e,value:i}),this.updateFilledState(),this.updateMaxedOut()}addItem(e,t){this.value=this.value||[],t&&t.trim().length&&(this.allowDuplicate||-1===this.value.indexOf(t))&&(this.value=[...this.value,t],this.onModelChange(this.value),this.onAdd.emit({originalEvent:e,value:t})),this.updateFilledState(),this.updateMaxedOut()}onKeydown(e){switch(e.which){case 8:if(0===this.inputViewChild.nativeElement.value.length&&this.value&&this.value.length>0){this.value=[...this.value];let t=this.value.pop();this.onModelChange(this.value),this.onRemove.emit({originalEvent:e,value:t}),this.updateFilledState()}break;case 13:this.addItem(e,this.inputViewChild.nativeElement.value),this.inputViewChild.nativeElement.value="",e.preventDefault();break;case 9:this.addOnTab&&""!==this.inputViewChild.nativeElement.value&&(this.addItem(e,this.inputViewChild.nativeElement.value),this.inputViewChild.nativeElement.value="",e.preventDefault());break;default:this.max&&this.value&&this.max===this.value.length&&e.preventDefault()}}updateMaxedOut(){this.inputViewChild&&this.inputViewChild.nativeElement&&(this.max&&this.value&&this.max===this.value.length?this.inputViewChild.nativeElement.disabled=!0:this.inputViewChild.nativeElement.disabled=this.disabled||!1)}};Chips.ctorParameters=(()=>[{type:ElementRef}]),__decorate([Input()],Chips.prototype,"style",void 0),__decorate([Input()],Chips.prototype,"styleClass",void 0),__decorate([Input()],Chips.prototype,"disabled",void 0),__decorate([Input()],Chips.prototype,"field",void 0),__decorate([Input()],Chips.prototype,"placeholder",void 0),__decorate([Input()],Chips.prototype,"max",void 0),__decorate([Input()],Chips.prototype,"ariaLabelledBy",void 0),__decorate([Input()],Chips.prototype,"tabindex",void 0),__decorate([Input()],Chips.prototype,"inputId",void 0),__decorate([Input()],Chips.prototype,"allowDuplicate",void 0),__decorate([Input()],Chips.prototype,"inputStyle",void 0),__decorate([Input()],Chips.prototype,"inputStyleClass",void 0),__decorate([Input()],Chips.prototype,"addOnTab",void 0),__decorate([Input()],Chips.prototype,"addOnBlur",void 0),__decorate([Output()],Chips.prototype,"onAdd",void 0),__decorate([Output()],Chips.prototype,"onRemove",void 0),__decorate([Output()],Chips.prototype,"onFocus",void 0),__decorate([Output()],Chips.prototype,"onBlur",void 0),__decorate([Output()],Chips.prototype,"onChipClick",void 0),__decorate([ViewChild("inputtext",{static:!0})],Chips.prototype,"inputViewChild",void 0),__decorate([ContentChildren(PrimeTemplate)],Chips.prototype,"templates",void 0),Chips=__decorate([Component({selector:"p-chips",template:'\n        <div [ngClass]="\'ui-chips ui-widget\'" [ngStyle]="style" [class]="styleClass" (click)="onClick($event)">\n            <ul [ngClass]="{\'ui-inputtext ui-state-default ui-corner-all\':true,\'ui-state-focus\':focus,\'ui-state-disabled\':disabled}">\n                <li #token *ngFor="let item of value; let i = index;" class="ui-chips-token ui-state-highlight ui-corner-all" (click)="onItemClick($event, item)">\n                    <span *ngIf="!disabled" class="ui-chips-token-icon pi pi-fw pi-times" (click)="removeItem($event,i)"></span>\n                    <span *ngIf="!itemTemplate" class="ui-chips-token-label">{{field ? resolveFieldData(item,field) : item}}</span>\n                    <ng-container *ngTemplateOutlet="itemTemplate; context: {$implicit: item}"></ng-container>\n                </li>\n                <li class="ui-chips-input-token">\n                    <input #inputtext type="text" [attr.id]="inputId" [attr.placeholder]="(value && value.length ? null : placeholder)" [attr.tabindex]="tabindex" (keydown)="onKeydown($event)" \n                    (input)="updateFilledState()" (paste)="updateFilledState()" [attr.aria-labelledby]="ariaLabelledBy" (focus)="onInputFocus($event)" (blur)="onInputBlur($event)" [disabled]="disabled" [ngStyle]="inputStyle" [class]="inputStyleClass">\n                </li>\n            </ul>\n        </div>\n    ',host:{"[class.ui-inputwrapper-filled]":"filled","[class.ui-inputwrapper-focus]":"focus"},providers:[CHIPS_VALUE_ACCESSOR]})],Chips);export{Chips};let ChipsModule=class{};ChipsModule=__decorate([NgModule({imports:[CommonModule,InputTextModule,SharedModule],exports:[Chips,InputTextModule,SharedModule],declarations:[Chips]})],ChipsModule);export{ChipsModule};