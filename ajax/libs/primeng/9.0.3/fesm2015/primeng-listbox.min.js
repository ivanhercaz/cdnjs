import{forwardRef,EventEmitter,ElementRef,ChangeDetectorRef,Input,Output,ViewChild,ContentChild,ContentChildren,Component,NgModule}from"@angular/core";import{CommonModule}from"@angular/common";import{Header,Footer,PrimeTemplate,SharedModule}from"primeng/api";import{DomHandler}from"primeng/dom";import{ObjectUtils,FilterUtils}from"primeng/utils";import{NG_VALUE_ACCESSOR}from"@angular/forms";var __decorate=this&&this.__decorate||function(e,t,i,o){var l,s=arguments.length,n=s<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,i):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)n=Reflect.decorate(e,t,i,o);else for(var a=e.length-1;a>=0;a--)(l=e[a])&&(n=(s<3?l(n):s>3?l(t,i,n):l(t,i))||n);return s>3&&n&&Object.defineProperty(t,i,n),n};const LISTBOX_VALUE_ACCESSOR={provide:NG_VALUE_ACCESSOR,useExisting:forwardRef(()=>Listbox),multi:!0};let Listbox=class{constructor(e,t){this.el=e,this.cd=t,this.checkbox=!1,this.filter=!1,this.filterMode="contains",this.metaKeySelection=!0,this.showToggleAll=!0,this.onChange=new EventEmitter,this.onClick=new EventEmitter,this.onDblClick=new EventEmitter,this.onModelChange=(()=>{}),this.onModelTouched=(()=>{}),this.disabledSelectedOptions=[]}get options(){return this._options}set options(e){let t=this.optionLabel?ObjectUtils.generateSelectItems(e,this.optionLabel):e;this._options=t}get filterValue(){return this._filterValue}set filterValue(e){this._filterValue=e}ngAfterContentInit(){this.templates.forEach(e=>{switch(e.getType()){case"item":default:this.itemTemplate=e.template}})}writeValue(e){this.value=e,this.setDisabledSelectedOptions(),this.cd.markForCheck()}registerOnChange(e){this.onModelChange=e}registerOnTouched(e){this.onModelTouched=e}setDisabledState(e){this.disabled=e}onOptionClick(e,t){this.disabled||t.disabled||this.readonly||(this.multiple?this.checkbox?this.onOptionClickCheckbox(e,t):this.onOptionClickMultiple(e,t):this.onOptionClickSingle(e,t),this.onClick.emit({originalEvent:e,option:t,value:this.value}),this.optionTouched=!1)}onOptionTouchEnd(e,t){this.disabled||t.disabled||this.readonly||(this.optionTouched=!0)}onOptionDoubleClick(e,t){this.disabled||t.disabled||this.readonly||this.onDblClick.emit({originalEvent:e,option:t,value:this.value})}onOptionClickSingle(e,t){let i=this.isSelected(t),o=!1;if(!this.optionTouched&&this.metaKeySelection){let l=e.metaKey||e.ctrlKey;i?l&&(this.value=null,o=!0):(this.value=t.value,o=!0)}else this.value=i?null:t.value,o=!0;o&&(this.onModelChange(this.value),this.onChange.emit({originalEvent:e,value:this.value}))}onOptionClickMultiple(e,t){let i=this.isSelected(t),o=!1;if(!this.optionTouched&&this.metaKeySelection){let l=e.metaKey||e.ctrlKey;i?(l?this.removeOption(t):this.value=[t.value],o=!0):(this.value=l&&this.value||[],this.value=[...this.value,t.value],o=!0)}else i?this.removeOption(t):this.value=[...this.value||[],t.value],o=!0;o&&(this.onModelChange(this.value),this.onChange.emit({originalEvent:e,value:this.value}))}onOptionClickCheckbox(e,t){if(this.disabled||this.readonly)return;this.isSelected(t)?this.removeOption(t):(this.value=this.value?this.value:[],this.value=[...this.value,t.value]),this.onModelChange(this.value),this.onChange.emit({originalEvent:e,value:this.value})}removeOption(e){this.value=this.value.filter(t=>!ObjectUtils.equals(t,e.value,this.dataKey))}isSelected(e){let t=!1;if(this.multiple){if(this.value)for(let i of this.value)if(ObjectUtils.equals(i,e.value,this.dataKey)){t=!0;break}}else t=ObjectUtils.equals(this.value,e.value,this.dataKey);return t}get allChecked(){if(this.filterValue)return this.allFilteredSelected();{let e=this.getEnabledOptionCount(),t=this.disabledSelectedOptions.length;return this.value&&this.options&&this.value.length>0&&this.value.length==e+t}}getEnabledOptionCount(){if(this.options){let e=0;for(let t of this.options)t.disabled||e++;return e}return 0}allFilteredSelected(){let e,t=this.filterValue?this.getFilteredOptions():this.options;if(this.value&&t&&t.length){e=!0;for(let t of this.options)if(this.isItemVisible(t)&&!this.isSelected(t)){e=!1;break}}return e}onFilter(e){this._filterValue=e.target.value}toggleAll(e){if(!this.disabled&&!this.readonly&&this.options&&0!==this.options.length){if(this.allChecked)if(this.disabledSelectedOptions&&this.disabledSelectedOptions.length>0){let e=[];e=[...this.disabledSelectedOptions],this.value=e}else this.value=[];else if(this.options){this.value=[],this.disabledSelectedOptions&&this.disabledSelectedOptions.length>0&&(this.value=[...this.disabledSelectedOptions]);for(let e=0;e<this.options.length;e++){let t=this.options[e];this.isItemVisible(t)&&!t.disabled&&this.value.push(t.value)}}this.onModelChange(this.value),this.onChange.emit({originalEvent:e,value:this.value}),e.preventDefault()}}isItemVisible(e){if(this.filterValue){let t;ObjectUtils.removeAccents(this.filterValue).toLowerCase();return t=!this.filterMode||FilterUtils[this.filterMode](e.label,this.filterValue)}return!0}onInputFocus(e){this.focus=!0}onInputBlur(e){this.focus=!1}onOptionKeyDown(e,t){if(this.readonly)return;let i=e.currentTarget;switch(e.which){case 40:var o=this.findNextItem(i);o&&o.focus(),e.preventDefault();break;case 38:var l=this.findPrevItem(i);l&&l.focus(),e.preventDefault();break;case 13:this.onOptionClick(e,t),e.preventDefault()}}findNextItem(e){let t=e.nextElementSibling;return t?DomHandler.hasClass(t,"ui-state-disabled")||DomHandler.isHidden(t)?this.findNextItem(t):t:null}findPrevItem(e){let t=e.previousElementSibling;return t?DomHandler.hasClass(t,"ui-state-disabled")||DomHandler.isHidden(t)?this.findPrevItem(t):t:null}getFilteredOptions(){let e=[];if(this.filterValue){for(let t=0;t<this.options.length;t++){let i=this.options[t];this.isItemVisible(i)&&!i.disabled&&e.push(i)}return e}return this.options}onHeaderCheckboxFocus(){this.headerCheckboxFocus=!0}onHeaderCheckboxBlur(){this.headerCheckboxFocus=!1}setDisabledSelectedOptions(){if(this.options&&(this.disabledSelectedOptions=[],this.value))for(let e of this.options)e.disabled&&this.isSelected(e)&&this.disabledSelectedOptions.push(e.value)}};Listbox.ctorParameters=(()=>[{type:ElementRef},{type:ChangeDetectorRef}]),__decorate([Input()],Listbox.prototype,"multiple",void 0),__decorate([Input()],Listbox.prototype,"style",void 0),__decorate([Input()],Listbox.prototype,"styleClass",void 0),__decorate([Input()],Listbox.prototype,"listStyle",void 0),__decorate([Input()],Listbox.prototype,"readonly",void 0),__decorate([Input()],Listbox.prototype,"disabled",void 0),__decorate([Input()],Listbox.prototype,"checkbox",void 0),__decorate([Input()],Listbox.prototype,"filter",void 0),__decorate([Input()],Listbox.prototype,"filterMode",void 0),__decorate([Input()],Listbox.prototype,"metaKeySelection",void 0),__decorate([Input()],Listbox.prototype,"dataKey",void 0),__decorate([Input()],Listbox.prototype,"showToggleAll",void 0),__decorate([Input()],Listbox.prototype,"optionLabel",void 0),__decorate([Input()],Listbox.prototype,"ariaFilterLabel",void 0),__decorate([Input()],Listbox.prototype,"filterPlaceHolder",void 0),__decorate([Output()],Listbox.prototype,"onChange",void 0),__decorate([Output()],Listbox.prototype,"onClick",void 0),__decorate([Output()],Listbox.prototype,"onDblClick",void 0),__decorate([ViewChild("headerchkbox")],Listbox.prototype,"headerCheckboxViewChild",void 0),__decorate([ContentChild(Header)],Listbox.prototype,"headerFacet",void 0),__decorate([ContentChild(Footer)],Listbox.prototype,"footerFacet",void 0),__decorate([ContentChildren(PrimeTemplate)],Listbox.prototype,"templates",void 0),__decorate([Input()],Listbox.prototype,"options",null),__decorate([Input()],Listbox.prototype,"filterValue",null);let ListboxModule=class{};ListboxModule=__decorate([NgModule({imports:[CommonModule,SharedModule],exports:[Listbox=__decorate([Component({selector:"p-listbox",template:'\n    <div [ngClass]="{\'ui-listbox ui-inputtext ui-widget ui-widget-content ui-corner-all\':true,\'ui-state-disabled\':disabled,\'ui-state-focus\':focus}" [ngStyle]="style" [class]="styleClass">\n      <div class="ui-helper-hidden-accessible">\n        <input type="text" readonly="readonly" (focus)="onInputFocus($event)" (blur)="onInputBlur($event)">\n      </div>\n      <div class="ui-widget-header ui-corner-all ui-listbox-header ui-helper-clearfix" *ngIf="headerFacet">\n        <ng-content select="p-header"></ng-content>\n      </div>\n      <div class="ui-widget-header ui-corner-all ui-listbox-header ui-helper-clearfix" *ngIf="(checkbox && multiple && showToggleAll) || filter" [ngClass]="{\'ui-listbox-header-w-checkbox\': checkbox}">\n        <div class="ui-chkbox ui-widget" *ngIf="checkbox && multiple && showToggleAll">\n          <div class="ui-helper-hidden-accessible">\n            <input type="checkbox" readonly="readonly" [checked]="allChecked" (focus)="onHeaderCheckboxFocus()" (blur)="onHeaderCheckboxBlur()" (keydown.space)="toggleAll($event)">\n          </div>\n          <div #headerchkbox class="ui-chkbox-box ui-widget ui-corner-all ui-state-default" [ngClass]="{\'ui-state-active\': allChecked, \'ui-state-focus\': headerCheckboxFocus}" (click)="toggleAll($event)">\n            <span class="ui-chkbox-icon ui-clickable" [ngClass]="{\'pi pi-check\':allChecked}"></span>\n          </div>\n        </div>\n        <div class="ui-listbox-filter-container" *ngIf="filter">\n          <input type="text" [value]="filterValue||\'\'" (input)="onFilter($event)" class="ui-inputtext ui-widget ui-state-default ui-corner-all" [disabled]="disabled" [attr.placeholder]="filterPlaceHolder" [attr.aria-label]="ariaFilterLabel">\n          <span class="ui-listbox-filter-icon pi pi-search"></span>\n        </div>\n      </div>\n      <div class="ui-listbox-list-wrapper" [ngStyle]="listStyle">\n        <ul class="ui-listbox-list" role="listbox" aria-multiselectable="multiple">\n          <li *ngFor="let option of options; let i = index;" [style.display]="isItemVisible(option) ? \'block\' : \'none\'" [attr.tabindex]="option.disabled ? null : \'0\'"\n              [ngClass]="{\'ui-listbox-item ui-corner-all\':true,\'ui-state-highlight\':isSelected(option), \'ui-state-disabled\': option.disabled}" role="option" [attr.aria-label]="option.label"\n              [attr.aria-selected]="isSelected(option)" (click)="onOptionClick($event,option)" (dblclick)="onOptionDoubleClick($event,option)" (touchend)="onOptionTouchEnd($event,option)" (keydown)="onOptionKeyDown($event,option)">\n            <div class="ui-chkbox ui-widget" *ngIf="checkbox && multiple">\n              <div class="ui-chkbox-box ui-widget ui-corner-all ui-state-default" [ngClass]="{\'ui-state-active\':isSelected(option)}">\n                <span class="ui-chkbox-icon ui-clickable" [ngClass]="{\'pi pi-check\':isSelected(option)}"></span>\n              </div>\n            </div>\n            <span *ngIf="!itemTemplate">{{option.label}}</span>\n            <ng-container *ngTemplateOutlet="itemTemplate; context: {$implicit: option, index: i}"></ng-container>\n          </li>\n        </ul>\n      </div>\n      <div class="ui-listbox-footer ui-widget-header ui-corner-all" *ngIf="footerFacet">\n        <ng-content select="p-footer"></ng-content>\n      </div>\n    </div>\n  ',providers:[LISTBOX_VALUE_ACCESSOR]})],Listbox),SharedModule],declarations:[Listbox]})],ListboxModule);export{LISTBOX_VALUE_ACCESSOR,Listbox,ListboxModule};