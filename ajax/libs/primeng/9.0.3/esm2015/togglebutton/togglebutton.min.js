var __decorate=this&&this.__decorate||function(e,t,o,n){var i,l=arguments.length,c=l<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)c=Reflect.decorate(e,t,o,n);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(c=(l<3?i(c):l>3?i(t,o,c):i(t,o))||c);return l>3&&c&&Object.defineProperty(t,o,c),c};import{NgModule,Component,Input,Output,EventEmitter,forwardRef,ViewChild}from"@angular/core";import{CommonModule}from"@angular/common";import{NG_VALUE_ACCESSOR}from"@angular/forms";export const TOGGLEBUTTON_VALUE_ACCESSOR={provide:NG_VALUE_ACCESSOR,useExisting:forwardRef(()=>ToggleButton),multi:!0};let ToggleButton=class{constructor(){this.onLabel="Yes",this.offLabel="No",this.iconPos="left",this.onChange=new EventEmitter,this.checked=!1,this.focus=!1,this.onModelChange=(()=>{}),this.onModelTouched=(()=>{})}ngAfterViewInit(){this.checkboxViewChild&&(this.checkbox=this.checkboxViewChild.nativeElement)}toggle(e){this.disabled||(this.checked=!this.checked,this.onModelChange(this.checked),this.onModelTouched(),this.onChange.emit({originalEvent:e,checked:this.checked}),this.checkbox&&this.checkbox.focus())}onFocus(){this.focus=!0}onBlur(){this.focus=!1,this.onModelTouched()}writeValue(e){this.checked=e}registerOnChange(e){this.onModelChange=e}registerOnTouched(e){this.onModelTouched=e}setDisabledState(e){this.disabled=e}get hasOnLabel(){return this.onLabel&&this.onLabel.length>0}get hasOffLabel(){return this.onLabel&&this.onLabel.length>0}};__decorate([Input()],ToggleButton.prototype,"onLabel",void 0),__decorate([Input()],ToggleButton.prototype,"offLabel",void 0),__decorate([Input()],ToggleButton.prototype,"onIcon",void 0),__decorate([Input()],ToggleButton.prototype,"offIcon",void 0),__decorate([Input()],ToggleButton.prototype,"ariaLabelledBy",void 0),__decorate([Input()],ToggleButton.prototype,"disabled",void 0),__decorate([Input()],ToggleButton.prototype,"style",void 0),__decorate([Input()],ToggleButton.prototype,"styleClass",void 0),__decorate([Input()],ToggleButton.prototype,"inputId",void 0),__decorate([Input()],ToggleButton.prototype,"tabindex",void 0),__decorate([Input()],ToggleButton.prototype,"iconPos",void 0),__decorate([Output()],ToggleButton.prototype,"onChange",void 0),__decorate([ViewChild("checkbox")],ToggleButton.prototype,"checkboxViewChild",void 0),ToggleButton=__decorate([Component({selector:"p-toggleButton",template:'\n        <div [ngClass]="{\'ui-button ui-togglebutton ui-widget ui-state-default ui-corner-all\': true, \'ui-button-text-only\': (!onIcon && !offIcon), \n                \'ui-button-text-icon-left\': (onIcon && offIcon && hasOnLabel && hasOffLabel && iconPos === \'left\'), \n                \'ui-button-text-icon-right\': (onIcon && offIcon && hasOnLabel && hasOffLabel && iconPos === \'right\'),\'ui-button-icon-only\': (onIcon && offIcon && !hasOnLabel && !hasOffLabel),\n                \'ui-state-active\': checked,\'ui-state-focus\':focus,\'ui-state-disabled\':disabled}" [ngStyle]="style" [class]="styleClass" \n                (click)="toggle($event)" (keydown.enter)="toggle($event)">\n            <div class="ui-helper-hidden-accessible">\n                <input #checkbox type="checkbox" [attr.id]="inputId" [checked]="checked" (focus)="onFocus()" (blur)="onBlur()" [attr.tabindex]="tabindex"\n                    role="button" [attr.aria-pressed]="checked" [attr.aria-labelledby]="ariaLabelledBy">\n            </div>\n            <span *ngIf="onIcon||offIcon" class="ui-button-icon-left" [class]="checked ? this.onIcon : this.offIcon" [ngClass]="{\'ui-button-icon-left\': (iconPos === \'left\'), \n            \'ui-button-icon-right\': (iconPos === \'right\')}"></span>\n            <span class="ui-button-text ui-unselectable-text">{{checked ? hasOnLabel ? onLabel : \'ui-btn\' : hasOffLabel ? offLabel : \'ui-btn\'}}</span>\n        </div>\n    ',providers:[TOGGLEBUTTON_VALUE_ACCESSOR]})],ToggleButton);export{ToggleButton};let ToggleButtonModule=class{};ToggleButtonModule=__decorate([NgModule({imports:[CommonModule],exports:[ToggleButton],declarations:[ToggleButton]})],ToggleButtonModule);export{ToggleButtonModule};