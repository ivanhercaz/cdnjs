var __decorate=this&&this.__decorate||function(t,e,n,o){var i,a=arguments.length,r=a<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(t,e,n,o);else for(var l=t.length-1;l>=0;l--)(i=t[l])&&(r=(a<3?i(r):a>3?i(e,n,r):i(e,n))||r);return a>3&&r&&Object.defineProperty(e,n,r),r},__param=this&&this.__param||function(t,e){return function(n,o){e(n,o,t)}};import{NgModule,Component,ElementRef,Input,Output,AfterContentInit,EventEmitter,TemplateRef,Inject,forwardRef,ContentChildren,QueryList}from"@angular/core";import{trigger,state,style,transition,animate}from"@angular/animations";import{CommonModule}from"@angular/common";import{SharedModule}from"primeng/api";import{PrimeTemplate}from"primeng/api";let OrganizationChartNode=class{constructor(t){this.chart=t}get leaf(){return 0!=this.node.leaf&&!(this.node.children&&this.node.children.length)}get colspan(){return this.node.children&&this.node.children.length?2*this.node.children.length:null}onNodeClick(t,e){this.chart.onNodeClick(t,e)}toggleNode(t,e){e.expanded=!e.expanded,e.expanded?this.chart.onNodeExpand.emit({originalEvent:t,node:this.node}):this.chart.onNodeCollapse.emit({originalEvent:t,node:this.node}),t.preventDefault()}isSelected(){return this.chart.isSelected(this.node)}};OrganizationChartNode.ctorParameters=(()=>[{type:void 0,decorators:[{type:Inject,args:[forwardRef(()=>OrganizationChart)]}]}]),__decorate([Input()],OrganizationChartNode.prototype,"node",void 0),__decorate([Input()],OrganizationChartNode.prototype,"root",void 0),__decorate([Input()],OrganizationChartNode.prototype,"first",void 0),__decorate([Input()],OrganizationChartNode.prototype,"last",void 0),OrganizationChartNode=__decorate([Component({selector:"[pOrganizationChartNode]",template:'\n        <tr *ngIf="node">\n            <td [attr.colspan]="colspan">\n                <div class="ui-organizationchart-node-content ui-widget-content ui-corner-all {{node.styleClass}}" \n                    [ngClass]="{\'ui-organizationchart-selectable-node\': chart.selectionMode && node.selectable !== false,\'ui-state-highlight\':isSelected()}"\n                    (click)="onNodeClick($event,node)">\n                    <div *ngIf="!chart.getTemplateForNode(node)">{{node.label}}</div>\n                    <div *ngIf="chart.getTemplateForNode(node)">\n                        <ng-container *ngTemplateOutlet="chart.getTemplateForNode(node); context: {$implicit: node}"></ng-container>\n                    </div>\n                    <a *ngIf="!leaf" tabindex="0" class="ui-node-toggler" (click)="toggleNode($event, node)" (keydown.enter)="toggleNode($event, node)">\n                        <i class="ui-node-toggler-icon pi" [ngClass]="{\'pi-chevron-down\': node.expanded, \'pi-chevron-up\': !node.expanded}"></i>\n                    </a>\n                </div>\n            </td>\n        </tr>\n        <tr [ngClass]="!leaf&&node.expanded ? \'ui-organizationchart-node-visible\' : \'ui-organizationchart-node-hidden\'" class="ui-organizationchart-lines" [@childState]="\'in\'">\n            <td [attr.colspan]="colspan">\n                <div class="ui-organizationchart-line-down"></div>\n            </td>\n        </tr>\n        <tr [ngClass]="!leaf&&node.expanded ? \'ui-organizationchart-node-visible\' : \'ui-organizationchart-node-hidden\'" class="ui-organizationchart-lines" [@childState]="\'in\'">\n            <ng-container *ngIf="node.children && node.children.length === 1">\n                <td [attr.colspan]="colspan">\n                    <div class="ui-organizationchart-line-down"></div>\n                </td>\n            </ng-container>\n            <ng-container *ngIf="node.children && node.children.length > 1">\n                <ng-template ngFor let-child [ngForOf]="node.children" let-first="first" let-last="last">\n                    <td class="ui-organizationchart-line-left" [ngClass]="{\'ui-organizationchart-line-top\':!first}">&nbsp;</td>\n                    <td class="ui-organizationchart-line-right" [ngClass]="{\'ui-organizationchart-line-top\':!last}">&nbsp;</td>\n                </ng-template>\n            </ng-container>\n        </tr>\n        <tr [ngClass]="!leaf&&node.expanded ? \'ui-organizationchart-node-visible\' : \'ui-organizationchart-node-hidden\'" class="ui-organizationchart-nodes" [@childState]="\'in\'">\n            <td *ngFor="let child of node.children" colspan="2">\n                <table class="ui-organizationchart-table" pOrganizationChartNode [node]="child"></table>\n            </td>\n        </tr>\n    ',animations:[trigger("childState",[state("in",style({opacity:1})),transition("void => *",[style({opacity:0}),animate(150)]),transition("* => void",[animate(150,style({opacity:0}))])])]}),__param(0,Inject(forwardRef(()=>OrganizationChart)))],OrganizationChartNode);export{OrganizationChartNode};let OrganizationChart=class{constructor(t){this.el=t,this.preserveSpace=!0,this.selectionChange=new EventEmitter,this.onNodeSelect=new EventEmitter,this.onNodeUnselect=new EventEmitter,this.onNodeExpand=new EventEmitter,this.onNodeCollapse=new EventEmitter}get root(){return this.value&&this.value.length?this.value[0]:null}ngAfterContentInit(){this.templates.length&&(this.templateMap={}),this.templates.forEach(t=>{this.templateMap[t.getType()]=t.template})}getTemplateForNode(t){return this.templateMap?t.type?this.templateMap[t.type]:this.templateMap.default:null}onNodeClick(t,e){let n=t.target;if((!n.className||-1===n.className.indexOf("ui-node-toggler")&&-1===n.className.indexOf("ui-node-toggler-icon"))&&this.selectionMode){if(!1===e.selectable)return;let n=this.findIndexInSelection(e),o=n>=0;"single"===this.selectionMode?o?(this.selection=null,this.onNodeUnselect.emit({originalEvent:t,node:e})):(this.selection=e,this.onNodeSelect.emit({originalEvent:t,node:e})):"multiple"===this.selectionMode&&(o?(this.selection=this.selection.filter((t,e)=>e!=n),this.onNodeUnselect.emit({originalEvent:t,node:e})):(this.selection=[...this.selection||[],e],this.onNodeSelect.emit({originalEvent:t,node:e}))),this.selectionChange.emit(this.selection)}}findIndexInSelection(t){let e=-1;if(this.selectionMode&&this.selection)if("single"===this.selectionMode)e=this.selection==t?0:-1;else if("multiple"===this.selectionMode)for(let n=0;n<this.selection.length;n++)if(this.selection[n]==t){e=n;break}return e}isSelected(t){return-1!=this.findIndexInSelection(t)}};OrganizationChart.ctorParameters=(()=>[{type:ElementRef}]),__decorate([Input()],OrganizationChart.prototype,"value",void 0),__decorate([Input()],OrganizationChart.prototype,"style",void 0),__decorate([Input()],OrganizationChart.prototype,"styleClass",void 0),__decorate([Input()],OrganizationChart.prototype,"selectionMode",void 0),__decorate([Input()],OrganizationChart.prototype,"selection",void 0),__decorate([Input()],OrganizationChart.prototype,"preserveSpace",void 0),__decorate([Output()],OrganizationChart.prototype,"selectionChange",void 0),__decorate([Output()],OrganizationChart.prototype,"onNodeSelect",void 0),__decorate([Output()],OrganizationChart.prototype,"onNodeUnselect",void 0),__decorate([Output()],OrganizationChart.prototype,"onNodeExpand",void 0),__decorate([Output()],OrganizationChart.prototype,"onNodeCollapse",void 0),__decorate([ContentChildren(PrimeTemplate)],OrganizationChart.prototype,"templates",void 0),OrganizationChart=__decorate([Component({selector:"p-organizationChart",template:'\n        <div [ngStyle]="style" [class]="styleClass" [ngClass]="{\'ui-organizationchart ui-widget\': true, \'ui-organizationchart-preservespace\': preserveSpace}">\n            <table class="ui-organizationchart-table" pOrganizationChartNode [node]="root" *ngIf="root"></table>\n        </div>\n    '})],OrganizationChart);export{OrganizationChart};let OrganizationChartModule=class{};OrganizationChartModule=__decorate([NgModule({imports:[CommonModule],exports:[OrganizationChart,SharedModule],declarations:[OrganizationChart,OrganizationChartNode]})],OrganizationChartModule);export{OrganizationChartModule};