import{forwardRef,EventEmitter,ChangeDetectorRef,Input,Output,ContentChild,TemplateRef,Component,ChangeDetectionStrategy,NgModule}from"@angular/core";import{CommonModule}from"@angular/common";import{ObjectUtils}from"primeng/utils";import{NG_VALUE_ACCESSOR}from"@angular/forms";var __decorate=this&&this.__decorate||function(t,e,o,n){var i,r=arguments.length,l=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(t,e,o,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(l=(r<3?i(l):r>3?i(e,o,l):i(e,o))||l);return r>3&&l&&Object.defineProperty(e,o,l),l},__read=this&&this.__read||function(t,e){var o="function"==typeof Symbol&&t[Symbol.iterator];if(!o)return t;var n,i,r=o.call(t),l=[];try{for(;(void 0===e||e-- >0)&&!(n=r.next()).done;)l.push(n.value)}catch(t){i={error:t}}finally{try{n&&!n.done&&(o=r.return)&&o.call(r)}finally{if(i)throw i.error}}return l},__spread=this&&this.__spread||function(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(__read(arguments[e]));return t},SELECTBUTTON_VALUE_ACCESSOR={provide:NG_VALUE_ACCESSOR,useExisting:forwardRef(function(){return SelectButton}),multi:!0},SelectButton=function(){function t(t){this.cd=t,this.tabindex=0,this.onOptionClick=new EventEmitter,this.onChange=new EventEmitter,this.onModelChange=function(){},this.onModelTouched=function(){}}return Object.defineProperty(t.prototype,"options",{get:function(){return this._options},set:function(t){},enumerable:!0,configurable:!0}),t.prototype.ngOnChanges=function(t){t.options&&(this._options=this.optionLabel?ObjectUtils.generateSelectItems(t.options.currentValue,this.optionLabel):t.options.currentValue)},t.prototype.writeValue=function(t){this.value=t,this.cd.markForCheck()},t.prototype.registerOnChange=function(t){this.onModelChange=t},t.prototype.registerOnTouched=function(t){this.onModelTouched=t},t.prototype.setDisabledState=function(t){this.disabled=t},t.prototype.onItemClick=function(t,e,o){if(!this.disabled&&!e.disabled){if(this.multiple){var n=this.findItemIndex(e);this.value=-1!=n?this.value.filter(function(t,e){return e!=n}):__spread(this.value||[],[e.value])}else this.value=e.value;this.onOptionClick.emit({originalEvent:t,option:e,index:o}),this.onModelChange(this.value),this.onChange.emit({originalEvent:t,value:this.value})}},t.prototype.onFocus=function(t){this.focusedItem=t.target},t.prototype.onBlur=function(t){this.focusedItem=null,this.onModelTouched()},t.prototype.isSelected=function(t){return this.multiple?-1!=this.findItemIndex(t):ObjectUtils.equals(t.value,this.value,this.dataKey)},t.prototype.findItemIndex=function(t){var e=-1;if(this.value)for(var o=0;o<this.value.length;o++)if(this.value[o]==t.value){e=o;break}return e},t.ctorParameters=function(){return[{type:ChangeDetectorRef}]},__decorate([Input()],t.prototype,"tabindex",void 0),__decorate([Input()],t.prototype,"multiple",void 0),__decorate([Input()],t.prototype,"style",void 0),__decorate([Input()],t.prototype,"styleClass",void 0),__decorate([Input()],t.prototype,"ariaLabelledBy",void 0),__decorate([Input()],t.prototype,"disabled",void 0),__decorate([Input()],t.prototype,"dataKey",void 0),__decorate([Input()],t.prototype,"optionLabel",void 0),__decorate([Output()],t.prototype,"onOptionClick",void 0),__decorate([Output()],t.prototype,"onChange",void 0),__decorate([ContentChild(TemplateRef)],t.prototype,"itemTemplate",void 0),__decorate([Input()],t.prototype,"options",null),t=__decorate([Component({selector:"p-selectButton",template:'\n        <div [ngClass]="\'ui-selectbutton ui-buttonset ui-widget ui-corner-all ui-buttonset-\' + (options ? options.length : 0)" [ngStyle]="style" [class]="styleClass"  role="group">\n            <div *ngFor="let option of options; let i = index" #btn class="ui-button ui-widget ui-state-default ui-button-text-only {{option.styleClass}}"  role="button" [attr.aria-pressed]="isSelected(option)"\n                [ngClass]="{\'ui-state-active\':isSelected(option), \'ui-state-disabled\': disabled || option.disabled, \'ui-state-focus\': btn == focusedItem, \n                \'ui-button-text-icon-left\': (option.icon != null), \'ui-button-icon-only\': (option.icon && !option.label)}" (click)="onItemClick($event,option,i)" (keydown.enter)="onItemClick($event,option,i)"\n                [attr.title]="option.title" [attr.aria-label]="option.label" (focus)="onFocus($event)" (blur)="onBlur($event)" [attr.tabindex]="tabindex" [attr.aria-labelledby]="ariaLabelledBy">\n                <ng-container *ngIf="!itemTemplate else customcontent">\n                    <span [ngClass]="[\'ui-clickable\', \'ui-button-icon-left\']" [class]="option.icon" *ngIf="option.icon"></span>\n                    <span class="ui-button-text ui-clickable">{{option.label||\'ui-btn\'}}</span>\n                </ng-container>\n                <ng-template #customcontent>\n                    <ng-container *ngTemplateOutlet="itemTemplate; context: {$implicit: option, index: i}"></ng-container>\n                </ng-template>\n            </div>\n        </div>\n    ',providers:[SELECTBUTTON_VALUE_ACCESSOR],changeDetection:ChangeDetectionStrategy.Default})],t)}(),SelectButtonModule=function(){function t(){}return t=__decorate([NgModule({imports:[CommonModule],exports:[SelectButton],declarations:[SelectButton]})],t)}();export{SELECTBUTTON_VALUE_ACCESSOR,SelectButton,SelectButtonModule};