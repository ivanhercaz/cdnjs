import{EventEmitter,ChangeDetectorRef,Input,Output,Component,ChangeDetectionStrategy,NgModule}from"@angular/core";import{CommonModule}from"@angular/common";import{FormsModule}from"@angular/forms";import{DropdownModule}from"primeng/dropdown";import{SharedModule}from"primeng/api";var __decorate=this&&this.__decorate||function(t,e,a,n){var o,i=arguments.length,r=i<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,a):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(t,e,a,n);else for(var s=t.length-1;s>=0;s--)(o=t[s])&&(r=(i<3?o(r):i>3?o(e,a,r):o(e,a))||r);return i>3&&r&&Object.defineProperty(e,a,r),r},__values=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,a=e&&t[e],n=0;if(a)return a.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},Paginator=function(){function t(t){this.cd=t,this.pageLinkSize=5,this.onPageChange=new EventEmitter,this.alwaysShow=!0,this.dropdownScrollHeight="200px",this.currentPageReportTemplate="{currentPage} of {totalPages}",this.totalRecords=0,this.rows=0,this._first=0}return t.prototype.ngOnInit=function(){this.updatePaginatorState()},t.prototype.ngOnChanges=function(t){t.totalRecords&&(this.updatePageLinks(),this.updatePaginatorState(),this.updateFirst(),this.updateRowsPerPageOptions()),t.first&&(this._first=t.first.currentValue,this.updatePageLinks(),this.updatePaginatorState()),t.rows&&(this.updatePageLinks(),this.updatePaginatorState()),t.rowsPerPageOptions&&this.updateRowsPerPageOptions()},Object.defineProperty(t.prototype,"first",{get:function(){return this._first},set:function(t){this._first=t},enumerable:!0,configurable:!0}),t.prototype.updateRowsPerPageOptions=function(){var t,e;if(this.rowsPerPageOptions){this.rowsPerPageItems=[];try{for(var a=__values(this.rowsPerPageOptions),n=a.next();!n.done;n=a.next()){var o=n.value;"object"==typeof o&&o.showAll?this.rowsPerPageItems.unshift({label:o.showAll,value:this.totalRecords}):this.rowsPerPageItems.push({label:String(o),value:o})}}catch(e){t={error:e}}finally{try{n&&!n.done&&(e=a.return)&&e.call(a)}finally{if(t)throw t.error}}}},t.prototype.isFirstPage=function(){return 0===this.getPage()},t.prototype.isLastPage=function(){return this.getPage()===this.getPageCount()-1},t.prototype.getPageCount=function(){return Math.ceil(this.totalRecords/this.rows)||1},t.prototype.calculatePageLinkBoundaries=function(){var t=this.getPageCount(),e=Math.min(this.pageLinkSize,t),a=Math.max(0,Math.ceil(this.getPage()-e/2)),n=Math.min(t-1,a+e-1),o=this.pageLinkSize-(n-a+1);return[a=Math.max(0,a-o),n]},t.prototype.updatePageLinks=function(){this.pageLinks=[];for(var t=this.calculatePageLinkBoundaries(),e=t[0],a=t[1],n=e;n<=a;n++)this.pageLinks.push(n+1)},t.prototype.changePage=function(t){var e=this.getPageCount();if(t>=0&&t<e){this._first=this.rows*t;var a={page:t,first:this.first,rows:this.rows,pageCount:e};this.updatePageLinks(),this.onPageChange.emit(a),this.updatePaginatorState()}},t.prototype.updateFirst=function(){var t=this,e=this.getPage();e>0&&this.totalRecords&&this.first>=this.totalRecords&&Promise.resolve(null).then(function(){return t.changePage(e-1)})},t.prototype.getPage=function(){return Math.floor(this.first/this.rows)},t.prototype.changePageToFirst=function(t){this.isFirstPage()||this.changePage(0),t.preventDefault()},t.prototype.changePageToPrev=function(t){this.changePage(this.getPage()-1),t.preventDefault()},t.prototype.changePageToNext=function(t){this.changePage(this.getPage()+1),t.preventDefault()},t.prototype.changePageToLast=function(t){this.isLastPage()||this.changePage(this.getPageCount()-1),t.preventDefault()},t.prototype.onPageLinkClick=function(t,e){this.changePage(e),t.preventDefault()},t.prototype.onRppChange=function(t){this.changePage(this.getPage())},t.prototype.updatePaginatorState=function(){this.paginatorState={page:this.getPage(),pageCount:this.getPageCount(),rows:this.rows,first:this.first,totalRecords:this.totalRecords}},Object.defineProperty(t.prototype,"currentPageReport",{get:function(){return this.currentPageReportTemplate.replace("{currentPage}",String(this.getPage()+1)).replace("{totalPages}",String(this.getPageCount())).replace("{first}",String(this._first+1)).replace("{last}",String(Math.min(this._first+this.rows,this.totalRecords))).replace("{rows}",String(this.rows)).replace("{totalRecords}",String(this.totalRecords))},enumerable:!0,configurable:!0}),t.ctorParameters=function(){return[{type:ChangeDetectorRef}]},__decorate([Input()],t.prototype,"pageLinkSize",void 0),__decorate([Output()],t.prototype,"onPageChange",void 0),__decorate([Input()],t.prototype,"style",void 0),__decorate([Input()],t.prototype,"styleClass",void 0),__decorate([Input()],t.prototype,"alwaysShow",void 0),__decorate([Input()],t.prototype,"templateLeft",void 0),__decorate([Input()],t.prototype,"templateRight",void 0),__decorate([Input()],t.prototype,"dropdownAppendTo",void 0),__decorate([Input()],t.prototype,"dropdownScrollHeight",void 0),__decorate([Input()],t.prototype,"currentPageReportTemplate",void 0),__decorate([Input()],t.prototype,"showCurrentPageReport",void 0),__decorate([Input()],t.prototype,"totalRecords",void 0),__decorate([Input()],t.prototype,"rows",void 0),__decorate([Input()],t.prototype,"rowsPerPageOptions",void 0),__decorate([Input()],t.prototype,"first",null),t=__decorate([Component({selector:"p-paginator",template:'\n        <div [class]="styleClass" [ngStyle]="style" [ngClass]="\'ui-paginator ui-widget ui-widget-header ui-unselectable-text ui-helper-clearfix\'"\n            *ngIf="alwaysShow ? true : (pageLinks && pageLinks.length > 1)">\n            <div class="ui-paginator-left-content" *ngIf="templateLeft">\n                <ng-container *ngTemplateOutlet="templateLeft; context: {$implicit: paginatorState}"></ng-container>\n            </div>\n            <span class="ui-paginator-current" *ngIf="showCurrentPageReport">{{currentPageReport}}</span>\n            <a [attr.tabindex]="isFirstPage() ? null : \'0\'" class="ui-paginator-first ui-paginator-element ui-state-default ui-corner-all"\n                    (click)="changePageToFirst($event)" (keydown.enter)="changePageToFirst($event)" [ngClass]="{\'ui-state-disabled\':isFirstPage()}" [tabindex]="isFirstPage() ? -1 : null">\n                <span class="ui-paginator-icon pi pi-step-backward"></span>\n            </a>\n            <a tabindex="0" [attr.tabindex]="isFirstPage() ? null : \'0\'" class="ui-paginator-prev ui-paginator-element ui-state-default ui-corner-all"\n                    (click)="changePageToPrev($event)" (keydown.enter)="changePageToPrev($event)" [ngClass]="{\'ui-state-disabled\':isFirstPage()}" [tabindex]="isFirstPage() ? -1 : null">\n                <span class="ui-paginator-icon pi pi-caret-left"></span>\n            </a>\n            <span class="ui-paginator-pages">\n                <a tabindex="0" *ngFor="let pageLink of pageLinks" class="ui-paginator-page ui-paginator-element ui-state-default ui-corner-all"\n                    (click)="onPageLinkClick($event, pageLink - 1)" (keydown.enter)="onPageLinkClick($event, pageLink - 1)" [ngClass]="{\'ui-state-active\': (pageLink-1 == getPage())}">{{pageLink}}</a>\n            </span>\n            <a [attr.tabindex]="isLastPage() ? null : \'0\'" class="ui-paginator-next ui-paginator-element ui-state-default ui-corner-all"\n                    (click)="changePageToNext($event)" (keydown.enter)="changePageToNext($event)" [ngClass]="{\'ui-state-disabled\':isLastPage()}" [tabindex]="isLastPage() ? -1 : null">\n                <span class="ui-paginator-icon pi pi-caret-right"></span>\n            </a>\n            <a [attr.tabindex]="isLastPage() ? null : \'0\'" class="ui-paginator-last ui-paginator-element ui-state-default ui-corner-all"\n                    (click)="changePageToLast($event)" (keydown.enter)="changePageToLast($event)" [ngClass]="{\'ui-state-disabled\':isLastPage()}" [tabindex]="isLastPage() ? -1 : null">\n                <span class="ui-paginator-icon pi pi-step-forward"></span>\n            </a>\n            <p-dropdown [options]="rowsPerPageItems" [(ngModel)]="rows" *ngIf="rowsPerPageOptions" \n                (onChange)="onRppChange($event)" [appendTo]="dropdownAppendTo" [scrollHeight]="dropdownScrollHeight"></p-dropdown>\n            <div class="ui-paginator-right-content" *ngIf="templateRight">\n                <ng-container *ngTemplateOutlet="templateRight; context: {$implicit: paginatorState}"></ng-container>\n            </div>\n        </div>\n    ',changeDetection:ChangeDetectionStrategy.Default})],t)}(),PaginatorModule=function(){function t(){}return t=__decorate([NgModule({imports:[CommonModule,DropdownModule,FormsModule,SharedModule],exports:[Paginator,DropdownModule,FormsModule,SharedModule],declarations:[Paginator]})],t)}();export{Paginator,PaginatorModule};