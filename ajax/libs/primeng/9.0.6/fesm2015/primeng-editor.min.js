import{forwardRef,EventEmitter,ElementRef,Output,ContentChild,Input,Component,ChangeDetectionStrategy,NgModule}from"@angular/core";import{CommonModule}from"@angular/common";import{Header,SharedModule}from"primeng/api";import{DomHandler}from"primeng/dom";import{NG_VALUE_ACCESSOR}from"@angular/forms";import*as Quill from"quill";var __decorate=this&&this.__decorate||function(t,e,o,n){var l,i=arguments.length,r=i<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(t,e,o,n);else for(var a=t.length-1;a>=0;a--)(l=t[a])&&(r=(i<3?l(r):i>3?l(e,o,r):l(e,o))||r);return i>3&&r&&Object.defineProperty(e,o,r),r};const EDITOR_VALUE_ACCESSOR={provide:NG_VALUE_ACCESSOR,useExisting:forwardRef(()=>Editor),multi:!0};let Editor=class{constructor(t){this.el=t,this.onTextChange=new EventEmitter,this.onSelectionChange=new EventEmitter,this.onInit=new EventEmitter,this.onModelChange=(()=>{}),this.onModelTouched=(()=>{})}ngAfterViewInit(){let t=DomHandler.findSingle(this.el.nativeElement,"div.ui-editor-content"),e={toolbar:DomHandler.findSingle(this.el.nativeElement,"div.ui-editor-toolbar")},o=this.modules?Object.assign(Object.assign({},e),this.modules):e;this.quill=new Quill(t,{modules:o,placeholder:this.placeholder,readOnly:this.readonly,theme:"snow",formats:this.formats,bounds:this.bounds,debug:this.debug,scrollingContainer:this.scrollingContainer}),this.value&&this.quill.pasteHTML(this.value),this.quill.on("text-change",(e,o,n)=>{if("user"===n){let o=t.children[0].innerHTML,l=this.quill.getText().trim();"<p><br></p>"===o&&(o=null),this.onTextChange.emit({htmlValue:o,textValue:l,delta:e,source:n}),this.onModelChange(o),this.onModelTouched()}}),this.quill.on("selection-change",(t,e,o)=>{this.onSelectionChange.emit({range:t,oldRange:e,source:o})}),this.onInit.emit({editor:this.quill})}writeValue(t){this.value=t,this.quill&&(t?this.quill.pasteHTML(t):this.quill.setText(""))}registerOnChange(t){this.onModelChange=t}registerOnTouched(t){this.onModelTouched=t}getQuill(){return this.quill}get readonly(){return this._readonly}set readonly(t){this._readonly=t,this.quill&&(this._readonly?this.quill.disable():this.quill.enable())}};Editor.ctorParameters=(()=>[{type:ElementRef}]),__decorate([Output()],Editor.prototype,"onTextChange",void 0),__decorate([Output()],Editor.prototype,"onSelectionChange",void 0),__decorate([ContentChild(Header)],Editor.prototype,"toolbar",void 0),__decorate([Input()],Editor.prototype,"style",void 0),__decorate([Input()],Editor.prototype,"styleClass",void 0),__decorate([Input()],Editor.prototype,"placeholder",void 0),__decorate([Input()],Editor.prototype,"formats",void 0),__decorate([Input()],Editor.prototype,"modules",void 0),__decorate([Input()],Editor.prototype,"bounds",void 0),__decorate([Input()],Editor.prototype,"scrollingContainer",void 0),__decorate([Input()],Editor.prototype,"debug",void 0),__decorate([Output()],Editor.prototype,"onInit",void 0),__decorate([Input()],Editor.prototype,"readonly",null);let EditorModule=class{};EditorModule=__decorate([NgModule({imports:[CommonModule],exports:[Editor=__decorate([Component({selector:"p-editor",template:'\n        <div [ngClass]="\'ui-widget ui-editor-container ui-corner-all\'" [class]="styleClass">\n            <div class="ui-editor-toolbar ui-widget-header ui-corner-top" *ngIf="toolbar">\n                <ng-content select="p-header"></ng-content>\n            </div>\n            <div class="ui-editor-toolbar ui-widget-header ui-corner-top" *ngIf="!toolbar">\n                <span class="ql-formats">\n                    <select class="ql-header">\n                      <option value="1">Heading</option>\n                      <option value="2">Subheading</option>\n                      <option selected>Normal</option>\n                    </select>\n                    <select class="ql-font">\n                      <option selected>Sans Serif</option>\n                      <option value="serif">Serif</option>\n                      <option value="monospace">Monospace</option>\n                    </select>\n                </span>\n                <span class="ql-formats">\n                    <button class="ql-bold" aria-label="Bold"></button>\n                    <button class="ql-italic" aria-label="Italic"></button>\n                    <button class="ql-underline" aria-label="Underline"></button>\n                </span>\n                <span class="ql-formats">\n                    <select class="ql-color"></select>\n                    <select class="ql-background"></select>\n                </span>\n                <span class="ql-formats">\n                    <button class="ql-list" value="ordered" aria-label="Ordered List"></button>\n                    <button class="ql-list" value="bullet" aria-label="Unordered List"></button>\n                    <select class="ql-align">\n                        <option selected></option>\n                        <option value="center"></option>\n                        <option value="right"></option>\n                        <option value="justify"></option>\n                    </select>\n                </span>\n                <span class="ql-formats">\n                    <button class="ql-link" aria-label="Insert Link"></button>\n                    <button class="ql-image" aria-label="Insert Image"></button>\n                    <button class="ql-code-block" aria-label="Insert Code Block"></button>\n                </span>\n                <span class="ql-formats">\n                    <button class="ql-clean" aria-label="Remove Styles"></button>\n                </span>\n            </div>\n            <div class="ui-editor-content" [ngStyle]="style"></div>\n        </div>\n    ',providers:[EDITOR_VALUE_ACCESSOR],changeDetection:ChangeDetectionStrategy.Default})],Editor),SharedModule],declarations:[Editor]})],EditorModule);export{EDITOR_VALUE_ACCESSOR,Editor,EditorModule};