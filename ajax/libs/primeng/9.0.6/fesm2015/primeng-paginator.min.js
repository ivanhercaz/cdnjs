import{EventEmitter,ChangeDetectorRef,Input,Output,Component,ChangeDetectionStrategy,NgModule}from"@angular/core";import{CommonModule}from"@angular/common";import{FormsModule}from"@angular/forms";import{DropdownModule}from"primeng/dropdown";import{SharedModule}from"primeng/api";var __decorate=this&&this.__decorate||function(t,e,a,i){var n,o=arguments.length,r=o<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,a):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(t,e,a,i);else for(var s=t.length-1;s>=0;s--)(n=t[s])&&(r=(o<3?n(r):o>3?n(e,a,r):n(e,a))||r);return o>3&&r&&Object.defineProperty(e,a,r),r};let Paginator=class{constructor(t){this.cd=t,this.pageLinkSize=5,this.onPageChange=new EventEmitter,this.alwaysShow=!0,this.dropdownScrollHeight="200px",this.currentPageReportTemplate="{currentPage} of {totalPages}",this.totalRecords=0,this.rows=0,this._first=0}ngOnInit(){this.updatePaginatorState()}ngOnChanges(t){t.totalRecords&&(this.updatePageLinks(),this.updatePaginatorState(),this.updateFirst(),this.updateRowsPerPageOptions()),t.first&&(this._first=t.first.currentValue,this.updatePageLinks(),this.updatePaginatorState()),t.rows&&(this.updatePageLinks(),this.updatePaginatorState()),t.rowsPerPageOptions&&this.updateRowsPerPageOptions()}get first(){return this._first}set first(t){this._first=t}updateRowsPerPageOptions(){if(this.rowsPerPageOptions){this.rowsPerPageItems=[];for(let t of this.rowsPerPageOptions)"object"==typeof t&&t.showAll?this.rowsPerPageItems.unshift({label:t.showAll,value:this.totalRecords}):this.rowsPerPageItems.push({label:String(t),value:t})}}isFirstPage(){return 0===this.getPage()}isLastPage(){return this.getPage()===this.getPageCount()-1}getPageCount(){return Math.ceil(this.totalRecords/this.rows)||1}calculatePageLinkBoundaries(){let t=this.getPageCount(),e=Math.min(this.pageLinkSize,t),a=Math.max(0,Math.ceil(this.getPage()-e/2)),i=Math.min(t-1,a+e-1);var n=this.pageLinkSize-(i-a+1);return[a=Math.max(0,a-n),i]}updatePageLinks(){this.pageLinks=[];let t=this.calculatePageLinkBoundaries(),e=t[0],a=t[1];for(let t=e;t<=a;t++)this.pageLinks.push(t+1)}changePage(t){var e=this.getPageCount();if(t>=0&&t<e){this._first=this.rows*t;var a={page:t,first:this.first,rows:this.rows,pageCount:e};this.updatePageLinks(),this.onPageChange.emit(a),this.updatePaginatorState()}}updateFirst(){const t=this.getPage();t>0&&this.totalRecords&&this.first>=this.totalRecords&&Promise.resolve(null).then(()=>this.changePage(t-1))}getPage(){return Math.floor(this.first/this.rows)}changePageToFirst(t){this.isFirstPage()||this.changePage(0),t.preventDefault()}changePageToPrev(t){this.changePage(this.getPage()-1),t.preventDefault()}changePageToNext(t){this.changePage(this.getPage()+1),t.preventDefault()}changePageToLast(t){this.isLastPage()||this.changePage(this.getPageCount()-1),t.preventDefault()}onPageLinkClick(t,e){this.changePage(e),t.preventDefault()}onRppChange(t){this.changePage(this.getPage())}updatePaginatorState(){this.paginatorState={page:this.getPage(),pageCount:this.getPageCount(),rows:this.rows,first:this.first,totalRecords:this.totalRecords}}get currentPageReport(){return this.currentPageReportTemplate.replace("{currentPage}",String(this.getPage()+1)).replace("{totalPages}",String(this.getPageCount())).replace("{first}",String(this._first+1)).replace("{last}",String(Math.min(this._first+this.rows,this.totalRecords))).replace("{rows}",String(this.rows)).replace("{totalRecords}",String(this.totalRecords))}};Paginator.ctorParameters=(()=>[{type:ChangeDetectorRef}]),__decorate([Input()],Paginator.prototype,"pageLinkSize",void 0),__decorate([Output()],Paginator.prototype,"onPageChange",void 0),__decorate([Input()],Paginator.prototype,"style",void 0),__decorate([Input()],Paginator.prototype,"styleClass",void 0),__decorate([Input()],Paginator.prototype,"alwaysShow",void 0),__decorate([Input()],Paginator.prototype,"templateLeft",void 0),__decorate([Input()],Paginator.prototype,"templateRight",void 0),__decorate([Input()],Paginator.prototype,"dropdownAppendTo",void 0),__decorate([Input()],Paginator.prototype,"dropdownScrollHeight",void 0),__decorate([Input()],Paginator.prototype,"currentPageReportTemplate",void 0),__decorate([Input()],Paginator.prototype,"showCurrentPageReport",void 0),__decorate([Input()],Paginator.prototype,"totalRecords",void 0),__decorate([Input()],Paginator.prototype,"rows",void 0),__decorate([Input()],Paginator.prototype,"rowsPerPageOptions",void 0),__decorate([Input()],Paginator.prototype,"first",null);let PaginatorModule=class{};PaginatorModule=__decorate([NgModule({imports:[CommonModule,DropdownModule,FormsModule,SharedModule],exports:[Paginator=__decorate([Component({selector:"p-paginator",template:'\n        <div [class]="styleClass" [ngStyle]="style" [ngClass]="\'ui-paginator ui-widget ui-widget-header ui-unselectable-text ui-helper-clearfix\'"\n            *ngIf="alwaysShow ? true : (pageLinks && pageLinks.length > 1)">\n            <div class="ui-paginator-left-content" *ngIf="templateLeft">\n                <ng-container *ngTemplateOutlet="templateLeft; context: {$implicit: paginatorState}"></ng-container>\n            </div>\n            <span class="ui-paginator-current" *ngIf="showCurrentPageReport">{{currentPageReport}}</span>\n            <a [attr.tabindex]="isFirstPage() ? null : \'0\'" class="ui-paginator-first ui-paginator-element ui-state-default ui-corner-all"\n                    (click)="changePageToFirst($event)" (keydown.enter)="changePageToFirst($event)" [ngClass]="{\'ui-state-disabled\':isFirstPage()}" [tabindex]="isFirstPage() ? -1 : null">\n                <span class="ui-paginator-icon pi pi-step-backward"></span>\n            </a>\n            <a tabindex="0" [attr.tabindex]="isFirstPage() ? null : \'0\'" class="ui-paginator-prev ui-paginator-element ui-state-default ui-corner-all"\n                    (click)="changePageToPrev($event)" (keydown.enter)="changePageToPrev($event)" [ngClass]="{\'ui-state-disabled\':isFirstPage()}" [tabindex]="isFirstPage() ? -1 : null">\n                <span class="ui-paginator-icon pi pi-caret-left"></span>\n            </a>\n            <span class="ui-paginator-pages">\n                <a tabindex="0" *ngFor="let pageLink of pageLinks" class="ui-paginator-page ui-paginator-element ui-state-default ui-corner-all"\n                    (click)="onPageLinkClick($event, pageLink - 1)" (keydown.enter)="onPageLinkClick($event, pageLink - 1)" [ngClass]="{\'ui-state-active\': (pageLink-1 == getPage())}">{{pageLink}}</a>\n            </span>\n            <a [attr.tabindex]="isLastPage() ? null : \'0\'" class="ui-paginator-next ui-paginator-element ui-state-default ui-corner-all"\n                    (click)="changePageToNext($event)" (keydown.enter)="changePageToNext($event)" [ngClass]="{\'ui-state-disabled\':isLastPage()}" [tabindex]="isLastPage() ? -1 : null">\n                <span class="ui-paginator-icon pi pi-caret-right"></span>\n            </a>\n            <a [attr.tabindex]="isLastPage() ? null : \'0\'" class="ui-paginator-last ui-paginator-element ui-state-default ui-corner-all"\n                    (click)="changePageToLast($event)" (keydown.enter)="changePageToLast($event)" [ngClass]="{\'ui-state-disabled\':isLastPage()}" [tabindex]="isLastPage() ? -1 : null">\n                <span class="ui-paginator-icon pi pi-step-forward"></span>\n            </a>\n            <p-dropdown [options]="rowsPerPageItems" [(ngModel)]="rows" *ngIf="rowsPerPageOptions" \n                (onChange)="onRppChange($event)" [appendTo]="dropdownAppendTo" [scrollHeight]="dropdownScrollHeight"></p-dropdown>\n            <div class="ui-paginator-right-content" *ngIf="templateRight">\n                <ng-container *ngTemplateOutlet="templateRight; context: {$implicit: paginatorState}"></ng-container>\n            </div>\n        </div>\n    ',changeDetection:ChangeDetectionStrategy.Default})],Paginator),DropdownModule,FormsModule,SharedModule],declarations:[Paginator]})],PaginatorModule);export{Paginator,PaginatorModule};