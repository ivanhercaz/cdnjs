var __decorate=this&&this.__decorate||function(e,t,i,n){var a,r=arguments.length,o=r<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,n);else for(var l=e.length-1;l>=0;l--)(a=e[l])&&(o=(r<3?a(o):r>3?a(t,i,o):a(t,i))||o);return r>3&&o&&Object.defineProperty(t,i,o),o};import{NgModule,Component,Input,ContentChildren,ChangeDetectionStrategy}from"@angular/core";import{CommonModule}from"@angular/common";import{PrimeTemplate,SharedModule}from"primeng/api";import{RouterModule}from"@angular/router";let TabMenu=class{ngAfterContentInit(){this.templates.forEach(e=>{switch(e.getType()){case"item":default:this.itemTemplate=e.template}})}itemClick(e,t){t.disabled?e.preventDefault():(t.command&&t.command({originalEvent:e,item:t}),this.activeItem=t)}};__decorate([Input()],TabMenu.prototype,"model",void 0),__decorate([Input()],TabMenu.prototype,"activeItem",void 0),__decorate([Input()],TabMenu.prototype,"popup",void 0),__decorate([Input()],TabMenu.prototype,"style",void 0),__decorate([Input()],TabMenu.prototype,"styleClass",void 0),__decorate([ContentChildren(PrimeTemplate)],TabMenu.prototype,"templates",void 0);export{TabMenu};let TabMenuModule=class{};TabMenuModule=__decorate([NgModule({imports:[CommonModule,RouterModule,SharedModule],exports:[TabMenu=__decorate([Component({selector:"p-tabMenu",template:'\n        <div [ngClass]="\'ui-tabmenu ui-widget ui-widget-content ui-corner-all\'" [ngStyle]="style" [class]="styleClass">\n            <ul class="ui-tabmenu-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all" role="tablist">\n                <li *ngFor="let item of model; let i = index" role="tab" [attr.aria-selected]="activeItem==item" [attr.aria-expanded]="activeItem==item"\n                    [ngClass]="{\'ui-tabmenuitem ui-state-default ui-corner-top\':true,\'ui-state-disabled\':item.disabled,\n                        \'ui-tabmenuitem-hasicon\':item.icon,\'ui-state-active\':activeItem==item,\'ui-helper-hidden\': item.visible === false}"\n                        [routerLinkActive]="\'ui-state-active\'" [routerLinkActiveOptions]="item.routerLinkActiveOptions||{exact:false}">\n                    <a *ngIf="!item.routerLink" [attr.href]="item.url" class="ui-menuitem-link ui-corner-all" role="presentation" (click)="itemClick($event,item)" [attr.tabindex]="item.tabindex ? item.tabindex : \'0\'"\n                        [attr.target]="item.target" [attr.title]="item.title" [attr.id]="item.id">\n                        <ng-container *ngIf="!itemTemplate">\n                            <span class="ui-menuitem-icon " [ngClass]="item.icon" *ngIf="item.icon"></span>\n                            <span class="ui-menuitem-text">{{item.label}}</span>\n                        </ng-container>\n                        <ng-container *ngTemplateOutlet="itemTemplate; context: {$implicit: item, index: i}"></ng-container>\n                    </a>\n                    <a *ngIf="item.routerLink" [routerLink]="item.routerLink" [queryParams]="item.queryParams" role="presentation" class="ui-menuitem-link ui-corner-all" (click)="itemClick($event,item)" [attr.tabindex]="item.tabindex ? item.tabindex : \'0\'"\n                        [attr.target]="item.target" [attr.title]="item.title" [attr.id]="item.id"\n                        [fragment]="item.fragment" [queryParamsHandling]="item.queryParamsHandling" [preserveFragment]="item.preserveFragment" [skipLocationChange]="item.skipLocationChange" [replaceUrl]="item.replaceUrl" [state]="item.state">\n                        <ng-container *ngIf="!itemTemplate">\n                            <span class="ui-menuitem-icon " [ngClass]="item.icon" *ngIf="item.icon"></span>\n                            <span class="ui-menuitem-text">{{item.label}}</span>\n                        </ng-container>\n                        <ng-container *ngTemplateOutlet="itemTemplate; context: {$implicit: item, index: i}"></ng-container>\n                    </a>\n                </li>\n            </ul>\n        </div>\n    ',changeDetection:ChangeDetectionStrategy.Default})],TabMenu),RouterModule,SharedModule],declarations:[TabMenu]})],TabMenuModule);export{TabMenuModule};