var __decorate=this&&this.__decorate||function(e,t,n,i){var l,o=arguments.length,a=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,i);else for(var s=e.length-1;s>=0;s--)(l=e[s])&&(a=(o<3?l(a):o>3?l(t,n,a):l(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a};import{NgModule,Component,Input,Output,EventEmitter,ElementRef,ChangeDetectionStrategy}from"@angular/core";import{trigger,state,style,transition,animate}from"@angular/animations";import{CommonModule}from"@angular/common";import{SharedModule}from"primeng/api";let idx=0,Fieldset=class{constructor(e){this.el=e,this.collapsed=!1,this.collapsedChange=new EventEmitter,this.onBeforeToggle=new EventEmitter,this.onAfterToggle=new EventEmitter,this.transitionOptions="400ms cubic-bezier(0.86, 0, 0.07, 1)",this.id=`ui-fieldset-${idx++}`}toggle(e){if(this.animating)return!1;this.animating=!0,this.onBeforeToggle.emit({originalEvent:e,collapsed:this.collapsed}),this.collapsed?this.expand(e):this.collapse(e),this.onAfterToggle.emit({originalEvent:e,collapsed:this.collapsed}),e.preventDefault()}expand(e){this.collapsed=!1,this.collapsedChange.emit(this.collapsed)}collapse(e){this.collapsed=!0,this.collapsedChange.emit(this.collapsed)}getBlockableElement(){return this.el.nativeElement.children[0]}onToggleDone(e){this.animating=!1}};Fieldset.ctorParameters=(()=>[{type:ElementRef}]),__decorate([Input()],Fieldset.prototype,"legend",void 0),__decorate([Input()],Fieldset.prototype,"toggleable",void 0),__decorate([Input()],Fieldset.prototype,"collapsed",void 0),__decorate([Output()],Fieldset.prototype,"collapsedChange",void 0),__decorate([Output()],Fieldset.prototype,"onBeforeToggle",void 0),__decorate([Output()],Fieldset.prototype,"onAfterToggle",void 0),__decorate([Input()],Fieldset.prototype,"style",void 0),__decorate([Input()],Fieldset.prototype,"styleClass",void 0),__decorate([Input()],Fieldset.prototype,"transitionOptions",void 0);export{Fieldset};let FieldsetModule=class{};FieldsetModule=__decorate([NgModule({imports:[CommonModule],exports:[Fieldset=__decorate([Component({selector:"p-fieldset",template:'\n        <fieldset [attr.id]="id" [ngClass]="{\'ui-fieldset ui-widget ui-widget-content ui-corner-all\': true, \'ui-fieldset-toggleable\': toggleable}" [ngStyle]="style" [class]="styleClass">\n            <legend class="ui-fieldset-legend ui-corner-all ui-state-default ui-unselectable-text">\n                <ng-container *ngIf="toggleable; else legendContent">\n                    <a tabindex="0" (click)="toggle($event)" (keydown.enter)="toggle($event)" [attr.aria-controls]="id + \'-content\'" [attr.aria-expanded]="!collapsed">\n                        <ng-container *ngTemplateOutlet="legendContent"></ng-container>\n                    </a>\n                </ng-container>\n                <ng-template #legendContent>\n                    <span class="ui-fieldset-toggler pi" *ngIf="toggleable" [ngClass]="{\'pi-minus\': !collapsed,\'pi-plus\':collapsed}"></span>\n                    <span class="ui-fieldset-legend-text">{{legend}}</span>\n                    <ng-content select="p-header"></ng-content>\n                </ng-template>\n            </legend>\n            <div [attr.id]="id + \'-content\'" class="ui-fieldset-content-wrapper" [@fieldsetContent]="collapsed ? {value: \'hidden\', params: {transitionParams: transitionOptions, height: \'0\'}} : {value: \'visible\', params: {transitionParams: animating ? transitionOptions : \'0ms\', height: \'*\'}}" \n                        [attr.aria-labelledby]="id" [ngClass]="{\'ui-fieldset-content-wrapper-overflown\': collapsed||animating}" [attr.aria-hidden]="collapsed"\n                         (@fieldsetContent.done)="onToggleDone($event)" role="region">\n                <div class="ui-fieldset-content">\n                    <ng-content></ng-content>\n                </div>\n            </div>\n        </fieldset>\n    ',animations:[trigger("fieldsetContent",[state("hidden",style({height:"0"})),state("void",style({height:"{{height}}"}),{params:{height:"0"}}),state("visible",style({height:"*"})),transition("visible => hidden",animate("{{transitionParams}}")),transition("hidden => visible",animate("{{transitionParams}}")),transition("void => visible",animate("{{transitionParams}}"))])],changeDetection:ChangeDetectionStrategy.Default})],Fieldset),SharedModule],declarations:[Fieldset]})],FieldsetModule);export{FieldsetModule};