var __decorate=this&&this.__decorate||function(t,e,i,o){var n,l=arguments.length,s=l<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,i):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,o);else for(var a=t.length-1;a>=0;a--)(n=t[a])&&(s=(l<3?n(s):l>3?n(e,i,s):n(e,i))||s);return l>3&&s&&Object.defineProperty(e,i,s),s};import{NgModule,Component,ViewChild,ElementRef,AfterViewChecked,AfterContentInit,OnDestroy,Input,Output,EventEmitter,ContentChildren,QueryList,TemplateRef,Renderer2,forwardRef,ChangeDetectorRef,IterableDiffers,ChangeDetectionStrategy}from"@angular/core";import{CommonModule}from"@angular/common";import{trigger,state,style,transition,animate}from"@angular/animations";import{InputTextModule}from"primeng/inputtext";import{ButtonModule}from"primeng/button";import{SharedModule,PrimeTemplate}from"primeng/api";import{DomHandler}from"primeng/dom";import{ObjectUtils,UniqueComponentId}from"primeng/utils";import{NG_VALUE_ACCESSOR}from"@angular/forms";export const AUTOCOMPLETE_VALUE_ACCESSOR={provide:NG_VALUE_ACCESSOR,useExisting:forwardRef(()=>AutoComplete),multi:!0};let AutoComplete=class{constructor(t,e,i,o){this.el=t,this.renderer=e,this.cd=i,this.differs=o,this.minLength=1,this.delay=300,this.type="text",this.autoZIndex=!0,this.baseZIndex=0,this.dropdownIcon="pi pi-caret-down",this.unique=!0,this.completeOnFocus=!1,this.completeMethod=new EventEmitter,this.onSelect=new EventEmitter,this.onUnselect=new EventEmitter,this.onFocus=new EventEmitter,this.onBlur=new EventEmitter,this.onDropdownClick=new EventEmitter,this.onClear=new EventEmitter,this.onKeyUp=new EventEmitter,this.onShow=new EventEmitter,this.onHide=new EventEmitter,this.scrollHeight="200px",this.dropdownMode="blank",this.showTransitionOptions="225ms ease-out",this.hideTransitionOptions="195ms ease-in",this.autocomplete="off",this.onModelChange=(()=>{}),this.onModelTouched=(()=>{}),this.overlayVisible=!1,this.focus=!1,this.inputFieldValue=null,this.differ=o.find([]).create(null),this.listId=UniqueComponentId()+"_list"}get suggestions(){return this._suggestions}set suggestions(t){this._suggestions=t,this.handleSuggestionsChange()}ngAfterViewChecked(){this.suggestionsUpdated&&this.overlay&&this.overlay.offsetParent&&(setTimeout(()=>{this.overlay&&this.alignOverlay()},1),this.suggestionsUpdated=!1),this.highlightOptionChanged&&(setTimeout(()=>{if(this.overlay){let t=DomHandler.findSingle(this.overlay,"li.ui-state-highlight");t&&DomHandler.scrollInView(this.overlay,t)}},1),this.highlightOptionChanged=!1)}handleSuggestionsChange(){null!=this._suggestions&&this.loading&&(this.highlightOption=null,this._suggestions.length?(this.noResults=!1,this.show(),this.suggestionsUpdated=!0,this.autoHighlight&&(this.highlightOption=this._suggestions[0])):(this.noResults=!0,this.emptyMessage?(this.show(),this.suggestionsUpdated=!0):this.hide()),this.loading=!1)}ngAfterContentInit(){this.templates.forEach(t=>{switch(t.getType()){case"item":this.itemTemplate=t.template;break;case"selectedItem":this.selectedItemTemplate=t.template;break;default:this.itemTemplate=t.template}})}writeValue(t){this.value=t,this.filled=this.value&&""!=this.value,this.updateInputField()}registerOnChange(t){this.onModelChange=t}registerOnTouched(t){this.onModelTouched=t}setDisabledState(t){this.disabled=t}onInput(t){if(!this.inputKeyDown&&DomHandler.isIE())return;this.timeout&&clearTimeout(this.timeout);let e=t.target.value;this.multiple||this.forceSelection||this.onModelChange(e),0!==e.length||this.multiple||(this.hide(),this.onClear.emit(t),this.onModelChange(e)),e.length>=this.minLength?this.timeout=setTimeout(()=>{this.search(t,e)},this.delay):(this.suggestions=null,this.hide()),this.updateFilledState(),this.inputKeyDown=!1}onInputClick(t){this.documentClickListener&&(this.inputClick=!0)}search(t,e){null!=e&&(this.loading=!0,this.completeMethod.emit({originalEvent:t,query:e}))}selectItem(t,e=!0){this.forceSelectionUpdateModelTimeout&&(clearTimeout(this.forceSelectionUpdateModelTimeout),this.forceSelectionUpdateModelTimeout=null),this.multiple?(this.multiInputEL.nativeElement.value="",this.value=this.value||[],this.isSelected(t)&&this.unique||(this.value=[...this.value,t],this.onModelChange(this.value))):(this.inputEL.nativeElement.value=this.field?ObjectUtils.resolveFieldData(t,this.field)||"":t,this.value=t,this.onModelChange(this.value)),this.onSelect.emit(t),this.updateFilledState(),e&&(this.itemClicked=!0,this.focusInput())}show(){if(this.multiInputEL||this.inputEL){let t=this.multiple?document.activeElement==this.multiInputEL.nativeElement:document.activeElement==this.inputEL.nativeElement;!this.overlayVisible&&t&&(this.overlayVisible=!0)}}onOverlayAnimationStart(t){switch(t.toState){case"visible":this.overlay=t.element,this.appendOverlay(),this.autoZIndex&&(this.overlay.style.zIndex=String(this.baseZIndex+ ++DomHandler.zindex)),this.alignOverlay(),this.bindDocumentClickListener(),this.bindDocumentResizeListener(),this.onShow.emit(t);break;case"void":this.onOverlayHide()}}onOverlayAnimationDone(t){"void"===t.toState&&(this._suggestions=null)}appendOverlay(){this.appendTo&&("body"===this.appendTo?document.body.appendChild(this.overlay):DomHandler.appendChild(this.overlay,this.appendTo),this.overlay.style.minWidth||(this.overlay.style.minWidth=DomHandler.getWidth(this.el.nativeElement.children[0])+"px"))}resolveFieldData(t){return this.field?ObjectUtils.resolveFieldData(t,this.field):t}restoreOverlayAppend(){this.overlay&&this.appendTo&&this.el.nativeElement.appendChild(this.overlay)}alignOverlay(){this.appendTo?DomHandler.absolutePosition(this.overlay,this.multiple?this.multiContainerEL.nativeElement:this.inputEL.nativeElement):DomHandler.relativePosition(this.overlay,this.multiple?this.multiContainerEL.nativeElement:this.inputEL.nativeElement)}hide(){this.overlayVisible=!1}handleDropdownClick(t){if(this.overlayVisible)this.hide();else{this.focusInput();let e=this.multiple?this.multiInputEL.nativeElement.value:this.inputEL.nativeElement.value;"blank"===this.dropdownMode?this.search(t,""):"current"===this.dropdownMode&&this.search(t,e),this.onDropdownClick.emit({originalEvent:t,query:e})}}focusInput(){this.multiple?this.multiInputEL.nativeElement.focus():this.inputEL.nativeElement.focus()}removeItem(t){let e=DomHandler.index(t),i=this.value[e];this.value=this.value.filter((t,i)=>i!=e),this.onModelChange(this.value),this.updateFilledState(),this.onUnselect.emit(i)}onKeydown(t){if(this.overlayVisible){let i=this.findOptionIndex(this.highlightOption);switch(t.which){case 40:if(-1!=i){var e=i+1;e!=this.suggestions.length&&(this.highlightOption=this.suggestions[e],this.highlightOptionChanged=!0)}else this.highlightOption=this.suggestions[0];t.preventDefault();break;case 38:if(i>0){let t=i-1;this.highlightOption=this.suggestions[t],this.highlightOptionChanged=!0}t.preventDefault();break;case 13:this.highlightOption&&(this.selectItem(this.highlightOption),this.hide()),t.preventDefault();break;case 27:this.hide(),t.preventDefault();break;case 9:this.highlightOption&&this.selectItem(this.highlightOption),this.hide()}}else 40===t.which&&this.suggestions&&this.search(t,t.target.value);if(this.multiple)switch(t.which){case 8:if(this.value&&this.value.length&&!this.multiInputEL.nativeElement.value){this.value=[...this.value];const t=this.value.pop();this.onModelChange(this.value),this.updateFilledState(),this.onUnselect.emit(t)}}this.inputKeyDown=!0}onKeyup(t){this.onKeyUp.emit(t)}onInputFocus(t){if(!this.itemClicked&&this.completeOnFocus){let e=this.multiple?this.multiInputEL.nativeElement.value:this.inputEL.nativeElement.value;this.search(t,e)}this.focus=!0,this.onFocus.emit(t),this.itemClicked=!1}onInputBlur(t){this.focus=!1,this.onModelTouched(),this.onBlur.emit(t)}onInputChange(t){if(this.forceSelection){let e=!1,i=t.target.value.trim();if(this.suggestions)for(let t of this.suggestions){let o=this.field?ObjectUtils.resolveFieldData(t,this.field):t;if(o&&i===o.trim()){e=!0,this.forceSelectionUpdateModelTimeout=setTimeout(()=>{this.selectItem(t,!1)},250);break}}e||(this.multiple?this.multiInputEL.nativeElement.value="":(this.value=null,this.inputEL.nativeElement.value=""),this.onClear.emit(t),this.onModelChange(this.value))}}onInputPaste(t){this.onKeydown(t)}isSelected(t){let e=!1;if(this.value&&this.value.length)for(let i=0;i<this.value.length;i++)if(ObjectUtils.equals(this.value[i],t,this.dataKey)){e=!0;break}return e}findOptionIndex(t){let e=-1;if(this.suggestions)for(let i=0;i<this.suggestions.length;i++)if(ObjectUtils.equals(t,this.suggestions[i])){e=i;break}return e}updateFilledState(){this.multiple?this.filled=this.value&&this.value.length||this.multiInputEL&&this.multiInputEL.nativeElement&&""!=this.multiInputEL.nativeElement.value:this.filled=this.inputFieldValue&&""!=this.inputFieldValue||this.inputEL&&this.inputEL.nativeElement&&""!=this.inputEL.nativeElement.value}updateInputField(){let t=this.value?this.field?ObjectUtils.resolveFieldData(this.value,this.field)||"":this.value:"";this.inputFieldValue=t,this.inputEL&&this.inputEL.nativeElement&&(this.inputEL.nativeElement.value=t),this.updateFilledState()}bindDocumentClickListener(){this.documentClickListener||(this.documentClickListener=this.renderer.listen("document","click",t=>{3!==t.which&&(this.inputClick||this.isDropdownClick(t)||this.hide(),this.inputClick=!1,this.cd.markForCheck())}))}isDropdownClick(t){if(this.dropdown){let e=t.target;return e===this.dropdownButton.nativeElement||e.parentNode===this.dropdownButton.nativeElement}return!1}unbindDocumentClickListener(){this.documentClickListener&&(this.documentClickListener(),this.documentClickListener=null)}bindDocumentResizeListener(){this.documentResizeListener=this.onWindowResize.bind(this),window.addEventListener("resize",this.documentResizeListener)}unbindDocumentResizeListener(){this.documentResizeListener&&(window.removeEventListener("resize",this.documentResizeListener),this.documentResizeListener=null)}onWindowResize(){this.hide()}onOverlayHide(){this.unbindDocumentClickListener(),this.unbindDocumentResizeListener(),this.overlay=null,this.onHide.emit()}ngOnDestroy(){this.forceSelectionUpdateModelTimeout&&(clearTimeout(this.forceSelectionUpdateModelTimeout),this.forceSelectionUpdateModelTimeout=null),this.restoreOverlayAppend(),this.onOverlayHide()}};AutoComplete.ctorParameters=(()=>[{type:ElementRef},{type:Renderer2},{type:ChangeDetectorRef},{type:IterableDiffers}]),__decorate([Input()],AutoComplete.prototype,"minLength",void 0),__decorate([Input()],AutoComplete.prototype,"delay",void 0),__decorate([Input()],AutoComplete.prototype,"style",void 0),__decorate([Input()],AutoComplete.prototype,"panelStyle",void 0),__decorate([Input()],AutoComplete.prototype,"styleClass",void 0),__decorate([Input()],AutoComplete.prototype,"panelStyleClass",void 0),__decorate([Input()],AutoComplete.prototype,"inputStyle",void 0),__decorate([Input()],AutoComplete.prototype,"inputId",void 0),__decorate([Input()],AutoComplete.prototype,"inputStyleClass",void 0),__decorate([Input()],AutoComplete.prototype,"placeholder",void 0),__decorate([Input()],AutoComplete.prototype,"readonly",void 0),__decorate([Input()],AutoComplete.prototype,"disabled",void 0),__decorate([Input()],AutoComplete.prototype,"maxlength",void 0),__decorate([Input()],AutoComplete.prototype,"name",void 0),__decorate([Input()],AutoComplete.prototype,"required",void 0),__decorate([Input()],AutoComplete.prototype,"size",void 0),__decorate([Input()],AutoComplete.prototype,"appendTo",void 0),__decorate([Input()],AutoComplete.prototype,"autoHighlight",void 0),__decorate([Input()],AutoComplete.prototype,"forceSelection",void 0),__decorate([Input()],AutoComplete.prototype,"type",void 0),__decorate([Input()],AutoComplete.prototype,"autoZIndex",void 0),__decorate([Input()],AutoComplete.prototype,"baseZIndex",void 0),__decorate([Input()],AutoComplete.prototype,"ariaLabel",void 0),__decorate([Input()],AutoComplete.prototype,"ariaLabelledBy",void 0),__decorate([Input()],AutoComplete.prototype,"dropdownIcon",void 0),__decorate([Input()],AutoComplete.prototype,"unique",void 0),__decorate([Input()],AutoComplete.prototype,"completeOnFocus",void 0),__decorate([Output()],AutoComplete.prototype,"completeMethod",void 0),__decorate([Output()],AutoComplete.prototype,"onSelect",void 0),__decorate([Output()],AutoComplete.prototype,"onUnselect",void 0),__decorate([Output()],AutoComplete.prototype,"onFocus",void 0),__decorate([Output()],AutoComplete.prototype,"onBlur",void 0),__decorate([Output()],AutoComplete.prototype,"onDropdownClick",void 0),__decorate([Output()],AutoComplete.prototype,"onClear",void 0),__decorate([Output()],AutoComplete.prototype,"onKeyUp",void 0),__decorate([Output()],AutoComplete.prototype,"onShow",void 0),__decorate([Output()],AutoComplete.prototype,"onHide",void 0),__decorate([Input()],AutoComplete.prototype,"field",void 0),__decorate([Input()],AutoComplete.prototype,"scrollHeight",void 0),__decorate([Input()],AutoComplete.prototype,"dropdown",void 0),__decorate([Input()],AutoComplete.prototype,"dropdownMode",void 0),__decorate([Input()],AutoComplete.prototype,"multiple",void 0),__decorate([Input()],AutoComplete.prototype,"tabindex",void 0),__decorate([Input()],AutoComplete.prototype,"dataKey",void 0),__decorate([Input()],AutoComplete.prototype,"emptyMessage",void 0),__decorate([Input()],AutoComplete.prototype,"showTransitionOptions",void 0),__decorate([Input()],AutoComplete.prototype,"hideTransitionOptions",void 0),__decorate([Input()],AutoComplete.prototype,"autofocus",void 0),__decorate([Input()],AutoComplete.prototype,"autocomplete",void 0),__decorate([ViewChild("in")],AutoComplete.prototype,"inputEL",void 0),__decorate([ViewChild("multiIn")],AutoComplete.prototype,"multiInputEL",void 0),__decorate([ViewChild("multiContainer")],AutoComplete.prototype,"multiContainerEL",void 0),__decorate([ViewChild("ddBtn")],AutoComplete.prototype,"dropdownButton",void 0),__decorate([ContentChildren(PrimeTemplate)],AutoComplete.prototype,"templates",void 0),__decorate([Input()],AutoComplete.prototype,"suggestions",null),AutoComplete=__decorate([Component({selector:"p-autoComplete",template:'\n        <span [ngClass]="{\'ui-autocomplete ui-widget\':true,\'ui-autocomplete-dd\':dropdown,\'ui-autocomplete-multiple\':multiple}" [ngStyle]="style" [class]="styleClass">\n            <input *ngIf="!multiple" #in [attr.type]="type" [attr.id]="inputId" [ngStyle]="inputStyle" [class]="inputStyleClass" [autocomplete]="autocomplete" [attr.required]="required" [attr.name]="name"\n            [ngClass]="\'ui-inputtext ui-widget ui-state-default ui-corner-all ui-autocomplete-input\'" [value]="inputFieldValue" aria-autocomplete="list" [attr.aria-controls]="listId" role="searchbox" [attr.aria-expanded]="overlayVisible" aria-haspopup="true" [attr.aria-activedescendant]="\'p-highlighted-option\'"\n            (click)="onInputClick($event)" (input)="onInput($event)" (keydown)="onKeydown($event)" (keyup)="onKeyup($event)" [attr.autofocus]="autofocus" (focus)="onInputFocus($event)" (blur)="onInputBlur($event)" (change)="onInputChange($event)" (paste)="onInputPaste($event)"\n            [attr.placeholder]="placeholder" [attr.size]="size" [attr.maxlength]="maxlength" [attr.tabindex]="tabindex" [readonly]="readonly" [disabled]="disabled" [attr.aria-label]="ariaLabel" [attr.aria-labelledby]="ariaLabelledBy" [attr.aria-required]="required"\n            ><ul *ngIf="multiple" #multiContainer class="ui-autocomplete-multiple-container ui-widget ui-inputtext ui-state-default ui-corner-all" [ngClass]="{\'ui-state-disabled\':disabled,\'ui-state-focus\':focus}" (click)="multiIn.focus()">\n                <li #token *ngFor="let val of value" class="ui-autocomplete-token ui-state-highlight ui-corner-all">\n                    <span class="ui-autocomplete-token-icon pi pi-fw pi-times" (click)="removeItem(token)" *ngIf="!disabled"></span>\n                    <span *ngIf="!selectedItemTemplate" class="ui-autocomplete-token-label">{{resolveFieldData(val)}}</span>\n                    <ng-container *ngTemplateOutlet="selectedItemTemplate; context: {$implicit: val}"></ng-container>\n                </li>\n                <li class="ui-autocomplete-input-token">\n                    <input #multiIn [attr.type]="type" [attr.id]="inputId" [disabled]="disabled" [attr.placeholder]="(value&&value.length ? null : placeholder)" [attr.tabindex]="tabindex" [attr.maxlength]="maxlength" (input)="onInput($event)"  (click)="onInputClick($event)"\n                            (keydown)="onKeydown($event)" [readonly]="readonly" (keyup)="onKeyup($event)" [attr.autofocus]="autofocus" (focus)="onInputFocus($event)" (blur)="onInputBlur($event)" (change)="onInputChange($event)" (paste)="onInputPaste($event)" [autocomplete]="autocomplete"\n                            [ngStyle]="inputStyle" [class]="inputStyleClass" [attr.aria-label]="ariaLabel" [attr.aria-labelledby]="ariaLabelledBy" [attr.aria-required]="required"\n                            aria-autocomplete="list" [attr.aria-controls]="listId" role="searchbox" [attr.aria-expanded]="overlayVisible" aria-haspopup="true" [attr.aria-activedescendant]="\'p-highlighted-option\'">\n                </li>\n            </ul>\n            <i *ngIf="loading" class="ui-autocomplete-loader pi pi-spinner pi-spin"></i><button #ddBtn type="button" pButton [icon]="dropdownIcon" class="ui-autocomplete-dropdown" [disabled]="disabled"\n                (click)="handleDropdownClick($event)" *ngIf="dropdown" [attr.tabindex]="tabindex"></button>\n            <div #panel *ngIf="overlayVisible" [ngClass]="[\'ui-autocomplete-panel ui-widget ui-widget-content ui-corner-all ui-shadow\']" [style.max-height]="scrollHeight" [ngStyle]="panelStyle" [class]="panelStyleClass"\n                [@overlayAnimation]="{value: \'visible\', params: {showTransitionParams: showTransitionOptions, hideTransitionParams: hideTransitionOptions}}" (@overlayAnimation.start)="onOverlayAnimationStart($event)" (@overlayAnimation.done)="onOverlayAnimationDone($event)" >\n                <ul role="listbox" [attr.id]="listId" class="ui-autocomplete-items ui-autocomplete-list ui-widget-content ui-widget ui-corner-all ui-helper-reset">\n                    <li role="option"  *ngFor="let option of suggestions; let idx = index" [ngClass]="{\'ui-autocomplete-list-item ui-corner-all\':true,\'ui-state-highlight\':(highlightOption==option)}"\n                        (mouseenter)="highlightOption=option" (mouseleave)="highlightOption=null" [id]="highlightOption == option ? \'p-highlighted-option\':\'\'" (click)="selectItem(option)">\n                        <span *ngIf="!itemTemplate">{{resolveFieldData(option)}}</span>\n                        <ng-container *ngTemplateOutlet="itemTemplate; context: {$implicit: option, index: idx}"></ng-container>\n                    </li>\n                    <li *ngIf="noResults && emptyMessage" class="ui-autocomplete-emptymessage ui-autocomplete-list-item ui-corner-all">{{emptyMessage}}</li>\n                </ul>\n            </div>\n        </span>\n    ',animations:[trigger("overlayAnimation",[state("void",style({transform:"translateY(5%)",opacity:0})),state("visible",style({transform:"translateY(0)",opacity:1})),transition("void => visible",animate("{{showTransitionParams}}")),transition("visible => void",animate("{{hideTransitionParams}}"))])],host:{"[class.ui-inputwrapper-filled]":"filled","[class.ui-inputwrapper-focus]":"focus && !disabled"},providers:[AUTOCOMPLETE_VALUE_ACCESSOR],changeDetection:ChangeDetectionStrategy.Default})],AutoComplete);export{AutoComplete};let AutoCompleteModule=class{};AutoCompleteModule=__decorate([NgModule({imports:[CommonModule,InputTextModule,ButtonModule,SharedModule],exports:[AutoComplete,SharedModule],declarations:[AutoComplete]})],AutoCompleteModule);export{AutoCompleteModule};