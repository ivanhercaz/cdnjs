var __decorate=this&&this.__decorate||function(t,e,o,n){var i,l=arguments.length,a=l<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,o,n);else for(var s=t.length-1;s>=0;s--)(i=t[s])&&(a=(l<3?i(a):l>3?i(e,o,a):i(e,o))||a);return l>3&&a&&Object.defineProperty(e,o,a),a};import{NgModule,Component,Input,Output,EventEmitter,forwardRef,ChangeDetectorRef,ContentChild,TemplateRef,SimpleChanges,OnChanges,ChangeDetectionStrategy}from"@angular/core";import{CommonModule}from"@angular/common";import{ObjectUtils}from"primeng/utils";import{NG_VALUE_ACCESSOR}from"@angular/forms";export const SELECTBUTTON_VALUE_ACCESSOR={provide:NG_VALUE_ACCESSOR,useExisting:forwardRef(()=>SelectButton),multi:!0};let SelectButton=class{constructor(t){this.cd=t,this.tabindex=0,this.onOptionClick=new EventEmitter,this.onChange=new EventEmitter,this.onModelChange=(()=>{}),this.onModelTouched=(()=>{})}get options(){return this._options}set options(t){}ngOnChanges(t){t.options&&(this._options=this.optionLabel?ObjectUtils.generateSelectItems(t.options.currentValue,this.optionLabel):t.options.currentValue)}writeValue(t){this.value=t,this.cd.markForCheck()}registerOnChange(t){this.onModelChange=t}registerOnTouched(t){this.onModelTouched=t}setDisabledState(t){this.disabled=t}onItemClick(t,e,o){if(!this.disabled&&!e.disabled){if(this.multiple){let t=this.findItemIndex(e);this.value=-1!=t?this.value.filter((e,o)=>o!=t):[...this.value||[],e.value]}else this.value=e.value;this.onOptionClick.emit({originalEvent:t,option:e,index:o}),this.onModelChange(this.value),this.onChange.emit({originalEvent:t,value:this.value})}}onFocus(t){this.focusedItem=t.target}onBlur(t){this.focusedItem=null,this.onModelTouched()}isSelected(t){return this.multiple?-1!=this.findItemIndex(t):ObjectUtils.equals(t.value,this.value,this.dataKey)}findItemIndex(t){let e=-1;if(this.value)for(let o=0;o<this.value.length;o++)if(this.value[o]==t.value){e=o;break}return e}};SelectButton.ctorParameters=(()=>[{type:ChangeDetectorRef}]),__decorate([Input()],SelectButton.prototype,"tabindex",void 0),__decorate([Input()],SelectButton.prototype,"multiple",void 0),__decorate([Input()],SelectButton.prototype,"style",void 0),__decorate([Input()],SelectButton.prototype,"styleClass",void 0),__decorate([Input()],SelectButton.prototype,"ariaLabelledBy",void 0),__decorate([Input()],SelectButton.prototype,"disabled",void 0),__decorate([Input()],SelectButton.prototype,"dataKey",void 0),__decorate([Input()],SelectButton.prototype,"optionLabel",void 0),__decorate([Output()],SelectButton.prototype,"onOptionClick",void 0),__decorate([Output()],SelectButton.prototype,"onChange",void 0),__decorate([ContentChild(TemplateRef)],SelectButton.prototype,"itemTemplate",void 0),__decorate([Input()],SelectButton.prototype,"options",null),SelectButton=__decorate([Component({selector:"p-selectButton",template:'\n        <div [ngClass]="\'ui-selectbutton ui-buttonset ui-widget ui-corner-all ui-buttonset-\' + (options ? options.length : 0)" [ngStyle]="style" [class]="styleClass"  role="group">\n            <div *ngFor="let option of options; let i = index" #btn class="ui-button ui-widget ui-state-default ui-button-text-only {{option.styleClass}}"  role="button" [attr.aria-pressed]="isSelected(option)"\n                [ngClass]="{\'ui-state-active\':isSelected(option), \'ui-state-disabled\': disabled || option.disabled, \'ui-state-focus\': btn == focusedItem, \n                \'ui-button-text-icon-left\': (option.icon != null), \'ui-button-icon-only\': (option.icon && !option.label)}" (click)="onItemClick($event,option,i)" (keydown.enter)="onItemClick($event,option,i)"\n                [attr.title]="option.title" [attr.aria-label]="option.label" (focus)="onFocus($event)" (blur)="onBlur($event)" [attr.tabindex]="tabindex" [attr.aria-labelledby]="ariaLabelledBy">\n                <ng-container *ngIf="!itemTemplate else customcontent">\n                    <span [ngClass]="[\'ui-clickable\', \'ui-button-icon-left\']" [class]="option.icon" *ngIf="option.icon"></span>\n                    <span class="ui-button-text ui-clickable">{{option.label||\'ui-btn\'}}</span>\n                </ng-container>\n                <ng-template #customcontent>\n                    <ng-container *ngTemplateOutlet="itemTemplate; context: {$implicit: option, index: i}"></ng-container>\n                </ng-template>\n            </div>\n        </div>\n    ',providers:[SELECTBUTTON_VALUE_ACCESSOR],changeDetection:ChangeDetectionStrategy.Default})],SelectButton);export{SelectButton};let SelectButtonModule=class{};SelectButtonModule=__decorate([NgModule({imports:[CommonModule],exports:[SelectButton],declarations:[SelectButton]})],SelectButtonModule);export{SelectButtonModule};