import{assert}from"chai";import*as React from"react";import findOutermostIntrinsic from"./findOutermostIntrinsic";import ReactTestRenderer from"react-test-renderer";import testRef from"./testRef";function findRootComponent(t,{component:e}){const n=findOutermostIntrinsic(t).getElement();return t.find(e).filterWhere(t=>t.contains(n))}function randomStringValue(){return Math.random().toString(36).slice(2)}function testClassName(t,e){it("applies the className to the root component",()=>{const{mount:n}=e(),s=randomStringValue(),o=n(React.cloneElement(t,{className:s}));assert.strictEqual(findOutermostIntrinsic(o).hasClass(s),!0,"does have a custom `className`")})}function testComponentProp(t,e){describe("prop: component",()=>{it("can render another root component with the `component` prop",()=>{const{classes:n,mount:s,testComponentPropWith:o="em"}=e(),r=s(React.cloneElement(t,{component:o}));assert.strictEqual(findRootComponent(r,{classes:n,component:o}).exists(),!0)})})}function testPropsSpread(t,e){it("spreads props to the root component",()=>{const{classes:n,inheritComponent:s,mount:o}=e(),r=randomStringValue(),a=findRootComponent(o(React.cloneElement(t,{"data-test-props-spread":r})),{classes:n,component:s});assert.strictEqual(a.props()["data-test-props-spread"],r)})}function describeRef(t,e){describe("ref",()=>{it("attaches the ref",()=>{const{inheritComponent:n,mount:s,refInstanceof:o}=e();testRef(t,s,(t,e)=>{if(assert.instanceOf(t,o),n&&t instanceof window.Element){const n=findOutermostIntrinsic(e);assert.strictEqual(t,n.instance())}})})})}function testRootClass(t,e){it("applies the root class to the root component if it has this class",()=>{const{classes:n,mount:s}=e();if(null==n.root)return;const o=randomStringValue(),r=s(React.cloneElement(t,{className:o}));assert.strictEqual(findOutermostIntrinsic(r).hasClass(n.root),!0),assert.strictEqual(findOutermostIntrinsic(r).hasClass(o),!0)})}function testReactTestRenderer(t){it("should render without errors in ReactTestRenderer",()=>{ReactTestRenderer.act(()=>{ReactTestRenderer.create(t,{createNodeMock:t=>document.createElement(t.type)})})})}const fullSuite={componentProp:testComponentProp,mergeClassName:testClassName,propsSpread:testPropsSpread,refForwarding:describeRef,rootClass:testRootClass,reactTestRenderer:testReactTestRenderer};export default function describeConformance(t,e){const{after:n=(()=>{}),only:s=Object.keys(fullSuite),skip:o=[]}=e();describe("Material-UI component API",()=>{after(n),Object.keys(fullSuite).filter(t=>-1!==s.indexOf(t)&&-1===o.indexOf(t)).forEach(n=>{(0,fullSuite[n])(t,e)})})};