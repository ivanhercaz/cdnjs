import _extends from"@babel/runtime/helpers/esm/extends";import _objectWithoutPropertiesLoose from"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";import*as React from"react";import{isFragment}from"react-is";import PropTypes from"prop-types";import clsx from"clsx";import{refType}from"@material-ui/utils";import debounce from"../utils/debounce";import ownerWindow from"../utils/ownerWindow";import{getNormalizedScrollLeft,detectScrollType}from"../utils/scrollLeft";import animate from"../internal/animate";import ScrollbarSize from"./ScrollbarSize";import withStyles from"../styles/withStyles";import TabIndicator from"./TabIndicator";import TabScrollButton from"../TabScrollButton";import useEventCallback from"../utils/useEventCallback";import useTheme from"../styles/useTheme";export const styles=e=>({root:{overflow:"hidden",minHeight:48,WebkitOverflowScrolling:"touch",display:"flex"},vertical:{flexDirection:"column"},flexContainer:{display:"flex"},flexContainerVertical:{flexDirection:"column"},centered:{justifyContent:"center"},scroller:{position:"relative",display:"inline-block",flex:"1 1 auto",whiteSpace:"nowrap"},fixed:{overflowX:"hidden",width:"100%"},scrollable:{overflowX:"scroll",scrollbarWidth:"none","&::-webkit-scrollbar":{display:"none"}},scrollButtons:{},scrollButtonsDesktop:{[e.breakpoints.down("xs")]:{display:"none"}},indicator:{}});const Tabs=React.forwardRef(function(e,t){const{action:o,centered:r=!1,children:l,classes:n,className:s,component:a="div",indicatorColor:c="secondary",onChange:i,orientation:d="horizontal",ScrollButtonComponent:p=TabScrollButton,scrollButtons:u="auto",TabIndicatorProps:f={},TabScrollButtonProps:m,textColor:b="inherit",value:h,variant:T="standard"}=e,y=_objectWithoutPropertiesLoose(e,["action","centered","children","classes","className","component","indicatorColor","onChange","orientation","ScrollButtonComponent","scrollButtons","TabIndicatorProps","TabScrollButtonProps","textColor","value","variant"]),v=useTheme(),g="scrollable"===T,C="rtl"===v.direction,S="vertical"===d,w=S?"scrollTop":"scrollLeft",x=S?"top":"left",E=S?"bottom":"right",R=S?"clientHeight":"clientWidth",N=S?"height":"width";"production"!==process.env.NODE_ENV&&r&&g&&console.error('Material-UI: You can not use the `centered={true}` and `variant="scrollable"` properties at the same time on a `Tabs` component.');const[B,P]=React.useState(!1),[k,W]=React.useState({}),[L,z]=React.useState({start:!1,end:!1}),[M,_]=React.useState({overflow:"hidden",marginBottom:null}),D=new Map,I=React.useRef(null),j=React.useRef(null),O=()=>{const e=I.current;let t,o;if(e){const o=e.getBoundingClientRect();t={clientWidth:e.clientWidth,scrollLeft:e.scrollLeft,scrollTop:e.scrollTop,scrollLeftNormalized:getNormalizedScrollLeft(e,v.direction),scrollWidth:e.scrollWidth,top:o.top,bottom:o.bottom,left:o.left,right:o.right}}if(e&&!1!==h){const e=j.current.children;if(e.length>0){const t=e[D.get(h)];"production"!==process.env.NODE_ENV&&(t||console.error(["Material-UI: The value provided to the Tabs component is invalid.",`None of the Tabs' children match with \`${h}\`.`,D.keys?`You can provide one of the following values: ${Array.from(D.keys()).join(", ")}.`:null].join("\n"))),o=t?t.getBoundingClientRect():null}}return{tabsMeta:t,tabMeta:o}},A=useEventCallback(()=>{const{tabsMeta:e,tabMeta:t}=O();let o=0;if(t&&e)if(S)o=t.top-e.top+e.scrollTop;else{const r=C?e.scrollLeftNormalized+e.clientWidth-e.scrollWidth:e.scrollLeft;o=t.left-e.left+r}const r={[x]:o,[N]:t?t[N]:0};if(isNaN(k[x])||isNaN(k[N]))W(r);else{const e=Math.abs(k[x]-r[x]),t=Math.abs(k[N]-r[N]);(e>=1||t>=1)&&W(r)}}),V=e=>{animate(w,I.current,e)},H=e=>{let t=I.current[w];S?t+=e:(t+=e*(C?-1:1),t*=C&&"reverse"===detectScrollType()?-1:1),V(t)},U=()=>{H(-I.current[R])},F=()=>{H(I.current[R])},X=React.useCallback(e=>{_({overflow:null,marginBottom:-e})},[]),Y=useEventCallback(()=>{const{tabsMeta:e,tabMeta:t}=O();if(t&&e)if(t[x]<e[x]){const o=e[w]+(t[x]-e[x]);V(o)}else if(t[E]>e[E]){const o=e[w]+(t[E]-e[E]);V(o)}}),$=useEventCallback(()=>{if(g&&"off"!==u){const{scrollTop:e,scrollHeight:t,clientHeight:o,scrollWidth:r,clientWidth:l}=I.current;let n,s;if(S)n=e>1,s=e<t-o-1;else{const e=getNormalizedScrollLeft(I.current,v.direction);n=C?e<r-l-1:e>1,s=C?e>1:e<r-l-1}n===L.start&&s===L.end||z({start:n,end:s})}});React.useEffect(()=>{const e=debounce(()=>{A(),$()}),t=ownerWindow(I.current);return t.addEventListener("resize",e),()=>{e.clear(),t.removeEventListener("resize",e)}},[A,$]);const q=React.useCallback(debounce(()=>{$()}));React.useEffect(()=>()=>{q.clear()},[q]),React.useEffect(()=>{P(!0)},[]),React.useEffect(()=>{A(),$()}),React.useEffect(()=>{Y()},[Y,k]),React.useImperativeHandle(o,()=>({updateIndicator:A,updateScrollButtons:$}),[A,$]);const K=React.createElement(TabIndicator,_extends({className:n.indicator,orientation:d,color:c},f,{style:_extends(_extends({},k),f.style)}));let G=0;const J=React.Children.map(l,e=>{if(!React.isValidElement(e))return null;"production"!==process.env.NODE_ENV&&isFragment(e)&&console.error(["Material-UI: The Tabs component doesn't accept a Fragment as a child.","Consider providing an array instead."].join("\n"));const t=void 0===e.props.value?G:e.props.value;D.set(t,G);const o=t===h;return G+=1,React.cloneElement(e,{fullWidth:"fullWidth"===T,indicator:o&&!B&&K,selected:o,onChange:i,textColor:b,value:t})}),Q=(()=>{const e={};e.scrollbarSizeListener=g?React.createElement(ScrollbarSize,{className:n.scrollable,onChange:X}):null;const t=L.start||L.end,o=g&&("auto"===u&&t||"desktop"===u||"on"===u);return e.scrollButtonStart=o?React.createElement(p,_extends({orientation:d,direction:C?"right":"left",onClick:U,disabled:!L.start,className:clsx(n.scrollButtons,"on"!==u&&n.scrollButtonsDesktop)},m)):null,e.scrollButtonEnd=o?React.createElement(p,_extends({orientation:d,direction:C?"left":"right",onClick:F,disabled:!L.end,className:clsx(n.scrollButtons,"on"!==u&&n.scrollButtonsDesktop)},m)):null,e})();return React.createElement(a,_extends({className:clsx(n.root,s,S&&n.vertical),ref:t},y),Q.scrollButtonStart,Q.scrollbarSizeListener,React.createElement("div",{className:clsx(n.scroller,g?n.scrollable:n.fixed),style:M,ref:I,onScroll:q},React.createElement("div",{className:clsx(n.flexContainer,S&&n.flexContainerVertical,r&&!g&&n.centered),onKeyDown:e=>{const{target:t}=e;if("tab"!==t.getAttribute("role"))return;let o=null,r="vertical"!==d?"ArrowLeft":"ArrowUp",l="vertical"!==d?"ArrowRight":"ArrowDown";switch("vertical"!==d&&"rtl"===v.direction&&(r="ArrowRight",l="ArrowLeft"),e.key){case r:o=t.previousElementSibling||j.current.lastChild;break;case l:o=t.nextElementSibling||j.current.firstChild;break;case"Home":o=j.current.firstChild;break;case"End":o=j.current.lastChild}null!==o&&(o.focus(),e.preventDefault())},ref:j,role:"tablist"},J),B&&K),Q.scrollButtonEnd)});"production"!==process.env.NODE_ENV&&(Tabs.propTypes={action:refType,centered:PropTypes.bool,children:PropTypes.node,classes:PropTypes.object.isRequired,className:PropTypes.string,component:PropTypes.elementType,indicatorColor:PropTypes.oneOf(["secondary","primary"]),onChange:PropTypes.func,orientation:PropTypes.oneOf(["horizontal","vertical"]),ScrollButtonComponent:PropTypes.elementType,scrollButtons:PropTypes.oneOf(["auto","desktop","on","off"]),TabIndicatorProps:PropTypes.object,TabScrollButtonProps:PropTypes.object,textColor:PropTypes.oneOf(["secondary","primary","inherit"]),value:PropTypes.any,variant:PropTypes.oneOf(["standard","scrollable","fullWidth"])});export default withStyles(styles,{name:"MuiTabs"})(Tabs);