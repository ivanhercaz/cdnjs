{"version":3,"file":"logline.min.js","sources":["../src/lib/util.js","../src/protocols/interface.js","../src/lib/pool.js","../src/protocols/indexeddb.js","../src/protocols/localstorage.js","../src/protocols/websql.js","../src/logline.js"],"sourcesContent":["const HAS_CONSOLE = window.console;\nconst LEVEL_CONSOLE_MAP = {\n    INFO: 'log',\n    WARN: 'warn',\n    ERROR: 'error',\n    CRITICAL: 'error'\n};\n\n// throw out Errors, with global prefix 'Logline: ' ahead of err.message\nexport function throwError(errMessage) {\n    HAS_CONSOLE && console.error('Logline: ' + errMessage);\n}\n\n// print debug info in develper's console\n// TODO: if WechatFE/vConsole is detected, will not use %c feature, as it is not well supported\nexport function debug(namespace, level, descriptor, data) {\n    if (HAS_CONSOLE && window.Logline && window.Logline.env && window.Logline.env.verbose) {\n        window.console[LEVEL_CONSOLE_MAP[level.toUpperCase()] || LEVEL_CONSOLE_MAP.INFO](`${namespace} ${level.toUpperCase()} ${descriptor}`, data || '');\n    }\n}\n\n// filter any function in a object\nexport function filterFunction(obj) {\n    var newObj = {}, i;\n\n    if (typeof obj !== 'object') {\n        return obj;\n    }\n\n    for (i in obj) {\n        if (obj.hasOwnProperty(i)) {\n            if (typeof obj[i] !== 'function') {\n                newObj[i] = filterFunction(obj[i]);\n            }\n        }\n    }\n    return newObj;\n}\n","import * as util from '../lib/util';\n\n/**\n * Logline Interface\n * @class Interface\n */\nexport default class Interface {\n    /**\n     * Logline constructor\n     * @constructor\n     * @param {String} namespace - namespace to use\n     */\n    constructor(namespace) {\n        this._namespace = namespace;\n    }\n\n    /**\n     * add a log record\n     * @method _reocrd\n     * @private\n     * @parma {String} level - log level\n     * @param {String} descriptor - to speed up search and improve understanding\n     * @param {Mixed} [data] - additional data\n     */\n    _record(level, descriptor, data) {\n        util.throwError('method _record is not implemented.');\n    }\n\n    /**\n     * add a level-info record\n     * @method info\n     * @param {String} descriptor - to speed up search and improve understanding\n     * @param {Mixed} [data] - additional data\n     */\n    info(...args) {\n        this._record('info', ...args);\n    }\n\n    /**\n     * add a level-warn record\n     * @method warn\n     * @param {String} descriptor - to speed up search and improve understanding\n     * @param {Mixed} [data] - additional data\n     */\n    warn(...args) {\n        this._record('warn', ...args);\n    }\n\n    /**\n     * add a level-error record\n     * @method error\n     * @param {String} descriptor - to speed up search and improve understanding\n     * @param {Mixed} [data] - additional data\n     */\n    error(...args) {\n        this._record('error', ...args);\n    }\n\n    /**\n     * add a level-critical record\n     * @method critical\n     * @param {String} descriptor - to speed up search and improve understanding\n     * @param {Mixed} [data] - additional data\n     */\n    critical(...args) {\n        this._record('critical', ...args);\n    }\n\n    /**\n     * initialize protocol\n     * @method init\n     * @static\n     * @param {String} database - database name to use\n     */\n    static init(database) {\n        return true;\n    }\n\n    /**\n     * transform human readable time string, such as '3d', '.3' and '1.2' into Unix timestamp\n     * the default relative time is Date.now(), if no second parameter is provided\n     * @method transTimeFormat\n     * @static\n     * @param {String} time - time string to transform\n     * @param {Number} [relative] - relative time to compare, default Date.now()\n     * @return {Number|NaN} timestamp transformed\n     */\n    static transTimeFormat(time, relative) {\n        // if falsy value or timestamp already, pass it through directly,\n        if (!time || /^\\d{13}$/.test(time)) {\n            return +time;\n        }\n        // incase relative time isn't unix timestamp format,\n        // neither a falsy value which will turned out to be Date.now()\n        if (relative && !/^\\d{13}$/.test(relative)) {\n            throw new TypeError('relative time should be standard unix timestamp');\n        }\n\n        return (relative || Date.now()) - time.replace(/d$/, '') * 24 * 3600 * 1000;\n    }\n\n    /**\n     * get logs in range\n     * if from and end is not defined, will fetch full log\n     * @method get\n     * @static\n     * @param {String} from - time from, unix timestamp\n     * @param {String} to - time end, unix timestamp\n     * @param {Function} readyFn - function to call back with logs as parameter\n     */\n    static get(from, to, readyFn) {\n        util.throwError('method get is not implemented.');\n    }\n\n    /**\n     * clean logs = keep limited logs\n     * @method keep\n     * @static\n     * @param {Number} daysToMaintain - keep logs within days\n     */\n    static keep(daysToMaintain) {\n        util.throwError('method keep is not implemented.');\n    }\n\n    /**\n     * delete log database\n     * @method clean\n     * @static\n     */\n    static clean() {\n        util.throwError('method clean is not implemented.');\n    }\n\n    /**\n     * protocol status map\n     * @prop {Object} STATUS\n     */\n    static get STATUS() {\n        return {\n            INITING: 1,\n            INITED: 2,\n            FAILED: 4\n        };\n    }\n}\n","/**\n * Pool, for storage of async calling\n * @class Pool\n */\nexport default class Pool {\n    /**\n     * Pool constructor\n     * @constructor\n     */\n    constructor() {\n        this._pool = [];\n    }\n\n    /**\n     * add an procedure\n     * @method push\n     * @param {Function} handler - procedure handler\n     * @param {Object} context - procedure context\n     */\n    push(handler, context) {\n        handler.context = context;\n        this._pool.push(handler);\n    }\n\n    /**\n     * consume pool\n     * @method consume\n     */\n    consume() {\n        var handler;\n        while ((handler = this._pool.shift())) {\n            handler.call(handler.context);\n        }\n    }\n}\n","import LoggerInterface from './interface';\nimport Pool from '../lib/pool';\nimport * as util from '../lib/util';\n\n/**\n * IndexedDB protocol\n * @class IndexedDBLogger\n */\nexport default class IndexedDBLogger extends LoggerInterface {\n    /**\n     * IndexedDB protocol constructor\n     * @constructor\n     * @param {String} namespace - namespace to use\n     */\n    constructor(...args) {\n        super(...args);\n    }\n\n    /**\n     * add a log record\n     * @method _reocrd\n     * @private\n     * @parma {String} level - log level\n     * @param {String} descriptor - to speed up search and improve understanding\n     * @param {Mixed} [data] - additional data\n     */\n    _record(level, descriptor, data) {\n        if (IndexedDBLogger.status !== LoggerInterface.STATUS.INITED) {\n            IndexedDBLogger._pool.push(() => this._record(level, descriptor, data));\n            if (IndexedDBLogger.status !== LoggerInterface.STATUS.INITING) {\n                IndexedDBLogger.init();\n            }\n            return;\n        }\n\n        util.debug(this._namespace, level, descriptor, data);\n        let transaction = IndexedDBLogger.db.transaction(['logs'], IDBTransaction.READ_WRITE || 'readwrite');\n        transaction.onerror = event => util.throwError(event.target.error);\n\n        let store = transaction.objectStore('logs');\n        // should not contains any function in data\n        // otherwise 'DOMException: Failed to execute 'add' on 'IDBObjectStore': An object could not be cloned.' will be thrown\n        let request = store.add({\n            time: Date.now(),\n            level: level,\n            namespace: this._namespace,\n            descriptor: descriptor,\n            data: util.filterFunction(data)\n        });\n\n        request.onerror = event => {\n            IndexedDBLogger.status = LoggerInterface.STATUS.FAILED;\n            util.throwError(event.target.error);\n        };\n    }\n\n    /**\n     * initialize protocol\n     * @method init\n     * @static\n     * @param {String} database - database name to use\n     */\n    static init(database) {\n        if (!IndexedDBLogger.support) {\n            util.throwError('your platform does not support indexeddb protocol.');\n        }\n\n        if (IndexedDBLogger.status) {\n            return false;\n        }\n\n        IndexedDBLogger._pool = IndexedDBLogger._pool || new Pool();\n        IndexedDBLogger._database = database || 'logline';\n        IndexedDBLogger.status = super.STATUS.INITING;\n\n        IndexedDBLogger.request = window.indexedDB.open(IndexedDBLogger._database);\n        IndexedDBLogger.request.onerror = event => util.throwError('protocol indexeddb is prevented.');\n        IndexedDBLogger.request.onsuccess = event => {\n            IndexedDBLogger.db = event.target.result;\n            IndexedDBLogger.status = super.STATUS.INITED;\n            IndexedDBLogger._pool.consume();\n            // globally handle db request errors\n            IndexedDBLogger.db.onerror = event => util.throwError(event.target.error);\n        };\n        IndexedDBLogger.request.onupgradeneeded = event => {\n            // init dabasebase\n            let db = event.target.result, store = db.createObjectStore('logs', { autoIncrement: true });\n            store.createIndex('namespace', 'namespace', { unique: false });\n            store.createIndex('level', 'level', { unique: false });\n            store.createIndex('descriptor', 'descriptor', { unique: false });\n            store.createIndex('data', 'data', { unique: false });\n        };\n    }\n\n    /**\n     * get logs in range\n     * if from and end is not defined, will fetch full log\n     * @method get\n     * @static\n     * @param {String} [from] - time from, unix time stamp or falsy\n     * @param {String} [to] - time end, unix time stamp or falsy\n     * @param {Function} readyFn - function to call back with logs as parameter\n     */\n    static get(from, to, readyFn) {\n        if (IndexedDBLogger.status !== super.STATUS.INITED) {\n            return IndexedDBLogger._pool.push(() => IndexedDBLogger.get(from, to, readyFn));\n        }\n\n        from = LoggerInterface.transTimeFormat(from);\n        to = LoggerInterface.transTimeFormat(to);\n\n        let store = IndexedDBLogger._getTransactionStore(IDBTransaction.READ_ONLY);\n\n        // IDBObjectStore.getAll is a non-standard API\n        if (store.getAll) {\n            let result, logs = [];\n            store.getAll().onsuccess = event => {\n                result = event.target.result;\n                for (let i = 0; i < result.length; i++) {\n                    if ((from && result[i].time < from) || (to && result[i].time > to)) {\n                        continue;\n                    }\n                    logs.push(result[i]);\n                }\n                readyFn(logs);\n            };\n        } else {\n            let request = store.openCursor(), logs = [];\n            request.onsuccess = event => {\n                var cursor = event.target.result;\n                if (cursor) {\n                    if ((from && cursor.value.time < from) || (to && cursor.value.time > to)) {\n                        return cursor.continue();\n                    }\n\n                    logs.push({\n                        time: cursor.value.time,\n                        level: cursor.value.level,\n                        namespace: cursor.value.namespace,\n                        descriptor: cursor.value.descriptor,\n                        data: cursor.value.data\n                    });\n                    cursor.continue();\n                }\n                else {\n                    readyFn(logs);\n                }\n            };\n        }\n    }\n\n    /**\n     * clean logs = keep limited logs\n     * @method keep\n     * @static\n     * @param {Number} daysToMaintain - keep logs within days\n     */\n    static keep(daysToMaintain) {\n        if (IndexedDBLogger.status !== super.STATUS.INITED) {\n            return IndexedDBLogger._pool.push(() => IndexedDBLogger.keep(daysToMaintain));\n        }\n\n        let store = IndexedDBLogger._getTransactionStore(IDBTransaction.READ_WRITE);\n        if (!daysToMaintain) {\n            let request = store.clear().onerror = event => util.throwError(event.target.error);\n        }\n        else {\n            let range = (Date.now() - (daysToMaintain || 2) * 24 * 3600 * 1000);\n            let request = store.openCursor();\n            request.onsuccess = event => {\n                let cursor = event.target.result;\n                if (cursor && cursor.value.time < range) {\n                    store.delete(cursor.primaryKey);\n                    cursor.continue();\n                }\n            };\n            request.onerror = event => util.throwError('unable to locate logs earlier than ' + daysToMaintain + 'd.');\n        }\n    }\n\n    /**\n     * delete log database\n     * @method clean\n     * @static\n     */\n    static clean() {\n        if (IndexedDBLogger.status !== super.STATUS.INITED) {\n            return IndexedDBLogger._pool.push(() => IndexedDBLogger.clean());\n        }\n\n        // database can be removed only after all connections are closed\n        IndexedDBLogger.db.close();\n        let request = window.indexedDB.deleteDatabase(IndexedDBLogger._database);\n        request.onerror = event => util.throwError(event.target.error);\n        /* eslint no-unused-vars: \"off\" */\n        request.onsuccess = event => {\n            delete IndexedDBLogger.status;\n            delete IndexedDBLogger.db;\n        };\n    }\n\n    /**\n     * get internal transaction store\n     * @method _getTransactionStore\n     * @private\n     * @static\n     * @param {String} mode - transaction mode\n     * @return {Object} - internal object store\n     */\n    static _getTransactionStore(mode) {\n        if (IndexedDBLogger.db) {\n            let transaction = IndexedDBLogger.db.transaction(['logs'], mode || IDBTransaction.READ_WRITE);\n            transaction.onerror = event => util.throwError(event.target.error);\n            return transaction.objectStore('logs');\n        }\n        else {\n            util.throwError('log database is not created or connections are closed, considering init it.');\n        }\n    }\n\n    /**\n     * detect support situation\n     * @prop {Boolean} support\n     */\n    static get support() {\n        const support = !!(window.indexedDB && window.IDBTransaction && window.IDBKeyRange);\n        if (support) {\n            window.IDBTransaction.READ_WRITE = 'readwrite';\n            window.IDBTransaction.READ_ONLY = 'readonly';\n        }\n        return support;\n    }\n}\n","import LoggerInterface from './interface';\nimport * as util from '../lib/util';\n\n/**\n * Localstorage protocol\n * @class LocalStorageLogger\n */\nexport default class LocalStorageLogger extends LoggerInterface {\n    /**\n     * Localstorage protocol constructor\n     * @constructor\n     * @param {String} namespace - namespace to use\n     */\n    constructor(...args) {\n        super(...args);\n    }\n\n    /**\n     * add a log record\n     * @method _reocrd\n     * @private\n     * @parma {String} level - log level\n     * @param {String} descriptor - to speed up search and improve understanding\n     * @param {Mixed} [data] - additional data\n     */\n    _record(level, descriptor, data) {\n        var logs = window.localStorage.getItem(LocalStorageLogger._database) ? JSON.parse(window.localStorage.getItem(LocalStorageLogger._database)) : [];\n        logs.push([\n            Date.now(),\n            this._namespace,\n            level,\n            descriptor,\n            data\n        ]);\n        try {\n            util.debug(this._namespace, level, descriptor, data);\n            window.localStorage.setItem(LocalStorageLogger._database, JSON.stringify(logs));\n        } catch (e) { util.throwError('error inserting record'); }\n    }\n\n    /**\n     * initialize protocol\n     * @method init\n     * @static\n     * @param {String} database - database name to use\n     */\n    static init(database) {\n        if (!LocalStorageLogger.support) {\n            util.throwError('your platform does not support localstorage protocol.');\n        }\n        LocalStorageLogger._database = database || 'logline';\n        if (!window.localStorage.getItem(LocalStorageLogger._database)) {\n            window.localStorage.setItem(LocalStorageLogger._database, JSON.stringify([]));\n        }\n        LocalStorageLogger.status = super.STATUS.INITED;\n    }\n\n    /**\n     * get logs in range\n     * if from and end is not defined, will fetch full log\n     * @method get\n     * @static\n     * @param {String} from - time from, unix time stamp or falsy\n     * @param {String} to - time end, unix time stamp or falsy\n     * @param {Function} readyFn - function to call back with logs as parameter\n     */\n    static get(from, to, readyFn) {\n        var logs = JSON.parse(window.localStorage.getItem(LocalStorageLogger._database)), i;\n\n        from = LoggerInterface.transTimeFormat(from);\n        to = LoggerInterface.transTimeFormat(to);\n\n        for (i = 0; i < logs.length; i++) {\n            if ((from && logs[i][0] < from) || (to && logs[i][0] > to)) {\n                continue;\n            }\n\n            logs[i] = {\n                time: logs[i][0],\n                namespace: logs[i][1],\n                level: logs[i][2],\n                descriptor: logs[i][3],\n                data: logs[i][4]\n            };\n        }\n        readyFn(logs);\n    }\n\n    /**\n     * clean logs = keep limited logs\n     * @method keep\n     * @static\n     * @param {Number} daysToMaintain - keep logs within days\n     */\n    static keep(daysToMaintain) {\n        var logs = !daysToMaintain ? [] : (window.localStorage.getItem(LocalStorageLogger._database) ? JSON.parse(window.localStorage.getItem(LocalStorageLogger._database)) : []).filter(log => {\n            return log.time >= (Date.now() - (daysToMaintain || 2) * 24 * 3600 * 1000);\n        });\n        window.localStorage.setItem(LocalStorageLogger._database, JSON.stringify(logs));\n    }\n\n    /**\n     * delete log database\n     * @method clean\n     * @static\n     */\n    static clean() {\n        delete LocalStorageLogger.status;\n        window.localStorage.removeItem(LocalStorageLogger._database);\n    }\n\n    /**\n     * detect support situation\n     * @prop {Boolean} support\n     */\n    static get support() {\n        return 'localStorage' in window;\n    }\n}\n","import LoggerInterface from './interface';\nimport Pool from '../lib/pool';\nimport * as util from '../lib/util';\n\n/**\n * Websql protocol\n * @class WebsqlLogger\n */\nexport default class WebsqlLogger extends LoggerInterface {\n    /**\n     * Websql logline constructor\n     * @constructor\n     * @param {String} namespace - namespace to use\n     */\n    constructor(...args) {\n        super(...args);\n    }\n\n    /**\n     * add a log record\n     * @method _reocrd\n     * @private\n     * @parma {String} level - log level\n     * @param {String} descriptor - to speed up search and improve understanding\n     * @param {Mixed} [data] - additional data\n     */\n    _record(level, descriptor, data) {\n        if (WebsqlLogger.status !== LoggerInterface.STATUS.INITED) {\n            WebsqlLogger._pool.push(() => this._record(level, descriptor, data));\n            if (WebsqlLogger.status !== LoggerInterface.STATUS.INITING) {\n                WebsqlLogger.init();\n            }\n            return;\n        }\n\n        try {\n            util.debug(this._namespace, level, descriptor, data);\n            WebsqlLogger._db.transaction(tx => {\n                tx.executeSql(\n                    'INSERT INTO logs (time, namespace, level, descriptor, data) VALUES(?, ?, ?, ? ,?)',\n                    [Date.now(), this._namespace, level, descriptor, (data === undefined || data === '') ? '' : (JSON.stringify(data) || '')],\n                    () => {/* empty func */},\n                    (tx, e) => { throw e.message; }\n                );\n            });\n        } catch (e) { util.throwError('error inserting record'); }\n    }\n\n    /**\n     * initialize protocol\n     * @method init\n     * @static\n     * @param {String} database - database name to use\n     */\n    static init(database) {\n        if (!WebsqlLogger.support) {\n            util.throwError(new Error('your platform does not support websql protocol.'));\n        }\n\n        if (WebsqlLogger.status) {\n            return false;\n        }\n\n        WebsqlLogger._pool = WebsqlLogger._pool || new Pool();\n        WebsqlLogger._database = database || 'logline';\n        WebsqlLogger.status = super.STATUS.INITING;\n\n        try {\n            WebsqlLogger._db = window.openDatabase(WebsqlLogger._database, '1.0', 'cats loves logs', 4.85 * 1024 * 1024);\n            WebsqlLogger._db.transaction(tx => {\n                tx.executeSql(\n                    'CREATE TABLE IF NOT EXISTS logs (time, namespace, level, descriptor, data)', [],\n                    () => {\n                        WebsqlLogger.status = super.STATUS.INITED;\n                        WebsqlLogger._pool.consume();\n                    },\n                    () => {\n                        WebsqlLogger.status = super.STATUS.FAILED;\n                    }\n                );\n            });\n        } catch (e) { util.throwError('unable to init log database.'); }\n    }\n\n    /**\n     * get logs in range\n     * if from and end is not defined, will fetch full log\n     * @method get\n     * @static\n     * @param {String} from - time from, unix time stamp or falsy\n     * @param {String} to - time end, unix time stamp or falsy\n     * @param {Function} readyFn - function to call back with logs as parameter\n     */\n    static get(from, to, readyFn) {\n        if (WebsqlLogger.status !== super.STATUS.INITED) {\n            return WebsqlLogger._pool.push(() => WebsqlLogger.get(from, to, readyFn));\n        }\n\n        from = LoggerInterface.transTimeFormat(from);\n        to = LoggerInterface.transTimeFormat(to);\n\n        try {\n            WebsqlLogger._db.transaction(function(tx) {\n                tx.executeSql(\n                    'SELECT * FROM logs ORDER BY time DESC', [],\n                    (tx, res) => {\n                        var logs = [], line, index = res.rows.length, item;\n                        while (--index >= 0) {\n                            item = res.rows.item(index);\n                            if ((from && item.time < from) || (to && item.time > to)) {\n                                continue;\n                            }\n\n                            // in some devices, properties are configureable: false, writable: false\n                            // we need deep copy\n                            line = JSON.parse(JSON.stringify(item));\n                            // incase data is an object, not a string\n                            try { line.data = JSON.parse(line.data); }\n                            catch (e) {/* leave line.data as it be */}\n                            logs.push(line);\n                        }\n                        readyFn(logs);\n                    },\n                    (tx, e) => { throw e.message; }\n                );\n            });\n        } catch (e) { util.throwError('unable to collect logs from database.'); }\n    }\n\n    /**\n     * clean logs = keep limited logs\n     * @method keep\n     * @static\n     * @param {Number} daysToMaintain - keep logs within days\n     */\n    static keep(daysToMaintain) {\n        if (WebsqlLogger.status !== super.STATUS.INITED) {\n            return WebsqlLogger._pool.push(() => WebsqlLogger.keep(daysToMaintain));\n        }\n\n        try {\n            WebsqlLogger._db.transaction(function(tx) {\n                if (daysToMaintain) {\n                    tx.executeSql(\n                        'DELETE FROM logs WHERE time < ?',\n                        [Date.now() - (daysToMaintain || 2) * 24 * 3600 * 1000],\n                        function() {/* empty func */},\n                        function(tx, e) {throw e.message;}\n                    );\n                }\n                else {\n                    tx.executeSql(\n                        'DELETE FROM logs', [],\n                        () => {/* empty func */},\n                        (tx, e) => { throw e.message; }\n                    );\n                }\n            });\n        } catch (e) { util.throwError('unable to clean logs from database.'); }\n    }\n\n    /**\n     * delete log database\n     * @method clean\n     * @static\n     */\n    static clean() {\n        if (WebsqlLogger.status !== super.STATUS.INITED) {\n            WebsqlLogger._pool.push(() => WebsqlLogger.clean());\n            return;\n        }\n\n        try {\n            WebsqlLogger._db.transaction(tx => {\n                tx.executeSql(\n                    'DROP TABLE logs', [],\n                    () => {\n                        delete WebsqlLogger.status;\n                    },\n                    (tx, e) => { throw e.message; }\n                );\n            });\n        } catch (e) { util.throwError('unable to clean log database.'); }\n    }\n\n    /**\n     * detect support situation\n     * @prop {Boolean} support\n     */\n    static get support() {\n        return 'openDatabase' in window;\n    }\n}\n","import Interface from './protocols/interface';\nimport IndexeddbLogger from './protocols/indexeddb';\nimport LocalstorageLogger from './protocols/localstorage';\nimport WebsqlLogger from './protocols/websql';\nimport * as util from './lib/util';\n\n\nclass Logline {\n    /**\n     * Logline constructor\n     * @constructor\n     * @param {String} namespace - namespace to use\n     * @return {Object Protocol Instance}\n     */\n    constructor(namespace) {\n        if (!(this instanceof Logline)) {\n            return new Logline(namespace);\n        }\n        Logline._checkProtocol();\n        return new Logline._protocol(namespace);\n    }\n\n    /**\n     * choose a protocol to initialize\n     * @method _initProtocol\n     * @private\n     * @static\n     * @param {Object Protocol Class} protocol - protocol to use, must under Logline.PROTOCOL\n     * @return {Object} Logline\n     */\n    static _initProtocol(protocol) {\n        Logline._protocol = protocol;\n        Logline._protocol.init(Logline._database || 'logline');\n    }\n\n    /**\n     * check protocol\n     * if no protocol is chosen, will try to choose an available one automatically\n     * if none of the protocols is available, an error will be thrown\n     * @method _checkProtocol\n     * @private\n     * @static\n     */\n    static _checkProtocol() {\n        if (!Logline._protocol) {\n            let protocols = Object.keys(Logline.PROTOCOL), protocol;\n            while ((protocol = Logline.PROTOCOL[protocols.shift()])) {\n                if (protocol.support) {\n                    Logline._initProtocol(protocol);\n                    return;\n                }\n            }\n\n            throw new Error(protocols.join(', ').toLowerCase() + ' protocols are not supported on this platform');\n        }\n    }\n\n    /**\n     * get logs in range\n     * if from and end is not defined, will fetch full log\n     * @method get\n     * @static\n     * @param {String} [from] - time from\n     * @param {String} [to] - time end\n     * @param {Function} readyFn - function to call back with logs as parameter\n     */\n    static get(from, to, readyFn) {\n        Logline._checkProtocol();\n\n        switch (arguments.length) {\n            case 1:\n                readyFn = from;\n                from = undefined;\n                break;\n            case 2:\n                readyFn = to;\n                to = undefined;\n                break;\n            case 3:\n            default:\n                break;\n        }\n\n        Logline._protocol.get(from, to, readyFn);\n    }\n\n    /**\n     * read all logs\n     * @method all\n     * @static\n     * @param {Function} readyFn - function to call back with logs as parameter\n     */\n    static all(readyFn) {\n        Logline.get(readyFn);\n    }\n\n    /**\n     * clean up logs = keep limited logs\n     * @method keep\n     * @static\n     * @param {String} daysToMaintain - specialfy days to keep, support human readable format such as '3d', '.3'\n     * @return {Object} Logline\n     */\n    static keep(daysToMaintain) {\n        Logline._checkProtocol();\n        Logline._protocol.keep(daysToMaintain);\n        return this;\n    }\n\n    /**\n     * delete log database\n     * @method clean\n     * @static\n     * @return {Object} Logline\n     */\n    static clean() {\n        Logline._checkProtocol();\n        Logline._protocol.clean();\n        return this;\n    }\n\n    /**\n     * choose a protocol\n     * @method using\n     * @static\n     * @param {Object Protocol Class} protocol - wanted protocol, should be on of Logline.PROTOCOL\n     * @param {String} [database] - custome database name\n     * @return {Object} Logline\n     */\n    static using(protocol, database) {\n        // protocol unavailable is not allowed\n        if (-1 === [IndexeddbLogger, LocalstorageLogger, WebsqlLogger].indexOf(protocol)) {\n            util.throwError('specialfied protocol ' + (protocol ? (protocol + ' ') : '') + 'is not available');\n        }\n\n        // once protocol is selected, it shall not be changed during runtime\n        if (Logline._protocol) {\n            return this;\n        }\n\n        Logline.database(database || Logline._database);\n        Logline._initProtocol(protocol);\n        return this;\n    }\n\n    /**\n     * specialfy a custome database name, in case of any conflicts\n     * @methd database\n     * @static\n     * @param {String} name - target database name\n     */\n    static database(name) {\n        Logline._database = name;\n    }\n}\n\n// export protocols for modification and mounting\nLogline.PROTOCOL = {\n    INDEXEDDB: IndexeddbLogger,\n    LOCALSTORAGE: LocalstorageLogger,\n    WEBSQL: WebsqlLogger\n};\n\n// export protocol interface for user custom implements\nLogline.INTERFACE = Object.freeze(Interface);\n\n// export Logline env, just like Unix Environment variables\nLogline.env = {\n    verbose: true\n};\n\nexport default Logline;\n"],"names":["throwError","errMessage","console","error","debug","namespace","level","descriptor","data","HAS_CONSOLE","window","Logline","env","verbose","LEVEL_CONSOLE_MAP","toUpperCase","INFO","filterFunction","obj","i","newObj","hasOwnProperty","Interface","_namespace","args","_record","database","time","relative","test","TypeError","Date","now","replace","from","to","readyFn","daysToMaintain","Pool","_pool","handler","context","push","this","shift","call","IndexedDBLogger","status","LoggerInterface","STATUS","INITED","_this2","INITING","init","transaction","db","IDBTransaction","READ_WRITE","onerror","util","event","target","objectStore","add","FAILED","support","_database","babelHelpers.get","request","indexedDB","open","onsuccess","result","consume","onupgradeneeded","store","createObjectStore","autoIncrement","createIndex","unique","get","transTimeFormat","_getTransactionStore","READ_ONLY","getAll","logs","length","openCursor","cursor","value","continue","keep","range","delete","primaryKey","clear","clean","close","deleteDatabase","mode","IDBKeyRange","LocalStorageLogger","localStorage","getItem","JSON","parse","setItem","stringify","e","filter","log","removeItem","WebsqlLogger","_db","executeSql","undefined","tx","message","Error","openDatabase","res","line","item","index","rows","_checkProtocol","_protocol","protocol","protocols","Object","keys","PROTOCOL","_initProtocol","join","toLowerCase","arguments","IndexeddbLogger","LocalstorageLogger","indexOf","name","INTERFACE","freeze"],"mappings":"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"}