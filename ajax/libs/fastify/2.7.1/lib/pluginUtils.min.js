"use strict";const assert=require("assert"),registeredPlugins=Symbol.for("registered-plugin"),{kReply:kReply,kRequest:kRequest}=require("./symbols.js");function getMeta(e){return e[Symbol.for("plugin-meta")]}function shouldSkipOverride(e){return!!e[Symbol.for("skip-override")]}function checkDependencies(e){const r=getMeta(e);if(!r)return;const s=r.dependencies;s&&(assert(Array.isArray(s),"The dependencies should be an array of strings"),s.forEach(e=>{assert(this[registeredPlugins].indexOf(e)>-1,`The dependency '${e}' of plugin '${r.name}' is not registered`)}))}function checkDecorators(e){const r=getMeta(e);if(!r)return;const s=r.decorators;s&&(s.fastify&&_checkDecorators.call(this,"Fastify",s.fastify),s.reply&&_checkDecorators.call(this[kReply],"Reply",s.reply),s.request&&_checkDecorators.call(this[kRequest],"Request",s.request))}function _checkDecorators(e,r){assert(Array.isArray(r),"The decorators should be an array of strings"),r.forEach(r=>{assert("Fastify"===e?r in this:r in this.prototype,`The decorator '${r}' is not present in ${e}`)})}function registerPluginName(e){const r=getMeta(e);if(!r)return;const s=r.name;s&&this[registeredPlugins].push(s)}function registerPlugin(e){return registerPluginName.call(this,e),checkDecorators.call(this,e),checkDependencies.call(this,e),shouldSkipOverride(e)}module.exports={registeredPlugins:registeredPlugins,registerPlugin:registerPlugin},module.exports[Symbol.for("internals")]={shouldSkipOverride:shouldSkipOverride,getMeta:getMeta,checkDecorators:checkDecorators,checkDependencies:checkDependencies};