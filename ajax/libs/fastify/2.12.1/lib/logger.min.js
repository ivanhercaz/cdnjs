"use strict";const nullLogger=require("abstract-logging"),pino=require("pino"),{serializersSym:serializersSym}=pino.symbols,{isValidLogger:isValidLogger}=require("./validation"),{codes:{FST_ERR_LOG_INVALID_DESTINATION:FST_ERR_LOG_INVALID_DESTINATION}}=require("./errors");function createPinoLogger(e,r){if(r=r||e.stream,delete e.stream,r&&e.file)throw new FST_ERR_LOG_INVALID_DESTINATION;e.file&&(r=pino.destination(e.file),delete e.file);var o=e.logger,i=e.genReqId,g=null;return o?(e.logger=void 0,e.genReqId=void 0,o[serializersSym]&&(e.serializers=Object.assign({},e.serializers,o[serializersSym])),g=o.child(e),e.logger=o,e.genReqId=i):g=pino(e,r),g}const serializers={req:function(e){return{method:e.method,url:e.url,version:e.headers["accept-version"],hostname:e.hostname,remoteAddress:e.ip,remotePort:e.connection.remotePort}},err:pino.stdSerializers.err,res:function(e){return{statusCode:e.statusCode}}};function now(){var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}function createLogger(e){if(isValidLogger(e.logger)){return{logger:createPinoLogger({logger:e.logger,serializers:Object.assign({},serializers,e.logger.serializers)}),hasLogger:!0}}if(e.logger){return e.logger="object"==typeof e.logger?e.logger:{},e.logger.level=e.logger.level||"info",e.logger.serializers=Object.assign({},serializers,e.logger.serializers),{logger:createPinoLogger(e.logger),hasLogger:!0}}{const e=nullLogger;return e.child=(()=>e),{logger:e,hasLogger:!1}}}module.exports={createLogger:createLogger,serializers:serializers,now:now};