"use strict";const{inherits:inherits,format:format}=require("util"),codes={};function createError(r,e,t=500,o=Error){if(!r)throw new Error("Fastify error code must not be empty");if(!e)throw new Error("Fastify error message must not be empty");function E(o,a,_){Error.captureStackTrace(this,E),this.name=`FastifyError [${r}]`,this.code=r,this.message=o&&a&&_?format(e,o,a,_):o&&a?format(e,o,a):o?format(e,o):e,this.message=`${this.code}: ${this.message}`,this.statusCode=t||void 0}return r=r.toUpperCase(),E.prototype[Symbol.toStringTag]="Error",inherits(E,o),codes[r]=E,codes[r]}createError("FST_ERR_NOT_FOUND","Not Found",404),createError("FST_ERR_CTP_ALREADY_PRESENT","Content type parser '%s' already present."),createError("FST_ERR_CTP_INVALID_TYPE","The content type should be a string",500,TypeError),createError("FST_ERR_CTP_EMPTY_TYPE","The content type cannot be an empty string",500,TypeError),createError("FST_ERR_CTP_INVALID_HANDLER","The content type handler should be a function",500,TypeError),createError("FST_ERR_CTP_INVALID_PARSE_TYPE","The body parser can only parse your data as 'string' or 'buffer', you asked '%s' which is not supported.",500,TypeError),createError("FST_ERR_CTP_BODY_TOO_LARGE","Request body is too large",413,RangeError),createError("FST_ERR_CTP_INVALID_MEDIA_TYPE","Unsupported Media Type: %s",415),createError("FST_ERR_CTP_INVALID_CONTENT_LENGTH","Request body size did not match Content-Length",400,RangeError),createError("FST_ERR_CTP_EMPTY_JSON_BODY","Body cannot be empty when content-type is set to 'application/json'",400),createError("FST_ERR_DEC_ALREADY_PRESENT","The decorator '%s' has already been added!"),createError("FST_ERR_DEC_MISSING_DEPENDENCY","The decorator is missing dependency '%s'."),createError("FST_ERR_DEC_AFTER_START","The decorator '%s' has been added after start!"),createError("FST_ERR_HOOK_INVALID_TYPE","The hook name must be a string",500,TypeError),createError("FST_ERR_HOOK_INVALID_HANDLER","The hook callback must be a function",500,TypeError),createError("FST_ERR_LOG_INVALID_DESTINATION","Cannot specify both logger.stream and logger.file options"),createError("FST_ERR_REP_INVALID_PAYLOAD_TYPE","Attempted to send payload of invalid type '%s'. Expected a string or Buffer.",500,TypeError),createError("FST_ERR_REP_ALREADY_SENT","Reply was already sent."),createError("FST_ERR_REP_SENT_VALUE","The only possible value for reply.sent is true."),createError("FST_ERR_SEND_INSIDE_ONERR","You cannot use `send` inside the `onError` hook"),createError("FST_ERR_SEND_UNDEFINED_ERR","Undefined error has occured"),createError("FST_ERR_BAD_STATUS_CODE","Called reply with an invalid status code: %s"),createError("FST_ERR_SCH_MISSING_ID","Missing schema $id property"),createError("FST_ERR_SCH_ALREADY_PRESENT","Schema with id '%s' already declared!"),createError("FST_ERR_SCH_NOT_PRESENT","Schema with id '%s' does not exist!"),createError("FST_ERR_SCH_DUPLICATE","Schema with '%s' already present!"),createError("FST_ERR_SCH_BUILD","Failed building the schema for %s: %s, due error %s"),createError("FST_ERR_SCH_MISSING_COMPILER","You must provide a schemaCompiler to route %s %s to use the schemaResolver"),createError("FST_ERR_PROMISE_NOT_FULLFILLED","Promise may not be fulfilled with 'undefined' when statusCode is not 204"),createError("FST_ERR_HTTP2_INVALID_VERSION","HTTP2 is available only from node >= 8.8.1"),createError("FST_ERR_INIT_OPTS_INVALID","Invalid initialization options: '%s'"),createError("FST_ERR_BAD_URL","'%s' is not a valid url component",400),module.exports={codes:codes,createError:createError};