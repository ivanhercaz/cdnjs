{"version":3,"sources":["webpack://libphonenumber/webpack/universalModuleDefinition","webpack://libphonenumber/webpack/bootstrap","webpack://libphonenumber/./es6/metadata.js","webpack://libphonenumber/./es6/constants.js","webpack://libphonenumber/./es6/parse_.js","webpack://libphonenumber/./es6/parsePhoneNumber.js","webpack://libphonenumber/./es6/getNumberType_.js","webpack://libphonenumber/./es6/util.js","webpack://libphonenumber/./es6/findNumbers/util.js","webpack://libphonenumber/./es6/validate_.js","webpack://libphonenumber/./es6/PhoneNumber.js","webpack://libphonenumber/./es6/extension.js","webpack://libphonenumber/./es6/isViablePhoneNumber.js","webpack://libphonenumber/./es6/parseDigits.js","webpack://libphonenumber/./es6/PhoneNumberMatcher.js","webpack://libphonenumber/./es6/getNumberType.js","webpack://libphonenumber/./es6/format_.js","webpack://libphonenumber/./es6/RFC3966.js","webpack://libphonenumber/./es6/isPossibleNumber_.js","webpack://libphonenumber/./es6/ParseError.js","webpack://libphonenumber/./es6/findPhoneNumbersInText.js","webpack://libphonenumber/./es6/searchNumbers.js","webpack://libphonenumber/./es6/findNumbers.js","webpack://libphonenumber/./es6/AsYouType.js","webpack://libphonenumber/./es6/findNumbers/utf-8.js","webpack://libphonenumber/./es6/findNumbers/isValidCandidate.js","webpack://libphonenumber/./es6/findNumbers/isValidPreCandidate.js","webpack://libphonenumber/./es6/findNumbers/parsePreCandidate.js","webpack://libphonenumber/./es6/findPhoneNumbers_.js","webpack://libphonenumber/./es6/parsePhoneNumber_.js","webpack://libphonenumber/./es6/isValidNumberForRegion_.js","webpack://libphonenumber/./es6/IDD.js","webpack://libphonenumber/./es6/getCountryCallingCode.js","webpack://libphonenumber/./es6/parseIncompletePhoneNumber.js","webpack://libphonenumber/./es6/formatIncompletePhoneNumber.js","webpack://libphonenumber/./es6/getCountries.js","webpack://libphonenumber/./es6/searchPhoneNumbersInText.js","webpack://libphonenumber/./es6/findNumbers/Leniency.js","webpack://libphonenumber/./es6/findNumbers/LRUCache.js","webpack://libphonenumber/./es6/findNumbers/RegExpCache.js","webpack://libphonenumber/./es6/findNumbers_.js","webpack://libphonenumber/./es6/isValidNumberForRegion.js","webpack://libphonenumber/./es6/isPossibleNumber.js","webpack://libphonenumber/./es6/getExampleNumber.js","webpack://libphonenumber/./es6/parsePhoneNumberFromString_.js","webpack://libphonenumber/./es6/parsePhoneNumberFromString.js","webpack://libphonenumber/./metadata.min.json.js","webpack://libphonenumber/./es6/findPhoneNumbers.js","webpack://libphonenumber/./es6/validate.js","webpack://libphonenumber/./es6/format.js","webpack://libphonenumber/./es6/parse.js","webpack://libphonenumber/./es6/tools/semver-compare.js","webpack://libphonenumber/./index.es6.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","validateMetadata","getExtPrefix","country","metadata","Metadata","hasCountry","ext","DEFAULT_EXT_PREFIX","getCountryCallingCode","countryCallingCode","Error","isSupportedCountry","undefined","countries","_semverCompare","_typeof","Symbol","_typeof2","iterator","obj","constructor","_createClass","defineProperties","target","props","length","descriptor","writable","key","Constructor","protoProps","staticProps","_classCallCheck","instance","TypeError","V3","this","v1","version","v2","_semverCompare2","default","v3","keys","filter","_","_country","country_metadata","countryCallingCodes","_this","formats","_getFormats","getDefaultCountryMetadataForRegion","map","Format","_getNationalPrefixFormattingRule","_nationalPrefixForParsing","nationalPrefix","_getNationalPrefixIsOptionalWhenFormatting","types","_type","hasTypes","getType","Type","country_phone_code_to_countries","country_calling_codes","country_calling_code","format","_format","nationalPrefixFormattingRule","nationalPrefixIsOptionalWhenFormattingInNationalFormat","usesNationalPrefix","FIRST_GROUP_ONLY_PREFIX_PATTERN","test","type","possibleLengths","is_object","join","type_of","MIN_LENGTH_FOR_NSN","MAX_LENGTH_FOR_NSN","MAX_LENGTH_COUNTRY_CODE","VALID_DIGITS","WHITESPACE","VALID_PUNCTUATION","PLUS_CHARS","text","options","arguments","_metadata2","defaultCountry","_ParseError2","_parseInput","indexOf","_RFC","parseRFC3966","number","extractFormattedPhoneNumber","_isViablePhoneNumber2","with_extension_stripped","_extension","extractExtension","parseInput","formattedPhoneNumber","_parsePhoneNumber","_extractCountryCallin","extractCountryCallingCode","chooseCountryByCountryCallingCode","_getCountryCallingCode2","_parseNationalNumber","nationalNumber","_parseIncompletePhoneNumber2","carrierCode","_stripNationalPrefixA","stripNationalPrefixAndCarrierCode","potentialNationalNumber","potentialCarrierCode","_getNumberType_","checkNumberLengthForType","_util","matchesEntirely","nationalNumberPattern","parseNationalNumber","exactCountry","findCountryCode","parsePhoneNumber","selectedCountry","_constants","phoneNumber","_PhoneNumber2","valid","extended","national_number","result","phone","possible","_isPossibleNumber_","is_possible_number","_IDD","MAX_INPUT_STRING_LENGTH","PHONE_NUMBER_START_PATTERN","RegExp","AFTER_PHONE_NUMBER_END_PATTERN","startsAt","search","slice","replace","nationalPrefixForParsing","prefixPattern","prefixMatch","exec","nationalSignificantNumber","capturedGroupsCount","nationalPrefixTransformRule","nationalPhoneNumber","possibleCountries","_iterator","_isArray","Array","isArray","_i","_ref","next","done","leadingDigits","_getNumberType_2","_findCountryCode","numberWithoutIDD","stripIDDPrefix","_normalizeArguments","normalizeArguments","_parsePhoneNumber_2","_parsePhoneNumber_","_extends","assign","source","_slicedToArray","arr","_arr","_n","_d","_e","_s","push","err","sliceIterator","args","_Array$prototype$slic","_Array$prototype$slic2","arg_1","arg_2","arg_3","arg_4","isObject","input","is_of_type","pattern","NON_FIXED_LINE_PHONE_TYPES","type_info","possible_lengths","mobile_type","mergeArrays","actual_length","minimum_length","_metadata","regular_expression","a","b","merged","element","sort","limit","lower","upper","trimAfterFirstMatch","regexp","string","index","startsWith","substring","endsWith","PhoneNumber","isCountryCode","_metadata3","_isPossibleNumber_2","_validate_2","_format_2","start","EXTN_PATTERN","number_without_extension","matches","match","RFC3966_EXTN_PREFIX","CAPTURING_EXTN_DIGITS","create_extension_pattern","purpose","single_extension_characters","EXTN_PATTERNS_FOR_PARSING","EXTN_PATTERNS_FOR_MATCHING","VALID_PHONE_NUMBER_PATTERN","MIN_LENGTH_PHONE_NUMBER_PATTERN","VALID_PHONE_NUMBER","parseDigit","split","character","digit","DIGITS","0","1","2","3","4","5","6","7","8","9","０","１","２","３","４","５","６","７","８","９","٠","١","٢","٣","٤","٥","٦","٧","٨","٩","۰","۱","۲","۳","۴","۵","۶","۷","۸","۹","_utf","_isValidCandidate","INNER_MATCHES","pZ","PZ","leadLimit","punctuationLimit","digitBlockLimit","blockLimit","punctuation","digitSequence","pNd","PATTERN","LEAD_CLASS","UNWANTED_END_CHAR_PATTERN","_pN","_pL","MAX_SAFE_INTEGER","Number","Math","pow","PhoneNumberMatcher","state","searchIndex","regExpCache","_RegExpCache2","leniency","maxTries","_Leniency2","candidate","offset","_parsePreCandidate2","_isValidPreCandidate2","parseAndVerify","extractInnerMatch","endsAt","isFirstMatch","possibleInnerMatch","_group","_match","group","_isValidCandidate2","_parse_2","lastMatch","find","hasNext","DEFAULT_OPTIONS","addExtension","formatNationalNumber","formatExtension","formatRFC3966","fromCountry","IDDPrefix","getIDDPrefix","humanReadable","formattedForSameCountryCallingCode","toCountryCallingCode","toCountryMetadata","fromCountryMetadata","formatIDDSameCountryCallingCodeNumber","formatNationalNumberUsingFormat","applyInternationalSeparatorStyle","formattedNumber","extension","FIRST_GROUP_PATTERN","useInternationalSeparator","useNationalPrefixFormattingRule","internationalFormat","formatAs","availableFormats","nationalNnumber","leadingDigitsPatterns","lastLeadingDigitsPattern","chooseFormatForNumber","local","trim","part","_part$split","_part$split2","_ref2","_isViablePhoneNumber","is_international","ParseError","code","message","stack","create","getArguments","_findNumbers2","_findNumbers","matcher","_PhoneNumberMatcher2","_defineProperty","_PhoneNumberMatcher","_findNumbers_2","_findNumbers_","stripNonPairedParens","cutAndStripNonPairedParens","closeNonPairedParens","template","cut_before","retained_template","opening_braces","countOccurences","closing_braces","dangling_braces","repeat","_parse_","_format_","LONGEST_DUMMY_PHONE_NUMBER","DIGIT_PLACEHOLDER","DIGIT_PLACEHOLDER_MATCHER","NATIONAL_PREFIX_SEPARATORS_PATTERN","CREATE_CHARACTER_CLASS_PATTERN","CREATE_STANDALONE_DIGIT_PATTERN","ELIGIBLE_FORMAT_PATTERN","VALID_FORMATTED_PHONE_NUMBER_PART","VALID_FORMATTED_PHONE_NUMBER_PART_PATTERN","AsYouType","reset","formattedOutput","international","digits","nationalNumberDigits","setCountry","resetFormat","initializePhoneNumberFormatsForCountry","matchingFormats","chosenFormat","populatedNationalNumberTemplate","populatedNationalNumberTemplatePosition","formattedDigits","extractFormattedDigits","getFullNumber","inputDigits","_parseDigits2","getNonFormattedNationalNumber","extractedNumber","startInternationalNumber","nextDigits","isInternational","isCountryCallingCodeAmbiguous","determineTheCountry","previousNationalPrefix","extractNationalPrefix","matchFormats","formatNationalNumberWithNextDigits","attemptToFormatCompletePhoneNumber","previouslyChosenFormat","newlyChosenFormat","chooseFormat","formatNextNationalNumberDigits","reformatNationalNumber","createFormattingTemplate","leadingDigitsPatternIndex","nationalPrefixIsMandatoryWhenFormattingInNationalFormat","leadingDigitsPatternsCount","min","leadingDigitsPattern","_iterator2","_isArray2","_i2","formattedNationalNumber","formattedNationalNumberWithNationalPrefix","getSeparatorAfterNationalPrefix","isPossibleNumber","getTemplateForNumberFormatPattern","strictPattern","nationalNumberDummyDigits","numberFormat","getFormatFormat","includesNationalPrefix","numberFormatWithNationalPrefix","_iterator3","_isArray3","_i3","_ref3","getNonFormattedTemplate","pop","cleared_string","_iterator4","_isArray4","_i4","_ref4","cutBeforeIndex","symbol","count","_iterator5","_isArray5","_i5","_ref5","times","isLatinLetter","letter","pL_regexp","pMn_regexp","latinLetterRegexp","isInvalidPunctuationSymbol","pSc_regexp","_pZ","MATCHING_BRACKETS_ENTIRE","PUB_PAGES","LEAD_CLASS_LEADING","previousChar","lastCharIndex","nextChar","BRACKET_PAIR_LIMIT","SLASH_SEPARATED_DATES","TIME_STAMPS","followingText","TIME_STAMPS_SUFFIX_LEADING","SECOND_NUMBER_START_PATTERN","PhoneNumberSearch","phones","searchPhoneNumbers","WHITESPACE_IN_THE_BEGINNING_PATTERN","PUNCTUATION_IN_THE_END_PATTERN","parseCandidate","last_match","_validate_","countryMetadata","SINGLE_IDD_PREFIX","defaultIDDPrefix","IDDPrefixPattern","matchedGroups","CAPTURING_DIGIT_PATTERN","parsePhoneNumberCharacter","_parseDigits","_AsYouType2","_AsYouType","getCountries","_findPhoneNumbersInText","_searchNumbers2","_searchNumbers","containsMoreThanOneSlashInNationalNumber","containsOnlyValidXChars","charAtIndex","charAt","charAtNextIndex","util","isNumberMatch","MatchType","NSN_MATCH","isNationalPrefixPresentIfRequired","getCountryCodeSource","phoneNumberRegion","getRegionCodeForCountryCode","getCountryCode","getMetadataForRegion","getNationalSignificantNumber","formatRule","chooseFormattingPatternForNumber","numberFormats","getNationalPrefixFormattingRule","getNationalPrefixOptionalWhenFormatting","PhoneNumberUtil","formattingRuleHasFirstGroupOnly","rawInputCopy","normalizeDigitsOnly","getRawInput","maybeStripNationalPrefixAndCarrierCode","firstSlashInBodyIndex","secondSlashInBodyIndex","CountryCodeSource","FROM_NUMBER_WITH_PLUS_SIGN","FROM_NUMBER_WITHOUT_PLUS_SIGN","String","checkNumberGroupingIsValid","checkGroups","normalizedCandidate","normalizeDigits","formattedNumberGroups","getNationalNumberGroups","alternateFormats","MetadataManager","getAlternateFormatsForCountry","alternateFormat","getPatternForRegExp","formattingPattern","formatNsnUsingPattern","rfc3966Format","formatNumber","endIndex","startIndex","allNumberGroupsAreExactlyPresent","candidateGroups","NON_DIGITS_PATTERN","candidateNumberGroupIndex","hasExtension","contains","formattedNumberGroupIndex","allNumberGroupsRemainGrouped","fromIndex","FROM_DEFAULT_COUNTRY","countryCode","region","getNddPrefixForRegion","Character","isDigit","getExtension","POSSIBLE","VALID","toString","STRICT_GROUPING","candidateString","EXACT_GROUPING","Node","prev","LRUCache","size","head","tail","cache","ensureLimit","node","remove","put","console","log","_LRUCache","RegExpCache","_LRUCache2","regExp","results","_isValidNumberForRegion_2","_getNumberType","examples","_PhoneNumber","error","_parsePhoneNumberFromString_2","_parsePhoneNumberFromString_","20","27","30","31","32","33","34","36","39","40","41","43","44","45","46","47","48","49","51","52","53","54","55","56","57","58","60","61","62","63","64","65","66","81","82","84","86","90","91","92","93","94","95","98","211","212","213","216","218","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","260","261","262","263","264","265","266","267","268","269","290","291","297","298","299","350","351","352","353","354","355","356","357","358","359","370","371","372","373","374","375","376","377","378","380","381","382","383","385","386","387","389","420","421","423","500","501","502","503","504","505","506","507","508","509","590","591","592","593","594","595","596","597","598","599","670","672","673","674","675","676","677","678","679","680","681","682","683","685","686","687","688","689","690","691","692","800","808","850","852","853","855","856","870","878","880","881","882","883","886","888","960","961","962","963","964","965","966","967","968","970","971","972","973","974","975","976","977","979","992","993","994","995","996","998","AC","AD","AE","AF","AG","AI","AL","AM","AO","AR","AS","AT","AU","AW","AX","AZ","BA","BB","BD","BE","BF","BG","BH","BI","BJ","BL","BM","BN","BO","BQ","BR","BS","BT","BW","BY","BZ","CA","CC","CD","CF","CG","CH","CI","CK","CL","CM","CN","CO","CR","CU","CV","CW","CX","CY","CZ","DE","DJ","DK","DM","DO","DZ","EC","EE","EG","EH","ER","ES","ET","FI","FJ","FK","FM","FO","FR","GA","GB","GD","GE","GF","GG","GH","GI","GL","GM","GN","GP","GQ","GR","GT","GU","GW","GY","HK","HN","HR","HT","HU","ID","IE","IL","IM","IN","IO","IQ","IR","IS","IT","JE","JM","JO","JP","KE","KG","KH","KI","KM","KN","KP","KR","KW","KY","KZ","LA","LB","LC","LI","LK","LR","LS","LT","LU","LV","LY","MA","MC","MD","ME","MF","MG","MH","MK","ML","MM","MN","MO","MP","MQ","MR","MS","MT","MU","MV","MW","MX","MY","MZ","NA","NC","NE","NF","NG","NI","NL","NO","NP","NR","NU","NZ","OM","PA","PE","PF","PG","PH","PK","PL","PM","PR","PS","PT","PW","PY","QA","RE","RO","RS","RU","RW","SA","SB","SC","SD","SE","SG","SH","SI","SJ","SK","SL","SM","SN","SO","SR","SS","ST","SV","SX","SY","SZ","TA","TC","TD","TG","TH","TJ","TK","TL","TM","TN","TO","TR","TT","TV","TW","TZ","UA","UG","US","UY","UZ","VA","VC","VE","VG","VI","VN","VU","WF","WS","XK","YE","YT","ZA","ZM","ZW","001","_findPhoneNumbers_2","_normalizeArguments2","_findPhoneNumbers_","arg_5","pa","pb","na","nb","isNaN","parameters","_metadataMinJson2","_parsePhoneNumber2","apply","parsePhoneNumberFromString","_parsePhoneNumberFromString2","parseNumber","_parse2","parse","_format2","getNumberType","_getNumberType2","getExampleNumber","_getExampleNumber2","_isPossibleNumber2","isValidNumber","_validate2","isValidNumberForRegion","_isValidNumberForRegion2","findPhoneNumbers","_findPhoneNumbers2","_findPhoneNumbers","findNumbers","searchNumbers","findPhoneNumbersInText","_findPhoneNumbersInText2","searchPhoneNumbersInText","_searchPhoneNumbersInText2","formatIncompletePhoneNumber","_formatIncompletePhoneNumber2","_parse","_validate","_getCountryCallingCode","_getCountries2","getPhoneCode","getPhoneCodeCustom"],"mappings":"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,IAAM,MAAMC,IAAM,MAAMC,IAAM,MAAMC,IAAM,MAAMC,IAAM,MAAMC,IAAM,MAAMC,IAAM,MAAMC,KAAO,MAAMC,KAAO,KAAK,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,KAAK,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,KAAK,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,KAAK,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,MAAMC,KAAO,KAAK,KAA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","file":"libphonenumber-js.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"libphonenumber\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"libphonenumber\"] = factory();\n\telse\n\t\troot[\"libphonenumber\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 50);\n","var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport compare from './tools/semver-compare';\n\n// Added \"possibleLengths\" and renamed\n// \"country_phone_code_to_countries\" to \"country_calling_codes\".\nvar V2 = '1.0.18';\n\n// Added \"idd_prefix\" and \"default_idd_prefix\".\nvar V3 = '1.2.0';\n\nvar DEFAULT_EXT_PREFIX = ' ext. ';\n\n/**\r\n * See: https://github.com/catamphetamine/libphonenumber-js/blob/master/METADATA.md\r\n */\n\nvar Metadata = function () {\n\tfunction Metadata(metadata) {\n\t\t_classCallCheck(this, Metadata);\n\n\t\tvalidateMetadata(metadata);\n\n\t\tthis.metadata = metadata;\n\n\t\tthis.v1 = !metadata.version;\n\t\tthis.v2 = metadata.version !== undefined && compare(metadata.version, V3) === -1;\n\t\tthis.v3 = metadata.version !== undefined; // && compare(metadata.version, V4) === -1\n\t}\n\n\t_createClass(Metadata, [{\n\t\tkey: 'getCountries',\n\t\tvalue: function getCountries() {\n\t\t\treturn Object.keys(this.metadata.countries).filter(function (_) {\n\t\t\t\treturn _ !== '001';\n\t\t\t});\n\t\t}\n\t}, {\n\t\tkey: 'hasCountry',\n\t\tvalue: function hasCountry(country) {\n\t\t\treturn this.metadata.countries[country] !== undefined;\n\t\t}\n\t}, {\n\t\tkey: 'country',\n\t\tvalue: function country(_country) {\n\t\t\tif (!_country) {\n\t\t\t\tthis._country = undefined;\n\t\t\t\tthis.country_metadata = undefined;\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tif (!this.hasCountry(_country)) {\n\t\t\t\tthrow new Error('Unknown country: ' + _country);\n\t\t\t}\n\n\t\t\tthis._country = _country;\n\t\t\tthis.country_metadata = this.metadata.countries[_country];\n\t\t\treturn this;\n\t\t}\n\t}, {\n\t\tkey: 'getDefaultCountryMetadataForRegion',\n\t\tvalue: function getDefaultCountryMetadataForRegion() {\n\t\t\treturn this.metadata.countries[this.countryCallingCodes()[this.countryCallingCode()][0]];\n\t\t}\n\t}, {\n\t\tkey: 'countryCallingCode',\n\t\tvalue: function countryCallingCode() {\n\t\t\treturn this.country_metadata[0];\n\t\t}\n\t}, {\n\t\tkey: 'IDDPrefix',\n\t\tvalue: function IDDPrefix() {\n\t\t\tif (this.v1 || this.v2) return;\n\t\t\treturn this.country_metadata[1];\n\t\t}\n\t}, {\n\t\tkey: 'defaultIDDPrefix',\n\t\tvalue: function defaultIDDPrefix() {\n\t\t\tif (this.v1 || this.v2) return;\n\t\t\treturn this.country_metadata[12];\n\t\t}\n\t}, {\n\t\tkey: 'nationalNumberPattern',\n\t\tvalue: function nationalNumberPattern() {\n\t\t\tif (this.v1 || this.v2) return this.country_metadata[1];\n\t\t\treturn this.country_metadata[2];\n\t\t}\n\t}, {\n\t\tkey: 'possibleLengths',\n\t\tvalue: function possibleLengths() {\n\t\t\tif (this.v1) return;\n\t\t\treturn this.country_metadata[this.v2 ? 2 : 3];\n\t\t}\n\t}, {\n\t\tkey: '_getFormats',\n\t\tvalue: function _getFormats(country_metadata) {\n\t\t\treturn country_metadata[this.v1 ? 2 : this.v2 ? 3 : 4];\n\t\t}\n\n\t\t// For countries of the same region (e.g. NANPA)\n\t\t// formats are all stored in the \"main\" country for that region.\n\t\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n\t}, {\n\t\tkey: 'formats',\n\t\tvalue: function formats() {\n\t\t\tvar _this = this;\n\n\t\t\tvar formats = this._getFormats(this.country_metadata) || this._getFormats(this.getDefaultCountryMetadataForRegion()) || [];\n\t\t\treturn formats.map(function (_) {\n\t\t\t\treturn new Format(_, _this);\n\t\t\t});\n\t\t}\n\t}, {\n\t\tkey: 'nationalPrefix',\n\t\tvalue: function nationalPrefix() {\n\t\t\treturn this.country_metadata[this.v1 ? 3 : this.v2 ? 4 : 5];\n\t\t}\n\t}, {\n\t\tkey: '_getNationalPrefixFormattingRule',\n\t\tvalue: function _getNationalPrefixFormattingRule(country_metadata) {\n\t\t\treturn country_metadata[this.v1 ? 4 : this.v2 ? 5 : 6];\n\t\t}\n\n\t\t// For countries of the same region (e.g. NANPA)\n\t\t// national prefix formatting rule is stored in the \"main\" country for that region.\n\t\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n\t}, {\n\t\tkey: 'nationalPrefixFormattingRule',\n\t\tvalue: function nationalPrefixFormattingRule() {\n\t\t\treturn this._getNationalPrefixFormattingRule(this.country_metadata) || this._getNationalPrefixFormattingRule(this.getDefaultCountryMetadataForRegion());\n\t\t}\n\t}, {\n\t\tkey: '_nationalPrefixForParsing',\n\t\tvalue: function _nationalPrefixForParsing() {\n\t\t\treturn this.country_metadata[this.v1 ? 5 : this.v2 ? 6 : 7];\n\t\t}\n\t}, {\n\t\tkey: 'nationalPrefixForParsing',\n\t\tvalue: function nationalPrefixForParsing() {\n\t\t\t// If `national_prefix_for_parsing` is not set explicitly,\n\t\t\t// then infer it from `national_prefix` (if any)\n\t\t\treturn this._nationalPrefixForParsing() || this.nationalPrefix();\n\t\t}\n\t}, {\n\t\tkey: 'nationalPrefixTransformRule',\n\t\tvalue: function nationalPrefixTransformRule() {\n\t\t\treturn this.country_metadata[this.v1 ? 6 : this.v2 ? 7 : 8];\n\t\t}\n\t}, {\n\t\tkey: '_getNationalPrefixIsOptionalWhenFormatting',\n\t\tvalue: function _getNationalPrefixIsOptionalWhenFormatting() {\n\t\t\treturn !!this.country_metadata[this.v1 ? 7 : this.v2 ? 8 : 9];\n\t\t}\n\n\t\t// For countries of the same region (e.g. NANPA)\n\t\t// \"national prefix is optional when formatting\" flag is\n\t\t// stored in the \"main\" country for that region.\n\t\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n\t}, {\n\t\tkey: 'nationalPrefixIsOptionalWhenFormattingInNationalFormat',\n\t\tvalue: function nationalPrefixIsOptionalWhenFormattingInNationalFormat() {\n\t\t\treturn this._getNationalPrefixIsOptionalWhenFormatting(this.country_metadata) || this._getNationalPrefixIsOptionalWhenFormatting(this.getDefaultCountryMetadataForRegion());\n\t\t}\n\t}, {\n\t\tkey: 'leadingDigits',\n\t\tvalue: function leadingDigits() {\n\t\t\treturn this.country_metadata[this.v1 ? 8 : this.v2 ? 9 : 10];\n\t\t}\n\t}, {\n\t\tkey: 'types',\n\t\tvalue: function types() {\n\t\t\treturn this.country_metadata[this.v1 ? 9 : this.v2 ? 10 : 11];\n\t\t}\n\t}, {\n\t\tkey: 'hasTypes',\n\t\tvalue: function hasTypes() {\n\t\t\t// Versions 1.2.0 - 1.2.4: can be `[]`.\n\t\t\t/* istanbul ignore next */\n\t\t\tif (this.types() && this.types().length === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t// Versions <= 1.2.4: can be `undefined`.\n\t\t\t// Version >= 1.2.5: can be `0`.\n\t\t\treturn !!this.types();\n\t\t}\n\t}, {\n\t\tkey: 'type',\n\t\tvalue: function type(_type) {\n\t\t\tif (this.hasTypes() && getType(this.types(), _type)) {\n\t\t\t\treturn new Type(getType(this.types(), _type), this);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'ext',\n\t\tvalue: function ext() {\n\t\t\tif (this.v1 || this.v2) return DEFAULT_EXT_PREFIX;\n\t\t\treturn this.country_metadata[13] || DEFAULT_EXT_PREFIX;\n\t\t}\n\t}, {\n\t\tkey: 'countryCallingCodes',\n\t\tvalue: function countryCallingCodes() {\n\t\t\tif (this.v1) return this.metadata.country_phone_code_to_countries;\n\t\t\treturn this.metadata.country_calling_codes;\n\t\t}\n\n\t\t// Formatting information for regions which share\n\t\t// a country calling code is contained by only one region\n\t\t// for performance reasons. For example, for NANPA region\n\t\t// (\"North American Numbering Plan Administration\",\n\t\t//  which includes USA, Canada, Cayman Islands, Bahamas, etc)\n\t\t// it will be contained in the metadata for `US`.\n\t\t//\n\t\t// `country_calling_code` is always valid.\n\t\t// But the actual country may not necessarily be part of the metadata.\n\t\t//\n\n\t}, {\n\t\tkey: 'chooseCountryByCountryCallingCode',\n\t\tvalue: function chooseCountryByCountryCallingCode(country_calling_code) {\n\t\t\tvar country = this.countryCallingCodes()[country_calling_code][0];\n\t\t\t// Do not want to test this case.\n\t\t\t// (custom metadata, not all countries).\n\t\t\t/* istanbul ignore else */\n\t\t\tif (this.hasCountry(country)) {\n\t\t\t\tthis.country(country);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'selectedCountry',\n\t\tvalue: function selectedCountry() {\n\t\t\treturn this._country;\n\t\t}\n\t}]);\n\n\treturn Metadata;\n}();\n\nexport default Metadata;\n\nvar Format = function () {\n\tfunction Format(format, metadata) {\n\t\t_classCallCheck(this, Format);\n\n\t\tthis._format = format;\n\t\tthis.metadata = metadata;\n\t}\n\n\t_createClass(Format, [{\n\t\tkey: 'pattern',\n\t\tvalue: function pattern() {\n\t\t\treturn this._format[0];\n\t\t}\n\t}, {\n\t\tkey: 'format',\n\t\tvalue: function format() {\n\t\t\treturn this._format[1];\n\t\t}\n\t}, {\n\t\tkey: 'leadingDigitsPatterns',\n\t\tvalue: function leadingDigitsPatterns() {\n\t\t\treturn this._format[2] || [];\n\t\t}\n\t}, {\n\t\tkey: 'nationalPrefixFormattingRule',\n\t\tvalue: function nationalPrefixFormattingRule() {\n\t\t\treturn this._format[3] || this.metadata.nationalPrefixFormattingRule();\n\t\t}\n\t}, {\n\t\tkey: 'nationalPrefixIsOptionalWhenFormattingInNationalFormat',\n\t\tvalue: function nationalPrefixIsOptionalWhenFormattingInNationalFormat() {\n\t\t\treturn !!this._format[4] || this.metadata.nationalPrefixIsOptionalWhenFormattingInNationalFormat();\n\t\t}\n\t}, {\n\t\tkey: 'nationalPrefixIsMandatoryWhenFormattingInNationalFormat',\n\t\tvalue: function nationalPrefixIsMandatoryWhenFormattingInNationalFormat() {\n\t\t\t// National prefix is omitted if there's no national prefix formatting rule\n\t\t\t// set for this country, or when the national prefix formatting rule\n\t\t\t// contains no national prefix itself, or when this rule is set but\n\t\t\t// national prefix is optional for this phone number format\n\t\t\t// (and it is not enforced explicitly)\n\t\t\treturn this.usesNationalPrefix() && !this.nationalPrefixIsOptionalWhenFormattingInNationalFormat();\n\t\t}\n\n\t\t// Checks whether national prefix formatting rule contains national prefix.\n\n\t}, {\n\t\tkey: 'usesNationalPrefix',\n\t\tvalue: function usesNationalPrefix() {\n\t\t\treturn this.nationalPrefixFormattingRule() &&\n\t\t\t// Check that national prefix formatting rule is not a \"dummy\" one.\n\t\t\t!FIRST_GROUP_ONLY_PREFIX_PATTERN.test(this.nationalPrefixFormattingRule());\n\t\t\t// Previously, `FIRST_GROUP_ONLY_PREFIX_PATTERN` check was instead done via:\n\t\t\t// // Check that national prefix formatting rule is not a \"dummy\" one.\n\t\t\t// this.nationalPrefixFormattingRule() !== '$1' &&\n\t\t\t// // Check that national prefix formatting rule actually has national prefix digit(s).\n\t\t\t// // Filters out cases like \"($1)\".\n\t\t\t// // Is used in place of `libphonenumber`'s `FIRST_GROUP_ONLY_PREFIX_PATTERN_` regexp.\n\t\t\t// /\\d/.test(this.nationalPrefixFormattingRule().replace('$1', ''))\n\t\t}\n\t}, {\n\t\tkey: 'internationalFormat',\n\t\tvalue: function internationalFormat() {\n\t\t\treturn this._format[5] || this.format();\n\t\t}\n\t}]);\n\n\treturn Format;\n}();\n\n/**\r\n * A pattern that is used to determine if the national prefix formatting rule\r\n * has the first group only, i.e., does not start with the national prefix.\r\n * Note that the pattern explicitly allows for unbalanced parentheses.\r\n */\n\n\nvar FIRST_GROUP_ONLY_PREFIX_PATTERN = /^\\(?\\$1\\)?$/;\n\nvar Type = function () {\n\tfunction Type(type, metadata) {\n\t\t_classCallCheck(this, Type);\n\n\t\tthis.type = type;\n\t\tthis.metadata = metadata;\n\t}\n\n\t_createClass(Type, [{\n\t\tkey: 'pattern',\n\t\tvalue: function pattern() {\n\t\t\tif (this.metadata.v1) return this.type;\n\t\t\treturn this.type[0];\n\t\t}\n\t}, {\n\t\tkey: 'possibleLengths',\n\t\tvalue: function possibleLengths() {\n\t\t\tif (this.metadata.v1) return;\n\t\t\treturn this.type[1] || this.metadata.possibleLengths();\n\t\t}\n\t}]);\n\n\treturn Type;\n}();\n\nfunction getType(types, type) {\n\tswitch (type) {\n\t\tcase 'FIXED_LINE':\n\t\t\treturn types[0];\n\t\tcase 'MOBILE':\n\t\t\treturn types[1];\n\t\tcase 'TOLL_FREE':\n\t\t\treturn types[2];\n\t\tcase 'PREMIUM_RATE':\n\t\t\treturn types[3];\n\t\tcase 'PERSONAL_NUMBER':\n\t\t\treturn types[4];\n\t\tcase 'VOICEMAIL':\n\t\t\treturn types[5];\n\t\tcase 'UAN':\n\t\t\treturn types[6];\n\t\tcase 'PAGER':\n\t\t\treturn types[7];\n\t\tcase 'VOIP':\n\t\t\treturn types[8];\n\t\tcase 'SHARED_COST':\n\t\t\treturn types[9];\n\t}\n}\n\nexport function validateMetadata(metadata) {\n\tif (!metadata) {\n\t\tthrow new Error('[libphonenumber-js] `metadata` argument not passed. Check your arguments.');\n\t}\n\n\t// `country_phone_code_to_countries` was renamed to\n\t// `country_calling_codes` in `1.0.18`.\n\tif (!is_object(metadata) || !is_object(metadata.countries) || !is_object(metadata.country_calling_codes) && !is_object(metadata.country_phone_code_to_countries)) {\n\t\tthrow new Error('[libphonenumber-js] `metadata` argument was passed but it\\'s not a valid metadata. Must be an object having `.countries` and `.country_calling_codes` child object properties. Got ' + (is_object(metadata) ? 'an object of shape: { ' + Object.keys(metadata).join(', ') + ' }' : 'a ' + type_of(metadata) + ': ' + metadata) + '.');\n\t}\n}\n\n// Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n/* istanbul ignore next */\nvar is_object = function is_object(_) {\n\treturn (typeof _ === 'undefined' ? 'undefined' : _typeof(_)) === 'object';\n};\n\n// Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n/* istanbul ignore next */\nvar type_of = function type_of(_) {\n\treturn typeof _ === 'undefined' ? 'undefined' : _typeof(_);\n};\n\n/**\r\n * Returns extension prefix for a country.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string?}\r\n * @example\r\n * // Returns \" ext. \"\r\n * getExtPrefix(\"US\")\r\n */\nexport function getExtPrefix(country, metadata) {\n\tmetadata = new Metadata(metadata);\n\tif (metadata.hasCountry(country)) {\n\t\treturn metadata.country(country).ext();\n\t}\n\treturn DEFAULT_EXT_PREFIX;\n}\n\n/**\r\n * Returns \"country calling code\" for a country.\r\n * Throws an error if the country doesn't exist or isn't supported by this library.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string}\r\n * @example\r\n * // Returns \"44\"\r\n * getCountryCallingCode(\"GB\")\r\n */\nexport function getCountryCallingCode(country, metadata) {\n\tmetadata = new Metadata(metadata);\n\tif (metadata.hasCountry(country)) {\n\t\treturn metadata.country(country).countryCallingCode();\n\t}\n\tthrow new Error('Unknown country: ' + country);\n}\n\nexport function isSupportedCountry(country, metadata) {\n\t// metadata = new Metadata(metadata)\n\t// return metadata.hasCountry(country)\n\treturn metadata.countries[country] !== undefined;\n}\n//# sourceMappingURL=metadata.js.map","// The minimum length of the national significant number.\nexport var MIN_LENGTH_FOR_NSN = 2;\n\n// The ITU says the maximum length should be 15,\n// but one can find longer numbers in Germany.\nexport var MAX_LENGTH_FOR_NSN = 17;\n\n// The maximum length of the country calling code.\nexport var MAX_LENGTH_COUNTRY_CODE = 3;\n\n// Digits accepted in phone numbers\n// (ascii, fullwidth, arabic-indic, and eastern arabic digits).\nexport var VALID_DIGITS = '0-9\\uFF10-\\uFF19\\u0660-\\u0669\\u06F0-\\u06F9';\n\n// `DASHES` will be right after the opening square bracket of the \"character class\"\nvar DASHES = '-\\u2010-\\u2015\\u2212\\u30FC\\uFF0D';\nvar SLASHES = '\\uFF0F/';\nvar DOTS = '\\uFF0E.';\nexport var WHITESPACE = ' \\xA0\\xAD\\u200B\\u2060\\u3000';\nvar BRACKETS = '()\\uFF08\\uFF09\\uFF3B\\uFF3D\\\\[\\\\]';\n// export const OPENING_BRACKETS = '(\\uFF08\\uFF3B\\\\\\['\nvar TILDES = '~\\u2053\\u223C\\uFF5E';\n\n// Regular expression of acceptable punctuation found in phone numbers. This\n// excludes punctuation found as a leading character only. This consists of dash\n// characters, white space characters, full stops, slashes, square brackets,\n// parentheses and tildes. Full-width variants are also present.\nexport var VALID_PUNCTUATION = '' + DASHES + SLASHES + DOTS + WHITESPACE + BRACKETS + TILDES;\n\nexport var PLUS_CHARS = '+\\uFF0B';\n// const LEADING_PLUS_CHARS_PATTERN = new RegExp('^[' + PLUS_CHARS + ']+')\n//# sourceMappingURL=constants.js.map","// This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\n\nimport { VALID_DIGITS, VALID_PUNCTUATION, PLUS_CHARS, MIN_LENGTH_FOR_NSN, MAX_LENGTH_FOR_NSN, MAX_LENGTH_COUNTRY_CODE } from './constants';\n\nimport { matchesEntirely } from './util';\nimport ParseError from './ParseError';\nimport Metadata from './metadata';\nimport isViablePhoneNumber from './isViablePhoneNumber';\nimport { extractExtension } from './extension';\nimport parseIncompletePhoneNumber from './parseIncompletePhoneNumber';\nimport getCountryCallingCode from './getCountryCallingCode';\nimport getNumberType, { checkNumberLengthForType } from './getNumberType_';\nimport { is_possible_number } from './isPossibleNumber_';\nimport { stripIDDPrefix } from './IDD';\nimport { parseRFC3966 } from './RFC3966';\nimport PhoneNumber from './PhoneNumber';\n\n// We don't allow input strings for parsing to be longer than 250 chars.\n// This prevents malicious input from consuming CPU.\nvar MAX_INPUT_STRING_LENGTH = 250;\n\n// This consists of the plus symbol, digits, and arabic-indic digits.\nvar PHONE_NUMBER_START_PATTERN = new RegExp('[' + PLUS_CHARS + VALID_DIGITS + ']');\n\n// Regular expression of trailing characters that we want to remove.\nvar AFTER_PHONE_NUMBER_END_PATTERN = new RegExp('[^' + VALID_DIGITS + ']+$');\n\n// `options`:\n//  {\n//    country:\n//    {\n//      restrict - (a two-letter country code)\n//                 the phone number must be in this country\n//\n//      default - (a two-letter country code)\n//                default country to use for phone number parsing and validation\n//                (if no country code could be derived from the phone number)\n//    }\n//  }\n//\n// Returns `{ country, number }`\n//\n// Example use cases:\n//\n// ```js\n// parse('8 (800) 555-35-35', 'RU')\n// parse('8 (800) 555-35-35', 'RU', metadata)\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } })\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } }, metadata)\n// parse('+7 800 555 35 35')\n// parse('+7 800 555 35 35', metadata)\n// ```\n//\nexport default function parse(text) {\n\tvar options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\tvar metadata = arguments[2];\n\n\tmetadata = new Metadata(metadata);\n\n\t// Validate `defaultCountry`.\n\tif (options.defaultCountry && !metadata.hasCountry(options.defaultCountry)) {\n\t\tif (options.v2) {\n\t\t\tthrow new ParseError('INVALID_COUNTRY');\n\t\t}\n\t\tthrow new Error('Unknown country: ' + options.defaultCountry);\n\t}\n\n\t// Parse the phone number.\n\n\tvar _parseInput = parseInput(text, options.v2),\n\t    formattedPhoneNumber = _parseInput.number,\n\t    ext = _parseInput.ext;\n\n\t// If the phone number is not viable then return nothing.\n\n\n\tif (!formattedPhoneNumber) {\n\t\tif (options.v2) {\n\t\t\tthrow new ParseError('NOT_A_NUMBER');\n\t\t}\n\t\treturn {};\n\t}\n\n\tvar _parsePhoneNumber = parsePhoneNumber(formattedPhoneNumber, options.defaultCountry, metadata),\n\t    country = _parsePhoneNumber.country,\n\t    nationalNumber = _parsePhoneNumber.nationalNumber,\n\t    countryCallingCode = _parsePhoneNumber.countryCallingCode,\n\t    carrierCode = _parsePhoneNumber.carrierCode;\n\n\tif (!metadata.selectedCountry()) {\n\t\tif (options.v2) {\n\t\t\tthrow new ParseError('INVALID_COUNTRY');\n\t\t}\n\t\treturn {};\n\t}\n\n\t// Validate national (significant) number length.\n\tif (!nationalNumber || nationalNumber.length < MIN_LENGTH_FOR_NSN) {\n\t\t// Won't throw here because the regexp already demands length > 1.\n\t\t/* istanbul ignore if */\n\t\tif (options.v2) {\n\t\t\tthrow new ParseError('TOO_SHORT');\n\t\t}\n\t\t// Google's demo just throws an error in this case.\n\t\treturn {};\n\t}\n\n\t// Validate national (significant) number length.\n\t//\n\t// A sidenote:\n\t//\n\t// They say that sometimes national (significant) numbers\n\t// can be longer than `MAX_LENGTH_FOR_NSN` (e.g. in Germany).\n\t// https://github.com/googlei18n/libphonenumber/blob/7e1748645552da39c4e1ba731e47969d97bdb539/resources/phonenumber.proto#L36\n\t// Such numbers will just be discarded.\n\t//\n\tif (nationalNumber.length > MAX_LENGTH_FOR_NSN) {\n\t\tif (options.v2) {\n\t\t\tthrow new ParseError('TOO_LONG');\n\t\t}\n\t\t// Google's demo just throws an error in this case.\n\t\treturn {};\n\t}\n\n\tif (options.v2) {\n\t\tvar phoneNumber = new PhoneNumber(countryCallingCode, nationalNumber, metadata.metadata);\n\t\tif (country) {\n\t\t\tphoneNumber.country = country;\n\t\t}\n\t\tif (carrierCode) {\n\t\t\tphoneNumber.carrierCode = carrierCode;\n\t\t}\n\t\tif (ext) {\n\t\t\tphoneNumber.ext = ext;\n\t\t}\n\t\treturn phoneNumber;\n\t}\n\n\t// Check if national phone number pattern matches the number.\n\t// National number pattern is different for each country,\n\t// even for those ones which are part of the \"NANPA\" group.\n\tvar valid = country && matchesEntirely(nationalNumber, metadata.nationalNumberPattern()) ? true : false;\n\n\tif (!options.extended) {\n\t\treturn valid ? result(country, nationalNumber, ext) : {};\n\t}\n\n\treturn {\n\t\tcountry: country,\n\t\tcountryCallingCode: countryCallingCode,\n\t\tcarrierCode: carrierCode,\n\t\tvalid: valid,\n\t\tpossible: valid ? true : options.extended === true && metadata.possibleLengths() && is_possible_number(nationalNumber, countryCallingCode !== undefined, metadata),\n\t\tphone: nationalNumber,\n\t\text: ext\n\t};\n}\n\n/**\r\n * Extracts a formatted phone number from text.\r\n * Doesn't guarantee that the extracted phone number\r\n * is a valid phone number (for example, doesn't validate its length).\r\n * @param  {string} text\r\n * @return {string}\r\n * @example\r\n * // Returns \"(213) 373-4253\".\r\n * extractFormattedPhoneNumber(\"Call (213) 373-4253 for assistance.\")\r\n */\nexport function extractFormattedPhoneNumber(text, v2) {\n\tif (!text) {\n\t\treturn;\n\t}\n\tif (text.length > MAX_INPUT_STRING_LENGTH) {\n\t\tif (v2) {\n\t\t\tthrow new ParseError('TOO_LONG');\n\t\t}\n\t\treturn;\n\t}\n\t// Attempt to extract a possible number from the string passed in\n\tvar startsAt = text.search(PHONE_NUMBER_START_PATTERN);\n\tif (startsAt < 0) {\n\t\treturn;\n\t}\n\treturn text\n\t// Trim everything to the left of the phone number\n\t.slice(startsAt)\n\t// Remove trailing non-numerical characters\n\t.replace(AFTER_PHONE_NUMBER_END_PATTERN, '');\n}\n\n/**\r\n * Strips any national prefix (such as 0, 1) present in the number provided.\r\n * \"Carrier codes\" are only used  in Colombia and Brazil,\r\n * and only when dialing within those countries from a mobile phone to a fixed line number.\r\n * Sometimes it won't actually strip national prefix\r\n * and will instead prepend some digits to the `number`:\r\n * for example, when number `2345678` is passed with `VI` country selected,\r\n * it will return `{ number: \"3402345678\" }`, because `340` area code is prepended.\r\n * @param {string} number — National number digits.\r\n * @param {object} metadata — Metadata with country selected.\r\n * @return {object} `{ number, carrierCode }`.\r\n */\nexport function stripNationalPrefixAndCarrierCode(number, metadata) {\n\tif (!number) {\n\t\treturn { number: number };\n\t}\n\n\tif (!metadata.nationalPrefixForParsing()) {\n\t\treturn { number: number };\n\t}\n\n\t// See METADATA.md for the description of\n\t// `national_prefix_for_parsing` and `national_prefix_transform_rule`.\n\n\t// Attempt to parse the first digits as a national prefix.\n\tvar prefixPattern = new RegExp('^(?:' + metadata.nationalPrefixForParsing() + ')');\n\tvar prefixMatch = prefixPattern.exec(number);\n\n\tif (!prefixMatch) {\n\t\treturn { number: number };\n\t}\n\n\tvar nationalSignificantNumber = void 0;\n\tvar carrierCode = void 0;\n\n\t// If a \"capturing group\" didn't match\n\t// then its element in `prefixMatch[]` array will be `undefined`.\n\n\tvar capturedGroupsCount = prefixMatch.length - 1;\n\tif (metadata.nationalPrefixTransformRule() && capturedGroupsCount > 0 && prefixMatch[capturedGroupsCount]) {\n\t\tnationalSignificantNumber = number.replace(prefixPattern, metadata.nationalPrefixTransformRule());\n\t\t// Carrier code is the last captured group,\n\t\t// but only when there's more than one captured group.\n\t\tif (capturedGroupsCount > 1 && prefixMatch[capturedGroupsCount]) {\n\t\t\tcarrierCode = prefixMatch[1];\n\t\t}\n\t}\n\t// If it's a simple-enough case then just\n\t// strip the national prefix from the number.\n\telse {\n\t\t\t// National prefix is the whole substring matched by\n\t\t\t// the `national_prefix_for_parsing` regexp.\n\t\t\tvar nationalPrefix = prefixMatch[0];\n\t\t\tnationalSignificantNumber = number.slice(nationalPrefix.length);\n\t\t\t// Carrier code is the last captured group.\n\t\t\tif (capturedGroupsCount > 0) {\n\t\t\t\tcarrierCode = prefixMatch[1];\n\t\t\t}\n\t\t}\n\n\t// The following is done in `get_country_and_national_number_for_local_number()` instead.\n\t//\n\t// // Verify the parsed national (significant) number for this country\n\t// const national_number_rule = new RegExp(metadata.nationalNumberPattern())\n\t// //\n\t// // If the original number (before stripping national prefix) was viable,\n\t// // and the resultant number is not, then prefer the original phone number.\n\t// // This is because for some countries (e.g. Russia) the same digit could be both\n\t// // a national prefix and a leading digit of a valid national phone number,\n\t// // like `8` is the national prefix for Russia and both\n\t// // `8 800 555 35 35` and `800 555 35 35` are valid numbers.\n\t// if (matchesEntirely(number, national_number_rule) &&\n\t// \t!matchesEntirely(nationalSignificantNumber, national_number_rule)) {\n\t// \treturn number\n\t// }\n\n\t// Return the parsed national (significant) number\n\treturn {\n\t\tnumber: nationalSignificantNumber,\n\t\tcarrierCode: carrierCode\n\t};\n}\n\nexport function findCountryCode(countryCallingCode, nationalPhoneNumber, metadata) {\n\t// Is always non-empty, because `countryCallingCode` is always valid\n\tvar possibleCountries = metadata.countryCallingCodes()[countryCallingCode];\n\t// If there's just one country corresponding to the country code,\n\t// then just return it, without further phone number digits validation.\n\tif (possibleCountries.length === 1) {\n\t\treturn possibleCountries[0];\n\t}\n\treturn _findCountryCode(possibleCountries, nationalPhoneNumber, metadata.metadata);\n}\n\n// Changes `metadata` `country`.\nfunction _findCountryCode(possibleCountries, nationalPhoneNumber, metadata) {\n\tmetadata = new Metadata(metadata);\n\tfor (var _iterator = possibleCountries, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar country = _ref;\n\n\t\tmetadata.country(country);\n\t\t// Leading digits check would be the simplest one\n\t\tif (metadata.leadingDigits()) {\n\t\t\tif (nationalPhoneNumber && nationalPhoneNumber.search(metadata.leadingDigits()) === 0) {\n\t\t\t\treturn country;\n\t\t\t}\n\t\t}\n\t\t// Else perform full validation with all of those\n\t\t// fixed-line/mobile/etc regular expressions.\n\t\telse if (getNumberType({ phone: nationalPhoneNumber, country: country }, undefined, metadata.metadata)) {\n\t\t\t\treturn country;\n\t\t\t}\n\t}\n}\n\n/**\r\n * @param  {string} text - Input.\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\nfunction parseInput(text, v2) {\n\t// Parse RFC 3966 phone number URI.\n\tif (text && text.indexOf('tel:') === 0) {\n\t\treturn parseRFC3966(text);\n\t}\n\tvar number = extractFormattedPhoneNumber(text, v2);\n\t// If the phone number is not viable, then abort.\n\tif (!number || !isViablePhoneNumber(number)) {\n\t\treturn {};\n\t}\n\t// Attempt to parse extension first, since it doesn't require region-specific\n\t// data and we want to have the non-normalised number here.\n\tvar with_extension_stripped = extractExtension(number);\n\tif (with_extension_stripped.ext) {\n\t\treturn with_extension_stripped;\n\t}\n\treturn { number: number };\n}\n\n/**\r\n * Creates `parse()` result object.\r\n */\nfunction result(country, national_number, ext) {\n\tvar result = {\n\t\tcountry: country,\n\t\tphone: national_number\n\t};\n\tif (ext) {\n\t\tresult.ext = ext;\n\t}\n\treturn result;\n}\n\n/**\r\n * Parses a viable phone number.\r\n * @param {string} formattedPhoneNumber\r\n * @param {string} [defaultCountry]\r\n * @param {Metadata} metadata\r\n * @return {object} Returns `{ country: string?, countryCallingCode: string?, nationalNumber: string? }`.\r\n */\nfunction parsePhoneNumber(formattedPhoneNumber, defaultCountry, metadata) {\n\tvar _extractCountryCallin = extractCountryCallingCode(formattedPhoneNumber, defaultCountry, metadata.metadata),\n\t    countryCallingCode = _extractCountryCallin.countryCallingCode,\n\t    number = _extractCountryCallin.number;\n\n\tvar country = void 0;\n\n\tif (countryCallingCode) {\n\t\tmetadata.chooseCountryByCountryCallingCode(countryCallingCode);\n\t}\n\t// If `formattedPhoneNumber` is in \"national\" format\n\t// then `number` is defined and `countryCallingCode` isn't.\n\telse if (number && defaultCountry) {\n\t\t\tmetadata.country(defaultCountry);\n\t\t\tcountry = defaultCountry;\n\t\t\tcountryCallingCode = getCountryCallingCode(defaultCountry, metadata.metadata);\n\t\t} else return {};\n\n\tif (!number) {\n\t\treturn { countryCallingCode: countryCallingCode };\n\t}\n\n\tvar _parseNationalNumber = parseNationalNumber(number, metadata),\n\t    nationalNumber = _parseNationalNumber.nationalNumber,\n\t    carrierCode = _parseNationalNumber.carrierCode;\n\n\t// Sometimes there are several countries\n\t// corresponding to the same country phone code\n\t// (e.g. NANPA countries all having `1` country phone code).\n\t// Therefore, to reliably determine the exact country,\n\t// national (significant) number should have been parsed first.\n\t//\n\t// When `metadata.json` is generated, all \"ambiguous\" country phone codes\n\t// get their countries populated with the full set of\n\t// \"phone number type\" regular expressions.\n\t//\n\n\n\tvar exactCountry = findCountryCode(countryCallingCode, nationalNumber, metadata);\n\tif (exactCountry) {\n\t\tcountry = exactCountry;\n\t\tmetadata.country(country);\n\t}\n\n\treturn {\n\t\tcountry: country,\n\t\tcountryCallingCode: countryCallingCode,\n\t\tnationalNumber: nationalNumber,\n\t\tcarrierCode: carrierCode\n\t};\n}\n\nfunction parseNationalNumber(number, metadata) {\n\tvar nationalNumber = parseIncompletePhoneNumber(number);\n\tvar carrierCode = void 0;\n\n\t// Parsing national prefixes and carrier codes\n\t// is only required for local phone numbers\n\t// but some people don't understand that\n\t// and sometimes write international phone numbers\n\t// with national prefixes (or maybe even carrier codes).\n\t// http://ucken.blogspot.ru/2016/03/trunk-prefixes-in-skype4b.html\n\t// Google's original library forgives such mistakes\n\t// and so does this library, because it has been requested:\n\t// https://github.com/catamphetamine/libphonenumber-js/issues/127\n\n\tvar _stripNationalPrefixA = stripNationalPrefixAndCarrierCode(nationalNumber, metadata),\n\t    potentialNationalNumber = _stripNationalPrefixA.number,\n\t    potentialCarrierCode = _stripNationalPrefixA.carrierCode;\n\n\t// If metadata has \"possible lengths\" then employ the new algorythm.\n\n\n\tif (metadata.possibleLengths()) {\n\t\t// We require that the NSN remaining after stripping the national prefix and\n\t\t// carrier code be long enough to be a possible length for the region.\n\t\t// Otherwise, we don't do the stripping, since the original number could be\n\t\t// a valid short number.\n\t\tswitch (checkNumberLengthForType(potentialNationalNumber, undefined, metadata)) {\n\t\t\tcase 'TOO_SHORT':\n\t\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\n\t\t\tcase 'INVALID_LENGTH':\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tnationalNumber = potentialNationalNumber;\n\t\t\t\tcarrierCode = potentialCarrierCode;\n\t\t}\n\t} else {\n\t\t// If the original number (before stripping national prefix) was viable,\n\t\t// and the resultant number is not, then prefer the original phone number.\n\t\t// This is because for some countries (e.g. Russia) the same digit could be both\n\t\t// a national prefix and a leading digit of a valid national phone number,\n\t\t// like `8` is the national prefix for Russia and both\n\t\t// `8 800 555 35 35` and `800 555 35 35` are valid numbers.\n\t\tif (matchesEntirely(nationalNumber, metadata.nationalNumberPattern()) && !matchesEntirely(potentialNationalNumber, metadata.nationalNumberPattern())) {\n\t\t\t// Keep the number without stripping national prefix.\n\t\t} else {\n\t\t\tnationalNumber = potentialNationalNumber;\n\t\t\tcarrierCode = potentialCarrierCode;\n\t\t}\n\t}\n\n\treturn {\n\t\tnationalNumber: nationalNumber,\n\t\tcarrierCode: carrierCode\n\t};\n}\n\n// Parses a formatted phone number\n// and returns `{ countryCallingCode, number }`\n// where `number` is just the \"number\" part\n// which is left after extracting `countryCallingCode`\n// and is not necessarily a \"national (significant) number\"\n// and might as well contain national prefix.\n//\nexport function extractCountryCallingCode(number, country, metadata) {\n\tnumber = parseIncompletePhoneNumber(number);\n\n\tif (!number) {\n\t\treturn {};\n\t}\n\n\t// If this is not an international phone number,\n\t// then don't extract country phone code.\n\tif (number[0] !== '+') {\n\t\t// Convert an \"out-of-country\" dialing phone number\n\t\t// to a proper international phone number.\n\t\tvar numberWithoutIDD = stripIDDPrefix(number, country, metadata);\n\n\t\t// If an IDD prefix was stripped then\n\t\t// convert the number to international one\n\t\t// for subsequent parsing.\n\t\tif (numberWithoutIDD && numberWithoutIDD !== number) {\n\t\t\tnumber = '+' + numberWithoutIDD;\n\t\t} else {\n\t\t\treturn { number: number };\n\t\t}\n\t}\n\n\t// Fast abortion: country codes do not begin with a '0'\n\tif (number[1] === '0') {\n\t\treturn {};\n\t}\n\n\tmetadata = new Metadata(metadata);\n\n\t// The thing with country phone codes\n\t// is that they are orthogonal to each other\n\t// i.e. there's no such country phone code A\n\t// for which country phone code B exists\n\t// where B starts with A.\n\t// Therefore, while scanning digits,\n\t// if a valid country code is found,\n\t// that means that it is the country code.\n\t//\n\tvar i = 2;\n\twhile (i - 1 <= MAX_LENGTH_COUNTRY_CODE && i <= number.length) {\n\t\tvar countryCallingCode = number.slice(1, i);\n\t\tif (metadata.countryCallingCodes()[countryCallingCode]) {\n\t\t\treturn {\n\t\t\t\tcountryCallingCode: countryCallingCode,\n\t\t\t\tnumber: number.slice(i)\n\t\t\t};\n\t\t}\n\t\ti++;\n\t}\n\n\treturn {};\n}\n//# sourceMappingURL=parse_.js.map","var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nimport parsePhoneNumber_ from './parsePhoneNumber_';\n\nexport default function parsePhoneNumber() {\n\tvar _normalizeArguments = normalizeArguments(arguments),\n\t    text = _normalizeArguments.text,\n\t    options = _normalizeArguments.options,\n\t    metadata = _normalizeArguments.metadata;\n\n\treturn parsePhoneNumber_(text, options, metadata);\n}\n\nexport function normalizeArguments(args) {\n\tvar _Array$prototype$slic = Array.prototype.slice.call(args),\n\t    _Array$prototype$slic2 = _slicedToArray(_Array$prototype$slic, 4),\n\t    arg_1 = _Array$prototype$slic2[0],\n\t    arg_2 = _Array$prototype$slic2[1],\n\t    arg_3 = _Array$prototype$slic2[2],\n\t    arg_4 = _Array$prototype$slic2[3];\n\n\tvar text = void 0;\n\tvar options = void 0;\n\tvar metadata = void 0;\n\n\t// If the phone number is passed as a string.\n\t// `parsePhoneNumber('88005553535', ...)`.\n\tif (typeof arg_1 === 'string') {\n\t\ttext = arg_1;\n\t} else throw new TypeError('A text for parsing must be a string.');\n\n\t// If \"default country\" argument is being passed then move it to `options`.\n\t// `parsePhoneNumber('88005553535', 'RU', [options], metadata)`.\n\tif (!arg_2 || typeof arg_2 === 'string') {\n\t\tif (arg_4) {\n\t\t\toptions = arg_3;\n\t\t\tmetadata = arg_4;\n\t\t} else {\n\t\t\toptions = undefined;\n\t\t\tmetadata = arg_3;\n\t\t}\n\n\t\tif (arg_2) {\n\t\t\toptions = _extends({ defaultCountry: arg_2 }, options);\n\t\t}\n\t}\n\t// `defaultCountry` is not passed.\n\t// Example: `parsePhoneNumber('+78005553535', [options], metadata)`.\n\telse if (isObject(arg_2)) {\n\t\t\tif (arg_3) {\n\t\t\t\toptions = arg_2;\n\t\t\t\tmetadata = arg_3;\n\t\t\t} else {\n\t\t\t\tmetadata = arg_2;\n\t\t\t}\n\t\t} else throw new Error('Invalid second argument: ' + arg_2);\n\n\treturn {\n\t\ttext: text,\n\t\toptions: options,\n\t\tmetadata: metadata\n\t};\n}\n\n// Otherwise istanbul would show this as \"branch not covered\".\n/* istanbul ignore next */\nvar isObject = function isObject(_) {\n\treturn (typeof _ === 'undefined' ? 'undefined' : _typeof(_)) === 'object';\n};\n//# sourceMappingURL=parsePhoneNumber.js.map","import Metadata from './metadata';\nimport { matchesEntirely, mergeArrays } from './util';\n\nvar NON_FIXED_LINE_PHONE_TYPES = ['MOBILE', 'PREMIUM_RATE', 'TOLL_FREE', 'SHARED_COST', 'VOIP', 'PERSONAL_NUMBER', 'PAGER', 'UAN', 'VOICEMAIL'];\n\n// Finds out national phone number type (fixed line, mobile, etc)\nexport default function getNumberType(input) {\n\tvar options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\tvar metadata = arguments[2];\n\n\t// When `parse()` returned `{}`\n\t// meaning that the phone number is not a valid one.\n\tif (!input.country) {\n\t\treturn;\n\t}\n\n\tmetadata = new Metadata(metadata);\n\n\tif (!metadata.hasCountry(input.country)) {\n\t\tthrow new Error('Unknown country: ' + input.country);\n\t}\n\n\tvar nationalNumber = options.v2 ? input.nationalNumber : input.phone;\n\tmetadata.country(input.country);\n\n\t// The following is copy-pasted from the original function:\n\t// https://github.com/googlei18n/libphonenumber/blob/3ea547d4fbaa2d0b67588904dfa5d3f2557c27ff/javascript/i18n/phonenumbers/phonenumberutil.js#L2835\n\n\t// Is this national number even valid for this country\n\tif (!matchesEntirely(nationalNumber, metadata.nationalNumberPattern())) {\n\t\treturn;\n\t}\n\n\t// Is it fixed line number\n\tif (is_of_type(nationalNumber, 'FIXED_LINE', metadata)) {\n\t\t// Because duplicate regular expressions are removed\n\t\t// to reduce metadata size, if \"mobile\" pattern is \"\"\n\t\t// then it means it was removed due to being a duplicate of the fixed-line pattern.\n\t\t//\n\t\tif (metadata.type('MOBILE') && metadata.type('MOBILE').pattern() === '') {\n\t\t\treturn 'FIXED_LINE_OR_MOBILE';\n\t\t}\n\n\t\t// v1 metadata.\n\t\t// Legacy.\n\t\t// Deprecated.\n\t\tif (!metadata.type('MOBILE')) {\n\t\t\treturn 'FIXED_LINE_OR_MOBILE';\n\t\t}\n\n\t\t// Check if the number happens to qualify as both fixed line and mobile.\n\t\t// (no such country in the minimal metadata set)\n\t\t/* istanbul ignore if */\n\t\tif (is_of_type(nationalNumber, 'MOBILE', metadata)) {\n\t\t\treturn 'FIXED_LINE_OR_MOBILE';\n\t\t}\n\n\t\treturn 'FIXED_LINE';\n\t}\n\n\tfor (var _iterator = NON_FIXED_LINE_PHONE_TYPES, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar _type = _ref;\n\n\t\tif (is_of_type(nationalNumber, _type, metadata)) {\n\t\t\treturn _type;\n\t\t}\n\t}\n}\n\nexport function is_of_type(nationalNumber, type, metadata) {\n\ttype = metadata.type(type);\n\n\tif (!type || !type.pattern()) {\n\t\treturn false;\n\t}\n\n\t// Check if any possible number lengths are present;\n\t// if so, we use them to avoid checking\n\t// the validation pattern if they don't match.\n\t// If they are absent, this means they match\n\t// the general description, which we have\n\t// already checked before a specific number type.\n\tif (type.possibleLengths() && type.possibleLengths().indexOf(nationalNumber.length) < 0) {\n\t\treturn false;\n\t}\n\n\treturn matchesEntirely(nationalNumber, type.pattern());\n}\n\n// Should only be called for the \"new\" metadata which has \"possible lengths\".\nexport function checkNumberLengthForType(nationalNumber, type, metadata) {\n\tvar type_info = metadata.type(type);\n\n\t// There should always be \"<possiblePengths/>\" set for every type element.\n\t// This is declared in the XML schema.\n\t// For size efficiency, where a sub-description (e.g. fixed-line)\n\t// has the same \"<possiblePengths/>\" as the \"general description\", this is missing,\n\t// so we fall back to the \"general description\". Where no numbers of the type\n\t// exist at all, there is one possible length (-1) which is guaranteed\n\t// not to match the length of any real phone number.\n\tvar possible_lengths = type_info && type_info.possibleLengths() || metadata.possibleLengths();\n\t// let local_lengths    = type_info && type.possibleLengthsLocal() || metadata.possibleLengthsLocal()\n\n\tif (type === 'FIXED_LINE_OR_MOBILE') {\n\t\t// No such country in metadata.\n\t\t/* istanbul ignore next */\n\t\tif (!metadata.type('FIXED_LINE')) {\n\t\t\t// The rare case has been encountered where no fixedLine data is available\n\t\t\t// (true for some non-geographical entities), so we just check mobile.\n\t\t\treturn checkNumberLengthForType(nationalNumber, 'MOBILE', metadata);\n\t\t}\n\n\t\tvar mobile_type = metadata.type('MOBILE');\n\n\t\tif (mobile_type) {\n\t\t\t// Merge the mobile data in if there was any. \"Concat\" creates a new\n\t\t\t// array, it doesn't edit possible_lengths in place, so we don't need a copy.\n\t\t\t// Note that when adding the possible lengths from mobile, we have\n\t\t\t// to again check they aren't empty since if they are this indicates\n\t\t\t// they are the same as the general desc and should be obtained from there.\n\t\t\tpossible_lengths = mergeArrays(possible_lengths, mobile_type.possibleLengths());\n\t\t\t// The current list is sorted; we need to merge in the new list and\n\t\t\t// re-sort (duplicates are okay). Sorting isn't so expensive because\n\t\t\t// the lists are very small.\n\n\t\t\t// if (local_lengths)\n\t\t\t// {\n\t\t\t// \tlocal_lengths = mergeArrays(local_lengths, mobile_type.possibleLengthsLocal())\n\t\t\t// }\n\t\t\t// else\n\t\t\t// {\n\t\t\t// \tlocal_lengths = mobile_type.possibleLengthsLocal()\n\t\t\t// }\n\t\t}\n\t}\n\t// If the type doesn't exist then return 'INVALID_LENGTH'.\n\telse if (type && !type_info) {\n\t\t\treturn 'INVALID_LENGTH';\n\t\t}\n\n\tvar actual_length = nationalNumber.length;\n\n\t// In `libphonenumber-js` all \"local-only\" formats are dropped for simplicity.\n\t// // This is safe because there is never an overlap beween the possible lengths\n\t// // and the local-only lengths; this is checked at build time.\n\t// if (local_lengths && local_lengths.indexOf(nationalNumber.length) >= 0)\n\t// {\n\t// \treturn 'IS_POSSIBLE_LOCAL_ONLY'\n\t// }\n\n\tvar minimum_length = possible_lengths[0];\n\n\tif (minimum_length === actual_length) {\n\t\treturn 'IS_POSSIBLE';\n\t}\n\n\tif (minimum_length > actual_length) {\n\t\treturn 'TOO_SHORT';\n\t}\n\n\tif (possible_lengths[possible_lengths.length - 1] < actual_length) {\n\t\treturn 'TOO_LONG';\n\t}\n\n\t// We skip the first element since we've already checked it.\n\treturn possible_lengths.indexOf(actual_length, 1) >= 0 ? 'IS_POSSIBLE' : 'INVALID_LENGTH';\n}\n//# sourceMappingURL=getNumberType_.js.map","// Checks whether the entire input sequence can be matched\n// against the regular expression.\nexport function matchesEntirely() {\n\tvar text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\tvar regular_expression = arguments[1];\n\n\treturn new RegExp('^(?:' + regular_expression + ')$').test(text);\n}\n\n/**\r\n * Merges two arrays.\r\n * @param  {*} a\r\n * @param  {*} b\r\n * @return {*}\r\n */\nexport function mergeArrays(a, b) {\n\tvar merged = a.slice();\n\n\tfor (var _iterator = b, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar element = _ref;\n\n\t\tif (a.indexOf(element) < 0) {\n\t\t\tmerged.push(element);\n\t\t}\n\t}\n\n\treturn merged.sort(function (a, b) {\n\t\treturn a - b;\n\t});\n\n\t// ES6 version, requires Set polyfill.\n\t// let merged = new Set(a)\n\t// for (const element of b)\n\t// {\n\t// \tmerged.add(i)\n\t// }\n\t// return Array.from(merged).sort((a, b) => a - b)\n}\n//# sourceMappingURL=util.js.map","/** Returns a regular expression quantifier with an upper and lower limit. */\nexport function limit(lower, upper) {\n\tif (lower < 0 || upper <= 0 || upper < lower) {\n\t\tthrow new TypeError();\n\t}\n\treturn \"{\" + lower + \",\" + upper + \"}\";\n}\n\n/**\r\n * Trims away any characters after the first match of {@code pattern} in {@code candidate},\r\n * returning the trimmed version.\r\n */\nexport function trimAfterFirstMatch(regexp, string) {\n\tvar index = string.search(regexp);\n\n\tif (index >= 0) {\n\t\treturn string.slice(0, index);\n\t}\n\n\treturn string;\n}\n\nexport function startsWith(string, substring) {\n\treturn string.indexOf(substring) === 0;\n}\n\nexport function endsWith(string, substring) {\n\treturn string.indexOf(substring, string.length - substring.length) === string.length - substring.length;\n}\n//# sourceMappingURL=util.js.map","import Metadata from './metadata';\nimport { matchesEntirely } from './util';\nimport getNumberType from './getNumberType_';\n\n/**\r\n * Checks if a given phone number is valid.\r\n *\r\n * If the `number` is a string, it will be parsed to an object,\r\n * but only if it contains only valid phone number characters (including punctuation).\r\n * If the `number` is an object, it is used as is.\r\n *\r\n * The optional `defaultCountry` argument is the default country.\r\n * I.e. it does not restrict to just that country,\r\n * e.g. in those cases where several countries share\r\n * the same phone numbering rules (NANPA, Britain, etc).\r\n * For example, even though the number `07624 369230`\r\n * belongs to the Isle of Man (\"IM\" country code)\r\n * calling `isValidNumber('07624369230', 'GB', metadata)`\r\n * still returns `true` because the country is not restricted to `GB`,\r\n * it's just that `GB` is the default one for the phone numbering rules.\r\n * For restricting the country see `isValidNumberForRegion()`\r\n * though restricting a country might not be a good idea.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\r\n *\r\n * Examples:\r\n *\r\n * ```js\r\n * isValidNumber('+78005553535', metadata)\r\n * isValidNumber('8005553535', 'RU', metadata)\r\n * isValidNumber('88005553535', 'RU', metadata)\r\n * isValidNumber({ phone: '8005553535', country: 'RU' }, metadata)\r\n * ```\r\n */\nexport default function isValidNumber(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var metadata = arguments[2];\n\n  metadata = new Metadata(metadata);\n\n  // This is just to support `isValidNumber({})`\n  // for cases when `parseNumber()` returns `{}`.\n  if (!input.country) {\n    return false;\n  }\n\n  if (!metadata.hasCountry(input.country)) {\n    throw new Error('Unknown country: ' + input.country);\n  }\n\n  metadata.country(input.country);\n\n  // By default, countries only have type regexps when it's required for\n  // distinguishing different countries having the same `countryCallingCode`.\n  if (metadata.hasTypes()) {\n    return getNumberType(input, options, metadata.metadata) !== undefined;\n  }\n\n  // If there are no type regexps for this country in metadata then use\n  // `nationalNumberPattern` as a \"better than nothing\" replacement.\n  var national_number = options.v2 ? input.nationalNumber : input.phone;\n  return matchesEntirely(national_number, metadata.nationalNumberPattern());\n}\n//# sourceMappingURL=validate_.js.map","var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport Metadata from './metadata';\nimport isPossibleNumber from './isPossibleNumber_';\nimport isValidNumber from './validate_';\nimport isValidNumberForRegion from './isValidNumberForRegion_';\nimport getNumberType from './getNumberType_';\nimport formatNumber from './format_';\n\nvar PhoneNumber = function () {\n\tfunction PhoneNumber(countryCallingCode, nationalNumber, metadata) {\n\t\t_classCallCheck(this, PhoneNumber);\n\n\t\tif (!countryCallingCode) {\n\t\t\tthrow new TypeError('`countryCallingCode` not passed');\n\t\t}\n\t\tif (!nationalNumber) {\n\t\t\tthrow new TypeError('`nationalNumber` not passed');\n\t\t}\n\t\t// If country code is passed then derive `countryCallingCode` from it.\n\t\t// Also store the country code as `.country`.\n\t\tif (isCountryCode(countryCallingCode)) {\n\t\t\tthis.country = countryCallingCode;\n\t\t\tvar _metadata = new Metadata(metadata);\n\t\t\t_metadata.country(countryCallingCode);\n\t\t\tcountryCallingCode = _metadata.countryCallingCode();\n\t\t}\n\t\tthis.countryCallingCode = countryCallingCode;\n\t\tthis.nationalNumber = nationalNumber;\n\t\tthis.number = '+' + this.countryCallingCode + this.nationalNumber;\n\t\tthis.metadata = metadata;\n\t}\n\n\t_createClass(PhoneNumber, [{\n\t\tkey: 'isPossible',\n\t\tvalue: function isPossible() {\n\t\t\treturn isPossibleNumber(this, { v2: true }, this.metadata);\n\t\t}\n\t}, {\n\t\tkey: 'isValid',\n\t\tvalue: function isValid() {\n\t\t\treturn isValidNumber(this, { v2: true }, this.metadata);\n\t\t}\n\n\t\t// // Is just an alias for `this.isValid() && this.country === country`.\n\t\t// // https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\n\t\t// isValidForRegion(country) {\n\t\t// \treturn isValidNumberForRegion(this, country, { v2: true }, this.metadata)\n\t\t// }\n\n\t}, {\n\t\tkey: 'getType',\n\t\tvalue: function getType() {\n\t\t\treturn getNumberType(this, { v2: true }, this.metadata);\n\t\t}\n\t}, {\n\t\tkey: 'format',\n\t\tvalue: function format(_format, options) {\n\t\t\treturn formatNumber(this, _format, options ? _extends({}, options, { v2: true }) : { v2: true }, this.metadata);\n\t\t}\n\t}, {\n\t\tkey: 'formatNational',\n\t\tvalue: function formatNational(options) {\n\t\t\treturn this.format('NATIONAL', options);\n\t\t}\n\t}, {\n\t\tkey: 'formatInternational',\n\t\tvalue: function formatInternational(options) {\n\t\t\treturn this.format('INTERNATIONAL', options);\n\t\t}\n\t}, {\n\t\tkey: 'getURI',\n\t\tvalue: function getURI(options) {\n\t\t\treturn this.format('RFC3966', options);\n\t\t}\n\t}]);\n\n\treturn PhoneNumber;\n}();\n\nexport default PhoneNumber;\n\n\nvar isCountryCode = function isCountryCode(value) {\n\treturn (/^[A-Z]{2}$/.test(value)\n\t);\n};\n//# sourceMappingURL=PhoneNumber.js.map","import { VALID_DIGITS } from './constants';\n\n// The RFC 3966 format for extensions.\nvar RFC3966_EXTN_PREFIX = ';ext=';\n\n// Pattern to capture digits used in an extension.\n// Places a maximum length of '7' for an extension.\nvar CAPTURING_EXTN_DIGITS = '([' + VALID_DIGITS + ']{1,7})';\n\n/**\r\n * Regexp of all possible ways to write extensions, for use when parsing. This\r\n * will be run as a case-insensitive regexp match. Wide character versions are\r\n * also provided after each ASCII version. There are three regular expressions\r\n * here. The first covers RFC 3966 format, where the extension is added using\r\n * ';ext='. The second more generic one starts with optional white space and\r\n * ends with an optional full stop (.), followed by zero or more spaces/tabs\r\n * /commas and then the numbers themselves. The other one covers the special\r\n * case of American numbers where the extension is written with a hash at the\r\n * end, such as '- 503#'. Note that the only capturing groups should be around\r\n * the digits that you want to capture as part of the extension, or else parsing\r\n * will fail! We allow two options for representing the accented o - the\r\n * character itself, and one in the unicode decomposed form with the combining\r\n * acute accent.\r\n */\nfunction create_extension_pattern(purpose) {\n\t// One-character symbols that can be used to indicate an extension.\n\tvar single_extension_characters = 'x\\uFF58#\\uFF03~\\uFF5E';\n\n\tswitch (purpose) {\n\t\t// For parsing, we are slightly more lenient in our interpretation than for matching. Here we\n\t\t// allow \"comma\" and \"semicolon\" as possible extension indicators. When matching, these are\n\t\tcase 'parsing':\n\t\t\tsingle_extension_characters = ',;' + single_extension_characters;\n\t}\n\n\treturn RFC3966_EXTN_PREFIX + CAPTURING_EXTN_DIGITS + '|' + '[ \\xA0\\\\t,]*' + '(?:e?xt(?:ensi(?:o\\u0301?|\\xF3))?n?|\\uFF45?\\uFF58\\uFF54\\uFF4E?|' +\n\t// \"доб.\"\n\t'\\u0434\\u043E\\u0431|' + '[' + single_extension_characters + ']|int|anexo|\\uFF49\\uFF4E\\uFF54)' + '[:\\\\.\\uFF0E]?[ \\xA0\\\\t,-]*' + CAPTURING_EXTN_DIGITS + '#?|' + '[- ]+([' + VALID_DIGITS + ']{1,5})#';\n}\n\n/**\r\n * Regexp of all possible ways to write extensions, for use when parsing. This\r\n * will be run as a case-insensitive regexp match. Wide character versions are\r\n * also provided after each ASCII version. There are three regular expressions\r\n * here. The first covers RFC 3966 format, where the extension is added using\r\n * ';ext='. The second more generic one starts with optional white space and\r\n * ends with an optional full stop (.), followed by zero or more spaces/tabs\r\n * /commas and then the numbers themselves. The other one covers the special\r\n * case of American numbers where the extension is written with a hash at the\r\n * end, such as '- 503#'. Note that the only capturing groups should be around\r\n * the digits that you want to capture as part of the extension, or else parsing\r\n * will fail! We allow two options for representing the accented o - the\r\n * character itself, and one in the unicode decomposed form with the combining\r\n * acute accent.\r\n */\nexport var EXTN_PATTERNS_FOR_PARSING = create_extension_pattern('parsing');\n\nexport var EXTN_PATTERNS_FOR_MATCHING = create_extension_pattern('matching');\n\n// Regexp of all known extension prefixes used by different regions followed by\n// 1 or more valid digits, for use when parsing.\nvar EXTN_PATTERN = new RegExp('(?:' + EXTN_PATTERNS_FOR_PARSING + ')$', 'i');\n\n// Strips any extension (as in, the part of the number dialled after the call is\n// connected, usually indicated with extn, ext, x or similar) from the end of\n// the number, and returns it.\nexport function extractExtension(number) {\n\tvar start = number.search(EXTN_PATTERN);\n\tif (start < 0) {\n\t\treturn {};\n\t}\n\n\t// If we find a potential extension, and the number preceding this is a viable\n\t// number, we assume it is an extension.\n\tvar number_without_extension = number.slice(0, start);\n\n\tvar matches = number.match(EXTN_PATTERN);\n\tvar i = 1;\n\twhile (i < matches.length) {\n\t\tif (matches[i] != null && matches[i].length > 0) {\n\t\t\treturn {\n\t\t\t\tnumber: number_without_extension,\n\t\t\t\text: matches[i]\n\t\t\t};\n\t\t}\n\t\ti++;\n\t}\n}\n//# sourceMappingURL=extension.js.map","import { MIN_LENGTH_FOR_NSN, VALID_DIGITS, VALID_PUNCTUATION, PLUS_CHARS } from './constants';\n\nimport { EXTN_PATTERNS_FOR_PARSING } from './extension';\n\n//  Regular expression of viable phone numbers. This is location independent.\n//  Checks we have at least three leading digits, and only valid punctuation,\n//  alpha characters and digits in the phone number. Does not include extension\n//  data. The symbol 'x' is allowed here as valid punctuation since it is often\n//  used as a placeholder for carrier codes, for example in Brazilian phone\n//  numbers. We also allow multiple '+' characters at the start.\n//\n//  Corresponds to the following:\n//  [digits]{minLengthNsn}|\n//  plus_sign*\n//  (([punctuation]|[star])*[digits]){3,}([punctuation]|[star]|[digits]|[alpha])*\n//\n//  The first reg-ex is to allow short numbers (two digits long) to be parsed if\n//  they are entered as \"15\" etc, but only if there is no punctuation in them.\n//  The second expression restricts the number of digits to three or more, but\n//  then allows them to be in international form, and to have alpha-characters\n//  and punctuation. We split up the two reg-exes here and combine them when\n//  creating the reg-ex VALID_PHONE_NUMBER_PATTERN itself so we can prefix it\n//  with ^ and append $ to each branch.\n//\n//  \"Note VALID_PUNCTUATION starts with a -,\n//   so must be the first in the range\" (c) Google devs.\n//  (wtf did they mean by saying that; probably nothing)\n//\nvar MIN_LENGTH_PHONE_NUMBER_PATTERN = '[' + VALID_DIGITS + ']{' + MIN_LENGTH_FOR_NSN + '}';\n//\n// And this is the second reg-exp:\n// (see MIN_LENGTH_PHONE_NUMBER_PATTERN for a full description of this reg-exp)\n//\nvar VALID_PHONE_NUMBER = '[' + PLUS_CHARS + ']{0,1}' + '(?:' + '[' + VALID_PUNCTUATION + ']*' + '[' + VALID_DIGITS + ']' + '){3,}' + '[' + VALID_PUNCTUATION + VALID_DIGITS + ']*';\n\n// The combined regular expression for valid phone numbers:\n//\nvar VALID_PHONE_NUMBER_PATTERN = new RegExp(\n// Either a short two-digit-only phone number\n'^' + MIN_LENGTH_PHONE_NUMBER_PATTERN + '$' + '|' +\n// Or a longer fully parsed phone number (min 3 characters)\n'^' + VALID_PHONE_NUMBER +\n// Phone number extensions\n'(?:' + EXTN_PATTERNS_FOR_PARSING + ')?' + '$', 'i');\n\n// Checks to see if the string of characters could possibly be a phone number at\n// all. At the moment, checks to see that the string begins with at least 2\n// digits, ignoring any punctuation commonly found in phone numbers. This method\n// does not require the number to be normalized in advance - but does assume\n// that leading non-number symbols have been removed, such as by the method\n// `extract_possible_number`.\n//\nexport default function isViablePhoneNumber(number) {\n\treturn number.length >= MIN_LENGTH_FOR_NSN && VALID_PHONE_NUMBER_PATTERN.test(number);\n}\n//# sourceMappingURL=isViablePhoneNumber.js.map","// These mappings map a character (key) to a specific digit that should\n// replace it for normalization purposes. Non-European digits that\n// may be used in phone numbers are mapped to a European equivalent.\n//\n// E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\n//\nexport var DIGITS = {\n\t'0': '0',\n\t'1': '1',\n\t'2': '2',\n\t'3': '3',\n\t'4': '4',\n\t'5': '5',\n\t'6': '6',\n\t'7': '7',\n\t'8': '8',\n\t'9': '9',\n\t'\\uFF10': '0', // Fullwidth digit 0\n\t'\\uFF11': '1', // Fullwidth digit 1\n\t'\\uFF12': '2', // Fullwidth digit 2\n\t'\\uFF13': '3', // Fullwidth digit 3\n\t'\\uFF14': '4', // Fullwidth digit 4\n\t'\\uFF15': '5', // Fullwidth digit 5\n\t'\\uFF16': '6', // Fullwidth digit 6\n\t'\\uFF17': '7', // Fullwidth digit 7\n\t'\\uFF18': '8', // Fullwidth digit 8\n\t'\\uFF19': '9', // Fullwidth digit 9\n\t'\\u0660': '0', // Arabic-indic digit 0\n\t'\\u0661': '1', // Arabic-indic digit 1\n\t'\\u0662': '2', // Arabic-indic digit 2\n\t'\\u0663': '3', // Arabic-indic digit 3\n\t'\\u0664': '4', // Arabic-indic digit 4\n\t'\\u0665': '5', // Arabic-indic digit 5\n\t'\\u0666': '6', // Arabic-indic digit 6\n\t'\\u0667': '7', // Arabic-indic digit 7\n\t'\\u0668': '8', // Arabic-indic digit 8\n\t'\\u0669': '9', // Arabic-indic digit 9\n\t'\\u06F0': '0', // Eastern-Arabic digit 0\n\t'\\u06F1': '1', // Eastern-Arabic digit 1\n\t'\\u06F2': '2', // Eastern-Arabic digit 2\n\t'\\u06F3': '3', // Eastern-Arabic digit 3\n\t'\\u06F4': '4', // Eastern-Arabic digit 4\n\t'\\u06F5': '5', // Eastern-Arabic digit 5\n\t'\\u06F6': '6', // Eastern-Arabic digit 6\n\t'\\u06F7': '7', // Eastern-Arabic digit 7\n\t'\\u06F8': '8', // Eastern-Arabic digit 8\n\t'\\u06F9': '9' // Eastern-Arabic digit 9\n};\n\nexport function parseDigit(character) {\n\treturn DIGITS[character];\n}\n\n/**\r\n * Parses phone number digits from a string.\r\n * Drops all punctuation leaving only digits.\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * parseDigits('8 (800) 555')\r\n * // Outputs '8800555'.\r\n * ```\r\n */\nexport default function parseDigits(string) {\n\tvar result = '';\n\t// Using `.split('')` here instead of normal `for ... of`\n\t// because the importing application doesn't neccessarily include an ES6 polyfill.\n\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\n\t// (the ones consisting of four bytes) but digits\n\t// (including non-European ones) don't fall into that range\n\t// so such \"exotic\" characters would be discarded anyway.\n\tfor (var _iterator = string.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar character = _ref;\n\n\t\tvar digit = parseDigit(character);\n\t\tif (digit) {\n\t\t\tresult += digit;\n\t\t}\n\t}\n\treturn result;\n}\n//# sourceMappingURL=parseDigits.js.map","var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\r\n * A port of Google's `PhoneNumberMatcher.java`.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberMatcher.java\r\n * Date: 08.03.2018.\r\n */\n\nimport PhoneNumber from './PhoneNumber';\n\nimport { MAX_LENGTH_FOR_NSN, MAX_LENGTH_COUNTRY_CODE, VALID_PUNCTUATION } from './constants';\n\nimport { EXTN_PATTERNS_FOR_MATCHING } from './extension';\n\nimport RegExpCache from './findNumbers/RegExpCache';\n\nimport { limit, trimAfterFirstMatch } from './findNumbers/util';\n\nimport { _pL, _pN, pZ, PZ, pNd } from './findNumbers/utf-8';\n\nimport Leniency from './findNumbers/Leniency';\nimport parsePreCandidate from './findNumbers/parsePreCandidate';\nimport isValidPreCandidate from './findNumbers/isValidPreCandidate';\nimport isValidCandidate, { LEAD_CLASS } from './findNumbers/isValidCandidate';\n\nimport { isSupportedCountry } from './metadata';\n\nimport parseNumber from './parse_';\n\n/**\r\n * Patterns used to extract phone numbers from a larger phone-number-like pattern. These are\r\n * ordered according to specificity. For example, white-space is last since that is frequently\r\n * used in numbers, not just to separate two numbers. We have separate patterns since we don't\r\n * want to break up the phone-number-like text on more than one different kind of symbol at one\r\n * time, although symbols of the same type (e.g. space) can be safely grouped together.\r\n *\r\n * Note that if there is a match, we will always check any text found up to the first match as\r\n * well.\r\n */\nvar INNER_MATCHES = [\n// Breaks on the slash - e.g. \"651-234-2345/332-445-1234\"\n'\\\\/+(.*)/',\n\n// Note that the bracket here is inside the capturing group, since we consider it part of the\n// phone number. Will match a pattern like \"(650) 223 3345 (754) 223 3321\".\n'(\\\\([^(]*)',\n\n// Breaks on a hyphen - e.g. \"12345 - 332-445-1234 is my number.\"\n// We require a space on either side of the hyphen for it to be considered a separator.\n'(?:' + pZ + '-|-' + pZ + ')' + pZ + '*(.+)',\n\n// Various types of wide hyphens. Note we have decided not to enforce a space here, since it's\n// possible that it's supposed to be used to break two numbers without spaces, and we haven't\n// seen many instances of it used within a number.\n'[\\u2012-\\u2015\\uFF0D]' + pZ + '*(.+)',\n\n// Breaks on a full stop - e.g. \"12345. 332-445-1234 is my number.\"\n'\\\\.+' + pZ + '*([^.]+)',\n\n// Breaks on space - e.g. \"3324451234 8002341234\"\npZ + '+(' + PZ + '+)'];\n\n// Limit on the number of leading (plus) characters.\nvar leadLimit = limit(0, 2);\n\n// Limit on the number of consecutive punctuation characters.\nvar punctuationLimit = limit(0, 4);\n\n/* The maximum number of digits allowed in a digit-separated block. As we allow all digits in a\r\n * single block, set high enough to accommodate the entire national number and the international\r\n * country code. */\nvar digitBlockLimit = MAX_LENGTH_FOR_NSN + MAX_LENGTH_COUNTRY_CODE;\n\n// Limit on the number of blocks separated by punctuation.\n// Uses digitBlockLimit since some formats use spaces to separate each digit.\nvar blockLimit = limit(0, digitBlockLimit);\n\n/* A punctuation sequence allowing white space. */\nvar punctuation = '[' + VALID_PUNCTUATION + ']' + punctuationLimit;\n\n// A digits block without punctuation.\nvar digitSequence = pNd + limit(1, digitBlockLimit);\n\n/**\r\n * Phone number pattern allowing optional punctuation.\r\n * The phone number pattern used by `find()`, similar to\r\n * VALID_PHONE_NUMBER, but with the following differences:\r\n * <ul>\r\n *   <li>All captures are limited in order to place an upper bound to the text matched by the\r\n *       pattern.\r\n * <ul>\r\n *   <li>Leading punctuation / plus signs are limited.\r\n *   <li>Consecutive occurrences of punctuation are limited.\r\n *   <li>Number of digits is limited.\r\n * </ul>\r\n *   <li>No whitespace is allowed at the start or end.\r\n *   <li>No alpha digits (vanity numbers such as 1-800-SIX-FLAGS) are currently supported.\r\n * </ul>\r\n */\nvar PATTERN = '(?:' + LEAD_CLASS + punctuation + ')' + leadLimit + digitSequence + '(?:' + punctuation + digitSequence + ')' + blockLimit + '(?:' + EXTN_PATTERNS_FOR_MATCHING + ')?';\n\n// Regular expression of trailing characters that we want to remove.\n// We remove all characters that are not alpha or numerical characters.\n// The hash character is retained here, as it may signify\n// the previous block was an extension.\n//\n// // Don't know what does '&&' mean here.\n// const UNWANTED_END_CHAR_PATTERN = new RegExp(`[[\\\\P{N}&&\\\\P{L}]&&[^#]]+$`)\n//\nvar UNWANTED_END_CHAR_PATTERN = new RegExp('[^' + _pN + _pL + '#]+$');\n\nvar NON_DIGITS_PATTERN = /(\\D+)/;\n\nvar MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1;\n\n/**\r\n * A stateful class that finds and extracts telephone numbers from {@linkplain CharSequence text}.\r\n * Instances can be created using the {@linkplain PhoneNumberUtil#findNumbers factory methods} in\r\n * {@link PhoneNumberUtil}.\r\n *\r\n * <p>Vanity numbers (phone numbers using alphabetic digits such as <tt>1-800-SIX-FLAGS</tt> are\r\n * not found.\r\n *\r\n * <p>This class is not thread-safe.\r\n */\n\nvar PhoneNumberMatcher = function () {\n\n  /**\r\n   * Creates a new instance. See the factory methods in {@link PhoneNumberUtil} on how to obtain a\r\n   * new instance.\r\n   *\r\n   * @param util  the phone number util to use\r\n   * @param text  the character sequence that we will search, null for no text\r\n   * @param country  the country to assume for phone numbers not written in international format\r\n   *     (with a leading plus, or with the international dialing prefix of the specified region).\r\n   *     May be null or \"ZZ\" if only numbers with a leading plus should be\r\n   *     considered.\r\n   * @param leniency  the leniency to use when evaluating candidate phone numbers\r\n   * @param maxTries  the maximum number of invalid numbers to try before giving up on the text.\r\n   *     This is to cover degenerate cases where the text has a lot of false positives in it. Must\r\n   *     be {@code >= 0}.\r\n   */\n\n\n  /** The next index to start searching at. Undefined in {@link State#DONE}. */\n  function PhoneNumberMatcher() {\n    var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var metadata = arguments[2];\n\n    _classCallCheck(this, PhoneNumberMatcher);\n\n    this.state = 'NOT_READY';\n    this.searchIndex = 0;\n    this.regExpCache = new RegExpCache(32);\n\n    options = _extends({}, options, {\n      defaultCountry: options.defaultCountry && isSupportedCountry(options.defaultCountry, metadata) ? options.defaultCountry : undefined,\n      leniency: options.leniency || options.extended ? 'POSSIBLE' : 'VALID',\n      maxTries: options.maxTries || MAX_SAFE_INTEGER\n    });\n\n    if (!options.leniency) {\n      throw new TypeError('`Leniency` not supplied');\n    }\n\n    if (options.maxTries < 0) {\n      throw new TypeError('`maxTries` not supplied');\n    }\n\n    this.text = text;\n    this.options = options;\n    this.metadata = metadata;\n\n    /** The degree of validation requested. */\n    this.leniency = Leniency[options.leniency];\n\n    if (!this.leniency) {\n      throw new TypeError('Unknown leniency: ' + options.leniency + '.');\n    }\n\n    /** The maximum number of retries after matching an invalid number. */\n    this.maxTries = options.maxTries;\n\n    this.PATTERN = new RegExp(PATTERN, 'ig');\n  }\n\n  /**\r\n   * Attempts to find the next subsequence in the searched sequence on or after {@code searchIndex}\r\n   * that represents a phone number. Returns the next match, null if none was found.\r\n   *\r\n   * @param index  the search index to start searching at\r\n   * @return  the phone number match found, null if none can be found\r\n   */\n\n\n  // A cache for frequently used country-specific regular expressions. Set to 32 to cover ~2-3\n  // countries being used for the same doc with ~10 patterns for each country. Some pages will have\n  // a lot more countries in use, but typically fewer numbers for each so expanding the cache for\n  // that use-case won't have a lot of benefit.\n\n  /** The iteration tristate. */\n\n\n  _createClass(PhoneNumberMatcher, [{\n    key: 'find',\n    value: function find() // (index)\n    {\n      // // Reset the regular expression.\n      // this.PATTERN.lastIndex = index\n\n      var matches = void 0;\n      while (this.maxTries > 0 && (matches = this.PATTERN.exec(this.text)) !== null) {\n        var candidate = matches[0];\n        var offset = matches.index;\n\n        candidate = parsePreCandidate(candidate);\n\n        if (isValidPreCandidate(candidate, offset, this.text)) {\n          var match =\n          // Try to come up with a valid match given the entire candidate.\n          this.parseAndVerify(candidate, offset, this.text)\n          // If that failed, try to find an \"inner match\" -\n          // there might be a phone number within this candidate.\n          || this.extractInnerMatch(candidate, offset, this.text);\n\n          if (match) {\n            if (this.options.v2) {\n              var phoneNumber = new PhoneNumber(match.country, match.phone, this.metadata);\n              if (match.ext) {\n                phoneNumber.ext = match.ext;\n              }\n              return {\n                startsAt: match.startsAt,\n                endsAt: match.endsAt,\n                number: phoneNumber\n              };\n            }\n            return match;\n          }\n        }\n\n        this.maxTries--;\n      }\n    }\n\n    /**\r\n     * Attempts to extract a match from `candidate`\r\n     * if the whole candidate does not qualify as a match.\r\n     */\n\n  }, {\n    key: 'extractInnerMatch',\n    value: function extractInnerMatch(candidate, offset, text) {\n      for (var _iterator = INNER_MATCHES, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n        var _ref;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref = _i.value;\n        }\n\n        var innerMatchPattern = _ref;\n\n        var isFirstMatch = true;\n        var matches = void 0;\n        var possibleInnerMatch = new RegExp(innerMatchPattern, 'g');\n        while ((matches = possibleInnerMatch.exec(candidate)) !== null && this.maxTries > 0) {\n          if (isFirstMatch) {\n            // We should handle any group before this one too.\n            var _group = trimAfterFirstMatch(UNWANTED_END_CHAR_PATTERN, candidate.slice(0, matches.index));\n\n            var _match = this.parseAndVerify(_group, offset, text);\n            if (_match) {\n              return _match;\n            }\n\n            this.maxTries--;\n            isFirstMatch = false;\n          }\n\n          var group = trimAfterFirstMatch(UNWANTED_END_CHAR_PATTERN, matches[1]);\n\n          // Java code does `groupMatcher.start(1)` here,\n          // but there's no way in javascript to get a group match start index,\n          // therefore using the overall match start index `matches.index`.\n          var match = this.parseAndVerify(group, offset + matches.index, text);\n          if (match) {\n            return match;\n          }\n\n          this.maxTries--;\n        }\n      }\n    }\n\n    /**\r\n     * Parses a phone number from the `candidate` using `parseNumber` and\r\n     * verifies it matches the requested `leniency`. If parsing and verification succeed,\r\n     * a corresponding `PhoneNumberMatch` is returned, otherwise this method returns `null`.\r\n     *\r\n     * @param candidate  the candidate match\r\n     * @param offset  the offset of {@code candidate} within {@link #text}\r\n     * @return  the parsed and validated phone number match, or null\r\n     */\n\n  }, {\n    key: 'parseAndVerify',\n    value: function parseAndVerify(candidate, offset, text) {\n      if (!isValidCandidate(candidate, offset, text, this.options.leniency)) {\n        return;\n      }\n\n      var number = parseNumber(candidate, {\n        extended: true,\n        defaultCountry: this.options.defaultCountry\n      }, this.metadata);\n\n      if (!number.possible) {\n        return;\n      }\n\n      if (this.leniency(number, candidate, this.metadata, this.regExpCache)) {\n        // // We used parseAndKeepRawInput to create this number,\n        // // but for now we don't return the extra values parsed.\n        // // TODO: stop clearing all values here and switch all users over\n        // // to using rawInput() rather than the rawString() of PhoneNumberMatch.\n        // number.clearCountryCodeSource()\n        // number.clearRawInput()\n        // number.clearPreferredDomesticCarrierCode()\n\n        var result = {\n          startsAt: offset,\n          endsAt: offset + candidate.length,\n          country: number.country,\n          phone: number.phone\n        };\n\n        if (number.ext) {\n          result.ext = number.ext;\n        }\n\n        return result;\n      }\n    }\n  }, {\n    key: 'hasNext',\n    value: function hasNext() {\n      if (this.state === 'NOT_READY') {\n        this.lastMatch = this.find(); // (this.searchIndex)\n\n        if (this.lastMatch) {\n          // this.searchIndex = this.lastMatch.endsAt\n          this.state = 'READY';\n        } else {\n          this.state = 'DONE';\n        }\n      }\n\n      return this.state === 'READY';\n    }\n  }, {\n    key: 'next',\n    value: function next() {\n      // Check the state and find the next match as a side-effect if necessary.\n      if (!this.hasNext()) {\n        throw new Error('No next element');\n      }\n\n      // Don't retain that memory any longer than necessary.\n      var result = this.lastMatch;\n      this.lastMatch = null;\n      this.state = 'NOT_READY';\n      return result;\n    }\n  }]);\n\n  return PhoneNumberMatcher;\n}();\n\nexport default PhoneNumberMatcher;\n//# sourceMappingURL=PhoneNumberMatcher.js.map","var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nimport isViablePhoneNumber from './isViablePhoneNumber';\nimport _getNumberType from './getNumberType_';\nimport parse from './parse_';\n\n// Finds out national phone number type (fixed line, mobile, etc)\nexport default function getNumberType() {\n\tvar _normalizeArguments = normalizeArguments(arguments),\n\t    input = _normalizeArguments.input,\n\t    options = _normalizeArguments.options,\n\t    metadata = _normalizeArguments.metadata;\n\n\treturn _getNumberType(input, options, metadata);\n}\n\n// Sort out arguments\nexport function normalizeArguments(args) {\n\tvar _Array$prototype$slic = Array.prototype.slice.call(args),\n\t    _Array$prototype$slic2 = _slicedToArray(_Array$prototype$slic, 4),\n\t    arg_1 = _Array$prototype$slic2[0],\n\t    arg_2 = _Array$prototype$slic2[1],\n\t    arg_3 = _Array$prototype$slic2[2],\n\t    arg_4 = _Array$prototype$slic2[3];\n\n\tvar input = void 0;\n\tvar options = {};\n\tvar metadata = void 0;\n\n\t// If the phone number is passed as a string.\n\t// `getNumberType('88005553535', ...)`.\n\tif (typeof arg_1 === 'string') {\n\t\t// If \"default country\" argument is being passed\n\t\t// then convert it to an `options` object.\n\t\t// `getNumberType('88005553535', 'RU', metadata)`.\n\t\tif ((typeof arg_2 === 'undefined' ? 'undefined' : _typeof(arg_2)) !== 'object') {\n\t\t\tif (arg_4) {\n\t\t\t\toptions = arg_3;\n\t\t\t\tmetadata = arg_4;\n\t\t\t} else {\n\t\t\t\tmetadata = arg_3;\n\t\t\t}\n\n\t\t\t// `parse` extracts phone numbers from raw text,\n\t\t\t// therefore it will cut off all \"garbage\" characters,\n\t\t\t// while this `validate` function needs to verify\n\t\t\t// that the phone number contains no \"garbage\"\n\t\t\t// therefore the explicit `isViablePhoneNumber` check.\n\t\t\tif (isViablePhoneNumber(arg_1)) {\n\t\t\t\tinput = parse(arg_1, { defaultCountry: arg_2 }, metadata);\n\t\t\t} else {\n\t\t\t\tinput = {};\n\t\t\t}\n\t\t}\n\t\t// No \"resrict country\" argument is being passed.\n\t\t// International phone number is passed.\n\t\t// `getNumberType('+78005553535', metadata)`.\n\t\telse {\n\t\t\t\tif (arg_3) {\n\t\t\t\t\toptions = arg_2;\n\t\t\t\t\tmetadata = arg_3;\n\t\t\t\t} else {\n\t\t\t\t\tmetadata = arg_2;\n\t\t\t\t}\n\n\t\t\t\t// `parse` extracts phone numbers from raw text,\n\t\t\t\t// therefore it will cut off all \"garbage\" characters,\n\t\t\t\t// while this `validate` function needs to verify\n\t\t\t\t// that the phone number contains no \"garbage\"\n\t\t\t\t// therefore the explicit `isViablePhoneNumber` check.\n\t\t\t\tif (isViablePhoneNumber(arg_1)) {\n\t\t\t\t\tinput = parse(arg_1, undefined, metadata);\n\t\t\t\t} else {\n\t\t\t\t\tinput = {};\n\t\t\t\t}\n\t\t\t}\n\t}\n\t// If the phone number is passed as a parsed phone number.\n\t// `getNumberType({ phone: '88005553535', country: 'RU' }, ...)`.\n\telse if (is_object(arg_1)) {\n\t\t\tinput = arg_1;\n\n\t\t\tif (arg_3) {\n\t\t\t\toptions = arg_2;\n\t\t\t\tmetadata = arg_3;\n\t\t\t} else {\n\t\t\t\tmetadata = arg_2;\n\t\t\t}\n\t\t} else throw new TypeError('A phone number must either be a string or an object of shape { phone, [country] }.');\n\n\treturn {\n\t\tinput: input,\n\t\toptions: options,\n\t\tmetadata: metadata\n\t};\n}\n\n// Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n/* istanbul ignore next */\nvar is_object = function is_object(_) {\n\treturn (typeof _ === 'undefined' ? 'undefined' : _typeof(_)) === 'object';\n};\n//# sourceMappingURL=getNumberType.js.map","var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\n// This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\n\nimport { VALID_PUNCTUATION } from './constants';\nimport { matchesEntirely } from './util';\nimport Metadata from './metadata';\nimport { getIDDPrefix } from './IDD';\nimport { formatRFC3966 } from './RFC3966';\n\nvar DEFAULT_OPTIONS = {\n\tformatExtension: function formatExtension(formattedNumber, extension, metadata) {\n\t\treturn '' + formattedNumber + metadata.ext() + extension;\n\t}\n\n\t// Formats a phone number\n\t//\n\t// Example use cases:\n\t//\n\t// ```js\n\t// formatNumber('8005553535', 'RU', 'INTERNATIONAL')\n\t// formatNumber('8005553535', 'RU', 'INTERNATIONAL', metadata)\n\t// formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL')\n\t// formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL', metadata)\n\t// formatNumber('+78005553535', 'NATIONAL')\n\t// formatNumber('+78005553535', 'NATIONAL', metadata)\n\t// ```\n\t//\n};export default function formatNumber(input, format, options, metadata) {\n\t// Apply default options.\n\tif (options) {\n\t\toptions = _extends({}, DEFAULT_OPTIONS, options);\n\t} else {\n\t\toptions = DEFAULT_OPTIONS;\n\t}\n\n\tmetadata = new Metadata(metadata);\n\n\tif (input.country) {\n\t\t// Validate `input.country`.\n\t\tif (!metadata.hasCountry(input.country)) {\n\t\t\tthrow new Error('Unknown country: ' + input.country);\n\t\t}\n\t\tmetadata.country(input.country);\n\t} else if (input.countryCallingCode) {\n\t\tmetadata.chooseCountryByCountryCallingCode(input.countryCallingCode);\n\t} else return input.phone || '';\n\n\tvar countryCallingCode = metadata.countryCallingCode();\n\n\tvar nationalNumber = options.v2 ? input.nationalNumber : input.phone;\n\n\t// This variable should have been declared inside `case`s\n\t// but Babel has a bug and it says \"duplicate variable declaration\".\n\tvar number = void 0;\n\n\tswitch (format) {\n\t\tcase 'NATIONAL':\n\t\t\t// Legacy argument support.\n\t\t\t// (`{ country: ..., phone: '' }`)\n\t\t\tif (!nationalNumber) {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t\tnumber = formatNationalNumber(nationalNumber, 'NATIONAL', metadata, options);\n\t\t\treturn addExtension(number, input.ext, metadata, options.formatExtension);\n\n\t\tcase 'INTERNATIONAL':\n\t\t\t// Legacy argument support.\n\t\t\t// (`{ country: ..., phone: '' }`)\n\t\t\tif (!nationalNumber) {\n\t\t\t\treturn '+' + countryCallingCode;\n\t\t\t}\n\t\t\tnumber = formatNationalNumber(nationalNumber, 'INTERNATIONAL', metadata, options);\n\t\t\tnumber = '+' + countryCallingCode + ' ' + number;\n\t\t\treturn addExtension(number, input.ext, metadata, options.formatExtension);\n\n\t\tcase 'E.164':\n\t\t\t// `E.164` doesn't define \"phone number extensions\".\n\t\t\treturn '+' + countryCallingCode + nationalNumber;\n\n\t\tcase 'RFC3966':\n\t\t\treturn formatRFC3966({\n\t\t\t\tnumber: '+' + countryCallingCode + nationalNumber,\n\t\t\t\text: input.ext\n\t\t\t});\n\n\t\tcase 'IDD':\n\t\t\tif (!options.fromCountry) {\n\t\t\t\treturn;\n\t\t\t\t// throw new Error('`fromCountry` option not passed for IDD-prefixed formatting.')\n\t\t\t}\n\t\t\tvar IDDPrefix = getIDDPrefix(options.fromCountry, metadata.metadata);\n\t\t\tif (!IDDPrefix) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (options.humanReadable) {\n\t\t\t\tvar formattedForSameCountryCallingCode = countryCallingCode && formatIDDSameCountryCallingCodeNumber(nationalNumber, metadata.countryCallingCode(), options.fromCountry, metadata, options);\n\t\t\t\tif (formattedForSameCountryCallingCode) {\n\t\t\t\t\tnumber = formattedForSameCountryCallingCode;\n\t\t\t\t} else {\n\t\t\t\t\tnumber = IDDPrefix + ' ' + countryCallingCode + ' ' + formatNationalNumber(nationalNumber, 'INTERNATIONAL', metadata, options);\n\t\t\t\t}\n\t\t\t\treturn addExtension(number, input.ext, metadata, options.formatExtension);\n\t\t\t}\n\t\t\treturn '' + IDDPrefix + countryCallingCode + nationalNumber;\n\n\t\tdefault:\n\t\t\tthrow new Error('Unknown \"format\" argument passed to \"formatNumber()\": \"' + format + '\"');\n\t}\n}\n\n// This was originally set to $1 but there are some countries for which the\n// first group is not used in the national pattern (e.g. Argentina) so the $1\n// group does not match correctly.  Therefore, we use \\d, so that the first\n// group actually used in the pattern will be matched.\nexport var FIRST_GROUP_PATTERN = /(\\$\\d)/;\n\nexport function formatNationalNumberUsingFormat(number, format, useInternationalSeparator, useNationalPrefixFormattingRule, metadata) {\n\tvar formattedNumber = number.replace(new RegExp(format.pattern()), useInternationalSeparator ? format.internationalFormat() : useNationalPrefixFormattingRule && format.nationalPrefixFormattingRule() ? format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule()) : format.format());\n\tif (useInternationalSeparator) {\n\t\treturn applyInternationalSeparatorStyle(formattedNumber);\n\t}\n\treturn formattedNumber;\n}\n\nfunction formatNationalNumber(number, formatAs, metadata, options) {\n\tvar format = chooseFormatForNumber(metadata.formats(), number);\n\tif (!format) {\n\t\treturn number;\n\t}\n\treturn formatNationalNumberUsingFormat(number, format, formatAs === 'INTERNATIONAL', format.nationalPrefixIsOptionalWhenFormattingInNationalFormat() && options.nationalPrefix === false ? false : true, metadata);\n}\n\nfunction chooseFormatForNumber(availableFormats, nationalNnumber) {\n\tfor (var _iterator = availableFormats, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar format = _ref;\n\n\t\t// Validate leading digits\n\t\tif (format.leadingDigitsPatterns().length > 0) {\n\t\t\t// The last leading_digits_pattern is used here, as it is the most detailed\n\t\t\tvar lastLeadingDigitsPattern = format.leadingDigitsPatterns()[format.leadingDigitsPatterns().length - 1];\n\t\t\t// If leading digits don't match then move on to the next phone number format\n\t\t\tif (nationalNnumber.search(lastLeadingDigitsPattern) !== 0) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\t// Check that the national number matches the phone number format regular expression\n\t\tif (matchesEntirely(nationalNnumber, format.pattern())) {\n\t\t\treturn format;\n\t\t}\n\t}\n}\n\n// Removes brackets and replaces dashes with spaces.\n//\n// E.g. \"(999) 111-22-33\" -> \"999 111 22 33\"\n//\n// For some reason Google's metadata contains `<intlFormat/>`s with brackets and dashes.\n// Meanwhile, there's no single opinion about using punctuation in international phone numbers.\n//\n// For example, Google's `<intlFormat/>` for USA is `+1 213-373-4253`.\n// And here's a quote from WikiPedia's \"North American Numbering Plan\" page:\n// https://en.wikipedia.org/wiki/North_American_Numbering_Plan\n//\n// \"The country calling code for all countries participating in the NANP is 1.\n// In international format, an NANP number should be listed as +1 301 555 01 00,\n// where 301 is an area code (Maryland).\"\n//\n// I personally prefer the international format without any punctuation.\n// For example, brackets are remnants of the old age, meaning that the\n// phone number part in brackets (so called \"area code\") can be omitted\n// if dialing within the same \"area\".\n// And hyphens were clearly introduced for splitting local numbers into memorizable groups.\n// For example, remembering \"5553535\" is difficult but \"555-35-35\" is much simpler.\n// Imagine a man taking a bus from home to work and seeing an ad with a phone number.\n// He has a couple of seconds to memorize that number until it passes by.\n// If it were spaces instead of hyphens the man wouldn't necessarily get it,\n// but with hyphens instead of spaces the grouping is more explicit.\n// I personally think that hyphens introduce visual clutter,\n// so I prefer replacing them with spaces in international numbers.\n// In the modern age all output is done on displays where spaces are clearly distinguishable\n// so hyphens can be safely replaced with spaces without losing any legibility.\n//\nexport function applyInternationalSeparatorStyle(local) {\n\treturn local.replace(new RegExp('[' + VALID_PUNCTUATION + ']+', 'g'), ' ').trim();\n}\n\nfunction addExtension(formattedNumber, ext, metadata, formatExtension) {\n\treturn ext ? formatExtension(formattedNumber, ext, metadata) : formattedNumber;\n}\n\nfunction formatIDDSameCountryCallingCodeNumber(number, toCountryCallingCode, fromCountry, toCountryMetadata, options) {\n\tvar fromCountryMetadata = new Metadata(toCountryMetadata.metadata);\n\tfromCountryMetadata.country(fromCountry);\n\t// If calling within the same country calling code.\n\tif (toCountryCallingCode === fromCountryMetadata.countryCallingCode()) {\n\t\t// For NANPA regions, return the national format for these regions\n\t\t// but prefix it with the country calling code.\n\t\tif (toCountryCallingCode === '1') {\n\t\t\treturn toCountryCallingCode + ' ' + formatNationalNumber(number, 'NATIONAL', toCountryMetadata, options);\n\t\t}\n\t\t// If regions share a country calling code, the country calling code need\n\t\t// not be dialled. This also applies when dialling within a region, so this\n\t\t// if clause covers both these cases. Technically this is the case for\n\t\t// dialling from La Reunion to other overseas departments of France (French\n\t\t// Guiana, Martinique, Guadeloupe), but not vice versa - so we don't cover\n\t\t// this edge case for now and for those cases return the version including\n\t\t// country calling code. Details here:\n\t\t// http://www.petitfute.com/voyage/225-info-pratiques-reunion\n\t\t//\n\t\treturn formatNationalNumber(number, 'NATIONAL', toCountryMetadata, options);\n\t}\n}\n//# sourceMappingURL=format_.js.map","var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nimport isViablePhoneNumber from './isViablePhoneNumber';\n\n// https://www.ietf.org/rfc/rfc3966.txt\n\n/**\r\n * @param  {string} text - Phone URI (RFC 3966).\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\nexport function parseRFC3966(text) {\n\tvar number = void 0;\n\tvar ext = void 0;\n\n\t// Replace \"tel:\" with \"tel=\" for parsing convenience.\n\ttext = text.replace(/^tel:/, 'tel=');\n\n\tfor (var _iterator = text.split(';'), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar part = _ref;\n\n\t\tvar _part$split = part.split('='),\n\t\t    _part$split2 = _slicedToArray(_part$split, 2),\n\t\t    name = _part$split2[0],\n\t\t    value = _part$split2[1];\n\n\t\tswitch (name) {\n\t\t\tcase 'tel':\n\t\t\t\tnumber = value;\n\t\t\t\tbreak;\n\t\t\tcase 'ext':\n\t\t\t\text = value;\n\t\t\t\tbreak;\n\t\t\tcase 'phone-context':\n\t\t\t\t// Only \"country contexts\" are supported.\n\t\t\t\t// \"Domain contexts\" are ignored.\n\t\t\t\tif (value[0] === '+') {\n\t\t\t\t\tnumber = value + number;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t// If the phone number is not viable, then abort.\n\tif (!isViablePhoneNumber(number)) {\n\t\treturn {};\n\t}\n\n\tvar result = { number: number };\n\tif (ext) {\n\t\tresult.ext = ext;\n\t}\n\treturn result;\n}\n\n/**\r\n * @param  {object} - `{ ?number, ?extension }`.\r\n * @return {string} Phone URI (RFC 3966).\r\n */\nexport function formatRFC3966(_ref2) {\n\tvar number = _ref2.number,\n\t    ext = _ref2.ext;\n\n\tif (!number) {\n\t\treturn '';\n\t}\n\n\tif (number[0] !== '+') {\n\t\tthrow new Error('\"formatRFC3966()\" expects \"number\" to be in E.164 format.');\n\t}\n\n\treturn 'tel:' + number + (ext ? ';ext=' + ext : '');\n}\n//# sourceMappingURL=RFC3966.js.map","import Metadata from './metadata';\nimport { checkNumberLengthForType } from './getNumberType_';\n\nexport default function isPossibleNumber(input, options, metadata) {\n\t/* istanbul ignore if */\n\tif (options === undefined) {\n\t\toptions = {};\n\t}\n\n\tmetadata = new Metadata(metadata);\n\n\tif (options.v2) {\n\t\tif (!input.countryCallingCode) {\n\t\t\tthrow new Error('Invalid phone number object passed');\n\t\t}\n\t\tmetadata.chooseCountryByCountryCallingCode(input.countryCallingCode);\n\t} else {\n\t\tif (!input.phone) {\n\t\t\treturn false;\n\t\t}\n\t\tif (input.country) {\n\t\t\tif (!metadata.hasCountry(input.country)) {\n\t\t\t\tthrow new Error('Unknown country: ' + input.country);\n\t\t\t}\n\t\t\tmetadata.country(input.country);\n\t\t} else {\n\t\t\tif (!input.countryCallingCode) {\n\t\t\t\tthrow new Error('Invalid phone number object passed');\n\t\t\t}\n\t\t\tmetadata.chooseCountryByCountryCallingCode(input.countryCallingCode);\n\t\t}\n\t}\n\n\tif (!metadata.possibleLengths()) {\n\t\tthrow new Error('Metadata too old');\n\t}\n\n\treturn is_possible_number(input.phone || input.nationalNumber, undefined, metadata);\n}\n\nexport function is_possible_number(national_number, is_international, metadata) {\n\tswitch (checkNumberLengthForType(national_number, undefined, metadata)) {\n\t\tcase 'IS_POSSIBLE':\n\t\t\treturn true;\n\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\n\t\t// \treturn !is_international\n\t\tdefault:\n\t\t\treturn false;\n\t}\n}\n//# sourceMappingURL=isPossibleNumber_.js.map","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// https://stackoverflow.com/a/46971044/970769\nvar ParseError = function ParseError(code) {\n  _classCallCheck(this, ParseError);\n\n  this.name = this.constructor.name;\n  this.message = code;\n  this.stack = new Error(code).stack;\n};\n\nexport default ParseError;\n\n\nParseError.prototype = Object.create(Error.prototype);\nParseError.prototype.constructor = ParseError;\n//# sourceMappingURL=ParseError.js.map","var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nimport findNumbers from './findNumbers';\n\nexport default function findPhoneNumbersInText(text, defaultCountry, options, metadata) {\n\tvar args = getArguments(defaultCountry, options, metadata);\n\treturn findNumbers(text, args.options, args.metadata);\n}\n\nexport function getArguments(defaultCountry, options, metadata) {\n\tif (metadata) {\n\t\tif (defaultCountry) {\n\t\t\toptions = _extends({}, options, {\n\t\t\t\tdefaultCountry: defaultCountry\n\t\t\t});\n\t\t}\n\t} else {\n\t\tif (options) {\n\t\t\tmetadata = options;\n\t\t\tif (defaultCountry) {\n\t\t\t\tif (is_object(defaultCountry)) {\n\t\t\t\t\toptions = defaultCountry;\n\t\t\t\t} else {\n\t\t\t\t\toptions = { defaultCountry: defaultCountry };\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toptions = undefined;\n\t\t\t}\n\t\t} else {\n\t\t\tmetadata = defaultCountry;\n\t\t\toptions = undefined;\n\t\t}\n\t}\n\treturn {\n\t\toptions: _extends({}, options, {\n\t\t\tv2: true\n\t\t}),\n\t\tmetadata: metadata\n\t};\n}\n\n// Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n/* istanbul ignore next */\nvar is_object = function is_object(_) {\n\treturn (typeof _ === 'undefined' ? 'undefined' : _typeof(_)) === 'object';\n};\n//# sourceMappingURL=findPhoneNumbersInText.js.map","function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { normalizeArguments } from './parsePhoneNumber';\nimport PhoneNumberMatcher from './PhoneNumberMatcher';\n\n/**\r\n * @return ES6 `for ... of` iterator.\r\n */\nexport default function searchNumbers() {\n\tvar _normalizeArguments = normalizeArguments(arguments),\n\t    text = _normalizeArguments.text,\n\t    options = _normalizeArguments.options,\n\t    metadata = _normalizeArguments.metadata;\n\n\tvar matcher = new PhoneNumberMatcher(text, options, metadata);\n\n\treturn _defineProperty({}, Symbol.iterator, function () {\n\t\treturn {\n\t\t\tnext: function next() {\n\t\t\t\tif (matcher.hasNext()) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdone: false,\n\t\t\t\t\t\tvalue: matcher.next()\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\tdone: true\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t});\n}\n//# sourceMappingURL=searchNumbers.js.map","import _findNumbers from './findNumbers_';\nimport { normalizeArguments } from './parsePhoneNumber';\n\nexport default function findNumbers() {\n\tvar _normalizeArguments = normalizeArguments(arguments),\n\t    text = _normalizeArguments.text,\n\t    options = _normalizeArguments.options,\n\t    metadata = _normalizeArguments.metadata;\n\n\treturn _findNumbers(text, options, metadata);\n}\n//# sourceMappingURL=findNumbers.js.map","var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// This is an enhanced port of Google Android `libphonenumber`'s\n// `asyoutypeformatter.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/blob/8d21a365061de2ba0675c878a710a7b24f74d2ae/javascript/i18n/phonenumbers/asyoutypeformatter.js\n//\n// Simplified: does not differentiate between \"local-only\" numbers\n// and \"internationally dialable\" numbers.\n// For example, doesn't include changes like this:\n// https://github.com/googlei18n/libphonenumber/commit/865da605da12b01053c4f053310bac7c5fbb7935\n\nimport Metadata from './metadata';\n\nimport PhoneNumber from './PhoneNumber';\n\nimport { VALID_DIGITS, VALID_PUNCTUATION, PLUS_CHARS } from './constants';\n\nimport { matchesEntirely } from './util';\n\nimport { extractCountryCallingCode as _extractCountryCallingCode, extractFormattedPhoneNumber, findCountryCode, stripNationalPrefixAndCarrierCode } from './parse_';\n\nimport { FIRST_GROUP_PATTERN, formatNationalNumberUsingFormat, applyInternationalSeparatorStyle } from './format_';\n\nimport { checkNumberLengthForType } from './getNumberType_';\n\nimport parseDigits from './parseDigits';\n\n// Used in phone number format template creation.\n// Could be any digit, I guess.\nvar DUMMY_DIGIT = '9';\n// I don't know why is it exactly `15`\nvar LONGEST_NATIONAL_PHONE_NUMBER_LENGTH = 15;\n// Create a phone number consisting only of the digit 9 that matches the\n// `number_pattern` by applying the pattern to the \"longest phone number\" string.\nvar LONGEST_DUMMY_PHONE_NUMBER = repeat(DUMMY_DIGIT, LONGEST_NATIONAL_PHONE_NUMBER_LENGTH);\n\n// The digits that have not been entered yet will be represented by a \\u2008,\n// the punctuation space.\nexport var DIGIT_PLACEHOLDER = 'x'; // '\\u2008' (punctuation space)\nvar DIGIT_PLACEHOLDER_MATCHER = new RegExp(DIGIT_PLACEHOLDER);\n\n// A set of characters that, if found in a national prefix formatting rules, are an indicator to\n// us that we should separate the national prefix from the number when formatting.\nvar NATIONAL_PREFIX_SEPARATORS_PATTERN = /[- ]/;\n\n// Deprecated: Google has removed some formatting pattern related code from their repo.\n// https://github.com/googlei18n/libphonenumber/commit/a395b4fef3caf57c4bc5f082e1152a4d2bd0ba4c\n// \"We no longer have numbers in formatting matching patterns, only \\d.\"\n// Because this library supports generating custom metadata\n// some users may still be using old metadata so the relevant\n// code seems to stay until some next major version update.\nvar SUPPORT_LEGACY_FORMATTING_PATTERNS = true;\n\n// A pattern that is used to match character classes in regular expressions.\n// An example of a character class is \"[1-4]\".\nvar CREATE_CHARACTER_CLASS_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && function () {\n\treturn (/\\[([^\\[\\]])*\\]/g\n\t);\n};\n\n// Any digit in a regular expression that actually denotes a digit. For\n// example, in the regular expression \"80[0-2]\\d{6,10}\", the first 2 digits\n// (8 and 0) are standalone digits, but the rest are not.\n// Two look-aheads are needed because the number following \\\\d could be a\n// two-digit number, since the phone number can be as long as 15 digits.\nvar CREATE_STANDALONE_DIGIT_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && function () {\n\treturn (/\\d(?=[^,}][^,}])/g\n\t);\n};\n\n// A pattern that is used to determine if a `format` is eligible\n// to be used by the \"as you type formatter\".\n// It is eligible when the `format` contains groups of the dollar sign\n// followed by a single digit, separated by valid phone number punctuation.\n// This prevents invalid punctuation (such as the star sign in Israeli star numbers)\n// getting into the output of the \"as you type formatter\".\nvar ELIGIBLE_FORMAT_PATTERN = new RegExp('^' + '[' + VALID_PUNCTUATION + ']*' + '(\\\\$\\\\d[' + VALID_PUNCTUATION + ']*)+' + '$');\n\n// This is the minimum length of the leading digits of a phone number\n// to guarantee the first \"leading digits pattern\" for a phone number format\n// to be preemptive.\nvar MIN_LEADING_DIGITS_LENGTH = 3;\n\nvar VALID_FORMATTED_PHONE_NUMBER_PART = '[' + PLUS_CHARS + ']{0,1}' + '[' + VALID_PUNCTUATION + VALID_DIGITS + ']*';\n\nvar VALID_FORMATTED_PHONE_NUMBER_PART_PATTERN = new RegExp('^' + VALID_FORMATTED_PHONE_NUMBER_PART + '$', 'i');\n\nvar AsYouType = function () {\n\n\t/**\r\n  * @param {string?} [defaultCountry] - The default country used for parsing non-international phone numbers.\r\n  * @param {Object} metadata\r\n  */\n\tfunction AsYouType(defaultCountry, metadata) {\n\t\t_classCallCheck(this, AsYouType);\n\n\t\tthis.options = {};\n\n\t\tthis.metadata = new Metadata(metadata);\n\t\tif (defaultCountry && this.metadata.hasCountry(defaultCountry)) {\n\t\t\tthis.defaultCountry = defaultCountry;\n\t\t}\n\t\tthis.reset();\n\t}\n\t// Not setting `options` to a constructor argument\n\t// not to break backwards compatibility\n\t// for older versions of the library.\n\n\n\t_createClass(AsYouType, [{\n\t\tkey: 'reset',\n\t\tvalue: function reset() {\n\t\t\tthis.formattedOutput = '';\n\t\t\tthis.international = undefined;\n\t\t\tthis.countryCallingCode = undefined;\n\t\t\tthis.digits = '';\n\t\t\tthis.nationalNumberDigits = '';\n\t\t\tthis.nationalPrefix = '';\n\t\t\tthis.carrierCode = '';\n\t\t\tthis.setCountry(this.defaultCountry);\n\t\t\tthis.resetFormat();\n\t\t\treturn this;\n\t\t}\n\t}, {\n\t\tkey: 'setCountry',\n\t\tvalue: function setCountry(country) {\n\t\t\tthis.country = country;\n\t\t\tthis.metadata.country(country);\n\t\t\tif (country) {\n\t\t\t\tthis.initializePhoneNumberFormatsForCountry();\n\t\t\t} else {\n\t\t\t\tthis.matchingFormats = [];\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'resetFormat',\n\t\tvalue: function resetFormat() {\n\t\t\tthis.chosenFormat = undefined;\n\t\t\tthis.template = undefined;\n\t\t\tthis.populatedNationalNumberTemplate = undefined;\n\t\t\tthis.populatedNationalNumberTemplatePosition = -1;\n\t\t}\n\n\t\t/**\r\n   * Inputs \"next\" phone number characters.\r\n   * @param  {string} text\r\n   * @return {string} Formatted phone number characters that have been input so far.\r\n   */\n\n\t}, {\n\t\tkey: 'input',\n\t\tvalue: function input(text) {\n\t\t\tvar formattedDigits = this.extractFormattedDigits(text);\n\t\t\t// If the extracted phone number part\n\t\t\t// can possibly be a part of some valid phone number\n\t\t\t// then parse phone number characters from a formatted phone number.\n\t\t\tif (VALID_FORMATTED_PHONE_NUMBER_PART_PATTERN.test(formattedDigits)) {\n\t\t\t\tthis.formattedOutput = this.getFullNumber(this.inputDigits(parseDigits(formattedDigits)) || this.getNonFormattedNationalNumber());\n\t\t\t}\n\t\t\treturn this.formattedOutput;\n\t\t}\n\n\t\t/**\r\n   * Extracts formatted phone number digits from text (if there're any).\r\n   * @param  {string} text\r\n   * @return {string}\r\n   */\n\n\t}, {\n\t\tkey: 'extractFormattedDigits',\n\t\tvalue: function extractFormattedDigits(text) {\n\t\t\t// Extract a formatted phone number part from text.\n\t\t\tvar extractedNumber = extractFormattedPhoneNumber(text) || '';\n\t\t\t// Special case for a lone '+' sign\n\t\t\t// because it's not extracted in such cases.\n\t\t\tif (!extractedNumber) {\n\t\t\t\tif (text && text.indexOf('+') >= 0) {\n\t\t\t\t\textractedNumber = '+';\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Trim a `+`.\n\t\t\tif (extractedNumber[0] === '+') {\n\t\t\t\t// Trim the `+`.\n\t\t\t\textractedNumber = extractedNumber.slice('+'.length);\n\t\t\t\tif (this.digits) {\n\t\t\t\t\t// If an out of position `+` is detected\n\t\t\t\t\t// (or a second `+`) then just ignore it.\n\t\t\t\t} else {\n\t\t\t\t\tthis.startInternationalNumber();\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn extractedNumber;\n\t\t}\n\t}, {\n\t\tkey: 'startInternationalNumber',\n\t\tvalue: function startInternationalNumber() {\n\t\t\t// Prepend the `+` to parsed input.\n\t\t\tthis.international = true;\n\t\t\t// If a default country was set then reset it\n\t\t\t// because an explicitly international phone\n\t\t\t// number is being entered.\n\t\t\tthis.setCountry();\n\t\t}\n\n\t\t/**\r\n   * Inputs \"next\" phone number digits.\r\n   * @param  {string} digits\r\n   * @return {string} [formattedNumber] Formatted national phone number (if it can be formatted at this stage). Returning `undefined` means \"don't format the national phone number at this stage\".\r\n   */\n\n\t}, {\n\t\tkey: 'inputDigits',\n\t\tvalue: function inputDigits(nextDigits) {\n\t\t\t// Append phone number digits.\n\t\t\tthis.digits += nextDigits;\n\t\t\t// Try to format the parsed input\n\t\t\tif (this.isInternational()) {\n\t\t\t\tif (this.countryCallingCode) {\n\t\t\t\t\tthis.nationalNumberDigits += nextDigits;\n\t\t\t\t\t// `this.country` could be `undefined`, for example, when there is\n\t\t\t\t\t// ambiguity in a form of several different countries,\n\t\t\t\t\t// each corresponding to the same country phone code\n\t\t\t\t\t// (e.g. NANPA: USA, Canada, etc), and there's not enough digits\n\t\t\t\t\t// to reliably determine the country the phone number belongs to.\n\t\t\t\t\t// Therefore, in cases of such ambiguity, each time something is input,\n\t\t\t\t\t// try to determine the country (if it hasn't been determined yet).\n\t\t\t\t\tif (!this.country || this.isCountryCallingCodeAmbiguous()) {\n\t\t\t\t\t\tthis.determineTheCountry();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// Extract country calling code from the digits entered so far.\n\t\t\t\t\t// There must be some digits in order to extract anything from them.\n\t\t\t\t\tif (!this.digits) {\n\t\t\t\t\t\t// Don't format the phone number.\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t// If one looks at country phone codes\n\t\t\t\t\t// then they can notice that no one country phone code\n\t\t\t\t\t// is ever a (leftmost) substring of another country phone code.\n\t\t\t\t\t// So if a valid country code is extracted so far\n\t\t\t\t\t// then it means that this is the country code.\n\t\t\t\t\t//\n\t\t\t\t\t// If no country phone code could be extracted so far,\n\t\t\t\t\t// then don't format the phone number.\n\t\t\t\t\t//\n\t\t\t\t\tif (!this.extractCountryCallingCode()) {\n\t\t\t\t\t\t// Don't format the phone number.\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t// Possibly extract a national prefix.\n\t\t\t\t\t// Some people incorrectly input national prefix\n\t\t\t\t\t// in an international phone number.\n\t\t\t\t\t// For example, some people write British phone numbers as `+44(0)...`.\n\t\t\t\t\t// Also, mobile phone numbers in Mexico are supposed to be dialled\n\t\t\t\t\t// internationally using a `15` national prefix.\n\t\t\t\t\t//\n\t\t\t\t\t// https://www.mexperience.com/dialing-cell-phones-in-mexico/\n\t\t\t\t\t//\n\t\t\t\t\t// \"Dialing a Mexican cell phone from abroad\n\t\t\t\t\t// When you are calling a cell phone number in Mexico from outside Mexico,\n\t\t\t\t\t// it’s necessary to dial an additional “1” after Mexico’s country code\n\t\t\t\t\t// (which is “52”) and before the area code.\n\t\t\t\t\t// You also ignore the 045, and simply dial the area code and the\n\t\t\t\t\t// cell phone’s number.\n\t\t\t\t\t//\n\t\t\t\t\t// If you don’t add the “1”, you’ll receive a recorded announcement\n\t\t\t\t\t// asking you to redial using it.\n\t\t\t\t\t//\n\t\t\t\t\t// For example, if you are calling from the USA to a cell phone\n\t\t\t\t\t// in Mexico City, you would dial +52 – 1 – 55 – 1234 5678.\n\t\t\t\t\t// (Note that this is different to calling a land line in Mexico City\n\t\t\t\t\t// from abroad, where the number dialed would be +52 – 55 – 1234 5678)\".\n\t\t\t\t\t//\n\t\t\t\t\tthis.nationalNumberDigits = this.digits.slice(this.countryCallingCode.length);\n\t\t\t\t\t// this.extractNationalPrefix()\n\t\t\t\t\t//\n\t\t\t\t\t// Determine the country from country calling code and national number.\n\t\t\t\t\tthis.determineTheCountry();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.nationalNumberDigits += nextDigits;\n\t\t\t\t// Some national prefixes are substrings of other national prefixes\n\t\t\t\t// (for the same country), therefore try to extract national prefix each time\n\t\t\t\t// because a longer national prefix might be available at some point in time.\n\t\t\t\tvar previousNationalPrefix = this.nationalPrefix;\n\t\t\t\tthis.nationalNumberDigits = this.nationalPrefix + this.nationalNumberDigits;\n\t\t\t\t// Re-extract national prefix.\n\t\t\t\tthis.extractNationalPrefix();\n\t\t\t\t// If another national prefix has been extracted.\n\t\t\t\tif (this.nationalPrefix !== previousNationalPrefix) {\n\t\t\t\t\t// National number has changed\n\t\t\t\t\t// (due to another national prefix been extracted)\n\t\t\t\t\t// therefore national number has changed\n\t\t\t\t\t// therefore reset all previous formatting data.\n\t\t\t\t\t// (and leading digits matching state)\n\t\t\t\t\tthis.initializePhoneNumberFormatsForCountry();\n\t\t\t\t\tthis.resetFormat();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.nationalNumberDigits) {\n\t\t\t\t// Match the available formats by the currently available leading digits.\n\t\t\t\tthis.matchFormats(this.nationalNumberDigits);\n\t\t\t}\n\n\t\t\t// Format the phone number (given the next digits)\n\t\t\treturn this.formatNationalNumberWithNextDigits(nextDigits);\n\t\t}\n\t}, {\n\t\tkey: 'formatNationalNumberWithNextDigits',\n\t\tvalue: function formatNationalNumberWithNextDigits(nextDigits) {\n\t\t\t// See if the phone number digits can be formatted as a complete phone number.\n\t\t\t// If not, use the results from `formatNextNationalNumberDigits()`,\n\t\t\t// which formats based on the chosen formatting pattern.\n\t\t\t// Attempting to format complete phone number first is how it's done\n\t\t\t// in Google's `libphonenumber`.\n\t\t\tvar formattedNumber = this.attemptToFormatCompletePhoneNumber();\n\n\t\t\t// Just because a phone number doesn't have a suitable format\n\t\t\t// that doesn't mean that the phone number is invalid,\n\t\t\t// because phone number formats only format phone numbers,\n\t\t\t// they don't validate them and some (rare) phone numbers\n\t\t\t// are meant to stay non-formatted.\n\t\t\tif (formattedNumber) {\n\t\t\t\treturn formattedNumber;\n\t\t\t}\n\n\t\t\t// Format the next phone number digits\n\t\t\t// using the previously chosen phone number format.\n\t\t\t//\n\t\t\t// This is done here because if `attemptToFormatCompletePhoneNumber`\n\t\t\t// was placed before this call then the `template`\n\t\t\t// wouldn't reflect the situation correctly (and would therefore be inconsistent)\n\t\t\t//\n\t\t\tvar previouslyChosenFormat = this.chosenFormat;\n\t\t\t// Choose a format from the list of matching ones.\n\t\t\tvar newlyChosenFormat = this.chooseFormat();\n\t\t\tif (newlyChosenFormat) {\n\t\t\t\tif (newlyChosenFormat === previouslyChosenFormat) {\n\t\t\t\t\t// If could format the next (current) digit\n\t\t\t\t\t// using the previously chosen phone number format\n\t\t\t\t\t// then return the formatted number so far.\n\t\t\t\t\t//\n\t\t\t\t\t// If no new phone number format could be chosen,\n\t\t\t\t\t// and couldn't format the supplied national number\n\t\t\t\t\t// using the previously chosen phone number pattern,\n\t\t\t\t\t// then return `undefined`.\n\t\t\t\t\t//\n\t\t\t\t\treturn this.formatNextNationalNumberDigits(nextDigits);\n\t\t\t\t} else {\n\t\t\t\t\t// If a more appropriate phone number format\n\t\t\t\t\t// has been chosen for these \"leading digits\",\n\t\t\t\t\t// then format the national phone number (so far)\n\t\t\t\t\t// using the newly selected format.\n\t\t\t\t\t//\n\t\t\t\t\t// Will return `undefined` if it couldn't format\n\t\t\t\t\t// the supplied national number\n\t\t\t\t\t// using the selected phone number pattern.\n\t\t\t\t\t//\n\t\t\t\t\treturn this.reformatNationalNumber();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'chooseFormat',\n\t\tvalue: function chooseFormat() {\n\t\t\t// When there are multiple available formats, the formatter uses the first\n\t\t\t// format where a formatting template could be created.\n\t\t\tfor (var _iterator = this.matchingFormats, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\t\t\tvar _ref;\n\n\t\t\t\tif (_isArray) {\n\t\t\t\t\tif (_i >= _iterator.length) break;\n\t\t\t\t\t_ref = _iterator[_i++];\n\t\t\t\t} else {\n\t\t\t\t\t_i = _iterator.next();\n\t\t\t\t\tif (_i.done) break;\n\t\t\t\t\t_ref = _i.value;\n\t\t\t\t}\n\n\t\t\t\tvar format = _ref;\n\n\t\t\t\t// If this format is currently being used\n\t\t\t\t// and is still possible, then stick to it.\n\t\t\t\tif (this.chosenFormat === format) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (!this.createFormattingTemplate(format)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthis.chosenFormat = format;\n\t\t\t\t// With a new formatting template, the matched position\n\t\t\t\t// using the old template needs to be reset.\n\t\t\t\tthis.populatedNationalNumberTemplatePosition = -1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (!this.chosenFormat) {\n\t\t\t\t// No format matches the national phone number entered.\n\t\t\t\tthis.resetFormat();\n\t\t\t}\n\t\t\treturn this.chosenFormat;\n\t\t}\n\n\t\t// Formats each digit of the national phone number (so far)\n\t\t// using the selected format.\n\n\t}, {\n\t\tkey: 'reformatNationalNumber',\n\t\tvalue: function reformatNationalNumber() {\n\t\t\treturn this.formatNextNationalNumberDigits(this.nationalPrefix + this.nationalNumberDigits);\n\t\t}\n\t}, {\n\t\tkey: 'initializePhoneNumberFormatsForCountry',\n\t\tvalue: function initializePhoneNumberFormatsForCountry() {\n\t\t\t// Get all \"eligible\" phone number formats for this country\n\t\t\tthis.matchingFormats = this.metadata.formats().filter(function (format) {\n\t\t\t\t// Compared to `libphonenumber`'s code, the two \"Discard a few formats\n\t\t\t\t// that we know are not relevant based on the presence of the national prefix\"\n\t\t\t\t// checks have changed: the first one has been moved to `.matchFormats()`,\n\t\t\t\t// and the second one doesn't apply to this library because it doesn't deal with\n\t\t\t\t// \"incomplete\" phone numbers (for example, phone numbers, entered without \"area code\").\n\t\t\t\treturn ELIGIBLE_FORMAT_PATTERN.test(format.internationalFormat());\n\t\t\t});\n\t\t}\n\t}, {\n\t\tkey: 'matchFormats',\n\t\tvalue: function matchFormats(leadingDigits) {\n\t\t\tvar _this = this;\n\n\t\t\t// \"leading digits\" pattern list starts with a\n\t\t\t// \"leading digits\" pattern fitting a maximum of 3 leading digits.\n\t\t\t// So, after a user inputs 3 digits of a national (significant) phone number\n\t\t\t// this national (significant) number can already be formatted.\n\t\t\t// The next \"leading digits\" pattern is for 4 leading digits max,\n\t\t\t// and the \"leading digits\" pattern after it is for 5 leading digits max, etc.\n\n\t\t\t// This implementation is different from Google's\n\t\t\t// in that it searches for a fitting format\n\t\t\t// even if the user has entered less than\n\t\t\t// `MIN_LEADING_DIGITS_LENGTH` digits of a national number.\n\t\t\t// Because some leading digit patterns already match for a single first digit.\n\t\t\tvar leadingDigitsPatternIndex = leadingDigits.length - MIN_LEADING_DIGITS_LENGTH;\n\t\t\tif (leadingDigitsPatternIndex < 0) {\n\t\t\t\tleadingDigitsPatternIndex = 0;\n\t\t\t}\n\n\t\t\tthis.matchingFormats = this.matchingFormats.filter(function (format) {\n\t\t\t\t// If national prefix is mandatory for this phone number format\n\t\t\t\t// and the user didn't input the national prefix\n\t\t\t\t// then this phone number format isn't suitable.\n\t\t\t\tif (!_this.isInternational() && !_this.nationalPrefix && format.nationalPrefixIsMandatoryWhenFormattingInNationalFormat()) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tvar leadingDigitsPatternsCount = format.leadingDigitsPatterns().length;\n\t\t\t\t// If this format is not restricted to a certain\n\t\t\t\t// leading digits pattern then it fits.\n\t\t\t\tif (leadingDigitsPatternsCount === 0) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\t// Start excluding any non-matching formats only when the\n\t\t\t\t// national number entered so far is at least 3 digits long,\n\t\t\t\t// otherwise format matching would give false negatives.\n\t\t\t\t// For example, when the digits entered so far are `2`\n\t\t\t\t// and the leading digits pattern is `21` –\n\t\t\t\t// it's quite obvious in this case that the format could be the one\n\t\t\t\t// but due to the absence of further digits it would give false negative.\n\t\t\t\tif (leadingDigits.length < MIN_LEADING_DIGITS_LENGTH) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\t// If at least `MIN_LEADING_DIGITS_LENGTH` digits of a national number are available\n\t\t\t\t// then format matching starts narrowing down the list of possible formats\n\t\t\t\t// (only previously matched formats are considered for next digits).\n\t\t\t\tleadingDigitsPatternIndex = Math.min(leadingDigitsPatternIndex, leadingDigitsPatternsCount - 1);\n\t\t\t\tvar leadingDigitsPattern = format.leadingDigitsPatterns()[leadingDigitsPatternIndex];\n\t\t\t\t// Brackets are required for `^` to be applied to\n\t\t\t\t// all or-ed (`|`) parts, not just the first one.\n\t\t\t\treturn new RegExp('^(' + leadingDigitsPattern + ')').test(leadingDigits);\n\t\t\t});\n\n\t\t\t// If there was a phone number format chosen\n\t\t\t// and it no longer holds given the new leading digits then reset it.\n\t\t\t// The test for this `if` condition is marked as:\n\t\t\t// \"Reset a chosen format when it no longer holds given the new leading digits\".\n\t\t\t// To construct a valid test case for this one can find a country\n\t\t\t// in `PhoneNumberMetadata.xml` yielding one format for 3 `<leadingDigits>`\n\t\t\t// and yielding another format for 4 `<leadingDigits>` (Australia in this case).\n\t\t\tif (this.chosenFormat && this.matchingFormats.indexOf(this.chosenFormat) === -1) {\n\t\t\t\tthis.resetFormat();\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'getSeparatorAfterNationalPrefix',\n\t\tvalue: function getSeparatorAfterNationalPrefix(format) {\n\t\t\tif (this.metadata.countryCallingCode() === '1') {\n\t\t\t\treturn ' ';\n\t\t\t}\n\t\t\tif (format && format.nationalPrefixFormattingRule() && NATIONAL_PREFIX_SEPARATORS_PATTERN.test(format.nationalPrefixFormattingRule())) {\n\t\t\t\treturn ' ';\n\t\t\t}\n\t\t\treturn '';\n\t\t}\n\n\t\t// This is in accordance to how Google's `libphonenumber` does it.\n\t\t// \"Check to see if there is an exact pattern match for these digits.\n\t\t// If so, we should use this instead of any other formatting template\n\t\t// whose `leadingDigitsPattern` also matches the input.\"\n\n\t}, {\n\t\tkey: 'attemptToFormatCompletePhoneNumber',\n\t\tvalue: function attemptToFormatCompletePhoneNumber() {\n\t\t\tfor (var _iterator2 = this.matchingFormats, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n\t\t\t\tvar _ref2;\n\n\t\t\t\tif (_isArray2) {\n\t\t\t\t\tif (_i2 >= _iterator2.length) break;\n\t\t\t\t\t_ref2 = _iterator2[_i2++];\n\t\t\t\t} else {\n\t\t\t\t\t_i2 = _iterator2.next();\n\t\t\t\t\tif (_i2.done) break;\n\t\t\t\t\t_ref2 = _i2.value;\n\t\t\t\t}\n\n\t\t\t\tvar format = _ref2;\n\n\t\t\t\tvar matcher = new RegExp('^(?:' + format.pattern() + ')$');\n\t\t\t\tif (!matcher.test(this.nationalNumberDigits)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// Here, national number is formatted without \"national prefix\n\t\t\t\t// formatting rule\", because otherwise there'd be a bug\n\t\t\t\t// when \"area code\" is \"duplicated\" during input:\n\t\t\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/318\n\t\t\t\tvar formattedNationalNumber = formatNationalNumberUsingFormat(this.nationalNumberDigits, format, this.isInternational(), false, // Don't prepend national prefix (it will be prepended manually).\n\t\t\t\tthis.metadata);\n\t\t\t\t// Check if this `format` preserves all digits.\n\t\t\t\t// This is how it's done in Google's `libphonenumber`.\n\t\t\t\t// Also, it fixes the bug when \"area code\" is \"duplicated\" during input:\n\t\t\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/318\n\t\t\t\t//\n\t\t\t\t// \"Check that we didn't remove nor add any extra digits when we matched\n\t\t\t\t// this formatting pattern. This usually happens after we entered the last\n\t\t\t\t// digit during AYTF. Eg: In case of MX, we swallow mobile token (1) when\n\t\t\t\t// formatted but AYTF should retain all the number entered and not change\n\t\t\t\t// in order to match a format (of same leading digits and length) display\n\t\t\t\t// in that way.\"\n\t\t\t\t// \"If it's the same (i.e entered number and format is same), then it's\n\t\t\t\t// safe to return this in formatted number as nothing is lost / added.\"\n\t\t\t\t// Otherwise, don't use this format.\n\t\t\t\t// https://github.com/google/libphonenumber/commit/3e7c1f04f5e7200f87fb131e6f85c6e99d60f510#diff-9149457fa9f5d608a11bb975c6ef4bc5\n\t\t\t\t// https://github.com/google/libphonenumber/commit/3ac88c7106e7dcb553bcc794b15f19185928a1c6#diff-2dcb77e833422ee304da348b905cde0b\n\t\t\t\t//\n\t\t\t\tif (parseDigits(formattedNationalNumber) !== this.nationalNumberDigits) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// Prepend national prefix (if any).\n\t\t\t\tif (this.nationalPrefix) {\n\t\t\t\t\t// Here, national number is formatted with \"national prefix\n\t\t\t\t\t// formatting rule\". The reason is that \"national prefix\n\t\t\t\t\t// formatting rule\" often adds parentheses, and while Google's\n\t\t\t\t\t// `libphonenumber` dismisses those preferring simply prepending\n\t\t\t\t\t// national prefix followed by a \" \" character, this library\n\t\t\t\t\t// looks if the national prefix could be formatted better.\n\t\t\t\t\tvar formattedNationalNumberWithNationalPrefix = formatNationalNumberUsingFormat(this.nationalNumberDigits, format, this.isInternational(), true, // Prepend national prefix.\n\t\t\t\t\tthis.metadata);\n\t\t\t\t\tif (parseDigits(formattedNationalNumberWithNationalPrefix) === this.nationalPrefix + this.nationalNumberDigits) {\n\t\t\t\t\t\tformattedNationalNumber = formattedNationalNumberWithNationalPrefix;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tformattedNationalNumber = this.nationalPrefix + this.getSeparatorAfterNationalPrefix(format) + formattedNationalNumber;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// formats national number (probably) without national prefix.\n\t\t\t\t// Formatting a national number with national prefix could result in\n\t\t\t\t// bugs when \"area code\" is \"duplicated\" during input:\n\t\t\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/318\n\t\t\t\t// The \"are all digits preserved\" check fixes that type of bug.\n\n\t\t\t\t// To leave the formatter in a consistent state\n\t\t\t\tthis.resetFormat();\n\t\t\t\tthis.chosenFormat = format;\n\t\t\t\t// Set `this.template` and `this.populatedNationalNumberTemplate`.\n\t\t\t\t/* istanbul ignore else */\n\t\t\t\tif (this.createFormattingTemplate(format)) {\n\t\t\t\t\t// Populate `this.populatedNationalNumberTemplate` with phone number digits.\n\t\t\t\t\tthis.reformatNationalNumber();\n\t\t\t\t} else {\n\t\t\t\t\t// If the formatting template couldn't be created for a format,\n\t\t\t\t\t// create it manually from the formatted phone number.\n\t\t\t\t\t// This case doesn't ever happen with the current metadata.\n\t\t\t\t\tthis.template = this.getFullNumber(formattedNationalNumber).replace(/[\\d\\+]/g, DIGIT_PLACEHOLDER);\n\t\t\t\t\tthis.populatedNationalNumberTemplate = formattedNationalNumber;\n\t\t\t\t\tthis.populatedNationalNumberTemplatePosition = this.populatedNationalNumberTemplate.length - 1;\n\t\t\t\t}\n\t\t\t\treturn formattedNationalNumber;\n\t\t\t}\n\t\t}\n\n\t\t// Prepends `+CountryCode ` in case of an international phone number\n\n\t}, {\n\t\tkey: 'getFullNumber',\n\t\tvalue: function getFullNumber(formattedNationalNumber) {\n\t\t\tif (this.isInternational()) {\n\t\t\t\tif (!this.countryCallingCode) {\n\t\t\t\t\treturn '+' + this.digits;\n\t\t\t\t}\n\t\t\t\tif (!formattedNationalNumber) {\n\t\t\t\t\treturn '+' + this.countryCallingCode;\n\t\t\t\t}\n\t\t\t\treturn '+' + this.countryCallingCode + ' ' + formattedNationalNumber;\n\t\t\t}\n\t\t\treturn formattedNationalNumber;\n\t\t}\n\t}, {\n\t\tkey: 'getNonFormattedNationalNumber',\n\t\tvalue: function getNonFormattedNationalNumber() {\n\t\t\treturn this.nationalPrefix + (this.nationalPrefix && this.nationalNumberDigits && this.getSeparatorAfterNationalPrefix()) + this.nationalNumberDigits;\n\t\t}\n\n\t\t// Extracts the country calling code from the beginning\n\t\t// of the entered `national_number` (so far),\n\t\t// and places the remaining input into the `national_number`.\n\n\t}, {\n\t\tkey: 'extractCountryCallingCode',\n\t\tvalue: function extractCountryCallingCode() {\n\t\t\tvar _extractCountryCallin = _extractCountryCallingCode('+' + this.digits, this.defaultCountry, this.metadata.metadata),\n\t\t\t    countryCallingCode = _extractCountryCallin.countryCallingCode,\n\t\t\t    number = _extractCountryCallin.number;\n\n\t\t\tif (!countryCallingCode) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.nationalNumberDigits = number;\n\t\t\tthis.countryCallingCode = countryCallingCode;\n\t\t\tthis.metadata.chooseCountryByCountryCallingCode(countryCallingCode);\n\t\t\tthis.initializePhoneNumberFormatsForCountry();\n\t\t\tthis.resetFormat();\n\t\t\treturn this.metadata.selectedCountry() !== undefined;\n\t\t}\n\t}, {\n\t\tkey: 'extractNationalPrefix',\n\t\tvalue: function extractNationalPrefix() {\n\t\t\tthis.nationalPrefix = '';\n\t\t\tif (!this.metadata.selectedCountry()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Only strip national prefixes for non-international phone numbers\n\t\t\t// because national prefixes can't be present in international phone numbers.\n\t\t\t// While `parseNumber()` is forgiving is such cases, `AsYouType` is not.\n\n\t\t\tvar _stripNationalPrefixA = stripNationalPrefixAndCarrierCode(this.nationalNumberDigits, this.metadata),\n\t\t\t    potentialNationalNumber = _stripNationalPrefixA.number,\n\t\t\t    carrierCode = _stripNationalPrefixA.carrierCode;\n\n\t\t\t// Sometimes `stripNationalPrefixAndCarrierCode()` won't actually\n\t\t\t// strip national prefix and will instead prepend some digits to the `number`:\n\t\t\t// for example, when number `2345678` is passed with `VI` country selected,\n\t\t\t// it will return `{ number: \"3402345678\" }`, because `340` area code is prepended.\n\t\t\t// So check if the `potentialNationalNumber` is actually at the end of `this.nationalNumberDigits`.\n\n\n\t\t\tif (potentialNationalNumber) {\n\t\t\t\tvar index = this.nationalNumberDigits.indexOf(potentialNationalNumber);\n\t\t\t\tif (index < 0 || index !== this.nationalNumberDigits.length - potentialNationalNumber.length) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (carrierCode) {\n\t\t\t\tthis.carrierCode = carrierCode;\n\t\t\t}\n\t\t\t// We require that the NSN remaining after stripping the national prefix and\n\t\t\t// carrier code be long enough to be a possible length for the region.\n\t\t\t// Otherwise, we don't do the stripping, since the original number could be\n\t\t\t// a valid short number.\n\t\t\tif (!this.metadata.possibleLengths() || this.isPossibleNumber(this.nationalNumberDigits) && !this.isPossibleNumber(potentialNationalNumber)) {\n\t\t\t\t// Verify the parsed national (significant) number for this country\n\t\t\t\t//\n\t\t\t\t// If the original number (before stripping national prefix) was viable,\n\t\t\t\t// and the resultant number is not, then prefer the original phone number.\n\t\t\t\t// This is because for some countries (e.g. Russia) the same digit could be both\n\t\t\t\t// a national prefix and a leading digit of a valid national phone number,\n\t\t\t\t// like `8` is the national prefix for Russia and both\n\t\t\t\t// `8 800 555 35 35` and `800 555 35 35` are valid numbers.\n\t\t\t\tif (matchesEntirely(this.nationalNumberDigits, this.metadata.nationalNumberPattern()) && !matchesEntirely(potentialNationalNumber, this.metadata.nationalNumberPattern())) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.nationalPrefix = this.nationalNumberDigits.slice(0, this.nationalNumberDigits.length - potentialNationalNumber.length);\n\t\t\tthis.nationalNumberDigits = potentialNationalNumber;\n\t\t\treturn this.nationalPrefix;\n\t\t}\n\t}, {\n\t\tkey: 'isPossibleNumber',\n\t\tvalue: function isPossibleNumber(number) {\n\t\t\tvar validation_result = checkNumberLengthForType(number, undefined, this.metadata);\n\t\t\tswitch (validation_result) {\n\t\t\t\tcase 'IS_POSSIBLE':\n\t\t\t\t\treturn true;\n\t\t\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\n\t\t\t\t// \treturn !this.isInternational()\n\t\t\t\tdefault:\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'isCountryCallingCodeAmbiguous',\n\t\tvalue: function isCountryCallingCodeAmbiguous() {\n\t\t\treturn this.metadata.countryCallingCodes()[this.countryCallingCode].length > 1;\n\t\t}\n\t}, {\n\t\tkey: 'createFormattingTemplate',\n\t\tvalue: function createFormattingTemplate(format) {\n\t\t\t// The formatter doesn't format numbers when numberPattern contains '|', e.g.\n\t\t\t// (20|3)\\d{4}. In those cases we quickly return.\n\t\t\t// (Though there's no such format in current metadata)\n\t\t\t/* istanbul ignore if */\n\t\t\tif (SUPPORT_LEGACY_FORMATTING_PATTERNS && format.pattern().indexOf('|') >= 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Get formatting template for this phone number format\n\t\t\tvar template = this.getTemplateForNumberFormatPattern(format, this.nationalPrefix);\n\t\t\t// If the national number entered is too long\n\t\t\t// for any phone number format, then abort.\n\t\t\tif (!template) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.template = template;\n\t\t\tthis.populatedNationalNumberTemplate = template;\n\t\t\t// For convenience, the public `.template` property\n\t\t\t// contains the whole international number\n\t\t\t// if the phone number being input is international:\n\t\t\t// 'x' for the '+' sign, 'x'es for the country phone code,\n\t\t\t// a spacebar and then the template for the formatted national number.\n\t\t\tif (this.isInternational()) {\n\t\t\t\tthis.template = DIGIT_PLACEHOLDER + repeat(DIGIT_PLACEHOLDER, this.countryCallingCode.length) + ' ' + template;\n\t\t\t}\n\t\t\treturn this.template;\n\t\t}\n\n\t\t/**\r\n   * Generates formatting template for a national phone number,\r\n   * optionally containing a national prefix, for a format.\r\n   * @param  {Format} format\r\n   * @param  {string} nationalPrefix\r\n   * @return {string}\r\n   */\n\n\t}, {\n\t\tkey: 'getTemplateForNumberFormatPattern',\n\t\tvalue: function getTemplateForNumberFormatPattern(format, nationalPrefix) {\n\t\t\tvar pattern = format.pattern();\n\n\t\t\t/* istanbul ignore else */\n\t\t\tif (SUPPORT_LEGACY_FORMATTING_PATTERNS) {\n\t\t\t\tpattern = pattern\n\t\t\t\t// Replace anything in the form of [..] with \\d\n\t\t\t\t.replace(CREATE_CHARACTER_CLASS_PATTERN(), '\\\\d')\n\t\t\t\t// Replace any standalone digit (not the one in `{}`) with \\d\n\t\t\t\t.replace(CREATE_STANDALONE_DIGIT_PATTERN(), '\\\\d');\n\t\t\t}\n\n\t\t\t// Generate a dummy national number (consisting of `9`s)\n\t\t\t// that fits this format's `pattern`.\n\t\t\t//\n\t\t\t// This match will always succeed,\n\t\t\t// because the \"longest dummy phone number\"\n\t\t\t// has enough length to accomodate any possible\n\t\t\t// national phone number format pattern.\n\t\t\t//\n\t\t\tvar digits = LONGEST_DUMMY_PHONE_NUMBER.match(pattern)[0];\n\n\t\t\t// If the national number entered is too long\n\t\t\t// for any phone number format, then abort.\n\t\t\tif (this.nationalNumberDigits.length > digits.length) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Get a formatting template which can be used to efficiently format\n\t\t\t// a partial number where digits are added one by one.\n\n\t\t\t// Below `strictPattern` is used for the\n\t\t\t// regular expression (with `^` and `$`).\n\t\t\t// This wasn't originally in Google's `libphonenumber`\n\t\t\t// and I guess they don't really need it\n\t\t\t// because they're not using \"templates\" to format phone numbers\n\t\t\t// but I added `strictPattern` after encountering\n\t\t\t// South Korean phone number formatting bug.\n\t\t\t//\n\t\t\t// Non-strict regular expression bug demonstration:\n\t\t\t//\n\t\t\t// this.nationalNumberDigits : `111111111` (9 digits)\n\t\t\t//\n\t\t\t// pattern : (\\d{2})(\\d{3,4})(\\d{4})\n\t\t\t// format : `$1 $2 $3`\n\t\t\t// digits : `9999999999` (10 digits)\n\t\t\t//\n\t\t\t// '9999999999'.replace(new RegExp(/(\\d{2})(\\d{3,4})(\\d{4})/g), '$1 $2 $3') = \"99 9999 9999\"\n\t\t\t//\n\t\t\t// template : xx xxxx xxxx\n\t\t\t//\n\t\t\t// But the correct template in this case is `xx xxx xxxx`.\n\t\t\t// The template was generated incorrectly because of the\n\t\t\t// `{3,4}` variability in the `pattern`.\n\t\t\t//\n\t\t\t// The fix is, if `this.nationalNumberDigits` has already sufficient length\n\t\t\t// to satisfy the `pattern` completely then `this.nationalNumberDigits`\n\t\t\t// is used instead of `digits`.\n\n\t\t\tvar strictPattern = new RegExp('^' + pattern + '$');\n\t\t\tvar nationalNumberDummyDigits = this.nationalNumberDigits.replace(/\\d/g, DUMMY_DIGIT);\n\n\t\t\t// If `this.nationalNumberDigits` has already sufficient length\n\t\t\t// to satisfy the `pattern` completely then use it\n\t\t\t// instead of `digits`.\n\t\t\tif (strictPattern.test(nationalNumberDummyDigits)) {\n\t\t\t\tdigits = nationalNumberDummyDigits;\n\t\t\t}\n\n\t\t\tvar numberFormat = this.getFormatFormat(format);\n\t\t\tvar includesNationalPrefix = void 0;\n\n\t\t\tif (nationalPrefix) {\n\t\t\t\tif (format.nationalPrefixFormattingRule()) {\n\t\t\t\t\tvar numberFormatWithNationalPrefix = numberFormat.replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule());\n\t\t\t\t\tif (parseDigits(numberFormatWithNationalPrefix) === nationalPrefix + parseDigits(numberFormat)) {\n\t\t\t\t\t\tnumberFormat = numberFormatWithNationalPrefix;\n\t\t\t\t\t\tincludesNationalPrefix = true;\n\t\t\t\t\t\tvar i = nationalPrefix.length;\n\t\t\t\t\t\twhile (i > 0) {\n\t\t\t\t\t\t\tnumberFormat = numberFormat.replace(/\\d/, DIGIT_PLACEHOLDER);\n\t\t\t\t\t\t\ti--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Generate formatting template for this phone number format.\n\t\t\tvar template = digits\n\t\t\t// Format the dummy phone number according to the format.\n\t\t\t.replace(new RegExp(pattern), numberFormat)\n\t\t\t// Replace each dummy digit with a DIGIT_PLACEHOLDER.\n\t\t\t.replace(new RegExp(DUMMY_DIGIT, 'g'), DIGIT_PLACEHOLDER);\n\n\t\t\tif (nationalPrefix) {\n\t\t\t\tif (!includesNationalPrefix) {\n\t\t\t\t\t// Prepend national prefix to the template manually.\n\t\t\t\t\ttemplate = repeat(DIGIT_PLACEHOLDER, nationalPrefix.length) + this.getSeparatorAfterNationalPrefix(format) + template;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn template;\n\t\t}\n\t}, {\n\t\tkey: 'formatNextNationalNumberDigits',\n\t\tvalue: function formatNextNationalNumberDigits(digits) {\n\t\t\t// Using `.split('')` to iterate through a string here\n\t\t\t// to avoid requiring `Symbol.iterator` polyfill.\n\t\t\t// `.split('')` is generally not safe for Unicode,\n\t\t\t// but in this particular case for `digits` it is safe.\n\t\t\t// for (const digit of digits)\n\t\t\tfor (var _iterator3 = digits.split(''), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n\t\t\t\tvar _ref3;\n\n\t\t\t\tif (_isArray3) {\n\t\t\t\t\tif (_i3 >= _iterator3.length) break;\n\t\t\t\t\t_ref3 = _iterator3[_i3++];\n\t\t\t\t} else {\n\t\t\t\t\t_i3 = _iterator3.next();\n\t\t\t\t\tif (_i3.done) break;\n\t\t\t\t\t_ref3 = _i3.value;\n\t\t\t\t}\n\n\t\t\t\tvar digit = _ref3;\n\n\t\t\t\t// If there is room for more digits in current `template`,\n\t\t\t\t// then set the next digit in the `template`,\n\t\t\t\t// and return the formatted digits so far.\n\t\t\t\t// If more digits are entered than the current format could handle.\n\t\t\t\tif (this.populatedNationalNumberTemplate.slice(this.populatedNationalNumberTemplatePosition + 1).search(DIGIT_PLACEHOLDER_MATCHER) < 0) {\n\t\t\t\t\t// Reset the format.\n\t\t\t\t\tthis.resetFormat();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis.populatedNationalNumberTemplatePosition = this.populatedNationalNumberTemplate.search(DIGIT_PLACEHOLDER_MATCHER);\n\t\t\t\tthis.populatedNationalNumberTemplate = this.populatedNationalNumberTemplate.replace(DIGIT_PLACEHOLDER_MATCHER, digit);\n\t\t\t}\n\n\t\t\t// Return the formatted phone number so far.\n\t\t\treturn cutAndStripNonPairedParens(this.populatedNationalNumberTemplate, this.populatedNationalNumberTemplatePosition + 1);\n\n\t\t\t// The old way which was good for `input-format` but is not so good\n\t\t\t// for `react-phone-number-input`'s default input (`InputBasic`).\n\t\t\t// return closeNonPairedParens(this.populatedNationalNumberTemplate, this.populatedNationalNumberTemplatePosition + 1)\n\t\t\t// \t.replace(new RegExp(DIGIT_PLACEHOLDER, 'g'), ' ')\n\t\t}\n\t}, {\n\t\tkey: 'isInternational',\n\t\tvalue: function isInternational() {\n\t\t\treturn this.international;\n\t\t}\n\t}, {\n\t\tkey: 'getFormatFormat',\n\t\tvalue: function getFormatFormat(format) {\n\t\t\tif (this.isInternational()) {\n\t\t\t\treturn applyInternationalSeparatorStyle(format.internationalFormat());\n\t\t\t}\n\t\t\t// if (this.nationalPrefix) {\n\t\t\t// \treturn `\\\\d{${this.nationalPrefix.length}}` + this.getSeparatorAfterNationalPrefix() + format.format()\n\t\t\t// }\n\t\t\t// // If national prefix formatting rule is defined for\n\t\t\t// // this phone number format.\n\t\t\t// if (format.nationalPrefixFormattingRule()) {\n\t\t\t// \t// If the user did input the national prefix,\n\t\t\t// \t// or if the national prefix formatting rule\n\t\t\t// \t// does not use national prefix at all,\n\t\t\t// \t// and only uses \"nationalPrefixFormattingRule\"\n\t\t\t// \t// as a hack to format the number properly,\n\t\t\t// \t// then apply the \"nationalPrefixFormattingRule\".\n\t\t\t// \tif (format.usesNationalPrefix() && !this.nationalPrefix) {\n\t\t\t// \t\t// Don't use \"nationalPrefixFormattingRule\"\n\t\t\t// \t\t// because it assumes that national prefix is present,\n\t\t\t// \t\t// but it hasn't been input.\n\t\t\t// \t} else {\n\t\t\t// \t\treturn format.format().replace(\n\t\t\t// \t\t\tFIRST_GROUP_PATTERN,\n\t\t\t// \t\t\tformat.nationalPrefixFormattingRule()\n\t\t\t// \t\t)\n\t\t\t// \t}\n\t\t\t// }\n\t\t\treturn format.format();\n\t\t}\n\n\t\t// Determines the country of the phone number\n\t\t// entered so far based on the country phone code\n\t\t// and the national phone number.\n\n\t}, {\n\t\tkey: 'determineTheCountry',\n\t\tvalue: function determineTheCountry() {\n\t\t\tthis.country = findCountryCode(this.countryCallingCode, this.nationalNumberDigits, this.metadata);\n\t\t}\n\n\t\t/**\r\n   * Returns an instance of `PhoneNumber` class.\r\n   * Will return `undefined` if no national (significant) number\r\n   * digits have been entered so far, or if no `defaultCountry` has been\r\n   * set and the user enters a phone number not in international format.\r\n   */\n\n\t}, {\n\t\tkey: 'getNumber',\n\t\tvalue: function getNumber() {\n\t\t\tif (!(this.countryCallingCode || this.defaultCountry) || !this.nationalNumberDigits) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tvar phoneNumber = new PhoneNumber(this.country || this.countryCallingCode, this.nationalNumberDigits, this.metadata.metadata);\n\t\t\tif (this.carrierCode) {\n\t\t\t\tphoneNumber.carrierCode = this.carrierCode;\n\t\t\t}\n\t\t\t// Phone number extensions are not supported by \"As You Type\" formatter.\n\t\t\treturn phoneNumber;\n\t\t}\n\n\t\t/**\r\n   * @deprecated\r\n   * This method is used in `react-phone-number-input/source/input-control.js`\r\n   * in versions before `3.0.16`.\r\n   */\n\n\t}, {\n\t\tkey: 'getNationalNumber',\n\t\tvalue: function getNationalNumber() {\n\t\t\treturn this.nationalNumberDigits;\n\t\t}\n\t}, {\n\t\tkey: 'getNonFormattedTemplate',\n\t\tvalue: function getNonFormattedTemplate() {\n\t\t\treturn this.getFullNumber(this.getNonFormattedNationalNumber()).replace(/[\\+\\d]/g, DIGIT_PLACEHOLDER);\n\t\t}\n\n\t\t/**\r\n   * Returns formatted phone number template.\r\n   * @return {string} [template]\r\n   */\n\n\t}, {\n\t\tkey: 'getTemplate',\n\t\tvalue: function getTemplate() {\n\t\t\tif (!this.template) {\n\t\t\t\treturn this.getNonFormattedTemplate();\n\t\t\t}\n\t\t\tvar index = -1;\n\t\t\tvar i = 0;\n\t\t\twhile (i < (this.international ? 1 : 0) + this.digits.length) {\n\t\t\t\tindex = this.template.indexOf(DIGIT_PLACEHOLDER, index + 1);\n\t\t\t\ti++;\n\t\t\t}\n\t\t\treturn cutAndStripNonPairedParens(this.template, index + 1);\n\t\t}\n\t}]);\n\n\treturn AsYouType;\n}();\n\nexport default AsYouType;\n\n\nexport function stripNonPairedParens(string) {\n\tvar dangling_braces = [];\n\tvar i = 0;\n\twhile (i < string.length) {\n\t\tif (string[i] === '(') {\n\t\t\tdangling_braces.push(i);\n\t\t} else if (string[i] === ')') {\n\t\t\tdangling_braces.pop();\n\t\t}\n\t\ti++;\n\t}\n\tvar start = 0;\n\tvar cleared_string = '';\n\tdangling_braces.push(string.length);\n\tfor (var _iterator4 = dangling_braces, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {\n\t\tvar _ref4;\n\n\t\tif (_isArray4) {\n\t\t\tif (_i4 >= _iterator4.length) break;\n\t\t\t_ref4 = _iterator4[_i4++];\n\t\t} else {\n\t\t\t_i4 = _iterator4.next();\n\t\t\tif (_i4.done) break;\n\t\t\t_ref4 = _i4.value;\n\t\t}\n\n\t\tvar index = _ref4;\n\n\t\tcleared_string += string.slice(start, index);\n\t\tstart = index + 1;\n\t}\n\treturn cleared_string;\n}\n\nexport function cutAndStripNonPairedParens(string, cutBeforeIndex) {\n\tif (string[cutBeforeIndex] === ')') {\n\t\tcutBeforeIndex++;\n\t}\n\treturn stripNonPairedParens(string.slice(0, cutBeforeIndex));\n}\n\nexport function closeNonPairedParens(template, cut_before) {\n\tvar retained_template = template.slice(0, cut_before);\n\tvar opening_braces = countOccurences('(', retained_template);\n\tvar closing_braces = countOccurences(')', retained_template);\n\tvar dangling_braces = opening_braces - closing_braces;\n\twhile (dangling_braces > 0 && cut_before < template.length) {\n\t\tif (template[cut_before] === ')') {\n\t\t\tdangling_braces--;\n\t\t}\n\t\tcut_before++;\n\t}\n\treturn template.slice(0, cut_before);\n}\n\n// Counts all occurences of a symbol in a string.\n// Unicode-unsafe (because using `.split()`).\nexport function countOccurences(symbol, string) {\n\tvar count = 0;\n\t// Using `.split('')` to iterate through a string here\n\t// to avoid requiring `Symbol.iterator` polyfill.\n\t// `.split('')` is generally not safe for Unicode,\n\t// but in this particular case for counting brackets it is safe.\n\t// for (const character of string)\n\tfor (var _iterator5 = string.split(''), _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {\n\t\tvar _ref5;\n\n\t\tif (_isArray5) {\n\t\t\tif (_i5 >= _iterator5.length) break;\n\t\t\t_ref5 = _iterator5[_i5++];\n\t\t} else {\n\t\t\t_i5 = _iterator5.next();\n\t\t\tif (_i5.done) break;\n\t\t\t_ref5 = _i5.value;\n\t\t}\n\n\t\tvar character = _ref5;\n\n\t\tif (character === symbol) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\n// Repeats a string (or a symbol) N times.\n// http://stackoverflow.com/questions/202605/repeat-string-javascript\nexport function repeat(string, times) {\n\tif (times < 1) {\n\t\treturn '';\n\t}\n\tvar result = '';\n\twhile (times > 1) {\n\t\tif (times & 1) {\n\t\t\tresult += string;\n\t\t}\n\t\ttimes >>= 1;\n\t\tstring += string;\n\t}\n\treturn result + string;\n}\n//# sourceMappingURL=AsYouType.js.map","// Javascript doesn't support UTF-8 regular expressions.\n// So mimicking them here.\n\n// Copy-pasted from `PhoneNumberMatcher.js`.\n\n/**\r\n * \"\\p{Z}\" is any kind of whitespace or invisible separator (\"Separator\").\r\n * http://www.regular-expressions.info/unicode.html\r\n * \"\\P{Z}\" is the reverse of \"\\p{Z}\".\r\n * \"\\p{N}\" is any kind of numeric character in any script (\"Number\").\r\n * \"\\p{Nd}\" is a digit zero through nine in any script except \"ideographic scripts\" (\"Decimal_Digit_Number\").\r\n * \"\\p{Sc}\" is a currency symbol (\"Currency_Symbol\").\r\n * \"\\p{L}\" is any kind of letter from any language (\"Letter\").\r\n * \"\\p{Mn}\" is \"non-spacing mark\".\r\n *\r\n * Javascript doesn't support Unicode Regular Expressions\r\n * so substituting it with this explicit set of characters.\r\n *\r\n * https://stackoverflow.com/questions/13210194/javascript-regex-equivalent-of-a-za-z-using-pl\r\n * https://github.com/danielberndt/babel-plugin-utf-8-regex/blob/master/src/transformer.js\r\n */\n\nvar _pZ = ' \\xA0\\u1680\\u180E\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000';\nexport var pZ = '[' + _pZ + ']';\nexport var PZ = '[^' + _pZ + ']';\n\nexport var _pN = '0-9\\xB2\\xB3\\xB9\\xBC-\\xBE\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u09F4-\\u09F9\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0B72-\\u0B77\\u0BE6-\\u0BF2\\u0C66-\\u0C6F\\u0C78-\\u0C7E\\u0CE6-\\u0CEF\\u0D66-\\u0D75\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F33\\u1040-\\u1049\\u1090-\\u1099\\u1369-\\u137C\\u16EE-\\u16F0\\u17E0-\\u17E9\\u17F0-\\u17F9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19DA\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\u2070\\u2074-\\u2079\\u2080-\\u2089\\u2150-\\u2182\\u2185-\\u2189\\u2460-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2CFD\\u3007\\u3021-\\u3029\\u3038-\\u303A\\u3192-\\u3195\\u3220-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\uA620-\\uA629\\uA6E6-\\uA6EF\\uA830-\\uA835\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19';\n// const pN = `[${_pN}]`\n\nvar _pNd = '0-9\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0BE6-\\u0BEF\\u0C66-\\u0C6F\\u0CE6-\\u0CEF\\u0D66-\\u0D6F\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F29\\u1040-\\u1049\\u1090-\\u1099\\u17E0-\\u17E9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19D9\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\uA620-\\uA629\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19';\nexport var pNd = '[' + _pNd + ']';\n\nexport var _pL = 'A-Za-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0\\u08A2-\\u08AC\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC';\nvar pL = '[' + _pL + ']';\nvar pL_regexp = new RegExp(pL);\n\nvar _pSc = '$\\xA2-\\xA5\\u058F\\u060B\\u09F2\\u09F3\\u09FB\\u0AF1\\u0BF9\\u0E3F\\u17DB\\u20A0-\\u20B9\\uA838\\uFDFC\\uFE69\\uFF04\\uFFE0\\uFFE1\\uFFE5\\uFFE6';\nvar pSc = '[' + _pSc + ']';\nvar pSc_regexp = new RegExp(pSc);\n\nvar _pMn = '\\u0300-\\u036F\\u0483-\\u0487\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08E4-\\u08FE\\u0900-\\u0902\\u093A\\u093C\\u0941-\\u0948\\u094D\\u0951-\\u0957\\u0962\\u0963\\u0981\\u09BC\\u09C1-\\u09C4\\u09CD\\u09E2\\u09E3\\u0A01\\u0A02\\u0A3C\\u0A41\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81\\u0A82\\u0ABC\\u0AC1-\\u0AC5\\u0AC7\\u0AC8\\u0ACD\\u0AE2\\u0AE3\\u0B01\\u0B3C\\u0B3F\\u0B41-\\u0B44\\u0B4D\\u0B56\\u0B62\\u0B63\\u0B82\\u0BC0\\u0BCD\\u0C3E-\\u0C40\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0CBC\\u0CBF\\u0CC6\\u0CCC\\u0CCD\\u0CE2\\u0CE3\\u0D41-\\u0D44\\u0D4D\\u0D62\\u0D63\\u0DCA\\u0DD2-\\u0DD4\\u0DD6\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F71-\\u0F7E\\u0F80-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102D-\\u1030\\u1032-\\u1037\\u1039\\u103A\\u103D\\u103E\\u1058\\u1059\\u105E-\\u1060\\u1071-\\u1074\\u1082\\u1085\\u1086\\u108D\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4\\u17B5\\u17B7-\\u17BD\\u17C6\\u17C9-\\u17D3\\u17DD\\u180B-\\u180D\\u18A9\\u1920-\\u1922\\u1927\\u1928\\u1932\\u1939-\\u193B\\u1A17\\u1A18\\u1A56\\u1A58-\\u1A5E\\u1A60\\u1A62\\u1A65-\\u1A6C\\u1A73-\\u1A7C\\u1A7F\\u1B00-\\u1B03\\u1B34\\u1B36-\\u1B3A\\u1B3C\\u1B42\\u1B6B-\\u1B73\\u1B80\\u1B81\\u1BA2-\\u1BA5\\u1BA8\\u1BA9\\u1BAB\\u1BE6\\u1BE8\\u1BE9\\u1BED\\u1BEF-\\u1BF1\\u1C2C-\\u1C33\\u1C36\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8\\u1CED\\u1CF4\\u1DC0-\\u1DE6\\u1DFC-\\u1DFF\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302D\\u3099\\u309A\\uA66F\\uA674-\\uA67D\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA825\\uA826\\uA8C4\\uA8E0-\\uA8F1\\uA926-\\uA92D\\uA947-\\uA951\\uA980-\\uA982\\uA9B3\\uA9B6-\\uA9B9\\uA9BC\\uAA29-\\uAA2E\\uAA31\\uAA32\\uAA35\\uAA36\\uAA43\\uAA4C\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEC\\uAAED\\uAAF6\\uABE5\\uABE8\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE26';\nvar pMn = '[' + _pMn + ']';\nvar pMn_regexp = new RegExp(pMn);\n\nvar _InBasic_Latin = '\\0-\\x7F';\nvar _InLatin_1_Supplement = '\\x80-\\xFF';\nvar _InLatin_Extended_A = '\\u0100-\\u017F';\nvar _InLatin_Extended_Additional = '\\u1E00-\\u1EFF';\nvar _InLatin_Extended_B = '\\u0180-\\u024F';\nvar _InCombining_Diacritical_Marks = '\\u0300-\\u036F';\n\nvar latinLetterRegexp = new RegExp('[' + _InBasic_Latin + _InLatin_1_Supplement + _InLatin_Extended_A + _InLatin_Extended_Additional + _InLatin_Extended_B + _InCombining_Diacritical_Marks + ']');\n\n/**\r\n * Helper method to determine if a character is a Latin-script letter or not.\r\n * For our purposes, combining marks should also return true since we assume\r\n * they have been added to a preceding Latin character.\r\n */\nexport function isLatinLetter(letter) {\n  // Combining marks are a subset of non-spacing-mark.\n  if (!pL_regexp.test(letter) && !pMn_regexp.test(letter)) {\n    return false;\n  }\n\n  return latinLetterRegexp.test(letter);\n}\n\nexport function isInvalidPunctuationSymbol(character) {\n  return character === '%' || pSc_regexp.test(character);\n}\n//# sourceMappingURL=utf-8.js.map","// Copy-pasted from `PhoneNumberMatcher.js`.\n\nimport { PLUS_CHARS } from '../constants';\nimport { limit } from './util';\n\nimport { isLatinLetter, isInvalidPunctuationSymbol } from './utf-8';\n\nvar OPENING_PARENS = '(\\\\[\\uFF08\\uFF3B';\nvar CLOSING_PARENS = ')\\\\]\\uFF09\\uFF3D';\nvar NON_PARENS = '[^' + OPENING_PARENS + CLOSING_PARENS + ']';\n\nexport var LEAD_CLASS = '[' + OPENING_PARENS + PLUS_CHARS + ']';\n\n// Punctuation that may be at the start of a phone number - brackets and plus signs.\nvar LEAD_CLASS_LEADING = new RegExp('^' + LEAD_CLASS);\n\n// Limit on the number of pairs of brackets in a phone number.\nvar BRACKET_PAIR_LIMIT = limit(0, 3);\n\n/**\r\n * Pattern to check that brackets match. Opening brackets should be closed within a phone number.\r\n * This also checks that there is something inside the brackets. Having no brackets at all is also\r\n * fine.\r\n *\r\n * An opening bracket at the beginning may not be closed, but subsequent ones should be.  It's\r\n * also possible that the leading bracket was dropped, so we shouldn't be surprised if we see a\r\n * closing bracket first. We limit the sets of brackets in a phone number to four.\r\n */\nvar MATCHING_BRACKETS_ENTIRE = new RegExp('^' + \"(?:[\" + OPENING_PARENS + \"])?\" + \"(?:\" + NON_PARENS + \"+\" + \"[\" + CLOSING_PARENS + \"])?\" + NON_PARENS + \"+\" + \"(?:[\" + OPENING_PARENS + \"]\" + NON_PARENS + \"+[\" + CLOSING_PARENS + \"])\" + BRACKET_PAIR_LIMIT + NON_PARENS + \"*\" + '$');\n\n/**\r\n * Matches strings that look like publication pages. Example:\r\n * <pre>Computing Complete Answers to Queries in the Presence of Limited Access Patterns.\r\n * Chen Li. VLDB J. 12(3): 211-227 (2003).</pre>\r\n *\r\n * The string \"211-227 (2003)\" is not a telephone number.\r\n */\nvar PUB_PAGES = /\\d{1,5}-+\\d{1,5}\\s{0,4}\\(\\d{1,4}/;\n\nexport default function isValidCandidate(candidate, offset, text, leniency) {\n\t// Check the candidate doesn't contain any formatting\n\t// which would indicate that it really isn't a phone number.\n\tif (!MATCHING_BRACKETS_ENTIRE.test(candidate) || PUB_PAGES.test(candidate)) {\n\t\treturn;\n\t}\n\n\t// If leniency is set to VALID or stricter, we also want to skip numbers that are surrounded\n\t// by Latin alphabetic characters, to skip cases like abc8005001234 or 8005001234def.\n\tif (leniency !== 'POSSIBLE') {\n\t\t// If the candidate is not at the start of the text,\n\t\t// and does not start with phone-number punctuation,\n\t\t// check the previous character.\n\t\tif (offset > 0 && !LEAD_CLASS_LEADING.test(candidate)) {\n\t\t\tvar previousChar = text[offset - 1];\n\t\t\t// We return null if it is a latin letter or an invalid punctuation symbol.\n\t\t\tif (isInvalidPunctuationSymbol(previousChar) || isLatinLetter(previousChar)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tvar lastCharIndex = offset + candidate.length;\n\t\tif (lastCharIndex < text.length) {\n\t\t\tvar nextChar = text[lastCharIndex];\n\t\t\tif (isInvalidPunctuationSymbol(nextChar) || isLatinLetter(nextChar)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn true;\n}\n//# sourceMappingURL=isValidCandidate.js.map","// Matches strings that look like dates using \"/\" as a separator.\n// Examples: 3/10/2011, 31/10/96 or 08/31/95.\nvar SLASH_SEPARATED_DATES = /(?:(?:[0-3]?\\d\\/[01]?\\d)|(?:[01]?\\d\\/[0-3]?\\d))\\/(?:[12]\\d)?\\d{2}/;\n\n// Matches timestamps.\n// Examples: \"2012-01-02 08:00\".\n// Note that the reg-ex does not include the\n// trailing \":\\d\\d\" -- that is covered by TIME_STAMPS_SUFFIX.\nvar TIME_STAMPS = /[12]\\d{3}[-/]?[01]\\d[-/]?[0-3]\\d +[0-2]\\d$/;\nvar TIME_STAMPS_SUFFIX_LEADING = /^:[0-5]\\d/;\n\nexport default function isValidPreCandidate(candidate, offset, text) {\n\t// Skip a match that is more likely to be a date.\n\tif (SLASH_SEPARATED_DATES.test(candidate)) {\n\t\treturn false;\n\t}\n\n\t// Skip potential time-stamps.\n\tif (TIME_STAMPS.test(candidate)) {\n\t\tvar followingText = text.slice(offset + candidate.length);\n\t\tif (TIME_STAMPS_SUFFIX_LEADING.test(followingText)) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n//# sourceMappingURL=isValidPreCandidate.js.map","import { trimAfterFirstMatch } from './util';\n\n// Regular expression of characters typically used to start a second phone number for the purposes\n// of parsing. This allows us to strip off parts of the number that are actually the start of\n// another number, such as for: (530) 583-6985 x302/x2303 -> the second extension here makes this\n// actually two phone numbers, (530) 583-6985 x302 and (530) 583-6985 x2303. We remove the second\n// extension so that the first number is parsed correctly.\n//\n// Matches a slash (\\ or /) followed by a space followed by an `x`.\n//\nvar SECOND_NUMBER_START_PATTERN = /[\\\\/] *x/;\n\nexport default function parsePreCandidate(candidate) {\n\t// Check for extra numbers at the end.\n\t// TODO: This is the place to start when trying to support extraction of multiple phone number\n\t// from split notations (+41 79 123 45 67 / 68).\n\treturn trimAfterFirstMatch(SECOND_NUMBER_START_PATTERN, candidate);\n}\n//# sourceMappingURL=parsePreCandidate.js.map","var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// This is a legacy function.\n// Use `findNumbers()` instead.\n\nimport { PLUS_CHARS, VALID_PUNCTUATION, VALID_DIGITS, WHITESPACE } from './constants';\n\nimport { EXTN_PATTERNS_FOR_PARSING } from './extension';\n\nimport parse from './parse_';\n\nimport parsePreCandidate from './findNumbers/parsePreCandidate';\nimport isValidPreCandidate from './findNumbers/isValidPreCandidate';\nimport isValidCandidate from './findNumbers/isValidCandidate';\n\n// Copy-pasted from `./parse.js`.\nvar VALID_PHONE_NUMBER = '[' + PLUS_CHARS + ']{0,1}' + '(?:' + '[' + VALID_PUNCTUATION + ']*' + '[' + VALID_DIGITS + ']' + '){3,}' + '[' + VALID_PUNCTUATION + VALID_DIGITS + ']*';\n\nvar WHITESPACE_IN_THE_BEGINNING_PATTERN = new RegExp('^[' + WHITESPACE + ']+');\nvar PUNCTUATION_IN_THE_END_PATTERN = new RegExp('[' + VALID_PUNCTUATION + ']+$');\n\n// // Regular expression for getting opening brackets for a valid number\n// // found using `PHONE_NUMBER_START_PATTERN` for prepending those brackets to the number.\n// const BEFORE_NUMBER_DIGITS_PUNCTUATION = new RegExp('[' + OPENING_BRACKETS + ']+' + '[' + WHITESPACE + ']*' + '$')\n\nvar VALID_PRECEDING_CHARACTER_PATTERN = /[^a-zA-Z0-9]/;\n\nexport default function findPhoneNumbers(text, options, metadata) {\n\t/* istanbul ignore if */\n\tif (options === undefined) {\n\t\toptions = {};\n\t}\n\n\tvar search = new PhoneNumberSearch(text, options, metadata);\n\tvar phones = [];\n\twhile (search.hasNext()) {\n\t\tphones.push(search.next());\n\t}\n\treturn phones;\n}\n\n/**\r\n * @return ES6 `for ... of` iterator.\r\n */\nexport function searchPhoneNumbers(text, options, metadata) {\n\t/* istanbul ignore if */\n\tif (options === undefined) {\n\t\toptions = {};\n\t}\n\n\tvar search = new PhoneNumberSearch(text, options, metadata);\n\n\treturn _defineProperty({}, Symbol.iterator, function () {\n\t\treturn {\n\t\t\tnext: function next() {\n\t\t\t\tif (search.hasNext()) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdone: false,\n\t\t\t\t\t\tvalue: search.next()\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\tdone: true\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t});\n}\n\n/**\r\n * Extracts a parseable phone number including any opening brackets, etc.\r\n * @param  {string} text - Input.\r\n * @return {object} `{ ?number, ?startsAt, ?endsAt }`.\r\n */\nexport var PhoneNumberSearch = function () {\n\tfunction PhoneNumberSearch(text) {\n\t\tvar options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\t\tvar metadata = arguments[2];\n\n\t\t_classCallCheck(this, PhoneNumberSearch);\n\n\t\tthis.state = 'NOT_READY';\n\n\t\tthis.text = text;\n\t\tthis.options = options;\n\t\tthis.metadata = metadata;\n\n\t\tthis.regexp = new RegExp(VALID_PHONE_NUMBER +\n\t\t// Phone number extensions\n\t\t'(?:' + EXTN_PATTERNS_FOR_PARSING + ')?', 'ig');\n\n\t\t// this.searching_from = 0\n\t}\n\t// Iteration tristate.\n\n\n\t_createClass(PhoneNumberSearch, [{\n\t\tkey: 'find',\n\t\tvalue: function find() {\n\t\t\tvar matches = this.regexp.exec(this.text);\n\n\t\t\tif (!matches) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar number = matches[0];\n\t\t\tvar startsAt = matches.index;\n\n\t\t\tnumber = number.replace(WHITESPACE_IN_THE_BEGINNING_PATTERN, '');\n\t\t\tstartsAt += matches[0].length - number.length;\n\t\t\t// Fixes not parsing numbers with whitespace in the end.\n\t\t\t// Also fixes not parsing numbers with opening parentheses in the end.\n\t\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/252\n\t\t\tnumber = number.replace(PUNCTUATION_IN_THE_END_PATTERN, '');\n\n\t\t\tnumber = parsePreCandidate(number);\n\n\t\t\tvar result = this.parseCandidate(number, startsAt);\n\n\t\t\tif (result) {\n\t\t\t\treturn result;\n\t\t\t}\n\n\t\t\t// Tail recursion.\n\t\t\t// Try the next one if this one is not a valid phone number.\n\t\t\treturn this.find();\n\t\t}\n\t}, {\n\t\tkey: 'parseCandidate',\n\t\tvalue: function parseCandidate(number, startsAt) {\n\t\t\tif (!isValidPreCandidate(number, startsAt, this.text)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Don't parse phone numbers which are non-phone numbers\n\t\t\t// due to being part of something else (e.g. a UUID).\n\t\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/213\n\t\t\t// Copy-pasted from Google's `PhoneNumberMatcher.js` (`.parseAndValidate()`).\n\t\t\tif (!isValidCandidate(number, startsAt, this.text, this.options.extended ? 'POSSIBLE' : 'VALID')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// // Prepend any opening brackets left behind by the\n\t\t\t// // `PHONE_NUMBER_START_PATTERN` regexp.\n\t\t\t// const text_before_number = text.slice(this.searching_from, startsAt)\n\t\t\t// const full_number_starts_at = text_before_number.search(BEFORE_NUMBER_DIGITS_PUNCTUATION)\n\t\t\t// if (full_number_starts_at >= 0)\n\t\t\t// {\n\t\t\t// \tnumber   = text_before_number.slice(full_number_starts_at) + number\n\t\t\t// \tstartsAt = full_number_starts_at\n\t\t\t// }\n\t\t\t//\n\t\t\t// this.searching_from = matches.lastIndex\n\n\t\t\tvar result = parse(number, this.options, this.metadata);\n\n\t\t\tif (!result.phone) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tresult.startsAt = startsAt;\n\t\t\tresult.endsAt = startsAt + number.length;\n\n\t\t\treturn result;\n\t\t}\n\t}, {\n\t\tkey: 'hasNext',\n\t\tvalue: function hasNext() {\n\t\t\tif (this.state === 'NOT_READY') {\n\t\t\t\tthis.last_match = this.find();\n\n\t\t\t\tif (this.last_match) {\n\t\t\t\t\tthis.state = 'READY';\n\t\t\t\t} else {\n\t\t\t\t\tthis.state = 'DONE';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this.state === 'READY';\n\t\t}\n\t}, {\n\t\tkey: 'next',\n\t\tvalue: function next() {\n\t\t\t// Check the state and find the next match as a side-effect if necessary.\n\t\t\tif (!this.hasNext()) {\n\t\t\t\tthrow new Error('No next element');\n\t\t\t}\n\n\t\t\t// Don't retain that memory any longer than necessary.\n\t\t\tvar result = this.last_match;\n\t\t\tthis.last_match = null;\n\t\t\tthis.state = 'NOT_READY';\n\t\t\treturn result;\n\t\t}\n\t}]);\n\n\treturn PhoneNumberSearch;\n}();\n//# sourceMappingURL=findPhoneNumbers_.js.map","var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nimport parseNumber from './parse_';\n\nexport default function parsePhoneNumber(text, options, metadata) {\n\treturn parseNumber(text, _extends({}, options, { v2: true }), metadata);\n}\n//# sourceMappingURL=parsePhoneNumber_.js.map","import isValidNumber from './validate_';\n\n/**\r\n * Checks if a given phone number is valid within a given region.\r\n * Is just an alias for `phoneNumber.isValid() && phoneNumber.country === country`.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\r\n */\nexport default function isValidNumberForRegion(input, country) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var metadata = arguments[3];\n\n  return input.country === country && isValidNumber(input, options, metadata);\n}\n//# sourceMappingURL=isValidNumberForRegion_.js.map","import Metadata from './metadata';\nimport { VALID_DIGITS } from './constants';\n\nvar CAPTURING_DIGIT_PATTERN = new RegExp('([' + VALID_DIGITS + '])');\n\n/**\r\n * Pattern that makes it easy to distinguish whether a region has a single\r\n * international dialing prefix or not. If a region has a single international\r\n * prefix (e.g. 011 in USA), it will be represented as a string that contains\r\n * a sequence of ASCII digits, and possibly a tilde, which signals waiting for\r\n * the tone. If there are multiple available international prefixes in a\r\n * region, they will be represented as a regex string that always contains one\r\n * or more characters that are not ASCII digits or a tilde.\r\n */\nvar SINGLE_IDD_PREFIX = /^[\\d]+(?:[~\\u2053\\u223C\\uFF5E][\\d]+)?$/;\n\n// For regions that have multiple IDD prefixes\n// a preferred IDD prefix is returned.\nexport function getIDDPrefix(country, metadata) {\n\tvar countryMetadata = new Metadata(metadata);\n\tcountryMetadata.country(country);\n\n\tif (SINGLE_IDD_PREFIX.test(countryMetadata.IDDPrefix())) {\n\t\treturn countryMetadata.IDDPrefix();\n\t}\n\n\treturn countryMetadata.defaultIDDPrefix();\n}\n\nexport function stripIDDPrefix(number, country, metadata) {\n\tif (!country) {\n\t\treturn;\n\t}\n\n\t// Check if the number is IDD-prefixed.\n\n\tvar countryMetadata = new Metadata(metadata);\n\tcountryMetadata.country(country);\n\n\tvar IDDPrefixPattern = new RegExp(countryMetadata.IDDPrefix());\n\n\tif (number.search(IDDPrefixPattern) !== 0) {\n\t\treturn;\n\t}\n\n\t// Strip IDD prefix.\n\tnumber = number.slice(number.match(IDDPrefixPattern)[0].length);\n\n\t// Some kind of a weird edge case.\n\t// No explanation from Google given.\n\tvar matchedGroups = number.match(CAPTURING_DIGIT_PATTERN);\n\t/* istanbul ignore next */\n\tif (matchedGroups && matchedGroups[1] != null && matchedGroups[1].length > 0) {\n\t\tif (matchedGroups[1] === '0') {\n\t\t\treturn;\n\t\t}\n\t}\n\n\treturn number;\n}\n//# sourceMappingURL=IDD.js.map","// Deprecated. Import from 'metadata.js' directly instead.\nexport { getCountryCallingCode as default } from './metadata';\n//# sourceMappingURL=getCountryCallingCode.js.map","import { parseDigit } from './parseDigits';\n\n/**\r\n * Parses phone number characters from a string.\r\n * Drops all punctuation leaving only digits and the leading `+` sign (if any).\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * parseIncompletePhoneNumber('8 (800) 555')\r\n * // Outputs '8800555'.\r\n * parseIncompletePhoneNumber('+7 800 555')\r\n * // Outputs '+7800555'.\r\n * ```\r\n */\nexport default function parseIncompletePhoneNumber(string) {\n\tvar result = '';\n\t// Using `.split('')` here instead of normal `for ... of`\n\t// because the importing application doesn't neccessarily include an ES6 polyfill.\n\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\n\t// (the ones consisting of four bytes) but digits\n\t// (including non-European ones) don't fall into that range\n\t// so such \"exotic\" characters would be discarded anyway.\n\tfor (var _iterator = string.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar character = _ref;\n\n\t\tresult += parsePhoneNumberCharacter(character, result) || '';\n\t}\n\treturn result;\n}\n\n/**\r\n * `input-format` `parse()` function.\r\n * https://github.com/catamphetamine/input-format\r\n * @param  {string} character - Yet another character from raw input string.\r\n * @param  {string} value - The value parsed so far.\r\n * @param  {object} meta - Optional custom use-case-specific metadata.\r\n * @return {string?} The parsed character.\r\n */\nexport function parsePhoneNumberCharacter(character, value) {\n\t// Only allow a leading `+`.\n\tif (character === '+') {\n\t\t// If this `+` is not the first parsed character\n\t\t// then discard it.\n\t\tif (value) {\n\t\t\treturn;\n\t\t}\n\t\treturn '+';\n\t}\n\t// Allow digits.\n\treturn parseDigit(character);\n}\n//# sourceMappingURL=parseIncompletePhoneNumber.js.map","import AsYouType from './AsYouType';\n\n/**\r\n * Formats a (possibly incomplete) phone number.\r\n * The phone number can be either in E.164 format\r\n * or in a form of national number digits.\r\n * @param {string} value - A possibly incomplete phone number. Either in E.164 format or in a form of national number digits.\r\n * @param {string?} country - Two-letter (\"ISO 3166-1 alpha-2\") country code.\r\n * @return {string} Formatted (possibly incomplete) phone number.\r\n */\nexport default function formatIncompletePhoneNumber(value, country, metadata) {\n  if (!metadata) {\n    metadata = country;\n    country = undefined;\n  }\n  return new AsYouType(country, metadata).input(value);\n}\n//# sourceMappingURL=formatIncompletePhoneNumber.js.map","import Metadata from './metadata';\n\nexport default function getCountries(metadata) {\n\treturn new Metadata(metadata).getCountries();\n}\n//# sourceMappingURL=getCountries.js.map","import searchNumbers from './searchNumbers';\nimport { getArguments } from './findPhoneNumbersInText';\n\nexport default function searchPhoneNumbersInText(text, defaultCountry, options, metadata) {\n\tvar args = getArguments(defaultCountry, options, metadata);\n\treturn searchNumbers(text, args.options, args.metadata);\n}\n//# sourceMappingURL=searchPhoneNumbersInText.js.map","import isValidNumber from '../validate_';\nimport parseDigits from '../parseDigits';\n\nimport { startsWith, endsWith } from './util';\n\n/**\r\n * Leniency when finding potential phone numbers in text segments\r\n * The levels here are ordered in increasing strictness.\r\n */\nexport default {\n  /**\r\n   * Phone numbers accepted are \"possible\", but not necessarily \"valid\".\r\n   */\n  POSSIBLE: function POSSIBLE(number, candidate, metadata) {\n    return true;\n  },\n\n\n  /**\r\n   * Phone numbers accepted are \"possible\" and \"valid\".\r\n   * Numbers written in national format must have their national-prefix\r\n   * present if it is usually written for a number of this type.\r\n   */\n  VALID: function VALID(number, candidate, metadata) {\n    if (!isValidNumber(number, undefined, metadata) || !containsOnlyValidXChars(number, candidate.toString(), metadata)) {\n      return false;\n    }\n\n    // Skipped for simplicity.\n    // return isNationalPrefixPresentIfRequired(number, metadata)\n    return true;\n  },\n\n\n  /**\r\n   * Phone numbers accepted are \"valid\" and\r\n   * are grouped in a possible way for this locale. For example, a US number written as\r\n   * \"65 02 53 00 00\" and \"650253 0000\" are not accepted at this leniency level, whereas\r\n   * \"650 253 0000\", \"650 2530000\" or \"6502530000\" are.\r\n   * Numbers with more than one '/' symbol in the national significant number\r\n   * are also dropped at this level.\r\n   *\r\n   * Warning: This level might result in lower coverage especially for regions outside of\r\n   * country code \"+1\". If you are not sure about which level to use,\r\n   * email the discussion group libphonenumber-discuss@googlegroups.com.\r\n   */\n  STRICT_GROUPING: function STRICT_GROUPING(number, candidate, metadata, regExpCache) {\n    var candidateString = candidate.toString();\n\n    if (!isValidNumber(number, undefined, metadata) || !containsOnlyValidXChars(number, candidateString, metadata) || containsMoreThanOneSlashInNationalNumber(number, candidateString) || !isNationalPrefixPresentIfRequired(number, metadata)) {\n      return false;\n    }\n\n    return checkNumberGroupingIsValid(number, candidate, metadata, allNumberGroupsRemainGrouped, regExpCache);\n  },\n\n\n  /**\r\n   * Phone numbers accepted are {@linkplain PhoneNumberUtil#isValidNumber(PhoneNumber) valid} and\r\n   * are grouped in the same way that we would have formatted it, or as a single block. For\r\n   * example, a US number written as \"650 2530000\" is not accepted at this leniency level, whereas\r\n   * \"650 253 0000\" or \"6502530000\" are.\r\n   * Numbers with more than one '/' symbol are also dropped at this level.\r\n   * <p>\r\n   * Warning: This level might result in lower coverage especially for regions outside of country\r\n   * code \"+1\". If you are not sure about which level to use, email the discussion group\r\n   * libphonenumber-discuss@googlegroups.com.\r\n   */\n  EXACT_GROUPING: function EXACT_GROUPING(number, candidate, metadata, regExpCache) {\n    var candidateString = candidate.toString();\n\n    if (!isValidNumber(number, undefined, metadata) || !containsOnlyValidXChars(number, candidateString, metadata) || containsMoreThanOneSlashInNationalNumber(number, candidateString) || !isNationalPrefixPresentIfRequired(number, metadata)) {\n      return false;\n    }\n\n    return checkNumberGroupingIsValid(number, candidate, metadata, allNumberGroupsAreExactlyPresent, regExpCache);\n  }\n};\n\nfunction containsOnlyValidXChars(number, candidate, metadata) {\n  // The characters 'x' and 'X' can be (1) a carrier code, in which case they always precede the\n  // national significant number or (2) an extension sign, in which case they always precede the\n  // extension number. We assume a carrier code is more than 1 digit, so the first case has to\n  // have more than 1 consecutive 'x' or 'X', whereas the second case can only have exactly 1 'x'\n  // or 'X'. We ignore the character if it appears as the last character of the string.\n  for (var index = 0; index < candidate.length - 1; index++) {\n    var charAtIndex = candidate.charAt(index);\n\n    if (charAtIndex === 'x' || charAtIndex === 'X') {\n      var charAtNextIndex = candidate.charAt(index + 1);\n\n      if (charAtNextIndex === 'x' || charAtNextIndex === 'X') {\n        // This is the carrier code case, in which the 'X's always precede the national\n        // significant number.\n        index++;\n        if (util.isNumberMatch(number, candidate.substring(index)) != MatchType.NSN_MATCH) {\n          return false;\n        }\n        // This is the extension sign case, in which the 'x' or 'X' should always precede the\n        // extension number.\n      } else if (parseDigits(candidate.substring(index)) !== number.ext) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction isNationalPrefixPresentIfRequired(number, _metadata) {\n  // First, check how we deduced the country code. If it was written in international format, then\n  // the national prefix is not required.\n  if (number.getCountryCodeSource() != 'FROM_DEFAULT_COUNTRY') {\n    return true;\n  }\n\n  var phoneNumberRegion = util.getRegionCodeForCountryCode(number.getCountryCode());\n\n  var metadata = util.getMetadataForRegion(phoneNumberRegion);\n  if (metadata == null) {\n    return true;\n  }\n\n  // Check if a national prefix should be present when formatting this number.\n  var nationalNumber = util.getNationalSignificantNumber(number);\n  var formatRule = util.chooseFormattingPatternForNumber(metadata.numberFormats(), nationalNumber);\n\n  // To do this, we check that a national prefix formatting rule was present\n  // and that it wasn't just the first-group symbol ($1) with punctuation.\n  if (formatRule && formatRule.getNationalPrefixFormattingRule().length > 0) {\n    if (formatRule.getNationalPrefixOptionalWhenFormatting()) {\n      // The national-prefix is optional in these cases, so we don't need to check if it was\n      // present.\n      return true;\n    }\n\n    if (PhoneNumberUtil.formattingRuleHasFirstGroupOnly(formatRule.getNationalPrefixFormattingRule())) {\n      // National Prefix not needed for this number.\n      return true;\n    }\n\n    // Normalize the remainder.\n    var rawInputCopy = PhoneNumberUtil.normalizeDigitsOnly(number.getRawInput());\n\n    // Check if we found a national prefix and/or carrier code at the start of the raw input, and\n    // return the result.\n    return util.maybeStripNationalPrefixAndCarrierCode(rawInputCopy, metadata, null);\n  }\n\n  return true;\n}\n\nexport function containsMoreThanOneSlashInNationalNumber(number, candidate) {\n  var firstSlashInBodyIndex = candidate.indexOf('/');\n  if (firstSlashInBodyIndex < 0) {\n    // No slashes, this is okay.\n    return false;\n  }\n\n  // Now look for a second one.\n  var secondSlashInBodyIndex = candidate.indexOf('/', firstSlashInBodyIndex + 1);\n  if (secondSlashInBodyIndex < 0) {\n    // Only one slash, this is okay.\n    return false;\n  }\n\n  // If the first slash is after the country calling code, this is permitted.\n  var candidateHasCountryCode = number.getCountryCodeSource() === CountryCodeSource.FROM_NUMBER_WITH_PLUS_SIGN || number.getCountryCodeSource() === CountryCodeSource.FROM_NUMBER_WITHOUT_PLUS_SIGN;\n\n  if (candidateHasCountryCode && PhoneNumberUtil.normalizeDigitsOnly(candidate.substring(0, firstSlashInBodyIndex)) === String(number.getCountryCode())) {\n    // Any more slashes and this is illegal.\n    return candidate.slice(secondSlashInBodyIndex + 1).indexOf('/') >= 0;\n  }\n\n  return true;\n}\n\nfunction checkNumberGroupingIsValid(number, candidate, metadata, checkGroups, regExpCache) {\n  var normalizedCandidate = normalizeDigits(candidate, true /* keep non-digits */);\n  var formattedNumberGroups = getNationalNumberGroups(metadata, number, null);\n  if (checkGroups(metadata, number, normalizedCandidate, formattedNumberGroups)) {\n    return true;\n  }\n\n  // If this didn't pass, see if there are any alternate formats that match, and try them instead.\n  var alternateFormats = MetadataManager.getAlternateFormatsForCountry(number.getCountryCode());\n  var nationalSignificantNumber = util.getNationalSignificantNumber(number);\n\n  if (alternateFormats) {\n    for (var _iterator = alternateFormats.numberFormats(), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var alternateFormat = _ref;\n\n      if (alternateFormat.leadingDigitsPatterns().length > 0) {\n        // There is only one leading digits pattern for alternate formats.\n        var leadingDigitsRegExp = regExpCache.getPatternForRegExp('^' + alternateFormat.leadingDigitsPatterns()[0]);\n        if (!leadingDigitsRegExp.test(nationalSignificantNumber)) {\n          // Leading digits don't match; try another one.\n          continue;\n        }\n      }\n      formattedNumberGroups = getNationalNumberGroups(metadata, number, alternateFormat);\n      if (checkGroups(metadata, number, normalizedCandidate, formattedNumberGroups)) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\n/**\r\n * Helper method to get the national-number part of a number, formatted without any national\r\n * prefix, and return it as a set of digit blocks that would be formatted together following\r\n * standard formatting rules.\r\n */\nfunction getNationalNumberGroups(metadata, number, formattingPattern) {\n  if (formattingPattern) {\n    // We format the NSN only, and split that according to the separator.\n    var nationalSignificantNumber = util.getNationalSignificantNumber(number);\n    return util.formatNsnUsingPattern(nationalSignificantNumber, formattingPattern, 'RFC3966', metadata).split('-');\n  }\n\n  // This will be in the format +CC-DG1-DG2-DGX;ext=EXT where DG1..DGX represents groups of digits.\n  var rfc3966Format = formatNumber(number, 'RFC3966', metadata);\n\n  // We remove the extension part from the formatted string before splitting it into different\n  // groups.\n  var endIndex = rfc3966Format.indexOf(';');\n  if (endIndex < 0) {\n    endIndex = rfc3966Format.length;\n  }\n\n  // The country-code will have a '-' following it.\n  var startIndex = rfc3966Format.indexOf('-') + 1;\n  return rfc3966Format.slice(startIndex, endIndex).split('-');\n}\n\nfunction allNumberGroupsAreExactlyPresent(metadata, number, normalizedCandidate, formattedNumberGroups) {\n  var candidateGroups = normalizedCandidate.split(NON_DIGITS_PATTERN);\n\n  // Set this to the last group, skipping it if the number has an extension.\n  var candidateNumberGroupIndex = number.hasExtension() ? candidateGroups.length - 2 : candidateGroups.length - 1;\n\n  // First we check if the national significant number is formatted as a block.\n  // We use contains and not equals, since the national significant number may be present with\n  // a prefix such as a national number prefix, or the country code itself.\n  if (candidateGroups.length == 1 || candidateGroups[candidateNumberGroupIndex].contains(util.getNationalSignificantNumber(number))) {\n    return true;\n  }\n\n  // Starting from the end, go through in reverse, excluding the first group, and check the\n  // candidate and number groups are the same.\n  var formattedNumberGroupIndex = formattedNumberGroups.length - 1;\n  while (formattedNumberGroupIndex > 0 && candidateNumberGroupIndex >= 0) {\n    if (candidateGroups[candidateNumberGroupIndex] !== formattedNumberGroups[formattedNumberGroupIndex]) {\n      return false;\n    }\n    formattedNumberGroupIndex--;\n    candidateNumberGroupIndex--;\n  }\n\n  // Now check the first group. There may be a national prefix at the start, so we only check\n  // that the candidate group ends with the formatted number group.\n  return candidateNumberGroupIndex >= 0 && endsWith(candidateGroups[candidateNumberGroupIndex], formattedNumberGroups[0]);\n}\n\nfunction allNumberGroupsRemainGrouped(metadata, number, normalizedCandidate, formattedNumberGroups) {\n  var fromIndex = 0;\n  if (number.getCountryCodeSource() !== CountryCodeSource.FROM_DEFAULT_COUNTRY) {\n    // First skip the country code if the normalized candidate contained it.\n    var countryCode = String(number.getCountryCode());\n    fromIndex = normalizedCandidate.indexOf(countryCode) + countryCode.length();\n  }\n\n  // Check each group of consecutive digits are not broken into separate groupings in the\n  // {@code normalizedCandidate} string.\n  for (var i = 0; i < formattedNumberGroups.length; i++) {\n    // Fails if the substring of {@code normalizedCandidate} starting from {@code fromIndex}\n    // doesn't contain the consecutive digits in formattedNumberGroups[i].\n    fromIndex = normalizedCandidate.indexOf(formattedNumberGroups[i], fromIndex);\n    if (fromIndex < 0) {\n      return false;\n    }\n    // Moves {@code fromIndex} forward.\n    fromIndex += formattedNumberGroups[i].length();\n    if (i == 0 && fromIndex < normalizedCandidate.length()) {\n      // We are at the position right after the NDC. We get the region used for formatting\n      // information based on the country code in the phone number, rather than the number itself,\n      // as we do not need to distinguish between different countries with the same country\n      // calling code and this is faster.\n      var region = util.getRegionCodeForCountryCode(number.getCountryCode());\n      if (util.getNddPrefixForRegion(region, true) != null && Character.isDigit(normalizedCandidate.charAt(fromIndex))) {\n        // This means there is no formatting symbol after the NDC. In this case, we only\n        // accept the number if there is no formatting symbol at all in the number, except\n        // for extensions. This is only important for countries with national prefixes.\n        var nationalSignificantNumber = util.getNationalSignificantNumber(number);\n        return startsWith(normalizedCandidate.slice(fromIndex - formattedNumberGroups[i].length), nationalSignificantNumber);\n      }\n    }\n  }\n\n  // The check here makes sure that we haven't mistakenly already used the extension to\n  // match the last group of the subscriber number. Note the extension cannot have\n  // formatting in-between digits.\n  return normalizedCandidate.slice(fromIndex).contains(number.getExtension());\n}\n//# sourceMappingURL=Leniency.js.map","var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// https://medium.com/dsinjs/implementing-lru-cache-in-javascript-94ba6755cda9\n\nvar Node = function Node(key, value) {\n  var next = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var prev = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n  _classCallCheck(this, Node);\n\n  this.key = key;\n  this.value = value;\n  this.next = next;\n  this.prev = prev;\n};\n\nvar LRUCache = function () {\n  //set default limit of 10 if limit is not passed.\n  function LRUCache() {\n    var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n\n    _classCallCheck(this, LRUCache);\n\n    this.size = 0;\n    this.limit = limit;\n    this.head = null;\n    this.tail = null;\n    this.cache = {};\n  }\n\n  // Write Node to head of LinkedList\n  // update cache with Node key and Node reference\n\n\n  _createClass(LRUCache, [{\n    key: \"put\",\n    value: function put(key, value) {\n      this.ensureLimit();\n\n      if (!this.head) {\n        this.head = this.tail = new Node(key, value);\n      } else {\n        var node = new Node(key, value, this.head);\n        this.head.prev = node;\n        this.head = node;\n      }\n\n      //Update the cache map\n      this.cache[key] = this.head;\n      this.size++;\n    }\n\n    // Read from cache map and make that node as new Head of LinkedList\n\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      if (this.cache[key]) {\n        var value = this.cache[key].value;\n\n        // node removed from it's position and cache\n        this.remove(key);\n        // write node again to the head of LinkedList to make it most recently used\n        this.put(key, value);\n\n        return value;\n      }\n\n      console.log(\"Item not available in cache for key \" + key);\n    }\n  }, {\n    key: \"ensureLimit\",\n    value: function ensureLimit() {\n      if (this.size === this.limit) {\n        this.remove(this.tail.key);\n      }\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(key) {\n      var node = this.cache[key];\n\n      if (node.prev !== null) {\n        node.prev.next = node.next;\n      } else {\n        this.head = node.next;\n      }\n\n      if (node.next !== null) {\n        node.next.prev = node.prev;\n      } else {\n        this.tail = node.prev;\n      }\n\n      delete this.cache[key];\n      this.size--;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.head = null;\n      this.tail = null;\n      this.size = 0;\n      this.cache = {};\n    }\n\n    // // Invokes the callback function with every node of the chain and the index of the node.\n    // forEach(fn) {\n    //   let node = this.head;\n    //   let counter = 0;\n    //   while (node) {\n    //     fn(node, counter);\n    //     node = node.next;\n    //     counter++;\n    //   }\n    // }\n\n    // // To iterate over LRU with a 'for...of' loop\n    // *[Symbol.iterator]() {\n    //   let node = this.head;\n    //   while (node) {\n    //     yield node;\n    //     node = node.next;\n    //   }\n    // }\n\n  }]);\n\n  return LRUCache;\n}();\n\nexport default LRUCache;\n//# sourceMappingURL=LRUCache.js.map","var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport LRUCache from './LRUCache';\n\n// A cache for frequently used country-specific regular expressions. Set to 32 to cover ~2-3\n// countries being used for the same doc with ~10 patterns for each country. Some pages will have\n// a lot more countries in use, but typically fewer numbers for each so expanding the cache for\n// that use-case won't have a lot of benefit.\n\nvar RegExpCache = function () {\n\tfunction RegExpCache(size) {\n\t\t_classCallCheck(this, RegExpCache);\n\n\t\tthis.cache = new LRUCache(size);\n\t}\n\n\t_createClass(RegExpCache, [{\n\t\tkey: 'getPatternForRegExp',\n\t\tvalue: function getPatternForRegExp(pattern) {\n\t\t\tvar regExp = this.cache.get(pattern);\n\t\t\tif (!regExp) {\n\t\t\t\tregExp = new RegExp('^' + pattern);\n\t\t\t\tthis.cache.put(pattern, regExp);\n\t\t\t}\n\t\t\treturn regExp;\n\t\t}\n\t}]);\n\n\treturn RegExpCache;\n}();\n\nexport default RegExpCache;\n//# sourceMappingURL=RegExpCache.js.map","import PhoneNumberMatcher from './PhoneNumberMatcher';\n\nexport default function findNumbers(text, options, metadata) {\n\tvar matcher = new PhoneNumberMatcher(text, options, metadata);\n\tvar results = [];\n\twhile (matcher.hasNext()) {\n\t\tresults.push(matcher.next());\n\t}\n\treturn results;\n}\n//# sourceMappingURL=findNumbers_.js.map","import isViablePhoneNumber from './isViablePhoneNumber';\nimport parseNumber from './parse_';\nimport _isValidNumberForRegion from './isValidNumberForRegion_';\n\nexport default function isValidNumberForRegion(number, country, metadata) {\n\tif (typeof number !== 'string') {\n\t\tthrow new TypeError('number must be a string');\n\t}\n\tif (typeof country !== 'string') {\n\t\tthrow new TypeError('country must be a string');\n\t}\n\t// `parse` extracts phone numbers from raw text,\n\t// therefore it will cut off all \"garbage\" characters,\n\t// while this `validate` function needs to verify\n\t// that the phone number contains no \"garbage\"\n\t// therefore the explicit `isViablePhoneNumber` check.\n\tvar input = void 0;\n\tif (isViablePhoneNumber(number)) {\n\t\tinput = parseNumber(number, { defaultCountry: country }, metadata);\n\t} else {\n\t\tinput = {};\n\t}\n\treturn _isValidNumberForRegion(input, country, undefined, metadata);\n}\n//# sourceMappingURL=isValidNumberForRegion.js.map","import { normalizeArguments } from './getNumberType';\nimport _isPossibleNumber from './isPossibleNumber_';\n\n/**\r\n * Checks if a given phone number is possible.\r\n * Which means it only checks phone number length\r\n * and doesn't test any regular expressions.\r\n *\r\n * Examples:\r\n *\r\n * ```js\r\n * isPossibleNumber('+78005553535', metadata)\r\n * isPossibleNumber('8005553535', 'RU', metadata)\r\n * isPossibleNumber('88005553535', 'RU', metadata)\r\n * isPossibleNumber({ phone: '8005553535', country: 'RU' }, metadata)\r\n * ```\r\n */\nexport default function isPossibleNumber() {\n  var _normalizeArguments = normalizeArguments(arguments),\n      input = _normalizeArguments.input,\n      options = _normalizeArguments.options,\n      metadata = _normalizeArguments.metadata;\n\n  return _isPossibleNumber(input, options, metadata);\n}\n//# sourceMappingURL=isPossibleNumber.js.map","import PhoneNumber from './PhoneNumber';\n\nexport default function getExampleNumber(country, examples, metadata) {\n\tif (examples[country]) {\n\t\treturn new PhoneNumber(country, examples[country], metadata);\n\t}\n}\n//# sourceMappingURL=getExampleNumber.js.map","var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nimport parsePhoneNumber from './parsePhoneNumber_';\nimport ParseError from './ParseError';\nimport { isSupportedCountry } from './metadata';\n\nexport default function parsePhoneNumberFromString(text, options, metadata) {\n\t// Validate `defaultCountry`.\n\tif (options && options.defaultCountry && !isSupportedCountry(options.defaultCountry, metadata)) {\n\t\toptions = _extends({}, options, {\n\t\t\tdefaultCountry: undefined\n\t\t});\n\t}\n\t// Parse phone number.\n\ttry {\n\t\treturn parsePhoneNumber(text, options, metadata);\n\t} catch (error) {\n\t\t/* istanbul ignore else */\n\t\tif (error instanceof ParseError) {\n\t\t\t//\n\t\t} else {\n\t\t\tthrow error;\n\t\t}\n\t}\n}\n//# sourceMappingURL=parsePhoneNumberFromString_.js.map","import { normalizeArguments } from './parsePhoneNumber';\nimport parsePhoneNumberFromString_ from './parsePhoneNumberFromString_';\n\nexport default function parsePhoneNumberFromString() {\n\tvar _normalizeArguments = normalizeArguments(arguments),\n\t    text = _normalizeArguments.text,\n\t    options = _normalizeArguments.options,\n\t    metadata = _normalizeArguments.metadata;\n\n\treturn parsePhoneNumberFromString_(text, options, metadata);\n}\n//# sourceMappingURL=parsePhoneNumberFromString.js.map","// This file is a workaround for a bug in web browsers' \"native\"\n// ES6 importing system which is uncapable of importing \"*.json\" files.\n// https://github.com/catamphetamine/libphonenumber-js/issues/239\nexport default {\"version\":\"1.7.32\",\"country_calling_codes\":{\"1\":[\"US\",\"AG\",\"AI\",\"AS\",\"BB\",\"BM\",\"BS\",\"CA\",\"DM\",\"DO\",\"GD\",\"GU\",\"JM\",\"KN\",\"KY\",\"LC\",\"MP\",\"MS\",\"PR\",\"SX\",\"TC\",\"TT\",\"VC\",\"VG\",\"VI\"],\"7\":[\"RU\",\"KZ\"],\"20\":[\"EG\"],\"27\":[\"ZA\"],\"30\":[\"GR\"],\"31\":[\"NL\"],\"32\":[\"BE\"],\"33\":[\"FR\"],\"34\":[\"ES\"],\"36\":[\"HU\"],\"39\":[\"IT\",\"VA\"],\"40\":[\"RO\"],\"41\":[\"CH\"],\"43\":[\"AT\"],\"44\":[\"GB\",\"GG\",\"IM\",\"JE\"],\"45\":[\"DK\"],\"46\":[\"SE\"],\"47\":[\"NO\",\"SJ\"],\"48\":[\"PL\"],\"49\":[\"DE\"],\"51\":[\"PE\"],\"52\":[\"MX\"],\"53\":[\"CU\"],\"54\":[\"AR\"],\"55\":[\"BR\"],\"56\":[\"CL\"],\"57\":[\"CO\"],\"58\":[\"VE\"],\"60\":[\"MY\"],\"61\":[\"AU\",\"CC\",\"CX\"],\"62\":[\"ID\"],\"63\":[\"PH\"],\"64\":[\"NZ\"],\"65\":[\"SG\"],\"66\":[\"TH\"],\"81\":[\"JP\"],\"82\":[\"KR\"],\"84\":[\"VN\"],\"86\":[\"CN\"],\"90\":[\"TR\"],\"91\":[\"IN\"],\"92\":[\"PK\"],\"93\":[\"AF\"],\"94\":[\"LK\"],\"95\":[\"MM\"],\"98\":[\"IR\"],\"211\":[\"SS\"],\"212\":[\"MA\",\"EH\"],\"213\":[\"DZ\"],\"216\":[\"TN\"],\"218\":[\"LY\"],\"220\":[\"GM\"],\"221\":[\"SN\"],\"222\":[\"MR\"],\"223\":[\"ML\"],\"224\":[\"GN\"],\"225\":[\"CI\"],\"226\":[\"BF\"],\"227\":[\"NE\"],\"228\":[\"TG\"],\"229\":[\"BJ\"],\"230\":[\"MU\"],\"231\":[\"LR\"],\"232\":[\"SL\"],\"233\":[\"GH\"],\"234\":[\"NG\"],\"235\":[\"TD\"],\"236\":[\"CF\"],\"237\":[\"CM\"],\"238\":[\"CV\"],\"239\":[\"ST\"],\"240\":[\"GQ\"],\"241\":[\"GA\"],\"242\":[\"CG\"],\"243\":[\"CD\"],\"244\":[\"AO\"],\"245\":[\"GW\"],\"246\":[\"IO\"],\"247\":[\"AC\"],\"248\":[\"SC\"],\"249\":[\"SD\"],\"250\":[\"RW\"],\"251\":[\"ET\"],\"252\":[\"SO\"],\"253\":[\"DJ\"],\"254\":[\"KE\"],\"255\":[\"TZ\"],\"256\":[\"UG\"],\"257\":[\"BI\"],\"258\":[\"MZ\"],\"260\":[\"ZM\"],\"261\":[\"MG\"],\"262\":[\"RE\",\"YT\"],\"263\":[\"ZW\"],\"264\":[\"NA\"],\"265\":[\"MW\"],\"266\":[\"LS\"],\"267\":[\"BW\"],\"268\":[\"SZ\"],\"269\":[\"KM\"],\"290\":[\"SH\",\"TA\"],\"291\":[\"ER\"],\"297\":[\"AW\"],\"298\":[\"FO\"],\"299\":[\"GL\"],\"350\":[\"GI\"],\"351\":[\"PT\"],\"352\":[\"LU\"],\"353\":[\"IE\"],\"354\":[\"IS\"],\"355\":[\"AL\"],\"356\":[\"MT\"],\"357\":[\"CY\"],\"358\":[\"FI\",\"AX\"],\"359\":[\"BG\"],\"370\":[\"LT\"],\"371\":[\"LV\"],\"372\":[\"EE\"],\"373\":[\"MD\"],\"374\":[\"AM\"],\"375\":[\"BY\"],\"376\":[\"AD\"],\"377\":[\"MC\"],\"378\":[\"SM\"],\"380\":[\"UA\"],\"381\":[\"RS\"],\"382\":[\"ME\"],\"383\":[\"XK\"],\"385\":[\"HR\"],\"386\":[\"SI\"],\"387\":[\"BA\"],\"389\":[\"MK\"],\"420\":[\"CZ\"],\"421\":[\"SK\"],\"423\":[\"LI\"],\"500\":[\"FK\"],\"501\":[\"BZ\"],\"502\":[\"GT\"],\"503\":[\"SV\"],\"504\":[\"HN\"],\"505\":[\"NI\"],\"506\":[\"CR\"],\"507\":[\"PA\"],\"508\":[\"PM\"],\"509\":[\"HT\"],\"590\":[\"GP\",\"BL\",\"MF\"],\"591\":[\"BO\"],\"592\":[\"GY\"],\"593\":[\"EC\"],\"594\":[\"GF\"],\"595\":[\"PY\"],\"596\":[\"MQ\"],\"597\":[\"SR\"],\"598\":[\"UY\"],\"599\":[\"CW\",\"BQ\"],\"670\":[\"TL\"],\"672\":[\"NF\"],\"673\":[\"BN\"],\"674\":[\"NR\"],\"675\":[\"PG\"],\"676\":[\"TO\"],\"677\":[\"SB\"],\"678\":[\"VU\"],\"679\":[\"FJ\"],\"680\":[\"PW\"],\"681\":[\"WF\"],\"682\":[\"CK\"],\"683\":[\"NU\"],\"685\":[\"WS\"],\"686\":[\"KI\"],\"687\":[\"NC\"],\"688\":[\"TV\"],\"689\":[\"PF\"],\"690\":[\"TK\"],\"691\":[\"FM\"],\"692\":[\"MH\"],\"800\":[\"001\"],\"808\":[\"001\"],\"850\":[\"KP\"],\"852\":[\"HK\"],\"853\":[\"MO\"],\"855\":[\"KH\"],\"856\":[\"LA\"],\"870\":[\"001\"],\"878\":[\"001\"],\"880\":[\"BD\"],\"881\":[\"001\"],\"882\":[\"001\"],\"883\":[\"001\"],\"886\":[\"TW\"],\"888\":[\"001\"],\"960\":[\"MV\"],\"961\":[\"LB\"],\"962\":[\"JO\"],\"963\":[\"SY\"],\"964\":[\"IQ\"],\"965\":[\"KW\"],\"966\":[\"SA\"],\"967\":[\"YE\"],\"968\":[\"OM\"],\"970\":[\"PS\"],\"971\":[\"AE\"],\"972\":[\"IL\"],\"973\":[\"BH\"],\"974\":[\"QA\"],\"975\":[\"BT\"],\"976\":[\"MN\"],\"977\":[\"NP\"],\"979\":[\"001\"],\"992\":[\"TJ\"],\"993\":[\"TM\"],\"994\":[\"AZ\"],\"995\":[\"GE\"],\"996\":[\"KG\"],\"998\":[\"UZ\"]},\"countries\":{\"AC\":[\"247\",\"00\",\"(?:[01589]\\\\d|[46])\\\\d{4}\",[5,6]],\"AD\":[\"376\",\"00\",\"(?:1|6\\\\d)\\\\d{7}|[136-9]\\\\d{5}\",[6,8,9],[[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"[136-9]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"1\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6\"]]]],\"AE\":[\"971\",\"00\",\"(?:[4-7]\\\\d|9[0-689])\\\\d{7}|800\\\\d{2,9}|[2-4679]\\\\d{7}\",[5,6,7,8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{2,9})\",\"$1 $2\",[\"60|8\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[236]|[479][2-8]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{5})\",\"$1 $2 $3\",[\"[479]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"5\"],\"0$1\"]],\"0\"],\"AF\":[\"93\",\"00\",\"[2-7]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-7]\"],\"0$1\"]],\"0\"],\"AG\":[\"1\",\"011\",\"(?:268|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([457]\\\\d{6})$\",\"268$1\",0,\"268\"],\"AI\":[\"1\",\"011\",\"(?:264|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2457]\\\\d{6})$\",\"264$1\",0,\"264\"],\"AL\":[\"355\",\"00\",\"(?:700\\\\d\\\\d|900)\\\\d{3}|8\\\\d{5,7}|(?:[2-5]|6\\\\d)\\\\d{7}\",[6,7,8,9],[[\"(\\\\d{3})(\\\\d{3,4})\",\"$1 $2\",[\"80|9\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"4[2-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2358][2-5]|4\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[23578]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"6\"],\"0$1\"]],\"0\"],\"AM\":[\"374\",\"00\",\"(?:[1-489]\\\\d|55|60|77)\\\\d{6}\",[8],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]0\"],\"0 $1\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"2|3[12]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"1|47\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[3-9]\"],\"0$1\"]],\"0\"],\"AO\":[\"244\",\"00\",\"[29]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[29]\"]]]],\"AR\":[\"54\",\"00\",\"11\\\\d{8}|(?:[2368]|9\\\\d)\\\\d{9}\",[10,11],[[\"(\\\\d{4})(\\\\d{2})(\\\\d{4})\",\"$1 $2-$3\",[\"2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9])\",\"2(?:[23]02|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8]))|2(?:2[24-9]|3[1-59]|47)\",\"2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3[78]|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8[23])|7[1-578]|8(?:[2469]|3[278]|5[56][46]|86[3-6]))|2(?:2[24-9]|3[1-59]|47)|38(?:[58][78]|7[378])|3(?:4[35][56]|58[45]|8(?:[38]5|54|76))[4-6]\",\"2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|[78])|58|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3[278]|54(?:4|5[13-7]|6[89])|86[3-6]))|2(?:2[24-9]|3[1-59]|47)|38(?:[58][78]|7[378])|3(?:454|85[56])[46]|3(?:4(?:36|5[56])|8(?:[38]5|76))[4-6]\"],\"0$1\",1],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2-$3\",[\"1\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[68]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2-$3\",[\"[23]\"],\"0$1\",1],[\"(\\\\d)(\\\\d{4})(\\\\d{2})(\\\\d{4})\",\"$2 15-$3-$4\",[\"9(?:2[2-469]|3[3-578])\",\"9(?:2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9]))\",\"9(?:2(?:[23]02|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8])))|92(?:2[24-9]|3[1-59]|47)\",\"9(?:2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3[78]|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8[23])|7[1-578]|8(?:[2469]|3[278]|5(?:[56][46]|[78])|7[378]|8(?:6[3-6]|[78]))))|92(?:2[24-9]|3[1-59]|47)|93(?:4[35][56]|58[45]|8(?:[38]5|54|76))[4-6]\",\"9(?:2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|[78])|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3[278]|5(?:4(?:4|5[13-7]|6[89])|[56][46]|[78])|7[378]|8(?:6[3-6]|[78]))))|92(?:2[24-9]|3[1-59]|47)|93(?:4(?:36|5[56])|8(?:[38]5|76))[4-6]\"],\"0$1\",0,\"$1 $2 $3-$4\"],[\"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$2 15-$3-$4\",[\"91\"],\"0$1\",0,\"$1 $2 $3-$4\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$2 15-$3-$4\",[\"9\"],\"0$1\",0,\"$1 $2 $3-$4\"]],\"0\",0,\"0?(?:(11|2(?:2(?:02?|[13]|2[13-79]|4[1-6]|5[2457]|6[124-8]|7[1-4]|8[13-6]|9[1267])|3(?:02?|1[467]|2[03-6]|3[13-8]|[49][2-6]|5[2-8]|[67])|4(?:7[3-578]|9)|6(?:[0136]|2[24-6]|4[6-8]?|5[15-8])|80|9(?:0[1-3]|[19]|2\\\\d|3[1-6]|4[02568]?|5[2-4]|6[2-46]|72?|8[23]?))|3(?:3(?:2[79]|6|8[2578])|4(?:0[0-24-9]|[12]|3[5-8]?|4[24-7]|5[4-68]?|6[02-9]|7[126]|8[2379]?|9[1-36-8])|5(?:1|2[1245]|3[237]?|4[1-46-9]|6[2-4]|7[1-6]|8[2-5]?)|6[24]|7(?:[069]|1[1568]|2[15]|3[145]|4[13]|5[14-8]|7[2-57]|8[126])|8(?:[01]|2[15-7]|3[2578]?|4[13-6]|5[4-8]?|6[1-357-9]|7[36-8]?|8[5-8]?|9[124])))15)?\",\"9$1\"],\"AS\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|684|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([267]\\\\d{6})$\",\"684$1\",0,\"684\"],\"AT\":[\"43\",\"00\",\"1\\\\d{3,12}|2\\\\d{6,12}|43(?:(?:0\\\\d|5[02-9])\\\\d{3,9}|2\\\\d{4,5}|[3467]\\\\d{4}|8\\\\d{4,6}|9\\\\d{4,7})|5\\\\d{4,12}|8\\\\d{7,12}|9\\\\d{8,12}|(?:[367]\\\\d|4[0-24-9])\\\\d{4,11}\",[4,5,6,7,8,9,10,11,12,13],[[\"(\\\\d)(\\\\d{3,12})\",\"$1 $2\",[\"1(?:11|[2-9])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})\",\"$1 $2\",[\"517\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,5})\",\"$1 $2\",[\"5[079]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,10})\",\"$1 $2\",[\"(?:31|4)6|51|6(?:5[0-3579]|[6-9])|7(?:20|32|8)|[89]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3,9})\",\"$1 $2\",[\"[2-467]|5[2-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"5\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4,7})\",\"$1 $2 $3\",[\"5\"],\"0$1\"]],\"0\"],\"AU\":[\"61\",\"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\",\"1(?:[0-79]\\\\d{7,8}|8[0-24-9]\\\\d{7})|(?:[2-478]\\\\d\\\\d|550)\\\\d{6}|1\\\\d{4,7}\",[5,6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{3,4})\",\"$1 $2\",[\"16\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,4})\",\"$1 $2 $3\",[\"16\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"14|[45]\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[2378]\"],\"(0$1)\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1(?:30|[89])\"]]],\"0\",0,\"0|(183[12])\",0,0,0,[[\"(?:[237]\\\\d{5}|8(?:51(?:0(?:0[03-9]|[1247]\\\\d|3[2-9]|5[0-8]|6[1-9]|8[0-6])|1(?:1[69]|[23]\\\\d|4[0-4]))|(?:[6-8]\\\\d{3}|9(?:[02-9]\\\\d\\\\d|1(?:[0-57-9]\\\\d|6[0135-9])))\\\\d))\\\\d{3}\",[9]],[\"483[0-3]\\\\d{5}|4(?:[0-3]\\\\d|4[047-9]|5[0-25-9]|6[06-9]|7[02-9]|8[0-2457-9]|9[0-27-9])\\\\d{6}\",[9]],[\"180(?:0\\\\d{3}|2)\\\\d{3}\",[7,10]],[\"190[0-26]\\\\d{6}\",[10]],0,0,0,[\"16\\\\d{3,7}\",[5,6,7,8,9]],[\"(?:14(?:5(?:1[0458]|[23][458])|71\\\\d)|550\\\\d\\\\d)\\\\d{4}\",[9]],[\"13(?:00\\\\d{3}|45[0-4])\\\\d{3}|13\\\\d{4}\",[6,8,10]]],\"0011\"],\"AW\":[\"297\",\"00\",\"(?:[25-79]\\\\d\\\\d|800)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[25-9]\"]]]],\"AX\":[\"358\",\"00|99(?:[01469]|5(?:[14]1|3[23]|5[59]|77|88|9[09]))\",\"2\\\\d{4,9}|35\\\\d{4,5}|(?:60\\\\d\\\\d|800)\\\\d{4,6}|7\\\\d{5,11}|(?:[14]\\\\d|3[0-46-9]|50)\\\\d{4,8}\",[5,6,7,8,9,10,11,12],0,\"0\",0,0,0,0,\"18\",0,\"00\"],\"AZ\":[\"994\",\"00\",\"365\\\\d{6}|(?:[124579]\\\\d|60|88)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"90\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[12]|365\",\"[12]|365\",\"[12]|365(?:[0-46-9]|5[0-35-9])\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[3-9]\"],\"0$1\"]],\"0\"],\"BA\":[\"387\",\"00\",\"6\\\\d{8}|(?:[35689]\\\\d|49|70)\\\\d{6}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6[1-3]|[7-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2-$3\",[\"[3-5]|6[56]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"6\"],\"0$1\"]],\"0\"],\"BB\":[\"1\",\"011\",\"(?:246|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-9]\\\\d{6})$\",\"246$1\",0,\"246\"],\"BD\":[\"880\",\"00\",\"[13469]\\\\d{9}|8[0-79]\\\\d{7,8}|[2-7]\\\\d{8}|[2-9]\\\\d{7}|[3-689]\\\\d{6}|[57-9]\\\\d{5}\",[6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{4,6})\",\"$1-$2\",[\"31[5-7]|[459]1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,7})\",\"$1-$2\",[\"3(?:[67]|8[013-9])|4(?:6[168]|7|[89][18])|5(?:6[128]|9)|6(?:28|4[14]|5)|7[2-589]|8(?:0[014-9]|[12])|9[358]|(?:3[2-5]|4[235]|5[2-578]|6[0389]|76|8[3-7]|9[24])1|(?:44|66)[01346-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3,6})\",\"$1-$2\",[\"[13-9]\"],\"0$1\"],[\"(\\\\d)(\\\\d{7,8})\",\"$1-$2\",[\"2\"],\"0$1\"]],\"0\"],\"BE\":[\"32\",\"00\",\"4\\\\d{8}|[1-9]\\\\d{7}\",[8,9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"(?:80|9)0\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[239]|4[23]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[15-8]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"4\"],\"0$1\"]],\"0\"],\"BF\":[\"226\",\"00\",\"[025-7]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[025-7]\"]]]],\"BG\":[\"359\",\"00\",\"[2-7]\\\\d{6,7}|[89]\\\\d{6,8}|2\\\\d{5}\",[6,7,8,9],[[\"(\\\\d)(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"43[1-6]|70[1-9]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,3})\",\"$1 $2 $3\",[\"[356]|4[124-7]|7[1-9]|8[1-6]|9[1-7]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"(?:70|8)0\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1 $2 $3\",[\"43[1-7]|7\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[48]|9[08]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"],\"0$1\"]],\"0\"],\"BH\":[\"973\",\"00\",\"[136-9]\\\\d{7}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[13679]|8[047]\"]]]],\"BI\":[\"257\",\"00\",\"(?:[267]\\\\d|31)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2367]\"]]]],\"BJ\":[\"229\",\"00\",\"[2689]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2689]\"]]]],\"BL\":[\"590\",\"00\",\"(?:590|69\\\\d|976)\\\\d{6}\",[9],0,\"0\",0,0,0,0,0,[[\"590(?:2[7-9]|5[12]|87)\\\\d{4}\"],[\"69(?:0\\\\d\\\\d|1(?:2[29]|3[0-5]))\\\\d{4}\"],0,0,0,0,0,0,[\"976[01]\\\\d{5}\"]]],\"BM\":[\"1\",\"011\",\"(?:441|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-8]\\\\d{6})$\",\"441$1\",0,\"441\"],\"BN\":[\"673\",\"00\",\"[2-578]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-578]\"]]]],\"BO\":[\"591\",\"00(?:1\\\\d)?\",\"(?:[2-467]\\\\d\\\\d|8001)\\\\d{5}\",[8,9],[[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"[23]|4[46]\"]],[\"(\\\\d{8})\",\"$1\",[\"[67]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]]],\"0\",0,\"0(1\\\\d)?\"],\"BQ\":[\"599\",\"00\",\"(?:[34]1|7\\\\d)\\\\d{5}\",[7],0,0,0,0,0,0,\"[347]\"],\"BR\":[\"55\",\"00(?:1[245]|2[1-35]|31|4[13]|[56]5|99)\",\"(?:[1-46-9]\\\\d\\\\d|5(?:[0-46-9]\\\\d|5[0-24679]))\\\\d{8}|[1-9]\\\\d{9}|[3589]\\\\d{8}|[34]\\\\d{7}\",[8,9,10,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"300|4(?:0[02]|37)\",\"4(?:02|37)0|[34]00\"]],[\"(\\\\d{3})(\\\\d{2,3})(\\\\d{4})\",\"$1 $2 $3\",[\"(?:[358]|90)0\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2-$3\",[\"(?:[14689][1-9]|2[12478]|3[1-578]|5[13-5]|7[13-579])[2-57]\"],\"($1)\"],[\"(\\\\d{2})(\\\\d{5})(\\\\d{4})\",\"$1 $2-$3\",[\"[16][1-9]|[2-57-9]\"],\"($1)\"]],\"0\",0,\"0(?:(1[245]|2[1-35]|31|4[13]|[56]5|99)(\\\\d{10,11}))?\",\"$2\"],\"BS\":[\"1\",\"011\",\"(?:242|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([3-8]\\\\d{6})$\",\"242$1\",0,\"242\"],\"BT\":[\"975\",\"00\",\"[17]\\\\d{7}|[2-8]\\\\d{6}\",[7,8],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-68]|7[246]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"1[67]|7\"]]]],\"BW\":[\"267\",\"00\",\"90\\\\d{5}|(?:[2-6]|7\\\\d)\\\\d{6}\",[7,8],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"90\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-6]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"7\"]]]],\"BY\":[\"375\",\"810\",\"(?:[12]\\\\d|33|44|902)\\\\d{7}|8(?:0[0-79]\\\\d{5,7}|[1-7]\\\\d{9})|8(?:1[0-489]|[5-79]\\\\d)\\\\d{7}|8[1-79]\\\\d{6,7}|8[0-79]\\\\d{5}|8\\\\d{5}\",[6,7,8,9,10,11],[[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"800\"],\"8 $1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,4})\",\"$1 $2 $3\",[\"800\"],\"8 $1\"],[\"(\\\\d{4})(\\\\d{2})(\\\\d{3})\",\"$1 $2-$3\",[\"1(?:5[169]|6[3-5]|7[179])|2(?:1[35]|2[34]|3[3-5])\",\"1(?:5[169]|6(?:3[1-3]|4|5[125])|7(?:1[3-9]|7[0-24-6]|9[2-7]))|2(?:1[35]|2[34]|3[3-5])\"],\"8 0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"1(?:[56]|7[467])|2[1-3]\"],\"8 0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"[1-4]\"],\"8 0$1\"],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"8 $1\"]],\"8\",0,\"0|80?\",0,0,0,0,\"8~10\"],\"BZ\":[\"501\",\"00\",\"(?:0800\\\\d|[2-8])\\\\d{6}\",[7,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[2-8]\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})(\\\\d{3})\",\"$1-$2-$3-$4\",[\"0\"]]]],\"CA\":[\"1\",\"011\",\"(?:[2-8]\\\\d|90)\\\\d{8}\",[10],0,\"1\",0,0,0,0,0,[[\"(?:2(?:04|[23]6|[48]9|50)|3(?:06|43|65)|4(?:03|1[68]|3[178]|50)|5(?:06|1[49]|48|79|8[17])|6(?:04|13|39|47|72)|7(?:0[59]|78|8[02])|8(?:[06]7|19|25|73)|90[25])[2-9]\\\\d{6}\"],[\"\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"(?:5(?:00|2[12]|33|44|66|77|88)|622)[2-9]\\\\d{6}\"],0,0,0,[\"600[2-9]\\\\d{6}\"]]],\"CC\":[\"61\",\"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\",\"1(?:[0-79]\\\\d|8[0-24-9])\\\\d{7}|(?:[148]\\\\d\\\\d|550)\\\\d{6}|1\\\\d{5,7}\",[6,7,8,9,10],0,\"0\",0,\"0|([59]\\\\d{7})$\",\"8$1\",0,0,[[\"8(?:51(?:0(?:02|31|60)|118)|91(?:0(?:1[0-2]|29)|1(?:[28]2|50|79)|2(?:10|64)|3(?:[06]8|22)|4[29]8|62\\\\d|70[23]|959))\\\\d{3}\",[9]],[\"483[0-3]\\\\d{5}|4(?:[0-3]\\\\d|4[047-9]|5[0-25-9]|6[06-9]|7[02-9]|8[0-2457-9]|9[0-27-9])\\\\d{6}\",[9]],[\"180(?:0\\\\d{3}|2)\\\\d{3}\",[7,10]],[\"190[0-26]\\\\d{6}\",[10]],0,0,0,0,[\"(?:14(?:5(?:1[0458]|[23][458])|71\\\\d)|550\\\\d\\\\d)\\\\d{4}\",[9]],[\"13(?:00\\\\d{3}|45[0-4])\\\\d{3}|13\\\\d{4}\",[6,8,10]]],\"0011\"],\"CD\":[\"243\",\"00\",\"[189]\\\\d{8}|[1-68]\\\\d{6}\",[7,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"88\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"[1-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"]],\"0\"],\"CF\":[\"236\",\"00\",\"(?:[27]\\\\d{3}|8776)\\\\d{4}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[278]\"]]]],\"CG\":[\"242\",\"00\",\"222\\\\d{6}|(?:0\\\\d|80)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"801\"]],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[02]\"]]]],\"CH\":[\"41\",\"00\",\"8\\\\d{11}|[2-9]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8[047]|90\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-79]|81\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"8\"],\"0$1\"]],\"0\"],\"CI\":[\"225\",\"00\",\"[02-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[02-9]\"]]]],\"CK\":[\"682\",\"00\",\"[2-578]\\\\d{4}\",[5],[[\"(\\\\d{2})(\\\\d{3})\",\"$1 $2\",[\"[2-578]\"]]]],\"CL\":[\"56\",\"(?:0|1(?:1[0-69]|2[0-57]|5[13-58]|69|7[0167]|8[018]))0\",\"12300\\\\d{6}|6\\\\d{9,10}|[2-9]\\\\d{8}\",[9,10,11],[[\"(\\\\d{5})(\\\\d{4})\",\"$1 $2\",[\"21\"],\"($1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"44\"]],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2[23]\"],\"($1)\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"9[2-9]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"3[2-5]|[47]|5[1-3578]|6[13-57]|8(?:0[1-9]|[1-9])\"],\"($1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"60|8\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"60\"]]]],\"CM\":[\"237\",\"00\",\"(?:[26]\\\\d\\\\d|88)\\\\d{6}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"88\"]],[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"[26]\"]]]],\"CN\":[\"86\",\"00|1(?:[12]\\\\d|79|9[0235-7])\\\\d\\\\d00\",\"1[1279]\\\\d{8,9}|2\\\\d{9}(?:\\\\d{2})?|[12]\\\\d{6,7}|86\\\\d{6}|(?:1[03-68]\\\\d|6)\\\\d{7,9}|(?:[3-579]\\\\d|8[0-57-9])\\\\d{6,9}\",[7,8,9,10,11,12],[[\"(\\\\d{2})(\\\\d{5,6})\",\"$1 $2\",[\"(?:10|2[0-57-9])[19]\",\"(?:10|2[0-57-9])(?:10|9[56])\",\"(?:10|2[0-57-9])(?:100|9[56])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5,6})\",\"$1 $2\",[\"3(?:[157]|35|49|9[1-68])|4(?:[17]|2[179]|6[47-9]|8[23])|5(?:[1357]|2[37]|4[36]|6[1-46]|80)|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]|4[13]|5[1-5])|(?:4[35]|59|85)[1-9]\",\"(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[1-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))[19]\",\"85[23](?:10|95)|(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))(?:10|9[56])\",\"85[23](?:100|95)|(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))(?:100|9[56])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"(?:4|80)0\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"10|2(?:[02-57-9]|1[1-9])\",\"10|2(?:[02-57-9]|1[1-9])\",\"10[0-79]|2(?:[02-57-9]|1[1-79])|(?:10|21)8(?:0[1-9]|[1-9])\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"3(?:[3-59]|7[02-68])|4(?:[26-8]|3[3-9]|5[2-9])|5(?:3[03-9]|[468]|7[028]|9[2-46-9])|6|7(?:[0-247]|3[04-9]|5[0-4689]|6[2368])|8(?:[1-358]|9[1-7])|9(?:[013479]|5[1-5])|(?:[34]1|55|79|87)[02-9]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{7,8})\",\"$1 $2\",[\"9\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"80\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[3-578]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"1[3-9]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"[12]\"],\"0$1\",1]],\"0\",0,\"0|(1(?:[12]\\\\d|79|9[0235-7])\\\\d\\\\d)\",0,0,0,0,\"00\"],\"CO\":[\"57\",\"00(?:4(?:[14]4|56)|[579])\",\"(?:1\\\\d|3)\\\\d{9}|[124-8]\\\\d{7}\",[8,10,11],[[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"[14][2-9]|[25-8]\"],\"($1)\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"3\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{7})\",\"$1-$2-$3\",[\"1\"],\"0$1\",0,\"$1 $2 $3\"]],\"0\",0,\"0([3579]|4(?:[14]4|56))?\"],\"CR\":[\"506\",\"00\",\"(?:8\\\\d|90)\\\\d{8}|[24-8]\\\\d{7}\",[8,10],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[24-7]|8[3-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[89]\"]]],0,0,\"(19(?:0[0-2468]|1[09]|20|66|77|99))\"],\"CU\":[\"53\",\"119\",\"[27]\\\\d{6,7}|[34]\\\\d{5,7}|(?:5|8\\\\d\\\\d)\\\\d{7}\",[6,7,8,10],[[\"(\\\\d{2})(\\\\d{4,6})\",\"$1 $2\",[\"2[1-4]|[34]\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{6,7})\",\"$1 $2\",[\"7\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"5\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"8\"],\"0$1\"]],\"0\"],\"CV\":[\"238\",\"0\",\"(?:[2-59]\\\\d\\\\d|800)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[2-589]\"]]]],\"CW\":[\"599\",\"00\",\"(?:[34]1|60|(?:7|9\\\\d)\\\\d)\\\\d{5}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[3467]\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"9[4-8]\"]]],0,0,0,0,0,\"[69]\"],\"CX\":[\"61\",\"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\",\"1(?:[0-79]\\\\d|8[0-24-9])\\\\d{7}|(?:[148]\\\\d\\\\d|550)\\\\d{6}|1\\\\d{5,7}\",[6,7,8,9,10],0,\"0\",0,\"0|([59]\\\\d{7})$\",\"8$1\",0,0,[[\"8(?:51(?:0(?:01|30|59)|117)|91(?:00[6-9]|1(?:[28]1|49|78)|2(?:09|63)|3(?:12|26|75)|4(?:56|97)|64\\\\d|7(?:0[01]|1[0-2])|958))\\\\d{3}\",[9]],[\"483[0-3]\\\\d{5}|4(?:[0-3]\\\\d|4[047-9]|5[0-25-9]|6[06-9]|7[02-9]|8[0-2457-9]|9[0-27-9])\\\\d{6}\",[9]],[\"180(?:0\\\\d{3}|2)\\\\d{3}\",[7,10]],[\"190[0-26]\\\\d{6}\",[10]],0,0,0,0,[\"(?:14(?:5(?:1[0458]|[23][458])|71\\\\d)|550\\\\d\\\\d)\\\\d{4}\",[9]],[\"13(?:00\\\\d{3}|45[0-4])\\\\d{3}|13\\\\d{4}\",[6,8,10]]],\"0011\"],\"CY\":[\"357\",\"00\",\"(?:[279]\\\\d|[58]0)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[257-9]\"]]]],\"CZ\":[\"420\",\"00\",\"(?:[2-578]\\\\d|60)\\\\d{7}|9\\\\d{8,11}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-8]|9[015-7]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"9\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"9\"]]]],\"DE\":[\"49\",\"00\",\"[2579]\\\\d{5,14}|49(?:[05]\\\\d{10}|[46][1-8]\\\\d{4,9})|49(?:[0-25]\\\\d|3[1-689]|7[1-7])\\\\d{4,8}|49(?:[0-2579]\\\\d|[34][1-9]|6[0-8])\\\\d{3}|49\\\\d{3,4}|(?:1|[368]\\\\d|4[0-8])\\\\d{3,13}\",[4,5,6,7,8,9,10,11,12,13,14,15],[[\"(\\\\d{2})(\\\\d{3,13})\",\"$1 $2\",[\"3[02]|40|[68]9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,12})\",\"$1 $2\",[\"2(?:0[1-389]|1[124]|2[18]|3[14])|3(?:[35-9][15]|4[015])|906|(?:2[4-9]|4[2-9]|[579][1-9]|[68][1-8])1\",\"2(?:0[1-389]|12[0-8])|3(?:[35-9][15]|4[015])|906|2(?:[13][14]|2[18])|(?:2[4-9]|4[2-9]|[579][1-9]|[68][1-8])1\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{2,11})\",\"$1 $2\",[\"[24-6]|3(?:[3569][02-46-9]|4[2-4679]|7[2-467]|8[2-46-8])|70[2-8]|8(?:0[2-9]|[1-8])|90[7-9]|[79][1-9]\",\"[24-6]|3(?:3(?:0[1-467]|2[127-9]|3[124578]|7[1257-9]|8[1256]|9[145])|4(?:2[135]|4[13578]|9[1346])|5(?:0[14]|2[1-3589]|6[1-4]|7[13468]|8[13568])|6(?:2[1-489]|3[124-6]|6[13]|7[12579]|8[1-356]|9[135])|7(?:2[1-7]|4[145]|6[1-5]|7[1-4])|8(?:21|3[1468]|6|7[1467]|8[136])|9(?:0[12479]|2[1358]|4[134679]|6[1-9]|7[136]|8[147]|9[1468]))|70[2-8]|8(?:0[2-9]|[1-8])|90[7-9]|[79][1-9]|3[68]4[1347]|3(?:47|60)[1356]|3(?:3[46]|46|5[49])[1246]|3[4579]3[1357]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"138\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{2,10})\",\"$1 $2\",[\"3\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5,11})\",\"$1 $2\",[\"181\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{4,10})\",\"$1 $2 $3\",[\"1(?:3|80)|9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7,8})\",\"$1 $2\",[\"1[67]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7,12})\",\"$1 $2\",[\"8\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{6})\",\"$1 $2\",[\"185\",\"1850\",\"18500\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{7})\",\"$1 $2\",[\"18[68]\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{6})\",\"$1 $2\",[\"15[0568]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{7})\",\"$1 $2\",[\"15[1279]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{8})\",\"$1 $2\",[\"18\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{7,8})\",\"$1 $2 $3\",[\"1(?:6[023]|7)\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{2})(\\\\d{7})\",\"$1 $2 $3\",[\"15[279]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{8})\",\"$1 $2 $3\",[\"15\"],\"0$1\"]],\"0\"],\"DJ\":[\"253\",\"00\",\"(?:2\\\\d|77)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[27]\"]]]],\"DK\":[\"45\",\"00\",\"[2-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-9]\"]]]],\"DM\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|767|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-7]\\\\d{6})$\",\"767$1\",0,\"767\"],\"DO\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,0,0,0,\"8[024]9\"],\"DZ\":[\"213\",\"00\",\"(?:[1-4]|[5-79]\\\\d|80)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[1-4]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-8]\"],\"0$1\"]],\"0\"],\"EC\":[\"593\",\"00\",\"1800\\\\d{6,7}|(?:[2-7]|9\\\\d)\\\\d{7}\",[8,9,10,11],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2-$3\",[\"[2-7]\"],\"(0$1)\",0,\"$1-$2-$3\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"1\"]]],\"0\"],\"EE\":[\"372\",\"00\",\"8\\\\d{9}|[4578]\\\\d{7}|(?:[3-8]\\\\d\\\\d|900)\\\\d{4}\",[7,8,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[369]|4[3-8]|5(?:[0-2]|5[0-478]|6[45])|7[1-9]\",\"[369]|4[3-8]|5(?:[02]|1(?:[0-8]|95)|5[0-478]|6(?:4[0-4]|5[1-589]))|7[1-9]\"]],[\"(\\\\d{4})(\\\\d{3,4})\",\"$1 $2\",[\"[45]|8(?:00|[1-4])\",\"[45]|8(?:00[1-9]|[1-4])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"80\"]]]],\"EG\":[\"20\",\"00\",\"[189]\\\\d{8,9}|[24-6]\\\\d{8}|[135]\\\\d{7}\",[8,9,10],[[\"(\\\\d)(\\\\d{7,8})\",\"$1 $2\",[\"[23]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{6,7})\",\"$1 $2\",[\"1[35]|[4-6]|8[2468]|9[235-7]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[189]\"],\"0$1\"]],\"0\"],\"EH\":[\"212\",\"00\",\"[5-8]\\\\d{8}\",[9],0,\"0\",0,0,0,0,\"528[89]\"],\"ER\":[\"291\",\"00\",\"[178]\\\\d{6}\",[7],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[178]\"],\"0$1\"]],\"0\"],\"ES\":[\"34\",\"00\",\"(?:51|[6-9]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]00\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-9]\"]]]],\"ET\":[\"251\",\"00\",\"(?:11|[2-59]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-59]\"],\"0$1\"]],\"0\"],\"FI\":[\"358\",\"00|99(?:[01469]|5(?:[14]1|3[23]|5[59]|77|88|9[09]))\",\"[1-35689]\\\\d{4}|7\\\\d{10,11}|(?:[124-7]\\\\d|3[0-46-9])\\\\d{8}|[1-9]\\\\d{5,8}\",[5,6,7,8,9,10,11,12],[[\"(\\\\d)(\\\\d{4,9})\",\"$1 $2\",[\"[2568][1-8]|3(?:0[1-9]|[1-9])|9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,7})\",\"$1 $2\",[\"[12]00|[368]|70[07-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4,8})\",\"$1 $2\",[\"[1245]|7[135]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{6,10})\",\"$1 $2\",[\"7\"],\"0$1\"]],\"0\",0,0,0,0,\"1[03-79]|[2-9]\",0,\"00\"],\"FJ\":[\"679\",\"0(?:0|52)\",\"45\\\\d{5}|(?:0800\\\\d|[235-9])\\\\d{6}\",[7,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[235-9]|45\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"0\"]]],0,0,0,0,0,0,0,\"00\"],\"FK\":[\"500\",\"00\",\"[2-7]\\\\d{4}\",[5]],\"FM\":[\"691\",\"00\",\"[39]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[39]\"]]]],\"FO\":[\"298\",\"00\",\"(?:[2-8]\\\\d|90)\\\\d{4}\",[6],[[\"(\\\\d{6})\",\"$1\",[\"[2-9]\"]]],0,0,\"(10(?:01|[12]0|88))\"],\"FR\":[\"33\",\"00\",\"[1-9]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0 $1\"],[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"[1-79]\"],\"0$1\"]],\"0\"],\"GA\":[\"241\",\"00\",\"(?:[067]\\\\d|11)\\\\d{6}|[2-7]\\\\d{6}\",[7,8],[[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-7]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"11|[67]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"0\"]]],0,0,\"0(11\\\\d{6}|6[256]\\\\d{6}|7[47]\\\\d{6})\",\"$1\"],\"GB\":[\"44\",\"00\",\"[1-357-9]\\\\d{9}|[18]\\\\d{8}|8\\\\d{6}\",[7,9,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"800\",\"8001\",\"80011\",\"800111\",\"8001111\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"845\",\"8454\",\"84546\",\"845464\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"800\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{4,5})\",\"$1 $2\",[\"1(?:38|5[23]|69|76|94)\",\"1(?:(?:38|69)7|5(?:24|39)|768|946)\",\"1(?:3873|5(?:242|39[4-6])|(?:697|768)[347]|9467)\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5,6})\",\"$1 $2\",[\"1(?:[2-69][02-9]|[78])\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[25]|7(?:0|6[024-9])\",\"[25]|7(?:0|6(?:[04-9]|2[356]))\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"7\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1389]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:1(?:(?:1(?:3[0-58]|4[0-5]|5[0-26-9]|6[0-4]|[78][0-49])|3(?:0\\\\d|1[0-8]|[25][02-9]|3[02-579]|[468][0-46-9]|7[1-35-79]|9[2-578])|4(?:0[03-9]|[137]\\\\d|[28][02-57-9]|4[02-69]|5[0-8]|[69][0-79])|5(?:0[1-35-9]|[16]\\\\d|2[024-9]|3[015689]|4[02-9]|5[03-9]|7[0-35-9]|8[0-468]|9[0-57-9])|6(?:0[034689]|1\\\\d|2[0-35689]|[38][013-9]|4[1-467]|5[0-69]|6[13-9]|7[0-8]|9[0-24578])|7(?:0[0246-9]|2\\\\d|3[0236-8]|4[03-9]|5[0-46-9]|6[013-9]|7[0-35-9]|8[024-9]|9[02-9])|8(?:0[35-9]|2[1-57-9]|3[02-578]|4[0-578]|5[124-9]|6[2-69]|7\\\\d|8[02-9]|9[02569])|9(?:0[02-589]|[18]\\\\d|2[02-689]|3[1-57-9]|4[2-9]|5[0-579]|6[2-47-9]|7[0-24578]|9[2-57]))\\\\d\\\\d|2(?:(?:0[024-9]|2[3-9]|3[3-79]|4[1-689]|[58][02-9]|6[0-47-9]|7[013-9]|9\\\\d)\\\\d\\\\d|1(?:[0-7]\\\\d\\\\d|80[04589])))|2(?:0[01378]|3[0189]|4[017]|8[0-46-9]|9[0-2])\\\\d{3})\\\\d{4}|1(?:2(?:0(?:46[1-4]|87[2-9])|545[1-79]|76(?:2\\\\d|3[1-8]|6[1-6])|9(?:7(?:2[0-4]|3[2-5])|8(?:2[2-8]|7[0-47-9]|8[3-5])))|3(?:6(?:38[2-5]|47[23])|8(?:47[04-9]|64[0157-9]))|4(?:044[1-7]|20(?:2[23]|8\\\\d)|6(?:0(?:30|5[2-57]|6[1-8]|7[2-8])|140)|8(?:052|87[1-3]))|5(?:2(?:4(?:3[2-79]|6\\\\d)|76\\\\d)|6(?:26[06-9]|686))|6(?:06(?:4\\\\d|7[4-79])|295[5-7]|35[34]\\\\d|47(?:24|61)|59(?:5[08]|6[67]|74)|9(?:55[0-4]|77[23]))|7(?:26(?:6[13-9]|7[0-7])|(?:442|688)\\\\d|50(?:2[0-3]|[3-68]2|76))|8(?:27[56]\\\\d|37(?:5[2-5]|8[239])|843[2-58])|9(?:0(?:0(?:6[1-8]|85)|52\\\\d)|3583|4(?:66[1-8]|9(?:2[01]|81))|63(?:23|3[1-4])|9561))\\\\d{3}\",[9,10]],[\"7(?:457[0-57-9]|700[01]|911[028])\\\\d{5}|7(?:[1-3]\\\\d\\\\d|4(?:[0-46-9]\\\\d|5[0-689])|5(?:0[0-8]|[13-9]\\\\d|2[0-35-9])|7(?:0[1-9]|[1-7]\\\\d|8[02-9]|9[0-689])|8(?:[014-9]\\\\d|[23][0-8])|9(?:[024-9]\\\\d|1[02-9]|3[0-689]))\\\\d{6}\",[10]],[\"80[08]\\\\d{7}|800\\\\d{6}|8001111\"],[\"(?:8(?:4[2-5]|7[0-3])|9(?:[01]\\\\d|8[2-49]))\\\\d{7}|845464\\\\d\",[7,10]],[\"70\\\\d{8}\",[10]],0,[\"(?:3[0347]|55)\\\\d{8}\",[10]],[\"76(?:0[0-2]|2[356]|4[0134]|5[49]|6[0-369]|77|81|9[39])\\\\d{6}\",[10]],[\"56\\\\d{8}\",[10]]],0,\" x\"],\"GD\":[\"1\",\"011\",\"(?:473|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-9]\\\\d{6})$\",\"473$1\",0,\"473\"],\"GE\":[\"995\",\"00\",\"(?:[3-57]\\\\d\\\\d|800)\\\\d{6}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"70\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"32\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[57]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[348]\"],\"0$1\"]],\"0\"],\"GF\":[\"594\",\"00\",\"(?:[56]94|976)\\\\d{6}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[569]\"],\"0$1\"]],\"0\"],\"GG\":[\"44\",\"00\",\"(?:1481|[357-9]\\\\d{3})\\\\d{6}|8\\\\d{6}(?:\\\\d{2})?\",[7,9,10],0,\"0\",0,\"0|([25-9]\\\\d{5})$\",\"1481$1\",0,0,[[\"1481[25-9]\\\\d{5}\",[10]],[\"7(?:(?:781|839)\\\\d|911[17])\\\\d{5}\",[10]],[\"80[08]\\\\d{7}|800\\\\d{6}|8001111\"],[\"(?:8(?:4[2-5]|7[0-3])|9(?:[01]\\\\d|8[0-3]))\\\\d{7}|845464\\\\d\",[7,10]],[\"70\\\\d{8}\",[10]],0,[\"(?:3[0347]|55)\\\\d{8}\",[10]],[\"76(?:0[0-2]|2[356]|4[0134]|5[49]|6[0-369]|77|81|9[39])\\\\d{6}\",[10]],[\"56\\\\d{8}\",[10]]]],\"GH\":[\"233\",\"00\",\"(?:[235]\\\\d{3}|800)\\\\d{5}\",[8,9],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[235]\"],\"0$1\"]],\"0\"],\"GI\":[\"350\",\"00\",\"[256]\\\\d{7}\",[8],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"2\"]]]],\"GL\":[\"299\",\"00\",\"(?:19|[2-689]\\\\d)\\\\d{4}\",[6],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"19|[2-689]\"]]]],\"GM\":[\"220\",\"00\",\"[2-9]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-9]\"]]]],\"GN\":[\"224\",\"00\",\"(?:30|6\\\\d\\\\d|722)\\\\d{6}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"3\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[67]\"]]]],\"GP\":[\"590\",\"00\",\"(?:590|69\\\\d|976)\\\\d{6}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[569]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"590(?:0[1-68]|1[0-2]|2[0-68]|3[1289]|4[0-24-9]|5[3-579]|6[0189]|7[08]|8[0-689]|9\\\\d)\\\\d{4}\"],[\"69(?:0\\\\d\\\\d|1(?:2[29]|3[0-5]))\\\\d{4}\"],0,0,0,0,0,0,[\"976[01]\\\\d{5}\"]]],\"GQ\":[\"240\",\"00\",\"222\\\\d{6}|(?:3\\\\d|55|[89]0)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[235]\"]],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"[89]\"]]]],\"GR\":[\"30\",\"00\",\"5005000\\\\d{3}|(?:[2689]\\\\d|70)\\\\d{8}\",[10],[[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"21|7\"]],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"2(?:2|3[2-57-9]|4[2-469]|5[2-59]|6[2-9]|7[2-69]|8[2-49])|5\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2689]\"]]]],\"GT\":[\"502\",\"00\",\"(?:1\\\\d{3}|[2-7])\\\\d{7}\",[8,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2-7]\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]]]],\"GU\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|671|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([3-9]\\\\d{6})$\",\"671$1\",0,\"671\"],\"GW\":[\"245\",\"00\",\"[49]\\\\d{8}|4\\\\d{6}\",[7,9],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"40\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[49]\"]]]],\"GY\":[\"592\",\"001\",\"(?:862\\\\d|9008)\\\\d{3}|(?:[2-46]\\\\d|77)\\\\d{5}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-46-9]\"]]]],\"HK\":[\"852\",\"00(?:30|5[09]|[126-9]?)\",\"8[0-46-9]\\\\d{6,7}|9\\\\d{4}(?:\\\\d(?:\\\\d(?:\\\\d{4})?)?)?|(?:[235-79]\\\\d|46)\\\\d{6}\",[5,6,7,8,9,11],[[\"(\\\\d{3})(\\\\d{2,5})\",\"$1 $2\",[\"900\",\"9003\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2-7]|8[1-4]|9(?:0[1-9]|[1-8])\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"9\"]]],0,0,0,0,0,0,0,\"00\"],\"HN\":[\"504\",\"00\",\"8\\\\d{10}|[237-9]\\\\d{7}\",[8,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"[237-9]\"]]]],\"HR\":[\"385\",\"00\",\"(?:[24-69]\\\\d|3[0-79])\\\\d{7}|80\\\\d{5,7}|[1-79]\\\\d{7}|6\\\\d{5,6}\",[6,7,8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"6[01]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[67]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-5]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"],\"0$1\"]],\"0\"],\"HT\":[\"509\",\"00\",\"[2-489]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-489]\"]]]],\"HU\":[\"36\",\"00\",\"[2357]\\\\d{8}|[1-9]\\\\d{7}\",[8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"(06 $1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[27][2-9]|3[2-7]|4[24-9]|5[2-79]|6|8[2-57-9]|9[2-69]\"],\"(06 $1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-57-9]\"],\"06 $1\"]],\"06\"],\"ID\":[\"62\",\"00[189]\",\"(?:(?:007803|8\\\\d{4})\\\\d|[1-36])\\\\d{6}|[1-9]\\\\d{8,10}|[2-9]\\\\d{7}\",[7,8,9,10,11,12,13],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"15\"]],[\"(\\\\d{2})(\\\\d{5,9})\",\"$1 $2\",[\"2[124]|[36]1\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{5,7})\",\"$1 $2\",[\"800\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5,8})\",\"$1 $2\",[\"[2-79]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{3})\",\"$1-$2-$3\",[\"8[1-35-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6,8})\",\"$1 $2\",[\"1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"804\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"80\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4,5})\",\"$1-$2-$3\",[\"8\"],\"0$1\"]],\"0\"],\"IE\":[\"353\",\"00\",\"(?:1\\\\d|[2569])\\\\d{6,8}|4\\\\d{6,9}|7\\\\d{8}|8\\\\d{8,9}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"2[24-9]|47|58|6[237-9]|9[35-9]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[45]0\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2569]|4[1-69]|7[14]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"70\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"81\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[78]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"4\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\"],\"IL\":[\"972\",\"0(?:0|1[2-9])\",\"1\\\\d{6}(?:\\\\d{3,5})?|[57]\\\\d{8}|[1-489]\\\\d{7}\",[7,8,9,10,11,12],[[\"(\\\\d{4})(\\\\d{3})\",\"$1-$2\",[\"125\"]],[\"(\\\\d{4})(\\\\d{2})(\\\\d{2})\",\"$1-$2-$3\",[\"121\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[2-489]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[57]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1-$2-$3\",[\"12\"]],[\"(\\\\d{4})(\\\\d{6})\",\"$1-$2\",[\"159\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1-$2-$3-$4\",[\"1[7-9]\"]],[\"(\\\\d{3})(\\\\d{1,2})(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3-$4\",[\"15\"]]],\"0\"],\"IM\":[\"44\",\"00\",\"1624\\\\d{6}|(?:[3578]\\\\d|90)\\\\d{8}\",[10],0,\"0\",0,\"0|([5-8]\\\\d{5})$\",\"1624$1\",0,\"74576|(?:16|7[56])24\"],\"IN\":[\"91\",\"00\",\"(?:000800|[2-9]\\\\d\\\\d)\\\\d{7}|1\\\\d{7,12}\",[8,9,10,11,12,13],[[\"(\\\\d{8})\",\"$1\",[\"5(?:0|2[23]|3[03]|[67]1|88)\",\"5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|888)\",\"5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|8888)\"],0,1],[\"(\\\\d{4})(\\\\d{4,5})\",\"$1 $2\",[\"180\",\"1800\"],0,1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"140\"],0,1],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"11|2[02]|33|4[04]|79[1-7]|80[2-46]\",\"11|2[02]|33|4[04]|79(?:[1-6]|7[19])|80(?:[2-4]|6[0-589])\",\"11|2[02]|33|4[04]|79(?:[124-6]|3(?:[02-9]|1[0-24-9])|7(?:1|9[1-6]))|80(?:[2-4]|6[0-589])\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1(?:2[0-249]|3[0-25]|4[145]|[68]|7[1257])|2(?:1[257]|3[013]|4[01]|5[0137]|6[0158]|78|8[1568])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|5[12]|[78]1)|6(?:12|[2-4]1|5[17]|6[13]|80)|7(?:12|3[134]|4[47]|61|88)|8(?:16|2[014]|3[126]|6[136]|7[078]|8[34]|91)|(?:43|59|75)[15]|(?:1[59]|29|67|72)[14]\",\"1(?:2[0-24]|3[0-25]|4[145]|[59][14]|6[1-9]|7[1257]|8[1-57-9])|2(?:1[257]|3[013]|4[01]|5[0137]|6[058]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|674|7(?:(?:2[14]|3[34]|5[15])[2-6]|61[346]|88[0-8])|8(?:70[2-6]|84[235-7]|91[3-7])|(?:1(?:29|60|8[06])|261|552|6(?:12|[2-47]1|5[17]|6[13]|80)|7(?:12|31|4[47])|8(?:16|2[014]|3[126]|6[136]|7[78]|83))[2-7]\",\"1(?:2[0-24]|3[0-25]|4[145]|[59][14]|6[1-9]|7[1257]|8[1-57-9])|2(?:1[257]|3[013]|4[01]|5[0137]|6[058]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|6(?:12(?:[2-6]|7[0-8])|74[2-7])|7(?:(?:2[14]|5[15])[2-6]|3171|61[346]|88(?:[2-7]|82))|8(?:70[2-6]|84(?:[2356]|7[19])|91(?:[3-6]|7[19]))|73[134][2-6]|(?:74[47]|8(?:16|2[014]|3[126]|6[136]|7[78]|83))(?:[2-6]|7[19])|(?:1(?:29|60|8[06])|261|552|6(?:[2-4]1|5[17]|6[13]|7(?:1|4[0189])|80)|7(?:12|88[01]))[2-7]\"],\"0$1\",1],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2[2457-9]|3[2-5]|4[235-7]|5[2-689]|6[24578]|7[235689]|8[1-6])|7(?:1[013-9]|28|3[129]|4[1-35689]|5[29]|6[02-5]|70)|807\",\"1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2(?:[2457]|84|95)|3(?:[2-4]|55)|4[235-7]|5[2-689]|6[24578]|7[235689]|8[1-6])|7(?:1(?:[013-8]|9[6-9])|28[6-8]|3(?:17|2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4|5[0-367])|70[13-7])|807[19]\",\"1(?:[2-479]|5(?:[0236-9]|5[013-9]))|[2-5]|6(?:2(?:84|95)|355|83)|73179|807(?:1|9[1-3])|(?:1552|6(?:1[1358]|2[2457]|3[2-4]|4[235-7]|5[2-689]|6[24578]|7[235689]|8[124-6])\\\\d|7(?:1(?:[013-8]\\\\d|9[6-9])|28[6-8]|3(?:2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]\\\\d|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4\\\\d|5[0-367])|70[13-7]))[2-7]\"],\"0$1\",1],[\"(\\\\d{5})(\\\\d{5})\",\"$1 $2\",[\"[6-9]\"],\"0$1\",1],[\"(\\\\d{4})(\\\\d{2,4})(\\\\d{4})\",\"$1 $2 $3\",[\"1(?:6|8[06])\",\"1(?:6|8[06]0)\"],0,1],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"18\"],0,1]],\"0\"],\"IO\":[\"246\",\"00\",\"3\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"3\"]]]],\"IQ\":[\"964\",\"00\",\"(?:1|7\\\\d\\\\d)\\\\d{7}|[2-6]\\\\d{7,8}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-6]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\"],\"IR\":[\"98\",\"00\",\"[1-9]\\\\d{9}|(?:[1-8]\\\\d\\\\d|9)\\\\d{3,4}\",[4,5,6,7,10],[[\"(\\\\d{4,5})\",\"$1\",[\"96\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4,5})\",\"$1 $2\",[\"(?:1[137]|2[13-68]|3[1458]|4[145]|5[1468]|6[16]|7[1467]|8[13467])[12689]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-8]\"],\"0$1\"]],\"0\"],\"IS\":[\"354\",\"00|1(?:0(?:01|[12]0)|100)\",\"(?:38\\\\d|[4-9])\\\\d{6}\",[7,9],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[4-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"3\"]]],0,0,0,0,0,0,0,\"00\"],\"IT\":[\"39\",\"00\",\"0\\\\d{5,10}|3[0-8]\\\\d{7,10}|55\\\\d{8}|8\\\\d{5}(?:\\\\d{2,4})?|(?:1\\\\d|39)\\\\d{7,8}\",[6,7,8,9,10,11],[[\"(\\\\d{2})(\\\\d{4,6})\",\"$1 $2\",[\"0[26]\"]],[\"(\\\\d{3})(\\\\d{3,6})\",\"$1 $2\",[\"0[13-57-9][0159]|8(?:03|4[17]|9[245])\",\"0[13-57-9][0159]|8(?:03|4[17]|9(?:2|[45][0-4]))\"]],[\"(\\\\d{4})(\\\\d{2,6})\",\"$1 $2\",[\"0(?:[13-579][2-46-8]|8[236-8])\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"894\"]],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"0[26]|5\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"1[4679]|[38]\"]],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"0[13-57-9][0159]\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{5})\",\"$1 $2 $3\",[\"0[26]\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"0\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4,5})\",\"$1 $2 $3\",[\"3\"]]],0,0,0,0,0,0,[[\"0669[0-79]\\\\d{1,6}|0(?:1(?:[0159]\\\\d|[27][1-5]|31|4[1-4]|6[1356]|8[2-57])|2\\\\d\\\\d|3(?:[0159]\\\\d|2[1-4]|3[12]|[48][1-6]|6[2-59]|7[1-7])|4(?:[0159]\\\\d|[23][1-9]|4[245]|6[1-5]|7[1-4]|81)|5(?:[0159]\\\\d|2[1-5]|3[2-6]|4[1-79]|6[4-6]|7[1-578]|8[3-8])|6(?:[0-57-9]\\\\d|6[0-8])|7(?:[0159]\\\\d|2[12]|3[1-7]|4[2-46]|6[13569]|7[13-6]|8[1-59])|8(?:[0159]\\\\d|2[3-578]|3[1-356]|[6-8][1-5])|9(?:[0159]\\\\d|[238][1-5]|4[12]|6[1-8]|7[1-6]))\\\\d{2,7}\"],[\"3[1-9]\\\\d{8}|3[2-9]\\\\d{7}\",[9,10]],[\"80(?:0\\\\d{3}|3)\\\\d{3}\",[6,9]],[\"(?:0878\\\\d\\\\d|89(?:2|4[5-9]\\\\d))\\\\d{3}|89[45][0-4]\\\\d\\\\d|(?:1(?:44|6[346])|89(?:5[5-9]|9))\\\\d{6}\",[6,8,9,10]],[\"1(?:78\\\\d|99)\\\\d{6}\",[9,10]],0,0,0,[\"55\\\\d{8}\",[10]],[\"84(?:[08]\\\\d{3}|[17])\\\\d{3}\",[6,9]]]],\"JE\":[\"44\",\"00\",\"1534\\\\d{6}|(?:[3578]\\\\d|90)\\\\d{8}\",[10],0,\"0\",0,\"0|([0-24-8]\\\\d{5})$\",\"1534$1\",0,0,[[\"1534[0-24-8]\\\\d{5}\"],[\"7(?:(?:(?:50|82)9|937)\\\\d|7(?:00[378]|97[7-9]))\\\\d{5}\"],[\"80(?:07(?:35|81)|8901)\\\\d{4}\"],[\"(?:8(?:4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))|90(?:066[59]|1810|71(?:07|55)))\\\\d{4}\"],[\"701511\\\\d{4}\"],0,[\"(?:3(?:0(?:07(?:35|81)|8901)|3\\\\d{4}|4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))|55\\\\d{4})\\\\d{4}\"],[\"76(?:0[0-2]|2[356]|4[0134]|5[49]|6[0-369]|77|81|9[39])\\\\d{6}\"],[\"56\\\\d{8}\"]]],\"JM\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|658|900)\\\\d{7}\",[10],0,\"1\",0,0,0,0,\"658|876\"],\"JO\":[\"962\",\"00\",\"900\\\\d{5}|(?:(?:[268]|7\\\\d)\\\\d|32|53)\\\\d{6}\",[8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2356]|87\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{5,6})\",\"$1 $2\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"70\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\"],\"JP\":[\"81\",\"010\",\"00[1-9]\\\\d{6,14}|[257-9]\\\\d{9}|(?:00|[1-9]\\\\d\\\\d)\\\\d{6}\",[8,9,10,11,12,13,14,15,16,17],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1-$2-$3\",[\"(?:12|57|99)0\"],\"0$1\"],[\"(\\\\d{4})(\\\\d)(\\\\d{4})\",\"$1-$2-$3\",[\"1(?:26|3[79]|4[56]|5[4-68]|6[3-5])|499|5(?:76|97)|746|8(?:3[89]|47|51|63)|9(?:49|80|9[16])\",\"1(?:267|3(?:7[247]|9[278])|466|5(?:47|58|64)|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:76|97)9|7468|8(?:3(?:8[78]|96)|477|51[24]|636)|9(?:496|802|9(?:1[23]|69))|1(?:45|58)[67]\",\"1(?:267|3(?:7[247]|9[278])|466|5(?:47|58|64)|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:769|979[2-69])|7468|8(?:3(?:8[78]|96[2457-9])|477|51[24]|636[2-57-9])|9(?:496|802|9(?:1[23]|69))|1(?:45|58)[67]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"60\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1-$2-$3\",[\"[36]|4(?:2[09]|7[01])\",\"[36]|4(?:2(?:0|9[02-69])|7(?:0[019]|1))\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"1(?:1|5[45]|77|88|9[69])|2(?:2[1-37]|3[0-269]|4[59]|5|6[24]|7[1-358]|8[1369]|9[0-38])|4(?:[28][1-9]|3[0-57]|[45]|6[248]|7[2-579]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-389])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9[2-6])|8(?:2[124589]|3[279]|49|6[0-24-689]|7[0-468]|8[68]|9[019])|9(?:[23][1-9]|4[15]|5[138]|6[1-3]|7[156]|8[189]|9[1-489])\",\"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2(?:[127]|3[014-9])|3[0-269]|4[59]|5(?:[0468][01]|[1-3]|5[0-69]|9[19])|62|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17))|4(?:2(?:[13-79]|2[01]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|8[1-9])|5(?:2|3[045]|4[0-369]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9[0-2469])|49|6(?:[0-24]|5[0-3589]|9[01459])|7[0-468]|8[68])|9(?:[23][1-9]|4[15]|5[138]|6[1-3]|7[156]|8[189]|9(?:[1289]|3[34]|4[0178]))|(?:49|55|83)[29]|(?:264|837)[016-9]|2(?:57|93)[015-9]|(?:47[59]|59[89]|8(?:6[68]|9))[019]\",\"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2[127]|3[0-269]|4[59]|5(?:[0468][01]|[1-3]|5[0-69]|9(?:17|99))|6(?:2|4[016-9])|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17))|4(?:2(?:[13-79]|2[01]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9[0169])|3(?:[29]|7(?:[017-9]|6[6-8]))|49|6(?:[0-24]|5(?:[0-389]|5[23])|6(?:[01]|9[178])|9[0145])|7[0-468]|8[68])|9(?:4[15]|5[138]|7[156]|8[189]|9(?:[1289]|3(?:31|4[357])|4[0178]))|(?:8294|96)[1-3]|2(?:57|93)[015-9]|(?:223|8699)[014-9]|(?:48|8292|9[23])[1-9]|(?:47[59]|59[89]|8(?:68|9))[019]\",\"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2[127]|3[0-269]|4[59]|5(?:[0468][01]|[1-3]|5[0-69]|7[015-9]|9(?:17|99))|6(?:2|4[016-9])|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17|3[015-9]))|4(?:2(?:[13-79]|2[01]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9(?:[019]|4[1-3]|6(?:[0-47-9]|5[01346-9])))|3(?:[29]|7(?:[017-9]|6[6-8]))|49|6(?:[0-24]|5(?:[0-389]|5[23])|6(?:[01]|9[178])|9[0145])|7[0-468]|8[68])|9(?:4[15]|5[138]|6[1-3]|7[156]|8[189]|9(?:[1289]|3(?:31|4[357])|4[0178]))|(?:223|8699)[014-9]|(?:48|829(?:2|66)|9[23])[1-9]|(?:47[59]|59[89]|8(?:68|9))[019]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1-$2-$3\",[\"[14]|[29][2-9]|5[3-9]|7[2-4679]|8(?:[246-9]|3[3-8]|5[2-9])\",\"[14]|[29][2-9]|5[3-9]|7[2-4679]|8(?:[246-9]|3(?:[3-6][2-9]|7|8[2-5])|5[2-9])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"800\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1-$2-$3\",[\"[2579]|80\"],\"0$1\"]],\"0\"],\"KE\":[\"254\",\"000\",\"(?:[17]\\\\d\\\\d|900)\\\\d{6}|(?:2|80)0\\\\d{6,7}|[4-6]\\\\d{6,8}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d{5,7})\",\"$1 $2\",[\"[24-6]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"[17]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"]],\"0\"],\"KG\":[\"996\",\"00\",\"8\\\\d{9}|(?:[235-8]\\\\d|99)\\\\d{7}\",[9,10],[[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"3(?:1[346]|[24-79])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[235-79]|88\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d)(\\\\d{2,3})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\"],\"KH\":[\"855\",\"00[14-9]\",\"1\\\\d{9}|[1-9]\\\\d{7,8}\",[8,9,10],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[1-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]]],\"0\"],\"KI\":[\"686\",\"00\",\"(?:[37]\\\\d|6[0-79])\\\\d{6}|(?:[2-48]\\\\d|50)\\\\d{3}\",[5,8],0,\"0\"],\"KM\":[\"269\",\"00\",\"[3478]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[3478]\"]]]],\"KN\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-7]\\\\d{6})$\",\"869$1\",0,\"869\"],\"KP\":[\"850\",\"00|99\",\"85\\\\d{6}|(?:19\\\\d|2)\\\\d{7}\",[8,10],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"]],\"0\"],\"KR\":[\"82\",\"00(?:[125689]|3(?:[46]5|91)|7(?:00|27|3|55|6[126]))\",\"00[1-9]\\\\d{8,11}|(?:[12]|5\\\\d{3})\\\\d{7}|[13-6]\\\\d{9}|(?:[1-6]\\\\d|80)\\\\d{7}|[3-6]\\\\d{4,5}|(?:00|7)0\\\\d{8}\",[5,6,8,9,10,11,12,13,14],[[\"(\\\\d{2})(\\\\d{3,4})\",\"$1-$2\",[\"(?:3[1-3]|[46][1-4]|5[1-5])1\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"1\"]],[\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\",\"$1-$2-$3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"60|8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1-$2-$3\",[\"[1346]|5[1-5]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1-$2-$3\",[\"[57]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5})(\\\\d{4})\",\"$1-$2-$3\",[\"5\"],\"0$1\"]],\"0\",0,\"0(8(?:[1-46-8]|5\\\\d\\\\d))?\"],\"KW\":[\"965\",\"00\",\"(?:18|[2569]\\\\d\\\\d)\\\\d{5}\",[7,8],[[\"(\\\\d{4})(\\\\d{3,4})\",\"$1 $2\",[\"[169]|2(?:[235]|4[1-35-9])|52\"]],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[25]\"]]]],\"KY\":[\"1\",\"011\",\"(?:345|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-9]\\\\d{6})$\",\"345$1\",0,\"345\"],\"KZ\":[\"7\",\"810\",\"33622\\\\d{5}|(?:7\\\\d|80)\\\\d{8}\",[10],0,\"8\",0,0,0,0,\"33|7\",0,\"8~10\"],\"LA\":[\"856\",\"00\",\"(?:2\\\\d|3)\\\\d{8}|(?:[235-8]\\\\d|41)\\\\d{6}\",[8,9,10],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2[13]|3[14]|[4-8]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"3\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"2\"],\"0$1\"]],\"0\"],\"LB\":[\"961\",\"00\",\"[7-9]\\\\d{7}|[13-9]\\\\d{6}\",[7,8],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[13-69]|7(?:[2-57]|62|8[0-7]|9[04-9])|8[02-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[7-9]\"]]],\"0\"],\"LC\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|758|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-7]\\\\d{6})$\",\"758$1\",0,\"758\"],\"LI\":[\"423\",\"00\",\"90\\\\d{5}|(?:[2378]|6\\\\d\\\\d)\\\\d{6}\",[7,9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[237-9]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"69\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6\"]]],\"0\",0,\"0|(1001)\"],\"LK\":[\"94\",\"00\",\"(?:[1-7]\\\\d|[89]1)\\\\d{7}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[1-689]\"],\"0$1\"]],\"0\"],\"LR\":[\"231\",\"00\",\"(?:2|33|5\\\\d|77|88)\\\\d{7}|[45]\\\\d{6}\",[7,8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[45]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[3578]\"],\"0$1\"]],\"0\"],\"LS\":[\"266\",\"00\",\"(?:[256]\\\\d\\\\d|800)\\\\d{5}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2568]\"]]]],\"LT\":[\"370\",\"00\",\"(?:[3469]\\\\d|52|[78]0)\\\\d{6}\",[8],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"52[0-79]\"],\"(8-$1)\",1],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[7-9]\"],\"8 $1\",1],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"37|4(?:[15]|6[1-8])\"],\"(8-$1)\",1],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[3-6]\"],\"(8-$1)\",1]],\"8\",0,\"[08]\"],\"LU\":[\"352\",\"00\",\"35[013-9]\\\\d{4,8}|6\\\\d{8}|35\\\\d{2,4}|(?:[2457-9]\\\\d|3[0-46-9])\\\\d{2,9}\",[4,5,6,7,8,9,10,11],[[\"(\\\\d{2})(\\\\d{3})\",\"$1 $2\",[\"2(?:0[2-689]|[2-9])|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"2(?:0[2-689]|[2-9])|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"20[2-689]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,2})\",\"$1 $2 $3 $4\",[\"2(?:[0367]|4[3-8])\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"80[01]|90[015]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"20\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,2})\",\"$1 $2 $3 $4 $5\",[\"2(?:[0367]|4[3-8])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,5})\",\"$1 $2 $3 $4\",[\"[3-57]|8[13-9]|9(?:0[89]|[2-579])|(?:2|80)[2-9]\"]]],0,0,\"(15(?:0[06]|1[12]|[35]5|4[04]|6[26]|77|88|99)\\\\d)\"],\"LV\":[\"371\",\"00\",\"(?:[268]\\\\d|90)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[269]|8[01]\"]]]],\"LY\":[\"218\",\"00\",\"[2-9]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{7})\",\"$1-$2\",[\"[2-9]\"],\"0$1\"]],\"0\"],\"MA\":[\"212\",\"00\",\"[5-8]\\\\d{8}\",[9],[[\"(\\\\d{5})(\\\\d{4})\",\"$1-$2\",[\"5(?:29|38)\",\"5(?:29|38)[89]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"5[45]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5})\",\"$1-$2\",[\"5(?:2[2-489]|3[5-9]|9)|892\",\"5(?:2(?:[2-49]|8[235-9])|3[5-9]|9)|892\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1-$2\",[\"8\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1-$2\",[\"[5-7]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"5(?:29(?:[189]0|29)|38[89]0)\\\\d{4}|5(?:2(?:[015-7]\\\\d|2[02-9]|3[0-578]|4[2-46-8]|8[0235-7]|90)|3(?:[0-47]\\\\d|5[2-9]|6[02-8]|80|9[3-9])|(?:4[067]|5[03])\\\\d)\\\\d{5}\"],[\"(?:6(?:[0-79]\\\\d|8[0-247-9])|7(?:0[016-8]|6[1267]|7[0-27]))\\\\d{6}\"],[\"80\\\\d{7}\"],[\"89\\\\d{7}\"],0,0,0,0,[\"592(?:4[0-2]|93)\\\\d{4}\"]]],\"MC\":[\"377\",\"00\",\"870\\\\d{5}|(?:[349]|6\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"4\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[39]\"]],[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"6\"],\"0$1\"]],\"0\"],\"MD\":[\"373\",\"00\",\"(?:[235-7]\\\\d|[89]0)\\\\d{6}\",[8],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"22|3\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[25-7]\"],\"0$1\"]],\"0\"],\"ME\":[\"382\",\"00\",\"(?:20|[3-79]\\\\d)\\\\d{6}|80\\\\d{6,7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-9]\"],\"0$1\"]],\"0\"],\"MF\":[\"590\",\"00\",\"(?:590|69\\\\d|976)\\\\d{6}\",[9],0,\"0\",0,0,0,0,0,[[\"590(?:0[079]|[14]3|[27][79]|30|5[0-268]|87)\\\\d{4}\"],[\"69(?:0\\\\d\\\\d|1(?:2[29]|3[0-5]))\\\\d{4}\"],0,0,0,0,0,0,[\"976[01]\\\\d{5}\"]]],\"MG\":[\"261\",\"00\",\"[23]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[23]\"],\"0$1\"]],\"0\",0,\"0|([24-9]\\\\d{6})$\",\"20$1\"],\"MH\":[\"692\",\"011\",\"329\\\\d{4}|(?:[256]\\\\d|45)\\\\d{5}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[2-6]\"]]],\"1\"],\"MK\":[\"389\",\"00\",\"[2-578]\\\\d{7}\",[8],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[347]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[58]\"],\"0$1\"]],\"0\"],\"ML\":[\"223\",\"00\",\"[24-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[24-9]\"]]]],\"MM\":[\"95\",\"00\",\"1\\\\d{5,7}|95\\\\d{6}|(?:[4-7]|9[0-46-9])\\\\d{6,8}|(?:2|8\\\\d)\\\\d{5,8}\",[6,7,8,9,10],[[\"(\\\\d)(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"16|2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[45]|6(?:0[23]|[1-689]|7[235-7])|7(?:[0-4]|5[2-7])|8[1-6]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[12]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[4-7]|8[1-35]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4,6})\",\"$1 $2 $3\",[\"9(?:2[0-4]|[35-9]|4[137-9])\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"92\"],\"0$1\"],[\"(\\\\d)(\\\\d{5})(\\\\d{4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"]],\"0\"],\"MN\":[\"976\",\"001\",\"[12]\\\\d{7,9}|[57-9]\\\\d{7}\",[8,9,10],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[12]1\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[57-9]\"]],[\"(\\\\d{3})(\\\\d{5,6})\",\"$1 $2\",[\"[12]2[1-3]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5,6})\",\"$1 $2\",[\"[12](?:27|3[2-8]|4[2-68]|5[1-4689])\",\"[12](?:27|3[2-8]|4[2-68]|5[1-4689])[0-3]\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{4,5})\",\"$1 $2\",[\"[12]\"],\"0$1\"]],\"0\"],\"MO\":[\"853\",\"00\",\"(?:28|[68]\\\\d)\\\\d{6}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[268]\"]]]],\"MP\":[\"1\",\"011\",\"[58]\\\\d{9}|(?:67|90)0\\\\d{7}\",[10],0,\"1\",0,\"1|([2-9]\\\\d{6})$\",\"670$1\",0,\"670\"],\"MQ\":[\"596\",\"00\",\"69\\\\d{7}|(?:59|97)6\\\\d{6}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[569]\"],\"0$1\"]],\"0\"],\"MR\":[\"222\",\"00\",\"(?:[2-4]\\\\d\\\\d|800)\\\\d{5}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-48]\"]]]],\"MS\":[\"1\",\"011\",\"66449\\\\d{5}|(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|(4\\\\d{6})$\",\"664$1\",0,\"664\"],\"MT\":[\"356\",\"00\",\"3550\\\\d{4}|(?:[2579]\\\\d\\\\d|800)\\\\d{5}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2357-9]\"]]]],\"MU\":[\"230\",\"0(?:0|[24-7]0|3[03])\",\"(?:[2-468]|5\\\\d)\\\\d{6}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-46]|8[013]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"5\"]]],0,0,0,0,0,0,0,\"020\"],\"MV\":[\"960\",\"0(?:0|19)\",\"(?:800|9[0-57-9]\\\\d)\\\\d{7}|[34679]\\\\d{6}\",[7,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[3467]|9[13-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"]]],0,0,0,0,0,0,0,\"00\"],\"MW\":[\"265\",\"00\",\"1\\\\d{6}(?:\\\\d{2})?|(?:[23]1|77|88|99)\\\\d{7}\",[7,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1[2-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"3\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[17-9]\"],\"0$1\"]],\"0\"],\"MX\":[\"52\",\"0[09]\",\"(?:1(?:[01467]\\\\d|[2359][1-9]|8[1-79])|[2-9]\\\\d)\\\\d{8}\",[10,11],[[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"33|5[56]|81\"],0,1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-9]\"],0,1],[\"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$2 $3 $4\",[\"1(?:33|5[56]|81)\"],0,1],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$2 $3 $4\",[\"1\"],0,1]],\"01\",0,\"0(?:[12]|4[45])|1\",0,0,0,0,\"00\"],\"MY\":[\"60\",\"00\",\"1\\\\d{8,9}|(?:3\\\\d|[4-9])\\\\d{7}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3\",[\"[4-79]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1-$2 $3\",[\"1(?:[02469]|[37][2-9]|8[1-9])|8\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1-$2 $3\",[\"3\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1-$2-$3-$4\",[\"1[36-8]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3\",[\"15\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1-$2 $3\",[\"1\"],\"0$1\"]],\"0\"],\"MZ\":[\"258\",\"00\",\"(?:2|8\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2|8[2-7]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]]]],\"NA\":[\"264\",\"00\",\"[68]\\\\d{7,8}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"88\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"6\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"87\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"],\"0$1\"]],\"0\"],\"NC\":[\"687\",\"00\",\"[2-57-9]\\\\d{5}\",[6],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1.$2.$3\",[\"[2-57-9]\"]]]],\"NE\":[\"227\",\"00\",\"[0289]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"08\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[089]|2[01]\"]]]],\"NF\":[\"672\",\"00\",\"[13]\\\\d{5}\",[6],[[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"1\"]],[\"(\\\\d)(\\\\d{5})\",\"$1 $2\",[\"3\"]]],0,0,\"([0-258]\\\\d{4})$\",\"3$1\"],\"NG\":[\"234\",\"009\",\"(?:[124-7]|9\\\\d{3})\\\\d{6}|[1-9]\\\\d{7}|[78]\\\\d{9,13}\",[7,8,10,11,12,13,14],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"78\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[12]|9(?:0[3-9]|[1-9])\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,3})\",\"$1 $2 $3\",[\"[3-7]|8[2-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[7-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4,5})\",\"$1 $2 $3\",[\"[78]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5})(\\\\d{5,6})\",\"$1 $2 $3\",[\"[78]\"],\"0$1\"]],\"0\"],\"NI\":[\"505\",\"00\",\"(?:1800|[25-8]\\\\d{3})\\\\d{4}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[125-8]\"]]]],\"NL\":[\"31\",\"00\",\"(?:[124-7]\\\\d\\\\d|3(?:[02-9]\\\\d|1[0-8]))\\\\d{6}|[89]\\\\d{6,9}|1\\\\d{4,5}\",[5,6,7,8,9,10],[[\"(\\\\d{3})(\\\\d{4,7})\",\"$1 $2\",[\"[89]0\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"66\"],\"0$1\"],[\"(\\\\d)(\\\\d{8})\",\"$1 $2\",[\"6\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1[16-8]|2[259]|3[124]|4[17-9]|5[124679]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-57-9]\"],\"0$1\"]],\"0\"],\"NO\":[\"47\",\"00\",\"(?:0|[2-9]\\\\d{3})\\\\d{4}\",[5,8],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[489]|5[89]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[235-7]\"]]],0,0,0,0,0,\"[02-689]|7[0-8]\"],\"NP\":[\"977\",\"00\",\"9\\\\d{9}|[1-9]\\\\d{7}\",[8,10],[[\"(\\\\d)(\\\\d{7})\",\"$1-$2\",[\"1[2-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1-$2\",[\"[1-8]|9(?:[1-579]|6[2-6])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1-$2\",[\"9\"]]],\"0\"],\"NR\":[\"674\",\"00\",\"(?:444|55\\\\d|888)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[458]\"]]]],\"NU\":[\"683\",\"00\",\"(?:[47]|888\\\\d)\\\\d{3}\",[4,7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"8\"]]]],\"NZ\":[\"64\",\"0(?:0|161)\",\"2\\\\d{7,9}|(?:[34]\\\\d|6[0-35-9])\\\\d{6}|(?:508|[79]\\\\d)\\\\d{6,7}|8\\\\d{4,9}\",[5,6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{3,8})\",\"$1 $2\",[\"83\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]0\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3\",[\"24|[346]|7[2-57-9]|9[2-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2(?:10|74)|[59]|80\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"2[028]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,5})\",\"$1 $2 $3\",[\"2(?:[169]|7[0-35-9])|7|86\"],\"0$1\"]],\"0\",0,0,0,0,0,0,\"00\"],\"OM\":[\"968\",\"00\",\"(?:[279]\\\\d{3}|500)\\\\d{4}|8007\\\\d{4,5}\",[7,8,9],[[\"(\\\\d{3})(\\\\d{4,6})\",\"$1 $2\",[\"[58]\"]],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"2\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[79]\"]]]],\"PA\":[\"507\",\"00\",\"(?:[1-57-9]|6\\\\d)\\\\d{6}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[1-57-9]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"6\"]]]],\"PE\":[\"51\",\"19(?:1[124]|77|90)00\",\"(?:[14-8]|9\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"80\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"1\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[4-8]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"]]],\"0\",0,0,0,0,0,0,0,\" Anexo \"],\"PF\":[\"689\",\"00\",\"[48]\\\\d{7}|4\\\\d{5}\",[6,8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"44\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[48]\"]]]],\"PG\":[\"675\",\"00|140[1-3]\",\"(?:180|[78]\\\\d{3})\\\\d{4}|(?:[2-589]\\\\d|64)\\\\d{5}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"18|[2-69]|85\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[78]\"]]],0,0,0,0,0,0,0,\"00\"],\"PH\":[\"63\",\"00\",\"1800\\\\d{7,9}|(?:2|[89]\\\\d{4})\\\\d{5}|[2-8]\\\\d{8}|[28]\\\\d{7}\",[6,8,9,10,11,12,13],[[\"(\\\\d)(\\\\d{5})\",\"$1 $2\",[\"2\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"(0$1)\"],[\"(\\\\d{4})(\\\\d{4,6})\",\"$1 $2\",[\"3(?:23|39|46)|4(?:2[3-6]|[35]9|4[26]|76)|544|88[245]|(?:52|64|86)2\",\"3(?:230|397|461)|4(?:2(?:35|[46]4|51)|396|4(?:22|63)|59[347]|76[15])|5(?:221|446)|642[23]|8(?:622|8(?:[24]2|5[13]))\"],\"(0$1)\"],[\"(\\\\d{5})(\\\\d{4})\",\"$1 $2\",[\"346|4(?:27|9[35])|883\",\"3469|4(?:279|9(?:30|56))|8834\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[3-7]|8[2-8]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{4})(\\\\d{1,2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"1\"]]],\"0\"],\"PK\":[\"92\",\"00\",\"122\\\\d{6}|[24-8]\\\\d{10,11}|9(?:[013-9]\\\\d{8,10}|2(?:[01]\\\\d\\\\d|2(?:[025-8]\\\\d|1[01]))\\\\d{7})|(?:[2-8]\\\\d{3}|92(?:[0-7]\\\\d|8[1-9]))\\\\d{6}|[24-9]\\\\d{8}|[89]\\\\d{7}\",[8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1 $2 $3\",[\"[89]0\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"1\"]],[\"(\\\\d{2})(\\\\d{7,8})\",\"$1 $2\",[\"(?:2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91)[2-9]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{6,7})\",\"$1 $2\",[\"2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:2[2-8]|3[27-9]|4[2-6]|6[3569]|9[25-8])\",\"9(?:2[3-8]|98)|(?:2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:22|3[27-9]|4[2-6]|6[3569]|9[25-7]))[2-9]\"],\"(0$1)\"],[\"(\\\\d{5})(\\\\d{5})\",\"$1 $2\",[\"58\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"3\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"[24-9]\"],\"(0$1)\"]],\"0\"],\"PL\":[\"48\",\"00\",\"[1-57-9]\\\\d{6}(?:\\\\d{2})?|6\\\\d{5,8}\",[6,7,8,9],[[\"(\\\\d{5})\",\"$1\",[\"19\"]],[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"11|64\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])1\",\"(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])19\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"64\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"39|45|5[0137]|6[0469]|7[02389]|8[08]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"1[2-8]|[2-8]|9[145]\"]]]],\"PM\":[\"508\",\"00\",\"[45]\\\\d{5}\",[6],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[45]\"],\"0$1\"]],\"0\"],\"PR\":[\"1\",\"011\",\"(?:[589]\\\\d\\\\d|787)\\\\d{7}\",[10],0,\"1\",0,0,0,0,\"787|939\"],\"PS\":[\"970\",\"00\",\"[2489]2\\\\d{6}|(?:1\\\\d|5)\\\\d{8}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2489]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"5\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]]],\"0\"],\"PT\":[\"351\",\"00\",\"(?:[26-9]\\\\d|30)\\\\d{7}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2[12]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[236-9]\"]]]],\"PW\":[\"680\",\"01[12]\",\"(?:[25-8]\\\\d\\\\d|345|488|900)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-9]\"]]]],\"PY\":[\"595\",\"00\",\"59\\\\d{4,6}|(?:[2-46-9]\\\\d|5[0-8])\\\\d{4,7}\",[6,7,8,9],[[\"(\\\\d{3})(\\\\d{3,6})\",\"$1 $2\",[\"[2-9]0\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"[26]1|3[289]|4[1246-8]|7[1-3]|8[1-36]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{4,5})\",\"$1 $2\",[\"2[279]|3[13-5]|4[359]|5|6[347]|7[46-8]|85\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[26]1|3[289]|4[1246-8]|7[1-3]|8[1-36]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"87\"]],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-8]\"],\"0$1\"]],\"0\"],\"QA\":[\"974\",\"00\",\"[2-7]\\\\d{7}|(?:2\\\\d\\\\d|800)\\\\d{4}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"2[126]|8\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2-7]\"]]]],\"RE\":[\"262\",\"00\",\"9769\\\\d{5}|(?:26|[68]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2689]\"],\"0$1\"]],\"0\",0,0,0,0,\"26[23]|69|[89]\"],\"RO\":[\"40\",\"00\",\"(?:[237]\\\\d|[89]0)\\\\d{7}|[23]\\\\d{5}\",[6,9],[[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"2[3-6]\",\"2[3-6]\\\\d9\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"219|31\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[23]1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[237-9]\"],\"0$1\"]],\"0\",0,0,0,0,0,0,0,\" int \"],\"RS\":[\"381\",\"00\",\"38[02-9]\\\\d{6,9}|6\\\\d{7,9}|90\\\\d{4,8}|38\\\\d{5,6}|(?:7\\\\d\\\\d|800)\\\\d{3,9}|(?:[12]\\\\d|3[0-79])\\\\d{5,10}\",[6,7,8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{3,9})\",\"$1 $2\",[\"(?:2[389]|39)0|[7-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5,10})\",\"$1 $2\",[\"[1-36]\"],\"0$1\"]],\"0\"],\"RU\":[\"7\",\"810\",\"[347-9]\\\\d{9}\",[10],[[\"(\\\\d{4})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"7(?:1[0-8]|2[1-9])\",\"7(?:1(?:[0-6]2|7|8[27])|2(?:1[23]|[2-9]2))\",\"7(?:1(?:[0-6]2|7|8[27])|2(?:13[03-69]|62[013-9]))|72[1-57-9]2\"],\"8 ($1)\",1],[\"(\\\\d{5})(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"7(?:1[0-68]|2[1-9])\",\"7(?:1(?:[06][3-6]|[18]|2[35]|[3-5][3-5])|2(?:[13][3-5]|[24-689]|7[457]))\",\"7(?:1(?:0(?:[356]|4[023])|[18]|2(?:3[013-9]|5)|3[45]|43[013-79]|5(?:3[1-8]|4[1-7]|5)|6(?:3[0-35-9]|[4-6]))|2(?:1(?:3[178]|[45])|[24-689]|3[35]|7[457]))|7(?:14|23)4[0-8]|71(?:33|45)[1-79]\"],\"8 ($1)\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"8 ($1)\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"[3489]\"],\"8 ($1)\",1]],\"8\",0,0,0,0,\"3[04-689]|[489]\",0,\"8~10\"],\"RW\":[\"250\",\"00\",\"(?:06|[27]\\\\d\\\\d|[89]00)\\\\d{6}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"0\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[7-9]\"],\"0$1\"]],\"0\"],\"SA\":[\"966\",\"00\",\"92\\\\d{7}|(?:[15]|8\\\\d)\\\\d{8}\",[9,10],[[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"9\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"5\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"81\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]]],\"0\"],\"SB\":[\"677\",\"0[01]\",\"(?:[1-6]|[7-9]\\\\d\\\\d)\\\\d{4}\",[5,7],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"7|8[4-9]|9(?:[1-8]|9[0-8])\"]]]],\"SC\":[\"248\",\"010|0[0-2]\",\"8000\\\\d{3}|(?:[249]\\\\d|64)\\\\d{5}\",[7],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[246]\"]]],0,0,0,0,0,0,0,\"00\"],\"SD\":[\"249\",\"00\",\"[19]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[19]\"],\"0$1\"]],\"0\"],\"SE\":[\"46\",\"00\",\"(?:[26]\\\\d\\\\d|9)\\\\d{9}|[1-9]\\\\d{8}|[1-689]\\\\d{7}|[1-4689]\\\\d{6}|2\\\\d{5}\",[6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{2,3})(\\\\d{2})\",\"$1-$2 $3\",[\"20\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"9(?:00|39|44)\"],\"0$1\",0,\"$1 $2\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})\",\"$1-$2 $3\",[\"[12][136]|3[356]|4[0246]|6[03]|90[1-9]\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d)(\\\\d{2,3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"8\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2,3})(\\\\d{2})\",\"$1-$2 $3\",[\"1[2457]|2(?:[247-9]|5[0138])|3[0247-9]|4[1357-9]|5[0-35-9]|6(?:[125689]|4[02-57]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d{3})(\\\\d{2,3})(\\\\d{3})\",\"$1-$2 $3\",[\"9(?:00|39|44)\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d{2})(\\\\d{2,3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"1[13689]|2[0136]|3[1356]|4[0246]|54|6[03]|90[1-9]\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"10|7\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"8\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"[13-5]|2(?:[247-9]|5[0138])|6(?:[124-689]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1-$2 $3 $4\",[\"9\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4 $5\",[\"[26]\"],\"0$1\",0,\"$1 $2 $3 $4 $5\"]],\"0\"],\"SG\":[\"65\",\"0[0-3]\\\\d\",\"(?:(?:1\\\\d|8)\\\\d\\\\d|7000)\\\\d{7}|[3689]\\\\d{7}\",[8,10,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[369]|8[1-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{4})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"7\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]]]],\"SH\":[\"290\",\"00\",\"(?:[256]\\\\d|8)\\\\d{3}\",[4,5],0,0,0,0,0,0,\"[256]\"],\"SI\":[\"386\",\"00|10(?:22|66|88|99)\",\"[1-7]\\\\d{7}|8\\\\d{4,7}|90\\\\d{4,6}\",[5,6,7,8],[[\"(\\\\d{2})(\\\\d{3,6})\",\"$1 $2\",[\"8[09]|9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"59|8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[37][01]|4[0139]|51|6\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[1-57]\"],\"(0$1)\"]],\"0\",0,0,0,0,0,0,\"00\"],\"SJ\":[\"47\",\"00\",\"0\\\\d{4}|(?:[4589]\\\\d|79)\\\\d{6}\",[5,8],0,0,0,0,0,0,\"79\"],\"SK\":[\"421\",\"00\",\"[2-689]\\\\d{8}|[2-59]\\\\d{6}|[2-5]\\\\d{5}\",[6,7,9],[[\"(\\\\d)(\\\\d{2})(\\\\d{3,4})\",\"$1 $2 $3\",[\"21\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"[3-5][1-8]1\",\"[3-5][1-8]1[67]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1/$2 $3 $4\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[689]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1/$2 $3 $4\",[\"[3-5]\"],\"0$1\"]],\"0\"],\"SL\":[\"232\",\"00\",\"(?:[2378]\\\\d|99)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[237-9]\"],\"(0$1)\"]],\"0\"],\"SM\":[\"378\",\"00\",\"(?:0549|[5-7]\\\\d)\\\\d{6}\",[8,10],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-7]\"]],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"0\"]]],0,0,\"([89]\\\\d{5})$\",\"0549$1\"],\"SN\":[\"221\",\"00\",\"(?:[378]\\\\d{4}|93330)\\\\d{4}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[379]\"]]]],\"SO\":[\"252\",\"00\",\"[346-9]\\\\d{8}|[12679]\\\\d{7}|(?:[1-4]\\\\d|59)\\\\d{5}|[1348]\\\\d{5}\",[6,7,8,9],[[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"8[125]\"]],[\"(\\\\d{6})\",\"$1\",[\"[134]\"]],[\"(\\\\d)(\\\\d{6})\",\"$1 $2\",[\"1|2[0-79]|3[0-46-8]|4[0-7]|59\"]],[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"24|[67]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[348]|64|79[0-8]|90\"]],[\"(\\\\d{2})(\\\\d{5,7})\",\"$1 $2\",[\"1|28|6[1-35-9]|799|9[2-9]\"]]],\"0\"],\"SR\":[\"597\",\"00\",\"(?:[2-5]|68|[78]\\\\d)\\\\d{5}\",[6,7],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1-$2-$3\",[\"56\"]],[\"(\\\\d{3})(\\\\d{3})\",\"$1-$2\",[\"[2-5]\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[6-8]\"]]]],\"SS\":[\"211\",\"00\",\"[19]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[19]\"],\"0$1\"]],\"0\"],\"ST\":[\"239\",\"00\",\"(?:22|9\\\\d)\\\\d{5}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[29]\"]]]],\"SV\":[\"503\",\"00\",\"[267]\\\\d{7}|[89]00\\\\d{4}(?:\\\\d{4})?\",[7,8,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[89]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[267]\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"]]]],\"SX\":[\"1\",\"011\",\"7215\\\\d{6}|(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|(5\\\\d{6})$\",\"721$1\",0,\"721\"],\"SY\":[\"963\",\"00\",\"[1-39]\\\\d{8}|[1-5]\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[1-5]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"],\"0$1\",1]],\"0\"],\"SZ\":[\"268\",\"00\",\"0800\\\\d{4}|(?:[237]\\\\d|900)\\\\d{6}\",[8,9],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[0237]\"]],[\"(\\\\d{5})(\\\\d{4})\",\"$1 $2\",[\"9\"]]]],\"TA\":[\"290\",\"00\",\"8\\\\d{3}\",[4],0,0,0,0,0,0,\"8\"],\"TC\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|649|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-479]\\\\d{6})$\",\"649$1\",0,\"649\"],\"TD\":[\"235\",\"00|16\",\"(?:22|[69]\\\\d|77)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2679]\"]]],0,0,0,0,0,0,0,\"00\"],\"TG\":[\"228\",\"00\",\"[279]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[279]\"]]]],\"TH\":[\"66\",\"00[1-9]\",\"1\\\\d{8,9}|(?:[2-57]|[689]\\\\d)\\\\d{7}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"14|[3-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]]],\"0\"],\"TJ\":[\"992\",\"810\",\"(?:00|11|[3-579]\\\\d|88)\\\\d{7}\",[9],[[\"(\\\\d{6})(\\\\d)(\\\\d{2})\",\"$1 $2 $3\",[\"331\",\"3317\"],0,1],[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[34]7|91[78]\"],0,1],[\"(\\\\d{4})(\\\\d)(\\\\d{4})\",\"$1 $2 $3\",[\"3\"],0,1],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[0457-9]|11\"],0,1]],\"8\",0,0,0,0,0,0,\"8~10\"],\"TK\":[\"690\",\"00\",\"[2-47]\\\\d{3,6}\",[4,5,6,7]],\"TL\":[\"670\",\"00\",\"7\\\\d{7}|(?:[2-47]\\\\d|[89]0)\\\\d{5}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-489]|70\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"7\"]]]],\"TM\":[\"993\",\"810\",\"[1-6]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"12\"],\"(8 $1)\"],[\"(\\\\d{3})(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"[1-5]\"],\"(8 $1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"6\"],\"8 $1\"]],\"8\",0,0,0,0,0,0,\"8~10\"],\"TN\":[\"216\",\"00\",\"[2-57-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-57-9]\"]]]],\"TO\":[\"676\",\"00\",\"(?:0800|[5-8]\\\\d{3})\\\\d{3}|[2-8]\\\\d{4}\",[5,7],[[\"(\\\\d{2})(\\\\d{3})\",\"$1-$2\",[\"[2-4]|50|6[09]|7[0-24-69]|8[05]\"]],[\"(\\\\d{4})(\\\\d{3})\",\"$1 $2\",[\"0\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[5-8]\"]]]],\"TR\":[\"90\",\"00\",\"(?:4|8\\\\d{5})\\\\d{6}|(?:[2-58]\\\\d\\\\d|900)\\\\d{7}\",[7,10,12],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"512|8[0589]|90\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"5(?:[0-59]|61)\",\"5(?:[0-59]|616)\",\"5(?:[0-59]|6161)\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[24][1-8]|3[1-9]\"],\"(0$1)\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{6})\",\"$1 $2 $3\",[\"80\"],\"0$1\",1]],\"0\"],\"TT\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-46-8]\\\\d{6})$\",\"868$1\",0,\"868\"],\"TV\":[\"688\",\"00\",\"(?:2|7\\\\d\\\\d|90)\\\\d{4}\",[5,6,7]],\"TW\":[\"886\",\"0(?:0[25-79]|19)\",\"[2-689]\\\\d{8}|7\\\\d{9,10}|[2-8]\\\\d{7}|2\\\\d{6}\",[7,8,9,10,11],[[\"(\\\\d{2})(\\\\d)(\\\\d{4})\",\"$1 $2 $3\",[\"202\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[258]0\"],\"0$1\"],[\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"[23568]|4(?:0[02-48]|[1-47-9])|7[1-9]\",\"[23568]|4(?:0[2-48]|[1-47-9])|(?:400|7)[1-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[49]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4,5})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\",0,0,0,0,0,0,0,\"#\"],\"TZ\":[\"255\",\"00[056]\",\"(?:[26-8]\\\\d|41|90)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[24]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[67]\"],\"0$1\"]],\"0\"],\"UA\":[\"380\",\"00\",\"[89]\\\\d{9}|[3-9]\\\\d{8}\",[9,10],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6[12][29]|(?:3[1-8]|4[136-8]|5[12457]|6[49])2|(?:56|65)[24]\",\"6[12][29]|(?:35|4[1378]|5[12457]|6[49])2|(?:56|65)[24]|(?:3[1-46-8]|46)2[013-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"4[45][0-5]|5(?:0|6[37])|6(?:[12][018]|[36-8])|7|89|9[1-9]|(?:48|57)[0137-9]\",\"4[45][0-5]|5(?:0|6(?:3[14-7]|7))|6(?:[12][018]|[36-8])|7|89|9[1-9]|(?:48|57)[0137-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"[3-6]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"]],\"0\",0,0,0,0,0,0,\"0~0\"],\"UG\":[\"256\",\"00[057]\",\"800\\\\d{6}|(?:[29]0|[347]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"202\",\"2024\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"[27-9]|4(?:6[45]|[7-9])\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"[34]\"],\"0$1\"]],\"0\"],\"US\":[\"1\",\"011\",\"[2-9]\\\\d{9}\",[10],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"($1) $2-$3\",[\"[2-9]\"],0,1,\"$1-$2-$3\"]],\"1\",0,0,0,0,0,[[\"(?:2(?:0[1-35-9]|1[02-9]|2[03-589]|3[149]|4[08]|5[1-46]|6[0279]|7[0269]|8[13])|3(?:0[1-57-9]|1[02-9]|2[0135]|3[0-24679]|4[167]|5[12]|6[014]|8[056])|4(?:0[124-9]|1[02-579]|2[3-5]|3[0245]|4[0235]|58|6[39]|7[0589]|8[04])|5(?:0[1-57-9]|1[0235-8]|20|3[0149]|4[01]|5[19]|6[1-47]|7[013-5]|8[056])|6(?:0[1-35-9]|1[024-9]|2[03689]|[34][016]|5[017]|6[0-279]|78|8[0-29])|7(?:0[1-46-8]|1[2-9]|2[04-7]|3[1247]|4[037]|5[47]|6[02359]|7[02-59]|8[156])|8(?:0[1-68]|1[02-8]|2[08]|3[0-28]|4[3578]|5[046-9]|6[02-5]|7[028])|9(?:0[1346-9]|1[02-9]|2[0589]|3[0146-8]|4[0179]|5[12469]|7[0-389]|8[04-69]))[2-9]\\\\d{6}\"],[\"\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"],0,[\"710[2-9]\\\\d{6}\"]]],\"UY\":[\"598\",\"0(?:0|1[3-9]\\\\d)\",\"(?:[249]\\\\d\\\\d|80)\\\\d{5}|9\\\\d{6}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"8|90\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[24]\"]]],\"0\",0,0,0,0,0,0,\"00\",\" int. \"],\"UZ\":[\"998\",\"810\",\"[679]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[679]\"],\"8 $1\"]],\"8\",0,0,0,0,0,0,\"8~10\"],\"VA\":[\"39\",\"00\",\"0\\\\d{5,10}|3[0-8]\\\\d{7,10}|55\\\\d{8}|8\\\\d{5}(?:\\\\d{2,4})?|(?:1\\\\d|39)\\\\d{7,8}\",[6,7,8,9,10,11],0,0,0,0,0,0,\"06698\"],\"VC\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|784|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-7]\\\\d{6})$\",\"784$1\",0,\"784\"],\"VE\":[\"58\",\"00\",\"[89]00\\\\d{7}|(?:[24]\\\\d|50)\\\\d{8}\",[10],[[\"(\\\\d{3})(\\\\d{7})\",\"$1-$2\",[\"[24589]\"],\"0$1\"]],\"0\"],\"VG\":[\"1\",\"011\",\"(?:284|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-578]\\\\d{6})$\",\"284$1\",0,\"284\"],\"VI\":[\"1\",\"011\",\"[58]\\\\d{9}|(?:34|90)0\\\\d{7}\",[10],0,\"1\",0,\"1|([2-9]\\\\d{6})$\",\"340$1\",0,\"340\"],\"VN\":[\"84\",\"00\",\"[12]\\\\d{9}|[135-9]\\\\d{8}|[16]\\\\d{7}|[16-8]\\\\d{6}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"80\"],\"0$1\",1],[\"(\\\\d{4})(\\\\d{4,6})\",\"$1 $2\",[\"1\"],0,1],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[69]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[3578]\"],\"0$1\",1],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2[48]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"],\"0$1\",1]],\"0\"],\"VU\":[\"678\",\"00\",\"(?:[23]\\\\d|[48]8)\\\\d{3}|(?:[57]\\\\d|90)\\\\d{5}\",[5,7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[579]\"]]]],\"WF\":[\"681\",\"00\",\"(?:[45]0|68|72|8\\\\d)\\\\d{4}\",[6],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[4-8]\"]]]],\"WS\":[\"685\",\"0\",\"[2-6]\\\\d{4}|8\\\\d{5}(?:\\\\d{4})?|[78]\\\\d{6}\",[5,6,7,10],[[\"(\\\\d{5})\",\"$1\",[\"[2-6]\"]],[\"(\\\\d{3})(\\\\d{3,7})\",\"$1 $2\",[\"8\"]],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"7\"]]]],\"XK\":[\"383\",\"00\",\"[23]\\\\d{7,8}|(?:4\\\\d\\\\d|[89]00)\\\\d{5}\",[8,9],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-4]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[23]\"],\"0$1\"]],\"0\"],\"YE\":[\"967\",\"00\",\"(?:1|7\\\\d)\\\\d{7}|[1-7]\\\\d{6}\",[7,8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[1-6]|7[24-68]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\"],\"YT\":[\"262\",\"00\",\"80\\\\d{7}|(?:26|63)9\\\\d{6}\",[9],0,\"0\",0,0,0,0,\"269|63\"],\"ZA\":[\"27\",\"00\",\"[1-9]\\\\d{8}|8\\\\d{4,7}\",[5,6,7,8,9],[[\"(\\\\d{2})(\\\\d{3,4})\",\"$1 $2\",[\"8[1-4]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,3})\",\"$1 $2 $3\",[\"8[1-4]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"860\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-9]\"],\"0$1\"]],\"0\"],\"ZM\":[\"260\",\"00\",\"(?:63|80)0\\\\d{6}|(?:21|[79]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[28]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"[79]\"],\"0$1\"]],\"0\"],\"ZW\":[\"263\",\"00\",\"2(?:[0-57-9]\\\\d{6,8}|6[0-24-9]\\\\d{6,7})|[38]\\\\d{9}|[35-8]\\\\d{8}|[3-6]\\\\d{7}|[1-689]\\\\d{6}|[1-3569]\\\\d{5}|[1356]\\\\d{4}\",[5,6,7,8,9,10],[[\"(\\\\d{3})(\\\\d{3,5})\",\"$1 $2\",[\"2(?:0[45]|2[278]|[49]8)|3(?:[09]8|17)|6(?:[29]8|37|75)|[23][78]|(?:33|5[15]|6[68])[78]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2,4})\",\"$1 $2 $3\",[\"[49]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"80\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"24|8[13-59]|(?:2[05-79]|39|5[45]|6[15-8])2\",\"2(?:02[014]|4|[56]20|[79]2)|392|5(?:42|525)|6(?:[16-8]21|52[013])|8[13-59]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2(?:1[39]|2[0157]|[378]|[56][14])|3(?:12|29)\",\"2(?:1[39]|2[0157]|[378]|[56][14])|3(?:123|29)\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,5})\",\"$1 $2\",[\"1|2(?:0[0-36-9]|12|29|[56])|3(?:1[0-689]|[24-6])|5(?:[0236-9]|1[2-4])|6(?:[013-59]|7[0-46-9])|(?:33|55|6[68])[0-69]|(?:29|3[09]|62)[0-79]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"29[013-9]|39|54\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3,5})\",\"$1 $2\",[\"(?:25|54)8\",\"258|5483\"],\"0$1\"]],\"0\"],\"001\":[\"979\",0,\"\\\\d{9}\",[9],[[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\"]]]}}","// This is a legacy function.\n// Use `findNumbers()` instead.\n\nimport _findPhoneNumbers, { searchPhoneNumbers as _searchPhoneNumbers } from './findPhoneNumbers_';\nimport { normalizeArguments } from './parsePhoneNumber';\n\nexport default function findPhoneNumbers() {\n\tvar _normalizeArguments = normalizeArguments(arguments),\n\t    text = _normalizeArguments.text,\n\t    options = _normalizeArguments.options,\n\t    metadata = _normalizeArguments.metadata;\n\n\treturn _findPhoneNumbers(text, options, metadata);\n}\n\n/**\r\n * @return ES6 `for ... of` iterator.\r\n */\nexport function searchPhoneNumbers() {\n\tvar _normalizeArguments2 = normalizeArguments(arguments),\n\t    text = _normalizeArguments2.text,\n\t    options = _normalizeArguments2.options,\n\t    metadata = _normalizeArguments2.metadata;\n\n\treturn _searchPhoneNumbers(text, options, metadata);\n}\n//# sourceMappingURL=findPhoneNumbers.js.map","import _isValidNumber from './validate_';\nimport { normalizeArguments } from './getNumberType';\n\n// Finds out national phone number type (fixed line, mobile, etc)\nexport default function isValidNumber() {\n\tvar _normalizeArguments = normalizeArguments(arguments),\n\t    input = _normalizeArguments.input,\n\t    options = _normalizeArguments.options,\n\t    metadata = _normalizeArguments.metadata;\n\n\treturn _isValidNumber(input, options, metadata);\n}\n//# sourceMappingURL=validate.js.map","var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nimport _formatNumber from './format_';\nimport parse from './parse_';\n\nexport default function formatNumber() {\n\tvar _normalizeArguments = normalizeArguments(arguments),\n\t    input = _normalizeArguments.input,\n\t    format = _normalizeArguments.format,\n\t    options = _normalizeArguments.options,\n\t    metadata = _normalizeArguments.metadata;\n\n\treturn _formatNumber(input, format, options, metadata);\n}\n\n// Sort out arguments\nfunction normalizeArguments(args) {\n\tvar _Array$prototype$slic = Array.prototype.slice.call(args),\n\t    _Array$prototype$slic2 = _slicedToArray(_Array$prototype$slic, 5),\n\t    arg_1 = _Array$prototype$slic2[0],\n\t    arg_2 = _Array$prototype$slic2[1],\n\t    arg_3 = _Array$prototype$slic2[2],\n\t    arg_4 = _Array$prototype$slic2[3],\n\t    arg_5 = _Array$prototype$slic2[4];\n\n\tvar input = void 0;\n\tvar format = void 0;\n\tvar options = void 0;\n\tvar metadata = void 0;\n\n\t// Sort out arguments.\n\n\t// If the phone number is passed as a string.\n\t// `format('8005553535', ...)`.\n\tif (typeof arg_1 === 'string') {\n\t\t// If country code is supplied.\n\t\t// `format('8005553535', 'RU', 'NATIONAL', [options], metadata)`.\n\t\tif (typeof arg_3 === 'string') {\n\t\t\tformat = arg_3;\n\n\t\t\tif (arg_5) {\n\t\t\t\toptions = arg_4;\n\t\t\t\tmetadata = arg_5;\n\t\t\t} else {\n\t\t\t\tmetadata = arg_4;\n\t\t\t}\n\n\t\t\tinput = parse(arg_1, { defaultCountry: arg_2, extended: true }, metadata);\n\t\t}\n\t\t// Just an international phone number is supplied\n\t\t// `format('+78005553535', 'NATIONAL', [options], metadata)`.\n\t\telse {\n\t\t\t\tif (typeof arg_2 !== 'string') {\n\t\t\t\t\tthrow new Error('`format` argument not passed to `formatNumber(number, format)`');\n\t\t\t\t}\n\n\t\t\t\tformat = arg_2;\n\n\t\t\t\tif (arg_4) {\n\t\t\t\t\toptions = arg_3;\n\t\t\t\t\tmetadata = arg_4;\n\t\t\t\t} else {\n\t\t\t\t\tmetadata = arg_3;\n\t\t\t\t}\n\n\t\t\t\tinput = parse(arg_1, { extended: true }, metadata);\n\t\t\t}\n\t}\n\t// If the phone number is passed as a parsed number object.\n\t// `format({ phone: '8005553535', country: 'RU' }, 'NATIONAL', [options], metadata)`.\n\telse if (is_object(arg_1)) {\n\t\t\tinput = arg_1;\n\t\t\tformat = arg_2;\n\n\t\t\tif (arg_4) {\n\t\t\t\toptions = arg_3;\n\t\t\t\tmetadata = arg_4;\n\t\t\t} else {\n\t\t\t\tmetadata = arg_3;\n\t\t\t}\n\t\t} else throw new TypeError('A phone number must either be a string or an object of shape { phone, [country] }.');\n\n\t// Legacy lowercase formats.\n\tif (format === 'International') {\n\t\tformat = 'INTERNATIONAL';\n\t} else if (format === 'National') {\n\t\tformat = 'NATIONAL';\n\t}\n\n\treturn {\n\t\tinput: input,\n\t\tformat: format,\n\t\toptions: options,\n\t\tmetadata: metadata\n\t};\n}\n\n// Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n/* istanbul ignore next */\nvar is_object = function is_object(_) {\n\treturn (typeof _ === 'undefined' ? 'undefined' : _typeof(_)) === 'object';\n};\n//# sourceMappingURL=format.js.map","import _parseNumber from './parse_';\nimport { normalizeArguments } from './parsePhoneNumber';\n\n// `options`:\n//  {\n//    country:\n//    {\n//      restrict - (a two-letter country code)\n//                 the phone number must be in this country\n//\n//      default - (a two-letter country code)\n//                default country to use for phone number parsing and validation\n//                (if no country code could be derived from the phone number)\n//    }\n//  }\n//\n// Returns `{ country, number }`\n//\n// Example use cases:\n//\n// ```js\n// parse('8 (800) 555-35-35', 'RU')\n// parse('8 (800) 555-35-35', 'RU', metadata)\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } })\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } }, metadata)\n// parse('+7 800 555 35 35')\n// parse('+7 800 555 35 35', metadata)\n// ```\n//\nexport default function parseNumber() {\n\tvar _normalizeArguments = normalizeArguments(arguments),\n\t    text = _normalizeArguments.text,\n\t    options = _normalizeArguments.options,\n\t    metadata = _normalizeArguments.metadata;\n\n\treturn _parseNumber(text, options, metadata);\n}\n//# sourceMappingURL=parse.js.map","// Copy-pasted from:\n// https://github.com/substack/semver-compare/blob/master/index.js\n//\n// Inlining this function because some users reported issues with\n// importing from `semver-compare` in a browser with ES6 \"native\" modules.\nexport default function cmp(a, b) {\n    var pa = a.split('.');\n    var pb = b.split('.');\n    for (var i = 0; i < 3; i++) {\n        var na = Number(pa[i]);\n        var nb = Number(pb[i]);\n        if (na > nb) return 1;\n        if (nb > na) return -1;\n        if (!isNaN(na) && isNaN(nb)) return 1;\n        if (isNaN(na) && !isNaN(nb)) return -1;\n    }\n    return 0;\n};\n//# sourceMappingURL=semver-compare.js.map","// Deprecated.\r\n// Use `libphonenumber-js/min` or `libphonenumber-js/max` or `libphonenumber-js/core` instead.\r\n\r\n// Importing from `.json.js` a workaround for a bug in web browsers' \"native\"\r\n// ES6 importing system which is uncapable of importing \"*.json\" files.\r\n// https://github.com/catamphetamine/libphonenumber-js/issues/239\r\nimport metadata from './metadata.min.json.js'\r\n\r\nimport parsePhoneNumberCustom from './es6/parsePhoneNumber'\r\nimport parsePhoneNumberFromStringCustom from './es6/parsePhoneNumberFromString'\r\n\r\nimport parseNumberCustom from './es6/parse'\r\nimport formatNumberCustom from './es6/format'\r\nimport getNumberTypeCustom from './es6/getNumberType'\r\nimport getExampleNumberCustom from './es6/getExampleNumber'\r\nimport isPossibleNumberCustom from './es6/isPossibleNumber'\r\nimport isValidNumberCustom from './es6/validate'\r\nimport isValidNumberForRegionCustom from './es6/isValidNumberForRegion'\r\n\r\n// Deprecated\r\nimport findPhoneNumbersCustom, { searchPhoneNumbers as searchPhoneNumbersCustom } from './es6/findPhoneNumbers'\r\nimport { PhoneNumberSearch as PhoneNumberSearchCustom } from './es6/findPhoneNumbers_'\r\n\r\nimport findNumbersCustom from './es6/findNumbers'\r\nimport searchNumbersCustom from './es6/searchNumbers'\r\nimport findPhoneNumbersInTextCustom from './es6/findPhoneNumbersInText'\r\nimport searchPhoneNumbersInTextCustom from './es6/searchPhoneNumbersInText'\r\nimport PhoneNumberMatcherCustom from './es6/PhoneNumberMatcher'\r\n\r\nimport AsYouTypeCustom from './es6/AsYouType'\r\n\r\nimport getCountryCallingCodeCustom from './es6/getCountryCallingCode'\r\nimport getCountriesCustom from './es6/getCountries'\r\nexport { default as Metadata } from './es6/metadata'\r\nimport { getExtPrefix as getExtPrefixCustom, isSupportedCountry as isSupportedCountryCustom } from './es6/metadata'\r\nimport { parseRFC3966 as parseRFC3966Custom, formatRFC3966 as formatRFC3966Custom } from './es6/RFC3966'\r\nimport formatIncompletePhoneNumberCustom from './es6/formatIncompletePhoneNumber'\r\nexport { default as parseIncompletePhoneNumber, parsePhoneNumberCharacter } from './es6/parseIncompletePhoneNumber'\r\n// Deprecated: remove DIGITS export in 2.0.0.\r\n// (it was used in `react-phone-number-input`)\r\nexport { DIGITS, default as parseDigits } from './es6/parseDigits'\r\nexport { default as ParseError } from './es6/ParseError'\r\n\r\nexport function parsePhoneNumber()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn parsePhoneNumberCustom.apply(this, parameters)\r\n}\r\n\r\nexport function parsePhoneNumberFromString()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn parsePhoneNumberFromStringCustom.apply(this, parameters)\r\n}\r\n\r\nexport function parseNumber()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn parseNumberCustom.apply(this, parameters)\r\n}\r\n\r\n// Deprecated: remove `parse()` export in 2.0.0.\r\n// (renamed to `parseNumber()`)\r\nexport function parse()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn parseNumberCustom.apply(this, parameters)\r\n}\r\n\r\nexport function formatNumber()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn formatNumberCustom.apply(this, parameters)\r\n}\r\n\r\n// Deprecated: remove `format()` export in 2.0.0.\r\n// (renamed to `formatNumber()`)\r\nexport function format()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn formatNumberCustom.apply(this, parameters)\r\n}\r\n\r\nexport function getNumberType()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn getNumberTypeCustom.apply(this, parameters)\r\n}\r\n\r\nexport function getExampleNumber()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn getExampleNumberCustom.apply(this, parameters)\r\n}\r\n\r\nexport function isPossibleNumber()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn isPossibleNumberCustom.apply(this, parameters)\r\n}\r\n\r\nexport function isValidNumber()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn isValidNumberCustom.apply(this, parameters)\r\n}\r\n\r\nexport function isValidNumberForRegion()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn isValidNumberForRegionCustom.apply(this, parameters)\r\n}\r\n\r\n// Deprecated.\r\nexport function findPhoneNumbers()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn findPhoneNumbersCustom.apply(this, parameters)\r\n}\r\n\r\n// Deprecated.\r\nexport function searchPhoneNumbers()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn searchPhoneNumbersCustom.apply(this, parameters)\r\n}\r\n\r\n// Deprecated.\r\nexport function PhoneNumberSearch(text, options)\r\n{\r\n\tPhoneNumberSearchCustom.call(this, text, options, metadata)\r\n}\r\n\r\n// Deprecated.\r\nPhoneNumberSearch.prototype = Object.create(PhoneNumberSearchCustom.prototype, {})\r\nPhoneNumberSearch.prototype.constructor = PhoneNumberSearch\r\n\r\nexport function findNumbers()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn findNumbersCustom.apply(this, parameters)\r\n}\r\n\r\nexport function searchNumbers()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn searchNumbersCustom.apply(this, parameters)\r\n}\r\n\r\nexport function findPhoneNumbersInText()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn findPhoneNumbersInTextCustom.apply(this, parameters)\r\n}\r\n\r\nexport function searchPhoneNumbersInText()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn searchPhoneNumbersInTextCustom.apply(this, parameters)\r\n}\r\n\r\nexport function PhoneNumberMatcher(text, options)\r\n{\r\n\tPhoneNumberMatcherCustom.call(this, text, options, metadata)\r\n}\r\n\r\nPhoneNumberMatcher.prototype = Object.create(PhoneNumberMatcherCustom.prototype, {})\r\nPhoneNumberMatcher.prototype.constructor = PhoneNumberMatcher\r\n\r\nexport function AsYouType(country)\r\n{\r\n\tAsYouTypeCustom.call(this, country, metadata)\r\n}\r\n\r\nAsYouType.prototype = Object.create(AsYouTypeCustom.prototype, {})\r\nAsYouType.prototype.constructor = AsYouType\r\n\r\nexport function isSupportedCountry()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn isSupportedCountryCustom.apply(this, parameters)\r\n}\r\n\r\nexport function getExtPrefix()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn getExtPrefixCustom.apply(this, parameters)\r\n}\r\n\r\nexport function parseRFC3966()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn parseRFC3966Custom.apply(this, parameters)\r\n}\r\n\r\nexport function formatRFC3966()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn formatRFC3966Custom.apply(this, parameters)\r\n}\r\n\r\nexport function formatIncompletePhoneNumber()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn formatIncompletePhoneNumberCustom.apply(this, parameters)\r\n}\r\n\r\n// Deprecated: remove this in 2.0.0 and make `custom.js` in ES6\r\n// (the old `custom.js` becomes `custom.commonjs.js`).\r\nexport { default as parseCustom } from './es6/parse'\r\nexport { default as formatCustom } from './es6/format'\r\nexport { default as isValidNumberCustom } from './es6/validate'\r\nexport { default as findPhoneNumbersCustom } from './es6/findPhoneNumbers'\r\nexport { searchPhoneNumbers as searchPhoneNumbersCustom } from './es6/findPhoneNumbers'\r\nexport { PhoneNumberSearch as PhoneNumberSearchCustom } from './es6/findPhoneNumbers_'\r\nexport { default as getNumberTypeCustom } from './es6/getNumberType'\r\nexport { default as getCountryCallingCodeCustom } from './es6/getCountryCallingCode'\r\n\r\nexport\r\n{\r\n\tdefault as AsYouTypeCustom,\r\n\t// Deprecated: `DIGIT_PLACEHOLDER` was used by `react-phone-number-input`.\r\n\t// Seems to be not used anymore.\r\n\tDIGIT_PLACEHOLDER\r\n}\r\nfrom './es6/AsYouType'\r\n\r\nexport function getCountries()\r\n{\r\n\treturn getCountriesCustom(metadata)\r\n}\r\n\r\nexport function getCountryCallingCode(country)\r\n{\r\n\treturn getCountryCallingCodeCustom(country, metadata)\r\n}\r\n\r\n// `getPhoneCode` name is deprecated, use `getCountryCallingCode` instead.\r\nexport function getPhoneCode(country)\r\n{\r\n\treturn getCountryCallingCode(country)\r\n}\r\n\r\n// `getPhoneCodeCustom` name is deprecated, use `getCountryCallingCodeCustom` instead.\r\nexport function getPhoneCodeCustom(country, metadata)\r\n{\r\n\treturn getCountryCallingCodeCustom(country, metadata)\r\n}"],"sourceRoot":""}